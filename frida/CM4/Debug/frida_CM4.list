
frida_CM4.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08100000  08100000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00011b50  08100298  08100298  00010298  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000240  08111de8  08111de8  00021de8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08112028  08112028  00022028  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08112030  08112030  00022030  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  08112034  08112034  00022034  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000038  10000000  08112038  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .RxDecripSection 00000060  10000038  08112070  00030038  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .TxDecripSection 00000060  10000098  081120d0  00030098  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001138  100000f8  08112130  000300f8  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  10001230  08112130  00031230  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000300f8  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00030128  2**0
                  CONTENTS, READONLY
 13 .debug_info   0003b024  00000000  00000000  0003016b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000067d1  00000000  00000000  0006b18f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00002ce8  00000000  00000000  00071960  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00002370  00000000  00000000  00074648  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0004f102  00000000  00000000  000769b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0003a522  00000000  00000000  000c5aba  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    001f52c7  00000000  00000000  000fffdc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  0000c50c  00000000  00000000  002f52a4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000060  00000000  00000000  003017b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08100298 <__do_global_dtors_aux>:
 8100298:	b510      	push	{r4, lr}
 810029a:	4c05      	ldr	r4, [pc, #20]	; (81002b0 <__do_global_dtors_aux+0x18>)
 810029c:	7823      	ldrb	r3, [r4, #0]
 810029e:	b933      	cbnz	r3, 81002ae <__do_global_dtors_aux+0x16>
 81002a0:	4b04      	ldr	r3, [pc, #16]	; (81002b4 <__do_global_dtors_aux+0x1c>)
 81002a2:	b113      	cbz	r3, 81002aa <__do_global_dtors_aux+0x12>
 81002a4:	4804      	ldr	r0, [pc, #16]	; (81002b8 <__do_global_dtors_aux+0x20>)
 81002a6:	f3af 8000 	nop.w
 81002aa:	2301      	movs	r3, #1
 81002ac:	7023      	strb	r3, [r4, #0]
 81002ae:	bd10      	pop	{r4, pc}
 81002b0:	100000f8 	.word	0x100000f8
 81002b4:	00000000 	.word	0x00000000
 81002b8:	08111dd0 	.word	0x08111dd0

081002bc <frame_dummy>:
 81002bc:	b508      	push	{r3, lr}
 81002be:	4b03      	ldr	r3, [pc, #12]	; (81002cc <frame_dummy+0x10>)
 81002c0:	b11b      	cbz	r3, 81002ca <frame_dummy+0xe>
 81002c2:	4903      	ldr	r1, [pc, #12]	; (81002d0 <frame_dummy+0x14>)
 81002c4:	4803      	ldr	r0, [pc, #12]	; (81002d4 <frame_dummy+0x18>)
 81002c6:	f3af 8000 	nop.w
 81002ca:	bd08      	pop	{r3, pc}
 81002cc:	00000000 	.word	0x00000000
 81002d0:	100000fc 	.word	0x100000fc
 81002d4:	08111dd0 	.word	0x08111dd0

081002d8 <strlen>:
 81002d8:	4603      	mov	r3, r0
 81002da:	f813 2b01 	ldrb.w	r2, [r3], #1
 81002de:	2a00      	cmp	r2, #0
 81002e0:	d1fb      	bne.n	81002da <strlen+0x2>
 81002e2:	1a18      	subs	r0, r3, r0
 81002e4:	3801      	subs	r0, #1
 81002e6:	4770      	bx	lr

081002e8 <__aeabi_uldivmod>:
 81002e8:	b953      	cbnz	r3, 8100300 <__aeabi_uldivmod+0x18>
 81002ea:	b94a      	cbnz	r2, 8100300 <__aeabi_uldivmod+0x18>
 81002ec:	2900      	cmp	r1, #0
 81002ee:	bf08      	it	eq
 81002f0:	2800      	cmpeq	r0, #0
 81002f2:	bf1c      	itt	ne
 81002f4:	f04f 31ff 	movne.w	r1, #4294967295
 81002f8:	f04f 30ff 	movne.w	r0, #4294967295
 81002fc:	f000 b970 	b.w	81005e0 <__aeabi_idiv0>
 8100300:	f1ad 0c08 	sub.w	ip, sp, #8
 8100304:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8100308:	f000 f806 	bl	8100318 <__udivmoddi4>
 810030c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8100310:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8100314:	b004      	add	sp, #16
 8100316:	4770      	bx	lr

08100318 <__udivmoddi4>:
 8100318:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 810031c:	9e08      	ldr	r6, [sp, #32]
 810031e:	460d      	mov	r5, r1
 8100320:	4604      	mov	r4, r0
 8100322:	460f      	mov	r7, r1
 8100324:	2b00      	cmp	r3, #0
 8100326:	d14a      	bne.n	81003be <__udivmoddi4+0xa6>
 8100328:	428a      	cmp	r2, r1
 810032a:	4694      	mov	ip, r2
 810032c:	d965      	bls.n	81003fa <__udivmoddi4+0xe2>
 810032e:	fab2 f382 	clz	r3, r2
 8100332:	b143      	cbz	r3, 8100346 <__udivmoddi4+0x2e>
 8100334:	fa02 fc03 	lsl.w	ip, r2, r3
 8100338:	f1c3 0220 	rsb	r2, r3, #32
 810033c:	409f      	lsls	r7, r3
 810033e:	fa20 f202 	lsr.w	r2, r0, r2
 8100342:	4317      	orrs	r7, r2
 8100344:	409c      	lsls	r4, r3
 8100346:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 810034a:	fa1f f58c 	uxth.w	r5, ip
 810034e:	fbb7 f1fe 	udiv	r1, r7, lr
 8100352:	0c22      	lsrs	r2, r4, #16
 8100354:	fb0e 7711 	mls	r7, lr, r1, r7
 8100358:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 810035c:	fb01 f005 	mul.w	r0, r1, r5
 8100360:	4290      	cmp	r0, r2
 8100362:	d90a      	bls.n	810037a <__udivmoddi4+0x62>
 8100364:	eb1c 0202 	adds.w	r2, ip, r2
 8100368:	f101 37ff 	add.w	r7, r1, #4294967295
 810036c:	f080 811c 	bcs.w	81005a8 <__udivmoddi4+0x290>
 8100370:	4290      	cmp	r0, r2
 8100372:	f240 8119 	bls.w	81005a8 <__udivmoddi4+0x290>
 8100376:	3902      	subs	r1, #2
 8100378:	4462      	add	r2, ip
 810037a:	1a12      	subs	r2, r2, r0
 810037c:	b2a4      	uxth	r4, r4
 810037e:	fbb2 f0fe 	udiv	r0, r2, lr
 8100382:	fb0e 2210 	mls	r2, lr, r0, r2
 8100386:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 810038a:	fb00 f505 	mul.w	r5, r0, r5
 810038e:	42a5      	cmp	r5, r4
 8100390:	d90a      	bls.n	81003a8 <__udivmoddi4+0x90>
 8100392:	eb1c 0404 	adds.w	r4, ip, r4
 8100396:	f100 32ff 	add.w	r2, r0, #4294967295
 810039a:	f080 8107 	bcs.w	81005ac <__udivmoddi4+0x294>
 810039e:	42a5      	cmp	r5, r4
 81003a0:	f240 8104 	bls.w	81005ac <__udivmoddi4+0x294>
 81003a4:	4464      	add	r4, ip
 81003a6:	3802      	subs	r0, #2
 81003a8:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 81003ac:	1b64      	subs	r4, r4, r5
 81003ae:	2100      	movs	r1, #0
 81003b0:	b11e      	cbz	r6, 81003ba <__udivmoddi4+0xa2>
 81003b2:	40dc      	lsrs	r4, r3
 81003b4:	2300      	movs	r3, #0
 81003b6:	e9c6 4300 	strd	r4, r3, [r6]
 81003ba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 81003be:	428b      	cmp	r3, r1
 81003c0:	d908      	bls.n	81003d4 <__udivmoddi4+0xbc>
 81003c2:	2e00      	cmp	r6, #0
 81003c4:	f000 80ed 	beq.w	81005a2 <__udivmoddi4+0x28a>
 81003c8:	2100      	movs	r1, #0
 81003ca:	e9c6 0500 	strd	r0, r5, [r6]
 81003ce:	4608      	mov	r0, r1
 81003d0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 81003d4:	fab3 f183 	clz	r1, r3
 81003d8:	2900      	cmp	r1, #0
 81003da:	d149      	bne.n	8100470 <__udivmoddi4+0x158>
 81003dc:	42ab      	cmp	r3, r5
 81003de:	d302      	bcc.n	81003e6 <__udivmoddi4+0xce>
 81003e0:	4282      	cmp	r2, r0
 81003e2:	f200 80f8 	bhi.w	81005d6 <__udivmoddi4+0x2be>
 81003e6:	1a84      	subs	r4, r0, r2
 81003e8:	eb65 0203 	sbc.w	r2, r5, r3
 81003ec:	2001      	movs	r0, #1
 81003ee:	4617      	mov	r7, r2
 81003f0:	2e00      	cmp	r6, #0
 81003f2:	d0e2      	beq.n	81003ba <__udivmoddi4+0xa2>
 81003f4:	e9c6 4700 	strd	r4, r7, [r6]
 81003f8:	e7df      	b.n	81003ba <__udivmoddi4+0xa2>
 81003fa:	b902      	cbnz	r2, 81003fe <__udivmoddi4+0xe6>
 81003fc:	deff      	udf	#255	; 0xff
 81003fe:	fab2 f382 	clz	r3, r2
 8100402:	2b00      	cmp	r3, #0
 8100404:	f040 8090 	bne.w	8100528 <__udivmoddi4+0x210>
 8100408:	1a8a      	subs	r2, r1, r2
 810040a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 810040e:	fa1f fe8c 	uxth.w	lr, ip
 8100412:	2101      	movs	r1, #1
 8100414:	fbb2 f5f7 	udiv	r5, r2, r7
 8100418:	fb07 2015 	mls	r0, r7, r5, r2
 810041c:	0c22      	lsrs	r2, r4, #16
 810041e:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8100422:	fb0e f005 	mul.w	r0, lr, r5
 8100426:	4290      	cmp	r0, r2
 8100428:	d908      	bls.n	810043c <__udivmoddi4+0x124>
 810042a:	eb1c 0202 	adds.w	r2, ip, r2
 810042e:	f105 38ff 	add.w	r8, r5, #4294967295
 8100432:	d202      	bcs.n	810043a <__udivmoddi4+0x122>
 8100434:	4290      	cmp	r0, r2
 8100436:	f200 80cb 	bhi.w	81005d0 <__udivmoddi4+0x2b8>
 810043a:	4645      	mov	r5, r8
 810043c:	1a12      	subs	r2, r2, r0
 810043e:	b2a4      	uxth	r4, r4
 8100440:	fbb2 f0f7 	udiv	r0, r2, r7
 8100444:	fb07 2210 	mls	r2, r7, r0, r2
 8100448:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 810044c:	fb0e fe00 	mul.w	lr, lr, r0
 8100450:	45a6      	cmp	lr, r4
 8100452:	d908      	bls.n	8100466 <__udivmoddi4+0x14e>
 8100454:	eb1c 0404 	adds.w	r4, ip, r4
 8100458:	f100 32ff 	add.w	r2, r0, #4294967295
 810045c:	d202      	bcs.n	8100464 <__udivmoddi4+0x14c>
 810045e:	45a6      	cmp	lr, r4
 8100460:	f200 80bb 	bhi.w	81005da <__udivmoddi4+0x2c2>
 8100464:	4610      	mov	r0, r2
 8100466:	eba4 040e 	sub.w	r4, r4, lr
 810046a:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 810046e:	e79f      	b.n	81003b0 <__udivmoddi4+0x98>
 8100470:	f1c1 0720 	rsb	r7, r1, #32
 8100474:	408b      	lsls	r3, r1
 8100476:	fa22 fc07 	lsr.w	ip, r2, r7
 810047a:	ea4c 0c03 	orr.w	ip, ip, r3
 810047e:	fa05 f401 	lsl.w	r4, r5, r1
 8100482:	fa20 f307 	lsr.w	r3, r0, r7
 8100486:	40fd      	lsrs	r5, r7
 8100488:	ea4f 491c 	mov.w	r9, ip, lsr #16
 810048c:	4323      	orrs	r3, r4
 810048e:	fbb5 f8f9 	udiv	r8, r5, r9
 8100492:	fa1f fe8c 	uxth.w	lr, ip
 8100496:	fb09 5518 	mls	r5, r9, r8, r5
 810049a:	0c1c      	lsrs	r4, r3, #16
 810049c:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 81004a0:	fb08 f50e 	mul.w	r5, r8, lr
 81004a4:	42a5      	cmp	r5, r4
 81004a6:	fa02 f201 	lsl.w	r2, r2, r1
 81004aa:	fa00 f001 	lsl.w	r0, r0, r1
 81004ae:	d90b      	bls.n	81004c8 <__udivmoddi4+0x1b0>
 81004b0:	eb1c 0404 	adds.w	r4, ip, r4
 81004b4:	f108 3aff 	add.w	sl, r8, #4294967295
 81004b8:	f080 8088 	bcs.w	81005cc <__udivmoddi4+0x2b4>
 81004bc:	42a5      	cmp	r5, r4
 81004be:	f240 8085 	bls.w	81005cc <__udivmoddi4+0x2b4>
 81004c2:	f1a8 0802 	sub.w	r8, r8, #2
 81004c6:	4464      	add	r4, ip
 81004c8:	1b64      	subs	r4, r4, r5
 81004ca:	b29d      	uxth	r5, r3
 81004cc:	fbb4 f3f9 	udiv	r3, r4, r9
 81004d0:	fb09 4413 	mls	r4, r9, r3, r4
 81004d4:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 81004d8:	fb03 fe0e 	mul.w	lr, r3, lr
 81004dc:	45a6      	cmp	lr, r4
 81004de:	d908      	bls.n	81004f2 <__udivmoddi4+0x1da>
 81004e0:	eb1c 0404 	adds.w	r4, ip, r4
 81004e4:	f103 35ff 	add.w	r5, r3, #4294967295
 81004e8:	d26c      	bcs.n	81005c4 <__udivmoddi4+0x2ac>
 81004ea:	45a6      	cmp	lr, r4
 81004ec:	d96a      	bls.n	81005c4 <__udivmoddi4+0x2ac>
 81004ee:	3b02      	subs	r3, #2
 81004f0:	4464      	add	r4, ip
 81004f2:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 81004f6:	fba3 9502 	umull	r9, r5, r3, r2
 81004fa:	eba4 040e 	sub.w	r4, r4, lr
 81004fe:	42ac      	cmp	r4, r5
 8100500:	46c8      	mov	r8, r9
 8100502:	46ae      	mov	lr, r5
 8100504:	d356      	bcc.n	81005b4 <__udivmoddi4+0x29c>
 8100506:	d053      	beq.n	81005b0 <__udivmoddi4+0x298>
 8100508:	b156      	cbz	r6, 8100520 <__udivmoddi4+0x208>
 810050a:	ebb0 0208 	subs.w	r2, r0, r8
 810050e:	eb64 040e 	sbc.w	r4, r4, lr
 8100512:	fa04 f707 	lsl.w	r7, r4, r7
 8100516:	40ca      	lsrs	r2, r1
 8100518:	40cc      	lsrs	r4, r1
 810051a:	4317      	orrs	r7, r2
 810051c:	e9c6 7400 	strd	r7, r4, [r6]
 8100520:	4618      	mov	r0, r3
 8100522:	2100      	movs	r1, #0
 8100524:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8100528:	f1c3 0120 	rsb	r1, r3, #32
 810052c:	fa02 fc03 	lsl.w	ip, r2, r3
 8100530:	fa20 f201 	lsr.w	r2, r0, r1
 8100534:	fa25 f101 	lsr.w	r1, r5, r1
 8100538:	409d      	lsls	r5, r3
 810053a:	432a      	orrs	r2, r5
 810053c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8100540:	fa1f fe8c 	uxth.w	lr, ip
 8100544:	fbb1 f0f7 	udiv	r0, r1, r7
 8100548:	fb07 1510 	mls	r5, r7, r0, r1
 810054c:	0c11      	lsrs	r1, r2, #16
 810054e:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8100552:	fb00 f50e 	mul.w	r5, r0, lr
 8100556:	428d      	cmp	r5, r1
 8100558:	fa04 f403 	lsl.w	r4, r4, r3
 810055c:	d908      	bls.n	8100570 <__udivmoddi4+0x258>
 810055e:	eb1c 0101 	adds.w	r1, ip, r1
 8100562:	f100 38ff 	add.w	r8, r0, #4294967295
 8100566:	d22f      	bcs.n	81005c8 <__udivmoddi4+0x2b0>
 8100568:	428d      	cmp	r5, r1
 810056a:	d92d      	bls.n	81005c8 <__udivmoddi4+0x2b0>
 810056c:	3802      	subs	r0, #2
 810056e:	4461      	add	r1, ip
 8100570:	1b49      	subs	r1, r1, r5
 8100572:	b292      	uxth	r2, r2
 8100574:	fbb1 f5f7 	udiv	r5, r1, r7
 8100578:	fb07 1115 	mls	r1, r7, r5, r1
 810057c:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8100580:	fb05 f10e 	mul.w	r1, r5, lr
 8100584:	4291      	cmp	r1, r2
 8100586:	d908      	bls.n	810059a <__udivmoddi4+0x282>
 8100588:	eb1c 0202 	adds.w	r2, ip, r2
 810058c:	f105 38ff 	add.w	r8, r5, #4294967295
 8100590:	d216      	bcs.n	81005c0 <__udivmoddi4+0x2a8>
 8100592:	4291      	cmp	r1, r2
 8100594:	d914      	bls.n	81005c0 <__udivmoddi4+0x2a8>
 8100596:	3d02      	subs	r5, #2
 8100598:	4462      	add	r2, ip
 810059a:	1a52      	subs	r2, r2, r1
 810059c:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 81005a0:	e738      	b.n	8100414 <__udivmoddi4+0xfc>
 81005a2:	4631      	mov	r1, r6
 81005a4:	4630      	mov	r0, r6
 81005a6:	e708      	b.n	81003ba <__udivmoddi4+0xa2>
 81005a8:	4639      	mov	r1, r7
 81005aa:	e6e6      	b.n	810037a <__udivmoddi4+0x62>
 81005ac:	4610      	mov	r0, r2
 81005ae:	e6fb      	b.n	81003a8 <__udivmoddi4+0x90>
 81005b0:	4548      	cmp	r0, r9
 81005b2:	d2a9      	bcs.n	8100508 <__udivmoddi4+0x1f0>
 81005b4:	ebb9 0802 	subs.w	r8, r9, r2
 81005b8:	eb65 0e0c 	sbc.w	lr, r5, ip
 81005bc:	3b01      	subs	r3, #1
 81005be:	e7a3      	b.n	8100508 <__udivmoddi4+0x1f0>
 81005c0:	4645      	mov	r5, r8
 81005c2:	e7ea      	b.n	810059a <__udivmoddi4+0x282>
 81005c4:	462b      	mov	r3, r5
 81005c6:	e794      	b.n	81004f2 <__udivmoddi4+0x1da>
 81005c8:	4640      	mov	r0, r8
 81005ca:	e7d1      	b.n	8100570 <__udivmoddi4+0x258>
 81005cc:	46d0      	mov	r8, sl
 81005ce:	e77b      	b.n	81004c8 <__udivmoddi4+0x1b0>
 81005d0:	3d02      	subs	r5, #2
 81005d2:	4462      	add	r2, ip
 81005d4:	e732      	b.n	810043c <__udivmoddi4+0x124>
 81005d6:	4608      	mov	r0, r1
 81005d8:	e70a      	b.n	81003f0 <__udivmoddi4+0xd8>
 81005da:	4464      	add	r4, ip
 81005dc:	3802      	subs	r0, #2
 81005de:	e742      	b.n	8100466 <__udivmoddi4+0x14e>

081005e0 <__aeabi_idiv0>:
 81005e0:	4770      	bx	lr
 81005e2:	bf00      	nop

081005e4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 81005e4:	b480      	push	{r7}
 81005e6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 81005e8:	4b09      	ldr	r3, [pc, #36]	; (8100610 <SystemInit+0x2c>)
 81005ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 81005ee:	4a08      	ldr	r2, [pc, #32]	; (8100610 <SystemInit+0x2c>)
 81005f0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 81005f4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

    /*SEVONPEND enabled so that an interrupt coming from the CPU(n) interrupt signal is
     detectable by the CPU after a WFI/WFE instruction.*/
 SCB->SCR |= SCB_SCR_SEVONPEND_Msk;
 81005f8:	4b05      	ldr	r3, [pc, #20]	; (8100610 <SystemInit+0x2c>)
 81005fa:	691b      	ldr	r3, [r3, #16]
 81005fc:	4a04      	ldr	r2, [pc, #16]	; (8100610 <SystemInit+0x2c>)
 81005fe:	f043 0310 	orr.w	r3, r3, #16
 8100602:	6113      	str	r3, [r2, #16]
#endif /* USER_VECT_TAB_ADDRESS */

#else
#error Please #define CORE_CM4 or CORE_CM7
#endif /* CORE_CM4 */
}
 8100604:	bf00      	nop
 8100606:	46bd      	mov	sp, r7
 8100608:	f85d 7b04 	ldr.w	r7, [sp], #4
 810060c:	4770      	bx	lr
 810060e:	bf00      	nop
 8100610:	e000ed00 	.word	0xe000ed00

08100614 <tud_cdc_n_write_char>:
  uint8_t ch;
  return tud_cdc_n_read(itf, &ch, 1) ? (int32_t) ch : -1;
}

static inline uint32_t tud_cdc_n_write_char(uint8_t itf, char ch)
{
 8100614:	b580      	push	{r7, lr}
 8100616:	b082      	sub	sp, #8
 8100618:	af00      	add	r7, sp, #0
 810061a:	4603      	mov	r3, r0
 810061c:	460a      	mov	r2, r1
 810061e:	71fb      	strb	r3, [r7, #7]
 8100620:	4613      	mov	r3, r2
 8100622:	71bb      	strb	r3, [r7, #6]
  return tud_cdc_n_write(itf, &ch, 1);
 8100624:	1db9      	adds	r1, r7, #6
 8100626:	79fb      	ldrb	r3, [r7, #7]
 8100628:	2201      	movs	r2, #1
 810062a:	4618      	mov	r0, r3
 810062c:	f002 f93a 	bl	81028a4 <tud_cdc_n_write>
 8100630:	4603      	mov	r3, r0
}
 8100632:	4618      	mov	r0, r3
 8100634:	3708      	adds	r7, #8
 8100636:	46bd      	mov	sp, r7
 8100638:	bd80      	pop	{r7, pc}
	...

0810063c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 810063c:	b580      	push	{r7, lr}
 810063e:	b082      	sub	sp, #8
 8100640:	af00      	add	r7, sp, #0

  /* USER CODE END 1 */

/* USER CODE BEGIN Boot_Mode_Sequence_1 */
  /*HW semaphore Clock enable*/
  __HAL_RCC_HSEM_CLK_ENABLE();
 8100642:	4b30      	ldr	r3, [pc, #192]	; (8100704 <main+0xc8>)
 8100644:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8100648:	4a2e      	ldr	r2, [pc, #184]	; (8100704 <main+0xc8>)
 810064a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 810064e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8100652:	4b2c      	ldr	r3, [pc, #176]	; (8100704 <main+0xc8>)
 8100654:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8100658:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 810065c:	607b      	str	r3, [r7, #4]
 810065e:	687b      	ldr	r3, [r7, #4]
  /* Activate HSEM notification for Cortex-M4*/
  HAL_HSEM_ActivateNotification(__HAL_HSEM_SEMID_TO_MASK(HSEM_ID_0));
 8100660:	2001      	movs	r0, #1
 8100662:	f009 f929 	bl	81098b8 <HAL_HSEM_ActivateNotification>
  /*
  Domain D2 goes to STOP mode (Cortex-M4 in deep-sleep) waiting for Cortex-M7 to
  perform system initialization (system clock config, external memory configuration.. )
  */
  HAL_PWREx_ClearPendingEvent();
 8100666:	f009 fafb 	bl	8109c60 <HAL_PWREx_ClearPendingEvent>
  HAL_PWREx_EnterSTOPMode(PWR_MAINREGULATOR_ON, PWR_STOPENTRY_WFE, PWR_D2_DOMAIN);
 810066a:	2201      	movs	r2, #1
 810066c:	2102      	movs	r1, #2
 810066e:	2000      	movs	r0, #0
 8100670:	f009 fa7c 	bl	8109b6c <HAL_PWREx_EnterSTOPMode>
  /* Clear HSEM flag */
  __HAL_HSEM_CLEAR_FLAG(__HAL_HSEM_SEMID_TO_MASK(HSEM_ID_0));
 8100674:	4b24      	ldr	r3, [pc, #144]	; (8100708 <main+0xcc>)
 8100676:	681b      	ldr	r3, [r3, #0]
 8100678:	091b      	lsrs	r3, r3, #4
 810067a:	f003 030f 	and.w	r3, r3, #15
 810067e:	2b07      	cmp	r3, #7
 8100680:	d108      	bne.n	8100694 <main+0x58>
 8100682:	4b22      	ldr	r3, [pc, #136]	; (810070c <main+0xd0>)
 8100684:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
 8100688:	4a20      	ldr	r2, [pc, #128]	; (810070c <main+0xd0>)
 810068a:	f043 0301 	orr.w	r3, r3, #1
 810068e:	f8c2 3104 	str.w	r3, [r2, #260]	; 0x104
 8100692:	e007      	b.n	81006a4 <main+0x68>
 8100694:	4b1d      	ldr	r3, [pc, #116]	; (810070c <main+0xd0>)
 8100696:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
 810069a:	4a1c      	ldr	r2, [pc, #112]	; (810070c <main+0xd0>)
 810069c:	f043 0301 	orr.w	r3, r3, #1
 81006a0:	f8c2 3114 	str.w	r3, [r2, #276]	; 0x114

/* USER CODE END Boot_Mode_Sequence_1 */
  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 81006a4:	f006 ff12 	bl	81074cc <HAL_Init>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 81006a8:	f000 fd44 	bl	8101134 <MX_GPIO_Init>
  MX_ADC1_Init();
 81006ac:	f000 f830 	bl	8100710 <MX_ADC1_Init>
  MX_ADC3_Init();
 81006b0:	f000 f8a6 	bl	8100800 <MX_ADC3_Init>
  MX_ETH_Init();
 81006b4:	f000 f904 	bl	81008c0 <MX_ETH_Init>
  MX_FMC_Init();
 81006b8:	f000 fcee 	bl	8101098 <MX_FMC_Init>
  MX_HDMI_CEC_Init();
 81006bc:	f000 f94c 	bl	8100958 <MX_HDMI_CEC_Init>
  MX_QUADSPI_Init();
 81006c0:	f000 f97e 	bl	81009c0 <MX_QUADSPI_Init>
  MX_RTC_Init();
 81006c4:	f000 f9a4 	bl	8100a10 <MX_RTC_Init>
  MX_SAI1_Init();
 81006c8:	f000 f9f0 	bl	8100aac <MX_SAI1_Init>
  MX_SDMMC1_SD_Init();
 81006cc:	f000 fa8a 	bl	8100be4 <MX_SDMMC1_SD_Init>
  MX_SPDIFRX1_Init();
 81006d0:	f000 faac 	bl	8100c2c <MX_SPDIFRX1_Init>
  MX_SPI2_Init();
 81006d4:	f000 fae2 	bl	8100c9c <MX_SPI2_Init>
  MX_SPI5_Init();
 81006d8:	f000 fb34 	bl	8100d44 <MX_SPI5_Init>
  MX_TIM8_Init();
 81006dc:	f000 fb86 	bl	8100dec <MX_TIM8_Init>
  MX_TIM13_Init();
 81006e0:	f000 fc14 	bl	8100f0c <MX_TIM13_Init>
  MX_UART8_Init();
 81006e4:	f000 fc5a 	bl	8100f9c <MX_UART8_Init>
  MX_USB_OTG_HS_PCD_Init();
 81006e8:	f000 fca4 	bl	8101034 <MX_USB_OTG_HS_PCD_Init>
  /* USER CODE BEGIN 2 */

  tud_init(BOARD_TUD_RHPORT);
 81006ec:	2000      	movs	r0, #0
 81006ee:	f003 fb0d 	bl	8103d0c <tud_init>
void tud_task_ext(uint32_t timeout_ms, bool in_isr);

// Task function should be called in main/rtos loop
TU_ATTR_ALWAYS_INLINE static inline
void tud_task (void) {
  tud_task_ext(UINT32_MAX, false);
 81006f2:	2100      	movs	r1, #0
 81006f4:	f04f 30ff 	mov.w	r0, #4294967295
 81006f8:	f003 fc1e 	bl	8103f38 <tud_task_ext>
}
 81006fc:	bf00      	nop
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  tud_task();
	  cdc_task();
 81006fe:	f000 fe21 	bl	8101344 <cdc_task>
	  tud_task();
 8100702:	e7f6      	b.n	81006f2 <main+0xb6>
 8100704:	58024400 	.word	0x58024400
 8100708:	e000ed00 	.word	0xe000ed00
 810070c:	58026400 	.word	0x58026400

08100710 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8100710:	b580      	push	{r7, lr}
 8100712:	b08a      	sub	sp, #40	; 0x28
 8100714:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8100716:	f107 031c 	add.w	r3, r7, #28
 810071a:	2200      	movs	r2, #0
 810071c:	601a      	str	r2, [r3, #0]
 810071e:	605a      	str	r2, [r3, #4]
 8100720:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8100722:	463b      	mov	r3, r7
 8100724:	2200      	movs	r2, #0
 8100726:	601a      	str	r2, [r3, #0]
 8100728:	605a      	str	r2, [r3, #4]
 810072a:	609a      	str	r2, [r3, #8]
 810072c:	60da      	str	r2, [r3, #12]
 810072e:	611a      	str	r2, [r3, #16]
 8100730:	615a      	str	r2, [r3, #20]
 8100732:	619a      	str	r2, [r3, #24]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8100734:	4b2f      	ldr	r3, [pc, #188]	; (81007f4 <MX_ADC1_Init+0xe4>)
 8100736:	4a30      	ldr	r2, [pc, #192]	; (81007f8 <MX_ADC1_Init+0xe8>)
 8100738:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 810073a:	4b2e      	ldr	r3, [pc, #184]	; (81007f4 <MX_ADC1_Init+0xe4>)
 810073c:	2200      	movs	r2, #0
 810073e:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_16B;
 8100740:	4b2c      	ldr	r3, [pc, #176]	; (81007f4 <MX_ADC1_Init+0xe4>)
 8100742:	2200      	movs	r2, #0
 8100744:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8100746:	4b2b      	ldr	r3, [pc, #172]	; (81007f4 <MX_ADC1_Init+0xe4>)
 8100748:	2200      	movs	r2, #0
 810074a:	60da      	str	r2, [r3, #12]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 810074c:	4b29      	ldr	r3, [pc, #164]	; (81007f4 <MX_ADC1_Init+0xe4>)
 810074e:	2204      	movs	r2, #4
 8100750:	611a      	str	r2, [r3, #16]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8100752:	4b28      	ldr	r3, [pc, #160]	; (81007f4 <MX_ADC1_Init+0xe4>)
 8100754:	2200      	movs	r2, #0
 8100756:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8100758:	4b26      	ldr	r3, [pc, #152]	; (81007f4 <MX_ADC1_Init+0xe4>)
 810075a:	2200      	movs	r2, #0
 810075c:	755a      	strb	r2, [r3, #21]
  hadc1.Init.NbrOfConversion = 1;
 810075e:	4b25      	ldr	r3, [pc, #148]	; (81007f4 <MX_ADC1_Init+0xe4>)
 8100760:	2201      	movs	r2, #1
 8100762:	619a      	str	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8100764:	4b23      	ldr	r3, [pc, #140]	; (81007f4 <MX_ADC1_Init+0xe4>)
 8100766:	2200      	movs	r2, #0
 8100768:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 810076a:	4b22      	ldr	r3, [pc, #136]	; (81007f4 <MX_ADC1_Init+0xe4>)
 810076c:	2200      	movs	r2, #0
 810076e:	625a      	str	r2, [r3, #36]	; 0x24
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8100770:	4b20      	ldr	r3, [pc, #128]	; (81007f4 <MX_ADC1_Init+0xe4>)
 8100772:	2200      	movs	r2, #0
 8100774:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DR;
 8100776:	4b1f      	ldr	r3, [pc, #124]	; (81007f4 <MX_ADC1_Init+0xe4>)
 8100778:	2200      	movs	r2, #0
 810077a:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 810077c:	4b1d      	ldr	r3, [pc, #116]	; (81007f4 <MX_ADC1_Init+0xe4>)
 810077e:	2200      	movs	r2, #0
 8100780:	631a      	str	r2, [r3, #48]	; 0x30
  hadc1.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 8100782:	4b1c      	ldr	r3, [pc, #112]	; (81007f4 <MX_ADC1_Init+0xe4>)
 8100784:	2200      	movs	r2, #0
 8100786:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 8100788:	4b1a      	ldr	r3, [pc, #104]	; (81007f4 <MX_ADC1_Init+0xe4>)
 810078a:	2200      	movs	r2, #0
 810078c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8100790:	4818      	ldr	r0, [pc, #96]	; (81007f4 <MX_ADC1_Init+0xe4>)
 8100792:	f007 f935 	bl	8107a00 <HAL_ADC_Init>
 8100796:	4603      	mov	r3, r0
 8100798:	2b00      	cmp	r3, #0
 810079a:	d001      	beq.n	81007a0 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 810079c:	f000 fe03 	bl	81013a6 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 81007a0:	2300      	movs	r3, #0
 81007a2:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 81007a4:	f107 031c 	add.w	r3, r7, #28
 81007a8:	4619      	mov	r1, r3
 81007aa:	4812      	ldr	r0, [pc, #72]	; (81007f4 <MX_ADC1_Init+0xe4>)
 81007ac:	f007 ff4c 	bl	8108648 <HAL_ADCEx_MultiModeConfigChannel>
 81007b0:	4603      	mov	r3, r0
 81007b2:	2b00      	cmp	r3, #0
 81007b4:	d001      	beq.n	81007ba <MX_ADC1_Init+0xaa>
  {
    Error_Handler();
 81007b6:	f000 fdf6 	bl	81013a6 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 81007ba:	4b10      	ldr	r3, [pc, #64]	; (81007fc <MX_ADC1_Init+0xec>)
 81007bc:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 81007be:	2306      	movs	r3, #6
 81007c0:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 81007c2:	2300      	movs	r3, #0
 81007c4:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 81007c6:	f240 73ff 	movw	r3, #2047	; 0x7ff
 81007ca:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 81007cc:	2304      	movs	r3, #4
 81007ce:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 81007d0:	2300      	movs	r3, #0
 81007d2:	617b      	str	r3, [r7, #20]
  sConfig.OffsetSignedSaturation = DISABLE;
 81007d4:	2300      	movs	r3, #0
 81007d6:	767b      	strb	r3, [r7, #25]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 81007d8:	463b      	mov	r3, r7
 81007da:	4619      	mov	r1, r3
 81007dc:	4805      	ldr	r0, [pc, #20]	; (81007f4 <MX_ADC1_Init+0xe4>)
 81007de:	f007 fab1 	bl	8107d44 <HAL_ADC_ConfigChannel>
 81007e2:	4603      	mov	r3, r0
 81007e4:	2b00      	cmp	r3, #0
 81007e6:	d001      	beq.n	81007ec <MX_ADC1_Init+0xdc>
  {
    Error_Handler();
 81007e8:	f000 fddd 	bl	81013a6 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 81007ec:	bf00      	nop
 81007ee:	3728      	adds	r7, #40	; 0x28
 81007f0:	46bd      	mov	sp, r7
 81007f2:	bd80      	pop	{r7, pc}
 81007f4:	1000014c 	.word	0x1000014c
 81007f8:	40022000 	.word	0x40022000
 81007fc:	04300002 	.word	0x04300002

08100800 <MX_ADC3_Init>:
  * @brief ADC3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC3_Init(void)
{
 8100800:	b580      	push	{r7, lr}
 8100802:	b088      	sub	sp, #32
 8100804:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC3_Init 0 */

  /* USER CODE END ADC3_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8100806:	1d3b      	adds	r3, r7, #4
 8100808:	2200      	movs	r2, #0
 810080a:	601a      	str	r2, [r3, #0]
 810080c:	605a      	str	r2, [r3, #4]
 810080e:	609a      	str	r2, [r3, #8]
 8100810:	60da      	str	r2, [r3, #12]
 8100812:	611a      	str	r2, [r3, #16]
 8100814:	615a      	str	r2, [r3, #20]
 8100816:	619a      	str	r2, [r3, #24]

  /* USER CODE END ADC3_Init 1 */

  /** Common config
  */
  hadc3.Instance = ADC3;
 8100818:	4b27      	ldr	r3, [pc, #156]	; (81008b8 <MX_ADC3_Init+0xb8>)
 810081a:	4a28      	ldr	r2, [pc, #160]	; (81008bc <MX_ADC3_Init+0xbc>)
 810081c:	601a      	str	r2, [r3, #0]
  hadc3.Init.Resolution = ADC_RESOLUTION_16B;
 810081e:	4b26      	ldr	r3, [pc, #152]	; (81008b8 <MX_ADC3_Init+0xb8>)
 8100820:	2200      	movs	r2, #0
 8100822:	609a      	str	r2, [r3, #8]
  hadc3.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8100824:	4b24      	ldr	r3, [pc, #144]	; (81008b8 <MX_ADC3_Init+0xb8>)
 8100826:	2200      	movs	r2, #0
 8100828:	60da      	str	r2, [r3, #12]
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 810082a:	4b23      	ldr	r3, [pc, #140]	; (81008b8 <MX_ADC3_Init+0xb8>)
 810082c:	2204      	movs	r2, #4
 810082e:	611a      	str	r2, [r3, #16]
  hadc3.Init.LowPowerAutoWait = DISABLE;
 8100830:	4b21      	ldr	r3, [pc, #132]	; (81008b8 <MX_ADC3_Init+0xb8>)
 8100832:	2200      	movs	r2, #0
 8100834:	751a      	strb	r2, [r3, #20]
  hadc3.Init.ContinuousConvMode = DISABLE;
 8100836:	4b20      	ldr	r3, [pc, #128]	; (81008b8 <MX_ADC3_Init+0xb8>)
 8100838:	2200      	movs	r2, #0
 810083a:	755a      	strb	r2, [r3, #21]
  hadc3.Init.NbrOfConversion = 1;
 810083c:	4b1e      	ldr	r3, [pc, #120]	; (81008b8 <MX_ADC3_Init+0xb8>)
 810083e:	2201      	movs	r2, #1
 8100840:	619a      	str	r2, [r3, #24]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 8100842:	4b1d      	ldr	r3, [pc, #116]	; (81008b8 <MX_ADC3_Init+0xb8>)
 8100844:	2200      	movs	r2, #0
 8100846:	771a      	strb	r2, [r3, #28]
  hadc3.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8100848:	4b1b      	ldr	r3, [pc, #108]	; (81008b8 <MX_ADC3_Init+0xb8>)
 810084a:	2200      	movs	r2, #0
 810084c:	625a      	str	r2, [r3, #36]	; 0x24
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 810084e:	4b1a      	ldr	r3, [pc, #104]	; (81008b8 <MX_ADC3_Init+0xb8>)
 8100850:	2200      	movs	r2, #0
 8100852:	629a      	str	r2, [r3, #40]	; 0x28
  hadc3.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DR;
 8100854:	4b18      	ldr	r3, [pc, #96]	; (81008b8 <MX_ADC3_Init+0xb8>)
 8100856:	2200      	movs	r2, #0
 8100858:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc3.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 810085a:	4b17      	ldr	r3, [pc, #92]	; (81008b8 <MX_ADC3_Init+0xb8>)
 810085c:	2200      	movs	r2, #0
 810085e:	631a      	str	r2, [r3, #48]	; 0x30
  hadc3.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 8100860:	4b15      	ldr	r3, [pc, #84]	; (81008b8 <MX_ADC3_Init+0xb8>)
 8100862:	2200      	movs	r2, #0
 8100864:	635a      	str	r2, [r3, #52]	; 0x34
  hadc3.Init.OversamplingMode = DISABLE;
 8100866:	4b14      	ldr	r3, [pc, #80]	; (81008b8 <MX_ADC3_Init+0xb8>)
 8100868:	2200      	movs	r2, #0
 810086a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 810086e:	4812      	ldr	r0, [pc, #72]	; (81008b8 <MX_ADC3_Init+0xb8>)
 8100870:	f007 f8c6 	bl	8107a00 <HAL_ADC_Init>
 8100874:	4603      	mov	r3, r0
 8100876:	2b00      	cmp	r3, #0
 8100878:	d001      	beq.n	810087e <MX_ADC3_Init+0x7e>
  {
    Error_Handler();
 810087a:	f000 fd94 	bl	81013a6 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_0;
 810087e:	2301      	movs	r3, #1
 8100880:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8100882:	2306      	movs	r3, #6
 8100884:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8100886:	2300      	movs	r3, #0
 8100888:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 810088a:	f240 73ff 	movw	r3, #2047	; 0x7ff
 810088e:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8100890:	2304      	movs	r3, #4
 8100892:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8100894:	2300      	movs	r3, #0
 8100896:	61bb      	str	r3, [r7, #24]
  sConfig.OffsetSignedSaturation = DISABLE;
 8100898:	2300      	movs	r3, #0
 810089a:	777b      	strb	r3, [r7, #29]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 810089c:	1d3b      	adds	r3, r7, #4
 810089e:	4619      	mov	r1, r3
 81008a0:	4805      	ldr	r0, [pc, #20]	; (81008b8 <MX_ADC3_Init+0xb8>)
 81008a2:	f007 fa4f 	bl	8107d44 <HAL_ADC_ConfigChannel>
 81008a6:	4603      	mov	r3, r0
 81008a8:	2b00      	cmp	r3, #0
 81008aa:	d001      	beq.n	81008b0 <MX_ADC3_Init+0xb0>
  {
    Error_Handler();
 81008ac:	f000 fd7b 	bl	81013a6 <Error_Handler>
  }
  /* USER CODE BEGIN ADC3_Init 2 */

  /* USER CODE END ADC3_Init 2 */

}
 81008b0:	bf00      	nop
 81008b2:	3720      	adds	r7, #32
 81008b4:	46bd      	mov	sp, r7
 81008b6:	bd80      	pop	{r7, pc}
 81008b8:	100001b0 	.word	0x100001b0
 81008bc:	58026000 	.word	0x58026000

081008c0 <MX_ETH_Init>:
  * @brief ETH Initialization Function
  * @param None
  * @retval None
  */
static void MX_ETH_Init(void)
{
 81008c0:	b580      	push	{r7, lr}
 81008c2:	af00      	add	r7, sp, #0
   static uint8_t MACAddr[6];

  /* USER CODE BEGIN ETH_Init 1 */

  /* USER CODE END ETH_Init 1 */
  heth.Instance = ETH;
 81008c4:	4b1e      	ldr	r3, [pc, #120]	; (8100940 <MX_ETH_Init+0x80>)
 81008c6:	4a1f      	ldr	r2, [pc, #124]	; (8100944 <MX_ETH_Init+0x84>)
 81008c8:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 81008ca:	4b1f      	ldr	r3, [pc, #124]	; (8100948 <MX_ETH_Init+0x88>)
 81008cc:	2200      	movs	r2, #0
 81008ce:	701a      	strb	r2, [r3, #0]
  MACAddr[1] = 0x80;
 81008d0:	4b1d      	ldr	r3, [pc, #116]	; (8100948 <MX_ETH_Init+0x88>)
 81008d2:	2280      	movs	r2, #128	; 0x80
 81008d4:	705a      	strb	r2, [r3, #1]
  MACAddr[2] = 0xE1;
 81008d6:	4b1c      	ldr	r3, [pc, #112]	; (8100948 <MX_ETH_Init+0x88>)
 81008d8:	22e1      	movs	r2, #225	; 0xe1
 81008da:	709a      	strb	r2, [r3, #2]
  MACAddr[3] = 0x00;
 81008dc:	4b1a      	ldr	r3, [pc, #104]	; (8100948 <MX_ETH_Init+0x88>)
 81008de:	2200      	movs	r2, #0
 81008e0:	70da      	strb	r2, [r3, #3]
  MACAddr[4] = 0x00;
 81008e2:	4b19      	ldr	r3, [pc, #100]	; (8100948 <MX_ETH_Init+0x88>)
 81008e4:	2200      	movs	r2, #0
 81008e6:	711a      	strb	r2, [r3, #4]
  MACAddr[5] = 0x00;
 81008e8:	4b17      	ldr	r3, [pc, #92]	; (8100948 <MX_ETH_Init+0x88>)
 81008ea:	2200      	movs	r2, #0
 81008ec:	715a      	strb	r2, [r3, #5]
  heth.Init.MACAddr = &MACAddr[0];
 81008ee:	4b14      	ldr	r3, [pc, #80]	; (8100940 <MX_ETH_Init+0x80>)
 81008f0:	4a15      	ldr	r2, [pc, #84]	; (8100948 <MX_ETH_Init+0x88>)
 81008f2:	605a      	str	r2, [r3, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 81008f4:	4b12      	ldr	r3, [pc, #72]	; (8100940 <MX_ETH_Init+0x80>)
 81008f6:	2201      	movs	r2, #1
 81008f8:	721a      	strb	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 81008fa:	4b11      	ldr	r3, [pc, #68]	; (8100940 <MX_ETH_Init+0x80>)
 81008fc:	4a13      	ldr	r2, [pc, #76]	; (810094c <MX_ETH_Init+0x8c>)
 81008fe:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 8100900:	4b0f      	ldr	r3, [pc, #60]	; (8100940 <MX_ETH_Init+0x80>)
 8100902:	4a13      	ldr	r2, [pc, #76]	; (8100950 <MX_ETH_Init+0x90>)
 8100904:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1524;
 8100906:	4b0e      	ldr	r3, [pc, #56]	; (8100940 <MX_ETH_Init+0x80>)
 8100908:	f240 52f4 	movw	r2, #1524	; 0x5f4
 810090c:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  if (HAL_ETH_Init(&heth) != HAL_OK)
 810090e:	480c      	ldr	r0, [pc, #48]	; (8100940 <MX_ETH_Init+0x80>)
 8100910:	f008 f9fe 	bl	8108d10 <HAL_ETH_Init>
 8100914:	4603      	mov	r3, r0
 8100916:	2b00      	cmp	r3, #0
 8100918:	d001      	beq.n	810091e <MX_ETH_Init+0x5e>
  {
    Error_Handler();
 810091a:	f000 fd44 	bl	81013a6 <Error_Handler>
  }

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 810091e:	2238      	movs	r2, #56	; 0x38
 8100920:	2100      	movs	r1, #0
 8100922:	480c      	ldr	r0, [pc, #48]	; (8100954 <MX_ETH_Init+0x94>)
 8100924:	f011 fa1a 	bl	8111d5c <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 8100928:	4b0a      	ldr	r3, [pc, #40]	; (8100954 <MX_ETH_Init+0x94>)
 810092a:	2221      	movs	r2, #33	; 0x21
 810092c:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 810092e:	4b09      	ldr	r3, [pc, #36]	; (8100954 <MX_ETH_Init+0x94>)
 8100930:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8100934:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 8100936:	4b07      	ldr	r3, [pc, #28]	; (8100954 <MX_ETH_Init+0x94>)
 8100938:	2200      	movs	r2, #0
 810093a:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN ETH_Init 2 */

  /* USER CODE END ETH_Init 2 */

}
 810093c:	bf00      	nop
 810093e:	bd80      	pop	{r7, pc}
 8100940:	10000214 	.word	0x10000214
 8100944:	40028000 	.word	0x40028000
 8100948:	10000d00 	.word	0x10000d00
 810094c:	10000098 	.word	0x10000098
 8100950:	10000038 	.word	0x10000038
 8100954:	10000114 	.word	0x10000114

08100958 <MX_HDMI_CEC_Init>:
  * @brief HDMI_CEC Initialization Function
  * @param None
  * @retval None
  */
static void MX_HDMI_CEC_Init(void)
{
 8100958:	b580      	push	{r7, lr}
 810095a:	af00      	add	r7, sp, #0
  /* USER CODE END HDMI_CEC_Init 0 */

  /* USER CODE BEGIN HDMI_CEC_Init 1 */

  /* USER CODE END HDMI_CEC_Init 1 */
  hcec.Instance = CEC;
 810095c:	4b15      	ldr	r3, [pc, #84]	; (81009b4 <MX_HDMI_CEC_Init+0x5c>)
 810095e:	4a16      	ldr	r2, [pc, #88]	; (81009b8 <MX_HDMI_CEC_Init+0x60>)
 8100960:	601a      	str	r2, [r3, #0]
  hcec.Init.SignalFreeTime = CEC_DEFAULT_SFT;
 8100962:	4b14      	ldr	r3, [pc, #80]	; (81009b4 <MX_HDMI_CEC_Init+0x5c>)
 8100964:	2200      	movs	r2, #0
 8100966:	605a      	str	r2, [r3, #4]
  hcec.Init.Tolerance = CEC_STANDARD_TOLERANCE;
 8100968:	4b12      	ldr	r3, [pc, #72]	; (81009b4 <MX_HDMI_CEC_Init+0x5c>)
 810096a:	2200      	movs	r2, #0
 810096c:	609a      	str	r2, [r3, #8]
  hcec.Init.BRERxStop = CEC_RX_STOP_ON_BRE;
 810096e:	4b11      	ldr	r3, [pc, #68]	; (81009b4 <MX_HDMI_CEC_Init+0x5c>)
 8100970:	2210      	movs	r2, #16
 8100972:	60da      	str	r2, [r3, #12]
  hcec.Init.BREErrorBitGen = CEC_BRE_ERRORBIT_NO_GENERATION;
 8100974:	4b0f      	ldr	r3, [pc, #60]	; (81009b4 <MX_HDMI_CEC_Init+0x5c>)
 8100976:	2200      	movs	r2, #0
 8100978:	611a      	str	r2, [r3, #16]
  hcec.Init.LBPEErrorBitGen = CEC_LBPE_ERRORBIT_NO_GENERATION;
 810097a:	4b0e      	ldr	r3, [pc, #56]	; (81009b4 <MX_HDMI_CEC_Init+0x5c>)
 810097c:	2200      	movs	r2, #0
 810097e:	615a      	str	r2, [r3, #20]
  hcec.Init.BroadcastMsgNoErrorBitGen = CEC_BROADCASTERROR_ERRORBIT_GENERATION;
 8100980:	4b0c      	ldr	r3, [pc, #48]	; (81009b4 <MX_HDMI_CEC_Init+0x5c>)
 8100982:	2200      	movs	r2, #0
 8100984:	619a      	str	r2, [r3, #24]
  hcec.Init.SignalFreeTimeOption = CEC_SFT_START_ON_TXSOM;
 8100986:	4b0b      	ldr	r3, [pc, #44]	; (81009b4 <MX_HDMI_CEC_Init+0x5c>)
 8100988:	2200      	movs	r2, #0
 810098a:	61da      	str	r2, [r3, #28]
  hcec.Init.ListenMode = CEC_FULL_LISTENING_MODE;
 810098c:	4b09      	ldr	r3, [pc, #36]	; (81009b4 <MX_HDMI_CEC_Init+0x5c>)
 810098e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8100992:	621a      	str	r2, [r3, #32]
  hcec.Init.OwnAddress = CEC_OWN_ADDRESS_NONE;
 8100994:	4b07      	ldr	r3, [pc, #28]	; (81009b4 <MX_HDMI_CEC_Init+0x5c>)
 8100996:	2200      	movs	r2, #0
 8100998:	849a      	strh	r2, [r3, #36]	; 0x24
  hcec.Init.RxBuffer = cec_receive_buffer;
 810099a:	4b06      	ldr	r3, [pc, #24]	; (81009b4 <MX_HDMI_CEC_Init+0x5c>)
 810099c:	4a07      	ldr	r2, [pc, #28]	; (81009bc <MX_HDMI_CEC_Init+0x64>)
 810099e:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_CEC_Init(&hcec) != HAL_OK)
 81009a0:	4804      	ldr	r0, [pc, #16]	; (81009b4 <MX_HDMI_CEC_Init+0x5c>)
 81009a2:	f007 ff33 	bl	810880c <HAL_CEC_Init>
 81009a6:	4603      	mov	r3, r0
 81009a8:	2b00      	cmp	r3, #0
 81009aa:	d001      	beq.n	81009b0 <MX_HDMI_CEC_Init+0x58>
  {
    Error_Handler();
 81009ac:	f000 fcfb 	bl	81013a6 <Error_Handler>
  }
  /* USER CODE BEGIN HDMI_CEC_Init 2 */

  /* USER CODE END HDMI_CEC_Init 2 */

}
 81009b0:	bf00      	nop
 81009b2:	bd80      	pop	{r7, pc}
 81009b4:	100002c4 	.word	0x100002c4
 81009b8:	40006c00 	.word	0x40006c00
 81009bc:	10000cf0 	.word	0x10000cf0

081009c0 <MX_QUADSPI_Init>:
  * @brief QUADSPI Initialization Function
  * @param None
  * @retval None
  */
static void MX_QUADSPI_Init(void)
{
 81009c0:	b580      	push	{r7, lr}
 81009c2:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN QUADSPI_Init 1 */

  /* USER CODE END QUADSPI_Init 1 */
  /* QUADSPI parameter configuration*/
  hqspi.Instance = QUADSPI;
 81009c4:	4b10      	ldr	r3, [pc, #64]	; (8100a08 <MX_QUADSPI_Init+0x48>)
 81009c6:	4a11      	ldr	r2, [pc, #68]	; (8100a0c <MX_QUADSPI_Init+0x4c>)
 81009c8:	601a      	str	r2, [r3, #0]
  hqspi.Init.ClockPrescaler = 255;
 81009ca:	4b0f      	ldr	r3, [pc, #60]	; (8100a08 <MX_QUADSPI_Init+0x48>)
 81009cc:	22ff      	movs	r2, #255	; 0xff
 81009ce:	605a      	str	r2, [r3, #4]
  hqspi.Init.FifoThreshold = 1;
 81009d0:	4b0d      	ldr	r3, [pc, #52]	; (8100a08 <MX_QUADSPI_Init+0x48>)
 81009d2:	2201      	movs	r2, #1
 81009d4:	609a      	str	r2, [r3, #8]
  hqspi.Init.SampleShifting = QSPI_SAMPLE_SHIFTING_NONE;
 81009d6:	4b0c      	ldr	r3, [pc, #48]	; (8100a08 <MX_QUADSPI_Init+0x48>)
 81009d8:	2200      	movs	r2, #0
 81009da:	60da      	str	r2, [r3, #12]
  hqspi.Init.FlashSize = 1;
 81009dc:	4b0a      	ldr	r3, [pc, #40]	; (8100a08 <MX_QUADSPI_Init+0x48>)
 81009de:	2201      	movs	r2, #1
 81009e0:	611a      	str	r2, [r3, #16]
  hqspi.Init.ChipSelectHighTime = QSPI_CS_HIGH_TIME_1_CYCLE;
 81009e2:	4b09      	ldr	r3, [pc, #36]	; (8100a08 <MX_QUADSPI_Init+0x48>)
 81009e4:	2200      	movs	r2, #0
 81009e6:	615a      	str	r2, [r3, #20]
  hqspi.Init.ClockMode = QSPI_CLOCK_MODE_0;
 81009e8:	4b07      	ldr	r3, [pc, #28]	; (8100a08 <MX_QUADSPI_Init+0x48>)
 81009ea:	2200      	movs	r2, #0
 81009ec:	619a      	str	r2, [r3, #24]
  hqspi.Init.DualFlash = QSPI_DUALFLASH_ENABLE;
 81009ee:	4b06      	ldr	r3, [pc, #24]	; (8100a08 <MX_QUADSPI_Init+0x48>)
 81009f0:	2240      	movs	r2, #64	; 0x40
 81009f2:	621a      	str	r2, [r3, #32]
  if (HAL_QSPI_Init(&hqspi) != HAL_OK)
 81009f4:	4804      	ldr	r0, [pc, #16]	; (8100a08 <MX_QUADSPI_Init+0x48>)
 81009f6:	f009 f951 	bl	8109c9c <HAL_QSPI_Init>
 81009fa:	4603      	mov	r3, r0
 81009fc:	2b00      	cmp	r3, #0
 81009fe:	d001      	beq.n	8100a04 <MX_QUADSPI_Init+0x44>
  {
    Error_Handler();
 8100a00:	f000 fcd1 	bl	81013a6 <Error_Handler>
  }
  /* USER CODE BEGIN QUADSPI_Init 2 */

  /* USER CODE END QUADSPI_Init 2 */

}
 8100a04:	bf00      	nop
 8100a06:	bd80      	pop	{r7, pc}
 8100a08:	10000308 	.word	0x10000308
 8100a0c:	52005000 	.word	0x52005000

08100a10 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8100a10:	b580      	push	{r7, lr}
 8100a12:	b08a      	sub	sp, #40	; 0x28
 8100a14:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TamperTypeDef sTamper = {0};
 8100a16:	463b      	mov	r3, r7
 8100a18:	2228      	movs	r2, #40	; 0x28
 8100a1a:	2100      	movs	r1, #0
 8100a1c:	4618      	mov	r0, r3
 8100a1e:	f011 f99d 	bl	8111d5c <memset>

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8100a22:	4b20      	ldr	r3, [pc, #128]	; (8100aa4 <MX_RTC_Init+0x94>)
 8100a24:	4a20      	ldr	r2, [pc, #128]	; (8100aa8 <MX_RTC_Init+0x98>)
 8100a26:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8100a28:	4b1e      	ldr	r3, [pc, #120]	; (8100aa4 <MX_RTC_Init+0x94>)
 8100a2a:	2200      	movs	r2, #0
 8100a2c:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8100a2e:	4b1d      	ldr	r3, [pc, #116]	; (8100aa4 <MX_RTC_Init+0x94>)
 8100a30:	227f      	movs	r2, #127	; 0x7f
 8100a32:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8100a34:	4b1b      	ldr	r3, [pc, #108]	; (8100aa4 <MX_RTC_Init+0x94>)
 8100a36:	22ff      	movs	r2, #255	; 0xff
 8100a38:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8100a3a:	4b1a      	ldr	r3, [pc, #104]	; (8100aa4 <MX_RTC_Init+0x94>)
 8100a3c:	2200      	movs	r2, #0
 8100a3e:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8100a40:	4b18      	ldr	r3, [pc, #96]	; (8100aa4 <MX_RTC_Init+0x94>)
 8100a42:	2200      	movs	r2, #0
 8100a44:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8100a46:	4b17      	ldr	r3, [pc, #92]	; (8100aa4 <MX_RTC_Init+0x94>)
 8100a48:	2200      	movs	r2, #0
 8100a4a:	61da      	str	r2, [r3, #28]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 8100a4c:	4b15      	ldr	r3, [pc, #84]	; (8100aa4 <MX_RTC_Init+0x94>)
 8100a4e:	2200      	movs	r2, #0
 8100a50:	615a      	str	r2, [r3, #20]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8100a52:	4814      	ldr	r0, [pc, #80]	; (8100aa4 <MX_RTC_Init+0x94>)
 8100a54:	f00c f8f2 	bl	810cc3c <HAL_RTC_Init>
 8100a58:	4603      	mov	r3, r0
 8100a5a:	2b00      	cmp	r3, #0
 8100a5c:	d001      	beq.n	8100a62 <MX_RTC_Init+0x52>
  {
    Error_Handler();
 8100a5e:	f000 fca2 	bl	81013a6 <Error_Handler>
  }

  /** Enable the RTC Tamper 1
  */
  sTamper.Tamper = RTC_TAMPER_1;
 8100a62:	2301      	movs	r3, #1
 8100a64:	603b      	str	r3, [r7, #0]
  sTamper.Trigger = RTC_TAMPERTRIGGER_RISINGEDGE;
 8100a66:	2301      	movs	r3, #1
 8100a68:	60bb      	str	r3, [r7, #8]
  sTamper.NoErase = RTC_TAMPER_ERASE_BACKUP_ENABLE;
 8100a6a:	2300      	movs	r3, #0
 8100a6c:	60fb      	str	r3, [r7, #12]
  sTamper.MaskFlag = RTC_TAMPERMASK_FLAG_DISABLE;
 8100a6e:	2300      	movs	r3, #0
 8100a70:	613b      	str	r3, [r7, #16]
  sTamper.Filter = RTC_TAMPERFILTER_DISABLE;
 8100a72:	2300      	movs	r3, #0
 8100a74:	617b      	str	r3, [r7, #20]
  sTamper.SamplingFrequency = RTC_TAMPERSAMPLINGFREQ_RTCCLK_DIV32768;
 8100a76:	2300      	movs	r3, #0
 8100a78:	61bb      	str	r3, [r7, #24]
  sTamper.PrechargeDuration = RTC_TAMPERPRECHARGEDURATION_1RTCCLK;
 8100a7a:	2300      	movs	r3, #0
 8100a7c:	61fb      	str	r3, [r7, #28]
  sTamper.TamperPullUp = RTC_TAMPER_PULLUP_ENABLE;
 8100a7e:	2300      	movs	r3, #0
 8100a80:	623b      	str	r3, [r7, #32]
  sTamper.TimeStampOnTamperDetection = RTC_TIMESTAMPONTAMPERDETECTION_ENABLE;
 8100a82:	2380      	movs	r3, #128	; 0x80
 8100a84:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_RTCEx_SetTamper(&hrtc, &sTamper) != HAL_OK)
 8100a86:	463b      	mov	r3, r7
 8100a88:	4619      	mov	r1, r3
 8100a8a:	4806      	ldr	r0, [pc, #24]	; (8100aa4 <MX_RTC_Init+0x94>)
 8100a8c:	f00c f9ee 	bl	810ce6c <HAL_RTCEx_SetTamper>
 8100a90:	4603      	mov	r3, r0
 8100a92:	2b00      	cmp	r3, #0
 8100a94:	d001      	beq.n	8100a9a <MX_RTC_Init+0x8a>
  {
    Error_Handler();
 8100a96:	f000 fc86 	bl	81013a6 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8100a9a:	bf00      	nop
 8100a9c:	3728      	adds	r7, #40	; 0x28
 8100a9e:	46bd      	mov	sp, r7
 8100aa0:	bd80      	pop	{r7, pc}
 8100aa2:	bf00      	nop
 8100aa4:	10000354 	.word	0x10000354
 8100aa8:	58004000 	.word	0x58004000

08100aac <MX_SAI1_Init>:
  * @brief SAI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SAI1_Init(void)
{
 8100aac:	b580      	push	{r7, lr}
 8100aae:	af00      	add	r7, sp, #0
  /* USER CODE END SAI1_Init 0 */

  /* USER CODE BEGIN SAI1_Init 1 */

  /* USER CODE END SAI1_Init 1 */
  hsai_BlockA1.Instance = SAI1_Block_A;
 8100ab0:	4b47      	ldr	r3, [pc, #284]	; (8100bd0 <MX_SAI1_Init+0x124>)
 8100ab2:	4a48      	ldr	r2, [pc, #288]	; (8100bd4 <MX_SAI1_Init+0x128>)
 8100ab4:	601a      	str	r2, [r3, #0]
  hsai_BlockA1.Init.Protocol = SAI_FREE_PROTOCOL;
 8100ab6:	4b46      	ldr	r3, [pc, #280]	; (8100bd0 <MX_SAI1_Init+0x124>)
 8100ab8:	2200      	movs	r2, #0
 8100aba:	645a      	str	r2, [r3, #68]	; 0x44
  hsai_BlockA1.Init.AudioMode = SAI_MODEMASTER_TX;
 8100abc:	4b44      	ldr	r3, [pc, #272]	; (8100bd0 <MX_SAI1_Init+0x124>)
 8100abe:	2200      	movs	r2, #0
 8100ac0:	605a      	str	r2, [r3, #4]
  hsai_BlockA1.Init.DataSize = SAI_DATASIZE_8;
 8100ac2:	4b43      	ldr	r3, [pc, #268]	; (8100bd0 <MX_SAI1_Init+0x124>)
 8100ac4:	2240      	movs	r2, #64	; 0x40
 8100ac6:	649a      	str	r2, [r3, #72]	; 0x48
  hsai_BlockA1.Init.FirstBit = SAI_FIRSTBIT_MSB;
 8100ac8:	4b41      	ldr	r3, [pc, #260]	; (8100bd0 <MX_SAI1_Init+0x124>)
 8100aca:	2200      	movs	r2, #0
 8100acc:	64da      	str	r2, [r3, #76]	; 0x4c
  hsai_BlockA1.Init.ClockStrobing = SAI_CLOCKSTROBING_FALLINGEDGE;
 8100ace:	4b40      	ldr	r3, [pc, #256]	; (8100bd0 <MX_SAI1_Init+0x124>)
 8100ad0:	2200      	movs	r2, #0
 8100ad2:	651a      	str	r2, [r3, #80]	; 0x50
  hsai_BlockA1.Init.Synchro = SAI_ASYNCHRONOUS;
 8100ad4:	4b3e      	ldr	r3, [pc, #248]	; (8100bd0 <MX_SAI1_Init+0x124>)
 8100ad6:	2200      	movs	r2, #0
 8100ad8:	609a      	str	r2, [r3, #8]
  hsai_BlockA1.Init.OutputDrive = SAI_OUTPUTDRIVE_DISABLE;
 8100ada:	4b3d      	ldr	r3, [pc, #244]	; (8100bd0 <MX_SAI1_Init+0x124>)
 8100adc:	2200      	movs	r2, #0
 8100ade:	615a      	str	r2, [r3, #20]
  hsai_BlockA1.Init.NoDivider = SAI_MASTERDIVIDER_ENABLE;
 8100ae0:	4b3b      	ldr	r3, [pc, #236]	; (8100bd0 <MX_SAI1_Init+0x124>)
 8100ae2:	2200      	movs	r2, #0
 8100ae4:	619a      	str	r2, [r3, #24]
  hsai_BlockA1.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_EMPTY;
 8100ae6:	4b3a      	ldr	r3, [pc, #232]	; (8100bd0 <MX_SAI1_Init+0x124>)
 8100ae8:	2200      	movs	r2, #0
 8100aea:	61da      	str	r2, [r3, #28]
  hsai_BlockA1.Init.AudioFrequency = SAI_AUDIO_FREQUENCY_192K;
 8100aec:	4b38      	ldr	r3, [pc, #224]	; (8100bd0 <MX_SAI1_Init+0x124>)
 8100aee:	4a3a      	ldr	r2, [pc, #232]	; (8100bd8 <MX_SAI1_Init+0x12c>)
 8100af0:	621a      	str	r2, [r3, #32]
  hsai_BlockA1.Init.SynchroExt = SAI_SYNCEXT_DISABLE;
 8100af2:	4b37      	ldr	r3, [pc, #220]	; (8100bd0 <MX_SAI1_Init+0x124>)
 8100af4:	2200      	movs	r2, #0
 8100af6:	60da      	str	r2, [r3, #12]
  hsai_BlockA1.Init.MonoStereoMode = SAI_STEREOMODE;
 8100af8:	4b35      	ldr	r3, [pc, #212]	; (8100bd0 <MX_SAI1_Init+0x124>)
 8100afa:	2200      	movs	r2, #0
 8100afc:	62da      	str	r2, [r3, #44]	; 0x2c
  hsai_BlockA1.Init.CompandingMode = SAI_NOCOMPANDING;
 8100afe:	4b34      	ldr	r3, [pc, #208]	; (8100bd0 <MX_SAI1_Init+0x124>)
 8100b00:	2200      	movs	r2, #0
 8100b02:	631a      	str	r2, [r3, #48]	; 0x30
  hsai_BlockA1.Init.TriState = SAI_OUTPUT_NOTRELEASED;
 8100b04:	4b32      	ldr	r3, [pc, #200]	; (8100bd0 <MX_SAI1_Init+0x124>)
 8100b06:	2200      	movs	r2, #0
 8100b08:	635a      	str	r2, [r3, #52]	; 0x34
  hsai_BlockA1.Init.PdmInit.Activation = DISABLE;
 8100b0a:	4b31      	ldr	r3, [pc, #196]	; (8100bd0 <MX_SAI1_Init+0x124>)
 8100b0c:	2200      	movs	r2, #0
 8100b0e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hsai_BlockA1.Init.PdmInit.MicPairsNbr = 1;
 8100b12:	4b2f      	ldr	r3, [pc, #188]	; (8100bd0 <MX_SAI1_Init+0x124>)
 8100b14:	2201      	movs	r2, #1
 8100b16:	63da      	str	r2, [r3, #60]	; 0x3c
  hsai_BlockA1.Init.PdmInit.ClockEnable = SAI_PDM_CLOCK1_ENABLE;
 8100b18:	4b2d      	ldr	r3, [pc, #180]	; (8100bd0 <MX_SAI1_Init+0x124>)
 8100b1a:	f44f 7280 	mov.w	r2, #256	; 0x100
 8100b1e:	641a      	str	r2, [r3, #64]	; 0x40
  hsai_BlockA1.FrameInit.FrameLength = 8;
 8100b20:	4b2b      	ldr	r3, [pc, #172]	; (8100bd0 <MX_SAI1_Init+0x124>)
 8100b22:	2208      	movs	r2, #8
 8100b24:	655a      	str	r2, [r3, #84]	; 0x54
  hsai_BlockA1.FrameInit.ActiveFrameLength = 1;
 8100b26:	4b2a      	ldr	r3, [pc, #168]	; (8100bd0 <MX_SAI1_Init+0x124>)
 8100b28:	2201      	movs	r2, #1
 8100b2a:	659a      	str	r2, [r3, #88]	; 0x58
  hsai_BlockA1.FrameInit.FSDefinition = SAI_FS_STARTFRAME;
 8100b2c:	4b28      	ldr	r3, [pc, #160]	; (8100bd0 <MX_SAI1_Init+0x124>)
 8100b2e:	2200      	movs	r2, #0
 8100b30:	65da      	str	r2, [r3, #92]	; 0x5c
  hsai_BlockA1.FrameInit.FSPolarity = SAI_FS_ACTIVE_LOW;
 8100b32:	4b27      	ldr	r3, [pc, #156]	; (8100bd0 <MX_SAI1_Init+0x124>)
 8100b34:	2200      	movs	r2, #0
 8100b36:	661a      	str	r2, [r3, #96]	; 0x60
  hsai_BlockA1.FrameInit.FSOffset = SAI_FS_FIRSTBIT;
 8100b38:	4b25      	ldr	r3, [pc, #148]	; (8100bd0 <MX_SAI1_Init+0x124>)
 8100b3a:	2200      	movs	r2, #0
 8100b3c:	665a      	str	r2, [r3, #100]	; 0x64
  hsai_BlockA1.SlotInit.FirstBitOffset = 0;
 8100b3e:	4b24      	ldr	r3, [pc, #144]	; (8100bd0 <MX_SAI1_Init+0x124>)
 8100b40:	2200      	movs	r2, #0
 8100b42:	669a      	str	r2, [r3, #104]	; 0x68
  hsai_BlockA1.SlotInit.SlotSize = SAI_SLOTSIZE_DATASIZE;
 8100b44:	4b22      	ldr	r3, [pc, #136]	; (8100bd0 <MX_SAI1_Init+0x124>)
 8100b46:	2200      	movs	r2, #0
 8100b48:	66da      	str	r2, [r3, #108]	; 0x6c
  hsai_BlockA1.SlotInit.SlotNumber = 1;
 8100b4a:	4b21      	ldr	r3, [pc, #132]	; (8100bd0 <MX_SAI1_Init+0x124>)
 8100b4c:	2201      	movs	r2, #1
 8100b4e:	671a      	str	r2, [r3, #112]	; 0x70
  hsai_BlockA1.SlotInit.SlotActive = 0x00000000;
 8100b50:	4b1f      	ldr	r3, [pc, #124]	; (8100bd0 <MX_SAI1_Init+0x124>)
 8100b52:	2200      	movs	r2, #0
 8100b54:	675a      	str	r2, [r3, #116]	; 0x74
  if (HAL_SAI_Init(&hsai_BlockA1) != HAL_OK)
 8100b56:	481e      	ldr	r0, [pc, #120]	; (8100bd0 <MX_SAI1_Init+0x124>)
 8100b58:	f00c fa68 	bl	810d02c <HAL_SAI_Init>
 8100b5c:	4603      	mov	r3, r0
 8100b5e:	2b00      	cmp	r3, #0
 8100b60:	d001      	beq.n	8100b66 <MX_SAI1_Init+0xba>
  {
    Error_Handler();
 8100b62:	f000 fc20 	bl	81013a6 <Error_Handler>
  }
  hsai_BlockB1.Instance = SAI1_Block_B;
 8100b66:	4b1d      	ldr	r3, [pc, #116]	; (8100bdc <MX_SAI1_Init+0x130>)
 8100b68:	4a1d      	ldr	r2, [pc, #116]	; (8100be0 <MX_SAI1_Init+0x134>)
 8100b6a:	601a      	str	r2, [r3, #0]
  hsai_BlockB1.Init.Protocol = SAI_SPDIF_PROTOCOL;
 8100b6c:	4b1b      	ldr	r3, [pc, #108]	; (8100bdc <MX_SAI1_Init+0x130>)
 8100b6e:	2204      	movs	r2, #4
 8100b70:	645a      	str	r2, [r3, #68]	; 0x44
  hsai_BlockB1.Init.AudioMode = SAI_MODEMASTER_TX;
 8100b72:	4b1a      	ldr	r3, [pc, #104]	; (8100bdc <MX_SAI1_Init+0x130>)
 8100b74:	2200      	movs	r2, #0
 8100b76:	605a      	str	r2, [r3, #4]
  hsai_BlockB1.Init.Synchro = SAI_ASYNCHRONOUS;
 8100b78:	4b18      	ldr	r3, [pc, #96]	; (8100bdc <MX_SAI1_Init+0x130>)
 8100b7a:	2200      	movs	r2, #0
 8100b7c:	609a      	str	r2, [r3, #8]
  hsai_BlockB1.Init.OutputDrive = SAI_OUTPUTDRIVE_DISABLE;
 8100b7e:	4b17      	ldr	r3, [pc, #92]	; (8100bdc <MX_SAI1_Init+0x130>)
 8100b80:	2200      	movs	r2, #0
 8100b82:	615a      	str	r2, [r3, #20]
  hsai_BlockB1.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_EMPTY;
 8100b84:	4b15      	ldr	r3, [pc, #84]	; (8100bdc <MX_SAI1_Init+0x130>)
 8100b86:	2200      	movs	r2, #0
 8100b88:	61da      	str	r2, [r3, #28]
  hsai_BlockB1.Init.AudioFrequency = SAI_AUDIO_FREQUENCY_48K;
 8100b8a:	4b14      	ldr	r3, [pc, #80]	; (8100bdc <MX_SAI1_Init+0x130>)
 8100b8c:	f64b 3280 	movw	r2, #48000	; 0xbb80
 8100b90:	621a      	str	r2, [r3, #32]
  hsai_BlockB1.Init.SynchroExt = SAI_SYNCEXT_DISABLE;
 8100b92:	4b12      	ldr	r3, [pc, #72]	; (8100bdc <MX_SAI1_Init+0x130>)
 8100b94:	2200      	movs	r2, #0
 8100b96:	60da      	str	r2, [r3, #12]
  hsai_BlockB1.Init.MonoStereoMode = SAI_STEREOMODE;
 8100b98:	4b10      	ldr	r3, [pc, #64]	; (8100bdc <MX_SAI1_Init+0x130>)
 8100b9a:	2200      	movs	r2, #0
 8100b9c:	62da      	str	r2, [r3, #44]	; 0x2c
  hsai_BlockB1.Init.CompandingMode = SAI_NOCOMPANDING;
 8100b9e:	4b0f      	ldr	r3, [pc, #60]	; (8100bdc <MX_SAI1_Init+0x130>)
 8100ba0:	2200      	movs	r2, #0
 8100ba2:	631a      	str	r2, [r3, #48]	; 0x30
  hsai_BlockB1.Init.PdmInit.Activation = DISABLE;
 8100ba4:	4b0d      	ldr	r3, [pc, #52]	; (8100bdc <MX_SAI1_Init+0x130>)
 8100ba6:	2200      	movs	r2, #0
 8100ba8:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hsai_BlockB1.Init.PdmInit.MicPairsNbr = 1;
 8100bac:	4b0b      	ldr	r3, [pc, #44]	; (8100bdc <MX_SAI1_Init+0x130>)
 8100bae:	2201      	movs	r2, #1
 8100bb0:	63da      	str	r2, [r3, #60]	; 0x3c
  hsai_BlockB1.Init.PdmInit.ClockEnable = SAI_PDM_CLOCK1_ENABLE;
 8100bb2:	4b0a      	ldr	r3, [pc, #40]	; (8100bdc <MX_SAI1_Init+0x130>)
 8100bb4:	f44f 7280 	mov.w	r2, #256	; 0x100
 8100bb8:	641a      	str	r2, [r3, #64]	; 0x40
  if (HAL_SAI_Init(&hsai_BlockB1) != HAL_OK)
 8100bba:	4808      	ldr	r0, [pc, #32]	; (8100bdc <MX_SAI1_Init+0x130>)
 8100bbc:	f00c fa36 	bl	810d02c <HAL_SAI_Init>
 8100bc0:	4603      	mov	r3, r0
 8100bc2:	2b00      	cmp	r3, #0
 8100bc4:	d001      	beq.n	8100bca <MX_SAI1_Init+0x11e>
  {
    Error_Handler();
 8100bc6:	f000 fbee 	bl	81013a6 <Error_Handler>
  }
  /* USER CODE BEGIN SAI1_Init 2 */

  /* USER CODE END SAI1_Init 2 */

}
 8100bca:	bf00      	nop
 8100bcc:	bd80      	pop	{r7, pc}
 8100bce:	bf00      	nop
 8100bd0:	10000378 	.word	0x10000378
 8100bd4:	40015804 	.word	0x40015804
 8100bd8:	0002ee00 	.word	0x0002ee00
 8100bdc:	10000410 	.word	0x10000410
 8100be0:	40015824 	.word	0x40015824

08100be4 <MX_SDMMC1_SD_Init>:
  * @brief SDMMC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SDMMC1_SD_Init(void)
{
 8100be4:	b580      	push	{r7, lr}
 8100be6:	af00      	add	r7, sp, #0
  /* USER CODE END SDMMC1_Init 0 */

  /* USER CODE BEGIN SDMMC1_Init 1 */

  /* USER CODE END SDMMC1_Init 1 */
  hsd1.Instance = SDMMC1;
 8100be8:	4b0e      	ldr	r3, [pc, #56]	; (8100c24 <MX_SDMMC1_SD_Init+0x40>)
 8100bea:	4a0f      	ldr	r2, [pc, #60]	; (8100c28 <MX_SDMMC1_SD_Init+0x44>)
 8100bec:	601a      	str	r2, [r3, #0]
  hsd1.Init.ClockEdge = SDMMC_CLOCK_EDGE_RISING;
 8100bee:	4b0d      	ldr	r3, [pc, #52]	; (8100c24 <MX_SDMMC1_SD_Init+0x40>)
 8100bf0:	2200      	movs	r2, #0
 8100bf2:	605a      	str	r2, [r3, #4]
  hsd1.Init.ClockPowerSave = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 8100bf4:	4b0b      	ldr	r3, [pc, #44]	; (8100c24 <MX_SDMMC1_SD_Init+0x40>)
 8100bf6:	2200      	movs	r2, #0
 8100bf8:	609a      	str	r2, [r3, #8]
  hsd1.Init.BusWide = SDMMC_BUS_WIDE_4B;
 8100bfa:	4b0a      	ldr	r3, [pc, #40]	; (8100c24 <MX_SDMMC1_SD_Init+0x40>)
 8100bfc:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8100c00:	60da      	str	r2, [r3, #12]
  hsd1.Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 8100c02:	4b08      	ldr	r3, [pc, #32]	; (8100c24 <MX_SDMMC1_SD_Init+0x40>)
 8100c04:	2200      	movs	r2, #0
 8100c06:	611a      	str	r2, [r3, #16]
  hsd1.Init.ClockDiv = 0;
 8100c08:	4b06      	ldr	r3, [pc, #24]	; (8100c24 <MX_SDMMC1_SD_Init+0x40>)
 8100c0a:	2200      	movs	r2, #0
 8100c0c:	615a      	str	r2, [r3, #20]
  if (HAL_SD_Init(&hsd1) != HAL_OK)
 8100c0e:	4805      	ldr	r0, [pc, #20]	; (8100c24 <MX_SDMMC1_SD_Init+0x40>)
 8100c10:	f00c fcf0 	bl	810d5f4 <HAL_SD_Init>
 8100c14:	4603      	mov	r3, r0
 8100c16:	2b00      	cmp	r3, #0
 8100c18:	d001      	beq.n	8100c1e <MX_SDMMC1_SD_Init+0x3a>
  {
    Error_Handler();
 8100c1a:	f000 fbc4 	bl	81013a6 <Error_Handler>
  }
  /* USER CODE BEGIN SDMMC1_Init 2 */

  /* USER CODE END SDMMC1_Init 2 */

}
 8100c1e:	bf00      	nop
 8100c20:	bd80      	pop	{r7, pc}
 8100c22:	bf00      	nop
 8100c24:	100004a8 	.word	0x100004a8
 8100c28:	52007000 	.word	0x52007000

08100c2c <MX_SPDIFRX1_Init>:
  * @brief SPDIFRX1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPDIFRX1_Init(void)
{
 8100c2c:	b580      	push	{r7, lr}
 8100c2e:	af00      	add	r7, sp, #0
  /* USER CODE END SPDIFRX1_Init 0 */

  /* USER CODE BEGIN SPDIFRX1_Init 1 */

  /* USER CODE END SPDIFRX1_Init 1 */
  hspdif1.Instance = SPDIFRX;
 8100c30:	4b19      	ldr	r3, [pc, #100]	; (8100c98 <MX_SPDIFRX1_Init+0x6c>)
 8100c32:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
 8100c36:	601a      	str	r2, [r3, #0]
  hspdif1.Init.InputSelection = SPDIFRX_INPUT_IN0;
 8100c38:	4b17      	ldr	r3, [pc, #92]	; (8100c98 <MX_SPDIFRX1_Init+0x6c>)
 8100c3a:	2200      	movs	r2, #0
 8100c3c:	605a      	str	r2, [r3, #4]
  hspdif1.Init.Retries = SPDIFRX_MAXRETRIES_NONE;
 8100c3e:	4b16      	ldr	r3, [pc, #88]	; (8100c98 <MX_SPDIFRX1_Init+0x6c>)
 8100c40:	2200      	movs	r2, #0
 8100c42:	609a      	str	r2, [r3, #8]
  hspdif1.Init.WaitForActivity = SPDIFRX_WAITFORACTIVITY_OFF;
 8100c44:	4b14      	ldr	r3, [pc, #80]	; (8100c98 <MX_SPDIFRX1_Init+0x6c>)
 8100c46:	2200      	movs	r2, #0
 8100c48:	60da      	str	r2, [r3, #12]
  hspdif1.Init.ChannelSelection = SPDIFRX_CHANNEL_A;
 8100c4a:	4b13      	ldr	r3, [pc, #76]	; (8100c98 <MX_SPDIFRX1_Init+0x6c>)
 8100c4c:	2200      	movs	r2, #0
 8100c4e:	611a      	str	r2, [r3, #16]
  hspdif1.Init.DataFormat = SPDIFRX_DATAFORMAT_LSB;
 8100c50:	4b11      	ldr	r3, [pc, #68]	; (8100c98 <MX_SPDIFRX1_Init+0x6c>)
 8100c52:	2200      	movs	r2, #0
 8100c54:	615a      	str	r2, [r3, #20]
  hspdif1.Init.StereoMode = SPDIFRX_STEREOMODE_DISABLE;
 8100c56:	4b10      	ldr	r3, [pc, #64]	; (8100c98 <MX_SPDIFRX1_Init+0x6c>)
 8100c58:	2200      	movs	r2, #0
 8100c5a:	619a      	str	r2, [r3, #24]
  hspdif1.Init.PreambleTypeMask = SPDIFRX_PREAMBLETYPEMASK_OFF;
 8100c5c:	4b0e      	ldr	r3, [pc, #56]	; (8100c98 <MX_SPDIFRX1_Init+0x6c>)
 8100c5e:	2200      	movs	r2, #0
 8100c60:	61da      	str	r2, [r3, #28]
  hspdif1.Init.ChannelStatusMask = SPDIFRX_CHANNELSTATUS_OFF;
 8100c62:	4b0d      	ldr	r3, [pc, #52]	; (8100c98 <MX_SPDIFRX1_Init+0x6c>)
 8100c64:	2200      	movs	r2, #0
 8100c66:	621a      	str	r2, [r3, #32]
  hspdif1.Init.ValidityBitMask = SPDIFRX_VALIDITYMASK_OFF;
 8100c68:	4b0b      	ldr	r3, [pc, #44]	; (8100c98 <MX_SPDIFRX1_Init+0x6c>)
 8100c6a:	2200      	movs	r2, #0
 8100c6c:	625a      	str	r2, [r3, #36]	; 0x24
  hspdif1.Init.ParityErrorMask = SPDIFRX_PARITYERRORMASK_OFF;
 8100c6e:	4b0a      	ldr	r3, [pc, #40]	; (8100c98 <MX_SPDIFRX1_Init+0x6c>)
 8100c70:	2200      	movs	r2, #0
 8100c72:	629a      	str	r2, [r3, #40]	; 0x28
  hspdif1.Init.SymbolClockGen = DISABLE;
 8100c74:	4b08      	ldr	r3, [pc, #32]	; (8100c98 <MX_SPDIFRX1_Init+0x6c>)
 8100c76:	2200      	movs	r2, #0
 8100c78:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  hspdif1.Init.BackupSymbolClockGen = DISABLE;
 8100c7c:	4b06      	ldr	r3, [pc, #24]	; (8100c98 <MX_SPDIFRX1_Init+0x6c>)
 8100c7e:	2200      	movs	r2, #0
 8100c80:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
  if (HAL_SPDIFRX_Init(&hspdif1) != HAL_OK)
 8100c84:	4804      	ldr	r0, [pc, #16]	; (8100c98 <MX_SPDIFRX1_Init+0x6c>)
 8100c86:	f00d fd5f 	bl	810e748 <HAL_SPDIFRX_Init>
 8100c8a:	4603      	mov	r3, r0
 8100c8c:	2b00      	cmp	r3, #0
 8100c8e:	d001      	beq.n	8100c94 <MX_SPDIFRX1_Init+0x68>
  {
    Error_Handler();
 8100c90:	f000 fb89 	bl	81013a6 <Error_Handler>
  }
  /* USER CODE BEGIN SPDIFRX1_Init 2 */

  /* USER CODE END SPDIFRX1_Init 2 */

}
 8100c94:	bf00      	nop
 8100c96:	bd80      	pop	{r7, pc}
 8100c98:	10000524 	.word	0x10000524

08100c9c <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8100c9c:	b580      	push	{r7, lr}
 8100c9e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8100ca0:	4b26      	ldr	r3, [pc, #152]	; (8100d3c <MX_SPI2_Init+0xa0>)
 8100ca2:	4a27      	ldr	r2, [pc, #156]	; (8100d40 <MX_SPI2_Init+0xa4>)
 8100ca4:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8100ca6:	4b25      	ldr	r3, [pc, #148]	; (8100d3c <MX_SPI2_Init+0xa0>)
 8100ca8:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 8100cac:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8100cae:	4b23      	ldr	r3, [pc, #140]	; (8100d3c <MX_SPI2_Init+0xa0>)
 8100cb0:	2200      	movs	r2, #0
 8100cb2:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_4BIT;
 8100cb4:	4b21      	ldr	r3, [pc, #132]	; (8100d3c <MX_SPI2_Init+0xa0>)
 8100cb6:	2203      	movs	r2, #3
 8100cb8:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8100cba:	4b20      	ldr	r3, [pc, #128]	; (8100d3c <MX_SPI2_Init+0xa0>)
 8100cbc:	2200      	movs	r2, #0
 8100cbe:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8100cc0:	4b1e      	ldr	r3, [pc, #120]	; (8100d3c <MX_SPI2_Init+0xa0>)
 8100cc2:	2200      	movs	r2, #0
 8100cc4:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_HARD_INPUT;
 8100cc6:	4b1d      	ldr	r3, [pc, #116]	; (8100d3c <MX_SPI2_Init+0xa0>)
 8100cc8:	2200      	movs	r2, #0
 8100cca:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8100ccc:	4b1b      	ldr	r3, [pc, #108]	; (8100d3c <MX_SPI2_Init+0xa0>)
 8100cce:	2200      	movs	r2, #0
 8100cd0:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8100cd2:	4b1a      	ldr	r3, [pc, #104]	; (8100d3c <MX_SPI2_Init+0xa0>)
 8100cd4:	2200      	movs	r2, #0
 8100cd6:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8100cd8:	4b18      	ldr	r3, [pc, #96]	; (8100d3c <MX_SPI2_Init+0xa0>)
 8100cda:	2200      	movs	r2, #0
 8100cdc:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8100cde:	4b17      	ldr	r3, [pc, #92]	; (8100d3c <MX_SPI2_Init+0xa0>)
 8100ce0:	2200      	movs	r2, #0
 8100ce2:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 0x0;
 8100ce4:	4b15      	ldr	r3, [pc, #84]	; (8100d3c <MX_SPI2_Init+0xa0>)
 8100ce6:	2200      	movs	r2, #0
 8100ce8:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8100cea:	4b14      	ldr	r3, [pc, #80]	; (8100d3c <MX_SPI2_Init+0xa0>)
 8100cec:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8100cf0:	635a      	str	r2, [r3, #52]	; 0x34
  hspi2.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8100cf2:	4b12      	ldr	r3, [pc, #72]	; (8100d3c <MX_SPI2_Init+0xa0>)
 8100cf4:	2200      	movs	r2, #0
 8100cf6:	639a      	str	r2, [r3, #56]	; 0x38
  hspi2.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 8100cf8:	4b10      	ldr	r3, [pc, #64]	; (8100d3c <MX_SPI2_Init+0xa0>)
 8100cfa:	2200      	movs	r2, #0
 8100cfc:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi2.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8100cfe:	4b0f      	ldr	r3, [pc, #60]	; (8100d3c <MX_SPI2_Init+0xa0>)
 8100d00:	2200      	movs	r2, #0
 8100d02:	641a      	str	r2, [r3, #64]	; 0x40
  hspi2.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8100d04:	4b0d      	ldr	r3, [pc, #52]	; (8100d3c <MX_SPI2_Init+0xa0>)
 8100d06:	2200      	movs	r2, #0
 8100d08:	645a      	str	r2, [r3, #68]	; 0x44
  hspi2.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8100d0a:	4b0c      	ldr	r3, [pc, #48]	; (8100d3c <MX_SPI2_Init+0xa0>)
 8100d0c:	2200      	movs	r2, #0
 8100d0e:	649a      	str	r2, [r3, #72]	; 0x48
  hspi2.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 8100d10:	4b0a      	ldr	r3, [pc, #40]	; (8100d3c <MX_SPI2_Init+0xa0>)
 8100d12:	2200      	movs	r2, #0
 8100d14:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi2.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8100d16:	4b09      	ldr	r3, [pc, #36]	; (8100d3c <MX_SPI2_Init+0xa0>)
 8100d18:	2200      	movs	r2, #0
 8100d1a:	651a      	str	r2, [r3, #80]	; 0x50
  hspi2.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8100d1c:	4b07      	ldr	r3, [pc, #28]	; (8100d3c <MX_SPI2_Init+0xa0>)
 8100d1e:	2200      	movs	r2, #0
 8100d20:	655a      	str	r2, [r3, #84]	; 0x54
  hspi2.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8100d22:	4b06      	ldr	r3, [pc, #24]	; (8100d3c <MX_SPI2_Init+0xa0>)
 8100d24:	2200      	movs	r2, #0
 8100d26:	659a      	str	r2, [r3, #88]	; 0x58
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8100d28:	4804      	ldr	r0, [pc, #16]	; (8100d3c <MX_SPI2_Init+0xa0>)
 8100d2a:	f00d fd7b 	bl	810e824 <HAL_SPI_Init>
 8100d2e:	4603      	mov	r3, r0
 8100d30:	2b00      	cmp	r3, #0
 8100d32:	d001      	beq.n	8100d38 <MX_SPI2_Init+0x9c>
  {
    Error_Handler();
 8100d34:	f000 fb37 	bl	81013a6 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8100d38:	bf00      	nop
 8100d3a:	bd80      	pop	{r7, pc}
 8100d3c:	10000574 	.word	0x10000574
 8100d40:	40003800 	.word	0x40003800

08100d44 <MX_SPI5_Init>:
  * @brief SPI5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI5_Init(void)
{
 8100d44:	b580      	push	{r7, lr}
 8100d46:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI5_Init 1 */

  /* USER CODE END SPI5_Init 1 */
  /* SPI5 parameter configuration*/
  hspi5.Instance = SPI5;
 8100d48:	4b26      	ldr	r3, [pc, #152]	; (8100de4 <MX_SPI5_Init+0xa0>)
 8100d4a:	4a27      	ldr	r2, [pc, #156]	; (8100de8 <MX_SPI5_Init+0xa4>)
 8100d4c:	601a      	str	r2, [r3, #0]
  hspi5.Init.Mode = SPI_MODE_MASTER;
 8100d4e:	4b25      	ldr	r3, [pc, #148]	; (8100de4 <MX_SPI5_Init+0xa0>)
 8100d50:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 8100d54:	605a      	str	r2, [r3, #4]
  hspi5.Init.Direction = SPI_DIRECTION_2LINES;
 8100d56:	4b23      	ldr	r3, [pc, #140]	; (8100de4 <MX_SPI5_Init+0xa0>)
 8100d58:	2200      	movs	r2, #0
 8100d5a:	609a      	str	r2, [r3, #8]
  hspi5.Init.DataSize = SPI_DATASIZE_4BIT;
 8100d5c:	4b21      	ldr	r3, [pc, #132]	; (8100de4 <MX_SPI5_Init+0xa0>)
 8100d5e:	2203      	movs	r2, #3
 8100d60:	60da      	str	r2, [r3, #12]
  hspi5.Init.CLKPolarity = SPI_POLARITY_LOW;
 8100d62:	4b20      	ldr	r3, [pc, #128]	; (8100de4 <MX_SPI5_Init+0xa0>)
 8100d64:	2200      	movs	r2, #0
 8100d66:	611a      	str	r2, [r3, #16]
  hspi5.Init.CLKPhase = SPI_PHASE_1EDGE;
 8100d68:	4b1e      	ldr	r3, [pc, #120]	; (8100de4 <MX_SPI5_Init+0xa0>)
 8100d6a:	2200      	movs	r2, #0
 8100d6c:	615a      	str	r2, [r3, #20]
  hspi5.Init.NSS = SPI_NSS_HARD_INPUT;
 8100d6e:	4b1d      	ldr	r3, [pc, #116]	; (8100de4 <MX_SPI5_Init+0xa0>)
 8100d70:	2200      	movs	r2, #0
 8100d72:	619a      	str	r2, [r3, #24]
  hspi5.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8100d74:	4b1b      	ldr	r3, [pc, #108]	; (8100de4 <MX_SPI5_Init+0xa0>)
 8100d76:	2200      	movs	r2, #0
 8100d78:	61da      	str	r2, [r3, #28]
  hspi5.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8100d7a:	4b1a      	ldr	r3, [pc, #104]	; (8100de4 <MX_SPI5_Init+0xa0>)
 8100d7c:	2200      	movs	r2, #0
 8100d7e:	621a      	str	r2, [r3, #32]
  hspi5.Init.TIMode = SPI_TIMODE_DISABLE;
 8100d80:	4b18      	ldr	r3, [pc, #96]	; (8100de4 <MX_SPI5_Init+0xa0>)
 8100d82:	2200      	movs	r2, #0
 8100d84:	625a      	str	r2, [r3, #36]	; 0x24
  hspi5.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8100d86:	4b17      	ldr	r3, [pc, #92]	; (8100de4 <MX_SPI5_Init+0xa0>)
 8100d88:	2200      	movs	r2, #0
 8100d8a:	629a      	str	r2, [r3, #40]	; 0x28
  hspi5.Init.CRCPolynomial = 0x0;
 8100d8c:	4b15      	ldr	r3, [pc, #84]	; (8100de4 <MX_SPI5_Init+0xa0>)
 8100d8e:	2200      	movs	r2, #0
 8100d90:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi5.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8100d92:	4b14      	ldr	r3, [pc, #80]	; (8100de4 <MX_SPI5_Init+0xa0>)
 8100d94:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8100d98:	635a      	str	r2, [r3, #52]	; 0x34
  hspi5.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8100d9a:	4b12      	ldr	r3, [pc, #72]	; (8100de4 <MX_SPI5_Init+0xa0>)
 8100d9c:	2200      	movs	r2, #0
 8100d9e:	639a      	str	r2, [r3, #56]	; 0x38
  hspi5.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 8100da0:	4b10      	ldr	r3, [pc, #64]	; (8100de4 <MX_SPI5_Init+0xa0>)
 8100da2:	2200      	movs	r2, #0
 8100da4:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi5.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8100da6:	4b0f      	ldr	r3, [pc, #60]	; (8100de4 <MX_SPI5_Init+0xa0>)
 8100da8:	2200      	movs	r2, #0
 8100daa:	641a      	str	r2, [r3, #64]	; 0x40
  hspi5.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8100dac:	4b0d      	ldr	r3, [pc, #52]	; (8100de4 <MX_SPI5_Init+0xa0>)
 8100dae:	2200      	movs	r2, #0
 8100db0:	645a      	str	r2, [r3, #68]	; 0x44
  hspi5.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8100db2:	4b0c      	ldr	r3, [pc, #48]	; (8100de4 <MX_SPI5_Init+0xa0>)
 8100db4:	2200      	movs	r2, #0
 8100db6:	649a      	str	r2, [r3, #72]	; 0x48
  hspi5.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 8100db8:	4b0a      	ldr	r3, [pc, #40]	; (8100de4 <MX_SPI5_Init+0xa0>)
 8100dba:	2200      	movs	r2, #0
 8100dbc:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi5.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8100dbe:	4b09      	ldr	r3, [pc, #36]	; (8100de4 <MX_SPI5_Init+0xa0>)
 8100dc0:	2200      	movs	r2, #0
 8100dc2:	651a      	str	r2, [r3, #80]	; 0x50
  hspi5.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8100dc4:	4b07      	ldr	r3, [pc, #28]	; (8100de4 <MX_SPI5_Init+0xa0>)
 8100dc6:	2200      	movs	r2, #0
 8100dc8:	655a      	str	r2, [r3, #84]	; 0x54
  hspi5.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8100dca:	4b06      	ldr	r3, [pc, #24]	; (8100de4 <MX_SPI5_Init+0xa0>)
 8100dcc:	2200      	movs	r2, #0
 8100dce:	659a      	str	r2, [r3, #88]	; 0x58
  if (HAL_SPI_Init(&hspi5) != HAL_OK)
 8100dd0:	4804      	ldr	r0, [pc, #16]	; (8100de4 <MX_SPI5_Init+0xa0>)
 8100dd2:	f00d fd27 	bl	810e824 <HAL_SPI_Init>
 8100dd6:	4603      	mov	r3, r0
 8100dd8:	2b00      	cmp	r3, #0
 8100dda:	d001      	beq.n	8100de0 <MX_SPI5_Init+0x9c>
  {
    Error_Handler();
 8100ddc:	f000 fae3 	bl	81013a6 <Error_Handler>
  }
  /* USER CODE BEGIN SPI5_Init 2 */

  /* USER CODE END SPI5_Init 2 */

}
 8100de0:	bf00      	nop
 8100de2:	bd80      	pop	{r7, pc}
 8100de4:	100005fc 	.word	0x100005fc
 8100de8:	40015000 	.word	0x40015000

08100dec <MX_TIM8_Init>:
  * @brief TIM8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM8_Init(void)
{
 8100dec:	b580      	push	{r7, lr}
 8100dee:	b096      	sub	sp, #88	; 0x58
 8100df0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8100df2:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8100df6:	2200      	movs	r2, #0
 8100df8:	601a      	str	r2, [r3, #0]
 8100dfa:	605a      	str	r2, [r3, #4]
 8100dfc:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8100dfe:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8100e02:	2200      	movs	r2, #0
 8100e04:	601a      	str	r2, [r3, #0]
 8100e06:	605a      	str	r2, [r3, #4]
 8100e08:	609a      	str	r2, [r3, #8]
 8100e0a:	60da      	str	r2, [r3, #12]
 8100e0c:	611a      	str	r2, [r3, #16]
 8100e0e:	615a      	str	r2, [r3, #20]
 8100e10:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8100e12:	1d3b      	adds	r3, r7, #4
 8100e14:	222c      	movs	r2, #44	; 0x2c
 8100e16:	2100      	movs	r1, #0
 8100e18:	4618      	mov	r0, r3
 8100e1a:	f010 ff9f 	bl	8111d5c <memset>

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 8100e1e:	4b39      	ldr	r3, [pc, #228]	; (8100f04 <MX_TIM8_Init+0x118>)
 8100e20:	4a39      	ldr	r2, [pc, #228]	; (8100f08 <MX_TIM8_Init+0x11c>)
 8100e22:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 0;
 8100e24:	4b37      	ldr	r3, [pc, #220]	; (8100f04 <MX_TIM8_Init+0x118>)
 8100e26:	2200      	movs	r2, #0
 8100e28:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 8100e2a:	4b36      	ldr	r3, [pc, #216]	; (8100f04 <MX_TIM8_Init+0x118>)
 8100e2c:	2200      	movs	r2, #0
 8100e2e:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 65535;
 8100e30:	4b34      	ldr	r3, [pc, #208]	; (8100f04 <MX_TIM8_Init+0x118>)
 8100e32:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8100e36:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8100e38:	4b32      	ldr	r3, [pc, #200]	; (8100f04 <MX_TIM8_Init+0x118>)
 8100e3a:	2200      	movs	r2, #0
 8100e3c:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 8100e3e:	4b31      	ldr	r3, [pc, #196]	; (8100f04 <MX_TIM8_Init+0x118>)
 8100e40:	2200      	movs	r2, #0
 8100e42:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8100e44:	4b2f      	ldr	r3, [pc, #188]	; (8100f04 <MX_TIM8_Init+0x118>)
 8100e46:	2200      	movs	r2, #0
 8100e48:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_OC_Init(&htim8) != HAL_OK)
 8100e4a:	482e      	ldr	r0, [pc, #184]	; (8100f04 <MX_TIM8_Init+0x118>)
 8100e4c:	f00d fe80 	bl	810eb50 <HAL_TIM_OC_Init>
 8100e50:	4603      	mov	r3, r0
 8100e52:	2b00      	cmp	r3, #0
 8100e54:	d001      	beq.n	8100e5a <MX_TIM8_Init+0x6e>
  {
    Error_Handler();
 8100e56:	f000 faa6 	bl	81013a6 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8100e5a:	2300      	movs	r3, #0
 8100e5c:	64fb      	str	r3, [r7, #76]	; 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8100e5e:	2300      	movs	r3, #0
 8100e60:	653b      	str	r3, [r7, #80]	; 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8100e62:	2300      	movs	r3, #0
 8100e64:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 8100e66:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8100e6a:	4619      	mov	r1, r3
 8100e6c:	4825      	ldr	r0, [pc, #148]	; (8100f04 <MX_TIM8_Init+0x118>)
 8100e6e:	f00e fcd7 	bl	810f820 <HAL_TIMEx_MasterConfigSynchronization>
 8100e72:	4603      	mov	r3, r0
 8100e74:	2b00      	cmp	r3, #0
 8100e76:	d001      	beq.n	8100e7c <MX_TIM8_Init+0x90>
  {
    Error_Handler();
 8100e78:	f000 fa95 	bl	81013a6 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TIMING;
 8100e7c:	2300      	movs	r3, #0
 8100e7e:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.Pulse = 0;
 8100e80:	2300      	movs	r3, #0
 8100e82:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8100e84:	2300      	movs	r3, #0
 8100e86:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8100e88:	2300      	movs	r3, #0
 8100e8a:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8100e8c:	2300      	movs	r3, #0
 8100e8e:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8100e90:	2300      	movs	r3, #0
 8100e92:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8100e94:	2300      	movs	r3, #0
 8100e96:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_OC_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8100e98:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8100e9c:	2204      	movs	r2, #4
 8100e9e:	4619      	mov	r1, r3
 8100ea0:	4818      	ldr	r0, [pc, #96]	; (8100f04 <MX_TIM8_Init+0x118>)
 8100ea2:	f00d ff0d 	bl	810ecc0 <HAL_TIM_OC_ConfigChannel>
 8100ea6:	4603      	mov	r3, r0
 8100ea8:	2b00      	cmp	r3, #0
 8100eaa:	d001      	beq.n	8100eb0 <MX_TIM8_Init+0xc4>
  {
    Error_Handler();
 8100eac:	f000 fa7b 	bl	81013a6 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8100eb0:	2300      	movs	r3, #0
 8100eb2:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8100eb4:	2300      	movs	r3, #0
 8100eb6:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8100eb8:	2300      	movs	r3, #0
 8100eba:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8100ebc:	2300      	movs	r3, #0
 8100ebe:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8100ec0:	2300      	movs	r3, #0
 8100ec2:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8100ec4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8100ec8:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8100eca:	2300      	movs	r3, #0
 8100ecc:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8100ece:	2300      	movs	r3, #0
 8100ed0:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8100ed2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8100ed6:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 8100ed8:	2300      	movs	r3, #0
 8100eda:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8100edc:	2300      	movs	r3, #0
 8100ede:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK)
 8100ee0:	1d3b      	adds	r3, r7, #4
 8100ee2:	4619      	mov	r1, r3
 8100ee4:	4807      	ldr	r0, [pc, #28]	; (8100f04 <MX_TIM8_Init+0x118>)
 8100ee6:	f00e fd29 	bl	810f93c <HAL_TIMEx_ConfigBreakDeadTime>
 8100eea:	4603      	mov	r3, r0
 8100eec:	2b00      	cmp	r3, #0
 8100eee:	d001      	beq.n	8100ef4 <MX_TIM8_Init+0x108>
  {
    Error_Handler();
 8100ef0:	f000 fa59 	bl	81013a6 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */
  HAL_TIM_MspPostInit(&htim8);
 8100ef4:	4803      	ldr	r0, [pc, #12]	; (8100f04 <MX_TIM8_Init+0x118>)
 8100ef6:	f000 ffef 	bl	8101ed8 <HAL_TIM_MspPostInit>

}
 8100efa:	bf00      	nop
 8100efc:	3758      	adds	r7, #88	; 0x58
 8100efe:	46bd      	mov	sp, r7
 8100f00:	bd80      	pop	{r7, pc}
 8100f02:	bf00      	nop
 8100f04:	10000684 	.word	0x10000684
 8100f08:	40010400 	.word	0x40010400

08100f0c <MX_TIM13_Init>:
  * @brief TIM13 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM13_Init(void)
{
 8100f0c:	b580      	push	{r7, lr}
 8100f0e:	b084      	sub	sp, #16
 8100f10:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM13_Init 0 */

  /* USER CODE END TIM13_Init 0 */

  TIM_IC_InitTypeDef sConfigIC = {0};
 8100f12:	463b      	mov	r3, r7
 8100f14:	2200      	movs	r2, #0
 8100f16:	601a      	str	r2, [r3, #0]
 8100f18:	605a      	str	r2, [r3, #4]
 8100f1a:	609a      	str	r2, [r3, #8]
 8100f1c:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM13_Init 1 */

  /* USER CODE END TIM13_Init 1 */
  htim13.Instance = TIM13;
 8100f1e:	4b1d      	ldr	r3, [pc, #116]	; (8100f94 <MX_TIM13_Init+0x88>)
 8100f20:	4a1d      	ldr	r2, [pc, #116]	; (8100f98 <MX_TIM13_Init+0x8c>)
 8100f22:	601a      	str	r2, [r3, #0]
  htim13.Init.Prescaler = 0;
 8100f24:	4b1b      	ldr	r3, [pc, #108]	; (8100f94 <MX_TIM13_Init+0x88>)
 8100f26:	2200      	movs	r2, #0
 8100f28:	605a      	str	r2, [r3, #4]
  htim13.Init.CounterMode = TIM_COUNTERMODE_UP;
 8100f2a:	4b1a      	ldr	r3, [pc, #104]	; (8100f94 <MX_TIM13_Init+0x88>)
 8100f2c:	2200      	movs	r2, #0
 8100f2e:	609a      	str	r2, [r3, #8]
  htim13.Init.Period = 65535;
 8100f30:	4b18      	ldr	r3, [pc, #96]	; (8100f94 <MX_TIM13_Init+0x88>)
 8100f32:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8100f36:	60da      	str	r2, [r3, #12]
  htim13.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8100f38:	4b16      	ldr	r3, [pc, #88]	; (8100f94 <MX_TIM13_Init+0x88>)
 8100f3a:	2200      	movs	r2, #0
 8100f3c:	611a      	str	r2, [r3, #16]
  htim13.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8100f3e:	4b15      	ldr	r3, [pc, #84]	; (8100f94 <MX_TIM13_Init+0x88>)
 8100f40:	2200      	movs	r2, #0
 8100f42:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim13) != HAL_OK)
 8100f44:	4813      	ldr	r0, [pc, #76]	; (8100f94 <MX_TIM13_Init+0x88>)
 8100f46:	f00d fdac 	bl	810eaa2 <HAL_TIM_Base_Init>
 8100f4a:	4603      	mov	r3, r0
 8100f4c:	2b00      	cmp	r3, #0
 8100f4e:	d001      	beq.n	8100f54 <MX_TIM13_Init+0x48>
  {
    Error_Handler();
 8100f50:	f000 fa29 	bl	81013a6 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim13) != HAL_OK)
 8100f54:	480f      	ldr	r0, [pc, #60]	; (8100f94 <MX_TIM13_Init+0x88>)
 8100f56:	f00d fe52 	bl	810ebfe <HAL_TIM_IC_Init>
 8100f5a:	4603      	mov	r3, r0
 8100f5c:	2b00      	cmp	r3, #0
 8100f5e:	d001      	beq.n	8100f64 <MX_TIM13_Init+0x58>
  {
    Error_Handler();
 8100f60:	f000 fa21 	bl	81013a6 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8100f64:	2300      	movs	r3, #0
 8100f66:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8100f68:	2301      	movs	r3, #1
 8100f6a:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8100f6c:	2300      	movs	r3, #0
 8100f6e:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 0;
 8100f70:	2300      	movs	r3, #0
 8100f72:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim13, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8100f74:	463b      	mov	r3, r7
 8100f76:	2200      	movs	r2, #0
 8100f78:	4619      	mov	r1, r3
 8100f7a:	4806      	ldr	r0, [pc, #24]	; (8100f94 <MX_TIM13_Init+0x88>)
 8100f7c:	f00d ff1a 	bl	810edb4 <HAL_TIM_IC_ConfigChannel>
 8100f80:	4603      	mov	r3, r0
 8100f82:	2b00      	cmp	r3, #0
 8100f84:	d001      	beq.n	8100f8a <MX_TIM13_Init+0x7e>
  {
    Error_Handler();
 8100f86:	f000 fa0e 	bl	81013a6 <Error_Handler>
  }
  /* USER CODE BEGIN TIM13_Init 2 */

  /* USER CODE END TIM13_Init 2 */

}
 8100f8a:	bf00      	nop
 8100f8c:	3710      	adds	r7, #16
 8100f8e:	46bd      	mov	sp, r7
 8100f90:	bd80      	pop	{r7, pc}
 8100f92:	bf00      	nop
 8100f94:	100006d0 	.word	0x100006d0
 8100f98:	40001c00 	.word	0x40001c00

08100f9c <MX_UART8_Init>:
  * @brief UART8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART8_Init(void)
{
 8100f9c:	b580      	push	{r7, lr}
 8100f9e:	af00      	add	r7, sp, #0
  /* USER CODE END UART8_Init 0 */

  /* USER CODE BEGIN UART8_Init 1 */

  /* USER CODE END UART8_Init 1 */
  huart8.Instance = UART8;
 8100fa0:	4b22      	ldr	r3, [pc, #136]	; (810102c <MX_UART8_Init+0x90>)
 8100fa2:	4a23      	ldr	r2, [pc, #140]	; (8101030 <MX_UART8_Init+0x94>)
 8100fa4:	601a      	str	r2, [r3, #0]
  huart8.Init.BaudRate = 115200;
 8100fa6:	4b21      	ldr	r3, [pc, #132]	; (810102c <MX_UART8_Init+0x90>)
 8100fa8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8100fac:	605a      	str	r2, [r3, #4]
  huart8.Init.WordLength = UART_WORDLENGTH_8B;
 8100fae:	4b1f      	ldr	r3, [pc, #124]	; (810102c <MX_UART8_Init+0x90>)
 8100fb0:	2200      	movs	r2, #0
 8100fb2:	609a      	str	r2, [r3, #8]
  huart8.Init.StopBits = UART_STOPBITS_1;
 8100fb4:	4b1d      	ldr	r3, [pc, #116]	; (810102c <MX_UART8_Init+0x90>)
 8100fb6:	2200      	movs	r2, #0
 8100fb8:	60da      	str	r2, [r3, #12]
  huart8.Init.Parity = UART_PARITY_NONE;
 8100fba:	4b1c      	ldr	r3, [pc, #112]	; (810102c <MX_UART8_Init+0x90>)
 8100fbc:	2200      	movs	r2, #0
 8100fbe:	611a      	str	r2, [r3, #16]
  huart8.Init.Mode = UART_MODE_TX_RX;
 8100fc0:	4b1a      	ldr	r3, [pc, #104]	; (810102c <MX_UART8_Init+0x90>)
 8100fc2:	220c      	movs	r2, #12
 8100fc4:	615a      	str	r2, [r3, #20]
  huart8.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8100fc6:	4b19      	ldr	r3, [pc, #100]	; (810102c <MX_UART8_Init+0x90>)
 8100fc8:	2200      	movs	r2, #0
 8100fca:	619a      	str	r2, [r3, #24]
  huart8.Init.OverSampling = UART_OVERSAMPLING_16;
 8100fcc:	4b17      	ldr	r3, [pc, #92]	; (810102c <MX_UART8_Init+0x90>)
 8100fce:	2200      	movs	r2, #0
 8100fd0:	61da      	str	r2, [r3, #28]
  huart8.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8100fd2:	4b16      	ldr	r3, [pc, #88]	; (810102c <MX_UART8_Init+0x90>)
 8100fd4:	2200      	movs	r2, #0
 8100fd6:	621a      	str	r2, [r3, #32]
  huart8.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8100fd8:	4b14      	ldr	r3, [pc, #80]	; (810102c <MX_UART8_Init+0x90>)
 8100fda:	2200      	movs	r2, #0
 8100fdc:	625a      	str	r2, [r3, #36]	; 0x24
  huart8.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8100fde:	4b13      	ldr	r3, [pc, #76]	; (810102c <MX_UART8_Init+0x90>)
 8100fe0:	2200      	movs	r2, #0
 8100fe2:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart8) != HAL_OK)
 8100fe4:	4811      	ldr	r0, [pc, #68]	; (810102c <MX_UART8_Init+0x90>)
 8100fe6:	f00e fd27 	bl	810fa38 <HAL_UART_Init>
 8100fea:	4603      	mov	r3, r0
 8100fec:	2b00      	cmp	r3, #0
 8100fee:	d001      	beq.n	8100ff4 <MX_UART8_Init+0x58>
  {
    Error_Handler();
 8100ff0:	f000 f9d9 	bl	81013a6 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart8, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8100ff4:	2100      	movs	r1, #0
 8100ff6:	480d      	ldr	r0, [pc, #52]	; (810102c <MX_UART8_Init+0x90>)
 8100ff8:	f00f fd28 	bl	8110a4c <HAL_UARTEx_SetTxFifoThreshold>
 8100ffc:	4603      	mov	r3, r0
 8100ffe:	2b00      	cmp	r3, #0
 8101000:	d001      	beq.n	8101006 <MX_UART8_Init+0x6a>
  {
    Error_Handler();
 8101002:	f000 f9d0 	bl	81013a6 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart8, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8101006:	2100      	movs	r1, #0
 8101008:	4808      	ldr	r0, [pc, #32]	; (810102c <MX_UART8_Init+0x90>)
 810100a:	f00f fd5d 	bl	8110ac8 <HAL_UARTEx_SetRxFifoThreshold>
 810100e:	4603      	mov	r3, r0
 8101010:	2b00      	cmp	r3, #0
 8101012:	d001      	beq.n	8101018 <MX_UART8_Init+0x7c>
  {
    Error_Handler();
 8101014:	f000 f9c7 	bl	81013a6 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart8) != HAL_OK)
 8101018:	4804      	ldr	r0, [pc, #16]	; (810102c <MX_UART8_Init+0x90>)
 810101a:	f00f fcde 	bl	81109da <HAL_UARTEx_DisableFifoMode>
 810101e:	4603      	mov	r3, r0
 8101020:	2b00      	cmp	r3, #0
 8101022:	d001      	beq.n	8101028 <MX_UART8_Init+0x8c>
  {
    Error_Handler();
 8101024:	f000 f9bf 	bl	81013a6 <Error_Handler>
  }
  /* USER CODE BEGIN UART8_Init 2 */

  /* USER CODE END UART8_Init 2 */

}
 8101028:	bf00      	nop
 810102a:	bd80      	pop	{r7, pc}
 810102c:	1000071c 	.word	0x1000071c
 8101030:	40007c00 	.word	0x40007c00

08101034 <MX_USB_OTG_HS_PCD_Init>:
  * @brief USB_OTG_HS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_HS_PCD_Init(void)
{
 8101034:	b580      	push	{r7, lr}
 8101036:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_HS_Init 0 */

  /* USER CODE BEGIN USB_OTG_HS_Init 1 */

  /* USER CODE END USB_OTG_HS_Init 1 */
  hpcd_USB_OTG_HS.Instance = USB_OTG_HS;
 8101038:	4b15      	ldr	r3, [pc, #84]	; (8101090 <MX_USB_OTG_HS_PCD_Init+0x5c>)
 810103a:	4a16      	ldr	r2, [pc, #88]	; (8101094 <MX_USB_OTG_HS_PCD_Init+0x60>)
 810103c:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_HS.Init.dev_endpoints = 9;
 810103e:	4b14      	ldr	r3, [pc, #80]	; (8101090 <MX_USB_OTG_HS_PCD_Init+0x5c>)
 8101040:	2209      	movs	r2, #9
 8101042:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_HS.Init.speed = PCD_SPEED_HIGH;
 8101044:	4b12      	ldr	r3, [pc, #72]	; (8101090 <MX_USB_OTG_HS_PCD_Init+0x5c>)
 8101046:	2200      	movs	r2, #0
 8101048:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_HS.Init.dma_enable = DISABLE;
 810104a:	4b11      	ldr	r3, [pc, #68]	; (8101090 <MX_USB_OTG_HS_PCD_Init+0x5c>)
 810104c:	2200      	movs	r2, #0
 810104e:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_HS.Init.phy_itface = USB_OTG_ULPI_PHY;
 8101050:	4b0f      	ldr	r3, [pc, #60]	; (8101090 <MX_USB_OTG_HS_PCD_Init+0x5c>)
 8101052:	2201      	movs	r2, #1
 8101054:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_HS.Init.Sof_enable = DISABLE;
 8101056:	4b0e      	ldr	r3, [pc, #56]	; (8101090 <MX_USB_OTG_HS_PCD_Init+0x5c>)
 8101058:	2200      	movs	r2, #0
 810105a:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_HS.Init.low_power_enable = DISABLE;
 810105c:	4b0c      	ldr	r3, [pc, #48]	; (8101090 <MX_USB_OTG_HS_PCD_Init+0x5c>)
 810105e:	2200      	movs	r2, #0
 8101060:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_HS.Init.lpm_enable = DISABLE;
 8101062:	4b0b      	ldr	r3, [pc, #44]	; (8101090 <MX_USB_OTG_HS_PCD_Init+0x5c>)
 8101064:	2200      	movs	r2, #0
 8101066:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_HS.Init.vbus_sensing_enable = DISABLE;
 8101068:	4b09      	ldr	r3, [pc, #36]	; (8101090 <MX_USB_OTG_HS_PCD_Init+0x5c>)
 810106a:	2200      	movs	r2, #0
 810106c:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_HS.Init.use_dedicated_ep1 = DISABLE;
 810106e:	4b08      	ldr	r3, [pc, #32]	; (8101090 <MX_USB_OTG_HS_PCD_Init+0x5c>)
 8101070:	2200      	movs	r2, #0
 8101072:	631a      	str	r2, [r3, #48]	; 0x30
  hpcd_USB_OTG_HS.Init.use_external_vbus = DISABLE;
 8101074:	4b06      	ldr	r3, [pc, #24]	; (8101090 <MX_USB_OTG_HS_PCD_Init+0x5c>)
 8101076:	2200      	movs	r2, #0
 8101078:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_PCD_Init(&hpcd_USB_OTG_HS) != HAL_OK)
 810107a:	4805      	ldr	r0, [pc, #20]	; (8101090 <MX_USB_OTG_HS_PCD_Init+0x5c>)
 810107c:	f008 fc2e 	bl	81098dc <HAL_PCD_Init>
 8101080:	4603      	mov	r3, r0
 8101082:	2b00      	cmp	r3, #0
 8101084:	d001      	beq.n	810108a <MX_USB_OTG_HS_PCD_Init+0x56>
  {
    Error_Handler();
 8101086:	f000 f98e 	bl	81013a6 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_HS_Init 2 */

  /* USER CODE END USB_OTG_HS_Init 2 */

}
 810108a:	bf00      	nop
 810108c:	bd80      	pop	{r7, pc}
 810108e:	bf00      	nop
 8101090:	100007b0 	.word	0x100007b0
 8101094:	40040000 	.word	0x40040000

08101098 <MX_FMC_Init>:

/* FMC initialization function */
void MX_FMC_Init(void)
{
 8101098:	b580      	push	{r7, lr}
 810109a:	b088      	sub	sp, #32
 810109c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN FMC_Init 0 */

  /* USER CODE END FMC_Init 0 */

  FMC_SDRAM_TimingTypeDef SdramTiming = {0};
 810109e:	1d3b      	adds	r3, r7, #4
 81010a0:	2200      	movs	r2, #0
 81010a2:	601a      	str	r2, [r3, #0]
 81010a4:	605a      	str	r2, [r3, #4]
 81010a6:	609a      	str	r2, [r3, #8]
 81010a8:	60da      	str	r2, [r3, #12]
 81010aa:	611a      	str	r2, [r3, #16]
 81010ac:	615a      	str	r2, [r3, #20]
 81010ae:	619a      	str	r2, [r3, #24]

  /* USER CODE END FMC_Init 1 */

  /** Perform the SDRAM1 memory initialization sequence
  */
  hsdram1.Instance = FMC_SDRAM_DEVICE;
 81010b0:	4b1e      	ldr	r3, [pc, #120]	; (810112c <MX_FMC_Init+0x94>)
 81010b2:	4a1f      	ldr	r2, [pc, #124]	; (8101130 <MX_FMC_Init+0x98>)
 81010b4:	601a      	str	r2, [r3, #0]
  /* hsdram1.Init */
  hsdram1.Init.SDBank = FMC_SDRAM_BANK2;
 81010b6:	4b1d      	ldr	r3, [pc, #116]	; (810112c <MX_FMC_Init+0x94>)
 81010b8:	2201      	movs	r2, #1
 81010ba:	605a      	str	r2, [r3, #4]
  hsdram1.Init.ColumnBitsNumber = FMC_SDRAM_COLUMN_BITS_NUM_8;
 81010bc:	4b1b      	ldr	r3, [pc, #108]	; (810112c <MX_FMC_Init+0x94>)
 81010be:	2200      	movs	r2, #0
 81010c0:	609a      	str	r2, [r3, #8]
  hsdram1.Init.RowBitsNumber = FMC_SDRAM_ROW_BITS_NUM_13;
 81010c2:	4b1a      	ldr	r3, [pc, #104]	; (810112c <MX_FMC_Init+0x94>)
 81010c4:	2208      	movs	r2, #8
 81010c6:	60da      	str	r2, [r3, #12]
  hsdram1.Init.MemoryDataWidth = FMC_SDRAM_MEM_BUS_WIDTH_32;
 81010c8:	4b18      	ldr	r3, [pc, #96]	; (810112c <MX_FMC_Init+0x94>)
 81010ca:	2220      	movs	r2, #32
 81010cc:	611a      	str	r2, [r3, #16]
  hsdram1.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_2;
 81010ce:	4b17      	ldr	r3, [pc, #92]	; (810112c <MX_FMC_Init+0x94>)
 81010d0:	2200      	movs	r2, #0
 81010d2:	615a      	str	r2, [r3, #20]
  hsdram1.Init.CASLatency = FMC_SDRAM_CAS_LATENCY_1;
 81010d4:	4b15      	ldr	r3, [pc, #84]	; (810112c <MX_FMC_Init+0x94>)
 81010d6:	2280      	movs	r2, #128	; 0x80
 81010d8:	619a      	str	r2, [r3, #24]
  hsdram1.Init.WriteProtection = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 81010da:	4b14      	ldr	r3, [pc, #80]	; (810112c <MX_FMC_Init+0x94>)
 81010dc:	2200      	movs	r2, #0
 81010de:	61da      	str	r2, [r3, #28]
  hsdram1.Init.SDClockPeriod = FMC_SDRAM_CLOCK_DISABLE;
 81010e0:	4b12      	ldr	r3, [pc, #72]	; (810112c <MX_FMC_Init+0x94>)
 81010e2:	2200      	movs	r2, #0
 81010e4:	621a      	str	r2, [r3, #32]
  hsdram1.Init.ReadBurst = FMC_SDRAM_RBURST_DISABLE;
 81010e6:	4b11      	ldr	r3, [pc, #68]	; (810112c <MX_FMC_Init+0x94>)
 81010e8:	2200      	movs	r2, #0
 81010ea:	625a      	str	r2, [r3, #36]	; 0x24
  hsdram1.Init.ReadPipeDelay = FMC_SDRAM_RPIPE_DELAY_0;
 81010ec:	4b0f      	ldr	r3, [pc, #60]	; (810112c <MX_FMC_Init+0x94>)
 81010ee:	2200      	movs	r2, #0
 81010f0:	629a      	str	r2, [r3, #40]	; 0x28
  /* SdramTiming */
  SdramTiming.LoadToActiveDelay = 16;
 81010f2:	2310      	movs	r3, #16
 81010f4:	607b      	str	r3, [r7, #4]
  SdramTiming.ExitSelfRefreshDelay = 16;
 81010f6:	2310      	movs	r3, #16
 81010f8:	60bb      	str	r3, [r7, #8]
  SdramTiming.SelfRefreshTime = 16;
 81010fa:	2310      	movs	r3, #16
 81010fc:	60fb      	str	r3, [r7, #12]
  SdramTiming.RowCycleDelay = 16;
 81010fe:	2310      	movs	r3, #16
 8101100:	613b      	str	r3, [r7, #16]
  SdramTiming.WriteRecoveryTime = 16;
 8101102:	2310      	movs	r3, #16
 8101104:	617b      	str	r3, [r7, #20]
  SdramTiming.RPDelay = 16;
 8101106:	2310      	movs	r3, #16
 8101108:	61bb      	str	r3, [r7, #24]
  SdramTiming.RCDDelay = 16;
 810110a:	2310      	movs	r3, #16
 810110c:	61fb      	str	r3, [r7, #28]

  if (HAL_SDRAM_Init(&hsdram1, &SdramTiming) != HAL_OK)
 810110e:	1d3b      	adds	r3, r7, #4
 8101110:	4619      	mov	r1, r3
 8101112:	4806      	ldr	r0, [pc, #24]	; (810112c <MX_FMC_Init+0x94>)
 8101114:	f00d fadc 	bl	810e6d0 <HAL_SDRAM_Init>
 8101118:	4603      	mov	r3, r0
 810111a:	2b00      	cmp	r3, #0
 810111c:	d001      	beq.n	8101122 <MX_FMC_Init+0x8a>
  {
    Error_Handler( );
 810111e:	f000 f942 	bl	81013a6 <Error_Handler>
  }

  /* USER CODE BEGIN FMC_Init 2 */

  /* USER CODE END FMC_Init 2 */
}
 8101122:	bf00      	nop
 8101124:	3720      	adds	r7, #32
 8101126:	46bd      	mov	sp, r7
 8101128:	bd80      	pop	{r7, pc}
 810112a:	bf00      	nop
 810112c:	10000cbc 	.word	0x10000cbc
 8101130:	52004140 	.word	0x52004140

08101134 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8101134:	b480      	push	{r7}
 8101136:	b08d      	sub	sp, #52	; 0x34
 8101138:	af00      	add	r7, sp, #0
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOI_CLK_ENABLE();
 810113a:	4b55      	ldr	r3, [pc, #340]	; (8101290 <MX_GPIO_Init+0x15c>)
 810113c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8101140:	4a53      	ldr	r2, [pc, #332]	; (8101290 <MX_GPIO_Init+0x15c>)
 8101142:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8101146:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 810114a:	4b51      	ldr	r3, [pc, #324]	; (8101290 <MX_GPIO_Init+0x15c>)
 810114c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8101150:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8101154:	62fb      	str	r3, [r7, #44]	; 0x2c
 8101156:	6afb      	ldr	r3, [r7, #44]	; 0x2c
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8101158:	4b4d      	ldr	r3, [pc, #308]	; (8101290 <MX_GPIO_Init+0x15c>)
 810115a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 810115e:	4a4c      	ldr	r2, [pc, #304]	; (8101290 <MX_GPIO_Init+0x15c>)
 8101160:	f043 0302 	orr.w	r3, r3, #2
 8101164:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8101168:	4b49      	ldr	r3, [pc, #292]	; (8101290 <MX_GPIO_Init+0x15c>)
 810116a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 810116e:	f003 0302 	and.w	r3, r3, #2
 8101172:	62bb      	str	r3, [r7, #40]	; 0x28
 8101174:	6abb      	ldr	r3, [r7, #40]	; 0x28
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8101176:	4b46      	ldr	r3, [pc, #280]	; (8101290 <MX_GPIO_Init+0x15c>)
 8101178:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 810117c:	4a44      	ldr	r2, [pc, #272]	; (8101290 <MX_GPIO_Init+0x15c>)
 810117e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8101182:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8101186:	4b42      	ldr	r3, [pc, #264]	; (8101290 <MX_GPIO_Init+0x15c>)
 8101188:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 810118c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8101190:	627b      	str	r3, [r7, #36]	; 0x24
 8101192:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8101194:	4b3e      	ldr	r3, [pc, #248]	; (8101290 <MX_GPIO_Init+0x15c>)
 8101196:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 810119a:	4a3d      	ldr	r2, [pc, #244]	; (8101290 <MX_GPIO_Init+0x15c>)
 810119c:	f043 0304 	orr.w	r3, r3, #4
 81011a0:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 81011a4:	4b3a      	ldr	r3, [pc, #232]	; (8101290 <MX_GPIO_Init+0x15c>)
 81011a6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 81011aa:	f003 0304 	and.w	r3, r3, #4
 81011ae:	623b      	str	r3, [r7, #32]
 81011b0:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 81011b2:	4b37      	ldr	r3, [pc, #220]	; (8101290 <MX_GPIO_Init+0x15c>)
 81011b4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 81011b8:	4a35      	ldr	r2, [pc, #212]	; (8101290 <MX_GPIO_Init+0x15c>)
 81011ba:	f043 0310 	orr.w	r3, r3, #16
 81011be:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 81011c2:	4b33      	ldr	r3, [pc, #204]	; (8101290 <MX_GPIO_Init+0x15c>)
 81011c4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 81011c8:	f003 0310 	and.w	r3, r3, #16
 81011cc:	61fb      	str	r3, [r7, #28]
 81011ce:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 81011d0:	4b2f      	ldr	r3, [pc, #188]	; (8101290 <MX_GPIO_Init+0x15c>)
 81011d2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 81011d6:	4a2e      	ldr	r2, [pc, #184]	; (8101290 <MX_GPIO_Init+0x15c>)
 81011d8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 81011dc:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 81011e0:	4b2b      	ldr	r3, [pc, #172]	; (8101290 <MX_GPIO_Init+0x15c>)
 81011e2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 81011e6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 81011ea:	61bb      	str	r3, [r7, #24]
 81011ec:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 81011ee:	4b28      	ldr	r3, [pc, #160]	; (8101290 <MX_GPIO_Init+0x15c>)
 81011f0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 81011f4:	4a26      	ldr	r2, [pc, #152]	; (8101290 <MX_GPIO_Init+0x15c>)
 81011f6:	f043 0308 	orr.w	r3, r3, #8
 81011fa:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 81011fe:	4b24      	ldr	r3, [pc, #144]	; (8101290 <MX_GPIO_Init+0x15c>)
 8101200:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8101204:	f003 0308 	and.w	r3, r3, #8
 8101208:	617b      	str	r3, [r7, #20]
 810120a:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 810120c:	4b20      	ldr	r3, [pc, #128]	; (8101290 <MX_GPIO_Init+0x15c>)
 810120e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8101212:	4a1f      	ldr	r2, [pc, #124]	; (8101290 <MX_GPIO_Init+0x15c>)
 8101214:	f043 0301 	orr.w	r3, r3, #1
 8101218:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 810121c:	4b1c      	ldr	r3, [pc, #112]	; (8101290 <MX_GPIO_Init+0x15c>)
 810121e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8101222:	f003 0301 	and.w	r3, r3, #1
 8101226:	613b      	str	r3, [r7, #16]
 8101228:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 810122a:	4b19      	ldr	r3, [pc, #100]	; (8101290 <MX_GPIO_Init+0x15c>)
 810122c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8101230:	4a17      	ldr	r2, [pc, #92]	; (8101290 <MX_GPIO_Init+0x15c>)
 8101232:	f043 0320 	orr.w	r3, r3, #32
 8101236:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 810123a:	4b15      	ldr	r3, [pc, #84]	; (8101290 <MX_GPIO_Init+0x15c>)
 810123c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8101240:	f003 0320 	and.w	r3, r3, #32
 8101244:	60fb      	str	r3, [r7, #12]
 8101246:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOK_CLK_ENABLE();
 8101248:	4b11      	ldr	r3, [pc, #68]	; (8101290 <MX_GPIO_Init+0x15c>)
 810124a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 810124e:	4a10      	ldr	r2, [pc, #64]	; (8101290 <MX_GPIO_Init+0x15c>)
 8101250:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8101254:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8101258:	4b0d      	ldr	r3, [pc, #52]	; (8101290 <MX_GPIO_Init+0x15c>)
 810125a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 810125e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8101262:	60bb      	str	r3, [r7, #8]
 8101264:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOJ_CLK_ENABLE();
 8101266:	4b0a      	ldr	r3, [pc, #40]	; (8101290 <MX_GPIO_Init+0x15c>)
 8101268:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 810126c:	4a08      	ldr	r2, [pc, #32]	; (8101290 <MX_GPIO_Init+0x15c>)
 810126e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8101272:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8101276:	4b06      	ldr	r3, [pc, #24]	; (8101290 <MX_GPIO_Init+0x15c>)
 8101278:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 810127c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8101280:	607b      	str	r3, [r7, #4]
 8101282:	687b      	ldr	r3, [r7, #4]

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8101284:	bf00      	nop
 8101286:	3734      	adds	r7, #52	; 0x34
 8101288:	46bd      	mov	sp, r7
 810128a:	f85d 7b04 	ldr.w	r7, [sp], #4
 810128e:	4770      	bx	lr
 8101290:	58024400 	.word	0x58024400

08101294 <echo_serial_port>:
/* USER CODE BEGIN 4 */

// echo to either Serial0 or Serial1
// with Serial0 as all lower case, Serial1 as all upper case
static void echo_serial_port(uint8_t itf, uint8_t buf[], uint32_t count)
{
 8101294:	b580      	push	{r7, lr}
 8101296:	b086      	sub	sp, #24
 8101298:	af00      	add	r7, sp, #0
 810129a:	4603      	mov	r3, r0
 810129c:	60b9      	str	r1, [r7, #8]
 810129e:	607a      	str	r2, [r7, #4]
 81012a0:	73fb      	strb	r3, [r7, #15]
  uint8_t const case_diff = 'a' - 'A';
 81012a2:	2320      	movs	r3, #32
 81012a4:	74fb      	strb	r3, [r7, #19]

  for(uint32_t i=0; i<count; i++)
 81012a6:	2300      	movs	r3, #0
 81012a8:	617b      	str	r3, [r7, #20]
 81012aa:	e03d      	b.n	8101328 <echo_serial_port+0x94>
  {
    if (itf == 0)
 81012ac:	7bfb      	ldrb	r3, [r7, #15]
 81012ae:	2b00      	cmp	r3, #0
 81012b0:	d117      	bne.n	81012e2 <echo_serial_port+0x4e>
    {
      // echo back 1st port as lower case
      if (isupper(buf[i])) buf[i] += case_diff;
 81012b2:	68ba      	ldr	r2, [r7, #8]
 81012b4:	697b      	ldr	r3, [r7, #20]
 81012b6:	4413      	add	r3, r2
 81012b8:	781b      	ldrb	r3, [r3, #0]
 81012ba:	3301      	adds	r3, #1
 81012bc:	4a20      	ldr	r2, [pc, #128]	; (8101340 <echo_serial_port+0xac>)
 81012be:	4413      	add	r3, r2
 81012c0:	781b      	ldrb	r3, [r3, #0]
 81012c2:	f003 0303 	and.w	r3, r3, #3
 81012c6:	2b01      	cmp	r3, #1
 81012c8:	d122      	bne.n	8101310 <echo_serial_port+0x7c>
 81012ca:	68ba      	ldr	r2, [r7, #8]
 81012cc:	697b      	ldr	r3, [r7, #20]
 81012ce:	4413      	add	r3, r2
 81012d0:	7819      	ldrb	r1, [r3, #0]
 81012d2:	68ba      	ldr	r2, [r7, #8]
 81012d4:	697b      	ldr	r3, [r7, #20]
 81012d6:	4413      	add	r3, r2
 81012d8:	7cfa      	ldrb	r2, [r7, #19]
 81012da:	440a      	add	r2, r1
 81012dc:	b2d2      	uxtb	r2, r2
 81012de:	701a      	strb	r2, [r3, #0]
 81012e0:	e016      	b.n	8101310 <echo_serial_port+0x7c>
    }
    else
    {
      // echo back 2nd port as upper case
      if (islower(buf[i])) buf[i] -= case_diff;
 81012e2:	68ba      	ldr	r2, [r7, #8]
 81012e4:	697b      	ldr	r3, [r7, #20]
 81012e6:	4413      	add	r3, r2
 81012e8:	781b      	ldrb	r3, [r3, #0]
 81012ea:	3301      	adds	r3, #1
 81012ec:	4a14      	ldr	r2, [pc, #80]	; (8101340 <echo_serial_port+0xac>)
 81012ee:	4413      	add	r3, r2
 81012f0:	781b      	ldrb	r3, [r3, #0]
 81012f2:	f003 0303 	and.w	r3, r3, #3
 81012f6:	2b02      	cmp	r3, #2
 81012f8:	d10a      	bne.n	8101310 <echo_serial_port+0x7c>
 81012fa:	68ba      	ldr	r2, [r7, #8]
 81012fc:	697b      	ldr	r3, [r7, #20]
 81012fe:	4413      	add	r3, r2
 8101300:	7819      	ldrb	r1, [r3, #0]
 8101302:	68ba      	ldr	r2, [r7, #8]
 8101304:	697b      	ldr	r3, [r7, #20]
 8101306:	4413      	add	r3, r2
 8101308:	7cfa      	ldrb	r2, [r7, #19]
 810130a:	1a8a      	subs	r2, r1, r2
 810130c:	b2d2      	uxtb	r2, r2
 810130e:	701a      	strb	r2, [r3, #0]
    }

    tud_cdc_n_write_char(itf, buf[i]);
 8101310:	68ba      	ldr	r2, [r7, #8]
 8101312:	697b      	ldr	r3, [r7, #20]
 8101314:	4413      	add	r3, r2
 8101316:	781a      	ldrb	r2, [r3, #0]
 8101318:	7bfb      	ldrb	r3, [r7, #15]
 810131a:	4611      	mov	r1, r2
 810131c:	4618      	mov	r0, r3
 810131e:	f7ff f979 	bl	8100614 <tud_cdc_n_write_char>
  for(uint32_t i=0; i<count; i++)
 8101322:	697b      	ldr	r3, [r7, #20]
 8101324:	3301      	adds	r3, #1
 8101326:	617b      	str	r3, [r7, #20]
 8101328:	697a      	ldr	r2, [r7, #20]
 810132a:	687b      	ldr	r3, [r7, #4]
 810132c:	429a      	cmp	r2, r3
 810132e:	d3bd      	bcc.n	81012ac <echo_serial_port+0x18>
  }
  tud_cdc_n_write_flush(itf);
 8101330:	7bfb      	ldrb	r3, [r7, #15]
 8101332:	4618      	mov	r0, r3
 8101334:	f001 faec 	bl	8102910 <tud_cdc_n_write_flush>
}
 8101338:	bf00      	nop
 810133a:	3718      	adds	r7, #24
 810133c:	46bd      	mov	sp, r7
 810133e:	bd80      	pop	{r7, pc}
 8101340:	08111f24 	.word	0x08111f24

08101344 <cdc_task>:

//--------------------------------------------------------------------+
// USB CDC
//--------------------------------------------------------------------+
static void cdc_task(void)
{
 8101344:	b580      	push	{r7, lr}
 8101346:	b092      	sub	sp, #72	; 0x48
 8101348:	af00      	add	r7, sp, #0
  uint8_t itf;

  for (itf = 0; itf < CFG_TUD_CDC; itf++)
 810134a:	2300      	movs	r3, #0
 810134c:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 8101350:	e020      	b.n	8101394 <cdc_task+0x50>
  {
    // connected() check for DTR bit
    // Most but not all terminal client set this when making connection
    // if ( tud_cdc_n_connected(itf) )
    {
      if ( tud_cdc_n_available(itf) )
 8101352:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8101356:	4618      	mov	r0, r3
 8101358:	f001 fa60 	bl	810281c <tud_cdc_n_available>
 810135c:	4603      	mov	r3, r0
 810135e:	2b00      	cmp	r3, #0
 8101360:	d013      	beq.n	810138a <cdc_task+0x46>
      {
        uint8_t buf[64];

        uint32_t count = tud_cdc_n_read(itf, buf, sizeof(buf));
 8101362:	4639      	mov	r1, r7
 8101364:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8101368:	2240      	movs	r2, #64	; 0x40
 810136a:	4618      	mov	r0, r3
 810136c:	f001 fa6e 	bl	810284c <tud_cdc_n_read>
 8101370:	6438      	str	r0, [r7, #64]	; 0x40

        // echo back to both serial ports
        echo_serial_port(0, buf, count);
 8101372:	463b      	mov	r3, r7
 8101374:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8101376:	4619      	mov	r1, r3
 8101378:	2000      	movs	r0, #0
 810137a:	f7ff ff8b 	bl	8101294 <echo_serial_port>
        echo_serial_port(1, buf, count);
 810137e:	463b      	mov	r3, r7
 8101380:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8101382:	4619      	mov	r1, r3
 8101384:	2001      	movs	r0, #1
 8101386:	f7ff ff85 	bl	8101294 <echo_serial_port>
  for (itf = 0; itf < CFG_TUD_CDC; itf++)
 810138a:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 810138e:	3301      	adds	r3, #1
 8101390:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 8101394:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8101398:	2b01      	cmp	r3, #1
 810139a:	d9da      	bls.n	8101352 <cdc_task+0xe>
      }
    }
  }
}
 810139c:	bf00      	nop
 810139e:	bf00      	nop
 81013a0:	3748      	adds	r7, #72	; 0x48
 81013a2:	46bd      	mov	sp, r7
 81013a4:	bd80      	pop	{r7, pc}

081013a6 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 81013a6:	b480      	push	{r7}
 81013a8:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 81013aa:	b672      	cpsid	i
}
 81013ac:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 81013ae:	e7fe      	b.n	81013ae <Error_Handler+0x8>

081013b0 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 81013b0:	b480      	push	{r7}
 81013b2:	b083      	sub	sp, #12
 81013b4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 81013b6:	4b0a      	ldr	r3, [pc, #40]	; (81013e0 <HAL_MspInit+0x30>)
 81013b8:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 81013bc:	4a08      	ldr	r2, [pc, #32]	; (81013e0 <HAL_MspInit+0x30>)
 81013be:	f043 0302 	orr.w	r3, r3, #2
 81013c2:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 81013c6:	4b06      	ldr	r3, [pc, #24]	; (81013e0 <HAL_MspInit+0x30>)
 81013c8:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 81013cc:	f003 0302 	and.w	r3, r3, #2
 81013d0:	607b      	str	r3, [r7, #4]
 81013d2:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 81013d4:	bf00      	nop
 81013d6:	370c      	adds	r7, #12
 81013d8:	46bd      	mov	sp, r7
 81013da:	f85d 7b04 	ldr.w	r7, [sp], #4
 81013de:	4770      	bx	lr
 81013e0:	58024400 	.word	0x58024400

081013e4 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 81013e4:	b580      	push	{r7, lr}
 81013e6:	b08c      	sub	sp, #48	; 0x30
 81013e8:	af00      	add	r7, sp, #0
 81013ea:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 81013ec:	f107 031c 	add.w	r3, r7, #28
 81013f0:	2200      	movs	r2, #0
 81013f2:	601a      	str	r2, [r3, #0]
 81013f4:	605a      	str	r2, [r3, #4]
 81013f6:	609a      	str	r2, [r3, #8]
 81013f8:	60da      	str	r2, [r3, #12]
 81013fa:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 81013fc:	687b      	ldr	r3, [r7, #4]
 81013fe:	681b      	ldr	r3, [r3, #0]
 8101400:	4a3e      	ldr	r2, [pc, #248]	; (81014fc <HAL_ADC_MspInit+0x118>)
 8101402:	4293      	cmp	r3, r2
 8101404:	d12a      	bne.n	810145c <HAL_ADC_MspInit+0x78>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 8101406:	4b3e      	ldr	r3, [pc, #248]	; (8101500 <HAL_ADC_MspInit+0x11c>)
 8101408:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 810140c:	4a3c      	ldr	r2, [pc, #240]	; (8101500 <HAL_ADC_MspInit+0x11c>)
 810140e:	f043 0320 	orr.w	r3, r3, #32
 8101412:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8101416:	4b3a      	ldr	r3, [pc, #232]	; (8101500 <HAL_ADC_MspInit+0x11c>)
 8101418:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 810141c:	f003 0320 	and.w	r3, r3, #32
 8101420:	61bb      	str	r3, [r7, #24]
 8101422:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8101424:	4b36      	ldr	r3, [pc, #216]	; (8101500 <HAL_ADC_MspInit+0x11c>)
 8101426:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 810142a:	4a35      	ldr	r2, [pc, #212]	; (8101500 <HAL_ADC_MspInit+0x11c>)
 810142c:	f043 0301 	orr.w	r3, r3, #1
 8101430:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8101434:	4b32      	ldr	r3, [pc, #200]	; (8101500 <HAL_ADC_MspInit+0x11c>)
 8101436:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 810143a:	f003 0301 	and.w	r3, r3, #1
 810143e:	617b      	str	r3, [r7, #20]
 8101440:	697b      	ldr	r3, [r7, #20]
    /**ADC1 GPIO Configuration
    PA0_C     ------> ADC1_INP0
    PA1_C     ------> ADC1_INP1
    */
    HAL_SYSCFG_AnalogSwitchConfig(SYSCFG_SWITCH_PA0, SYSCFG_SWITCH_PA0_OPEN);
 8101442:	f04f 7180 	mov.w	r1, #16777216	; 0x1000000
 8101446:	f04f 7080 	mov.w	r0, #16777216	; 0x1000000
 810144a:	f006 f937 	bl	81076bc <HAL_SYSCFG_AnalogSwitchConfig>

    HAL_SYSCFG_AnalogSwitchConfig(SYSCFG_SWITCH_PA1, SYSCFG_SWITCH_PA1_OPEN);
 810144e:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8101452:	f04f 7000 	mov.w	r0, #33554432	; 0x2000000
 8101456:	f006 f931 	bl	81076bc <HAL_SYSCFG_AnalogSwitchConfig>
  /* USER CODE BEGIN ADC3_MspInit 1 */

  /* USER CODE END ADC3_MspInit 1 */
  }

}
 810145a:	e04a      	b.n	81014f2 <HAL_ADC_MspInit+0x10e>
  else if(hadc->Instance==ADC3)
 810145c:	687b      	ldr	r3, [r7, #4]
 810145e:	681b      	ldr	r3, [r3, #0]
 8101460:	4a28      	ldr	r2, [pc, #160]	; (8101504 <HAL_ADC_MspInit+0x120>)
 8101462:	4293      	cmp	r3, r2
 8101464:	d145      	bne.n	81014f2 <HAL_ADC_MspInit+0x10e>
    __HAL_RCC_ADC3_CLK_ENABLE();
 8101466:	4b26      	ldr	r3, [pc, #152]	; (8101500 <HAL_ADC_MspInit+0x11c>)
 8101468:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 810146c:	4a24      	ldr	r2, [pc, #144]	; (8101500 <HAL_ADC_MspInit+0x11c>)
 810146e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8101472:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8101476:	4b22      	ldr	r3, [pc, #136]	; (8101500 <HAL_ADC_MspInit+0x11c>)
 8101478:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 810147c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8101480:	613b      	str	r3, [r7, #16]
 8101482:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8101484:	4b1e      	ldr	r3, [pc, #120]	; (8101500 <HAL_ADC_MspInit+0x11c>)
 8101486:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 810148a:	4a1d      	ldr	r2, [pc, #116]	; (8101500 <HAL_ADC_MspInit+0x11c>)
 810148c:	f043 0320 	orr.w	r3, r3, #32
 8101490:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8101494:	4b1a      	ldr	r3, [pc, #104]	; (8101500 <HAL_ADC_MspInit+0x11c>)
 8101496:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 810149a:	f003 0320 	and.w	r3, r3, #32
 810149e:	60fb      	str	r3, [r7, #12]
 81014a0:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 81014a2:	4b17      	ldr	r3, [pc, #92]	; (8101500 <HAL_ADC_MspInit+0x11c>)
 81014a4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 81014a8:	4a15      	ldr	r2, [pc, #84]	; (8101500 <HAL_ADC_MspInit+0x11c>)
 81014aa:	f043 0304 	orr.w	r3, r3, #4
 81014ae:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 81014b2:	4b13      	ldr	r3, [pc, #76]	; (8101500 <HAL_ADC_MspInit+0x11c>)
 81014b4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 81014b8:	f003 0304 	and.w	r3, r3, #4
 81014bc:	60bb      	str	r3, [r7, #8]
 81014be:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = ARD_A1_Pin;
 81014c0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 81014c4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 81014c6:	2303      	movs	r3, #3
 81014c8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 81014ca:	2300      	movs	r3, #0
 81014cc:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(ARD_A1_GPIO_Port, &GPIO_InitStruct);
 81014ce:	f107 031c 	add.w	r3, r7, #28
 81014d2:	4619      	mov	r1, r3
 81014d4:	480c      	ldr	r0, [pc, #48]	; (8101508 <HAL_ADC_MspInit+0x124>)
 81014d6:	f008 f83f 	bl	8109558 <HAL_GPIO_Init>
    HAL_SYSCFG_AnalogSwitchConfig(SYSCFG_SWITCH_PC2, SYSCFG_SWITCH_PC2_OPEN);
 81014da:	f04f 6180 	mov.w	r1, #67108864	; 0x4000000
 81014de:	f04f 6080 	mov.w	r0, #67108864	; 0x4000000
 81014e2:	f006 f8eb 	bl	81076bc <HAL_SYSCFG_AnalogSwitchConfig>
    HAL_SYSCFG_AnalogSwitchConfig(SYSCFG_SWITCH_PC3, SYSCFG_SWITCH_PC3_OPEN);
 81014e6:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
 81014ea:	f04f 6000 	mov.w	r0, #134217728	; 0x8000000
 81014ee:	f006 f8e5 	bl	81076bc <HAL_SYSCFG_AnalogSwitchConfig>
}
 81014f2:	bf00      	nop
 81014f4:	3730      	adds	r7, #48	; 0x30
 81014f6:	46bd      	mov	sp, r7
 81014f8:	bd80      	pop	{r7, pc}
 81014fa:	bf00      	nop
 81014fc:	40022000 	.word	0x40022000
 8101500:	58024400 	.word	0x58024400
 8101504:	58026000 	.word	0x58026000
 8101508:	58021400 	.word	0x58021400

0810150c <HAL_ETH_MspInit>:
* This function configures the hardware resources used in this example
* @param heth: ETH handle pointer
* @retval None
*/
void HAL_ETH_MspInit(ETH_HandleTypeDef* heth)
{
 810150c:	b580      	push	{r7, lr}
 810150e:	b08e      	sub	sp, #56	; 0x38
 8101510:	af00      	add	r7, sp, #0
 8101512:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8101514:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8101518:	2200      	movs	r2, #0
 810151a:	601a      	str	r2, [r3, #0]
 810151c:	605a      	str	r2, [r3, #4]
 810151e:	609a      	str	r2, [r3, #8]
 8101520:	60da      	str	r2, [r3, #12]
 8101522:	611a      	str	r2, [r3, #16]
  if(heth->Instance==ETH)
 8101524:	687b      	ldr	r3, [r7, #4]
 8101526:	681b      	ldr	r3, [r3, #0]
 8101528:	4a49      	ldr	r2, [pc, #292]	; (8101650 <HAL_ETH_MspInit+0x144>)
 810152a:	4293      	cmp	r3, r2
 810152c:	f040 808b 	bne.w	8101646 <HAL_ETH_MspInit+0x13a>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ETH1MAC_CLK_ENABLE();
 8101530:	4b48      	ldr	r3, [pc, #288]	; (8101654 <HAL_ETH_MspInit+0x148>)
 8101532:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8101536:	4a47      	ldr	r2, [pc, #284]	; (8101654 <HAL_ETH_MspInit+0x148>)
 8101538:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 810153c:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8101540:	4b44      	ldr	r3, [pc, #272]	; (8101654 <HAL_ETH_MspInit+0x148>)
 8101542:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8101546:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 810154a:	623b      	str	r3, [r7, #32]
 810154c:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_ETH1TX_CLK_ENABLE();
 810154e:	4b41      	ldr	r3, [pc, #260]	; (8101654 <HAL_ETH_MspInit+0x148>)
 8101550:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8101554:	4a3f      	ldr	r2, [pc, #252]	; (8101654 <HAL_ETH_MspInit+0x148>)
 8101556:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 810155a:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 810155e:	4b3d      	ldr	r3, [pc, #244]	; (8101654 <HAL_ETH_MspInit+0x148>)
 8101560:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8101564:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8101568:	61fb      	str	r3, [r7, #28]
 810156a:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_ETH1RX_CLK_ENABLE();
 810156c:	4b39      	ldr	r3, [pc, #228]	; (8101654 <HAL_ETH_MspInit+0x148>)
 810156e:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8101572:	4a38      	ldr	r2, [pc, #224]	; (8101654 <HAL_ETH_MspInit+0x148>)
 8101574:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8101578:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 810157c:	4b35      	ldr	r3, [pc, #212]	; (8101654 <HAL_ETH_MspInit+0x148>)
 810157e:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8101582:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8101586:	61bb      	str	r3, [r7, #24]
 8101588:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOG_CLK_ENABLE();
 810158a:	4b32      	ldr	r3, [pc, #200]	; (8101654 <HAL_ETH_MspInit+0x148>)
 810158c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8101590:	4a30      	ldr	r2, [pc, #192]	; (8101654 <HAL_ETH_MspInit+0x148>)
 8101592:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8101596:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 810159a:	4b2e      	ldr	r3, [pc, #184]	; (8101654 <HAL_ETH_MspInit+0x148>)
 810159c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 81015a0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 81015a4:	617b      	str	r3, [r7, #20]
 81015a6:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 81015a8:	4b2a      	ldr	r3, [pc, #168]	; (8101654 <HAL_ETH_MspInit+0x148>)
 81015aa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 81015ae:	4a29      	ldr	r2, [pc, #164]	; (8101654 <HAL_ETH_MspInit+0x148>)
 81015b0:	f043 0304 	orr.w	r3, r3, #4
 81015b4:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 81015b8:	4b26      	ldr	r3, [pc, #152]	; (8101654 <HAL_ETH_MspInit+0x148>)
 81015ba:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 81015be:	f003 0304 	and.w	r3, r3, #4
 81015c2:	613b      	str	r3, [r7, #16]
 81015c4:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 81015c6:	4b23      	ldr	r3, [pc, #140]	; (8101654 <HAL_ETH_MspInit+0x148>)
 81015c8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 81015cc:	4a21      	ldr	r2, [pc, #132]	; (8101654 <HAL_ETH_MspInit+0x148>)
 81015ce:	f043 0301 	orr.w	r3, r3, #1
 81015d2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 81015d6:	4b1f      	ldr	r3, [pc, #124]	; (8101654 <HAL_ETH_MspInit+0x148>)
 81015d8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 81015dc:	f003 0301 	and.w	r3, r3, #1
 81015e0:	60fb      	str	r3, [r7, #12]
 81015e2:	68fb      	ldr	r3, [r7, #12]
    PA1     ------> ETH_REF_CLK
    PA7     ------> ETH_CRS_DV
    PC4     ------> ETH_RXD0
    PC5     ------> ETH_RXD1
    */
    GPIO_InitStruct.Pin = ETH_TX_EN_Pin|ETH_TXD1_Pin|ETH_TXD0_Pin;
 81015e4:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 81015e8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 81015ea:	2302      	movs	r3, #2
 81015ec:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 81015ee:	2300      	movs	r3, #0
 81015f0:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 81015f2:	2300      	movs	r3, #0
 81015f4:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 81015f6:	230b      	movs	r3, #11
 81015f8:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 81015fa:	f107 0324 	add.w	r3, r7, #36	; 0x24
 81015fe:	4619      	mov	r1, r3
 8101600:	4815      	ldr	r0, [pc, #84]	; (8101658 <HAL_ETH_MspInit+0x14c>)
 8101602:	f007 ffa9 	bl	8109558 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = ETH_MDC_SAI4_D1_Pin|ETH_RXD0_Pin|ETH_RXD1_Pin;
 8101606:	2332      	movs	r3, #50	; 0x32
 8101608:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 810160a:	2302      	movs	r3, #2
 810160c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 810160e:	2300      	movs	r3, #0
 8101610:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8101612:	2300      	movs	r3, #0
 8101614:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8101616:	230b      	movs	r3, #11
 8101618:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 810161a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 810161e:	4619      	mov	r1, r3
 8101620:	480e      	ldr	r0, [pc, #56]	; (810165c <HAL_ETH_MspInit+0x150>)
 8101622:	f007 ff99 	bl	8109558 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = ETH_MDIO_Pin|ETH_REF_CLK_Pin|ETH_CRS_DV_Pin;
 8101626:	2386      	movs	r3, #134	; 0x86
 8101628:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 810162a:	2302      	movs	r3, #2
 810162c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 810162e:	2300      	movs	r3, #0
 8101630:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8101632:	2300      	movs	r3, #0
 8101634:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8101636:	230b      	movs	r3, #11
 8101638:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 810163a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 810163e:	4619      	mov	r1, r3
 8101640:	4807      	ldr	r0, [pc, #28]	; (8101660 <HAL_ETH_MspInit+0x154>)
 8101642:	f007 ff89 	bl	8109558 <HAL_GPIO_Init>
  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }

}
 8101646:	bf00      	nop
 8101648:	3738      	adds	r7, #56	; 0x38
 810164a:	46bd      	mov	sp, r7
 810164c:	bd80      	pop	{r7, pc}
 810164e:	bf00      	nop
 8101650:	40028000 	.word	0x40028000
 8101654:	58024400 	.word	0x58024400
 8101658:	58021800 	.word	0x58021800
 810165c:	58020800 	.word	0x58020800
 8101660:	58020000 	.word	0x58020000

08101664 <HAL_CEC_MspInit>:
* This function configures the hardware resources used in this example
* @param hcec: CEC handle pointer
* @retval None
*/
void HAL_CEC_MspInit(CEC_HandleTypeDef* hcec)
{
 8101664:	b580      	push	{r7, lr}
 8101666:	b0bc      	sub	sp, #240	; 0xf0
 8101668:	af00      	add	r7, sp, #0
 810166a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 810166c:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8101670:	2200      	movs	r2, #0
 8101672:	601a      	str	r2, [r3, #0]
 8101674:	605a      	str	r2, [r3, #4]
 8101676:	609a      	str	r2, [r3, #8]
 8101678:	60da      	str	r2, [r3, #12]
 810167a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 810167c:	f107 0310 	add.w	r3, r7, #16
 8101680:	22c8      	movs	r2, #200	; 0xc8
 8101682:	2100      	movs	r1, #0
 8101684:	4618      	mov	r0, r3
 8101686:	f010 fb69 	bl	8111d5c <memset>
  if(hcec->Instance==CEC)
 810168a:	687b      	ldr	r3, [r7, #4]
 810168c:	681b      	ldr	r3, [r3, #0]
 810168e:	4a2b      	ldr	r2, [pc, #172]	; (810173c <HAL_CEC_MspInit+0xd8>)
 8101690:	4293      	cmp	r3, r2
 8101692:	d14e      	bne.n	8101732 <HAL_CEC_MspInit+0xce>

  /* USER CODE END CEC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_CEC;
 8101694:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8101698:	f04f 0300 	mov.w	r3, #0
 810169c:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.CecClockSelection = RCC_CECCLKSOURCE_LSI;
 81016a0:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 81016a4:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 81016a8:	f107 0310 	add.w	r3, r7, #16
 81016ac:	4618      	mov	r0, r3
 81016ae:	f008 fd87 	bl	810a1c0 <HAL_RCCEx_PeriphCLKConfig>
 81016b2:	4603      	mov	r3, r0
 81016b4:	2b00      	cmp	r3, #0
 81016b6:	d001      	beq.n	81016bc <HAL_CEC_MspInit+0x58>
    {
      Error_Handler();
 81016b8:	f7ff fe75 	bl	81013a6 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_CEC_CLK_ENABLE();
 81016bc:	4b20      	ldr	r3, [pc, #128]	; (8101740 <HAL_CEC_MspInit+0xdc>)
 81016be:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 81016c2:	4a1f      	ldr	r2, [pc, #124]	; (8101740 <HAL_CEC_MspInit+0xdc>)
 81016c4:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 81016c8:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 81016cc:	4b1c      	ldr	r3, [pc, #112]	; (8101740 <HAL_CEC_MspInit+0xdc>)
 81016ce:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 81016d2:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 81016d6:	60fb      	str	r3, [r7, #12]
 81016d8:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 81016da:	4b19      	ldr	r3, [pc, #100]	; (8101740 <HAL_CEC_MspInit+0xdc>)
 81016dc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 81016e0:	4a17      	ldr	r2, [pc, #92]	; (8101740 <HAL_CEC_MspInit+0xdc>)
 81016e2:	f043 0302 	orr.w	r3, r3, #2
 81016e6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 81016ea:	4b15      	ldr	r3, [pc, #84]	; (8101740 <HAL_CEC_MspInit+0xdc>)
 81016ec:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 81016f0:	f003 0302 	and.w	r3, r3, #2
 81016f4:	60bb      	str	r3, [r7, #8]
 81016f6:	68bb      	ldr	r3, [r7, #8]
    /**HDMI_CEC GPIO Configuration
    PB6     ------> CEC
    */
    GPIO_InitStruct.Pin = HDMI_CEC_Pin;
 81016f8:	2340      	movs	r3, #64	; 0x40
 81016fa:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 81016fe:	2312      	movs	r3, #18
 8101700:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8101704:	2300      	movs	r3, #0
 8101706:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 810170a:	2300      	movs	r3, #0
 810170c:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF5_CEC;
 8101710:	2305      	movs	r3, #5
 8101712:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(HDMI_CEC_GPIO_Port, &GPIO_InitStruct);
 8101716:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 810171a:	4619      	mov	r1, r3
 810171c:	4809      	ldr	r0, [pc, #36]	; (8101744 <HAL_CEC_MspInit+0xe0>)
 810171e:	f007 ff1b 	bl	8109558 <HAL_GPIO_Init>

    /* CEC interrupt Init */
    HAL_NVIC_SetPriority(CEC_IRQn, 0, 0);
 8101722:	2200      	movs	r2, #0
 8101724:	2100      	movs	r1, #0
 8101726:	205e      	movs	r0, #94	; 0x5e
 8101728:	f007 faa9 	bl	8108c7e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CEC_IRQn);
 810172c:	205e      	movs	r0, #94	; 0x5e
 810172e:	f007 fac0 	bl	8108cb2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CEC_MspInit 1 */

  /* USER CODE END CEC_MspInit 1 */
  }

}
 8101732:	bf00      	nop
 8101734:	37f0      	adds	r7, #240	; 0xf0
 8101736:	46bd      	mov	sp, r7
 8101738:	bd80      	pop	{r7, pc}
 810173a:	bf00      	nop
 810173c:	40006c00 	.word	0x40006c00
 8101740:	58024400 	.word	0x58024400
 8101744:	58020400 	.word	0x58020400

08101748 <HAL_QSPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hqspi: QSPI handle pointer
* @retval None
*/
void HAL_QSPI_MspInit(QSPI_HandleTypeDef* hqspi)
{
 8101748:	b580      	push	{r7, lr}
 810174a:	b0c0      	sub	sp, #256	; 0x100
 810174c:	af00      	add	r7, sp, #0
 810174e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8101750:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8101754:	2200      	movs	r2, #0
 8101756:	601a      	str	r2, [r3, #0]
 8101758:	605a      	str	r2, [r3, #4]
 810175a:	609a      	str	r2, [r3, #8]
 810175c:	60da      	str	r2, [r3, #12]
 810175e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8101760:	f107 0320 	add.w	r3, r7, #32
 8101764:	22c8      	movs	r2, #200	; 0xc8
 8101766:	2100      	movs	r1, #0
 8101768:	4618      	mov	r0, r3
 810176a:	f010 faf7 	bl	8111d5c <memset>
  if(hqspi->Instance==QUADSPI)
 810176e:	687b      	ldr	r3, [r7, #4]
 8101770:	681b      	ldr	r3, [r3, #0]
 8101772:	4a85      	ldr	r2, [pc, #532]	; (8101988 <HAL_QSPI_MspInit+0x240>)
 8101774:	4293      	cmp	r3, r2
 8101776:	f040 8102 	bne.w	810197e <HAL_QSPI_MspInit+0x236>

  /* USER CODE END QUADSPI_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_QSPI;
 810177a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 810177e:	f04f 0300 	mov.w	r3, #0
 8101782:	e9c7 2308 	strd	r2, r3, [r7, #32]
    PeriphClkInitStruct.QspiClockSelection = RCC_QSPICLKSOURCE_D1HCLK;
 8101786:	2300      	movs	r3, #0
 8101788:	66fb      	str	r3, [r7, #108]	; 0x6c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 810178a:	f107 0320 	add.w	r3, r7, #32
 810178e:	4618      	mov	r0, r3
 8101790:	f008 fd16 	bl	810a1c0 <HAL_RCCEx_PeriphCLKConfig>
 8101794:	4603      	mov	r3, r0
 8101796:	2b00      	cmp	r3, #0
 8101798:	d001      	beq.n	810179e <HAL_QSPI_MspInit+0x56>
    {
      Error_Handler();
 810179a:	f7ff fe04 	bl	81013a6 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_QSPI_CLK_ENABLE();
 810179e:	4b7b      	ldr	r3, [pc, #492]	; (810198c <HAL_QSPI_MspInit+0x244>)
 81017a0:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 81017a4:	4a79      	ldr	r2, [pc, #484]	; (810198c <HAL_QSPI_MspInit+0x244>)
 81017a6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 81017aa:	f8c2 30d4 	str.w	r3, [r2, #212]	; 0xd4
 81017ae:	4b77      	ldr	r3, [pc, #476]	; (810198c <HAL_QSPI_MspInit+0x244>)
 81017b0:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 81017b4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 81017b8:	61fb      	str	r3, [r7, #28]
 81017ba:	69fb      	ldr	r3, [r7, #28]

    __HAL_RCC_GPIOG_CLK_ENABLE();
 81017bc:	4b73      	ldr	r3, [pc, #460]	; (810198c <HAL_QSPI_MspInit+0x244>)
 81017be:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 81017c2:	4a72      	ldr	r2, [pc, #456]	; (810198c <HAL_QSPI_MspInit+0x244>)
 81017c4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 81017c8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 81017cc:	4b6f      	ldr	r3, [pc, #444]	; (810198c <HAL_QSPI_MspInit+0x244>)
 81017ce:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 81017d2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 81017d6:	61bb      	str	r3, [r7, #24]
 81017d8:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOF_CLK_ENABLE();
 81017da:	4b6c      	ldr	r3, [pc, #432]	; (810198c <HAL_QSPI_MspInit+0x244>)
 81017dc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 81017e0:	4a6a      	ldr	r2, [pc, #424]	; (810198c <HAL_QSPI_MspInit+0x244>)
 81017e2:	f043 0320 	orr.w	r3, r3, #32
 81017e6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 81017ea:	4b68      	ldr	r3, [pc, #416]	; (810198c <HAL_QSPI_MspInit+0x244>)
 81017ec:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 81017f0:	f003 0320 	and.w	r3, r3, #32
 81017f4:	617b      	str	r3, [r7, #20]
 81017f6:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOH_CLK_ENABLE();
 81017f8:	4b64      	ldr	r3, [pc, #400]	; (810198c <HAL_QSPI_MspInit+0x244>)
 81017fa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 81017fe:	4a63      	ldr	r2, [pc, #396]	; (810198c <HAL_QSPI_MspInit+0x244>)
 8101800:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8101804:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8101808:	4b60      	ldr	r3, [pc, #384]	; (810198c <HAL_QSPI_MspInit+0x244>)
 810180a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 810180e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8101812:	613b      	str	r3, [r7, #16]
 8101814:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8101816:	4b5d      	ldr	r3, [pc, #372]	; (810198c <HAL_QSPI_MspInit+0x244>)
 8101818:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 810181c:	4a5b      	ldr	r2, [pc, #364]	; (810198c <HAL_QSPI_MspInit+0x244>)
 810181e:	f043 0302 	orr.w	r3, r3, #2
 8101822:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8101826:	4b59      	ldr	r3, [pc, #356]	; (810198c <HAL_QSPI_MspInit+0x244>)
 8101828:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 810182c:	f003 0302 	and.w	r3, r3, #2
 8101830:	60fb      	str	r3, [r7, #12]
 8101832:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8101834:	4b55      	ldr	r3, [pc, #340]	; (810198c <HAL_QSPI_MspInit+0x244>)
 8101836:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 810183a:	4a54      	ldr	r2, [pc, #336]	; (810198c <HAL_QSPI_MspInit+0x244>)
 810183c:	f043 0308 	orr.w	r3, r3, #8
 8101840:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8101844:	4b51      	ldr	r3, [pc, #324]	; (810198c <HAL_QSPI_MspInit+0x244>)
 8101846:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 810184a:	f003 0308 	and.w	r3, r3, #8
 810184e:	60bb      	str	r3, [r7, #8]
 8101850:	68bb      	ldr	r3, [r7, #8]
    PH2     ------> QUADSPI_BK2_IO0
    PH3     ------> QUADSPI_BK2_IO1
    PB2     ------> QUADSPI_CLK
    PD11     ------> QUADSPI_BK1_IO0
    */
    GPIO_InitStruct.Pin = QSPI_BK2_IO2_Pin|QSPI_BK2_IO3_Pin;
 8101852:	f44f 4384 	mov.w	r3, #16896	; 0x4200
 8101856:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 810185a:	2302      	movs	r3, #2
 810185c:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8101860:	2300      	movs	r3, #0
 8101862:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8101866:	2300      	movs	r3, #0
 8101868:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 810186c:	2309      	movs	r3, #9
 810186e:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8101872:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8101876:	4619      	mov	r1, r3
 8101878:	4845      	ldr	r0, [pc, #276]	; (8101990 <HAL_QSPI_MspInit+0x248>)
 810187a:	f007 fe6d 	bl	8109558 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = QSPI_BK1_NCS_Pin;
 810187e:	2340      	movs	r3, #64	; 0x40
 8101880:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8101884:	2302      	movs	r3, #2
 8101886:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 810188a:	2300      	movs	r3, #0
 810188c:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8101890:	2300      	movs	r3, #0
 8101892:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
    GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 8101896:	230a      	movs	r3, #10
 8101898:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
    HAL_GPIO_Init(QSPI_BK1_NCS_GPIO_Port, &GPIO_InitStruct);
 810189c:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 81018a0:	4619      	mov	r1, r3
 81018a2:	483b      	ldr	r0, [pc, #236]	; (8101990 <HAL_QSPI_MspInit+0x248>)
 81018a4:	f007 fe58 	bl	8109558 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = QSPI_BK1_IO3_Pin|QSPI_BK1_IO2_Pin;
 81018a8:	23c0      	movs	r3, #192	; 0xc0
 81018aa:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 81018ae:	2302      	movs	r3, #2
 81018b0:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 81018b4:	2300      	movs	r3, #0
 81018b6:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 81018ba:	2300      	movs	r3, #0
 81018bc:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 81018c0:	2309      	movs	r3, #9
 81018c2:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 81018c6:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 81018ca:	4619      	mov	r1, r3
 81018cc:	4831      	ldr	r0, [pc, #196]	; (8101994 <HAL_QSPI_MspInit+0x24c>)
 81018ce:	f007 fe43 	bl	8109558 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = QSPI_BK1_IO1_Pin;
 81018d2:	f44f 7300 	mov.w	r3, #512	; 0x200
 81018d6:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 81018da:	2302      	movs	r3, #2
 81018dc:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 81018e0:	2300      	movs	r3, #0
 81018e2:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 81018e6:	2300      	movs	r3, #0
 81018e8:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
    GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 81018ec:	230a      	movs	r3, #10
 81018ee:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
    HAL_GPIO_Init(QSPI_BK1_IO1_GPIO_Port, &GPIO_InitStruct);
 81018f2:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 81018f6:	4619      	mov	r1, r3
 81018f8:	4826      	ldr	r0, [pc, #152]	; (8101994 <HAL_QSPI_MspInit+0x24c>)
 81018fa:	f007 fe2d 	bl	8109558 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = QSPI_BK2_IO0_Pin|QSPI_BK2_IO1_Pin;
 81018fe:	230c      	movs	r3, #12
 8101900:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8101904:	2302      	movs	r3, #2
 8101906:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 810190a:	2300      	movs	r3, #0
 810190c:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8101910:	2300      	movs	r3, #0
 8101912:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 8101916:	2309      	movs	r3, #9
 8101918:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
    HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 810191c:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8101920:	4619      	mov	r1, r3
 8101922:	481d      	ldr	r0, [pc, #116]	; (8101998 <HAL_QSPI_MspInit+0x250>)
 8101924:	f007 fe18 	bl	8109558 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = QSPI_CLK_Pin;
 8101928:	2304      	movs	r3, #4
 810192a:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 810192e:	2302      	movs	r3, #2
 8101930:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8101934:	2300      	movs	r3, #0
 8101936:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 810193a:	2300      	movs	r3, #0
 810193c:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 8101940:	2309      	movs	r3, #9
 8101942:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
    HAL_GPIO_Init(QSPI_CLK_GPIO_Port, &GPIO_InitStruct);
 8101946:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 810194a:	4619      	mov	r1, r3
 810194c:	4813      	ldr	r0, [pc, #76]	; (810199c <HAL_QSPI_MspInit+0x254>)
 810194e:	f007 fe03 	bl	8109558 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = QSPI_BK1_IO0_Pin;
 8101952:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8101956:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 810195a:	2302      	movs	r3, #2
 810195c:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8101960:	2300      	movs	r3, #0
 8101962:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8101966:	2300      	movs	r3, #0
 8101968:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 810196c:	2309      	movs	r3, #9
 810196e:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
    HAL_GPIO_Init(QSPI_BK1_IO0_GPIO_Port, &GPIO_InitStruct);
 8101972:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8101976:	4619      	mov	r1, r3
 8101978:	4809      	ldr	r0, [pc, #36]	; (81019a0 <HAL_QSPI_MspInit+0x258>)
 810197a:	f007 fded 	bl	8109558 <HAL_GPIO_Init>
  /* USER CODE BEGIN QUADSPI_MspInit 1 */

  /* USER CODE END QUADSPI_MspInit 1 */
  }

}
 810197e:	bf00      	nop
 8101980:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8101984:	46bd      	mov	sp, r7
 8101986:	bd80      	pop	{r7, pc}
 8101988:	52005000 	.word	0x52005000
 810198c:	58024400 	.word	0x58024400
 8101990:	58021800 	.word	0x58021800
 8101994:	58021400 	.word	0x58021400
 8101998:	58021c00 	.word	0x58021c00
 810199c:	58020400 	.word	0x58020400
 81019a0:	58020c00 	.word	0x58020c00

081019a4 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 81019a4:	b580      	push	{r7, lr}
 81019a6:	b0b4      	sub	sp, #208	; 0xd0
 81019a8:	af00      	add	r7, sp, #0
 81019aa:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 81019ac:	f107 0308 	add.w	r3, r7, #8
 81019b0:	22c8      	movs	r2, #200	; 0xc8
 81019b2:	2100      	movs	r1, #0
 81019b4:	4618      	mov	r0, r3
 81019b6:	f010 f9d1 	bl	8111d5c <memset>
  if(hrtc->Instance==RTC)
 81019ba:	687b      	ldr	r3, [r7, #4]
 81019bc:	681b      	ldr	r3, [r3, #0]
 81019be:	4a10      	ldr	r2, [pc, #64]	; (8101a00 <HAL_RTC_MspInit+0x5c>)
 81019c0:	4293      	cmp	r3, r2
 81019c2:	d119      	bne.n	81019f8 <HAL_RTC_MspInit+0x54>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 81019c4:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 81019c8:	f04f 0300 	mov.w	r3, #0
 81019cc:	e9c7 2302 	strd	r2, r3, [r7, #8]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 81019d0:	f44f 7300 	mov.w	r3, #512	; 0x200
 81019d4:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 81019d8:	f107 0308 	add.w	r3, r7, #8
 81019dc:	4618      	mov	r0, r3
 81019de:	f008 fbef 	bl	810a1c0 <HAL_RCCEx_PeriphCLKConfig>
 81019e2:	4603      	mov	r3, r0
 81019e4:	2b00      	cmp	r3, #0
 81019e6:	d001      	beq.n	81019ec <HAL_RTC_MspInit+0x48>
    {
      Error_Handler();
 81019e8:	f7ff fcdd 	bl	81013a6 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 81019ec:	4b05      	ldr	r3, [pc, #20]	; (8101a04 <HAL_RTC_MspInit+0x60>)
 81019ee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 81019f0:	4a04      	ldr	r2, [pc, #16]	; (8101a04 <HAL_RTC_MspInit+0x60>)
 81019f2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 81019f6:	6713      	str	r3, [r2, #112]	; 0x70
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 81019f8:	bf00      	nop
 81019fa:	37d0      	adds	r7, #208	; 0xd0
 81019fc:	46bd      	mov	sp, r7
 81019fe:	bd80      	pop	{r7, pc}
 8101a00:	58004000 	.word	0x58004000
 8101a04:	58024400 	.word	0x58024400

08101a08 <HAL_SD_MspInit>:
* This function configures the hardware resources used in this example
* @param hsd: SD handle pointer
* @retval None
*/
void HAL_SD_MspInit(SD_HandleTypeDef* hsd)
{
 8101a08:	b580      	push	{r7, lr}
 8101a0a:	b0be      	sub	sp, #248	; 0xf8
 8101a0c:	af00      	add	r7, sp, #0
 8101a0e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8101a10:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8101a14:	2200      	movs	r2, #0
 8101a16:	601a      	str	r2, [r3, #0]
 8101a18:	605a      	str	r2, [r3, #4]
 8101a1a:	609a      	str	r2, [r3, #8]
 8101a1c:	60da      	str	r2, [r3, #12]
 8101a1e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8101a20:	f107 0318 	add.w	r3, r7, #24
 8101a24:	22c8      	movs	r2, #200	; 0xc8
 8101a26:	2100      	movs	r1, #0
 8101a28:	4618      	mov	r0, r3
 8101a2a:	f010 f997 	bl	8111d5c <memset>
  if(hsd->Instance==SDMMC1)
 8101a2e:	687b      	ldr	r3, [r7, #4]
 8101a30:	681b      	ldr	r3, [r3, #0]
 8101a32:	4a38      	ldr	r2, [pc, #224]	; (8101b14 <HAL_SD_MspInit+0x10c>)
 8101a34:	4293      	cmp	r3, r2
 8101a36:	d169      	bne.n	8101b0c <HAL_SD_MspInit+0x104>

  /* USER CODE END SDMMC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SDMMC;
 8101a38:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8101a3c:	f04f 0300 	mov.w	r3, #0
 8101a40:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.SdmmcClockSelection = RCC_SDMMCCLKSOURCE_PLL;
 8101a44:	2300      	movs	r3, #0
 8101a46:	66fb      	str	r3, [r7, #108]	; 0x6c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8101a48:	f107 0318 	add.w	r3, r7, #24
 8101a4c:	4618      	mov	r0, r3
 8101a4e:	f008 fbb7 	bl	810a1c0 <HAL_RCCEx_PeriphCLKConfig>
 8101a52:	4603      	mov	r3, r0
 8101a54:	2b00      	cmp	r3, #0
 8101a56:	d001      	beq.n	8101a5c <HAL_SD_MspInit+0x54>
    {
      Error_Handler();
 8101a58:	f7ff fca5 	bl	81013a6 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SDMMC1_CLK_ENABLE();
 8101a5c:	4b2e      	ldr	r3, [pc, #184]	; (8101b18 <HAL_SD_MspInit+0x110>)
 8101a5e:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 8101a62:	4a2d      	ldr	r2, [pc, #180]	; (8101b18 <HAL_SD_MspInit+0x110>)
 8101a64:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8101a68:	f8c2 30d4 	str.w	r3, [r2, #212]	; 0xd4
 8101a6c:	4b2a      	ldr	r3, [pc, #168]	; (8101b18 <HAL_SD_MspInit+0x110>)
 8101a6e:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 8101a72:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8101a76:	617b      	str	r3, [r7, #20]
 8101a78:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8101a7a:	4b27      	ldr	r3, [pc, #156]	; (8101b18 <HAL_SD_MspInit+0x110>)
 8101a7c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8101a80:	4a25      	ldr	r2, [pc, #148]	; (8101b18 <HAL_SD_MspInit+0x110>)
 8101a82:	f043 0304 	orr.w	r3, r3, #4
 8101a86:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8101a8a:	4b23      	ldr	r3, [pc, #140]	; (8101b18 <HAL_SD_MspInit+0x110>)
 8101a8c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8101a90:	f003 0304 	and.w	r3, r3, #4
 8101a94:	613b      	str	r3, [r7, #16]
 8101a96:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8101a98:	4b1f      	ldr	r3, [pc, #124]	; (8101b18 <HAL_SD_MspInit+0x110>)
 8101a9a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8101a9e:	4a1e      	ldr	r2, [pc, #120]	; (8101b18 <HAL_SD_MspInit+0x110>)
 8101aa0:	f043 0308 	orr.w	r3, r3, #8
 8101aa4:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8101aa8:	4b1b      	ldr	r3, [pc, #108]	; (8101b18 <HAL_SD_MspInit+0x110>)
 8101aaa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8101aae:	f003 0308 	and.w	r3, r3, #8
 8101ab2:	60fb      	str	r3, [r7, #12]
 8101ab4:	68fb      	ldr	r3, [r7, #12]
    PC12     ------> SDMMC1_CK
    PD2     ------> SDMMC1_CMD
    PC8     ------> SDMMC1_D0
    PC9     ------> SDMMC1_D1
    */
    GPIO_InitStruct.Pin = SDIO1_D2_Pin|SDIO1_D3_Pin|SDIO1_CK_Pin|SDIO1_D0_Pin
 8101ab6:	f44f 53f8 	mov.w	r3, #7936	; 0x1f00
 8101aba:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
                          |SDIO1_D1_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8101abe:	2302      	movs	r3, #2
 8101ac0:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8101ac4:	2300      	movs	r3, #0
 8101ac6:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8101aca:	2303      	movs	r3, #3
 8101acc:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO1;
 8101ad0:	230c      	movs	r3, #12
 8101ad2:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8101ad6:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8101ada:	4619      	mov	r1, r3
 8101adc:	480f      	ldr	r0, [pc, #60]	; (8101b1c <HAL_SD_MspInit+0x114>)
 8101ade:	f007 fd3b 	bl	8109558 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = SDIO1_CMD_Pin;
 8101ae2:	2304      	movs	r3, #4
 8101ae4:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8101ae8:	2302      	movs	r3, #2
 8101aea:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8101aee:	2300      	movs	r3, #0
 8101af0:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8101af4:	2303      	movs	r3, #3
 8101af6:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO1;
 8101afa:	230c      	movs	r3, #12
 8101afc:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    HAL_GPIO_Init(SDIO1_CMD_GPIO_Port, &GPIO_InitStruct);
 8101b00:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8101b04:	4619      	mov	r1, r3
 8101b06:	4806      	ldr	r0, [pc, #24]	; (8101b20 <HAL_SD_MspInit+0x118>)
 8101b08:	f007 fd26 	bl	8109558 <HAL_GPIO_Init>
  /* USER CODE BEGIN SDMMC1_MspInit 1 */

  /* USER CODE END SDMMC1_MspInit 1 */
  }

}
 8101b0c:	bf00      	nop
 8101b0e:	37f8      	adds	r7, #248	; 0xf8
 8101b10:	46bd      	mov	sp, r7
 8101b12:	bd80      	pop	{r7, pc}
 8101b14:	52007000 	.word	0x52007000
 8101b18:	58024400 	.word	0x58024400
 8101b1c:	58020800 	.word	0x58020800
 8101b20:	58020c00 	.word	0x58020c00

08101b24 <HAL_SPDIFRX_MspInit>:
* This function configures the hardware resources used in this example
* @param hspdifrx: SPDIFRX handle pointer
* @retval None
*/
void HAL_SPDIFRX_MspInit(SPDIFRX_HandleTypeDef* hspdifrx)
{
 8101b24:	b580      	push	{r7, lr}
 8101b26:	b0bc      	sub	sp, #240	; 0xf0
 8101b28:	af00      	add	r7, sp, #0
 8101b2a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8101b2c:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8101b30:	2200      	movs	r2, #0
 8101b32:	601a      	str	r2, [r3, #0]
 8101b34:	605a      	str	r2, [r3, #4]
 8101b36:	609a      	str	r2, [r3, #8]
 8101b38:	60da      	str	r2, [r3, #12]
 8101b3a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8101b3c:	f107 0310 	add.w	r3, r7, #16
 8101b40:	22c8      	movs	r2, #200	; 0xc8
 8101b42:	2100      	movs	r1, #0
 8101b44:	4618      	mov	r0, r3
 8101b46:	f010 f909 	bl	8111d5c <memset>
  if(hspdifrx->Instance==SPDIFRX)
 8101b4a:	687b      	ldr	r3, [r7, #4]
 8101b4c:	681b      	ldr	r3, [r3, #0]
 8101b4e:	f1b3 2f40 	cmp.w	r3, #1073758208	; 0x40004000
 8101b52:	d144      	bne.n	8101bde <HAL_SPDIFRX_MspInit+0xba>

  /* USER CODE END SPDIFRX_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPDIFRX;
 8101b54:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8101b58:	f04f 0300 	mov.w	r3, #0
 8101b5c:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.SpdifrxClockSelection = RCC_SPDIFRXCLKSOURCE_PLL;
 8101b60:	2300      	movs	r3, #0
 8101b62:	67fb      	str	r3, [r7, #124]	; 0x7c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8101b64:	f107 0310 	add.w	r3, r7, #16
 8101b68:	4618      	mov	r0, r3
 8101b6a:	f008 fb29 	bl	810a1c0 <HAL_RCCEx_PeriphCLKConfig>
 8101b6e:	4603      	mov	r3, r0
 8101b70:	2b00      	cmp	r3, #0
 8101b72:	d001      	beq.n	8101b78 <HAL_SPDIFRX_MspInit+0x54>
    {
      Error_Handler();
 8101b74:	f7ff fc17 	bl	81013a6 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPDIFRX_CLK_ENABLE();
 8101b78:	4b1b      	ldr	r3, [pc, #108]	; (8101be8 <HAL_SPDIFRX_MspInit+0xc4>)
 8101b7a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8101b7e:	4a1a      	ldr	r2, [pc, #104]	; (8101be8 <HAL_SPDIFRX_MspInit+0xc4>)
 8101b80:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8101b84:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8101b88:	4b17      	ldr	r3, [pc, #92]	; (8101be8 <HAL_SPDIFRX_MspInit+0xc4>)
 8101b8a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8101b8e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8101b92:	60fb      	str	r3, [r7, #12]
 8101b94:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8101b96:	4b14      	ldr	r3, [pc, #80]	; (8101be8 <HAL_SPDIFRX_MspInit+0xc4>)
 8101b98:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8101b9c:	4a12      	ldr	r2, [pc, #72]	; (8101be8 <HAL_SPDIFRX_MspInit+0xc4>)
 8101b9e:	f043 0308 	orr.w	r3, r3, #8
 8101ba2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8101ba6:	4b10      	ldr	r3, [pc, #64]	; (8101be8 <HAL_SPDIFRX_MspInit+0xc4>)
 8101ba8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8101bac:	f003 0308 	and.w	r3, r3, #8
 8101bb0:	60bb      	str	r3, [r7, #8]
 8101bb2:	68bb      	ldr	r3, [r7, #8]
    /**SPDIFRX1 GPIO Configuration
    PD7     ------> SPDIFRX1_IN0
    */
    GPIO_InitStruct.Pin = SPDIF_RX0_Pin;
 8101bb4:	2380      	movs	r3, #128	; 0x80
 8101bb6:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8101bba:	2302      	movs	r3, #2
 8101bbc:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8101bc0:	2300      	movs	r3, #0
 8101bc2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8101bc6:	2300      	movs	r3, #0
 8101bc8:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF9_SPDIF;
 8101bcc:	2309      	movs	r3, #9
 8101bce:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(SPDIF_RX0_GPIO_Port, &GPIO_InitStruct);
 8101bd2:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8101bd6:	4619      	mov	r1, r3
 8101bd8:	4804      	ldr	r0, [pc, #16]	; (8101bec <HAL_SPDIFRX_MspInit+0xc8>)
 8101bda:	f007 fcbd 	bl	8109558 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPDIFRX_MspInit 1 */

  /* USER CODE END SPDIFRX_MspInit 1 */
  }

}
 8101bde:	bf00      	nop
 8101be0:	37f0      	adds	r7, #240	; 0xf0
 8101be2:	46bd      	mov	sp, r7
 8101be4:	bd80      	pop	{r7, pc}
 8101be6:	bf00      	nop
 8101be8:	58024400 	.word	0x58024400
 8101bec:	58020c00 	.word	0x58020c00

08101bf0 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8101bf0:	b580      	push	{r7, lr}
 8101bf2:	b0c0      	sub	sp, #256	; 0x100
 8101bf4:	af00      	add	r7, sp, #0
 8101bf6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8101bf8:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8101bfc:	2200      	movs	r2, #0
 8101bfe:	601a      	str	r2, [r3, #0]
 8101c00:	605a      	str	r2, [r3, #4]
 8101c02:	609a      	str	r2, [r3, #8]
 8101c04:	60da      	str	r2, [r3, #12]
 8101c06:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8101c08:	f107 0320 	add.w	r3, r7, #32
 8101c0c:	22c8      	movs	r2, #200	; 0xc8
 8101c0e:	2100      	movs	r1, #0
 8101c10:	4618      	mov	r0, r3
 8101c12:	f010 f8a3 	bl	8111d5c <memset>
  if(hspi->Instance==SPI2)
 8101c16:	687b      	ldr	r3, [r7, #4]
 8101c18:	681b      	ldr	r3, [r3, #0]
 8101c1a:	4a72      	ldr	r2, [pc, #456]	; (8101de4 <HAL_SPI_MspInit+0x1f4>)
 8101c1c:	4293      	cmp	r3, r2
 8101c1e:	d16b      	bne.n	8101cf8 <HAL_SPI_MspInit+0x108>

  /* USER CODE END SPI2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI2;
 8101c20:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8101c24:	f04f 0300 	mov.w	r3, #0
 8101c28:	e9c7 2308 	strd	r2, r3, [r7, #32]
    PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL;
 8101c2c:	2300      	movs	r3, #0
 8101c2e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8101c32:	f107 0320 	add.w	r3, r7, #32
 8101c36:	4618      	mov	r0, r3
 8101c38:	f008 fac2 	bl	810a1c0 <HAL_RCCEx_PeriphCLKConfig>
 8101c3c:	4603      	mov	r3, r0
 8101c3e:	2b00      	cmp	r3, #0
 8101c40:	d001      	beq.n	8101c46 <HAL_SPI_MspInit+0x56>
    {
      Error_Handler();
 8101c42:	f7ff fbb0 	bl	81013a6 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8101c46:	4b68      	ldr	r3, [pc, #416]	; (8101de8 <HAL_SPI_MspInit+0x1f8>)
 8101c48:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8101c4c:	4a66      	ldr	r2, [pc, #408]	; (8101de8 <HAL_SPI_MspInit+0x1f8>)
 8101c4e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8101c52:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8101c56:	4b64      	ldr	r3, [pc, #400]	; (8101de8 <HAL_SPI_MspInit+0x1f8>)
 8101c58:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8101c5c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8101c60:	61fb      	str	r3, [r7, #28]
 8101c62:	69fb      	ldr	r3, [r7, #28]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8101c64:	4b60      	ldr	r3, [pc, #384]	; (8101de8 <HAL_SPI_MspInit+0x1f8>)
 8101c66:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8101c6a:	4a5f      	ldr	r2, [pc, #380]	; (8101de8 <HAL_SPI_MspInit+0x1f8>)
 8101c6c:	f043 0301 	orr.w	r3, r3, #1
 8101c70:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8101c74:	4b5c      	ldr	r3, [pc, #368]	; (8101de8 <HAL_SPI_MspInit+0x1f8>)
 8101c76:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8101c7a:	f003 0301 	and.w	r3, r3, #1
 8101c7e:	61bb      	str	r3, [r7, #24]
 8101c80:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8101c82:	4b59      	ldr	r3, [pc, #356]	; (8101de8 <HAL_SPI_MspInit+0x1f8>)
 8101c84:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8101c88:	4a57      	ldr	r2, [pc, #348]	; (8101de8 <HAL_SPI_MspInit+0x1f8>)
 8101c8a:	f043 0304 	orr.w	r3, r3, #4
 8101c8e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8101c92:	4b55      	ldr	r3, [pc, #340]	; (8101de8 <HAL_SPI_MspInit+0x1f8>)
 8101c94:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8101c98:	f003 0304 	and.w	r3, r3, #4
 8101c9c:	617b      	str	r3, [r7, #20]
 8101c9e:	697b      	ldr	r3, [r7, #20]
    PA12     ------> SPI2_SCK
    PA11     ------> SPI2_NSS
    PC2     ------> SPI2_MISO
    PC3     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = SPI2_SCK_Pin|PMOD_1_Pin;
 8101ca0:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8101ca4:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8101ca8:	2302      	movs	r3, #2
 8101caa:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8101cae:	2300      	movs	r3, #0
 8101cb0:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8101cb4:	2300      	movs	r3, #0
 8101cb6:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8101cba:	2305      	movs	r3, #5
 8101cbc:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8101cc0:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8101cc4:	4619      	mov	r1, r3
 8101cc6:	4849      	ldr	r0, [pc, #292]	; (8101dec <HAL_SPI_MspInit+0x1fc>)
 8101cc8:	f007 fc46 	bl	8109558 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = PMOD_3_Pin|PMOD_2_Pin;
 8101ccc:	230c      	movs	r3, #12
 8101cce:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8101cd2:	2302      	movs	r3, #2
 8101cd4:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8101cd8:	2300      	movs	r3, #0
 8101cda:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8101cde:	2300      	movs	r3, #0
 8101ce0:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8101ce4:	2305      	movs	r3, #5
 8101ce6:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8101cea:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8101cee:	4619      	mov	r1, r3
 8101cf0:	483f      	ldr	r0, [pc, #252]	; (8101df0 <HAL_SPI_MspInit+0x200>)
 8101cf2:	f007 fc31 	bl	8109558 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI5_MspInit 1 */

  /* USER CODE END SPI5_MspInit 1 */
  }

}
 8101cf6:	e06f      	b.n	8101dd8 <HAL_SPI_MspInit+0x1e8>
  else if(hspi->Instance==SPI5)
 8101cf8:	687b      	ldr	r3, [r7, #4]
 8101cfa:	681b      	ldr	r3, [r3, #0]
 8101cfc:	4a3d      	ldr	r2, [pc, #244]	; (8101df4 <HAL_SPI_MspInit+0x204>)
 8101cfe:	4293      	cmp	r3, r2
 8101d00:	d16a      	bne.n	8101dd8 <HAL_SPI_MspInit+0x1e8>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI5;
 8101d02:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8101d06:	f04f 0300 	mov.w	r3, #0
 8101d0a:	e9c7 2308 	strd	r2, r3, [r7, #32]
    PeriphClkInitStruct.Spi45ClockSelection = RCC_SPI45CLKSOURCE_D2PCLK1;
 8101d0e:	2300      	movs	r3, #0
 8101d10:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8101d14:	f107 0320 	add.w	r3, r7, #32
 8101d18:	4618      	mov	r0, r3
 8101d1a:	f008 fa51 	bl	810a1c0 <HAL_RCCEx_PeriphCLKConfig>
 8101d1e:	4603      	mov	r3, r0
 8101d20:	2b00      	cmp	r3, #0
 8101d22:	d001      	beq.n	8101d28 <HAL_SPI_MspInit+0x138>
      Error_Handler();
 8101d24:	f7ff fb3f 	bl	81013a6 <Error_Handler>
    __HAL_RCC_SPI5_CLK_ENABLE();
 8101d28:	4b2f      	ldr	r3, [pc, #188]	; (8101de8 <HAL_SPI_MspInit+0x1f8>)
 8101d2a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8101d2e:	4a2e      	ldr	r2, [pc, #184]	; (8101de8 <HAL_SPI_MspInit+0x1f8>)
 8101d30:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8101d34:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8101d38:	4b2b      	ldr	r3, [pc, #172]	; (8101de8 <HAL_SPI_MspInit+0x1f8>)
 8101d3a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8101d3e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8101d42:	613b      	str	r3, [r7, #16]
 8101d44:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOK_CLK_ENABLE();
 8101d46:	4b28      	ldr	r3, [pc, #160]	; (8101de8 <HAL_SPI_MspInit+0x1f8>)
 8101d48:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8101d4c:	4a26      	ldr	r2, [pc, #152]	; (8101de8 <HAL_SPI_MspInit+0x1f8>)
 8101d4e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8101d52:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8101d56:	4b24      	ldr	r3, [pc, #144]	; (8101de8 <HAL_SPI_MspInit+0x1f8>)
 8101d58:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8101d5c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8101d60:	60fb      	str	r3, [r7, #12]
 8101d62:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOJ_CLK_ENABLE();
 8101d64:	4b20      	ldr	r3, [pc, #128]	; (8101de8 <HAL_SPI_MspInit+0x1f8>)
 8101d66:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8101d6a:	4a1f      	ldr	r2, [pc, #124]	; (8101de8 <HAL_SPI_MspInit+0x1f8>)
 8101d6c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8101d70:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8101d74:	4b1c      	ldr	r3, [pc, #112]	; (8101de8 <HAL_SPI_MspInit+0x1f8>)
 8101d76:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8101d7a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8101d7e:	60bb      	str	r3, [r7, #8]
 8101d80:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = ARD_D13_Pin|ARD_D10_Pin;
 8101d82:	2303      	movs	r3, #3
 8101d84:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8101d88:	2302      	movs	r3, #2
 8101d8a:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8101d8e:	2300      	movs	r3, #0
 8101d90:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8101d94:	2300      	movs	r3, #0
 8101d96:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI5;
 8101d9a:	2305      	movs	r3, #5
 8101d9c:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
    HAL_GPIO_Init(GPIOK, &GPIO_InitStruct);
 8101da0:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8101da4:	4619      	mov	r1, r3
 8101da6:	4814      	ldr	r0, [pc, #80]	; (8101df8 <HAL_SPI_MspInit+0x208>)
 8101da8:	f007 fbd6 	bl	8109558 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = ARD_D12_Pin|ARD_D11_Pin;
 8101dac:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8101db0:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8101db4:	2302      	movs	r3, #2
 8101db6:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8101dba:	2300      	movs	r3, #0
 8101dbc:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8101dc0:	2300      	movs	r3, #0
 8101dc2:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI5;
 8101dc6:	2305      	movs	r3, #5
 8101dc8:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
    HAL_GPIO_Init(GPIOJ, &GPIO_InitStruct);
 8101dcc:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8101dd0:	4619      	mov	r1, r3
 8101dd2:	480a      	ldr	r0, [pc, #40]	; (8101dfc <HAL_SPI_MspInit+0x20c>)
 8101dd4:	f007 fbc0 	bl	8109558 <HAL_GPIO_Init>
}
 8101dd8:	bf00      	nop
 8101dda:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8101dde:	46bd      	mov	sp, r7
 8101de0:	bd80      	pop	{r7, pc}
 8101de2:	bf00      	nop
 8101de4:	40003800 	.word	0x40003800
 8101de8:	58024400 	.word	0x58024400
 8101dec:	58020000 	.word	0x58020000
 8101df0:	58020800 	.word	0x58020800
 8101df4:	40015000 	.word	0x40015000
 8101df8:	58022800 	.word	0x58022800
 8101dfc:	58022400 	.word	0x58022400

08101e00 <HAL_TIM_OC_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_oc: TIM_OC handle pointer
* @retval None
*/
void HAL_TIM_OC_MspInit(TIM_HandleTypeDef* htim_oc)
{
 8101e00:	b480      	push	{r7}
 8101e02:	b085      	sub	sp, #20
 8101e04:	af00      	add	r7, sp, #0
 8101e06:	6078      	str	r0, [r7, #4]
  if(htim_oc->Instance==TIM8)
 8101e08:	687b      	ldr	r3, [r7, #4]
 8101e0a:	681b      	ldr	r3, [r3, #0]
 8101e0c:	4a0b      	ldr	r2, [pc, #44]	; (8101e3c <HAL_TIM_OC_MspInit+0x3c>)
 8101e0e:	4293      	cmp	r3, r2
 8101e10:	d10e      	bne.n	8101e30 <HAL_TIM_OC_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM8_MspInit 0 */

  /* USER CODE END TIM8_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM8_CLK_ENABLE();
 8101e12:	4b0b      	ldr	r3, [pc, #44]	; (8101e40 <HAL_TIM_OC_MspInit+0x40>)
 8101e14:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8101e18:	4a09      	ldr	r2, [pc, #36]	; (8101e40 <HAL_TIM_OC_MspInit+0x40>)
 8101e1a:	f043 0302 	orr.w	r3, r3, #2
 8101e1e:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8101e22:	4b07      	ldr	r3, [pc, #28]	; (8101e40 <HAL_TIM_OC_MspInit+0x40>)
 8101e24:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8101e28:	f003 0302 	and.w	r3, r3, #2
 8101e2c:	60fb      	str	r3, [r7, #12]
 8101e2e:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }

}
 8101e30:	bf00      	nop
 8101e32:	3714      	adds	r7, #20
 8101e34:	46bd      	mov	sp, r7
 8101e36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101e3a:	4770      	bx	lr
 8101e3c:	40010400 	.word	0x40010400
 8101e40:	58024400 	.word	0x58024400

08101e44 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8101e44:	b580      	push	{r7, lr}
 8101e46:	b08a      	sub	sp, #40	; 0x28
 8101e48:	af00      	add	r7, sp, #0
 8101e4a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8101e4c:	f107 0314 	add.w	r3, r7, #20
 8101e50:	2200      	movs	r2, #0
 8101e52:	601a      	str	r2, [r3, #0]
 8101e54:	605a      	str	r2, [r3, #4]
 8101e56:	609a      	str	r2, [r3, #8]
 8101e58:	60da      	str	r2, [r3, #12]
 8101e5a:	611a      	str	r2, [r3, #16]
  if(htim_base->Instance==TIM13)
 8101e5c:	687b      	ldr	r3, [r7, #4]
 8101e5e:	681b      	ldr	r3, [r3, #0]
 8101e60:	4a1a      	ldr	r2, [pc, #104]	; (8101ecc <HAL_TIM_Base_MspInit+0x88>)
 8101e62:	4293      	cmp	r3, r2
 8101e64:	d12e      	bne.n	8101ec4 <HAL_TIM_Base_MspInit+0x80>
  {
  /* USER CODE BEGIN TIM13_MspInit 0 */

  /* USER CODE END TIM13_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM13_CLK_ENABLE();
 8101e66:	4b1a      	ldr	r3, [pc, #104]	; (8101ed0 <HAL_TIM_Base_MspInit+0x8c>)
 8101e68:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8101e6c:	4a18      	ldr	r2, [pc, #96]	; (8101ed0 <HAL_TIM_Base_MspInit+0x8c>)
 8101e6e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8101e72:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8101e76:	4b16      	ldr	r3, [pc, #88]	; (8101ed0 <HAL_TIM_Base_MspInit+0x8c>)
 8101e78:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8101e7c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8101e80:	613b      	str	r3, [r7, #16]
 8101e82:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOF_CLK_ENABLE();
 8101e84:	4b12      	ldr	r3, [pc, #72]	; (8101ed0 <HAL_TIM_Base_MspInit+0x8c>)
 8101e86:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8101e8a:	4a11      	ldr	r2, [pc, #68]	; (8101ed0 <HAL_TIM_Base_MspInit+0x8c>)
 8101e8c:	f043 0320 	orr.w	r3, r3, #32
 8101e90:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8101e94:	4b0e      	ldr	r3, [pc, #56]	; (8101ed0 <HAL_TIM_Base_MspInit+0x8c>)
 8101e96:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8101e9a:	f003 0320 	and.w	r3, r3, #32
 8101e9e:	60fb      	str	r3, [r7, #12]
 8101ea0:	68fb      	ldr	r3, [r7, #12]
    /**TIM13 GPIO Configuration
    PF8     ------> TIM13_CH1
    */
    GPIO_InitStruct.Pin = PMOD_14_ARD_D3_Pin;
 8101ea2:	f44f 7380 	mov.w	r3, #256	; 0x100
 8101ea6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8101ea8:	2302      	movs	r3, #2
 8101eaa:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8101eac:	2300      	movs	r3, #0
 8101eae:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8101eb0:	2300      	movs	r3, #0
 8101eb2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_TIM13;
 8101eb4:	2309      	movs	r3, #9
 8101eb6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(PMOD_14_ARD_D3_GPIO_Port, &GPIO_InitStruct);
 8101eb8:	f107 0314 	add.w	r3, r7, #20
 8101ebc:	4619      	mov	r1, r3
 8101ebe:	4805      	ldr	r0, [pc, #20]	; (8101ed4 <HAL_TIM_Base_MspInit+0x90>)
 8101ec0:	f007 fb4a 	bl	8109558 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM13_MspInit 1 */

  /* USER CODE END TIM13_MspInit 1 */
  }

}
 8101ec4:	bf00      	nop
 8101ec6:	3728      	adds	r7, #40	; 0x28
 8101ec8:	46bd      	mov	sp, r7
 8101eca:	bd80      	pop	{r7, pc}
 8101ecc:	40001c00 	.word	0x40001c00
 8101ed0:	58024400 	.word	0x58024400
 8101ed4:	58021400 	.word	0x58021400

08101ed8 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8101ed8:	b580      	push	{r7, lr}
 8101eda:	b088      	sub	sp, #32
 8101edc:	af00      	add	r7, sp, #0
 8101ede:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8101ee0:	f107 030c 	add.w	r3, r7, #12
 8101ee4:	2200      	movs	r2, #0
 8101ee6:	601a      	str	r2, [r3, #0]
 8101ee8:	605a      	str	r2, [r3, #4]
 8101eea:	609a      	str	r2, [r3, #8]
 8101eec:	60da      	str	r2, [r3, #12]
 8101eee:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM8)
 8101ef0:	687b      	ldr	r3, [r7, #4]
 8101ef2:	681b      	ldr	r3, [r3, #0]
 8101ef4:	4a12      	ldr	r2, [pc, #72]	; (8101f40 <HAL_TIM_MspPostInit+0x68>)
 8101ef6:	4293      	cmp	r3, r2
 8101ef8:	d11e      	bne.n	8101f38 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM8_MspPostInit 0 */

  /* USER CODE END TIM8_MspPostInit 0 */

    __HAL_RCC_GPIOJ_CLK_ENABLE();
 8101efa:	4b12      	ldr	r3, [pc, #72]	; (8101f44 <HAL_TIM_MspPostInit+0x6c>)
 8101efc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8101f00:	4a10      	ldr	r2, [pc, #64]	; (8101f44 <HAL_TIM_MspPostInit+0x6c>)
 8101f02:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8101f06:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8101f0a:	4b0e      	ldr	r3, [pc, #56]	; (8101f44 <HAL_TIM_MspPostInit+0x6c>)
 8101f0c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8101f10:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8101f14:	60bb      	str	r3, [r7, #8]
 8101f16:	68bb      	ldr	r3, [r7, #8]
    /**TIM8 GPIO Configuration
    PJ7     ------> TIM8_CH2N
    PJ6     ------> TIM8_CH2
    */
    GPIO_InitStruct.Pin = ARD_D6_Pin|ARD_D9_Pin;
 8101f18:	23c0      	movs	r3, #192	; 0xc0
 8101f1a:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8101f1c:	2302      	movs	r3, #2
 8101f1e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8101f20:	2300      	movs	r3, #0
 8101f22:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8101f24:	2300      	movs	r3, #0
 8101f26:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 8101f28:	2303      	movs	r3, #3
 8101f2a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOJ, &GPIO_InitStruct);
 8101f2c:	f107 030c 	add.w	r3, r7, #12
 8101f30:	4619      	mov	r1, r3
 8101f32:	4805      	ldr	r0, [pc, #20]	; (8101f48 <HAL_TIM_MspPostInit+0x70>)
 8101f34:	f007 fb10 	bl	8109558 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM8_MspPostInit 1 */

  /* USER CODE END TIM8_MspPostInit 1 */
  }

}
 8101f38:	bf00      	nop
 8101f3a:	3720      	adds	r7, #32
 8101f3c:	46bd      	mov	sp, r7
 8101f3e:	bd80      	pop	{r7, pc}
 8101f40:	40010400 	.word	0x40010400
 8101f44:	58024400 	.word	0x58024400
 8101f48:	58022400 	.word	0x58022400

08101f4c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8101f4c:	b580      	push	{r7, lr}
 8101f4e:	b0be      	sub	sp, #248	; 0xf8
 8101f50:	af00      	add	r7, sp, #0
 8101f52:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8101f54:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8101f58:	2200      	movs	r2, #0
 8101f5a:	601a      	str	r2, [r3, #0]
 8101f5c:	605a      	str	r2, [r3, #4]
 8101f5e:	609a      	str	r2, [r3, #8]
 8101f60:	60da      	str	r2, [r3, #12]
 8101f62:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8101f64:	f107 0318 	add.w	r3, r7, #24
 8101f68:	22c8      	movs	r2, #200	; 0xc8
 8101f6a:	2100      	movs	r1, #0
 8101f6c:	4618      	mov	r0, r3
 8101f6e:	f00f fef5 	bl	8111d5c <memset>
  if(huart->Instance==UART8)
 8101f72:	687b      	ldr	r3, [r7, #4]
 8101f74:	681b      	ldr	r3, [r3, #0]
 8101f76:	4a3b      	ldr	r2, [pc, #236]	; (8102064 <HAL_UART_MspInit+0x118>)
 8101f78:	4293      	cmp	r3, r2
 8101f7a:	d147      	bne.n	810200c <HAL_UART_MspInit+0xc0>

  /* USER CODE END UART8_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART8;
 8101f7c:	f04f 0202 	mov.w	r2, #2
 8101f80:	f04f 0300 	mov.w	r3, #0
 8101f84:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8101f88:	2300      	movs	r3, #0
 8101f8a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8101f8e:	f107 0318 	add.w	r3, r7, #24
 8101f92:	4618      	mov	r0, r3
 8101f94:	f008 f914 	bl	810a1c0 <HAL_RCCEx_PeriphCLKConfig>
 8101f98:	4603      	mov	r3, r0
 8101f9a:	2b00      	cmp	r3, #0
 8101f9c:	d001      	beq.n	8101fa2 <HAL_UART_MspInit+0x56>
    {
      Error_Handler();
 8101f9e:	f7ff fa02 	bl	81013a6 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_UART8_CLK_ENABLE();
 8101fa2:	4b31      	ldr	r3, [pc, #196]	; (8102068 <HAL_UART_MspInit+0x11c>)
 8101fa4:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8101fa8:	4a2f      	ldr	r2, [pc, #188]	; (8102068 <HAL_UART_MspInit+0x11c>)
 8101faa:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8101fae:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8101fb2:	4b2d      	ldr	r3, [pc, #180]	; (8102068 <HAL_UART_MspInit+0x11c>)
 8101fb4:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8101fb8:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8101fbc:	617b      	str	r3, [r7, #20]
 8101fbe:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOJ_CLK_ENABLE();
 8101fc0:	4b29      	ldr	r3, [pc, #164]	; (8102068 <HAL_UART_MspInit+0x11c>)
 8101fc2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8101fc6:	4a28      	ldr	r2, [pc, #160]	; (8102068 <HAL_UART_MspInit+0x11c>)
 8101fc8:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8101fcc:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8101fd0:	4b25      	ldr	r3, [pc, #148]	; (8102068 <HAL_UART_MspInit+0x11c>)
 8101fd2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8101fd6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8101fda:	613b      	str	r3, [r7, #16]
 8101fdc:	693b      	ldr	r3, [r7, #16]
    /**UART8 GPIO Configuration
    PJ9     ------> UART8_RX
    PJ8     ------> UART8_TX
    */
    GPIO_InitStruct.Pin = ARD_D0_Pin|ARD_D1_Pin;
 8101fde:	f44f 7340 	mov.w	r3, #768	; 0x300
 8101fe2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8101fe6:	2302      	movs	r3, #2
 8101fe8:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8101fec:	2300      	movs	r3, #0
 8101fee:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8101ff2:	2300      	movs	r3, #0
 8101ff4:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF8_UART8;
 8101ff8:	2308      	movs	r3, #8
 8101ffa:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    HAL_GPIO_Init(GPIOJ, &GPIO_InitStruct);
 8101ffe:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8102002:	4619      	mov	r1, r3
 8102004:	4819      	ldr	r0, [pc, #100]	; (810206c <HAL_UART_MspInit+0x120>)
 8102006:	f007 faa7 	bl	8109558 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 810200a:	e026      	b.n	810205a <HAL_UART_MspInit+0x10e>
  else if(huart->Instance==USART1)
 810200c:	687b      	ldr	r3, [r7, #4]
 810200e:	681b      	ldr	r3, [r3, #0]
 8102010:	4a17      	ldr	r2, [pc, #92]	; (8102070 <HAL_UART_MspInit+0x124>)
 8102012:	4293      	cmp	r3, r2
 8102014:	d121      	bne.n	810205a <HAL_UART_MspInit+0x10e>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8102016:	f04f 0201 	mov.w	r2, #1
 810201a:	f04f 0300 	mov.w	r3, #0
 810201e:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.Usart16ClockSelection = RCC_USART16CLKSOURCE_D2PCLK2;
 8102022:	2300      	movs	r3, #0
 8102024:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8102028:	f107 0318 	add.w	r3, r7, #24
 810202c:	4618      	mov	r0, r3
 810202e:	f008 f8c7 	bl	810a1c0 <HAL_RCCEx_PeriphCLKConfig>
 8102032:	4603      	mov	r3, r0
 8102034:	2b00      	cmp	r3, #0
 8102036:	d001      	beq.n	810203c <HAL_UART_MspInit+0xf0>
      Error_Handler();
 8102038:	f7ff f9b5 	bl	81013a6 <Error_Handler>
    __HAL_RCC_USART1_CLK_ENABLE();
 810203c:	4b0a      	ldr	r3, [pc, #40]	; (8102068 <HAL_UART_MspInit+0x11c>)
 810203e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8102042:	4a09      	ldr	r2, [pc, #36]	; (8102068 <HAL_UART_MspInit+0x11c>)
 8102044:	f043 0310 	orr.w	r3, r3, #16
 8102048:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 810204c:	4b06      	ldr	r3, [pc, #24]	; (8102068 <HAL_UART_MspInit+0x11c>)
 810204e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8102052:	f003 0310 	and.w	r3, r3, #16
 8102056:	60fb      	str	r3, [r7, #12]
 8102058:	68fb      	ldr	r3, [r7, #12]
}
 810205a:	bf00      	nop
 810205c:	37f8      	adds	r7, #248	; 0xf8
 810205e:	46bd      	mov	sp, r7
 8102060:	bd80      	pop	{r7, pc}
 8102062:	bf00      	nop
 8102064:	40007c00 	.word	0x40007c00
 8102068:	58024400 	.word	0x58024400
 810206c:	58022400 	.word	0x58022400
 8102070:	40011000 	.word	0x40011000

08102074 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8102074:	b580      	push	{r7, lr}
 8102076:	b0c2      	sub	sp, #264	; 0x108
 8102078:	af00      	add	r7, sp, #0
 810207a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 810207e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8102082:	6018      	str	r0, [r3, #0]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8102084:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 8102088:	2200      	movs	r2, #0
 810208a:	601a      	str	r2, [r3, #0]
 810208c:	605a      	str	r2, [r3, #4]
 810208e:	609a      	str	r2, [r3, #8]
 8102090:	60da      	str	r2, [r3, #12]
 8102092:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8102094:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8102098:	22c8      	movs	r2, #200	; 0xc8
 810209a:	2100      	movs	r1, #0
 810209c:	4618      	mov	r0, r3
 810209e:	f00f fe5d 	bl	8111d5c <memset>
  if(hpcd->Instance==USB_OTG_HS)
 81020a2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 81020a6:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 81020aa:	681b      	ldr	r3, [r3, #0]
 81020ac:	681b      	ldr	r3, [r3, #0]
 81020ae:	4a7d      	ldr	r2, [pc, #500]	; (81022a4 <HAL_PCD_MspInit+0x230>)
 81020b0:	4293      	cmp	r3, r2
 81020b2:	f040 80f2 	bne.w	810229a <HAL_PCD_MspInit+0x226>

  /* USER CODE END USB_OTG_HS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USB;
 81020b6:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 81020ba:	f04f 0300 	mov.w	r3, #0
 81020be:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
    PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_PLL;
 81020c2:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 81020c6:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 81020ca:	f107 0328 	add.w	r3, r7, #40	; 0x28
 81020ce:	4618      	mov	r0, r3
 81020d0:	f008 f876 	bl	810a1c0 <HAL_RCCEx_PeriphCLKConfig>
 81020d4:	4603      	mov	r3, r0
 81020d6:	2b00      	cmp	r3, #0
 81020d8:	d001      	beq.n	81020de <HAL_PCD_MspInit+0x6a>
    {
      Error_Handler();
 81020da:	f7ff f964 	bl	81013a6 <Error_Handler>
    }

  /** Enable USB Voltage detector
  */
    HAL_PWREx_EnableUSBVoltageDetector();
 81020de:	f007 fdcd 	bl	8109c7c <HAL_PWREx_EnableUSBVoltageDetector>

    __HAL_RCC_GPIOB_CLK_ENABLE();
 81020e2:	4b71      	ldr	r3, [pc, #452]	; (81022a8 <HAL_PCD_MspInit+0x234>)
 81020e4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 81020e8:	4a6f      	ldr	r2, [pc, #444]	; (81022a8 <HAL_PCD_MspInit+0x234>)
 81020ea:	f043 0302 	orr.w	r3, r3, #2
 81020ee:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 81020f2:	4b6d      	ldr	r3, [pc, #436]	; (81022a8 <HAL_PCD_MspInit+0x234>)
 81020f4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 81020f8:	f003 0302 	and.w	r3, r3, #2
 81020fc:	627b      	str	r3, [r7, #36]	; 0x24
 81020fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    __HAL_RCC_GPIOI_CLK_ENABLE();
 8102100:	4b69      	ldr	r3, [pc, #420]	; (81022a8 <HAL_PCD_MspInit+0x234>)
 8102102:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8102106:	4a68      	ldr	r2, [pc, #416]	; (81022a8 <HAL_PCD_MspInit+0x234>)
 8102108:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 810210c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8102110:	4b65      	ldr	r3, [pc, #404]	; (81022a8 <HAL_PCD_MspInit+0x234>)
 8102112:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8102116:	f403 7380 	and.w	r3, r3, #256	; 0x100
 810211a:	623b      	str	r3, [r7, #32]
 810211c:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 810211e:	4b62      	ldr	r3, [pc, #392]	; (81022a8 <HAL_PCD_MspInit+0x234>)
 8102120:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8102124:	4a60      	ldr	r2, [pc, #384]	; (81022a8 <HAL_PCD_MspInit+0x234>)
 8102126:	f043 0304 	orr.w	r3, r3, #4
 810212a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 810212e:	4b5e      	ldr	r3, [pc, #376]	; (81022a8 <HAL_PCD_MspInit+0x234>)
 8102130:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8102134:	f003 0304 	and.w	r3, r3, #4
 8102138:	61fb      	str	r3, [r7, #28]
 810213a:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOH_CLK_ENABLE();
 810213c:	4b5a      	ldr	r3, [pc, #360]	; (81022a8 <HAL_PCD_MspInit+0x234>)
 810213e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8102142:	4a59      	ldr	r2, [pc, #356]	; (81022a8 <HAL_PCD_MspInit+0x234>)
 8102144:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8102148:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 810214c:	4b56      	ldr	r3, [pc, #344]	; (81022a8 <HAL_PCD_MspInit+0x234>)
 810214e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8102152:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8102156:	61bb      	str	r3, [r7, #24]
 8102158:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 810215a:	4b53      	ldr	r3, [pc, #332]	; (81022a8 <HAL_PCD_MspInit+0x234>)
 810215c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8102160:	4a51      	ldr	r2, [pc, #324]	; (81022a8 <HAL_PCD_MspInit+0x234>)
 8102162:	f043 0301 	orr.w	r3, r3, #1
 8102166:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 810216a:	4b4f      	ldr	r3, [pc, #316]	; (81022a8 <HAL_PCD_MspInit+0x234>)
 810216c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8102170:	f003 0301 	and.w	r3, r3, #1
 8102174:	617b      	str	r3, [r7, #20]
 8102176:	697b      	ldr	r3, [r7, #20]
    PB12     ------> USB_OTG_HS_ULPI_D5
    PA3     ------> USB_OTG_HS_ULPI_D0
    PB0     ------> USB_OTG_HS_ULPI_D1
    PB13     ------> USB_OTG_HS_ULPI_D6
    */
    GPIO_InitStruct.Pin = ULPI_D7_Pin|ULPI_D3_Pin|ULPI_D4_Pin|ULPI_D2_Pin
 8102178:	f643 4323 	movw	r3, #15395	; 0x3c23
 810217c:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
                          |ULPI_D5_Pin|ULPI_D1_Pin|ULPI_D6_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8102180:	2302      	movs	r3, #2
 8102182:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8102186:	2300      	movs	r3, #0
 8102188:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 810218c:	2302      	movs	r3, #2
 810218e:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG2_HS;
 8102192:	230a      	movs	r3, #10
 8102194:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8102198:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 810219c:	4619      	mov	r1, r3
 810219e:	4843      	ldr	r0, [pc, #268]	; (81022ac <HAL_PCD_MspInit+0x238>)
 81021a0:	f007 f9da 	bl	8109558 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = ULPI_DIR_Pin;
 81021a4:	f44f 6300 	mov.w	r3, #2048	; 0x800
 81021a8:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 81021ac:	2302      	movs	r3, #2
 81021ae:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 81021b2:	2300      	movs	r3, #0
 81021b4:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 81021b8:	2302      	movs	r3, #2
 81021ba:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG2_HS;
 81021be:	230a      	movs	r3, #10
 81021c0:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
    HAL_GPIO_Init(ULPI_DIR_GPIO_Port, &GPIO_InitStruct);
 81021c4:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 81021c8:	4619      	mov	r1, r3
 81021ca:	4839      	ldr	r0, [pc, #228]	; (81022b0 <HAL_PCD_MspInit+0x23c>)
 81021cc:	f007 f9c4 	bl	8109558 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = ULPI_STP_Pin;
 81021d0:	2301      	movs	r3, #1
 81021d2:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 81021d6:	2302      	movs	r3, #2
 81021d8:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 81021dc:	2300      	movs	r3, #0
 81021de:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 81021e2:	2302      	movs	r3, #2
 81021e4:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG2_HS;
 81021e8:	230a      	movs	r3, #10
 81021ea:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
    HAL_GPIO_Init(ULPI_STP_GPIO_Port, &GPIO_InitStruct);
 81021ee:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 81021f2:	4619      	mov	r1, r3
 81021f4:	482f      	ldr	r0, [pc, #188]	; (81022b4 <HAL_PCD_MspInit+0x240>)
 81021f6:	f007 f9af 	bl	8109558 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = ULPI_NXT_Pin;
 81021fa:	2310      	movs	r3, #16
 81021fc:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8102200:	2302      	movs	r3, #2
 8102202:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8102206:	2300      	movs	r3, #0
 8102208:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 810220c:	2302      	movs	r3, #2
 810220e:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG2_HS;
 8102212:	230a      	movs	r3, #10
 8102214:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
    HAL_GPIO_Init(ULPI_NXT_GPIO_Port, &GPIO_InitStruct);
 8102218:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 810221c:	4619      	mov	r1, r3
 810221e:	4826      	ldr	r0, [pc, #152]	; (81022b8 <HAL_PCD_MspInit+0x244>)
 8102220:	f007 f99a 	bl	8109558 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = ULPI_CK_Pin|ULPI_D0_Pin;
 8102224:	2328      	movs	r3, #40	; 0x28
 8102226:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 810222a:	2302      	movs	r3, #2
 810222c:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8102230:	2300      	movs	r3, #0
 8102232:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8102236:	2302      	movs	r3, #2
 8102238:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG2_HS;
 810223c:	230a      	movs	r3, #10
 810223e:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8102242:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 8102246:	4619      	mov	r1, r3
 8102248:	481c      	ldr	r0, [pc, #112]	; (81022bc <HAL_PCD_MspInit+0x248>)
 810224a:	f007 f985 	bl	8109558 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_HS_CLK_ENABLE();
 810224e:	4b16      	ldr	r3, [pc, #88]	; (81022a8 <HAL_PCD_MspInit+0x234>)
 8102250:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8102254:	4a14      	ldr	r2, [pc, #80]	; (81022a8 <HAL_PCD_MspInit+0x234>)
 8102256:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 810225a:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 810225e:	4b12      	ldr	r3, [pc, #72]	; (81022a8 <HAL_PCD_MspInit+0x234>)
 8102260:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8102264:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8102268:	613b      	str	r3, [r7, #16]
 810226a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_USB_OTG_HS_ULPI_CLK_ENABLE();
 810226c:	4b0e      	ldr	r3, [pc, #56]	; (81022a8 <HAL_PCD_MspInit+0x234>)
 810226e:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8102272:	4a0d      	ldr	r2, [pc, #52]	; (81022a8 <HAL_PCD_MspInit+0x234>)
 8102274:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8102278:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 810227c:	4b0a      	ldr	r3, [pc, #40]	; (81022a8 <HAL_PCD_MspInit+0x234>)
 810227e:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8102282:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8102286:	60fb      	str	r3, [r7, #12]
 8102288:	68fb      	ldr	r3, [r7, #12]
    /* USB_OTG_HS interrupt Init */
    HAL_NVIC_SetPriority(OTG_HS_IRQn, 0, 0);
 810228a:	2200      	movs	r2, #0
 810228c:	2100      	movs	r1, #0
 810228e:	204d      	movs	r0, #77	; 0x4d
 8102290:	f006 fcf5 	bl	8108c7e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_HS_IRQn);
 8102294:	204d      	movs	r0, #77	; 0x4d
 8102296:	f006 fd0c 	bl	8108cb2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_HS_MspInit 1 */

  /* USER CODE END USB_OTG_HS_MspInit 1 */
  }

}
 810229a:	bf00      	nop
 810229c:	f507 7784 	add.w	r7, r7, #264	; 0x108
 81022a0:	46bd      	mov	sp, r7
 81022a2:	bd80      	pop	{r7, pc}
 81022a4:	40040000 	.word	0x40040000
 81022a8:	58024400 	.word	0x58024400
 81022ac:	58020400 	.word	0x58020400
 81022b0:	58022000 	.word	0x58022000
 81022b4:	58020800 	.word	0x58020800
 81022b8:	58021c00 	.word	0x58021c00
 81022bc:	58020000 	.word	0x58020000

081022c0 <HAL_FMC_MspInit>:

}

static uint32_t FMC_Initialized = 0;

static void HAL_FMC_MspInit(void){
 81022c0:	b580      	push	{r7, lr}
 81022c2:	b0ba      	sub	sp, #232	; 0xe8
 81022c4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FMC_MspInit 0 */

  /* USER CODE END FMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct ={0};
 81022c6:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 81022ca:	2200      	movs	r2, #0
 81022cc:	601a      	str	r2, [r3, #0]
 81022ce:	605a      	str	r2, [r3, #4]
 81022d0:	609a      	str	r2, [r3, #8]
 81022d2:	60da      	str	r2, [r3, #12]
 81022d4:	611a      	str	r2, [r3, #16]
  if (FMC_Initialized) {
 81022d6:	4b5c      	ldr	r3, [pc, #368]	; (8102448 <HAL_FMC_MspInit+0x188>)
 81022d8:	681b      	ldr	r3, [r3, #0]
 81022da:	2b00      	cmp	r3, #0
 81022dc:	f040 80b0 	bne.w	8102440 <HAL_FMC_MspInit+0x180>
    return;
  }
  FMC_Initialized = 1;
 81022e0:	4b59      	ldr	r3, [pc, #356]	; (8102448 <HAL_FMC_MspInit+0x188>)
 81022e2:	2201      	movs	r2, #1
 81022e4:	601a      	str	r2, [r3, #0]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 81022e6:	f107 0308 	add.w	r3, r7, #8
 81022ea:	22c8      	movs	r2, #200	; 0xc8
 81022ec:	2100      	movs	r1, #0
 81022ee:	4618      	mov	r0, r3
 81022f0:	f00f fd34 	bl	8111d5c <memset>

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_FMC;
 81022f4:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 81022f8:	f04f 0300 	mov.w	r3, #0
 81022fc:	e9c7 2302 	strd	r2, r3, [r7, #8]
    PeriphClkInitStruct.FmcClockSelection = RCC_FMCCLKSOURCE_D1HCLK;
 8102300:	2300      	movs	r3, #0
 8102302:	653b      	str	r3, [r7, #80]	; 0x50
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8102304:	f107 0308 	add.w	r3, r7, #8
 8102308:	4618      	mov	r0, r3
 810230a:	f007 ff59 	bl	810a1c0 <HAL_RCCEx_PeriphCLKConfig>
 810230e:	4603      	mov	r3, r0
 8102310:	2b00      	cmp	r3, #0
 8102312:	d001      	beq.n	8102318 <HAL_FMC_MspInit+0x58>
    {
      Error_Handler();
 8102314:	f7ff f847 	bl	81013a6 <Error_Handler>
    }

  /* Peripheral clock enable */
  __HAL_RCC_FMC_CLK_ENABLE();
 8102318:	4b4c      	ldr	r3, [pc, #304]	; (810244c <HAL_FMC_MspInit+0x18c>)
 810231a:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 810231e:	4a4b      	ldr	r2, [pc, #300]	; (810244c <HAL_FMC_MspInit+0x18c>)
 8102320:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8102324:	f8c2 30d4 	str.w	r3, [r2, #212]	; 0xd4
 8102328:	4b48      	ldr	r3, [pc, #288]	; (810244c <HAL_FMC_MspInit+0x18c>)
 810232a:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 810232e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8102332:	607b      	str	r3, [r7, #4]
 8102334:	687b      	ldr	r3, [r7, #4]
  PE7   ------> FMC_D4
  PE14   ------> FMC_D11
  PH7   ------> FMC_SDCKE1
  PD8   ------> FMC_D13
  */
  GPIO_InitStruct.Pin = FMC_D28_Pin|FMC_NBL3_Pin|FMC_NBL2_Pin|FMC_D25_Pin
 8102336:	f240 63ff 	movw	r3, #1791	; 0x6ff
 810233a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
                          |FMC_D24_Pin|FMC_D29_Pin|FMC_D26_Pin|FMC_D27_Pin
                          |FMC_D30_Pin|FMC_D31_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 810233e:	2302      	movs	r3, #2
 8102340:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8102344:	2300      	movs	r3, #0
 8102346:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 810234a:	2303      	movs	r3, #3
 810234c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8102350:	230c      	movs	r3, #12
 8102352:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8102356:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 810235a:	4619      	mov	r1, r3
 810235c:	483c      	ldr	r0, [pc, #240]	; (8102450 <HAL_FMC_MspInit+0x190>)
 810235e:	f007 f8fb 	bl	8109558 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = FMC_NBL1_Pin|FMC_NBL0_Pin|FMC_D7_Pin|FMC_D6_Pin
 8102362:	f64f 7383 	movw	r3, #65411	; 0xff83
 8102366:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
                          |FMC_D8_Pin|FMC_D9_Pin|FMC_D12_Pin|FMC_D5_Pin
                          |FMC_D10_Pin|FMC_D4_Pin|FMC_D11_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 810236a:	2302      	movs	r3, #2
 810236c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8102370:	2300      	movs	r3, #0
 8102372:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8102376:	2303      	movs	r3, #3
 8102378:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 810237c:	230c      	movs	r3, #12
 810237e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8102382:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8102386:	4619      	mov	r1, r3
 8102388:	4832      	ldr	r0, [pc, #200]	; (8102454 <HAL_FMC_MspInit+0x194>)
 810238a:	f007 f8e5 	bl	8109558 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = FMC_D23_Pin|FMC_D22_Pin|FMC_D21_Pin|FMC_SDNWE_Pin
 810238e:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 8102392:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
                          |FMC_D18_Pin|FMC_D19_Pin|FMC_D17_Pin|FMC_D20_Pin
                          |FMC_SDNE1_Pin|FMC_D16_Pin|FMC_SDCKE1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8102396:	2302      	movs	r3, #2
 8102398:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 810239c:	2300      	movs	r3, #0
 810239e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 81023a2:	2303      	movs	r3, #3
 81023a4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 81023a8:	230c      	movs	r3, #12
 81023aa:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 81023ae:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 81023b2:	4619      	mov	r1, r3
 81023b4:	4828      	ldr	r0, [pc, #160]	; (8102458 <HAL_FMC_MspInit+0x198>)
 81023b6:	f007 f8cf 	bl	8109558 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = FMC_SDCAS_Pin|FMC_SDCLK_Pin|FMC_BA0_Pin|FMC_A12_Pin
 81023ba:	f248 1317 	movw	r3, #33047	; 0x8117
 81023be:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
                          |FMC_A10_Pin|FMC_A11_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 81023c2:	2302      	movs	r3, #2
 81023c4:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 81023c8:	2300      	movs	r3, #0
 81023ca:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 81023ce:	2303      	movs	r3, #3
 81023d0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 81023d4:	230c      	movs	r3, #12
 81023d6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 81023da:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 81023de:	4619      	mov	r1, r3
 81023e0:	481e      	ldr	r0, [pc, #120]	; (810245c <HAL_FMC_MspInit+0x19c>)
 81023e2:	f007 f8b9 	bl	8109558 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = FMC_D2_Pin|FMC_D3_Pin|FMC_D1_Pin|FMC_D0_Pin
 81023e6:	f24c 7303 	movw	r3, #50947	; 0xc703
 81023ea:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
                          |FMC_D15_Pin|FMC_D14_Pin|FMC_D13_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 81023ee:	2302      	movs	r3, #2
 81023f0:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 81023f4:	2300      	movs	r3, #0
 81023f6:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 81023fa:	2303      	movs	r3, #3
 81023fc:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8102400:	230c      	movs	r3, #12
 8102402:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8102406:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 810240a:	4619      	mov	r1, r3
 810240c:	4814      	ldr	r0, [pc, #80]	; (8102460 <HAL_FMC_MspInit+0x1a0>)
 810240e:	f007 f8a3 	bl	8109558 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = FMC_A2_Pin|FMC_A1_Pin|FMC_A0_Pin|FMC_A3_Pin
 8102412:	f64f 033f 	movw	r3, #63551	; 0xf83f
 8102416:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
                          |FMC_A5_Pin|FMC_A4_Pin|FMC_A7_Pin|FMC_A8_Pin
                          |FMC_A6_Pin|FMC_A9_Pin|FMC_SDRAS_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 810241a:	2302      	movs	r3, #2
 810241c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8102420:	2300      	movs	r3, #0
 8102422:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8102426:	2303      	movs	r3, #3
 8102428:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 810242c:	230c      	movs	r3, #12
 810242e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8102432:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8102436:	4619      	mov	r1, r3
 8102438:	480a      	ldr	r0, [pc, #40]	; (8102464 <HAL_FMC_MspInit+0x1a4>)
 810243a:	f007 f88d 	bl	8109558 <HAL_GPIO_Init>
 810243e:	e000      	b.n	8102442 <HAL_FMC_MspInit+0x182>
    return;
 8102440:	bf00      	nop

  /* USER CODE BEGIN FMC_MspInit 1 */

  /* USER CODE END FMC_MspInit 1 */
}
 8102442:	37e8      	adds	r7, #232	; 0xe8
 8102444:	46bd      	mov	sp, r7
 8102446:	bd80      	pop	{r7, pc}
 8102448:	10000d08 	.word	0x10000d08
 810244c:	58024400 	.word	0x58024400
 8102450:	58022000 	.word	0x58022000
 8102454:	58021000 	.word	0x58021000
 8102458:	58021c00 	.word	0x58021c00
 810245c:	58021800 	.word	0x58021800
 8102460:	58020c00 	.word	0x58020c00
 8102464:	58021400 	.word	0x58021400

08102468 <HAL_SDRAM_MspInit>:

void HAL_SDRAM_MspInit(SDRAM_HandleTypeDef* hsdram){
 8102468:	b580      	push	{r7, lr}
 810246a:	b082      	sub	sp, #8
 810246c:	af00      	add	r7, sp, #0
 810246e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SDRAM_MspInit 0 */

  /* USER CODE END SDRAM_MspInit 0 */
  HAL_FMC_MspInit();
 8102470:	f7ff ff26 	bl	81022c0 <HAL_FMC_MspInit>
  /* USER CODE BEGIN SDRAM_MspInit 1 */

  /* USER CODE END SDRAM_MspInit 1 */
}
 8102474:	bf00      	nop
 8102476:	3708      	adds	r7, #8
 8102478:	46bd      	mov	sp, r7
 810247a:	bd80      	pop	{r7, pc}

0810247c <HAL_SAI_MspInit>:
}

static uint32_t SAI1_client =0;

void HAL_SAI_MspInit(SAI_HandleTypeDef* hsai)
{
 810247c:	b580      	push	{r7, lr}
 810247e:	b0bc      	sub	sp, #240	; 0xf0
 8102480:	af00      	add	r7, sp, #0
 8102482:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct;
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8102484:	f107 0310 	add.w	r3, r7, #16
 8102488:	22c8      	movs	r2, #200	; 0xc8
 810248a:	2100      	movs	r1, #0
 810248c:	4618      	mov	r0, r3
 810248e:	f00f fc65 	bl	8111d5c <memset>
/* SAI1 */
    if(hsai->Instance==SAI1_Block_A)
 8102492:	687b      	ldr	r3, [r7, #4]
 8102494:	681b      	ldr	r3, [r3, #0]
 8102496:	4a4f      	ldr	r2, [pc, #316]	; (81025d4 <HAL_SAI_MspInit+0x158>)
 8102498:	4293      	cmp	r3, r2
 810249a:	d153      	bne.n	8102544 <HAL_SAI_MspInit+0xc8>
    {
    /* Peripheral clock enable */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SAI1;
 810249c:	f44f 7280 	mov.w	r2, #256	; 0x100
 81024a0:	f04f 0300 	mov.w	r3, #0
 81024a4:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Sai1ClockSelection = RCC_SAI1CLKSOURCE_PLL;
 81024a8:	2300      	movs	r3, #0
 81024aa:	66fb      	str	r3, [r7, #108]	; 0x6c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 81024ac:	f107 0310 	add.w	r3, r7, #16
 81024b0:	4618      	mov	r0, r3
 81024b2:	f007 fe85 	bl	810a1c0 <HAL_RCCEx_PeriphCLKConfig>
 81024b6:	4603      	mov	r3, r0
 81024b8:	2b00      	cmp	r3, #0
 81024ba:	d001      	beq.n	81024c0 <HAL_SAI_MspInit+0x44>
    {
      Error_Handler();
 81024bc:	f7fe ff73 	bl	81013a6 <Error_Handler>
    }

    if (SAI1_client == 0)
 81024c0:	4b45      	ldr	r3, [pc, #276]	; (81025d8 <HAL_SAI_MspInit+0x15c>)
 81024c2:	681b      	ldr	r3, [r3, #0]
 81024c4:	2b00      	cmp	r3, #0
 81024c6:	d10e      	bne.n	81024e6 <HAL_SAI_MspInit+0x6a>
    {
       __HAL_RCC_SAI1_CLK_ENABLE();
 81024c8:	4b44      	ldr	r3, [pc, #272]	; (81025dc <HAL_SAI_MspInit+0x160>)
 81024ca:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 81024ce:	4a43      	ldr	r2, [pc, #268]	; (81025dc <HAL_SAI_MspInit+0x160>)
 81024d0:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 81024d4:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 81024d8:	4b40      	ldr	r3, [pc, #256]	; (81025dc <HAL_SAI_MspInit+0x160>)
 81024da:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 81024de:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 81024e2:	60fb      	str	r3, [r7, #12]
 81024e4:	68fb      	ldr	r3, [r7, #12]
    }
    SAI1_client ++;
 81024e6:	4b3c      	ldr	r3, [pc, #240]	; (81025d8 <HAL_SAI_MspInit+0x15c>)
 81024e8:	681b      	ldr	r3, [r3, #0]
 81024ea:	3301      	adds	r3, #1
 81024ec:	4a3a      	ldr	r2, [pc, #232]	; (81025d8 <HAL_SAI_MspInit+0x15c>)
 81024ee:	6013      	str	r3, [r2, #0]
    PE5     ------> SAI1_SCK_A
    PE4     ------> SAI1_FS_A
    PE6     ------> SAI1_SD_A
    PG7     ------> SAI1_MCLK_A
    */
    GPIO_InitStruct.Pin = SAI1_SCK_A_Pin|SAI1_FS_A_Pin|SAI1_SD_A_Pin;
 81024f0:	2370      	movs	r3, #112	; 0x70
 81024f2:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 81024f6:	2302      	movs	r3, #2
 81024f8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 81024fc:	2300      	movs	r3, #0
 81024fe:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8102502:	2300      	movs	r3, #0
 8102504:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF6_SAI1;
 8102508:	2306      	movs	r3, #6
 810250a:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 810250e:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8102512:	4619      	mov	r1, r3
 8102514:	4832      	ldr	r0, [pc, #200]	; (81025e0 <HAL_SAI_MspInit+0x164>)
 8102516:	f007 f81f 	bl	8109558 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = SAI1_MCLK_A_Pin;
 810251a:	2380      	movs	r3, #128	; 0x80
 810251c:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8102520:	2302      	movs	r3, #2
 8102522:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8102526:	2300      	movs	r3, #0
 8102528:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 810252c:	2300      	movs	r3, #0
 810252e:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF6_SAI1;
 8102532:	2306      	movs	r3, #6
 8102534:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(SAI1_MCLK_A_GPIO_Port, &GPIO_InitStruct);
 8102538:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 810253c:	4619      	mov	r1, r3
 810253e:	4829      	ldr	r0, [pc, #164]	; (81025e4 <HAL_SAI_MspInit+0x168>)
 8102540:	f007 f80a 	bl	8109558 <HAL_GPIO_Init>

    }
    if(hsai->Instance==SAI1_Block_B)
 8102544:	687b      	ldr	r3, [r7, #4]
 8102546:	681b      	ldr	r3, [r3, #0]
 8102548:	4a27      	ldr	r2, [pc, #156]	; (81025e8 <HAL_SAI_MspInit+0x16c>)
 810254a:	4293      	cmp	r3, r2
 810254c:	d13e      	bne.n	81025cc <HAL_SAI_MspInit+0x150>
    {
      /* Peripheral clock enable */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SAI1;
 810254e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8102552:	f04f 0300 	mov.w	r3, #0
 8102556:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Sai1ClockSelection = RCC_SAI1CLKSOURCE_PLL;
 810255a:	2300      	movs	r3, #0
 810255c:	66fb      	str	r3, [r7, #108]	; 0x6c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 810255e:	f107 0310 	add.w	r3, r7, #16
 8102562:	4618      	mov	r0, r3
 8102564:	f007 fe2c 	bl	810a1c0 <HAL_RCCEx_PeriphCLKConfig>
 8102568:	4603      	mov	r3, r0
 810256a:	2b00      	cmp	r3, #0
 810256c:	d001      	beq.n	8102572 <HAL_SAI_MspInit+0xf6>
    {
      Error_Handler();
 810256e:	f7fe ff1a 	bl	81013a6 <Error_Handler>
    }

      if (SAI1_client == 0)
 8102572:	4b19      	ldr	r3, [pc, #100]	; (81025d8 <HAL_SAI_MspInit+0x15c>)
 8102574:	681b      	ldr	r3, [r3, #0]
 8102576:	2b00      	cmp	r3, #0
 8102578:	d10e      	bne.n	8102598 <HAL_SAI_MspInit+0x11c>
      {
       __HAL_RCC_SAI1_CLK_ENABLE();
 810257a:	4b18      	ldr	r3, [pc, #96]	; (81025dc <HAL_SAI_MspInit+0x160>)
 810257c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8102580:	4a16      	ldr	r2, [pc, #88]	; (81025dc <HAL_SAI_MspInit+0x160>)
 8102582:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8102586:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 810258a:	4b14      	ldr	r3, [pc, #80]	; (81025dc <HAL_SAI_MspInit+0x160>)
 810258c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8102590:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8102594:	60bb      	str	r3, [r7, #8]
 8102596:	68bb      	ldr	r3, [r7, #8]
      }
    SAI1_client ++;
 8102598:	4b0f      	ldr	r3, [pc, #60]	; (81025d8 <HAL_SAI_MspInit+0x15c>)
 810259a:	681b      	ldr	r3, [r3, #0]
 810259c:	3301      	adds	r3, #1
 810259e:	4a0e      	ldr	r2, [pc, #56]	; (81025d8 <HAL_SAI_MspInit+0x15c>)
 81025a0:	6013      	str	r3, [r2, #0]

    /**SAI1_B_Block_B GPIO Configuration
    PE3     ------> SAI1_SD_B
    */
    GPIO_InitStruct.Pin = SAI1_SD_B_Pin;
 81025a2:	2308      	movs	r3, #8
 81025a4:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 81025a8:	2302      	movs	r3, #2
 81025aa:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 81025ae:	2300      	movs	r3, #0
 81025b0:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 81025b4:	2300      	movs	r3, #0
 81025b6:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF6_SAI1;
 81025ba:	2306      	movs	r3, #6
 81025bc:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(SAI1_SD_B_GPIO_Port, &GPIO_InitStruct);
 81025c0:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 81025c4:	4619      	mov	r1, r3
 81025c6:	4806      	ldr	r0, [pc, #24]	; (81025e0 <HAL_SAI_MspInit+0x164>)
 81025c8:	f006 ffc6 	bl	8109558 <HAL_GPIO_Init>

    }
}
 81025cc:	bf00      	nop
 81025ce:	37f0      	adds	r7, #240	; 0xf0
 81025d0:	46bd      	mov	sp, r7
 81025d2:	bd80      	pop	{r7, pc}
 81025d4:	40015804 	.word	0x40015804
 81025d8:	10000d0c 	.word	0x10000d0c
 81025dc:	58024400 	.word	0x58024400
 81025e0:	58021000 	.word	0x58021000
 81025e4:	58021800 	.word	0x58021800
 81025e8:	40015824 	.word	0x40015824

081025ec <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 81025ec:	b480      	push	{r7}
 81025ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 81025f0:	e7fe      	b.n	81025f0 <NMI_Handler+0x4>

081025f2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 81025f2:	b480      	push	{r7}
 81025f4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 81025f6:	e7fe      	b.n	81025f6 <HardFault_Handler+0x4>

081025f8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 81025f8:	b480      	push	{r7}
 81025fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 81025fc:	e7fe      	b.n	81025fc <MemManage_Handler+0x4>

081025fe <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 81025fe:	b480      	push	{r7}
 8102600:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8102602:	e7fe      	b.n	8102602 <BusFault_Handler+0x4>

08102604 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8102604:	b480      	push	{r7}
 8102606:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8102608:	e7fe      	b.n	8102608 <UsageFault_Handler+0x4>

0810260a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 810260a:	b480      	push	{r7}
 810260c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 810260e:	bf00      	nop
 8102610:	46bd      	mov	sp, r7
 8102612:	f85d 7b04 	ldr.w	r7, [sp], #4
 8102616:	4770      	bx	lr

08102618 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8102618:	b480      	push	{r7}
 810261a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 810261c:	bf00      	nop
 810261e:	46bd      	mov	sp, r7
 8102620:	f85d 7b04 	ldr.w	r7, [sp], #4
 8102624:	4770      	bx	lr

08102626 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8102626:	b480      	push	{r7}
 8102628:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 810262a:	bf00      	nop
 810262c:	46bd      	mov	sp, r7
 810262e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8102632:	4770      	bx	lr

08102634 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8102634:	b580      	push	{r7, lr}
 8102636:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8102638:	f004 ffdc 	bl	81075f4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 810263c:	bf00      	nop
 810263e:	bd80      	pop	{r7, pc}

08102640 <OTG_HS_IRQHandler>:

/**
  * @brief This function handles USB On The Go HS global interrupt.
  */
void OTG_HS_IRQHandler(void)
{
 8102640:	b580      	push	{r7, lr}
 8102642:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_HS_IRQn 0 */

	tud_int_handler(BOARD_TUD_RHPORT);
 8102644:	2000      	movs	r0, #0
 8102646:	f004 fc9f 	bl	8106f88 <dcd_int_handler>
	return;
 810264a:	bf00      	nop
  /* USER CODE END OTG_HS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_HS);
  /* USER CODE BEGIN OTG_HS_IRQn 1 */

  /* USER CODE END OTG_HS_IRQn 1 */
}
 810264c:	bd80      	pop	{r7, pc}
	...

08102650 <CEC_IRQHandler>:

/**
  * @brief This function handles HDMI-CEC global interrupt.
  */
void CEC_IRQHandler(void)
{
 8102650:	b580      	push	{r7, lr}
 8102652:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CEC_IRQn 0 */

  /* USER CODE END CEC_IRQn 0 */
  HAL_CEC_IRQHandler(&hcec);
 8102654:	4802      	ldr	r0, [pc, #8]	; (8102660 <CEC_IRQHandler+0x10>)
 8102656:	f006 f93b 	bl	81088d0 <HAL_CEC_IRQHandler>
  /* USER CODE BEGIN CEC_IRQn 1 */

  /* USER CODE END CEC_IRQn 1 */
}
 810265a:	bf00      	nop
 810265c:	bd80      	pop	{r7, pc}
 810265e:	bf00      	nop
 8102660:	100002c4 	.word	0x100002c4

08102664 <tud_descriptor_device_cb>:
};

// Invoked when received GET DEVICE DESCRIPTOR
// Application return pointer to descriptor
uint8_t const * tud_descriptor_device_cb(void)
{
 8102664:	b480      	push	{r7}
 8102666:	af00      	add	r7, sp, #0
  return (uint8_t const *) &desc_device;
 8102668:	4b02      	ldr	r3, [pc, #8]	; (8102674 <tud_descriptor_device_cb+0x10>)
}
 810266a:	4618      	mov	r0, r3
 810266c:	46bd      	mov	sp, r7
 810266e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8102672:	4770      	bx	lr
 8102674:	08111e1c 	.word	0x08111e1c

08102678 <tud_descriptor_configuration_cb>:

// Invoked when received GET CONFIGURATION DESCRIPTOR
// Application return pointer to descriptor
// Descriptor contents must exist long enough for transfer to complete
uint8_t const * tud_descriptor_configuration_cb(uint8_t index)
{
 8102678:	b480      	push	{r7}
 810267a:	b083      	sub	sp, #12
 810267c:	af00      	add	r7, sp, #0
 810267e:	4603      	mov	r3, r0
 8102680:	71fb      	strb	r3, [r7, #7]

#if TUD_OPT_HIGH_SPEED
  // Although we are highspeed, host may be fullspeed.
  return (tud_speed_get() == TUSB_SPEED_HIGH) ?  desc_hs_configuration : desc_fs_configuration;
#else
  return desc_fs_configuration;
 8102682:	4b03      	ldr	r3, [pc, #12]	; (8102690 <tud_descriptor_configuration_cb+0x18>)
#endif
}
 8102684:	4618      	mov	r0, r3
 8102686:	370c      	adds	r7, #12
 8102688:	46bd      	mov	sp, r7
 810268a:	f85d 7b04 	ldr.w	r7, [sp], #4
 810268e:	4770      	bx	lr
 8102690:	08111e30 	.word	0x08111e30

08102694 <tud_descriptor_string_cb>:

static uint16_t _desc_str[32 + 1];

// Invoked when received GET STRING DESCRIPTOR request
// Application return pointer to descriptor, whose contents must exist long enough for transfer to complete
uint16_t const *tud_descriptor_string_cb(uint8_t index, uint16_t langid) {
 8102694:	b580      	push	{r7, lr}
 8102696:	b086      	sub	sp, #24
 8102698:	af00      	add	r7, sp, #0
 810269a:	4603      	mov	r3, r0
 810269c:	460a      	mov	r2, r1
 810269e:	71fb      	strb	r3, [r7, #7]
 81026a0:	4613      	mov	r3, r2
 81026a2:	80bb      	strh	r3, [r7, #4]
  (void) langid;
  size_t chr_count;

  switch ( index ) {
 81026a4:	79fb      	ldrb	r3, [r7, #7]
 81026a6:	2b00      	cmp	r3, #0
 81026a8:	d002      	beq.n	81026b0 <tud_descriptor_string_cb+0x1c>
 81026aa:	2b03      	cmp	r3, #3
 81026ac:	d034      	beq.n	8102718 <tud_descriptor_string_cb+0x84>
 81026ae:	e008      	b.n	81026c2 <tud_descriptor_string_cb+0x2e>
    case STRID_LANGID:
      memcpy(&_desc_str[1], string_desc_arr[0], 2);
 81026b0:	4b22      	ldr	r3, [pc, #136]	; (810273c <tud_descriptor_string_cb+0xa8>)
 81026b2:	681b      	ldr	r3, [r3, #0]
 81026b4:	881b      	ldrh	r3, [r3, #0]
 81026b6:	b29a      	uxth	r2, r3
 81026b8:	4b21      	ldr	r3, [pc, #132]	; (8102740 <tud_descriptor_string_cb+0xac>)
 81026ba:	805a      	strh	r2, [r3, #2]
      chr_count = 1;
 81026bc:	2301      	movs	r3, #1
 81026be:	617b      	str	r3, [r7, #20]
      break;
 81026c0:	e02b      	b.n	810271a <tud_descriptor_string_cb+0x86>

    default:
      // Note: the 0xEE index string is a Microsoft OS 1.0 Descriptors.
      // https://docs.microsoft.com/en-us/windows-hardware/drivers/usbcon/microsoft-defined-usb-descriptors

      if ( !(index < sizeof(string_desc_arr) / sizeof(string_desc_arr[0])) ) return NULL;
 81026c2:	79fb      	ldrb	r3, [r7, #7]
 81026c4:	2b04      	cmp	r3, #4
 81026c6:	d901      	bls.n	81026cc <tud_descriptor_string_cb+0x38>
 81026c8:	2300      	movs	r3, #0
 81026ca:	e032      	b.n	8102732 <tud_descriptor_string_cb+0x9e>

      const char *str = string_desc_arr[index];
 81026cc:	79fb      	ldrb	r3, [r7, #7]
 81026ce:	4a1b      	ldr	r2, [pc, #108]	; (810273c <tud_descriptor_string_cb+0xa8>)
 81026d0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 81026d4:	60fb      	str	r3, [r7, #12]

      // Cap at max char
      chr_count = strlen(str);
 81026d6:	68f8      	ldr	r0, [r7, #12]
 81026d8:	f7fd fdfe 	bl	81002d8 <strlen>
 81026dc:	6178      	str	r0, [r7, #20]
      size_t const max_count = sizeof(_desc_str) / sizeof(_desc_str[0]) - 1; // -1 for string type
 81026de:	2320      	movs	r3, #32
 81026e0:	60bb      	str	r3, [r7, #8]
      if ( chr_count > max_count ) chr_count = max_count;
 81026e2:	697a      	ldr	r2, [r7, #20]
 81026e4:	68bb      	ldr	r3, [r7, #8]
 81026e6:	429a      	cmp	r2, r3
 81026e8:	d901      	bls.n	81026ee <tud_descriptor_string_cb+0x5a>
 81026ea:	68bb      	ldr	r3, [r7, #8]
 81026ec:	617b      	str	r3, [r7, #20]

      // Convert ASCII string into UTF-16
      for ( size_t i = 0; i < chr_count; i++ ) {
 81026ee:	2300      	movs	r3, #0
 81026f0:	613b      	str	r3, [r7, #16]
 81026f2:	e00c      	b.n	810270e <tud_descriptor_string_cb+0x7a>
        _desc_str[1 + i] = str[i];
 81026f4:	68fa      	ldr	r2, [r7, #12]
 81026f6:	693b      	ldr	r3, [r7, #16]
 81026f8:	4413      	add	r3, r2
 81026fa:	781a      	ldrb	r2, [r3, #0]
 81026fc:	693b      	ldr	r3, [r7, #16]
 81026fe:	3301      	adds	r3, #1
 8102700:	b291      	uxth	r1, r2
 8102702:	4a0f      	ldr	r2, [pc, #60]	; (8102740 <tud_descriptor_string_cb+0xac>)
 8102704:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
      for ( size_t i = 0; i < chr_count; i++ ) {
 8102708:	693b      	ldr	r3, [r7, #16]
 810270a:	3301      	adds	r3, #1
 810270c:	613b      	str	r3, [r7, #16]
 810270e:	693a      	ldr	r2, [r7, #16]
 8102710:	697b      	ldr	r3, [r7, #20]
 8102712:	429a      	cmp	r2, r3
 8102714:	d3ee      	bcc.n	81026f4 <tud_descriptor_string_cb+0x60>
      }
      break;
 8102716:	e000      	b.n	810271a <tud_descriptor_string_cb+0x86>
      break;
 8102718:	bf00      	nop
  }

  // first byte is length (including header), second byte is string type
  _desc_str[0] = (uint16_t) ((TUSB_DESC_STRING << 8) | (2 * chr_count + 2));
 810271a:	697b      	ldr	r3, [r7, #20]
 810271c:	b29b      	uxth	r3, r3
 810271e:	3301      	adds	r3, #1
 8102720:	b29b      	uxth	r3, r3
 8102722:	005b      	lsls	r3, r3, #1
 8102724:	b29b      	uxth	r3, r3
 8102726:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 810272a:	b29a      	uxth	r2, r3
 810272c:	4b04      	ldr	r3, [pc, #16]	; (8102740 <tud_descriptor_string_cb+0xac>)
 810272e:	801a      	strh	r2, [r3, #0]

  return _desc_str;
 8102730:	4b03      	ldr	r3, [pc, #12]	; (8102740 <tud_descriptor_string_cb+0xac>)
}
 8102732:	4618      	mov	r0, r3
 8102734:	3718      	adds	r7, #24
 8102736:	46bd      	mov	sp, r7
 8102738:	bd80      	pop	{r7, pc}
 810273a:	bf00      	nop
 810273c:	10000008 	.word	0x10000008
 8102740:	10000d10 	.word	0x10000d10

08102744 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8102744:	f8df d034 	ldr.w	sp, [pc, #52]	; 810277c <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8102748:	f7fd ff4c 	bl	81005e4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 810274c:	480c      	ldr	r0, [pc, #48]	; (8102780 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 810274e:	490d      	ldr	r1, [pc, #52]	; (8102784 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8102750:	4a0d      	ldr	r2, [pc, #52]	; (8102788 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8102752:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8102754:	e002      	b.n	810275c <LoopCopyDataInit>

08102756 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8102756:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8102758:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 810275a:	3304      	adds	r3, #4

0810275c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 810275c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 810275e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8102760:	d3f9      	bcc.n	8102756 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8102762:	4a0a      	ldr	r2, [pc, #40]	; (810278c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8102764:	4c0a      	ldr	r4, [pc, #40]	; (8102790 <LoopFillZerobss+0x22>)
  movs r3, #0
 8102766:	2300      	movs	r3, #0
  b LoopFillZerobss
 8102768:	e001      	b.n	810276e <LoopFillZerobss>

0810276a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 810276a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 810276c:	3204      	adds	r2, #4

0810276e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 810276e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8102770:	d3fb      	bcc.n	810276a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8102772:	f00f fafb 	bl	8111d6c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8102776:	f7fd ff61 	bl	810063c <main>
  bx  lr
 810277a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 810277c:	10048000 	.word	0x10048000
  ldr r0, =_sdata
 8102780:	10000000 	.word	0x10000000
  ldr r1, =_edata
 8102784:	10000038 	.word	0x10000038
  ldr r2, =_sidata
 8102788:	08112038 	.word	0x08112038
  ldr r2, =_sbss
 810278c:	100000f8 	.word	0x100000f8
  ldr r4, =_ebss
 8102790:	10001230 	.word	0x10001230

08102794 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8102794:	e7fe      	b.n	8102794 <ADC3_IRQHandler>

08102796 <_prep_out_transaction>:
// INTERNAL OBJECT & FUNCTION DECLARATION
//--------------------------------------------------------------------+
CFG_TUD_MEM_SECTION tu_static cdcd_interface_t _cdcd_itf[CFG_TUD_CDC];

static bool _prep_out_transaction (cdcd_interface_t* p_cdc)
{
 8102796:	b580      	push	{r7, lr}
 8102798:	b084      	sub	sp, #16
 810279a:	af00      	add	r7, sp, #0
 810279c:	6078      	str	r0, [r7, #4]
  uint8_t const rhport = 0;
 810279e:	2300      	movs	r3, #0
 81027a0:	73fb      	strb	r3, [r7, #15]
  uint16_t available = tu_fifo_remaining(&p_cdc->rx_ff);
 81027a2:	687b      	ldr	r3, [r7, #4]
 81027a4:	3310      	adds	r3, #16
 81027a6:	4618      	mov	r0, r3
 81027a8:	f001 f961 	bl	8103a6e <tu_fifo_remaining>
 81027ac:	4603      	mov	r3, r0
 81027ae:	81bb      	strh	r3, [r7, #12]

  // Prepare for incoming data but only allow what we can store in the ring buffer.
  // TODO Actually we can still carry out the transfer, keeping count of received bytes
  // and slowly move it to the FIFO when read().
  // This pre-check reduces endpoint claiming
  TU_VERIFY(available >= sizeof(p_cdc->epout_buf));
 81027b0:	89bb      	ldrh	r3, [r7, #12]
 81027b2:	2b3f      	cmp	r3, #63	; 0x3f
 81027b4:	d801      	bhi.n	81027ba <_prep_out_transaction+0x24>
 81027b6:	2300      	movs	r3, #0
 81027b8:	e02b      	b.n	8102812 <_prep_out_transaction+0x7c>

  // claim endpoint
  TU_VERIFY(usbd_edpt_claim(rhport, p_cdc->ep_out));
 81027ba:	687b      	ldr	r3, [r7, #4]
 81027bc:	78da      	ldrb	r2, [r3, #3]
 81027be:	7bfb      	ldrb	r3, [r7, #15]
 81027c0:	4611      	mov	r1, r2
 81027c2:	4618      	mov	r0, r3
 81027c4:	f002 fc9e 	bl	8105104 <usbd_edpt_claim>
 81027c8:	4603      	mov	r3, r0
 81027ca:	f083 0301 	eor.w	r3, r3, #1
 81027ce:	b2db      	uxtb	r3, r3
 81027d0:	2b00      	cmp	r3, #0
 81027d2:	d001      	beq.n	81027d8 <_prep_out_transaction+0x42>
 81027d4:	2300      	movs	r3, #0
 81027d6:	e01c      	b.n	8102812 <_prep_out_transaction+0x7c>

  // fifo can be changed before endpoint is claimed
  available = tu_fifo_remaining(&p_cdc->rx_ff);
 81027d8:	687b      	ldr	r3, [r7, #4]
 81027da:	3310      	adds	r3, #16
 81027dc:	4618      	mov	r0, r3
 81027de:	f001 f946 	bl	8103a6e <tu_fifo_remaining>
 81027e2:	4603      	mov	r3, r0
 81027e4:	81bb      	strh	r3, [r7, #12]

  if ( available >= sizeof(p_cdc->epout_buf) )
 81027e6:	89bb      	ldrh	r3, [r7, #12]
 81027e8:	2b3f      	cmp	r3, #63	; 0x3f
 81027ea:	d90a      	bls.n	8102802 <_prep_out_transaction+0x6c>
  {
    return usbd_edpt_xfer(rhport, p_cdc->ep_out, p_cdc->epout_buf, sizeof(p_cdc->epout_buf));
 81027ec:	687b      	ldr	r3, [r7, #4]
 81027ee:	78d9      	ldrb	r1, [r3, #3]
 81027f0:	687b      	ldr	r3, [r7, #4]
 81027f2:	f103 02a8 	add.w	r2, r3, #168	; 0xa8
 81027f6:	7bf8      	ldrb	r0, [r7, #15]
 81027f8:	2340      	movs	r3, #64	; 0x40
 81027fa:	f002 fcd7 	bl	81051ac <usbd_edpt_xfer>
 81027fe:	4603      	mov	r3, r0
 8102800:	e007      	b.n	8102812 <_prep_out_transaction+0x7c>
  }else
  {
    // Release endpoint since we don't make any transfer
    usbd_edpt_release(rhport, p_cdc->ep_out);
 8102802:	687b      	ldr	r3, [r7, #4]
 8102804:	78da      	ldrb	r2, [r3, #3]
 8102806:	7bfb      	ldrb	r3, [r7, #15]
 8102808:	4611      	mov	r1, r2
 810280a:	4618      	mov	r0, r3
 810280c:	f002 fca4 	bl	8105158 <usbd_edpt_release>

    return false;
 8102810:	2300      	movs	r3, #0
  }
}
 8102812:	4618      	mov	r0, r3
 8102814:	3710      	adds	r7, #16
 8102816:	46bd      	mov	sp, r7
 8102818:	bd80      	pop	{r7, pc}
	...

0810281c <tud_cdc_n_available>:

//--------------------------------------------------------------------+
// READ API
//--------------------------------------------------------------------+
uint32_t tud_cdc_n_available(uint8_t itf)
{
 810281c:	b580      	push	{r7, lr}
 810281e:	b082      	sub	sp, #8
 8102820:	af00      	add	r7, sp, #0
 8102822:	4603      	mov	r3, r0
 8102824:	71fb      	strb	r3, [r7, #7]
  return tu_fifo_count(&_cdcd_itf[itf].rx_ff);
 8102826:	79fb      	ldrb	r3, [r7, #7]
 8102828:	f44f 7294 	mov.w	r2, #296	; 0x128
 810282c:	fb02 f303 	mul.w	r3, r2, r3
 8102830:	3310      	adds	r3, #16
 8102832:	4a05      	ldr	r2, [pc, #20]	; (8102848 <tud_cdc_n_available+0x2c>)
 8102834:	4413      	add	r3, r2
 8102836:	4618      	mov	r0, r3
 8102838:	f001 f8a4 	bl	8103984 <tu_fifo_count>
 810283c:	4603      	mov	r3, r0
}
 810283e:	4618      	mov	r0, r3
 8102840:	3708      	adds	r7, #8
 8102842:	46bd      	mov	sp, r7
 8102844:	bd80      	pop	{r7, pc}
 8102846:	bf00      	nop
 8102848:	10000d54 	.word	0x10000d54

0810284c <tud_cdc_n_read>:

uint32_t tud_cdc_n_read(uint8_t itf, void* buffer, uint32_t bufsize)
{
 810284c:	b580      	push	{r7, lr}
 810284e:	b086      	sub	sp, #24
 8102850:	af00      	add	r7, sp, #0
 8102852:	4603      	mov	r3, r0
 8102854:	60b9      	str	r1, [r7, #8]
 8102856:	607a      	str	r2, [r7, #4]
 8102858:	73fb      	strb	r3, [r7, #15]
  cdcd_interface_t* p_cdc = &_cdcd_itf[itf];
 810285a:	7bfb      	ldrb	r3, [r7, #15]
 810285c:	f44f 7294 	mov.w	r2, #296	; 0x128
 8102860:	fb02 f303 	mul.w	r3, r2, r3
 8102864:	4a0e      	ldr	r2, [pc, #56]	; (81028a0 <tud_cdc_n_read+0x54>)
 8102866:	4413      	add	r3, r2
 8102868:	617b      	str	r3, [r7, #20]
  uint32_t num_read = tu_fifo_read_n(&p_cdc->rx_ff, buffer, (uint16_t) TU_MIN(bufsize, UINT16_MAX));
 810286a:	697b      	ldr	r3, [r7, #20]
 810286c:	f103 0010 	add.w	r0, r3, #16
 8102870:	687b      	ldr	r3, [r7, #4]
 8102872:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8102876:	4293      	cmp	r3, r2
 8102878:	d802      	bhi.n	8102880 <tud_cdc_n_read+0x34>
 810287a:	687b      	ldr	r3, [r7, #4]
 810287c:	b29b      	uxth	r3, r3
 810287e:	e001      	b.n	8102884 <tud_cdc_n_read+0x38>
 8102880:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8102884:	461a      	mov	r2, r3
 8102886:	68b9      	ldr	r1, [r7, #8]
 8102888:	f001 f94d 	bl	8103b26 <tu_fifo_read_n>
 810288c:	4603      	mov	r3, r0
 810288e:	613b      	str	r3, [r7, #16]
  _prep_out_transaction(p_cdc);
 8102890:	6978      	ldr	r0, [r7, #20]
 8102892:	f7ff ff80 	bl	8102796 <_prep_out_transaction>
  return num_read;
 8102896:	693b      	ldr	r3, [r7, #16]
}
 8102898:	4618      	mov	r0, r3
 810289a:	3718      	adds	r7, #24
 810289c:	46bd      	mov	sp, r7
 810289e:	bd80      	pop	{r7, pc}
 81028a0:	10000d54 	.word	0x10000d54

081028a4 <tud_cdc_n_write>:

//--------------------------------------------------------------------+
// WRITE API
//--------------------------------------------------------------------+
uint32_t tud_cdc_n_write(uint8_t itf, void const* buffer, uint32_t bufsize)
{
 81028a4:	b580      	push	{r7, lr}
 81028a6:	b086      	sub	sp, #24
 81028a8:	af00      	add	r7, sp, #0
 81028aa:	4603      	mov	r3, r0
 81028ac:	60b9      	str	r1, [r7, #8]
 81028ae:	607a      	str	r2, [r7, #4]
 81028b0:	73fb      	strb	r3, [r7, #15]
  cdcd_interface_t* p_cdc = &_cdcd_itf[itf];
 81028b2:	7bfb      	ldrb	r3, [r7, #15]
 81028b4:	f44f 7294 	mov.w	r2, #296	; 0x128
 81028b8:	fb02 f303 	mul.w	r3, r2, r3
 81028bc:	4a13      	ldr	r2, [pc, #76]	; (810290c <tud_cdc_n_write+0x68>)
 81028be:	4413      	add	r3, r2
 81028c0:	617b      	str	r3, [r7, #20]
  uint16_t ret = tu_fifo_write_n(&p_cdc->tx_ff, buffer, (uint16_t) TU_MIN(bufsize, UINT16_MAX));
 81028c2:	697b      	ldr	r3, [r7, #20]
 81028c4:	f103 001c 	add.w	r0, r3, #28
 81028c8:	687b      	ldr	r3, [r7, #4]
 81028ca:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 81028ce:	4293      	cmp	r3, r2
 81028d0:	d802      	bhi.n	81028d8 <tud_cdc_n_write+0x34>
 81028d2:	687b      	ldr	r3, [r7, #4]
 81028d4:	b29b      	uxth	r3, r3
 81028d6:	e001      	b.n	81028dc <tud_cdc_n_write+0x38>
 81028d8:	f64f 73ff 	movw	r3, #65535	; 0xffff
 81028dc:	461a      	mov	r2, r3
 81028de:	68b9      	ldr	r1, [r7, #8]
 81028e0:	f001 f988 	bl	8103bf4 <tu_fifo_write_n>
 81028e4:	4603      	mov	r3, r0
 81028e6:	827b      	strh	r3, [r7, #18]

  // flush if queue more than packet size
  // may need to suppress -Wunreachable-code since most of the time CFG_TUD_CDC_TX_BUFSIZE < BULK_PACKET_SIZE
  if ( (tu_fifo_count(&p_cdc->tx_ff) >= BULK_PACKET_SIZE) || ((CFG_TUD_CDC_TX_BUFSIZE < BULK_PACKET_SIZE) && tu_fifo_full(&p_cdc->tx_ff)) )
 81028e8:	697b      	ldr	r3, [r7, #20]
 81028ea:	331c      	adds	r3, #28
 81028ec:	4618      	mov	r0, r3
 81028ee:	f001 f849 	bl	8103984 <tu_fifo_count>
 81028f2:	4603      	mov	r3, r0
 81028f4:	2b3f      	cmp	r3, #63	; 0x3f
 81028f6:	d903      	bls.n	8102900 <tud_cdc_n_write+0x5c>
  {
    tud_cdc_n_write_flush(itf);
 81028f8:	7bfb      	ldrb	r3, [r7, #15]
 81028fa:	4618      	mov	r0, r3
 81028fc:	f000 f808 	bl	8102910 <tud_cdc_n_write_flush>
  }

  return ret;
 8102900:	8a7b      	ldrh	r3, [r7, #18]
}
 8102902:	4618      	mov	r0, r3
 8102904:	3718      	adds	r7, #24
 8102906:	46bd      	mov	sp, r7
 8102908:	bd80      	pop	{r7, pc}
 810290a:	bf00      	nop
 810290c:	10000d54 	.word	0x10000d54

08102910 <tud_cdc_n_write_flush>:

uint32_t tud_cdc_n_write_flush (uint8_t itf)
{
 8102910:	b580      	push	{r7, lr}
 8102912:	b086      	sub	sp, #24
 8102914:	af00      	add	r7, sp, #0
 8102916:	4603      	mov	r3, r0
 8102918:	71fb      	strb	r3, [r7, #7]
  cdcd_interface_t* p_cdc = &_cdcd_itf[itf];
 810291a:	79fb      	ldrb	r3, [r7, #7]
 810291c:	f44f 7294 	mov.w	r2, #296	; 0x128
 8102920:	fb02 f303 	mul.w	r3, r2, r3
 8102924:	4a36      	ldr	r2, [pc, #216]	; (8102a00 <tud_cdc_n_write_flush+0xf0>)
 8102926:	4413      	add	r3, r2
 8102928:	617b      	str	r3, [r7, #20]
bool tud_suspended(void);

// Check if device is ready to transfer
TU_ATTR_ALWAYS_INLINE static inline
bool tud_ready(void) {
  return tud_mounted() && !tud_suspended();
 810292a:	f001 f9b9 	bl	8103ca0 <tud_mounted>
 810292e:	4603      	mov	r3, r0
 8102930:	2b00      	cmp	r3, #0
 8102932:	d009      	beq.n	8102948 <tud_cdc_n_write_flush+0x38>
 8102934:	f001 f9c6 	bl	8103cc4 <tud_suspended>
 8102938:	4603      	mov	r3, r0
 810293a:	f083 0301 	eor.w	r3, r3, #1
 810293e:	b2db      	uxtb	r3, r3
 8102940:	2b00      	cmp	r3, #0
 8102942:	d001      	beq.n	8102948 <tud_cdc_n_write_flush+0x38>
 8102944:	2301      	movs	r3, #1
 8102946:	e000      	b.n	810294a <tud_cdc_n_write_flush+0x3a>
 8102948:	2300      	movs	r3, #0
 810294a:	f003 0301 	and.w	r3, r3, #1
 810294e:	b2db      	uxtb	r3, r3

  // Skip if usb is not ready yet
  TU_VERIFY( tud_ready(), 0 );
 8102950:	f083 0301 	eor.w	r3, r3, #1
 8102954:	b2db      	uxtb	r3, r3
 8102956:	2b00      	cmp	r3, #0
 8102958:	d001      	beq.n	810295e <tud_cdc_n_write_flush+0x4e>
 810295a:	2300      	movs	r3, #0
 810295c:	e04c      	b.n	81029f8 <tud_cdc_n_write_flush+0xe8>

  // No data to send
  if ( !tu_fifo_count(&p_cdc->tx_ff) ) return 0;
 810295e:	697b      	ldr	r3, [r7, #20]
 8102960:	331c      	adds	r3, #28
 8102962:	4618      	mov	r0, r3
 8102964:	f001 f80e 	bl	8103984 <tu_fifo_count>
 8102968:	4603      	mov	r3, r0
 810296a:	2b00      	cmp	r3, #0
 810296c:	d101      	bne.n	8102972 <tud_cdc_n_write_flush+0x62>
 810296e:	2300      	movs	r3, #0
 8102970:	e042      	b.n	81029f8 <tud_cdc_n_write_flush+0xe8>

  uint8_t const rhport = 0;
 8102972:	2300      	movs	r3, #0
 8102974:	74fb      	strb	r3, [r7, #19]

  // Claim the endpoint
  TU_VERIFY( usbd_edpt_claim(rhport, p_cdc->ep_in), 0 );
 8102976:	697b      	ldr	r3, [r7, #20]
 8102978:	789a      	ldrb	r2, [r3, #2]
 810297a:	7cfb      	ldrb	r3, [r7, #19]
 810297c:	4611      	mov	r1, r2
 810297e:	4618      	mov	r0, r3
 8102980:	f002 fbc0 	bl	8105104 <usbd_edpt_claim>
 8102984:	4603      	mov	r3, r0
 8102986:	f083 0301 	eor.w	r3, r3, #1
 810298a:	b2db      	uxtb	r3, r3
 810298c:	2b00      	cmp	r3, #0
 810298e:	d001      	beq.n	8102994 <tud_cdc_n_write_flush+0x84>
 8102990:	2300      	movs	r3, #0
 8102992:	e031      	b.n	81029f8 <tud_cdc_n_write_flush+0xe8>

  // Pull data from FIFO
  uint16_t const count = tu_fifo_read_n(&p_cdc->tx_ff, p_cdc->epin_buf, sizeof(p_cdc->epin_buf));
 8102994:	697b      	ldr	r3, [r7, #20]
 8102996:	f103 001c 	add.w	r0, r3, #28
 810299a:	697b      	ldr	r3, [r7, #20]
 810299c:	33e8      	adds	r3, #232	; 0xe8
 810299e:	2240      	movs	r2, #64	; 0x40
 81029a0:	4619      	mov	r1, r3
 81029a2:	f001 f8c0 	bl	8103b26 <tu_fifo_read_n>
 81029a6:	4603      	mov	r3, r0
 81029a8:	823b      	strh	r3, [r7, #16]

  if ( count )
 81029aa:	8a3b      	ldrh	r3, [r7, #16]
 81029ac:	2b00      	cmp	r3, #0
 81029ae:	d01b      	beq.n	81029e8 <tud_cdc_n_write_flush+0xd8>
  {
    TU_ASSERT( usbd_edpt_xfer(rhport, p_cdc->ep_in, p_cdc->epin_buf, count), 0 );
 81029b0:	697b      	ldr	r3, [r7, #20]
 81029b2:	7899      	ldrb	r1, [r3, #2]
 81029b4:	697b      	ldr	r3, [r7, #20]
 81029b6:	f103 02e8 	add.w	r2, r3, #232	; 0xe8
 81029ba:	8a3b      	ldrh	r3, [r7, #16]
 81029bc:	7cf8      	ldrb	r0, [r7, #19]
 81029be:	f002 fbf5 	bl	81051ac <usbd_edpt_xfer>
 81029c2:	4603      	mov	r3, r0
 81029c4:	f083 0301 	eor.w	r3, r3, #1
 81029c8:	b2db      	uxtb	r3, r3
 81029ca:	2b00      	cmp	r3, #0
 81029cc:	d00a      	beq.n	81029e4 <tud_cdc_n_write_flush+0xd4>
 81029ce:	4b0d      	ldr	r3, [pc, #52]	; (8102a04 <tud_cdc_n_write_flush+0xf4>)
 81029d0:	60fb      	str	r3, [r7, #12]
 81029d2:	68fb      	ldr	r3, [r7, #12]
 81029d4:	681b      	ldr	r3, [r3, #0]
 81029d6:	f003 0301 	and.w	r3, r3, #1
 81029da:	2b00      	cmp	r3, #0
 81029dc:	d000      	beq.n	81029e0 <tud_cdc_n_write_flush+0xd0>
 81029de:	be00      	bkpt	0x0000
 81029e0:	2300      	movs	r3, #0
 81029e2:	e009      	b.n	81029f8 <tud_cdc_n_write_flush+0xe8>
    return count;
 81029e4:	8a3b      	ldrh	r3, [r7, #16]
 81029e6:	e007      	b.n	81029f8 <tud_cdc_n_write_flush+0xe8>
  }else
  {
    // Release endpoint since we don't make any transfer
    // Note: data is dropped if terminal is not connected
    usbd_edpt_release(rhport, p_cdc->ep_in);
 81029e8:	697b      	ldr	r3, [r7, #20]
 81029ea:	789a      	ldrb	r2, [r3, #2]
 81029ec:	7cfb      	ldrb	r3, [r7, #19]
 81029ee:	4611      	mov	r1, r2
 81029f0:	4618      	mov	r0, r3
 81029f2:	f002 fbb1 	bl	8105158 <usbd_edpt_release>
    return 0;
 81029f6:	2300      	movs	r3, #0
  }
}
 81029f8:	4618      	mov	r0, r3
 81029fa:	3718      	adds	r7, #24
 81029fc:	46bd      	mov	sp, r7
 81029fe:	bd80      	pop	{r7, pc}
 8102a00:	10000d54 	.word	0x10000d54
 8102a04:	e000edf0 	.word	0xe000edf0

08102a08 <cdcd_init>:

//--------------------------------------------------------------------+
// USBD Driver API
//--------------------------------------------------------------------+
void cdcd_init(void)
{
 8102a08:	b580      	push	{r7, lr}
 8102a0a:	b084      	sub	sp, #16
 8102a0c:	af02      	add	r7, sp, #8
  tu_memclr(_cdcd_itf, sizeof(_cdcd_itf));
 8102a0e:	f44f 7214 	mov.w	r2, #592	; 0x250
 8102a12:	2100      	movs	r1, #0
 8102a14:	4820      	ldr	r0, [pc, #128]	; (8102a98 <cdcd_init+0x90>)
 8102a16:	f00f f9a1 	bl	8111d5c <memset>

  for(uint8_t i=0; i<CFG_TUD_CDC; i++)
 8102a1a:	2300      	movs	r3, #0
 8102a1c:	71fb      	strb	r3, [r7, #7]
 8102a1e:	e032      	b.n	8102a86 <cdcd_init+0x7e>
  {
    cdcd_interface_t* p_cdc = &_cdcd_itf[i];
 8102a20:	79fb      	ldrb	r3, [r7, #7]
 8102a22:	f44f 7294 	mov.w	r2, #296	; 0x128
 8102a26:	fb02 f303 	mul.w	r3, r2, r3
 8102a2a:	4a1b      	ldr	r2, [pc, #108]	; (8102a98 <cdcd_init+0x90>)
 8102a2c:	4413      	add	r3, r2
 8102a2e:	603b      	str	r3, [r7, #0]

    p_cdc->wanted_char = (char) -1;
 8102a30:	683b      	ldr	r3, [r7, #0]
 8102a32:	22ff      	movs	r2, #255	; 0xff
 8102a34:	715a      	strb	r2, [r3, #5]

    // default line coding is : stop bit = 1, parity = none, data bits = 8
    p_cdc->line_coding.bit_rate  = 115200;
 8102a36:	683b      	ldr	r3, [r7, #0]
 8102a38:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8102a3c:	609a      	str	r2, [r3, #8]
    p_cdc->line_coding.stop_bits = 0;
 8102a3e:	683b      	ldr	r3, [r7, #0]
 8102a40:	2200      	movs	r2, #0
 8102a42:	731a      	strb	r2, [r3, #12]
    p_cdc->line_coding.parity    = 0;
 8102a44:	683b      	ldr	r3, [r7, #0]
 8102a46:	2200      	movs	r2, #0
 8102a48:	735a      	strb	r2, [r3, #13]
    p_cdc->line_coding.data_bits = 8;
 8102a4a:	683b      	ldr	r3, [r7, #0]
 8102a4c:	2208      	movs	r2, #8
 8102a4e:	739a      	strb	r2, [r3, #14]

    // Config RX fifo
    tu_fifo_config(&p_cdc->rx_ff, p_cdc->rx_ff_buf, TU_ARRAY_SIZE(p_cdc->rx_ff_buf), 1, false);
 8102a50:	683b      	ldr	r3, [r7, #0]
 8102a52:	f103 0010 	add.w	r0, r3, #16
 8102a56:	683b      	ldr	r3, [r7, #0]
 8102a58:	f103 0128 	add.w	r1, r3, #40	; 0x28
 8102a5c:	2300      	movs	r3, #0
 8102a5e:	9300      	str	r3, [sp, #0]
 8102a60:	2301      	movs	r3, #1
 8102a62:	2240      	movs	r2, #64	; 0x40
 8102a64:	f000 fafc 	bl	8103060 <tu_fifo_config>

    // Config TX fifo as overwritable at initialization and will be changed to non-overwritable
    // if terminal supports DTR bit. Without DTR we do not know if data is actually polled by terminal.
    // In this way, the most current data is prioritized.
    tu_fifo_config(&p_cdc->tx_ff, p_cdc->tx_ff_buf, TU_ARRAY_SIZE(p_cdc->tx_ff_buf), 1, true);
 8102a68:	683b      	ldr	r3, [r7, #0]
 8102a6a:	f103 001c 	add.w	r0, r3, #28
 8102a6e:	683b      	ldr	r3, [r7, #0]
 8102a70:	f103 0168 	add.w	r1, r3, #104	; 0x68
 8102a74:	2301      	movs	r3, #1
 8102a76:	9300      	str	r3, [sp, #0]
 8102a78:	2301      	movs	r3, #1
 8102a7a:	2240      	movs	r2, #64	; 0x40
 8102a7c:	f000 faf0 	bl	8103060 <tu_fifo_config>
  for(uint8_t i=0; i<CFG_TUD_CDC; i++)
 8102a80:	79fb      	ldrb	r3, [r7, #7]
 8102a82:	3301      	adds	r3, #1
 8102a84:	71fb      	strb	r3, [r7, #7]
 8102a86:	79fb      	ldrb	r3, [r7, #7]
 8102a88:	2b01      	cmp	r3, #1
 8102a8a:	d9c9      	bls.n	8102a20 <cdcd_init+0x18>

    tu_fifo_config_mutex(&p_cdc->rx_ff, NULL, osal_mutex_create(&p_cdc->rx_ff_mutex));
    tu_fifo_config_mutex(&p_cdc->tx_ff, osal_mutex_create(&p_cdc->tx_ff_mutex), NULL);
  }
}
 8102a8c:	bf00      	nop
 8102a8e:	bf00      	nop
 8102a90:	3708      	adds	r7, #8
 8102a92:	46bd      	mov	sp, r7
 8102a94:	bd80      	pop	{r7, pc}
 8102a96:	bf00      	nop
 8102a98:	10000d54 	.word	0x10000d54

08102a9c <cdcd_reset>:

void cdcd_reset(uint8_t rhport)
{
 8102a9c:	b580      	push	{r7, lr}
 8102a9e:	b084      	sub	sp, #16
 8102aa0:	af00      	add	r7, sp, #0
 8102aa2:	4603      	mov	r3, r0
 8102aa4:	71fb      	strb	r3, [r7, #7]
  (void) rhport;

  for(uint8_t i=0; i<CFG_TUD_CDC; i++)
 8102aa6:	2300      	movs	r3, #0
 8102aa8:	73fb      	strb	r3, [r7, #15]
 8102aaa:	e01f      	b.n	8102aec <cdcd_reset+0x50>
  {
    cdcd_interface_t* p_cdc = &_cdcd_itf[i];
 8102aac:	7bfb      	ldrb	r3, [r7, #15]
 8102aae:	f44f 7294 	mov.w	r2, #296	; 0x128
 8102ab2:	fb02 f303 	mul.w	r3, r2, r3
 8102ab6:	4a11      	ldr	r2, [pc, #68]	; (8102afc <cdcd_reset+0x60>)
 8102ab8:	4413      	add	r3, r2
 8102aba:	60bb      	str	r3, [r7, #8]

    tu_memclr(p_cdc, ITF_MEM_RESET_SIZE);
 8102abc:	2205      	movs	r2, #5
 8102abe:	2100      	movs	r1, #0
 8102ac0:	68b8      	ldr	r0, [r7, #8]
 8102ac2:	f00f f94b 	bl	8111d5c <memset>
    tu_fifo_clear(&p_cdc->rx_ff);
 8102ac6:	68bb      	ldr	r3, [r7, #8]
 8102ac8:	3310      	adds	r3, #16
 8102aca:	4618      	mov	r0, r3
 8102acc:	f001 f8b6 	bl	8103c3c <tu_fifo_clear>
    tu_fifo_clear(&p_cdc->tx_ff);
 8102ad0:	68bb      	ldr	r3, [r7, #8]
 8102ad2:	331c      	adds	r3, #28
 8102ad4:	4618      	mov	r0, r3
 8102ad6:	f001 f8b1 	bl	8103c3c <tu_fifo_clear>
    tu_fifo_set_overwritable(&p_cdc->tx_ff, true);
 8102ada:	68bb      	ldr	r3, [r7, #8]
 8102adc:	331c      	adds	r3, #28
 8102ade:	2101      	movs	r1, #1
 8102ae0:	4618      	mov	r0, r3
 8102ae2:	f001 f8bc 	bl	8103c5e <tu_fifo_set_overwritable>
  for(uint8_t i=0; i<CFG_TUD_CDC; i++)
 8102ae6:	7bfb      	ldrb	r3, [r7, #15]
 8102ae8:	3301      	adds	r3, #1
 8102aea:	73fb      	strb	r3, [r7, #15]
 8102aec:	7bfb      	ldrb	r3, [r7, #15]
 8102aee:	2b01      	cmp	r3, #1
 8102af0:	d9dc      	bls.n	8102aac <cdcd_reset+0x10>
  }
}
 8102af2:	bf00      	nop
 8102af4:	bf00      	nop
 8102af6:	3710      	adds	r7, #16
 8102af8:	46bd      	mov	sp, r7
 8102afa:	bd80      	pop	{r7, pc}
 8102afc:	10000d54 	.word	0x10000d54

08102b00 <cdcd_open>:

uint16_t cdcd_open(uint8_t rhport, tusb_desc_interface_t const * itf_desc, uint16_t max_len)
{
 8102b00:	b580      	push	{r7, lr}
 8102b02:	b09a      	sub	sp, #104	; 0x68
 8102b04:	af02      	add	r7, sp, #8
 8102b06:	4603      	mov	r3, r0
 8102b08:	6039      	str	r1, [r7, #0]
 8102b0a:	71fb      	strb	r3, [r7, #7]
 8102b0c:	4613      	mov	r3, r2
 8102b0e:	80bb      	strh	r3, [r7, #4]
  // Only support ACM subclass
  TU_VERIFY( TUSB_CLASS_CDC                           == itf_desc->bInterfaceClass &&
 8102b10:	683b      	ldr	r3, [r7, #0]
 8102b12:	795b      	ldrb	r3, [r3, #5]
 8102b14:	2b02      	cmp	r3, #2
 8102b16:	d103      	bne.n	8102b20 <cdcd_open+0x20>
 8102b18:	683b      	ldr	r3, [r7, #0]
 8102b1a:	799b      	ldrb	r3, [r3, #6]
 8102b1c:	2b02      	cmp	r3, #2
 8102b1e:	d001      	beq.n	8102b24 <cdcd_open+0x24>
 8102b20:	2300      	movs	r3, #0
 8102b22:	e0e1      	b.n	8102ce8 <cdcd_open+0x1e8>
             CDC_COMM_SUBCLASS_ABSTRACT_CONTROL_MODEL == itf_desc->bInterfaceSubClass, 0);

  // Find available interface
  cdcd_interface_t * p_cdc = NULL;
 8102b24:	2300      	movs	r3, #0
 8102b26:	65fb      	str	r3, [r7, #92]	; 0x5c
  for(uint8_t cdc_id=0; cdc_id<CFG_TUD_CDC; cdc_id++)
 8102b28:	2300      	movs	r3, #0
 8102b2a:	f887 305b 	strb.w	r3, [r7, #91]	; 0x5b
 8102b2e:	e01a      	b.n	8102b66 <cdcd_open+0x66>
  {
    if ( _cdcd_itf[cdc_id].ep_in == 0 )
 8102b30:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
 8102b34:	4a6e      	ldr	r2, [pc, #440]	; (8102cf0 <cdcd_open+0x1f0>)
 8102b36:	f44f 7194 	mov.w	r1, #296	; 0x128
 8102b3a:	fb01 f303 	mul.w	r3, r1, r3
 8102b3e:	4413      	add	r3, r2
 8102b40:	3302      	adds	r3, #2
 8102b42:	781b      	ldrb	r3, [r3, #0]
 8102b44:	2b00      	cmp	r3, #0
 8102b46:	d109      	bne.n	8102b5c <cdcd_open+0x5c>
    {
      p_cdc = &_cdcd_itf[cdc_id];
 8102b48:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
 8102b4c:	f44f 7294 	mov.w	r2, #296	; 0x128
 8102b50:	fb02 f303 	mul.w	r3, r2, r3
 8102b54:	4a66      	ldr	r2, [pc, #408]	; (8102cf0 <cdcd_open+0x1f0>)
 8102b56:	4413      	add	r3, r2
 8102b58:	65fb      	str	r3, [r7, #92]	; 0x5c
      break;
 8102b5a:	e008      	b.n	8102b6e <cdcd_open+0x6e>
  for(uint8_t cdc_id=0; cdc_id<CFG_TUD_CDC; cdc_id++)
 8102b5c:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
 8102b60:	3301      	adds	r3, #1
 8102b62:	f887 305b 	strb.w	r3, [r7, #91]	; 0x5b
 8102b66:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
 8102b6a:	2b01      	cmp	r3, #1
 8102b6c:	d9e0      	bls.n	8102b30 <cdcd_open+0x30>
    }
  }
  TU_ASSERT(p_cdc, 0);
 8102b6e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8102b70:	2b00      	cmp	r3, #0
 8102b72:	d10a      	bne.n	8102b8a <cdcd_open+0x8a>
 8102b74:	4b5f      	ldr	r3, [pc, #380]	; (8102cf4 <cdcd_open+0x1f4>)
 8102b76:	647b      	str	r3, [r7, #68]	; 0x44
 8102b78:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8102b7a:	681b      	ldr	r3, [r3, #0]
 8102b7c:	f003 0301 	and.w	r3, r3, #1
 8102b80:	2b00      	cmp	r3, #0
 8102b82:	d000      	beq.n	8102b86 <cdcd_open+0x86>
 8102b84:	be00      	bkpt	0x0000
 8102b86:	2300      	movs	r3, #0
 8102b88:	e0ae      	b.n	8102ce8 <cdcd_open+0x1e8>

  //------------- Control Interface -------------//
  p_cdc->itf_num = itf_desc->bInterfaceNumber;
 8102b8a:	683b      	ldr	r3, [r7, #0]
 8102b8c:	789a      	ldrb	r2, [r3, #2]
 8102b8e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8102b90:	701a      	strb	r2, [r3, #0]

  uint16_t drv_len = sizeof(tusb_desc_interface_t);
 8102b92:	2309      	movs	r3, #9
 8102b94:	f8a7 3058 	strh.w	r3, [r7, #88]	; 0x58
 8102b98:	683b      	ldr	r3, [r7, #0]
 8102b9a:	643b      	str	r3, [r7, #64]	; 0x40
//--------------------------------------------------------------------+

// return next descriptor
TU_ATTR_ALWAYS_INLINE static inline uint8_t const * tu_desc_next(void const* desc)
{
  uint8_t const* desc8 = (uint8_t const*) desc;
 8102b9c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8102b9e:	63fb      	str	r3, [r7, #60]	; 0x3c
  return desc8 + desc8[DESC_OFFSET_LEN];
 8102ba0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8102ba2:	781b      	ldrb	r3, [r3, #0]
 8102ba4:	461a      	mov	r2, r3
 8102ba6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8102ba8:	4413      	add	r3, r2
  uint8_t const * p_desc = tu_desc_next( itf_desc );
 8102baa:	657b      	str	r3, [r7, #84]	; 0x54

  // Communication Functional Descriptors
  while ( TUSB_DESC_CS_INTERFACE == tu_desc_type(p_desc) && drv_len <= max_len )
 8102bac:	e013      	b.n	8102bd6 <cdcd_open+0xd6>
 8102bae:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8102bb0:	633b      	str	r3, [r7, #48]	; 0x30
}

// get descriptor length
TU_ATTR_ALWAYS_INLINE static inline uint8_t tu_desc_len(void const* desc)
{
  return ((uint8_t const*) desc)[DESC_OFFSET_LEN];
 8102bb2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8102bb4:	781b      	ldrb	r3, [r3, #0]
  {
    drv_len += tu_desc_len(p_desc);
 8102bb6:	b29a      	uxth	r2, r3
 8102bb8:	f8b7 3058 	ldrh.w	r3, [r7, #88]	; 0x58
 8102bbc:	4413      	add	r3, r2
 8102bbe:	f8a7 3058 	strh.w	r3, [r7, #88]	; 0x58
 8102bc2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8102bc4:	63bb      	str	r3, [r7, #56]	; 0x38
  uint8_t const* desc8 = (uint8_t const*) desc;
 8102bc6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8102bc8:	637b      	str	r3, [r7, #52]	; 0x34
  return desc8 + desc8[DESC_OFFSET_LEN];
 8102bca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8102bcc:	781b      	ldrb	r3, [r3, #0]
 8102bce:	461a      	mov	r2, r3
 8102bd0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8102bd2:	4413      	add	r3, r2
    p_desc   = tu_desc_next(p_desc);
 8102bd4:	657b      	str	r3, [r7, #84]	; 0x54
 8102bd6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8102bd8:	62fb      	str	r3, [r7, #44]	; 0x2c
  return ((uint8_t const*) desc)[DESC_OFFSET_TYPE];
 8102bda:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8102bdc:	3301      	adds	r3, #1
 8102bde:	781b      	ldrb	r3, [r3, #0]
  while ( TUSB_DESC_CS_INTERFACE == tu_desc_type(p_desc) && drv_len <= max_len )
 8102be0:	2b24      	cmp	r3, #36	; 0x24
 8102be2:	d104      	bne.n	8102bee <cdcd_open+0xee>
 8102be4:	f8b7 2058 	ldrh.w	r2, [r7, #88]	; 0x58
 8102be8:	88bb      	ldrh	r3, [r7, #4]
 8102bea:	429a      	cmp	r2, r3
 8102bec:	d9df      	bls.n	8102bae <cdcd_open+0xae>
 8102bee:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8102bf0:	62bb      	str	r3, [r7, #40]	; 0x28
 8102bf2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8102bf4:	3301      	adds	r3, #1
 8102bf6:	781b      	ldrb	r3, [r3, #0]
  }

  if ( TUSB_DESC_ENDPOINT == tu_desc_type(p_desc) )
 8102bf8:	2b05      	cmp	r3, #5
 8102bfa:	d12f      	bne.n	8102c5c <cdcd_open+0x15c>
  {
    // notification endpoint
    tusb_desc_endpoint_t const * desc_ep = (tusb_desc_endpoint_t const *) p_desc;
 8102bfc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8102bfe:	653b      	str	r3, [r7, #80]	; 0x50

    TU_ASSERT( usbd_edpt_open(rhport, desc_ep), 0 );
 8102c00:	79fb      	ldrb	r3, [r7, #7]
 8102c02:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8102c04:	4618      	mov	r0, r3
 8102c06:	f002 fa39 	bl	810507c <usbd_edpt_open>
 8102c0a:	4603      	mov	r3, r0
 8102c0c:	f083 0301 	eor.w	r3, r3, #1
 8102c10:	b2db      	uxtb	r3, r3
 8102c12:	2b00      	cmp	r3, #0
 8102c14:	d00a      	beq.n	8102c2c <cdcd_open+0x12c>
 8102c16:	4b37      	ldr	r3, [pc, #220]	; (8102cf4 <cdcd_open+0x1f4>)
 8102c18:	64fb      	str	r3, [r7, #76]	; 0x4c
 8102c1a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8102c1c:	681b      	ldr	r3, [r3, #0]
 8102c1e:	f003 0301 	and.w	r3, r3, #1
 8102c22:	2b00      	cmp	r3, #0
 8102c24:	d000      	beq.n	8102c28 <cdcd_open+0x128>
 8102c26:	be00      	bkpt	0x0000
 8102c28:	2300      	movs	r3, #0
 8102c2a:	e05d      	b.n	8102ce8 <cdcd_open+0x1e8>
    p_cdc->ep_notif = desc_ep->bEndpointAddress;
 8102c2c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8102c2e:	789a      	ldrb	r2, [r3, #2]
 8102c30:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8102c32:	705a      	strb	r2, [r3, #1]
 8102c34:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8102c36:	61fb      	str	r3, [r7, #28]
  return ((uint8_t const*) desc)[DESC_OFFSET_LEN];
 8102c38:	69fb      	ldr	r3, [r7, #28]
 8102c3a:	781b      	ldrb	r3, [r3, #0]

    drv_len += tu_desc_len(p_desc);
 8102c3c:	b29a      	uxth	r2, r3
 8102c3e:	f8b7 3058 	ldrh.w	r3, [r7, #88]	; 0x58
 8102c42:	4413      	add	r3, r2
 8102c44:	f8a7 3058 	strh.w	r3, [r7, #88]	; 0x58
 8102c48:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8102c4a:	627b      	str	r3, [r7, #36]	; 0x24
  uint8_t const* desc8 = (uint8_t const*) desc;
 8102c4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8102c4e:	623b      	str	r3, [r7, #32]
  return desc8 + desc8[DESC_OFFSET_LEN];
 8102c50:	6a3b      	ldr	r3, [r7, #32]
 8102c52:	781b      	ldrb	r3, [r3, #0]
 8102c54:	461a      	mov	r2, r3
 8102c56:	6a3b      	ldr	r3, [r7, #32]
 8102c58:	4413      	add	r3, r2
    p_desc   = tu_desc_next(p_desc);
 8102c5a:	657b      	str	r3, [r7, #84]	; 0x54
 8102c5c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8102c5e:	61bb      	str	r3, [r7, #24]
  return ((uint8_t const*) desc)[DESC_OFFSET_TYPE];
 8102c60:	69bb      	ldr	r3, [r7, #24]
 8102c62:	3301      	adds	r3, #1
 8102c64:	781b      	ldrb	r3, [r3, #0]
  }

  //------------- Data Interface (if any) -------------//
  if ( (TUSB_DESC_INTERFACE == tu_desc_type(p_desc)) &&
 8102c66:	2b04      	cmp	r3, #4
 8102c68:	d139      	bne.n	8102cde <cdcd_open+0x1de>
       (TUSB_CLASS_CDC_DATA == ((tusb_desc_interface_t const *) p_desc)->bInterfaceClass) )
 8102c6a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8102c6c:	795b      	ldrb	r3, [r3, #5]
  if ( (TUSB_DESC_INTERFACE == tu_desc_type(p_desc)) &&
 8102c6e:	2b0a      	cmp	r3, #10
 8102c70:	d135      	bne.n	8102cde <cdcd_open+0x1de>
 8102c72:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8102c74:	60fb      	str	r3, [r7, #12]
  return ((uint8_t const*) desc)[DESC_OFFSET_LEN];
 8102c76:	68fb      	ldr	r3, [r7, #12]
 8102c78:	781b      	ldrb	r3, [r3, #0]
  {
    // next to endpoint descriptor
    drv_len += tu_desc_len(p_desc);
 8102c7a:	b29a      	uxth	r2, r3
 8102c7c:	f8b7 3058 	ldrh.w	r3, [r7, #88]	; 0x58
 8102c80:	4413      	add	r3, r2
 8102c82:	f8a7 3058 	strh.w	r3, [r7, #88]	; 0x58
 8102c86:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8102c88:	617b      	str	r3, [r7, #20]
  uint8_t const* desc8 = (uint8_t const*) desc;
 8102c8a:	697b      	ldr	r3, [r7, #20]
 8102c8c:	613b      	str	r3, [r7, #16]
  return desc8 + desc8[DESC_OFFSET_LEN];
 8102c8e:	693b      	ldr	r3, [r7, #16]
 8102c90:	781b      	ldrb	r3, [r3, #0]
 8102c92:	461a      	mov	r2, r3
 8102c94:	693b      	ldr	r3, [r7, #16]
 8102c96:	4413      	add	r3, r2
    p_desc   = tu_desc_next(p_desc);
 8102c98:	657b      	str	r3, [r7, #84]	; 0x54

    // Open endpoint pair
    TU_ASSERT( usbd_open_edpt_pair(rhport, p_desc, 2, TUSB_XFER_BULK, &p_cdc->ep_out, &p_cdc->ep_in), 0 );
 8102c9a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8102c9c:	3303      	adds	r3, #3
 8102c9e:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8102ca0:	3202      	adds	r2, #2
 8102ca2:	79f8      	ldrb	r0, [r7, #7]
 8102ca4:	9201      	str	r2, [sp, #4]
 8102ca6:	9300      	str	r3, [sp, #0]
 8102ca8:	2302      	movs	r3, #2
 8102caa:	2202      	movs	r2, #2
 8102cac:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8102cae:	f002 f97d 	bl	8104fac <usbd_open_edpt_pair>
 8102cb2:	4603      	mov	r3, r0
 8102cb4:	f083 0301 	eor.w	r3, r3, #1
 8102cb8:	b2db      	uxtb	r3, r3
 8102cba:	2b00      	cmp	r3, #0
 8102cbc:	d00a      	beq.n	8102cd4 <cdcd_open+0x1d4>
 8102cbe:	4b0d      	ldr	r3, [pc, #52]	; (8102cf4 <cdcd_open+0x1f4>)
 8102cc0:	64bb      	str	r3, [r7, #72]	; 0x48
 8102cc2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8102cc4:	681b      	ldr	r3, [r3, #0]
 8102cc6:	f003 0301 	and.w	r3, r3, #1
 8102cca:	2b00      	cmp	r3, #0
 8102ccc:	d000      	beq.n	8102cd0 <cdcd_open+0x1d0>
 8102cce:	be00      	bkpt	0x0000
 8102cd0:	2300      	movs	r3, #0
 8102cd2:	e009      	b.n	8102ce8 <cdcd_open+0x1e8>

    drv_len += 2*sizeof(tusb_desc_endpoint_t);
 8102cd4:	f8b7 3058 	ldrh.w	r3, [r7, #88]	; 0x58
 8102cd8:	330e      	adds	r3, #14
 8102cda:	f8a7 3058 	strh.w	r3, [r7, #88]	; 0x58
  }

  // Prepare for incoming data
  _prep_out_transaction(p_cdc);
 8102cde:	6df8      	ldr	r0, [r7, #92]	; 0x5c
 8102ce0:	f7ff fd59 	bl	8102796 <_prep_out_transaction>

  return drv_len;
 8102ce4:	f8b7 3058 	ldrh.w	r3, [r7, #88]	; 0x58
}
 8102ce8:	4618      	mov	r0, r3
 8102cea:	3760      	adds	r7, #96	; 0x60
 8102cec:	46bd      	mov	sp, r7
 8102cee:	bd80      	pop	{r7, pc}
 8102cf0:	10000d54 	.word	0x10000d54
 8102cf4:	e000edf0 	.word	0xe000edf0

08102cf8 <cdcd_control_xfer_cb>:

// Invoked when a control transfer occurred on an interface of this class
// Driver response accordingly to the request and the transfer stage (setup/data/ack)
// return false to stall control endpoint (e.g unsupported request)
bool cdcd_control_xfer_cb(uint8_t rhport, uint8_t stage, tusb_control_request_t const * request)
{
 8102cf8:	b580      	push	{r7, lr}
 8102cfa:	b08a      	sub	sp, #40	; 0x28
 8102cfc:	af00      	add	r7, sp, #0
 8102cfe:	4603      	mov	r3, r0
 8102d00:	603a      	str	r2, [r7, #0]
 8102d02:	71fb      	strb	r3, [r7, #7]
 8102d04:	460b      	mov	r3, r1
 8102d06:	71bb      	strb	r3, [r7, #6]
  // Handle class request only
  TU_VERIFY(request->bmRequestType_bit.type == TUSB_REQ_TYPE_CLASS);
 8102d08:	683b      	ldr	r3, [r7, #0]
 8102d0a:	781b      	ldrb	r3, [r3, #0]
 8102d0c:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8102d10:	b2db      	uxtb	r3, r3
 8102d12:	2b20      	cmp	r3, #32
 8102d14:	d001      	beq.n	8102d1a <cdcd_control_xfer_cb+0x22>
 8102d16:	2300      	movs	r3, #0
 8102d18:	e0cf      	b.n	8102eba <cdcd_control_xfer_cb+0x1c2>

  uint8_t itf = 0;
 8102d1a:	2300      	movs	r3, #0
 8102d1c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  cdcd_interface_t* p_cdc = _cdcd_itf;
 8102d20:	4b68      	ldr	r3, [pc, #416]	; (8102ec4 <cdcd_control_xfer_cb+0x1cc>)
 8102d22:	623b      	str	r3, [r7, #32]

  // Identify which interface to use
  for ( ; ; itf++, p_cdc++)
  {
    if (itf >= TU_ARRAY_SIZE(_cdcd_itf)) return false;
 8102d24:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8102d28:	2b01      	cmp	r3, #1
 8102d2a:	d901      	bls.n	8102d30 <cdcd_control_xfer_cb+0x38>
 8102d2c:	2300      	movs	r3, #0
 8102d2e:	e0c4      	b.n	8102eba <cdcd_control_xfer_cb+0x1c2>

    if ( p_cdc->itf_num == request->wIndex ) break;
 8102d30:	6a3b      	ldr	r3, [r7, #32]
 8102d32:	781b      	ldrb	r3, [r3, #0]
 8102d34:	b29a      	uxth	r2, r3
 8102d36:	683b      	ldr	r3, [r7, #0]
 8102d38:	889b      	ldrh	r3, [r3, #4]
 8102d3a:	b29b      	uxth	r3, r3
 8102d3c:	429a      	cmp	r2, r3
 8102d3e:	d009      	beq.n	8102d54 <cdcd_control_xfer_cb+0x5c>
  for ( ; ; itf++, p_cdc++)
 8102d40:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8102d44:	3301      	adds	r3, #1
 8102d46:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8102d4a:	6a3b      	ldr	r3, [r7, #32]
 8102d4c:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8102d50:	623b      	str	r3, [r7, #32]
    if (itf >= TU_ARRAY_SIZE(_cdcd_itf)) return false;
 8102d52:	e7e7      	b.n	8102d24 <cdcd_control_xfer_cb+0x2c>
    if ( p_cdc->itf_num == request->wIndex ) break;
 8102d54:	bf00      	nop
  }

  switch ( request->bRequest )
 8102d56:	683b      	ldr	r3, [r7, #0]
 8102d58:	785b      	ldrb	r3, [r3, #1]
 8102d5a:	3b20      	subs	r3, #32
 8102d5c:	2b03      	cmp	r3, #3
 8102d5e:	f200 80a2 	bhi.w	8102ea6 <cdcd_control_xfer_cb+0x1ae>
 8102d62:	a201      	add	r2, pc, #4	; (adr r2, 8102d68 <cdcd_control_xfer_cb+0x70>)
 8102d64:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8102d68:	08102d79 	.word	0x08102d79
 8102d6c:	08102db5 	.word	0x08102db5
 8102d70:	08102dcd 	.word	0x08102dcd
 8102d74:	08102e75 	.word	0x08102e75
  {
    case CDC_REQUEST_SET_LINE_CODING:
      if (stage == CONTROL_STAGE_SETUP)
 8102d78:	79bb      	ldrb	r3, [r7, #6]
 8102d7a:	2b01      	cmp	r3, #1
 8102d7c:	d108      	bne.n	8102d90 <cdcd_control_xfer_cb+0x98>
      {
        TU_LOG_DRV("  Set Line Coding\r\n");
        tud_control_xfer(rhport, request, &p_cdc->line_coding, sizeof(cdc_line_coding_t));
 8102d7e:	6a3b      	ldr	r3, [r7, #32]
 8102d80:	f103 0208 	add.w	r2, r3, #8
 8102d84:	79f8      	ldrb	r0, [r7, #7]
 8102d86:	2307      	movs	r3, #7
 8102d88:	6839      	ldr	r1, [r7, #0]
 8102d8a:	f002 fbe5 	bl	8105558 <tud_control_xfer>
      }
      else if ( stage == CONTROL_STAGE_ACK)
      {
        if ( tud_cdc_line_coding_cb ) tud_cdc_line_coding_cb(itf, &p_cdc->line_coding);
      }
    break;
 8102d8e:	e08c      	b.n	8102eaa <cdcd_control_xfer_cb+0x1b2>
      else if ( stage == CONTROL_STAGE_ACK)
 8102d90:	79bb      	ldrb	r3, [r7, #6]
 8102d92:	2b03      	cmp	r3, #3
 8102d94:	f040 8089 	bne.w	8102eaa <cdcd_control_xfer_cb+0x1b2>
        if ( tud_cdc_line_coding_cb ) tud_cdc_line_coding_cb(itf, &p_cdc->line_coding);
 8102d98:	4b4b      	ldr	r3, [pc, #300]	; (8102ec8 <cdcd_control_xfer_cb+0x1d0>)
 8102d9a:	2b00      	cmp	r3, #0
 8102d9c:	f000 8085 	beq.w	8102eaa <cdcd_control_xfer_cb+0x1b2>
 8102da0:	6a3b      	ldr	r3, [r7, #32]
 8102da2:	f103 0208 	add.w	r2, r3, #8
 8102da6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8102daa:	4611      	mov	r1, r2
 8102dac:	4618      	mov	r0, r3
 8102dae:	f3af 8000 	nop.w
    break;
 8102db2:	e07a      	b.n	8102eaa <cdcd_control_xfer_cb+0x1b2>

    case CDC_REQUEST_GET_LINE_CODING:
      if (stage == CONTROL_STAGE_SETUP)
 8102db4:	79bb      	ldrb	r3, [r7, #6]
 8102db6:	2b01      	cmp	r3, #1
 8102db8:	d179      	bne.n	8102eae <cdcd_control_xfer_cb+0x1b6>
      {
        TU_LOG_DRV("  Get Line Coding\r\n");
        tud_control_xfer(rhport, request, &p_cdc->line_coding, sizeof(cdc_line_coding_t));
 8102dba:	6a3b      	ldr	r3, [r7, #32]
 8102dbc:	f103 0208 	add.w	r2, r3, #8
 8102dc0:	79f8      	ldrb	r0, [r7, #7]
 8102dc2:	2307      	movs	r3, #7
 8102dc4:	6839      	ldr	r1, [r7, #0]
 8102dc6:	f002 fbc7 	bl	8105558 <tud_control_xfer>
      }
    break;
 8102dca:	e070      	b.n	8102eae <cdcd_control_xfer_cb+0x1b6>

    case CDC_REQUEST_SET_CONTROL_LINE_STATE:
      if (stage == CONTROL_STAGE_SETUP)
 8102dcc:	79bb      	ldrb	r3, [r7, #6]
 8102dce:	2b01      	cmp	r3, #1
 8102dd0:	d105      	bne.n	8102dde <cdcd_control_xfer_cb+0xe6>
      {
        tud_control_status(rhport, request);
 8102dd2:	79fb      	ldrb	r3, [r7, #7]
 8102dd4:	6839      	ldr	r1, [r7, #0]
 8102dd6:	4618      	mov	r0, r3
 8102dd8:	f002 fb4c 	bl	8105474 <tud_control_status>
        TU_LOG_DRV("  Set Control Line State: DTR = %d, RTS = %d\r\n", dtr, rts);

        // Invoke callback
        if ( tud_cdc_line_state_cb ) tud_cdc_line_state_cb(itf, dtr, rts);
      }
    break;
 8102ddc:	e069      	b.n	8102eb2 <cdcd_control_xfer_cb+0x1ba>
      else if (stage == CONTROL_STAGE_ACK)
 8102dde:	79bb      	ldrb	r3, [r7, #6]
 8102de0:	2b03      	cmp	r3, #3
 8102de2:	d166      	bne.n	8102eb2 <cdcd_control_xfer_cb+0x1ba>
        bool const dtr = tu_bit_test(request->wValue, 0);
 8102de4:	683b      	ldr	r3, [r7, #0]
 8102de6:	885b      	ldrh	r3, [r3, #2]
 8102de8:	b29b      	uxth	r3, r3
 8102dea:	613b      	str	r3, [r7, #16]
 8102dec:	2300      	movs	r3, #0
 8102dee:	73fb      	strb	r3, [r7, #15]
TU_ATTR_ALWAYS_INLINE static inline uint8_t tu_u16_low (uint16_t ui16) { return TU_U16_LOW(ui16); }

//------------- Bits -------------//
TU_ATTR_ALWAYS_INLINE static inline uint32_t tu_bit_set  (uint32_t value, uint8_t pos) { return value | TU_BIT(pos);                  }
TU_ATTR_ALWAYS_INLINE static inline uint32_t tu_bit_clear(uint32_t value, uint8_t pos) { return value & (~TU_BIT(pos));               }
TU_ATTR_ALWAYS_INLINE static inline bool     tu_bit_test (uint32_t value, uint8_t pos) { return (value & TU_BIT(pos)) ? true : false; }
 8102df0:	7bfb      	ldrb	r3, [r7, #15]
 8102df2:	693a      	ldr	r2, [r7, #16]
 8102df4:	fa22 f303 	lsr.w	r3, r2, r3
 8102df8:	f003 0301 	and.w	r3, r3, #1
 8102dfc:	2b00      	cmp	r3, #0
 8102dfe:	bf14      	ite	ne
 8102e00:	2301      	movne	r3, #1
 8102e02:	2300      	moveq	r3, #0
 8102e04:	b2db      	uxtb	r3, r3
 8102e06:	77fb      	strb	r3, [r7, #31]
        bool const rts = tu_bit_test(request->wValue, 1);
 8102e08:	683b      	ldr	r3, [r7, #0]
 8102e0a:	885b      	ldrh	r3, [r3, #2]
 8102e0c:	b29b      	uxth	r3, r3
 8102e0e:	61bb      	str	r3, [r7, #24]
 8102e10:	2301      	movs	r3, #1
 8102e12:	75fb      	strb	r3, [r7, #23]
 8102e14:	7dfb      	ldrb	r3, [r7, #23]
 8102e16:	69ba      	ldr	r2, [r7, #24]
 8102e18:	fa22 f303 	lsr.w	r3, r2, r3
 8102e1c:	f003 0301 	and.w	r3, r3, #1
 8102e20:	2b00      	cmp	r3, #0
 8102e22:	bf14      	ite	ne
 8102e24:	2301      	movne	r3, #1
 8102e26:	2300      	moveq	r3, #0
 8102e28:	b2db      	uxtb	r3, r3
 8102e2a:	77bb      	strb	r3, [r7, #30]
        p_cdc->line_state = (uint8_t) request->wValue;
 8102e2c:	683b      	ldr	r3, [r7, #0]
 8102e2e:	885b      	ldrh	r3, [r3, #2]
 8102e30:	b29b      	uxth	r3, r3
 8102e32:	b2da      	uxtb	r2, r3
 8102e34:	6a3b      	ldr	r3, [r7, #32]
 8102e36:	711a      	strb	r2, [r3, #4]
        tu_fifo_set_overwritable(&p_cdc->tx_ff, !dtr);
 8102e38:	6a3b      	ldr	r3, [r7, #32]
 8102e3a:	f103 021c 	add.w	r2, r3, #28
 8102e3e:	7ffb      	ldrb	r3, [r7, #31]
 8102e40:	2b00      	cmp	r3, #0
 8102e42:	bf14      	ite	ne
 8102e44:	2301      	movne	r3, #1
 8102e46:	2300      	moveq	r3, #0
 8102e48:	b2db      	uxtb	r3, r3
 8102e4a:	f083 0301 	eor.w	r3, r3, #1
 8102e4e:	b2db      	uxtb	r3, r3
 8102e50:	f003 0301 	and.w	r3, r3, #1
 8102e54:	b2db      	uxtb	r3, r3
 8102e56:	4619      	mov	r1, r3
 8102e58:	4610      	mov	r0, r2
 8102e5a:	f000 ff00 	bl	8103c5e <tu_fifo_set_overwritable>
        if ( tud_cdc_line_state_cb ) tud_cdc_line_state_cb(itf, dtr, rts);
 8102e5e:	4b1b      	ldr	r3, [pc, #108]	; (8102ecc <cdcd_control_xfer_cb+0x1d4>)
 8102e60:	2b00      	cmp	r3, #0
 8102e62:	d026      	beq.n	8102eb2 <cdcd_control_xfer_cb+0x1ba>
 8102e64:	7fba      	ldrb	r2, [r7, #30]
 8102e66:	7ff9      	ldrb	r1, [r7, #31]
 8102e68:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8102e6c:	4618      	mov	r0, r3
 8102e6e:	f3af 8000 	nop.w
    break;
 8102e72:	e01e      	b.n	8102eb2 <cdcd_control_xfer_cb+0x1ba>
    case CDC_REQUEST_SEND_BREAK:
      if (stage == CONTROL_STAGE_SETUP)
 8102e74:	79bb      	ldrb	r3, [r7, #6]
 8102e76:	2b01      	cmp	r3, #1
 8102e78:	d105      	bne.n	8102e86 <cdcd_control_xfer_cb+0x18e>
      {
        tud_control_status(rhport, request);
 8102e7a:	79fb      	ldrb	r3, [r7, #7]
 8102e7c:	6839      	ldr	r1, [r7, #0]
 8102e7e:	4618      	mov	r0, r3
 8102e80:	f002 faf8 	bl	8105474 <tud_control_status>
      else if (stage == CONTROL_STAGE_ACK)
      {
        TU_LOG_DRV("  Send Break\r\n");
        if ( tud_cdc_send_break_cb ) tud_cdc_send_break_cb(itf, request->wValue);
      }
    break;
 8102e84:	e017      	b.n	8102eb6 <cdcd_control_xfer_cb+0x1be>
      else if (stage == CONTROL_STAGE_ACK)
 8102e86:	79bb      	ldrb	r3, [r7, #6]
 8102e88:	2b03      	cmp	r3, #3
 8102e8a:	d114      	bne.n	8102eb6 <cdcd_control_xfer_cb+0x1be>
        if ( tud_cdc_send_break_cb ) tud_cdc_send_break_cb(itf, request->wValue);
 8102e8c:	4b10      	ldr	r3, [pc, #64]	; (8102ed0 <cdcd_control_xfer_cb+0x1d8>)
 8102e8e:	2b00      	cmp	r3, #0
 8102e90:	d011      	beq.n	8102eb6 <cdcd_control_xfer_cb+0x1be>
 8102e92:	683b      	ldr	r3, [r7, #0]
 8102e94:	885b      	ldrh	r3, [r3, #2]
 8102e96:	b29a      	uxth	r2, r3
 8102e98:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8102e9c:	4611      	mov	r1, r2
 8102e9e:	4618      	mov	r0, r3
 8102ea0:	f3af 8000 	nop.w
    break;
 8102ea4:	e007      	b.n	8102eb6 <cdcd_control_xfer_cb+0x1be>

    default: return false; // stall unsupported request
 8102ea6:	2300      	movs	r3, #0
 8102ea8:	e007      	b.n	8102eba <cdcd_control_xfer_cb+0x1c2>
    break;
 8102eaa:	bf00      	nop
 8102eac:	e004      	b.n	8102eb8 <cdcd_control_xfer_cb+0x1c0>
    break;
 8102eae:	bf00      	nop
 8102eb0:	e002      	b.n	8102eb8 <cdcd_control_xfer_cb+0x1c0>
    break;
 8102eb2:	bf00      	nop
 8102eb4:	e000      	b.n	8102eb8 <cdcd_control_xfer_cb+0x1c0>
    break;
 8102eb6:	bf00      	nop
  }

  return true;
 8102eb8:	2301      	movs	r3, #1
}
 8102eba:	4618      	mov	r0, r3
 8102ebc:	3728      	adds	r7, #40	; 0x28
 8102ebe:	46bd      	mov	sp, r7
 8102ec0:	bd80      	pop	{r7, pc}
 8102ec2:	bf00      	nop
 8102ec4:	10000d54 	.word	0x10000d54
	...

08102ed4 <cdcd_xfer_cb>:

bool cdcd_xfer_cb(uint8_t rhport, uint8_t ep_addr, xfer_result_t result, uint32_t xferred_bytes)
{
 8102ed4:	b580      	push	{r7, lr}
 8102ed6:	b086      	sub	sp, #24
 8102ed8:	af00      	add	r7, sp, #0
 8102eda:	603b      	str	r3, [r7, #0]
 8102edc:	4603      	mov	r3, r0
 8102ede:	71fb      	strb	r3, [r7, #7]
 8102ee0:	460b      	mov	r3, r1
 8102ee2:	71bb      	strb	r3, [r7, #6]
 8102ee4:	4613      	mov	r3, r2
 8102ee6:	717b      	strb	r3, [r7, #5]

  uint8_t itf;
  cdcd_interface_t* p_cdc;

  // Identify which interface to use
  for (itf = 0; itf < CFG_TUD_CDC; itf++)
 8102ee8:	2300      	movs	r3, #0
 8102eea:	75fb      	strb	r3, [r7, #23]
 8102eec:	e014      	b.n	8102f18 <cdcd_xfer_cb+0x44>
  {
    p_cdc = &_cdcd_itf[itf];
 8102eee:	7dfb      	ldrb	r3, [r7, #23]
 8102ef0:	f44f 7294 	mov.w	r2, #296	; 0x128
 8102ef4:	fb02 f303 	mul.w	r3, r2, r3
 8102ef8:	4a54      	ldr	r2, [pc, #336]	; (810304c <cdcd_xfer_cb+0x178>)
 8102efa:	4413      	add	r3, r2
 8102efc:	613b      	str	r3, [r7, #16]
    if ( ( ep_addr == p_cdc->ep_out ) || ( ep_addr == p_cdc->ep_in ) ) break;
 8102efe:	693b      	ldr	r3, [r7, #16]
 8102f00:	78db      	ldrb	r3, [r3, #3]
 8102f02:	79ba      	ldrb	r2, [r7, #6]
 8102f04:	429a      	cmp	r2, r3
 8102f06:	d00a      	beq.n	8102f1e <cdcd_xfer_cb+0x4a>
 8102f08:	693b      	ldr	r3, [r7, #16]
 8102f0a:	789b      	ldrb	r3, [r3, #2]
 8102f0c:	79ba      	ldrb	r2, [r7, #6]
 8102f0e:	429a      	cmp	r2, r3
 8102f10:	d005      	beq.n	8102f1e <cdcd_xfer_cb+0x4a>
  for (itf = 0; itf < CFG_TUD_CDC; itf++)
 8102f12:	7dfb      	ldrb	r3, [r7, #23]
 8102f14:	3301      	adds	r3, #1
 8102f16:	75fb      	strb	r3, [r7, #23]
 8102f18:	7dfb      	ldrb	r3, [r7, #23]
 8102f1a:	2b01      	cmp	r3, #1
 8102f1c:	d9e7      	bls.n	8102eee <cdcd_xfer_cb+0x1a>
  }
  TU_ASSERT(itf < CFG_TUD_CDC);
 8102f1e:	7dfb      	ldrb	r3, [r7, #23]
 8102f20:	2b01      	cmp	r3, #1
 8102f22:	d90a      	bls.n	8102f3a <cdcd_xfer_cb+0x66>
 8102f24:	4b4a      	ldr	r3, [pc, #296]	; (8103050 <cdcd_xfer_cb+0x17c>)
 8102f26:	60bb      	str	r3, [r7, #8]
 8102f28:	68bb      	ldr	r3, [r7, #8]
 8102f2a:	681b      	ldr	r3, [r3, #0]
 8102f2c:	f003 0301 	and.w	r3, r3, #1
 8102f30:	2b00      	cmp	r3, #0
 8102f32:	d000      	beq.n	8102f36 <cdcd_xfer_cb+0x62>
 8102f34:	be00      	bkpt	0x0000
 8102f36:	2300      	movs	r3, #0
 8102f38:	e084      	b.n	8103044 <cdcd_xfer_cb+0x170>

  // Received new data
  if ( ep_addr == p_cdc->ep_out )
 8102f3a:	693b      	ldr	r3, [r7, #16]
 8102f3c:	78db      	ldrb	r3, [r3, #3]
 8102f3e:	79ba      	ldrb	r2, [r7, #6]
 8102f40:	429a      	cmp	r2, r3
 8102f42:	d14a      	bne.n	8102fda <cdcd_xfer_cb+0x106>
  {
    tu_fifo_write_n(&p_cdc->rx_ff, p_cdc->epout_buf, (uint16_t) xferred_bytes);
 8102f44:	693b      	ldr	r3, [r7, #16]
 8102f46:	f103 0010 	add.w	r0, r3, #16
 8102f4a:	693b      	ldr	r3, [r7, #16]
 8102f4c:	33a8      	adds	r3, #168	; 0xa8
 8102f4e:	683a      	ldr	r2, [r7, #0]
 8102f50:	b292      	uxth	r2, r2
 8102f52:	4619      	mov	r1, r3
 8102f54:	f000 fe4e 	bl	8103bf4 <tu_fifo_write_n>

    // Check for wanted char and invoke callback if needed
    if ( tud_cdc_rx_wanted_cb && (((signed char) p_cdc->wanted_char) != -1) )
 8102f58:	4b3e      	ldr	r3, [pc, #248]	; (8103054 <cdcd_xfer_cb+0x180>)
 8102f5a:	2b00      	cmp	r3, #0
 8102f5c:	d028      	beq.n	8102fb0 <cdcd_xfer_cb+0xdc>
 8102f5e:	693b      	ldr	r3, [r7, #16]
 8102f60:	795b      	ldrb	r3, [r3, #5]
 8102f62:	2bff      	cmp	r3, #255	; 0xff
 8102f64:	d024      	beq.n	8102fb0 <cdcd_xfer_cb+0xdc>
    {
      for ( uint32_t i = 0; i < xferred_bytes; i++ )
 8102f66:	2300      	movs	r3, #0
 8102f68:	60fb      	str	r3, [r7, #12]
 8102f6a:	e01d      	b.n	8102fa8 <cdcd_xfer_cb+0xd4>
      {
        if ( (p_cdc->wanted_char == p_cdc->epout_buf[i]) && !tu_fifo_empty(&p_cdc->rx_ff) )
 8102f6c:	693b      	ldr	r3, [r7, #16]
 8102f6e:	795a      	ldrb	r2, [r3, #5]
 8102f70:	6939      	ldr	r1, [r7, #16]
 8102f72:	68fb      	ldr	r3, [r7, #12]
 8102f74:	440b      	add	r3, r1
 8102f76:	33a8      	adds	r3, #168	; 0xa8
 8102f78:	781b      	ldrb	r3, [r3, #0]
 8102f7a:	429a      	cmp	r2, r3
 8102f7c:	d111      	bne.n	8102fa2 <cdcd_xfer_cb+0xce>
 8102f7e:	693b      	ldr	r3, [r7, #16]
 8102f80:	3310      	adds	r3, #16
 8102f82:	4618      	mov	r0, r3
 8102f84:	f000 fd30 	bl	81039e8 <tu_fifo_empty>
 8102f88:	4603      	mov	r3, r0
 8102f8a:	f083 0301 	eor.w	r3, r3, #1
 8102f8e:	b2db      	uxtb	r3, r3
 8102f90:	2b00      	cmp	r3, #0
 8102f92:	d006      	beq.n	8102fa2 <cdcd_xfer_cb+0xce>
        {
          tud_cdc_rx_wanted_cb(itf, p_cdc->wanted_char);
 8102f94:	693b      	ldr	r3, [r7, #16]
 8102f96:	795a      	ldrb	r2, [r3, #5]
 8102f98:	7dfb      	ldrb	r3, [r7, #23]
 8102f9a:	4611      	mov	r1, r2
 8102f9c:	4618      	mov	r0, r3
 8102f9e:	f3af 8000 	nop.w
      for ( uint32_t i = 0; i < xferred_bytes; i++ )
 8102fa2:	68fb      	ldr	r3, [r7, #12]
 8102fa4:	3301      	adds	r3, #1
 8102fa6:	60fb      	str	r3, [r7, #12]
 8102fa8:	68fa      	ldr	r2, [r7, #12]
 8102faa:	683b      	ldr	r3, [r7, #0]
 8102fac:	429a      	cmp	r2, r3
 8102fae:	d3dd      	bcc.n	8102f6c <cdcd_xfer_cb+0x98>
        }
      }
    }

    // invoke receive callback (if there is still data)
    if (tud_cdc_rx_cb && !tu_fifo_empty(&p_cdc->rx_ff) ) tud_cdc_rx_cb(itf);
 8102fb0:	4b29      	ldr	r3, [pc, #164]	; (8103058 <cdcd_xfer_cb+0x184>)
 8102fb2:	2b00      	cmp	r3, #0
 8102fb4:	d00e      	beq.n	8102fd4 <cdcd_xfer_cb+0x100>
 8102fb6:	693b      	ldr	r3, [r7, #16]
 8102fb8:	3310      	adds	r3, #16
 8102fba:	4618      	mov	r0, r3
 8102fbc:	f000 fd14 	bl	81039e8 <tu_fifo_empty>
 8102fc0:	4603      	mov	r3, r0
 8102fc2:	f083 0301 	eor.w	r3, r3, #1
 8102fc6:	b2db      	uxtb	r3, r3
 8102fc8:	2b00      	cmp	r3, #0
 8102fca:	d003      	beq.n	8102fd4 <cdcd_xfer_cb+0x100>
 8102fcc:	7dfb      	ldrb	r3, [r7, #23]
 8102fce:	4618      	mov	r0, r3
 8102fd0:	f3af 8000 	nop.w

    // prepare for OUT transaction
    _prep_out_transaction(p_cdc);
 8102fd4:	6938      	ldr	r0, [r7, #16]
 8102fd6:	f7ff fbde 	bl	8102796 <_prep_out_transaction>
  }

  // Data sent to host, we continue to fetch from tx fifo to send.
  // Note: This will cause incorrect baudrate set in line coding.
  //       Though maybe the baudrate is not really important !!!
  if ( ep_addr == p_cdc->ep_in )
 8102fda:	693b      	ldr	r3, [r7, #16]
 8102fdc:	789b      	ldrb	r3, [r3, #2]
 8102fde:	79ba      	ldrb	r2, [r7, #6]
 8102fe0:	429a      	cmp	r2, r3
 8102fe2:	d12e      	bne.n	8103042 <cdcd_xfer_cb+0x16e>
  {
    // invoke transmit callback to possibly refill tx fifo
    if ( tud_cdc_tx_complete_cb ) tud_cdc_tx_complete_cb(itf);
 8102fe4:	4b1d      	ldr	r3, [pc, #116]	; (810305c <cdcd_xfer_cb+0x188>)
 8102fe6:	2b00      	cmp	r3, #0
 8102fe8:	d003      	beq.n	8102ff2 <cdcd_xfer_cb+0x11e>
 8102fea:	7dfb      	ldrb	r3, [r7, #23]
 8102fec:	4618      	mov	r0, r3
 8102fee:	f3af 8000 	nop.w

    if ( 0 == tud_cdc_n_write_flush(itf) )
 8102ff2:	7dfb      	ldrb	r3, [r7, #23]
 8102ff4:	4618      	mov	r0, r3
 8102ff6:	f7ff fc8b 	bl	8102910 <tud_cdc_n_write_flush>
 8102ffa:	4603      	mov	r3, r0
 8102ffc:	2b00      	cmp	r3, #0
 8102ffe:	d120      	bne.n	8103042 <cdcd_xfer_cb+0x16e>
    {
      // If there is no data left, a ZLP should be sent if
      // xferred_bytes is multiple of EP Packet size and not zero
      if ( !tu_fifo_count(&p_cdc->tx_ff) && xferred_bytes && (0 == (xferred_bytes & (BULK_PACKET_SIZE-1))) )
 8103000:	693b      	ldr	r3, [r7, #16]
 8103002:	331c      	adds	r3, #28
 8103004:	4618      	mov	r0, r3
 8103006:	f000 fcbd 	bl	8103984 <tu_fifo_count>
 810300a:	4603      	mov	r3, r0
 810300c:	2b00      	cmp	r3, #0
 810300e:	d118      	bne.n	8103042 <cdcd_xfer_cb+0x16e>
 8103010:	683b      	ldr	r3, [r7, #0]
 8103012:	2b00      	cmp	r3, #0
 8103014:	d015      	beq.n	8103042 <cdcd_xfer_cb+0x16e>
 8103016:	683b      	ldr	r3, [r7, #0]
 8103018:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 810301c:	2b00      	cmp	r3, #0
 810301e:	d110      	bne.n	8103042 <cdcd_xfer_cb+0x16e>
      {
        if ( usbd_edpt_claim(rhport, p_cdc->ep_in) )
 8103020:	693b      	ldr	r3, [r7, #16]
 8103022:	789a      	ldrb	r2, [r3, #2]
 8103024:	79fb      	ldrb	r3, [r7, #7]
 8103026:	4611      	mov	r1, r2
 8103028:	4618      	mov	r0, r3
 810302a:	f002 f86b 	bl	8105104 <usbd_edpt_claim>
 810302e:	4603      	mov	r3, r0
 8103030:	2b00      	cmp	r3, #0
 8103032:	d006      	beq.n	8103042 <cdcd_xfer_cb+0x16e>
        {
          usbd_edpt_xfer(rhport, p_cdc->ep_in, NULL, 0);
 8103034:	693b      	ldr	r3, [r7, #16]
 8103036:	7899      	ldrb	r1, [r3, #2]
 8103038:	79f8      	ldrb	r0, [r7, #7]
 810303a:	2300      	movs	r3, #0
 810303c:	2200      	movs	r2, #0
 810303e:	f002 f8b5 	bl	81051ac <usbd_edpt_xfer>
    }
  }

  // nothing to do with notif endpoint for now

  return true;
 8103042:	2301      	movs	r3, #1
}
 8103044:	4618      	mov	r0, r3
 8103046:	3718      	adds	r7, #24
 8103048:	46bd      	mov	sp, r7
 810304a:	bd80      	pop	{r7, pc}
 810304c:	10000d54 	.word	0x10000d54
 8103050:	e000edf0 	.word	0xe000edf0
	...

08103060 <tu_fifo_config>:
  TU_FIFO_COPY_INC,            ///< Copy from/to an increasing source/destination address - default mode
  TU_FIFO_COPY_CST_FULL_WORDS, ///< Copy from/to a constant source/destination address - required for e.g. STM32 to write into USB hardware FIFO
} tu_fifo_copy_mode_t;

bool tu_fifo_config(tu_fifo_t *f, void* buffer, uint16_t depth, uint16_t item_size, bool overwritable)
{
 8103060:	b480      	push	{r7}
 8103062:	b085      	sub	sp, #20
 8103064:	af00      	add	r7, sp, #0
 8103066:	60f8      	str	r0, [r7, #12]
 8103068:	60b9      	str	r1, [r7, #8]
 810306a:	4611      	mov	r1, r2
 810306c:	461a      	mov	r2, r3
 810306e:	460b      	mov	r3, r1
 8103070:	80fb      	strh	r3, [r7, #6]
 8103072:	4613      	mov	r3, r2
 8103074:	80bb      	strh	r3, [r7, #4]
  // Limit index space to 2*depth - this allows for a fast "modulo" calculation
  // but limits the maximum depth to 2^16/2 = 2^15 and buffer overflows are detectable
  // only if overflow happens once (important for unsupervised DMA applications)
  if (depth > 0x8000) return false;
 8103076:	88fb      	ldrh	r3, [r7, #6]
 8103078:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 810307c:	d901      	bls.n	8103082 <tu_fifo_config+0x22>
 810307e:	2300      	movs	r3, #0
 8103080:	e01b      	b.n	81030ba <tu_fifo_config+0x5a>

  _ff_lock(f->mutex_wr);
  _ff_lock(f->mutex_rd);

  f->buffer       = (uint8_t*) buffer;
 8103082:	68fb      	ldr	r3, [r7, #12]
 8103084:	68ba      	ldr	r2, [r7, #8]
 8103086:	601a      	str	r2, [r3, #0]
  f->depth        = depth;
 8103088:	68fb      	ldr	r3, [r7, #12]
 810308a:	88fa      	ldrh	r2, [r7, #6]
 810308c:	809a      	strh	r2, [r3, #4]
  f->item_size    = (uint16_t) (item_size & 0x7FFF);
 810308e:	88bb      	ldrh	r3, [r7, #4]
 8103090:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8103094:	b299      	uxth	r1, r3
 8103096:	68fa      	ldr	r2, [r7, #12]
 8103098:	88d3      	ldrh	r3, [r2, #6]
 810309a:	f361 030e 	bfi	r3, r1, #0, #15
 810309e:	80d3      	strh	r3, [r2, #6]
  f->overwritable = overwritable;
 81030a0:	68fa      	ldr	r2, [r7, #12]
 81030a2:	79d3      	ldrb	r3, [r2, #7]
 81030a4:	7e39      	ldrb	r1, [r7, #24]
 81030a6:	f361 13c7 	bfi	r3, r1, #7, #1
 81030aa:	71d3      	strb	r3, [r2, #7]
  f->rd_idx       = 0;
 81030ac:	68fb      	ldr	r3, [r7, #12]
 81030ae:	2200      	movs	r2, #0
 81030b0:	815a      	strh	r2, [r3, #10]
  f->wr_idx       = 0;
 81030b2:	68fb      	ldr	r3, [r7, #12]
 81030b4:	2200      	movs	r2, #0
 81030b6:	811a      	strh	r2, [r3, #8]

  _ff_unlock(f->mutex_wr);
  _ff_unlock(f->mutex_rd);

  return true;
 81030b8:	2301      	movs	r3, #1
}
 81030ba:	4618      	mov	r0, r3
 81030bc:	3714      	adds	r7, #20
 81030be:	46bd      	mov	sp, r7
 81030c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 81030c4:	4770      	bx	lr

081030c6 <_ff_push_const_addr>:

// Intended to be used to read from hardware USB FIFO in e.g. STM32 where all data is read from a constant address
// Code adapted from dcd_synopsys.c
// TODO generalize with configurable 1 byte or 4 byte each read
static void _ff_push_const_addr(uint8_t * ff_buf, const void * app_buf, uint16_t len)
{
 81030c6:	b580      	push	{r7, lr}
 81030c8:	b08a      	sub	sp, #40	; 0x28
 81030ca:	af00      	add	r7, sp, #0
 81030cc:	60f8      	str	r0, [r7, #12]
 81030ce:	60b9      	str	r1, [r7, #8]
 81030d0:	4613      	mov	r3, r2
 81030d2:	80fb      	strh	r3, [r7, #6]
  volatile const uint32_t * reg_rx = (volatile const uint32_t *) app_buf;
 81030d4:	68bb      	ldr	r3, [r7, #8]
 81030d6:	623b      	str	r3, [r7, #32]

  // Reading full available 32 bit words from const app address
  uint16_t full_words = len >> 2;
 81030d8:	88fb      	ldrh	r3, [r7, #6]
 81030da:	089b      	lsrs	r3, r3, #2
 81030dc:	84fb      	strh	r3, [r7, #38]	; 0x26
  while(full_words--)
 81030de:	e00b      	b.n	81030f8 <_ff_push_const_addr+0x32>
  {
    tu_unaligned_write32(ff_buf, *reg_rx);
 81030e0:	6a3b      	ldr	r3, [r7, #32]
 81030e2:	681b      	ldr	r3, [r3, #0]
 81030e4:	68fa      	ldr	r2, [r7, #12]
 81030e6:	61ba      	str	r2, [r7, #24]
 81030e8:	617b      	str	r3, [r7, #20]
TU_ATTR_ALWAYS_INLINE static inline uint16_t tu_unaligned_read16(const void *mem) {
  return *((uint16_t const *) mem);
}

TU_ATTR_ALWAYS_INLINE static inline void tu_unaligned_write32(void *mem, uint32_t value) {
  *((uint32_t *) mem) = value;
 81030ea:	69bb      	ldr	r3, [r7, #24]
 81030ec:	697a      	ldr	r2, [r7, #20]
 81030ee:	601a      	str	r2, [r3, #0]
}
 81030f0:	bf00      	nop
    ff_buf += 4;
 81030f2:	68fb      	ldr	r3, [r7, #12]
 81030f4:	3304      	adds	r3, #4
 81030f6:	60fb      	str	r3, [r7, #12]
  while(full_words--)
 81030f8:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 81030fa:	1e5a      	subs	r2, r3, #1
 81030fc:	84fa      	strh	r2, [r7, #38]	; 0x26
 81030fe:	2b00      	cmp	r3, #0
 8103100:	d1ee      	bne.n	81030e0 <_ff_push_const_addr+0x1a>
  }

  // Read the remaining 1-3 bytes from const app address
  uint8_t const bytes_rem = len & 0x03;
 8103102:	88fb      	ldrh	r3, [r7, #6]
 8103104:	b2db      	uxtb	r3, r3
 8103106:	f003 0303 	and.w	r3, r3, #3
 810310a:	77fb      	strb	r3, [r7, #31]
  if ( bytes_rem )
 810310c:	7ffb      	ldrb	r3, [r7, #31]
 810310e:	2b00      	cmp	r3, #0
 8103110:	d009      	beq.n	8103126 <_ff_push_const_addr+0x60>
  {
    uint32_t tmp32 = *reg_rx;
 8103112:	6a3b      	ldr	r3, [r7, #32]
 8103114:	681b      	ldr	r3, [r3, #0]
 8103116:	613b      	str	r3, [r7, #16]
    memcpy(ff_buf, &tmp32, bytes_rem);
 8103118:	7ffa      	ldrb	r2, [r7, #31]
 810311a:	f107 0310 	add.w	r3, r7, #16
 810311e:	4619      	mov	r1, r3
 8103120:	68f8      	ldr	r0, [r7, #12]
 8103122:	f00e fe47 	bl	8111db4 <memcpy>
  }
}
 8103126:	bf00      	nop
 8103128:	3728      	adds	r7, #40	; 0x28
 810312a:	46bd      	mov	sp, r7
 810312c:	bd80      	pop	{r7, pc}

0810312e <_ff_pull_const_addr>:

// Intended to be used to write to hardware USB FIFO in e.g. STM32
// where all data is written to a constant address in full word copies
static void _ff_pull_const_addr(void * app_buf, const uint8_t * ff_buf, uint16_t len)
{
 810312e:	b580      	push	{r7, lr}
 8103130:	b08a      	sub	sp, #40	; 0x28
 8103132:	af00      	add	r7, sp, #0
 8103134:	60f8      	str	r0, [r7, #12]
 8103136:	60b9      	str	r1, [r7, #8]
 8103138:	4613      	mov	r3, r2
 810313a:	80fb      	strh	r3, [r7, #6]
  volatile uint32_t * reg_tx = (volatile uint32_t *) app_buf;
 810313c:	68fb      	ldr	r3, [r7, #12]
 810313e:	623b      	str	r3, [r7, #32]

  // Write full available 32 bit words to const address
  uint16_t full_words = len >> 2;
 8103140:	88fb      	ldrh	r3, [r7, #6]
 8103142:	089b      	lsrs	r3, r3, #2
 8103144:	84fb      	strh	r3, [r7, #38]	; 0x26
  while(full_words--)
 8103146:	e008      	b.n	810315a <_ff_pull_const_addr+0x2c>
 8103148:	68bb      	ldr	r3, [r7, #8]
 810314a:	61bb      	str	r3, [r7, #24]
  return *((uint32_t const *) mem);
 810314c:	69bb      	ldr	r3, [r7, #24]
 810314e:	681a      	ldr	r2, [r3, #0]
  {
    *reg_tx = tu_unaligned_read32(ff_buf);
 8103150:	6a3b      	ldr	r3, [r7, #32]
 8103152:	601a      	str	r2, [r3, #0]
    ff_buf += 4;
 8103154:	68bb      	ldr	r3, [r7, #8]
 8103156:	3304      	adds	r3, #4
 8103158:	60bb      	str	r3, [r7, #8]
  while(full_words--)
 810315a:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 810315c:	1e5a      	subs	r2, r3, #1
 810315e:	84fa      	strh	r2, [r7, #38]	; 0x26
 8103160:	2b00      	cmp	r3, #0
 8103162:	d1f1      	bne.n	8103148 <_ff_pull_const_addr+0x1a>
  }

  // Write the remaining 1-3 bytes into const address
  uint8_t const bytes_rem = len & 0x03;
 8103164:	88fb      	ldrh	r3, [r7, #6]
 8103166:	b2db      	uxtb	r3, r3
 8103168:	f003 0303 	and.w	r3, r3, #3
 810316c:	77fb      	strb	r3, [r7, #31]
  if ( bytes_rem )
 810316e:	7ffb      	ldrb	r3, [r7, #31]
 8103170:	2b00      	cmp	r3, #0
 8103172:	d00b      	beq.n	810318c <_ff_pull_const_addr+0x5e>
  {
    uint32_t tmp32 = 0;
 8103174:	2300      	movs	r3, #0
 8103176:	617b      	str	r3, [r7, #20]
    memcpy(&tmp32, ff_buf, bytes_rem);
 8103178:	7ffa      	ldrb	r2, [r7, #31]
 810317a:	f107 0314 	add.w	r3, r7, #20
 810317e:	68b9      	ldr	r1, [r7, #8]
 8103180:	4618      	mov	r0, r3
 8103182:	f00e fe17 	bl	8111db4 <memcpy>

    *reg_tx = tmp32;
 8103186:	697a      	ldr	r2, [r7, #20]
 8103188:	6a3b      	ldr	r3, [r7, #32]
 810318a:	601a      	str	r2, [r3, #0]
  }
}
 810318c:	bf00      	nop
 810318e:	3728      	adds	r7, #40	; 0x28
 8103190:	46bd      	mov	sp, r7
 8103192:	bd80      	pop	{r7, pc}

08103194 <_ff_push>:

// send one item to fifo WITHOUT updating write pointer
static inline void _ff_push(tu_fifo_t* f, void const * app_buf, uint16_t rel)
{
 8103194:	b580      	push	{r7, lr}
 8103196:	b084      	sub	sp, #16
 8103198:	af00      	add	r7, sp, #0
 810319a:	60f8      	str	r0, [r7, #12]
 810319c:	60b9      	str	r1, [r7, #8]
 810319e:	4613      	mov	r3, r2
 81031a0:	80fb      	strh	r3, [r7, #6]
  memcpy(f->buffer + (rel * f->item_size), app_buf, f->item_size);
 81031a2:	68fb      	ldr	r3, [r7, #12]
 81031a4:	681b      	ldr	r3, [r3, #0]
 81031a6:	88fa      	ldrh	r2, [r7, #6]
 81031a8:	68f9      	ldr	r1, [r7, #12]
 81031aa:	88c9      	ldrh	r1, [r1, #6]
 81031ac:	f3c1 010e 	ubfx	r1, r1, #0, #15
 81031b0:	b289      	uxth	r1, r1
 81031b2:	fb01 f202 	mul.w	r2, r1, r2
 81031b6:	1898      	adds	r0, r3, r2
 81031b8:	68fb      	ldr	r3, [r7, #12]
 81031ba:	88db      	ldrh	r3, [r3, #6]
 81031bc:	f3c3 030e 	ubfx	r3, r3, #0, #15
 81031c0:	b29b      	uxth	r3, r3
 81031c2:	461a      	mov	r2, r3
 81031c4:	68b9      	ldr	r1, [r7, #8]
 81031c6:	f00e fdf5 	bl	8111db4 <memcpy>
}
 81031ca:	bf00      	nop
 81031cc:	3710      	adds	r7, #16
 81031ce:	46bd      	mov	sp, r7
 81031d0:	bd80      	pop	{r7, pc}

081031d2 <_ff_push_n>:

// send n items to fifo WITHOUT updating write pointer
static void _ff_push_n(tu_fifo_t* f, void const * app_buf, uint16_t n, uint16_t wr_ptr, tu_fifo_copy_mode_t copy_mode)
{
 81031d2:	b580      	push	{r7, lr}
 81031d4:	b08e      	sub	sp, #56	; 0x38
 81031d6:	af00      	add	r7, sp, #0
 81031d8:	60f8      	str	r0, [r7, #12]
 81031da:	60b9      	str	r1, [r7, #8]
 81031dc:	4611      	mov	r1, r2
 81031de:	461a      	mov	r2, r3
 81031e0:	460b      	mov	r3, r1
 81031e2:	80fb      	strh	r3, [r7, #6]
 81031e4:	4613      	mov	r3, r2
 81031e6:	80bb      	strh	r3, [r7, #4]
  uint16_t const lin_count = f->depth - wr_ptr;
 81031e8:	68fb      	ldr	r3, [r7, #12]
 81031ea:	889a      	ldrh	r2, [r3, #4]
 81031ec:	88bb      	ldrh	r3, [r7, #4]
 81031ee:	1ad3      	subs	r3, r2, r3
 81031f0:	84fb      	strh	r3, [r7, #38]	; 0x26
  uint16_t const wrap_count = n - lin_count;
 81031f2:	88fa      	ldrh	r2, [r7, #6]
 81031f4:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 81031f6:	1ad3      	subs	r3, r2, r3
 81031f8:	84bb      	strh	r3, [r7, #36]	; 0x24

  uint16_t lin_bytes = lin_count * f->item_size;
 81031fa:	68fb      	ldr	r3, [r7, #12]
 81031fc:	88db      	ldrh	r3, [r3, #6]
 81031fe:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8103202:	b29b      	uxth	r3, r3
 8103204:	461a      	mov	r2, r3
 8103206:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8103208:	fb13 f302 	smulbb	r3, r3, r2
 810320c:	847b      	strh	r3, [r7, #34]	; 0x22
  uint16_t wrap_bytes = wrap_count * f->item_size;
 810320e:	68fb      	ldr	r3, [r7, #12]
 8103210:	88db      	ldrh	r3, [r3, #6]
 8103212:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8103216:	b29b      	uxth	r3, r3
 8103218:	461a      	mov	r2, r3
 810321a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 810321c:	fb13 f302 	smulbb	r3, r3, r2
 8103220:	86fb      	strh	r3, [r7, #54]	; 0x36

  // current buffer of fifo
  uint8_t* ff_buf = f->buffer + (wr_ptr * f->item_size);
 8103222:	68fb      	ldr	r3, [r7, #12]
 8103224:	681b      	ldr	r3, [r3, #0]
 8103226:	88ba      	ldrh	r2, [r7, #4]
 8103228:	68f9      	ldr	r1, [r7, #12]
 810322a:	88c9      	ldrh	r1, [r1, #6]
 810322c:	f3c1 010e 	ubfx	r1, r1, #0, #15
 8103230:	b289      	uxth	r1, r1
 8103232:	fb01 f202 	mul.w	r2, r1, r2
 8103236:	4413      	add	r3, r2
 8103238:	633b      	str	r3, [r7, #48]	; 0x30

  switch (copy_mode)
 810323a:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 810323e:	2b00      	cmp	r3, #0
 8103240:	d002      	beq.n	8103248 <_ff_push_n+0x76>
 8103242:	2b01      	cmp	r3, #1
 8103244:	d022      	beq.n	810328c <_ff_push_n+0xba>
        // Write data wrapped part
        if (wrap_bytes > 0) _ff_push_const_addr(ff_buf, app_buf, wrap_bytes);
      }
      break;
  }
}
 8103246:	e09e      	b.n	8103386 <_ff_push_n+0x1b4>
      if(n <= lin_count)
 8103248:	88fa      	ldrh	r2, [r7, #6]
 810324a:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 810324c:	429a      	cmp	r2, r3
 810324e:	d80d      	bhi.n	810326c <_ff_push_n+0x9a>
        memcpy(ff_buf, app_buf, n*f->item_size);
 8103250:	88fb      	ldrh	r3, [r7, #6]
 8103252:	68fa      	ldr	r2, [r7, #12]
 8103254:	88d2      	ldrh	r2, [r2, #6]
 8103256:	f3c2 020e 	ubfx	r2, r2, #0, #15
 810325a:	b292      	uxth	r2, r2
 810325c:	fb02 f303 	mul.w	r3, r2, r3
 8103260:	461a      	mov	r2, r3
 8103262:	68b9      	ldr	r1, [r7, #8]
 8103264:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8103266:	f00e fda5 	bl	8111db4 <memcpy>
      break;
 810326a:	e08c      	b.n	8103386 <_ff_push_n+0x1b4>
        memcpy(ff_buf, app_buf, lin_bytes);
 810326c:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 810326e:	461a      	mov	r2, r3
 8103270:	68b9      	ldr	r1, [r7, #8]
 8103272:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8103274:	f00e fd9e 	bl	8111db4 <memcpy>
        memcpy(f->buffer, ((uint8_t const*) app_buf) + lin_bytes, wrap_bytes);
 8103278:	68fb      	ldr	r3, [r7, #12]
 810327a:	6818      	ldr	r0, [r3, #0]
 810327c:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 810327e:	68ba      	ldr	r2, [r7, #8]
 8103280:	4413      	add	r3, r2
 8103282:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8103284:	4619      	mov	r1, r3
 8103286:	f00e fd95 	bl	8111db4 <memcpy>
      break;
 810328a:	e07c      	b.n	8103386 <_ff_push_n+0x1b4>
      if(n <= lin_count)
 810328c:	88fa      	ldrh	r2, [r7, #6]
 810328e:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8103290:	429a      	cmp	r2, r3
 8103292:	d80f      	bhi.n	81032b4 <_ff_push_n+0xe2>
        _ff_push_const_addr(ff_buf, app_buf, n*f->item_size);
 8103294:	68fb      	ldr	r3, [r7, #12]
 8103296:	88db      	ldrh	r3, [r3, #6]
 8103298:	f3c3 030e 	ubfx	r3, r3, #0, #15
 810329c:	b29b      	uxth	r3, r3
 810329e:	461a      	mov	r2, r3
 81032a0:	88fb      	ldrh	r3, [r7, #6]
 81032a2:	fb13 f302 	smulbb	r3, r3, r2
 81032a6:	b29b      	uxth	r3, r3
 81032a8:	461a      	mov	r2, r3
 81032aa:	68b9      	ldr	r1, [r7, #8]
 81032ac:	6b38      	ldr	r0, [r7, #48]	; 0x30
 81032ae:	f7ff ff0a 	bl	81030c6 <_ff_push_const_addr>
      break;
 81032b2:	e067      	b.n	8103384 <_ff_push_n+0x1b2>
        uint16_t nLin_4n_bytes = lin_bytes & 0xFFFC;
 81032b4:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 81032b6:	f023 0303 	bic.w	r3, r3, #3
 81032ba:	843b      	strh	r3, [r7, #32]
        _ff_push_const_addr(ff_buf, app_buf, nLin_4n_bytes);
 81032bc:	8c3b      	ldrh	r3, [r7, #32]
 81032be:	461a      	mov	r2, r3
 81032c0:	68b9      	ldr	r1, [r7, #8]
 81032c2:	6b38      	ldr	r0, [r7, #48]	; 0x30
 81032c4:	f7ff feff 	bl	81030c6 <_ff_push_const_addr>
        ff_buf += nLin_4n_bytes;
 81032c8:	8c3b      	ldrh	r3, [r7, #32]
 81032ca:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 81032cc:	4413      	add	r3, r2
 81032ce:	633b      	str	r3, [r7, #48]	; 0x30
        uint8_t rem = lin_bytes & 0x03;
 81032d0:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 81032d2:	b2db      	uxtb	r3, r3
 81032d4:	f003 0303 	and.w	r3, r3, #3
 81032d8:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
        if (rem > 0)
 81032dc:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 81032e0:	2b00      	cmp	r3, #0
 81032e2:	d043      	beq.n	810336c <_ff_push_n+0x19a>
          volatile const uint32_t * rx_fifo = (volatile const uint32_t *) app_buf;
 81032e4:	68bb      	ldr	r3, [r7, #8]
 81032e6:	61fb      	str	r3, [r7, #28]
          uint8_t remrem = (uint8_t) tu_min16(wrap_bytes, 4-rem);
 81032e8:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 81032ec:	b29b      	uxth	r3, r3
 81032ee:	f1c3 0304 	rsb	r3, r3, #4
 81032f2:	b29a      	uxth	r2, r3
 81032f4:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 81032f6:	837b      	strh	r3, [r7, #26]
 81032f8:	4613      	mov	r3, r2
 81032fa:	833b      	strh	r3, [r7, #24]
TU_ATTR_ALWAYS_INLINE static inline uint16_t tu_min16 (uint16_t x, uint16_t y) { return (x < y) ? x : y; }
 81032fc:	8b7a      	ldrh	r2, [r7, #26]
 81032fe:	8b3b      	ldrh	r3, [r7, #24]
 8103300:	4293      	cmp	r3, r2
 8103302:	bf28      	it	cs
 8103304:	4613      	movcs	r3, r2
 8103306:	b29b      	uxth	r3, r3
 8103308:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
          wrap_bytes -= remrem;
 810330c:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8103310:	b29b      	uxth	r3, r3
 8103312:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8103314:	1ad3      	subs	r3, r2, r3
 8103316:	86fb      	strh	r3, [r7, #54]	; 0x36
          uint32_t tmp32 = *rx_fifo;
 8103318:	69fb      	ldr	r3, [r7, #28]
 810331a:	681b      	ldr	r3, [r3, #0]
 810331c:	617b      	str	r3, [r7, #20]
          uint8_t * src_u8 = ((uint8_t *) &tmp32);
 810331e:	f107 0314 	add.w	r3, r7, #20
 8103322:	62bb      	str	r3, [r7, #40]	; 0x28
          while(rem--) *ff_buf++ = *src_u8++;
 8103324:	e007      	b.n	8103336 <_ff_push_n+0x164>
 8103326:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8103328:	1c53      	adds	r3, r2, #1
 810332a:	62bb      	str	r3, [r7, #40]	; 0x28
 810332c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 810332e:	1c59      	adds	r1, r3, #1
 8103330:	6339      	str	r1, [r7, #48]	; 0x30
 8103332:	7812      	ldrb	r2, [r2, #0]
 8103334:	701a      	strb	r2, [r3, #0]
 8103336:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 810333a:	1e5a      	subs	r2, r3, #1
 810333c:	f887 202f 	strb.w	r2, [r7, #47]	; 0x2f
 8103340:	2b00      	cmp	r3, #0
 8103342:	d1f0      	bne.n	8103326 <_ff_push_n+0x154>
          ff_buf = f->buffer;
 8103344:	68fb      	ldr	r3, [r7, #12]
 8103346:	681b      	ldr	r3, [r3, #0]
 8103348:	633b      	str	r3, [r7, #48]	; 0x30
          while(remrem--) *ff_buf++ = *src_u8++;
 810334a:	e007      	b.n	810335c <_ff_push_n+0x18a>
 810334c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 810334e:	1c53      	adds	r3, r2, #1
 8103350:	62bb      	str	r3, [r7, #40]	; 0x28
 8103352:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8103354:	1c59      	adds	r1, r3, #1
 8103356:	6339      	str	r1, [r7, #48]	; 0x30
 8103358:	7812      	ldrb	r2, [r2, #0]
 810335a:	701a      	strb	r2, [r3, #0]
 810335c:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8103360:	1e5a      	subs	r2, r3, #1
 8103362:	f887 202e 	strb.w	r2, [r7, #46]	; 0x2e
 8103366:	2b00      	cmp	r3, #0
 8103368:	d1f0      	bne.n	810334c <_ff_push_n+0x17a>
 810336a:	e002      	b.n	8103372 <_ff_push_n+0x1a0>
          ff_buf = f->buffer; // wrap around to beginning
 810336c:	68fb      	ldr	r3, [r7, #12]
 810336e:	681b      	ldr	r3, [r3, #0]
 8103370:	633b      	str	r3, [r7, #48]	; 0x30
        if (wrap_bytes > 0) _ff_push_const_addr(ff_buf, app_buf, wrap_bytes);
 8103372:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8103374:	2b00      	cmp	r3, #0
 8103376:	d005      	beq.n	8103384 <_ff_push_n+0x1b2>
 8103378:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 810337a:	461a      	mov	r2, r3
 810337c:	68b9      	ldr	r1, [r7, #8]
 810337e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8103380:	f7ff fea1 	bl	81030c6 <_ff_push_const_addr>
      break;
 8103384:	bf00      	nop
}
 8103386:	bf00      	nop
 8103388:	3738      	adds	r7, #56	; 0x38
 810338a:	46bd      	mov	sp, r7
 810338c:	bd80      	pop	{r7, pc}

0810338e <_ff_pull>:

// get one item from fifo WITHOUT updating read pointer
static inline void _ff_pull(tu_fifo_t* f, void * app_buf, uint16_t rel)
{
 810338e:	b580      	push	{r7, lr}
 8103390:	b084      	sub	sp, #16
 8103392:	af00      	add	r7, sp, #0
 8103394:	60f8      	str	r0, [r7, #12]
 8103396:	60b9      	str	r1, [r7, #8]
 8103398:	4613      	mov	r3, r2
 810339a:	80fb      	strh	r3, [r7, #6]
  memcpy(app_buf, f->buffer + (rel * f->item_size), f->item_size);
 810339c:	68fb      	ldr	r3, [r7, #12]
 810339e:	681b      	ldr	r3, [r3, #0]
 81033a0:	88fa      	ldrh	r2, [r7, #6]
 81033a2:	68f9      	ldr	r1, [r7, #12]
 81033a4:	88c9      	ldrh	r1, [r1, #6]
 81033a6:	f3c1 010e 	ubfx	r1, r1, #0, #15
 81033aa:	b289      	uxth	r1, r1
 81033ac:	fb01 f202 	mul.w	r2, r1, r2
 81033b0:	1899      	adds	r1, r3, r2
 81033b2:	68fb      	ldr	r3, [r7, #12]
 81033b4:	88db      	ldrh	r3, [r3, #6]
 81033b6:	f3c3 030e 	ubfx	r3, r3, #0, #15
 81033ba:	b29b      	uxth	r3, r3
 81033bc:	461a      	mov	r2, r3
 81033be:	68b8      	ldr	r0, [r7, #8]
 81033c0:	f00e fcf8 	bl	8111db4 <memcpy>
}
 81033c4:	bf00      	nop
 81033c6:	3710      	adds	r7, #16
 81033c8:	46bd      	mov	sp, r7
 81033ca:	bd80      	pop	{r7, pc}

081033cc <_ff_pull_n>:

// get n items from fifo WITHOUT updating read pointer
static void _ff_pull_n(tu_fifo_t* f, void* app_buf, uint16_t n, uint16_t rd_ptr, tu_fifo_copy_mode_t copy_mode)
{
 81033cc:	b580      	push	{r7, lr}
 81033ce:	b08e      	sub	sp, #56	; 0x38
 81033d0:	af00      	add	r7, sp, #0
 81033d2:	60f8      	str	r0, [r7, #12]
 81033d4:	60b9      	str	r1, [r7, #8]
 81033d6:	4611      	mov	r1, r2
 81033d8:	461a      	mov	r2, r3
 81033da:	460b      	mov	r3, r1
 81033dc:	80fb      	strh	r3, [r7, #6]
 81033de:	4613      	mov	r3, r2
 81033e0:	80bb      	strh	r3, [r7, #4]
  uint16_t const lin_count = f->depth - rd_ptr;
 81033e2:	68fb      	ldr	r3, [r7, #12]
 81033e4:	889a      	ldrh	r2, [r3, #4]
 81033e6:	88bb      	ldrh	r3, [r7, #4]
 81033e8:	1ad3      	subs	r3, r2, r3
 81033ea:	84fb      	strh	r3, [r7, #38]	; 0x26
  uint16_t const wrap_count = n - lin_count; // only used if wrapped
 81033ec:	88fa      	ldrh	r2, [r7, #6]
 81033ee:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 81033f0:	1ad3      	subs	r3, r2, r3
 81033f2:	84bb      	strh	r3, [r7, #36]	; 0x24

  uint16_t lin_bytes = lin_count * f->item_size;
 81033f4:	68fb      	ldr	r3, [r7, #12]
 81033f6:	88db      	ldrh	r3, [r3, #6]
 81033f8:	f3c3 030e 	ubfx	r3, r3, #0, #15
 81033fc:	b29b      	uxth	r3, r3
 81033fe:	461a      	mov	r2, r3
 8103400:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8103402:	fb13 f302 	smulbb	r3, r3, r2
 8103406:	847b      	strh	r3, [r7, #34]	; 0x22
  uint16_t wrap_bytes = wrap_count * f->item_size;
 8103408:	68fb      	ldr	r3, [r7, #12]
 810340a:	88db      	ldrh	r3, [r3, #6]
 810340c:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8103410:	b29b      	uxth	r3, r3
 8103412:	461a      	mov	r2, r3
 8103414:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8103416:	fb13 f302 	smulbb	r3, r3, r2
 810341a:	86fb      	strh	r3, [r7, #54]	; 0x36

  // current buffer of fifo
  uint8_t* ff_buf = f->buffer + (rd_ptr * f->item_size);
 810341c:	68fb      	ldr	r3, [r7, #12]
 810341e:	681b      	ldr	r3, [r3, #0]
 8103420:	88ba      	ldrh	r2, [r7, #4]
 8103422:	68f9      	ldr	r1, [r7, #12]
 8103424:	88c9      	ldrh	r1, [r1, #6]
 8103426:	f3c1 010e 	ubfx	r1, r1, #0, #15
 810342a:	b289      	uxth	r1, r1
 810342c:	fb01 f202 	mul.w	r2, r1, r2
 8103430:	4413      	add	r3, r2
 8103432:	633b      	str	r3, [r7, #48]	; 0x30

  switch (copy_mode)
 8103434:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 8103438:	2b00      	cmp	r3, #0
 810343a:	d002      	beq.n	8103442 <_ff_pull_n+0x76>
 810343c:	2b01      	cmp	r3, #1
 810343e:	d022      	beq.n	8103486 <_ff_pull_n+0xba>
        // Read data wrapped part
        if (wrap_bytes > 0) _ff_pull_const_addr(app_buf, ff_buf, wrap_bytes);
      }
    break;

    default: break;
 8103440:	e0a0      	b.n	8103584 <_ff_pull_n+0x1b8>
      if ( n <= lin_count )
 8103442:	88fa      	ldrh	r2, [r7, #6]
 8103444:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8103446:	429a      	cmp	r2, r3
 8103448:	d80d      	bhi.n	8103466 <_ff_pull_n+0x9a>
        memcpy(app_buf, ff_buf, n*f->item_size);
 810344a:	88fb      	ldrh	r3, [r7, #6]
 810344c:	68fa      	ldr	r2, [r7, #12]
 810344e:	88d2      	ldrh	r2, [r2, #6]
 8103450:	f3c2 020e 	ubfx	r2, r2, #0, #15
 8103454:	b292      	uxth	r2, r2
 8103456:	fb02 f303 	mul.w	r3, r2, r3
 810345a:	461a      	mov	r2, r3
 810345c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 810345e:	68b8      	ldr	r0, [r7, #8]
 8103460:	f00e fca8 	bl	8111db4 <memcpy>
    break;
 8103464:	e08e      	b.n	8103584 <_ff_pull_n+0x1b8>
        memcpy(app_buf, ff_buf, lin_bytes);
 8103466:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8103468:	461a      	mov	r2, r3
 810346a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 810346c:	68b8      	ldr	r0, [r7, #8]
 810346e:	f00e fca1 	bl	8111db4 <memcpy>
        memcpy((uint8_t*) app_buf + lin_bytes, f->buffer, wrap_bytes);
 8103472:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8103474:	68ba      	ldr	r2, [r7, #8]
 8103476:	18d0      	adds	r0, r2, r3
 8103478:	68fb      	ldr	r3, [r7, #12]
 810347a:	681b      	ldr	r3, [r3, #0]
 810347c:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 810347e:	4619      	mov	r1, r3
 8103480:	f00e fc98 	bl	8111db4 <memcpy>
    break;
 8103484:	e07e      	b.n	8103584 <_ff_pull_n+0x1b8>
      if ( n <= lin_count )
 8103486:	88fa      	ldrh	r2, [r7, #6]
 8103488:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 810348a:	429a      	cmp	r2, r3
 810348c:	d80f      	bhi.n	81034ae <_ff_pull_n+0xe2>
        _ff_pull_const_addr(app_buf, ff_buf, n*f->item_size);
 810348e:	68fb      	ldr	r3, [r7, #12]
 8103490:	88db      	ldrh	r3, [r3, #6]
 8103492:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8103496:	b29b      	uxth	r3, r3
 8103498:	461a      	mov	r2, r3
 810349a:	88fb      	ldrh	r3, [r7, #6]
 810349c:	fb13 f302 	smulbb	r3, r3, r2
 81034a0:	b29b      	uxth	r3, r3
 81034a2:	461a      	mov	r2, r3
 81034a4:	6b39      	ldr	r1, [r7, #48]	; 0x30
 81034a6:	68b8      	ldr	r0, [r7, #8]
 81034a8:	f7ff fe41 	bl	810312e <_ff_pull_const_addr>
    break;
 81034ac:	e069      	b.n	8103582 <_ff_pull_n+0x1b6>
        uint16_t lin_4n_bytes = lin_bytes & 0xFFFC;
 81034ae:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 81034b0:	f023 0303 	bic.w	r3, r3, #3
 81034b4:	843b      	strh	r3, [r7, #32]
        _ff_pull_const_addr(app_buf, ff_buf, lin_4n_bytes);
 81034b6:	8c3b      	ldrh	r3, [r7, #32]
 81034b8:	461a      	mov	r2, r3
 81034ba:	6b39      	ldr	r1, [r7, #48]	; 0x30
 81034bc:	68b8      	ldr	r0, [r7, #8]
 81034be:	f7ff fe36 	bl	810312e <_ff_pull_const_addr>
        ff_buf += lin_4n_bytes;
 81034c2:	8c3b      	ldrh	r3, [r7, #32]
 81034c4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 81034c6:	4413      	add	r3, r2
 81034c8:	633b      	str	r3, [r7, #48]	; 0x30
        uint8_t rem = lin_bytes & 0x03;
 81034ca:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 81034cc:	b2db      	uxtb	r3, r3
 81034ce:	f003 0303 	and.w	r3, r3, #3
 81034d2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
        if (rem > 0)
 81034d6:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 81034da:	2b00      	cmp	r3, #0
 81034dc:	d045      	beq.n	810356a <_ff_pull_n+0x19e>
          volatile uint32_t * reg_tx = (volatile uint32_t *) app_buf;
 81034de:	68bb      	ldr	r3, [r7, #8]
 81034e0:	61fb      	str	r3, [r7, #28]
          uint8_t remrem = (uint8_t) tu_min16(wrap_bytes, 4-rem);
 81034e2:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 81034e6:	b29b      	uxth	r3, r3
 81034e8:	f1c3 0304 	rsb	r3, r3, #4
 81034ec:	b29a      	uxth	r2, r3
 81034ee:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 81034f0:	837b      	strh	r3, [r7, #26]
 81034f2:	4613      	mov	r3, r2
 81034f4:	833b      	strh	r3, [r7, #24]
 81034f6:	8b7a      	ldrh	r2, [r7, #26]
 81034f8:	8b3b      	ldrh	r3, [r7, #24]
 81034fa:	4293      	cmp	r3, r2
 81034fc:	bf28      	it	cs
 81034fe:	4613      	movcs	r3, r2
 8103500:	b29b      	uxth	r3, r3
 8103502:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
          wrap_bytes -= remrem;
 8103506:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 810350a:	b29b      	uxth	r3, r3
 810350c:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 810350e:	1ad3      	subs	r3, r2, r3
 8103510:	86fb      	strh	r3, [r7, #54]	; 0x36
          uint32_t tmp32=0;
 8103512:	2300      	movs	r3, #0
 8103514:	617b      	str	r3, [r7, #20]
          uint8_t * dst_u8 = (uint8_t *)&tmp32;
 8103516:	f107 0314 	add.w	r3, r7, #20
 810351a:	62bb      	str	r3, [r7, #40]	; 0x28
          while(rem--) *dst_u8++ = *ff_buf++;
 810351c:	e007      	b.n	810352e <_ff_pull_n+0x162>
 810351e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8103520:	1c53      	adds	r3, r2, #1
 8103522:	633b      	str	r3, [r7, #48]	; 0x30
 8103524:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8103526:	1c59      	adds	r1, r3, #1
 8103528:	62b9      	str	r1, [r7, #40]	; 0x28
 810352a:	7812      	ldrb	r2, [r2, #0]
 810352c:	701a      	strb	r2, [r3, #0]
 810352e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8103532:	1e5a      	subs	r2, r3, #1
 8103534:	f887 202f 	strb.w	r2, [r7, #47]	; 0x2f
 8103538:	2b00      	cmp	r3, #0
 810353a:	d1f0      	bne.n	810351e <_ff_pull_n+0x152>
          ff_buf = f->buffer;
 810353c:	68fb      	ldr	r3, [r7, #12]
 810353e:	681b      	ldr	r3, [r3, #0]
 8103540:	633b      	str	r3, [r7, #48]	; 0x30
          while(remrem--) *dst_u8++ = *ff_buf++;
 8103542:	e007      	b.n	8103554 <_ff_pull_n+0x188>
 8103544:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8103546:	1c53      	adds	r3, r2, #1
 8103548:	633b      	str	r3, [r7, #48]	; 0x30
 810354a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 810354c:	1c59      	adds	r1, r3, #1
 810354e:	62b9      	str	r1, [r7, #40]	; 0x28
 8103550:	7812      	ldrb	r2, [r2, #0]
 8103552:	701a      	strb	r2, [r3, #0]
 8103554:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8103558:	1e5a      	subs	r2, r3, #1
 810355a:	f887 202e 	strb.w	r2, [r7, #46]	; 0x2e
 810355e:	2b00      	cmp	r3, #0
 8103560:	d1f0      	bne.n	8103544 <_ff_pull_n+0x178>
          *reg_tx = tmp32;
 8103562:	697a      	ldr	r2, [r7, #20]
 8103564:	69fb      	ldr	r3, [r7, #28]
 8103566:	601a      	str	r2, [r3, #0]
 8103568:	e002      	b.n	8103570 <_ff_pull_n+0x1a4>
          ff_buf = f->buffer; // wrap around to beginning
 810356a:	68fb      	ldr	r3, [r7, #12]
 810356c:	681b      	ldr	r3, [r3, #0]
 810356e:	633b      	str	r3, [r7, #48]	; 0x30
        if (wrap_bytes > 0) _ff_pull_const_addr(app_buf, ff_buf, wrap_bytes);
 8103570:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8103572:	2b00      	cmp	r3, #0
 8103574:	d005      	beq.n	8103582 <_ff_pull_n+0x1b6>
 8103576:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8103578:	461a      	mov	r2, r3
 810357a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 810357c:	68b8      	ldr	r0, [r7, #8]
 810357e:	f7ff fdd6 	bl	810312e <_ff_pull_const_addr>
    break;
 8103582:	bf00      	nop
  }
}
 8103584:	bf00      	nop
 8103586:	3738      	adds	r7, #56	; 0x38
 8103588:	46bd      	mov	sp, r7
 810358a:	bd80      	pop	{r7, pc}

0810358c <advance_index>:
//--------------------------------------------------------------------+

// Advance an absolute index
// "absolute" index is only in the range of [0..2*depth)
static uint16_t advance_index(uint16_t depth, uint16_t idx, uint16_t offset)
{
 810358c:	b480      	push	{r7}
 810358e:	b085      	sub	sp, #20
 8103590:	af00      	add	r7, sp, #0
 8103592:	4603      	mov	r3, r0
 8103594:	80fb      	strh	r3, [r7, #6]
 8103596:	460b      	mov	r3, r1
 8103598:	80bb      	strh	r3, [r7, #4]
 810359a:	4613      	mov	r3, r2
 810359c:	807b      	strh	r3, [r7, #2]
  // We limit the index space of p such that a correct wrap around happens
  // Check for a wrap around or if we are in unused index space - This has to be checked first!!
  // We are exploiting the wrap around to the correct index
  uint16_t new_idx = (uint16_t) (idx + offset);
 810359e:	88ba      	ldrh	r2, [r7, #4]
 81035a0:	887b      	ldrh	r3, [r7, #2]
 81035a2:	4413      	add	r3, r2
 81035a4:	81fb      	strh	r3, [r7, #14]
  if ( (idx > new_idx) || (new_idx >= 2*depth) )
 81035a6:	88ba      	ldrh	r2, [r7, #4]
 81035a8:	89fb      	ldrh	r3, [r7, #14]
 81035aa:	429a      	cmp	r2, r3
 81035ac:	d804      	bhi.n	81035b8 <advance_index+0x2c>
 81035ae:	89fa      	ldrh	r2, [r7, #14]
 81035b0:	88fb      	ldrh	r3, [r7, #6]
 81035b2:	005b      	lsls	r3, r3, #1
 81035b4:	429a      	cmp	r2, r3
 81035b6:	db08      	blt.n	81035ca <advance_index+0x3e>
  {
    uint16_t const non_used_index_space = (uint16_t) (UINT16_MAX - (2*depth-1));
 81035b8:	88fb      	ldrh	r3, [r7, #6]
 81035ba:	005b      	lsls	r3, r3, #1
 81035bc:	b29b      	uxth	r3, r3
 81035be:	425b      	negs	r3, r3
 81035c0:	81bb      	strh	r3, [r7, #12]
    new_idx = (uint16_t) (new_idx + non_used_index_space);
 81035c2:	89fa      	ldrh	r2, [r7, #14]
 81035c4:	89bb      	ldrh	r3, [r7, #12]
 81035c6:	4413      	add	r3, r2
 81035c8:	81fb      	strh	r3, [r7, #14]
  }

  return new_idx;
 81035ca:	89fb      	ldrh	r3, [r7, #14]
}
 81035cc:	4618      	mov	r0, r3
 81035ce:	3714      	adds	r7, #20
 81035d0:	46bd      	mov	sp, r7
 81035d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 81035d6:	4770      	bx	lr

081035d8 <_tu_fifo_peek>:
}

// Works on local copies of w and r
// Must be protected by mutexes since in case of an overflow read pointer gets modified
static bool _tu_fifo_peek(tu_fifo_t* f, void * p_buffer, uint16_t wr_idx, uint16_t rd_idx)
{
 81035d8:	b580      	push	{r7, lr}
 81035da:	b08a      	sub	sp, #40	; 0x28
 81035dc:	af00      	add	r7, sp, #0
 81035de:	60f8      	str	r0, [r7, #12]
 81035e0:	60b9      	str	r1, [r7, #8]
 81035e2:	4611      	mov	r1, r2
 81035e4:	461a      	mov	r2, r3
 81035e6:	460b      	mov	r3, r1
 81035e8:	80fb      	strh	r3, [r7, #6]
 81035ea:	4613      	mov	r3, r2
 81035ec:	80bb      	strh	r3, [r7, #4]
  uint16_t cnt = _ff_count(f->depth, wr_idx, rd_idx);
 81035ee:	68fb      	ldr	r3, [r7, #12]
 81035f0:	889b      	ldrh	r3, [r3, #4]
 81035f2:	847b      	strh	r3, [r7, #34]	; 0x22
 81035f4:	88fb      	ldrh	r3, [r7, #6]
 81035f6:	843b      	strh	r3, [r7, #32]
 81035f8:	88bb      	ldrh	r3, [r7, #4]
 81035fa:	83fb      	strh	r3, [r7, #30]
  if (wr_idx >= rd_idx)
 81035fc:	8c3a      	ldrh	r2, [r7, #32]
 81035fe:	8bfb      	ldrh	r3, [r7, #30]
 8103600:	429a      	cmp	r2, r3
 8103602:	d304      	bcc.n	810360e <_tu_fifo_peek+0x36>
    return (uint16_t) (wr_idx - rd_idx);
 8103604:	8c3a      	ldrh	r2, [r7, #32]
 8103606:	8bfb      	ldrh	r3, [r7, #30]
 8103608:	1ad3      	subs	r3, r2, r3
 810360a:	b29b      	uxth	r3, r3
 810360c:	e008      	b.n	8103620 <_tu_fifo_peek+0x48>
    return (uint16_t) (2*depth - (rd_idx - wr_idx));
 810360e:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8103610:	005b      	lsls	r3, r3, #1
 8103612:	b29a      	uxth	r2, r3
 8103614:	8c39      	ldrh	r1, [r7, #32]
 8103616:	8bfb      	ldrh	r3, [r7, #30]
 8103618:	1acb      	subs	r3, r1, r3
 810361a:	b29b      	uxth	r3, r3
 810361c:	4413      	add	r3, r2
 810361e:	b29b      	uxth	r3, r3
  uint16_t cnt = _ff_count(f->depth, wr_idx, rd_idx);
 8103620:	84fb      	strh	r3, [r7, #38]	; 0x26

  // nothing to peek
  if ( cnt == 0 ) return false;
 8103622:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8103624:	2b00      	cmp	r3, #0
 8103626:	d101      	bne.n	810362c <_tu_fifo_peek+0x54>
 8103628:	2300      	movs	r3, #0
 810362a:	e037      	b.n	810369c <_tu_fifo_peek+0xc4>

  // Check overflow and correct if required
  if ( cnt > f->depth )
 810362c:	68fb      	ldr	r3, [r7, #12]
 810362e:	889b      	ldrh	r3, [r3, #4]
 8103630:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8103632:	429a      	cmp	r2, r3
 8103634:	d91b      	bls.n	810366e <_tu_fifo_peek+0x96>
 8103636:	68fb      	ldr	r3, [r7, #12]
 8103638:	61bb      	str	r3, [r7, #24]
 810363a:	88fb      	ldrh	r3, [r7, #6]
 810363c:	82fb      	strh	r3, [r7, #22]
  if ( wr_idx >= f->depth )
 810363e:	69bb      	ldr	r3, [r7, #24]
 8103640:	889b      	ldrh	r3, [r3, #4]
 8103642:	8afa      	ldrh	r2, [r7, #22]
 8103644:	429a      	cmp	r2, r3
 8103646:	d305      	bcc.n	8103654 <_tu_fifo_peek+0x7c>
    rd_idx = wr_idx - f->depth;
 8103648:	69bb      	ldr	r3, [r7, #24]
 810364a:	889b      	ldrh	r3, [r3, #4]
 810364c:	8afa      	ldrh	r2, [r7, #22]
 810364e:	1ad3      	subs	r3, r2, r3
 8103650:	82bb      	strh	r3, [r7, #20]
 8103652:	e004      	b.n	810365e <_tu_fifo_peek+0x86>
    rd_idx = wr_idx + f->depth;
 8103654:	69bb      	ldr	r3, [r7, #24]
 8103656:	889a      	ldrh	r2, [r3, #4]
 8103658:	8afb      	ldrh	r3, [r7, #22]
 810365a:	4413      	add	r3, r2
 810365c:	82bb      	strh	r3, [r7, #20]
  f->rd_idx = rd_idx;
 810365e:	69bb      	ldr	r3, [r7, #24]
 8103660:	8aba      	ldrh	r2, [r7, #20]
 8103662:	815a      	strh	r2, [r3, #10]
  return rd_idx;
 8103664:	8abb      	ldrh	r3, [r7, #20]
  {
    rd_idx = _ff_correct_read_index(f, wr_idx);
 8103666:	80bb      	strh	r3, [r7, #4]
    cnt = f->depth;
 8103668:	68fb      	ldr	r3, [r7, #12]
 810366a:	889b      	ldrh	r3, [r3, #4]
 810366c:	84fb      	strh	r3, [r7, #38]	; 0x26
  }

  uint16_t rd_ptr = idx2ptr(f->depth, rd_idx);
 810366e:	68fb      	ldr	r3, [r7, #12]
 8103670:	889b      	ldrh	r3, [r3, #4]
 8103672:	827b      	strh	r3, [r7, #18]
 8103674:	88bb      	ldrh	r3, [r7, #4]
 8103676:	823b      	strh	r3, [r7, #16]
  while ( idx >= depth ) idx -= depth;
 8103678:	e003      	b.n	8103682 <_tu_fifo_peek+0xaa>
 810367a:	8a3a      	ldrh	r2, [r7, #16]
 810367c:	8a7b      	ldrh	r3, [r7, #18]
 810367e:	1ad3      	subs	r3, r2, r3
 8103680:	823b      	strh	r3, [r7, #16]
 8103682:	8a7a      	ldrh	r2, [r7, #18]
 8103684:	8a3b      	ldrh	r3, [r7, #16]
 8103686:	429a      	cmp	r2, r3
 8103688:	d9f7      	bls.n	810367a <_tu_fifo_peek+0xa2>
  return idx;
 810368a:	8a3b      	ldrh	r3, [r7, #16]
  uint16_t rd_ptr = idx2ptr(f->depth, rd_idx);
 810368c:	84bb      	strh	r3, [r7, #36]	; 0x24

  // Peek data
  _ff_pull(f, p_buffer, rd_ptr);
 810368e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8103690:	461a      	mov	r2, r3
 8103692:	68b9      	ldr	r1, [r7, #8]
 8103694:	68f8      	ldr	r0, [r7, #12]
 8103696:	f7ff fe7a 	bl	810338e <_ff_pull>

  return true;
 810369a:	2301      	movs	r3, #1
}
 810369c:	4618      	mov	r0, r3
 810369e:	3728      	adds	r7, #40	; 0x28
 81036a0:	46bd      	mov	sp, r7
 81036a2:	bd80      	pop	{r7, pc}

081036a4 <_tu_fifo_peek_n>:

// Works on local copies of w and r
// Must be protected by mutexes since in case of an overflow read pointer gets modified
static uint16_t _tu_fifo_peek_n(tu_fifo_t* f, void * p_buffer, uint16_t n, uint16_t wr_idx, uint16_t rd_idx, tu_fifo_copy_mode_t copy_mode)
{
 81036a4:	b580      	push	{r7, lr}
 81036a6:	b08c      	sub	sp, #48	; 0x30
 81036a8:	af02      	add	r7, sp, #8
 81036aa:	60f8      	str	r0, [r7, #12]
 81036ac:	60b9      	str	r1, [r7, #8]
 81036ae:	4611      	mov	r1, r2
 81036b0:	461a      	mov	r2, r3
 81036b2:	460b      	mov	r3, r1
 81036b4:	80fb      	strh	r3, [r7, #6]
 81036b6:	4613      	mov	r3, r2
 81036b8:	80bb      	strh	r3, [r7, #4]
  uint16_t cnt = _ff_count(f->depth, wr_idx, rd_idx);
 81036ba:	68fb      	ldr	r3, [r7, #12]
 81036bc:	889b      	ldrh	r3, [r3, #4]
 81036be:	847b      	strh	r3, [r7, #34]	; 0x22
 81036c0:	88bb      	ldrh	r3, [r7, #4]
 81036c2:	843b      	strh	r3, [r7, #32]
 81036c4:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 81036c6:	83fb      	strh	r3, [r7, #30]
  if (wr_idx >= rd_idx)
 81036c8:	8c3a      	ldrh	r2, [r7, #32]
 81036ca:	8bfb      	ldrh	r3, [r7, #30]
 81036cc:	429a      	cmp	r2, r3
 81036ce:	d304      	bcc.n	81036da <_tu_fifo_peek_n+0x36>
    return (uint16_t) (wr_idx - rd_idx);
 81036d0:	8c3a      	ldrh	r2, [r7, #32]
 81036d2:	8bfb      	ldrh	r3, [r7, #30]
 81036d4:	1ad3      	subs	r3, r2, r3
 81036d6:	b29b      	uxth	r3, r3
 81036d8:	e008      	b.n	81036ec <_tu_fifo_peek_n+0x48>
    return (uint16_t) (2*depth - (rd_idx - wr_idx));
 81036da:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 81036dc:	005b      	lsls	r3, r3, #1
 81036de:	b29a      	uxth	r2, r3
 81036e0:	8c39      	ldrh	r1, [r7, #32]
 81036e2:	8bfb      	ldrh	r3, [r7, #30]
 81036e4:	1acb      	subs	r3, r1, r3
 81036e6:	b29b      	uxth	r3, r3
 81036e8:	4413      	add	r3, r2
 81036ea:	b29b      	uxth	r3, r3
  uint16_t cnt = _ff_count(f->depth, wr_idx, rd_idx);
 81036ec:	84fb      	strh	r3, [r7, #38]	; 0x26

  // nothing to peek
  if ( cnt == 0 ) return 0;
 81036ee:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 81036f0:	2b00      	cmp	r3, #0
 81036f2:	d101      	bne.n	81036f8 <_tu_fifo_peek_n+0x54>
 81036f4:	2300      	movs	r3, #0
 81036f6:	e041      	b.n	810377c <_tu_fifo_peek_n+0xd8>

  // Check overflow and correct if required
  if ( cnt > f->depth )
 81036f8:	68fb      	ldr	r3, [r7, #12]
 81036fa:	889b      	ldrh	r3, [r3, #4]
 81036fc:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 81036fe:	429a      	cmp	r2, r3
 8103700:	d91b      	bls.n	810373a <_tu_fifo_peek_n+0x96>
 8103702:	68fb      	ldr	r3, [r7, #12]
 8103704:	61bb      	str	r3, [r7, #24]
 8103706:	88bb      	ldrh	r3, [r7, #4]
 8103708:	82fb      	strh	r3, [r7, #22]
  if ( wr_idx >= f->depth )
 810370a:	69bb      	ldr	r3, [r7, #24]
 810370c:	889b      	ldrh	r3, [r3, #4]
 810370e:	8afa      	ldrh	r2, [r7, #22]
 8103710:	429a      	cmp	r2, r3
 8103712:	d305      	bcc.n	8103720 <_tu_fifo_peek_n+0x7c>
    rd_idx = wr_idx - f->depth;
 8103714:	69bb      	ldr	r3, [r7, #24]
 8103716:	889b      	ldrh	r3, [r3, #4]
 8103718:	8afa      	ldrh	r2, [r7, #22]
 810371a:	1ad3      	subs	r3, r2, r3
 810371c:	82bb      	strh	r3, [r7, #20]
 810371e:	e004      	b.n	810372a <_tu_fifo_peek_n+0x86>
    rd_idx = wr_idx + f->depth;
 8103720:	69bb      	ldr	r3, [r7, #24]
 8103722:	889a      	ldrh	r2, [r3, #4]
 8103724:	8afb      	ldrh	r3, [r7, #22]
 8103726:	4413      	add	r3, r2
 8103728:	82bb      	strh	r3, [r7, #20]
  f->rd_idx = rd_idx;
 810372a:	69bb      	ldr	r3, [r7, #24]
 810372c:	8aba      	ldrh	r2, [r7, #20]
 810372e:	815a      	strh	r2, [r3, #10]
  return rd_idx;
 8103730:	8abb      	ldrh	r3, [r7, #20]
  {
    rd_idx = _ff_correct_read_index(f, wr_idx);
 8103732:	863b      	strh	r3, [r7, #48]	; 0x30
    cnt = f->depth;
 8103734:	68fb      	ldr	r3, [r7, #12]
 8103736:	889b      	ldrh	r3, [r3, #4]
 8103738:	84fb      	strh	r3, [r7, #38]	; 0x26
  }

  // Check if we can read something at and after offset - if too less is available we read what remains
  if ( cnt < n ) n = cnt;
 810373a:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 810373c:	88fb      	ldrh	r3, [r7, #6]
 810373e:	429a      	cmp	r2, r3
 8103740:	d201      	bcs.n	8103746 <_tu_fifo_peek_n+0xa2>
 8103742:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8103744:	80fb      	strh	r3, [r7, #6]

  uint16_t rd_ptr = idx2ptr(f->depth, rd_idx);
 8103746:	68fb      	ldr	r3, [r7, #12]
 8103748:	889b      	ldrh	r3, [r3, #4]
 810374a:	827b      	strh	r3, [r7, #18]
 810374c:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 810374e:	823b      	strh	r3, [r7, #16]
  while ( idx >= depth ) idx -= depth;
 8103750:	e003      	b.n	810375a <_tu_fifo_peek_n+0xb6>
 8103752:	8a3a      	ldrh	r2, [r7, #16]
 8103754:	8a7b      	ldrh	r3, [r7, #18]
 8103756:	1ad3      	subs	r3, r2, r3
 8103758:	823b      	strh	r3, [r7, #16]
 810375a:	8a7a      	ldrh	r2, [r7, #18]
 810375c:	8a3b      	ldrh	r3, [r7, #16]
 810375e:	429a      	cmp	r2, r3
 8103760:	d9f7      	bls.n	8103752 <_tu_fifo_peek_n+0xae>
  return idx;
 8103762:	8a3b      	ldrh	r3, [r7, #16]
  uint16_t rd_ptr = idx2ptr(f->depth, rd_idx);
 8103764:	84bb      	strh	r3, [r7, #36]	; 0x24

  // Peek data
  _ff_pull_n(f, p_buffer, n, rd_ptr, copy_mode);
 8103766:	8cb9      	ldrh	r1, [r7, #36]	; 0x24
 8103768:	88fa      	ldrh	r2, [r7, #6]
 810376a:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 810376e:	9300      	str	r3, [sp, #0]
 8103770:	460b      	mov	r3, r1
 8103772:	68b9      	ldr	r1, [r7, #8]
 8103774:	68f8      	ldr	r0, [r7, #12]
 8103776:	f7ff fe29 	bl	81033cc <_ff_pull_n>

  return n;
 810377a:	88fb      	ldrh	r3, [r7, #6]
}
 810377c:	4618      	mov	r0, r3
 810377e:	3728      	adds	r7, #40	; 0x28
 8103780:	46bd      	mov	sp, r7
 8103782:	bd80      	pop	{r7, pc}

08103784 <_tu_fifo_write_n>:

static uint16_t _tu_fifo_write_n(tu_fifo_t* f, const void * data, uint16_t n, tu_fifo_copy_mode_t copy_mode)
{
 8103784:	b580      	push	{r7, lr}
 8103786:	b092      	sub	sp, #72	; 0x48
 8103788:	af02      	add	r7, sp, #8
 810378a:	60f8      	str	r0, [r7, #12]
 810378c:	60b9      	str	r1, [r7, #8]
 810378e:	4611      	mov	r1, r2
 8103790:	461a      	mov	r2, r3
 8103792:	460b      	mov	r3, r1
 8103794:	80fb      	strh	r3, [r7, #6]
 8103796:	4613      	mov	r3, r2
 8103798:	717b      	strb	r3, [r7, #5]
  if ( n == 0 ) return 0;
 810379a:	88fb      	ldrh	r3, [r7, #6]
 810379c:	2b00      	cmp	r3, #0
 810379e:	d101      	bne.n	81037a4 <_tu_fifo_write_n+0x20>
 81037a0:	2300      	movs	r3, #0
 81037a2:	e0bc      	b.n	810391e <_tu_fifo_write_n+0x19a>

  _ff_lock(f->mutex_wr);

  uint16_t wr_idx = f->wr_idx;
 81037a4:	68fb      	ldr	r3, [r7, #12]
 81037a6:	891b      	ldrh	r3, [r3, #8]
 81037a8:	87fb      	strh	r3, [r7, #62]	; 0x3e
  uint16_t rd_idx = f->rd_idx;
 81037aa:	68fb      	ldr	r3, [r7, #12]
 81037ac:	895b      	ldrh	r3, [r3, #10]
 81037ae:	86fb      	strh	r3, [r7, #54]	; 0x36

  uint8_t const* buf8 = (uint8_t const*) data;
 81037b0:	68bb      	ldr	r3, [r7, #8]
 81037b2:	63bb      	str	r3, [r7, #56]	; 0x38

  TU_LOG(TU_FIFO_DBG, "rd = %3u, wr = %3u, count = %3u, remain = %3u, n = %3u:  ",
                       rd_idx, wr_idx, _ff_count(f->depth, wr_idx, rd_idx), _ff_remaining(f->depth, wr_idx, rd_idx), n);

  if ( !f->overwritable )
 81037b4:	68fb      	ldr	r3, [r7, #12]
 81037b6:	79db      	ldrb	r3, [r3, #7]
 81037b8:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 81037bc:	b2db      	uxtb	r3, r3
 81037be:	f083 0301 	eor.w	r3, r3, #1
 81037c2:	b2db      	uxtb	r3, r3
 81037c4:	2b00      	cmp	r3, #0
 81037c6:	d036      	beq.n	8103836 <_tu_fifo_write_n+0xb2>
  {
    // limit up to full
    uint16_t const remain = _ff_remaining(f->depth, wr_idx, rd_idx);
 81037c8:	68fb      	ldr	r3, [r7, #12]
 81037ca:	889b      	ldrh	r3, [r3, #4]
 81037cc:	857b      	strh	r3, [r7, #42]	; 0x2a
 81037ce:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 81037d0:	853b      	strh	r3, [r7, #40]	; 0x28
 81037d2:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 81037d4:	84fb      	strh	r3, [r7, #38]	; 0x26
 81037d6:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 81037d8:	84bb      	strh	r3, [r7, #36]	; 0x24
 81037da:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 81037dc:	847b      	strh	r3, [r7, #34]	; 0x22
 81037de:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 81037e0:	843b      	strh	r3, [r7, #32]
  if (wr_idx >= rd_idx)
 81037e2:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 81037e4:	8c3b      	ldrh	r3, [r7, #32]
 81037e6:	429a      	cmp	r2, r3
 81037e8:	d304      	bcc.n	81037f4 <_tu_fifo_write_n+0x70>
    return (uint16_t) (wr_idx - rd_idx);
 81037ea:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 81037ec:	8c3b      	ldrh	r3, [r7, #32]
 81037ee:	1ad3      	subs	r3, r2, r3
 81037f0:	b29b      	uxth	r3, r3
 81037f2:	e008      	b.n	8103806 <_tu_fifo_write_n+0x82>
    return (uint16_t) (2*depth - (rd_idx - wr_idx));
 81037f4:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 81037f6:	005b      	lsls	r3, r3, #1
 81037f8:	b29a      	uxth	r2, r3
 81037fa:	8c79      	ldrh	r1, [r7, #34]	; 0x22
 81037fc:	8c3b      	ldrh	r3, [r7, #32]
 81037fe:	1acb      	subs	r3, r1, r3
 8103800:	b29b      	uxth	r3, r3
 8103802:	4413      	add	r3, r2
 8103804:	b29b      	uxth	r3, r3
  uint16_t const count = _ff_count(depth, wr_idx, rd_idx);
 8103806:	83fb      	strh	r3, [r7, #30]
  return (depth > count) ? (depth - count) : 0;
 8103808:	8d7a      	ldrh	r2, [r7, #42]	; 0x2a
 810380a:	8bfb      	ldrh	r3, [r7, #30]
 810380c:	429a      	cmp	r2, r3
 810380e:	d904      	bls.n	810381a <_tu_fifo_write_n+0x96>
 8103810:	8d7a      	ldrh	r2, [r7, #42]	; 0x2a
 8103812:	8bfb      	ldrh	r3, [r7, #30]
 8103814:	1ad3      	subs	r3, r2, r3
 8103816:	b29b      	uxth	r3, r3
 8103818:	e000      	b.n	810381c <_tu_fifo_write_n+0x98>
 810381a:	2300      	movs	r3, #0
    uint16_t const remain = _ff_remaining(f->depth, wr_idx, rd_idx);
 810381c:	867b      	strh	r3, [r7, #50]	; 0x32
 810381e:	88fb      	ldrh	r3, [r7, #6]
 8103820:	85fb      	strh	r3, [r7, #46]	; 0x2e
 8103822:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 8103824:	85bb      	strh	r3, [r7, #44]	; 0x2c
 8103826:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8103828:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 810382a:	4293      	cmp	r3, r2
 810382c:	bf28      	it	cs
 810382e:	4613      	movcs	r3, r2
 8103830:	b29b      	uxth	r3, r3
    n = tu_min16(n, remain);
 8103832:	80fb      	strh	r3, [r7, #6]
 8103834:	e04b      	b.n	81038ce <_tu_fifo_write_n+0x14a>
  {
    // In over-writable mode, fifo_write() is allowed even when fifo is full. In such case,
    // oldest data in fifo i.e at read pointer data will be overwritten
    // Note: we can modify read buffer contents but we must not modify the read index itself within a write function!
    // Since it would end up in a race condition with read functions!
    if ( n >= f->depth )
 8103836:	68fb      	ldr	r3, [r7, #12]
 8103838:	889b      	ldrh	r3, [r3, #4]
 810383a:	88fa      	ldrh	r2, [r7, #6]
 810383c:	429a      	cmp	r2, r3
 810383e:	d317      	bcc.n	8103870 <_tu_fifo_write_n+0xec>
    {
      // Only copy last part
      if ( copy_mode == TU_FIFO_COPY_INC )
 8103840:	797b      	ldrb	r3, [r7, #5]
 8103842:	2b00      	cmp	r3, #0
 8103844:	d10e      	bne.n	8103864 <_tu_fifo_write_n+0xe0>
      {
        buf8 += (n - f->depth) * f->item_size;
 8103846:	88fb      	ldrh	r3, [r7, #6]
 8103848:	68fa      	ldr	r2, [r7, #12]
 810384a:	8892      	ldrh	r2, [r2, #4]
 810384c:	1a9b      	subs	r3, r3, r2
 810384e:	68fa      	ldr	r2, [r7, #12]
 8103850:	88d2      	ldrh	r2, [r2, #6]
 8103852:	f3c2 020e 	ubfx	r2, r2, #0, #15
 8103856:	b292      	uxth	r2, r2
 8103858:	fb02 f303 	mul.w	r3, r2, r3
 810385c:	461a      	mov	r2, r3
 810385e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8103860:	4413      	add	r3, r2
 8103862:	63bb      	str	r3, [r7, #56]	; 0x38
      {
        // TODO should read from hw fifo to discard data, however reading an odd number could
        // accidentally discard data.
      }

      n = f->depth;
 8103864:	68fb      	ldr	r3, [r7, #12]
 8103866:	889b      	ldrh	r3, [r3, #4]
 8103868:	80fb      	strh	r3, [r7, #6]

      // We start writing at the read pointer's position since we fill the whole buffer
      wr_idx = rd_idx;
 810386a:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 810386c:	87fb      	strh	r3, [r7, #62]	; 0x3e
 810386e:	e02e      	b.n	81038ce <_tu_fifo_write_n+0x14a>
    }
    else
    {
      uint16_t const overflowable_count = _ff_count(f->depth, wr_idx, rd_idx);
 8103870:	68fb      	ldr	r3, [r7, #12]
 8103872:	889b      	ldrh	r3, [r3, #4]
 8103874:	83bb      	strh	r3, [r7, #28]
 8103876:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8103878:	837b      	strh	r3, [r7, #26]
 810387a:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 810387c:	833b      	strh	r3, [r7, #24]
  if (wr_idx >= rd_idx)
 810387e:	8b7a      	ldrh	r2, [r7, #26]
 8103880:	8b3b      	ldrh	r3, [r7, #24]
 8103882:	429a      	cmp	r2, r3
 8103884:	d304      	bcc.n	8103890 <_tu_fifo_write_n+0x10c>
    return (uint16_t) (wr_idx - rd_idx);
 8103886:	8b7a      	ldrh	r2, [r7, #26]
 8103888:	8b3b      	ldrh	r3, [r7, #24]
 810388a:	1ad3      	subs	r3, r2, r3
 810388c:	b29b      	uxth	r3, r3
 810388e:	e008      	b.n	81038a2 <_tu_fifo_write_n+0x11e>
    return (uint16_t) (2*depth - (rd_idx - wr_idx));
 8103890:	8bbb      	ldrh	r3, [r7, #28]
 8103892:	005b      	lsls	r3, r3, #1
 8103894:	b29a      	uxth	r2, r3
 8103896:	8b79      	ldrh	r1, [r7, #26]
 8103898:	8b3b      	ldrh	r3, [r7, #24]
 810389a:	1acb      	subs	r3, r1, r3
 810389c:	b29b      	uxth	r3, r3
 810389e:	4413      	add	r3, r2
 81038a0:	b29b      	uxth	r3, r3
      uint16_t const overflowable_count = _ff_count(f->depth, wr_idx, rd_idx);
 81038a2:	86bb      	strh	r3, [r7, #52]	; 0x34
      if (overflowable_count + n >= 2*f->depth)
 81038a4:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 81038a6:	88fb      	ldrh	r3, [r7, #6]
 81038a8:	441a      	add	r2, r3
 81038aa:	68fb      	ldr	r3, [r7, #12]
 81038ac:	889b      	ldrh	r3, [r3, #4]
 81038ae:	005b      	lsls	r3, r3, #1
 81038b0:	429a      	cmp	r2, r3
 81038b2:	db0c      	blt.n	81038ce <_tu_fifo_write_n+0x14a>
      {
        // Double overflowed
        // Index is bigger than the allowed range [0,2*depth)
        // re-position write index to have a full fifo after pushed
        wr_idx = advance_index(f->depth, rd_idx, f->depth - n);
 81038b4:	68fb      	ldr	r3, [r7, #12]
 81038b6:	8898      	ldrh	r0, [r3, #4]
 81038b8:	68fb      	ldr	r3, [r7, #12]
 81038ba:	889a      	ldrh	r2, [r3, #4]
 81038bc:	88fb      	ldrh	r3, [r7, #6]
 81038be:	1ad3      	subs	r3, r2, r3
 81038c0:	b29a      	uxth	r2, r3
 81038c2:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 81038c4:	4619      	mov	r1, r3
 81038c6:	f7ff fe61 	bl	810358c <advance_index>
 81038ca:	4603      	mov	r3, r0
 81038cc:	87fb      	strh	r3, [r7, #62]	; 0x3e
        // we will correct (re-position) read index later on in fifo_read() function
      }
    }
  }

  if (n)
 81038ce:	88fb      	ldrh	r3, [r7, #6]
 81038d0:	2b00      	cmp	r3, #0
 81038d2:	d023      	beq.n	810391c <_tu_fifo_write_n+0x198>
  {
    uint16_t wr_ptr = idx2ptr(f->depth, wr_idx);
 81038d4:	68fb      	ldr	r3, [r7, #12]
 81038d6:	889b      	ldrh	r3, [r3, #4]
 81038d8:	82fb      	strh	r3, [r7, #22]
 81038da:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 81038dc:	82bb      	strh	r3, [r7, #20]
  while ( idx >= depth ) idx -= depth;
 81038de:	e003      	b.n	81038e8 <_tu_fifo_write_n+0x164>
 81038e0:	8aba      	ldrh	r2, [r7, #20]
 81038e2:	8afb      	ldrh	r3, [r7, #22]
 81038e4:	1ad3      	subs	r3, r2, r3
 81038e6:	82bb      	strh	r3, [r7, #20]
 81038e8:	8afa      	ldrh	r2, [r7, #22]
 81038ea:	8abb      	ldrh	r3, [r7, #20]
 81038ec:	429a      	cmp	r2, r3
 81038ee:	d9f7      	bls.n	81038e0 <_tu_fifo_write_n+0x15c>
  return idx;
 81038f0:	8abb      	ldrh	r3, [r7, #20]
    uint16_t wr_ptr = idx2ptr(f->depth, wr_idx);
 81038f2:	863b      	strh	r3, [r7, #48]	; 0x30

    TU_LOG(TU_FIFO_DBG, "actual_n = %u, wr_ptr = %u", n, wr_ptr);

    // Write data
    _ff_push_n(f, buf8, n, wr_ptr, copy_mode);
 81038f4:	8e39      	ldrh	r1, [r7, #48]	; 0x30
 81038f6:	88fa      	ldrh	r2, [r7, #6]
 81038f8:	797b      	ldrb	r3, [r7, #5]
 81038fa:	9300      	str	r3, [sp, #0]
 81038fc:	460b      	mov	r3, r1
 81038fe:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8103900:	68f8      	ldr	r0, [r7, #12]
 8103902:	f7ff fc66 	bl	81031d2 <_ff_push_n>

    // Advance index
    f->wr_idx = advance_index(f->depth, wr_idx, n);
 8103906:	68fb      	ldr	r3, [r7, #12]
 8103908:	889b      	ldrh	r3, [r3, #4]
 810390a:	88fa      	ldrh	r2, [r7, #6]
 810390c:	8ff9      	ldrh	r1, [r7, #62]	; 0x3e
 810390e:	4618      	mov	r0, r3
 8103910:	f7ff fe3c 	bl	810358c <advance_index>
 8103914:	4603      	mov	r3, r0
 8103916:	461a      	mov	r2, r3
 8103918:	68fb      	ldr	r3, [r7, #12]
 810391a:	811a      	strh	r2, [r3, #8]
    TU_LOG(TU_FIFO_DBG, "\tnew_wr = %u\r\n", f->wr_idx);
  }

  _ff_unlock(f->mutex_wr);

  return n;
 810391c:	88fb      	ldrh	r3, [r7, #6]
}
 810391e:	4618      	mov	r0, r3
 8103920:	3740      	adds	r7, #64	; 0x40
 8103922:	46bd      	mov	sp, r7
 8103924:	bd80      	pop	{r7, pc}

08103926 <_tu_fifo_read_n>:

static uint16_t _tu_fifo_read_n(tu_fifo_t* f, void * buffer, uint16_t n, tu_fifo_copy_mode_t copy_mode)
{
 8103926:	b580      	push	{r7, lr}
 8103928:	b086      	sub	sp, #24
 810392a:	af02      	add	r7, sp, #8
 810392c:	60f8      	str	r0, [r7, #12]
 810392e:	60b9      	str	r1, [r7, #8]
 8103930:	4611      	mov	r1, r2
 8103932:	461a      	mov	r2, r3
 8103934:	460b      	mov	r3, r1
 8103936:	80fb      	strh	r3, [r7, #6]
 8103938:	4613      	mov	r3, r2
 810393a:	717b      	strb	r3, [r7, #5]
  _ff_lock(f->mutex_rd);

  // Peek the data
  // f->rd_idx might get modified in case of an overflow so we can not use a local variable
  n = _tu_fifo_peek_n(f, buffer, n, f->wr_idx, f->rd_idx, copy_mode);
 810393c:	68fb      	ldr	r3, [r7, #12]
 810393e:	891b      	ldrh	r3, [r3, #8]
 8103940:	b298      	uxth	r0, r3
 8103942:	68fb      	ldr	r3, [r7, #12]
 8103944:	895b      	ldrh	r3, [r3, #10]
 8103946:	b29b      	uxth	r3, r3
 8103948:	88f9      	ldrh	r1, [r7, #6]
 810394a:	797a      	ldrb	r2, [r7, #5]
 810394c:	9201      	str	r2, [sp, #4]
 810394e:	9300      	str	r3, [sp, #0]
 8103950:	4603      	mov	r3, r0
 8103952:	460a      	mov	r2, r1
 8103954:	68b9      	ldr	r1, [r7, #8]
 8103956:	68f8      	ldr	r0, [r7, #12]
 8103958:	f7ff fea4 	bl	81036a4 <_tu_fifo_peek_n>
 810395c:	4603      	mov	r3, r0
 810395e:	80fb      	strh	r3, [r7, #6]

  // Advance read pointer
  f->rd_idx = advance_index(f->depth, f->rd_idx, n);
 8103960:	68fb      	ldr	r3, [r7, #12]
 8103962:	8898      	ldrh	r0, [r3, #4]
 8103964:	68fb      	ldr	r3, [r7, #12]
 8103966:	895b      	ldrh	r3, [r3, #10]
 8103968:	b29b      	uxth	r3, r3
 810396a:	88fa      	ldrh	r2, [r7, #6]
 810396c:	4619      	mov	r1, r3
 810396e:	f7ff fe0d 	bl	810358c <advance_index>
 8103972:	4603      	mov	r3, r0
 8103974:	461a      	mov	r2, r3
 8103976:	68fb      	ldr	r3, [r7, #12]
 8103978:	815a      	strh	r2, [r3, #10]

  _ff_unlock(f->mutex_rd);
  return n;
 810397a:	88fb      	ldrh	r3, [r7, #6]
}
 810397c:	4618      	mov	r0, r3
 810397e:	3710      	adds	r7, #16
 8103980:	46bd      	mov	sp, r7
 8103982:	bd80      	pop	{r7, pc}

08103984 <tu_fifo_count>:

    @returns Number of items in FIFO
 */
/******************************************************************************/
uint16_t tu_fifo_count(tu_fifo_t* f)
{
 8103984:	b480      	push	{r7}
 8103986:	b087      	sub	sp, #28
 8103988:	af00      	add	r7, sp, #0
 810398a:	6078      	str	r0, [r7, #4]
  return tu_min16(_ff_count(f->depth, f->wr_idx, f->rd_idx), f->depth);
 810398c:	687b      	ldr	r3, [r7, #4]
 810398e:	8899      	ldrh	r1, [r3, #4]
 8103990:	687b      	ldr	r3, [r7, #4]
 8103992:	891b      	ldrh	r3, [r3, #8]
 8103994:	b29a      	uxth	r2, r3
 8103996:	687b      	ldr	r3, [r7, #4]
 8103998:	895b      	ldrh	r3, [r3, #10]
 810399a:	b29b      	uxth	r3, r3
 810399c:	8279      	strh	r1, [r7, #18]
 810399e:	823a      	strh	r2, [r7, #16]
 81039a0:	81fb      	strh	r3, [r7, #14]
  if (wr_idx >= rd_idx)
 81039a2:	8a3a      	ldrh	r2, [r7, #16]
 81039a4:	89fb      	ldrh	r3, [r7, #14]
 81039a6:	429a      	cmp	r2, r3
 81039a8:	d304      	bcc.n	81039b4 <tu_fifo_count+0x30>
    return (uint16_t) (wr_idx - rd_idx);
 81039aa:	8a3a      	ldrh	r2, [r7, #16]
 81039ac:	89fb      	ldrh	r3, [r7, #14]
 81039ae:	1ad3      	subs	r3, r2, r3
 81039b0:	b29b      	uxth	r3, r3
 81039b2:	e008      	b.n	81039c6 <tu_fifo_count+0x42>
    return (uint16_t) (2*depth - (rd_idx - wr_idx));
 81039b4:	8a7b      	ldrh	r3, [r7, #18]
 81039b6:	005b      	lsls	r3, r3, #1
 81039b8:	b29a      	uxth	r2, r3
 81039ba:	8a39      	ldrh	r1, [r7, #16]
 81039bc:	89fb      	ldrh	r3, [r7, #14]
 81039be:	1acb      	subs	r3, r1, r3
 81039c0:	b29b      	uxth	r3, r3
 81039c2:	4413      	add	r3, r2
 81039c4:	b29b      	uxth	r3, r3
  return tu_min16(_ff_count(f->depth, f->wr_idx, f->rd_idx), f->depth);
 81039c6:	687a      	ldr	r2, [r7, #4]
 81039c8:	8892      	ldrh	r2, [r2, #4]
 81039ca:	82fb      	strh	r3, [r7, #22]
 81039cc:	4613      	mov	r3, r2
 81039ce:	82bb      	strh	r3, [r7, #20]
 81039d0:	8afa      	ldrh	r2, [r7, #22]
 81039d2:	8abb      	ldrh	r3, [r7, #20]
 81039d4:	4293      	cmp	r3, r2
 81039d6:	bf28      	it	cs
 81039d8:	4613      	movcs	r3, r2
 81039da:	b29b      	uxth	r3, r3
}
 81039dc:	4618      	mov	r0, r3
 81039de:	371c      	adds	r7, #28
 81039e0:	46bd      	mov	sp, r7
 81039e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 81039e6:	4770      	bx	lr

081039e8 <tu_fifo_empty>:

    @returns Number of items in FIFO
 */
/******************************************************************************/
bool tu_fifo_empty(tu_fifo_t* f)
{
 81039e8:	b480      	push	{r7}
 81039ea:	b083      	sub	sp, #12
 81039ec:	af00      	add	r7, sp, #0
 81039ee:	6078      	str	r0, [r7, #4]
  return f->wr_idx == f->rd_idx;
 81039f0:	687b      	ldr	r3, [r7, #4]
 81039f2:	891b      	ldrh	r3, [r3, #8]
 81039f4:	b29a      	uxth	r2, r3
 81039f6:	687b      	ldr	r3, [r7, #4]
 81039f8:	895b      	ldrh	r3, [r3, #10]
 81039fa:	b29b      	uxth	r3, r3
 81039fc:	429a      	cmp	r2, r3
 81039fe:	bf0c      	ite	eq
 8103a00:	2301      	moveq	r3, #1
 8103a02:	2300      	movne	r3, #0
 8103a04:	b2db      	uxtb	r3, r3
}
 8103a06:	4618      	mov	r0, r3
 8103a08:	370c      	adds	r7, #12
 8103a0a:	46bd      	mov	sp, r7
 8103a0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8103a10:	4770      	bx	lr

08103a12 <tu_fifo_full>:

    @returns Number of items in FIFO
 */
/******************************************************************************/
bool tu_fifo_full(tu_fifo_t* f)
{
 8103a12:	b480      	push	{r7}
 8103a14:	b085      	sub	sp, #20
 8103a16:	af00      	add	r7, sp, #0
 8103a18:	6078      	str	r0, [r7, #4]
  return _ff_count(f->depth, f->wr_idx, f->rd_idx) >= f->depth;
 8103a1a:	687b      	ldr	r3, [r7, #4]
 8103a1c:	8899      	ldrh	r1, [r3, #4]
 8103a1e:	687b      	ldr	r3, [r7, #4]
 8103a20:	891b      	ldrh	r3, [r3, #8]
 8103a22:	b29a      	uxth	r2, r3
 8103a24:	687b      	ldr	r3, [r7, #4]
 8103a26:	895b      	ldrh	r3, [r3, #10]
 8103a28:	b29b      	uxth	r3, r3
 8103a2a:	81f9      	strh	r1, [r7, #14]
 8103a2c:	81ba      	strh	r2, [r7, #12]
 8103a2e:	817b      	strh	r3, [r7, #10]
  if (wr_idx >= rd_idx)
 8103a30:	89ba      	ldrh	r2, [r7, #12]
 8103a32:	897b      	ldrh	r3, [r7, #10]
 8103a34:	429a      	cmp	r2, r3
 8103a36:	d304      	bcc.n	8103a42 <tu_fifo_full+0x30>
    return (uint16_t) (wr_idx - rd_idx);
 8103a38:	89ba      	ldrh	r2, [r7, #12]
 8103a3a:	897b      	ldrh	r3, [r7, #10]
 8103a3c:	1ad3      	subs	r3, r2, r3
 8103a3e:	b29b      	uxth	r3, r3
 8103a40:	e008      	b.n	8103a54 <tu_fifo_full+0x42>
    return (uint16_t) (2*depth - (rd_idx - wr_idx));
 8103a42:	89fb      	ldrh	r3, [r7, #14]
 8103a44:	005b      	lsls	r3, r3, #1
 8103a46:	b29a      	uxth	r2, r3
 8103a48:	89b9      	ldrh	r1, [r7, #12]
 8103a4a:	897b      	ldrh	r3, [r7, #10]
 8103a4c:	1acb      	subs	r3, r1, r3
 8103a4e:	b29b      	uxth	r3, r3
 8103a50:	4413      	add	r3, r2
 8103a52:	b29b      	uxth	r3, r3
  return _ff_count(f->depth, f->wr_idx, f->rd_idx) >= f->depth;
 8103a54:	687a      	ldr	r2, [r7, #4]
 8103a56:	8892      	ldrh	r2, [r2, #4]
 8103a58:	4293      	cmp	r3, r2
 8103a5a:	bf2c      	ite	cs
 8103a5c:	2301      	movcs	r3, #1
 8103a5e:	2300      	movcc	r3, #0
 8103a60:	b2db      	uxtb	r3, r3
}
 8103a62:	4618      	mov	r0, r3
 8103a64:	3714      	adds	r7, #20
 8103a66:	46bd      	mov	sp, r7
 8103a68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8103a6c:	4770      	bx	lr

08103a6e <tu_fifo_remaining>:

    @returns Number of items in FIFO
 */
/******************************************************************************/
uint16_t tu_fifo_remaining(tu_fifo_t* f)
{
 8103a6e:	b480      	push	{r7}
 8103a70:	b087      	sub	sp, #28
 8103a72:	af00      	add	r7, sp, #0
 8103a74:	6078      	str	r0, [r7, #4]
  return _ff_remaining(f->depth, f->wr_idx, f->rd_idx);
 8103a76:	687b      	ldr	r3, [r7, #4]
 8103a78:	8899      	ldrh	r1, [r3, #4]
 8103a7a:	687b      	ldr	r3, [r7, #4]
 8103a7c:	891b      	ldrh	r3, [r3, #8]
 8103a7e:	b29a      	uxth	r2, r3
 8103a80:	687b      	ldr	r3, [r7, #4]
 8103a82:	895b      	ldrh	r3, [r3, #10]
 8103a84:	b29b      	uxth	r3, r3
 8103a86:	82f9      	strh	r1, [r7, #22]
 8103a88:	82ba      	strh	r2, [r7, #20]
 8103a8a:	827b      	strh	r3, [r7, #18]
 8103a8c:	8afb      	ldrh	r3, [r7, #22]
 8103a8e:	823b      	strh	r3, [r7, #16]
 8103a90:	8abb      	ldrh	r3, [r7, #20]
 8103a92:	81fb      	strh	r3, [r7, #14]
 8103a94:	8a7b      	ldrh	r3, [r7, #18]
 8103a96:	81bb      	strh	r3, [r7, #12]
  if (wr_idx >= rd_idx)
 8103a98:	89fa      	ldrh	r2, [r7, #14]
 8103a9a:	89bb      	ldrh	r3, [r7, #12]
 8103a9c:	429a      	cmp	r2, r3
 8103a9e:	d304      	bcc.n	8103aaa <tu_fifo_remaining+0x3c>
    return (uint16_t) (wr_idx - rd_idx);
 8103aa0:	89fa      	ldrh	r2, [r7, #14]
 8103aa2:	89bb      	ldrh	r3, [r7, #12]
 8103aa4:	1ad3      	subs	r3, r2, r3
 8103aa6:	b29b      	uxth	r3, r3
 8103aa8:	e008      	b.n	8103abc <tu_fifo_remaining+0x4e>
    return (uint16_t) (2*depth - (rd_idx - wr_idx));
 8103aaa:	8a3b      	ldrh	r3, [r7, #16]
 8103aac:	005b      	lsls	r3, r3, #1
 8103aae:	b29a      	uxth	r2, r3
 8103ab0:	89f9      	ldrh	r1, [r7, #14]
 8103ab2:	89bb      	ldrh	r3, [r7, #12]
 8103ab4:	1acb      	subs	r3, r1, r3
 8103ab6:	b29b      	uxth	r3, r3
 8103ab8:	4413      	add	r3, r2
 8103aba:	b29b      	uxth	r3, r3
  uint16_t const count = _ff_count(depth, wr_idx, rd_idx);
 8103abc:	817b      	strh	r3, [r7, #10]
  return (depth > count) ? (depth - count) : 0;
 8103abe:	8afa      	ldrh	r2, [r7, #22]
 8103ac0:	897b      	ldrh	r3, [r7, #10]
 8103ac2:	429a      	cmp	r2, r3
 8103ac4:	d904      	bls.n	8103ad0 <tu_fifo_remaining+0x62>
 8103ac6:	8afa      	ldrh	r2, [r7, #22]
 8103ac8:	897b      	ldrh	r3, [r7, #10]
 8103aca:	1ad3      	subs	r3, r2, r3
 8103acc:	b29b      	uxth	r3, r3
 8103ace:	e000      	b.n	8103ad2 <tu_fifo_remaining+0x64>
 8103ad0:	2300      	movs	r3, #0
}
 8103ad2:	4618      	mov	r0, r3
 8103ad4:	371c      	adds	r7, #28
 8103ad6:	46bd      	mov	sp, r7
 8103ad8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8103adc:	4770      	bx	lr

08103ade <tu_fifo_read>:

    @returns TRUE if the queue is not empty
 */
/******************************************************************************/
bool tu_fifo_read(tu_fifo_t* f, void * buffer)
{
 8103ade:	b580      	push	{r7, lr}
 8103ae0:	b084      	sub	sp, #16
 8103ae2:	af00      	add	r7, sp, #0
 8103ae4:	6078      	str	r0, [r7, #4]
 8103ae6:	6039      	str	r1, [r7, #0]
  _ff_lock(f->mutex_rd);

  // Peek the data
  // f->rd_idx might get modified in case of an overflow so we can not use a local variable
  bool ret = _tu_fifo_peek(f, buffer, f->wr_idx, f->rd_idx);
 8103ae8:	687b      	ldr	r3, [r7, #4]
 8103aea:	891b      	ldrh	r3, [r3, #8]
 8103aec:	b29a      	uxth	r2, r3
 8103aee:	687b      	ldr	r3, [r7, #4]
 8103af0:	895b      	ldrh	r3, [r3, #10]
 8103af2:	b29b      	uxth	r3, r3
 8103af4:	6839      	ldr	r1, [r7, #0]
 8103af6:	6878      	ldr	r0, [r7, #4]
 8103af8:	f7ff fd6e 	bl	81035d8 <_tu_fifo_peek>
 8103afc:	4603      	mov	r3, r0
 8103afe:	73fb      	strb	r3, [r7, #15]

  // Advance pointer
  f->rd_idx = advance_index(f->depth, f->rd_idx, ret);
 8103b00:	687b      	ldr	r3, [r7, #4]
 8103b02:	8898      	ldrh	r0, [r3, #4]
 8103b04:	687b      	ldr	r3, [r7, #4]
 8103b06:	895b      	ldrh	r3, [r3, #10]
 8103b08:	b29b      	uxth	r3, r3
 8103b0a:	7bfa      	ldrb	r2, [r7, #15]
 8103b0c:	b292      	uxth	r2, r2
 8103b0e:	4619      	mov	r1, r3
 8103b10:	f7ff fd3c 	bl	810358c <advance_index>
 8103b14:	4603      	mov	r3, r0
 8103b16:	461a      	mov	r2, r3
 8103b18:	687b      	ldr	r3, [r7, #4]
 8103b1a:	815a      	strh	r2, [r3, #10]

  _ff_unlock(f->mutex_rd);
  return ret;
 8103b1c:	7bfb      	ldrb	r3, [r7, #15]
}
 8103b1e:	4618      	mov	r0, r3
 8103b20:	3710      	adds	r7, #16
 8103b22:	46bd      	mov	sp, r7
 8103b24:	bd80      	pop	{r7, pc}

08103b26 <tu_fifo_read_n>:

    @returns number of items read from the FIFO
 */
/******************************************************************************/
uint16_t tu_fifo_read_n(tu_fifo_t* f, void * buffer, uint16_t n)
{
 8103b26:	b580      	push	{r7, lr}
 8103b28:	b084      	sub	sp, #16
 8103b2a:	af00      	add	r7, sp, #0
 8103b2c:	60f8      	str	r0, [r7, #12]
 8103b2e:	60b9      	str	r1, [r7, #8]
 8103b30:	4613      	mov	r3, r2
 8103b32:	80fb      	strh	r3, [r7, #6]
  return _tu_fifo_read_n(f, buffer, n, TU_FIFO_COPY_INC);
 8103b34:	88fa      	ldrh	r2, [r7, #6]
 8103b36:	2300      	movs	r3, #0
 8103b38:	68b9      	ldr	r1, [r7, #8]
 8103b3a:	68f8      	ldr	r0, [r7, #12]
 8103b3c:	f7ff fef3 	bl	8103926 <_tu_fifo_read_n>
 8103b40:	4603      	mov	r3, r0
}
 8103b42:	4618      	mov	r0, r3
 8103b44:	3710      	adds	r7, #16
 8103b46:	46bd      	mov	sp, r7
 8103b48:	bd80      	pop	{r7, pc}

08103b4a <tu_fifo_read_n_const_addr_full_words>:

uint16_t tu_fifo_read_n_const_addr_full_words(tu_fifo_t* f, void * buffer, uint16_t n)
{
 8103b4a:	b580      	push	{r7, lr}
 8103b4c:	b084      	sub	sp, #16
 8103b4e:	af00      	add	r7, sp, #0
 8103b50:	60f8      	str	r0, [r7, #12]
 8103b52:	60b9      	str	r1, [r7, #8]
 8103b54:	4613      	mov	r3, r2
 8103b56:	80fb      	strh	r3, [r7, #6]
  return _tu_fifo_read_n(f, buffer, n, TU_FIFO_COPY_CST_FULL_WORDS);
 8103b58:	88fa      	ldrh	r2, [r7, #6]
 8103b5a:	2301      	movs	r3, #1
 8103b5c:	68b9      	ldr	r1, [r7, #8]
 8103b5e:	68f8      	ldr	r0, [r7, #12]
 8103b60:	f7ff fee1 	bl	8103926 <_tu_fifo_read_n>
 8103b64:	4603      	mov	r3, r0
}
 8103b66:	4618      	mov	r0, r3
 8103b68:	3710      	adds	r7, #16
 8103b6a:	46bd      	mov	sp, r7
 8103b6c:	bd80      	pop	{r7, pc}

08103b6e <tu_fifo_write>:
    @returns TRUE if the data was written to the FIFO (overwrittable
             FIFO will always return TRUE)
 */
/******************************************************************************/
bool tu_fifo_write(tu_fifo_t* f, const void * data)
{
 8103b6e:	b580      	push	{r7, lr}
 8103b70:	b086      	sub	sp, #24
 8103b72:	af00      	add	r7, sp, #0
 8103b74:	6078      	str	r0, [r7, #4]
 8103b76:	6039      	str	r1, [r7, #0]
  _ff_lock(f->mutex_wr);

  bool ret;
  uint16_t const wr_idx = f->wr_idx;
 8103b78:	687b      	ldr	r3, [r7, #4]
 8103b7a:	891b      	ldrh	r3, [r3, #8]
 8103b7c:	82bb      	strh	r3, [r7, #20]

  if ( tu_fifo_full(f) && !f->overwritable )
 8103b7e:	6878      	ldr	r0, [r7, #4]
 8103b80:	f7ff ff47 	bl	8103a12 <tu_fifo_full>
 8103b84:	4603      	mov	r3, r0
 8103b86:	2b00      	cmp	r3, #0
 8103b88:	d00c      	beq.n	8103ba4 <tu_fifo_write+0x36>
 8103b8a:	687b      	ldr	r3, [r7, #4]
 8103b8c:	79db      	ldrb	r3, [r3, #7]
 8103b8e:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 8103b92:	b2db      	uxtb	r3, r3
 8103b94:	f083 0301 	eor.w	r3, r3, #1
 8103b98:	b2db      	uxtb	r3, r3
 8103b9a:	2b00      	cmp	r3, #0
 8103b9c:	d002      	beq.n	8103ba4 <tu_fifo_write+0x36>
  {
    ret = false;
 8103b9e:	2300      	movs	r3, #0
 8103ba0:	75fb      	strb	r3, [r7, #23]
 8103ba2:	e022      	b.n	8103bea <tu_fifo_write+0x7c>
  }else
  {
    uint16_t wr_ptr = idx2ptr(f->depth, wr_idx);
 8103ba4:	687b      	ldr	r3, [r7, #4]
 8103ba6:	889b      	ldrh	r3, [r3, #4]
 8103ba8:	823b      	strh	r3, [r7, #16]
 8103baa:	8abb      	ldrh	r3, [r7, #20]
 8103bac:	81fb      	strh	r3, [r7, #14]
  while ( idx >= depth ) idx -= depth;
 8103bae:	e003      	b.n	8103bb8 <tu_fifo_write+0x4a>
 8103bb0:	89fa      	ldrh	r2, [r7, #14]
 8103bb2:	8a3b      	ldrh	r3, [r7, #16]
 8103bb4:	1ad3      	subs	r3, r2, r3
 8103bb6:	81fb      	strh	r3, [r7, #14]
 8103bb8:	8a3a      	ldrh	r2, [r7, #16]
 8103bba:	89fb      	ldrh	r3, [r7, #14]
 8103bbc:	429a      	cmp	r2, r3
 8103bbe:	d9f7      	bls.n	8103bb0 <tu_fifo_write+0x42>
  return idx;
 8103bc0:	89fb      	ldrh	r3, [r7, #14]
    uint16_t wr_ptr = idx2ptr(f->depth, wr_idx);
 8103bc2:	827b      	strh	r3, [r7, #18]

    // Write data
    _ff_push(f, data, wr_ptr);
 8103bc4:	8a7b      	ldrh	r3, [r7, #18]
 8103bc6:	461a      	mov	r2, r3
 8103bc8:	6839      	ldr	r1, [r7, #0]
 8103bca:	6878      	ldr	r0, [r7, #4]
 8103bcc:	f7ff fae2 	bl	8103194 <_ff_push>

    // Advance pointer
    f->wr_idx = advance_index(f->depth, wr_idx, 1);
 8103bd0:	687b      	ldr	r3, [r7, #4]
 8103bd2:	889b      	ldrh	r3, [r3, #4]
 8103bd4:	8ab9      	ldrh	r1, [r7, #20]
 8103bd6:	2201      	movs	r2, #1
 8103bd8:	4618      	mov	r0, r3
 8103bda:	f7ff fcd7 	bl	810358c <advance_index>
 8103bde:	4603      	mov	r3, r0
 8103be0:	461a      	mov	r2, r3
 8103be2:	687b      	ldr	r3, [r7, #4]
 8103be4:	811a      	strh	r2, [r3, #8]

    ret = true;
 8103be6:	2301      	movs	r3, #1
 8103be8:	75fb      	strb	r3, [r7, #23]
  }

  _ff_unlock(f->mutex_wr);

  return ret;
 8103bea:	7dfb      	ldrb	r3, [r7, #23]
}
 8103bec:	4618      	mov	r0, r3
 8103bee:	3718      	adds	r7, #24
 8103bf0:	46bd      	mov	sp, r7
 8103bf2:	bd80      	pop	{r7, pc}

08103bf4 <tu_fifo_write_n>:
                Number of element
    @return Number of written elements
 */
/******************************************************************************/
uint16_t tu_fifo_write_n(tu_fifo_t* f, const void * data, uint16_t n)
{
 8103bf4:	b580      	push	{r7, lr}
 8103bf6:	b084      	sub	sp, #16
 8103bf8:	af00      	add	r7, sp, #0
 8103bfa:	60f8      	str	r0, [r7, #12]
 8103bfc:	60b9      	str	r1, [r7, #8]
 8103bfe:	4613      	mov	r3, r2
 8103c00:	80fb      	strh	r3, [r7, #6]
  return _tu_fifo_write_n(f, data, n, TU_FIFO_COPY_INC);
 8103c02:	88fa      	ldrh	r2, [r7, #6]
 8103c04:	2300      	movs	r3, #0
 8103c06:	68b9      	ldr	r1, [r7, #8]
 8103c08:	68f8      	ldr	r0, [r7, #12]
 8103c0a:	f7ff fdbb 	bl	8103784 <_tu_fifo_write_n>
 8103c0e:	4603      	mov	r3, r0
}
 8103c10:	4618      	mov	r0, r3
 8103c12:	3710      	adds	r7, #16
 8103c14:	46bd      	mov	sp, r7
 8103c16:	bd80      	pop	{r7, pc}

08103c18 <tu_fifo_write_n_const_addr_full_words>:
                Number of element
    @return Number of written elements
 */
/******************************************************************************/
uint16_t tu_fifo_write_n_const_addr_full_words(tu_fifo_t* f, const void * data, uint16_t n)
{
 8103c18:	b580      	push	{r7, lr}
 8103c1a:	b084      	sub	sp, #16
 8103c1c:	af00      	add	r7, sp, #0
 8103c1e:	60f8      	str	r0, [r7, #12]
 8103c20:	60b9      	str	r1, [r7, #8]
 8103c22:	4613      	mov	r3, r2
 8103c24:	80fb      	strh	r3, [r7, #6]
  return _tu_fifo_write_n(f, data, n, TU_FIFO_COPY_CST_FULL_WORDS);
 8103c26:	88fa      	ldrh	r2, [r7, #6]
 8103c28:	2301      	movs	r3, #1
 8103c2a:	68b9      	ldr	r1, [r7, #8]
 8103c2c:	68f8      	ldr	r0, [r7, #12]
 8103c2e:	f7ff fda9 	bl	8103784 <_tu_fifo_write_n>
 8103c32:	4603      	mov	r3, r0
}
 8103c34:	4618      	mov	r0, r3
 8103c36:	3710      	adds	r7, #16
 8103c38:	46bd      	mov	sp, r7
 8103c3a:	bd80      	pop	{r7, pc}

08103c3c <tu_fifo_clear>:
    @param[in]  f
                Pointer to the FIFO buffer to manipulate
 */
/******************************************************************************/
bool tu_fifo_clear(tu_fifo_t *f)
{
 8103c3c:	b480      	push	{r7}
 8103c3e:	b083      	sub	sp, #12
 8103c40:	af00      	add	r7, sp, #0
 8103c42:	6078      	str	r0, [r7, #4]
  _ff_lock(f->mutex_wr);
  _ff_lock(f->mutex_rd);

  f->rd_idx = 0;
 8103c44:	687b      	ldr	r3, [r7, #4]
 8103c46:	2200      	movs	r2, #0
 8103c48:	815a      	strh	r2, [r3, #10]
  f->wr_idx = 0;
 8103c4a:	687b      	ldr	r3, [r7, #4]
 8103c4c:	2200      	movs	r2, #0
 8103c4e:	811a      	strh	r2, [r3, #8]

  _ff_unlock(f->mutex_wr);
  _ff_unlock(f->mutex_rd);
  return true;
 8103c50:	2301      	movs	r3, #1
}
 8103c52:	4618      	mov	r0, r3
 8103c54:	370c      	adds	r7, #12
 8103c56:	46bd      	mov	sp, r7
 8103c58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8103c5c:	4770      	bx	lr

08103c5e <tu_fifo_set_overwritable>:
    @param[in]  overwritable
                Overwritable mode the fifo is set to
 */
/******************************************************************************/
bool tu_fifo_set_overwritable(tu_fifo_t *f, bool overwritable)
{
 8103c5e:	b480      	push	{r7}
 8103c60:	b083      	sub	sp, #12
 8103c62:	af00      	add	r7, sp, #0
 8103c64:	6078      	str	r0, [r7, #4]
 8103c66:	460b      	mov	r3, r1
 8103c68:	70fb      	strb	r3, [r7, #3]
  _ff_lock(f->mutex_wr);
  _ff_lock(f->mutex_rd);

  f->overwritable = overwritable;
 8103c6a:	687a      	ldr	r2, [r7, #4]
 8103c6c:	79d3      	ldrb	r3, [r2, #7]
 8103c6e:	78f9      	ldrb	r1, [r7, #3]
 8103c70:	f361 13c7 	bfi	r3, r1, #7, #1
 8103c74:	71d3      	strb	r3, [r2, #7]

  _ff_unlock(f->mutex_wr);
  _ff_unlock(f->mutex_rd);

  return true;
 8103c76:	2301      	movs	r3, #1
}
 8103c78:	4618      	mov	r0, r3
 8103c7a:	370c      	adds	r7, #12
 8103c7c:	46bd      	mov	sp, r7
 8103c7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8103c82:	4770      	bx	lr

08103c84 <tud_event_hook_cb>:
#endif

//--------------------------------------------------------------------+
// Callback weak stubs (called if application does not provide)
//--------------------------------------------------------------------+
TU_ATTR_WEAK void tud_event_hook_cb(uint8_t rhport, uint32_t eventid, bool in_isr) {
 8103c84:	b480      	push	{r7}
 8103c86:	b083      	sub	sp, #12
 8103c88:	af00      	add	r7, sp, #0
 8103c8a:	4603      	mov	r3, r0
 8103c8c:	6039      	str	r1, [r7, #0]
 8103c8e:	71fb      	strb	r3, [r7, #7]
 8103c90:	4613      	mov	r3, r2
 8103c92:	71bb      	strb	r3, [r7, #6]
  (void)rhport;
  (void)eventid;
  (void)in_isr;
}
 8103c94:	bf00      	nop
 8103c96:	370c      	adds	r7, #12
 8103c98:	46bd      	mov	sp, r7
 8103c9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8103c9e:	4770      	bx	lr

08103ca0 <tud_mounted>:

bool tud_connected(void) {
  return _usbd_dev.connected;
}

bool tud_mounted(void) {
 8103ca0:	b480      	push	{r7}
 8103ca2:	af00      	add	r7, sp, #0
  return _usbd_dev.cfg_num ? true : false;
 8103ca4:	4b06      	ldr	r3, [pc, #24]	; (8103cc0 <tud_mounted+0x20>)
 8103ca6:	785b      	ldrb	r3, [r3, #1]
 8103ca8:	b2db      	uxtb	r3, r3
 8103caa:	2b00      	cmp	r3, #0
 8103cac:	bf14      	ite	ne
 8103cae:	2301      	movne	r3, #1
 8103cb0:	2300      	moveq	r3, #0
 8103cb2:	b2db      	uxtb	r3, r3
}
 8103cb4:	4618      	mov	r0, r3
 8103cb6:	46bd      	mov	sp, r7
 8103cb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8103cbc:	4770      	bx	lr
 8103cbe:	bf00      	nop
 8103cc0:	10000fa4 	.word	0x10000fa4

08103cc4 <tud_suspended>:

bool tud_suspended(void) {
 8103cc4:	b480      	push	{r7}
 8103cc6:	af00      	add	r7, sp, #0
  return _usbd_dev.suspended;
 8103cc8:	4b07      	ldr	r3, [pc, #28]	; (8103ce8 <tud_suspended+0x24>)
 8103cca:	781b      	ldrb	r3, [r3, #0]
 8103ccc:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8103cd0:	b2db      	uxtb	r3, r3
 8103cd2:	2b00      	cmp	r3, #0
 8103cd4:	bf14      	ite	ne
 8103cd6:	2301      	movne	r3, #1
 8103cd8:	2300      	moveq	r3, #0
 8103cda:	b2db      	uxtb	r3, r3
}
 8103cdc:	4618      	mov	r0, r3
 8103cde:	46bd      	mov	sp, r7
 8103ce0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8103ce4:	4770      	bx	lr
 8103ce6:	bf00      	nop
 8103ce8:	10000fa4 	.word	0x10000fa4

08103cec <tud_inited>:
}

//--------------------------------------------------------------------+
// USBD Task
//--------------------------------------------------------------------+
bool tud_inited(void) {
 8103cec:	b480      	push	{r7}
 8103cee:	af00      	add	r7, sp, #0
  return _usbd_rhport != RHPORT_INVALID;
 8103cf0:	4b05      	ldr	r3, [pc, #20]	; (8103d08 <tud_inited+0x1c>)
 8103cf2:	781b      	ldrb	r3, [r3, #0]
 8103cf4:	2bff      	cmp	r3, #255	; 0xff
 8103cf6:	bf14      	ite	ne
 8103cf8:	2301      	movne	r3, #1
 8103cfa:	2300      	moveq	r3, #0
 8103cfc:	b2db      	uxtb	r3, r3
}
 8103cfe:	4618      	mov	r0, r3
 8103d00:	46bd      	mov	sp, r7
 8103d02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8103d06:	4770      	bx	lr
 8103d08:	1000001c 	.word	0x1000001c

08103d0c <tud_init>:

bool tud_init (uint8_t rhport)
{
 8103d0c:	b580      	push	{r7, lr}
 8103d0e:	b08a      	sub	sp, #40	; 0x28
 8103d10:	af00      	add	r7, sp, #0
 8103d12:	4603      	mov	r3, r0
 8103d14:	71fb      	strb	r3, [r7, #7]
  // skip if already initialized
  if ( tud_inited() ) return true;
 8103d16:	f7ff ffe9 	bl	8103cec <tud_inited>
 8103d1a:	4603      	mov	r3, r0
 8103d1c:	2b00      	cmp	r3, #0
 8103d1e:	d001      	beq.n	8103d24 <tud_init+0x18>
 8103d20:	2301      	movs	r3, #1
 8103d22:	e078      	b.n	8103e16 <tud_init+0x10a>
  TU_LOG_USBD("USBD init on controller %u\r\n", rhport);
  TU_LOG_INT(CFG_TUD_LOG_LEVEL, sizeof(usbd_device_t));
  TU_LOG_INT(CFG_TUD_LOG_LEVEL, sizeof(tu_fifo_t));
  TU_LOG_INT(CFG_TUD_LOG_LEVEL, sizeof(tu_edpt_stream_t));

  tu_varclr(&_usbd_dev);
 8103d24:	2237      	movs	r2, #55	; 0x37
 8103d26:	2100      	movs	r1, #0
 8103d28:	483d      	ldr	r0, [pc, #244]	; (8103e20 <tud_init+0x114>)
 8103d2a:	f00e f817 	bl	8111d5c <memset>
 8103d2e:	4b3d      	ldr	r3, [pc, #244]	; (8103e24 <tud_init+0x118>)
 8103d30:	617b      	str	r3, [r7, #20]
  // enable dcd/hcd interrupt
  qhdl->interrupt_set(true);
}

TU_ATTR_ALWAYS_INLINE static inline osal_queue_t osal_queue_create(osal_queue_def_t* qdef) {
  tu_fifo_clear(&qdef->ff);
 8103d32:	697b      	ldr	r3, [r7, #20]
 8103d34:	3304      	adds	r3, #4
 8103d36:	4618      	mov	r0, r3
 8103d38:	f7ff ff80 	bl	8103c3c <tu_fifo_clear>
  return (osal_queue_t) qdef;
 8103d3c:	697b      	ldr	r3, [r7, #20]
  _usbd_mutex = osal_mutex_create(&_ubsd_mutexdef);
  TU_ASSERT(_usbd_mutex);
#endif

  // Init device queue & task
  _usbd_q = osal_queue_create(&_usbd_qdef);
 8103d3e:	4a3a      	ldr	r2, [pc, #232]	; (8103e28 <tud_init+0x11c>)
 8103d40:	6013      	str	r3, [r2, #0]
  TU_ASSERT(_usbd_q);
 8103d42:	4b39      	ldr	r3, [pc, #228]	; (8103e28 <tud_init+0x11c>)
 8103d44:	681b      	ldr	r3, [r3, #0]
 8103d46:	2b00      	cmp	r3, #0
 8103d48:	d10a      	bne.n	8103d60 <tud_init+0x54>
 8103d4a:	4b38      	ldr	r3, [pc, #224]	; (8103e2c <tud_init+0x120>)
 8103d4c:	61bb      	str	r3, [r7, #24]
 8103d4e:	69bb      	ldr	r3, [r7, #24]
 8103d50:	681b      	ldr	r3, [r3, #0]
 8103d52:	f003 0301 	and.w	r3, r3, #1
 8103d56:	2b00      	cmp	r3, #0
 8103d58:	d000      	beq.n	8103d5c <tud_init+0x50>
 8103d5a:	be00      	bkpt	0x0000
 8103d5c:	2300      	movs	r3, #0
 8103d5e:	e05a      	b.n	8103e16 <tud_init+0x10a>

  // Get application driver if available
  if ( usbd_app_driver_get_cb )
 8103d60:	4b33      	ldr	r3, [pc, #204]	; (8103e30 <tud_init+0x124>)
 8103d62:	2b00      	cmp	r3, #0
 8103d64:	d005      	beq.n	8103d72 <tud_init+0x66>
  {
    _app_driver = usbd_app_driver_get_cb(&_app_driver_count);
 8103d66:	4833      	ldr	r0, [pc, #204]	; (8103e34 <tud_init+0x128>)
 8103d68:	f3af 8000 	nop.w
 8103d6c:	4603      	mov	r3, r0
 8103d6e:	4a32      	ldr	r2, [pc, #200]	; (8103e38 <tud_init+0x12c>)
 8103d70:	6013      	str	r3, [r2, #0]
  }

  // Init class drivers
  for (uint8_t i = 0; i < TOTAL_DRIVER_COUNT; i++)
 8103d72:	2300      	movs	r3, #0
 8103d74:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8103d78:	e03b      	b.n	8103df2 <tud_init+0xe6>
 8103d7a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8103d7e:	74fb      	strb	r3, [r7, #19]
  usbd_class_driver_t const * driver = NULL;
 8103d80:	2300      	movs	r3, #0
 8103d82:	60fb      	str	r3, [r7, #12]
  if ( drvid < _app_driver_count ) {
 8103d84:	4b2b      	ldr	r3, [pc, #172]	; (8103e34 <tud_init+0x128>)
 8103d86:	781b      	ldrb	r3, [r3, #0]
 8103d88:	7cfa      	ldrb	r2, [r7, #19]
 8103d8a:	429a      	cmp	r2, r3
 8103d8c:	d209      	bcs.n	8103da2 <tud_init+0x96>
    driver = &_app_driver[drvid];
 8103d8e:	4b2a      	ldr	r3, [pc, #168]	; (8103e38 <tud_init+0x12c>)
 8103d90:	6819      	ldr	r1, [r3, #0]
 8103d92:	7cfa      	ldrb	r2, [r7, #19]
 8103d94:	4613      	mov	r3, r2
 8103d96:	005b      	lsls	r3, r3, #1
 8103d98:	4413      	add	r3, r2
 8103d9a:	00db      	lsls	r3, r3, #3
 8103d9c:	440b      	add	r3, r1
 8103d9e:	60fb      	str	r3, [r7, #12]
 8103da0:	e00f      	b.n	8103dc2 <tud_init+0xb6>
  } else if ( drvid < TOTAL_DRIVER_COUNT && BUILTIN_DRIVER_COUNT > 0 ){
 8103da2:	4b24      	ldr	r3, [pc, #144]	; (8103e34 <tud_init+0x128>)
 8103da4:	781b      	ldrb	r3, [r3, #0]
 8103da6:	7cfa      	ldrb	r2, [r7, #19]
 8103da8:	429a      	cmp	r2, r3
 8103daa:	d80a      	bhi.n	8103dc2 <tud_init+0xb6>
    driver = &_usbd_driver[drvid - _app_driver_count];
 8103dac:	7cfb      	ldrb	r3, [r7, #19]
 8103dae:	4a21      	ldr	r2, [pc, #132]	; (8103e34 <tud_init+0x128>)
 8103db0:	7812      	ldrb	r2, [r2, #0]
 8103db2:	1a9a      	subs	r2, r3, r2
 8103db4:	4613      	mov	r3, r2
 8103db6:	005b      	lsls	r3, r3, #1
 8103db8:	4413      	add	r3, r2
 8103dba:	00db      	lsls	r3, r3, #3
 8103dbc:	4a1f      	ldr	r2, [pc, #124]	; (8103e3c <tud_init+0x130>)
 8103dbe:	4413      	add	r3, r2
 8103dc0:	60fb      	str	r3, [r7, #12]
  return driver;
 8103dc2:	68fb      	ldr	r3, [r7, #12]
  {
    usbd_class_driver_t const * driver = get_driver(i);
 8103dc4:	623b      	str	r3, [r7, #32]
    TU_ASSERT(driver);
 8103dc6:	6a3b      	ldr	r3, [r7, #32]
 8103dc8:	2b00      	cmp	r3, #0
 8103dca:	d10a      	bne.n	8103de2 <tud_init+0xd6>
 8103dcc:	4b17      	ldr	r3, [pc, #92]	; (8103e2c <tud_init+0x120>)
 8103dce:	61fb      	str	r3, [r7, #28]
 8103dd0:	69fb      	ldr	r3, [r7, #28]
 8103dd2:	681b      	ldr	r3, [r3, #0]
 8103dd4:	f003 0301 	and.w	r3, r3, #1
 8103dd8:	2b00      	cmp	r3, #0
 8103dda:	d000      	beq.n	8103dde <tud_init+0xd2>
 8103ddc:	be00      	bkpt	0x0000
 8103dde:	2300      	movs	r3, #0
 8103de0:	e019      	b.n	8103e16 <tud_init+0x10a>
    TU_LOG_USBD("%s init\r\n", driver->name);
    driver->init();
 8103de2:	6a3b      	ldr	r3, [r7, #32]
 8103de4:	681b      	ldr	r3, [r3, #0]
 8103de6:	4798      	blx	r3
  for (uint8_t i = 0; i < TOTAL_DRIVER_COUNT; i++)
 8103de8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8103dec:	3301      	adds	r3, #1
 8103dee:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8103df2:	4b10      	ldr	r3, [pc, #64]	; (8103e34 <tud_init+0x128>)
 8103df4:	781b      	ldrb	r3, [r3, #0]
 8103df6:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8103dfa:	429a      	cmp	r2, r3
 8103dfc:	d9bd      	bls.n	8103d7a <tud_init+0x6e>
  }

  _usbd_rhport = rhport;
 8103dfe:	4a10      	ldr	r2, [pc, #64]	; (8103e40 <tud_init+0x134>)
 8103e00:	79fb      	ldrb	r3, [r7, #7]
 8103e02:	7013      	strb	r3, [r2, #0]

  // Init device controller driver
  dcd_init(rhport);
 8103e04:	79fb      	ldrb	r3, [r7, #7]
 8103e06:	4618      	mov	r0, r3
 8103e08:	f002 f8da 	bl	8105fc0 <dcd_init>
  dcd_int_enable(rhport);
 8103e0c:	79fb      	ldrb	r3, [r7, #7]
 8103e0e:	4618      	mov	r0, r3
 8103e10:	f002 f95e 	bl	81060d0 <dcd_int_enable>

  return true;
 8103e14:	2301      	movs	r3, #1
}
 8103e16:	4618      	mov	r0, r3
 8103e18:	3728      	adds	r7, #40	; 0x28
 8103e1a:	46bd      	mov	sp, r7
 8103e1c:	bd80      	pop	{r7, pc}
 8103e1e:	bf00      	nop
 8103e20:	10000fa4 	.word	0x10000fa4
 8103e24:	10000020 	.word	0x10000020
 8103e28:	100010a4 	.word	0x100010a4
 8103e2c:	e000edf0 	.word	0xe000edf0
 8103e30:	00000000 	.word	0x00000000
 8103e34:	10000fe0 	.word	0x10000fe0
 8103e38:	10000fdc 	.word	0x10000fdc
 8103e3c:	08111ec4 	.word	0x08111ec4
 8103e40:	1000001c 	.word	0x1000001c

08103e44 <configuration_reset>:

static void configuration_reset(uint8_t rhport)
{
 8103e44:	b580      	push	{r7, lr}
 8103e46:	b088      	sub	sp, #32
 8103e48:	af00      	add	r7, sp, #0
 8103e4a:	4603      	mov	r3, r0
 8103e4c:	71fb      	strb	r3, [r7, #7]
  for ( uint8_t i = 0; i < TOTAL_DRIVER_COUNT; i++ )
 8103e4e:	2300      	movs	r3, #0
 8103e50:	77fb      	strb	r3, [r7, #31]
 8103e52:	e039      	b.n	8103ec8 <configuration_reset+0x84>
 8103e54:	7ffb      	ldrb	r3, [r7, #31]
 8103e56:	74fb      	strb	r3, [r7, #19]
  usbd_class_driver_t const * driver = NULL;
 8103e58:	2300      	movs	r3, #0
 8103e5a:	60fb      	str	r3, [r7, #12]
  if ( drvid < _app_driver_count ) {
 8103e5c:	4b27      	ldr	r3, [pc, #156]	; (8103efc <configuration_reset+0xb8>)
 8103e5e:	781b      	ldrb	r3, [r3, #0]
 8103e60:	7cfa      	ldrb	r2, [r7, #19]
 8103e62:	429a      	cmp	r2, r3
 8103e64:	d209      	bcs.n	8103e7a <configuration_reset+0x36>
    driver = &_app_driver[drvid];
 8103e66:	4b26      	ldr	r3, [pc, #152]	; (8103f00 <configuration_reset+0xbc>)
 8103e68:	6819      	ldr	r1, [r3, #0]
 8103e6a:	7cfa      	ldrb	r2, [r7, #19]
 8103e6c:	4613      	mov	r3, r2
 8103e6e:	005b      	lsls	r3, r3, #1
 8103e70:	4413      	add	r3, r2
 8103e72:	00db      	lsls	r3, r3, #3
 8103e74:	440b      	add	r3, r1
 8103e76:	60fb      	str	r3, [r7, #12]
 8103e78:	e00f      	b.n	8103e9a <configuration_reset+0x56>
  } else if ( drvid < TOTAL_DRIVER_COUNT && BUILTIN_DRIVER_COUNT > 0 ){
 8103e7a:	4b20      	ldr	r3, [pc, #128]	; (8103efc <configuration_reset+0xb8>)
 8103e7c:	781b      	ldrb	r3, [r3, #0]
 8103e7e:	7cfa      	ldrb	r2, [r7, #19]
 8103e80:	429a      	cmp	r2, r3
 8103e82:	d80a      	bhi.n	8103e9a <configuration_reset+0x56>
    driver = &_usbd_driver[drvid - _app_driver_count];
 8103e84:	7cfb      	ldrb	r3, [r7, #19]
 8103e86:	4a1d      	ldr	r2, [pc, #116]	; (8103efc <configuration_reset+0xb8>)
 8103e88:	7812      	ldrb	r2, [r2, #0]
 8103e8a:	1a9a      	subs	r2, r3, r2
 8103e8c:	4613      	mov	r3, r2
 8103e8e:	005b      	lsls	r3, r3, #1
 8103e90:	4413      	add	r3, r2
 8103e92:	00db      	lsls	r3, r3, #3
 8103e94:	4a1b      	ldr	r2, [pc, #108]	; (8103f04 <configuration_reset+0xc0>)
 8103e96:	4413      	add	r3, r2
 8103e98:	60fb      	str	r3, [r7, #12]
  return driver;
 8103e9a:	68fb      	ldr	r3, [r7, #12]
  {
    usbd_class_driver_t const * driver = get_driver(i);
 8103e9c:	61bb      	str	r3, [r7, #24]
    TU_ASSERT(driver, );
 8103e9e:	69bb      	ldr	r3, [r7, #24]
 8103ea0:	2b00      	cmp	r3, #0
 8103ea2:	d109      	bne.n	8103eb8 <configuration_reset+0x74>
 8103ea4:	4b18      	ldr	r3, [pc, #96]	; (8103f08 <configuration_reset+0xc4>)
 8103ea6:	617b      	str	r3, [r7, #20]
 8103ea8:	697b      	ldr	r3, [r7, #20]
 8103eaa:	681b      	ldr	r3, [r3, #0]
 8103eac:	f003 0301 	and.w	r3, r3, #1
 8103eb0:	2b00      	cmp	r3, #0
 8103eb2:	d01e      	beq.n	8103ef2 <configuration_reset+0xae>
 8103eb4:	be00      	bkpt	0x0000
 8103eb6:	e01c      	b.n	8103ef2 <configuration_reset+0xae>
    driver->reset(rhport);
 8103eb8:	69bb      	ldr	r3, [r7, #24]
 8103eba:	685b      	ldr	r3, [r3, #4]
 8103ebc:	79fa      	ldrb	r2, [r7, #7]
 8103ebe:	4610      	mov	r0, r2
 8103ec0:	4798      	blx	r3
  for ( uint8_t i = 0; i < TOTAL_DRIVER_COUNT; i++ )
 8103ec2:	7ffb      	ldrb	r3, [r7, #31]
 8103ec4:	3301      	adds	r3, #1
 8103ec6:	77fb      	strb	r3, [r7, #31]
 8103ec8:	4b0c      	ldr	r3, [pc, #48]	; (8103efc <configuration_reset+0xb8>)
 8103eca:	781b      	ldrb	r3, [r3, #0]
 8103ecc:	7ffa      	ldrb	r2, [r7, #31]
 8103ece:	429a      	cmp	r2, r3
 8103ed0:	d9c0      	bls.n	8103e54 <configuration_reset+0x10>
  }

  tu_varclr(&_usbd_dev);
 8103ed2:	2237      	movs	r2, #55	; 0x37
 8103ed4:	2100      	movs	r1, #0
 8103ed6:	480d      	ldr	r0, [pc, #52]	; (8103f0c <configuration_reset+0xc8>)
 8103ed8:	f00d ff40 	bl	8111d5c <memset>
  memset(_usbd_dev.itf2drv, DRVID_INVALID, sizeof(_usbd_dev.itf2drv)); // invalid mapping
 8103edc:	2210      	movs	r2, #16
 8103ede:	21ff      	movs	r1, #255	; 0xff
 8103ee0:	480b      	ldr	r0, [pc, #44]	; (8103f10 <configuration_reset+0xcc>)
 8103ee2:	f00d ff3b 	bl	8111d5c <memset>
  memset(_usbd_dev.ep2drv , DRVID_INVALID, sizeof(_usbd_dev.ep2drv )); // invalid mapping
 8103ee6:	2212      	movs	r2, #18
 8103ee8:	21ff      	movs	r1, #255	; 0xff
 8103eea:	480a      	ldr	r0, [pc, #40]	; (8103f14 <configuration_reset+0xd0>)
 8103eec:	f00d ff36 	bl	8111d5c <memset>
 8103ef0:	e000      	b.n	8103ef4 <configuration_reset+0xb0>
    TU_ASSERT(driver, );
 8103ef2:	bf00      	nop
}
 8103ef4:	3720      	adds	r7, #32
 8103ef6:	46bd      	mov	sp, r7
 8103ef8:	bd80      	pop	{r7, pc}
 8103efa:	bf00      	nop
 8103efc:	10000fe0 	.word	0x10000fe0
 8103f00:	10000fdc 	.word	0x10000fdc
 8103f04:	08111ec4 	.word	0x08111ec4
 8103f08:	e000edf0 	.word	0xe000edf0
 8103f0c:	10000fa4 	.word	0x10000fa4
 8103f10:	10000fa7 	.word	0x10000fa7
 8103f14:	10000fb7 	.word	0x10000fb7

08103f18 <usbd_reset>:

static void usbd_reset(uint8_t rhport)
{
 8103f18:	b580      	push	{r7, lr}
 8103f1a:	b082      	sub	sp, #8
 8103f1c:	af00      	add	r7, sp, #0
 8103f1e:	4603      	mov	r3, r0
 8103f20:	71fb      	strb	r3, [r7, #7]
  configuration_reset(rhport);
 8103f22:	79fb      	ldrb	r3, [r7, #7]
 8103f24:	4618      	mov	r0, r3
 8103f26:	f7ff ff8d 	bl	8103e44 <configuration_reset>
  usbd_control_reset();
 8103f2a:	f001 fb85 	bl	8105638 <usbd_control_reset>
}
 8103f2e:	bf00      	nop
 8103f30:	3708      	adds	r7, #8
 8103f32:	46bd      	mov	sp, r7
 8103f34:	bd80      	pop	{r7, pc}
	...

08103f38 <tud_task_ext>:
      }
    }
    @endcode
 */
void tud_task_ext(uint32_t timeout_ms, bool in_isr)
{
 8103f38:	b590      	push	{r4, r7, lr}
 8103f3a:	b093      	sub	sp, #76	; 0x4c
 8103f3c:	af00      	add	r7, sp, #0
 8103f3e:	6078      	str	r0, [r7, #4]
 8103f40:	460b      	mov	r3, r1
 8103f42:	70fb      	strb	r3, [r7, #3]
  (void) in_isr; // not implemented yet

  // Skip if stack is not initialized
  if ( !tud_inited() ) return;
 8103f44:	f7ff fed2 	bl	8103cec <tud_inited>
 8103f48:	4603      	mov	r3, r0
 8103f4a:	f083 0301 	eor.w	r3, r3, #1
 8103f4e:	b2db      	uxtb	r3, r3
 8103f50:	2b00      	cmp	r3, #0
 8103f52:	f040 8150 	bne.w	81041f6 <tud_task_ext+0x2be>

  // Loop until there is no more events in the queue
  while (1)
  {
    dcd_event_t event;
    if ( !osal_queue_receive(_usbd_q, &event, timeout_ms) ) return;
 8103f56:	4bac      	ldr	r3, [pc, #688]	; (8104208 <tud_task_ext+0x2d0>)
 8103f58:	681b      	ldr	r3, [r3, #0]
 8103f5a:	637b      	str	r3, [r7, #52]	; 0x34
 8103f5c:	f107 030c 	add.w	r3, r7, #12
 8103f60:	633b      	str	r3, [r7, #48]	; 0x30
 8103f62:	687b      	ldr	r3, [r7, #4]
 8103f64:	62fb      	str	r3, [r7, #44]	; 0x2c
 8103f66:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8103f68:	62bb      	str	r3, [r7, #40]	; 0x28
  qhdl->interrupt_set(false);
 8103f6a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8103f6c:	681b      	ldr	r3, [r3, #0]
 8103f6e:	2000      	movs	r0, #0
 8103f70:	4798      	blx	r3
}
 8103f72:	bf00      	nop

TU_ATTR_ALWAYS_INLINE static inline bool osal_queue_receive(osal_queue_t qhdl, void* data, uint32_t msec) {
  (void) msec; // not used, always behave as msec = 0

  _osal_q_lock(qhdl);
  bool success = tu_fifo_read(&qhdl->ff, data);
 8103f74:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8103f76:	3304      	adds	r3, #4
 8103f78:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8103f7a:	4618      	mov	r0, r3
 8103f7c:	f7ff fdaf 	bl	8103ade <tu_fifo_read>
 8103f80:	4603      	mov	r3, r0
 8103f82:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8103f86:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8103f88:	623b      	str	r3, [r7, #32]
  qhdl->interrupt_set(true);
 8103f8a:	6a3b      	ldr	r3, [r7, #32]
 8103f8c:	681b      	ldr	r3, [r3, #0]
 8103f8e:	2001      	movs	r0, #1
 8103f90:	4798      	blx	r3
}
 8103f92:	bf00      	nop
  _osal_q_unlock(qhdl);

  return success;
 8103f94:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8103f98:	f083 0301 	eor.w	r3, r3, #1
 8103f9c:	b2db      	uxtb	r3, r3
 8103f9e:	2b00      	cmp	r3, #0
 8103fa0:	f040 812b 	bne.w	81041fa <tud_task_ext+0x2c2>
#if CFG_TUSB_DEBUG >= CFG_TUD_LOG_LEVEL
    if (event.event_id == DCD_EVENT_SETUP_RECEIVED) TU_LOG_USBD("\r\n"); // extra line for setup
    TU_LOG_USBD("USBD %s ", event.event_id < DCD_EVENT_COUNT ? _usbd_event_str[event.event_id] : "CORRUPTED");
#endif

    switch ( event.event_id )
 8103fa4:	7b7b      	ldrb	r3, [r7, #13]
 8103fa6:	3b01      	subs	r3, #1
 8103fa8:	2b07      	cmp	r3, #7
 8103faa:	f200 810e 	bhi.w	81041ca <tud_task_ext+0x292>
 8103fae:	a201      	add	r2, pc, #4	; (adr r2, 8103fb4 <tud_task_ext+0x7c>)
 8103fb0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8103fb4:	08103fd5 	.word	0x08103fd5
 8103fb8:	08103fe5 	.word	0x08103fe5
 8103fbc:	081041cb 	.word	0x081041cb
 8103fc0:	08104171 	.word	0x08104171
 8103fc4:	081041a1 	.word	0x081041a1
 8103fc8:	08103ffb 	.word	0x08103ffb
 8103fcc:	08104071 	.word	0x08104071
 8103fd0:	081041bb 	.word	0x081041bb
    {
      case DCD_EVENT_BUS_RESET:
        TU_LOG_USBD(": %s Speed\r\n", tu_str_speed[event.bus_reset.speed]);
        usbd_reset(event.rhport);
 8103fd4:	7b3b      	ldrb	r3, [r7, #12]
 8103fd6:	4618      	mov	r0, r3
 8103fd8:	f7ff ff9e 	bl	8103f18 <usbd_reset>
        _usbd_dev.speed = event.bus_reset.speed;
 8103fdc:	7c3a      	ldrb	r2, [r7, #16]
 8103fde:	4b8b      	ldr	r3, [pc, #556]	; (810420c <tud_task_ext+0x2d4>)
 8103fe0:	709a      	strb	r2, [r3, #2]
      break;
 8103fe2:	e107      	b.n	81041f4 <tud_task_ext+0x2bc>

      case DCD_EVENT_UNPLUGGED:
        TU_LOG_USBD("\r\n");
        usbd_reset(event.rhport);
 8103fe4:	7b3b      	ldrb	r3, [r7, #12]
 8103fe6:	4618      	mov	r0, r3
 8103fe8:	f7ff ff96 	bl	8103f18 <usbd_reset>

        // invoke callback
        if (tud_umount_cb) tud_umount_cb();
 8103fec:	4b88      	ldr	r3, [pc, #544]	; (8104210 <tud_task_ext+0x2d8>)
 8103fee:	2b00      	cmp	r3, #0
 8103ff0:	f000 80f5 	beq.w	81041de <tud_task_ext+0x2a6>
 8103ff4:	f3af 8000 	nop.w
      break;
 8103ff8:	e0f1      	b.n	81041de <tud_task_ext+0x2a6>
        TU_LOG_BUF(CFG_TUD_LOG_LEVEL, &event.setup_received, 8);
        TU_LOG_USBD("\r\n");

        // Mark as connected after receiving 1st setup packet.
        // But it is easier to set it every time instead of wasting time to check then set
        _usbd_dev.connected = 1;
 8103ffa:	4a84      	ldr	r2, [pc, #528]	; (810420c <tud_task_ext+0x2d4>)
 8103ffc:	7813      	ldrb	r3, [r2, #0]
 8103ffe:	f043 0301 	orr.w	r3, r3, #1
 8104002:	7013      	strb	r3, [r2, #0]

        // mark both in & out control as free
        _usbd_dev.ep_status[0][TUSB_DIR_OUT].busy = 0;
 8104004:	4a81      	ldr	r2, [pc, #516]	; (810420c <tud_task_ext+0x2d4>)
 8104006:	f892 3025 	ldrb.w	r3, [r2, #37]	; 0x25
 810400a:	f36f 0300 	bfc	r3, #0, #1
 810400e:	f882 3025 	strb.w	r3, [r2, #37]	; 0x25
        _usbd_dev.ep_status[0][TUSB_DIR_OUT].claimed = 0;
 8104012:	4a7e      	ldr	r2, [pc, #504]	; (810420c <tud_task_ext+0x2d4>)
 8104014:	f892 3025 	ldrb.w	r3, [r2, #37]	; 0x25
 8104018:	f36f 0382 	bfc	r3, #2, #1
 810401c:	f882 3025 	strb.w	r3, [r2, #37]	; 0x25
        _usbd_dev.ep_status[0][TUSB_DIR_IN ].busy = 0;
 8104020:	4a7a      	ldr	r2, [pc, #488]	; (810420c <tud_task_ext+0x2d4>)
 8104022:	f892 3026 	ldrb.w	r3, [r2, #38]	; 0x26
 8104026:	f36f 0300 	bfc	r3, #0, #1
 810402a:	f882 3026 	strb.w	r3, [r2, #38]	; 0x26
        _usbd_dev.ep_status[0][TUSB_DIR_IN ].claimed = 0;
 810402e:	4a77      	ldr	r2, [pc, #476]	; (810420c <tud_task_ext+0x2d4>)
 8104030:	f892 3026 	ldrb.w	r3, [r2, #38]	; 0x26
 8104034:	f36f 0382 	bfc	r3, #2, #1
 8104038:	f882 3026 	strb.w	r3, [r2, #38]	; 0x26

        // Process control request
        if ( !process_control_request(event.rhport, &event.setup_received) )
 810403c:	7b3a      	ldrb	r2, [r7, #12]
 810403e:	f107 030c 	add.w	r3, r7, #12
 8104042:	3304      	adds	r3, #4
 8104044:	4619      	mov	r1, r3
 8104046:	4610      	mov	r0, r2
 8104048:	f000 f908 	bl	810425c <process_control_request>
 810404c:	4603      	mov	r3, r0
 810404e:	f083 0301 	eor.w	r3, r3, #1
 8104052:	b2db      	uxtb	r3, r3
 8104054:	2b00      	cmp	r3, #0
 8104056:	f000 80c4 	beq.w	81041e2 <tud_task_ext+0x2aa>
        {
          TU_LOG_USBD("  Stall EP0\r\n");
          // Failed -> stall both control endpoint IN and OUT
          dcd_edpt_stall(event.rhport, 0);
 810405a:	7b3b      	ldrb	r3, [r7, #12]
 810405c:	2100      	movs	r1, #0
 810405e:	4618      	mov	r0, r3
 8104060:	f002 fbb0 	bl	81067c4 <dcd_edpt_stall>
          dcd_edpt_stall(event.rhport, 0 | TUSB_DIR_IN_MASK);
 8104064:	7b3b      	ldrb	r3, [r7, #12]
 8104066:	2180      	movs	r1, #128	; 0x80
 8104068:	4618      	mov	r0, r3
 810406a:	f002 fbab 	bl	81067c4 <dcd_edpt_stall>
        }
      break;
 810406e:	e0b8      	b.n	81041e2 <tud_task_ext+0x2aa>

      case DCD_EVENT_XFER_COMPLETE:
      {
        // Invoke the class callback associated with the endpoint address
        uint8_t const ep_addr = event.xfer_complete.ep_addr;
 8104070:	7c3b      	ldrb	r3, [r7, #16]
 8104072:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 8104076:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 810407a:	77bb      	strb	r3, [r7, #30]
  return (uint8_t)(addr & (~TUSB_DIR_IN_MASK));
 810407c:	7fbb      	ldrb	r3, [r7, #30]
 810407e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8104082:	b2db      	uxtb	r3, r3
        uint8_t const epnum   = tu_edpt_number(ep_addr);
 8104084:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
 8104088:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 810408c:	77fb      	strb	r3, [r7, #31]
  return (addr & TUSB_DIR_IN_MASK) ? TUSB_DIR_IN : TUSB_DIR_OUT;
 810408e:	7ffb      	ldrb	r3, [r7, #31]
 8104090:	09db      	lsrs	r3, r3, #7
 8104092:	b2db      	uxtb	r3, r3
        uint8_t const ep_dir  = tu_edpt_dir(ep_addr);
 8104094:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45

        TU_LOG_USBD("on EP %02X with %u bytes\r\n", ep_addr, (unsigned int) event.xfer_complete.len);

        _usbd_dev.ep_status[epnum][ep_dir].busy = 0;
 8104098:	f897 2046 	ldrb.w	r2, [r7, #70]	; 0x46
 810409c:	f897 3045 	ldrb.w	r3, [r7, #69]	; 0x45
 81040a0:	495a      	ldr	r1, [pc, #360]	; (810420c <tud_task_ext+0x2d4>)
 81040a2:	0052      	lsls	r2, r2, #1
 81040a4:	440a      	add	r2, r1
 81040a6:	4413      	add	r3, r2
 81040a8:	f103 0220 	add.w	r2, r3, #32
 81040ac:	7953      	ldrb	r3, [r2, #5]
 81040ae:	f36f 0300 	bfc	r3, #0, #1
 81040b2:	7153      	strb	r3, [r2, #5]
        _usbd_dev.ep_status[epnum][ep_dir].claimed = 0;
 81040b4:	f897 2046 	ldrb.w	r2, [r7, #70]	; 0x46
 81040b8:	f897 3045 	ldrb.w	r3, [r7, #69]	; 0x45
 81040bc:	4953      	ldr	r1, [pc, #332]	; (810420c <tud_task_ext+0x2d4>)
 81040be:	0052      	lsls	r2, r2, #1
 81040c0:	440a      	add	r2, r1
 81040c2:	4413      	add	r3, r2
 81040c4:	f103 0220 	add.w	r2, r3, #32
 81040c8:	7953      	ldrb	r3, [r2, #5]
 81040ca:	f36f 0382 	bfc	r3, #2, #1
 81040ce:	7153      	strb	r3, [r2, #5]

        if ( 0 == epnum )
 81040d0:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 81040d4:	2b00      	cmp	r3, #0
 81040d6:	d107      	bne.n	81040e8 <tud_task_ext+0x1b0>
        {
          usbd_control_xfer_cb(event.rhport, ep_addr, (xfer_result_t) event.xfer_complete.result, event.xfer_complete
 81040d8:	7b38      	ldrb	r0, [r7, #12]
 81040da:	7c7a      	ldrb	r2, [r7, #17]
 81040dc:	697b      	ldr	r3, [r7, #20]
 81040de:	f897 1047 	ldrb.w	r1, [r7, #71]	; 0x47
 81040e2:	f001 fadf 	bl	81056a4 <usbd_control_xfer_cb>

          TU_LOG_USBD("  %s xfer callback\r\n", driver->name);
          driver->xfer_cb(event.rhport, ep_addr, (xfer_result_t) event.xfer_complete.result, event.xfer_complete.len);
        }
      }
      break;
 81040e6:	e085      	b.n	81041f4 <tud_task_ext+0x2bc>
          usbd_class_driver_t const * driver = get_driver( _usbd_dev.ep2drv[epnum][ep_dir] );
 81040e8:	f897 2046 	ldrb.w	r2, [r7, #70]	; 0x46
 81040ec:	f897 3045 	ldrb.w	r3, [r7, #69]	; 0x45
 81040f0:	4946      	ldr	r1, [pc, #280]	; (810420c <tud_task_ext+0x2d4>)
 81040f2:	0052      	lsls	r2, r2, #1
 81040f4:	440a      	add	r2, r1
 81040f6:	4413      	add	r3, r2
 81040f8:	3313      	adds	r3, #19
 81040fa:	781b      	ldrb	r3, [r3, #0]
 81040fc:	777b      	strb	r3, [r7, #29]
  usbd_class_driver_t const * driver = NULL;
 81040fe:	2300      	movs	r3, #0
 8104100:	61bb      	str	r3, [r7, #24]
  if ( drvid < _app_driver_count ) {
 8104102:	4b44      	ldr	r3, [pc, #272]	; (8104214 <tud_task_ext+0x2dc>)
 8104104:	781b      	ldrb	r3, [r3, #0]
 8104106:	7f7a      	ldrb	r2, [r7, #29]
 8104108:	429a      	cmp	r2, r3
 810410a:	d209      	bcs.n	8104120 <tud_task_ext+0x1e8>
    driver = &_app_driver[drvid];
 810410c:	4b42      	ldr	r3, [pc, #264]	; (8104218 <tud_task_ext+0x2e0>)
 810410e:	6819      	ldr	r1, [r3, #0]
 8104110:	7f7a      	ldrb	r2, [r7, #29]
 8104112:	4613      	mov	r3, r2
 8104114:	005b      	lsls	r3, r3, #1
 8104116:	4413      	add	r3, r2
 8104118:	00db      	lsls	r3, r3, #3
 810411a:	440b      	add	r3, r1
 810411c:	61bb      	str	r3, [r7, #24]
 810411e:	e00f      	b.n	8104140 <tud_task_ext+0x208>
  } else if ( drvid < TOTAL_DRIVER_COUNT && BUILTIN_DRIVER_COUNT > 0 ){
 8104120:	4b3c      	ldr	r3, [pc, #240]	; (8104214 <tud_task_ext+0x2dc>)
 8104122:	781b      	ldrb	r3, [r3, #0]
 8104124:	7f7a      	ldrb	r2, [r7, #29]
 8104126:	429a      	cmp	r2, r3
 8104128:	d80a      	bhi.n	8104140 <tud_task_ext+0x208>
    driver = &_usbd_driver[drvid - _app_driver_count];
 810412a:	7f7b      	ldrb	r3, [r7, #29]
 810412c:	4a39      	ldr	r2, [pc, #228]	; (8104214 <tud_task_ext+0x2dc>)
 810412e:	7812      	ldrb	r2, [r2, #0]
 8104130:	1a9a      	subs	r2, r3, r2
 8104132:	4613      	mov	r3, r2
 8104134:	005b      	lsls	r3, r3, #1
 8104136:	4413      	add	r3, r2
 8104138:	00db      	lsls	r3, r3, #3
 810413a:	4a38      	ldr	r2, [pc, #224]	; (810421c <tud_task_ext+0x2e4>)
 810413c:	4413      	add	r3, r2
 810413e:	61bb      	str	r3, [r7, #24]
  return driver;
 8104140:	69bb      	ldr	r3, [r7, #24]
          usbd_class_driver_t const * driver = get_driver( _usbd_dev.ep2drv[epnum][ep_dir] );
 8104142:	643b      	str	r3, [r7, #64]	; 0x40
          TU_ASSERT(driver, );
 8104144:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8104146:	2b00      	cmp	r3, #0
 8104148:	d109      	bne.n	810415e <tud_task_ext+0x226>
 810414a:	4b35      	ldr	r3, [pc, #212]	; (8104220 <tud_task_ext+0x2e8>)
 810414c:	63fb      	str	r3, [r7, #60]	; 0x3c
 810414e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8104150:	681b      	ldr	r3, [r3, #0]
 8104152:	f003 0301 	and.w	r3, r3, #1
 8104156:	2b00      	cmp	r3, #0
 8104158:	d051      	beq.n	81041fe <tud_task_ext+0x2c6>
 810415a:	be00      	bkpt	0x0000
 810415c:	e04f      	b.n	81041fe <tud_task_ext+0x2c6>
          driver->xfer_cb(event.rhport, ep_addr, (xfer_result_t) event.xfer_complete.result, event.xfer_complete.len);
 810415e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8104160:	691c      	ldr	r4, [r3, #16]
 8104162:	7b38      	ldrb	r0, [r7, #12]
 8104164:	7c7a      	ldrb	r2, [r7, #17]
 8104166:	697b      	ldr	r3, [r7, #20]
 8104168:	f897 1047 	ldrb.w	r1, [r7, #71]	; 0x47
 810416c:	47a0      	blx	r4
      break;
 810416e:	e041      	b.n	81041f4 <tud_task_ext+0x2bc>

      case DCD_EVENT_SUSPEND:
        // NOTE: When plugging/unplugging device, the D+/D- state are unstable and
        // can accidentally meet the SUSPEND condition ( Bus Idle for 3ms ), which result in a series of event
        // e.g suspend -> resume -> unplug/plug. Skip suspend/resume if not connected
        if ( _usbd_dev.connected )
 8104170:	4b26      	ldr	r3, [pc, #152]	; (810420c <tud_task_ext+0x2d4>)
 8104172:	781b      	ldrb	r3, [r3, #0]
 8104174:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8104178:	b2db      	uxtb	r3, r3
 810417a:	2b00      	cmp	r3, #0
 810417c:	d033      	beq.n	81041e6 <tud_task_ext+0x2ae>
        {
          TU_LOG_USBD(": Remote Wakeup = %u\r\n", _usbd_dev.remote_wakeup_en);
          if (tud_suspend_cb) tud_suspend_cb(_usbd_dev.remote_wakeup_en);
 810417e:	4b29      	ldr	r3, [pc, #164]	; (8104224 <tud_task_ext+0x2ec>)
 8104180:	2b00      	cmp	r3, #0
 8104182:	d030      	beq.n	81041e6 <tud_task_ext+0x2ae>
 8104184:	4b21      	ldr	r3, [pc, #132]	; (810420c <tud_task_ext+0x2d4>)
 8104186:	781b      	ldrb	r3, [r3, #0]
 8104188:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 810418c:	b2db      	uxtb	r3, r3
 810418e:	2b00      	cmp	r3, #0
 8104190:	bf14      	ite	ne
 8104192:	2301      	movne	r3, #1
 8104194:	2300      	moveq	r3, #0
 8104196:	b2db      	uxtb	r3, r3
 8104198:	4618      	mov	r0, r3
 810419a:	f3af 8000 	nop.w
        }else
        {
          TU_LOG_USBD(" Skipped\r\n");
        }
      break;
 810419e:	e022      	b.n	81041e6 <tud_task_ext+0x2ae>

      case DCD_EVENT_RESUME:
        if ( _usbd_dev.connected )
 81041a0:	4b1a      	ldr	r3, [pc, #104]	; (810420c <tud_task_ext+0x2d4>)
 81041a2:	781b      	ldrb	r3, [r3, #0]
 81041a4:	f3c3 0300 	ubfx	r3, r3, #0, #1
 81041a8:	b2db      	uxtb	r3, r3
 81041aa:	2b00      	cmp	r3, #0
 81041ac:	d01d      	beq.n	81041ea <tud_task_ext+0x2b2>
        {
          TU_LOG_USBD("\r\n");
          if (tud_resume_cb) tud_resume_cb();
 81041ae:	4b1e      	ldr	r3, [pc, #120]	; (8104228 <tud_task_ext+0x2f0>)
 81041b0:	2b00      	cmp	r3, #0
 81041b2:	d01a      	beq.n	81041ea <tud_task_ext+0x2b2>
 81041b4:	f3af 8000 	nop.w
        }else
        {
          TU_LOG_USBD(" Skipped\r\n");
        }
      break;
 81041b8:	e017      	b.n	81041ea <tud_task_ext+0x2b2>

      case USBD_EVENT_FUNC_CALL:
        TU_LOG_USBD("\r\n");
        if ( event.func_call.func ) event.func_call.func(event.func_call.param);
 81041ba:	693b      	ldr	r3, [r7, #16]
 81041bc:	2b00      	cmp	r3, #0
 81041be:	d016      	beq.n	81041ee <tud_task_ext+0x2b6>
 81041c0:	693b      	ldr	r3, [r7, #16]
 81041c2:	697a      	ldr	r2, [r7, #20]
 81041c4:	4610      	mov	r0, r2
 81041c6:	4798      	blx	r3
      break;
 81041c8:	e011      	b.n	81041ee <tud_task_ext+0x2b6>

      case DCD_EVENT_SOF:
      default:
        TU_BREAKPOINT();
 81041ca:	4b15      	ldr	r3, [pc, #84]	; (8104220 <tud_task_ext+0x2e8>)
 81041cc:	63bb      	str	r3, [r7, #56]	; 0x38
 81041ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 81041d0:	681b      	ldr	r3, [r3, #0]
 81041d2:	f003 0301 	and.w	r3, r3, #1
 81041d6:	2b00      	cmp	r3, #0
 81041d8:	d00b      	beq.n	81041f2 <tud_task_ext+0x2ba>
 81041da:	be00      	bkpt	0x0000
      break;
 81041dc:	e009      	b.n	81041f2 <tud_task_ext+0x2ba>
      break;
 81041de:	bf00      	nop
 81041e0:	e6b9      	b.n	8103f56 <tud_task_ext+0x1e>
      break;
 81041e2:	bf00      	nop
 81041e4:	e6b7      	b.n	8103f56 <tud_task_ext+0x1e>
      break;
 81041e6:	bf00      	nop
 81041e8:	e6b5      	b.n	8103f56 <tud_task_ext+0x1e>
      break;
 81041ea:	bf00      	nop
 81041ec:	e6b3      	b.n	8103f56 <tud_task_ext+0x1e>
      break;
 81041ee:	bf00      	nop
 81041f0:	e6b1      	b.n	8103f56 <tud_task_ext+0x1e>
      break;
 81041f2:	bf00      	nop
  {
 81041f4:	e6af      	b.n	8103f56 <tud_task_ext+0x1e>
  if ( !tud_inited() ) return;
 81041f6:	bf00      	nop
 81041f8:	e002      	b.n	8104200 <tud_task_ext+0x2c8>
    if ( !osal_queue_receive(_usbd_q, &event, timeout_ms) ) return;
 81041fa:	bf00      	nop
 81041fc:	e000      	b.n	8104200 <tud_task_ext+0x2c8>
          TU_ASSERT(driver, );
 81041fe:	bf00      	nop
#if CFG_TUSB_OS != OPT_OS_NONE && CFG_TUSB_OS != OPT_OS_PICO
    // return if there is no more events, for application to run other background
    if (osal_queue_empty(_usbd_q)) return;
#endif
  }
}
 8104200:	374c      	adds	r7, #76	; 0x4c
 8104202:	46bd      	mov	sp, r7
 8104204:	bd90      	pop	{r4, r7, pc}
 8104206:	bf00      	nop
 8104208:	100010a4 	.word	0x100010a4
 810420c:	10000fa4 	.word	0x10000fa4
 8104210:	00000000 	.word	0x00000000
 8104214:	10000fe0 	.word	0x10000fe0
 8104218:	10000fdc 	.word	0x10000fdc
 810421c:	08111ec4 	.word	0x08111ec4
 8104220:	e000edf0 	.word	0xe000edf0
	...

0810422c <invoke_class_control>:
// Control Request Parser & Handling
//--------------------------------------------------------------------+

// Helper to invoke class driver control request handler
static bool invoke_class_control(uint8_t rhport, usbd_class_driver_t const * driver, tusb_control_request_t const * request)
{
 810422c:	b580      	push	{r7, lr}
 810422e:	b084      	sub	sp, #16
 8104230:	af00      	add	r7, sp, #0
 8104232:	4603      	mov	r3, r0
 8104234:	60b9      	str	r1, [r7, #8]
 8104236:	607a      	str	r2, [r7, #4]
 8104238:	73fb      	strb	r3, [r7, #15]
  usbd_control_set_complete_callback(driver->control_xfer_cb);
 810423a:	68bb      	ldr	r3, [r7, #8]
 810423c:	68db      	ldr	r3, [r3, #12]
 810423e:	4618      	mov	r0, r3
 8104240:	f001 fa06 	bl	8105650 <usbd_control_set_complete_callback>
  TU_LOG_USBD("  %s control request\r\n", driver->name);
  return driver->control_xfer_cb(rhport, CONTROL_STAGE_SETUP, request);
 8104244:	68bb      	ldr	r3, [r7, #8]
 8104246:	68db      	ldr	r3, [r3, #12]
 8104248:	7bf8      	ldrb	r0, [r7, #15]
 810424a:	687a      	ldr	r2, [r7, #4]
 810424c:	2101      	movs	r1, #1
 810424e:	4798      	blx	r3
 8104250:	4603      	mov	r3, r0
}
 8104252:	4618      	mov	r0, r3
 8104254:	3710      	adds	r7, #16
 8104256:	46bd      	mov	sp, r7
 8104258:	bd80      	pop	{r7, pc}
	...

0810425c <process_control_request>:

// This handles the actual request and its response.
// return false will cause its caller to stall control endpoint
static bool process_control_request(uint8_t rhport, tusb_control_request_t const * p_request)
{
 810425c:	b580      	push	{r7, lr}
 810425e:	b09a      	sub	sp, #104	; 0x68
 8104260:	af00      	add	r7, sp, #0
 8104262:	4603      	mov	r3, r0
 8104264:	6039      	str	r1, [r7, #0]
 8104266:	71fb      	strb	r3, [r7, #7]
  usbd_control_set_complete_callback(NULL);
 8104268:	2000      	movs	r0, #0
 810426a:	f001 f9f1 	bl	8105650 <usbd_control_set_complete_callback>

  TU_ASSERT(p_request->bmRequestType_bit.type < TUSB_REQ_TYPE_INVALID);
 810426e:	683b      	ldr	r3, [r7, #0]
 8104270:	781b      	ldrb	r3, [r3, #0]
 8104272:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8104276:	b2db      	uxtb	r3, r3
 8104278:	2b60      	cmp	r3, #96	; 0x60
 810427a:	d10a      	bne.n	8104292 <process_control_request+0x36>
 810427c:	4ba9      	ldr	r3, [pc, #676]	; (8104524 <process_control_request+0x2c8>)
 810427e:	633b      	str	r3, [r7, #48]	; 0x30
 8104280:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8104282:	681b      	ldr	r3, [r3, #0]
 8104284:	f003 0301 	and.w	r3, r3, #1
 8104288:	2b00      	cmp	r3, #0
 810428a:	d000      	beq.n	810428e <process_control_request+0x32>
 810428c:	be00      	bkpt	0x0000
 810428e:	2300      	movs	r3, #0
 8104290:	e2d3      	b.n	810483a <process_control_request+0x5de>

  // Vendor request
  if ( p_request->bmRequestType_bit.type == TUSB_REQ_TYPE_VENDOR )
 8104292:	683b      	ldr	r3, [r7, #0]
 8104294:	781b      	ldrb	r3, [r3, #0]
 8104296:	f003 0360 	and.w	r3, r3, #96	; 0x60
 810429a:	b2db      	uxtb	r3, r3
 810429c:	2b40      	cmp	r3, #64	; 0x40
 810429e:	d10f      	bne.n	81042c0 <process_control_request+0x64>
  {
    TU_VERIFY(tud_vendor_control_xfer_cb);
 81042a0:	4ba1      	ldr	r3, [pc, #644]	; (8104528 <process_control_request+0x2cc>)
 81042a2:	2b00      	cmp	r3, #0
 81042a4:	d101      	bne.n	81042aa <process_control_request+0x4e>
 81042a6:	2300      	movs	r3, #0
 81042a8:	e2c7      	b.n	810483a <process_control_request+0x5de>

    usbd_control_set_complete_callback(tud_vendor_control_xfer_cb);
 81042aa:	489f      	ldr	r0, [pc, #636]	; (8104528 <process_control_request+0x2cc>)
 81042ac:	f001 f9d0 	bl	8105650 <usbd_control_set_complete_callback>
    return tud_vendor_control_xfer_cb(rhport, CONTROL_STAGE_SETUP, p_request);
 81042b0:	79fb      	ldrb	r3, [r7, #7]
 81042b2:	683a      	ldr	r2, [r7, #0]
 81042b4:	2101      	movs	r1, #1
 81042b6:	4618      	mov	r0, r3
 81042b8:	f3af 8000 	nop.w
 81042bc:	4603      	mov	r3, r0
 81042be:	e2bc      	b.n	810483a <process_control_request+0x5de>
    TU_LOG_USBD("  %s", tu_str_std_request[p_request->bRequest]);
    if (TUSB_REQ_GET_DESCRIPTOR != p_request->bRequest) TU_LOG_USBD("\r\n");
  }
#endif

  switch ( p_request->bmRequestType_bit.recipient )
 81042c0:	683b      	ldr	r3, [r7, #0]
 81042c2:	781b      	ldrb	r3, [r3, #0]
 81042c4:	f3c3 0304 	ubfx	r3, r3, #0, #5
 81042c8:	b2db      	uxtb	r3, r3
 81042ca:	2b02      	cmp	r3, #2
 81042cc:	f000 81d8 	beq.w	8104680 <process_control_request+0x424>
 81042d0:	2b02      	cmp	r3, #2
 81042d2:	f300 82a5 	bgt.w	8104820 <process_control_request+0x5c4>
 81042d6:	2b00      	cmp	r3, #0
 81042d8:	d003      	beq.n	81042e2 <process_control_request+0x86>
 81042da:	2b01      	cmp	r3, #1
 81042dc:	f000 815a 	beq.w	8104594 <process_control_request+0x338>
 81042e0:	e29e      	b.n	8104820 <process_control_request+0x5c4>
  {
    //------------- Device Requests e.g in enumeration -------------//
    case TUSB_REQ_RCPT_DEVICE:
      if ( TUSB_REQ_TYPE_CLASS == p_request->bmRequestType_bit.type )
 81042e2:	683b      	ldr	r3, [r7, #0]
 81042e4:	781b      	ldrb	r3, [r3, #0]
 81042e6:	f003 0360 	and.w	r3, r3, #96	; 0x60
 81042ea:	b2db      	uxtb	r3, r3
 81042ec:	2b20      	cmp	r3, #32
 81042ee:	d148      	bne.n	8104382 <process_control_request+0x126>
      {
        uint8_t const itf = tu_u16_low(p_request->wIndex);
 81042f0:	683b      	ldr	r3, [r7, #0]
 81042f2:	889b      	ldrh	r3, [r3, #4]
 81042f4:	b29b      	uxth	r3, r3
 81042f6:	85fb      	strh	r3, [r7, #46]	; 0x2e
TU_ATTR_ALWAYS_INLINE static inline uint8_t tu_u16_low (uint16_t ui16) { return TU_U16_LOW(ui16); }
 81042f8:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 81042fa:	b2db      	uxtb	r3, r3
 81042fc:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
        TU_VERIFY(itf < TU_ARRAY_SIZE(_usbd_dev.itf2drv));
 8104300:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8104304:	2b0f      	cmp	r3, #15
 8104306:	d901      	bls.n	810430c <process_control_request+0xb0>
 8104308:	2300      	movs	r3, #0
 810430a:	e296      	b.n	810483a <process_control_request+0x5de>

        usbd_class_driver_t const * driver = get_driver(_usbd_dev.itf2drv[itf]);
 810430c:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8104310:	4a86      	ldr	r2, [pc, #536]	; (810452c <process_control_request+0x2d0>)
 8104312:	4413      	add	r3, r2
 8104314:	78db      	ldrb	r3, [r3, #3]
 8104316:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
  usbd_class_driver_t const * driver = NULL;
 810431a:	2300      	movs	r3, #0
 810431c:	62bb      	str	r3, [r7, #40]	; 0x28
  if ( drvid < _app_driver_count ) {
 810431e:	4b84      	ldr	r3, [pc, #528]	; (8104530 <process_control_request+0x2d4>)
 8104320:	781b      	ldrb	r3, [r3, #0]
 8104322:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 8104326:	429a      	cmp	r2, r3
 8104328:	d20a      	bcs.n	8104340 <process_control_request+0xe4>
    driver = &_app_driver[drvid];
 810432a:	4b82      	ldr	r3, [pc, #520]	; (8104534 <process_control_request+0x2d8>)
 810432c:	6819      	ldr	r1, [r3, #0]
 810432e:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 8104332:	4613      	mov	r3, r2
 8104334:	005b      	lsls	r3, r3, #1
 8104336:	4413      	add	r3, r2
 8104338:	00db      	lsls	r3, r3, #3
 810433a:	440b      	add	r3, r1
 810433c:	62bb      	str	r3, [r7, #40]	; 0x28
 810433e:	e011      	b.n	8104364 <process_control_request+0x108>
  } else if ( drvid < TOTAL_DRIVER_COUNT && BUILTIN_DRIVER_COUNT > 0 ){
 8104340:	4b7b      	ldr	r3, [pc, #492]	; (8104530 <process_control_request+0x2d4>)
 8104342:	781b      	ldrb	r3, [r3, #0]
 8104344:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 8104348:	429a      	cmp	r2, r3
 810434a:	d80b      	bhi.n	8104364 <process_control_request+0x108>
    driver = &_usbd_driver[drvid - _app_driver_count];
 810434c:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8104350:	4a77      	ldr	r2, [pc, #476]	; (8104530 <process_control_request+0x2d4>)
 8104352:	7812      	ldrb	r2, [r2, #0]
 8104354:	1a9a      	subs	r2, r3, r2
 8104356:	4613      	mov	r3, r2
 8104358:	005b      	lsls	r3, r3, #1
 810435a:	4413      	add	r3, r2
 810435c:	00db      	lsls	r3, r3, #3
 810435e:	4a76      	ldr	r2, [pc, #472]	; (8104538 <process_control_request+0x2dc>)
 8104360:	4413      	add	r3, r2
 8104362:	62bb      	str	r3, [r7, #40]	; 0x28
  return driver;
 8104364:	6abb      	ldr	r3, [r7, #40]	; 0x28
        usbd_class_driver_t const * driver = get_driver(_usbd_dev.itf2drv[itf]);
 8104366:	63bb      	str	r3, [r7, #56]	; 0x38
        TU_VERIFY(driver);
 8104368:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 810436a:	2b00      	cmp	r3, #0
 810436c:	d101      	bne.n	8104372 <process_control_request+0x116>
 810436e:	2300      	movs	r3, #0
 8104370:	e263      	b.n	810483a <process_control_request+0x5de>

        // forward to class driver: "non-STD request to Interface"
        return invoke_class_control(rhport, driver, p_request);
 8104372:	79fb      	ldrb	r3, [r7, #7]
 8104374:	683a      	ldr	r2, [r7, #0]
 8104376:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8104378:	4618      	mov	r0, r3
 810437a:	f7ff ff57 	bl	810422c <invoke_class_control>
 810437e:	4603      	mov	r3, r0
 8104380:	e25b      	b.n	810483a <process_control_request+0x5de>
      }

      if ( TUSB_REQ_TYPE_STANDARD != p_request->bmRequestType_bit.type )
 8104382:	683b      	ldr	r3, [r7, #0]
 8104384:	781b      	ldrb	r3, [r3, #0]
 8104386:	f003 0360 	and.w	r3, r3, #96	; 0x60
 810438a:	b2db      	uxtb	r3, r3
 810438c:	2b00      	cmp	r3, #0
 810438e:	d00a      	beq.n	81043a6 <process_control_request+0x14a>
      {
        // Non standard request is not supported
        TU_BREAKPOINT();
 8104390:	4b64      	ldr	r3, [pc, #400]	; (8104524 <process_control_request+0x2c8>)
 8104392:	643b      	str	r3, [r7, #64]	; 0x40
 8104394:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8104396:	681b      	ldr	r3, [r3, #0]
 8104398:	f003 0301 	and.w	r3, r3, #1
 810439c:	2b00      	cmp	r3, #0
 810439e:	d000      	beq.n	81043a2 <process_control_request+0x146>
 81043a0:	be00      	bkpt	0x0000
        return false;
 81043a2:	2300      	movs	r3, #0
 81043a4:	e249      	b.n	810483a <process_control_request+0x5de>
      }

      switch ( p_request->bRequest )
 81043a6:	683b      	ldr	r3, [r7, #0]
 81043a8:	785b      	ldrb	r3, [r3, #1]
 81043aa:	2b09      	cmp	r3, #9
 81043ac:	f200 80e5 	bhi.w	810457a <process_control_request+0x31e>
 81043b0:	a201      	add	r2, pc, #4	; (adr r2, 81043b8 <process_control_request+0x15c>)
 81043b2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 81043b6:	bf00      	nop
 81043b8:	08104545 	.word	0x08104545
 81043bc:	081044ff 	.word	0x081044ff
 81043c0:	0810457b 	.word	0x0810457b
 81043c4:	081044db 	.word	0x081044db
 81043c8:	0810457b 	.word	0x0810457b
 81043cc:	081043e1 	.word	0x081043e1
 81043d0:	081044c1 	.word	0x081044c1
 81043d4:	0810457b 	.word	0x0810457b
 81043d8:	08104405 	.word	0x08104405
 81043dc:	0810441d 	.word	0x0810441d
      {
        case TUSB_REQ_SET_ADDRESS:
          // Depending on mcu, status phase could be sent either before or after changing device address,
          // or even require stack to not response with status at all
          // Therefore DCD must take full responsibility to response and include zlp status packet if needed.
          usbd_control_set_request(p_request); // set request since DCD has no access to tud_control_status() API
 81043e0:	6838      	ldr	r0, [r7, #0]
 81043e2:	f001 f945 	bl	8105670 <usbd_control_set_request>
          dcd_set_address(rhport, (uint8_t) p_request->wValue);
 81043e6:	683b      	ldr	r3, [r7, #0]
 81043e8:	885b      	ldrh	r3, [r3, #2]
 81043ea:	b29b      	uxth	r3, r3
 81043ec:	b2da      	uxtb	r2, r3
 81043ee:	79fb      	ldrb	r3, [r7, #7]
 81043f0:	4611      	mov	r1, r2
 81043f2:	4618      	mov	r0, r3
 81043f4:	f001 fe9c 	bl	8106130 <dcd_set_address>
          // skip tud_control_status()
          _usbd_dev.addressed = 1;
 81043f8:	4a4c      	ldr	r2, [pc, #304]	; (810452c <process_control_request+0x2d0>)
 81043fa:	7813      	ldrb	r3, [r2, #0]
 81043fc:	f043 0302 	orr.w	r3, r3, #2
 8104400:	7013      	strb	r3, [r2, #0]
        break;
 8104402:	e0c6      	b.n	8104592 <process_control_request+0x336>

        case TUSB_REQ_GET_CONFIGURATION:
        {
          uint8_t cfg_num = _usbd_dev.cfg_num;
 8104404:	4b49      	ldr	r3, [pc, #292]	; (810452c <process_control_request+0x2d0>)
 8104406:	785b      	ldrb	r3, [r3, #1]
 8104408:	b2db      	uxtb	r3, r3
 810440a:	74fb      	strb	r3, [r7, #19]
          tud_control_xfer(rhport, p_request, &cfg_num, 1);
 810440c:	f107 0213 	add.w	r2, r7, #19
 8104410:	79f8      	ldrb	r0, [r7, #7]
 8104412:	2301      	movs	r3, #1
 8104414:	6839      	ldr	r1, [r7, #0]
 8104416:	f001 f89f 	bl	8105558 <tud_control_xfer>
        }
        break;
 810441a:	e0ba      	b.n	8104592 <process_control_request+0x336>

        case TUSB_REQ_SET_CONFIGURATION:
        {
          uint8_t const cfg_num = (uint8_t) p_request->wValue;
 810441c:	683b      	ldr	r3, [r7, #0]
 810441e:	885b      	ldrh	r3, [r3, #2]
 8104420:	b29b      	uxth	r3, r3
 8104422:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f

          // Only process if new configure is different
          if (_usbd_dev.cfg_num != cfg_num)
 8104426:	4b41      	ldr	r3, [pc, #260]	; (810452c <process_control_request+0x2d0>)
 8104428:	785b      	ldrb	r3, [r3, #1]
 810442a:	b2db      	uxtb	r3, r3
 810442c:	f897 204f 	ldrb.w	r2, [r7, #79]	; 0x4f
 8104430:	429a      	cmp	r2, r3
 8104432:	d03b      	beq.n	81044ac <process_control_request+0x250>
          {
            if ( _usbd_dev.cfg_num )
 8104434:	4b3d      	ldr	r3, [pc, #244]	; (810452c <process_control_request+0x2d0>)
 8104436:	785b      	ldrb	r3, [r3, #1]
 8104438:	b2db      	uxtb	r3, r3
 810443a:	2b00      	cmp	r3, #0
 810443c:	d00f      	beq.n	810445e <process_control_request+0x202>
            {
              // already configured: need to clear all endpoints and driver first
              TU_LOG_USBD("  Clear current Configuration (%u) before switching\r\n", _usbd_dev.cfg_num);

              // close all non-control endpoints, cancel all pending transfers if any
              dcd_edpt_close_all(rhport);
 810443e:	79fb      	ldrb	r3, [r7, #7]
 8104440:	4618      	mov	r0, r3
 8104442:	f002 f81f 	bl	8106484 <dcd_edpt_close_all>

              // close all drivers and current configured state except bus speed
              uint8_t const speed = _usbd_dev.speed;
 8104446:	4b39      	ldr	r3, [pc, #228]	; (810452c <process_control_request+0x2d0>)
 8104448:	789b      	ldrb	r3, [r3, #2]
 810444a:	f887 304e 	strb.w	r3, [r7, #78]	; 0x4e
              configuration_reset(rhport);
 810444e:	79fb      	ldrb	r3, [r7, #7]
 8104450:	4618      	mov	r0, r3
 8104452:	f7ff fcf7 	bl	8103e44 <configuration_reset>

              _usbd_dev.speed = speed; // restore speed
 8104456:	4a35      	ldr	r2, [pc, #212]	; (810452c <process_control_request+0x2d0>)
 8104458:	f897 304e 	ldrb.w	r3, [r7, #78]	; 0x4e
 810445c:	7093      	strb	r3, [r2, #2]
            }

            // Handle the new configuration and execute the corresponding callback
            if ( cfg_num )
 810445e:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8104462:	2b00      	cmp	r3, #0
 8104464:	d01d      	beq.n	81044a2 <process_control_request+0x246>
            {
              // switch to new configuration if not zero
              TU_ASSERT( process_set_config(rhport, cfg_num) );
 8104466:	f897 204f 	ldrb.w	r2, [r7, #79]	; 0x4f
 810446a:	79fb      	ldrb	r3, [r7, #7]
 810446c:	4611      	mov	r1, r2
 810446e:	4618      	mov	r0, r3
 8104470:	f000 f9ec 	bl	810484c <process_set_config>
 8104474:	4603      	mov	r3, r0
 8104476:	f083 0301 	eor.w	r3, r3, #1
 810447a:	b2db      	uxtb	r3, r3
 810447c:	2b00      	cmp	r3, #0
 810447e:	d00a      	beq.n	8104496 <process_control_request+0x23a>
 8104480:	4b28      	ldr	r3, [pc, #160]	; (8104524 <process_control_request+0x2c8>)
 8104482:	64bb      	str	r3, [r7, #72]	; 0x48
 8104484:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8104486:	681b      	ldr	r3, [r3, #0]
 8104488:	f003 0301 	and.w	r3, r3, #1
 810448c:	2b00      	cmp	r3, #0
 810448e:	d000      	beq.n	8104492 <process_control_request+0x236>
 8104490:	be00      	bkpt	0x0000
 8104492:	2300      	movs	r3, #0
 8104494:	e1d1      	b.n	810483a <process_control_request+0x5de>

              if ( tud_mount_cb ) tud_mount_cb();
 8104496:	4b29      	ldr	r3, [pc, #164]	; (810453c <process_control_request+0x2e0>)
 8104498:	2b00      	cmp	r3, #0
 810449a:	d007      	beq.n	81044ac <process_control_request+0x250>
 810449c:	f3af 8000 	nop.w
 81044a0:	e004      	b.n	81044ac <process_control_request+0x250>
            }
            else
            {
              if ( tud_umount_cb ) tud_umount_cb();
 81044a2:	4b27      	ldr	r3, [pc, #156]	; (8104540 <process_control_request+0x2e4>)
 81044a4:	2b00      	cmp	r3, #0
 81044a6:	d001      	beq.n	81044ac <process_control_request+0x250>
 81044a8:	f3af 8000 	nop.w
            }
          }

          _usbd_dev.cfg_num = cfg_num;
 81044ac:	4a1f      	ldr	r2, [pc, #124]	; (810452c <process_control_request+0x2d0>)
 81044ae:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 81044b2:	7053      	strb	r3, [r2, #1]
          tud_control_status(rhport, p_request);
 81044b4:	79fb      	ldrb	r3, [r7, #7]
 81044b6:	6839      	ldr	r1, [r7, #0]
 81044b8:	4618      	mov	r0, r3
 81044ba:	f000 ffdb 	bl	8105474 <tud_control_status>
        }
        break;
 81044be:	e068      	b.n	8104592 <process_control_request+0x336>

        case TUSB_REQ_GET_DESCRIPTOR:
          TU_VERIFY( process_get_descriptor(rhport, p_request) );
 81044c0:	79fb      	ldrb	r3, [r7, #7]
 81044c2:	6839      	ldr	r1, [r7, #0]
 81044c4:	4618      	mov	r0, r3
 81044c6:	f000 faf9 	bl	8104abc <process_get_descriptor>
 81044ca:	4603      	mov	r3, r0
 81044cc:	f083 0301 	eor.w	r3, r3, #1
 81044d0:	b2db      	uxtb	r3, r3
 81044d2:	2b00      	cmp	r3, #0
 81044d4:	d05c      	beq.n	8104590 <process_control_request+0x334>
 81044d6:	2300      	movs	r3, #0
 81044d8:	e1af      	b.n	810483a <process_control_request+0x5de>
        break;

        case TUSB_REQ_SET_FEATURE:
          // Only support remote wakeup for device feature
          TU_VERIFY(TUSB_REQ_FEATURE_REMOTE_WAKEUP == p_request->wValue);
 81044da:	683b      	ldr	r3, [r7, #0]
 81044dc:	885b      	ldrh	r3, [r3, #2]
 81044de:	b29b      	uxth	r3, r3
 81044e0:	2b01      	cmp	r3, #1
 81044e2:	d001      	beq.n	81044e8 <process_control_request+0x28c>
 81044e4:	2300      	movs	r3, #0
 81044e6:	e1a8      	b.n	810483a <process_control_request+0x5de>

          TU_LOG_USBD("    Enable Remote Wakeup\r\n");

          // Host may enable remote wake up before suspending especially HID device
          _usbd_dev.remote_wakeup_en = true;
 81044e8:	4a10      	ldr	r2, [pc, #64]	; (810452c <process_control_request+0x2d0>)
 81044ea:	7813      	ldrb	r3, [r2, #0]
 81044ec:	f043 0308 	orr.w	r3, r3, #8
 81044f0:	7013      	strb	r3, [r2, #0]
          tud_control_status(rhport, p_request);
 81044f2:	79fb      	ldrb	r3, [r7, #7]
 81044f4:	6839      	ldr	r1, [r7, #0]
 81044f6:	4618      	mov	r0, r3
 81044f8:	f000 ffbc 	bl	8105474 <tud_control_status>
        break;
 81044fc:	e049      	b.n	8104592 <process_control_request+0x336>

        case TUSB_REQ_CLEAR_FEATURE:
          // Only support remote wakeup for device feature
          TU_VERIFY(TUSB_REQ_FEATURE_REMOTE_WAKEUP == p_request->wValue);
 81044fe:	683b      	ldr	r3, [r7, #0]
 8104500:	885b      	ldrh	r3, [r3, #2]
 8104502:	b29b      	uxth	r3, r3
 8104504:	2b01      	cmp	r3, #1
 8104506:	d001      	beq.n	810450c <process_control_request+0x2b0>
 8104508:	2300      	movs	r3, #0
 810450a:	e196      	b.n	810483a <process_control_request+0x5de>

          TU_LOG_USBD("    Disable Remote Wakeup\r\n");

          // Host may disable remote wake up after resuming
          _usbd_dev.remote_wakeup_en = false;
 810450c:	4a07      	ldr	r2, [pc, #28]	; (810452c <process_control_request+0x2d0>)
 810450e:	7813      	ldrb	r3, [r2, #0]
 8104510:	f36f 03c3 	bfc	r3, #3, #1
 8104514:	7013      	strb	r3, [r2, #0]
          tud_control_status(rhport, p_request);
 8104516:	79fb      	ldrb	r3, [r7, #7]
 8104518:	6839      	ldr	r1, [r7, #0]
 810451a:	4618      	mov	r0, r3
 810451c:	f000 ffaa 	bl	8105474 <tud_control_status>
        break;
 8104520:	e037      	b.n	8104592 <process_control_request+0x336>
 8104522:	bf00      	nop
 8104524:	e000edf0 	.word	0xe000edf0
 8104528:	00000000 	.word	0x00000000
 810452c:	10000fa4 	.word	0x10000fa4
 8104530:	10000fe0 	.word	0x10000fe0
 8104534:	10000fdc 	.word	0x10000fdc
 8104538:	08111ec4 	.word	0x08111ec4
	...
        case TUSB_REQ_GET_STATUS:
        {
          // Device status bit mask
          // - Bit 0: Self Powered
          // - Bit 1: Remote Wakeup enabled
          uint16_t status = (uint16_t) ((_usbd_dev.self_powered ? 1u : 0u) | (_usbd_dev.remote_wakeup_en ? 2u : 0u));
 8104544:	4b9a      	ldr	r3, [pc, #616]	; (81047b0 <process_control_request+0x554>)
 8104546:	781b      	ldrb	r3, [r3, #0]
 8104548:	095b      	lsrs	r3, r3, #5
 810454a:	b2db      	uxtb	r3, r3
 810454c:	b29b      	uxth	r3, r3
 810454e:	f003 0301 	and.w	r3, r3, #1
 8104552:	b29a      	uxth	r2, r3
 8104554:	4b96      	ldr	r3, [pc, #600]	; (81047b0 <process_control_request+0x554>)
 8104556:	781b      	ldrb	r3, [r3, #0]
 8104558:	089b      	lsrs	r3, r3, #2
 810455a:	b2db      	uxtb	r3, r3
 810455c:	b29b      	uxth	r3, r3
 810455e:	f003 0302 	and.w	r3, r3, #2
 8104562:	b29b      	uxth	r3, r3
 8104564:	4313      	orrs	r3, r2
 8104566:	b29b      	uxth	r3, r3
 8104568:	823b      	strh	r3, [r7, #16]
          tud_control_xfer(rhport, p_request, &status, 2);
 810456a:	f107 0210 	add.w	r2, r7, #16
 810456e:	79f8      	ldrb	r0, [r7, #7]
 8104570:	2302      	movs	r3, #2
 8104572:	6839      	ldr	r1, [r7, #0]
 8104574:	f000 fff0 	bl	8105558 <tud_control_xfer>
        }
        break;
 8104578:	e00b      	b.n	8104592 <process_control_request+0x336>

        // Unknown/Unsupported request
        default: TU_BREAKPOINT(); return false;
 810457a:	4b8e      	ldr	r3, [pc, #568]	; (81047b4 <process_control_request+0x558>)
 810457c:	647b      	str	r3, [r7, #68]	; 0x44
 810457e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8104580:	681b      	ldr	r3, [r3, #0]
 8104582:	f003 0301 	and.w	r3, r3, #1
 8104586:	2b00      	cmp	r3, #0
 8104588:	d000      	beq.n	810458c <process_control_request+0x330>
 810458a:	be00      	bkpt	0x0000
 810458c:	2300      	movs	r3, #0
 810458e:	e154      	b.n	810483a <process_control_request+0x5de>
        break;
 8104590:	bf00      	nop
      }
    break;
 8104592:	e151      	b.n	8104838 <process_control_request+0x5dc>

    //------------- Class/Interface Specific Request -------------//
    case TUSB_REQ_RCPT_INTERFACE:
    {
      uint8_t const itf = tu_u16_low(p_request->wIndex);
 8104594:	683b      	ldr	r3, [r7, #0]
 8104596:	889b      	ldrh	r3, [r3, #4]
 8104598:	b29b      	uxth	r3, r3
 810459a:	84fb      	strh	r3, [r7, #38]	; 0x26
 810459c:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 810459e:	b2db      	uxtb	r3, r3
 81045a0:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
      TU_VERIFY(itf < TU_ARRAY_SIZE(_usbd_dev.itf2drv));
 81045a4:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 81045a8:	2b0f      	cmp	r3, #15
 81045aa:	d901      	bls.n	81045b0 <process_control_request+0x354>
 81045ac:	2300      	movs	r3, #0
 81045ae:	e144      	b.n	810483a <process_control_request+0x5de>

      usbd_class_driver_t const * driver = get_driver(_usbd_dev.itf2drv[itf]);
 81045b0:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 81045b4:	4a7e      	ldr	r2, [pc, #504]	; (81047b0 <process_control_request+0x554>)
 81045b6:	4413      	add	r3, r2
 81045b8:	78db      	ldrb	r3, [r3, #3]
 81045ba:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  usbd_class_driver_t const * driver = NULL;
 81045be:	2300      	movs	r3, #0
 81045c0:	623b      	str	r3, [r7, #32]
  if ( drvid < _app_driver_count ) {
 81045c2:	4b7d      	ldr	r3, [pc, #500]	; (81047b8 <process_control_request+0x55c>)
 81045c4:	781b      	ldrb	r3, [r3, #0]
 81045c6:	f897 2025 	ldrb.w	r2, [r7, #37]	; 0x25
 81045ca:	429a      	cmp	r2, r3
 81045cc:	d20a      	bcs.n	81045e4 <process_control_request+0x388>
    driver = &_app_driver[drvid];
 81045ce:	4b7b      	ldr	r3, [pc, #492]	; (81047bc <process_control_request+0x560>)
 81045d0:	6819      	ldr	r1, [r3, #0]
 81045d2:	f897 2025 	ldrb.w	r2, [r7, #37]	; 0x25
 81045d6:	4613      	mov	r3, r2
 81045d8:	005b      	lsls	r3, r3, #1
 81045da:	4413      	add	r3, r2
 81045dc:	00db      	lsls	r3, r3, #3
 81045de:	440b      	add	r3, r1
 81045e0:	623b      	str	r3, [r7, #32]
 81045e2:	e011      	b.n	8104608 <process_control_request+0x3ac>
  } else if ( drvid < TOTAL_DRIVER_COUNT && BUILTIN_DRIVER_COUNT > 0 ){
 81045e4:	4b74      	ldr	r3, [pc, #464]	; (81047b8 <process_control_request+0x55c>)
 81045e6:	781b      	ldrb	r3, [r3, #0]
 81045e8:	f897 2025 	ldrb.w	r2, [r7, #37]	; 0x25
 81045ec:	429a      	cmp	r2, r3
 81045ee:	d80b      	bhi.n	8104608 <process_control_request+0x3ac>
    driver = &_usbd_driver[drvid - _app_driver_count];
 81045f0:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 81045f4:	4a70      	ldr	r2, [pc, #448]	; (81047b8 <process_control_request+0x55c>)
 81045f6:	7812      	ldrb	r2, [r2, #0]
 81045f8:	1a9a      	subs	r2, r3, r2
 81045fa:	4613      	mov	r3, r2
 81045fc:	005b      	lsls	r3, r3, #1
 81045fe:	4413      	add	r3, r2
 8104600:	00db      	lsls	r3, r3, #3
 8104602:	4a6f      	ldr	r2, [pc, #444]	; (81047c0 <process_control_request+0x564>)
 8104604:	4413      	add	r3, r2
 8104606:	623b      	str	r3, [r7, #32]
  return driver;
 8104608:	6a3b      	ldr	r3, [r7, #32]
      usbd_class_driver_t const * driver = get_driver(_usbd_dev.itf2drv[itf]);
 810460a:	653b      	str	r3, [r7, #80]	; 0x50
      TU_VERIFY(driver);
 810460c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 810460e:	2b00      	cmp	r3, #0
 8104610:	d101      	bne.n	8104616 <process_control_request+0x3ba>
 8104612:	2300      	movs	r3, #0
 8104614:	e111      	b.n	810483a <process_control_request+0x5de>

      // all requests to Interface (STD or Class) is forwarded to class driver.
      // notable requests are: GET HID REPORT DESCRIPTOR, SET_INTERFACE, GET_INTERFACE
      if ( !invoke_class_control(rhport, driver, p_request) )
 8104616:	79fb      	ldrb	r3, [r7, #7]
 8104618:	683a      	ldr	r2, [r7, #0]
 810461a:	6d39      	ldr	r1, [r7, #80]	; 0x50
 810461c:	4618      	mov	r0, r3
 810461e:	f7ff fe05 	bl	810422c <invoke_class_control>
 8104622:	4603      	mov	r3, r0
 8104624:	f083 0301 	eor.w	r3, r3, #1
 8104628:	b2db      	uxtb	r3, r3
 810462a:	2b00      	cmp	r3, #0
 810462c:	f000 8103 	beq.w	8104836 <process_control_request+0x5da>
      {
        // For GET_INTERFACE and SET_INTERFACE, it is mandatory to respond even if the class
        // driver doesn't use alternate settings or implement this
        TU_VERIFY(TUSB_REQ_TYPE_STANDARD == p_request->bmRequestType_bit.type);
 8104630:	683b      	ldr	r3, [r7, #0]
 8104632:	781b      	ldrb	r3, [r3, #0]
 8104634:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8104638:	b2db      	uxtb	r3, r3
 810463a:	2b00      	cmp	r3, #0
 810463c:	d001      	beq.n	8104642 <process_control_request+0x3e6>
 810463e:	2300      	movs	r3, #0
 8104640:	e0fb      	b.n	810483a <process_control_request+0x5de>

        switch(p_request->bRequest)
 8104642:	683b      	ldr	r3, [r7, #0]
 8104644:	785b      	ldrb	r3, [r3, #1]
 8104646:	3b0a      	subs	r3, #10
 8104648:	2b01      	cmp	r3, #1
 810464a:	d816      	bhi.n	810467a <process_control_request+0x41e>
        {
          case TUSB_REQ_GET_INTERFACE:
          case TUSB_REQ_SET_INTERFACE:
            // Clear complete callback if driver set since it can also stall the request.
            usbd_control_set_complete_callback(NULL);
 810464c:	2000      	movs	r0, #0
 810464e:	f000 ffff 	bl	8105650 <usbd_control_set_complete_callback>

            if (TUSB_REQ_GET_INTERFACE == p_request->bRequest)
 8104652:	683b      	ldr	r3, [r7, #0]
 8104654:	785b      	ldrb	r3, [r3, #1]
 8104656:	2b0a      	cmp	r3, #10
 8104658:	d109      	bne.n	810466e <process_control_request+0x412>
            {
              uint8_t alternate = 0;
 810465a:	2300      	movs	r3, #0
 810465c:	73fb      	strb	r3, [r7, #15]
              tud_control_xfer(rhport, p_request, &alternate, 1);
 810465e:	f107 020f 	add.w	r2, r7, #15
 8104662:	79f8      	ldrb	r0, [r7, #7]
 8104664:	2301      	movs	r3, #1
 8104666:	6839      	ldr	r1, [r7, #0]
 8104668:	f000 ff76 	bl	8105558 <tud_control_xfer>
            }else
            {
              tud_control_status(rhport, p_request);
            }
          break;
 810466c:	e007      	b.n	810467e <process_control_request+0x422>
              tud_control_status(rhport, p_request);
 810466e:	79fb      	ldrb	r3, [r7, #7]
 8104670:	6839      	ldr	r1, [r7, #0]
 8104672:	4618      	mov	r0, r3
 8104674:	f000 fefe 	bl	8105474 <tud_control_status>
          break;
 8104678:	e001      	b.n	810467e <process_control_request+0x422>

          default: return false;
 810467a:	2300      	movs	r3, #0
 810467c:	e0dd      	b.n	810483a <process_control_request+0x5de>
        }
      }
    }
    break;
 810467e:	e0da      	b.n	8104836 <process_control_request+0x5da>

    //------------- Endpoint Request -------------//
    case TUSB_REQ_RCPT_ENDPOINT:
    {
      uint8_t const ep_addr = tu_u16_low(p_request->wIndex);
 8104680:	683b      	ldr	r3, [r7, #0]
 8104682:	889b      	ldrh	r3, [r3, #4]
 8104684:	b29b      	uxth	r3, r3
 8104686:	83bb      	strh	r3, [r7, #28]
 8104688:	8bbb      	ldrh	r3, [r7, #28]
 810468a:	b2db      	uxtb	r3, r3
 810468c:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 8104690:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8104694:	77bb      	strb	r3, [r7, #30]
  return (uint8_t)(addr & (~TUSB_DIR_IN_MASK));
 8104696:	7fbb      	ldrb	r3, [r7, #30]
 8104698:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 810469c:	b2db      	uxtb	r3, r3
      uint8_t const ep_num  = tu_edpt_number(ep_addr);
 810469e:	f887 3066 	strb.w	r3, [r7, #102]	; 0x66
 81046a2:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 81046a6:	77fb      	strb	r3, [r7, #31]
  return (addr & TUSB_DIR_IN_MASK) ? TUSB_DIR_IN : TUSB_DIR_OUT;
 81046a8:	7ffb      	ldrb	r3, [r7, #31]
 81046aa:	09db      	lsrs	r3, r3, #7
 81046ac:	b2db      	uxtb	r3, r3
      uint8_t const ep_dir  = tu_edpt_dir(ep_addr);
 81046ae:	f887 3065 	strb.w	r3, [r7, #101]	; 0x65

      TU_ASSERT(ep_num < TU_ARRAY_SIZE(_usbd_dev.ep2drv) );
 81046b2:	f897 3066 	ldrb.w	r3, [r7, #102]	; 0x66
 81046b6:	2b08      	cmp	r3, #8
 81046b8:	d90a      	bls.n	81046d0 <process_control_request+0x474>
 81046ba:	4b3e      	ldr	r3, [pc, #248]	; (81047b4 <process_control_request+0x558>)
 81046bc:	65bb      	str	r3, [r7, #88]	; 0x58
 81046be:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 81046c0:	681b      	ldr	r3, [r3, #0]
 81046c2:	f003 0301 	and.w	r3, r3, #1
 81046c6:	2b00      	cmp	r3, #0
 81046c8:	d000      	beq.n	81046cc <process_control_request+0x470>
 81046ca:	be00      	bkpt	0x0000
 81046cc:	2300      	movs	r3, #0
 81046ce:	e0b4      	b.n	810483a <process_control_request+0x5de>

      usbd_class_driver_t const * driver = get_driver(_usbd_dev.ep2drv[ep_num][ep_dir]);
 81046d0:	f897 2066 	ldrb.w	r2, [r7, #102]	; 0x66
 81046d4:	f897 3065 	ldrb.w	r3, [r7, #101]	; 0x65
 81046d8:	4935      	ldr	r1, [pc, #212]	; (81047b0 <process_control_request+0x554>)
 81046da:	0052      	lsls	r2, r2, #1
 81046dc:	440a      	add	r2, r1
 81046de:	4413      	add	r3, r2
 81046e0:	3313      	adds	r3, #19
 81046e2:	781b      	ldrb	r3, [r3, #0]
 81046e4:	76fb      	strb	r3, [r7, #27]
  usbd_class_driver_t const * driver = NULL;
 81046e6:	2300      	movs	r3, #0
 81046e8:	617b      	str	r3, [r7, #20]
  if ( drvid < _app_driver_count ) {
 81046ea:	4b33      	ldr	r3, [pc, #204]	; (81047b8 <process_control_request+0x55c>)
 81046ec:	781b      	ldrb	r3, [r3, #0]
 81046ee:	7efa      	ldrb	r2, [r7, #27]
 81046f0:	429a      	cmp	r2, r3
 81046f2:	d209      	bcs.n	8104708 <process_control_request+0x4ac>
    driver = &_app_driver[drvid];
 81046f4:	4b31      	ldr	r3, [pc, #196]	; (81047bc <process_control_request+0x560>)
 81046f6:	6819      	ldr	r1, [r3, #0]
 81046f8:	7efa      	ldrb	r2, [r7, #27]
 81046fa:	4613      	mov	r3, r2
 81046fc:	005b      	lsls	r3, r3, #1
 81046fe:	4413      	add	r3, r2
 8104700:	00db      	lsls	r3, r3, #3
 8104702:	440b      	add	r3, r1
 8104704:	617b      	str	r3, [r7, #20]
 8104706:	e00f      	b.n	8104728 <process_control_request+0x4cc>
  } else if ( drvid < TOTAL_DRIVER_COUNT && BUILTIN_DRIVER_COUNT > 0 ){
 8104708:	4b2b      	ldr	r3, [pc, #172]	; (81047b8 <process_control_request+0x55c>)
 810470a:	781b      	ldrb	r3, [r3, #0]
 810470c:	7efa      	ldrb	r2, [r7, #27]
 810470e:	429a      	cmp	r2, r3
 8104710:	d80a      	bhi.n	8104728 <process_control_request+0x4cc>
    driver = &_usbd_driver[drvid - _app_driver_count];
 8104712:	7efb      	ldrb	r3, [r7, #27]
 8104714:	4a28      	ldr	r2, [pc, #160]	; (81047b8 <process_control_request+0x55c>)
 8104716:	7812      	ldrb	r2, [r2, #0]
 8104718:	1a9a      	subs	r2, r3, r2
 810471a:	4613      	mov	r3, r2
 810471c:	005b      	lsls	r3, r3, #1
 810471e:	4413      	add	r3, r2
 8104720:	00db      	lsls	r3, r3, #3
 8104722:	4a27      	ldr	r2, [pc, #156]	; (81047c0 <process_control_request+0x564>)
 8104724:	4413      	add	r3, r2
 8104726:	617b      	str	r3, [r7, #20]
  return driver;
 8104728:	697b      	ldr	r3, [r7, #20]
      usbd_class_driver_t const * driver = get_driver(_usbd_dev.ep2drv[ep_num][ep_dir]);
 810472a:	663b      	str	r3, [r7, #96]	; 0x60

      if ( TUSB_REQ_TYPE_STANDARD != p_request->bmRequestType_bit.type )
 810472c:	683b      	ldr	r3, [r7, #0]
 810472e:	781b      	ldrb	r3, [r3, #0]
 8104730:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8104734:	b2db      	uxtb	r3, r3
 8104736:	2b00      	cmp	r3, #0
 8104738:	d00c      	beq.n	8104754 <process_control_request+0x4f8>
      {
        // Forward class request to its driver
        TU_VERIFY(driver);
 810473a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 810473c:	2b00      	cmp	r3, #0
 810473e:	d101      	bne.n	8104744 <process_control_request+0x4e8>
 8104740:	2300      	movs	r3, #0
 8104742:	e07a      	b.n	810483a <process_control_request+0x5de>
        return invoke_class_control(rhport, driver, p_request);
 8104744:	79fb      	ldrb	r3, [r7, #7]
 8104746:	683a      	ldr	r2, [r7, #0]
 8104748:	6e39      	ldr	r1, [r7, #96]	; 0x60
 810474a:	4618      	mov	r0, r3
 810474c:	f7ff fd6e 	bl	810422c <invoke_class_control>
 8104750:	4603      	mov	r3, r0
 8104752:	e072      	b.n	810483a <process_control_request+0x5de>
      }
      else
      {
        // Handle STD request to endpoint
        switch ( p_request->bRequest )
 8104754:	683b      	ldr	r3, [r7, #0]
 8104756:	785b      	ldrb	r3, [r3, #1]
 8104758:	2b03      	cmp	r3, #3
 810475a:	d018      	beq.n	810478e <process_control_request+0x532>
 810475c:	2b03      	cmp	r3, #3
 810475e:	dc52      	bgt.n	8104806 <process_control_request+0x5aa>
 8104760:	2b00      	cmp	r3, #0
 8104762:	d002      	beq.n	810476a <process_control_request+0x50e>
 8104764:	2b01      	cmp	r3, #1
 8104766:	d012      	beq.n	810478e <process_control_request+0x532>
 8104768:	e04d      	b.n	8104806 <process_control_request+0x5aa>
        {
          case TUSB_REQ_GET_STATUS:
          {
            uint16_t status = usbd_edpt_stalled(rhport, ep_addr) ? 0x0001 : 0x0000;
 810476a:	f897 2067 	ldrb.w	r2, [r7, #103]	; 0x67
 810476e:	79fb      	ldrb	r3, [r7, #7]
 8104770:	4611      	mov	r1, r2
 8104772:	4618      	mov	r0, r3
 8104774:	f000 fe28 	bl	81053c8 <usbd_edpt_stalled>
 8104778:	4603      	mov	r3, r0
 810477a:	b29b      	uxth	r3, r3
 810477c:	81bb      	strh	r3, [r7, #12]
            tud_control_xfer(rhport, p_request, &status, 2);
 810477e:	f107 020c 	add.w	r2, r7, #12
 8104782:	79f8      	ldrb	r0, [r7, #7]
 8104784:	2302      	movs	r3, #2
 8104786:	6839      	ldr	r1, [r7, #0]
 8104788:	f000 fee6 	bl	8105558 <tud_control_xfer>
          }
          break;
 810478c:	e047      	b.n	810481e <process_control_request+0x5c2>

          case TUSB_REQ_CLEAR_FEATURE:
          case TUSB_REQ_SET_FEATURE:
          {
            if ( TUSB_REQ_FEATURE_EDPT_HALT == p_request->wValue )
 810478e:	683b      	ldr	r3, [r7, #0]
 8104790:	885b      	ldrh	r3, [r3, #2]
 8104792:	b29b      	uxth	r3, r3
 8104794:	2b00      	cmp	r3, #0
 8104796:	d11c      	bne.n	81047d2 <process_control_request+0x576>
            {
              if ( TUSB_REQ_CLEAR_FEATURE ==  p_request->bRequest )
 8104798:	683b      	ldr	r3, [r7, #0]
 810479a:	785b      	ldrb	r3, [r3, #1]
 810479c:	2b01      	cmp	r3, #1
 810479e:	d111      	bne.n	81047c4 <process_control_request+0x568>
              {
                usbd_edpt_clear_stall(rhport, ep_addr);
 81047a0:	f897 2067 	ldrb.w	r2, [r7, #103]	; 0x67
 81047a4:	79fb      	ldrb	r3, [r7, #7]
 81047a6:	4611      	mov	r1, r2
 81047a8:	4618      	mov	r0, r3
 81047aa:	f000 fdc1 	bl	8105330 <usbd_edpt_clear_stall>
 81047ae:	e010      	b.n	81047d2 <process_control_request+0x576>
 81047b0:	10000fa4 	.word	0x10000fa4
 81047b4:	e000edf0 	.word	0xe000edf0
 81047b8:	10000fe0 	.word	0x10000fe0
 81047bc:	10000fdc 	.word	0x10000fdc
 81047c0:	08111ec4 	.word	0x08111ec4
              }else
              {
                usbd_edpt_stall(rhport, ep_addr);
 81047c4:	f897 2067 	ldrb.w	r2, [r7, #103]	; 0x67
 81047c8:	79fb      	ldrb	r3, [r7, #7]
 81047ca:	4611      	mov	r1, r2
 81047cc:	4618      	mov	r0, r3
 81047ce:	f000 fd63 	bl	8105298 <usbd_edpt_stall>
              }
            }

            if (driver)
 81047d2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 81047d4:	2b00      	cmp	r3, #0
 81047d6:	d021      	beq.n	810481c <process_control_request+0x5c0>
              // Some classes such as USBTMC needs to clear/re-init its buffer when receiving CLEAR_FEATURE request
              // We will also forward std request targeted endpoint to class drivers as well

              // STD request must always be ACKed regardless of driver returned value
              // Also clear complete callback if driver set since it can also stall the request.
              (void) invoke_class_control(rhport, driver, p_request);
 81047d8:	79fb      	ldrb	r3, [r7, #7]
 81047da:	683a      	ldr	r2, [r7, #0]
 81047dc:	6e39      	ldr	r1, [r7, #96]	; 0x60
 81047de:	4618      	mov	r0, r3
 81047e0:	f7ff fd24 	bl	810422c <invoke_class_control>
              usbd_control_set_complete_callback(NULL);
 81047e4:	2000      	movs	r0, #0
 81047e6:	f000 ff33 	bl	8105650 <usbd_control_set_complete_callback>

              // skip ZLP status if driver already did that
              if ( !_usbd_dev.ep_status[0][TUSB_DIR_IN].busy ) tud_control_status(rhport, p_request);
 81047ea:	4b16      	ldr	r3, [pc, #88]	; (8104844 <process_control_request+0x5e8>)
 81047ec:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 81047f0:	f3c3 0300 	ubfx	r3, r3, #0, #1
 81047f4:	b2db      	uxtb	r3, r3
 81047f6:	2b00      	cmp	r3, #0
 81047f8:	d110      	bne.n	810481c <process_control_request+0x5c0>
 81047fa:	79fb      	ldrb	r3, [r7, #7]
 81047fc:	6839      	ldr	r1, [r7, #0]
 81047fe:	4618      	mov	r0, r3
 8104800:	f000 fe38 	bl	8105474 <tud_control_status>
            }
          }
          break;
 8104804:	e00a      	b.n	810481c <process_control_request+0x5c0>

          // Unknown/Unsupported request
          default: TU_BREAKPOINT(); return false;
 8104806:	4b10      	ldr	r3, [pc, #64]	; (8104848 <process_control_request+0x5ec>)
 8104808:	65fb      	str	r3, [r7, #92]	; 0x5c
 810480a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 810480c:	681b      	ldr	r3, [r3, #0]
 810480e:	f003 0301 	and.w	r3, r3, #1
 8104812:	2b00      	cmp	r3, #0
 8104814:	d000      	beq.n	8104818 <process_control_request+0x5bc>
 8104816:	be00      	bkpt	0x0000
 8104818:	2300      	movs	r3, #0
 810481a:	e00e      	b.n	810483a <process_control_request+0x5de>
          break;
 810481c:	bf00      	nop
        }
      }
    }
    break;
 810481e:	e00b      	b.n	8104838 <process_control_request+0x5dc>

    // Unknown recipient
    default: TU_BREAKPOINT(); return false;
 8104820:	4b09      	ldr	r3, [pc, #36]	; (8104848 <process_control_request+0x5ec>)
 8104822:	637b      	str	r3, [r7, #52]	; 0x34
 8104824:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8104826:	681b      	ldr	r3, [r3, #0]
 8104828:	f003 0301 	and.w	r3, r3, #1
 810482c:	2b00      	cmp	r3, #0
 810482e:	d000      	beq.n	8104832 <process_control_request+0x5d6>
 8104830:	be00      	bkpt	0x0000
 8104832:	2300      	movs	r3, #0
 8104834:	e001      	b.n	810483a <process_control_request+0x5de>
    break;
 8104836:	bf00      	nop
  }

  return true;
 8104838:	2301      	movs	r3, #1
}
 810483a:	4618      	mov	r0, r3
 810483c:	3768      	adds	r7, #104	; 0x68
 810483e:	46bd      	mov	sp, r7
 8104840:	bd80      	pop	{r7, pc}
 8104842:	bf00      	nop
 8104844:	10000fa4 	.word	0x10000fa4
 8104848:	e000edf0 	.word	0xe000edf0

0810484c <process_set_config>:

// Process Set Configure Request
// This function parse configuration descriptor & open drivers accordingly
static bool process_set_config(uint8_t rhport, uint8_t cfg_num)
{
 810484c:	b580      	push	{r7, lr}
 810484e:	b096      	sub	sp, #88	; 0x58
 8104850:	af00      	add	r7, sp, #0
 8104852:	4603      	mov	r3, r0
 8104854:	460a      	mov	r2, r1
 8104856:	71fb      	strb	r3, [r7, #7]
 8104858:	4613      	mov	r3, r2
 810485a:	71bb      	strb	r3, [r7, #6]
  // index is cfg_num-1
  tusb_desc_configuration_t const * desc_cfg = (tusb_desc_configuration_t const *) tud_descriptor_configuration_cb(cfg_num-1);
 810485c:	79bb      	ldrb	r3, [r7, #6]
 810485e:	3b01      	subs	r3, #1
 8104860:	b2db      	uxtb	r3, r3
 8104862:	4618      	mov	r0, r3
 8104864:	f7fd ff08 	bl	8102678 <tud_descriptor_configuration_cb>
 8104868:	64f8      	str	r0, [r7, #76]	; 0x4c
  TU_ASSERT(desc_cfg != NULL && desc_cfg->bDescriptorType == TUSB_DESC_CONFIGURATION);
 810486a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 810486c:	2b00      	cmp	r3, #0
 810486e:	d003      	beq.n	8104878 <process_set_config+0x2c>
 8104870:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8104872:	785b      	ldrb	r3, [r3, #1]
 8104874:	2b02      	cmp	r3, #2
 8104876:	d00a      	beq.n	810488e <process_set_config+0x42>
 8104878:	4b89      	ldr	r3, [pc, #548]	; (8104aa0 <process_set_config+0x254>)
 810487a:	623b      	str	r3, [r7, #32]
 810487c:	6a3b      	ldr	r3, [r7, #32]
 810487e:	681b      	ldr	r3, [r3, #0]
 8104880:	f003 0301 	and.w	r3, r3, #1
 8104884:	2b00      	cmp	r3, #0
 8104886:	d000      	beq.n	810488a <process_set_config+0x3e>
 8104888:	be00      	bkpt	0x0000
 810488a:	2300      	movs	r3, #0
 810488c:	e103      	b.n	8104a96 <process_set_config+0x24a>

  // Parse configuration descriptor
  _usbd_dev.remote_wakeup_support = (desc_cfg->bmAttributes & TUSB_DESC_CONFIG_ATT_REMOTE_WAKEUP) ? 1u : 0u;
 810488e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8104890:	79db      	ldrb	r3, [r3, #7]
 8104892:	115b      	asrs	r3, r3, #5
 8104894:	f003 0301 	and.w	r3, r3, #1
 8104898:	b2d9      	uxtb	r1, r3
 810489a:	4a82      	ldr	r2, [pc, #520]	; (8104aa4 <process_set_config+0x258>)
 810489c:	7813      	ldrb	r3, [r2, #0]
 810489e:	f361 1304 	bfi	r3, r1, #4, #1
 81048a2:	7013      	strb	r3, [r2, #0]
  _usbd_dev.self_powered          = (desc_cfg->bmAttributes & TUSB_DESC_CONFIG_ATT_SELF_POWERED ) ? 1u : 0u;
 81048a4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 81048a6:	79db      	ldrb	r3, [r3, #7]
 81048a8:	119b      	asrs	r3, r3, #6
 81048aa:	f003 0301 	and.w	r3, r3, #1
 81048ae:	b2d9      	uxtb	r1, r3
 81048b0:	4a7c      	ldr	r2, [pc, #496]	; (8104aa4 <process_set_config+0x258>)
 81048b2:	7813      	ldrb	r3, [r2, #0]
 81048b4:	f361 1345 	bfi	r3, r1, #5, #1
 81048b8:	7013      	strb	r3, [r2, #0]

  // Parse interface descriptor
  uint8_t const * p_desc   = ((uint8_t const*) desc_cfg) + sizeof(tusb_desc_configuration_t);
 81048ba:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 81048bc:	3309      	adds	r3, #9
 81048be:	657b      	str	r3, [r7, #84]	; 0x54
  uint8_t const * desc_end = ((uint8_t const*) desc_cfg) + tu_le16toh(desc_cfg->wTotalLength);
 81048c0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 81048c2:	885b      	ldrh	r3, [r3, #2]
 81048c4:	b29b      	uxth	r3, r3
 81048c6:	461a      	mov	r2, r3
 81048c8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 81048ca:	4413      	add	r3, r2
 81048cc:	64bb      	str	r3, [r7, #72]	; 0x48

  while( p_desc < desc_end )
 81048ce:	e0dc      	b.n	8104a8a <process_set_config+0x23e>
  {
    uint8_t assoc_itf_count = 1;
 81048d0:	2301      	movs	r3, #1
 81048d2:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
 81048d6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 81048d8:	61fb      	str	r3, [r7, #28]
  return ((uint8_t const*) desc)[DESC_OFFSET_TYPE];
 81048da:	69fb      	ldr	r3, [r7, #28]
 81048dc:	3301      	adds	r3, #1
 81048de:	781b      	ldrb	r3, [r3, #0]

    // Class will always starts with Interface Association (if any) and then Interface descriptor
    if ( TUSB_DESC_INTERFACE_ASSOCIATION == tu_desc_type(p_desc) )
 81048e0:	2b0b      	cmp	r3, #11
 81048e2:	d10f      	bne.n	8104904 <process_set_config+0xb8>
    {
      tusb_desc_interface_assoc_t const * desc_iad = (tusb_desc_interface_assoc_t const *) p_desc;
 81048e4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 81048e6:	647b      	str	r3, [r7, #68]	; 0x44
      assoc_itf_count = desc_iad->bInterfaceCount;
 81048e8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 81048ea:	78db      	ldrb	r3, [r3, #3]
 81048ec:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
 81048f0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 81048f2:	61bb      	str	r3, [r7, #24]
  uint8_t const* desc8 = (uint8_t const*) desc;
 81048f4:	69bb      	ldr	r3, [r7, #24]
 81048f6:	617b      	str	r3, [r7, #20]
  return desc8 + desc8[DESC_OFFSET_LEN];
 81048f8:	697b      	ldr	r3, [r7, #20]
 81048fa:	781b      	ldrb	r3, [r3, #0]
 81048fc:	461a      	mov	r2, r3
 81048fe:	697b      	ldr	r3, [r7, #20]
 8104900:	4413      	add	r3, r2

      p_desc = tu_desc_next(p_desc); // next to Interface
 8104902:	657b      	str	r3, [r7, #84]	; 0x54
 8104904:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8104906:	613b      	str	r3, [r7, #16]
  return ((uint8_t const*) desc)[DESC_OFFSET_TYPE];
 8104908:	693b      	ldr	r3, [r7, #16]
 810490a:	3301      	adds	r3, #1
 810490c:	781b      	ldrb	r3, [r3, #0]
      // IAD's first interface number and class should match with opened interface
      //TU_ASSERT(desc_iad->bFirstInterface == desc_itf->bInterfaceNumber &&
      //          desc_iad->bFunctionClass  == desc_itf->bInterfaceClass);
    }

    TU_ASSERT( TUSB_DESC_INTERFACE == tu_desc_type(p_desc) );
 810490e:	2b04      	cmp	r3, #4
 8104910:	d00a      	beq.n	8104928 <process_set_config+0xdc>
 8104912:	4b63      	ldr	r3, [pc, #396]	; (8104aa0 <process_set_config+0x254>)
 8104914:	627b      	str	r3, [r7, #36]	; 0x24
 8104916:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8104918:	681b      	ldr	r3, [r3, #0]
 810491a:	f003 0301 	and.w	r3, r3, #1
 810491e:	2b00      	cmp	r3, #0
 8104920:	d000      	beq.n	8104924 <process_set_config+0xd8>
 8104922:	be00      	bkpt	0x0000
 8104924:	2300      	movs	r3, #0
 8104926:	e0b6      	b.n	8104a96 <process_set_config+0x24a>
    tusb_desc_interface_t const * desc_itf = (tusb_desc_interface_t const*) p_desc;
 8104928:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 810492a:	643b      	str	r3, [r7, #64]	; 0x40

    // Find driver for this interface
    uint16_t const remaining_len = (uint16_t) (desc_end-p_desc);
 810492c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 810492e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8104930:	1ad3      	subs	r3, r2, r3
 8104932:	87fb      	strh	r3, [r7, #62]	; 0x3e
    uint8_t drv_id;
    for (drv_id = 0; drv_id < TOTAL_DRIVER_COUNT; drv_id++)
 8104934:	2300      	movs	r3, #0
 8104936:	f887 3052 	strb.w	r3, [r7, #82]	; 0x52
 810493a:	e08e      	b.n	8104a5a <process_set_config+0x20e>
 810493c:	f897 3052 	ldrb.w	r3, [r7, #82]	; 0x52
 8104940:	73fb      	strb	r3, [r7, #15]
  usbd_class_driver_t const * driver = NULL;
 8104942:	2300      	movs	r3, #0
 8104944:	60bb      	str	r3, [r7, #8]
  if ( drvid < _app_driver_count ) {
 8104946:	4b58      	ldr	r3, [pc, #352]	; (8104aa8 <process_set_config+0x25c>)
 8104948:	781b      	ldrb	r3, [r3, #0]
 810494a:	7bfa      	ldrb	r2, [r7, #15]
 810494c:	429a      	cmp	r2, r3
 810494e:	d209      	bcs.n	8104964 <process_set_config+0x118>
    driver = &_app_driver[drvid];
 8104950:	4b56      	ldr	r3, [pc, #344]	; (8104aac <process_set_config+0x260>)
 8104952:	6819      	ldr	r1, [r3, #0]
 8104954:	7bfa      	ldrb	r2, [r7, #15]
 8104956:	4613      	mov	r3, r2
 8104958:	005b      	lsls	r3, r3, #1
 810495a:	4413      	add	r3, r2
 810495c:	00db      	lsls	r3, r3, #3
 810495e:	440b      	add	r3, r1
 8104960:	60bb      	str	r3, [r7, #8]
 8104962:	e00f      	b.n	8104984 <process_set_config+0x138>
  } else if ( drvid < TOTAL_DRIVER_COUNT && BUILTIN_DRIVER_COUNT > 0 ){
 8104964:	4b50      	ldr	r3, [pc, #320]	; (8104aa8 <process_set_config+0x25c>)
 8104966:	781b      	ldrb	r3, [r3, #0]
 8104968:	7bfa      	ldrb	r2, [r7, #15]
 810496a:	429a      	cmp	r2, r3
 810496c:	d80a      	bhi.n	8104984 <process_set_config+0x138>
    driver = &_usbd_driver[drvid - _app_driver_count];
 810496e:	7bfb      	ldrb	r3, [r7, #15]
 8104970:	4a4d      	ldr	r2, [pc, #308]	; (8104aa8 <process_set_config+0x25c>)
 8104972:	7812      	ldrb	r2, [r2, #0]
 8104974:	1a9a      	subs	r2, r3, r2
 8104976:	4613      	mov	r3, r2
 8104978:	005b      	lsls	r3, r3, #1
 810497a:	4413      	add	r3, r2
 810497c:	00db      	lsls	r3, r3, #3
 810497e:	4a4c      	ldr	r2, [pc, #304]	; (8104ab0 <process_set_config+0x264>)
 8104980:	4413      	add	r3, r2
 8104982:	60bb      	str	r3, [r7, #8]
  return driver;
 8104984:	68bb      	ldr	r3, [r7, #8]
    {
      usbd_class_driver_t const *driver = get_driver(drv_id);
 8104986:	63bb      	str	r3, [r7, #56]	; 0x38
      TU_ASSERT(driver);
 8104988:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 810498a:	2b00      	cmp	r3, #0
 810498c:	d10a      	bne.n	81049a4 <process_set_config+0x158>
 810498e:	4b44      	ldr	r3, [pc, #272]	; (8104aa0 <process_set_config+0x254>)
 8104990:	62fb      	str	r3, [r7, #44]	; 0x2c
 8104992:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8104994:	681b      	ldr	r3, [r3, #0]
 8104996:	f003 0301 	and.w	r3, r3, #1
 810499a:	2b00      	cmp	r3, #0
 810499c:	d000      	beq.n	81049a0 <process_set_config+0x154>
 810499e:	be00      	bkpt	0x0000
 81049a0:	2300      	movs	r3, #0
 81049a2:	e078      	b.n	8104a96 <process_set_config+0x24a>
      uint16_t const drv_len = driver->open(rhport, desc_itf, remaining_len);
 81049a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 81049a6:	689b      	ldr	r3, [r3, #8]
 81049a8:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 81049aa:	79f8      	ldrb	r0, [r7, #7]
 81049ac:	6c39      	ldr	r1, [r7, #64]	; 0x40
 81049ae:	4798      	blx	r3
 81049b0:	4603      	mov	r3, r0
 81049b2:	86fb      	strh	r3, [r7, #54]	; 0x36

      if ( (sizeof(tusb_desc_interface_t) <= drv_len)  && (drv_len <= remaining_len) )
 81049b4:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 81049b6:	2b08      	cmp	r3, #8
 81049b8:	d94a      	bls.n	8104a50 <process_set_config+0x204>
 81049ba:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 81049bc:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 81049be:	429a      	cmp	r2, r3
 81049c0:	d846      	bhi.n	8104a50 <process_set_config+0x204>
        // Open successfully
        TU_LOG_USBD("  %s opened\r\n", driver->name);

        // Some drivers use 2 or more interfaces but may not have IAD e.g MIDI (always) or
        // BTH (even CDC) with class in device descriptor (single interface)
        if ( assoc_itf_count == 1)
 81049c2:	f897 3053 	ldrb.w	r3, [r7, #83]	; 0x53
 81049c6:	2b01      	cmp	r3, #1
 81049c8:	d107      	bne.n	81049da <process_set_config+0x18e>
        {
          #if CFG_TUD_CDC
          if ( driver->open == cdcd_open ) assoc_itf_count = 2;
 81049ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 81049cc:	689b      	ldr	r3, [r3, #8]
 81049ce:	4a39      	ldr	r2, [pc, #228]	; (8104ab4 <process_set_config+0x268>)
 81049d0:	4293      	cmp	r3, r2
 81049d2:	d102      	bne.n	81049da <process_set_config+0x18e>
 81049d4:	2302      	movs	r3, #2
 81049d6:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
          if ( driver->open == btd_open ) assoc_itf_count = 2;
          #endif
        }

        // bind (associated) interfaces to found driver
        for(uint8_t i=0; i<assoc_itf_count; i++)
 81049da:	2300      	movs	r3, #0
 81049dc:	f887 3051 	strb.w	r3, [r7, #81]	; 0x51
 81049e0:	e024      	b.n	8104a2c <process_set_config+0x1e0>
        {
          uint8_t const itf_num = desc_itf->bInterfaceNumber+i;
 81049e2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 81049e4:	789a      	ldrb	r2, [r3, #2]
 81049e6:	f897 3051 	ldrb.w	r3, [r7, #81]	; 0x51
 81049ea:	4413      	add	r3, r2
 81049ec:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35

          // Interface number must not be used already
          TU_ASSERT(DRVID_INVALID == _usbd_dev.itf2drv[itf_num]);
 81049f0:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 81049f4:	4a2b      	ldr	r2, [pc, #172]	; (8104aa4 <process_set_config+0x258>)
 81049f6:	4413      	add	r3, r2
 81049f8:	78db      	ldrb	r3, [r3, #3]
 81049fa:	2bff      	cmp	r3, #255	; 0xff
 81049fc:	d00a      	beq.n	8104a14 <process_set_config+0x1c8>
 81049fe:	4b28      	ldr	r3, [pc, #160]	; (8104aa0 <process_set_config+0x254>)
 8104a00:	633b      	str	r3, [r7, #48]	; 0x30
 8104a02:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8104a04:	681b      	ldr	r3, [r3, #0]
 8104a06:	f003 0301 	and.w	r3, r3, #1
 8104a0a:	2b00      	cmp	r3, #0
 8104a0c:	d000      	beq.n	8104a10 <process_set_config+0x1c4>
 8104a0e:	be00      	bkpt	0x0000
 8104a10:	2300      	movs	r3, #0
 8104a12:	e040      	b.n	8104a96 <process_set_config+0x24a>
          _usbd_dev.itf2drv[itf_num] = drv_id;
 8104a14:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 8104a18:	4a22      	ldr	r2, [pc, #136]	; (8104aa4 <process_set_config+0x258>)
 8104a1a:	4413      	add	r3, r2
 8104a1c:	f897 2052 	ldrb.w	r2, [r7, #82]	; 0x52
 8104a20:	70da      	strb	r2, [r3, #3]
        for(uint8_t i=0; i<assoc_itf_count; i++)
 8104a22:	f897 3051 	ldrb.w	r3, [r7, #81]	; 0x51
 8104a26:	3301      	adds	r3, #1
 8104a28:	f887 3051 	strb.w	r3, [r7, #81]	; 0x51
 8104a2c:	f897 2051 	ldrb.w	r2, [r7, #81]	; 0x51
 8104a30:	f897 3053 	ldrb.w	r3, [r7, #83]	; 0x53
 8104a34:	429a      	cmp	r2, r3
 8104a36:	d3d4      	bcc.n	81049e2 <process_set_config+0x196>
        }

        // bind all endpoints to found driver
        tu_edpt_bind_driver(_usbd_dev.ep2drv, desc_itf, drv_len, drv_id);
 8104a38:	f897 3052 	ldrb.w	r3, [r7, #82]	; 0x52
 8104a3c:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8104a3e:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8104a40:	481d      	ldr	r0, [pc, #116]	; (8104ab8 <process_set_config+0x26c>)
 8104a42:	f002 fcfd 	bl	8107440 <tu_edpt_bind_driver>

        // next Interface
        p_desc += drv_len;
 8104a46:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8104a48:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8104a4a:	4413      	add	r3, r2
 8104a4c:	657b      	str	r3, [r7, #84]	; 0x54

        break; // exit driver find loop
 8104a4e:	e00b      	b.n	8104a68 <process_set_config+0x21c>
    for (drv_id = 0; drv_id < TOTAL_DRIVER_COUNT; drv_id++)
 8104a50:	f897 3052 	ldrb.w	r3, [r7, #82]	; 0x52
 8104a54:	3301      	adds	r3, #1
 8104a56:	f887 3052 	strb.w	r3, [r7, #82]	; 0x52
 8104a5a:	4b13      	ldr	r3, [pc, #76]	; (8104aa8 <process_set_config+0x25c>)
 8104a5c:	781b      	ldrb	r3, [r3, #0]
 8104a5e:	f897 2052 	ldrb.w	r2, [r7, #82]	; 0x52
 8104a62:	429a      	cmp	r2, r3
 8104a64:	f67f af6a 	bls.w	810493c <process_set_config+0xf0>
      }
    }

    // Failed if there is no supported drivers
    TU_ASSERT(drv_id < TOTAL_DRIVER_COUNT);
 8104a68:	4b0f      	ldr	r3, [pc, #60]	; (8104aa8 <process_set_config+0x25c>)
 8104a6a:	781b      	ldrb	r3, [r3, #0]
 8104a6c:	f897 2052 	ldrb.w	r2, [r7, #82]	; 0x52
 8104a70:	429a      	cmp	r2, r3
 8104a72:	d90a      	bls.n	8104a8a <process_set_config+0x23e>
 8104a74:	4b0a      	ldr	r3, [pc, #40]	; (8104aa0 <process_set_config+0x254>)
 8104a76:	62bb      	str	r3, [r7, #40]	; 0x28
 8104a78:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8104a7a:	681b      	ldr	r3, [r3, #0]
 8104a7c:	f003 0301 	and.w	r3, r3, #1
 8104a80:	2b00      	cmp	r3, #0
 8104a82:	d000      	beq.n	8104a86 <process_set_config+0x23a>
 8104a84:	be00      	bkpt	0x0000
 8104a86:	2300      	movs	r3, #0
 8104a88:	e005      	b.n	8104a96 <process_set_config+0x24a>
  while( p_desc < desc_end )
 8104a8a:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8104a8c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8104a8e:	429a      	cmp	r2, r3
 8104a90:	f4ff af1e 	bcc.w	81048d0 <process_set_config+0x84>
  }

  return true;
 8104a94:	2301      	movs	r3, #1
}
 8104a96:	4618      	mov	r0, r3
 8104a98:	3758      	adds	r7, #88	; 0x58
 8104a9a:	46bd      	mov	sp, r7
 8104a9c:	bd80      	pop	{r7, pc}
 8104a9e:	bf00      	nop
 8104aa0:	e000edf0 	.word	0xe000edf0
 8104aa4:	10000fa4 	.word	0x10000fa4
 8104aa8:	10000fe0 	.word	0x10000fe0
 8104aac:	10000fdc 	.word	0x10000fdc
 8104ab0:	08111ec4 	.word	0x08111ec4
 8104ab4:	08102b01 	.word	0x08102b01
 8104ab8:	10000fb7 	.word	0x10000fb7

08104abc <process_get_descriptor>:

// return descriptor's buffer and update desc_len
static bool process_get_descriptor(uint8_t rhport, tusb_control_request_t const * p_request)
{
 8104abc:	b580      	push	{r7, lr}
 8104abe:	b094      	sub	sp, #80	; 0x50
 8104ac0:	af00      	add	r7, sp, #0
 8104ac2:	4603      	mov	r3, r0
 8104ac4:	6039      	str	r1, [r7, #0]
 8104ac6:	71fb      	strb	r3, [r7, #7]
  tusb_desc_type_t const desc_type = (tusb_desc_type_t) tu_u16_high(p_request->wValue);
 8104ac8:	683b      	ldr	r3, [r7, #0]
 8104aca:	885b      	ldrh	r3, [r3, #2]
 8104acc:	b29b      	uxth	r3, r3
 8104ace:	84bb      	strh	r3, [r7, #36]	; 0x24
TU_ATTR_ALWAYS_INLINE static inline uint8_t tu_u16_high(uint16_t ui16) { return TU_U16_HIGH(ui16); }
 8104ad0:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8104ad2:	0a1b      	lsrs	r3, r3, #8
 8104ad4:	b29b      	uxth	r3, r3
 8104ad6:	b2db      	uxtb	r3, r3
 8104ad8:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
  uint8_t const desc_index = tu_u16_low( p_request->wValue );
 8104adc:	683b      	ldr	r3, [r7, #0]
 8104ade:	885b      	ldrh	r3, [r3, #2]
 8104ae0:	b29b      	uxth	r3, r3
 8104ae2:	84fb      	strh	r3, [r7, #38]	; 0x26
TU_ATTR_ALWAYS_INLINE static inline uint8_t tu_u16_low (uint16_t ui16) { return TU_U16_LOW(ui16); }
 8104ae4:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8104ae6:	b2db      	uxtb	r3, r3
 8104ae8:	f887 304a 	strb.w	r3, [r7, #74]	; 0x4a

  switch(desc_type)
 8104aec:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 8104af0:	3b01      	subs	r3, #1
 8104af2:	2b0e      	cmp	r3, #14
 8104af4:	f200 80bc 	bhi.w	8104c70 <process_get_descriptor+0x1b4>
 8104af8:	a201      	add	r2, pc, #4	; (adr r2, 8104b00 <process_get_descriptor+0x44>)
 8104afa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8104afe:	bf00      	nop
 8104b00:	08104b3d 	.word	0x08104b3d
 8104b04:	08104ba1 	.word	0x08104ba1
 8104b08:	08104c09 	.word	0x08104c09
 8104b0c:	08104c71 	.word	0x08104c71
 8104b10:	08104c71 	.word	0x08104c71
 8104b14:	08104c3f 	.word	0x08104c3f
 8104b18:	08104ba1 	.word	0x08104ba1
 8104b1c:	08104c71 	.word	0x08104c71
 8104b20:	08104c71 	.word	0x08104c71
 8104b24:	08104c71 	.word	0x08104c71
 8104b28:	08104c71 	.word	0x08104c71
 8104b2c:	08104c71 	.word	0x08104c71
 8104b30:	08104c71 	.word	0x08104c71
 8104b34:	08104c71 	.word	0x08104c71
 8104b38:	08104b53 	.word	0x08104b53
  {
    case TUSB_DESC_DEVICE:
    {
      TU_LOG_USBD(" Device\r\n");

      void* desc_device = (void*) (uintptr_t) tud_descriptor_device_cb();
 8104b3c:	f7fd fd92 	bl	8102664 <tud_descriptor_device_cb>
 8104b40:	62b8      	str	r0, [r7, #40]	; 0x28
        mod_request.wLength = CFG_TUD_ENDPOINT0_SIZE;

        return tud_control_xfer(rhport, &mod_request, desc_device, CFG_TUD_ENDPOINT0_SIZE);
      }else
      {
        return tud_control_xfer(rhport, p_request, desc_device, sizeof(tusb_desc_device_t));
 8104b42:	79f8      	ldrb	r0, [r7, #7]
 8104b44:	2312      	movs	r3, #18
 8104b46:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8104b48:	6839      	ldr	r1, [r7, #0]
 8104b4a:	f000 fd05 	bl	8105558 <tud_control_xfer>
 8104b4e:	4603      	mov	r3, r0
 8104b50:	e08f      	b.n	8104c72 <process_get_descriptor+0x1b6>
    case TUSB_DESC_BOS:
    {
      TU_LOG_USBD(" BOS\r\n");

      // requested by host if USB > 2.0 ( i.e 2.1 or 3.x )
      if (!tud_descriptor_bos_cb) return false;
 8104b52:	4b4a      	ldr	r3, [pc, #296]	; (8104c7c <process_get_descriptor+0x1c0>)
 8104b54:	2b00      	cmp	r3, #0
 8104b56:	d101      	bne.n	8104b5c <process_get_descriptor+0xa0>
 8104b58:	2300      	movs	r3, #0
 8104b5a:	e08a      	b.n	8104c72 <process_get_descriptor+0x1b6>

      uintptr_t desc_bos = (uintptr_t) tud_descriptor_bos_cb();
 8104b5c:	f3af 8000 	nop.w
 8104b60:	4603      	mov	r3, r0
 8104b62:	647b      	str	r3, [r7, #68]	; 0x44
      TU_ASSERT(desc_bos);
 8104b64:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8104b66:	2b00      	cmp	r3, #0
 8104b68:	d10a      	bne.n	8104b80 <process_get_descriptor+0xc4>
 8104b6a:	4b45      	ldr	r3, [pc, #276]	; (8104c80 <process_get_descriptor+0x1c4>)
 8104b6c:	63fb      	str	r3, [r7, #60]	; 0x3c
 8104b6e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8104b70:	681b      	ldr	r3, [r3, #0]
 8104b72:	f003 0301 	and.w	r3, r3, #1
 8104b76:	2b00      	cmp	r3, #0
 8104b78:	d000      	beq.n	8104b7c <process_get_descriptor+0xc0>
 8104b7a:	be00      	bkpt	0x0000
 8104b7c:	2300      	movs	r3, #0
 8104b7e:	e078      	b.n	8104c72 <process_get_descriptor+0x1b6>

      // Use offsetof to avoid pointer to the odd/misaligned address
      uint16_t const total_len = tu_le16toh( tu_unaligned_read16((const void*) (desc_bos + offsetof(tusb_desc_bos_t, wTotalLength))) );
 8104b80:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8104b82:	3302      	adds	r3, #2
 8104b84:	623b      	str	r3, [r7, #32]
  return *((uint16_t const *) mem);
 8104b86:	6a3b      	ldr	r3, [r7, #32]
 8104b88:	881b      	ldrh	r3, [r3, #0]
 8104b8a:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42

      return tud_control_xfer(rhport, p_request, (void*) desc_bos, total_len);
 8104b8e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8104b90:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8104b94:	79f8      	ldrb	r0, [r7, #7]
 8104b96:	6839      	ldr	r1, [r7, #0]
 8104b98:	f000 fcde 	bl	8105558 <tud_control_xfer>
 8104b9c:	4603      	mov	r3, r0
 8104b9e:	e068      	b.n	8104c72 <process_get_descriptor+0x1b6>
    case TUSB_DESC_CONFIGURATION:
    case TUSB_DESC_OTHER_SPEED_CONFIG:
    {
      uintptr_t desc_config;

      if ( desc_type == TUSB_DESC_CONFIGURATION )
 8104ba0:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 8104ba4:	2b02      	cmp	r3, #2
 8104ba6:	d107      	bne.n	8104bb8 <process_get_descriptor+0xfc>
      {
        TU_LOG_USBD(" Configuration[%u]\r\n", desc_index);
        desc_config = (uintptr_t) tud_descriptor_configuration_cb(desc_index);
 8104ba8:	f897 304a 	ldrb.w	r3, [r7, #74]	; 0x4a
 8104bac:	4618      	mov	r0, r3
 8104bae:	f7fd fd63 	bl	8102678 <tud_descriptor_configuration_cb>
 8104bb2:	4603      	mov	r3, r0
 8104bb4:	64fb      	str	r3, [r7, #76]	; 0x4c
 8104bb6:	e00b      	b.n	8104bd0 <process_get_descriptor+0x114>
      }else
      {
        // Host only request this after getting Device Qualifier descriptor
        TU_LOG_USBD(" Other Speed Configuration\r\n");
        TU_VERIFY( tud_descriptor_other_speed_configuration_cb );
 8104bb8:	4b32      	ldr	r3, [pc, #200]	; (8104c84 <process_get_descriptor+0x1c8>)
 8104bba:	2b00      	cmp	r3, #0
 8104bbc:	d101      	bne.n	8104bc2 <process_get_descriptor+0x106>
 8104bbe:	2300      	movs	r3, #0
 8104bc0:	e057      	b.n	8104c72 <process_get_descriptor+0x1b6>
        desc_config = (uintptr_t) tud_descriptor_other_speed_configuration_cb(desc_index);
 8104bc2:	f897 304a 	ldrb.w	r3, [r7, #74]	; 0x4a
 8104bc6:	4618      	mov	r0, r3
 8104bc8:	f3af 8000 	nop.w
 8104bcc:	4603      	mov	r3, r0
 8104bce:	64fb      	str	r3, [r7, #76]	; 0x4c
      }

      TU_ASSERT(desc_config);
 8104bd0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8104bd2:	2b00      	cmp	r3, #0
 8104bd4:	d10a      	bne.n	8104bec <process_get_descriptor+0x130>
 8104bd6:	4b2a      	ldr	r3, [pc, #168]	; (8104c80 <process_get_descriptor+0x1c4>)
 8104bd8:	62fb      	str	r3, [r7, #44]	; 0x2c
 8104bda:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8104bdc:	681b      	ldr	r3, [r3, #0]
 8104bde:	f003 0301 	and.w	r3, r3, #1
 8104be2:	2b00      	cmp	r3, #0
 8104be4:	d000      	beq.n	8104be8 <process_get_descriptor+0x12c>
 8104be6:	be00      	bkpt	0x0000
 8104be8:	2300      	movs	r3, #0
 8104bea:	e042      	b.n	8104c72 <process_get_descriptor+0x1b6>

      // Use offsetof to avoid pointer to the odd/misaligned address
      uint16_t const total_len = tu_le16toh( tu_unaligned_read16((const void*) (desc_config + offsetof(tusb_desc_configuration_t, wTotalLength))) );
 8104bec:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8104bee:	3302      	adds	r3, #2
 8104bf0:	61fb      	str	r3, [r7, #28]
 8104bf2:	69fb      	ldr	r3, [r7, #28]
 8104bf4:	881b      	ldrh	r3, [r3, #0]
 8104bf6:	867b      	strh	r3, [r7, #50]	; 0x32

      return tud_control_xfer(rhport, p_request, (void*) desc_config, total_len);
 8104bf8:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8104bfa:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 8104bfc:	79f8      	ldrb	r0, [r7, #7]
 8104bfe:	6839      	ldr	r1, [r7, #0]
 8104c00:	f000 fcaa 	bl	8105558 <tud_control_xfer>
 8104c04:	4603      	mov	r3, r0
 8104c06:	e034      	b.n	8104c72 <process_get_descriptor+0x1b6>
    case TUSB_DESC_STRING:
    {
      TU_LOG_USBD(" String[%u]\r\n", desc_index);

      // String Descriptor always uses the desc set from user
      uint8_t const* desc_str = (uint8_t const*) tud_descriptor_string_cb(desc_index, tu_le16toh(p_request->wIndex));
 8104c08:	683b      	ldr	r3, [r7, #0]
 8104c0a:	889b      	ldrh	r3, [r3, #4]
 8104c0c:	b29a      	uxth	r2, r3
 8104c0e:	f897 304a 	ldrb.w	r3, [r7, #74]	; 0x4a
 8104c12:	4611      	mov	r1, r2
 8104c14:	4618      	mov	r0, r3
 8104c16:	f7fd fd3d 	bl	8102694 <tud_descriptor_string_cb>
 8104c1a:	6378      	str	r0, [r7, #52]	; 0x34
      TU_VERIFY(desc_str);
 8104c1c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8104c1e:	2b00      	cmp	r3, #0
 8104c20:	d101      	bne.n	8104c26 <process_get_descriptor+0x16a>
 8104c22:	2300      	movs	r3, #0
 8104c24:	e025      	b.n	8104c72 <process_get_descriptor+0x1b6>
 8104c26:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8104c28:	61bb      	str	r3, [r7, #24]
  return ((uint8_t const*) desc)[DESC_OFFSET_LEN];
 8104c2a:	69bb      	ldr	r3, [r7, #24]
 8104c2c:	781b      	ldrb	r3, [r3, #0]

      // first byte of descriptor is its size
      return tud_control_xfer(rhport, p_request, (void*) (uintptr_t) desc_str, tu_desc_len(desc_str));
 8104c2e:	b29b      	uxth	r3, r3
 8104c30:	79f8      	ldrb	r0, [r7, #7]
 8104c32:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8104c34:	6839      	ldr	r1, [r7, #0]
 8104c36:	f000 fc8f 	bl	8105558 <tud_control_xfer>
 8104c3a:	4603      	mov	r3, r0
 8104c3c:	e019      	b.n	8104c72 <process_get_descriptor+0x1b6>

    case TUSB_DESC_DEVICE_QUALIFIER:
    {
      TU_LOG_USBD(" Device Qualifier\r\n");

      TU_VERIFY( tud_descriptor_device_qualifier_cb );
 8104c3e:	4b12      	ldr	r3, [pc, #72]	; (8104c88 <process_get_descriptor+0x1cc>)
 8104c40:	2b00      	cmp	r3, #0
 8104c42:	d101      	bne.n	8104c48 <process_get_descriptor+0x18c>
 8104c44:	2300      	movs	r3, #0
 8104c46:	e014      	b.n	8104c72 <process_get_descriptor+0x1b6>

      uint8_t const* desc_qualifier = tud_descriptor_device_qualifier_cb();
 8104c48:	f3af 8000 	nop.w
 8104c4c:	63b8      	str	r0, [r7, #56]	; 0x38
      TU_VERIFY(desc_qualifier);
 8104c4e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8104c50:	2b00      	cmp	r3, #0
 8104c52:	d101      	bne.n	8104c58 <process_get_descriptor+0x19c>
 8104c54:	2300      	movs	r3, #0
 8104c56:	e00c      	b.n	8104c72 <process_get_descriptor+0x1b6>
 8104c58:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8104c5a:	617b      	str	r3, [r7, #20]
 8104c5c:	697b      	ldr	r3, [r7, #20]
 8104c5e:	781b      	ldrb	r3, [r3, #0]

      // first byte of descriptor is its size
      return tud_control_xfer(rhport, p_request, (void*) (uintptr_t) desc_qualifier, tu_desc_len(desc_qualifier));
 8104c60:	b29b      	uxth	r3, r3
 8104c62:	79f8      	ldrb	r0, [r7, #7]
 8104c64:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8104c66:	6839      	ldr	r1, [r7, #0]
 8104c68:	f000 fc76 	bl	8105558 <tud_control_xfer>
 8104c6c:	4603      	mov	r3, r0
 8104c6e:	e000      	b.n	8104c72 <process_get_descriptor+0x1b6>
    }
    // break; // unreachable

    default: return false;
 8104c70:	2300      	movs	r3, #0
  }
}
 8104c72:	4618      	mov	r0, r3
 8104c74:	3750      	adds	r7, #80	; 0x50
 8104c76:	46bd      	mov	sp, r7
 8104c78:	bd80      	pop	{r7, pc}
 8104c7a:	bf00      	nop
 8104c7c:	00000000 	.word	0x00000000
 8104c80:	e000edf0 	.word	0xe000edf0
	...

08104c8c <dcd_event_handler>:

//--------------------------------------------------------------------+
// DCD Event Handler
//--------------------------------------------------------------------+
TU_ATTR_FAST_FUNC void dcd_event_handler(dcd_event_t const* event, bool in_isr) {
 8104c8c:	b580      	push	{r7, lr}
 8104c8e:	b09c      	sub	sp, #112	; 0x70
 8104c90:	af00      	add	r7, sp, #0
 8104c92:	6078      	str	r0, [r7, #4]
 8104c94:	460b      	mov	r3, r1
 8104c96:	70fb      	strb	r3, [r7, #3]
  bool send = false;
 8104c98:	2300      	movs	r3, #0
 8104c9a:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
  switch (event->event_id) {
 8104c9e:	687b      	ldr	r3, [r7, #4]
 8104ca0:	785b      	ldrb	r3, [r3, #1]
 8104ca2:	3b02      	subs	r3, #2
 8104ca4:	2b03      	cmp	r3, #3
 8104ca6:	f200 80f9 	bhi.w	8104e9c <dcd_event_handler+0x210>
 8104caa:	a201      	add	r2, pc, #4	; (adr r2, 8104cb0 <dcd_event_handler+0x24>)
 8104cac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8104cb0:	08104cc1 	.word	0x08104cc1
 8104cb4:	08104d31 	.word	0x08104d31
 8104cb8:	08104ced 	.word	0x08104ced
 8104cbc:	08104d0f 	.word	0x08104d0f
    case DCD_EVENT_UNPLUGGED:
      _usbd_dev.connected = 0;
 8104cc0:	4aa7      	ldr	r2, [pc, #668]	; (8104f60 <dcd_event_handler+0x2d4>)
 8104cc2:	7813      	ldrb	r3, [r2, #0]
 8104cc4:	f36f 0300 	bfc	r3, #0, #1
 8104cc8:	7013      	strb	r3, [r2, #0]
      _usbd_dev.addressed = 0;
 8104cca:	4aa5      	ldr	r2, [pc, #660]	; (8104f60 <dcd_event_handler+0x2d4>)
 8104ccc:	7813      	ldrb	r3, [r2, #0]
 8104cce:	f36f 0341 	bfc	r3, #1, #1
 8104cd2:	7013      	strb	r3, [r2, #0]
      _usbd_dev.cfg_num = 0;
 8104cd4:	4ba2      	ldr	r3, [pc, #648]	; (8104f60 <dcd_event_handler+0x2d4>)
 8104cd6:	2200      	movs	r2, #0
 8104cd8:	705a      	strb	r2, [r3, #1]
      _usbd_dev.suspended = 0;
 8104cda:	4aa1      	ldr	r2, [pc, #644]	; (8104f60 <dcd_event_handler+0x2d4>)
 8104cdc:	7813      	ldrb	r3, [r2, #0]
 8104cde:	f36f 0382 	bfc	r3, #2, #1
 8104ce2:	7013      	strb	r3, [r2, #0]
      send = true;
 8104ce4:	2301      	movs	r3, #1
 8104ce6:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
      break;
 8104cea:	e0de      	b.n	8104eaa <dcd_event_handler+0x21e>
    case DCD_EVENT_SUSPEND:
      // NOTE: When plugging/unplugging device, the D+/D- state are unstable and
      // can accidentally meet the SUSPEND condition ( Bus Idle for 3ms ).
      // In addition, some MCUs such as SAMD or boards that haven no VBUS detection cannot distinguish
      // suspended vs disconnected. We will skip handling SUSPEND/RESUME event if not currently connected
      if (_usbd_dev.connected) {
 8104cec:	4b9c      	ldr	r3, [pc, #624]	; (8104f60 <dcd_event_handler+0x2d4>)
 8104cee:	781b      	ldrb	r3, [r3, #0]
 8104cf0:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8104cf4:	b2db      	uxtb	r3, r3
 8104cf6:	2b00      	cmp	r3, #0
 8104cf8:	f000 80d4 	beq.w	8104ea4 <dcd_event_handler+0x218>
        _usbd_dev.suspended = 1;
 8104cfc:	4a98      	ldr	r2, [pc, #608]	; (8104f60 <dcd_event_handler+0x2d4>)
 8104cfe:	7813      	ldrb	r3, [r2, #0]
 8104d00:	f043 0304 	orr.w	r3, r3, #4
 8104d04:	7013      	strb	r3, [r2, #0]
        send = true;
 8104d06:	2301      	movs	r3, #1
 8104d08:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
      }
      break;
 8104d0c:	e0ca      	b.n	8104ea4 <dcd_event_handler+0x218>

    case DCD_EVENT_RESUME:
      // skip event if not connected (especially required for SAMD)
      if (_usbd_dev.connected) {
 8104d0e:	4b94      	ldr	r3, [pc, #592]	; (8104f60 <dcd_event_handler+0x2d4>)
 8104d10:	781b      	ldrb	r3, [r3, #0]
 8104d12:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8104d16:	b2db      	uxtb	r3, r3
 8104d18:	2b00      	cmp	r3, #0
 8104d1a:	f000 80c5 	beq.w	8104ea8 <dcd_event_handler+0x21c>
        _usbd_dev.suspended = 0;
 8104d1e:	4a90      	ldr	r2, [pc, #576]	; (8104f60 <dcd_event_handler+0x2d4>)
 8104d20:	7813      	ldrb	r3, [r2, #0]
 8104d22:	f36f 0382 	bfc	r3, #2, #1
 8104d26:	7013      	strb	r3, [r2, #0]
        send = true;
 8104d28:	2301      	movs	r3, #1
 8104d2a:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
      }
      break;
 8104d2e:	e0bb      	b.n	8104ea8 <dcd_event_handler+0x21c>

    case DCD_EVENT_SOF:
      // Some MCUs after running dcd_remote_wakeup() does not have way to detect the end of remote wakeup
      // which last 1-15 ms. DCD can use SOF as a clear indicator that bus is back to operational
      if (_usbd_dev.suspended) {
 8104d30:	4b8b      	ldr	r3, [pc, #556]	; (8104f60 <dcd_event_handler+0x2d4>)
 8104d32:	781b      	ldrb	r3, [r3, #0]
 8104d34:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8104d38:	b2db      	uxtb	r3, r3
 8104d3a:	2b00      	cmp	r3, #0
 8104d3c:	d064      	beq.n	8104e08 <dcd_event_handler+0x17c>
        _usbd_dev.suspended = 0;
 8104d3e:	4a88      	ldr	r2, [pc, #544]	; (8104f60 <dcd_event_handler+0x2d4>)
 8104d40:	7813      	ldrb	r3, [r2, #0]
 8104d42:	f36f 0382 	bfc	r3, #2, #1
 8104d46:	7013      	strb	r3, [r2, #0]

        dcd_event_t const event_resume = {.rhport = event->rhport, .event_id = DCD_EVENT_RESUME};
 8104d48:	f107 0308 	add.w	r3, r7, #8
 8104d4c:	2200      	movs	r2, #0
 8104d4e:	601a      	str	r2, [r3, #0]
 8104d50:	605a      	str	r2, [r3, #4]
 8104d52:	609a      	str	r2, [r3, #8]
 8104d54:	687b      	ldr	r3, [r7, #4]
 8104d56:	781b      	ldrb	r3, [r3, #0]
 8104d58:	723b      	strb	r3, [r7, #8]
 8104d5a:	2305      	movs	r3, #5
 8104d5c:	727b      	strb	r3, [r7, #9]
 8104d5e:	f107 0308 	add.w	r3, r7, #8
 8104d62:	667b      	str	r3, [r7, #100]	; 0x64
 8104d64:	78fb      	ldrb	r3, [r7, #3]
 8104d66:	f887 3063 	strb.w	r3, [r7, #99]	; 0x63
  bool ret = osal_queue_send(_usbd_q, event, in_isr);
 8104d6a:	4b7e      	ldr	r3, [pc, #504]	; (8104f64 <dcd_event_handler+0x2d8>)
 8104d6c:	681b      	ldr	r3, [r3, #0]
 8104d6e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8104d70:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8104d72:	65bb      	str	r3, [r7, #88]	; 0x58
 8104d74:	f897 3063 	ldrb.w	r3, [r7, #99]	; 0x63
 8104d78:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
}

TU_ATTR_ALWAYS_INLINE static inline bool osal_queue_send(osal_queue_t qhdl, void const* data, bool in_isr) {
  if (!in_isr) {
 8104d7c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8104d80:	f083 0301 	eor.w	r3, r3, #1
 8104d84:	b2db      	uxtb	r3, r3
 8104d86:	2b00      	cmp	r3, #0
 8104d88:	d006      	beq.n	8104d98 <dcd_event_handler+0x10c>
 8104d8a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8104d8c:	653b      	str	r3, [r7, #80]	; 0x50
  qhdl->interrupt_set(false);
 8104d8e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8104d90:	681b      	ldr	r3, [r3, #0]
 8104d92:	2000      	movs	r0, #0
 8104d94:	4798      	blx	r3
}
 8104d96:	bf00      	nop
    _osal_q_lock(qhdl);
  }

  bool success = tu_fifo_write(&qhdl->ff, data);
 8104d98:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8104d9a:	3304      	adds	r3, #4
 8104d9c:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8104d9e:	4618      	mov	r0, r3
 8104da0:	f7fe fee5 	bl	8103b6e <tu_fifo_write>
 8104da4:	4603      	mov	r3, r0
 8104da6:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f

  if (!in_isr) {
 8104daa:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8104dae:	f083 0301 	eor.w	r3, r3, #1
 8104db2:	b2db      	uxtb	r3, r3
 8104db4:	2b00      	cmp	r3, #0
 8104db6:	d006      	beq.n	8104dc6 <dcd_event_handler+0x13a>
 8104db8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8104dba:	64bb      	str	r3, [r7, #72]	; 0x48
  qhdl->interrupt_set(true);
 8104dbc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8104dbe:	681b      	ldr	r3, [r3, #0]
 8104dc0:	2001      	movs	r0, #1
 8104dc2:	4798      	blx	r3
}
 8104dc4:	bf00      	nop
    _osal_q_unlock(qhdl);
  }

  TU_ASSERT(success);
 8104dc6:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8104dca:	f083 0301 	eor.w	r3, r3, #1
 8104dce:	b2db      	uxtb	r3, r3
 8104dd0:	2b00      	cmp	r3, #0
 8104dd2:	d00a      	beq.n	8104dea <dcd_event_handler+0x15e>
 8104dd4:	4b64      	ldr	r3, [pc, #400]	; (8104f68 <dcd_event_handler+0x2dc>)
 8104dd6:	647b      	str	r3, [r7, #68]	; 0x44
 8104dd8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8104dda:	681b      	ldr	r3, [r3, #0]
 8104ddc:	f003 0301 	and.w	r3, r3, #1
 8104de0:	2b00      	cmp	r3, #0
 8104de2:	d000      	beq.n	8104de6 <dcd_event_handler+0x15a>
 8104de4:	be00      	bkpt	0x0000
 8104de6:	2300      	movs	r3, #0
 8104de8:	e001      	b.n	8104dee <dcd_event_handler+0x162>
  return success;
 8104dea:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8104dee:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
  tud_event_hook_cb(event->rhport, event->event_id, in_isr);
 8104df2:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8104df4:	7818      	ldrb	r0, [r3, #0]
 8104df6:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8104df8:	785b      	ldrb	r3, [r3, #1]
 8104dfa:	4619      	mov	r1, r3
 8104dfc:	f897 3063 	ldrb.w	r3, [r7, #99]	; 0x63
 8104e00:	461a      	mov	r2, r3
 8104e02:	f7fe ff3f 	bl	8103c84 <tud_event_hook_cb>
  return ret;
 8104e06:	bf00      	nop
        queue_event(&event_resume, in_isr);
      }

      // SOF driver handler in ISR context
      for (uint8_t i = 0; i < TOTAL_DRIVER_COUNT; i++) {
 8104e08:	2300      	movs	r3, #0
 8104e0a:	f887 306e 	strb.w	r3, [r7, #110]	; 0x6e
 8104e0e:	e03e      	b.n	8104e8e <dcd_event_handler+0x202>
 8104e10:	f897 306e 	ldrb.w	r3, [r7, #110]	; 0x6e
 8104e14:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
  usbd_class_driver_t const * driver = NULL;
 8104e18:	2300      	movs	r3, #0
 8104e1a:	63fb      	str	r3, [r7, #60]	; 0x3c
  if ( drvid < _app_driver_count ) {
 8104e1c:	4b53      	ldr	r3, [pc, #332]	; (8104f6c <dcd_event_handler+0x2e0>)
 8104e1e:	781b      	ldrb	r3, [r3, #0]
 8104e20:	f897 2042 	ldrb.w	r2, [r7, #66]	; 0x42
 8104e24:	429a      	cmp	r2, r3
 8104e26:	d20a      	bcs.n	8104e3e <dcd_event_handler+0x1b2>
    driver = &_app_driver[drvid];
 8104e28:	4b51      	ldr	r3, [pc, #324]	; (8104f70 <dcd_event_handler+0x2e4>)
 8104e2a:	6819      	ldr	r1, [r3, #0]
 8104e2c:	f897 2042 	ldrb.w	r2, [r7, #66]	; 0x42
 8104e30:	4613      	mov	r3, r2
 8104e32:	005b      	lsls	r3, r3, #1
 8104e34:	4413      	add	r3, r2
 8104e36:	00db      	lsls	r3, r3, #3
 8104e38:	440b      	add	r3, r1
 8104e3a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8104e3c:	e011      	b.n	8104e62 <dcd_event_handler+0x1d6>
  } else if ( drvid < TOTAL_DRIVER_COUNT && BUILTIN_DRIVER_COUNT > 0 ){
 8104e3e:	4b4b      	ldr	r3, [pc, #300]	; (8104f6c <dcd_event_handler+0x2e0>)
 8104e40:	781b      	ldrb	r3, [r3, #0]
 8104e42:	f897 2042 	ldrb.w	r2, [r7, #66]	; 0x42
 8104e46:	429a      	cmp	r2, r3
 8104e48:	d80b      	bhi.n	8104e62 <dcd_event_handler+0x1d6>
    driver = &_usbd_driver[drvid - _app_driver_count];
 8104e4a:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
 8104e4e:	4a47      	ldr	r2, [pc, #284]	; (8104f6c <dcd_event_handler+0x2e0>)
 8104e50:	7812      	ldrb	r2, [r2, #0]
 8104e52:	1a9a      	subs	r2, r3, r2
 8104e54:	4613      	mov	r3, r2
 8104e56:	005b      	lsls	r3, r3, #1
 8104e58:	4413      	add	r3, r2
 8104e5a:	00db      	lsls	r3, r3, #3
 8104e5c:	4a45      	ldr	r2, [pc, #276]	; (8104f74 <dcd_event_handler+0x2e8>)
 8104e5e:	4413      	add	r3, r2
 8104e60:	63fb      	str	r3, [r7, #60]	; 0x3c
  return driver;
 8104e62:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
        usbd_class_driver_t const* driver = get_driver(i);
 8104e64:	66bb      	str	r3, [r7, #104]	; 0x68
        if (driver && driver->sof) {
 8104e66:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8104e68:	2b00      	cmp	r3, #0
 8104e6a:	d00b      	beq.n	8104e84 <dcd_event_handler+0x1f8>
 8104e6c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8104e6e:	695b      	ldr	r3, [r3, #20]
 8104e70:	2b00      	cmp	r3, #0
 8104e72:	d007      	beq.n	8104e84 <dcd_event_handler+0x1f8>
          driver->sof(event->rhport, event->sof.frame_count);
 8104e74:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8104e76:	695b      	ldr	r3, [r3, #20]
 8104e78:	687a      	ldr	r2, [r7, #4]
 8104e7a:	7810      	ldrb	r0, [r2, #0]
 8104e7c:	687a      	ldr	r2, [r7, #4]
 8104e7e:	6852      	ldr	r2, [r2, #4]
 8104e80:	4611      	mov	r1, r2
 8104e82:	4798      	blx	r3
      for (uint8_t i = 0; i < TOTAL_DRIVER_COUNT; i++) {
 8104e84:	f897 306e 	ldrb.w	r3, [r7, #110]	; 0x6e
 8104e88:	3301      	adds	r3, #1
 8104e8a:	f887 306e 	strb.w	r3, [r7, #110]	; 0x6e
 8104e8e:	4b37      	ldr	r3, [pc, #220]	; (8104f6c <dcd_event_handler+0x2e0>)
 8104e90:	781b      	ldrb	r3, [r3, #0]
 8104e92:	f897 206e 	ldrb.w	r2, [r7, #110]	; 0x6e
 8104e96:	429a      	cmp	r2, r3
 8104e98:	d9ba      	bls.n	8104e10 <dcd_event_handler+0x184>
        }
      }

      // skip osal queue for SOF in usbd task
      break;
 8104e9a:	e006      	b.n	8104eaa <dcd_event_handler+0x21e>

    default:
      send = true;
 8104e9c:	2301      	movs	r3, #1
 8104e9e:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
      break;
 8104ea2:	e002      	b.n	8104eaa <dcd_event_handler+0x21e>
      break;
 8104ea4:	bf00      	nop
 8104ea6:	e000      	b.n	8104eaa <dcd_event_handler+0x21e>
      break;
 8104ea8:	bf00      	nop
  }

  if (send) {
 8104eaa:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8104eae:	2b00      	cmp	r3, #0
 8104eb0:	d051      	beq.n	8104f56 <dcd_event_handler+0x2ca>
 8104eb2:	687b      	ldr	r3, [r7, #4]
 8104eb4:	63bb      	str	r3, [r7, #56]	; 0x38
 8104eb6:	78fb      	ldrb	r3, [r7, #3]
 8104eb8:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
  bool ret = osal_queue_send(_usbd_q, event, in_isr);
 8104ebc:	4b29      	ldr	r3, [pc, #164]	; (8104f64 <dcd_event_handler+0x2d8>)
 8104ebe:	681b      	ldr	r3, [r3, #0]
 8104ec0:	633b      	str	r3, [r7, #48]	; 0x30
 8104ec2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8104ec4:	62fb      	str	r3, [r7, #44]	; 0x2c
 8104ec6:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8104eca:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
  if (!in_isr) {
 8104ece:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8104ed2:	f083 0301 	eor.w	r3, r3, #1
 8104ed6:	b2db      	uxtb	r3, r3
 8104ed8:	2b00      	cmp	r3, #0
 8104eda:	d006      	beq.n	8104eea <dcd_event_handler+0x25e>
 8104edc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8104ede:	627b      	str	r3, [r7, #36]	; 0x24
  qhdl->interrupt_set(false);
 8104ee0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8104ee2:	681b      	ldr	r3, [r3, #0]
 8104ee4:	2000      	movs	r0, #0
 8104ee6:	4798      	blx	r3
}
 8104ee8:	bf00      	nop
  bool success = tu_fifo_write(&qhdl->ff, data);
 8104eea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8104eec:	3304      	adds	r3, #4
 8104eee:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8104ef0:	4618      	mov	r0, r3
 8104ef2:	f7fe fe3c 	bl	8103b6e <tu_fifo_write>
 8104ef6:	4603      	mov	r3, r0
 8104ef8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  if (!in_isr) {
 8104efc:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8104f00:	f083 0301 	eor.w	r3, r3, #1
 8104f04:	b2db      	uxtb	r3, r3
 8104f06:	2b00      	cmp	r3, #0
 8104f08:	d006      	beq.n	8104f18 <dcd_event_handler+0x28c>
 8104f0a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8104f0c:	61fb      	str	r3, [r7, #28]
  qhdl->interrupt_set(true);
 8104f0e:	69fb      	ldr	r3, [r7, #28]
 8104f10:	681b      	ldr	r3, [r3, #0]
 8104f12:	2001      	movs	r0, #1
 8104f14:	4798      	blx	r3
}
 8104f16:	bf00      	nop
  TU_ASSERT(success);
 8104f18:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8104f1c:	f083 0301 	eor.w	r3, r3, #1
 8104f20:	b2db      	uxtb	r3, r3
 8104f22:	2b00      	cmp	r3, #0
 8104f24:	d00a      	beq.n	8104f3c <dcd_event_handler+0x2b0>
 8104f26:	4b10      	ldr	r3, [pc, #64]	; (8104f68 <dcd_event_handler+0x2dc>)
 8104f28:	61bb      	str	r3, [r7, #24]
 8104f2a:	69bb      	ldr	r3, [r7, #24]
 8104f2c:	681b      	ldr	r3, [r3, #0]
 8104f2e:	f003 0301 	and.w	r3, r3, #1
 8104f32:	2b00      	cmp	r3, #0
 8104f34:	d000      	beq.n	8104f38 <dcd_event_handler+0x2ac>
 8104f36:	be00      	bkpt	0x0000
 8104f38:	2300      	movs	r3, #0
 8104f3a:	e001      	b.n	8104f40 <dcd_event_handler+0x2b4>
  return success;
 8104f3c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8104f40:	75fb      	strb	r3, [r7, #23]
  tud_event_hook_cb(event->rhport, event->event_id, in_isr);
 8104f42:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8104f44:	7818      	ldrb	r0, [r3, #0]
 8104f46:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8104f48:	785b      	ldrb	r3, [r3, #1]
 8104f4a:	4619      	mov	r1, r3
 8104f4c:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8104f50:	461a      	mov	r2, r3
 8104f52:	f7fe fe97 	bl	8103c84 <tud_event_hook_cb>
    queue_event(event, in_isr);
  }
}
 8104f56:	bf00      	nop
 8104f58:	3770      	adds	r7, #112	; 0x70
 8104f5a:	46bd      	mov	sp, r7
 8104f5c:	bd80      	pop	{r7, pc}
 8104f5e:	bf00      	nop
 8104f60:	10000fa4 	.word	0x10000fa4
 8104f64:	100010a4 	.word	0x100010a4
 8104f68:	e000edf0 	.word	0xe000edf0
 8104f6c:	10000fe0 	.word	0x10000fe0
 8104f70:	10000fdc 	.word	0x10000fdc
 8104f74:	08111ec4 	.word	0x08111ec4

08104f78 <usbd_int_set>:
//--------------------------------------------------------------------+
// USBD API For Class Driver
//--------------------------------------------------------------------+

void usbd_int_set(bool enabled)
{
 8104f78:	b580      	push	{r7, lr}
 8104f7a:	b082      	sub	sp, #8
 8104f7c:	af00      	add	r7, sp, #0
 8104f7e:	4603      	mov	r3, r0
 8104f80:	71fb      	strb	r3, [r7, #7]
  if (enabled)
 8104f82:	79fb      	ldrb	r3, [r7, #7]
 8104f84:	2b00      	cmp	r3, #0
 8104f86:	d005      	beq.n	8104f94 <usbd_int_set+0x1c>
  {
    dcd_int_enable(_usbd_rhport);
 8104f88:	4b07      	ldr	r3, [pc, #28]	; (8104fa8 <usbd_int_set+0x30>)
 8104f8a:	781b      	ldrb	r3, [r3, #0]
 8104f8c:	4618      	mov	r0, r3
 8104f8e:	f001 f89f 	bl	81060d0 <dcd_int_enable>
  }else
  {
    dcd_int_disable(_usbd_rhport);
  }
}
 8104f92:	e004      	b.n	8104f9e <usbd_int_set+0x26>
    dcd_int_disable(_usbd_rhport);
 8104f94:	4b04      	ldr	r3, [pc, #16]	; (8104fa8 <usbd_int_set+0x30>)
 8104f96:	781b      	ldrb	r3, [r3, #0]
 8104f98:	4618      	mov	r0, r3
 8104f9a:	f001 f8b1 	bl	8106100 <dcd_int_disable>
}
 8104f9e:	bf00      	nop
 8104fa0:	3708      	adds	r7, #8
 8104fa2:	46bd      	mov	sp, r7
 8104fa4:	bd80      	pop	{r7, pc}
 8104fa6:	bf00      	nop
 8104fa8:	1000001c 	.word	0x1000001c

08104fac <usbd_open_edpt_pair>:

// Parse consecutive endpoint descriptors (IN & OUT)
bool usbd_open_edpt_pair(uint8_t rhport, uint8_t const* p_desc, uint8_t ep_count, uint8_t xfer_type, uint8_t* ep_out, uint8_t* ep_in)
{
 8104fac:	b580      	push	{r7, lr}
 8104fae:	b08a      	sub	sp, #40	; 0x28
 8104fb0:	af00      	add	r7, sp, #0
 8104fb2:	6039      	str	r1, [r7, #0]
 8104fb4:	4611      	mov	r1, r2
 8104fb6:	461a      	mov	r2, r3
 8104fb8:	4603      	mov	r3, r0
 8104fba:	71fb      	strb	r3, [r7, #7]
 8104fbc:	460b      	mov	r3, r1
 8104fbe:	71bb      	strb	r3, [r7, #6]
 8104fc0:	4613      	mov	r3, r2
 8104fc2:	717b      	strb	r3, [r7, #5]
  for(int i=0; i<ep_count; i++)
 8104fc4:	2300      	movs	r3, #0
 8104fc6:	627b      	str	r3, [r7, #36]	; 0x24
 8104fc8:	e04d      	b.n	8105066 <usbd_open_edpt_pair+0xba>
  {
    tusb_desc_endpoint_t const * desc_ep = (tusb_desc_endpoint_t const *) p_desc;
 8104fca:	683b      	ldr	r3, [r7, #0]
 8104fcc:	623b      	str	r3, [r7, #32]

    TU_ASSERT(TUSB_DESC_ENDPOINT == desc_ep->bDescriptorType && xfer_type == desc_ep->bmAttributes.xfer);
 8104fce:	6a3b      	ldr	r3, [r7, #32]
 8104fd0:	785b      	ldrb	r3, [r3, #1]
 8104fd2:	2b05      	cmp	r3, #5
 8104fd4:	d108      	bne.n	8104fe8 <usbd_open_edpt_pair+0x3c>
 8104fd6:	6a3b      	ldr	r3, [r7, #32]
 8104fd8:	78db      	ldrb	r3, [r3, #3]
 8104fda:	f3c3 0301 	ubfx	r3, r3, #0, #2
 8104fde:	b2db      	uxtb	r3, r3
 8104fe0:	461a      	mov	r2, r3
 8104fe2:	797b      	ldrb	r3, [r7, #5]
 8104fe4:	4293      	cmp	r3, r2
 8104fe6:	d00a      	beq.n	8104ffe <usbd_open_edpt_pair+0x52>
 8104fe8:	4b23      	ldr	r3, [pc, #140]	; (8105078 <usbd_open_edpt_pair+0xcc>)
 8104fea:	61bb      	str	r3, [r7, #24]
 8104fec:	69bb      	ldr	r3, [r7, #24]
 8104fee:	681b      	ldr	r3, [r3, #0]
 8104ff0:	f003 0301 	and.w	r3, r3, #1
 8104ff4:	2b00      	cmp	r3, #0
 8104ff6:	d000      	beq.n	8104ffa <usbd_open_edpt_pair+0x4e>
 8104ff8:	be00      	bkpt	0x0000
 8104ffa:	2300      	movs	r3, #0
 8104ffc:	e038      	b.n	8105070 <usbd_open_edpt_pair+0xc4>
    TU_ASSERT(usbd_edpt_open(rhport, desc_ep));
 8104ffe:	79fb      	ldrb	r3, [r7, #7]
 8105000:	6a39      	ldr	r1, [r7, #32]
 8105002:	4618      	mov	r0, r3
 8105004:	f000 f83a 	bl	810507c <usbd_edpt_open>
 8105008:	4603      	mov	r3, r0
 810500a:	f083 0301 	eor.w	r3, r3, #1
 810500e:	b2db      	uxtb	r3, r3
 8105010:	2b00      	cmp	r3, #0
 8105012:	d00a      	beq.n	810502a <usbd_open_edpt_pair+0x7e>
 8105014:	4b18      	ldr	r3, [pc, #96]	; (8105078 <usbd_open_edpt_pair+0xcc>)
 8105016:	61fb      	str	r3, [r7, #28]
 8105018:	69fb      	ldr	r3, [r7, #28]
 810501a:	681b      	ldr	r3, [r3, #0]
 810501c:	f003 0301 	and.w	r3, r3, #1
 8105020:	2b00      	cmp	r3, #0
 8105022:	d000      	beq.n	8105026 <usbd_open_edpt_pair+0x7a>
 8105024:	be00      	bkpt	0x0000
 8105026:	2300      	movs	r3, #0
 8105028:	e022      	b.n	8105070 <usbd_open_edpt_pair+0xc4>

    if ( tu_edpt_dir(desc_ep->bEndpointAddress) == TUSB_DIR_IN )
 810502a:	6a3b      	ldr	r3, [r7, #32]
 810502c:	789b      	ldrb	r3, [r3, #2]
 810502e:	75fb      	strb	r3, [r7, #23]
  return (addr & TUSB_DIR_IN_MASK) ? TUSB_DIR_IN : TUSB_DIR_OUT;
 8105030:	7dfb      	ldrb	r3, [r7, #23]
 8105032:	09db      	lsrs	r3, r3, #7
 8105034:	b2db      	uxtb	r3, r3
 8105036:	2b01      	cmp	r3, #1
 8105038:	d104      	bne.n	8105044 <usbd_open_edpt_pair+0x98>
    {
      (*ep_in) = desc_ep->bEndpointAddress;
 810503a:	6a3b      	ldr	r3, [r7, #32]
 810503c:	789a      	ldrb	r2, [r3, #2]
 810503e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8105040:	701a      	strb	r2, [r3, #0]
 8105042:	e003      	b.n	810504c <usbd_open_edpt_pair+0xa0>
    }else
    {
      (*ep_out) = desc_ep->bEndpointAddress;
 8105044:	6a3b      	ldr	r3, [r7, #32]
 8105046:	789a      	ldrb	r2, [r3, #2]
 8105048:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 810504a:	701a      	strb	r2, [r3, #0]
 810504c:	683b      	ldr	r3, [r7, #0]
 810504e:	613b      	str	r3, [r7, #16]
  uint8_t const* desc8 = (uint8_t const*) desc;
 8105050:	693b      	ldr	r3, [r7, #16]
 8105052:	60fb      	str	r3, [r7, #12]
  return desc8 + desc8[DESC_OFFSET_LEN];
 8105054:	68fb      	ldr	r3, [r7, #12]
 8105056:	781b      	ldrb	r3, [r3, #0]
 8105058:	461a      	mov	r2, r3
 810505a:	68fb      	ldr	r3, [r7, #12]
 810505c:	4413      	add	r3, r2
    }

    p_desc = tu_desc_next(p_desc);
 810505e:	603b      	str	r3, [r7, #0]
  for(int i=0; i<ep_count; i++)
 8105060:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8105062:	3301      	adds	r3, #1
 8105064:	627b      	str	r3, [r7, #36]	; 0x24
 8105066:	79bb      	ldrb	r3, [r7, #6]
 8105068:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 810506a:	429a      	cmp	r2, r3
 810506c:	dbad      	blt.n	8104fca <usbd_open_edpt_pair+0x1e>
  }

  return true;
 810506e:	2301      	movs	r3, #1
}
 8105070:	4618      	mov	r0, r3
 8105072:	3728      	adds	r7, #40	; 0x28
 8105074:	46bd      	mov	sp, r7
 8105076:	bd80      	pop	{r7, pc}
 8105078:	e000edf0 	.word	0xe000edf0

0810507c <usbd_edpt_open>:
//--------------------------------------------------------------------+
// USBD Endpoint API
//--------------------------------------------------------------------+

bool usbd_edpt_open(uint8_t rhport, tusb_desc_endpoint_t const * desc_ep)
{
 810507c:	b580      	push	{r7, lr}
 810507e:	b086      	sub	sp, #24
 8105080:	af00      	add	r7, sp, #0
 8105082:	4603      	mov	r3, r0
 8105084:	6039      	str	r1, [r7, #0]
 8105086:	71fb      	strb	r3, [r7, #7]
  rhport = _usbd_rhport;
 8105088:	4b1b      	ldr	r3, [pc, #108]	; (81050f8 <usbd_edpt_open+0x7c>)
 810508a:	781b      	ldrb	r3, [r3, #0]
 810508c:	71fb      	strb	r3, [r7, #7]

  TU_ASSERT(tu_edpt_number(desc_ep->bEndpointAddress) < CFG_TUD_ENDPPOINT_MAX);
 810508e:	683b      	ldr	r3, [r7, #0]
 8105090:	789b      	ldrb	r3, [r3, #2]
 8105092:	73fb      	strb	r3, [r7, #15]
  return (uint8_t)(addr & (~TUSB_DIR_IN_MASK));
 8105094:	7bfb      	ldrb	r3, [r7, #15]
 8105096:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 810509a:	b2db      	uxtb	r3, r3
 810509c:	2b08      	cmp	r3, #8
 810509e:	d90a      	bls.n	81050b6 <usbd_edpt_open+0x3a>
 81050a0:	4b16      	ldr	r3, [pc, #88]	; (81050fc <usbd_edpt_open+0x80>)
 81050a2:	613b      	str	r3, [r7, #16]
 81050a4:	693b      	ldr	r3, [r7, #16]
 81050a6:	681b      	ldr	r3, [r3, #0]
 81050a8:	f003 0301 	and.w	r3, r3, #1
 81050ac:	2b00      	cmp	r3, #0
 81050ae:	d000      	beq.n	81050b2 <usbd_edpt_open+0x36>
 81050b0:	be00      	bkpt	0x0000
 81050b2:	2300      	movs	r3, #0
 81050b4:	e01c      	b.n	81050f0 <usbd_edpt_open+0x74>
  TU_ASSERT(tu_edpt_validate(desc_ep, (tusb_speed_t) _usbd_dev.speed));
 81050b6:	4b12      	ldr	r3, [pc, #72]	; (8105100 <usbd_edpt_open+0x84>)
 81050b8:	789b      	ldrb	r3, [r3, #2]
 81050ba:	4619      	mov	r1, r3
 81050bc:	6838      	ldr	r0, [r7, #0]
 81050be:	f002 f943 	bl	8107348 <tu_edpt_validate>
 81050c2:	4603      	mov	r3, r0
 81050c4:	f083 0301 	eor.w	r3, r3, #1
 81050c8:	b2db      	uxtb	r3, r3
 81050ca:	2b00      	cmp	r3, #0
 81050cc:	d00a      	beq.n	81050e4 <usbd_edpt_open+0x68>
 81050ce:	4b0b      	ldr	r3, [pc, #44]	; (81050fc <usbd_edpt_open+0x80>)
 81050d0:	617b      	str	r3, [r7, #20]
 81050d2:	697b      	ldr	r3, [r7, #20]
 81050d4:	681b      	ldr	r3, [r3, #0]
 81050d6:	f003 0301 	and.w	r3, r3, #1
 81050da:	2b00      	cmp	r3, #0
 81050dc:	d000      	beq.n	81050e0 <usbd_edpt_open+0x64>
 81050de:	be00      	bkpt	0x0000
 81050e0:	2300      	movs	r3, #0
 81050e2:	e005      	b.n	81050f0 <usbd_edpt_open+0x74>

  return dcd_edpt_open(rhport, desc_ep);
 81050e4:	79fb      	ldrb	r3, [r7, #7]
 81050e6:	6839      	ldr	r1, [r7, #0]
 81050e8:	4618      	mov	r0, r3
 81050ea:	f001 f88d 	bl	8106208 <dcd_edpt_open>
 81050ee:	4603      	mov	r3, r0
}
 81050f0:	4618      	mov	r0, r3
 81050f2:	3718      	adds	r7, #24
 81050f4:	46bd      	mov	sp, r7
 81050f6:	bd80      	pop	{r7, pc}
 81050f8:	1000001c 	.word	0x1000001c
 81050fc:	e000edf0 	.word	0xe000edf0
 8105100:	10000fa4 	.word	0x10000fa4

08105104 <usbd_edpt_claim>:

bool usbd_edpt_claim(uint8_t rhport, uint8_t ep_addr)
{
 8105104:	b580      	push	{r7, lr}
 8105106:	b086      	sub	sp, #24
 8105108:	af00      	add	r7, sp, #0
 810510a:	4603      	mov	r3, r0
 810510c:	460a      	mov	r2, r1
 810510e:	71fb      	strb	r3, [r7, #7]
 8105110:	4613      	mov	r3, r2
 8105112:	71bb      	strb	r3, [r7, #6]
 8105114:	79bb      	ldrb	r3, [r7, #6]
 8105116:	73bb      	strb	r3, [r7, #14]
 8105118:	7bbb      	ldrb	r3, [r7, #14]
 810511a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 810511e:	b2db      	uxtb	r3, r3
  (void) rhport;

  // TODO add this check later, also make sure we don't starve an out endpoint while suspending
  // TU_VERIFY(tud_ready());

  uint8_t const epnum       = tu_edpt_number(ep_addr);
 8105120:	75fb      	strb	r3, [r7, #23]
 8105122:	79bb      	ldrb	r3, [r7, #6]
 8105124:	73fb      	strb	r3, [r7, #15]
  return (addr & TUSB_DIR_IN_MASK) ? TUSB_DIR_IN : TUSB_DIR_OUT;
 8105126:	7bfb      	ldrb	r3, [r7, #15]
 8105128:	09db      	lsrs	r3, r3, #7
 810512a:	b2db      	uxtb	r3, r3
  uint8_t const dir         = tu_edpt_dir(ep_addr);
 810512c:	75bb      	strb	r3, [r7, #22]
  tu_edpt_state_t* ep_state = &_usbd_dev.ep_status[epnum][dir];
 810512e:	7dfa      	ldrb	r2, [r7, #23]
 8105130:	7dbb      	ldrb	r3, [r7, #22]
 8105132:	0052      	lsls	r2, r2, #1
 8105134:	4413      	add	r3, r2
 8105136:	3320      	adds	r3, #32
 8105138:	4a06      	ldr	r2, [pc, #24]	; (8105154 <usbd_edpt_claim+0x50>)
 810513a:	4413      	add	r3, r2
 810513c:	3305      	adds	r3, #5
 810513e:	613b      	str	r3, [r7, #16]

  return tu_edpt_claim(ep_state, _usbd_mutex);
 8105140:	2100      	movs	r1, #0
 8105142:	6938      	ldr	r0, [r7, #16]
 8105144:	f002 f89c 	bl	8107280 <tu_edpt_claim>
 8105148:	4603      	mov	r3, r0
}
 810514a:	4618      	mov	r0, r3
 810514c:	3718      	adds	r7, #24
 810514e:	46bd      	mov	sp, r7
 8105150:	bd80      	pop	{r7, pc}
 8105152:	bf00      	nop
 8105154:	10000fa4 	.word	0x10000fa4

08105158 <usbd_edpt_release>:

bool usbd_edpt_release(uint8_t rhport, uint8_t ep_addr)
{
 8105158:	b580      	push	{r7, lr}
 810515a:	b086      	sub	sp, #24
 810515c:	af00      	add	r7, sp, #0
 810515e:	4603      	mov	r3, r0
 8105160:	460a      	mov	r2, r1
 8105162:	71fb      	strb	r3, [r7, #7]
 8105164:	4613      	mov	r3, r2
 8105166:	71bb      	strb	r3, [r7, #6]
 8105168:	79bb      	ldrb	r3, [r7, #6]
 810516a:	73bb      	strb	r3, [r7, #14]
  return (uint8_t)(addr & (~TUSB_DIR_IN_MASK));
 810516c:	7bbb      	ldrb	r3, [r7, #14]
 810516e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8105172:	b2db      	uxtb	r3, r3
  (void) rhport;

  uint8_t const epnum       = tu_edpt_number(ep_addr);
 8105174:	75fb      	strb	r3, [r7, #23]
 8105176:	79bb      	ldrb	r3, [r7, #6]
 8105178:	73fb      	strb	r3, [r7, #15]
  return (addr & TUSB_DIR_IN_MASK) ? TUSB_DIR_IN : TUSB_DIR_OUT;
 810517a:	7bfb      	ldrb	r3, [r7, #15]
 810517c:	09db      	lsrs	r3, r3, #7
 810517e:	b2db      	uxtb	r3, r3
  uint8_t const dir         = tu_edpt_dir(ep_addr);
 8105180:	75bb      	strb	r3, [r7, #22]
  tu_edpt_state_t* ep_state = &_usbd_dev.ep_status[epnum][dir];
 8105182:	7dfa      	ldrb	r2, [r7, #23]
 8105184:	7dbb      	ldrb	r3, [r7, #22]
 8105186:	0052      	lsls	r2, r2, #1
 8105188:	4413      	add	r3, r2
 810518a:	3320      	adds	r3, #32
 810518c:	4a06      	ldr	r2, [pc, #24]	; (81051a8 <usbd_edpt_release+0x50>)
 810518e:	4413      	add	r3, r2
 8105190:	3305      	adds	r3, #5
 8105192:	613b      	str	r3, [r7, #16]

  return tu_edpt_release(ep_state, _usbd_mutex);
 8105194:	2100      	movs	r1, #0
 8105196:	6938      	ldr	r0, [r7, #16]
 8105198:	f002 f8ac 	bl	81072f4 <tu_edpt_release>
 810519c:	4603      	mov	r3, r0
}
 810519e:	4618      	mov	r0, r3
 81051a0:	3718      	adds	r7, #24
 81051a2:	46bd      	mov	sp, r7
 81051a4:	bd80      	pop	{r7, pc}
 81051a6:	bf00      	nop
 81051a8:	10000fa4 	.word	0x10000fa4

081051ac <usbd_edpt_xfer>:

bool usbd_edpt_xfer(uint8_t rhport, uint8_t ep_addr, uint8_t * buffer, uint16_t total_bytes)
{
 81051ac:	b580      	push	{r7, lr}
 81051ae:	b086      	sub	sp, #24
 81051b0:	af00      	add	r7, sp, #0
 81051b2:	603a      	str	r2, [r7, #0]
 81051b4:	461a      	mov	r2, r3
 81051b6:	4603      	mov	r3, r0
 81051b8:	71fb      	strb	r3, [r7, #7]
 81051ba:	460b      	mov	r3, r1
 81051bc:	71bb      	strb	r3, [r7, #6]
 81051be:	4613      	mov	r3, r2
 81051c0:	80bb      	strh	r3, [r7, #4]
  rhport = _usbd_rhport;
 81051c2:	4b32      	ldr	r3, [pc, #200]	; (810528c <usbd_edpt_xfer+0xe0>)
 81051c4:	781b      	ldrb	r3, [r3, #0]
 81051c6:	71fb      	strb	r3, [r7, #7]
 81051c8:	79bb      	ldrb	r3, [r7, #6]
 81051ca:	72bb      	strb	r3, [r7, #10]
  return (uint8_t)(addr & (~TUSB_DIR_IN_MASK));
 81051cc:	7abb      	ldrb	r3, [r7, #10]
 81051ce:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 81051d2:	b2db      	uxtb	r3, r3

  uint8_t const epnum = tu_edpt_number(ep_addr);
 81051d4:	75fb      	strb	r3, [r7, #23]
 81051d6:	79bb      	ldrb	r3, [r7, #6]
 81051d8:	72fb      	strb	r3, [r7, #11]
  return (addr & TUSB_DIR_IN_MASK) ? TUSB_DIR_IN : TUSB_DIR_OUT;
 81051da:	7afb      	ldrb	r3, [r7, #11]
 81051dc:	09db      	lsrs	r3, r3, #7
 81051de:	b2db      	uxtb	r3, r3
  uint8_t const dir   = tu_edpt_dir(ep_addr);
 81051e0:	75bb      	strb	r3, [r7, #22]
  // TU_VERIFY(tud_ready());

  TU_LOG_USBD("  Queue EP %02X with %u bytes ...\r\n", ep_addr, total_bytes);

  // Attempt to transfer on a busy endpoint, sound like an race condition !
  TU_ASSERT(_usbd_dev.ep_status[epnum][dir].busy == 0);
 81051e2:	7dfa      	ldrb	r2, [r7, #23]
 81051e4:	7dbb      	ldrb	r3, [r7, #22]
 81051e6:	492a      	ldr	r1, [pc, #168]	; (8105290 <usbd_edpt_xfer+0xe4>)
 81051e8:	0052      	lsls	r2, r2, #1
 81051ea:	440a      	add	r2, r1
 81051ec:	4413      	add	r3, r2
 81051ee:	3320      	adds	r3, #32
 81051f0:	795b      	ldrb	r3, [r3, #5]
 81051f2:	f3c3 0300 	ubfx	r3, r3, #0, #1
 81051f6:	b2db      	uxtb	r3, r3
 81051f8:	2b00      	cmp	r3, #0
 81051fa:	d00a      	beq.n	8105212 <usbd_edpt_xfer+0x66>
 81051fc:	4b25      	ldr	r3, [pc, #148]	; (8105294 <usbd_edpt_xfer+0xe8>)
 81051fe:	60fb      	str	r3, [r7, #12]
 8105200:	68fb      	ldr	r3, [r7, #12]
 8105202:	681b      	ldr	r3, [r3, #0]
 8105204:	f003 0301 	and.w	r3, r3, #1
 8105208:	2b00      	cmp	r3, #0
 810520a:	d000      	beq.n	810520e <usbd_edpt_xfer+0x62>
 810520c:	be00      	bkpt	0x0000
 810520e:	2300      	movs	r3, #0
 8105210:	e038      	b.n	8105284 <usbd_edpt_xfer+0xd8>

  // Set busy first since the actual transfer can be complete before dcd_edpt_xfer()
  // could return and USBD task can preempt and clear the busy
  _usbd_dev.ep_status[epnum][dir].busy = 1;
 8105212:	7dfa      	ldrb	r2, [r7, #23]
 8105214:	7dbb      	ldrb	r3, [r7, #22]
 8105216:	491e      	ldr	r1, [pc, #120]	; (8105290 <usbd_edpt_xfer+0xe4>)
 8105218:	0052      	lsls	r2, r2, #1
 810521a:	440a      	add	r2, r1
 810521c:	4413      	add	r3, r2
 810521e:	f103 0220 	add.w	r2, r3, #32
 8105222:	7953      	ldrb	r3, [r2, #5]
 8105224:	f043 0301 	orr.w	r3, r3, #1
 8105228:	7153      	strb	r3, [r2, #5]

  if ( dcd_edpt_xfer(rhport, ep_addr, buffer, total_bytes) )
 810522a:	88bb      	ldrh	r3, [r7, #4]
 810522c:	79b9      	ldrb	r1, [r7, #6]
 810522e:	79f8      	ldrb	r0, [r7, #7]
 8105230:	683a      	ldr	r2, [r7, #0]
 8105232:	f001 f973 	bl	810651c <dcd_edpt_xfer>
 8105236:	4603      	mov	r3, r0
 8105238:	2b00      	cmp	r3, #0
 810523a:	d001      	beq.n	8105240 <usbd_edpt_xfer+0x94>
  {
    return true;
 810523c:	2301      	movs	r3, #1
 810523e:	e021      	b.n	8105284 <usbd_edpt_xfer+0xd8>
  }else
  {
    // DCD error, mark endpoint as ready to allow next transfer
    _usbd_dev.ep_status[epnum][dir].busy = 0;
 8105240:	7dfa      	ldrb	r2, [r7, #23]
 8105242:	7dbb      	ldrb	r3, [r7, #22]
 8105244:	4912      	ldr	r1, [pc, #72]	; (8105290 <usbd_edpt_xfer+0xe4>)
 8105246:	0052      	lsls	r2, r2, #1
 8105248:	440a      	add	r2, r1
 810524a:	4413      	add	r3, r2
 810524c:	f103 0220 	add.w	r2, r3, #32
 8105250:	7953      	ldrb	r3, [r2, #5]
 8105252:	f36f 0300 	bfc	r3, #0, #1
 8105256:	7153      	strb	r3, [r2, #5]
    _usbd_dev.ep_status[epnum][dir].claimed = 0;
 8105258:	7dfa      	ldrb	r2, [r7, #23]
 810525a:	7dbb      	ldrb	r3, [r7, #22]
 810525c:	490c      	ldr	r1, [pc, #48]	; (8105290 <usbd_edpt_xfer+0xe4>)
 810525e:	0052      	lsls	r2, r2, #1
 8105260:	440a      	add	r2, r1
 8105262:	4413      	add	r3, r2
 8105264:	f103 0220 	add.w	r2, r3, #32
 8105268:	7953      	ldrb	r3, [r2, #5]
 810526a:	f36f 0382 	bfc	r3, #2, #1
 810526e:	7153      	strb	r3, [r2, #5]
    TU_LOG_USBD("FAILED\r\n");
    TU_BREAKPOINT();
 8105270:	4b08      	ldr	r3, [pc, #32]	; (8105294 <usbd_edpt_xfer+0xe8>)
 8105272:	613b      	str	r3, [r7, #16]
 8105274:	693b      	ldr	r3, [r7, #16]
 8105276:	681b      	ldr	r3, [r3, #0]
 8105278:	f003 0301 	and.w	r3, r3, #1
 810527c:	2b00      	cmp	r3, #0
 810527e:	d000      	beq.n	8105282 <usbd_edpt_xfer+0xd6>
 8105280:	be00      	bkpt	0x0000
    return false;
 8105282:	2300      	movs	r3, #0
  }
}
 8105284:	4618      	mov	r0, r3
 8105286:	3718      	adds	r7, #24
 8105288:	46bd      	mov	sp, r7
 810528a:	bd80      	pop	{r7, pc}
 810528c:	1000001c 	.word	0x1000001c
 8105290:	10000fa4 	.word	0x10000fa4
 8105294:	e000edf0 	.word	0xe000edf0

08105298 <usbd_edpt_stall>:

  return _usbd_dev.ep_status[epnum][dir].busy;
}

void usbd_edpt_stall(uint8_t rhport, uint8_t ep_addr)
{
 8105298:	b580      	push	{r7, lr}
 810529a:	b084      	sub	sp, #16
 810529c:	af00      	add	r7, sp, #0
 810529e:	4603      	mov	r3, r0
 81052a0:	460a      	mov	r2, r1
 81052a2:	71fb      	strb	r3, [r7, #7]
 81052a4:	4613      	mov	r3, r2
 81052a6:	71bb      	strb	r3, [r7, #6]
  rhport = _usbd_rhport;
 81052a8:	4b1f      	ldr	r3, [pc, #124]	; (8105328 <usbd_edpt_stall+0x90>)
 81052aa:	781b      	ldrb	r3, [r3, #0]
 81052ac:	71fb      	strb	r3, [r7, #7]
 81052ae:	79bb      	ldrb	r3, [r7, #6]
 81052b0:	733b      	strb	r3, [r7, #12]
  return (uint8_t)(addr & (~TUSB_DIR_IN_MASK));
 81052b2:	7b3b      	ldrb	r3, [r7, #12]
 81052b4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 81052b8:	b2db      	uxtb	r3, r3

  uint8_t const epnum = tu_edpt_number(ep_addr);
 81052ba:	73fb      	strb	r3, [r7, #15]
 81052bc:	79bb      	ldrb	r3, [r7, #6]
 81052be:	737b      	strb	r3, [r7, #13]
  return (addr & TUSB_DIR_IN_MASK) ? TUSB_DIR_IN : TUSB_DIR_OUT;
 81052c0:	7b7b      	ldrb	r3, [r7, #13]
 81052c2:	09db      	lsrs	r3, r3, #7
 81052c4:	b2db      	uxtb	r3, r3
  uint8_t const dir   = tu_edpt_dir(ep_addr);
 81052c6:	73bb      	strb	r3, [r7, #14]

  // only stalled if currently cleared
  if ( !_usbd_dev.ep_status[epnum][dir].stalled )
 81052c8:	7bfa      	ldrb	r2, [r7, #15]
 81052ca:	7bbb      	ldrb	r3, [r7, #14]
 81052cc:	4917      	ldr	r1, [pc, #92]	; (810532c <usbd_edpt_stall+0x94>)
 81052ce:	0052      	lsls	r2, r2, #1
 81052d0:	440a      	add	r2, r1
 81052d2:	4413      	add	r3, r2
 81052d4:	3320      	adds	r3, #32
 81052d6:	795b      	ldrb	r3, [r3, #5]
 81052d8:	f3c3 0340 	ubfx	r3, r3, #1, #1
 81052dc:	b2db      	uxtb	r3, r3
 81052de:	2b00      	cmp	r3, #0
 81052e0:	d11d      	bne.n	810531e <usbd_edpt_stall+0x86>
  {
    TU_LOG_USBD("    Stall EP %02X\r\n", ep_addr);
    dcd_edpt_stall(rhport, ep_addr);
 81052e2:	79ba      	ldrb	r2, [r7, #6]
 81052e4:	79fb      	ldrb	r3, [r7, #7]
 81052e6:	4611      	mov	r1, r2
 81052e8:	4618      	mov	r0, r3
 81052ea:	f001 fa6b 	bl	81067c4 <dcd_edpt_stall>
    _usbd_dev.ep_status[epnum][dir].stalled = 1;
 81052ee:	7bfa      	ldrb	r2, [r7, #15]
 81052f0:	7bbb      	ldrb	r3, [r7, #14]
 81052f2:	490e      	ldr	r1, [pc, #56]	; (810532c <usbd_edpt_stall+0x94>)
 81052f4:	0052      	lsls	r2, r2, #1
 81052f6:	440a      	add	r2, r1
 81052f8:	4413      	add	r3, r2
 81052fa:	f103 0220 	add.w	r2, r3, #32
 81052fe:	7953      	ldrb	r3, [r2, #5]
 8105300:	f043 0302 	orr.w	r3, r3, #2
 8105304:	7153      	strb	r3, [r2, #5]
    _usbd_dev.ep_status[epnum][dir].busy = 1;
 8105306:	7bfa      	ldrb	r2, [r7, #15]
 8105308:	7bbb      	ldrb	r3, [r7, #14]
 810530a:	4908      	ldr	r1, [pc, #32]	; (810532c <usbd_edpt_stall+0x94>)
 810530c:	0052      	lsls	r2, r2, #1
 810530e:	440a      	add	r2, r1
 8105310:	4413      	add	r3, r2
 8105312:	f103 0220 	add.w	r2, r3, #32
 8105316:	7953      	ldrb	r3, [r2, #5]
 8105318:	f043 0301 	orr.w	r3, r3, #1
 810531c:	7153      	strb	r3, [r2, #5]
  }
}
 810531e:	bf00      	nop
 8105320:	3710      	adds	r7, #16
 8105322:	46bd      	mov	sp, r7
 8105324:	bd80      	pop	{r7, pc}
 8105326:	bf00      	nop
 8105328:	1000001c 	.word	0x1000001c
 810532c:	10000fa4 	.word	0x10000fa4

08105330 <usbd_edpt_clear_stall>:

void usbd_edpt_clear_stall(uint8_t rhport, uint8_t ep_addr)
{
 8105330:	b580      	push	{r7, lr}
 8105332:	b084      	sub	sp, #16
 8105334:	af00      	add	r7, sp, #0
 8105336:	4603      	mov	r3, r0
 8105338:	460a      	mov	r2, r1
 810533a:	71fb      	strb	r3, [r7, #7]
 810533c:	4613      	mov	r3, r2
 810533e:	71bb      	strb	r3, [r7, #6]
  rhport = _usbd_rhport;
 8105340:	4b1f      	ldr	r3, [pc, #124]	; (81053c0 <usbd_edpt_clear_stall+0x90>)
 8105342:	781b      	ldrb	r3, [r3, #0]
 8105344:	71fb      	strb	r3, [r7, #7]
 8105346:	79bb      	ldrb	r3, [r7, #6]
 8105348:	733b      	strb	r3, [r7, #12]
  return (uint8_t)(addr & (~TUSB_DIR_IN_MASK));
 810534a:	7b3b      	ldrb	r3, [r7, #12]
 810534c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8105350:	b2db      	uxtb	r3, r3

  uint8_t const epnum = tu_edpt_number(ep_addr);
 8105352:	73fb      	strb	r3, [r7, #15]
 8105354:	79bb      	ldrb	r3, [r7, #6]
 8105356:	737b      	strb	r3, [r7, #13]
  return (addr & TUSB_DIR_IN_MASK) ? TUSB_DIR_IN : TUSB_DIR_OUT;
 8105358:	7b7b      	ldrb	r3, [r7, #13]
 810535a:	09db      	lsrs	r3, r3, #7
 810535c:	b2db      	uxtb	r3, r3
  uint8_t const dir   = tu_edpt_dir(ep_addr);
 810535e:	73bb      	strb	r3, [r7, #14]

  // only clear if currently stalled
  if ( _usbd_dev.ep_status[epnum][dir].stalled )
 8105360:	7bfa      	ldrb	r2, [r7, #15]
 8105362:	7bbb      	ldrb	r3, [r7, #14]
 8105364:	4917      	ldr	r1, [pc, #92]	; (81053c4 <usbd_edpt_clear_stall+0x94>)
 8105366:	0052      	lsls	r2, r2, #1
 8105368:	440a      	add	r2, r1
 810536a:	4413      	add	r3, r2
 810536c:	3320      	adds	r3, #32
 810536e:	795b      	ldrb	r3, [r3, #5]
 8105370:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8105374:	b2db      	uxtb	r3, r3
 8105376:	2b00      	cmp	r3, #0
 8105378:	d01d      	beq.n	81053b6 <usbd_edpt_clear_stall+0x86>
  {
    TU_LOG_USBD("    Clear Stall EP %02X\r\n", ep_addr);
    dcd_edpt_clear_stall(rhport, ep_addr);
 810537a:	79ba      	ldrb	r2, [r7, #6]
 810537c:	79fb      	ldrb	r3, [r7, #7]
 810537e:	4611      	mov	r1, r2
 8105380:	4618      	mov	r0, r3
 8105382:	f001 fa31 	bl	81067e8 <dcd_edpt_clear_stall>
    _usbd_dev.ep_status[epnum][dir].stalled = 0;
 8105386:	7bfa      	ldrb	r2, [r7, #15]
 8105388:	7bbb      	ldrb	r3, [r7, #14]
 810538a:	490e      	ldr	r1, [pc, #56]	; (81053c4 <usbd_edpt_clear_stall+0x94>)
 810538c:	0052      	lsls	r2, r2, #1
 810538e:	440a      	add	r2, r1
 8105390:	4413      	add	r3, r2
 8105392:	f103 0220 	add.w	r2, r3, #32
 8105396:	7953      	ldrb	r3, [r2, #5]
 8105398:	f36f 0341 	bfc	r3, #1, #1
 810539c:	7153      	strb	r3, [r2, #5]
    _usbd_dev.ep_status[epnum][dir].busy = 0;
 810539e:	7bfa      	ldrb	r2, [r7, #15]
 81053a0:	7bbb      	ldrb	r3, [r7, #14]
 81053a2:	4908      	ldr	r1, [pc, #32]	; (81053c4 <usbd_edpt_clear_stall+0x94>)
 81053a4:	0052      	lsls	r2, r2, #1
 81053a6:	440a      	add	r2, r1
 81053a8:	4413      	add	r3, r2
 81053aa:	f103 0220 	add.w	r2, r3, #32
 81053ae:	7953      	ldrb	r3, [r2, #5]
 81053b0:	f36f 0300 	bfc	r3, #0, #1
 81053b4:	7153      	strb	r3, [r2, #5]
  }
}
 81053b6:	bf00      	nop
 81053b8:	3710      	adds	r7, #16
 81053ba:	46bd      	mov	sp, r7
 81053bc:	bd80      	pop	{r7, pc}
 81053be:	bf00      	nop
 81053c0:	1000001c 	.word	0x1000001c
 81053c4:	10000fa4 	.word	0x10000fa4

081053c8 <usbd_edpt_stalled>:

bool usbd_edpt_stalled(uint8_t rhport, uint8_t ep_addr)
{
 81053c8:	b480      	push	{r7}
 81053ca:	b085      	sub	sp, #20
 81053cc:	af00      	add	r7, sp, #0
 81053ce:	4603      	mov	r3, r0
 81053d0:	460a      	mov	r2, r1
 81053d2:	71fb      	strb	r3, [r7, #7]
 81053d4:	4613      	mov	r3, r2
 81053d6:	71bb      	strb	r3, [r7, #6]
 81053d8:	79bb      	ldrb	r3, [r7, #6]
 81053da:	733b      	strb	r3, [r7, #12]
  return (uint8_t)(addr & (~TUSB_DIR_IN_MASK));
 81053dc:	7b3b      	ldrb	r3, [r7, #12]
 81053de:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 81053e2:	b2db      	uxtb	r3, r3
  (void) rhport;

  uint8_t const epnum = tu_edpt_number(ep_addr);
 81053e4:	73fb      	strb	r3, [r7, #15]
 81053e6:	79bb      	ldrb	r3, [r7, #6]
 81053e8:	737b      	strb	r3, [r7, #13]
  return (addr & TUSB_DIR_IN_MASK) ? TUSB_DIR_IN : TUSB_DIR_OUT;
 81053ea:	7b7b      	ldrb	r3, [r7, #13]
 81053ec:	09db      	lsrs	r3, r3, #7
 81053ee:	b2db      	uxtb	r3, r3
  uint8_t const dir   = tu_edpt_dir(ep_addr);
 81053f0:	73bb      	strb	r3, [r7, #14]

  return _usbd_dev.ep_status[epnum][dir].stalled;
 81053f2:	7bfa      	ldrb	r2, [r7, #15]
 81053f4:	7bbb      	ldrb	r3, [r7, #14]
 81053f6:	490a      	ldr	r1, [pc, #40]	; (8105420 <usbd_edpt_stalled+0x58>)
 81053f8:	0052      	lsls	r2, r2, #1
 81053fa:	440a      	add	r2, r1
 81053fc:	4413      	add	r3, r2
 81053fe:	3320      	adds	r3, #32
 8105400:	795b      	ldrb	r3, [r3, #5]
 8105402:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8105406:	b2db      	uxtb	r3, r3
 8105408:	2b00      	cmp	r3, #0
 810540a:	bf14      	ite	ne
 810540c:	2301      	movne	r3, #1
 810540e:	2300      	moveq	r3, #0
 8105410:	b2db      	uxtb	r3, r3
}
 8105412:	4618      	mov	r0, r3
 8105414:	3714      	adds	r7, #20
 8105416:	46bd      	mov	sp, r7
 8105418:	f85d 7b04 	ldr.w	r7, [sp], #4
 810541c:	4770      	bx	lr
 810541e:	bf00      	nop
 8105420:	10000fa4 	.word	0x10000fa4

08105424 <dcd_edpt0_status_complete>:
#include "device/usbd_pvt.h"

//--------------------------------------------------------------------+
// Callback weak stubs (called if application does not provide)
//--------------------------------------------------------------------+
TU_ATTR_WEAK void dcd_edpt0_status_complete(uint8_t rhport, tusb_control_request_t const* request) {
 8105424:	b480      	push	{r7}
 8105426:	b083      	sub	sp, #12
 8105428:	af00      	add	r7, sp, #0
 810542a:	4603      	mov	r3, r0
 810542c:	6039      	str	r1, [r7, #0]
 810542e:	71fb      	strb	r3, [r7, #7]
  (void) rhport;
  (void) request;
}
 8105430:	bf00      	nop
 8105432:	370c      	adds	r7, #12
 8105434:	46bd      	mov	sp, r7
 8105436:	f85d 7b04 	ldr.w	r7, [sp], #4
 810543a:	4770      	bx	lr

0810543c <_status_stage_xact>:
//--------------------------------------------------------------------+
// Application API
//--------------------------------------------------------------------+

// Queue ZLP status transaction
static inline bool _status_stage_xact(uint8_t rhport, tusb_control_request_t const* request) {
 810543c:	b580      	push	{r7, lr}
 810543e:	b084      	sub	sp, #16
 8105440:	af00      	add	r7, sp, #0
 8105442:	4603      	mov	r3, r0
 8105444:	6039      	str	r1, [r7, #0]
 8105446:	71fb      	strb	r3, [r7, #7]
  // Opposite to endpoint in Data Phase
  uint8_t const ep_addr = request->bmRequestType_bit.direction ? EDPT_CTRL_OUT : EDPT_CTRL_IN;
 8105448:	683b      	ldr	r3, [r7, #0]
 810544a:	781b      	ldrb	r3, [r3, #0]
 810544c:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8105450:	b2db      	uxtb	r3, r3
 8105452:	2b00      	cmp	r3, #0
 8105454:	d001      	beq.n	810545a <_status_stage_xact+0x1e>
 8105456:	2300      	movs	r3, #0
 8105458:	e000      	b.n	810545c <_status_stage_xact+0x20>
 810545a:	2380      	movs	r3, #128	; 0x80
 810545c:	73fb      	strb	r3, [r7, #15]
  return usbd_edpt_xfer(rhport, ep_addr, NULL, 0);
 810545e:	7bf9      	ldrb	r1, [r7, #15]
 8105460:	79f8      	ldrb	r0, [r7, #7]
 8105462:	2300      	movs	r3, #0
 8105464:	2200      	movs	r2, #0
 8105466:	f7ff fea1 	bl	81051ac <usbd_edpt_xfer>
 810546a:	4603      	mov	r3, r0
}
 810546c:	4618      	mov	r0, r3
 810546e:	3710      	adds	r7, #16
 8105470:	46bd      	mov	sp, r7
 8105472:	bd80      	pop	{r7, pc}

08105474 <tud_control_status>:

// Status phase
bool tud_control_status(uint8_t rhport, tusb_control_request_t const* request) {
 8105474:	b580      	push	{r7, lr}
 8105476:	b082      	sub	sp, #8
 8105478:	af00      	add	r7, sp, #0
 810547a:	4603      	mov	r3, r0
 810547c:	6039      	str	r1, [r7, #0]
 810547e:	71fb      	strb	r3, [r7, #7]
  _ctrl_xfer.request = (*request);
 8105480:	4b0b      	ldr	r3, [pc, #44]	; (81054b0 <tud_control_status+0x3c>)
 8105482:	683a      	ldr	r2, [r7, #0]
 8105484:	6810      	ldr	r0, [r2, #0]
 8105486:	6851      	ldr	r1, [r2, #4]
 8105488:	c303      	stmia	r3!, {r0, r1}
  _ctrl_xfer.buffer = NULL;
 810548a:	4b09      	ldr	r3, [pc, #36]	; (81054b0 <tud_control_status+0x3c>)
 810548c:	2200      	movs	r2, #0
 810548e:	609a      	str	r2, [r3, #8]
  _ctrl_xfer.total_xferred = 0;
 8105490:	4b07      	ldr	r3, [pc, #28]	; (81054b0 <tud_control_status+0x3c>)
 8105492:	2200      	movs	r2, #0
 8105494:	81da      	strh	r2, [r3, #14]
  _ctrl_xfer.data_len = 0;
 8105496:	4b06      	ldr	r3, [pc, #24]	; (81054b0 <tud_control_status+0x3c>)
 8105498:	2200      	movs	r2, #0
 810549a:	819a      	strh	r2, [r3, #12]

  return _status_stage_xact(rhport, request);
 810549c:	79fb      	ldrb	r3, [r7, #7]
 810549e:	6839      	ldr	r1, [r7, #0]
 81054a0:	4618      	mov	r0, r3
 81054a2:	f7ff ffcb 	bl	810543c <_status_stage_xact>
 81054a6:	4603      	mov	r3, r0
}
 81054a8:	4618      	mov	r0, r3
 81054aa:	3708      	adds	r7, #8
 81054ac:	46bd      	mov	sp, r7
 81054ae:	bd80      	pop	{r7, pc}
 81054b0:	100010a8 	.word	0x100010a8

081054b4 <_data_stage_xact>:

// Queue a transaction in Data Stage
// Each transaction has up to Endpoint0's max packet size.
// This function can also transfer an zero-length packet
static bool _data_stage_xact(uint8_t rhport) {
 81054b4:	b580      	push	{r7, lr}
 81054b6:	b088      	sub	sp, #32
 81054b8:	af00      	add	r7, sp, #0
 81054ba:	4603      	mov	r3, r0
 81054bc:	71fb      	strb	r3, [r7, #7]
  uint16_t const xact_len = tu_min16(_ctrl_xfer.data_len - _ctrl_xfer.total_xferred,
 81054be:	4b24      	ldr	r3, [pc, #144]	; (8105550 <_data_stage_xact+0x9c>)
 81054c0:	899a      	ldrh	r2, [r3, #12]
 81054c2:	4b23      	ldr	r3, [pc, #140]	; (8105550 <_data_stage_xact+0x9c>)
 81054c4:	89db      	ldrh	r3, [r3, #14]
 81054c6:	1ad3      	subs	r3, r2, r3
 81054c8:	b29b      	uxth	r3, r3
 81054ca:	837b      	strh	r3, [r7, #26]
 81054cc:	2340      	movs	r3, #64	; 0x40
 81054ce:	833b      	strh	r3, [r7, #24]
TU_ATTR_ALWAYS_INLINE static inline uint16_t tu_min16 (uint16_t x, uint16_t y) { return (x < y) ? x : y; }
 81054d0:	8b7a      	ldrh	r2, [r7, #26]
 81054d2:	8b3b      	ldrh	r3, [r7, #24]
 81054d4:	4293      	cmp	r3, r2
 81054d6:	bf28      	it	cs
 81054d8:	4613      	movcs	r3, r2
 81054da:	b29b      	uxth	r3, r3
 81054dc:	83bb      	strh	r3, [r7, #28]
                                     CFG_TUD_ENDPOINT0_SIZE);

  uint8_t ep_addr = EDPT_CTRL_OUT;
 81054de:	2300      	movs	r3, #0
 81054e0:	77fb      	strb	r3, [r7, #31]

  if (_ctrl_xfer.request.bmRequestType_bit.direction == TUSB_DIR_IN) {
 81054e2:	4b1b      	ldr	r3, [pc, #108]	; (8105550 <_data_stage_xact+0x9c>)
 81054e4:	781b      	ldrb	r3, [r3, #0]
 81054e6:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 81054ea:	b2db      	uxtb	r3, r3
 81054ec:	2b00      	cmp	r3, #0
 81054ee:	d01e      	beq.n	810552e <_data_stage_xact+0x7a>
    ep_addr = EDPT_CTRL_IN;
 81054f0:	2380      	movs	r3, #128	; 0x80
 81054f2:	77fb      	strb	r3, [r7, #31]
    if (xact_len) {
 81054f4:	8bbb      	ldrh	r3, [r7, #28]
 81054f6:	2b00      	cmp	r3, #0
 81054f8:	d019      	beq.n	810552e <_data_stage_xact+0x7a>
      TU_VERIFY(0 == tu_memcpy_s(_usbd_ctrl_buf, CFG_TUD_ENDPOINT0_SIZE, _ctrl_xfer.buffer, xact_len));
 81054fa:	4b15      	ldr	r3, [pc, #84]	; (8105550 <_data_stage_xact+0x9c>)
 81054fc:	689a      	ldr	r2, [r3, #8]
 81054fe:	8bbb      	ldrh	r3, [r7, #28]
 8105500:	4914      	ldr	r1, [pc, #80]	; (8105554 <_data_stage_xact+0xa0>)
 8105502:	6179      	str	r1, [r7, #20]
 8105504:	2140      	movs	r1, #64	; 0x40
 8105506:	6139      	str	r1, [r7, #16]
 8105508:	60fa      	str	r2, [r7, #12]
 810550a:	60bb      	str	r3, [r7, #8]
  if ( count > destsz ) {
 810550c:	693a      	ldr	r2, [r7, #16]
 810550e:	68bb      	ldr	r3, [r7, #8]
 8105510:	429a      	cmp	r2, r3
 8105512:	d202      	bcs.n	810551a <_data_stage_xact+0x66>
    return -1;
 8105514:	f04f 33ff 	mov.w	r3, #4294967295
 8105518:	e005      	b.n	8105526 <_data_stage_xact+0x72>
  memcpy(dest, src, count);
 810551a:	68ba      	ldr	r2, [r7, #8]
 810551c:	68f9      	ldr	r1, [r7, #12]
 810551e:	6978      	ldr	r0, [r7, #20]
 8105520:	f00c fc48 	bl	8111db4 <memcpy>
  return 0;
 8105524:	2300      	movs	r3, #0
 8105526:	2b00      	cmp	r3, #0
 8105528:	d001      	beq.n	810552e <_data_stage_xact+0x7a>
 810552a:	2300      	movs	r3, #0
 810552c:	e00b      	b.n	8105546 <_data_stage_xact+0x92>
    }
  }

  return usbd_edpt_xfer(rhport, ep_addr, xact_len ? _usbd_ctrl_buf : NULL, xact_len);
 810552e:	8bbb      	ldrh	r3, [r7, #28]
 8105530:	2b00      	cmp	r3, #0
 8105532:	d001      	beq.n	8105538 <_data_stage_xact+0x84>
 8105534:	4a07      	ldr	r2, [pc, #28]	; (8105554 <_data_stage_xact+0xa0>)
 8105536:	e000      	b.n	810553a <_data_stage_xact+0x86>
 8105538:	2200      	movs	r2, #0
 810553a:	8bbb      	ldrh	r3, [r7, #28]
 810553c:	7ff9      	ldrb	r1, [r7, #31]
 810553e:	79f8      	ldrb	r0, [r7, #7]
 8105540:	f7ff fe34 	bl	81051ac <usbd_edpt_xfer>
 8105544:	4603      	mov	r3, r0
}
 8105546:	4618      	mov	r0, r3
 8105548:	3720      	adds	r7, #32
 810554a:	46bd      	mov	sp, r7
 810554c:	bd80      	pop	{r7, pc}
 810554e:	bf00      	nop
 8105550:	100010a8 	.word	0x100010a8
 8105554:	100010bc 	.word	0x100010bc

08105558 <tud_control_xfer>:

// Transmit data to/from the control endpoint.
// If the request's wLength is zero, a status packet is sent instead.
bool tud_control_xfer(uint8_t rhport, tusb_control_request_t const* request, void* buffer, uint16_t len) {
 8105558:	b580      	push	{r7, lr}
 810555a:	b088      	sub	sp, #32
 810555c:	af00      	add	r7, sp, #0
 810555e:	60b9      	str	r1, [r7, #8]
 8105560:	607a      	str	r2, [r7, #4]
 8105562:	461a      	mov	r2, r3
 8105564:	4603      	mov	r3, r0
 8105566:	73fb      	strb	r3, [r7, #15]
 8105568:	4613      	mov	r3, r2
 810556a:	81bb      	strh	r3, [r7, #12]
  _ctrl_xfer.request = (*request);
 810556c:	4b30      	ldr	r3, [pc, #192]	; (8105630 <tud_control_xfer+0xd8>)
 810556e:	68ba      	ldr	r2, [r7, #8]
 8105570:	6810      	ldr	r0, [r2, #0]
 8105572:	6851      	ldr	r1, [r2, #4]
 8105574:	c303      	stmia	r3!, {r0, r1}
  _ctrl_xfer.buffer = (uint8_t*) buffer;
 8105576:	4a2e      	ldr	r2, [pc, #184]	; (8105630 <tud_control_xfer+0xd8>)
 8105578:	687b      	ldr	r3, [r7, #4]
 810557a:	6093      	str	r3, [r2, #8]
  _ctrl_xfer.total_xferred = 0U;
 810557c:	4b2c      	ldr	r3, [pc, #176]	; (8105630 <tud_control_xfer+0xd8>)
 810557e:	2200      	movs	r2, #0
 8105580:	81da      	strh	r2, [r3, #14]
  _ctrl_xfer.data_len = tu_min16(len, request->wLength);
 8105582:	68bb      	ldr	r3, [r7, #8]
 8105584:	88db      	ldrh	r3, [r3, #6]
 8105586:	b29a      	uxth	r2, r3
 8105588:	89bb      	ldrh	r3, [r7, #12]
 810558a:	827b      	strh	r3, [r7, #18]
 810558c:	4613      	mov	r3, r2
 810558e:	823b      	strh	r3, [r7, #16]
TU_ATTR_ALWAYS_INLINE static inline uint16_t tu_min16 (uint16_t x, uint16_t y) { return (x < y) ? x : y; }
 8105590:	8a7a      	ldrh	r2, [r7, #18]
 8105592:	8a3b      	ldrh	r3, [r7, #16]
 8105594:	4293      	cmp	r3, r2
 8105596:	bf28      	it	cs
 8105598:	4613      	movcs	r3, r2
 810559a:	b29a      	uxth	r2, r3
 810559c:	4b24      	ldr	r3, [pc, #144]	; (8105630 <tud_control_xfer+0xd8>)
 810559e:	819a      	strh	r2, [r3, #12]

  if (request->wLength > 0U) {
 81055a0:	68bb      	ldr	r3, [r7, #8]
 81055a2:	88db      	ldrh	r3, [r3, #6]
 81055a4:	b29b      	uxth	r3, r3
 81055a6:	2b00      	cmp	r3, #0
 81055a8:	d026      	beq.n	81055f8 <tud_control_xfer+0xa0>
    if (_ctrl_xfer.data_len > 0U) {
 81055aa:	4b21      	ldr	r3, [pc, #132]	; (8105630 <tud_control_xfer+0xd8>)
 81055ac:	899b      	ldrh	r3, [r3, #12]
 81055ae:	2b00      	cmp	r3, #0
 81055b0:	d00d      	beq.n	81055ce <tud_control_xfer+0x76>
      TU_ASSERT(buffer);
 81055b2:	687b      	ldr	r3, [r7, #4]
 81055b4:	2b00      	cmp	r3, #0
 81055b6:	d10a      	bne.n	81055ce <tud_control_xfer+0x76>
 81055b8:	4b1e      	ldr	r3, [pc, #120]	; (8105634 <tud_control_xfer+0xdc>)
 81055ba:	61bb      	str	r3, [r7, #24]
 81055bc:	69bb      	ldr	r3, [r7, #24]
 81055be:	681b      	ldr	r3, [r3, #0]
 81055c0:	f003 0301 	and.w	r3, r3, #1
 81055c4:	2b00      	cmp	r3, #0
 81055c6:	d000      	beq.n	81055ca <tud_control_xfer+0x72>
 81055c8:	be00      	bkpt	0x0000
 81055ca:	2300      	movs	r3, #0
 81055cc:	e02b      	b.n	8105626 <tud_control_xfer+0xce>
    }

//    TU_LOG2("  Control total data length is %u bytes\r\n", _ctrl_xfer.data_len);

    // Data stage
    TU_ASSERT(_data_stage_xact(rhport));
 81055ce:	7bfb      	ldrb	r3, [r7, #15]
 81055d0:	4618      	mov	r0, r3
 81055d2:	f7ff ff6f 	bl	81054b4 <_data_stage_xact>
 81055d6:	4603      	mov	r3, r0
 81055d8:	f083 0301 	eor.w	r3, r3, #1
 81055dc:	b2db      	uxtb	r3, r3
 81055de:	2b00      	cmp	r3, #0
 81055e0:	d020      	beq.n	8105624 <tud_control_xfer+0xcc>
 81055e2:	4b14      	ldr	r3, [pc, #80]	; (8105634 <tud_control_xfer+0xdc>)
 81055e4:	617b      	str	r3, [r7, #20]
 81055e6:	697b      	ldr	r3, [r7, #20]
 81055e8:	681b      	ldr	r3, [r3, #0]
 81055ea:	f003 0301 	and.w	r3, r3, #1
 81055ee:	2b00      	cmp	r3, #0
 81055f0:	d000      	beq.n	81055f4 <tud_control_xfer+0x9c>
 81055f2:	be00      	bkpt	0x0000
 81055f4:	2300      	movs	r3, #0
 81055f6:	e016      	b.n	8105626 <tud_control_xfer+0xce>
  } else {
    // Status stage
    TU_ASSERT(_status_stage_xact(rhport, request));
 81055f8:	7bfb      	ldrb	r3, [r7, #15]
 81055fa:	68b9      	ldr	r1, [r7, #8]
 81055fc:	4618      	mov	r0, r3
 81055fe:	f7ff ff1d 	bl	810543c <_status_stage_xact>
 8105602:	4603      	mov	r3, r0
 8105604:	f083 0301 	eor.w	r3, r3, #1
 8105608:	b2db      	uxtb	r3, r3
 810560a:	2b00      	cmp	r3, #0
 810560c:	d00a      	beq.n	8105624 <tud_control_xfer+0xcc>
 810560e:	4b09      	ldr	r3, [pc, #36]	; (8105634 <tud_control_xfer+0xdc>)
 8105610:	61fb      	str	r3, [r7, #28]
 8105612:	69fb      	ldr	r3, [r7, #28]
 8105614:	681b      	ldr	r3, [r3, #0]
 8105616:	f003 0301 	and.w	r3, r3, #1
 810561a:	2b00      	cmp	r3, #0
 810561c:	d000      	beq.n	8105620 <tud_control_xfer+0xc8>
 810561e:	be00      	bkpt	0x0000
 8105620:	2300      	movs	r3, #0
 8105622:	e000      	b.n	8105626 <tud_control_xfer+0xce>
  }

  return true;
 8105624:	2301      	movs	r3, #1
}
 8105626:	4618      	mov	r0, r3
 8105628:	3720      	adds	r7, #32
 810562a:	46bd      	mov	sp, r7
 810562c:	bd80      	pop	{r7, pc}
 810562e:	bf00      	nop
 8105630:	100010a8 	.word	0x100010a8
 8105634:	e000edf0 	.word	0xe000edf0

08105638 <usbd_control_reset>:
void usbd_control_reset(void);
void usbd_control_set_request(tusb_control_request_t const* request);
void usbd_control_set_complete_callback(usbd_control_xfer_cb_t fp);
bool usbd_control_xfer_cb(uint8_t rhport, uint8_t ep_addr, xfer_result_t event, uint32_t xferred_bytes);

void usbd_control_reset(void) {
 8105638:	b580      	push	{r7, lr}
 810563a:	af00      	add	r7, sp, #0
  tu_varclr(&_ctrl_xfer);
 810563c:	2214      	movs	r2, #20
 810563e:	2100      	movs	r1, #0
 8105640:	4802      	ldr	r0, [pc, #8]	; (810564c <usbd_control_reset+0x14>)
 8105642:	f00c fb8b 	bl	8111d5c <memset>
}
 8105646:	bf00      	nop
 8105648:	bd80      	pop	{r7, pc}
 810564a:	bf00      	nop
 810564c:	100010a8 	.word	0x100010a8

08105650 <usbd_control_set_complete_callback>:

// Set complete callback
void usbd_control_set_complete_callback(usbd_control_xfer_cb_t fp) {
 8105650:	b480      	push	{r7}
 8105652:	b083      	sub	sp, #12
 8105654:	af00      	add	r7, sp, #0
 8105656:	6078      	str	r0, [r7, #4]
  _ctrl_xfer.complete_cb = fp;
 8105658:	4a04      	ldr	r2, [pc, #16]	; (810566c <usbd_control_set_complete_callback+0x1c>)
 810565a:	687b      	ldr	r3, [r7, #4]
 810565c:	6113      	str	r3, [r2, #16]
}
 810565e:	bf00      	nop
 8105660:	370c      	adds	r7, #12
 8105662:	46bd      	mov	sp, r7
 8105664:	f85d 7b04 	ldr.w	r7, [sp], #4
 8105668:	4770      	bx	lr
 810566a:	bf00      	nop
 810566c:	100010a8 	.word	0x100010a8

08105670 <usbd_control_set_request>:

// for dcd_set_address where DCD is responsible for status response
void usbd_control_set_request(tusb_control_request_t const* request) {
 8105670:	b480      	push	{r7}
 8105672:	b083      	sub	sp, #12
 8105674:	af00      	add	r7, sp, #0
 8105676:	6078      	str	r0, [r7, #4]
  _ctrl_xfer.request = (*request);
 8105678:	4b09      	ldr	r3, [pc, #36]	; (81056a0 <usbd_control_set_request+0x30>)
 810567a:	687a      	ldr	r2, [r7, #4]
 810567c:	6810      	ldr	r0, [r2, #0]
 810567e:	6851      	ldr	r1, [r2, #4]
 8105680:	c303      	stmia	r3!, {r0, r1}
  _ctrl_xfer.buffer = NULL;
 8105682:	4b07      	ldr	r3, [pc, #28]	; (81056a0 <usbd_control_set_request+0x30>)
 8105684:	2200      	movs	r2, #0
 8105686:	609a      	str	r2, [r3, #8]
  _ctrl_xfer.total_xferred = 0;
 8105688:	4b05      	ldr	r3, [pc, #20]	; (81056a0 <usbd_control_set_request+0x30>)
 810568a:	2200      	movs	r2, #0
 810568c:	81da      	strh	r2, [r3, #14]
  _ctrl_xfer.data_len = 0;
 810568e:	4b04      	ldr	r3, [pc, #16]	; (81056a0 <usbd_control_set_request+0x30>)
 8105690:	2200      	movs	r2, #0
 8105692:	819a      	strh	r2, [r3, #12]
}
 8105694:	bf00      	nop
 8105696:	370c      	adds	r7, #12
 8105698:	46bd      	mov	sp, r7
 810569a:	f85d 7b04 	ldr.w	r7, [sp], #4
 810569e:	4770      	bx	lr
 81056a0:	100010a8 	.word	0x100010a8

081056a4 <usbd_control_xfer_cb>:

// callback when a transaction complete on
// - DATA stage of control endpoint or
// - Status stage
bool usbd_control_xfer_cb(uint8_t rhport, uint8_t ep_addr, xfer_result_t result, uint32_t xferred_bytes) {
 81056a4:	b580      	push	{r7, lr}
 81056a6:	b088      	sub	sp, #32
 81056a8:	af00      	add	r7, sp, #0
 81056aa:	603b      	str	r3, [r7, #0]
 81056ac:	4603      	mov	r3, r0
 81056ae:	71fb      	strb	r3, [r7, #7]
 81056b0:	460b      	mov	r3, r1
 81056b2:	71bb      	strb	r3, [r7, #6]
 81056b4:	4613      	mov	r3, r2
 81056b6:	717b      	strb	r3, [r7, #5]
 81056b8:	79bb      	ldrb	r3, [r7, #6]
 81056ba:	73fb      	strb	r3, [r7, #15]
 81056bc:	7bfb      	ldrb	r3, [r7, #15]
 81056be:	09db      	lsrs	r3, r3, #7
 81056c0:	b2db      	uxtb	r3, r3
  (void) result;

  // Endpoint Address is opposite to direction bit, this is Status Stage complete event
  if (tu_edpt_dir(ep_addr) != _ctrl_xfer.request.bmRequestType_bit.direction) {
 81056c2:	4a4f      	ldr	r2, [pc, #316]	; (8105800 <usbd_control_xfer_cb+0x15c>)
 81056c4:	7812      	ldrb	r2, [r2, #0]
 81056c6:	f3c2 12c0 	ubfx	r2, r2, #7, #1
 81056ca:	b2d2      	uxtb	r2, r2
 81056cc:	4293      	cmp	r3, r2
 81056ce:	d01e      	beq.n	810570e <usbd_control_xfer_cb+0x6a>
    TU_ASSERT(0 == xferred_bytes);
 81056d0:	683b      	ldr	r3, [r7, #0]
 81056d2:	2b00      	cmp	r3, #0
 81056d4:	d00a      	beq.n	81056ec <usbd_control_xfer_cb+0x48>
 81056d6:	4b4b      	ldr	r3, [pc, #300]	; (8105804 <usbd_control_xfer_cb+0x160>)
 81056d8:	613b      	str	r3, [r7, #16]
 81056da:	693b      	ldr	r3, [r7, #16]
 81056dc:	681b      	ldr	r3, [r3, #0]
 81056de:	f003 0301 	and.w	r3, r3, #1
 81056e2:	2b00      	cmp	r3, #0
 81056e4:	d000      	beq.n	81056e8 <usbd_control_xfer_cb+0x44>
 81056e6:	be00      	bkpt	0x0000
 81056e8:	2300      	movs	r3, #0
 81056ea:	e084      	b.n	81057f6 <usbd_control_xfer_cb+0x152>

    // invoke optional dcd hook if available
    dcd_edpt0_status_complete(rhport, &_ctrl_xfer.request);
 81056ec:	79fb      	ldrb	r3, [r7, #7]
 81056ee:	4944      	ldr	r1, [pc, #272]	; (8105800 <usbd_control_xfer_cb+0x15c>)
 81056f0:	4618      	mov	r0, r3
 81056f2:	f7ff fe97 	bl	8105424 <dcd_edpt0_status_complete>

    if (_ctrl_xfer.complete_cb) {
 81056f6:	4b42      	ldr	r3, [pc, #264]	; (8105800 <usbd_control_xfer_cb+0x15c>)
 81056f8:	691b      	ldr	r3, [r3, #16]
 81056fa:	2b00      	cmp	r3, #0
 81056fc:	d005      	beq.n	810570a <usbd_control_xfer_cb+0x66>
      // TODO refactor with usbd_driver_print_control_complete_name
      _ctrl_xfer.complete_cb(rhport, CONTROL_STAGE_ACK, &_ctrl_xfer.request);
 81056fe:	4b40      	ldr	r3, [pc, #256]	; (8105800 <usbd_control_xfer_cb+0x15c>)
 8105700:	691b      	ldr	r3, [r3, #16]
 8105702:	79f8      	ldrb	r0, [r7, #7]
 8105704:	4a3e      	ldr	r2, [pc, #248]	; (8105800 <usbd_control_xfer_cb+0x15c>)
 8105706:	2103      	movs	r1, #3
 8105708:	4798      	blx	r3
    }

    return true;
 810570a:	2301      	movs	r3, #1
 810570c:	e073      	b.n	81057f6 <usbd_control_xfer_cb+0x152>
  }

  if (_ctrl_xfer.request.bmRequestType_bit.direction == TUSB_DIR_OUT) {
 810570e:	4b3c      	ldr	r3, [pc, #240]	; (8105800 <usbd_control_xfer_cb+0x15c>)
 8105710:	781b      	ldrb	r3, [r3, #0]
 8105712:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8105716:	b2db      	uxtb	r3, r3
 8105718:	2b00      	cmp	r3, #0
 810571a:	d10c      	bne.n	8105736 <usbd_control_xfer_cb+0x92>
    TU_VERIFY(_ctrl_xfer.buffer);
 810571c:	4b38      	ldr	r3, [pc, #224]	; (8105800 <usbd_control_xfer_cb+0x15c>)
 810571e:	689b      	ldr	r3, [r3, #8]
 8105720:	2b00      	cmp	r3, #0
 8105722:	d101      	bne.n	8105728 <usbd_control_xfer_cb+0x84>
 8105724:	2300      	movs	r3, #0
 8105726:	e066      	b.n	81057f6 <usbd_control_xfer_cb+0x152>
    memcpy(_ctrl_xfer.buffer, _usbd_ctrl_buf, xferred_bytes);
 8105728:	4b35      	ldr	r3, [pc, #212]	; (8105800 <usbd_control_xfer_cb+0x15c>)
 810572a:	689b      	ldr	r3, [r3, #8]
 810572c:	683a      	ldr	r2, [r7, #0]
 810572e:	4936      	ldr	r1, [pc, #216]	; (8105808 <usbd_control_xfer_cb+0x164>)
 8105730:	4618      	mov	r0, r3
 8105732:	f00c fb3f 	bl	8111db4 <memcpy>
    TU_LOG_MEM(CFG_TUD_LOG_LEVEL, _usbd_ctrl_buf, xferred_bytes, 2);
  }

  _ctrl_xfer.total_xferred += (uint16_t) xferred_bytes;
 8105736:	4b32      	ldr	r3, [pc, #200]	; (8105800 <usbd_control_xfer_cb+0x15c>)
 8105738:	89da      	ldrh	r2, [r3, #14]
 810573a:	683b      	ldr	r3, [r7, #0]
 810573c:	b29b      	uxth	r3, r3
 810573e:	4413      	add	r3, r2
 8105740:	b29a      	uxth	r2, r3
 8105742:	4b2f      	ldr	r3, [pc, #188]	; (8105800 <usbd_control_xfer_cb+0x15c>)
 8105744:	81da      	strh	r2, [r3, #14]
  _ctrl_xfer.buffer += xferred_bytes;
 8105746:	4b2e      	ldr	r3, [pc, #184]	; (8105800 <usbd_control_xfer_cb+0x15c>)
 8105748:	689a      	ldr	r2, [r3, #8]
 810574a:	683b      	ldr	r3, [r7, #0]
 810574c:	4413      	add	r3, r2
 810574e:	4a2c      	ldr	r2, [pc, #176]	; (8105800 <usbd_control_xfer_cb+0x15c>)
 8105750:	6093      	str	r3, [r2, #8]

  // Data Stage is complete when all request's length are transferred or
  // a short packet is sent including zero-length packet.
  if ((_ctrl_xfer.request.wLength == _ctrl_xfer.total_xferred) ||
 8105752:	4b2b      	ldr	r3, [pc, #172]	; (8105800 <usbd_control_xfer_cb+0x15c>)
 8105754:	88da      	ldrh	r2, [r3, #6]
 8105756:	4b2a      	ldr	r3, [pc, #168]	; (8105800 <usbd_control_xfer_cb+0x15c>)
 8105758:	89db      	ldrh	r3, [r3, #14]
 810575a:	429a      	cmp	r2, r3
 810575c:	d002      	beq.n	8105764 <usbd_control_xfer_cb+0xc0>
 810575e:	683b      	ldr	r3, [r7, #0]
 8105760:	2b3f      	cmp	r3, #63	; 0x3f
 8105762:	d831      	bhi.n	81057c8 <usbd_control_xfer_cb+0x124>
      (xferred_bytes < CFG_TUD_ENDPOINT0_SIZE)) {
    // DATA stage is complete
    bool is_ok = true;
 8105764:	2301      	movs	r3, #1
 8105766:	77fb      	strb	r3, [r7, #31]

    // invoke complete callback if set
    // callback can still stall control in status phase e.g out data does not make sense
    if (_ctrl_xfer.complete_cb) {
 8105768:	4b25      	ldr	r3, [pc, #148]	; (8105800 <usbd_control_xfer_cb+0x15c>)
 810576a:	691b      	ldr	r3, [r3, #16]
 810576c:	2b00      	cmp	r3, #0
 810576e:	d007      	beq.n	8105780 <usbd_control_xfer_cb+0xdc>
      #if CFG_TUSB_DEBUG >= CFG_TUD_LOG_LEVEL
      usbd_driver_print_control_complete_name(_ctrl_xfer.complete_cb);
      #endif

      is_ok = _ctrl_xfer.complete_cb(rhport, CONTROL_STAGE_DATA, &_ctrl_xfer.request);
 8105770:	4b23      	ldr	r3, [pc, #140]	; (8105800 <usbd_control_xfer_cb+0x15c>)
 8105772:	691b      	ldr	r3, [r3, #16]
 8105774:	79f8      	ldrb	r0, [r7, #7]
 8105776:	4a22      	ldr	r2, [pc, #136]	; (8105800 <usbd_control_xfer_cb+0x15c>)
 8105778:	2102      	movs	r1, #2
 810577a:	4798      	blx	r3
 810577c:	4603      	mov	r3, r0
 810577e:	77fb      	strb	r3, [r7, #31]
    }

    if (is_ok) {
 8105780:	7ffb      	ldrb	r3, [r7, #31]
 8105782:	2b00      	cmp	r3, #0
 8105784:	d015      	beq.n	81057b2 <usbd_control_xfer_cb+0x10e>
      // Send status
      TU_ASSERT(_status_stage_xact(rhport, &_ctrl_xfer.request));
 8105786:	79fb      	ldrb	r3, [r7, #7]
 8105788:	491d      	ldr	r1, [pc, #116]	; (8105800 <usbd_control_xfer_cb+0x15c>)
 810578a:	4618      	mov	r0, r3
 810578c:	f7ff fe56 	bl	810543c <_status_stage_xact>
 8105790:	4603      	mov	r3, r0
 8105792:	f083 0301 	eor.w	r3, r3, #1
 8105796:	b2db      	uxtb	r3, r3
 8105798:	2b00      	cmp	r3, #0
 810579a:	d02a      	beq.n	81057f2 <usbd_control_xfer_cb+0x14e>
 810579c:	4b19      	ldr	r3, [pc, #100]	; (8105804 <usbd_control_xfer_cb+0x160>)
 810579e:	617b      	str	r3, [r7, #20]
 81057a0:	697b      	ldr	r3, [r7, #20]
 81057a2:	681b      	ldr	r3, [r3, #0]
 81057a4:	f003 0301 	and.w	r3, r3, #1
 81057a8:	2b00      	cmp	r3, #0
 81057aa:	d000      	beq.n	81057ae <usbd_control_xfer_cb+0x10a>
 81057ac:	be00      	bkpt	0x0000
 81057ae:	2300      	movs	r3, #0
 81057b0:	e021      	b.n	81057f6 <usbd_control_xfer_cb+0x152>
    } else {
      // Stall both IN and OUT control endpoint
      dcd_edpt_stall(rhport, EDPT_CTRL_OUT);
 81057b2:	79fb      	ldrb	r3, [r7, #7]
 81057b4:	2100      	movs	r1, #0
 81057b6:	4618      	mov	r0, r3
 81057b8:	f001 f804 	bl	81067c4 <dcd_edpt_stall>
      dcd_edpt_stall(rhport, EDPT_CTRL_IN);
 81057bc:	79fb      	ldrb	r3, [r7, #7]
 81057be:	2180      	movs	r1, #128	; 0x80
 81057c0:	4618      	mov	r0, r3
 81057c2:	f000 ffff 	bl	81067c4 <dcd_edpt_stall>
      (xferred_bytes < CFG_TUD_ENDPOINT0_SIZE)) {
 81057c6:	e014      	b.n	81057f2 <usbd_control_xfer_cb+0x14e>
    }
  } else {
    // More data to transfer
    TU_ASSERT(_data_stage_xact(rhport));
 81057c8:	79fb      	ldrb	r3, [r7, #7]
 81057ca:	4618      	mov	r0, r3
 81057cc:	f7ff fe72 	bl	81054b4 <_data_stage_xact>
 81057d0:	4603      	mov	r3, r0
 81057d2:	f083 0301 	eor.w	r3, r3, #1
 81057d6:	b2db      	uxtb	r3, r3
 81057d8:	2b00      	cmp	r3, #0
 81057da:	d00b      	beq.n	81057f4 <usbd_control_xfer_cb+0x150>
 81057dc:	4b09      	ldr	r3, [pc, #36]	; (8105804 <usbd_control_xfer_cb+0x160>)
 81057de:	61bb      	str	r3, [r7, #24]
 81057e0:	69bb      	ldr	r3, [r7, #24]
 81057e2:	681b      	ldr	r3, [r3, #0]
 81057e4:	f003 0301 	and.w	r3, r3, #1
 81057e8:	2b00      	cmp	r3, #0
 81057ea:	d000      	beq.n	81057ee <usbd_control_xfer_cb+0x14a>
 81057ec:	be00      	bkpt	0x0000
 81057ee:	2300      	movs	r3, #0
 81057f0:	e001      	b.n	81057f6 <usbd_control_xfer_cb+0x152>
      (xferred_bytes < CFG_TUD_ENDPOINT0_SIZE)) {
 81057f2:	bf00      	nop
  }

  return true;
 81057f4:	2301      	movs	r3, #1
}
 81057f6:	4618      	mov	r0, r3
 81057f8:	3720      	adds	r7, #32
 81057fa:	46bd      	mov	sp, r7
 81057fc:	bd80      	pop	{r7, pc}
 81057fe:	bf00      	nop
 8105800:	100010a8 	.word	0x100010a8
 8105804:	e000edf0 	.word	0xe000edf0
 8105808:	100010bc 	.word	0x100010bc

0810580c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 810580c:	b480      	push	{r7}
 810580e:	b083      	sub	sp, #12
 8105810:	af00      	add	r7, sp, #0
 8105812:	4603      	mov	r3, r0
 8105814:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8105816:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 810581a:	2b00      	cmp	r3, #0
 810581c:	db0b      	blt.n	8105836 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 810581e:	88fb      	ldrh	r3, [r7, #6]
 8105820:	f003 021f 	and.w	r2, r3, #31
 8105824:	4907      	ldr	r1, [pc, #28]	; (8105844 <__NVIC_EnableIRQ+0x38>)
 8105826:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 810582a:	095b      	lsrs	r3, r3, #5
 810582c:	2001      	movs	r0, #1
 810582e:	fa00 f202 	lsl.w	r2, r0, r2
 8105832:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8105836:	bf00      	nop
 8105838:	370c      	adds	r7, #12
 810583a:	46bd      	mov	sp, r7
 810583c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8105840:	4770      	bx	lr
 8105842:	bf00      	nop
 8105844:	e000e100 	.word	0xe000e100

08105848 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8105848:	b480      	push	{r7}
 810584a:	b083      	sub	sp, #12
 810584c:	af00      	add	r7, sp, #0
 810584e:	4603      	mov	r3, r0
 8105850:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8105852:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8105856:	2b00      	cmp	r3, #0
 8105858:	db12      	blt.n	8105880 <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 810585a:	88fb      	ldrh	r3, [r7, #6]
 810585c:	f003 021f 	and.w	r2, r3, #31
 8105860:	490a      	ldr	r1, [pc, #40]	; (810588c <__NVIC_DisableIRQ+0x44>)
 8105862:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8105866:	095b      	lsrs	r3, r3, #5
 8105868:	2001      	movs	r0, #1
 810586a:	fa00 f202 	lsl.w	r2, r0, r2
 810586e:	3320      	adds	r3, #32
 8105870:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8105874:	f3bf 8f4f 	dsb	sy
}
 8105878:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 810587a:	f3bf 8f6f 	isb	sy
}
 810587e:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 8105880:	bf00      	nop
 8105882:	370c      	adds	r7, #12
 8105884:	46bd      	mov	sp, r7
 8105886:	f85d 7b04 	ldr.w	r7, [sp], #4
 810588a:	4770      	bx	lr
 810588c:	e000e100 	.word	0xe000e100

08105890 <dwc2_phy_init>:
}

// MCU specific PHY init, called BEFORE core reset
// - dwc2 3.30a (H5) use USB_HS_PHYC
// - dwc2 4.11a (U5) use femtoPHY
static inline void dwc2_phy_init(dwc2_regs_t* dwc2, uint8_t hs_phy_type) {
 8105890:	b480      	push	{r7}
 8105892:	b083      	sub	sp, #12
 8105894:	af00      	add	r7, sp, #0
 8105896:	6078      	str	r0, [r7, #4]
 8105898:	460b      	mov	r3, r1
 810589a:	70fb      	strb	r3, [r7, #3]
  if (hs_phy_type == HS_PHY_TYPE_NONE) {
 810589c:	78fb      	ldrb	r3, [r7, #3]
 810589e:	2b00      	cmp	r3, #0
 81058a0:	d11e      	bne.n	81058e0 <dwc2_phy_init+0x50>
    // Enable on-chip FS PHY
    dwc2->stm32_gccfg |= STM32_GCCFG_PWRDWN;
 81058a2:	687b      	ldr	r3, [r7, #4]
 81058a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 81058a6:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 81058aa:	687b      	ldr	r3, [r7, #4]
 81058ac:	639a      	str	r2, [r3, #56]	; 0x38
    // https://community.st.com/t5/stm32cubemx-mcus/why-stm32h743-usb-fs-doesn-t-work-if-freertos-tickless-idle/m-p/349480#M18867
    // H7 running on full-speed phy need to disable ULPI clock in sleep mode.
    // Otherwise, USB won't work when mcu executing WFI/WFE instruction i.e tick-less RTOS.
    // Note: there may be other family that is affected by this, but only H7 and F7 is tested so far
    #if defined(USB_OTG_FS_PERIPH_BASE) && defined(RCC_AHB1LPENR_USB2OTGFSULPILPEN)
    if ( USB_OTG_FS_PERIPH_BASE == (uint32_t) dwc2 ) {
 81058ae:	687b      	ldr	r3, [r7, #4]
 81058b0:	4a11      	ldr	r2, [pc, #68]	; (81058f8 <dwc2_phy_init+0x68>)
 81058b2:	4293      	cmp	r3, r2
 81058b4:	d107      	bne.n	81058c6 <dwc2_phy_init+0x36>
      RCC->AHB1LPENR &= ~RCC_AHB1LPENR_USB2OTGFSULPILPEN;
 81058b6:	4b11      	ldr	r3, [pc, #68]	; (81058fc <dwc2_phy_init+0x6c>)
 81058b8:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 81058bc:	4a0f      	ldr	r2, [pc, #60]	; (81058fc <dwc2_phy_init+0x6c>)
 81058be:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 81058c2:	f8c2 3100 	str.w	r3, [r2, #256]	; 0x100
    }
    #endif

    #if defined(USB_OTG_HS_PERIPH_BASE) && defined(RCC_AHB1LPENR_USB1OTGHSULPILPEN)
    if ( USB_OTG_HS_PERIPH_BASE == (uint32_t) dwc2 ) {
 81058c6:	687b      	ldr	r3, [r7, #4]
 81058c8:	4a0d      	ldr	r2, [pc, #52]	; (8105900 <dwc2_phy_init+0x70>)
 81058ca:	4293      	cmp	r3, r2
 81058cc:	d10e      	bne.n	81058ec <dwc2_phy_init+0x5c>
      RCC->AHB1LPENR &= ~RCC_AHB1LPENR_USB1OTGHSULPILPEN;
 81058ce:	4b0b      	ldr	r3, [pc, #44]	; (81058fc <dwc2_phy_init+0x6c>)
 81058d0:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 81058d4:	4a09      	ldr	r2, [pc, #36]	; (81058fc <dwc2_phy_init+0x6c>)
 81058d6:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 81058da:	f8c2 3100 	str.w	r3, [r2, #256]	; 0x100
      #else

      #endif
    }
  }
}
 81058de:	e005      	b.n	81058ec <dwc2_phy_init+0x5c>
    dwc2->stm32_gccfg &= ~STM32_GCCFG_PWRDWN;
 81058e0:	687b      	ldr	r3, [r7, #4]
 81058e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 81058e4:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 81058e8:	687b      	ldr	r3, [r7, #4]
 81058ea:	639a      	str	r2, [r3, #56]	; 0x38
}
 81058ec:	bf00      	nop
 81058ee:	370c      	adds	r7, #12
 81058f0:	46bd      	mov	sp, r7
 81058f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 81058f6:	4770      	bx	lr
 81058f8:	40080000 	.word	0x40080000
 81058fc:	58024400 	.word	0x58024400
 8105900:	40040000 	.word	0x40040000

08105904 <dwc2_phy_update>:

// MCU specific PHY update, it is called AFTER init() and core reset
static inline void dwc2_phy_update(dwc2_regs_t* dwc2, uint8_t hs_phy_type) {
 8105904:	b480      	push	{r7}
 8105906:	b085      	sub	sp, #20
 8105908:	af00      	add	r7, sp, #0
 810590a:	6078      	str	r0, [r7, #4]
 810590c:	460b      	mov	r3, r1
 810590e:	70fb      	strb	r3, [r7, #3]
  // used to set turnaround time for fullspeed, nothing to do in highspeed mode
  if (hs_phy_type == HS_PHY_TYPE_NONE) {
 8105910:	78fb      	ldrb	r3, [r7, #3]
 8105912:	2b00      	cmp	r3, #0
 8105914:	d152      	bne.n	81059bc <dwc2_phy_update+0xb8>
    // Turnaround timeout depends on the AHB clock dictated by STM32 Reference Manual
    uint32_t turnaround;

    if (SystemCoreClock >= 32000000u) {
 8105916:	4b2c      	ldr	r3, [pc, #176]	; (81059c8 <dwc2_phy_update+0xc4>)
 8105918:	681b      	ldr	r3, [r3, #0]
 810591a:	4a2c      	ldr	r2, [pc, #176]	; (81059cc <dwc2_phy_update+0xc8>)
 810591c:	4293      	cmp	r3, r2
 810591e:	d302      	bcc.n	8105926 <dwc2_phy_update+0x22>
      turnaround = 0x6u;
 8105920:	2306      	movs	r3, #6
 8105922:	60fb      	str	r3, [r7, #12]
 8105924:	e041      	b.n	81059aa <dwc2_phy_update+0xa6>
    } else if (SystemCoreClock >= 27500000u) {
 8105926:	4b28      	ldr	r3, [pc, #160]	; (81059c8 <dwc2_phy_update+0xc4>)
 8105928:	681b      	ldr	r3, [r3, #0]
 810592a:	4a29      	ldr	r2, [pc, #164]	; (81059d0 <dwc2_phy_update+0xcc>)
 810592c:	4293      	cmp	r3, r2
 810592e:	d902      	bls.n	8105936 <dwc2_phy_update+0x32>
      turnaround = 0x7u;
 8105930:	2307      	movs	r3, #7
 8105932:	60fb      	str	r3, [r7, #12]
 8105934:	e039      	b.n	81059aa <dwc2_phy_update+0xa6>
    } else if (SystemCoreClock >= 24000000u) {
 8105936:	4b24      	ldr	r3, [pc, #144]	; (81059c8 <dwc2_phy_update+0xc4>)
 8105938:	681b      	ldr	r3, [r3, #0]
 810593a:	4a26      	ldr	r2, [pc, #152]	; (81059d4 <dwc2_phy_update+0xd0>)
 810593c:	4293      	cmp	r3, r2
 810593e:	d302      	bcc.n	8105946 <dwc2_phy_update+0x42>
      turnaround = 0x8u;
 8105940:	2308      	movs	r3, #8
 8105942:	60fb      	str	r3, [r7, #12]
 8105944:	e031      	b.n	81059aa <dwc2_phy_update+0xa6>
    } else if (SystemCoreClock >= 21800000u) {
 8105946:	4b20      	ldr	r3, [pc, #128]	; (81059c8 <dwc2_phy_update+0xc4>)
 8105948:	681b      	ldr	r3, [r3, #0]
 810594a:	4a23      	ldr	r2, [pc, #140]	; (81059d8 <dwc2_phy_update+0xd4>)
 810594c:	4293      	cmp	r3, r2
 810594e:	d902      	bls.n	8105956 <dwc2_phy_update+0x52>
      turnaround = 0x9u;
 8105950:	2309      	movs	r3, #9
 8105952:	60fb      	str	r3, [r7, #12]
 8105954:	e029      	b.n	81059aa <dwc2_phy_update+0xa6>
    }
    else if (SystemCoreClock >= 20000000u) {
 8105956:	4b1c      	ldr	r3, [pc, #112]	; (81059c8 <dwc2_phy_update+0xc4>)
 8105958:	681b      	ldr	r3, [r3, #0]
 810595a:	4a20      	ldr	r2, [pc, #128]	; (81059dc <dwc2_phy_update+0xd8>)
 810595c:	4293      	cmp	r3, r2
 810595e:	d902      	bls.n	8105966 <dwc2_phy_update+0x62>
      turnaround = 0xAu;
 8105960:	230a      	movs	r3, #10
 8105962:	60fb      	str	r3, [r7, #12]
 8105964:	e021      	b.n	81059aa <dwc2_phy_update+0xa6>
    }
    else if (SystemCoreClock >= 18500000u) {
 8105966:	4b18      	ldr	r3, [pc, #96]	; (81059c8 <dwc2_phy_update+0xc4>)
 8105968:	681b      	ldr	r3, [r3, #0]
 810596a:	4a1d      	ldr	r2, [pc, #116]	; (81059e0 <dwc2_phy_update+0xdc>)
 810596c:	4293      	cmp	r3, r2
 810596e:	d902      	bls.n	8105976 <dwc2_phy_update+0x72>
      turnaround = 0xBu;
 8105970:	230b      	movs	r3, #11
 8105972:	60fb      	str	r3, [r7, #12]
 8105974:	e019      	b.n	81059aa <dwc2_phy_update+0xa6>
    }
    else if (SystemCoreClock >= 17200000u) {
 8105976:	4b14      	ldr	r3, [pc, #80]	; (81059c8 <dwc2_phy_update+0xc4>)
 8105978:	681b      	ldr	r3, [r3, #0]
 810597a:	4a1a      	ldr	r2, [pc, #104]	; (81059e4 <dwc2_phy_update+0xe0>)
 810597c:	4293      	cmp	r3, r2
 810597e:	d302      	bcc.n	8105986 <dwc2_phy_update+0x82>
      turnaround = 0xCu;
 8105980:	230c      	movs	r3, #12
 8105982:	60fb      	str	r3, [r7, #12]
 8105984:	e011      	b.n	81059aa <dwc2_phy_update+0xa6>
    }
    else if (SystemCoreClock >= 16000000u) {
 8105986:	4b10      	ldr	r3, [pc, #64]	; (81059c8 <dwc2_phy_update+0xc4>)
 8105988:	681b      	ldr	r3, [r3, #0]
 810598a:	4a17      	ldr	r2, [pc, #92]	; (81059e8 <dwc2_phy_update+0xe4>)
 810598c:	4293      	cmp	r3, r2
 810598e:	d302      	bcc.n	8105996 <dwc2_phy_update+0x92>
      turnaround = 0xDu;
 8105990:	230d      	movs	r3, #13
 8105992:	60fb      	str	r3, [r7, #12]
 8105994:	e009      	b.n	81059aa <dwc2_phy_update+0xa6>
    }
    else if (SystemCoreClock >= 15000000u) {
 8105996:	4b0c      	ldr	r3, [pc, #48]	; (81059c8 <dwc2_phy_update+0xc4>)
 8105998:	681b      	ldr	r3, [r3, #0]
 810599a:	4a14      	ldr	r2, [pc, #80]	; (81059ec <dwc2_phy_update+0xe8>)
 810599c:	4293      	cmp	r3, r2
 810599e:	d302      	bcc.n	81059a6 <dwc2_phy_update+0xa2>
      turnaround = 0xEu;
 81059a0:	230e      	movs	r3, #14
 81059a2:	60fb      	str	r3, [r7, #12]
 81059a4:	e001      	b.n	81059aa <dwc2_phy_update+0xa6>
    }
    else {
      turnaround = 0xFu;
 81059a6:	230f      	movs	r3, #15
 81059a8:	60fb      	str	r3, [r7, #12]
    }

    dwc2->gusbcfg = (dwc2->gusbcfg & ~GUSBCFG_TRDT_Msk) | (turnaround << GUSBCFG_TRDT_Pos);
 81059aa:	687b      	ldr	r3, [r7, #4]
 81059ac:	68db      	ldr	r3, [r3, #12]
 81059ae:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 81059b2:	68fb      	ldr	r3, [r7, #12]
 81059b4:	029b      	lsls	r3, r3, #10
 81059b6:	431a      	orrs	r2, r3
 81059b8:	687b      	ldr	r3, [r7, #4]
 81059ba:	60da      	str	r2, [r3, #12]
  }
}
 81059bc:	bf00      	nop
 81059be:	3714      	adds	r7, #20
 81059c0:	46bd      	mov	sp, r7
 81059c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 81059c6:	4770      	bx	lr
 81059c8:	10000000 	.word	0x10000000
 81059cc:	01e84800 	.word	0x01e84800
 81059d0:	01a39ddf 	.word	0x01a39ddf
 81059d4:	016e3600 	.word	0x016e3600
 81059d8:	014ca43f 	.word	0x014ca43f
 81059dc:	01312cff 	.word	0x01312cff
 81059e0:	011a499f 	.word	0x011a499f
 81059e4:	01067380 	.word	0x01067380
 81059e8:	00f42400 	.word	0x00f42400
 81059ec:	00e4e1c0 	.word	0x00e4e1c0

081059f0 <calc_grxfsiz>:

// SOF enabling flag - required for SOF to not get disabled in ISR when SOF was enabled by
static bool _sof_en;

// Calculate the RX FIFO size according to recommendations from reference manual
static inline uint16_t calc_grxfsiz(uint16_t max_ep_size, uint8_t ep_count) {
 81059f0:	b480      	push	{r7}
 81059f2:	b083      	sub	sp, #12
 81059f4:	af00      	add	r7, sp, #0
 81059f6:	4603      	mov	r3, r0
 81059f8:	460a      	mov	r2, r1
 81059fa:	80fb      	strh	r3, [r7, #6]
 81059fc:	4613      	mov	r3, r2
 81059fe:	717b      	strb	r3, [r7, #5]
  return 15 + 2 * (max_ep_size / 4) + 2 * ep_count;
 8105a00:	88fb      	ldrh	r3, [r7, #6]
 8105a02:	089b      	lsrs	r3, r3, #2
 8105a04:	b29a      	uxth	r2, r3
 8105a06:	797b      	ldrb	r3, [r7, #5]
 8105a08:	b29b      	uxth	r3, r3
 8105a0a:	4413      	add	r3, r2
 8105a0c:	b29b      	uxth	r3, r3
 8105a0e:	005b      	lsls	r3, r3, #1
 8105a10:	b29b      	uxth	r3, r3
 8105a12:	330f      	adds	r3, #15
 8105a14:	b29b      	uxth	r3, r3
}
 8105a16:	4618      	mov	r0, r3
 8105a18:	370c      	adds	r7, #12
 8105a1a:	46bd      	mov	sp, r7
 8105a1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8105a20:	4770      	bx	lr
	...

08105a24 <update_grxfsiz>:

static void update_grxfsiz(uint8_t rhport) {
 8105a24:	b580      	push	{r7, lr}
 8105a26:	b086      	sub	sp, #24
 8105a28:	af00      	add	r7, sp, #0
 8105a2a:	4603      	mov	r3, r0
 8105a2c:	71fb      	strb	r3, [r7, #7]
  dwc2_regs_t* dwc2 = DWC2_REG(rhport);
 8105a2e:	79fb      	ldrb	r3, [r7, #7]
 8105a30:	4a1b      	ldr	r2, [pc, #108]	; (8105aa0 <update_grxfsiz+0x7c>)
 8105a32:	011b      	lsls	r3, r3, #4
 8105a34:	4413      	add	r3, r2
 8105a36:	681b      	ldr	r3, [r3, #0]
 8105a38:	613b      	str	r3, [r7, #16]
  uint8_t const ep_count = _dwc2_controller[rhport].ep_count;
 8105a3a:	79fb      	ldrb	r3, [r7, #7]
 8105a3c:	4a18      	ldr	r2, [pc, #96]	; (8105aa0 <update_grxfsiz+0x7c>)
 8105a3e:	011b      	lsls	r3, r3, #4
 8105a40:	4413      	add	r3, r2
 8105a42:	3308      	adds	r3, #8
 8105a44:	781b      	ldrb	r3, [r3, #0]
 8105a46:	73fb      	strb	r3, [r7, #15]

  // Determine largest EP size for RX FIFO
  uint16_t max_epsize = 0;
 8105a48:	2300      	movs	r3, #0
 8105a4a:	82fb      	strh	r3, [r7, #22]
  for (uint8_t epnum = 0; epnum < ep_count; epnum++) {
 8105a4c:	2300      	movs	r3, #0
 8105a4e:	757b      	strb	r3, [r7, #21]
 8105a50:	e013      	b.n	8105a7a <update_grxfsiz+0x56>
    max_epsize = tu_max16(max_epsize, xfer_status[epnum][TUSB_DIR_OUT].max_size);
 8105a52:	7d7b      	ldrb	r3, [r7, #21]
 8105a54:	4a13      	ldr	r2, [pc, #76]	; (8105aa4 <update_grxfsiz+0x80>)
 8105a56:	015b      	lsls	r3, r3, #5
 8105a58:	4413      	add	r3, r2
 8105a5a:	330a      	adds	r3, #10
 8105a5c:	881a      	ldrh	r2, [r3, #0]
 8105a5e:	8afb      	ldrh	r3, [r7, #22]
 8105a60:	81bb      	strh	r3, [r7, #12]
 8105a62:	4613      	mov	r3, r2
 8105a64:	817b      	strh	r3, [r7, #10]
TU_ATTR_ALWAYS_INLINE static inline uint16_t tu_max16 (uint16_t x, uint16_t y) { return (x > y) ? x : y; }
 8105a66:	89ba      	ldrh	r2, [r7, #12]
 8105a68:	897b      	ldrh	r3, [r7, #10]
 8105a6a:	4293      	cmp	r3, r2
 8105a6c:	bf38      	it	cc
 8105a6e:	4613      	movcc	r3, r2
 8105a70:	b29b      	uxth	r3, r3
 8105a72:	82fb      	strh	r3, [r7, #22]
  for (uint8_t epnum = 0; epnum < ep_count; epnum++) {
 8105a74:	7d7b      	ldrb	r3, [r7, #21]
 8105a76:	3301      	adds	r3, #1
 8105a78:	757b      	strb	r3, [r7, #21]
 8105a7a:	7d7a      	ldrb	r2, [r7, #21]
 8105a7c:	7bfb      	ldrb	r3, [r7, #15]
 8105a7e:	429a      	cmp	r2, r3
 8105a80:	d3e7      	bcc.n	8105a52 <update_grxfsiz+0x2e>
  }

  // Update size of RX FIFO
  dwc2->grxfsiz = calc_grxfsiz(max_epsize, ep_count);
 8105a82:	7bfa      	ldrb	r2, [r7, #15]
 8105a84:	8afb      	ldrh	r3, [r7, #22]
 8105a86:	4611      	mov	r1, r2
 8105a88:	4618      	mov	r0, r3
 8105a8a:	f7ff ffb1 	bl	81059f0 <calc_grxfsiz>
 8105a8e:	4603      	mov	r3, r0
 8105a90:	461a      	mov	r2, r3
 8105a92:	693b      	ldr	r3, [r7, #16]
 8105a94:	625a      	str	r2, [r3, #36]	; 0x24
}
 8105a96:	bf00      	nop
 8105a98:	3718      	adds	r7, #24
 8105a9a:	46bd      	mov	sp, r7
 8105a9c:	bd80      	pop	{r7, pc}
 8105a9e:	bf00      	nop
 8105aa0:	08111edc 	.word	0x08111edc
 8105aa4:	10001104 	.word	0x10001104

08105aa8 <bus_reset>:

// Start of Bus Reset
static void bus_reset(uint8_t rhport) {
 8105aa8:	b580      	push	{r7, lr}
 8105aaa:	b086      	sub	sp, #24
 8105aac:	af00      	add	r7, sp, #0
 8105aae:	4603      	mov	r3, r0
 8105ab0:	71fb      	strb	r3, [r7, #7]
  dwc2_regs_t* dwc2 = DWC2_REG(rhport);
 8105ab2:	79fb      	ldrb	r3, [r7, #7]
 8105ab4:	4a3f      	ldr	r2, [pc, #252]	; (8105bb4 <bus_reset+0x10c>)
 8105ab6:	011b      	lsls	r3, r3, #4
 8105ab8:	4413      	add	r3, r2
 8105aba:	681b      	ldr	r3, [r3, #0]
 8105abc:	613b      	str	r3, [r7, #16]
  uint8_t const ep_count = _dwc2_controller[rhport].ep_count;
 8105abe:	79fb      	ldrb	r3, [r7, #7]
 8105ac0:	4a3c      	ldr	r2, [pc, #240]	; (8105bb4 <bus_reset+0x10c>)
 8105ac2:	011b      	lsls	r3, r3, #4
 8105ac4:	4413      	add	r3, r2
 8105ac6:	3308      	adds	r3, #8
 8105ac8:	781b      	ldrb	r3, [r3, #0]
 8105aca:	73fb      	strb	r3, [r7, #15]

  tu_memclr(xfer_status, sizeof(xfer_status));
 8105acc:	f44f 7290 	mov.w	r2, #288	; 0x120
 8105ad0:	2100      	movs	r1, #0
 8105ad2:	4839      	ldr	r0, [pc, #228]	; (8105bb8 <bus_reset+0x110>)
 8105ad4:	f00c f942 	bl	8111d5c <memset>
  _out_ep_closed = false;
 8105ad8:	4b38      	ldr	r3, [pc, #224]	; (8105bbc <bus_reset+0x114>)
 8105ada:	2200      	movs	r2, #0
 8105adc:	701a      	strb	r2, [r3, #0]

  _sof_en = false;
 8105ade:	4b38      	ldr	r3, [pc, #224]	; (8105bc0 <bus_reset+0x118>)
 8105ae0:	2200      	movs	r2, #0
 8105ae2:	701a      	strb	r2, [r3, #0]

  // clear device address
  dwc2->dcfg &= ~DCFG_DAD_Msk;
 8105ae4:	693b      	ldr	r3, [r7, #16]
 8105ae6:	f8d3 3800 	ldr.w	r3, [r3, #2048]	; 0x800
 8105aea:	f423 62fe 	bic.w	r2, r3, #2032	; 0x7f0
 8105aee:	693b      	ldr	r3, [r7, #16]
 8105af0:	f8c3 2800 	str.w	r2, [r3, #2048]	; 0x800

  // 1. NAK for all OUT endpoints
  for (uint8_t n = 0; n < ep_count; n++) {
 8105af4:	2300      	movs	r3, #0
 8105af6:	75fb      	strb	r3, [r7, #23]
 8105af8:	e010      	b.n	8105b1c <bus_reset+0x74>
    dwc2->epout[n].doepctl |= DOEPCTL_SNAK;
 8105afa:	7dfb      	ldrb	r3, [r7, #23]
 8105afc:	693a      	ldr	r2, [r7, #16]
 8105afe:	3358      	adds	r3, #88	; 0x58
 8105b00:	015b      	lsls	r3, r3, #5
 8105b02:	4413      	add	r3, r2
 8105b04:	681a      	ldr	r2, [r3, #0]
 8105b06:	7dfb      	ldrb	r3, [r7, #23]
 8105b08:	f042 6200 	orr.w	r2, r2, #134217728	; 0x8000000
 8105b0c:	6939      	ldr	r1, [r7, #16]
 8105b0e:	3358      	adds	r3, #88	; 0x58
 8105b10:	015b      	lsls	r3, r3, #5
 8105b12:	440b      	add	r3, r1
 8105b14:	601a      	str	r2, [r3, #0]
  for (uint8_t n = 0; n < ep_count; n++) {
 8105b16:	7dfb      	ldrb	r3, [r7, #23]
 8105b18:	3301      	adds	r3, #1
 8105b1a:	75fb      	strb	r3, [r7, #23]
 8105b1c:	7dfa      	ldrb	r2, [r7, #23]
 8105b1e:	7bfb      	ldrb	r3, [r7, #15]
 8105b20:	429a      	cmp	r2, r3
 8105b22:	d3ea      	bcc.n	8105afa <bus_reset+0x52>
  }

  // 2. Set up interrupt mask
  dwc2->daintmsk = TU_BIT(DAINTMSK_OEPM_Pos) | TU_BIT(DAINTMSK_IEPM_Pos);
 8105b24:	693b      	ldr	r3, [r7, #16]
 8105b26:	f04f 1201 	mov.w	r2, #65537	; 0x10001
 8105b2a:	f8c3 281c 	str.w	r2, [r3, #2076]	; 0x81c
  dwc2->doepmsk = DOEPMSK_STUPM | DOEPMSK_XFRCM;
 8105b2e:	693b      	ldr	r3, [r7, #16]
 8105b30:	2209      	movs	r2, #9
 8105b32:	f8c3 2814 	str.w	r2, [r3, #2068]	; 0x814
  dwc2->diepmsk = DIEPMSK_TOM | DIEPMSK_XFRCM;
 8105b36:	693b      	ldr	r3, [r7, #16]
 8105b38:	2209      	movs	r2, #9
 8105b3a:	f8c3 2810 	str.w	r2, [r3, #2064]	; 0x810
  //   For Isochronous, largest EP size can be 1023/1024 for FS/HS respectively. In addition if multiple ISO
  //   are enabled at least "2 x (Largest-EPsize/4) + 1" are recommended.  Maybe provide a macro for application to
  //   overwrite this.

  // EP0 out max is 64
  dwc2->grxfsiz = calc_grxfsiz(64, ep_count);
 8105b3e:	7bfb      	ldrb	r3, [r7, #15]
 8105b40:	4619      	mov	r1, r3
 8105b42:	2040      	movs	r0, #64	; 0x40
 8105b44:	f7ff ff54 	bl	81059f0 <calc_grxfsiz>
 8105b48:	4603      	mov	r3, r0
 8105b4a:	461a      	mov	r2, r3
 8105b4c:	693b      	ldr	r3, [r7, #16]
 8105b4e:	625a      	str	r2, [r3, #36]	; 0x24

  // Setup the control endpoint 0
  _allocated_fifo_words_tx = 16;
 8105b50:	4b1c      	ldr	r3, [pc, #112]	; (8105bc4 <bus_reset+0x11c>)
 8105b52:	2210      	movs	r2, #16
 8105b54:	801a      	strh	r2, [r3, #0]

  // Control IN uses FIFO 0 with 64 bytes ( 16 32-bit word )
  dwc2->dieptxf0 = (16 << DIEPTXF0_TX0FD_Pos) | (_dwc2_controller[rhport].ep_fifo_size / 4 - _allocated_fifo_words_tx);
 8105b56:	79fb      	ldrb	r3, [r7, #7]
 8105b58:	4a16      	ldr	r2, [pc, #88]	; (8105bb4 <bus_reset+0x10c>)
 8105b5a:	011b      	lsls	r3, r3, #4
 8105b5c:	4413      	add	r3, r2
 8105b5e:	330c      	adds	r3, #12
 8105b60:	681b      	ldr	r3, [r3, #0]
 8105b62:	089b      	lsrs	r3, r3, #2
 8105b64:	4a17      	ldr	r2, [pc, #92]	; (8105bc4 <bus_reset+0x11c>)
 8105b66:	8812      	ldrh	r2, [r2, #0]
 8105b68:	1a9b      	subs	r3, r3, r2
 8105b6a:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8105b6e:	693b      	ldr	r3, [r7, #16]
 8105b70:	629a      	str	r2, [r3, #40]	; 0x28

  // Fixed control EP0 size to 64 bytes
  dwc2->epin[0].diepctl &= ~(0x03 << DIEPCTL_MPSIZ_Pos);
 8105b72:	693b      	ldr	r3, [r7, #16]
 8105b74:	f8d3 3900 	ldr.w	r3, [r3, #2304]	; 0x900
 8105b78:	f023 0203 	bic.w	r2, r3, #3
 8105b7c:	693b      	ldr	r3, [r7, #16]
 8105b7e:	f8c3 2900 	str.w	r2, [r3, #2304]	; 0x900
  xfer_status[0][TUSB_DIR_OUT].max_size = 64;
 8105b82:	4b0d      	ldr	r3, [pc, #52]	; (8105bb8 <bus_reset+0x110>)
 8105b84:	2240      	movs	r2, #64	; 0x40
 8105b86:	815a      	strh	r2, [r3, #10]
  xfer_status[0][TUSB_DIR_IN].max_size = 64;
 8105b88:	4b0b      	ldr	r3, [pc, #44]	; (8105bb8 <bus_reset+0x110>)
 8105b8a:	2240      	movs	r2, #64	; 0x40
 8105b8c:	835a      	strh	r2, [r3, #26]

  dwc2->epout[0].doeptsiz |= (3 << DOEPTSIZ_STUPCNT_Pos);
 8105b8e:	693b      	ldr	r3, [r7, #16]
 8105b90:	f8d3 3b10 	ldr.w	r3, [r3, #2832]	; 0xb10
 8105b94:	f043 42c0 	orr.w	r2, r3, #1610612736	; 0x60000000
 8105b98:	693b      	ldr	r3, [r7, #16]
 8105b9a:	f8c3 2b10 	str.w	r2, [r3, #2832]	; 0xb10

  dwc2->gintmsk |= GINTMSK_OEPINT | GINTMSK_IEPINT;
 8105b9e:	693b      	ldr	r3, [r7, #16]
 8105ba0:	699b      	ldr	r3, [r3, #24]
 8105ba2:	f443 2240 	orr.w	r2, r3, #786432	; 0xc0000
 8105ba6:	693b      	ldr	r3, [r7, #16]
 8105ba8:	619a      	str	r2, [r3, #24]
}
 8105baa:	bf00      	nop
 8105bac:	3718      	adds	r7, #24
 8105bae:	46bd      	mov	sp, r7
 8105bb0:	bd80      	pop	{r7, pc}
 8105bb2:	bf00      	nop
 8105bb4:	08111edc 	.word	0x08111edc
 8105bb8:	10001104 	.word	0x10001104
 8105bbc:	1000122a 	.word	0x1000122a
 8105bc0:	1000122b 	.word	0x1000122b
 8105bc4:	10001228 	.word	0x10001228

08105bc8 <edpt_schedule_packets>:

static void edpt_schedule_packets(uint8_t rhport, uint8_t const epnum, uint8_t const dir, uint16_t const num_packets,
                                  uint16_t total_bytes) {
 8105bc8:	b490      	push	{r4, r7}
 8105bca:	b08a      	sub	sp, #40	; 0x28
 8105bcc:	af00      	add	r7, sp, #0
 8105bce:	4604      	mov	r4, r0
 8105bd0:	4608      	mov	r0, r1
 8105bd2:	4611      	mov	r1, r2
 8105bd4:	461a      	mov	r2, r3
 8105bd6:	4623      	mov	r3, r4
 8105bd8:	71fb      	strb	r3, [r7, #7]
 8105bda:	4603      	mov	r3, r0
 8105bdc:	71bb      	strb	r3, [r7, #6]
 8105bde:	460b      	mov	r3, r1
 8105be0:	717b      	strb	r3, [r7, #5]
 8105be2:	4613      	mov	r3, r2
 8105be4:	807b      	strh	r3, [r7, #2]
  (void) rhport;

  dwc2_regs_t* dwc2 = DWC2_REG(rhport);
 8105be6:	79fb      	ldrb	r3, [r7, #7]
 8105be8:	4a71      	ldr	r2, [pc, #452]	; (8105db0 <edpt_schedule_packets+0x1e8>)
 8105bea:	011b      	lsls	r3, r3, #4
 8105bec:	4413      	add	r3, r2
 8105bee:	681b      	ldr	r3, [r3, #0]
 8105bf0:	627b      	str	r3, [r7, #36]	; 0x24

  // EP0 is limited to one packet each xfer
  // We use multiple transaction of xfer->max_size length to get a whole transfer done
  if (epnum == 0) {
 8105bf2:	79bb      	ldrb	r3, [r7, #6]
 8105bf4:	2b00      	cmp	r3, #0
 8105bf6:	d121      	bne.n	8105c3c <edpt_schedule_packets+0x74>
    xfer_ctl_t* const xfer = XFER_CTL_BASE(epnum, dir);
 8105bf8:	79ba      	ldrb	r2, [r7, #6]
 8105bfa:	797b      	ldrb	r3, [r7, #5]
 8105bfc:	0052      	lsls	r2, r2, #1
 8105bfe:	4413      	add	r3, r2
 8105c00:	011b      	lsls	r3, r3, #4
 8105c02:	4a6c      	ldr	r2, [pc, #432]	; (8105db4 <edpt_schedule_packets+0x1ec>)
 8105c04:	4413      	add	r3, r2
 8105c06:	623b      	str	r3, [r7, #32]
    total_bytes = tu_min16(ep0_pending[dir], xfer->max_size);
 8105c08:	797b      	ldrb	r3, [r7, #5]
 8105c0a:	4a6b      	ldr	r2, [pc, #428]	; (8105db8 <edpt_schedule_packets+0x1f0>)
 8105c0c:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 8105c10:	6a3b      	ldr	r3, [r7, #32]
 8105c12:	895b      	ldrh	r3, [r3, #10]
 8105c14:	81fa      	strh	r2, [r7, #14]
 8105c16:	81bb      	strh	r3, [r7, #12]
TU_ATTR_ALWAYS_INLINE static inline uint16_t tu_min16 (uint16_t x, uint16_t y) { return (x < y) ? x : y; }
 8105c18:	89fa      	ldrh	r2, [r7, #14]
 8105c1a:	89bb      	ldrh	r3, [r7, #12]
 8105c1c:	4293      	cmp	r3, r2
 8105c1e:	bf28      	it	cs
 8105c20:	4613      	movcs	r3, r2
 8105c22:	b29b      	uxth	r3, r3
 8105c24:	863b      	strh	r3, [r7, #48]	; 0x30
    ep0_pending[dir] -= total_bytes;
 8105c26:	797b      	ldrb	r3, [r7, #5]
 8105c28:	4a63      	ldr	r2, [pc, #396]	; (8105db8 <edpt_schedule_packets+0x1f0>)
 8105c2a:	f832 1013 	ldrh.w	r1, [r2, r3, lsl #1]
 8105c2e:	797b      	ldrb	r3, [r7, #5]
 8105c30:	8e3a      	ldrh	r2, [r7, #48]	; 0x30
 8105c32:	1a8a      	subs	r2, r1, r2
 8105c34:	b291      	uxth	r1, r2
 8105c36:	4a60      	ldr	r2, [pc, #384]	; (8105db8 <edpt_schedule_packets+0x1f0>)
 8105c38:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
  }

  // IN and OUT endpoint xfers are interrupt-driven, we just schedule them here.
  if (dir == TUSB_DIR_IN) {
 8105c3c:	797b      	ldrb	r3, [r7, #5]
 8105c3e:	2b01      	cmp	r3, #1
 8105c40:	d156      	bne.n	8105cf0 <edpt_schedule_packets+0x128>
    dwc2_epin_t* epin = dwc2->epin;
 8105c42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8105c44:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8105c48:	617b      	str	r3, [r7, #20]

    // A full IN transfer (multiple packets, possibly) triggers XFRC.
    epin[epnum].dieptsiz = (num_packets << DIEPTSIZ_PKTCNT_Pos) |
 8105c4a:	887b      	ldrh	r3, [r7, #2]
 8105c4c:	04db      	lsls	r3, r3, #19
 8105c4e:	4618      	mov	r0, r3
                           ((total_bytes << DIEPTSIZ_XFRSIZ_Pos) & DIEPTSIZ_XFRSIZ_Msk);
 8105c50:	8e3a      	ldrh	r2, [r7, #48]	; 0x30
    epin[epnum].dieptsiz = (num_packets << DIEPTSIZ_PKTCNT_Pos) |
 8105c52:	79bb      	ldrb	r3, [r7, #6]
 8105c54:	015b      	lsls	r3, r3, #5
 8105c56:	6979      	ldr	r1, [r7, #20]
 8105c58:	440b      	add	r3, r1
 8105c5a:	4302      	orrs	r2, r0
 8105c5c:	611a      	str	r2, [r3, #16]

    epin[epnum].diepctl |= DIEPCTL_EPENA | DIEPCTL_CNAK;
 8105c5e:	79bb      	ldrb	r3, [r7, #6]
 8105c60:	015b      	lsls	r3, r3, #5
 8105c62:	697a      	ldr	r2, [r7, #20]
 8105c64:	4413      	add	r3, r2
 8105c66:	681a      	ldr	r2, [r3, #0]
 8105c68:	79bb      	ldrb	r3, [r7, #6]
 8105c6a:	015b      	lsls	r3, r3, #5
 8105c6c:	6979      	ldr	r1, [r7, #20]
 8105c6e:	440b      	add	r3, r1
 8105c70:	f042 4204 	orr.w	r2, r2, #2214592512	; 0x84000000
 8105c74:	601a      	str	r2, [r3, #0]

    // For ISO endpoint set correct odd/even bit for next frame.
    if ((epin[epnum].diepctl & DIEPCTL_EPTYP) == DIEPCTL_EPTYP_0 && (XFER_CTL_BASE(epnum, dir))->interval == 1) {
 8105c76:	79bb      	ldrb	r3, [r7, #6]
 8105c78:	015b      	lsls	r3, r3, #5
 8105c7a:	697a      	ldr	r2, [r7, #20]
 8105c7c:	4413      	add	r3, r2
 8105c7e:	681b      	ldr	r3, [r3, #0]
 8105c80:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
 8105c84:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8105c88:	d123      	bne.n	8105cd2 <edpt_schedule_packets+0x10a>
 8105c8a:	79ba      	ldrb	r2, [r7, #6]
 8105c8c:	797b      	ldrb	r3, [r7, #5]
 8105c8e:	4949      	ldr	r1, [pc, #292]	; (8105db4 <edpt_schedule_packets+0x1ec>)
 8105c90:	0052      	lsls	r2, r2, #1
 8105c92:	4413      	add	r3, r2
 8105c94:	011b      	lsls	r3, r3, #4
 8105c96:	440b      	add	r3, r1
 8105c98:	330c      	adds	r3, #12
 8105c9a:	781b      	ldrb	r3, [r3, #0]
 8105c9c:	2b01      	cmp	r3, #1
 8105c9e:	d118      	bne.n	8105cd2 <edpt_schedule_packets+0x10a>
      // Take odd/even bit from frame counter.
      uint32_t const odd_frame_now = (dwc2->dsts & (1u << DSTS_FNSOF_Pos));
 8105ca0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8105ca2:	f8d3 3808 	ldr.w	r3, [r3, #2056]	; 0x808
 8105ca6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8105caa:	613b      	str	r3, [r7, #16]
      epin[epnum].diepctl |= (odd_frame_now ? DIEPCTL_SD0PID_SEVNFRM_Msk : DIEPCTL_SODDFRM_Msk);
 8105cac:	79bb      	ldrb	r3, [r7, #6]
 8105cae:	015b      	lsls	r3, r3, #5
 8105cb0:	697a      	ldr	r2, [r7, #20]
 8105cb2:	4413      	add	r3, r2
 8105cb4:	681a      	ldr	r2, [r3, #0]
 8105cb6:	693b      	ldr	r3, [r7, #16]
 8105cb8:	2b00      	cmp	r3, #0
 8105cba:	d002      	beq.n	8105cc2 <edpt_schedule_packets+0xfa>
 8105cbc:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
 8105cc0:	e001      	b.n	8105cc6 <edpt_schedule_packets+0xfe>
 8105cc2:	f04f 5100 	mov.w	r1, #536870912	; 0x20000000
 8105cc6:	79bb      	ldrb	r3, [r7, #6]
 8105cc8:	015b      	lsls	r3, r3, #5
 8105cca:	6978      	ldr	r0, [r7, #20]
 8105ccc:	4403      	add	r3, r0
 8105cce:	430a      	orrs	r2, r1
 8105cd0:	601a      	str	r2, [r3, #0]
    }
    // Enable fifo empty interrupt only if there are something to put in the fifo.
    if (total_bytes != 0) {
 8105cd2:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8105cd4:	2b00      	cmp	r3, #0
 8105cd6:	d065      	beq.n	8105da4 <edpt_schedule_packets+0x1dc>
      dwc2->diepempmsk |= (1 << epnum);
 8105cd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8105cda:	f8d3 3834 	ldr.w	r3, [r3, #2100]	; 0x834
 8105cde:	79ba      	ldrb	r2, [r7, #6]
 8105ce0:	2101      	movs	r1, #1
 8105ce2:	fa01 f202 	lsl.w	r2, r1, r2
 8105ce6:	431a      	orrs	r2, r3
 8105ce8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8105cea:	f8c3 2834 	str.w	r2, [r3, #2100]	; 0x834
      // Take odd/even bit from frame counter.
      uint32_t const odd_frame_now = (dwc2->dsts & (1u << DSTS_FNSOF_Pos));
      epout[epnum].doepctl |= (odd_frame_now ? DOEPCTL_SD0PID_SEVNFRM_Msk : DOEPCTL_SODDFRM_Msk);
    }
  }
}
 8105cee:	e059      	b.n	8105da4 <edpt_schedule_packets+0x1dc>
    dwc2_epout_t* epout = dwc2->epout;
 8105cf0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8105cf2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8105cf6:	61fb      	str	r3, [r7, #28]
    epout[epnum].doeptsiz &= ~(DOEPTSIZ_PKTCNT_Msk | DOEPTSIZ_XFRSIZ);
 8105cf8:	79bb      	ldrb	r3, [r7, #6]
 8105cfa:	015b      	lsls	r3, r3, #5
 8105cfc:	69fa      	ldr	r2, [r7, #28]
 8105cfe:	4413      	add	r3, r2
 8105d00:	691a      	ldr	r2, [r3, #16]
 8105d02:	79bb      	ldrb	r3, [r7, #6]
 8105d04:	015b      	lsls	r3, r3, #5
 8105d06:	69f9      	ldr	r1, [r7, #28]
 8105d08:	440b      	add	r3, r1
 8105d0a:	f002 4260 	and.w	r2, r2, #3758096384	; 0xe0000000
 8105d0e:	611a      	str	r2, [r3, #16]
    epout[epnum].doeptsiz |= (num_packets << DOEPTSIZ_PKTCNT_Pos) |
 8105d10:	79bb      	ldrb	r3, [r7, #6]
 8105d12:	015b      	lsls	r3, r3, #5
 8105d14:	69fa      	ldr	r2, [r7, #28]
 8105d16:	4413      	add	r3, r2
 8105d18:	6919      	ldr	r1, [r3, #16]
 8105d1a:	887b      	ldrh	r3, [r7, #2]
 8105d1c:	04db      	lsls	r3, r3, #19
 8105d1e:	461a      	mov	r2, r3
                             ((total_bytes << DOEPTSIZ_XFRSIZ_Pos) & DOEPTSIZ_XFRSIZ_Msk);
 8105d20:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
    epout[epnum].doeptsiz |= (num_packets << DOEPTSIZ_PKTCNT_Pos) |
 8105d22:	431a      	orrs	r2, r3
 8105d24:	79bb      	ldrb	r3, [r7, #6]
 8105d26:	015b      	lsls	r3, r3, #5
 8105d28:	69f8      	ldr	r0, [r7, #28]
 8105d2a:	4403      	add	r3, r0
 8105d2c:	430a      	orrs	r2, r1
 8105d2e:	611a      	str	r2, [r3, #16]
    epout[epnum].doepctl |= DOEPCTL_EPENA | DOEPCTL_CNAK;
 8105d30:	79bb      	ldrb	r3, [r7, #6]
 8105d32:	015b      	lsls	r3, r3, #5
 8105d34:	69fa      	ldr	r2, [r7, #28]
 8105d36:	4413      	add	r3, r2
 8105d38:	681a      	ldr	r2, [r3, #0]
 8105d3a:	79bb      	ldrb	r3, [r7, #6]
 8105d3c:	015b      	lsls	r3, r3, #5
 8105d3e:	69f9      	ldr	r1, [r7, #28]
 8105d40:	440b      	add	r3, r1
 8105d42:	f042 4204 	orr.w	r2, r2, #2214592512	; 0x84000000
 8105d46:	601a      	str	r2, [r3, #0]
    if ((epout[epnum].doepctl & DOEPCTL_EPTYP) == DOEPCTL_EPTYP_0 &&
 8105d48:	79bb      	ldrb	r3, [r7, #6]
 8105d4a:	015b      	lsls	r3, r3, #5
 8105d4c:	69fa      	ldr	r2, [r7, #28]
 8105d4e:	4413      	add	r3, r2
 8105d50:	681b      	ldr	r3, [r3, #0]
 8105d52:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
 8105d56:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8105d5a:	d123      	bne.n	8105da4 <edpt_schedule_packets+0x1dc>
        XFER_CTL_BASE(epnum, dir)->interval == 1) {
 8105d5c:	79ba      	ldrb	r2, [r7, #6]
 8105d5e:	797b      	ldrb	r3, [r7, #5]
 8105d60:	4914      	ldr	r1, [pc, #80]	; (8105db4 <edpt_schedule_packets+0x1ec>)
 8105d62:	0052      	lsls	r2, r2, #1
 8105d64:	4413      	add	r3, r2
 8105d66:	011b      	lsls	r3, r3, #4
 8105d68:	440b      	add	r3, r1
 8105d6a:	330c      	adds	r3, #12
 8105d6c:	781b      	ldrb	r3, [r3, #0]
    if ((epout[epnum].doepctl & DOEPCTL_EPTYP) == DOEPCTL_EPTYP_0 &&
 8105d6e:	2b01      	cmp	r3, #1
 8105d70:	d118      	bne.n	8105da4 <edpt_schedule_packets+0x1dc>
      uint32_t const odd_frame_now = (dwc2->dsts & (1u << DSTS_FNSOF_Pos));
 8105d72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8105d74:	f8d3 3808 	ldr.w	r3, [r3, #2056]	; 0x808
 8105d78:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8105d7c:	61bb      	str	r3, [r7, #24]
      epout[epnum].doepctl |= (odd_frame_now ? DOEPCTL_SD0PID_SEVNFRM_Msk : DOEPCTL_SODDFRM_Msk);
 8105d7e:	79bb      	ldrb	r3, [r7, #6]
 8105d80:	015b      	lsls	r3, r3, #5
 8105d82:	69fa      	ldr	r2, [r7, #28]
 8105d84:	4413      	add	r3, r2
 8105d86:	681a      	ldr	r2, [r3, #0]
 8105d88:	69bb      	ldr	r3, [r7, #24]
 8105d8a:	2b00      	cmp	r3, #0
 8105d8c:	d002      	beq.n	8105d94 <edpt_schedule_packets+0x1cc>
 8105d8e:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
 8105d92:	e001      	b.n	8105d98 <edpt_schedule_packets+0x1d0>
 8105d94:	f04f 5100 	mov.w	r1, #536870912	; 0x20000000
 8105d98:	79bb      	ldrb	r3, [r7, #6]
 8105d9a:	015b      	lsls	r3, r3, #5
 8105d9c:	69f8      	ldr	r0, [r7, #28]
 8105d9e:	4403      	add	r3, r0
 8105da0:	430a      	orrs	r2, r1
 8105da2:	601a      	str	r2, [r3, #0]
}
 8105da4:	bf00      	nop
 8105da6:	3728      	adds	r7, #40	; 0x28
 8105da8:	46bd      	mov	sp, r7
 8105daa:	bc90      	pop	{r4, r7}
 8105dac:	4770      	bx	lr
 8105dae:	bf00      	nop
 8105db0:	08111edc 	.word	0x08111edc
 8105db4:	10001104 	.word	0x10001104
 8105db8:	10001224 	.word	0x10001224

08105dbc <reset_core>:
  TU_LOG(DWC2_DEBUG, "0x%08lX\r\n", p[5]);
}

#endif

static void reset_core(dwc2_regs_t* dwc2) {
 8105dbc:	b480      	push	{r7}
 8105dbe:	b083      	sub	sp, #12
 8105dc0:	af00      	add	r7, sp, #0
 8105dc2:	6078      	str	r0, [r7, #4]
  // reset core
  dwc2->grstctl |= GRSTCTL_CSRST;
 8105dc4:	687b      	ldr	r3, [r7, #4]
 8105dc6:	691b      	ldr	r3, [r3, #16]
 8105dc8:	f043 0201 	orr.w	r2, r3, #1
 8105dcc:	687b      	ldr	r3, [r7, #4]
 8105dce:	611a      	str	r2, [r3, #16]

  // wait for reset bit is cleared
  // TODO version 4.20a should wait for RESET DONE mask
  while (dwc2->grstctl & GRSTCTL_CSRST) {}
 8105dd0:	bf00      	nop
 8105dd2:	687b      	ldr	r3, [r7, #4]
 8105dd4:	691b      	ldr	r3, [r3, #16]
 8105dd6:	f003 0301 	and.w	r3, r3, #1
 8105dda:	2b00      	cmp	r3, #0
 8105ddc:	d1f9      	bne.n	8105dd2 <reset_core+0x16>

  // wait for AHB master IDLE
  while (!(dwc2->grstctl & GRSTCTL_AHBIDL)) {}
 8105dde:	bf00      	nop
 8105de0:	687b      	ldr	r3, [r7, #4]
 8105de2:	691b      	ldr	r3, [r3, #16]
 8105de4:	2b00      	cmp	r3, #0
 8105de6:	dafb      	bge.n	8105de0 <reset_core+0x24>

  // wait for device mode ?
}
 8105de8:	bf00      	nop
 8105dea:	bf00      	nop
 8105dec:	370c      	adds	r7, #12
 8105dee:	46bd      	mov	sp, r7
 8105df0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8105df4:	4770      	bx	lr

08105df6 <phy_hs_supported>:

static bool phy_hs_supported(dwc2_regs_t* dwc2) {
 8105df6:	b480      	push	{r7}
 8105df8:	b083      	sub	sp, #12
 8105dfa:	af00      	add	r7, sp, #0
 8105dfc:	6078      	str	r0, [r7, #4]
  // note: esp32 incorrect report its hs_phy_type as utmi
#if TU_CHECK_MCU(OPT_MCU_ESP32S2, OPT_MCU_ESP32S3)
  return false;
#else
  return TUD_OPT_HIGH_SPEED && dwc2->ghwcfg2_bm.hs_phy_type != HS_PHY_TYPE_NONE;
 8105dfe:	2300      	movs	r3, #0
#endif
}
 8105e00:	4618      	mov	r0, r3
 8105e02:	370c      	adds	r7, #12
 8105e04:	46bd      	mov	sp, r7
 8105e06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8105e0a:	4770      	bx	lr

08105e0c <phy_fs_init>:

static void phy_fs_init(dwc2_regs_t* dwc2) {
 8105e0c:	b580      	push	{r7, lr}
 8105e0e:	b082      	sub	sp, #8
 8105e10:	af00      	add	r7, sp, #0
 8105e12:	6078      	str	r0, [r7, #4]
  TU_LOG(DWC2_DEBUG, "Fullspeed PHY init\r\n");

  // Select FS PHY
  dwc2->gusbcfg |= GUSBCFG_PHYSEL;
 8105e14:	687b      	ldr	r3, [r7, #4]
 8105e16:	68db      	ldr	r3, [r3, #12]
 8105e18:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8105e1c:	687b      	ldr	r3, [r7, #4]
 8105e1e:	60da      	str	r2, [r3, #12]

  // MCU specific PHY init before reset
  dwc2_phy_init(dwc2, HS_PHY_TYPE_NONE);
 8105e20:	2100      	movs	r1, #0
 8105e22:	6878      	ldr	r0, [r7, #4]
 8105e24:	f7ff fd34 	bl	8105890 <dwc2_phy_init>

  // Reset core after selecting PHY
  reset_core(dwc2);
 8105e28:	6878      	ldr	r0, [r7, #4]
 8105e2a:	f7ff ffc7 	bl	8105dbc <reset_core>

  // USB turnaround time is critical for certification where long cables and 5-Hubs are used.
  // So if you need the AHB to run at less than 30 MHz, and if USB turnaround time is not critical,
  // these bits can be programmed to a larger value. Default is 5
  dwc2->gusbcfg = (dwc2->gusbcfg & ~GUSBCFG_TRDT_Msk) | (5u << GUSBCFG_TRDT_Pos);
 8105e2e:	687b      	ldr	r3, [r7, #4]
 8105e30:	68db      	ldr	r3, [r3, #12]
 8105e32:	f423 5370 	bic.w	r3, r3, #15360	; 0x3c00
 8105e36:	f443 52a0 	orr.w	r2, r3, #5120	; 0x1400
 8105e3a:	687b      	ldr	r3, [r7, #4]
 8105e3c:	60da      	str	r2, [r3, #12]

  // MCU specific PHY update post reset
  dwc2_phy_update(dwc2, HS_PHY_TYPE_NONE);
 8105e3e:	2100      	movs	r1, #0
 8105e40:	6878      	ldr	r0, [r7, #4]
 8105e42:	f7ff fd5f 	bl	8105904 <dwc2_phy_update>

  // set max speed
  dwc2->dcfg = (dwc2->dcfg & ~DCFG_DSPD_Msk) | (DCFG_DSPD_FS << DCFG_DSPD_Pos);
 8105e46:	687b      	ldr	r3, [r7, #4]
 8105e48:	f8d3 3800 	ldr.w	r3, [r3, #2048]	; 0x800
 8105e4c:	f043 0203 	orr.w	r2, r3, #3
 8105e50:	687b      	ldr	r3, [r7, #4]
 8105e52:	f8c3 2800 	str.w	r2, [r3, #2048]	; 0x800
}
 8105e56:	bf00      	nop
 8105e58:	3708      	adds	r7, #8
 8105e5a:	46bd      	mov	sp, r7
 8105e5c:	bd80      	pop	{r7, pc}

08105e5e <phy_hs_init>:

static void phy_hs_init(dwc2_regs_t* dwc2) {
 8105e5e:	b580      	push	{r7, lr}
 8105e60:	b084      	sub	sp, #16
 8105e62:	af00      	add	r7, sp, #0
 8105e64:	6078      	str	r0, [r7, #4]
  uint32_t gusbcfg = dwc2->gusbcfg;
 8105e66:	687b      	ldr	r3, [r7, #4]
 8105e68:	68db      	ldr	r3, [r3, #12]
 8105e6a:	60fb      	str	r3, [r7, #12]

  // De-select FS PHY
  gusbcfg &= ~GUSBCFG_PHYSEL;
 8105e6c:	68fb      	ldr	r3, [r7, #12]
 8105e6e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8105e72:	60fb      	str	r3, [r7, #12]

  if (dwc2->ghwcfg2_bm.hs_phy_type == HS_PHY_TYPE_ULPI) {
 8105e74:	687b      	ldr	r3, [r7, #4]
 8105e76:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8105e7a:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8105e7e:	b2db      	uxtb	r3, r3
 8105e80:	2b80      	cmp	r3, #128	; 0x80
 8105e82:	d110      	bne.n	8105ea6 <phy_hs_init+0x48>
    TU_LOG(DWC2_DEBUG, "Highspeed ULPI PHY init\r\n");

    // Select ULPI
    gusbcfg |= GUSBCFG_ULPI_UTMI_SEL;
 8105e84:	68fb      	ldr	r3, [r7, #12]
 8105e86:	f043 0310 	orr.w	r3, r3, #16
 8105e8a:	60fb      	str	r3, [r7, #12]

    // ULPI 8-bit interface, single data rate
    gusbcfg &= ~(GUSBCFG_PHYIF16 | GUSBCFG_DDRSEL);
 8105e8c:	68fb      	ldr	r3, [r7, #12]
 8105e8e:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 8105e92:	60fb      	str	r3, [r7, #12]

    // default internal VBUS Indicator and Drive
    gusbcfg &= ~(GUSBCFG_ULPIEVBUSD | GUSBCFG_ULPIEVBUSI);
 8105e94:	68fb      	ldr	r3, [r7, #12]
 8105e96:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 8105e9a:	60fb      	str	r3, [r7, #12]

    // Disable FS/LS ULPI
    gusbcfg &= ~(GUSBCFG_ULPIFSLS | GUSBCFG_ULPICSM);
 8105e9c:	68fb      	ldr	r3, [r7, #12]
 8105e9e:	f423 2320 	bic.w	r3, r3, #655360	; 0xa0000
 8105ea2:	60fb      	str	r3, [r7, #12]
 8105ea4:	e00f      	b.n	8105ec6 <phy_hs_init+0x68>
  } else {
    TU_LOG(DWC2_DEBUG, "Highspeed UTMI+ PHY init\r\n");

    // Select UTMI+ with 8-bit interface
    gusbcfg &= ~(GUSBCFG_ULPI_UTMI_SEL | GUSBCFG_PHYIF16);
 8105ea6:	68fb      	ldr	r3, [r7, #12]
 8105ea8:	f023 0318 	bic.w	r3, r3, #24
 8105eac:	60fb      	str	r3, [r7, #12]

    // Set 16-bit interface if supported
    if (dwc2->ghwcfg4_bm.utmi_phy_data_width) gusbcfg |= GUSBCFG_PHYIF16;
 8105eae:	687b      	ldr	r3, [r7, #4]
 8105eb0:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8105eb4:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8105eb8:	b2db      	uxtb	r3, r3
 8105eba:	2b00      	cmp	r3, #0
 8105ebc:	d003      	beq.n	8105ec6 <phy_hs_init+0x68>
 8105ebe:	68fb      	ldr	r3, [r7, #12]
 8105ec0:	f043 0308 	orr.w	r3, r3, #8
 8105ec4:	60fb      	str	r3, [r7, #12]
  }

  // Apply config
  dwc2->gusbcfg = gusbcfg;
 8105ec6:	687b      	ldr	r3, [r7, #4]
 8105ec8:	68fa      	ldr	r2, [r7, #12]
 8105eca:	60da      	str	r2, [r3, #12]

  // mcu specific phy init
  dwc2_phy_init(dwc2, dwc2->ghwcfg2_bm.hs_phy_type);
 8105ecc:	687b      	ldr	r3, [r7, #4]
 8105ece:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8105ed2:	f3c3 1381 	ubfx	r3, r3, #6, #2
 8105ed6:	b2db      	uxtb	r3, r3
 8105ed8:	4619      	mov	r1, r3
 8105eda:	6878      	ldr	r0, [r7, #4]
 8105edc:	f7ff fcd8 	bl	8105890 <dwc2_phy_init>

  // Reset core after selecting PHY
  reset_core(dwc2);
 8105ee0:	6878      	ldr	r0, [r7, #4]
 8105ee2:	f7ff ff6b 	bl	8105dbc <reset_core>

  // Set turn-around, must after core reset otherwise it will be clear
  // - 9 if using 8-bit PHY interface
  // - 5 if using 16-bit PHY interface
  gusbcfg &= ~GUSBCFG_TRDT_Msk;
 8105ee6:	68fb      	ldr	r3, [r7, #12]
 8105ee8:	f423 5370 	bic.w	r3, r3, #15360	; 0x3c00
 8105eec:	60fb      	str	r3, [r7, #12]
  gusbcfg |= (dwc2->ghwcfg4_bm.utmi_phy_data_width ? 5u : 9u) << GUSBCFG_TRDT_Pos;
 8105eee:	687b      	ldr	r3, [r7, #4]
 8105ef0:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8105ef4:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8105ef8:	b2db      	uxtb	r3, r3
 8105efa:	2b00      	cmp	r3, #0
 8105efc:	d002      	beq.n	8105f04 <phy_hs_init+0xa6>
 8105efe:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8105f02:	e001      	b.n	8105f08 <phy_hs_init+0xaa>
 8105f04:	f44f 5310 	mov.w	r3, #9216	; 0x2400
 8105f08:	68fa      	ldr	r2, [r7, #12]
 8105f0a:	4313      	orrs	r3, r2
 8105f0c:	60fb      	str	r3, [r7, #12]
  dwc2->gusbcfg = gusbcfg;
 8105f0e:	687b      	ldr	r3, [r7, #4]
 8105f10:	68fa      	ldr	r2, [r7, #12]
 8105f12:	60da      	str	r2, [r3, #12]

  // MCU specific PHY update post reset
  dwc2_phy_update(dwc2, dwc2->ghwcfg2_bm.hs_phy_type);
 8105f14:	687b      	ldr	r3, [r7, #4]
 8105f16:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8105f1a:	f3c3 1381 	ubfx	r3, r3, #6, #2
 8105f1e:	b2db      	uxtb	r3, r3
 8105f20:	4619      	mov	r1, r3
 8105f22:	6878      	ldr	r0, [r7, #4]
 8105f24:	f7ff fcee 	bl	8105904 <dwc2_phy_update>

  // Set max speed
  uint32_t dcfg = dwc2->dcfg;
 8105f28:	687b      	ldr	r3, [r7, #4]
 8105f2a:	f8d3 3800 	ldr.w	r3, [r3, #2048]	; 0x800
 8105f2e:	60bb      	str	r3, [r7, #8]
  dcfg &= ~DCFG_DSPD_Msk;
 8105f30:	68bb      	ldr	r3, [r7, #8]
 8105f32:	f023 0303 	bic.w	r3, r3, #3
 8105f36:	60bb      	str	r3, [r7, #8]
  dcfg |= DCFG_DSPD_HS << DCFG_DSPD_Pos;

  // XCVRDLY: transceiver delay between xcvr_sel and txvalid during device chirp is required
  // when using with some PHYs such as USB334x (USB3341, USB3343, USB3346, USB3347)
  if (dwc2->ghwcfg2_bm.hs_phy_type == HS_PHY_TYPE_ULPI) dcfg |= DCFG_XCVRDLY;
 8105f38:	687b      	ldr	r3, [r7, #4]
 8105f3a:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8105f3e:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8105f42:	b2db      	uxtb	r3, r3
 8105f44:	2b80      	cmp	r3, #128	; 0x80
 8105f46:	d103      	bne.n	8105f50 <phy_hs_init+0xf2>
 8105f48:	68bb      	ldr	r3, [r7, #8]
 8105f4a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8105f4e:	60bb      	str	r3, [r7, #8]

  dwc2->dcfg = dcfg;
 8105f50:	687b      	ldr	r3, [r7, #4]
 8105f52:	68ba      	ldr	r2, [r7, #8]
 8105f54:	f8c3 2800 	str.w	r2, [r3, #2048]	; 0x800
}
 8105f58:	bf00      	nop
 8105f5a:	3710      	adds	r7, #16
 8105f5c:	46bd      	mov	sp, r7
 8105f5e:	bd80      	pop	{r7, pc}

08105f60 <check_dwc2>:

static bool check_dwc2(dwc2_regs_t* dwc2) {
 8105f60:	b480      	push	{r7}
 8105f62:	b085      	sub	sp, #20
 8105f64:	af00      	add	r7, sp, #0
 8105f66:	6078      	str	r0, [r7, #4]
#endif

  // For some reasons: GD32VF103 snpsid and all hwcfg register are always zero (skip it)
  (void) dwc2;
#if !TU_CHECK_MCU(OPT_MCU_GD32VF103)
  uint32_t const gsnpsid = dwc2->gsnpsid & GSNPSID_ID_MASK;
 8105f68:	687b      	ldr	r3, [r7, #4]
 8105f6a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8105f6c:	0c1b      	lsrs	r3, r3, #16
 8105f6e:	041b      	lsls	r3, r3, #16
 8105f70:	60fb      	str	r3, [r7, #12]
  TU_ASSERT(gsnpsid == DWC2_OTG_ID || gsnpsid == DWC2_FS_IOT_ID || gsnpsid == DWC2_HS_IOT_ID);
 8105f72:	68fb      	ldr	r3, [r7, #12]
 8105f74:	4a0e      	ldr	r2, [pc, #56]	; (8105fb0 <check_dwc2+0x50>)
 8105f76:	4293      	cmp	r3, r2
 8105f78:	d012      	beq.n	8105fa0 <check_dwc2+0x40>
 8105f7a:	68fb      	ldr	r3, [r7, #12]
 8105f7c:	4a0d      	ldr	r2, [pc, #52]	; (8105fb4 <check_dwc2+0x54>)
 8105f7e:	4293      	cmp	r3, r2
 8105f80:	d00e      	beq.n	8105fa0 <check_dwc2+0x40>
 8105f82:	68fb      	ldr	r3, [r7, #12]
 8105f84:	4a0c      	ldr	r2, [pc, #48]	; (8105fb8 <check_dwc2+0x58>)
 8105f86:	4293      	cmp	r3, r2
 8105f88:	d00a      	beq.n	8105fa0 <check_dwc2+0x40>
 8105f8a:	4b0c      	ldr	r3, [pc, #48]	; (8105fbc <check_dwc2+0x5c>)
 8105f8c:	60bb      	str	r3, [r7, #8]
 8105f8e:	68bb      	ldr	r3, [r7, #8]
 8105f90:	681b      	ldr	r3, [r3, #0]
 8105f92:	f003 0301 	and.w	r3, r3, #1
 8105f96:	2b00      	cmp	r3, #0
 8105f98:	d000      	beq.n	8105f9c <check_dwc2+0x3c>
 8105f9a:	be00      	bkpt	0x0000
 8105f9c:	2300      	movs	r3, #0
 8105f9e:	e000      	b.n	8105fa2 <check_dwc2+0x42>
#endif

  return true;
 8105fa0:	2301      	movs	r3, #1
}
 8105fa2:	4618      	mov	r0, r3
 8105fa4:	3714      	adds	r7, #20
 8105fa6:	46bd      	mov	sp, r7
 8105fa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8105fac:	4770      	bx	lr
 8105fae:	bf00      	nop
 8105fb0:	4f540000 	.word	0x4f540000
 8105fb4:	55310000 	.word	0x55310000
 8105fb8:	55320000 	.word	0x55320000
 8105fbc:	e000edf0 	.word	0xe000edf0

08105fc0 <dcd_init>:

void dcd_init(uint8_t rhport) {
 8105fc0:	b580      	push	{r7, lr}
 8105fc2:	b084      	sub	sp, #16
 8105fc4:	af00      	add	r7, sp, #0
 8105fc6:	4603      	mov	r3, r0
 8105fc8:	71fb      	strb	r3, [r7, #7]
  // Programming model begins in the last section of the chapter on the USB
  // peripheral in each Reference Manual.
  dwc2_regs_t* dwc2 = DWC2_REG(rhport);
 8105fca:	79fb      	ldrb	r3, [r7, #7]
 8105fcc:	4a3e      	ldr	r2, [pc, #248]	; (81060c8 <dcd_init+0x108>)
 8105fce:	011b      	lsls	r3, r3, #4
 8105fd0:	4413      	add	r3, r2
 8105fd2:	681b      	ldr	r3, [r3, #0]
 8105fd4:	60fb      	str	r3, [r7, #12]

  // Check Synopsys ID register, failed if controller clock/power is not enabled
  if (!check_dwc2(dwc2)) return;
 8105fd6:	68f8      	ldr	r0, [r7, #12]
 8105fd8:	f7ff ffc2 	bl	8105f60 <check_dwc2>
 8105fdc:	4603      	mov	r3, r0
 8105fde:	f083 0301 	eor.w	r3, r3, #1
 8105fe2:	b2db      	uxtb	r3, r3
 8105fe4:	2b00      	cmp	r3, #0
 8105fe6:	d16b      	bne.n	81060c0 <dcd_init+0x100>
  dcd_disconnect(rhport);
 8105fe8:	79fb      	ldrb	r3, [r7, #7]
 8105fea:	4618      	mov	r0, r3
 8105fec:	f000 f8f0 	bl	81061d0 <dcd_disconnect>

  // max number of endpoints & total_fifo_size are:
  // hw_cfg2->num_dev_ep, hw_cfg2->total_fifo_size

  if (phy_hs_supported(dwc2)) {
 8105ff0:	68f8      	ldr	r0, [r7, #12]
 8105ff2:	f7ff ff00 	bl	8105df6 <phy_hs_supported>
 8105ff6:	4603      	mov	r3, r0
 8105ff8:	2b00      	cmp	r3, #0
 8105ffa:	d003      	beq.n	8106004 <dcd_init+0x44>
    phy_hs_init(dwc2); // Highspeed
 8105ffc:	68f8      	ldr	r0, [r7, #12]
 8105ffe:	f7ff ff2e 	bl	8105e5e <phy_hs_init>
 8106002:	e002      	b.n	810600a <dcd_init+0x4a>
  } else {
    phy_fs_init(dwc2); // core does not support highspeed or hs phy is not present
 8106004:	68f8      	ldr	r0, [r7, #12]
 8106006:	f7ff ff01 	bl	8105e0c <phy_fs_init>
  }

  // Restart PHY clock
  dwc2->pcgctl &= ~(PCGCTL_STOPPCLK | PCGCTL_GATEHCLK | PCGCTL_PWRCLMP | PCGCTL_RSTPDWNMODULE);
 810600a:	68fb      	ldr	r3, [r7, #12]
 810600c:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	; 0xe00
 8106010:	f023 020f 	bic.w	r2, r3, #15
 8106014:	68fb      	ldr	r3, [r7, #12]
 8106016:	f8c3 2e00 	str.w	r2, [r3, #3584]	; 0xe00
   * duration in the core to account for any additional delays
   * introduced by the PHY. This can be required, because the delay
   * introduced by the PHY in generating the linestate condition
   * can vary from one PHY to another.
   */
  dwc2->gusbcfg |= (7ul << GUSBCFG_TOCAL_Pos);
 810601a:	68fb      	ldr	r3, [r7, #12]
 810601c:	68db      	ldr	r3, [r3, #12]
 810601e:	f043 0207 	orr.w	r2, r3, #7
 8106022:	68fb      	ldr	r3, [r7, #12]
 8106024:	60da      	str	r2, [r3, #12]

  // Force device mode
  dwc2->gusbcfg = (dwc2->gusbcfg & ~GUSBCFG_FHMOD) | GUSBCFG_FDMOD;
 8106026:	68fb      	ldr	r3, [r7, #12]
 8106028:	68db      	ldr	r3, [r3, #12]
 810602a:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 810602e:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8106032:	68fb      	ldr	r3, [r7, #12]
 8106034:	60da      	str	r2, [r3, #12]

  // Clear A override, force B Valid
  dwc2->gotgctl = (dwc2->gotgctl & ~GOTGCTL_AVALOEN) | GOTGCTL_BVALOEN | GOTGCTL_BVALOVAL;
 8106036:	68fb      	ldr	r3, [r7, #12]
 8106038:	681b      	ldr	r3, [r3, #0]
 810603a:	f023 03d0 	bic.w	r3, r3, #208	; 0xd0
 810603e:	f043 02c0 	orr.w	r2, r3, #192	; 0xc0
 8106042:	68fb      	ldr	r3, [r7, #12]
 8106044:	601a      	str	r2, [r3, #0]

  // If USB host misbehaves during status portion of control xfer
  // (non zero-length packet), send STALL back and discard.
  dwc2->dcfg |= DCFG_NZLSOHSK;
 8106046:	68fb      	ldr	r3, [r7, #12]
 8106048:	f8d3 3800 	ldr.w	r3, [r3, #2048]	; 0x800
 810604c:	f043 0204 	orr.w	r2, r3, #4
 8106050:	68fb      	ldr	r3, [r7, #12]
 8106052:	f8c3 2800 	str.w	r2, [r3, #2048]	; 0x800

  // flush all TX fifo and wait for it cleared
  dwc2->grstctl = GRSTCTL_TXFFLSH | (0x10u << GRSTCTL_TXFNUM_Pos);
 8106056:	68fb      	ldr	r3, [r7, #12]
 8106058:	f44f 6284 	mov.w	r2, #1056	; 0x420
 810605c:	611a      	str	r2, [r3, #16]
  while (dwc2->grstctl & GRSTCTL_TXFFLSH_Msk) {}
 810605e:	bf00      	nop
 8106060:	68fb      	ldr	r3, [r7, #12]
 8106062:	691b      	ldr	r3, [r3, #16]
 8106064:	f003 0320 	and.w	r3, r3, #32
 8106068:	2b00      	cmp	r3, #0
 810606a:	d1f9      	bne.n	8106060 <dcd_init+0xa0>

  // flush RX fifo and wait for it cleared
  dwc2->grstctl = GRSTCTL_RXFFLSH;
 810606c:	68fb      	ldr	r3, [r7, #12]
 810606e:	2210      	movs	r2, #16
 8106070:	611a      	str	r2, [r3, #16]
  while (dwc2->grstctl & GRSTCTL_RXFFLSH_Msk) {}
 8106072:	bf00      	nop
 8106074:	68fb      	ldr	r3, [r7, #12]
 8106076:	691b      	ldr	r3, [r3, #16]
 8106078:	f003 0310 	and.w	r3, r3, #16
 810607c:	2b00      	cmp	r3, #0
 810607e:	d1f9      	bne.n	8106074 <dcd_init+0xb4>

  // Clear all interrupts
  uint32_t int_mask = dwc2->gintsts;
 8106080:	68fb      	ldr	r3, [r7, #12]
 8106082:	695b      	ldr	r3, [r3, #20]
 8106084:	60bb      	str	r3, [r7, #8]
  dwc2->gintsts |= int_mask;
 8106086:	68fb      	ldr	r3, [r7, #12]
 8106088:	695a      	ldr	r2, [r3, #20]
 810608a:	68bb      	ldr	r3, [r7, #8]
 810608c:	431a      	orrs	r2, r3
 810608e:	68fb      	ldr	r3, [r7, #12]
 8106090:	615a      	str	r2, [r3, #20]
  int_mask = dwc2->gotgint;
 8106092:	68fb      	ldr	r3, [r7, #12]
 8106094:	685b      	ldr	r3, [r3, #4]
 8106096:	60bb      	str	r3, [r7, #8]
  dwc2->gotgint |= int_mask;
 8106098:	68fb      	ldr	r3, [r7, #12]
 810609a:	685a      	ldr	r2, [r3, #4]
 810609c:	68bb      	ldr	r3, [r7, #8]
 810609e:	431a      	orrs	r2, r3
 81060a0:	68fb      	ldr	r3, [r7, #12]
 81060a2:	605a      	str	r2, [r3, #4]

  // Required as part of core initialization.
  // TODO: How should mode mismatch be handled? It will cause
  // the core to stop working/require reset.
  dwc2->gintmsk = GINTMSK_OTGINT | GINTMSK_MMISM | GINTMSK_RXFLVLM |
 81060a4:	68fb      	ldr	r3, [r7, #12]
 81060a6:	4a09      	ldr	r2, [pc, #36]	; (81060cc <dcd_init+0x10c>)
 81060a8:	619a      	str	r2, [r3, #24]
                  GINTMSK_USBSUSPM | GINTMSK_USBRST | GINTMSK_ENUMDNEM | GINTMSK_WUIM;

  // Enable global interrupt
  dwc2->gahbcfg |= GAHBCFG_GINT;
 81060aa:	68fb      	ldr	r3, [r7, #12]
 81060ac:	689b      	ldr	r3, [r3, #8]
 81060ae:	f043 0201 	orr.w	r2, r3, #1
 81060b2:	68fb      	ldr	r3, [r7, #12]
 81060b4:	609a      	str	r2, [r3, #8]
//  TU_LOG_HEX(DWC2_DEBUG, dwc2->gotgctl);
//  TU_LOG_HEX(DWC2_DEBUG, dwc2->gusbcfg);
//  TU_LOG_HEX(DWC2_DEBUG, dwc2->dcfg);
//  TU_LOG_HEX(DWC2_DEBUG, dwc2->gahbcfg);

  dcd_connect(rhport);
 81060b6:	79fb      	ldrb	r3, [r7, #7]
 81060b8:	4618      	mov	r0, r3
 81060ba:	f000 f86d 	bl	8106198 <dcd_connect>
 81060be:	e000      	b.n	81060c2 <dcd_init+0x102>
  if (!check_dwc2(dwc2)) return;
 81060c0:	bf00      	nop
}
 81060c2:	3710      	adds	r7, #16
 81060c4:	46bd      	mov	sp, r7
 81060c6:	bd80      	pop	{r7, pc}
 81060c8:	08111edc 	.word	0x08111edc
 81060cc:	80003816 	.word	0x80003816

081060d0 <dcd_int_enable>:

void dcd_int_enable(uint8_t rhport) {
 81060d0:	b580      	push	{r7, lr}
 81060d2:	b084      	sub	sp, #16
 81060d4:	af00      	add	r7, sp, #0
 81060d6:	4603      	mov	r3, r0
 81060d8:	71fb      	strb	r3, [r7, #7]
 81060da:	79fb      	ldrb	r3, [r7, #7]
 81060dc:	73fb      	strb	r3, [r7, #15]
  NVIC_EnableIRQ((IRQn_Type) _dwc2_controller[rhport].irqnum);
 81060de:	7bfb      	ldrb	r3, [r7, #15]
 81060e0:	4a06      	ldr	r2, [pc, #24]	; (81060fc <dcd_int_enable+0x2c>)
 81060e2:	011b      	lsls	r3, r3, #4
 81060e4:	4413      	add	r3, r2
 81060e6:	3304      	adds	r3, #4
 81060e8:	681b      	ldr	r3, [r3, #0]
 81060ea:	b21b      	sxth	r3, r3
 81060ec:	4618      	mov	r0, r3
 81060ee:	f7ff fb8d 	bl	810580c <__NVIC_EnableIRQ>
}
 81060f2:	bf00      	nop
  dwc2_dcd_int_enable(rhport);
}
 81060f4:	bf00      	nop
 81060f6:	3710      	adds	r7, #16
 81060f8:	46bd      	mov	sp, r7
 81060fa:	bd80      	pop	{r7, pc}
 81060fc:	08111edc 	.word	0x08111edc

08106100 <dcd_int_disable>:

void dcd_int_disable(uint8_t rhport) {
 8106100:	b580      	push	{r7, lr}
 8106102:	b084      	sub	sp, #16
 8106104:	af00      	add	r7, sp, #0
 8106106:	4603      	mov	r3, r0
 8106108:	71fb      	strb	r3, [r7, #7]
 810610a:	79fb      	ldrb	r3, [r7, #7]
 810610c:	73fb      	strb	r3, [r7, #15]
  NVIC_DisableIRQ((IRQn_Type) _dwc2_controller[rhport].irqnum);
 810610e:	7bfb      	ldrb	r3, [r7, #15]
 8106110:	4a06      	ldr	r2, [pc, #24]	; (810612c <dcd_int_disable+0x2c>)
 8106112:	011b      	lsls	r3, r3, #4
 8106114:	4413      	add	r3, r2
 8106116:	3304      	adds	r3, #4
 8106118:	681b      	ldr	r3, [r3, #0]
 810611a:	b21b      	sxth	r3, r3
 810611c:	4618      	mov	r0, r3
 810611e:	f7ff fb93 	bl	8105848 <__NVIC_DisableIRQ>
}
 8106122:	bf00      	nop
  dwc2_dcd_int_disable(rhport);
}
 8106124:	bf00      	nop
 8106126:	3710      	adds	r7, #16
 8106128:	46bd      	mov	sp, r7
 810612a:	bd80      	pop	{r7, pc}
 810612c:	08111edc 	.word	0x08111edc

08106130 <dcd_set_address>:

void dcd_set_address(uint8_t rhport, uint8_t dev_addr) {
 8106130:	b580      	push	{r7, lr}
 8106132:	b084      	sub	sp, #16
 8106134:	af00      	add	r7, sp, #0
 8106136:	4603      	mov	r3, r0
 8106138:	460a      	mov	r2, r1
 810613a:	71fb      	strb	r3, [r7, #7]
 810613c:	4613      	mov	r3, r2
 810613e:	71bb      	strb	r3, [r7, #6]
  dwc2_regs_t* dwc2 = DWC2_REG(rhport);
 8106140:	79fb      	ldrb	r3, [r7, #7]
 8106142:	4a14      	ldr	r2, [pc, #80]	; (8106194 <dcd_set_address+0x64>)
 8106144:	011b      	lsls	r3, r3, #4
 8106146:	4413      	add	r3, r2
 8106148:	681b      	ldr	r3, [r3, #0]
 810614a:	60fb      	str	r3, [r7, #12]
  dwc2->dcfg = (dwc2->dcfg & ~DCFG_DAD_Msk) | (dev_addr << DCFG_DAD_Pos);
 810614c:	68fb      	ldr	r3, [r7, #12]
 810614e:	f8d3 3800 	ldr.w	r3, [r3, #2048]	; 0x800
 8106152:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8106156:	79ba      	ldrb	r2, [r7, #6]
 8106158:	0112      	lsls	r2, r2, #4
 810615a:	431a      	orrs	r2, r3
 810615c:	68fb      	ldr	r3, [r7, #12]
 810615e:	f8c3 2800 	str.w	r2, [r3, #2048]	; 0x800
 8106162:	2300      	movs	r3, #0
 8106164:	72fb      	strb	r3, [r7, #11]
 8106166:	2301      	movs	r3, #1
 8106168:	72bb      	strb	r3, [r7, #10]
  return (uint8_t)(num | (dir ? TUSB_DIR_IN_MASK : 0));
 810616a:	7abb      	ldrb	r3, [r7, #10]
 810616c:	2b00      	cmp	r3, #0
 810616e:	d002      	beq.n	8106176 <dcd_set_address+0x46>
 8106170:	f06f 037f 	mvn.w	r3, #127	; 0x7f
 8106174:	e000      	b.n	8106178 <dcd_set_address+0x48>
 8106176:	2300      	movs	r3, #0
 8106178:	f997 200b 	ldrsb.w	r2, [r7, #11]
 810617c:	4313      	orrs	r3, r2
 810617e:	b25b      	sxtb	r3, r3
 8106180:	b2d9      	uxtb	r1, r3

  // Response with status after changing device address
  dcd_edpt_xfer(rhport, tu_edpt_addr(0, TUSB_DIR_IN), NULL, 0);
 8106182:	79f8      	ldrb	r0, [r7, #7]
 8106184:	2300      	movs	r3, #0
 8106186:	2200      	movs	r2, #0
 8106188:	f000 f9c8 	bl	810651c <dcd_edpt_xfer>
}
 810618c:	bf00      	nop
 810618e:	3710      	adds	r7, #16
 8106190:	46bd      	mov	sp, r7
 8106192:	bd80      	pop	{r7, pc}
 8106194:	08111edc 	.word	0x08111edc

08106198 <dcd_connect>:
  dwc2_remote_wakeup_delay();

  dwc2->dctl &= ~DCTL_RWUSIG;
}

void dcd_connect(uint8_t rhport) {
 8106198:	b480      	push	{r7}
 810619a:	b085      	sub	sp, #20
 810619c:	af00      	add	r7, sp, #0
 810619e:	4603      	mov	r3, r0
 81061a0:	71fb      	strb	r3, [r7, #7]
  (void) rhport;
  dwc2_regs_t* dwc2 = DWC2_REG(rhport);
 81061a2:	79fb      	ldrb	r3, [r7, #7]
 81061a4:	4a09      	ldr	r2, [pc, #36]	; (81061cc <dcd_connect+0x34>)
 81061a6:	011b      	lsls	r3, r3, #4
 81061a8:	4413      	add	r3, r2
 81061aa:	681b      	ldr	r3, [r3, #0]
 81061ac:	60fb      	str	r3, [r7, #12]
  dwc2->dctl &= ~DCTL_SDIS;
 81061ae:	68fb      	ldr	r3, [r7, #12]
 81061b0:	f8d3 3804 	ldr.w	r3, [r3, #2052]	; 0x804
 81061b4:	f023 0202 	bic.w	r2, r3, #2
 81061b8:	68fb      	ldr	r3, [r7, #12]
 81061ba:	f8c3 2804 	str.w	r2, [r3, #2052]	; 0x804
}
 81061be:	bf00      	nop
 81061c0:	3714      	adds	r7, #20
 81061c2:	46bd      	mov	sp, r7
 81061c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 81061c8:	4770      	bx	lr
 81061ca:	bf00      	nop
 81061cc:	08111edc 	.word	0x08111edc

081061d0 <dcd_disconnect>:

void dcd_disconnect(uint8_t rhport) {
 81061d0:	b480      	push	{r7}
 81061d2:	b085      	sub	sp, #20
 81061d4:	af00      	add	r7, sp, #0
 81061d6:	4603      	mov	r3, r0
 81061d8:	71fb      	strb	r3, [r7, #7]
  (void) rhport;
  dwc2_regs_t* dwc2 = DWC2_REG(rhport);
 81061da:	79fb      	ldrb	r3, [r7, #7]
 81061dc:	4a09      	ldr	r2, [pc, #36]	; (8106204 <dcd_disconnect+0x34>)
 81061de:	011b      	lsls	r3, r3, #4
 81061e0:	4413      	add	r3, r2
 81061e2:	681b      	ldr	r3, [r3, #0]
 81061e4:	60fb      	str	r3, [r7, #12]
  dwc2->dctl |= DCTL_SDIS;
 81061e6:	68fb      	ldr	r3, [r7, #12]
 81061e8:	f8d3 3804 	ldr.w	r3, [r3, #2052]	; 0x804
 81061ec:	f043 0202 	orr.w	r2, r3, #2
 81061f0:	68fb      	ldr	r3, [r7, #12]
 81061f2:	f8c3 2804 	str.w	r2, [r3, #2052]	; 0x804
}
 81061f6:	bf00      	nop
 81061f8:	3714      	adds	r7, #20
 81061fa:	46bd      	mov	sp, r7
 81061fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8106200:	4770      	bx	lr
 8106202:	bf00      	nop
 8106204:	08111edc 	.word	0x08111edc

08106208 <dcd_edpt_open>:

/*------------------------------------------------------------------*/
/* DCD Endpoint port
 *------------------------------------------------------------------*/

bool dcd_edpt_open(uint8_t rhport, tusb_desc_endpoint_t const* desc_edpt) {
 8106208:	b580      	push	{r7, lr}
 810620a:	b08e      	sub	sp, #56	; 0x38
 810620c:	af00      	add	r7, sp, #0
 810620e:	4603      	mov	r3, r0
 8106210:	6039      	str	r1, [r7, #0]
 8106212:	71fb      	strb	r3, [r7, #7]
  (void) rhport;

  dwc2_regs_t* dwc2 = DWC2_REG(rhport);
 8106214:	79fb      	ldrb	r3, [r7, #7]
 8106216:	4a97      	ldr	r2, [pc, #604]	; (8106474 <dcd_edpt_open+0x26c>)
 8106218:	011b      	lsls	r3, r3, #4
 810621a:	4413      	add	r3, r2
 810621c:	681b      	ldr	r3, [r3, #0]
 810621e:	637b      	str	r3, [r7, #52]	; 0x34
  uint8_t const ep_count = _dwc2_controller[rhport].ep_count;
 8106220:	79fb      	ldrb	r3, [r7, #7]
 8106222:	4a94      	ldr	r2, [pc, #592]	; (8106474 <dcd_edpt_open+0x26c>)
 8106224:	011b      	lsls	r3, r3, #4
 8106226:	4413      	add	r3, r2
 8106228:	3308      	adds	r3, #8
 810622a:	781b      	ldrb	r3, [r3, #0]
 810622c:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

  uint8_t const epnum = tu_edpt_number(desc_edpt->bEndpointAddress);
 8106230:	683b      	ldr	r3, [r7, #0]
 8106232:	789b      	ldrb	r3, [r3, #2]
 8106234:	75bb      	strb	r3, [r7, #22]
  return (uint8_t)(addr & (~TUSB_DIR_IN_MASK));
 8106236:	7dbb      	ldrb	r3, [r7, #22]
 8106238:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 810623c:	b2db      	uxtb	r3, r3
 810623e:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
  uint8_t const dir = tu_edpt_dir(desc_edpt->bEndpointAddress);
 8106242:	683b      	ldr	r3, [r7, #0]
 8106244:	789b      	ldrb	r3, [r3, #2]
 8106246:	75fb      	strb	r3, [r7, #23]
  return (addr & TUSB_DIR_IN_MASK) ? TUSB_DIR_IN : TUSB_DIR_OUT;
 8106248:	7dfb      	ldrb	r3, [r7, #23]
 810624a:	09db      	lsrs	r3, r3, #7
 810624c:	b2db      	uxtb	r3, r3
 810624e:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31

  TU_ASSERT(epnum < ep_count);
 8106252:	f897 2032 	ldrb.w	r2, [r7, #50]	; 0x32
 8106256:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 810625a:	429a      	cmp	r2, r3
 810625c:	d30a      	bcc.n	8106274 <dcd_edpt_open+0x6c>
 810625e:	4b86      	ldr	r3, [pc, #536]	; (8106478 <dcd_edpt_open+0x270>)
 8106260:	61bb      	str	r3, [r7, #24]
 8106262:	69bb      	ldr	r3, [r7, #24]
 8106264:	681b      	ldr	r3, [r3, #0]
 8106266:	f003 0301 	and.w	r3, r3, #1
 810626a:	2b00      	cmp	r3, #0
 810626c:	d000      	beq.n	8106270 <dcd_edpt_open+0x68>
 810626e:	be00      	bkpt	0x0000
 8106270:	2300      	movs	r3, #0
 8106272:	e0fb      	b.n	810646c <dcd_edpt_open+0x264>

  xfer_ctl_t* xfer = XFER_CTL_BASE(epnum, dir);
 8106274:	f897 2032 	ldrb.w	r2, [r7, #50]	; 0x32
 8106278:	f897 3031 	ldrb.w	r3, [r7, #49]	; 0x31
 810627c:	0052      	lsls	r2, r2, #1
 810627e:	4413      	add	r3, r2
 8106280:	011b      	lsls	r3, r3, #4
 8106282:	4a7e      	ldr	r2, [pc, #504]	; (810647c <dcd_edpt_open+0x274>)
 8106284:	4413      	add	r3, r2
 8106286:	62fb      	str	r3, [r7, #44]	; 0x2c
 8106288:	683b      	ldr	r3, [r7, #0]
 810628a:	60bb      	str	r3, [r7, #8]
  return tu_le16toh(desc_ep->wMaxPacketSize) & TU_GENMASK(10, 0);
 810628c:	68bb      	ldr	r3, [r7, #8]
 810628e:	889b      	ldrh	r3, [r3, #4]
 8106290:	b29b      	uxth	r3, r3
 8106292:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8106296:	b29a      	uxth	r2, r3
  xfer->max_size = tu_edpt_packet_size(desc_edpt);
 8106298:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 810629a:	815a      	strh	r2, [r3, #10]
  xfer->interval = desc_edpt->bInterval;
 810629c:	683b      	ldr	r3, [r7, #0]
 810629e:	799a      	ldrb	r2, [r3, #6]
 81062a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 81062a2:	731a      	strb	r2, [r3, #12]

  uint16_t const fifo_size = tu_div_ceil(xfer->max_size, 4);
 81062a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 81062a6:	895b      	ldrh	r3, [r3, #10]
 81062a8:	613b      	str	r3, [r7, #16]
 81062aa:	2304      	movs	r3, #4
 81062ac:	60fb      	str	r3, [r7, #12]
TU_ATTR_ALWAYS_INLINE static inline uint32_t tu_div_ceil(uint32_t v, uint32_t d) { return (v + d -1)/d; }
 81062ae:	693a      	ldr	r2, [r7, #16]
 81062b0:	68fb      	ldr	r3, [r7, #12]
 81062b2:	4413      	add	r3, r2
 81062b4:	1e5a      	subs	r2, r3, #1
 81062b6:	68fb      	ldr	r3, [r7, #12]
 81062b8:	fbb2 f3f3 	udiv	r3, r2, r3
 81062bc:	857b      	strh	r3, [r7, #42]	; 0x2a

  if (dir == TUSB_DIR_OUT) {
 81062be:	f897 3031 	ldrb.w	r3, [r7, #49]	; 0x31
 81062c2:	2b00      	cmp	r3, #0
 81062c4:	d160      	bne.n	8106388 <dcd_edpt_open+0x180>
    // Calculate required size of RX FIFO
    uint16_t const sz = calc_grxfsiz(4 * fifo_size, ep_count);
 81062c6:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 81062c8:	009b      	lsls	r3, r3, #2
 81062ca:	b29b      	uxth	r3, r3
 81062cc:	f897 2033 	ldrb.w	r2, [r7, #51]	; 0x33
 81062d0:	4611      	mov	r1, r2
 81062d2:	4618      	mov	r0, r3
 81062d4:	f7ff fb8c 	bl	81059f0 <calc_grxfsiz>
 81062d8:	4603      	mov	r3, r0
 81062da:	847b      	strh	r3, [r7, #34]	; 0x22

    // If size_rx needs to be extended check if possible and if so enlarge it
    if (dwc2->grxfsiz < sz) {
 81062dc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 81062de:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 81062e0:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 81062e2:	429a      	cmp	r2, r3
 81062e4:	d21b      	bcs.n	810631e <dcd_edpt_open+0x116>
      TU_ASSERT(sz + _allocated_fifo_words_tx <= _dwc2_controller[rhport].ep_fifo_size / 4);
 81062e6:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 81062e8:	4a65      	ldr	r2, [pc, #404]	; (8106480 <dcd_edpt_open+0x278>)
 81062ea:	8812      	ldrh	r2, [r2, #0]
 81062ec:	4413      	add	r3, r2
 81062ee:	4619      	mov	r1, r3
 81062f0:	79fb      	ldrb	r3, [r7, #7]
 81062f2:	4a60      	ldr	r2, [pc, #384]	; (8106474 <dcd_edpt_open+0x26c>)
 81062f4:	011b      	lsls	r3, r3, #4
 81062f6:	4413      	add	r3, r2
 81062f8:	330c      	adds	r3, #12
 81062fa:	681b      	ldr	r3, [r3, #0]
 81062fc:	089b      	lsrs	r3, r3, #2
 81062fe:	4299      	cmp	r1, r3
 8106300:	d90a      	bls.n	8106318 <dcd_edpt_open+0x110>
 8106302:	4b5d      	ldr	r3, [pc, #372]	; (8106478 <dcd_edpt_open+0x270>)
 8106304:	61fb      	str	r3, [r7, #28]
 8106306:	69fb      	ldr	r3, [r7, #28]
 8106308:	681b      	ldr	r3, [r3, #0]
 810630a:	f003 0301 	and.w	r3, r3, #1
 810630e:	2b00      	cmp	r3, #0
 8106310:	d000      	beq.n	8106314 <dcd_edpt_open+0x10c>
 8106312:	be00      	bkpt	0x0000
 8106314:	2300      	movs	r3, #0
 8106316:	e0a9      	b.n	810646c <dcd_edpt_open+0x264>

      // Enlarge RX FIFO
      dwc2->grxfsiz = sz;
 8106318:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 810631a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 810631c:	625a      	str	r2, [r3, #36]	; 0x24
    }

    dwc2->epout[epnum].doepctl |= (1 << DOEPCTL_USBAEP_Pos) |
 810631e:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 8106322:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8106324:	3358      	adds	r3, #88	; 0x58
 8106326:	015b      	lsls	r3, r3, #5
 8106328:	4413      	add	r3, r2
 810632a:	681a      	ldr	r2, [r3, #0]
                                  (desc_edpt->bmAttributes.xfer << DOEPCTL_EPTYP_Pos) |
 810632c:	683b      	ldr	r3, [r7, #0]
 810632e:	78db      	ldrb	r3, [r3, #3]
 8106330:	f3c3 0301 	ubfx	r3, r3, #0, #2
 8106334:	b2db      	uxtb	r3, r3
 8106336:	049b      	lsls	r3, r3, #18
 8106338:	4619      	mov	r1, r3
                                  (desc_edpt->bmAttributes.xfer != TUSB_XFER_ISOCHRONOUS ? DOEPCTL_SD0PID_SEVNFRM : 0) |
 810633a:	683b      	ldr	r3, [r7, #0]
 810633c:	78db      	ldrb	r3, [r3, #3]
 810633e:	f003 0303 	and.w	r3, r3, #3
 8106342:	b2db      	uxtb	r3, r3
 8106344:	2b01      	cmp	r3, #1
 8106346:	d002      	beq.n	810634e <dcd_edpt_open+0x146>
 8106348:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 810634c:	e000      	b.n	8106350 <dcd_edpt_open+0x148>
 810634e:	2300      	movs	r3, #0
                                  (desc_edpt->bmAttributes.xfer << DOEPCTL_EPTYP_Pos) |
 8106350:	430b      	orrs	r3, r1
                                  (xfer->max_size << DOEPCTL_MPSIZ_Pos);
 8106352:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8106354:	8949      	ldrh	r1, [r1, #10]
                                  (desc_edpt->bmAttributes.xfer != TUSB_XFER_ISOCHRONOUS ? DOEPCTL_SD0PID_SEVNFRM : 0) |
 8106356:	430b      	orrs	r3, r1
    dwc2->epout[epnum].doepctl |= (1 << DOEPCTL_USBAEP_Pos) |
 8106358:	431a      	orrs	r2, r3
 810635a:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 810635e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8106362:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8106364:	3358      	adds	r3, #88	; 0x58
 8106366:	015b      	lsls	r3, r3, #5
 8106368:	440b      	add	r3, r1
 810636a:	601a      	str	r2, [r3, #0]

    dwc2->daintmsk |= TU_BIT(DAINTMSK_OEPM_Pos + epnum);
 810636c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 810636e:	f8d3 281c 	ldr.w	r2, [r3, #2076]	; 0x81c
 8106372:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 8106376:	3310      	adds	r3, #16
 8106378:	2101      	movs	r1, #1
 810637a:	fa01 f303 	lsl.w	r3, r1, r3
 810637e:	431a      	orrs	r2, r3
 8106380:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8106382:	f8c3 281c 	str.w	r2, [r3, #2076]	; 0x81c
 8106386:	e070      	b.n	810646a <dcd_edpt_open+0x262>
    //
    // In FIFO is allocated by following rules:
    // - IN EP 1 gets FIFO 1, IN EP "n" gets FIFO "n".

    // Check if free space is available
    TU_ASSERT(_allocated_fifo_words_tx + fifo_size + dwc2->grxfsiz <= _dwc2_controller[rhport].ep_fifo_size / 4);
 8106388:	4b3d      	ldr	r3, [pc, #244]	; (8106480 <dcd_edpt_open+0x278>)
 810638a:	881b      	ldrh	r3, [r3, #0]
 810638c:	461a      	mov	r2, r3
 810638e:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8106390:	4413      	add	r3, r2
 8106392:	461a      	mov	r2, r3
 8106394:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8106396:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8106398:	441a      	add	r2, r3
 810639a:	79fb      	ldrb	r3, [r7, #7]
 810639c:	4935      	ldr	r1, [pc, #212]	; (8106474 <dcd_edpt_open+0x26c>)
 810639e:	011b      	lsls	r3, r3, #4
 81063a0:	440b      	add	r3, r1
 81063a2:	330c      	adds	r3, #12
 81063a4:	681b      	ldr	r3, [r3, #0]
 81063a6:	089b      	lsrs	r3, r3, #2
 81063a8:	429a      	cmp	r2, r3
 81063aa:	d90a      	bls.n	81063c2 <dcd_edpt_open+0x1ba>
 81063ac:	4b32      	ldr	r3, [pc, #200]	; (8106478 <dcd_edpt_open+0x270>)
 81063ae:	627b      	str	r3, [r7, #36]	; 0x24
 81063b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 81063b2:	681b      	ldr	r3, [r3, #0]
 81063b4:	f003 0301 	and.w	r3, r3, #1
 81063b8:	2b00      	cmp	r3, #0
 81063ba:	d000      	beq.n	81063be <dcd_edpt_open+0x1b6>
 81063bc:	be00      	bkpt	0x0000
 81063be:	2300      	movs	r3, #0
 81063c0:	e054      	b.n	810646c <dcd_edpt_open+0x264>

    _allocated_fifo_words_tx += fifo_size;
 81063c2:	4b2f      	ldr	r3, [pc, #188]	; (8106480 <dcd_edpt_open+0x278>)
 81063c4:	881a      	ldrh	r2, [r3, #0]
 81063c6:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 81063c8:	4413      	add	r3, r2
 81063ca:	b29a      	uxth	r2, r3
 81063cc:	4b2c      	ldr	r3, [pc, #176]	; (8106480 <dcd_edpt_open+0x278>)
 81063ce:	801a      	strh	r2, [r3, #0]
    TU_LOG(DWC2_DEBUG, "    Allocated %u bytes at offset %lu", fifo_size * 4,
           _dwc2_controller[rhport].ep_fifo_size - _allocated_fifo_words_tx * 4);

    // DIEPTXF starts at FIFO #1.
    // Both TXFD and TXSA are in unit of 32-bit words.
    dwc2->dieptxf[epnum - 1] = (fifo_size << DIEPTXF_INEPTXFD_Pos) |
 81063d0:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 81063d2:	041b      	lsls	r3, r3, #16
 81063d4:	4619      	mov	r1, r3
                               (_dwc2_controller[rhport].ep_fifo_size / 4 - _allocated_fifo_words_tx);
 81063d6:	79fb      	ldrb	r3, [r7, #7]
 81063d8:	4a26      	ldr	r2, [pc, #152]	; (8106474 <dcd_edpt_open+0x26c>)
 81063da:	011b      	lsls	r3, r3, #4
 81063dc:	4413      	add	r3, r2
 81063de:	330c      	adds	r3, #12
 81063e0:	681b      	ldr	r3, [r3, #0]
 81063e2:	089b      	lsrs	r3, r3, #2
 81063e4:	4a26      	ldr	r2, [pc, #152]	; (8106480 <dcd_edpt_open+0x278>)
 81063e6:	8812      	ldrh	r2, [r2, #0]
 81063e8:	1a9a      	subs	r2, r3, r2
    dwc2->dieptxf[epnum - 1] = (fifo_size << DIEPTXF_INEPTXFD_Pos) |
 81063ea:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 81063ee:	3b01      	subs	r3, #1
 81063f0:	430a      	orrs	r2, r1
 81063f2:	6b79      	ldr	r1, [r7, #52]	; 0x34
 81063f4:	3340      	adds	r3, #64	; 0x40
 81063f6:	009b      	lsls	r3, r3, #2
 81063f8:	440b      	add	r3, r1
 81063fa:	605a      	str	r2, [r3, #4]

    dwc2->epin[epnum].diepctl |= (1 << DIEPCTL_USBAEP_Pos) |
 81063fc:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 8106400:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8106402:	3348      	adds	r3, #72	; 0x48
 8106404:	015b      	lsls	r3, r3, #5
 8106406:	4413      	add	r3, r2
 8106408:	6819      	ldr	r1, [r3, #0]
                                 (epnum << DIEPCTL_TXFNUM_Pos) |
 810640a:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 810640e:	059b      	lsls	r3, r3, #22
    dwc2->epin[epnum].diepctl |= (1 << DIEPCTL_USBAEP_Pos) |
 8106410:	f443 4200 	orr.w	r2, r3, #32768	; 0x8000
                                 (desc_edpt->bmAttributes.xfer << DIEPCTL_EPTYP_Pos) |
 8106414:	683b      	ldr	r3, [r7, #0]
 8106416:	78db      	ldrb	r3, [r3, #3]
 8106418:	f3c3 0301 	ubfx	r3, r3, #0, #2
 810641c:	b2db      	uxtb	r3, r3
 810641e:	049b      	lsls	r3, r3, #18
                                 (epnum << DIEPCTL_TXFNUM_Pos) |
 8106420:	4313      	orrs	r3, r2
 8106422:	461a      	mov	r2, r3
                                 (desc_edpt->bmAttributes.xfer != TUSB_XFER_ISOCHRONOUS ? DIEPCTL_SD0PID_SEVNFRM : 0) |
 8106424:	683b      	ldr	r3, [r7, #0]
 8106426:	78db      	ldrb	r3, [r3, #3]
 8106428:	f003 0303 	and.w	r3, r3, #3
 810642c:	b2db      	uxtb	r3, r3
 810642e:	2b01      	cmp	r3, #1
 8106430:	d002      	beq.n	8106438 <dcd_edpt_open+0x230>
 8106432:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8106436:	e000      	b.n	810643a <dcd_edpt_open+0x232>
 8106438:	2300      	movs	r3, #0
                                 (desc_edpt->bmAttributes.xfer << DIEPCTL_EPTYP_Pos) |
 810643a:	4313      	orrs	r3, r2
                                 (xfer->max_size << DIEPCTL_MPSIZ_Pos);
 810643c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 810643e:	8952      	ldrh	r2, [r2, #10]
                                 (desc_edpt->bmAttributes.xfer != TUSB_XFER_ISOCHRONOUS ? DIEPCTL_SD0PID_SEVNFRM : 0) |
 8106440:	431a      	orrs	r2, r3
    dwc2->epin[epnum].diepctl |= (1 << DIEPCTL_USBAEP_Pos) |
 8106442:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 8106446:	430a      	orrs	r2, r1
 8106448:	6b79      	ldr	r1, [r7, #52]	; 0x34
 810644a:	3348      	adds	r3, #72	; 0x48
 810644c:	015b      	lsls	r3, r3, #5
 810644e:	440b      	add	r3, r1
 8106450:	601a      	str	r2, [r3, #0]

    dwc2->daintmsk |= (1 << (DAINTMSK_IEPM_Pos + epnum));
 8106452:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8106454:	f8d3 381c 	ldr.w	r3, [r3, #2076]	; 0x81c
 8106458:	f897 2032 	ldrb.w	r2, [r7, #50]	; 0x32
 810645c:	2101      	movs	r1, #1
 810645e:	fa01 f202 	lsl.w	r2, r1, r2
 8106462:	431a      	orrs	r2, r3
 8106464:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8106466:	f8c3 281c 	str.w	r2, [r3, #2076]	; 0x81c
  }

  return true;
 810646a:	2301      	movs	r3, #1
}
 810646c:	4618      	mov	r0, r3
 810646e:	3738      	adds	r7, #56	; 0x38
 8106470:	46bd      	mov	sp, r7
 8106472:	bd80      	pop	{r7, pc}
 8106474:	08111edc 	.word	0x08111edc
 8106478:	e000edf0 	.word	0xe000edf0
 810647c:	10001104 	.word	0x10001104
 8106480:	10001228 	.word	0x10001228

08106484 <dcd_edpt_close_all>:

// Close all non-control endpoints, cancel all pending transfers if any.
void dcd_edpt_close_all(uint8_t rhport) {
 8106484:	b480      	push	{r7}
 8106486:	b087      	sub	sp, #28
 8106488:	af00      	add	r7, sp, #0
 810648a:	4603      	mov	r3, r0
 810648c:	71fb      	strb	r3, [r7, #7]
  dwc2_regs_t* dwc2 = DWC2_REG(rhport);
 810648e:	79fb      	ldrb	r3, [r7, #7]
 8106490:	4a1f      	ldr	r2, [pc, #124]	; (8106510 <dcd_edpt_close_all+0x8c>)
 8106492:	011b      	lsls	r3, r3, #4
 8106494:	4413      	add	r3, r2
 8106496:	681b      	ldr	r3, [r3, #0]
 8106498:	613b      	str	r3, [r7, #16]
  uint8_t const ep_count = _dwc2_controller[rhport].ep_count;
 810649a:	79fb      	ldrb	r3, [r7, #7]
 810649c:	4a1c      	ldr	r2, [pc, #112]	; (8106510 <dcd_edpt_close_all+0x8c>)
 810649e:	011b      	lsls	r3, r3, #4
 81064a0:	4413      	add	r3, r2
 81064a2:	3308      	adds	r3, #8
 81064a4:	781b      	ldrb	r3, [r3, #0]
 81064a6:	73fb      	strb	r3, [r7, #15]

  // Disable non-control interrupt
  dwc2->daintmsk = (1 << DAINTMSK_OEPM_Pos) | (1 << DAINTMSK_IEPM_Pos);
 81064a8:	693b      	ldr	r3, [r7, #16]
 81064aa:	f04f 1201 	mov.w	r2, #65537	; 0x10001
 81064ae:	f8c3 281c 	str.w	r2, [r3, #2076]	; 0x81c

  for (uint8_t n = 1; n < ep_count; n++) {
 81064b2:	2301      	movs	r3, #1
 81064b4:	75fb      	strb	r3, [r7, #23]
 81064b6:	e01e      	b.n	81064f6 <dcd_edpt_close_all+0x72>
    // disable OUT endpoint
    dwc2->epout[n].doepctl = 0;
 81064b8:	7dfb      	ldrb	r3, [r7, #23]
 81064ba:	693a      	ldr	r2, [r7, #16]
 81064bc:	3358      	adds	r3, #88	; 0x58
 81064be:	015b      	lsls	r3, r3, #5
 81064c0:	4413      	add	r3, r2
 81064c2:	2200      	movs	r2, #0
 81064c4:	601a      	str	r2, [r3, #0]
    xfer_status[n][TUSB_DIR_OUT].max_size = 0;
 81064c6:	7dfb      	ldrb	r3, [r7, #23]
 81064c8:	4a12      	ldr	r2, [pc, #72]	; (8106514 <dcd_edpt_close_all+0x90>)
 81064ca:	015b      	lsls	r3, r3, #5
 81064cc:	4413      	add	r3, r2
 81064ce:	330a      	adds	r3, #10
 81064d0:	2200      	movs	r2, #0
 81064d2:	801a      	strh	r2, [r3, #0]

    // disable IN endpoint
    dwc2->epin[n].diepctl = 0;
 81064d4:	7dfb      	ldrb	r3, [r7, #23]
 81064d6:	693a      	ldr	r2, [r7, #16]
 81064d8:	3348      	adds	r3, #72	; 0x48
 81064da:	015b      	lsls	r3, r3, #5
 81064dc:	4413      	add	r3, r2
 81064de:	2200      	movs	r2, #0
 81064e0:	601a      	str	r2, [r3, #0]
    xfer_status[n][TUSB_DIR_IN].max_size = 0;
 81064e2:	7dfb      	ldrb	r3, [r7, #23]
 81064e4:	4a0b      	ldr	r2, [pc, #44]	; (8106514 <dcd_edpt_close_all+0x90>)
 81064e6:	015b      	lsls	r3, r3, #5
 81064e8:	4413      	add	r3, r2
 81064ea:	331a      	adds	r3, #26
 81064ec:	2200      	movs	r2, #0
 81064ee:	801a      	strh	r2, [r3, #0]
  for (uint8_t n = 1; n < ep_count; n++) {
 81064f0:	7dfb      	ldrb	r3, [r7, #23]
 81064f2:	3301      	adds	r3, #1
 81064f4:	75fb      	strb	r3, [r7, #23]
 81064f6:	7dfa      	ldrb	r2, [r7, #23]
 81064f8:	7bfb      	ldrb	r3, [r7, #15]
 81064fa:	429a      	cmp	r2, r3
 81064fc:	d3dc      	bcc.n	81064b8 <dcd_edpt_close_all+0x34>
  }

  // reset allocated fifo IN
  _allocated_fifo_words_tx = 16;
 81064fe:	4b06      	ldr	r3, [pc, #24]	; (8106518 <dcd_edpt_close_all+0x94>)
 8106500:	2210      	movs	r2, #16
 8106502:	801a      	strh	r2, [r3, #0]
}
 8106504:	bf00      	nop
 8106506:	371c      	adds	r7, #28
 8106508:	46bd      	mov	sp, r7
 810650a:	f85d 7b04 	ldr.w	r7, [sp], #4
 810650e:	4770      	bx	lr
 8106510:	08111edc 	.word	0x08111edc
 8106514:	10001104 	.word	0x10001104
 8106518:	10001228 	.word	0x10001228

0810651c <dcd_edpt_xfer>:

bool dcd_edpt_xfer(uint8_t rhport, uint8_t ep_addr, uint8_t* buffer, uint16_t total_bytes) {
 810651c:	b590      	push	{r4, r7, lr}
 810651e:	b089      	sub	sp, #36	; 0x24
 8106520:	af02      	add	r7, sp, #8
 8106522:	603a      	str	r2, [r7, #0]
 8106524:	461a      	mov	r2, r3
 8106526:	4603      	mov	r3, r0
 8106528:	71fb      	strb	r3, [r7, #7]
 810652a:	460b      	mov	r3, r1
 810652c:	71bb      	strb	r3, [r7, #6]
 810652e:	4613      	mov	r3, r2
 8106530:	80bb      	strh	r3, [r7, #4]
 8106532:	79bb      	ldrb	r3, [r7, #6]
 8106534:	733b      	strb	r3, [r7, #12]
  return (uint8_t)(addr & (~TUSB_DIR_IN_MASK));
 8106536:	7b3b      	ldrb	r3, [r7, #12]
 8106538:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 810653c:	b2db      	uxtb	r3, r3
  uint8_t const epnum = tu_edpt_number(ep_addr);
 810653e:	757b      	strb	r3, [r7, #21]
 8106540:	79bb      	ldrb	r3, [r7, #6]
 8106542:	737b      	strb	r3, [r7, #13]
  return (addr & TUSB_DIR_IN_MASK) ? TUSB_DIR_IN : TUSB_DIR_OUT;
 8106544:	7b7b      	ldrb	r3, [r7, #13]
 8106546:	09db      	lsrs	r3, r3, #7
 8106548:	b2db      	uxtb	r3, r3
  uint8_t const dir = tu_edpt_dir(ep_addr);
 810654a:	753b      	strb	r3, [r7, #20]

  xfer_ctl_t* xfer = XFER_CTL_BASE(epnum, dir);
 810654c:	7d7a      	ldrb	r2, [r7, #21]
 810654e:	7d3b      	ldrb	r3, [r7, #20]
 8106550:	0052      	lsls	r2, r2, #1
 8106552:	4413      	add	r3, r2
 8106554:	011b      	lsls	r3, r3, #4
 8106556:	4a23      	ldr	r2, [pc, #140]	; (81065e4 <dcd_edpt_xfer+0xc8>)
 8106558:	4413      	add	r3, r2
 810655a:	613b      	str	r3, [r7, #16]
  xfer->buffer = buffer;
 810655c:	693b      	ldr	r3, [r7, #16]
 810655e:	683a      	ldr	r2, [r7, #0]
 8106560:	601a      	str	r2, [r3, #0]
  xfer->ff = NULL;
 8106562:	693b      	ldr	r3, [r7, #16]
 8106564:	2200      	movs	r2, #0
 8106566:	605a      	str	r2, [r3, #4]
  xfer->total_len = total_bytes;
 8106568:	693b      	ldr	r3, [r7, #16]
 810656a:	88ba      	ldrh	r2, [r7, #4]
 810656c:	811a      	strh	r2, [r3, #8]

  // EP0 can only handle one packet
  if (epnum == 0) {
 810656e:	7d7b      	ldrb	r3, [r7, #21]
 8106570:	2b00      	cmp	r3, #0
 8106572:	d110      	bne.n	8106596 <dcd_edpt_xfer+0x7a>
    ep0_pending[dir] = total_bytes;
 8106574:	7d3b      	ldrb	r3, [r7, #20]
 8106576:	491c      	ldr	r1, [pc, #112]	; (81065e8 <dcd_edpt_xfer+0xcc>)
 8106578:	88ba      	ldrh	r2, [r7, #4]
 810657a:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]

    // Schedule the first transaction for EP0 transfer
    edpt_schedule_packets(rhport, epnum, dir, 1, ep0_pending[dir]);
 810657e:	7d3b      	ldrb	r3, [r7, #20]
 8106580:	4a19      	ldr	r2, [pc, #100]	; (81065e8 <dcd_edpt_xfer+0xcc>)
 8106582:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8106586:	7d3a      	ldrb	r2, [r7, #20]
 8106588:	7d79      	ldrb	r1, [r7, #21]
 810658a:	79f8      	ldrb	r0, [r7, #7]
 810658c:	9300      	str	r3, [sp, #0]
 810658e:	2301      	movs	r3, #1
 8106590:	f7ff fb1a 	bl	8105bc8 <edpt_schedule_packets>
 8106594:	e020      	b.n	81065d8 <dcd_edpt_xfer+0xbc>
  } else {
    uint16_t num_packets = (total_bytes / xfer->max_size);
 8106596:	693b      	ldr	r3, [r7, #16]
 8106598:	895b      	ldrh	r3, [r3, #10]
 810659a:	88ba      	ldrh	r2, [r7, #4]
 810659c:	fbb2 f3f3 	udiv	r3, r2, r3
 81065a0:	82fb      	strh	r3, [r7, #22]
    uint16_t const short_packet_size = total_bytes % xfer->max_size;
 81065a2:	693b      	ldr	r3, [r7, #16]
 81065a4:	895a      	ldrh	r2, [r3, #10]
 81065a6:	88bb      	ldrh	r3, [r7, #4]
 81065a8:	fbb3 f1f2 	udiv	r1, r3, r2
 81065ac:	fb01 f202 	mul.w	r2, r1, r2
 81065b0:	1a9b      	subs	r3, r3, r2
 81065b2:	81fb      	strh	r3, [r7, #14]

    // Zero-size packet is special case.
    if ((short_packet_size > 0) || (total_bytes == 0)) num_packets++;
 81065b4:	89fb      	ldrh	r3, [r7, #14]
 81065b6:	2b00      	cmp	r3, #0
 81065b8:	d102      	bne.n	81065c0 <dcd_edpt_xfer+0xa4>
 81065ba:	88bb      	ldrh	r3, [r7, #4]
 81065bc:	2b00      	cmp	r3, #0
 81065be:	d102      	bne.n	81065c6 <dcd_edpt_xfer+0xaa>
 81065c0:	8afb      	ldrh	r3, [r7, #22]
 81065c2:	3301      	adds	r3, #1
 81065c4:	82fb      	strh	r3, [r7, #22]

    // Schedule packets to be sent within interrupt
    edpt_schedule_packets(rhport, epnum, dir, num_packets, total_bytes);
 81065c6:	8afc      	ldrh	r4, [r7, #22]
 81065c8:	7d3a      	ldrb	r2, [r7, #20]
 81065ca:	7d79      	ldrb	r1, [r7, #21]
 81065cc:	79f8      	ldrb	r0, [r7, #7]
 81065ce:	88bb      	ldrh	r3, [r7, #4]
 81065d0:	9300      	str	r3, [sp, #0]
 81065d2:	4623      	mov	r3, r4
 81065d4:	f7ff faf8 	bl	8105bc8 <edpt_schedule_packets>
  }

  return true;
 81065d8:	2301      	movs	r3, #1
}
 81065da:	4618      	mov	r0, r3
 81065dc:	371c      	adds	r7, #28
 81065de:	46bd      	mov	sp, r7
 81065e0:	bd90      	pop	{r4, r7, pc}
 81065e2:	bf00      	nop
 81065e4:	10001104 	.word	0x10001104
 81065e8:	10001224 	.word	0x10001224

081065ec <dcd_edpt_disable>:
  edpt_schedule_packets(rhport, epnum, dir, num_packets, total_bytes);

  return true;
}

static void dcd_edpt_disable(uint8_t rhport, uint8_t ep_addr, bool stall) {
 81065ec:	b480      	push	{r7}
 81065ee:	b089      	sub	sp, #36	; 0x24
 81065f0:	af00      	add	r7, sp, #0
 81065f2:	4603      	mov	r3, r0
 81065f4:	71fb      	strb	r3, [r7, #7]
 81065f6:	460b      	mov	r3, r1
 81065f8:	71bb      	strb	r3, [r7, #6]
 81065fa:	4613      	mov	r3, r2
 81065fc:	717b      	strb	r3, [r7, #5]
  (void) rhport;

  dwc2_regs_t* dwc2 = DWC2_REG(rhport);
 81065fe:	79fb      	ldrb	r3, [r7, #7]
 8106600:	4a6e      	ldr	r2, [pc, #440]	; (81067bc <dcd_edpt_disable+0x1d0>)
 8106602:	011b      	lsls	r3, r3, #4
 8106604:	4413      	add	r3, r2
 8106606:	681b      	ldr	r3, [r3, #0]
 8106608:	61fb      	str	r3, [r7, #28]
 810660a:	79bb      	ldrb	r3, [r7, #6]
 810660c:	73bb      	strb	r3, [r7, #14]
  return (uint8_t)(addr & (~TUSB_DIR_IN_MASK));
 810660e:	7bbb      	ldrb	r3, [r7, #14]
 8106610:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8106614:	b2db      	uxtb	r3, r3

  uint8_t const epnum = tu_edpt_number(ep_addr);
 8106616:	76fb      	strb	r3, [r7, #27]
 8106618:	79bb      	ldrb	r3, [r7, #6]
 810661a:	73fb      	strb	r3, [r7, #15]
  return (addr & TUSB_DIR_IN_MASK) ? TUSB_DIR_IN : TUSB_DIR_OUT;
 810661c:	7bfb      	ldrb	r3, [r7, #15]
 810661e:	09db      	lsrs	r3, r3, #7
 8106620:	b2db      	uxtb	r3, r3
  uint8_t const dir = tu_edpt_dir(ep_addr);
 8106622:	76bb      	strb	r3, [r7, #26]

  if (dir == TUSB_DIR_IN) {
 8106624:	7ebb      	ldrb	r3, [r7, #26]
 8106626:	2b01      	cmp	r3, #1
 8106628:	d167      	bne.n	81066fa <dcd_edpt_disable+0x10e>
    dwc2_epin_t* epin = dwc2->epin;
 810662a:	69fb      	ldr	r3, [r7, #28]
 810662c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8106630:	613b      	str	r3, [r7, #16]

    // Only disable currently enabled non-control endpoint
    if ((epnum == 0) || !(epin[epnum].diepctl & DIEPCTL_EPENA)) {
 8106632:	7efb      	ldrb	r3, [r7, #27]
 8106634:	2b00      	cmp	r3, #0
 8106636:	d006      	beq.n	8106646 <dcd_edpt_disable+0x5a>
 8106638:	7efb      	ldrb	r3, [r7, #27]
 810663a:	015b      	lsls	r3, r3, #5
 810663c:	693a      	ldr	r2, [r7, #16]
 810663e:	4413      	add	r3, r2
 8106640:	681b      	ldr	r3, [r3, #0]
 8106642:	2b00      	cmp	r3, #0
 8106644:	db13      	blt.n	810666e <dcd_edpt_disable+0x82>
      epin[epnum].diepctl |= DIEPCTL_SNAK | (stall ? DIEPCTL_STALL : 0);
 8106646:	7efb      	ldrb	r3, [r7, #27]
 8106648:	015b      	lsls	r3, r3, #5
 810664a:	693a      	ldr	r2, [r7, #16]
 810664c:	4413      	add	r3, r2
 810664e:	681a      	ldr	r2, [r3, #0]
 8106650:	797b      	ldrb	r3, [r7, #5]
 8106652:	2b00      	cmp	r3, #0
 8106654:	d002      	beq.n	810665c <dcd_edpt_disable+0x70>
 8106656:	f04f 6102 	mov.w	r1, #136314880	; 0x8200000
 810665a:	e001      	b.n	8106660 <dcd_edpt_disable+0x74>
 810665c:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
 8106660:	7efb      	ldrb	r3, [r7, #27]
 8106662:	015b      	lsls	r3, r3, #5
 8106664:	6938      	ldr	r0, [r7, #16]
 8106666:	4403      	add	r3, r0
 8106668:	430a      	orrs	r2, r1
 810666a:	601a      	str	r2, [r3, #0]
 810666c:	e037      	b.n	81066de <dcd_edpt_disable+0xf2>
    } else {
      // Stop transmitting packets and NAK IN xfers.
      epin[epnum].diepctl |= DIEPCTL_SNAK;
 810666e:	7efb      	ldrb	r3, [r7, #27]
 8106670:	015b      	lsls	r3, r3, #5
 8106672:	693a      	ldr	r2, [r7, #16]
 8106674:	4413      	add	r3, r2
 8106676:	681a      	ldr	r2, [r3, #0]
 8106678:	7efb      	ldrb	r3, [r7, #27]
 810667a:	015b      	lsls	r3, r3, #5
 810667c:	6939      	ldr	r1, [r7, #16]
 810667e:	440b      	add	r3, r1
 8106680:	f042 6200 	orr.w	r2, r2, #134217728	; 0x8000000
 8106684:	601a      	str	r2, [r3, #0]
      while ((epin[epnum].diepint & DIEPINT_INEPNE) == 0) {}
 8106686:	bf00      	nop
 8106688:	7efb      	ldrb	r3, [r7, #27]
 810668a:	015b      	lsls	r3, r3, #5
 810668c:	693a      	ldr	r2, [r7, #16]
 810668e:	4413      	add	r3, r2
 8106690:	689b      	ldr	r3, [r3, #8]
 8106692:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8106696:	2b00      	cmp	r3, #0
 8106698:	d0f6      	beq.n	8106688 <dcd_edpt_disable+0x9c>

      // Disable the endpoint.
      epin[epnum].diepctl |= DIEPCTL_EPDIS | (stall ? DIEPCTL_STALL : 0);
 810669a:	7efb      	ldrb	r3, [r7, #27]
 810669c:	015b      	lsls	r3, r3, #5
 810669e:	693a      	ldr	r2, [r7, #16]
 81066a0:	4413      	add	r3, r2
 81066a2:	681a      	ldr	r2, [r3, #0]
 81066a4:	797b      	ldrb	r3, [r7, #5]
 81066a6:	2b00      	cmp	r3, #0
 81066a8:	d001      	beq.n	81066ae <dcd_edpt_disable+0xc2>
 81066aa:	4945      	ldr	r1, [pc, #276]	; (81067c0 <dcd_edpt_disable+0x1d4>)
 81066ac:	e001      	b.n	81066b2 <dcd_edpt_disable+0xc6>
 81066ae:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 81066b2:	7efb      	ldrb	r3, [r7, #27]
 81066b4:	015b      	lsls	r3, r3, #5
 81066b6:	6938      	ldr	r0, [r7, #16]
 81066b8:	4403      	add	r3, r0
 81066ba:	430a      	orrs	r2, r1
 81066bc:	601a      	str	r2, [r3, #0]
      while ((epin[epnum].diepint & DIEPINT_EPDISD_Msk) == 0) {}
 81066be:	bf00      	nop
 81066c0:	7efb      	ldrb	r3, [r7, #27]
 81066c2:	015b      	lsls	r3, r3, #5
 81066c4:	693a      	ldr	r2, [r7, #16]
 81066c6:	4413      	add	r3, r2
 81066c8:	689b      	ldr	r3, [r3, #8]
 81066ca:	f003 0302 	and.w	r3, r3, #2
 81066ce:	2b00      	cmp	r3, #0
 81066d0:	d0f6      	beq.n	81066c0 <dcd_edpt_disable+0xd4>

      epin[epnum].diepint = DIEPINT_EPDISD;
 81066d2:	7efb      	ldrb	r3, [r7, #27]
 81066d4:	015b      	lsls	r3, r3, #5
 81066d6:	693a      	ldr	r2, [r7, #16]
 81066d8:	4413      	add	r3, r2
 81066da:	2202      	movs	r2, #2
 81066dc:	609a      	str	r2, [r3, #8]
    }

    // Flush the FIFO, and wait until we have confirmed it cleared.
    dwc2->grstctl = ((epnum << GRSTCTL_TXFNUM_Pos) | GRSTCTL_TXFFLSH);
 81066de:	7efb      	ldrb	r3, [r7, #27]
 81066e0:	019b      	lsls	r3, r3, #6
 81066e2:	f043 0220 	orr.w	r2, r3, #32
 81066e6:	69fb      	ldr	r3, [r7, #28]
 81066e8:	611a      	str	r2, [r3, #16]
    while ((dwc2->grstctl & GRSTCTL_TXFFLSH_Msk) != 0) {}
 81066ea:	bf00      	nop
 81066ec:	69fb      	ldr	r3, [r7, #28]
 81066ee:	691b      	ldr	r3, [r3, #16]
 81066f0:	f003 0320 	and.w	r3, r3, #32
 81066f4:	2b00      	cmp	r3, #0
 81066f6:	d1f9      	bne.n	81066ec <dcd_edpt_disable+0x100>

      // Allow other OUT endpoints to keep receiving.
      dwc2->dctl |= DCTL_CGONAK;
    }
  }
}
 81066f8:	e059      	b.n	81067ae <dcd_edpt_disable+0x1c2>
    dwc2_epout_t* epout = dwc2->epout;
 81066fa:	69fb      	ldr	r3, [r7, #28]
 81066fc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8106700:	617b      	str	r3, [r7, #20]
    if ((epnum == 0) || !(epout[epnum].doepctl & DOEPCTL_EPENA)) {
 8106702:	7efb      	ldrb	r3, [r7, #27]
 8106704:	2b00      	cmp	r3, #0
 8106706:	d006      	beq.n	8106716 <dcd_edpt_disable+0x12a>
 8106708:	7efb      	ldrb	r3, [r7, #27]
 810670a:	015b      	lsls	r3, r3, #5
 810670c:	697a      	ldr	r2, [r7, #20]
 810670e:	4413      	add	r3, r2
 8106710:	681b      	ldr	r3, [r3, #0]
 8106712:	2b00      	cmp	r3, #0
 8106714:	db12      	blt.n	810673c <dcd_edpt_disable+0x150>
      epout[epnum].doepctl |= stall ? DOEPCTL_STALL : 0;
 8106716:	7efb      	ldrb	r3, [r7, #27]
 8106718:	015b      	lsls	r3, r3, #5
 810671a:	697a      	ldr	r2, [r7, #20]
 810671c:	4413      	add	r3, r2
 810671e:	681a      	ldr	r2, [r3, #0]
 8106720:	797b      	ldrb	r3, [r7, #5]
 8106722:	2b00      	cmp	r3, #0
 8106724:	d002      	beq.n	810672c <dcd_edpt_disable+0x140>
 8106726:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 810672a:	e000      	b.n	810672e <dcd_edpt_disable+0x142>
 810672c:	2100      	movs	r1, #0
 810672e:	7efb      	ldrb	r3, [r7, #27]
 8106730:	015b      	lsls	r3, r3, #5
 8106732:	6978      	ldr	r0, [r7, #20]
 8106734:	4403      	add	r3, r0
 8106736:	430a      	orrs	r2, r1
 8106738:	601a      	str	r2, [r3, #0]
}
 810673a:	e038      	b.n	81067ae <dcd_edpt_disable+0x1c2>
      dwc2->dctl |= DCTL_SGONAK;
 810673c:	69fb      	ldr	r3, [r7, #28]
 810673e:	f8d3 3804 	ldr.w	r3, [r3, #2052]	; 0x804
 8106742:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8106746:	69fb      	ldr	r3, [r7, #28]
 8106748:	f8c3 2804 	str.w	r2, [r3, #2052]	; 0x804
      while ((dwc2->gintsts & GINTSTS_BOUTNAKEFF_Msk) == 0) {}
 810674c:	bf00      	nop
 810674e:	69fb      	ldr	r3, [r7, #28]
 8106750:	695b      	ldr	r3, [r3, #20]
 8106752:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8106756:	2b00      	cmp	r3, #0
 8106758:	d0f9      	beq.n	810674e <dcd_edpt_disable+0x162>
      epout[epnum].doepctl |= DOEPCTL_EPDIS | (stall ? DOEPCTL_STALL : 0);
 810675a:	7efb      	ldrb	r3, [r7, #27]
 810675c:	015b      	lsls	r3, r3, #5
 810675e:	697a      	ldr	r2, [r7, #20]
 8106760:	4413      	add	r3, r2
 8106762:	681a      	ldr	r2, [r3, #0]
 8106764:	797b      	ldrb	r3, [r7, #5]
 8106766:	2b00      	cmp	r3, #0
 8106768:	d001      	beq.n	810676e <dcd_edpt_disable+0x182>
 810676a:	4915      	ldr	r1, [pc, #84]	; (81067c0 <dcd_edpt_disable+0x1d4>)
 810676c:	e001      	b.n	8106772 <dcd_edpt_disable+0x186>
 810676e:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8106772:	7efb      	ldrb	r3, [r7, #27]
 8106774:	015b      	lsls	r3, r3, #5
 8106776:	6978      	ldr	r0, [r7, #20]
 8106778:	4403      	add	r3, r0
 810677a:	430a      	orrs	r2, r1
 810677c:	601a      	str	r2, [r3, #0]
      while ((epout[epnum].doepint & DOEPINT_EPDISD_Msk) == 0) {}
 810677e:	bf00      	nop
 8106780:	7efb      	ldrb	r3, [r7, #27]
 8106782:	015b      	lsls	r3, r3, #5
 8106784:	697a      	ldr	r2, [r7, #20]
 8106786:	4413      	add	r3, r2
 8106788:	689b      	ldr	r3, [r3, #8]
 810678a:	f003 0302 	and.w	r3, r3, #2
 810678e:	2b00      	cmp	r3, #0
 8106790:	d0f6      	beq.n	8106780 <dcd_edpt_disable+0x194>
      epout[epnum].doepint = DOEPINT_EPDISD;
 8106792:	7efb      	ldrb	r3, [r7, #27]
 8106794:	015b      	lsls	r3, r3, #5
 8106796:	697a      	ldr	r2, [r7, #20]
 8106798:	4413      	add	r3, r2
 810679a:	2202      	movs	r2, #2
 810679c:	609a      	str	r2, [r3, #8]
      dwc2->dctl |= DCTL_CGONAK;
 810679e:	69fb      	ldr	r3, [r7, #28]
 81067a0:	f8d3 3804 	ldr.w	r3, [r3, #2052]	; 0x804
 81067a4:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 81067a8:	69fb      	ldr	r3, [r7, #28]
 81067aa:	f8c3 2804 	str.w	r2, [r3, #2052]	; 0x804
}
 81067ae:	bf00      	nop
 81067b0:	3724      	adds	r7, #36	; 0x24
 81067b2:	46bd      	mov	sp, r7
 81067b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 81067b8:	4770      	bx	lr
 81067ba:	bf00      	nop
 81067bc:	08111edc 	.word	0x08111edc
 81067c0:	40200000 	.word	0x40200000

081067c4 <dcd_edpt_stall>:
  } else {
    _out_ep_closed = true;     // Set flag such that RX FIFO gets reduced in size once RX FIFO is empty
  }
}

void dcd_edpt_stall(uint8_t rhport, uint8_t ep_addr) {
 81067c4:	b580      	push	{r7, lr}
 81067c6:	b082      	sub	sp, #8
 81067c8:	af00      	add	r7, sp, #0
 81067ca:	4603      	mov	r3, r0
 81067cc:	460a      	mov	r2, r1
 81067ce:	71fb      	strb	r3, [r7, #7]
 81067d0:	4613      	mov	r3, r2
 81067d2:	71bb      	strb	r3, [r7, #6]
  dcd_edpt_disable(rhport, ep_addr, true);
 81067d4:	79b9      	ldrb	r1, [r7, #6]
 81067d6:	79fb      	ldrb	r3, [r7, #7]
 81067d8:	2201      	movs	r2, #1
 81067da:	4618      	mov	r0, r3
 81067dc:	f7ff ff06 	bl	81065ec <dcd_edpt_disable>
}
 81067e0:	bf00      	nop
 81067e2:	3708      	adds	r7, #8
 81067e4:	46bd      	mov	sp, r7
 81067e6:	bd80      	pop	{r7, pc}

081067e8 <dcd_edpt_clear_stall>:

void dcd_edpt_clear_stall(uint8_t rhport, uint8_t ep_addr) {
 81067e8:	b480      	push	{r7}
 81067ea:	b085      	sub	sp, #20
 81067ec:	af00      	add	r7, sp, #0
 81067ee:	4603      	mov	r3, r0
 81067f0:	460a      	mov	r2, r1
 81067f2:	71fb      	strb	r3, [r7, #7]
 81067f4:	4613      	mov	r3, r2
 81067f6:	71bb      	strb	r3, [r7, #6]
  (void) rhport;

  dwc2_regs_t* dwc2 = DWC2_REG(rhport);
 81067f8:	79fb      	ldrb	r3, [r7, #7]
 81067fa:	4a2a      	ldr	r2, [pc, #168]	; (81068a4 <dcd_edpt_clear_stall+0xbc>)
 81067fc:	011b      	lsls	r3, r3, #4
 81067fe:	4413      	add	r3, r2
 8106800:	681b      	ldr	r3, [r3, #0]
 8106802:	60fb      	str	r3, [r7, #12]
 8106804:	79bb      	ldrb	r3, [r7, #6]
 8106806:	723b      	strb	r3, [r7, #8]
  return (uint8_t)(addr & (~TUSB_DIR_IN_MASK));
 8106808:	7a3b      	ldrb	r3, [r7, #8]
 810680a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 810680e:	b2db      	uxtb	r3, r3

  uint8_t const epnum = tu_edpt_number(ep_addr);
 8106810:	72fb      	strb	r3, [r7, #11]
 8106812:	79bb      	ldrb	r3, [r7, #6]
 8106814:	727b      	strb	r3, [r7, #9]
  return (addr & TUSB_DIR_IN_MASK) ? TUSB_DIR_IN : TUSB_DIR_OUT;
 8106816:	7a7b      	ldrb	r3, [r7, #9]
 8106818:	09db      	lsrs	r3, r3, #7
 810681a:	b2db      	uxtb	r3, r3
  uint8_t const dir = tu_edpt_dir(ep_addr);
 810681c:	72bb      	strb	r3, [r7, #10]

  // Clear stall and reset data toggle
  if (dir == TUSB_DIR_IN) {
 810681e:	7abb      	ldrb	r3, [r7, #10]
 8106820:	2b01      	cmp	r3, #1
 8106822:	d11c      	bne.n	810685e <dcd_edpt_clear_stall+0x76>
    dwc2->epin[epnum].diepctl &= ~DIEPCTL_STALL;
 8106824:	7afb      	ldrb	r3, [r7, #11]
 8106826:	68fa      	ldr	r2, [r7, #12]
 8106828:	3348      	adds	r3, #72	; 0x48
 810682a:	015b      	lsls	r3, r3, #5
 810682c:	4413      	add	r3, r2
 810682e:	681a      	ldr	r2, [r3, #0]
 8106830:	7afb      	ldrb	r3, [r7, #11]
 8106832:	f422 1200 	bic.w	r2, r2, #2097152	; 0x200000
 8106836:	68f9      	ldr	r1, [r7, #12]
 8106838:	3348      	adds	r3, #72	; 0x48
 810683a:	015b      	lsls	r3, r3, #5
 810683c:	440b      	add	r3, r1
 810683e:	601a      	str	r2, [r3, #0]
    dwc2->epin[epnum].diepctl |= DIEPCTL_SD0PID_SEVNFRM;
 8106840:	7afb      	ldrb	r3, [r7, #11]
 8106842:	68fa      	ldr	r2, [r7, #12]
 8106844:	3348      	adds	r3, #72	; 0x48
 8106846:	015b      	lsls	r3, r3, #5
 8106848:	4413      	add	r3, r2
 810684a:	681a      	ldr	r2, [r3, #0]
 810684c:	7afb      	ldrb	r3, [r7, #11]
 810684e:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8106852:	68f9      	ldr	r1, [r7, #12]
 8106854:	3348      	adds	r3, #72	; 0x48
 8106856:	015b      	lsls	r3, r3, #5
 8106858:	440b      	add	r3, r1
 810685a:	601a      	str	r2, [r3, #0]
  } else {
    dwc2->epout[epnum].doepctl &= ~DOEPCTL_STALL;
    dwc2->epout[epnum].doepctl |= DOEPCTL_SD0PID_SEVNFRM;
  }
}
 810685c:	e01b      	b.n	8106896 <dcd_edpt_clear_stall+0xae>
    dwc2->epout[epnum].doepctl &= ~DOEPCTL_STALL;
 810685e:	7afb      	ldrb	r3, [r7, #11]
 8106860:	68fa      	ldr	r2, [r7, #12]
 8106862:	3358      	adds	r3, #88	; 0x58
 8106864:	015b      	lsls	r3, r3, #5
 8106866:	4413      	add	r3, r2
 8106868:	681a      	ldr	r2, [r3, #0]
 810686a:	7afb      	ldrb	r3, [r7, #11]
 810686c:	f422 1200 	bic.w	r2, r2, #2097152	; 0x200000
 8106870:	68f9      	ldr	r1, [r7, #12]
 8106872:	3358      	adds	r3, #88	; 0x58
 8106874:	015b      	lsls	r3, r3, #5
 8106876:	440b      	add	r3, r1
 8106878:	601a      	str	r2, [r3, #0]
    dwc2->epout[epnum].doepctl |= DOEPCTL_SD0PID_SEVNFRM;
 810687a:	7afb      	ldrb	r3, [r7, #11]
 810687c:	68fa      	ldr	r2, [r7, #12]
 810687e:	3358      	adds	r3, #88	; 0x58
 8106880:	015b      	lsls	r3, r3, #5
 8106882:	4413      	add	r3, r2
 8106884:	681a      	ldr	r2, [r3, #0]
 8106886:	7afb      	ldrb	r3, [r7, #11]
 8106888:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 810688c:	68f9      	ldr	r1, [r7, #12]
 810688e:	3358      	adds	r3, #88	; 0x58
 8106890:	015b      	lsls	r3, r3, #5
 8106892:	440b      	add	r3, r1
 8106894:	601a      	str	r2, [r3, #0]
}
 8106896:	bf00      	nop
 8106898:	3714      	adds	r7, #20
 810689a:	46bd      	mov	sp, r7
 810689c:	f85d 7b04 	ldr.w	r7, [sp], #4
 81068a0:	4770      	bx	lr
 81068a2:	bf00      	nop
 81068a4:	08111edc 	.word	0x08111edc

081068a8 <read_fifo_packet>:

/*------------------------------------------------------------------*/

// Read a single data packet from receive FIFO
static void read_fifo_packet(uint8_t rhport, uint8_t* dst, uint16_t len) {
 81068a8:	b480      	push	{r7}
 81068aa:	b08d      	sub	sp, #52	; 0x34
 81068ac:	af00      	add	r7, sp, #0
 81068ae:	4603      	mov	r3, r0
 81068b0:	6039      	str	r1, [r7, #0]
 81068b2:	71fb      	strb	r3, [r7, #7]
 81068b4:	4613      	mov	r3, r2
 81068b6:	80bb      	strh	r3, [r7, #4]
  (void) rhport;

  dwc2_regs_t* dwc2 = DWC2_REG(rhport);
 81068b8:	79fb      	ldrb	r3, [r7, #7]
 81068ba:	4a27      	ldr	r2, [pc, #156]	; (8106958 <read_fifo_packet+0xb0>)
 81068bc:	011b      	lsls	r3, r3, #4
 81068be:	4413      	add	r3, r2
 81068c0:	681b      	ldr	r3, [r3, #0]
 81068c2:	62bb      	str	r3, [r7, #40]	; 0x28
  volatile const uint32_t* rx_fifo = dwc2->fifo[0];
 81068c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 81068c6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 81068ca:	627b      	str	r3, [r7, #36]	; 0x24

  // Reading full available 32 bit words from fifo
  uint16_t full_words = len >> 2;
 81068cc:	88bb      	ldrh	r3, [r7, #4]
 81068ce:	089b      	lsrs	r3, r3, #2
 81068d0:	85fb      	strh	r3, [r7, #46]	; 0x2e
  while (full_words--) {
 81068d2:	e00b      	b.n	81068ec <read_fifo_packet+0x44>
    tu_unaligned_write32(dst, *rx_fifo);
 81068d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 81068d6:	681b      	ldr	r3, [r3, #0]
 81068d8:	683a      	ldr	r2, [r7, #0]
 81068da:	61ba      	str	r2, [r7, #24]
 81068dc:	617b      	str	r3, [r7, #20]
  *((uint32_t *) mem) = value;
 81068de:	69bb      	ldr	r3, [r7, #24]
 81068e0:	697a      	ldr	r2, [r7, #20]
 81068e2:	601a      	str	r2, [r3, #0]
}
 81068e4:	bf00      	nop
    dst += 4;
 81068e6:	683b      	ldr	r3, [r7, #0]
 81068e8:	3304      	adds	r3, #4
 81068ea:	603b      	str	r3, [r7, #0]
  while (full_words--) {
 81068ec:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 81068ee:	1e5a      	subs	r2, r3, #1
 81068f0:	85fa      	strh	r2, [r7, #46]	; 0x2e
 81068f2:	2b00      	cmp	r3, #0
 81068f4:	d1ee      	bne.n	81068d4 <read_fifo_packet+0x2c>
  }

  // Read the remaining 1-3 bytes from fifo
  uint8_t const bytes_rem = len & 0x03;
 81068f6:	88bb      	ldrh	r3, [r7, #4]
 81068f8:	b2db      	uxtb	r3, r3
 81068fa:	f003 0303 	and.w	r3, r3, #3
 81068fe:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  if (bytes_rem != 0) {
 8106902:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8106906:	2b00      	cmp	r3, #0
 8106908:	d020      	beq.n	810694c <read_fifo_packet+0xa4>
    uint32_t const tmp = *rx_fifo;
 810690a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 810690c:	681b      	ldr	r3, [r3, #0]
 810690e:	61fb      	str	r3, [r7, #28]
 8106910:	69fb      	ldr	r3, [r7, #28]
 8106912:	613b      	str	r3, [r7, #16]
TU_ATTR_ALWAYS_INLINE static inline uint8_t tu_u32_byte0(uint32_t ui32) { return TU_U32_BYTE0(ui32); }
 8106914:	693b      	ldr	r3, [r7, #16]
 8106916:	b2da      	uxtb	r2, r3
    dst[0] = tu_u32_byte0(tmp);
 8106918:	683b      	ldr	r3, [r7, #0]
 810691a:	701a      	strb	r2, [r3, #0]
    if (bytes_rem > 1) dst[1] = tu_u32_byte1(tmp);
 810691c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8106920:	2b01      	cmp	r3, #1
 8106922:	d907      	bls.n	8106934 <read_fifo_packet+0x8c>
 8106924:	683b      	ldr	r3, [r7, #0]
 8106926:	3301      	adds	r3, #1
 8106928:	69fa      	ldr	r2, [r7, #28]
 810692a:	60fa      	str	r2, [r7, #12]
TU_ATTR_ALWAYS_INLINE static inline uint8_t tu_u32_byte1(uint32_t ui32) { return TU_U32_BYTE1(ui32); }
 810692c:	68fa      	ldr	r2, [r7, #12]
 810692e:	0a12      	lsrs	r2, r2, #8
 8106930:	b2d2      	uxtb	r2, r2
 8106932:	701a      	strb	r2, [r3, #0]
    if (bytes_rem > 2) dst[2] = tu_u32_byte2(tmp);
 8106934:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8106938:	2b02      	cmp	r3, #2
 810693a:	d907      	bls.n	810694c <read_fifo_packet+0xa4>
 810693c:	683b      	ldr	r3, [r7, #0]
 810693e:	3302      	adds	r3, #2
 8106940:	69fa      	ldr	r2, [r7, #28]
 8106942:	60ba      	str	r2, [r7, #8]
TU_ATTR_ALWAYS_INLINE static inline uint8_t tu_u32_byte2(uint32_t ui32) { return TU_U32_BYTE2(ui32); }
 8106944:	68ba      	ldr	r2, [r7, #8]
 8106946:	0c12      	lsrs	r2, r2, #16
 8106948:	b2d2      	uxtb	r2, r2
 810694a:	701a      	strb	r2, [r3, #0]
  }
}
 810694c:	bf00      	nop
 810694e:	3734      	adds	r7, #52	; 0x34
 8106950:	46bd      	mov	sp, r7
 8106952:	f85d 7b04 	ldr.w	r7, [sp], #4
 8106956:	4770      	bx	lr
 8106958:	08111edc 	.word	0x08111edc

0810695c <write_fifo_packet>:

// Write a single data packet to EPIN FIFO
static void write_fifo_packet(uint8_t rhport, uint8_t fifo_num, uint8_t const* src, uint16_t len) {
 810695c:	b480      	push	{r7}
 810695e:	b089      	sub	sp, #36	; 0x24
 8106960:	af00      	add	r7, sp, #0
 8106962:	603a      	str	r2, [r7, #0]
 8106964:	461a      	mov	r2, r3
 8106966:	4603      	mov	r3, r0
 8106968:	71fb      	strb	r3, [r7, #7]
 810696a:	460b      	mov	r3, r1
 810696c:	71bb      	strb	r3, [r7, #6]
 810696e:	4613      	mov	r3, r2
 8106970:	80bb      	strh	r3, [r7, #4]
  (void) rhport;

  dwc2_regs_t* dwc2 = DWC2_REG(rhport);
 8106972:	79fb      	ldrb	r3, [r7, #7]
 8106974:	4a23      	ldr	r2, [pc, #140]	; (8106a04 <write_fifo_packet+0xa8>)
 8106976:	011b      	lsls	r3, r3, #4
 8106978:	4413      	add	r3, r2
 810697a:	681b      	ldr	r3, [r3, #0]
 810697c:	617b      	str	r3, [r7, #20]
  volatile uint32_t* tx_fifo = dwc2->fifo[fifo_num];
 810697e:	79bb      	ldrb	r3, [r7, #6]
 8106980:	3301      	adds	r3, #1
 8106982:	031b      	lsls	r3, r3, #12
 8106984:	697a      	ldr	r2, [r7, #20]
 8106986:	4413      	add	r3, r2
 8106988:	613b      	str	r3, [r7, #16]

  // Pushing full available 32 bit words to fifo
  uint16_t full_words = len >> 2;
 810698a:	88bb      	ldrh	r3, [r7, #4]
 810698c:	089b      	lsrs	r3, r3, #2
 810698e:	83fb      	strh	r3, [r7, #30]
  while (full_words--) {
 8106990:	e008      	b.n	81069a4 <write_fifo_packet+0x48>
 8106992:	683b      	ldr	r3, [r7, #0]
 8106994:	60bb      	str	r3, [r7, #8]
  return *((uint32_t const *) mem);
 8106996:	68bb      	ldr	r3, [r7, #8]
 8106998:	681a      	ldr	r2, [r3, #0]
    *tx_fifo = tu_unaligned_read32(src);
 810699a:	693b      	ldr	r3, [r7, #16]
 810699c:	601a      	str	r2, [r3, #0]
    src += 4;
 810699e:	683b      	ldr	r3, [r7, #0]
 81069a0:	3304      	adds	r3, #4
 81069a2:	603b      	str	r3, [r7, #0]
  while (full_words--) {
 81069a4:	8bfb      	ldrh	r3, [r7, #30]
 81069a6:	1e5a      	subs	r2, r3, #1
 81069a8:	83fa      	strh	r2, [r7, #30]
 81069aa:	2b00      	cmp	r3, #0
 81069ac:	d1f1      	bne.n	8106992 <write_fifo_packet+0x36>
  }

  // Write the remaining 1-3 bytes into fifo
  uint8_t const bytes_rem = len & 0x03;
 81069ae:	88bb      	ldrh	r3, [r7, #4]
 81069b0:	b2db      	uxtb	r3, r3
 81069b2:	f003 0303 	and.w	r3, r3, #3
 81069b6:	73fb      	strb	r3, [r7, #15]
  if (bytes_rem) {
 81069b8:	7bfb      	ldrb	r3, [r7, #15]
 81069ba:	2b00      	cmp	r3, #0
 81069bc:	d01b      	beq.n	81069f6 <write_fifo_packet+0x9a>
    uint32_t tmp_word = src[0];
 81069be:	683b      	ldr	r3, [r7, #0]
 81069c0:	781b      	ldrb	r3, [r3, #0]
 81069c2:	61bb      	str	r3, [r7, #24]
    if (bytes_rem > 1) tmp_word |= (src[1] << 8);
 81069c4:	7bfb      	ldrb	r3, [r7, #15]
 81069c6:	2b01      	cmp	r3, #1
 81069c8:	d907      	bls.n	81069da <write_fifo_packet+0x7e>
 81069ca:	683b      	ldr	r3, [r7, #0]
 81069cc:	3301      	adds	r3, #1
 81069ce:	781b      	ldrb	r3, [r3, #0]
 81069d0:	021b      	lsls	r3, r3, #8
 81069d2:	461a      	mov	r2, r3
 81069d4:	69bb      	ldr	r3, [r7, #24]
 81069d6:	4313      	orrs	r3, r2
 81069d8:	61bb      	str	r3, [r7, #24]
    if (bytes_rem > 2) tmp_word |= (src[2] << 16);
 81069da:	7bfb      	ldrb	r3, [r7, #15]
 81069dc:	2b02      	cmp	r3, #2
 81069de:	d907      	bls.n	81069f0 <write_fifo_packet+0x94>
 81069e0:	683b      	ldr	r3, [r7, #0]
 81069e2:	3302      	adds	r3, #2
 81069e4:	781b      	ldrb	r3, [r3, #0]
 81069e6:	041b      	lsls	r3, r3, #16
 81069e8:	461a      	mov	r2, r3
 81069ea:	69bb      	ldr	r3, [r7, #24]
 81069ec:	4313      	orrs	r3, r2
 81069ee:	61bb      	str	r3, [r7, #24]

    *tx_fifo = tmp_word;
 81069f0:	693b      	ldr	r3, [r7, #16]
 81069f2:	69ba      	ldr	r2, [r7, #24]
 81069f4:	601a      	str	r2, [r3, #0]
  }
}
 81069f6:	bf00      	nop
 81069f8:	3724      	adds	r7, #36	; 0x24
 81069fa:	46bd      	mov	sp, r7
 81069fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8106a00:	4770      	bx	lr
 8106a02:	bf00      	nop
 8106a04:	08111edc 	.word	0x08111edc

08106a08 <handle_rxflvl_irq>:

static void handle_rxflvl_irq(uint8_t rhport) {
 8106a08:	b580      	push	{r7, lr}
 8106a0a:	b08c      	sub	sp, #48	; 0x30
 8106a0c:	af00      	add	r7, sp, #0
 8106a0e:	4603      	mov	r3, r0
 8106a10:	71fb      	strb	r3, [r7, #7]
  dwc2_regs_t* dwc2 = DWC2_REG(rhport);
 8106a12:	79fb      	ldrb	r3, [r7, #7]
 8106a14:	4a5d      	ldr	r2, [pc, #372]	; (8106b8c <handle_rxflvl_irq+0x184>)
 8106a16:	011b      	lsls	r3, r3, #4
 8106a18:	4413      	add	r3, r2
 8106a1a:	681b      	ldr	r3, [r3, #0]
 8106a1c:	62bb      	str	r3, [r7, #40]	; 0x28
  volatile uint32_t const* rx_fifo = dwc2->fifo[0];
 8106a1e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8106a20:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8106a24:	627b      	str	r3, [r7, #36]	; 0x24

  // Pop control word off FIFO
  uint32_t const ctl_word = dwc2->grxstsp;
 8106a26:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8106a28:	6a1b      	ldr	r3, [r3, #32]
 8106a2a:	623b      	str	r3, [r7, #32]
  uint8_t const pktsts = (ctl_word & GRXSTSP_PKTSTS_Msk) >> GRXSTSP_PKTSTS_Pos;
 8106a2c:	6a3b      	ldr	r3, [r7, #32]
 8106a2e:	0c5b      	lsrs	r3, r3, #17
 8106a30:	b2db      	uxtb	r3, r3
 8106a32:	f003 030f 	and.w	r3, r3, #15
 8106a36:	77fb      	strb	r3, [r7, #31]
  uint8_t const epnum = (ctl_word & GRXSTSP_EPNUM_Msk) >> GRXSTSP_EPNUM_Pos;
 8106a38:	6a3b      	ldr	r3, [r7, #32]
 8106a3a:	b2db      	uxtb	r3, r3
 8106a3c:	f003 030f 	and.w	r3, r3, #15
 8106a40:	77bb      	strb	r3, [r7, #30]
  uint16_t const bcnt = (ctl_word & GRXSTSP_BCNT_Msk) >> GRXSTSP_BCNT_Pos;
 8106a42:	6a3b      	ldr	r3, [r7, #32]
 8106a44:	091b      	lsrs	r3, r3, #4
 8106a46:	b29b      	uxth	r3, r3
 8106a48:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8106a4c:	83bb      	strh	r3, [r7, #28]

  dwc2_epout_t* epout = &dwc2->epout[epnum];
 8106a4e:	7fbb      	ldrb	r3, [r7, #30]
 8106a50:	3358      	adds	r3, #88	; 0x58
 8106a52:	015b      	lsls	r3, r3, #5
 8106a54:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8106a56:	4413      	add	r3, r2
 8106a58:	61bb      	str	r3, [r7, #24]
//  TU_LOG_LOCATION();
//  TU_LOG(DWC2_DEBUG, "  EP %02X, Byte Count %u, %s\r\n", epnum, bcnt, pktsts_str[pktsts]);
//  TU_LOG(DWC2_DEBUG, "  daint = %08lX, doepint = %04X\r\n", (unsigned long) dwc2->daint, (unsigned int) epout->doepint);
//#endif

  switch (pktsts) {
 8106a5a:	7ffb      	ldrb	r3, [r7, #31]
 8106a5c:	3b01      	subs	r3, #1
 8106a5e:	2b05      	cmp	r3, #5
 8106a60:	d87e      	bhi.n	8106b60 <handle_rxflvl_irq+0x158>
 8106a62:	a201      	add	r2, pc, #4	; (adr r2, 8106a68 <handle_rxflvl_irq+0x60>)
 8106a64:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8106a68:	08106b75 	.word	0x08106b75
 8106a6c:	08106aa1 	.word	0x08106aa1
 8106a70:	08106b1b 	.word	0x08106b1b
 8106a74:	08106a93 	.word	0x08106a93
 8106a78:	08106b61 	.word	0x08106b61
 8106a7c:	08106a81 	.word	0x08106a81
    case GRXSTS_PKTSTS_SETUPRX:
      // Setup packet received

      // We can receive up to three setup packets in succession, but
      // only the last one is valid.
      _setup_packet[0] = (*rx_fifo);
 8106a80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8106a82:	681b      	ldr	r3, [r3, #0]
 8106a84:	4a42      	ldr	r2, [pc, #264]	; (8106b90 <handle_rxflvl_irq+0x188>)
 8106a86:	6013      	str	r3, [r2, #0]
      _setup_packet[1] = (*rx_fifo);
 8106a88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8106a8a:	681b      	ldr	r3, [r3, #0]
 8106a8c:	4a40      	ldr	r2, [pc, #256]	; (8106b90 <handle_rxflvl_irq+0x188>)
 8106a8e:	6053      	str	r3, [r2, #4]
      break;
 8106a90:	e077      	b.n	8106b82 <handle_rxflvl_irq+0x17a>

    case GRXSTS_PKTSTS_SETUPDONE:
      // Setup packet done (Interrupt)
      epout->doeptsiz |= (3 << DOEPTSIZ_STUPCNT_Pos);
 8106a92:	69bb      	ldr	r3, [r7, #24]
 8106a94:	691b      	ldr	r3, [r3, #16]
 8106a96:	f043 42c0 	orr.w	r2, r3, #1610612736	; 0x60000000
 8106a9a:	69bb      	ldr	r3, [r7, #24]
 8106a9c:	611a      	str	r2, [r3, #16]
      break;
 8106a9e:	e070      	b.n	8106b82 <handle_rxflvl_irq+0x17a>

    case GRXSTS_PKTSTS_OUTRX: {
      // Out packet received
      xfer_ctl_t* xfer = XFER_CTL_BASE(epnum, TUSB_DIR_OUT);
 8106aa0:	7fbb      	ldrb	r3, [r7, #30]
 8106aa2:	015b      	lsls	r3, r3, #5
 8106aa4:	4a3b      	ldr	r2, [pc, #236]	; (8106b94 <handle_rxflvl_irq+0x18c>)
 8106aa6:	4413      	add	r3, r2
 8106aa8:	613b      	str	r3, [r7, #16]

      // Read packet off RxFIFO
      if (xfer->ff) {
 8106aaa:	693b      	ldr	r3, [r7, #16]
 8106aac:	685b      	ldr	r3, [r3, #4]
 8106aae:	2b00      	cmp	r3, #0
 8106ab0:	d007      	beq.n	8106ac2 <handle_rxflvl_irq+0xba>
        // Ring buffer
        tu_fifo_write_n_const_addr_full_words(xfer->ff, (const void*) (uintptr_t) rx_fifo, bcnt);
 8106ab2:	693b      	ldr	r3, [r7, #16]
 8106ab4:	685b      	ldr	r3, [r3, #4]
 8106ab6:	8bba      	ldrh	r2, [r7, #28]
 8106ab8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8106aba:	4618      	mov	r0, r3
 8106abc:	f7fd f8ac 	bl	8103c18 <tu_fifo_write_n_const_addr_full_words>
 8106ac0:	e00c      	b.n	8106adc <handle_rxflvl_irq+0xd4>
      } else {
        // Linear buffer
        read_fifo_packet(rhport, xfer->buffer, bcnt);
 8106ac2:	693b      	ldr	r3, [r7, #16]
 8106ac4:	6819      	ldr	r1, [r3, #0]
 8106ac6:	8bba      	ldrh	r2, [r7, #28]
 8106ac8:	79fb      	ldrb	r3, [r7, #7]
 8106aca:	4618      	mov	r0, r3
 8106acc:	f7ff feec 	bl	81068a8 <read_fifo_packet>

        // Increment pointer to xfer data
        xfer->buffer += bcnt;
 8106ad0:	693b      	ldr	r3, [r7, #16]
 8106ad2:	681a      	ldr	r2, [r3, #0]
 8106ad4:	8bbb      	ldrh	r3, [r7, #28]
 8106ad6:	441a      	add	r2, r3
 8106ad8:	693b      	ldr	r3, [r7, #16]
 8106ada:	601a      	str	r2, [r3, #0]
      }

      // Truncate transfer length in case of short packet
      if (bcnt < xfer->max_size) {
 8106adc:	693b      	ldr	r3, [r7, #16]
 8106ade:	895b      	ldrh	r3, [r3, #10]
 8106ae0:	8bba      	ldrh	r2, [r7, #28]
 8106ae2:	429a      	cmp	r2, r3
 8106ae4:	d248      	bcs.n	8106b78 <handle_rxflvl_irq+0x170>
        xfer->total_len -= (epout->doeptsiz & DOEPTSIZ_XFRSIZ_Msk) >> DOEPTSIZ_XFRSIZ_Pos;
 8106ae6:	69bb      	ldr	r3, [r7, #24]
 8106ae8:	691b      	ldr	r3, [r3, #16]
 8106aea:	f3c3 0112 	ubfx	r1, r3, #0, #19
 8106aee:	693b      	ldr	r3, [r7, #16]
 8106af0:	891a      	ldrh	r2, [r3, #8]
 8106af2:	b28b      	uxth	r3, r1
 8106af4:	1ad3      	subs	r3, r2, r3
 8106af6:	b29a      	uxth	r2, r3
 8106af8:	693b      	ldr	r3, [r7, #16]
 8106afa:	811a      	strh	r2, [r3, #8]
        if (epnum == 0) {
 8106afc:	7fbb      	ldrb	r3, [r7, #30]
 8106afe:	2b00      	cmp	r3, #0
 8106b00:	d13a      	bne.n	8106b78 <handle_rxflvl_irq+0x170>
          xfer->total_len -= ep0_pending[TUSB_DIR_OUT];
 8106b02:	693b      	ldr	r3, [r7, #16]
 8106b04:	891a      	ldrh	r2, [r3, #8]
 8106b06:	4b24      	ldr	r3, [pc, #144]	; (8106b98 <handle_rxflvl_irq+0x190>)
 8106b08:	881b      	ldrh	r3, [r3, #0]
 8106b0a:	1ad3      	subs	r3, r2, r3
 8106b0c:	b29a      	uxth	r2, r3
 8106b0e:	693b      	ldr	r3, [r7, #16]
 8106b10:	811a      	strh	r2, [r3, #8]
          ep0_pending[TUSB_DIR_OUT] = 0;
 8106b12:	4b21      	ldr	r3, [pc, #132]	; (8106b98 <handle_rxflvl_irq+0x190>)
 8106b14:	2200      	movs	r2, #0
 8106b16:	801a      	strh	r2, [r3, #0]
        }
      }
    }
      break;
 8106b18:	e02e      	b.n	8106b78 <handle_rxflvl_irq+0x170>
      // Occurred on STM32L47 with dwc2 version 3.10a but not found on other version like 2.80a or 3.30a
      // May (or not) be 3.10a specific feature/bug or depending on MCU configuration
      // XFRC complete is additionally generated when
      // - setup packet is received
      // - complete the data stage of control write is complete
      if ((epnum == 0) && (bcnt == 0) && (dwc2->gsnpsid >= DWC2_CORE_REV_3_00a)) {
 8106b1a:	7fbb      	ldrb	r3, [r7, #30]
 8106b1c:	2b00      	cmp	r3, #0
 8106b1e:	d12d      	bne.n	8106b7c <handle_rxflvl_irq+0x174>
 8106b20:	8bbb      	ldrh	r3, [r7, #28]
 8106b22:	2b00      	cmp	r3, #0
 8106b24:	d12a      	bne.n	8106b7c <handle_rxflvl_irq+0x174>
 8106b26:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8106b28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8106b2a:	4a1c      	ldr	r2, [pc, #112]	; (8106b9c <handle_rxflvl_irq+0x194>)
 8106b2c:	4293      	cmp	r3, r2
 8106b2e:	d925      	bls.n	8106b7c <handle_rxflvl_irq+0x174>
        uint32_t doepint = epout->doepint;
 8106b30:	69bb      	ldr	r3, [r7, #24]
 8106b32:	689b      	ldr	r3, [r3, #8]
 8106b34:	617b      	str	r3, [r7, #20]

        if (doepint & (DOEPINT_STPKTRX | DOEPINT_OTEPSPR)) {
 8106b36:	697a      	ldr	r2, [r7, #20]
 8106b38:	f248 0320 	movw	r3, #32800	; 0x8020
 8106b3c:	4013      	ands	r3, r2
 8106b3e:	2b00      	cmp	r3, #0
 8106b40:	d01c      	beq.n	8106b7c <handle_rxflvl_irq+0x174>
          // skip this "no-data" transfer complete event
          // Note: STPKTRX will be clear later by setup received handler
          uint32_t clear_flags = DOEPINT_XFRC;
 8106b42:	2301      	movs	r3, #1
 8106b44:	62fb      	str	r3, [r7, #44]	; 0x2c

          if (doepint & DOEPINT_OTEPSPR) clear_flags |= DOEPINT_OTEPSPR;
 8106b46:	697b      	ldr	r3, [r7, #20]
 8106b48:	f003 0320 	and.w	r3, r3, #32
 8106b4c:	2b00      	cmp	r3, #0
 8106b4e:	d003      	beq.n	8106b58 <handle_rxflvl_irq+0x150>
 8106b50:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8106b52:	f043 0320 	orr.w	r3, r3, #32
 8106b56:	62fb      	str	r3, [r7, #44]	; 0x2c

          epout->doepint = clear_flags;
 8106b58:	69bb      	ldr	r3, [r7, #24]
 8106b5a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8106b5c:	609a      	str	r2, [r3, #8]

          // TU_LOG(DWC2_DEBUG, "  FIX extra transfer complete on setup/data compete\r\n");
        }
      }
      break;
 8106b5e:	e00d      	b.n	8106b7c <handle_rxflvl_irq+0x174>

    default:    // Invalid
      TU_BREAKPOINT();
 8106b60:	4b0f      	ldr	r3, [pc, #60]	; (8106ba0 <handle_rxflvl_irq+0x198>)
 8106b62:	60fb      	str	r3, [r7, #12]
 8106b64:	68fb      	ldr	r3, [r7, #12]
 8106b66:	681b      	ldr	r3, [r3, #0]
 8106b68:	f003 0301 	and.w	r3, r3, #1
 8106b6c:	2b00      	cmp	r3, #0
 8106b6e:	d007      	beq.n	8106b80 <handle_rxflvl_irq+0x178>
 8106b70:	be00      	bkpt	0x0000
      break;
 8106b72:	e005      	b.n	8106b80 <handle_rxflvl_irq+0x178>
      break;
 8106b74:	bf00      	nop
 8106b76:	e004      	b.n	8106b82 <handle_rxflvl_irq+0x17a>
      break;
 8106b78:	bf00      	nop
 8106b7a:	e002      	b.n	8106b82 <handle_rxflvl_irq+0x17a>
      break;
 8106b7c:	bf00      	nop
 8106b7e:	e000      	b.n	8106b82 <handle_rxflvl_irq+0x17a>
      break;
 8106b80:	bf00      	nop
  }
}
 8106b82:	bf00      	nop
 8106b84:	3730      	adds	r7, #48	; 0x30
 8106b86:	46bd      	mov	sp, r7
 8106b88:	bd80      	pop	{r7, pc}
 8106b8a:	bf00      	nop
 8106b8c:	08111edc 	.word	0x08111edc
 8106b90:	100010fc 	.word	0x100010fc
 8106b94:	10001104 	.word	0x10001104
 8106b98:	10001224 	.word	0x10001224
 8106b9c:	4f543009 	.word	0x4f543009
 8106ba0:	e000edf0 	.word	0xe000edf0

08106ba4 <handle_epout_irq>:

static void handle_epout_irq(uint8_t rhport) {
 8106ba4:	b580      	push	{r7, lr}
 8106ba6:	b096      	sub	sp, #88	; 0x58
 8106ba8:	af02      	add	r7, sp, #8
 8106baa:	4603      	mov	r3, r0
 8106bac:	71fb      	strb	r3, [r7, #7]
  dwc2_regs_t* dwc2 = DWC2_REG(rhport);
 8106bae:	79fb      	ldrb	r3, [r7, #7]
 8106bb0:	4a60      	ldr	r2, [pc, #384]	; (8106d34 <handle_epout_irq+0x190>)
 8106bb2:	011b      	lsls	r3, r3, #4
 8106bb4:	4413      	add	r3, r2
 8106bb6:	681b      	ldr	r3, [r3, #0]
 8106bb8:	647b      	str	r3, [r7, #68]	; 0x44
  uint8_t const ep_count = _dwc2_controller[rhport].ep_count;
 8106bba:	79fb      	ldrb	r3, [r7, #7]
 8106bbc:	4a5d      	ldr	r2, [pc, #372]	; (8106d34 <handle_epout_irq+0x190>)
 8106bbe:	011b      	lsls	r3, r3, #4
 8106bc0:	4413      	add	r3, r2
 8106bc2:	3308      	adds	r3, #8
 8106bc4:	781b      	ldrb	r3, [r3, #0]
 8106bc6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

  // DAINT for a given EP clears when DOEPINTx is cleared.
  // OEPINT will be cleared when DAINT's out bits are cleared.
  for (uint8_t n = 0; n < ep_count; n++) {
 8106bca:	2300      	movs	r3, #0
 8106bcc:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
 8106bd0:	e0a4      	b.n	8106d1c <handle_epout_irq+0x178>
    if (dwc2->daint & TU_BIT(DAINT_OEPINT_Pos + n)) {
 8106bd2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8106bd4:	f8d3 2818 	ldr.w	r2, [r3, #2072]	; 0x818
 8106bd8:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8106bdc:	3310      	adds	r3, #16
 8106bde:	fa22 f303 	lsr.w	r3, r2, r3
 8106be2:	f003 0301 	and.w	r3, r3, #1
 8106be6:	2b00      	cmp	r3, #0
 8106be8:	f000 8093 	beq.w	8106d12 <handle_epout_irq+0x16e>
      dwc2_epout_t* epout = &dwc2->epout[n];
 8106bec:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8106bf0:	3358      	adds	r3, #88	; 0x58
 8106bf2:	015b      	lsls	r3, r3, #5
 8106bf4:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8106bf6:	4413      	add	r3, r2
 8106bf8:	63fb      	str	r3, [r7, #60]	; 0x3c

      uint32_t const doepint = epout->doepint;
 8106bfa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8106bfc:	689b      	ldr	r3, [r3, #8]
 8106bfe:	63bb      	str	r3, [r7, #56]	; 0x38

      // SETUP packet Setup Phase done.
      if (doepint & DOEPINT_STUP) {
 8106c00:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8106c02:	f003 0308 	and.w	r3, r3, #8
 8106c06:	2b00      	cmp	r3, #0
 8106c08:	d034      	beq.n	8106c74 <handle_epout_irq+0xd0>
        uint32_t clear_flag = DOEPINT_STUP;
 8106c0a:	2308      	movs	r3, #8
 8106c0c:	64bb      	str	r3, [r7, #72]	; 0x48

        // STPKTRX is only available for version from 3_00a
        if ((doepint & DOEPINT_STPKTRX) && (dwc2->gsnpsid >= DWC2_CORE_REV_3_00a)) {
 8106c0e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8106c10:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8106c14:	2b00      	cmp	r3, #0
 8106c16:	d008      	beq.n	8106c2a <handle_epout_irq+0x86>
 8106c18:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8106c1a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8106c1c:	4a46      	ldr	r2, [pc, #280]	; (8106d38 <handle_epout_irq+0x194>)
 8106c1e:	4293      	cmp	r3, r2
 8106c20:	d903      	bls.n	8106c2a <handle_epout_irq+0x86>
          clear_flag |= DOEPINT_STPKTRX;
 8106c22:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8106c24:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8106c28:	64bb      	str	r3, [r7, #72]	; 0x48
        }

        epout->doepint = clear_flag;
 8106c2a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8106c2c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8106c2e:	609a      	str	r2, [r3, #8]
 8106c30:	79fb      	ldrb	r3, [r7, #7]
 8106c32:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8106c36:	4b41      	ldr	r3, [pc, #260]	; (8106d3c <handle_epout_irq+0x198>)
 8106c38:	62fb      	str	r3, [r7, #44]	; 0x2c
 8106c3a:	2301      	movs	r3, #1
 8106c3c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
  dcd_event_handler(&event, in_isr);
}

// helper to send setup received
TU_ATTR_ALWAYS_INLINE static inline void dcd_event_setup_received(uint8_t rhport, uint8_t const * setup, bool in_isr) {
  dcd_event_t event = { .rhport = rhport, .event_id = DCD_EVENT_SETUP_RECEIVED };
 8106c40:	f107 0314 	add.w	r3, r7, #20
 8106c44:	2200      	movs	r2, #0
 8106c46:	601a      	str	r2, [r3, #0]
 8106c48:	605a      	str	r2, [r3, #4]
 8106c4a:	609a      	str	r2, [r3, #8]
 8106c4c:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8106c50:	753b      	strb	r3, [r7, #20]
 8106c52:	2306      	movs	r3, #6
 8106c54:	757b      	strb	r3, [r7, #21]
  memcpy(&event.setup_received, setup, sizeof(tusb_control_request_t));
 8106c56:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8106c58:	f107 0318 	add.w	r3, r7, #24
 8106c5c:	6810      	ldr	r0, [r2, #0]
 8106c5e:	6851      	ldr	r1, [r2, #4]
 8106c60:	c303      	stmia	r3!, {r0, r1}

  dcd_event_handler(&event, in_isr);
 8106c62:	f897 202b 	ldrb.w	r2, [r7, #43]	; 0x2b
 8106c66:	f107 0314 	add.w	r3, r7, #20
 8106c6a:	4611      	mov	r1, r2
 8106c6c:	4618      	mov	r0, r3
 8106c6e:	f7fe f80d 	bl	8104c8c <dcd_event_handler>
}
 8106c72:	bf00      	nop
        dcd_event_setup_received(rhport, (uint8_t*) _setup_packet, true);
      }

      // OUT XFER complete
      if (epout->doepint & DOEPINT_XFRC) {
 8106c74:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8106c76:	689b      	ldr	r3, [r3, #8]
 8106c78:	f003 0301 	and.w	r3, r3, #1
 8106c7c:	2b00      	cmp	r3, #0
 8106c7e:	d048      	beq.n	8106d12 <handle_epout_irq+0x16e>
        epout->doepint = DOEPINT_XFRC;
 8106c80:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8106c82:	2201      	movs	r2, #1
 8106c84:	609a      	str	r2, [r3, #8]

        xfer_ctl_t* xfer = XFER_CTL_BASE(n, TUSB_DIR_OUT);
 8106c86:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8106c8a:	015b      	lsls	r3, r3, #5
 8106c8c:	4a2c      	ldr	r2, [pc, #176]	; (8106d40 <handle_epout_irq+0x19c>)
 8106c8e:	4413      	add	r3, r2
 8106c90:	637b      	str	r3, [r7, #52]	; 0x34

        // EP0 can only handle one packet
        if ((n == 0) && ep0_pending[TUSB_DIR_OUT]) {
 8106c92:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8106c96:	2b00      	cmp	r3, #0
 8106c98:	d10e      	bne.n	8106cb8 <handle_epout_irq+0x114>
 8106c9a:	4b2a      	ldr	r3, [pc, #168]	; (8106d44 <handle_epout_irq+0x1a0>)
 8106c9c:	881b      	ldrh	r3, [r3, #0]
 8106c9e:	2b00      	cmp	r3, #0
 8106ca0:	d00a      	beq.n	8106cb8 <handle_epout_irq+0x114>
          // Schedule another packet to be received.
          edpt_schedule_packets(rhport, n, TUSB_DIR_OUT, 1, ep0_pending[TUSB_DIR_OUT]);
 8106ca2:	4b28      	ldr	r3, [pc, #160]	; (8106d44 <handle_epout_irq+0x1a0>)
 8106ca4:	881b      	ldrh	r3, [r3, #0]
 8106ca6:	f897 104f 	ldrb.w	r1, [r7, #79]	; 0x4f
 8106caa:	79f8      	ldrb	r0, [r7, #7]
 8106cac:	9300      	str	r3, [sp, #0]
 8106cae:	2301      	movs	r3, #1
 8106cb0:	2200      	movs	r2, #0
 8106cb2:	f7fe ff89 	bl	8105bc8 <edpt_schedule_packets>
 8106cb6:	e02c      	b.n	8106d12 <handle_epout_irq+0x16e>
        } else {
          dcd_event_xfer_complete(rhport, n, xfer->total_len, XFER_RESULT_SUCCESS, true);
 8106cb8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8106cba:	891b      	ldrh	r3, [r3, #8]
 8106cbc:	461a      	mov	r2, r3
 8106cbe:	79fb      	ldrb	r3, [r7, #7]
 8106cc0:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8106cc4:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8106cc8:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
 8106ccc:	627a      	str	r2, [r7, #36]	; 0x24
 8106cce:	2300      	movs	r3, #0
 8106cd0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8106cd4:	2301      	movs	r3, #1
 8106cd6:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22

// helper to send transfer complete event
TU_ATTR_ALWAYS_INLINE static inline void dcd_event_xfer_complete (uint8_t rhport, uint8_t ep_addr, uint32_t xferred_bytes, uint8_t result, bool in_isr) {
  dcd_event_t event = { .rhport = rhport, .event_id = DCD_EVENT_XFER_COMPLETE };
 8106cda:	f107 0308 	add.w	r3, r7, #8
 8106cde:	2200      	movs	r2, #0
 8106ce0:	601a      	str	r2, [r3, #0]
 8106ce2:	605a      	str	r2, [r3, #4]
 8106ce4:	609a      	str	r2, [r3, #8]
 8106ce6:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 8106cea:	723b      	strb	r3, [r7, #8]
 8106cec:	2307      	movs	r3, #7
 8106cee:	727b      	strb	r3, [r7, #9]

  event.xfer_complete.ep_addr = ep_addr;
 8106cf0:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 8106cf4:	733b      	strb	r3, [r7, #12]
  event.xfer_complete.len     = xferred_bytes;
 8106cf6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8106cf8:	613b      	str	r3, [r7, #16]
  event.xfer_complete.result  = result;
 8106cfa:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8106cfe:	737b      	strb	r3, [r7, #13]

  dcd_event_handler(&event, in_isr);
 8106d00:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 8106d04:	f107 0308 	add.w	r3, r7, #8
 8106d08:	4611      	mov	r1, r2
 8106d0a:	4618      	mov	r0, r3
 8106d0c:	f7fd ffbe 	bl	8104c8c <dcd_event_handler>
}
 8106d10:	bf00      	nop
  for (uint8_t n = 0; n < ep_count; n++) {
 8106d12:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8106d16:	3301      	adds	r3, #1
 8106d18:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
 8106d1c:	f897 204f 	ldrb.w	r2, [r7, #79]	; 0x4f
 8106d20:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8106d24:	429a      	cmp	r2, r3
 8106d26:	f4ff af54 	bcc.w	8106bd2 <handle_epout_irq+0x2e>
        }
      }
    }
  }
}
 8106d2a:	bf00      	nop
 8106d2c:	bf00      	nop
 8106d2e:	3750      	adds	r7, #80	; 0x50
 8106d30:	46bd      	mov	sp, r7
 8106d32:	bd80      	pop	{r7, pc}
 8106d34:	08111edc 	.word	0x08111edc
 8106d38:	4f543009 	.word	0x4f543009
 8106d3c:	100010fc 	.word	0x100010fc
 8106d40:	10001104 	.word	0x10001104
 8106d44:	10001224 	.word	0x10001224

08106d48 <handle_epin_irq>:

static void handle_epin_irq(uint8_t rhport) {
 8106d48:	b580      	push	{r7, lr}
 8106d4a:	b094      	sub	sp, #80	; 0x50
 8106d4c:	af02      	add	r7, sp, #8
 8106d4e:	4603      	mov	r3, r0
 8106d50:	71fb      	strb	r3, [r7, #7]
  dwc2_regs_t* dwc2 = DWC2_REG(rhport);
 8106d52:	79fb      	ldrb	r3, [r7, #7]
 8106d54:	4a88      	ldr	r2, [pc, #544]	; (8106f78 <handle_epin_irq+0x230>)
 8106d56:	011b      	lsls	r3, r3, #4
 8106d58:	4413      	add	r3, r2
 8106d5a:	681b      	ldr	r3, [r3, #0]
 8106d5c:	643b      	str	r3, [r7, #64]	; 0x40
  uint8_t const ep_count = _dwc2_controller[rhport].ep_count;
 8106d5e:	79fb      	ldrb	r3, [r7, #7]
 8106d60:	4a85      	ldr	r2, [pc, #532]	; (8106f78 <handle_epin_irq+0x230>)
 8106d62:	011b      	lsls	r3, r3, #4
 8106d64:	4413      	add	r3, r2
 8106d66:	3308      	adds	r3, #8
 8106d68:	781b      	ldrb	r3, [r3, #0]
 8106d6a:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  dwc2_epin_t* epin = dwc2->epin;
 8106d6e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8106d70:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8106d74:	63bb      	str	r3, [r7, #56]	; 0x38

  // DAINT for a given EP clears when DIEPINTx is cleared.
  // IEPINT will be cleared when DAINT's out bits are cleared.
  for (uint8_t n = 0; n < ep_count; n++) {
 8106d76:	2300      	movs	r3, #0
 8106d78:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 8106d7c:	e0f0      	b.n	8106f60 <handle_epin_irq+0x218>
    if (dwc2->daint & TU_BIT(DAINT_IEPINT_Pos + n)) {
 8106d7e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8106d80:	f8d3 2818 	ldr.w	r2, [r3, #2072]	; 0x818
 8106d84:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8106d88:	fa22 f303 	lsr.w	r3, r2, r3
 8106d8c:	f003 0301 	and.w	r3, r3, #1
 8106d90:	2b00      	cmp	r3, #0
 8106d92:	f000 80e0 	beq.w	8106f56 <handle_epin_irq+0x20e>
      // IN XFER complete (entire xfer).
      xfer_ctl_t* xfer = XFER_CTL_BASE(n, TUSB_DIR_IN);
 8106d96:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8106d9a:	015b      	lsls	r3, r3, #5
 8106d9c:	3310      	adds	r3, #16
 8106d9e:	4a77      	ldr	r2, [pc, #476]	; (8106f7c <handle_epin_irq+0x234>)
 8106da0:	4413      	add	r3, r2
 8106da2:	637b      	str	r3, [r7, #52]	; 0x34

      if (epin[n].diepint & DIEPINT_XFRC) {
 8106da4:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8106da8:	015b      	lsls	r3, r3, #5
 8106daa:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8106dac:	4413      	add	r3, r2
 8106dae:	689b      	ldr	r3, [r3, #8]
 8106db0:	f003 0301 	and.w	r3, r3, #1
 8106db4:	2b00      	cmp	r3, #0
 8106db6:	d046      	beq.n	8106e46 <handle_epin_irq+0xfe>
        epin[n].diepint = DIEPINT_XFRC;
 8106db8:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8106dbc:	015b      	lsls	r3, r3, #5
 8106dbe:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8106dc0:	4413      	add	r3, r2
 8106dc2:	2201      	movs	r2, #1
 8106dc4:	609a      	str	r2, [r3, #8]

        // EP0 can only handle one packet
        if ((n == 0) && ep0_pending[TUSB_DIR_IN]) {
 8106dc6:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8106dca:	2b00      	cmp	r3, #0
 8106dcc:	d10e      	bne.n	8106dec <handle_epin_irq+0xa4>
 8106dce:	4b6c      	ldr	r3, [pc, #432]	; (8106f80 <handle_epin_irq+0x238>)
 8106dd0:	885b      	ldrh	r3, [r3, #2]
 8106dd2:	2b00      	cmp	r3, #0
 8106dd4:	d00a      	beq.n	8106dec <handle_epin_irq+0xa4>
          // Schedule another packet to be transmitted.
          edpt_schedule_packets(rhport, n, TUSB_DIR_IN, 1, ep0_pending[TUSB_DIR_IN]);
 8106dd6:	4b6a      	ldr	r3, [pc, #424]	; (8106f80 <handle_epin_irq+0x238>)
 8106dd8:	885b      	ldrh	r3, [r3, #2]
 8106dda:	f897 1047 	ldrb.w	r1, [r7, #71]	; 0x47
 8106dde:	79f8      	ldrb	r0, [r7, #7]
 8106de0:	9300      	str	r3, [sp, #0]
 8106de2:	2301      	movs	r3, #1
 8106de4:	2201      	movs	r2, #1
 8106de6:	f7fe feef 	bl	8105bc8 <edpt_schedule_packets>
 8106dea:	e02c      	b.n	8106e46 <handle_epin_irq+0xfe>
        } else {
          dcd_event_xfer_complete(rhport, n | TUSB_DIR_IN_MASK, xfer->total_len, XFER_RESULT_SUCCESS, true);
 8106dec:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8106df0:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8106df4:	b2d9      	uxtb	r1, r3
 8106df6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8106df8:	891b      	ldrh	r3, [r3, #8]
 8106dfa:	461a      	mov	r2, r3
 8106dfc:	79fb      	ldrb	r3, [r7, #7]
 8106dfe:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8106e02:	460b      	mov	r3, r1
 8106e04:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8106e08:	623a      	str	r2, [r7, #32]
 8106e0a:	2300      	movs	r3, #0
 8106e0c:	77fb      	strb	r3, [r7, #31]
 8106e0e:	2301      	movs	r3, #1
 8106e10:	77bb      	strb	r3, [r7, #30]
  dcd_event_t event = { .rhport = rhport, .event_id = DCD_EVENT_XFER_COMPLETE };
 8106e12:	f107 030c 	add.w	r3, r7, #12
 8106e16:	2200      	movs	r2, #0
 8106e18:	601a      	str	r2, [r3, #0]
 8106e1a:	605a      	str	r2, [r3, #4]
 8106e1c:	609a      	str	r2, [r3, #8]
 8106e1e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8106e22:	733b      	strb	r3, [r7, #12]
 8106e24:	2307      	movs	r3, #7
 8106e26:	737b      	strb	r3, [r7, #13]
  event.xfer_complete.ep_addr = ep_addr;
 8106e28:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8106e2c:	743b      	strb	r3, [r7, #16]
  event.xfer_complete.len     = xferred_bytes;
 8106e2e:	6a3b      	ldr	r3, [r7, #32]
 8106e30:	617b      	str	r3, [r7, #20]
  event.xfer_complete.result  = result;
 8106e32:	7ffb      	ldrb	r3, [r7, #31]
 8106e34:	747b      	strb	r3, [r7, #17]
  dcd_event_handler(&event, in_isr);
 8106e36:	7fba      	ldrb	r2, [r7, #30]
 8106e38:	f107 030c 	add.w	r3, r7, #12
 8106e3c:	4611      	mov	r1, r2
 8106e3e:	4618      	mov	r0, r3
 8106e40:	f7fd ff24 	bl	8104c8c <dcd_event_handler>
}
 8106e44:	bf00      	nop
        }
      }

      // XFER FIFO empty
      if ((epin[n].diepint & DIEPINT_TXFE) && (dwc2->diepempmsk & (1 << n))) {
 8106e46:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8106e4a:	015b      	lsls	r3, r3, #5
 8106e4c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8106e4e:	4413      	add	r3, r2
 8106e50:	689b      	ldr	r3, [r3, #8]
 8106e52:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8106e56:	2b00      	cmp	r3, #0
 8106e58:	d07d      	beq.n	8106f56 <handle_epin_irq+0x20e>
 8106e5a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8106e5c:	f8d3 3834 	ldr.w	r3, [r3, #2100]	; 0x834
 8106e60:	f897 2047 	ldrb.w	r2, [r7, #71]	; 0x47
 8106e64:	2101      	movs	r1, #1
 8106e66:	fa01 f202 	lsl.w	r2, r1, r2
 8106e6a:	4013      	ands	r3, r2
 8106e6c:	2b00      	cmp	r3, #0
 8106e6e:	d072      	beq.n	8106f56 <handle_epin_irq+0x20e>
        // diepint's TXFE bit is read-only, software cannot clear it.
        // It will only be cleared by hardware when written bytes is more than
        // - 64 bytes or
        // - Half of TX FIFO size (configured by DIEPTXF)

        uint16_t remaining_packets = (epin[n].dieptsiz & DIEPTSIZ_PKTCNT_Msk) >> DIEPTSIZ_PKTCNT_Pos;
 8106e70:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8106e74:	015b      	lsls	r3, r3, #5
 8106e76:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8106e78:	4413      	add	r3, r2
 8106e7a:	691b      	ldr	r3, [r3, #16]
 8106e7c:	0cdb      	lsrs	r3, r3, #19
 8106e7e:	b29b      	uxth	r3, r3
 8106e80:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8106e84:	867b      	strh	r3, [r7, #50]	; 0x32

        // Process every single packet (only whole packets can be written to fifo)
        for (uint16_t i = 0; i < remaining_packets; i++) {
 8106e86:	2300      	movs	r3, #0
 8106e88:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 8106e8c:	e045      	b.n	8106f1a <handle_epin_irq+0x1d2>
          uint16_t const remaining_bytes = (epin[n].dieptsiz & DIEPTSIZ_XFRSIZ_Msk) >> DIEPTSIZ_XFRSIZ_Pos;
 8106e8e:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8106e92:	015b      	lsls	r3, r3, #5
 8106e94:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8106e96:	4413      	add	r3, r2
 8106e98:	691b      	ldr	r3, [r3, #16]
 8106e9a:	863b      	strh	r3, [r7, #48]	; 0x30

          // Packet can not be larger than ep max size
          uint16_t const packet_size = tu_min16(remaining_bytes, xfer->max_size);
 8106e9c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8106e9e:	895a      	ldrh	r2, [r3, #10]
 8106ea0:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8106ea2:	83bb      	strh	r3, [r7, #28]
 8106ea4:	4613      	mov	r3, r2
 8106ea6:	837b      	strh	r3, [r7, #26]
TU_ATTR_ALWAYS_INLINE static inline uint16_t tu_min16 (uint16_t x, uint16_t y) { return (x < y) ? x : y; }
 8106ea8:	8bba      	ldrh	r2, [r7, #28]
 8106eaa:	8b7b      	ldrh	r3, [r7, #26]
 8106eac:	4293      	cmp	r3, r2
 8106eae:	bf28      	it	cs
 8106eb0:	4613      	movcs	r3, r2
 8106eb2:	b29b      	uxth	r3, r3
 8106eb4:	85fb      	strh	r3, [r7, #46]	; 0x2e

          // It's only possible to write full packets into FIFO. Therefore DTXFSTS register of current
          // EP has to be checked if the buffer can take another WHOLE packet
          if (packet_size > ((epin[n].dtxfsts & DTXFSTS_INEPTFSAV_Msk) << 2)) break;
 8106eb6:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8106eb8:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8106ebc:	015b      	lsls	r3, r3, #5
 8106ebe:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8106ec0:	440b      	add	r3, r1
 8106ec2:	699b      	ldr	r3, [r3, #24]
 8106ec4:	0099      	lsls	r1, r3, #2
 8106ec6:	4b2f      	ldr	r3, [pc, #188]	; (8106f84 <handle_epin_irq+0x23c>)
 8106ec8:	400b      	ands	r3, r1
 8106eca:	429a      	cmp	r2, r3
 8106ecc:	d82b      	bhi.n	8106f26 <handle_epin_irq+0x1de>

          // Push packet to Tx-FIFO
          if (xfer->ff) {
 8106ece:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8106ed0:	685b      	ldr	r3, [r3, #4]
 8106ed2:	2b00      	cmp	r3, #0
 8106ed4:	d00e      	beq.n	8106ef4 <handle_epin_irq+0x1ac>
            volatile uint32_t* tx_fifo = dwc2->fifo[n];
 8106ed6:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8106eda:	3301      	adds	r3, #1
 8106edc:	031b      	lsls	r3, r3, #12
 8106ede:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8106ee0:	4413      	add	r3, r2
 8106ee2:	62bb      	str	r3, [r7, #40]	; 0x28
            tu_fifo_read_n_const_addr_full_words(xfer->ff, (void*) (uintptr_t) tx_fifo, packet_size);
 8106ee4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8106ee6:	685b      	ldr	r3, [r3, #4]
 8106ee8:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8106eea:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8106eec:	4618      	mov	r0, r3
 8106eee:	f7fc fe2c 	bl	8103b4a <tu_fifo_read_n_const_addr_full_words>
 8106ef2:	e00d      	b.n	8106f10 <handle_epin_irq+0x1c8>
          } else {
            write_fifo_packet(rhport, n, xfer->buffer, packet_size);
 8106ef4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8106ef6:	681a      	ldr	r2, [r3, #0]
 8106ef8:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8106efa:	f897 1047 	ldrb.w	r1, [r7, #71]	; 0x47
 8106efe:	79f8      	ldrb	r0, [r7, #7]
 8106f00:	f7ff fd2c 	bl	810695c <write_fifo_packet>

            // Increment pointer to xfer data
            xfer->buffer += packet_size;
 8106f04:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8106f06:	681a      	ldr	r2, [r3, #0]
 8106f08:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8106f0a:	441a      	add	r2, r3
 8106f0c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8106f0e:	601a      	str	r2, [r3, #0]
        for (uint16_t i = 0; i < remaining_packets; i++) {
 8106f10:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8106f14:	3301      	adds	r3, #1
 8106f16:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 8106f1a:	f8b7 2044 	ldrh.w	r2, [r7, #68]	; 0x44
 8106f1e:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 8106f20:	429a      	cmp	r2, r3
 8106f22:	d3b4      	bcc.n	8106e8e <handle_epin_irq+0x146>
 8106f24:	e000      	b.n	8106f28 <handle_epin_irq+0x1e0>
          if (packet_size > ((epin[n].dtxfsts & DTXFSTS_INEPTFSAV_Msk) << 2)) break;
 8106f26:	bf00      	nop
          }
        }

        // Turn off TXFE if all bytes are written.
        if (((epin[n].dieptsiz & DIEPTSIZ_XFRSIZ_Msk) >> DIEPTSIZ_XFRSIZ_Pos) == 0) {
 8106f28:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8106f2c:	015b      	lsls	r3, r3, #5
 8106f2e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8106f30:	4413      	add	r3, r2
 8106f32:	691b      	ldr	r3, [r3, #16]
 8106f34:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8106f38:	2b00      	cmp	r3, #0
 8106f3a:	d10c      	bne.n	8106f56 <handle_epin_irq+0x20e>
          dwc2->diepempmsk &= ~(1 << n);
 8106f3c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8106f3e:	f8d3 3834 	ldr.w	r3, [r3, #2100]	; 0x834
 8106f42:	f897 2047 	ldrb.w	r2, [r7, #71]	; 0x47
 8106f46:	2101      	movs	r1, #1
 8106f48:	fa01 f202 	lsl.w	r2, r1, r2
 8106f4c:	43d2      	mvns	r2, r2
 8106f4e:	401a      	ands	r2, r3
 8106f50:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8106f52:	f8c3 2834 	str.w	r2, [r3, #2100]	; 0x834
  for (uint8_t n = 0; n < ep_count; n++) {
 8106f56:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8106f5a:	3301      	adds	r3, #1
 8106f5c:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 8106f60:	f897 2047 	ldrb.w	r2, [r7, #71]	; 0x47
 8106f64:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8106f68:	429a      	cmp	r2, r3
 8106f6a:	f4ff af08 	bcc.w	8106d7e <handle_epin_irq+0x36>
        }
      }
    }
  }
}
 8106f6e:	bf00      	nop
 8106f70:	bf00      	nop
 8106f72:	3748      	adds	r7, #72	; 0x48
 8106f74:	46bd      	mov	sp, r7
 8106f76:	bd80      	pop	{r7, pc}
 8106f78:	08111edc 	.word	0x08111edc
 8106f7c:	10001104 	.word	0x10001104
 8106f80:	10001224 	.word	0x10001224
 8106f84:	0003fffc 	.word	0x0003fffc

08106f88 <dcd_int_handler>:

void dcd_int_handler(uint8_t rhport) {
 8106f88:	b580      	push	{r7, lr}
 8106f8a:	b0a0      	sub	sp, #128	; 0x80
 8106f8c:	af00      	add	r7, sp, #0
 8106f8e:	4603      	mov	r3, r0
 8106f90:	71fb      	strb	r3, [r7, #7]
  dwc2_regs_t* dwc2 = DWC2_REG(rhport);
 8106f92:	79fb      	ldrb	r3, [r7, #7]
 8106f94:	4ab7      	ldr	r2, [pc, #732]	; (8107274 <dcd_int_handler+0x2ec>)
 8106f96:	011b      	lsls	r3, r3, #4
 8106f98:	4413      	add	r3, r2
 8106f9a:	681b      	ldr	r3, [r3, #0]
 8106f9c:	67bb      	str	r3, [r7, #120]	; 0x78

  uint32_t const int_mask = dwc2->gintmsk;
 8106f9e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8106fa0:	699b      	ldr	r3, [r3, #24]
 8106fa2:	677b      	str	r3, [r7, #116]	; 0x74
  uint32_t const int_status = dwc2->gintsts & int_mask;
 8106fa4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8106fa6:	695b      	ldr	r3, [r3, #20]
 8106fa8:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8106faa:	4013      	ands	r3, r2
 8106fac:	673b      	str	r3, [r7, #112]	; 0x70

  if (int_status & GINTSTS_USBRST) {
 8106fae:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8106fb0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8106fb4:	2b00      	cmp	r3, #0
 8106fb6:	d007      	beq.n	8106fc8 <dcd_int_handler+0x40>
    // USBRST is start of reset.
    dwc2->gintsts = GINTSTS_USBRST;
 8106fb8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8106fba:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8106fbe:	615a      	str	r2, [r3, #20]
    bus_reset(rhport);
 8106fc0:	79fb      	ldrb	r3, [r7, #7]
 8106fc2:	4618      	mov	r0, r3
 8106fc4:	f7fe fd70 	bl	8105aa8 <bus_reset>
  }

  if (int_status & GINTSTS_ENUMDNE) {
 8106fc8:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8106fca:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8106fce:	2b00      	cmp	r3, #0
 8106fd0:	d03e      	beq.n	8107050 <dcd_int_handler+0xc8>
    // ENUMDNE is the end of reset where speed of the link is detected
    dwc2->gintsts = GINTSTS_ENUMDNE;
 8106fd2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8106fd4:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8106fd8:	615a      	str	r2, [r3, #20]

    tusb_speed_t speed;
    switch ((dwc2->dsts & DSTS_ENUMSPD_Msk) >> DSTS_ENUMSPD_Pos) {
 8106fda:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8106fdc:	f8d3 3808 	ldr.w	r3, [r3, #2056]	; 0x808
 8106fe0:	085b      	lsrs	r3, r3, #1
 8106fe2:	f003 0303 	and.w	r3, r3, #3
 8106fe6:	2b00      	cmp	r3, #0
 8106fe8:	d002      	beq.n	8106ff0 <dcd_int_handler+0x68>
 8106fea:	2b02      	cmp	r3, #2
 8106fec:	d004      	beq.n	8106ff8 <dcd_int_handler+0x70>
 8106fee:	e007      	b.n	8107000 <dcd_int_handler+0x78>
      case DSTS_ENUMSPD_HS:
        speed = TUSB_SPEED_HIGH;
 8106ff0:	2302      	movs	r3, #2
 8106ff2:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
        break;
 8106ff6:	e007      	b.n	8107008 <dcd_int_handler+0x80>

      case DSTS_ENUMSPD_LS:
        speed = TUSB_SPEED_LOW;
 8106ff8:	2301      	movs	r3, #1
 8106ffa:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
        break;
 8106ffe:	e003      	b.n	8107008 <dcd_int_handler+0x80>

      case DSTS_ENUMSPD_FS_HSPHY:
      case DSTS_ENUMSPD_FS:
      default:
        speed = TUSB_SPEED_FULL;
 8107000:	2300      	movs	r3, #0
 8107002:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
        break;
 8107006:	bf00      	nop
 8107008:	79fb      	ldrb	r3, [r7, #7]
 810700a:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 810700e:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 8107012:	f887 3066 	strb.w	r3, [r7, #102]	; 0x66
 8107016:	2301      	movs	r3, #1
 8107018:	f887 3065 	strb.w	r3, [r7, #101]	; 0x65
  dcd_event_t event = { .rhport = rhport, .event_id = DCD_EVENT_BUS_RESET };
 810701c:	f107 0320 	add.w	r3, r7, #32
 8107020:	2200      	movs	r2, #0
 8107022:	601a      	str	r2, [r3, #0]
 8107024:	605a      	str	r2, [r3, #4]
 8107026:	609a      	str	r2, [r3, #8]
 8107028:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 810702c:	f887 3020 	strb.w	r3, [r7, #32]
 8107030:	2301      	movs	r3, #1
 8107032:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
  event.bus_reset.speed = speed;
 8107036:	f897 3066 	ldrb.w	r3, [r7, #102]	; 0x66
 810703a:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  dcd_event_handler(&event, in_isr);
 810703e:	f897 2065 	ldrb.w	r2, [r7, #101]	; 0x65
 8107042:	f107 0320 	add.w	r3, r7, #32
 8107046:	4611      	mov	r1, r2
 8107048:	4618      	mov	r0, r3
 810704a:	f7fd fe1f 	bl	8104c8c <dcd_event_handler>
}
 810704e:	bf00      	nop
    // TODO must update GUSBCFG_TRDT according to link speed

    dcd_event_bus_reset(rhport, speed, true);
  }

  if (int_status & GINTSTS_USBSUSP) {
 8107050:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8107052:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8107056:	2b00      	cmp	r3, #0
 8107058:	d023      	beq.n	81070a2 <dcd_int_handler+0x11a>
    dwc2->gintsts = GINTSTS_USBSUSP;
 810705a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 810705c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8107060:	615a      	str	r2, [r3, #20]
 8107062:	79fb      	ldrb	r3, [r7, #7]
 8107064:	f887 3064 	strb.w	r3, [r7, #100]	; 0x64
 8107068:	2304      	movs	r3, #4
 810706a:	f887 3063 	strb.w	r3, [r7, #99]	; 0x63
 810706e:	2301      	movs	r3, #1
 8107070:	f887 3062 	strb.w	r3, [r7, #98]	; 0x62
  dcd_event_t event = { .rhport = rhport, .event_id = eid };
 8107074:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8107078:	2200      	movs	r2, #0
 810707a:	601a      	str	r2, [r3, #0]
 810707c:	605a      	str	r2, [r3, #4]
 810707e:	609a      	str	r2, [r3, #8]
 8107080:	f897 3064 	ldrb.w	r3, [r7, #100]	; 0x64
 8107084:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
 8107088:	f897 3063 	ldrb.w	r3, [r7, #99]	; 0x63
 810708c:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
  dcd_event_handler(&event, in_isr);
 8107090:	f897 2062 	ldrb.w	r2, [r7, #98]	; 0x62
 8107094:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8107098:	4611      	mov	r1, r2
 810709a:	4618      	mov	r0, r3
 810709c:	f7fd fdf6 	bl	8104c8c <dcd_event_handler>
}
 81070a0:	bf00      	nop
    dcd_event_bus_signal(rhport, DCD_EVENT_SUSPEND, true);
  }

  if (int_status & GINTSTS_WKUINT) {
 81070a2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 81070a4:	2b00      	cmp	r3, #0
 81070a6:	da23      	bge.n	81070f0 <dcd_int_handler+0x168>
    dwc2->gintsts = GINTSTS_WKUINT;
 81070a8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 81070aa:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 81070ae:	615a      	str	r2, [r3, #20]
 81070b0:	79fb      	ldrb	r3, [r7, #7]
 81070b2:	f887 3061 	strb.w	r3, [r7, #97]	; 0x61
 81070b6:	2305      	movs	r3, #5
 81070b8:	f887 3060 	strb.w	r3, [r7, #96]	; 0x60
 81070bc:	2301      	movs	r3, #1
 81070be:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
  dcd_event_t event = { .rhport = rhport, .event_id = eid };
 81070c2:	f107 0338 	add.w	r3, r7, #56	; 0x38
 81070c6:	2200      	movs	r2, #0
 81070c8:	601a      	str	r2, [r3, #0]
 81070ca:	605a      	str	r2, [r3, #4]
 81070cc:	609a      	str	r2, [r3, #8]
 81070ce:	f897 3061 	ldrb.w	r3, [r7, #97]	; 0x61
 81070d2:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
 81070d6:	f897 3060 	ldrb.w	r3, [r7, #96]	; 0x60
 81070da:	f887 3039 	strb.w	r3, [r7, #57]	; 0x39
  dcd_event_handler(&event, in_isr);
 81070de:	f897 205f 	ldrb.w	r2, [r7, #95]	; 0x5f
 81070e2:	f107 0338 	add.w	r3, r7, #56	; 0x38
 81070e6:	4611      	mov	r1, r2
 81070e8:	4618      	mov	r0, r3
 81070ea:	f7fd fdcf 	bl	8104c8c <dcd_event_handler>
}
 81070ee:	bf00      	nop
  }

  // TODO check GINTSTS_DISCINT for disconnect detection
  // if(int_status & GINTSTS_DISCINT)

  if (int_status & GINTSTS_OTGINT) {
 81070f0:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 81070f2:	f003 0304 	and.w	r3, r3, #4
 81070f6:	2b00      	cmp	r3, #0
 81070f8:	d028      	beq.n	810714c <dcd_int_handler+0x1c4>
    // OTG INT bit is read-only
    uint32_t const otg_int = dwc2->gotgint;
 81070fa:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 81070fc:	685b      	ldr	r3, [r3, #4]
 81070fe:	66fb      	str	r3, [r7, #108]	; 0x6c

    if (otg_int & GOTGINT_SEDET) {
 8107100:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8107102:	f003 0304 	and.w	r3, r3, #4
 8107106:	2b00      	cmp	r3, #0
 8107108:	d01d      	beq.n	8107146 <dcd_int_handler+0x1be>
 810710a:	79fb      	ldrb	r3, [r7, #7]
 810710c:	f887 305e 	strb.w	r3, [r7, #94]	; 0x5e
 8107110:	2302      	movs	r3, #2
 8107112:	f887 305d 	strb.w	r3, [r7, #93]	; 0x5d
 8107116:	2301      	movs	r3, #1
 8107118:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
  dcd_event_t event = { .rhport = rhport, .event_id = eid };
 810711c:	f107 0314 	add.w	r3, r7, #20
 8107120:	2200      	movs	r2, #0
 8107122:	601a      	str	r2, [r3, #0]
 8107124:	605a      	str	r2, [r3, #4]
 8107126:	609a      	str	r2, [r3, #8]
 8107128:	f897 305e 	ldrb.w	r3, [r7, #94]	; 0x5e
 810712c:	753b      	strb	r3, [r7, #20]
 810712e:	f897 305d 	ldrb.w	r3, [r7, #93]	; 0x5d
 8107132:	757b      	strb	r3, [r7, #21]
  dcd_event_handler(&event, in_isr);
 8107134:	f897 205c 	ldrb.w	r2, [r7, #92]	; 0x5c
 8107138:	f107 0314 	add.w	r3, r7, #20
 810713c:	4611      	mov	r1, r2
 810713e:	4618      	mov	r0, r3
 8107140:	f7fd fda4 	bl	8104c8c <dcd_event_handler>
}
 8107144:	bf00      	nop
      dcd_event_bus_signal(rhport, DCD_EVENT_UNPLUGGED, true);
    }

    dwc2->gotgint = otg_int;
 8107146:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8107148:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 810714a:	605a      	str	r2, [r3, #4]
  }

  if (int_status & GINTSTS_SOF) {
 810714c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 810714e:	f003 0308 	and.w	r3, r3, #8
 8107152:	2b00      	cmp	r3, #0
 8107154:	d051      	beq.n	81071fa <dcd_int_handler+0x272>
    dwc2->gotgint = GINTSTS_SOF;
 8107156:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8107158:	2208      	movs	r2, #8
 810715a:	605a      	str	r2, [r3, #4]

    if (_sof_en) {
 810715c:	4b46      	ldr	r3, [pc, #280]	; (8107278 <dcd_int_handler+0x2f0>)
 810715e:	781b      	ldrb	r3, [r3, #0]
 8107160:	2b00      	cmp	r3, #0
 8107162:	d024      	beq.n	81071ae <dcd_int_handler+0x226>
      uint32_t frame = (dwc2->dsts & (DSTS_FNSOF)) >> 8;
 8107164:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8107166:	f8d3 3808 	ldr.w	r3, [r3, #2056]	; 0x808
 810716a:	0a1b      	lsrs	r3, r3, #8
 810716c:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8107170:	66bb      	str	r3, [r7, #104]	; 0x68
 8107172:	79fb      	ldrb	r3, [r7, #7]
 8107174:	f887 305b 	strb.w	r3, [r7, #91]	; 0x5b
 8107178:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 810717a:	657b      	str	r3, [r7, #84]	; 0x54
 810717c:	2301      	movs	r3, #1
 810717e:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53

TU_ATTR_ALWAYS_INLINE static inline void dcd_event_sof(uint8_t rhport, uint32_t frame_count, bool in_isr) {
  dcd_event_t event = { .rhport = rhport, .event_id = DCD_EVENT_SOF };
 8107182:	f107 0308 	add.w	r3, r7, #8
 8107186:	2200      	movs	r2, #0
 8107188:	601a      	str	r2, [r3, #0]
 810718a:	605a      	str	r2, [r3, #4]
 810718c:	609a      	str	r2, [r3, #8]
 810718e:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
 8107192:	723b      	strb	r3, [r7, #8]
 8107194:	2303      	movs	r3, #3
 8107196:	727b      	strb	r3, [r7, #9]
  event.sof.frame_count = frame_count;
 8107198:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 810719a:	60fb      	str	r3, [r7, #12]
  dcd_event_handler(&event, in_isr);
 810719c:	f897 2053 	ldrb.w	r2, [r7, #83]	; 0x53
 81071a0:	f107 0308 	add.w	r3, r7, #8
 81071a4:	4611      	mov	r1, r2
 81071a6:	4618      	mov	r0, r3
 81071a8:	f7fd fd70 	bl	8104c8c <dcd_event_handler>
}
 81071ac:	e005      	b.n	81071ba <dcd_int_handler+0x232>
      dcd_event_sof(rhport, frame, true);
    } else {
      // Disable SOF interrupt if SOF was not explicitly enabled. SOF was used for remote wakeup detection
      dwc2->gintmsk &= ~GINTMSK_SOFM;
 81071ae:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 81071b0:	699b      	ldr	r3, [r3, #24]
 81071b2:	f023 0208 	bic.w	r2, r3, #8
 81071b6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 81071b8:	619a      	str	r2, [r3, #24]
 81071ba:	79fb      	ldrb	r3, [r7, #7]
 81071bc:	f887 3052 	strb.w	r3, [r7, #82]	; 0x52
 81071c0:	2303      	movs	r3, #3
 81071c2:	f887 3051 	strb.w	r3, [r7, #81]	; 0x51
 81071c6:	2301      	movs	r3, #1
 81071c8:	f887 3050 	strb.w	r3, [r7, #80]	; 0x50
  dcd_event_t event = { .rhport = rhport, .event_id = eid };
 81071cc:	f107 0344 	add.w	r3, r7, #68	; 0x44
 81071d0:	2200      	movs	r2, #0
 81071d2:	601a      	str	r2, [r3, #0]
 81071d4:	605a      	str	r2, [r3, #4]
 81071d6:	609a      	str	r2, [r3, #8]
 81071d8:	f897 3052 	ldrb.w	r3, [r7, #82]	; 0x52
 81071dc:	f887 3044 	strb.w	r3, [r7, #68]	; 0x44
 81071e0:	f897 3051 	ldrb.w	r3, [r7, #81]	; 0x51
 81071e4:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
  dcd_event_handler(&event, in_isr);
 81071e8:	f897 2050 	ldrb.w	r2, [r7, #80]	; 0x50
 81071ec:	f107 0344 	add.w	r3, r7, #68	; 0x44
 81071f0:	4611      	mov	r1, r2
 81071f2:	4618      	mov	r0, r3
 81071f4:	f7fd fd4a 	bl	8104c8c <dcd_event_handler>
}
 81071f8:	bf00      	nop

    dcd_event_bus_signal(rhport, DCD_EVENT_SOF, true);
  }

  // RxFIFO non-empty interrupt handling.
  if (int_status & GINTSTS_RXFLVL) {
 81071fa:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 81071fc:	f003 0310 	and.w	r3, r3, #16
 8107200:	2b00      	cmp	r3, #0
 8107202:	d020      	beq.n	8107246 <dcd_int_handler+0x2be>
    // RXFLVL bit is read-only

    // Mask out RXFLVL while reading data from FIFO
    dwc2->gintmsk &= ~GINTMSK_RXFLVLM;
 8107204:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8107206:	699b      	ldr	r3, [r3, #24]
 8107208:	f023 0210 	bic.w	r2, r3, #16
 810720c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 810720e:	619a      	str	r2, [r3, #24]

    // Loop until all available packets were handled
    do {
      handle_rxflvl_irq(rhport);
 8107210:	79fb      	ldrb	r3, [r7, #7]
 8107212:	4618      	mov	r0, r3
 8107214:	f7ff fbf8 	bl	8106a08 <handle_rxflvl_irq>
    } while (dwc2->gotgint & GINTSTS_RXFLVL);
 8107218:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 810721a:	685b      	ldr	r3, [r3, #4]
 810721c:	f003 0310 	and.w	r3, r3, #16
 8107220:	2b00      	cmp	r3, #0
 8107222:	d1f5      	bne.n	8107210 <dcd_int_handler+0x288>

    // Manage RX FIFO size
    if (_out_ep_closed) {
 8107224:	4b15      	ldr	r3, [pc, #84]	; (810727c <dcd_int_handler+0x2f4>)
 8107226:	781b      	ldrb	r3, [r3, #0]
 8107228:	2b00      	cmp	r3, #0
 810722a:	d006      	beq.n	810723a <dcd_int_handler+0x2b2>
      update_grxfsiz(rhport);
 810722c:	79fb      	ldrb	r3, [r7, #7]
 810722e:	4618      	mov	r0, r3
 8107230:	f7fe fbf8 	bl	8105a24 <update_grxfsiz>

      // Disable flag
      _out_ep_closed = false;
 8107234:	4b11      	ldr	r3, [pc, #68]	; (810727c <dcd_int_handler+0x2f4>)
 8107236:	2200      	movs	r2, #0
 8107238:	701a      	strb	r2, [r3, #0]
    }

    dwc2->gintmsk |= GINTMSK_RXFLVLM;
 810723a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 810723c:	699b      	ldr	r3, [r3, #24]
 810723e:	f043 0210 	orr.w	r2, r3, #16
 8107242:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8107244:	619a      	str	r2, [r3, #24]
  }

  // OUT endpoint interrupt handling.
  if (int_status & GINTSTS_OEPINT) {
 8107246:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8107248:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 810724c:	2b00      	cmp	r3, #0
 810724e:	d003      	beq.n	8107258 <dcd_int_handler+0x2d0>
    // OEPINT is read-only, clear using DOEPINTn
    handle_epout_irq(rhport);
 8107250:	79fb      	ldrb	r3, [r7, #7]
 8107252:	4618      	mov	r0, r3
 8107254:	f7ff fca6 	bl	8106ba4 <handle_epout_irq>
  }

  // IN endpoint interrupt handling.
  if (int_status & GINTSTS_IEPINT) {
 8107258:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 810725a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 810725e:	2b00      	cmp	r3, #0
 8107260:	d003      	beq.n	810726a <dcd_int_handler+0x2e2>
    // IEPINT bit read-only, clear using DIEPINTn
    handle_epin_irq(rhport);
 8107262:	79fb      	ldrb	r3, [r7, #7]
 8107264:	4618      	mov	r0, r3
 8107266:	f7ff fd6f 	bl	8106d48 <handle_epin_irq>
  //  // Check for Incomplete isochronous IN transfer
  //  if(int_status & GINTSTS_IISOIXFR) {
  //    printf("      IISOIXFR!\r\n");
  ////    TU_LOG(DWC2_DEBUG, "      IISOIXFR!\r\n");
  //  }
}
 810726a:	bf00      	nop
 810726c:	3780      	adds	r7, #128	; 0x80
 810726e:	46bd      	mov	sp, r7
 8107270:	bd80      	pop	{r7, pc}
 8107272:	bf00      	nop
 8107274:	08111edc 	.word	0x08111edc
 8107278:	1000122b 	.word	0x1000122b
 810727c:	1000122a 	.word	0x1000122a

08107280 <tu_edpt_claim>:
//--------------------------------------------------------------------+
// Endpoint Helper for both Host and Device stack
//--------------------------------------------------------------------+

bool tu_edpt_claim(tu_edpt_state_t* ep_state, osal_mutex_t mutex)
{
 8107280:	b480      	push	{r7}
 8107282:	b085      	sub	sp, #20
 8107284:	af00      	add	r7, sp, #0
 8107286:	6078      	str	r0, [r7, #4]
 8107288:	6039      	str	r1, [r7, #0]
  (void) mutex;

  // pre-check to help reducing mutex lock
  TU_VERIFY((ep_state->busy == 0) && (ep_state->claimed == 0));
 810728a:	687b      	ldr	r3, [r7, #4]
 810728c:	781b      	ldrb	r3, [r3, #0]
 810728e:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8107292:	b2db      	uxtb	r3, r3
 8107294:	2b00      	cmp	r3, #0
 8107296:	d106      	bne.n	81072a6 <tu_edpt_claim+0x26>
 8107298:	687b      	ldr	r3, [r7, #4]
 810729a:	781b      	ldrb	r3, [r3, #0]
 810729c:	f3c3 0380 	ubfx	r3, r3, #2, #1
 81072a0:	b2db      	uxtb	r3, r3
 81072a2:	2b00      	cmp	r3, #0
 81072a4:	d001      	beq.n	81072aa <tu_edpt_claim+0x2a>
 81072a6:	2300      	movs	r3, #0
 81072a8:	e01e      	b.n	81072e8 <tu_edpt_claim+0x68>
  (void) osal_mutex_lock(mutex, OSAL_TIMEOUT_WAIT_FOREVER);

  // can only claim the endpoint if it is not busy and not claimed yet.
  bool const available = (ep_state->busy == 0) && (ep_state->claimed == 0);
 81072aa:	687b      	ldr	r3, [r7, #4]
 81072ac:	781b      	ldrb	r3, [r3, #0]
 81072ae:	f3c3 0300 	ubfx	r3, r3, #0, #1
 81072b2:	b2db      	uxtb	r3, r3
 81072b4:	2b00      	cmp	r3, #0
 81072b6:	d108      	bne.n	81072ca <tu_edpt_claim+0x4a>
 81072b8:	687b      	ldr	r3, [r7, #4]
 81072ba:	781b      	ldrb	r3, [r3, #0]
 81072bc:	f3c3 0380 	ubfx	r3, r3, #2, #1
 81072c0:	b2db      	uxtb	r3, r3
 81072c2:	2b00      	cmp	r3, #0
 81072c4:	d101      	bne.n	81072ca <tu_edpt_claim+0x4a>
 81072c6:	2301      	movs	r3, #1
 81072c8:	e000      	b.n	81072cc <tu_edpt_claim+0x4c>
 81072ca:	2300      	movs	r3, #0
 81072cc:	73fb      	strb	r3, [r7, #15]
 81072ce:	7bfb      	ldrb	r3, [r7, #15]
 81072d0:	f003 0301 	and.w	r3, r3, #1
 81072d4:	73fb      	strb	r3, [r7, #15]
  if (available)
 81072d6:	7bfb      	ldrb	r3, [r7, #15]
 81072d8:	2b00      	cmp	r3, #0
 81072da:	d004      	beq.n	81072e6 <tu_edpt_claim+0x66>
  {
    ep_state->claimed = 1;
 81072dc:	687a      	ldr	r2, [r7, #4]
 81072de:	7813      	ldrb	r3, [r2, #0]
 81072e0:	f043 0304 	orr.w	r3, r3, #4
 81072e4:	7013      	strb	r3, [r2, #0]
  }

  (void) osal_mutex_unlock(mutex);

  return available;
 81072e6:	7bfb      	ldrb	r3, [r7, #15]
}
 81072e8:	4618      	mov	r0, r3
 81072ea:	3714      	adds	r7, #20
 81072ec:	46bd      	mov	sp, r7
 81072ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 81072f2:	4770      	bx	lr

081072f4 <tu_edpt_release>:

bool tu_edpt_release(tu_edpt_state_t* ep_state, osal_mutex_t mutex)
{
 81072f4:	b480      	push	{r7}
 81072f6:	b085      	sub	sp, #20
 81072f8:	af00      	add	r7, sp, #0
 81072fa:	6078      	str	r0, [r7, #4]
 81072fc:	6039      	str	r1, [r7, #0]
  (void) mutex;

  (void) osal_mutex_lock(mutex, OSAL_TIMEOUT_WAIT_FOREVER);

  // can only release the endpoint if it is claimed and not busy
  bool const ret = (ep_state->claimed == 1) && (ep_state->busy == 0);
 81072fe:	687b      	ldr	r3, [r7, #4]
 8107300:	781b      	ldrb	r3, [r3, #0]
 8107302:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8107306:	b2db      	uxtb	r3, r3
 8107308:	2b01      	cmp	r3, #1
 810730a:	d108      	bne.n	810731e <tu_edpt_release+0x2a>
 810730c:	687b      	ldr	r3, [r7, #4]
 810730e:	781b      	ldrb	r3, [r3, #0]
 8107310:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8107314:	b2db      	uxtb	r3, r3
 8107316:	2b00      	cmp	r3, #0
 8107318:	d101      	bne.n	810731e <tu_edpt_release+0x2a>
 810731a:	2301      	movs	r3, #1
 810731c:	e000      	b.n	8107320 <tu_edpt_release+0x2c>
 810731e:	2300      	movs	r3, #0
 8107320:	73fb      	strb	r3, [r7, #15]
 8107322:	7bfb      	ldrb	r3, [r7, #15]
 8107324:	f003 0301 	and.w	r3, r3, #1
 8107328:	73fb      	strb	r3, [r7, #15]
  if (ret)
 810732a:	7bfb      	ldrb	r3, [r7, #15]
 810732c:	2b00      	cmp	r3, #0
 810732e:	d004      	beq.n	810733a <tu_edpt_release+0x46>
  {
    ep_state->claimed = 0;
 8107330:	687a      	ldr	r2, [r7, #4]
 8107332:	7813      	ldrb	r3, [r2, #0]
 8107334:	f36f 0382 	bfc	r3, #2, #1
 8107338:	7013      	strb	r3, [r2, #0]
  }

  (void) osal_mutex_unlock(mutex);

  return ret;
 810733a:	7bfb      	ldrb	r3, [r7, #15]
}
 810733c:	4618      	mov	r0, r3
 810733e:	3714      	adds	r7, #20
 8107340:	46bd      	mov	sp, r7
 8107342:	f85d 7b04 	ldr.w	r7, [sp], #4
 8107346:	4770      	bx	lr

08107348 <tu_edpt_validate>:

bool tu_edpt_validate(tusb_desc_endpoint_t const * desc_ep, tusb_speed_t speed)
{
 8107348:	b480      	push	{r7}
 810734a:	b08b      	sub	sp, #44	; 0x2c
 810734c:	af00      	add	r7, sp, #0
 810734e:	6078      	str	r0, [r7, #4]
 8107350:	460b      	mov	r3, r1
 8107352:	70fb      	strb	r3, [r7, #3]
 8107354:	687b      	ldr	r3, [r7, #4]
 8107356:	60fb      	str	r3, [r7, #12]
  return tu_le16toh(desc_ep->wMaxPacketSize) & TU_GENMASK(10, 0);
 8107358:	68fb      	ldr	r3, [r7, #12]
 810735a:	889b      	ldrh	r3, [r3, #4]
 810735c:	b29b      	uxth	r3, r3
 810735e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8107362:	b29b      	uxth	r3, r3
  uint16_t const max_packet_size = tu_edpt_packet_size(desc_ep);
 8107364:	84fb      	strh	r3, [r7, #38]	; 0x26
  TU_LOG2("  Open EP %02X with Size = %u\r\n", desc_ep->bEndpointAddress, max_packet_size);

  switch (desc_ep->bmAttributes.xfer)
 8107366:	687b      	ldr	r3, [r7, #4]
 8107368:	78db      	ldrb	r3, [r3, #3]
 810736a:	f3c3 0301 	ubfx	r3, r3, #0, #2
 810736e:	b2db      	uxtb	r3, r3
 8107370:	2b03      	cmp	r3, #3
 8107372:	d03e      	beq.n	81073f2 <tu_edpt_validate+0xaa>
 8107374:	2b03      	cmp	r3, #3
 8107376:	dc53      	bgt.n	8107420 <tu_edpt_validate+0xd8>
 8107378:	2b01      	cmp	r3, #1
 810737a:	d002      	beq.n	8107382 <tu_edpt_validate+0x3a>
 810737c:	2b02      	cmp	r3, #2
 810737e:	d018      	beq.n	81073b2 <tu_edpt_validate+0x6a>
 8107380:	e04e      	b.n	8107420 <tu_edpt_validate+0xd8>
  {
    case TUSB_XFER_ISOCHRONOUS:
    {
      uint16_t const spec_size = (speed == TUSB_SPEED_HIGH ? 1024 : 1023);
 8107382:	78fb      	ldrb	r3, [r7, #3]
 8107384:	2b02      	cmp	r3, #2
 8107386:	d102      	bne.n	810738e <tu_edpt_validate+0x46>
 8107388:	f44f 6380 	mov.w	r3, #1024	; 0x400
 810738c:	e001      	b.n	8107392 <tu_edpt_validate+0x4a>
 810738e:	f240 33ff 	movw	r3, #1023	; 0x3ff
 8107392:	82fb      	strh	r3, [r7, #22]
      TU_ASSERT(max_packet_size <= spec_size);
 8107394:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8107396:	8afb      	ldrh	r3, [r7, #22]
 8107398:	429a      	cmp	r2, r3
 810739a:	d943      	bls.n	8107424 <tu_edpt_validate+0xdc>
 810739c:	4b27      	ldr	r3, [pc, #156]	; (810743c <tu_edpt_validate+0xf4>)
 810739e:	613b      	str	r3, [r7, #16]
 81073a0:	693b      	ldr	r3, [r7, #16]
 81073a2:	681b      	ldr	r3, [r3, #0]
 81073a4:	f003 0301 	and.w	r3, r3, #1
 81073a8:	2b00      	cmp	r3, #0
 81073aa:	d000      	beq.n	81073ae <tu_edpt_validate+0x66>
 81073ac:	be00      	bkpt	0x0000
 81073ae:	2300      	movs	r3, #0
 81073b0:	e03e      	b.n	8107430 <tu_edpt_validate+0xe8>
    }
    break;

    case TUSB_XFER_BULK:
      if (speed == TUSB_SPEED_HIGH)
 81073b2:	78fb      	ldrb	r3, [r7, #3]
 81073b4:	2b02      	cmp	r3, #2
 81073b6:	d10e      	bne.n	81073d6 <tu_edpt_validate+0x8e>
      {
        // Bulk highspeed must be EXACTLY 512
        TU_ASSERT(max_packet_size == 512);
 81073b8:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 81073ba:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 81073be:	d033      	beq.n	8107428 <tu_edpt_validate+0xe0>
 81073c0:	4b1e      	ldr	r3, [pc, #120]	; (810743c <tu_edpt_validate+0xf4>)
 81073c2:	61bb      	str	r3, [r7, #24]
 81073c4:	69bb      	ldr	r3, [r7, #24]
 81073c6:	681b      	ldr	r3, [r3, #0]
 81073c8:	f003 0301 	and.w	r3, r3, #1
 81073cc:	2b00      	cmp	r3, #0
 81073ce:	d000      	beq.n	81073d2 <tu_edpt_validate+0x8a>
 81073d0:	be00      	bkpt	0x0000
 81073d2:	2300      	movs	r3, #0
 81073d4:	e02c      	b.n	8107430 <tu_edpt_validate+0xe8>
      }else
      {
        // TODO Bulk fullspeed can only be 8, 16, 32, 64
        TU_ASSERT(max_packet_size <= 64);
 81073d6:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 81073d8:	2b40      	cmp	r3, #64	; 0x40
 81073da:	d925      	bls.n	8107428 <tu_edpt_validate+0xe0>
 81073dc:	4b17      	ldr	r3, [pc, #92]	; (810743c <tu_edpt_validate+0xf4>)
 81073de:	61fb      	str	r3, [r7, #28]
 81073e0:	69fb      	ldr	r3, [r7, #28]
 81073e2:	681b      	ldr	r3, [r3, #0]
 81073e4:	f003 0301 	and.w	r3, r3, #1
 81073e8:	2b00      	cmp	r3, #0
 81073ea:	d000      	beq.n	81073ee <tu_edpt_validate+0xa6>
 81073ec:	be00      	bkpt	0x0000
 81073ee:	2300      	movs	r3, #0
 81073f0:	e01e      	b.n	8107430 <tu_edpt_validate+0xe8>
      }
    break;

    case TUSB_XFER_INTERRUPT:
    {
      uint16_t const spec_size = (speed == TUSB_SPEED_HIGH ? 1024 : 64);
 81073f2:	78fb      	ldrb	r3, [r7, #3]
 81073f4:	2b02      	cmp	r3, #2
 81073f6:	d102      	bne.n	81073fe <tu_edpt_validate+0xb6>
 81073f8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 81073fc:	e000      	b.n	8107400 <tu_edpt_validate+0xb8>
 81073fe:	2340      	movs	r3, #64	; 0x40
 8107400:	84bb      	strh	r3, [r7, #36]	; 0x24
      TU_ASSERT(max_packet_size <= spec_size);
 8107402:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8107404:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8107406:	429a      	cmp	r2, r3
 8107408:	d910      	bls.n	810742c <tu_edpt_validate+0xe4>
 810740a:	4b0c      	ldr	r3, [pc, #48]	; (810743c <tu_edpt_validate+0xf4>)
 810740c:	623b      	str	r3, [r7, #32]
 810740e:	6a3b      	ldr	r3, [r7, #32]
 8107410:	681b      	ldr	r3, [r3, #0]
 8107412:	f003 0301 	and.w	r3, r3, #1
 8107416:	2b00      	cmp	r3, #0
 8107418:	d000      	beq.n	810741c <tu_edpt_validate+0xd4>
 810741a:	be00      	bkpt	0x0000
 810741c:	2300      	movs	r3, #0
 810741e:	e007      	b.n	8107430 <tu_edpt_validate+0xe8>
    }
    break;

    default: return false;
 8107420:	2300      	movs	r3, #0
 8107422:	e005      	b.n	8107430 <tu_edpt_validate+0xe8>
    break;
 8107424:	bf00      	nop
 8107426:	e002      	b.n	810742e <tu_edpt_validate+0xe6>
    break;
 8107428:	bf00      	nop
 810742a:	e000      	b.n	810742e <tu_edpt_validate+0xe6>
    break;
 810742c:	bf00      	nop
  }

  return true;
 810742e:	2301      	movs	r3, #1
}
 8107430:	4618      	mov	r0, r3
 8107432:	372c      	adds	r7, #44	; 0x2c
 8107434:	46bd      	mov	sp, r7
 8107436:	f85d 7b04 	ldr.w	r7, [sp], #4
 810743a:	4770      	bx	lr
 810743c:	e000edf0 	.word	0xe000edf0

08107440 <tu_edpt_bind_driver>:

void tu_edpt_bind_driver(uint8_t ep2drv[][2], tusb_desc_interface_t const* desc_itf, uint16_t desc_len, uint8_t driver_id)
{
 8107440:	b480      	push	{r7}
 8107442:	b08d      	sub	sp, #52	; 0x34
 8107444:	af00      	add	r7, sp, #0
 8107446:	60f8      	str	r0, [r7, #12]
 8107448:	60b9      	str	r1, [r7, #8]
 810744a:	4611      	mov	r1, r2
 810744c:	461a      	mov	r2, r3
 810744e:	460b      	mov	r3, r1
 8107450:	80fb      	strh	r3, [r7, #6]
 8107452:	4613      	mov	r3, r2
 8107454:	717b      	strb	r3, [r7, #5]
  uint8_t const* p_desc = (uint8_t const*) desc_itf;
 8107456:	68bb      	ldr	r3, [r7, #8]
 8107458:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint8_t const* desc_end = p_desc + desc_len;
 810745a:	88fb      	ldrh	r3, [r7, #6]
 810745c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 810745e:	4413      	add	r3, r2
 8107460:	62bb      	str	r3, [r7, #40]	; 0x28

  while( p_desc < desc_end )
 8107462:	e027      	b.n	81074b4 <tu_edpt_bind_driver+0x74>
 8107464:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8107466:	623b      	str	r3, [r7, #32]
  return ((uint8_t const*) desc)[DESC_OFFSET_TYPE];
 8107468:	6a3b      	ldr	r3, [r7, #32]
 810746a:	3301      	adds	r3, #1
 810746c:	781b      	ldrb	r3, [r3, #0]
  {
    if ( TUSB_DESC_ENDPOINT == tu_desc_type(p_desc) )
 810746e:	2b05      	cmp	r3, #5
 8107470:	d116      	bne.n	81074a0 <tu_edpt_bind_driver+0x60>
    {
      uint8_t const ep_addr = ((tusb_desc_endpoint_t const*) p_desc)->bEndpointAddress;
 8107472:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8107474:	789b      	ldrb	r3, [r3, #2]
 8107476:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 810747a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 810747e:	77bb      	strb	r3, [r7, #30]
  return (uint8_t)(addr & (~TUSB_DIR_IN_MASK));
 8107480:	7fbb      	ldrb	r3, [r7, #30]
 8107482:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8107486:	b2db      	uxtb	r3, r3

      TU_LOG(2, "  Bind EP %02x to driver id %u\r\n", ep_addr, driver_id);
      ep2drv[tu_edpt_number(ep_addr)][tu_edpt_dir(ep_addr)] = driver_id;
 8107488:	005b      	lsls	r3, r3, #1
 810748a:	68fa      	ldr	r2, [r7, #12]
 810748c:	4413      	add	r3, r2
 810748e:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8107492:	77fa      	strb	r2, [r7, #31]
  return (addr & TUSB_DIR_IN_MASK) ? TUSB_DIR_IN : TUSB_DIR_OUT;
 8107494:	7ffa      	ldrb	r2, [r7, #31]
 8107496:	09d2      	lsrs	r2, r2, #7
 8107498:	b2d2      	uxtb	r2, r2
 810749a:	4611      	mov	r1, r2
 810749c:	797a      	ldrb	r2, [r7, #5]
 810749e:	545a      	strb	r2, [r3, r1]
 81074a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 81074a2:	61bb      	str	r3, [r7, #24]
  uint8_t const* desc8 = (uint8_t const*) desc;
 81074a4:	69bb      	ldr	r3, [r7, #24]
 81074a6:	617b      	str	r3, [r7, #20]
  return desc8 + desc8[DESC_OFFSET_LEN];
 81074a8:	697b      	ldr	r3, [r7, #20]
 81074aa:	781b      	ldrb	r3, [r3, #0]
 81074ac:	461a      	mov	r2, r3
 81074ae:	697b      	ldr	r3, [r7, #20]
 81074b0:	4413      	add	r3, r2
    }

    p_desc = tu_desc_next(p_desc);
 81074b2:	62fb      	str	r3, [r7, #44]	; 0x2c
  while( p_desc < desc_end )
 81074b4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 81074b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 81074b8:	429a      	cmp	r2, r3
 81074ba:	d3d3      	bcc.n	8107464 <tu_edpt_bind_driver+0x24>
  }
}
 81074bc:	bf00      	nop
 81074be:	bf00      	nop
 81074c0:	3734      	adds	r7, #52	; 0x34
 81074c2:	46bd      	mov	sp, r7
 81074c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 81074c8:	4770      	bx	lr
	...

081074cc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 81074cc:	b580      	push	{r7, lr}
 81074ce:	b082      	sub	sp, #8
 81074d0:	af00      	add	r7, sp, #0

uint32_t common_system_clock;

#if defined(DUAL_CORE) && defined(CORE_CM4)
   /* Configure Cortex-M4 Instruction cache through ART accelerator */
   __HAL_RCC_ART_CLK_ENABLE();                   /* Enable the Cortex-M4 ART Clock */
 81074d2:	4b28      	ldr	r3, [pc, #160]	; (8107574 <HAL_Init+0xa8>)
 81074d4:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 81074d8:	4a26      	ldr	r2, [pc, #152]	; (8107574 <HAL_Init+0xa8>)
 81074da:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 81074de:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 81074e2:	4b24      	ldr	r3, [pc, #144]	; (8107574 <HAL_Init+0xa8>)
 81074e4:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 81074e8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 81074ec:	603b      	str	r3, [r7, #0]
 81074ee:	683b      	ldr	r3, [r7, #0]
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
 81074f0:	4b21      	ldr	r3, [pc, #132]	; (8107578 <HAL_Init+0xac>)
 81074f2:	681b      	ldr	r3, [r3, #0]
 81074f4:	f423 237f 	bic.w	r3, r3, #1044480	; 0xff000
 81074f8:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 81074fc:	4a1e      	ldr	r2, [pc, #120]	; (8107578 <HAL_Init+0xac>)
 81074fe:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 8107502:	6013      	str	r3, [r2, #0]
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
 8107504:	4b1c      	ldr	r3, [pc, #112]	; (8107578 <HAL_Init+0xac>)
 8107506:	681b      	ldr	r3, [r3, #0]
 8107508:	4a1b      	ldr	r2, [pc, #108]	; (8107578 <HAL_Init+0xac>)
 810750a:	f043 0301 	orr.w	r3, r3, #1
 810750e:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8107510:	2003      	movs	r0, #3
 8107512:	f001 fba9 	bl	8108c68 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8107516:	f002 fc7b 	bl	8109e10 <HAL_RCC_GetSysClockFreq>
 810751a:	4602      	mov	r2, r0
 810751c:	4b15      	ldr	r3, [pc, #84]	; (8107574 <HAL_Init+0xa8>)
 810751e:	699b      	ldr	r3, [r3, #24]
 8107520:	0a1b      	lsrs	r3, r3, #8
 8107522:	f003 030f 	and.w	r3, r3, #15
 8107526:	4915      	ldr	r1, [pc, #84]	; (810757c <HAL_Init+0xb0>)
 8107528:	5ccb      	ldrb	r3, [r1, r3]
 810752a:	f003 031f 	and.w	r3, r3, #31
 810752e:	fa22 f303 	lsr.w	r3, r2, r3
 8107532:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8107534:	4b0f      	ldr	r3, [pc, #60]	; (8107574 <HAL_Init+0xa8>)
 8107536:	699b      	ldr	r3, [r3, #24]
 8107538:	f003 030f 	and.w	r3, r3, #15
 810753c:	4a0f      	ldr	r2, [pc, #60]	; (810757c <HAL_Init+0xb0>)
 810753e:	5cd3      	ldrb	r3, [r2, r3]
 8107540:	f003 031f 	and.w	r3, r3, #31
 8107544:	687a      	ldr	r2, [r7, #4]
 8107546:	fa22 f303 	lsr.w	r3, r2, r3
 810754a:	4a0d      	ldr	r2, [pc, #52]	; (8107580 <HAL_Init+0xb4>)
 810754c:	6013      	str	r3, [r2, #0]
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE)>> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
 810754e:	4b0c      	ldr	r3, [pc, #48]	; (8107580 <HAL_Init+0xb4>)
 8107550:	681b      	ldr	r3, [r3, #0]
 8107552:	4a0c      	ldr	r2, [pc, #48]	; (8107584 <HAL_Init+0xb8>)
 8107554:	6013      	str	r3, [r2, #0]
#else
  SystemCoreClock = common_system_clock;
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8107556:	2000      	movs	r0, #0
 8107558:	f000 f816 	bl	8107588 <HAL_InitTick>
 810755c:	4603      	mov	r3, r0
 810755e:	2b00      	cmp	r3, #0
 8107560:	d001      	beq.n	8107566 <HAL_Init+0x9a>
  {
    return HAL_ERROR;
 8107562:	2301      	movs	r3, #1
 8107564:	e002      	b.n	810756c <HAL_Init+0xa0>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8107566:	f7f9 ff23 	bl	81013b0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 810756a:	2300      	movs	r3, #0
}
 810756c:	4618      	mov	r0, r3
 810756e:	3708      	adds	r7, #8
 8107570:	46bd      	mov	sp, r7
 8107572:	bd80      	pop	{r7, pc}
 8107574:	58024400 	.word	0x58024400
 8107578:	40024400 	.word	0x40024400
 810757c:	08111e0c 	.word	0x08111e0c
 8107580:	10000004 	.word	0x10000004
 8107584:	10000000 	.word	0x10000000

08107588 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8107588:	b580      	push	{r7, lr}
 810758a:	b082      	sub	sp, #8
 810758c:	af00      	add	r7, sp, #0
 810758e:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8107590:	4b15      	ldr	r3, [pc, #84]	; (81075e8 <HAL_InitTick+0x60>)
 8107592:	781b      	ldrb	r3, [r3, #0]
 8107594:	2b00      	cmp	r3, #0
 8107596:	d101      	bne.n	810759c <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8107598:	2301      	movs	r3, #1
 810759a:	e021      	b.n	81075e0 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 810759c:	4b13      	ldr	r3, [pc, #76]	; (81075ec <HAL_InitTick+0x64>)
 810759e:	681a      	ldr	r2, [r3, #0]
 81075a0:	4b11      	ldr	r3, [pc, #68]	; (81075e8 <HAL_InitTick+0x60>)
 81075a2:	781b      	ldrb	r3, [r3, #0]
 81075a4:	4619      	mov	r1, r3
 81075a6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 81075aa:	fbb3 f3f1 	udiv	r3, r3, r1
 81075ae:	fbb2 f3f3 	udiv	r3, r2, r3
 81075b2:	4618      	mov	r0, r3
 81075b4:	f001 fb8b 	bl	8108cce <HAL_SYSTICK_Config>
 81075b8:	4603      	mov	r3, r0
 81075ba:	2b00      	cmp	r3, #0
 81075bc:	d001      	beq.n	81075c2 <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 81075be:	2301      	movs	r3, #1
 81075c0:	e00e      	b.n	81075e0 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 81075c2:	687b      	ldr	r3, [r7, #4]
 81075c4:	2b0f      	cmp	r3, #15
 81075c6:	d80a      	bhi.n	81075de <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 81075c8:	2200      	movs	r2, #0
 81075ca:	6879      	ldr	r1, [r7, #4]
 81075cc:	f04f 30ff 	mov.w	r0, #4294967295
 81075d0:	f001 fb55 	bl	8108c7e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 81075d4:	4a06      	ldr	r2, [pc, #24]	; (81075f0 <HAL_InitTick+0x68>)
 81075d6:	687b      	ldr	r3, [r7, #4]
 81075d8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 81075da:	2300      	movs	r3, #0
 81075dc:	e000      	b.n	81075e0 <HAL_InitTick+0x58>
    return HAL_ERROR;
 81075de:	2301      	movs	r3, #1
}
 81075e0:	4618      	mov	r0, r3
 81075e2:	3708      	adds	r7, #8
 81075e4:	46bd      	mov	sp, r7
 81075e6:	bd80      	pop	{r7, pc}
 81075e8:	10000034 	.word	0x10000034
 81075ec:	10000000 	.word	0x10000000
 81075f0:	10000030 	.word	0x10000030

081075f4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 81075f4:	b480      	push	{r7}
 81075f6:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 81075f8:	4b06      	ldr	r3, [pc, #24]	; (8107614 <HAL_IncTick+0x20>)
 81075fa:	781b      	ldrb	r3, [r3, #0]
 81075fc:	461a      	mov	r2, r3
 81075fe:	4b06      	ldr	r3, [pc, #24]	; (8107618 <HAL_IncTick+0x24>)
 8107600:	681b      	ldr	r3, [r3, #0]
 8107602:	4413      	add	r3, r2
 8107604:	4a04      	ldr	r2, [pc, #16]	; (8107618 <HAL_IncTick+0x24>)
 8107606:	6013      	str	r3, [r2, #0]
}
 8107608:	bf00      	nop
 810760a:	46bd      	mov	sp, r7
 810760c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8107610:	4770      	bx	lr
 8107612:	bf00      	nop
 8107614:	10000034 	.word	0x10000034
 8107618:	1000122c 	.word	0x1000122c

0810761c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 810761c:	b480      	push	{r7}
 810761e:	af00      	add	r7, sp, #0
  return uwTick;
 8107620:	4b03      	ldr	r3, [pc, #12]	; (8107630 <HAL_GetTick+0x14>)
 8107622:	681b      	ldr	r3, [r3, #0]
}
 8107624:	4618      	mov	r0, r3
 8107626:	46bd      	mov	sp, r7
 8107628:	f85d 7b04 	ldr.w	r7, [sp], #4
 810762c:	4770      	bx	lr
 810762e:	bf00      	nop
 8107630:	1000122c 	.word	0x1000122c

08107634 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8107634:	b580      	push	{r7, lr}
 8107636:	b084      	sub	sp, #16
 8107638:	af00      	add	r7, sp, #0
 810763a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 810763c:	f7ff ffee 	bl	810761c <HAL_GetTick>
 8107640:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8107642:	687b      	ldr	r3, [r7, #4]
 8107644:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8107646:	68fb      	ldr	r3, [r7, #12]
 8107648:	f1b3 3fff 	cmp.w	r3, #4294967295
 810764c:	d005      	beq.n	810765a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 810764e:	4b0a      	ldr	r3, [pc, #40]	; (8107678 <HAL_Delay+0x44>)
 8107650:	781b      	ldrb	r3, [r3, #0]
 8107652:	461a      	mov	r2, r3
 8107654:	68fb      	ldr	r3, [r7, #12]
 8107656:	4413      	add	r3, r2
 8107658:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 810765a:	bf00      	nop
 810765c:	f7ff ffde 	bl	810761c <HAL_GetTick>
 8107660:	4602      	mov	r2, r0
 8107662:	68bb      	ldr	r3, [r7, #8]
 8107664:	1ad3      	subs	r3, r2, r3
 8107666:	68fa      	ldr	r2, [r7, #12]
 8107668:	429a      	cmp	r2, r3
 810766a:	d8f7      	bhi.n	810765c <HAL_Delay+0x28>
  {
  }
}
 810766c:	bf00      	nop
 810766e:	bf00      	nop
 8107670:	3710      	adds	r7, #16
 8107672:	46bd      	mov	sp, r7
 8107674:	bd80      	pop	{r7, pc}
 8107676:	bf00      	nop
 8107678:	10000034 	.word	0x10000034

0810767c <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 810767c:	b480      	push	{r7}
 810767e:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8107680:	4b03      	ldr	r3, [pc, #12]	; (8107690 <HAL_GetREVID+0x14>)
 8107682:	681b      	ldr	r3, [r3, #0]
 8107684:	0c1b      	lsrs	r3, r3, #16
}
 8107686:	4618      	mov	r0, r3
 8107688:	46bd      	mov	sp, r7
 810768a:	f85d 7b04 	ldr.w	r7, [sp], #4
 810768e:	4770      	bx	lr
 8107690:	5c001000 	.word	0x5c001000

08107694 <HAL_SYSCFG_ETHInterfaceSelect>:
  *   @arg SYSCFG_ETH_MII : Select the Media Independent Interface
  *   @arg SYSCFG_ETH_RMII: Select the Reduced Media Independent Interface
  * @retval None
  */
void HAL_SYSCFG_ETHInterfaceSelect(uint32_t SYSCFG_ETHInterface)
{
 8107694:	b480      	push	{r7}
 8107696:	b083      	sub	sp, #12
 8107698:	af00      	add	r7, sp, #0
 810769a:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_SYSCFG_ETHERNET_CONFIG(SYSCFG_ETHInterface));

  MODIFY_REG(SYSCFG->PMCR, SYSCFG_PMCR_EPIS_SEL, (uint32_t)(SYSCFG_ETHInterface));
 810769c:	4b06      	ldr	r3, [pc, #24]	; (81076b8 <HAL_SYSCFG_ETHInterfaceSelect+0x24>)
 810769e:	685b      	ldr	r3, [r3, #4]
 81076a0:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 81076a4:	4904      	ldr	r1, [pc, #16]	; (81076b8 <HAL_SYSCFG_ETHInterfaceSelect+0x24>)
 81076a6:	687b      	ldr	r3, [r7, #4]
 81076a8:	4313      	orrs	r3, r2
 81076aa:	604b      	str	r3, [r1, #4]
}
 81076ac:	bf00      	nop
 81076ae:	370c      	adds	r7, #12
 81076b0:	46bd      	mov	sp, r7
 81076b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 81076b6:	4770      	bx	lr
 81076b8:	58000400 	.word	0x58000400

081076bc <HAL_SYSCFG_AnalogSwitchConfig>:
  *   @arg SYSCFG_SWITCH_PC3_CLOSE
  * @retval None
  */

void HAL_SYSCFG_AnalogSwitchConfig(uint32_t SYSCFG_AnalogSwitch , uint32_t SYSCFG_SwitchState )
{
 81076bc:	b480      	push	{r7}
 81076be:	b083      	sub	sp, #12
 81076c0:	af00      	add	r7, sp, #0
 81076c2:	6078      	str	r0, [r7, #4]
 81076c4:	6039      	str	r1, [r7, #0]
  /* Check the parameter */
  assert_param(IS_SYSCFG_ANALOG_SWITCH(SYSCFG_AnalogSwitch));
  assert_param(IS_SYSCFG_SWITCH_STATE(SYSCFG_SwitchState));

  MODIFY_REG(SYSCFG->PMCR, (uint32_t) SYSCFG_AnalogSwitch, (uint32_t)(SYSCFG_SwitchState));
 81076c6:	4b07      	ldr	r3, [pc, #28]	; (81076e4 <HAL_SYSCFG_AnalogSwitchConfig+0x28>)
 81076c8:	685a      	ldr	r2, [r3, #4]
 81076ca:	687b      	ldr	r3, [r7, #4]
 81076cc:	43db      	mvns	r3, r3
 81076ce:	401a      	ands	r2, r3
 81076d0:	4904      	ldr	r1, [pc, #16]	; (81076e4 <HAL_SYSCFG_AnalogSwitchConfig+0x28>)
 81076d2:	683b      	ldr	r3, [r7, #0]
 81076d4:	4313      	orrs	r3, r2
 81076d6:	604b      	str	r3, [r1, #4]
}
 81076d8:	bf00      	nop
 81076da:	370c      	adds	r7, #12
 81076dc:	46bd      	mov	sp, r7
 81076de:	f85d 7b04 	ldr.w	r7, [sp], #4
 81076e2:	4770      	bx	lr
 81076e4:	58000400 	.word	0x58000400

081076e8 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 81076e8:	b480      	push	{r7}
 81076ea:	b083      	sub	sp, #12
 81076ec:	af00      	add	r7, sp, #0
 81076ee:	6078      	str	r0, [r7, #4]
 81076f0:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 81076f2:	687b      	ldr	r3, [r7, #4]
 81076f4:	689b      	ldr	r3, [r3, #8]
 81076f6:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 81076fa:	683b      	ldr	r3, [r7, #0]
 81076fc:	431a      	orrs	r2, r3
 81076fe:	687b      	ldr	r3, [r7, #4]
 8107700:	609a      	str	r2, [r3, #8]
}
 8107702:	bf00      	nop
 8107704:	370c      	adds	r7, #12
 8107706:	46bd      	mov	sp, r7
 8107708:	f85d 7b04 	ldr.w	r7, [sp], #4
 810770c:	4770      	bx	lr

0810770e <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 810770e:	b480      	push	{r7}
 8107710:	b083      	sub	sp, #12
 8107712:	af00      	add	r7, sp, #0
 8107714:	6078      	str	r0, [r7, #4]
 8107716:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8107718:	687b      	ldr	r3, [r7, #4]
 810771a:	689b      	ldr	r3, [r3, #8]
 810771c:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8107720:	683b      	ldr	r3, [r7, #0]
 8107722:	431a      	orrs	r2, r3
 8107724:	687b      	ldr	r3, [r7, #4]
 8107726:	609a      	str	r2, [r3, #8]
}
 8107728:	bf00      	nop
 810772a:	370c      	adds	r7, #12
 810772c:	46bd      	mov	sp, r7
 810772e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8107732:	4770      	bx	lr

08107734 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8107734:	b480      	push	{r7}
 8107736:	b083      	sub	sp, #12
 8107738:	af00      	add	r7, sp, #0
 810773a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 810773c:	687b      	ldr	r3, [r7, #4]
 810773e:	689b      	ldr	r3, [r3, #8]
 8107740:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8107744:	4618      	mov	r0, r3
 8107746:	370c      	adds	r7, #12
 8107748:	46bd      	mov	sp, r7
 810774a:	f85d 7b04 	ldr.w	r7, [sp], #4
 810774e:	4770      	bx	lr

08107750 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0x3FFFFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8107750:	b480      	push	{r7}
 8107752:	b087      	sub	sp, #28
 8107754:	af00      	add	r7, sp, #0
 8107756:	60f8      	str	r0, [r7, #12]
 8107758:	60b9      	str	r1, [r7, #8]
 810775a:	607a      	str	r2, [r7, #4]
 810775c:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 810775e:	68fb      	ldr	r3, [r7, #12]
 8107760:	3360      	adds	r3, #96	; 0x60
 8107762:	461a      	mov	r2, r3
 8107764:	68bb      	ldr	r3, [r7, #8]
 8107766:	009b      	lsls	r3, r3, #2
 8107768:	4413      	add	r3, r2
 810776a:	617b      	str	r3, [r7, #20]
               ADC3_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
  else
#endif /* ADC_VER_V5_V90 */
  {
    MODIFY_REG(*preg,
 810776c:	697b      	ldr	r3, [r7, #20]
 810776e:	681b      	ldr	r3, [r3, #0]
 8107770:	f003 4200 	and.w	r2, r3, #2147483648	; 0x80000000
 8107774:	687b      	ldr	r3, [r7, #4]
 8107776:	f003 41f8 	and.w	r1, r3, #2080374784	; 0x7c000000
 810777a:	683b      	ldr	r3, [r7, #0]
 810777c:	430b      	orrs	r3, r1
 810777e:	431a      	orrs	r2, r3
 8107780:	697b      	ldr	r3, [r7, #20]
 8107782:	601a      	str	r2, [r3, #0]
               ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
               (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
}
 8107784:	bf00      	nop
 8107786:	371c      	adds	r7, #28
 8107788:	46bd      	mov	sp, r7
 810778a:	f85d 7b04 	ldr.w	r7, [sp], #4
 810778e:	4770      	bx	lr

08107790 <LL_ADC_SetDataRightShift>:
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_ENABLE
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetDataRightShift(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t RigthShift)
{
 8107790:	b480      	push	{r7}
 8107792:	b085      	sub	sp, #20
 8107794:	af00      	add	r7, sp, #0
 8107796:	60f8      	str	r0, [r7, #12]
 8107798:	60b9      	str	r1, [r7, #8]
 810779a:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->CFGR2, (ADC_CFGR2_RSHIFT1 | ADC_CFGR2_RSHIFT2 | ADC_CFGR2_RSHIFT3 | ADC_CFGR2_RSHIFT4), RigthShift << (Offsety & 0x1FUL));
 810779c:	68fb      	ldr	r3, [r7, #12]
 810779e:	691b      	ldr	r3, [r3, #16]
 81077a0:	f423 42f0 	bic.w	r2, r3, #30720	; 0x7800
 81077a4:	68bb      	ldr	r3, [r7, #8]
 81077a6:	f003 031f 	and.w	r3, r3, #31
 81077aa:	6879      	ldr	r1, [r7, #4]
 81077ac:	fa01 f303 	lsl.w	r3, r1, r3
 81077b0:	431a      	orrs	r2, r3
 81077b2:	68fb      	ldr	r3, [r7, #12]
 81077b4:	611a      	str	r2, [r3, #16]
}
 81077b6:	bf00      	nop
 81077b8:	3714      	adds	r7, #20
 81077ba:	46bd      	mov	sp, r7
 81077bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 81077c0:	4770      	bx	lr

081077c2 <LL_ADC_SetOffsetSignedSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSignedSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSignedSaturation)
{
 81077c2:	b480      	push	{r7}
 81077c4:	b087      	sub	sp, #28
 81077c6:	af00      	add	r7, sp, #0
 81077c8:	60f8      	str	r0, [r7, #12]
 81077ca:	60b9      	str	r1, [r7, #8]
 81077cc:	607a      	str	r2, [r7, #4]
    /* Function not available on this instance */
  }
  else
#endif  /* ADC_VER_V5_V90 */
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 81077ce:	68fb      	ldr	r3, [r7, #12]
 81077d0:	3360      	adds	r3, #96	; 0x60
 81077d2:	461a      	mov	r2, r3
 81077d4:	68bb      	ldr	r3, [r7, #8]
 81077d6:	009b      	lsls	r3, r3, #2
 81077d8:	4413      	add	r3, r2
 81077da:	617b      	str	r3, [r7, #20]
    MODIFY_REG(*preg, ADC_OFR1_SSATE, OffsetSignedSaturation);
 81077dc:	697b      	ldr	r3, [r7, #20]
 81077de:	681b      	ldr	r3, [r3, #0]
 81077e0:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 81077e4:	687b      	ldr	r3, [r7, #4]
 81077e6:	431a      	orrs	r2, r3
 81077e8:	697b      	ldr	r3, [r7, #20]
 81077ea:	601a      	str	r2, [r3, #0]
  }
}
 81077ec:	bf00      	nop
 81077ee:	371c      	adds	r7, #28
 81077f0:	46bd      	mov	sp, r7
 81077f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 81077f6:	4770      	bx	lr

081077f8 <LL_ADC_REG_SetSequencerRanks>:
  *         (3) On STM32H7, fast channel (0.125 us for 14-bit resolution (ADC conversion rate up to 8 Ms/s)).
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 81077f8:	b480      	push	{r7}
 81077fa:	b087      	sub	sp, #28
 81077fc:	af00      	add	r7, sp, #0
 81077fe:	60f8      	str	r0, [r7, #12]
 8107800:	60b9      	str	r1, [r7, #8]
 8107802:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8107804:	68fb      	ldr	r3, [r7, #12]
 8107806:	3330      	adds	r3, #48	; 0x30
 8107808:	461a      	mov	r2, r3
 810780a:	68bb      	ldr	r3, [r7, #8]
 810780c:	0a1b      	lsrs	r3, r3, #8
 810780e:	009b      	lsls	r3, r3, #2
 8107810:	f003 030c 	and.w	r3, r3, #12
 8107814:	4413      	add	r3, r2
 8107816:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8107818:	697b      	ldr	r3, [r7, #20]
 810781a:	681a      	ldr	r2, [r3, #0]
 810781c:	68bb      	ldr	r3, [r7, #8]
 810781e:	f003 031f 	and.w	r3, r3, #31
 8107822:	211f      	movs	r1, #31
 8107824:	fa01 f303 	lsl.w	r3, r1, r3
 8107828:	43db      	mvns	r3, r3
 810782a:	401a      	ands	r2, r3
 810782c:	687b      	ldr	r3, [r7, #4]
 810782e:	0e9b      	lsrs	r3, r3, #26
 8107830:	f003 011f 	and.w	r1, r3, #31
 8107834:	68bb      	ldr	r3, [r7, #8]
 8107836:	f003 031f 	and.w	r3, r3, #31
 810783a:	fa01 f303 	lsl.w	r3, r1, r3
 810783e:	431a      	orrs	r2, r3
 8107840:	697b      	ldr	r3, [r7, #20]
 8107842:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8107844:	bf00      	nop
 8107846:	371c      	adds	r7, #28
 8107848:	46bd      	mov	sp, r7
 810784a:	f85d 7b04 	ldr.w	r7, [sp], #4
 810784e:	4770      	bx	lr

08107850 <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_387CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_810CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8107850:	b480      	push	{r7}
 8107852:	b087      	sub	sp, #28
 8107854:	af00      	add	r7, sp, #0
 8107856:	60f8      	str	r0, [r7, #12]
 8107858:	60b9      	str	r1, [r7, #8]
 810785a:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 810785c:	68fb      	ldr	r3, [r7, #12]
 810785e:	3314      	adds	r3, #20
 8107860:	461a      	mov	r2, r3
 8107862:	68bb      	ldr	r3, [r7, #8]
 8107864:	0e5b      	lsrs	r3, r3, #25
 8107866:	009b      	lsls	r3, r3, #2
 8107868:	f003 0304 	and.w	r3, r3, #4
 810786c:	4413      	add	r3, r2
 810786e:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8107870:	697b      	ldr	r3, [r7, #20]
 8107872:	681a      	ldr	r2, [r3, #0]
 8107874:	68bb      	ldr	r3, [r7, #8]
 8107876:	0d1b      	lsrs	r3, r3, #20
 8107878:	f003 031f 	and.w	r3, r3, #31
 810787c:	2107      	movs	r1, #7
 810787e:	fa01 f303 	lsl.w	r3, r1, r3
 8107882:	43db      	mvns	r3, r3
 8107884:	401a      	ands	r2, r3
 8107886:	68bb      	ldr	r3, [r7, #8]
 8107888:	0d1b      	lsrs	r3, r3, #20
 810788a:	f003 031f 	and.w	r3, r3, #31
 810788e:	6879      	ldr	r1, [r7, #4]
 8107890:	fa01 f303 	lsl.w	r3, r1, r3
 8107894:	431a      	orrs	r2, r3
 8107896:	697b      	ldr	r3, [r7, #20]
 8107898:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 810789a:	bf00      	nop
 810789c:	371c      	adds	r7, #28
 810789e:	46bd      	mov	sp, r7
 81078a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 81078a4:	4770      	bx	lr
	...

081078a8 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 81078a8:	b480      	push	{r7}
 81078aa:	b085      	sub	sp, #20
 81078ac:	af00      	add	r7, sp, #0
 81078ae:	60f8      	str	r0, [r7, #12]
 81078b0:	60b9      	str	r1, [r7, #8]
 81078b2:	607a      	str	r2, [r7, #4]
  }
#else  /* ADC_VER_V5_V90 */
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 81078b4:	68fb      	ldr	r3, [r7, #12]
 81078b6:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
 81078ba:	68bb      	ldr	r3, [r7, #8]
 81078bc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 81078c0:	43db      	mvns	r3, r3
 81078c2:	401a      	ands	r2, r3
 81078c4:	687b      	ldr	r3, [r7, #4]
 81078c6:	f003 0318 	and.w	r3, r3, #24
 81078ca:	4908      	ldr	r1, [pc, #32]	; (81078ec <LL_ADC_SetChannelSingleDiff+0x44>)
 81078cc:	40d9      	lsrs	r1, r3
 81078ce:	68bb      	ldr	r3, [r7, #8]
 81078d0:	400b      	ands	r3, r1
 81078d2:	f3c3 0313 	ubfx	r3, r3, #0, #20
 81078d6:	431a      	orrs	r2, r3
 81078d8:	68fb      	ldr	r3, [r7, #12]
 81078da:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
#endif /* ADC_VER_V5_V90 */
}
 81078de:	bf00      	nop
 81078e0:	3714      	adds	r7, #20
 81078e2:	46bd      	mov	sp, r7
 81078e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 81078e8:	4770      	bx	lr
 81078ea:	bf00      	nop
 81078ec:	000fffff 	.word	0x000fffff

081078f0 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 81078f0:	b480      	push	{r7}
 81078f2:	b083      	sub	sp, #12
 81078f4:	af00      	add	r7, sp, #0
 81078f6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 81078f8:	687b      	ldr	r3, [r7, #4]
 81078fa:	689b      	ldr	r3, [r3, #8]
 81078fc:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 8107900:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8107904:	687a      	ldr	r2, [r7, #4]
 8107906:	6093      	str	r3, [r2, #8]
}
 8107908:	bf00      	nop
 810790a:	370c      	adds	r7, #12
 810790c:	46bd      	mov	sp, r7
 810790e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8107912:	4770      	bx	lr

08107914 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8107914:	b480      	push	{r7}
 8107916:	b083      	sub	sp, #12
 8107918:	af00      	add	r7, sp, #0
 810791a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 810791c:	687b      	ldr	r3, [r7, #4]
 810791e:	689b      	ldr	r3, [r3, #8]
 8107920:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8107924:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8107928:	d101      	bne.n	810792e <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 810792a:	2301      	movs	r3, #1
 810792c:	e000      	b.n	8107930 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 810792e:	2300      	movs	r3, #0
}
 8107930:	4618      	mov	r0, r3
 8107932:	370c      	adds	r7, #12
 8107934:	46bd      	mov	sp, r7
 8107936:	f85d 7b04 	ldr.w	r7, [sp], #4
 810793a:	4770      	bx	lr

0810793c <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 810793c:	b480      	push	{r7}
 810793e:	b083      	sub	sp, #12
 8107940:	af00      	add	r7, sp, #0
 8107942:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8107944:	687b      	ldr	r3, [r7, #4]
 8107946:	689b      	ldr	r3, [r3, #8]
 8107948:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 810794c:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8107950:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8107954:	687b      	ldr	r3, [r7, #4]
 8107956:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8107958:	bf00      	nop
 810795a:	370c      	adds	r7, #12
 810795c:	46bd      	mov	sp, r7
 810795e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8107962:	4770      	bx	lr

08107964 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8107964:	b480      	push	{r7}
 8107966:	b083      	sub	sp, #12
 8107968:	af00      	add	r7, sp, #0
 810796a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 810796c:	687b      	ldr	r3, [r7, #4]
 810796e:	689b      	ldr	r3, [r3, #8]
 8107970:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8107974:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8107978:	d101      	bne.n	810797e <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 810797a:	2301      	movs	r3, #1
 810797c:	e000      	b.n	8107980 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 810797e:	2300      	movs	r3, #0
}
 8107980:	4618      	mov	r0, r3
 8107982:	370c      	adds	r7, #12
 8107984:	46bd      	mov	sp, r7
 8107986:	f85d 7b04 	ldr.w	r7, [sp], #4
 810798a:	4770      	bx	lr

0810798c <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 810798c:	b480      	push	{r7}
 810798e:	b083      	sub	sp, #12
 8107990:	af00      	add	r7, sp, #0
 8107992:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8107994:	687b      	ldr	r3, [r7, #4]
 8107996:	689b      	ldr	r3, [r3, #8]
 8107998:	f003 0301 	and.w	r3, r3, #1
 810799c:	2b01      	cmp	r3, #1
 810799e:	d101      	bne.n	81079a4 <LL_ADC_IsEnabled+0x18>
 81079a0:	2301      	movs	r3, #1
 81079a2:	e000      	b.n	81079a6 <LL_ADC_IsEnabled+0x1a>
 81079a4:	2300      	movs	r3, #0
}
 81079a6:	4618      	mov	r0, r3
 81079a8:	370c      	adds	r7, #12
 81079aa:	46bd      	mov	sp, r7
 81079ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 81079b0:	4770      	bx	lr

081079b2 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 81079b2:	b480      	push	{r7}
 81079b4:	b083      	sub	sp, #12
 81079b6:	af00      	add	r7, sp, #0
 81079b8:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 81079ba:	687b      	ldr	r3, [r7, #4]
 81079bc:	689b      	ldr	r3, [r3, #8]
 81079be:	f003 0304 	and.w	r3, r3, #4
 81079c2:	2b04      	cmp	r3, #4
 81079c4:	d101      	bne.n	81079ca <LL_ADC_REG_IsConversionOngoing+0x18>
 81079c6:	2301      	movs	r3, #1
 81079c8:	e000      	b.n	81079cc <LL_ADC_REG_IsConversionOngoing+0x1a>
 81079ca:	2300      	movs	r3, #0
}
 81079cc:	4618      	mov	r0, r3
 81079ce:	370c      	adds	r7, #12
 81079d0:	46bd      	mov	sp, r7
 81079d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 81079d6:	4770      	bx	lr

081079d8 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 81079d8:	b480      	push	{r7}
 81079da:	b083      	sub	sp, #12
 81079dc:	af00      	add	r7, sp, #0
 81079de:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 81079e0:	687b      	ldr	r3, [r7, #4]
 81079e2:	689b      	ldr	r3, [r3, #8]
 81079e4:	f003 0308 	and.w	r3, r3, #8
 81079e8:	2b08      	cmp	r3, #8
 81079ea:	d101      	bne.n	81079f0 <LL_ADC_INJ_IsConversionOngoing+0x18>
 81079ec:	2301      	movs	r3, #1
 81079ee:	e000      	b.n	81079f2 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 81079f0:	2300      	movs	r3, #0
}
 81079f2:	4618      	mov	r0, r3
 81079f4:	370c      	adds	r7, #12
 81079f6:	46bd      	mov	sp, r7
 81079f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 81079fc:	4770      	bx	lr
	...

08107a00 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8107a00:	b590      	push	{r4, r7, lr}
 8107a02:	b089      	sub	sp, #36	; 0x24
 8107a04:	af00      	add	r7, sp, #0
 8107a06:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8107a08:	2300      	movs	r3, #0
 8107a0a:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8107a0c:	2300      	movs	r3, #0
 8107a0e:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8107a10:	687b      	ldr	r3, [r7, #4]
 8107a12:	2b00      	cmp	r3, #0
 8107a14:	d101      	bne.n	8107a1a <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8107a16:	2301      	movs	r3, #1
 8107a18:	e18f      	b.n	8107d3a <HAL_ADC_Init+0x33a>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8107a1a:	687b      	ldr	r3, [r7, #4]
 8107a1c:	68db      	ldr	r3, [r3, #12]
 8107a1e:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8107a20:	687b      	ldr	r3, [r7, #4]
 8107a22:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8107a24:	2b00      	cmp	r3, #0
 8107a26:	d109      	bne.n	8107a3c <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8107a28:	6878      	ldr	r0, [r7, #4]
 8107a2a:	f7f9 fcdb 	bl	81013e4 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8107a2e:	687b      	ldr	r3, [r7, #4]
 8107a30:	2200      	movs	r2, #0
 8107a32:	659a      	str	r2, [r3, #88]	; 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8107a34:	687b      	ldr	r3, [r7, #4]
 8107a36:	2200      	movs	r2, #0
 8107a38:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8107a3c:	687b      	ldr	r3, [r7, #4]
 8107a3e:	681b      	ldr	r3, [r3, #0]
 8107a40:	4618      	mov	r0, r3
 8107a42:	f7ff ff67 	bl	8107914 <LL_ADC_IsDeepPowerDownEnabled>
 8107a46:	4603      	mov	r3, r0
 8107a48:	2b00      	cmp	r3, #0
 8107a4a:	d004      	beq.n	8107a56 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8107a4c:	687b      	ldr	r3, [r7, #4]
 8107a4e:	681b      	ldr	r3, [r3, #0]
 8107a50:	4618      	mov	r0, r3
 8107a52:	f7ff ff4d 	bl	81078f0 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8107a56:	687b      	ldr	r3, [r7, #4]
 8107a58:	681b      	ldr	r3, [r3, #0]
 8107a5a:	4618      	mov	r0, r3
 8107a5c:	f7ff ff82 	bl	8107964 <LL_ADC_IsInternalRegulatorEnabled>
 8107a60:	4603      	mov	r3, r0
 8107a62:	2b00      	cmp	r3, #0
 8107a64:	d114      	bne.n	8107a90 <HAL_ADC_Init+0x90>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8107a66:	687b      	ldr	r3, [r7, #4]
 8107a68:	681b      	ldr	r3, [r3, #0]
 8107a6a:	4618      	mov	r0, r3
 8107a6c:	f7ff ff66 	bl	810793c <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8107a70:	4b88      	ldr	r3, [pc, #544]	; (8107c94 <HAL_ADC_Init+0x294>)
 8107a72:	681b      	ldr	r3, [r3, #0]
 8107a74:	099b      	lsrs	r3, r3, #6
 8107a76:	4a88      	ldr	r2, [pc, #544]	; (8107c98 <HAL_ADC_Init+0x298>)
 8107a78:	fba2 2303 	umull	r2, r3, r2, r3
 8107a7c:	099b      	lsrs	r3, r3, #6
 8107a7e:	3301      	adds	r3, #1
 8107a80:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8107a82:	e002      	b.n	8107a8a <HAL_ADC_Init+0x8a>
    {
      wait_loop_index--;
 8107a84:	68bb      	ldr	r3, [r7, #8]
 8107a86:	3b01      	subs	r3, #1
 8107a88:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8107a8a:	68bb      	ldr	r3, [r7, #8]
 8107a8c:	2b00      	cmp	r3, #0
 8107a8e:	d1f9      	bne.n	8107a84 <HAL_ADC_Init+0x84>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8107a90:	687b      	ldr	r3, [r7, #4]
 8107a92:	681b      	ldr	r3, [r3, #0]
 8107a94:	4618      	mov	r0, r3
 8107a96:	f7ff ff65 	bl	8107964 <LL_ADC_IsInternalRegulatorEnabled>
 8107a9a:	4603      	mov	r3, r0
 8107a9c:	2b00      	cmp	r3, #0
 8107a9e:	d10d      	bne.n	8107abc <HAL_ADC_Init+0xbc>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8107aa0:	687b      	ldr	r3, [r7, #4]
 8107aa2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8107aa4:	f043 0210 	orr.w	r2, r3, #16
 8107aa8:	687b      	ldr	r3, [r7, #4]
 8107aaa:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8107aac:	687b      	ldr	r3, [r7, #4]
 8107aae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8107ab0:	f043 0201 	orr.w	r2, r3, #1
 8107ab4:	687b      	ldr	r3, [r7, #4]
 8107ab6:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8107ab8:	2301      	movs	r3, #1
 8107aba:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8107abc:	687b      	ldr	r3, [r7, #4]
 8107abe:	681b      	ldr	r3, [r3, #0]
 8107ac0:	4618      	mov	r0, r3
 8107ac2:	f7ff ff76 	bl	81079b2 <LL_ADC_REG_IsConversionOngoing>
 8107ac6:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8107ac8:	687b      	ldr	r3, [r7, #4]
 8107aca:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8107acc:	f003 0310 	and.w	r3, r3, #16
 8107ad0:	2b00      	cmp	r3, #0
 8107ad2:	f040 8129 	bne.w	8107d28 <HAL_ADC_Init+0x328>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8107ad6:	697b      	ldr	r3, [r7, #20]
 8107ad8:	2b00      	cmp	r3, #0
 8107ada:	f040 8125 	bne.w	8107d28 <HAL_ADC_Init+0x328>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8107ade:	687b      	ldr	r3, [r7, #4]
 8107ae0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8107ae2:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8107ae6:	f043 0202 	orr.w	r2, r3, #2
 8107aea:	687b      	ldr	r3, [r7, #4]
 8107aec:	655a      	str	r2, [r3, #84]	; 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8107aee:	687b      	ldr	r3, [r7, #4]
 8107af0:	681b      	ldr	r3, [r3, #0]
 8107af2:	4618      	mov	r0, r3
 8107af4:	f7ff ff4a 	bl	810798c <LL_ADC_IsEnabled>
 8107af8:	4603      	mov	r3, r0
 8107afa:	2b00      	cmp	r3, #0
 8107afc:	d136      	bne.n	8107b6c <HAL_ADC_Init+0x16c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8107afe:	687b      	ldr	r3, [r7, #4]
 8107b00:	681b      	ldr	r3, [r3, #0]
 8107b02:	4a66      	ldr	r2, [pc, #408]	; (8107c9c <HAL_ADC_Init+0x29c>)
 8107b04:	4293      	cmp	r3, r2
 8107b06:	d004      	beq.n	8107b12 <HAL_ADC_Init+0x112>
 8107b08:	687b      	ldr	r3, [r7, #4]
 8107b0a:	681b      	ldr	r3, [r3, #0]
 8107b0c:	4a64      	ldr	r2, [pc, #400]	; (8107ca0 <HAL_ADC_Init+0x2a0>)
 8107b0e:	4293      	cmp	r3, r2
 8107b10:	d10e      	bne.n	8107b30 <HAL_ADC_Init+0x130>
 8107b12:	4862      	ldr	r0, [pc, #392]	; (8107c9c <HAL_ADC_Init+0x29c>)
 8107b14:	f7ff ff3a 	bl	810798c <LL_ADC_IsEnabled>
 8107b18:	4604      	mov	r4, r0
 8107b1a:	4861      	ldr	r0, [pc, #388]	; (8107ca0 <HAL_ADC_Init+0x2a0>)
 8107b1c:	f7ff ff36 	bl	810798c <LL_ADC_IsEnabled>
 8107b20:	4603      	mov	r3, r0
 8107b22:	4323      	orrs	r3, r4
 8107b24:	2b00      	cmp	r3, #0
 8107b26:	bf0c      	ite	eq
 8107b28:	2301      	moveq	r3, #1
 8107b2a:	2300      	movne	r3, #0
 8107b2c:	b2db      	uxtb	r3, r3
 8107b2e:	e008      	b.n	8107b42 <HAL_ADC_Init+0x142>
 8107b30:	485c      	ldr	r0, [pc, #368]	; (8107ca4 <HAL_ADC_Init+0x2a4>)
 8107b32:	f7ff ff2b 	bl	810798c <LL_ADC_IsEnabled>
 8107b36:	4603      	mov	r3, r0
 8107b38:	2b00      	cmp	r3, #0
 8107b3a:	bf0c      	ite	eq
 8107b3c:	2301      	moveq	r3, #1
 8107b3e:	2300      	movne	r3, #0
 8107b40:	b2db      	uxtb	r3, r3
 8107b42:	2b00      	cmp	r3, #0
 8107b44:	d012      	beq.n	8107b6c <HAL_ADC_Init+0x16c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8107b46:	687b      	ldr	r3, [r7, #4]
 8107b48:	681b      	ldr	r3, [r3, #0]
 8107b4a:	4a54      	ldr	r2, [pc, #336]	; (8107c9c <HAL_ADC_Init+0x29c>)
 8107b4c:	4293      	cmp	r3, r2
 8107b4e:	d004      	beq.n	8107b5a <HAL_ADC_Init+0x15a>
 8107b50:	687b      	ldr	r3, [r7, #4]
 8107b52:	681b      	ldr	r3, [r3, #0]
 8107b54:	4a52      	ldr	r2, [pc, #328]	; (8107ca0 <HAL_ADC_Init+0x2a0>)
 8107b56:	4293      	cmp	r3, r2
 8107b58:	d101      	bne.n	8107b5e <HAL_ADC_Init+0x15e>
 8107b5a:	4a53      	ldr	r2, [pc, #332]	; (8107ca8 <HAL_ADC_Init+0x2a8>)
 8107b5c:	e000      	b.n	8107b60 <HAL_ADC_Init+0x160>
 8107b5e:	4a53      	ldr	r2, [pc, #332]	; (8107cac <HAL_ADC_Init+0x2ac>)
 8107b60:	687b      	ldr	r3, [r7, #4]
 8107b62:	685b      	ldr	r3, [r3, #4]
 8107b64:	4619      	mov	r1, r3
 8107b66:	4610      	mov	r0, r2
 8107b68:	f7ff fdbe 	bl	81076e8 <LL_ADC_SetCommonClock>
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
    }

#else

    if ((HAL_GetREVID() > REV_ID_Y) && (ADC_RESOLUTION_8B == hadc->Init.Resolution))
 8107b6c:	f7ff fd86 	bl	810767c <HAL_GetREVID>
 8107b70:	4603      	mov	r3, r0
 8107b72:	f241 0203 	movw	r2, #4099	; 0x1003
 8107b76:	4293      	cmp	r3, r2
 8107b78:	d914      	bls.n	8107ba4 <HAL_ADC_Init+0x1a4>
 8107b7a:	687b      	ldr	r3, [r7, #4]
 8107b7c:	689b      	ldr	r3, [r3, #8]
 8107b7e:	2b10      	cmp	r3, #16
 8107b80:	d110      	bne.n	8107ba4 <HAL_ADC_Init+0x1a4>
    {
      /* for STM32H7 silicon rev.B and above , ADC_CFGR_RES value for 8bits resolution is : b111 */
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8107b82:	687b      	ldr	r3, [r7, #4]
 8107b84:	7d5b      	ldrb	r3, [r3, #21]
 8107b86:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 8107b88:	687b      	ldr	r3, [r7, #4]
 8107b8a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8107b8c:	431a      	orrs	r2, r3
                  hadc->Init.Resolution | (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)                |
 8107b8e:	687b      	ldr	r3, [r7, #4]
 8107b90:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 8107b92:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8107b94:	687b      	ldr	r3, [r7, #4]
 8107b96:	7f1b      	ldrb	r3, [r3, #28]
 8107b98:	041b      	lsls	r3, r3, #16
                  hadc->Init.Resolution | (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)                |
 8107b9a:	4313      	orrs	r3, r2
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8107b9c:	f043 030c 	orr.w	r3, r3, #12
 8107ba0:	61bb      	str	r3, [r7, #24]
 8107ba2:	e00d      	b.n	8107bc0 <HAL_ADC_Init+0x1c0>
    }
    else
    {

      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8107ba4:	687b      	ldr	r3, [r7, #4]
 8107ba6:	7d5b      	ldrb	r3, [r3, #21]
 8107ba8:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 8107baa:	687b      	ldr	r3, [r7, #4]
 8107bac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8107bae:	431a      	orrs	r2, r3
                  hadc->Init.Resolution                                                 |
 8107bb0:	687b      	ldr	r3, [r7, #4]
 8107bb2:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 8107bb4:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8107bb6:	687b      	ldr	r3, [r7, #4]
 8107bb8:	7f1b      	ldrb	r3, [r3, #28]
 8107bba:	041b      	lsls	r3, r3, #16
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8107bbc:	4313      	orrs	r3, r2
 8107bbe:	61bb      	str	r3, [r7, #24]
    }

#endif /* ADC_VER_V5_3 */

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8107bc0:	687b      	ldr	r3, [r7, #4]
 8107bc2:	7f1b      	ldrb	r3, [r3, #28]
 8107bc4:	2b01      	cmp	r3, #1
 8107bc6:	d106      	bne.n	8107bd6 <HAL_ADC_Init+0x1d6>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8107bc8:	687b      	ldr	r3, [r7, #4]
 8107bca:	6a1b      	ldr	r3, [r3, #32]
 8107bcc:	3b01      	subs	r3, #1
 8107bce:	045b      	lsls	r3, r3, #17
 8107bd0:	69ba      	ldr	r2, [r7, #24]
 8107bd2:	4313      	orrs	r3, r2
 8107bd4:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8107bd6:	687b      	ldr	r3, [r7, #4]
 8107bd8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8107bda:	2b00      	cmp	r3, #0
 8107bdc:	d009      	beq.n	8107bf2 <HAL_ADC_Init+0x1f2>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8107bde:	687b      	ldr	r3, [r7, #4]
 8107be0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8107be2:	f403 7278 	and.w	r2, r3, #992	; 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 8107be6:	687b      	ldr	r3, [r7, #4]
 8107be8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8107bea:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8107bec:	69ba      	ldr	r2, [r7, #24]
 8107bee:	4313      	orrs	r3, r2
 8107bf0:	61bb      	str	r3, [r7, #24]
      /* Update Configuration Register CFGR */
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
    }
#else
    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8107bf2:	687b      	ldr	r3, [r7, #4]
 8107bf4:	681b      	ldr	r3, [r3, #0]
 8107bf6:	68da      	ldr	r2, [r3, #12]
 8107bf8:	4b2d      	ldr	r3, [pc, #180]	; (8107cb0 <HAL_ADC_Init+0x2b0>)
 8107bfa:	4013      	ands	r3, r2
 8107bfc:	687a      	ldr	r2, [r7, #4]
 8107bfe:	6812      	ldr	r2, [r2, #0]
 8107c00:	69b9      	ldr	r1, [r7, #24]
 8107c02:	430b      	orrs	r3, r1
 8107c04:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - Conversion data management      Init.ConversionDataManagement       */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8107c06:	687b      	ldr	r3, [r7, #4]
 8107c08:	681b      	ldr	r3, [r3, #0]
 8107c0a:	4618      	mov	r0, r3
 8107c0c:	f7ff fed1 	bl	81079b2 <LL_ADC_REG_IsConversionOngoing>
 8107c10:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8107c12:	687b      	ldr	r3, [r7, #4]
 8107c14:	681b      	ldr	r3, [r3, #0]
 8107c16:	4618      	mov	r0, r3
 8107c18:	f7ff fede 	bl	81079d8 <LL_ADC_INJ_IsConversionOngoing>
 8107c1c:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8107c1e:	693b      	ldr	r3, [r7, #16]
 8107c20:	2b00      	cmp	r3, #0
 8107c22:	d15f      	bne.n	8107ce4 <HAL_ADC_Init+0x2e4>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8107c24:	68fb      	ldr	r3, [r7, #12]
 8107c26:	2b00      	cmp	r3, #0
 8107c28:	d15c      	bne.n	8107ce4 <HAL_ADC_Init+0x2e4>
                    ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
                    ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
      }
#else
      tmpCFGR = (
                  ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8107c2a:	687b      	ldr	r3, [r7, #4]
 8107c2c:	7d1b      	ldrb	r3, [r3, #20]
 8107c2e:	039a      	lsls	r2, r3, #14
                  ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
 8107c30:	687b      	ldr	r3, [r7, #4]
 8107c32:	6adb      	ldr	r3, [r3, #44]	; 0x2c
      tmpCFGR = (
 8107c34:	4313      	orrs	r3, r2
 8107c36:	61bb      	str	r3, [r7, #24]
#endif

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8107c38:	687b      	ldr	r3, [r7, #4]
 8107c3a:	681b      	ldr	r3, [r3, #0]
 8107c3c:	68db      	ldr	r3, [r3, #12]
 8107c3e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8107c42:	f023 0303 	bic.w	r3, r3, #3
 8107c46:	687a      	ldr	r2, [r7, #4]
 8107c48:	6812      	ldr	r2, [r2, #0]
 8107c4a:	69b9      	ldr	r1, [r7, #24]
 8107c4c:	430b      	orrs	r3, r1
 8107c4e:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8107c50:	687b      	ldr	r3, [r7, #4]
 8107c52:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8107c56:	2b01      	cmp	r3, #1
 8107c58:	d12e      	bne.n	8107cb8 <HAL_ADC_Init+0x2b8>
#endif
        assert_param(IS_ADC_RIGHT_BIT_SHIFT(hadc->Init.Oversampling.RightBitShift));
        assert_param(IS_ADC_TRIGGERED_OVERSAMPLING_MODE(hadc->Init.Oversampling.TriggeredMode));
        assert_param(IS_ADC_REGOVERSAMPLING_MODE(hadc->Init.Oversampling.OversamplingStopReset));

        if ((hadc->Init.ExternalTrigConv == ADC_SOFTWARE_START)
 8107c5a:	687b      	ldr	r3, [r7, #4]
 8107c5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8107c5e:	2b00      	cmp	r3, #0
        /*  - Oversampling Ratio                                               */
        /*  - Right bit shift                                                  */
        /*  - Left bit shift                                                   */
        /*  - Triggered mode                                                   */
        /*  - Oversampling mode (continued/resumed)                            */
        MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_FIELDS,
 8107c60:	687b      	ldr	r3, [r7, #4]
 8107c62:	681b      	ldr	r3, [r3, #0]
 8107c64:	691a      	ldr	r2, [r3, #16]
 8107c66:	4b13      	ldr	r3, [pc, #76]	; (8107cb4 <HAL_ADC_Init+0x2b4>)
 8107c68:	4013      	ands	r3, r2
 8107c6a:	687a      	ldr	r2, [r7, #4]
 8107c6c:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8107c6e:	3a01      	subs	r2, #1
 8107c70:	0411      	lsls	r1, r2, #16
 8107c72:	687a      	ldr	r2, [r7, #4]
 8107c74:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8107c76:	4311      	orrs	r1, r2
 8107c78:	687a      	ldr	r2, [r7, #4]
 8107c7a:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8107c7c:	4311      	orrs	r1, r2
 8107c7e:	687a      	ldr	r2, [r7, #4]
 8107c80:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8107c82:	430a      	orrs	r2, r1
 8107c84:	431a      	orrs	r2, r3
 8107c86:	687b      	ldr	r3, [r7, #4]
 8107c88:	681b      	ldr	r3, [r3, #0]
 8107c8a:	f042 0201 	orr.w	r2, r2, #1
 8107c8e:	611a      	str	r2, [r3, #16]
 8107c90:	e01a      	b.n	8107cc8 <HAL_ADC_Init+0x2c8>
 8107c92:	bf00      	nop
 8107c94:	10000000 	.word	0x10000000
 8107c98:	053e2d63 	.word	0x053e2d63
 8107c9c:	40022000 	.word	0x40022000
 8107ca0:	40022100 	.word	0x40022100
 8107ca4:	58026000 	.word	0x58026000
 8107ca8:	40022300 	.word	0x40022300
 8107cac:	58026300 	.word	0x58026300
 8107cb0:	fff0c003 	.word	0xfff0c003
 8107cb4:	fc00f81e 	.word	0xfc00f81e

      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8107cb8:	687b      	ldr	r3, [r7, #4]
 8107cba:	681b      	ldr	r3, [r3, #0]
 8107cbc:	691a      	ldr	r2, [r3, #16]
 8107cbe:	687b      	ldr	r3, [r7, #4]
 8107cc0:	681b      	ldr	r3, [r3, #0]
 8107cc2:	f022 0201 	bic.w	r2, r2, #1
 8107cc6:	611a      	str	r2, [r3, #16]
      }

      /* Set the LeftShift parameter: it is applied to the final result with or without oversampling */
      MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_LSHIFT, hadc->Init.LeftBitShift);
 8107cc8:	687b      	ldr	r3, [r7, #4]
 8107cca:	681b      	ldr	r3, [r3, #0]
 8107ccc:	691b      	ldr	r3, [r3, #16]
 8107cce:	f023 4170 	bic.w	r1, r3, #4026531840	; 0xf0000000
 8107cd2:	687b      	ldr	r3, [r7, #4]
 8107cd4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8107cd6:	687b      	ldr	r3, [r7, #4]
 8107cd8:	681b      	ldr	r3, [r3, #0]
 8107cda:	430a      	orrs	r2, r1
 8107cdc:	611a      	str	r2, [r3, #16]
        /* Configure the BOOST Mode */
        ADC_ConfigureBoostMode(hadc);
      }
#else
      /* Configure the BOOST Mode */
      ADC_ConfigureBoostMode(hadc);
 8107cde:	6878      	ldr	r0, [r7, #4]
 8107ce0:	f000 fb80 	bl	81083e4 <ADC_ConfigureBoostMode>
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8107ce4:	687b      	ldr	r3, [r7, #4]
 8107ce6:	68db      	ldr	r3, [r3, #12]
 8107ce8:	2b01      	cmp	r3, #1
 8107cea:	d10c      	bne.n	8107d06 <HAL_ADC_Init+0x306>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8107cec:	687b      	ldr	r3, [r7, #4]
 8107cee:	681b      	ldr	r3, [r3, #0]
 8107cf0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8107cf2:	f023 010f 	bic.w	r1, r3, #15
 8107cf6:	687b      	ldr	r3, [r7, #4]
 8107cf8:	699b      	ldr	r3, [r3, #24]
 8107cfa:	1e5a      	subs	r2, r3, #1
 8107cfc:	687b      	ldr	r3, [r7, #4]
 8107cfe:	681b      	ldr	r3, [r3, #0]
 8107d00:	430a      	orrs	r2, r1
 8107d02:	631a      	str	r2, [r3, #48]	; 0x30
 8107d04:	e007      	b.n	8107d16 <HAL_ADC_Init+0x316>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8107d06:	687b      	ldr	r3, [r7, #4]
 8107d08:	681b      	ldr	r3, [r3, #0]
 8107d0a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8107d0c:	687b      	ldr	r3, [r7, #4]
 8107d0e:	681b      	ldr	r3, [r3, #0]
 8107d10:	f022 020f 	bic.w	r2, r2, #15
 8107d14:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8107d16:	687b      	ldr	r3, [r7, #4]
 8107d18:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8107d1a:	f023 0303 	bic.w	r3, r3, #3
 8107d1e:	f043 0201 	orr.w	r2, r3, #1
 8107d22:	687b      	ldr	r3, [r7, #4]
 8107d24:	655a      	str	r2, [r3, #84]	; 0x54
 8107d26:	e007      	b.n	8107d38 <HAL_ADC_Init+0x338>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8107d28:	687b      	ldr	r3, [r7, #4]
 8107d2a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8107d2c:	f043 0210 	orr.w	r2, r3, #16
 8107d30:	687b      	ldr	r3, [r7, #4]
 8107d32:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8107d34:	2301      	movs	r3, #1
 8107d36:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8107d38:	7ffb      	ldrb	r3, [r7, #31]
}
 8107d3a:	4618      	mov	r0, r3
 8107d3c:	3724      	adds	r7, #36	; 0x24
 8107d3e:	46bd      	mov	sp, r7
 8107d40:	bd90      	pop	{r4, r7, pc}
 8107d42:	bf00      	nop

08107d44 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8107d44:	b590      	push	{r4, r7, lr}
 8107d46:	b0a1      	sub	sp, #132	; 0x84
 8107d48:	af00      	add	r7, sp, #0
 8107d4a:	6078      	str	r0, [r7, #4]
 8107d4c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8107d4e:	2300      	movs	r3, #0
 8107d50:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 8107d54:	2300      	movs	r3, #0
 8107d56:	60bb      	str	r3, [r7, #8]
  /* if ROVSE is set, the value of the OFFSETy_EN bit in ADCx_OFRy register is
     ignored (considered as reset) */
  assert_param(!((sConfig->OffsetNumber != ADC_OFFSET_NONE) && (hadc->Init.OversamplingMode == ENABLE)));

  /* Verification of channel number */
  if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 8107d58:	683b      	ldr	r3, [r7, #0]
 8107d5a:	68db      	ldr	r3, [r3, #12]
 8107d5c:	4a9d      	ldr	r2, [pc, #628]	; (8107fd4 <HAL_ADC_ConfigChannel+0x290>)
 8107d5e:	4293      	cmp	r3, r2
    }
#endif
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8107d60:	687b      	ldr	r3, [r7, #4]
 8107d62:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8107d66:	2b01      	cmp	r3, #1
 8107d68:	d101      	bne.n	8107d6e <HAL_ADC_ConfigChannel+0x2a>
 8107d6a:	2302      	movs	r3, #2
 8107d6c:	e321      	b.n	81083b2 <HAL_ADC_ConfigChannel+0x66e>
 8107d6e:	687b      	ldr	r3, [r7, #4]
 8107d70:	2201      	movs	r2, #1
 8107d72:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8107d76:	687b      	ldr	r3, [r7, #4]
 8107d78:	681b      	ldr	r3, [r3, #0]
 8107d7a:	4618      	mov	r0, r3
 8107d7c:	f7ff fe19 	bl	81079b2 <LL_ADC_REG_IsConversionOngoing>
 8107d80:	4603      	mov	r3, r0
 8107d82:	2b00      	cmp	r3, #0
 8107d84:	f040 8306 	bne.w	8108394 <HAL_ADC_ConfigChannel+0x650>
      /* ADC channels preselection */
      hadc->Instance->PCSEL_RES0 |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
    }
#else
    /* ADC channels preselection */
    hadc->Instance->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
 8107d88:	683b      	ldr	r3, [r7, #0]
 8107d8a:	681b      	ldr	r3, [r3, #0]
 8107d8c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8107d90:	2b00      	cmp	r3, #0
 8107d92:	d108      	bne.n	8107da6 <HAL_ADC_ConfigChannel+0x62>
 8107d94:	683b      	ldr	r3, [r7, #0]
 8107d96:	681b      	ldr	r3, [r3, #0]
 8107d98:	0e9b      	lsrs	r3, r3, #26
 8107d9a:	f003 031f 	and.w	r3, r3, #31
 8107d9e:	2201      	movs	r2, #1
 8107da0:	fa02 f303 	lsl.w	r3, r2, r3
 8107da4:	e016      	b.n	8107dd4 <HAL_ADC_ConfigChannel+0x90>
 8107da6:	683b      	ldr	r3, [r7, #0]
 8107da8:	681b      	ldr	r3, [r3, #0]
 8107daa:	667b      	str	r3, [r7, #100]	; 0x64
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8107dac:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8107dae:	fa93 f3a3 	rbit	r3, r3
 8107db2:	663b      	str	r3, [r7, #96]	; 0x60
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8107db4:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8107db6:	66bb      	str	r3, [r7, #104]	; 0x68
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8107db8:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8107dba:	2b00      	cmp	r3, #0
 8107dbc:	d101      	bne.n	8107dc2 <HAL_ADC_ConfigChannel+0x7e>
  {
    return 32U;
 8107dbe:	2320      	movs	r3, #32
 8107dc0:	e003      	b.n	8107dca <HAL_ADC_ConfigChannel+0x86>
  }
  return __builtin_clz(value);
 8107dc2:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8107dc4:	fab3 f383 	clz	r3, r3
 8107dc8:	b2db      	uxtb	r3, r3
 8107dca:	f003 031f 	and.w	r3, r3, #31
 8107dce:	2201      	movs	r2, #1
 8107dd0:	fa02 f303 	lsl.w	r3, r2, r3
 8107dd4:	687a      	ldr	r2, [r7, #4]
 8107dd6:	6812      	ldr	r2, [r2, #0]
 8107dd8:	69d1      	ldr	r1, [r2, #28]
 8107dda:	687a      	ldr	r2, [r7, #4]
 8107ddc:	6812      	ldr	r2, [r2, #0]
 8107dde:	430b      	orrs	r3, r1
 8107de0:	61d3      	str	r3, [r2, #28]
#endif /* ADC_VER_V5_V90 */

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8107de2:	687b      	ldr	r3, [r7, #4]
 8107de4:	6818      	ldr	r0, [r3, #0]
 8107de6:	683b      	ldr	r3, [r7, #0]
 8107de8:	6859      	ldr	r1, [r3, #4]
 8107dea:	683b      	ldr	r3, [r7, #0]
 8107dec:	681b      	ldr	r3, [r3, #0]
 8107dee:	461a      	mov	r2, r3
 8107df0:	f7ff fd02 	bl	81077f8 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8107df4:	687b      	ldr	r3, [r7, #4]
 8107df6:	681b      	ldr	r3, [r3, #0]
 8107df8:	4618      	mov	r0, r3
 8107dfa:	f7ff fdda 	bl	81079b2 <LL_ADC_REG_IsConversionOngoing>
 8107dfe:	67b8      	str	r0, [r7, #120]	; 0x78
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8107e00:	687b      	ldr	r3, [r7, #4]
 8107e02:	681b      	ldr	r3, [r3, #0]
 8107e04:	4618      	mov	r0, r3
 8107e06:	f7ff fde7 	bl	81079d8 <LL_ADC_INJ_IsConversionOngoing>
 8107e0a:	6778      	str	r0, [r7, #116]	; 0x74
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8107e0c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8107e0e:	2b00      	cmp	r3, #0
 8107e10:	f040 80b3 	bne.w	8107f7a <HAL_ADC_ConfigChannel+0x236>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8107e14:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8107e16:	2b00      	cmp	r3, #0
 8107e18:	f040 80af 	bne.w	8107f7a <HAL_ADC_ConfigChannel+0x236>
       )
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8107e1c:	687b      	ldr	r3, [r7, #4]
 8107e1e:	6818      	ldr	r0, [r3, #0]
 8107e20:	683b      	ldr	r3, [r7, #0]
 8107e22:	6819      	ldr	r1, [r3, #0]
 8107e24:	683b      	ldr	r3, [r7, #0]
 8107e26:	689b      	ldr	r3, [r3, #8]
 8107e28:	461a      	mov	r2, r3
 8107e2a:	f7ff fd11 	bl	8107850 <LL_ADC_SetChannelSamplingTime>
        tmpOffsetShifted = ADC3_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
      }
      else
#endif /* ADC_VER_V5_V90 */
      {
        tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8107e2e:	4b6a      	ldr	r3, [pc, #424]	; (8107fd8 <HAL_ADC_ConfigChannel+0x294>)
 8107e30:	681b      	ldr	r3, [r3, #0]
 8107e32:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8107e36:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8107e3a:	d10b      	bne.n	8107e54 <HAL_ADC_ConfigChannel+0x110>
 8107e3c:	683b      	ldr	r3, [r7, #0]
 8107e3e:	695a      	ldr	r2, [r3, #20]
 8107e40:	687b      	ldr	r3, [r7, #4]
 8107e42:	681b      	ldr	r3, [r3, #0]
 8107e44:	68db      	ldr	r3, [r3, #12]
 8107e46:	089b      	lsrs	r3, r3, #2
 8107e48:	f003 0307 	and.w	r3, r3, #7
 8107e4c:	005b      	lsls	r3, r3, #1
 8107e4e:	fa02 f303 	lsl.w	r3, r2, r3
 8107e52:	e01d      	b.n	8107e90 <HAL_ADC_ConfigChannel+0x14c>
 8107e54:	687b      	ldr	r3, [r7, #4]
 8107e56:	681b      	ldr	r3, [r3, #0]
 8107e58:	68db      	ldr	r3, [r3, #12]
 8107e5a:	f003 0310 	and.w	r3, r3, #16
 8107e5e:	2b00      	cmp	r3, #0
 8107e60:	d10b      	bne.n	8107e7a <HAL_ADC_ConfigChannel+0x136>
 8107e62:	683b      	ldr	r3, [r7, #0]
 8107e64:	695a      	ldr	r2, [r3, #20]
 8107e66:	687b      	ldr	r3, [r7, #4]
 8107e68:	681b      	ldr	r3, [r3, #0]
 8107e6a:	68db      	ldr	r3, [r3, #12]
 8107e6c:	089b      	lsrs	r3, r3, #2
 8107e6e:	f003 0307 	and.w	r3, r3, #7
 8107e72:	005b      	lsls	r3, r3, #1
 8107e74:	fa02 f303 	lsl.w	r3, r2, r3
 8107e78:	e00a      	b.n	8107e90 <HAL_ADC_ConfigChannel+0x14c>
 8107e7a:	683b      	ldr	r3, [r7, #0]
 8107e7c:	695a      	ldr	r2, [r3, #20]
 8107e7e:	687b      	ldr	r3, [r7, #4]
 8107e80:	681b      	ldr	r3, [r3, #0]
 8107e82:	68db      	ldr	r3, [r3, #12]
 8107e84:	089b      	lsrs	r3, r3, #2
 8107e86:	f003 0304 	and.w	r3, r3, #4
 8107e8a:	005b      	lsls	r3, r3, #1
 8107e8c:	fa02 f303 	lsl.w	r3, r2, r3
 8107e90:	673b      	str	r3, [r7, #112]	; 0x70
      }
      
      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8107e92:	683b      	ldr	r3, [r7, #0]
 8107e94:	691b      	ldr	r3, [r3, #16]
 8107e96:	2b04      	cmp	r3, #4
 8107e98:	d027      	beq.n	8107eea <HAL_ADC_ConfigChannel+0x1a6>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 8107e9a:	687b      	ldr	r3, [r7, #4]
 8107e9c:	6818      	ldr	r0, [r3, #0]
 8107e9e:	683b      	ldr	r3, [r7, #0]
 8107ea0:	6919      	ldr	r1, [r3, #16]
 8107ea2:	683b      	ldr	r3, [r7, #0]
 8107ea4:	681a      	ldr	r2, [r3, #0]
 8107ea6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8107ea8:	f7ff fc52 	bl	8107750 <LL_ADC_SetOffset>
        else
#endif /* ADC_VER_V5_V90 */
        {
          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSignedSaturation));
          /* Set ADC selected offset signed saturation */
          LL_ADC_SetOffsetSignedSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSignedSaturation == ENABLE) ? LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE : LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE);
 8107eac:	687b      	ldr	r3, [r7, #4]
 8107eae:	6818      	ldr	r0, [r3, #0]
 8107eb0:	683b      	ldr	r3, [r7, #0]
 8107eb2:	6919      	ldr	r1, [r3, #16]
 8107eb4:	683b      	ldr	r3, [r7, #0]
 8107eb6:	7e5b      	ldrb	r3, [r3, #25]
 8107eb8:	2b01      	cmp	r3, #1
 8107eba:	d102      	bne.n	8107ec2 <HAL_ADC_ConfigChannel+0x17e>
 8107ebc:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8107ec0:	e000      	b.n	8107ec4 <HAL_ADC_ConfigChannel+0x180>
 8107ec2:	2300      	movs	r3, #0
 8107ec4:	461a      	mov	r2, r3
 8107ec6:	f7ff fc7c 	bl	81077c2 <LL_ADC_SetOffsetSignedSaturation>

          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetRightShift));
          /* Set ADC selected offset right shift */
          LL_ADC_SetDataRightShift(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetRightShift == ENABLE) ? LL_ADC_OFFSET_RSHIFT_ENABLE : LL_ADC_OFFSET_RSHIFT_DISABLE);
 8107eca:	687b      	ldr	r3, [r7, #4]
 8107ecc:	6818      	ldr	r0, [r3, #0]
 8107ece:	683b      	ldr	r3, [r7, #0]
 8107ed0:	6919      	ldr	r1, [r3, #16]
 8107ed2:	683b      	ldr	r3, [r7, #0]
 8107ed4:	7e1b      	ldrb	r3, [r3, #24]
 8107ed6:	2b01      	cmp	r3, #1
 8107ed8:	d102      	bne.n	8107ee0 <HAL_ADC_ConfigChannel+0x19c>
 8107eda:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8107ede:	e000      	b.n	8107ee2 <HAL_ADC_ConfigChannel+0x19e>
 8107ee0:	2300      	movs	r3, #0
 8107ee2:	461a      	mov	r2, r3
 8107ee4:	f7ff fc54 	bl	8107790 <LL_ADC_SetDataRightShift>
 8107ee8:	e047      	b.n	8107f7a <HAL_ADC_ConfigChannel+0x236>
          }
        }
        else
#endif /* ADC_VER_V5_V90 */
        {
          if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8107eea:	687b      	ldr	r3, [r7, #4]
 8107eec:	681b      	ldr	r3, [r3, #0]
 8107eee:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8107ef0:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8107ef4:	683b      	ldr	r3, [r7, #0]
 8107ef6:	681b      	ldr	r3, [r3, #0]
 8107ef8:	069b      	lsls	r3, r3, #26
 8107efa:	429a      	cmp	r2, r3
 8107efc:	d107      	bne.n	8107f0e <HAL_ADC_ConfigChannel+0x1ca>
          {
            CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_SSATE);
 8107efe:	687b      	ldr	r3, [r7, #4]
 8107f00:	681b      	ldr	r3, [r3, #0]
 8107f02:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8107f04:	687b      	ldr	r3, [r7, #4]
 8107f06:	681b      	ldr	r3, [r3, #0]
 8107f08:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8107f0c:	661a      	str	r2, [r3, #96]	; 0x60
          }
          if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8107f0e:	687b      	ldr	r3, [r7, #4]
 8107f10:	681b      	ldr	r3, [r3, #0]
 8107f12:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8107f14:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8107f18:	683b      	ldr	r3, [r7, #0]
 8107f1a:	681b      	ldr	r3, [r3, #0]
 8107f1c:	069b      	lsls	r3, r3, #26
 8107f1e:	429a      	cmp	r2, r3
 8107f20:	d107      	bne.n	8107f32 <HAL_ADC_ConfigChannel+0x1ee>
          {
            CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_SSATE);
 8107f22:	687b      	ldr	r3, [r7, #4]
 8107f24:	681b      	ldr	r3, [r3, #0]
 8107f26:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8107f28:	687b      	ldr	r3, [r7, #4]
 8107f2a:	681b      	ldr	r3, [r3, #0]
 8107f2c:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8107f30:	665a      	str	r2, [r3, #100]	; 0x64
          }
          if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8107f32:	687b      	ldr	r3, [r7, #4]
 8107f34:	681b      	ldr	r3, [r3, #0]
 8107f36:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8107f38:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8107f3c:	683b      	ldr	r3, [r7, #0]
 8107f3e:	681b      	ldr	r3, [r3, #0]
 8107f40:	069b      	lsls	r3, r3, #26
 8107f42:	429a      	cmp	r2, r3
 8107f44:	d107      	bne.n	8107f56 <HAL_ADC_ConfigChannel+0x212>
          {
            CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_SSATE);
 8107f46:	687b      	ldr	r3, [r7, #4]
 8107f48:	681b      	ldr	r3, [r3, #0]
 8107f4a:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8107f4c:	687b      	ldr	r3, [r7, #4]
 8107f4e:	681b      	ldr	r3, [r3, #0]
 8107f50:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8107f54:	669a      	str	r2, [r3, #104]	; 0x68
          }
          if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8107f56:	687b      	ldr	r3, [r7, #4]
 8107f58:	681b      	ldr	r3, [r3, #0]
 8107f5a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8107f5c:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8107f60:	683b      	ldr	r3, [r7, #0]
 8107f62:	681b      	ldr	r3, [r3, #0]
 8107f64:	069b      	lsls	r3, r3, #26
 8107f66:	429a      	cmp	r2, r3
 8107f68:	d107      	bne.n	8107f7a <HAL_ADC_ConfigChannel+0x236>
          {
            CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_SSATE);
 8107f6a:	687b      	ldr	r3, [r7, #4]
 8107f6c:	681b      	ldr	r3, [r3, #0]
 8107f6e:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8107f70:	687b      	ldr	r3, [r7, #4]
 8107f72:	681b      	ldr	r3, [r3, #0]
 8107f74:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8107f78:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8107f7a:	687b      	ldr	r3, [r7, #4]
 8107f7c:	681b      	ldr	r3, [r3, #0]
 8107f7e:	4618      	mov	r0, r3
 8107f80:	f7ff fd04 	bl	810798c <LL_ADC_IsEnabled>
 8107f84:	4603      	mov	r3, r0
 8107f86:	2b00      	cmp	r3, #0
 8107f88:	f040 820d 	bne.w	81083a6 <HAL_ADC_ConfigChannel+0x662>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8107f8c:	687b      	ldr	r3, [r7, #4]
 8107f8e:	6818      	ldr	r0, [r3, #0]
 8107f90:	683b      	ldr	r3, [r7, #0]
 8107f92:	6819      	ldr	r1, [r3, #0]
 8107f94:	683b      	ldr	r3, [r7, #0]
 8107f96:	68db      	ldr	r3, [r3, #12]
 8107f98:	461a      	mov	r2, r3
 8107f9a:	f7ff fc85 	bl	81078a8 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8107f9e:	683b      	ldr	r3, [r7, #0]
 8107fa0:	68db      	ldr	r3, [r3, #12]
 8107fa2:	4a0c      	ldr	r2, [pc, #48]	; (8107fd4 <HAL_ADC_ConfigChannel+0x290>)
 8107fa4:	4293      	cmp	r3, r2
 8107fa6:	f040 8133 	bne.w	8108210 <HAL_ADC_ConfigChannel+0x4cc>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8107faa:	687b      	ldr	r3, [r7, #4]
 8107fac:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8107fae:	683b      	ldr	r3, [r7, #0]
 8107fb0:	681b      	ldr	r3, [r3, #0]
 8107fb2:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8107fb6:	2b00      	cmp	r3, #0
 8107fb8:	d110      	bne.n	8107fdc <HAL_ADC_ConfigChannel+0x298>
 8107fba:	683b      	ldr	r3, [r7, #0]
 8107fbc:	681b      	ldr	r3, [r3, #0]
 8107fbe:	0e9b      	lsrs	r3, r3, #26
 8107fc0:	3301      	adds	r3, #1
 8107fc2:	f003 031f 	and.w	r3, r3, #31
 8107fc6:	2b09      	cmp	r3, #9
 8107fc8:	bf94      	ite	ls
 8107fca:	2301      	movls	r3, #1
 8107fcc:	2300      	movhi	r3, #0
 8107fce:	b2db      	uxtb	r3, r3
 8107fd0:	e01e      	b.n	8108010 <HAL_ADC_ConfigChannel+0x2cc>
 8107fd2:	bf00      	nop
 8107fd4:	47ff0000 	.word	0x47ff0000
 8107fd8:	5c001000 	.word	0x5c001000
 8107fdc:	683b      	ldr	r3, [r7, #0]
 8107fde:	681b      	ldr	r3, [r3, #0]
 8107fe0:	65bb      	str	r3, [r7, #88]	; 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8107fe2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8107fe4:	fa93 f3a3 	rbit	r3, r3
 8107fe8:	657b      	str	r3, [r7, #84]	; 0x54
  return result;
 8107fea:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8107fec:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (value == 0U)
 8107fee:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8107ff0:	2b00      	cmp	r3, #0
 8107ff2:	d101      	bne.n	8107ff8 <HAL_ADC_ConfigChannel+0x2b4>
    return 32U;
 8107ff4:	2320      	movs	r3, #32
 8107ff6:	e003      	b.n	8108000 <HAL_ADC_ConfigChannel+0x2bc>
  return __builtin_clz(value);
 8107ff8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8107ffa:	fab3 f383 	clz	r3, r3
 8107ffe:	b2db      	uxtb	r3, r3
 8108000:	3301      	adds	r3, #1
 8108002:	f003 031f 	and.w	r3, r3, #31
 8108006:	2b09      	cmp	r3, #9
 8108008:	bf94      	ite	ls
 810800a:	2301      	movls	r3, #1
 810800c:	2300      	movhi	r3, #0
 810800e:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8108010:	2b00      	cmp	r3, #0
 8108012:	d079      	beq.n	8108108 <HAL_ADC_ConfigChannel+0x3c4>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8108014:	683b      	ldr	r3, [r7, #0]
 8108016:	681b      	ldr	r3, [r3, #0]
 8108018:	f3c3 0313 	ubfx	r3, r3, #0, #20
 810801c:	2b00      	cmp	r3, #0
 810801e:	d107      	bne.n	8108030 <HAL_ADC_ConfigChannel+0x2ec>
 8108020:	683b      	ldr	r3, [r7, #0]
 8108022:	681b      	ldr	r3, [r3, #0]
 8108024:	0e9b      	lsrs	r3, r3, #26
 8108026:	3301      	adds	r3, #1
 8108028:	069b      	lsls	r3, r3, #26
 810802a:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 810802e:	e015      	b.n	810805c <HAL_ADC_ConfigChannel+0x318>
 8108030:	683b      	ldr	r3, [r7, #0]
 8108032:	681b      	ldr	r3, [r3, #0]
 8108034:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8108036:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8108038:	fa93 f3a3 	rbit	r3, r3
 810803c:	64bb      	str	r3, [r7, #72]	; 0x48
  return result;
 810803e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8108040:	653b      	str	r3, [r7, #80]	; 0x50
  if (value == 0U)
 8108042:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8108044:	2b00      	cmp	r3, #0
 8108046:	d101      	bne.n	810804c <HAL_ADC_ConfigChannel+0x308>
    return 32U;
 8108048:	2320      	movs	r3, #32
 810804a:	e003      	b.n	8108054 <HAL_ADC_ConfigChannel+0x310>
  return __builtin_clz(value);
 810804c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 810804e:	fab3 f383 	clz	r3, r3
 8108052:	b2db      	uxtb	r3, r3
 8108054:	3301      	adds	r3, #1
 8108056:	069b      	lsls	r3, r3, #26
 8108058:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 810805c:	683b      	ldr	r3, [r7, #0]
 810805e:	681b      	ldr	r3, [r3, #0]
 8108060:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8108064:	2b00      	cmp	r3, #0
 8108066:	d109      	bne.n	810807c <HAL_ADC_ConfigChannel+0x338>
 8108068:	683b      	ldr	r3, [r7, #0]
 810806a:	681b      	ldr	r3, [r3, #0]
 810806c:	0e9b      	lsrs	r3, r3, #26
 810806e:	3301      	adds	r3, #1
 8108070:	f003 031f 	and.w	r3, r3, #31
 8108074:	2101      	movs	r1, #1
 8108076:	fa01 f303 	lsl.w	r3, r1, r3
 810807a:	e017      	b.n	81080ac <HAL_ADC_ConfigChannel+0x368>
 810807c:	683b      	ldr	r3, [r7, #0]
 810807e:	681b      	ldr	r3, [r3, #0]
 8108080:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8108082:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8108084:	fa93 f3a3 	rbit	r3, r3
 8108088:	63fb      	str	r3, [r7, #60]	; 0x3c
  return result;
 810808a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 810808c:	647b      	str	r3, [r7, #68]	; 0x44
  if (value == 0U)
 810808e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8108090:	2b00      	cmp	r3, #0
 8108092:	d101      	bne.n	8108098 <HAL_ADC_ConfigChannel+0x354>
    return 32U;
 8108094:	2320      	movs	r3, #32
 8108096:	e003      	b.n	81080a0 <HAL_ADC_ConfigChannel+0x35c>
  return __builtin_clz(value);
 8108098:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 810809a:	fab3 f383 	clz	r3, r3
 810809e:	b2db      	uxtb	r3, r3
 81080a0:	3301      	adds	r3, #1
 81080a2:	f003 031f 	and.w	r3, r3, #31
 81080a6:	2101      	movs	r1, #1
 81080a8:	fa01 f303 	lsl.w	r3, r1, r3
 81080ac:	ea42 0103 	orr.w	r1, r2, r3
 81080b0:	683b      	ldr	r3, [r7, #0]
 81080b2:	681b      	ldr	r3, [r3, #0]
 81080b4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 81080b8:	2b00      	cmp	r3, #0
 81080ba:	d10a      	bne.n	81080d2 <HAL_ADC_ConfigChannel+0x38e>
 81080bc:	683b      	ldr	r3, [r7, #0]
 81080be:	681b      	ldr	r3, [r3, #0]
 81080c0:	0e9b      	lsrs	r3, r3, #26
 81080c2:	3301      	adds	r3, #1
 81080c4:	f003 021f 	and.w	r2, r3, #31
 81080c8:	4613      	mov	r3, r2
 81080ca:	005b      	lsls	r3, r3, #1
 81080cc:	4413      	add	r3, r2
 81080ce:	051b      	lsls	r3, r3, #20
 81080d0:	e018      	b.n	8108104 <HAL_ADC_ConfigChannel+0x3c0>
 81080d2:	683b      	ldr	r3, [r7, #0]
 81080d4:	681b      	ldr	r3, [r3, #0]
 81080d6:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 81080d8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 81080da:	fa93 f3a3 	rbit	r3, r3
 81080de:	633b      	str	r3, [r7, #48]	; 0x30
  return result;
 81080e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 81080e2:	63bb      	str	r3, [r7, #56]	; 0x38
  if (value == 0U)
 81080e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 81080e6:	2b00      	cmp	r3, #0
 81080e8:	d101      	bne.n	81080ee <HAL_ADC_ConfigChannel+0x3aa>
    return 32U;
 81080ea:	2320      	movs	r3, #32
 81080ec:	e003      	b.n	81080f6 <HAL_ADC_ConfigChannel+0x3b2>
  return __builtin_clz(value);
 81080ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 81080f0:	fab3 f383 	clz	r3, r3
 81080f4:	b2db      	uxtb	r3, r3
 81080f6:	3301      	adds	r3, #1
 81080f8:	f003 021f 	and.w	r2, r3, #31
 81080fc:	4613      	mov	r3, r2
 81080fe:	005b      	lsls	r3, r3, #1
 8108100:	4413      	add	r3, r2
 8108102:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8108104:	430b      	orrs	r3, r1
 8108106:	e07e      	b.n	8108206 <HAL_ADC_ConfigChannel+0x4c2>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8108108:	683b      	ldr	r3, [r7, #0]
 810810a:	681b      	ldr	r3, [r3, #0]
 810810c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8108110:	2b00      	cmp	r3, #0
 8108112:	d107      	bne.n	8108124 <HAL_ADC_ConfigChannel+0x3e0>
 8108114:	683b      	ldr	r3, [r7, #0]
 8108116:	681b      	ldr	r3, [r3, #0]
 8108118:	0e9b      	lsrs	r3, r3, #26
 810811a:	3301      	adds	r3, #1
 810811c:	069b      	lsls	r3, r3, #26
 810811e:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8108122:	e015      	b.n	8108150 <HAL_ADC_ConfigChannel+0x40c>
 8108124:	683b      	ldr	r3, [r7, #0]
 8108126:	681b      	ldr	r3, [r3, #0]
 8108128:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 810812a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 810812c:	fa93 f3a3 	rbit	r3, r3
 8108130:	627b      	str	r3, [r7, #36]	; 0x24
  return result;
 8108132:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8108134:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (value == 0U)
 8108136:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8108138:	2b00      	cmp	r3, #0
 810813a:	d101      	bne.n	8108140 <HAL_ADC_ConfigChannel+0x3fc>
    return 32U;
 810813c:	2320      	movs	r3, #32
 810813e:	e003      	b.n	8108148 <HAL_ADC_ConfigChannel+0x404>
  return __builtin_clz(value);
 8108140:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8108142:	fab3 f383 	clz	r3, r3
 8108146:	b2db      	uxtb	r3, r3
 8108148:	3301      	adds	r3, #1
 810814a:	069b      	lsls	r3, r3, #26
 810814c:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8108150:	683b      	ldr	r3, [r7, #0]
 8108152:	681b      	ldr	r3, [r3, #0]
 8108154:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8108158:	2b00      	cmp	r3, #0
 810815a:	d109      	bne.n	8108170 <HAL_ADC_ConfigChannel+0x42c>
 810815c:	683b      	ldr	r3, [r7, #0]
 810815e:	681b      	ldr	r3, [r3, #0]
 8108160:	0e9b      	lsrs	r3, r3, #26
 8108162:	3301      	adds	r3, #1
 8108164:	f003 031f 	and.w	r3, r3, #31
 8108168:	2101      	movs	r1, #1
 810816a:	fa01 f303 	lsl.w	r3, r1, r3
 810816e:	e017      	b.n	81081a0 <HAL_ADC_ConfigChannel+0x45c>
 8108170:	683b      	ldr	r3, [r7, #0]
 8108172:	681b      	ldr	r3, [r3, #0]
 8108174:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8108176:	69fb      	ldr	r3, [r7, #28]
 8108178:	fa93 f3a3 	rbit	r3, r3
 810817c:	61bb      	str	r3, [r7, #24]
  return result;
 810817e:	69bb      	ldr	r3, [r7, #24]
 8108180:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 8108182:	6a3b      	ldr	r3, [r7, #32]
 8108184:	2b00      	cmp	r3, #0
 8108186:	d101      	bne.n	810818c <HAL_ADC_ConfigChannel+0x448>
    return 32U;
 8108188:	2320      	movs	r3, #32
 810818a:	e003      	b.n	8108194 <HAL_ADC_ConfigChannel+0x450>
  return __builtin_clz(value);
 810818c:	6a3b      	ldr	r3, [r7, #32]
 810818e:	fab3 f383 	clz	r3, r3
 8108192:	b2db      	uxtb	r3, r3
 8108194:	3301      	adds	r3, #1
 8108196:	f003 031f 	and.w	r3, r3, #31
 810819a:	2101      	movs	r1, #1
 810819c:	fa01 f303 	lsl.w	r3, r1, r3
 81081a0:	ea42 0103 	orr.w	r1, r2, r3
 81081a4:	683b      	ldr	r3, [r7, #0]
 81081a6:	681b      	ldr	r3, [r3, #0]
 81081a8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 81081ac:	2b00      	cmp	r3, #0
 81081ae:	d10d      	bne.n	81081cc <HAL_ADC_ConfigChannel+0x488>
 81081b0:	683b      	ldr	r3, [r7, #0]
 81081b2:	681b      	ldr	r3, [r3, #0]
 81081b4:	0e9b      	lsrs	r3, r3, #26
 81081b6:	3301      	adds	r3, #1
 81081b8:	f003 021f 	and.w	r2, r3, #31
 81081bc:	4613      	mov	r3, r2
 81081be:	005b      	lsls	r3, r3, #1
 81081c0:	4413      	add	r3, r2
 81081c2:	3b1e      	subs	r3, #30
 81081c4:	051b      	lsls	r3, r3, #20
 81081c6:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 81081ca:	e01b      	b.n	8108204 <HAL_ADC_ConfigChannel+0x4c0>
 81081cc:	683b      	ldr	r3, [r7, #0]
 81081ce:	681b      	ldr	r3, [r3, #0]
 81081d0:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 81081d2:	693b      	ldr	r3, [r7, #16]
 81081d4:	fa93 f3a3 	rbit	r3, r3
 81081d8:	60fb      	str	r3, [r7, #12]
  return result;
 81081da:	68fb      	ldr	r3, [r7, #12]
 81081dc:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 81081de:	697b      	ldr	r3, [r7, #20]
 81081e0:	2b00      	cmp	r3, #0
 81081e2:	d101      	bne.n	81081e8 <HAL_ADC_ConfigChannel+0x4a4>
    return 32U;
 81081e4:	2320      	movs	r3, #32
 81081e6:	e003      	b.n	81081f0 <HAL_ADC_ConfigChannel+0x4ac>
  return __builtin_clz(value);
 81081e8:	697b      	ldr	r3, [r7, #20]
 81081ea:	fab3 f383 	clz	r3, r3
 81081ee:	b2db      	uxtb	r3, r3
 81081f0:	3301      	adds	r3, #1
 81081f2:	f003 021f 	and.w	r2, r3, #31
 81081f6:	4613      	mov	r3, r2
 81081f8:	005b      	lsls	r3, r3, #1
 81081fa:	4413      	add	r3, r2
 81081fc:	3b1e      	subs	r3, #30
 81081fe:	051b      	lsls	r3, r3, #20
 8108200:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8108204:	430b      	orrs	r3, r1
 8108206:	683a      	ldr	r2, [r7, #0]
 8108208:	6892      	ldr	r2, [r2, #8]
 810820a:	4619      	mov	r1, r3
 810820c:	f7ff fb20 	bl	8107850 <LL_ADC_SetChannelSamplingTime>
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      /* Note: these internal measurement paths can be disabled using           */
      /* HAL_ADC_DeInit().                                                      */

      if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8108210:	683b      	ldr	r3, [r7, #0]
 8108212:	681b      	ldr	r3, [r3, #0]
 8108214:	2b00      	cmp	r3, #0
 8108216:	f280 80c6 	bge.w	81083a6 <HAL_ADC_ConfigChannel+0x662>
      {
        /* Configuration of common ADC parameters                                 */

        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 810821a:	687b      	ldr	r3, [r7, #4]
 810821c:	681b      	ldr	r3, [r3, #0]
 810821e:	4a67      	ldr	r2, [pc, #412]	; (81083bc <HAL_ADC_ConfigChannel+0x678>)
 8108220:	4293      	cmp	r3, r2
 8108222:	d004      	beq.n	810822e <HAL_ADC_ConfigChannel+0x4ea>
 8108224:	687b      	ldr	r3, [r7, #4]
 8108226:	681b      	ldr	r3, [r3, #0]
 8108228:	4a65      	ldr	r2, [pc, #404]	; (81083c0 <HAL_ADC_ConfigChannel+0x67c>)
 810822a:	4293      	cmp	r3, r2
 810822c:	d101      	bne.n	8108232 <HAL_ADC_ConfigChannel+0x4ee>
 810822e:	4b65      	ldr	r3, [pc, #404]	; (81083c4 <HAL_ADC_ConfigChannel+0x680>)
 8108230:	e000      	b.n	8108234 <HAL_ADC_ConfigChannel+0x4f0>
 8108232:	4b65      	ldr	r3, [pc, #404]	; (81083c8 <HAL_ADC_ConfigChannel+0x684>)
 8108234:	4618      	mov	r0, r3
 8108236:	f7ff fa7d 	bl	8107734 <LL_ADC_GetCommonPathInternalCh>
 810823a:	66f8      	str	r0, [r7, #108]	; 0x6c

        /* Software is allowed to change common parameters only when all ADCs   */
        /* of the common group are disabled.                                    */
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 810823c:	687b      	ldr	r3, [r7, #4]
 810823e:	681b      	ldr	r3, [r3, #0]
 8108240:	4a5e      	ldr	r2, [pc, #376]	; (81083bc <HAL_ADC_ConfigChannel+0x678>)
 8108242:	4293      	cmp	r3, r2
 8108244:	d004      	beq.n	8108250 <HAL_ADC_ConfigChannel+0x50c>
 8108246:	687b      	ldr	r3, [r7, #4]
 8108248:	681b      	ldr	r3, [r3, #0]
 810824a:	4a5d      	ldr	r2, [pc, #372]	; (81083c0 <HAL_ADC_ConfigChannel+0x67c>)
 810824c:	4293      	cmp	r3, r2
 810824e:	d10e      	bne.n	810826e <HAL_ADC_ConfigChannel+0x52a>
 8108250:	485a      	ldr	r0, [pc, #360]	; (81083bc <HAL_ADC_ConfigChannel+0x678>)
 8108252:	f7ff fb9b 	bl	810798c <LL_ADC_IsEnabled>
 8108256:	4604      	mov	r4, r0
 8108258:	4859      	ldr	r0, [pc, #356]	; (81083c0 <HAL_ADC_ConfigChannel+0x67c>)
 810825a:	f7ff fb97 	bl	810798c <LL_ADC_IsEnabled>
 810825e:	4603      	mov	r3, r0
 8108260:	4323      	orrs	r3, r4
 8108262:	2b00      	cmp	r3, #0
 8108264:	bf0c      	ite	eq
 8108266:	2301      	moveq	r3, #1
 8108268:	2300      	movne	r3, #0
 810826a:	b2db      	uxtb	r3, r3
 810826c:	e008      	b.n	8108280 <HAL_ADC_ConfigChannel+0x53c>
 810826e:	4857      	ldr	r0, [pc, #348]	; (81083cc <HAL_ADC_ConfigChannel+0x688>)
 8108270:	f7ff fb8c 	bl	810798c <LL_ADC_IsEnabled>
 8108274:	4603      	mov	r3, r0
 8108276:	2b00      	cmp	r3, #0
 8108278:	bf0c      	ite	eq
 810827a:	2301      	moveq	r3, #1
 810827c:	2300      	movne	r3, #0
 810827e:	b2db      	uxtb	r3, r3
 8108280:	2b00      	cmp	r3, #0
 8108282:	d07d      	beq.n	8108380 <HAL_ADC_ConfigChannel+0x63c>
        {
          /* If the requested internal measurement path has already been enabled, */
          /* bypass the configuration processing.                                 */
          if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8108284:	683b      	ldr	r3, [r7, #0]
 8108286:	681b      	ldr	r3, [r3, #0]
 8108288:	4a51      	ldr	r2, [pc, #324]	; (81083d0 <HAL_ADC_ConfigChannel+0x68c>)
 810828a:	4293      	cmp	r3, r2
 810828c:	d130      	bne.n	81082f0 <HAL_ADC_ConfigChannel+0x5ac>
 810828e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8108290:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8108294:	2b00      	cmp	r3, #0
 8108296:	d12b      	bne.n	81082f0 <HAL_ADC_ConfigChannel+0x5ac>
          {
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8108298:	687b      	ldr	r3, [r7, #4]
 810829a:	681b      	ldr	r3, [r3, #0]
 810829c:	4a4b      	ldr	r2, [pc, #300]	; (81083cc <HAL_ADC_ConfigChannel+0x688>)
 810829e:	4293      	cmp	r3, r2
 81082a0:	f040 8081 	bne.w	81083a6 <HAL_ADC_ConfigChannel+0x662>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_TEMPSENSOR | tmp_config_internal_channel);
 81082a4:	687b      	ldr	r3, [r7, #4]
 81082a6:	681b      	ldr	r3, [r3, #0]
 81082a8:	4a44      	ldr	r2, [pc, #272]	; (81083bc <HAL_ADC_ConfigChannel+0x678>)
 81082aa:	4293      	cmp	r3, r2
 81082ac:	d004      	beq.n	81082b8 <HAL_ADC_ConfigChannel+0x574>
 81082ae:	687b      	ldr	r3, [r7, #4]
 81082b0:	681b      	ldr	r3, [r3, #0]
 81082b2:	4a43      	ldr	r2, [pc, #268]	; (81083c0 <HAL_ADC_ConfigChannel+0x67c>)
 81082b4:	4293      	cmp	r3, r2
 81082b6:	d101      	bne.n	81082bc <HAL_ADC_ConfigChannel+0x578>
 81082b8:	4a42      	ldr	r2, [pc, #264]	; (81083c4 <HAL_ADC_ConfigChannel+0x680>)
 81082ba:	e000      	b.n	81082be <HAL_ADC_ConfigChannel+0x57a>
 81082bc:	4a42      	ldr	r2, [pc, #264]	; (81083c8 <HAL_ADC_ConfigChannel+0x684>)
 81082be:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 81082c0:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 81082c4:	4619      	mov	r1, r3
 81082c6:	4610      	mov	r0, r2
 81082c8:	f7ff fa21 	bl	810770e <LL_ADC_SetCommonPathInternalCh>
              /* Delay for temperature sensor stabilization time */
              /* Wait loop initialization and execution */
              /* Note: Variable divided by 2 to compensate partially              */
              /*       CPU processing cycles, scaling in us split to not          */
              /*       exceed 32 bits register capacity and handle low frequency. */
              wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 81082cc:	4b41      	ldr	r3, [pc, #260]	; (81083d4 <HAL_ADC_ConfigChannel+0x690>)
 81082ce:	681b      	ldr	r3, [r3, #0]
 81082d0:	099b      	lsrs	r3, r3, #6
 81082d2:	4a41      	ldr	r2, [pc, #260]	; (81083d8 <HAL_ADC_ConfigChannel+0x694>)
 81082d4:	fba2 2303 	umull	r2, r3, r2, r3
 81082d8:	099b      	lsrs	r3, r3, #6
 81082da:	3301      	adds	r3, #1
 81082dc:	005b      	lsls	r3, r3, #1
 81082de:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 81082e0:	e002      	b.n	81082e8 <HAL_ADC_ConfigChannel+0x5a4>
              {
                wait_loop_index--;
 81082e2:	68bb      	ldr	r3, [r7, #8]
 81082e4:	3b01      	subs	r3, #1
 81082e6:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 81082e8:	68bb      	ldr	r3, [r7, #8]
 81082ea:	2b00      	cmp	r3, #0
 81082ec:	d1f9      	bne.n	81082e2 <HAL_ADC_ConfigChannel+0x59e>
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 81082ee:	e05a      	b.n	81083a6 <HAL_ADC_ConfigChannel+0x662>
              }
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 81082f0:	683b      	ldr	r3, [r7, #0]
 81082f2:	681b      	ldr	r3, [r3, #0]
 81082f4:	4a39      	ldr	r2, [pc, #228]	; (81083dc <HAL_ADC_ConfigChannel+0x698>)
 81082f6:	4293      	cmp	r3, r2
 81082f8:	d11e      	bne.n	8108338 <HAL_ADC_ConfigChannel+0x5f4>
 81082fa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 81082fc:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8108300:	2b00      	cmp	r3, #0
 8108302:	d119      	bne.n	8108338 <HAL_ADC_ConfigChannel+0x5f4>
          {
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8108304:	687b      	ldr	r3, [r7, #4]
 8108306:	681b      	ldr	r3, [r3, #0]
 8108308:	4a30      	ldr	r2, [pc, #192]	; (81083cc <HAL_ADC_ConfigChannel+0x688>)
 810830a:	4293      	cmp	r3, r2
 810830c:	d14b      	bne.n	81083a6 <HAL_ADC_ConfigChannel+0x662>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
 810830e:	687b      	ldr	r3, [r7, #4]
 8108310:	681b      	ldr	r3, [r3, #0]
 8108312:	4a2a      	ldr	r2, [pc, #168]	; (81083bc <HAL_ADC_ConfigChannel+0x678>)
 8108314:	4293      	cmp	r3, r2
 8108316:	d004      	beq.n	8108322 <HAL_ADC_ConfigChannel+0x5de>
 8108318:	687b      	ldr	r3, [r7, #4]
 810831a:	681b      	ldr	r3, [r3, #0]
 810831c:	4a28      	ldr	r2, [pc, #160]	; (81083c0 <HAL_ADC_ConfigChannel+0x67c>)
 810831e:	4293      	cmp	r3, r2
 8108320:	d101      	bne.n	8108326 <HAL_ADC_ConfigChannel+0x5e2>
 8108322:	4a28      	ldr	r2, [pc, #160]	; (81083c4 <HAL_ADC_ConfigChannel+0x680>)
 8108324:	e000      	b.n	8108328 <HAL_ADC_ConfigChannel+0x5e4>
 8108326:	4a28      	ldr	r2, [pc, #160]	; (81083c8 <HAL_ADC_ConfigChannel+0x684>)
 8108328:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 810832a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 810832e:	4619      	mov	r1, r3
 8108330:	4610      	mov	r0, r2
 8108332:	f7ff f9ec 	bl	810770e <LL_ADC_SetCommonPathInternalCh>
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8108336:	e036      	b.n	81083a6 <HAL_ADC_ConfigChannel+0x662>
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8108338:	683b      	ldr	r3, [r7, #0]
 810833a:	681b      	ldr	r3, [r3, #0]
 810833c:	4a28      	ldr	r2, [pc, #160]	; (81083e0 <HAL_ADC_ConfigChannel+0x69c>)
 810833e:	4293      	cmp	r3, r2
 8108340:	d131      	bne.n	81083a6 <HAL_ADC_ConfigChannel+0x662>
 8108342:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8108344:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8108348:	2b00      	cmp	r3, #0
 810834a:	d12c      	bne.n	81083a6 <HAL_ADC_ConfigChannel+0x662>
          {
            if (ADC_VREFINT_INSTANCE(hadc))
 810834c:	687b      	ldr	r3, [r7, #4]
 810834e:	681b      	ldr	r3, [r3, #0]
 8108350:	4a1e      	ldr	r2, [pc, #120]	; (81083cc <HAL_ADC_ConfigChannel+0x688>)
 8108352:	4293      	cmp	r3, r2
 8108354:	d127      	bne.n	81083a6 <HAL_ADC_ConfigChannel+0x662>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VREFINT | tmp_config_internal_channel);
 8108356:	687b      	ldr	r3, [r7, #4]
 8108358:	681b      	ldr	r3, [r3, #0]
 810835a:	4a18      	ldr	r2, [pc, #96]	; (81083bc <HAL_ADC_ConfigChannel+0x678>)
 810835c:	4293      	cmp	r3, r2
 810835e:	d004      	beq.n	810836a <HAL_ADC_ConfigChannel+0x626>
 8108360:	687b      	ldr	r3, [r7, #4]
 8108362:	681b      	ldr	r3, [r3, #0]
 8108364:	4a16      	ldr	r2, [pc, #88]	; (81083c0 <HAL_ADC_ConfigChannel+0x67c>)
 8108366:	4293      	cmp	r3, r2
 8108368:	d101      	bne.n	810836e <HAL_ADC_ConfigChannel+0x62a>
 810836a:	4a16      	ldr	r2, [pc, #88]	; (81083c4 <HAL_ADC_ConfigChannel+0x680>)
 810836c:	e000      	b.n	8108370 <HAL_ADC_ConfigChannel+0x62c>
 810836e:	4a16      	ldr	r2, [pc, #88]	; (81083c8 <HAL_ADC_ConfigChannel+0x684>)
 8108370:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8108372:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8108376:	4619      	mov	r1, r3
 8108378:	4610      	mov	r0, r2
 810837a:	f7ff f9c8 	bl	810770e <LL_ADC_SetCommonPathInternalCh>
 810837e:	e012      	b.n	81083a6 <HAL_ADC_ConfigChannel+0x662>
        /* enabled and other ADC of the common group are enabled, internal      */
        /* measurement paths cannot be enabled.                                 */
        else
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8108380:	687b      	ldr	r3, [r7, #4]
 8108382:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8108384:	f043 0220 	orr.w	r2, r3, #32
 8108388:	687b      	ldr	r3, [r7, #4]
 810838a:	655a      	str	r2, [r3, #84]	; 0x54

          tmp_hal_status = HAL_ERROR;
 810838c:	2301      	movs	r3, #1
 810838e:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 8108392:	e008      	b.n	81083a6 <HAL_ADC_ConfigChannel+0x662>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8108394:	687b      	ldr	r3, [r7, #4]
 8108396:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8108398:	f043 0220 	orr.w	r2, r3, #32
 810839c:	687b      	ldr	r3, [r7, #4]
 810839e:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 81083a0:	2301      	movs	r3, #1
 81083a2:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 81083a6:	687b      	ldr	r3, [r7, #4]
 81083a8:	2200      	movs	r2, #0
 81083aa:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 81083ae:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
}
 81083b2:	4618      	mov	r0, r3
 81083b4:	3784      	adds	r7, #132	; 0x84
 81083b6:	46bd      	mov	sp, r7
 81083b8:	bd90      	pop	{r4, r7, pc}
 81083ba:	bf00      	nop
 81083bc:	40022000 	.word	0x40022000
 81083c0:	40022100 	.word	0x40022100
 81083c4:	40022300 	.word	0x40022300
 81083c8:	58026300 	.word	0x58026300
 81083cc:	58026000 	.word	0x58026000
 81083d0:	cb840000 	.word	0xcb840000
 81083d4:	10000000 	.word	0x10000000
 81083d8:	053e2d63 	.word	0x053e2d63
 81083dc:	c7520000 	.word	0xc7520000
 81083e0:	cfb80000 	.word	0xcfb80000

081083e4 <ADC_ConfigureBoostMode>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval None.
  */
void ADC_ConfigureBoostMode(ADC_HandleTypeDef *hadc)
{
 81083e4:	b580      	push	{r7, lr}
 81083e6:	b084      	sub	sp, #16
 81083e8:	af00      	add	r7, sp, #0
 81083ea:	6078      	str	r0, [r7, #4]
  uint32_t freq;
  if (ADC_IS_SYNCHRONOUS_CLOCK_MODE(hadc))
 81083ec:	687b      	ldr	r3, [r7, #4]
 81083ee:	681b      	ldr	r3, [r3, #0]
 81083f0:	4a7a      	ldr	r2, [pc, #488]	; (81085dc <ADC_ConfigureBoostMode+0x1f8>)
 81083f2:	4293      	cmp	r3, r2
 81083f4:	d004      	beq.n	8108400 <ADC_ConfigureBoostMode+0x1c>
 81083f6:	687b      	ldr	r3, [r7, #4]
 81083f8:	681b      	ldr	r3, [r3, #0]
 81083fa:	4a79      	ldr	r2, [pc, #484]	; (81085e0 <ADC_ConfigureBoostMode+0x1fc>)
 81083fc:	4293      	cmp	r3, r2
 81083fe:	d109      	bne.n	8108414 <ADC_ConfigureBoostMode+0x30>
 8108400:	4b78      	ldr	r3, [pc, #480]	; (81085e4 <ADC_ConfigureBoostMode+0x200>)
 8108402:	689b      	ldr	r3, [r3, #8]
 8108404:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8108408:	2b00      	cmp	r3, #0
 810840a:	bf14      	ite	ne
 810840c:	2301      	movne	r3, #1
 810840e:	2300      	moveq	r3, #0
 8108410:	b2db      	uxtb	r3, r3
 8108412:	e008      	b.n	8108426 <ADC_ConfigureBoostMode+0x42>
 8108414:	4b74      	ldr	r3, [pc, #464]	; (81085e8 <ADC_ConfigureBoostMode+0x204>)
 8108416:	689b      	ldr	r3, [r3, #8]
 8108418:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 810841c:	2b00      	cmp	r3, #0
 810841e:	bf14      	ite	ne
 8108420:	2301      	movne	r3, #1
 8108422:	2300      	moveq	r3, #0
 8108424:	b2db      	uxtb	r3, r3
 8108426:	2b00      	cmp	r3, #0
 8108428:	d01c      	beq.n	8108464 <ADC_ConfigureBoostMode+0x80>
  {
    freq = HAL_RCC_GetHCLKFreq();
 810842a:	f001 fe6b 	bl	810a104 <HAL_RCC_GetHCLKFreq>
 810842e:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 8108430:	687b      	ldr	r3, [r7, #4]
 8108432:	685b      	ldr	r3, [r3, #4]
 8108434:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8108438:	d010      	beq.n	810845c <ADC_ConfigureBoostMode+0x78>
 810843a:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 810843e:	d873      	bhi.n	8108528 <ADC_ConfigureBoostMode+0x144>
 8108440:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8108444:	d002      	beq.n	810844c <ADC_ConfigureBoostMode+0x68>
 8108446:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 810844a:	d16d      	bne.n	8108528 <ADC_ConfigureBoostMode+0x144>
    {
      case ADC_CLOCK_SYNC_PCLK_DIV1:
      case ADC_CLOCK_SYNC_PCLK_DIV2:
        freq /= (hadc->Init.ClockPrescaler >> ADC_CCR_CKMODE_Pos);
 810844c:	687b      	ldr	r3, [r7, #4]
 810844e:	685b      	ldr	r3, [r3, #4]
 8108450:	0c1b      	lsrs	r3, r3, #16
 8108452:	68fa      	ldr	r2, [r7, #12]
 8108454:	fbb2 f3f3 	udiv	r3, r2, r3
 8108458:	60fb      	str	r3, [r7, #12]
        break;
 810845a:	e068      	b.n	810852e <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_SYNC_PCLK_DIV4:
        freq /= 4UL;
 810845c:	68fb      	ldr	r3, [r7, #12]
 810845e:	089b      	lsrs	r3, r3, #2
 8108460:	60fb      	str	r3, [r7, #12]
        break;
 8108462:	e064      	b.n	810852e <ADC_ConfigureBoostMode+0x14a>
        break;
    }
  }
  else
  {
    freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC);
 8108464:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 8108468:	f04f 0100 	mov.w	r1, #0
 810846c:	f003 f8f2 	bl	810b654 <HAL_RCCEx_GetPeriphCLKFreq>
 8108470:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 8108472:	687b      	ldr	r3, [r7, #4]
 8108474:	685b      	ldr	r3, [r3, #4]
 8108476:	f5b3 1f30 	cmp.w	r3, #2883584	; 0x2c0000
 810847a:	d051      	beq.n	8108520 <ADC_ConfigureBoostMode+0x13c>
 810847c:	f5b3 1f30 	cmp.w	r3, #2883584	; 0x2c0000
 8108480:	d854      	bhi.n	810852c <ADC_ConfigureBoostMode+0x148>
 8108482:	f5b3 1f20 	cmp.w	r3, #2621440	; 0x280000
 8108486:	d047      	beq.n	8108518 <ADC_ConfigureBoostMode+0x134>
 8108488:	f5b3 1f20 	cmp.w	r3, #2621440	; 0x280000
 810848c:	d84e      	bhi.n	810852c <ADC_ConfigureBoostMode+0x148>
 810848e:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 8108492:	d03d      	beq.n	8108510 <ADC_ConfigureBoostMode+0x12c>
 8108494:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 8108498:	d848      	bhi.n	810852c <ADC_ConfigureBoostMode+0x148>
 810849a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 810849e:	d033      	beq.n	8108508 <ADC_ConfigureBoostMode+0x124>
 81084a0:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 81084a4:	d842      	bhi.n	810852c <ADC_ConfigureBoostMode+0x148>
 81084a6:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
 81084aa:	d029      	beq.n	8108500 <ADC_ConfigureBoostMode+0x11c>
 81084ac:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
 81084b0:	d83c      	bhi.n	810852c <ADC_ConfigureBoostMode+0x148>
 81084b2:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 81084b6:	d01a      	beq.n	81084ee <ADC_ConfigureBoostMode+0x10a>
 81084b8:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 81084bc:	d836      	bhi.n	810852c <ADC_ConfigureBoostMode+0x148>
 81084be:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 81084c2:	d014      	beq.n	81084ee <ADC_ConfigureBoostMode+0x10a>
 81084c4:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 81084c8:	d830      	bhi.n	810852c <ADC_ConfigureBoostMode+0x148>
 81084ca:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 81084ce:	d00e      	beq.n	81084ee <ADC_ConfigureBoostMode+0x10a>
 81084d0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 81084d4:	d82a      	bhi.n	810852c <ADC_ConfigureBoostMode+0x148>
 81084d6:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 81084da:	d008      	beq.n	81084ee <ADC_ConfigureBoostMode+0x10a>
 81084dc:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 81084e0:	d824      	bhi.n	810852c <ADC_ConfigureBoostMode+0x148>
 81084e2:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 81084e6:	d002      	beq.n	81084ee <ADC_ConfigureBoostMode+0x10a>
 81084e8:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 81084ec:	d11e      	bne.n	810852c <ADC_ConfigureBoostMode+0x148>
      case ADC_CLOCK_ASYNC_DIV4:
      case ADC_CLOCK_ASYNC_DIV6:
      case ADC_CLOCK_ASYNC_DIV8:
      case ADC_CLOCK_ASYNC_DIV10:
      case ADC_CLOCK_ASYNC_DIV12:
        freq /= ((hadc->Init.ClockPrescaler >> ADC_CCR_PRESC_Pos) << 1UL);
 81084ee:	687b      	ldr	r3, [r7, #4]
 81084f0:	685b      	ldr	r3, [r3, #4]
 81084f2:	0c9b      	lsrs	r3, r3, #18
 81084f4:	005b      	lsls	r3, r3, #1
 81084f6:	68fa      	ldr	r2, [r7, #12]
 81084f8:	fbb2 f3f3 	udiv	r3, r2, r3
 81084fc:	60fb      	str	r3, [r7, #12]
        break;
 81084fe:	e016      	b.n	810852e <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV16:
        freq /= 16UL;
 8108500:	68fb      	ldr	r3, [r7, #12]
 8108502:	091b      	lsrs	r3, r3, #4
 8108504:	60fb      	str	r3, [r7, #12]
        break;
 8108506:	e012      	b.n	810852e <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV32:
        freq /= 32UL;
 8108508:	68fb      	ldr	r3, [r7, #12]
 810850a:	095b      	lsrs	r3, r3, #5
 810850c:	60fb      	str	r3, [r7, #12]
        break;
 810850e:	e00e      	b.n	810852e <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV64:
        freq /= 64UL;
 8108510:	68fb      	ldr	r3, [r7, #12]
 8108512:	099b      	lsrs	r3, r3, #6
 8108514:	60fb      	str	r3, [r7, #12]
        break;
 8108516:	e00a      	b.n	810852e <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV128:
        freq /= 128UL;
 8108518:	68fb      	ldr	r3, [r7, #12]
 810851a:	09db      	lsrs	r3, r3, #7
 810851c:	60fb      	str	r3, [r7, #12]
        break;
 810851e:	e006      	b.n	810852e <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV256:
        freq /= 256UL;
 8108520:	68fb      	ldr	r3, [r7, #12]
 8108522:	0a1b      	lsrs	r3, r3, #8
 8108524:	60fb      	str	r3, [r7, #12]
        break;
 8108526:	e002      	b.n	810852e <ADC_ConfigureBoostMode+0x14a>
        break;
 8108528:	bf00      	nop
 810852a:	e000      	b.n	810852e <ADC_ConfigureBoostMode+0x14a>
      default:
        break;
 810852c:	bf00      	nop
  else /* if(freq > 25000000UL) */
  {
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
  }
#else
  if (HAL_GetREVID() <= REV_ID_Y) /* STM32H7 silicon Rev.Y */
 810852e:	f7ff f8a5 	bl	810767c <HAL_GetREVID>
 8108532:	4603      	mov	r3, r0
 8108534:	f241 0203 	movw	r2, #4099	; 0x1003
 8108538:	4293      	cmp	r3, r2
 810853a:	d815      	bhi.n	8108568 <ADC_ConfigureBoostMode+0x184>
  {
    if (freq > 20000000UL)
 810853c:	68fb      	ldr	r3, [r7, #12]
 810853e:	4a2b      	ldr	r2, [pc, #172]	; (81085ec <ADC_ConfigureBoostMode+0x208>)
 8108540:	4293      	cmp	r3, r2
 8108542:	d908      	bls.n	8108556 <ADC_ConfigureBoostMode+0x172>
    {
      SET_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 8108544:	687b      	ldr	r3, [r7, #4]
 8108546:	681b      	ldr	r3, [r3, #0]
 8108548:	689a      	ldr	r2, [r3, #8]
 810854a:	687b      	ldr	r3, [r7, #4]
 810854c:	681b      	ldr	r3, [r3, #0]
 810854e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8108552:	609a      	str	r2, [r3, #8]
    {
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
    }
  }
#endif /* ADC_VER_V5_3 */
}
 8108554:	e03e      	b.n	81085d4 <ADC_ConfigureBoostMode+0x1f0>
      CLEAR_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 8108556:	687b      	ldr	r3, [r7, #4]
 8108558:	681b      	ldr	r3, [r3, #0]
 810855a:	689a      	ldr	r2, [r3, #8]
 810855c:	687b      	ldr	r3, [r7, #4]
 810855e:	681b      	ldr	r3, [r3, #0]
 8108560:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8108564:	609a      	str	r2, [r3, #8]
}
 8108566:	e035      	b.n	81085d4 <ADC_ConfigureBoostMode+0x1f0>
    freq /= 2U; /* divider by 2 for Rev.V */
 8108568:	68fb      	ldr	r3, [r7, #12]
 810856a:	085b      	lsrs	r3, r3, #1
 810856c:	60fb      	str	r3, [r7, #12]
    if (freq <= 6250000UL)
 810856e:	68fb      	ldr	r3, [r7, #12]
 8108570:	4a1f      	ldr	r2, [pc, #124]	; (81085f0 <ADC_ConfigureBoostMode+0x20c>)
 8108572:	4293      	cmp	r3, r2
 8108574:	d808      	bhi.n	8108588 <ADC_ConfigureBoostMode+0x1a4>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, 0UL);
 8108576:	687b      	ldr	r3, [r7, #4]
 8108578:	681b      	ldr	r3, [r3, #0]
 810857a:	689a      	ldr	r2, [r3, #8]
 810857c:	687b      	ldr	r3, [r7, #4]
 810857e:	681b      	ldr	r3, [r3, #0]
 8108580:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8108584:	609a      	str	r2, [r3, #8]
}
 8108586:	e025      	b.n	81085d4 <ADC_ConfigureBoostMode+0x1f0>
    else if (freq <= 12500000UL)
 8108588:	68fb      	ldr	r3, [r7, #12]
 810858a:	4a1a      	ldr	r2, [pc, #104]	; (81085f4 <ADC_ConfigureBoostMode+0x210>)
 810858c:	4293      	cmp	r3, r2
 810858e:	d80a      	bhi.n	81085a6 <ADC_ConfigureBoostMode+0x1c2>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_0);
 8108590:	687b      	ldr	r3, [r7, #4]
 8108592:	681b      	ldr	r3, [r3, #0]
 8108594:	689b      	ldr	r3, [r3, #8]
 8108596:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 810859a:	687b      	ldr	r3, [r7, #4]
 810859c:	681b      	ldr	r3, [r3, #0]
 810859e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 81085a2:	609a      	str	r2, [r3, #8]
}
 81085a4:	e016      	b.n	81085d4 <ADC_ConfigureBoostMode+0x1f0>
    else if (freq <= 25000000UL)
 81085a6:	68fb      	ldr	r3, [r7, #12]
 81085a8:	4a13      	ldr	r2, [pc, #76]	; (81085f8 <ADC_ConfigureBoostMode+0x214>)
 81085aa:	4293      	cmp	r3, r2
 81085ac:	d80a      	bhi.n	81085c4 <ADC_ConfigureBoostMode+0x1e0>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1);
 81085ae:	687b      	ldr	r3, [r7, #4]
 81085b0:	681b      	ldr	r3, [r3, #0]
 81085b2:	689b      	ldr	r3, [r3, #8]
 81085b4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 81085b8:	687b      	ldr	r3, [r7, #4]
 81085ba:	681b      	ldr	r3, [r3, #0]
 81085bc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 81085c0:	609a      	str	r2, [r3, #8]
}
 81085c2:	e007      	b.n	81085d4 <ADC_ConfigureBoostMode+0x1f0>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
 81085c4:	687b      	ldr	r3, [r7, #4]
 81085c6:	681b      	ldr	r3, [r3, #0]
 81085c8:	689a      	ldr	r2, [r3, #8]
 81085ca:	687b      	ldr	r3, [r7, #4]
 81085cc:	681b      	ldr	r3, [r3, #0]
 81085ce:	f442 7240 	orr.w	r2, r2, #768	; 0x300
 81085d2:	609a      	str	r2, [r3, #8]
}
 81085d4:	bf00      	nop
 81085d6:	3710      	adds	r7, #16
 81085d8:	46bd      	mov	sp, r7
 81085da:	bd80      	pop	{r7, pc}
 81085dc:	40022000 	.word	0x40022000
 81085e0:	40022100 	.word	0x40022100
 81085e4:	40022300 	.word	0x40022300
 81085e8:	58026300 	.word	0x58026300
 81085ec:	01312d00 	.word	0x01312d00
 81085f0:	005f5e10 	.word	0x005f5e10
 81085f4:	00bebc20 	.word	0x00bebc20
 81085f8:	017d7840 	.word	0x017d7840

081085fc <LL_ADC_IsEnabled>:
{
 81085fc:	b480      	push	{r7}
 81085fe:	b083      	sub	sp, #12
 8108600:	af00      	add	r7, sp, #0
 8108602:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8108604:	687b      	ldr	r3, [r7, #4]
 8108606:	689b      	ldr	r3, [r3, #8]
 8108608:	f003 0301 	and.w	r3, r3, #1
 810860c:	2b01      	cmp	r3, #1
 810860e:	d101      	bne.n	8108614 <LL_ADC_IsEnabled+0x18>
 8108610:	2301      	movs	r3, #1
 8108612:	e000      	b.n	8108616 <LL_ADC_IsEnabled+0x1a>
 8108614:	2300      	movs	r3, #0
}
 8108616:	4618      	mov	r0, r3
 8108618:	370c      	adds	r7, #12
 810861a:	46bd      	mov	sp, r7
 810861c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8108620:	4770      	bx	lr

08108622 <LL_ADC_REG_IsConversionOngoing>:
{
 8108622:	b480      	push	{r7}
 8108624:	b083      	sub	sp, #12
 8108626:	af00      	add	r7, sp, #0
 8108628:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 810862a:	687b      	ldr	r3, [r7, #4]
 810862c:	689b      	ldr	r3, [r3, #8]
 810862e:	f003 0304 	and.w	r3, r3, #4
 8108632:	2b04      	cmp	r3, #4
 8108634:	d101      	bne.n	810863a <LL_ADC_REG_IsConversionOngoing+0x18>
 8108636:	2301      	movs	r3, #1
 8108638:	e000      	b.n	810863c <LL_ADC_REG_IsConversionOngoing+0x1a>
 810863a:	2300      	movs	r3, #0
}
 810863c:	4618      	mov	r0, r3
 810863e:	370c      	adds	r7, #12
 8108640:	46bd      	mov	sp, r7
 8108642:	f85d 7b04 	ldr.w	r7, [sp], #4
 8108646:	4770      	bx	lr

08108648 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 8108648:	b590      	push	{r4, r7, lr}
 810864a:	b09f      	sub	sp, #124	; 0x7c
 810864c:	af00      	add	r7, sp, #0
 810864e:	6078      	str	r0, [r7, #4]
 8108650:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8108652:	2300      	movs	r3, #0
 8108654:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
    assert_param(IS_ADC_DUAL_DATA_MODE(multimode->DualModeData));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8108658:	687b      	ldr	r3, [r7, #4]
 810865a:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 810865e:	2b01      	cmp	r3, #1
 8108660:	d101      	bne.n	8108666 <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8108662:	2302      	movs	r3, #2
 8108664:	e0c4      	b.n	81087f0 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>
 8108666:	687b      	ldr	r3, [r7, #4]
 8108668:	2201      	movs	r2, #1
 810866a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  tmphadcSlave.State = HAL_ADC_STATE_RESET;
 810866e:	2300      	movs	r3, #0
 8108670:	65fb      	str	r3, [r7, #92]	; 0x5c
  tmphadcSlave.ErrorCode = HAL_ADC_ERROR_NONE;
 8108672:	2300      	movs	r3, #0
 8108674:	663b      	str	r3, [r7, #96]	; 0x60

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 8108676:	687b      	ldr	r3, [r7, #4]
 8108678:	681b      	ldr	r3, [r3, #0]
 810867a:	4a5f      	ldr	r2, [pc, #380]	; (81087f8 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 810867c:	4293      	cmp	r3, r2
 810867e:	d102      	bne.n	8108686 <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8108680:	4b5e      	ldr	r3, [pc, #376]	; (81087fc <HAL_ADCEx_MultiModeConfigChannel+0x1b4>)
 8108682:	60bb      	str	r3, [r7, #8]
 8108684:	e001      	b.n	810868a <HAL_ADCEx_MultiModeConfigChannel+0x42>
 8108686:	2300      	movs	r3, #0
 8108688:	60bb      	str	r3, [r7, #8]

  if (tmphadcSlave.Instance == NULL)
 810868a:	68bb      	ldr	r3, [r7, #8]
 810868c:	2b00      	cmp	r3, #0
 810868e:	d10b      	bne.n	81086a8 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8108690:	687b      	ldr	r3, [r7, #4]
 8108692:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8108694:	f043 0220 	orr.w	r2, r3, #32
 8108698:	687b      	ldr	r3, [r7, #4]
 810869a:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 810869c:	687b      	ldr	r3, [r7, #4]
 810869e:	2200      	movs	r2, #0
 81086a0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    return HAL_ERROR;
 81086a4:	2301      	movs	r3, #1
 81086a6:	e0a3      	b.n	81087f0 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DATA Format configuration                                   */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 81086a8:	68bb      	ldr	r3, [r7, #8]
 81086aa:	4618      	mov	r0, r3
 81086ac:	f7ff ffb9 	bl	8108622 <LL_ADC_REG_IsConversionOngoing>
 81086b0:	6738      	str	r0, [r7, #112]	; 0x70
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 81086b2:	687b      	ldr	r3, [r7, #4]
 81086b4:	681b      	ldr	r3, [r3, #0]
 81086b6:	4618      	mov	r0, r3
 81086b8:	f7ff ffb3 	bl	8108622 <LL_ADC_REG_IsConversionOngoing>
 81086bc:	4603      	mov	r3, r0
 81086be:	2b00      	cmp	r3, #0
 81086c0:	f040 8085 	bne.w	81087ce <HAL_ADCEx_MultiModeConfigChannel+0x186>
      && (tmphadcSlave_conversion_on_going == 0UL))
 81086c4:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 81086c6:	2b00      	cmp	r3, #0
 81086c8:	f040 8081 	bne.w	81087ce <HAL_ADCEx_MultiModeConfigChannel+0x186>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 81086cc:	687b      	ldr	r3, [r7, #4]
 81086ce:	681b      	ldr	r3, [r3, #0]
 81086d0:	4a49      	ldr	r2, [pc, #292]	; (81087f8 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 81086d2:	4293      	cmp	r3, r2
 81086d4:	d004      	beq.n	81086e0 <HAL_ADCEx_MultiModeConfigChannel+0x98>
 81086d6:	687b      	ldr	r3, [r7, #4]
 81086d8:	681b      	ldr	r3, [r3, #0]
 81086da:	4a48      	ldr	r2, [pc, #288]	; (81087fc <HAL_ADCEx_MultiModeConfigChannel+0x1b4>)
 81086dc:	4293      	cmp	r3, r2
 81086de:	d101      	bne.n	81086e4 <HAL_ADCEx_MultiModeConfigChannel+0x9c>
 81086e0:	4b47      	ldr	r3, [pc, #284]	; (8108800 <HAL_ADCEx_MultiModeConfigChannel+0x1b8>)
 81086e2:	e000      	b.n	81086e6 <HAL_ADCEx_MultiModeConfigChannel+0x9e>
 81086e4:	4b47      	ldr	r3, [pc, #284]	; (8108804 <HAL_ADCEx_MultiModeConfigChannel+0x1bc>)
 81086e6:	66fb      	str	r3, [r7, #108]	; 0x6c

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 81086e8:	683b      	ldr	r3, [r7, #0]
 81086ea:	681b      	ldr	r3, [r3, #0]
 81086ec:	2b00      	cmp	r3, #0
 81086ee:	d03b      	beq.n	8108768 <HAL_ADCEx_MultiModeConfigChannel+0x120>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_DAMDF, multimode->DualModeData);
 81086f0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 81086f2:	689b      	ldr	r3, [r3, #8]
 81086f4:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 81086f8:	683b      	ldr	r3, [r7, #0]
 81086fa:	685b      	ldr	r3, [r3, #4]
 81086fc:	431a      	orrs	r2, r3
 81086fe:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8108700:	609a      	str	r2, [r3, #8]
      /*      from 1 to 8 clock cycles for 12 bits                              */
      /*      from 1 to 6 clock cycles for 10 and 8 bits                        */
      /*    If a higher delay is selected, it will be clipped to maximum delay  */
      /*    range                                                               */

      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8108702:	687b      	ldr	r3, [r7, #4]
 8108704:	681b      	ldr	r3, [r3, #0]
 8108706:	4a3c      	ldr	r2, [pc, #240]	; (81087f8 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 8108708:	4293      	cmp	r3, r2
 810870a:	d004      	beq.n	8108716 <HAL_ADCEx_MultiModeConfigChannel+0xce>
 810870c:	687b      	ldr	r3, [r7, #4]
 810870e:	681b      	ldr	r3, [r3, #0]
 8108710:	4a3a      	ldr	r2, [pc, #232]	; (81087fc <HAL_ADCEx_MultiModeConfigChannel+0x1b4>)
 8108712:	4293      	cmp	r3, r2
 8108714:	d10e      	bne.n	8108734 <HAL_ADCEx_MultiModeConfigChannel+0xec>
 8108716:	4838      	ldr	r0, [pc, #224]	; (81087f8 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 8108718:	f7ff ff70 	bl	81085fc <LL_ADC_IsEnabled>
 810871c:	4604      	mov	r4, r0
 810871e:	4837      	ldr	r0, [pc, #220]	; (81087fc <HAL_ADCEx_MultiModeConfigChannel+0x1b4>)
 8108720:	f7ff ff6c 	bl	81085fc <LL_ADC_IsEnabled>
 8108724:	4603      	mov	r3, r0
 8108726:	4323      	orrs	r3, r4
 8108728:	2b00      	cmp	r3, #0
 810872a:	bf0c      	ite	eq
 810872c:	2301      	moveq	r3, #1
 810872e:	2300      	movne	r3, #0
 8108730:	b2db      	uxtb	r3, r3
 8108732:	e008      	b.n	8108746 <HAL_ADCEx_MultiModeConfigChannel+0xfe>
 8108734:	4834      	ldr	r0, [pc, #208]	; (8108808 <HAL_ADCEx_MultiModeConfigChannel+0x1c0>)
 8108736:	f7ff ff61 	bl	81085fc <LL_ADC_IsEnabled>
 810873a:	4603      	mov	r3, r0
 810873c:	2b00      	cmp	r3, #0
 810873e:	bf0c      	ite	eq
 8108740:	2301      	moveq	r3, #1
 8108742:	2300      	movne	r3, #0
 8108744:	b2db      	uxtb	r3, r3
 8108746:	2b00      	cmp	r3, #0
 8108748:	d04b      	beq.n	81087e2 <HAL_ADCEx_MultiModeConfigChannel+0x19a>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 810874a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 810874c:	689b      	ldr	r3, [r3, #8]
 810874e:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8108752:	f023 030f 	bic.w	r3, r3, #15
 8108756:	683a      	ldr	r2, [r7, #0]
 8108758:	6811      	ldr	r1, [r2, #0]
 810875a:	683a      	ldr	r2, [r7, #0]
 810875c:	6892      	ldr	r2, [r2, #8]
 810875e:	430a      	orrs	r2, r1
 8108760:	431a      	orrs	r2, r3
 8108762:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8108764:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8108766:	e03c      	b.n	81087e2 <HAL_ADCEx_MultiModeConfigChannel+0x19a>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DAMDF);
 8108768:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 810876a:	689b      	ldr	r3, [r3, #8]
 810876c:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8108770:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8108772:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8108774:	687b      	ldr	r3, [r7, #4]
 8108776:	681b      	ldr	r3, [r3, #0]
 8108778:	4a1f      	ldr	r2, [pc, #124]	; (81087f8 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 810877a:	4293      	cmp	r3, r2
 810877c:	d004      	beq.n	8108788 <HAL_ADCEx_MultiModeConfigChannel+0x140>
 810877e:	687b      	ldr	r3, [r7, #4]
 8108780:	681b      	ldr	r3, [r3, #0]
 8108782:	4a1e      	ldr	r2, [pc, #120]	; (81087fc <HAL_ADCEx_MultiModeConfigChannel+0x1b4>)
 8108784:	4293      	cmp	r3, r2
 8108786:	d10e      	bne.n	81087a6 <HAL_ADCEx_MultiModeConfigChannel+0x15e>
 8108788:	481b      	ldr	r0, [pc, #108]	; (81087f8 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 810878a:	f7ff ff37 	bl	81085fc <LL_ADC_IsEnabled>
 810878e:	4604      	mov	r4, r0
 8108790:	481a      	ldr	r0, [pc, #104]	; (81087fc <HAL_ADCEx_MultiModeConfigChannel+0x1b4>)
 8108792:	f7ff ff33 	bl	81085fc <LL_ADC_IsEnabled>
 8108796:	4603      	mov	r3, r0
 8108798:	4323      	orrs	r3, r4
 810879a:	2b00      	cmp	r3, #0
 810879c:	bf0c      	ite	eq
 810879e:	2301      	moveq	r3, #1
 81087a0:	2300      	movne	r3, #0
 81087a2:	b2db      	uxtb	r3, r3
 81087a4:	e008      	b.n	81087b8 <HAL_ADCEx_MultiModeConfigChannel+0x170>
 81087a6:	4818      	ldr	r0, [pc, #96]	; (8108808 <HAL_ADCEx_MultiModeConfigChannel+0x1c0>)
 81087a8:	f7ff ff28 	bl	81085fc <LL_ADC_IsEnabled>
 81087ac:	4603      	mov	r3, r0
 81087ae:	2b00      	cmp	r3, #0
 81087b0:	bf0c      	ite	eq
 81087b2:	2301      	moveq	r3, #1
 81087b4:	2300      	movne	r3, #0
 81087b6:	b2db      	uxtb	r3, r3
 81087b8:	2b00      	cmp	r3, #0
 81087ba:	d012      	beq.n	81087e2 <HAL_ADCEx_MultiModeConfigChannel+0x19a>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 81087bc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 81087be:	689b      	ldr	r3, [r3, #8]
 81087c0:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 81087c4:	f023 030f 	bic.w	r3, r3, #15
 81087c8:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 81087ca:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 81087cc:	e009      	b.n	81087e2 <HAL_ADCEx_MultiModeConfigChannel+0x19a>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 81087ce:	687b      	ldr	r3, [r7, #4]
 81087d0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 81087d2:	f043 0220 	orr.w	r2, r3, #32
 81087d6:	687b      	ldr	r3, [r7, #4]
 81087d8:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 81087da:	2301      	movs	r3, #1
 81087dc:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
 81087e0:	e000      	b.n	81087e4 <HAL_ADCEx_MultiModeConfigChannel+0x19c>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 81087e2:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 81087e4:	687b      	ldr	r3, [r7, #4]
 81087e6:	2200      	movs	r2, #0
 81087e8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 81087ec:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
}
 81087f0:	4618      	mov	r0, r3
 81087f2:	377c      	adds	r7, #124	; 0x7c
 81087f4:	46bd      	mov	sp, r7
 81087f6:	bd90      	pop	{r4, r7, pc}
 81087f8:	40022000 	.word	0x40022000
 81087fc:	40022100 	.word	0x40022100
 8108800:	40022300 	.word	0x40022300
 8108804:	58026300 	.word	0x58026300
 8108808:	58026000 	.word	0x58026000

0810880c <HAL_CEC_Init>:
  *         parameters in the CEC_InitTypeDef and creates the associated handle .
  * @param hcec CEC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CEC_Init(CEC_HandleTypeDef *hcec)
{
 810880c:	b580      	push	{r7, lr}
 810880e:	b082      	sub	sp, #8
 8108810:	af00      	add	r7, sp, #0
 8108812:	6078      	str	r0, [r7, #4]
  /* Check the CEC handle allocation */
  if ((hcec == NULL) || (hcec->Init.RxBuffer == NULL))
 8108814:	687b      	ldr	r3, [r7, #4]
 8108816:	2b00      	cmp	r3, #0
 8108818:	d003      	beq.n	8108822 <HAL_CEC_Init+0x16>
 810881a:	687b      	ldr	r3, [r7, #4]
 810881c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 810881e:	2b00      	cmp	r3, #0
 8108820:	d101      	bne.n	8108826 <HAL_CEC_Init+0x1a>
  {
    return HAL_ERROR;
 8108822:	2301      	movs	r3, #1
 8108824:	e050      	b.n	81088c8 <HAL_CEC_Init+0xbc>

    /* Init the low level hardware */
    hcec->MspInitCallback(hcec);
  }
#else
  if (hcec->gState == HAL_CEC_STATE_RESET)
 8108826:	687b      	ldr	r3, [r7, #4]
 8108828:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 810882a:	2b00      	cmp	r3, #0
 810882c:	d106      	bne.n	810883c <HAL_CEC_Init+0x30>
  {
    /* Allocate lock resource and initialize it */
    hcec->Lock = HAL_UNLOCKED;
 810882e:	687b      	ldr	r3, [r7, #4]
 8108830:	2200      	movs	r2, #0
 8108832:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_CEC_MspInit(hcec);
 8108836:	6878      	ldr	r0, [r7, #4]
 8108838:	f7f8 ff14 	bl	8101664 <HAL_CEC_MspInit>
  }
#endif /* USE_HAL_CEC_REGISTER_CALLBACKS */

  hcec->gState = HAL_CEC_STATE_BUSY;
 810883c:	687b      	ldr	r3, [r7, #4]
 810883e:	2224      	movs	r2, #36	; 0x24
 8108840:	639a      	str	r2, [r3, #56]	; 0x38

  /* Disable the Peripheral */
  __HAL_CEC_DISABLE(hcec);
 8108842:	687b      	ldr	r3, [r7, #4]
 8108844:	681b      	ldr	r3, [r3, #0]
 8108846:	681a      	ldr	r2, [r3, #0]
 8108848:	687b      	ldr	r3, [r7, #4]
 810884a:	681b      	ldr	r3, [r3, #0]
 810884c:	f022 0201 	bic.w	r2, r2, #1
 8108850:	601a      	str	r2, [r3, #0]

  /* Write to CEC Control Register */
  hcec->Instance->CFGR = hcec->Init.SignalFreeTime | hcec->Init.Tolerance | hcec->Init.BRERxStop | \
 8108852:	687b      	ldr	r3, [r7, #4]
 8108854:	685a      	ldr	r2, [r3, #4]
 8108856:	687b      	ldr	r3, [r7, #4]
 8108858:	689b      	ldr	r3, [r3, #8]
 810885a:	431a      	orrs	r2, r3
 810885c:	687b      	ldr	r3, [r7, #4]
 810885e:	68db      	ldr	r3, [r3, #12]
 8108860:	431a      	orrs	r2, r3
                         hcec->Init.BREErrorBitGen | hcec->Init.LBPEErrorBitGen | \
 8108862:	687b      	ldr	r3, [r7, #4]
 8108864:	691b      	ldr	r3, [r3, #16]
  hcec->Instance->CFGR = hcec->Init.SignalFreeTime | hcec->Init.Tolerance | hcec->Init.BRERxStop | \
 8108866:	431a      	orrs	r2, r3
                         hcec->Init.BREErrorBitGen | hcec->Init.LBPEErrorBitGen | \
 8108868:	687b      	ldr	r3, [r7, #4]
 810886a:	695b      	ldr	r3, [r3, #20]
 810886c:	431a      	orrs	r2, r3
                         hcec->Init.BroadcastMsgNoErrorBitGen | \
 810886e:	687b      	ldr	r3, [r7, #4]
 8108870:	699b      	ldr	r3, [r3, #24]
                         hcec->Init.BREErrorBitGen | hcec->Init.LBPEErrorBitGen | \
 8108872:	431a      	orrs	r2, r3
                         hcec->Init.SignalFreeTimeOption | ((uint32_t)(hcec->Init.OwnAddress) << 16U) | \
 8108874:	687b      	ldr	r3, [r7, #4]
 8108876:	69db      	ldr	r3, [r3, #28]
                         hcec->Init.BroadcastMsgNoErrorBitGen | \
 8108878:	431a      	orrs	r2, r3
                         hcec->Init.SignalFreeTimeOption | ((uint32_t)(hcec->Init.OwnAddress) << 16U) | \
 810887a:	687b      	ldr	r3, [r7, #4]
 810887c:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 810887e:	041b      	lsls	r3, r3, #16
 8108880:	ea42 0103 	orr.w	r1, r2, r3
                         hcec->Init.ListenMode;
 8108884:	687b      	ldr	r3, [r7, #4]
 8108886:	6a1a      	ldr	r2, [r3, #32]
  hcec->Instance->CFGR = hcec->Init.SignalFreeTime | hcec->Init.Tolerance | hcec->Init.BRERxStop | \
 8108888:	687b      	ldr	r3, [r7, #4]
 810888a:	681b      	ldr	r3, [r3, #0]
                         hcec->Init.SignalFreeTimeOption | ((uint32_t)(hcec->Init.OwnAddress) << 16U) | \
 810888c:	430a      	orrs	r2, r1
  hcec->Instance->CFGR = hcec->Init.SignalFreeTime | hcec->Init.Tolerance | hcec->Init.BRERxStop | \
 810888e:	605a      	str	r2, [r3, #4]
    * End of Transmission IT
    * Tx Missing Acknowledge IT
    * Tx-Error IT
    * Tx-Buffer Underrun IT
    * Tx arbitration lost   */
  __HAL_CEC_ENABLE_IT(hcec, CEC_IT_RXBR | CEC_IT_RXEND | CEC_IER_RX_ALL_ERR | CEC_IT_TXBR | CEC_IT_TXEND |
 8108890:	687b      	ldr	r3, [r7, #4]
 8108892:	681b      	ldr	r3, [r3, #0]
 8108894:	695b      	ldr	r3, [r3, #20]
 8108896:	687a      	ldr	r2, [r7, #4]
 8108898:	6812      	ldr	r2, [r2, #0]
 810889a:	ea6f 3353 	mvn.w	r3, r3, lsr #13
 810889e:	ea6f 3343 	mvn.w	r3, r3, lsl #13
 81088a2:	6153      	str	r3, [r2, #20]
                      CEC_IER_TX_ALL_ERR);

  /* Enable the CEC Peripheral */
  __HAL_CEC_ENABLE(hcec);
 81088a4:	687b      	ldr	r3, [r7, #4]
 81088a6:	681b      	ldr	r3, [r3, #0]
 81088a8:	681a      	ldr	r2, [r3, #0]
 81088aa:	687b      	ldr	r3, [r7, #4]
 81088ac:	681b      	ldr	r3, [r3, #0]
 81088ae:	f042 0201 	orr.w	r2, r2, #1
 81088b2:	601a      	str	r2, [r3, #0]

  hcec->ErrorCode = HAL_CEC_ERROR_NONE;
 81088b4:	687b      	ldr	r3, [r7, #4]
 81088b6:	2200      	movs	r2, #0
 81088b8:	641a      	str	r2, [r3, #64]	; 0x40
  hcec->gState = HAL_CEC_STATE_READY;
 81088ba:	687b      	ldr	r3, [r7, #4]
 81088bc:	2220      	movs	r2, #32
 81088be:	639a      	str	r2, [r3, #56]	; 0x38
  hcec->RxState = HAL_CEC_STATE_READY;
 81088c0:	687b      	ldr	r3, [r7, #4]
 81088c2:	2220      	movs	r2, #32
 81088c4:	63da      	str	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 81088c6:	2300      	movs	r3, #0
}
 81088c8:	4618      	mov	r0, r3
 81088ca:	3708      	adds	r7, #8
 81088cc:	46bd      	mov	sp, r7
 81088ce:	bd80      	pop	{r7, pc}

081088d0 <HAL_CEC_IRQHandler>:
  * @brief This function handles CEC interrupt requests.
  * @param hcec CEC handle
  * @retval None
  */
void HAL_CEC_IRQHandler(CEC_HandleTypeDef *hcec)
{
 81088d0:	b580      	push	{r7, lr}
 81088d2:	b084      	sub	sp, #16
 81088d4:	af00      	add	r7, sp, #0
 81088d6:	6078      	str	r0, [r7, #4]

  /* save interrupts register for further error or interrupts handling purposes */
  uint32_t itflag;
  itflag = hcec->Instance->ISR;
 81088d8:	687b      	ldr	r3, [r7, #4]
 81088da:	681b      	ldr	r3, [r3, #0]
 81088dc:	691b      	ldr	r3, [r3, #16]
 81088de:	60fb      	str	r3, [r7, #12]


  /* ----------------------------Arbitration Lost Management----------------------------------*/
  /* CEC TX arbitration error interrupt occurred --------------------------------------*/
  if (HAL_IS_BIT_SET(itflag, CEC_FLAG_ARBLST))
 81088e0:	68fb      	ldr	r3, [r7, #12]
 81088e2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 81088e6:	2b00      	cmp	r3, #0
 81088e8:	d00a      	beq.n	8108900 <HAL_CEC_IRQHandler+0x30>
  {
    hcec->ErrorCode = HAL_CEC_ERROR_ARBLST;
 81088ea:	687b      	ldr	r3, [r7, #4]
 81088ec:	2280      	movs	r2, #128	; 0x80
 81088ee:	641a      	str	r2, [r3, #64]	; 0x40
    __HAL_CEC_CLEAR_FLAG(hcec, CEC_FLAG_ARBLST);
 81088f0:	687b      	ldr	r3, [r7, #4]
 81088f2:	681b      	ldr	r3, [r3, #0]
 81088f4:	691a      	ldr	r2, [r3, #16]
 81088f6:	687b      	ldr	r3, [r7, #4]
 81088f8:	681b      	ldr	r3, [r3, #0]
 81088fa:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 81088fe:	611a      	str	r2, [r3, #16]
  }

  /* ----------------------------Rx Management----------------------------------*/
  /* CEC RX byte received interrupt  ---------------------------------------------------*/
  if (HAL_IS_BIT_SET(itflag, CEC_FLAG_RXBR))
 8108900:	68fb      	ldr	r3, [r7, #12]
 8108902:	f003 0301 	and.w	r3, r3, #1
 8108906:	2b00      	cmp	r3, #0
 8108908:	d01c      	beq.n	8108944 <HAL_CEC_IRQHandler+0x74>
  {
    /* reception is starting */
    hcec->RxState = HAL_CEC_STATE_BUSY_RX;
 810890a:	687b      	ldr	r3, [r7, #4]
 810890c:	2222      	movs	r2, #34	; 0x22
 810890e:	63da      	str	r2, [r3, #60]	; 0x3c
    hcec->RxXferSize++;
 8108910:	687b      	ldr	r3, [r7, #4]
 8108912:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8108914:	3301      	adds	r3, #1
 8108916:	b29a      	uxth	r2, r3
 8108918:	687b      	ldr	r3, [r7, #4]
 810891a:	865a      	strh	r2, [r3, #50]	; 0x32
    /* read received byte */
    *hcec->Init.RxBuffer = (uint8_t) hcec->Instance->RXDR;
 810891c:	687b      	ldr	r3, [r7, #4]
 810891e:	681b      	ldr	r3, [r3, #0]
 8108920:	68da      	ldr	r2, [r3, #12]
 8108922:	687b      	ldr	r3, [r7, #4]
 8108924:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8108926:	b2d2      	uxtb	r2, r2
 8108928:	701a      	strb	r2, [r3, #0]
    hcec->Init.RxBuffer++;
 810892a:	687b      	ldr	r3, [r7, #4]
 810892c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 810892e:	1c5a      	adds	r2, r3, #1
 8108930:	687b      	ldr	r3, [r7, #4]
 8108932:	629a      	str	r2, [r3, #40]	; 0x28
    __HAL_CEC_CLEAR_FLAG(hcec, CEC_FLAG_RXBR);
 8108934:	687b      	ldr	r3, [r7, #4]
 8108936:	681b      	ldr	r3, [r3, #0]
 8108938:	691a      	ldr	r2, [r3, #16]
 810893a:	687b      	ldr	r3, [r7, #4]
 810893c:	681b      	ldr	r3, [r3, #0]
 810893e:	f042 0201 	orr.w	r2, r2, #1
 8108942:	611a      	str	r2, [r3, #16]
  }

  /* CEC RX end received interrupt  ---------------------------------------------------*/
  if (HAL_IS_BIT_SET(itflag, CEC_FLAG_RXEND))
 8108944:	68fb      	ldr	r3, [r7, #12]
 8108946:	f003 0302 	and.w	r3, r3, #2
 810894a:	2b00      	cmp	r3, #0
 810894c:	d01e      	beq.n	810898c <HAL_CEC_IRQHandler+0xbc>
  {
    /* clear IT */
    __HAL_CEC_CLEAR_FLAG(hcec, CEC_FLAG_RXEND);
 810894e:	687b      	ldr	r3, [r7, #4]
 8108950:	681b      	ldr	r3, [r3, #0]
 8108952:	691a      	ldr	r2, [r3, #16]
 8108954:	687b      	ldr	r3, [r7, #4]
 8108956:	681b      	ldr	r3, [r3, #0]
 8108958:	f042 0202 	orr.w	r2, r2, #2
 810895c:	611a      	str	r2, [r3, #16]

    /* Rx process is completed, restore hcec->RxState to Ready */
    hcec->RxState = HAL_CEC_STATE_READY;
 810895e:	687b      	ldr	r3, [r7, #4]
 8108960:	2220      	movs	r2, #32
 8108962:	63da      	str	r2, [r3, #60]	; 0x3c
    hcec->ErrorCode = HAL_CEC_ERROR_NONE;
 8108964:	687b      	ldr	r3, [r7, #4]
 8108966:	2200      	movs	r2, #0
 8108968:	641a      	str	r2, [r3, #64]	; 0x40
    hcec->Init.RxBuffer -= hcec->RxXferSize;
 810896a:	687b      	ldr	r3, [r7, #4]
 810896c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 810896e:	687b      	ldr	r3, [r7, #4]
 8108970:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8108972:	425b      	negs	r3, r3
 8108974:	441a      	add	r2, r3
 8108976:	687b      	ldr	r3, [r7, #4]
 8108978:	629a      	str	r2, [r3, #40]	; 0x28
#if (USE_HAL_CEC_REGISTER_CALLBACKS == 1U)
    hcec->RxCpltCallback(hcec, hcec->RxXferSize);
#else
    HAL_CEC_RxCpltCallback(hcec, hcec->RxXferSize);
 810897a:	687b      	ldr	r3, [r7, #4]
 810897c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 810897e:	4619      	mov	r1, r3
 8108980:	6878      	ldr	r0, [r7, #4]
 8108982:	f000 f88c 	bl	8108a9e <HAL_CEC_RxCpltCallback>
#endif /* USE_HAL_CEC_REGISTER_CALLBACKS */
    hcec->RxXferSize = 0U;
 8108986:	687b      	ldr	r3, [r7, #4]
 8108988:	2200      	movs	r2, #0
 810898a:	865a      	strh	r2, [r3, #50]	; 0x32
  }

  /* ----------------------------Tx Management----------------------------------*/
  /* CEC TX byte request interrupt ------------------------------------------------*/
  if (HAL_IS_BIT_SET(itflag, CEC_FLAG_TXBR))
 810898c:	68fb      	ldr	r3, [r7, #12]
 810898e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8108992:	2b00      	cmp	r3, #0
 8108994:	d024      	beq.n	81089e0 <HAL_CEC_IRQHandler+0x110>
  {
    --hcec->TxXferCount;
 8108996:	687b      	ldr	r3, [r7, #4]
 8108998:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
 810899a:	3b01      	subs	r3, #1
 810899c:	b29a      	uxth	r2, r3
 810899e:	687b      	ldr	r3, [r7, #4]
 81089a0:	861a      	strh	r2, [r3, #48]	; 0x30
    if (hcec->TxXferCount == 0U)
 81089a2:	687b      	ldr	r3, [r7, #4]
 81089a4:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
 81089a6:	2b00      	cmp	r3, #0
 81089a8:	d107      	bne.n	81089ba <HAL_CEC_IRQHandler+0xea>
    {
      /* if this is the last byte transmission, set TX End of Message (TXEOM) bit */
      __HAL_CEC_LAST_BYTE_TX_SET(hcec);
 81089aa:	687b      	ldr	r3, [r7, #4]
 81089ac:	681b      	ldr	r3, [r3, #0]
 81089ae:	681a      	ldr	r2, [r3, #0]
 81089b0:	687b      	ldr	r3, [r7, #4]
 81089b2:	681b      	ldr	r3, [r3, #0]
 81089b4:	f042 0204 	orr.w	r2, r2, #4
 81089b8:	601a      	str	r2, [r3, #0]
    }
    /* In all cases transmit the byte */
    hcec->Instance->TXDR = (uint8_t)*hcec->pTxBuffPtr;
 81089ba:	687b      	ldr	r3, [r7, #4]
 81089bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 81089be:	781a      	ldrb	r2, [r3, #0]
 81089c0:	687b      	ldr	r3, [r7, #4]
 81089c2:	681b      	ldr	r3, [r3, #0]
 81089c4:	609a      	str	r2, [r3, #8]
    hcec->pTxBuffPtr++;
 81089c6:	687b      	ldr	r3, [r7, #4]
 81089c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 81089ca:	1c5a      	adds	r2, r3, #1
 81089cc:	687b      	ldr	r3, [r7, #4]
 81089ce:	62da      	str	r2, [r3, #44]	; 0x2c
    /* clear Tx-Byte request flag */
    __HAL_CEC_CLEAR_FLAG(hcec, CEC_FLAG_TXBR);
 81089d0:	687b      	ldr	r3, [r7, #4]
 81089d2:	681b      	ldr	r3, [r3, #0]
 81089d4:	691a      	ldr	r2, [r3, #16]
 81089d6:	687b      	ldr	r3, [r7, #4]
 81089d8:	681b      	ldr	r3, [r3, #0]
 81089da:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 81089de:	611a      	str	r2, [r3, #16]
  }

  /* CEC TX end interrupt ------------------------------------------------*/
  if (HAL_IS_BIT_SET(itflag, CEC_FLAG_TXEND))
 81089e0:	68fb      	ldr	r3, [r7, #12]
 81089e2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 81089e6:	2b00      	cmp	r3, #0
 81089e8:	d014      	beq.n	8108a14 <HAL_CEC_IRQHandler+0x144>
  {
    __HAL_CEC_CLEAR_FLAG(hcec, CEC_FLAG_TXEND);
 81089ea:	687b      	ldr	r3, [r7, #4]
 81089ec:	681b      	ldr	r3, [r3, #0]
 81089ee:	691a      	ldr	r2, [r3, #16]
 81089f0:	687b      	ldr	r3, [r7, #4]
 81089f2:	681b      	ldr	r3, [r3, #0]
 81089f4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 81089f8:	611a      	str	r2, [r3, #16]

    /* Tx process is ended, restore hcec->gState to Ready */
    hcec->gState = HAL_CEC_STATE_READY;
 81089fa:	687b      	ldr	r3, [r7, #4]
 81089fc:	2220      	movs	r2, #32
 81089fe:	639a      	str	r2, [r3, #56]	; 0x38
    /* Call the Process Unlocked before calling the Tx call back API to give the possibility to
    start again the Transmission under the Tx call back API */
    __HAL_UNLOCK(hcec);
 8108a00:	687b      	ldr	r3, [r7, #4]
 8108a02:	2200      	movs	r2, #0
 8108a04:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hcec->ErrorCode = HAL_CEC_ERROR_NONE;
 8108a08:	687b      	ldr	r3, [r7, #4]
 8108a0a:	2200      	movs	r2, #0
 8108a0c:	641a      	str	r2, [r3, #64]	; 0x40
#if (USE_HAL_CEC_REGISTER_CALLBACKS == 1U)
    hcec->TxCpltCallback(hcec);
#else
    HAL_CEC_TxCpltCallback(hcec);
 8108a0e:	6878      	ldr	r0, [r7, #4]
 8108a10:	f000 f83b 	bl	8108a8a <HAL_CEC_TxCpltCallback>
#endif /* USE_HAL_CEC_REGISTER_CALLBACKS */
  }

  /* ----------------------------Rx/Tx Error Management----------------------------------*/
  if ((itflag & (CEC_ISR_RXOVR | CEC_ISR_BRE | CEC_ISR_SBPE | CEC_ISR_LBPE | CEC_ISR_RXACKE | CEC_ISR_TXUDR |
 8108a14:	68fa      	ldr	r2, [r7, #12]
 8108a16:	f641 437c 	movw	r3, #7292	; 0x1c7c
 8108a1a:	4013      	ands	r3, r2
 8108a1c:	2b00      	cmp	r3, #0
 8108a1e:	d030      	beq.n	8108a82 <HAL_CEC_IRQHandler+0x1b2>
              CEC_ISR_TXERR | CEC_ISR_TXACKE)) != 0U)
  {
    hcec->ErrorCode = itflag;
 8108a20:	687b      	ldr	r3, [r7, #4]
 8108a22:	68fa      	ldr	r2, [r7, #12]
 8108a24:	641a      	str	r2, [r3, #64]	; 0x40
    __HAL_CEC_CLEAR_FLAG(hcec, HAL_CEC_ERROR_RXOVR | HAL_CEC_ERROR_BRE | CEC_FLAG_LBPE | CEC_FLAG_SBPE |
 8108a26:	687b      	ldr	r3, [r7, #4]
 8108a28:	681b      	ldr	r3, [r3, #0]
 8108a2a:	691b      	ldr	r3, [r3, #16]
 8108a2c:	687a      	ldr	r2, [r7, #4]
 8108a2e:	6812      	ldr	r2, [r2, #0]
 8108a30:	f443 53e3 	orr.w	r3, r3, #7264	; 0x1c60
 8108a34:	f043 031c 	orr.w	r3, r3, #28
 8108a38:	6113      	str	r3, [r2, #16]
                         HAL_CEC_ERROR_RXACKE | HAL_CEC_ERROR_TXUDR | HAL_CEC_ERROR_TXERR | HAL_CEC_ERROR_TXACKE);


    if ((itflag & (CEC_ISR_RXOVR | CEC_ISR_BRE | CEC_ISR_SBPE | CEC_ISR_LBPE | CEC_ISR_RXACKE)) != 0U)
 8108a3a:	68fb      	ldr	r3, [r7, #12]
 8108a3c:	f003 037c 	and.w	r3, r3, #124	; 0x7c
 8108a40:	2b00      	cmp	r3, #0
 8108a42:	d00e      	beq.n	8108a62 <HAL_CEC_IRQHandler+0x192>
    {
      hcec->Init.RxBuffer -= hcec->RxXferSize;
 8108a44:	687b      	ldr	r3, [r7, #4]
 8108a46:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8108a48:	687b      	ldr	r3, [r7, #4]
 8108a4a:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8108a4c:	425b      	negs	r3, r3
 8108a4e:	441a      	add	r2, r3
 8108a50:	687b      	ldr	r3, [r7, #4]
 8108a52:	629a      	str	r2, [r3, #40]	; 0x28
      hcec->RxXferSize = 0U;
 8108a54:	687b      	ldr	r3, [r7, #4]
 8108a56:	2200      	movs	r2, #0
 8108a58:	865a      	strh	r2, [r3, #50]	; 0x32
      hcec->RxState = HAL_CEC_STATE_READY;
 8108a5a:	687b      	ldr	r3, [r7, #4]
 8108a5c:	2220      	movs	r2, #32
 8108a5e:	63da      	str	r2, [r3, #60]	; 0x3c
 8108a60:	e00c      	b.n	8108a7c <HAL_CEC_IRQHandler+0x1ac>
    }
    else if (((itflag & CEC_ISR_ARBLST) == 0U) && ((itflag & (CEC_ISR_TXUDR | CEC_ISR_TXERR | CEC_ISR_TXACKE)) != 0U))
 8108a62:	68fb      	ldr	r3, [r7, #12]
 8108a64:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8108a68:	2b00      	cmp	r3, #0
 8108a6a:	d107      	bne.n	8108a7c <HAL_CEC_IRQHandler+0x1ac>
 8108a6c:	68fb      	ldr	r3, [r7, #12]
 8108a6e:	f403 53e0 	and.w	r3, r3, #7168	; 0x1c00
 8108a72:	2b00      	cmp	r3, #0
 8108a74:	d002      	beq.n	8108a7c <HAL_CEC_IRQHandler+0x1ac>
    {
      /* Set the CEC state ready to be able to start again the process */
      hcec->gState = HAL_CEC_STATE_READY;
 8108a76:	687b      	ldr	r3, [r7, #4]
 8108a78:	2220      	movs	r2, #32
 8108a7a:	639a      	str	r2, [r3, #56]	; 0x38
    }
#if (USE_HAL_CEC_REGISTER_CALLBACKS == 1U)
    hcec->ErrorCallback(hcec);
#else
    /* Error  Call Back */
    HAL_CEC_ErrorCallback(hcec);
 8108a7c:	6878      	ldr	r0, [r7, #4]
 8108a7e:	f000 f819 	bl	8108ab4 <HAL_CEC_ErrorCallback>
  }
  else
  {
    /* Nothing todo*/
  }
}
 8108a82:	bf00      	nop
 8108a84:	3710      	adds	r7, #16
 8108a86:	46bd      	mov	sp, r7
 8108a88:	bd80      	pop	{r7, pc}

08108a8a <HAL_CEC_TxCpltCallback>:
  * @brief Tx Transfer completed callback
  * @param hcec CEC handle
  * @retval None
  */
__weak void HAL_CEC_TxCpltCallback(CEC_HandleTypeDef *hcec)
{
 8108a8a:	b480      	push	{r7}
 8108a8c:	b083      	sub	sp, #12
 8108a8e:	af00      	add	r7, sp, #0
 8108a90:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hcec);
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_CEC_TxCpltCallback can be implemented in the user file
   */
}
 8108a92:	bf00      	nop
 8108a94:	370c      	adds	r7, #12
 8108a96:	46bd      	mov	sp, r7
 8108a98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8108a9c:	4770      	bx	lr

08108a9e <HAL_CEC_RxCpltCallback>:
  * @param hcec CEC handle
  * @param RxFrameSize Size of frame
  * @retval None
  */
__weak void HAL_CEC_RxCpltCallback(CEC_HandleTypeDef *hcec, uint32_t RxFrameSize)
{
 8108a9e:	b480      	push	{r7}
 8108aa0:	b083      	sub	sp, #12
 8108aa2:	af00      	add	r7, sp, #0
 8108aa4:	6078      	str	r0, [r7, #4]
 8108aa6:	6039      	str	r1, [r7, #0]
  UNUSED(hcec);
  UNUSED(RxFrameSize);
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_CEC_RxCpltCallback can be implemented in the user file
   */
}
 8108aa8:	bf00      	nop
 8108aaa:	370c      	adds	r7, #12
 8108aac:	46bd      	mov	sp, r7
 8108aae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8108ab2:	4770      	bx	lr

08108ab4 <HAL_CEC_ErrorCallback>:
  * @brief CEC error callbacks
  * @param hcec CEC handle
  * @retval None
  */
__weak void HAL_CEC_ErrorCallback(CEC_HandleTypeDef *hcec)
{
 8108ab4:	b480      	push	{r7}
 8108ab6:	b083      	sub	sp, #12
 8108ab8:	af00      	add	r7, sp, #0
 8108aba:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hcec);
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_CEC_ErrorCallback can be implemented in the user file
   */
}
 8108abc:	bf00      	nop
 8108abe:	370c      	adds	r7, #12
 8108ac0:	46bd      	mov	sp, r7
 8108ac2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8108ac6:	4770      	bx	lr

08108ac8 <__NVIC_SetPriorityGrouping>:
{
 8108ac8:	b480      	push	{r7}
 8108aca:	b085      	sub	sp, #20
 8108acc:	af00      	add	r7, sp, #0
 8108ace:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8108ad0:	687b      	ldr	r3, [r7, #4]
 8108ad2:	f003 0307 	and.w	r3, r3, #7
 8108ad6:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8108ad8:	4b0c      	ldr	r3, [pc, #48]	; (8108b0c <__NVIC_SetPriorityGrouping+0x44>)
 8108ada:	68db      	ldr	r3, [r3, #12]
 8108adc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8108ade:	68ba      	ldr	r2, [r7, #8]
 8108ae0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8108ae4:	4013      	ands	r3, r2
 8108ae6:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8108ae8:	68fb      	ldr	r3, [r7, #12]
 8108aea:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8108aec:	68bb      	ldr	r3, [r7, #8]
 8108aee:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8108af0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8108af4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8108af8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8108afa:	4a04      	ldr	r2, [pc, #16]	; (8108b0c <__NVIC_SetPriorityGrouping+0x44>)
 8108afc:	68bb      	ldr	r3, [r7, #8]
 8108afe:	60d3      	str	r3, [r2, #12]
}
 8108b00:	bf00      	nop
 8108b02:	3714      	adds	r7, #20
 8108b04:	46bd      	mov	sp, r7
 8108b06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8108b0a:	4770      	bx	lr
 8108b0c:	e000ed00 	.word	0xe000ed00

08108b10 <__NVIC_GetPriorityGrouping>:
{
 8108b10:	b480      	push	{r7}
 8108b12:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8108b14:	4b04      	ldr	r3, [pc, #16]	; (8108b28 <__NVIC_GetPriorityGrouping+0x18>)
 8108b16:	68db      	ldr	r3, [r3, #12]
 8108b18:	0a1b      	lsrs	r3, r3, #8
 8108b1a:	f003 0307 	and.w	r3, r3, #7
}
 8108b1e:	4618      	mov	r0, r3
 8108b20:	46bd      	mov	sp, r7
 8108b22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8108b26:	4770      	bx	lr
 8108b28:	e000ed00 	.word	0xe000ed00

08108b2c <__NVIC_EnableIRQ>:
{
 8108b2c:	b480      	push	{r7}
 8108b2e:	b083      	sub	sp, #12
 8108b30:	af00      	add	r7, sp, #0
 8108b32:	4603      	mov	r3, r0
 8108b34:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8108b36:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8108b3a:	2b00      	cmp	r3, #0
 8108b3c:	db0b      	blt.n	8108b56 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8108b3e:	88fb      	ldrh	r3, [r7, #6]
 8108b40:	f003 021f 	and.w	r2, r3, #31
 8108b44:	4907      	ldr	r1, [pc, #28]	; (8108b64 <__NVIC_EnableIRQ+0x38>)
 8108b46:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8108b4a:	095b      	lsrs	r3, r3, #5
 8108b4c:	2001      	movs	r0, #1
 8108b4e:	fa00 f202 	lsl.w	r2, r0, r2
 8108b52:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8108b56:	bf00      	nop
 8108b58:	370c      	adds	r7, #12
 8108b5a:	46bd      	mov	sp, r7
 8108b5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8108b60:	4770      	bx	lr
 8108b62:	bf00      	nop
 8108b64:	e000e100 	.word	0xe000e100

08108b68 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8108b68:	b480      	push	{r7}
 8108b6a:	b083      	sub	sp, #12
 8108b6c:	af00      	add	r7, sp, #0
 8108b6e:	4603      	mov	r3, r0
 8108b70:	6039      	str	r1, [r7, #0]
 8108b72:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8108b74:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8108b78:	2b00      	cmp	r3, #0
 8108b7a:	db0a      	blt.n	8108b92 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8108b7c:	683b      	ldr	r3, [r7, #0]
 8108b7e:	b2da      	uxtb	r2, r3
 8108b80:	490c      	ldr	r1, [pc, #48]	; (8108bb4 <__NVIC_SetPriority+0x4c>)
 8108b82:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8108b86:	0112      	lsls	r2, r2, #4
 8108b88:	b2d2      	uxtb	r2, r2
 8108b8a:	440b      	add	r3, r1
 8108b8c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8108b90:	e00a      	b.n	8108ba8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8108b92:	683b      	ldr	r3, [r7, #0]
 8108b94:	b2da      	uxtb	r2, r3
 8108b96:	4908      	ldr	r1, [pc, #32]	; (8108bb8 <__NVIC_SetPriority+0x50>)
 8108b98:	88fb      	ldrh	r3, [r7, #6]
 8108b9a:	f003 030f 	and.w	r3, r3, #15
 8108b9e:	3b04      	subs	r3, #4
 8108ba0:	0112      	lsls	r2, r2, #4
 8108ba2:	b2d2      	uxtb	r2, r2
 8108ba4:	440b      	add	r3, r1
 8108ba6:	761a      	strb	r2, [r3, #24]
}
 8108ba8:	bf00      	nop
 8108baa:	370c      	adds	r7, #12
 8108bac:	46bd      	mov	sp, r7
 8108bae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8108bb2:	4770      	bx	lr
 8108bb4:	e000e100 	.word	0xe000e100
 8108bb8:	e000ed00 	.word	0xe000ed00

08108bbc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8108bbc:	b480      	push	{r7}
 8108bbe:	b089      	sub	sp, #36	; 0x24
 8108bc0:	af00      	add	r7, sp, #0
 8108bc2:	60f8      	str	r0, [r7, #12]
 8108bc4:	60b9      	str	r1, [r7, #8]
 8108bc6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8108bc8:	68fb      	ldr	r3, [r7, #12]
 8108bca:	f003 0307 	and.w	r3, r3, #7
 8108bce:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8108bd0:	69fb      	ldr	r3, [r7, #28]
 8108bd2:	f1c3 0307 	rsb	r3, r3, #7
 8108bd6:	2b04      	cmp	r3, #4
 8108bd8:	bf28      	it	cs
 8108bda:	2304      	movcs	r3, #4
 8108bdc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8108bde:	69fb      	ldr	r3, [r7, #28]
 8108be0:	3304      	adds	r3, #4
 8108be2:	2b06      	cmp	r3, #6
 8108be4:	d902      	bls.n	8108bec <NVIC_EncodePriority+0x30>
 8108be6:	69fb      	ldr	r3, [r7, #28]
 8108be8:	3b03      	subs	r3, #3
 8108bea:	e000      	b.n	8108bee <NVIC_EncodePriority+0x32>
 8108bec:	2300      	movs	r3, #0
 8108bee:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8108bf0:	f04f 32ff 	mov.w	r2, #4294967295
 8108bf4:	69bb      	ldr	r3, [r7, #24]
 8108bf6:	fa02 f303 	lsl.w	r3, r2, r3
 8108bfa:	43da      	mvns	r2, r3
 8108bfc:	68bb      	ldr	r3, [r7, #8]
 8108bfe:	401a      	ands	r2, r3
 8108c00:	697b      	ldr	r3, [r7, #20]
 8108c02:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8108c04:	f04f 31ff 	mov.w	r1, #4294967295
 8108c08:	697b      	ldr	r3, [r7, #20]
 8108c0a:	fa01 f303 	lsl.w	r3, r1, r3
 8108c0e:	43d9      	mvns	r1, r3
 8108c10:	687b      	ldr	r3, [r7, #4]
 8108c12:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8108c14:	4313      	orrs	r3, r2
         );
}
 8108c16:	4618      	mov	r0, r3
 8108c18:	3724      	adds	r7, #36	; 0x24
 8108c1a:	46bd      	mov	sp, r7
 8108c1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8108c20:	4770      	bx	lr
	...

08108c24 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8108c24:	b580      	push	{r7, lr}
 8108c26:	b082      	sub	sp, #8
 8108c28:	af00      	add	r7, sp, #0
 8108c2a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8108c2c:	687b      	ldr	r3, [r7, #4]
 8108c2e:	3b01      	subs	r3, #1
 8108c30:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8108c34:	d301      	bcc.n	8108c3a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8108c36:	2301      	movs	r3, #1
 8108c38:	e00f      	b.n	8108c5a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8108c3a:	4a0a      	ldr	r2, [pc, #40]	; (8108c64 <SysTick_Config+0x40>)
 8108c3c:	687b      	ldr	r3, [r7, #4]
 8108c3e:	3b01      	subs	r3, #1
 8108c40:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8108c42:	210f      	movs	r1, #15
 8108c44:	f04f 30ff 	mov.w	r0, #4294967295
 8108c48:	f7ff ff8e 	bl	8108b68 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8108c4c:	4b05      	ldr	r3, [pc, #20]	; (8108c64 <SysTick_Config+0x40>)
 8108c4e:	2200      	movs	r2, #0
 8108c50:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8108c52:	4b04      	ldr	r3, [pc, #16]	; (8108c64 <SysTick_Config+0x40>)
 8108c54:	2207      	movs	r2, #7
 8108c56:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8108c58:	2300      	movs	r3, #0
}
 8108c5a:	4618      	mov	r0, r3
 8108c5c:	3708      	adds	r7, #8
 8108c5e:	46bd      	mov	sp, r7
 8108c60:	bd80      	pop	{r7, pc}
 8108c62:	bf00      	nop
 8108c64:	e000e010 	.word	0xe000e010

08108c68 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8108c68:	b580      	push	{r7, lr}
 8108c6a:	b082      	sub	sp, #8
 8108c6c:	af00      	add	r7, sp, #0
 8108c6e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8108c70:	6878      	ldr	r0, [r7, #4]
 8108c72:	f7ff ff29 	bl	8108ac8 <__NVIC_SetPriorityGrouping>
}
 8108c76:	bf00      	nop
 8108c78:	3708      	adds	r7, #8
 8108c7a:	46bd      	mov	sp, r7
 8108c7c:	bd80      	pop	{r7, pc}

08108c7e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8108c7e:	b580      	push	{r7, lr}
 8108c80:	b086      	sub	sp, #24
 8108c82:	af00      	add	r7, sp, #0
 8108c84:	4603      	mov	r3, r0
 8108c86:	60b9      	str	r1, [r7, #8]
 8108c88:	607a      	str	r2, [r7, #4]
 8108c8a:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8108c8c:	f7ff ff40 	bl	8108b10 <__NVIC_GetPriorityGrouping>
 8108c90:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8108c92:	687a      	ldr	r2, [r7, #4]
 8108c94:	68b9      	ldr	r1, [r7, #8]
 8108c96:	6978      	ldr	r0, [r7, #20]
 8108c98:	f7ff ff90 	bl	8108bbc <NVIC_EncodePriority>
 8108c9c:	4602      	mov	r2, r0
 8108c9e:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8108ca2:	4611      	mov	r1, r2
 8108ca4:	4618      	mov	r0, r3
 8108ca6:	f7ff ff5f 	bl	8108b68 <__NVIC_SetPriority>
}
 8108caa:	bf00      	nop
 8108cac:	3718      	adds	r7, #24
 8108cae:	46bd      	mov	sp, r7
 8108cb0:	bd80      	pop	{r7, pc}

08108cb2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8108cb2:	b580      	push	{r7, lr}
 8108cb4:	b082      	sub	sp, #8
 8108cb6:	af00      	add	r7, sp, #0
 8108cb8:	4603      	mov	r3, r0
 8108cba:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8108cbc:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8108cc0:	4618      	mov	r0, r3
 8108cc2:	f7ff ff33 	bl	8108b2c <__NVIC_EnableIRQ>
}
 8108cc6:	bf00      	nop
 8108cc8:	3708      	adds	r7, #8
 8108cca:	46bd      	mov	sp, r7
 8108ccc:	bd80      	pop	{r7, pc}

08108cce <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8108cce:	b580      	push	{r7, lr}
 8108cd0:	b082      	sub	sp, #8
 8108cd2:	af00      	add	r7, sp, #0
 8108cd4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8108cd6:	6878      	ldr	r0, [r7, #4]
 8108cd8:	f7ff ffa4 	bl	8108c24 <SysTick_Config>
 8108cdc:	4603      	mov	r3, r0
}
 8108cde:	4618      	mov	r0, r3
 8108ce0:	3708      	adds	r7, #8
 8108ce2:	46bd      	mov	sp, r7
 8108ce4:	bd80      	pop	{r7, pc}
	...

08108ce8 <HAL_GetCurrentCPUID>:
/**
  * @brief  Returns the current CPU ID.
  * @retval CPU identifier
  */
uint32_t HAL_GetCurrentCPUID(void)
{
 8108ce8:	b480      	push	{r7}
 8108cea:	af00      	add	r7, sp, #0
  if (((SCB->CPUID & 0x000000F0U) >> 4 )== 0x7U)
 8108cec:	4b07      	ldr	r3, [pc, #28]	; (8108d0c <HAL_GetCurrentCPUID+0x24>)
 8108cee:	681b      	ldr	r3, [r3, #0]
 8108cf0:	091b      	lsrs	r3, r3, #4
 8108cf2:	f003 030f 	and.w	r3, r3, #15
 8108cf6:	2b07      	cmp	r3, #7
 8108cf8:	d101      	bne.n	8108cfe <HAL_GetCurrentCPUID+0x16>
  {
    return  CM7_CPUID;
 8108cfa:	2303      	movs	r3, #3
 8108cfc:	e000      	b.n	8108d00 <HAL_GetCurrentCPUID+0x18>
  }
  else
  {
    return CM4_CPUID;
 8108cfe:	2301      	movs	r3, #1
  }
}
 8108d00:	4618      	mov	r0, r3
 8108d02:	46bd      	mov	sp, r7
 8108d04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8108d08:	4770      	bx	lr
 8108d0a:	bf00      	nop
 8108d0c:	e000ed00 	.word	0xe000ed00

08108d10 <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 8108d10:	b580      	push	{r7, lr}
 8108d12:	b084      	sub	sp, #16
 8108d14:	af00      	add	r7, sp, #0
 8108d16:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (heth == NULL)
 8108d18:	687b      	ldr	r3, [r7, #4]
 8108d1a:	2b00      	cmp	r3, #0
 8108d1c:	d101      	bne.n	8108d22 <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 8108d1e:	2301      	movs	r3, #1
 8108d20:	e0d1      	b.n	8108ec6 <HAL_ETH_Init+0x1b6>
  }
  if (heth->gState == HAL_ETH_STATE_RESET)
 8108d22:	687b      	ldr	r3, [r7, #4]
 8108d24:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8108d28:	2b00      	cmp	r3, #0
 8108d2a:	d106      	bne.n	8108d3a <HAL_ETH_Init+0x2a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 8108d2c:	687b      	ldr	r3, [r7, #4]
 8108d2e:	2223      	movs	r2, #35	; 0x23
 8108d30:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    heth->MspInitCallback(heth);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 8108d34:	6878      	ldr	r0, [r7, #4]
 8108d36:	f7f8 fbe9 	bl	810150c <HAL_ETH_MspInit>

#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */
  }

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8108d3a:	4b65      	ldr	r3, [pc, #404]	; (8108ed0 <HAL_ETH_Init+0x1c0>)
 8108d3c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8108d40:	4a63      	ldr	r2, [pc, #396]	; (8108ed0 <HAL_ETH_Init+0x1c0>)
 8108d42:	f043 0302 	orr.w	r3, r3, #2
 8108d46:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8108d4a:	4b61      	ldr	r3, [pc, #388]	; (8108ed0 <HAL_ETH_Init+0x1c0>)
 8108d4c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8108d50:	f003 0302 	and.w	r3, r3, #2
 8108d54:	60bb      	str	r3, [r7, #8]
 8108d56:	68bb      	ldr	r3, [r7, #8]

  if (heth->Init.MediaInterface == HAL_ETH_MII_MODE)
 8108d58:	687b      	ldr	r3, [r7, #4]
 8108d5a:	7a1b      	ldrb	r3, [r3, #8]
 8108d5c:	2b00      	cmp	r3, #0
 8108d5e:	d103      	bne.n	8108d68 <HAL_ETH_Init+0x58>
  {
    HAL_SYSCFG_ETHInterfaceSelect(SYSCFG_ETH_MII);
 8108d60:	2000      	movs	r0, #0
 8108d62:	f7fe fc97 	bl	8107694 <HAL_SYSCFG_ETHInterfaceSelect>
 8108d66:	e003      	b.n	8108d70 <HAL_ETH_Init+0x60>
  }
  else
  {
    HAL_SYSCFG_ETHInterfaceSelect(SYSCFG_ETH_RMII);
 8108d68:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
 8108d6c:	f7fe fc92 	bl	8107694 <HAL_SYSCFG_ETHInterfaceSelect>
  }

  /* Dummy read to sync with ETH */
  (void)SYSCFG->PMCR;
 8108d70:	4b58      	ldr	r3, [pc, #352]	; (8108ed4 <HAL_ETH_Init+0x1c4>)
 8108d72:	685b      	ldr	r3, [r3, #4]

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR);
 8108d74:	687b      	ldr	r3, [r7, #4]
 8108d76:	681b      	ldr	r3, [r3, #0]
 8108d78:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8108d7c:	681b      	ldr	r3, [r3, #0]
 8108d7e:	687a      	ldr	r2, [r7, #4]
 8108d80:	6812      	ldr	r2, [r2, #0]
 8108d82:	f043 0301 	orr.w	r3, r3, #1
 8108d86:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8108d8a:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8108d8c:	f7fe fc46 	bl	810761c <HAL_GetTick>
 8108d90:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR) > 0U)
 8108d92:	e011      	b.n	8108db8 <HAL_ETH_Init+0xa8>
  {
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 8108d94:	f7fe fc42 	bl	810761c <HAL_GetTick>
 8108d98:	4602      	mov	r2, r0
 8108d9a:	68fb      	ldr	r3, [r7, #12]
 8108d9c:	1ad3      	subs	r3, r2, r3
 8108d9e:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8108da2:	d909      	bls.n	8108db8 <HAL_ETH_Init+0xa8>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 8108da4:	687b      	ldr	r3, [r7, #4]
 8108da6:	2204      	movs	r2, #4
 8108da8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 8108dac:	687b      	ldr	r3, [r7, #4]
 8108dae:	22e0      	movs	r2, #224	; 0xe0
 8108db0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      /* Return Error */
      return HAL_ERROR;
 8108db4:	2301      	movs	r3, #1
 8108db6:	e086      	b.n	8108ec6 <HAL_ETH_Init+0x1b6>
  while (READ_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR) > 0U)
 8108db8:	687b      	ldr	r3, [r7, #4]
 8108dba:	681b      	ldr	r3, [r3, #0]
 8108dbc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8108dc0:	681b      	ldr	r3, [r3, #0]
 8108dc2:	f003 0301 	and.w	r3, r3, #1
 8108dc6:	2b00      	cmp	r3, #0
 8108dc8:	d1e4      	bne.n	8108d94 <HAL_ETH_Init+0x84>
    }
  }

  /*------------------ MDIO CSR Clock Range Configuration --------------------*/
  HAL_ETH_SetMDIOClockRange(heth);
 8108dca:	6878      	ldr	r0, [r7, #4]
 8108dcc:	f000 f886 	bl	8108edc <HAL_ETH_SetMDIOClockRange>

  /*------------------ MAC LPI 1US Tic Counter Configuration --------------------*/
  WRITE_REG(heth->Instance->MAC1USTCR, (((uint32_t)HAL_RCC_GetHCLKFreq() / ETH_MAC_US_TICK) - 1U));
 8108dd0:	f001 f998 	bl	810a104 <HAL_RCC_GetHCLKFreq>
 8108dd4:	4603      	mov	r3, r0
 8108dd6:	4a40      	ldr	r2, [pc, #256]	; (8108ed8 <HAL_ETH_Init+0x1c8>)
 8108dd8:	fba2 2303 	umull	r2, r3, r2, r3
 8108ddc:	0c9a      	lsrs	r2, r3, #18
 8108dde:	687b      	ldr	r3, [r7, #4]
 8108de0:	681b      	ldr	r3, [r3, #0]
 8108de2:	3a01      	subs	r2, #1
 8108de4:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc

  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 8108de8:	6878      	ldr	r0, [r7, #4]
 8108dea:	f000 fa71 	bl	81092d0 <ETH_MACDMAConfig>

  /* SET DSL to 64 bit */
  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_DSL, ETH_DMACCR_DSL_64BIT);
 8108dee:	687b      	ldr	r3, [r7, #4]
 8108df0:	681b      	ldr	r3, [r3, #0]
 8108df2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8108df6:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 8108dfa:	f423 13e0 	bic.w	r3, r3, #1835008	; 0x1c0000
 8108dfe:	687a      	ldr	r2, [r7, #4]
 8108e00:	6812      	ldr	r2, [r2, #0]
 8108e02:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8108e06:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8108e0a:	f8c2 3100 	str.w	r3, [r2, #256]	; 0x100

  /* Set Receive Buffers Length (must be a multiple of 4) */
  if ((heth->Init.RxBuffLen % 0x4U) != 0x0U)
 8108e0e:	687b      	ldr	r3, [r7, #4]
 8108e10:	695b      	ldr	r3, [r3, #20]
 8108e12:	f003 0303 	and.w	r3, r3, #3
 8108e16:	2b00      	cmp	r3, #0
 8108e18:	d009      	beq.n	8108e2e <HAL_ETH_Init+0x11e>
  {
    /* Set Error Code */
    heth->ErrorCode = HAL_ETH_ERROR_PARAM;
 8108e1a:	687b      	ldr	r3, [r7, #4]
 8108e1c:	2201      	movs	r2, #1
 8108e1e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    /* Set State as Error */
    heth->gState = HAL_ETH_STATE_ERROR;
 8108e22:	687b      	ldr	r3, [r7, #4]
 8108e24:	22e0      	movs	r2, #224	; 0xe0
 8108e26:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    /* Return Error */
    return HAL_ERROR;
 8108e2a:	2301      	movs	r3, #1
 8108e2c:	e04b      	b.n	8108ec6 <HAL_ETH_Init+0x1b6>
  }
  else
  {
    MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_RBSZ, ((heth->Init.RxBuffLen) << 1));
 8108e2e:	687b      	ldr	r3, [r7, #4]
 8108e30:	681b      	ldr	r3, [r3, #0]
 8108e32:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8108e36:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8108e3a:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8108e3e:	f023 037e 	bic.w	r3, r3, #126	; 0x7e
 8108e42:	687a      	ldr	r2, [r7, #4]
 8108e44:	6952      	ldr	r2, [r2, #20]
 8108e46:	0051      	lsls	r1, r2, #1
 8108e48:	687a      	ldr	r2, [r7, #4]
 8108e4a:	6812      	ldr	r2, [r2, #0]
 8108e4c:	430b      	orrs	r3, r1
 8108e4e:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8108e52:	f8c2 3108 	str.w	r3, [r2, #264]	; 0x108
  }

  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 8108e56:	6878      	ldr	r0, [r7, #4]
 8108e58:	f000 fad7 	bl	810940a <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 8108e5c:	6878      	ldr	r0, [r7, #4]
 8108e5e:	f000 fb1d 	bl	810949c <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  /* Set MAC addr bits 32 to 47 */
  heth->Instance->MACA0HR = (((uint32_t)(heth->Init.MACAddr[5]) << 8) | (uint32_t)heth->Init.MACAddr[4]);
 8108e62:	687b      	ldr	r3, [r7, #4]
 8108e64:	685b      	ldr	r3, [r3, #4]
 8108e66:	3305      	adds	r3, #5
 8108e68:	781b      	ldrb	r3, [r3, #0]
 8108e6a:	021a      	lsls	r2, r3, #8
 8108e6c:	687b      	ldr	r3, [r7, #4]
 8108e6e:	685b      	ldr	r3, [r3, #4]
 8108e70:	3304      	adds	r3, #4
 8108e72:	781b      	ldrb	r3, [r3, #0]
 8108e74:	4619      	mov	r1, r3
 8108e76:	687b      	ldr	r3, [r7, #4]
 8108e78:	681b      	ldr	r3, [r3, #0]
 8108e7a:	430a      	orrs	r2, r1
 8108e7c:	f8c3 2300 	str.w	r2, [r3, #768]	; 0x300
  /* Set MAC addr bits 0 to 31 */
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8108e80:	687b      	ldr	r3, [r7, #4]
 8108e82:	685b      	ldr	r3, [r3, #4]
 8108e84:	3303      	adds	r3, #3
 8108e86:	781b      	ldrb	r3, [r3, #0]
 8108e88:	061a      	lsls	r2, r3, #24
 8108e8a:	687b      	ldr	r3, [r7, #4]
 8108e8c:	685b      	ldr	r3, [r3, #4]
 8108e8e:	3302      	adds	r3, #2
 8108e90:	781b      	ldrb	r3, [r3, #0]
 8108e92:	041b      	lsls	r3, r3, #16
 8108e94:	431a      	orrs	r2, r3
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 8108e96:	687b      	ldr	r3, [r7, #4]
 8108e98:	685b      	ldr	r3, [r3, #4]
 8108e9a:	3301      	adds	r3, #1
 8108e9c:	781b      	ldrb	r3, [r3, #0]
 8108e9e:	021b      	lsls	r3, r3, #8
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8108ea0:	431a      	orrs	r2, r3
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 8108ea2:	687b      	ldr	r3, [r7, #4]
 8108ea4:	685b      	ldr	r3, [r3, #4]
 8108ea6:	781b      	ldrb	r3, [r3, #0]
 8108ea8:	4619      	mov	r1, r3
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8108eaa:	687b      	ldr	r3, [r7, #4]
 8108eac:	681b      	ldr	r3, [r3, #0]
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 8108eae:	430a      	orrs	r2, r1
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8108eb0:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 8108eb4:	687b      	ldr	r3, [r7, #4]
 8108eb6:	2200      	movs	r2, #0
 8108eb8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  heth->gState = HAL_ETH_STATE_READY;
 8108ebc:	687b      	ldr	r3, [r7, #4]
 8108ebe:	2210      	movs	r2, #16
 8108ec0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8108ec4:	2300      	movs	r3, #0
}
 8108ec6:	4618      	mov	r0, r3
 8108ec8:	3710      	adds	r7, #16
 8108eca:	46bd      	mov	sp, r7
 8108ecc:	bd80      	pop	{r7, pc}
 8108ece:	bf00      	nop
 8108ed0:	58024400 	.word	0x58024400
 8108ed4:	58000400 	.word	0x58000400
 8108ed8:	431bde83 	.word	0x431bde83

08108edc <HAL_ETH_SetMDIOClockRange>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
void HAL_ETH_SetMDIOClockRange(ETH_HandleTypeDef *heth)
{
 8108edc:	b580      	push	{r7, lr}
 8108ede:	b084      	sub	sp, #16
 8108ee0:	af00      	add	r7, sp, #0
 8108ee2:	6078      	str	r0, [r7, #4]
  uint32_t hclk;
  uint32_t tmpreg;

  /* Get the ETHERNET MACMDIOAR value */
  tmpreg = (heth->Instance)->MACMDIOAR;
 8108ee4:	687b      	ldr	r3, [r7, #4]
 8108ee6:	681b      	ldr	r3, [r3, #0]
 8108ee8:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8108eec:	60fb      	str	r3, [r7, #12]

  /* Clear CSR Clock Range bits */
  tmpreg &= ~ETH_MACMDIOAR_CR;
 8108eee:	68fb      	ldr	r3, [r7, #12]
 8108ef0:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8108ef4:	60fb      	str	r3, [r7, #12]

  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 8108ef6:	f001 f905 	bl	810a104 <HAL_RCC_GetHCLKFreq>
 8108efa:	60b8      	str	r0, [r7, #8]

  /* Set CR bits depending on hclk value */
  if ((hclk >= 20000000U) && (hclk < 35000000U))
 8108efc:	68bb      	ldr	r3, [r7, #8]
 8108efe:	4a1e      	ldr	r2, [pc, #120]	; (8108f78 <HAL_ETH_SetMDIOClockRange+0x9c>)
 8108f00:	4293      	cmp	r3, r2
 8108f02:	d908      	bls.n	8108f16 <HAL_ETH_SetMDIOClockRange+0x3a>
 8108f04:	68bb      	ldr	r3, [r7, #8]
 8108f06:	4a1d      	ldr	r2, [pc, #116]	; (8108f7c <HAL_ETH_SetMDIOClockRange+0xa0>)
 8108f08:	4293      	cmp	r3, r2
 8108f0a:	d804      	bhi.n	8108f16 <HAL_ETH_SetMDIOClockRange+0x3a>
  {
    /* CSR Clock Range between 20-35 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV16;
 8108f0c:	68fb      	ldr	r3, [r7, #12]
 8108f0e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8108f12:	60fb      	str	r3, [r7, #12]
 8108f14:	e027      	b.n	8108f66 <HAL_ETH_SetMDIOClockRange+0x8a>
  }
  else if ((hclk >= 35000000U) && (hclk < 60000000U))
 8108f16:	68bb      	ldr	r3, [r7, #8]
 8108f18:	4a18      	ldr	r2, [pc, #96]	; (8108f7c <HAL_ETH_SetMDIOClockRange+0xa0>)
 8108f1a:	4293      	cmp	r3, r2
 8108f1c:	d908      	bls.n	8108f30 <HAL_ETH_SetMDIOClockRange+0x54>
 8108f1e:	68bb      	ldr	r3, [r7, #8]
 8108f20:	4a17      	ldr	r2, [pc, #92]	; (8108f80 <HAL_ETH_SetMDIOClockRange+0xa4>)
 8108f22:	4293      	cmp	r3, r2
 8108f24:	d204      	bcs.n	8108f30 <HAL_ETH_SetMDIOClockRange+0x54>
  {
    /* CSR Clock Range between 35-60 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV26;
 8108f26:	68fb      	ldr	r3, [r7, #12]
 8108f28:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 8108f2c:	60fb      	str	r3, [r7, #12]
 8108f2e:	e01a      	b.n	8108f66 <HAL_ETH_SetMDIOClockRange+0x8a>
  }
  else if ((hclk >= 60000000U) && (hclk < 100000000U))
 8108f30:	68bb      	ldr	r3, [r7, #8]
 8108f32:	4a13      	ldr	r2, [pc, #76]	; (8108f80 <HAL_ETH_SetMDIOClockRange+0xa4>)
 8108f34:	4293      	cmp	r3, r2
 8108f36:	d303      	bcc.n	8108f40 <HAL_ETH_SetMDIOClockRange+0x64>
 8108f38:	68bb      	ldr	r3, [r7, #8]
 8108f3a:	4a12      	ldr	r2, [pc, #72]	; (8108f84 <HAL_ETH_SetMDIOClockRange+0xa8>)
 8108f3c:	4293      	cmp	r3, r2
 8108f3e:	d911      	bls.n	8108f64 <HAL_ETH_SetMDIOClockRange+0x88>
  {
    /* CSR Clock Range between 60-100 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV42;
  }
  else if ((hclk >= 100000000U) && (hclk < 150000000U))
 8108f40:	68bb      	ldr	r3, [r7, #8]
 8108f42:	4a10      	ldr	r2, [pc, #64]	; (8108f84 <HAL_ETH_SetMDIOClockRange+0xa8>)
 8108f44:	4293      	cmp	r3, r2
 8108f46:	d908      	bls.n	8108f5a <HAL_ETH_SetMDIOClockRange+0x7e>
 8108f48:	68bb      	ldr	r3, [r7, #8]
 8108f4a:	4a0f      	ldr	r2, [pc, #60]	; (8108f88 <HAL_ETH_SetMDIOClockRange+0xac>)
 8108f4c:	4293      	cmp	r3, r2
 8108f4e:	d804      	bhi.n	8108f5a <HAL_ETH_SetMDIOClockRange+0x7e>
  {
    /* CSR Clock Range between 100-150 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV62;
 8108f50:	68fb      	ldr	r3, [r7, #12]
 8108f52:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8108f56:	60fb      	str	r3, [r7, #12]
 8108f58:	e005      	b.n	8108f66 <HAL_ETH_SetMDIOClockRange+0x8a>
  }
  else /* (hclk >= 150000000)&&(hclk <= 200000000) */
  {
    /* CSR Clock Range between 150-200 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV102;
 8108f5a:	68fb      	ldr	r3, [r7, #12]
 8108f5c:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8108f60:	60fb      	str	r3, [r7, #12]
 8108f62:	e000      	b.n	8108f66 <HAL_ETH_SetMDIOClockRange+0x8a>
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV42;
 8108f64:	bf00      	nop
  }

  /* Configure the CSR Clock Range */
  (heth->Instance)->MACMDIOAR = (uint32_t)tmpreg;
 8108f66:	687b      	ldr	r3, [r7, #4]
 8108f68:	681b      	ldr	r3, [r3, #0]
 8108f6a:	68fa      	ldr	r2, [r7, #12]
 8108f6c:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
}
 8108f70:	bf00      	nop
 8108f72:	3710      	adds	r7, #16
 8108f74:	46bd      	mov	sp, r7
 8108f76:	bd80      	pop	{r7, pc}
 8108f78:	01312cff 	.word	0x01312cff
 8108f7c:	02160ebf 	.word	0x02160ebf
 8108f80:	03938700 	.word	0x03938700
 8108f84:	05f5e0ff 	.word	0x05f5e0ff
 8108f88:	08f0d17f 	.word	0x08f0d17f

08108f8c <ETH_SetMACConfig>:
  * @{
  */


static void ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 8108f8c:	b480      	push	{r7}
 8108f8e:	b085      	sub	sp, #20
 8108f90:	af00      	add	r7, sp, #0
 8108f92:	6078      	str	r0, [r7, #4]
 8108f94:	6039      	str	r1, [r7, #0]
  uint32_t macregval;

  /*------------------------ MACCR Configuration --------------------*/
  macregval = (macconf->InterPacketGapVal |
 8108f96:	683b      	ldr	r3, [r7, #0]
 8108f98:	689a      	ldr	r2, [r3, #8]
               macconf->SourceAddrControl |
 8108f9a:	683b      	ldr	r3, [r7, #0]
 8108f9c:	681b      	ldr	r3, [r3, #0]
  macregval = (macconf->InterPacketGapVal |
 8108f9e:	431a      	orrs	r2, r3
               ((uint32_t)macconf->ChecksumOffload << 27) |
 8108fa0:	683b      	ldr	r3, [r7, #0]
 8108fa2:	791b      	ldrb	r3, [r3, #4]
 8108fa4:	06db      	lsls	r3, r3, #27
               macconf->SourceAddrControl |
 8108fa6:	431a      	orrs	r2, r3
               ((uint32_t)macconf->GiantPacketSizeLimitControl << 23) |
 8108fa8:	683b      	ldr	r3, [r7, #0]
 8108faa:	7b1b      	ldrb	r3, [r3, #12]
 8108fac:	05db      	lsls	r3, r3, #23
               ((uint32_t)macconf->ChecksumOffload << 27) |
 8108fae:	431a      	orrs	r2, r3
               ((uint32_t)macconf->Support2KPacket  << 22) |
 8108fb0:	683b      	ldr	r3, [r7, #0]
 8108fb2:	7b5b      	ldrb	r3, [r3, #13]
 8108fb4:	059b      	lsls	r3, r3, #22
               ((uint32_t)macconf->GiantPacketSizeLimitControl << 23) |
 8108fb6:	431a      	orrs	r2, r3
               ((uint32_t)macconf->CRCStripTypePacket << 21) |
 8108fb8:	683b      	ldr	r3, [r7, #0]
 8108fba:	7b9b      	ldrb	r3, [r3, #14]
 8108fbc:	055b      	lsls	r3, r3, #21
               ((uint32_t)macconf->Support2KPacket  << 22) |
 8108fbe:	431a      	orrs	r2, r3
               ((uint32_t)macconf->AutomaticPadCRCStrip << 20) |
 8108fc0:	683b      	ldr	r3, [r7, #0]
 8108fc2:	7bdb      	ldrb	r3, [r3, #15]
 8108fc4:	051b      	lsls	r3, r3, #20
               ((uint32_t)macconf->CRCStripTypePacket << 21) |
 8108fc6:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 8108fc8:	683a      	ldr	r2, [r7, #0]
 8108fca:	7c12      	ldrb	r2, [r2, #16]
 8108fcc:	2a00      	cmp	r2, #0
 8108fce:	d102      	bne.n	8108fd6 <ETH_SetMACConfig+0x4a>
 8108fd0:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8108fd4:	e000      	b.n	8108fd8 <ETH_SetMACConfig+0x4c>
 8108fd6:	2200      	movs	r2, #0
               ((uint32_t)macconf->AutomaticPadCRCStrip << 20) |
 8108fd8:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 8108fda:	683a      	ldr	r2, [r7, #0]
 8108fdc:	7c52      	ldrb	r2, [r2, #17]
 8108fde:	2a00      	cmp	r2, #0
 8108fe0:	d102      	bne.n	8108fe8 <ETH_SetMACConfig+0x5c>
 8108fe2:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8108fe6:	e000      	b.n	8108fea <ETH_SetMACConfig+0x5e>
 8108fe8:	2200      	movs	r2, #0
               ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 8108fea:	431a      	orrs	r2, r3
               ((uint32_t)macconf->JumboPacket << 16) |
 8108fec:	683b      	ldr	r3, [r7, #0]
 8108fee:	7c9b      	ldrb	r3, [r3, #18]
 8108ff0:	041b      	lsls	r3, r3, #16
               ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 8108ff2:	431a      	orrs	r2, r3
               macconf->Speed |
 8108ff4:	683b      	ldr	r3, [r7, #0]
 8108ff6:	695b      	ldr	r3, [r3, #20]
               ((uint32_t)macconf->JumboPacket << 16) |
 8108ff8:	431a      	orrs	r2, r3
               macconf->DuplexMode |
 8108ffa:	683b      	ldr	r3, [r7, #0]
 8108ffc:	699b      	ldr	r3, [r3, #24]
               macconf->Speed |
 8108ffe:	431a      	orrs	r2, r3
               ((uint32_t)macconf->LoopbackMode << 12) |
 8109000:	683b      	ldr	r3, [r7, #0]
 8109002:	7f1b      	ldrb	r3, [r3, #28]
 8109004:	031b      	lsls	r3, r3, #12
               macconf->DuplexMode |
 8109006:	431a      	orrs	r2, r3
               ((uint32_t)macconf->CarrierSenseBeforeTransmit << 11) |
 8109008:	683b      	ldr	r3, [r7, #0]
 810900a:	7f5b      	ldrb	r3, [r3, #29]
 810900c:	02db      	lsls	r3, r3, #11
               ((uint32_t)macconf->LoopbackMode << 12) |
 810900e:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 10) |
 8109010:	683a      	ldr	r2, [r7, #0]
 8109012:	7f92      	ldrb	r2, [r2, #30]
 8109014:	2a00      	cmp	r2, #0
 8109016:	d102      	bne.n	810901e <ETH_SetMACConfig+0x92>
 8109018:	f44f 6280 	mov.w	r2, #1024	; 0x400
 810901c:	e000      	b.n	8109020 <ETH_SetMACConfig+0x94>
 810901e:	2200      	movs	r2, #0
               ((uint32_t)macconf->CarrierSenseBeforeTransmit << 11) |
 8109020:	431a      	orrs	r2, r3
               ((uint32_t)macconf->CarrierSenseDuringTransmit << 9) |
 8109022:	683b      	ldr	r3, [r7, #0]
 8109024:	7fdb      	ldrb	r3, [r3, #31]
 8109026:	025b      	lsls	r3, r3, #9
               ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 10) |
 8109028:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 8) |
 810902a:	683a      	ldr	r2, [r7, #0]
 810902c:	f892 2020 	ldrb.w	r2, [r2, #32]
 8109030:	2a00      	cmp	r2, #0
 8109032:	d102      	bne.n	810903a <ETH_SetMACConfig+0xae>
 8109034:	f44f 7280 	mov.w	r2, #256	; 0x100
 8109038:	e000      	b.n	810903c <ETH_SetMACConfig+0xb0>
 810903a:	2200      	movs	r2, #0
               ((uint32_t)macconf->CarrierSenseDuringTransmit << 9) |
 810903c:	431a      	orrs	r2, r3
               macconf->BackOffLimit |
 810903e:	683b      	ldr	r3, [r7, #0]
 8109040:	6a5b      	ldr	r3, [r3, #36]	; 0x24
               ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 8) |
 8109042:	431a      	orrs	r2, r3
               ((uint32_t)macconf->DeferralCheck << 4) |
 8109044:	683b      	ldr	r3, [r7, #0]
 8109046:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 810904a:	011b      	lsls	r3, r3, #4
               macconf->BackOffLimit |
 810904c:	431a      	orrs	r2, r3
               macconf->PreambleLength);
 810904e:	683b      	ldr	r3, [r7, #0]
 8109050:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  macregval = (macconf->InterPacketGapVal |
 8109052:	4313      	orrs	r3, r2
 8109054:	60fb      	str	r3, [r7, #12]

  /* Write to MACCR */
  MODIFY_REG(heth->Instance->MACCR, ETH_MACCR_MASK, macregval);
 8109056:	687b      	ldr	r3, [r7, #4]
 8109058:	681b      	ldr	r3, [r3, #0]
 810905a:	681a      	ldr	r2, [r3, #0]
 810905c:	4b57      	ldr	r3, [pc, #348]	; (81091bc <ETH_SetMACConfig+0x230>)
 810905e:	4013      	ands	r3, r2
 8109060:	687a      	ldr	r2, [r7, #4]
 8109062:	6812      	ldr	r2, [r2, #0]
 8109064:	68f9      	ldr	r1, [r7, #12]
 8109066:	430b      	orrs	r3, r1
 8109068:	6013      	str	r3, [r2, #0]

  /*------------------------ MACECR Configuration --------------------*/
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
 810906a:	683b      	ldr	r3, [r7, #0]
 810906c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 810906e:	065a      	lsls	r2, r3, #25
               ((uint32_t)macconf->ExtendedInterPacketGap << 24) |
 8109070:	683b      	ldr	r3, [r7, #0]
 8109072:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8109076:	061b      	lsls	r3, r3, #24
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
 8109078:	431a      	orrs	r2, r3
               ((uint32_t)macconf->UnicastSlowProtocolPacketDetect << 18) |
 810907a:	683b      	ldr	r3, [r7, #0]
 810907c:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8109080:	049b      	lsls	r3, r3, #18
               ((uint32_t)macconf->ExtendedInterPacketGap << 24) |
 8109082:	431a      	orrs	r2, r3
               ((uint32_t)macconf->SlowProtocolDetect << 17) |
 8109084:	683b      	ldr	r3, [r7, #0]
 8109086:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 810908a:	045b      	lsls	r3, r3, #17
               ((uint32_t)macconf->UnicastSlowProtocolPacketDetect << 18) |
 810908c:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->CRCCheckingRxPackets == DISABLE) ? 1U : 0U) << 16) |
 810908e:	683a      	ldr	r2, [r7, #0]
 8109090:	f892 2032 	ldrb.w	r2, [r2, #50]	; 0x32
 8109094:	2a00      	cmp	r2, #0
 8109096:	d102      	bne.n	810909e <ETH_SetMACConfig+0x112>
 8109098:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 810909c:	e000      	b.n	81090a0 <ETH_SetMACConfig+0x114>
 810909e:	2200      	movs	r2, #0
               ((uint32_t)macconf->SlowProtocolDetect << 17) |
 81090a0:	431a      	orrs	r2, r3
               macconf->GiantPacketSizeLimit);
 81090a2:	683b      	ldr	r3, [r7, #0]
 81090a4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
 81090a6:	4313      	orrs	r3, r2
 81090a8:	60fb      	str	r3, [r7, #12]

  /* Write to MACECR */
  MODIFY_REG(heth->Instance->MACECR, ETH_MACECR_MASK, macregval);
 81090aa:	687b      	ldr	r3, [r7, #4]
 81090ac:	681b      	ldr	r3, [r3, #0]
 81090ae:	685a      	ldr	r2, [r3, #4]
 81090b0:	4b43      	ldr	r3, [pc, #268]	; (81091c0 <ETH_SetMACConfig+0x234>)
 81090b2:	4013      	ands	r3, r2
 81090b4:	687a      	ldr	r2, [r7, #4]
 81090b6:	6812      	ldr	r2, [r2, #0]
 81090b8:	68f9      	ldr	r1, [r7, #12]
 81090ba:	430b      	orrs	r3, r1
 81090bc:	6053      	str	r3, [r2, #4]

  /*------------------------ MACWTR Configuration --------------------*/
  macregval = (((uint32_t)macconf->ProgrammableWatchdog << 8) |
 81090be:	683b      	ldr	r3, [r7, #0]
 81090c0:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 81090c4:	021a      	lsls	r2, r3, #8
               macconf->WatchdogTimeout);
 81090c6:	683b      	ldr	r3, [r7, #0]
 81090c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
  macregval = (((uint32_t)macconf->ProgrammableWatchdog << 8) |
 81090ca:	4313      	orrs	r3, r2
 81090cc:	60fb      	str	r3, [r7, #12]

  /* Write to MACWTR */
  MODIFY_REG(heth->Instance->MACWTR, ETH_MACWTR_MASK, macregval);
 81090ce:	687b      	ldr	r3, [r7, #4]
 81090d0:	681b      	ldr	r3, [r3, #0]
 81090d2:	68db      	ldr	r3, [r3, #12]
 81090d4:	f423 7387 	bic.w	r3, r3, #270	; 0x10e
 81090d8:	f023 0301 	bic.w	r3, r3, #1
 81090dc:	687a      	ldr	r2, [r7, #4]
 81090de:	6812      	ldr	r2, [r2, #0]
 81090e0:	68f9      	ldr	r1, [r7, #12]
 81090e2:	430b      	orrs	r3, r1
 81090e4:	60d3      	str	r3, [r2, #12]

  /*------------------------ MACTFCR Configuration --------------------*/
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 81090e6:	683b      	ldr	r3, [r7, #0]
 81090e8:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 81090ec:	005a      	lsls	r2, r3, #1
               macconf->PauseLowThreshold |
 81090ee:	683b      	ldr	r3, [r7, #0]
 81090f0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 81090f2:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7) |
 81090f4:	683a      	ldr	r2, [r7, #0]
 81090f6:	f892 204c 	ldrb.w	r2, [r2, #76]	; 0x4c
 81090fa:	2a00      	cmp	r2, #0
 81090fc:	d101      	bne.n	8109102 <ETH_SetMACConfig+0x176>
 81090fe:	2280      	movs	r2, #128	; 0x80
 8109100:	e000      	b.n	8109104 <ETH_SetMACConfig+0x178>
 8109102:	2200      	movs	r2, #0
               macconf->PauseLowThreshold |
 8109104:	431a      	orrs	r2, r3
               (macconf->PauseTime << 16));
 8109106:	683b      	ldr	r3, [r7, #0]
 8109108:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 810910a:	041b      	lsls	r3, r3, #16
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 810910c:	4313      	orrs	r3, r2
 810910e:	60fb      	str	r3, [r7, #12]

  /* Write to MACTFCR */
  MODIFY_REG(heth->Instance->MACTFCR, ETH_MACTFCR_MASK, macregval);
 8109110:	687b      	ldr	r3, [r7, #4]
 8109112:	681b      	ldr	r3, [r3, #0]
 8109114:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8109116:	f64f 730d 	movw	r3, #65293	; 0xff0d
 810911a:	4013      	ands	r3, r2
 810911c:	687a      	ldr	r2, [r7, #4]
 810911e:	6812      	ldr	r2, [r2, #0]
 8109120:	68f9      	ldr	r1, [r7, #12]
 8109122:	430b      	orrs	r3, r1
 8109124:	6713      	str	r3, [r2, #112]	; 0x70

  /*------------------------ MACRFCR Configuration --------------------*/
  macregval = ((uint32_t)macconf->ReceiveFlowControl |
 8109126:	683b      	ldr	r3, [r7, #0]
 8109128:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 810912c:	461a      	mov	r2, r3
               ((uint32_t)macconf->UnicastPausePacketDetect << 1));
 810912e:	683b      	ldr	r3, [r7, #0]
 8109130:	f893 3055 	ldrb.w	r3, [r3, #85]	; 0x55
 8109134:	005b      	lsls	r3, r3, #1
  macregval = ((uint32_t)macconf->ReceiveFlowControl |
 8109136:	4313      	orrs	r3, r2
 8109138:	60fb      	str	r3, [r7, #12]

  /* Write to MACRFCR */
  MODIFY_REG(heth->Instance->MACRFCR, ETH_MACRFCR_MASK, macregval);
 810913a:	687b      	ldr	r3, [r7, #4]
 810913c:	681b      	ldr	r3, [r3, #0]
 810913e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8109142:	f023 0103 	bic.w	r1, r3, #3
 8109146:	687b      	ldr	r3, [r7, #4]
 8109148:	681b      	ldr	r3, [r3, #0]
 810914a:	68fa      	ldr	r2, [r7, #12]
 810914c:	430a      	orrs	r2, r1
 810914e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /*------------------------ MTLTQOMR Configuration --------------------*/
  /* Write to MTLTQOMR */
  MODIFY_REG(heth->Instance->MTLTQOMR, ETH_MTLTQOMR_MASK, macconf->TransmitQueueMode);
 8109152:	687b      	ldr	r3, [r7, #4]
 8109154:	681b      	ldr	r3, [r3, #0]
 8109156:	f8d3 3d00 	ldr.w	r3, [r3, #3328]	; 0xd00
 810915a:	f023 0172 	bic.w	r1, r3, #114	; 0x72
 810915e:	683b      	ldr	r3, [r7, #0]
 8109160:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8109162:	687b      	ldr	r3, [r7, #4]
 8109164:	681b      	ldr	r3, [r3, #0]
 8109166:	430a      	orrs	r2, r1
 8109168:	f8c3 2d00 	str.w	r2, [r3, #3328]	; 0xd00

  /*------------------------ MTLRQOMR Configuration --------------------*/
  macregval = (macconf->ReceiveQueueMode |
 810916c:	683b      	ldr	r3, [r7, #0]
 810916e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
 8109170:	683a      	ldr	r2, [r7, #0]
 8109172:	f892 2060 	ldrb.w	r2, [r2, #96]	; 0x60
 8109176:	2a00      	cmp	r2, #0
 8109178:	d101      	bne.n	810917e <ETH_SetMACConfig+0x1f2>
 810917a:	2240      	movs	r2, #64	; 0x40
 810917c:	e000      	b.n	8109180 <ETH_SetMACConfig+0x1f4>
 810917e:	2200      	movs	r2, #0
  macregval = (macconf->ReceiveQueueMode |
 8109180:	431a      	orrs	r2, r3
               ((uint32_t)macconf->ForwardRxErrorPacket << 4) |
 8109182:	683b      	ldr	r3, [r7, #0]
 8109184:	f893 3061 	ldrb.w	r3, [r3, #97]	; 0x61
 8109188:	011b      	lsls	r3, r3, #4
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
 810918a:	431a      	orrs	r2, r3
               ((uint32_t)macconf->ForwardRxUndersizedGoodPacket << 3));
 810918c:	683b      	ldr	r3, [r7, #0]
 810918e:	f893 3062 	ldrb.w	r3, [r3, #98]	; 0x62
 8109192:	00db      	lsls	r3, r3, #3
  macregval = (macconf->ReceiveQueueMode |
 8109194:	4313      	orrs	r3, r2
 8109196:	60fb      	str	r3, [r7, #12]

  /* Write to MTLRQOMR */
  MODIFY_REG(heth->Instance->MTLRQOMR, ETH_MTLRQOMR_MASK, macregval);
 8109198:	687b      	ldr	r3, [r7, #4]
 810919a:	681b      	ldr	r3, [r3, #0]
 810919c:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	; 0xd30
 81091a0:	f023 017b 	bic.w	r1, r3, #123	; 0x7b
 81091a4:	687b      	ldr	r3, [r7, #4]
 81091a6:	681b      	ldr	r3, [r3, #0]
 81091a8:	68fa      	ldr	r2, [r7, #12]
 81091aa:	430a      	orrs	r2, r1
 81091ac:	f8c3 2d30 	str.w	r2, [r3, #3376]	; 0xd30
}
 81091b0:	bf00      	nop
 81091b2:	3714      	adds	r7, #20
 81091b4:	46bd      	mov	sp, r7
 81091b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 81091ba:	4770      	bx	lr
 81091bc:	00048083 	.word	0x00048083
 81091c0:	c0f88000 	.word	0xc0f88000

081091c4 <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth,  ETH_DMAConfigTypeDef *dmaconf)
{
 81091c4:	b480      	push	{r7}
 81091c6:	b085      	sub	sp, #20
 81091c8:	af00      	add	r7, sp, #0
 81091ca:	6078      	str	r0, [r7, #4]
 81091cc:	6039      	str	r1, [r7, #0]
  uint32_t dmaregval;

  /*------------------------ DMAMR Configuration --------------------*/
  MODIFY_REG(heth->Instance->DMAMR, ETH_DMAMR_MASK, dmaconf->DMAArbitration);
 81091ce:	687b      	ldr	r3, [r7, #4]
 81091d0:	681b      	ldr	r3, [r3, #0]
 81091d2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 81091d6:	681b      	ldr	r3, [r3, #0]
 81091d8:	f423 43f0 	bic.w	r3, r3, #30720	; 0x7800
 81091dc:	f023 0302 	bic.w	r3, r3, #2
 81091e0:	683a      	ldr	r2, [r7, #0]
 81091e2:	6811      	ldr	r1, [r2, #0]
 81091e4:	687a      	ldr	r2, [r7, #4]
 81091e6:	6812      	ldr	r2, [r2, #0]
 81091e8:	430b      	orrs	r3, r1
 81091ea:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 81091ee:	6013      	str	r3, [r2, #0]

  /*------------------------ DMASBMR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 81091f0:	683b      	ldr	r3, [r7, #0]
 81091f2:	791b      	ldrb	r3, [r3, #4]
 81091f4:	031a      	lsls	r2, r3, #12
               dmaconf->BurstMode |
 81091f6:	683b      	ldr	r3, [r7, #0]
 81091f8:	689b      	ldr	r3, [r3, #8]
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 81091fa:	431a      	orrs	r2, r3
               ((uint32_t)dmaconf->RebuildINCRxBurst << 15));
 81091fc:	683b      	ldr	r3, [r7, #0]
 81091fe:	7b1b      	ldrb	r3, [r3, #12]
 8109200:	03db      	lsls	r3, r3, #15
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 8109202:	4313      	orrs	r3, r2
 8109204:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMASBMR, ETH_DMASBMR_MASK, dmaregval);
 8109206:	687b      	ldr	r3, [r7, #4]
 8109208:	681b      	ldr	r3, [r3, #0]
 810920a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 810920e:	685b      	ldr	r3, [r3, #4]
 8109210:	f423 4350 	bic.w	r3, r3, #53248	; 0xd000
 8109214:	f023 0301 	bic.w	r3, r3, #1
 8109218:	687a      	ldr	r2, [r7, #4]
 810921a:	6812      	ldr	r2, [r2, #0]
 810921c:	68f9      	ldr	r1, [r7, #12]
 810921e:	430b      	orrs	r3, r1
 8109220:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8109224:	6053      	str	r3, [r2, #4]

  /*------------------------ DMACCR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
 8109226:	683b      	ldr	r3, [r7, #0]
 8109228:	7b5b      	ldrb	r3, [r3, #13]
 810922a:	041a      	lsls	r2, r3, #16
               dmaconf->MaximumSegmentSize);
 810922c:	683b      	ldr	r3, [r7, #0]
 810922e:	6a1b      	ldr	r3, [r3, #32]
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
 8109230:	4313      	orrs	r3, r2
 8109232:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_MASK, dmaregval);
 8109234:	687b      	ldr	r3, [r7, #4]
 8109236:	681b      	ldr	r3, [r3, #0]
 8109238:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 810923c:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
 8109240:	4b21      	ldr	r3, [pc, #132]	; (81092c8 <ETH_SetDMAConfig+0x104>)
 8109242:	4013      	ands	r3, r2
 8109244:	687a      	ldr	r2, [r7, #4]
 8109246:	6812      	ldr	r2, [r2, #0]
 8109248:	68f9      	ldr	r1, [r7, #12]
 810924a:	430b      	orrs	r3, r1
 810924c:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8109250:	f8c2 3100 	str.w	r3, [r2, #256]	; 0x100

  /*------------------------ DMACTCR Configuration --------------------*/
  dmaregval = (dmaconf->TxDMABurstLength |
 8109254:	683b      	ldr	r3, [r7, #0]
 8109256:	691a      	ldr	r2, [r3, #16]
               ((uint32_t)dmaconf->SecondPacketOperate << 4) |
 8109258:	683b      	ldr	r3, [r7, #0]
 810925a:	7d1b      	ldrb	r3, [r3, #20]
 810925c:	011b      	lsls	r3, r3, #4
  dmaregval = (dmaconf->TxDMABurstLength |
 810925e:	431a      	orrs	r2, r3
               ((uint32_t)dmaconf->TCPSegmentation << 12));
 8109260:	683b      	ldr	r3, [r7, #0]
 8109262:	7f5b      	ldrb	r3, [r3, #29]
 8109264:	031b      	lsls	r3, r3, #12
  dmaregval = (dmaconf->TxDMABurstLength |
 8109266:	4313      	orrs	r3, r2
 8109268:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMACTCR, ETH_DMACTCR_MASK, dmaregval);
 810926a:	687b      	ldr	r3, [r7, #4]
 810926c:	681b      	ldr	r3, [r3, #0]
 810926e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8109272:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
 8109276:	4b15      	ldr	r3, [pc, #84]	; (81092cc <ETH_SetDMAConfig+0x108>)
 8109278:	4013      	ands	r3, r2
 810927a:	687a      	ldr	r2, [r7, #4]
 810927c:	6812      	ldr	r2, [r2, #0]
 810927e:	68f9      	ldr	r1, [r7, #12]
 8109280:	430b      	orrs	r3, r1
 8109282:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8109286:	f8c2 3104 	str.w	r3, [r2, #260]	; 0x104

  /*------------------------ DMACRCR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
 810928a:	683b      	ldr	r3, [r7, #0]
 810928c:	7f1b      	ldrb	r3, [r3, #28]
 810928e:	07da      	lsls	r2, r3, #31
               dmaconf->RxDMABurstLength);
 8109290:	683b      	ldr	r3, [r7, #0]
 8109292:	699b      	ldr	r3, [r3, #24]
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
 8109294:	4313      	orrs	r3, r2
 8109296:	60fb      	str	r3, [r7, #12]

  /* Write to DMACRCR */
  MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_MASK, dmaregval);
 8109298:	687b      	ldr	r3, [r7, #4]
 810929a:	681b      	ldr	r3, [r3, #0]
 810929c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 81092a0:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 81092a4:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 81092a8:	f423 137c 	bic.w	r3, r3, #4128768	; 0x3f0000
 81092ac:	687a      	ldr	r2, [r7, #4]
 81092ae:	6812      	ldr	r2, [r2, #0]
 81092b0:	68f9      	ldr	r1, [r7, #12]
 81092b2:	430b      	orrs	r3, r1
 81092b4:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 81092b8:	f8c2 3108 	str.w	r3, [r2, #264]	; 0x108
}
 81092bc:	bf00      	nop
 81092be:	3714      	adds	r7, #20
 81092c0:	46bd      	mov	sp, r7
 81092c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 81092c6:	4770      	bx	lr
 81092c8:	fffec000 	.word	0xfffec000
 81092cc:	ffc0efef 	.word	0xffc0efef

081092d0 <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 81092d0:	b580      	push	{r7, lr}
 81092d2:	b0a4      	sub	sp, #144	; 0x90
 81092d4:	af00      	add	r7, sp, #0
 81092d6:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.AutomaticPadCRCStrip = ENABLE;
 81092d8:	2301      	movs	r3, #1
 81092da:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 81092de:	2300      	movs	r3, #0
 81092e0:	653b      	str	r3, [r7, #80]	; 0x50
  macDefaultConf.CarrierSenseBeforeTransmit = DISABLE;
 81092e2:	2300      	movs	r3, #0
 81092e4:	f887 3049 	strb.w	r3, [r7, #73]	; 0x49
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 81092e8:	2300      	movs	r3, #0
 81092ea:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
  macDefaultConf.ChecksumOffload = ENABLE;
 81092ee:	2301      	movs	r3, #1
 81092f0:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
  macDefaultConf.CRCCheckingRxPackets = ENABLE;
 81092f4:	2301      	movs	r3, #1
 81092f6:	f887 305e 	strb.w	r3, [r7, #94]	; 0x5e
  macDefaultConf.CRCStripTypePacket = ENABLE;
 81092fa:	2301      	movs	r3, #1
 81092fc:	f887 303a 	strb.w	r3, [r7, #58]	; 0x3a
  macDefaultConf.DeferralCheck = DISABLE;
 8109300:	2300      	movs	r3, #0
 8109302:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
  macDefaultConf.DropTCPIPChecksumErrorPacket = ENABLE;
 8109306:	2301      	movs	r3, #1
 8109308:	f887 308c 	strb.w	r3, [r7, #140]	; 0x8c
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 810930c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8109310:	647b      	str	r3, [r7, #68]	; 0x44
  macDefaultConf.ExtendedInterPacketGap = DISABLE;
 8109312:	2300      	movs	r3, #0
 8109314:	f887 3064 	strb.w	r3, [r7, #100]	; 0x64
  macDefaultConf.ExtendedInterPacketGapVal = 0x0;
 8109318:	2300      	movs	r3, #0
 810931a:	66bb      	str	r3, [r7, #104]	; 0x68
  macDefaultConf.ForwardRxErrorPacket = DISABLE;
 810931c:	2300      	movs	r3, #0
 810931e:	f887 308d 	strb.w	r3, [r7, #141]	; 0x8d
  macDefaultConf.ForwardRxUndersizedGoodPacket = DISABLE;
 8109322:	2300      	movs	r3, #0
 8109324:	f887 308e 	strb.w	r3, [r7, #142]	; 0x8e
  macDefaultConf.GiantPacketSizeLimit = 0x618;
 8109328:	f44f 63c3 	mov.w	r3, #1560	; 0x618
 810932c:	663b      	str	r3, [r7, #96]	; 0x60
  macDefaultConf.GiantPacketSizeLimitControl = DISABLE;
 810932e:	2300      	movs	r3, #0
 8109330:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
  macDefaultConf.InterPacketGapVal = ETH_INTERPACKETGAP_96BIT;
 8109334:	2300      	movs	r3, #0
 8109336:	637b      	str	r3, [r7, #52]	; 0x34
  macDefaultConf.Jabber = ENABLE;
 8109338:	2301      	movs	r3, #1
 810933a:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
  macDefaultConf.JumboPacket = DISABLE;
 810933e:	2300      	movs	r3, #0
 8109340:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
  macDefaultConf.LoopbackMode = DISABLE;
 8109344:	2300      	movs	r3, #0
 8109346:	f887 3048 	strb.w	r3, [r7, #72]	; 0x48
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS_4;
 810934a:	2300      	movs	r3, #0
 810934c:	67fb      	str	r3, [r7, #124]	; 0x7c
  macDefaultConf.PauseTime = 0x0;
 810934e:	2300      	movs	r3, #0
 8109350:	677b      	str	r3, [r7, #116]	; 0x74
  macDefaultConf.PreambleLength = ETH_PREAMBLELENGTH_7;
 8109352:	2300      	movs	r3, #0
 8109354:	65bb      	str	r3, [r7, #88]	; 0x58
  macDefaultConf.ProgrammableWatchdog = DISABLE;
 8109356:	2300      	movs	r3, #0
 8109358:	f887 306c 	strb.w	r3, [r7, #108]	; 0x6c
  macDefaultConf.ReceiveFlowControl = DISABLE;
 810935c:	2300      	movs	r3, #0
 810935e:	f887 3082 	strb.w	r3, [r7, #130]	; 0x82
  macDefaultConf.ReceiveOwn = ENABLE;
 8109362:	2301      	movs	r3, #1
 8109364:	f887 304a 	strb.w	r3, [r7, #74]	; 0x4a
  macDefaultConf.ReceiveQueueMode = ETH_RECEIVESTOREFORWARD;
 8109368:	2320      	movs	r3, #32
 810936a:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  macDefaultConf.RetryTransmission = ENABLE;
 810936e:	2301      	movs	r3, #1
 8109370:	f887 304c 	strb.w	r3, [r7, #76]	; 0x4c
  macDefaultConf.SlowProtocolDetect = DISABLE;
 8109374:	2300      	movs	r3, #0
 8109376:	f887 305d 	strb.w	r3, [r7, #93]	; 0x5d
  macDefaultConf.SourceAddrControl = ETH_SOURCEADDRESS_REPLACE_ADDR0;
 810937a:	f04f 5340 	mov.w	r3, #805306368	; 0x30000000
 810937e:	62fb      	str	r3, [r7, #44]	; 0x2c
  macDefaultConf.Speed = ETH_SPEED_100M;
 8109380:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8109384:	643b      	str	r3, [r7, #64]	; 0x40
  macDefaultConf.Support2KPacket = DISABLE;
 8109386:	2300      	movs	r3, #0
 8109388:	f887 3039 	strb.w	r3, [r7, #57]	; 0x39
  macDefaultConf.TransmitQueueMode = ETH_TRANSMITSTOREFORWARD;
 810938c:	2302      	movs	r3, #2
 810938e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macDefaultConf.TransmitFlowControl = DISABLE;
 8109392:	2300      	movs	r3, #0
 8109394:	f887 3080 	strb.w	r3, [r7, #128]	; 0x80
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 8109398:	2300      	movs	r3, #0
 810939a:	f887 3081 	strb.w	r3, [r7, #129]	; 0x81
  macDefaultConf.UnicastSlowProtocolPacketDetect = DISABLE;
 810939e:	2300      	movs	r3, #0
 81093a0:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
  macDefaultConf.Watchdog = ENABLE;
 81093a4:	2301      	movs	r3, #1
 81093a6:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
  macDefaultConf.WatchdogTimeout =  ETH_MACWTR_WTO_2KB;
 81093aa:	2300      	movs	r3, #0
 81093ac:	673b      	str	r3, [r7, #112]	; 0x70
  macDefaultConf.ZeroQuantaPause = ENABLE;
 81093ae:	2301      	movs	r3, #1
 81093b0:	f887 3078 	strb.w	r3, [r7, #120]	; 0x78

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 81093b4:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 81093b8:	4619      	mov	r1, r3
 81093ba:	6878      	ldr	r0, [r7, #4]
 81093bc:	f7ff fde6 	bl	8108f8c <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 81093c0:	2301      	movs	r3, #1
 81093c2:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 81093c4:	2301      	movs	r3, #1
 81093c6:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_RX1_TX1;
 81093c8:	2300      	movs	r3, #0
 81093ca:	60bb      	str	r3, [r7, #8]
  dmaDefaultConf.FlushRxPacket = DISABLE;
 81093cc:	2300      	movs	r3, #0
 81093ce:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  dmaDefaultConf.PBLx8Mode = DISABLE;
 81093d2:	2300      	movs	r3, #0
 81093d4:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.RebuildINCRxBurst = DISABLE;
 81093d6:	2300      	movs	r3, #0
 81093d8:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 81093da:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 81093de:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.SecondPacketOperate = DISABLE;
 81093e0:	2300      	movs	r3, #0
 81093e2:	773b      	strb	r3, [r7, #28]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 81093e4:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 81093e8:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.TCPSegmentation = DISABLE;
 81093ea:	2300      	movs	r3, #0
 81093ec:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  dmaDefaultConf.MaximumSegmentSize = ETH_SEGMENT_SIZE_DEFAULT;
 81093f0:	f44f 7306 	mov.w	r3, #536	; 0x218
 81093f4:	62bb      	str	r3, [r7, #40]	; 0x28

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 81093f6:	f107 0308 	add.w	r3, r7, #8
 81093fa:	4619      	mov	r1, r3
 81093fc:	6878      	ldr	r0, [r7, #4]
 81093fe:	f7ff fee1 	bl	81091c4 <ETH_SetDMAConfig>
}
 8109402:	bf00      	nop
 8109404:	3790      	adds	r7, #144	; 0x90
 8109406:	46bd      	mov	sp, r7
 8109408:	bd80      	pop	{r7, pc}

0810940a <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 810940a:	b480      	push	{r7}
 810940c:	b085      	sub	sp, #20
 810940e:	af00      	add	r7, sp, #0
 8109410:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8109412:	2300      	movs	r3, #0
 8109414:	60fb      	str	r3, [r7, #12]
 8109416:	e01d      	b.n	8109454 <ETH_DMATxDescListInit+0x4a>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 8109418:	687b      	ldr	r3, [r7, #4]
 810941a:	68d9      	ldr	r1, [r3, #12]
 810941c:	68fa      	ldr	r2, [r7, #12]
 810941e:	4613      	mov	r3, r2
 8109420:	005b      	lsls	r3, r3, #1
 8109422:	4413      	add	r3, r2
 8109424:	00db      	lsls	r3, r3, #3
 8109426:	440b      	add	r3, r1
 8109428:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0);
 810942a:	68bb      	ldr	r3, [r7, #8]
 810942c:	2200      	movs	r2, #0
 810942e:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0);
 8109430:	68bb      	ldr	r3, [r7, #8]
 8109432:	2200      	movs	r2, #0
 8109434:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0);
 8109436:	68bb      	ldr	r3, [r7, #8]
 8109438:	2200      	movs	r2, #0
 810943a:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0);
 810943c:	68bb      	ldr	r3, [r7, #8]
 810943e:	2200      	movs	r2, #0
 8109440:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 8109442:	68b9      	ldr	r1, [r7, #8]
 8109444:	687b      	ldr	r3, [r7, #4]
 8109446:	68fa      	ldr	r2, [r7, #12]
 8109448:	3206      	adds	r2, #6
 810944a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 810944e:	68fb      	ldr	r3, [r7, #12]
 8109450:	3301      	adds	r3, #1
 8109452:	60fb      	str	r3, [r7, #12]
 8109454:	68fb      	ldr	r3, [r7, #12]
 8109456:	2b03      	cmp	r3, #3
 8109458:	d9de      	bls.n	8109418 <ETH_DMATxDescListInit+0xe>

  }

  heth->TxDescList.CurTxDesc = 0;
 810945a:	687b      	ldr	r3, [r7, #4]
 810945c:	2200      	movs	r2, #0
 810945e:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set Transmit Descriptor Ring Length */
  WRITE_REG(heth->Instance->DMACTDRLR, (ETH_TX_DESC_CNT - 1U));
 8109460:	687b      	ldr	r3, [r7, #4]
 8109462:	681b      	ldr	r3, [r3, #0]
 8109464:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8109468:	461a      	mov	r2, r3
 810946a:	2303      	movs	r3, #3
 810946c:	f8c2 312c 	str.w	r3, [r2, #300]	; 0x12c

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMACTDLAR, (uint32_t) heth->Init.TxDesc);
 8109470:	687b      	ldr	r3, [r7, #4]
 8109472:	68da      	ldr	r2, [r3, #12]
 8109474:	687b      	ldr	r3, [r7, #4]
 8109476:	681b      	ldr	r3, [r3, #0]
 8109478:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 810947c:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114

  /* Set Transmit Descriptor Tail pointer */
  WRITE_REG(heth->Instance->DMACTDTPR, (uint32_t) heth->Init.TxDesc);
 8109480:	687b      	ldr	r3, [r7, #4]
 8109482:	68da      	ldr	r2, [r3, #12]
 8109484:	687b      	ldr	r3, [r7, #4]
 8109486:	681b      	ldr	r3, [r3, #0]
 8109488:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 810948c:	f8c3 2120 	str.w	r2, [r3, #288]	; 0x120
}
 8109490:	bf00      	nop
 8109492:	3714      	adds	r7, #20
 8109494:	46bd      	mov	sp, r7
 8109496:	f85d 7b04 	ldr.w	r7, [sp], #4
 810949a:	4770      	bx	lr

0810949c <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 810949c:	b480      	push	{r7}
 810949e:	b085      	sub	sp, #20
 81094a0:	af00      	add	r7, sp, #0
 81094a2:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 81094a4:	2300      	movs	r3, #0
 81094a6:	60fb      	str	r3, [r7, #12]
 81094a8:	e023      	b.n	81094f2 <ETH_DMARxDescListInit+0x56>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 81094aa:	687b      	ldr	r3, [r7, #4]
 81094ac:	6919      	ldr	r1, [r3, #16]
 81094ae:	68fa      	ldr	r2, [r7, #12]
 81094b0:	4613      	mov	r3, r2
 81094b2:	005b      	lsls	r3, r3, #1
 81094b4:	4413      	add	r3, r2
 81094b6:	00db      	lsls	r3, r3, #3
 81094b8:	440b      	add	r3, r1
 81094ba:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0);
 81094bc:	68bb      	ldr	r3, [r7, #8]
 81094be:	2200      	movs	r2, #0
 81094c0:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0);
 81094c2:	68bb      	ldr	r3, [r7, #8]
 81094c4:	2200      	movs	r2, #0
 81094c6:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0);
 81094c8:	68bb      	ldr	r3, [r7, #8]
 81094ca:	2200      	movs	r2, #0
 81094cc:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0);
 81094ce:	68bb      	ldr	r3, [r7, #8]
 81094d0:	2200      	movs	r2, #0
 81094d2:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0);
 81094d4:	68bb      	ldr	r3, [r7, #8]
 81094d6:	2200      	movs	r2, #0
 81094d8:	611a      	str	r2, [r3, #16]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0);
 81094da:	68bb      	ldr	r3, [r7, #8]
 81094dc:	2200      	movs	r2, #0
 81094de:	615a      	str	r2, [r3, #20]


    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 81094e0:	68b9      	ldr	r1, [r7, #8]
 81094e2:	687b      	ldr	r3, [r7, #4]
 81094e4:	68fa      	ldr	r2, [r7, #12]
 81094e6:	3212      	adds	r2, #18
 81094e8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 81094ec:	68fb      	ldr	r3, [r7, #12]
 81094ee:	3301      	adds	r3, #1
 81094f0:	60fb      	str	r3, [r7, #12]
 81094f2:	68fb      	ldr	r3, [r7, #12]
 81094f4:	2b03      	cmp	r3, #3
 81094f6:	d9d8      	bls.n	81094aa <ETH_DMARxDescListInit+0xe>

  }

  WRITE_REG(heth->RxDescList.RxDescIdx, 0);
 81094f8:	687b      	ldr	r3, [r7, #4]
 81094fa:	2200      	movs	r2, #0
 81094fc:	65da      	str	r2, [r3, #92]	; 0x5c
  WRITE_REG(heth->RxDescList.RxDescCnt, 0);
 81094fe:	687b      	ldr	r3, [r7, #4]
 8109500:	2200      	movs	r2, #0
 8109502:	661a      	str	r2, [r3, #96]	; 0x60
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0);
 8109504:	687b      	ldr	r3, [r7, #4]
 8109506:	2200      	movs	r2, #0
 8109508:	669a      	str	r2, [r3, #104]	; 0x68
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0);
 810950a:	687b      	ldr	r3, [r7, #4]
 810950c:	2200      	movs	r2, #0
 810950e:	66da      	str	r2, [r3, #108]	; 0x6c
  WRITE_REG(heth->RxDescList.ItMode, 0);
 8109510:	687b      	ldr	r3, [r7, #4]
 8109512:	2200      	movs	r2, #0
 8109514:	659a      	str	r2, [r3, #88]	; 0x58

  /* Set Receive Descriptor Ring Length */
  WRITE_REG(heth->Instance->DMACRDRLR, ((uint32_t)(ETH_RX_DESC_CNT - 1U)));
 8109516:	687b      	ldr	r3, [r7, #4]
 8109518:	681b      	ldr	r3, [r3, #0]
 810951a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 810951e:	461a      	mov	r2, r3
 8109520:	2303      	movs	r3, #3
 8109522:	f8c2 3130 	str.w	r3, [r2, #304]	; 0x130

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMACRDLAR, (uint32_t) heth->Init.RxDesc);
 8109526:	687b      	ldr	r3, [r7, #4]
 8109528:	691a      	ldr	r2, [r3, #16]
 810952a:	687b      	ldr	r3, [r7, #4]
 810952c:	681b      	ldr	r3, [r3, #0]
 810952e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8109532:	f8c3 211c 	str.w	r2, [r3, #284]	; 0x11c

  /* Set Receive Descriptor Tail pointer Address */
  WRITE_REG(heth->Instance->DMACRDTPR, ((uint32_t)(heth->Init.RxDesc + (uint32_t)(ETH_RX_DESC_CNT - 1U))));
 8109536:	687b      	ldr	r3, [r7, #4]
 8109538:	691b      	ldr	r3, [r3, #16]
 810953a:	f103 0248 	add.w	r2, r3, #72	; 0x48
 810953e:	687b      	ldr	r3, [r7, #4]
 8109540:	681b      	ldr	r3, [r3, #0]
 8109542:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8109546:	f8c3 2128 	str.w	r2, [r3, #296]	; 0x128
}
 810954a:	bf00      	nop
 810954c:	3714      	adds	r7, #20
 810954e:	46bd      	mov	sp, r7
 8109550:	f85d 7b04 	ldr.w	r7, [sp], #4
 8109554:	4770      	bx	lr
	...

08109558 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8109558:	b480      	push	{r7}
 810955a:	b089      	sub	sp, #36	; 0x24
 810955c:	af00      	add	r7, sp, #0
 810955e:	6078      	str	r0, [r7, #4]
 8109560:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8109562:	2300      	movs	r3, #0
 8109564:	61fb      	str	r3, [r7, #28]
  uint32_t iocurrent;
  uint32_t temp;
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
 8109566:	4b89      	ldr	r3, [pc, #548]	; (810978c <HAL_GPIO_Init+0x234>)
 8109568:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 810956a:	e194      	b.n	8109896 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 810956c:	683b      	ldr	r3, [r7, #0]
 810956e:	681a      	ldr	r2, [r3, #0]
 8109570:	2101      	movs	r1, #1
 8109572:	69fb      	ldr	r3, [r7, #28]
 8109574:	fa01 f303 	lsl.w	r3, r1, r3
 8109578:	4013      	ands	r3, r2
 810957a:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 810957c:	693b      	ldr	r3, [r7, #16]
 810957e:	2b00      	cmp	r3, #0
 8109580:	f000 8186 	beq.w	8109890 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8109584:	683b      	ldr	r3, [r7, #0]
 8109586:	685b      	ldr	r3, [r3, #4]
 8109588:	f003 0303 	and.w	r3, r3, #3
 810958c:	2b01      	cmp	r3, #1
 810958e:	d005      	beq.n	810959c <HAL_GPIO_Init+0x44>
 8109590:	683b      	ldr	r3, [r7, #0]
 8109592:	685b      	ldr	r3, [r3, #4]
 8109594:	f003 0303 	and.w	r3, r3, #3
 8109598:	2b02      	cmp	r3, #2
 810959a:	d130      	bne.n	81095fe <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 810959c:	687b      	ldr	r3, [r7, #4]
 810959e:	689b      	ldr	r3, [r3, #8]
 81095a0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 81095a2:	69fb      	ldr	r3, [r7, #28]
 81095a4:	005b      	lsls	r3, r3, #1
 81095a6:	2203      	movs	r2, #3
 81095a8:	fa02 f303 	lsl.w	r3, r2, r3
 81095ac:	43db      	mvns	r3, r3
 81095ae:	69ba      	ldr	r2, [r7, #24]
 81095b0:	4013      	ands	r3, r2
 81095b2:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 81095b4:	683b      	ldr	r3, [r7, #0]
 81095b6:	68da      	ldr	r2, [r3, #12]
 81095b8:	69fb      	ldr	r3, [r7, #28]
 81095ba:	005b      	lsls	r3, r3, #1
 81095bc:	fa02 f303 	lsl.w	r3, r2, r3
 81095c0:	69ba      	ldr	r2, [r7, #24]
 81095c2:	4313      	orrs	r3, r2
 81095c4:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 81095c6:	687b      	ldr	r3, [r7, #4]
 81095c8:	69ba      	ldr	r2, [r7, #24]
 81095ca:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 81095cc:	687b      	ldr	r3, [r7, #4]
 81095ce:	685b      	ldr	r3, [r3, #4]
 81095d0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 81095d2:	2201      	movs	r2, #1
 81095d4:	69fb      	ldr	r3, [r7, #28]
 81095d6:	fa02 f303 	lsl.w	r3, r2, r3
 81095da:	43db      	mvns	r3, r3
 81095dc:	69ba      	ldr	r2, [r7, #24]
 81095de:	4013      	ands	r3, r2
 81095e0:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 81095e2:	683b      	ldr	r3, [r7, #0]
 81095e4:	685b      	ldr	r3, [r3, #4]
 81095e6:	091b      	lsrs	r3, r3, #4
 81095e8:	f003 0201 	and.w	r2, r3, #1
 81095ec:	69fb      	ldr	r3, [r7, #28]
 81095ee:	fa02 f303 	lsl.w	r3, r2, r3
 81095f2:	69ba      	ldr	r2, [r7, #24]
 81095f4:	4313      	orrs	r3, r2
 81095f6:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 81095f8:	687b      	ldr	r3, [r7, #4]
 81095fa:	69ba      	ldr	r2, [r7, #24]
 81095fc:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 81095fe:	683b      	ldr	r3, [r7, #0]
 8109600:	685b      	ldr	r3, [r3, #4]
 8109602:	f003 0303 	and.w	r3, r3, #3
 8109606:	2b03      	cmp	r3, #3
 8109608:	d017      	beq.n	810963a <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 810960a:	687b      	ldr	r3, [r7, #4]
 810960c:	68db      	ldr	r3, [r3, #12]
 810960e:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8109610:	69fb      	ldr	r3, [r7, #28]
 8109612:	005b      	lsls	r3, r3, #1
 8109614:	2203      	movs	r2, #3
 8109616:	fa02 f303 	lsl.w	r3, r2, r3
 810961a:	43db      	mvns	r3, r3
 810961c:	69ba      	ldr	r2, [r7, #24]
 810961e:	4013      	ands	r3, r2
 8109620:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8109622:	683b      	ldr	r3, [r7, #0]
 8109624:	689a      	ldr	r2, [r3, #8]
 8109626:	69fb      	ldr	r3, [r7, #28]
 8109628:	005b      	lsls	r3, r3, #1
 810962a:	fa02 f303 	lsl.w	r3, r2, r3
 810962e:	69ba      	ldr	r2, [r7, #24]
 8109630:	4313      	orrs	r3, r2
 8109632:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8109634:	687b      	ldr	r3, [r7, #4]
 8109636:	69ba      	ldr	r2, [r7, #24]
 8109638:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 810963a:	683b      	ldr	r3, [r7, #0]
 810963c:	685b      	ldr	r3, [r3, #4]
 810963e:	f003 0303 	and.w	r3, r3, #3
 8109642:	2b02      	cmp	r3, #2
 8109644:	d123      	bne.n	810968e <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8109646:	69fb      	ldr	r3, [r7, #28]
 8109648:	08da      	lsrs	r2, r3, #3
 810964a:	687b      	ldr	r3, [r7, #4]
 810964c:	3208      	adds	r2, #8
 810964e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8109652:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8109654:	69fb      	ldr	r3, [r7, #28]
 8109656:	f003 0307 	and.w	r3, r3, #7
 810965a:	009b      	lsls	r3, r3, #2
 810965c:	220f      	movs	r2, #15
 810965e:	fa02 f303 	lsl.w	r3, r2, r3
 8109662:	43db      	mvns	r3, r3
 8109664:	69ba      	ldr	r2, [r7, #24]
 8109666:	4013      	ands	r3, r2
 8109668:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 810966a:	683b      	ldr	r3, [r7, #0]
 810966c:	691a      	ldr	r2, [r3, #16]
 810966e:	69fb      	ldr	r3, [r7, #28]
 8109670:	f003 0307 	and.w	r3, r3, #7
 8109674:	009b      	lsls	r3, r3, #2
 8109676:	fa02 f303 	lsl.w	r3, r2, r3
 810967a:	69ba      	ldr	r2, [r7, #24]
 810967c:	4313      	orrs	r3, r2
 810967e:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8109680:	69fb      	ldr	r3, [r7, #28]
 8109682:	08da      	lsrs	r2, r3, #3
 8109684:	687b      	ldr	r3, [r7, #4]
 8109686:	3208      	adds	r2, #8
 8109688:	69b9      	ldr	r1, [r7, #24]
 810968a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 810968e:	687b      	ldr	r3, [r7, #4]
 8109690:	681b      	ldr	r3, [r3, #0]
 8109692:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8109694:	69fb      	ldr	r3, [r7, #28]
 8109696:	005b      	lsls	r3, r3, #1
 8109698:	2203      	movs	r2, #3
 810969a:	fa02 f303 	lsl.w	r3, r2, r3
 810969e:	43db      	mvns	r3, r3
 81096a0:	69ba      	ldr	r2, [r7, #24]
 81096a2:	4013      	ands	r3, r2
 81096a4:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 81096a6:	683b      	ldr	r3, [r7, #0]
 81096a8:	685b      	ldr	r3, [r3, #4]
 81096aa:	f003 0203 	and.w	r2, r3, #3
 81096ae:	69fb      	ldr	r3, [r7, #28]
 81096b0:	005b      	lsls	r3, r3, #1
 81096b2:	fa02 f303 	lsl.w	r3, r2, r3
 81096b6:	69ba      	ldr	r2, [r7, #24]
 81096b8:	4313      	orrs	r3, r2
 81096ba:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 81096bc:	687b      	ldr	r3, [r7, #4]
 81096be:	69ba      	ldr	r2, [r7, #24]
 81096c0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 81096c2:	683b      	ldr	r3, [r7, #0]
 81096c4:	685b      	ldr	r3, [r3, #4]
 81096c6:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 81096ca:	2b00      	cmp	r3, #0
 81096cc:	f000 80e0 	beq.w	8109890 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 81096d0:	4b2f      	ldr	r3, [pc, #188]	; (8109790 <HAL_GPIO_Init+0x238>)
 81096d2:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 81096d6:	4a2e      	ldr	r2, [pc, #184]	; (8109790 <HAL_GPIO_Init+0x238>)
 81096d8:	f043 0302 	orr.w	r3, r3, #2
 81096dc:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 81096e0:	4b2b      	ldr	r3, [pc, #172]	; (8109790 <HAL_GPIO_Init+0x238>)
 81096e2:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 81096e6:	f003 0302 	and.w	r3, r3, #2
 81096ea:	60fb      	str	r3, [r7, #12]
 81096ec:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 81096ee:	4a29      	ldr	r2, [pc, #164]	; (8109794 <HAL_GPIO_Init+0x23c>)
 81096f0:	69fb      	ldr	r3, [r7, #28]
 81096f2:	089b      	lsrs	r3, r3, #2
 81096f4:	3302      	adds	r3, #2
 81096f6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 81096fa:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 81096fc:	69fb      	ldr	r3, [r7, #28]
 81096fe:	f003 0303 	and.w	r3, r3, #3
 8109702:	009b      	lsls	r3, r3, #2
 8109704:	220f      	movs	r2, #15
 8109706:	fa02 f303 	lsl.w	r3, r2, r3
 810970a:	43db      	mvns	r3, r3
 810970c:	69ba      	ldr	r2, [r7, #24]
 810970e:	4013      	ands	r3, r2
 8109710:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8109712:	687b      	ldr	r3, [r7, #4]
 8109714:	4a20      	ldr	r2, [pc, #128]	; (8109798 <HAL_GPIO_Init+0x240>)
 8109716:	4293      	cmp	r3, r2
 8109718:	d052      	beq.n	81097c0 <HAL_GPIO_Init+0x268>
 810971a:	687b      	ldr	r3, [r7, #4]
 810971c:	4a1f      	ldr	r2, [pc, #124]	; (810979c <HAL_GPIO_Init+0x244>)
 810971e:	4293      	cmp	r3, r2
 8109720:	d031      	beq.n	8109786 <HAL_GPIO_Init+0x22e>
 8109722:	687b      	ldr	r3, [r7, #4]
 8109724:	4a1e      	ldr	r2, [pc, #120]	; (81097a0 <HAL_GPIO_Init+0x248>)
 8109726:	4293      	cmp	r3, r2
 8109728:	d02b      	beq.n	8109782 <HAL_GPIO_Init+0x22a>
 810972a:	687b      	ldr	r3, [r7, #4]
 810972c:	4a1d      	ldr	r2, [pc, #116]	; (81097a4 <HAL_GPIO_Init+0x24c>)
 810972e:	4293      	cmp	r3, r2
 8109730:	d025      	beq.n	810977e <HAL_GPIO_Init+0x226>
 8109732:	687b      	ldr	r3, [r7, #4]
 8109734:	4a1c      	ldr	r2, [pc, #112]	; (81097a8 <HAL_GPIO_Init+0x250>)
 8109736:	4293      	cmp	r3, r2
 8109738:	d01f      	beq.n	810977a <HAL_GPIO_Init+0x222>
 810973a:	687b      	ldr	r3, [r7, #4]
 810973c:	4a1b      	ldr	r2, [pc, #108]	; (81097ac <HAL_GPIO_Init+0x254>)
 810973e:	4293      	cmp	r3, r2
 8109740:	d019      	beq.n	8109776 <HAL_GPIO_Init+0x21e>
 8109742:	687b      	ldr	r3, [r7, #4]
 8109744:	4a1a      	ldr	r2, [pc, #104]	; (81097b0 <HAL_GPIO_Init+0x258>)
 8109746:	4293      	cmp	r3, r2
 8109748:	d013      	beq.n	8109772 <HAL_GPIO_Init+0x21a>
 810974a:	687b      	ldr	r3, [r7, #4]
 810974c:	4a19      	ldr	r2, [pc, #100]	; (81097b4 <HAL_GPIO_Init+0x25c>)
 810974e:	4293      	cmp	r3, r2
 8109750:	d00d      	beq.n	810976e <HAL_GPIO_Init+0x216>
 8109752:	687b      	ldr	r3, [r7, #4]
 8109754:	4a18      	ldr	r2, [pc, #96]	; (81097b8 <HAL_GPIO_Init+0x260>)
 8109756:	4293      	cmp	r3, r2
 8109758:	d007      	beq.n	810976a <HAL_GPIO_Init+0x212>
 810975a:	687b      	ldr	r3, [r7, #4]
 810975c:	4a17      	ldr	r2, [pc, #92]	; (81097bc <HAL_GPIO_Init+0x264>)
 810975e:	4293      	cmp	r3, r2
 8109760:	d101      	bne.n	8109766 <HAL_GPIO_Init+0x20e>
 8109762:	2309      	movs	r3, #9
 8109764:	e02d      	b.n	81097c2 <HAL_GPIO_Init+0x26a>
 8109766:	230a      	movs	r3, #10
 8109768:	e02b      	b.n	81097c2 <HAL_GPIO_Init+0x26a>
 810976a:	2308      	movs	r3, #8
 810976c:	e029      	b.n	81097c2 <HAL_GPIO_Init+0x26a>
 810976e:	2307      	movs	r3, #7
 8109770:	e027      	b.n	81097c2 <HAL_GPIO_Init+0x26a>
 8109772:	2306      	movs	r3, #6
 8109774:	e025      	b.n	81097c2 <HAL_GPIO_Init+0x26a>
 8109776:	2305      	movs	r3, #5
 8109778:	e023      	b.n	81097c2 <HAL_GPIO_Init+0x26a>
 810977a:	2304      	movs	r3, #4
 810977c:	e021      	b.n	81097c2 <HAL_GPIO_Init+0x26a>
 810977e:	2303      	movs	r3, #3
 8109780:	e01f      	b.n	81097c2 <HAL_GPIO_Init+0x26a>
 8109782:	2302      	movs	r3, #2
 8109784:	e01d      	b.n	81097c2 <HAL_GPIO_Init+0x26a>
 8109786:	2301      	movs	r3, #1
 8109788:	e01b      	b.n	81097c2 <HAL_GPIO_Init+0x26a>
 810978a:	bf00      	nop
 810978c:	580000c0 	.word	0x580000c0
 8109790:	58024400 	.word	0x58024400
 8109794:	58000400 	.word	0x58000400
 8109798:	58020000 	.word	0x58020000
 810979c:	58020400 	.word	0x58020400
 81097a0:	58020800 	.word	0x58020800
 81097a4:	58020c00 	.word	0x58020c00
 81097a8:	58021000 	.word	0x58021000
 81097ac:	58021400 	.word	0x58021400
 81097b0:	58021800 	.word	0x58021800
 81097b4:	58021c00 	.word	0x58021c00
 81097b8:	58022000 	.word	0x58022000
 81097bc:	58022400 	.word	0x58022400
 81097c0:	2300      	movs	r3, #0
 81097c2:	69fa      	ldr	r2, [r7, #28]
 81097c4:	f002 0203 	and.w	r2, r2, #3
 81097c8:	0092      	lsls	r2, r2, #2
 81097ca:	4093      	lsls	r3, r2
 81097cc:	69ba      	ldr	r2, [r7, #24]
 81097ce:	4313      	orrs	r3, r2
 81097d0:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 81097d2:	4938      	ldr	r1, [pc, #224]	; (81098b4 <HAL_GPIO_Init+0x35c>)
 81097d4:	69fb      	ldr	r3, [r7, #28]
 81097d6:	089b      	lsrs	r3, r3, #2
 81097d8:	3302      	adds	r3, #2
 81097da:	69ba      	ldr	r2, [r7, #24]
 81097dc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 81097e0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 81097e4:	681b      	ldr	r3, [r3, #0]
 81097e6:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 81097e8:	693b      	ldr	r3, [r7, #16]
 81097ea:	43db      	mvns	r3, r3
 81097ec:	69ba      	ldr	r2, [r7, #24]
 81097ee:	4013      	ands	r3, r2
 81097f0:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 81097f2:	683b      	ldr	r3, [r7, #0]
 81097f4:	685b      	ldr	r3, [r3, #4]
 81097f6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 81097fa:	2b00      	cmp	r3, #0
 81097fc:	d003      	beq.n	8109806 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 81097fe:	69ba      	ldr	r2, [r7, #24]
 8109800:	693b      	ldr	r3, [r7, #16]
 8109802:	4313      	orrs	r3, r2
 8109804:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8109806:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 810980a:	69bb      	ldr	r3, [r7, #24]
 810980c:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 810980e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8109812:	685b      	ldr	r3, [r3, #4]
 8109814:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8109816:	693b      	ldr	r3, [r7, #16]
 8109818:	43db      	mvns	r3, r3
 810981a:	69ba      	ldr	r2, [r7, #24]
 810981c:	4013      	ands	r3, r2
 810981e:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8109820:	683b      	ldr	r3, [r7, #0]
 8109822:	685b      	ldr	r3, [r3, #4]
 8109824:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8109828:	2b00      	cmp	r3, #0
 810982a:	d003      	beq.n	8109834 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 810982c:	69ba      	ldr	r2, [r7, #24]
 810982e:	693b      	ldr	r3, [r7, #16]
 8109830:	4313      	orrs	r3, r2
 8109832:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8109834:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8109838:	69bb      	ldr	r3, [r7, #24]
 810983a:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 810983c:	697b      	ldr	r3, [r7, #20]
 810983e:	685b      	ldr	r3, [r3, #4]
 8109840:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8109842:	693b      	ldr	r3, [r7, #16]
 8109844:	43db      	mvns	r3, r3
 8109846:	69ba      	ldr	r2, [r7, #24]
 8109848:	4013      	ands	r3, r2
 810984a:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 810984c:	683b      	ldr	r3, [r7, #0]
 810984e:	685b      	ldr	r3, [r3, #4]
 8109850:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8109854:	2b00      	cmp	r3, #0
 8109856:	d003      	beq.n	8109860 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8109858:	69ba      	ldr	r2, [r7, #24]
 810985a:	693b      	ldr	r3, [r7, #16]
 810985c:	4313      	orrs	r3, r2
 810985e:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8109860:	697b      	ldr	r3, [r7, #20]
 8109862:	69ba      	ldr	r2, [r7, #24]
 8109864:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8109866:	697b      	ldr	r3, [r7, #20]
 8109868:	681b      	ldr	r3, [r3, #0]
 810986a:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 810986c:	693b      	ldr	r3, [r7, #16]
 810986e:	43db      	mvns	r3, r3
 8109870:	69ba      	ldr	r2, [r7, #24]
 8109872:	4013      	ands	r3, r2
 8109874:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8109876:	683b      	ldr	r3, [r7, #0]
 8109878:	685b      	ldr	r3, [r3, #4]
 810987a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 810987e:	2b00      	cmp	r3, #0
 8109880:	d003      	beq.n	810988a <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 8109882:	69ba      	ldr	r2, [r7, #24]
 8109884:	693b      	ldr	r3, [r7, #16]
 8109886:	4313      	orrs	r3, r2
 8109888:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 810988a:	697b      	ldr	r3, [r7, #20]
 810988c:	69ba      	ldr	r2, [r7, #24]
 810988e:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8109890:	69fb      	ldr	r3, [r7, #28]
 8109892:	3301      	adds	r3, #1
 8109894:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8109896:	683b      	ldr	r3, [r7, #0]
 8109898:	681a      	ldr	r2, [r3, #0]
 810989a:	69fb      	ldr	r3, [r7, #28]
 810989c:	fa22 f303 	lsr.w	r3, r2, r3
 81098a0:	2b00      	cmp	r3, #0
 81098a2:	f47f ae63 	bne.w	810956c <HAL_GPIO_Init+0x14>
  }
}
 81098a6:	bf00      	nop
 81098a8:	bf00      	nop
 81098aa:	3724      	adds	r7, #36	; 0x24
 81098ac:	46bd      	mov	sp, r7
 81098ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 81098b2:	4770      	bx	lr
 81098b4:	58000400 	.word	0x58000400

081098b8 <HAL_HSEM_ActivateNotification>:
  * @brief  Activate Semaphore release Notification for a given Semaphores Mask .
  * @param  SemMask: Mask of Released semaphores
  * @retval Semaphore Key
  */
void HAL_HSEM_ActivateNotification(uint32_t SemMask)
{
 81098b8:	b480      	push	{r7}
 81098ba:	b083      	sub	sp, #12
 81098bc:	af00      	add	r7, sp, #0
 81098be:	6078      	str	r0, [r7, #4]
  {
    /*Use interrupt line 1 for CPU2 Master*/
    HSEM->C2IER |= SemMask;
  }
#else
  HSEM_COMMON->IER |= SemMask;
 81098c0:	4b05      	ldr	r3, [pc, #20]	; (81098d8 <HAL_HSEM_ActivateNotification+0x20>)
 81098c2:	681a      	ldr	r2, [r3, #0]
 81098c4:	4904      	ldr	r1, [pc, #16]	; (81098d8 <HAL_HSEM_ActivateNotification+0x20>)
 81098c6:	687b      	ldr	r3, [r7, #4]
 81098c8:	4313      	orrs	r3, r2
 81098ca:	600b      	str	r3, [r1, #0]
#endif
}
 81098cc:	bf00      	nop
 81098ce:	370c      	adds	r7, #12
 81098d0:	46bd      	mov	sp, r7
 81098d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 81098d6:	4770      	bx	lr
 81098d8:	58026510 	.word	0x58026510

081098dc <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 81098dc:	b5f0      	push	{r4, r5, r6, r7, lr}
 81098de:	b08f      	sub	sp, #60	; 0x3c
 81098e0:	af0a      	add	r7, sp, #40	; 0x28
 81098e2:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 81098e4:	687b      	ldr	r3, [r7, #4]
 81098e6:	2b00      	cmp	r3, #0
 81098e8:	d101      	bne.n	81098ee <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 81098ea:	2301      	movs	r3, #1
 81098ec:	e116      	b.n	8109b1c <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 81098ee:	687b      	ldr	r3, [r7, #4]
 81098f0:	681b      	ldr	r3, [r3, #0]
 81098f2:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 81098f4:	687b      	ldr	r3, [r7, #4]
 81098f6:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 81098fa:	b2db      	uxtb	r3, r3
 81098fc:	2b00      	cmp	r3, #0
 81098fe:	d106      	bne.n	810990e <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8109900:	687b      	ldr	r3, [r7, #4]
 8109902:	2200      	movs	r2, #0
 8109904:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8109908:	6878      	ldr	r0, [r7, #4]
 810990a:	f7f8 fbb3 	bl	8102074 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 810990e:	687b      	ldr	r3, [r7, #4]
 8109910:	2203      	movs	r2, #3
 8109912:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8109916:	68bb      	ldr	r3, [r7, #8]
 8109918:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 810991a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 810991e:	2b00      	cmp	r3, #0
 8109920:	d102      	bne.n	8109928 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8109922:	687b      	ldr	r3, [r7, #4]
 8109924:	2200      	movs	r2, #0
 8109926:	60da      	str	r2, [r3, #12]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8109928:	687b      	ldr	r3, [r7, #4]
 810992a:	681b      	ldr	r3, [r3, #0]
 810992c:	4618      	mov	r0, r3
 810992e:	f007 ff79 	bl	8111824 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8109932:	687b      	ldr	r3, [r7, #4]
 8109934:	681b      	ldr	r3, [r3, #0]
 8109936:	603b      	str	r3, [r7, #0]
 8109938:	687e      	ldr	r6, [r7, #4]
 810993a:	466d      	mov	r5, sp
 810993c:	f106 0410 	add.w	r4, r6, #16
 8109940:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8109942:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8109944:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8109946:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8109948:	e894 0003 	ldmia.w	r4, {r0, r1}
 810994c:	e885 0003 	stmia.w	r5, {r0, r1}
 8109950:	1d33      	adds	r3, r6, #4
 8109952:	cb0e      	ldmia	r3, {r1, r2, r3}
 8109954:	6838      	ldr	r0, [r7, #0]
 8109956:	f007 fef7 	bl	8111748 <USB_CoreInit>
 810995a:	4603      	mov	r3, r0
 810995c:	2b00      	cmp	r3, #0
 810995e:	d005      	beq.n	810996c <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8109960:	687b      	ldr	r3, [r7, #4]
 8109962:	2202      	movs	r2, #2
 8109964:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8109968:	2301      	movs	r3, #1
 810996a:	e0d7      	b.n	8109b1c <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 810996c:	687b      	ldr	r3, [r7, #4]
 810996e:	681b      	ldr	r3, [r3, #0]
 8109970:	2100      	movs	r1, #0
 8109972:	4618      	mov	r0, r3
 8109974:	f007 ff67 	bl	8111846 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8109978:	2300      	movs	r3, #0
 810997a:	73fb      	strb	r3, [r7, #15]
 810997c:	e04a      	b.n	8109a14 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 810997e:	7bfa      	ldrb	r2, [r7, #15]
 8109980:	6879      	ldr	r1, [r7, #4]
 8109982:	4613      	mov	r3, r2
 8109984:	00db      	lsls	r3, r3, #3
 8109986:	4413      	add	r3, r2
 8109988:	009b      	lsls	r3, r3, #2
 810998a:	440b      	add	r3, r1
 810998c:	333d      	adds	r3, #61	; 0x3d
 810998e:	2201      	movs	r2, #1
 8109990:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8109992:	7bfa      	ldrb	r2, [r7, #15]
 8109994:	6879      	ldr	r1, [r7, #4]
 8109996:	4613      	mov	r3, r2
 8109998:	00db      	lsls	r3, r3, #3
 810999a:	4413      	add	r3, r2
 810999c:	009b      	lsls	r3, r3, #2
 810999e:	440b      	add	r3, r1
 81099a0:	333c      	adds	r3, #60	; 0x3c
 81099a2:	7bfa      	ldrb	r2, [r7, #15]
 81099a4:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 81099a6:	7bfa      	ldrb	r2, [r7, #15]
 81099a8:	7bfb      	ldrb	r3, [r7, #15]
 81099aa:	b298      	uxth	r0, r3
 81099ac:	6879      	ldr	r1, [r7, #4]
 81099ae:	4613      	mov	r3, r2
 81099b0:	00db      	lsls	r3, r3, #3
 81099b2:	4413      	add	r3, r2
 81099b4:	009b      	lsls	r3, r3, #2
 81099b6:	440b      	add	r3, r1
 81099b8:	3356      	adds	r3, #86	; 0x56
 81099ba:	4602      	mov	r2, r0
 81099bc:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 81099be:	7bfa      	ldrb	r2, [r7, #15]
 81099c0:	6879      	ldr	r1, [r7, #4]
 81099c2:	4613      	mov	r3, r2
 81099c4:	00db      	lsls	r3, r3, #3
 81099c6:	4413      	add	r3, r2
 81099c8:	009b      	lsls	r3, r3, #2
 81099ca:	440b      	add	r3, r1
 81099cc:	3340      	adds	r3, #64	; 0x40
 81099ce:	2200      	movs	r2, #0
 81099d0:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 81099d2:	7bfa      	ldrb	r2, [r7, #15]
 81099d4:	6879      	ldr	r1, [r7, #4]
 81099d6:	4613      	mov	r3, r2
 81099d8:	00db      	lsls	r3, r3, #3
 81099da:	4413      	add	r3, r2
 81099dc:	009b      	lsls	r3, r3, #2
 81099de:	440b      	add	r3, r1
 81099e0:	3344      	adds	r3, #68	; 0x44
 81099e2:	2200      	movs	r2, #0
 81099e4:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 81099e6:	7bfa      	ldrb	r2, [r7, #15]
 81099e8:	6879      	ldr	r1, [r7, #4]
 81099ea:	4613      	mov	r3, r2
 81099ec:	00db      	lsls	r3, r3, #3
 81099ee:	4413      	add	r3, r2
 81099f0:	009b      	lsls	r3, r3, #2
 81099f2:	440b      	add	r3, r1
 81099f4:	3348      	adds	r3, #72	; 0x48
 81099f6:	2200      	movs	r2, #0
 81099f8:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 81099fa:	7bfa      	ldrb	r2, [r7, #15]
 81099fc:	6879      	ldr	r1, [r7, #4]
 81099fe:	4613      	mov	r3, r2
 8109a00:	00db      	lsls	r3, r3, #3
 8109a02:	4413      	add	r3, r2
 8109a04:	009b      	lsls	r3, r3, #2
 8109a06:	440b      	add	r3, r1
 8109a08:	334c      	adds	r3, #76	; 0x4c
 8109a0a:	2200      	movs	r2, #0
 8109a0c:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8109a0e:	7bfb      	ldrb	r3, [r7, #15]
 8109a10:	3301      	adds	r3, #1
 8109a12:	73fb      	strb	r3, [r7, #15]
 8109a14:	7bfa      	ldrb	r2, [r7, #15]
 8109a16:	687b      	ldr	r3, [r7, #4]
 8109a18:	685b      	ldr	r3, [r3, #4]
 8109a1a:	429a      	cmp	r2, r3
 8109a1c:	d3af      	bcc.n	810997e <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8109a1e:	2300      	movs	r3, #0
 8109a20:	73fb      	strb	r3, [r7, #15]
 8109a22:	e044      	b.n	8109aae <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8109a24:	7bfa      	ldrb	r2, [r7, #15]
 8109a26:	6879      	ldr	r1, [r7, #4]
 8109a28:	4613      	mov	r3, r2
 8109a2a:	00db      	lsls	r3, r3, #3
 8109a2c:	4413      	add	r3, r2
 8109a2e:	009b      	lsls	r3, r3, #2
 8109a30:	440b      	add	r3, r1
 8109a32:	f203 237d 	addw	r3, r3, #637	; 0x27d
 8109a36:	2200      	movs	r2, #0
 8109a38:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8109a3a:	7bfa      	ldrb	r2, [r7, #15]
 8109a3c:	6879      	ldr	r1, [r7, #4]
 8109a3e:	4613      	mov	r3, r2
 8109a40:	00db      	lsls	r3, r3, #3
 8109a42:	4413      	add	r3, r2
 8109a44:	009b      	lsls	r3, r3, #2
 8109a46:	440b      	add	r3, r1
 8109a48:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 8109a4c:	7bfa      	ldrb	r2, [r7, #15]
 8109a4e:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8109a50:	7bfa      	ldrb	r2, [r7, #15]
 8109a52:	6879      	ldr	r1, [r7, #4]
 8109a54:	4613      	mov	r3, r2
 8109a56:	00db      	lsls	r3, r3, #3
 8109a58:	4413      	add	r3, r2
 8109a5a:	009b      	lsls	r3, r3, #2
 8109a5c:	440b      	add	r3, r1
 8109a5e:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8109a62:	2200      	movs	r2, #0
 8109a64:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8109a66:	7bfa      	ldrb	r2, [r7, #15]
 8109a68:	6879      	ldr	r1, [r7, #4]
 8109a6a:	4613      	mov	r3, r2
 8109a6c:	00db      	lsls	r3, r3, #3
 8109a6e:	4413      	add	r3, r2
 8109a70:	009b      	lsls	r3, r3, #2
 8109a72:	440b      	add	r3, r1
 8109a74:	f503 7321 	add.w	r3, r3, #644	; 0x284
 8109a78:	2200      	movs	r2, #0
 8109a7a:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8109a7c:	7bfa      	ldrb	r2, [r7, #15]
 8109a7e:	6879      	ldr	r1, [r7, #4]
 8109a80:	4613      	mov	r3, r2
 8109a82:	00db      	lsls	r3, r3, #3
 8109a84:	4413      	add	r3, r2
 8109a86:	009b      	lsls	r3, r3, #2
 8109a88:	440b      	add	r3, r1
 8109a8a:	f503 7322 	add.w	r3, r3, #648	; 0x288
 8109a8e:	2200      	movs	r2, #0
 8109a90:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8109a92:	7bfa      	ldrb	r2, [r7, #15]
 8109a94:	6879      	ldr	r1, [r7, #4]
 8109a96:	4613      	mov	r3, r2
 8109a98:	00db      	lsls	r3, r3, #3
 8109a9a:	4413      	add	r3, r2
 8109a9c:	009b      	lsls	r3, r3, #2
 8109a9e:	440b      	add	r3, r1
 8109aa0:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8109aa4:	2200      	movs	r2, #0
 8109aa6:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8109aa8:	7bfb      	ldrb	r3, [r7, #15]
 8109aaa:	3301      	adds	r3, #1
 8109aac:	73fb      	strb	r3, [r7, #15]
 8109aae:	7bfa      	ldrb	r2, [r7, #15]
 8109ab0:	687b      	ldr	r3, [r7, #4]
 8109ab2:	685b      	ldr	r3, [r3, #4]
 8109ab4:	429a      	cmp	r2, r3
 8109ab6:	d3b5      	bcc.n	8109a24 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8109ab8:	687b      	ldr	r3, [r7, #4]
 8109aba:	681b      	ldr	r3, [r3, #0]
 8109abc:	603b      	str	r3, [r7, #0]
 8109abe:	687e      	ldr	r6, [r7, #4]
 8109ac0:	466d      	mov	r5, sp
 8109ac2:	f106 0410 	add.w	r4, r6, #16
 8109ac6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8109ac8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8109aca:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8109acc:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8109ace:	e894 0003 	ldmia.w	r4, {r0, r1}
 8109ad2:	e885 0003 	stmia.w	r5, {r0, r1}
 8109ad6:	1d33      	adds	r3, r6, #4
 8109ad8:	cb0e      	ldmia	r3, {r1, r2, r3}
 8109ada:	6838      	ldr	r0, [r7, #0]
 8109adc:	f007 ff00 	bl	81118e0 <USB_DevInit>
 8109ae0:	4603      	mov	r3, r0
 8109ae2:	2b00      	cmp	r3, #0
 8109ae4:	d005      	beq.n	8109af2 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8109ae6:	687b      	ldr	r3, [r7, #4]
 8109ae8:	2202      	movs	r2, #2
 8109aea:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8109aee:	2301      	movs	r3, #1
 8109af0:	e014      	b.n	8109b1c <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 8109af2:	687b      	ldr	r3, [r7, #4]
 8109af4:	2200      	movs	r2, #0
 8109af6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8109afa:	687b      	ldr	r3, [r7, #4]
 8109afc:	2201      	movs	r2, #1
 8109afe:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8109b02:	687b      	ldr	r3, [r7, #4]
 8109b04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8109b06:	2b01      	cmp	r3, #1
 8109b08:	d102      	bne.n	8109b10 <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8109b0a:	6878      	ldr	r0, [r7, #4]
 8109b0c:	f000 f80a 	bl	8109b24 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 8109b10:	687b      	ldr	r3, [r7, #4]
 8109b12:	681b      	ldr	r3, [r3, #0]
 8109b14:	4618      	mov	r0, r3
 8109b16:	f008 f8be 	bl	8111c96 <USB_DevDisconnect>

  return HAL_OK;
 8109b1a:	2300      	movs	r3, #0
}
 8109b1c:	4618      	mov	r0, r3
 8109b1e:	3714      	adds	r7, #20
 8109b20:	46bd      	mov	sp, r7
 8109b22:	bdf0      	pop	{r4, r5, r6, r7, pc}

08109b24 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8109b24:	b480      	push	{r7}
 8109b26:	b085      	sub	sp, #20
 8109b28:	af00      	add	r7, sp, #0
 8109b2a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8109b2c:	687b      	ldr	r3, [r7, #4]
 8109b2e:	681b      	ldr	r3, [r3, #0]
 8109b30:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8109b32:	687b      	ldr	r3, [r7, #4]
 8109b34:	2201      	movs	r2, #1
 8109b36:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  hpcd->LPM_State = LPM_L0;
 8109b3a:	687b      	ldr	r3, [r7, #4]
 8109b3c:	2200      	movs	r2, #0
 8109b3e:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8109b42:	68fb      	ldr	r3, [r7, #12]
 8109b44:	699b      	ldr	r3, [r3, #24]
 8109b46:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8109b4a:	68fb      	ldr	r3, [r7, #12]
 8109b4c:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8109b4e:	68fb      	ldr	r3, [r7, #12]
 8109b50:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8109b52:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8109b56:	f043 0303 	orr.w	r3, r3, #3
 8109b5a:	68fa      	ldr	r2, [r7, #12]
 8109b5c:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 8109b5e:	2300      	movs	r3, #0
}
 8109b60:	4618      	mov	r0, r3
 8109b62:	3714      	adds	r7, #20
 8109b64:	46bd      	mov	sp, r7
 8109b66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8109b6a:	4770      	bx	lr

08109b6c <HAL_PWREx_EnterSTOPMode>:
  *            @arg PWR_D2_DOMAIN : Enter D2 Domain to DSTOP mode.
  *            @arg PWR_D3_DOMAIN : Enter D3/SRD Domain to DSTOP mode.
  * @retval None.
  */
void HAL_PWREx_EnterSTOPMode (uint32_t Regulator, uint8_t STOPEntry, uint32_t Domain)
{
 8109b6c:	b580      	push	{r7, lr}
 8109b6e:	b084      	sub	sp, #16
 8109b70:	af00      	add	r7, sp, #0
 8109b72:	60f8      	str	r0, [r7, #12]
 8109b74:	460b      	mov	r3, r1
 8109b76:	607a      	str	r2, [r7, #4]
 8109b78:	72fb      	strb	r3, [r7, #11]
  assert_param (IS_PWR_REGULATOR (Regulator));
  assert_param (IS_PWR_STOP_ENTRY (STOPEntry));
  assert_param (IS_PWR_DOMAIN (Domain));

  /* Select the regulator state in Stop mode */
  MODIFY_REG (PWR->CR1, PWR_CR1_LPDS, Regulator);
 8109b7a:	4b37      	ldr	r3, [pc, #220]	; (8109c58 <HAL_PWREx_EnterSTOPMode+0xec>)
 8109b7c:	681b      	ldr	r3, [r3, #0]
 8109b7e:	f023 0201 	bic.w	r2, r3, #1
 8109b82:	4935      	ldr	r1, [pc, #212]	; (8109c58 <HAL_PWREx_EnterSTOPMode+0xec>)
 8109b84:	68fb      	ldr	r3, [r7, #12]
 8109b86:	4313      	orrs	r3, r2
 8109b88:	600b      	str	r3, [r1, #0]

  /* Select the domain Power Down DeepSleep */
  if (Domain == PWR_D1_DOMAIN)
 8109b8a:	687b      	ldr	r3, [r7, #4]
 8109b8c:	2b00      	cmp	r3, #0
 8109b8e:	d123      	bne.n	8109bd8 <HAL_PWREx_EnterSTOPMode+0x6c>
  {
#if defined (DUAL_CORE)
    /* Check current core */
    if (HAL_GetCurrentCPUID () != CM7_CPUID)
 8109b90:	f7ff f8aa 	bl	8108ce8 <HAL_GetCurrentCPUID>
 8109b94:	4603      	mov	r3, r0
 8109b96:	2b03      	cmp	r3, #3
 8109b98:	d158      	bne.n	8109c4c <HAL_PWREx_EnterSTOPMode+0xe0>
      return;
    }
#endif /* defined (DUAL_CORE) */

    /* Keep DSTOP mode when D1/CD domain enters Deepsleep */
    CLEAR_BIT (PWR->CPUCR, PWR_CPUCR_PDDS_D1);
 8109b9a:	4b2f      	ldr	r3, [pc, #188]	; (8109c58 <HAL_PWREx_EnterSTOPMode+0xec>)
 8109b9c:	691b      	ldr	r3, [r3, #16]
 8109b9e:	4a2e      	ldr	r2, [pc, #184]	; (8109c58 <HAL_PWREx_EnterSTOPMode+0xec>)
 8109ba0:	f023 0301 	bic.w	r3, r3, #1
 8109ba4:	6113      	str	r3, [r2, #16]

    /* Set SLEEPDEEP bit of Cortex System Control Register */
    SET_BIT (SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 8109ba6:	4b2d      	ldr	r3, [pc, #180]	; (8109c5c <HAL_PWREx_EnterSTOPMode+0xf0>)
 8109ba8:	691b      	ldr	r3, [r3, #16]
 8109baa:	4a2c      	ldr	r2, [pc, #176]	; (8109c5c <HAL_PWREx_EnterSTOPMode+0xf0>)
 8109bac:	f043 0304 	orr.w	r3, r3, #4
 8109bb0:	6113      	str	r3, [r2, #16]
  __ASM volatile ("dsb 0xF":::"memory");
 8109bb2:	f3bf 8f4f 	dsb	sy
}
 8109bb6:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8109bb8:	f3bf 8f6f 	isb	sy
}
 8109bbc:	bf00      	nop
    /* Ensure that all instructions are done before entering STOP mode */
    __DSB ();
    __ISB ();

    /* Select Stop mode entry */
    if (STOPEntry == PWR_STOPENTRY_WFI)
 8109bbe:	7afb      	ldrb	r3, [r7, #11]
 8109bc0:	2b01      	cmp	r3, #1
 8109bc2:	d101      	bne.n	8109bc8 <HAL_PWREx_EnterSTOPMode+0x5c>
    {
      /* Request Wait For Interrupt */
      __WFI ();
 8109bc4:	bf30      	wfi
 8109bc6:	e000      	b.n	8109bca <HAL_PWREx_EnterSTOPMode+0x5e>
    }
    else
    {
      /* Request Wait For Event */
      __WFE ();
 8109bc8:	bf20      	wfe
    }

    /* Clear SLEEPDEEP bit of Cortex-Mx in the System Control Register */
    CLEAR_BIT (SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 8109bca:	4b24      	ldr	r3, [pc, #144]	; (8109c5c <HAL_PWREx_EnterSTOPMode+0xf0>)
 8109bcc:	691b      	ldr	r3, [r3, #16]
 8109bce:	4a23      	ldr	r2, [pc, #140]	; (8109c5c <HAL_PWREx_EnterSTOPMode+0xf0>)
 8109bd0:	f023 0304 	bic.w	r3, r3, #4
 8109bd4:	6113      	str	r3, [r2, #16]
 8109bd6:	e03c      	b.n	8109c52 <HAL_PWREx_EnterSTOPMode+0xe6>
  }
#if defined (PWR_CPUCR_PDDS_D2)
  else if (Domain == PWR_D2_DOMAIN)
 8109bd8:	687b      	ldr	r3, [r7, #4]
 8109bda:	2b01      	cmp	r3, #1
 8109bdc:	d123      	bne.n	8109c26 <HAL_PWREx_EnterSTOPMode+0xba>
  {
#if defined (DUAL_CORE)
    /* Check current core */
    if (HAL_GetCurrentCPUID () != CM4_CPUID)
 8109bde:	f7ff f883 	bl	8108ce8 <HAL_GetCurrentCPUID>
 8109be2:	4603      	mov	r3, r0
 8109be4:	2b01      	cmp	r3, #1
 8109be6:	d133      	bne.n	8109c50 <HAL_PWREx_EnterSTOPMode+0xe4>
      */
      return;
    }

    /* Keep DSTOP mode when D2 domain enters Deepsleep */
    CLEAR_BIT (PWR->CPU2CR, PWR_CPU2CR_PDDS_D2);
 8109be8:	4b1b      	ldr	r3, [pc, #108]	; (8109c58 <HAL_PWREx_EnterSTOPMode+0xec>)
 8109bea:	695b      	ldr	r3, [r3, #20]
 8109bec:	4a1a      	ldr	r2, [pc, #104]	; (8109c58 <HAL_PWREx_EnterSTOPMode+0xec>)
 8109bee:	f023 0302 	bic.w	r3, r3, #2
 8109bf2:	6153      	str	r3, [r2, #20]

    /* Set SLEEPDEEP bit of Cortex System Control Register */
    SET_BIT (SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 8109bf4:	4b19      	ldr	r3, [pc, #100]	; (8109c5c <HAL_PWREx_EnterSTOPMode+0xf0>)
 8109bf6:	691b      	ldr	r3, [r3, #16]
 8109bf8:	4a18      	ldr	r2, [pc, #96]	; (8109c5c <HAL_PWREx_EnterSTOPMode+0xf0>)
 8109bfa:	f043 0304 	orr.w	r3, r3, #4
 8109bfe:	6113      	str	r3, [r2, #16]
  __ASM volatile ("dsb 0xF":::"memory");
 8109c00:	f3bf 8f4f 	dsb	sy
}
 8109c04:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8109c06:	f3bf 8f6f 	isb	sy
}
 8109c0a:	bf00      	nop
    /* Ensure that all instructions are done before entering STOP mode */
    __DSB ();
    __ISB ();

    /* Select Stop mode entry */
    if (STOPEntry == PWR_STOPENTRY_WFI)
 8109c0c:	7afb      	ldrb	r3, [r7, #11]
 8109c0e:	2b01      	cmp	r3, #1
 8109c10:	d101      	bne.n	8109c16 <HAL_PWREx_EnterSTOPMode+0xaa>
    {
      /* Request Wait For Interrupt */
      __WFI ();
 8109c12:	bf30      	wfi
 8109c14:	e000      	b.n	8109c18 <HAL_PWREx_EnterSTOPMode+0xac>
    }
    else
    {
      /* Request Wait For Event */
      __WFE ();
 8109c16:	bf20      	wfe
    }

    /* Clear SLEEPDEEP bit of Cortex-Mx in the System Control Register */
    CLEAR_BIT (SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 8109c18:	4b10      	ldr	r3, [pc, #64]	; (8109c5c <HAL_PWREx_EnterSTOPMode+0xf0>)
 8109c1a:	691b      	ldr	r3, [r3, #16]
 8109c1c:	4a0f      	ldr	r2, [pc, #60]	; (8109c5c <HAL_PWREx_EnterSTOPMode+0xf0>)
 8109c1e:	f023 0304 	bic.w	r3, r3, #4
 8109c22:	6113      	str	r3, [r2, #16]
 8109c24:	e015      	b.n	8109c52 <HAL_PWREx_EnterSTOPMode+0xe6>
#endif /* defined (PWR_CPUCR_PDDS_D2) */
  else
  {
#if defined (DUAL_CORE)
    /* Check current core */
    if (HAL_GetCurrentCPUID () == CM7_CPUID)
 8109c26:	f7ff f85f 	bl	8108ce8 <HAL_GetCurrentCPUID>
 8109c2a:	4603      	mov	r3, r0
 8109c2c:	2b03      	cmp	r3, #3
 8109c2e:	d106      	bne.n	8109c3e <HAL_PWREx_EnterSTOPMode+0xd2>
    {
      /* Keep DSTOP mode when D3 domain enters Deepsleep */
      CLEAR_BIT (PWR->CPUCR, PWR_CPUCR_PDDS_D3);
 8109c30:	4b09      	ldr	r3, [pc, #36]	; (8109c58 <HAL_PWREx_EnterSTOPMode+0xec>)
 8109c32:	691b      	ldr	r3, [r3, #16]
 8109c34:	4a08      	ldr	r2, [pc, #32]	; (8109c58 <HAL_PWREx_EnterSTOPMode+0xec>)
 8109c36:	f023 0304 	bic.w	r3, r3, #4
 8109c3a:	6113      	str	r3, [r2, #16]
 8109c3c:	e009      	b.n	8109c52 <HAL_PWREx_EnterSTOPMode+0xe6>
    }
    else
    {
      /* Keep DSTOP mode when D3 domain enters Deepsleep */
      CLEAR_BIT (PWR->CPU2CR, PWR_CPU2CR_PDDS_D3);
 8109c3e:	4b06      	ldr	r3, [pc, #24]	; (8109c58 <HAL_PWREx_EnterSTOPMode+0xec>)
 8109c40:	695b      	ldr	r3, [r3, #20]
 8109c42:	4a05      	ldr	r2, [pc, #20]	; (8109c58 <HAL_PWREx_EnterSTOPMode+0xec>)
 8109c44:	f023 0304 	bic.w	r3, r3, #4
 8109c48:	6153      	str	r3, [r2, #20]
 8109c4a:	e002      	b.n	8109c52 <HAL_PWREx_EnterSTOPMode+0xe6>
      return;
 8109c4c:	bf00      	nop
 8109c4e:	e000      	b.n	8109c52 <HAL_PWREx_EnterSTOPMode+0xe6>
      return;
 8109c50:	bf00      	nop
#else
    /* Keep DSTOP mode when D3/SRD domain enters Deepsleep */
    CLEAR_BIT (PWR->CPUCR, PWR_CPUCR_PDDS_D3);
#endif  /* defined (DUAL_CORE) */
  }
}
 8109c52:	3710      	adds	r7, #16
 8109c54:	46bd      	mov	sp, r7
 8109c56:	bd80      	pop	{r7, pc}
 8109c58:	58024800 	.word	0x58024800
 8109c5c:	e000ed00 	.word	0xe000ed00

08109c60 <HAL_PWREx_ClearPendingEvent>:
  *         enter low power mode using Wait For Event request.
  * @note   Cortex-M7 must be in CRUN mode when calling this API by Cortex-M4.
  * @retval None.
  */
void HAL_PWREx_ClearPendingEvent (void)
{
 8109c60:	b580      	push	{r7, lr}
 8109c62:	af00      	add	r7, sp, #0
#if defined (DUAL_CORE)
  /* Check the current Core */
  if (HAL_GetCurrentCPUID () == CM7_CPUID)
 8109c64:	f7ff f840 	bl	8108ce8 <HAL_GetCurrentCPUID>
 8109c68:	4603      	mov	r3, r0
 8109c6a:	2b03      	cmp	r3, #3
 8109c6c:	d101      	bne.n	8109c72 <HAL_PWREx_ClearPendingEvent+0x12>
  {
    __WFE ();
 8109c6e:	bf20      	wfe
    __WFE ();
  }
#else
  __WFE ();
#endif /* defined (DUAL_CORE) */
}
 8109c70:	e001      	b.n	8109c76 <HAL_PWREx_ClearPendingEvent+0x16>
    __SEV ();
 8109c72:	bf40      	sev
    __WFE ();
 8109c74:	bf20      	wfe
}
 8109c76:	bf00      	nop
 8109c78:	bd80      	pop	{r7, pc}
	...

08109c7c <HAL_PWREx_EnableUSBVoltageDetector>:
/**
  * @brief Enable the USB voltage level detector.
  * @retval None.
  */
void HAL_PWREx_EnableUSBVoltageDetector (void)
{
 8109c7c:	b480      	push	{r7}
 8109c7e:	af00      	add	r7, sp, #0
  /* Enable the USB voltage detector */
  SET_BIT (PWR->CR3, PWR_CR3_USB33DEN);
 8109c80:	4b05      	ldr	r3, [pc, #20]	; (8109c98 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 8109c82:	68db      	ldr	r3, [r3, #12]
 8109c84:	4a04      	ldr	r2, [pc, #16]	; (8109c98 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 8109c86:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8109c8a:	60d3      	str	r3, [r2, #12]
}
 8109c8c:	bf00      	nop
 8109c8e:	46bd      	mov	sp, r7
 8109c90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8109c94:	4770      	bx	lr
 8109c96:	bf00      	nop
 8109c98:	58024800 	.word	0x58024800

08109c9c <HAL_QSPI_Init>:
  *        in the QSPI_InitTypeDef and initialize the associated handle.
  * @param hqspi QSPI handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Init(QSPI_HandleTypeDef *hqspi)
{
 8109c9c:	b580      	push	{r7, lr}
 8109c9e:	b086      	sub	sp, #24
 8109ca0:	af02      	add	r7, sp, #8
 8109ca2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 8109ca4:	f7fd fcba 	bl	810761c <HAL_GetTick>
 8109ca8:	60f8      	str	r0, [r7, #12]

  /* Check the QSPI handle allocation */
  if(hqspi == NULL)
 8109caa:	687b      	ldr	r3, [r7, #4]
 8109cac:	2b00      	cmp	r3, #0
 8109cae:	d101      	bne.n	8109cb4 <HAL_QSPI_Init+0x18>
  {
    return HAL_ERROR;
 8109cb0:	2301      	movs	r3, #1
 8109cb2:	e061      	b.n	8109d78 <HAL_QSPI_Init+0xdc>
  if (hqspi->Init.DualFlash != QSPI_DUALFLASH_ENABLE )
  {
    assert_param(IS_QSPI_FLASH_ID(hqspi->Init.FlashID));
  }

  if(hqspi->State == HAL_QSPI_STATE_RESET)
 8109cb4:	687b      	ldr	r3, [r7, #4]
 8109cb6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8109cba:	b2db      	uxtb	r3, r3
 8109cbc:	2b00      	cmp	r3, #0
 8109cbe:	d107      	bne.n	8109cd0 <HAL_QSPI_Init+0x34>

    /* Init the low level hardware */
    hqspi->MspInitCallback(hqspi);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_QSPI_MspInit(hqspi);
 8109cc0:	6878      	ldr	r0, [r7, #4]
 8109cc2:	f7f7 fd41 	bl	8101748 <HAL_QSPI_MspInit>
#endif

    /* Configure the default timeout for the QSPI memory access */
    HAL_QSPI_SetTimeout(hqspi, HAL_QSPI_TIMEOUT_DEFAULT_VALUE);
 8109cc6:	f241 3188 	movw	r1, #5000	; 0x1388
 8109cca:	6878      	ldr	r0, [r7, #4]
 8109ccc:	f000 f85a 	bl	8109d84 <HAL_QSPI_SetTimeout>
  }

  /* Configure QSPI FIFO Threshold */
  MODIFY_REG(hqspi->Instance->CR, QUADSPI_CR_FTHRES,
 8109cd0:	687b      	ldr	r3, [r7, #4]
 8109cd2:	681b      	ldr	r3, [r3, #0]
 8109cd4:	681b      	ldr	r3, [r3, #0]
 8109cd6:	f423 51f8 	bic.w	r1, r3, #7936	; 0x1f00
 8109cda:	687b      	ldr	r3, [r7, #4]
 8109cdc:	689b      	ldr	r3, [r3, #8]
 8109cde:	3b01      	subs	r3, #1
 8109ce0:	021a      	lsls	r2, r3, #8
 8109ce2:	687b      	ldr	r3, [r7, #4]
 8109ce4:	681b      	ldr	r3, [r3, #0]
 8109ce6:	430a      	orrs	r2, r1
 8109ce8:	601a      	str	r2, [r3, #0]
             ((hqspi->Init.FifoThreshold - 1U) << QUADSPI_CR_FTHRES_Pos));

  /* Wait till BUSY flag reset */
  status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 8109cea:	687b      	ldr	r3, [r7, #4]
 8109cec:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8109cee:	9300      	str	r3, [sp, #0]
 8109cf0:	68fb      	ldr	r3, [r7, #12]
 8109cf2:	2200      	movs	r2, #0
 8109cf4:	2120      	movs	r1, #32
 8109cf6:	6878      	ldr	r0, [r7, #4]
 8109cf8:	f000 f852 	bl	8109da0 <QSPI_WaitFlagStateUntilTimeout>
 8109cfc:	4603      	mov	r3, r0
 8109cfe:	72fb      	strb	r3, [r7, #11]

  if(status == HAL_OK)
 8109d00:	7afb      	ldrb	r3, [r7, #11]
 8109d02:	2b00      	cmp	r3, #0
 8109d04:	d137      	bne.n	8109d76 <HAL_QSPI_Init+0xda>
  {
    /* Configure QSPI Clock Prescaler and Sample Shift */
    MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PRESCALER | QUADSPI_CR_SSHIFT | QUADSPI_CR_FSEL | QUADSPI_CR_DFM),
 8109d06:	687b      	ldr	r3, [r7, #4]
 8109d08:	681b      	ldr	r3, [r3, #0]
 8109d0a:	681b      	ldr	r3, [r3, #0]
 8109d0c:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8109d10:	f023 03d0 	bic.w	r3, r3, #208	; 0xd0
 8109d14:	687a      	ldr	r2, [r7, #4]
 8109d16:	6852      	ldr	r2, [r2, #4]
 8109d18:	0611      	lsls	r1, r2, #24
 8109d1a:	687a      	ldr	r2, [r7, #4]
 8109d1c:	68d2      	ldr	r2, [r2, #12]
 8109d1e:	4311      	orrs	r1, r2
 8109d20:	687a      	ldr	r2, [r7, #4]
 8109d22:	69d2      	ldr	r2, [r2, #28]
 8109d24:	4311      	orrs	r1, r2
 8109d26:	687a      	ldr	r2, [r7, #4]
 8109d28:	6a12      	ldr	r2, [r2, #32]
 8109d2a:	4311      	orrs	r1, r2
 8109d2c:	687a      	ldr	r2, [r7, #4]
 8109d2e:	6812      	ldr	r2, [r2, #0]
 8109d30:	430b      	orrs	r3, r1
 8109d32:	6013      	str	r3, [r2, #0]
               ((hqspi->Init.ClockPrescaler << QUADSPI_CR_PRESCALER_Pos) |
                hqspi->Init.SampleShifting  | hqspi->Init.FlashID | hqspi->Init.DualFlash));

    /* Configure QSPI Flash Size, CS High Time and Clock Mode */
    MODIFY_REG(hqspi->Instance->DCR, (QUADSPI_DCR_FSIZE | QUADSPI_DCR_CSHT | QUADSPI_DCR_CKMODE),
 8109d34:	687b      	ldr	r3, [r7, #4]
 8109d36:	681b      	ldr	r3, [r3, #0]
 8109d38:	685a      	ldr	r2, [r3, #4]
 8109d3a:	4b11      	ldr	r3, [pc, #68]	; (8109d80 <HAL_QSPI_Init+0xe4>)
 8109d3c:	4013      	ands	r3, r2
 8109d3e:	687a      	ldr	r2, [r7, #4]
 8109d40:	6912      	ldr	r2, [r2, #16]
 8109d42:	0411      	lsls	r1, r2, #16
 8109d44:	687a      	ldr	r2, [r7, #4]
 8109d46:	6952      	ldr	r2, [r2, #20]
 8109d48:	4311      	orrs	r1, r2
 8109d4a:	687a      	ldr	r2, [r7, #4]
 8109d4c:	6992      	ldr	r2, [r2, #24]
 8109d4e:	4311      	orrs	r1, r2
 8109d50:	687a      	ldr	r2, [r7, #4]
 8109d52:	6812      	ldr	r2, [r2, #0]
 8109d54:	430b      	orrs	r3, r1
 8109d56:	6053      	str	r3, [r2, #4]
               ((hqspi->Init.FlashSize << QUADSPI_DCR_FSIZE_Pos) |
                hqspi->Init.ChipSelectHighTime | hqspi->Init.ClockMode));

    /* Enable the QSPI peripheral */
    __HAL_QSPI_ENABLE(hqspi);
 8109d58:	687b      	ldr	r3, [r7, #4]
 8109d5a:	681b      	ldr	r3, [r3, #0]
 8109d5c:	681a      	ldr	r2, [r3, #0]
 8109d5e:	687b      	ldr	r3, [r7, #4]
 8109d60:	681b      	ldr	r3, [r3, #0]
 8109d62:	f042 0201 	orr.w	r2, r2, #1
 8109d66:	601a      	str	r2, [r3, #0]

    /* Set QSPI error code to none */
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 8109d68:	687b      	ldr	r3, [r7, #4]
 8109d6a:	2200      	movs	r2, #0
 8109d6c:	645a      	str	r2, [r3, #68]	; 0x44

    /* Initialize the QSPI state */
    hqspi->State = HAL_QSPI_STATE_READY;
 8109d6e:	687b      	ldr	r3, [r7, #4]
 8109d70:	2201      	movs	r2, #1
 8109d72:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  }

  /* Return function status */
  return status;
 8109d76:	7afb      	ldrb	r3, [r7, #11]
}
 8109d78:	4618      	mov	r0, r3
 8109d7a:	3710      	adds	r7, #16
 8109d7c:	46bd      	mov	sp, r7
 8109d7e:	bd80      	pop	{r7, pc}
 8109d80:	ffe0f8fe 	.word	0xffe0f8fe

08109d84 <HAL_QSPI_SetTimeout>:
  * @param  hqspi QSPI handle.
  * @param  Timeout Timeout for the QSPI memory access.
  * @retval None
  */
void HAL_QSPI_SetTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Timeout)
{
 8109d84:	b480      	push	{r7}
 8109d86:	b083      	sub	sp, #12
 8109d88:	af00      	add	r7, sp, #0
 8109d8a:	6078      	str	r0, [r7, #4]
 8109d8c:	6039      	str	r1, [r7, #0]
  hqspi->Timeout = Timeout;
 8109d8e:	687b      	ldr	r3, [r7, #4]
 8109d90:	683a      	ldr	r2, [r7, #0]
 8109d92:	649a      	str	r2, [r3, #72]	; 0x48
}
 8109d94:	bf00      	nop
 8109d96:	370c      	adds	r7, #12
 8109d98:	46bd      	mov	sp, r7
 8109d9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8109d9e:	4770      	bx	lr

08109da0 <QSPI_WaitFlagStateUntilTimeout>:
  * @param  Timeout Duration of the timeout
  * @retval HAL status
  */
static HAL_StatusTypeDef QSPI_WaitFlagStateUntilTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Flag,
                                                        FlagStatus State, uint32_t Tickstart, uint32_t Timeout)
{
 8109da0:	b580      	push	{r7, lr}
 8109da2:	b084      	sub	sp, #16
 8109da4:	af00      	add	r7, sp, #0
 8109da6:	60f8      	str	r0, [r7, #12]
 8109da8:	60b9      	str	r1, [r7, #8]
 8109daa:	603b      	str	r3, [r7, #0]
 8109dac:	4613      	mov	r3, r2
 8109dae:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is in expected state */
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 8109db0:	e01a      	b.n	8109de8 <QSPI_WaitFlagStateUntilTimeout+0x48>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8109db2:	69bb      	ldr	r3, [r7, #24]
 8109db4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8109db8:	d016      	beq.n	8109de8 <QSPI_WaitFlagStateUntilTimeout+0x48>
    {
      if(((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8109dba:	f7fd fc2f 	bl	810761c <HAL_GetTick>
 8109dbe:	4602      	mov	r2, r0
 8109dc0:	683b      	ldr	r3, [r7, #0]
 8109dc2:	1ad3      	subs	r3, r2, r3
 8109dc4:	69ba      	ldr	r2, [r7, #24]
 8109dc6:	429a      	cmp	r2, r3
 8109dc8:	d302      	bcc.n	8109dd0 <QSPI_WaitFlagStateUntilTimeout+0x30>
 8109dca:	69bb      	ldr	r3, [r7, #24]
 8109dcc:	2b00      	cmp	r3, #0
 8109dce:	d10b      	bne.n	8109de8 <QSPI_WaitFlagStateUntilTimeout+0x48>
      {
        hqspi->State     = HAL_QSPI_STATE_ERROR;
 8109dd0:	68fb      	ldr	r3, [r7, #12]
 8109dd2:	2204      	movs	r2, #4
 8109dd4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hqspi->ErrorCode |= HAL_QSPI_ERROR_TIMEOUT;
 8109dd8:	68fb      	ldr	r3, [r7, #12]
 8109dda:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8109ddc:	f043 0201 	orr.w	r2, r3, #1
 8109de0:	68fb      	ldr	r3, [r7, #12]
 8109de2:	645a      	str	r2, [r3, #68]	; 0x44

        return HAL_ERROR;
 8109de4:	2301      	movs	r3, #1
 8109de6:	e00e      	b.n	8109e06 <QSPI_WaitFlagStateUntilTimeout+0x66>
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 8109de8:	68fb      	ldr	r3, [r7, #12]
 8109dea:	681b      	ldr	r3, [r3, #0]
 8109dec:	689a      	ldr	r2, [r3, #8]
 8109dee:	68bb      	ldr	r3, [r7, #8]
 8109df0:	4013      	ands	r3, r2
 8109df2:	2b00      	cmp	r3, #0
 8109df4:	bf14      	ite	ne
 8109df6:	2301      	movne	r3, #1
 8109df8:	2300      	moveq	r3, #0
 8109dfa:	b2db      	uxtb	r3, r3
 8109dfc:	461a      	mov	r2, r3
 8109dfe:	79fb      	ldrb	r3, [r7, #7]
 8109e00:	429a      	cmp	r2, r3
 8109e02:	d1d6      	bne.n	8109db2 <QSPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8109e04:	2300      	movs	r3, #0
}
 8109e06:	4618      	mov	r0, r3
 8109e08:	3710      	adds	r7, #16
 8109e0a:	46bd      	mov	sp, r7
 8109e0c:	bd80      	pop	{r7, pc}
	...

08109e10 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8109e10:	b480      	push	{r7}
 8109e12:	b089      	sub	sp, #36	; 0x24
 8109e14:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8109e16:	4bb3      	ldr	r3, [pc, #716]	; (810a0e4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8109e18:	691b      	ldr	r3, [r3, #16]
 8109e1a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8109e1e:	2b18      	cmp	r3, #24
 8109e20:	f200 8155 	bhi.w	810a0ce <HAL_RCC_GetSysClockFreq+0x2be>
 8109e24:	a201      	add	r2, pc, #4	; (adr r2, 8109e2c <HAL_RCC_GetSysClockFreq+0x1c>)
 8109e26:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8109e2a:	bf00      	nop
 8109e2c:	08109e91 	.word	0x08109e91
 8109e30:	0810a0cf 	.word	0x0810a0cf
 8109e34:	0810a0cf 	.word	0x0810a0cf
 8109e38:	0810a0cf 	.word	0x0810a0cf
 8109e3c:	0810a0cf 	.word	0x0810a0cf
 8109e40:	0810a0cf 	.word	0x0810a0cf
 8109e44:	0810a0cf 	.word	0x0810a0cf
 8109e48:	0810a0cf 	.word	0x0810a0cf
 8109e4c:	08109eb7 	.word	0x08109eb7
 8109e50:	0810a0cf 	.word	0x0810a0cf
 8109e54:	0810a0cf 	.word	0x0810a0cf
 8109e58:	0810a0cf 	.word	0x0810a0cf
 8109e5c:	0810a0cf 	.word	0x0810a0cf
 8109e60:	0810a0cf 	.word	0x0810a0cf
 8109e64:	0810a0cf 	.word	0x0810a0cf
 8109e68:	0810a0cf 	.word	0x0810a0cf
 8109e6c:	08109ebd 	.word	0x08109ebd
 8109e70:	0810a0cf 	.word	0x0810a0cf
 8109e74:	0810a0cf 	.word	0x0810a0cf
 8109e78:	0810a0cf 	.word	0x0810a0cf
 8109e7c:	0810a0cf 	.word	0x0810a0cf
 8109e80:	0810a0cf 	.word	0x0810a0cf
 8109e84:	0810a0cf 	.word	0x0810a0cf
 8109e88:	0810a0cf 	.word	0x0810a0cf
 8109e8c:	08109ec3 	.word	0x08109ec3
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8109e90:	4b94      	ldr	r3, [pc, #592]	; (810a0e4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8109e92:	681b      	ldr	r3, [r3, #0]
 8109e94:	f003 0320 	and.w	r3, r3, #32
 8109e98:	2b00      	cmp	r3, #0
 8109e9a:	d009      	beq.n	8109eb0 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8109e9c:	4b91      	ldr	r3, [pc, #580]	; (810a0e4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8109e9e:	681b      	ldr	r3, [r3, #0]
 8109ea0:	08db      	lsrs	r3, r3, #3
 8109ea2:	f003 0303 	and.w	r3, r3, #3
 8109ea6:	4a90      	ldr	r2, [pc, #576]	; (810a0e8 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8109ea8:	fa22 f303 	lsr.w	r3, r2, r3
 8109eac:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 8109eae:	e111      	b.n	810a0d4 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8109eb0:	4b8d      	ldr	r3, [pc, #564]	; (810a0e8 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8109eb2:	61bb      	str	r3, [r7, #24]
      break;
 8109eb4:	e10e      	b.n	810a0d4 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 8109eb6:	4b8d      	ldr	r3, [pc, #564]	; (810a0ec <HAL_RCC_GetSysClockFreq+0x2dc>)
 8109eb8:	61bb      	str	r3, [r7, #24]
      break;
 8109eba:	e10b      	b.n	810a0d4 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 8109ebc:	4b8c      	ldr	r3, [pc, #560]	; (810a0f0 <HAL_RCC_GetSysClockFreq+0x2e0>)
 8109ebe:	61bb      	str	r3, [r7, #24]
      break;
 8109ec0:	e108      	b.n	810a0d4 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8109ec2:	4b88      	ldr	r3, [pc, #544]	; (810a0e4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8109ec4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8109ec6:	f003 0303 	and.w	r3, r3, #3
 8109eca:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 8109ecc:	4b85      	ldr	r3, [pc, #532]	; (810a0e4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8109ece:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8109ed0:	091b      	lsrs	r3, r3, #4
 8109ed2:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8109ed6:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 8109ed8:	4b82      	ldr	r3, [pc, #520]	; (810a0e4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8109eda:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8109edc:	f003 0301 	and.w	r3, r3, #1
 8109ee0:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8109ee2:	4b80      	ldr	r3, [pc, #512]	; (810a0e4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8109ee4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8109ee6:	08db      	lsrs	r3, r3, #3
 8109ee8:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8109eec:	68fa      	ldr	r2, [r7, #12]
 8109eee:	fb02 f303 	mul.w	r3, r2, r3
 8109ef2:	ee07 3a90 	vmov	s15, r3
 8109ef6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8109efa:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 8109efe:	693b      	ldr	r3, [r7, #16]
 8109f00:	2b00      	cmp	r3, #0
 8109f02:	f000 80e1 	beq.w	810a0c8 <HAL_RCC_GetSysClockFreq+0x2b8>
 8109f06:	697b      	ldr	r3, [r7, #20]
 8109f08:	2b02      	cmp	r3, #2
 8109f0a:	f000 8083 	beq.w	810a014 <HAL_RCC_GetSysClockFreq+0x204>
 8109f0e:	697b      	ldr	r3, [r7, #20]
 8109f10:	2b02      	cmp	r3, #2
 8109f12:	f200 80a1 	bhi.w	810a058 <HAL_RCC_GetSysClockFreq+0x248>
 8109f16:	697b      	ldr	r3, [r7, #20]
 8109f18:	2b00      	cmp	r3, #0
 8109f1a:	d003      	beq.n	8109f24 <HAL_RCC_GetSysClockFreq+0x114>
 8109f1c:	697b      	ldr	r3, [r7, #20]
 8109f1e:	2b01      	cmp	r3, #1
 8109f20:	d056      	beq.n	8109fd0 <HAL_RCC_GetSysClockFreq+0x1c0>
 8109f22:	e099      	b.n	810a058 <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8109f24:	4b6f      	ldr	r3, [pc, #444]	; (810a0e4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8109f26:	681b      	ldr	r3, [r3, #0]
 8109f28:	f003 0320 	and.w	r3, r3, #32
 8109f2c:	2b00      	cmp	r3, #0
 8109f2e:	d02d      	beq.n	8109f8c <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8109f30:	4b6c      	ldr	r3, [pc, #432]	; (810a0e4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8109f32:	681b      	ldr	r3, [r3, #0]
 8109f34:	08db      	lsrs	r3, r3, #3
 8109f36:	f003 0303 	and.w	r3, r3, #3
 8109f3a:	4a6b      	ldr	r2, [pc, #428]	; (810a0e8 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8109f3c:	fa22 f303 	lsr.w	r3, r2, r3
 8109f40:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8109f42:	687b      	ldr	r3, [r7, #4]
 8109f44:	ee07 3a90 	vmov	s15, r3
 8109f48:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8109f4c:	693b      	ldr	r3, [r7, #16]
 8109f4e:	ee07 3a90 	vmov	s15, r3
 8109f52:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8109f56:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8109f5a:	4b62      	ldr	r3, [pc, #392]	; (810a0e4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8109f5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8109f5e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8109f62:	ee07 3a90 	vmov	s15, r3
 8109f66:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8109f6a:	ed97 6a02 	vldr	s12, [r7, #8]
 8109f6e:	eddf 5a61 	vldr	s11, [pc, #388]	; 810a0f4 <HAL_RCC_GetSysClockFreq+0x2e4>
 8109f72:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8109f76:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8109f7a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8109f7e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8109f82:	ee67 7a27 	vmul.f32	s15, s14, s15
 8109f86:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 8109f8a:	e087      	b.n	810a09c <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8109f8c:	693b      	ldr	r3, [r7, #16]
 8109f8e:	ee07 3a90 	vmov	s15, r3
 8109f92:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8109f96:	eddf 6a58 	vldr	s13, [pc, #352]	; 810a0f8 <HAL_RCC_GetSysClockFreq+0x2e8>
 8109f9a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8109f9e:	4b51      	ldr	r3, [pc, #324]	; (810a0e4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8109fa0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8109fa2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8109fa6:	ee07 3a90 	vmov	s15, r3
 8109faa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8109fae:	ed97 6a02 	vldr	s12, [r7, #8]
 8109fb2:	eddf 5a50 	vldr	s11, [pc, #320]	; 810a0f4 <HAL_RCC_GetSysClockFreq+0x2e4>
 8109fb6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8109fba:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8109fbe:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8109fc2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8109fc6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8109fca:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8109fce:	e065      	b.n	810a09c <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8109fd0:	693b      	ldr	r3, [r7, #16]
 8109fd2:	ee07 3a90 	vmov	s15, r3
 8109fd6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8109fda:	eddf 6a48 	vldr	s13, [pc, #288]	; 810a0fc <HAL_RCC_GetSysClockFreq+0x2ec>
 8109fde:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8109fe2:	4b40      	ldr	r3, [pc, #256]	; (810a0e4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8109fe4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8109fe6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8109fea:	ee07 3a90 	vmov	s15, r3
 8109fee:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8109ff2:	ed97 6a02 	vldr	s12, [r7, #8]
 8109ff6:	eddf 5a3f 	vldr	s11, [pc, #252]	; 810a0f4 <HAL_RCC_GetSysClockFreq+0x2e4>
 8109ffa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8109ffe:	ee76 7aa7 	vadd.f32	s15, s13, s15
 810a002:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 810a006:	ee77 7aa6 	vadd.f32	s15, s15, s13
 810a00a:	ee67 7a27 	vmul.f32	s15, s14, s15
 810a00e:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 810a012:	e043      	b.n	810a09c <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 810a014:	693b      	ldr	r3, [r7, #16]
 810a016:	ee07 3a90 	vmov	s15, r3
 810a01a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 810a01e:	eddf 6a38 	vldr	s13, [pc, #224]	; 810a100 <HAL_RCC_GetSysClockFreq+0x2f0>
 810a022:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 810a026:	4b2f      	ldr	r3, [pc, #188]	; (810a0e4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 810a028:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 810a02a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 810a02e:	ee07 3a90 	vmov	s15, r3
 810a032:	eef8 6a67 	vcvt.f32.u32	s13, s15
 810a036:	ed97 6a02 	vldr	s12, [r7, #8]
 810a03a:	eddf 5a2e 	vldr	s11, [pc, #184]	; 810a0f4 <HAL_RCC_GetSysClockFreq+0x2e4>
 810a03e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 810a042:	ee76 7aa7 	vadd.f32	s15, s13, s15
 810a046:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 810a04a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 810a04e:	ee67 7a27 	vmul.f32	s15, s14, s15
 810a052:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 810a056:	e021      	b.n	810a09c <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 810a058:	693b      	ldr	r3, [r7, #16]
 810a05a:	ee07 3a90 	vmov	s15, r3
 810a05e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 810a062:	eddf 6a26 	vldr	s13, [pc, #152]	; 810a0fc <HAL_RCC_GetSysClockFreq+0x2ec>
 810a066:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 810a06a:	4b1e      	ldr	r3, [pc, #120]	; (810a0e4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 810a06c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 810a06e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 810a072:	ee07 3a90 	vmov	s15, r3
 810a076:	eef8 6a67 	vcvt.f32.u32	s13, s15
 810a07a:	ed97 6a02 	vldr	s12, [r7, #8]
 810a07e:	eddf 5a1d 	vldr	s11, [pc, #116]	; 810a0f4 <HAL_RCC_GetSysClockFreq+0x2e4>
 810a082:	eec6 7a25 	vdiv.f32	s15, s12, s11
 810a086:	ee76 7aa7 	vadd.f32	s15, s13, s15
 810a08a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 810a08e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 810a092:	ee67 7a27 	vmul.f32	s15, s14, s15
 810a096:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 810a09a:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 810a09c:	4b11      	ldr	r3, [pc, #68]	; (810a0e4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 810a09e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 810a0a0:	0a5b      	lsrs	r3, r3, #9
 810a0a2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 810a0a6:	3301      	adds	r3, #1
 810a0a8:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 810a0aa:	683b      	ldr	r3, [r7, #0]
 810a0ac:	ee07 3a90 	vmov	s15, r3
 810a0b0:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 810a0b4:	edd7 6a07 	vldr	s13, [r7, #28]
 810a0b8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 810a0bc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 810a0c0:	ee17 3a90 	vmov	r3, s15
 810a0c4:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 810a0c6:	e005      	b.n	810a0d4 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 810a0c8:	2300      	movs	r3, #0
 810a0ca:	61bb      	str	r3, [r7, #24]
      break;
 810a0cc:	e002      	b.n	810a0d4 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 810a0ce:	4b07      	ldr	r3, [pc, #28]	; (810a0ec <HAL_RCC_GetSysClockFreq+0x2dc>)
 810a0d0:	61bb      	str	r3, [r7, #24]
      break;
 810a0d2:	bf00      	nop
  }

  return sysclockfreq;
 810a0d4:	69bb      	ldr	r3, [r7, #24]
}
 810a0d6:	4618      	mov	r0, r3
 810a0d8:	3724      	adds	r7, #36	; 0x24
 810a0da:	46bd      	mov	sp, r7
 810a0dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 810a0e0:	4770      	bx	lr
 810a0e2:	bf00      	nop
 810a0e4:	58024400 	.word	0x58024400
 810a0e8:	03d09000 	.word	0x03d09000
 810a0ec:	003d0900 	.word	0x003d0900
 810a0f0:	017d7840 	.word	0x017d7840
 810a0f4:	46000000 	.word	0x46000000
 810a0f8:	4c742400 	.word	0x4c742400
 810a0fc:	4a742400 	.word	0x4a742400
 810a100:	4bbebc20 	.word	0x4bbebc20

0810a104 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 810a104:	b580      	push	{r7, lr}
 810a106:	b082      	sub	sp, #8
 810a108:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 810a10a:	f7ff fe81 	bl	8109e10 <HAL_RCC_GetSysClockFreq>
 810a10e:	4602      	mov	r2, r0
 810a110:	4b11      	ldr	r3, [pc, #68]	; (810a158 <HAL_RCC_GetHCLKFreq+0x54>)
 810a112:	699b      	ldr	r3, [r3, #24]
 810a114:	0a1b      	lsrs	r3, r3, #8
 810a116:	f003 030f 	and.w	r3, r3, #15
 810a11a:	4910      	ldr	r1, [pc, #64]	; (810a15c <HAL_RCC_GetHCLKFreq+0x58>)
 810a11c:	5ccb      	ldrb	r3, [r1, r3]
 810a11e:	f003 031f 	and.w	r3, r3, #31
 810a122:	fa22 f303 	lsr.w	r3, r2, r3
 810a126:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 810a128:	4b0b      	ldr	r3, [pc, #44]	; (810a158 <HAL_RCC_GetHCLKFreq+0x54>)
 810a12a:	699b      	ldr	r3, [r3, #24]
 810a12c:	f003 030f 	and.w	r3, r3, #15
 810a130:	4a0a      	ldr	r2, [pc, #40]	; (810a15c <HAL_RCC_GetHCLKFreq+0x58>)
 810a132:	5cd3      	ldrb	r3, [r2, r3]
 810a134:	f003 031f 	and.w	r3, r3, #31
 810a138:	687a      	ldr	r2, [r7, #4]
 810a13a:	fa22 f303 	lsr.w	r3, r2, r3
 810a13e:	4a08      	ldr	r2, [pc, #32]	; (810a160 <HAL_RCC_GetHCLKFreq+0x5c>)
 810a140:	6013      	str	r3, [r2, #0]
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE) >> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
 810a142:	4b07      	ldr	r3, [pc, #28]	; (810a160 <HAL_RCC_GetHCLKFreq+0x5c>)
 810a144:	681b      	ldr	r3, [r3, #0]
 810a146:	4a07      	ldr	r2, [pc, #28]	; (810a164 <HAL_RCC_GetHCLKFreq+0x60>)
 810a148:	6013      	str	r3, [r2, #0]
#else
  SystemCoreClock = common_system_clock;
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 810a14a:	4b05      	ldr	r3, [pc, #20]	; (810a160 <HAL_RCC_GetHCLKFreq+0x5c>)
 810a14c:	681b      	ldr	r3, [r3, #0]
}
 810a14e:	4618      	mov	r0, r3
 810a150:	3708      	adds	r7, #8
 810a152:	46bd      	mov	sp, r7
 810a154:	bd80      	pop	{r7, pc}
 810a156:	bf00      	nop
 810a158:	58024400 	.word	0x58024400
 810a15c:	08111e0c 	.word	0x08111e0c
 810a160:	10000004 	.word	0x10000004
 810a164:	10000000 	.word	0x10000000

0810a168 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 810a168:	b580      	push	{r7, lr}
 810a16a:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 810a16c:	f7ff ffca 	bl	810a104 <HAL_RCC_GetHCLKFreq>
 810a170:	4602      	mov	r2, r0
 810a172:	4b06      	ldr	r3, [pc, #24]	; (810a18c <HAL_RCC_GetPCLK1Freq+0x24>)
 810a174:	69db      	ldr	r3, [r3, #28]
 810a176:	091b      	lsrs	r3, r3, #4
 810a178:	f003 0307 	and.w	r3, r3, #7
 810a17c:	4904      	ldr	r1, [pc, #16]	; (810a190 <HAL_RCC_GetPCLK1Freq+0x28>)
 810a17e:	5ccb      	ldrb	r3, [r1, r3]
 810a180:	f003 031f 	and.w	r3, r3, #31
 810a184:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 810a188:	4618      	mov	r0, r3
 810a18a:	bd80      	pop	{r7, pc}
 810a18c:	58024400 	.word	0x58024400
 810a190:	08111e0c 	.word	0x08111e0c

0810a194 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 810a194:	b580      	push	{r7, lr}
 810a196:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 810a198:	f7ff ffb4 	bl	810a104 <HAL_RCC_GetHCLKFreq>
 810a19c:	4602      	mov	r2, r0
 810a19e:	4b06      	ldr	r3, [pc, #24]	; (810a1b8 <HAL_RCC_GetPCLK2Freq+0x24>)
 810a1a0:	69db      	ldr	r3, [r3, #28]
 810a1a2:	0a1b      	lsrs	r3, r3, #8
 810a1a4:	f003 0307 	and.w	r3, r3, #7
 810a1a8:	4904      	ldr	r1, [pc, #16]	; (810a1bc <HAL_RCC_GetPCLK2Freq+0x28>)
 810a1aa:	5ccb      	ldrb	r3, [r1, r3]
 810a1ac:	f003 031f 	and.w	r3, r3, #31
 810a1b0:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 810a1b4:	4618      	mov	r0, r3
 810a1b6:	bd80      	pop	{r7, pc}
 810a1b8:	58024400 	.word	0x58024400
 810a1bc:	08111e0c 	.word	0x08111e0c

0810a1c0 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 810a1c0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 810a1c4:	b0cc      	sub	sp, #304	; 0x130
 810a1c6:	af00      	add	r7, sp, #0
 810a1c8:	f8c7 011c 	str.w	r0, [r7, #284]	; 0x11c
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 810a1cc:	2300      	movs	r3, #0
 810a1ce:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 810a1d2:	2300      	movs	r3, #0
 810a1d4:	f887 312e 	strb.w	r3, [r7, #302]	; 0x12e

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 810a1d8:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 810a1dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 810a1e0:	f002 6400 	and.w	r4, r2, #134217728	; 0x8000000
 810a1e4:	2500      	movs	r5, #0
 810a1e6:	ea54 0305 	orrs.w	r3, r4, r5
 810a1ea:	d049      	beq.n	810a280 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 810a1ec:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 810a1f0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 810a1f2:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 810a1f6:	d02f      	beq.n	810a258 <HAL_RCCEx_PeriphCLKConfig+0x98>
 810a1f8:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 810a1fc:	d828      	bhi.n	810a250 <HAL_RCCEx_PeriphCLKConfig+0x90>
 810a1fe:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 810a202:	d01a      	beq.n	810a23a <HAL_RCCEx_PeriphCLKConfig+0x7a>
 810a204:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 810a208:	d822      	bhi.n	810a250 <HAL_RCCEx_PeriphCLKConfig+0x90>
 810a20a:	2b00      	cmp	r3, #0
 810a20c:	d003      	beq.n	810a216 <HAL_RCCEx_PeriphCLKConfig+0x56>
 810a20e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 810a212:	d007      	beq.n	810a224 <HAL_RCCEx_PeriphCLKConfig+0x64>
 810a214:	e01c      	b.n	810a250 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 810a216:	4bb8      	ldr	r3, [pc, #736]	; (810a4f8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 810a218:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 810a21a:	4ab7      	ldr	r2, [pc, #732]	; (810a4f8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 810a21c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 810a220:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 810a222:	e01a      	b.n	810a25a <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 810a224:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 810a228:	3308      	adds	r3, #8
 810a22a:	2102      	movs	r1, #2
 810a22c:	4618      	mov	r0, r3
 810a22e:	f002 fba1 	bl	810c974 <RCCEx_PLL2_Config>
 810a232:	4603      	mov	r3, r0
 810a234:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 810a238:	e00f      	b.n	810a25a <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 810a23a:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 810a23e:	3328      	adds	r3, #40	; 0x28
 810a240:	2102      	movs	r1, #2
 810a242:	4618      	mov	r0, r3
 810a244:	f002 fc48 	bl	810cad8 <RCCEx_PLL3_Config>
 810a248:	4603      	mov	r3, r0
 810a24a:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 810a24e:	e004      	b.n	810a25a <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 810a250:	2301      	movs	r3, #1
 810a252:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
        break;
 810a256:	e000      	b.n	810a25a <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 810a258:	bf00      	nop
    }

    if (ret == HAL_OK)
 810a25a:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 810a25e:	2b00      	cmp	r3, #0
 810a260:	d10a      	bne.n	810a278 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 810a262:	4ba5      	ldr	r3, [pc, #660]	; (810a4f8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 810a264:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 810a266:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 810a26a:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 810a26e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 810a270:	4aa1      	ldr	r2, [pc, #644]	; (810a4f8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 810a272:	430b      	orrs	r3, r1
 810a274:	6513      	str	r3, [r2, #80]	; 0x50
 810a276:	e003      	b.n	810a280 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 810a278:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 810a27c:	f887 312e 	strb.w	r3, [r7, #302]	; 0x12e
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 810a280:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 810a284:	e9d3 2300 	ldrd	r2, r3, [r3]
 810a288:	f402 7880 	and.w	r8, r2, #256	; 0x100
 810a28c:	f04f 0900 	mov.w	r9, #0
 810a290:	ea58 0309 	orrs.w	r3, r8, r9
 810a294:	d047      	beq.n	810a326 <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 810a296:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 810a29a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 810a29c:	2b04      	cmp	r3, #4
 810a29e:	d82a      	bhi.n	810a2f6 <HAL_RCCEx_PeriphCLKConfig+0x136>
 810a2a0:	a201      	add	r2, pc, #4	; (adr r2, 810a2a8 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 810a2a2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 810a2a6:	bf00      	nop
 810a2a8:	0810a2bd 	.word	0x0810a2bd
 810a2ac:	0810a2cb 	.word	0x0810a2cb
 810a2b0:	0810a2e1 	.word	0x0810a2e1
 810a2b4:	0810a2ff 	.word	0x0810a2ff
 810a2b8:	0810a2ff 	.word	0x0810a2ff
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 810a2bc:	4b8e      	ldr	r3, [pc, #568]	; (810a4f8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 810a2be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 810a2c0:	4a8d      	ldr	r2, [pc, #564]	; (810a4f8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 810a2c2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 810a2c6:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 810a2c8:	e01a      	b.n	810a300 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 810a2ca:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 810a2ce:	3308      	adds	r3, #8
 810a2d0:	2100      	movs	r1, #0
 810a2d2:	4618      	mov	r0, r3
 810a2d4:	f002 fb4e 	bl	810c974 <RCCEx_PLL2_Config>
 810a2d8:	4603      	mov	r3, r0
 810a2da:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 810a2de:	e00f      	b.n	810a300 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 810a2e0:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 810a2e4:	3328      	adds	r3, #40	; 0x28
 810a2e6:	2100      	movs	r1, #0
 810a2e8:	4618      	mov	r0, r3
 810a2ea:	f002 fbf5 	bl	810cad8 <RCCEx_PLL3_Config>
 810a2ee:	4603      	mov	r3, r0
 810a2f0:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 810a2f4:	e004      	b.n	810a300 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 810a2f6:	2301      	movs	r3, #1
 810a2f8:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
        break;
 810a2fc:	e000      	b.n	810a300 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 810a2fe:	bf00      	nop
    }

    if (ret == HAL_OK)
 810a300:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 810a304:	2b00      	cmp	r3, #0
 810a306:	d10a      	bne.n	810a31e <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 810a308:	4b7b      	ldr	r3, [pc, #492]	; (810a4f8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 810a30a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 810a30c:	f023 0107 	bic.w	r1, r3, #7
 810a310:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 810a314:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 810a316:	4a78      	ldr	r2, [pc, #480]	; (810a4f8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 810a318:	430b      	orrs	r3, r1
 810a31a:	6513      	str	r3, [r2, #80]	; 0x50
 810a31c:	e003      	b.n	810a326 <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 810a31e:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 810a322:	f887 312e 	strb.w	r3, [r7, #302]	; 0x12e
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 810a326:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 810a32a:	e9d3 2300 	ldrd	r2, r3, [r3]
 810a32e:	f402 7a00 	and.w	sl, r2, #512	; 0x200
 810a332:	f04f 0b00 	mov.w	fp, #0
 810a336:	ea5a 030b 	orrs.w	r3, sl, fp
 810a33a:	d04c      	beq.n	810a3d6 <HAL_RCCEx_PeriphCLKConfig+0x216>
  {
    switch (PeriphClkInit->Sai23ClockSelection)
 810a33c:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 810a340:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 810a342:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 810a346:	d030      	beq.n	810a3aa <HAL_RCCEx_PeriphCLKConfig+0x1ea>
 810a348:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 810a34c:	d829      	bhi.n	810a3a2 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 810a34e:	2bc0      	cmp	r3, #192	; 0xc0
 810a350:	d02d      	beq.n	810a3ae <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 810a352:	2bc0      	cmp	r3, #192	; 0xc0
 810a354:	d825      	bhi.n	810a3a2 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 810a356:	2b80      	cmp	r3, #128	; 0x80
 810a358:	d018      	beq.n	810a38c <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 810a35a:	2b80      	cmp	r3, #128	; 0x80
 810a35c:	d821      	bhi.n	810a3a2 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 810a35e:	2b00      	cmp	r3, #0
 810a360:	d002      	beq.n	810a368 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
 810a362:	2b40      	cmp	r3, #64	; 0x40
 810a364:	d007      	beq.n	810a376 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
 810a366:	e01c      	b.n	810a3a2 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    {
      case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 810a368:	4b63      	ldr	r3, [pc, #396]	; (810a4f8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 810a36a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 810a36c:	4a62      	ldr	r2, [pc, #392]	; (810a4f8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 810a36e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 810a372:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 810a374:	e01c      	b.n	810a3b0 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 810a376:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 810a37a:	3308      	adds	r3, #8
 810a37c:	2100      	movs	r1, #0
 810a37e:	4618      	mov	r0, r3
 810a380:	f002 faf8 	bl	810c974 <RCCEx_PLL2_Config>
 810a384:	4603      	mov	r3, r0
 810a386:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 810a38a:	e011      	b.n	810a3b0 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 810a38c:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 810a390:	3328      	adds	r3, #40	; 0x28
 810a392:	2100      	movs	r1, #0
 810a394:	4618      	mov	r0, r3
 810a396:	f002 fb9f 	bl	810cad8 <RCCEx_PLL3_Config>
 810a39a:	4603      	mov	r3, r0
 810a39c:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 810a3a0:	e006      	b.n	810a3b0 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
        /* SAI2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 810a3a2:	2301      	movs	r3, #1
 810a3a4:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
        break;
 810a3a8:	e002      	b.n	810a3b0 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 810a3aa:	bf00      	nop
 810a3ac:	e000      	b.n	810a3b0 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 810a3ae:	bf00      	nop
    }

    if (ret == HAL_OK)
 810a3b0:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 810a3b4:	2b00      	cmp	r3, #0
 810a3b6:	d10a      	bne.n	810a3ce <HAL_RCCEx_PeriphCLKConfig+0x20e>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 810a3b8:	4b4f      	ldr	r3, [pc, #316]	; (810a4f8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 810a3ba:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 810a3bc:	f423 71e0 	bic.w	r1, r3, #448	; 0x1c0
 810a3c0:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 810a3c4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 810a3c6:	4a4c      	ldr	r2, [pc, #304]	; (810a4f8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 810a3c8:	430b      	orrs	r3, r1
 810a3ca:	6513      	str	r3, [r2, #80]	; 0x50
 810a3cc:	e003      	b.n	810a3d6 <HAL_RCCEx_PeriphCLKConfig+0x216>
    }
    else
    {
      /* set overall return value */
      status = ret;
 810a3ce:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 810a3d2:	f887 312e 	strb.w	r3, [r7, #302]	; 0x12e
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 810a3d6:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 810a3da:	e9d3 2300 	ldrd	r2, r3, [r3]
 810a3de:	f402 6380 	and.w	r3, r2, #1024	; 0x400
 810a3e2:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 810a3e6:	2300      	movs	r3, #0
 810a3e8:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 810a3ec:	e9d7 1244 	ldrd	r1, r2, [r7, #272]	; 0x110
 810a3f0:	460b      	mov	r3, r1
 810a3f2:	4313      	orrs	r3, r2
 810a3f4:	d053      	beq.n	810a49e <HAL_RCCEx_PeriphCLKConfig+0x2de>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 810a3f6:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 810a3fa:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 810a3fe:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 810a402:	d035      	beq.n	810a470 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 810a404:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 810a408:	d82e      	bhi.n	810a468 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 810a40a:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 810a40e:	d031      	beq.n	810a474 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 810a410:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 810a414:	d828      	bhi.n	810a468 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 810a416:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 810a41a:	d01a      	beq.n	810a452 <HAL_RCCEx_PeriphCLKConfig+0x292>
 810a41c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 810a420:	d822      	bhi.n	810a468 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 810a422:	2b00      	cmp	r3, #0
 810a424:	d003      	beq.n	810a42e <HAL_RCCEx_PeriphCLKConfig+0x26e>
 810a426:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 810a42a:	d007      	beq.n	810a43c <HAL_RCCEx_PeriphCLKConfig+0x27c>
 810a42c:	e01c      	b.n	810a468 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 810a42e:	4b32      	ldr	r3, [pc, #200]	; (810a4f8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 810a430:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 810a432:	4a31      	ldr	r2, [pc, #196]	; (810a4f8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 810a434:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 810a438:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 810a43a:	e01c      	b.n	810a476 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 810a43c:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 810a440:	3308      	adds	r3, #8
 810a442:	2100      	movs	r1, #0
 810a444:	4618      	mov	r0, r3
 810a446:	f002 fa95 	bl	810c974 <RCCEx_PLL2_Config>
 810a44a:	4603      	mov	r3, r0
 810a44c:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 810a450:	e011      	b.n	810a476 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 810a452:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 810a456:	3328      	adds	r3, #40	; 0x28
 810a458:	2100      	movs	r1, #0
 810a45a:	4618      	mov	r0, r3
 810a45c:	f002 fb3c 	bl	810cad8 <RCCEx_PLL3_Config>
 810a460:	4603      	mov	r3, r0
 810a462:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 810a466:	e006      	b.n	810a476 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 810a468:	2301      	movs	r3, #1
 810a46a:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
        break;
 810a46e:	e002      	b.n	810a476 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 810a470:	bf00      	nop
 810a472:	e000      	b.n	810a476 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 810a474:	bf00      	nop
    }

    if (ret == HAL_OK)
 810a476:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 810a47a:	2b00      	cmp	r3, #0
 810a47c:	d10b      	bne.n	810a496 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 810a47e:	4b1e      	ldr	r3, [pc, #120]	; (810a4f8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 810a480:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 810a482:	f423 0160 	bic.w	r1, r3, #14680064	; 0xe00000
 810a486:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 810a48a:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 810a48e:	4a1a      	ldr	r2, [pc, #104]	; (810a4f8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 810a490:	430b      	orrs	r3, r1
 810a492:	6593      	str	r3, [r2, #88]	; 0x58
 810a494:	e003      	b.n	810a49e <HAL_RCCEx_PeriphCLKConfig+0x2de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 810a496:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 810a49a:	f887 312e 	strb.w	r3, [r7, #302]	; 0x12e
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 810a49e:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 810a4a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 810a4a6:	f402 6300 	and.w	r3, r2, #2048	; 0x800
 810a4aa:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 810a4ae:	2300      	movs	r3, #0
 810a4b0:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 810a4b4:	e9d7 1242 	ldrd	r1, r2, [r7, #264]	; 0x108
 810a4b8:	460b      	mov	r3, r1
 810a4ba:	4313      	orrs	r3, r2
 810a4bc:	d056      	beq.n	810a56c <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 810a4be:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 810a4c2:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 810a4c6:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 810a4ca:	d038      	beq.n	810a53e <HAL_RCCEx_PeriphCLKConfig+0x37e>
 810a4cc:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 810a4d0:	d831      	bhi.n	810a536 <HAL_RCCEx_PeriphCLKConfig+0x376>
 810a4d2:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 810a4d6:	d034      	beq.n	810a542 <HAL_RCCEx_PeriphCLKConfig+0x382>
 810a4d8:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 810a4dc:	d82b      	bhi.n	810a536 <HAL_RCCEx_PeriphCLKConfig+0x376>
 810a4de:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 810a4e2:	d01d      	beq.n	810a520 <HAL_RCCEx_PeriphCLKConfig+0x360>
 810a4e4:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 810a4e8:	d825      	bhi.n	810a536 <HAL_RCCEx_PeriphCLKConfig+0x376>
 810a4ea:	2b00      	cmp	r3, #0
 810a4ec:	d006      	beq.n	810a4fc <HAL_RCCEx_PeriphCLKConfig+0x33c>
 810a4ee:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 810a4f2:	d00a      	beq.n	810a50a <HAL_RCCEx_PeriphCLKConfig+0x34a>
 810a4f4:	e01f      	b.n	810a536 <HAL_RCCEx_PeriphCLKConfig+0x376>
 810a4f6:	bf00      	nop
 810a4f8:	58024400 	.word	0x58024400
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 810a4fc:	4ba2      	ldr	r3, [pc, #648]	; (810a788 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 810a4fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 810a500:	4aa1      	ldr	r2, [pc, #644]	; (810a788 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 810a502:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 810a506:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 810a508:	e01c      	b.n	810a544 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 810a50a:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 810a50e:	3308      	adds	r3, #8
 810a510:	2100      	movs	r1, #0
 810a512:	4618      	mov	r0, r3
 810a514:	f002 fa2e 	bl	810c974 <RCCEx_PLL2_Config>
 810a518:	4603      	mov	r3, r0
 810a51a:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 810a51e:	e011      	b.n	810a544 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 810a520:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 810a524:	3328      	adds	r3, #40	; 0x28
 810a526:	2100      	movs	r1, #0
 810a528:	4618      	mov	r0, r3
 810a52a:	f002 fad5 	bl	810cad8 <RCCEx_PLL3_Config>
 810a52e:	4603      	mov	r3, r0
 810a530:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 810a534:	e006      	b.n	810a544 <HAL_RCCEx_PeriphCLKConfig+0x384>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 810a536:	2301      	movs	r3, #1
 810a538:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
        break;
 810a53c:	e002      	b.n	810a544 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 810a53e:	bf00      	nop
 810a540:	e000      	b.n	810a544 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 810a542:	bf00      	nop
    }

    if (ret == HAL_OK)
 810a544:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 810a548:	2b00      	cmp	r3, #0
 810a54a:	d10b      	bne.n	810a564 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 810a54c:	4b8e      	ldr	r3, [pc, #568]	; (810a788 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 810a54e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 810a550:	f023 61e0 	bic.w	r1, r3, #117440512	; 0x7000000
 810a554:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 810a558:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 810a55c:	4a8a      	ldr	r2, [pc, #552]	; (810a788 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 810a55e:	430b      	orrs	r3, r1
 810a560:	6593      	str	r3, [r2, #88]	; 0x58
 810a562:	e003      	b.n	810a56c <HAL_RCCEx_PeriphCLKConfig+0x3ac>
    }
    else
    {
      /* set overall return value */
      status = ret;
 810a564:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 810a568:	f887 312e 	strb.w	r3, [r7, #302]	; 0x12e
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 810a56c:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 810a570:	e9d3 2300 	ldrd	r2, r3, [r3]
 810a574:	f002 7300 	and.w	r3, r2, #33554432	; 0x2000000
 810a578:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 810a57c:	2300      	movs	r3, #0
 810a57e:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 810a582:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	; 0x100
 810a586:	460b      	mov	r3, r1
 810a588:	4313      	orrs	r3, r2
 810a58a:	d03a      	beq.n	810a602 <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    switch (PeriphClkInit->QspiClockSelection)
 810a58c:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 810a590:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 810a592:	2b30      	cmp	r3, #48	; 0x30
 810a594:	d01f      	beq.n	810a5d6 <HAL_RCCEx_PeriphCLKConfig+0x416>
 810a596:	2b30      	cmp	r3, #48	; 0x30
 810a598:	d819      	bhi.n	810a5ce <HAL_RCCEx_PeriphCLKConfig+0x40e>
 810a59a:	2b20      	cmp	r3, #32
 810a59c:	d00c      	beq.n	810a5b8 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 810a59e:	2b20      	cmp	r3, #32
 810a5a0:	d815      	bhi.n	810a5ce <HAL_RCCEx_PeriphCLKConfig+0x40e>
 810a5a2:	2b00      	cmp	r3, #0
 810a5a4:	d019      	beq.n	810a5da <HAL_RCCEx_PeriphCLKConfig+0x41a>
 810a5a6:	2b10      	cmp	r3, #16
 810a5a8:	d111      	bne.n	810a5ce <HAL_RCCEx_PeriphCLKConfig+0x40e>
    {
      case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
        /* Enable QSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 810a5aa:	4b77      	ldr	r3, [pc, #476]	; (810a788 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 810a5ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 810a5ae:	4a76      	ldr	r2, [pc, #472]	; (810a788 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 810a5b0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 810a5b4:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* QSPI clock source configuration done later after clock selection check */
        break;
 810a5b6:	e011      	b.n	810a5dc <HAL_RCCEx_PeriphCLKConfig+0x41c>

      case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 810a5b8:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 810a5bc:	3308      	adds	r3, #8
 810a5be:	2102      	movs	r1, #2
 810a5c0:	4618      	mov	r0, r3
 810a5c2:	f002 f9d7 	bl	810c974 <RCCEx_PLL2_Config>
 810a5c6:	4603      	mov	r3, r0
 810a5c8:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f

        /* QSPI clock source configuration done later after clock selection check */
        break;
 810a5cc:	e006      	b.n	810a5dc <HAL_RCCEx_PeriphCLKConfig+0x41c>
      case RCC_QSPICLKSOURCE_D1HCLK:
        /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 810a5ce:	2301      	movs	r3, #1
 810a5d0:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
        break;
 810a5d4:	e002      	b.n	810a5dc <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 810a5d6:	bf00      	nop
 810a5d8:	e000      	b.n	810a5dc <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 810a5da:	bf00      	nop
    }

    if (ret == HAL_OK)
 810a5dc:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 810a5e0:	2b00      	cmp	r3, #0
 810a5e2:	d10a      	bne.n	810a5fa <HAL_RCCEx_PeriphCLKConfig+0x43a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 810a5e4:	4b68      	ldr	r3, [pc, #416]	; (810a788 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 810a5e6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 810a5e8:	f023 0130 	bic.w	r1, r3, #48	; 0x30
 810a5ec:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 810a5f0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 810a5f2:	4a65      	ldr	r2, [pc, #404]	; (810a788 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 810a5f4:	430b      	orrs	r3, r1
 810a5f6:	64d3      	str	r3, [r2, #76]	; 0x4c
 810a5f8:	e003      	b.n	810a602 <HAL_RCCEx_PeriphCLKConfig+0x442>
    }
    else
    {
      /* set overall return value */
      status = ret;
 810a5fa:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 810a5fe:	f887 312e 	strb.w	r3, [r7, #302]	; 0x12e
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 810a602:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 810a606:	e9d3 2300 	ldrd	r2, r3, [r3]
 810a60a:	f402 5380 	and.w	r3, r2, #4096	; 0x1000
 810a60e:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 810a612:	2300      	movs	r3, #0
 810a614:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 810a618:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	; 0xf8
 810a61c:	460b      	mov	r3, r1
 810a61e:	4313      	orrs	r3, r2
 810a620:	d051      	beq.n	810a6c6 <HAL_RCCEx_PeriphCLKConfig+0x506>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 810a622:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 810a626:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 810a628:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 810a62c:	d035      	beq.n	810a69a <HAL_RCCEx_PeriphCLKConfig+0x4da>
 810a62e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 810a632:	d82e      	bhi.n	810a692 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 810a634:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 810a638:	d031      	beq.n	810a69e <HAL_RCCEx_PeriphCLKConfig+0x4de>
 810a63a:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 810a63e:	d828      	bhi.n	810a692 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 810a640:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 810a644:	d01a      	beq.n	810a67c <HAL_RCCEx_PeriphCLKConfig+0x4bc>
 810a646:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 810a64a:	d822      	bhi.n	810a692 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 810a64c:	2b00      	cmp	r3, #0
 810a64e:	d003      	beq.n	810a658 <HAL_RCCEx_PeriphCLKConfig+0x498>
 810a650:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 810a654:	d007      	beq.n	810a666 <HAL_RCCEx_PeriphCLKConfig+0x4a6>
 810a656:	e01c      	b.n	810a692 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 810a658:	4b4b      	ldr	r3, [pc, #300]	; (810a788 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 810a65a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 810a65c:	4a4a      	ldr	r2, [pc, #296]	; (810a788 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 810a65e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 810a662:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 810a664:	e01c      	b.n	810a6a0 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 810a666:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 810a66a:	3308      	adds	r3, #8
 810a66c:	2100      	movs	r1, #0
 810a66e:	4618      	mov	r0, r3
 810a670:	f002 f980 	bl	810c974 <RCCEx_PLL2_Config>
 810a674:	4603      	mov	r3, r0
 810a676:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 810a67a:	e011      	b.n	810a6a0 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 810a67c:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 810a680:	3328      	adds	r3, #40	; 0x28
 810a682:	2100      	movs	r1, #0
 810a684:	4618      	mov	r0, r3
 810a686:	f002 fa27 	bl	810cad8 <RCCEx_PLL3_Config>
 810a68a:	4603      	mov	r3, r0
 810a68c:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 810a690:	e006      	b.n	810a6a0 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 810a692:	2301      	movs	r3, #1
 810a694:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
        break;
 810a698:	e002      	b.n	810a6a0 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 810a69a:	bf00      	nop
 810a69c:	e000      	b.n	810a6a0 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 810a69e:	bf00      	nop
    }

    if (ret == HAL_OK)
 810a6a0:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 810a6a4:	2b00      	cmp	r3, #0
 810a6a6:	d10a      	bne.n	810a6be <HAL_RCCEx_PeriphCLKConfig+0x4fe>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 810a6a8:	4b37      	ldr	r3, [pc, #220]	; (810a788 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 810a6aa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 810a6ac:	f423 41e0 	bic.w	r1, r3, #28672	; 0x7000
 810a6b0:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 810a6b4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 810a6b6:	4a34      	ldr	r2, [pc, #208]	; (810a788 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 810a6b8:	430b      	orrs	r3, r1
 810a6ba:	6513      	str	r3, [r2, #80]	; 0x50
 810a6bc:	e003      	b.n	810a6c6 <HAL_RCCEx_PeriphCLKConfig+0x506>
    }
    else
    {
      /* set overall return value */
      status = ret;
 810a6be:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 810a6c2:	f887 312e 	strb.w	r3, [r7, #302]	; 0x12e
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 810a6c6:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 810a6ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 810a6ce:	f402 5300 	and.w	r3, r2, #8192	; 0x2000
 810a6d2:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 810a6d6:	2300      	movs	r3, #0
 810a6d8:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 810a6dc:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	; 0xf0
 810a6e0:	460b      	mov	r3, r1
 810a6e2:	4313      	orrs	r3, r2
 810a6e4:	d056      	beq.n	810a794 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 810a6e6:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 810a6ea:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 810a6ec:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 810a6f0:	d033      	beq.n	810a75a <HAL_RCCEx_PeriphCLKConfig+0x59a>
 810a6f2:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 810a6f6:	d82c      	bhi.n	810a752 <HAL_RCCEx_PeriphCLKConfig+0x592>
 810a6f8:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 810a6fc:	d02f      	beq.n	810a75e <HAL_RCCEx_PeriphCLKConfig+0x59e>
 810a6fe:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 810a702:	d826      	bhi.n	810a752 <HAL_RCCEx_PeriphCLKConfig+0x592>
 810a704:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 810a708:	d02b      	beq.n	810a762 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
 810a70a:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 810a70e:	d820      	bhi.n	810a752 <HAL_RCCEx_PeriphCLKConfig+0x592>
 810a710:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 810a714:	d012      	beq.n	810a73c <HAL_RCCEx_PeriphCLKConfig+0x57c>
 810a716:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 810a71a:	d81a      	bhi.n	810a752 <HAL_RCCEx_PeriphCLKConfig+0x592>
 810a71c:	2b00      	cmp	r3, #0
 810a71e:	d022      	beq.n	810a766 <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 810a720:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 810a724:	d115      	bne.n	810a752 <HAL_RCCEx_PeriphCLKConfig+0x592>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 810a726:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 810a72a:	3308      	adds	r3, #8
 810a72c:	2101      	movs	r1, #1
 810a72e:	4618      	mov	r0, r3
 810a730:	f002 f920 	bl	810c974 <RCCEx_PLL2_Config>
 810a734:	4603      	mov	r3, r0
 810a736:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 810a73a:	e015      	b.n	810a768 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 810a73c:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 810a740:	3328      	adds	r3, #40	; 0x28
 810a742:	2101      	movs	r1, #1
 810a744:	4618      	mov	r0, r3
 810a746:	f002 f9c7 	bl	810cad8 <RCCEx_PLL3_Config>
 810a74a:	4603      	mov	r3, r0
 810a74c:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 810a750:	e00a      	b.n	810a768 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 810a752:	2301      	movs	r3, #1
 810a754:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
        break;
 810a758:	e006      	b.n	810a768 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 810a75a:	bf00      	nop
 810a75c:	e004      	b.n	810a768 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 810a75e:	bf00      	nop
 810a760:	e002      	b.n	810a768 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 810a762:	bf00      	nop
 810a764:	e000      	b.n	810a768 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 810a766:	bf00      	nop
    }

    if (ret == HAL_OK)
 810a768:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 810a76c:	2b00      	cmp	r3, #0
 810a76e:	d10d      	bne.n	810a78c <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 810a770:	4b05      	ldr	r3, [pc, #20]	; (810a788 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 810a772:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 810a774:	f423 21e0 	bic.w	r1, r3, #458752	; 0x70000
 810a778:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 810a77c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 810a77e:	4a02      	ldr	r2, [pc, #8]	; (810a788 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 810a780:	430b      	orrs	r3, r1
 810a782:	6513      	str	r3, [r2, #80]	; 0x50
 810a784:	e006      	b.n	810a794 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 810a786:	bf00      	nop
 810a788:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 810a78c:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 810a790:	f887 312e 	strb.w	r3, [r7, #302]	; 0x12e
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 810a794:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 810a798:	e9d3 2300 	ldrd	r2, r3, [r3]
 810a79c:	f402 4380 	and.w	r3, r2, #16384	; 0x4000
 810a7a0:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 810a7a4:	2300      	movs	r3, #0
 810a7a6:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 810a7aa:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	; 0xe8
 810a7ae:	460b      	mov	r3, r1
 810a7b0:	4313      	orrs	r3, r2
 810a7b2:	d055      	beq.n	810a860 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 810a7b4:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 810a7b8:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 810a7bc:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 810a7c0:	d033      	beq.n	810a82a <HAL_RCCEx_PeriphCLKConfig+0x66a>
 810a7c2:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 810a7c6:	d82c      	bhi.n	810a822 <HAL_RCCEx_PeriphCLKConfig+0x662>
 810a7c8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 810a7cc:	d02f      	beq.n	810a82e <HAL_RCCEx_PeriphCLKConfig+0x66e>
 810a7ce:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 810a7d2:	d826      	bhi.n	810a822 <HAL_RCCEx_PeriphCLKConfig+0x662>
 810a7d4:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 810a7d8:	d02b      	beq.n	810a832 <HAL_RCCEx_PeriphCLKConfig+0x672>
 810a7da:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 810a7de:	d820      	bhi.n	810a822 <HAL_RCCEx_PeriphCLKConfig+0x662>
 810a7e0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 810a7e4:	d012      	beq.n	810a80c <HAL_RCCEx_PeriphCLKConfig+0x64c>
 810a7e6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 810a7ea:	d81a      	bhi.n	810a822 <HAL_RCCEx_PeriphCLKConfig+0x662>
 810a7ec:	2b00      	cmp	r3, #0
 810a7ee:	d022      	beq.n	810a836 <HAL_RCCEx_PeriphCLKConfig+0x676>
 810a7f0:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 810a7f4:	d115      	bne.n	810a822 <HAL_RCCEx_PeriphCLKConfig+0x662>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 810a7f6:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 810a7fa:	3308      	adds	r3, #8
 810a7fc:	2101      	movs	r1, #1
 810a7fe:	4618      	mov	r0, r3
 810a800:	f002 f8b8 	bl	810c974 <RCCEx_PLL2_Config>
 810a804:	4603      	mov	r3, r0
 810a806:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 810a80a:	e015      	b.n	810a838 <HAL_RCCEx_PeriphCLKConfig+0x678>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 810a80c:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 810a810:	3328      	adds	r3, #40	; 0x28
 810a812:	2101      	movs	r1, #1
 810a814:	4618      	mov	r0, r3
 810a816:	f002 f95f 	bl	810cad8 <RCCEx_PLL3_Config>
 810a81a:	4603      	mov	r3, r0
 810a81c:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 810a820:	e00a      	b.n	810a838 <HAL_RCCEx_PeriphCLKConfig+0x678>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 810a822:	2301      	movs	r3, #1
 810a824:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
        break;
 810a828:	e006      	b.n	810a838 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 810a82a:	bf00      	nop
 810a82c:	e004      	b.n	810a838 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 810a82e:	bf00      	nop
 810a830:	e002      	b.n	810a838 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 810a832:	bf00      	nop
 810a834:	e000      	b.n	810a838 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 810a836:	bf00      	nop
    }

    if (ret == HAL_OK)
 810a838:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 810a83c:	2b00      	cmp	r3, #0
 810a83e:	d10b      	bne.n	810a858 <HAL_RCCEx_PeriphCLKConfig+0x698>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 810a840:	4bb7      	ldr	r3, [pc, #732]	; (810ab20 <HAL_RCCEx_PeriphCLKConfig+0x960>)
 810a842:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 810a844:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 810a848:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 810a84c:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 810a850:	4ab3      	ldr	r2, [pc, #716]	; (810ab20 <HAL_RCCEx_PeriphCLKConfig+0x960>)
 810a852:	430b      	orrs	r3, r1
 810a854:	6593      	str	r3, [r2, #88]	; 0x58
 810a856:	e003      	b.n	810a860 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 810a858:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 810a85c:	f887 312e 	strb.w	r3, [r7, #302]	; 0x12e
    }
  }

#if defined(DSI)
  /*---------------------------- DSI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DSI) == RCC_PERIPHCLK_DSI)
 810a860:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 810a864:	e9d3 2300 	ldrd	r2, r3, [r3]
 810a868:	f002 6380 	and.w	r3, r2, #67108864	; 0x4000000
 810a86c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 810a870:	2300      	movs	r3, #0
 810a872:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 810a876:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	; 0xe0
 810a87a:	460b      	mov	r3, r1
 810a87c:	4313      	orrs	r3, r2
 810a87e:	d02a      	beq.n	810a8d6 <HAL_RCCEx_PeriphCLKConfig+0x716>
  {
    switch (PeriphClkInit->DsiClockSelection)
 810a880:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 810a884:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 810a886:	2b00      	cmp	r3, #0
 810a888:	d011      	beq.n	810a8ae <HAL_RCCEx_PeriphCLKConfig+0x6ee>
 810a88a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 810a88e:	d10a      	bne.n	810a8a6 <HAL_RCCEx_PeriphCLKConfig+0x6e6>
    {

      case RCC_DSICLKSOURCE_PLL2: /* PLL2 is used as clock source for DSI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 810a890:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 810a894:	3308      	adds	r3, #8
 810a896:	2101      	movs	r1, #1
 810a898:	4618      	mov	r0, r3
 810a89a:	f002 f86b 	bl	810c974 <RCCEx_PLL2_Config>
 810a89e:	4603      	mov	r3, r0
 810a8a0:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f

        /* DSI clock source configuration done later after clock selection check */
        break;
 810a8a4:	e004      	b.n	810a8b0 <HAL_RCCEx_PeriphCLKConfig+0x6f0>
        /* PHY is used as clock source for DSI*/
        /* DSI clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 810a8a6:	2301      	movs	r3, #1
 810a8a8:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
        break;
 810a8ac:	e000      	b.n	810a8b0 <HAL_RCCEx_PeriphCLKConfig+0x6f0>
        break;
 810a8ae:	bf00      	nop
    }

    if (ret == HAL_OK)
 810a8b0:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 810a8b4:	2b00      	cmp	r3, #0
 810a8b6:	d10a      	bne.n	810a8ce <HAL_RCCEx_PeriphCLKConfig+0x70e>
    {
      /* Set the source of DSI clock*/
      __HAL_RCC_DSI_CONFIG(PeriphClkInit->DsiClockSelection);
 810a8b8:	4b99      	ldr	r3, [pc, #612]	; (810ab20 <HAL_RCCEx_PeriphCLKConfig+0x960>)
 810a8ba:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 810a8bc:	f423 7180 	bic.w	r1, r3, #256	; 0x100
 810a8c0:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 810a8c4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 810a8c6:	4a96      	ldr	r2, [pc, #600]	; (810ab20 <HAL_RCCEx_PeriphCLKConfig+0x960>)
 810a8c8:	430b      	orrs	r3, r1
 810a8ca:	64d3      	str	r3, [r2, #76]	; 0x4c
 810a8cc:	e003      	b.n	810a8d6 <HAL_RCCEx_PeriphCLKConfig+0x716>
    }
    else
    {
      /* set overall return value */
      status = ret;
 810a8ce:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 810a8d2:	f887 312e 	strb.w	r3, [r7, #302]	; 0x12e
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 810a8d6:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 810a8da:	e9d3 2300 	ldrd	r2, r3, [r3]
 810a8de:	f402 4300 	and.w	r3, r2, #32768	; 0x8000
 810a8e2:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 810a8e6:	2300      	movs	r3, #0
 810a8e8:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 810a8ec:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 810a8f0:	460b      	mov	r3, r1
 810a8f2:	4313      	orrs	r3, r2
 810a8f4:	d037      	beq.n	810a966 <HAL_RCCEx_PeriphCLKConfig+0x7a6>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 810a8f6:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 810a8fa:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 810a8fc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 810a900:	d00e      	beq.n	810a920 <HAL_RCCEx_PeriphCLKConfig+0x760>
 810a902:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 810a906:	d816      	bhi.n	810a936 <HAL_RCCEx_PeriphCLKConfig+0x776>
 810a908:	2b00      	cmp	r3, #0
 810a90a:	d018      	beq.n	810a93e <HAL_RCCEx_PeriphCLKConfig+0x77e>
 810a90c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 810a910:	d111      	bne.n	810a936 <HAL_RCCEx_PeriphCLKConfig+0x776>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 810a912:	4b83      	ldr	r3, [pc, #524]	; (810ab20 <HAL_RCCEx_PeriphCLKConfig+0x960>)
 810a914:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 810a916:	4a82      	ldr	r2, [pc, #520]	; (810ab20 <HAL_RCCEx_PeriphCLKConfig+0x960>)
 810a918:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 810a91c:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 810a91e:	e00f      	b.n	810a940 <HAL_RCCEx_PeriphCLKConfig+0x780>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 810a920:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 810a924:	3308      	adds	r3, #8
 810a926:	2101      	movs	r1, #1
 810a928:	4618      	mov	r0, r3
 810a92a:	f002 f823 	bl	810c974 <RCCEx_PLL2_Config>
 810a92e:	4603      	mov	r3, r0
 810a930:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 810a934:	e004      	b.n	810a940 <HAL_RCCEx_PeriphCLKConfig+0x780>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 810a936:	2301      	movs	r3, #1
 810a938:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
        break;
 810a93c:	e000      	b.n	810a940 <HAL_RCCEx_PeriphCLKConfig+0x780>
        break;
 810a93e:	bf00      	nop
    }

    if (ret == HAL_OK)
 810a940:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 810a944:	2b00      	cmp	r3, #0
 810a946:	d10a      	bne.n	810a95e <HAL_RCCEx_PeriphCLKConfig+0x79e>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 810a948:	4b75      	ldr	r3, [pc, #468]	; (810ab20 <HAL_RCCEx_PeriphCLKConfig+0x960>)
 810a94a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 810a94c:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 810a950:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 810a954:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 810a956:	4a72      	ldr	r2, [pc, #456]	; (810ab20 <HAL_RCCEx_PeriphCLKConfig+0x960>)
 810a958:	430b      	orrs	r3, r1
 810a95a:	6513      	str	r3, [r2, #80]	; 0x50
 810a95c:	e003      	b.n	810a966 <HAL_RCCEx_PeriphCLKConfig+0x7a6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 810a95e:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 810a962:	f887 312e 	strb.w	r3, [r7, #302]	; 0x12e
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 810a966:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 810a96a:	e9d3 2300 	ldrd	r2, r3, [r3]
 810a96e:	f002 7380 	and.w	r3, r2, #16777216	; 0x1000000
 810a972:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 810a976:	2300      	movs	r3, #0
 810a978:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 810a97c:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	; 0xd0
 810a980:	460b      	mov	r3, r1
 810a982:	4313      	orrs	r3, r2
 810a984:	d03a      	beq.n	810a9fc <HAL_RCCEx_PeriphCLKConfig+0x83c>
  {
    switch (PeriphClkInit->FmcClockSelection)
 810a986:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 810a98a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 810a98c:	2b03      	cmp	r3, #3
 810a98e:	d81d      	bhi.n	810a9cc <HAL_RCCEx_PeriphCLKConfig+0x80c>
 810a990:	a201      	add	r2, pc, #4	; (adr r2, 810a998 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 810a992:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 810a996:	bf00      	nop
 810a998:	0810a9d5 	.word	0x0810a9d5
 810a99c:	0810a9a9 	.word	0x0810a9a9
 810a9a0:	0810a9b7 	.word	0x0810a9b7
 810a9a4:	0810a9d5 	.word	0x0810a9d5
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 810a9a8:	4b5d      	ldr	r3, [pc, #372]	; (810ab20 <HAL_RCCEx_PeriphCLKConfig+0x960>)
 810a9aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 810a9ac:	4a5c      	ldr	r2, [pc, #368]	; (810ab20 <HAL_RCCEx_PeriphCLKConfig+0x960>)
 810a9ae:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 810a9b2:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 810a9b4:	e00f      	b.n	810a9d6 <HAL_RCCEx_PeriphCLKConfig+0x816>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 810a9b6:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 810a9ba:	3308      	adds	r3, #8
 810a9bc:	2102      	movs	r1, #2
 810a9be:	4618      	mov	r0, r3
 810a9c0:	f001 ffd8 	bl	810c974 <RCCEx_PLL2_Config>
 810a9c4:	4603      	mov	r3, r0
 810a9c6:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f

        /* FMC clock source configuration done later after clock selection check */
        break;
 810a9ca:	e004      	b.n	810a9d6 <HAL_RCCEx_PeriphCLKConfig+0x816>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 810a9cc:	2301      	movs	r3, #1
 810a9ce:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
        break;
 810a9d2:	e000      	b.n	810a9d6 <HAL_RCCEx_PeriphCLKConfig+0x816>
        break;
 810a9d4:	bf00      	nop
    }

    if (ret == HAL_OK)
 810a9d6:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 810a9da:	2b00      	cmp	r3, #0
 810a9dc:	d10a      	bne.n	810a9f4 <HAL_RCCEx_PeriphCLKConfig+0x834>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 810a9de:	4b50      	ldr	r3, [pc, #320]	; (810ab20 <HAL_RCCEx_PeriphCLKConfig+0x960>)
 810a9e0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 810a9e2:	f023 0103 	bic.w	r1, r3, #3
 810a9e6:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 810a9ea:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 810a9ec:	4a4c      	ldr	r2, [pc, #304]	; (810ab20 <HAL_RCCEx_PeriphCLKConfig+0x960>)
 810a9ee:	430b      	orrs	r3, r1
 810a9f0:	64d3      	str	r3, [r2, #76]	; 0x4c
 810a9f2:	e003      	b.n	810a9fc <HAL_RCCEx_PeriphCLKConfig+0x83c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 810a9f4:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 810a9f8:	f887 312e 	strb.w	r3, [r7, #302]	; 0x12e
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 810a9fc:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 810aa00:	e9d3 2300 	ldrd	r2, r3, [r3]
 810aa04:	f402 0380 	and.w	r3, r2, #4194304	; 0x400000
 810aa08:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 810aa0c:	2300      	movs	r3, #0
 810aa0e:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 810aa12:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	; 0xc8
 810aa16:	460b      	mov	r3, r1
 810aa18:	4313      	orrs	r3, r2
 810aa1a:	f000 80a0 	beq.w	810ab5e <HAL_RCCEx_PeriphCLKConfig+0x99e>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 810aa1e:	4b41      	ldr	r3, [pc, #260]	; (810ab24 <HAL_RCCEx_PeriphCLKConfig+0x964>)
 810aa20:	681b      	ldr	r3, [r3, #0]
 810aa22:	4a40      	ldr	r2, [pc, #256]	; (810ab24 <HAL_RCCEx_PeriphCLKConfig+0x964>)
 810aa24:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 810aa28:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 810aa2a:	f7fc fdf7 	bl	810761c <HAL_GetTick>
 810aa2e:	f8c7 0128 	str.w	r0, [r7, #296]	; 0x128

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 810aa32:	e00b      	b.n	810aa4c <HAL_RCCEx_PeriphCLKConfig+0x88c>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 810aa34:	f7fc fdf2 	bl	810761c <HAL_GetTick>
 810aa38:	4602      	mov	r2, r0
 810aa3a:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 810aa3e:	1ad3      	subs	r3, r2, r3
 810aa40:	2b64      	cmp	r3, #100	; 0x64
 810aa42:	d903      	bls.n	810aa4c <HAL_RCCEx_PeriphCLKConfig+0x88c>
      {
        ret = HAL_TIMEOUT;
 810aa44:	2303      	movs	r3, #3
 810aa46:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
        break;
 810aa4a:	e005      	b.n	810aa58 <HAL_RCCEx_PeriphCLKConfig+0x898>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 810aa4c:	4b35      	ldr	r3, [pc, #212]	; (810ab24 <HAL_RCCEx_PeriphCLKConfig+0x964>)
 810aa4e:	681b      	ldr	r3, [r3, #0]
 810aa50:	f403 7380 	and.w	r3, r3, #256	; 0x100
 810aa54:	2b00      	cmp	r3, #0
 810aa56:	d0ed      	beq.n	810aa34 <HAL_RCCEx_PeriphCLKConfig+0x874>
      }
    }

    if (ret == HAL_OK)
 810aa58:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 810aa5c:	2b00      	cmp	r3, #0
 810aa5e:	d17a      	bne.n	810ab56 <HAL_RCCEx_PeriphCLKConfig+0x996>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 810aa60:	4b2f      	ldr	r3, [pc, #188]	; (810ab20 <HAL_RCCEx_PeriphCLKConfig+0x960>)
 810aa62:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 810aa64:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 810aa68:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 810aa6c:	4053      	eors	r3, r2
 810aa6e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 810aa72:	2b00      	cmp	r3, #0
 810aa74:	d015      	beq.n	810aaa2 <HAL_RCCEx_PeriphCLKConfig+0x8e2>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 810aa76:	4b2a      	ldr	r3, [pc, #168]	; (810ab20 <HAL_RCCEx_PeriphCLKConfig+0x960>)
 810aa78:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 810aa7a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 810aa7e:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 810aa82:	4b27      	ldr	r3, [pc, #156]	; (810ab20 <HAL_RCCEx_PeriphCLKConfig+0x960>)
 810aa84:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 810aa86:	4a26      	ldr	r2, [pc, #152]	; (810ab20 <HAL_RCCEx_PeriphCLKConfig+0x960>)
 810aa88:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 810aa8c:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 810aa8e:	4b24      	ldr	r3, [pc, #144]	; (810ab20 <HAL_RCCEx_PeriphCLKConfig+0x960>)
 810aa90:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 810aa92:	4a23      	ldr	r2, [pc, #140]	; (810ab20 <HAL_RCCEx_PeriphCLKConfig+0x960>)
 810aa94:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 810aa98:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 810aa9a:	4a21      	ldr	r2, [pc, #132]	; (810ab20 <HAL_RCCEx_PeriphCLKConfig+0x960>)
 810aa9c:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 810aaa0:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 810aaa2:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 810aaa6:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 810aaaa:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 810aaae:	d118      	bne.n	810aae2 <HAL_RCCEx_PeriphCLKConfig+0x922>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 810aab0:	f7fc fdb4 	bl	810761c <HAL_GetTick>
 810aab4:	f8c7 0128 	str.w	r0, [r7, #296]	; 0x128

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 810aab8:	e00d      	b.n	810aad6 <HAL_RCCEx_PeriphCLKConfig+0x916>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 810aaba:	f7fc fdaf 	bl	810761c <HAL_GetTick>
 810aabe:	4602      	mov	r2, r0
 810aac0:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 810aac4:	1ad2      	subs	r2, r2, r3
 810aac6:	f241 3388 	movw	r3, #5000	; 0x1388
 810aaca:	429a      	cmp	r2, r3
 810aacc:	d903      	bls.n	810aad6 <HAL_RCCEx_PeriphCLKConfig+0x916>
          {
            ret = HAL_TIMEOUT;
 810aace:	2303      	movs	r3, #3
 810aad0:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
            break;
 810aad4:	e005      	b.n	810aae2 <HAL_RCCEx_PeriphCLKConfig+0x922>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 810aad6:	4b12      	ldr	r3, [pc, #72]	; (810ab20 <HAL_RCCEx_PeriphCLKConfig+0x960>)
 810aad8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 810aada:	f003 0302 	and.w	r3, r3, #2
 810aade:	2b00      	cmp	r3, #0
 810aae0:	d0eb      	beq.n	810aaba <HAL_RCCEx_PeriphCLKConfig+0x8fa>
          }
        }
      }

      if (ret == HAL_OK)
 810aae2:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 810aae6:	2b00      	cmp	r3, #0
 810aae8:	d130      	bne.n	810ab4c <HAL_RCCEx_PeriphCLKConfig+0x98c>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 810aaea:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 810aaee:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 810aaf2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 810aaf6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 810aafa:	d115      	bne.n	810ab28 <HAL_RCCEx_PeriphCLKConfig+0x968>
 810aafc:	4b08      	ldr	r3, [pc, #32]	; (810ab20 <HAL_RCCEx_PeriphCLKConfig+0x960>)
 810aafe:	691b      	ldr	r3, [r3, #16]
 810ab00:	f423 517c 	bic.w	r1, r3, #16128	; 0x3f00
 810ab04:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 810ab08:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 810ab0c:	091b      	lsrs	r3, r3, #4
 810ab0e:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 810ab12:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 810ab16:	4a02      	ldr	r2, [pc, #8]	; (810ab20 <HAL_RCCEx_PeriphCLKConfig+0x960>)
 810ab18:	430b      	orrs	r3, r1
 810ab1a:	6113      	str	r3, [r2, #16]
 810ab1c:	e00a      	b.n	810ab34 <HAL_RCCEx_PeriphCLKConfig+0x974>
 810ab1e:	bf00      	nop
 810ab20:	58024400 	.word	0x58024400
 810ab24:	58024800 	.word	0x58024800
 810ab28:	4bd4      	ldr	r3, [pc, #848]	; (810ae7c <HAL_RCCEx_PeriphCLKConfig+0xcbc>)
 810ab2a:	691b      	ldr	r3, [r3, #16]
 810ab2c:	4ad3      	ldr	r2, [pc, #844]	; (810ae7c <HAL_RCCEx_PeriphCLKConfig+0xcbc>)
 810ab2e:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 810ab32:	6113      	str	r3, [r2, #16]
 810ab34:	4bd1      	ldr	r3, [pc, #836]	; (810ae7c <HAL_RCCEx_PeriphCLKConfig+0xcbc>)
 810ab36:	6f19      	ldr	r1, [r3, #112]	; 0x70
 810ab38:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 810ab3c:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 810ab40:	f3c3 030b 	ubfx	r3, r3, #0, #12
 810ab44:	4acd      	ldr	r2, [pc, #820]	; (810ae7c <HAL_RCCEx_PeriphCLKConfig+0xcbc>)
 810ab46:	430b      	orrs	r3, r1
 810ab48:	6713      	str	r3, [r2, #112]	; 0x70
 810ab4a:	e008      	b.n	810ab5e <HAL_RCCEx_PeriphCLKConfig+0x99e>
      }
      else
      {
        /* set overall return value */
        status = ret;
 810ab4c:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 810ab50:	f887 312e 	strb.w	r3, [r7, #302]	; 0x12e
 810ab54:	e003      	b.n	810ab5e <HAL_RCCEx_PeriphCLKConfig+0x99e>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 810ab56:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 810ab5a:	f887 312e 	strb.w	r3, [r7, #302]	; 0x12e
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 810ab5e:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 810ab62:	e9d3 2300 	ldrd	r2, r3, [r3]
 810ab66:	f002 0301 	and.w	r3, r2, #1
 810ab6a:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 810ab6e:	2300      	movs	r3, #0
 810ab70:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 810ab74:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 810ab78:	460b      	mov	r3, r1
 810ab7a:	4313      	orrs	r3, r2
 810ab7c:	f000 808b 	beq.w	810ac96 <HAL_RCCEx_PeriphCLKConfig+0xad6>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 810ab80:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 810ab84:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 810ab88:	2b28      	cmp	r3, #40	; 0x28
 810ab8a:	d86b      	bhi.n	810ac64 <HAL_RCCEx_PeriphCLKConfig+0xaa4>
 810ab8c:	a201      	add	r2, pc, #4	; (adr r2, 810ab94 <HAL_RCCEx_PeriphCLKConfig+0x9d4>)
 810ab8e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 810ab92:	bf00      	nop
 810ab94:	0810ac6d 	.word	0x0810ac6d
 810ab98:	0810ac65 	.word	0x0810ac65
 810ab9c:	0810ac65 	.word	0x0810ac65
 810aba0:	0810ac65 	.word	0x0810ac65
 810aba4:	0810ac65 	.word	0x0810ac65
 810aba8:	0810ac65 	.word	0x0810ac65
 810abac:	0810ac65 	.word	0x0810ac65
 810abb0:	0810ac65 	.word	0x0810ac65
 810abb4:	0810ac39 	.word	0x0810ac39
 810abb8:	0810ac65 	.word	0x0810ac65
 810abbc:	0810ac65 	.word	0x0810ac65
 810abc0:	0810ac65 	.word	0x0810ac65
 810abc4:	0810ac65 	.word	0x0810ac65
 810abc8:	0810ac65 	.word	0x0810ac65
 810abcc:	0810ac65 	.word	0x0810ac65
 810abd0:	0810ac65 	.word	0x0810ac65
 810abd4:	0810ac4f 	.word	0x0810ac4f
 810abd8:	0810ac65 	.word	0x0810ac65
 810abdc:	0810ac65 	.word	0x0810ac65
 810abe0:	0810ac65 	.word	0x0810ac65
 810abe4:	0810ac65 	.word	0x0810ac65
 810abe8:	0810ac65 	.word	0x0810ac65
 810abec:	0810ac65 	.word	0x0810ac65
 810abf0:	0810ac65 	.word	0x0810ac65
 810abf4:	0810ac6d 	.word	0x0810ac6d
 810abf8:	0810ac65 	.word	0x0810ac65
 810abfc:	0810ac65 	.word	0x0810ac65
 810ac00:	0810ac65 	.word	0x0810ac65
 810ac04:	0810ac65 	.word	0x0810ac65
 810ac08:	0810ac65 	.word	0x0810ac65
 810ac0c:	0810ac65 	.word	0x0810ac65
 810ac10:	0810ac65 	.word	0x0810ac65
 810ac14:	0810ac6d 	.word	0x0810ac6d
 810ac18:	0810ac65 	.word	0x0810ac65
 810ac1c:	0810ac65 	.word	0x0810ac65
 810ac20:	0810ac65 	.word	0x0810ac65
 810ac24:	0810ac65 	.word	0x0810ac65
 810ac28:	0810ac65 	.word	0x0810ac65
 810ac2c:	0810ac65 	.word	0x0810ac65
 810ac30:	0810ac65 	.word	0x0810ac65
 810ac34:	0810ac6d 	.word	0x0810ac6d
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 810ac38:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 810ac3c:	3308      	adds	r3, #8
 810ac3e:	2101      	movs	r1, #1
 810ac40:	4618      	mov	r0, r3
 810ac42:	f001 fe97 	bl	810c974 <RCCEx_PLL2_Config>
 810ac46:	4603      	mov	r3, r0
 810ac48:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 810ac4c:	e00f      	b.n	810ac6e <HAL_RCCEx_PeriphCLKConfig+0xaae>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 810ac4e:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 810ac52:	3328      	adds	r3, #40	; 0x28
 810ac54:	2101      	movs	r1, #1
 810ac56:	4618      	mov	r0, r3
 810ac58:	f001 ff3e 	bl	810cad8 <RCCEx_PLL3_Config>
 810ac5c:	4603      	mov	r3, r0
 810ac5e:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 810ac62:	e004      	b.n	810ac6e <HAL_RCCEx_PeriphCLKConfig+0xaae>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 810ac64:	2301      	movs	r3, #1
 810ac66:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
        break;
 810ac6a:	e000      	b.n	810ac6e <HAL_RCCEx_PeriphCLKConfig+0xaae>
        break;
 810ac6c:	bf00      	nop
    }

    if (ret == HAL_OK)
 810ac6e:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 810ac72:	2b00      	cmp	r3, #0
 810ac74:	d10b      	bne.n	810ac8e <HAL_RCCEx_PeriphCLKConfig+0xace>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 810ac76:	4b81      	ldr	r3, [pc, #516]	; (810ae7c <HAL_RCCEx_PeriphCLKConfig+0xcbc>)
 810ac78:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 810ac7a:	f023 0138 	bic.w	r1, r3, #56	; 0x38
 810ac7e:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 810ac82:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 810ac86:	4a7d      	ldr	r2, [pc, #500]	; (810ae7c <HAL_RCCEx_PeriphCLKConfig+0xcbc>)
 810ac88:	430b      	orrs	r3, r1
 810ac8a:	6553      	str	r3, [r2, #84]	; 0x54
 810ac8c:	e003      	b.n	810ac96 <HAL_RCCEx_PeriphCLKConfig+0xad6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 810ac8e:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 810ac92:	f887 312e 	strb.w	r3, [r7, #302]	; 0x12e
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 810ac96:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 810ac9a:	e9d3 2300 	ldrd	r2, r3, [r3]
 810ac9e:	f002 0302 	and.w	r3, r2, #2
 810aca2:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 810aca6:	2300      	movs	r3, #0
 810aca8:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 810acac:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	; 0xb8
 810acb0:	460b      	mov	r3, r1
 810acb2:	4313      	orrs	r3, r2
 810acb4:	d042      	beq.n	810ad3c <HAL_RCCEx_PeriphCLKConfig+0xb7c>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 810acb6:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 810acba:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 810acbc:	2b05      	cmp	r3, #5
 810acbe:	d825      	bhi.n	810ad0c <HAL_RCCEx_PeriphCLKConfig+0xb4c>
 810acc0:	a201      	add	r2, pc, #4	; (adr r2, 810acc8 <HAL_RCCEx_PeriphCLKConfig+0xb08>)
 810acc2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 810acc6:	bf00      	nop
 810acc8:	0810ad15 	.word	0x0810ad15
 810accc:	0810ace1 	.word	0x0810ace1
 810acd0:	0810acf7 	.word	0x0810acf7
 810acd4:	0810ad15 	.word	0x0810ad15
 810acd8:	0810ad15 	.word	0x0810ad15
 810acdc:	0810ad15 	.word	0x0810ad15
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 810ace0:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 810ace4:	3308      	adds	r3, #8
 810ace6:	2101      	movs	r1, #1
 810ace8:	4618      	mov	r0, r3
 810acea:	f001 fe43 	bl	810c974 <RCCEx_PLL2_Config>
 810acee:	4603      	mov	r3, r0
 810acf0:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 810acf4:	e00f      	b.n	810ad16 <HAL_RCCEx_PeriphCLKConfig+0xb56>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 810acf6:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 810acfa:	3328      	adds	r3, #40	; 0x28
 810acfc:	2101      	movs	r1, #1
 810acfe:	4618      	mov	r0, r3
 810ad00:	f001 feea 	bl	810cad8 <RCCEx_PLL3_Config>
 810ad04:	4603      	mov	r3, r0
 810ad06:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 810ad0a:	e004      	b.n	810ad16 <HAL_RCCEx_PeriphCLKConfig+0xb56>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 810ad0c:	2301      	movs	r3, #1
 810ad0e:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
        break;
 810ad12:	e000      	b.n	810ad16 <HAL_RCCEx_PeriphCLKConfig+0xb56>
        break;
 810ad14:	bf00      	nop
    }

    if (ret == HAL_OK)
 810ad16:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 810ad1a:	2b00      	cmp	r3, #0
 810ad1c:	d10a      	bne.n	810ad34 <HAL_RCCEx_PeriphCLKConfig+0xb74>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 810ad1e:	4b57      	ldr	r3, [pc, #348]	; (810ae7c <HAL_RCCEx_PeriphCLKConfig+0xcbc>)
 810ad20:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 810ad22:	f023 0107 	bic.w	r1, r3, #7
 810ad26:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 810ad2a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 810ad2c:	4a53      	ldr	r2, [pc, #332]	; (810ae7c <HAL_RCCEx_PeriphCLKConfig+0xcbc>)
 810ad2e:	430b      	orrs	r3, r1
 810ad30:	6553      	str	r3, [r2, #84]	; 0x54
 810ad32:	e003      	b.n	810ad3c <HAL_RCCEx_PeriphCLKConfig+0xb7c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 810ad34:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 810ad38:	f887 312e 	strb.w	r3, [r7, #302]	; 0x12e
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 810ad3c:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 810ad40:	e9d3 2300 	ldrd	r2, r3, [r3]
 810ad44:	f002 0304 	and.w	r3, r2, #4
 810ad48:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 810ad4c:	2300      	movs	r3, #0
 810ad4e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 810ad52:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	; 0xb0
 810ad56:	460b      	mov	r3, r1
 810ad58:	4313      	orrs	r3, r2
 810ad5a:	d044      	beq.n	810ade6 <HAL_RCCEx_PeriphCLKConfig+0xc26>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 810ad5c:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 810ad60:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 810ad64:	2b05      	cmp	r3, #5
 810ad66:	d825      	bhi.n	810adb4 <HAL_RCCEx_PeriphCLKConfig+0xbf4>
 810ad68:	a201      	add	r2, pc, #4	; (adr r2, 810ad70 <HAL_RCCEx_PeriphCLKConfig+0xbb0>)
 810ad6a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 810ad6e:	bf00      	nop
 810ad70:	0810adbd 	.word	0x0810adbd
 810ad74:	0810ad89 	.word	0x0810ad89
 810ad78:	0810ad9f 	.word	0x0810ad9f
 810ad7c:	0810adbd 	.word	0x0810adbd
 810ad80:	0810adbd 	.word	0x0810adbd
 810ad84:	0810adbd 	.word	0x0810adbd
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 810ad88:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 810ad8c:	3308      	adds	r3, #8
 810ad8e:	2101      	movs	r1, #1
 810ad90:	4618      	mov	r0, r3
 810ad92:	f001 fdef 	bl	810c974 <RCCEx_PLL2_Config>
 810ad96:	4603      	mov	r3, r0
 810ad98:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 810ad9c:	e00f      	b.n	810adbe <HAL_RCCEx_PeriphCLKConfig+0xbfe>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 810ad9e:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 810ada2:	3328      	adds	r3, #40	; 0x28
 810ada4:	2101      	movs	r1, #1
 810ada6:	4618      	mov	r0, r3
 810ada8:	f001 fe96 	bl	810cad8 <RCCEx_PLL3_Config>
 810adac:	4603      	mov	r3, r0
 810adae:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 810adb2:	e004      	b.n	810adbe <HAL_RCCEx_PeriphCLKConfig+0xbfe>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 810adb4:	2301      	movs	r3, #1
 810adb6:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
        break;
 810adba:	e000      	b.n	810adbe <HAL_RCCEx_PeriphCLKConfig+0xbfe>
        break;
 810adbc:	bf00      	nop
    }

    if (ret == HAL_OK)
 810adbe:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 810adc2:	2b00      	cmp	r3, #0
 810adc4:	d10b      	bne.n	810adde <HAL_RCCEx_PeriphCLKConfig+0xc1e>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 810adc6:	4b2d      	ldr	r3, [pc, #180]	; (810ae7c <HAL_RCCEx_PeriphCLKConfig+0xcbc>)
 810adc8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 810adca:	f023 0107 	bic.w	r1, r3, #7
 810adce:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 810add2:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 810add6:	4a29      	ldr	r2, [pc, #164]	; (810ae7c <HAL_RCCEx_PeriphCLKConfig+0xcbc>)
 810add8:	430b      	orrs	r3, r1
 810adda:	6593      	str	r3, [r2, #88]	; 0x58
 810addc:	e003      	b.n	810ade6 <HAL_RCCEx_PeriphCLKConfig+0xc26>
    }
    else
    {
      /* set overall return value */
      status = ret;
 810adde:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 810ade2:	f887 312e 	strb.w	r3, [r7, #302]	; 0x12e
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 810ade6:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 810adea:	e9d3 2300 	ldrd	r2, r3, [r3]
 810adee:	f002 0320 	and.w	r3, r2, #32
 810adf2:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 810adf6:	2300      	movs	r3, #0
 810adf8:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 810adfc:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 810ae00:	460b      	mov	r3, r1
 810ae02:	4313      	orrs	r3, r2
 810ae04:	d057      	beq.n	810aeb6 <HAL_RCCEx_PeriphCLKConfig+0xcf6>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 810ae06:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 810ae0a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 810ae0e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 810ae12:	d035      	beq.n	810ae80 <HAL_RCCEx_PeriphCLKConfig+0xcc0>
 810ae14:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 810ae18:	d82c      	bhi.n	810ae74 <HAL_RCCEx_PeriphCLKConfig+0xcb4>
 810ae1a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 810ae1e:	d031      	beq.n	810ae84 <HAL_RCCEx_PeriphCLKConfig+0xcc4>
 810ae20:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 810ae24:	d826      	bhi.n	810ae74 <HAL_RCCEx_PeriphCLKConfig+0xcb4>
 810ae26:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 810ae2a:	d02d      	beq.n	810ae88 <HAL_RCCEx_PeriphCLKConfig+0xcc8>
 810ae2c:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 810ae30:	d820      	bhi.n	810ae74 <HAL_RCCEx_PeriphCLKConfig+0xcb4>
 810ae32:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 810ae36:	d012      	beq.n	810ae5e <HAL_RCCEx_PeriphCLKConfig+0xc9e>
 810ae38:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 810ae3c:	d81a      	bhi.n	810ae74 <HAL_RCCEx_PeriphCLKConfig+0xcb4>
 810ae3e:	2b00      	cmp	r3, #0
 810ae40:	d024      	beq.n	810ae8c <HAL_RCCEx_PeriphCLKConfig+0xccc>
 810ae42:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 810ae46:	d115      	bne.n	810ae74 <HAL_RCCEx_PeriphCLKConfig+0xcb4>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 810ae48:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 810ae4c:	3308      	adds	r3, #8
 810ae4e:	2100      	movs	r1, #0
 810ae50:	4618      	mov	r0, r3
 810ae52:	f001 fd8f 	bl	810c974 <RCCEx_PLL2_Config>
 810ae56:	4603      	mov	r3, r0
 810ae58:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 810ae5c:	e017      	b.n	810ae8e <HAL_RCCEx_PeriphCLKConfig+0xcce>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 810ae5e:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 810ae62:	3328      	adds	r3, #40	; 0x28
 810ae64:	2102      	movs	r1, #2
 810ae66:	4618      	mov	r0, r3
 810ae68:	f001 fe36 	bl	810cad8 <RCCEx_PLL3_Config>
 810ae6c:	4603      	mov	r3, r0
 810ae6e:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 810ae72:	e00c      	b.n	810ae8e <HAL_RCCEx_PeriphCLKConfig+0xcce>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 810ae74:	2301      	movs	r3, #1
 810ae76:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
        break;
 810ae7a:	e008      	b.n	810ae8e <HAL_RCCEx_PeriphCLKConfig+0xcce>
 810ae7c:	58024400 	.word	0x58024400
        break;
 810ae80:	bf00      	nop
 810ae82:	e004      	b.n	810ae8e <HAL_RCCEx_PeriphCLKConfig+0xcce>
        break;
 810ae84:	bf00      	nop
 810ae86:	e002      	b.n	810ae8e <HAL_RCCEx_PeriphCLKConfig+0xcce>
        break;
 810ae88:	bf00      	nop
 810ae8a:	e000      	b.n	810ae8e <HAL_RCCEx_PeriphCLKConfig+0xcce>
        break;
 810ae8c:	bf00      	nop
    }

    if (ret == HAL_OK)
 810ae8e:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 810ae92:	2b00      	cmp	r3, #0
 810ae94:	d10b      	bne.n	810aeae <HAL_RCCEx_PeriphCLKConfig+0xcee>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 810ae96:	4bc2      	ldr	r3, [pc, #776]	; (810b1a0 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 810ae98:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 810ae9a:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 810ae9e:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 810aea2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 810aea6:	4abe      	ldr	r2, [pc, #760]	; (810b1a0 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 810aea8:	430b      	orrs	r3, r1
 810aeaa:	6553      	str	r3, [r2, #84]	; 0x54
 810aeac:	e003      	b.n	810aeb6 <HAL_RCCEx_PeriphCLKConfig+0xcf6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 810aeae:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 810aeb2:	f887 312e 	strb.w	r3, [r7, #302]	; 0x12e
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 810aeb6:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 810aeba:	e9d3 2300 	ldrd	r2, r3, [r3]
 810aebe:	f002 0340 	and.w	r3, r2, #64	; 0x40
 810aec2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 810aec6:	2300      	movs	r3, #0
 810aec8:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 810aecc:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	; 0xa0
 810aed0:	460b      	mov	r3, r1
 810aed2:	4313      	orrs	r3, r2
 810aed4:	d055      	beq.n	810af82 <HAL_RCCEx_PeriphCLKConfig+0xdc2>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 810aed6:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 810aeda:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 810aede:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 810aee2:	d033      	beq.n	810af4c <HAL_RCCEx_PeriphCLKConfig+0xd8c>
 810aee4:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 810aee8:	d82c      	bhi.n	810af44 <HAL_RCCEx_PeriphCLKConfig+0xd84>
 810aeea:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 810aeee:	d02f      	beq.n	810af50 <HAL_RCCEx_PeriphCLKConfig+0xd90>
 810aef0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 810aef4:	d826      	bhi.n	810af44 <HAL_RCCEx_PeriphCLKConfig+0xd84>
 810aef6:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 810aefa:	d02b      	beq.n	810af54 <HAL_RCCEx_PeriphCLKConfig+0xd94>
 810aefc:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 810af00:	d820      	bhi.n	810af44 <HAL_RCCEx_PeriphCLKConfig+0xd84>
 810af02:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 810af06:	d012      	beq.n	810af2e <HAL_RCCEx_PeriphCLKConfig+0xd6e>
 810af08:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 810af0c:	d81a      	bhi.n	810af44 <HAL_RCCEx_PeriphCLKConfig+0xd84>
 810af0e:	2b00      	cmp	r3, #0
 810af10:	d022      	beq.n	810af58 <HAL_RCCEx_PeriphCLKConfig+0xd98>
 810af12:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 810af16:	d115      	bne.n	810af44 <HAL_RCCEx_PeriphCLKConfig+0xd84>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 810af18:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 810af1c:	3308      	adds	r3, #8
 810af1e:	2100      	movs	r1, #0
 810af20:	4618      	mov	r0, r3
 810af22:	f001 fd27 	bl	810c974 <RCCEx_PLL2_Config>
 810af26:	4603      	mov	r3, r0
 810af28:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 810af2c:	e015      	b.n	810af5a <HAL_RCCEx_PeriphCLKConfig+0xd9a>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 810af2e:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 810af32:	3328      	adds	r3, #40	; 0x28
 810af34:	2102      	movs	r1, #2
 810af36:	4618      	mov	r0, r3
 810af38:	f001 fdce 	bl	810cad8 <RCCEx_PLL3_Config>
 810af3c:	4603      	mov	r3, r0
 810af3e:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 810af42:	e00a      	b.n	810af5a <HAL_RCCEx_PeriphCLKConfig+0xd9a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 810af44:	2301      	movs	r3, #1
 810af46:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
        break;
 810af4a:	e006      	b.n	810af5a <HAL_RCCEx_PeriphCLKConfig+0xd9a>
        break;
 810af4c:	bf00      	nop
 810af4e:	e004      	b.n	810af5a <HAL_RCCEx_PeriphCLKConfig+0xd9a>
        break;
 810af50:	bf00      	nop
 810af52:	e002      	b.n	810af5a <HAL_RCCEx_PeriphCLKConfig+0xd9a>
        break;
 810af54:	bf00      	nop
 810af56:	e000      	b.n	810af5a <HAL_RCCEx_PeriphCLKConfig+0xd9a>
        break;
 810af58:	bf00      	nop
    }

    if (ret == HAL_OK)
 810af5a:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 810af5e:	2b00      	cmp	r3, #0
 810af60:	d10b      	bne.n	810af7a <HAL_RCCEx_PeriphCLKConfig+0xdba>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 810af62:	4b8f      	ldr	r3, [pc, #572]	; (810b1a0 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 810af64:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 810af66:	f423 51e0 	bic.w	r1, r3, #7168	; 0x1c00
 810af6a:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 810af6e:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 810af72:	4a8b      	ldr	r2, [pc, #556]	; (810b1a0 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 810af74:	430b      	orrs	r3, r1
 810af76:	6593      	str	r3, [r2, #88]	; 0x58
 810af78:	e003      	b.n	810af82 <HAL_RCCEx_PeriphCLKConfig+0xdc2>
    }
    else
    {
      /* set overall return value */
      status = ret;
 810af7a:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 810af7e:	f887 312e 	strb.w	r3, [r7, #302]	; 0x12e
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 810af82:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 810af86:	e9d3 2300 	ldrd	r2, r3, [r3]
 810af8a:	f002 0380 	and.w	r3, r2, #128	; 0x80
 810af8e:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 810af92:	2300      	movs	r3, #0
 810af94:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 810af98:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	; 0x98
 810af9c:	460b      	mov	r3, r1
 810af9e:	4313      	orrs	r3, r2
 810afa0:	d055      	beq.n	810b04e <HAL_RCCEx_PeriphCLKConfig+0xe8e>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 810afa2:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 810afa6:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 810afaa:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 810afae:	d033      	beq.n	810b018 <HAL_RCCEx_PeriphCLKConfig+0xe58>
 810afb0:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 810afb4:	d82c      	bhi.n	810b010 <HAL_RCCEx_PeriphCLKConfig+0xe50>
 810afb6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 810afba:	d02f      	beq.n	810b01c <HAL_RCCEx_PeriphCLKConfig+0xe5c>
 810afbc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 810afc0:	d826      	bhi.n	810b010 <HAL_RCCEx_PeriphCLKConfig+0xe50>
 810afc2:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 810afc6:	d02b      	beq.n	810b020 <HAL_RCCEx_PeriphCLKConfig+0xe60>
 810afc8:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 810afcc:	d820      	bhi.n	810b010 <HAL_RCCEx_PeriphCLKConfig+0xe50>
 810afce:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 810afd2:	d012      	beq.n	810affa <HAL_RCCEx_PeriphCLKConfig+0xe3a>
 810afd4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 810afd8:	d81a      	bhi.n	810b010 <HAL_RCCEx_PeriphCLKConfig+0xe50>
 810afda:	2b00      	cmp	r3, #0
 810afdc:	d022      	beq.n	810b024 <HAL_RCCEx_PeriphCLKConfig+0xe64>
 810afde:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 810afe2:	d115      	bne.n	810b010 <HAL_RCCEx_PeriphCLKConfig+0xe50>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 810afe4:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 810afe8:	3308      	adds	r3, #8
 810afea:	2100      	movs	r1, #0
 810afec:	4618      	mov	r0, r3
 810afee:	f001 fcc1 	bl	810c974 <RCCEx_PLL2_Config>
 810aff2:	4603      	mov	r3, r0
 810aff4:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 810aff8:	e015      	b.n	810b026 <HAL_RCCEx_PeriphCLKConfig+0xe66>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 810affa:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 810affe:	3328      	adds	r3, #40	; 0x28
 810b000:	2102      	movs	r1, #2
 810b002:	4618      	mov	r0, r3
 810b004:	f001 fd68 	bl	810cad8 <RCCEx_PLL3_Config>
 810b008:	4603      	mov	r3, r0
 810b00a:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 810b00e:	e00a      	b.n	810b026 <HAL_RCCEx_PeriphCLKConfig+0xe66>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 810b010:	2301      	movs	r3, #1
 810b012:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
        break;
 810b016:	e006      	b.n	810b026 <HAL_RCCEx_PeriphCLKConfig+0xe66>
        break;
 810b018:	bf00      	nop
 810b01a:	e004      	b.n	810b026 <HAL_RCCEx_PeriphCLKConfig+0xe66>
        break;
 810b01c:	bf00      	nop
 810b01e:	e002      	b.n	810b026 <HAL_RCCEx_PeriphCLKConfig+0xe66>
        break;
 810b020:	bf00      	nop
 810b022:	e000      	b.n	810b026 <HAL_RCCEx_PeriphCLKConfig+0xe66>
        break;
 810b024:	bf00      	nop
    }

    if (ret == HAL_OK)
 810b026:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 810b02a:	2b00      	cmp	r3, #0
 810b02c:	d10b      	bne.n	810b046 <HAL_RCCEx_PeriphCLKConfig+0xe86>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 810b02e:	4b5c      	ldr	r3, [pc, #368]	; (810b1a0 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 810b030:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 810b032:	f423 4160 	bic.w	r1, r3, #57344	; 0xe000
 810b036:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 810b03a:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 810b03e:	4a58      	ldr	r2, [pc, #352]	; (810b1a0 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 810b040:	430b      	orrs	r3, r1
 810b042:	6593      	str	r3, [r2, #88]	; 0x58
 810b044:	e003      	b.n	810b04e <HAL_RCCEx_PeriphCLKConfig+0xe8e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 810b046:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 810b04a:	f887 312e 	strb.w	r3, [r7, #302]	; 0x12e

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 810b04e:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 810b052:	e9d3 2300 	ldrd	r2, r3, [r3]
 810b056:	f002 0308 	and.w	r3, r2, #8
 810b05a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 810b05e:	2300      	movs	r3, #0
 810b060:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 810b064:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	; 0x90
 810b068:	460b      	mov	r3, r1
 810b06a:	4313      	orrs	r3, r2
 810b06c:	d01e      	beq.n	810b0ac <HAL_RCCEx_PeriphCLKConfig+0xeec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 810b06e:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 810b072:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 810b076:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 810b07a:	d10c      	bne.n	810b096 <HAL_RCCEx_PeriphCLKConfig+0xed6>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 810b07c:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 810b080:	3328      	adds	r3, #40	; 0x28
 810b082:	2102      	movs	r1, #2
 810b084:	4618      	mov	r0, r3
 810b086:	f001 fd27 	bl	810cad8 <RCCEx_PLL3_Config>
 810b08a:	4603      	mov	r3, r0
 810b08c:	2b00      	cmp	r3, #0
 810b08e:	d002      	beq.n	810b096 <HAL_RCCEx_PeriphCLKConfig+0xed6>
      {
        status = HAL_ERROR;
 810b090:	2301      	movs	r3, #1
 810b092:	f887 312e 	strb.w	r3, [r7, #302]	; 0x12e
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 810b096:	4b42      	ldr	r3, [pc, #264]	; (810b1a0 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 810b098:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 810b09a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 810b09e:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 810b0a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 810b0a6:	4a3e      	ldr	r2, [pc, #248]	; (810b1a0 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 810b0a8:	430b      	orrs	r3, r1
 810b0aa:	6553      	str	r3, [r2, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 810b0ac:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 810b0b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 810b0b4:	f002 0310 	and.w	r3, r2, #16
 810b0b8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 810b0bc:	2300      	movs	r3, #0
 810b0be:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 810b0c2:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	; 0x88
 810b0c6:	460b      	mov	r3, r1
 810b0c8:	4313      	orrs	r3, r2
 810b0ca:	d01e      	beq.n	810b10a <HAL_RCCEx_PeriphCLKConfig+0xf4a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 810b0cc:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 810b0d0:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 810b0d4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 810b0d8:	d10c      	bne.n	810b0f4 <HAL_RCCEx_PeriphCLKConfig+0xf34>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 810b0da:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 810b0de:	3328      	adds	r3, #40	; 0x28
 810b0e0:	2102      	movs	r1, #2
 810b0e2:	4618      	mov	r0, r3
 810b0e4:	f001 fcf8 	bl	810cad8 <RCCEx_PLL3_Config>
 810b0e8:	4603      	mov	r3, r0
 810b0ea:	2b00      	cmp	r3, #0
 810b0ec:	d002      	beq.n	810b0f4 <HAL_RCCEx_PeriphCLKConfig+0xf34>
      {
        status = HAL_ERROR;
 810b0ee:	2301      	movs	r3, #1
 810b0f0:	f887 312e 	strb.w	r3, [r7, #302]	; 0x12e
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 810b0f4:	4b2a      	ldr	r3, [pc, #168]	; (810b1a0 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 810b0f6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 810b0f8:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 810b0fc:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 810b100:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 810b104:	4a26      	ldr	r2, [pc, #152]	; (810b1a0 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 810b106:	430b      	orrs	r3, r1
 810b108:	6593      	str	r3, [r2, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 810b10a:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 810b10e:	e9d3 2300 	ldrd	r2, r3, [r3]
 810b112:	f402 2300 	and.w	r3, r2, #524288	; 0x80000
 810b116:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 810b11a:	2300      	movs	r3, #0
 810b11c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 810b120:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	; 0x80
 810b124:	460b      	mov	r3, r1
 810b126:	4313      	orrs	r3, r2
 810b128:	d040      	beq.n	810b1ac <HAL_RCCEx_PeriphCLKConfig+0xfec>
  {
    switch (PeriphClkInit->AdcClockSelection)
 810b12a:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 810b12e:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 810b132:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 810b136:	d022      	beq.n	810b17e <HAL_RCCEx_PeriphCLKConfig+0xfbe>
 810b138:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 810b13c:	d81b      	bhi.n	810b176 <HAL_RCCEx_PeriphCLKConfig+0xfb6>
 810b13e:	2b00      	cmp	r3, #0
 810b140:	d003      	beq.n	810b14a <HAL_RCCEx_PeriphCLKConfig+0xf8a>
 810b142:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 810b146:	d00b      	beq.n	810b160 <HAL_RCCEx_PeriphCLKConfig+0xfa0>
 810b148:	e015      	b.n	810b176 <HAL_RCCEx_PeriphCLKConfig+0xfb6>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 810b14a:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 810b14e:	3308      	adds	r3, #8
 810b150:	2100      	movs	r1, #0
 810b152:	4618      	mov	r0, r3
 810b154:	f001 fc0e 	bl	810c974 <RCCEx_PLL2_Config>
 810b158:	4603      	mov	r3, r0
 810b15a:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f

        /* ADC clock source configuration done later after clock selection check */
        break;
 810b15e:	e00f      	b.n	810b180 <HAL_RCCEx_PeriphCLKConfig+0xfc0>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 810b160:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 810b164:	3328      	adds	r3, #40	; 0x28
 810b166:	2102      	movs	r1, #2
 810b168:	4618      	mov	r0, r3
 810b16a:	f001 fcb5 	bl	810cad8 <RCCEx_PLL3_Config>
 810b16e:	4603      	mov	r3, r0
 810b170:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f

        /* ADC clock source configuration done later after clock selection check */
        break;
 810b174:	e004      	b.n	810b180 <HAL_RCCEx_PeriphCLKConfig+0xfc0>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 810b176:	2301      	movs	r3, #1
 810b178:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
        break;
 810b17c:	e000      	b.n	810b180 <HAL_RCCEx_PeriphCLKConfig+0xfc0>
        break;
 810b17e:	bf00      	nop
    }

    if (ret == HAL_OK)
 810b180:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 810b184:	2b00      	cmp	r3, #0
 810b186:	d10d      	bne.n	810b1a4 <HAL_RCCEx_PeriphCLKConfig+0xfe4>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 810b188:	4b05      	ldr	r3, [pc, #20]	; (810b1a0 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 810b18a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 810b18c:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 810b190:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 810b194:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 810b198:	4a01      	ldr	r2, [pc, #4]	; (810b1a0 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 810b19a:	430b      	orrs	r3, r1
 810b19c:	6593      	str	r3, [r2, #88]	; 0x58
 810b19e:	e005      	b.n	810b1ac <HAL_RCCEx_PeriphCLKConfig+0xfec>
 810b1a0:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 810b1a4:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 810b1a8:	f887 312e 	strb.w	r3, [r7, #302]	; 0x12e
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 810b1ac:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 810b1b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 810b1b4:	f402 2380 	and.w	r3, r2, #262144	; 0x40000
 810b1b8:	67bb      	str	r3, [r7, #120]	; 0x78
 810b1ba:	2300      	movs	r3, #0
 810b1bc:	67fb      	str	r3, [r7, #124]	; 0x7c
 810b1be:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	; 0x78
 810b1c2:	460b      	mov	r3, r1
 810b1c4:	4313      	orrs	r3, r2
 810b1c6:	d03b      	beq.n	810b240 <HAL_RCCEx_PeriphCLKConfig+0x1080>
  {

    switch (PeriphClkInit->UsbClockSelection)
 810b1c8:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 810b1cc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 810b1d0:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 810b1d4:	d01f      	beq.n	810b216 <HAL_RCCEx_PeriphCLKConfig+0x1056>
 810b1d6:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 810b1da:	d818      	bhi.n	810b20e <HAL_RCCEx_PeriphCLKConfig+0x104e>
 810b1dc:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 810b1e0:	d003      	beq.n	810b1ea <HAL_RCCEx_PeriphCLKConfig+0x102a>
 810b1e2:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 810b1e6:	d007      	beq.n	810b1f8 <HAL_RCCEx_PeriphCLKConfig+0x1038>
 810b1e8:	e011      	b.n	810b20e <HAL_RCCEx_PeriphCLKConfig+0x104e>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 810b1ea:	4b64      	ldr	r3, [pc, #400]	; (810b37c <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 810b1ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 810b1ee:	4a63      	ldr	r2, [pc, #396]	; (810b37c <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 810b1f0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 810b1f4:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 810b1f6:	e00f      	b.n	810b218 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 810b1f8:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 810b1fc:	3328      	adds	r3, #40	; 0x28
 810b1fe:	2101      	movs	r1, #1
 810b200:	4618      	mov	r0, r3
 810b202:	f001 fc69 	bl	810cad8 <RCCEx_PLL3_Config>
 810b206:	4603      	mov	r3, r0
 810b208:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f

        /* USB clock source configuration done later after clock selection check */
        break;
 810b20c:	e004      	b.n	810b218 <HAL_RCCEx_PeriphCLKConfig+0x1058>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 810b20e:	2301      	movs	r3, #1
 810b210:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
        break;
 810b214:	e000      	b.n	810b218 <HAL_RCCEx_PeriphCLKConfig+0x1058>
        break;
 810b216:	bf00      	nop
    }

    if (ret == HAL_OK)
 810b218:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 810b21c:	2b00      	cmp	r3, #0
 810b21e:	d10b      	bne.n	810b238 <HAL_RCCEx_PeriphCLKConfig+0x1078>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 810b220:	4b56      	ldr	r3, [pc, #344]	; (810b37c <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 810b222:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 810b224:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 810b228:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 810b22c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 810b230:	4a52      	ldr	r2, [pc, #328]	; (810b37c <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 810b232:	430b      	orrs	r3, r1
 810b234:	6553      	str	r3, [r2, #84]	; 0x54
 810b236:	e003      	b.n	810b240 <HAL_RCCEx_PeriphCLKConfig+0x1080>
    }
    else
    {
      /* set overall return value */
      status = ret;
 810b238:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 810b23c:	f887 312e 	strb.w	r3, [r7, #302]	; 0x12e
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 810b240:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 810b244:	e9d3 2300 	ldrd	r2, r3, [r3]
 810b248:	f402 3380 	and.w	r3, r2, #65536	; 0x10000
 810b24c:	673b      	str	r3, [r7, #112]	; 0x70
 810b24e:	2300      	movs	r3, #0
 810b250:	677b      	str	r3, [r7, #116]	; 0x74
 810b252:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	; 0x70
 810b256:	460b      	mov	r3, r1
 810b258:	4313      	orrs	r3, r2
 810b25a:	d031      	beq.n	810b2c0 <HAL_RCCEx_PeriphCLKConfig+0x1100>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 810b25c:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 810b260:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 810b262:	2b00      	cmp	r3, #0
 810b264:	d003      	beq.n	810b26e <HAL_RCCEx_PeriphCLKConfig+0x10ae>
 810b266:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 810b26a:	d007      	beq.n	810b27c <HAL_RCCEx_PeriphCLKConfig+0x10bc>
 810b26c:	e011      	b.n	810b292 <HAL_RCCEx_PeriphCLKConfig+0x10d2>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 810b26e:	4b43      	ldr	r3, [pc, #268]	; (810b37c <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 810b270:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 810b272:	4a42      	ldr	r2, [pc, #264]	; (810b37c <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 810b274:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 810b278:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 810b27a:	e00e      	b.n	810b29a <HAL_RCCEx_PeriphCLKConfig+0x10da>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 810b27c:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 810b280:	3308      	adds	r3, #8
 810b282:	2102      	movs	r1, #2
 810b284:	4618      	mov	r0, r3
 810b286:	f001 fb75 	bl	810c974 <RCCEx_PLL2_Config>
 810b28a:	4603      	mov	r3, r0
 810b28c:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 810b290:	e003      	b.n	810b29a <HAL_RCCEx_PeriphCLKConfig+0x10da>

      default:
        ret = HAL_ERROR;
 810b292:	2301      	movs	r3, #1
 810b294:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
        break;
 810b298:	bf00      	nop
    }

    if (ret == HAL_OK)
 810b29a:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 810b29e:	2b00      	cmp	r3, #0
 810b2a0:	d10a      	bne.n	810b2b8 <HAL_RCCEx_PeriphCLKConfig+0x10f8>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 810b2a2:	4b36      	ldr	r3, [pc, #216]	; (810b37c <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 810b2a4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 810b2a6:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 810b2aa:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 810b2ae:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 810b2b0:	4a32      	ldr	r2, [pc, #200]	; (810b37c <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 810b2b2:	430b      	orrs	r3, r1
 810b2b4:	64d3      	str	r3, [r2, #76]	; 0x4c
 810b2b6:	e003      	b.n	810b2c0 <HAL_RCCEx_PeriphCLKConfig+0x1100>
    }
    else
    {
      /* set overall return value */
      status = ret;
 810b2b8:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 810b2bc:	f887 312e 	strb.w	r3, [r7, #302]	; 0x12e
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 810b2c0:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 810b2c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 810b2c8:	f002 5300 	and.w	r3, r2, #536870912	; 0x20000000
 810b2cc:	66bb      	str	r3, [r7, #104]	; 0x68
 810b2ce:	2300      	movs	r3, #0
 810b2d0:	66fb      	str	r3, [r7, #108]	; 0x6c
 810b2d2:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	; 0x68
 810b2d6:	460b      	mov	r3, r1
 810b2d8:	4313      	orrs	r3, r2
 810b2da:	d00c      	beq.n	810b2f6 <HAL_RCCEx_PeriphCLKConfig+0x1136>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 810b2dc:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 810b2e0:	3328      	adds	r3, #40	; 0x28
 810b2e2:	2102      	movs	r1, #2
 810b2e4:	4618      	mov	r0, r3
 810b2e6:	f001 fbf7 	bl	810cad8 <RCCEx_PLL3_Config>
 810b2ea:	4603      	mov	r3, r0
 810b2ec:	2b00      	cmp	r3, #0
 810b2ee:	d002      	beq.n	810b2f6 <HAL_RCCEx_PeriphCLKConfig+0x1136>
    {
      status = HAL_ERROR;
 810b2f0:	2301      	movs	r3, #1
 810b2f2:	f887 312e 	strb.w	r3, [r7, #302]	; 0x12e
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 810b2f6:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 810b2fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 810b2fe:	f402 3300 	and.w	r3, r2, #131072	; 0x20000
 810b302:	663b      	str	r3, [r7, #96]	; 0x60
 810b304:	2300      	movs	r3, #0
 810b306:	667b      	str	r3, [r7, #100]	; 0x64
 810b308:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	; 0x60
 810b30c:	460b      	mov	r3, r1
 810b30e:	4313      	orrs	r3, r2
 810b310:	d03a      	beq.n	810b388 <HAL_RCCEx_PeriphCLKConfig+0x11c8>
  {

    switch (PeriphClkInit->RngClockSelection)
 810b312:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 810b316:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 810b31a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 810b31e:	d018      	beq.n	810b352 <HAL_RCCEx_PeriphCLKConfig+0x1192>
 810b320:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 810b324:	d811      	bhi.n	810b34a <HAL_RCCEx_PeriphCLKConfig+0x118a>
 810b326:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 810b32a:	d014      	beq.n	810b356 <HAL_RCCEx_PeriphCLKConfig+0x1196>
 810b32c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 810b330:	d80b      	bhi.n	810b34a <HAL_RCCEx_PeriphCLKConfig+0x118a>
 810b332:	2b00      	cmp	r3, #0
 810b334:	d011      	beq.n	810b35a <HAL_RCCEx_PeriphCLKConfig+0x119a>
 810b336:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 810b33a:	d106      	bne.n	810b34a <HAL_RCCEx_PeriphCLKConfig+0x118a>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 810b33c:	4b0f      	ldr	r3, [pc, #60]	; (810b37c <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 810b33e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 810b340:	4a0e      	ldr	r2, [pc, #56]	; (810b37c <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 810b342:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 810b346:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 810b348:	e008      	b.n	810b35c <HAL_RCCEx_PeriphCLKConfig+0x119c>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 810b34a:	2301      	movs	r3, #1
 810b34c:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
        break;
 810b350:	e004      	b.n	810b35c <HAL_RCCEx_PeriphCLKConfig+0x119c>
        break;
 810b352:	bf00      	nop
 810b354:	e002      	b.n	810b35c <HAL_RCCEx_PeriphCLKConfig+0x119c>
        break;
 810b356:	bf00      	nop
 810b358:	e000      	b.n	810b35c <HAL_RCCEx_PeriphCLKConfig+0x119c>
        break;
 810b35a:	bf00      	nop
    }

    if (ret == HAL_OK)
 810b35c:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 810b360:	2b00      	cmp	r3, #0
 810b362:	d10d      	bne.n	810b380 <HAL_RCCEx_PeriphCLKConfig+0x11c0>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 810b364:	4b05      	ldr	r3, [pc, #20]	; (810b37c <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 810b366:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 810b368:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 810b36c:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 810b370:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 810b374:	4a01      	ldr	r2, [pc, #4]	; (810b37c <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 810b376:	430b      	orrs	r3, r1
 810b378:	6553      	str	r3, [r2, #84]	; 0x54
 810b37a:	e005      	b.n	810b388 <HAL_RCCEx_PeriphCLKConfig+0x11c8>
 810b37c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 810b380:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 810b384:	f887 312e 	strb.w	r3, [r7, #302]	; 0x12e
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 810b388:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 810b38c:	e9d3 2300 	ldrd	r2, r3, [r3]
 810b390:	f402 1380 	and.w	r3, r2, #1048576	; 0x100000
 810b394:	65bb      	str	r3, [r7, #88]	; 0x58
 810b396:	2300      	movs	r3, #0
 810b398:	65fb      	str	r3, [r7, #92]	; 0x5c
 810b39a:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	; 0x58
 810b39e:	460b      	mov	r3, r1
 810b3a0:	4313      	orrs	r3, r2
 810b3a2:	d009      	beq.n	810b3b8 <HAL_RCCEx_PeriphCLKConfig+0x11f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 810b3a4:	4baa      	ldr	r3, [pc, #680]	; (810b650 <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 810b3a6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 810b3a8:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 810b3ac:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 810b3b0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 810b3b2:	4aa7      	ldr	r2, [pc, #668]	; (810b650 <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 810b3b4:	430b      	orrs	r3, r1
 810b3b6:	6513      	str	r3, [r2, #80]	; 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 810b3b8:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 810b3bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 810b3c0:	f002 5380 	and.w	r3, r2, #268435456	; 0x10000000
 810b3c4:	653b      	str	r3, [r7, #80]	; 0x50
 810b3c6:	2300      	movs	r3, #0
 810b3c8:	657b      	str	r3, [r7, #84]	; 0x54
 810b3ca:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	; 0x50
 810b3ce:	460b      	mov	r3, r1
 810b3d0:	4313      	orrs	r3, r2
 810b3d2:	d00a      	beq.n	810b3ea <HAL_RCCEx_PeriphCLKConfig+0x122a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 810b3d4:	4b9e      	ldr	r3, [pc, #632]	; (810b650 <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 810b3d6:	691b      	ldr	r3, [r3, #16]
 810b3d8:	f423 4180 	bic.w	r1, r3, #16384	; 0x4000
 810b3dc:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 810b3e0:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 810b3e4:	4a9a      	ldr	r2, [pc, #616]	; (810b650 <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 810b3e6:	430b      	orrs	r3, r1
 810b3e8:	6113      	str	r3, [r2, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 810b3ea:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 810b3ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 810b3f2:	f402 1300 	and.w	r3, r2, #2097152	; 0x200000
 810b3f6:	64bb      	str	r3, [r7, #72]	; 0x48
 810b3f8:	2300      	movs	r3, #0
 810b3fa:	64fb      	str	r3, [r7, #76]	; 0x4c
 810b3fc:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	; 0x48
 810b400:	460b      	mov	r3, r1
 810b402:	4313      	orrs	r3, r2
 810b404:	d009      	beq.n	810b41a <HAL_RCCEx_PeriphCLKConfig+0x125a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 810b406:	4b92      	ldr	r3, [pc, #584]	; (810b650 <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 810b408:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 810b40a:	f023 7180 	bic.w	r1, r3, #16777216	; 0x1000000
 810b40e:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 810b412:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 810b414:	4a8e      	ldr	r2, [pc, #568]	; (810b650 <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 810b416:	430b      	orrs	r3, r1
 810b418:	6513      	str	r3, [r2, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 810b41a:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 810b41e:	e9d3 2300 	ldrd	r2, r3, [r3]
 810b422:	f002 4380 	and.w	r3, r2, #1073741824	; 0x40000000
 810b426:	643b      	str	r3, [r7, #64]	; 0x40
 810b428:	2300      	movs	r3, #0
 810b42a:	647b      	str	r3, [r7, #68]	; 0x44
 810b42c:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	; 0x40
 810b430:	460b      	mov	r3, r1
 810b432:	4313      	orrs	r3, r2
 810b434:	d00e      	beq.n	810b454 <HAL_RCCEx_PeriphCLKConfig+0x1294>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 810b436:	4b86      	ldr	r3, [pc, #536]	; (810b650 <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 810b438:	691b      	ldr	r3, [r3, #16]
 810b43a:	4a85      	ldr	r2, [pc, #532]	; (810b650 <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 810b43c:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 810b440:	6113      	str	r3, [r2, #16]
 810b442:	4b83      	ldr	r3, [pc, #524]	; (810b650 <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 810b444:	6919      	ldr	r1, [r3, #16]
 810b446:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 810b44a:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 810b44e:	4a80      	ldr	r2, [pc, #512]	; (810b650 <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 810b450:	430b      	orrs	r3, r1
 810b452:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 810b454:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 810b458:	e9d3 2300 	ldrd	r2, r3, [r3]
 810b45c:	f002 4300 	and.w	r3, r2, #2147483648	; 0x80000000
 810b460:	63bb      	str	r3, [r7, #56]	; 0x38
 810b462:	2300      	movs	r3, #0
 810b464:	63fb      	str	r3, [r7, #60]	; 0x3c
 810b466:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	; 0x38
 810b46a:	460b      	mov	r3, r1
 810b46c:	4313      	orrs	r3, r2
 810b46e:	d009      	beq.n	810b484 <HAL_RCCEx_PeriphCLKConfig+0x12c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 810b470:	4b77      	ldr	r3, [pc, #476]	; (810b650 <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 810b472:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 810b474:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 810b478:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 810b47c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 810b47e:	4a74      	ldr	r2, [pc, #464]	; (810b650 <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 810b480:	430b      	orrs	r3, r1
 810b482:	64d3      	str	r3, [r2, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 810b484:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 810b488:	e9d3 2300 	ldrd	r2, r3, [r3]
 810b48c:	f402 0300 	and.w	r3, r2, #8388608	; 0x800000
 810b490:	633b      	str	r3, [r7, #48]	; 0x30
 810b492:	2300      	movs	r3, #0
 810b494:	637b      	str	r3, [r7, #52]	; 0x34
 810b496:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	; 0x30
 810b49a:	460b      	mov	r3, r1
 810b49c:	4313      	orrs	r3, r2
 810b49e:	d00a      	beq.n	810b4b6 <HAL_RCCEx_PeriphCLKConfig+0x12f6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 810b4a0:	4b6b      	ldr	r3, [pc, #428]	; (810b650 <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 810b4a2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 810b4a4:	f423 0140 	bic.w	r1, r3, #12582912	; 0xc00000
 810b4a8:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 810b4ac:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 810b4b0:	4a67      	ldr	r2, [pc, #412]	; (810b650 <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 810b4b2:	430b      	orrs	r3, r1
 810b4b4:	6553      	str	r3, [r2, #84]	; 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 810b4b6:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 810b4ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 810b4be:	2100      	movs	r1, #0
 810b4c0:	62b9      	str	r1, [r7, #40]	; 0x28
 810b4c2:	f003 0301 	and.w	r3, r3, #1
 810b4c6:	62fb      	str	r3, [r7, #44]	; 0x2c
 810b4c8:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	; 0x28
 810b4cc:	460b      	mov	r3, r1
 810b4ce:	4313      	orrs	r3, r2
 810b4d0:	d011      	beq.n	810b4f6 <HAL_RCCEx_PeriphCLKConfig+0x1336>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 810b4d2:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 810b4d6:	3308      	adds	r3, #8
 810b4d8:	2100      	movs	r1, #0
 810b4da:	4618      	mov	r0, r3
 810b4dc:	f001 fa4a 	bl	810c974 <RCCEx_PLL2_Config>
 810b4e0:	4603      	mov	r3, r0
 810b4e2:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
    
    if (ret == HAL_OK)
 810b4e6:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 810b4ea:	2b00      	cmp	r3, #0
 810b4ec:	d003      	beq.n	810b4f6 <HAL_RCCEx_PeriphCLKConfig+0x1336>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 810b4ee:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 810b4f2:	f887 312e 	strb.w	r3, [r7, #302]	; 0x12e
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 810b4f6:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 810b4fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 810b4fe:	2100      	movs	r1, #0
 810b500:	6239      	str	r1, [r7, #32]
 810b502:	f003 0302 	and.w	r3, r3, #2
 810b506:	627b      	str	r3, [r7, #36]	; 0x24
 810b508:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 810b50c:	460b      	mov	r3, r1
 810b50e:	4313      	orrs	r3, r2
 810b510:	d011      	beq.n	810b536 <HAL_RCCEx_PeriphCLKConfig+0x1376>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 810b512:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 810b516:	3308      	adds	r3, #8
 810b518:	2101      	movs	r1, #1
 810b51a:	4618      	mov	r0, r3
 810b51c:	f001 fa2a 	bl	810c974 <RCCEx_PLL2_Config>
 810b520:	4603      	mov	r3, r0
 810b522:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
    
    if (ret == HAL_OK)
 810b526:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 810b52a:	2b00      	cmp	r3, #0
 810b52c:	d003      	beq.n	810b536 <HAL_RCCEx_PeriphCLKConfig+0x1376>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 810b52e:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 810b532:	f887 312e 	strb.w	r3, [r7, #302]	; 0x12e
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 810b536:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 810b53a:	e9d3 2300 	ldrd	r2, r3, [r3]
 810b53e:	2100      	movs	r1, #0
 810b540:	61b9      	str	r1, [r7, #24]
 810b542:	f003 0304 	and.w	r3, r3, #4
 810b546:	61fb      	str	r3, [r7, #28]
 810b548:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 810b54c:	460b      	mov	r3, r1
 810b54e:	4313      	orrs	r3, r2
 810b550:	d011      	beq.n	810b576 <HAL_RCCEx_PeriphCLKConfig+0x13b6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 810b552:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 810b556:	3308      	adds	r3, #8
 810b558:	2102      	movs	r1, #2
 810b55a:	4618      	mov	r0, r3
 810b55c:	f001 fa0a 	bl	810c974 <RCCEx_PLL2_Config>
 810b560:	4603      	mov	r3, r0
 810b562:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
    
    if (ret == HAL_OK)
 810b566:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 810b56a:	2b00      	cmp	r3, #0
 810b56c:	d003      	beq.n	810b576 <HAL_RCCEx_PeriphCLKConfig+0x13b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 810b56e:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 810b572:	f887 312e 	strb.w	r3, [r7, #302]	; 0x12e
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 810b576:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 810b57a:	e9d3 2300 	ldrd	r2, r3, [r3]
 810b57e:	2100      	movs	r1, #0
 810b580:	6139      	str	r1, [r7, #16]
 810b582:	f003 0308 	and.w	r3, r3, #8
 810b586:	617b      	str	r3, [r7, #20]
 810b588:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 810b58c:	460b      	mov	r3, r1
 810b58e:	4313      	orrs	r3, r2
 810b590:	d011      	beq.n	810b5b6 <HAL_RCCEx_PeriphCLKConfig+0x13f6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 810b592:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 810b596:	3328      	adds	r3, #40	; 0x28
 810b598:	2100      	movs	r1, #0
 810b59a:	4618      	mov	r0, r3
 810b59c:	f001 fa9c 	bl	810cad8 <RCCEx_PLL3_Config>
 810b5a0:	4603      	mov	r3, r0
 810b5a2:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
  
    if (ret == HAL_OK)
 810b5a6:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 810b5aa:	2b00      	cmp	r3, #0
 810b5ac:	d003      	beq.n	810b5b6 <HAL_RCCEx_PeriphCLKConfig+0x13f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 810b5ae:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 810b5b2:	f887 312e 	strb.w	r3, [r7, #302]	; 0x12e
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 810b5b6:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 810b5ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 810b5be:	2100      	movs	r1, #0
 810b5c0:	60b9      	str	r1, [r7, #8]
 810b5c2:	f003 0310 	and.w	r3, r3, #16
 810b5c6:	60fb      	str	r3, [r7, #12]
 810b5c8:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 810b5cc:	460b      	mov	r3, r1
 810b5ce:	4313      	orrs	r3, r2
 810b5d0:	d011      	beq.n	810b5f6 <HAL_RCCEx_PeriphCLKConfig+0x1436>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 810b5d2:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 810b5d6:	3328      	adds	r3, #40	; 0x28
 810b5d8:	2101      	movs	r1, #1
 810b5da:	4618      	mov	r0, r3
 810b5dc:	f001 fa7c 	bl	810cad8 <RCCEx_PLL3_Config>
 810b5e0:	4603      	mov	r3, r0
 810b5e2:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
    
    if (ret == HAL_OK)
 810b5e6:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 810b5ea:	2b00      	cmp	r3, #0
 810b5ec:	d003      	beq.n	810b5f6 <HAL_RCCEx_PeriphCLKConfig+0x1436>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 810b5ee:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 810b5f2:	f887 312e 	strb.w	r3, [r7, #302]	; 0x12e
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 810b5f6:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 810b5fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 810b5fe:	2100      	movs	r1, #0
 810b600:	6039      	str	r1, [r7, #0]
 810b602:	f003 0320 	and.w	r3, r3, #32
 810b606:	607b      	str	r3, [r7, #4]
 810b608:	e9d7 1200 	ldrd	r1, r2, [r7]
 810b60c:	460b      	mov	r3, r1
 810b60e:	4313      	orrs	r3, r2
 810b610:	d011      	beq.n	810b636 <HAL_RCCEx_PeriphCLKConfig+0x1476>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 810b612:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 810b616:	3328      	adds	r3, #40	; 0x28
 810b618:	2102      	movs	r1, #2
 810b61a:	4618      	mov	r0, r3
 810b61c:	f001 fa5c 	bl	810cad8 <RCCEx_PLL3_Config>
 810b620:	4603      	mov	r3, r0
 810b622:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
    
    if (ret == HAL_OK)
 810b626:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 810b62a:	2b00      	cmp	r3, #0
 810b62c:	d003      	beq.n	810b636 <HAL_RCCEx_PeriphCLKConfig+0x1476>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 810b62e:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 810b632:	f887 312e 	strb.w	r3, [r7, #302]	; 0x12e
    } 
  }

  if (status == HAL_OK)
 810b636:	f897 312e 	ldrb.w	r3, [r7, #302]	; 0x12e
 810b63a:	2b00      	cmp	r3, #0
 810b63c:	d101      	bne.n	810b642 <HAL_RCCEx_PeriphCLKConfig+0x1482>
  {
    return HAL_OK;
 810b63e:	2300      	movs	r3, #0
 810b640:	e000      	b.n	810b644 <HAL_RCCEx_PeriphCLKConfig+0x1484>
  }
  return HAL_ERROR;
 810b642:	2301      	movs	r3, #1
}
 810b644:	4618      	mov	r0, r3
 810b646:	f507 7798 	add.w	r7, r7, #304	; 0x130
 810b64a:	46bd      	mov	sp, r7
 810b64c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 810b650:	58024400 	.word	0x58024400

0810b654 <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in KHz
  *
  *  (*) : Available on some STM32H7 lines only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint64_t PeriphClk)
{
 810b654:	b580      	push	{r7, lr}
 810b656:	b090      	sub	sp, #64	; 0x40
 810b658:	af00      	add	r7, sp, #0
 810b65a:	e9c7 0100 	strd	r0, r1, [r7]
  /* This variable is used to store the SAI and CKP clock source */
  uint32_t saiclocksource;
  uint32_t ckpclocksource;
  uint32_t srcclk;

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 810b65e:	e9d7 2300 	ldrd	r2, r3, [r7]
 810b662:	f5a2 7180 	sub.w	r1, r2, #256	; 0x100
 810b666:	430b      	orrs	r3, r1
 810b668:	f040 8094 	bne.w	810b794 <HAL_RCCEx_GetPeriphCLKFreq+0x140>
  {

    saiclocksource = __HAL_RCC_GET_SAI1_SOURCE();
 810b66c:	4b9e      	ldr	r3, [pc, #632]	; (810b8e8 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 810b66e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 810b670:	f003 0307 	and.w	r3, r3, #7
 810b674:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 810b676:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 810b678:	2b04      	cmp	r3, #4
 810b67a:	f200 8087 	bhi.w	810b78c <HAL_RCCEx_GetPeriphCLKFreq+0x138>
 810b67e:	a201      	add	r2, pc, #4	; (adr r2, 810b684 <HAL_RCCEx_GetPeriphCLKFreq+0x30>)
 810b680:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 810b684:	0810b699 	.word	0x0810b699
 810b688:	0810b6c1 	.word	0x0810b6c1
 810b68c:	0810b6e9 	.word	0x0810b6e9
 810b690:	0810b785 	.word	0x0810b785
 810b694:	0810b711 	.word	0x0810b711
    {
      case RCC_SAI1CLKSOURCE_PLL: /* PLL1 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 810b698:	4b93      	ldr	r3, [pc, #588]	; (810b8e8 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 810b69a:	681b      	ldr	r3, [r3, #0]
 810b69c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 810b6a0:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 810b6a4:	d108      	bne.n	810b6b8 <HAL_RCCEx_GetPeriphCLKFreq+0x64>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 810b6a6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 810b6aa:	4618      	mov	r0, r3
 810b6ac:	f001 f810 	bl	810c6d0 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 810b6b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 810b6b2:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 810b6b4:	f000 bd45 	b.w	810c142 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 810b6b8:	2300      	movs	r3, #0
 810b6ba:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 810b6bc:	f000 bd41 	b.w	810c142 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 810b6c0:	4b89      	ldr	r3, [pc, #548]	; (810b8e8 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 810b6c2:	681b      	ldr	r3, [r3, #0]
 810b6c4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 810b6c8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 810b6cc:	d108      	bne.n	810b6e0 <HAL_RCCEx_GetPeriphCLKFreq+0x8c>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 810b6ce:	f107 0318 	add.w	r3, r7, #24
 810b6d2:	4618      	mov	r0, r3
 810b6d4:	f000 fd54 	bl	810c180 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 810b6d8:	69bb      	ldr	r3, [r7, #24]
 810b6da:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 810b6dc:	f000 bd31 	b.w	810c142 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 810b6e0:	2300      	movs	r3, #0
 810b6e2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 810b6e4:	f000 bd2d 	b.w	810c142 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI1CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 810b6e8:	4b7f      	ldr	r3, [pc, #508]	; (810b8e8 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 810b6ea:	681b      	ldr	r3, [r3, #0]
 810b6ec:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 810b6f0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 810b6f4:	d108      	bne.n	810b708 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 810b6f6:	f107 030c 	add.w	r3, r7, #12
 810b6fa:	4618      	mov	r0, r3
 810b6fc:	f000 fe94 	bl	810c428 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 810b700:	68fb      	ldr	r3, [r7, #12]
 810b702:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 810b704:	f000 bd1d 	b.w	810c142 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 810b708:	2300      	movs	r3, #0
 810b70a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 810b70c:	f000 bd19 	b.w	810c142 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI1CLKSOURCE_CLKP: /* CKPER is the clock source for SAI1*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 810b710:	4b75      	ldr	r3, [pc, #468]	; (810b8e8 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 810b712:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 810b714:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 810b718:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 810b71a:	4b73      	ldr	r3, [pc, #460]	; (810b8e8 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 810b71c:	681b      	ldr	r3, [r3, #0]
 810b71e:	f003 0304 	and.w	r3, r3, #4
 810b722:	2b04      	cmp	r3, #4
 810b724:	d10c      	bne.n	810b740 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
 810b726:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 810b728:	2b00      	cmp	r3, #0
 810b72a:	d109      	bne.n	810b740 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 810b72c:	4b6e      	ldr	r3, [pc, #440]	; (810b8e8 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 810b72e:	681b      	ldr	r3, [r3, #0]
 810b730:	08db      	lsrs	r3, r3, #3
 810b732:	f003 0303 	and.w	r3, r3, #3
 810b736:	4a6d      	ldr	r2, [pc, #436]	; (810b8ec <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 810b738:	fa22 f303 	lsr.w	r3, r2, r3
 810b73c:	63fb      	str	r3, [r7, #60]	; 0x3c
 810b73e:	e01f      	b.n	810b780 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 810b740:	4b69      	ldr	r3, [pc, #420]	; (810b8e8 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 810b742:	681b      	ldr	r3, [r3, #0]
 810b744:	f403 7380 	and.w	r3, r3, #256	; 0x100
 810b748:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 810b74c:	d106      	bne.n	810b75c <HAL_RCCEx_GetPeriphCLKFreq+0x108>
 810b74e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 810b750:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 810b754:	d102      	bne.n	810b75c <HAL_RCCEx_GetPeriphCLKFreq+0x108>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 810b756:	4b66      	ldr	r3, [pc, #408]	; (810b8f0 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 810b758:	63fb      	str	r3, [r7, #60]	; 0x3c
 810b75a:	e011      	b.n	810b780 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 810b75c:	4b62      	ldr	r3, [pc, #392]	; (810b8e8 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 810b75e:	681b      	ldr	r3, [r3, #0]
 810b760:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 810b764:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 810b768:	d106      	bne.n	810b778 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
 810b76a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 810b76c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 810b770:	d102      	bne.n	810b778 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 810b772:	4b60      	ldr	r3, [pc, #384]	; (810b8f4 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 810b774:	63fb      	str	r3, [r7, #60]	; 0x3c
 810b776:	e003      	b.n	810b780 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 810b778:	2300      	movs	r3, #0
 810b77a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 810b77c:	f000 bce1 	b.w	810c142 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 810b780:	f000 bcdf 	b.w	810c142 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SAI1CLKSOURCE_PIN): /* External clock is the clock source for SAI1 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 810b784:	4b5c      	ldr	r3, [pc, #368]	; (810b8f8 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 810b786:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 810b788:	f000 bcdb 	b.w	810c142 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 810b78c:	2300      	movs	r3, #0
 810b78e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 810b790:	f000 bcd7 	b.w	810c142 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }

#if defined(SAI3)
  else if (PeriphClk == RCC_PERIPHCLK_SAI23)
 810b794:	e9d7 2300 	ldrd	r2, r3, [r7]
 810b798:	f5a2 7100 	sub.w	r1, r2, #512	; 0x200
 810b79c:	430b      	orrs	r3, r1
 810b79e:	f040 80ad 	bne.w	810b8fc <HAL_RCCEx_GetPeriphCLKFreq+0x2a8>
  {

    saiclocksource = __HAL_RCC_GET_SAI23_SOURCE();
 810b7a2:	4b51      	ldr	r3, [pc, #324]	; (810b8e8 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 810b7a4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 810b7a6:	f403 73e0 	and.w	r3, r3, #448	; 0x1c0
 810b7aa:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 810b7ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 810b7ae:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 810b7b2:	d056      	beq.n	810b862 <HAL_RCCEx_GetPeriphCLKFreq+0x20e>
 810b7b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 810b7b6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 810b7ba:	f200 8090 	bhi.w	810b8de <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 810b7be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 810b7c0:	2bc0      	cmp	r3, #192	; 0xc0
 810b7c2:	f000 8088 	beq.w	810b8d6 <HAL_RCCEx_GetPeriphCLKFreq+0x282>
 810b7c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 810b7c8:	2bc0      	cmp	r3, #192	; 0xc0
 810b7ca:	f200 8088 	bhi.w	810b8de <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 810b7ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 810b7d0:	2b80      	cmp	r3, #128	; 0x80
 810b7d2:	d032      	beq.n	810b83a <HAL_RCCEx_GetPeriphCLKFreq+0x1e6>
 810b7d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 810b7d6:	2b80      	cmp	r3, #128	; 0x80
 810b7d8:	f200 8081 	bhi.w	810b8de <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 810b7dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 810b7de:	2b00      	cmp	r3, #0
 810b7e0:	d003      	beq.n	810b7ea <HAL_RCCEx_GetPeriphCLKFreq+0x196>
 810b7e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 810b7e4:	2b40      	cmp	r3, #64	; 0x40
 810b7e6:	d014      	beq.n	810b812 <HAL_RCCEx_GetPeriphCLKFreq+0x1be>
 810b7e8:	e079      	b.n	810b8de <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
    {
      case RCC_SAI23CLKSOURCE_PLL: /* PLL1 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 810b7ea:	4b3f      	ldr	r3, [pc, #252]	; (810b8e8 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 810b7ec:	681b      	ldr	r3, [r3, #0]
 810b7ee:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 810b7f2:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 810b7f6:	d108      	bne.n	810b80a <HAL_RCCEx_GetPeriphCLKFreq+0x1b6>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 810b7f8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 810b7fc:	4618      	mov	r0, r3
 810b7fe:	f000 ff67 	bl	810c6d0 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 810b802:	6abb      	ldr	r3, [r7, #40]	; 0x28
 810b804:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 810b806:	f000 bc9c 	b.w	810c142 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 810b80a:	2300      	movs	r3, #0
 810b80c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 810b80e:	f000 bc98 	b.w	810c142 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 810b812:	4b35      	ldr	r3, [pc, #212]	; (810b8e8 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 810b814:	681b      	ldr	r3, [r3, #0]
 810b816:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 810b81a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 810b81e:	d108      	bne.n	810b832 <HAL_RCCEx_GetPeriphCLKFreq+0x1de>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 810b820:	f107 0318 	add.w	r3, r7, #24
 810b824:	4618      	mov	r0, r3
 810b826:	f000 fcab 	bl	810c180 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 810b82a:	69bb      	ldr	r3, [r7, #24]
 810b82c:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 810b82e:	f000 bc88 	b.w	810c142 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 810b832:	2300      	movs	r3, #0
 810b834:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 810b836:	f000 bc84 	b.w	810c142 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI23CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 810b83a:	4b2b      	ldr	r3, [pc, #172]	; (810b8e8 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 810b83c:	681b      	ldr	r3, [r3, #0]
 810b83e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 810b842:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 810b846:	d108      	bne.n	810b85a <HAL_RCCEx_GetPeriphCLKFreq+0x206>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 810b848:	f107 030c 	add.w	r3, r7, #12
 810b84c:	4618      	mov	r0, r3
 810b84e:	f000 fdeb 	bl	810c428 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 810b852:	68fb      	ldr	r3, [r7, #12]
 810b854:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 810b856:	f000 bc74 	b.w	810c142 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 810b85a:	2300      	movs	r3, #0
 810b85c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 810b85e:	f000 bc70 	b.w	810c142 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI23CLKSOURCE_CLKP: /* CKPER is the clock source for SAI2/3 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 810b862:	4b21      	ldr	r3, [pc, #132]	; (810b8e8 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 810b864:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 810b866:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 810b86a:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 810b86c:	4b1e      	ldr	r3, [pc, #120]	; (810b8e8 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 810b86e:	681b      	ldr	r3, [r3, #0]
 810b870:	f003 0304 	and.w	r3, r3, #4
 810b874:	2b04      	cmp	r3, #4
 810b876:	d10c      	bne.n	810b892 <HAL_RCCEx_GetPeriphCLKFreq+0x23e>
 810b878:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 810b87a:	2b00      	cmp	r3, #0
 810b87c:	d109      	bne.n	810b892 <HAL_RCCEx_GetPeriphCLKFreq+0x23e>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 810b87e:	4b1a      	ldr	r3, [pc, #104]	; (810b8e8 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 810b880:	681b      	ldr	r3, [r3, #0]
 810b882:	08db      	lsrs	r3, r3, #3
 810b884:	f003 0303 	and.w	r3, r3, #3
 810b888:	4a18      	ldr	r2, [pc, #96]	; (810b8ec <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 810b88a:	fa22 f303 	lsr.w	r3, r2, r3
 810b88e:	63fb      	str	r3, [r7, #60]	; 0x3c
 810b890:	e01f      	b.n	810b8d2 <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 810b892:	4b15      	ldr	r3, [pc, #84]	; (810b8e8 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 810b894:	681b      	ldr	r3, [r3, #0]
 810b896:	f403 7380 	and.w	r3, r3, #256	; 0x100
 810b89a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 810b89e:	d106      	bne.n	810b8ae <HAL_RCCEx_GetPeriphCLKFreq+0x25a>
 810b8a0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 810b8a2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 810b8a6:	d102      	bne.n	810b8ae <HAL_RCCEx_GetPeriphCLKFreq+0x25a>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 810b8a8:	4b11      	ldr	r3, [pc, #68]	; (810b8f0 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 810b8aa:	63fb      	str	r3, [r7, #60]	; 0x3c
 810b8ac:	e011      	b.n	810b8d2 <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 810b8ae:	4b0e      	ldr	r3, [pc, #56]	; (810b8e8 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 810b8b0:	681b      	ldr	r3, [r3, #0]
 810b8b2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 810b8b6:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 810b8ba:	d106      	bne.n	810b8ca <HAL_RCCEx_GetPeriphCLKFreq+0x276>
 810b8bc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 810b8be:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 810b8c2:	d102      	bne.n	810b8ca <HAL_RCCEx_GetPeriphCLKFreq+0x276>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 810b8c4:	4b0b      	ldr	r3, [pc, #44]	; (810b8f4 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 810b8c6:	63fb      	str	r3, [r7, #60]	; 0x3c
 810b8c8:	e003      	b.n	810b8d2 <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 810b8ca:	2300      	movs	r3, #0
 810b8cc:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 810b8ce:	f000 bc38 	b.w	810c142 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 810b8d2:	f000 bc36 	b.w	810c142 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SAI23CLKSOURCE_PIN): /* External clock is the clock source for SAI2/3 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 810b8d6:	4b08      	ldr	r3, [pc, #32]	; (810b8f8 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 810b8d8:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 810b8da:	f000 bc32 	b.w	810c142 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 810b8de:	2300      	movs	r3, #0
 810b8e0:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 810b8e2:	f000 bc2e 	b.w	810c142 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 810b8e6:	bf00      	nop
 810b8e8:	58024400 	.word	0x58024400
 810b8ec:	03d09000 	.word	0x03d09000
 810b8f0:	003d0900 	.word	0x003d0900
 810b8f4:	017d7840 	.word	0x017d7840
 810b8f8:	00bb8000 	.word	0x00bb8000
    }
  }
#endif

#if defined(SAI4)
  else if (PeriphClk == RCC_PERIPHCLK_SAI4A)
 810b8fc:	e9d7 2300 	ldrd	r2, r3, [r7]
 810b900:	f5a2 6180 	sub.w	r1, r2, #1024	; 0x400
 810b904:	430b      	orrs	r3, r1
 810b906:	f040 809c 	bne.w	810ba42 <HAL_RCCEx_GetPeriphCLKFreq+0x3ee>
  {

    saiclocksource = __HAL_RCC_GET_SAI4A_SOURCE();
 810b90a:	4b9e      	ldr	r3, [pc, #632]	; (810bb84 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 810b90c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 810b90e:	f403 0360 	and.w	r3, r3, #14680064	; 0xe00000
 810b912:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 810b914:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 810b916:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 810b91a:	d054      	beq.n	810b9c6 <HAL_RCCEx_GetPeriphCLKFreq+0x372>
 810b91c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 810b91e:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 810b922:	f200 808b 	bhi.w	810ba3c <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 810b926:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 810b928:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 810b92c:	f000 8083 	beq.w	810ba36 <HAL_RCCEx_GetPeriphCLKFreq+0x3e2>
 810b930:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 810b932:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 810b936:	f200 8081 	bhi.w	810ba3c <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 810b93a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 810b93c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 810b940:	d02f      	beq.n	810b9a2 <HAL_RCCEx_GetPeriphCLKFreq+0x34e>
 810b942:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 810b944:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 810b948:	d878      	bhi.n	810ba3c <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 810b94a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 810b94c:	2b00      	cmp	r3, #0
 810b94e:	d004      	beq.n	810b95a <HAL_RCCEx_GetPeriphCLKFreq+0x306>
 810b950:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 810b952:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 810b956:	d012      	beq.n	810b97e <HAL_RCCEx_GetPeriphCLKFreq+0x32a>
 810b958:	e070      	b.n	810ba3c <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
    {
      case RCC_SAI4ACLKSOURCE_PLL: /* PLL1 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 810b95a:	4b8a      	ldr	r3, [pc, #552]	; (810bb84 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 810b95c:	681b      	ldr	r3, [r3, #0]
 810b95e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 810b962:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 810b966:	d107      	bne.n	810b978 <HAL_RCCEx_GetPeriphCLKFreq+0x324>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 810b968:	f107 0324 	add.w	r3, r7, #36	; 0x24
 810b96c:	4618      	mov	r0, r3
 810b96e:	f000 feaf 	bl	810c6d0 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 810b972:	6abb      	ldr	r3, [r7, #40]	; 0x28
 810b974:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 810b976:	e3e4      	b.n	810c142 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 810b978:	2300      	movs	r3, #0
 810b97a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 810b97c:	e3e1      	b.n	810c142 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI4ACLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 810b97e:	4b81      	ldr	r3, [pc, #516]	; (810bb84 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 810b980:	681b      	ldr	r3, [r3, #0]
 810b982:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 810b986:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 810b98a:	d107      	bne.n	810b99c <HAL_RCCEx_GetPeriphCLKFreq+0x348>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 810b98c:	f107 0318 	add.w	r3, r7, #24
 810b990:	4618      	mov	r0, r3
 810b992:	f000 fbf5 	bl	810c180 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 810b996:	69bb      	ldr	r3, [r7, #24]
 810b998:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 810b99a:	e3d2      	b.n	810c142 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 810b99c:	2300      	movs	r3, #0
 810b99e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 810b9a0:	e3cf      	b.n	810c142 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 810b9a2:	4b78      	ldr	r3, [pc, #480]	; (810bb84 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 810b9a4:	681b      	ldr	r3, [r3, #0]
 810b9a6:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 810b9aa:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 810b9ae:	d107      	bne.n	810b9c0 <HAL_RCCEx_GetPeriphCLKFreq+0x36c>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 810b9b0:	f107 030c 	add.w	r3, r7, #12
 810b9b4:	4618      	mov	r0, r3
 810b9b6:	f000 fd37 	bl	810c428 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 810b9ba:	68fb      	ldr	r3, [r7, #12]
 810b9bc:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 810b9be:	e3c0      	b.n	810c142 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 810b9c0:	2300      	movs	r3, #0
 810b9c2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 810b9c4:	e3bd      	b.n	810c142 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_CLKP: /* CKPER is the clock source for SAI4A*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 810b9c6:	4b6f      	ldr	r3, [pc, #444]	; (810bb84 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 810b9c8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 810b9ca:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 810b9ce:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 810b9d0:	4b6c      	ldr	r3, [pc, #432]	; (810bb84 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 810b9d2:	681b      	ldr	r3, [r3, #0]
 810b9d4:	f003 0304 	and.w	r3, r3, #4
 810b9d8:	2b04      	cmp	r3, #4
 810b9da:	d10c      	bne.n	810b9f6 <HAL_RCCEx_GetPeriphCLKFreq+0x3a2>
 810b9dc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 810b9de:	2b00      	cmp	r3, #0
 810b9e0:	d109      	bne.n	810b9f6 <HAL_RCCEx_GetPeriphCLKFreq+0x3a2>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 810b9e2:	4b68      	ldr	r3, [pc, #416]	; (810bb84 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 810b9e4:	681b      	ldr	r3, [r3, #0]
 810b9e6:	08db      	lsrs	r3, r3, #3
 810b9e8:	f003 0303 	and.w	r3, r3, #3
 810b9ec:	4a66      	ldr	r2, [pc, #408]	; (810bb88 <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 810b9ee:	fa22 f303 	lsr.w	r3, r2, r3
 810b9f2:	63fb      	str	r3, [r7, #60]	; 0x3c
 810b9f4:	e01e      	b.n	810ba34 <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 810b9f6:	4b63      	ldr	r3, [pc, #396]	; (810bb84 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 810b9f8:	681b      	ldr	r3, [r3, #0]
 810b9fa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 810b9fe:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 810ba02:	d106      	bne.n	810ba12 <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
 810ba04:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 810ba06:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 810ba0a:	d102      	bne.n	810ba12 <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 810ba0c:	4b5f      	ldr	r3, [pc, #380]	; (810bb8c <HAL_RCCEx_GetPeriphCLKFreq+0x538>)
 810ba0e:	63fb      	str	r3, [r7, #60]	; 0x3c
 810ba10:	e010      	b.n	810ba34 <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 810ba12:	4b5c      	ldr	r3, [pc, #368]	; (810bb84 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 810ba14:	681b      	ldr	r3, [r3, #0]
 810ba16:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 810ba1a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 810ba1e:	d106      	bne.n	810ba2e <HAL_RCCEx_GetPeriphCLKFreq+0x3da>
 810ba20:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 810ba22:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 810ba26:	d102      	bne.n	810ba2e <HAL_RCCEx_GetPeriphCLKFreq+0x3da>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 810ba28:	4b59      	ldr	r3, [pc, #356]	; (810bb90 <HAL_RCCEx_GetPeriphCLKFreq+0x53c>)
 810ba2a:	63fb      	str	r3, [r7, #60]	; 0x3c
 810ba2c:	e002      	b.n	810ba34 <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 810ba2e:	2300      	movs	r3, #0
 810ba30:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 810ba32:	e386      	b.n	810c142 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 810ba34:	e385      	b.n	810c142 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_PIN: /* External clock is the clock source for SAI4A */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 810ba36:	4b57      	ldr	r3, [pc, #348]	; (810bb94 <HAL_RCCEx_GetPeriphCLKFreq+0x540>)
 810ba38:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 810ba3a:	e382      	b.n	810c142 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 810ba3c:	2300      	movs	r3, #0
 810ba3e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 810ba40:	e37f      	b.n	810c142 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }

  else if (PeriphClk == RCC_PERIPHCLK_SAI4B)
 810ba42:	e9d7 2300 	ldrd	r2, r3, [r7]
 810ba46:	f5a2 6100 	sub.w	r1, r2, #2048	; 0x800
 810ba4a:	430b      	orrs	r3, r1
 810ba4c:	f040 80a7 	bne.w	810bb9e <HAL_RCCEx_GetPeriphCLKFreq+0x54a>
  {

    saiclocksource = __HAL_RCC_GET_SAI4B_SOURCE();
 810ba50:	4b4c      	ldr	r3, [pc, #304]	; (810bb84 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 810ba52:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 810ba54:	f003 63e0 	and.w	r3, r3, #117440512	; 0x7000000
 810ba58:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 810ba5a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 810ba5c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 810ba60:	d055      	beq.n	810bb0e <HAL_RCCEx_GetPeriphCLKFreq+0x4ba>
 810ba62:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 810ba64:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 810ba68:	f200 8096 	bhi.w	810bb98 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 810ba6c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 810ba6e:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 810ba72:	f000 8084 	beq.w	810bb7e <HAL_RCCEx_GetPeriphCLKFreq+0x52a>
 810ba76:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 810ba78:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 810ba7c:	f200 808c 	bhi.w	810bb98 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 810ba80:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 810ba82:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 810ba86:	d030      	beq.n	810baea <HAL_RCCEx_GetPeriphCLKFreq+0x496>
 810ba88:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 810ba8a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 810ba8e:	f200 8083 	bhi.w	810bb98 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 810ba92:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 810ba94:	2b00      	cmp	r3, #0
 810ba96:	d004      	beq.n	810baa2 <HAL_RCCEx_GetPeriphCLKFreq+0x44e>
 810ba98:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 810ba9a:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 810ba9e:	d012      	beq.n	810bac6 <HAL_RCCEx_GetPeriphCLKFreq+0x472>
 810baa0:	e07a      	b.n	810bb98 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
    {
      case RCC_SAI4BCLKSOURCE_PLL: /* PLL1 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 810baa2:	4b38      	ldr	r3, [pc, #224]	; (810bb84 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 810baa4:	681b      	ldr	r3, [r3, #0]
 810baa6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 810baaa:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 810baae:	d107      	bne.n	810bac0 <HAL_RCCEx_GetPeriphCLKFreq+0x46c>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 810bab0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 810bab4:	4618      	mov	r0, r3
 810bab6:	f000 fe0b 	bl	810c6d0 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 810baba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 810babc:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 810babe:	e340      	b.n	810c142 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 810bac0:	2300      	movs	r3, #0
 810bac2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 810bac4:	e33d      	b.n	810c142 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI4BCLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 810bac6:	4b2f      	ldr	r3, [pc, #188]	; (810bb84 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 810bac8:	681b      	ldr	r3, [r3, #0]
 810baca:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 810bace:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 810bad2:	d107      	bne.n	810bae4 <HAL_RCCEx_GetPeriphCLKFreq+0x490>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 810bad4:	f107 0318 	add.w	r3, r7, #24
 810bad8:	4618      	mov	r0, r3
 810bada:	f000 fb51 	bl	810c180 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 810bade:	69bb      	ldr	r3, [r7, #24]
 810bae0:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 810bae2:	e32e      	b.n	810c142 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 810bae4:	2300      	movs	r3, #0
 810bae6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 810bae8:	e32b      	b.n	810c142 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 810baea:	4b26      	ldr	r3, [pc, #152]	; (810bb84 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 810baec:	681b      	ldr	r3, [r3, #0]
 810baee:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 810baf2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 810baf6:	d107      	bne.n	810bb08 <HAL_RCCEx_GetPeriphCLKFreq+0x4b4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 810baf8:	f107 030c 	add.w	r3, r7, #12
 810bafc:	4618      	mov	r0, r3
 810bafe:	f000 fc93 	bl	810c428 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 810bb02:	68fb      	ldr	r3, [r7, #12]
 810bb04:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 810bb06:	e31c      	b.n	810c142 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 810bb08:	2300      	movs	r3, #0
 810bb0a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 810bb0c:	e319      	b.n	810c142 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_CLKP: /* CKPER is the clock source for SAI4B*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 810bb0e:	4b1d      	ldr	r3, [pc, #116]	; (810bb84 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 810bb10:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 810bb12:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 810bb16:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 810bb18:	4b1a      	ldr	r3, [pc, #104]	; (810bb84 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 810bb1a:	681b      	ldr	r3, [r3, #0]
 810bb1c:	f003 0304 	and.w	r3, r3, #4
 810bb20:	2b04      	cmp	r3, #4
 810bb22:	d10c      	bne.n	810bb3e <HAL_RCCEx_GetPeriphCLKFreq+0x4ea>
 810bb24:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 810bb26:	2b00      	cmp	r3, #0
 810bb28:	d109      	bne.n	810bb3e <HAL_RCCEx_GetPeriphCLKFreq+0x4ea>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 810bb2a:	4b16      	ldr	r3, [pc, #88]	; (810bb84 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 810bb2c:	681b      	ldr	r3, [r3, #0]
 810bb2e:	08db      	lsrs	r3, r3, #3
 810bb30:	f003 0303 	and.w	r3, r3, #3
 810bb34:	4a14      	ldr	r2, [pc, #80]	; (810bb88 <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 810bb36:	fa22 f303 	lsr.w	r3, r2, r3
 810bb3a:	63fb      	str	r3, [r7, #60]	; 0x3c
 810bb3c:	e01e      	b.n	810bb7c <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 810bb3e:	4b11      	ldr	r3, [pc, #68]	; (810bb84 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 810bb40:	681b      	ldr	r3, [r3, #0]
 810bb42:	f403 7380 	and.w	r3, r3, #256	; 0x100
 810bb46:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 810bb4a:	d106      	bne.n	810bb5a <HAL_RCCEx_GetPeriphCLKFreq+0x506>
 810bb4c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 810bb4e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 810bb52:	d102      	bne.n	810bb5a <HAL_RCCEx_GetPeriphCLKFreq+0x506>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 810bb54:	4b0d      	ldr	r3, [pc, #52]	; (810bb8c <HAL_RCCEx_GetPeriphCLKFreq+0x538>)
 810bb56:	63fb      	str	r3, [r7, #60]	; 0x3c
 810bb58:	e010      	b.n	810bb7c <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 810bb5a:	4b0a      	ldr	r3, [pc, #40]	; (810bb84 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 810bb5c:	681b      	ldr	r3, [r3, #0]
 810bb5e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 810bb62:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 810bb66:	d106      	bne.n	810bb76 <HAL_RCCEx_GetPeriphCLKFreq+0x522>
 810bb68:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 810bb6a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 810bb6e:	d102      	bne.n	810bb76 <HAL_RCCEx_GetPeriphCLKFreq+0x522>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 810bb70:	4b07      	ldr	r3, [pc, #28]	; (810bb90 <HAL_RCCEx_GetPeriphCLKFreq+0x53c>)
 810bb72:	63fb      	str	r3, [r7, #60]	; 0x3c
 810bb74:	e002      	b.n	810bb7c <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 810bb76:	2300      	movs	r3, #0
 810bb78:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 810bb7a:	e2e2      	b.n	810c142 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 810bb7c:	e2e1      	b.n	810c142 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_PIN: /* External clock is the clock source for SAI4B */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 810bb7e:	4b05      	ldr	r3, [pc, #20]	; (810bb94 <HAL_RCCEx_GetPeriphCLKFreq+0x540>)
 810bb80:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 810bb82:	e2de      	b.n	810c142 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 810bb84:	58024400 	.word	0x58024400
 810bb88:	03d09000 	.word	0x03d09000
 810bb8c:	003d0900 	.word	0x003d0900
 810bb90:	017d7840 	.word	0x017d7840
 810bb94:	00bb8000 	.word	0x00bb8000
      }

      default :
      {
        frequency = 0;
 810bb98:	2300      	movs	r3, #0
 810bb9a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 810bb9c:	e2d1      	b.n	810c142 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
#endif /*SAI4*/
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 810bb9e:	e9d7 2300 	ldrd	r2, r3, [r7]
 810bba2:	f5a2 5180 	sub.w	r1, r2, #4096	; 0x1000
 810bba6:	430b      	orrs	r3, r1
 810bba8:	f040 809c 	bne.w	810bce4 <HAL_RCCEx_GetPeriphCLKFreq+0x690>
  {
    /* Get SPI1/2/3 clock source */
    srcclk = __HAL_RCC_GET_SPI123_SOURCE();
 810bbac:	4b93      	ldr	r3, [pc, #588]	; (810bdfc <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 810bbae:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 810bbb0:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 810bbb4:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 810bbb6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 810bbb8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 810bbbc:	d054      	beq.n	810bc68 <HAL_RCCEx_GetPeriphCLKFreq+0x614>
 810bbbe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 810bbc0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 810bbc4:	f200 808b 	bhi.w	810bcde <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 810bbc8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 810bbca:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 810bbce:	f000 8083 	beq.w	810bcd8 <HAL_RCCEx_GetPeriphCLKFreq+0x684>
 810bbd2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 810bbd4:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 810bbd8:	f200 8081 	bhi.w	810bcde <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 810bbdc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 810bbde:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 810bbe2:	d02f      	beq.n	810bc44 <HAL_RCCEx_GetPeriphCLKFreq+0x5f0>
 810bbe4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 810bbe6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 810bbea:	d878      	bhi.n	810bcde <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 810bbec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 810bbee:	2b00      	cmp	r3, #0
 810bbf0:	d004      	beq.n	810bbfc <HAL_RCCEx_GetPeriphCLKFreq+0x5a8>
 810bbf2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 810bbf4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 810bbf8:	d012      	beq.n	810bc20 <HAL_RCCEx_GetPeriphCLKFreq+0x5cc>
 810bbfa:	e070      	b.n	810bcde <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
    {
      case RCC_SPI123CLKSOURCE_PLL: /* PLL1 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 810bbfc:	4b7f      	ldr	r3, [pc, #508]	; (810bdfc <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 810bbfe:	681b      	ldr	r3, [r3, #0]
 810bc00:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 810bc04:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 810bc08:	d107      	bne.n	810bc1a <HAL_RCCEx_GetPeriphCLKFreq+0x5c6>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 810bc0a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 810bc0e:	4618      	mov	r0, r3
 810bc10:	f000 fd5e 	bl	810c6d0 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 810bc14:	6abb      	ldr	r3, [r7, #40]	; 0x28
 810bc16:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 810bc18:	e293      	b.n	810c142 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 810bc1a:	2300      	movs	r3, #0
 810bc1c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 810bc1e:	e290      	b.n	810c142 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 810bc20:	4b76      	ldr	r3, [pc, #472]	; (810bdfc <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 810bc22:	681b      	ldr	r3, [r3, #0]
 810bc24:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 810bc28:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 810bc2c:	d107      	bne.n	810bc3e <HAL_RCCEx_GetPeriphCLKFreq+0x5ea>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 810bc2e:	f107 0318 	add.w	r3, r7, #24
 810bc32:	4618      	mov	r0, r3
 810bc34:	f000 faa4 	bl	810c180 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 810bc38:	69bb      	ldr	r3, [r7, #24]
 810bc3a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 810bc3c:	e281      	b.n	810c142 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 810bc3e:	2300      	movs	r3, #0
 810bc40:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 810bc42:	e27e      	b.n	810c142 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SPI123CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 810bc44:	4b6d      	ldr	r3, [pc, #436]	; (810bdfc <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 810bc46:	681b      	ldr	r3, [r3, #0]
 810bc48:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 810bc4c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 810bc50:	d107      	bne.n	810bc62 <HAL_RCCEx_GetPeriphCLKFreq+0x60e>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 810bc52:	f107 030c 	add.w	r3, r7, #12
 810bc56:	4618      	mov	r0, r3
 810bc58:	f000 fbe6 	bl	810c428 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 810bc5c:	68fb      	ldr	r3, [r7, #12]
 810bc5e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 810bc60:	e26f      	b.n	810c142 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 810bc62:	2300      	movs	r3, #0
 810bc64:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 810bc66:	e26c      	b.n	810c142 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SPI123CLKSOURCE_CLKP: /* CKPER is the clock source for SPI123 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 810bc68:	4b64      	ldr	r3, [pc, #400]	; (810bdfc <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 810bc6a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 810bc6c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 810bc70:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 810bc72:	4b62      	ldr	r3, [pc, #392]	; (810bdfc <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 810bc74:	681b      	ldr	r3, [r3, #0]
 810bc76:	f003 0304 	and.w	r3, r3, #4
 810bc7a:	2b04      	cmp	r3, #4
 810bc7c:	d10c      	bne.n	810bc98 <HAL_RCCEx_GetPeriphCLKFreq+0x644>
 810bc7e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 810bc80:	2b00      	cmp	r3, #0
 810bc82:	d109      	bne.n	810bc98 <HAL_RCCEx_GetPeriphCLKFreq+0x644>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 810bc84:	4b5d      	ldr	r3, [pc, #372]	; (810bdfc <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 810bc86:	681b      	ldr	r3, [r3, #0]
 810bc88:	08db      	lsrs	r3, r3, #3
 810bc8a:	f003 0303 	and.w	r3, r3, #3
 810bc8e:	4a5c      	ldr	r2, [pc, #368]	; (810be00 <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>)
 810bc90:	fa22 f303 	lsr.w	r3, r2, r3
 810bc94:	63fb      	str	r3, [r7, #60]	; 0x3c
 810bc96:	e01e      	b.n	810bcd6 <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 810bc98:	4b58      	ldr	r3, [pc, #352]	; (810bdfc <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 810bc9a:	681b      	ldr	r3, [r3, #0]
 810bc9c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 810bca0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 810bca4:	d106      	bne.n	810bcb4 <HAL_RCCEx_GetPeriphCLKFreq+0x660>
 810bca6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 810bca8:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 810bcac:	d102      	bne.n	810bcb4 <HAL_RCCEx_GetPeriphCLKFreq+0x660>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 810bcae:	4b55      	ldr	r3, [pc, #340]	; (810be04 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 810bcb0:	63fb      	str	r3, [r7, #60]	; 0x3c
 810bcb2:	e010      	b.n	810bcd6 <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 810bcb4:	4b51      	ldr	r3, [pc, #324]	; (810bdfc <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 810bcb6:	681b      	ldr	r3, [r3, #0]
 810bcb8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 810bcbc:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 810bcc0:	d106      	bne.n	810bcd0 <HAL_RCCEx_GetPeriphCLKFreq+0x67c>
 810bcc2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 810bcc4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 810bcc8:	d102      	bne.n	810bcd0 <HAL_RCCEx_GetPeriphCLKFreq+0x67c>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 810bcca:	4b4f      	ldr	r3, [pc, #316]	; (810be08 <HAL_RCCEx_GetPeriphCLKFreq+0x7b4>)
 810bccc:	63fb      	str	r3, [r7, #60]	; 0x3c
 810bcce:	e002      	b.n	810bcd6 <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 810bcd0:	2300      	movs	r3, #0
 810bcd2:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 810bcd4:	e235      	b.n	810c142 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 810bcd6:	e234      	b.n	810c142 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SPI123CLKSOURCE_PIN): /* External clock is the clock source for I2S */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 810bcd8:	4b4c      	ldr	r3, [pc, #304]	; (810be0c <HAL_RCCEx_GetPeriphCLKFreq+0x7b8>)
 810bcda:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 810bcdc:	e231      	b.n	810c142 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 810bcde:	2300      	movs	r3, #0
 810bce0:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 810bce2:	e22e      	b.n	810c142 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI45)
 810bce4:	e9d7 2300 	ldrd	r2, r3, [r7]
 810bce8:	f5a2 5100 	sub.w	r1, r2, #8192	; 0x2000
 810bcec:	430b      	orrs	r3, r1
 810bcee:	f040 808f 	bne.w	810be10 <HAL_RCCEx_GetPeriphCLKFreq+0x7bc>
  {
    /* Get SPI45 clock source */
    srcclk = __HAL_RCC_GET_SPI45_SOURCE();
 810bcf2:	4b42      	ldr	r3, [pc, #264]	; (810bdfc <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 810bcf4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 810bcf6:	f403 23e0 	and.w	r3, r3, #458752	; 0x70000
 810bcfa:	63bb      	str	r3, [r7, #56]	; 0x38
    switch (srcclk)
 810bcfc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 810bcfe:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 810bd02:	d06b      	beq.n	810bddc <HAL_RCCEx_GetPeriphCLKFreq+0x788>
 810bd04:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 810bd06:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 810bd0a:	d874      	bhi.n	810bdf6 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 810bd0c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 810bd0e:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 810bd12:	d056      	beq.n	810bdc2 <HAL_RCCEx_GetPeriphCLKFreq+0x76e>
 810bd14:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 810bd16:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 810bd1a:	d86c      	bhi.n	810bdf6 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 810bd1c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 810bd1e:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 810bd22:	d03b      	beq.n	810bd9c <HAL_RCCEx_GetPeriphCLKFreq+0x748>
 810bd24:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 810bd26:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 810bd2a:	d864      	bhi.n	810bdf6 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 810bd2c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 810bd2e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 810bd32:	d021      	beq.n	810bd78 <HAL_RCCEx_GetPeriphCLKFreq+0x724>
 810bd34:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 810bd36:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 810bd3a:	d85c      	bhi.n	810bdf6 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 810bd3c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 810bd3e:	2b00      	cmp	r3, #0
 810bd40:	d004      	beq.n	810bd4c <HAL_RCCEx_GetPeriphCLKFreq+0x6f8>
 810bd42:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 810bd44:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 810bd48:	d004      	beq.n	810bd54 <HAL_RCCEx_GetPeriphCLKFreq+0x700>
 810bd4a:	e054      	b.n	810bdf6 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
    {
      case RCC_SPI45CLKSOURCE_PCLK2: /* CD/D2 PCLK2 is the clock source for SPI4/5 */
      {
        frequency = HAL_RCC_GetPCLK1Freq();
 810bd4c:	f7fe fa0c 	bl	810a168 <HAL_RCC_GetPCLK1Freq>
 810bd50:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 810bd52:	e1f6      	b.n	810c142 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 810bd54:	4b29      	ldr	r3, [pc, #164]	; (810bdfc <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 810bd56:	681b      	ldr	r3, [r3, #0]
 810bd58:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 810bd5c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 810bd60:	d107      	bne.n	810bd72 <HAL_RCCEx_GetPeriphCLKFreq+0x71e>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 810bd62:	f107 0318 	add.w	r3, r7, #24
 810bd66:	4618      	mov	r0, r3
 810bd68:	f000 fa0a 	bl	810c180 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 810bd6c:	69fb      	ldr	r3, [r7, #28]
 810bd6e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 810bd70:	e1e7      	b.n	810c142 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 810bd72:	2300      	movs	r3, #0
 810bd74:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 810bd76:	e1e4      	b.n	810c142 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 810bd78:	4b20      	ldr	r3, [pc, #128]	; (810bdfc <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 810bd7a:	681b      	ldr	r3, [r3, #0]
 810bd7c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 810bd80:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 810bd84:	d107      	bne.n	810bd96 <HAL_RCCEx_GetPeriphCLKFreq+0x742>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 810bd86:	f107 030c 	add.w	r3, r7, #12
 810bd8a:	4618      	mov	r0, r3
 810bd8c:	f000 fb4c 	bl	810c428 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 810bd90:	693b      	ldr	r3, [r7, #16]
 810bd92:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 810bd94:	e1d5      	b.n	810c142 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 810bd96:	2300      	movs	r3, #0
 810bd98:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 810bd9a:	e1d2      	b.n	810c142 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_HSI: /* HSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 810bd9c:	4b17      	ldr	r3, [pc, #92]	; (810bdfc <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 810bd9e:	681b      	ldr	r3, [r3, #0]
 810bda0:	f003 0304 	and.w	r3, r3, #4
 810bda4:	2b04      	cmp	r3, #4
 810bda6:	d109      	bne.n	810bdbc <HAL_RCCEx_GetPeriphCLKFreq+0x768>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 810bda8:	4b14      	ldr	r3, [pc, #80]	; (810bdfc <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 810bdaa:	681b      	ldr	r3, [r3, #0]
 810bdac:	08db      	lsrs	r3, r3, #3
 810bdae:	f003 0303 	and.w	r3, r3, #3
 810bdb2:	4a13      	ldr	r2, [pc, #76]	; (810be00 <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>)
 810bdb4:	fa22 f303 	lsr.w	r3, r2, r3
 810bdb8:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 810bdba:	e1c2      	b.n	810c142 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 810bdbc:	2300      	movs	r3, #0
 810bdbe:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 810bdc0:	e1bf      	b.n	810c142 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_CSI: /* CSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 810bdc2:	4b0e      	ldr	r3, [pc, #56]	; (810bdfc <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 810bdc4:	681b      	ldr	r3, [r3, #0]
 810bdc6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 810bdca:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 810bdce:	d102      	bne.n	810bdd6 <HAL_RCCEx_GetPeriphCLKFreq+0x782>
        {
          frequency = CSI_VALUE;
 810bdd0:	4b0c      	ldr	r3, [pc, #48]	; (810be04 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 810bdd2:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 810bdd4:	e1b5      	b.n	810c142 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 810bdd6:	2300      	movs	r3, #0
 810bdd8:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 810bdda:	e1b2      	b.n	810c142 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_HSE: /* HSE is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 810bddc:	4b07      	ldr	r3, [pc, #28]	; (810bdfc <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 810bdde:	681b      	ldr	r3, [r3, #0]
 810bde0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 810bde4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 810bde8:	d102      	bne.n	810bdf0 <HAL_RCCEx_GetPeriphCLKFreq+0x79c>
        {
          frequency = HSE_VALUE;
 810bdea:	4b07      	ldr	r3, [pc, #28]	; (810be08 <HAL_RCCEx_GetPeriphCLKFreq+0x7b4>)
 810bdec:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 810bdee:	e1a8      	b.n	810c142 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 810bdf0:	2300      	movs	r3, #0
 810bdf2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 810bdf4:	e1a5      	b.n	810c142 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 810bdf6:	2300      	movs	r3, #0
 810bdf8:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 810bdfa:	e1a2      	b.n	810c142 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 810bdfc:	58024400 	.word	0x58024400
 810be00:	03d09000 	.word	0x03d09000
 810be04:	003d0900 	.word	0x003d0900
 810be08:	017d7840 	.word	0x017d7840
 810be0c:	00bb8000 	.word	0x00bb8000
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 810be10:	e9d7 2300 	ldrd	r2, r3, [r7]
 810be14:	f5a2 2100 	sub.w	r1, r2, #524288	; 0x80000
 810be18:	430b      	orrs	r3, r1
 810be1a:	d173      	bne.n	810bf04 <HAL_RCCEx_GetPeriphCLKFreq+0x8b0>
  {
    /* Get ADC clock source */
    srcclk = __HAL_RCC_GET_ADC_SOURCE();
 810be1c:	4b9c      	ldr	r3, [pc, #624]	; (810c090 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 810be1e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 810be20:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 810be24:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 810be26:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 810be28:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 810be2c:	d02f      	beq.n	810be8e <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
 810be2e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 810be30:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 810be34:	d863      	bhi.n	810befe <HAL_RCCEx_GetPeriphCLKFreq+0x8aa>
 810be36:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 810be38:	2b00      	cmp	r3, #0
 810be3a:	d004      	beq.n	810be46 <HAL_RCCEx_GetPeriphCLKFreq+0x7f2>
 810be3c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 810be3e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 810be42:	d012      	beq.n	810be6a <HAL_RCCEx_GetPeriphCLKFreq+0x816>
 810be44:	e05b      	b.n	810befe <HAL_RCCEx_GetPeriphCLKFreq+0x8aa>
    {
      case RCC_ADCCLKSOURCE_PLL2:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 810be46:	4b92      	ldr	r3, [pc, #584]	; (810c090 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 810be48:	681b      	ldr	r3, [r3, #0]
 810be4a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 810be4e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 810be52:	d107      	bne.n	810be64 <HAL_RCCEx_GetPeriphCLKFreq+0x810>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 810be54:	f107 0318 	add.w	r3, r7, #24
 810be58:	4618      	mov	r0, r3
 810be5a:	f000 f991 	bl	810c180 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 810be5e:	69bb      	ldr	r3, [r7, #24]
 810be60:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 810be62:	e16e      	b.n	810c142 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 810be64:	2300      	movs	r3, #0
 810be66:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 810be68:	e16b      	b.n	810c142 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_ADCCLKSOURCE_PLL3:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 810be6a:	4b89      	ldr	r3, [pc, #548]	; (810c090 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 810be6c:	681b      	ldr	r3, [r3, #0]
 810be6e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 810be72:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 810be76:	d107      	bne.n	810be88 <HAL_RCCEx_GetPeriphCLKFreq+0x834>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 810be78:	f107 030c 	add.w	r3, r7, #12
 810be7c:	4618      	mov	r0, r3
 810be7e:	f000 fad3 	bl	810c428 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 810be82:	697b      	ldr	r3, [r7, #20]
 810be84:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 810be86:	e15c      	b.n	810c142 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 810be88:	2300      	movs	r3, #0
 810be8a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 810be8c:	e159      	b.n	810c142 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_ADCCLKSOURCE_CLKP:
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 810be8e:	4b80      	ldr	r3, [pc, #512]	; (810c090 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 810be90:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 810be92:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 810be96:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 810be98:	4b7d      	ldr	r3, [pc, #500]	; (810c090 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 810be9a:	681b      	ldr	r3, [r3, #0]
 810be9c:	f003 0304 	and.w	r3, r3, #4
 810bea0:	2b04      	cmp	r3, #4
 810bea2:	d10c      	bne.n	810bebe <HAL_RCCEx_GetPeriphCLKFreq+0x86a>
 810bea4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 810bea6:	2b00      	cmp	r3, #0
 810bea8:	d109      	bne.n	810bebe <HAL_RCCEx_GetPeriphCLKFreq+0x86a>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 810beaa:	4b79      	ldr	r3, [pc, #484]	; (810c090 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 810beac:	681b      	ldr	r3, [r3, #0]
 810beae:	08db      	lsrs	r3, r3, #3
 810beb0:	f003 0303 	and.w	r3, r3, #3
 810beb4:	4a77      	ldr	r2, [pc, #476]	; (810c094 <HAL_RCCEx_GetPeriphCLKFreq+0xa40>)
 810beb6:	fa22 f303 	lsr.w	r3, r2, r3
 810beba:	63fb      	str	r3, [r7, #60]	; 0x3c
 810bebc:	e01e      	b.n	810befc <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 810bebe:	4b74      	ldr	r3, [pc, #464]	; (810c090 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 810bec0:	681b      	ldr	r3, [r3, #0]
 810bec2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 810bec6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 810beca:	d106      	bne.n	810beda <HAL_RCCEx_GetPeriphCLKFreq+0x886>
 810becc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 810bece:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 810bed2:	d102      	bne.n	810beda <HAL_RCCEx_GetPeriphCLKFreq+0x886>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 810bed4:	4b70      	ldr	r3, [pc, #448]	; (810c098 <HAL_RCCEx_GetPeriphCLKFreq+0xa44>)
 810bed6:	63fb      	str	r3, [r7, #60]	; 0x3c
 810bed8:	e010      	b.n	810befc <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 810beda:	4b6d      	ldr	r3, [pc, #436]	; (810c090 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 810bedc:	681b      	ldr	r3, [r3, #0]
 810bede:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 810bee2:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 810bee6:	d106      	bne.n	810bef6 <HAL_RCCEx_GetPeriphCLKFreq+0x8a2>
 810bee8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 810beea:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 810beee:	d102      	bne.n	810bef6 <HAL_RCCEx_GetPeriphCLKFreq+0x8a2>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 810bef0:	4b6a      	ldr	r3, [pc, #424]	; (810c09c <HAL_RCCEx_GetPeriphCLKFreq+0xa48>)
 810bef2:	63fb      	str	r3, [r7, #60]	; 0x3c
 810bef4:	e002      	b.n	810befc <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 810bef6:	2300      	movs	r3, #0
 810bef8:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 810befa:	e122      	b.n	810c142 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 810befc:	e121      	b.n	810c142 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 810befe:	2300      	movs	r3, #0
 810bf00:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 810bf02:	e11e      	b.n	810c142 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 810bf04:	e9d7 2300 	ldrd	r2, r3, [r7]
 810bf08:	f5a2 3180 	sub.w	r1, r2, #65536	; 0x10000
 810bf0c:	430b      	orrs	r3, r1
 810bf0e:	d133      	bne.n	810bf78 <HAL_RCCEx_GetPeriphCLKFreq+0x924>
  {
    /* Get SDMMC clock source */
    srcclk = __HAL_RCC_GET_SDMMC_SOURCE();
 810bf10:	4b5f      	ldr	r3, [pc, #380]	; (810c090 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 810bf12:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 810bf14:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 810bf18:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 810bf1a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 810bf1c:	2b00      	cmp	r3, #0
 810bf1e:	d004      	beq.n	810bf2a <HAL_RCCEx_GetPeriphCLKFreq+0x8d6>
 810bf20:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 810bf22:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 810bf26:	d012      	beq.n	810bf4e <HAL_RCCEx_GetPeriphCLKFreq+0x8fa>
 810bf28:	e023      	b.n	810bf72 <HAL_RCCEx_GetPeriphCLKFreq+0x91e>
    {
      case RCC_SDMMCCLKSOURCE_PLL: /* PLL1 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 810bf2a:	4b59      	ldr	r3, [pc, #356]	; (810c090 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 810bf2c:	681b      	ldr	r3, [r3, #0]
 810bf2e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 810bf32:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 810bf36:	d107      	bne.n	810bf48 <HAL_RCCEx_GetPeriphCLKFreq+0x8f4>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 810bf38:	f107 0324 	add.w	r3, r7, #36	; 0x24
 810bf3c:	4618      	mov	r0, r3
 810bf3e:	f000 fbc7 	bl	810c6d0 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 810bf42:	6abb      	ldr	r3, [r7, #40]	; 0x28
 810bf44:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 810bf46:	e0fc      	b.n	810c142 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 810bf48:	2300      	movs	r3, #0
 810bf4a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 810bf4c:	e0f9      	b.n	810c142 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 810bf4e:	4b50      	ldr	r3, [pc, #320]	; (810c090 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 810bf50:	681b      	ldr	r3, [r3, #0]
 810bf52:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 810bf56:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 810bf5a:	d107      	bne.n	810bf6c <HAL_RCCEx_GetPeriphCLKFreq+0x918>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 810bf5c:	f107 0318 	add.w	r3, r7, #24
 810bf60:	4618      	mov	r0, r3
 810bf62:	f000 f90d 	bl	810c180 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 810bf66:	6a3b      	ldr	r3, [r7, #32]
 810bf68:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 810bf6a:	e0ea      	b.n	810c142 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 810bf6c:	2300      	movs	r3, #0
 810bf6e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 810bf70:	e0e7      	b.n	810c142 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 810bf72:	2300      	movs	r3, #0
 810bf74:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 810bf76:	e0e4      	b.n	810c142 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 810bf78:	e9d7 2300 	ldrd	r2, r3, [r7]
 810bf7c:	f5a2 4180 	sub.w	r1, r2, #16384	; 0x4000
 810bf80:	430b      	orrs	r3, r1
 810bf82:	f040 808d 	bne.w	810c0a0 <HAL_RCCEx_GetPeriphCLKFreq+0xa4c>
  {
    /* Get SPI6 clock source */
    srcclk = __HAL_RCC_GET_SPI6_SOURCE();
 810bf86:	4b42      	ldr	r3, [pc, #264]	; (810c090 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 810bf88:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 810bf8a:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
 810bf8e:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 810bf90:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 810bf92:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 810bf96:	d06b      	beq.n	810c070 <HAL_RCCEx_GetPeriphCLKFreq+0xa1c>
 810bf98:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 810bf9a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 810bf9e:	d874      	bhi.n	810c08a <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 810bfa0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 810bfa2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 810bfa6:	d056      	beq.n	810c056 <HAL_RCCEx_GetPeriphCLKFreq+0xa02>
 810bfa8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 810bfaa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 810bfae:	d86c      	bhi.n	810c08a <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 810bfb0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 810bfb2:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 810bfb6:	d03b      	beq.n	810c030 <HAL_RCCEx_GetPeriphCLKFreq+0x9dc>
 810bfb8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 810bfba:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 810bfbe:	d864      	bhi.n	810c08a <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 810bfc0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 810bfc2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 810bfc6:	d021      	beq.n	810c00c <HAL_RCCEx_GetPeriphCLKFreq+0x9b8>
 810bfc8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 810bfca:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 810bfce:	d85c      	bhi.n	810c08a <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 810bfd0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 810bfd2:	2b00      	cmp	r3, #0
 810bfd4:	d004      	beq.n	810bfe0 <HAL_RCCEx_GetPeriphCLKFreq+0x98c>
 810bfd6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 810bfd8:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 810bfdc:	d004      	beq.n	810bfe8 <HAL_RCCEx_GetPeriphCLKFreq+0x994>
 810bfde:	e054      	b.n	810c08a <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
    {
      case RCC_SPI6CLKSOURCE_D3PCLK1: /* D3PCLK1 (PCLK4) is the clock source for SPI6 */
      {
        frequency = HAL_RCCEx_GetD3PCLK1Freq();
 810bfe0:	f000 f8b8 	bl	810c154 <HAL_RCCEx_GetD3PCLK1Freq>
 810bfe4:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 810bfe6:	e0ac      	b.n	810c142 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 810bfe8:	4b29      	ldr	r3, [pc, #164]	; (810c090 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 810bfea:	681b      	ldr	r3, [r3, #0]
 810bfec:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 810bff0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 810bff4:	d107      	bne.n	810c006 <HAL_RCCEx_GetPeriphCLKFreq+0x9b2>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 810bff6:	f107 0318 	add.w	r3, r7, #24
 810bffa:	4618      	mov	r0, r3
 810bffc:	f000 f8c0 	bl	810c180 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 810c000:	69fb      	ldr	r3, [r7, #28]
 810c002:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 810c004:	e09d      	b.n	810c142 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 810c006:	2300      	movs	r3, #0
 810c008:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 810c00a:	e09a      	b.n	810c142 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 810c00c:	4b20      	ldr	r3, [pc, #128]	; (810c090 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 810c00e:	681b      	ldr	r3, [r3, #0]
 810c010:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 810c014:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 810c018:	d107      	bne.n	810c02a <HAL_RCCEx_GetPeriphCLKFreq+0x9d6>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 810c01a:	f107 030c 	add.w	r3, r7, #12
 810c01e:	4618      	mov	r0, r3
 810c020:	f000 fa02 	bl	810c428 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 810c024:	693b      	ldr	r3, [r7, #16]
 810c026:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 810c028:	e08b      	b.n	810c142 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 810c02a:	2300      	movs	r3, #0
 810c02c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 810c02e:	e088      	b.n	810c142 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_HSI: /* HSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 810c030:	4b17      	ldr	r3, [pc, #92]	; (810c090 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 810c032:	681b      	ldr	r3, [r3, #0]
 810c034:	f003 0304 	and.w	r3, r3, #4
 810c038:	2b04      	cmp	r3, #4
 810c03a:	d109      	bne.n	810c050 <HAL_RCCEx_GetPeriphCLKFreq+0x9fc>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 810c03c:	4b14      	ldr	r3, [pc, #80]	; (810c090 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 810c03e:	681b      	ldr	r3, [r3, #0]
 810c040:	08db      	lsrs	r3, r3, #3
 810c042:	f003 0303 	and.w	r3, r3, #3
 810c046:	4a13      	ldr	r2, [pc, #76]	; (810c094 <HAL_RCCEx_GetPeriphCLKFreq+0xa40>)
 810c048:	fa22 f303 	lsr.w	r3, r2, r3
 810c04c:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 810c04e:	e078      	b.n	810c142 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 810c050:	2300      	movs	r3, #0
 810c052:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 810c054:	e075      	b.n	810c142 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_CSI: /* CSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 810c056:	4b0e      	ldr	r3, [pc, #56]	; (810c090 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 810c058:	681b      	ldr	r3, [r3, #0]
 810c05a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 810c05e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 810c062:	d102      	bne.n	810c06a <HAL_RCCEx_GetPeriphCLKFreq+0xa16>
        {
          frequency = CSI_VALUE;
 810c064:	4b0c      	ldr	r3, [pc, #48]	; (810c098 <HAL_RCCEx_GetPeriphCLKFreq+0xa44>)
 810c066:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 810c068:	e06b      	b.n	810c142 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 810c06a:	2300      	movs	r3, #0
 810c06c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 810c06e:	e068      	b.n	810c142 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_HSE: /* HSE is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 810c070:	4b07      	ldr	r3, [pc, #28]	; (810c090 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 810c072:	681b      	ldr	r3, [r3, #0]
 810c074:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 810c078:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 810c07c:	d102      	bne.n	810c084 <HAL_RCCEx_GetPeriphCLKFreq+0xa30>
        {
          frequency = HSE_VALUE;
 810c07e:	4b07      	ldr	r3, [pc, #28]	; (810c09c <HAL_RCCEx_GetPeriphCLKFreq+0xa48>)
 810c080:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 810c082:	e05e      	b.n	810c142 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 810c084:	2300      	movs	r3, #0
 810c086:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 810c088:	e05b      	b.n	810c142 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
        break;
      }
#endif /* RCC_SPI6CLKSOURCE_PIN */
      default :
      {
        frequency = 0;
 810c08a:	2300      	movs	r3, #0
 810c08c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 810c08e:	e058      	b.n	810c142 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 810c090:	58024400 	.word	0x58024400
 810c094:	03d09000 	.word	0x03d09000
 810c098:	003d0900 	.word	0x003d0900
 810c09c:	017d7840 	.word	0x017d7840
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN)
 810c0a0:	e9d7 2300 	ldrd	r2, r3, [r7]
 810c0a4:	f5a2 4100 	sub.w	r1, r2, #32768	; 0x8000
 810c0a8:	430b      	orrs	r3, r1
 810c0aa:	d148      	bne.n	810c13e <HAL_RCCEx_GetPeriphCLKFreq+0xaea>
  {
    /* Get FDCAN clock source */
    srcclk = __HAL_RCC_GET_FDCAN_SOURCE();
 810c0ac:	4b27      	ldr	r3, [pc, #156]	; (810c14c <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 810c0ae:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 810c0b0:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 810c0b4:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 810c0b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 810c0b8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 810c0bc:	d02a      	beq.n	810c114 <HAL_RCCEx_GetPeriphCLKFreq+0xac0>
 810c0be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 810c0c0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 810c0c4:	d838      	bhi.n	810c138 <HAL_RCCEx_GetPeriphCLKFreq+0xae4>
 810c0c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 810c0c8:	2b00      	cmp	r3, #0
 810c0ca:	d004      	beq.n	810c0d6 <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
 810c0cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 810c0ce:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 810c0d2:	d00d      	beq.n	810c0f0 <HAL_RCCEx_GetPeriphCLKFreq+0xa9c>
 810c0d4:	e030      	b.n	810c138 <HAL_RCCEx_GetPeriphCLKFreq+0xae4>
    {
      case RCC_FDCANCLKSOURCE_HSE: /* HSE is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 810c0d6:	4b1d      	ldr	r3, [pc, #116]	; (810c14c <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 810c0d8:	681b      	ldr	r3, [r3, #0]
 810c0da:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 810c0de:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 810c0e2:	d102      	bne.n	810c0ea <HAL_RCCEx_GetPeriphCLKFreq+0xa96>
        {
          frequency = HSE_VALUE;
 810c0e4:	4b1a      	ldr	r3, [pc, #104]	; (810c150 <HAL_RCCEx_GetPeriphCLKFreq+0xafc>)
 810c0e6:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 810c0e8:	e02b      	b.n	810c142 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 810c0ea:	2300      	movs	r3, #0
 810c0ec:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 810c0ee:	e028      	b.n	810c142 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_FDCANCLKSOURCE_PLL: /* PLL is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 810c0f0:	4b16      	ldr	r3, [pc, #88]	; (810c14c <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 810c0f2:	681b      	ldr	r3, [r3, #0]
 810c0f4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 810c0f8:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 810c0fc:	d107      	bne.n	810c10e <HAL_RCCEx_GetPeriphCLKFreq+0xaba>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 810c0fe:	f107 0324 	add.w	r3, r7, #36	; 0x24
 810c102:	4618      	mov	r0, r3
 810c104:	f000 fae4 	bl	810c6d0 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 810c108:	6abb      	ldr	r3, [r7, #40]	; 0x28
 810c10a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 810c10c:	e019      	b.n	810c142 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 810c10e:	2300      	movs	r3, #0
 810c110:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 810c112:	e016      	b.n	810c142 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 810c114:	4b0d      	ldr	r3, [pc, #52]	; (810c14c <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 810c116:	681b      	ldr	r3, [r3, #0]
 810c118:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 810c11c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 810c120:	d107      	bne.n	810c132 <HAL_RCCEx_GetPeriphCLKFreq+0xade>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 810c122:	f107 0318 	add.w	r3, r7, #24
 810c126:	4618      	mov	r0, r3
 810c128:	f000 f82a 	bl	810c180 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 810c12c:	69fb      	ldr	r3, [r7, #28]
 810c12e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 810c130:	e007      	b.n	810c142 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 810c132:	2300      	movs	r3, #0
 810c134:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 810c136:	e004      	b.n	810c142 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 810c138:	2300      	movs	r3, #0
 810c13a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 810c13c:	e001      	b.n	810c142 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else
  {
    frequency = 0;
 810c13e:	2300      	movs	r3, #0
 810c140:	63fb      	str	r3, [r7, #60]	; 0x3c
  }

  return frequency;
 810c142:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 810c144:	4618      	mov	r0, r3
 810c146:	3740      	adds	r7, #64	; 0x40
 810c148:	46bd      	mov	sp, r7
 810c14a:	bd80      	pop	{r7, pc}
 810c14c:	58024400 	.word	0x58024400
 810c150:	017d7840 	.word	0x017d7840

0810c154 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 810c154:	b580      	push	{r7, lr}
 810c156:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 810c158:	f7fd ffd4 	bl	810a104 <HAL_RCC_GetHCLKFreq>
 810c15c:	4602      	mov	r2, r0
 810c15e:	4b06      	ldr	r3, [pc, #24]	; (810c178 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 810c160:	6a1b      	ldr	r3, [r3, #32]
 810c162:	091b      	lsrs	r3, r3, #4
 810c164:	f003 0307 	and.w	r3, r3, #7
 810c168:	4904      	ldr	r1, [pc, #16]	; (810c17c <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 810c16a:	5ccb      	ldrb	r3, [r1, r3]
 810c16c:	f003 031f 	and.w	r3, r3, #31
 810c170:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 810c174:	4618      	mov	r0, r3
 810c176:	bd80      	pop	{r7, pc}
 810c178:	58024400 	.word	0x58024400
 810c17c:	08111e0c 	.word	0x08111e0c

0810c180 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 810c180:	b480      	push	{r7}
 810c182:	b089      	sub	sp, #36	; 0x24
 810c184:	af00      	add	r7, sp, #0
 810c186:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 810c188:	4ba1      	ldr	r3, [pc, #644]	; (810c410 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 810c18a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 810c18c:	f003 0303 	and.w	r3, r3, #3
 810c190:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 810c192:	4b9f      	ldr	r3, [pc, #636]	; (810c410 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 810c194:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 810c196:	0b1b      	lsrs	r3, r3, #12
 810c198:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 810c19c:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 810c19e:	4b9c      	ldr	r3, [pc, #624]	; (810c410 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 810c1a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 810c1a2:	091b      	lsrs	r3, r3, #4
 810c1a4:	f003 0301 	and.w	r3, r3, #1
 810c1a8:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 810c1aa:	4b99      	ldr	r3, [pc, #612]	; (810c410 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 810c1ac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 810c1ae:	08db      	lsrs	r3, r3, #3
 810c1b0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 810c1b4:	693a      	ldr	r2, [r7, #16]
 810c1b6:	fb02 f303 	mul.w	r3, r2, r3
 810c1ba:	ee07 3a90 	vmov	s15, r3
 810c1be:	eef8 7a67 	vcvt.f32.u32	s15, s15
 810c1c2:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 810c1c6:	697b      	ldr	r3, [r7, #20]
 810c1c8:	2b00      	cmp	r3, #0
 810c1ca:	f000 8111 	beq.w	810c3f0 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 810c1ce:	69bb      	ldr	r3, [r7, #24]
 810c1d0:	2b02      	cmp	r3, #2
 810c1d2:	f000 8083 	beq.w	810c2dc <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 810c1d6:	69bb      	ldr	r3, [r7, #24]
 810c1d8:	2b02      	cmp	r3, #2
 810c1da:	f200 80a1 	bhi.w	810c320 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 810c1de:	69bb      	ldr	r3, [r7, #24]
 810c1e0:	2b00      	cmp	r3, #0
 810c1e2:	d003      	beq.n	810c1ec <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 810c1e4:	69bb      	ldr	r3, [r7, #24]
 810c1e6:	2b01      	cmp	r3, #1
 810c1e8:	d056      	beq.n	810c298 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 810c1ea:	e099      	b.n	810c320 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 810c1ec:	4b88      	ldr	r3, [pc, #544]	; (810c410 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 810c1ee:	681b      	ldr	r3, [r3, #0]
 810c1f0:	f003 0320 	and.w	r3, r3, #32
 810c1f4:	2b00      	cmp	r3, #0
 810c1f6:	d02d      	beq.n	810c254 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 810c1f8:	4b85      	ldr	r3, [pc, #532]	; (810c410 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 810c1fa:	681b      	ldr	r3, [r3, #0]
 810c1fc:	08db      	lsrs	r3, r3, #3
 810c1fe:	f003 0303 	and.w	r3, r3, #3
 810c202:	4a84      	ldr	r2, [pc, #528]	; (810c414 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 810c204:	fa22 f303 	lsr.w	r3, r2, r3
 810c208:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 810c20a:	68bb      	ldr	r3, [r7, #8]
 810c20c:	ee07 3a90 	vmov	s15, r3
 810c210:	eef8 6a67 	vcvt.f32.u32	s13, s15
 810c214:	697b      	ldr	r3, [r7, #20]
 810c216:	ee07 3a90 	vmov	s15, r3
 810c21a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 810c21e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 810c222:	4b7b      	ldr	r3, [pc, #492]	; (810c410 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 810c224:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 810c226:	f3c3 0308 	ubfx	r3, r3, #0, #9
 810c22a:	ee07 3a90 	vmov	s15, r3
 810c22e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 810c232:	ed97 6a03 	vldr	s12, [r7, #12]
 810c236:	eddf 5a78 	vldr	s11, [pc, #480]	; 810c418 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 810c23a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 810c23e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 810c242:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 810c246:	ee77 7aa6 	vadd.f32	s15, s15, s13
 810c24a:	ee67 7a27 	vmul.f32	s15, s14, s15
 810c24e:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 810c252:	e087      	b.n	810c364 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 810c254:	697b      	ldr	r3, [r7, #20]
 810c256:	ee07 3a90 	vmov	s15, r3
 810c25a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 810c25e:	eddf 6a6f 	vldr	s13, [pc, #444]	; 810c41c <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 810c262:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 810c266:	4b6a      	ldr	r3, [pc, #424]	; (810c410 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 810c268:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 810c26a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 810c26e:	ee07 3a90 	vmov	s15, r3
 810c272:	eef8 6a67 	vcvt.f32.u32	s13, s15
 810c276:	ed97 6a03 	vldr	s12, [r7, #12]
 810c27a:	eddf 5a67 	vldr	s11, [pc, #412]	; 810c418 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 810c27e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 810c282:	ee76 7aa7 	vadd.f32	s15, s13, s15
 810c286:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 810c28a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 810c28e:	ee67 7a27 	vmul.f32	s15, s14, s15
 810c292:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 810c296:	e065      	b.n	810c364 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 810c298:	697b      	ldr	r3, [r7, #20]
 810c29a:	ee07 3a90 	vmov	s15, r3
 810c29e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 810c2a2:	eddf 6a5f 	vldr	s13, [pc, #380]	; 810c420 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 810c2a6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 810c2aa:	4b59      	ldr	r3, [pc, #356]	; (810c410 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 810c2ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 810c2ae:	f3c3 0308 	ubfx	r3, r3, #0, #9
 810c2b2:	ee07 3a90 	vmov	s15, r3
 810c2b6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 810c2ba:	ed97 6a03 	vldr	s12, [r7, #12]
 810c2be:	eddf 5a56 	vldr	s11, [pc, #344]	; 810c418 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 810c2c2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 810c2c6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 810c2ca:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 810c2ce:	ee77 7aa6 	vadd.f32	s15, s15, s13
 810c2d2:	ee67 7a27 	vmul.f32	s15, s14, s15
 810c2d6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 810c2da:	e043      	b.n	810c364 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 810c2dc:	697b      	ldr	r3, [r7, #20]
 810c2de:	ee07 3a90 	vmov	s15, r3
 810c2e2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 810c2e6:	eddf 6a4f 	vldr	s13, [pc, #316]	; 810c424 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 810c2ea:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 810c2ee:	4b48      	ldr	r3, [pc, #288]	; (810c410 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 810c2f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 810c2f2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 810c2f6:	ee07 3a90 	vmov	s15, r3
 810c2fa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 810c2fe:	ed97 6a03 	vldr	s12, [r7, #12]
 810c302:	eddf 5a45 	vldr	s11, [pc, #276]	; 810c418 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 810c306:	eec6 7a25 	vdiv.f32	s15, s12, s11
 810c30a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 810c30e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 810c312:	ee77 7aa6 	vadd.f32	s15, s15, s13
 810c316:	ee67 7a27 	vmul.f32	s15, s14, s15
 810c31a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 810c31e:	e021      	b.n	810c364 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 810c320:	697b      	ldr	r3, [r7, #20]
 810c322:	ee07 3a90 	vmov	s15, r3
 810c326:	eef8 7a67 	vcvt.f32.u32	s15, s15
 810c32a:	eddf 6a3d 	vldr	s13, [pc, #244]	; 810c420 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 810c32e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 810c332:	4b37      	ldr	r3, [pc, #220]	; (810c410 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 810c334:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 810c336:	f3c3 0308 	ubfx	r3, r3, #0, #9
 810c33a:	ee07 3a90 	vmov	s15, r3
 810c33e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 810c342:	ed97 6a03 	vldr	s12, [r7, #12]
 810c346:	eddf 5a34 	vldr	s11, [pc, #208]	; 810c418 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 810c34a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 810c34e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 810c352:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 810c356:	ee77 7aa6 	vadd.f32	s15, s15, s13
 810c35a:	ee67 7a27 	vmul.f32	s15, s14, s15
 810c35e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 810c362:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 810c364:	4b2a      	ldr	r3, [pc, #168]	; (810c410 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 810c366:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 810c368:	0a5b      	lsrs	r3, r3, #9
 810c36a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 810c36e:	ee07 3a90 	vmov	s15, r3
 810c372:	eef8 7a67 	vcvt.f32.u32	s15, s15
 810c376:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 810c37a:	ee37 7a87 	vadd.f32	s14, s15, s14
 810c37e:	edd7 6a07 	vldr	s13, [r7, #28]
 810c382:	eec6 7a87 	vdiv.f32	s15, s13, s14
 810c386:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 810c38a:	ee17 2a90 	vmov	r2, s15
 810c38e:	687b      	ldr	r3, [r7, #4]
 810c390:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 810c392:	4b1f      	ldr	r3, [pc, #124]	; (810c410 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 810c394:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 810c396:	0c1b      	lsrs	r3, r3, #16
 810c398:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 810c39c:	ee07 3a90 	vmov	s15, r3
 810c3a0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 810c3a4:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 810c3a8:	ee37 7a87 	vadd.f32	s14, s15, s14
 810c3ac:	edd7 6a07 	vldr	s13, [r7, #28]
 810c3b0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 810c3b4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 810c3b8:	ee17 2a90 	vmov	r2, s15
 810c3bc:	687b      	ldr	r3, [r7, #4]
 810c3be:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 810c3c0:	4b13      	ldr	r3, [pc, #76]	; (810c410 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 810c3c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 810c3c4:	0e1b      	lsrs	r3, r3, #24
 810c3c6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 810c3ca:	ee07 3a90 	vmov	s15, r3
 810c3ce:	eef8 7a67 	vcvt.f32.u32	s15, s15
 810c3d2:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 810c3d6:	ee37 7a87 	vadd.f32	s14, s15, s14
 810c3da:	edd7 6a07 	vldr	s13, [r7, #28]
 810c3de:	eec6 7a87 	vdiv.f32	s15, s13, s14
 810c3e2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 810c3e6:	ee17 2a90 	vmov	r2, s15
 810c3ea:	687b      	ldr	r3, [r7, #4]
 810c3ec:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 810c3ee:	e008      	b.n	810c402 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 810c3f0:	687b      	ldr	r3, [r7, #4]
 810c3f2:	2200      	movs	r2, #0
 810c3f4:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 810c3f6:	687b      	ldr	r3, [r7, #4]
 810c3f8:	2200      	movs	r2, #0
 810c3fa:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 810c3fc:	687b      	ldr	r3, [r7, #4]
 810c3fe:	2200      	movs	r2, #0
 810c400:	609a      	str	r2, [r3, #8]
}
 810c402:	bf00      	nop
 810c404:	3724      	adds	r7, #36	; 0x24
 810c406:	46bd      	mov	sp, r7
 810c408:	f85d 7b04 	ldr.w	r7, [sp], #4
 810c40c:	4770      	bx	lr
 810c40e:	bf00      	nop
 810c410:	58024400 	.word	0x58024400
 810c414:	03d09000 	.word	0x03d09000
 810c418:	46000000 	.word	0x46000000
 810c41c:	4c742400 	.word	0x4c742400
 810c420:	4a742400 	.word	0x4a742400
 810c424:	4bbebc20 	.word	0x4bbebc20

0810c428 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 810c428:	b480      	push	{r7}
 810c42a:	b089      	sub	sp, #36	; 0x24
 810c42c:	af00      	add	r7, sp, #0
 810c42e:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 810c430:	4ba1      	ldr	r3, [pc, #644]	; (810c6b8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 810c432:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 810c434:	f003 0303 	and.w	r3, r3, #3
 810c438:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 810c43a:	4b9f      	ldr	r3, [pc, #636]	; (810c6b8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 810c43c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 810c43e:	0d1b      	lsrs	r3, r3, #20
 810c440:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 810c444:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 810c446:	4b9c      	ldr	r3, [pc, #624]	; (810c6b8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 810c448:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 810c44a:	0a1b      	lsrs	r3, r3, #8
 810c44c:	f003 0301 	and.w	r3, r3, #1
 810c450:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 810c452:	4b99      	ldr	r3, [pc, #612]	; (810c6b8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 810c454:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 810c456:	08db      	lsrs	r3, r3, #3
 810c458:	f3c3 030c 	ubfx	r3, r3, #0, #13
 810c45c:	693a      	ldr	r2, [r7, #16]
 810c45e:	fb02 f303 	mul.w	r3, r2, r3
 810c462:	ee07 3a90 	vmov	s15, r3
 810c466:	eef8 7a67 	vcvt.f32.u32	s15, s15
 810c46a:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 810c46e:	697b      	ldr	r3, [r7, #20]
 810c470:	2b00      	cmp	r3, #0
 810c472:	f000 8111 	beq.w	810c698 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 810c476:	69bb      	ldr	r3, [r7, #24]
 810c478:	2b02      	cmp	r3, #2
 810c47a:	f000 8083 	beq.w	810c584 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 810c47e:	69bb      	ldr	r3, [r7, #24]
 810c480:	2b02      	cmp	r3, #2
 810c482:	f200 80a1 	bhi.w	810c5c8 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 810c486:	69bb      	ldr	r3, [r7, #24]
 810c488:	2b00      	cmp	r3, #0
 810c48a:	d003      	beq.n	810c494 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 810c48c:	69bb      	ldr	r3, [r7, #24]
 810c48e:	2b01      	cmp	r3, #1
 810c490:	d056      	beq.n	810c540 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 810c492:	e099      	b.n	810c5c8 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 810c494:	4b88      	ldr	r3, [pc, #544]	; (810c6b8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 810c496:	681b      	ldr	r3, [r3, #0]
 810c498:	f003 0320 	and.w	r3, r3, #32
 810c49c:	2b00      	cmp	r3, #0
 810c49e:	d02d      	beq.n	810c4fc <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 810c4a0:	4b85      	ldr	r3, [pc, #532]	; (810c6b8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 810c4a2:	681b      	ldr	r3, [r3, #0]
 810c4a4:	08db      	lsrs	r3, r3, #3
 810c4a6:	f003 0303 	and.w	r3, r3, #3
 810c4aa:	4a84      	ldr	r2, [pc, #528]	; (810c6bc <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 810c4ac:	fa22 f303 	lsr.w	r3, r2, r3
 810c4b0:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 810c4b2:	68bb      	ldr	r3, [r7, #8]
 810c4b4:	ee07 3a90 	vmov	s15, r3
 810c4b8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 810c4bc:	697b      	ldr	r3, [r7, #20]
 810c4be:	ee07 3a90 	vmov	s15, r3
 810c4c2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 810c4c6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 810c4ca:	4b7b      	ldr	r3, [pc, #492]	; (810c6b8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 810c4cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 810c4ce:	f3c3 0308 	ubfx	r3, r3, #0, #9
 810c4d2:	ee07 3a90 	vmov	s15, r3
 810c4d6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 810c4da:	ed97 6a03 	vldr	s12, [r7, #12]
 810c4de:	eddf 5a78 	vldr	s11, [pc, #480]	; 810c6c0 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 810c4e2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 810c4e6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 810c4ea:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 810c4ee:	ee77 7aa6 	vadd.f32	s15, s15, s13
 810c4f2:	ee67 7a27 	vmul.f32	s15, s14, s15
 810c4f6:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 810c4fa:	e087      	b.n	810c60c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 810c4fc:	697b      	ldr	r3, [r7, #20]
 810c4fe:	ee07 3a90 	vmov	s15, r3
 810c502:	eef8 7a67 	vcvt.f32.u32	s15, s15
 810c506:	eddf 6a6f 	vldr	s13, [pc, #444]	; 810c6c4 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 810c50a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 810c50e:	4b6a      	ldr	r3, [pc, #424]	; (810c6b8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 810c510:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 810c512:	f3c3 0308 	ubfx	r3, r3, #0, #9
 810c516:	ee07 3a90 	vmov	s15, r3
 810c51a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 810c51e:	ed97 6a03 	vldr	s12, [r7, #12]
 810c522:	eddf 5a67 	vldr	s11, [pc, #412]	; 810c6c0 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 810c526:	eec6 7a25 	vdiv.f32	s15, s12, s11
 810c52a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 810c52e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 810c532:	ee77 7aa6 	vadd.f32	s15, s15, s13
 810c536:	ee67 7a27 	vmul.f32	s15, s14, s15
 810c53a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 810c53e:	e065      	b.n	810c60c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 810c540:	697b      	ldr	r3, [r7, #20]
 810c542:	ee07 3a90 	vmov	s15, r3
 810c546:	eef8 7a67 	vcvt.f32.u32	s15, s15
 810c54a:	eddf 6a5f 	vldr	s13, [pc, #380]	; 810c6c8 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 810c54e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 810c552:	4b59      	ldr	r3, [pc, #356]	; (810c6b8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 810c554:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 810c556:	f3c3 0308 	ubfx	r3, r3, #0, #9
 810c55a:	ee07 3a90 	vmov	s15, r3
 810c55e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 810c562:	ed97 6a03 	vldr	s12, [r7, #12]
 810c566:	eddf 5a56 	vldr	s11, [pc, #344]	; 810c6c0 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 810c56a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 810c56e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 810c572:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 810c576:	ee77 7aa6 	vadd.f32	s15, s15, s13
 810c57a:	ee67 7a27 	vmul.f32	s15, s14, s15
 810c57e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 810c582:	e043      	b.n	810c60c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 810c584:	697b      	ldr	r3, [r7, #20]
 810c586:	ee07 3a90 	vmov	s15, r3
 810c58a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 810c58e:	eddf 6a4f 	vldr	s13, [pc, #316]	; 810c6cc <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 810c592:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 810c596:	4b48      	ldr	r3, [pc, #288]	; (810c6b8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 810c598:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 810c59a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 810c59e:	ee07 3a90 	vmov	s15, r3
 810c5a2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 810c5a6:	ed97 6a03 	vldr	s12, [r7, #12]
 810c5aa:	eddf 5a45 	vldr	s11, [pc, #276]	; 810c6c0 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 810c5ae:	eec6 7a25 	vdiv.f32	s15, s12, s11
 810c5b2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 810c5b6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 810c5ba:	ee77 7aa6 	vadd.f32	s15, s15, s13
 810c5be:	ee67 7a27 	vmul.f32	s15, s14, s15
 810c5c2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 810c5c6:	e021      	b.n	810c60c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 810c5c8:	697b      	ldr	r3, [r7, #20]
 810c5ca:	ee07 3a90 	vmov	s15, r3
 810c5ce:	eef8 7a67 	vcvt.f32.u32	s15, s15
 810c5d2:	eddf 6a3d 	vldr	s13, [pc, #244]	; 810c6c8 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 810c5d6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 810c5da:	4b37      	ldr	r3, [pc, #220]	; (810c6b8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 810c5dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 810c5de:	f3c3 0308 	ubfx	r3, r3, #0, #9
 810c5e2:	ee07 3a90 	vmov	s15, r3
 810c5e6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 810c5ea:	ed97 6a03 	vldr	s12, [r7, #12]
 810c5ee:	eddf 5a34 	vldr	s11, [pc, #208]	; 810c6c0 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 810c5f2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 810c5f6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 810c5fa:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 810c5fe:	ee77 7aa6 	vadd.f32	s15, s15, s13
 810c602:	ee67 7a27 	vmul.f32	s15, s14, s15
 810c606:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 810c60a:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 810c60c:	4b2a      	ldr	r3, [pc, #168]	; (810c6b8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 810c60e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 810c610:	0a5b      	lsrs	r3, r3, #9
 810c612:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 810c616:	ee07 3a90 	vmov	s15, r3
 810c61a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 810c61e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 810c622:	ee37 7a87 	vadd.f32	s14, s15, s14
 810c626:	edd7 6a07 	vldr	s13, [r7, #28]
 810c62a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 810c62e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 810c632:	ee17 2a90 	vmov	r2, s15
 810c636:	687b      	ldr	r3, [r7, #4]
 810c638:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 810c63a:	4b1f      	ldr	r3, [pc, #124]	; (810c6b8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 810c63c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 810c63e:	0c1b      	lsrs	r3, r3, #16
 810c640:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 810c644:	ee07 3a90 	vmov	s15, r3
 810c648:	eef8 7a67 	vcvt.f32.u32	s15, s15
 810c64c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 810c650:	ee37 7a87 	vadd.f32	s14, s15, s14
 810c654:	edd7 6a07 	vldr	s13, [r7, #28]
 810c658:	eec6 7a87 	vdiv.f32	s15, s13, s14
 810c65c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 810c660:	ee17 2a90 	vmov	r2, s15
 810c664:	687b      	ldr	r3, [r7, #4]
 810c666:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 810c668:	4b13      	ldr	r3, [pc, #76]	; (810c6b8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 810c66a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 810c66c:	0e1b      	lsrs	r3, r3, #24
 810c66e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 810c672:	ee07 3a90 	vmov	s15, r3
 810c676:	eef8 7a67 	vcvt.f32.u32	s15, s15
 810c67a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 810c67e:	ee37 7a87 	vadd.f32	s14, s15, s14
 810c682:	edd7 6a07 	vldr	s13, [r7, #28]
 810c686:	eec6 7a87 	vdiv.f32	s15, s13, s14
 810c68a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 810c68e:	ee17 2a90 	vmov	r2, s15
 810c692:	687b      	ldr	r3, [r7, #4]
 810c694:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 810c696:	e008      	b.n	810c6aa <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 810c698:	687b      	ldr	r3, [r7, #4]
 810c69a:	2200      	movs	r2, #0
 810c69c:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 810c69e:	687b      	ldr	r3, [r7, #4]
 810c6a0:	2200      	movs	r2, #0
 810c6a2:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 810c6a4:	687b      	ldr	r3, [r7, #4]
 810c6a6:	2200      	movs	r2, #0
 810c6a8:	609a      	str	r2, [r3, #8]
}
 810c6aa:	bf00      	nop
 810c6ac:	3724      	adds	r7, #36	; 0x24
 810c6ae:	46bd      	mov	sp, r7
 810c6b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 810c6b4:	4770      	bx	lr
 810c6b6:	bf00      	nop
 810c6b8:	58024400 	.word	0x58024400
 810c6bc:	03d09000 	.word	0x03d09000
 810c6c0:	46000000 	.word	0x46000000
 810c6c4:	4c742400 	.word	0x4c742400
 810c6c8:	4a742400 	.word	0x4a742400
 810c6cc:	4bbebc20 	.word	0x4bbebc20

0810c6d0 <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef *PLL1_Clocks)
{
 810c6d0:	b480      	push	{r7}
 810c6d2:	b089      	sub	sp, #36	; 0x24
 810c6d4:	af00      	add	r7, sp, #0
 810c6d6:	6078      	str	r0, [r7, #4]
  uint32_t pllsource, pll1m, pll1fracen, hsivalue;
  float_t fracn1, pll1vco;

  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 810c6d8:	4ba0      	ldr	r3, [pc, #640]	; (810c95c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 810c6da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 810c6dc:	f003 0303 	and.w	r3, r3, #3
 810c6e0:	61bb      	str	r3, [r7, #24]
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4);
 810c6e2:	4b9e      	ldr	r3, [pc, #632]	; (810c95c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 810c6e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 810c6e6:	091b      	lsrs	r3, r3, #4
 810c6e8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 810c6ec:	617b      	str	r3, [r7, #20]
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 810c6ee:	4b9b      	ldr	r3, [pc, #620]	; (810c95c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 810c6f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 810c6f2:	f003 0301 	and.w	r3, r3, #1
 810c6f6:	613b      	str	r3, [r7, #16]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 810c6f8:	4b98      	ldr	r3, [pc, #608]	; (810c95c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 810c6fa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 810c6fc:	08db      	lsrs	r3, r3, #3
 810c6fe:	f3c3 030c 	ubfx	r3, r3, #0, #13
 810c702:	693a      	ldr	r2, [r7, #16]
 810c704:	fb02 f303 	mul.w	r3, r2, r3
 810c708:	ee07 3a90 	vmov	s15, r3
 810c70c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 810c710:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll1m != 0U)
 810c714:	697b      	ldr	r3, [r7, #20]
 810c716:	2b00      	cmp	r3, #0
 810c718:	f000 8111 	beq.w	810c93e <HAL_RCCEx_GetPLL1ClockFreq+0x26e>
  {
    switch (pllsource)
 810c71c:	69bb      	ldr	r3, [r7, #24]
 810c71e:	2b02      	cmp	r3, #2
 810c720:	f000 8083 	beq.w	810c82a <HAL_RCCEx_GetPLL1ClockFreq+0x15a>
 810c724:	69bb      	ldr	r3, [r7, #24]
 810c726:	2b02      	cmp	r3, #2
 810c728:	f200 80a1 	bhi.w	810c86e <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
 810c72c:	69bb      	ldr	r3, [r7, #24]
 810c72e:	2b00      	cmp	r3, #0
 810c730:	d003      	beq.n	810c73a <HAL_RCCEx_GetPLL1ClockFreq+0x6a>
 810c732:	69bb      	ldr	r3, [r7, #24]
 810c734:	2b01      	cmp	r3, #1
 810c736:	d056      	beq.n	810c7e6 <HAL_RCCEx_GetPLL1ClockFreq+0x116>
 810c738:	e099      	b.n	810c86e <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 810c73a:	4b88      	ldr	r3, [pc, #544]	; (810c95c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 810c73c:	681b      	ldr	r3, [r3, #0]
 810c73e:	f003 0320 	and.w	r3, r3, #32
 810c742:	2b00      	cmp	r3, #0
 810c744:	d02d      	beq.n	810c7a2 <HAL_RCCEx_GetPLL1ClockFreq+0xd2>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 810c746:	4b85      	ldr	r3, [pc, #532]	; (810c95c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 810c748:	681b      	ldr	r3, [r3, #0]
 810c74a:	08db      	lsrs	r3, r3, #3
 810c74c:	f003 0303 	and.w	r3, r3, #3
 810c750:	4a83      	ldr	r2, [pc, #524]	; (810c960 <HAL_RCCEx_GetPLL1ClockFreq+0x290>)
 810c752:	fa22 f303 	lsr.w	r3, r2, r3
 810c756:	60bb      	str	r3, [r7, #8]
          pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 810c758:	68bb      	ldr	r3, [r7, #8]
 810c75a:	ee07 3a90 	vmov	s15, r3
 810c75e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 810c762:	697b      	ldr	r3, [r7, #20]
 810c764:	ee07 3a90 	vmov	s15, r3
 810c768:	eef8 7a67 	vcvt.f32.u32	s15, s15
 810c76c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 810c770:	4b7a      	ldr	r3, [pc, #488]	; (810c95c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 810c772:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 810c774:	f3c3 0308 	ubfx	r3, r3, #0, #9
 810c778:	ee07 3a90 	vmov	s15, r3
 810c77c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 810c780:	ed97 6a03 	vldr	s12, [r7, #12]
 810c784:	eddf 5a77 	vldr	s11, [pc, #476]	; 810c964 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 810c788:	eec6 7a25 	vdiv.f32	s15, s12, s11
 810c78c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 810c790:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 810c794:	ee77 7aa6 	vadd.f32	s15, s15, s13
 810c798:	ee67 7a27 	vmul.f32	s15, s14, s15
 810c79c:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
        }
        break;
 810c7a0:	e087      	b.n	810c8b2 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 810c7a2:	697b      	ldr	r3, [r7, #20]
 810c7a4:	ee07 3a90 	vmov	s15, r3
 810c7a8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 810c7ac:	eddf 6a6e 	vldr	s13, [pc, #440]	; 810c968 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 810c7b0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 810c7b4:	4b69      	ldr	r3, [pc, #420]	; (810c95c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 810c7b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 810c7b8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 810c7bc:	ee07 3a90 	vmov	s15, r3
 810c7c0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 810c7c4:	ed97 6a03 	vldr	s12, [r7, #12]
 810c7c8:	eddf 5a66 	vldr	s11, [pc, #408]	; 810c964 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 810c7cc:	eec6 7a25 	vdiv.f32	s15, s12, s11
 810c7d0:	ee76 7aa7 	vadd.f32	s15, s13, s15
 810c7d4:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 810c7d8:	ee77 7aa6 	vadd.f32	s15, s15, s13
 810c7dc:	ee67 7a27 	vmul.f32	s15, s14, s15
 810c7e0:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 810c7e4:	e065      	b.n	810c8b2 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 810c7e6:	697b      	ldr	r3, [r7, #20]
 810c7e8:	ee07 3a90 	vmov	s15, r3
 810c7ec:	eef8 7a67 	vcvt.f32.u32	s15, s15
 810c7f0:	eddf 6a5e 	vldr	s13, [pc, #376]	; 810c96c <HAL_RCCEx_GetPLL1ClockFreq+0x29c>
 810c7f4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 810c7f8:	4b58      	ldr	r3, [pc, #352]	; (810c95c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 810c7fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 810c7fc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 810c800:	ee07 3a90 	vmov	s15, r3
 810c804:	eef8 6a67 	vcvt.f32.u32	s13, s15
 810c808:	ed97 6a03 	vldr	s12, [r7, #12]
 810c80c:	eddf 5a55 	vldr	s11, [pc, #340]	; 810c964 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 810c810:	eec6 7a25 	vdiv.f32	s15, s12, s11
 810c814:	ee76 7aa7 	vadd.f32	s15, s13, s15
 810c818:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 810c81c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 810c820:	ee67 7a27 	vmul.f32	s15, s14, s15
 810c824:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 810c828:	e043      	b.n	810c8b2 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 810c82a:	697b      	ldr	r3, [r7, #20]
 810c82c:	ee07 3a90 	vmov	s15, r3
 810c830:	eef8 7a67 	vcvt.f32.u32	s15, s15
 810c834:	eddf 6a4e 	vldr	s13, [pc, #312]	; 810c970 <HAL_RCCEx_GetPLL1ClockFreq+0x2a0>
 810c838:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 810c83c:	4b47      	ldr	r3, [pc, #284]	; (810c95c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 810c83e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 810c840:	f3c3 0308 	ubfx	r3, r3, #0, #9
 810c844:	ee07 3a90 	vmov	s15, r3
 810c848:	eef8 6a67 	vcvt.f32.u32	s13, s15
 810c84c:	ed97 6a03 	vldr	s12, [r7, #12]
 810c850:	eddf 5a44 	vldr	s11, [pc, #272]	; 810c964 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 810c854:	eec6 7a25 	vdiv.f32	s15, s12, s11
 810c858:	ee76 7aa7 	vadd.f32	s15, s13, s15
 810c85c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 810c860:	ee77 7aa6 	vadd.f32	s15, s15, s13
 810c864:	ee67 7a27 	vmul.f32	s15, s14, s15
 810c868:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 810c86c:	e021      	b.n	810c8b2 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      default:
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 810c86e:	697b      	ldr	r3, [r7, #20]
 810c870:	ee07 3a90 	vmov	s15, r3
 810c874:	eef8 7a67 	vcvt.f32.u32	s15, s15
 810c878:	eddf 6a3b 	vldr	s13, [pc, #236]	; 810c968 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 810c87c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 810c880:	4b36      	ldr	r3, [pc, #216]	; (810c95c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 810c882:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 810c884:	f3c3 0308 	ubfx	r3, r3, #0, #9
 810c888:	ee07 3a90 	vmov	s15, r3
 810c88c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 810c890:	ed97 6a03 	vldr	s12, [r7, #12]
 810c894:	eddf 5a33 	vldr	s11, [pc, #204]	; 810c964 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 810c898:	eec6 7a25 	vdiv.f32	s15, s12, s11
 810c89c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 810c8a0:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 810c8a4:	ee77 7aa6 	vadd.f32	s15, s15, s13
 810c8a8:	ee67 7a27 	vmul.f32	s15, s14, s15
 810c8ac:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 810c8b0:	bf00      	nop
    }

    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9)  + (float_t)1)) ;
 810c8b2:	4b2a      	ldr	r3, [pc, #168]	; (810c95c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 810c8b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 810c8b6:	0a5b      	lsrs	r3, r3, #9
 810c8b8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 810c8bc:	ee07 3a90 	vmov	s15, r3
 810c8c0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 810c8c4:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 810c8c8:	ee37 7a87 	vadd.f32	s14, s15, s14
 810c8cc:	edd7 6a07 	vldr	s13, [r7, #28]
 810c8d0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 810c8d4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 810c8d8:	ee17 2a90 	vmov	r2, s15
 810c8dc:	687b      	ldr	r3, [r7, #4]
 810c8de:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >> 16) + (float_t)1)) ;
 810c8e0:	4b1e      	ldr	r3, [pc, #120]	; (810c95c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 810c8e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 810c8e4:	0c1b      	lsrs	r3, r3, #16
 810c8e6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 810c8ea:	ee07 3a90 	vmov	s15, r3
 810c8ee:	eef8 7a67 	vcvt.f32.u32	s15, s15
 810c8f2:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 810c8f6:	ee37 7a87 	vadd.f32	s14, s15, s14
 810c8fa:	edd7 6a07 	vldr	s13, [r7, #28]
 810c8fe:	eec6 7a87 	vdiv.f32	s15, s13, s14
 810c902:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 810c906:	ee17 2a90 	vmov	r2, s15
 810c90a:	687b      	ldr	r3, [r7, #4]
 810c90c:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >> 24) + (float_t)1)) ;
 810c90e:	4b13      	ldr	r3, [pc, #76]	; (810c95c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 810c910:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 810c912:	0e1b      	lsrs	r3, r3, #24
 810c914:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 810c918:	ee07 3a90 	vmov	s15, r3
 810c91c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 810c920:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 810c924:	ee37 7a87 	vadd.f32	s14, s15, s14
 810c928:	edd7 6a07 	vldr	s13, [r7, #28]
 810c92c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 810c930:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 810c934:	ee17 2a90 	vmov	r2, s15
 810c938:	687b      	ldr	r3, [r7, #4]
 810c93a:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 810c93c:	e008      	b.n	810c950 <HAL_RCCEx_GetPLL1ClockFreq+0x280>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 810c93e:	687b      	ldr	r3, [r7, #4]
 810c940:	2200      	movs	r2, #0
 810c942:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 810c944:	687b      	ldr	r3, [r7, #4]
 810c946:	2200      	movs	r2, #0
 810c948:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 810c94a:	687b      	ldr	r3, [r7, #4]
 810c94c:	2200      	movs	r2, #0
 810c94e:	609a      	str	r2, [r3, #8]
}
 810c950:	bf00      	nop
 810c952:	3724      	adds	r7, #36	; 0x24
 810c954:	46bd      	mov	sp, r7
 810c956:	f85d 7b04 	ldr.w	r7, [sp], #4
 810c95a:	4770      	bx	lr
 810c95c:	58024400 	.word	0x58024400
 810c960:	03d09000 	.word	0x03d09000
 810c964:	46000000 	.word	0x46000000
 810c968:	4c742400 	.word	0x4c742400
 810c96c:	4a742400 	.word	0x4a742400
 810c970:	4bbebc20 	.word	0x4bbebc20

0810c974 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 810c974:	b580      	push	{r7, lr}
 810c976:	b084      	sub	sp, #16
 810c978:	af00      	add	r7, sp, #0
 810c97a:	6078      	str	r0, [r7, #4]
 810c97c:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 810c97e:	2300      	movs	r3, #0
 810c980:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 810c982:	4b54      	ldr	r3, [pc, #336]	; (810cad4 <RCCEx_PLL2_Config+0x160>)
 810c984:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 810c986:	f003 0303 	and.w	r3, r3, #3
 810c98a:	2b03      	cmp	r3, #3
 810c98c:	d101      	bne.n	810c992 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 810c98e:	2301      	movs	r3, #1
 810c990:	e09b      	b.n	810caca <RCCEx_PLL2_Config+0x156>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 810c992:	4b50      	ldr	r3, [pc, #320]	; (810cad4 <RCCEx_PLL2_Config+0x160>)
 810c994:	681b      	ldr	r3, [r3, #0]
 810c996:	4a4f      	ldr	r2, [pc, #316]	; (810cad4 <RCCEx_PLL2_Config+0x160>)
 810c998:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 810c99c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 810c99e:	f7fa fe3d 	bl	810761c <HAL_GetTick>
 810c9a2:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 810c9a4:	e008      	b.n	810c9b8 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 810c9a6:	f7fa fe39 	bl	810761c <HAL_GetTick>
 810c9aa:	4602      	mov	r2, r0
 810c9ac:	68bb      	ldr	r3, [r7, #8]
 810c9ae:	1ad3      	subs	r3, r2, r3
 810c9b0:	2b02      	cmp	r3, #2
 810c9b2:	d901      	bls.n	810c9b8 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 810c9b4:	2303      	movs	r3, #3
 810c9b6:	e088      	b.n	810caca <RCCEx_PLL2_Config+0x156>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 810c9b8:	4b46      	ldr	r3, [pc, #280]	; (810cad4 <RCCEx_PLL2_Config+0x160>)
 810c9ba:	681b      	ldr	r3, [r3, #0]
 810c9bc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 810c9c0:	2b00      	cmp	r3, #0
 810c9c2:	d1f0      	bne.n	810c9a6 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 810c9c4:	4b43      	ldr	r3, [pc, #268]	; (810cad4 <RCCEx_PLL2_Config+0x160>)
 810c9c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 810c9c8:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 810c9cc:	687b      	ldr	r3, [r7, #4]
 810c9ce:	681b      	ldr	r3, [r3, #0]
 810c9d0:	031b      	lsls	r3, r3, #12
 810c9d2:	4940      	ldr	r1, [pc, #256]	; (810cad4 <RCCEx_PLL2_Config+0x160>)
 810c9d4:	4313      	orrs	r3, r2
 810c9d6:	628b      	str	r3, [r1, #40]	; 0x28
 810c9d8:	687b      	ldr	r3, [r7, #4]
 810c9da:	685b      	ldr	r3, [r3, #4]
 810c9dc:	3b01      	subs	r3, #1
 810c9de:	f3c3 0208 	ubfx	r2, r3, #0, #9
 810c9e2:	687b      	ldr	r3, [r7, #4]
 810c9e4:	689b      	ldr	r3, [r3, #8]
 810c9e6:	3b01      	subs	r3, #1
 810c9e8:	025b      	lsls	r3, r3, #9
 810c9ea:	b29b      	uxth	r3, r3
 810c9ec:	431a      	orrs	r2, r3
 810c9ee:	687b      	ldr	r3, [r7, #4]
 810c9f0:	68db      	ldr	r3, [r3, #12]
 810c9f2:	3b01      	subs	r3, #1
 810c9f4:	041b      	lsls	r3, r3, #16
 810c9f6:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 810c9fa:	431a      	orrs	r2, r3
 810c9fc:	687b      	ldr	r3, [r7, #4]
 810c9fe:	691b      	ldr	r3, [r3, #16]
 810ca00:	3b01      	subs	r3, #1
 810ca02:	061b      	lsls	r3, r3, #24
 810ca04:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 810ca08:	4932      	ldr	r1, [pc, #200]	; (810cad4 <RCCEx_PLL2_Config+0x160>)
 810ca0a:	4313      	orrs	r3, r2
 810ca0c:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 810ca0e:	4b31      	ldr	r3, [pc, #196]	; (810cad4 <RCCEx_PLL2_Config+0x160>)
 810ca10:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 810ca12:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 810ca16:	687b      	ldr	r3, [r7, #4]
 810ca18:	695b      	ldr	r3, [r3, #20]
 810ca1a:	492e      	ldr	r1, [pc, #184]	; (810cad4 <RCCEx_PLL2_Config+0x160>)
 810ca1c:	4313      	orrs	r3, r2
 810ca1e:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 810ca20:	4b2c      	ldr	r3, [pc, #176]	; (810cad4 <RCCEx_PLL2_Config+0x160>)
 810ca22:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 810ca24:	f023 0220 	bic.w	r2, r3, #32
 810ca28:	687b      	ldr	r3, [r7, #4]
 810ca2a:	699b      	ldr	r3, [r3, #24]
 810ca2c:	4929      	ldr	r1, [pc, #164]	; (810cad4 <RCCEx_PLL2_Config+0x160>)
 810ca2e:	4313      	orrs	r3, r2
 810ca30:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 810ca32:	4b28      	ldr	r3, [pc, #160]	; (810cad4 <RCCEx_PLL2_Config+0x160>)
 810ca34:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 810ca36:	4a27      	ldr	r2, [pc, #156]	; (810cad4 <RCCEx_PLL2_Config+0x160>)
 810ca38:	f023 0310 	bic.w	r3, r3, #16
 810ca3c:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 810ca3e:	4b25      	ldr	r3, [pc, #148]	; (810cad4 <RCCEx_PLL2_Config+0x160>)
 810ca40:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 810ca42:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 810ca46:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 810ca4a:	687a      	ldr	r2, [r7, #4]
 810ca4c:	69d2      	ldr	r2, [r2, #28]
 810ca4e:	00d2      	lsls	r2, r2, #3
 810ca50:	4920      	ldr	r1, [pc, #128]	; (810cad4 <RCCEx_PLL2_Config+0x160>)
 810ca52:	4313      	orrs	r3, r2
 810ca54:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 810ca56:	4b1f      	ldr	r3, [pc, #124]	; (810cad4 <RCCEx_PLL2_Config+0x160>)
 810ca58:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 810ca5a:	4a1e      	ldr	r2, [pc, #120]	; (810cad4 <RCCEx_PLL2_Config+0x160>)
 810ca5c:	f043 0310 	orr.w	r3, r3, #16
 810ca60:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 810ca62:	683b      	ldr	r3, [r7, #0]
 810ca64:	2b00      	cmp	r3, #0
 810ca66:	d106      	bne.n	810ca76 <RCCEx_PLL2_Config+0x102>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 810ca68:	4b1a      	ldr	r3, [pc, #104]	; (810cad4 <RCCEx_PLL2_Config+0x160>)
 810ca6a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 810ca6c:	4a19      	ldr	r2, [pc, #100]	; (810cad4 <RCCEx_PLL2_Config+0x160>)
 810ca6e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 810ca72:	62d3      	str	r3, [r2, #44]	; 0x2c
 810ca74:	e00f      	b.n	810ca96 <RCCEx_PLL2_Config+0x122>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 810ca76:	683b      	ldr	r3, [r7, #0]
 810ca78:	2b01      	cmp	r3, #1
 810ca7a:	d106      	bne.n	810ca8a <RCCEx_PLL2_Config+0x116>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 810ca7c:	4b15      	ldr	r3, [pc, #84]	; (810cad4 <RCCEx_PLL2_Config+0x160>)
 810ca7e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 810ca80:	4a14      	ldr	r2, [pc, #80]	; (810cad4 <RCCEx_PLL2_Config+0x160>)
 810ca82:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 810ca86:	62d3      	str	r3, [r2, #44]	; 0x2c
 810ca88:	e005      	b.n	810ca96 <RCCEx_PLL2_Config+0x122>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 810ca8a:	4b12      	ldr	r3, [pc, #72]	; (810cad4 <RCCEx_PLL2_Config+0x160>)
 810ca8c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 810ca8e:	4a11      	ldr	r2, [pc, #68]	; (810cad4 <RCCEx_PLL2_Config+0x160>)
 810ca90:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 810ca94:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 810ca96:	4b0f      	ldr	r3, [pc, #60]	; (810cad4 <RCCEx_PLL2_Config+0x160>)
 810ca98:	681b      	ldr	r3, [r3, #0]
 810ca9a:	4a0e      	ldr	r2, [pc, #56]	; (810cad4 <RCCEx_PLL2_Config+0x160>)
 810ca9c:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 810caa0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 810caa2:	f7fa fdbb 	bl	810761c <HAL_GetTick>
 810caa6:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 810caa8:	e008      	b.n	810cabc <RCCEx_PLL2_Config+0x148>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 810caaa:	f7fa fdb7 	bl	810761c <HAL_GetTick>
 810caae:	4602      	mov	r2, r0
 810cab0:	68bb      	ldr	r3, [r7, #8]
 810cab2:	1ad3      	subs	r3, r2, r3
 810cab4:	2b02      	cmp	r3, #2
 810cab6:	d901      	bls.n	810cabc <RCCEx_PLL2_Config+0x148>
      {
        return HAL_TIMEOUT;
 810cab8:	2303      	movs	r3, #3
 810caba:	e006      	b.n	810caca <RCCEx_PLL2_Config+0x156>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 810cabc:	4b05      	ldr	r3, [pc, #20]	; (810cad4 <RCCEx_PLL2_Config+0x160>)
 810cabe:	681b      	ldr	r3, [r3, #0]
 810cac0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 810cac4:	2b00      	cmp	r3, #0
 810cac6:	d0f0      	beq.n	810caaa <RCCEx_PLL2_Config+0x136>
    }

  }


  return status;
 810cac8:	7bfb      	ldrb	r3, [r7, #15]
}
 810caca:	4618      	mov	r0, r3
 810cacc:	3710      	adds	r7, #16
 810cace:	46bd      	mov	sp, r7
 810cad0:	bd80      	pop	{r7, pc}
 810cad2:	bf00      	nop
 810cad4:	58024400 	.word	0x58024400

0810cad8 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 810cad8:	b580      	push	{r7, lr}
 810cada:	b084      	sub	sp, #16
 810cadc:	af00      	add	r7, sp, #0
 810cade:	6078      	str	r0, [r7, #4]
 810cae0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 810cae2:	2300      	movs	r3, #0
 810cae4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 810cae6:	4b54      	ldr	r3, [pc, #336]	; (810cc38 <RCCEx_PLL3_Config+0x160>)
 810cae8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 810caea:	f003 0303 	and.w	r3, r3, #3
 810caee:	2b03      	cmp	r3, #3
 810caf0:	d101      	bne.n	810caf6 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 810caf2:	2301      	movs	r3, #1
 810caf4:	e09b      	b.n	810cc2e <RCCEx_PLL3_Config+0x156>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 810caf6:	4b50      	ldr	r3, [pc, #320]	; (810cc38 <RCCEx_PLL3_Config+0x160>)
 810caf8:	681b      	ldr	r3, [r3, #0]
 810cafa:	4a4f      	ldr	r2, [pc, #316]	; (810cc38 <RCCEx_PLL3_Config+0x160>)
 810cafc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 810cb00:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 810cb02:	f7fa fd8b 	bl	810761c <HAL_GetTick>
 810cb06:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 810cb08:	e008      	b.n	810cb1c <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 810cb0a:	f7fa fd87 	bl	810761c <HAL_GetTick>
 810cb0e:	4602      	mov	r2, r0
 810cb10:	68bb      	ldr	r3, [r7, #8]
 810cb12:	1ad3      	subs	r3, r2, r3
 810cb14:	2b02      	cmp	r3, #2
 810cb16:	d901      	bls.n	810cb1c <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 810cb18:	2303      	movs	r3, #3
 810cb1a:	e088      	b.n	810cc2e <RCCEx_PLL3_Config+0x156>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 810cb1c:	4b46      	ldr	r3, [pc, #280]	; (810cc38 <RCCEx_PLL3_Config+0x160>)
 810cb1e:	681b      	ldr	r3, [r3, #0]
 810cb20:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 810cb24:	2b00      	cmp	r3, #0
 810cb26:	d1f0      	bne.n	810cb0a <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 810cb28:	4b43      	ldr	r3, [pc, #268]	; (810cc38 <RCCEx_PLL3_Config+0x160>)
 810cb2a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 810cb2c:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 810cb30:	687b      	ldr	r3, [r7, #4]
 810cb32:	681b      	ldr	r3, [r3, #0]
 810cb34:	051b      	lsls	r3, r3, #20
 810cb36:	4940      	ldr	r1, [pc, #256]	; (810cc38 <RCCEx_PLL3_Config+0x160>)
 810cb38:	4313      	orrs	r3, r2
 810cb3a:	628b      	str	r3, [r1, #40]	; 0x28
 810cb3c:	687b      	ldr	r3, [r7, #4]
 810cb3e:	685b      	ldr	r3, [r3, #4]
 810cb40:	3b01      	subs	r3, #1
 810cb42:	f3c3 0208 	ubfx	r2, r3, #0, #9
 810cb46:	687b      	ldr	r3, [r7, #4]
 810cb48:	689b      	ldr	r3, [r3, #8]
 810cb4a:	3b01      	subs	r3, #1
 810cb4c:	025b      	lsls	r3, r3, #9
 810cb4e:	b29b      	uxth	r3, r3
 810cb50:	431a      	orrs	r2, r3
 810cb52:	687b      	ldr	r3, [r7, #4]
 810cb54:	68db      	ldr	r3, [r3, #12]
 810cb56:	3b01      	subs	r3, #1
 810cb58:	041b      	lsls	r3, r3, #16
 810cb5a:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 810cb5e:	431a      	orrs	r2, r3
 810cb60:	687b      	ldr	r3, [r7, #4]
 810cb62:	691b      	ldr	r3, [r3, #16]
 810cb64:	3b01      	subs	r3, #1
 810cb66:	061b      	lsls	r3, r3, #24
 810cb68:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 810cb6c:	4932      	ldr	r1, [pc, #200]	; (810cc38 <RCCEx_PLL3_Config+0x160>)
 810cb6e:	4313      	orrs	r3, r2
 810cb70:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 810cb72:	4b31      	ldr	r3, [pc, #196]	; (810cc38 <RCCEx_PLL3_Config+0x160>)
 810cb74:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 810cb76:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 810cb7a:	687b      	ldr	r3, [r7, #4]
 810cb7c:	695b      	ldr	r3, [r3, #20]
 810cb7e:	492e      	ldr	r1, [pc, #184]	; (810cc38 <RCCEx_PLL3_Config+0x160>)
 810cb80:	4313      	orrs	r3, r2
 810cb82:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 810cb84:	4b2c      	ldr	r3, [pc, #176]	; (810cc38 <RCCEx_PLL3_Config+0x160>)
 810cb86:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 810cb88:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 810cb8c:	687b      	ldr	r3, [r7, #4]
 810cb8e:	699b      	ldr	r3, [r3, #24]
 810cb90:	4929      	ldr	r1, [pc, #164]	; (810cc38 <RCCEx_PLL3_Config+0x160>)
 810cb92:	4313      	orrs	r3, r2
 810cb94:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 810cb96:	4b28      	ldr	r3, [pc, #160]	; (810cc38 <RCCEx_PLL3_Config+0x160>)
 810cb98:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 810cb9a:	4a27      	ldr	r2, [pc, #156]	; (810cc38 <RCCEx_PLL3_Config+0x160>)
 810cb9c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 810cba0:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 810cba2:	4b25      	ldr	r3, [pc, #148]	; (810cc38 <RCCEx_PLL3_Config+0x160>)
 810cba4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 810cba6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 810cbaa:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 810cbae:	687a      	ldr	r2, [r7, #4]
 810cbb0:	69d2      	ldr	r2, [r2, #28]
 810cbb2:	00d2      	lsls	r2, r2, #3
 810cbb4:	4920      	ldr	r1, [pc, #128]	; (810cc38 <RCCEx_PLL3_Config+0x160>)
 810cbb6:	4313      	orrs	r3, r2
 810cbb8:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 810cbba:	4b1f      	ldr	r3, [pc, #124]	; (810cc38 <RCCEx_PLL3_Config+0x160>)
 810cbbc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 810cbbe:	4a1e      	ldr	r2, [pc, #120]	; (810cc38 <RCCEx_PLL3_Config+0x160>)
 810cbc0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 810cbc4:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 810cbc6:	683b      	ldr	r3, [r7, #0]
 810cbc8:	2b00      	cmp	r3, #0
 810cbca:	d106      	bne.n	810cbda <RCCEx_PLL3_Config+0x102>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 810cbcc:	4b1a      	ldr	r3, [pc, #104]	; (810cc38 <RCCEx_PLL3_Config+0x160>)
 810cbce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 810cbd0:	4a19      	ldr	r2, [pc, #100]	; (810cc38 <RCCEx_PLL3_Config+0x160>)
 810cbd2:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 810cbd6:	62d3      	str	r3, [r2, #44]	; 0x2c
 810cbd8:	e00f      	b.n	810cbfa <RCCEx_PLL3_Config+0x122>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 810cbda:	683b      	ldr	r3, [r7, #0]
 810cbdc:	2b01      	cmp	r3, #1
 810cbde:	d106      	bne.n	810cbee <RCCEx_PLL3_Config+0x116>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 810cbe0:	4b15      	ldr	r3, [pc, #84]	; (810cc38 <RCCEx_PLL3_Config+0x160>)
 810cbe2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 810cbe4:	4a14      	ldr	r2, [pc, #80]	; (810cc38 <RCCEx_PLL3_Config+0x160>)
 810cbe6:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 810cbea:	62d3      	str	r3, [r2, #44]	; 0x2c
 810cbec:	e005      	b.n	810cbfa <RCCEx_PLL3_Config+0x122>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 810cbee:	4b12      	ldr	r3, [pc, #72]	; (810cc38 <RCCEx_PLL3_Config+0x160>)
 810cbf0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 810cbf2:	4a11      	ldr	r2, [pc, #68]	; (810cc38 <RCCEx_PLL3_Config+0x160>)
 810cbf4:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 810cbf8:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 810cbfa:	4b0f      	ldr	r3, [pc, #60]	; (810cc38 <RCCEx_PLL3_Config+0x160>)
 810cbfc:	681b      	ldr	r3, [r3, #0]
 810cbfe:	4a0e      	ldr	r2, [pc, #56]	; (810cc38 <RCCEx_PLL3_Config+0x160>)
 810cc00:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 810cc04:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 810cc06:	f7fa fd09 	bl	810761c <HAL_GetTick>
 810cc0a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 810cc0c:	e008      	b.n	810cc20 <RCCEx_PLL3_Config+0x148>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 810cc0e:	f7fa fd05 	bl	810761c <HAL_GetTick>
 810cc12:	4602      	mov	r2, r0
 810cc14:	68bb      	ldr	r3, [r7, #8]
 810cc16:	1ad3      	subs	r3, r2, r3
 810cc18:	2b02      	cmp	r3, #2
 810cc1a:	d901      	bls.n	810cc20 <RCCEx_PLL3_Config+0x148>
      {
        return HAL_TIMEOUT;
 810cc1c:	2303      	movs	r3, #3
 810cc1e:	e006      	b.n	810cc2e <RCCEx_PLL3_Config+0x156>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 810cc20:	4b05      	ldr	r3, [pc, #20]	; (810cc38 <RCCEx_PLL3_Config+0x160>)
 810cc22:	681b      	ldr	r3, [r3, #0]
 810cc24:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 810cc28:	2b00      	cmp	r3, #0
 810cc2a:	d0f0      	beq.n	810cc0e <RCCEx_PLL3_Config+0x136>
    }

  }


  return status;
 810cc2c:	7bfb      	ldrb	r3, [r7, #15]
}
 810cc2e:	4618      	mov	r0, r3
 810cc30:	3710      	adds	r7, #16
 810cc32:	46bd      	mov	sp, r7
 810cc34:	bd80      	pop	{r7, pc}
 810cc36:	bf00      	nop
 810cc38:	58024400 	.word	0x58024400

0810cc3c <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 810cc3c:	b580      	push	{r7, lr}
 810cc3e:	b084      	sub	sp, #16
 810cc40:	af00      	add	r7, sp, #0
 810cc42:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 810cc44:	2301      	movs	r3, #1
 810cc46:	73fb      	strb	r3, [r7, #15]

  /* Check RTC handler */
  if(hrtc != NULL)
 810cc48:	687b      	ldr	r3, [r7, #4]
 810cc4a:	2b00      	cmp	r3, #0
 810cc4c:	d073      	beq.n	810cd36 <HAL_RTC_Init+0xfa>
      {
        hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
      }
    }
#else /*  (USE_HAL_RTC_REGISTER_CALLBACKS == 1) */
    if(hrtc->State == HAL_RTC_STATE_RESET)
 810cc4e:	687b      	ldr	r3, [r7, #4]
 810cc50:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 810cc54:	b2db      	uxtb	r3, r3
 810cc56:	2b00      	cmp	r3, #0
 810cc58:	d106      	bne.n	810cc68 <HAL_RTC_Init+0x2c>
    {
      /* Allocate lock resource and initialize it */
      hrtc->Lock = HAL_UNLOCKED;
 810cc5a:	687b      	ldr	r3, [r7, #4]
 810cc5c:	2200      	movs	r2, #0
 810cc5e:	f883 2020 	strb.w	r2, [r3, #32]

      /* Initialize RTC MSP */
      HAL_RTC_MspInit(hrtc);
 810cc62:	6878      	ldr	r0, [r7, #4]
 810cc64:	f7f4 fe9e 	bl	81019a4 <HAL_RTC_MspInit>
    }
#endif /*  (USE_HAL_RTC_REGISTER_CALLBACKS == 1) */

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_BUSY;
 810cc68:	687b      	ldr	r3, [r7, #4]
 810cc6a:	2202      	movs	r2, #2
 810cc6c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Check whether the calendar needs to be initialized */
    if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 810cc70:	687b      	ldr	r3, [r7, #4]
 810cc72:	681b      	ldr	r3, [r3, #0]
 810cc74:	68db      	ldr	r3, [r3, #12]
 810cc76:	f003 0310 	and.w	r3, r3, #16
 810cc7a:	2b10      	cmp	r3, #16
 810cc7c:	d052      	beq.n	810cd24 <HAL_RTC_Init+0xe8>
    {
      /* Disable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 810cc7e:	687b      	ldr	r3, [r7, #4]
 810cc80:	681b      	ldr	r3, [r3, #0]
 810cc82:	22ca      	movs	r2, #202	; 0xca
 810cc84:	625a      	str	r2, [r3, #36]	; 0x24
 810cc86:	687b      	ldr	r3, [r7, #4]
 810cc88:	681b      	ldr	r3, [r3, #0]
 810cc8a:	2253      	movs	r2, #83	; 0x53
 810cc8c:	625a      	str	r2, [r3, #36]	; 0x24

     /* Enter Initialization mode */
      status = RTC_EnterInitMode(hrtc);
 810cc8e:	6878      	ldr	r0, [r7, #4]
 810cc90:	f000 f87a 	bl	810cd88 <RTC_EnterInitMode>
 810cc94:	4603      	mov	r3, r0
 810cc96:	73fb      	strb	r3, [r7, #15]
      if (status == HAL_OK)
 810cc98:	7bfb      	ldrb	r3, [r7, #15]
 810cc9a:	2b00      	cmp	r3, #0
 810cc9c:	d126      	bne.n	810ccec <HAL_RTC_Init+0xb0>
#if defined(TAMP)
        /* Clear RTC_CR FMT, OSEL, POL and TAMPOE Bits */
        hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE);
#else
        /* Clear RTC_CR FMT, OSEL and POL Bits */
        hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL);
 810cc9e:	687b      	ldr	r3, [r7, #4]
 810cca0:	681b      	ldr	r3, [r3, #0]
 810cca2:	689b      	ldr	r3, [r3, #8]
 810cca4:	687a      	ldr	r2, [r7, #4]
 810cca6:	6812      	ldr	r2, [r2, #0]
 810cca8:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 810ccac:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 810ccb0:	6093      	str	r3, [r2, #8]
#endif /* TAMP */

        /* Set RTC_CR register */
        hrtc->Instance->CR |= (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 810ccb2:	687b      	ldr	r3, [r7, #4]
 810ccb4:	681b      	ldr	r3, [r3, #0]
 810ccb6:	6899      	ldr	r1, [r3, #8]
 810ccb8:	687b      	ldr	r3, [r7, #4]
 810ccba:	685a      	ldr	r2, [r3, #4]
 810ccbc:	687b      	ldr	r3, [r7, #4]
 810ccbe:	691b      	ldr	r3, [r3, #16]
 810ccc0:	431a      	orrs	r2, r3
 810ccc2:	687b      	ldr	r3, [r7, #4]
 810ccc4:	699b      	ldr	r3, [r3, #24]
 810ccc6:	431a      	orrs	r2, r3
 810ccc8:	687b      	ldr	r3, [r7, #4]
 810ccca:	681b      	ldr	r3, [r3, #0]
 810cccc:	430a      	orrs	r2, r1
 810ccce:	609a      	str	r2, [r3, #8]

        /* Configure the RTC PRER */
        hrtc->Instance->PRER = (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos) | (hrtc->Init.SynchPrediv << RTC_PRER_PREDIV_S_Pos);
 810ccd0:	687b      	ldr	r3, [r7, #4]
 810ccd2:	689b      	ldr	r3, [r3, #8]
 810ccd4:	0419      	lsls	r1, r3, #16
 810ccd6:	687b      	ldr	r3, [r7, #4]
 810ccd8:	68da      	ldr	r2, [r3, #12]
 810ccda:	687b      	ldr	r3, [r7, #4]
 810ccdc:	681b      	ldr	r3, [r3, #0]
 810ccde:	430a      	orrs	r2, r1
 810cce0:	611a      	str	r2, [r3, #16]

        /* Exit Initialization mode */
        status = RTC_ExitInitMode(hrtc);
 810cce2:	6878      	ldr	r0, [r7, #4]
 810cce4:	f000 f884 	bl	810cdf0 <RTC_ExitInitMode>
 810cce8:	4603      	mov	r3, r0
 810ccea:	73fb      	strb	r3, [r7, #15]
      }
      if(status == HAL_OK)
 810ccec:	7bfb      	ldrb	r3, [r7, #15]
 810ccee:	2b00      	cmp	r3, #0
 810ccf0:	d113      	bne.n	810cd1a <HAL_RTC_Init+0xde>
      {
#if defined(TAMP)
        hrtc->Instance->CR &= ~(RTC_CR_TAMPALRM_PU | RTC_CR_TAMPALRM_TYPE | RTC_CR_OUT2EN);
        hrtc->Instance->CR |= (hrtc->Init.OutPutPullUp | hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
#else
        hrtc->Instance->OR &= ~(RTC_OR_ALARMOUTTYPE | RTC_OR_OUT_RMP);
 810ccf2:	687b      	ldr	r3, [r7, #4]
 810ccf4:	681b      	ldr	r3, [r3, #0]
 810ccf6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 810ccf8:	687b      	ldr	r3, [r7, #4]
 810ccfa:	681b      	ldr	r3, [r3, #0]
 810ccfc:	f022 0203 	bic.w	r2, r2, #3
 810cd00:	64da      	str	r2, [r3, #76]	; 0x4c
        hrtc->Instance->OR |= (hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 810cd02:	687b      	ldr	r3, [r7, #4]
 810cd04:	681b      	ldr	r3, [r3, #0]
 810cd06:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 810cd08:	687b      	ldr	r3, [r7, #4]
 810cd0a:	69da      	ldr	r2, [r3, #28]
 810cd0c:	687b      	ldr	r3, [r7, #4]
 810cd0e:	695b      	ldr	r3, [r3, #20]
 810cd10:	431a      	orrs	r2, r3
 810cd12:	687b      	ldr	r3, [r7, #4]
 810cd14:	681b      	ldr	r3, [r3, #0]
 810cd16:	430a      	orrs	r2, r1
 810cd18:	64da      	str	r2, [r3, #76]	; 0x4c
#endif /* TAMP */
      }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 810cd1a:	687b      	ldr	r3, [r7, #4]
 810cd1c:	681b      	ldr	r3, [r3, #0]
 810cd1e:	22ff      	movs	r2, #255	; 0xff
 810cd20:	625a      	str	r2, [r3, #36]	; 0x24
 810cd22:	e001      	b.n	810cd28 <HAL_RTC_Init+0xec>
    }
    else
    {
      /* The calendar is already initialized */
      status = HAL_OK;
 810cd24:	2300      	movs	r3, #0
 810cd26:	73fb      	strb	r3, [r7, #15]
    }

    if (status == HAL_OK)
 810cd28:	7bfb      	ldrb	r3, [r7, #15]
 810cd2a:	2b00      	cmp	r3, #0
 810cd2c:	d103      	bne.n	810cd36 <HAL_RTC_Init+0xfa>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_READY;
 810cd2e:	687b      	ldr	r3, [r7, #4]
 810cd30:	2201      	movs	r2, #1
 810cd32:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
  }

  /* return status */
  return status;
 810cd36:	7bfb      	ldrb	r3, [r7, #15]
}
 810cd38:	4618      	mov	r0, r3
 810cd3a:	3710      	adds	r7, #16
 810cd3c:	46bd      	mov	sp, r7
 810cd3e:	bd80      	pop	{r7, pc}

0810cd40 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 810cd40:	b580      	push	{r7, lr}
 810cd42:	b084      	sub	sp, #16
 810cd44:	af00      	add	r7, sp, #0
 810cd46:	6078      	str	r0, [r7, #4]

  /* Clear RSF flag, keep reserved bits at reset values (setting other flags has no effect) */
#if defined(TAMP)
  hrtc->Instance->ICSR = ((uint32_t)(RTC_RSF_MASK & RTC_ICSR_RESERVED_MASK));
#else
  hrtc->Instance->ISR = ((uint32_t)(RTC_RSF_MASK & RTC_ISR_RESERVED_MASK));
 810cd48:	687b      	ldr	r3, [r7, #4]
 810cd4a:	681b      	ldr	r3, [r3, #0]
 810cd4c:	4a0d      	ldr	r2, [pc, #52]	; (810cd84 <HAL_RTC_WaitForSynchro+0x44>)
 810cd4e:	60da      	str	r2, [r3, #12]
#endif /* TAMP */

  tickstart = HAL_GetTick();
 810cd50:	f7fa fc64 	bl	810761c <HAL_GetTick>
 810cd54:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
#if defined(TAMP)
  while ((hrtc->Instance->ICSR & RTC_ICSR_RSF) == 0U)
#else
    while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 810cd56:	e009      	b.n	810cd6c <HAL_RTC_WaitForSynchro+0x2c>
#endif /* TAMP */
    {
      if((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 810cd58:	f7fa fc60 	bl	810761c <HAL_GetTick>
 810cd5c:	4602      	mov	r2, r0
 810cd5e:	68fb      	ldr	r3, [r7, #12]
 810cd60:	1ad3      	subs	r3, r2, r3
 810cd62:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 810cd66:	d901      	bls.n	810cd6c <HAL_RTC_WaitForSynchro+0x2c>
      {
        return HAL_TIMEOUT;
 810cd68:	2303      	movs	r3, #3
 810cd6a:	e007      	b.n	810cd7c <HAL_RTC_WaitForSynchro+0x3c>
    while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 810cd6c:	687b      	ldr	r3, [r7, #4]
 810cd6e:	681b      	ldr	r3, [r3, #0]
 810cd70:	68db      	ldr	r3, [r3, #12]
 810cd72:	f003 0320 	and.w	r3, r3, #32
 810cd76:	2b00      	cmp	r3, #0
 810cd78:	d0ee      	beq.n	810cd58 <HAL_RTC_WaitForSynchro+0x18>
      }
    }

  return HAL_OK;
 810cd7a:	2300      	movs	r3, #0
}
 810cd7c:	4618      	mov	r0, r3
 810cd7e:	3710      	adds	r7, #16
 810cd80:	46bd      	mov	sp, r7
 810cd82:	bd80      	pop	{r7, pc}
 810cd84:	0003ff5f 	.word	0x0003ff5f

0810cd88 <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 810cd88:	b580      	push	{r7, lr}
 810cd8a:	b084      	sub	sp, #16
 810cd8c:	af00      	add	r7, sp, #0
 810cd8e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 810cd90:	2300      	movs	r3, #0
 810cd92:	73fb      	strb	r3, [r7, #15]
    tickstart = HAL_GetTick();

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while (((hrtc->Instance->ICSR & RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
#else
  if ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 810cd94:	687b      	ldr	r3, [r7, #4]
 810cd96:	681b      	ldr	r3, [r3, #0]
 810cd98:	68db      	ldr	r3, [r3, #12]
 810cd9a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 810cd9e:	2b00      	cmp	r3, #0
 810cda0:	d120      	bne.n	810cde4 <RTC_EnterInitMode+0x5c>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 810cda2:	687b      	ldr	r3, [r7, #4]
 810cda4:	681b      	ldr	r3, [r3, #0]
 810cda6:	f04f 32ff 	mov.w	r2, #4294967295
 810cdaa:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 810cdac:	f7fa fc36 	bl	810761c <HAL_GetTick>
 810cdb0:	60b8      	str	r0, [r7, #8]

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while (((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U) && (status != HAL_TIMEOUT))
 810cdb2:	e00d      	b.n	810cdd0 <RTC_EnterInitMode+0x48>
#endif /* TAMP */
    {
      if((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 810cdb4:	f7fa fc32 	bl	810761c <HAL_GetTick>
 810cdb8:	4602      	mov	r2, r0
 810cdba:	68bb      	ldr	r3, [r7, #8]
 810cdbc:	1ad3      	subs	r3, r2, r3
 810cdbe:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 810cdc2:	d905      	bls.n	810cdd0 <RTC_EnterInitMode+0x48>
      {
        status = HAL_TIMEOUT;
 810cdc4:	2303      	movs	r3, #3
 810cdc6:	73fb      	strb	r3, [r7, #15]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 810cdc8:	687b      	ldr	r3, [r7, #4]
 810cdca:	2203      	movs	r2, #3
 810cdcc:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    while (((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U) && (status != HAL_TIMEOUT))
 810cdd0:	687b      	ldr	r3, [r7, #4]
 810cdd2:	681b      	ldr	r3, [r3, #0]
 810cdd4:	68db      	ldr	r3, [r3, #12]
 810cdd6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 810cdda:	2b00      	cmp	r3, #0
 810cddc:	d102      	bne.n	810cde4 <RTC_EnterInitMode+0x5c>
 810cdde:	7bfb      	ldrb	r3, [r7, #15]
 810cde0:	2b03      	cmp	r3, #3
 810cde2:	d1e7      	bne.n	810cdb4 <RTC_EnterInitMode+0x2c>
      }
    }
  }

  return status;
 810cde4:	7bfb      	ldrb	r3, [r7, #15]
}
 810cde6:	4618      	mov	r0, r3
 810cde8:	3710      	adds	r7, #16
 810cdea:	46bd      	mov	sp, r7
 810cdec:	bd80      	pop	{r7, pc}
	...

0810cdf0 <RTC_ExitInitMode>:
  * @brief  Exit the RTC Initialization mode.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 810cdf0:	b580      	push	{r7, lr}
 810cdf2:	b084      	sub	sp, #16
 810cdf4:	af00      	add	r7, sp, #0
 810cdf6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 810cdf8:	2300      	movs	r3, #0
 810cdfa:	73fb      	strb	r3, [r7, #15]

  /* Exit Initialization mode */
#if defined(TAMP)
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);
#else
  CLEAR_BIT(RTC->ISR, RTC_ISR_INITF);
 810cdfc:	4b1a      	ldr	r3, [pc, #104]	; (810ce68 <RTC_ExitInitMode+0x78>)
 810cdfe:	68db      	ldr	r3, [r3, #12]
 810ce00:	4a19      	ldr	r2, [pc, #100]	; (810ce68 <RTC_ExitInitMode+0x78>)
 810ce02:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 810ce06:	60d3      	str	r3, [r2, #12]
#endif /* TAMP */

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 810ce08:	4b17      	ldr	r3, [pc, #92]	; (810ce68 <RTC_ExitInitMode+0x78>)
 810ce0a:	689b      	ldr	r3, [r3, #8]
 810ce0c:	f003 0320 	and.w	r3, r3, #32
 810ce10:	2b00      	cmp	r3, #0
 810ce12:	d10c      	bne.n	810ce2e <RTC_ExitInitMode+0x3e>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 810ce14:	6878      	ldr	r0, [r7, #4]
 810ce16:	f7ff ff93 	bl	810cd40 <HAL_RTC_WaitForSynchro>
 810ce1a:	4603      	mov	r3, r0
 810ce1c:	2b00      	cmp	r3, #0
 810ce1e:	d01e      	beq.n	810ce5e <RTC_ExitInitMode+0x6e>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 810ce20:	687b      	ldr	r3, [r7, #4]
 810ce22:	2203      	movs	r2, #3
 810ce24:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
      status = HAL_TIMEOUT;
 810ce28:	2303      	movs	r3, #3
 810ce2a:	73fb      	strb	r3, [r7, #15]
 810ce2c:	e017      	b.n	810ce5e <RTC_ExitInitMode+0x6e>
    }
  }
  else
  {
    /* Clear BYPSHAD bit */
    CLEAR_BIT(RTC->CR, RTC_CR_BYPSHAD);
 810ce2e:	4b0e      	ldr	r3, [pc, #56]	; (810ce68 <RTC_ExitInitMode+0x78>)
 810ce30:	689b      	ldr	r3, [r3, #8]
 810ce32:	4a0d      	ldr	r2, [pc, #52]	; (810ce68 <RTC_ExitInitMode+0x78>)
 810ce34:	f023 0320 	bic.w	r3, r3, #32
 810ce38:	6093      	str	r3, [r2, #8]
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 810ce3a:	6878      	ldr	r0, [r7, #4]
 810ce3c:	f7ff ff80 	bl	810cd40 <HAL_RTC_WaitForSynchro>
 810ce40:	4603      	mov	r3, r0
 810ce42:	2b00      	cmp	r3, #0
 810ce44:	d005      	beq.n	810ce52 <RTC_ExitInitMode+0x62>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 810ce46:	687b      	ldr	r3, [r7, #4]
 810ce48:	2203      	movs	r2, #3
 810ce4a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
      status = HAL_TIMEOUT;
 810ce4e:	2303      	movs	r3, #3
 810ce50:	73fb      	strb	r3, [r7, #15]
    }
    /* Restore BYPSHAD bit */
    SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 810ce52:	4b05      	ldr	r3, [pc, #20]	; (810ce68 <RTC_ExitInitMode+0x78>)
 810ce54:	689b      	ldr	r3, [r3, #8]
 810ce56:	4a04      	ldr	r2, [pc, #16]	; (810ce68 <RTC_ExitInitMode+0x78>)
 810ce58:	f043 0320 	orr.w	r3, r3, #32
 810ce5c:	6093      	str	r3, [r2, #8]
  }

  return status;
 810ce5e:	7bfb      	ldrb	r3, [r7, #15]
}
 810ce60:	4618      	mov	r0, r3
 810ce62:	3710      	adds	r7, #16
 810ce64:	46bd      	mov	sp, r7
 810ce66:	bd80      	pop	{r7, pc}
 810ce68:	58004000 	.word	0x58004000

0810ce6c <HAL_RTCEx_SetTamper>:
  * @param  hrtc RTC handle
  * @param  sTamper Pointer to Tamper Structure.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_SetTamper(RTC_HandleTypeDef * hrtc, RTC_TamperTypeDef * sTamper)
{
 810ce6c:	b480      	push	{r7}
 810ce6e:	b085      	sub	sp, #20
 810ce70:	af00      	add	r7, sp, #0
 810ce72:	6078      	str	r0, [r7, #4]
 810ce74:	6039      	str	r1, [r7, #0]
  assert_param(IS_RTC_TAMPER_PULLUP_STATE(sTamper->TamperPullUp));
  assert_param(IS_RTC_TAMPER_TIMESTAMPONTAMPER_DETECTION(sTamper->TimeStampOnTamperDetection));
  assert_param(IS_RTC_TAMPER_FILTER_CONFIG_CORRECT(sTamper->Filter, sTamper->Trigger));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 810ce76:	687b      	ldr	r3, [r7, #4]
 810ce78:	f893 3020 	ldrb.w	r3, [r3, #32]
 810ce7c:	2b01      	cmp	r3, #1
 810ce7e:	d101      	bne.n	810ce84 <HAL_RTCEx_SetTamper+0x18>
 810ce80:	2302      	movs	r3, #2
 810ce82:	e0cc      	b.n	810d01e <HAL_RTCEx_SetTamper+0x1b2>
 810ce84:	687b      	ldr	r3, [r7, #4]
 810ce86:	2201      	movs	r2, #1
 810ce88:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 810ce8c:	687b      	ldr	r3, [r7, #4]
 810ce8e:	2202      	movs	r2, #2
 810ce90:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Copy control register into temporary variable */
  tmpreg = hrtc->Instance->TAMPCR;
 810ce94:	687b      	ldr	r3, [r7, #4]
 810ce96:	681b      	ldr	r3, [r3, #0]
 810ce98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 810ce9a:	60fb      	str	r3, [r7, #12]

  /* Enable selected tamper */
  tmpreg |= (sTamper->Tamper);
 810ce9c:	683b      	ldr	r3, [r7, #0]
 810ce9e:	681b      	ldr	r3, [r3, #0]
 810cea0:	68fa      	ldr	r2, [r7, #12]
 810cea2:	4313      	orrs	r3, r2
 810cea4:	60fb      	str	r3, [r7, #12]

  /* Configure the bit (located just next to the tamper enable bit) */
  if ((sTamper->Trigger == RTC_TAMPERTRIGGER_HIGHLEVEL) || (sTamper->Trigger == RTC_TAMPERTRIGGER_FALLINGEDGE))
 810cea6:	683b      	ldr	r3, [r7, #0]
 810cea8:	689b      	ldr	r3, [r3, #8]
 810ceaa:	2b08      	cmp	r3, #8
 810ceac:	d003      	beq.n	810ceb6 <HAL_RTCEx_SetTamper+0x4a>
 810ceae:	683b      	ldr	r3, [r7, #0]
 810ceb0:	689b      	ldr	r3, [r3, #8]
 810ceb2:	2b02      	cmp	r3, #2
 810ceb4:	d106      	bne.n	810cec4 <HAL_RTCEx_SetTamper+0x58>
  {
    /* Set the tamper trigger bit */
    tmpreg |= (uint32_t)(sTamper->Tamper << 1U);
 810ceb6:	683b      	ldr	r3, [r7, #0]
 810ceb8:	681b      	ldr	r3, [r3, #0]
 810ceba:	005b      	lsls	r3, r3, #1
 810cebc:	68fa      	ldr	r2, [r7, #12]
 810cebe:	4313      	orrs	r3, r2
 810cec0:	60fb      	str	r3, [r7, #12]
 810cec2:	e006      	b.n	810ced2 <HAL_RTCEx_SetTamper+0x66>
  }
  else
  {
    /* Clear the tamper trigger bit */
    tmpreg &= (uint32_t)~(sTamper->Tamper << 1U);
 810cec4:	683b      	ldr	r3, [r7, #0]
 810cec6:	681b      	ldr	r3, [r3, #0]
 810cec8:	005b      	lsls	r3, r3, #1
 810ceca:	43db      	mvns	r3, r3
 810cecc:	68fa      	ldr	r2, [r7, #12]
 810cece:	4013      	ands	r3, r2
 810ced0:	60fb      	str	r3, [r7, #12]
  }

  /* Configure the tamper backup registers erasure bit */
  if (sTamper->NoErase != RTC_TAMPER_ERASE_BACKUP_ENABLE)
 810ced2:	683b      	ldr	r3, [r7, #0]
 810ced4:	68db      	ldr	r3, [r3, #12]
 810ced6:	2b00      	cmp	r3, #0
 810ced8:	d01e      	beq.n	810cf18 <HAL_RTCEx_SetTamper+0xac>
  {
    if ((sTamper->Tamper & RTC_TAMPER_1) != 0U)
 810ceda:	683b      	ldr	r3, [r7, #0]
 810cedc:	681b      	ldr	r3, [r3, #0]
 810cede:	f003 0301 	and.w	r3, r3, #1
 810cee2:	2b00      	cmp	r3, #0
 810cee4:	d003      	beq.n	810ceee <HAL_RTCEx_SetTamper+0x82>
    {
      tmpreg |= (uint32_t)(RTC_TAMPCR_TAMP1NOERASE);
 810cee6:	68fb      	ldr	r3, [r7, #12]
 810cee8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 810ceec:	60fb      	str	r3, [r7, #12]
    }
    if ((sTamper->Tamper & RTC_TAMPER_2) != 0U)
 810ceee:	683b      	ldr	r3, [r7, #0]
 810cef0:	681b      	ldr	r3, [r3, #0]
 810cef2:	f003 0308 	and.w	r3, r3, #8
 810cef6:	2b00      	cmp	r3, #0
 810cef8:	d003      	beq.n	810cf02 <HAL_RTCEx_SetTamper+0x96>
    {
      tmpreg |= (uint32_t)(RTC_TAMPCR_TAMP2NOERASE);
 810cefa:	68fb      	ldr	r3, [r7, #12]
 810cefc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 810cf00:	60fb      	str	r3, [r7, #12]
    }
    if ((sTamper->Tamper & RTC_TAMPER_3) != 0U)
 810cf02:	683b      	ldr	r3, [r7, #0]
 810cf04:	681b      	ldr	r3, [r3, #0]
 810cf06:	f003 0320 	and.w	r3, r3, #32
 810cf0a:	2b00      	cmp	r3, #0
 810cf0c:	d022      	beq.n	810cf54 <HAL_RTCEx_SetTamper+0xe8>
    {
      tmpreg |= (uint32_t)(RTC_TAMPCR_TAMP3NOERASE);
 810cf0e:	68fb      	ldr	r3, [r7, #12]
 810cf10:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 810cf14:	60fb      	str	r3, [r7, #12]
 810cf16:	e01d      	b.n	810cf54 <HAL_RTCEx_SetTamper+0xe8>
    }
  }
  else
  {
    if ((sTamper->Tamper & RTC_TAMPER_1) != 0U)
 810cf18:	683b      	ldr	r3, [r7, #0]
 810cf1a:	681b      	ldr	r3, [r3, #0]
 810cf1c:	f003 0301 	and.w	r3, r3, #1
 810cf20:	2b00      	cmp	r3, #0
 810cf22:	d003      	beq.n	810cf2c <HAL_RTCEx_SetTamper+0xc0>
    {
      tmpreg &= (uint32_t)~(RTC_TAMPCR_TAMP1NOERASE);
 810cf24:	68fb      	ldr	r3, [r7, #12]
 810cf26:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 810cf2a:	60fb      	str	r3, [r7, #12]
    }
    if ((sTamper->Tamper & RTC_TAMPER_2) != 0U)
 810cf2c:	683b      	ldr	r3, [r7, #0]
 810cf2e:	681b      	ldr	r3, [r3, #0]
 810cf30:	f003 0308 	and.w	r3, r3, #8
 810cf34:	2b00      	cmp	r3, #0
 810cf36:	d003      	beq.n	810cf40 <HAL_RTCEx_SetTamper+0xd4>
    {
      tmpreg &= (uint32_t)~(RTC_TAMPCR_TAMP2NOERASE);
 810cf38:	68fb      	ldr	r3, [r7, #12]
 810cf3a:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 810cf3e:	60fb      	str	r3, [r7, #12]
    }
    if ((sTamper->Tamper & RTC_TAMPER_3) != 0U)
 810cf40:	683b      	ldr	r3, [r7, #0]
 810cf42:	681b      	ldr	r3, [r3, #0]
 810cf44:	f003 0320 	and.w	r3, r3, #32
 810cf48:	2b00      	cmp	r3, #0
 810cf4a:	d003      	beq.n	810cf54 <HAL_RTCEx_SetTamper+0xe8>
    {
      tmpreg &= (uint32_t)~(RTC_TAMPCR_TAMP3NOERASE);
 810cf4c:	68fb      	ldr	r3, [r7, #12]
 810cf4e:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 810cf52:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Configure the tamper flags masking bit */
  if (sTamper->MaskFlag != RTC_TAMPERMASK_FLAG_DISABLE)
 810cf54:	683b      	ldr	r3, [r7, #0]
 810cf56:	691b      	ldr	r3, [r3, #16]
 810cf58:	2b00      	cmp	r3, #0
 810cf5a:	d01e      	beq.n	810cf9a <HAL_RTCEx_SetTamper+0x12e>
  {
    if ((sTamper->Tamper & RTC_TAMPER_1) != 0U)
 810cf5c:	683b      	ldr	r3, [r7, #0]
 810cf5e:	681b      	ldr	r3, [r3, #0]
 810cf60:	f003 0301 	and.w	r3, r3, #1
 810cf64:	2b00      	cmp	r3, #0
 810cf66:	d003      	beq.n	810cf70 <HAL_RTCEx_SetTamper+0x104>
    {
      tmpreg |= (uint32_t)(RTC_TAMPCR_TAMP1MF);
 810cf68:	68fb      	ldr	r3, [r7, #12]
 810cf6a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 810cf6e:	60fb      	str	r3, [r7, #12]
    }
    if ((sTamper->Tamper & RTC_TAMPER_2) != 0U)
 810cf70:	683b      	ldr	r3, [r7, #0]
 810cf72:	681b      	ldr	r3, [r3, #0]
 810cf74:	f003 0308 	and.w	r3, r3, #8
 810cf78:	2b00      	cmp	r3, #0
 810cf7a:	d003      	beq.n	810cf84 <HAL_RTCEx_SetTamper+0x118>
    {
      tmpreg |= (uint32_t)(RTC_TAMPCR_TAMP2MF);
 810cf7c:	68fb      	ldr	r3, [r7, #12]
 810cf7e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 810cf82:	60fb      	str	r3, [r7, #12]
    }
    if ((sTamper->Tamper & RTC_TAMPER_3) != 0U)
 810cf84:	683b      	ldr	r3, [r7, #0]
 810cf86:	681b      	ldr	r3, [r3, #0]
 810cf88:	f003 0320 	and.w	r3, r3, #32
 810cf8c:	2b00      	cmp	r3, #0
 810cf8e:	d022      	beq.n	810cfd6 <HAL_RTCEx_SetTamper+0x16a>
    {
      tmpreg |= (uint32_t)(RTC_TAMPCR_TAMP3MF);
 810cf90:	68fb      	ldr	r3, [r7, #12]
 810cf92:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 810cf96:	60fb      	str	r3, [r7, #12]
 810cf98:	e01d      	b.n	810cfd6 <HAL_RTCEx_SetTamper+0x16a>
    }
  }
  else
  {
    if ((sTamper->Tamper & RTC_TAMPER_1) != 0U)
 810cf9a:	683b      	ldr	r3, [r7, #0]
 810cf9c:	681b      	ldr	r3, [r3, #0]
 810cf9e:	f003 0301 	and.w	r3, r3, #1
 810cfa2:	2b00      	cmp	r3, #0
 810cfa4:	d003      	beq.n	810cfae <HAL_RTCEx_SetTamper+0x142>
    {
      tmpreg &= (uint32_t)~(RTC_TAMPCR_TAMP1MF);
 810cfa6:	68fb      	ldr	r3, [r7, #12]
 810cfa8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 810cfac:	60fb      	str	r3, [r7, #12]
    }
    if ((sTamper->Tamper & RTC_TAMPER_2) != 0U)
 810cfae:	683b      	ldr	r3, [r7, #0]
 810cfb0:	681b      	ldr	r3, [r3, #0]
 810cfb2:	f003 0308 	and.w	r3, r3, #8
 810cfb6:	2b00      	cmp	r3, #0
 810cfb8:	d003      	beq.n	810cfc2 <HAL_RTCEx_SetTamper+0x156>
    {
      tmpreg &= (uint32_t)~(RTC_TAMPCR_TAMP2MF);
 810cfba:	68fb      	ldr	r3, [r7, #12]
 810cfbc:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 810cfc0:	60fb      	str	r3, [r7, #12]
    }
    if ((sTamper->Tamper & RTC_TAMPER_3) != 0U)
 810cfc2:	683b      	ldr	r3, [r7, #0]
 810cfc4:	681b      	ldr	r3, [r3, #0]
 810cfc6:	f003 0320 	and.w	r3, r3, #32
 810cfca:	2b00      	cmp	r3, #0
 810cfcc:	d003      	beq.n	810cfd6 <HAL_RTCEx_SetTamper+0x16a>
    {
      tmpreg &= (uint32_t)~(RTC_TAMPCR_TAMP3MF);
 810cfce:	68fb      	ldr	r3, [r7, #12]
 810cfd0:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 810cfd4:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Clearing remaining fields before setting them */
  tmpreg &= ~(RTC_TAMPERFILTER_MASK            | RTC_TAMPERSAMPLINGFREQ_RTCCLK_MASK | \
 810cfd6:	68fb      	ldr	r3, [r7, #12]
 810cfd8:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 810cfdc:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 810cfe0:	60fb      	str	r3, [r7, #12]
              RTC_TAMPERPRECHARGEDURATION_MASK | RTC_TAMPER_PULLUP_MASK             | \
              RTC_TIMESTAMPONTAMPERDETECTION_MASK);

  /* Set remaining parameters of desired configuration into temporary variable */
  tmpreg |= ((uint32_t)sTamper->Filter            | \
 810cfe2:	683b      	ldr	r3, [r7, #0]
 810cfe4:	695a      	ldr	r2, [r3, #20]
             (uint32_t)sTamper->SamplingFrequency | \
 810cfe6:	683b      	ldr	r3, [r7, #0]
 810cfe8:	699b      	ldr	r3, [r3, #24]
  tmpreg |= ((uint32_t)sTamper->Filter            | \
 810cfea:	431a      	orrs	r2, r3
             (uint32_t)sTamper->PrechargeDuration | \
 810cfec:	683b      	ldr	r3, [r7, #0]
 810cfee:	69db      	ldr	r3, [r3, #28]
             (uint32_t)sTamper->SamplingFrequency | \
 810cff0:	431a      	orrs	r2, r3
             (uint32_t)sTamper->TamperPullUp      | \
 810cff2:	683b      	ldr	r3, [r7, #0]
 810cff4:	6a1b      	ldr	r3, [r3, #32]
             (uint32_t)sTamper->PrechargeDuration | \
 810cff6:	431a      	orrs	r2, r3
             (uint32_t)sTamper->TimeStampOnTamperDetection);
 810cff8:	683b      	ldr	r3, [r7, #0]
 810cffa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
             (uint32_t)sTamper->TamperPullUp      | \
 810cffc:	4313      	orrs	r3, r2
  tmpreg |= ((uint32_t)sTamper->Filter            | \
 810cffe:	68fa      	ldr	r2, [r7, #12]
 810d000:	4313      	orrs	r3, r2
 810d002:	60fb      	str	r3, [r7, #12]

  /* Copy desired configuration into configuration register */
  hrtc->Instance->TAMPCR = tmpreg;
 810d004:	687b      	ldr	r3, [r7, #4]
 810d006:	681b      	ldr	r3, [r3, #0]
 810d008:	68fa      	ldr	r2, [r7, #12]
 810d00a:	641a      	str	r2, [r3, #64]	; 0x40

  hrtc->State = HAL_RTC_STATE_READY;
 810d00c:	687b      	ldr	r3, [r7, #4]
 810d00e:	2201      	movs	r2, #1
 810d010:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 810d014:	687b      	ldr	r3, [r7, #4]
 810d016:	2200      	movs	r2, #0
 810d018:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 810d01c:	2300      	movs	r3, #0
}
 810d01e:	4618      	mov	r0, r3
 810d020:	3714      	adds	r7, #20
 810d022:	46bd      	mov	sp, r7
 810d024:	f85d 7b04 	ldr.w	r7, [sp], #4
 810d028:	4770      	bx	lr
	...

0810d02c <HAL_SAI_Init>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *              the configuration information for SAI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_Init(SAI_HandleTypeDef *hsai)
{
 810d02c:	b580      	push	{r7, lr}
 810d02e:	b08a      	sub	sp, #40	; 0x28
 810d030:	af00      	add	r7, sp, #0
 810d032:	6078      	str	r0, [r7, #4]
  uint32_t ckstr_bits;
  uint32_t syncen_bits;
  SAI_TypeDef *SaiBaseAddress;

  /* Check the SAI handle allocation */
  if (hsai == NULL)
 810d034:	687b      	ldr	r3, [r7, #4]
 810d036:	2b00      	cmp	r3, #0
 810d038:	d101      	bne.n	810d03e <HAL_SAI_Init+0x12>
  {
    return HAL_ERROR;
 810d03a:	2301      	movs	r3, #1
 810d03c:	e290      	b.n	810d560 <HAL_SAI_Init+0x534>
  assert_param(IS_SAI_BLOCK_FIRST_BIT(hsai->Init.FirstBit));
  assert_param(IS_SAI_BLOCK_CLOCK_STROBING(hsai->Init.ClockStrobing));
  assert_param(IS_SAI_BLOCK_SYNCHRO(hsai->Init.Synchro));
#if defined(SAI_VER_V2_X)
  /* SAI Peripheral version depends on STM32H7 device revision ID */
  if (HAL_GetREVID() >= REV_ID_B) /* STM32H7xx Rev.B and above */
 810d03e:	f7fa fb1d 	bl	810767c <HAL_GetREVID>
  assert_param(IS_SAI_BLOCK_SLOT_NUMBER(hsai->SlotInit.SlotNumber));
  assert_param(IS_SAI_SLOT_ACTIVE(hsai->SlotInit.SlotActive));

  /* Check the SAI PDM parameters */
  assert_param(IS_FUNCTIONAL_STATE(hsai->Init.PdmInit.Activation));
  if (hsai->Init.PdmInit.Activation == ENABLE)
 810d042:	687b      	ldr	r3, [r7, #4]
 810d044:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 810d048:	2b01      	cmp	r3, #1
 810d04a:	d113      	bne.n	810d074 <HAL_SAI_Init+0x48>
  {
    assert_param(IS_SAI_PDM_MIC_PAIRS_NUMBER(hsai->Init.PdmInit.MicPairsNbr));
    assert_param(IS_SAI_PDM_CLOCK_ENABLE(hsai->Init.PdmInit.ClockEnable));
    /* Check that SAI sub-block is SAI1 or SAI4 sub-block A, in master RX mode with free protocol */
#if defined(SAI4)
    if (((hsai->Instance != SAI1_Block_A) && (hsai->Instance != SAI4_Block_A)) ||
 810d04c:	687b      	ldr	r3, [r7, #4]
 810d04e:	681b      	ldr	r3, [r3, #0]
 810d050:	4a96      	ldr	r2, [pc, #600]	; (810d2ac <HAL_SAI_Init+0x280>)
 810d052:	4293      	cmp	r3, r2
 810d054:	d004      	beq.n	810d060 <HAL_SAI_Init+0x34>
 810d056:	687b      	ldr	r3, [r7, #4]
 810d058:	681b      	ldr	r3, [r3, #0]
 810d05a:	4a95      	ldr	r2, [pc, #596]	; (810d2b0 <HAL_SAI_Init+0x284>)
 810d05c:	4293      	cmp	r3, r2
 810d05e:	d107      	bne.n	810d070 <HAL_SAI_Init+0x44>
         (hsai->Init.AudioMode != SAI_MODEMASTER_RX) ||
 810d060:	687b      	ldr	r3, [r7, #4]
 810d062:	685b      	ldr	r3, [r3, #4]
    if (((hsai->Instance != SAI1_Block_A) && (hsai->Instance != SAI4_Block_A)) ||
 810d064:	2b01      	cmp	r3, #1
 810d066:	d103      	bne.n	810d070 <HAL_SAI_Init+0x44>
         (hsai->Init.Protocol != SAI_FREE_PROTOCOL))
 810d068:	687b      	ldr	r3, [r7, #4]
 810d06a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
         (hsai->Init.AudioMode != SAI_MODEMASTER_RX) ||
 810d06c:	2b00      	cmp	r3, #0
 810d06e:	d001      	beq.n	810d074 <HAL_SAI_Init+0x48>
    {
      return HAL_ERROR;
 810d070:	2301      	movs	r3, #1
 810d072:	e275      	b.n	810d560 <HAL_SAI_Init+0x534>
    }
#endif /* SAI4 */
  }

  /* Get the SAI base address according to the SAI handle */
  if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI1_Block_B))
 810d074:	687b      	ldr	r3, [r7, #4]
 810d076:	681b      	ldr	r3, [r3, #0]
 810d078:	4a8c      	ldr	r2, [pc, #560]	; (810d2ac <HAL_SAI_Init+0x280>)
 810d07a:	4293      	cmp	r3, r2
 810d07c:	d004      	beq.n	810d088 <HAL_SAI_Init+0x5c>
 810d07e:	687b      	ldr	r3, [r7, #4]
 810d080:	681b      	ldr	r3, [r3, #0]
 810d082:	4a8c      	ldr	r2, [pc, #560]	; (810d2b4 <HAL_SAI_Init+0x288>)
 810d084:	4293      	cmp	r3, r2
 810d086:	d102      	bne.n	810d08e <HAL_SAI_Init+0x62>
  {
    SaiBaseAddress = SAI1;
 810d088:	4b8b      	ldr	r3, [pc, #556]	; (810d2b8 <HAL_SAI_Init+0x28c>)
 810d08a:	61bb      	str	r3, [r7, #24]
 810d08c:	e028      	b.n	810d0e0 <HAL_SAI_Init+0xb4>
  }
#if defined(SAI2)
  else if ((hsai->Instance == SAI2_Block_A) || (hsai->Instance == SAI2_Block_B))
 810d08e:	687b      	ldr	r3, [r7, #4]
 810d090:	681b      	ldr	r3, [r3, #0]
 810d092:	4a8a      	ldr	r2, [pc, #552]	; (810d2bc <HAL_SAI_Init+0x290>)
 810d094:	4293      	cmp	r3, r2
 810d096:	d004      	beq.n	810d0a2 <HAL_SAI_Init+0x76>
 810d098:	687b      	ldr	r3, [r7, #4]
 810d09a:	681b      	ldr	r3, [r3, #0]
 810d09c:	4a88      	ldr	r2, [pc, #544]	; (810d2c0 <HAL_SAI_Init+0x294>)
 810d09e:	4293      	cmp	r3, r2
 810d0a0:	d102      	bne.n	810d0a8 <HAL_SAI_Init+0x7c>
  {
    SaiBaseAddress = SAI2;
 810d0a2:	4b88      	ldr	r3, [pc, #544]	; (810d2c4 <HAL_SAI_Init+0x298>)
 810d0a4:	61bb      	str	r3, [r7, #24]
 810d0a6:	e01b      	b.n	810d0e0 <HAL_SAI_Init+0xb4>
  }
#endif /* SAI2 */
#if defined(SAI3)
  else if ((hsai->Instance == SAI3_Block_A) || (hsai->Instance == SAI3_Block_B))
 810d0a8:	687b      	ldr	r3, [r7, #4]
 810d0aa:	681b      	ldr	r3, [r3, #0]
 810d0ac:	4a86      	ldr	r2, [pc, #536]	; (810d2c8 <HAL_SAI_Init+0x29c>)
 810d0ae:	4293      	cmp	r3, r2
 810d0b0:	d004      	beq.n	810d0bc <HAL_SAI_Init+0x90>
 810d0b2:	687b      	ldr	r3, [r7, #4]
 810d0b4:	681b      	ldr	r3, [r3, #0]
 810d0b6:	4a85      	ldr	r2, [pc, #532]	; (810d2cc <HAL_SAI_Init+0x2a0>)
 810d0b8:	4293      	cmp	r3, r2
 810d0ba:	d102      	bne.n	810d0c2 <HAL_SAI_Init+0x96>
  {
    SaiBaseAddress = SAI3;
 810d0bc:	4b84      	ldr	r3, [pc, #528]	; (810d2d0 <HAL_SAI_Init+0x2a4>)
 810d0be:	61bb      	str	r3, [r7, #24]
 810d0c0:	e00e      	b.n	810d0e0 <HAL_SAI_Init+0xb4>
  }
#endif /* SAI3 */
#if defined(SAI4)
  else if ((hsai->Instance == SAI4_Block_A) || (hsai->Instance == SAI4_Block_B))
 810d0c2:	687b      	ldr	r3, [r7, #4]
 810d0c4:	681b      	ldr	r3, [r3, #0]
 810d0c6:	4a7a      	ldr	r2, [pc, #488]	; (810d2b0 <HAL_SAI_Init+0x284>)
 810d0c8:	4293      	cmp	r3, r2
 810d0ca:	d004      	beq.n	810d0d6 <HAL_SAI_Init+0xaa>
 810d0cc:	687b      	ldr	r3, [r7, #4]
 810d0ce:	681b      	ldr	r3, [r3, #0]
 810d0d0:	4a80      	ldr	r2, [pc, #512]	; (810d2d4 <HAL_SAI_Init+0x2a8>)
 810d0d2:	4293      	cmp	r3, r2
 810d0d4:	d102      	bne.n	810d0dc <HAL_SAI_Init+0xb0>
  {
    SaiBaseAddress = SAI4;
 810d0d6:	4b80      	ldr	r3, [pc, #512]	; (810d2d8 <HAL_SAI_Init+0x2ac>)
 810d0d8:	61bb      	str	r3, [r7, #24]
 810d0da:	e001      	b.n	810d0e0 <HAL_SAI_Init+0xb4>
  }
#endif /* SAI4 */
  else
  {
    return HAL_ERROR;
 810d0dc:	2301      	movs	r3, #1
 810d0de:	e23f      	b.n	810d560 <HAL_SAI_Init+0x534>
  }

  if (hsai->State == HAL_SAI_STATE_RESET)
 810d0e0:	687b      	ldr	r3, [r7, #4]
 810d0e2:	f893 3091 	ldrb.w	r3, [r3, #145]	; 0x91
 810d0e6:	b2db      	uxtb	r3, r3
 810d0e8:	2b00      	cmp	r3, #0
 810d0ea:	d106      	bne.n	810d0fa <HAL_SAI_Init+0xce>
  {
    /* Allocate lock resource and initialize it */
    hsai->Lock = HAL_UNLOCKED;
 810d0ec:	687b      	ldr	r3, [r7, #4]
 810d0ee:	2200      	movs	r2, #0
 810d0f0:	f883 2090 	strb.w	r2, [r3, #144]	; 0x90
      hsai->MspInitCallback = HAL_SAI_MspInit;
    }
    hsai->MspInitCallback(hsai);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_SAI_MspInit(hsai);
 810d0f4:	6878      	ldr	r0, [r7, #4]
 810d0f6:	f7f5 f9c1 	bl	810247c <HAL_SAI_MspInit>
#endif
  }

  /* Disable the selected SAI peripheral */
  if(SAI_Disable(hsai) != HAL_OK)
 810d0fa:	6878      	ldr	r0, [r7, #4]
 810d0fc:	f000 fa40 	bl	810d580 <SAI_Disable>
 810d100:	4603      	mov	r3, r0
 810d102:	2b00      	cmp	r3, #0
 810d104:	d001      	beq.n	810d10a <HAL_SAI_Init+0xde>
  {
    return HAL_ERROR;
 810d106:	2301      	movs	r3, #1
 810d108:	e22a      	b.n	810d560 <HAL_SAI_Init+0x534>
  }

  hsai->State = HAL_SAI_STATE_BUSY;
 810d10a:	687b      	ldr	r3, [r7, #4]
 810d10c:	2202      	movs	r2, #2
 810d10e:	f883 2091 	strb.w	r2, [r3, #145]	; 0x91

  /* SAI Block Synchro Configuration -----------------------------------------*/
  /* This setting must be done with both audio block (A & B) disabled         */
  switch (hsai->Init.SynchroExt)
 810d112:	687b      	ldr	r3, [r7, #4]
 810d114:	68db      	ldr	r3, [r3, #12]
 810d116:	2b02      	cmp	r3, #2
 810d118:	d00c      	beq.n	810d134 <HAL_SAI_Init+0x108>
 810d11a:	2b02      	cmp	r3, #2
 810d11c:	d80d      	bhi.n	810d13a <HAL_SAI_Init+0x10e>
 810d11e:	2b00      	cmp	r3, #0
 810d120:	d002      	beq.n	810d128 <HAL_SAI_Init+0xfc>
 810d122:	2b01      	cmp	r3, #1
 810d124:	d003      	beq.n	810d12e <HAL_SAI_Init+0x102>
 810d126:	e008      	b.n	810d13a <HAL_SAI_Init+0x10e>
  {
    case SAI_SYNCEXT_DISABLE :
      tmpregisterGCR = 0;
 810d128:	2300      	movs	r3, #0
 810d12a:	627b      	str	r3, [r7, #36]	; 0x24
      break;
 810d12c:	e008      	b.n	810d140 <HAL_SAI_Init+0x114>
    case SAI_SYNCEXT_OUTBLOCKA_ENABLE :
      tmpregisterGCR = SAI_GCR_SYNCOUT_0;
 810d12e:	2310      	movs	r3, #16
 810d130:	627b      	str	r3, [r7, #36]	; 0x24
      break;
 810d132:	e005      	b.n	810d140 <HAL_SAI_Init+0x114>
    case SAI_SYNCEXT_OUTBLOCKB_ENABLE :
      tmpregisterGCR = SAI_GCR_SYNCOUT_1;
 810d134:	2320      	movs	r3, #32
 810d136:	627b      	str	r3, [r7, #36]	; 0x24
      break;
 810d138:	e002      	b.n	810d140 <HAL_SAI_Init+0x114>
    default:
      tmpregisterGCR = 0;
 810d13a:	2300      	movs	r3, #0
 810d13c:	627b      	str	r3, [r7, #36]	; 0x24
      break;
 810d13e:	bf00      	nop
  }

  switch (hsai->Init.Synchro)
 810d140:	687b      	ldr	r3, [r7, #4]
 810d142:	689b      	ldr	r3, [r3, #8]
 810d144:	2b05      	cmp	r3, #5
 810d146:	d832      	bhi.n	810d1ae <HAL_SAI_Init+0x182>
 810d148:	a201      	add	r2, pc, #4	; (adr r2, 810d150 <HAL_SAI_Init+0x124>)
 810d14a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 810d14e:	bf00      	nop
 810d150:	0810d169 	.word	0x0810d169
 810d154:	0810d16f 	.word	0x0810d16f
 810d158:	0810d177 	.word	0x0810d177
 810d15c:	0810d17f 	.word	0x0810d17f
 810d160:	0810d18f 	.word	0x0810d18f
 810d164:	0810d19f 	.word	0x0810d19f
  {
    case SAI_ASYNCHRONOUS :
      syncen_bits = 0;
 810d168:	2300      	movs	r3, #0
 810d16a:	61fb      	str	r3, [r7, #28]
      break;
 810d16c:	e022      	b.n	810d1b4 <HAL_SAI_Init+0x188>
    case SAI_SYNCHRONOUS :
      syncen_bits = SAI_xCR1_SYNCEN_0;
 810d16e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 810d172:	61fb      	str	r3, [r7, #28]
      break;
 810d174:	e01e      	b.n	810d1b4 <HAL_SAI_Init+0x188>
    case SAI_SYNCHRONOUS_EXT_SAI1 :
      syncen_bits = SAI_xCR1_SYNCEN_1;
 810d176:	f44f 6300 	mov.w	r3, #2048	; 0x800
 810d17a:	61fb      	str	r3, [r7, #28]
      break;
 810d17c:	e01a      	b.n	810d1b4 <HAL_SAI_Init+0x188>
#if defined(SAI2)
    case SAI_SYNCHRONOUS_EXT_SAI2 :
      syncen_bits = SAI_xCR1_SYNCEN_1;
 810d17e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 810d182:	61fb      	str	r3, [r7, #28]
      tmpregisterGCR |= SAI_GCR_SYNCIN_0;
 810d184:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 810d186:	f043 0301 	orr.w	r3, r3, #1
 810d18a:	627b      	str	r3, [r7, #36]	; 0x24
      break;
 810d18c:	e012      	b.n	810d1b4 <HAL_SAI_Init+0x188>
#endif /* SAI2 */
#if defined(SAI3)
    case SAI_SYNCHRONOUS_EXT_SAI3 :
      syncen_bits = SAI_xCR1_SYNCEN_1;
 810d18e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 810d192:	61fb      	str	r3, [r7, #28]
      tmpregisterGCR |= SAI_GCR_SYNCIN_1;
 810d194:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 810d196:	f043 0302 	orr.w	r3, r3, #2
 810d19a:	627b      	str	r3, [r7, #36]	; 0x24
      break;
 810d19c:	e00a      	b.n	810d1b4 <HAL_SAI_Init+0x188>
#endif /* SAI3 */
#if defined(SAI4)
    case SAI_SYNCHRONOUS_EXT_SAI4 :
      syncen_bits = SAI_xCR1_SYNCEN_1;
 810d19e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 810d1a2:	61fb      	str	r3, [r7, #28]
      tmpregisterGCR |= (SAI_GCR_SYNCIN_1 | SAI_GCR_SYNCIN_0);
 810d1a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 810d1a6:	f043 0303 	orr.w	r3, r3, #3
 810d1aa:	627b      	str	r3, [r7, #36]	; 0x24
      break;
 810d1ac:	e002      	b.n	810d1b4 <HAL_SAI_Init+0x188>
#endif /* SAI4 */
    default:
      syncen_bits = 0;
 810d1ae:	2300      	movs	r3, #0
 810d1b0:	61fb      	str	r3, [r7, #28]
      break;
 810d1b2:	bf00      	nop
  }

  /* Set the SAI Block Synchro Configuration */
  SaiBaseAddress->GCR = tmpregisterGCR;
 810d1b4:	69bb      	ldr	r3, [r7, #24]
 810d1b6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 810d1b8:	601a      	str	r2, [r3, #0]

  if (hsai->Init.AudioFrequency != SAI_AUDIO_FREQUENCY_MCKDIV)
 810d1ba:	687b      	ldr	r3, [r7, #4]
 810d1bc:	6a1b      	ldr	r3, [r3, #32]
 810d1be:	2b00      	cmp	r3, #0
 810d1c0:	f000 80c5 	beq.w	810d34e <HAL_SAI_Init+0x322>
  {
    uint32_t freq = 0;
 810d1c4:	2300      	movs	r3, #0
 810d1c6:	617b      	str	r3, [r7, #20]
    uint32_t tmpval;

    /* In this case, the MCKDIV value is calculated to get AudioFrequency */
    if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI1_Block_B))
 810d1c8:	687b      	ldr	r3, [r7, #4]
 810d1ca:	681b      	ldr	r3, [r3, #0]
 810d1cc:	4a37      	ldr	r2, [pc, #220]	; (810d2ac <HAL_SAI_Init+0x280>)
 810d1ce:	4293      	cmp	r3, r2
 810d1d0:	d004      	beq.n	810d1dc <HAL_SAI_Init+0x1b0>
 810d1d2:	687b      	ldr	r3, [r7, #4]
 810d1d4:	681b      	ldr	r3, [r3, #0]
 810d1d6:	4a37      	ldr	r2, [pc, #220]	; (810d2b4 <HAL_SAI_Init+0x288>)
 810d1d8:	4293      	cmp	r3, r2
 810d1da:	d106      	bne.n	810d1ea <HAL_SAI_Init+0x1be>
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI1);
 810d1dc:	f44f 7080 	mov.w	r0, #256	; 0x100
 810d1e0:	f04f 0100 	mov.w	r1, #0
 810d1e4:	f7fe fa36 	bl	810b654 <HAL_RCCEx_GetPeriphCLKFreq>
 810d1e8:	6178      	str	r0, [r7, #20]
    }

#if defined(SAI2)
#if defined(RCC_PERIPHCLK_SAI2)
    if ((hsai->Instance == SAI2_Block_A) || (hsai->Instance == SAI2_Block_B))
 810d1ea:	687b      	ldr	r3, [r7, #4]
 810d1ec:	681b      	ldr	r3, [r3, #0]
 810d1ee:	4a33      	ldr	r2, [pc, #204]	; (810d2bc <HAL_SAI_Init+0x290>)
 810d1f0:	4293      	cmp	r3, r2
 810d1f2:	d004      	beq.n	810d1fe <HAL_SAI_Init+0x1d2>
 810d1f4:	687b      	ldr	r3, [r7, #4]
 810d1f6:	681b      	ldr	r3, [r3, #0]
 810d1f8:	4a31      	ldr	r2, [pc, #196]	; (810d2c0 <HAL_SAI_Init+0x294>)
 810d1fa:	4293      	cmp	r3, r2
 810d1fc:	d106      	bne.n	810d20c <HAL_SAI_Init+0x1e0>
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI2);
 810d1fe:	f44f 7000 	mov.w	r0, #512	; 0x200
 810d202:	f04f 0100 	mov.w	r1, #0
 810d206:	f7fe fa25 	bl	810b654 <HAL_RCCEx_GetPeriphCLKFreq>
 810d20a:	6178      	str	r0, [r7, #20]
    }
#endif /* RCC_PERIPHCLK_SAI2 */
#endif /* SAI2 */

#if defined(SAI3)
    if ((hsai->Instance == SAI3_Block_A) || (hsai->Instance == SAI3_Block_B))
 810d20c:	687b      	ldr	r3, [r7, #4]
 810d20e:	681b      	ldr	r3, [r3, #0]
 810d210:	4a2d      	ldr	r2, [pc, #180]	; (810d2c8 <HAL_SAI_Init+0x29c>)
 810d212:	4293      	cmp	r3, r2
 810d214:	d004      	beq.n	810d220 <HAL_SAI_Init+0x1f4>
 810d216:	687b      	ldr	r3, [r7, #4]
 810d218:	681b      	ldr	r3, [r3, #0]
 810d21a:	4a2c      	ldr	r2, [pc, #176]	; (810d2cc <HAL_SAI_Init+0x2a0>)
 810d21c:	4293      	cmp	r3, r2
 810d21e:	d106      	bne.n	810d22e <HAL_SAI_Init+0x202>
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI3);
 810d220:	f44f 7000 	mov.w	r0, #512	; 0x200
 810d224:	f04f 0100 	mov.w	r1, #0
 810d228:	f7fe fa14 	bl	810b654 <HAL_RCCEx_GetPeriphCLKFreq>
 810d22c:	6178      	str	r0, [r7, #20]
    }
#endif /* SAI3 */
#if defined(SAI4)
    if (hsai->Instance == SAI4_Block_A)
 810d22e:	687b      	ldr	r3, [r7, #4]
 810d230:	681b      	ldr	r3, [r3, #0]
 810d232:	4a1f      	ldr	r2, [pc, #124]	; (810d2b0 <HAL_SAI_Init+0x284>)
 810d234:	4293      	cmp	r3, r2
 810d236:	d106      	bne.n	810d246 <HAL_SAI_Init+0x21a>
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI4A);
 810d238:	f44f 6080 	mov.w	r0, #1024	; 0x400
 810d23c:	f04f 0100 	mov.w	r1, #0
 810d240:	f7fe fa08 	bl	810b654 <HAL_RCCEx_GetPeriphCLKFreq>
 810d244:	6178      	str	r0, [r7, #20]
    }
    if (hsai->Instance == SAI4_Block_B)
 810d246:	687b      	ldr	r3, [r7, #4]
 810d248:	681b      	ldr	r3, [r3, #0]
 810d24a:	4a22      	ldr	r2, [pc, #136]	; (810d2d4 <HAL_SAI_Init+0x2a8>)
 810d24c:	4293      	cmp	r3, r2
 810d24e:	d106      	bne.n	810d25e <HAL_SAI_Init+0x232>
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI4B);
 810d250:	f44f 6000 	mov.w	r0, #2048	; 0x800
 810d254:	f04f 0100 	mov.w	r1, #0
 810d258:	f7fe f9fc 	bl	810b654 <HAL_RCCEx_GetPeriphCLKFreq>
 810d25c:	6178      	str	r0, [r7, #20]
    /* Configure Master Clock Divider using the following formula :
       - If NODIV = 1 :
         MCKDIV[5:0] = SAI_CK_x / (FS * (FRL + 1))
       - If NODIV = 0 :
         MCKDIV[5:0] = SAI_CK_x / (FS * (OSR + 1) * 256) */
    if (hsai->Init.NoDivider == SAI_MASTERDIVIDER_DISABLE)
 810d25e:	687b      	ldr	r3, [r7, #4]
 810d260:	699b      	ldr	r3, [r3, #24]
 810d262:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 810d266:	d139      	bne.n	810d2dc <HAL_SAI_Init+0x2b0>
    {
      /* NODIV = 1 */
      uint32_t tmpframelength;

      if (hsai->Init.Protocol == SAI_SPDIF_PROTOCOL)
 810d268:	687b      	ldr	r3, [r7, #4]
 810d26a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 810d26c:	2b04      	cmp	r3, #4
 810d26e:	d102      	bne.n	810d276 <HAL_SAI_Init+0x24a>
      {
        /* For SPDIF protocol, frame length is set by hardware to 64 */
        tmpframelength = SAI_SPDIF_FRAME_LENGTH;
 810d270:	2340      	movs	r3, #64	; 0x40
 810d272:	60fb      	str	r3, [r7, #12]
 810d274:	e00a      	b.n	810d28c <HAL_SAI_Init+0x260>
      }
      else if (hsai->Init.Protocol == SAI_AC97_PROTOCOL)
 810d276:	687b      	ldr	r3, [r7, #4]
 810d278:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 810d27a:	2b08      	cmp	r3, #8
 810d27c:	d103      	bne.n	810d286 <HAL_SAI_Init+0x25a>
      {
        /* For AC97 protocol, frame length is set by hardware to 256 */
        tmpframelength = SAI_AC97_FRAME_LENGTH;
 810d27e:	f44f 7380 	mov.w	r3, #256	; 0x100
 810d282:	60fb      	str	r3, [r7, #12]
 810d284:	e002      	b.n	810d28c <HAL_SAI_Init+0x260>
      }
      else
      {
        /* For free protocol, frame length is set by user */
        tmpframelength = hsai->FrameInit.FrameLength;
 810d286:	687b      	ldr	r3, [r7, #4]
 810d288:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 810d28a:	60fb      	str	r3, [r7, #12]
      }

      /* (freq x 10) to keep Significant digits */
      tmpval = (freq * 10U) / (hsai->Init.AudioFrequency * tmpframelength);
 810d28c:	697a      	ldr	r2, [r7, #20]
 810d28e:	4613      	mov	r3, r2
 810d290:	009b      	lsls	r3, r3, #2
 810d292:	4413      	add	r3, r2
 810d294:	005b      	lsls	r3, r3, #1
 810d296:	4619      	mov	r1, r3
 810d298:	687b      	ldr	r3, [r7, #4]
 810d29a:	6a1b      	ldr	r3, [r3, #32]
 810d29c:	68fa      	ldr	r2, [r7, #12]
 810d29e:	fb02 f303 	mul.w	r3, r2, r3
 810d2a2:	fbb1 f3f3 	udiv	r3, r1, r3
 810d2a6:	613b      	str	r3, [r7, #16]
 810d2a8:	e030      	b.n	810d30c <HAL_SAI_Init+0x2e0>
 810d2aa:	bf00      	nop
 810d2ac:	40015804 	.word	0x40015804
 810d2b0:	58005404 	.word	0x58005404
 810d2b4:	40015824 	.word	0x40015824
 810d2b8:	40015800 	.word	0x40015800
 810d2bc:	40015c04 	.word	0x40015c04
 810d2c0:	40015c24 	.word	0x40015c24
 810d2c4:	40015c00 	.word	0x40015c00
 810d2c8:	40016004 	.word	0x40016004
 810d2cc:	40016024 	.word	0x40016024
 810d2d0:	40016000 	.word	0x40016000
 810d2d4:	58005424 	.word	0x58005424
 810d2d8:	58005400 	.word	0x58005400
    }
    else
    {
      /* NODIV = 0 */
      uint32_t tmposr;
      tmposr = (hsai->Init.MckOverSampling == SAI_MCK_OVERSAMPLING_ENABLE) ? 2U : 1U;
 810d2dc:	687b      	ldr	r3, [r7, #4]
 810d2de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 810d2e0:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 810d2e4:	d101      	bne.n	810d2ea <HAL_SAI_Init+0x2be>
 810d2e6:	2302      	movs	r3, #2
 810d2e8:	e000      	b.n	810d2ec <HAL_SAI_Init+0x2c0>
 810d2ea:	2301      	movs	r3, #1
 810d2ec:	60bb      	str	r3, [r7, #8]
      /* (freq x 10) to keep Significant digits */
      tmpval = (freq * 10U) / (hsai->Init.AudioFrequency * tmposr * 256U);
 810d2ee:	697a      	ldr	r2, [r7, #20]
 810d2f0:	4613      	mov	r3, r2
 810d2f2:	009b      	lsls	r3, r3, #2
 810d2f4:	4413      	add	r3, r2
 810d2f6:	005b      	lsls	r3, r3, #1
 810d2f8:	4619      	mov	r1, r3
 810d2fa:	687b      	ldr	r3, [r7, #4]
 810d2fc:	6a1b      	ldr	r3, [r3, #32]
 810d2fe:	68ba      	ldr	r2, [r7, #8]
 810d300:	fb02 f303 	mul.w	r3, r2, r3
 810d304:	021b      	lsls	r3, r3, #8
 810d306:	fbb1 f3f3 	udiv	r3, r1, r3
 810d30a:	613b      	str	r3, [r7, #16]
    }
    hsai->Init.Mckdiv = tmpval / 10U;
 810d30c:	693b      	ldr	r3, [r7, #16]
 810d30e:	4a96      	ldr	r2, [pc, #600]	; (810d568 <HAL_SAI_Init+0x53c>)
 810d310:	fba2 2303 	umull	r2, r3, r2, r3
 810d314:	08da      	lsrs	r2, r3, #3
 810d316:	687b      	ldr	r3, [r7, #4]
 810d318:	625a      	str	r2, [r3, #36]	; 0x24

    /* Round result to the nearest integer */
    if ((tmpval % 10U) > 8U)
 810d31a:	6939      	ldr	r1, [r7, #16]
 810d31c:	4b92      	ldr	r3, [pc, #584]	; (810d568 <HAL_SAI_Init+0x53c>)
 810d31e:	fba3 2301 	umull	r2, r3, r3, r1
 810d322:	08da      	lsrs	r2, r3, #3
 810d324:	4613      	mov	r3, r2
 810d326:	009b      	lsls	r3, r3, #2
 810d328:	4413      	add	r3, r2
 810d32a:	005b      	lsls	r3, r3, #1
 810d32c:	1aca      	subs	r2, r1, r3
 810d32e:	2a08      	cmp	r2, #8
 810d330:	d904      	bls.n	810d33c <HAL_SAI_Init+0x310>
    {
      hsai->Init.Mckdiv += 1U;
 810d332:	687b      	ldr	r3, [r7, #4]
 810d334:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 810d336:	1c5a      	adds	r2, r3, #1
 810d338:	687b      	ldr	r3, [r7, #4]
 810d33a:	625a      	str	r2, [r3, #36]	; 0x24
    }

    /* For SPDIF protocol, SAI shall provide a bit clock twice faster the symbol-rate */
    if (hsai->Init.Protocol == SAI_SPDIF_PROTOCOL)
 810d33c:	687b      	ldr	r3, [r7, #4]
 810d33e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 810d340:	2b04      	cmp	r3, #4
 810d342:	d104      	bne.n	810d34e <HAL_SAI_Init+0x322>
    {
      hsai->Init.Mckdiv = hsai->Init.Mckdiv >> 1;
 810d344:	687b      	ldr	r3, [r7, #4]
 810d346:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 810d348:	085a      	lsrs	r2, r3, #1
 810d34a:	687b      	ldr	r3, [r7, #4]
 810d34c:	625a      	str	r2, [r3, #36]	; 0x24

  /* Check the SAI Block master clock divider parameter */
  assert_param(IS_SAI_BLOCK_MASTER_DIVIDER(hsai->Init.Mckdiv));

  /* Compute CKSTR bits of SAI CR1 according ClockStrobing and AudioMode */
  if ((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 810d34e:	687b      	ldr	r3, [r7, #4]
 810d350:	685b      	ldr	r3, [r3, #4]
 810d352:	2b00      	cmp	r3, #0
 810d354:	d003      	beq.n	810d35e <HAL_SAI_Init+0x332>
 810d356:	687b      	ldr	r3, [r7, #4]
 810d358:	685b      	ldr	r3, [r3, #4]
 810d35a:	2b02      	cmp	r3, #2
 810d35c:	d109      	bne.n	810d372 <HAL_SAI_Init+0x346>
  {
    /* Transmit */
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? 0U : SAI_xCR1_CKSTR;
 810d35e:	687b      	ldr	r3, [r7, #4]
 810d360:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 810d362:	2b01      	cmp	r3, #1
 810d364:	d101      	bne.n	810d36a <HAL_SAI_Init+0x33e>
 810d366:	2300      	movs	r3, #0
 810d368:	e001      	b.n	810d36e <HAL_SAI_Init+0x342>
 810d36a:	f44f 7300 	mov.w	r3, #512	; 0x200
 810d36e:	623b      	str	r3, [r7, #32]
 810d370:	e008      	b.n	810d384 <HAL_SAI_Init+0x358>
  }
  else
  {
    /* Receive */
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? SAI_xCR1_CKSTR : 0U;
 810d372:	687b      	ldr	r3, [r7, #4]
 810d374:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 810d376:	2b01      	cmp	r3, #1
 810d378:	d102      	bne.n	810d380 <HAL_SAI_Init+0x354>
 810d37a:	f44f 7300 	mov.w	r3, #512	; 0x200
 810d37e:	e000      	b.n	810d382 <HAL_SAI_Init+0x356>
 810d380:	2300      	movs	r3, #0
 810d382:	623b      	str	r3, [r7, #32]

  /* SAI Block Configuration -------------------------------------------------*/
  /* SAI CR1 Configuration */
#if defined(SAI_VER_V2_X) /* SAI Peripheral version depends on STM32H7 device revision ID */

  if (HAL_GetREVID() >= REV_ID_B) /* STM32H7xx Rev.B and above */
 810d384:	f7fa f97a 	bl	810767c <HAL_GetREVID>
 810d388:	4603      	mov	r3, r0
 810d38a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 810d38e:	d331      	bcc.n	810d3f4 <HAL_SAI_Init+0x3c8>
  {
    hsai->Instance->CR1 &= ~(SAI_xCR1_MODE | SAI_xCR1_PRTCFG |  SAI_xCR1_DS |      \
 810d390:	687b      	ldr	r3, [r7, #4]
 810d392:	681b      	ldr	r3, [r3, #0]
 810d394:	6819      	ldr	r1, [r3, #0]
 810d396:	687b      	ldr	r3, [r7, #4]
 810d398:	681a      	ldr	r2, [r3, #0]
 810d39a:	4b74      	ldr	r3, [pc, #464]	; (810d56c <HAL_SAI_Init+0x540>)
 810d39c:	400b      	ands	r3, r1
 810d39e:	6013      	str	r3, [r2, #0]
                             SAI_xCR1_LSBFIRST | SAI_xCR1_CKSTR | SAI_xCR1_SYNCEN | \
                             SAI_xCR1_MONO | SAI_xCR1_OUTDRIV  | SAI_xCR1_DMAEN |  \
                             SAI_xCR1_NODIV | SAI_xCR1_MCKDIV | SAI_xCR1_OSR |     \
                             SAI_xCR1_MCKEN);

    hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 810d3a0:	687b      	ldr	r3, [r7, #4]
 810d3a2:	681b      	ldr	r3, [r3, #0]
 810d3a4:	6819      	ldr	r1, [r3, #0]
 810d3a6:	687b      	ldr	r3, [r7, #4]
 810d3a8:	685a      	ldr	r2, [r3, #4]
 810d3aa:	687b      	ldr	r3, [r7, #4]
 810d3ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 810d3ae:	431a      	orrs	r2, r3
                            hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 810d3b0:	687b      	ldr	r3, [r7, #4]
 810d3b2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
    hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 810d3b4:	431a      	orrs	r2, r3
                            hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 810d3b6:	687b      	ldr	r3, [r7, #4]
 810d3b8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 810d3ba:	431a      	orrs	r2, r3
 810d3bc:	6a3b      	ldr	r3, [r7, #32]
 810d3be:	431a      	orrs	r2, r3
                            ckstr_bits | syncen_bits |                             \
 810d3c0:	69fb      	ldr	r3, [r7, #28]
 810d3c2:	431a      	orrs	r2, r3
                            hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 810d3c4:	687b      	ldr	r3, [r7, #4]
 810d3c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
                            ckstr_bits | syncen_bits |                             \
 810d3c8:	431a      	orrs	r2, r3
                            hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 810d3ca:	687b      	ldr	r3, [r7, #4]
 810d3cc:	695b      	ldr	r3, [r3, #20]
 810d3ce:	431a      	orrs	r2, r3
                            hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
 810d3d0:	687b      	ldr	r3, [r7, #4]
 810d3d2:	699b      	ldr	r3, [r3, #24]
                            hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 810d3d4:	431a      	orrs	r2, r3
                            hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
 810d3d6:	687b      	ldr	r3, [r7, #4]
 810d3d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 810d3da:	051b      	lsls	r3, r3, #20
 810d3dc:	431a      	orrs	r2, r3
                            hsai->Init.MckOverSampling | hsai->Init.MckOutput);
 810d3de:	687b      	ldr	r3, [r7, #4]
 810d3e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
                            hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
 810d3e2:	431a      	orrs	r2, r3
                            hsai->Init.MckOverSampling | hsai->Init.MckOutput);
 810d3e4:	687b      	ldr	r3, [r7, #4]
 810d3e6:	691b      	ldr	r3, [r3, #16]
 810d3e8:	431a      	orrs	r2, r3
    hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 810d3ea:	687b      	ldr	r3, [r7, #4]
 810d3ec:	681b      	ldr	r3, [r3, #0]
 810d3ee:	430a      	orrs	r2, r1
 810d3f0:	601a      	str	r2, [r3, #0]
 810d3f2:	e02d      	b.n	810d450 <HAL_SAI_Init+0x424>
  }
  else /* STM32H7xx Rev.Y */
  {
    hsai->Instance->CR1 &= ~(SAI_xCR1_MODE | SAI_xCR1_PRTCFG |  SAI_xCR1_DS |      \
 810d3f4:	687b      	ldr	r3, [r7, #4]
 810d3f6:	681b      	ldr	r3, [r3, #0]
 810d3f8:	6819      	ldr	r1, [r3, #0]
 810d3fa:	687b      	ldr	r3, [r7, #4]
 810d3fc:	681a      	ldr	r2, [r3, #0]
 810d3fe:	4b5c      	ldr	r3, [pc, #368]	; (810d570 <HAL_SAI_Init+0x544>)
 810d400:	400b      	ands	r3, r1
 810d402:	6013      	str	r3, [r2, #0]
                             SAI_xCR1_LSBFIRST | SAI_xCR1_CKSTR | SAI_xCR1_SYNCEN | \
                             SAI_xCR1_MONO | SAI_xCR1_OUTDRIV  | SAI_xCR1_DMAEN |  \
                             SAI_xCR1_NODIV | SAI_xCR1_MCKDIV | SAI_xCR1_OSR);

    hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 810d404:	687b      	ldr	r3, [r7, #4]
 810d406:	681b      	ldr	r3, [r3, #0]
 810d408:	6819      	ldr	r1, [r3, #0]
 810d40a:	687b      	ldr	r3, [r7, #4]
 810d40c:	685a      	ldr	r2, [r3, #4]
 810d40e:	687b      	ldr	r3, [r7, #4]
 810d410:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 810d412:	431a      	orrs	r2, r3
                            hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 810d414:	687b      	ldr	r3, [r7, #4]
 810d416:	6c9b      	ldr	r3, [r3, #72]	; 0x48
    hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 810d418:	431a      	orrs	r2, r3
                            hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 810d41a:	687b      	ldr	r3, [r7, #4]
 810d41c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 810d41e:	431a      	orrs	r2, r3
 810d420:	6a3b      	ldr	r3, [r7, #32]
 810d422:	431a      	orrs	r2, r3
                            ckstr_bits | syncen_bits |                             \
 810d424:	69fb      	ldr	r3, [r7, #28]
 810d426:	431a      	orrs	r2, r3
                            hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 810d428:	687b      	ldr	r3, [r7, #4]
 810d42a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
                            ckstr_bits | syncen_bits |                             \
 810d42c:	431a      	orrs	r2, r3
                            hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 810d42e:	687b      	ldr	r3, [r7, #4]
 810d430:	695b      	ldr	r3, [r3, #20]
 810d432:	431a      	orrs	r2, r3
                            hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
 810d434:	687b      	ldr	r3, [r7, #4]
 810d436:	699b      	ldr	r3, [r3, #24]
                            hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 810d438:	431a      	orrs	r2, r3
                            hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
 810d43a:	687b      	ldr	r3, [r7, #4]
 810d43c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 810d43e:	051b      	lsls	r3, r3, #20
 810d440:	431a      	orrs	r2, r3
                            hsai->Init.MckOverSampling);
 810d442:	687b      	ldr	r3, [r7, #4]
 810d444:	6a9b      	ldr	r3, [r3, #40]	; 0x28
                            hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
 810d446:	431a      	orrs	r2, r3
    hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 810d448:	687b      	ldr	r3, [r7, #4]
 810d44a:	681b      	ldr	r3, [r3, #0]
 810d44c:	430a      	orrs	r2, r1
 810d44e:	601a      	str	r2, [r3, #0]
                          hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
                          hsai->Init.MckOverSampling | hsai->Init.MckOutput);
#endif /* SAI_VER_V2_X */

  /* SAI CR2 Configuration */
  hsai->Instance->CR2 &= ~(SAI_xCR2_FTH | SAI_xCR2_FFLUSH | SAI_xCR2_COMP | SAI_xCR2_CPL);
 810d450:	687b      	ldr	r3, [r7, #4]
 810d452:	681b      	ldr	r3, [r3, #0]
 810d454:	685b      	ldr	r3, [r3, #4]
 810d456:	687a      	ldr	r2, [r7, #4]
 810d458:	6812      	ldr	r2, [r2, #0]
 810d45a:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 810d45e:	f023 030f 	bic.w	r3, r3, #15
 810d462:	6053      	str	r3, [r2, #4]
  hsai->Instance->CR2 |= (hsai->Init.FIFOThreshold | hsai->Init.CompandingMode | hsai->Init.TriState);
 810d464:	687b      	ldr	r3, [r7, #4]
 810d466:	681b      	ldr	r3, [r3, #0]
 810d468:	6859      	ldr	r1, [r3, #4]
 810d46a:	687b      	ldr	r3, [r7, #4]
 810d46c:	69da      	ldr	r2, [r3, #28]
 810d46e:	687b      	ldr	r3, [r7, #4]
 810d470:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 810d472:	431a      	orrs	r2, r3
 810d474:	687b      	ldr	r3, [r7, #4]
 810d476:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 810d478:	431a      	orrs	r2, r3
 810d47a:	687b      	ldr	r3, [r7, #4]
 810d47c:	681b      	ldr	r3, [r3, #0]
 810d47e:	430a      	orrs	r2, r1
 810d480:	605a      	str	r2, [r3, #4]

  /* SAI Frame Configuration -----------------------------------------*/
  hsai->Instance->FRCR &= (~(SAI_xFRCR_FRL | SAI_xFRCR_FSALL | SAI_xFRCR_FSDEF | \
 810d482:	687b      	ldr	r3, [r7, #4]
 810d484:	681b      	ldr	r3, [r3, #0]
 810d486:	6899      	ldr	r1, [r3, #8]
 810d488:	687b      	ldr	r3, [r7, #4]
 810d48a:	681a      	ldr	r2, [r3, #0]
 810d48c:	4b39      	ldr	r3, [pc, #228]	; (810d574 <HAL_SAI_Init+0x548>)
 810d48e:	400b      	ands	r3, r1
 810d490:	6093      	str	r3, [r2, #8]
                             SAI_xFRCR_FSPOL | SAI_xFRCR_FSOFF));
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1U) |
 810d492:	687b      	ldr	r3, [r7, #4]
 810d494:	681b      	ldr	r3, [r3, #0]
 810d496:	6899      	ldr	r1, [r3, #8]
 810d498:	687b      	ldr	r3, [r7, #4]
 810d49a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 810d49c:	1e5a      	subs	r2, r3, #1
                           hsai->FrameInit.FSOffset |
 810d49e:	687b      	ldr	r3, [r7, #4]
 810d4a0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1U) |
 810d4a2:	431a      	orrs	r2, r3
                           hsai->FrameInit.FSDefinition |
 810d4a4:	687b      	ldr	r3, [r7, #4]
 810d4a6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
                           hsai->FrameInit.FSOffset |
 810d4a8:	431a      	orrs	r2, r3
                           hsai->FrameInit.FSPolarity   |
 810d4aa:	687b      	ldr	r3, [r7, #4]
 810d4ac:	6e1b      	ldr	r3, [r3, #96]	; 0x60
                           hsai->FrameInit.FSDefinition |
 810d4ae:	431a      	orrs	r2, r3
                           ((hsai->FrameInit.ActiveFrameLength - 1U) << 8));
 810d4b0:	687b      	ldr	r3, [r7, #4]
 810d4b2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 810d4b4:	3b01      	subs	r3, #1
 810d4b6:	021b      	lsls	r3, r3, #8
                           hsai->FrameInit.FSPolarity   |
 810d4b8:	431a      	orrs	r2, r3
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1U) |
 810d4ba:	687b      	ldr	r3, [r7, #4]
 810d4bc:	681b      	ldr	r3, [r3, #0]
 810d4be:	430a      	orrs	r2, r1
 810d4c0:	609a      	str	r2, [r3, #8]

  /* SAI Block_x SLOT Configuration ------------------------------------------*/
  /* This register has no meaning in AC 97 and SPDIF audio protocol */
  hsai->Instance->SLOTR &= (~(SAI_xSLOTR_FBOFF | SAI_xSLOTR_SLOTSZ |  \
 810d4c2:	687b      	ldr	r3, [r7, #4]
 810d4c4:	681b      	ldr	r3, [r3, #0]
 810d4c6:	68d9      	ldr	r1, [r3, #12]
 810d4c8:	687b      	ldr	r3, [r7, #4]
 810d4ca:	681a      	ldr	r2, [r3, #0]
 810d4cc:	f24f 0320 	movw	r3, #61472	; 0xf020
 810d4d0:	400b      	ands	r3, r1
 810d4d2:	60d3      	str	r3, [r2, #12]
                              SAI_xSLOTR_NBSLOT | SAI_xSLOTR_SLOTEN));

  hsai->Instance->SLOTR |= hsai->SlotInit.FirstBitOffset | hsai->SlotInit.SlotSize | \
 810d4d4:	687b      	ldr	r3, [r7, #4]
 810d4d6:	681b      	ldr	r3, [r3, #0]
 810d4d8:	68d9      	ldr	r1, [r3, #12]
 810d4da:	687b      	ldr	r3, [r7, #4]
 810d4dc:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 810d4de:	687b      	ldr	r3, [r7, #4]
 810d4e0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 810d4e2:	431a      	orrs	r2, r3
                           (hsai->SlotInit.SlotActive << 16) | ((hsai->SlotInit.SlotNumber - 1U) <<  8);
 810d4e4:	687b      	ldr	r3, [r7, #4]
 810d4e6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 810d4e8:	041b      	lsls	r3, r3, #16
  hsai->Instance->SLOTR |= hsai->SlotInit.FirstBitOffset | hsai->SlotInit.SlotSize | \
 810d4ea:	431a      	orrs	r2, r3
                           (hsai->SlotInit.SlotActive << 16) | ((hsai->SlotInit.SlotNumber - 1U) <<  8);
 810d4ec:	687b      	ldr	r3, [r7, #4]
 810d4ee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 810d4f0:	3b01      	subs	r3, #1
 810d4f2:	021b      	lsls	r3, r3, #8
 810d4f4:	431a      	orrs	r2, r3
  hsai->Instance->SLOTR |= hsai->SlotInit.FirstBitOffset | hsai->SlotInit.SlotSize | \
 810d4f6:	687b      	ldr	r3, [r7, #4]
 810d4f8:	681b      	ldr	r3, [r3, #0]
 810d4fa:	430a      	orrs	r2, r1
 810d4fc:	60da      	str	r2, [r3, #12]

  /* SAI PDM Configuration ---------------------------------------------------*/
#if defined(SAI4)
  if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI4_Block_A))
 810d4fe:	687b      	ldr	r3, [r7, #4]
 810d500:	681b      	ldr	r3, [r3, #0]
 810d502:	4a1d      	ldr	r2, [pc, #116]	; (810d578 <HAL_SAI_Init+0x54c>)
 810d504:	4293      	cmp	r3, r2
 810d506:	d004      	beq.n	810d512 <HAL_SAI_Init+0x4e6>
 810d508:	687b      	ldr	r3, [r7, #4]
 810d50a:	681b      	ldr	r3, [r3, #0]
 810d50c:	4a1b      	ldr	r2, [pc, #108]	; (810d57c <HAL_SAI_Init+0x550>)
 810d50e:	4293      	cmp	r3, r2
 810d510:	d119      	bne.n	810d546 <HAL_SAI_Init+0x51a>
#else
  if (hsai->Instance == SAI1_Block_A)
#endif /* SAI4 */
  {
    /* Disable PDM interface */
    SaiBaseAddress->PDMCR &= ~(SAI_PDMCR_PDMEN);
 810d512:	69bb      	ldr	r3, [r7, #24]
 810d514:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 810d516:	f023 0201 	bic.w	r2, r3, #1
 810d51a:	69bb      	ldr	r3, [r7, #24]
 810d51c:	645a      	str	r2, [r3, #68]	; 0x44
    if (hsai->Init.PdmInit.Activation == ENABLE)
 810d51e:	687b      	ldr	r3, [r7, #4]
 810d520:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 810d524:	2b01      	cmp	r3, #1
 810d526:	d10e      	bne.n	810d546 <HAL_SAI_Init+0x51a>
    {
      /* Configure and enable PDM interface */
      SaiBaseAddress->PDMCR = (hsai->Init.PdmInit.ClockEnable |
 810d528:	687b      	ldr	r3, [r7, #4]
 810d52a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
                               ((hsai->Init.PdmInit.MicPairsNbr - 1U) << SAI_PDMCR_MICNBR_Pos));
 810d52c:	687b      	ldr	r3, [r7, #4]
 810d52e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 810d530:	3b01      	subs	r3, #1
 810d532:	011b      	lsls	r3, r3, #4
      SaiBaseAddress->PDMCR = (hsai->Init.PdmInit.ClockEnable |
 810d534:	431a      	orrs	r2, r3
 810d536:	69bb      	ldr	r3, [r7, #24]
 810d538:	645a      	str	r2, [r3, #68]	; 0x44
      SaiBaseAddress->PDMCR |= SAI_PDMCR_PDMEN;
 810d53a:	69bb      	ldr	r3, [r7, #24]
 810d53c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 810d53e:	f043 0201 	orr.w	r2, r3, #1
 810d542:	69bb      	ldr	r3, [r7, #24]
 810d544:	645a      	str	r2, [r3, #68]	; 0x44
    }
  }

  /* Initialize the error code */
  hsai->ErrorCode = HAL_SAI_ERROR_NONE;
 810d546:	687b      	ldr	r3, [r7, #4]
 810d548:	2200      	movs	r2, #0
 810d54a:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94

  /* Initialize the SAI state */
  hsai->State = HAL_SAI_STATE_READY;
 810d54e:	687b      	ldr	r3, [r7, #4]
 810d550:	2201      	movs	r2, #1
 810d552:	f883 2091 	strb.w	r2, [r3, #145]	; 0x91

  /* Release Lock */
  __HAL_UNLOCK(hsai);
 810d556:	687b      	ldr	r3, [r7, #4]
 810d558:	2200      	movs	r2, #0
 810d55a:	f883 2090 	strb.w	r2, [r3, #144]	; 0x90

  return HAL_OK;
 810d55e:	2300      	movs	r3, #0
}
 810d560:	4618      	mov	r0, r3
 810d562:	3728      	adds	r7, #40	; 0x28
 810d564:	46bd      	mov	sp, r7
 810d566:	bd80      	pop	{r7, pc}
 810d568:	cccccccd 	.word	0xcccccccd
 810d56c:	f005c010 	.word	0xf005c010
 810d570:	f805c010 	.word	0xf805c010
 810d574:	fff88000 	.word	0xfff88000
 810d578:	40015804 	.word	0x40015804
 810d57c:	58005404 	.word	0x58005404

0810d580 <SAI_Disable>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *              the configuration information for SAI module.
  * @retval None
  */
static HAL_StatusTypeDef SAI_Disable(SAI_HandleTypeDef *hsai)
{
 810d580:	b480      	push	{r7}
 810d582:	b085      	sub	sp, #20
 810d584:	af00      	add	r7, sp, #0
 810d586:	6078      	str	r0, [r7, #4]
  uint32_t count = SAI_DEFAULT_TIMEOUT * (SystemCoreClock / 7U / 1000U);
 810d588:	4b18      	ldr	r3, [pc, #96]	; (810d5ec <SAI_Disable+0x6c>)
 810d58a:	681b      	ldr	r3, [r3, #0]
 810d58c:	4a18      	ldr	r2, [pc, #96]	; (810d5f0 <SAI_Disable+0x70>)
 810d58e:	fba2 2303 	umull	r2, r3, r2, r3
 810d592:	0b1b      	lsrs	r3, r3, #12
 810d594:	009b      	lsls	r3, r3, #2
 810d596:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef status = HAL_OK;
 810d598:	2300      	movs	r3, #0
 810d59a:	72fb      	strb	r3, [r7, #11]

  /* Disable the SAI instance */
  __HAL_SAI_DISABLE(hsai);
 810d59c:	687b      	ldr	r3, [r7, #4]
 810d59e:	681b      	ldr	r3, [r3, #0]
 810d5a0:	681a      	ldr	r2, [r3, #0]
 810d5a2:	687b      	ldr	r3, [r7, #4]
 810d5a4:	681b      	ldr	r3, [r3, #0]
 810d5a6:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 810d5aa:	601a      	str	r2, [r3, #0]

  do
  {
    /* Check for the Timeout */
    if (count == 0U)
 810d5ac:	68fb      	ldr	r3, [r7, #12]
 810d5ae:	2b00      	cmp	r3, #0
 810d5b0:	d10a      	bne.n	810d5c8 <SAI_Disable+0x48>
    {
      /* Update error code */
      hsai->ErrorCode |= HAL_SAI_ERROR_TIMEOUT;
 810d5b2:	687b      	ldr	r3, [r7, #4]
 810d5b4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 810d5b8:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 810d5bc:	687b      	ldr	r3, [r7, #4]
 810d5be:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
      status = HAL_TIMEOUT;
 810d5c2:	2303      	movs	r3, #3
 810d5c4:	72fb      	strb	r3, [r7, #11]
      break;
 810d5c6:	e009      	b.n	810d5dc <SAI_Disable+0x5c>
    }
    count--;
 810d5c8:	68fb      	ldr	r3, [r7, #12]
 810d5ca:	3b01      	subs	r3, #1
 810d5cc:	60fb      	str	r3, [r7, #12]
  }
  while ((hsai->Instance->CR1 & SAI_xCR1_SAIEN) != 0U);
 810d5ce:	687b      	ldr	r3, [r7, #4]
 810d5d0:	681b      	ldr	r3, [r3, #0]
 810d5d2:	681b      	ldr	r3, [r3, #0]
 810d5d4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 810d5d8:	2b00      	cmp	r3, #0
 810d5da:	d1e7      	bne.n	810d5ac <SAI_Disable+0x2c>

  return status;
 810d5dc:	7afb      	ldrb	r3, [r7, #11]
}
 810d5de:	4618      	mov	r0, r3
 810d5e0:	3714      	adds	r7, #20
 810d5e2:	46bd      	mov	sp, r7
 810d5e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 810d5e8:	4770      	bx	lr
 810d5ea:	bf00      	nop
 810d5ec:	10000000 	.word	0x10000000
 810d5f0:	95cbec1b 	.word	0x95cbec1b

0810d5f4 <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd: Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 810d5f4:	b580      	push	{r7, lr}
 810d5f6:	b08a      	sub	sp, #40	; 0x28
 810d5f8:	af00      	add	r7, sp, #0
 810d5fa:	6078      	str	r0, [r7, #4]
  uint32_t speedgrade;
  uint32_t unitsize;
  uint32_t tickstart;

  /* Check the SD handle allocation */
  if (hsd == NULL)
 810d5fc:	687b      	ldr	r3, [r7, #4]
 810d5fe:	2b00      	cmp	r3, #0
 810d600:	d101      	bne.n	810d606 <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 810d602:	2301      	movs	r3, #1
 810d604:	e075      	b.n	810d6f2 <HAL_SD_Init+0xfe>
  assert_param(IS_SDMMC_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDMMC_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(hsd->Init.ClockDiv));

  if (hsd->State == HAL_SD_STATE_RESET)
 810d606:	687b      	ldr	r3, [r7, #4]
 810d608:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 810d60c:	b2db      	uxtb	r3, r3
 810d60e:	2b00      	cmp	r3, #0
 810d610:	d105      	bne.n	810d61e <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 810d612:	687b      	ldr	r3, [r7, #4]
 810d614:	2200      	movs	r2, #0
 810d616:	761a      	strb	r2, [r3, #24]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 810d618:	6878      	ldr	r0, [r7, #4]
 810d61a:	f7f4 f9f5 	bl	8101a08 <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_PROGRAMMING;
 810d61e:	687b      	ldr	r3, [r7, #4]
 810d620:	2204      	movs	r2, #4
 810d622:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 810d626:	6878      	ldr	r0, [r7, #4]
 810d628:	f000 f868 	bl	810d6fc <HAL_SD_InitCard>
 810d62c:	4603      	mov	r3, r0
 810d62e:	2b00      	cmp	r3, #0
 810d630:	d001      	beq.n	810d636 <HAL_SD_Init+0x42>
  {
    return HAL_ERROR;
 810d632:	2301      	movs	r3, #1
 810d634:	e05d      	b.n	810d6f2 <HAL_SD_Init+0xfe>
  }

  if (HAL_SD_GetCardStatus(hsd, &CardStatus) != HAL_OK)
 810d636:	f107 0308 	add.w	r3, r7, #8
 810d63a:	4619      	mov	r1, r3
 810d63c:	6878      	ldr	r0, [r7, #4]
 810d63e:	f000 fa9d 	bl	810db7c <HAL_SD_GetCardStatus>
 810d642:	4603      	mov	r3, r0
 810d644:	2b00      	cmp	r3, #0
 810d646:	d001      	beq.n	810d64c <HAL_SD_Init+0x58>
  {
    return HAL_ERROR;
 810d648:	2301      	movs	r3, #1
 810d64a:	e052      	b.n	810d6f2 <HAL_SD_Init+0xfe>
  }
  /* Get Initial Card Speed from Card Status*/
  speedgrade = CardStatus.UhsSpeedGrade;
 810d64c:	7e3b      	ldrb	r3, [r7, #24]
 810d64e:	b2db      	uxtb	r3, r3
 810d650:	627b      	str	r3, [r7, #36]	; 0x24
  unitsize = CardStatus.UhsAllocationUnitSize;
 810d652:	7e7b      	ldrb	r3, [r7, #25]
 810d654:	b2db      	uxtb	r3, r3
 810d656:	623b      	str	r3, [r7, #32]
  if ((hsd->SdCard.CardType == CARD_SDHC_SDXC) && ((speedgrade != 0U) || (unitsize != 0U)))
 810d658:	687b      	ldr	r3, [r7, #4]
 810d65a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 810d65c:	2b01      	cmp	r3, #1
 810d65e:	d10a      	bne.n	810d676 <HAL_SD_Init+0x82>
 810d660:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 810d662:	2b00      	cmp	r3, #0
 810d664:	d102      	bne.n	810d66c <HAL_SD_Init+0x78>
 810d666:	6a3b      	ldr	r3, [r7, #32]
 810d668:	2b00      	cmp	r3, #0
 810d66a:	d004      	beq.n	810d676 <HAL_SD_Init+0x82>
  {
    hsd->SdCard.CardSpeed = CARD_ULTRA_HIGH_SPEED;
 810d66c:	687b      	ldr	r3, [r7, #4]
 810d66e:	f44f 7200 	mov.w	r2, #512	; 0x200
 810d672:	659a      	str	r2, [r3, #88]	; 0x58
 810d674:	e00b      	b.n	810d68e <HAL_SD_Init+0x9a>
  }
  else
  {
    if (hsd->SdCard.CardType == CARD_SDHC_SDXC)
 810d676:	687b      	ldr	r3, [r7, #4]
 810d678:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 810d67a:	2b01      	cmp	r3, #1
 810d67c:	d104      	bne.n	810d688 <HAL_SD_Init+0x94>
    {
      hsd->SdCard.CardSpeed  = CARD_HIGH_SPEED;
 810d67e:	687b      	ldr	r3, [r7, #4]
 810d680:	f44f 7280 	mov.w	r2, #256	; 0x100
 810d684:	659a      	str	r2, [r3, #88]	; 0x58
 810d686:	e002      	b.n	810d68e <HAL_SD_Init+0x9a>
    }
    else
    {
      hsd->SdCard.CardSpeed  = CARD_NORMAL_SPEED;
 810d688:	687b      	ldr	r3, [r7, #4]
 810d68a:	2200      	movs	r2, #0
 810d68c:	659a      	str	r2, [r3, #88]	; 0x58
    }

  }
  /* Configure the bus wide */
  if (HAL_SD_ConfigWideBusOperation(hsd, hsd->Init.BusWide) != HAL_OK)
 810d68e:	687b      	ldr	r3, [r7, #4]
 810d690:	68db      	ldr	r3, [r3, #12]
 810d692:	4619      	mov	r1, r3
 810d694:	6878      	ldr	r0, [r7, #4]
 810d696:	f000 fb2f 	bl	810dcf8 <HAL_SD_ConfigWideBusOperation>
 810d69a:	4603      	mov	r3, r0
 810d69c:	2b00      	cmp	r3, #0
 810d69e:	d001      	beq.n	810d6a4 <HAL_SD_Init+0xb0>
  {
    return HAL_ERROR;
 810d6a0:	2301      	movs	r3, #1
 810d6a2:	e026      	b.n	810d6f2 <HAL_SD_Init+0xfe>
  }

  /* Verify that SD card is ready to use after Initialization */
  tickstart = HAL_GetTick();
 810d6a4:	f7f9 ffba 	bl	810761c <HAL_GetTick>
 810d6a8:	61f8      	str	r0, [r7, #28]
  while ((HAL_SD_GetCardState(hsd) != HAL_SD_CARD_TRANSFER))
 810d6aa:	e011      	b.n	810d6d0 <HAL_SD_Init+0xdc>
  {
    if ((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 810d6ac:	f7f9 ffb6 	bl	810761c <HAL_GetTick>
 810d6b0:	4602      	mov	r2, r0
 810d6b2:	69fb      	ldr	r3, [r7, #28]
 810d6b4:	1ad3      	subs	r3, r2, r3
 810d6b6:	f1b3 3fff 	cmp.w	r3, #4294967295
 810d6ba:	d109      	bne.n	810d6d0 <HAL_SD_Init+0xdc>
    {
      hsd->ErrorCode = HAL_SD_ERROR_TIMEOUT;
 810d6bc:	687b      	ldr	r3, [r7, #4]
 810d6be:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 810d6c2:	635a      	str	r2, [r3, #52]	; 0x34
      hsd->State = HAL_SD_STATE_READY;
 810d6c4:	687b      	ldr	r3, [r7, #4]
 810d6c6:	2201      	movs	r2, #1
 810d6c8:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      return HAL_TIMEOUT;
 810d6cc:	2303      	movs	r3, #3
 810d6ce:	e010      	b.n	810d6f2 <HAL_SD_Init+0xfe>
  while ((HAL_SD_GetCardState(hsd) != HAL_SD_CARD_TRANSFER))
 810d6d0:	6878      	ldr	r0, [r7, #4]
 810d6d2:	f000 fc23 	bl	810df1c <HAL_SD_GetCardState>
 810d6d6:	4603      	mov	r3, r0
 810d6d8:	2b04      	cmp	r3, #4
 810d6da:	d1e7      	bne.n	810d6ac <HAL_SD_Init+0xb8>
    }
  }

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 810d6dc:	687b      	ldr	r3, [r7, #4]
 810d6de:	2200      	movs	r2, #0
 810d6e0:	635a      	str	r2, [r3, #52]	; 0x34

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 810d6e2:	687b      	ldr	r3, [r7, #4]
 810d6e4:	2200      	movs	r2, #0
 810d6e6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 810d6e8:	687b      	ldr	r3, [r7, #4]
 810d6ea:	2201      	movs	r2, #1
 810d6ec:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

  return HAL_OK;
 810d6f0:	2300      	movs	r3, #0
}
 810d6f2:	4618      	mov	r0, r3
 810d6f4:	3728      	adds	r7, #40	; 0x28
 810d6f6:	46bd      	mov	sp, r7
 810d6f8:	bd80      	pop	{r7, pc}
	...

0810d6fc <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 810d6fc:	b590      	push	{r4, r7, lr}
 810d6fe:	b08d      	sub	sp, #52	; 0x34
 810d700:	af02      	add	r7, sp, #8
 810d702:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  SD_InitTypeDef Init;
  uint32_t sdmmc_clk;

  /* Default SDMMC peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDMMC_CLOCK_EDGE_RISING;
 810d704:	2300      	movs	r3, #0
 810d706:	60fb      	str	r3, [r7, #12]
  Init.ClockPowerSave      = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 810d708:	2300      	movs	r3, #0
 810d70a:	613b      	str	r3, [r7, #16]
  Init.BusWide             = SDMMC_BUS_WIDE_1B;
 810d70c:	2300      	movs	r3, #0
 810d70e:	617b      	str	r3, [r7, #20]
  Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 810d710:	2300      	movs	r3, #0
 810d712:	61bb      	str	r3, [r7, #24]

  /* Init Clock should be less or equal to 400Khz*/
  sdmmc_clk     = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SDMMC);
 810d714:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 810d718:	f04f 0100 	mov.w	r1, #0
 810d71c:	f7fd ff9a 	bl	810b654 <HAL_RCCEx_GetPeriphCLKFreq>
 810d720:	6278      	str	r0, [r7, #36]	; 0x24
  if (sdmmc_clk == 0U)
 810d722:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 810d724:	2b00      	cmp	r3, #0
 810d726:	d109      	bne.n	810d73c <HAL_SD_InitCard+0x40>
  {
    hsd->State = HAL_SD_STATE_READY;
 810d728:	687b      	ldr	r3, [r7, #4]
 810d72a:	2201      	movs	r2, #1
 810d72c:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    hsd->ErrorCode = SDMMC_ERROR_INVALID_PARAMETER;
 810d730:	687b      	ldr	r3, [r7, #4]
 810d732:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 810d736:	635a      	str	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 810d738:	2301      	movs	r3, #1
 810d73a:	e070      	b.n	810d81e <HAL_SD_InitCard+0x122>
  }
  Init.ClockDiv = sdmmc_clk / (2U * SD_INIT_FREQ);
 810d73c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 810d73e:	0a1b      	lsrs	r3, r3, #8
 810d740:	4a39      	ldr	r2, [pc, #228]	; (810d828 <HAL_SD_InitCard+0x12c>)
 810d742:	fba2 2303 	umull	r2, r3, r2, r3
 810d746:	091b      	lsrs	r3, r3, #4
 810d748:	61fb      	str	r3, [r7, #28]
  /* Set Transceiver polarity */
  hsd->Instance->POWER |= SDMMC_POWER_DIRPOL;
#endif /* USE_SD_TRANSCEIVER  */

  /* Initialize SDMMC peripheral interface with default configuration */
  (void)SDMMC_Init(hsd->Instance, Init);
 810d74a:	687b      	ldr	r3, [r7, #4]
 810d74c:	681c      	ldr	r4, [r3, #0]
 810d74e:	466a      	mov	r2, sp
 810d750:	f107 0318 	add.w	r3, r7, #24
 810d754:	e893 0003 	ldmia.w	r3, {r0, r1}
 810d758:	e882 0003 	stmia.w	r2, {r0, r1}
 810d75c:	f107 030c 	add.w	r3, r7, #12
 810d760:	cb0e      	ldmia	r3, {r1, r2, r3}
 810d762:	4620      	mov	r0, r4
 810d764:	f003 fb02 	bl	8110d6c <SDMMC_Init>

  /* Set Power State to ON */
  (void)SDMMC_PowerState_ON(hsd->Instance);
 810d768:	687b      	ldr	r3, [r7, #4]
 810d76a:	681b      	ldr	r3, [r3, #0]
 810d76c:	4618      	mov	r0, r3
 810d76e:	f003 fb34 	bl	8110dda <SDMMC_PowerState_ON>

  /* wait 74 Cycles: required power up waiting time before starting
     the SD initialization sequence */
  if (Init.ClockDiv != 0U)
 810d772:	69fb      	ldr	r3, [r7, #28]
 810d774:	2b00      	cmp	r3, #0
 810d776:	d005      	beq.n	810d784 <HAL_SD_InitCard+0x88>
  {
    sdmmc_clk = sdmmc_clk / (2U * Init.ClockDiv);
 810d778:	69fb      	ldr	r3, [r7, #28]
 810d77a:	005b      	lsls	r3, r3, #1
 810d77c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 810d77e:	fbb2 f3f3 	udiv	r3, r2, r3
 810d782:	627b      	str	r3, [r7, #36]	; 0x24
  }

  if (sdmmc_clk != 0U)
 810d784:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 810d786:	2b00      	cmp	r3, #0
 810d788:	d007      	beq.n	810d79a <HAL_SD_InitCard+0x9e>
  {
    HAL_Delay(1U + (74U * 1000U / (sdmmc_clk)));
 810d78a:	4a28      	ldr	r2, [pc, #160]	; (810d82c <HAL_SD_InitCard+0x130>)
 810d78c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 810d78e:	fbb2 f3f3 	udiv	r3, r2, r3
 810d792:	3301      	adds	r3, #1
 810d794:	4618      	mov	r0, r3
 810d796:	f7f9 ff4d 	bl	8107634 <HAL_Delay>
  }

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 810d79a:	6878      	ldr	r0, [r7, #4]
 810d79c:	f000 fcac 	bl	810e0f8 <SD_PowerON>
 810d7a0:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 810d7a2:	6a3b      	ldr	r3, [r7, #32]
 810d7a4:	2b00      	cmp	r3, #0
 810d7a6:	d00b      	beq.n	810d7c0 <HAL_SD_InitCard+0xc4>
  {
    hsd->State = HAL_SD_STATE_READY;
 810d7a8:	687b      	ldr	r3, [r7, #4]
 810d7aa:	2201      	movs	r2, #1
 810d7ac:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    hsd->ErrorCode |= errorstate;
 810d7b0:	687b      	ldr	r3, [r7, #4]
 810d7b2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 810d7b4:	6a3b      	ldr	r3, [r7, #32]
 810d7b6:	431a      	orrs	r2, r3
 810d7b8:	687b      	ldr	r3, [r7, #4]
 810d7ba:	635a      	str	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 810d7bc:	2301      	movs	r3, #1
 810d7be:	e02e      	b.n	810d81e <HAL_SD_InitCard+0x122>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 810d7c0:	6878      	ldr	r0, [r7, #4]
 810d7c2:	f000 fbcb 	bl	810df5c <SD_InitCard>
 810d7c6:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 810d7c8:	6a3b      	ldr	r3, [r7, #32]
 810d7ca:	2b00      	cmp	r3, #0
 810d7cc:	d00b      	beq.n	810d7e6 <HAL_SD_InitCard+0xea>
  {
    hsd->State = HAL_SD_STATE_READY;
 810d7ce:	687b      	ldr	r3, [r7, #4]
 810d7d0:	2201      	movs	r2, #1
 810d7d2:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    hsd->ErrorCode |= errorstate;
 810d7d6:	687b      	ldr	r3, [r7, #4]
 810d7d8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 810d7da:	6a3b      	ldr	r3, [r7, #32]
 810d7dc:	431a      	orrs	r2, r3
 810d7de:	687b      	ldr	r3, [r7, #4]
 810d7e0:	635a      	str	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 810d7e2:	2301      	movs	r3, #1
 810d7e4:	e01b      	b.n	810d81e <HAL_SD_InitCard+0x122>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 810d7e6:	687b      	ldr	r3, [r7, #4]
 810d7e8:	681b      	ldr	r3, [r3, #0]
 810d7ea:	f44f 7100 	mov.w	r1, #512	; 0x200
 810d7ee:	4618      	mov	r0, r3
 810d7f0:	f003 fb88 	bl	8110f04 <SDMMC_CmdBlockLength>
 810d7f4:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 810d7f6:	6a3b      	ldr	r3, [r7, #32]
 810d7f8:	2b00      	cmp	r3, #0
 810d7fa:	d00f      	beq.n	810d81c <HAL_SD_InitCard+0x120>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 810d7fc:	687b      	ldr	r3, [r7, #4]
 810d7fe:	681b      	ldr	r3, [r3, #0]
 810d800:	4a0b      	ldr	r2, [pc, #44]	; (810d830 <HAL_SD_InitCard+0x134>)
 810d802:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 810d804:	687b      	ldr	r3, [r7, #4]
 810d806:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 810d808:	6a3b      	ldr	r3, [r7, #32]
 810d80a:	431a      	orrs	r2, r3
 810d80c:	687b      	ldr	r3, [r7, #4]
 810d80e:	635a      	str	r2, [r3, #52]	; 0x34
    hsd->State = HAL_SD_STATE_READY;
 810d810:	687b      	ldr	r3, [r7, #4]
 810d812:	2201      	movs	r2, #1
 810d814:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    return HAL_ERROR;
 810d818:	2301      	movs	r3, #1
 810d81a:	e000      	b.n	810d81e <HAL_SD_InitCard+0x122>
  }

  return HAL_OK;
 810d81c:	2300      	movs	r3, #0
}
 810d81e:	4618      	mov	r0, r3
 810d820:	372c      	adds	r7, #44	; 0x2c
 810d822:	46bd      	mov	sp, r7
 810d824:	bd90      	pop	{r4, r7, pc}
 810d826:	bf00      	nop
 810d828:	014f8b59 	.word	0x014f8b59
 810d82c:	00012110 	.word	0x00012110
 810d830:	1fe00fff 	.word	0x1fe00fff

0810d834 <HAL_SD_GetCardCSD>:
  * @param  pCSD: Pointer to a HAL_SD_CardCSDTypeDef structure that
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 810d834:	b480      	push	{r7}
 810d836:	b083      	sub	sp, #12
 810d838:	af00      	add	r7, sp, #0
 810d83a:	6078      	str	r0, [r7, #4]
 810d83c:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 810d83e:	687b      	ldr	r3, [r7, #4]
 810d840:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 810d842:	0f9b      	lsrs	r3, r3, #30
 810d844:	b2da      	uxtb	r2, r3
 810d846:	683b      	ldr	r3, [r7, #0]
 810d848:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 810d84a:	687b      	ldr	r3, [r7, #4]
 810d84c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 810d84e:	0e9b      	lsrs	r3, r3, #26
 810d850:	b2db      	uxtb	r3, r3
 810d852:	f003 030f 	and.w	r3, r3, #15
 810d856:	b2da      	uxtb	r2, r3
 810d858:	683b      	ldr	r3, [r7, #0]
 810d85a:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 810d85c:	687b      	ldr	r3, [r7, #4]
 810d85e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 810d860:	0e1b      	lsrs	r3, r3, #24
 810d862:	b2db      	uxtb	r3, r3
 810d864:	f003 0303 	and.w	r3, r3, #3
 810d868:	b2da      	uxtb	r2, r3
 810d86a:	683b      	ldr	r3, [r7, #0]
 810d86c:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 810d86e:	687b      	ldr	r3, [r7, #4]
 810d870:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 810d872:	0c1b      	lsrs	r3, r3, #16
 810d874:	b2da      	uxtb	r2, r3
 810d876:	683b      	ldr	r3, [r7, #0]
 810d878:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 810d87a:	687b      	ldr	r3, [r7, #4]
 810d87c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 810d87e:	0a1b      	lsrs	r3, r3, #8
 810d880:	b2da      	uxtb	r2, r3
 810d882:	683b      	ldr	r3, [r7, #0]
 810d884:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 810d886:	687b      	ldr	r3, [r7, #4]
 810d888:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 810d88a:	b2da      	uxtb	r2, r3
 810d88c:	683b      	ldr	r3, [r7, #0]
 810d88e:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 810d890:	687b      	ldr	r3, [r7, #4]
 810d892:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 810d894:	0d1b      	lsrs	r3, r3, #20
 810d896:	b29a      	uxth	r2, r3
 810d898:	683b      	ldr	r3, [r7, #0]
 810d89a:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 810d89c:	687b      	ldr	r3, [r7, #4]
 810d89e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 810d8a0:	0c1b      	lsrs	r3, r3, #16
 810d8a2:	b2db      	uxtb	r3, r3
 810d8a4:	f003 030f 	and.w	r3, r3, #15
 810d8a8:	b2da      	uxtb	r2, r3
 810d8aa:	683b      	ldr	r3, [r7, #0]
 810d8ac:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 810d8ae:	687b      	ldr	r3, [r7, #4]
 810d8b0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 810d8b2:	0bdb      	lsrs	r3, r3, #15
 810d8b4:	b2db      	uxtb	r3, r3
 810d8b6:	f003 0301 	and.w	r3, r3, #1
 810d8ba:	b2da      	uxtb	r2, r3
 810d8bc:	683b      	ldr	r3, [r7, #0]
 810d8be:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 810d8c0:	687b      	ldr	r3, [r7, #4]
 810d8c2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 810d8c4:	0b9b      	lsrs	r3, r3, #14
 810d8c6:	b2db      	uxtb	r3, r3
 810d8c8:	f003 0301 	and.w	r3, r3, #1
 810d8cc:	b2da      	uxtb	r2, r3
 810d8ce:	683b      	ldr	r3, [r7, #0]
 810d8d0:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 810d8d2:	687b      	ldr	r3, [r7, #4]
 810d8d4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 810d8d6:	0b5b      	lsrs	r3, r3, #13
 810d8d8:	b2db      	uxtb	r3, r3
 810d8da:	f003 0301 	and.w	r3, r3, #1
 810d8de:	b2da      	uxtb	r2, r3
 810d8e0:	683b      	ldr	r3, [r7, #0]
 810d8e2:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 810d8e4:	687b      	ldr	r3, [r7, #4]
 810d8e6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 810d8e8:	0b1b      	lsrs	r3, r3, #12
 810d8ea:	b2db      	uxtb	r3, r3
 810d8ec:	f003 0301 	and.w	r3, r3, #1
 810d8f0:	b2da      	uxtb	r2, r3
 810d8f2:	683b      	ldr	r3, [r7, #0]
 810d8f4:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 810d8f6:	683b      	ldr	r3, [r7, #0]
 810d8f8:	2200      	movs	r2, #0
 810d8fa:	735a      	strb	r2, [r3, #13]

  if (hsd->SdCard.CardType == CARD_SDSC)
 810d8fc:	687b      	ldr	r3, [r7, #4]
 810d8fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 810d900:	2b00      	cmp	r3, #0
 810d902:	d163      	bne.n	810d9cc <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 810d904:	687b      	ldr	r3, [r7, #4]
 810d906:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 810d908:	009a      	lsls	r2, r3, #2
 810d90a:	f640 73fc 	movw	r3, #4092	; 0xffc
 810d90e:	4013      	ands	r3, r2
 810d910:	687a      	ldr	r2, [r7, #4]
 810d912:	6e52      	ldr	r2, [r2, #100]	; 0x64
 810d914:	0f92      	lsrs	r2, r2, #30
 810d916:	431a      	orrs	r2, r3
 810d918:	683b      	ldr	r3, [r7, #0]
 810d91a:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 810d91c:	687b      	ldr	r3, [r7, #4]
 810d91e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 810d920:	0edb      	lsrs	r3, r3, #27
 810d922:	b2db      	uxtb	r3, r3
 810d924:	f003 0307 	and.w	r3, r3, #7
 810d928:	b2da      	uxtb	r2, r3
 810d92a:	683b      	ldr	r3, [r7, #0]
 810d92c:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 810d92e:	687b      	ldr	r3, [r7, #4]
 810d930:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 810d932:	0e1b      	lsrs	r3, r3, #24
 810d934:	b2db      	uxtb	r3, r3
 810d936:	f003 0307 	and.w	r3, r3, #7
 810d93a:	b2da      	uxtb	r2, r3
 810d93c:	683b      	ldr	r3, [r7, #0]
 810d93e:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 810d940:	687b      	ldr	r3, [r7, #4]
 810d942:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 810d944:	0d5b      	lsrs	r3, r3, #21
 810d946:	b2db      	uxtb	r3, r3
 810d948:	f003 0307 	and.w	r3, r3, #7
 810d94c:	b2da      	uxtb	r2, r3
 810d94e:	683b      	ldr	r3, [r7, #0]
 810d950:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 810d952:	687b      	ldr	r3, [r7, #4]
 810d954:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 810d956:	0c9b      	lsrs	r3, r3, #18
 810d958:	b2db      	uxtb	r3, r3
 810d95a:	f003 0307 	and.w	r3, r3, #7
 810d95e:	b2da      	uxtb	r2, r3
 810d960:	683b      	ldr	r3, [r7, #0]
 810d962:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 810d964:	687b      	ldr	r3, [r7, #4]
 810d966:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 810d968:	0bdb      	lsrs	r3, r3, #15
 810d96a:	b2db      	uxtb	r3, r3
 810d96c:	f003 0307 	and.w	r3, r3, #7
 810d970:	b2da      	uxtb	r2, r3
 810d972:	683b      	ldr	r3, [r7, #0]
 810d974:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 810d976:	683b      	ldr	r3, [r7, #0]
 810d978:	691b      	ldr	r3, [r3, #16]
 810d97a:	1c5a      	adds	r2, r3, #1
 810d97c:	687b      	ldr	r3, [r7, #4]
 810d97e:	649a      	str	r2, [r3, #72]	; 0x48
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 810d980:	683b      	ldr	r3, [r7, #0]
 810d982:	7e1b      	ldrb	r3, [r3, #24]
 810d984:	b2db      	uxtb	r3, r3
 810d986:	f003 0307 	and.w	r3, r3, #7
 810d98a:	3302      	adds	r3, #2
 810d98c:	2201      	movs	r2, #1
 810d98e:	fa02 f303 	lsl.w	r3, r2, r3
 810d992:	687a      	ldr	r2, [r7, #4]
 810d994:	6c92      	ldr	r2, [r2, #72]	; 0x48
 810d996:	fb03 f202 	mul.w	r2, r3, r2
 810d99a:	687b      	ldr	r3, [r7, #4]
 810d99c:	649a      	str	r2, [r3, #72]	; 0x48
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 810d99e:	683b      	ldr	r3, [r7, #0]
 810d9a0:	7a1b      	ldrb	r3, [r3, #8]
 810d9a2:	b2db      	uxtb	r3, r3
 810d9a4:	f003 030f 	and.w	r3, r3, #15
 810d9a8:	2201      	movs	r2, #1
 810d9aa:	409a      	lsls	r2, r3
 810d9ac:	687b      	ldr	r3, [r7, #4]
 810d9ae:	64da      	str	r2, [r3, #76]	; 0x4c

    hsd->SdCard.LogBlockNbr = (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 810d9b0:	687b      	ldr	r3, [r7, #4]
 810d9b2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 810d9b4:	687a      	ldr	r2, [r7, #4]
 810d9b6:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 810d9b8:	0a52      	lsrs	r2, r2, #9
 810d9ba:	fb03 f202 	mul.w	r2, r3, r2
 810d9be:	687b      	ldr	r3, [r7, #4]
 810d9c0:	651a      	str	r2, [r3, #80]	; 0x50
    hsd->SdCard.LogBlockSize = 512U;
 810d9c2:	687b      	ldr	r3, [r7, #4]
 810d9c4:	f44f 7200 	mov.w	r2, #512	; 0x200
 810d9c8:	655a      	str	r2, [r3, #84]	; 0x54
 810d9ca:	e031      	b.n	810da30 <HAL_SD_GetCardCSD+0x1fc>
  }
  else if (hsd->SdCard.CardType == CARD_SDHC_SDXC)
 810d9cc:	687b      	ldr	r3, [r7, #4]
 810d9ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 810d9d0:	2b01      	cmp	r3, #1
 810d9d2:	d11d      	bne.n	810da10 <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 810d9d4:	687b      	ldr	r3, [r7, #4]
 810d9d6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 810d9d8:	041b      	lsls	r3, r3, #16
 810d9da:	f403 127c 	and.w	r2, r3, #4128768	; 0x3f0000
 810d9de:	687b      	ldr	r3, [r7, #4]
 810d9e0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 810d9e2:	0c1b      	lsrs	r3, r3, #16
 810d9e4:	431a      	orrs	r2, r3
 810d9e6:	683b      	ldr	r3, [r7, #0]
 810d9e8:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 810d9ea:	683b      	ldr	r3, [r7, #0]
 810d9ec:	691b      	ldr	r3, [r3, #16]
 810d9ee:	3301      	adds	r3, #1
 810d9f0:	029a      	lsls	r2, r3, #10
 810d9f2:	687b      	ldr	r3, [r7, #4]
 810d9f4:	649a      	str	r2, [r3, #72]	; 0x48
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 810d9f6:	687b      	ldr	r3, [r7, #4]
 810d9f8:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 810d9fa:	687b      	ldr	r3, [r7, #4]
 810d9fc:	651a      	str	r2, [r3, #80]	; 0x50
    hsd->SdCard.BlockSize = 512U;
 810d9fe:	687b      	ldr	r3, [r7, #4]
 810da00:	f44f 7200 	mov.w	r2, #512	; 0x200
 810da04:	64da      	str	r2, [r3, #76]	; 0x4c
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 810da06:	687b      	ldr	r3, [r7, #4]
 810da08:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 810da0a:	687b      	ldr	r3, [r7, #4]
 810da0c:	655a      	str	r2, [r3, #84]	; 0x54
 810da0e:	e00f      	b.n	810da30 <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 810da10:	687b      	ldr	r3, [r7, #4]
 810da12:	681b      	ldr	r3, [r3, #0]
 810da14:	4a58      	ldr	r2, [pc, #352]	; (810db78 <HAL_SD_GetCardCSD+0x344>)
 810da16:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 810da18:	687b      	ldr	r3, [r7, #4]
 810da1a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 810da1c:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 810da20:	687b      	ldr	r3, [r7, #4]
 810da22:	635a      	str	r2, [r3, #52]	; 0x34
    hsd->State = HAL_SD_STATE_READY;
 810da24:	687b      	ldr	r3, [r7, #4]
 810da26:	2201      	movs	r2, #1
 810da28:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    return HAL_ERROR;
 810da2c:	2301      	movs	r3, #1
 810da2e:	e09d      	b.n	810db6c <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 810da30:	687b      	ldr	r3, [r7, #4]
 810da32:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 810da34:	0b9b      	lsrs	r3, r3, #14
 810da36:	b2db      	uxtb	r3, r3
 810da38:	f003 0301 	and.w	r3, r3, #1
 810da3c:	b2da      	uxtb	r2, r3
 810da3e:	683b      	ldr	r3, [r7, #0]
 810da40:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 810da42:	687b      	ldr	r3, [r7, #4]
 810da44:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 810da46:	09db      	lsrs	r3, r3, #7
 810da48:	b2db      	uxtb	r3, r3
 810da4a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 810da4e:	b2da      	uxtb	r2, r3
 810da50:	683b      	ldr	r3, [r7, #0]
 810da52:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 810da54:	687b      	ldr	r3, [r7, #4]
 810da56:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 810da58:	b2db      	uxtb	r3, r3
 810da5a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 810da5e:	b2da      	uxtb	r2, r3
 810da60:	683b      	ldr	r3, [r7, #0]
 810da62:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 810da64:	687b      	ldr	r3, [r7, #4]
 810da66:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 810da68:	0fdb      	lsrs	r3, r3, #31
 810da6a:	b2da      	uxtb	r2, r3
 810da6c:	683b      	ldr	r3, [r7, #0]
 810da6e:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 810da70:	687b      	ldr	r3, [r7, #4]
 810da72:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 810da74:	0f5b      	lsrs	r3, r3, #29
 810da76:	b2db      	uxtb	r3, r3
 810da78:	f003 0303 	and.w	r3, r3, #3
 810da7c:	b2da      	uxtb	r2, r3
 810da7e:	683b      	ldr	r3, [r7, #0]
 810da80:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 810da82:	687b      	ldr	r3, [r7, #4]
 810da84:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 810da86:	0e9b      	lsrs	r3, r3, #26
 810da88:	b2db      	uxtb	r3, r3
 810da8a:	f003 0307 	and.w	r3, r3, #7
 810da8e:	b2da      	uxtb	r2, r3
 810da90:	683b      	ldr	r3, [r7, #0]
 810da92:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen = (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 810da94:	687b      	ldr	r3, [r7, #4]
 810da96:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 810da98:	0d9b      	lsrs	r3, r3, #22
 810da9a:	b2db      	uxtb	r3, r3
 810da9c:	f003 030f 	and.w	r3, r3, #15
 810daa0:	b2da      	uxtb	r2, r3
 810daa2:	683b      	ldr	r3, [r7, #0]
 810daa4:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 810daa6:	687b      	ldr	r3, [r7, #4]
 810daa8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 810daaa:	0d5b      	lsrs	r3, r3, #21
 810daac:	b2db      	uxtb	r3, r3
 810daae:	f003 0301 	and.w	r3, r3, #1
 810dab2:	b2da      	uxtb	r2, r3
 810dab4:	683b      	ldr	r3, [r7, #0]
 810dab6:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 810daba:	683b      	ldr	r3, [r7, #0]
 810dabc:	2200      	movs	r2, #0
 810dabe:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 810dac2:	687b      	ldr	r3, [r7, #4]
 810dac4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 810dac6:	0c1b      	lsrs	r3, r3, #16
 810dac8:	b2db      	uxtb	r3, r3
 810daca:	f003 0301 	and.w	r3, r3, #1
 810dace:	b2da      	uxtb	r2, r3
 810dad0:	683b      	ldr	r3, [r7, #0]
 810dad2:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 810dad6:	687b      	ldr	r3, [r7, #4]
 810dad8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 810dada:	0bdb      	lsrs	r3, r3, #15
 810dadc:	b2db      	uxtb	r3, r3
 810dade:	f003 0301 	and.w	r3, r3, #1
 810dae2:	b2da      	uxtb	r2, r3
 810dae4:	683b      	ldr	r3, [r7, #0]
 810dae6:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 810daea:	687b      	ldr	r3, [r7, #4]
 810daec:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 810daee:	0b9b      	lsrs	r3, r3, #14
 810daf0:	b2db      	uxtb	r3, r3
 810daf2:	f003 0301 	and.w	r3, r3, #1
 810daf6:	b2da      	uxtb	r2, r3
 810daf8:	683b      	ldr	r3, [r7, #0]
 810dafa:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 810dafe:	687b      	ldr	r3, [r7, #4]
 810db00:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 810db02:	0b5b      	lsrs	r3, r3, #13
 810db04:	b2db      	uxtb	r3, r3
 810db06:	f003 0301 	and.w	r3, r3, #1
 810db0a:	b2da      	uxtb	r2, r3
 810db0c:	683b      	ldr	r3, [r7, #0]
 810db0e:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 810db12:	687b      	ldr	r3, [r7, #4]
 810db14:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 810db16:	0b1b      	lsrs	r3, r3, #12
 810db18:	b2db      	uxtb	r3, r3
 810db1a:	f003 0301 	and.w	r3, r3, #1
 810db1e:	b2da      	uxtb	r2, r3
 810db20:	683b      	ldr	r3, [r7, #0]
 810db22:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 810db26:	687b      	ldr	r3, [r7, #4]
 810db28:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 810db2a:	0a9b      	lsrs	r3, r3, #10
 810db2c:	b2db      	uxtb	r3, r3
 810db2e:	f003 0303 	and.w	r3, r3, #3
 810db32:	b2da      	uxtb	r2, r3
 810db34:	683b      	ldr	r3, [r7, #0]
 810db36:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27

  pCSD->ECC = (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 810db3a:	687b      	ldr	r3, [r7, #4]
 810db3c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 810db3e:	0a1b      	lsrs	r3, r3, #8
 810db40:	b2db      	uxtb	r3, r3
 810db42:	f003 0303 	and.w	r3, r3, #3
 810db46:	b2da      	uxtb	r2, r3
 810db48:	683b      	ldr	r3, [r7, #0]
 810db4a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 810db4e:	687b      	ldr	r3, [r7, #4]
 810db50:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 810db52:	085b      	lsrs	r3, r3, #1
 810db54:	b2db      	uxtb	r3, r3
 810db56:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 810db5a:	b2da      	uxtb	r2, r3
 810db5c:	683b      	ldr	r3, [r7, #0]
 810db5e:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  pCSD->Reserved4 = 1;
 810db62:	683b      	ldr	r3, [r7, #0]
 810db64:	2201      	movs	r2, #1
 810db66:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

  return HAL_OK;
 810db6a:	2300      	movs	r3, #0
}
 810db6c:	4618      	mov	r0, r3
 810db6e:	370c      	adds	r7, #12
 810db70:	46bd      	mov	sp, r7
 810db72:	f85d 7b04 	ldr.w	r7, [sp], #4
 810db76:	4770      	bx	lr
 810db78:	1fe00fff 	.word	0x1fe00fff

0810db7c <HAL_SD_GetCardStatus>:
  * @param  pStatus: Pointer to the HAL_SD_CardStatusTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardStatus(SD_HandleTypeDef *hsd, HAL_SD_CardStatusTypeDef *pStatus)
{
 810db7c:	b580      	push	{r7, lr}
 810db7e:	b094      	sub	sp, #80	; 0x50
 810db80:	af00      	add	r7, sp, #0
 810db82:	6078      	str	r0, [r7, #4]
 810db84:	6039      	str	r1, [r7, #0]
  uint32_t sd_status[16];
  uint32_t errorstate;
  HAL_StatusTypeDef status = HAL_OK;
 810db86:	2300      	movs	r3, #0
 810db88:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f

  if (hsd->State == HAL_SD_STATE_BUSY)
 810db8c:	687b      	ldr	r3, [r7, #4]
 810db8e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 810db92:	b2db      	uxtb	r3, r3
 810db94:	2b03      	cmp	r3, #3
 810db96:	d101      	bne.n	810db9c <HAL_SD_GetCardStatus+0x20>
  {
    return HAL_ERROR;
 810db98:	2301      	movs	r3, #1
 810db9a:	e0a7      	b.n	810dcec <HAL_SD_GetCardStatus+0x170>
  }

  errorstate = SD_SendSDStatus(hsd, sd_status);
 810db9c:	f107 0308 	add.w	r3, r7, #8
 810dba0:	4619      	mov	r1, r3
 810dba2:	6878      	ldr	r0, [r7, #4]
 810dba4:	f000 fb36 	bl	810e214 <SD_SendSDStatus>
 810dba8:	64b8      	str	r0, [r7, #72]	; 0x48
  if (errorstate != HAL_SD_ERROR_NONE)
 810dbaa:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 810dbac:	2b00      	cmp	r3, #0
 810dbae:	d011      	beq.n	810dbd4 <HAL_SD_GetCardStatus+0x58>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 810dbb0:	687b      	ldr	r3, [r7, #4]
 810dbb2:	681b      	ldr	r3, [r3, #0]
 810dbb4:	4a4f      	ldr	r2, [pc, #316]	; (810dcf4 <HAL_SD_GetCardStatus+0x178>)
 810dbb6:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 810dbb8:	687b      	ldr	r3, [r7, #4]
 810dbba:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 810dbbc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 810dbbe:	431a      	orrs	r2, r3
 810dbc0:	687b      	ldr	r3, [r7, #4]
 810dbc2:	635a      	str	r2, [r3, #52]	; 0x34
    hsd->State = HAL_SD_STATE_READY;
 810dbc4:	687b      	ldr	r3, [r7, #4]
 810dbc6:	2201      	movs	r2, #1
 810dbc8:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    status = HAL_ERROR;
 810dbcc:	2301      	movs	r3, #1
 810dbce:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
 810dbd2:	e070      	b.n	810dcb6 <HAL_SD_GetCardStatus+0x13a>
  }
  else
  {
    pStatus->DataBusWidth = (uint8_t)((sd_status[0] & 0xC0U) >> 6U);
 810dbd4:	68bb      	ldr	r3, [r7, #8]
 810dbd6:	099b      	lsrs	r3, r3, #6
 810dbd8:	b2db      	uxtb	r3, r3
 810dbda:	f003 0303 	and.w	r3, r3, #3
 810dbde:	b2da      	uxtb	r2, r3
 810dbe0:	683b      	ldr	r3, [r7, #0]
 810dbe2:	701a      	strb	r2, [r3, #0]

    pStatus->SecuredMode = (uint8_t)((sd_status[0] & 0x20U) >> 5U);
 810dbe4:	68bb      	ldr	r3, [r7, #8]
 810dbe6:	095b      	lsrs	r3, r3, #5
 810dbe8:	b2db      	uxtb	r3, r3
 810dbea:	f003 0301 	and.w	r3, r3, #1
 810dbee:	b2da      	uxtb	r2, r3
 810dbf0:	683b      	ldr	r3, [r7, #0]
 810dbf2:	705a      	strb	r2, [r3, #1]

    pStatus->CardType = (uint16_t)(((sd_status[0] & 0x00FF0000U) >> 8U) | ((sd_status[0] & 0xFF000000U) >> 24U));
 810dbf4:	68bb      	ldr	r3, [r7, #8]
 810dbf6:	0a1b      	lsrs	r3, r3, #8
 810dbf8:	b29b      	uxth	r3, r3
 810dbfa:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 810dbfe:	b29a      	uxth	r2, r3
 810dc00:	68bb      	ldr	r3, [r7, #8]
 810dc02:	0e1b      	lsrs	r3, r3, #24
 810dc04:	b29b      	uxth	r3, r3
 810dc06:	4313      	orrs	r3, r2
 810dc08:	b29a      	uxth	r2, r3
 810dc0a:	683b      	ldr	r3, [r7, #0]
 810dc0c:	805a      	strh	r2, [r3, #2]

    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 810dc0e:	68fb      	ldr	r3, [r7, #12]
 810dc10:	061a      	lsls	r2, r3, #24
 810dc12:	68fb      	ldr	r3, [r7, #12]
 810dc14:	021b      	lsls	r3, r3, #8
 810dc16:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 810dc1a:	431a      	orrs	r2, r3
                                  ((sd_status[1] & 0xFF0000U) >> 8U) | ((sd_status[1] & 0xFF000000U) >> 24U));
 810dc1c:	68fb      	ldr	r3, [r7, #12]
 810dc1e:	0a1b      	lsrs	r3, r3, #8
 810dc20:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 810dc24:	431a      	orrs	r2, r3
                                  ((sd_status[1] & 0xFF0000U) >> 8U) | ((sd_status[1] & 0xFF000000U) >> 24U));
 810dc26:	68fb      	ldr	r3, [r7, #12]
 810dc28:	0e1b      	lsrs	r3, r3, #24
 810dc2a:	431a      	orrs	r2, r3
    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 810dc2c:	683b      	ldr	r3, [r7, #0]
 810dc2e:	605a      	str	r2, [r3, #4]

    pStatus->SpeedClass = (uint8_t)(sd_status[2] & 0xFFU);
 810dc30:	693b      	ldr	r3, [r7, #16]
 810dc32:	b2da      	uxtb	r2, r3
 810dc34:	683b      	ldr	r3, [r7, #0]
 810dc36:	721a      	strb	r2, [r3, #8]

    pStatus->PerformanceMove = (uint8_t)((sd_status[2] & 0xFF00U) >> 8U);
 810dc38:	693b      	ldr	r3, [r7, #16]
 810dc3a:	0a1b      	lsrs	r3, r3, #8
 810dc3c:	b2da      	uxtb	r2, r3
 810dc3e:	683b      	ldr	r3, [r7, #0]
 810dc40:	725a      	strb	r2, [r3, #9]

    pStatus->AllocationUnitSize = (uint8_t)((sd_status[2] & 0xF00000U) >> 20U);
 810dc42:	693b      	ldr	r3, [r7, #16]
 810dc44:	0d1b      	lsrs	r3, r3, #20
 810dc46:	b2db      	uxtb	r3, r3
 810dc48:	f003 030f 	and.w	r3, r3, #15
 810dc4c:	b2da      	uxtb	r2, r3
 810dc4e:	683b      	ldr	r3, [r7, #0]
 810dc50:	729a      	strb	r2, [r3, #10]

    pStatus->EraseSize = (uint16_t)(((sd_status[2] & 0xFF000000U) >> 16U) | (sd_status[3] & 0xFFU));
 810dc52:	693b      	ldr	r3, [r7, #16]
 810dc54:	0c1b      	lsrs	r3, r3, #16
 810dc56:	b29b      	uxth	r3, r3
 810dc58:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 810dc5c:	b29a      	uxth	r2, r3
 810dc5e:	697b      	ldr	r3, [r7, #20]
 810dc60:	b29b      	uxth	r3, r3
 810dc62:	b2db      	uxtb	r3, r3
 810dc64:	b29b      	uxth	r3, r3
 810dc66:	4313      	orrs	r3, r2
 810dc68:	b29a      	uxth	r2, r3
 810dc6a:	683b      	ldr	r3, [r7, #0]
 810dc6c:	819a      	strh	r2, [r3, #12]

    pStatus->EraseTimeout = (uint8_t)((sd_status[3] & 0xFC00U) >> 10U);
 810dc6e:	697b      	ldr	r3, [r7, #20]
 810dc70:	0a9b      	lsrs	r3, r3, #10
 810dc72:	b2db      	uxtb	r3, r3
 810dc74:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 810dc78:	b2da      	uxtb	r2, r3
 810dc7a:	683b      	ldr	r3, [r7, #0]
 810dc7c:	739a      	strb	r2, [r3, #14]

    pStatus->EraseOffset = (uint8_t)((sd_status[3] & 0x0300U) >> 8U);
 810dc7e:	697b      	ldr	r3, [r7, #20]
 810dc80:	0a1b      	lsrs	r3, r3, #8
 810dc82:	b2db      	uxtb	r3, r3
 810dc84:	f003 0303 	and.w	r3, r3, #3
 810dc88:	b2da      	uxtb	r2, r3
 810dc8a:	683b      	ldr	r3, [r7, #0]
 810dc8c:	73da      	strb	r2, [r3, #15]

    pStatus->UhsSpeedGrade = (uint8_t)((sd_status[3] & 0x00F0U) >> 4U);
 810dc8e:	697b      	ldr	r3, [r7, #20]
 810dc90:	091b      	lsrs	r3, r3, #4
 810dc92:	b2db      	uxtb	r3, r3
 810dc94:	f003 030f 	and.w	r3, r3, #15
 810dc98:	b2da      	uxtb	r2, r3
 810dc9a:	683b      	ldr	r3, [r7, #0]
 810dc9c:	741a      	strb	r2, [r3, #16]
    pStatus->UhsAllocationUnitSize = (uint8_t)(sd_status[3] & 0x000FU) ;
 810dc9e:	697b      	ldr	r3, [r7, #20]
 810dca0:	b2db      	uxtb	r3, r3
 810dca2:	f003 030f 	and.w	r3, r3, #15
 810dca6:	b2da      	uxtb	r2, r3
 810dca8:	683b      	ldr	r3, [r7, #0]
 810dcaa:	745a      	strb	r2, [r3, #17]
    pStatus->VideoSpeedClass = (uint8_t)((sd_status[4] & 0xFF000000U) >> 24U);
 810dcac:	69bb      	ldr	r3, [r7, #24]
 810dcae:	0e1b      	lsrs	r3, r3, #24
 810dcb0:	b2da      	uxtb	r2, r3
 810dcb2:	683b      	ldr	r3, [r7, #0]
 810dcb4:	749a      	strb	r2, [r3, #18]
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 810dcb6:	687b      	ldr	r3, [r7, #4]
 810dcb8:	681b      	ldr	r3, [r3, #0]
 810dcba:	f44f 7100 	mov.w	r1, #512	; 0x200
 810dcbe:	4618      	mov	r0, r3
 810dcc0:	f003 f920 	bl	8110f04 <SDMMC_CmdBlockLength>
 810dcc4:	64b8      	str	r0, [r7, #72]	; 0x48
  if (errorstate != HAL_SD_ERROR_NONE)
 810dcc6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 810dcc8:	2b00      	cmp	r3, #0
 810dcca:	d00d      	beq.n	810dce8 <HAL_SD_GetCardStatus+0x16c>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 810dccc:	687b      	ldr	r3, [r7, #4]
 810dcce:	681b      	ldr	r3, [r3, #0]
 810dcd0:	4a08      	ldr	r2, [pc, #32]	; (810dcf4 <HAL_SD_GetCardStatus+0x178>)
 810dcd2:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode = errorstate;
 810dcd4:	687b      	ldr	r3, [r7, #4]
 810dcd6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 810dcd8:	635a      	str	r2, [r3, #52]	; 0x34
    hsd->State = HAL_SD_STATE_READY;
 810dcda:	687b      	ldr	r3, [r7, #4]
 810dcdc:	2201      	movs	r2, #1
 810dcde:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    status = HAL_ERROR;
 810dce2:	2301      	movs	r3, #1
 810dce4:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
  }


  return status;
 810dce8:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
}
 810dcec:	4618      	mov	r0, r3
 810dcee:	3750      	adds	r7, #80	; 0x50
 810dcf0:	46bd      	mov	sp, r7
 810dcf2:	bd80      	pop	{r7, pc}
 810dcf4:	1fe00fff 	.word	0x1fe00fff

0810dcf8 <HAL_SD_ConfigWideBusOperation>:
  *            @arg SDMMC_BUS_WIDE_4B: 4-bit data transfer
  *            @arg SDMMC_BUS_WIDE_1B: 1-bit data transfer
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ConfigWideBusOperation(SD_HandleTypeDef *hsd, uint32_t WideMode)
{
 810dcf8:	b590      	push	{r4, r7, lr}
 810dcfa:	b08d      	sub	sp, #52	; 0x34
 810dcfc:	af02      	add	r7, sp, #8
 810dcfe:	6078      	str	r0, [r7, #4]
 810dd00:	6039      	str	r1, [r7, #0]
  SDMMC_InitTypeDef Init;
  uint32_t errorstate;
  uint32_t sdmmc_clk;
  HAL_StatusTypeDef status = HAL_OK;
 810dd02:	2300      	movs	r3, #0
 810dd04:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  /* Check the parameters */
  assert_param(IS_SDMMC_BUS_WIDE(WideMode));

  /* Change State */
  hsd->State = HAL_SD_STATE_BUSY;
 810dd08:	687b      	ldr	r3, [r7, #4]
 810dd0a:	2203      	movs	r2, #3
 810dd0c:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

  if (hsd->SdCard.CardType != CARD_SECURED)
 810dd10:	687b      	ldr	r3, [r7, #4]
 810dd12:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 810dd14:	2b03      	cmp	r3, #3
 810dd16:	d02e      	beq.n	810dd76 <HAL_SD_ConfigWideBusOperation+0x7e>
  {
    if (WideMode == SDMMC_BUS_WIDE_8B)
 810dd18:	683b      	ldr	r3, [r7, #0]
 810dd1a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 810dd1e:	d106      	bne.n	810dd2e <HAL_SD_ConfigWideBusOperation+0x36>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 810dd20:	687b      	ldr	r3, [r7, #4]
 810dd22:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 810dd24:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 810dd28:	687b      	ldr	r3, [r7, #4]
 810dd2a:	635a      	str	r2, [r3, #52]	; 0x34
 810dd2c:	e029      	b.n	810dd82 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if (WideMode == SDMMC_BUS_WIDE_4B)
 810dd2e:	683b      	ldr	r3, [r7, #0]
 810dd30:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 810dd34:	d10a      	bne.n	810dd4c <HAL_SD_ConfigWideBusOperation+0x54>
    {
      errorstate = SD_WideBus_Enable(hsd);
 810dd36:	6878      	ldr	r0, [r7, #4]
 810dd38:	f000 fb64 	bl	810e404 <SD_WideBus_Enable>
 810dd3c:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 810dd3e:	687b      	ldr	r3, [r7, #4]
 810dd40:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 810dd42:	6a3b      	ldr	r3, [r7, #32]
 810dd44:	431a      	orrs	r2, r3
 810dd46:	687b      	ldr	r3, [r7, #4]
 810dd48:	635a      	str	r2, [r3, #52]	; 0x34
 810dd4a:	e01a      	b.n	810dd82 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if (WideMode == SDMMC_BUS_WIDE_1B)
 810dd4c:	683b      	ldr	r3, [r7, #0]
 810dd4e:	2b00      	cmp	r3, #0
 810dd50:	d10a      	bne.n	810dd68 <HAL_SD_ConfigWideBusOperation+0x70>
    {
      errorstate = SD_WideBus_Disable(hsd);
 810dd52:	6878      	ldr	r0, [r7, #4]
 810dd54:	f000 fba1 	bl	810e49a <SD_WideBus_Disable>
 810dd58:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 810dd5a:	687b      	ldr	r3, [r7, #4]
 810dd5c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 810dd5e:	6a3b      	ldr	r3, [r7, #32]
 810dd60:	431a      	orrs	r2, r3
 810dd62:	687b      	ldr	r3, [r7, #4]
 810dd64:	635a      	str	r2, [r3, #52]	; 0x34
 810dd66:	e00c      	b.n	810dd82 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else
    {
      /* WideMode is not a valid argument*/
      hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 810dd68:	687b      	ldr	r3, [r7, #4]
 810dd6a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 810dd6c:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 810dd70:	687b      	ldr	r3, [r7, #4]
 810dd72:	635a      	str	r2, [r3, #52]	; 0x34
 810dd74:	e005      	b.n	810dd82 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
  }
  else
  {
    /* SD Card does not support this feature */
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 810dd76:	687b      	ldr	r3, [r7, #4]
 810dd78:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 810dd7a:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 810dd7e:	687b      	ldr	r3, [r7, #4]
 810dd80:	635a      	str	r2, [r3, #52]	; 0x34
  }

  if (hsd->ErrorCode != HAL_SD_ERROR_NONE)
 810dd82:	687b      	ldr	r3, [r7, #4]
 810dd84:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 810dd86:	2b00      	cmp	r3, #0
 810dd88:	d007      	beq.n	810dd9a <HAL_SD_ConfigWideBusOperation+0xa2>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 810dd8a:	687b      	ldr	r3, [r7, #4]
 810dd8c:	681b      	ldr	r3, [r3, #0]
 810dd8e:	4a5f      	ldr	r2, [pc, #380]	; (810df0c <HAL_SD_ConfigWideBusOperation+0x214>)
 810dd90:	639a      	str	r2, [r3, #56]	; 0x38
    status = HAL_ERROR;
 810dd92:	2301      	movs	r3, #1
 810dd94:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 810dd98:	e096      	b.n	810dec8 <HAL_SD_ConfigWideBusOperation+0x1d0>
  }
  else
  {
    sdmmc_clk     = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SDMMC);
 810dd9a:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 810dd9e:	f04f 0100 	mov.w	r1, #0
 810dda2:	f7fd fc57 	bl	810b654 <HAL_RCCEx_GetPeriphCLKFreq>
 810dda6:	61f8      	str	r0, [r7, #28]
    if (sdmmc_clk != 0U)
 810dda8:	69fb      	ldr	r3, [r7, #28]
 810ddaa:	2b00      	cmp	r3, #0
 810ddac:	f000 8083 	beq.w	810deb6 <HAL_SD_ConfigWideBusOperation+0x1be>
    {
      /* Configure the SDMMC peripheral */
      Init.ClockEdge           = hsd->Init.ClockEdge;
 810ddb0:	687b      	ldr	r3, [r7, #4]
 810ddb2:	685b      	ldr	r3, [r3, #4]
 810ddb4:	60bb      	str	r3, [r7, #8]
      Init.ClockPowerSave      = hsd->Init.ClockPowerSave;
 810ddb6:	687b      	ldr	r3, [r7, #4]
 810ddb8:	689b      	ldr	r3, [r3, #8]
 810ddba:	60fb      	str	r3, [r7, #12]
      Init.BusWide             = WideMode;
 810ddbc:	683b      	ldr	r3, [r7, #0]
 810ddbe:	613b      	str	r3, [r7, #16]
      Init.HardwareFlowControl = hsd->Init.HardwareFlowControl;
 810ddc0:	687b      	ldr	r3, [r7, #4]
 810ddc2:	691b      	ldr	r3, [r3, #16]
 810ddc4:	617b      	str	r3, [r7, #20]

      /* Check if user Clock div < Normal speed 25Mhz, no change in Clockdiv */
      if (hsd->Init.ClockDiv >= (sdmmc_clk / (2U * SD_NORMAL_SPEED_FREQ)))
 810ddc6:	687b      	ldr	r3, [r7, #4]
 810ddc8:	695a      	ldr	r2, [r3, #20]
 810ddca:	69fb      	ldr	r3, [r7, #28]
 810ddcc:	4950      	ldr	r1, [pc, #320]	; (810df10 <HAL_SD_ConfigWideBusOperation+0x218>)
 810ddce:	fba1 1303 	umull	r1, r3, r1, r3
 810ddd2:	0e1b      	lsrs	r3, r3, #24
 810ddd4:	429a      	cmp	r2, r3
 810ddd6:	d303      	bcc.n	810dde0 <HAL_SD_ConfigWideBusOperation+0xe8>
      {
        Init.ClockDiv = hsd->Init.ClockDiv;
 810ddd8:	687b      	ldr	r3, [r7, #4]
 810ddda:	695b      	ldr	r3, [r3, #20]
 810dddc:	61bb      	str	r3, [r7, #24]
 810ddde:	e05a      	b.n	810de96 <HAL_SD_ConfigWideBusOperation+0x19e>
      }
      else if (hsd->SdCard.CardSpeed == CARD_ULTRA_HIGH_SPEED)
 810dde0:	687b      	ldr	r3, [r7, #4]
 810dde2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 810dde4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 810dde8:	d103      	bne.n	810ddf2 <HAL_SD_ConfigWideBusOperation+0xfa>
      {
        /* UltraHigh speed SD card,user Clock div */
        Init.ClockDiv = hsd->Init.ClockDiv;
 810ddea:	687b      	ldr	r3, [r7, #4]
 810ddec:	695b      	ldr	r3, [r3, #20]
 810ddee:	61bb      	str	r3, [r7, #24]
 810ddf0:	e051      	b.n	810de96 <HAL_SD_ConfigWideBusOperation+0x19e>
      }
      else if (hsd->SdCard.CardSpeed == CARD_HIGH_SPEED)
 810ddf2:	687b      	ldr	r3, [r7, #4]
 810ddf4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 810ddf6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 810ddfa:	d126      	bne.n	810de4a <HAL_SD_ConfigWideBusOperation+0x152>
      {
        /* High speed SD card, Max Frequency = 50Mhz */
        if (hsd->Init.ClockDiv == 0U)
 810ddfc:	687b      	ldr	r3, [r7, #4]
 810ddfe:	695b      	ldr	r3, [r3, #20]
 810de00:	2b00      	cmp	r3, #0
 810de02:	d10e      	bne.n	810de22 <HAL_SD_ConfigWideBusOperation+0x12a>
        {
          if (sdmmc_clk > SD_HIGH_SPEED_FREQ)
 810de04:	69fb      	ldr	r3, [r7, #28]
 810de06:	4a43      	ldr	r2, [pc, #268]	; (810df14 <HAL_SD_ConfigWideBusOperation+0x21c>)
 810de08:	4293      	cmp	r3, r2
 810de0a:	d906      	bls.n	810de1a <HAL_SD_ConfigWideBusOperation+0x122>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_HIGH_SPEED_FREQ);
 810de0c:	69fb      	ldr	r3, [r7, #28]
 810de0e:	4a40      	ldr	r2, [pc, #256]	; (810df10 <HAL_SD_ConfigWideBusOperation+0x218>)
 810de10:	fba2 2303 	umull	r2, r3, r2, r3
 810de14:	0e5b      	lsrs	r3, r3, #25
 810de16:	61bb      	str	r3, [r7, #24]
 810de18:	e03d      	b.n	810de96 <HAL_SD_ConfigWideBusOperation+0x19e>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 810de1a:	687b      	ldr	r3, [r7, #4]
 810de1c:	695b      	ldr	r3, [r3, #20]
 810de1e:	61bb      	str	r3, [r7, #24]
 810de20:	e039      	b.n	810de96 <HAL_SD_ConfigWideBusOperation+0x19e>
          }
        }
        else
        {
          if ((sdmmc_clk / (2U * hsd->Init.ClockDiv)) > SD_HIGH_SPEED_FREQ)
 810de22:	687b      	ldr	r3, [r7, #4]
 810de24:	695b      	ldr	r3, [r3, #20]
 810de26:	005b      	lsls	r3, r3, #1
 810de28:	69fa      	ldr	r2, [r7, #28]
 810de2a:	fbb2 f3f3 	udiv	r3, r2, r3
 810de2e:	4a39      	ldr	r2, [pc, #228]	; (810df14 <HAL_SD_ConfigWideBusOperation+0x21c>)
 810de30:	4293      	cmp	r3, r2
 810de32:	d906      	bls.n	810de42 <HAL_SD_ConfigWideBusOperation+0x14a>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_HIGH_SPEED_FREQ);
 810de34:	69fb      	ldr	r3, [r7, #28]
 810de36:	4a36      	ldr	r2, [pc, #216]	; (810df10 <HAL_SD_ConfigWideBusOperation+0x218>)
 810de38:	fba2 2303 	umull	r2, r3, r2, r3
 810de3c:	0e5b      	lsrs	r3, r3, #25
 810de3e:	61bb      	str	r3, [r7, #24]
 810de40:	e029      	b.n	810de96 <HAL_SD_ConfigWideBusOperation+0x19e>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 810de42:	687b      	ldr	r3, [r7, #4]
 810de44:	695b      	ldr	r3, [r3, #20]
 810de46:	61bb      	str	r3, [r7, #24]
 810de48:	e025      	b.n	810de96 <HAL_SD_ConfigWideBusOperation+0x19e>
        }
      }
      else
      {
        /* No High speed SD card, Max Frequency = 25Mhz */
        if (hsd->Init.ClockDiv == 0U)
 810de4a:	687b      	ldr	r3, [r7, #4]
 810de4c:	695b      	ldr	r3, [r3, #20]
 810de4e:	2b00      	cmp	r3, #0
 810de50:	d10e      	bne.n	810de70 <HAL_SD_ConfigWideBusOperation+0x178>
        {
          if (sdmmc_clk > SD_NORMAL_SPEED_FREQ)
 810de52:	69fb      	ldr	r3, [r7, #28]
 810de54:	4a30      	ldr	r2, [pc, #192]	; (810df18 <HAL_SD_ConfigWideBusOperation+0x220>)
 810de56:	4293      	cmp	r3, r2
 810de58:	d906      	bls.n	810de68 <HAL_SD_ConfigWideBusOperation+0x170>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_NORMAL_SPEED_FREQ);
 810de5a:	69fb      	ldr	r3, [r7, #28]
 810de5c:	4a2c      	ldr	r2, [pc, #176]	; (810df10 <HAL_SD_ConfigWideBusOperation+0x218>)
 810de5e:	fba2 2303 	umull	r2, r3, r2, r3
 810de62:	0e1b      	lsrs	r3, r3, #24
 810de64:	61bb      	str	r3, [r7, #24]
 810de66:	e016      	b.n	810de96 <HAL_SD_ConfigWideBusOperation+0x19e>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 810de68:	687b      	ldr	r3, [r7, #4]
 810de6a:	695b      	ldr	r3, [r3, #20]
 810de6c:	61bb      	str	r3, [r7, #24]
 810de6e:	e012      	b.n	810de96 <HAL_SD_ConfigWideBusOperation+0x19e>
          }
        }
        else
        {
          if ((sdmmc_clk / (2U * hsd->Init.ClockDiv)) > SD_NORMAL_SPEED_FREQ)
 810de70:	687b      	ldr	r3, [r7, #4]
 810de72:	695b      	ldr	r3, [r3, #20]
 810de74:	005b      	lsls	r3, r3, #1
 810de76:	69fa      	ldr	r2, [r7, #28]
 810de78:	fbb2 f3f3 	udiv	r3, r2, r3
 810de7c:	4a26      	ldr	r2, [pc, #152]	; (810df18 <HAL_SD_ConfigWideBusOperation+0x220>)
 810de7e:	4293      	cmp	r3, r2
 810de80:	d906      	bls.n	810de90 <HAL_SD_ConfigWideBusOperation+0x198>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_NORMAL_SPEED_FREQ);
 810de82:	69fb      	ldr	r3, [r7, #28]
 810de84:	4a22      	ldr	r2, [pc, #136]	; (810df10 <HAL_SD_ConfigWideBusOperation+0x218>)
 810de86:	fba2 2303 	umull	r2, r3, r2, r3
 810de8a:	0e1b      	lsrs	r3, r3, #24
 810de8c:	61bb      	str	r3, [r7, #24]
 810de8e:	e002      	b.n	810de96 <HAL_SD_ConfigWideBusOperation+0x19e>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 810de90:	687b      	ldr	r3, [r7, #4]
 810de92:	695b      	ldr	r3, [r3, #20]
 810de94:	61bb      	str	r3, [r7, #24]

#if (USE_SD_TRANSCEIVER != 0U)
      Init.TranceiverPresent = hsd->Init.TranceiverPresent;
#endif /* USE_SD_TRANSCEIVER */

      (void)SDMMC_Init(hsd->Instance, Init);
 810de96:	687b      	ldr	r3, [r7, #4]
 810de98:	681c      	ldr	r4, [r3, #0]
 810de9a:	466a      	mov	r2, sp
 810de9c:	f107 0314 	add.w	r3, r7, #20
 810dea0:	e893 0003 	ldmia.w	r3, {r0, r1}
 810dea4:	e882 0003 	stmia.w	r2, {r0, r1}
 810dea8:	f107 0308 	add.w	r3, r7, #8
 810deac:	cb0e      	ldmia	r3, {r1, r2, r3}
 810deae:	4620      	mov	r0, r4
 810deb0:	f002 ff5c 	bl	8110d6c <SDMMC_Init>
 810deb4:	e008      	b.n	810dec8 <HAL_SD_ConfigWideBusOperation+0x1d0>
    }
    else
    {
      hsd->ErrorCode |= SDMMC_ERROR_INVALID_PARAMETER;
 810deb6:	687b      	ldr	r3, [r7, #4]
 810deb8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 810deba:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 810debe:	687b      	ldr	r3, [r7, #4]
 810dec0:	635a      	str	r2, [r3, #52]	; 0x34
      status = HAL_ERROR;
 810dec2:	2301      	movs	r3, #1
 810dec4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 810dec8:	687b      	ldr	r3, [r7, #4]
 810deca:	681b      	ldr	r3, [r3, #0]
 810decc:	f44f 7100 	mov.w	r1, #512	; 0x200
 810ded0:	4618      	mov	r0, r3
 810ded2:	f003 f817 	bl	8110f04 <SDMMC_CmdBlockLength>
 810ded6:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 810ded8:	6a3b      	ldr	r3, [r7, #32]
 810deda:	2b00      	cmp	r3, #0
 810dedc:	d00c      	beq.n	810def8 <HAL_SD_ConfigWideBusOperation+0x200>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 810dede:	687b      	ldr	r3, [r7, #4]
 810dee0:	681b      	ldr	r3, [r3, #0]
 810dee2:	4a0a      	ldr	r2, [pc, #40]	; (810df0c <HAL_SD_ConfigWideBusOperation+0x214>)
 810dee4:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 810dee6:	687b      	ldr	r3, [r7, #4]
 810dee8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 810deea:	6a3b      	ldr	r3, [r7, #32]
 810deec:	431a      	orrs	r2, r3
 810deee:	687b      	ldr	r3, [r7, #4]
 810def0:	635a      	str	r2, [r3, #52]	; 0x34
    status = HAL_ERROR;
 810def2:	2301      	movs	r3, #1
 810def4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Change State */
  hsd->State = HAL_SD_STATE_READY;
 810def8:	687b      	ldr	r3, [r7, #4]
 810defa:	2201      	movs	r2, #1
 810defc:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

  return status;
 810df00:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 810df04:	4618      	mov	r0, r3
 810df06:	372c      	adds	r7, #44	; 0x2c
 810df08:	46bd      	mov	sp, r7
 810df0a:	bd90      	pop	{r4, r7, pc}
 810df0c:	1fe00fff 	.word	0x1fe00fff
 810df10:	55e63b89 	.word	0x55e63b89
 810df14:	02faf080 	.word	0x02faf080
 810df18:	017d7840 	.word	0x017d7840

0810df1c <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd: pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 810df1c:	b580      	push	{r7, lr}
 810df1e:	b086      	sub	sp, #24
 810df20:	af00      	add	r7, sp, #0
 810df22:	6078      	str	r0, [r7, #4]
  uint32_t cardstate;
  uint32_t errorstate;
  uint32_t resp1 = 0;
 810df24:	2300      	movs	r3, #0
 810df26:	60fb      	str	r3, [r7, #12]

  errorstate = SD_SendStatus(hsd, &resp1);
 810df28:	f107 030c 	add.w	r3, r7, #12
 810df2c:	4619      	mov	r1, r3
 810df2e:	6878      	ldr	r0, [r7, #4]
 810df30:	f000 fa40 	bl	810e3b4 <SD_SendStatus>
 810df34:	6178      	str	r0, [r7, #20]
  if (errorstate != HAL_SD_ERROR_NONE)
 810df36:	697b      	ldr	r3, [r7, #20]
 810df38:	2b00      	cmp	r3, #0
 810df3a:	d005      	beq.n	810df48 <HAL_SD_GetCardState+0x2c>
  {
    hsd->ErrorCode |= errorstate;
 810df3c:	687b      	ldr	r3, [r7, #4]
 810df3e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 810df40:	697b      	ldr	r3, [r7, #20]
 810df42:	431a      	orrs	r2, r3
 810df44:	687b      	ldr	r3, [r7, #4]
 810df46:	635a      	str	r2, [r3, #52]	; 0x34
  }

  cardstate = ((resp1 >> 9U) & 0x0FU);
 810df48:	68fb      	ldr	r3, [r7, #12]
 810df4a:	0a5b      	lsrs	r3, r3, #9
 810df4c:	f003 030f 	and.w	r3, r3, #15
 810df50:	613b      	str	r3, [r7, #16]

  return (HAL_SD_CardStateTypeDef)cardstate;
 810df52:	693b      	ldr	r3, [r7, #16]
}
 810df54:	4618      	mov	r0, r3
 810df56:	3718      	adds	r7, #24
 810df58:	46bd      	mov	sp, r7
 810df5a:	bd80      	pop	{r7, pc}

0810df5c <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd: Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 810df5c:	b580      	push	{r7, lr}
 810df5e:	b090      	sub	sp, #64	; 0x40
 810df60:	af00      	add	r7, sp, #0
 810df62:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 0U;
 810df64:	2300      	movs	r3, #0
 810df66:	817b      	strh	r3, [r7, #10]
  uint32_t tickstart = HAL_GetTick();
 810df68:	f7f9 fb58 	bl	810761c <HAL_GetTick>
 810df6c:	63f8      	str	r0, [r7, #60]	; 0x3c

  /* Check the power State */
  if (SDMMC_GetPowerState(hsd->Instance) == 0U)
 810df6e:	687b      	ldr	r3, [r7, #4]
 810df70:	681b      	ldr	r3, [r3, #0]
 810df72:	4618      	mov	r0, r3
 810df74:	f002 ff42 	bl	8110dfc <SDMMC_GetPowerState>
 810df78:	4603      	mov	r3, r0
 810df7a:	2b00      	cmp	r3, #0
 810df7c:	d102      	bne.n	810df84 <SD_InitCard+0x28>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 810df7e:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 810df82:	e0b5      	b.n	810e0f0 <SD_InitCard+0x194>
  }

  if (hsd->SdCard.CardType != CARD_SECURED)
 810df84:	687b      	ldr	r3, [r7, #4]
 810df86:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 810df88:	2b03      	cmp	r3, #3
 810df8a:	d02e      	beq.n	810dfea <SD_InitCard+0x8e>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 810df8c:	687b      	ldr	r3, [r7, #4]
 810df8e:	681b      	ldr	r3, [r3, #0]
 810df90:	4618      	mov	r0, r3
 810df92:	f003 f8c3 	bl	811111c <SDMMC_CmdSendCID>
 810df96:	63b8      	str	r0, [r7, #56]	; 0x38
    if (errorstate != HAL_SD_ERROR_NONE)
 810df98:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 810df9a:	2b00      	cmp	r3, #0
 810df9c:	d001      	beq.n	810dfa2 <SD_InitCard+0x46>
    {
      return errorstate;
 810df9e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 810dfa0:	e0a6      	b.n	810e0f0 <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 810dfa2:	687b      	ldr	r3, [r7, #4]
 810dfa4:	681b      	ldr	r3, [r3, #0]
 810dfa6:	2100      	movs	r1, #0
 810dfa8:	4618      	mov	r0, r3
 810dfaa:	f002 ff6c 	bl	8110e86 <SDMMC_GetResponse>
 810dfae:	4602      	mov	r2, r0
 810dfb0:	687b      	ldr	r3, [r7, #4]
 810dfb2:	66da      	str	r2, [r3, #108]	; 0x6c
      hsd->CID[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 810dfb4:	687b      	ldr	r3, [r7, #4]
 810dfb6:	681b      	ldr	r3, [r3, #0]
 810dfb8:	2104      	movs	r1, #4
 810dfba:	4618      	mov	r0, r3
 810dfbc:	f002 ff63 	bl	8110e86 <SDMMC_GetResponse>
 810dfc0:	4602      	mov	r2, r0
 810dfc2:	687b      	ldr	r3, [r7, #4]
 810dfc4:	671a      	str	r2, [r3, #112]	; 0x70
      hsd->CID[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 810dfc6:	687b      	ldr	r3, [r7, #4]
 810dfc8:	681b      	ldr	r3, [r3, #0]
 810dfca:	2108      	movs	r1, #8
 810dfcc:	4618      	mov	r0, r3
 810dfce:	f002 ff5a 	bl	8110e86 <SDMMC_GetResponse>
 810dfd2:	4602      	mov	r2, r0
 810dfd4:	687b      	ldr	r3, [r7, #4]
 810dfd6:	675a      	str	r2, [r3, #116]	; 0x74
      hsd->CID[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 810dfd8:	687b      	ldr	r3, [r7, #4]
 810dfda:	681b      	ldr	r3, [r3, #0]
 810dfdc:	210c      	movs	r1, #12
 810dfde:	4618      	mov	r0, r3
 810dfe0:	f002 ff51 	bl	8110e86 <SDMMC_GetResponse>
 810dfe4:	4602      	mov	r2, r0
 810dfe6:	687b      	ldr	r3, [r7, #4]
 810dfe8:	679a      	str	r2, [r3, #120]	; 0x78
    }
  }

  if (hsd->SdCard.CardType != CARD_SECURED)
 810dfea:	687b      	ldr	r3, [r7, #4]
 810dfec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 810dfee:	2b03      	cmp	r3, #3
 810dff0:	d01d      	beq.n	810e02e <SD_InitCard+0xd2>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    while (sd_rca == 0U)
 810dff2:	e019      	b.n	810e028 <SD_InitCard+0xcc>
    {
      errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 810dff4:	687b      	ldr	r3, [r7, #4]
 810dff6:	681b      	ldr	r3, [r3, #0]
 810dff8:	f107 020a 	add.w	r2, r7, #10
 810dffc:	4611      	mov	r1, r2
 810dffe:	4618      	mov	r0, r3
 810e000:	f003 f8cb 	bl	811119a <SDMMC_CmdSetRelAdd>
 810e004:	63b8      	str	r0, [r7, #56]	; 0x38
      if (errorstate != HAL_SD_ERROR_NONE)
 810e006:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 810e008:	2b00      	cmp	r3, #0
 810e00a:	d001      	beq.n	810e010 <SD_InitCard+0xb4>
      {
        return errorstate;
 810e00c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 810e00e:	e06f      	b.n	810e0f0 <SD_InitCard+0x194>
      }
      if ((HAL_GetTick() - tickstart) >=  SDMMC_CMDTIMEOUT)
 810e010:	f7f9 fb04 	bl	810761c <HAL_GetTick>
 810e014:	4602      	mov	r2, r0
 810e016:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 810e018:	1ad3      	subs	r3, r2, r3
 810e01a:	f241 3287 	movw	r2, #4999	; 0x1387
 810e01e:	4293      	cmp	r3, r2
 810e020:	d902      	bls.n	810e028 <SD_InitCard+0xcc>
      {
        return HAL_SD_ERROR_TIMEOUT;
 810e022:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 810e026:	e063      	b.n	810e0f0 <SD_InitCard+0x194>
    while (sd_rca == 0U)
 810e028:	897b      	ldrh	r3, [r7, #10]
 810e02a:	2b00      	cmp	r3, #0
 810e02c:	d0e2      	beq.n	810dff4 <SD_InitCard+0x98>
      }
    }
  }
  if (hsd->SdCard.CardType != CARD_SECURED)
 810e02e:	687b      	ldr	r3, [r7, #4]
 810e030:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 810e032:	2b03      	cmp	r3, #3
 810e034:	d036      	beq.n	810e0a4 <SD_InitCard+0x148>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 810e036:	897b      	ldrh	r3, [r7, #10]
 810e038:	461a      	mov	r2, r3
 810e03a:	687b      	ldr	r3, [r7, #4]
 810e03c:	645a      	str	r2, [r3, #68]	; 0x44

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 810e03e:	687b      	ldr	r3, [r7, #4]
 810e040:	681a      	ldr	r2, [r3, #0]
 810e042:	687b      	ldr	r3, [r7, #4]
 810e044:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 810e046:	041b      	lsls	r3, r3, #16
 810e048:	4619      	mov	r1, r3
 810e04a:	4610      	mov	r0, r2
 810e04c:	f003 f885 	bl	811115a <SDMMC_CmdSendCSD>
 810e050:	63b8      	str	r0, [r7, #56]	; 0x38
    if (errorstate != HAL_SD_ERROR_NONE)
 810e052:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 810e054:	2b00      	cmp	r3, #0
 810e056:	d001      	beq.n	810e05c <SD_InitCard+0x100>
    {
      return errorstate;
 810e058:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 810e05a:	e049      	b.n	810e0f0 <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 810e05c:	687b      	ldr	r3, [r7, #4]
 810e05e:	681b      	ldr	r3, [r3, #0]
 810e060:	2100      	movs	r1, #0
 810e062:	4618      	mov	r0, r3
 810e064:	f002 ff0f 	bl	8110e86 <SDMMC_GetResponse>
 810e068:	4602      	mov	r2, r0
 810e06a:	687b      	ldr	r3, [r7, #4]
 810e06c:	65da      	str	r2, [r3, #92]	; 0x5c
      hsd->CSD[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 810e06e:	687b      	ldr	r3, [r7, #4]
 810e070:	681b      	ldr	r3, [r3, #0]
 810e072:	2104      	movs	r1, #4
 810e074:	4618      	mov	r0, r3
 810e076:	f002 ff06 	bl	8110e86 <SDMMC_GetResponse>
 810e07a:	4602      	mov	r2, r0
 810e07c:	687b      	ldr	r3, [r7, #4]
 810e07e:	661a      	str	r2, [r3, #96]	; 0x60
      hsd->CSD[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 810e080:	687b      	ldr	r3, [r7, #4]
 810e082:	681b      	ldr	r3, [r3, #0]
 810e084:	2108      	movs	r1, #8
 810e086:	4618      	mov	r0, r3
 810e088:	f002 fefd 	bl	8110e86 <SDMMC_GetResponse>
 810e08c:	4602      	mov	r2, r0
 810e08e:	687b      	ldr	r3, [r7, #4]
 810e090:	665a      	str	r2, [r3, #100]	; 0x64
      hsd->CSD[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 810e092:	687b      	ldr	r3, [r7, #4]
 810e094:	681b      	ldr	r3, [r3, #0]
 810e096:	210c      	movs	r1, #12
 810e098:	4618      	mov	r0, r3
 810e09a:	f002 fef4 	bl	8110e86 <SDMMC_GetResponse>
 810e09e:	4602      	mov	r2, r0
 810e0a0:	687b      	ldr	r3, [r7, #4]
 810e0a2:	669a      	str	r2, [r3, #104]	; 0x68
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2) >> 20U);
 810e0a4:	687b      	ldr	r3, [r7, #4]
 810e0a6:	681b      	ldr	r3, [r3, #0]
 810e0a8:	2104      	movs	r1, #4
 810e0aa:	4618      	mov	r0, r3
 810e0ac:	f002 feeb 	bl	8110e86 <SDMMC_GetResponse>
 810e0b0:	4603      	mov	r3, r0
 810e0b2:	0d1a      	lsrs	r2, r3, #20
 810e0b4:	687b      	ldr	r3, [r7, #4]
 810e0b6:	641a      	str	r2, [r3, #64]	; 0x40

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 810e0b8:	f107 030c 	add.w	r3, r7, #12
 810e0bc:	4619      	mov	r1, r3
 810e0be:	6878      	ldr	r0, [r7, #4]
 810e0c0:	f7ff fbb8 	bl	810d834 <HAL_SD_GetCardCSD>
 810e0c4:	4603      	mov	r3, r0
 810e0c6:	2b00      	cmp	r3, #0
 810e0c8:	d002      	beq.n	810e0d0 <SD_InitCard+0x174>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 810e0ca:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 810e0ce:	e00f      	b.n	810e0f0 <SD_InitCard+0x194>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 810e0d0:	687b      	ldr	r3, [r7, #4]
 810e0d2:	681a      	ldr	r2, [r3, #0]
 810e0d4:	687b      	ldr	r3, [r7, #4]
 810e0d6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 810e0d8:	041b      	lsls	r3, r3, #16
 810e0da:	4619      	mov	r1, r3
 810e0dc:	4610      	mov	r0, r2
 810e0de:	f002 ff34 	bl	8110f4a <SDMMC_CmdSelDesel>
 810e0e2:	63b8      	str	r0, [r7, #56]	; 0x38
  if (errorstate != HAL_SD_ERROR_NONE)
 810e0e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 810e0e6:	2b00      	cmp	r3, #0
 810e0e8:	d001      	beq.n	810e0ee <SD_InitCard+0x192>
  {
    return errorstate;
 810e0ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 810e0ec:	e000      	b.n	810e0f0 <SD_InitCard+0x194>
  }

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 810e0ee:	2300      	movs	r3, #0
}
 810e0f0:	4618      	mov	r0, r3
 810e0f2:	3740      	adds	r7, #64	; 0x40
 810e0f4:	46bd      	mov	sp, r7
 810e0f6:	bd80      	pop	{r7, pc}

0810e0f8 <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 810e0f8:	b580      	push	{r7, lr}
 810e0fa:	b086      	sub	sp, #24
 810e0fc:	af00      	add	r7, sp, #0
 810e0fe:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 810e100:	2300      	movs	r3, #0
 810e102:	60bb      	str	r3, [r7, #8]
  uint32_t response = 0U;
 810e104:	2300      	movs	r3, #0
 810e106:	617b      	str	r3, [r7, #20]
  uint32_t validvoltage = 0U;
 810e108:	2300      	movs	r3, #0
 810e10a:	613b      	str	r3, [r7, #16]
#if (USE_SD_TRANSCEIVER != 0U)
  uint32_t tickstart = HAL_GetTick();
#endif /* USE_SD_TRANSCEIVER  */

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 810e10c:	687b      	ldr	r3, [r7, #4]
 810e10e:	681b      	ldr	r3, [r3, #0]
 810e110:	4618      	mov	r0, r3
 810e112:	f002 ff3d 	bl	8110f90 <SDMMC_CmdGoIdleState>
 810e116:	60f8      	str	r0, [r7, #12]
  if (errorstate != HAL_SD_ERROR_NONE)
 810e118:	68fb      	ldr	r3, [r7, #12]
 810e11a:	2b00      	cmp	r3, #0
 810e11c:	d001      	beq.n	810e122 <SD_PowerON+0x2a>
  {
    return errorstate;
 810e11e:	68fb      	ldr	r3, [r7, #12]
 810e120:	e072      	b.n	810e208 <SD_PowerON+0x110>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 810e122:	687b      	ldr	r3, [r7, #4]
 810e124:	681b      	ldr	r3, [r3, #0]
 810e126:	4618      	mov	r0, r3
 810e128:	f002 ff50 	bl	8110fcc <SDMMC_CmdOperCond>
 810e12c:	60f8      	str	r0, [r7, #12]
  if (errorstate == SDMMC_ERROR_TIMEOUT) /* No response to CMD8 */
 810e12e:	68fb      	ldr	r3, [r7, #12]
 810e130:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 810e134:	d10d      	bne.n	810e152 <SD_PowerON+0x5a>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 810e136:	687b      	ldr	r3, [r7, #4]
 810e138:	2200      	movs	r2, #0
 810e13a:	63da      	str	r2, [r3, #60]	; 0x3c
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 810e13c:	687b      	ldr	r3, [r7, #4]
 810e13e:	681b      	ldr	r3, [r3, #0]
 810e140:	4618      	mov	r0, r3
 810e142:	f002 ff25 	bl	8110f90 <SDMMC_CmdGoIdleState>
 810e146:	60f8      	str	r0, [r7, #12]
    if (errorstate != HAL_SD_ERROR_NONE)
 810e148:	68fb      	ldr	r3, [r7, #12]
 810e14a:	2b00      	cmp	r3, #0
 810e14c:	d004      	beq.n	810e158 <SD_PowerON+0x60>
    {
      return errorstate;
 810e14e:	68fb      	ldr	r3, [r7, #12]
 810e150:	e05a      	b.n	810e208 <SD_PowerON+0x110>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 810e152:	687b      	ldr	r3, [r7, #4]
 810e154:	2201      	movs	r2, #1
 810e156:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  if (hsd->SdCard.CardVersion == CARD_V2_X)
 810e158:	687b      	ldr	r3, [r7, #4]
 810e15a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 810e15c:	2b01      	cmp	r3, #1
 810e15e:	d137      	bne.n	810e1d0 <SD_PowerON+0xd8>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 810e160:	687b      	ldr	r3, [r7, #4]
 810e162:	681b      	ldr	r3, [r3, #0]
 810e164:	2100      	movs	r1, #0
 810e166:	4618      	mov	r0, r3
 810e168:	f002 ff50 	bl	811100c <SDMMC_CmdAppCommand>
 810e16c:	60f8      	str	r0, [r7, #12]
    if (errorstate != HAL_SD_ERROR_NONE)
 810e16e:	68fb      	ldr	r3, [r7, #12]
 810e170:	2b00      	cmp	r3, #0
 810e172:	d02d      	beq.n	810e1d0 <SD_PowerON+0xd8>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 810e174:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 810e178:	e046      	b.n	810e208 <SD_PowerON+0x110>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while ((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 810e17a:	687b      	ldr	r3, [r7, #4]
 810e17c:	681b      	ldr	r3, [r3, #0]
 810e17e:	2100      	movs	r1, #0
 810e180:	4618      	mov	r0, r3
 810e182:	f002 ff43 	bl	811100c <SDMMC_CmdAppCommand>
 810e186:	60f8      	str	r0, [r7, #12]
    if (errorstate != HAL_SD_ERROR_NONE)
 810e188:	68fb      	ldr	r3, [r7, #12]
 810e18a:	2b00      	cmp	r3, #0
 810e18c:	d001      	beq.n	810e192 <SD_PowerON+0x9a>
    {
      return errorstate;
 810e18e:	68fb      	ldr	r3, [r7, #12]
 810e190:	e03a      	b.n	810e208 <SD_PowerON+0x110>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY |
 810e192:	687b      	ldr	r3, [r7, #4]
 810e194:	681b      	ldr	r3, [r3, #0]
 810e196:	491e      	ldr	r1, [pc, #120]	; (810e210 <SD_PowerON+0x118>)
 810e198:	4618      	mov	r0, r3
 810e19a:	f002 ff5a 	bl	8111052 <SDMMC_CmdAppOperCommand>
 810e19e:	60f8      	str	r0, [r7, #12]
                                         SD_SWITCH_1_8V_CAPACITY);
    if (errorstate != HAL_SD_ERROR_NONE)
 810e1a0:	68fb      	ldr	r3, [r7, #12]
 810e1a2:	2b00      	cmp	r3, #0
 810e1a4:	d002      	beq.n	810e1ac <SD_PowerON+0xb4>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 810e1a6:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 810e1aa:	e02d      	b.n	810e208 <SD_PowerON+0x110>
    }

    /* Get command response */
    response = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 810e1ac:	687b      	ldr	r3, [r7, #4]
 810e1ae:	681b      	ldr	r3, [r3, #0]
 810e1b0:	2100      	movs	r1, #0
 810e1b2:	4618      	mov	r0, r3
 810e1b4:	f002 fe67 	bl	8110e86 <SDMMC_GetResponse>
 810e1b8:	6178      	str	r0, [r7, #20]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 810e1ba:	697b      	ldr	r3, [r7, #20]
 810e1bc:	0fdb      	lsrs	r3, r3, #31
 810e1be:	2b01      	cmp	r3, #1
 810e1c0:	d101      	bne.n	810e1c6 <SD_PowerON+0xce>
 810e1c2:	2301      	movs	r3, #1
 810e1c4:	e000      	b.n	810e1c8 <SD_PowerON+0xd0>
 810e1c6:	2300      	movs	r3, #0
 810e1c8:	613b      	str	r3, [r7, #16]

    count++;
 810e1ca:	68bb      	ldr	r3, [r7, #8]
 810e1cc:	3301      	adds	r3, #1
 810e1ce:	60bb      	str	r3, [r7, #8]
  while ((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 810e1d0:	68bb      	ldr	r3, [r7, #8]
 810e1d2:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 810e1d6:	4293      	cmp	r3, r2
 810e1d8:	d802      	bhi.n	810e1e0 <SD_PowerON+0xe8>
 810e1da:	693b      	ldr	r3, [r7, #16]
 810e1dc:	2b00      	cmp	r3, #0
 810e1de:	d0cc      	beq.n	810e17a <SD_PowerON+0x82>
  }

  if (count >= SDMMC_MAX_VOLT_TRIAL)
 810e1e0:	68bb      	ldr	r3, [r7, #8]
 810e1e2:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 810e1e6:	4293      	cmp	r3, r2
 810e1e8:	d902      	bls.n	810e1f0 <SD_PowerON+0xf8>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 810e1ea:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 810e1ee:	e00b      	b.n	810e208 <SD_PowerON+0x110>
  }

  /* Set default card type */
  hsd->SdCard.CardType = CARD_SDSC;
 810e1f0:	687b      	ldr	r3, [r7, #4]
 810e1f2:	2200      	movs	r2, #0
 810e1f4:	639a      	str	r2, [r3, #56]	; 0x38

  if ((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY)
 810e1f6:	697b      	ldr	r3, [r7, #20]
 810e1f8:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 810e1fc:	2b00      	cmp	r3, #0
 810e1fe:	d002      	beq.n	810e206 <SD_PowerON+0x10e>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 810e200:	687b      	ldr	r3, [r7, #4]
 810e202:	2201      	movs	r2, #1
 810e204:	639a      	str	r2, [r3, #56]	; 0x38
      }
    }
#endif /* USE_SD_TRANSCEIVER  */
  }

  return HAL_SD_ERROR_NONE;
 810e206:	2300      	movs	r3, #0
}
 810e208:	4618      	mov	r0, r3
 810e20a:	3718      	adds	r7, #24
 810e20c:	46bd      	mov	sp, r7
 810e20e:	bd80      	pop	{r7, pc}
 810e210:	c1100000 	.word	0xc1100000

0810e214 <SD_SendSDStatus>:
  * @param  pSDstatus: Pointer to the buffer that will contain the SD card status
  *         SD Status register)
  * @retval error state
  */
static uint32_t SD_SendSDStatus(SD_HandleTypeDef *hsd, uint32_t *pSDstatus)
{
 810e214:	b580      	push	{r7, lr}
 810e216:	b08c      	sub	sp, #48	; 0x30
 810e218:	af00      	add	r7, sp, #0
 810e21a:	6078      	str	r0, [r7, #4]
 810e21c:	6039      	str	r1, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 810e21e:	f7f9 f9fd 	bl	810761c <HAL_GetTick>
 810e222:	6278      	str	r0, [r7, #36]	; 0x24
  uint32_t count;
  uint32_t *pData = pSDstatus;
 810e224:	683b      	ldr	r3, [r7, #0]
 810e226:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Check SD response */
  if ((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 810e228:	687b      	ldr	r3, [r7, #4]
 810e22a:	681b      	ldr	r3, [r3, #0]
 810e22c:	2100      	movs	r1, #0
 810e22e:	4618      	mov	r0, r3
 810e230:	f002 fe29 	bl	8110e86 <SDMMC_GetResponse>
 810e234:	4603      	mov	r3, r0
 810e236:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 810e23a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 810e23e:	d102      	bne.n	810e246 <SD_SendSDStatus+0x32>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 810e240:	f44f 6300 	mov.w	r3, #2048	; 0x800
 810e244:	e0b0      	b.n	810e3a8 <SD_SendSDStatus+0x194>
  }

  /* Set block size for card if it is not equal to current block size for card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 64U);
 810e246:	687b      	ldr	r3, [r7, #4]
 810e248:	681b      	ldr	r3, [r3, #0]
 810e24a:	2140      	movs	r1, #64	; 0x40
 810e24c:	4618      	mov	r0, r3
 810e24e:	f002 fe59 	bl	8110f04 <SDMMC_CmdBlockLength>
 810e252:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 810e254:	6a3b      	ldr	r3, [r7, #32]
 810e256:	2b00      	cmp	r3, #0
 810e258:	d005      	beq.n	810e266 <SD_SendSDStatus+0x52>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 810e25a:	687b      	ldr	r3, [r7, #4]
 810e25c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 810e25e:	687b      	ldr	r3, [r7, #4]
 810e260:	635a      	str	r2, [r3, #52]	; 0x34
    return errorstate;
 810e262:	6a3b      	ldr	r3, [r7, #32]
 810e264:	e0a0      	b.n	810e3a8 <SD_SendSDStatus+0x194>
  }

  /* Send CMD55 */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 810e266:	687b      	ldr	r3, [r7, #4]
 810e268:	681a      	ldr	r2, [r3, #0]
 810e26a:	687b      	ldr	r3, [r7, #4]
 810e26c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 810e26e:	041b      	lsls	r3, r3, #16
 810e270:	4619      	mov	r1, r3
 810e272:	4610      	mov	r0, r2
 810e274:	f002 feca 	bl	811100c <SDMMC_CmdAppCommand>
 810e278:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 810e27a:	6a3b      	ldr	r3, [r7, #32]
 810e27c:	2b00      	cmp	r3, #0
 810e27e:	d005      	beq.n	810e28c <SD_SendSDStatus+0x78>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 810e280:	687b      	ldr	r3, [r7, #4]
 810e282:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 810e284:	687b      	ldr	r3, [r7, #4]
 810e286:	635a      	str	r2, [r3, #52]	; 0x34
    return errorstate;
 810e288:	6a3b      	ldr	r3, [r7, #32]
 810e28a:	e08d      	b.n	810e3a8 <SD_SendSDStatus+0x194>
  }

  /* Configure the SD DPSM (Data Path State Machine) */
  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 810e28c:	f04f 33ff 	mov.w	r3, #4294967295
 810e290:	60bb      	str	r3, [r7, #8]
  config.DataLength    = 64U;
 810e292:	2340      	movs	r3, #64	; 0x40
 810e294:	60fb      	str	r3, [r7, #12]
  config.DataBlockSize = SDMMC_DATABLOCK_SIZE_64B;
 810e296:	2360      	movs	r3, #96	; 0x60
 810e298:	613b      	str	r3, [r7, #16]
  config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 810e29a:	2302      	movs	r3, #2
 810e29c:	617b      	str	r3, [r7, #20]
  config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 810e29e:	2300      	movs	r3, #0
 810e2a0:	61bb      	str	r3, [r7, #24]
  config.DPSM          = SDMMC_DPSM_ENABLE;
 810e2a2:	2301      	movs	r3, #1
 810e2a4:	61fb      	str	r3, [r7, #28]
  (void)SDMMC_ConfigData(hsd->Instance, &config);
 810e2a6:	687b      	ldr	r3, [r7, #4]
 810e2a8:	681b      	ldr	r3, [r3, #0]
 810e2aa:	f107 0208 	add.w	r2, r7, #8
 810e2ae:	4611      	mov	r1, r2
 810e2b0:	4618      	mov	r0, r3
 810e2b2:	f002 fdfb 	bl	8110eac <SDMMC_ConfigData>

  /* Send ACMD13 (SD_APP_STAUS)  with argument as card's RCA */
  errorstate = SDMMC_CmdStatusRegister(hsd->Instance);
 810e2b6:	687b      	ldr	r3, [r7, #4]
 810e2b8:	681b      	ldr	r3, [r3, #0]
 810e2ba:	4618      	mov	r0, r3
 810e2bc:	f002 ffb2 	bl	8111224 <SDMMC_CmdStatusRegister>
 810e2c0:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 810e2c2:	6a3b      	ldr	r3, [r7, #32]
 810e2c4:	2b00      	cmp	r3, #0
 810e2c6:	d02b      	beq.n	810e320 <SD_SendSDStatus+0x10c>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 810e2c8:	687b      	ldr	r3, [r7, #4]
 810e2ca:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 810e2cc:	687b      	ldr	r3, [r7, #4]
 810e2ce:	635a      	str	r2, [r3, #52]	; 0x34
    return errorstate;
 810e2d0:	6a3b      	ldr	r3, [r7, #32]
 810e2d2:	e069      	b.n	810e3a8 <SD_SendSDStatus+0x194>
  }

  /* Get status data */
  while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
  {
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF))
 810e2d4:	687b      	ldr	r3, [r7, #4]
 810e2d6:	681b      	ldr	r3, [r3, #0]
 810e2d8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 810e2da:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 810e2de:	2b00      	cmp	r3, #0
 810e2e0:	d013      	beq.n	810e30a <SD_SendSDStatus+0xf6>
    {
      for (count = 0U; count < 8U; count++)
 810e2e2:	2300      	movs	r3, #0
 810e2e4:	62fb      	str	r3, [r7, #44]	; 0x2c
 810e2e6:	e00d      	b.n	810e304 <SD_SendSDStatus+0xf0>
      {
        *pData = SDMMC_ReadFIFO(hsd->Instance);
 810e2e8:	687b      	ldr	r3, [r7, #4]
 810e2ea:	681b      	ldr	r3, [r3, #0]
 810e2ec:	4618      	mov	r0, r3
 810e2ee:	f002 fd67 	bl	8110dc0 <SDMMC_ReadFIFO>
 810e2f2:	4602      	mov	r2, r0
 810e2f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 810e2f6:	601a      	str	r2, [r3, #0]
        pData++;
 810e2f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 810e2fa:	3304      	adds	r3, #4
 810e2fc:	62bb      	str	r3, [r7, #40]	; 0x28
      for (count = 0U; count < 8U; count++)
 810e2fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 810e300:	3301      	adds	r3, #1
 810e302:	62fb      	str	r3, [r7, #44]	; 0x2c
 810e304:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 810e306:	2b07      	cmp	r3, #7
 810e308:	d9ee      	bls.n	810e2e8 <SD_SendSDStatus+0xd4>
      }
    }

    if ((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 810e30a:	f7f9 f987 	bl	810761c <HAL_GetTick>
 810e30e:	4602      	mov	r2, r0
 810e310:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 810e312:	1ad3      	subs	r3, r2, r3
 810e314:	f1b3 3fff 	cmp.w	r3, #4294967295
 810e318:	d102      	bne.n	810e320 <SD_SendSDStatus+0x10c>
    {
      return HAL_SD_ERROR_TIMEOUT;
 810e31a:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 810e31e:	e043      	b.n	810e3a8 <SD_SendSDStatus+0x194>
  while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 810e320:	687b      	ldr	r3, [r7, #4]
 810e322:	681b      	ldr	r3, [r3, #0]
 810e324:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 810e326:	f403 7395 	and.w	r3, r3, #298	; 0x12a
 810e32a:	2b00      	cmp	r3, #0
 810e32c:	d0d2      	beq.n	810e2d4 <SD_SendSDStatus+0xc0>
    }
  }

  if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 810e32e:	687b      	ldr	r3, [r7, #4]
 810e330:	681b      	ldr	r3, [r3, #0]
 810e332:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 810e334:	f003 0308 	and.w	r3, r3, #8
 810e338:	2b00      	cmp	r3, #0
 810e33a:	d001      	beq.n	810e340 <SD_SendSDStatus+0x12c>
  {
    return HAL_SD_ERROR_DATA_TIMEOUT;
 810e33c:	2308      	movs	r3, #8
 810e33e:	e033      	b.n	810e3a8 <SD_SendSDStatus+0x194>
  }
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 810e340:	687b      	ldr	r3, [r7, #4]
 810e342:	681b      	ldr	r3, [r3, #0]
 810e344:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 810e346:	f003 0302 	and.w	r3, r3, #2
 810e34a:	2b00      	cmp	r3, #0
 810e34c:	d001      	beq.n	810e352 <SD_SendSDStatus+0x13e>
  {
    return HAL_SD_ERROR_DATA_CRC_FAIL;
 810e34e:	2302      	movs	r3, #2
 810e350:	e02a      	b.n	810e3a8 <SD_SendSDStatus+0x194>
  }
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 810e352:	687b      	ldr	r3, [r7, #4]
 810e354:	681b      	ldr	r3, [r3, #0]
 810e356:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 810e358:	f003 0320 	and.w	r3, r3, #32
 810e35c:	2b00      	cmp	r3, #0
 810e35e:	d017      	beq.n	810e390 <SD_SendSDStatus+0x17c>
  {
    return HAL_SD_ERROR_RX_OVERRUN;
 810e360:	2320      	movs	r3, #32
 810e362:	e021      	b.n	810e3a8 <SD_SendSDStatus+0x194>
    /* Nothing to do */
  }

  while ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DPSMACT)))
  {
    *pData = SDMMC_ReadFIFO(hsd->Instance);
 810e364:	687b      	ldr	r3, [r7, #4]
 810e366:	681b      	ldr	r3, [r3, #0]
 810e368:	4618      	mov	r0, r3
 810e36a:	f002 fd29 	bl	8110dc0 <SDMMC_ReadFIFO>
 810e36e:	4602      	mov	r2, r0
 810e370:	6abb      	ldr	r3, [r7, #40]	; 0x28
 810e372:	601a      	str	r2, [r3, #0]
    pData++;
 810e374:	6abb      	ldr	r3, [r7, #40]	; 0x28
 810e376:	3304      	adds	r3, #4
 810e378:	62bb      	str	r3, [r7, #40]	; 0x28

    if ((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 810e37a:	f7f9 f94f 	bl	810761c <HAL_GetTick>
 810e37e:	4602      	mov	r2, r0
 810e380:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 810e382:	1ad3      	subs	r3, r2, r3
 810e384:	f1b3 3fff 	cmp.w	r3, #4294967295
 810e388:	d102      	bne.n	810e390 <SD_SendSDStatus+0x17c>
    {
      return HAL_SD_ERROR_TIMEOUT;
 810e38a:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 810e38e:	e00b      	b.n	810e3a8 <SD_SendSDStatus+0x194>
  while ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DPSMACT)))
 810e390:	687b      	ldr	r3, [r7, #4]
 810e392:	681b      	ldr	r3, [r3, #0]
 810e394:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 810e396:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 810e39a:	2b00      	cmp	r3, #0
 810e39c:	d1e2      	bne.n	810e364 <SD_SendSDStatus+0x150>
    }
  }

  /* Clear all the static status flags*/
  __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 810e39e:	687b      	ldr	r3, [r7, #4]
 810e3a0:	681b      	ldr	r3, [r3, #0]
 810e3a2:	4a03      	ldr	r2, [pc, #12]	; (810e3b0 <SD_SendSDStatus+0x19c>)
 810e3a4:	639a      	str	r2, [r3, #56]	; 0x38

  return HAL_SD_ERROR_NONE;
 810e3a6:	2300      	movs	r3, #0
}
 810e3a8:	4618      	mov	r0, r3
 810e3aa:	3730      	adds	r7, #48	; 0x30
 810e3ac:	46bd      	mov	sp, r7
 810e3ae:	bd80      	pop	{r7, pc}
 810e3b0:	18000f3a 	.word	0x18000f3a

0810e3b4 <SD_SendStatus>:
  * @param  pCardStatus: pointer to the buffer that will contain the SD card
  *         status (Card Status register)
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 810e3b4:	b580      	push	{r7, lr}
 810e3b6:	b084      	sub	sp, #16
 810e3b8:	af00      	add	r7, sp, #0
 810e3ba:	6078      	str	r0, [r7, #4]
 810e3bc:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

  if (pCardStatus == NULL)
 810e3be:	683b      	ldr	r3, [r7, #0]
 810e3c0:	2b00      	cmp	r3, #0
 810e3c2:	d102      	bne.n	810e3ca <SD_SendStatus+0x16>
  {
    return HAL_SD_ERROR_PARAM;
 810e3c4:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 810e3c8:	e018      	b.n	810e3fc <SD_SendStatus+0x48>
  }

  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 810e3ca:	687b      	ldr	r3, [r7, #4]
 810e3cc:	681a      	ldr	r2, [r3, #0]
 810e3ce:	687b      	ldr	r3, [r7, #4]
 810e3d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 810e3d2:	041b      	lsls	r3, r3, #16
 810e3d4:	4619      	mov	r1, r3
 810e3d6:	4610      	mov	r0, r2
 810e3d8:	f002 ff01 	bl	81111de <SDMMC_CmdSendStatus>
 810e3dc:	60f8      	str	r0, [r7, #12]
  if (errorstate != HAL_SD_ERROR_NONE)
 810e3de:	68fb      	ldr	r3, [r7, #12]
 810e3e0:	2b00      	cmp	r3, #0
 810e3e2:	d001      	beq.n	810e3e8 <SD_SendStatus+0x34>
  {
    return errorstate;
 810e3e4:	68fb      	ldr	r3, [r7, #12]
 810e3e6:	e009      	b.n	810e3fc <SD_SendStatus+0x48>
  }

  /* Get SD card status */
  *pCardStatus = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 810e3e8:	687b      	ldr	r3, [r7, #4]
 810e3ea:	681b      	ldr	r3, [r3, #0]
 810e3ec:	2100      	movs	r1, #0
 810e3ee:	4618      	mov	r0, r3
 810e3f0:	f002 fd49 	bl	8110e86 <SDMMC_GetResponse>
 810e3f4:	4602      	mov	r2, r0
 810e3f6:	683b      	ldr	r3, [r7, #0]
 810e3f8:	601a      	str	r2, [r3, #0]

  return HAL_SD_ERROR_NONE;
 810e3fa:	2300      	movs	r3, #0
}
 810e3fc:	4618      	mov	r0, r3
 810e3fe:	3710      	adds	r7, #16
 810e400:	46bd      	mov	sp, r7
 810e402:	bd80      	pop	{r7, pc}

0810e404 <SD_WideBus_Enable>:
  * @brief  Enables the SDMMC wide bus mode.
  * @param  hsd: pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Enable(SD_HandleTypeDef *hsd)
{
 810e404:	b580      	push	{r7, lr}
 810e406:	b086      	sub	sp, #24
 810e408:	af00      	add	r7, sp, #0
 810e40a:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0UL, 0UL};
 810e40c:	2300      	movs	r3, #0
 810e40e:	60fb      	str	r3, [r7, #12]
 810e410:	2300      	movs	r3, #0
 810e412:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if ((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 810e414:	687b      	ldr	r3, [r7, #4]
 810e416:	681b      	ldr	r3, [r3, #0]
 810e418:	2100      	movs	r1, #0
 810e41a:	4618      	mov	r0, r3
 810e41c:	f002 fd33 	bl	8110e86 <SDMMC_GetResponse>
 810e420:	4603      	mov	r3, r0
 810e422:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 810e426:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 810e42a:	d102      	bne.n	810e432 <SD_WideBus_Enable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 810e42c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 810e430:	e02f      	b.n	810e492 <SD_WideBus_Enable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 810e432:	f107 030c 	add.w	r3, r7, #12
 810e436:	4619      	mov	r1, r3
 810e438:	6878      	ldr	r0, [r7, #4]
 810e43a:	f000 f879 	bl	810e530 <SD_FindSCR>
 810e43e:	6178      	str	r0, [r7, #20]
  if (errorstate != HAL_SD_ERROR_NONE)
 810e440:	697b      	ldr	r3, [r7, #20]
 810e442:	2b00      	cmp	r3, #0
 810e444:	d001      	beq.n	810e44a <SD_WideBus_Enable+0x46>
  {
    return errorstate;
 810e446:	697b      	ldr	r3, [r7, #20]
 810e448:	e023      	b.n	810e492 <SD_WideBus_Enable+0x8e>
  }

  /* If requested card supports wide bus operation */
  if ((scr[1U] & SDMMC_WIDE_BUS_SUPPORT) != SDMMC_ALLZERO)
 810e44a:	693b      	ldr	r3, [r7, #16]
 810e44c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 810e450:	2b00      	cmp	r3, #0
 810e452:	d01c      	beq.n	810e48e <SD_WideBus_Enable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA.*/
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 810e454:	687b      	ldr	r3, [r7, #4]
 810e456:	681a      	ldr	r2, [r3, #0]
 810e458:	687b      	ldr	r3, [r7, #4]
 810e45a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 810e45c:	041b      	lsls	r3, r3, #16
 810e45e:	4619      	mov	r1, r3
 810e460:	4610      	mov	r0, r2
 810e462:	f002 fdd3 	bl	811100c <SDMMC_CmdAppCommand>
 810e466:	6178      	str	r0, [r7, #20]
    if (errorstate != HAL_SD_ERROR_NONE)
 810e468:	697b      	ldr	r3, [r7, #20]
 810e46a:	2b00      	cmp	r3, #0
 810e46c:	d001      	beq.n	810e472 <SD_WideBus_Enable+0x6e>
    {
      return errorstate;
 810e46e:	697b      	ldr	r3, [r7, #20]
 810e470:	e00f      	b.n	810e492 <SD_WideBus_Enable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 2 for wide bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 2U);
 810e472:	687b      	ldr	r3, [r7, #4]
 810e474:	681b      	ldr	r3, [r3, #0]
 810e476:	2102      	movs	r1, #2
 810e478:	4618      	mov	r0, r3
 810e47a:	f002 fe0a 	bl	8111092 <SDMMC_CmdBusWidth>
 810e47e:	6178      	str	r0, [r7, #20]
    if (errorstate != HAL_SD_ERROR_NONE)
 810e480:	697b      	ldr	r3, [r7, #20]
 810e482:	2b00      	cmp	r3, #0
 810e484:	d001      	beq.n	810e48a <SD_WideBus_Enable+0x86>
    {
      return errorstate;
 810e486:	697b      	ldr	r3, [r7, #20]
 810e488:	e003      	b.n	810e492 <SD_WideBus_Enable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 810e48a:	2300      	movs	r3, #0
 810e48c:	e001      	b.n	810e492 <SD_WideBus_Enable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 810e48e:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 810e492:	4618      	mov	r0, r3
 810e494:	3718      	adds	r7, #24
 810e496:	46bd      	mov	sp, r7
 810e498:	bd80      	pop	{r7, pc}

0810e49a <SD_WideBus_Disable>:
  * @brief  Disables the SDMMC wide bus mode.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Disable(SD_HandleTypeDef *hsd)
{
 810e49a:	b580      	push	{r7, lr}
 810e49c:	b086      	sub	sp, #24
 810e49e:	af00      	add	r7, sp, #0
 810e4a0:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0UL, 0UL};
 810e4a2:	2300      	movs	r3, #0
 810e4a4:	60fb      	str	r3, [r7, #12]
 810e4a6:	2300      	movs	r3, #0
 810e4a8:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if ((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 810e4aa:	687b      	ldr	r3, [r7, #4]
 810e4ac:	681b      	ldr	r3, [r3, #0]
 810e4ae:	2100      	movs	r1, #0
 810e4b0:	4618      	mov	r0, r3
 810e4b2:	f002 fce8 	bl	8110e86 <SDMMC_GetResponse>
 810e4b6:	4603      	mov	r3, r0
 810e4b8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 810e4bc:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 810e4c0:	d102      	bne.n	810e4c8 <SD_WideBus_Disable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 810e4c2:	f44f 6300 	mov.w	r3, #2048	; 0x800
 810e4c6:	e02f      	b.n	810e528 <SD_WideBus_Disable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 810e4c8:	f107 030c 	add.w	r3, r7, #12
 810e4cc:	4619      	mov	r1, r3
 810e4ce:	6878      	ldr	r0, [r7, #4]
 810e4d0:	f000 f82e 	bl	810e530 <SD_FindSCR>
 810e4d4:	6178      	str	r0, [r7, #20]
  if (errorstate != HAL_SD_ERROR_NONE)
 810e4d6:	697b      	ldr	r3, [r7, #20]
 810e4d8:	2b00      	cmp	r3, #0
 810e4da:	d001      	beq.n	810e4e0 <SD_WideBus_Disable+0x46>
  {
    return errorstate;
 810e4dc:	697b      	ldr	r3, [r7, #20]
 810e4de:	e023      	b.n	810e528 <SD_WideBus_Disable+0x8e>
  }

  /* If requested card supports 1 bit mode operation */
  if ((scr[1U] & SDMMC_SINGLE_BUS_SUPPORT) != SDMMC_ALLZERO)
 810e4e0:	693b      	ldr	r3, [r7, #16]
 810e4e2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 810e4e6:	2b00      	cmp	r3, #0
 810e4e8:	d01c      	beq.n	810e524 <SD_WideBus_Disable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 810e4ea:	687b      	ldr	r3, [r7, #4]
 810e4ec:	681a      	ldr	r2, [r3, #0]
 810e4ee:	687b      	ldr	r3, [r7, #4]
 810e4f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 810e4f2:	041b      	lsls	r3, r3, #16
 810e4f4:	4619      	mov	r1, r3
 810e4f6:	4610      	mov	r0, r2
 810e4f8:	f002 fd88 	bl	811100c <SDMMC_CmdAppCommand>
 810e4fc:	6178      	str	r0, [r7, #20]
    if (errorstate != HAL_SD_ERROR_NONE)
 810e4fe:	697b      	ldr	r3, [r7, #20]
 810e500:	2b00      	cmp	r3, #0
 810e502:	d001      	beq.n	810e508 <SD_WideBus_Disable+0x6e>
    {
      return errorstate;
 810e504:	697b      	ldr	r3, [r7, #20]
 810e506:	e00f      	b.n	810e528 <SD_WideBus_Disable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 0 for single bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 0U);
 810e508:	687b      	ldr	r3, [r7, #4]
 810e50a:	681b      	ldr	r3, [r3, #0]
 810e50c:	2100      	movs	r1, #0
 810e50e:	4618      	mov	r0, r3
 810e510:	f002 fdbf 	bl	8111092 <SDMMC_CmdBusWidth>
 810e514:	6178      	str	r0, [r7, #20]
    if (errorstate != HAL_SD_ERROR_NONE)
 810e516:	697b      	ldr	r3, [r7, #20]
 810e518:	2b00      	cmp	r3, #0
 810e51a:	d001      	beq.n	810e520 <SD_WideBus_Disable+0x86>
    {
      return errorstate;
 810e51c:	697b      	ldr	r3, [r7, #20]
 810e51e:	e003      	b.n	810e528 <SD_WideBus_Disable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 810e520:	2300      	movs	r3, #0
 810e522:	e001      	b.n	810e528 <SD_WideBus_Disable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 810e524:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 810e528:	4618      	mov	r0, r3
 810e52a:	3718      	adds	r7, #24
 810e52c:	46bd      	mov	sp, r7
 810e52e:	bd80      	pop	{r7, pc}

0810e530 <SD_FindSCR>:
  * @param  hsd: Pointer to SD handle
  * @param  pSCR: pointer to the buffer that will contain the SCR value
  * @retval error state
  */
static uint32_t SD_FindSCR(SD_HandleTypeDef *hsd, uint32_t *pSCR)
{
 810e530:	b580      	push	{r7, lr}
 810e532:	b08e      	sub	sp, #56	; 0x38
 810e534:	af00      	add	r7, sp, #0
 810e536:	6078      	str	r0, [r7, #4]
 810e538:	6039      	str	r1, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 810e53a:	f7f9 f86f 	bl	810761c <HAL_GetTick>
 810e53e:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t index = 0U;
 810e540:	2300      	movs	r3, #0
 810e542:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t tempscr[2U] = {0UL, 0UL};
 810e544:	2300      	movs	r3, #0
 810e546:	60bb      	str	r3, [r7, #8]
 810e548:	2300      	movs	r3, #0
 810e54a:	60fb      	str	r3, [r7, #12]
  uint32_t *scr = pSCR;
 810e54c:	683b      	ldr	r3, [r7, #0]
 810e54e:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Set Block Size To 8 Bytes */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8U);
 810e550:	687b      	ldr	r3, [r7, #4]
 810e552:	681b      	ldr	r3, [r3, #0]
 810e554:	2108      	movs	r1, #8
 810e556:	4618      	mov	r0, r3
 810e558:	f002 fcd4 	bl	8110f04 <SDMMC_CmdBlockLength>
 810e55c:	62b8      	str	r0, [r7, #40]	; 0x28
  if (errorstate != HAL_SD_ERROR_NONE)
 810e55e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 810e560:	2b00      	cmp	r3, #0
 810e562:	d001      	beq.n	810e568 <SD_FindSCR+0x38>
  {
    return errorstate;
 810e564:	6abb      	ldr	r3, [r7, #40]	; 0x28
 810e566:	e0ad      	b.n	810e6c4 <SD_FindSCR+0x194>
  }

  /* Send CMD55 APP_CMD with argument as card's RCA */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)((hsd->SdCard.RelCardAdd) << 16U));
 810e568:	687b      	ldr	r3, [r7, #4]
 810e56a:	681a      	ldr	r2, [r3, #0]
 810e56c:	687b      	ldr	r3, [r7, #4]
 810e56e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 810e570:	041b      	lsls	r3, r3, #16
 810e572:	4619      	mov	r1, r3
 810e574:	4610      	mov	r0, r2
 810e576:	f002 fd49 	bl	811100c <SDMMC_CmdAppCommand>
 810e57a:	62b8      	str	r0, [r7, #40]	; 0x28
  if (errorstate != HAL_SD_ERROR_NONE)
 810e57c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 810e57e:	2b00      	cmp	r3, #0
 810e580:	d001      	beq.n	810e586 <SD_FindSCR+0x56>
  {
    return errorstate;
 810e582:	6abb      	ldr	r3, [r7, #40]	; 0x28
 810e584:	e09e      	b.n	810e6c4 <SD_FindSCR+0x194>
  }

  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 810e586:	f04f 33ff 	mov.w	r3, #4294967295
 810e58a:	613b      	str	r3, [r7, #16]
  config.DataLength    = 8U;
 810e58c:	2308      	movs	r3, #8
 810e58e:	617b      	str	r3, [r7, #20]
  config.DataBlockSize = SDMMC_DATABLOCK_SIZE_8B;
 810e590:	2330      	movs	r3, #48	; 0x30
 810e592:	61bb      	str	r3, [r7, #24]
  config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 810e594:	2302      	movs	r3, #2
 810e596:	61fb      	str	r3, [r7, #28]
  config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 810e598:	2300      	movs	r3, #0
 810e59a:	623b      	str	r3, [r7, #32]
  config.DPSM          = SDMMC_DPSM_ENABLE;
 810e59c:	2301      	movs	r3, #1
 810e59e:	627b      	str	r3, [r7, #36]	; 0x24
  (void)SDMMC_ConfigData(hsd->Instance, &config);
 810e5a0:	687b      	ldr	r3, [r7, #4]
 810e5a2:	681b      	ldr	r3, [r3, #0]
 810e5a4:	f107 0210 	add.w	r2, r7, #16
 810e5a8:	4611      	mov	r1, r2
 810e5aa:	4618      	mov	r0, r3
 810e5ac:	f002 fc7e 	bl	8110eac <SDMMC_ConfigData>

  /* Send ACMD51 SD_APP_SEND_SCR with argument as 0 */
  errorstate = SDMMC_CmdSendSCR(hsd->Instance);
 810e5b0:	687b      	ldr	r3, [r7, #4]
 810e5b2:	681b      	ldr	r3, [r3, #0]
 810e5b4:	4618      	mov	r0, r3
 810e5b6:	f002 fd8f 	bl	81110d8 <SDMMC_CmdSendSCR>
 810e5ba:	62b8      	str	r0, [r7, #40]	; 0x28
  if (errorstate != HAL_SD_ERROR_NONE)
 810e5bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 810e5be:	2b00      	cmp	r3, #0
 810e5c0:	d027      	beq.n	810e612 <SD_FindSCR+0xe2>
  {
    return errorstate;
 810e5c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 810e5c4:	e07e      	b.n	810e6c4 <SD_FindSCR+0x194>
  }

  while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND |
                            SDMMC_FLAG_DATAEND))
  {
    if ((!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOE)) && (index == 0U))
 810e5c6:	687b      	ldr	r3, [r7, #4]
 810e5c8:	681b      	ldr	r3, [r3, #0]
 810e5ca:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 810e5cc:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 810e5d0:	2b00      	cmp	r3, #0
 810e5d2:	d113      	bne.n	810e5fc <SD_FindSCR+0xcc>
 810e5d4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 810e5d6:	2b00      	cmp	r3, #0
 810e5d8:	d110      	bne.n	810e5fc <SD_FindSCR+0xcc>
    {
      tempscr[0] = SDMMC_ReadFIFO(hsd->Instance);
 810e5da:	687b      	ldr	r3, [r7, #4]
 810e5dc:	681b      	ldr	r3, [r3, #0]
 810e5de:	4618      	mov	r0, r3
 810e5e0:	f002 fbee 	bl	8110dc0 <SDMMC_ReadFIFO>
 810e5e4:	4603      	mov	r3, r0
 810e5e6:	60bb      	str	r3, [r7, #8]
      tempscr[1] = SDMMC_ReadFIFO(hsd->Instance);
 810e5e8:	687b      	ldr	r3, [r7, #4]
 810e5ea:	681b      	ldr	r3, [r3, #0]
 810e5ec:	4618      	mov	r0, r3
 810e5ee:	f002 fbe7 	bl	8110dc0 <SDMMC_ReadFIFO>
 810e5f2:	4603      	mov	r3, r0
 810e5f4:	60fb      	str	r3, [r7, #12]
      index++;
 810e5f6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 810e5f8:	3301      	adds	r3, #1
 810e5fa:	637b      	str	r3, [r7, #52]	; 0x34
    }


    if ((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 810e5fc:	f7f9 f80e 	bl	810761c <HAL_GetTick>
 810e600:	4602      	mov	r2, r0
 810e602:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 810e604:	1ad3      	subs	r3, r2, r3
 810e606:	f1b3 3fff 	cmp.w	r3, #4294967295
 810e60a:	d102      	bne.n	810e612 <SD_FindSCR+0xe2>
    {
      return HAL_SD_ERROR_TIMEOUT;
 810e60c:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 810e610:	e058      	b.n	810e6c4 <SD_FindSCR+0x194>
  while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND |
 810e612:	687b      	ldr	r3, [r7, #4]
 810e614:	681b      	ldr	r3, [r3, #0]
 810e616:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 810e618:	f240 532a 	movw	r3, #1322	; 0x52a
 810e61c:	4013      	ands	r3, r2
 810e61e:	2b00      	cmp	r3, #0
 810e620:	d0d1      	beq.n	810e5c6 <SD_FindSCR+0x96>
    }
  }

  if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 810e622:	687b      	ldr	r3, [r7, #4]
 810e624:	681b      	ldr	r3, [r3, #0]
 810e626:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 810e628:	f003 0308 	and.w	r3, r3, #8
 810e62c:	2b00      	cmp	r3, #0
 810e62e:	d005      	beq.n	810e63c <SD_FindSCR+0x10c>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DTIMEOUT);
 810e630:	687b      	ldr	r3, [r7, #4]
 810e632:	681b      	ldr	r3, [r3, #0]
 810e634:	2208      	movs	r2, #8
 810e636:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_TIMEOUT;
 810e638:	2308      	movs	r3, #8
 810e63a:	e043      	b.n	810e6c4 <SD_FindSCR+0x194>
  }
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 810e63c:	687b      	ldr	r3, [r7, #4]
 810e63e:	681b      	ldr	r3, [r3, #0]
 810e640:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 810e642:	f003 0302 	and.w	r3, r3, #2
 810e646:	2b00      	cmp	r3, #0
 810e648:	d005      	beq.n	810e656 <SD_FindSCR+0x126>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DCRCFAIL);
 810e64a:	687b      	ldr	r3, [r7, #4]
 810e64c:	681b      	ldr	r3, [r3, #0]
 810e64e:	2202      	movs	r2, #2
 810e650:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_CRC_FAIL;
 810e652:	2302      	movs	r3, #2
 810e654:	e036      	b.n	810e6c4 <SD_FindSCR+0x194>
  }
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 810e656:	687b      	ldr	r3, [r7, #4]
 810e658:	681b      	ldr	r3, [r3, #0]
 810e65a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 810e65c:	f003 0320 	and.w	r3, r3, #32
 810e660:	2b00      	cmp	r3, #0
 810e662:	d005      	beq.n	810e670 <SD_FindSCR+0x140>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_RXOVERR);
 810e664:	687b      	ldr	r3, [r7, #4]
 810e666:	681b      	ldr	r3, [r3, #0]
 810e668:	2220      	movs	r2, #32
 810e66a:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_RX_OVERRUN;
 810e66c:	2320      	movs	r3, #32
 810e66e:	e029      	b.n	810e6c4 <SD_FindSCR+0x194>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 810e670:	687b      	ldr	r3, [r7, #4]
 810e672:	681b      	ldr	r3, [r3, #0]
 810e674:	4a15      	ldr	r2, [pc, #84]	; (810e6cc <SD_FindSCR+0x19c>)
 810e676:	639a      	str	r2, [r3, #56]	; 0x38

    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) | \
 810e678:	68fb      	ldr	r3, [r7, #12]
 810e67a:	061a      	lsls	r2, r3, #24
 810e67c:	68fb      	ldr	r3, [r7, #12]
 810e67e:	021b      	lsls	r3, r3, #8
 810e680:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 810e684:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 810e686:	68fb      	ldr	r3, [r7, #12]
 810e688:	0a1b      	lsrs	r3, r3, #8
 810e68a:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) | \
 810e68e:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 810e690:	68fb      	ldr	r3, [r7, #12]
 810e692:	0e1b      	lsrs	r3, r3, #24
 810e694:	431a      	orrs	r2, r3
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) | \
 810e696:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 810e698:	601a      	str	r2, [r3, #0]
    scr++;
 810e69a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 810e69c:	3304      	adds	r3, #4
 810e69e:	62fb      	str	r3, [r7, #44]	; 0x2c
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) | \
 810e6a0:	68bb      	ldr	r3, [r7, #8]
 810e6a2:	061a      	lsls	r2, r3, #24
 810e6a4:	68bb      	ldr	r3, [r7, #8]
 810e6a6:	021b      	lsls	r3, r3, #8
 810e6a8:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 810e6ac:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 810e6ae:	68bb      	ldr	r3, [r7, #8]
 810e6b0:	0a1b      	lsrs	r3, r3, #8
 810e6b2:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) | \
 810e6b6:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 810e6b8:	68bb      	ldr	r3, [r7, #8]
 810e6ba:	0e1b      	lsrs	r3, r3, #24
 810e6bc:	431a      	orrs	r2, r3
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) | \
 810e6be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 810e6c0:	601a      	str	r2, [r3, #0]

  }

  return HAL_SD_ERROR_NONE;
 810e6c2:	2300      	movs	r3, #0
}
 810e6c4:	4618      	mov	r0, r3
 810e6c6:	3738      	adds	r7, #56	; 0x38
 810e6c8:	46bd      	mov	sp, r7
 810e6ca:	bd80      	pop	{r7, pc}
 810e6cc:	18000f3a 	.word	0x18000f3a

0810e6d0 <HAL_SDRAM_Init>:
  *                the configuration information for SDRAM module.
  * @param  Timing Pointer to SDRAM control timing structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_Init(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_TimingTypeDef *Timing)
{
 810e6d0:	b580      	push	{r7, lr}
 810e6d2:	b082      	sub	sp, #8
 810e6d4:	af00      	add	r7, sp, #0
 810e6d6:	6078      	str	r0, [r7, #4]
 810e6d8:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM handle parameter */
  if (hsdram == NULL)
 810e6da:	687b      	ldr	r3, [r7, #4]
 810e6dc:	2b00      	cmp	r3, #0
 810e6de:	d101      	bne.n	810e6e4 <HAL_SDRAM_Init+0x14>
  {
    return HAL_ERROR;
 810e6e0:	2301      	movs	r3, #1
 810e6e2:	e02b      	b.n	810e73c <HAL_SDRAM_Init+0x6c>
  }

  if (hsdram->State == HAL_SDRAM_STATE_RESET)
 810e6e4:	687b      	ldr	r3, [r7, #4]
 810e6e6:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 810e6ea:	b2db      	uxtb	r3, r3
 810e6ec:	2b00      	cmp	r3, #0
 810e6ee:	d106      	bne.n	810e6fe <HAL_SDRAM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hsdram->Lock = HAL_UNLOCKED;
 810e6f0:	687b      	ldr	r3, [r7, #4]
 810e6f2:	2200      	movs	r2, #0
 810e6f4:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

    /* Init the low level hardware */
    hsdram->MspInitCallback(hsdram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SDRAM_MspInit(hsdram);
 810e6f8:	6878      	ldr	r0, [r7, #4]
 810e6fa:	f7f3 feb5 	bl	8102468 <HAL_SDRAM_MspInit>
#endif /* USE_HAL_SDRAM_REGISTER_CALLBACKS */
  }

  /* Initialize the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 810e6fe:	687b      	ldr	r3, [r7, #4]
 810e700:	2202      	movs	r2, #2
 810e702:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  /* Initialize SDRAM control Interface */
  (void)FMC_SDRAM_Init(hsdram->Instance, &(hsdram->Init));
 810e706:	687b      	ldr	r3, [r7, #4]
 810e708:	681a      	ldr	r2, [r3, #0]
 810e70a:	687b      	ldr	r3, [r7, #4]
 810e70c:	3304      	adds	r3, #4
 810e70e:	4619      	mov	r1, r3
 810e710:	4610      	mov	r0, r2
 810e712:	f002 fa65 	bl	8110be0 <FMC_SDRAM_Init>

  /* Initialize SDRAM timing Interface */
  (void)FMC_SDRAM_Timing_Init(hsdram->Instance, Timing, hsdram->Init.SDBank);
 810e716:	687b      	ldr	r3, [r7, #4]
 810e718:	6818      	ldr	r0, [r3, #0]
 810e71a:	687b      	ldr	r3, [r7, #4]
 810e71c:	685b      	ldr	r3, [r3, #4]
 810e71e:	461a      	mov	r2, r3
 810e720:	6839      	ldr	r1, [r7, #0]
 810e722:	f002 faba 	bl	8110c9a <FMC_SDRAM_Timing_Init>

  /* Enable FMC Peripheral */
  __FMC_ENABLE();
 810e726:	4b07      	ldr	r3, [pc, #28]	; (810e744 <HAL_SDRAM_Init+0x74>)
 810e728:	681b      	ldr	r3, [r3, #0]
 810e72a:	4a06      	ldr	r2, [pc, #24]	; (810e744 <HAL_SDRAM_Init+0x74>)
 810e72c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 810e730:	6013      	str	r3, [r2, #0]
  /* Update the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 810e732:	687b      	ldr	r3, [r7, #4]
 810e734:	2201      	movs	r2, #1
 810e736:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 810e73a:	2300      	movs	r3, #0
}
 810e73c:	4618      	mov	r0, r3
 810e73e:	3708      	adds	r7, #8
 810e740:	46bd      	mov	sp, r7
 810e742:	bd80      	pop	{r7, pc}
 810e744:	52004000 	.word	0x52004000

0810e748 <HAL_SPDIFRX_Init>:
  *        in the SPDIFRX_InitTypeDef and create the associated handle.
  * @param hspdif SPDIFRX handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPDIFRX_Init(SPDIFRX_HandleTypeDef *hspdif)
{
 810e748:	b580      	push	{r7, lr}
 810e74a:	b084      	sub	sp, #16
 810e74c:	af00      	add	r7, sp, #0
 810e74e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  /* Check the SPDIFRX handle allocation */
  if (hspdif == NULL)
 810e750:	687b      	ldr	r3, [r7, #4]
 810e752:	2b00      	cmp	r3, #0
 810e754:	d101      	bne.n	810e75a <HAL_SPDIFRX_Init+0x12>
  {
    return HAL_ERROR;
 810e756:	2301      	movs	r3, #1
 810e758:	e05e      	b.n	810e818 <HAL_SPDIFRX_Init+0xd0>

    /* Init the low level hardware */
    hspdif->MspInitCallback(hspdif);
  }
#else
  if (hspdif->State == HAL_SPDIFRX_STATE_RESET)
 810e75a:	687b      	ldr	r3, [r7, #4]
 810e75c:	f893 3049 	ldrb.w	r3, [r3, #73]	; 0x49
 810e760:	b2db      	uxtb	r3, r3
 810e762:	2b00      	cmp	r3, #0
 810e764:	d106      	bne.n	810e774 <HAL_SPDIFRX_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hspdif->Lock = HAL_UNLOCKED;
 810e766:	687b      	ldr	r3, [r7, #4]
 810e768:	2200      	movs	r2, #0
 810e76a:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SPDIFRX_MspInit(hspdif);
 810e76e:	6878      	ldr	r0, [r7, #4]
 810e770:	f7f3 f9d8 	bl	8101b24 <HAL_SPDIFRX_MspInit>
  }
#endif /* USE_HAL_SPDIFRX_REGISTER_CALLBACKS */

  /* SPDIFRX peripheral state is BUSY */
  hspdif->State = HAL_SPDIFRX_STATE_BUSY;
 810e774:	687b      	ldr	r3, [r7, #4]
 810e776:	2202      	movs	r2, #2
 810e778:	f883 2049 	strb.w	r2, [r3, #73]	; 0x49

  /* Disable SPDIFRX interface (IDLE State) */
  __HAL_SPDIFRX_IDLE(hspdif);
 810e77c:	687b      	ldr	r3, [r7, #4]
 810e77e:	681b      	ldr	r3, [r3, #0]
 810e780:	681a      	ldr	r2, [r3, #0]
 810e782:	687b      	ldr	r3, [r7, #4]
 810e784:	681b      	ldr	r3, [r3, #0]
 810e786:	f022 0203 	bic.w	r2, r2, #3
 810e78a:	601a      	str	r2, [r3, #0]

  /* Reset the old SPDIFRX CR configuration */
  tmpreg = hspdif->Instance->CR;
 810e78c:	687b      	ldr	r3, [r7, #4]
 810e78e:	681b      	ldr	r3, [r3, #0]
 810e790:	681b      	ldr	r3, [r3, #0]
 810e792:	60fb      	str	r3, [r7, #12]

  tmpreg &= ~(SPDIFRX_CR_RXSTEO  | SPDIFRX_CR_DRFMT  | SPDIFRX_CR_PMSK |
 810e794:	68fa      	ldr	r2, [r7, #12]
 810e796:	4b22      	ldr	r3, [pc, #136]	; (810e820 <HAL_SPDIFRX_Init+0xd8>)
 810e798:	4013      	ands	r3, r2
 810e79a:	60fb      	str	r3, [r7, #12]
              SPDIFRX_CR_CHSEL | SPDIFRX_CR_NBTR | SPDIFRX_CR_WFA |
              SPDIFRX_CR_CKSEN | SPDIFRX_CR_CKSBKPEN |
              SPDIFRX_CR_INSEL);

  /* Sets the new configuration of the SPDIFRX peripheral */
  tmpreg |= (hspdif->Init.StereoMode |
 810e79c:	687b      	ldr	r3, [r7, #4]
 810e79e:	699a      	ldr	r2, [r3, #24]
             hspdif->Init.InputSelection |
 810e7a0:	687b      	ldr	r3, [r7, #4]
 810e7a2:	685b      	ldr	r3, [r3, #4]
  tmpreg |= (hspdif->Init.StereoMode |
 810e7a4:	431a      	orrs	r2, r3
             hspdif->Init.Retries |
 810e7a6:	687b      	ldr	r3, [r7, #4]
 810e7a8:	689b      	ldr	r3, [r3, #8]
             hspdif->Init.InputSelection |
 810e7aa:	431a      	orrs	r2, r3
             hspdif->Init.WaitForActivity |
 810e7ac:	687b      	ldr	r3, [r7, #4]
 810e7ae:	68db      	ldr	r3, [r3, #12]
             hspdif->Init.Retries |
 810e7b0:	431a      	orrs	r2, r3
             hspdif->Init.ChannelSelection |
 810e7b2:	687b      	ldr	r3, [r7, #4]
 810e7b4:	691b      	ldr	r3, [r3, #16]
             hspdif->Init.WaitForActivity |
 810e7b6:	431a      	orrs	r2, r3
             hspdif->Init.DataFormat |
 810e7b8:	687b      	ldr	r3, [r7, #4]
 810e7ba:	695b      	ldr	r3, [r3, #20]
             hspdif->Init.ChannelSelection |
 810e7bc:	431a      	orrs	r2, r3
             hspdif->Init.PreambleTypeMask |
 810e7be:	687b      	ldr	r3, [r7, #4]
 810e7c0:	69db      	ldr	r3, [r3, #28]
             hspdif->Init.DataFormat |
 810e7c2:	431a      	orrs	r2, r3
             hspdif->Init.ChannelStatusMask |
 810e7c4:	687b      	ldr	r3, [r7, #4]
 810e7c6:	6a1b      	ldr	r3, [r3, #32]
             hspdif->Init.PreambleTypeMask |
 810e7c8:	431a      	orrs	r2, r3
             hspdif->Init.ValidityBitMask |
 810e7ca:	687b      	ldr	r3, [r7, #4]
 810e7cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
             hspdif->Init.ChannelStatusMask |
 810e7ce:	431a      	orrs	r2, r3
             hspdif->Init.ParityErrorMask
 810e7d0:	687b      	ldr	r3, [r7, #4]
 810e7d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
             hspdif->Init.ValidityBitMask |
 810e7d4:	4313      	orrs	r3, r2
  tmpreg |= (hspdif->Init.StereoMode |
 810e7d6:	68fa      	ldr	r2, [r7, #12]
 810e7d8:	4313      	orrs	r3, r2
 810e7da:	60fb      	str	r3, [r7, #12]
            );

  if (hspdif->Init.SymbolClockGen == ENABLE)
 810e7dc:	687b      	ldr	r3, [r7, #4]
 810e7de:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 810e7e2:	2b01      	cmp	r3, #1
 810e7e4:	d103      	bne.n	810e7ee <HAL_SPDIFRX_Init+0xa6>
  {
    tmpreg |= SPDIFRX_CR_CKSEN;
 810e7e6:	68fb      	ldr	r3, [r7, #12]
 810e7e8:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 810e7ec:	60fb      	str	r3, [r7, #12]
  }

  if (hspdif->Init.BackupSymbolClockGen == ENABLE)
 810e7ee:	687b      	ldr	r3, [r7, #4]
 810e7f0:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 810e7f4:	2b01      	cmp	r3, #1
 810e7f6:	d103      	bne.n	810e800 <HAL_SPDIFRX_Init+0xb8>
  {
    tmpreg |= SPDIFRX_CR_CKSBKPEN;
 810e7f8:	68fb      	ldr	r3, [r7, #12]
 810e7fa:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 810e7fe:	60fb      	str	r3, [r7, #12]
  }

  hspdif->Instance->CR = tmpreg;
 810e800:	687b      	ldr	r3, [r7, #4]
 810e802:	681b      	ldr	r3, [r3, #0]
 810e804:	68fa      	ldr	r2, [r7, #12]
 810e806:	601a      	str	r2, [r3, #0]

  hspdif->ErrorCode = HAL_SPDIFRX_ERROR_NONE;
 810e808:	687b      	ldr	r3, [r7, #4]
 810e80a:	2200      	movs	r2, #0
 810e80c:	64da      	str	r2, [r3, #76]	; 0x4c

  /* SPDIFRX peripheral state is READY*/
  hspdif->State = HAL_SPDIFRX_STATE_READY;
 810e80e:	687b      	ldr	r3, [r7, #4]
 810e810:	2201      	movs	r2, #1
 810e812:	f883 2049 	strb.w	r2, [r3, #73]	; 0x49

  return HAL_OK;
 810e816:	2300      	movs	r3, #0
}
 810e818:	4618      	mov	r0, r3
 810e81a:	3710      	adds	r7, #16
 810e81c:	46bd      	mov	sp, r7
 810e81e:	bd80      	pop	{r7, pc}
 810e820:	ffc88407 	.word	0xffc88407

0810e824 <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 810e824:	b580      	push	{r7, lr}
 810e826:	b084      	sub	sp, #16
 810e828:	af00      	add	r7, sp, #0
 810e82a:	6078      	str	r0, [r7, #4]
  uint32_t crc_length;
  uint32_t packet_length;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 810e82c:	687b      	ldr	r3, [r7, #4]
 810e82e:	2b00      	cmp	r3, #0
 810e830:	d101      	bne.n	810e836 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 810e832:	2301      	movs	r3, #1
 810e834:	e10f      	b.n	810ea56 <HAL_SPI_Init+0x232>
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 810e836:	687b      	ldr	r3, [r7, #4]
 810e838:	2200      	movs	r2, #0
 810e83a:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 810e83c:	687b      	ldr	r3, [r7, #4]
 810e83e:	681b      	ldr	r3, [r3, #0]
 810e840:	4a87      	ldr	r2, [pc, #540]	; (810ea60 <HAL_SPI_Init+0x23c>)
 810e842:	4293      	cmp	r3, r2
 810e844:	d00f      	beq.n	810e866 <HAL_SPI_Init+0x42>
 810e846:	687b      	ldr	r3, [r7, #4]
 810e848:	681b      	ldr	r3, [r3, #0]
 810e84a:	4a86      	ldr	r2, [pc, #536]	; (810ea64 <HAL_SPI_Init+0x240>)
 810e84c:	4293      	cmp	r3, r2
 810e84e:	d00a      	beq.n	810e866 <HAL_SPI_Init+0x42>
 810e850:	687b      	ldr	r3, [r7, #4]
 810e852:	681b      	ldr	r3, [r3, #0]
 810e854:	4a84      	ldr	r2, [pc, #528]	; (810ea68 <HAL_SPI_Init+0x244>)
 810e856:	4293      	cmp	r3, r2
 810e858:	d005      	beq.n	810e866 <HAL_SPI_Init+0x42>
 810e85a:	687b      	ldr	r3, [r7, #4]
 810e85c:	68db      	ldr	r3, [r3, #12]
 810e85e:	2b0f      	cmp	r3, #15
 810e860:	d901      	bls.n	810e866 <HAL_SPI_Init+0x42>
  {
    return HAL_ERROR;
 810e862:	2301      	movs	r3, #1
 810e864:	e0f7      	b.n	810ea56 <HAL_SPI_Init+0x232>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 810e866:	6878      	ldr	r0, [r7, #4]
 810e868:	f000 f900 	bl	810ea6c <SPI_GetPacketSize>
 810e86c:	60f8      	str	r0, [r7, #12]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 810e86e:	687b      	ldr	r3, [r7, #4]
 810e870:	681b      	ldr	r3, [r3, #0]
 810e872:	4a7b      	ldr	r2, [pc, #492]	; (810ea60 <HAL_SPI_Init+0x23c>)
 810e874:	4293      	cmp	r3, r2
 810e876:	d00c      	beq.n	810e892 <HAL_SPI_Init+0x6e>
 810e878:	687b      	ldr	r3, [r7, #4]
 810e87a:	681b      	ldr	r3, [r3, #0]
 810e87c:	4a79      	ldr	r2, [pc, #484]	; (810ea64 <HAL_SPI_Init+0x240>)
 810e87e:	4293      	cmp	r3, r2
 810e880:	d007      	beq.n	810e892 <HAL_SPI_Init+0x6e>
 810e882:	687b      	ldr	r3, [r7, #4]
 810e884:	681b      	ldr	r3, [r3, #0]
 810e886:	4a78      	ldr	r2, [pc, #480]	; (810ea68 <HAL_SPI_Init+0x244>)
 810e888:	4293      	cmp	r3, r2
 810e88a:	d002      	beq.n	810e892 <HAL_SPI_Init+0x6e>
 810e88c:	68fb      	ldr	r3, [r7, #12]
 810e88e:	2b08      	cmp	r3, #8
 810e890:	d811      	bhi.n	810e8b6 <HAL_SPI_Init+0x92>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 810e892:	687b      	ldr	r3, [r7, #4]
 810e894:	681b      	ldr	r3, [r3, #0]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 810e896:	4a72      	ldr	r2, [pc, #456]	; (810ea60 <HAL_SPI_Init+0x23c>)
 810e898:	4293      	cmp	r3, r2
 810e89a:	d009      	beq.n	810e8b0 <HAL_SPI_Init+0x8c>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 810e89c:	687b      	ldr	r3, [r7, #4]
 810e89e:	681b      	ldr	r3, [r3, #0]
 810e8a0:	4a70      	ldr	r2, [pc, #448]	; (810ea64 <HAL_SPI_Init+0x240>)
 810e8a2:	4293      	cmp	r3, r2
 810e8a4:	d004      	beq.n	810e8b0 <HAL_SPI_Init+0x8c>
 810e8a6:	687b      	ldr	r3, [r7, #4]
 810e8a8:	681b      	ldr	r3, [r3, #0]
 810e8aa:	4a6f      	ldr	r2, [pc, #444]	; (810ea68 <HAL_SPI_Init+0x244>)
 810e8ac:	4293      	cmp	r3, r2
 810e8ae:	d104      	bne.n	810e8ba <HAL_SPI_Init+0x96>
 810e8b0:	68fb      	ldr	r3, [r7, #12]
 810e8b2:	2b10      	cmp	r3, #16
 810e8b4:	d901      	bls.n	810e8ba <HAL_SPI_Init+0x96>
  {
    return HAL_ERROR;
 810e8b6:	2301      	movs	r3, #1
 810e8b8:	e0cd      	b.n	810ea56 <HAL_SPI_Init+0x232>
  {
    crc_length = hspi->Init.DataSize << SPI_CFG1_CRCSIZE_Pos;
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 810e8ba:	687b      	ldr	r3, [r7, #4]
 810e8bc:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 810e8c0:	b2db      	uxtb	r3, r3
 810e8c2:	2b00      	cmp	r3, #0
 810e8c4:	d106      	bne.n	810e8d4 <HAL_SPI_Init+0xb0>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 810e8c6:	687b      	ldr	r3, [r7, #4]
 810e8c8:	2200      	movs	r2, #0
 810e8ca:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 810e8ce:	6878      	ldr	r0, [r7, #4]
 810e8d0:	f7f3 f98e 	bl	8101bf0 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 810e8d4:	687b      	ldr	r3, [r7, #4]
 810e8d6:	2202      	movs	r2, #2
 810e8d8:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 810e8dc:	687b      	ldr	r3, [r7, #4]
 810e8de:	681b      	ldr	r3, [r3, #0]
 810e8e0:	681a      	ldr	r2, [r3, #0]
 810e8e2:	687b      	ldr	r3, [r7, #4]
 810e8e4:	681b      	ldr	r3, [r3, #0]
 810e8e6:	f022 0201 	bic.w	r2, r2, #1
 810e8ea:	601a      	str	r2, [r3, #0]

#if (USE_SPI_CRC == 0)
  /* Keep the default value of CRCSIZE in case of CRC is not used */
  crc_length = hspi->Instance->CFG1 & SPI_CFG1_CRCSIZE;
 810e8ec:	687b      	ldr	r3, [r7, #4]
 810e8ee:	681b      	ldr	r3, [r3, #0]
 810e8f0:	689b      	ldr	r3, [r3, #8]
 810e8f2:	f403 13f8 	and.w	r3, r3, #2031616	; 0x1f0000
 810e8f6:	60bb      	str	r3, [r7, #8]
  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  /* SPIx NSS Software Management Configuration */
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 810e8f8:	687b      	ldr	r3, [r7, #4]
 810e8fa:	699b      	ldr	r3, [r3, #24]
 810e8fc:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 810e900:	d119      	bne.n	810e936 <HAL_SPI_Init+0x112>
 810e902:	687b      	ldr	r3, [r7, #4]
 810e904:	685b      	ldr	r3, [r3, #4]
 810e906:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 810e90a:	d103      	bne.n	810e914 <HAL_SPI_Init+0xf0>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 810e90c:	687b      	ldr	r3, [r7, #4]
 810e90e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 810e910:	2b00      	cmp	r3, #0
 810e912:	d008      	beq.n	810e926 <HAL_SPI_Init+0x102>
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 810e914:	687b      	ldr	r3, [r7, #4]
 810e916:	685b      	ldr	r3, [r3, #4]
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 810e918:	2b00      	cmp	r3, #0
 810e91a:	d10c      	bne.n	810e936 <HAL_SPI_Init+0x112>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 810e91c:	687b      	ldr	r3, [r7, #4]
 810e91e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 810e920:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 810e924:	d107      	bne.n	810e936 <HAL_SPI_Init+0x112>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 810e926:	687b      	ldr	r3, [r7, #4]
 810e928:	681b      	ldr	r3, [r3, #0]
 810e92a:	681a      	ldr	r2, [r3, #0]
 810e92c:	687b      	ldr	r3, [r7, #4]
 810e92e:	681b      	ldr	r3, [r3, #0]
 810e930:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 810e934:	601a      	str	r2, [r3, #0]
  }

  /* SPIx Master Rx Auto Suspend Configuration */
  if (((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER) && (hspi->Init.DataSize >= SPI_DATASIZE_8BIT))
 810e936:	687b      	ldr	r3, [r7, #4]
 810e938:	685b      	ldr	r3, [r3, #4]
 810e93a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 810e93e:	2b00      	cmp	r3, #0
 810e940:	d00f      	beq.n	810e962 <HAL_SPI_Init+0x13e>
 810e942:	687b      	ldr	r3, [r7, #4]
 810e944:	68db      	ldr	r3, [r3, #12]
 810e946:	2b06      	cmp	r3, #6
 810e948:	d90b      	bls.n	810e962 <HAL_SPI_Init+0x13e>
  {
    MODIFY_REG(hspi->Instance->CR1, SPI_CR1_MASRX, hspi->Init.MasterReceiverAutoSusp);
 810e94a:	687b      	ldr	r3, [r7, #4]
 810e94c:	681b      	ldr	r3, [r3, #0]
 810e94e:	681b      	ldr	r3, [r3, #0]
 810e950:	f423 7180 	bic.w	r1, r3, #256	; 0x100
 810e954:	687b      	ldr	r3, [r7, #4]
 810e956:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 810e958:	687b      	ldr	r3, [r7, #4]
 810e95a:	681b      	ldr	r3, [r3, #0]
 810e95c:	430a      	orrs	r2, r1
 810e95e:	601a      	str	r2, [r3, #0]
 810e960:	e007      	b.n	810e972 <HAL_SPI_Init+0x14e>
  }
  else
  {
    CLEAR_BIT(hspi->Instance->CR1, SPI_CR1_MASRX);
 810e962:	687b      	ldr	r3, [r7, #4]
 810e964:	681b      	ldr	r3, [r3, #0]
 810e966:	681a      	ldr	r2, [r3, #0]
 810e968:	687b      	ldr	r3, [r7, #4]
 810e96a:	681b      	ldr	r3, [r3, #0]
 810e96c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 810e970:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 810e972:	687b      	ldr	r3, [r7, #4]
 810e974:	69da      	ldr	r2, [r3, #28]
 810e976:	687b      	ldr	r3, [r7, #4]
 810e978:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 810e97a:	431a      	orrs	r2, r3
 810e97c:	68bb      	ldr	r3, [r7, #8]
 810e97e:	431a      	orrs	r2, r3
 810e980:	687b      	ldr	r3, [r7, #4]
 810e982:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 810e984:	ea42 0103 	orr.w	r1, r2, r3
 810e988:	687b      	ldr	r3, [r7, #4]
 810e98a:	68da      	ldr	r2, [r3, #12]
 810e98c:	687b      	ldr	r3, [r7, #4]
 810e98e:	681b      	ldr	r3, [r3, #0]
 810e990:	430a      	orrs	r2, r1
 810e992:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode                | hspi->Init.TIMode    |
 810e994:	687b      	ldr	r3, [r7, #4]
 810e996:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 810e998:	687b      	ldr	r3, [r7, #4]
 810e99a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 810e99c:	431a      	orrs	r2, r3
 810e99e:	687b      	ldr	r3, [r7, #4]
 810e9a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 810e9a2:	431a      	orrs	r2, r3
 810e9a4:	687b      	ldr	r3, [r7, #4]
 810e9a6:	699b      	ldr	r3, [r3, #24]
 810e9a8:	431a      	orrs	r2, r3
 810e9aa:	687b      	ldr	r3, [r7, #4]
 810e9ac:	691b      	ldr	r3, [r3, #16]
 810e9ae:	431a      	orrs	r2, r3
 810e9b0:	687b      	ldr	r3, [r7, #4]
 810e9b2:	695b      	ldr	r3, [r3, #20]
 810e9b4:	431a      	orrs	r2, r3
 810e9b6:	687b      	ldr	r3, [r7, #4]
 810e9b8:	6a1b      	ldr	r3, [r3, #32]
 810e9ba:	431a      	orrs	r2, r3
 810e9bc:	687b      	ldr	r3, [r7, #4]
 810e9be:	685b      	ldr	r3, [r3, #4]
 810e9c0:	431a      	orrs	r2, r3
 810e9c2:	687b      	ldr	r3, [r7, #4]
 810e9c4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 810e9c6:	431a      	orrs	r2, r3
 810e9c8:	687b      	ldr	r3, [r7, #4]
 810e9ca:	689b      	ldr	r3, [r3, #8]
 810e9cc:	431a      	orrs	r2, r3
 810e9ce:	687b      	ldr	r3, [r7, #4]
 810e9d0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 810e9d2:	ea42 0103 	orr.w	r1, r2, r3
 810e9d6:	687b      	ldr	r3, [r7, #4]
 810e9d8:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 810e9da:	687b      	ldr	r3, [r7, #4]
 810e9dc:	681b      	ldr	r3, [r3, #0]
 810e9de:	430a      	orrs	r2, r1
 810e9e0:	60da      	str	r2, [r3, #12]
    WRITE_REG(hspi->Instance->CRCPOLY, hspi->Init.CRCPolynomial);
  }
#endif /* USE_SPI_CRC */

  /* Insure that Underrun configuration is managed only by Salve */
  if (hspi->Init.Mode == SPI_MODE_SLAVE)
 810e9e2:	687b      	ldr	r3, [r7, #4]
 810e9e4:	685b      	ldr	r3, [r3, #4]
 810e9e6:	2b00      	cmp	r3, #0
 810e9e8:	d113      	bne.n	810ea12 <HAL_SPI_Init+0x1ee>
    /* Set Default Underrun configuration */
#if (USE_SPI_CRC != 0UL)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_DISABLE)
#endif /* USE_SPI_CRC */
    {
      MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRDET, SPI_CFG1_UDRDET_0);
 810e9ea:	687b      	ldr	r3, [r7, #4]
 810e9ec:	681b      	ldr	r3, [r3, #0]
 810e9ee:	689b      	ldr	r3, [r3, #8]
 810e9f0:	f423 52c0 	bic.w	r2, r3, #6144	; 0x1800
 810e9f4:	687b      	ldr	r3, [r7, #4]
 810e9f6:	681b      	ldr	r3, [r3, #0]
 810e9f8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 810e9fc:	609a      	str	r2, [r3, #8]
    }
    MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRCFG, SPI_CFG1_UDRCFG_1);
 810e9fe:	687b      	ldr	r3, [r7, #4]
 810ea00:	681b      	ldr	r3, [r3, #0]
 810ea02:	689b      	ldr	r3, [r3, #8]
 810ea04:	f423 62c0 	bic.w	r2, r3, #1536	; 0x600
 810ea08:	687b      	ldr	r3, [r7, #4]
 810ea0a:	681b      	ldr	r3, [r3, #0]
 810ea0c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 810ea10:	609a      	str	r2, [r3, #8]
  }

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 810ea12:	687b      	ldr	r3, [r7, #4]
 810ea14:	681b      	ldr	r3, [r3, #0]
 810ea16:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 810ea18:	687b      	ldr	r3, [r7, #4]
 810ea1a:	681b      	ldr	r3, [r3, #0]
 810ea1c:	f022 0201 	bic.w	r2, r2, #1
 810ea20:	651a      	str	r2, [r3, #80]	; 0x50
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 810ea22:	687b      	ldr	r3, [r7, #4]
 810ea24:	685b      	ldr	r3, [r3, #4]
 810ea26:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 810ea2a:	2b00      	cmp	r3, #0
 810ea2c:	d00a      	beq.n	810ea44 <HAL_SPI_Init+0x220>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 810ea2e:	687b      	ldr	r3, [r7, #4]
 810ea30:	681b      	ldr	r3, [r3, #0]
 810ea32:	68db      	ldr	r3, [r3, #12]
 810ea34:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 810ea38:	687b      	ldr	r3, [r7, #4]
 810ea3a:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 810ea3c:	687b      	ldr	r3, [r7, #4]
 810ea3e:	681b      	ldr	r3, [r3, #0]
 810ea40:	430a      	orrs	r2, r1
 810ea42:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 810ea44:	687b      	ldr	r3, [r7, #4]
 810ea46:	2200      	movs	r2, #0
 810ea48:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->State     = HAL_SPI_STATE_READY;
 810ea4c:	687b      	ldr	r3, [r7, #4]
 810ea4e:	2201      	movs	r2, #1
 810ea50:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  return HAL_OK;
 810ea54:	2300      	movs	r3, #0
}
 810ea56:	4618      	mov	r0, r3
 810ea58:	3710      	adds	r7, #16
 810ea5a:	46bd      	mov	sp, r7
 810ea5c:	bd80      	pop	{r7, pc}
 810ea5e:	bf00      	nop
 810ea60:	40013000 	.word	0x40013000
 810ea64:	40003800 	.word	0x40003800
 810ea68:	40003c00 	.word	0x40003c00

0810ea6c <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(SPI_HandleTypeDef *hspi)
{
 810ea6c:	b480      	push	{r7}
 810ea6e:	b085      	sub	sp, #20
 810ea70:	af00      	add	r7, sp, #0
 810ea72:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 810ea74:	687b      	ldr	r3, [r7, #4]
 810ea76:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 810ea78:	095b      	lsrs	r3, r3, #5
 810ea7a:	3301      	adds	r3, #1
 810ea7c:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 810ea7e:	687b      	ldr	r3, [r7, #4]
 810ea80:	68db      	ldr	r3, [r3, #12]
 810ea82:	3301      	adds	r3, #1
 810ea84:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 810ea86:	68bb      	ldr	r3, [r7, #8]
 810ea88:	3307      	adds	r3, #7
 810ea8a:	08db      	lsrs	r3, r3, #3
 810ea8c:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 810ea8e:	68bb      	ldr	r3, [r7, #8]
 810ea90:	68fa      	ldr	r2, [r7, #12]
 810ea92:	fb02 f303 	mul.w	r3, r2, r3
}
 810ea96:	4618      	mov	r0, r3
 810ea98:	3714      	adds	r7, #20
 810ea9a:	46bd      	mov	sp, r7
 810ea9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 810eaa0:	4770      	bx	lr

0810eaa2 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 810eaa2:	b580      	push	{r7, lr}
 810eaa4:	b082      	sub	sp, #8
 810eaa6:	af00      	add	r7, sp, #0
 810eaa8:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 810eaaa:	687b      	ldr	r3, [r7, #4]
 810eaac:	2b00      	cmp	r3, #0
 810eaae:	d101      	bne.n	810eab4 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 810eab0:	2301      	movs	r3, #1
 810eab2:	e049      	b.n	810eb48 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 810eab4:	687b      	ldr	r3, [r7, #4]
 810eab6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 810eaba:	b2db      	uxtb	r3, r3
 810eabc:	2b00      	cmp	r3, #0
 810eabe:	d106      	bne.n	810eace <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 810eac0:	687b      	ldr	r3, [r7, #4]
 810eac2:	2200      	movs	r2, #0
 810eac4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 810eac8:	6878      	ldr	r0, [r7, #4]
 810eaca:	f7f3 f9bb 	bl	8101e44 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 810eace:	687b      	ldr	r3, [r7, #4]
 810ead0:	2202      	movs	r2, #2
 810ead2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 810ead6:	687b      	ldr	r3, [r7, #4]
 810ead8:	681a      	ldr	r2, [r3, #0]
 810eada:	687b      	ldr	r3, [r7, #4]
 810eadc:	3304      	adds	r3, #4
 810eade:	4619      	mov	r1, r3
 810eae0:	4610      	mov	r0, r2
 810eae2:	f000 fa03 	bl	810eeec <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 810eae6:	687b      	ldr	r3, [r7, #4]
 810eae8:	2201      	movs	r2, #1
 810eaea:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 810eaee:	687b      	ldr	r3, [r7, #4]
 810eaf0:	2201      	movs	r2, #1
 810eaf2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 810eaf6:	687b      	ldr	r3, [r7, #4]
 810eaf8:	2201      	movs	r2, #1
 810eafa:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 810eafe:	687b      	ldr	r3, [r7, #4]
 810eb00:	2201      	movs	r2, #1
 810eb02:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 810eb06:	687b      	ldr	r3, [r7, #4]
 810eb08:	2201      	movs	r2, #1
 810eb0a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 810eb0e:	687b      	ldr	r3, [r7, #4]
 810eb10:	2201      	movs	r2, #1
 810eb12:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 810eb16:	687b      	ldr	r3, [r7, #4]
 810eb18:	2201      	movs	r2, #1
 810eb1a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 810eb1e:	687b      	ldr	r3, [r7, #4]
 810eb20:	2201      	movs	r2, #1
 810eb22:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 810eb26:	687b      	ldr	r3, [r7, #4]
 810eb28:	2201      	movs	r2, #1
 810eb2a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 810eb2e:	687b      	ldr	r3, [r7, #4]
 810eb30:	2201      	movs	r2, #1
 810eb32:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 810eb36:	687b      	ldr	r3, [r7, #4]
 810eb38:	2201      	movs	r2, #1
 810eb3a:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 810eb3e:	687b      	ldr	r3, [r7, #4]
 810eb40:	2201      	movs	r2, #1
 810eb42:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 810eb46:	2300      	movs	r3, #0
}
 810eb48:	4618      	mov	r0, r3
 810eb4a:	3708      	adds	r7, #8
 810eb4c:	46bd      	mov	sp, r7
 810eb4e:	bd80      	pop	{r7, pc}

0810eb50 <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 810eb50:	b580      	push	{r7, lr}
 810eb52:	b082      	sub	sp, #8
 810eb54:	af00      	add	r7, sp, #0
 810eb56:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 810eb58:	687b      	ldr	r3, [r7, #4]
 810eb5a:	2b00      	cmp	r3, #0
 810eb5c:	d101      	bne.n	810eb62 <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 810eb5e:	2301      	movs	r3, #1
 810eb60:	e049      	b.n	810ebf6 <HAL_TIM_OC_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 810eb62:	687b      	ldr	r3, [r7, #4]
 810eb64:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 810eb68:	b2db      	uxtb	r3, r3
 810eb6a:	2b00      	cmp	r3, #0
 810eb6c:	d106      	bne.n	810eb7c <HAL_TIM_OC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 810eb6e:	687b      	ldr	r3, [r7, #4]
 810eb70:	2200      	movs	r2, #0
 810eb72:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OC_MspInit(htim);
 810eb76:	6878      	ldr	r0, [r7, #4]
 810eb78:	f7f3 f942 	bl	8101e00 <HAL_TIM_OC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 810eb7c:	687b      	ldr	r3, [r7, #4]
 810eb7e:	2202      	movs	r2, #2
 810eb80:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 810eb84:	687b      	ldr	r3, [r7, #4]
 810eb86:	681a      	ldr	r2, [r3, #0]
 810eb88:	687b      	ldr	r3, [r7, #4]
 810eb8a:	3304      	adds	r3, #4
 810eb8c:	4619      	mov	r1, r3
 810eb8e:	4610      	mov	r0, r2
 810eb90:	f000 f9ac 	bl	810eeec <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 810eb94:	687b      	ldr	r3, [r7, #4]
 810eb96:	2201      	movs	r2, #1
 810eb98:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 810eb9c:	687b      	ldr	r3, [r7, #4]
 810eb9e:	2201      	movs	r2, #1
 810eba0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 810eba4:	687b      	ldr	r3, [r7, #4]
 810eba6:	2201      	movs	r2, #1
 810eba8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 810ebac:	687b      	ldr	r3, [r7, #4]
 810ebae:	2201      	movs	r2, #1
 810ebb0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 810ebb4:	687b      	ldr	r3, [r7, #4]
 810ebb6:	2201      	movs	r2, #1
 810ebb8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 810ebbc:	687b      	ldr	r3, [r7, #4]
 810ebbe:	2201      	movs	r2, #1
 810ebc0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 810ebc4:	687b      	ldr	r3, [r7, #4]
 810ebc6:	2201      	movs	r2, #1
 810ebc8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 810ebcc:	687b      	ldr	r3, [r7, #4]
 810ebce:	2201      	movs	r2, #1
 810ebd0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 810ebd4:	687b      	ldr	r3, [r7, #4]
 810ebd6:	2201      	movs	r2, #1
 810ebd8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 810ebdc:	687b      	ldr	r3, [r7, #4]
 810ebde:	2201      	movs	r2, #1
 810ebe0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 810ebe4:	687b      	ldr	r3, [r7, #4]
 810ebe6:	2201      	movs	r2, #1
 810ebe8:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 810ebec:	687b      	ldr	r3, [r7, #4]
 810ebee:	2201      	movs	r2, #1
 810ebf0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 810ebf4:	2300      	movs	r3, #0
}
 810ebf6:	4618      	mov	r0, r3
 810ebf8:	3708      	adds	r7, #8
 810ebfa:	46bd      	mov	sp, r7
 810ebfc:	bd80      	pop	{r7, pc}

0810ebfe <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 810ebfe:	b580      	push	{r7, lr}
 810ec00:	b082      	sub	sp, #8
 810ec02:	af00      	add	r7, sp, #0
 810ec04:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 810ec06:	687b      	ldr	r3, [r7, #4]
 810ec08:	2b00      	cmp	r3, #0
 810ec0a:	d101      	bne.n	810ec10 <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 810ec0c:	2301      	movs	r3, #1
 810ec0e:	e049      	b.n	810eca4 <HAL_TIM_IC_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 810ec10:	687b      	ldr	r3, [r7, #4]
 810ec12:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 810ec16:	b2db      	uxtb	r3, r3
 810ec18:	2b00      	cmp	r3, #0
 810ec1a:	d106      	bne.n	810ec2a <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 810ec1c:	687b      	ldr	r3, [r7, #4]
 810ec1e:	2200      	movs	r2, #0
 810ec20:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 810ec24:	6878      	ldr	r0, [r7, #4]
 810ec26:	f000 f841 	bl	810ecac <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 810ec2a:	687b      	ldr	r3, [r7, #4]
 810ec2c:	2202      	movs	r2, #2
 810ec2e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 810ec32:	687b      	ldr	r3, [r7, #4]
 810ec34:	681a      	ldr	r2, [r3, #0]
 810ec36:	687b      	ldr	r3, [r7, #4]
 810ec38:	3304      	adds	r3, #4
 810ec3a:	4619      	mov	r1, r3
 810ec3c:	4610      	mov	r0, r2
 810ec3e:	f000 f955 	bl	810eeec <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 810ec42:	687b      	ldr	r3, [r7, #4]
 810ec44:	2201      	movs	r2, #1
 810ec46:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 810ec4a:	687b      	ldr	r3, [r7, #4]
 810ec4c:	2201      	movs	r2, #1
 810ec4e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 810ec52:	687b      	ldr	r3, [r7, #4]
 810ec54:	2201      	movs	r2, #1
 810ec56:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 810ec5a:	687b      	ldr	r3, [r7, #4]
 810ec5c:	2201      	movs	r2, #1
 810ec5e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 810ec62:	687b      	ldr	r3, [r7, #4]
 810ec64:	2201      	movs	r2, #1
 810ec66:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 810ec6a:	687b      	ldr	r3, [r7, #4]
 810ec6c:	2201      	movs	r2, #1
 810ec6e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 810ec72:	687b      	ldr	r3, [r7, #4]
 810ec74:	2201      	movs	r2, #1
 810ec76:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 810ec7a:	687b      	ldr	r3, [r7, #4]
 810ec7c:	2201      	movs	r2, #1
 810ec7e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 810ec82:	687b      	ldr	r3, [r7, #4]
 810ec84:	2201      	movs	r2, #1
 810ec86:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 810ec8a:	687b      	ldr	r3, [r7, #4]
 810ec8c:	2201      	movs	r2, #1
 810ec8e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 810ec92:	687b      	ldr	r3, [r7, #4]
 810ec94:	2201      	movs	r2, #1
 810ec96:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 810ec9a:	687b      	ldr	r3, [r7, #4]
 810ec9c:	2201      	movs	r2, #1
 810ec9e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 810eca2:	2300      	movs	r3, #0
}
 810eca4:	4618      	mov	r0, r3
 810eca6:	3708      	adds	r7, #8
 810eca8:	46bd      	mov	sp, r7
 810ecaa:	bd80      	pop	{r7, pc}

0810ecac <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 810ecac:	b480      	push	{r7}
 810ecae:	b083      	sub	sp, #12
 810ecb0:	af00      	add	r7, sp, #0
 810ecb2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 810ecb4:	bf00      	nop
 810ecb6:	370c      	adds	r7, #12
 810ecb8:	46bd      	mov	sp, r7
 810ecba:	f85d 7b04 	ldr.w	r7, [sp], #4
 810ecbe:	4770      	bx	lr

0810ecc0 <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           const TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 810ecc0:	b580      	push	{r7, lr}
 810ecc2:	b086      	sub	sp, #24
 810ecc4:	af00      	add	r7, sp, #0
 810ecc6:	60f8      	str	r0, [r7, #12]
 810ecc8:	60b9      	str	r1, [r7, #8]
 810ecca:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 810eccc:	2300      	movs	r3, #0
 810ecce:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 810ecd0:	68fb      	ldr	r3, [r7, #12]
 810ecd2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 810ecd6:	2b01      	cmp	r3, #1
 810ecd8:	d101      	bne.n	810ecde <HAL_TIM_OC_ConfigChannel+0x1e>
 810ecda:	2302      	movs	r3, #2
 810ecdc:	e066      	b.n	810edac <HAL_TIM_OC_ConfigChannel+0xec>
 810ecde:	68fb      	ldr	r3, [r7, #12]
 810ece0:	2201      	movs	r2, #1
 810ece2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 810ece6:	687b      	ldr	r3, [r7, #4]
 810ece8:	2b14      	cmp	r3, #20
 810ecea:	d857      	bhi.n	810ed9c <HAL_TIM_OC_ConfigChannel+0xdc>
 810ecec:	a201      	add	r2, pc, #4	; (adr r2, 810ecf4 <HAL_TIM_OC_ConfigChannel+0x34>)
 810ecee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 810ecf2:	bf00      	nop
 810ecf4:	0810ed49 	.word	0x0810ed49
 810ecf8:	0810ed9d 	.word	0x0810ed9d
 810ecfc:	0810ed9d 	.word	0x0810ed9d
 810ed00:	0810ed9d 	.word	0x0810ed9d
 810ed04:	0810ed57 	.word	0x0810ed57
 810ed08:	0810ed9d 	.word	0x0810ed9d
 810ed0c:	0810ed9d 	.word	0x0810ed9d
 810ed10:	0810ed9d 	.word	0x0810ed9d
 810ed14:	0810ed65 	.word	0x0810ed65
 810ed18:	0810ed9d 	.word	0x0810ed9d
 810ed1c:	0810ed9d 	.word	0x0810ed9d
 810ed20:	0810ed9d 	.word	0x0810ed9d
 810ed24:	0810ed73 	.word	0x0810ed73
 810ed28:	0810ed9d 	.word	0x0810ed9d
 810ed2c:	0810ed9d 	.word	0x0810ed9d
 810ed30:	0810ed9d 	.word	0x0810ed9d
 810ed34:	0810ed81 	.word	0x0810ed81
 810ed38:	0810ed9d 	.word	0x0810ed9d
 810ed3c:	0810ed9d 	.word	0x0810ed9d
 810ed40:	0810ed9d 	.word	0x0810ed9d
 810ed44:	0810ed8f 	.word	0x0810ed8f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 810ed48:	68fb      	ldr	r3, [r7, #12]
 810ed4a:	681b      	ldr	r3, [r3, #0]
 810ed4c:	68b9      	ldr	r1, [r7, #8]
 810ed4e:	4618      	mov	r0, r3
 810ed50:	f000 f966 	bl	810f020 <TIM_OC1_SetConfig>
      break;
 810ed54:	e025      	b.n	810eda2 <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 810ed56:	68fb      	ldr	r3, [r7, #12]
 810ed58:	681b      	ldr	r3, [r3, #0]
 810ed5a:	68b9      	ldr	r1, [r7, #8]
 810ed5c:	4618      	mov	r0, r3
 810ed5e:	f000 f9ef 	bl	810f140 <TIM_OC2_SetConfig>
      break;
 810ed62:	e01e      	b.n	810eda2 <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 810ed64:	68fb      	ldr	r3, [r7, #12]
 810ed66:	681b      	ldr	r3, [r3, #0]
 810ed68:	68b9      	ldr	r1, [r7, #8]
 810ed6a:	4618      	mov	r0, r3
 810ed6c:	f000 fa72 	bl	810f254 <TIM_OC3_SetConfig>
      break;
 810ed70:	e017      	b.n	810eda2 <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 810ed72:	68fb      	ldr	r3, [r7, #12]
 810ed74:	681b      	ldr	r3, [r3, #0]
 810ed76:	68b9      	ldr	r1, [r7, #8]
 810ed78:	4618      	mov	r0, r3
 810ed7a:	f000 faf3 	bl	810f364 <TIM_OC4_SetConfig>
      break;
 810ed7e:	e010      	b.n	810eda2 <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 5 in Output Compare */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 810ed80:	68fb      	ldr	r3, [r7, #12]
 810ed82:	681b      	ldr	r3, [r3, #0]
 810ed84:	68b9      	ldr	r1, [r7, #8]
 810ed86:	4618      	mov	r0, r3
 810ed88:	f000 fb56 	bl	810f438 <TIM_OC5_SetConfig>
      break;
 810ed8c:	e009      	b.n	810eda2 <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 6 in Output Compare */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 810ed8e:	68fb      	ldr	r3, [r7, #12]
 810ed90:	681b      	ldr	r3, [r3, #0]
 810ed92:	68b9      	ldr	r1, [r7, #8]
 810ed94:	4618      	mov	r0, r3
 810ed96:	f000 fbb3 	bl	810f500 <TIM_OC6_SetConfig>
      break;
 810ed9a:	e002      	b.n	810eda2 <HAL_TIM_OC_ConfigChannel+0xe2>
    }

    default:
      status = HAL_ERROR;
 810ed9c:	2301      	movs	r3, #1
 810ed9e:	75fb      	strb	r3, [r7, #23]
      break;
 810eda0:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 810eda2:	68fb      	ldr	r3, [r7, #12]
 810eda4:	2200      	movs	r2, #0
 810eda6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 810edaa:	7dfb      	ldrb	r3, [r7, #23]
}
 810edac:	4618      	mov	r0, r3
 810edae:	3718      	adds	r7, #24
 810edb0:	46bd      	mov	sp, r7
 810edb2:	bd80      	pop	{r7, pc}

0810edb4 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, const TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 810edb4:	b580      	push	{r7, lr}
 810edb6:	b086      	sub	sp, #24
 810edb8:	af00      	add	r7, sp, #0
 810edba:	60f8      	str	r0, [r7, #12]
 810edbc:	60b9      	str	r1, [r7, #8]
 810edbe:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 810edc0:	2300      	movs	r3, #0
 810edc2:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 810edc4:	68fb      	ldr	r3, [r7, #12]
 810edc6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 810edca:	2b01      	cmp	r3, #1
 810edcc:	d101      	bne.n	810edd2 <HAL_TIM_IC_ConfigChannel+0x1e>
 810edce:	2302      	movs	r3, #2
 810edd0:	e088      	b.n	810eee4 <HAL_TIM_IC_ConfigChannel+0x130>
 810edd2:	68fb      	ldr	r3, [r7, #12]
 810edd4:	2201      	movs	r2, #1
 810edd6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (Channel == TIM_CHANNEL_1)
 810edda:	687b      	ldr	r3, [r7, #4]
 810eddc:	2b00      	cmp	r3, #0
 810edde:	d11b      	bne.n	810ee18 <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 810ede0:	68fb      	ldr	r3, [r7, #12]
 810ede2:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 810ede4:	68bb      	ldr	r3, [r7, #8]
 810ede6:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 810ede8:	68bb      	ldr	r3, [r7, #8]
 810edea:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 810edec:	68bb      	ldr	r3, [r7, #8]
 810edee:	68db      	ldr	r3, [r3, #12]
    TIM_TI1_SetConfig(htim->Instance,
 810edf0:	f000 fbec 	bl	810f5cc <TIM_TI1_SetConfig>

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 810edf4:	68fb      	ldr	r3, [r7, #12]
 810edf6:	681b      	ldr	r3, [r3, #0]
 810edf8:	699a      	ldr	r2, [r3, #24]
 810edfa:	68fb      	ldr	r3, [r7, #12]
 810edfc:	681b      	ldr	r3, [r3, #0]
 810edfe:	f022 020c 	bic.w	r2, r2, #12
 810ee02:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 810ee04:	68fb      	ldr	r3, [r7, #12]
 810ee06:	681b      	ldr	r3, [r3, #0]
 810ee08:	6999      	ldr	r1, [r3, #24]
 810ee0a:	68bb      	ldr	r3, [r7, #8]
 810ee0c:	689a      	ldr	r2, [r3, #8]
 810ee0e:	68fb      	ldr	r3, [r7, #12]
 810ee10:	681b      	ldr	r3, [r3, #0]
 810ee12:	430a      	orrs	r2, r1
 810ee14:	619a      	str	r2, [r3, #24]
 810ee16:	e060      	b.n	810eeda <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 810ee18:	687b      	ldr	r3, [r7, #4]
 810ee1a:	2b04      	cmp	r3, #4
 810ee1c:	d11c      	bne.n	810ee58 <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 810ee1e:	68fb      	ldr	r3, [r7, #12]
 810ee20:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 810ee22:	68bb      	ldr	r3, [r7, #8]
 810ee24:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 810ee26:	68bb      	ldr	r3, [r7, #8]
 810ee28:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 810ee2a:	68bb      	ldr	r3, [r7, #8]
 810ee2c:	68db      	ldr	r3, [r3, #12]
    TIM_TI2_SetConfig(htim->Instance,
 810ee2e:	f000 fc41 	bl	810f6b4 <TIM_TI2_SetConfig>

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 810ee32:	68fb      	ldr	r3, [r7, #12]
 810ee34:	681b      	ldr	r3, [r3, #0]
 810ee36:	699a      	ldr	r2, [r3, #24]
 810ee38:	68fb      	ldr	r3, [r7, #12]
 810ee3a:	681b      	ldr	r3, [r3, #0]
 810ee3c:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 810ee40:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 810ee42:	68fb      	ldr	r3, [r7, #12]
 810ee44:	681b      	ldr	r3, [r3, #0]
 810ee46:	6999      	ldr	r1, [r3, #24]
 810ee48:	68bb      	ldr	r3, [r7, #8]
 810ee4a:	689b      	ldr	r3, [r3, #8]
 810ee4c:	021a      	lsls	r2, r3, #8
 810ee4e:	68fb      	ldr	r3, [r7, #12]
 810ee50:	681b      	ldr	r3, [r3, #0]
 810ee52:	430a      	orrs	r2, r1
 810ee54:	619a      	str	r2, [r3, #24]
 810ee56:	e040      	b.n	810eeda <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 810ee58:	687b      	ldr	r3, [r7, #4]
 810ee5a:	2b08      	cmp	r3, #8
 810ee5c:	d11b      	bne.n	810ee96 <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 810ee5e:	68fb      	ldr	r3, [r7, #12]
 810ee60:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 810ee62:	68bb      	ldr	r3, [r7, #8]
 810ee64:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 810ee66:	68bb      	ldr	r3, [r7, #8]
 810ee68:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 810ee6a:	68bb      	ldr	r3, [r7, #8]
 810ee6c:	68db      	ldr	r3, [r3, #12]
    TIM_TI3_SetConfig(htim->Instance,
 810ee6e:	f000 fc5e 	bl	810f72e <TIM_TI3_SetConfig>

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 810ee72:	68fb      	ldr	r3, [r7, #12]
 810ee74:	681b      	ldr	r3, [r3, #0]
 810ee76:	69da      	ldr	r2, [r3, #28]
 810ee78:	68fb      	ldr	r3, [r7, #12]
 810ee7a:	681b      	ldr	r3, [r3, #0]
 810ee7c:	f022 020c 	bic.w	r2, r2, #12
 810ee80:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 810ee82:	68fb      	ldr	r3, [r7, #12]
 810ee84:	681b      	ldr	r3, [r3, #0]
 810ee86:	69d9      	ldr	r1, [r3, #28]
 810ee88:	68bb      	ldr	r3, [r7, #8]
 810ee8a:	689a      	ldr	r2, [r3, #8]
 810ee8c:	68fb      	ldr	r3, [r7, #12]
 810ee8e:	681b      	ldr	r3, [r3, #0]
 810ee90:	430a      	orrs	r2, r1
 810ee92:	61da      	str	r2, [r3, #28]
 810ee94:	e021      	b.n	810eeda <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 810ee96:	687b      	ldr	r3, [r7, #4]
 810ee98:	2b0c      	cmp	r3, #12
 810ee9a:	d11c      	bne.n	810eed6 <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 810ee9c:	68fb      	ldr	r3, [r7, #12]
 810ee9e:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 810eea0:	68bb      	ldr	r3, [r7, #8]
 810eea2:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 810eea4:	68bb      	ldr	r3, [r7, #8]
 810eea6:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 810eea8:	68bb      	ldr	r3, [r7, #8]
 810eeaa:	68db      	ldr	r3, [r3, #12]
    TIM_TI4_SetConfig(htim->Instance,
 810eeac:	f000 fc7b 	bl	810f7a6 <TIM_TI4_SetConfig>

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 810eeb0:	68fb      	ldr	r3, [r7, #12]
 810eeb2:	681b      	ldr	r3, [r3, #0]
 810eeb4:	69da      	ldr	r2, [r3, #28]
 810eeb6:	68fb      	ldr	r3, [r7, #12]
 810eeb8:	681b      	ldr	r3, [r3, #0]
 810eeba:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 810eebe:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 810eec0:	68fb      	ldr	r3, [r7, #12]
 810eec2:	681b      	ldr	r3, [r3, #0]
 810eec4:	69d9      	ldr	r1, [r3, #28]
 810eec6:	68bb      	ldr	r3, [r7, #8]
 810eec8:	689b      	ldr	r3, [r3, #8]
 810eeca:	021a      	lsls	r2, r3, #8
 810eecc:	68fb      	ldr	r3, [r7, #12]
 810eece:	681b      	ldr	r3, [r3, #0]
 810eed0:	430a      	orrs	r2, r1
 810eed2:	61da      	str	r2, [r3, #28]
 810eed4:	e001      	b.n	810eeda <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 810eed6:	2301      	movs	r3, #1
 810eed8:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 810eeda:	68fb      	ldr	r3, [r7, #12]
 810eedc:	2200      	movs	r2, #0
 810eede:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 810eee2:	7dfb      	ldrb	r3, [r7, #23]
}
 810eee4:	4618      	mov	r0, r3
 810eee6:	3718      	adds	r7, #24
 810eee8:	46bd      	mov	sp, r7
 810eeea:	bd80      	pop	{r7, pc}

0810eeec <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 810eeec:	b480      	push	{r7}
 810eeee:	b085      	sub	sp, #20
 810eef0:	af00      	add	r7, sp, #0
 810eef2:	6078      	str	r0, [r7, #4]
 810eef4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 810eef6:	687b      	ldr	r3, [r7, #4]
 810eef8:	681b      	ldr	r3, [r3, #0]
 810eefa:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 810eefc:	687b      	ldr	r3, [r7, #4]
 810eefe:	4a40      	ldr	r2, [pc, #256]	; (810f000 <TIM_Base_SetConfig+0x114>)
 810ef00:	4293      	cmp	r3, r2
 810ef02:	d013      	beq.n	810ef2c <TIM_Base_SetConfig+0x40>
 810ef04:	687b      	ldr	r3, [r7, #4]
 810ef06:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 810ef0a:	d00f      	beq.n	810ef2c <TIM_Base_SetConfig+0x40>
 810ef0c:	687b      	ldr	r3, [r7, #4]
 810ef0e:	4a3d      	ldr	r2, [pc, #244]	; (810f004 <TIM_Base_SetConfig+0x118>)
 810ef10:	4293      	cmp	r3, r2
 810ef12:	d00b      	beq.n	810ef2c <TIM_Base_SetConfig+0x40>
 810ef14:	687b      	ldr	r3, [r7, #4]
 810ef16:	4a3c      	ldr	r2, [pc, #240]	; (810f008 <TIM_Base_SetConfig+0x11c>)
 810ef18:	4293      	cmp	r3, r2
 810ef1a:	d007      	beq.n	810ef2c <TIM_Base_SetConfig+0x40>
 810ef1c:	687b      	ldr	r3, [r7, #4]
 810ef1e:	4a3b      	ldr	r2, [pc, #236]	; (810f00c <TIM_Base_SetConfig+0x120>)
 810ef20:	4293      	cmp	r3, r2
 810ef22:	d003      	beq.n	810ef2c <TIM_Base_SetConfig+0x40>
 810ef24:	687b      	ldr	r3, [r7, #4]
 810ef26:	4a3a      	ldr	r2, [pc, #232]	; (810f010 <TIM_Base_SetConfig+0x124>)
 810ef28:	4293      	cmp	r3, r2
 810ef2a:	d108      	bne.n	810ef3e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 810ef2c:	68fb      	ldr	r3, [r7, #12]
 810ef2e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 810ef32:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 810ef34:	683b      	ldr	r3, [r7, #0]
 810ef36:	685b      	ldr	r3, [r3, #4]
 810ef38:	68fa      	ldr	r2, [r7, #12]
 810ef3a:	4313      	orrs	r3, r2
 810ef3c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 810ef3e:	687b      	ldr	r3, [r7, #4]
 810ef40:	4a2f      	ldr	r2, [pc, #188]	; (810f000 <TIM_Base_SetConfig+0x114>)
 810ef42:	4293      	cmp	r3, r2
 810ef44:	d01f      	beq.n	810ef86 <TIM_Base_SetConfig+0x9a>
 810ef46:	687b      	ldr	r3, [r7, #4]
 810ef48:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 810ef4c:	d01b      	beq.n	810ef86 <TIM_Base_SetConfig+0x9a>
 810ef4e:	687b      	ldr	r3, [r7, #4]
 810ef50:	4a2c      	ldr	r2, [pc, #176]	; (810f004 <TIM_Base_SetConfig+0x118>)
 810ef52:	4293      	cmp	r3, r2
 810ef54:	d017      	beq.n	810ef86 <TIM_Base_SetConfig+0x9a>
 810ef56:	687b      	ldr	r3, [r7, #4]
 810ef58:	4a2b      	ldr	r2, [pc, #172]	; (810f008 <TIM_Base_SetConfig+0x11c>)
 810ef5a:	4293      	cmp	r3, r2
 810ef5c:	d013      	beq.n	810ef86 <TIM_Base_SetConfig+0x9a>
 810ef5e:	687b      	ldr	r3, [r7, #4]
 810ef60:	4a2a      	ldr	r2, [pc, #168]	; (810f00c <TIM_Base_SetConfig+0x120>)
 810ef62:	4293      	cmp	r3, r2
 810ef64:	d00f      	beq.n	810ef86 <TIM_Base_SetConfig+0x9a>
 810ef66:	687b      	ldr	r3, [r7, #4]
 810ef68:	4a29      	ldr	r2, [pc, #164]	; (810f010 <TIM_Base_SetConfig+0x124>)
 810ef6a:	4293      	cmp	r3, r2
 810ef6c:	d00b      	beq.n	810ef86 <TIM_Base_SetConfig+0x9a>
 810ef6e:	687b      	ldr	r3, [r7, #4]
 810ef70:	4a28      	ldr	r2, [pc, #160]	; (810f014 <TIM_Base_SetConfig+0x128>)
 810ef72:	4293      	cmp	r3, r2
 810ef74:	d007      	beq.n	810ef86 <TIM_Base_SetConfig+0x9a>
 810ef76:	687b      	ldr	r3, [r7, #4]
 810ef78:	4a27      	ldr	r2, [pc, #156]	; (810f018 <TIM_Base_SetConfig+0x12c>)
 810ef7a:	4293      	cmp	r3, r2
 810ef7c:	d003      	beq.n	810ef86 <TIM_Base_SetConfig+0x9a>
 810ef7e:	687b      	ldr	r3, [r7, #4]
 810ef80:	4a26      	ldr	r2, [pc, #152]	; (810f01c <TIM_Base_SetConfig+0x130>)
 810ef82:	4293      	cmp	r3, r2
 810ef84:	d108      	bne.n	810ef98 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 810ef86:	68fb      	ldr	r3, [r7, #12]
 810ef88:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 810ef8c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 810ef8e:	683b      	ldr	r3, [r7, #0]
 810ef90:	68db      	ldr	r3, [r3, #12]
 810ef92:	68fa      	ldr	r2, [r7, #12]
 810ef94:	4313      	orrs	r3, r2
 810ef96:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 810ef98:	68fb      	ldr	r3, [r7, #12]
 810ef9a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 810ef9e:	683b      	ldr	r3, [r7, #0]
 810efa0:	695b      	ldr	r3, [r3, #20]
 810efa2:	4313      	orrs	r3, r2
 810efa4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 810efa6:	687b      	ldr	r3, [r7, #4]
 810efa8:	68fa      	ldr	r2, [r7, #12]
 810efaa:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 810efac:	683b      	ldr	r3, [r7, #0]
 810efae:	689a      	ldr	r2, [r3, #8]
 810efb0:	687b      	ldr	r3, [r7, #4]
 810efb2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 810efb4:	683b      	ldr	r3, [r7, #0]
 810efb6:	681a      	ldr	r2, [r3, #0]
 810efb8:	687b      	ldr	r3, [r7, #4]
 810efba:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 810efbc:	687b      	ldr	r3, [r7, #4]
 810efbe:	4a10      	ldr	r2, [pc, #64]	; (810f000 <TIM_Base_SetConfig+0x114>)
 810efc0:	4293      	cmp	r3, r2
 810efc2:	d00f      	beq.n	810efe4 <TIM_Base_SetConfig+0xf8>
 810efc4:	687b      	ldr	r3, [r7, #4]
 810efc6:	4a12      	ldr	r2, [pc, #72]	; (810f010 <TIM_Base_SetConfig+0x124>)
 810efc8:	4293      	cmp	r3, r2
 810efca:	d00b      	beq.n	810efe4 <TIM_Base_SetConfig+0xf8>
 810efcc:	687b      	ldr	r3, [r7, #4]
 810efce:	4a11      	ldr	r2, [pc, #68]	; (810f014 <TIM_Base_SetConfig+0x128>)
 810efd0:	4293      	cmp	r3, r2
 810efd2:	d007      	beq.n	810efe4 <TIM_Base_SetConfig+0xf8>
 810efd4:	687b      	ldr	r3, [r7, #4]
 810efd6:	4a10      	ldr	r2, [pc, #64]	; (810f018 <TIM_Base_SetConfig+0x12c>)
 810efd8:	4293      	cmp	r3, r2
 810efda:	d003      	beq.n	810efe4 <TIM_Base_SetConfig+0xf8>
 810efdc:	687b      	ldr	r3, [r7, #4]
 810efde:	4a0f      	ldr	r2, [pc, #60]	; (810f01c <TIM_Base_SetConfig+0x130>)
 810efe0:	4293      	cmp	r3, r2
 810efe2:	d103      	bne.n	810efec <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 810efe4:	683b      	ldr	r3, [r7, #0]
 810efe6:	691a      	ldr	r2, [r3, #16]
 810efe8:	687b      	ldr	r3, [r7, #4]
 810efea:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 810efec:	687b      	ldr	r3, [r7, #4]
 810efee:	2201      	movs	r2, #1
 810eff0:	615a      	str	r2, [r3, #20]
}
 810eff2:	bf00      	nop
 810eff4:	3714      	adds	r7, #20
 810eff6:	46bd      	mov	sp, r7
 810eff8:	f85d 7b04 	ldr.w	r7, [sp], #4
 810effc:	4770      	bx	lr
 810effe:	bf00      	nop
 810f000:	40010000 	.word	0x40010000
 810f004:	40000400 	.word	0x40000400
 810f008:	40000800 	.word	0x40000800
 810f00c:	40000c00 	.word	0x40000c00
 810f010:	40010400 	.word	0x40010400
 810f014:	40014000 	.word	0x40014000
 810f018:	40014400 	.word	0x40014400
 810f01c:	40014800 	.word	0x40014800

0810f020 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 810f020:	b480      	push	{r7}
 810f022:	b087      	sub	sp, #28
 810f024:	af00      	add	r7, sp, #0
 810f026:	6078      	str	r0, [r7, #4]
 810f028:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 810f02a:	687b      	ldr	r3, [r7, #4]
 810f02c:	6a1b      	ldr	r3, [r3, #32]
 810f02e:	f023 0201 	bic.w	r2, r3, #1
 810f032:	687b      	ldr	r3, [r7, #4]
 810f034:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 810f036:	687b      	ldr	r3, [r7, #4]
 810f038:	6a1b      	ldr	r3, [r3, #32]
 810f03a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 810f03c:	687b      	ldr	r3, [r7, #4]
 810f03e:	685b      	ldr	r3, [r3, #4]
 810f040:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 810f042:	687b      	ldr	r3, [r7, #4]
 810f044:	699b      	ldr	r3, [r3, #24]
 810f046:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 810f048:	68fb      	ldr	r3, [r7, #12]
 810f04a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 810f04e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 810f052:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 810f054:	68fb      	ldr	r3, [r7, #12]
 810f056:	f023 0303 	bic.w	r3, r3, #3
 810f05a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 810f05c:	683b      	ldr	r3, [r7, #0]
 810f05e:	681b      	ldr	r3, [r3, #0]
 810f060:	68fa      	ldr	r2, [r7, #12]
 810f062:	4313      	orrs	r3, r2
 810f064:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 810f066:	697b      	ldr	r3, [r7, #20]
 810f068:	f023 0302 	bic.w	r3, r3, #2
 810f06c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 810f06e:	683b      	ldr	r3, [r7, #0]
 810f070:	689b      	ldr	r3, [r3, #8]
 810f072:	697a      	ldr	r2, [r7, #20]
 810f074:	4313      	orrs	r3, r2
 810f076:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 810f078:	687b      	ldr	r3, [r7, #4]
 810f07a:	4a2c      	ldr	r2, [pc, #176]	; (810f12c <TIM_OC1_SetConfig+0x10c>)
 810f07c:	4293      	cmp	r3, r2
 810f07e:	d00f      	beq.n	810f0a0 <TIM_OC1_SetConfig+0x80>
 810f080:	687b      	ldr	r3, [r7, #4]
 810f082:	4a2b      	ldr	r2, [pc, #172]	; (810f130 <TIM_OC1_SetConfig+0x110>)
 810f084:	4293      	cmp	r3, r2
 810f086:	d00b      	beq.n	810f0a0 <TIM_OC1_SetConfig+0x80>
 810f088:	687b      	ldr	r3, [r7, #4]
 810f08a:	4a2a      	ldr	r2, [pc, #168]	; (810f134 <TIM_OC1_SetConfig+0x114>)
 810f08c:	4293      	cmp	r3, r2
 810f08e:	d007      	beq.n	810f0a0 <TIM_OC1_SetConfig+0x80>
 810f090:	687b      	ldr	r3, [r7, #4]
 810f092:	4a29      	ldr	r2, [pc, #164]	; (810f138 <TIM_OC1_SetConfig+0x118>)
 810f094:	4293      	cmp	r3, r2
 810f096:	d003      	beq.n	810f0a0 <TIM_OC1_SetConfig+0x80>
 810f098:	687b      	ldr	r3, [r7, #4]
 810f09a:	4a28      	ldr	r2, [pc, #160]	; (810f13c <TIM_OC1_SetConfig+0x11c>)
 810f09c:	4293      	cmp	r3, r2
 810f09e:	d10c      	bne.n	810f0ba <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 810f0a0:	697b      	ldr	r3, [r7, #20]
 810f0a2:	f023 0308 	bic.w	r3, r3, #8
 810f0a6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 810f0a8:	683b      	ldr	r3, [r7, #0]
 810f0aa:	68db      	ldr	r3, [r3, #12]
 810f0ac:	697a      	ldr	r2, [r7, #20]
 810f0ae:	4313      	orrs	r3, r2
 810f0b0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 810f0b2:	697b      	ldr	r3, [r7, #20]
 810f0b4:	f023 0304 	bic.w	r3, r3, #4
 810f0b8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 810f0ba:	687b      	ldr	r3, [r7, #4]
 810f0bc:	4a1b      	ldr	r2, [pc, #108]	; (810f12c <TIM_OC1_SetConfig+0x10c>)
 810f0be:	4293      	cmp	r3, r2
 810f0c0:	d00f      	beq.n	810f0e2 <TIM_OC1_SetConfig+0xc2>
 810f0c2:	687b      	ldr	r3, [r7, #4]
 810f0c4:	4a1a      	ldr	r2, [pc, #104]	; (810f130 <TIM_OC1_SetConfig+0x110>)
 810f0c6:	4293      	cmp	r3, r2
 810f0c8:	d00b      	beq.n	810f0e2 <TIM_OC1_SetConfig+0xc2>
 810f0ca:	687b      	ldr	r3, [r7, #4]
 810f0cc:	4a19      	ldr	r2, [pc, #100]	; (810f134 <TIM_OC1_SetConfig+0x114>)
 810f0ce:	4293      	cmp	r3, r2
 810f0d0:	d007      	beq.n	810f0e2 <TIM_OC1_SetConfig+0xc2>
 810f0d2:	687b      	ldr	r3, [r7, #4]
 810f0d4:	4a18      	ldr	r2, [pc, #96]	; (810f138 <TIM_OC1_SetConfig+0x118>)
 810f0d6:	4293      	cmp	r3, r2
 810f0d8:	d003      	beq.n	810f0e2 <TIM_OC1_SetConfig+0xc2>
 810f0da:	687b      	ldr	r3, [r7, #4]
 810f0dc:	4a17      	ldr	r2, [pc, #92]	; (810f13c <TIM_OC1_SetConfig+0x11c>)
 810f0de:	4293      	cmp	r3, r2
 810f0e0:	d111      	bne.n	810f106 <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 810f0e2:	693b      	ldr	r3, [r7, #16]
 810f0e4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 810f0e8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 810f0ea:	693b      	ldr	r3, [r7, #16]
 810f0ec:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 810f0f0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 810f0f2:	683b      	ldr	r3, [r7, #0]
 810f0f4:	695b      	ldr	r3, [r3, #20]
 810f0f6:	693a      	ldr	r2, [r7, #16]
 810f0f8:	4313      	orrs	r3, r2
 810f0fa:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 810f0fc:	683b      	ldr	r3, [r7, #0]
 810f0fe:	699b      	ldr	r3, [r3, #24]
 810f100:	693a      	ldr	r2, [r7, #16]
 810f102:	4313      	orrs	r3, r2
 810f104:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 810f106:	687b      	ldr	r3, [r7, #4]
 810f108:	693a      	ldr	r2, [r7, #16]
 810f10a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 810f10c:	687b      	ldr	r3, [r7, #4]
 810f10e:	68fa      	ldr	r2, [r7, #12]
 810f110:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 810f112:	683b      	ldr	r3, [r7, #0]
 810f114:	685a      	ldr	r2, [r3, #4]
 810f116:	687b      	ldr	r3, [r7, #4]
 810f118:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 810f11a:	687b      	ldr	r3, [r7, #4]
 810f11c:	697a      	ldr	r2, [r7, #20]
 810f11e:	621a      	str	r2, [r3, #32]
}
 810f120:	bf00      	nop
 810f122:	371c      	adds	r7, #28
 810f124:	46bd      	mov	sp, r7
 810f126:	f85d 7b04 	ldr.w	r7, [sp], #4
 810f12a:	4770      	bx	lr
 810f12c:	40010000 	.word	0x40010000
 810f130:	40010400 	.word	0x40010400
 810f134:	40014000 	.word	0x40014000
 810f138:	40014400 	.word	0x40014400
 810f13c:	40014800 	.word	0x40014800

0810f140 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 810f140:	b480      	push	{r7}
 810f142:	b087      	sub	sp, #28
 810f144:	af00      	add	r7, sp, #0
 810f146:	6078      	str	r0, [r7, #4]
 810f148:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 810f14a:	687b      	ldr	r3, [r7, #4]
 810f14c:	6a1b      	ldr	r3, [r3, #32]
 810f14e:	f023 0210 	bic.w	r2, r3, #16
 810f152:	687b      	ldr	r3, [r7, #4]
 810f154:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 810f156:	687b      	ldr	r3, [r7, #4]
 810f158:	6a1b      	ldr	r3, [r3, #32]
 810f15a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 810f15c:	687b      	ldr	r3, [r7, #4]
 810f15e:	685b      	ldr	r3, [r3, #4]
 810f160:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 810f162:	687b      	ldr	r3, [r7, #4]
 810f164:	699b      	ldr	r3, [r3, #24]
 810f166:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 810f168:	68fb      	ldr	r3, [r7, #12]
 810f16a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 810f16e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 810f172:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 810f174:	68fb      	ldr	r3, [r7, #12]
 810f176:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 810f17a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 810f17c:	683b      	ldr	r3, [r7, #0]
 810f17e:	681b      	ldr	r3, [r3, #0]
 810f180:	021b      	lsls	r3, r3, #8
 810f182:	68fa      	ldr	r2, [r7, #12]
 810f184:	4313      	orrs	r3, r2
 810f186:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 810f188:	697b      	ldr	r3, [r7, #20]
 810f18a:	f023 0320 	bic.w	r3, r3, #32
 810f18e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 810f190:	683b      	ldr	r3, [r7, #0]
 810f192:	689b      	ldr	r3, [r3, #8]
 810f194:	011b      	lsls	r3, r3, #4
 810f196:	697a      	ldr	r2, [r7, #20]
 810f198:	4313      	orrs	r3, r2
 810f19a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 810f19c:	687b      	ldr	r3, [r7, #4]
 810f19e:	4a28      	ldr	r2, [pc, #160]	; (810f240 <TIM_OC2_SetConfig+0x100>)
 810f1a0:	4293      	cmp	r3, r2
 810f1a2:	d003      	beq.n	810f1ac <TIM_OC2_SetConfig+0x6c>
 810f1a4:	687b      	ldr	r3, [r7, #4]
 810f1a6:	4a27      	ldr	r2, [pc, #156]	; (810f244 <TIM_OC2_SetConfig+0x104>)
 810f1a8:	4293      	cmp	r3, r2
 810f1aa:	d10d      	bne.n	810f1c8 <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 810f1ac:	697b      	ldr	r3, [r7, #20]
 810f1ae:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 810f1b2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 810f1b4:	683b      	ldr	r3, [r7, #0]
 810f1b6:	68db      	ldr	r3, [r3, #12]
 810f1b8:	011b      	lsls	r3, r3, #4
 810f1ba:	697a      	ldr	r2, [r7, #20]
 810f1bc:	4313      	orrs	r3, r2
 810f1be:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 810f1c0:	697b      	ldr	r3, [r7, #20]
 810f1c2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 810f1c6:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 810f1c8:	687b      	ldr	r3, [r7, #4]
 810f1ca:	4a1d      	ldr	r2, [pc, #116]	; (810f240 <TIM_OC2_SetConfig+0x100>)
 810f1cc:	4293      	cmp	r3, r2
 810f1ce:	d00f      	beq.n	810f1f0 <TIM_OC2_SetConfig+0xb0>
 810f1d0:	687b      	ldr	r3, [r7, #4]
 810f1d2:	4a1c      	ldr	r2, [pc, #112]	; (810f244 <TIM_OC2_SetConfig+0x104>)
 810f1d4:	4293      	cmp	r3, r2
 810f1d6:	d00b      	beq.n	810f1f0 <TIM_OC2_SetConfig+0xb0>
 810f1d8:	687b      	ldr	r3, [r7, #4]
 810f1da:	4a1b      	ldr	r2, [pc, #108]	; (810f248 <TIM_OC2_SetConfig+0x108>)
 810f1dc:	4293      	cmp	r3, r2
 810f1de:	d007      	beq.n	810f1f0 <TIM_OC2_SetConfig+0xb0>
 810f1e0:	687b      	ldr	r3, [r7, #4]
 810f1e2:	4a1a      	ldr	r2, [pc, #104]	; (810f24c <TIM_OC2_SetConfig+0x10c>)
 810f1e4:	4293      	cmp	r3, r2
 810f1e6:	d003      	beq.n	810f1f0 <TIM_OC2_SetConfig+0xb0>
 810f1e8:	687b      	ldr	r3, [r7, #4]
 810f1ea:	4a19      	ldr	r2, [pc, #100]	; (810f250 <TIM_OC2_SetConfig+0x110>)
 810f1ec:	4293      	cmp	r3, r2
 810f1ee:	d113      	bne.n	810f218 <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 810f1f0:	693b      	ldr	r3, [r7, #16]
 810f1f2:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 810f1f6:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 810f1f8:	693b      	ldr	r3, [r7, #16]
 810f1fa:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 810f1fe:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 810f200:	683b      	ldr	r3, [r7, #0]
 810f202:	695b      	ldr	r3, [r3, #20]
 810f204:	009b      	lsls	r3, r3, #2
 810f206:	693a      	ldr	r2, [r7, #16]
 810f208:	4313      	orrs	r3, r2
 810f20a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 810f20c:	683b      	ldr	r3, [r7, #0]
 810f20e:	699b      	ldr	r3, [r3, #24]
 810f210:	009b      	lsls	r3, r3, #2
 810f212:	693a      	ldr	r2, [r7, #16]
 810f214:	4313      	orrs	r3, r2
 810f216:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 810f218:	687b      	ldr	r3, [r7, #4]
 810f21a:	693a      	ldr	r2, [r7, #16]
 810f21c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 810f21e:	687b      	ldr	r3, [r7, #4]
 810f220:	68fa      	ldr	r2, [r7, #12]
 810f222:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 810f224:	683b      	ldr	r3, [r7, #0]
 810f226:	685a      	ldr	r2, [r3, #4]
 810f228:	687b      	ldr	r3, [r7, #4]
 810f22a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 810f22c:	687b      	ldr	r3, [r7, #4]
 810f22e:	697a      	ldr	r2, [r7, #20]
 810f230:	621a      	str	r2, [r3, #32]
}
 810f232:	bf00      	nop
 810f234:	371c      	adds	r7, #28
 810f236:	46bd      	mov	sp, r7
 810f238:	f85d 7b04 	ldr.w	r7, [sp], #4
 810f23c:	4770      	bx	lr
 810f23e:	bf00      	nop
 810f240:	40010000 	.word	0x40010000
 810f244:	40010400 	.word	0x40010400
 810f248:	40014000 	.word	0x40014000
 810f24c:	40014400 	.word	0x40014400
 810f250:	40014800 	.word	0x40014800

0810f254 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 810f254:	b480      	push	{r7}
 810f256:	b087      	sub	sp, #28
 810f258:	af00      	add	r7, sp, #0
 810f25a:	6078      	str	r0, [r7, #4]
 810f25c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 810f25e:	687b      	ldr	r3, [r7, #4]
 810f260:	6a1b      	ldr	r3, [r3, #32]
 810f262:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 810f266:	687b      	ldr	r3, [r7, #4]
 810f268:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 810f26a:	687b      	ldr	r3, [r7, #4]
 810f26c:	6a1b      	ldr	r3, [r3, #32]
 810f26e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 810f270:	687b      	ldr	r3, [r7, #4]
 810f272:	685b      	ldr	r3, [r3, #4]
 810f274:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 810f276:	687b      	ldr	r3, [r7, #4]
 810f278:	69db      	ldr	r3, [r3, #28]
 810f27a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 810f27c:	68fb      	ldr	r3, [r7, #12]
 810f27e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 810f282:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 810f286:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 810f288:	68fb      	ldr	r3, [r7, #12]
 810f28a:	f023 0303 	bic.w	r3, r3, #3
 810f28e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 810f290:	683b      	ldr	r3, [r7, #0]
 810f292:	681b      	ldr	r3, [r3, #0]
 810f294:	68fa      	ldr	r2, [r7, #12]
 810f296:	4313      	orrs	r3, r2
 810f298:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 810f29a:	697b      	ldr	r3, [r7, #20]
 810f29c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 810f2a0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 810f2a2:	683b      	ldr	r3, [r7, #0]
 810f2a4:	689b      	ldr	r3, [r3, #8]
 810f2a6:	021b      	lsls	r3, r3, #8
 810f2a8:	697a      	ldr	r2, [r7, #20]
 810f2aa:	4313      	orrs	r3, r2
 810f2ac:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 810f2ae:	687b      	ldr	r3, [r7, #4]
 810f2b0:	4a27      	ldr	r2, [pc, #156]	; (810f350 <TIM_OC3_SetConfig+0xfc>)
 810f2b2:	4293      	cmp	r3, r2
 810f2b4:	d003      	beq.n	810f2be <TIM_OC3_SetConfig+0x6a>
 810f2b6:	687b      	ldr	r3, [r7, #4]
 810f2b8:	4a26      	ldr	r2, [pc, #152]	; (810f354 <TIM_OC3_SetConfig+0x100>)
 810f2ba:	4293      	cmp	r3, r2
 810f2bc:	d10d      	bne.n	810f2da <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 810f2be:	697b      	ldr	r3, [r7, #20]
 810f2c0:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 810f2c4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 810f2c6:	683b      	ldr	r3, [r7, #0]
 810f2c8:	68db      	ldr	r3, [r3, #12]
 810f2ca:	021b      	lsls	r3, r3, #8
 810f2cc:	697a      	ldr	r2, [r7, #20]
 810f2ce:	4313      	orrs	r3, r2
 810f2d0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 810f2d2:	697b      	ldr	r3, [r7, #20]
 810f2d4:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 810f2d8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 810f2da:	687b      	ldr	r3, [r7, #4]
 810f2dc:	4a1c      	ldr	r2, [pc, #112]	; (810f350 <TIM_OC3_SetConfig+0xfc>)
 810f2de:	4293      	cmp	r3, r2
 810f2e0:	d00f      	beq.n	810f302 <TIM_OC3_SetConfig+0xae>
 810f2e2:	687b      	ldr	r3, [r7, #4]
 810f2e4:	4a1b      	ldr	r2, [pc, #108]	; (810f354 <TIM_OC3_SetConfig+0x100>)
 810f2e6:	4293      	cmp	r3, r2
 810f2e8:	d00b      	beq.n	810f302 <TIM_OC3_SetConfig+0xae>
 810f2ea:	687b      	ldr	r3, [r7, #4]
 810f2ec:	4a1a      	ldr	r2, [pc, #104]	; (810f358 <TIM_OC3_SetConfig+0x104>)
 810f2ee:	4293      	cmp	r3, r2
 810f2f0:	d007      	beq.n	810f302 <TIM_OC3_SetConfig+0xae>
 810f2f2:	687b      	ldr	r3, [r7, #4]
 810f2f4:	4a19      	ldr	r2, [pc, #100]	; (810f35c <TIM_OC3_SetConfig+0x108>)
 810f2f6:	4293      	cmp	r3, r2
 810f2f8:	d003      	beq.n	810f302 <TIM_OC3_SetConfig+0xae>
 810f2fa:	687b      	ldr	r3, [r7, #4]
 810f2fc:	4a18      	ldr	r2, [pc, #96]	; (810f360 <TIM_OC3_SetConfig+0x10c>)
 810f2fe:	4293      	cmp	r3, r2
 810f300:	d113      	bne.n	810f32a <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 810f302:	693b      	ldr	r3, [r7, #16]
 810f304:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 810f308:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 810f30a:	693b      	ldr	r3, [r7, #16]
 810f30c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 810f310:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 810f312:	683b      	ldr	r3, [r7, #0]
 810f314:	695b      	ldr	r3, [r3, #20]
 810f316:	011b      	lsls	r3, r3, #4
 810f318:	693a      	ldr	r2, [r7, #16]
 810f31a:	4313      	orrs	r3, r2
 810f31c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 810f31e:	683b      	ldr	r3, [r7, #0]
 810f320:	699b      	ldr	r3, [r3, #24]
 810f322:	011b      	lsls	r3, r3, #4
 810f324:	693a      	ldr	r2, [r7, #16]
 810f326:	4313      	orrs	r3, r2
 810f328:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 810f32a:	687b      	ldr	r3, [r7, #4]
 810f32c:	693a      	ldr	r2, [r7, #16]
 810f32e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 810f330:	687b      	ldr	r3, [r7, #4]
 810f332:	68fa      	ldr	r2, [r7, #12]
 810f334:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 810f336:	683b      	ldr	r3, [r7, #0]
 810f338:	685a      	ldr	r2, [r3, #4]
 810f33a:	687b      	ldr	r3, [r7, #4]
 810f33c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 810f33e:	687b      	ldr	r3, [r7, #4]
 810f340:	697a      	ldr	r2, [r7, #20]
 810f342:	621a      	str	r2, [r3, #32]
}
 810f344:	bf00      	nop
 810f346:	371c      	adds	r7, #28
 810f348:	46bd      	mov	sp, r7
 810f34a:	f85d 7b04 	ldr.w	r7, [sp], #4
 810f34e:	4770      	bx	lr
 810f350:	40010000 	.word	0x40010000
 810f354:	40010400 	.word	0x40010400
 810f358:	40014000 	.word	0x40014000
 810f35c:	40014400 	.word	0x40014400
 810f360:	40014800 	.word	0x40014800

0810f364 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 810f364:	b480      	push	{r7}
 810f366:	b087      	sub	sp, #28
 810f368:	af00      	add	r7, sp, #0
 810f36a:	6078      	str	r0, [r7, #4]
 810f36c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 810f36e:	687b      	ldr	r3, [r7, #4]
 810f370:	6a1b      	ldr	r3, [r3, #32]
 810f372:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 810f376:	687b      	ldr	r3, [r7, #4]
 810f378:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 810f37a:	687b      	ldr	r3, [r7, #4]
 810f37c:	6a1b      	ldr	r3, [r3, #32]
 810f37e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 810f380:	687b      	ldr	r3, [r7, #4]
 810f382:	685b      	ldr	r3, [r3, #4]
 810f384:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 810f386:	687b      	ldr	r3, [r7, #4]
 810f388:	69db      	ldr	r3, [r3, #28]
 810f38a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 810f38c:	68fb      	ldr	r3, [r7, #12]
 810f38e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 810f392:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 810f396:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 810f398:	68fb      	ldr	r3, [r7, #12]
 810f39a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 810f39e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 810f3a0:	683b      	ldr	r3, [r7, #0]
 810f3a2:	681b      	ldr	r3, [r3, #0]
 810f3a4:	021b      	lsls	r3, r3, #8
 810f3a6:	68fa      	ldr	r2, [r7, #12]
 810f3a8:	4313      	orrs	r3, r2
 810f3aa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 810f3ac:	693b      	ldr	r3, [r7, #16]
 810f3ae:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 810f3b2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 810f3b4:	683b      	ldr	r3, [r7, #0]
 810f3b6:	689b      	ldr	r3, [r3, #8]
 810f3b8:	031b      	lsls	r3, r3, #12
 810f3ba:	693a      	ldr	r2, [r7, #16]
 810f3bc:	4313      	orrs	r3, r2
 810f3be:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 810f3c0:	687b      	ldr	r3, [r7, #4]
 810f3c2:	4a18      	ldr	r2, [pc, #96]	; (810f424 <TIM_OC4_SetConfig+0xc0>)
 810f3c4:	4293      	cmp	r3, r2
 810f3c6:	d00f      	beq.n	810f3e8 <TIM_OC4_SetConfig+0x84>
 810f3c8:	687b      	ldr	r3, [r7, #4]
 810f3ca:	4a17      	ldr	r2, [pc, #92]	; (810f428 <TIM_OC4_SetConfig+0xc4>)
 810f3cc:	4293      	cmp	r3, r2
 810f3ce:	d00b      	beq.n	810f3e8 <TIM_OC4_SetConfig+0x84>
 810f3d0:	687b      	ldr	r3, [r7, #4]
 810f3d2:	4a16      	ldr	r2, [pc, #88]	; (810f42c <TIM_OC4_SetConfig+0xc8>)
 810f3d4:	4293      	cmp	r3, r2
 810f3d6:	d007      	beq.n	810f3e8 <TIM_OC4_SetConfig+0x84>
 810f3d8:	687b      	ldr	r3, [r7, #4]
 810f3da:	4a15      	ldr	r2, [pc, #84]	; (810f430 <TIM_OC4_SetConfig+0xcc>)
 810f3dc:	4293      	cmp	r3, r2
 810f3de:	d003      	beq.n	810f3e8 <TIM_OC4_SetConfig+0x84>
 810f3e0:	687b      	ldr	r3, [r7, #4]
 810f3e2:	4a14      	ldr	r2, [pc, #80]	; (810f434 <TIM_OC4_SetConfig+0xd0>)
 810f3e4:	4293      	cmp	r3, r2
 810f3e6:	d109      	bne.n	810f3fc <TIM_OC4_SetConfig+0x98>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 810f3e8:	697b      	ldr	r3, [r7, #20]
 810f3ea:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 810f3ee:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 810f3f0:	683b      	ldr	r3, [r7, #0]
 810f3f2:	695b      	ldr	r3, [r3, #20]
 810f3f4:	019b      	lsls	r3, r3, #6
 810f3f6:	697a      	ldr	r2, [r7, #20]
 810f3f8:	4313      	orrs	r3, r2
 810f3fa:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 810f3fc:	687b      	ldr	r3, [r7, #4]
 810f3fe:	697a      	ldr	r2, [r7, #20]
 810f400:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 810f402:	687b      	ldr	r3, [r7, #4]
 810f404:	68fa      	ldr	r2, [r7, #12]
 810f406:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 810f408:	683b      	ldr	r3, [r7, #0]
 810f40a:	685a      	ldr	r2, [r3, #4]
 810f40c:	687b      	ldr	r3, [r7, #4]
 810f40e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 810f410:	687b      	ldr	r3, [r7, #4]
 810f412:	693a      	ldr	r2, [r7, #16]
 810f414:	621a      	str	r2, [r3, #32]
}
 810f416:	bf00      	nop
 810f418:	371c      	adds	r7, #28
 810f41a:	46bd      	mov	sp, r7
 810f41c:	f85d 7b04 	ldr.w	r7, [sp], #4
 810f420:	4770      	bx	lr
 810f422:	bf00      	nop
 810f424:	40010000 	.word	0x40010000
 810f428:	40010400 	.word	0x40010400
 810f42c:	40014000 	.word	0x40014000
 810f430:	40014400 	.word	0x40014400
 810f434:	40014800 	.word	0x40014800

0810f438 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 810f438:	b480      	push	{r7}
 810f43a:	b087      	sub	sp, #28
 810f43c:	af00      	add	r7, sp, #0
 810f43e:	6078      	str	r0, [r7, #4]
 810f440:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 810f442:	687b      	ldr	r3, [r7, #4]
 810f444:	6a1b      	ldr	r3, [r3, #32]
 810f446:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 810f44a:	687b      	ldr	r3, [r7, #4]
 810f44c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 810f44e:	687b      	ldr	r3, [r7, #4]
 810f450:	6a1b      	ldr	r3, [r3, #32]
 810f452:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 810f454:	687b      	ldr	r3, [r7, #4]
 810f456:	685b      	ldr	r3, [r3, #4]
 810f458:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 810f45a:	687b      	ldr	r3, [r7, #4]
 810f45c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 810f45e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 810f460:	68fb      	ldr	r3, [r7, #12]
 810f462:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 810f466:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 810f46a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 810f46c:	683b      	ldr	r3, [r7, #0]
 810f46e:	681b      	ldr	r3, [r3, #0]
 810f470:	68fa      	ldr	r2, [r7, #12]
 810f472:	4313      	orrs	r3, r2
 810f474:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 810f476:	693b      	ldr	r3, [r7, #16]
 810f478:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 810f47c:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 810f47e:	683b      	ldr	r3, [r7, #0]
 810f480:	689b      	ldr	r3, [r3, #8]
 810f482:	041b      	lsls	r3, r3, #16
 810f484:	693a      	ldr	r2, [r7, #16]
 810f486:	4313      	orrs	r3, r2
 810f488:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 810f48a:	687b      	ldr	r3, [r7, #4]
 810f48c:	4a17      	ldr	r2, [pc, #92]	; (810f4ec <TIM_OC5_SetConfig+0xb4>)
 810f48e:	4293      	cmp	r3, r2
 810f490:	d00f      	beq.n	810f4b2 <TIM_OC5_SetConfig+0x7a>
 810f492:	687b      	ldr	r3, [r7, #4]
 810f494:	4a16      	ldr	r2, [pc, #88]	; (810f4f0 <TIM_OC5_SetConfig+0xb8>)
 810f496:	4293      	cmp	r3, r2
 810f498:	d00b      	beq.n	810f4b2 <TIM_OC5_SetConfig+0x7a>
 810f49a:	687b      	ldr	r3, [r7, #4]
 810f49c:	4a15      	ldr	r2, [pc, #84]	; (810f4f4 <TIM_OC5_SetConfig+0xbc>)
 810f49e:	4293      	cmp	r3, r2
 810f4a0:	d007      	beq.n	810f4b2 <TIM_OC5_SetConfig+0x7a>
 810f4a2:	687b      	ldr	r3, [r7, #4]
 810f4a4:	4a14      	ldr	r2, [pc, #80]	; (810f4f8 <TIM_OC5_SetConfig+0xc0>)
 810f4a6:	4293      	cmp	r3, r2
 810f4a8:	d003      	beq.n	810f4b2 <TIM_OC5_SetConfig+0x7a>
 810f4aa:	687b      	ldr	r3, [r7, #4]
 810f4ac:	4a13      	ldr	r2, [pc, #76]	; (810f4fc <TIM_OC5_SetConfig+0xc4>)
 810f4ae:	4293      	cmp	r3, r2
 810f4b0:	d109      	bne.n	810f4c6 <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 810f4b2:	697b      	ldr	r3, [r7, #20]
 810f4b4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 810f4b8:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 810f4ba:	683b      	ldr	r3, [r7, #0]
 810f4bc:	695b      	ldr	r3, [r3, #20]
 810f4be:	021b      	lsls	r3, r3, #8
 810f4c0:	697a      	ldr	r2, [r7, #20]
 810f4c2:	4313      	orrs	r3, r2
 810f4c4:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 810f4c6:	687b      	ldr	r3, [r7, #4]
 810f4c8:	697a      	ldr	r2, [r7, #20]
 810f4ca:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 810f4cc:	687b      	ldr	r3, [r7, #4]
 810f4ce:	68fa      	ldr	r2, [r7, #12]
 810f4d0:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 810f4d2:	683b      	ldr	r3, [r7, #0]
 810f4d4:	685a      	ldr	r2, [r3, #4]
 810f4d6:	687b      	ldr	r3, [r7, #4]
 810f4d8:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 810f4da:	687b      	ldr	r3, [r7, #4]
 810f4dc:	693a      	ldr	r2, [r7, #16]
 810f4de:	621a      	str	r2, [r3, #32]
}
 810f4e0:	bf00      	nop
 810f4e2:	371c      	adds	r7, #28
 810f4e4:	46bd      	mov	sp, r7
 810f4e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 810f4ea:	4770      	bx	lr
 810f4ec:	40010000 	.word	0x40010000
 810f4f0:	40010400 	.word	0x40010400
 810f4f4:	40014000 	.word	0x40014000
 810f4f8:	40014400 	.word	0x40014400
 810f4fc:	40014800 	.word	0x40014800

0810f500 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 810f500:	b480      	push	{r7}
 810f502:	b087      	sub	sp, #28
 810f504:	af00      	add	r7, sp, #0
 810f506:	6078      	str	r0, [r7, #4]
 810f508:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 810f50a:	687b      	ldr	r3, [r7, #4]
 810f50c:	6a1b      	ldr	r3, [r3, #32]
 810f50e:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 810f512:	687b      	ldr	r3, [r7, #4]
 810f514:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 810f516:	687b      	ldr	r3, [r7, #4]
 810f518:	6a1b      	ldr	r3, [r3, #32]
 810f51a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 810f51c:	687b      	ldr	r3, [r7, #4]
 810f51e:	685b      	ldr	r3, [r3, #4]
 810f520:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 810f522:	687b      	ldr	r3, [r7, #4]
 810f524:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 810f526:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 810f528:	68fb      	ldr	r3, [r7, #12]
 810f52a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 810f52e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 810f532:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 810f534:	683b      	ldr	r3, [r7, #0]
 810f536:	681b      	ldr	r3, [r3, #0]
 810f538:	021b      	lsls	r3, r3, #8
 810f53a:	68fa      	ldr	r2, [r7, #12]
 810f53c:	4313      	orrs	r3, r2
 810f53e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 810f540:	693b      	ldr	r3, [r7, #16]
 810f542:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 810f546:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 810f548:	683b      	ldr	r3, [r7, #0]
 810f54a:	689b      	ldr	r3, [r3, #8]
 810f54c:	051b      	lsls	r3, r3, #20
 810f54e:	693a      	ldr	r2, [r7, #16]
 810f550:	4313      	orrs	r3, r2
 810f552:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 810f554:	687b      	ldr	r3, [r7, #4]
 810f556:	4a18      	ldr	r2, [pc, #96]	; (810f5b8 <TIM_OC6_SetConfig+0xb8>)
 810f558:	4293      	cmp	r3, r2
 810f55a:	d00f      	beq.n	810f57c <TIM_OC6_SetConfig+0x7c>
 810f55c:	687b      	ldr	r3, [r7, #4]
 810f55e:	4a17      	ldr	r2, [pc, #92]	; (810f5bc <TIM_OC6_SetConfig+0xbc>)
 810f560:	4293      	cmp	r3, r2
 810f562:	d00b      	beq.n	810f57c <TIM_OC6_SetConfig+0x7c>
 810f564:	687b      	ldr	r3, [r7, #4]
 810f566:	4a16      	ldr	r2, [pc, #88]	; (810f5c0 <TIM_OC6_SetConfig+0xc0>)
 810f568:	4293      	cmp	r3, r2
 810f56a:	d007      	beq.n	810f57c <TIM_OC6_SetConfig+0x7c>
 810f56c:	687b      	ldr	r3, [r7, #4]
 810f56e:	4a15      	ldr	r2, [pc, #84]	; (810f5c4 <TIM_OC6_SetConfig+0xc4>)
 810f570:	4293      	cmp	r3, r2
 810f572:	d003      	beq.n	810f57c <TIM_OC6_SetConfig+0x7c>
 810f574:	687b      	ldr	r3, [r7, #4]
 810f576:	4a14      	ldr	r2, [pc, #80]	; (810f5c8 <TIM_OC6_SetConfig+0xc8>)
 810f578:	4293      	cmp	r3, r2
 810f57a:	d109      	bne.n	810f590 <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 810f57c:	697b      	ldr	r3, [r7, #20]
 810f57e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 810f582:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 810f584:	683b      	ldr	r3, [r7, #0]
 810f586:	695b      	ldr	r3, [r3, #20]
 810f588:	029b      	lsls	r3, r3, #10
 810f58a:	697a      	ldr	r2, [r7, #20]
 810f58c:	4313      	orrs	r3, r2
 810f58e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 810f590:	687b      	ldr	r3, [r7, #4]
 810f592:	697a      	ldr	r2, [r7, #20]
 810f594:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 810f596:	687b      	ldr	r3, [r7, #4]
 810f598:	68fa      	ldr	r2, [r7, #12]
 810f59a:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 810f59c:	683b      	ldr	r3, [r7, #0]
 810f59e:	685a      	ldr	r2, [r3, #4]
 810f5a0:	687b      	ldr	r3, [r7, #4]
 810f5a2:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 810f5a4:	687b      	ldr	r3, [r7, #4]
 810f5a6:	693a      	ldr	r2, [r7, #16]
 810f5a8:	621a      	str	r2, [r3, #32]
}
 810f5aa:	bf00      	nop
 810f5ac:	371c      	adds	r7, #28
 810f5ae:	46bd      	mov	sp, r7
 810f5b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 810f5b4:	4770      	bx	lr
 810f5b6:	bf00      	nop
 810f5b8:	40010000 	.word	0x40010000
 810f5bc:	40010400 	.word	0x40010400
 810f5c0:	40014000 	.word	0x40014000
 810f5c4:	40014400 	.word	0x40014400
 810f5c8:	40014800 	.word	0x40014800

0810f5cc <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 810f5cc:	b480      	push	{r7}
 810f5ce:	b087      	sub	sp, #28
 810f5d0:	af00      	add	r7, sp, #0
 810f5d2:	60f8      	str	r0, [r7, #12]
 810f5d4:	60b9      	str	r1, [r7, #8]
 810f5d6:	607a      	str	r2, [r7, #4]
 810f5d8:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 810f5da:	68fb      	ldr	r3, [r7, #12]
 810f5dc:	6a1b      	ldr	r3, [r3, #32]
 810f5de:	f023 0201 	bic.w	r2, r3, #1
 810f5e2:	68fb      	ldr	r3, [r7, #12]
 810f5e4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 810f5e6:	68fb      	ldr	r3, [r7, #12]
 810f5e8:	699b      	ldr	r3, [r3, #24]
 810f5ea:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 810f5ec:	68fb      	ldr	r3, [r7, #12]
 810f5ee:	6a1b      	ldr	r3, [r3, #32]
 810f5f0:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 810f5f2:	68fb      	ldr	r3, [r7, #12]
 810f5f4:	4a28      	ldr	r2, [pc, #160]	; (810f698 <TIM_TI1_SetConfig+0xcc>)
 810f5f6:	4293      	cmp	r3, r2
 810f5f8:	d01b      	beq.n	810f632 <TIM_TI1_SetConfig+0x66>
 810f5fa:	68fb      	ldr	r3, [r7, #12]
 810f5fc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 810f600:	d017      	beq.n	810f632 <TIM_TI1_SetConfig+0x66>
 810f602:	68fb      	ldr	r3, [r7, #12]
 810f604:	4a25      	ldr	r2, [pc, #148]	; (810f69c <TIM_TI1_SetConfig+0xd0>)
 810f606:	4293      	cmp	r3, r2
 810f608:	d013      	beq.n	810f632 <TIM_TI1_SetConfig+0x66>
 810f60a:	68fb      	ldr	r3, [r7, #12]
 810f60c:	4a24      	ldr	r2, [pc, #144]	; (810f6a0 <TIM_TI1_SetConfig+0xd4>)
 810f60e:	4293      	cmp	r3, r2
 810f610:	d00f      	beq.n	810f632 <TIM_TI1_SetConfig+0x66>
 810f612:	68fb      	ldr	r3, [r7, #12]
 810f614:	4a23      	ldr	r2, [pc, #140]	; (810f6a4 <TIM_TI1_SetConfig+0xd8>)
 810f616:	4293      	cmp	r3, r2
 810f618:	d00b      	beq.n	810f632 <TIM_TI1_SetConfig+0x66>
 810f61a:	68fb      	ldr	r3, [r7, #12]
 810f61c:	4a22      	ldr	r2, [pc, #136]	; (810f6a8 <TIM_TI1_SetConfig+0xdc>)
 810f61e:	4293      	cmp	r3, r2
 810f620:	d007      	beq.n	810f632 <TIM_TI1_SetConfig+0x66>
 810f622:	68fb      	ldr	r3, [r7, #12]
 810f624:	4a21      	ldr	r2, [pc, #132]	; (810f6ac <TIM_TI1_SetConfig+0xe0>)
 810f626:	4293      	cmp	r3, r2
 810f628:	d003      	beq.n	810f632 <TIM_TI1_SetConfig+0x66>
 810f62a:	68fb      	ldr	r3, [r7, #12]
 810f62c:	4a20      	ldr	r2, [pc, #128]	; (810f6b0 <TIM_TI1_SetConfig+0xe4>)
 810f62e:	4293      	cmp	r3, r2
 810f630:	d101      	bne.n	810f636 <TIM_TI1_SetConfig+0x6a>
 810f632:	2301      	movs	r3, #1
 810f634:	e000      	b.n	810f638 <TIM_TI1_SetConfig+0x6c>
 810f636:	2300      	movs	r3, #0
 810f638:	2b00      	cmp	r3, #0
 810f63a:	d008      	beq.n	810f64e <TIM_TI1_SetConfig+0x82>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 810f63c:	697b      	ldr	r3, [r7, #20]
 810f63e:	f023 0303 	bic.w	r3, r3, #3
 810f642:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 810f644:	697a      	ldr	r2, [r7, #20]
 810f646:	687b      	ldr	r3, [r7, #4]
 810f648:	4313      	orrs	r3, r2
 810f64a:	617b      	str	r3, [r7, #20]
 810f64c:	e003      	b.n	810f656 <TIM_TI1_SetConfig+0x8a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 810f64e:	697b      	ldr	r3, [r7, #20]
 810f650:	f043 0301 	orr.w	r3, r3, #1
 810f654:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 810f656:	697b      	ldr	r3, [r7, #20]
 810f658:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 810f65c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 810f65e:	683b      	ldr	r3, [r7, #0]
 810f660:	011b      	lsls	r3, r3, #4
 810f662:	b2db      	uxtb	r3, r3
 810f664:	697a      	ldr	r2, [r7, #20]
 810f666:	4313      	orrs	r3, r2
 810f668:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 810f66a:	693b      	ldr	r3, [r7, #16]
 810f66c:	f023 030a 	bic.w	r3, r3, #10
 810f670:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 810f672:	68bb      	ldr	r3, [r7, #8]
 810f674:	f003 030a 	and.w	r3, r3, #10
 810f678:	693a      	ldr	r2, [r7, #16]
 810f67a:	4313      	orrs	r3, r2
 810f67c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 810f67e:	68fb      	ldr	r3, [r7, #12]
 810f680:	697a      	ldr	r2, [r7, #20]
 810f682:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 810f684:	68fb      	ldr	r3, [r7, #12]
 810f686:	693a      	ldr	r2, [r7, #16]
 810f688:	621a      	str	r2, [r3, #32]
}
 810f68a:	bf00      	nop
 810f68c:	371c      	adds	r7, #28
 810f68e:	46bd      	mov	sp, r7
 810f690:	f85d 7b04 	ldr.w	r7, [sp], #4
 810f694:	4770      	bx	lr
 810f696:	bf00      	nop
 810f698:	40010000 	.word	0x40010000
 810f69c:	40000400 	.word	0x40000400
 810f6a0:	40000800 	.word	0x40000800
 810f6a4:	40000c00 	.word	0x40000c00
 810f6a8:	40010400 	.word	0x40010400
 810f6ac:	40001800 	.word	0x40001800
 810f6b0:	40014000 	.word	0x40014000

0810f6b4 <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 810f6b4:	b480      	push	{r7}
 810f6b6:	b087      	sub	sp, #28
 810f6b8:	af00      	add	r7, sp, #0
 810f6ba:	60f8      	str	r0, [r7, #12]
 810f6bc:	60b9      	str	r1, [r7, #8]
 810f6be:	607a      	str	r2, [r7, #4]
 810f6c0:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 810f6c2:	68fb      	ldr	r3, [r7, #12]
 810f6c4:	6a1b      	ldr	r3, [r3, #32]
 810f6c6:	f023 0210 	bic.w	r2, r3, #16
 810f6ca:	68fb      	ldr	r3, [r7, #12]
 810f6cc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 810f6ce:	68fb      	ldr	r3, [r7, #12]
 810f6d0:	699b      	ldr	r3, [r3, #24]
 810f6d2:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 810f6d4:	68fb      	ldr	r3, [r7, #12]
 810f6d6:	6a1b      	ldr	r3, [r3, #32]
 810f6d8:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 810f6da:	697b      	ldr	r3, [r7, #20]
 810f6dc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 810f6e0:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 810f6e2:	687b      	ldr	r3, [r7, #4]
 810f6e4:	021b      	lsls	r3, r3, #8
 810f6e6:	697a      	ldr	r2, [r7, #20]
 810f6e8:	4313      	orrs	r3, r2
 810f6ea:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 810f6ec:	697b      	ldr	r3, [r7, #20]
 810f6ee:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 810f6f2:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 810f6f4:	683b      	ldr	r3, [r7, #0]
 810f6f6:	031b      	lsls	r3, r3, #12
 810f6f8:	b29b      	uxth	r3, r3
 810f6fa:	697a      	ldr	r2, [r7, #20]
 810f6fc:	4313      	orrs	r3, r2
 810f6fe:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 810f700:	693b      	ldr	r3, [r7, #16]
 810f702:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 810f706:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 810f708:	68bb      	ldr	r3, [r7, #8]
 810f70a:	011b      	lsls	r3, r3, #4
 810f70c:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 810f710:	693a      	ldr	r2, [r7, #16]
 810f712:	4313      	orrs	r3, r2
 810f714:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 810f716:	68fb      	ldr	r3, [r7, #12]
 810f718:	697a      	ldr	r2, [r7, #20]
 810f71a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 810f71c:	68fb      	ldr	r3, [r7, #12]
 810f71e:	693a      	ldr	r2, [r7, #16]
 810f720:	621a      	str	r2, [r3, #32]
}
 810f722:	bf00      	nop
 810f724:	371c      	adds	r7, #28
 810f726:	46bd      	mov	sp, r7
 810f728:	f85d 7b04 	ldr.w	r7, [sp], #4
 810f72c:	4770      	bx	lr

0810f72e <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 810f72e:	b480      	push	{r7}
 810f730:	b087      	sub	sp, #28
 810f732:	af00      	add	r7, sp, #0
 810f734:	60f8      	str	r0, [r7, #12]
 810f736:	60b9      	str	r1, [r7, #8]
 810f738:	607a      	str	r2, [r7, #4]
 810f73a:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 810f73c:	68fb      	ldr	r3, [r7, #12]
 810f73e:	6a1b      	ldr	r3, [r3, #32]
 810f740:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 810f744:	68fb      	ldr	r3, [r7, #12]
 810f746:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 810f748:	68fb      	ldr	r3, [r7, #12]
 810f74a:	69db      	ldr	r3, [r3, #28]
 810f74c:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 810f74e:	68fb      	ldr	r3, [r7, #12]
 810f750:	6a1b      	ldr	r3, [r3, #32]
 810f752:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 810f754:	697b      	ldr	r3, [r7, #20]
 810f756:	f023 0303 	bic.w	r3, r3, #3
 810f75a:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 810f75c:	697a      	ldr	r2, [r7, #20]
 810f75e:	687b      	ldr	r3, [r7, #4]
 810f760:	4313      	orrs	r3, r2
 810f762:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 810f764:	697b      	ldr	r3, [r7, #20]
 810f766:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 810f76a:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 810f76c:	683b      	ldr	r3, [r7, #0]
 810f76e:	011b      	lsls	r3, r3, #4
 810f770:	b2db      	uxtb	r3, r3
 810f772:	697a      	ldr	r2, [r7, #20]
 810f774:	4313      	orrs	r3, r2
 810f776:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 810f778:	693b      	ldr	r3, [r7, #16]
 810f77a:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 810f77e:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 810f780:	68bb      	ldr	r3, [r7, #8]
 810f782:	021b      	lsls	r3, r3, #8
 810f784:	f403 6320 	and.w	r3, r3, #2560	; 0xa00
 810f788:	693a      	ldr	r2, [r7, #16]
 810f78a:	4313      	orrs	r3, r2
 810f78c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 810f78e:	68fb      	ldr	r3, [r7, #12]
 810f790:	697a      	ldr	r2, [r7, #20]
 810f792:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 810f794:	68fb      	ldr	r3, [r7, #12]
 810f796:	693a      	ldr	r2, [r7, #16]
 810f798:	621a      	str	r2, [r3, #32]
}
 810f79a:	bf00      	nop
 810f79c:	371c      	adds	r7, #28
 810f79e:	46bd      	mov	sp, r7
 810f7a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 810f7a4:	4770      	bx	lr

0810f7a6 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 810f7a6:	b480      	push	{r7}
 810f7a8:	b087      	sub	sp, #28
 810f7aa:	af00      	add	r7, sp, #0
 810f7ac:	60f8      	str	r0, [r7, #12]
 810f7ae:	60b9      	str	r1, [r7, #8]
 810f7b0:	607a      	str	r2, [r7, #4]
 810f7b2:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 810f7b4:	68fb      	ldr	r3, [r7, #12]
 810f7b6:	6a1b      	ldr	r3, [r3, #32]
 810f7b8:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 810f7bc:	68fb      	ldr	r3, [r7, #12]
 810f7be:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 810f7c0:	68fb      	ldr	r3, [r7, #12]
 810f7c2:	69db      	ldr	r3, [r3, #28]
 810f7c4:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 810f7c6:	68fb      	ldr	r3, [r7, #12]
 810f7c8:	6a1b      	ldr	r3, [r3, #32]
 810f7ca:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 810f7cc:	697b      	ldr	r3, [r7, #20]
 810f7ce:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 810f7d2:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 810f7d4:	687b      	ldr	r3, [r7, #4]
 810f7d6:	021b      	lsls	r3, r3, #8
 810f7d8:	697a      	ldr	r2, [r7, #20]
 810f7da:	4313      	orrs	r3, r2
 810f7dc:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 810f7de:	697b      	ldr	r3, [r7, #20]
 810f7e0:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 810f7e4:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 810f7e6:	683b      	ldr	r3, [r7, #0]
 810f7e8:	031b      	lsls	r3, r3, #12
 810f7ea:	b29b      	uxth	r3, r3
 810f7ec:	697a      	ldr	r2, [r7, #20]
 810f7ee:	4313      	orrs	r3, r2
 810f7f0:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 810f7f2:	693b      	ldr	r3, [r7, #16]
 810f7f4:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 810f7f8:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 810f7fa:	68bb      	ldr	r3, [r7, #8]
 810f7fc:	031b      	lsls	r3, r3, #12
 810f7fe:	f403 4320 	and.w	r3, r3, #40960	; 0xa000
 810f802:	693a      	ldr	r2, [r7, #16]
 810f804:	4313      	orrs	r3, r2
 810f806:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 810f808:	68fb      	ldr	r3, [r7, #12]
 810f80a:	697a      	ldr	r2, [r7, #20]
 810f80c:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 810f80e:	68fb      	ldr	r3, [r7, #12]
 810f810:	693a      	ldr	r2, [r7, #16]
 810f812:	621a      	str	r2, [r3, #32]
}
 810f814:	bf00      	nop
 810f816:	371c      	adds	r7, #28
 810f818:	46bd      	mov	sp, r7
 810f81a:	f85d 7b04 	ldr.w	r7, [sp], #4
 810f81e:	4770      	bx	lr

0810f820 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 810f820:	b480      	push	{r7}
 810f822:	b085      	sub	sp, #20
 810f824:	af00      	add	r7, sp, #0
 810f826:	6078      	str	r0, [r7, #4]
 810f828:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 810f82a:	687b      	ldr	r3, [r7, #4]
 810f82c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 810f830:	2b01      	cmp	r3, #1
 810f832:	d101      	bne.n	810f838 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 810f834:	2302      	movs	r3, #2
 810f836:	e06d      	b.n	810f914 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 810f838:	687b      	ldr	r3, [r7, #4]
 810f83a:	2201      	movs	r2, #1
 810f83c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 810f840:	687b      	ldr	r3, [r7, #4]
 810f842:	2202      	movs	r2, #2
 810f844:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 810f848:	687b      	ldr	r3, [r7, #4]
 810f84a:	681b      	ldr	r3, [r3, #0]
 810f84c:	685b      	ldr	r3, [r3, #4]
 810f84e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 810f850:	687b      	ldr	r3, [r7, #4]
 810f852:	681b      	ldr	r3, [r3, #0]
 810f854:	689b      	ldr	r3, [r3, #8]
 810f856:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 810f858:	687b      	ldr	r3, [r7, #4]
 810f85a:	681b      	ldr	r3, [r3, #0]
 810f85c:	4a30      	ldr	r2, [pc, #192]	; (810f920 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 810f85e:	4293      	cmp	r3, r2
 810f860:	d004      	beq.n	810f86c <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 810f862:	687b      	ldr	r3, [r7, #4]
 810f864:	681b      	ldr	r3, [r3, #0]
 810f866:	4a2f      	ldr	r2, [pc, #188]	; (810f924 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 810f868:	4293      	cmp	r3, r2
 810f86a:	d108      	bne.n	810f87e <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 810f86c:	68fb      	ldr	r3, [r7, #12]
 810f86e:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 810f872:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 810f874:	683b      	ldr	r3, [r7, #0]
 810f876:	685b      	ldr	r3, [r3, #4]
 810f878:	68fa      	ldr	r2, [r7, #12]
 810f87a:	4313      	orrs	r3, r2
 810f87c:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 810f87e:	68fb      	ldr	r3, [r7, #12]
 810f880:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 810f884:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 810f886:	683b      	ldr	r3, [r7, #0]
 810f888:	681b      	ldr	r3, [r3, #0]
 810f88a:	68fa      	ldr	r2, [r7, #12]
 810f88c:	4313      	orrs	r3, r2
 810f88e:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 810f890:	687b      	ldr	r3, [r7, #4]
 810f892:	681b      	ldr	r3, [r3, #0]
 810f894:	68fa      	ldr	r2, [r7, #12]
 810f896:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 810f898:	687b      	ldr	r3, [r7, #4]
 810f89a:	681b      	ldr	r3, [r3, #0]
 810f89c:	4a20      	ldr	r2, [pc, #128]	; (810f920 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 810f89e:	4293      	cmp	r3, r2
 810f8a0:	d022      	beq.n	810f8e8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 810f8a2:	687b      	ldr	r3, [r7, #4]
 810f8a4:	681b      	ldr	r3, [r3, #0]
 810f8a6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 810f8aa:	d01d      	beq.n	810f8e8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 810f8ac:	687b      	ldr	r3, [r7, #4]
 810f8ae:	681b      	ldr	r3, [r3, #0]
 810f8b0:	4a1d      	ldr	r2, [pc, #116]	; (810f928 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 810f8b2:	4293      	cmp	r3, r2
 810f8b4:	d018      	beq.n	810f8e8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 810f8b6:	687b      	ldr	r3, [r7, #4]
 810f8b8:	681b      	ldr	r3, [r3, #0]
 810f8ba:	4a1c      	ldr	r2, [pc, #112]	; (810f92c <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 810f8bc:	4293      	cmp	r3, r2
 810f8be:	d013      	beq.n	810f8e8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 810f8c0:	687b      	ldr	r3, [r7, #4]
 810f8c2:	681b      	ldr	r3, [r3, #0]
 810f8c4:	4a1a      	ldr	r2, [pc, #104]	; (810f930 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 810f8c6:	4293      	cmp	r3, r2
 810f8c8:	d00e      	beq.n	810f8e8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 810f8ca:	687b      	ldr	r3, [r7, #4]
 810f8cc:	681b      	ldr	r3, [r3, #0]
 810f8ce:	4a15      	ldr	r2, [pc, #84]	; (810f924 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 810f8d0:	4293      	cmp	r3, r2
 810f8d2:	d009      	beq.n	810f8e8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 810f8d4:	687b      	ldr	r3, [r7, #4]
 810f8d6:	681b      	ldr	r3, [r3, #0]
 810f8d8:	4a16      	ldr	r2, [pc, #88]	; (810f934 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 810f8da:	4293      	cmp	r3, r2
 810f8dc:	d004      	beq.n	810f8e8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 810f8de:	687b      	ldr	r3, [r7, #4]
 810f8e0:	681b      	ldr	r3, [r3, #0]
 810f8e2:	4a15      	ldr	r2, [pc, #84]	; (810f938 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 810f8e4:	4293      	cmp	r3, r2
 810f8e6:	d10c      	bne.n	810f902 <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 810f8e8:	68bb      	ldr	r3, [r7, #8]
 810f8ea:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 810f8ee:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 810f8f0:	683b      	ldr	r3, [r7, #0]
 810f8f2:	689b      	ldr	r3, [r3, #8]
 810f8f4:	68ba      	ldr	r2, [r7, #8]
 810f8f6:	4313      	orrs	r3, r2
 810f8f8:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 810f8fa:	687b      	ldr	r3, [r7, #4]
 810f8fc:	681b      	ldr	r3, [r3, #0]
 810f8fe:	68ba      	ldr	r2, [r7, #8]
 810f900:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 810f902:	687b      	ldr	r3, [r7, #4]
 810f904:	2201      	movs	r2, #1
 810f906:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 810f90a:	687b      	ldr	r3, [r7, #4]
 810f90c:	2200      	movs	r2, #0
 810f90e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 810f912:	2300      	movs	r3, #0
}
 810f914:	4618      	mov	r0, r3
 810f916:	3714      	adds	r7, #20
 810f918:	46bd      	mov	sp, r7
 810f91a:	f85d 7b04 	ldr.w	r7, [sp], #4
 810f91e:	4770      	bx	lr
 810f920:	40010000 	.word	0x40010000
 810f924:	40010400 	.word	0x40010400
 810f928:	40000400 	.word	0x40000400
 810f92c:	40000800 	.word	0x40000800
 810f930:	40000c00 	.word	0x40000c00
 810f934:	40001800 	.word	0x40001800
 810f938:	40014000 	.word	0x40014000

0810f93c <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 810f93c:	b480      	push	{r7}
 810f93e:	b085      	sub	sp, #20
 810f940:	af00      	add	r7, sp, #0
 810f942:	6078      	str	r0, [r7, #4]
 810f944:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 810f946:	2300      	movs	r3, #0
 810f948:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 810f94a:	687b      	ldr	r3, [r7, #4]
 810f94c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 810f950:	2b01      	cmp	r3, #1
 810f952:	d101      	bne.n	810f958 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 810f954:	2302      	movs	r3, #2
 810f956:	e065      	b.n	810fa24 <HAL_TIMEx_ConfigBreakDeadTime+0xe8>
 810f958:	687b      	ldr	r3, [r7, #4]
 810f95a:	2201      	movs	r2, #1
 810f95c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 810f960:	68fb      	ldr	r3, [r7, #12]
 810f962:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 810f966:	683b      	ldr	r3, [r7, #0]
 810f968:	68db      	ldr	r3, [r3, #12]
 810f96a:	4313      	orrs	r3, r2
 810f96c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 810f96e:	68fb      	ldr	r3, [r7, #12]
 810f970:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 810f974:	683b      	ldr	r3, [r7, #0]
 810f976:	689b      	ldr	r3, [r3, #8]
 810f978:	4313      	orrs	r3, r2
 810f97a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 810f97c:	68fb      	ldr	r3, [r7, #12]
 810f97e:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 810f982:	683b      	ldr	r3, [r7, #0]
 810f984:	685b      	ldr	r3, [r3, #4]
 810f986:	4313      	orrs	r3, r2
 810f988:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 810f98a:	68fb      	ldr	r3, [r7, #12]
 810f98c:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 810f990:	683b      	ldr	r3, [r7, #0]
 810f992:	681b      	ldr	r3, [r3, #0]
 810f994:	4313      	orrs	r3, r2
 810f996:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 810f998:	68fb      	ldr	r3, [r7, #12]
 810f99a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 810f99e:	683b      	ldr	r3, [r7, #0]
 810f9a0:	691b      	ldr	r3, [r3, #16]
 810f9a2:	4313      	orrs	r3, r2
 810f9a4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 810f9a6:	68fb      	ldr	r3, [r7, #12]
 810f9a8:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 810f9ac:	683b      	ldr	r3, [r7, #0]
 810f9ae:	695b      	ldr	r3, [r3, #20]
 810f9b0:	4313      	orrs	r3, r2
 810f9b2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 810f9b4:	68fb      	ldr	r3, [r7, #12]
 810f9b6:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 810f9ba:	683b      	ldr	r3, [r7, #0]
 810f9bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 810f9be:	4313      	orrs	r3, r2
 810f9c0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 810f9c2:	68fb      	ldr	r3, [r7, #12]
 810f9c4:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 810f9c8:	683b      	ldr	r3, [r7, #0]
 810f9ca:	699b      	ldr	r3, [r3, #24]
 810f9cc:	041b      	lsls	r3, r3, #16
 810f9ce:	4313      	orrs	r3, r2
 810f9d0:	60fb      	str	r3, [r7, #12]
    /* Set BREAK AF mode */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
  }

#endif /* TIM_BDTR_BKBID */
  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 810f9d2:	687b      	ldr	r3, [r7, #4]
 810f9d4:	681b      	ldr	r3, [r3, #0]
 810f9d6:	4a16      	ldr	r2, [pc, #88]	; (810fa30 <HAL_TIMEx_ConfigBreakDeadTime+0xf4>)
 810f9d8:	4293      	cmp	r3, r2
 810f9da:	d004      	beq.n	810f9e6 <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 810f9dc:	687b      	ldr	r3, [r7, #4]
 810f9de:	681b      	ldr	r3, [r3, #0]
 810f9e0:	4a14      	ldr	r2, [pc, #80]	; (810fa34 <HAL_TIMEx_ConfigBreakDeadTime+0xf8>)
 810f9e2:	4293      	cmp	r3, r2
 810f9e4:	d115      	bne.n	810fa12 <HAL_TIMEx_ConfigBreakDeadTime+0xd6>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 810f9e6:	68fb      	ldr	r3, [r7, #12]
 810f9e8:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 810f9ec:	683b      	ldr	r3, [r7, #0]
 810f9ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 810f9f0:	051b      	lsls	r3, r3, #20
 810f9f2:	4313      	orrs	r3, r2
 810f9f4:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 810f9f6:	68fb      	ldr	r3, [r7, #12]
 810f9f8:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 810f9fc:	683b      	ldr	r3, [r7, #0]
 810f9fe:	69db      	ldr	r3, [r3, #28]
 810fa00:	4313      	orrs	r3, r2
 810fa02:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 810fa04:	68fb      	ldr	r3, [r7, #12]
 810fa06:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 810fa0a:	683b      	ldr	r3, [r7, #0]
 810fa0c:	6a1b      	ldr	r3, [r3, #32]
 810fa0e:	4313      	orrs	r3, r2
 810fa10:	60fb      	str	r3, [r7, #12]
    }
#endif /* TIM_BDTR_BKBID */
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 810fa12:	687b      	ldr	r3, [r7, #4]
 810fa14:	681b      	ldr	r3, [r3, #0]
 810fa16:	68fa      	ldr	r2, [r7, #12]
 810fa18:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 810fa1a:	687b      	ldr	r3, [r7, #4]
 810fa1c:	2200      	movs	r2, #0
 810fa1e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 810fa22:	2300      	movs	r3, #0
}
 810fa24:	4618      	mov	r0, r3
 810fa26:	3714      	adds	r7, #20
 810fa28:	46bd      	mov	sp, r7
 810fa2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 810fa2e:	4770      	bx	lr
 810fa30:	40010000 	.word	0x40010000
 810fa34:	40010400 	.word	0x40010400

0810fa38 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 810fa38:	b580      	push	{r7, lr}
 810fa3a:	b082      	sub	sp, #8
 810fa3c:	af00      	add	r7, sp, #0
 810fa3e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 810fa40:	687b      	ldr	r3, [r7, #4]
 810fa42:	2b00      	cmp	r3, #0
 810fa44:	d101      	bne.n	810fa4a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 810fa46:	2301      	movs	r3, #1
 810fa48:	e042      	b.n	810fad0 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 810fa4a:	687b      	ldr	r3, [r7, #4]
 810fa4c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 810fa50:	2b00      	cmp	r3, #0
 810fa52:	d106      	bne.n	810fa62 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 810fa54:	687b      	ldr	r3, [r7, #4]
 810fa56:	2200      	movs	r2, #0
 810fa58:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 810fa5c:	6878      	ldr	r0, [r7, #4]
 810fa5e:	f7f2 fa75 	bl	8101f4c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 810fa62:	687b      	ldr	r3, [r7, #4]
 810fa64:	2224      	movs	r2, #36	; 0x24
 810fa66:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 810fa6a:	687b      	ldr	r3, [r7, #4]
 810fa6c:	681b      	ldr	r3, [r3, #0]
 810fa6e:	681a      	ldr	r2, [r3, #0]
 810fa70:	687b      	ldr	r3, [r7, #4]
 810fa72:	681b      	ldr	r3, [r3, #0]
 810fa74:	f022 0201 	bic.w	r2, r2, #1
 810fa78:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 810fa7a:	6878      	ldr	r0, [r7, #4]
 810fa7c:	f000 f82c 	bl	810fad8 <UART_SetConfig>
 810fa80:	4603      	mov	r3, r0
 810fa82:	2b01      	cmp	r3, #1
 810fa84:	d101      	bne.n	810fa8a <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 810fa86:	2301      	movs	r3, #1
 810fa88:	e022      	b.n	810fad0 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 810fa8a:	687b      	ldr	r3, [r7, #4]
 810fa8c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 810fa8e:	2b00      	cmp	r3, #0
 810fa90:	d002      	beq.n	810fa98 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 810fa92:	6878      	ldr	r0, [r7, #4]
 810fa94:	f000 fd88 	bl	81105a8 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 810fa98:	687b      	ldr	r3, [r7, #4]
 810fa9a:	681b      	ldr	r3, [r3, #0]
 810fa9c:	685a      	ldr	r2, [r3, #4]
 810fa9e:	687b      	ldr	r3, [r7, #4]
 810faa0:	681b      	ldr	r3, [r3, #0]
 810faa2:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 810faa6:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 810faa8:	687b      	ldr	r3, [r7, #4]
 810faaa:	681b      	ldr	r3, [r3, #0]
 810faac:	689a      	ldr	r2, [r3, #8]
 810faae:	687b      	ldr	r3, [r7, #4]
 810fab0:	681b      	ldr	r3, [r3, #0]
 810fab2:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 810fab6:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 810fab8:	687b      	ldr	r3, [r7, #4]
 810faba:	681b      	ldr	r3, [r3, #0]
 810fabc:	681a      	ldr	r2, [r3, #0]
 810fabe:	687b      	ldr	r3, [r7, #4]
 810fac0:	681b      	ldr	r3, [r3, #0]
 810fac2:	f042 0201 	orr.w	r2, r2, #1
 810fac6:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 810fac8:	6878      	ldr	r0, [r7, #4]
 810faca:	f000 fe0f 	bl	81106ec <UART_CheckIdleState>
 810face:	4603      	mov	r3, r0
}
 810fad0:	4618      	mov	r0, r3
 810fad2:	3708      	adds	r7, #8
 810fad4:	46bd      	mov	sp, r7
 810fad6:	bd80      	pop	{r7, pc}

0810fad8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 810fad8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 810fadc:	b092      	sub	sp, #72	; 0x48
 810fade:	af00      	add	r7, sp, #0
 810fae0:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 810fae2:	2300      	movs	r3, #0
 810fae4:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 810fae8:	697b      	ldr	r3, [r7, #20]
 810faea:	689a      	ldr	r2, [r3, #8]
 810faec:	697b      	ldr	r3, [r7, #20]
 810faee:	691b      	ldr	r3, [r3, #16]
 810faf0:	431a      	orrs	r2, r3
 810faf2:	697b      	ldr	r3, [r7, #20]
 810faf4:	695b      	ldr	r3, [r3, #20]
 810faf6:	431a      	orrs	r2, r3
 810faf8:	697b      	ldr	r3, [r7, #20]
 810fafa:	69db      	ldr	r3, [r3, #28]
 810fafc:	4313      	orrs	r3, r2
 810fafe:	647b      	str	r3, [r7, #68]	; 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 810fb00:	697b      	ldr	r3, [r7, #20]
 810fb02:	681b      	ldr	r3, [r3, #0]
 810fb04:	681a      	ldr	r2, [r3, #0]
 810fb06:	4bbd      	ldr	r3, [pc, #756]	; (810fdfc <UART_SetConfig+0x324>)
 810fb08:	4013      	ands	r3, r2
 810fb0a:	697a      	ldr	r2, [r7, #20]
 810fb0c:	6812      	ldr	r2, [r2, #0]
 810fb0e:	6c79      	ldr	r1, [r7, #68]	; 0x44
 810fb10:	430b      	orrs	r3, r1
 810fb12:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 810fb14:	697b      	ldr	r3, [r7, #20]
 810fb16:	681b      	ldr	r3, [r3, #0]
 810fb18:	685b      	ldr	r3, [r3, #4]
 810fb1a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 810fb1e:	697b      	ldr	r3, [r7, #20]
 810fb20:	68da      	ldr	r2, [r3, #12]
 810fb22:	697b      	ldr	r3, [r7, #20]
 810fb24:	681b      	ldr	r3, [r3, #0]
 810fb26:	430a      	orrs	r2, r1
 810fb28:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 810fb2a:	697b      	ldr	r3, [r7, #20]
 810fb2c:	699b      	ldr	r3, [r3, #24]
 810fb2e:	647b      	str	r3, [r7, #68]	; 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 810fb30:	697b      	ldr	r3, [r7, #20]
 810fb32:	681b      	ldr	r3, [r3, #0]
 810fb34:	4ab2      	ldr	r2, [pc, #712]	; (810fe00 <UART_SetConfig+0x328>)
 810fb36:	4293      	cmp	r3, r2
 810fb38:	d004      	beq.n	810fb44 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 810fb3a:	697b      	ldr	r3, [r7, #20]
 810fb3c:	6a1b      	ldr	r3, [r3, #32]
 810fb3e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 810fb40:	4313      	orrs	r3, r2
 810fb42:	647b      	str	r3, [r7, #68]	; 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 810fb44:	697b      	ldr	r3, [r7, #20]
 810fb46:	681b      	ldr	r3, [r3, #0]
 810fb48:	689b      	ldr	r3, [r3, #8]
 810fb4a:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 810fb4e:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 810fb52:	697a      	ldr	r2, [r7, #20]
 810fb54:	6812      	ldr	r2, [r2, #0]
 810fb56:	6c79      	ldr	r1, [r7, #68]	; 0x44
 810fb58:	430b      	orrs	r3, r1
 810fb5a:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 810fb5c:	697b      	ldr	r3, [r7, #20]
 810fb5e:	681b      	ldr	r3, [r3, #0]
 810fb60:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 810fb62:	f023 010f 	bic.w	r1, r3, #15
 810fb66:	697b      	ldr	r3, [r7, #20]
 810fb68:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 810fb6a:	697b      	ldr	r3, [r7, #20]
 810fb6c:	681b      	ldr	r3, [r3, #0]
 810fb6e:	430a      	orrs	r2, r1
 810fb70:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 810fb72:	697b      	ldr	r3, [r7, #20]
 810fb74:	681b      	ldr	r3, [r3, #0]
 810fb76:	4aa3      	ldr	r2, [pc, #652]	; (810fe04 <UART_SetConfig+0x32c>)
 810fb78:	4293      	cmp	r3, r2
 810fb7a:	d177      	bne.n	810fc6c <UART_SetConfig+0x194>
 810fb7c:	4ba2      	ldr	r3, [pc, #648]	; (810fe08 <UART_SetConfig+0x330>)
 810fb7e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 810fb80:	f003 0338 	and.w	r3, r3, #56	; 0x38
 810fb84:	2b28      	cmp	r3, #40	; 0x28
 810fb86:	d86d      	bhi.n	810fc64 <UART_SetConfig+0x18c>
 810fb88:	a201      	add	r2, pc, #4	; (adr r2, 810fb90 <UART_SetConfig+0xb8>)
 810fb8a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 810fb8e:	bf00      	nop
 810fb90:	0810fc35 	.word	0x0810fc35
 810fb94:	0810fc65 	.word	0x0810fc65
 810fb98:	0810fc65 	.word	0x0810fc65
 810fb9c:	0810fc65 	.word	0x0810fc65
 810fba0:	0810fc65 	.word	0x0810fc65
 810fba4:	0810fc65 	.word	0x0810fc65
 810fba8:	0810fc65 	.word	0x0810fc65
 810fbac:	0810fc65 	.word	0x0810fc65
 810fbb0:	0810fc3d 	.word	0x0810fc3d
 810fbb4:	0810fc65 	.word	0x0810fc65
 810fbb8:	0810fc65 	.word	0x0810fc65
 810fbbc:	0810fc65 	.word	0x0810fc65
 810fbc0:	0810fc65 	.word	0x0810fc65
 810fbc4:	0810fc65 	.word	0x0810fc65
 810fbc8:	0810fc65 	.word	0x0810fc65
 810fbcc:	0810fc65 	.word	0x0810fc65
 810fbd0:	0810fc45 	.word	0x0810fc45
 810fbd4:	0810fc65 	.word	0x0810fc65
 810fbd8:	0810fc65 	.word	0x0810fc65
 810fbdc:	0810fc65 	.word	0x0810fc65
 810fbe0:	0810fc65 	.word	0x0810fc65
 810fbe4:	0810fc65 	.word	0x0810fc65
 810fbe8:	0810fc65 	.word	0x0810fc65
 810fbec:	0810fc65 	.word	0x0810fc65
 810fbf0:	0810fc4d 	.word	0x0810fc4d
 810fbf4:	0810fc65 	.word	0x0810fc65
 810fbf8:	0810fc65 	.word	0x0810fc65
 810fbfc:	0810fc65 	.word	0x0810fc65
 810fc00:	0810fc65 	.word	0x0810fc65
 810fc04:	0810fc65 	.word	0x0810fc65
 810fc08:	0810fc65 	.word	0x0810fc65
 810fc0c:	0810fc65 	.word	0x0810fc65
 810fc10:	0810fc55 	.word	0x0810fc55
 810fc14:	0810fc65 	.word	0x0810fc65
 810fc18:	0810fc65 	.word	0x0810fc65
 810fc1c:	0810fc65 	.word	0x0810fc65
 810fc20:	0810fc65 	.word	0x0810fc65
 810fc24:	0810fc65 	.word	0x0810fc65
 810fc28:	0810fc65 	.word	0x0810fc65
 810fc2c:	0810fc65 	.word	0x0810fc65
 810fc30:	0810fc5d 	.word	0x0810fc5d
 810fc34:	2301      	movs	r3, #1
 810fc36:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 810fc3a:	e220      	b.n	811007e <UART_SetConfig+0x5a6>
 810fc3c:	2304      	movs	r3, #4
 810fc3e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 810fc42:	e21c      	b.n	811007e <UART_SetConfig+0x5a6>
 810fc44:	2308      	movs	r3, #8
 810fc46:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 810fc4a:	e218      	b.n	811007e <UART_SetConfig+0x5a6>
 810fc4c:	2310      	movs	r3, #16
 810fc4e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 810fc52:	e214      	b.n	811007e <UART_SetConfig+0x5a6>
 810fc54:	2320      	movs	r3, #32
 810fc56:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 810fc5a:	e210      	b.n	811007e <UART_SetConfig+0x5a6>
 810fc5c:	2340      	movs	r3, #64	; 0x40
 810fc5e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 810fc62:	e20c      	b.n	811007e <UART_SetConfig+0x5a6>
 810fc64:	2380      	movs	r3, #128	; 0x80
 810fc66:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 810fc6a:	e208      	b.n	811007e <UART_SetConfig+0x5a6>
 810fc6c:	697b      	ldr	r3, [r7, #20]
 810fc6e:	681b      	ldr	r3, [r3, #0]
 810fc70:	4a66      	ldr	r2, [pc, #408]	; (810fe0c <UART_SetConfig+0x334>)
 810fc72:	4293      	cmp	r3, r2
 810fc74:	d130      	bne.n	810fcd8 <UART_SetConfig+0x200>
 810fc76:	4b64      	ldr	r3, [pc, #400]	; (810fe08 <UART_SetConfig+0x330>)
 810fc78:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 810fc7a:	f003 0307 	and.w	r3, r3, #7
 810fc7e:	2b05      	cmp	r3, #5
 810fc80:	d826      	bhi.n	810fcd0 <UART_SetConfig+0x1f8>
 810fc82:	a201      	add	r2, pc, #4	; (adr r2, 810fc88 <UART_SetConfig+0x1b0>)
 810fc84:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 810fc88:	0810fca1 	.word	0x0810fca1
 810fc8c:	0810fca9 	.word	0x0810fca9
 810fc90:	0810fcb1 	.word	0x0810fcb1
 810fc94:	0810fcb9 	.word	0x0810fcb9
 810fc98:	0810fcc1 	.word	0x0810fcc1
 810fc9c:	0810fcc9 	.word	0x0810fcc9
 810fca0:	2300      	movs	r3, #0
 810fca2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 810fca6:	e1ea      	b.n	811007e <UART_SetConfig+0x5a6>
 810fca8:	2304      	movs	r3, #4
 810fcaa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 810fcae:	e1e6      	b.n	811007e <UART_SetConfig+0x5a6>
 810fcb0:	2308      	movs	r3, #8
 810fcb2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 810fcb6:	e1e2      	b.n	811007e <UART_SetConfig+0x5a6>
 810fcb8:	2310      	movs	r3, #16
 810fcba:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 810fcbe:	e1de      	b.n	811007e <UART_SetConfig+0x5a6>
 810fcc0:	2320      	movs	r3, #32
 810fcc2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 810fcc6:	e1da      	b.n	811007e <UART_SetConfig+0x5a6>
 810fcc8:	2340      	movs	r3, #64	; 0x40
 810fcca:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 810fcce:	e1d6      	b.n	811007e <UART_SetConfig+0x5a6>
 810fcd0:	2380      	movs	r3, #128	; 0x80
 810fcd2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 810fcd6:	e1d2      	b.n	811007e <UART_SetConfig+0x5a6>
 810fcd8:	697b      	ldr	r3, [r7, #20]
 810fcda:	681b      	ldr	r3, [r3, #0]
 810fcdc:	4a4c      	ldr	r2, [pc, #304]	; (810fe10 <UART_SetConfig+0x338>)
 810fcde:	4293      	cmp	r3, r2
 810fce0:	d130      	bne.n	810fd44 <UART_SetConfig+0x26c>
 810fce2:	4b49      	ldr	r3, [pc, #292]	; (810fe08 <UART_SetConfig+0x330>)
 810fce4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 810fce6:	f003 0307 	and.w	r3, r3, #7
 810fcea:	2b05      	cmp	r3, #5
 810fcec:	d826      	bhi.n	810fd3c <UART_SetConfig+0x264>
 810fcee:	a201      	add	r2, pc, #4	; (adr r2, 810fcf4 <UART_SetConfig+0x21c>)
 810fcf0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 810fcf4:	0810fd0d 	.word	0x0810fd0d
 810fcf8:	0810fd15 	.word	0x0810fd15
 810fcfc:	0810fd1d 	.word	0x0810fd1d
 810fd00:	0810fd25 	.word	0x0810fd25
 810fd04:	0810fd2d 	.word	0x0810fd2d
 810fd08:	0810fd35 	.word	0x0810fd35
 810fd0c:	2300      	movs	r3, #0
 810fd0e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 810fd12:	e1b4      	b.n	811007e <UART_SetConfig+0x5a6>
 810fd14:	2304      	movs	r3, #4
 810fd16:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 810fd1a:	e1b0      	b.n	811007e <UART_SetConfig+0x5a6>
 810fd1c:	2308      	movs	r3, #8
 810fd1e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 810fd22:	e1ac      	b.n	811007e <UART_SetConfig+0x5a6>
 810fd24:	2310      	movs	r3, #16
 810fd26:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 810fd2a:	e1a8      	b.n	811007e <UART_SetConfig+0x5a6>
 810fd2c:	2320      	movs	r3, #32
 810fd2e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 810fd32:	e1a4      	b.n	811007e <UART_SetConfig+0x5a6>
 810fd34:	2340      	movs	r3, #64	; 0x40
 810fd36:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 810fd3a:	e1a0      	b.n	811007e <UART_SetConfig+0x5a6>
 810fd3c:	2380      	movs	r3, #128	; 0x80
 810fd3e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 810fd42:	e19c      	b.n	811007e <UART_SetConfig+0x5a6>
 810fd44:	697b      	ldr	r3, [r7, #20]
 810fd46:	681b      	ldr	r3, [r3, #0]
 810fd48:	4a32      	ldr	r2, [pc, #200]	; (810fe14 <UART_SetConfig+0x33c>)
 810fd4a:	4293      	cmp	r3, r2
 810fd4c:	d130      	bne.n	810fdb0 <UART_SetConfig+0x2d8>
 810fd4e:	4b2e      	ldr	r3, [pc, #184]	; (810fe08 <UART_SetConfig+0x330>)
 810fd50:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 810fd52:	f003 0307 	and.w	r3, r3, #7
 810fd56:	2b05      	cmp	r3, #5
 810fd58:	d826      	bhi.n	810fda8 <UART_SetConfig+0x2d0>
 810fd5a:	a201      	add	r2, pc, #4	; (adr r2, 810fd60 <UART_SetConfig+0x288>)
 810fd5c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 810fd60:	0810fd79 	.word	0x0810fd79
 810fd64:	0810fd81 	.word	0x0810fd81
 810fd68:	0810fd89 	.word	0x0810fd89
 810fd6c:	0810fd91 	.word	0x0810fd91
 810fd70:	0810fd99 	.word	0x0810fd99
 810fd74:	0810fda1 	.word	0x0810fda1
 810fd78:	2300      	movs	r3, #0
 810fd7a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 810fd7e:	e17e      	b.n	811007e <UART_SetConfig+0x5a6>
 810fd80:	2304      	movs	r3, #4
 810fd82:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 810fd86:	e17a      	b.n	811007e <UART_SetConfig+0x5a6>
 810fd88:	2308      	movs	r3, #8
 810fd8a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 810fd8e:	e176      	b.n	811007e <UART_SetConfig+0x5a6>
 810fd90:	2310      	movs	r3, #16
 810fd92:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 810fd96:	e172      	b.n	811007e <UART_SetConfig+0x5a6>
 810fd98:	2320      	movs	r3, #32
 810fd9a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 810fd9e:	e16e      	b.n	811007e <UART_SetConfig+0x5a6>
 810fda0:	2340      	movs	r3, #64	; 0x40
 810fda2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 810fda6:	e16a      	b.n	811007e <UART_SetConfig+0x5a6>
 810fda8:	2380      	movs	r3, #128	; 0x80
 810fdaa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 810fdae:	e166      	b.n	811007e <UART_SetConfig+0x5a6>
 810fdb0:	697b      	ldr	r3, [r7, #20]
 810fdb2:	681b      	ldr	r3, [r3, #0]
 810fdb4:	4a18      	ldr	r2, [pc, #96]	; (810fe18 <UART_SetConfig+0x340>)
 810fdb6:	4293      	cmp	r3, r2
 810fdb8:	d140      	bne.n	810fe3c <UART_SetConfig+0x364>
 810fdba:	4b13      	ldr	r3, [pc, #76]	; (810fe08 <UART_SetConfig+0x330>)
 810fdbc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 810fdbe:	f003 0307 	and.w	r3, r3, #7
 810fdc2:	2b05      	cmp	r3, #5
 810fdc4:	d836      	bhi.n	810fe34 <UART_SetConfig+0x35c>
 810fdc6:	a201      	add	r2, pc, #4	; (adr r2, 810fdcc <UART_SetConfig+0x2f4>)
 810fdc8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 810fdcc:	0810fde5 	.word	0x0810fde5
 810fdd0:	0810fded 	.word	0x0810fded
 810fdd4:	0810fdf5 	.word	0x0810fdf5
 810fdd8:	0810fe1d 	.word	0x0810fe1d
 810fddc:	0810fe25 	.word	0x0810fe25
 810fde0:	0810fe2d 	.word	0x0810fe2d
 810fde4:	2300      	movs	r3, #0
 810fde6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 810fdea:	e148      	b.n	811007e <UART_SetConfig+0x5a6>
 810fdec:	2304      	movs	r3, #4
 810fdee:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 810fdf2:	e144      	b.n	811007e <UART_SetConfig+0x5a6>
 810fdf4:	2308      	movs	r3, #8
 810fdf6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 810fdfa:	e140      	b.n	811007e <UART_SetConfig+0x5a6>
 810fdfc:	cfff69f3 	.word	0xcfff69f3
 810fe00:	58000c00 	.word	0x58000c00
 810fe04:	40011000 	.word	0x40011000
 810fe08:	58024400 	.word	0x58024400
 810fe0c:	40004400 	.word	0x40004400
 810fe10:	40004800 	.word	0x40004800
 810fe14:	40004c00 	.word	0x40004c00
 810fe18:	40005000 	.word	0x40005000
 810fe1c:	2310      	movs	r3, #16
 810fe1e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 810fe22:	e12c      	b.n	811007e <UART_SetConfig+0x5a6>
 810fe24:	2320      	movs	r3, #32
 810fe26:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 810fe2a:	e128      	b.n	811007e <UART_SetConfig+0x5a6>
 810fe2c:	2340      	movs	r3, #64	; 0x40
 810fe2e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 810fe32:	e124      	b.n	811007e <UART_SetConfig+0x5a6>
 810fe34:	2380      	movs	r3, #128	; 0x80
 810fe36:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 810fe3a:	e120      	b.n	811007e <UART_SetConfig+0x5a6>
 810fe3c:	697b      	ldr	r3, [r7, #20]
 810fe3e:	681b      	ldr	r3, [r3, #0]
 810fe40:	4acb      	ldr	r2, [pc, #812]	; (8110170 <UART_SetConfig+0x698>)
 810fe42:	4293      	cmp	r3, r2
 810fe44:	d176      	bne.n	810ff34 <UART_SetConfig+0x45c>
 810fe46:	4bcb      	ldr	r3, [pc, #812]	; (8110174 <UART_SetConfig+0x69c>)
 810fe48:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 810fe4a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 810fe4e:	2b28      	cmp	r3, #40	; 0x28
 810fe50:	d86c      	bhi.n	810ff2c <UART_SetConfig+0x454>
 810fe52:	a201      	add	r2, pc, #4	; (adr r2, 810fe58 <UART_SetConfig+0x380>)
 810fe54:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 810fe58:	0810fefd 	.word	0x0810fefd
 810fe5c:	0810ff2d 	.word	0x0810ff2d
 810fe60:	0810ff2d 	.word	0x0810ff2d
 810fe64:	0810ff2d 	.word	0x0810ff2d
 810fe68:	0810ff2d 	.word	0x0810ff2d
 810fe6c:	0810ff2d 	.word	0x0810ff2d
 810fe70:	0810ff2d 	.word	0x0810ff2d
 810fe74:	0810ff2d 	.word	0x0810ff2d
 810fe78:	0810ff05 	.word	0x0810ff05
 810fe7c:	0810ff2d 	.word	0x0810ff2d
 810fe80:	0810ff2d 	.word	0x0810ff2d
 810fe84:	0810ff2d 	.word	0x0810ff2d
 810fe88:	0810ff2d 	.word	0x0810ff2d
 810fe8c:	0810ff2d 	.word	0x0810ff2d
 810fe90:	0810ff2d 	.word	0x0810ff2d
 810fe94:	0810ff2d 	.word	0x0810ff2d
 810fe98:	0810ff0d 	.word	0x0810ff0d
 810fe9c:	0810ff2d 	.word	0x0810ff2d
 810fea0:	0810ff2d 	.word	0x0810ff2d
 810fea4:	0810ff2d 	.word	0x0810ff2d
 810fea8:	0810ff2d 	.word	0x0810ff2d
 810feac:	0810ff2d 	.word	0x0810ff2d
 810feb0:	0810ff2d 	.word	0x0810ff2d
 810feb4:	0810ff2d 	.word	0x0810ff2d
 810feb8:	0810ff15 	.word	0x0810ff15
 810febc:	0810ff2d 	.word	0x0810ff2d
 810fec0:	0810ff2d 	.word	0x0810ff2d
 810fec4:	0810ff2d 	.word	0x0810ff2d
 810fec8:	0810ff2d 	.word	0x0810ff2d
 810fecc:	0810ff2d 	.word	0x0810ff2d
 810fed0:	0810ff2d 	.word	0x0810ff2d
 810fed4:	0810ff2d 	.word	0x0810ff2d
 810fed8:	0810ff1d 	.word	0x0810ff1d
 810fedc:	0810ff2d 	.word	0x0810ff2d
 810fee0:	0810ff2d 	.word	0x0810ff2d
 810fee4:	0810ff2d 	.word	0x0810ff2d
 810fee8:	0810ff2d 	.word	0x0810ff2d
 810feec:	0810ff2d 	.word	0x0810ff2d
 810fef0:	0810ff2d 	.word	0x0810ff2d
 810fef4:	0810ff2d 	.word	0x0810ff2d
 810fef8:	0810ff25 	.word	0x0810ff25
 810fefc:	2301      	movs	r3, #1
 810fefe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 810ff02:	e0bc      	b.n	811007e <UART_SetConfig+0x5a6>
 810ff04:	2304      	movs	r3, #4
 810ff06:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 810ff0a:	e0b8      	b.n	811007e <UART_SetConfig+0x5a6>
 810ff0c:	2308      	movs	r3, #8
 810ff0e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 810ff12:	e0b4      	b.n	811007e <UART_SetConfig+0x5a6>
 810ff14:	2310      	movs	r3, #16
 810ff16:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 810ff1a:	e0b0      	b.n	811007e <UART_SetConfig+0x5a6>
 810ff1c:	2320      	movs	r3, #32
 810ff1e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 810ff22:	e0ac      	b.n	811007e <UART_SetConfig+0x5a6>
 810ff24:	2340      	movs	r3, #64	; 0x40
 810ff26:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 810ff2a:	e0a8      	b.n	811007e <UART_SetConfig+0x5a6>
 810ff2c:	2380      	movs	r3, #128	; 0x80
 810ff2e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 810ff32:	e0a4      	b.n	811007e <UART_SetConfig+0x5a6>
 810ff34:	697b      	ldr	r3, [r7, #20]
 810ff36:	681b      	ldr	r3, [r3, #0]
 810ff38:	4a8f      	ldr	r2, [pc, #572]	; (8110178 <UART_SetConfig+0x6a0>)
 810ff3a:	4293      	cmp	r3, r2
 810ff3c:	d130      	bne.n	810ffa0 <UART_SetConfig+0x4c8>
 810ff3e:	4b8d      	ldr	r3, [pc, #564]	; (8110174 <UART_SetConfig+0x69c>)
 810ff40:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 810ff42:	f003 0307 	and.w	r3, r3, #7
 810ff46:	2b05      	cmp	r3, #5
 810ff48:	d826      	bhi.n	810ff98 <UART_SetConfig+0x4c0>
 810ff4a:	a201      	add	r2, pc, #4	; (adr r2, 810ff50 <UART_SetConfig+0x478>)
 810ff4c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 810ff50:	0810ff69 	.word	0x0810ff69
 810ff54:	0810ff71 	.word	0x0810ff71
 810ff58:	0810ff79 	.word	0x0810ff79
 810ff5c:	0810ff81 	.word	0x0810ff81
 810ff60:	0810ff89 	.word	0x0810ff89
 810ff64:	0810ff91 	.word	0x0810ff91
 810ff68:	2300      	movs	r3, #0
 810ff6a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 810ff6e:	e086      	b.n	811007e <UART_SetConfig+0x5a6>
 810ff70:	2304      	movs	r3, #4
 810ff72:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 810ff76:	e082      	b.n	811007e <UART_SetConfig+0x5a6>
 810ff78:	2308      	movs	r3, #8
 810ff7a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 810ff7e:	e07e      	b.n	811007e <UART_SetConfig+0x5a6>
 810ff80:	2310      	movs	r3, #16
 810ff82:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 810ff86:	e07a      	b.n	811007e <UART_SetConfig+0x5a6>
 810ff88:	2320      	movs	r3, #32
 810ff8a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 810ff8e:	e076      	b.n	811007e <UART_SetConfig+0x5a6>
 810ff90:	2340      	movs	r3, #64	; 0x40
 810ff92:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 810ff96:	e072      	b.n	811007e <UART_SetConfig+0x5a6>
 810ff98:	2380      	movs	r3, #128	; 0x80
 810ff9a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 810ff9e:	e06e      	b.n	811007e <UART_SetConfig+0x5a6>
 810ffa0:	697b      	ldr	r3, [r7, #20]
 810ffa2:	681b      	ldr	r3, [r3, #0]
 810ffa4:	4a75      	ldr	r2, [pc, #468]	; (811017c <UART_SetConfig+0x6a4>)
 810ffa6:	4293      	cmp	r3, r2
 810ffa8:	d130      	bne.n	811000c <UART_SetConfig+0x534>
 810ffaa:	4b72      	ldr	r3, [pc, #456]	; (8110174 <UART_SetConfig+0x69c>)
 810ffac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 810ffae:	f003 0307 	and.w	r3, r3, #7
 810ffb2:	2b05      	cmp	r3, #5
 810ffb4:	d826      	bhi.n	8110004 <UART_SetConfig+0x52c>
 810ffb6:	a201      	add	r2, pc, #4	; (adr r2, 810ffbc <UART_SetConfig+0x4e4>)
 810ffb8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 810ffbc:	0810ffd5 	.word	0x0810ffd5
 810ffc0:	0810ffdd 	.word	0x0810ffdd
 810ffc4:	0810ffe5 	.word	0x0810ffe5
 810ffc8:	0810ffed 	.word	0x0810ffed
 810ffcc:	0810fff5 	.word	0x0810fff5
 810ffd0:	0810fffd 	.word	0x0810fffd
 810ffd4:	2300      	movs	r3, #0
 810ffd6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 810ffda:	e050      	b.n	811007e <UART_SetConfig+0x5a6>
 810ffdc:	2304      	movs	r3, #4
 810ffde:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 810ffe2:	e04c      	b.n	811007e <UART_SetConfig+0x5a6>
 810ffe4:	2308      	movs	r3, #8
 810ffe6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 810ffea:	e048      	b.n	811007e <UART_SetConfig+0x5a6>
 810ffec:	2310      	movs	r3, #16
 810ffee:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 810fff2:	e044      	b.n	811007e <UART_SetConfig+0x5a6>
 810fff4:	2320      	movs	r3, #32
 810fff6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 810fffa:	e040      	b.n	811007e <UART_SetConfig+0x5a6>
 810fffc:	2340      	movs	r3, #64	; 0x40
 810fffe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8110002:	e03c      	b.n	811007e <UART_SetConfig+0x5a6>
 8110004:	2380      	movs	r3, #128	; 0x80
 8110006:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 811000a:	e038      	b.n	811007e <UART_SetConfig+0x5a6>
 811000c:	697b      	ldr	r3, [r7, #20]
 811000e:	681b      	ldr	r3, [r3, #0]
 8110010:	4a5b      	ldr	r2, [pc, #364]	; (8110180 <UART_SetConfig+0x6a8>)
 8110012:	4293      	cmp	r3, r2
 8110014:	d130      	bne.n	8110078 <UART_SetConfig+0x5a0>
 8110016:	4b57      	ldr	r3, [pc, #348]	; (8110174 <UART_SetConfig+0x69c>)
 8110018:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 811001a:	f003 0307 	and.w	r3, r3, #7
 811001e:	2b05      	cmp	r3, #5
 8110020:	d826      	bhi.n	8110070 <UART_SetConfig+0x598>
 8110022:	a201      	add	r2, pc, #4	; (adr r2, 8110028 <UART_SetConfig+0x550>)
 8110024:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8110028:	08110041 	.word	0x08110041
 811002c:	08110049 	.word	0x08110049
 8110030:	08110051 	.word	0x08110051
 8110034:	08110059 	.word	0x08110059
 8110038:	08110061 	.word	0x08110061
 811003c:	08110069 	.word	0x08110069
 8110040:	2302      	movs	r3, #2
 8110042:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8110046:	e01a      	b.n	811007e <UART_SetConfig+0x5a6>
 8110048:	2304      	movs	r3, #4
 811004a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 811004e:	e016      	b.n	811007e <UART_SetConfig+0x5a6>
 8110050:	2308      	movs	r3, #8
 8110052:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8110056:	e012      	b.n	811007e <UART_SetConfig+0x5a6>
 8110058:	2310      	movs	r3, #16
 811005a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 811005e:	e00e      	b.n	811007e <UART_SetConfig+0x5a6>
 8110060:	2320      	movs	r3, #32
 8110062:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8110066:	e00a      	b.n	811007e <UART_SetConfig+0x5a6>
 8110068:	2340      	movs	r3, #64	; 0x40
 811006a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 811006e:	e006      	b.n	811007e <UART_SetConfig+0x5a6>
 8110070:	2380      	movs	r3, #128	; 0x80
 8110072:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8110076:	e002      	b.n	811007e <UART_SetConfig+0x5a6>
 8110078:	2380      	movs	r3, #128	; 0x80
 811007a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 811007e:	697b      	ldr	r3, [r7, #20]
 8110080:	681b      	ldr	r3, [r3, #0]
 8110082:	4a3f      	ldr	r2, [pc, #252]	; (8110180 <UART_SetConfig+0x6a8>)
 8110084:	4293      	cmp	r3, r2
 8110086:	f040 80f8 	bne.w	811027a <UART_SetConfig+0x7a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 811008a:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 811008e:	2b20      	cmp	r3, #32
 8110090:	dc46      	bgt.n	8110120 <UART_SetConfig+0x648>
 8110092:	2b02      	cmp	r3, #2
 8110094:	f2c0 8082 	blt.w	811019c <UART_SetConfig+0x6c4>
 8110098:	3b02      	subs	r3, #2
 811009a:	2b1e      	cmp	r3, #30
 811009c:	d87e      	bhi.n	811019c <UART_SetConfig+0x6c4>
 811009e:	a201      	add	r2, pc, #4	; (adr r2, 81100a4 <UART_SetConfig+0x5cc>)
 81100a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 81100a4:	08110127 	.word	0x08110127
 81100a8:	0811019d 	.word	0x0811019d
 81100ac:	0811012f 	.word	0x0811012f
 81100b0:	0811019d 	.word	0x0811019d
 81100b4:	0811019d 	.word	0x0811019d
 81100b8:	0811019d 	.word	0x0811019d
 81100bc:	0811013f 	.word	0x0811013f
 81100c0:	0811019d 	.word	0x0811019d
 81100c4:	0811019d 	.word	0x0811019d
 81100c8:	0811019d 	.word	0x0811019d
 81100cc:	0811019d 	.word	0x0811019d
 81100d0:	0811019d 	.word	0x0811019d
 81100d4:	0811019d 	.word	0x0811019d
 81100d8:	0811019d 	.word	0x0811019d
 81100dc:	0811014f 	.word	0x0811014f
 81100e0:	0811019d 	.word	0x0811019d
 81100e4:	0811019d 	.word	0x0811019d
 81100e8:	0811019d 	.word	0x0811019d
 81100ec:	0811019d 	.word	0x0811019d
 81100f0:	0811019d 	.word	0x0811019d
 81100f4:	0811019d 	.word	0x0811019d
 81100f8:	0811019d 	.word	0x0811019d
 81100fc:	0811019d 	.word	0x0811019d
 8110100:	0811019d 	.word	0x0811019d
 8110104:	0811019d 	.word	0x0811019d
 8110108:	0811019d 	.word	0x0811019d
 811010c:	0811019d 	.word	0x0811019d
 8110110:	0811019d 	.word	0x0811019d
 8110114:	0811019d 	.word	0x0811019d
 8110118:	0811019d 	.word	0x0811019d
 811011c:	0811018f 	.word	0x0811018f
 8110120:	2b40      	cmp	r3, #64	; 0x40
 8110122:	d037      	beq.n	8110194 <UART_SetConfig+0x6bc>
 8110124:	e03a      	b.n	811019c <UART_SetConfig+0x6c4>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 8110126:	f7fc f815 	bl	810c154 <HAL_RCCEx_GetD3PCLK1Freq>
 811012a:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 811012c:	e03c      	b.n	81101a8 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 811012e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8110132:	4618      	mov	r0, r3
 8110134:	f7fc f824 	bl	810c180 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8110138:	6abb      	ldr	r3, [r7, #40]	; 0x28
 811013a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 811013c:	e034      	b.n	81101a8 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 811013e:	f107 0318 	add.w	r3, r7, #24
 8110142:	4618      	mov	r0, r3
 8110144:	f7fc f970 	bl	810c428 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8110148:	69fb      	ldr	r3, [r7, #28]
 811014a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 811014c:	e02c      	b.n	81101a8 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 811014e:	4b09      	ldr	r3, [pc, #36]	; (8110174 <UART_SetConfig+0x69c>)
 8110150:	681b      	ldr	r3, [r3, #0]
 8110152:	f003 0320 	and.w	r3, r3, #32
 8110156:	2b00      	cmp	r3, #0
 8110158:	d016      	beq.n	8110188 <UART_SetConfig+0x6b0>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 811015a:	4b06      	ldr	r3, [pc, #24]	; (8110174 <UART_SetConfig+0x69c>)
 811015c:	681b      	ldr	r3, [r3, #0]
 811015e:	08db      	lsrs	r3, r3, #3
 8110160:	f003 0303 	and.w	r3, r3, #3
 8110164:	4a07      	ldr	r2, [pc, #28]	; (8110184 <UART_SetConfig+0x6ac>)
 8110166:	fa22 f303 	lsr.w	r3, r2, r3
 811016a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 811016c:	e01c      	b.n	81101a8 <UART_SetConfig+0x6d0>
 811016e:	bf00      	nop
 8110170:	40011400 	.word	0x40011400
 8110174:	58024400 	.word	0x58024400
 8110178:	40007800 	.word	0x40007800
 811017c:	40007c00 	.word	0x40007c00
 8110180:	58000c00 	.word	0x58000c00
 8110184:	03d09000 	.word	0x03d09000
          pclk = (uint32_t) HSI_VALUE;
 8110188:	4b9d      	ldr	r3, [pc, #628]	; (8110400 <UART_SetConfig+0x928>)
 811018a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 811018c:	e00c      	b.n	81101a8 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 811018e:	4b9d      	ldr	r3, [pc, #628]	; (8110404 <UART_SetConfig+0x92c>)
 8110190:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8110192:	e009      	b.n	81101a8 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8110194:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8110198:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 811019a:	e005      	b.n	81101a8 <UART_SetConfig+0x6d0>
      default:
        pclk = 0U;
 811019c:	2300      	movs	r3, #0
 811019e:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 81101a0:	2301      	movs	r3, #1
 81101a2:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 81101a6:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 81101a8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 81101aa:	2b00      	cmp	r3, #0
 81101ac:	f000 81de 	beq.w	811056c <UART_SetConfig+0xa94>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 81101b0:	697b      	ldr	r3, [r7, #20]
 81101b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 81101b4:	4a94      	ldr	r2, [pc, #592]	; (8110408 <UART_SetConfig+0x930>)
 81101b6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 81101ba:	461a      	mov	r2, r3
 81101bc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 81101be:	fbb3 f3f2 	udiv	r3, r3, r2
 81101c2:	633b      	str	r3, [r7, #48]	; 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 81101c4:	697b      	ldr	r3, [r7, #20]
 81101c6:	685a      	ldr	r2, [r3, #4]
 81101c8:	4613      	mov	r3, r2
 81101ca:	005b      	lsls	r3, r3, #1
 81101cc:	4413      	add	r3, r2
 81101ce:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 81101d0:	429a      	cmp	r2, r3
 81101d2:	d305      	bcc.n	81101e0 <UART_SetConfig+0x708>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 81101d4:	697b      	ldr	r3, [r7, #20]
 81101d6:	685b      	ldr	r3, [r3, #4]
 81101d8:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 81101da:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 81101dc:	429a      	cmp	r2, r3
 81101de:	d903      	bls.n	81101e8 <UART_SetConfig+0x710>
      {
        ret = HAL_ERROR;
 81101e0:	2301      	movs	r3, #1
 81101e2:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 81101e6:	e1c1      	b.n	811056c <UART_SetConfig+0xa94>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 81101e8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 81101ea:	2200      	movs	r2, #0
 81101ec:	60bb      	str	r3, [r7, #8]
 81101ee:	60fa      	str	r2, [r7, #12]
 81101f0:	697b      	ldr	r3, [r7, #20]
 81101f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 81101f4:	4a84      	ldr	r2, [pc, #528]	; (8110408 <UART_SetConfig+0x930>)
 81101f6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 81101fa:	b29b      	uxth	r3, r3
 81101fc:	2200      	movs	r2, #0
 81101fe:	603b      	str	r3, [r7, #0]
 8110200:	607a      	str	r2, [r7, #4]
 8110202:	e9d7 2300 	ldrd	r2, r3, [r7]
 8110206:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 811020a:	f7f0 f86d 	bl	81002e8 <__aeabi_uldivmod>
 811020e:	4602      	mov	r2, r0
 8110210:	460b      	mov	r3, r1
 8110212:	4610      	mov	r0, r2
 8110214:	4619      	mov	r1, r3
 8110216:	f04f 0200 	mov.w	r2, #0
 811021a:	f04f 0300 	mov.w	r3, #0
 811021e:	020b      	lsls	r3, r1, #8
 8110220:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8110224:	0202      	lsls	r2, r0, #8
 8110226:	6979      	ldr	r1, [r7, #20]
 8110228:	6849      	ldr	r1, [r1, #4]
 811022a:	0849      	lsrs	r1, r1, #1
 811022c:	2000      	movs	r0, #0
 811022e:	460c      	mov	r4, r1
 8110230:	4605      	mov	r5, r0
 8110232:	eb12 0804 	adds.w	r8, r2, r4
 8110236:	eb43 0905 	adc.w	r9, r3, r5
 811023a:	697b      	ldr	r3, [r7, #20]
 811023c:	685b      	ldr	r3, [r3, #4]
 811023e:	2200      	movs	r2, #0
 8110240:	469a      	mov	sl, r3
 8110242:	4693      	mov	fp, r2
 8110244:	4652      	mov	r2, sl
 8110246:	465b      	mov	r3, fp
 8110248:	4640      	mov	r0, r8
 811024a:	4649      	mov	r1, r9
 811024c:	f7f0 f84c 	bl	81002e8 <__aeabi_uldivmod>
 8110250:	4602      	mov	r2, r0
 8110252:	460b      	mov	r3, r1
 8110254:	4613      	mov	r3, r2
 8110256:	63bb      	str	r3, [r7, #56]	; 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8110258:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 811025a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 811025e:	d308      	bcc.n	8110272 <UART_SetConfig+0x79a>
 8110260:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8110262:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8110266:	d204      	bcs.n	8110272 <UART_SetConfig+0x79a>
        {
          huart->Instance->BRR = usartdiv;
 8110268:	697b      	ldr	r3, [r7, #20]
 811026a:	681b      	ldr	r3, [r3, #0]
 811026c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 811026e:	60da      	str	r2, [r3, #12]
 8110270:	e17c      	b.n	811056c <UART_SetConfig+0xa94>
        }
        else
        {
          ret = HAL_ERROR;
 8110272:	2301      	movs	r3, #1
 8110274:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 8110278:	e178      	b.n	811056c <UART_SetConfig+0xa94>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 811027a:	697b      	ldr	r3, [r7, #20]
 811027c:	69db      	ldr	r3, [r3, #28]
 811027e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8110282:	f040 80c5 	bne.w	8110410 <UART_SetConfig+0x938>
  {
    switch (clocksource)
 8110286:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 811028a:	2b20      	cmp	r3, #32
 811028c:	dc48      	bgt.n	8110320 <UART_SetConfig+0x848>
 811028e:	2b00      	cmp	r3, #0
 8110290:	db7b      	blt.n	811038a <UART_SetConfig+0x8b2>
 8110292:	2b20      	cmp	r3, #32
 8110294:	d879      	bhi.n	811038a <UART_SetConfig+0x8b2>
 8110296:	a201      	add	r2, pc, #4	; (adr r2, 811029c <UART_SetConfig+0x7c4>)
 8110298:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 811029c:	08110327 	.word	0x08110327
 81102a0:	0811032f 	.word	0x0811032f
 81102a4:	0811038b 	.word	0x0811038b
 81102a8:	0811038b 	.word	0x0811038b
 81102ac:	08110337 	.word	0x08110337
 81102b0:	0811038b 	.word	0x0811038b
 81102b4:	0811038b 	.word	0x0811038b
 81102b8:	0811038b 	.word	0x0811038b
 81102bc:	08110347 	.word	0x08110347
 81102c0:	0811038b 	.word	0x0811038b
 81102c4:	0811038b 	.word	0x0811038b
 81102c8:	0811038b 	.word	0x0811038b
 81102cc:	0811038b 	.word	0x0811038b
 81102d0:	0811038b 	.word	0x0811038b
 81102d4:	0811038b 	.word	0x0811038b
 81102d8:	0811038b 	.word	0x0811038b
 81102dc:	08110357 	.word	0x08110357
 81102e0:	0811038b 	.word	0x0811038b
 81102e4:	0811038b 	.word	0x0811038b
 81102e8:	0811038b 	.word	0x0811038b
 81102ec:	0811038b 	.word	0x0811038b
 81102f0:	0811038b 	.word	0x0811038b
 81102f4:	0811038b 	.word	0x0811038b
 81102f8:	0811038b 	.word	0x0811038b
 81102fc:	0811038b 	.word	0x0811038b
 8110300:	0811038b 	.word	0x0811038b
 8110304:	0811038b 	.word	0x0811038b
 8110308:	0811038b 	.word	0x0811038b
 811030c:	0811038b 	.word	0x0811038b
 8110310:	0811038b 	.word	0x0811038b
 8110314:	0811038b 	.word	0x0811038b
 8110318:	0811038b 	.word	0x0811038b
 811031c:	0811037d 	.word	0x0811037d
 8110320:	2b40      	cmp	r3, #64	; 0x40
 8110322:	d02e      	beq.n	8110382 <UART_SetConfig+0x8aa>
 8110324:	e031      	b.n	811038a <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8110326:	f7f9 ff1f 	bl	810a168 <HAL_RCC_GetPCLK1Freq>
 811032a:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 811032c:	e033      	b.n	8110396 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 811032e:	f7f9 ff31 	bl	810a194 <HAL_RCC_GetPCLK2Freq>
 8110332:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8110334:	e02f      	b.n	8110396 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8110336:	f107 0324 	add.w	r3, r7, #36	; 0x24
 811033a:	4618      	mov	r0, r3
 811033c:	f7fb ff20 	bl	810c180 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8110340:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8110342:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8110344:	e027      	b.n	8110396 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8110346:	f107 0318 	add.w	r3, r7, #24
 811034a:	4618      	mov	r0, r3
 811034c:	f7fc f86c 	bl	810c428 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8110350:	69fb      	ldr	r3, [r7, #28]
 8110352:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8110354:	e01f      	b.n	8110396 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8110356:	4b2d      	ldr	r3, [pc, #180]	; (811040c <UART_SetConfig+0x934>)
 8110358:	681b      	ldr	r3, [r3, #0]
 811035a:	f003 0320 	and.w	r3, r3, #32
 811035e:	2b00      	cmp	r3, #0
 8110360:	d009      	beq.n	8110376 <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8110362:	4b2a      	ldr	r3, [pc, #168]	; (811040c <UART_SetConfig+0x934>)
 8110364:	681b      	ldr	r3, [r3, #0]
 8110366:	08db      	lsrs	r3, r3, #3
 8110368:	f003 0303 	and.w	r3, r3, #3
 811036c:	4a24      	ldr	r2, [pc, #144]	; (8110400 <UART_SetConfig+0x928>)
 811036e:	fa22 f303 	lsr.w	r3, r2, r3
 8110372:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8110374:	e00f      	b.n	8110396 <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 8110376:	4b22      	ldr	r3, [pc, #136]	; (8110400 <UART_SetConfig+0x928>)
 8110378:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 811037a:	e00c      	b.n	8110396 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 811037c:	4b21      	ldr	r3, [pc, #132]	; (8110404 <UART_SetConfig+0x92c>)
 811037e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8110380:	e009      	b.n	8110396 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8110382:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8110386:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8110388:	e005      	b.n	8110396 <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 811038a:	2300      	movs	r3, #0
 811038c:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 811038e:	2301      	movs	r3, #1
 8110390:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 8110394:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8110396:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8110398:	2b00      	cmp	r3, #0
 811039a:	f000 80e7 	beq.w	811056c <UART_SetConfig+0xa94>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 811039e:	697b      	ldr	r3, [r7, #20]
 81103a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 81103a2:	4a19      	ldr	r2, [pc, #100]	; (8110408 <UART_SetConfig+0x930>)
 81103a4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 81103a8:	461a      	mov	r2, r3
 81103aa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 81103ac:	fbb3 f3f2 	udiv	r3, r3, r2
 81103b0:	005a      	lsls	r2, r3, #1
 81103b2:	697b      	ldr	r3, [r7, #20]
 81103b4:	685b      	ldr	r3, [r3, #4]
 81103b6:	085b      	lsrs	r3, r3, #1
 81103b8:	441a      	add	r2, r3
 81103ba:	697b      	ldr	r3, [r7, #20]
 81103bc:	685b      	ldr	r3, [r3, #4]
 81103be:	fbb2 f3f3 	udiv	r3, r2, r3
 81103c2:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 81103c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 81103c6:	2b0f      	cmp	r3, #15
 81103c8:	d916      	bls.n	81103f8 <UART_SetConfig+0x920>
 81103ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 81103cc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 81103d0:	d212      	bcs.n	81103f8 <UART_SetConfig+0x920>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 81103d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 81103d4:	b29b      	uxth	r3, r3
 81103d6:	f023 030f 	bic.w	r3, r3, #15
 81103da:	86fb      	strh	r3, [r7, #54]	; 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 81103dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 81103de:	085b      	lsrs	r3, r3, #1
 81103e0:	b29b      	uxth	r3, r3
 81103e2:	f003 0307 	and.w	r3, r3, #7
 81103e6:	b29a      	uxth	r2, r3
 81103e8:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 81103ea:	4313      	orrs	r3, r2
 81103ec:	86fb      	strh	r3, [r7, #54]	; 0x36
        huart->Instance->BRR = brrtemp;
 81103ee:	697b      	ldr	r3, [r7, #20]
 81103f0:	681b      	ldr	r3, [r3, #0]
 81103f2:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 81103f4:	60da      	str	r2, [r3, #12]
 81103f6:	e0b9      	b.n	811056c <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 81103f8:	2301      	movs	r3, #1
 81103fa:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 81103fe:	e0b5      	b.n	811056c <UART_SetConfig+0xa94>
 8110400:	03d09000 	.word	0x03d09000
 8110404:	003d0900 	.word	0x003d0900
 8110408:	08111efc 	.word	0x08111efc
 811040c:	58024400 	.word	0x58024400
      }
    }
  }
  else
  {
    switch (clocksource)
 8110410:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8110414:	2b20      	cmp	r3, #32
 8110416:	dc49      	bgt.n	81104ac <UART_SetConfig+0x9d4>
 8110418:	2b00      	cmp	r3, #0
 811041a:	db7c      	blt.n	8110516 <UART_SetConfig+0xa3e>
 811041c:	2b20      	cmp	r3, #32
 811041e:	d87a      	bhi.n	8110516 <UART_SetConfig+0xa3e>
 8110420:	a201      	add	r2, pc, #4	; (adr r2, 8110428 <UART_SetConfig+0x950>)
 8110422:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8110426:	bf00      	nop
 8110428:	081104b3 	.word	0x081104b3
 811042c:	081104bb 	.word	0x081104bb
 8110430:	08110517 	.word	0x08110517
 8110434:	08110517 	.word	0x08110517
 8110438:	081104c3 	.word	0x081104c3
 811043c:	08110517 	.word	0x08110517
 8110440:	08110517 	.word	0x08110517
 8110444:	08110517 	.word	0x08110517
 8110448:	081104d3 	.word	0x081104d3
 811044c:	08110517 	.word	0x08110517
 8110450:	08110517 	.word	0x08110517
 8110454:	08110517 	.word	0x08110517
 8110458:	08110517 	.word	0x08110517
 811045c:	08110517 	.word	0x08110517
 8110460:	08110517 	.word	0x08110517
 8110464:	08110517 	.word	0x08110517
 8110468:	081104e3 	.word	0x081104e3
 811046c:	08110517 	.word	0x08110517
 8110470:	08110517 	.word	0x08110517
 8110474:	08110517 	.word	0x08110517
 8110478:	08110517 	.word	0x08110517
 811047c:	08110517 	.word	0x08110517
 8110480:	08110517 	.word	0x08110517
 8110484:	08110517 	.word	0x08110517
 8110488:	08110517 	.word	0x08110517
 811048c:	08110517 	.word	0x08110517
 8110490:	08110517 	.word	0x08110517
 8110494:	08110517 	.word	0x08110517
 8110498:	08110517 	.word	0x08110517
 811049c:	08110517 	.word	0x08110517
 81104a0:	08110517 	.word	0x08110517
 81104a4:	08110517 	.word	0x08110517
 81104a8:	08110509 	.word	0x08110509
 81104ac:	2b40      	cmp	r3, #64	; 0x40
 81104ae:	d02e      	beq.n	811050e <UART_SetConfig+0xa36>
 81104b0:	e031      	b.n	8110516 <UART_SetConfig+0xa3e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 81104b2:	f7f9 fe59 	bl	810a168 <HAL_RCC_GetPCLK1Freq>
 81104b6:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 81104b8:	e033      	b.n	8110522 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 81104ba:	f7f9 fe6b 	bl	810a194 <HAL_RCC_GetPCLK2Freq>
 81104be:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 81104c0:	e02f      	b.n	8110522 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 81104c2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 81104c6:	4618      	mov	r0, r3
 81104c8:	f7fb fe5a 	bl	810c180 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 81104cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 81104ce:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 81104d0:	e027      	b.n	8110522 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 81104d2:	f107 0318 	add.w	r3, r7, #24
 81104d6:	4618      	mov	r0, r3
 81104d8:	f7fb ffa6 	bl	810c428 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 81104dc:	69fb      	ldr	r3, [r7, #28]
 81104de:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 81104e0:	e01f      	b.n	8110522 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 81104e2:	4b2d      	ldr	r3, [pc, #180]	; (8110598 <UART_SetConfig+0xac0>)
 81104e4:	681b      	ldr	r3, [r3, #0]
 81104e6:	f003 0320 	and.w	r3, r3, #32
 81104ea:	2b00      	cmp	r3, #0
 81104ec:	d009      	beq.n	8110502 <UART_SetConfig+0xa2a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 81104ee:	4b2a      	ldr	r3, [pc, #168]	; (8110598 <UART_SetConfig+0xac0>)
 81104f0:	681b      	ldr	r3, [r3, #0]
 81104f2:	08db      	lsrs	r3, r3, #3
 81104f4:	f003 0303 	and.w	r3, r3, #3
 81104f8:	4a28      	ldr	r2, [pc, #160]	; (811059c <UART_SetConfig+0xac4>)
 81104fa:	fa22 f303 	lsr.w	r3, r2, r3
 81104fe:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8110500:	e00f      	b.n	8110522 <UART_SetConfig+0xa4a>
          pclk = (uint32_t) HSI_VALUE;
 8110502:	4b26      	ldr	r3, [pc, #152]	; (811059c <UART_SetConfig+0xac4>)
 8110504:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8110506:	e00c      	b.n	8110522 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8110508:	4b25      	ldr	r3, [pc, #148]	; (81105a0 <UART_SetConfig+0xac8>)
 811050a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 811050c:	e009      	b.n	8110522 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 811050e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8110512:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8110514:	e005      	b.n	8110522 <UART_SetConfig+0xa4a>
      default:
        pclk = 0U;
 8110516:	2300      	movs	r3, #0
 8110518:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 811051a:	2301      	movs	r3, #1
 811051c:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 8110520:	bf00      	nop
    }

    if (pclk != 0U)
 8110522:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8110524:	2b00      	cmp	r3, #0
 8110526:	d021      	beq.n	811056c <UART_SetConfig+0xa94>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8110528:	697b      	ldr	r3, [r7, #20]
 811052a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 811052c:	4a1d      	ldr	r2, [pc, #116]	; (81105a4 <UART_SetConfig+0xacc>)
 811052e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8110532:	461a      	mov	r2, r3
 8110534:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8110536:	fbb3 f2f2 	udiv	r2, r3, r2
 811053a:	697b      	ldr	r3, [r7, #20]
 811053c:	685b      	ldr	r3, [r3, #4]
 811053e:	085b      	lsrs	r3, r3, #1
 8110540:	441a      	add	r2, r3
 8110542:	697b      	ldr	r3, [r7, #20]
 8110544:	685b      	ldr	r3, [r3, #4]
 8110546:	fbb2 f3f3 	udiv	r3, r2, r3
 811054a:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 811054c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 811054e:	2b0f      	cmp	r3, #15
 8110550:	d909      	bls.n	8110566 <UART_SetConfig+0xa8e>
 8110552:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8110554:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8110558:	d205      	bcs.n	8110566 <UART_SetConfig+0xa8e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 811055a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 811055c:	b29a      	uxth	r2, r3
 811055e:	697b      	ldr	r3, [r7, #20]
 8110560:	681b      	ldr	r3, [r3, #0]
 8110562:	60da      	str	r2, [r3, #12]
 8110564:	e002      	b.n	811056c <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 8110566:	2301      	movs	r3, #1
 8110568:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 811056c:	697b      	ldr	r3, [r7, #20]
 811056e:	2201      	movs	r2, #1
 8110570:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8110574:	697b      	ldr	r3, [r7, #20]
 8110576:	2201      	movs	r2, #1
 8110578:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 811057c:	697b      	ldr	r3, [r7, #20]
 811057e:	2200      	movs	r2, #0
 8110580:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 8110582:	697b      	ldr	r3, [r7, #20]
 8110584:	2200      	movs	r2, #0
 8110586:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 8110588:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
}
 811058c:	4618      	mov	r0, r3
 811058e:	3748      	adds	r7, #72	; 0x48
 8110590:	46bd      	mov	sp, r7
 8110592:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8110596:	bf00      	nop
 8110598:	58024400 	.word	0x58024400
 811059c:	03d09000 	.word	0x03d09000
 81105a0:	003d0900 	.word	0x003d0900
 81105a4:	08111efc 	.word	0x08111efc

081105a8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 81105a8:	b480      	push	{r7}
 81105aa:	b083      	sub	sp, #12
 81105ac:	af00      	add	r7, sp, #0
 81105ae:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 81105b0:	687b      	ldr	r3, [r7, #4]
 81105b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 81105b4:	f003 0301 	and.w	r3, r3, #1
 81105b8:	2b00      	cmp	r3, #0
 81105ba:	d00a      	beq.n	81105d2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 81105bc:	687b      	ldr	r3, [r7, #4]
 81105be:	681b      	ldr	r3, [r3, #0]
 81105c0:	685b      	ldr	r3, [r3, #4]
 81105c2:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 81105c6:	687b      	ldr	r3, [r7, #4]
 81105c8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 81105ca:	687b      	ldr	r3, [r7, #4]
 81105cc:	681b      	ldr	r3, [r3, #0]
 81105ce:	430a      	orrs	r2, r1
 81105d0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 81105d2:	687b      	ldr	r3, [r7, #4]
 81105d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 81105d6:	f003 0302 	and.w	r3, r3, #2
 81105da:	2b00      	cmp	r3, #0
 81105dc:	d00a      	beq.n	81105f4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 81105de:	687b      	ldr	r3, [r7, #4]
 81105e0:	681b      	ldr	r3, [r3, #0]
 81105e2:	685b      	ldr	r3, [r3, #4]
 81105e4:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 81105e8:	687b      	ldr	r3, [r7, #4]
 81105ea:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 81105ec:	687b      	ldr	r3, [r7, #4]
 81105ee:	681b      	ldr	r3, [r3, #0]
 81105f0:	430a      	orrs	r2, r1
 81105f2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 81105f4:	687b      	ldr	r3, [r7, #4]
 81105f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 81105f8:	f003 0304 	and.w	r3, r3, #4
 81105fc:	2b00      	cmp	r3, #0
 81105fe:	d00a      	beq.n	8110616 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8110600:	687b      	ldr	r3, [r7, #4]
 8110602:	681b      	ldr	r3, [r3, #0]
 8110604:	685b      	ldr	r3, [r3, #4]
 8110606:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 811060a:	687b      	ldr	r3, [r7, #4]
 811060c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 811060e:	687b      	ldr	r3, [r7, #4]
 8110610:	681b      	ldr	r3, [r3, #0]
 8110612:	430a      	orrs	r2, r1
 8110614:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8110616:	687b      	ldr	r3, [r7, #4]
 8110618:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 811061a:	f003 0308 	and.w	r3, r3, #8
 811061e:	2b00      	cmp	r3, #0
 8110620:	d00a      	beq.n	8110638 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8110622:	687b      	ldr	r3, [r7, #4]
 8110624:	681b      	ldr	r3, [r3, #0]
 8110626:	685b      	ldr	r3, [r3, #4]
 8110628:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 811062c:	687b      	ldr	r3, [r7, #4]
 811062e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8110630:	687b      	ldr	r3, [r7, #4]
 8110632:	681b      	ldr	r3, [r3, #0]
 8110634:	430a      	orrs	r2, r1
 8110636:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8110638:	687b      	ldr	r3, [r7, #4]
 811063a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 811063c:	f003 0310 	and.w	r3, r3, #16
 8110640:	2b00      	cmp	r3, #0
 8110642:	d00a      	beq.n	811065a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8110644:	687b      	ldr	r3, [r7, #4]
 8110646:	681b      	ldr	r3, [r3, #0]
 8110648:	689b      	ldr	r3, [r3, #8]
 811064a:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 811064e:	687b      	ldr	r3, [r7, #4]
 8110650:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8110652:	687b      	ldr	r3, [r7, #4]
 8110654:	681b      	ldr	r3, [r3, #0]
 8110656:	430a      	orrs	r2, r1
 8110658:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 811065a:	687b      	ldr	r3, [r7, #4]
 811065c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 811065e:	f003 0320 	and.w	r3, r3, #32
 8110662:	2b00      	cmp	r3, #0
 8110664:	d00a      	beq.n	811067c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8110666:	687b      	ldr	r3, [r7, #4]
 8110668:	681b      	ldr	r3, [r3, #0]
 811066a:	689b      	ldr	r3, [r3, #8]
 811066c:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8110670:	687b      	ldr	r3, [r7, #4]
 8110672:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8110674:	687b      	ldr	r3, [r7, #4]
 8110676:	681b      	ldr	r3, [r3, #0]
 8110678:	430a      	orrs	r2, r1
 811067a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 811067c:	687b      	ldr	r3, [r7, #4]
 811067e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8110680:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8110684:	2b00      	cmp	r3, #0
 8110686:	d01a      	beq.n	81106be <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8110688:	687b      	ldr	r3, [r7, #4]
 811068a:	681b      	ldr	r3, [r3, #0]
 811068c:	685b      	ldr	r3, [r3, #4]
 811068e:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8110692:	687b      	ldr	r3, [r7, #4]
 8110694:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8110696:	687b      	ldr	r3, [r7, #4]
 8110698:	681b      	ldr	r3, [r3, #0]
 811069a:	430a      	orrs	r2, r1
 811069c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 811069e:	687b      	ldr	r3, [r7, #4]
 81106a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 81106a2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 81106a6:	d10a      	bne.n	81106be <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 81106a8:	687b      	ldr	r3, [r7, #4]
 81106aa:	681b      	ldr	r3, [r3, #0]
 81106ac:	685b      	ldr	r3, [r3, #4]
 81106ae:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 81106b2:	687b      	ldr	r3, [r7, #4]
 81106b4:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 81106b6:	687b      	ldr	r3, [r7, #4]
 81106b8:	681b      	ldr	r3, [r3, #0]
 81106ba:	430a      	orrs	r2, r1
 81106bc:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 81106be:	687b      	ldr	r3, [r7, #4]
 81106c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 81106c2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 81106c6:	2b00      	cmp	r3, #0
 81106c8:	d00a      	beq.n	81106e0 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 81106ca:	687b      	ldr	r3, [r7, #4]
 81106cc:	681b      	ldr	r3, [r3, #0]
 81106ce:	685b      	ldr	r3, [r3, #4]
 81106d0:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 81106d4:	687b      	ldr	r3, [r7, #4]
 81106d6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 81106d8:	687b      	ldr	r3, [r7, #4]
 81106da:	681b      	ldr	r3, [r3, #0]
 81106dc:	430a      	orrs	r2, r1
 81106de:	605a      	str	r2, [r3, #4]
  }
}
 81106e0:	bf00      	nop
 81106e2:	370c      	adds	r7, #12
 81106e4:	46bd      	mov	sp, r7
 81106e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 81106ea:	4770      	bx	lr

081106ec <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 81106ec:	b580      	push	{r7, lr}
 81106ee:	b098      	sub	sp, #96	; 0x60
 81106f0:	af02      	add	r7, sp, #8
 81106f2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 81106f4:	687b      	ldr	r3, [r7, #4]
 81106f6:	2200      	movs	r2, #0
 81106f8:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 81106fc:	f7f6 ff8e 	bl	810761c <HAL_GetTick>
 8110700:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8110702:	687b      	ldr	r3, [r7, #4]
 8110704:	681b      	ldr	r3, [r3, #0]
 8110706:	681b      	ldr	r3, [r3, #0]
 8110708:	f003 0308 	and.w	r3, r3, #8
 811070c:	2b08      	cmp	r3, #8
 811070e:	d12f      	bne.n	8110770 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8110710:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8110714:	9300      	str	r3, [sp, #0]
 8110716:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8110718:	2200      	movs	r2, #0
 811071a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 811071e:	6878      	ldr	r0, [r7, #4]
 8110720:	f000 f88e 	bl	8110840 <UART_WaitOnFlagUntilTimeout>
 8110724:	4603      	mov	r3, r0
 8110726:	2b00      	cmp	r3, #0
 8110728:	d022      	beq.n	8110770 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 811072a:	687b      	ldr	r3, [r7, #4]
 811072c:	681b      	ldr	r3, [r3, #0]
 811072e:	63bb      	str	r3, [r7, #56]	; 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8110730:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8110732:	e853 3f00 	ldrex	r3, [r3]
 8110736:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8110738:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 811073a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 811073e:	653b      	str	r3, [r7, #80]	; 0x50
 8110740:	687b      	ldr	r3, [r7, #4]
 8110742:	681b      	ldr	r3, [r3, #0]
 8110744:	461a      	mov	r2, r3
 8110746:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8110748:	647b      	str	r3, [r7, #68]	; 0x44
 811074a:	643a      	str	r2, [r7, #64]	; 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 811074c:	6c39      	ldr	r1, [r7, #64]	; 0x40
 811074e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8110750:	e841 2300 	strex	r3, r2, [r1]
 8110754:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8110756:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8110758:	2b00      	cmp	r3, #0
 811075a:	d1e6      	bne.n	811072a <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 811075c:	687b      	ldr	r3, [r7, #4]
 811075e:	2220      	movs	r2, #32
 8110760:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      __HAL_UNLOCK(huart);
 8110764:	687b      	ldr	r3, [r7, #4]
 8110766:	2200      	movs	r2, #0
 8110768:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 811076c:	2303      	movs	r3, #3
 811076e:	e063      	b.n	8110838 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8110770:	687b      	ldr	r3, [r7, #4]
 8110772:	681b      	ldr	r3, [r3, #0]
 8110774:	681b      	ldr	r3, [r3, #0]
 8110776:	f003 0304 	and.w	r3, r3, #4
 811077a:	2b04      	cmp	r3, #4
 811077c:	d149      	bne.n	8110812 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 811077e:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8110782:	9300      	str	r3, [sp, #0]
 8110784:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8110786:	2200      	movs	r2, #0
 8110788:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 811078c:	6878      	ldr	r0, [r7, #4]
 811078e:	f000 f857 	bl	8110840 <UART_WaitOnFlagUntilTimeout>
 8110792:	4603      	mov	r3, r0
 8110794:	2b00      	cmp	r3, #0
 8110796:	d03c      	beq.n	8110812 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8110798:	687b      	ldr	r3, [r7, #4]
 811079a:	681b      	ldr	r3, [r3, #0]
 811079c:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 811079e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 81107a0:	e853 3f00 	ldrex	r3, [r3]
 81107a4:	623b      	str	r3, [r7, #32]
   return(result);
 81107a6:	6a3b      	ldr	r3, [r7, #32]
 81107a8:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 81107ac:	64fb      	str	r3, [r7, #76]	; 0x4c
 81107ae:	687b      	ldr	r3, [r7, #4]
 81107b0:	681b      	ldr	r3, [r3, #0]
 81107b2:	461a      	mov	r2, r3
 81107b4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 81107b6:	633b      	str	r3, [r7, #48]	; 0x30
 81107b8:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 81107ba:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 81107bc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 81107be:	e841 2300 	strex	r3, r2, [r1]
 81107c2:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 81107c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 81107c6:	2b00      	cmp	r3, #0
 81107c8:	d1e6      	bne.n	8110798 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 81107ca:	687b      	ldr	r3, [r7, #4]
 81107cc:	681b      	ldr	r3, [r3, #0]
 81107ce:	3308      	adds	r3, #8
 81107d0:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 81107d2:	693b      	ldr	r3, [r7, #16]
 81107d4:	e853 3f00 	ldrex	r3, [r3]
 81107d8:	60fb      	str	r3, [r7, #12]
   return(result);
 81107da:	68fb      	ldr	r3, [r7, #12]
 81107dc:	f023 0301 	bic.w	r3, r3, #1
 81107e0:	64bb      	str	r3, [r7, #72]	; 0x48
 81107e2:	687b      	ldr	r3, [r7, #4]
 81107e4:	681b      	ldr	r3, [r3, #0]
 81107e6:	3308      	adds	r3, #8
 81107e8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 81107ea:	61fa      	str	r2, [r7, #28]
 81107ec:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 81107ee:	69b9      	ldr	r1, [r7, #24]
 81107f0:	69fa      	ldr	r2, [r7, #28]
 81107f2:	e841 2300 	strex	r3, r2, [r1]
 81107f6:	617b      	str	r3, [r7, #20]
   return(result);
 81107f8:	697b      	ldr	r3, [r7, #20]
 81107fa:	2b00      	cmp	r3, #0
 81107fc:	d1e5      	bne.n	81107ca <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 81107fe:	687b      	ldr	r3, [r7, #4]
 8110800:	2220      	movs	r2, #32
 8110802:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 8110806:	687b      	ldr	r3, [r7, #4]
 8110808:	2200      	movs	r2, #0
 811080a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 811080e:	2303      	movs	r3, #3
 8110810:	e012      	b.n	8110838 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8110812:	687b      	ldr	r3, [r7, #4]
 8110814:	2220      	movs	r2, #32
 8110816:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 811081a:	687b      	ldr	r3, [r7, #4]
 811081c:	2220      	movs	r2, #32
 811081e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8110822:	687b      	ldr	r3, [r7, #4]
 8110824:	2200      	movs	r2, #0
 8110826:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8110828:	687b      	ldr	r3, [r7, #4]
 811082a:	2200      	movs	r2, #0
 811082c:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 811082e:	687b      	ldr	r3, [r7, #4]
 8110830:	2200      	movs	r2, #0
 8110832:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8110836:	2300      	movs	r3, #0
}
 8110838:	4618      	mov	r0, r3
 811083a:	3758      	adds	r7, #88	; 0x58
 811083c:	46bd      	mov	sp, r7
 811083e:	bd80      	pop	{r7, pc}

08110840 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8110840:	b580      	push	{r7, lr}
 8110842:	b084      	sub	sp, #16
 8110844:	af00      	add	r7, sp, #0
 8110846:	60f8      	str	r0, [r7, #12]
 8110848:	60b9      	str	r1, [r7, #8]
 811084a:	603b      	str	r3, [r7, #0]
 811084c:	4613      	mov	r3, r2
 811084e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8110850:	e049      	b.n	81108e6 <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8110852:	69bb      	ldr	r3, [r7, #24]
 8110854:	f1b3 3fff 	cmp.w	r3, #4294967295
 8110858:	d045      	beq.n	81108e6 <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 811085a:	f7f6 fedf 	bl	810761c <HAL_GetTick>
 811085e:	4602      	mov	r2, r0
 8110860:	683b      	ldr	r3, [r7, #0]
 8110862:	1ad3      	subs	r3, r2, r3
 8110864:	69ba      	ldr	r2, [r7, #24]
 8110866:	429a      	cmp	r2, r3
 8110868:	d302      	bcc.n	8110870 <UART_WaitOnFlagUntilTimeout+0x30>
 811086a:	69bb      	ldr	r3, [r7, #24]
 811086c:	2b00      	cmp	r3, #0
 811086e:	d101      	bne.n	8110874 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8110870:	2303      	movs	r3, #3
 8110872:	e048      	b.n	8110906 <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8110874:	68fb      	ldr	r3, [r7, #12]
 8110876:	681b      	ldr	r3, [r3, #0]
 8110878:	681b      	ldr	r3, [r3, #0]
 811087a:	f003 0304 	and.w	r3, r3, #4
 811087e:	2b00      	cmp	r3, #0
 8110880:	d031      	beq.n	81108e6 <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8110882:	68fb      	ldr	r3, [r7, #12]
 8110884:	681b      	ldr	r3, [r3, #0]
 8110886:	69db      	ldr	r3, [r3, #28]
 8110888:	f003 0308 	and.w	r3, r3, #8
 811088c:	2b08      	cmp	r3, #8
 811088e:	d110      	bne.n	81108b2 <UART_WaitOnFlagUntilTimeout+0x72>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8110890:	68fb      	ldr	r3, [r7, #12]
 8110892:	681b      	ldr	r3, [r3, #0]
 8110894:	2208      	movs	r2, #8
 8110896:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 8110898:	68f8      	ldr	r0, [r7, #12]
 811089a:	f000 f838 	bl	811090e <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 811089e:	68fb      	ldr	r3, [r7, #12]
 81108a0:	2208      	movs	r2, #8
 81108a2:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 81108a6:	68fb      	ldr	r3, [r7, #12]
 81108a8:	2200      	movs	r2, #0
 81108aa:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

           return HAL_ERROR;
 81108ae:	2301      	movs	r3, #1
 81108b0:	e029      	b.n	8110906 <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 81108b2:	68fb      	ldr	r3, [r7, #12]
 81108b4:	681b      	ldr	r3, [r3, #0]
 81108b6:	69db      	ldr	r3, [r3, #28]
 81108b8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 81108bc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 81108c0:	d111      	bne.n	81108e6 <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 81108c2:	68fb      	ldr	r3, [r7, #12]
 81108c4:	681b      	ldr	r3, [r3, #0]
 81108c6:	f44f 6200 	mov.w	r2, #2048	; 0x800
 81108ca:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 81108cc:	68f8      	ldr	r0, [r7, #12]
 81108ce:	f000 f81e 	bl	811090e <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 81108d2:	68fb      	ldr	r3, [r7, #12]
 81108d4:	2220      	movs	r2, #32
 81108d6:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 81108da:	68fb      	ldr	r3, [r7, #12]
 81108dc:	2200      	movs	r2, #0
 81108de:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 81108e2:	2303      	movs	r3, #3
 81108e4:	e00f      	b.n	8110906 <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 81108e6:	68fb      	ldr	r3, [r7, #12]
 81108e8:	681b      	ldr	r3, [r3, #0]
 81108ea:	69da      	ldr	r2, [r3, #28]
 81108ec:	68bb      	ldr	r3, [r7, #8]
 81108ee:	4013      	ands	r3, r2
 81108f0:	68ba      	ldr	r2, [r7, #8]
 81108f2:	429a      	cmp	r2, r3
 81108f4:	bf0c      	ite	eq
 81108f6:	2301      	moveq	r3, #1
 81108f8:	2300      	movne	r3, #0
 81108fa:	b2db      	uxtb	r3, r3
 81108fc:	461a      	mov	r2, r3
 81108fe:	79fb      	ldrb	r3, [r7, #7]
 8110900:	429a      	cmp	r2, r3
 8110902:	d0a6      	beq.n	8110852 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8110904:	2300      	movs	r3, #0
}
 8110906:	4618      	mov	r0, r3
 8110908:	3710      	adds	r7, #16
 811090a:	46bd      	mov	sp, r7
 811090c:	bd80      	pop	{r7, pc}

0811090e <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 811090e:	b480      	push	{r7}
 8110910:	b095      	sub	sp, #84	; 0x54
 8110912:	af00      	add	r7, sp, #0
 8110914:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8110916:	687b      	ldr	r3, [r7, #4]
 8110918:	681b      	ldr	r3, [r3, #0]
 811091a:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 811091c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 811091e:	e853 3f00 	ldrex	r3, [r3]
 8110922:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8110924:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8110926:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 811092a:	64fb      	str	r3, [r7, #76]	; 0x4c
 811092c:	687b      	ldr	r3, [r7, #4]
 811092e:	681b      	ldr	r3, [r3, #0]
 8110930:	461a      	mov	r2, r3
 8110932:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8110934:	643b      	str	r3, [r7, #64]	; 0x40
 8110936:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8110938:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 811093a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 811093c:	e841 2300 	strex	r3, r2, [r1]
 8110940:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8110942:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8110944:	2b00      	cmp	r3, #0
 8110946:	d1e6      	bne.n	8110916 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8110948:	687b      	ldr	r3, [r7, #4]
 811094a:	681b      	ldr	r3, [r3, #0]
 811094c:	3308      	adds	r3, #8
 811094e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8110950:	6a3b      	ldr	r3, [r7, #32]
 8110952:	e853 3f00 	ldrex	r3, [r3]
 8110956:	61fb      	str	r3, [r7, #28]
   return(result);
 8110958:	69fb      	ldr	r3, [r7, #28]
 811095a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 811095e:	f023 0301 	bic.w	r3, r3, #1
 8110962:	64bb      	str	r3, [r7, #72]	; 0x48
 8110964:	687b      	ldr	r3, [r7, #4]
 8110966:	681b      	ldr	r3, [r3, #0]
 8110968:	3308      	adds	r3, #8
 811096a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 811096c:	62fa      	str	r2, [r7, #44]	; 0x2c
 811096e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8110970:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8110972:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8110974:	e841 2300 	strex	r3, r2, [r1]
 8110978:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 811097a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 811097c:	2b00      	cmp	r3, #0
 811097e:	d1e3      	bne.n	8110948 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8110980:	687b      	ldr	r3, [r7, #4]
 8110982:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8110984:	2b01      	cmp	r3, #1
 8110986:	d118      	bne.n	81109ba <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8110988:	687b      	ldr	r3, [r7, #4]
 811098a:	681b      	ldr	r3, [r3, #0]
 811098c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 811098e:	68fb      	ldr	r3, [r7, #12]
 8110990:	e853 3f00 	ldrex	r3, [r3]
 8110994:	60bb      	str	r3, [r7, #8]
   return(result);
 8110996:	68bb      	ldr	r3, [r7, #8]
 8110998:	f023 0310 	bic.w	r3, r3, #16
 811099c:	647b      	str	r3, [r7, #68]	; 0x44
 811099e:	687b      	ldr	r3, [r7, #4]
 81109a0:	681b      	ldr	r3, [r3, #0]
 81109a2:	461a      	mov	r2, r3
 81109a4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 81109a6:	61bb      	str	r3, [r7, #24]
 81109a8:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 81109aa:	6979      	ldr	r1, [r7, #20]
 81109ac:	69ba      	ldr	r2, [r7, #24]
 81109ae:	e841 2300 	strex	r3, r2, [r1]
 81109b2:	613b      	str	r3, [r7, #16]
   return(result);
 81109b4:	693b      	ldr	r3, [r7, #16]
 81109b6:	2b00      	cmp	r3, #0
 81109b8:	d1e6      	bne.n	8110988 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 81109ba:	687b      	ldr	r3, [r7, #4]
 81109bc:	2220      	movs	r2, #32
 81109be:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 81109c2:	687b      	ldr	r3, [r7, #4]
 81109c4:	2200      	movs	r2, #0
 81109c6:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 81109c8:	687b      	ldr	r3, [r7, #4]
 81109ca:	2200      	movs	r2, #0
 81109cc:	675a      	str	r2, [r3, #116]	; 0x74
}
 81109ce:	bf00      	nop
 81109d0:	3754      	adds	r7, #84	; 0x54
 81109d2:	46bd      	mov	sp, r7
 81109d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 81109d8:	4770      	bx	lr

081109da <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 81109da:	b480      	push	{r7}
 81109dc:	b085      	sub	sp, #20
 81109de:	af00      	add	r7, sp, #0
 81109e0:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 81109e2:	687b      	ldr	r3, [r7, #4]
 81109e4:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 81109e8:	2b01      	cmp	r3, #1
 81109ea:	d101      	bne.n	81109f0 <HAL_UARTEx_DisableFifoMode+0x16>
 81109ec:	2302      	movs	r3, #2
 81109ee:	e027      	b.n	8110a40 <HAL_UARTEx_DisableFifoMode+0x66>
 81109f0:	687b      	ldr	r3, [r7, #4]
 81109f2:	2201      	movs	r2, #1
 81109f4:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 81109f8:	687b      	ldr	r3, [r7, #4]
 81109fa:	2224      	movs	r2, #36	; 0x24
 81109fc:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8110a00:	687b      	ldr	r3, [r7, #4]
 8110a02:	681b      	ldr	r3, [r3, #0]
 8110a04:	681b      	ldr	r3, [r3, #0]
 8110a06:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8110a08:	687b      	ldr	r3, [r7, #4]
 8110a0a:	681b      	ldr	r3, [r3, #0]
 8110a0c:	681a      	ldr	r2, [r3, #0]
 8110a0e:	687b      	ldr	r3, [r7, #4]
 8110a10:	681b      	ldr	r3, [r3, #0]
 8110a12:	f022 0201 	bic.w	r2, r2, #1
 8110a16:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8110a18:	68fb      	ldr	r3, [r7, #12]
 8110a1a:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8110a1e:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8110a20:	687b      	ldr	r3, [r7, #4]
 8110a22:	2200      	movs	r2, #0
 8110a24:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8110a26:	687b      	ldr	r3, [r7, #4]
 8110a28:	681b      	ldr	r3, [r3, #0]
 8110a2a:	68fa      	ldr	r2, [r7, #12]
 8110a2c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8110a2e:	687b      	ldr	r3, [r7, #4]
 8110a30:	2220      	movs	r2, #32
 8110a32:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8110a36:	687b      	ldr	r3, [r7, #4]
 8110a38:	2200      	movs	r2, #0
 8110a3a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8110a3e:	2300      	movs	r3, #0
}
 8110a40:	4618      	mov	r0, r3
 8110a42:	3714      	adds	r7, #20
 8110a44:	46bd      	mov	sp, r7
 8110a46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8110a4a:	4770      	bx	lr

08110a4c <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8110a4c:	b580      	push	{r7, lr}
 8110a4e:	b084      	sub	sp, #16
 8110a50:	af00      	add	r7, sp, #0
 8110a52:	6078      	str	r0, [r7, #4]
 8110a54:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8110a56:	687b      	ldr	r3, [r7, #4]
 8110a58:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8110a5c:	2b01      	cmp	r3, #1
 8110a5e:	d101      	bne.n	8110a64 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8110a60:	2302      	movs	r3, #2
 8110a62:	e02d      	b.n	8110ac0 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8110a64:	687b      	ldr	r3, [r7, #4]
 8110a66:	2201      	movs	r2, #1
 8110a68:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8110a6c:	687b      	ldr	r3, [r7, #4]
 8110a6e:	2224      	movs	r2, #36	; 0x24
 8110a70:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8110a74:	687b      	ldr	r3, [r7, #4]
 8110a76:	681b      	ldr	r3, [r3, #0]
 8110a78:	681b      	ldr	r3, [r3, #0]
 8110a7a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8110a7c:	687b      	ldr	r3, [r7, #4]
 8110a7e:	681b      	ldr	r3, [r3, #0]
 8110a80:	681a      	ldr	r2, [r3, #0]
 8110a82:	687b      	ldr	r3, [r7, #4]
 8110a84:	681b      	ldr	r3, [r3, #0]
 8110a86:	f022 0201 	bic.w	r2, r2, #1
 8110a8a:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8110a8c:	687b      	ldr	r3, [r7, #4]
 8110a8e:	681b      	ldr	r3, [r3, #0]
 8110a90:	689b      	ldr	r3, [r3, #8]
 8110a92:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8110a96:	687b      	ldr	r3, [r7, #4]
 8110a98:	681b      	ldr	r3, [r3, #0]
 8110a9a:	683a      	ldr	r2, [r7, #0]
 8110a9c:	430a      	orrs	r2, r1
 8110a9e:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8110aa0:	6878      	ldr	r0, [r7, #4]
 8110aa2:	f000 f84f 	bl	8110b44 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8110aa6:	687b      	ldr	r3, [r7, #4]
 8110aa8:	681b      	ldr	r3, [r3, #0]
 8110aaa:	68fa      	ldr	r2, [r7, #12]
 8110aac:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8110aae:	687b      	ldr	r3, [r7, #4]
 8110ab0:	2220      	movs	r2, #32
 8110ab2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8110ab6:	687b      	ldr	r3, [r7, #4]
 8110ab8:	2200      	movs	r2, #0
 8110aba:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8110abe:	2300      	movs	r3, #0
}
 8110ac0:	4618      	mov	r0, r3
 8110ac2:	3710      	adds	r7, #16
 8110ac4:	46bd      	mov	sp, r7
 8110ac6:	bd80      	pop	{r7, pc}

08110ac8 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8110ac8:	b580      	push	{r7, lr}
 8110aca:	b084      	sub	sp, #16
 8110acc:	af00      	add	r7, sp, #0
 8110ace:	6078      	str	r0, [r7, #4]
 8110ad0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8110ad2:	687b      	ldr	r3, [r7, #4]
 8110ad4:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8110ad8:	2b01      	cmp	r3, #1
 8110ada:	d101      	bne.n	8110ae0 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8110adc:	2302      	movs	r3, #2
 8110ade:	e02d      	b.n	8110b3c <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8110ae0:	687b      	ldr	r3, [r7, #4]
 8110ae2:	2201      	movs	r2, #1
 8110ae4:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8110ae8:	687b      	ldr	r3, [r7, #4]
 8110aea:	2224      	movs	r2, #36	; 0x24
 8110aec:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8110af0:	687b      	ldr	r3, [r7, #4]
 8110af2:	681b      	ldr	r3, [r3, #0]
 8110af4:	681b      	ldr	r3, [r3, #0]
 8110af6:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8110af8:	687b      	ldr	r3, [r7, #4]
 8110afa:	681b      	ldr	r3, [r3, #0]
 8110afc:	681a      	ldr	r2, [r3, #0]
 8110afe:	687b      	ldr	r3, [r7, #4]
 8110b00:	681b      	ldr	r3, [r3, #0]
 8110b02:	f022 0201 	bic.w	r2, r2, #1
 8110b06:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8110b08:	687b      	ldr	r3, [r7, #4]
 8110b0a:	681b      	ldr	r3, [r3, #0]
 8110b0c:	689b      	ldr	r3, [r3, #8]
 8110b0e:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8110b12:	687b      	ldr	r3, [r7, #4]
 8110b14:	681b      	ldr	r3, [r3, #0]
 8110b16:	683a      	ldr	r2, [r7, #0]
 8110b18:	430a      	orrs	r2, r1
 8110b1a:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8110b1c:	6878      	ldr	r0, [r7, #4]
 8110b1e:	f000 f811 	bl	8110b44 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8110b22:	687b      	ldr	r3, [r7, #4]
 8110b24:	681b      	ldr	r3, [r3, #0]
 8110b26:	68fa      	ldr	r2, [r7, #12]
 8110b28:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8110b2a:	687b      	ldr	r3, [r7, #4]
 8110b2c:	2220      	movs	r2, #32
 8110b2e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8110b32:	687b      	ldr	r3, [r7, #4]
 8110b34:	2200      	movs	r2, #0
 8110b36:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8110b3a:	2300      	movs	r3, #0
}
 8110b3c:	4618      	mov	r0, r3
 8110b3e:	3710      	adds	r7, #16
 8110b40:	46bd      	mov	sp, r7
 8110b42:	bd80      	pop	{r7, pc}

08110b44 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8110b44:	b480      	push	{r7}
 8110b46:	b085      	sub	sp, #20
 8110b48:	af00      	add	r7, sp, #0
 8110b4a:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8110b4c:	687b      	ldr	r3, [r7, #4]
 8110b4e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8110b50:	2b00      	cmp	r3, #0
 8110b52:	d108      	bne.n	8110b66 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8110b54:	687b      	ldr	r3, [r7, #4]
 8110b56:	2201      	movs	r2, #1
 8110b58:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8110b5c:	687b      	ldr	r3, [r7, #4]
 8110b5e:	2201      	movs	r2, #1
 8110b60:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8110b64:	e031      	b.n	8110bca <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8110b66:	2310      	movs	r3, #16
 8110b68:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8110b6a:	2310      	movs	r3, #16
 8110b6c:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8110b6e:	687b      	ldr	r3, [r7, #4]
 8110b70:	681b      	ldr	r3, [r3, #0]
 8110b72:	689b      	ldr	r3, [r3, #8]
 8110b74:	0e5b      	lsrs	r3, r3, #25
 8110b76:	b2db      	uxtb	r3, r3
 8110b78:	f003 0307 	and.w	r3, r3, #7
 8110b7c:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8110b7e:	687b      	ldr	r3, [r7, #4]
 8110b80:	681b      	ldr	r3, [r3, #0]
 8110b82:	689b      	ldr	r3, [r3, #8]
 8110b84:	0f5b      	lsrs	r3, r3, #29
 8110b86:	b2db      	uxtb	r3, r3
 8110b88:	f003 0307 	and.w	r3, r3, #7
 8110b8c:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8110b8e:	7bbb      	ldrb	r3, [r7, #14]
 8110b90:	7b3a      	ldrb	r2, [r7, #12]
 8110b92:	4911      	ldr	r1, [pc, #68]	; (8110bd8 <UARTEx_SetNbDataToProcess+0x94>)
 8110b94:	5c8a      	ldrb	r2, [r1, r2]
 8110b96:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8110b9a:	7b3a      	ldrb	r2, [r7, #12]
 8110b9c:	490f      	ldr	r1, [pc, #60]	; (8110bdc <UARTEx_SetNbDataToProcess+0x98>)
 8110b9e:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8110ba0:	fb93 f3f2 	sdiv	r3, r3, r2
 8110ba4:	b29a      	uxth	r2, r3
 8110ba6:	687b      	ldr	r3, [r7, #4]
 8110ba8:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8110bac:	7bfb      	ldrb	r3, [r7, #15]
 8110bae:	7b7a      	ldrb	r2, [r7, #13]
 8110bb0:	4909      	ldr	r1, [pc, #36]	; (8110bd8 <UARTEx_SetNbDataToProcess+0x94>)
 8110bb2:	5c8a      	ldrb	r2, [r1, r2]
 8110bb4:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8110bb8:	7b7a      	ldrb	r2, [r7, #13]
 8110bba:	4908      	ldr	r1, [pc, #32]	; (8110bdc <UARTEx_SetNbDataToProcess+0x98>)
 8110bbc:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8110bbe:	fb93 f3f2 	sdiv	r3, r3, r2
 8110bc2:	b29a      	uxth	r2, r3
 8110bc4:	687b      	ldr	r3, [r7, #4]
 8110bc6:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8110bca:	bf00      	nop
 8110bcc:	3714      	adds	r7, #20
 8110bce:	46bd      	mov	sp, r7
 8110bd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8110bd4:	4770      	bx	lr
 8110bd6:	bf00      	nop
 8110bd8:	08111f14 	.word	0x08111f14
 8110bdc:	08111f1c 	.word	0x08111f1c

08110be0 <FMC_SDRAM_Init>:
  * @param  Device Pointer to SDRAM device instance
  * @param  Init Pointer to SDRAM Initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_InitTypeDef *Init)
{
 8110be0:	b480      	push	{r7}
 8110be2:	b083      	sub	sp, #12
 8110be4:	af00      	add	r7, sp, #0
 8110be6:	6078      	str	r0, [r7, #4]
 8110be8:	6039      	str	r1, [r7, #0]
  assert_param(IS_FMC_SDCLOCK_PERIOD(Init->SDClockPeriod));
  assert_param(IS_FMC_READ_BURST(Init->ReadBurst));
  assert_param(IS_FMC_READPIPE_DELAY(Init->ReadPipeDelay));

  /* Set SDRAM bank configuration parameters */
  if (Init->SDBank == FMC_SDRAM_BANK1)
 8110bea:	683b      	ldr	r3, [r7, #0]
 8110bec:	681b      	ldr	r3, [r3, #0]
 8110bee:	2b00      	cmp	r3, #0
 8110bf0:	d123      	bne.n	8110c3a <FMC_SDRAM_Init+0x5a>
  {
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 8110bf2:	687b      	ldr	r3, [r7, #4]
 8110bf4:	681b      	ldr	r3, [r3, #0]
 8110bf6:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8110bfa:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8110bfe:	683a      	ldr	r2, [r7, #0]
 8110c00:	6851      	ldr	r1, [r2, #4]
 8110c02:	683a      	ldr	r2, [r7, #0]
 8110c04:	6892      	ldr	r2, [r2, #8]
 8110c06:	4311      	orrs	r1, r2
 8110c08:	683a      	ldr	r2, [r7, #0]
 8110c0a:	68d2      	ldr	r2, [r2, #12]
 8110c0c:	4311      	orrs	r1, r2
 8110c0e:	683a      	ldr	r2, [r7, #0]
 8110c10:	6912      	ldr	r2, [r2, #16]
 8110c12:	4311      	orrs	r1, r2
 8110c14:	683a      	ldr	r2, [r7, #0]
 8110c16:	6952      	ldr	r2, [r2, #20]
 8110c18:	4311      	orrs	r1, r2
 8110c1a:	683a      	ldr	r2, [r7, #0]
 8110c1c:	6992      	ldr	r2, [r2, #24]
 8110c1e:	4311      	orrs	r1, r2
 8110c20:	683a      	ldr	r2, [r7, #0]
 8110c22:	69d2      	ldr	r2, [r2, #28]
 8110c24:	4311      	orrs	r1, r2
 8110c26:	683a      	ldr	r2, [r7, #0]
 8110c28:	6a12      	ldr	r2, [r2, #32]
 8110c2a:	4311      	orrs	r1, r2
 8110c2c:	683a      	ldr	r2, [r7, #0]
 8110c2e:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8110c30:	430a      	orrs	r2, r1
 8110c32:	431a      	orrs	r2, r3
 8110c34:	687b      	ldr	r3, [r7, #4]
 8110c36:	601a      	str	r2, [r3, #0]
 8110c38:	e028      	b.n	8110c8c <FMC_SDRAM_Init+0xac>
                Init->ReadBurst          |
                Init->ReadPipeDelay));
  }
  else /* FMC_Bank2_SDRAM */
  {
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 8110c3a:	687b      	ldr	r3, [r7, #4]
 8110c3c:	681b      	ldr	r3, [r3, #0]
 8110c3e:	f423 42f8 	bic.w	r2, r3, #31744	; 0x7c00
 8110c42:	683b      	ldr	r3, [r7, #0]
 8110c44:	69d9      	ldr	r1, [r3, #28]
 8110c46:	683b      	ldr	r3, [r7, #0]
 8110c48:	6a1b      	ldr	r3, [r3, #32]
 8110c4a:	4319      	orrs	r1, r3
 8110c4c:	683b      	ldr	r3, [r7, #0]
 8110c4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8110c50:	430b      	orrs	r3, r1
 8110c52:	431a      	orrs	r2, r3
 8110c54:	687b      	ldr	r3, [r7, #4]
 8110c56:	601a      	str	r2, [r3, #0]
               FMC_SDCRx_RPIPE,
               (Init->SDClockPeriod      |
                Init->ReadBurst          |
                Init->ReadPipeDelay));

    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK2],
 8110c58:	687b      	ldr	r3, [r7, #4]
 8110c5a:	685b      	ldr	r3, [r3, #4]
 8110c5c:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8110c60:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8110c64:	683a      	ldr	r2, [r7, #0]
 8110c66:	6851      	ldr	r1, [r2, #4]
 8110c68:	683a      	ldr	r2, [r7, #0]
 8110c6a:	6892      	ldr	r2, [r2, #8]
 8110c6c:	4311      	orrs	r1, r2
 8110c6e:	683a      	ldr	r2, [r7, #0]
 8110c70:	68d2      	ldr	r2, [r2, #12]
 8110c72:	4311      	orrs	r1, r2
 8110c74:	683a      	ldr	r2, [r7, #0]
 8110c76:	6912      	ldr	r2, [r2, #16]
 8110c78:	4311      	orrs	r1, r2
 8110c7a:	683a      	ldr	r2, [r7, #0]
 8110c7c:	6952      	ldr	r2, [r2, #20]
 8110c7e:	4311      	orrs	r1, r2
 8110c80:	683a      	ldr	r2, [r7, #0]
 8110c82:	6992      	ldr	r2, [r2, #24]
 8110c84:	430a      	orrs	r2, r1
 8110c86:	431a      	orrs	r2, r3
 8110c88:	687b      	ldr	r3, [r7, #4]
 8110c8a:	605a      	str	r2, [r3, #4]
                Init->InternalBankNumber |
                Init->CASLatency         |
                Init->WriteProtection));
  }

  return HAL_OK;
 8110c8c:	2300      	movs	r3, #0
}
 8110c8e:	4618      	mov	r0, r3
 8110c90:	370c      	adds	r7, #12
 8110c92:	46bd      	mov	sp, r7
 8110c94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8110c98:	4770      	bx	lr

08110c9a <FMC_SDRAM_Timing_Init>:
  * @param  Bank SDRAM bank number
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Timing_Init(FMC_SDRAM_TypeDef *Device,
                                        FMC_SDRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 8110c9a:	b480      	push	{r7}
 8110c9c:	b085      	sub	sp, #20
 8110c9e:	af00      	add	r7, sp, #0
 8110ca0:	60f8      	str	r0, [r7, #12]
 8110ca2:	60b9      	str	r1, [r7, #8]
 8110ca4:	607a      	str	r2, [r7, #4]
  assert_param(IS_FMC_RP_DELAY(Timing->RPDelay));
  assert_param(IS_FMC_RCD_DELAY(Timing->RCDDelay));
  assert_param(IS_FMC_SDRAM_BANK(Bank));

  /* Set SDRAM device timing parameters */
  if (Bank == FMC_SDRAM_BANK1)
 8110ca6:	687b      	ldr	r3, [r7, #4]
 8110ca8:	2b00      	cmp	r3, #0
 8110caa:	d128      	bne.n	8110cfe <FMC_SDRAM_Timing_Init+0x64>
  {
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 8110cac:	68fb      	ldr	r3, [r7, #12]
 8110cae:	689b      	ldr	r3, [r3, #8]
 8110cb0:	f003 4270 	and.w	r2, r3, #4026531840	; 0xf0000000
 8110cb4:	68bb      	ldr	r3, [r7, #8]
 8110cb6:	681b      	ldr	r3, [r3, #0]
 8110cb8:	1e59      	subs	r1, r3, #1
 8110cba:	68bb      	ldr	r3, [r7, #8]
 8110cbc:	685b      	ldr	r3, [r3, #4]
 8110cbe:	3b01      	subs	r3, #1
 8110cc0:	011b      	lsls	r3, r3, #4
 8110cc2:	4319      	orrs	r1, r3
 8110cc4:	68bb      	ldr	r3, [r7, #8]
 8110cc6:	689b      	ldr	r3, [r3, #8]
 8110cc8:	3b01      	subs	r3, #1
 8110cca:	021b      	lsls	r3, r3, #8
 8110ccc:	4319      	orrs	r1, r3
 8110cce:	68bb      	ldr	r3, [r7, #8]
 8110cd0:	68db      	ldr	r3, [r3, #12]
 8110cd2:	3b01      	subs	r3, #1
 8110cd4:	031b      	lsls	r3, r3, #12
 8110cd6:	4319      	orrs	r1, r3
 8110cd8:	68bb      	ldr	r3, [r7, #8]
 8110cda:	691b      	ldr	r3, [r3, #16]
 8110cdc:	3b01      	subs	r3, #1
 8110cde:	041b      	lsls	r3, r3, #16
 8110ce0:	4319      	orrs	r1, r3
 8110ce2:	68bb      	ldr	r3, [r7, #8]
 8110ce4:	695b      	ldr	r3, [r3, #20]
 8110ce6:	3b01      	subs	r3, #1
 8110ce8:	051b      	lsls	r3, r3, #20
 8110cea:	4319      	orrs	r1, r3
 8110cec:	68bb      	ldr	r3, [r7, #8]
 8110cee:	699b      	ldr	r3, [r3, #24]
 8110cf0:	3b01      	subs	r3, #1
 8110cf2:	061b      	lsls	r3, r3, #24
 8110cf4:	430b      	orrs	r3, r1
 8110cf6:	431a      	orrs	r2, r3
 8110cf8:	68fb      	ldr	r3, [r7, #12]
 8110cfa:	609a      	str	r2, [r3, #8]
 8110cfc:	e02f      	b.n	8110d5e <FMC_SDRAM_Timing_Init+0xc4>
                (((Timing->RPDelay) - 1U)              << FMC_SDTRx_TRP_Pos)  |
                (((Timing->RCDDelay) - 1U)             << FMC_SDTRx_TRCD_Pos)));
  }
  else /* FMC_Bank2_SDRAM */
  {
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 8110cfe:	68fb      	ldr	r3, [r7, #12]
 8110d00:	689b      	ldr	r3, [r3, #8]
 8110d02:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8110d06:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8110d0a:	68ba      	ldr	r2, [r7, #8]
 8110d0c:	68d2      	ldr	r2, [r2, #12]
 8110d0e:	3a01      	subs	r2, #1
 8110d10:	0311      	lsls	r1, r2, #12
 8110d12:	68ba      	ldr	r2, [r7, #8]
 8110d14:	6952      	ldr	r2, [r2, #20]
 8110d16:	3a01      	subs	r2, #1
 8110d18:	0512      	lsls	r2, r2, #20
 8110d1a:	430a      	orrs	r2, r1
 8110d1c:	431a      	orrs	r2, r3
 8110d1e:	68fb      	ldr	r3, [r7, #12]
 8110d20:	609a      	str	r2, [r3, #8]
               FMC_SDTRx_TRC |
               FMC_SDTRx_TRP,
               (((Timing->RowCycleDelay) - 1U)         << FMC_SDTRx_TRC_Pos)  |
               (((Timing->RPDelay) - 1U)               << FMC_SDTRx_TRP_Pos));

    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK2],
 8110d22:	68fb      	ldr	r3, [r7, #12]
 8110d24:	68db      	ldr	r3, [r3, #12]
 8110d26:	f003 4270 	and.w	r2, r3, #4026531840	; 0xf0000000
 8110d2a:	68bb      	ldr	r3, [r7, #8]
 8110d2c:	681b      	ldr	r3, [r3, #0]
 8110d2e:	1e59      	subs	r1, r3, #1
 8110d30:	68bb      	ldr	r3, [r7, #8]
 8110d32:	685b      	ldr	r3, [r3, #4]
 8110d34:	3b01      	subs	r3, #1
 8110d36:	011b      	lsls	r3, r3, #4
 8110d38:	4319      	orrs	r1, r3
 8110d3a:	68bb      	ldr	r3, [r7, #8]
 8110d3c:	689b      	ldr	r3, [r3, #8]
 8110d3e:	3b01      	subs	r3, #1
 8110d40:	021b      	lsls	r3, r3, #8
 8110d42:	4319      	orrs	r1, r3
 8110d44:	68bb      	ldr	r3, [r7, #8]
 8110d46:	691b      	ldr	r3, [r3, #16]
 8110d48:	3b01      	subs	r3, #1
 8110d4a:	041b      	lsls	r3, r3, #16
 8110d4c:	4319      	orrs	r1, r3
 8110d4e:	68bb      	ldr	r3, [r7, #8]
 8110d50:	699b      	ldr	r3, [r3, #24]
 8110d52:	3b01      	subs	r3, #1
 8110d54:	061b      	lsls	r3, r3, #24
 8110d56:	430b      	orrs	r3, r1
 8110d58:	431a      	orrs	r2, r3
 8110d5a:	68fb      	ldr	r3, [r7, #12]
 8110d5c:	60da      	str	r2, [r3, #12]
                (((Timing->SelfRefreshTime) - 1U)      << FMC_SDTRx_TRAS_Pos) |
                (((Timing->WriteRecoveryTime) - 1U)    << FMC_SDTRx_TWR_Pos)  |
                (((Timing->RCDDelay) - 1U)             << FMC_SDTRx_TRCD_Pos)));
  }

  return HAL_OK;
 8110d5e:	2300      	movs	r3, #0
}
 8110d60:	4618      	mov	r0, r3
 8110d62:	3714      	adds	r7, #20
 8110d64:	46bd      	mov	sp, r7
 8110d66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8110d6a:	4770      	bx	lr

08110d6c <SDMMC_Init>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Init: SDMMC initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_Init(SDMMC_TypeDef *SDMMCx, SDMMC_InitTypeDef Init)
{
 8110d6c:	b084      	sub	sp, #16
 8110d6e:	b480      	push	{r7}
 8110d70:	b085      	sub	sp, #20
 8110d72:	af00      	add	r7, sp, #0
 8110d74:	6078      	str	r0, [r7, #4]
 8110d76:	f107 001c 	add.w	r0, r7, #28
 8110d7a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 8110d7e:	2300      	movs	r3, #0
 8110d80:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(Init.ClockDiv));

  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           | \
 8110d82:	69fa      	ldr	r2, [r7, #28]
             Init.ClockPowerSave      | \
 8110d84:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           | \
 8110d86:	431a      	orrs	r2, r3
             Init.BusWide             | \
 8110d88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
             Init.ClockPowerSave      | \
 8110d8a:	431a      	orrs	r2, r3
             Init.HardwareFlowControl | \
 8110d8c:	6abb      	ldr	r3, [r7, #40]	; 0x28
             Init.BusWide             | \
 8110d8e:	431a      	orrs	r2, r3
             Init.ClockDiv
 8110d90:	6afb      	ldr	r3, [r7, #44]	; 0x2c
             Init.HardwareFlowControl | \
 8110d92:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           | \
 8110d94:	68fa      	ldr	r2, [r7, #12]
 8110d96:	4313      	orrs	r3, r2
 8110d98:	60fb      	str	r3, [r7, #12]
            );

  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDMMCx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);
 8110d9a:	687b      	ldr	r3, [r7, #4]
 8110d9c:	685a      	ldr	r2, [r3, #4]
 8110d9e:	4b07      	ldr	r3, [pc, #28]	; (8110dbc <SDMMC_Init+0x50>)
 8110da0:	4013      	ands	r3, r2
 8110da2:	68fa      	ldr	r2, [r7, #12]
 8110da4:	431a      	orrs	r2, r3
 8110da6:	687b      	ldr	r3, [r7, #4]
 8110da8:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 8110daa:	2300      	movs	r3, #0
}
 8110dac:	4618      	mov	r0, r3
 8110dae:	3714      	adds	r7, #20
 8110db0:	46bd      	mov	sp, r7
 8110db2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8110db6:	b004      	add	sp, #16
 8110db8:	4770      	bx	lr
 8110dba:	bf00      	nop
 8110dbc:	ffc02c00 	.word	0xffc02c00

08110dc0 <SDMMC_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling)
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_ReadFIFO(SDMMC_TypeDef *SDMMCx)
{
 8110dc0:	b480      	push	{r7}
 8110dc2:	b083      	sub	sp, #12
 8110dc4:	af00      	add	r7, sp, #0
 8110dc6:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */
  return (SDMMCx->FIFO);
 8110dc8:	687b      	ldr	r3, [r7, #4]
 8110dca:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
}
 8110dce:	4618      	mov	r0, r3
 8110dd0:	370c      	adds	r7, #12
 8110dd2:	46bd      	mov	sp, r7
 8110dd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8110dd8:	4770      	bx	lr

08110dda <SDMMC_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_PowerState_ON(SDMMC_TypeDef *SDMMCx)
{
 8110dda:	b480      	push	{r7}
 8110ddc:	b083      	sub	sp, #12
 8110dde:	af00      	add	r7, sp, #0
 8110de0:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */
  SDMMCx->POWER |= SDMMC_POWER_PWRCTRL;
 8110de2:	687b      	ldr	r3, [r7, #4]
 8110de4:	681b      	ldr	r3, [r3, #0]
 8110de6:	f043 0203 	orr.w	r2, r3, #3
 8110dea:	687b      	ldr	r3, [r7, #4]
 8110dec:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 8110dee:	2300      	movs	r3, #0
}
 8110df0:	4618      	mov	r0, r3
 8110df2:	370c      	adds	r7, #12
 8110df4:	46bd      	mov	sp, r7
 8110df6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8110dfa:	4770      	bx	lr

08110dfc <SDMMC_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON
  */
uint32_t SDMMC_GetPowerState(SDMMC_TypeDef *SDMMCx)
{
 8110dfc:	b480      	push	{r7}
 8110dfe:	b083      	sub	sp, #12
 8110e00:	af00      	add	r7, sp, #0
 8110e02:	6078      	str	r0, [r7, #4]
  return (SDMMCx->POWER & SDMMC_POWER_PWRCTRL);
 8110e04:	687b      	ldr	r3, [r7, #4]
 8110e06:	681b      	ldr	r3, [r3, #0]
 8110e08:	f003 0303 	and.w	r3, r3, #3
}
 8110e0c:	4618      	mov	r0, r3
 8110e0e:	370c      	adds	r7, #12
 8110e10:	46bd      	mov	sp, r7
 8110e12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8110e16:	4770      	bx	lr

08110e18 <SDMMC_SendCommand>:
  * @param  Command: pointer to a SDMMC_CmdInitTypeDef structure that contains
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_SendCommand(SDMMC_TypeDef *SDMMCx, SDMMC_CmdInitTypeDef *Command)
{
 8110e18:	b480      	push	{r7}
 8110e1a:	b085      	sub	sp, #20
 8110e1c:	af00      	add	r7, sp, #0
 8110e1e:	6078      	str	r0, [r7, #4]
 8110e20:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 8110e22:	2300      	movs	r3, #0
 8110e24:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_RESPONSE(Command->Response));
  assert_param(IS_SDMMC_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDMMC_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDMMCx->ARG = Command->Argument;
 8110e26:	683b      	ldr	r3, [r7, #0]
 8110e28:	681a      	ldr	r2, [r3, #0]
 8110e2a:	687b      	ldr	r3, [r7, #4]
 8110e2c:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         | \
 8110e2e:	683b      	ldr	r3, [r7, #0]
 8110e30:	685a      	ldr	r2, [r3, #4]
                       Command->Response         | \
 8110e32:	683b      	ldr	r3, [r7, #0]
 8110e34:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         | \
 8110e36:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt | \
 8110e38:	683b      	ldr	r3, [r7, #0]
 8110e3a:	68db      	ldr	r3, [r3, #12]
                       Command->Response         | \
 8110e3c:	431a      	orrs	r2, r3
                       Command->CPSM);
 8110e3e:	683b      	ldr	r3, [r7, #0]
 8110e40:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt | \
 8110e42:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         | \
 8110e44:	68fa      	ldr	r2, [r7, #12]
 8110e46:	4313      	orrs	r3, r2
 8110e48:	60fb      	str	r3, [r7, #12]

  /* Write to SDMMC CMD register */
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 8110e4a:	687b      	ldr	r3, [r7, #4]
 8110e4c:	68da      	ldr	r2, [r3, #12]
 8110e4e:	4b06      	ldr	r3, [pc, #24]	; (8110e68 <SDMMC_SendCommand+0x50>)
 8110e50:	4013      	ands	r3, r2
 8110e52:	68fa      	ldr	r2, [r7, #12]
 8110e54:	431a      	orrs	r2, r3
 8110e56:	687b      	ldr	r3, [r7, #4]
 8110e58:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8110e5a:	2300      	movs	r3, #0
}
 8110e5c:	4618      	mov	r0, r3
 8110e5e:	3714      	adds	r7, #20
 8110e60:	46bd      	mov	sp, r7
 8110e62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8110e66:	4770      	bx	lr
 8110e68:	fffee0c0 	.word	0xfffee0c0

08110e6c <SDMMC_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDMMC_GetCommandResponse(SDMMC_TypeDef *SDMMCx)
{
 8110e6c:	b480      	push	{r7}
 8110e6e:	b083      	sub	sp, #12
 8110e70:	af00      	add	r7, sp, #0
 8110e72:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDMMCx->RESPCMD);
 8110e74:	687b      	ldr	r3, [r7, #4]
 8110e76:	691b      	ldr	r3, [r3, #16]
 8110e78:	b2db      	uxtb	r3, r3
}
 8110e7a:	4618      	mov	r0, r3
 8110e7c:	370c      	adds	r7, #12
 8110e7e:	46bd      	mov	sp, r7
 8110e80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8110e84:	4770      	bx	lr

08110e86 <SDMMC_GetResponse>:
  *            @arg SDMMC_RESP3: Response Register 3
  *            @arg SDMMC_RESP4: Response Register 4
  * @retval The Corresponding response register value
  */
uint32_t SDMMC_GetResponse(SDMMC_TypeDef *SDMMCx, uint32_t Response)
{
 8110e86:	b480      	push	{r7}
 8110e88:	b085      	sub	sp, #20
 8110e8a:	af00      	add	r7, sp, #0
 8110e8c:	6078      	str	r0, [r7, #4]
 8110e8e:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDMMC_RESP(Response));

  /* Get the response */
  tmp = (uint32_t)(&(SDMMCx->RESP1)) + Response;
 8110e90:	687b      	ldr	r3, [r7, #4]
 8110e92:	3314      	adds	r3, #20
 8110e94:	461a      	mov	r2, r3
 8110e96:	683b      	ldr	r3, [r7, #0]
 8110e98:	4413      	add	r3, r2
 8110e9a:	60fb      	str	r3, [r7, #12]

  return (*(__IO uint32_t *) tmp);
 8110e9c:	68fb      	ldr	r3, [r7, #12]
 8110e9e:	681b      	ldr	r3, [r3, #0]
}
 8110ea0:	4618      	mov	r0, r3
 8110ea2:	3714      	adds	r7, #20
 8110ea4:	46bd      	mov	sp, r7
 8110ea6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8110eaa:	4770      	bx	lr

08110eac <SDMMC_ConfigData>:
  * @param  Data : pointer to a SDMMC_DataInitTypeDef structure
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_ConfigData(SDMMC_TypeDef *SDMMCx, SDMMC_DataInitTypeDef *Data)
{
 8110eac:	b480      	push	{r7}
 8110eae:	b085      	sub	sp, #20
 8110eb0:	af00      	add	r7, sp, #0
 8110eb2:	6078      	str	r0, [r7, #4]
 8110eb4:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 8110eb6:	2300      	movs	r3, #0
 8110eb8:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDMMC_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDMMC_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDMMCx->DTIMER = Data->DataTimeOut;
 8110eba:	683b      	ldr	r3, [r7, #0]
 8110ebc:	681a      	ldr	r2, [r3, #0]
 8110ebe:	687b      	ldr	r3, [r7, #4]
 8110ec0:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set the SDMMC DataLength value */
  SDMMCx->DLEN = Data->DataLength;
 8110ec2:	683b      	ldr	r3, [r7, #0]
 8110ec4:	685a      	ldr	r2, [r3, #4]
 8110ec6:	687b      	ldr	r3, [r7, #4]
 8110ec8:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize | \
 8110eca:	683b      	ldr	r3, [r7, #0]
 8110ecc:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   | \
 8110ece:	683b      	ldr	r3, [r7, #0]
 8110ed0:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize | \
 8110ed2:	431a      	orrs	r2, r3
                       Data->TransferMode  | \
 8110ed4:	683b      	ldr	r3, [r7, #0]
 8110ed6:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   | \
 8110ed8:	431a      	orrs	r2, r3
                       Data->DPSM);
 8110eda:	683b      	ldr	r3, [r7, #0]
 8110edc:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  | \
 8110ede:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize | \
 8110ee0:	68fa      	ldr	r2, [r7, #12]
 8110ee2:	4313      	orrs	r3, r2
 8110ee4:	60fb      	str	r3, [r7, #12]

  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDMMCx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 8110ee6:	687b      	ldr	r3, [r7, #4]
 8110ee8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8110eea:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8110eee:	68fb      	ldr	r3, [r7, #12]
 8110ef0:	431a      	orrs	r2, r3
 8110ef2:	687b      	ldr	r3, [r7, #4]
 8110ef4:	62da      	str	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 8110ef6:	2300      	movs	r3, #0

}
 8110ef8:	4618      	mov	r0, r3
 8110efa:	3714      	adds	r7, #20
 8110efc:	46bd      	mov	sp, r7
 8110efe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8110f02:	4770      	bx	lr

08110f04 <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Length command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDMMC_TypeDef *SDMMCx, uint32_t BlockSize)
{
 8110f04:	b580      	push	{r7, lr}
 8110f06:	b088      	sub	sp, #32
 8110f08:	af00      	add	r7, sp, #0
 8110f0a:	6078      	str	r0, [r7, #4]
 8110f0c:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 8110f0e:	683b      	ldr	r3, [r7, #0]
 8110f10:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 8110f12:	2310      	movs	r3, #16
 8110f14:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8110f16:	f44f 7380 	mov.w	r3, #256	; 0x100
 8110f1a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8110f1c:	2300      	movs	r3, #0
 8110f1e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8110f20:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8110f24:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8110f26:	f107 0308 	add.w	r3, r7, #8
 8110f2a:	4619      	mov	r1, r3
 8110f2c:	6878      	ldr	r0, [r7, #4]
 8110f2e:	f7ff ff73 	bl	8110e18 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SET_BLOCKLEN, SDMMC_CMDTIMEOUT);
 8110f32:	f241 3288 	movw	r2, #5000	; 0x1388
 8110f36:	2110      	movs	r1, #16
 8110f38:	6878      	ldr	r0, [r7, #4]
 8110f3a:	f000 f995 	bl	8111268 <SDMMC_GetCmdResp1>
 8110f3e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8110f40:	69fb      	ldr	r3, [r7, #28]
}
 8110f42:	4618      	mov	r0, r3
 8110f44:	3720      	adds	r7, #32
 8110f46:	46bd      	mov	sp, r7
 8110f48:	bd80      	pop	{r7, pc}

08110f4a <SDMMC_CmdSelDesel>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  addr: Address of the card to be selected
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDMMC_TypeDef *SDMMCx, uint32_t Addr)
{
 8110f4a:	b580      	push	{r7, lr}
 8110f4c:	b088      	sub	sp, #32
 8110f4e:	af00      	add	r7, sp, #0
 8110f50:	6078      	str	r0, [r7, #4]
 8110f52:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 8110f54:	683b      	ldr	r3, [r7, #0]
 8110f56:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 8110f58:	2307      	movs	r3, #7
 8110f5a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8110f5c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8110f60:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8110f62:	2300      	movs	r3, #0
 8110f64:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8110f66:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8110f6a:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8110f6c:	f107 0308 	add.w	r3, r7, #8
 8110f70:	4619      	mov	r1, r3
 8110f72:	6878      	ldr	r0, [r7, #4]
 8110f74:	f7ff ff50 	bl	8110e18 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEL_DESEL_CARD, SDMMC_CMDTIMEOUT);
 8110f78:	f241 3288 	movw	r2, #5000	; 0x1388
 8110f7c:	2107      	movs	r1, #7
 8110f7e:	6878      	ldr	r0, [r7, #4]
 8110f80:	f000 f972 	bl	8111268 <SDMMC_GetCmdResp1>
 8110f84:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8110f86:	69fb      	ldr	r3, [r7, #28]
}
 8110f88:	4618      	mov	r0, r3
 8110f8a:	3720      	adds	r7, #32
 8110f8c:	46bd      	mov	sp, r7
 8110f8e:	bd80      	pop	{r7, pc}

08110f90 <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDMMC_TypeDef *SDMMCx)
{
 8110f90:	b580      	push	{r7, lr}
 8110f92:	b088      	sub	sp, #32
 8110f94:	af00      	add	r7, sp, #0
 8110f96:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = 0U;
 8110f98:	2300      	movs	r3, #0
 8110f9a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 8110f9c:	2300      	movs	r3, #0
 8110f9e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_NO;
 8110fa0:	2300      	movs	r3, #0
 8110fa2:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8110fa4:	2300      	movs	r3, #0
 8110fa6:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8110fa8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8110fac:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8110fae:	f107 0308 	add.w	r3, r7, #8
 8110fb2:	4619      	mov	r1, r3
 8110fb4:	6878      	ldr	r0, [r7, #4]
 8110fb6:	f7ff ff2f 	bl	8110e18 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDMMCx);
 8110fba:	6878      	ldr	r0, [r7, #4]
 8110fbc:	f000 fb96 	bl	81116ec <SDMMC_GetCmdError>
 8110fc0:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8110fc2:	69fb      	ldr	r3, [r7, #28]
}
 8110fc4:	4618      	mov	r0, r3
 8110fc6:	3720      	adds	r7, #32
 8110fc8:	46bd      	mov	sp, r7
 8110fca:	bd80      	pop	{r7, pc}

08110fcc <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDMMC_TypeDef *SDMMCx)
{
 8110fcc:	b580      	push	{r7, lr}
 8110fce:	b088      	sub	sp, #32
 8110fd0:	af00      	add	r7, sp, #0
 8110fd2:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 8110fd4:	f44f 73d5 	mov.w	r3, #426	; 0x1aa
 8110fd8:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 8110fda:	2308      	movs	r3, #8
 8110fdc:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8110fde:	f44f 7380 	mov.w	r3, #256	; 0x100
 8110fe2:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8110fe4:	2300      	movs	r3, #0
 8110fe6:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8110fe8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8110fec:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8110fee:	f107 0308 	add.w	r3, r7, #8
 8110ff2:	4619      	mov	r1, r3
 8110ff4:	6878      	ldr	r0, [r7, #4]
 8110ff6:	f7ff ff0f 	bl	8110e18 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDMMCx);
 8110ffa:	6878      	ldr	r0, [r7, #4]
 8110ffc:	f000 fb28 	bl	8111650 <SDMMC_GetCmdResp7>
 8111000:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8111002:	69fb      	ldr	r3, [r7, #28]
}
 8111004:	4618      	mov	r0, r3
 8111006:	3720      	adds	r7, #32
 8111008:	46bd      	mov	sp, r7
 811100a:	bd80      	pop	{r7, pc}

0811100c <SDMMC_CmdAppCommand>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 811100c:	b580      	push	{r7, lr}
 811100e:	b088      	sub	sp, #32
 8111010:	af00      	add	r7, sp, #0
 8111012:	6078      	str	r0, [r7, #4]
 8111014:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 8111016:	683b      	ldr	r3, [r7, #0]
 8111018:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 811101a:	2337      	movs	r3, #55	; 0x37
 811101c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 811101e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8111022:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8111024:	2300      	movs	r3, #0
 8111026:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8111028:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 811102c:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 811102e:	f107 0308 	add.w	r3, r7, #8
 8111032:	4619      	mov	r1, r3
 8111034:	6878      	ldr	r0, [r7, #4]
 8111036:	f7ff feef 	bl	8110e18 <SDMMC_SendCommand>

  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_CMD, SDMMC_CMDTIMEOUT);
 811103a:	f241 3288 	movw	r2, #5000	; 0x1388
 811103e:	2137      	movs	r1, #55	; 0x37
 8111040:	6878      	ldr	r0, [r7, #4]
 8111042:	f000 f911 	bl	8111268 <SDMMC_GetCmdResp1>
 8111046:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8111048:	69fb      	ldr	r3, [r7, #28]
}
 811104a:	4618      	mov	r0, r3
 811104c:	3720      	adds	r7, #32
 811104e:	46bd      	mov	sp, r7
 8111050:	bd80      	pop	{r7, pc}

08111052 <SDMMC_CmdAppOperCommand>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 8111052:	b580      	push	{r7, lr}
 8111054:	b088      	sub	sp, #32
 8111056:	af00      	add	r7, sp, #0
 8111058:	6078      	str	r0, [r7, #4]
 811105a:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = Argument;
 811105c:	683b      	ldr	r3, [r7, #0]
 811105e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 8111060:	2329      	movs	r3, #41	; 0x29
 8111062:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8111064:	f44f 7380 	mov.w	r3, #256	; 0x100
 8111068:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 811106a:	2300      	movs	r3, #0
 811106c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 811106e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8111072:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8111074:	f107 0308 	add.w	r3, r7, #8
 8111078:	4619      	mov	r1, r3
 811107a:	6878      	ldr	r0, [r7, #4]
 811107c:	f7ff fecc 	bl	8110e18 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDMMCx);
 8111080:	6878      	ldr	r0, [r7, #4]
 8111082:	f000 fa2d 	bl	81114e0 <SDMMC_GetCmdResp3>
 8111086:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8111088:	69fb      	ldr	r3, [r7, #28]
}
 811108a:	4618      	mov	r0, r3
 811108c:	3720      	adds	r7, #32
 811108e:	46bd      	mov	sp, r7
 8111090:	bd80      	pop	{r7, pc}

08111092 <SDMMC_CmdBusWidth>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  BusWidth: BusWidth
  * @retval HAL status
  */
uint32_t SDMMC_CmdBusWidth(SDMMC_TypeDef *SDMMCx, uint32_t BusWidth)
{
 8111092:	b580      	push	{r7, lr}
 8111094:	b088      	sub	sp, #32
 8111096:	af00      	add	r7, sp, #0
 8111098:	6078      	str	r0, [r7, #4]
 811109a:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = (uint32_t)BusWidth;
 811109c:	683b      	ldr	r3, [r7, #0]
 811109e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_SD_SET_BUSWIDTH;
 81110a0:	2306      	movs	r3, #6
 81110a2:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 81110a4:	f44f 7380 	mov.w	r3, #256	; 0x100
 81110a8:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 81110aa:	2300      	movs	r3, #0
 81110ac:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 81110ae:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 81110b2:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 81110b4:	f107 0308 	add.w	r3, r7, #8
 81110b8:	4619      	mov	r1, r3
 81110ba:	6878      	ldr	r0, [r7, #4]
 81110bc:	f7ff feac 	bl	8110e18 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_SD_SET_BUSWIDTH, SDMMC_CMDTIMEOUT);
 81110c0:	f241 3288 	movw	r2, #5000	; 0x1388
 81110c4:	2106      	movs	r1, #6
 81110c6:	6878      	ldr	r0, [r7, #4]
 81110c8:	f000 f8ce 	bl	8111268 <SDMMC_GetCmdResp1>
 81110cc:	61f8      	str	r0, [r7, #28]

  return errorstate;
 81110ce:	69fb      	ldr	r3, [r7, #28]
}
 81110d0:	4618      	mov	r0, r3
 81110d2:	3720      	adds	r7, #32
 81110d4:	46bd      	mov	sp, r7
 81110d6:	bd80      	pop	{r7, pc}

081110d8 <SDMMC_CmdSendSCR>:
  * @brief  Send the Send SCR command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendSCR(SDMMC_TypeDef *SDMMCx)
{
 81110d8:	b580      	push	{r7, lr}
 81110da:	b088      	sub	sp, #32
 81110dc:	af00      	add	r7, sp, #0
 81110de:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD51 SD_APP_SEND_SCR */
  sdmmc_cmdinit.Argument         = 0U;
 81110e0:	2300      	movs	r3, #0
 81110e2:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_SEND_SCR;
 81110e4:	2333      	movs	r3, #51	; 0x33
 81110e6:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 81110e8:	f44f 7380 	mov.w	r3, #256	; 0x100
 81110ec:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 81110ee:	2300      	movs	r3, #0
 81110f0:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 81110f2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 81110f6:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 81110f8:	f107 0308 	add.w	r3, r7, #8
 81110fc:	4619      	mov	r1, r3
 81110fe:	6878      	ldr	r0, [r7, #4]
 8111100:	f7ff fe8a 	bl	8110e18 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SD_APP_SEND_SCR, SDMMC_CMDTIMEOUT);
 8111104:	f241 3288 	movw	r2, #5000	; 0x1388
 8111108:	2133      	movs	r1, #51	; 0x33
 811110a:	6878      	ldr	r0, [r7, #4]
 811110c:	f000 f8ac 	bl	8111268 <SDMMC_GetCmdResp1>
 8111110:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8111112:	69fb      	ldr	r3, [r7, #28]
}
 8111114:	4618      	mov	r0, r3
 8111116:	3720      	adds	r7, #32
 8111118:	46bd      	mov	sp, r7
 811111a:	bd80      	pop	{r7, pc}

0811111c <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDMMC_TypeDef *SDMMCx)
{
 811111c:	b580      	push	{r7, lr}
 811111e:	b088      	sub	sp, #32
 8111120:	af00      	add	r7, sp, #0
 8111122:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 8111124:	2300      	movs	r3, #0
 8111126:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 8111128:	2302      	movs	r3, #2
 811112a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 811112c:	f44f 7340 	mov.w	r3, #768	; 0x300
 8111130:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8111132:	2300      	movs	r3, #0
 8111134:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8111136:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 811113a:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 811113c:	f107 0308 	add.w	r3, r7, #8
 8111140:	4619      	mov	r1, r3
 8111142:	6878      	ldr	r0, [r7, #4]
 8111144:	f7ff fe68 	bl	8110e18 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 8111148:	6878      	ldr	r0, [r7, #4]
 811114a:	f000 f97f 	bl	811144c <SDMMC_GetCmdResp2>
 811114e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8111150:	69fb      	ldr	r3, [r7, #28]
}
 8111152:	4618      	mov	r0, r3
 8111154:	3720      	adds	r7, #32
 8111156:	46bd      	mov	sp, r7
 8111158:	bd80      	pop	{r7, pc}

0811115a <SDMMC_CmdSendCSD>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 811115a:	b580      	push	{r7, lr}
 811115c:	b088      	sub	sp, #32
 811115e:	af00      	add	r7, sp, #0
 8111160:	6078      	str	r0, [r7, #4]
 8111162:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 8111164:	683b      	ldr	r3, [r7, #0]
 8111166:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 8111168:	2309      	movs	r3, #9
 811116a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 811116c:	f44f 7340 	mov.w	r3, #768	; 0x300
 8111170:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8111172:	2300      	movs	r3, #0
 8111174:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8111176:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 811117a:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 811117c:	f107 0308 	add.w	r3, r7, #8
 8111180:	4619      	mov	r1, r3
 8111182:	6878      	ldr	r0, [r7, #4]
 8111184:	f7ff fe48 	bl	8110e18 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 8111188:	6878      	ldr	r0, [r7, #4]
 811118a:	f000 f95f 	bl	811144c <SDMMC_GetCmdResp2>
 811118e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8111190:	69fb      	ldr	r3, [r7, #28]
}
 8111192:	4618      	mov	r0, r3
 8111194:	3720      	adds	r7, #32
 8111196:	46bd      	mov	sp, r7
 8111198:	bd80      	pop	{r7, pc}

0811119a <SDMMC_CmdSetRelAdd>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  pRCA: Card RCA
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDMMC_TypeDef *SDMMCx, uint16_t *pRCA)
{
 811119a:	b580      	push	{r7, lr}
 811119c:	b088      	sub	sp, #32
 811119e:	af00      	add	r7, sp, #0
 81111a0:	6078      	str	r0, [r7, #4]
 81111a2:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 81111a4:	2300      	movs	r3, #0
 81111a6:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 81111a8:	2303      	movs	r3, #3
 81111aa:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 81111ac:	f44f 7380 	mov.w	r3, #256	; 0x100
 81111b0:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 81111b2:	2300      	movs	r3, #0
 81111b4:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 81111b6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 81111ba:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 81111bc:	f107 0308 	add.w	r3, r7, #8
 81111c0:	4619      	mov	r1, r3
 81111c2:	6878      	ldr	r0, [r7, #4]
 81111c4:	f7ff fe28 	bl	8110e18 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDMMCx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 81111c8:	683a      	ldr	r2, [r7, #0]
 81111ca:	2103      	movs	r1, #3
 81111cc:	6878      	ldr	r0, [r7, #4]
 81111ce:	f000 f9c7 	bl	8111560 <SDMMC_GetCmdResp6>
 81111d2:	61f8      	str	r0, [r7, #28]

  return errorstate;
 81111d4:	69fb      	ldr	r3, [r7, #28]
}
 81111d6:	4618      	mov	r0, r3
 81111d8:	3720      	adds	r7, #32
 81111da:	46bd      	mov	sp, r7
 81111dc:	bd80      	pop	{r7, pc}

081111de <SDMMC_CmdSendStatus>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 81111de:	b580      	push	{r7, lr}
 81111e0:	b088      	sub	sp, #32
 81111e2:	af00      	add	r7, sp, #0
 81111e4:	6078      	str	r0, [r7, #4]
 81111e6:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = Argument;
 81111e8:	683b      	ldr	r3, [r7, #0]
 81111ea:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 81111ec:	230d      	movs	r3, #13
 81111ee:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 81111f0:	f44f 7380 	mov.w	r3, #256	; 0x100
 81111f4:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 81111f6:	2300      	movs	r3, #0
 81111f8:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 81111fa:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 81111fe:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8111200:	f107 0308 	add.w	r3, r7, #8
 8111204:	4619      	mov	r1, r3
 8111206:	6878      	ldr	r0, [r7, #4]
 8111208:	f7ff fe06 	bl	8110e18 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEND_STATUS, SDMMC_CMDTIMEOUT);
 811120c:	f241 3288 	movw	r2, #5000	; 0x1388
 8111210:	210d      	movs	r1, #13
 8111212:	6878      	ldr	r0, [r7, #4]
 8111214:	f000 f828 	bl	8111268 <SDMMC_GetCmdResp1>
 8111218:	61f8      	str	r0, [r7, #28]

  return errorstate;
 811121a:	69fb      	ldr	r3, [r7, #28]
}
 811121c:	4618      	mov	r0, r3
 811121e:	3720      	adds	r7, #32
 8111220:	46bd      	mov	sp, r7
 8111222:	bd80      	pop	{r7, pc}

08111224 <SDMMC_CmdStatusRegister>:
  * @brief  Send the Status register command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdStatusRegister(SDMMC_TypeDef *SDMMCx)
{
 8111224:	b580      	push	{r7, lr}
 8111226:	b088      	sub	sp, #32
 8111228:	af00      	add	r7, sp, #0
 811122a:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = 0U;
 811122c:	2300      	movs	r3, #0
 811122e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_STATUS;
 8111230:	230d      	movs	r3, #13
 8111232:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8111234:	f44f 7380 	mov.w	r3, #256	; 0x100
 8111238:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 811123a:	2300      	movs	r3, #0
 811123c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 811123e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8111242:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8111244:	f107 0308 	add.w	r3, r7, #8
 8111248:	4619      	mov	r1, r3
 811124a:	6878      	ldr	r0, [r7, #4]
 811124c:	f7ff fde4 	bl	8110e18 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SD_APP_STATUS, SDMMC_CMDTIMEOUT);
 8111250:	f241 3288 	movw	r2, #5000	; 0x1388
 8111254:	210d      	movs	r1, #13
 8111256:	6878      	ldr	r0, [r7, #4]
 8111258:	f000 f806 	bl	8111268 <SDMMC_GetCmdResp1>
 811125c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 811125e:	69fb      	ldr	r3, [r7, #28]
}
 8111260:	4618      	mov	r0, r3
 8111262:	3720      	adds	r7, #32
 8111264:	46bd      	mov	sp, r7
 8111266:	bd80      	pop	{r7, pc}

08111268 <SDMMC_GetCmdResp1>:
  * @param  hsd: SD handle
  * @param  SD_CMD: The sent command index
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp1(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint32_t Timeout)
{
 8111268:	b580      	push	{r7, lr}
 811126a:	b088      	sub	sp, #32
 811126c:	af00      	add	r7, sp, #0
 811126e:	60f8      	str	r0, [r7, #12]
 8111270:	460b      	mov	r3, r1
 8111272:	607a      	str	r2, [r7, #4]
 8111274:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 8111276:	4b70      	ldr	r3, [pc, #448]	; (8111438 <SDMMC_GetCmdResp1+0x1d0>)
 8111278:	681b      	ldr	r3, [r3, #0]
 811127a:	4a70      	ldr	r2, [pc, #448]	; (811143c <SDMMC_GetCmdResp1+0x1d4>)
 811127c:	fba2 2303 	umull	r2, r3, r2, r3
 8111280:	0a5a      	lsrs	r2, r3, #9
 8111282:	687b      	ldr	r3, [r7, #4]
 8111284:	fb02 f303 	mul.w	r3, r2, r3
 8111288:	61fb      	str	r3, [r7, #28]

  do
  {
    if (count-- == 0U)
 811128a:	69fb      	ldr	r3, [r7, #28]
 811128c:	1e5a      	subs	r2, r3, #1
 811128e:	61fa      	str	r2, [r7, #28]
 8111290:	2b00      	cmp	r3, #0
 8111292:	d102      	bne.n	811129a <SDMMC_GetCmdResp1+0x32>
    {
      return SDMMC_ERROR_TIMEOUT;
 8111294:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8111298:	e0c9      	b.n	811142e <SDMMC_GetCmdResp1+0x1c6>
    }
    sta_reg = SDMMCx->STA;
 811129a:	68fb      	ldr	r3, [r7, #12]
 811129c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 811129e:	61bb      	str	r3, [r7, #24]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT |
 81112a0:	69ba      	ldr	r2, [r7, #24]
 81112a2:	4b67      	ldr	r3, [pc, #412]	; (8111440 <SDMMC_GetCmdResp1+0x1d8>)
 81112a4:	4013      	ands	r3, r2
                        SDMMC_FLAG_BUSYD0END)) == 0U) || ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 81112a6:	2b00      	cmp	r3, #0
 81112a8:	d0ef      	beq.n	811128a <SDMMC_GetCmdResp1+0x22>
 81112aa:	69bb      	ldr	r3, [r7, #24]
 81112ac:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 81112b0:	2b00      	cmp	r3, #0
 81112b2:	d1ea      	bne.n	811128a <SDMMC_GetCmdResp1+0x22>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 81112b4:	68fb      	ldr	r3, [r7, #12]
 81112b6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 81112b8:	f003 0304 	and.w	r3, r3, #4
 81112bc:	2b00      	cmp	r3, #0
 81112be:	d004      	beq.n	81112ca <SDMMC_GetCmdResp1+0x62>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 81112c0:	68fb      	ldr	r3, [r7, #12]
 81112c2:	2204      	movs	r2, #4
 81112c4:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 81112c6:	2304      	movs	r3, #4
 81112c8:	e0b1      	b.n	811142e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 81112ca:	68fb      	ldr	r3, [r7, #12]
 81112cc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 81112ce:	f003 0301 	and.w	r3, r3, #1
 81112d2:	2b00      	cmp	r3, #0
 81112d4:	d004      	beq.n	81112e0 <SDMMC_GetCmdResp1+0x78>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 81112d6:	68fb      	ldr	r3, [r7, #12]
 81112d8:	2201      	movs	r2, #1
 81112da:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 81112dc:	2301      	movs	r3, #1
 81112de:	e0a6      	b.n	811142e <SDMMC_GetCmdResp1+0x1c6>
  {
    /* Nothing to do */
  }

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 81112e0:	68fb      	ldr	r3, [r7, #12]
 81112e2:	4a58      	ldr	r2, [pc, #352]	; (8111444 <SDMMC_GetCmdResp1+0x1dc>)
 81112e4:	639a      	str	r2, [r3, #56]	; 0x38

  /* Check response received is of desired command */
  if (SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 81112e6:	68f8      	ldr	r0, [r7, #12]
 81112e8:	f7ff fdc0 	bl	8110e6c <SDMMC_GetCommandResponse>
 81112ec:	4603      	mov	r3, r0
 81112ee:	461a      	mov	r2, r3
 81112f0:	7afb      	ldrb	r3, [r7, #11]
 81112f2:	4293      	cmp	r3, r2
 81112f4:	d001      	beq.n	81112fa <SDMMC_GetCmdResp1+0x92>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 81112f6:	2301      	movs	r3, #1
 81112f8:	e099      	b.n	811142e <SDMMC_GetCmdResp1+0x1c6>
  }

  /* We have received response, retrieve it for analysis  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 81112fa:	2100      	movs	r1, #0
 81112fc:	68f8      	ldr	r0, [r7, #12]
 81112fe:	f7ff fdc2 	bl	8110e86 <SDMMC_GetResponse>
 8111302:	6178      	str	r0, [r7, #20]

  if ((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 8111304:	697a      	ldr	r2, [r7, #20]
 8111306:	4b50      	ldr	r3, [pc, #320]	; (8111448 <SDMMC_GetCmdResp1+0x1e0>)
 8111308:	4013      	ands	r3, r2
 811130a:	2b00      	cmp	r3, #0
 811130c:	d101      	bne.n	8111312 <SDMMC_GetCmdResp1+0xaa>
  {
    return SDMMC_ERROR_NONE;
 811130e:	2300      	movs	r3, #0
 8111310:	e08d      	b.n	811142e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 8111312:	697b      	ldr	r3, [r7, #20]
 8111314:	2b00      	cmp	r3, #0
 8111316:	da02      	bge.n	811131e <SDMMC_GetCmdResp1+0xb6>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 8111318:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 811131c:	e087      	b.n	811142e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 811131e:	697b      	ldr	r3, [r7, #20]
 8111320:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8111324:	2b00      	cmp	r3, #0
 8111326:	d001      	beq.n	811132c <SDMMC_GetCmdResp1+0xc4>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 8111328:	2340      	movs	r3, #64	; 0x40
 811132a:	e080      	b.n	811142e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 811132c:	697b      	ldr	r3, [r7, #20]
 811132e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8111332:	2b00      	cmp	r3, #0
 8111334:	d001      	beq.n	811133a <SDMMC_GetCmdResp1+0xd2>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 8111336:	2380      	movs	r3, #128	; 0x80
 8111338:	e079      	b.n	811142e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 811133a:	697b      	ldr	r3, [r7, #20]
 811133c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8111340:	2b00      	cmp	r3, #0
 8111342:	d002      	beq.n	811134a <SDMMC_GetCmdResp1+0xe2>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 8111344:	f44f 7380 	mov.w	r3, #256	; 0x100
 8111348:	e071      	b.n	811142e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 811134a:	697b      	ldr	r3, [r7, #20]
 811134c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8111350:	2b00      	cmp	r3, #0
 8111352:	d002      	beq.n	811135a <SDMMC_GetCmdResp1+0xf2>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 8111354:	f44f 7300 	mov.w	r3, #512	; 0x200
 8111358:	e069      	b.n	811142e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 811135a:	697b      	ldr	r3, [r7, #20]
 811135c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8111360:	2b00      	cmp	r3, #0
 8111362:	d002      	beq.n	811136a <SDMMC_GetCmdResp1+0x102>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 8111364:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8111368:	e061      	b.n	811142e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 811136a:	697b      	ldr	r3, [r7, #20]
 811136c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8111370:	2b00      	cmp	r3, #0
 8111372:	d002      	beq.n	811137a <SDMMC_GetCmdResp1+0x112>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 8111374:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8111378:	e059      	b.n	811142e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 811137a:	697b      	ldr	r3, [r7, #20]
 811137c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8111380:	2b00      	cmp	r3, #0
 8111382:	d002      	beq.n	811138a <SDMMC_GetCmdResp1+0x122>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 8111384:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8111388:	e051      	b.n	811142e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 811138a:	697b      	ldr	r3, [r7, #20]
 811138c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8111390:	2b00      	cmp	r3, #0
 8111392:	d002      	beq.n	811139a <SDMMC_GetCmdResp1+0x132>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 8111394:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8111398:	e049      	b.n	811142e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 811139a:	697b      	ldr	r3, [r7, #20]
 811139c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 81113a0:	2b00      	cmp	r3, #0
 81113a2:	d002      	beq.n	81113aa <SDMMC_GetCmdResp1+0x142>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 81113a4:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 81113a8:	e041      	b.n	811142e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 81113aa:	697b      	ldr	r3, [r7, #20]
 81113ac:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 81113b0:	2b00      	cmp	r3, #0
 81113b2:	d002      	beq.n	81113ba <SDMMC_GetCmdResp1+0x152>
  {
    return SDMMC_ERROR_CC_ERR;
 81113b4:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 81113b8:	e039      	b.n	811142e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 81113ba:	697b      	ldr	r3, [r7, #20]
 81113bc:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 81113c0:	2b00      	cmp	r3, #0
 81113c2:	d002      	beq.n	81113ca <SDMMC_GetCmdResp1+0x162>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 81113c4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 81113c8:	e031      	b.n	811142e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 81113ca:	697b      	ldr	r3, [r7, #20]
 81113cc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 81113d0:	2b00      	cmp	r3, #0
 81113d2:	d002      	beq.n	81113da <SDMMC_GetCmdResp1+0x172>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 81113d4:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 81113d8:	e029      	b.n	811142e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 81113da:	697b      	ldr	r3, [r7, #20]
 81113dc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 81113e0:	2b00      	cmp	r3, #0
 81113e2:	d002      	beq.n	81113ea <SDMMC_GetCmdResp1+0x182>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 81113e4:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 81113e8:	e021      	b.n	811142e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 81113ea:	697b      	ldr	r3, [r7, #20]
 81113ec:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 81113f0:	2b00      	cmp	r3, #0
 81113f2:	d002      	beq.n	81113fa <SDMMC_GetCmdResp1+0x192>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 81113f4:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 81113f8:	e019      	b.n	811142e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 81113fa:	697b      	ldr	r3, [r7, #20]
 81113fc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8111400:	2b00      	cmp	r3, #0
 8111402:	d002      	beq.n	811140a <SDMMC_GetCmdResp1+0x1a2>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 8111404:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8111408:	e011      	b.n	811142e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 811140a:	697b      	ldr	r3, [r7, #20]
 811140c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8111410:	2b00      	cmp	r3, #0
 8111412:	d002      	beq.n	811141a <SDMMC_GetCmdResp1+0x1b2>
  {
    return SDMMC_ERROR_ERASE_RESET;
 8111414:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8111418:	e009      	b.n	811142e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 811141a:	697b      	ldr	r3, [r7, #20]
 811141c:	f003 0308 	and.w	r3, r3, #8
 8111420:	2b00      	cmp	r3, #0
 8111422:	d002      	beq.n	811142a <SDMMC_GetCmdResp1+0x1c2>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 8111424:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 8111428:	e001      	b.n	811142e <SDMMC_GetCmdResp1+0x1c6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 811142a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 811142e:	4618      	mov	r0, r3
 8111430:	3720      	adds	r7, #32
 8111432:	46bd      	mov	sp, r7
 8111434:	bd80      	pop	{r7, pc}
 8111436:	bf00      	nop
 8111438:	10000000 	.word	0x10000000
 811143c:	10624dd3 	.word	0x10624dd3
 8111440:	00200045 	.word	0x00200045
 8111444:	002000c5 	.word	0x002000c5
 8111448:	fdffe008 	.word	0xfdffe008

0811144c <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp2(SDMMC_TypeDef *SDMMCx)
{
 811144c:	b480      	push	{r7}
 811144e:	b085      	sub	sp, #20
 8111450:	af00      	add	r7, sp, #0
 8111452:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 8111454:	4b1f      	ldr	r3, [pc, #124]	; (81114d4 <SDMMC_GetCmdResp2+0x88>)
 8111456:	681b      	ldr	r3, [r3, #0]
 8111458:	4a1f      	ldr	r2, [pc, #124]	; (81114d8 <SDMMC_GetCmdResp2+0x8c>)
 811145a:	fba2 2303 	umull	r2, r3, r2, r3
 811145e:	0a5b      	lsrs	r3, r3, #9
 8111460:	f241 3288 	movw	r2, #5000	; 0x1388
 8111464:	fb02 f303 	mul.w	r3, r2, r3
 8111468:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 811146a:	68fb      	ldr	r3, [r7, #12]
 811146c:	1e5a      	subs	r2, r3, #1
 811146e:	60fa      	str	r2, [r7, #12]
 8111470:	2b00      	cmp	r3, #0
 8111472:	d102      	bne.n	811147a <SDMMC_GetCmdResp2+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8111474:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8111478:	e026      	b.n	81114c8 <SDMMC_GetCmdResp2+0x7c>
    }
    sta_reg = SDMMCx->STA;
 811147a:	687b      	ldr	r3, [r7, #4]
 811147c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 811147e:	60bb      	str	r3, [r7, #8]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8111480:	68bb      	ldr	r3, [r7, #8]
 8111482:	f003 0345 	and.w	r3, r3, #69	; 0x45
 8111486:	2b00      	cmp	r3, #0
 8111488:	d0ef      	beq.n	811146a <SDMMC_GetCmdResp2+0x1e>
           ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 811148a:	68bb      	ldr	r3, [r7, #8]
 811148c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8111490:	2b00      	cmp	r3, #0
 8111492:	d1ea      	bne.n	811146a <SDMMC_GetCmdResp2+0x1e>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8111494:	687b      	ldr	r3, [r7, #4]
 8111496:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8111498:	f003 0304 	and.w	r3, r3, #4
 811149c:	2b00      	cmp	r3, #0
 811149e:	d004      	beq.n	81114aa <SDMMC_GetCmdResp2+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 81114a0:	687b      	ldr	r3, [r7, #4]
 81114a2:	2204      	movs	r2, #4
 81114a4:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 81114a6:	2304      	movs	r3, #4
 81114a8:	e00e      	b.n	81114c8 <SDMMC_GetCmdResp2+0x7c>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 81114aa:	687b      	ldr	r3, [r7, #4]
 81114ac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 81114ae:	f003 0301 	and.w	r3, r3, #1
 81114b2:	2b00      	cmp	r3, #0
 81114b4:	d004      	beq.n	81114c0 <SDMMC_GetCmdResp2+0x74>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 81114b6:	687b      	ldr	r3, [r7, #4]
 81114b8:	2201      	movs	r2, #1
 81114ba:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 81114bc:	2301      	movs	r3, #1
 81114be:	e003      	b.n	81114c8 <SDMMC_GetCmdResp2+0x7c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 81114c0:	687b      	ldr	r3, [r7, #4]
 81114c2:	4a06      	ldr	r2, [pc, #24]	; (81114dc <SDMMC_GetCmdResp2+0x90>)
 81114c4:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 81114c6:	2300      	movs	r3, #0
}
 81114c8:	4618      	mov	r0, r3
 81114ca:	3714      	adds	r7, #20
 81114cc:	46bd      	mov	sp, r7
 81114ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 81114d2:	4770      	bx	lr
 81114d4:	10000000 	.word	0x10000000
 81114d8:	10624dd3 	.word	0x10624dd3
 81114dc:	002000c5 	.word	0x002000c5

081114e0 <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp3(SDMMC_TypeDef *SDMMCx)
{
 81114e0:	b480      	push	{r7}
 81114e2:	b085      	sub	sp, #20
 81114e4:	af00      	add	r7, sp, #0
 81114e6:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 81114e8:	4b1a      	ldr	r3, [pc, #104]	; (8111554 <SDMMC_GetCmdResp3+0x74>)
 81114ea:	681b      	ldr	r3, [r3, #0]
 81114ec:	4a1a      	ldr	r2, [pc, #104]	; (8111558 <SDMMC_GetCmdResp3+0x78>)
 81114ee:	fba2 2303 	umull	r2, r3, r2, r3
 81114f2:	0a5b      	lsrs	r3, r3, #9
 81114f4:	f241 3288 	movw	r2, #5000	; 0x1388
 81114f8:	fb02 f303 	mul.w	r3, r2, r3
 81114fc:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 81114fe:	68fb      	ldr	r3, [r7, #12]
 8111500:	1e5a      	subs	r2, r3, #1
 8111502:	60fa      	str	r2, [r7, #12]
 8111504:	2b00      	cmp	r3, #0
 8111506:	d102      	bne.n	811150e <SDMMC_GetCmdResp3+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8111508:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 811150c:	e01b      	b.n	8111546 <SDMMC_GetCmdResp3+0x66>
    }
    sta_reg = SDMMCx->STA;
 811150e:	687b      	ldr	r3, [r7, #4]
 8111510:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8111512:	60bb      	str	r3, [r7, #8]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8111514:	68bb      	ldr	r3, [r7, #8]
 8111516:	f003 0345 	and.w	r3, r3, #69	; 0x45
 811151a:	2b00      	cmp	r3, #0
 811151c:	d0ef      	beq.n	81114fe <SDMMC_GetCmdResp3+0x1e>
           ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 811151e:	68bb      	ldr	r3, [r7, #8]
 8111520:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8111524:	2b00      	cmp	r3, #0
 8111526:	d1ea      	bne.n	81114fe <SDMMC_GetCmdResp3+0x1e>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8111528:	687b      	ldr	r3, [r7, #4]
 811152a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 811152c:	f003 0304 	and.w	r3, r3, #4
 8111530:	2b00      	cmp	r3, #0
 8111532:	d004      	beq.n	811153e <SDMMC_GetCmdResp3+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8111534:	687b      	ldr	r3, [r7, #4]
 8111536:	2204      	movs	r2, #4
 8111538:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 811153a:	2304      	movs	r3, #4
 811153c:	e003      	b.n	8111546 <SDMMC_GetCmdResp3+0x66>
  }
  else
  {
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 811153e:	687b      	ldr	r3, [r7, #4]
 8111540:	4a06      	ldr	r2, [pc, #24]	; (811155c <SDMMC_GetCmdResp3+0x7c>)
 8111542:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 8111544:	2300      	movs	r3, #0
}
 8111546:	4618      	mov	r0, r3
 8111548:	3714      	adds	r7, #20
 811154a:	46bd      	mov	sp, r7
 811154c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8111550:	4770      	bx	lr
 8111552:	bf00      	nop
 8111554:	10000000 	.word	0x10000000
 8111558:	10624dd3 	.word	0x10624dd3
 811155c:	002000c5 	.word	0x002000c5

08111560 <SDMMC_GetCmdResp6>:
  * @param  pRCA: Pointer to the variable that will contain the SD card relative
  *         address RCA
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp6(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint16_t *pRCA)
{
 8111560:	b580      	push	{r7, lr}
 8111562:	b088      	sub	sp, #32
 8111564:	af00      	add	r7, sp, #0
 8111566:	60f8      	str	r0, [r7, #12]
 8111568:	460b      	mov	r3, r1
 811156a:	607a      	str	r2, [r7, #4]
 811156c:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 811156e:	4b35      	ldr	r3, [pc, #212]	; (8111644 <SDMMC_GetCmdResp6+0xe4>)
 8111570:	681b      	ldr	r3, [r3, #0]
 8111572:	4a35      	ldr	r2, [pc, #212]	; (8111648 <SDMMC_GetCmdResp6+0xe8>)
 8111574:	fba2 2303 	umull	r2, r3, r2, r3
 8111578:	0a5b      	lsrs	r3, r3, #9
 811157a:	f241 3288 	movw	r2, #5000	; 0x1388
 811157e:	fb02 f303 	mul.w	r3, r2, r3
 8111582:	61fb      	str	r3, [r7, #28]

  do
  {
    if (count-- == 0U)
 8111584:	69fb      	ldr	r3, [r7, #28]
 8111586:	1e5a      	subs	r2, r3, #1
 8111588:	61fa      	str	r2, [r7, #28]
 811158a:	2b00      	cmp	r3, #0
 811158c:	d102      	bne.n	8111594 <SDMMC_GetCmdResp6+0x34>
    {
      return SDMMC_ERROR_TIMEOUT;
 811158e:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8111592:	e052      	b.n	811163a <SDMMC_GetCmdResp6+0xda>
    }
    sta_reg = SDMMCx->STA;
 8111594:	68fb      	ldr	r3, [r7, #12]
 8111596:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8111598:	61bb      	str	r3, [r7, #24]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 811159a:	69bb      	ldr	r3, [r7, #24]
 811159c:	f003 0345 	and.w	r3, r3, #69	; 0x45
 81115a0:	2b00      	cmp	r3, #0
 81115a2:	d0ef      	beq.n	8111584 <SDMMC_GetCmdResp6+0x24>
           ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 81115a4:	69bb      	ldr	r3, [r7, #24]
 81115a6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 81115aa:	2b00      	cmp	r3, #0
 81115ac:	d1ea      	bne.n	8111584 <SDMMC_GetCmdResp6+0x24>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 81115ae:	68fb      	ldr	r3, [r7, #12]
 81115b0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 81115b2:	f003 0304 	and.w	r3, r3, #4
 81115b6:	2b00      	cmp	r3, #0
 81115b8:	d004      	beq.n	81115c4 <SDMMC_GetCmdResp6+0x64>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 81115ba:	68fb      	ldr	r3, [r7, #12]
 81115bc:	2204      	movs	r2, #4
 81115be:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 81115c0:	2304      	movs	r3, #4
 81115c2:	e03a      	b.n	811163a <SDMMC_GetCmdResp6+0xda>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 81115c4:	68fb      	ldr	r3, [r7, #12]
 81115c6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 81115c8:	f003 0301 	and.w	r3, r3, #1
 81115cc:	2b00      	cmp	r3, #0
 81115ce:	d004      	beq.n	81115da <SDMMC_GetCmdResp6+0x7a>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 81115d0:	68fb      	ldr	r3, [r7, #12]
 81115d2:	2201      	movs	r2, #1
 81115d4:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 81115d6:	2301      	movs	r3, #1
 81115d8:	e02f      	b.n	811163a <SDMMC_GetCmdResp6+0xda>
  {
    /* Nothing to do */
  }

  /* Check response received is of desired command */
  if (SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 81115da:	68f8      	ldr	r0, [r7, #12]
 81115dc:	f7ff fc46 	bl	8110e6c <SDMMC_GetCommandResponse>
 81115e0:	4603      	mov	r3, r0
 81115e2:	461a      	mov	r2, r3
 81115e4:	7afb      	ldrb	r3, [r7, #11]
 81115e6:	4293      	cmp	r3, r2
 81115e8:	d001      	beq.n	81115ee <SDMMC_GetCmdResp6+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 81115ea:	2301      	movs	r3, #1
 81115ec:	e025      	b.n	811163a <SDMMC_GetCmdResp6+0xda>
  }

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 81115ee:	68fb      	ldr	r3, [r7, #12]
 81115f0:	4a16      	ldr	r2, [pc, #88]	; (811164c <SDMMC_GetCmdResp6+0xec>)
 81115f2:	639a      	str	r2, [r3, #56]	; 0x38

  /* We have received response, retrieve it.  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 81115f4:	2100      	movs	r1, #0
 81115f6:	68f8      	ldr	r0, [r7, #12]
 81115f8:	f7ff fc45 	bl	8110e86 <SDMMC_GetResponse>
 81115fc:	6178      	str	r0, [r7, #20]

  if ((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD |
 81115fe:	697b      	ldr	r3, [r7, #20]
 8111600:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 8111604:	2b00      	cmp	r3, #0
 8111606:	d106      	bne.n	8111616 <SDMMC_GetCmdResp6+0xb6>
                      SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
  {
    *pRCA = (uint16_t)(response_r1 >> 16);
 8111608:	697b      	ldr	r3, [r7, #20]
 811160a:	0c1b      	lsrs	r3, r3, #16
 811160c:	b29a      	uxth	r2, r3
 811160e:	687b      	ldr	r3, [r7, #4]
 8111610:	801a      	strh	r2, [r3, #0]

    return SDMMC_ERROR_NONE;
 8111612:	2300      	movs	r3, #0
 8111614:	e011      	b.n	811163a <SDMMC_GetCmdResp6+0xda>
  }
  else if ((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 8111616:	697b      	ldr	r3, [r7, #20]
 8111618:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 811161c:	2b00      	cmp	r3, #0
 811161e:	d002      	beq.n	8111626 <SDMMC_GetCmdResp6+0xc6>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 8111620:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8111624:	e009      	b.n	811163a <SDMMC_GetCmdResp6+0xda>
  }
  else if ((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 8111626:	697b      	ldr	r3, [r7, #20]
 8111628:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 811162c:	2b00      	cmp	r3, #0
 811162e:	d002      	beq.n	8111636 <SDMMC_GetCmdResp6+0xd6>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 8111630:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8111634:	e001      	b.n	811163a <SDMMC_GetCmdResp6+0xda>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 8111636:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 811163a:	4618      	mov	r0, r3
 811163c:	3720      	adds	r7, #32
 811163e:	46bd      	mov	sp, r7
 8111640:	bd80      	pop	{r7, pc}
 8111642:	bf00      	nop
 8111644:	10000000 	.word	0x10000000
 8111648:	10624dd3 	.word	0x10624dd3
 811164c:	002000c5 	.word	0x002000c5

08111650 <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp7(SDMMC_TypeDef *SDMMCx)
{
 8111650:	b480      	push	{r7}
 8111652:	b085      	sub	sp, #20
 8111654:	af00      	add	r7, sp, #0
 8111656:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 8111658:	4b22      	ldr	r3, [pc, #136]	; (81116e4 <SDMMC_GetCmdResp7+0x94>)
 811165a:	681b      	ldr	r3, [r3, #0]
 811165c:	4a22      	ldr	r2, [pc, #136]	; (81116e8 <SDMMC_GetCmdResp7+0x98>)
 811165e:	fba2 2303 	umull	r2, r3, r2, r3
 8111662:	0a5b      	lsrs	r3, r3, #9
 8111664:	f241 3288 	movw	r2, #5000	; 0x1388
 8111668:	fb02 f303 	mul.w	r3, r2, r3
 811166c:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 811166e:	68fb      	ldr	r3, [r7, #12]
 8111670:	1e5a      	subs	r2, r3, #1
 8111672:	60fa      	str	r2, [r7, #12]
 8111674:	2b00      	cmp	r3, #0
 8111676:	d102      	bne.n	811167e <SDMMC_GetCmdResp7+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8111678:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 811167c:	e02c      	b.n	81116d8 <SDMMC_GetCmdResp7+0x88>
    }
    sta_reg = SDMMCx->STA;
 811167e:	687b      	ldr	r3, [r7, #4]
 8111680:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8111682:	60bb      	str	r3, [r7, #8]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8111684:	68bb      	ldr	r3, [r7, #8]
 8111686:	f003 0345 	and.w	r3, r3, #69	; 0x45
 811168a:	2b00      	cmp	r3, #0
 811168c:	d0ef      	beq.n	811166e <SDMMC_GetCmdResp7+0x1e>
           ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 811168e:	68bb      	ldr	r3, [r7, #8]
 8111690:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8111694:	2b00      	cmp	r3, #0
 8111696:	d1ea      	bne.n	811166e <SDMMC_GetCmdResp7+0x1e>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8111698:	687b      	ldr	r3, [r7, #4]
 811169a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 811169c:	f003 0304 	and.w	r3, r3, #4
 81116a0:	2b00      	cmp	r3, #0
 81116a2:	d004      	beq.n	81116ae <SDMMC_GetCmdResp7+0x5e>
  {
    /* Card is not SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 81116a4:	687b      	ldr	r3, [r7, #4]
 81116a6:	2204      	movs	r2, #4
 81116a8:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 81116aa:	2304      	movs	r3, #4
 81116ac:	e014      	b.n	81116d8 <SDMMC_GetCmdResp7+0x88>
  }

  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 81116ae:	687b      	ldr	r3, [r7, #4]
 81116b0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 81116b2:	f003 0301 	and.w	r3, r3, #1
 81116b6:	2b00      	cmp	r3, #0
 81116b8:	d004      	beq.n	81116c4 <SDMMC_GetCmdResp7+0x74>
  {
    /* Card is not SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 81116ba:	687b      	ldr	r3, [r7, #4]
 81116bc:	2201      	movs	r2, #1
 81116be:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 81116c0:	2301      	movs	r3, #1
 81116c2:	e009      	b.n	81116d8 <SDMMC_GetCmdResp7+0x88>
  else
  {
    /* Nothing to do */
  }

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDREND))
 81116c4:	687b      	ldr	r3, [r7, #4]
 81116c6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 81116c8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 81116cc:	2b00      	cmp	r3, #0
 81116ce:	d002      	beq.n	81116d6 <SDMMC_GetCmdResp7+0x86>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CMDREND);
 81116d0:	687b      	ldr	r3, [r7, #4]
 81116d2:	2240      	movs	r2, #64	; 0x40
 81116d4:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 81116d6:	2300      	movs	r3, #0

}
 81116d8:	4618      	mov	r0, r3
 81116da:	3714      	adds	r7, #20
 81116dc:	46bd      	mov	sp, r7
 81116de:	f85d 7b04 	ldr.w	r7, [sp], #4
 81116e2:	4770      	bx	lr
 81116e4:	10000000 	.word	0x10000000
 81116e8:	10624dd3 	.word	0x10624dd3

081116ec <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDMMC_TypeDef *SDMMCx)
{
 81116ec:	b480      	push	{r7}
 81116ee:	b085      	sub	sp, #20
 81116f0:	af00      	add	r7, sp, #0
 81116f2:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 81116f4:	4b11      	ldr	r3, [pc, #68]	; (811173c <SDMMC_GetCmdError+0x50>)
 81116f6:	681b      	ldr	r3, [r3, #0]
 81116f8:	4a11      	ldr	r2, [pc, #68]	; (8111740 <SDMMC_GetCmdError+0x54>)
 81116fa:	fba2 2303 	umull	r2, r3, r2, r3
 81116fe:	0a5b      	lsrs	r3, r3, #9
 8111700:	f241 3288 	movw	r2, #5000	; 0x1388
 8111704:	fb02 f303 	mul.w	r3, r2, r3
 8111708:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 811170a:	68fb      	ldr	r3, [r7, #12]
 811170c:	1e5a      	subs	r2, r3, #1
 811170e:	60fa      	str	r2, [r7, #12]
 8111710:	2b00      	cmp	r3, #0
 8111712:	d102      	bne.n	811171a <SDMMC_GetCmdError+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8111714:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8111718:	e009      	b.n	811172e <SDMMC_GetCmdError+0x42>
    }

  } while (!__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDSENT));
 811171a:	687b      	ldr	r3, [r7, #4]
 811171c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 811171e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8111722:	2b00      	cmp	r3, #0
 8111724:	d0f1      	beq.n	811170a <SDMMC_GetCmdError+0x1e>

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8111726:	687b      	ldr	r3, [r7, #4]
 8111728:	4a06      	ldr	r2, [pc, #24]	; (8111744 <SDMMC_GetCmdError+0x58>)
 811172a:	639a      	str	r2, [r3, #56]	; 0x38

  return SDMMC_ERROR_NONE;
 811172c:	2300      	movs	r3, #0
}
 811172e:	4618      	mov	r0, r3
 8111730:	3714      	adds	r7, #20
 8111732:	46bd      	mov	sp, r7
 8111734:	f85d 7b04 	ldr.w	r7, [sp], #4
 8111738:	4770      	bx	lr
 811173a:	bf00      	nop
 811173c:	10000000 	.word	0x10000000
 8111740:	10624dd3 	.word	0x10624dd3
 8111744:	002000c5 	.word	0x002000c5

08111748 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8111748:	b084      	sub	sp, #16
 811174a:	b580      	push	{r7, lr}
 811174c:	b084      	sub	sp, #16
 811174e:	af00      	add	r7, sp, #0
 8111750:	6078      	str	r0, [r7, #4]
 8111752:	f107 001c 	add.w	r0, r7, #28
 8111756:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 811175a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 811175c:	2b01      	cmp	r3, #1
 811175e:	d122      	bne.n	81117a6 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8111760:	687b      	ldr	r3, [r7, #4]
 8111762:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8111764:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8111768:	687b      	ldr	r3, [r7, #4]
 811176a:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 811176c:	687b      	ldr	r3, [r7, #4]
 811176e:	68db      	ldr	r3, [r3, #12]
 8111770:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8111774:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8111778:	687a      	ldr	r2, [r7, #4]
 811177a:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 811177c:	687b      	ldr	r3, [r7, #4]
 811177e:	68db      	ldr	r3, [r3, #12]
 8111780:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8111784:	687b      	ldr	r3, [r7, #4]
 8111786:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8111788:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 811178a:	2b01      	cmp	r3, #1
 811178c:	d105      	bne.n	811179a <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 811178e:	687b      	ldr	r3, [r7, #4]
 8111790:	68db      	ldr	r3, [r3, #12]
 8111792:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8111796:	687b      	ldr	r3, [r7, #4]
 8111798:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 811179a:	6878      	ldr	r0, [r7, #4]
 811179c:	f000 faaa 	bl	8111cf4 <USB_CoreReset>
 81117a0:	4603      	mov	r3, r0
 81117a2:	73fb      	strb	r3, [r7, #15]
 81117a4:	e01a      	b.n	81117dc <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 81117a6:	687b      	ldr	r3, [r7, #4]
 81117a8:	68db      	ldr	r3, [r3, #12]
 81117aa:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 81117ae:	687b      	ldr	r3, [r7, #4]
 81117b0:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 81117b2:	6878      	ldr	r0, [r7, #4]
 81117b4:	f000 fa9e 	bl	8111cf4 <USB_CoreReset>
 81117b8:	4603      	mov	r3, r0
 81117ba:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 81117bc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 81117be:	2b00      	cmp	r3, #0
 81117c0:	d106      	bne.n	81117d0 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 81117c2:	687b      	ldr	r3, [r7, #4]
 81117c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 81117c6:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 81117ca:	687b      	ldr	r3, [r7, #4]
 81117cc:	639a      	str	r2, [r3, #56]	; 0x38
 81117ce:	e005      	b.n	81117dc <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 81117d0:	687b      	ldr	r3, [r7, #4]
 81117d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 81117d4:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 81117d8:	687b      	ldr	r3, [r7, #4]
 81117da:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 81117dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 81117de:	2b01      	cmp	r3, #1
 81117e0:	d118      	bne.n	8111814 <USB_CoreInit+0xcc>
  {
    /* make sure to reserve 18 fifo Locations for DMA buffers */
    USBx->GDFIFOCFG &= ~(0xFFFFU << 16);
 81117e2:	687b      	ldr	r3, [r7, #4]
 81117e4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 81117e6:	b29a      	uxth	r2, r3
 81117e8:	687b      	ldr	r3, [r7, #4]
 81117ea:	65da      	str	r2, [r3, #92]	; 0x5c
    USBx->GDFIFOCFG |= 0x3EEU << 16;
 81117ec:	687b      	ldr	r3, [r7, #4]
 81117ee:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 81117f0:	f043 737b 	orr.w	r3, r3, #65798144	; 0x3ec0000
 81117f4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 81117f8:	687a      	ldr	r2, [r7, #4]
 81117fa:	65d3      	str	r3, [r2, #92]	; 0x5c

    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 81117fc:	687b      	ldr	r3, [r7, #4]
 81117fe:	689b      	ldr	r3, [r3, #8]
 8111800:	f043 0206 	orr.w	r2, r3, #6
 8111804:	687b      	ldr	r3, [r7, #4]
 8111806:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8111808:	687b      	ldr	r3, [r7, #4]
 811180a:	689b      	ldr	r3, [r3, #8]
 811180c:	f043 0220 	orr.w	r2, r3, #32
 8111810:	687b      	ldr	r3, [r7, #4]
 8111812:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8111814:	7bfb      	ldrb	r3, [r7, #15]
}
 8111816:	4618      	mov	r0, r3
 8111818:	3710      	adds	r7, #16
 811181a:	46bd      	mov	sp, r7
 811181c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8111820:	b004      	add	sp, #16
 8111822:	4770      	bx	lr

08111824 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8111824:	b480      	push	{r7}
 8111826:	b083      	sub	sp, #12
 8111828:	af00      	add	r7, sp, #0
 811182a:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 811182c:	687b      	ldr	r3, [r7, #4]
 811182e:	689b      	ldr	r3, [r3, #8]
 8111830:	f023 0201 	bic.w	r2, r3, #1
 8111834:	687b      	ldr	r3, [r7, #4]
 8111836:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8111838:	2300      	movs	r3, #0
}
 811183a:	4618      	mov	r0, r3
 811183c:	370c      	adds	r7, #12
 811183e:	46bd      	mov	sp, r7
 8111840:	f85d 7b04 	ldr.w	r7, [sp], #4
 8111844:	4770      	bx	lr

08111846 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8111846:	b580      	push	{r7, lr}
 8111848:	b084      	sub	sp, #16
 811184a:	af00      	add	r7, sp, #0
 811184c:	6078      	str	r0, [r7, #4]
 811184e:	460b      	mov	r3, r1
 8111850:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8111852:	2300      	movs	r3, #0
 8111854:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8111856:	687b      	ldr	r3, [r7, #4]
 8111858:	68db      	ldr	r3, [r3, #12]
 811185a:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 811185e:	687b      	ldr	r3, [r7, #4]
 8111860:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8111862:	78fb      	ldrb	r3, [r7, #3]
 8111864:	2b01      	cmp	r3, #1
 8111866:	d115      	bne.n	8111894 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8111868:	687b      	ldr	r3, [r7, #4]
 811186a:	68db      	ldr	r3, [r3, #12]
 811186c:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8111870:	687b      	ldr	r3, [r7, #4]
 8111872:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8111874:	2001      	movs	r0, #1
 8111876:	f7f5 fedd 	bl	8107634 <HAL_Delay>
      ms++;
 811187a:	68fb      	ldr	r3, [r7, #12]
 811187c:	3301      	adds	r3, #1
 811187e:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8111880:	6878      	ldr	r0, [r7, #4]
 8111882:	f000 fa29 	bl	8111cd8 <USB_GetMode>
 8111886:	4603      	mov	r3, r0
 8111888:	2b01      	cmp	r3, #1
 811188a:	d01e      	beq.n	81118ca <USB_SetCurrentMode+0x84>
 811188c:	68fb      	ldr	r3, [r7, #12]
 811188e:	2b31      	cmp	r3, #49	; 0x31
 8111890:	d9f0      	bls.n	8111874 <USB_SetCurrentMode+0x2e>
 8111892:	e01a      	b.n	81118ca <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8111894:	78fb      	ldrb	r3, [r7, #3]
 8111896:	2b00      	cmp	r3, #0
 8111898:	d115      	bne.n	81118c6 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 811189a:	687b      	ldr	r3, [r7, #4]
 811189c:	68db      	ldr	r3, [r3, #12]
 811189e:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 81118a2:	687b      	ldr	r3, [r7, #4]
 81118a4:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 81118a6:	2001      	movs	r0, #1
 81118a8:	f7f5 fec4 	bl	8107634 <HAL_Delay>
      ms++;
 81118ac:	68fb      	ldr	r3, [r7, #12]
 81118ae:	3301      	adds	r3, #1
 81118b0:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 81118b2:	6878      	ldr	r0, [r7, #4]
 81118b4:	f000 fa10 	bl	8111cd8 <USB_GetMode>
 81118b8:	4603      	mov	r3, r0
 81118ba:	2b00      	cmp	r3, #0
 81118bc:	d005      	beq.n	81118ca <USB_SetCurrentMode+0x84>
 81118be:	68fb      	ldr	r3, [r7, #12]
 81118c0:	2b31      	cmp	r3, #49	; 0x31
 81118c2:	d9f0      	bls.n	81118a6 <USB_SetCurrentMode+0x60>
 81118c4:	e001      	b.n	81118ca <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 81118c6:	2301      	movs	r3, #1
 81118c8:	e005      	b.n	81118d6 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 81118ca:	68fb      	ldr	r3, [r7, #12]
 81118cc:	2b32      	cmp	r3, #50	; 0x32
 81118ce:	d101      	bne.n	81118d4 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 81118d0:	2301      	movs	r3, #1
 81118d2:	e000      	b.n	81118d6 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 81118d4:	2300      	movs	r3, #0
}
 81118d6:	4618      	mov	r0, r3
 81118d8:	3710      	adds	r7, #16
 81118da:	46bd      	mov	sp, r7
 81118dc:	bd80      	pop	{r7, pc}
	...

081118e0 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 81118e0:	b084      	sub	sp, #16
 81118e2:	b580      	push	{r7, lr}
 81118e4:	b086      	sub	sp, #24
 81118e6:	af00      	add	r7, sp, #0
 81118e8:	6078      	str	r0, [r7, #4]
 81118ea:	f107 0024 	add.w	r0, r7, #36	; 0x24
 81118ee:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 81118f2:	2300      	movs	r3, #0
 81118f4:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 81118f6:	687b      	ldr	r3, [r7, #4]
 81118f8:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 81118fa:	2300      	movs	r3, #0
 81118fc:	613b      	str	r3, [r7, #16]
 81118fe:	e009      	b.n	8111914 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8111900:	687a      	ldr	r2, [r7, #4]
 8111902:	693b      	ldr	r3, [r7, #16]
 8111904:	3340      	adds	r3, #64	; 0x40
 8111906:	009b      	lsls	r3, r3, #2
 8111908:	4413      	add	r3, r2
 811190a:	2200      	movs	r2, #0
 811190c:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 811190e:	693b      	ldr	r3, [r7, #16]
 8111910:	3301      	adds	r3, #1
 8111912:	613b      	str	r3, [r7, #16]
 8111914:	693b      	ldr	r3, [r7, #16]
 8111916:	2b0e      	cmp	r3, #14
 8111918:	d9f2      	bls.n	8111900 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 811191a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 811191c:	2b00      	cmp	r3, #0
 811191e:	d11c      	bne.n	811195a <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8111920:	68fb      	ldr	r3, [r7, #12]
 8111922:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8111926:	685b      	ldr	r3, [r3, #4]
 8111928:	68fa      	ldr	r2, [r7, #12]
 811192a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 811192e:	f043 0302 	orr.w	r3, r3, #2
 8111932:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8111934:	687b      	ldr	r3, [r7, #4]
 8111936:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8111938:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 811193c:	687b      	ldr	r3, [r7, #4]
 811193e:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8111940:	687b      	ldr	r3, [r7, #4]
 8111942:	681b      	ldr	r3, [r3, #0]
 8111944:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8111948:	687b      	ldr	r3, [r7, #4]
 811194a:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 811194c:	687b      	ldr	r3, [r7, #4]
 811194e:	681b      	ldr	r3, [r3, #0]
 8111950:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8111954:	687b      	ldr	r3, [r7, #4]
 8111956:	601a      	str	r2, [r3, #0]
 8111958:	e005      	b.n	8111966 <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 811195a:	687b      	ldr	r3, [r7, #4]
 811195c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 811195e:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8111962:	687b      	ldr	r3, [r7, #4]
 8111964:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8111966:	68fb      	ldr	r3, [r7, #12]
 8111968:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 811196c:	461a      	mov	r2, r3
 811196e:	2300      	movs	r3, #0
 8111970:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8111972:	68fb      	ldr	r3, [r7, #12]
 8111974:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8111978:	4619      	mov	r1, r3
 811197a:	68fb      	ldr	r3, [r7, #12]
 811197c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8111980:	461a      	mov	r2, r3
 8111982:	680b      	ldr	r3, [r1, #0]
 8111984:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8111986:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8111988:	2b01      	cmp	r3, #1
 811198a:	d10c      	bne.n	81119a6 <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 811198c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 811198e:	2b00      	cmp	r3, #0
 8111990:	d104      	bne.n	811199c <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8111992:	2100      	movs	r1, #0
 8111994:	6878      	ldr	r0, [r7, #4]
 8111996:	f000 f965 	bl	8111c64 <USB_SetDevSpeed>
 811199a:	e008      	b.n	81119ae <USB_DevInit+0xce>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 811199c:	2101      	movs	r1, #1
 811199e:	6878      	ldr	r0, [r7, #4]
 81119a0:	f000 f960 	bl	8111c64 <USB_SetDevSpeed>
 81119a4:	e003      	b.n	81119ae <USB_DevInit+0xce>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 81119a6:	2103      	movs	r1, #3
 81119a8:	6878      	ldr	r0, [r7, #4]
 81119aa:	f000 f95b 	bl	8111c64 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 81119ae:	2110      	movs	r1, #16
 81119b0:	6878      	ldr	r0, [r7, #4]
 81119b2:	f000 f8f3 	bl	8111b9c <USB_FlushTxFifo>
 81119b6:	4603      	mov	r3, r0
 81119b8:	2b00      	cmp	r3, #0
 81119ba:	d001      	beq.n	81119c0 <USB_DevInit+0xe0>
  {
    ret = HAL_ERROR;
 81119bc:	2301      	movs	r3, #1
 81119be:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 81119c0:	6878      	ldr	r0, [r7, #4]
 81119c2:	f000 f91f 	bl	8111c04 <USB_FlushRxFifo>
 81119c6:	4603      	mov	r3, r0
 81119c8:	2b00      	cmp	r3, #0
 81119ca:	d001      	beq.n	81119d0 <USB_DevInit+0xf0>
  {
    ret = HAL_ERROR;
 81119cc:	2301      	movs	r3, #1
 81119ce:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 81119d0:	68fb      	ldr	r3, [r7, #12]
 81119d2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 81119d6:	461a      	mov	r2, r3
 81119d8:	2300      	movs	r3, #0
 81119da:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 81119dc:	68fb      	ldr	r3, [r7, #12]
 81119de:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 81119e2:	461a      	mov	r2, r3
 81119e4:	2300      	movs	r3, #0
 81119e6:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 81119e8:	68fb      	ldr	r3, [r7, #12]
 81119ea:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 81119ee:	461a      	mov	r2, r3
 81119f0:	2300      	movs	r3, #0
 81119f2:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 81119f4:	2300      	movs	r3, #0
 81119f6:	613b      	str	r3, [r7, #16]
 81119f8:	e043      	b.n	8111a82 <USB_DevInit+0x1a2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 81119fa:	693b      	ldr	r3, [r7, #16]
 81119fc:	015a      	lsls	r2, r3, #5
 81119fe:	68fb      	ldr	r3, [r7, #12]
 8111a00:	4413      	add	r3, r2
 8111a02:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8111a06:	681b      	ldr	r3, [r3, #0]
 8111a08:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8111a0c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8111a10:	d118      	bne.n	8111a44 <USB_DevInit+0x164>
    {
      if (i == 0U)
 8111a12:	693b      	ldr	r3, [r7, #16]
 8111a14:	2b00      	cmp	r3, #0
 8111a16:	d10a      	bne.n	8111a2e <USB_DevInit+0x14e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8111a18:	693b      	ldr	r3, [r7, #16]
 8111a1a:	015a      	lsls	r2, r3, #5
 8111a1c:	68fb      	ldr	r3, [r7, #12]
 8111a1e:	4413      	add	r3, r2
 8111a20:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8111a24:	461a      	mov	r2, r3
 8111a26:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8111a2a:	6013      	str	r3, [r2, #0]
 8111a2c:	e013      	b.n	8111a56 <USB_DevInit+0x176>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8111a2e:	693b      	ldr	r3, [r7, #16]
 8111a30:	015a      	lsls	r2, r3, #5
 8111a32:	68fb      	ldr	r3, [r7, #12]
 8111a34:	4413      	add	r3, r2
 8111a36:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8111a3a:	461a      	mov	r2, r3
 8111a3c:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8111a40:	6013      	str	r3, [r2, #0]
 8111a42:	e008      	b.n	8111a56 <USB_DevInit+0x176>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8111a44:	693b      	ldr	r3, [r7, #16]
 8111a46:	015a      	lsls	r2, r3, #5
 8111a48:	68fb      	ldr	r3, [r7, #12]
 8111a4a:	4413      	add	r3, r2
 8111a4c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8111a50:	461a      	mov	r2, r3
 8111a52:	2300      	movs	r3, #0
 8111a54:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8111a56:	693b      	ldr	r3, [r7, #16]
 8111a58:	015a      	lsls	r2, r3, #5
 8111a5a:	68fb      	ldr	r3, [r7, #12]
 8111a5c:	4413      	add	r3, r2
 8111a5e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8111a62:	461a      	mov	r2, r3
 8111a64:	2300      	movs	r3, #0
 8111a66:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8111a68:	693b      	ldr	r3, [r7, #16]
 8111a6a:	015a      	lsls	r2, r3, #5
 8111a6c:	68fb      	ldr	r3, [r7, #12]
 8111a6e:	4413      	add	r3, r2
 8111a70:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8111a74:	461a      	mov	r2, r3
 8111a76:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8111a7a:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8111a7c:	693b      	ldr	r3, [r7, #16]
 8111a7e:	3301      	adds	r3, #1
 8111a80:	613b      	str	r3, [r7, #16]
 8111a82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8111a84:	693a      	ldr	r2, [r7, #16]
 8111a86:	429a      	cmp	r2, r3
 8111a88:	d3b7      	bcc.n	81119fa <USB_DevInit+0x11a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8111a8a:	2300      	movs	r3, #0
 8111a8c:	613b      	str	r3, [r7, #16]
 8111a8e:	e043      	b.n	8111b18 <USB_DevInit+0x238>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8111a90:	693b      	ldr	r3, [r7, #16]
 8111a92:	015a      	lsls	r2, r3, #5
 8111a94:	68fb      	ldr	r3, [r7, #12]
 8111a96:	4413      	add	r3, r2
 8111a98:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8111a9c:	681b      	ldr	r3, [r3, #0]
 8111a9e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8111aa2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8111aa6:	d118      	bne.n	8111ada <USB_DevInit+0x1fa>
    {
      if (i == 0U)
 8111aa8:	693b      	ldr	r3, [r7, #16]
 8111aaa:	2b00      	cmp	r3, #0
 8111aac:	d10a      	bne.n	8111ac4 <USB_DevInit+0x1e4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8111aae:	693b      	ldr	r3, [r7, #16]
 8111ab0:	015a      	lsls	r2, r3, #5
 8111ab2:	68fb      	ldr	r3, [r7, #12]
 8111ab4:	4413      	add	r3, r2
 8111ab6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8111aba:	461a      	mov	r2, r3
 8111abc:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8111ac0:	6013      	str	r3, [r2, #0]
 8111ac2:	e013      	b.n	8111aec <USB_DevInit+0x20c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8111ac4:	693b      	ldr	r3, [r7, #16]
 8111ac6:	015a      	lsls	r2, r3, #5
 8111ac8:	68fb      	ldr	r3, [r7, #12]
 8111aca:	4413      	add	r3, r2
 8111acc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8111ad0:	461a      	mov	r2, r3
 8111ad2:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8111ad6:	6013      	str	r3, [r2, #0]
 8111ad8:	e008      	b.n	8111aec <USB_DevInit+0x20c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8111ada:	693b      	ldr	r3, [r7, #16]
 8111adc:	015a      	lsls	r2, r3, #5
 8111ade:	68fb      	ldr	r3, [r7, #12]
 8111ae0:	4413      	add	r3, r2
 8111ae2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8111ae6:	461a      	mov	r2, r3
 8111ae8:	2300      	movs	r3, #0
 8111aea:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8111aec:	693b      	ldr	r3, [r7, #16]
 8111aee:	015a      	lsls	r2, r3, #5
 8111af0:	68fb      	ldr	r3, [r7, #12]
 8111af2:	4413      	add	r3, r2
 8111af4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8111af8:	461a      	mov	r2, r3
 8111afa:	2300      	movs	r3, #0
 8111afc:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8111afe:	693b      	ldr	r3, [r7, #16]
 8111b00:	015a      	lsls	r2, r3, #5
 8111b02:	68fb      	ldr	r3, [r7, #12]
 8111b04:	4413      	add	r3, r2
 8111b06:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8111b0a:	461a      	mov	r2, r3
 8111b0c:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8111b10:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8111b12:	693b      	ldr	r3, [r7, #16]
 8111b14:	3301      	adds	r3, #1
 8111b16:	613b      	str	r3, [r7, #16]
 8111b18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8111b1a:	693a      	ldr	r2, [r7, #16]
 8111b1c:	429a      	cmp	r2, r3
 8111b1e:	d3b7      	bcc.n	8111a90 <USB_DevInit+0x1b0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8111b20:	68fb      	ldr	r3, [r7, #12]
 8111b22:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8111b26:	691b      	ldr	r3, [r3, #16]
 8111b28:	68fa      	ldr	r2, [r7, #12]
 8111b2a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8111b2e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8111b32:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8111b34:	687b      	ldr	r3, [r7, #4]
 8111b36:	2200      	movs	r2, #0
 8111b38:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8111b3a:	687b      	ldr	r3, [r7, #4]
 8111b3c:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8111b40:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8111b42:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8111b44:	2b00      	cmp	r3, #0
 8111b46:	d105      	bne.n	8111b54 <USB_DevInit+0x274>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8111b48:	687b      	ldr	r3, [r7, #4]
 8111b4a:	699b      	ldr	r3, [r3, #24]
 8111b4c:	f043 0210 	orr.w	r2, r3, #16
 8111b50:	687b      	ldr	r3, [r7, #4]
 8111b52:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8111b54:	687b      	ldr	r3, [r7, #4]
 8111b56:	699a      	ldr	r2, [r3, #24]
 8111b58:	4b0f      	ldr	r3, [pc, #60]	; (8111b98 <USB_DevInit+0x2b8>)
 8111b5a:	4313      	orrs	r3, r2
 8111b5c:	687a      	ldr	r2, [r7, #4]
 8111b5e:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8111b60:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8111b62:	2b00      	cmp	r3, #0
 8111b64:	d005      	beq.n	8111b72 <USB_DevInit+0x292>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8111b66:	687b      	ldr	r3, [r7, #4]
 8111b68:	699b      	ldr	r3, [r3, #24]
 8111b6a:	f043 0208 	orr.w	r2, r3, #8
 8111b6e:	687b      	ldr	r3, [r7, #4]
 8111b70:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8111b72:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8111b74:	2b01      	cmp	r3, #1
 8111b76:	d107      	bne.n	8111b88 <USB_DevInit+0x2a8>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8111b78:	687b      	ldr	r3, [r7, #4]
 8111b7a:	699b      	ldr	r3, [r3, #24]
 8111b7c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8111b80:	f043 0304 	orr.w	r3, r3, #4
 8111b84:	687a      	ldr	r2, [r7, #4]
 8111b86:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8111b88:	7dfb      	ldrb	r3, [r7, #23]
}
 8111b8a:	4618      	mov	r0, r3
 8111b8c:	3718      	adds	r7, #24
 8111b8e:	46bd      	mov	sp, r7
 8111b90:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8111b94:	b004      	add	sp, #16
 8111b96:	4770      	bx	lr
 8111b98:	803c3800 	.word	0x803c3800

08111b9c <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8111b9c:	b480      	push	{r7}
 8111b9e:	b085      	sub	sp, #20
 8111ba0:	af00      	add	r7, sp, #0
 8111ba2:	6078      	str	r0, [r7, #4]
 8111ba4:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8111ba6:	2300      	movs	r3, #0
 8111ba8:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8111baa:	68fb      	ldr	r3, [r7, #12]
 8111bac:	3301      	adds	r3, #1
 8111bae:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8111bb0:	68fb      	ldr	r3, [r7, #12]
 8111bb2:	4a13      	ldr	r2, [pc, #76]	; (8111c00 <USB_FlushTxFifo+0x64>)
 8111bb4:	4293      	cmp	r3, r2
 8111bb6:	d901      	bls.n	8111bbc <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8111bb8:	2303      	movs	r3, #3
 8111bba:	e01b      	b.n	8111bf4 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8111bbc:	687b      	ldr	r3, [r7, #4]
 8111bbe:	691b      	ldr	r3, [r3, #16]
 8111bc0:	2b00      	cmp	r3, #0
 8111bc2:	daf2      	bge.n	8111baa <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8111bc4:	2300      	movs	r3, #0
 8111bc6:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8111bc8:	683b      	ldr	r3, [r7, #0]
 8111bca:	019b      	lsls	r3, r3, #6
 8111bcc:	f043 0220 	orr.w	r2, r3, #32
 8111bd0:	687b      	ldr	r3, [r7, #4]
 8111bd2:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8111bd4:	68fb      	ldr	r3, [r7, #12]
 8111bd6:	3301      	adds	r3, #1
 8111bd8:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8111bda:	68fb      	ldr	r3, [r7, #12]
 8111bdc:	4a08      	ldr	r2, [pc, #32]	; (8111c00 <USB_FlushTxFifo+0x64>)
 8111bde:	4293      	cmp	r3, r2
 8111be0:	d901      	bls.n	8111be6 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8111be2:	2303      	movs	r3, #3
 8111be4:	e006      	b.n	8111bf4 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8111be6:	687b      	ldr	r3, [r7, #4]
 8111be8:	691b      	ldr	r3, [r3, #16]
 8111bea:	f003 0320 	and.w	r3, r3, #32
 8111bee:	2b20      	cmp	r3, #32
 8111bf0:	d0f0      	beq.n	8111bd4 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8111bf2:	2300      	movs	r3, #0
}
 8111bf4:	4618      	mov	r0, r3
 8111bf6:	3714      	adds	r7, #20
 8111bf8:	46bd      	mov	sp, r7
 8111bfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8111bfe:	4770      	bx	lr
 8111c00:	00030d40 	.word	0x00030d40

08111c04 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8111c04:	b480      	push	{r7}
 8111c06:	b085      	sub	sp, #20
 8111c08:	af00      	add	r7, sp, #0
 8111c0a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8111c0c:	2300      	movs	r3, #0
 8111c0e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8111c10:	68fb      	ldr	r3, [r7, #12]
 8111c12:	3301      	adds	r3, #1
 8111c14:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8111c16:	68fb      	ldr	r3, [r7, #12]
 8111c18:	4a11      	ldr	r2, [pc, #68]	; (8111c60 <USB_FlushRxFifo+0x5c>)
 8111c1a:	4293      	cmp	r3, r2
 8111c1c:	d901      	bls.n	8111c22 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8111c1e:	2303      	movs	r3, #3
 8111c20:	e018      	b.n	8111c54 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8111c22:	687b      	ldr	r3, [r7, #4]
 8111c24:	691b      	ldr	r3, [r3, #16]
 8111c26:	2b00      	cmp	r3, #0
 8111c28:	daf2      	bge.n	8111c10 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8111c2a:	2300      	movs	r3, #0
 8111c2c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8111c2e:	687b      	ldr	r3, [r7, #4]
 8111c30:	2210      	movs	r2, #16
 8111c32:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8111c34:	68fb      	ldr	r3, [r7, #12]
 8111c36:	3301      	adds	r3, #1
 8111c38:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8111c3a:	68fb      	ldr	r3, [r7, #12]
 8111c3c:	4a08      	ldr	r2, [pc, #32]	; (8111c60 <USB_FlushRxFifo+0x5c>)
 8111c3e:	4293      	cmp	r3, r2
 8111c40:	d901      	bls.n	8111c46 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8111c42:	2303      	movs	r3, #3
 8111c44:	e006      	b.n	8111c54 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8111c46:	687b      	ldr	r3, [r7, #4]
 8111c48:	691b      	ldr	r3, [r3, #16]
 8111c4a:	f003 0310 	and.w	r3, r3, #16
 8111c4e:	2b10      	cmp	r3, #16
 8111c50:	d0f0      	beq.n	8111c34 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8111c52:	2300      	movs	r3, #0
}
 8111c54:	4618      	mov	r0, r3
 8111c56:	3714      	adds	r7, #20
 8111c58:	46bd      	mov	sp, r7
 8111c5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8111c5e:	4770      	bx	lr
 8111c60:	00030d40 	.word	0x00030d40

08111c64 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8111c64:	b480      	push	{r7}
 8111c66:	b085      	sub	sp, #20
 8111c68:	af00      	add	r7, sp, #0
 8111c6a:	6078      	str	r0, [r7, #4]
 8111c6c:	460b      	mov	r3, r1
 8111c6e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8111c70:	687b      	ldr	r3, [r7, #4]
 8111c72:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8111c74:	68fb      	ldr	r3, [r7, #12]
 8111c76:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8111c7a:	681a      	ldr	r2, [r3, #0]
 8111c7c:	78fb      	ldrb	r3, [r7, #3]
 8111c7e:	68f9      	ldr	r1, [r7, #12]
 8111c80:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8111c84:	4313      	orrs	r3, r2
 8111c86:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8111c88:	2300      	movs	r3, #0
}
 8111c8a:	4618      	mov	r0, r3
 8111c8c:	3714      	adds	r7, #20
 8111c8e:	46bd      	mov	sp, r7
 8111c90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8111c94:	4770      	bx	lr

08111c96 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8111c96:	b480      	push	{r7}
 8111c98:	b085      	sub	sp, #20
 8111c9a:	af00      	add	r7, sp, #0
 8111c9c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8111c9e:	687b      	ldr	r3, [r7, #4]
 8111ca0:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8111ca2:	68fb      	ldr	r3, [r7, #12]
 8111ca4:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8111ca8:	681b      	ldr	r3, [r3, #0]
 8111caa:	68fa      	ldr	r2, [r7, #12]
 8111cac:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8111cb0:	f023 0303 	bic.w	r3, r3, #3
 8111cb4:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8111cb6:	68fb      	ldr	r3, [r7, #12]
 8111cb8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8111cbc:	685b      	ldr	r3, [r3, #4]
 8111cbe:	68fa      	ldr	r2, [r7, #12]
 8111cc0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8111cc4:	f043 0302 	orr.w	r3, r3, #2
 8111cc8:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8111cca:	2300      	movs	r3, #0
}
 8111ccc:	4618      	mov	r0, r3
 8111cce:	3714      	adds	r7, #20
 8111cd0:	46bd      	mov	sp, r7
 8111cd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8111cd6:	4770      	bx	lr

08111cd8 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8111cd8:	b480      	push	{r7}
 8111cda:	b083      	sub	sp, #12
 8111cdc:	af00      	add	r7, sp, #0
 8111cde:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8111ce0:	687b      	ldr	r3, [r7, #4]
 8111ce2:	695b      	ldr	r3, [r3, #20]
 8111ce4:	f003 0301 	and.w	r3, r3, #1
}
 8111ce8:	4618      	mov	r0, r3
 8111cea:	370c      	adds	r7, #12
 8111cec:	46bd      	mov	sp, r7
 8111cee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8111cf2:	4770      	bx	lr

08111cf4 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8111cf4:	b480      	push	{r7}
 8111cf6:	b085      	sub	sp, #20
 8111cf8:	af00      	add	r7, sp, #0
 8111cfa:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8111cfc:	2300      	movs	r3, #0
 8111cfe:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8111d00:	68fb      	ldr	r3, [r7, #12]
 8111d02:	3301      	adds	r3, #1
 8111d04:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8111d06:	68fb      	ldr	r3, [r7, #12]
 8111d08:	4a13      	ldr	r2, [pc, #76]	; (8111d58 <USB_CoreReset+0x64>)
 8111d0a:	4293      	cmp	r3, r2
 8111d0c:	d901      	bls.n	8111d12 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8111d0e:	2303      	movs	r3, #3
 8111d10:	e01b      	b.n	8111d4a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8111d12:	687b      	ldr	r3, [r7, #4]
 8111d14:	691b      	ldr	r3, [r3, #16]
 8111d16:	2b00      	cmp	r3, #0
 8111d18:	daf2      	bge.n	8111d00 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8111d1a:	2300      	movs	r3, #0
 8111d1c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8111d1e:	687b      	ldr	r3, [r7, #4]
 8111d20:	691b      	ldr	r3, [r3, #16]
 8111d22:	f043 0201 	orr.w	r2, r3, #1
 8111d26:	687b      	ldr	r3, [r7, #4]
 8111d28:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8111d2a:	68fb      	ldr	r3, [r7, #12]
 8111d2c:	3301      	adds	r3, #1
 8111d2e:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8111d30:	68fb      	ldr	r3, [r7, #12]
 8111d32:	4a09      	ldr	r2, [pc, #36]	; (8111d58 <USB_CoreReset+0x64>)
 8111d34:	4293      	cmp	r3, r2
 8111d36:	d901      	bls.n	8111d3c <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8111d38:	2303      	movs	r3, #3
 8111d3a:	e006      	b.n	8111d4a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8111d3c:	687b      	ldr	r3, [r7, #4]
 8111d3e:	691b      	ldr	r3, [r3, #16]
 8111d40:	f003 0301 	and.w	r3, r3, #1
 8111d44:	2b01      	cmp	r3, #1
 8111d46:	d0f0      	beq.n	8111d2a <USB_CoreReset+0x36>

  return HAL_OK;
 8111d48:	2300      	movs	r3, #0
}
 8111d4a:	4618      	mov	r0, r3
 8111d4c:	3714      	adds	r7, #20
 8111d4e:	46bd      	mov	sp, r7
 8111d50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8111d54:	4770      	bx	lr
 8111d56:	bf00      	nop
 8111d58:	00030d40 	.word	0x00030d40

08111d5c <memset>:
 8111d5c:	4402      	add	r2, r0
 8111d5e:	4603      	mov	r3, r0
 8111d60:	4293      	cmp	r3, r2
 8111d62:	d100      	bne.n	8111d66 <memset+0xa>
 8111d64:	4770      	bx	lr
 8111d66:	f803 1b01 	strb.w	r1, [r3], #1
 8111d6a:	e7f9      	b.n	8111d60 <memset+0x4>

08111d6c <__libc_init_array>:
 8111d6c:	b570      	push	{r4, r5, r6, lr}
 8111d6e:	4d0d      	ldr	r5, [pc, #52]	; (8111da4 <__libc_init_array+0x38>)
 8111d70:	4c0d      	ldr	r4, [pc, #52]	; (8111da8 <__libc_init_array+0x3c>)
 8111d72:	1b64      	subs	r4, r4, r5
 8111d74:	10a4      	asrs	r4, r4, #2
 8111d76:	2600      	movs	r6, #0
 8111d78:	42a6      	cmp	r6, r4
 8111d7a:	d109      	bne.n	8111d90 <__libc_init_array+0x24>
 8111d7c:	4d0b      	ldr	r5, [pc, #44]	; (8111dac <__libc_init_array+0x40>)
 8111d7e:	4c0c      	ldr	r4, [pc, #48]	; (8111db0 <__libc_init_array+0x44>)
 8111d80:	f000 f826 	bl	8111dd0 <_init>
 8111d84:	1b64      	subs	r4, r4, r5
 8111d86:	10a4      	asrs	r4, r4, #2
 8111d88:	2600      	movs	r6, #0
 8111d8a:	42a6      	cmp	r6, r4
 8111d8c:	d105      	bne.n	8111d9a <__libc_init_array+0x2e>
 8111d8e:	bd70      	pop	{r4, r5, r6, pc}
 8111d90:	f855 3b04 	ldr.w	r3, [r5], #4
 8111d94:	4798      	blx	r3
 8111d96:	3601      	adds	r6, #1
 8111d98:	e7ee      	b.n	8111d78 <__libc_init_array+0xc>
 8111d9a:	f855 3b04 	ldr.w	r3, [r5], #4
 8111d9e:	4798      	blx	r3
 8111da0:	3601      	adds	r6, #1
 8111da2:	e7f2      	b.n	8111d8a <__libc_init_array+0x1e>
 8111da4:	08112030 	.word	0x08112030
 8111da8:	08112030 	.word	0x08112030
 8111dac:	08112030 	.word	0x08112030
 8111db0:	08112034 	.word	0x08112034

08111db4 <memcpy>:
 8111db4:	440a      	add	r2, r1
 8111db6:	4291      	cmp	r1, r2
 8111db8:	f100 33ff 	add.w	r3, r0, #4294967295
 8111dbc:	d100      	bne.n	8111dc0 <memcpy+0xc>
 8111dbe:	4770      	bx	lr
 8111dc0:	b510      	push	{r4, lr}
 8111dc2:	f811 4b01 	ldrb.w	r4, [r1], #1
 8111dc6:	f803 4f01 	strb.w	r4, [r3, #1]!
 8111dca:	4291      	cmp	r1, r2
 8111dcc:	d1f9      	bne.n	8111dc2 <memcpy+0xe>
 8111dce:	bd10      	pop	{r4, pc}

08111dd0 <_init>:
 8111dd0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8111dd2:	bf00      	nop
 8111dd4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8111dd6:	bc08      	pop	{r3}
 8111dd8:	469e      	mov	lr, r3
 8111dda:	4770      	bx	lr

08111ddc <_fini>:
 8111ddc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8111dde:	bf00      	nop
 8111de0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8111de2:	bc08      	pop	{r3}
 8111de4:	469e      	mov	lr, r3
 8111de6:	4770      	bx	lr
