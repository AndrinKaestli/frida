
frida_CM4.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08100000  08100000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009e0c  081002a0  081002a0  000102a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001da4  0810a0ac  0810a0ac  0001a0ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0810be50  0810be50  0001be50  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0810be58  0810be58  0001be58  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  0810be5c  0810be5c  0001be5c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         0000006c  10000000  0810be60  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00001db8  1000006c  0810becc  0002006c  2**2
                  ALLOC
  8 ._user_heap_stack 00000c04  10001e24  0810becc  00021e24  2**0
                  ALLOC
  9 .ARM.attributes 00000030  00000000  00000000  0002006c  2**0
                  CONTENTS, READONLY
 10 .comment      00000043  00000000  00000000  0002009c  2**0
                  CONTENTS, READONLY
 11 .debug_info   0002c8e5  00000000  00000000  000200df  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_abbrev 00003d18  00000000  00000000  0004c9c4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_aranges 000026d8  00000000  00000000  000506e0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_rnglists 00001f8c  00000000  00000000  00052db8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_macro  000460af  00000000  00000000  00054d44  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_line   0002dec4  00000000  00000000  0009adf3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_str    001c9954  00000000  00000000  000c8cb7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_frame  0000b7c0  00000000  00000000  0029260c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line_str 00000060  00000000  00000000  0029ddcc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

081002a0 <__do_global_dtors_aux>:
 81002a0:	b510      	push	{r4, lr}
 81002a2:	4c05      	ldr	r4, [pc, #20]	; (81002b8 <__do_global_dtors_aux+0x18>)
 81002a4:	7823      	ldrb	r3, [r4, #0]
 81002a6:	b933      	cbnz	r3, 81002b6 <__do_global_dtors_aux+0x16>
 81002a8:	4b04      	ldr	r3, [pc, #16]	; (81002bc <__do_global_dtors_aux+0x1c>)
 81002aa:	b113      	cbz	r3, 81002b2 <__do_global_dtors_aux+0x12>
 81002ac:	4804      	ldr	r0, [pc, #16]	; (81002c0 <__do_global_dtors_aux+0x20>)
 81002ae:	f3af 8000 	nop.w
 81002b2:	2301      	movs	r3, #1
 81002b4:	7023      	strb	r3, [r4, #0]
 81002b6:	bd10      	pop	{r4, pc}
 81002b8:	1000006c 	.word	0x1000006c
 81002bc:	00000000 	.word	0x00000000
 81002c0:	0810a094 	.word	0x0810a094

081002c4 <frame_dummy>:
 81002c4:	b508      	push	{r3, lr}
 81002c6:	4b03      	ldr	r3, [pc, #12]	; (81002d4 <frame_dummy+0x10>)
 81002c8:	b11b      	cbz	r3, 81002d2 <frame_dummy+0xe>
 81002ca:	4903      	ldr	r1, [pc, #12]	; (81002d8 <frame_dummy+0x14>)
 81002cc:	4803      	ldr	r0, [pc, #12]	; (81002dc <frame_dummy+0x18>)
 81002ce:	f3af 8000 	nop.w
 81002d2:	bd08      	pop	{r3, pc}
 81002d4:	00000000 	.word	0x00000000
 81002d8:	10000070 	.word	0x10000070
 81002dc:	0810a094 	.word	0x0810a094

081002e0 <memchr>:
 81002e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 81002e4:	2a10      	cmp	r2, #16
 81002e6:	db2b      	blt.n	8100340 <memchr+0x60>
 81002e8:	f010 0f07 	tst.w	r0, #7
 81002ec:	d008      	beq.n	8100300 <memchr+0x20>
 81002ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 81002f2:	3a01      	subs	r2, #1
 81002f4:	428b      	cmp	r3, r1
 81002f6:	d02d      	beq.n	8100354 <memchr+0x74>
 81002f8:	f010 0f07 	tst.w	r0, #7
 81002fc:	b342      	cbz	r2, 8100350 <memchr+0x70>
 81002fe:	d1f6      	bne.n	81002ee <memchr+0xe>
 8100300:	b4f0      	push	{r4, r5, r6, r7}
 8100302:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8100306:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 810030a:	f022 0407 	bic.w	r4, r2, #7
 810030e:	f07f 0700 	mvns.w	r7, #0
 8100312:	2300      	movs	r3, #0
 8100314:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8100318:	3c08      	subs	r4, #8
 810031a:	ea85 0501 	eor.w	r5, r5, r1
 810031e:	ea86 0601 	eor.w	r6, r6, r1
 8100322:	fa85 f547 	uadd8	r5, r5, r7
 8100326:	faa3 f587 	sel	r5, r3, r7
 810032a:	fa86 f647 	uadd8	r6, r6, r7
 810032e:	faa5 f687 	sel	r6, r5, r7
 8100332:	b98e      	cbnz	r6, 8100358 <memchr+0x78>
 8100334:	d1ee      	bne.n	8100314 <memchr+0x34>
 8100336:	bcf0      	pop	{r4, r5, r6, r7}
 8100338:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 810033c:	f002 0207 	and.w	r2, r2, #7
 8100340:	b132      	cbz	r2, 8100350 <memchr+0x70>
 8100342:	f810 3b01 	ldrb.w	r3, [r0], #1
 8100346:	3a01      	subs	r2, #1
 8100348:	ea83 0301 	eor.w	r3, r3, r1
 810034c:	b113      	cbz	r3, 8100354 <memchr+0x74>
 810034e:	d1f8      	bne.n	8100342 <memchr+0x62>
 8100350:	2000      	movs	r0, #0
 8100352:	4770      	bx	lr
 8100354:	3801      	subs	r0, #1
 8100356:	4770      	bx	lr
 8100358:	2d00      	cmp	r5, #0
 810035a:	bf06      	itte	eq
 810035c:	4635      	moveq	r5, r6
 810035e:	3803      	subeq	r0, #3
 8100360:	3807      	subne	r0, #7
 8100362:	f015 0f01 	tst.w	r5, #1
 8100366:	d107      	bne.n	8100378 <memchr+0x98>
 8100368:	3001      	adds	r0, #1
 810036a:	f415 7f80 	tst.w	r5, #256	; 0x100
 810036e:	bf02      	ittt	eq
 8100370:	3001      	addeq	r0, #1
 8100372:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8100376:	3001      	addeq	r0, #1
 8100378:	bcf0      	pop	{r4, r5, r6, r7}
 810037a:	3801      	subs	r0, #1
 810037c:	4770      	bx	lr
 810037e:	bf00      	nop

08100380 <__aeabi_uldivmod>:
 8100380:	b953      	cbnz	r3, 8100398 <__aeabi_uldivmod+0x18>
 8100382:	b94a      	cbnz	r2, 8100398 <__aeabi_uldivmod+0x18>
 8100384:	2900      	cmp	r1, #0
 8100386:	bf08      	it	eq
 8100388:	2800      	cmpeq	r0, #0
 810038a:	bf1c      	itt	ne
 810038c:	f04f 31ff 	movne.w	r1, #4294967295
 8100390:	f04f 30ff 	movne.w	r0, #4294967295
 8100394:	f000 b970 	b.w	8100678 <__aeabi_idiv0>
 8100398:	f1ad 0c08 	sub.w	ip, sp, #8
 810039c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 81003a0:	f000 f806 	bl	81003b0 <__udivmoddi4>
 81003a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 81003a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 81003ac:	b004      	add	sp, #16
 81003ae:	4770      	bx	lr

081003b0 <__udivmoddi4>:
 81003b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 81003b4:	9e08      	ldr	r6, [sp, #32]
 81003b6:	460d      	mov	r5, r1
 81003b8:	4604      	mov	r4, r0
 81003ba:	460f      	mov	r7, r1
 81003bc:	2b00      	cmp	r3, #0
 81003be:	d14a      	bne.n	8100456 <__udivmoddi4+0xa6>
 81003c0:	428a      	cmp	r2, r1
 81003c2:	4694      	mov	ip, r2
 81003c4:	d965      	bls.n	8100492 <__udivmoddi4+0xe2>
 81003c6:	fab2 f382 	clz	r3, r2
 81003ca:	b143      	cbz	r3, 81003de <__udivmoddi4+0x2e>
 81003cc:	fa02 fc03 	lsl.w	ip, r2, r3
 81003d0:	f1c3 0220 	rsb	r2, r3, #32
 81003d4:	409f      	lsls	r7, r3
 81003d6:	fa20 f202 	lsr.w	r2, r0, r2
 81003da:	4317      	orrs	r7, r2
 81003dc:	409c      	lsls	r4, r3
 81003de:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 81003e2:	fa1f f58c 	uxth.w	r5, ip
 81003e6:	fbb7 f1fe 	udiv	r1, r7, lr
 81003ea:	0c22      	lsrs	r2, r4, #16
 81003ec:	fb0e 7711 	mls	r7, lr, r1, r7
 81003f0:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 81003f4:	fb01 f005 	mul.w	r0, r1, r5
 81003f8:	4290      	cmp	r0, r2
 81003fa:	d90a      	bls.n	8100412 <__udivmoddi4+0x62>
 81003fc:	eb1c 0202 	adds.w	r2, ip, r2
 8100400:	f101 37ff 	add.w	r7, r1, #4294967295
 8100404:	f080 811c 	bcs.w	8100640 <__udivmoddi4+0x290>
 8100408:	4290      	cmp	r0, r2
 810040a:	f240 8119 	bls.w	8100640 <__udivmoddi4+0x290>
 810040e:	3902      	subs	r1, #2
 8100410:	4462      	add	r2, ip
 8100412:	1a12      	subs	r2, r2, r0
 8100414:	b2a4      	uxth	r4, r4
 8100416:	fbb2 f0fe 	udiv	r0, r2, lr
 810041a:	fb0e 2210 	mls	r2, lr, r0, r2
 810041e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8100422:	fb00 f505 	mul.w	r5, r0, r5
 8100426:	42a5      	cmp	r5, r4
 8100428:	d90a      	bls.n	8100440 <__udivmoddi4+0x90>
 810042a:	eb1c 0404 	adds.w	r4, ip, r4
 810042e:	f100 32ff 	add.w	r2, r0, #4294967295
 8100432:	f080 8107 	bcs.w	8100644 <__udivmoddi4+0x294>
 8100436:	42a5      	cmp	r5, r4
 8100438:	f240 8104 	bls.w	8100644 <__udivmoddi4+0x294>
 810043c:	4464      	add	r4, ip
 810043e:	3802      	subs	r0, #2
 8100440:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8100444:	1b64      	subs	r4, r4, r5
 8100446:	2100      	movs	r1, #0
 8100448:	b11e      	cbz	r6, 8100452 <__udivmoddi4+0xa2>
 810044a:	40dc      	lsrs	r4, r3
 810044c:	2300      	movs	r3, #0
 810044e:	e9c6 4300 	strd	r4, r3, [r6]
 8100452:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8100456:	428b      	cmp	r3, r1
 8100458:	d908      	bls.n	810046c <__udivmoddi4+0xbc>
 810045a:	2e00      	cmp	r6, #0
 810045c:	f000 80ed 	beq.w	810063a <__udivmoddi4+0x28a>
 8100460:	2100      	movs	r1, #0
 8100462:	e9c6 0500 	strd	r0, r5, [r6]
 8100466:	4608      	mov	r0, r1
 8100468:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 810046c:	fab3 f183 	clz	r1, r3
 8100470:	2900      	cmp	r1, #0
 8100472:	d149      	bne.n	8100508 <__udivmoddi4+0x158>
 8100474:	42ab      	cmp	r3, r5
 8100476:	d302      	bcc.n	810047e <__udivmoddi4+0xce>
 8100478:	4282      	cmp	r2, r0
 810047a:	f200 80f8 	bhi.w	810066e <__udivmoddi4+0x2be>
 810047e:	1a84      	subs	r4, r0, r2
 8100480:	eb65 0203 	sbc.w	r2, r5, r3
 8100484:	2001      	movs	r0, #1
 8100486:	4617      	mov	r7, r2
 8100488:	2e00      	cmp	r6, #0
 810048a:	d0e2      	beq.n	8100452 <__udivmoddi4+0xa2>
 810048c:	e9c6 4700 	strd	r4, r7, [r6]
 8100490:	e7df      	b.n	8100452 <__udivmoddi4+0xa2>
 8100492:	b902      	cbnz	r2, 8100496 <__udivmoddi4+0xe6>
 8100494:	deff      	udf	#255	; 0xff
 8100496:	fab2 f382 	clz	r3, r2
 810049a:	2b00      	cmp	r3, #0
 810049c:	f040 8090 	bne.w	81005c0 <__udivmoddi4+0x210>
 81004a0:	1a8a      	subs	r2, r1, r2
 81004a2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 81004a6:	fa1f fe8c 	uxth.w	lr, ip
 81004aa:	2101      	movs	r1, #1
 81004ac:	fbb2 f5f7 	udiv	r5, r2, r7
 81004b0:	fb07 2015 	mls	r0, r7, r5, r2
 81004b4:	0c22      	lsrs	r2, r4, #16
 81004b6:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 81004ba:	fb0e f005 	mul.w	r0, lr, r5
 81004be:	4290      	cmp	r0, r2
 81004c0:	d908      	bls.n	81004d4 <__udivmoddi4+0x124>
 81004c2:	eb1c 0202 	adds.w	r2, ip, r2
 81004c6:	f105 38ff 	add.w	r8, r5, #4294967295
 81004ca:	d202      	bcs.n	81004d2 <__udivmoddi4+0x122>
 81004cc:	4290      	cmp	r0, r2
 81004ce:	f200 80cb 	bhi.w	8100668 <__udivmoddi4+0x2b8>
 81004d2:	4645      	mov	r5, r8
 81004d4:	1a12      	subs	r2, r2, r0
 81004d6:	b2a4      	uxth	r4, r4
 81004d8:	fbb2 f0f7 	udiv	r0, r2, r7
 81004dc:	fb07 2210 	mls	r2, r7, r0, r2
 81004e0:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 81004e4:	fb0e fe00 	mul.w	lr, lr, r0
 81004e8:	45a6      	cmp	lr, r4
 81004ea:	d908      	bls.n	81004fe <__udivmoddi4+0x14e>
 81004ec:	eb1c 0404 	adds.w	r4, ip, r4
 81004f0:	f100 32ff 	add.w	r2, r0, #4294967295
 81004f4:	d202      	bcs.n	81004fc <__udivmoddi4+0x14c>
 81004f6:	45a6      	cmp	lr, r4
 81004f8:	f200 80bb 	bhi.w	8100672 <__udivmoddi4+0x2c2>
 81004fc:	4610      	mov	r0, r2
 81004fe:	eba4 040e 	sub.w	r4, r4, lr
 8100502:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8100506:	e79f      	b.n	8100448 <__udivmoddi4+0x98>
 8100508:	f1c1 0720 	rsb	r7, r1, #32
 810050c:	408b      	lsls	r3, r1
 810050e:	fa22 fc07 	lsr.w	ip, r2, r7
 8100512:	ea4c 0c03 	orr.w	ip, ip, r3
 8100516:	fa05 f401 	lsl.w	r4, r5, r1
 810051a:	fa20 f307 	lsr.w	r3, r0, r7
 810051e:	40fd      	lsrs	r5, r7
 8100520:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8100524:	4323      	orrs	r3, r4
 8100526:	fbb5 f8f9 	udiv	r8, r5, r9
 810052a:	fa1f fe8c 	uxth.w	lr, ip
 810052e:	fb09 5518 	mls	r5, r9, r8, r5
 8100532:	0c1c      	lsrs	r4, r3, #16
 8100534:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8100538:	fb08 f50e 	mul.w	r5, r8, lr
 810053c:	42a5      	cmp	r5, r4
 810053e:	fa02 f201 	lsl.w	r2, r2, r1
 8100542:	fa00 f001 	lsl.w	r0, r0, r1
 8100546:	d90b      	bls.n	8100560 <__udivmoddi4+0x1b0>
 8100548:	eb1c 0404 	adds.w	r4, ip, r4
 810054c:	f108 3aff 	add.w	sl, r8, #4294967295
 8100550:	f080 8088 	bcs.w	8100664 <__udivmoddi4+0x2b4>
 8100554:	42a5      	cmp	r5, r4
 8100556:	f240 8085 	bls.w	8100664 <__udivmoddi4+0x2b4>
 810055a:	f1a8 0802 	sub.w	r8, r8, #2
 810055e:	4464      	add	r4, ip
 8100560:	1b64      	subs	r4, r4, r5
 8100562:	b29d      	uxth	r5, r3
 8100564:	fbb4 f3f9 	udiv	r3, r4, r9
 8100568:	fb09 4413 	mls	r4, r9, r3, r4
 810056c:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8100570:	fb03 fe0e 	mul.w	lr, r3, lr
 8100574:	45a6      	cmp	lr, r4
 8100576:	d908      	bls.n	810058a <__udivmoddi4+0x1da>
 8100578:	eb1c 0404 	adds.w	r4, ip, r4
 810057c:	f103 35ff 	add.w	r5, r3, #4294967295
 8100580:	d26c      	bcs.n	810065c <__udivmoddi4+0x2ac>
 8100582:	45a6      	cmp	lr, r4
 8100584:	d96a      	bls.n	810065c <__udivmoddi4+0x2ac>
 8100586:	3b02      	subs	r3, #2
 8100588:	4464      	add	r4, ip
 810058a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 810058e:	fba3 9502 	umull	r9, r5, r3, r2
 8100592:	eba4 040e 	sub.w	r4, r4, lr
 8100596:	42ac      	cmp	r4, r5
 8100598:	46c8      	mov	r8, r9
 810059a:	46ae      	mov	lr, r5
 810059c:	d356      	bcc.n	810064c <__udivmoddi4+0x29c>
 810059e:	d053      	beq.n	8100648 <__udivmoddi4+0x298>
 81005a0:	b156      	cbz	r6, 81005b8 <__udivmoddi4+0x208>
 81005a2:	ebb0 0208 	subs.w	r2, r0, r8
 81005a6:	eb64 040e 	sbc.w	r4, r4, lr
 81005aa:	fa04 f707 	lsl.w	r7, r4, r7
 81005ae:	40ca      	lsrs	r2, r1
 81005b0:	40cc      	lsrs	r4, r1
 81005b2:	4317      	orrs	r7, r2
 81005b4:	e9c6 7400 	strd	r7, r4, [r6]
 81005b8:	4618      	mov	r0, r3
 81005ba:	2100      	movs	r1, #0
 81005bc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 81005c0:	f1c3 0120 	rsb	r1, r3, #32
 81005c4:	fa02 fc03 	lsl.w	ip, r2, r3
 81005c8:	fa20 f201 	lsr.w	r2, r0, r1
 81005cc:	fa25 f101 	lsr.w	r1, r5, r1
 81005d0:	409d      	lsls	r5, r3
 81005d2:	432a      	orrs	r2, r5
 81005d4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 81005d8:	fa1f fe8c 	uxth.w	lr, ip
 81005dc:	fbb1 f0f7 	udiv	r0, r1, r7
 81005e0:	fb07 1510 	mls	r5, r7, r0, r1
 81005e4:	0c11      	lsrs	r1, r2, #16
 81005e6:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 81005ea:	fb00 f50e 	mul.w	r5, r0, lr
 81005ee:	428d      	cmp	r5, r1
 81005f0:	fa04 f403 	lsl.w	r4, r4, r3
 81005f4:	d908      	bls.n	8100608 <__udivmoddi4+0x258>
 81005f6:	eb1c 0101 	adds.w	r1, ip, r1
 81005fa:	f100 38ff 	add.w	r8, r0, #4294967295
 81005fe:	d22f      	bcs.n	8100660 <__udivmoddi4+0x2b0>
 8100600:	428d      	cmp	r5, r1
 8100602:	d92d      	bls.n	8100660 <__udivmoddi4+0x2b0>
 8100604:	3802      	subs	r0, #2
 8100606:	4461      	add	r1, ip
 8100608:	1b49      	subs	r1, r1, r5
 810060a:	b292      	uxth	r2, r2
 810060c:	fbb1 f5f7 	udiv	r5, r1, r7
 8100610:	fb07 1115 	mls	r1, r7, r5, r1
 8100614:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8100618:	fb05 f10e 	mul.w	r1, r5, lr
 810061c:	4291      	cmp	r1, r2
 810061e:	d908      	bls.n	8100632 <__udivmoddi4+0x282>
 8100620:	eb1c 0202 	adds.w	r2, ip, r2
 8100624:	f105 38ff 	add.w	r8, r5, #4294967295
 8100628:	d216      	bcs.n	8100658 <__udivmoddi4+0x2a8>
 810062a:	4291      	cmp	r1, r2
 810062c:	d914      	bls.n	8100658 <__udivmoddi4+0x2a8>
 810062e:	3d02      	subs	r5, #2
 8100630:	4462      	add	r2, ip
 8100632:	1a52      	subs	r2, r2, r1
 8100634:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8100638:	e738      	b.n	81004ac <__udivmoddi4+0xfc>
 810063a:	4631      	mov	r1, r6
 810063c:	4630      	mov	r0, r6
 810063e:	e708      	b.n	8100452 <__udivmoddi4+0xa2>
 8100640:	4639      	mov	r1, r7
 8100642:	e6e6      	b.n	8100412 <__udivmoddi4+0x62>
 8100644:	4610      	mov	r0, r2
 8100646:	e6fb      	b.n	8100440 <__udivmoddi4+0x90>
 8100648:	4548      	cmp	r0, r9
 810064a:	d2a9      	bcs.n	81005a0 <__udivmoddi4+0x1f0>
 810064c:	ebb9 0802 	subs.w	r8, r9, r2
 8100650:	eb65 0e0c 	sbc.w	lr, r5, ip
 8100654:	3b01      	subs	r3, #1
 8100656:	e7a3      	b.n	81005a0 <__udivmoddi4+0x1f0>
 8100658:	4645      	mov	r5, r8
 810065a:	e7ea      	b.n	8100632 <__udivmoddi4+0x282>
 810065c:	462b      	mov	r3, r5
 810065e:	e794      	b.n	810058a <__udivmoddi4+0x1da>
 8100660:	4640      	mov	r0, r8
 8100662:	e7d1      	b.n	8100608 <__udivmoddi4+0x258>
 8100664:	46d0      	mov	r8, sl
 8100666:	e77b      	b.n	8100560 <__udivmoddi4+0x1b0>
 8100668:	3d02      	subs	r5, #2
 810066a:	4462      	add	r2, ip
 810066c:	e732      	b.n	81004d4 <__udivmoddi4+0x124>
 810066e:	4608      	mov	r0, r1
 8100670:	e70a      	b.n	8100488 <__udivmoddi4+0xd8>
 8100672:	4464      	add	r4, ip
 8100674:	3802      	subs	r0, #2
 8100676:	e742      	b.n	81004fe <__udivmoddi4+0x14e>

08100678 <__aeabi_idiv0>:
 8100678:	4770      	bx	lr
 810067a:	bf00      	nop

0810067c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 810067c:	b480      	push	{r7}
 810067e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8100680:	4b09      	ldr	r3, [pc, #36]	; (81006a8 <SystemInit+0x2c>)
 8100682:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8100686:	4a08      	ldr	r2, [pc, #32]	; (81006a8 <SystemInit+0x2c>)
 8100688:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 810068c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

    /*SEVONPEND enabled so that an interrupt coming from the CPU(n) interrupt signal is
     detectable by the CPU after a WFI/WFE instruction.*/
 SCB->SCR |= SCB_SCR_SEVONPEND_Msk;
 8100690:	4b05      	ldr	r3, [pc, #20]	; (81006a8 <SystemInit+0x2c>)
 8100692:	691b      	ldr	r3, [r3, #16]
 8100694:	4a04      	ldr	r2, [pc, #16]	; (81006a8 <SystemInit+0x2c>)
 8100696:	f043 0310 	orr.w	r3, r3, #16
 810069a:	6113      	str	r3, [r2, #16]
#endif /* USER_VECT_TAB_ADDRESS */

#else
#error Please #define CORE_CM4 or CORE_CM7
#endif /* CORE_CM4 */
}
 810069c:	bf00      	nop
 810069e:	46bd      	mov	sp, r7
 81006a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 81006a4:	4770      	bx	lr
 81006a6:	bf00      	nop
 81006a8:	e000ed00 	.word	0xe000ed00

081006ac <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 81006ac:	b580      	push	{r7, lr}
 81006ae:	b082      	sub	sp, #8
 81006b0:	af00      	add	r7, sp, #0

  /* USER CODE END 1 */

/* USER CODE BEGIN Boot_Mode_Sequence_1 */
  /*HW semaphore Clock enable*/
  __HAL_RCC_HSEM_CLK_ENABLE();
 81006b2:	4b24      	ldr	r3, [pc, #144]	; (8100744 <main+0x98>)
 81006b4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 81006b8:	4a22      	ldr	r2, [pc, #136]	; (8100744 <main+0x98>)
 81006ba:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 81006be:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 81006c2:	4b20      	ldr	r3, [pc, #128]	; (8100744 <main+0x98>)
 81006c4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 81006c8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 81006cc:	607b      	str	r3, [r7, #4]
 81006ce:	687b      	ldr	r3, [r7, #4]
  /* Activate HSEM notification for Cortex-M4*/
  HAL_HSEM_ActivateNotification(__HAL_HSEM_SEMID_TO_MASK(HSEM_ID_0));
 81006d0:	2001      	movs	r0, #1
 81006d2:	f002 ff99 	bl	8103608 <HAL_HSEM_ActivateNotification>
  /*
  Domain D2 goes to STOP mode (Cortex-M4 in deep-sleep) waiting for Cortex-M7 to
  perform system initialization (system clock config, external memory configuration.. )
  */
  HAL_PWREx_ClearPendingEvent();
 81006d6:	f003 f823 	bl	8103720 <HAL_PWREx_ClearPendingEvent>
  HAL_PWREx_EnterSTOPMode(PWR_MAINREGULATOR_ON, PWR_STOPENTRY_WFE, PWR_D2_DOMAIN);
 81006da:	2201      	movs	r2, #1
 81006dc:	2102      	movs	r1, #2
 81006de:	2000      	movs	r0, #0
 81006e0:	f002 ffa4 	bl	810362c <HAL_PWREx_EnterSTOPMode>
  /* Clear HSEM flag */
  __HAL_HSEM_CLEAR_FLAG(__HAL_HSEM_SEMID_TO_MASK(HSEM_ID_0));
 81006e4:	4b18      	ldr	r3, [pc, #96]	; (8100748 <main+0x9c>)
 81006e6:	681b      	ldr	r3, [r3, #0]
 81006e8:	091b      	lsrs	r3, r3, #4
 81006ea:	f003 030f 	and.w	r3, r3, #15
 81006ee:	2b07      	cmp	r3, #7
 81006f0:	d108      	bne.n	8100704 <main+0x58>
 81006f2:	4b16      	ldr	r3, [pc, #88]	; (810074c <main+0xa0>)
 81006f4:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
 81006f8:	4a14      	ldr	r2, [pc, #80]	; (810074c <main+0xa0>)
 81006fa:	f043 0301 	orr.w	r3, r3, #1
 81006fe:	f8c2 3104 	str.w	r3, [r2, #260]	; 0x104
 8100702:	e007      	b.n	8100714 <main+0x68>
 8100704:	4b11      	ldr	r3, [pc, #68]	; (810074c <main+0xa0>)
 8100706:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
 810070a:	4a10      	ldr	r2, [pc, #64]	; (810074c <main+0xa0>)
 810070c:	f043 0301 	orr.w	r3, r3, #1
 8100710:	f8c2 3114 	str.w	r3, [r2, #276]	; 0x114

/* USER CODE END Boot_Mode_Sequence_1 */
  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8100714:	f001 f9de 	bl	8101ad4 <HAL_Init>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8100718:	f000 fb6c 	bl	8100df4 <MX_GPIO_Init>
  MX_ADC1_Init();
 810071c:	f000 f818 	bl	8100750 <MX_ADC1_Init>
  MX_ADC3_Init();
 8100720:	f000 f88e 	bl	8100840 <MX_ADC3_Init>
  MX_HDMI_CEC_Init();
 8100724:	f000 f8ec 	bl	8100900 <MX_HDMI_CEC_Init>
  MX_RTC_Init();
 8100728:	f000 f91e 	bl	8100968 <MX_RTC_Init>
  MX_SAI1_Init();
 810072c:	f000 f96a 	bl	8100a04 <MX_SAI1_Init>
  MX_SPDIFRX1_Init();
 8100730:	f000 fa04 	bl	8100b3c <MX_SPDIFRX1_Init>
  MX_TIM8_Init();
 8100734:	f000 fa3a 	bl	8100bac <MX_TIM8_Init>
  MX_TIM13_Init();
 8100738:	f000 fac8 	bl	8100ccc <MX_TIM13_Init>
  MX_UART8_Init();
 810073c:	f000 fb0e 	bl	8100d5c <MX_UART8_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8100740:	e7fe      	b.n	8100740 <main+0x94>
 8100742:	bf00      	nop
 8100744:	58024400 	.word	0x58024400
 8100748:	e000ed00 	.word	0xe000ed00
 810074c:	58026400 	.word	0x58026400

08100750 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8100750:	b580      	push	{r7, lr}
 8100752:	b08a      	sub	sp, #40	; 0x28
 8100754:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8100756:	f107 031c 	add.w	r3, r7, #28
 810075a:	2200      	movs	r2, #0
 810075c:	601a      	str	r2, [r3, #0]
 810075e:	605a      	str	r2, [r3, #4]
 8100760:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8100762:	463b      	mov	r3, r7
 8100764:	2200      	movs	r2, #0
 8100766:	601a      	str	r2, [r3, #0]
 8100768:	605a      	str	r2, [r3, #4]
 810076a:	609a      	str	r2, [r3, #8]
 810076c:	60da      	str	r2, [r3, #12]
 810076e:	611a      	str	r2, [r3, #16]
 8100770:	615a      	str	r2, [r3, #20]
 8100772:	619a      	str	r2, [r3, #24]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8100774:	4b2f      	ldr	r3, [pc, #188]	; (8100834 <MX_ADC1_Init+0xe4>)
 8100776:	4a30      	ldr	r2, [pc, #192]	; (8100838 <MX_ADC1_Init+0xe8>)
 8100778:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 810077a:	4b2e      	ldr	r3, [pc, #184]	; (8100834 <MX_ADC1_Init+0xe4>)
 810077c:	2200      	movs	r2, #0
 810077e:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_16B;
 8100780:	4b2c      	ldr	r3, [pc, #176]	; (8100834 <MX_ADC1_Init+0xe4>)
 8100782:	2200      	movs	r2, #0
 8100784:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8100786:	4b2b      	ldr	r3, [pc, #172]	; (8100834 <MX_ADC1_Init+0xe4>)
 8100788:	2200      	movs	r2, #0
 810078a:	60da      	str	r2, [r3, #12]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 810078c:	4b29      	ldr	r3, [pc, #164]	; (8100834 <MX_ADC1_Init+0xe4>)
 810078e:	2204      	movs	r2, #4
 8100790:	611a      	str	r2, [r3, #16]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8100792:	4b28      	ldr	r3, [pc, #160]	; (8100834 <MX_ADC1_Init+0xe4>)
 8100794:	2200      	movs	r2, #0
 8100796:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8100798:	4b26      	ldr	r3, [pc, #152]	; (8100834 <MX_ADC1_Init+0xe4>)
 810079a:	2200      	movs	r2, #0
 810079c:	755a      	strb	r2, [r3, #21]
  hadc1.Init.NbrOfConversion = 1;
 810079e:	4b25      	ldr	r3, [pc, #148]	; (8100834 <MX_ADC1_Init+0xe4>)
 81007a0:	2201      	movs	r2, #1
 81007a2:	619a      	str	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 81007a4:	4b23      	ldr	r3, [pc, #140]	; (8100834 <MX_ADC1_Init+0xe4>)
 81007a6:	2200      	movs	r2, #0
 81007a8:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 81007aa:	4b22      	ldr	r3, [pc, #136]	; (8100834 <MX_ADC1_Init+0xe4>)
 81007ac:	2200      	movs	r2, #0
 81007ae:	625a      	str	r2, [r3, #36]	; 0x24
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 81007b0:	4b20      	ldr	r3, [pc, #128]	; (8100834 <MX_ADC1_Init+0xe4>)
 81007b2:	2200      	movs	r2, #0
 81007b4:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DR;
 81007b6:	4b1f      	ldr	r3, [pc, #124]	; (8100834 <MX_ADC1_Init+0xe4>)
 81007b8:	2200      	movs	r2, #0
 81007ba:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 81007bc:	4b1d      	ldr	r3, [pc, #116]	; (8100834 <MX_ADC1_Init+0xe4>)
 81007be:	2200      	movs	r2, #0
 81007c0:	631a      	str	r2, [r3, #48]	; 0x30
  hadc1.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 81007c2:	4b1c      	ldr	r3, [pc, #112]	; (8100834 <MX_ADC1_Init+0xe4>)
 81007c4:	2200      	movs	r2, #0
 81007c6:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 81007c8:	4b1a      	ldr	r3, [pc, #104]	; (8100834 <MX_ADC1_Init+0xe4>)
 81007ca:	2200      	movs	r2, #0
 81007cc:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 81007d0:	4818      	ldr	r0, [pc, #96]	; (8100834 <MX_ADC1_Init+0xe4>)
 81007d2:	f001 fbe1 	bl	8101f98 <HAL_ADC_Init>
 81007d6:	4603      	mov	r3, r0
 81007d8:	2b00      	cmp	r3, #0
 81007da:	d001      	beq.n	81007e0 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 81007dc:	f000 fb8e 	bl	8100efc <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 81007e0:	2300      	movs	r3, #0
 81007e2:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 81007e4:	f107 031c 	add.w	r3, r7, #28
 81007e8:	4619      	mov	r1, r3
 81007ea:	4812      	ldr	r0, [pc, #72]	; (8100834 <MX_ADC1_Init+0xe4>)
 81007ec:	f002 f9f8 	bl	8102be0 <HAL_ADCEx_MultiModeConfigChannel>
 81007f0:	4603      	mov	r3, r0
 81007f2:	2b00      	cmp	r3, #0
 81007f4:	d001      	beq.n	81007fa <MX_ADC1_Init+0xaa>
  {
    Error_Handler();
 81007f6:	f000 fb81 	bl	8100efc <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 81007fa:	4b10      	ldr	r3, [pc, #64]	; (810083c <MX_ADC1_Init+0xec>)
 81007fc:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 81007fe:	2306      	movs	r3, #6
 8100800:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8100802:	2300      	movs	r3, #0
 8100804:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8100806:	f240 73ff 	movw	r3, #2047	; 0x7ff
 810080a:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 810080c:	2304      	movs	r3, #4
 810080e:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8100810:	2300      	movs	r3, #0
 8100812:	617b      	str	r3, [r7, #20]
  sConfig.OffsetSignedSaturation = DISABLE;
 8100814:	2300      	movs	r3, #0
 8100816:	767b      	strb	r3, [r7, #25]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8100818:	463b      	mov	r3, r7
 810081a:	4619      	mov	r1, r3
 810081c:	4805      	ldr	r0, [pc, #20]	; (8100834 <MX_ADC1_Init+0xe4>)
 810081e:	f001 fd5d 	bl	81022dc <HAL_ADC_ConfigChannel>
 8100822:	4603      	mov	r3, r0
 8100824:	2b00      	cmp	r3, #0
 8100826:	d001      	beq.n	810082c <MX_ADC1_Init+0xdc>
  {
    Error_Handler();
 8100828:	f000 fb68 	bl	8100efc <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 810082c:	bf00      	nop
 810082e:	3728      	adds	r7, #40	; 0x28
 8100830:	46bd      	mov	sp, r7
 8100832:	bd80      	pop	{r7, pc}
 8100834:	10000088 	.word	0x10000088
 8100838:	40022000 	.word	0x40022000
 810083c:	04300002 	.word	0x04300002

08100840 <MX_ADC3_Init>:
  * @brief ADC3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC3_Init(void)
{
 8100840:	b580      	push	{r7, lr}
 8100842:	b088      	sub	sp, #32
 8100844:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC3_Init 0 */

  /* USER CODE END ADC3_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8100846:	1d3b      	adds	r3, r7, #4
 8100848:	2200      	movs	r2, #0
 810084a:	601a      	str	r2, [r3, #0]
 810084c:	605a      	str	r2, [r3, #4]
 810084e:	609a      	str	r2, [r3, #8]
 8100850:	60da      	str	r2, [r3, #12]
 8100852:	611a      	str	r2, [r3, #16]
 8100854:	615a      	str	r2, [r3, #20]
 8100856:	619a      	str	r2, [r3, #24]

  /* USER CODE END ADC3_Init 1 */

  /** Common config
  */
  hadc3.Instance = ADC3;
 8100858:	4b27      	ldr	r3, [pc, #156]	; (81008f8 <MX_ADC3_Init+0xb8>)
 810085a:	4a28      	ldr	r2, [pc, #160]	; (81008fc <MX_ADC3_Init+0xbc>)
 810085c:	601a      	str	r2, [r3, #0]
  hadc3.Init.Resolution = ADC_RESOLUTION_16B;
 810085e:	4b26      	ldr	r3, [pc, #152]	; (81008f8 <MX_ADC3_Init+0xb8>)
 8100860:	2200      	movs	r2, #0
 8100862:	609a      	str	r2, [r3, #8]
  hadc3.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8100864:	4b24      	ldr	r3, [pc, #144]	; (81008f8 <MX_ADC3_Init+0xb8>)
 8100866:	2200      	movs	r2, #0
 8100868:	60da      	str	r2, [r3, #12]
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 810086a:	4b23      	ldr	r3, [pc, #140]	; (81008f8 <MX_ADC3_Init+0xb8>)
 810086c:	2204      	movs	r2, #4
 810086e:	611a      	str	r2, [r3, #16]
  hadc3.Init.LowPowerAutoWait = DISABLE;
 8100870:	4b21      	ldr	r3, [pc, #132]	; (81008f8 <MX_ADC3_Init+0xb8>)
 8100872:	2200      	movs	r2, #0
 8100874:	751a      	strb	r2, [r3, #20]
  hadc3.Init.ContinuousConvMode = DISABLE;
 8100876:	4b20      	ldr	r3, [pc, #128]	; (81008f8 <MX_ADC3_Init+0xb8>)
 8100878:	2200      	movs	r2, #0
 810087a:	755a      	strb	r2, [r3, #21]
  hadc3.Init.NbrOfConversion = 1;
 810087c:	4b1e      	ldr	r3, [pc, #120]	; (81008f8 <MX_ADC3_Init+0xb8>)
 810087e:	2201      	movs	r2, #1
 8100880:	619a      	str	r2, [r3, #24]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 8100882:	4b1d      	ldr	r3, [pc, #116]	; (81008f8 <MX_ADC3_Init+0xb8>)
 8100884:	2200      	movs	r2, #0
 8100886:	771a      	strb	r2, [r3, #28]
  hadc3.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8100888:	4b1b      	ldr	r3, [pc, #108]	; (81008f8 <MX_ADC3_Init+0xb8>)
 810088a:	2200      	movs	r2, #0
 810088c:	625a      	str	r2, [r3, #36]	; 0x24
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 810088e:	4b1a      	ldr	r3, [pc, #104]	; (81008f8 <MX_ADC3_Init+0xb8>)
 8100890:	2200      	movs	r2, #0
 8100892:	629a      	str	r2, [r3, #40]	; 0x28
  hadc3.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DR;
 8100894:	4b18      	ldr	r3, [pc, #96]	; (81008f8 <MX_ADC3_Init+0xb8>)
 8100896:	2200      	movs	r2, #0
 8100898:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc3.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 810089a:	4b17      	ldr	r3, [pc, #92]	; (81008f8 <MX_ADC3_Init+0xb8>)
 810089c:	2200      	movs	r2, #0
 810089e:	631a      	str	r2, [r3, #48]	; 0x30
  hadc3.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 81008a0:	4b15      	ldr	r3, [pc, #84]	; (81008f8 <MX_ADC3_Init+0xb8>)
 81008a2:	2200      	movs	r2, #0
 81008a4:	635a      	str	r2, [r3, #52]	; 0x34
  hadc3.Init.OversamplingMode = DISABLE;
 81008a6:	4b14      	ldr	r3, [pc, #80]	; (81008f8 <MX_ADC3_Init+0xb8>)
 81008a8:	2200      	movs	r2, #0
 81008aa:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 81008ae:	4812      	ldr	r0, [pc, #72]	; (81008f8 <MX_ADC3_Init+0xb8>)
 81008b0:	f001 fb72 	bl	8101f98 <HAL_ADC_Init>
 81008b4:	4603      	mov	r3, r0
 81008b6:	2b00      	cmp	r3, #0
 81008b8:	d001      	beq.n	81008be <MX_ADC3_Init+0x7e>
  {
    Error_Handler();
 81008ba:	f000 fb1f 	bl	8100efc <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_0;
 81008be:	2301      	movs	r3, #1
 81008c0:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 81008c2:	2306      	movs	r3, #6
 81008c4:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 81008c6:	2300      	movs	r3, #0
 81008c8:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 81008ca:	f240 73ff 	movw	r3, #2047	; 0x7ff
 81008ce:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 81008d0:	2304      	movs	r3, #4
 81008d2:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 81008d4:	2300      	movs	r3, #0
 81008d6:	61bb      	str	r3, [r7, #24]
  sConfig.OffsetSignedSaturation = DISABLE;
 81008d8:	2300      	movs	r3, #0
 81008da:	777b      	strb	r3, [r7, #29]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 81008dc:	1d3b      	adds	r3, r7, #4
 81008de:	4619      	mov	r1, r3
 81008e0:	4805      	ldr	r0, [pc, #20]	; (81008f8 <MX_ADC3_Init+0xb8>)
 81008e2:	f001 fcfb 	bl	81022dc <HAL_ADC_ConfigChannel>
 81008e6:	4603      	mov	r3, r0
 81008e8:	2b00      	cmp	r3, #0
 81008ea:	d001      	beq.n	81008f0 <MX_ADC3_Init+0xb0>
  {
    Error_Handler();
 81008ec:	f000 fb06 	bl	8100efc <Error_Handler>
  }
  /* USER CODE BEGIN ADC3_Init 2 */

  /* USER CODE END ADC3_Init 2 */

}
 81008f0:	bf00      	nop
 81008f2:	3720      	adds	r7, #32
 81008f4:	46bd      	mov	sp, r7
 81008f6:	bd80      	pop	{r7, pc}
 81008f8:	100000ec 	.word	0x100000ec
 81008fc:	58026000 	.word	0x58026000

08100900 <MX_HDMI_CEC_Init>:
  * @brief HDMI_CEC Initialization Function
  * @param None
  * @retval None
  */
static void MX_HDMI_CEC_Init(void)
{
 8100900:	b580      	push	{r7, lr}
 8100902:	af00      	add	r7, sp, #0
  /* USER CODE END HDMI_CEC_Init 0 */

  /* USER CODE BEGIN HDMI_CEC_Init 1 */

  /* USER CODE END HDMI_CEC_Init 1 */
  hcec.Instance = CEC;
 8100904:	4b15      	ldr	r3, [pc, #84]	; (810095c <MX_HDMI_CEC_Init+0x5c>)
 8100906:	4a16      	ldr	r2, [pc, #88]	; (8100960 <MX_HDMI_CEC_Init+0x60>)
 8100908:	601a      	str	r2, [r3, #0]
  hcec.Init.SignalFreeTime = CEC_DEFAULT_SFT;
 810090a:	4b14      	ldr	r3, [pc, #80]	; (810095c <MX_HDMI_CEC_Init+0x5c>)
 810090c:	2200      	movs	r2, #0
 810090e:	605a      	str	r2, [r3, #4]
  hcec.Init.Tolerance = CEC_STANDARD_TOLERANCE;
 8100910:	4b12      	ldr	r3, [pc, #72]	; (810095c <MX_HDMI_CEC_Init+0x5c>)
 8100912:	2200      	movs	r2, #0
 8100914:	609a      	str	r2, [r3, #8]
  hcec.Init.BRERxStop = CEC_RX_STOP_ON_BRE;
 8100916:	4b11      	ldr	r3, [pc, #68]	; (810095c <MX_HDMI_CEC_Init+0x5c>)
 8100918:	2210      	movs	r2, #16
 810091a:	60da      	str	r2, [r3, #12]
  hcec.Init.BREErrorBitGen = CEC_BRE_ERRORBIT_NO_GENERATION;
 810091c:	4b0f      	ldr	r3, [pc, #60]	; (810095c <MX_HDMI_CEC_Init+0x5c>)
 810091e:	2200      	movs	r2, #0
 8100920:	611a      	str	r2, [r3, #16]
  hcec.Init.LBPEErrorBitGen = CEC_LBPE_ERRORBIT_NO_GENERATION;
 8100922:	4b0e      	ldr	r3, [pc, #56]	; (810095c <MX_HDMI_CEC_Init+0x5c>)
 8100924:	2200      	movs	r2, #0
 8100926:	615a      	str	r2, [r3, #20]
  hcec.Init.BroadcastMsgNoErrorBitGen = CEC_BROADCASTERROR_ERRORBIT_GENERATION;
 8100928:	4b0c      	ldr	r3, [pc, #48]	; (810095c <MX_HDMI_CEC_Init+0x5c>)
 810092a:	2200      	movs	r2, #0
 810092c:	619a      	str	r2, [r3, #24]
  hcec.Init.SignalFreeTimeOption = CEC_SFT_START_ON_TXSOM;
 810092e:	4b0b      	ldr	r3, [pc, #44]	; (810095c <MX_HDMI_CEC_Init+0x5c>)
 8100930:	2200      	movs	r2, #0
 8100932:	61da      	str	r2, [r3, #28]
  hcec.Init.ListenMode = CEC_FULL_LISTENING_MODE;
 8100934:	4b09      	ldr	r3, [pc, #36]	; (810095c <MX_HDMI_CEC_Init+0x5c>)
 8100936:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 810093a:	621a      	str	r2, [r3, #32]
  hcec.Init.OwnAddress = CEC_OWN_ADDRESS_NONE;
 810093c:	4b07      	ldr	r3, [pc, #28]	; (810095c <MX_HDMI_CEC_Init+0x5c>)
 810093e:	2200      	movs	r2, #0
 8100940:	849a      	strh	r2, [r3, #36]	; 0x24
  hcec.Init.RxBuffer = cec_receive_buffer;
 8100942:	4b06      	ldr	r3, [pc, #24]	; (810095c <MX_HDMI_CEC_Init+0x5c>)
 8100944:	4a07      	ldr	r2, [pc, #28]	; (8100964 <MX_HDMI_CEC_Init+0x64>)
 8100946:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_CEC_Init(&hcec) != HAL_OK)
 8100948:	4804      	ldr	r0, [pc, #16]	; (810095c <MX_HDMI_CEC_Init+0x5c>)
 810094a:	f002 fa2b 	bl	8102da4 <HAL_CEC_Init>
 810094e:	4603      	mov	r3, r0
 8100950:	2b00      	cmp	r3, #0
 8100952:	d001      	beq.n	8100958 <MX_HDMI_CEC_Init+0x58>
  {
    Error_Handler();
 8100954:	f000 fad2 	bl	8100efc <Error_Handler>
  }
  /* USER CODE BEGIN HDMI_CEC_Init 2 */

  /* USER CODE END HDMI_CEC_Init 2 */

}
 8100958:	bf00      	nop
 810095a:	bd80      	pop	{r7, pc}
 810095c:	10000150 	.word	0x10000150
 8100960:	40006c00 	.word	0x40006c00
 8100964:	10000464 	.word	0x10000464

08100968 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8100968:	b580      	push	{r7, lr}
 810096a:	b08a      	sub	sp, #40	; 0x28
 810096c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TamperTypeDef sTamper = {0};
 810096e:	463b      	mov	r3, r7
 8100970:	2228      	movs	r2, #40	; 0x28
 8100972:	2100      	movs	r1, #0
 8100974:	4618      	mov	r0, r3
 8100976:	f008 ff05 	bl	8109784 <memset>

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 810097a:	4b20      	ldr	r3, [pc, #128]	; (81009fc <MX_RTC_Init+0x94>)
 810097c:	4a20      	ldr	r2, [pc, #128]	; (8100a00 <MX_RTC_Init+0x98>)
 810097e:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8100980:	4b1e      	ldr	r3, [pc, #120]	; (81009fc <MX_RTC_Init+0x94>)
 8100982:	2200      	movs	r2, #0
 8100984:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8100986:	4b1d      	ldr	r3, [pc, #116]	; (81009fc <MX_RTC_Init+0x94>)
 8100988:	227f      	movs	r2, #127	; 0x7f
 810098a:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 810098c:	4b1b      	ldr	r3, [pc, #108]	; (81009fc <MX_RTC_Init+0x94>)
 810098e:	22ff      	movs	r2, #255	; 0xff
 8100990:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8100992:	4b1a      	ldr	r3, [pc, #104]	; (81009fc <MX_RTC_Init+0x94>)
 8100994:	2200      	movs	r2, #0
 8100996:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8100998:	4b18      	ldr	r3, [pc, #96]	; (81009fc <MX_RTC_Init+0x94>)
 810099a:	2200      	movs	r2, #0
 810099c:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 810099e:	4b17      	ldr	r3, [pc, #92]	; (81009fc <MX_RTC_Init+0x94>)
 81009a0:	2200      	movs	r2, #0
 81009a2:	61da      	str	r2, [r3, #28]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 81009a4:	4b15      	ldr	r3, [pc, #84]	; (81009fc <MX_RTC_Init+0x94>)
 81009a6:	2200      	movs	r2, #0
 81009a8:	615a      	str	r2, [r3, #20]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 81009aa:	4814      	ldr	r0, [pc, #80]	; (81009fc <MX_RTC_Init+0x94>)
 81009ac:	f005 fddc 	bl	8106568 <HAL_RTC_Init>
 81009b0:	4603      	mov	r3, r0
 81009b2:	2b00      	cmp	r3, #0
 81009b4:	d001      	beq.n	81009ba <MX_RTC_Init+0x52>
  {
    Error_Handler();
 81009b6:	f000 faa1 	bl	8100efc <Error_Handler>
  }

  /** Enable the RTC Tamper 1
  */
  sTamper.Tamper = RTC_TAMPER_1;
 81009ba:	2301      	movs	r3, #1
 81009bc:	603b      	str	r3, [r7, #0]
  sTamper.Trigger = RTC_TAMPERTRIGGER_RISINGEDGE;
 81009be:	2301      	movs	r3, #1
 81009c0:	60bb      	str	r3, [r7, #8]
  sTamper.NoErase = RTC_TAMPER_ERASE_BACKUP_ENABLE;
 81009c2:	2300      	movs	r3, #0
 81009c4:	60fb      	str	r3, [r7, #12]
  sTamper.MaskFlag = RTC_TAMPERMASK_FLAG_DISABLE;
 81009c6:	2300      	movs	r3, #0
 81009c8:	613b      	str	r3, [r7, #16]
  sTamper.Filter = RTC_TAMPERFILTER_DISABLE;
 81009ca:	2300      	movs	r3, #0
 81009cc:	617b      	str	r3, [r7, #20]
  sTamper.SamplingFrequency = RTC_TAMPERSAMPLINGFREQ_RTCCLK_DIV32768;
 81009ce:	2300      	movs	r3, #0
 81009d0:	61bb      	str	r3, [r7, #24]
  sTamper.PrechargeDuration = RTC_TAMPERPRECHARGEDURATION_1RTCCLK;
 81009d2:	2300      	movs	r3, #0
 81009d4:	61fb      	str	r3, [r7, #28]
  sTamper.TamperPullUp = RTC_TAMPER_PULLUP_ENABLE;
 81009d6:	2300      	movs	r3, #0
 81009d8:	623b      	str	r3, [r7, #32]
  sTamper.TimeStampOnTamperDetection = RTC_TIMESTAMPONTAMPERDETECTION_ENABLE;
 81009da:	2380      	movs	r3, #128	; 0x80
 81009dc:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_RTCEx_SetTamper(&hrtc, &sTamper) != HAL_OK)
 81009de:	463b      	mov	r3, r7
 81009e0:	4619      	mov	r1, r3
 81009e2:	4806      	ldr	r0, [pc, #24]	; (81009fc <MX_RTC_Init+0x94>)
 81009e4:	f005 fed8 	bl	8106798 <HAL_RTCEx_SetTamper>
 81009e8:	4603      	mov	r3, r0
 81009ea:	2b00      	cmp	r3, #0
 81009ec:	d001      	beq.n	81009f2 <MX_RTC_Init+0x8a>
  {
    Error_Handler();
 81009ee:	f000 fa85 	bl	8100efc <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 81009f2:	bf00      	nop
 81009f4:	3728      	adds	r7, #40	; 0x28
 81009f6:	46bd      	mov	sp, r7
 81009f8:	bd80      	pop	{r7, pc}
 81009fa:	bf00      	nop
 81009fc:	10000194 	.word	0x10000194
 8100a00:	58004000 	.word	0x58004000

08100a04 <MX_SAI1_Init>:
  * @brief SAI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SAI1_Init(void)
{
 8100a04:	b580      	push	{r7, lr}
 8100a06:	af00      	add	r7, sp, #0
  /* USER CODE END SAI1_Init 0 */

  /* USER CODE BEGIN SAI1_Init 1 */

  /* USER CODE END SAI1_Init 1 */
  hsai_BlockA1.Instance = SAI1_Block_A;
 8100a08:	4b47      	ldr	r3, [pc, #284]	; (8100b28 <MX_SAI1_Init+0x124>)
 8100a0a:	4a48      	ldr	r2, [pc, #288]	; (8100b2c <MX_SAI1_Init+0x128>)
 8100a0c:	601a      	str	r2, [r3, #0]
  hsai_BlockA1.Init.Protocol = SAI_FREE_PROTOCOL;
 8100a0e:	4b46      	ldr	r3, [pc, #280]	; (8100b28 <MX_SAI1_Init+0x124>)
 8100a10:	2200      	movs	r2, #0
 8100a12:	645a      	str	r2, [r3, #68]	; 0x44
  hsai_BlockA1.Init.AudioMode = SAI_MODEMASTER_TX;
 8100a14:	4b44      	ldr	r3, [pc, #272]	; (8100b28 <MX_SAI1_Init+0x124>)
 8100a16:	2200      	movs	r2, #0
 8100a18:	605a      	str	r2, [r3, #4]
  hsai_BlockA1.Init.DataSize = SAI_DATASIZE_8;
 8100a1a:	4b43      	ldr	r3, [pc, #268]	; (8100b28 <MX_SAI1_Init+0x124>)
 8100a1c:	2240      	movs	r2, #64	; 0x40
 8100a1e:	649a      	str	r2, [r3, #72]	; 0x48
  hsai_BlockA1.Init.FirstBit = SAI_FIRSTBIT_MSB;
 8100a20:	4b41      	ldr	r3, [pc, #260]	; (8100b28 <MX_SAI1_Init+0x124>)
 8100a22:	2200      	movs	r2, #0
 8100a24:	64da      	str	r2, [r3, #76]	; 0x4c
  hsai_BlockA1.Init.ClockStrobing = SAI_CLOCKSTROBING_FALLINGEDGE;
 8100a26:	4b40      	ldr	r3, [pc, #256]	; (8100b28 <MX_SAI1_Init+0x124>)
 8100a28:	2200      	movs	r2, #0
 8100a2a:	651a      	str	r2, [r3, #80]	; 0x50
  hsai_BlockA1.Init.Synchro = SAI_ASYNCHRONOUS;
 8100a2c:	4b3e      	ldr	r3, [pc, #248]	; (8100b28 <MX_SAI1_Init+0x124>)
 8100a2e:	2200      	movs	r2, #0
 8100a30:	609a      	str	r2, [r3, #8]
  hsai_BlockA1.Init.OutputDrive = SAI_OUTPUTDRIVE_DISABLE;
 8100a32:	4b3d      	ldr	r3, [pc, #244]	; (8100b28 <MX_SAI1_Init+0x124>)
 8100a34:	2200      	movs	r2, #0
 8100a36:	615a      	str	r2, [r3, #20]
  hsai_BlockA1.Init.NoDivider = SAI_MASTERDIVIDER_ENABLE;
 8100a38:	4b3b      	ldr	r3, [pc, #236]	; (8100b28 <MX_SAI1_Init+0x124>)
 8100a3a:	2200      	movs	r2, #0
 8100a3c:	619a      	str	r2, [r3, #24]
  hsai_BlockA1.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_EMPTY;
 8100a3e:	4b3a      	ldr	r3, [pc, #232]	; (8100b28 <MX_SAI1_Init+0x124>)
 8100a40:	2200      	movs	r2, #0
 8100a42:	61da      	str	r2, [r3, #28]
  hsai_BlockA1.Init.AudioFrequency = SAI_AUDIO_FREQUENCY_192K;
 8100a44:	4b38      	ldr	r3, [pc, #224]	; (8100b28 <MX_SAI1_Init+0x124>)
 8100a46:	4a3a      	ldr	r2, [pc, #232]	; (8100b30 <MX_SAI1_Init+0x12c>)
 8100a48:	621a      	str	r2, [r3, #32]
  hsai_BlockA1.Init.SynchroExt = SAI_SYNCEXT_DISABLE;
 8100a4a:	4b37      	ldr	r3, [pc, #220]	; (8100b28 <MX_SAI1_Init+0x124>)
 8100a4c:	2200      	movs	r2, #0
 8100a4e:	60da      	str	r2, [r3, #12]
  hsai_BlockA1.Init.MonoStereoMode = SAI_STEREOMODE;
 8100a50:	4b35      	ldr	r3, [pc, #212]	; (8100b28 <MX_SAI1_Init+0x124>)
 8100a52:	2200      	movs	r2, #0
 8100a54:	62da      	str	r2, [r3, #44]	; 0x2c
  hsai_BlockA1.Init.CompandingMode = SAI_NOCOMPANDING;
 8100a56:	4b34      	ldr	r3, [pc, #208]	; (8100b28 <MX_SAI1_Init+0x124>)
 8100a58:	2200      	movs	r2, #0
 8100a5a:	631a      	str	r2, [r3, #48]	; 0x30
  hsai_BlockA1.Init.TriState = SAI_OUTPUT_NOTRELEASED;
 8100a5c:	4b32      	ldr	r3, [pc, #200]	; (8100b28 <MX_SAI1_Init+0x124>)
 8100a5e:	2200      	movs	r2, #0
 8100a60:	635a      	str	r2, [r3, #52]	; 0x34
  hsai_BlockA1.Init.PdmInit.Activation = DISABLE;
 8100a62:	4b31      	ldr	r3, [pc, #196]	; (8100b28 <MX_SAI1_Init+0x124>)
 8100a64:	2200      	movs	r2, #0
 8100a66:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hsai_BlockA1.Init.PdmInit.MicPairsNbr = 1;
 8100a6a:	4b2f      	ldr	r3, [pc, #188]	; (8100b28 <MX_SAI1_Init+0x124>)
 8100a6c:	2201      	movs	r2, #1
 8100a6e:	63da      	str	r2, [r3, #60]	; 0x3c
  hsai_BlockA1.Init.PdmInit.ClockEnable = SAI_PDM_CLOCK1_ENABLE;
 8100a70:	4b2d      	ldr	r3, [pc, #180]	; (8100b28 <MX_SAI1_Init+0x124>)
 8100a72:	f44f 7280 	mov.w	r2, #256	; 0x100
 8100a76:	641a      	str	r2, [r3, #64]	; 0x40
  hsai_BlockA1.FrameInit.FrameLength = 8;
 8100a78:	4b2b      	ldr	r3, [pc, #172]	; (8100b28 <MX_SAI1_Init+0x124>)
 8100a7a:	2208      	movs	r2, #8
 8100a7c:	655a      	str	r2, [r3, #84]	; 0x54
  hsai_BlockA1.FrameInit.ActiveFrameLength = 1;
 8100a7e:	4b2a      	ldr	r3, [pc, #168]	; (8100b28 <MX_SAI1_Init+0x124>)
 8100a80:	2201      	movs	r2, #1
 8100a82:	659a      	str	r2, [r3, #88]	; 0x58
  hsai_BlockA1.FrameInit.FSDefinition = SAI_FS_STARTFRAME;
 8100a84:	4b28      	ldr	r3, [pc, #160]	; (8100b28 <MX_SAI1_Init+0x124>)
 8100a86:	2200      	movs	r2, #0
 8100a88:	65da      	str	r2, [r3, #92]	; 0x5c
  hsai_BlockA1.FrameInit.FSPolarity = SAI_FS_ACTIVE_LOW;
 8100a8a:	4b27      	ldr	r3, [pc, #156]	; (8100b28 <MX_SAI1_Init+0x124>)
 8100a8c:	2200      	movs	r2, #0
 8100a8e:	661a      	str	r2, [r3, #96]	; 0x60
  hsai_BlockA1.FrameInit.FSOffset = SAI_FS_FIRSTBIT;
 8100a90:	4b25      	ldr	r3, [pc, #148]	; (8100b28 <MX_SAI1_Init+0x124>)
 8100a92:	2200      	movs	r2, #0
 8100a94:	665a      	str	r2, [r3, #100]	; 0x64
  hsai_BlockA1.SlotInit.FirstBitOffset = 0;
 8100a96:	4b24      	ldr	r3, [pc, #144]	; (8100b28 <MX_SAI1_Init+0x124>)
 8100a98:	2200      	movs	r2, #0
 8100a9a:	669a      	str	r2, [r3, #104]	; 0x68
  hsai_BlockA1.SlotInit.SlotSize = SAI_SLOTSIZE_DATASIZE;
 8100a9c:	4b22      	ldr	r3, [pc, #136]	; (8100b28 <MX_SAI1_Init+0x124>)
 8100a9e:	2200      	movs	r2, #0
 8100aa0:	66da      	str	r2, [r3, #108]	; 0x6c
  hsai_BlockA1.SlotInit.SlotNumber = 1;
 8100aa2:	4b21      	ldr	r3, [pc, #132]	; (8100b28 <MX_SAI1_Init+0x124>)
 8100aa4:	2201      	movs	r2, #1
 8100aa6:	671a      	str	r2, [r3, #112]	; 0x70
  hsai_BlockA1.SlotInit.SlotActive = 0x00000000;
 8100aa8:	4b1f      	ldr	r3, [pc, #124]	; (8100b28 <MX_SAI1_Init+0x124>)
 8100aaa:	2200      	movs	r2, #0
 8100aac:	675a      	str	r2, [r3, #116]	; 0x74
  if (HAL_SAI_Init(&hsai_BlockA1) != HAL_OK)
 8100aae:	481e      	ldr	r0, [pc, #120]	; (8100b28 <MX_SAI1_Init+0x124>)
 8100ab0:	f005 ff52 	bl	8106958 <HAL_SAI_Init>
 8100ab4:	4603      	mov	r3, r0
 8100ab6:	2b00      	cmp	r3, #0
 8100ab8:	d001      	beq.n	8100abe <MX_SAI1_Init+0xba>
  {
    Error_Handler();
 8100aba:	f000 fa1f 	bl	8100efc <Error_Handler>
  }
  hsai_BlockB1.Instance = SAI1_Block_B;
 8100abe:	4b1d      	ldr	r3, [pc, #116]	; (8100b34 <MX_SAI1_Init+0x130>)
 8100ac0:	4a1d      	ldr	r2, [pc, #116]	; (8100b38 <MX_SAI1_Init+0x134>)
 8100ac2:	601a      	str	r2, [r3, #0]
  hsai_BlockB1.Init.Protocol = SAI_SPDIF_PROTOCOL;
 8100ac4:	4b1b      	ldr	r3, [pc, #108]	; (8100b34 <MX_SAI1_Init+0x130>)
 8100ac6:	2204      	movs	r2, #4
 8100ac8:	645a      	str	r2, [r3, #68]	; 0x44
  hsai_BlockB1.Init.AudioMode = SAI_MODEMASTER_TX;
 8100aca:	4b1a      	ldr	r3, [pc, #104]	; (8100b34 <MX_SAI1_Init+0x130>)
 8100acc:	2200      	movs	r2, #0
 8100ace:	605a      	str	r2, [r3, #4]
  hsai_BlockB1.Init.Synchro = SAI_ASYNCHRONOUS;
 8100ad0:	4b18      	ldr	r3, [pc, #96]	; (8100b34 <MX_SAI1_Init+0x130>)
 8100ad2:	2200      	movs	r2, #0
 8100ad4:	609a      	str	r2, [r3, #8]
  hsai_BlockB1.Init.OutputDrive = SAI_OUTPUTDRIVE_DISABLE;
 8100ad6:	4b17      	ldr	r3, [pc, #92]	; (8100b34 <MX_SAI1_Init+0x130>)
 8100ad8:	2200      	movs	r2, #0
 8100ada:	615a      	str	r2, [r3, #20]
  hsai_BlockB1.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_EMPTY;
 8100adc:	4b15      	ldr	r3, [pc, #84]	; (8100b34 <MX_SAI1_Init+0x130>)
 8100ade:	2200      	movs	r2, #0
 8100ae0:	61da      	str	r2, [r3, #28]
  hsai_BlockB1.Init.AudioFrequency = SAI_AUDIO_FREQUENCY_48K;
 8100ae2:	4b14      	ldr	r3, [pc, #80]	; (8100b34 <MX_SAI1_Init+0x130>)
 8100ae4:	f64b 3280 	movw	r2, #48000	; 0xbb80
 8100ae8:	621a      	str	r2, [r3, #32]
  hsai_BlockB1.Init.SynchroExt = SAI_SYNCEXT_DISABLE;
 8100aea:	4b12      	ldr	r3, [pc, #72]	; (8100b34 <MX_SAI1_Init+0x130>)
 8100aec:	2200      	movs	r2, #0
 8100aee:	60da      	str	r2, [r3, #12]
  hsai_BlockB1.Init.MonoStereoMode = SAI_STEREOMODE;
 8100af0:	4b10      	ldr	r3, [pc, #64]	; (8100b34 <MX_SAI1_Init+0x130>)
 8100af2:	2200      	movs	r2, #0
 8100af4:	62da      	str	r2, [r3, #44]	; 0x2c
  hsai_BlockB1.Init.CompandingMode = SAI_NOCOMPANDING;
 8100af6:	4b0f      	ldr	r3, [pc, #60]	; (8100b34 <MX_SAI1_Init+0x130>)
 8100af8:	2200      	movs	r2, #0
 8100afa:	631a      	str	r2, [r3, #48]	; 0x30
  hsai_BlockB1.Init.PdmInit.Activation = DISABLE;
 8100afc:	4b0d      	ldr	r3, [pc, #52]	; (8100b34 <MX_SAI1_Init+0x130>)
 8100afe:	2200      	movs	r2, #0
 8100b00:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hsai_BlockB1.Init.PdmInit.MicPairsNbr = 1;
 8100b04:	4b0b      	ldr	r3, [pc, #44]	; (8100b34 <MX_SAI1_Init+0x130>)
 8100b06:	2201      	movs	r2, #1
 8100b08:	63da      	str	r2, [r3, #60]	; 0x3c
  hsai_BlockB1.Init.PdmInit.ClockEnable = SAI_PDM_CLOCK1_ENABLE;
 8100b0a:	4b0a      	ldr	r3, [pc, #40]	; (8100b34 <MX_SAI1_Init+0x130>)
 8100b0c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8100b10:	641a      	str	r2, [r3, #64]	; 0x40
  if (HAL_SAI_Init(&hsai_BlockB1) != HAL_OK)
 8100b12:	4808      	ldr	r0, [pc, #32]	; (8100b34 <MX_SAI1_Init+0x130>)
 8100b14:	f005 ff20 	bl	8106958 <HAL_SAI_Init>
 8100b18:	4603      	mov	r3, r0
 8100b1a:	2b00      	cmp	r3, #0
 8100b1c:	d001      	beq.n	8100b22 <MX_SAI1_Init+0x11e>
  {
    Error_Handler();
 8100b1e:	f000 f9ed 	bl	8100efc <Error_Handler>
  }
  /* USER CODE BEGIN SAI1_Init 2 */

  /* USER CODE END SAI1_Init 2 */

}
 8100b22:	bf00      	nop
 8100b24:	bd80      	pop	{r7, pc}
 8100b26:	bf00      	nop
 8100b28:	100001b8 	.word	0x100001b8
 8100b2c:	40015804 	.word	0x40015804
 8100b30:	0002ee00 	.word	0x0002ee00
 8100b34:	10000250 	.word	0x10000250
 8100b38:	40015824 	.word	0x40015824

08100b3c <MX_SPDIFRX1_Init>:
  * @brief SPDIFRX1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPDIFRX1_Init(void)
{
 8100b3c:	b580      	push	{r7, lr}
 8100b3e:	af00      	add	r7, sp, #0
  /* USER CODE END SPDIFRX1_Init 0 */

  /* USER CODE BEGIN SPDIFRX1_Init 1 */

  /* USER CODE END SPDIFRX1_Init 1 */
  hspdif1.Instance = SPDIFRX;
 8100b40:	4b19      	ldr	r3, [pc, #100]	; (8100ba8 <MX_SPDIFRX1_Init+0x6c>)
 8100b42:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
 8100b46:	601a      	str	r2, [r3, #0]
  hspdif1.Init.InputSelection = SPDIFRX_INPUT_IN0;
 8100b48:	4b17      	ldr	r3, [pc, #92]	; (8100ba8 <MX_SPDIFRX1_Init+0x6c>)
 8100b4a:	2200      	movs	r2, #0
 8100b4c:	605a      	str	r2, [r3, #4]
  hspdif1.Init.Retries = SPDIFRX_MAXRETRIES_NONE;
 8100b4e:	4b16      	ldr	r3, [pc, #88]	; (8100ba8 <MX_SPDIFRX1_Init+0x6c>)
 8100b50:	2200      	movs	r2, #0
 8100b52:	609a      	str	r2, [r3, #8]
  hspdif1.Init.WaitForActivity = SPDIFRX_WAITFORACTIVITY_OFF;
 8100b54:	4b14      	ldr	r3, [pc, #80]	; (8100ba8 <MX_SPDIFRX1_Init+0x6c>)
 8100b56:	2200      	movs	r2, #0
 8100b58:	60da      	str	r2, [r3, #12]
  hspdif1.Init.ChannelSelection = SPDIFRX_CHANNEL_A;
 8100b5a:	4b13      	ldr	r3, [pc, #76]	; (8100ba8 <MX_SPDIFRX1_Init+0x6c>)
 8100b5c:	2200      	movs	r2, #0
 8100b5e:	611a      	str	r2, [r3, #16]
  hspdif1.Init.DataFormat = SPDIFRX_DATAFORMAT_LSB;
 8100b60:	4b11      	ldr	r3, [pc, #68]	; (8100ba8 <MX_SPDIFRX1_Init+0x6c>)
 8100b62:	2200      	movs	r2, #0
 8100b64:	615a      	str	r2, [r3, #20]
  hspdif1.Init.StereoMode = SPDIFRX_STEREOMODE_DISABLE;
 8100b66:	4b10      	ldr	r3, [pc, #64]	; (8100ba8 <MX_SPDIFRX1_Init+0x6c>)
 8100b68:	2200      	movs	r2, #0
 8100b6a:	619a      	str	r2, [r3, #24]
  hspdif1.Init.PreambleTypeMask = SPDIFRX_PREAMBLETYPEMASK_OFF;
 8100b6c:	4b0e      	ldr	r3, [pc, #56]	; (8100ba8 <MX_SPDIFRX1_Init+0x6c>)
 8100b6e:	2200      	movs	r2, #0
 8100b70:	61da      	str	r2, [r3, #28]
  hspdif1.Init.ChannelStatusMask = SPDIFRX_CHANNELSTATUS_OFF;
 8100b72:	4b0d      	ldr	r3, [pc, #52]	; (8100ba8 <MX_SPDIFRX1_Init+0x6c>)
 8100b74:	2200      	movs	r2, #0
 8100b76:	621a      	str	r2, [r3, #32]
  hspdif1.Init.ValidityBitMask = SPDIFRX_VALIDITYMASK_OFF;
 8100b78:	4b0b      	ldr	r3, [pc, #44]	; (8100ba8 <MX_SPDIFRX1_Init+0x6c>)
 8100b7a:	2200      	movs	r2, #0
 8100b7c:	625a      	str	r2, [r3, #36]	; 0x24
  hspdif1.Init.ParityErrorMask = SPDIFRX_PARITYERRORMASK_OFF;
 8100b7e:	4b0a      	ldr	r3, [pc, #40]	; (8100ba8 <MX_SPDIFRX1_Init+0x6c>)
 8100b80:	2200      	movs	r2, #0
 8100b82:	629a      	str	r2, [r3, #40]	; 0x28
  hspdif1.Init.SymbolClockGen = DISABLE;
 8100b84:	4b08      	ldr	r3, [pc, #32]	; (8100ba8 <MX_SPDIFRX1_Init+0x6c>)
 8100b86:	2200      	movs	r2, #0
 8100b88:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  hspdif1.Init.BackupSymbolClockGen = DISABLE;
 8100b8c:	4b06      	ldr	r3, [pc, #24]	; (8100ba8 <MX_SPDIFRX1_Init+0x6c>)
 8100b8e:	2200      	movs	r2, #0
 8100b90:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
  if (HAL_SPDIFRX_Init(&hspdif1) != HAL_OK)
 8100b94:	4804      	ldr	r0, [pc, #16]	; (8100ba8 <MX_SPDIFRX1_Init+0x6c>)
 8100b96:	f006 f9c3 	bl	8106f20 <HAL_SPDIFRX_Init>
 8100b9a:	4603      	mov	r3, r0
 8100b9c:	2b00      	cmp	r3, #0
 8100b9e:	d001      	beq.n	8100ba4 <MX_SPDIFRX1_Init+0x68>
  {
    Error_Handler();
 8100ba0:	f000 f9ac 	bl	8100efc <Error_Handler>
  }
  /* USER CODE BEGIN SPDIFRX1_Init 2 */

  /* USER CODE END SPDIFRX1_Init 2 */

}
 8100ba4:	bf00      	nop
 8100ba6:	bd80      	pop	{r7, pc}
 8100ba8:	100002e8 	.word	0x100002e8

08100bac <MX_TIM8_Init>:
  * @brief TIM8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM8_Init(void)
{
 8100bac:	b580      	push	{r7, lr}
 8100bae:	b096      	sub	sp, #88	; 0x58
 8100bb0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8100bb2:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8100bb6:	2200      	movs	r2, #0
 8100bb8:	601a      	str	r2, [r3, #0]
 8100bba:	605a      	str	r2, [r3, #4]
 8100bbc:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8100bbe:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8100bc2:	2200      	movs	r2, #0
 8100bc4:	601a      	str	r2, [r3, #0]
 8100bc6:	605a      	str	r2, [r3, #4]
 8100bc8:	609a      	str	r2, [r3, #8]
 8100bca:	60da      	str	r2, [r3, #12]
 8100bcc:	611a      	str	r2, [r3, #16]
 8100bce:	615a      	str	r2, [r3, #20]
 8100bd0:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8100bd2:	1d3b      	adds	r3, r7, #4
 8100bd4:	222c      	movs	r2, #44	; 0x2c
 8100bd6:	2100      	movs	r1, #0
 8100bd8:	4618      	mov	r0, r3
 8100bda:	f008 fdd3 	bl	8109784 <memset>

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 8100bde:	4b39      	ldr	r3, [pc, #228]	; (8100cc4 <MX_TIM8_Init+0x118>)
 8100be0:	4a39      	ldr	r2, [pc, #228]	; (8100cc8 <MX_TIM8_Init+0x11c>)
 8100be2:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 0;
 8100be4:	4b37      	ldr	r3, [pc, #220]	; (8100cc4 <MX_TIM8_Init+0x118>)
 8100be6:	2200      	movs	r2, #0
 8100be8:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 8100bea:	4b36      	ldr	r3, [pc, #216]	; (8100cc4 <MX_TIM8_Init+0x118>)
 8100bec:	2200      	movs	r2, #0
 8100bee:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 65535;
 8100bf0:	4b34      	ldr	r3, [pc, #208]	; (8100cc4 <MX_TIM8_Init+0x118>)
 8100bf2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8100bf6:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8100bf8:	4b32      	ldr	r3, [pc, #200]	; (8100cc4 <MX_TIM8_Init+0x118>)
 8100bfa:	2200      	movs	r2, #0
 8100bfc:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 8100bfe:	4b31      	ldr	r3, [pc, #196]	; (8100cc4 <MX_TIM8_Init+0x118>)
 8100c00:	2200      	movs	r2, #0
 8100c02:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8100c04:	4b2f      	ldr	r3, [pc, #188]	; (8100cc4 <MX_TIM8_Init+0x118>)
 8100c06:	2200      	movs	r2, #0
 8100c08:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_OC_Init(&htim8) != HAL_OK)
 8100c0a:	482e      	ldr	r0, [pc, #184]	; (8100cc4 <MX_TIM8_Init+0x118>)
 8100c0c:	f006 fa4d 	bl	81070aa <HAL_TIM_OC_Init>
 8100c10:	4603      	mov	r3, r0
 8100c12:	2b00      	cmp	r3, #0
 8100c14:	d001      	beq.n	8100c1a <MX_TIM8_Init+0x6e>
  {
    Error_Handler();
 8100c16:	f000 f971 	bl	8100efc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8100c1a:	2300      	movs	r3, #0
 8100c1c:	64fb      	str	r3, [r7, #76]	; 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8100c1e:	2300      	movs	r3, #0
 8100c20:	653b      	str	r3, [r7, #80]	; 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8100c22:	2300      	movs	r3, #0
 8100c24:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 8100c26:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8100c2a:	4619      	mov	r1, r3
 8100c2c:	4825      	ldr	r0, [pc, #148]	; (8100cc4 <MX_TIM8_Init+0x118>)
 8100c2e:	f007 f8a5 	bl	8107d7c <HAL_TIMEx_MasterConfigSynchronization>
 8100c32:	4603      	mov	r3, r0
 8100c34:	2b00      	cmp	r3, #0
 8100c36:	d001      	beq.n	8100c3c <MX_TIM8_Init+0x90>
  {
    Error_Handler();
 8100c38:	f000 f960 	bl	8100efc <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TIMING;
 8100c3c:	2300      	movs	r3, #0
 8100c3e:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.Pulse = 0;
 8100c40:	2300      	movs	r3, #0
 8100c42:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8100c44:	2300      	movs	r3, #0
 8100c46:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8100c48:	2300      	movs	r3, #0
 8100c4a:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8100c4c:	2300      	movs	r3, #0
 8100c4e:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8100c50:	2300      	movs	r3, #0
 8100c52:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8100c54:	2300      	movs	r3, #0
 8100c56:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_OC_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8100c58:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8100c5c:	2204      	movs	r2, #4
 8100c5e:	4619      	mov	r1, r3
 8100c60:	4818      	ldr	r0, [pc, #96]	; (8100cc4 <MX_TIM8_Init+0x118>)
 8100c62:	f006 fadb 	bl	810721c <HAL_TIM_OC_ConfigChannel>
 8100c66:	4603      	mov	r3, r0
 8100c68:	2b00      	cmp	r3, #0
 8100c6a:	d001      	beq.n	8100c70 <MX_TIM8_Init+0xc4>
  {
    Error_Handler();
 8100c6c:	f000 f946 	bl	8100efc <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8100c70:	2300      	movs	r3, #0
 8100c72:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8100c74:	2300      	movs	r3, #0
 8100c76:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8100c78:	2300      	movs	r3, #0
 8100c7a:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8100c7c:	2300      	movs	r3, #0
 8100c7e:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8100c80:	2300      	movs	r3, #0
 8100c82:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8100c84:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8100c88:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8100c8a:	2300      	movs	r3, #0
 8100c8c:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8100c8e:	2300      	movs	r3, #0
 8100c90:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8100c92:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8100c96:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 8100c98:	2300      	movs	r3, #0
 8100c9a:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8100c9c:	2300      	movs	r3, #0
 8100c9e:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK)
 8100ca0:	1d3b      	adds	r3, r7, #4
 8100ca2:	4619      	mov	r1, r3
 8100ca4:	4807      	ldr	r0, [pc, #28]	; (8100cc4 <MX_TIM8_Init+0x118>)
 8100ca6:	f007 f8f7 	bl	8107e98 <HAL_TIMEx_ConfigBreakDeadTime>
 8100caa:	4603      	mov	r3, r0
 8100cac:	2b00      	cmp	r3, #0
 8100cae:	d001      	beq.n	8100cb4 <MX_TIM8_Init+0x108>
  {
    Error_Handler();
 8100cb0:	f000 f924 	bl	8100efc <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */
  HAL_TIM_MspPostInit(&htim8);
 8100cb4:	4803      	ldr	r0, [pc, #12]	; (8100cc4 <MX_TIM8_Init+0x118>)
 8100cb6:	f000 fcad 	bl	8101614 <HAL_TIM_MspPostInit>

}
 8100cba:	bf00      	nop
 8100cbc:	3758      	adds	r7, #88	; 0x58
 8100cbe:	46bd      	mov	sp, r7
 8100cc0:	bd80      	pop	{r7, pc}
 8100cc2:	bf00      	nop
 8100cc4:	10000338 	.word	0x10000338
 8100cc8:	40010400 	.word	0x40010400

08100ccc <MX_TIM13_Init>:
  * @brief TIM13 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM13_Init(void)
{
 8100ccc:	b580      	push	{r7, lr}
 8100cce:	b084      	sub	sp, #16
 8100cd0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM13_Init 0 */

  /* USER CODE END TIM13_Init 0 */

  TIM_IC_InitTypeDef sConfigIC = {0};
 8100cd2:	463b      	mov	r3, r7
 8100cd4:	2200      	movs	r2, #0
 8100cd6:	601a      	str	r2, [r3, #0]
 8100cd8:	605a      	str	r2, [r3, #4]
 8100cda:	609a      	str	r2, [r3, #8]
 8100cdc:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM13_Init 1 */

  /* USER CODE END TIM13_Init 1 */
  htim13.Instance = TIM13;
 8100cde:	4b1d      	ldr	r3, [pc, #116]	; (8100d54 <MX_TIM13_Init+0x88>)
 8100ce0:	4a1d      	ldr	r2, [pc, #116]	; (8100d58 <MX_TIM13_Init+0x8c>)
 8100ce2:	601a      	str	r2, [r3, #0]
  htim13.Init.Prescaler = 0;
 8100ce4:	4b1b      	ldr	r3, [pc, #108]	; (8100d54 <MX_TIM13_Init+0x88>)
 8100ce6:	2200      	movs	r2, #0
 8100ce8:	605a      	str	r2, [r3, #4]
  htim13.Init.CounterMode = TIM_COUNTERMODE_UP;
 8100cea:	4b1a      	ldr	r3, [pc, #104]	; (8100d54 <MX_TIM13_Init+0x88>)
 8100cec:	2200      	movs	r2, #0
 8100cee:	609a      	str	r2, [r3, #8]
  htim13.Init.Period = 65535;
 8100cf0:	4b18      	ldr	r3, [pc, #96]	; (8100d54 <MX_TIM13_Init+0x88>)
 8100cf2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8100cf6:	60da      	str	r2, [r3, #12]
  htim13.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8100cf8:	4b16      	ldr	r3, [pc, #88]	; (8100d54 <MX_TIM13_Init+0x88>)
 8100cfa:	2200      	movs	r2, #0
 8100cfc:	611a      	str	r2, [r3, #16]
  htim13.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8100cfe:	4b15      	ldr	r3, [pc, #84]	; (8100d54 <MX_TIM13_Init+0x88>)
 8100d00:	2200      	movs	r2, #0
 8100d02:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim13) != HAL_OK)
 8100d04:	4813      	ldr	r0, [pc, #76]	; (8100d54 <MX_TIM13_Init+0x88>)
 8100d06:	f006 f979 	bl	8106ffc <HAL_TIM_Base_Init>
 8100d0a:	4603      	mov	r3, r0
 8100d0c:	2b00      	cmp	r3, #0
 8100d0e:	d001      	beq.n	8100d14 <MX_TIM13_Init+0x48>
  {
    Error_Handler();
 8100d10:	f000 f8f4 	bl	8100efc <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim13) != HAL_OK)
 8100d14:	480f      	ldr	r0, [pc, #60]	; (8100d54 <MX_TIM13_Init+0x88>)
 8100d16:	f006 fa1f 	bl	8107158 <HAL_TIM_IC_Init>
 8100d1a:	4603      	mov	r3, r0
 8100d1c:	2b00      	cmp	r3, #0
 8100d1e:	d001      	beq.n	8100d24 <MX_TIM13_Init+0x58>
  {
    Error_Handler();
 8100d20:	f000 f8ec 	bl	8100efc <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8100d24:	2300      	movs	r3, #0
 8100d26:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8100d28:	2301      	movs	r3, #1
 8100d2a:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8100d2c:	2300      	movs	r3, #0
 8100d2e:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 0;
 8100d30:	2300      	movs	r3, #0
 8100d32:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim13, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8100d34:	463b      	mov	r3, r7
 8100d36:	2200      	movs	r2, #0
 8100d38:	4619      	mov	r1, r3
 8100d3a:	4806      	ldr	r0, [pc, #24]	; (8100d54 <MX_TIM13_Init+0x88>)
 8100d3c:	f006 fae8 	bl	8107310 <HAL_TIM_IC_ConfigChannel>
 8100d40:	4603      	mov	r3, r0
 8100d42:	2b00      	cmp	r3, #0
 8100d44:	d001      	beq.n	8100d4a <MX_TIM13_Init+0x7e>
  {
    Error_Handler();
 8100d46:	f000 f8d9 	bl	8100efc <Error_Handler>
  }
  /* USER CODE BEGIN TIM13_Init 2 */

  /* USER CODE END TIM13_Init 2 */

}
 8100d4a:	bf00      	nop
 8100d4c:	3710      	adds	r7, #16
 8100d4e:	46bd      	mov	sp, r7
 8100d50:	bd80      	pop	{r7, pc}
 8100d52:	bf00      	nop
 8100d54:	10000384 	.word	0x10000384
 8100d58:	40001c00 	.word	0x40001c00

08100d5c <MX_UART8_Init>:
  * @brief UART8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART8_Init(void)
{
 8100d5c:	b580      	push	{r7, lr}
 8100d5e:	af00      	add	r7, sp, #0
  /* USER CODE END UART8_Init 0 */

  /* USER CODE BEGIN UART8_Init 1 */

  /* USER CODE END UART8_Init 1 */
  huart8.Instance = UART8;
 8100d60:	4b22      	ldr	r3, [pc, #136]	; (8100dec <MX_UART8_Init+0x90>)
 8100d62:	4a23      	ldr	r2, [pc, #140]	; (8100df0 <MX_UART8_Init+0x94>)
 8100d64:	601a      	str	r2, [r3, #0]
  huart8.Init.BaudRate = 115200;
 8100d66:	4b21      	ldr	r3, [pc, #132]	; (8100dec <MX_UART8_Init+0x90>)
 8100d68:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8100d6c:	605a      	str	r2, [r3, #4]
  huart8.Init.WordLength = UART_WORDLENGTH_8B;
 8100d6e:	4b1f      	ldr	r3, [pc, #124]	; (8100dec <MX_UART8_Init+0x90>)
 8100d70:	2200      	movs	r2, #0
 8100d72:	609a      	str	r2, [r3, #8]
  huart8.Init.StopBits = UART_STOPBITS_1;
 8100d74:	4b1d      	ldr	r3, [pc, #116]	; (8100dec <MX_UART8_Init+0x90>)
 8100d76:	2200      	movs	r2, #0
 8100d78:	60da      	str	r2, [r3, #12]
  huart8.Init.Parity = UART_PARITY_NONE;
 8100d7a:	4b1c      	ldr	r3, [pc, #112]	; (8100dec <MX_UART8_Init+0x90>)
 8100d7c:	2200      	movs	r2, #0
 8100d7e:	611a      	str	r2, [r3, #16]
  huart8.Init.Mode = UART_MODE_TX_RX;
 8100d80:	4b1a      	ldr	r3, [pc, #104]	; (8100dec <MX_UART8_Init+0x90>)
 8100d82:	220c      	movs	r2, #12
 8100d84:	615a      	str	r2, [r3, #20]
  huart8.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8100d86:	4b19      	ldr	r3, [pc, #100]	; (8100dec <MX_UART8_Init+0x90>)
 8100d88:	2200      	movs	r2, #0
 8100d8a:	619a      	str	r2, [r3, #24]
  huart8.Init.OverSampling = UART_OVERSAMPLING_16;
 8100d8c:	4b17      	ldr	r3, [pc, #92]	; (8100dec <MX_UART8_Init+0x90>)
 8100d8e:	2200      	movs	r2, #0
 8100d90:	61da      	str	r2, [r3, #28]
  huart8.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8100d92:	4b16      	ldr	r3, [pc, #88]	; (8100dec <MX_UART8_Init+0x90>)
 8100d94:	2200      	movs	r2, #0
 8100d96:	621a      	str	r2, [r3, #32]
  huart8.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8100d98:	4b14      	ldr	r3, [pc, #80]	; (8100dec <MX_UART8_Init+0x90>)
 8100d9a:	2200      	movs	r2, #0
 8100d9c:	625a      	str	r2, [r3, #36]	; 0x24
  huart8.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8100d9e:	4b13      	ldr	r3, [pc, #76]	; (8100dec <MX_UART8_Init+0x90>)
 8100da0:	2200      	movs	r2, #0
 8100da2:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart8) != HAL_OK)
 8100da4:	4811      	ldr	r0, [pc, #68]	; (8100dec <MX_UART8_Init+0x90>)
 8100da6:	f007 f8f5 	bl	8107f94 <HAL_UART_Init>
 8100daa:	4603      	mov	r3, r0
 8100dac:	2b00      	cmp	r3, #0
 8100dae:	d001      	beq.n	8100db4 <MX_UART8_Init+0x58>
  {
    Error_Handler();
 8100db0:	f000 f8a4 	bl	8100efc <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart8, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8100db4:	2100      	movs	r1, #0
 8100db6:	480d      	ldr	r0, [pc, #52]	; (8100dec <MX_UART8_Init+0x90>)
 8100db8:	f008 f8f6 	bl	8108fa8 <HAL_UARTEx_SetTxFifoThreshold>
 8100dbc:	4603      	mov	r3, r0
 8100dbe:	2b00      	cmp	r3, #0
 8100dc0:	d001      	beq.n	8100dc6 <MX_UART8_Init+0x6a>
  {
    Error_Handler();
 8100dc2:	f000 f89b 	bl	8100efc <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart8, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8100dc6:	2100      	movs	r1, #0
 8100dc8:	4808      	ldr	r0, [pc, #32]	; (8100dec <MX_UART8_Init+0x90>)
 8100dca:	f008 f92b 	bl	8109024 <HAL_UARTEx_SetRxFifoThreshold>
 8100dce:	4603      	mov	r3, r0
 8100dd0:	2b00      	cmp	r3, #0
 8100dd2:	d001      	beq.n	8100dd8 <MX_UART8_Init+0x7c>
  {
    Error_Handler();
 8100dd4:	f000 f892 	bl	8100efc <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart8) != HAL_OK)
 8100dd8:	4804      	ldr	r0, [pc, #16]	; (8100dec <MX_UART8_Init+0x90>)
 8100dda:	f008 f8ac 	bl	8108f36 <HAL_UARTEx_DisableFifoMode>
 8100dde:	4603      	mov	r3, r0
 8100de0:	2b00      	cmp	r3, #0
 8100de2:	d001      	beq.n	8100de8 <MX_UART8_Init+0x8c>
  {
    Error_Handler();
 8100de4:	f000 f88a 	bl	8100efc <Error_Handler>
  }
  /* USER CODE BEGIN UART8_Init 2 */

  /* USER CODE END UART8_Init 2 */

}
 8100de8:	bf00      	nop
 8100dea:	bd80      	pop	{r7, pc}
 8100dec:	100003d0 	.word	0x100003d0
 8100df0:	40007c00 	.word	0x40007c00

08100df4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8100df4:	b480      	push	{r7}
 8100df6:	b089      	sub	sp, #36	; 0x24
 8100df8:	af00      	add	r7, sp, #0
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8100dfa:	4b3f      	ldr	r3, [pc, #252]	; (8100ef8 <MX_GPIO_Init+0x104>)
 8100dfc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8100e00:	4a3d      	ldr	r2, [pc, #244]	; (8100ef8 <MX_GPIO_Init+0x104>)
 8100e02:	f043 0302 	orr.w	r3, r3, #2
 8100e06:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8100e0a:	4b3b      	ldr	r3, [pc, #236]	; (8100ef8 <MX_GPIO_Init+0x104>)
 8100e0c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8100e10:	f003 0302 	and.w	r3, r3, #2
 8100e14:	61fb      	str	r3, [r7, #28]
 8100e16:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8100e18:	4b37      	ldr	r3, [pc, #220]	; (8100ef8 <MX_GPIO_Init+0x104>)
 8100e1a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8100e1e:	4a36      	ldr	r2, [pc, #216]	; (8100ef8 <MX_GPIO_Init+0x104>)
 8100e20:	f043 0308 	orr.w	r3, r3, #8
 8100e24:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8100e28:	4b33      	ldr	r3, [pc, #204]	; (8100ef8 <MX_GPIO_Init+0x104>)
 8100e2a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8100e2e:	f003 0308 	and.w	r3, r3, #8
 8100e32:	61bb      	str	r3, [r7, #24]
 8100e34:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8100e36:	4b30      	ldr	r3, [pc, #192]	; (8100ef8 <MX_GPIO_Init+0x104>)
 8100e38:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8100e3c:	4a2e      	ldr	r2, [pc, #184]	; (8100ef8 <MX_GPIO_Init+0x104>)
 8100e3e:	f043 0310 	orr.w	r3, r3, #16
 8100e42:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8100e46:	4b2c      	ldr	r3, [pc, #176]	; (8100ef8 <MX_GPIO_Init+0x104>)
 8100e48:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8100e4c:	f003 0310 	and.w	r3, r3, #16
 8100e50:	617b      	str	r3, [r7, #20]
 8100e52:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8100e54:	4b28      	ldr	r3, [pc, #160]	; (8100ef8 <MX_GPIO_Init+0x104>)
 8100e56:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8100e5a:	4a27      	ldr	r2, [pc, #156]	; (8100ef8 <MX_GPIO_Init+0x104>)
 8100e5c:	f043 0304 	orr.w	r3, r3, #4
 8100e60:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8100e64:	4b24      	ldr	r3, [pc, #144]	; (8100ef8 <MX_GPIO_Init+0x104>)
 8100e66:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8100e6a:	f003 0304 	and.w	r3, r3, #4
 8100e6e:	613b      	str	r3, [r7, #16]
 8100e70:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8100e72:	4b21      	ldr	r3, [pc, #132]	; (8100ef8 <MX_GPIO_Init+0x104>)
 8100e74:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8100e78:	4a1f      	ldr	r2, [pc, #124]	; (8100ef8 <MX_GPIO_Init+0x104>)
 8100e7a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8100e7e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8100e82:	4b1d      	ldr	r3, [pc, #116]	; (8100ef8 <MX_GPIO_Init+0x104>)
 8100e84:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8100e88:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8100e8c:	60fb      	str	r3, [r7, #12]
 8100e8e:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8100e90:	4b19      	ldr	r3, [pc, #100]	; (8100ef8 <MX_GPIO_Init+0x104>)
 8100e92:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8100e96:	4a18      	ldr	r2, [pc, #96]	; (8100ef8 <MX_GPIO_Init+0x104>)
 8100e98:	f043 0320 	orr.w	r3, r3, #32
 8100e9c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8100ea0:	4b15      	ldr	r3, [pc, #84]	; (8100ef8 <MX_GPIO_Init+0x104>)
 8100ea2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8100ea6:	f003 0320 	and.w	r3, r3, #32
 8100eaa:	60bb      	str	r3, [r7, #8]
 8100eac:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOJ_CLK_ENABLE();
 8100eae:	4b12      	ldr	r3, [pc, #72]	; (8100ef8 <MX_GPIO_Init+0x104>)
 8100eb0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8100eb4:	4a10      	ldr	r2, [pc, #64]	; (8100ef8 <MX_GPIO_Init+0x104>)
 8100eb6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8100eba:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8100ebe:	4b0e      	ldr	r3, [pc, #56]	; (8100ef8 <MX_GPIO_Init+0x104>)
 8100ec0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8100ec4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8100ec8:	607b      	str	r3, [r7, #4]
 8100eca:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8100ecc:	4b0a      	ldr	r3, [pc, #40]	; (8100ef8 <MX_GPIO_Init+0x104>)
 8100ece:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8100ed2:	4a09      	ldr	r2, [pc, #36]	; (8100ef8 <MX_GPIO_Init+0x104>)
 8100ed4:	f043 0301 	orr.w	r3, r3, #1
 8100ed8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8100edc:	4b06      	ldr	r3, [pc, #24]	; (8100ef8 <MX_GPIO_Init+0x104>)
 8100ede:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8100ee2:	f003 0301 	and.w	r3, r3, #1
 8100ee6:	603b      	str	r3, [r7, #0]
 8100ee8:	683b      	ldr	r3, [r7, #0]

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8100eea:	bf00      	nop
 8100eec:	3724      	adds	r7, #36	; 0x24
 8100eee:	46bd      	mov	sp, r7
 8100ef0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8100ef4:	4770      	bx	lr
 8100ef6:	bf00      	nop
 8100ef8:	58024400 	.word	0x58024400

08100efc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8100efc:	b480      	push	{r7}
 8100efe:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8100f00:	b672      	cpsid	i
}
 8100f02:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8100f04:	e7fe      	b.n	8100f04 <Error_Handler+0x8>

08100f06 <mg_tcpip_qwrite>:
}

// This function executes in interrupt context, thus it should copy data
// somewhere fast. Note that newlib's malloc is not thread safe, thus use
// our lock-free queue with preallocated buffer to copy data and return asap
void mg_tcpip_qwrite(void *buf, size_t len, struct mg_tcpip_if *ifp) {
 8100f06:	b580      	push	{r7, lr}
 8100f08:	b086      	sub	sp, #24
 8100f0a:	af00      	add	r7, sp, #0
 8100f0c:	60f8      	str	r0, [r7, #12]
 8100f0e:	60b9      	str	r1, [r7, #8]
 8100f10:	607a      	str	r2, [r7, #4]
  char *p;
  if (mg_queue_book(&ifp->recv_queue, &p, len) >= len) {
 8100f12:	687b      	ldr	r3, [r7, #4]
 8100f14:	3330      	adds	r3, #48	; 0x30
 8100f16:	f107 0114 	add.w	r1, r7, #20
 8100f1a:	68ba      	ldr	r2, [r7, #8]
 8100f1c:	4618      	mov	r0, r3
 8100f1e:	f000 f835 	bl	8100f8c <mg_queue_book>
 8100f22:	4602      	mov	r2, r0
 8100f24:	68bb      	ldr	r3, [r7, #8]
 8100f26:	4293      	cmp	r3, r2
 8100f28:	d811      	bhi.n	8100f4e <mg_tcpip_qwrite+0x48>
    memcpy(p, buf, len);
 8100f2a:	697b      	ldr	r3, [r7, #20]
 8100f2c:	68ba      	ldr	r2, [r7, #8]
 8100f2e:	68f9      	ldr	r1, [r7, #12]
 8100f30:	4618      	mov	r0, r3
 8100f32:	f008 fcb2 	bl	810989a <memcpy>
    mg_queue_add(&ifp->recv_queue, len);
 8100f36:	687b      	ldr	r3, [r7, #4]
 8100f38:	3330      	adds	r3, #48	; 0x30
 8100f3a:	68b9      	ldr	r1, [r7, #8]
 8100f3c:	4618      	mov	r0, r3
 8100f3e:	f000 f87d 	bl	810103c <mg_queue_add>
    ifp->nrecv++;
 8100f42:	687b      	ldr	r3, [r7, #4]
 8100f44:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8100f46:	1c5a      	adds	r2, r3, #1
 8100f48:	687b      	ldr	r3, [r7, #4]
 8100f4a:	669a      	str	r2, [r3, #104]	; 0x68
  } else {
    ifp->ndrop++;
  }
}
 8100f4c:	e004      	b.n	8100f58 <mg_tcpip_qwrite+0x52>
    ifp->ndrop++;
 8100f4e:	687b      	ldr	r3, [r7, #4]
 8100f50:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8100f52:	1c5a      	adds	r2, r3, #1
 8100f54:	687b      	ldr	r3, [r7, #4]
 8100f56:	665a      	str	r2, [r3, #100]	; 0x64
}
 8100f58:	bf00      	nop
 8100f5a:	3718      	adds	r7, #24
 8100f5c:	46bd      	mov	sp, r7
 8100f5e:	bd80      	pop	{r7, pc}

08100f60 <mg_queue_write_len>:
  memcpy(&n, q->buf + q->tail, sizeof(n));
  assert(q->tail + n + sizeof(n) <= q->size);
  return n;
}

static void mg_queue_write_len(struct mg_queue *q, size_t len) {
 8100f60:	b480      	push	{r7}
 8100f62:	b085      	sub	sp, #20
 8100f64:	af00      	add	r7, sp, #0
 8100f66:	6078      	str	r0, [r7, #4]
 8100f68:	6039      	str	r1, [r7, #0]
  uint32_t n = (uint32_t) len;
 8100f6a:	683b      	ldr	r3, [r7, #0]
 8100f6c:	60fb      	str	r3, [r7, #12]
  memcpy(q->buf + q->head, &n, sizeof(n));
 8100f6e:	687b      	ldr	r3, [r7, #4]
 8100f70:	681a      	ldr	r2, [r3, #0]
 8100f72:	687b      	ldr	r3, [r7, #4]
 8100f74:	68db      	ldr	r3, [r3, #12]
 8100f76:	4413      	add	r3, r2
 8100f78:	68fa      	ldr	r2, [r7, #12]
 8100f7a:	601a      	str	r2, [r3, #0]
  MG_MEMORY_BARRIER();
 8100f7c:	f3bf 8f5b 	dmb	ish
}
 8100f80:	bf00      	nop
 8100f82:	3714      	adds	r7, #20
 8100f84:	46bd      	mov	sp, r7
 8100f86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8100f8a:	4770      	bx	lr

08100f8c <mg_queue_book>:

size_t mg_queue_book(struct mg_queue *q, char **buf, size_t len) {
 8100f8c:	b580      	push	{r7, lr}
 8100f8e:	b086      	sub	sp, #24
 8100f90:	af00      	add	r7, sp, #0
 8100f92:	60f8      	str	r0, [r7, #12]
 8100f94:	60b9      	str	r1, [r7, #8]
 8100f96:	607a      	str	r2, [r7, #4]
  size_t space = 0, hs = sizeof(uint32_t) * 2;  // *2 is for the 0 marker
 8100f98:	2300      	movs	r3, #0
 8100f9a:	617b      	str	r3, [r7, #20]
 8100f9c:	2308      	movs	r3, #8
 8100f9e:	613b      	str	r3, [r7, #16]
  if (q->head >= q->tail && q->head + len + hs <= q->size) {
 8100fa0:	68fb      	ldr	r3, [r7, #12]
 8100fa2:	68da      	ldr	r2, [r3, #12]
 8100fa4:	68fb      	ldr	r3, [r7, #12]
 8100fa6:	689b      	ldr	r3, [r3, #8]
 8100fa8:	429a      	cmp	r2, r3
 8100faa:	d312      	bcc.n	8100fd2 <mg_queue_book+0x46>
 8100fac:	68fb      	ldr	r3, [r7, #12]
 8100fae:	68da      	ldr	r2, [r3, #12]
 8100fb0:	687b      	ldr	r3, [r7, #4]
 8100fb2:	441a      	add	r2, r3
 8100fb4:	693b      	ldr	r3, [r7, #16]
 8100fb6:	441a      	add	r2, r3
 8100fb8:	68fb      	ldr	r3, [r7, #12]
 8100fba:	685b      	ldr	r3, [r3, #4]
 8100fbc:	429a      	cmp	r2, r3
 8100fbe:	d808      	bhi.n	8100fd2 <mg_queue_book+0x46>
    space = q->size - q->head - hs;  // There is enough space
 8100fc0:	68fb      	ldr	r3, [r7, #12]
 8100fc2:	685a      	ldr	r2, [r3, #4]
 8100fc4:	68fb      	ldr	r3, [r7, #12]
 8100fc6:	68db      	ldr	r3, [r3, #12]
 8100fc8:	1ad2      	subs	r2, r2, r3
 8100fca:	693b      	ldr	r3, [r7, #16]
 8100fcc:	1ad3      	subs	r3, r2, r3
 8100fce:	617b      	str	r3, [r7, #20]
 8100fd0:	e011      	b.n	8100ff6 <mg_queue_book+0x6a>
  } else if (q->head >= q->tail && q->tail > hs) {
 8100fd2:	68fb      	ldr	r3, [r7, #12]
 8100fd4:	68da      	ldr	r2, [r3, #12]
 8100fd6:	68fb      	ldr	r3, [r7, #12]
 8100fd8:	689b      	ldr	r3, [r3, #8]
 8100fda:	429a      	cmp	r2, r3
 8100fdc:	d30b      	bcc.n	8100ff6 <mg_queue_book+0x6a>
 8100fde:	68fb      	ldr	r3, [r7, #12]
 8100fe0:	689b      	ldr	r3, [r3, #8]
 8100fe2:	693a      	ldr	r2, [r7, #16]
 8100fe4:	429a      	cmp	r2, r3
 8100fe6:	d206      	bcs.n	8100ff6 <mg_queue_book+0x6a>
    mg_queue_write_len(q, 0);  // Not enough space ahead
 8100fe8:	2100      	movs	r1, #0
 8100fea:	68f8      	ldr	r0, [r7, #12]
 8100fec:	f7ff ffb8 	bl	8100f60 <mg_queue_write_len>
    q->head = 0;               // Wrap head to the beginning
 8100ff0:	68fb      	ldr	r3, [r7, #12]
 8100ff2:	2200      	movs	r2, #0
 8100ff4:	60da      	str	r2, [r3, #12]
  }
  if (q->head + hs + len < q->tail) space = q->tail - q->head - hs;
 8100ff6:	68fb      	ldr	r3, [r7, #12]
 8100ff8:	68da      	ldr	r2, [r3, #12]
 8100ffa:	693b      	ldr	r3, [r7, #16]
 8100ffc:	441a      	add	r2, r3
 8100ffe:	687b      	ldr	r3, [r7, #4]
 8101000:	441a      	add	r2, r3
 8101002:	68fb      	ldr	r3, [r7, #12]
 8101004:	689b      	ldr	r3, [r3, #8]
 8101006:	429a      	cmp	r2, r3
 8101008:	d207      	bcs.n	810101a <mg_queue_book+0x8e>
 810100a:	68fb      	ldr	r3, [r7, #12]
 810100c:	689a      	ldr	r2, [r3, #8]
 810100e:	68fb      	ldr	r3, [r7, #12]
 8101010:	68db      	ldr	r3, [r3, #12]
 8101012:	1ad2      	subs	r2, r2, r3
 8101014:	693b      	ldr	r3, [r7, #16]
 8101016:	1ad3      	subs	r3, r2, r3
 8101018:	617b      	str	r3, [r7, #20]
  if (buf != NULL) *buf = q->buf + q->head + sizeof(uint32_t);
 810101a:	68bb      	ldr	r3, [r7, #8]
 810101c:	2b00      	cmp	r3, #0
 810101e:	d007      	beq.n	8101030 <mg_queue_book+0xa4>
 8101020:	68fb      	ldr	r3, [r7, #12]
 8101022:	681a      	ldr	r2, [r3, #0]
 8101024:	68fb      	ldr	r3, [r7, #12]
 8101026:	68db      	ldr	r3, [r3, #12]
 8101028:	3304      	adds	r3, #4
 810102a:	441a      	add	r2, r3
 810102c:	68bb      	ldr	r3, [r7, #8]
 810102e:	601a      	str	r2, [r3, #0]
  return space;
 8101030:	697b      	ldr	r3, [r7, #20]
}
 8101032:	4618      	mov	r0, r3
 8101034:	3718      	adds	r7, #24
 8101036:	46bd      	mov	sp, r7
 8101038:	bd80      	pop	{r7, pc}
	...

0810103c <mg_queue_add>:
  if (buf != NULL) *buf = q->buf + q->tail + sizeof(uint32_t);
  assert(q->tail + len <= q->size);
  return len;
}

void mg_queue_add(struct mg_queue *q, size_t len) {
 810103c:	b580      	push	{r7, lr}
 810103e:	b082      	sub	sp, #8
 8101040:	af00      	add	r7, sp, #0
 8101042:	6078      	str	r0, [r7, #4]
 8101044:	6039      	str	r1, [r7, #0]
  assert(len > 0);
 8101046:	683b      	ldr	r3, [r7, #0]
 8101048:	2b00      	cmp	r3, #0
 810104a:	d106      	bne.n	810105a <mg_queue_add+0x1e>
 810104c:	4b13      	ldr	r3, [pc, #76]	; (810109c <mg_queue_add+0x60>)
 810104e:	4a14      	ldr	r2, [pc, #80]	; (81010a0 <mg_queue_add+0x64>)
 8101050:	f641 1128 	movw	r1, #6440	; 0x1928
 8101054:	4813      	ldr	r0, [pc, #76]	; (81010a4 <mg_queue_add+0x68>)
 8101056:	f008 f871 	bl	810913c <__assert_func>
  mg_queue_write_len(q, len);
 810105a:	6839      	ldr	r1, [r7, #0]
 810105c:	6878      	ldr	r0, [r7, #4]
 810105e:	f7ff ff7f 	bl	8100f60 <mg_queue_write_len>
  assert(q->head + sizeof(uint32_t) * 2 + len <= q->size);
 8101062:	687b      	ldr	r3, [r7, #4]
 8101064:	68da      	ldr	r2, [r3, #12]
 8101066:	683b      	ldr	r3, [r7, #0]
 8101068:	4413      	add	r3, r2
 810106a:	f103 0208 	add.w	r2, r3, #8
 810106e:	687b      	ldr	r3, [r7, #4]
 8101070:	685b      	ldr	r3, [r3, #4]
 8101072:	429a      	cmp	r2, r3
 8101074:	d906      	bls.n	8101084 <mg_queue_add+0x48>
 8101076:	4b0c      	ldr	r3, [pc, #48]	; (81010a8 <mg_queue_add+0x6c>)
 8101078:	4a09      	ldr	r2, [pc, #36]	; (81010a0 <mg_queue_add+0x64>)
 810107a:	f641 112a 	movw	r1, #6442	; 0x192a
 810107e:	4809      	ldr	r0, [pc, #36]	; (81010a4 <mg_queue_add+0x68>)
 8101080:	f008 f85c 	bl	810913c <__assert_func>
  q->head += len + sizeof(uint32_t);
 8101084:	687b      	ldr	r3, [r7, #4]
 8101086:	68da      	ldr	r2, [r3, #12]
 8101088:	683b      	ldr	r3, [r7, #0]
 810108a:	4413      	add	r3, r2
 810108c:	1d1a      	adds	r2, r3, #4
 810108e:	687b      	ldr	r3, [r7, #4]
 8101090:	60da      	str	r2, [r3, #12]
}
 8101092:	bf00      	nop
 8101094:	3708      	adds	r7, #8
 8101096:	46bd      	mov	sp, r7
 8101098:	bd80      	pop	{r7, pc}
 810109a:	bf00      	nop
 810109c:	0810b898 	.word	0x0810b898
 81010a0:	0810bda8 	.word	0x0810bda8
 81010a4:	0810a0ac 	.word	0x0810a0ac
 81010a8:	0810b8a0 	.word	0x0810b8a0

081010ac <ETH_IRQHandler>:
  return up;
}

void ETH_IRQHandler(void);
static uint32_t s_rxno;
void ETH_IRQHandler(void) {
 81010ac:	b580      	push	{r7, lr}
 81010ae:	b082      	sub	sp, #8
 81010b0:	af00      	add	r7, sp, #0
  if (ETH->DMACSR & MG_BIT(6)) {           // Frame received, loop
 81010b2:	4b40      	ldr	r3, [pc, #256]	; (81011b4 <ETH_IRQHandler+0x108>)
 81010b4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 81010b8:	f8d3 3160 	ldr.w	r3, [r3, #352]	; 0x160
 81010bc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 81010c0:	2b00      	cmp	r3, #0
 81010c2:	d065      	beq.n	8101190 <ETH_IRQHandler+0xe4>
    ETH->DMACSR = MG_BIT(15) | MG_BIT(6);  // Clear flag
 81010c4:	4b3b      	ldr	r3, [pc, #236]	; (81011b4 <ETH_IRQHandler+0x108>)
 81010c6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 81010ca:	461a      	mov	r2, r3
 81010cc:	f248 0340 	movw	r3, #32832	; 0x8040
 81010d0:	f8c2 3160 	str.w	r3, [r2, #352]	; 0x160
    for (uint32_t i = 0; i < 10; i++) {  // read as they arrive but not forever
 81010d4:	2300      	movs	r3, #0
 81010d6:	607b      	str	r3, [r7, #4]
 81010d8:	e055      	b.n	8101186 <ETH_IRQHandler+0xda>
      if (s_rxdesc[s_rxno][3] & MG_BIT(31)) break;  // exit when done
 81010da:	4b37      	ldr	r3, [pc, #220]	; (81011b8 <ETH_IRQHandler+0x10c>)
 81010dc:	681b      	ldr	r3, [r3, #0]
 81010de:	4a37      	ldr	r2, [pc, #220]	; (81011bc <ETH_IRQHandler+0x110>)
 81010e0:	011b      	lsls	r3, r3, #4
 81010e2:	4413      	add	r3, r2
 81010e4:	330c      	adds	r3, #12
 81010e6:	681b      	ldr	r3, [r3, #0]
 81010e8:	2b00      	cmp	r3, #0
 81010ea:	db50      	blt.n	810118e <ETH_IRQHandler+0xe2>
      if (((s_rxdesc[s_rxno][3] & (MG_BIT(28) | MG_BIT(29))) ==
 81010ec:	4b32      	ldr	r3, [pc, #200]	; (81011b8 <ETH_IRQHandler+0x10c>)
 81010ee:	681b      	ldr	r3, [r3, #0]
 81010f0:	4a32      	ldr	r2, [pc, #200]	; (81011bc <ETH_IRQHandler+0x110>)
 81010f2:	011b      	lsls	r3, r3, #4
 81010f4:	4413      	add	r3, r2
 81010f6:	330c      	adds	r3, #12
 81010f8:	681b      	ldr	r3, [r3, #0]
 81010fa:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 81010fe:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8101102:	d128      	bne.n	8101156 <ETH_IRQHandler+0xaa>
           (MG_BIT(28) | MG_BIT(29))) &&
          !(s_rxdesc[s_rxno][3] & MG_BIT(15))) {  // skip partial/errored frames
 8101104:	4b2c      	ldr	r3, [pc, #176]	; (81011b8 <ETH_IRQHandler+0x10c>)
 8101106:	681b      	ldr	r3, [r3, #0]
 8101108:	4a2c      	ldr	r2, [pc, #176]	; (81011bc <ETH_IRQHandler+0x110>)
 810110a:	011b      	lsls	r3, r3, #4
 810110c:	4413      	add	r3, r2
 810110e:	330c      	adds	r3, #12
 8101110:	681b      	ldr	r3, [r3, #0]
 8101112:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
           (MG_BIT(28) | MG_BIT(29))) &&
 8101116:	2b00      	cmp	r3, #0
 8101118:	d11d      	bne.n	8101156 <ETH_IRQHandler+0xaa>
        uint32_t len = s_rxdesc[s_rxno][3] & (MG_BIT(15) - 1);
 810111a:	4b27      	ldr	r3, [pc, #156]	; (81011b8 <ETH_IRQHandler+0x10c>)
 810111c:	681b      	ldr	r3, [r3, #0]
 810111e:	4a27      	ldr	r2, [pc, #156]	; (81011bc <ETH_IRQHandler+0x110>)
 8101120:	011b      	lsls	r3, r3, #4
 8101122:	4413      	add	r3, r2
 8101124:	330c      	adds	r3, #12
 8101126:	681b      	ldr	r3, [r3, #0]
 8101128:	f3c3 030e 	ubfx	r3, r3, #0, #15
 810112c:	603b      	str	r3, [r7, #0]
        // MG_DEBUG(("%lx %lu %lx %08lx", s_rxno, len, s_rxdesc[s_rxno][3],
        // ETH->DMACSR));
        mg_tcpip_qwrite(s_rxbuf[s_rxno], len > 4 ? len - 4 : len, s_ifp);
 810112e:	4b22      	ldr	r3, [pc, #136]	; (81011b8 <ETH_IRQHandler+0x10c>)
 8101130:	681b      	ldr	r3, [r3, #0]
 8101132:	f240 6204 	movw	r2, #1540	; 0x604
 8101136:	fb02 f303 	mul.w	r3, r2, r3
 810113a:	4a21      	ldr	r2, [pc, #132]	; (81011c0 <ETH_IRQHandler+0x114>)
 810113c:	1898      	adds	r0, r3, r2
 810113e:	683b      	ldr	r3, [r7, #0]
 8101140:	2b04      	cmp	r3, #4
 8101142:	d902      	bls.n	810114a <ETH_IRQHandler+0x9e>
 8101144:	683b      	ldr	r3, [r7, #0]
 8101146:	3b04      	subs	r3, #4
 8101148:	e000      	b.n	810114c <ETH_IRQHandler+0xa0>
 810114a:	683b      	ldr	r3, [r7, #0]
 810114c:	4a1d      	ldr	r2, [pc, #116]	; (81011c4 <ETH_IRQHandler+0x118>)
 810114e:	6812      	ldr	r2, [r2, #0]
 8101150:	4619      	mov	r1, r3
 8101152:	f7ff fed8 	bl	8100f06 <mg_tcpip_qwrite>
      }
      s_rxdesc[s_rxno][3] =
 8101156:	4b18      	ldr	r3, [pc, #96]	; (81011b8 <ETH_IRQHandler+0x10c>)
 8101158:	681b      	ldr	r3, [r3, #0]
 810115a:	4a18      	ldr	r2, [pc, #96]	; (81011bc <ETH_IRQHandler+0x110>)
 810115c:	011b      	lsls	r3, r3, #4
 810115e:	4413      	add	r3, r2
 8101160:	330c      	adds	r3, #12
 8101162:	f04f 4241 	mov.w	r2, #3238002688	; 0xc1000000
 8101166:	601a      	str	r2, [r3, #0]
          MG_BIT(31) | MG_BIT(30) | MG_BIT(24);  // OWN, IOC, BUF1V
      if (++s_rxno >= ETH_DESC_CNT) s_rxno = 0;
 8101168:	4b13      	ldr	r3, [pc, #76]	; (81011b8 <ETH_IRQHandler+0x10c>)
 810116a:	681b      	ldr	r3, [r3, #0]
 810116c:	3301      	adds	r3, #1
 810116e:	4a12      	ldr	r2, [pc, #72]	; (81011b8 <ETH_IRQHandler+0x10c>)
 8101170:	6013      	str	r3, [r2, #0]
 8101172:	4b11      	ldr	r3, [pc, #68]	; (81011b8 <ETH_IRQHandler+0x10c>)
 8101174:	681b      	ldr	r3, [r3, #0]
 8101176:	2b03      	cmp	r3, #3
 8101178:	d902      	bls.n	8101180 <ETH_IRQHandler+0xd4>
 810117a:	4b0f      	ldr	r3, [pc, #60]	; (81011b8 <ETH_IRQHandler+0x10c>)
 810117c:	2200      	movs	r2, #0
 810117e:	601a      	str	r2, [r3, #0]
    for (uint32_t i = 0; i < 10; i++) {  // read as they arrive but not forever
 8101180:	687b      	ldr	r3, [r7, #4]
 8101182:	3301      	adds	r3, #1
 8101184:	607b      	str	r3, [r7, #4]
 8101186:	687b      	ldr	r3, [r7, #4]
 8101188:	2b09      	cmp	r3, #9
 810118a:	d9a6      	bls.n	81010da <ETH_IRQHandler+0x2e>
 810118c:	e000      	b.n	8101190 <ETH_IRQHandler+0xe4>
      if (s_rxdesc[s_rxno][3] & MG_BIT(31)) break;  // exit when done
 810118e:	bf00      	nop
    }
  }
  ETH->DMACSR =
 8101190:	4b08      	ldr	r3, [pc, #32]	; (81011b4 <ETH_IRQHandler+0x108>)
 8101192:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8101196:	461a      	mov	r2, r3
 8101198:	f44f 73c0 	mov.w	r3, #384	; 0x180
 810119c:	f8c2 3160 	str.w	r3, [r2, #352]	; 0x160
      MG_BIT(7) | MG_BIT(8);  // Clear possible RBU RPS while processing
  ETH->DMACRDTPR =
 81011a0:	4a04      	ldr	r2, [pc, #16]	; (81011b4 <ETH_IRQHandler+0x108>)
      (uint32_t) (uintptr_t) &s_rxdesc[ETH_DESC_CNT - 1];  // and resume RX
 81011a2:	4b09      	ldr	r3, [pc, #36]	; (81011c8 <ETH_IRQHandler+0x11c>)
  ETH->DMACRDTPR =
 81011a4:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 81011a8:	f8c2 3128 	str.w	r3, [r2, #296]	; 0x128
}
 81011ac:	bf00      	nop
 81011ae:	3708      	adds	r7, #8
 81011b0:	46bd      	mov	sp, r7
 81011b2:	bd80      	pop	{r7, pc}
 81011b4:	40028000 	.word	0x40028000
 81011b8:	10001cc8 	.word	0x10001cc8
 81011bc:	10000474 	.word	0x10000474
 81011c0:	100004b4 	.word	0x100004b4
 81011c4:	10001cc4 	.word	0x10001cc4
 81011c8:	100004a4 	.word	0x100004a4

081011cc <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 81011cc:	b480      	push	{r7}
 81011ce:	b083      	sub	sp, #12
 81011d0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 81011d2:	4b0a      	ldr	r3, [pc, #40]	; (81011fc <HAL_MspInit+0x30>)
 81011d4:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 81011d8:	4a08      	ldr	r2, [pc, #32]	; (81011fc <HAL_MspInit+0x30>)
 81011da:	f043 0302 	orr.w	r3, r3, #2
 81011de:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 81011e2:	4b06      	ldr	r3, [pc, #24]	; (81011fc <HAL_MspInit+0x30>)
 81011e4:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 81011e8:	f003 0302 	and.w	r3, r3, #2
 81011ec:	607b      	str	r3, [r7, #4]
 81011ee:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 81011f0:	bf00      	nop
 81011f2:	370c      	adds	r7, #12
 81011f4:	46bd      	mov	sp, r7
 81011f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 81011fa:	4770      	bx	lr
 81011fc:	58024400 	.word	0x58024400

08101200 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8101200:	b580      	push	{r7, lr}
 8101202:	b08c      	sub	sp, #48	; 0x30
 8101204:	af00      	add	r7, sp, #0
 8101206:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8101208:	f107 031c 	add.w	r3, r7, #28
 810120c:	2200      	movs	r2, #0
 810120e:	601a      	str	r2, [r3, #0]
 8101210:	605a      	str	r2, [r3, #4]
 8101212:	609a      	str	r2, [r3, #8]
 8101214:	60da      	str	r2, [r3, #12]
 8101216:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8101218:	687b      	ldr	r3, [r7, #4]
 810121a:	681b      	ldr	r3, [r3, #0]
 810121c:	4a3e      	ldr	r2, [pc, #248]	; (8101318 <HAL_ADC_MspInit+0x118>)
 810121e:	4293      	cmp	r3, r2
 8101220:	d12a      	bne.n	8101278 <HAL_ADC_MspInit+0x78>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 8101222:	4b3e      	ldr	r3, [pc, #248]	; (810131c <HAL_ADC_MspInit+0x11c>)
 8101224:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8101228:	4a3c      	ldr	r2, [pc, #240]	; (810131c <HAL_ADC_MspInit+0x11c>)
 810122a:	f043 0320 	orr.w	r3, r3, #32
 810122e:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8101232:	4b3a      	ldr	r3, [pc, #232]	; (810131c <HAL_ADC_MspInit+0x11c>)
 8101234:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8101238:	f003 0320 	and.w	r3, r3, #32
 810123c:	61bb      	str	r3, [r7, #24]
 810123e:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8101240:	4b36      	ldr	r3, [pc, #216]	; (810131c <HAL_ADC_MspInit+0x11c>)
 8101242:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8101246:	4a35      	ldr	r2, [pc, #212]	; (810131c <HAL_ADC_MspInit+0x11c>)
 8101248:	f043 0301 	orr.w	r3, r3, #1
 810124c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8101250:	4b32      	ldr	r3, [pc, #200]	; (810131c <HAL_ADC_MspInit+0x11c>)
 8101252:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8101256:	f003 0301 	and.w	r3, r3, #1
 810125a:	617b      	str	r3, [r7, #20]
 810125c:	697b      	ldr	r3, [r7, #20]
    /**ADC1 GPIO Configuration
    PA0_C     ------> ADC1_INP0
    PA1_C     ------> ADC1_INP1
    */
    HAL_SYSCFG_AnalogSwitchConfig(SYSCFG_SWITCH_PA0, SYSCFG_SWITCH_PA0_OPEN);
 810125e:	f04f 7180 	mov.w	r1, #16777216	; 0x1000000
 8101262:	f04f 7080 	mov.w	r0, #16777216	; 0x1000000
 8101266:	f000 fcf5 	bl	8101c54 <HAL_SYSCFG_AnalogSwitchConfig>

    HAL_SYSCFG_AnalogSwitchConfig(SYSCFG_SWITCH_PA1, SYSCFG_SWITCH_PA1_OPEN);
 810126a:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 810126e:	f04f 7000 	mov.w	r0, #33554432	; 0x2000000
 8101272:	f000 fcef 	bl	8101c54 <HAL_SYSCFG_AnalogSwitchConfig>
  /* USER CODE BEGIN ADC3_MspInit 1 */

  /* USER CODE END ADC3_MspInit 1 */
  }

}
 8101276:	e04a      	b.n	810130e <HAL_ADC_MspInit+0x10e>
  else if(hadc->Instance==ADC3)
 8101278:	687b      	ldr	r3, [r7, #4]
 810127a:	681b      	ldr	r3, [r3, #0]
 810127c:	4a28      	ldr	r2, [pc, #160]	; (8101320 <HAL_ADC_MspInit+0x120>)
 810127e:	4293      	cmp	r3, r2
 8101280:	d145      	bne.n	810130e <HAL_ADC_MspInit+0x10e>
    __HAL_RCC_ADC3_CLK_ENABLE();
 8101282:	4b26      	ldr	r3, [pc, #152]	; (810131c <HAL_ADC_MspInit+0x11c>)
 8101284:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8101288:	4a24      	ldr	r2, [pc, #144]	; (810131c <HAL_ADC_MspInit+0x11c>)
 810128a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 810128e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8101292:	4b22      	ldr	r3, [pc, #136]	; (810131c <HAL_ADC_MspInit+0x11c>)
 8101294:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8101298:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 810129c:	613b      	str	r3, [r7, #16]
 810129e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOF_CLK_ENABLE();
 81012a0:	4b1e      	ldr	r3, [pc, #120]	; (810131c <HAL_ADC_MspInit+0x11c>)
 81012a2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 81012a6:	4a1d      	ldr	r2, [pc, #116]	; (810131c <HAL_ADC_MspInit+0x11c>)
 81012a8:	f043 0320 	orr.w	r3, r3, #32
 81012ac:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 81012b0:	4b1a      	ldr	r3, [pc, #104]	; (810131c <HAL_ADC_MspInit+0x11c>)
 81012b2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 81012b6:	f003 0320 	and.w	r3, r3, #32
 81012ba:	60fb      	str	r3, [r7, #12]
 81012bc:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 81012be:	4b17      	ldr	r3, [pc, #92]	; (810131c <HAL_ADC_MspInit+0x11c>)
 81012c0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 81012c4:	4a15      	ldr	r2, [pc, #84]	; (810131c <HAL_ADC_MspInit+0x11c>)
 81012c6:	f043 0304 	orr.w	r3, r3, #4
 81012ca:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 81012ce:	4b13      	ldr	r3, [pc, #76]	; (810131c <HAL_ADC_MspInit+0x11c>)
 81012d0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 81012d4:	f003 0304 	and.w	r3, r3, #4
 81012d8:	60bb      	str	r3, [r7, #8]
 81012da:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = ARD_A1_Pin;
 81012dc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 81012e0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 81012e2:	2303      	movs	r3, #3
 81012e4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 81012e6:	2300      	movs	r3, #0
 81012e8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(ARD_A1_GPIO_Port, &GPIO_InitStruct);
 81012ea:	f107 031c 	add.w	r3, r7, #28
 81012ee:	4619      	mov	r1, r3
 81012f0:	480c      	ldr	r0, [pc, #48]	; (8101324 <HAL_ADC_MspInit+0x124>)
 81012f2:	f001 ffd9 	bl	81032a8 <HAL_GPIO_Init>
    HAL_SYSCFG_AnalogSwitchConfig(SYSCFG_SWITCH_PC2, SYSCFG_SWITCH_PC2_OPEN);
 81012f6:	f04f 6180 	mov.w	r1, #67108864	; 0x4000000
 81012fa:	f04f 6080 	mov.w	r0, #67108864	; 0x4000000
 81012fe:	f000 fca9 	bl	8101c54 <HAL_SYSCFG_AnalogSwitchConfig>
    HAL_SYSCFG_AnalogSwitchConfig(SYSCFG_SWITCH_PC3, SYSCFG_SWITCH_PC3_OPEN);
 8101302:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
 8101306:	f04f 6000 	mov.w	r0, #134217728	; 0x8000000
 810130a:	f000 fca3 	bl	8101c54 <HAL_SYSCFG_AnalogSwitchConfig>
}
 810130e:	bf00      	nop
 8101310:	3730      	adds	r7, #48	; 0x30
 8101312:	46bd      	mov	sp, r7
 8101314:	bd80      	pop	{r7, pc}
 8101316:	bf00      	nop
 8101318:	40022000 	.word	0x40022000
 810131c:	58024400 	.word	0x58024400
 8101320:	58026000 	.word	0x58026000
 8101324:	58021400 	.word	0x58021400

08101328 <HAL_CEC_MspInit>:
* This function configures the hardware resources used in this example
* @param hcec: CEC handle pointer
* @retval None
*/
void HAL_CEC_MspInit(CEC_HandleTypeDef* hcec)
{
 8101328:	b580      	push	{r7, lr}
 810132a:	b0bc      	sub	sp, #240	; 0xf0
 810132c:	af00      	add	r7, sp, #0
 810132e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8101330:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8101334:	2200      	movs	r2, #0
 8101336:	601a      	str	r2, [r3, #0]
 8101338:	605a      	str	r2, [r3, #4]
 810133a:	609a      	str	r2, [r3, #8]
 810133c:	60da      	str	r2, [r3, #12]
 810133e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8101340:	f107 0310 	add.w	r3, r7, #16
 8101344:	22c8      	movs	r2, #200	; 0xc8
 8101346:	2100      	movs	r1, #0
 8101348:	4618      	mov	r0, r3
 810134a:	f008 fa1b 	bl	8109784 <memset>
  if(hcec->Instance==CEC)
 810134e:	687b      	ldr	r3, [r7, #4]
 8101350:	681b      	ldr	r3, [r3, #0]
 8101352:	4a2b      	ldr	r2, [pc, #172]	; (8101400 <HAL_CEC_MspInit+0xd8>)
 8101354:	4293      	cmp	r3, r2
 8101356:	d14e      	bne.n	81013f6 <HAL_CEC_MspInit+0xce>

  /* USER CODE END CEC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_CEC;
 8101358:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 810135c:	f04f 0300 	mov.w	r3, #0
 8101360:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.CecClockSelection = RCC_CECCLKSOURCE_LSI;
 8101364:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8101368:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 810136c:	f107 0310 	add.w	r3, r7, #16
 8101370:	4618      	mov	r0, r3
 8101372:	f002 fbbb 	bl	8103aec <HAL_RCCEx_PeriphCLKConfig>
 8101376:	4603      	mov	r3, r0
 8101378:	2b00      	cmp	r3, #0
 810137a:	d001      	beq.n	8101380 <HAL_CEC_MspInit+0x58>
    {
      Error_Handler();
 810137c:	f7ff fdbe 	bl	8100efc <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_CEC_CLK_ENABLE();
 8101380:	4b20      	ldr	r3, [pc, #128]	; (8101404 <HAL_CEC_MspInit+0xdc>)
 8101382:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8101386:	4a1f      	ldr	r2, [pc, #124]	; (8101404 <HAL_CEC_MspInit+0xdc>)
 8101388:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 810138c:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8101390:	4b1c      	ldr	r3, [pc, #112]	; (8101404 <HAL_CEC_MspInit+0xdc>)
 8101392:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8101396:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 810139a:	60fb      	str	r3, [r7, #12]
 810139c:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 810139e:	4b19      	ldr	r3, [pc, #100]	; (8101404 <HAL_CEC_MspInit+0xdc>)
 81013a0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 81013a4:	4a17      	ldr	r2, [pc, #92]	; (8101404 <HAL_CEC_MspInit+0xdc>)
 81013a6:	f043 0302 	orr.w	r3, r3, #2
 81013aa:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 81013ae:	4b15      	ldr	r3, [pc, #84]	; (8101404 <HAL_CEC_MspInit+0xdc>)
 81013b0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 81013b4:	f003 0302 	and.w	r3, r3, #2
 81013b8:	60bb      	str	r3, [r7, #8]
 81013ba:	68bb      	ldr	r3, [r7, #8]
    /**HDMI_CEC GPIO Configuration
    PB6     ------> CEC
    */
    GPIO_InitStruct.Pin = HDMI_CEC_Pin;
 81013bc:	2340      	movs	r3, #64	; 0x40
 81013be:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 81013c2:	2312      	movs	r3, #18
 81013c4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 81013c8:	2300      	movs	r3, #0
 81013ca:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 81013ce:	2300      	movs	r3, #0
 81013d0:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF5_CEC;
 81013d4:	2305      	movs	r3, #5
 81013d6:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(HDMI_CEC_GPIO_Port, &GPIO_InitStruct);
 81013da:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 81013de:	4619      	mov	r1, r3
 81013e0:	4809      	ldr	r0, [pc, #36]	; (8101408 <HAL_CEC_MspInit+0xe0>)
 81013e2:	f001 ff61 	bl	81032a8 <HAL_GPIO_Init>

    /* CEC interrupt Init */
    HAL_NVIC_SetPriority(CEC_IRQn, 0, 0);
 81013e6:	2200      	movs	r2, #0
 81013e8:	2100      	movs	r1, #0
 81013ea:	205e      	movs	r0, #94	; 0x5e
 81013ec:	f001 ff13 	bl	8103216 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CEC_IRQn);
 81013f0:	205e      	movs	r0, #94	; 0x5e
 81013f2:	f001 ff2a 	bl	810324a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CEC_MspInit 1 */

  /* USER CODE END CEC_MspInit 1 */
  }

}
 81013f6:	bf00      	nop
 81013f8:	37f0      	adds	r7, #240	; 0xf0
 81013fa:	46bd      	mov	sp, r7
 81013fc:	bd80      	pop	{r7, pc}
 81013fe:	bf00      	nop
 8101400:	40006c00 	.word	0x40006c00
 8101404:	58024400 	.word	0x58024400
 8101408:	58020400 	.word	0x58020400

0810140c <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 810140c:	b580      	push	{r7, lr}
 810140e:	b0b4      	sub	sp, #208	; 0xd0
 8101410:	af00      	add	r7, sp, #0
 8101412:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8101414:	f107 0308 	add.w	r3, r7, #8
 8101418:	22c8      	movs	r2, #200	; 0xc8
 810141a:	2100      	movs	r1, #0
 810141c:	4618      	mov	r0, r3
 810141e:	f008 f9b1 	bl	8109784 <memset>
  if(hrtc->Instance==RTC)
 8101422:	687b      	ldr	r3, [r7, #4]
 8101424:	681b      	ldr	r3, [r3, #0]
 8101426:	4a10      	ldr	r2, [pc, #64]	; (8101468 <HAL_RTC_MspInit+0x5c>)
 8101428:	4293      	cmp	r3, r2
 810142a:	d119      	bne.n	8101460 <HAL_RTC_MspInit+0x54>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 810142c:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 8101430:	f04f 0300 	mov.w	r3, #0
 8101434:	e9c7 2302 	strd	r2, r3, [r7, #8]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 8101438:	f44f 7380 	mov.w	r3, #256	; 0x100
 810143c:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8101440:	f107 0308 	add.w	r3, r7, #8
 8101444:	4618      	mov	r0, r3
 8101446:	f002 fb51 	bl	8103aec <HAL_RCCEx_PeriphCLKConfig>
 810144a:	4603      	mov	r3, r0
 810144c:	2b00      	cmp	r3, #0
 810144e:	d001      	beq.n	8101454 <HAL_RTC_MspInit+0x48>
    {
      Error_Handler();
 8101450:	f7ff fd54 	bl	8100efc <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8101454:	4b05      	ldr	r3, [pc, #20]	; (810146c <HAL_RTC_MspInit+0x60>)
 8101456:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8101458:	4a04      	ldr	r2, [pc, #16]	; (810146c <HAL_RTC_MspInit+0x60>)
 810145a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 810145e:	6713      	str	r3, [r2, #112]	; 0x70
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8101460:	bf00      	nop
 8101462:	37d0      	adds	r7, #208	; 0xd0
 8101464:	46bd      	mov	sp, r7
 8101466:	bd80      	pop	{r7, pc}
 8101468:	58004000 	.word	0x58004000
 810146c:	58024400 	.word	0x58024400

08101470 <HAL_SPDIFRX_MspInit>:
* This function configures the hardware resources used in this example
* @param hspdifrx: SPDIFRX handle pointer
* @retval None
*/
void HAL_SPDIFRX_MspInit(SPDIFRX_HandleTypeDef* hspdifrx)
{
 8101470:	b580      	push	{r7, lr}
 8101472:	b0bc      	sub	sp, #240	; 0xf0
 8101474:	af00      	add	r7, sp, #0
 8101476:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8101478:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 810147c:	2200      	movs	r2, #0
 810147e:	601a      	str	r2, [r3, #0]
 8101480:	605a      	str	r2, [r3, #4]
 8101482:	609a      	str	r2, [r3, #8]
 8101484:	60da      	str	r2, [r3, #12]
 8101486:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8101488:	f107 0310 	add.w	r3, r7, #16
 810148c:	22c8      	movs	r2, #200	; 0xc8
 810148e:	2100      	movs	r1, #0
 8101490:	4618      	mov	r0, r3
 8101492:	f008 f977 	bl	8109784 <memset>
  if(hspdifrx->Instance==SPDIFRX)
 8101496:	687b      	ldr	r3, [r7, #4]
 8101498:	681b      	ldr	r3, [r3, #0]
 810149a:	f1b3 2f40 	cmp.w	r3, #1073758208	; 0x40004000
 810149e:	d144      	bne.n	810152a <HAL_SPDIFRX_MspInit+0xba>

  /* USER CODE END SPDIFRX_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPDIFRX;
 81014a0:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 81014a4:	f04f 0300 	mov.w	r3, #0
 81014a8:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.SpdifrxClockSelection = RCC_SPDIFRXCLKSOURCE_PLL;
 81014ac:	2300      	movs	r3, #0
 81014ae:	67fb      	str	r3, [r7, #124]	; 0x7c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 81014b0:	f107 0310 	add.w	r3, r7, #16
 81014b4:	4618      	mov	r0, r3
 81014b6:	f002 fb19 	bl	8103aec <HAL_RCCEx_PeriphCLKConfig>
 81014ba:	4603      	mov	r3, r0
 81014bc:	2b00      	cmp	r3, #0
 81014be:	d001      	beq.n	81014c4 <HAL_SPDIFRX_MspInit+0x54>
    {
      Error_Handler();
 81014c0:	f7ff fd1c 	bl	8100efc <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPDIFRX_CLK_ENABLE();
 81014c4:	4b1b      	ldr	r3, [pc, #108]	; (8101534 <HAL_SPDIFRX_MspInit+0xc4>)
 81014c6:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 81014ca:	4a1a      	ldr	r2, [pc, #104]	; (8101534 <HAL_SPDIFRX_MspInit+0xc4>)
 81014cc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 81014d0:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 81014d4:	4b17      	ldr	r3, [pc, #92]	; (8101534 <HAL_SPDIFRX_MspInit+0xc4>)
 81014d6:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 81014da:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 81014de:	60fb      	str	r3, [r7, #12]
 81014e0:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 81014e2:	4b14      	ldr	r3, [pc, #80]	; (8101534 <HAL_SPDIFRX_MspInit+0xc4>)
 81014e4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 81014e8:	4a12      	ldr	r2, [pc, #72]	; (8101534 <HAL_SPDIFRX_MspInit+0xc4>)
 81014ea:	f043 0308 	orr.w	r3, r3, #8
 81014ee:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 81014f2:	4b10      	ldr	r3, [pc, #64]	; (8101534 <HAL_SPDIFRX_MspInit+0xc4>)
 81014f4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 81014f8:	f003 0308 	and.w	r3, r3, #8
 81014fc:	60bb      	str	r3, [r7, #8]
 81014fe:	68bb      	ldr	r3, [r7, #8]
    /**SPDIFRX1 GPIO Configuration
    PD7     ------> SPDIFRX1_IN0
    */
    GPIO_InitStruct.Pin = SPDIF_RX0_Pin;
 8101500:	2380      	movs	r3, #128	; 0x80
 8101502:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8101506:	2302      	movs	r3, #2
 8101508:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 810150c:	2300      	movs	r3, #0
 810150e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8101512:	2300      	movs	r3, #0
 8101514:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF9_SPDIF;
 8101518:	2309      	movs	r3, #9
 810151a:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(SPDIF_RX0_GPIO_Port, &GPIO_InitStruct);
 810151e:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8101522:	4619      	mov	r1, r3
 8101524:	4804      	ldr	r0, [pc, #16]	; (8101538 <HAL_SPDIFRX_MspInit+0xc8>)
 8101526:	f001 febf 	bl	81032a8 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPDIFRX_MspInit 1 */

  /* USER CODE END SPDIFRX_MspInit 1 */
  }

}
 810152a:	bf00      	nop
 810152c:	37f0      	adds	r7, #240	; 0xf0
 810152e:	46bd      	mov	sp, r7
 8101530:	bd80      	pop	{r7, pc}
 8101532:	bf00      	nop
 8101534:	58024400 	.word	0x58024400
 8101538:	58020c00 	.word	0x58020c00

0810153c <HAL_TIM_OC_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_oc: TIM_OC handle pointer
* @retval None
*/
void HAL_TIM_OC_MspInit(TIM_HandleTypeDef* htim_oc)
{
 810153c:	b480      	push	{r7}
 810153e:	b085      	sub	sp, #20
 8101540:	af00      	add	r7, sp, #0
 8101542:	6078      	str	r0, [r7, #4]
  if(htim_oc->Instance==TIM8)
 8101544:	687b      	ldr	r3, [r7, #4]
 8101546:	681b      	ldr	r3, [r3, #0]
 8101548:	4a0b      	ldr	r2, [pc, #44]	; (8101578 <HAL_TIM_OC_MspInit+0x3c>)
 810154a:	4293      	cmp	r3, r2
 810154c:	d10e      	bne.n	810156c <HAL_TIM_OC_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM8_MspInit 0 */

  /* USER CODE END TIM8_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM8_CLK_ENABLE();
 810154e:	4b0b      	ldr	r3, [pc, #44]	; (810157c <HAL_TIM_OC_MspInit+0x40>)
 8101550:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8101554:	4a09      	ldr	r2, [pc, #36]	; (810157c <HAL_TIM_OC_MspInit+0x40>)
 8101556:	f043 0302 	orr.w	r3, r3, #2
 810155a:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 810155e:	4b07      	ldr	r3, [pc, #28]	; (810157c <HAL_TIM_OC_MspInit+0x40>)
 8101560:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8101564:	f003 0302 	and.w	r3, r3, #2
 8101568:	60fb      	str	r3, [r7, #12]
 810156a:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }

}
 810156c:	bf00      	nop
 810156e:	3714      	adds	r7, #20
 8101570:	46bd      	mov	sp, r7
 8101572:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101576:	4770      	bx	lr
 8101578:	40010400 	.word	0x40010400
 810157c:	58024400 	.word	0x58024400

08101580 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8101580:	b580      	push	{r7, lr}
 8101582:	b08a      	sub	sp, #40	; 0x28
 8101584:	af00      	add	r7, sp, #0
 8101586:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8101588:	f107 0314 	add.w	r3, r7, #20
 810158c:	2200      	movs	r2, #0
 810158e:	601a      	str	r2, [r3, #0]
 8101590:	605a      	str	r2, [r3, #4]
 8101592:	609a      	str	r2, [r3, #8]
 8101594:	60da      	str	r2, [r3, #12]
 8101596:	611a      	str	r2, [r3, #16]
  if(htim_base->Instance==TIM13)
 8101598:	687b      	ldr	r3, [r7, #4]
 810159a:	681b      	ldr	r3, [r3, #0]
 810159c:	4a1a      	ldr	r2, [pc, #104]	; (8101608 <HAL_TIM_Base_MspInit+0x88>)
 810159e:	4293      	cmp	r3, r2
 81015a0:	d12e      	bne.n	8101600 <HAL_TIM_Base_MspInit+0x80>
  {
  /* USER CODE BEGIN TIM13_MspInit 0 */

  /* USER CODE END TIM13_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM13_CLK_ENABLE();
 81015a2:	4b1a      	ldr	r3, [pc, #104]	; (810160c <HAL_TIM_Base_MspInit+0x8c>)
 81015a4:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 81015a8:	4a18      	ldr	r2, [pc, #96]	; (810160c <HAL_TIM_Base_MspInit+0x8c>)
 81015aa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 81015ae:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 81015b2:	4b16      	ldr	r3, [pc, #88]	; (810160c <HAL_TIM_Base_MspInit+0x8c>)
 81015b4:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 81015b8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 81015bc:	613b      	str	r3, [r7, #16]
 81015be:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOF_CLK_ENABLE();
 81015c0:	4b12      	ldr	r3, [pc, #72]	; (810160c <HAL_TIM_Base_MspInit+0x8c>)
 81015c2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 81015c6:	4a11      	ldr	r2, [pc, #68]	; (810160c <HAL_TIM_Base_MspInit+0x8c>)
 81015c8:	f043 0320 	orr.w	r3, r3, #32
 81015cc:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 81015d0:	4b0e      	ldr	r3, [pc, #56]	; (810160c <HAL_TIM_Base_MspInit+0x8c>)
 81015d2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 81015d6:	f003 0320 	and.w	r3, r3, #32
 81015da:	60fb      	str	r3, [r7, #12]
 81015dc:	68fb      	ldr	r3, [r7, #12]
    /**TIM13 GPIO Configuration
    PF8     ------> TIM13_CH1
    */
    GPIO_InitStruct.Pin = PMOD_14_ARD_D3_Pin;
 81015de:	f44f 7380 	mov.w	r3, #256	; 0x100
 81015e2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 81015e4:	2302      	movs	r3, #2
 81015e6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 81015e8:	2300      	movs	r3, #0
 81015ea:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 81015ec:	2300      	movs	r3, #0
 81015ee:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_TIM13;
 81015f0:	2309      	movs	r3, #9
 81015f2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(PMOD_14_ARD_D3_GPIO_Port, &GPIO_InitStruct);
 81015f4:	f107 0314 	add.w	r3, r7, #20
 81015f8:	4619      	mov	r1, r3
 81015fa:	4805      	ldr	r0, [pc, #20]	; (8101610 <HAL_TIM_Base_MspInit+0x90>)
 81015fc:	f001 fe54 	bl	81032a8 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM13_MspInit 1 */

  /* USER CODE END TIM13_MspInit 1 */
  }

}
 8101600:	bf00      	nop
 8101602:	3728      	adds	r7, #40	; 0x28
 8101604:	46bd      	mov	sp, r7
 8101606:	bd80      	pop	{r7, pc}
 8101608:	40001c00 	.word	0x40001c00
 810160c:	58024400 	.word	0x58024400
 8101610:	58021400 	.word	0x58021400

08101614 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8101614:	b580      	push	{r7, lr}
 8101616:	b088      	sub	sp, #32
 8101618:	af00      	add	r7, sp, #0
 810161a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 810161c:	f107 030c 	add.w	r3, r7, #12
 8101620:	2200      	movs	r2, #0
 8101622:	601a      	str	r2, [r3, #0]
 8101624:	605a      	str	r2, [r3, #4]
 8101626:	609a      	str	r2, [r3, #8]
 8101628:	60da      	str	r2, [r3, #12]
 810162a:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM8)
 810162c:	687b      	ldr	r3, [r7, #4]
 810162e:	681b      	ldr	r3, [r3, #0]
 8101630:	4a12      	ldr	r2, [pc, #72]	; (810167c <HAL_TIM_MspPostInit+0x68>)
 8101632:	4293      	cmp	r3, r2
 8101634:	d11e      	bne.n	8101674 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM8_MspPostInit 0 */

  /* USER CODE END TIM8_MspPostInit 0 */

    __HAL_RCC_GPIOJ_CLK_ENABLE();
 8101636:	4b12      	ldr	r3, [pc, #72]	; (8101680 <HAL_TIM_MspPostInit+0x6c>)
 8101638:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 810163c:	4a10      	ldr	r2, [pc, #64]	; (8101680 <HAL_TIM_MspPostInit+0x6c>)
 810163e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8101642:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8101646:	4b0e      	ldr	r3, [pc, #56]	; (8101680 <HAL_TIM_MspPostInit+0x6c>)
 8101648:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 810164c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8101650:	60bb      	str	r3, [r7, #8]
 8101652:	68bb      	ldr	r3, [r7, #8]
    /**TIM8 GPIO Configuration
    PJ7     ------> TIM8_CH2N
    PJ6     ------> TIM8_CH2
    */
    GPIO_InitStruct.Pin = ARD_D6_Pin|ARD_D9_Pin;
 8101654:	23c0      	movs	r3, #192	; 0xc0
 8101656:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8101658:	2302      	movs	r3, #2
 810165a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 810165c:	2300      	movs	r3, #0
 810165e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8101660:	2300      	movs	r3, #0
 8101662:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 8101664:	2303      	movs	r3, #3
 8101666:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOJ, &GPIO_InitStruct);
 8101668:	f107 030c 	add.w	r3, r7, #12
 810166c:	4619      	mov	r1, r3
 810166e:	4805      	ldr	r0, [pc, #20]	; (8101684 <HAL_TIM_MspPostInit+0x70>)
 8101670:	f001 fe1a 	bl	81032a8 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM8_MspPostInit 1 */

  /* USER CODE END TIM8_MspPostInit 1 */
  }

}
 8101674:	bf00      	nop
 8101676:	3720      	adds	r7, #32
 8101678:	46bd      	mov	sp, r7
 810167a:	bd80      	pop	{r7, pc}
 810167c:	40010400 	.word	0x40010400
 8101680:	58024400 	.word	0x58024400
 8101684:	58022400 	.word	0x58022400

08101688 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8101688:	b580      	push	{r7, lr}
 810168a:	b08a      	sub	sp, #40	; 0x28
 810168c:	af00      	add	r7, sp, #0
 810168e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8101690:	f107 0314 	add.w	r3, r7, #20
 8101694:	2200      	movs	r2, #0
 8101696:	601a      	str	r2, [r3, #0]
 8101698:	605a      	str	r2, [r3, #4]
 810169a:	609a      	str	r2, [r3, #8]
 810169c:	60da      	str	r2, [r3, #12]
 810169e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==UART8)
 81016a0:	687b      	ldr	r3, [r7, #4]
 81016a2:	681b      	ldr	r3, [r3, #0]
 81016a4:	4a1a      	ldr	r2, [pc, #104]	; (8101710 <HAL_UART_MspInit+0x88>)
 81016a6:	4293      	cmp	r3, r2
 81016a8:	d12e      	bne.n	8101708 <HAL_UART_MspInit+0x80>
  {
  /* USER CODE BEGIN UART8_MspInit 0 */

  /* USER CODE END UART8_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_UART8_CLK_ENABLE();
 81016aa:	4b1a      	ldr	r3, [pc, #104]	; (8101714 <HAL_UART_MspInit+0x8c>)
 81016ac:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 81016b0:	4a18      	ldr	r2, [pc, #96]	; (8101714 <HAL_UART_MspInit+0x8c>)
 81016b2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 81016b6:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 81016ba:	4b16      	ldr	r3, [pc, #88]	; (8101714 <HAL_UART_MspInit+0x8c>)
 81016bc:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 81016c0:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 81016c4:	613b      	str	r3, [r7, #16]
 81016c6:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOJ_CLK_ENABLE();
 81016c8:	4b12      	ldr	r3, [pc, #72]	; (8101714 <HAL_UART_MspInit+0x8c>)
 81016ca:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 81016ce:	4a11      	ldr	r2, [pc, #68]	; (8101714 <HAL_UART_MspInit+0x8c>)
 81016d0:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 81016d4:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 81016d8:	4b0e      	ldr	r3, [pc, #56]	; (8101714 <HAL_UART_MspInit+0x8c>)
 81016da:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 81016de:	f403 7300 	and.w	r3, r3, #512	; 0x200
 81016e2:	60fb      	str	r3, [r7, #12]
 81016e4:	68fb      	ldr	r3, [r7, #12]
    /**UART8 GPIO Configuration
    PJ9     ------> UART8_RX
    PJ8     ------> UART8_TX
    */
    GPIO_InitStruct.Pin = ARD_D0_Pin|ARD_D1_Pin;
 81016e6:	f44f 7340 	mov.w	r3, #768	; 0x300
 81016ea:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 81016ec:	2302      	movs	r3, #2
 81016ee:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 81016f0:	2300      	movs	r3, #0
 81016f2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 81016f4:	2300      	movs	r3, #0
 81016f6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF8_UART8;
 81016f8:	2308      	movs	r3, #8
 81016fa:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOJ, &GPIO_InitStruct);
 81016fc:	f107 0314 	add.w	r3, r7, #20
 8101700:	4619      	mov	r1, r3
 8101702:	4805      	ldr	r0, [pc, #20]	; (8101718 <HAL_UART_MspInit+0x90>)
 8101704:	f001 fdd0 	bl	81032a8 <HAL_GPIO_Init>
  /* USER CODE BEGIN UART8_MspInit 1 */

  /* USER CODE END UART8_MspInit 1 */
  }

}
 8101708:	bf00      	nop
 810170a:	3728      	adds	r7, #40	; 0x28
 810170c:	46bd      	mov	sp, r7
 810170e:	bd80      	pop	{r7, pc}
 8101710:	40007c00 	.word	0x40007c00
 8101714:	58024400 	.word	0x58024400
 8101718:	58022400 	.word	0x58022400

0810171c <HAL_SAI_MspInit>:
}

static uint32_t SAI1_client =0;

void HAL_SAI_MspInit(SAI_HandleTypeDef* hsai)
{
 810171c:	b580      	push	{r7, lr}
 810171e:	b0bc      	sub	sp, #240	; 0xf0
 8101720:	af00      	add	r7, sp, #0
 8101722:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct;
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8101724:	f107 0310 	add.w	r3, r7, #16
 8101728:	22c8      	movs	r2, #200	; 0xc8
 810172a:	2100      	movs	r1, #0
 810172c:	4618      	mov	r0, r3
 810172e:	f008 f829 	bl	8109784 <memset>
/* SAI1 */
    if(hsai->Instance==SAI1_Block_A)
 8101732:	687b      	ldr	r3, [r7, #4]
 8101734:	681b      	ldr	r3, [r3, #0]
 8101736:	4a4f      	ldr	r2, [pc, #316]	; (8101874 <HAL_SAI_MspInit+0x158>)
 8101738:	4293      	cmp	r3, r2
 810173a:	d153      	bne.n	81017e4 <HAL_SAI_MspInit+0xc8>
    {
    /* Peripheral clock enable */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SAI1;
 810173c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8101740:	f04f 0300 	mov.w	r3, #0
 8101744:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Sai1ClockSelection = RCC_SAI1CLKSOURCE_PLL;
 8101748:	2300      	movs	r3, #0
 810174a:	66fb      	str	r3, [r7, #108]	; 0x6c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 810174c:	f107 0310 	add.w	r3, r7, #16
 8101750:	4618      	mov	r0, r3
 8101752:	f002 f9cb 	bl	8103aec <HAL_RCCEx_PeriphCLKConfig>
 8101756:	4603      	mov	r3, r0
 8101758:	2b00      	cmp	r3, #0
 810175a:	d001      	beq.n	8101760 <HAL_SAI_MspInit+0x44>
    {
      Error_Handler();
 810175c:	f7ff fbce 	bl	8100efc <Error_Handler>
    }

    if (SAI1_client == 0)
 8101760:	4b45      	ldr	r3, [pc, #276]	; (8101878 <HAL_SAI_MspInit+0x15c>)
 8101762:	681b      	ldr	r3, [r3, #0]
 8101764:	2b00      	cmp	r3, #0
 8101766:	d10e      	bne.n	8101786 <HAL_SAI_MspInit+0x6a>
    {
       __HAL_RCC_SAI1_CLK_ENABLE();
 8101768:	4b44      	ldr	r3, [pc, #272]	; (810187c <HAL_SAI_MspInit+0x160>)
 810176a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 810176e:	4a43      	ldr	r2, [pc, #268]	; (810187c <HAL_SAI_MspInit+0x160>)
 8101770:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8101774:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8101778:	4b40      	ldr	r3, [pc, #256]	; (810187c <HAL_SAI_MspInit+0x160>)
 810177a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 810177e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8101782:	60fb      	str	r3, [r7, #12]
 8101784:	68fb      	ldr	r3, [r7, #12]
    }
    SAI1_client ++;
 8101786:	4b3c      	ldr	r3, [pc, #240]	; (8101878 <HAL_SAI_MspInit+0x15c>)
 8101788:	681b      	ldr	r3, [r3, #0]
 810178a:	3301      	adds	r3, #1
 810178c:	4a3a      	ldr	r2, [pc, #232]	; (8101878 <HAL_SAI_MspInit+0x15c>)
 810178e:	6013      	str	r3, [r2, #0]
    PE5     ------> SAI1_SCK_A
    PE4     ------> SAI1_FS_A
    PE6     ------> SAI1_SD_A
    PG7     ------> SAI1_MCLK_A
    */
    GPIO_InitStruct.Pin = SAI1_SCK_A_Pin|SAI1_FS_A_Pin|SAI1_SD_A_Pin;
 8101790:	2370      	movs	r3, #112	; 0x70
 8101792:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8101796:	2302      	movs	r3, #2
 8101798:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 810179c:	2300      	movs	r3, #0
 810179e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 81017a2:	2300      	movs	r3, #0
 81017a4:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF6_SAI1;
 81017a8:	2306      	movs	r3, #6
 81017aa:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 81017ae:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 81017b2:	4619      	mov	r1, r3
 81017b4:	4832      	ldr	r0, [pc, #200]	; (8101880 <HAL_SAI_MspInit+0x164>)
 81017b6:	f001 fd77 	bl	81032a8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = SAI1_MCLK_A_Pin;
 81017ba:	2380      	movs	r3, #128	; 0x80
 81017bc:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 81017c0:	2302      	movs	r3, #2
 81017c2:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 81017c6:	2300      	movs	r3, #0
 81017c8:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 81017cc:	2300      	movs	r3, #0
 81017ce:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF6_SAI1;
 81017d2:	2306      	movs	r3, #6
 81017d4:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(SAI1_MCLK_A_GPIO_Port, &GPIO_InitStruct);
 81017d8:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 81017dc:	4619      	mov	r1, r3
 81017de:	4829      	ldr	r0, [pc, #164]	; (8101884 <HAL_SAI_MspInit+0x168>)
 81017e0:	f001 fd62 	bl	81032a8 <HAL_GPIO_Init>

    }
    if(hsai->Instance==SAI1_Block_B)
 81017e4:	687b      	ldr	r3, [r7, #4]
 81017e6:	681b      	ldr	r3, [r3, #0]
 81017e8:	4a27      	ldr	r2, [pc, #156]	; (8101888 <HAL_SAI_MspInit+0x16c>)
 81017ea:	4293      	cmp	r3, r2
 81017ec:	d13e      	bne.n	810186c <HAL_SAI_MspInit+0x150>
    {
      /* Peripheral clock enable */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SAI1;
 81017ee:	f44f 7280 	mov.w	r2, #256	; 0x100
 81017f2:	f04f 0300 	mov.w	r3, #0
 81017f6:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Sai1ClockSelection = RCC_SAI1CLKSOURCE_PLL;
 81017fa:	2300      	movs	r3, #0
 81017fc:	66fb      	str	r3, [r7, #108]	; 0x6c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 81017fe:	f107 0310 	add.w	r3, r7, #16
 8101802:	4618      	mov	r0, r3
 8101804:	f002 f972 	bl	8103aec <HAL_RCCEx_PeriphCLKConfig>
 8101808:	4603      	mov	r3, r0
 810180a:	2b00      	cmp	r3, #0
 810180c:	d001      	beq.n	8101812 <HAL_SAI_MspInit+0xf6>
    {
      Error_Handler();
 810180e:	f7ff fb75 	bl	8100efc <Error_Handler>
    }

      if (SAI1_client == 0)
 8101812:	4b19      	ldr	r3, [pc, #100]	; (8101878 <HAL_SAI_MspInit+0x15c>)
 8101814:	681b      	ldr	r3, [r3, #0]
 8101816:	2b00      	cmp	r3, #0
 8101818:	d10e      	bne.n	8101838 <HAL_SAI_MspInit+0x11c>
      {
       __HAL_RCC_SAI1_CLK_ENABLE();
 810181a:	4b18      	ldr	r3, [pc, #96]	; (810187c <HAL_SAI_MspInit+0x160>)
 810181c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8101820:	4a16      	ldr	r2, [pc, #88]	; (810187c <HAL_SAI_MspInit+0x160>)
 8101822:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8101826:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 810182a:	4b14      	ldr	r3, [pc, #80]	; (810187c <HAL_SAI_MspInit+0x160>)
 810182c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8101830:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8101834:	60bb      	str	r3, [r7, #8]
 8101836:	68bb      	ldr	r3, [r7, #8]
      }
    SAI1_client ++;
 8101838:	4b0f      	ldr	r3, [pc, #60]	; (8101878 <HAL_SAI_MspInit+0x15c>)
 810183a:	681b      	ldr	r3, [r3, #0]
 810183c:	3301      	adds	r3, #1
 810183e:	4a0e      	ldr	r2, [pc, #56]	; (8101878 <HAL_SAI_MspInit+0x15c>)
 8101840:	6013      	str	r3, [r2, #0]

    /**SAI1_B_Block_B GPIO Configuration
    PE3     ------> SAI1_SD_B
    */
    GPIO_InitStruct.Pin = SAI1_SD_B_Pin;
 8101842:	2308      	movs	r3, #8
 8101844:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8101848:	2302      	movs	r3, #2
 810184a:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 810184e:	2300      	movs	r3, #0
 8101850:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8101854:	2300      	movs	r3, #0
 8101856:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF6_SAI1;
 810185a:	2306      	movs	r3, #6
 810185c:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(SAI1_SD_B_GPIO_Port, &GPIO_InitStruct);
 8101860:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8101864:	4619      	mov	r1, r3
 8101866:	4806      	ldr	r0, [pc, #24]	; (8101880 <HAL_SAI_MspInit+0x164>)
 8101868:	f001 fd1e 	bl	81032a8 <HAL_GPIO_Init>

    }
}
 810186c:	bf00      	nop
 810186e:	37f0      	adds	r7, #240	; 0xf0
 8101870:	46bd      	mov	sp, r7
 8101872:	bd80      	pop	{r7, pc}
 8101874:	40015804 	.word	0x40015804
 8101878:	10001ccc 	.word	0x10001ccc
 810187c:	58024400 	.word	0x58024400
 8101880:	58021000 	.word	0x58021000
 8101884:	58021800 	.word	0x58021800
 8101888:	40015824 	.word	0x40015824

0810188c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 810188c:	b480      	push	{r7}
 810188e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8101890:	e7fe      	b.n	8101890 <NMI_Handler+0x4>

08101892 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8101892:	b480      	push	{r7}
 8101894:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8101896:	e7fe      	b.n	8101896 <HardFault_Handler+0x4>

08101898 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8101898:	b480      	push	{r7}
 810189a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 810189c:	e7fe      	b.n	810189c <MemManage_Handler+0x4>

0810189e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 810189e:	b480      	push	{r7}
 81018a0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 81018a2:	e7fe      	b.n	81018a2 <BusFault_Handler+0x4>

081018a4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 81018a4:	b480      	push	{r7}
 81018a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 81018a8:	e7fe      	b.n	81018a8 <UsageFault_Handler+0x4>

081018aa <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 81018aa:	b480      	push	{r7}
 81018ac:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 81018ae:	bf00      	nop
 81018b0:	46bd      	mov	sp, r7
 81018b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 81018b6:	4770      	bx	lr

081018b8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 81018b8:	b480      	push	{r7}
 81018ba:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 81018bc:	bf00      	nop
 81018be:	46bd      	mov	sp, r7
 81018c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 81018c4:	4770      	bx	lr

081018c6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 81018c6:	b480      	push	{r7}
 81018c8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 81018ca:	bf00      	nop
 81018cc:	46bd      	mov	sp, r7
 81018ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 81018d2:	4770      	bx	lr

081018d4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 81018d4:	b580      	push	{r7, lr}
 81018d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 81018d8:	f000 f990 	bl	8101bfc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 81018dc:	bf00      	nop
 81018de:	bd80      	pop	{r7, pc}

081018e0 <CEC_IRQHandler>:

/**
  * @brief This function handles HDMI-CEC global interrupt.
  */
void CEC_IRQHandler(void)
{
 81018e0:	b580      	push	{r7, lr}
 81018e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CEC_IRQn 0 */

  /* USER CODE END CEC_IRQn 0 */
  HAL_CEC_IRQHandler(&hcec);
 81018e4:	4802      	ldr	r0, [pc, #8]	; (81018f0 <CEC_IRQHandler+0x10>)
 81018e6:	f001 fabf 	bl	8102e68 <HAL_CEC_IRQHandler>
  /* USER CODE BEGIN CEC_IRQn 1 */

  /* USER CODE END CEC_IRQn 1 */
}
 81018ea:	bf00      	nop
 81018ec:	bd80      	pop	{r7, pc}
 81018ee:	bf00      	nop
 81018f0:	10000150 	.word	0x10000150

081018f4 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 81018f4:	b480      	push	{r7}
 81018f6:	af00      	add	r7, sp, #0
  return 1;
 81018f8:	2301      	movs	r3, #1
}
 81018fa:	4618      	mov	r0, r3
 81018fc:	46bd      	mov	sp, r7
 81018fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101902:	4770      	bx	lr

08101904 <_kill>:

int _kill(int pid, int sig)
{
 8101904:	b580      	push	{r7, lr}
 8101906:	b082      	sub	sp, #8
 8101908:	af00      	add	r7, sp, #0
 810190a:	6078      	str	r0, [r7, #4]
 810190c:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 810190e:	f007 ff97 	bl	8109840 <__errno>
 8101912:	4603      	mov	r3, r0
 8101914:	2216      	movs	r2, #22
 8101916:	601a      	str	r2, [r3, #0]
  return -1;
 8101918:	f04f 33ff 	mov.w	r3, #4294967295
}
 810191c:	4618      	mov	r0, r3
 810191e:	3708      	adds	r7, #8
 8101920:	46bd      	mov	sp, r7
 8101922:	bd80      	pop	{r7, pc}

08101924 <_exit>:

void _exit (int status)
{
 8101924:	b580      	push	{r7, lr}
 8101926:	b082      	sub	sp, #8
 8101928:	af00      	add	r7, sp, #0
 810192a:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 810192c:	f04f 31ff 	mov.w	r1, #4294967295
 8101930:	6878      	ldr	r0, [r7, #4]
 8101932:	f7ff ffe7 	bl	8101904 <_kill>
  while (1) {}    /* Make sure we hang here */
 8101936:	e7fe      	b.n	8101936 <_exit+0x12>

08101938 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8101938:	b580      	push	{r7, lr}
 810193a:	b086      	sub	sp, #24
 810193c:	af00      	add	r7, sp, #0
 810193e:	60f8      	str	r0, [r7, #12]
 8101940:	60b9      	str	r1, [r7, #8]
 8101942:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8101944:	2300      	movs	r3, #0
 8101946:	617b      	str	r3, [r7, #20]
 8101948:	e00a      	b.n	8101960 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 810194a:	f3af 8000 	nop.w
 810194e:	4601      	mov	r1, r0
 8101950:	68bb      	ldr	r3, [r7, #8]
 8101952:	1c5a      	adds	r2, r3, #1
 8101954:	60ba      	str	r2, [r7, #8]
 8101956:	b2ca      	uxtb	r2, r1
 8101958:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 810195a:	697b      	ldr	r3, [r7, #20]
 810195c:	3301      	adds	r3, #1
 810195e:	617b      	str	r3, [r7, #20]
 8101960:	697a      	ldr	r2, [r7, #20]
 8101962:	687b      	ldr	r3, [r7, #4]
 8101964:	429a      	cmp	r2, r3
 8101966:	dbf0      	blt.n	810194a <_read+0x12>
  }

  return len;
 8101968:	687b      	ldr	r3, [r7, #4]
}
 810196a:	4618      	mov	r0, r3
 810196c:	3718      	adds	r7, #24
 810196e:	46bd      	mov	sp, r7
 8101970:	bd80      	pop	{r7, pc}

08101972 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8101972:	b580      	push	{r7, lr}
 8101974:	b086      	sub	sp, #24
 8101976:	af00      	add	r7, sp, #0
 8101978:	60f8      	str	r0, [r7, #12]
 810197a:	60b9      	str	r1, [r7, #8]
 810197c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 810197e:	2300      	movs	r3, #0
 8101980:	617b      	str	r3, [r7, #20]
 8101982:	e009      	b.n	8101998 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8101984:	68bb      	ldr	r3, [r7, #8]
 8101986:	1c5a      	adds	r2, r3, #1
 8101988:	60ba      	str	r2, [r7, #8]
 810198a:	781b      	ldrb	r3, [r3, #0]
 810198c:	4618      	mov	r0, r3
 810198e:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8101992:	697b      	ldr	r3, [r7, #20]
 8101994:	3301      	adds	r3, #1
 8101996:	617b      	str	r3, [r7, #20]
 8101998:	697a      	ldr	r2, [r7, #20]
 810199a:	687b      	ldr	r3, [r7, #4]
 810199c:	429a      	cmp	r2, r3
 810199e:	dbf1      	blt.n	8101984 <_write+0x12>
  }
  return len;
 81019a0:	687b      	ldr	r3, [r7, #4]
}
 81019a2:	4618      	mov	r0, r3
 81019a4:	3718      	adds	r7, #24
 81019a6:	46bd      	mov	sp, r7
 81019a8:	bd80      	pop	{r7, pc}

081019aa <_close>:

int _close(int file)
{
 81019aa:	b480      	push	{r7}
 81019ac:	b083      	sub	sp, #12
 81019ae:	af00      	add	r7, sp, #0
 81019b0:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 81019b2:	f04f 33ff 	mov.w	r3, #4294967295
}
 81019b6:	4618      	mov	r0, r3
 81019b8:	370c      	adds	r7, #12
 81019ba:	46bd      	mov	sp, r7
 81019bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 81019c0:	4770      	bx	lr

081019c2 <_fstat>:


int _fstat(int file, struct stat *st)
{
 81019c2:	b480      	push	{r7}
 81019c4:	b083      	sub	sp, #12
 81019c6:	af00      	add	r7, sp, #0
 81019c8:	6078      	str	r0, [r7, #4]
 81019ca:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 81019cc:	683b      	ldr	r3, [r7, #0]
 81019ce:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 81019d2:	605a      	str	r2, [r3, #4]
  return 0;
 81019d4:	2300      	movs	r3, #0
}
 81019d6:	4618      	mov	r0, r3
 81019d8:	370c      	adds	r7, #12
 81019da:	46bd      	mov	sp, r7
 81019dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 81019e0:	4770      	bx	lr

081019e2 <_isatty>:

int _isatty(int file)
{
 81019e2:	b480      	push	{r7}
 81019e4:	b083      	sub	sp, #12
 81019e6:	af00      	add	r7, sp, #0
 81019e8:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 81019ea:	2301      	movs	r3, #1
}
 81019ec:	4618      	mov	r0, r3
 81019ee:	370c      	adds	r7, #12
 81019f0:	46bd      	mov	sp, r7
 81019f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 81019f6:	4770      	bx	lr

081019f8 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 81019f8:	b480      	push	{r7}
 81019fa:	b085      	sub	sp, #20
 81019fc:	af00      	add	r7, sp, #0
 81019fe:	60f8      	str	r0, [r7, #12]
 8101a00:	60b9      	str	r1, [r7, #8]
 8101a02:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8101a04:	2300      	movs	r3, #0
}
 8101a06:	4618      	mov	r0, r3
 8101a08:	3714      	adds	r7, #20
 8101a0a:	46bd      	mov	sp, r7
 8101a0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101a10:	4770      	bx	lr
	...

08101a14 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8101a14:	b580      	push	{r7, lr}
 8101a16:	b086      	sub	sp, #24
 8101a18:	af00      	add	r7, sp, #0
 8101a1a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8101a1c:	4a14      	ldr	r2, [pc, #80]	; (8101a70 <_sbrk+0x5c>)
 8101a1e:	4b15      	ldr	r3, [pc, #84]	; (8101a74 <_sbrk+0x60>)
 8101a20:	1ad3      	subs	r3, r2, r3
 8101a22:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8101a24:	697b      	ldr	r3, [r7, #20]
 8101a26:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8101a28:	4b13      	ldr	r3, [pc, #76]	; (8101a78 <_sbrk+0x64>)
 8101a2a:	681b      	ldr	r3, [r3, #0]
 8101a2c:	2b00      	cmp	r3, #0
 8101a2e:	d102      	bne.n	8101a36 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8101a30:	4b11      	ldr	r3, [pc, #68]	; (8101a78 <_sbrk+0x64>)
 8101a32:	4a12      	ldr	r2, [pc, #72]	; (8101a7c <_sbrk+0x68>)
 8101a34:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8101a36:	4b10      	ldr	r3, [pc, #64]	; (8101a78 <_sbrk+0x64>)
 8101a38:	681a      	ldr	r2, [r3, #0]
 8101a3a:	687b      	ldr	r3, [r7, #4]
 8101a3c:	4413      	add	r3, r2
 8101a3e:	693a      	ldr	r2, [r7, #16]
 8101a40:	429a      	cmp	r2, r3
 8101a42:	d207      	bcs.n	8101a54 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8101a44:	f007 fefc 	bl	8109840 <__errno>
 8101a48:	4603      	mov	r3, r0
 8101a4a:	220c      	movs	r2, #12
 8101a4c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8101a4e:	f04f 33ff 	mov.w	r3, #4294967295
 8101a52:	e009      	b.n	8101a68 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8101a54:	4b08      	ldr	r3, [pc, #32]	; (8101a78 <_sbrk+0x64>)
 8101a56:	681b      	ldr	r3, [r3, #0]
 8101a58:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8101a5a:	4b07      	ldr	r3, [pc, #28]	; (8101a78 <_sbrk+0x64>)
 8101a5c:	681a      	ldr	r2, [r3, #0]
 8101a5e:	687b      	ldr	r3, [r7, #4]
 8101a60:	4413      	add	r3, r2
 8101a62:	4a05      	ldr	r2, [pc, #20]	; (8101a78 <_sbrk+0x64>)
 8101a64:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8101a66:	68fb      	ldr	r3, [r7, #12]
}
 8101a68:	4618      	mov	r0, r3
 8101a6a:	3718      	adds	r7, #24
 8101a6c:	46bd      	mov	sp, r7
 8101a6e:	bd80      	pop	{r7, pc}
 8101a70:	10048000 	.word	0x10048000
 8101a74:	00000800 	.word	0x00000800
 8101a78:	10001cd0 	.word	0x10001cd0
 8101a7c:	10001e28 	.word	0x10001e28

08101a80 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8101a80:	f8df d034 	ldr.w	sp, [pc, #52]	; 8101ab8 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8101a84:	f7fe fdfa 	bl	810067c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8101a88:	480c      	ldr	r0, [pc, #48]	; (8101abc <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8101a8a:	490d      	ldr	r1, [pc, #52]	; (8101ac0 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8101a8c:	4a0d      	ldr	r2, [pc, #52]	; (8101ac4 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8101a8e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8101a90:	e002      	b.n	8101a98 <LoopCopyDataInit>

08101a92 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8101a92:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8101a94:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8101a96:	3304      	adds	r3, #4

08101a98 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8101a98:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8101a9a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8101a9c:	d3f9      	bcc.n	8101a92 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8101a9e:	4a0a      	ldr	r2, [pc, #40]	; (8101ac8 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8101aa0:	4c0a      	ldr	r4, [pc, #40]	; (8101acc <LoopFillZerobss+0x22>)
  movs r3, #0
 8101aa2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8101aa4:	e001      	b.n	8101aaa <LoopFillZerobss>

08101aa6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8101aa6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8101aa8:	3204      	adds	r2, #4

08101aaa <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8101aaa:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8101aac:	d3fb      	bcc.n	8101aa6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8101aae:	f007 fecd 	bl	810984c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8101ab2:	f7fe fdfb 	bl	81006ac <main>
  bx  lr
 8101ab6:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8101ab8:	10048000 	.word	0x10048000
  ldr r0, =_sdata
 8101abc:	10000000 	.word	0x10000000
  ldr r1, =_edata
 8101ac0:	1000006c 	.word	0x1000006c
  ldr r2, =_sidata
 8101ac4:	0810be60 	.word	0x0810be60
  ldr r2, =_sbss
 8101ac8:	1000006c 	.word	0x1000006c
  ldr r4, =_ebss
 8101acc:	10001e24 	.word	0x10001e24

08101ad0 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8101ad0:	e7fe      	b.n	8101ad0 <ADC3_IRQHandler>
	...

08101ad4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8101ad4:	b580      	push	{r7, lr}
 8101ad6:	b082      	sub	sp, #8
 8101ad8:	af00      	add	r7, sp, #0

uint32_t common_system_clock;

#if defined(DUAL_CORE) && defined(CORE_CM4)
   /* Configure Cortex-M4 Instruction cache through ART accelerator */
   __HAL_RCC_ART_CLK_ENABLE();                   /* Enable the Cortex-M4 ART Clock */
 8101ada:	4b28      	ldr	r3, [pc, #160]	; (8101b7c <HAL_Init+0xa8>)
 8101adc:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8101ae0:	4a26      	ldr	r2, [pc, #152]	; (8101b7c <HAL_Init+0xa8>)
 8101ae2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8101ae6:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8101aea:	4b24      	ldr	r3, [pc, #144]	; (8101b7c <HAL_Init+0xa8>)
 8101aec:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8101af0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8101af4:	603b      	str	r3, [r7, #0]
 8101af6:	683b      	ldr	r3, [r7, #0]
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
 8101af8:	4b21      	ldr	r3, [pc, #132]	; (8101b80 <HAL_Init+0xac>)
 8101afa:	681b      	ldr	r3, [r3, #0]
 8101afc:	f423 237f 	bic.w	r3, r3, #1044480	; 0xff000
 8101b00:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8101b04:	4a1e      	ldr	r2, [pc, #120]	; (8101b80 <HAL_Init+0xac>)
 8101b06:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 8101b0a:	6013      	str	r3, [r2, #0]
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
 8101b0c:	4b1c      	ldr	r3, [pc, #112]	; (8101b80 <HAL_Init+0xac>)
 8101b0e:	681b      	ldr	r3, [r3, #0]
 8101b10:	4a1b      	ldr	r2, [pc, #108]	; (8101b80 <HAL_Init+0xac>)
 8101b12:	f043 0301 	orr.w	r3, r3, #1
 8101b16:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8101b18:	2003      	movs	r0, #3
 8101b1a:	f001 fb71 	bl	8103200 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8101b1e:	f001 fe0d 	bl	810373c <HAL_RCC_GetSysClockFreq>
 8101b22:	4602      	mov	r2, r0
 8101b24:	4b15      	ldr	r3, [pc, #84]	; (8101b7c <HAL_Init+0xa8>)
 8101b26:	699b      	ldr	r3, [r3, #24]
 8101b28:	0a1b      	lsrs	r3, r3, #8
 8101b2a:	f003 030f 	and.w	r3, r3, #15
 8101b2e:	4915      	ldr	r1, [pc, #84]	; (8101b84 <HAL_Init+0xb0>)
 8101b30:	5ccb      	ldrb	r3, [r1, r3]
 8101b32:	f003 031f 	and.w	r3, r3, #31
 8101b36:	fa22 f303 	lsr.w	r3, r2, r3
 8101b3a:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8101b3c:	4b0f      	ldr	r3, [pc, #60]	; (8101b7c <HAL_Init+0xa8>)
 8101b3e:	699b      	ldr	r3, [r3, #24]
 8101b40:	f003 030f 	and.w	r3, r3, #15
 8101b44:	4a0f      	ldr	r2, [pc, #60]	; (8101b84 <HAL_Init+0xb0>)
 8101b46:	5cd3      	ldrb	r3, [r2, r3]
 8101b48:	f003 031f 	and.w	r3, r3, #31
 8101b4c:	687a      	ldr	r2, [r7, #4]
 8101b4e:	fa22 f303 	lsr.w	r3, r2, r3
 8101b52:	4a0d      	ldr	r2, [pc, #52]	; (8101b88 <HAL_Init+0xb4>)
 8101b54:	6013      	str	r3, [r2, #0]
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE)>> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
 8101b56:	4b0c      	ldr	r3, [pc, #48]	; (8101b88 <HAL_Init+0xb4>)
 8101b58:	681b      	ldr	r3, [r3, #0]
 8101b5a:	4a0c      	ldr	r2, [pc, #48]	; (8101b8c <HAL_Init+0xb8>)
 8101b5c:	6013      	str	r3, [r2, #0]
#else
  SystemCoreClock = common_system_clock;
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8101b5e:	2000      	movs	r0, #0
 8101b60:	f000 f816 	bl	8101b90 <HAL_InitTick>
 8101b64:	4603      	mov	r3, r0
 8101b66:	2b00      	cmp	r3, #0
 8101b68:	d001      	beq.n	8101b6e <HAL_Init+0x9a>
  {
    return HAL_ERROR;
 8101b6a:	2301      	movs	r3, #1
 8101b6c:	e002      	b.n	8101b74 <HAL_Init+0xa0>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8101b6e:	f7ff fb2d 	bl	81011cc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8101b72:	2300      	movs	r3, #0
}
 8101b74:	4618      	mov	r0, r3
 8101b76:	3708      	adds	r7, #8
 8101b78:	46bd      	mov	sp, r7
 8101b7a:	bd80      	pop	{r7, pc}
 8101b7c:	58024400 	.word	0x58024400
 8101b80:	40024400 	.word	0x40024400
 8101b84:	0810bd98 	.word	0x0810bd98
 8101b88:	10000004 	.word	0x10000004
 8101b8c:	10000000 	.word	0x10000000

08101b90 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8101b90:	b580      	push	{r7, lr}
 8101b92:	b082      	sub	sp, #8
 8101b94:	af00      	add	r7, sp, #0
 8101b96:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8101b98:	4b15      	ldr	r3, [pc, #84]	; (8101bf0 <HAL_InitTick+0x60>)
 8101b9a:	781b      	ldrb	r3, [r3, #0]
 8101b9c:	2b00      	cmp	r3, #0
 8101b9e:	d101      	bne.n	8101ba4 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8101ba0:	2301      	movs	r3, #1
 8101ba2:	e021      	b.n	8101be8 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8101ba4:	4b13      	ldr	r3, [pc, #76]	; (8101bf4 <HAL_InitTick+0x64>)
 8101ba6:	681a      	ldr	r2, [r3, #0]
 8101ba8:	4b11      	ldr	r3, [pc, #68]	; (8101bf0 <HAL_InitTick+0x60>)
 8101baa:	781b      	ldrb	r3, [r3, #0]
 8101bac:	4619      	mov	r1, r3
 8101bae:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8101bb2:	fbb3 f3f1 	udiv	r3, r3, r1
 8101bb6:	fbb2 f3f3 	udiv	r3, r2, r3
 8101bba:	4618      	mov	r0, r3
 8101bbc:	f001 fb53 	bl	8103266 <HAL_SYSTICK_Config>
 8101bc0:	4603      	mov	r3, r0
 8101bc2:	2b00      	cmp	r3, #0
 8101bc4:	d001      	beq.n	8101bca <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8101bc6:	2301      	movs	r3, #1
 8101bc8:	e00e      	b.n	8101be8 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8101bca:	687b      	ldr	r3, [r7, #4]
 8101bcc:	2b0f      	cmp	r3, #15
 8101bce:	d80a      	bhi.n	8101be6 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8101bd0:	2200      	movs	r2, #0
 8101bd2:	6879      	ldr	r1, [r7, #4]
 8101bd4:	f04f 30ff 	mov.w	r0, #4294967295
 8101bd8:	f001 fb1d 	bl	8103216 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8101bdc:	4a06      	ldr	r2, [pc, #24]	; (8101bf8 <HAL_InitTick+0x68>)
 8101bde:	687b      	ldr	r3, [r7, #4]
 8101be0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8101be2:	2300      	movs	r3, #0
 8101be4:	e000      	b.n	8101be8 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8101be6:	2301      	movs	r3, #1
}
 8101be8:	4618      	mov	r0, r3
 8101bea:	3708      	adds	r7, #8
 8101bec:	46bd      	mov	sp, r7
 8101bee:	bd80      	pop	{r7, pc}
 8101bf0:	1000000c 	.word	0x1000000c
 8101bf4:	10000000 	.word	0x10000000
 8101bf8:	10000008 	.word	0x10000008

08101bfc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8101bfc:	b480      	push	{r7}
 8101bfe:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8101c00:	4b06      	ldr	r3, [pc, #24]	; (8101c1c <HAL_IncTick+0x20>)
 8101c02:	781b      	ldrb	r3, [r3, #0]
 8101c04:	461a      	mov	r2, r3
 8101c06:	4b06      	ldr	r3, [pc, #24]	; (8101c20 <HAL_IncTick+0x24>)
 8101c08:	681b      	ldr	r3, [r3, #0]
 8101c0a:	4413      	add	r3, r2
 8101c0c:	4a04      	ldr	r2, [pc, #16]	; (8101c20 <HAL_IncTick+0x24>)
 8101c0e:	6013      	str	r3, [r2, #0]
}
 8101c10:	bf00      	nop
 8101c12:	46bd      	mov	sp, r7
 8101c14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101c18:	4770      	bx	lr
 8101c1a:	bf00      	nop
 8101c1c:	1000000c 	.word	0x1000000c
 8101c20:	10001cd4 	.word	0x10001cd4

08101c24 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8101c24:	b480      	push	{r7}
 8101c26:	af00      	add	r7, sp, #0
  return uwTick;
 8101c28:	4b03      	ldr	r3, [pc, #12]	; (8101c38 <HAL_GetTick+0x14>)
 8101c2a:	681b      	ldr	r3, [r3, #0]
}
 8101c2c:	4618      	mov	r0, r3
 8101c2e:	46bd      	mov	sp, r7
 8101c30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101c34:	4770      	bx	lr
 8101c36:	bf00      	nop
 8101c38:	10001cd4 	.word	0x10001cd4

08101c3c <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8101c3c:	b480      	push	{r7}
 8101c3e:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8101c40:	4b03      	ldr	r3, [pc, #12]	; (8101c50 <HAL_GetREVID+0x14>)
 8101c42:	681b      	ldr	r3, [r3, #0]
 8101c44:	0c1b      	lsrs	r3, r3, #16
}
 8101c46:	4618      	mov	r0, r3
 8101c48:	46bd      	mov	sp, r7
 8101c4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101c4e:	4770      	bx	lr
 8101c50:	5c001000 	.word	0x5c001000

08101c54 <HAL_SYSCFG_AnalogSwitchConfig>:
  *   @arg SYSCFG_SWITCH_PC3_CLOSE
  * @retval None
  */

void HAL_SYSCFG_AnalogSwitchConfig(uint32_t SYSCFG_AnalogSwitch , uint32_t SYSCFG_SwitchState )
{
 8101c54:	b480      	push	{r7}
 8101c56:	b083      	sub	sp, #12
 8101c58:	af00      	add	r7, sp, #0
 8101c5a:	6078      	str	r0, [r7, #4]
 8101c5c:	6039      	str	r1, [r7, #0]
  /* Check the parameter */
  assert_param(IS_SYSCFG_ANALOG_SWITCH(SYSCFG_AnalogSwitch));
  assert_param(IS_SYSCFG_SWITCH_STATE(SYSCFG_SwitchState));

  MODIFY_REG(SYSCFG->PMCR, (uint32_t) SYSCFG_AnalogSwitch, (uint32_t)(SYSCFG_SwitchState));
 8101c5e:	4b07      	ldr	r3, [pc, #28]	; (8101c7c <HAL_SYSCFG_AnalogSwitchConfig+0x28>)
 8101c60:	685a      	ldr	r2, [r3, #4]
 8101c62:	687b      	ldr	r3, [r7, #4]
 8101c64:	43db      	mvns	r3, r3
 8101c66:	401a      	ands	r2, r3
 8101c68:	4904      	ldr	r1, [pc, #16]	; (8101c7c <HAL_SYSCFG_AnalogSwitchConfig+0x28>)
 8101c6a:	683b      	ldr	r3, [r7, #0]
 8101c6c:	4313      	orrs	r3, r2
 8101c6e:	604b      	str	r3, [r1, #4]
}
 8101c70:	bf00      	nop
 8101c72:	370c      	adds	r7, #12
 8101c74:	46bd      	mov	sp, r7
 8101c76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101c7a:	4770      	bx	lr
 8101c7c:	58000400 	.word	0x58000400

08101c80 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8101c80:	b480      	push	{r7}
 8101c82:	b083      	sub	sp, #12
 8101c84:	af00      	add	r7, sp, #0
 8101c86:	6078      	str	r0, [r7, #4]
 8101c88:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8101c8a:	687b      	ldr	r3, [r7, #4]
 8101c8c:	689b      	ldr	r3, [r3, #8]
 8101c8e:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8101c92:	683b      	ldr	r3, [r7, #0]
 8101c94:	431a      	orrs	r2, r3
 8101c96:	687b      	ldr	r3, [r7, #4]
 8101c98:	609a      	str	r2, [r3, #8]
}
 8101c9a:	bf00      	nop
 8101c9c:	370c      	adds	r7, #12
 8101c9e:	46bd      	mov	sp, r7
 8101ca0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101ca4:	4770      	bx	lr

08101ca6 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8101ca6:	b480      	push	{r7}
 8101ca8:	b083      	sub	sp, #12
 8101caa:	af00      	add	r7, sp, #0
 8101cac:	6078      	str	r0, [r7, #4]
 8101cae:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8101cb0:	687b      	ldr	r3, [r7, #4]
 8101cb2:	689b      	ldr	r3, [r3, #8]
 8101cb4:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8101cb8:	683b      	ldr	r3, [r7, #0]
 8101cba:	431a      	orrs	r2, r3
 8101cbc:	687b      	ldr	r3, [r7, #4]
 8101cbe:	609a      	str	r2, [r3, #8]
}
 8101cc0:	bf00      	nop
 8101cc2:	370c      	adds	r7, #12
 8101cc4:	46bd      	mov	sp, r7
 8101cc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101cca:	4770      	bx	lr

08101ccc <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8101ccc:	b480      	push	{r7}
 8101cce:	b083      	sub	sp, #12
 8101cd0:	af00      	add	r7, sp, #0
 8101cd2:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8101cd4:	687b      	ldr	r3, [r7, #4]
 8101cd6:	689b      	ldr	r3, [r3, #8]
 8101cd8:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8101cdc:	4618      	mov	r0, r3
 8101cde:	370c      	adds	r7, #12
 8101ce0:	46bd      	mov	sp, r7
 8101ce2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101ce6:	4770      	bx	lr

08101ce8 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0x3FFFFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8101ce8:	b480      	push	{r7}
 8101cea:	b087      	sub	sp, #28
 8101cec:	af00      	add	r7, sp, #0
 8101cee:	60f8      	str	r0, [r7, #12]
 8101cf0:	60b9      	str	r1, [r7, #8]
 8101cf2:	607a      	str	r2, [r7, #4]
 8101cf4:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8101cf6:	68fb      	ldr	r3, [r7, #12]
 8101cf8:	3360      	adds	r3, #96	; 0x60
 8101cfa:	461a      	mov	r2, r3
 8101cfc:	68bb      	ldr	r3, [r7, #8]
 8101cfe:	009b      	lsls	r3, r3, #2
 8101d00:	4413      	add	r3, r2
 8101d02:	617b      	str	r3, [r7, #20]
               ADC3_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
  else
#endif /* ADC_VER_V5_V90 */
  {
    MODIFY_REG(*preg,
 8101d04:	697b      	ldr	r3, [r7, #20]
 8101d06:	681b      	ldr	r3, [r3, #0]
 8101d08:	f003 4200 	and.w	r2, r3, #2147483648	; 0x80000000
 8101d0c:	687b      	ldr	r3, [r7, #4]
 8101d0e:	f003 41f8 	and.w	r1, r3, #2080374784	; 0x7c000000
 8101d12:	683b      	ldr	r3, [r7, #0]
 8101d14:	430b      	orrs	r3, r1
 8101d16:	431a      	orrs	r2, r3
 8101d18:	697b      	ldr	r3, [r7, #20]
 8101d1a:	601a      	str	r2, [r3, #0]
               ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
               (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
}
 8101d1c:	bf00      	nop
 8101d1e:	371c      	adds	r7, #28
 8101d20:	46bd      	mov	sp, r7
 8101d22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101d26:	4770      	bx	lr

08101d28 <LL_ADC_SetDataRightShift>:
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_ENABLE
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetDataRightShift(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t RigthShift)
{
 8101d28:	b480      	push	{r7}
 8101d2a:	b085      	sub	sp, #20
 8101d2c:	af00      	add	r7, sp, #0
 8101d2e:	60f8      	str	r0, [r7, #12]
 8101d30:	60b9      	str	r1, [r7, #8]
 8101d32:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->CFGR2, (ADC_CFGR2_RSHIFT1 | ADC_CFGR2_RSHIFT2 | ADC_CFGR2_RSHIFT3 | ADC_CFGR2_RSHIFT4), RigthShift << (Offsety & 0x1FUL));
 8101d34:	68fb      	ldr	r3, [r7, #12]
 8101d36:	691b      	ldr	r3, [r3, #16]
 8101d38:	f423 42f0 	bic.w	r2, r3, #30720	; 0x7800
 8101d3c:	68bb      	ldr	r3, [r7, #8]
 8101d3e:	f003 031f 	and.w	r3, r3, #31
 8101d42:	6879      	ldr	r1, [r7, #4]
 8101d44:	fa01 f303 	lsl.w	r3, r1, r3
 8101d48:	431a      	orrs	r2, r3
 8101d4a:	68fb      	ldr	r3, [r7, #12]
 8101d4c:	611a      	str	r2, [r3, #16]
}
 8101d4e:	bf00      	nop
 8101d50:	3714      	adds	r7, #20
 8101d52:	46bd      	mov	sp, r7
 8101d54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101d58:	4770      	bx	lr

08101d5a <LL_ADC_SetOffsetSignedSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSignedSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSignedSaturation)
{
 8101d5a:	b480      	push	{r7}
 8101d5c:	b087      	sub	sp, #28
 8101d5e:	af00      	add	r7, sp, #0
 8101d60:	60f8      	str	r0, [r7, #12]
 8101d62:	60b9      	str	r1, [r7, #8]
 8101d64:	607a      	str	r2, [r7, #4]
    /* Function not available on this instance */
  }
  else
#endif  /* ADC_VER_V5_V90 */
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8101d66:	68fb      	ldr	r3, [r7, #12]
 8101d68:	3360      	adds	r3, #96	; 0x60
 8101d6a:	461a      	mov	r2, r3
 8101d6c:	68bb      	ldr	r3, [r7, #8]
 8101d6e:	009b      	lsls	r3, r3, #2
 8101d70:	4413      	add	r3, r2
 8101d72:	617b      	str	r3, [r7, #20]
    MODIFY_REG(*preg, ADC_OFR1_SSATE, OffsetSignedSaturation);
 8101d74:	697b      	ldr	r3, [r7, #20]
 8101d76:	681b      	ldr	r3, [r3, #0]
 8101d78:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8101d7c:	687b      	ldr	r3, [r7, #4]
 8101d7e:	431a      	orrs	r2, r3
 8101d80:	697b      	ldr	r3, [r7, #20]
 8101d82:	601a      	str	r2, [r3, #0]
  }
}
 8101d84:	bf00      	nop
 8101d86:	371c      	adds	r7, #28
 8101d88:	46bd      	mov	sp, r7
 8101d8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101d8e:	4770      	bx	lr

08101d90 <LL_ADC_REG_SetSequencerRanks>:
  *         (3) On STM32H7, fast channel (0.125 us for 14-bit resolution (ADC conversion rate up to 8 Ms/s)).
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8101d90:	b480      	push	{r7}
 8101d92:	b087      	sub	sp, #28
 8101d94:	af00      	add	r7, sp, #0
 8101d96:	60f8      	str	r0, [r7, #12]
 8101d98:	60b9      	str	r1, [r7, #8]
 8101d9a:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8101d9c:	68fb      	ldr	r3, [r7, #12]
 8101d9e:	3330      	adds	r3, #48	; 0x30
 8101da0:	461a      	mov	r2, r3
 8101da2:	68bb      	ldr	r3, [r7, #8]
 8101da4:	0a1b      	lsrs	r3, r3, #8
 8101da6:	009b      	lsls	r3, r3, #2
 8101da8:	f003 030c 	and.w	r3, r3, #12
 8101dac:	4413      	add	r3, r2
 8101dae:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8101db0:	697b      	ldr	r3, [r7, #20]
 8101db2:	681a      	ldr	r2, [r3, #0]
 8101db4:	68bb      	ldr	r3, [r7, #8]
 8101db6:	f003 031f 	and.w	r3, r3, #31
 8101dba:	211f      	movs	r1, #31
 8101dbc:	fa01 f303 	lsl.w	r3, r1, r3
 8101dc0:	43db      	mvns	r3, r3
 8101dc2:	401a      	ands	r2, r3
 8101dc4:	687b      	ldr	r3, [r7, #4]
 8101dc6:	0e9b      	lsrs	r3, r3, #26
 8101dc8:	f003 011f 	and.w	r1, r3, #31
 8101dcc:	68bb      	ldr	r3, [r7, #8]
 8101dce:	f003 031f 	and.w	r3, r3, #31
 8101dd2:	fa01 f303 	lsl.w	r3, r1, r3
 8101dd6:	431a      	orrs	r2, r3
 8101dd8:	697b      	ldr	r3, [r7, #20]
 8101dda:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8101ddc:	bf00      	nop
 8101dde:	371c      	adds	r7, #28
 8101de0:	46bd      	mov	sp, r7
 8101de2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101de6:	4770      	bx	lr

08101de8 <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_387CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_810CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8101de8:	b480      	push	{r7}
 8101dea:	b087      	sub	sp, #28
 8101dec:	af00      	add	r7, sp, #0
 8101dee:	60f8      	str	r0, [r7, #12]
 8101df0:	60b9      	str	r1, [r7, #8]
 8101df2:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8101df4:	68fb      	ldr	r3, [r7, #12]
 8101df6:	3314      	adds	r3, #20
 8101df8:	461a      	mov	r2, r3
 8101dfa:	68bb      	ldr	r3, [r7, #8]
 8101dfc:	0e5b      	lsrs	r3, r3, #25
 8101dfe:	009b      	lsls	r3, r3, #2
 8101e00:	f003 0304 	and.w	r3, r3, #4
 8101e04:	4413      	add	r3, r2
 8101e06:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8101e08:	697b      	ldr	r3, [r7, #20]
 8101e0a:	681a      	ldr	r2, [r3, #0]
 8101e0c:	68bb      	ldr	r3, [r7, #8]
 8101e0e:	0d1b      	lsrs	r3, r3, #20
 8101e10:	f003 031f 	and.w	r3, r3, #31
 8101e14:	2107      	movs	r1, #7
 8101e16:	fa01 f303 	lsl.w	r3, r1, r3
 8101e1a:	43db      	mvns	r3, r3
 8101e1c:	401a      	ands	r2, r3
 8101e1e:	68bb      	ldr	r3, [r7, #8]
 8101e20:	0d1b      	lsrs	r3, r3, #20
 8101e22:	f003 031f 	and.w	r3, r3, #31
 8101e26:	6879      	ldr	r1, [r7, #4]
 8101e28:	fa01 f303 	lsl.w	r3, r1, r3
 8101e2c:	431a      	orrs	r2, r3
 8101e2e:	697b      	ldr	r3, [r7, #20]
 8101e30:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8101e32:	bf00      	nop
 8101e34:	371c      	adds	r7, #28
 8101e36:	46bd      	mov	sp, r7
 8101e38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101e3c:	4770      	bx	lr
	...

08101e40 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8101e40:	b480      	push	{r7}
 8101e42:	b085      	sub	sp, #20
 8101e44:	af00      	add	r7, sp, #0
 8101e46:	60f8      	str	r0, [r7, #12]
 8101e48:	60b9      	str	r1, [r7, #8]
 8101e4a:	607a      	str	r2, [r7, #4]
  }
#else  /* ADC_VER_V5_V90 */
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8101e4c:	68fb      	ldr	r3, [r7, #12]
 8101e4e:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
 8101e52:	68bb      	ldr	r3, [r7, #8]
 8101e54:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8101e58:	43db      	mvns	r3, r3
 8101e5a:	401a      	ands	r2, r3
 8101e5c:	687b      	ldr	r3, [r7, #4]
 8101e5e:	f003 0318 	and.w	r3, r3, #24
 8101e62:	4908      	ldr	r1, [pc, #32]	; (8101e84 <LL_ADC_SetChannelSingleDiff+0x44>)
 8101e64:	40d9      	lsrs	r1, r3
 8101e66:	68bb      	ldr	r3, [r7, #8]
 8101e68:	400b      	ands	r3, r1
 8101e6a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8101e6e:	431a      	orrs	r2, r3
 8101e70:	68fb      	ldr	r3, [r7, #12]
 8101e72:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
#endif /* ADC_VER_V5_V90 */
}
 8101e76:	bf00      	nop
 8101e78:	3714      	adds	r7, #20
 8101e7a:	46bd      	mov	sp, r7
 8101e7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101e80:	4770      	bx	lr
 8101e82:	bf00      	nop
 8101e84:	000fffff 	.word	0x000fffff

08101e88 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8101e88:	b480      	push	{r7}
 8101e8a:	b083      	sub	sp, #12
 8101e8c:	af00      	add	r7, sp, #0
 8101e8e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8101e90:	687b      	ldr	r3, [r7, #4]
 8101e92:	689b      	ldr	r3, [r3, #8]
 8101e94:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 8101e98:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8101e9c:	687a      	ldr	r2, [r7, #4]
 8101e9e:	6093      	str	r3, [r2, #8]
}
 8101ea0:	bf00      	nop
 8101ea2:	370c      	adds	r7, #12
 8101ea4:	46bd      	mov	sp, r7
 8101ea6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101eaa:	4770      	bx	lr

08101eac <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8101eac:	b480      	push	{r7}
 8101eae:	b083      	sub	sp, #12
 8101eb0:	af00      	add	r7, sp, #0
 8101eb2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8101eb4:	687b      	ldr	r3, [r7, #4]
 8101eb6:	689b      	ldr	r3, [r3, #8]
 8101eb8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8101ebc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8101ec0:	d101      	bne.n	8101ec6 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8101ec2:	2301      	movs	r3, #1
 8101ec4:	e000      	b.n	8101ec8 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8101ec6:	2300      	movs	r3, #0
}
 8101ec8:	4618      	mov	r0, r3
 8101eca:	370c      	adds	r7, #12
 8101ecc:	46bd      	mov	sp, r7
 8101ece:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101ed2:	4770      	bx	lr

08101ed4 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8101ed4:	b480      	push	{r7}
 8101ed6:	b083      	sub	sp, #12
 8101ed8:	af00      	add	r7, sp, #0
 8101eda:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8101edc:	687b      	ldr	r3, [r7, #4]
 8101ede:	689b      	ldr	r3, [r3, #8]
 8101ee0:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 8101ee4:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8101ee8:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8101eec:	687b      	ldr	r3, [r7, #4]
 8101eee:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8101ef0:	bf00      	nop
 8101ef2:	370c      	adds	r7, #12
 8101ef4:	46bd      	mov	sp, r7
 8101ef6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101efa:	4770      	bx	lr

08101efc <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8101efc:	b480      	push	{r7}
 8101efe:	b083      	sub	sp, #12
 8101f00:	af00      	add	r7, sp, #0
 8101f02:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8101f04:	687b      	ldr	r3, [r7, #4]
 8101f06:	689b      	ldr	r3, [r3, #8]
 8101f08:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8101f0c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8101f10:	d101      	bne.n	8101f16 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8101f12:	2301      	movs	r3, #1
 8101f14:	e000      	b.n	8101f18 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8101f16:	2300      	movs	r3, #0
}
 8101f18:	4618      	mov	r0, r3
 8101f1a:	370c      	adds	r7, #12
 8101f1c:	46bd      	mov	sp, r7
 8101f1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101f22:	4770      	bx	lr

08101f24 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8101f24:	b480      	push	{r7}
 8101f26:	b083      	sub	sp, #12
 8101f28:	af00      	add	r7, sp, #0
 8101f2a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8101f2c:	687b      	ldr	r3, [r7, #4]
 8101f2e:	689b      	ldr	r3, [r3, #8]
 8101f30:	f003 0301 	and.w	r3, r3, #1
 8101f34:	2b01      	cmp	r3, #1
 8101f36:	d101      	bne.n	8101f3c <LL_ADC_IsEnabled+0x18>
 8101f38:	2301      	movs	r3, #1
 8101f3a:	e000      	b.n	8101f3e <LL_ADC_IsEnabled+0x1a>
 8101f3c:	2300      	movs	r3, #0
}
 8101f3e:	4618      	mov	r0, r3
 8101f40:	370c      	adds	r7, #12
 8101f42:	46bd      	mov	sp, r7
 8101f44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101f48:	4770      	bx	lr

08101f4a <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8101f4a:	b480      	push	{r7}
 8101f4c:	b083      	sub	sp, #12
 8101f4e:	af00      	add	r7, sp, #0
 8101f50:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8101f52:	687b      	ldr	r3, [r7, #4]
 8101f54:	689b      	ldr	r3, [r3, #8]
 8101f56:	f003 0304 	and.w	r3, r3, #4
 8101f5a:	2b04      	cmp	r3, #4
 8101f5c:	d101      	bne.n	8101f62 <LL_ADC_REG_IsConversionOngoing+0x18>
 8101f5e:	2301      	movs	r3, #1
 8101f60:	e000      	b.n	8101f64 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8101f62:	2300      	movs	r3, #0
}
 8101f64:	4618      	mov	r0, r3
 8101f66:	370c      	adds	r7, #12
 8101f68:	46bd      	mov	sp, r7
 8101f6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101f6e:	4770      	bx	lr

08101f70 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8101f70:	b480      	push	{r7}
 8101f72:	b083      	sub	sp, #12
 8101f74:	af00      	add	r7, sp, #0
 8101f76:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8101f78:	687b      	ldr	r3, [r7, #4]
 8101f7a:	689b      	ldr	r3, [r3, #8]
 8101f7c:	f003 0308 	and.w	r3, r3, #8
 8101f80:	2b08      	cmp	r3, #8
 8101f82:	d101      	bne.n	8101f88 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8101f84:	2301      	movs	r3, #1
 8101f86:	e000      	b.n	8101f8a <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8101f88:	2300      	movs	r3, #0
}
 8101f8a:	4618      	mov	r0, r3
 8101f8c:	370c      	adds	r7, #12
 8101f8e:	46bd      	mov	sp, r7
 8101f90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101f94:	4770      	bx	lr
	...

08101f98 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8101f98:	b590      	push	{r4, r7, lr}
 8101f9a:	b089      	sub	sp, #36	; 0x24
 8101f9c:	af00      	add	r7, sp, #0
 8101f9e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8101fa0:	2300      	movs	r3, #0
 8101fa2:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8101fa4:	2300      	movs	r3, #0
 8101fa6:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8101fa8:	687b      	ldr	r3, [r7, #4]
 8101faa:	2b00      	cmp	r3, #0
 8101fac:	d101      	bne.n	8101fb2 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8101fae:	2301      	movs	r3, #1
 8101fb0:	e18f      	b.n	81022d2 <HAL_ADC_Init+0x33a>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8101fb2:	687b      	ldr	r3, [r7, #4]
 8101fb4:	68db      	ldr	r3, [r3, #12]
 8101fb6:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8101fb8:	687b      	ldr	r3, [r7, #4]
 8101fba:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8101fbc:	2b00      	cmp	r3, #0
 8101fbe:	d109      	bne.n	8101fd4 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8101fc0:	6878      	ldr	r0, [r7, #4]
 8101fc2:	f7ff f91d 	bl	8101200 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8101fc6:	687b      	ldr	r3, [r7, #4]
 8101fc8:	2200      	movs	r2, #0
 8101fca:	659a      	str	r2, [r3, #88]	; 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8101fcc:	687b      	ldr	r3, [r7, #4]
 8101fce:	2200      	movs	r2, #0
 8101fd0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8101fd4:	687b      	ldr	r3, [r7, #4]
 8101fd6:	681b      	ldr	r3, [r3, #0]
 8101fd8:	4618      	mov	r0, r3
 8101fda:	f7ff ff67 	bl	8101eac <LL_ADC_IsDeepPowerDownEnabled>
 8101fde:	4603      	mov	r3, r0
 8101fe0:	2b00      	cmp	r3, #0
 8101fe2:	d004      	beq.n	8101fee <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8101fe4:	687b      	ldr	r3, [r7, #4]
 8101fe6:	681b      	ldr	r3, [r3, #0]
 8101fe8:	4618      	mov	r0, r3
 8101fea:	f7ff ff4d 	bl	8101e88 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8101fee:	687b      	ldr	r3, [r7, #4]
 8101ff0:	681b      	ldr	r3, [r3, #0]
 8101ff2:	4618      	mov	r0, r3
 8101ff4:	f7ff ff82 	bl	8101efc <LL_ADC_IsInternalRegulatorEnabled>
 8101ff8:	4603      	mov	r3, r0
 8101ffa:	2b00      	cmp	r3, #0
 8101ffc:	d114      	bne.n	8102028 <HAL_ADC_Init+0x90>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8101ffe:	687b      	ldr	r3, [r7, #4]
 8102000:	681b      	ldr	r3, [r3, #0]
 8102002:	4618      	mov	r0, r3
 8102004:	f7ff ff66 	bl	8101ed4 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8102008:	4b88      	ldr	r3, [pc, #544]	; (810222c <HAL_ADC_Init+0x294>)
 810200a:	681b      	ldr	r3, [r3, #0]
 810200c:	099b      	lsrs	r3, r3, #6
 810200e:	4a88      	ldr	r2, [pc, #544]	; (8102230 <HAL_ADC_Init+0x298>)
 8102010:	fba2 2303 	umull	r2, r3, r2, r3
 8102014:	099b      	lsrs	r3, r3, #6
 8102016:	3301      	adds	r3, #1
 8102018:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 810201a:	e002      	b.n	8102022 <HAL_ADC_Init+0x8a>
    {
      wait_loop_index--;
 810201c:	68bb      	ldr	r3, [r7, #8]
 810201e:	3b01      	subs	r3, #1
 8102020:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8102022:	68bb      	ldr	r3, [r7, #8]
 8102024:	2b00      	cmp	r3, #0
 8102026:	d1f9      	bne.n	810201c <HAL_ADC_Init+0x84>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8102028:	687b      	ldr	r3, [r7, #4]
 810202a:	681b      	ldr	r3, [r3, #0]
 810202c:	4618      	mov	r0, r3
 810202e:	f7ff ff65 	bl	8101efc <LL_ADC_IsInternalRegulatorEnabled>
 8102032:	4603      	mov	r3, r0
 8102034:	2b00      	cmp	r3, #0
 8102036:	d10d      	bne.n	8102054 <HAL_ADC_Init+0xbc>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8102038:	687b      	ldr	r3, [r7, #4]
 810203a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 810203c:	f043 0210 	orr.w	r2, r3, #16
 8102040:	687b      	ldr	r3, [r7, #4]
 8102042:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8102044:	687b      	ldr	r3, [r7, #4]
 8102046:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8102048:	f043 0201 	orr.w	r2, r3, #1
 810204c:	687b      	ldr	r3, [r7, #4]
 810204e:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8102050:	2301      	movs	r3, #1
 8102052:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8102054:	687b      	ldr	r3, [r7, #4]
 8102056:	681b      	ldr	r3, [r3, #0]
 8102058:	4618      	mov	r0, r3
 810205a:	f7ff ff76 	bl	8101f4a <LL_ADC_REG_IsConversionOngoing>
 810205e:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8102060:	687b      	ldr	r3, [r7, #4]
 8102062:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8102064:	f003 0310 	and.w	r3, r3, #16
 8102068:	2b00      	cmp	r3, #0
 810206a:	f040 8129 	bne.w	81022c0 <HAL_ADC_Init+0x328>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 810206e:	697b      	ldr	r3, [r7, #20]
 8102070:	2b00      	cmp	r3, #0
 8102072:	f040 8125 	bne.w	81022c0 <HAL_ADC_Init+0x328>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8102076:	687b      	ldr	r3, [r7, #4]
 8102078:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 810207a:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 810207e:	f043 0202 	orr.w	r2, r3, #2
 8102082:	687b      	ldr	r3, [r7, #4]
 8102084:	655a      	str	r2, [r3, #84]	; 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8102086:	687b      	ldr	r3, [r7, #4]
 8102088:	681b      	ldr	r3, [r3, #0]
 810208a:	4618      	mov	r0, r3
 810208c:	f7ff ff4a 	bl	8101f24 <LL_ADC_IsEnabled>
 8102090:	4603      	mov	r3, r0
 8102092:	2b00      	cmp	r3, #0
 8102094:	d136      	bne.n	8102104 <HAL_ADC_Init+0x16c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8102096:	687b      	ldr	r3, [r7, #4]
 8102098:	681b      	ldr	r3, [r3, #0]
 810209a:	4a66      	ldr	r2, [pc, #408]	; (8102234 <HAL_ADC_Init+0x29c>)
 810209c:	4293      	cmp	r3, r2
 810209e:	d004      	beq.n	81020aa <HAL_ADC_Init+0x112>
 81020a0:	687b      	ldr	r3, [r7, #4]
 81020a2:	681b      	ldr	r3, [r3, #0]
 81020a4:	4a64      	ldr	r2, [pc, #400]	; (8102238 <HAL_ADC_Init+0x2a0>)
 81020a6:	4293      	cmp	r3, r2
 81020a8:	d10e      	bne.n	81020c8 <HAL_ADC_Init+0x130>
 81020aa:	4862      	ldr	r0, [pc, #392]	; (8102234 <HAL_ADC_Init+0x29c>)
 81020ac:	f7ff ff3a 	bl	8101f24 <LL_ADC_IsEnabled>
 81020b0:	4604      	mov	r4, r0
 81020b2:	4861      	ldr	r0, [pc, #388]	; (8102238 <HAL_ADC_Init+0x2a0>)
 81020b4:	f7ff ff36 	bl	8101f24 <LL_ADC_IsEnabled>
 81020b8:	4603      	mov	r3, r0
 81020ba:	4323      	orrs	r3, r4
 81020bc:	2b00      	cmp	r3, #0
 81020be:	bf0c      	ite	eq
 81020c0:	2301      	moveq	r3, #1
 81020c2:	2300      	movne	r3, #0
 81020c4:	b2db      	uxtb	r3, r3
 81020c6:	e008      	b.n	81020da <HAL_ADC_Init+0x142>
 81020c8:	485c      	ldr	r0, [pc, #368]	; (810223c <HAL_ADC_Init+0x2a4>)
 81020ca:	f7ff ff2b 	bl	8101f24 <LL_ADC_IsEnabled>
 81020ce:	4603      	mov	r3, r0
 81020d0:	2b00      	cmp	r3, #0
 81020d2:	bf0c      	ite	eq
 81020d4:	2301      	moveq	r3, #1
 81020d6:	2300      	movne	r3, #0
 81020d8:	b2db      	uxtb	r3, r3
 81020da:	2b00      	cmp	r3, #0
 81020dc:	d012      	beq.n	8102104 <HAL_ADC_Init+0x16c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 81020de:	687b      	ldr	r3, [r7, #4]
 81020e0:	681b      	ldr	r3, [r3, #0]
 81020e2:	4a54      	ldr	r2, [pc, #336]	; (8102234 <HAL_ADC_Init+0x29c>)
 81020e4:	4293      	cmp	r3, r2
 81020e6:	d004      	beq.n	81020f2 <HAL_ADC_Init+0x15a>
 81020e8:	687b      	ldr	r3, [r7, #4]
 81020ea:	681b      	ldr	r3, [r3, #0]
 81020ec:	4a52      	ldr	r2, [pc, #328]	; (8102238 <HAL_ADC_Init+0x2a0>)
 81020ee:	4293      	cmp	r3, r2
 81020f0:	d101      	bne.n	81020f6 <HAL_ADC_Init+0x15e>
 81020f2:	4a53      	ldr	r2, [pc, #332]	; (8102240 <HAL_ADC_Init+0x2a8>)
 81020f4:	e000      	b.n	81020f8 <HAL_ADC_Init+0x160>
 81020f6:	4a53      	ldr	r2, [pc, #332]	; (8102244 <HAL_ADC_Init+0x2ac>)
 81020f8:	687b      	ldr	r3, [r7, #4]
 81020fa:	685b      	ldr	r3, [r3, #4]
 81020fc:	4619      	mov	r1, r3
 81020fe:	4610      	mov	r0, r2
 8102100:	f7ff fdbe 	bl	8101c80 <LL_ADC_SetCommonClock>
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
    }

#else

    if ((HAL_GetREVID() > REV_ID_Y) && (ADC_RESOLUTION_8B == hadc->Init.Resolution))
 8102104:	f7ff fd9a 	bl	8101c3c <HAL_GetREVID>
 8102108:	4603      	mov	r3, r0
 810210a:	f241 0203 	movw	r2, #4099	; 0x1003
 810210e:	4293      	cmp	r3, r2
 8102110:	d914      	bls.n	810213c <HAL_ADC_Init+0x1a4>
 8102112:	687b      	ldr	r3, [r7, #4]
 8102114:	689b      	ldr	r3, [r3, #8]
 8102116:	2b10      	cmp	r3, #16
 8102118:	d110      	bne.n	810213c <HAL_ADC_Init+0x1a4>
    {
      /* for STM32H7 silicon rev.B and above , ADC_CFGR_RES value for 8bits resolution is : b111 */
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 810211a:	687b      	ldr	r3, [r7, #4]
 810211c:	7d5b      	ldrb	r3, [r3, #21]
 810211e:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 8102120:	687b      	ldr	r3, [r7, #4]
 8102122:	6b1b      	ldr	r3, [r3, #48]	; 0x30
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8102124:	431a      	orrs	r2, r3
                  hadc->Init.Resolution | (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)                |
 8102126:	687b      	ldr	r3, [r7, #4]
 8102128:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 810212a:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 810212c:	687b      	ldr	r3, [r7, #4]
 810212e:	7f1b      	ldrb	r3, [r3, #28]
 8102130:	041b      	lsls	r3, r3, #16
                  hadc->Init.Resolution | (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)                |
 8102132:	4313      	orrs	r3, r2
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8102134:	f043 030c 	orr.w	r3, r3, #12
 8102138:	61bb      	str	r3, [r7, #24]
 810213a:	e00d      	b.n	8102158 <HAL_ADC_Init+0x1c0>
    }
    else
    {

      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 810213c:	687b      	ldr	r3, [r7, #4]
 810213e:	7d5b      	ldrb	r3, [r3, #21]
 8102140:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 8102142:	687b      	ldr	r3, [r7, #4]
 8102144:	6b1b      	ldr	r3, [r3, #48]	; 0x30
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8102146:	431a      	orrs	r2, r3
                  hadc->Init.Resolution                                                 |
 8102148:	687b      	ldr	r3, [r7, #4]
 810214a:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 810214c:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 810214e:	687b      	ldr	r3, [r7, #4]
 8102150:	7f1b      	ldrb	r3, [r3, #28]
 8102152:	041b      	lsls	r3, r3, #16
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8102154:	4313      	orrs	r3, r2
 8102156:	61bb      	str	r3, [r7, #24]
    }

#endif /* ADC_VER_V5_3 */

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8102158:	687b      	ldr	r3, [r7, #4]
 810215a:	7f1b      	ldrb	r3, [r3, #28]
 810215c:	2b01      	cmp	r3, #1
 810215e:	d106      	bne.n	810216e <HAL_ADC_Init+0x1d6>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8102160:	687b      	ldr	r3, [r7, #4]
 8102162:	6a1b      	ldr	r3, [r3, #32]
 8102164:	3b01      	subs	r3, #1
 8102166:	045b      	lsls	r3, r3, #17
 8102168:	69ba      	ldr	r2, [r7, #24]
 810216a:	4313      	orrs	r3, r2
 810216c:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 810216e:	687b      	ldr	r3, [r7, #4]
 8102170:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8102172:	2b00      	cmp	r3, #0
 8102174:	d009      	beq.n	810218a <HAL_ADC_Init+0x1f2>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8102176:	687b      	ldr	r3, [r7, #4]
 8102178:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 810217a:	f403 7278 	and.w	r2, r3, #992	; 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 810217e:	687b      	ldr	r3, [r7, #4]
 8102180:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8102182:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8102184:	69ba      	ldr	r2, [r7, #24]
 8102186:	4313      	orrs	r3, r2
 8102188:	61bb      	str	r3, [r7, #24]
      /* Update Configuration Register CFGR */
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
    }
#else
    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 810218a:	687b      	ldr	r3, [r7, #4]
 810218c:	681b      	ldr	r3, [r3, #0]
 810218e:	68da      	ldr	r2, [r3, #12]
 8102190:	4b2d      	ldr	r3, [pc, #180]	; (8102248 <HAL_ADC_Init+0x2b0>)
 8102192:	4013      	ands	r3, r2
 8102194:	687a      	ldr	r2, [r7, #4]
 8102196:	6812      	ldr	r2, [r2, #0]
 8102198:	69b9      	ldr	r1, [r7, #24]
 810219a:	430b      	orrs	r3, r1
 810219c:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - Conversion data management      Init.ConversionDataManagement       */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 810219e:	687b      	ldr	r3, [r7, #4]
 81021a0:	681b      	ldr	r3, [r3, #0]
 81021a2:	4618      	mov	r0, r3
 81021a4:	f7ff fed1 	bl	8101f4a <LL_ADC_REG_IsConversionOngoing>
 81021a8:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 81021aa:	687b      	ldr	r3, [r7, #4]
 81021ac:	681b      	ldr	r3, [r3, #0]
 81021ae:	4618      	mov	r0, r3
 81021b0:	f7ff fede 	bl	8101f70 <LL_ADC_INJ_IsConversionOngoing>
 81021b4:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 81021b6:	693b      	ldr	r3, [r7, #16]
 81021b8:	2b00      	cmp	r3, #0
 81021ba:	d15f      	bne.n	810227c <HAL_ADC_Init+0x2e4>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 81021bc:	68fb      	ldr	r3, [r7, #12]
 81021be:	2b00      	cmp	r3, #0
 81021c0:	d15c      	bne.n	810227c <HAL_ADC_Init+0x2e4>
                    ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
                    ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
      }
#else
      tmpCFGR = (
                  ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 81021c2:	687b      	ldr	r3, [r7, #4]
 81021c4:	7d1b      	ldrb	r3, [r3, #20]
 81021c6:	039a      	lsls	r2, r3, #14
                  ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
 81021c8:	687b      	ldr	r3, [r7, #4]
 81021ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
      tmpCFGR = (
 81021cc:	4313      	orrs	r3, r2
 81021ce:	61bb      	str	r3, [r7, #24]
#endif

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 81021d0:	687b      	ldr	r3, [r7, #4]
 81021d2:	681b      	ldr	r3, [r3, #0]
 81021d4:	68db      	ldr	r3, [r3, #12]
 81021d6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 81021da:	f023 0303 	bic.w	r3, r3, #3
 81021de:	687a      	ldr	r2, [r7, #4]
 81021e0:	6812      	ldr	r2, [r2, #0]
 81021e2:	69b9      	ldr	r1, [r7, #24]
 81021e4:	430b      	orrs	r3, r1
 81021e6:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 81021e8:	687b      	ldr	r3, [r7, #4]
 81021ea:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 81021ee:	2b01      	cmp	r3, #1
 81021f0:	d12e      	bne.n	8102250 <HAL_ADC_Init+0x2b8>
#endif
        assert_param(IS_ADC_RIGHT_BIT_SHIFT(hadc->Init.Oversampling.RightBitShift));
        assert_param(IS_ADC_TRIGGERED_OVERSAMPLING_MODE(hadc->Init.Oversampling.TriggeredMode));
        assert_param(IS_ADC_REGOVERSAMPLING_MODE(hadc->Init.Oversampling.OversamplingStopReset));

        if ((hadc->Init.ExternalTrigConv == ADC_SOFTWARE_START)
 81021f2:	687b      	ldr	r3, [r7, #4]
 81021f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 81021f6:	2b00      	cmp	r3, #0
        /*  - Oversampling Ratio                                               */
        /*  - Right bit shift                                                  */
        /*  - Left bit shift                                                   */
        /*  - Triggered mode                                                   */
        /*  - Oversampling mode (continued/resumed)                            */
        MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_FIELDS,
 81021f8:	687b      	ldr	r3, [r7, #4]
 81021fa:	681b      	ldr	r3, [r3, #0]
 81021fc:	691a      	ldr	r2, [r3, #16]
 81021fe:	4b13      	ldr	r3, [pc, #76]	; (810224c <HAL_ADC_Init+0x2b4>)
 8102200:	4013      	ands	r3, r2
 8102202:	687a      	ldr	r2, [r7, #4]
 8102204:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8102206:	3a01      	subs	r2, #1
 8102208:	0411      	lsls	r1, r2, #16
 810220a:	687a      	ldr	r2, [r7, #4]
 810220c:	6c12      	ldr	r2, [r2, #64]	; 0x40
 810220e:	4311      	orrs	r1, r2
 8102210:	687a      	ldr	r2, [r7, #4]
 8102212:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8102214:	4311      	orrs	r1, r2
 8102216:	687a      	ldr	r2, [r7, #4]
 8102218:	6c92      	ldr	r2, [r2, #72]	; 0x48
 810221a:	430a      	orrs	r2, r1
 810221c:	431a      	orrs	r2, r3
 810221e:	687b      	ldr	r3, [r7, #4]
 8102220:	681b      	ldr	r3, [r3, #0]
 8102222:	f042 0201 	orr.w	r2, r2, #1
 8102226:	611a      	str	r2, [r3, #16]
 8102228:	e01a      	b.n	8102260 <HAL_ADC_Init+0x2c8>
 810222a:	bf00      	nop
 810222c:	10000000 	.word	0x10000000
 8102230:	053e2d63 	.word	0x053e2d63
 8102234:	40022000 	.word	0x40022000
 8102238:	40022100 	.word	0x40022100
 810223c:	58026000 	.word	0x58026000
 8102240:	40022300 	.word	0x40022300
 8102244:	58026300 	.word	0x58026300
 8102248:	fff0c003 	.word	0xfff0c003
 810224c:	fc00f81e 	.word	0xfc00f81e

      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8102250:	687b      	ldr	r3, [r7, #4]
 8102252:	681b      	ldr	r3, [r3, #0]
 8102254:	691a      	ldr	r2, [r3, #16]
 8102256:	687b      	ldr	r3, [r7, #4]
 8102258:	681b      	ldr	r3, [r3, #0]
 810225a:	f022 0201 	bic.w	r2, r2, #1
 810225e:	611a      	str	r2, [r3, #16]
      }

      /* Set the LeftShift parameter: it is applied to the final result with or without oversampling */
      MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_LSHIFT, hadc->Init.LeftBitShift);
 8102260:	687b      	ldr	r3, [r7, #4]
 8102262:	681b      	ldr	r3, [r3, #0]
 8102264:	691b      	ldr	r3, [r3, #16]
 8102266:	f023 4170 	bic.w	r1, r3, #4026531840	; 0xf0000000
 810226a:	687b      	ldr	r3, [r7, #4]
 810226c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 810226e:	687b      	ldr	r3, [r7, #4]
 8102270:	681b      	ldr	r3, [r3, #0]
 8102272:	430a      	orrs	r2, r1
 8102274:	611a      	str	r2, [r3, #16]
        /* Configure the BOOST Mode */
        ADC_ConfigureBoostMode(hadc);
      }
#else
      /* Configure the BOOST Mode */
      ADC_ConfigureBoostMode(hadc);
 8102276:	6878      	ldr	r0, [r7, #4]
 8102278:	f000 fb80 	bl	810297c <ADC_ConfigureBoostMode>
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 810227c:	687b      	ldr	r3, [r7, #4]
 810227e:	68db      	ldr	r3, [r3, #12]
 8102280:	2b01      	cmp	r3, #1
 8102282:	d10c      	bne.n	810229e <HAL_ADC_Init+0x306>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8102284:	687b      	ldr	r3, [r7, #4]
 8102286:	681b      	ldr	r3, [r3, #0]
 8102288:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 810228a:	f023 010f 	bic.w	r1, r3, #15
 810228e:	687b      	ldr	r3, [r7, #4]
 8102290:	699b      	ldr	r3, [r3, #24]
 8102292:	1e5a      	subs	r2, r3, #1
 8102294:	687b      	ldr	r3, [r7, #4]
 8102296:	681b      	ldr	r3, [r3, #0]
 8102298:	430a      	orrs	r2, r1
 810229a:	631a      	str	r2, [r3, #48]	; 0x30
 810229c:	e007      	b.n	81022ae <HAL_ADC_Init+0x316>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 810229e:	687b      	ldr	r3, [r7, #4]
 81022a0:	681b      	ldr	r3, [r3, #0]
 81022a2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 81022a4:	687b      	ldr	r3, [r7, #4]
 81022a6:	681b      	ldr	r3, [r3, #0]
 81022a8:	f022 020f 	bic.w	r2, r2, #15
 81022ac:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 81022ae:	687b      	ldr	r3, [r7, #4]
 81022b0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 81022b2:	f023 0303 	bic.w	r3, r3, #3
 81022b6:	f043 0201 	orr.w	r2, r3, #1
 81022ba:	687b      	ldr	r3, [r7, #4]
 81022bc:	655a      	str	r2, [r3, #84]	; 0x54
 81022be:	e007      	b.n	81022d0 <HAL_ADC_Init+0x338>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 81022c0:	687b      	ldr	r3, [r7, #4]
 81022c2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 81022c4:	f043 0210 	orr.w	r2, r3, #16
 81022c8:	687b      	ldr	r3, [r7, #4]
 81022ca:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 81022cc:	2301      	movs	r3, #1
 81022ce:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 81022d0:	7ffb      	ldrb	r3, [r7, #31]
}
 81022d2:	4618      	mov	r0, r3
 81022d4:	3724      	adds	r7, #36	; 0x24
 81022d6:	46bd      	mov	sp, r7
 81022d8:	bd90      	pop	{r4, r7, pc}
 81022da:	bf00      	nop

081022dc <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 81022dc:	b590      	push	{r4, r7, lr}
 81022de:	b0a1      	sub	sp, #132	; 0x84
 81022e0:	af00      	add	r7, sp, #0
 81022e2:	6078      	str	r0, [r7, #4]
 81022e4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 81022e6:	2300      	movs	r3, #0
 81022e8:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 81022ec:	2300      	movs	r3, #0
 81022ee:	60bb      	str	r3, [r7, #8]
  /* if ROVSE is set, the value of the OFFSETy_EN bit in ADCx_OFRy register is
     ignored (considered as reset) */
  assert_param(!((sConfig->OffsetNumber != ADC_OFFSET_NONE) && (hadc->Init.OversamplingMode == ENABLE)));

  /* Verification of channel number */
  if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 81022f0:	683b      	ldr	r3, [r7, #0]
 81022f2:	68db      	ldr	r3, [r3, #12]
 81022f4:	4a9d      	ldr	r2, [pc, #628]	; (810256c <HAL_ADC_ConfigChannel+0x290>)
 81022f6:	4293      	cmp	r3, r2
    }
#endif
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 81022f8:	687b      	ldr	r3, [r7, #4]
 81022fa:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 81022fe:	2b01      	cmp	r3, #1
 8102300:	d101      	bne.n	8102306 <HAL_ADC_ConfigChannel+0x2a>
 8102302:	2302      	movs	r3, #2
 8102304:	e321      	b.n	810294a <HAL_ADC_ConfigChannel+0x66e>
 8102306:	687b      	ldr	r3, [r7, #4]
 8102308:	2201      	movs	r2, #1
 810230a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 810230e:	687b      	ldr	r3, [r7, #4]
 8102310:	681b      	ldr	r3, [r3, #0]
 8102312:	4618      	mov	r0, r3
 8102314:	f7ff fe19 	bl	8101f4a <LL_ADC_REG_IsConversionOngoing>
 8102318:	4603      	mov	r3, r0
 810231a:	2b00      	cmp	r3, #0
 810231c:	f040 8306 	bne.w	810292c <HAL_ADC_ConfigChannel+0x650>
      /* ADC channels preselection */
      hadc->Instance->PCSEL_RES0 |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
    }
#else
    /* ADC channels preselection */
    hadc->Instance->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
 8102320:	683b      	ldr	r3, [r7, #0]
 8102322:	681b      	ldr	r3, [r3, #0]
 8102324:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8102328:	2b00      	cmp	r3, #0
 810232a:	d108      	bne.n	810233e <HAL_ADC_ConfigChannel+0x62>
 810232c:	683b      	ldr	r3, [r7, #0]
 810232e:	681b      	ldr	r3, [r3, #0]
 8102330:	0e9b      	lsrs	r3, r3, #26
 8102332:	f003 031f 	and.w	r3, r3, #31
 8102336:	2201      	movs	r2, #1
 8102338:	fa02 f303 	lsl.w	r3, r2, r3
 810233c:	e016      	b.n	810236c <HAL_ADC_ConfigChannel+0x90>
 810233e:	683b      	ldr	r3, [r7, #0]
 8102340:	681b      	ldr	r3, [r3, #0]
 8102342:	667b      	str	r3, [r7, #100]	; 0x64
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8102344:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8102346:	fa93 f3a3 	rbit	r3, r3
 810234a:	663b      	str	r3, [r7, #96]	; 0x60
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 810234c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 810234e:	66bb      	str	r3, [r7, #104]	; 0x68
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8102350:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8102352:	2b00      	cmp	r3, #0
 8102354:	d101      	bne.n	810235a <HAL_ADC_ConfigChannel+0x7e>
  {
    return 32U;
 8102356:	2320      	movs	r3, #32
 8102358:	e003      	b.n	8102362 <HAL_ADC_ConfigChannel+0x86>
  }
  return __builtin_clz(value);
 810235a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 810235c:	fab3 f383 	clz	r3, r3
 8102360:	b2db      	uxtb	r3, r3
 8102362:	f003 031f 	and.w	r3, r3, #31
 8102366:	2201      	movs	r2, #1
 8102368:	fa02 f303 	lsl.w	r3, r2, r3
 810236c:	687a      	ldr	r2, [r7, #4]
 810236e:	6812      	ldr	r2, [r2, #0]
 8102370:	69d1      	ldr	r1, [r2, #28]
 8102372:	687a      	ldr	r2, [r7, #4]
 8102374:	6812      	ldr	r2, [r2, #0]
 8102376:	430b      	orrs	r3, r1
 8102378:	61d3      	str	r3, [r2, #28]
#endif /* ADC_VER_V5_V90 */

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 810237a:	687b      	ldr	r3, [r7, #4]
 810237c:	6818      	ldr	r0, [r3, #0]
 810237e:	683b      	ldr	r3, [r7, #0]
 8102380:	6859      	ldr	r1, [r3, #4]
 8102382:	683b      	ldr	r3, [r7, #0]
 8102384:	681b      	ldr	r3, [r3, #0]
 8102386:	461a      	mov	r2, r3
 8102388:	f7ff fd02 	bl	8101d90 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 810238c:	687b      	ldr	r3, [r7, #4]
 810238e:	681b      	ldr	r3, [r3, #0]
 8102390:	4618      	mov	r0, r3
 8102392:	f7ff fdda 	bl	8101f4a <LL_ADC_REG_IsConversionOngoing>
 8102396:	67b8      	str	r0, [r7, #120]	; 0x78
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8102398:	687b      	ldr	r3, [r7, #4]
 810239a:	681b      	ldr	r3, [r3, #0]
 810239c:	4618      	mov	r0, r3
 810239e:	f7ff fde7 	bl	8101f70 <LL_ADC_INJ_IsConversionOngoing>
 81023a2:	6778      	str	r0, [r7, #116]	; 0x74
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 81023a4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 81023a6:	2b00      	cmp	r3, #0
 81023a8:	f040 80b3 	bne.w	8102512 <HAL_ADC_ConfigChannel+0x236>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 81023ac:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 81023ae:	2b00      	cmp	r3, #0
 81023b0:	f040 80af 	bne.w	8102512 <HAL_ADC_ConfigChannel+0x236>
       )
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 81023b4:	687b      	ldr	r3, [r7, #4]
 81023b6:	6818      	ldr	r0, [r3, #0]
 81023b8:	683b      	ldr	r3, [r7, #0]
 81023ba:	6819      	ldr	r1, [r3, #0]
 81023bc:	683b      	ldr	r3, [r7, #0]
 81023be:	689b      	ldr	r3, [r3, #8]
 81023c0:	461a      	mov	r2, r3
 81023c2:	f7ff fd11 	bl	8101de8 <LL_ADC_SetChannelSamplingTime>
        tmpOffsetShifted = ADC3_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
      }
      else
#endif /* ADC_VER_V5_V90 */
      {
        tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 81023c6:	4b6a      	ldr	r3, [pc, #424]	; (8102570 <HAL_ADC_ConfigChannel+0x294>)
 81023c8:	681b      	ldr	r3, [r3, #0]
 81023ca:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 81023ce:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 81023d2:	d10b      	bne.n	81023ec <HAL_ADC_ConfigChannel+0x110>
 81023d4:	683b      	ldr	r3, [r7, #0]
 81023d6:	695a      	ldr	r2, [r3, #20]
 81023d8:	687b      	ldr	r3, [r7, #4]
 81023da:	681b      	ldr	r3, [r3, #0]
 81023dc:	68db      	ldr	r3, [r3, #12]
 81023de:	089b      	lsrs	r3, r3, #2
 81023e0:	f003 0307 	and.w	r3, r3, #7
 81023e4:	005b      	lsls	r3, r3, #1
 81023e6:	fa02 f303 	lsl.w	r3, r2, r3
 81023ea:	e01d      	b.n	8102428 <HAL_ADC_ConfigChannel+0x14c>
 81023ec:	687b      	ldr	r3, [r7, #4]
 81023ee:	681b      	ldr	r3, [r3, #0]
 81023f0:	68db      	ldr	r3, [r3, #12]
 81023f2:	f003 0310 	and.w	r3, r3, #16
 81023f6:	2b00      	cmp	r3, #0
 81023f8:	d10b      	bne.n	8102412 <HAL_ADC_ConfigChannel+0x136>
 81023fa:	683b      	ldr	r3, [r7, #0]
 81023fc:	695a      	ldr	r2, [r3, #20]
 81023fe:	687b      	ldr	r3, [r7, #4]
 8102400:	681b      	ldr	r3, [r3, #0]
 8102402:	68db      	ldr	r3, [r3, #12]
 8102404:	089b      	lsrs	r3, r3, #2
 8102406:	f003 0307 	and.w	r3, r3, #7
 810240a:	005b      	lsls	r3, r3, #1
 810240c:	fa02 f303 	lsl.w	r3, r2, r3
 8102410:	e00a      	b.n	8102428 <HAL_ADC_ConfigChannel+0x14c>
 8102412:	683b      	ldr	r3, [r7, #0]
 8102414:	695a      	ldr	r2, [r3, #20]
 8102416:	687b      	ldr	r3, [r7, #4]
 8102418:	681b      	ldr	r3, [r3, #0]
 810241a:	68db      	ldr	r3, [r3, #12]
 810241c:	089b      	lsrs	r3, r3, #2
 810241e:	f003 0304 	and.w	r3, r3, #4
 8102422:	005b      	lsls	r3, r3, #1
 8102424:	fa02 f303 	lsl.w	r3, r2, r3
 8102428:	673b      	str	r3, [r7, #112]	; 0x70
      }
      
      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 810242a:	683b      	ldr	r3, [r7, #0]
 810242c:	691b      	ldr	r3, [r3, #16]
 810242e:	2b04      	cmp	r3, #4
 8102430:	d027      	beq.n	8102482 <HAL_ADC_ConfigChannel+0x1a6>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 8102432:	687b      	ldr	r3, [r7, #4]
 8102434:	6818      	ldr	r0, [r3, #0]
 8102436:	683b      	ldr	r3, [r7, #0]
 8102438:	6919      	ldr	r1, [r3, #16]
 810243a:	683b      	ldr	r3, [r7, #0]
 810243c:	681a      	ldr	r2, [r3, #0]
 810243e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8102440:	f7ff fc52 	bl	8101ce8 <LL_ADC_SetOffset>
        else
#endif /* ADC_VER_V5_V90 */
        {
          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSignedSaturation));
          /* Set ADC selected offset signed saturation */
          LL_ADC_SetOffsetSignedSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSignedSaturation == ENABLE) ? LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE : LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE);
 8102444:	687b      	ldr	r3, [r7, #4]
 8102446:	6818      	ldr	r0, [r3, #0]
 8102448:	683b      	ldr	r3, [r7, #0]
 810244a:	6919      	ldr	r1, [r3, #16]
 810244c:	683b      	ldr	r3, [r7, #0]
 810244e:	7e5b      	ldrb	r3, [r3, #25]
 8102450:	2b01      	cmp	r3, #1
 8102452:	d102      	bne.n	810245a <HAL_ADC_ConfigChannel+0x17e>
 8102454:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8102458:	e000      	b.n	810245c <HAL_ADC_ConfigChannel+0x180>
 810245a:	2300      	movs	r3, #0
 810245c:	461a      	mov	r2, r3
 810245e:	f7ff fc7c 	bl	8101d5a <LL_ADC_SetOffsetSignedSaturation>

          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetRightShift));
          /* Set ADC selected offset right shift */
          LL_ADC_SetDataRightShift(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetRightShift == ENABLE) ? LL_ADC_OFFSET_RSHIFT_ENABLE : LL_ADC_OFFSET_RSHIFT_DISABLE);
 8102462:	687b      	ldr	r3, [r7, #4]
 8102464:	6818      	ldr	r0, [r3, #0]
 8102466:	683b      	ldr	r3, [r7, #0]
 8102468:	6919      	ldr	r1, [r3, #16]
 810246a:	683b      	ldr	r3, [r7, #0]
 810246c:	7e1b      	ldrb	r3, [r3, #24]
 810246e:	2b01      	cmp	r3, #1
 8102470:	d102      	bne.n	8102478 <HAL_ADC_ConfigChannel+0x19c>
 8102472:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8102476:	e000      	b.n	810247a <HAL_ADC_ConfigChannel+0x19e>
 8102478:	2300      	movs	r3, #0
 810247a:	461a      	mov	r2, r3
 810247c:	f7ff fc54 	bl	8101d28 <LL_ADC_SetDataRightShift>
 8102480:	e047      	b.n	8102512 <HAL_ADC_ConfigChannel+0x236>
          }
        }
        else
#endif /* ADC_VER_V5_V90 */
        {
          if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8102482:	687b      	ldr	r3, [r7, #4]
 8102484:	681b      	ldr	r3, [r3, #0]
 8102486:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8102488:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 810248c:	683b      	ldr	r3, [r7, #0]
 810248e:	681b      	ldr	r3, [r3, #0]
 8102490:	069b      	lsls	r3, r3, #26
 8102492:	429a      	cmp	r2, r3
 8102494:	d107      	bne.n	81024a6 <HAL_ADC_ConfigChannel+0x1ca>
          {
            CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_SSATE);
 8102496:	687b      	ldr	r3, [r7, #4]
 8102498:	681b      	ldr	r3, [r3, #0]
 810249a:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 810249c:	687b      	ldr	r3, [r7, #4]
 810249e:	681b      	ldr	r3, [r3, #0]
 81024a0:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 81024a4:	661a      	str	r2, [r3, #96]	; 0x60
          }
          if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 81024a6:	687b      	ldr	r3, [r7, #4]
 81024a8:	681b      	ldr	r3, [r3, #0]
 81024aa:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 81024ac:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 81024b0:	683b      	ldr	r3, [r7, #0]
 81024b2:	681b      	ldr	r3, [r3, #0]
 81024b4:	069b      	lsls	r3, r3, #26
 81024b6:	429a      	cmp	r2, r3
 81024b8:	d107      	bne.n	81024ca <HAL_ADC_ConfigChannel+0x1ee>
          {
            CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_SSATE);
 81024ba:	687b      	ldr	r3, [r7, #4]
 81024bc:	681b      	ldr	r3, [r3, #0]
 81024be:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 81024c0:	687b      	ldr	r3, [r7, #4]
 81024c2:	681b      	ldr	r3, [r3, #0]
 81024c4:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 81024c8:	665a      	str	r2, [r3, #100]	; 0x64
          }
          if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 81024ca:	687b      	ldr	r3, [r7, #4]
 81024cc:	681b      	ldr	r3, [r3, #0]
 81024ce:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 81024d0:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 81024d4:	683b      	ldr	r3, [r7, #0]
 81024d6:	681b      	ldr	r3, [r3, #0]
 81024d8:	069b      	lsls	r3, r3, #26
 81024da:	429a      	cmp	r2, r3
 81024dc:	d107      	bne.n	81024ee <HAL_ADC_ConfigChannel+0x212>
          {
            CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_SSATE);
 81024de:	687b      	ldr	r3, [r7, #4]
 81024e0:	681b      	ldr	r3, [r3, #0]
 81024e2:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 81024e4:	687b      	ldr	r3, [r7, #4]
 81024e6:	681b      	ldr	r3, [r3, #0]
 81024e8:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 81024ec:	669a      	str	r2, [r3, #104]	; 0x68
          }
          if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 81024ee:	687b      	ldr	r3, [r7, #4]
 81024f0:	681b      	ldr	r3, [r3, #0]
 81024f2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 81024f4:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 81024f8:	683b      	ldr	r3, [r7, #0]
 81024fa:	681b      	ldr	r3, [r3, #0]
 81024fc:	069b      	lsls	r3, r3, #26
 81024fe:	429a      	cmp	r2, r3
 8102500:	d107      	bne.n	8102512 <HAL_ADC_ConfigChannel+0x236>
          {
            CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_SSATE);
 8102502:	687b      	ldr	r3, [r7, #4]
 8102504:	681b      	ldr	r3, [r3, #0]
 8102506:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8102508:	687b      	ldr	r3, [r7, #4]
 810250a:	681b      	ldr	r3, [r3, #0]
 810250c:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8102510:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8102512:	687b      	ldr	r3, [r7, #4]
 8102514:	681b      	ldr	r3, [r3, #0]
 8102516:	4618      	mov	r0, r3
 8102518:	f7ff fd04 	bl	8101f24 <LL_ADC_IsEnabled>
 810251c:	4603      	mov	r3, r0
 810251e:	2b00      	cmp	r3, #0
 8102520:	f040 820d 	bne.w	810293e <HAL_ADC_ConfigChannel+0x662>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8102524:	687b      	ldr	r3, [r7, #4]
 8102526:	6818      	ldr	r0, [r3, #0]
 8102528:	683b      	ldr	r3, [r7, #0]
 810252a:	6819      	ldr	r1, [r3, #0]
 810252c:	683b      	ldr	r3, [r7, #0]
 810252e:	68db      	ldr	r3, [r3, #12]
 8102530:	461a      	mov	r2, r3
 8102532:	f7ff fc85 	bl	8101e40 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8102536:	683b      	ldr	r3, [r7, #0]
 8102538:	68db      	ldr	r3, [r3, #12]
 810253a:	4a0c      	ldr	r2, [pc, #48]	; (810256c <HAL_ADC_ConfigChannel+0x290>)
 810253c:	4293      	cmp	r3, r2
 810253e:	f040 8133 	bne.w	81027a8 <HAL_ADC_ConfigChannel+0x4cc>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8102542:	687b      	ldr	r3, [r7, #4]
 8102544:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8102546:	683b      	ldr	r3, [r7, #0]
 8102548:	681b      	ldr	r3, [r3, #0]
 810254a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 810254e:	2b00      	cmp	r3, #0
 8102550:	d110      	bne.n	8102574 <HAL_ADC_ConfigChannel+0x298>
 8102552:	683b      	ldr	r3, [r7, #0]
 8102554:	681b      	ldr	r3, [r3, #0]
 8102556:	0e9b      	lsrs	r3, r3, #26
 8102558:	3301      	adds	r3, #1
 810255a:	f003 031f 	and.w	r3, r3, #31
 810255e:	2b09      	cmp	r3, #9
 8102560:	bf94      	ite	ls
 8102562:	2301      	movls	r3, #1
 8102564:	2300      	movhi	r3, #0
 8102566:	b2db      	uxtb	r3, r3
 8102568:	e01e      	b.n	81025a8 <HAL_ADC_ConfigChannel+0x2cc>
 810256a:	bf00      	nop
 810256c:	47ff0000 	.word	0x47ff0000
 8102570:	5c001000 	.word	0x5c001000
 8102574:	683b      	ldr	r3, [r7, #0]
 8102576:	681b      	ldr	r3, [r3, #0]
 8102578:	65bb      	str	r3, [r7, #88]	; 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 810257a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 810257c:	fa93 f3a3 	rbit	r3, r3
 8102580:	657b      	str	r3, [r7, #84]	; 0x54
  return result;
 8102582:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8102584:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (value == 0U)
 8102586:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8102588:	2b00      	cmp	r3, #0
 810258a:	d101      	bne.n	8102590 <HAL_ADC_ConfigChannel+0x2b4>
    return 32U;
 810258c:	2320      	movs	r3, #32
 810258e:	e003      	b.n	8102598 <HAL_ADC_ConfigChannel+0x2bc>
  return __builtin_clz(value);
 8102590:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8102592:	fab3 f383 	clz	r3, r3
 8102596:	b2db      	uxtb	r3, r3
 8102598:	3301      	adds	r3, #1
 810259a:	f003 031f 	and.w	r3, r3, #31
 810259e:	2b09      	cmp	r3, #9
 81025a0:	bf94      	ite	ls
 81025a2:	2301      	movls	r3, #1
 81025a4:	2300      	movhi	r3, #0
 81025a6:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 81025a8:	2b00      	cmp	r3, #0
 81025aa:	d079      	beq.n	81026a0 <HAL_ADC_ConfigChannel+0x3c4>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 81025ac:	683b      	ldr	r3, [r7, #0]
 81025ae:	681b      	ldr	r3, [r3, #0]
 81025b0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 81025b4:	2b00      	cmp	r3, #0
 81025b6:	d107      	bne.n	81025c8 <HAL_ADC_ConfigChannel+0x2ec>
 81025b8:	683b      	ldr	r3, [r7, #0]
 81025ba:	681b      	ldr	r3, [r3, #0]
 81025bc:	0e9b      	lsrs	r3, r3, #26
 81025be:	3301      	adds	r3, #1
 81025c0:	069b      	lsls	r3, r3, #26
 81025c2:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 81025c6:	e015      	b.n	81025f4 <HAL_ADC_ConfigChannel+0x318>
 81025c8:	683b      	ldr	r3, [r7, #0]
 81025ca:	681b      	ldr	r3, [r3, #0]
 81025cc:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 81025ce:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 81025d0:	fa93 f3a3 	rbit	r3, r3
 81025d4:	64bb      	str	r3, [r7, #72]	; 0x48
  return result;
 81025d6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 81025d8:	653b      	str	r3, [r7, #80]	; 0x50
  if (value == 0U)
 81025da:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 81025dc:	2b00      	cmp	r3, #0
 81025de:	d101      	bne.n	81025e4 <HAL_ADC_ConfigChannel+0x308>
    return 32U;
 81025e0:	2320      	movs	r3, #32
 81025e2:	e003      	b.n	81025ec <HAL_ADC_ConfigChannel+0x310>
  return __builtin_clz(value);
 81025e4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 81025e6:	fab3 f383 	clz	r3, r3
 81025ea:	b2db      	uxtb	r3, r3
 81025ec:	3301      	adds	r3, #1
 81025ee:	069b      	lsls	r3, r3, #26
 81025f0:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 81025f4:	683b      	ldr	r3, [r7, #0]
 81025f6:	681b      	ldr	r3, [r3, #0]
 81025f8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 81025fc:	2b00      	cmp	r3, #0
 81025fe:	d109      	bne.n	8102614 <HAL_ADC_ConfigChannel+0x338>
 8102600:	683b      	ldr	r3, [r7, #0]
 8102602:	681b      	ldr	r3, [r3, #0]
 8102604:	0e9b      	lsrs	r3, r3, #26
 8102606:	3301      	adds	r3, #1
 8102608:	f003 031f 	and.w	r3, r3, #31
 810260c:	2101      	movs	r1, #1
 810260e:	fa01 f303 	lsl.w	r3, r1, r3
 8102612:	e017      	b.n	8102644 <HAL_ADC_ConfigChannel+0x368>
 8102614:	683b      	ldr	r3, [r7, #0]
 8102616:	681b      	ldr	r3, [r3, #0]
 8102618:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 810261a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 810261c:	fa93 f3a3 	rbit	r3, r3
 8102620:	63fb      	str	r3, [r7, #60]	; 0x3c
  return result;
 8102622:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8102624:	647b      	str	r3, [r7, #68]	; 0x44
  if (value == 0U)
 8102626:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8102628:	2b00      	cmp	r3, #0
 810262a:	d101      	bne.n	8102630 <HAL_ADC_ConfigChannel+0x354>
    return 32U;
 810262c:	2320      	movs	r3, #32
 810262e:	e003      	b.n	8102638 <HAL_ADC_ConfigChannel+0x35c>
  return __builtin_clz(value);
 8102630:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8102632:	fab3 f383 	clz	r3, r3
 8102636:	b2db      	uxtb	r3, r3
 8102638:	3301      	adds	r3, #1
 810263a:	f003 031f 	and.w	r3, r3, #31
 810263e:	2101      	movs	r1, #1
 8102640:	fa01 f303 	lsl.w	r3, r1, r3
 8102644:	ea42 0103 	orr.w	r1, r2, r3
 8102648:	683b      	ldr	r3, [r7, #0]
 810264a:	681b      	ldr	r3, [r3, #0]
 810264c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8102650:	2b00      	cmp	r3, #0
 8102652:	d10a      	bne.n	810266a <HAL_ADC_ConfigChannel+0x38e>
 8102654:	683b      	ldr	r3, [r7, #0]
 8102656:	681b      	ldr	r3, [r3, #0]
 8102658:	0e9b      	lsrs	r3, r3, #26
 810265a:	3301      	adds	r3, #1
 810265c:	f003 021f 	and.w	r2, r3, #31
 8102660:	4613      	mov	r3, r2
 8102662:	005b      	lsls	r3, r3, #1
 8102664:	4413      	add	r3, r2
 8102666:	051b      	lsls	r3, r3, #20
 8102668:	e018      	b.n	810269c <HAL_ADC_ConfigChannel+0x3c0>
 810266a:	683b      	ldr	r3, [r7, #0]
 810266c:	681b      	ldr	r3, [r3, #0]
 810266e:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8102670:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8102672:	fa93 f3a3 	rbit	r3, r3
 8102676:	633b      	str	r3, [r7, #48]	; 0x30
  return result;
 8102678:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 810267a:	63bb      	str	r3, [r7, #56]	; 0x38
  if (value == 0U)
 810267c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 810267e:	2b00      	cmp	r3, #0
 8102680:	d101      	bne.n	8102686 <HAL_ADC_ConfigChannel+0x3aa>
    return 32U;
 8102682:	2320      	movs	r3, #32
 8102684:	e003      	b.n	810268e <HAL_ADC_ConfigChannel+0x3b2>
  return __builtin_clz(value);
 8102686:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8102688:	fab3 f383 	clz	r3, r3
 810268c:	b2db      	uxtb	r3, r3
 810268e:	3301      	adds	r3, #1
 8102690:	f003 021f 	and.w	r2, r3, #31
 8102694:	4613      	mov	r3, r2
 8102696:	005b      	lsls	r3, r3, #1
 8102698:	4413      	add	r3, r2
 810269a:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 810269c:	430b      	orrs	r3, r1
 810269e:	e07e      	b.n	810279e <HAL_ADC_ConfigChannel+0x4c2>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 81026a0:	683b      	ldr	r3, [r7, #0]
 81026a2:	681b      	ldr	r3, [r3, #0]
 81026a4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 81026a8:	2b00      	cmp	r3, #0
 81026aa:	d107      	bne.n	81026bc <HAL_ADC_ConfigChannel+0x3e0>
 81026ac:	683b      	ldr	r3, [r7, #0]
 81026ae:	681b      	ldr	r3, [r3, #0]
 81026b0:	0e9b      	lsrs	r3, r3, #26
 81026b2:	3301      	adds	r3, #1
 81026b4:	069b      	lsls	r3, r3, #26
 81026b6:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 81026ba:	e015      	b.n	81026e8 <HAL_ADC_ConfigChannel+0x40c>
 81026bc:	683b      	ldr	r3, [r7, #0]
 81026be:	681b      	ldr	r3, [r3, #0]
 81026c0:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 81026c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 81026c4:	fa93 f3a3 	rbit	r3, r3
 81026c8:	627b      	str	r3, [r7, #36]	; 0x24
  return result;
 81026ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 81026cc:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (value == 0U)
 81026ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 81026d0:	2b00      	cmp	r3, #0
 81026d2:	d101      	bne.n	81026d8 <HAL_ADC_ConfigChannel+0x3fc>
    return 32U;
 81026d4:	2320      	movs	r3, #32
 81026d6:	e003      	b.n	81026e0 <HAL_ADC_ConfigChannel+0x404>
  return __builtin_clz(value);
 81026d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 81026da:	fab3 f383 	clz	r3, r3
 81026de:	b2db      	uxtb	r3, r3
 81026e0:	3301      	adds	r3, #1
 81026e2:	069b      	lsls	r3, r3, #26
 81026e4:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 81026e8:	683b      	ldr	r3, [r7, #0]
 81026ea:	681b      	ldr	r3, [r3, #0]
 81026ec:	f3c3 0313 	ubfx	r3, r3, #0, #20
 81026f0:	2b00      	cmp	r3, #0
 81026f2:	d109      	bne.n	8102708 <HAL_ADC_ConfigChannel+0x42c>
 81026f4:	683b      	ldr	r3, [r7, #0]
 81026f6:	681b      	ldr	r3, [r3, #0]
 81026f8:	0e9b      	lsrs	r3, r3, #26
 81026fa:	3301      	adds	r3, #1
 81026fc:	f003 031f 	and.w	r3, r3, #31
 8102700:	2101      	movs	r1, #1
 8102702:	fa01 f303 	lsl.w	r3, r1, r3
 8102706:	e017      	b.n	8102738 <HAL_ADC_ConfigChannel+0x45c>
 8102708:	683b      	ldr	r3, [r7, #0]
 810270a:	681b      	ldr	r3, [r3, #0]
 810270c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 810270e:	69fb      	ldr	r3, [r7, #28]
 8102710:	fa93 f3a3 	rbit	r3, r3
 8102714:	61bb      	str	r3, [r7, #24]
  return result;
 8102716:	69bb      	ldr	r3, [r7, #24]
 8102718:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 810271a:	6a3b      	ldr	r3, [r7, #32]
 810271c:	2b00      	cmp	r3, #0
 810271e:	d101      	bne.n	8102724 <HAL_ADC_ConfigChannel+0x448>
    return 32U;
 8102720:	2320      	movs	r3, #32
 8102722:	e003      	b.n	810272c <HAL_ADC_ConfigChannel+0x450>
  return __builtin_clz(value);
 8102724:	6a3b      	ldr	r3, [r7, #32]
 8102726:	fab3 f383 	clz	r3, r3
 810272a:	b2db      	uxtb	r3, r3
 810272c:	3301      	adds	r3, #1
 810272e:	f003 031f 	and.w	r3, r3, #31
 8102732:	2101      	movs	r1, #1
 8102734:	fa01 f303 	lsl.w	r3, r1, r3
 8102738:	ea42 0103 	orr.w	r1, r2, r3
 810273c:	683b      	ldr	r3, [r7, #0]
 810273e:	681b      	ldr	r3, [r3, #0]
 8102740:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8102744:	2b00      	cmp	r3, #0
 8102746:	d10d      	bne.n	8102764 <HAL_ADC_ConfigChannel+0x488>
 8102748:	683b      	ldr	r3, [r7, #0]
 810274a:	681b      	ldr	r3, [r3, #0]
 810274c:	0e9b      	lsrs	r3, r3, #26
 810274e:	3301      	adds	r3, #1
 8102750:	f003 021f 	and.w	r2, r3, #31
 8102754:	4613      	mov	r3, r2
 8102756:	005b      	lsls	r3, r3, #1
 8102758:	4413      	add	r3, r2
 810275a:	3b1e      	subs	r3, #30
 810275c:	051b      	lsls	r3, r3, #20
 810275e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8102762:	e01b      	b.n	810279c <HAL_ADC_ConfigChannel+0x4c0>
 8102764:	683b      	ldr	r3, [r7, #0]
 8102766:	681b      	ldr	r3, [r3, #0]
 8102768:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 810276a:	693b      	ldr	r3, [r7, #16]
 810276c:	fa93 f3a3 	rbit	r3, r3
 8102770:	60fb      	str	r3, [r7, #12]
  return result;
 8102772:	68fb      	ldr	r3, [r7, #12]
 8102774:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 8102776:	697b      	ldr	r3, [r7, #20]
 8102778:	2b00      	cmp	r3, #0
 810277a:	d101      	bne.n	8102780 <HAL_ADC_ConfigChannel+0x4a4>
    return 32U;
 810277c:	2320      	movs	r3, #32
 810277e:	e003      	b.n	8102788 <HAL_ADC_ConfigChannel+0x4ac>
  return __builtin_clz(value);
 8102780:	697b      	ldr	r3, [r7, #20]
 8102782:	fab3 f383 	clz	r3, r3
 8102786:	b2db      	uxtb	r3, r3
 8102788:	3301      	adds	r3, #1
 810278a:	f003 021f 	and.w	r2, r3, #31
 810278e:	4613      	mov	r3, r2
 8102790:	005b      	lsls	r3, r3, #1
 8102792:	4413      	add	r3, r2
 8102794:	3b1e      	subs	r3, #30
 8102796:	051b      	lsls	r3, r3, #20
 8102798:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 810279c:	430b      	orrs	r3, r1
 810279e:	683a      	ldr	r2, [r7, #0]
 81027a0:	6892      	ldr	r2, [r2, #8]
 81027a2:	4619      	mov	r1, r3
 81027a4:	f7ff fb20 	bl	8101de8 <LL_ADC_SetChannelSamplingTime>
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      /* Note: these internal measurement paths can be disabled using           */
      /* HAL_ADC_DeInit().                                                      */

      if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 81027a8:	683b      	ldr	r3, [r7, #0]
 81027aa:	681b      	ldr	r3, [r3, #0]
 81027ac:	2b00      	cmp	r3, #0
 81027ae:	f280 80c6 	bge.w	810293e <HAL_ADC_ConfigChannel+0x662>
      {
        /* Configuration of common ADC parameters                                 */

        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 81027b2:	687b      	ldr	r3, [r7, #4]
 81027b4:	681b      	ldr	r3, [r3, #0]
 81027b6:	4a67      	ldr	r2, [pc, #412]	; (8102954 <HAL_ADC_ConfigChannel+0x678>)
 81027b8:	4293      	cmp	r3, r2
 81027ba:	d004      	beq.n	81027c6 <HAL_ADC_ConfigChannel+0x4ea>
 81027bc:	687b      	ldr	r3, [r7, #4]
 81027be:	681b      	ldr	r3, [r3, #0]
 81027c0:	4a65      	ldr	r2, [pc, #404]	; (8102958 <HAL_ADC_ConfigChannel+0x67c>)
 81027c2:	4293      	cmp	r3, r2
 81027c4:	d101      	bne.n	81027ca <HAL_ADC_ConfigChannel+0x4ee>
 81027c6:	4b65      	ldr	r3, [pc, #404]	; (810295c <HAL_ADC_ConfigChannel+0x680>)
 81027c8:	e000      	b.n	81027cc <HAL_ADC_ConfigChannel+0x4f0>
 81027ca:	4b65      	ldr	r3, [pc, #404]	; (8102960 <HAL_ADC_ConfigChannel+0x684>)
 81027cc:	4618      	mov	r0, r3
 81027ce:	f7ff fa7d 	bl	8101ccc <LL_ADC_GetCommonPathInternalCh>
 81027d2:	66f8      	str	r0, [r7, #108]	; 0x6c

        /* Software is allowed to change common parameters only when all ADCs   */
        /* of the common group are disabled.                                    */
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 81027d4:	687b      	ldr	r3, [r7, #4]
 81027d6:	681b      	ldr	r3, [r3, #0]
 81027d8:	4a5e      	ldr	r2, [pc, #376]	; (8102954 <HAL_ADC_ConfigChannel+0x678>)
 81027da:	4293      	cmp	r3, r2
 81027dc:	d004      	beq.n	81027e8 <HAL_ADC_ConfigChannel+0x50c>
 81027de:	687b      	ldr	r3, [r7, #4]
 81027e0:	681b      	ldr	r3, [r3, #0]
 81027e2:	4a5d      	ldr	r2, [pc, #372]	; (8102958 <HAL_ADC_ConfigChannel+0x67c>)
 81027e4:	4293      	cmp	r3, r2
 81027e6:	d10e      	bne.n	8102806 <HAL_ADC_ConfigChannel+0x52a>
 81027e8:	485a      	ldr	r0, [pc, #360]	; (8102954 <HAL_ADC_ConfigChannel+0x678>)
 81027ea:	f7ff fb9b 	bl	8101f24 <LL_ADC_IsEnabled>
 81027ee:	4604      	mov	r4, r0
 81027f0:	4859      	ldr	r0, [pc, #356]	; (8102958 <HAL_ADC_ConfigChannel+0x67c>)
 81027f2:	f7ff fb97 	bl	8101f24 <LL_ADC_IsEnabled>
 81027f6:	4603      	mov	r3, r0
 81027f8:	4323      	orrs	r3, r4
 81027fa:	2b00      	cmp	r3, #0
 81027fc:	bf0c      	ite	eq
 81027fe:	2301      	moveq	r3, #1
 8102800:	2300      	movne	r3, #0
 8102802:	b2db      	uxtb	r3, r3
 8102804:	e008      	b.n	8102818 <HAL_ADC_ConfigChannel+0x53c>
 8102806:	4857      	ldr	r0, [pc, #348]	; (8102964 <HAL_ADC_ConfigChannel+0x688>)
 8102808:	f7ff fb8c 	bl	8101f24 <LL_ADC_IsEnabled>
 810280c:	4603      	mov	r3, r0
 810280e:	2b00      	cmp	r3, #0
 8102810:	bf0c      	ite	eq
 8102812:	2301      	moveq	r3, #1
 8102814:	2300      	movne	r3, #0
 8102816:	b2db      	uxtb	r3, r3
 8102818:	2b00      	cmp	r3, #0
 810281a:	d07d      	beq.n	8102918 <HAL_ADC_ConfigChannel+0x63c>
        {
          /* If the requested internal measurement path has already been enabled, */
          /* bypass the configuration processing.                                 */
          if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 810281c:	683b      	ldr	r3, [r7, #0]
 810281e:	681b      	ldr	r3, [r3, #0]
 8102820:	4a51      	ldr	r2, [pc, #324]	; (8102968 <HAL_ADC_ConfigChannel+0x68c>)
 8102822:	4293      	cmp	r3, r2
 8102824:	d130      	bne.n	8102888 <HAL_ADC_ConfigChannel+0x5ac>
 8102826:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8102828:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 810282c:	2b00      	cmp	r3, #0
 810282e:	d12b      	bne.n	8102888 <HAL_ADC_ConfigChannel+0x5ac>
          {
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8102830:	687b      	ldr	r3, [r7, #4]
 8102832:	681b      	ldr	r3, [r3, #0]
 8102834:	4a4b      	ldr	r2, [pc, #300]	; (8102964 <HAL_ADC_ConfigChannel+0x688>)
 8102836:	4293      	cmp	r3, r2
 8102838:	f040 8081 	bne.w	810293e <HAL_ADC_ConfigChannel+0x662>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_TEMPSENSOR | tmp_config_internal_channel);
 810283c:	687b      	ldr	r3, [r7, #4]
 810283e:	681b      	ldr	r3, [r3, #0]
 8102840:	4a44      	ldr	r2, [pc, #272]	; (8102954 <HAL_ADC_ConfigChannel+0x678>)
 8102842:	4293      	cmp	r3, r2
 8102844:	d004      	beq.n	8102850 <HAL_ADC_ConfigChannel+0x574>
 8102846:	687b      	ldr	r3, [r7, #4]
 8102848:	681b      	ldr	r3, [r3, #0]
 810284a:	4a43      	ldr	r2, [pc, #268]	; (8102958 <HAL_ADC_ConfigChannel+0x67c>)
 810284c:	4293      	cmp	r3, r2
 810284e:	d101      	bne.n	8102854 <HAL_ADC_ConfigChannel+0x578>
 8102850:	4a42      	ldr	r2, [pc, #264]	; (810295c <HAL_ADC_ConfigChannel+0x680>)
 8102852:	e000      	b.n	8102856 <HAL_ADC_ConfigChannel+0x57a>
 8102854:	4a42      	ldr	r2, [pc, #264]	; (8102960 <HAL_ADC_ConfigChannel+0x684>)
 8102856:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8102858:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 810285c:	4619      	mov	r1, r3
 810285e:	4610      	mov	r0, r2
 8102860:	f7ff fa21 	bl	8101ca6 <LL_ADC_SetCommonPathInternalCh>
              /* Delay for temperature sensor stabilization time */
              /* Wait loop initialization and execution */
              /* Note: Variable divided by 2 to compensate partially              */
              /*       CPU processing cycles, scaling in us split to not          */
              /*       exceed 32 bits register capacity and handle low frequency. */
              wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8102864:	4b41      	ldr	r3, [pc, #260]	; (810296c <HAL_ADC_ConfigChannel+0x690>)
 8102866:	681b      	ldr	r3, [r3, #0]
 8102868:	099b      	lsrs	r3, r3, #6
 810286a:	4a41      	ldr	r2, [pc, #260]	; (8102970 <HAL_ADC_ConfigChannel+0x694>)
 810286c:	fba2 2303 	umull	r2, r3, r2, r3
 8102870:	099b      	lsrs	r3, r3, #6
 8102872:	3301      	adds	r3, #1
 8102874:	005b      	lsls	r3, r3, #1
 8102876:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 8102878:	e002      	b.n	8102880 <HAL_ADC_ConfigChannel+0x5a4>
              {
                wait_loop_index--;
 810287a:	68bb      	ldr	r3, [r7, #8]
 810287c:	3b01      	subs	r3, #1
 810287e:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 8102880:	68bb      	ldr	r3, [r7, #8]
 8102882:	2b00      	cmp	r3, #0
 8102884:	d1f9      	bne.n	810287a <HAL_ADC_ConfigChannel+0x59e>
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8102886:	e05a      	b.n	810293e <HAL_ADC_ConfigChannel+0x662>
              }
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8102888:	683b      	ldr	r3, [r7, #0]
 810288a:	681b      	ldr	r3, [r3, #0]
 810288c:	4a39      	ldr	r2, [pc, #228]	; (8102974 <HAL_ADC_ConfigChannel+0x698>)
 810288e:	4293      	cmp	r3, r2
 8102890:	d11e      	bne.n	81028d0 <HAL_ADC_ConfigChannel+0x5f4>
 8102892:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8102894:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8102898:	2b00      	cmp	r3, #0
 810289a:	d119      	bne.n	81028d0 <HAL_ADC_ConfigChannel+0x5f4>
          {
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 810289c:	687b      	ldr	r3, [r7, #4]
 810289e:	681b      	ldr	r3, [r3, #0]
 81028a0:	4a30      	ldr	r2, [pc, #192]	; (8102964 <HAL_ADC_ConfigChannel+0x688>)
 81028a2:	4293      	cmp	r3, r2
 81028a4:	d14b      	bne.n	810293e <HAL_ADC_ConfigChannel+0x662>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
 81028a6:	687b      	ldr	r3, [r7, #4]
 81028a8:	681b      	ldr	r3, [r3, #0]
 81028aa:	4a2a      	ldr	r2, [pc, #168]	; (8102954 <HAL_ADC_ConfigChannel+0x678>)
 81028ac:	4293      	cmp	r3, r2
 81028ae:	d004      	beq.n	81028ba <HAL_ADC_ConfigChannel+0x5de>
 81028b0:	687b      	ldr	r3, [r7, #4]
 81028b2:	681b      	ldr	r3, [r3, #0]
 81028b4:	4a28      	ldr	r2, [pc, #160]	; (8102958 <HAL_ADC_ConfigChannel+0x67c>)
 81028b6:	4293      	cmp	r3, r2
 81028b8:	d101      	bne.n	81028be <HAL_ADC_ConfigChannel+0x5e2>
 81028ba:	4a28      	ldr	r2, [pc, #160]	; (810295c <HAL_ADC_ConfigChannel+0x680>)
 81028bc:	e000      	b.n	81028c0 <HAL_ADC_ConfigChannel+0x5e4>
 81028be:	4a28      	ldr	r2, [pc, #160]	; (8102960 <HAL_ADC_ConfigChannel+0x684>)
 81028c0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 81028c2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 81028c6:	4619      	mov	r1, r3
 81028c8:	4610      	mov	r0, r2
 81028ca:	f7ff f9ec 	bl	8101ca6 <LL_ADC_SetCommonPathInternalCh>
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 81028ce:	e036      	b.n	810293e <HAL_ADC_ConfigChannel+0x662>
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 81028d0:	683b      	ldr	r3, [r7, #0]
 81028d2:	681b      	ldr	r3, [r3, #0]
 81028d4:	4a28      	ldr	r2, [pc, #160]	; (8102978 <HAL_ADC_ConfigChannel+0x69c>)
 81028d6:	4293      	cmp	r3, r2
 81028d8:	d131      	bne.n	810293e <HAL_ADC_ConfigChannel+0x662>
 81028da:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 81028dc:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 81028e0:	2b00      	cmp	r3, #0
 81028e2:	d12c      	bne.n	810293e <HAL_ADC_ConfigChannel+0x662>
          {
            if (ADC_VREFINT_INSTANCE(hadc))
 81028e4:	687b      	ldr	r3, [r7, #4]
 81028e6:	681b      	ldr	r3, [r3, #0]
 81028e8:	4a1e      	ldr	r2, [pc, #120]	; (8102964 <HAL_ADC_ConfigChannel+0x688>)
 81028ea:	4293      	cmp	r3, r2
 81028ec:	d127      	bne.n	810293e <HAL_ADC_ConfigChannel+0x662>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VREFINT | tmp_config_internal_channel);
 81028ee:	687b      	ldr	r3, [r7, #4]
 81028f0:	681b      	ldr	r3, [r3, #0]
 81028f2:	4a18      	ldr	r2, [pc, #96]	; (8102954 <HAL_ADC_ConfigChannel+0x678>)
 81028f4:	4293      	cmp	r3, r2
 81028f6:	d004      	beq.n	8102902 <HAL_ADC_ConfigChannel+0x626>
 81028f8:	687b      	ldr	r3, [r7, #4]
 81028fa:	681b      	ldr	r3, [r3, #0]
 81028fc:	4a16      	ldr	r2, [pc, #88]	; (8102958 <HAL_ADC_ConfigChannel+0x67c>)
 81028fe:	4293      	cmp	r3, r2
 8102900:	d101      	bne.n	8102906 <HAL_ADC_ConfigChannel+0x62a>
 8102902:	4a16      	ldr	r2, [pc, #88]	; (810295c <HAL_ADC_ConfigChannel+0x680>)
 8102904:	e000      	b.n	8102908 <HAL_ADC_ConfigChannel+0x62c>
 8102906:	4a16      	ldr	r2, [pc, #88]	; (8102960 <HAL_ADC_ConfigChannel+0x684>)
 8102908:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 810290a:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 810290e:	4619      	mov	r1, r3
 8102910:	4610      	mov	r0, r2
 8102912:	f7ff f9c8 	bl	8101ca6 <LL_ADC_SetCommonPathInternalCh>
 8102916:	e012      	b.n	810293e <HAL_ADC_ConfigChannel+0x662>
        /* enabled and other ADC of the common group are enabled, internal      */
        /* measurement paths cannot be enabled.                                 */
        else
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8102918:	687b      	ldr	r3, [r7, #4]
 810291a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 810291c:	f043 0220 	orr.w	r2, r3, #32
 8102920:	687b      	ldr	r3, [r7, #4]
 8102922:	655a      	str	r2, [r3, #84]	; 0x54

          tmp_hal_status = HAL_ERROR;
 8102924:	2301      	movs	r3, #1
 8102926:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 810292a:	e008      	b.n	810293e <HAL_ADC_ConfigChannel+0x662>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 810292c:	687b      	ldr	r3, [r7, #4]
 810292e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8102930:	f043 0220 	orr.w	r2, r3, #32
 8102934:	687b      	ldr	r3, [r7, #4]
 8102936:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8102938:	2301      	movs	r3, #1
 810293a:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 810293e:	687b      	ldr	r3, [r7, #4]
 8102940:	2200      	movs	r2, #0
 8102942:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8102946:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
}
 810294a:	4618      	mov	r0, r3
 810294c:	3784      	adds	r7, #132	; 0x84
 810294e:	46bd      	mov	sp, r7
 8102950:	bd90      	pop	{r4, r7, pc}
 8102952:	bf00      	nop
 8102954:	40022000 	.word	0x40022000
 8102958:	40022100 	.word	0x40022100
 810295c:	40022300 	.word	0x40022300
 8102960:	58026300 	.word	0x58026300
 8102964:	58026000 	.word	0x58026000
 8102968:	cb840000 	.word	0xcb840000
 810296c:	10000000 	.word	0x10000000
 8102970:	053e2d63 	.word	0x053e2d63
 8102974:	c7520000 	.word	0xc7520000
 8102978:	cfb80000 	.word	0xcfb80000

0810297c <ADC_ConfigureBoostMode>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval None.
  */
void ADC_ConfigureBoostMode(ADC_HandleTypeDef *hadc)
{
 810297c:	b580      	push	{r7, lr}
 810297e:	b084      	sub	sp, #16
 8102980:	af00      	add	r7, sp, #0
 8102982:	6078      	str	r0, [r7, #4]
  uint32_t freq;
  if (ADC_IS_SYNCHRONOUS_CLOCK_MODE(hadc))
 8102984:	687b      	ldr	r3, [r7, #4]
 8102986:	681b      	ldr	r3, [r3, #0]
 8102988:	4a7a      	ldr	r2, [pc, #488]	; (8102b74 <ADC_ConfigureBoostMode+0x1f8>)
 810298a:	4293      	cmp	r3, r2
 810298c:	d004      	beq.n	8102998 <ADC_ConfigureBoostMode+0x1c>
 810298e:	687b      	ldr	r3, [r7, #4]
 8102990:	681b      	ldr	r3, [r3, #0]
 8102992:	4a79      	ldr	r2, [pc, #484]	; (8102b78 <ADC_ConfigureBoostMode+0x1fc>)
 8102994:	4293      	cmp	r3, r2
 8102996:	d109      	bne.n	81029ac <ADC_ConfigureBoostMode+0x30>
 8102998:	4b78      	ldr	r3, [pc, #480]	; (8102b7c <ADC_ConfigureBoostMode+0x200>)
 810299a:	689b      	ldr	r3, [r3, #8]
 810299c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 81029a0:	2b00      	cmp	r3, #0
 81029a2:	bf14      	ite	ne
 81029a4:	2301      	movne	r3, #1
 81029a6:	2300      	moveq	r3, #0
 81029a8:	b2db      	uxtb	r3, r3
 81029aa:	e008      	b.n	81029be <ADC_ConfigureBoostMode+0x42>
 81029ac:	4b74      	ldr	r3, [pc, #464]	; (8102b80 <ADC_ConfigureBoostMode+0x204>)
 81029ae:	689b      	ldr	r3, [r3, #8]
 81029b0:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 81029b4:	2b00      	cmp	r3, #0
 81029b6:	bf14      	ite	ne
 81029b8:	2301      	movne	r3, #1
 81029ba:	2300      	moveq	r3, #0
 81029bc:	b2db      	uxtb	r3, r3
 81029be:	2b00      	cmp	r3, #0
 81029c0:	d01c      	beq.n	81029fc <ADC_ConfigureBoostMode+0x80>
  {
    freq = HAL_RCC_GetHCLKFreq();
 81029c2:	f001 f835 	bl	8103a30 <HAL_RCC_GetHCLKFreq>
 81029c6:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 81029c8:	687b      	ldr	r3, [r7, #4]
 81029ca:	685b      	ldr	r3, [r3, #4]
 81029cc:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 81029d0:	d010      	beq.n	81029f4 <ADC_ConfigureBoostMode+0x78>
 81029d2:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 81029d6:	d873      	bhi.n	8102ac0 <ADC_ConfigureBoostMode+0x144>
 81029d8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 81029dc:	d002      	beq.n	81029e4 <ADC_ConfigureBoostMode+0x68>
 81029de:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 81029e2:	d16d      	bne.n	8102ac0 <ADC_ConfigureBoostMode+0x144>
    {
      case ADC_CLOCK_SYNC_PCLK_DIV1:
      case ADC_CLOCK_SYNC_PCLK_DIV2:
        freq /= (hadc->Init.ClockPrescaler >> ADC_CCR_CKMODE_Pos);
 81029e4:	687b      	ldr	r3, [r7, #4]
 81029e6:	685b      	ldr	r3, [r3, #4]
 81029e8:	0c1b      	lsrs	r3, r3, #16
 81029ea:	68fa      	ldr	r2, [r7, #12]
 81029ec:	fbb2 f3f3 	udiv	r3, r2, r3
 81029f0:	60fb      	str	r3, [r7, #12]
        break;
 81029f2:	e068      	b.n	8102ac6 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_SYNC_PCLK_DIV4:
        freq /= 4UL;
 81029f4:	68fb      	ldr	r3, [r7, #12]
 81029f6:	089b      	lsrs	r3, r3, #2
 81029f8:	60fb      	str	r3, [r7, #12]
        break;
 81029fa:	e064      	b.n	8102ac6 <ADC_ConfigureBoostMode+0x14a>
        break;
    }
  }
  else
  {
    freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC);
 81029fc:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 8102a00:	f04f 0100 	mov.w	r1, #0
 8102a04:	f002 fabc 	bl	8104f80 <HAL_RCCEx_GetPeriphCLKFreq>
 8102a08:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 8102a0a:	687b      	ldr	r3, [r7, #4]
 8102a0c:	685b      	ldr	r3, [r3, #4]
 8102a0e:	f5b3 1f30 	cmp.w	r3, #2883584	; 0x2c0000
 8102a12:	d051      	beq.n	8102ab8 <ADC_ConfigureBoostMode+0x13c>
 8102a14:	f5b3 1f30 	cmp.w	r3, #2883584	; 0x2c0000
 8102a18:	d854      	bhi.n	8102ac4 <ADC_ConfigureBoostMode+0x148>
 8102a1a:	f5b3 1f20 	cmp.w	r3, #2621440	; 0x280000
 8102a1e:	d047      	beq.n	8102ab0 <ADC_ConfigureBoostMode+0x134>
 8102a20:	f5b3 1f20 	cmp.w	r3, #2621440	; 0x280000
 8102a24:	d84e      	bhi.n	8102ac4 <ADC_ConfigureBoostMode+0x148>
 8102a26:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 8102a2a:	d03d      	beq.n	8102aa8 <ADC_ConfigureBoostMode+0x12c>
 8102a2c:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 8102a30:	d848      	bhi.n	8102ac4 <ADC_ConfigureBoostMode+0x148>
 8102a32:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8102a36:	d033      	beq.n	8102aa0 <ADC_ConfigureBoostMode+0x124>
 8102a38:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8102a3c:	d842      	bhi.n	8102ac4 <ADC_ConfigureBoostMode+0x148>
 8102a3e:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
 8102a42:	d029      	beq.n	8102a98 <ADC_ConfigureBoostMode+0x11c>
 8102a44:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
 8102a48:	d83c      	bhi.n	8102ac4 <ADC_ConfigureBoostMode+0x148>
 8102a4a:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 8102a4e:	d01a      	beq.n	8102a86 <ADC_ConfigureBoostMode+0x10a>
 8102a50:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 8102a54:	d836      	bhi.n	8102ac4 <ADC_ConfigureBoostMode+0x148>
 8102a56:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 8102a5a:	d014      	beq.n	8102a86 <ADC_ConfigureBoostMode+0x10a>
 8102a5c:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 8102a60:	d830      	bhi.n	8102ac4 <ADC_ConfigureBoostMode+0x148>
 8102a62:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8102a66:	d00e      	beq.n	8102a86 <ADC_ConfigureBoostMode+0x10a>
 8102a68:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8102a6c:	d82a      	bhi.n	8102ac4 <ADC_ConfigureBoostMode+0x148>
 8102a6e:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8102a72:	d008      	beq.n	8102a86 <ADC_ConfigureBoostMode+0x10a>
 8102a74:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8102a78:	d824      	bhi.n	8102ac4 <ADC_ConfigureBoostMode+0x148>
 8102a7a:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8102a7e:	d002      	beq.n	8102a86 <ADC_ConfigureBoostMode+0x10a>
 8102a80:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8102a84:	d11e      	bne.n	8102ac4 <ADC_ConfigureBoostMode+0x148>
      case ADC_CLOCK_ASYNC_DIV4:
      case ADC_CLOCK_ASYNC_DIV6:
      case ADC_CLOCK_ASYNC_DIV8:
      case ADC_CLOCK_ASYNC_DIV10:
      case ADC_CLOCK_ASYNC_DIV12:
        freq /= ((hadc->Init.ClockPrescaler >> ADC_CCR_PRESC_Pos) << 1UL);
 8102a86:	687b      	ldr	r3, [r7, #4]
 8102a88:	685b      	ldr	r3, [r3, #4]
 8102a8a:	0c9b      	lsrs	r3, r3, #18
 8102a8c:	005b      	lsls	r3, r3, #1
 8102a8e:	68fa      	ldr	r2, [r7, #12]
 8102a90:	fbb2 f3f3 	udiv	r3, r2, r3
 8102a94:	60fb      	str	r3, [r7, #12]
        break;
 8102a96:	e016      	b.n	8102ac6 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV16:
        freq /= 16UL;
 8102a98:	68fb      	ldr	r3, [r7, #12]
 8102a9a:	091b      	lsrs	r3, r3, #4
 8102a9c:	60fb      	str	r3, [r7, #12]
        break;
 8102a9e:	e012      	b.n	8102ac6 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV32:
        freq /= 32UL;
 8102aa0:	68fb      	ldr	r3, [r7, #12]
 8102aa2:	095b      	lsrs	r3, r3, #5
 8102aa4:	60fb      	str	r3, [r7, #12]
        break;
 8102aa6:	e00e      	b.n	8102ac6 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV64:
        freq /= 64UL;
 8102aa8:	68fb      	ldr	r3, [r7, #12]
 8102aaa:	099b      	lsrs	r3, r3, #6
 8102aac:	60fb      	str	r3, [r7, #12]
        break;
 8102aae:	e00a      	b.n	8102ac6 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV128:
        freq /= 128UL;
 8102ab0:	68fb      	ldr	r3, [r7, #12]
 8102ab2:	09db      	lsrs	r3, r3, #7
 8102ab4:	60fb      	str	r3, [r7, #12]
        break;
 8102ab6:	e006      	b.n	8102ac6 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV256:
        freq /= 256UL;
 8102ab8:	68fb      	ldr	r3, [r7, #12]
 8102aba:	0a1b      	lsrs	r3, r3, #8
 8102abc:	60fb      	str	r3, [r7, #12]
        break;
 8102abe:	e002      	b.n	8102ac6 <ADC_ConfigureBoostMode+0x14a>
        break;
 8102ac0:	bf00      	nop
 8102ac2:	e000      	b.n	8102ac6 <ADC_ConfigureBoostMode+0x14a>
      default:
        break;
 8102ac4:	bf00      	nop
  else /* if(freq > 25000000UL) */
  {
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
  }
#else
  if (HAL_GetREVID() <= REV_ID_Y) /* STM32H7 silicon Rev.Y */
 8102ac6:	f7ff f8b9 	bl	8101c3c <HAL_GetREVID>
 8102aca:	4603      	mov	r3, r0
 8102acc:	f241 0203 	movw	r2, #4099	; 0x1003
 8102ad0:	4293      	cmp	r3, r2
 8102ad2:	d815      	bhi.n	8102b00 <ADC_ConfigureBoostMode+0x184>
  {
    if (freq > 20000000UL)
 8102ad4:	68fb      	ldr	r3, [r7, #12]
 8102ad6:	4a2b      	ldr	r2, [pc, #172]	; (8102b84 <ADC_ConfigureBoostMode+0x208>)
 8102ad8:	4293      	cmp	r3, r2
 8102ada:	d908      	bls.n	8102aee <ADC_ConfigureBoostMode+0x172>
    {
      SET_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 8102adc:	687b      	ldr	r3, [r7, #4]
 8102ade:	681b      	ldr	r3, [r3, #0]
 8102ae0:	689a      	ldr	r2, [r3, #8]
 8102ae2:	687b      	ldr	r3, [r7, #4]
 8102ae4:	681b      	ldr	r3, [r3, #0]
 8102ae6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8102aea:	609a      	str	r2, [r3, #8]
    {
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
    }
  }
#endif /* ADC_VER_V5_3 */
}
 8102aec:	e03e      	b.n	8102b6c <ADC_ConfigureBoostMode+0x1f0>
      CLEAR_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 8102aee:	687b      	ldr	r3, [r7, #4]
 8102af0:	681b      	ldr	r3, [r3, #0]
 8102af2:	689a      	ldr	r2, [r3, #8]
 8102af4:	687b      	ldr	r3, [r7, #4]
 8102af6:	681b      	ldr	r3, [r3, #0]
 8102af8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8102afc:	609a      	str	r2, [r3, #8]
}
 8102afe:	e035      	b.n	8102b6c <ADC_ConfigureBoostMode+0x1f0>
    freq /= 2U; /* divider by 2 for Rev.V */
 8102b00:	68fb      	ldr	r3, [r7, #12]
 8102b02:	085b      	lsrs	r3, r3, #1
 8102b04:	60fb      	str	r3, [r7, #12]
    if (freq <= 6250000UL)
 8102b06:	68fb      	ldr	r3, [r7, #12]
 8102b08:	4a1f      	ldr	r2, [pc, #124]	; (8102b88 <ADC_ConfigureBoostMode+0x20c>)
 8102b0a:	4293      	cmp	r3, r2
 8102b0c:	d808      	bhi.n	8102b20 <ADC_ConfigureBoostMode+0x1a4>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, 0UL);
 8102b0e:	687b      	ldr	r3, [r7, #4]
 8102b10:	681b      	ldr	r3, [r3, #0]
 8102b12:	689a      	ldr	r2, [r3, #8]
 8102b14:	687b      	ldr	r3, [r7, #4]
 8102b16:	681b      	ldr	r3, [r3, #0]
 8102b18:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8102b1c:	609a      	str	r2, [r3, #8]
}
 8102b1e:	e025      	b.n	8102b6c <ADC_ConfigureBoostMode+0x1f0>
    else if (freq <= 12500000UL)
 8102b20:	68fb      	ldr	r3, [r7, #12]
 8102b22:	4a1a      	ldr	r2, [pc, #104]	; (8102b8c <ADC_ConfigureBoostMode+0x210>)
 8102b24:	4293      	cmp	r3, r2
 8102b26:	d80a      	bhi.n	8102b3e <ADC_ConfigureBoostMode+0x1c2>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_0);
 8102b28:	687b      	ldr	r3, [r7, #4]
 8102b2a:	681b      	ldr	r3, [r3, #0]
 8102b2c:	689b      	ldr	r3, [r3, #8]
 8102b2e:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8102b32:	687b      	ldr	r3, [r7, #4]
 8102b34:	681b      	ldr	r3, [r3, #0]
 8102b36:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8102b3a:	609a      	str	r2, [r3, #8]
}
 8102b3c:	e016      	b.n	8102b6c <ADC_ConfigureBoostMode+0x1f0>
    else if (freq <= 25000000UL)
 8102b3e:	68fb      	ldr	r3, [r7, #12]
 8102b40:	4a13      	ldr	r2, [pc, #76]	; (8102b90 <ADC_ConfigureBoostMode+0x214>)
 8102b42:	4293      	cmp	r3, r2
 8102b44:	d80a      	bhi.n	8102b5c <ADC_ConfigureBoostMode+0x1e0>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1);
 8102b46:	687b      	ldr	r3, [r7, #4]
 8102b48:	681b      	ldr	r3, [r3, #0]
 8102b4a:	689b      	ldr	r3, [r3, #8]
 8102b4c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8102b50:	687b      	ldr	r3, [r7, #4]
 8102b52:	681b      	ldr	r3, [r3, #0]
 8102b54:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8102b58:	609a      	str	r2, [r3, #8]
}
 8102b5a:	e007      	b.n	8102b6c <ADC_ConfigureBoostMode+0x1f0>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
 8102b5c:	687b      	ldr	r3, [r7, #4]
 8102b5e:	681b      	ldr	r3, [r3, #0]
 8102b60:	689a      	ldr	r2, [r3, #8]
 8102b62:	687b      	ldr	r3, [r7, #4]
 8102b64:	681b      	ldr	r3, [r3, #0]
 8102b66:	f442 7240 	orr.w	r2, r2, #768	; 0x300
 8102b6a:	609a      	str	r2, [r3, #8]
}
 8102b6c:	bf00      	nop
 8102b6e:	3710      	adds	r7, #16
 8102b70:	46bd      	mov	sp, r7
 8102b72:	bd80      	pop	{r7, pc}
 8102b74:	40022000 	.word	0x40022000
 8102b78:	40022100 	.word	0x40022100
 8102b7c:	40022300 	.word	0x40022300
 8102b80:	58026300 	.word	0x58026300
 8102b84:	01312d00 	.word	0x01312d00
 8102b88:	005f5e10 	.word	0x005f5e10
 8102b8c:	00bebc20 	.word	0x00bebc20
 8102b90:	017d7840 	.word	0x017d7840

08102b94 <LL_ADC_IsEnabled>:
{
 8102b94:	b480      	push	{r7}
 8102b96:	b083      	sub	sp, #12
 8102b98:	af00      	add	r7, sp, #0
 8102b9a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8102b9c:	687b      	ldr	r3, [r7, #4]
 8102b9e:	689b      	ldr	r3, [r3, #8]
 8102ba0:	f003 0301 	and.w	r3, r3, #1
 8102ba4:	2b01      	cmp	r3, #1
 8102ba6:	d101      	bne.n	8102bac <LL_ADC_IsEnabled+0x18>
 8102ba8:	2301      	movs	r3, #1
 8102baa:	e000      	b.n	8102bae <LL_ADC_IsEnabled+0x1a>
 8102bac:	2300      	movs	r3, #0
}
 8102bae:	4618      	mov	r0, r3
 8102bb0:	370c      	adds	r7, #12
 8102bb2:	46bd      	mov	sp, r7
 8102bb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8102bb8:	4770      	bx	lr

08102bba <LL_ADC_REG_IsConversionOngoing>:
{
 8102bba:	b480      	push	{r7}
 8102bbc:	b083      	sub	sp, #12
 8102bbe:	af00      	add	r7, sp, #0
 8102bc0:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8102bc2:	687b      	ldr	r3, [r7, #4]
 8102bc4:	689b      	ldr	r3, [r3, #8]
 8102bc6:	f003 0304 	and.w	r3, r3, #4
 8102bca:	2b04      	cmp	r3, #4
 8102bcc:	d101      	bne.n	8102bd2 <LL_ADC_REG_IsConversionOngoing+0x18>
 8102bce:	2301      	movs	r3, #1
 8102bd0:	e000      	b.n	8102bd4 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8102bd2:	2300      	movs	r3, #0
}
 8102bd4:	4618      	mov	r0, r3
 8102bd6:	370c      	adds	r7, #12
 8102bd8:	46bd      	mov	sp, r7
 8102bda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8102bde:	4770      	bx	lr

08102be0 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 8102be0:	b590      	push	{r4, r7, lr}
 8102be2:	b09f      	sub	sp, #124	; 0x7c
 8102be4:	af00      	add	r7, sp, #0
 8102be6:	6078      	str	r0, [r7, #4]
 8102be8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8102bea:	2300      	movs	r3, #0
 8102bec:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
    assert_param(IS_ADC_DUAL_DATA_MODE(multimode->DualModeData));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8102bf0:	687b      	ldr	r3, [r7, #4]
 8102bf2:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8102bf6:	2b01      	cmp	r3, #1
 8102bf8:	d101      	bne.n	8102bfe <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8102bfa:	2302      	movs	r3, #2
 8102bfc:	e0c4      	b.n	8102d88 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>
 8102bfe:	687b      	ldr	r3, [r7, #4]
 8102c00:	2201      	movs	r2, #1
 8102c02:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  tmphadcSlave.State = HAL_ADC_STATE_RESET;
 8102c06:	2300      	movs	r3, #0
 8102c08:	65fb      	str	r3, [r7, #92]	; 0x5c
  tmphadcSlave.ErrorCode = HAL_ADC_ERROR_NONE;
 8102c0a:	2300      	movs	r3, #0
 8102c0c:	663b      	str	r3, [r7, #96]	; 0x60

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 8102c0e:	687b      	ldr	r3, [r7, #4]
 8102c10:	681b      	ldr	r3, [r3, #0]
 8102c12:	4a5f      	ldr	r2, [pc, #380]	; (8102d90 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 8102c14:	4293      	cmp	r3, r2
 8102c16:	d102      	bne.n	8102c1e <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8102c18:	4b5e      	ldr	r3, [pc, #376]	; (8102d94 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>)
 8102c1a:	60bb      	str	r3, [r7, #8]
 8102c1c:	e001      	b.n	8102c22 <HAL_ADCEx_MultiModeConfigChannel+0x42>
 8102c1e:	2300      	movs	r3, #0
 8102c20:	60bb      	str	r3, [r7, #8]

  if (tmphadcSlave.Instance == NULL)
 8102c22:	68bb      	ldr	r3, [r7, #8]
 8102c24:	2b00      	cmp	r3, #0
 8102c26:	d10b      	bne.n	8102c40 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8102c28:	687b      	ldr	r3, [r7, #4]
 8102c2a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8102c2c:	f043 0220 	orr.w	r2, r3, #32
 8102c30:	687b      	ldr	r3, [r7, #4]
 8102c32:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8102c34:	687b      	ldr	r3, [r7, #4]
 8102c36:	2200      	movs	r2, #0
 8102c38:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    return HAL_ERROR;
 8102c3c:	2301      	movs	r3, #1
 8102c3e:	e0a3      	b.n	8102d88 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DATA Format configuration                                   */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 8102c40:	68bb      	ldr	r3, [r7, #8]
 8102c42:	4618      	mov	r0, r3
 8102c44:	f7ff ffb9 	bl	8102bba <LL_ADC_REG_IsConversionOngoing>
 8102c48:	6738      	str	r0, [r7, #112]	; 0x70
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8102c4a:	687b      	ldr	r3, [r7, #4]
 8102c4c:	681b      	ldr	r3, [r3, #0]
 8102c4e:	4618      	mov	r0, r3
 8102c50:	f7ff ffb3 	bl	8102bba <LL_ADC_REG_IsConversionOngoing>
 8102c54:	4603      	mov	r3, r0
 8102c56:	2b00      	cmp	r3, #0
 8102c58:	f040 8085 	bne.w	8102d66 <HAL_ADCEx_MultiModeConfigChannel+0x186>
      && (tmphadcSlave_conversion_on_going == 0UL))
 8102c5c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8102c5e:	2b00      	cmp	r3, #0
 8102c60:	f040 8081 	bne.w	8102d66 <HAL_ADCEx_MultiModeConfigChannel+0x186>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8102c64:	687b      	ldr	r3, [r7, #4]
 8102c66:	681b      	ldr	r3, [r3, #0]
 8102c68:	4a49      	ldr	r2, [pc, #292]	; (8102d90 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 8102c6a:	4293      	cmp	r3, r2
 8102c6c:	d004      	beq.n	8102c78 <HAL_ADCEx_MultiModeConfigChannel+0x98>
 8102c6e:	687b      	ldr	r3, [r7, #4]
 8102c70:	681b      	ldr	r3, [r3, #0]
 8102c72:	4a48      	ldr	r2, [pc, #288]	; (8102d94 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>)
 8102c74:	4293      	cmp	r3, r2
 8102c76:	d101      	bne.n	8102c7c <HAL_ADCEx_MultiModeConfigChannel+0x9c>
 8102c78:	4b47      	ldr	r3, [pc, #284]	; (8102d98 <HAL_ADCEx_MultiModeConfigChannel+0x1b8>)
 8102c7a:	e000      	b.n	8102c7e <HAL_ADCEx_MultiModeConfigChannel+0x9e>
 8102c7c:	4b47      	ldr	r3, [pc, #284]	; (8102d9c <HAL_ADCEx_MultiModeConfigChannel+0x1bc>)
 8102c7e:	66fb      	str	r3, [r7, #108]	; 0x6c

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8102c80:	683b      	ldr	r3, [r7, #0]
 8102c82:	681b      	ldr	r3, [r3, #0]
 8102c84:	2b00      	cmp	r3, #0
 8102c86:	d03b      	beq.n	8102d00 <HAL_ADCEx_MultiModeConfigChannel+0x120>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_DAMDF, multimode->DualModeData);
 8102c88:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8102c8a:	689b      	ldr	r3, [r3, #8]
 8102c8c:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8102c90:	683b      	ldr	r3, [r7, #0]
 8102c92:	685b      	ldr	r3, [r3, #4]
 8102c94:	431a      	orrs	r2, r3
 8102c96:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8102c98:	609a      	str	r2, [r3, #8]
      /*      from 1 to 8 clock cycles for 12 bits                              */
      /*      from 1 to 6 clock cycles for 10 and 8 bits                        */
      /*    If a higher delay is selected, it will be clipped to maximum delay  */
      /*    range                                                               */

      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8102c9a:	687b      	ldr	r3, [r7, #4]
 8102c9c:	681b      	ldr	r3, [r3, #0]
 8102c9e:	4a3c      	ldr	r2, [pc, #240]	; (8102d90 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 8102ca0:	4293      	cmp	r3, r2
 8102ca2:	d004      	beq.n	8102cae <HAL_ADCEx_MultiModeConfigChannel+0xce>
 8102ca4:	687b      	ldr	r3, [r7, #4]
 8102ca6:	681b      	ldr	r3, [r3, #0]
 8102ca8:	4a3a      	ldr	r2, [pc, #232]	; (8102d94 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>)
 8102caa:	4293      	cmp	r3, r2
 8102cac:	d10e      	bne.n	8102ccc <HAL_ADCEx_MultiModeConfigChannel+0xec>
 8102cae:	4838      	ldr	r0, [pc, #224]	; (8102d90 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 8102cb0:	f7ff ff70 	bl	8102b94 <LL_ADC_IsEnabled>
 8102cb4:	4604      	mov	r4, r0
 8102cb6:	4837      	ldr	r0, [pc, #220]	; (8102d94 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>)
 8102cb8:	f7ff ff6c 	bl	8102b94 <LL_ADC_IsEnabled>
 8102cbc:	4603      	mov	r3, r0
 8102cbe:	4323      	orrs	r3, r4
 8102cc0:	2b00      	cmp	r3, #0
 8102cc2:	bf0c      	ite	eq
 8102cc4:	2301      	moveq	r3, #1
 8102cc6:	2300      	movne	r3, #0
 8102cc8:	b2db      	uxtb	r3, r3
 8102cca:	e008      	b.n	8102cde <HAL_ADCEx_MultiModeConfigChannel+0xfe>
 8102ccc:	4834      	ldr	r0, [pc, #208]	; (8102da0 <HAL_ADCEx_MultiModeConfigChannel+0x1c0>)
 8102cce:	f7ff ff61 	bl	8102b94 <LL_ADC_IsEnabled>
 8102cd2:	4603      	mov	r3, r0
 8102cd4:	2b00      	cmp	r3, #0
 8102cd6:	bf0c      	ite	eq
 8102cd8:	2301      	moveq	r3, #1
 8102cda:	2300      	movne	r3, #0
 8102cdc:	b2db      	uxtb	r3, r3
 8102cde:	2b00      	cmp	r3, #0
 8102ce0:	d04b      	beq.n	8102d7a <HAL_ADCEx_MultiModeConfigChannel+0x19a>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8102ce2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8102ce4:	689b      	ldr	r3, [r3, #8]
 8102ce6:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8102cea:	f023 030f 	bic.w	r3, r3, #15
 8102cee:	683a      	ldr	r2, [r7, #0]
 8102cf0:	6811      	ldr	r1, [r2, #0]
 8102cf2:	683a      	ldr	r2, [r7, #0]
 8102cf4:	6892      	ldr	r2, [r2, #8]
 8102cf6:	430a      	orrs	r2, r1
 8102cf8:	431a      	orrs	r2, r3
 8102cfa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8102cfc:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8102cfe:	e03c      	b.n	8102d7a <HAL_ADCEx_MultiModeConfigChannel+0x19a>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DAMDF);
 8102d00:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8102d02:	689b      	ldr	r3, [r3, #8]
 8102d04:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8102d08:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8102d0a:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8102d0c:	687b      	ldr	r3, [r7, #4]
 8102d0e:	681b      	ldr	r3, [r3, #0]
 8102d10:	4a1f      	ldr	r2, [pc, #124]	; (8102d90 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 8102d12:	4293      	cmp	r3, r2
 8102d14:	d004      	beq.n	8102d20 <HAL_ADCEx_MultiModeConfigChannel+0x140>
 8102d16:	687b      	ldr	r3, [r7, #4]
 8102d18:	681b      	ldr	r3, [r3, #0]
 8102d1a:	4a1e      	ldr	r2, [pc, #120]	; (8102d94 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>)
 8102d1c:	4293      	cmp	r3, r2
 8102d1e:	d10e      	bne.n	8102d3e <HAL_ADCEx_MultiModeConfigChannel+0x15e>
 8102d20:	481b      	ldr	r0, [pc, #108]	; (8102d90 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 8102d22:	f7ff ff37 	bl	8102b94 <LL_ADC_IsEnabled>
 8102d26:	4604      	mov	r4, r0
 8102d28:	481a      	ldr	r0, [pc, #104]	; (8102d94 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>)
 8102d2a:	f7ff ff33 	bl	8102b94 <LL_ADC_IsEnabled>
 8102d2e:	4603      	mov	r3, r0
 8102d30:	4323      	orrs	r3, r4
 8102d32:	2b00      	cmp	r3, #0
 8102d34:	bf0c      	ite	eq
 8102d36:	2301      	moveq	r3, #1
 8102d38:	2300      	movne	r3, #0
 8102d3a:	b2db      	uxtb	r3, r3
 8102d3c:	e008      	b.n	8102d50 <HAL_ADCEx_MultiModeConfigChannel+0x170>
 8102d3e:	4818      	ldr	r0, [pc, #96]	; (8102da0 <HAL_ADCEx_MultiModeConfigChannel+0x1c0>)
 8102d40:	f7ff ff28 	bl	8102b94 <LL_ADC_IsEnabled>
 8102d44:	4603      	mov	r3, r0
 8102d46:	2b00      	cmp	r3, #0
 8102d48:	bf0c      	ite	eq
 8102d4a:	2301      	moveq	r3, #1
 8102d4c:	2300      	movne	r3, #0
 8102d4e:	b2db      	uxtb	r3, r3
 8102d50:	2b00      	cmp	r3, #0
 8102d52:	d012      	beq.n	8102d7a <HAL_ADCEx_MultiModeConfigChannel+0x19a>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8102d54:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8102d56:	689b      	ldr	r3, [r3, #8]
 8102d58:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8102d5c:	f023 030f 	bic.w	r3, r3, #15
 8102d60:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8102d62:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8102d64:	e009      	b.n	8102d7a <HAL_ADCEx_MultiModeConfigChannel+0x19a>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8102d66:	687b      	ldr	r3, [r7, #4]
 8102d68:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8102d6a:	f043 0220 	orr.w	r2, r3, #32
 8102d6e:	687b      	ldr	r3, [r7, #4]
 8102d70:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8102d72:	2301      	movs	r3, #1
 8102d74:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
 8102d78:	e000      	b.n	8102d7c <HAL_ADCEx_MultiModeConfigChannel+0x19c>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8102d7a:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8102d7c:	687b      	ldr	r3, [r7, #4]
 8102d7e:	2200      	movs	r2, #0
 8102d80:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8102d84:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
}
 8102d88:	4618      	mov	r0, r3
 8102d8a:	377c      	adds	r7, #124	; 0x7c
 8102d8c:	46bd      	mov	sp, r7
 8102d8e:	bd90      	pop	{r4, r7, pc}
 8102d90:	40022000 	.word	0x40022000
 8102d94:	40022100 	.word	0x40022100
 8102d98:	40022300 	.word	0x40022300
 8102d9c:	58026300 	.word	0x58026300
 8102da0:	58026000 	.word	0x58026000

08102da4 <HAL_CEC_Init>:
  *         parameters in the CEC_InitTypeDef and creates the associated handle .
  * @param hcec CEC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CEC_Init(CEC_HandleTypeDef *hcec)
{
 8102da4:	b580      	push	{r7, lr}
 8102da6:	b082      	sub	sp, #8
 8102da8:	af00      	add	r7, sp, #0
 8102daa:	6078      	str	r0, [r7, #4]
  /* Check the CEC handle allocation */
  if ((hcec == NULL) || (hcec->Init.RxBuffer == NULL))
 8102dac:	687b      	ldr	r3, [r7, #4]
 8102dae:	2b00      	cmp	r3, #0
 8102db0:	d003      	beq.n	8102dba <HAL_CEC_Init+0x16>
 8102db2:	687b      	ldr	r3, [r7, #4]
 8102db4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8102db6:	2b00      	cmp	r3, #0
 8102db8:	d101      	bne.n	8102dbe <HAL_CEC_Init+0x1a>
  {
    return HAL_ERROR;
 8102dba:	2301      	movs	r3, #1
 8102dbc:	e050      	b.n	8102e60 <HAL_CEC_Init+0xbc>

    /* Init the low level hardware */
    hcec->MspInitCallback(hcec);
  }
#else
  if (hcec->gState == HAL_CEC_STATE_RESET)
 8102dbe:	687b      	ldr	r3, [r7, #4]
 8102dc0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8102dc2:	2b00      	cmp	r3, #0
 8102dc4:	d106      	bne.n	8102dd4 <HAL_CEC_Init+0x30>
  {
    /* Allocate lock resource and initialize it */
    hcec->Lock = HAL_UNLOCKED;
 8102dc6:	687b      	ldr	r3, [r7, #4]
 8102dc8:	2200      	movs	r2, #0
 8102dca:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_CEC_MspInit(hcec);
 8102dce:	6878      	ldr	r0, [r7, #4]
 8102dd0:	f7fe faaa 	bl	8101328 <HAL_CEC_MspInit>
  }
#endif /* USE_HAL_CEC_REGISTER_CALLBACKS */

  hcec->gState = HAL_CEC_STATE_BUSY;
 8102dd4:	687b      	ldr	r3, [r7, #4]
 8102dd6:	2224      	movs	r2, #36	; 0x24
 8102dd8:	639a      	str	r2, [r3, #56]	; 0x38

  /* Disable the Peripheral */
  __HAL_CEC_DISABLE(hcec);
 8102dda:	687b      	ldr	r3, [r7, #4]
 8102ddc:	681b      	ldr	r3, [r3, #0]
 8102dde:	681a      	ldr	r2, [r3, #0]
 8102de0:	687b      	ldr	r3, [r7, #4]
 8102de2:	681b      	ldr	r3, [r3, #0]
 8102de4:	f022 0201 	bic.w	r2, r2, #1
 8102de8:	601a      	str	r2, [r3, #0]

  /* Write to CEC Control Register */
  hcec->Instance->CFGR = hcec->Init.SignalFreeTime | hcec->Init.Tolerance | hcec->Init.BRERxStop | \
 8102dea:	687b      	ldr	r3, [r7, #4]
 8102dec:	685a      	ldr	r2, [r3, #4]
 8102dee:	687b      	ldr	r3, [r7, #4]
 8102df0:	689b      	ldr	r3, [r3, #8]
 8102df2:	431a      	orrs	r2, r3
 8102df4:	687b      	ldr	r3, [r7, #4]
 8102df6:	68db      	ldr	r3, [r3, #12]
 8102df8:	431a      	orrs	r2, r3
                         hcec->Init.BREErrorBitGen | hcec->Init.LBPEErrorBitGen | \
 8102dfa:	687b      	ldr	r3, [r7, #4]
 8102dfc:	691b      	ldr	r3, [r3, #16]
  hcec->Instance->CFGR = hcec->Init.SignalFreeTime | hcec->Init.Tolerance | hcec->Init.BRERxStop | \
 8102dfe:	431a      	orrs	r2, r3
                         hcec->Init.BREErrorBitGen | hcec->Init.LBPEErrorBitGen | \
 8102e00:	687b      	ldr	r3, [r7, #4]
 8102e02:	695b      	ldr	r3, [r3, #20]
 8102e04:	431a      	orrs	r2, r3
                         hcec->Init.BroadcastMsgNoErrorBitGen | \
 8102e06:	687b      	ldr	r3, [r7, #4]
 8102e08:	699b      	ldr	r3, [r3, #24]
                         hcec->Init.BREErrorBitGen | hcec->Init.LBPEErrorBitGen | \
 8102e0a:	431a      	orrs	r2, r3
                         hcec->Init.SignalFreeTimeOption | ((uint32_t)(hcec->Init.OwnAddress) << 16U) | \
 8102e0c:	687b      	ldr	r3, [r7, #4]
 8102e0e:	69db      	ldr	r3, [r3, #28]
                         hcec->Init.BroadcastMsgNoErrorBitGen | \
 8102e10:	431a      	orrs	r2, r3
                         hcec->Init.SignalFreeTimeOption | ((uint32_t)(hcec->Init.OwnAddress) << 16U) | \
 8102e12:	687b      	ldr	r3, [r7, #4]
 8102e14:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8102e16:	041b      	lsls	r3, r3, #16
 8102e18:	ea42 0103 	orr.w	r1, r2, r3
                         hcec->Init.ListenMode;
 8102e1c:	687b      	ldr	r3, [r7, #4]
 8102e1e:	6a1a      	ldr	r2, [r3, #32]
  hcec->Instance->CFGR = hcec->Init.SignalFreeTime | hcec->Init.Tolerance | hcec->Init.BRERxStop | \
 8102e20:	687b      	ldr	r3, [r7, #4]
 8102e22:	681b      	ldr	r3, [r3, #0]
                         hcec->Init.SignalFreeTimeOption | ((uint32_t)(hcec->Init.OwnAddress) << 16U) | \
 8102e24:	430a      	orrs	r2, r1
  hcec->Instance->CFGR = hcec->Init.SignalFreeTime | hcec->Init.Tolerance | hcec->Init.BRERxStop | \
 8102e26:	605a      	str	r2, [r3, #4]
    * End of Transmission IT
    * Tx Missing Acknowledge IT
    * Tx-Error IT
    * Tx-Buffer Underrun IT
    * Tx arbitration lost   */
  __HAL_CEC_ENABLE_IT(hcec, CEC_IT_RXBR | CEC_IT_RXEND | CEC_IER_RX_ALL_ERR | CEC_IT_TXBR | CEC_IT_TXEND |
 8102e28:	687b      	ldr	r3, [r7, #4]
 8102e2a:	681b      	ldr	r3, [r3, #0]
 8102e2c:	695b      	ldr	r3, [r3, #20]
 8102e2e:	687a      	ldr	r2, [r7, #4]
 8102e30:	6812      	ldr	r2, [r2, #0]
 8102e32:	ea6f 3353 	mvn.w	r3, r3, lsr #13
 8102e36:	ea6f 3343 	mvn.w	r3, r3, lsl #13
 8102e3a:	6153      	str	r3, [r2, #20]
                      CEC_IER_TX_ALL_ERR);

  /* Enable the CEC Peripheral */
  __HAL_CEC_ENABLE(hcec);
 8102e3c:	687b      	ldr	r3, [r7, #4]
 8102e3e:	681b      	ldr	r3, [r3, #0]
 8102e40:	681a      	ldr	r2, [r3, #0]
 8102e42:	687b      	ldr	r3, [r7, #4]
 8102e44:	681b      	ldr	r3, [r3, #0]
 8102e46:	f042 0201 	orr.w	r2, r2, #1
 8102e4a:	601a      	str	r2, [r3, #0]

  hcec->ErrorCode = HAL_CEC_ERROR_NONE;
 8102e4c:	687b      	ldr	r3, [r7, #4]
 8102e4e:	2200      	movs	r2, #0
 8102e50:	641a      	str	r2, [r3, #64]	; 0x40
  hcec->gState = HAL_CEC_STATE_READY;
 8102e52:	687b      	ldr	r3, [r7, #4]
 8102e54:	2220      	movs	r2, #32
 8102e56:	639a      	str	r2, [r3, #56]	; 0x38
  hcec->RxState = HAL_CEC_STATE_READY;
 8102e58:	687b      	ldr	r3, [r7, #4]
 8102e5a:	2220      	movs	r2, #32
 8102e5c:	63da      	str	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8102e5e:	2300      	movs	r3, #0
}
 8102e60:	4618      	mov	r0, r3
 8102e62:	3708      	adds	r7, #8
 8102e64:	46bd      	mov	sp, r7
 8102e66:	bd80      	pop	{r7, pc}

08102e68 <HAL_CEC_IRQHandler>:
  * @brief This function handles CEC interrupt requests.
  * @param hcec CEC handle
  * @retval None
  */
void HAL_CEC_IRQHandler(CEC_HandleTypeDef *hcec)
{
 8102e68:	b580      	push	{r7, lr}
 8102e6a:	b084      	sub	sp, #16
 8102e6c:	af00      	add	r7, sp, #0
 8102e6e:	6078      	str	r0, [r7, #4]

  /* save interrupts register for further error or interrupts handling purposes */
  uint32_t itflag;
  itflag = hcec->Instance->ISR;
 8102e70:	687b      	ldr	r3, [r7, #4]
 8102e72:	681b      	ldr	r3, [r3, #0]
 8102e74:	691b      	ldr	r3, [r3, #16]
 8102e76:	60fb      	str	r3, [r7, #12]


  /* ----------------------------Arbitration Lost Management----------------------------------*/
  /* CEC TX arbitration error interrupt occurred --------------------------------------*/
  if (HAL_IS_BIT_SET(itflag, CEC_FLAG_ARBLST))
 8102e78:	68fb      	ldr	r3, [r7, #12]
 8102e7a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8102e7e:	2b00      	cmp	r3, #0
 8102e80:	d00a      	beq.n	8102e98 <HAL_CEC_IRQHandler+0x30>
  {
    hcec->ErrorCode = HAL_CEC_ERROR_ARBLST;
 8102e82:	687b      	ldr	r3, [r7, #4]
 8102e84:	2280      	movs	r2, #128	; 0x80
 8102e86:	641a      	str	r2, [r3, #64]	; 0x40
    __HAL_CEC_CLEAR_FLAG(hcec, CEC_FLAG_ARBLST);
 8102e88:	687b      	ldr	r3, [r7, #4]
 8102e8a:	681b      	ldr	r3, [r3, #0]
 8102e8c:	691a      	ldr	r2, [r3, #16]
 8102e8e:	687b      	ldr	r3, [r7, #4]
 8102e90:	681b      	ldr	r3, [r3, #0]
 8102e92:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8102e96:	611a      	str	r2, [r3, #16]
  }

  /* ----------------------------Rx Management----------------------------------*/
  /* CEC RX byte received interrupt  ---------------------------------------------------*/
  if (HAL_IS_BIT_SET(itflag, CEC_FLAG_RXBR))
 8102e98:	68fb      	ldr	r3, [r7, #12]
 8102e9a:	f003 0301 	and.w	r3, r3, #1
 8102e9e:	2b00      	cmp	r3, #0
 8102ea0:	d01c      	beq.n	8102edc <HAL_CEC_IRQHandler+0x74>
  {
    /* reception is starting */
    hcec->RxState = HAL_CEC_STATE_BUSY_RX;
 8102ea2:	687b      	ldr	r3, [r7, #4]
 8102ea4:	2222      	movs	r2, #34	; 0x22
 8102ea6:	63da      	str	r2, [r3, #60]	; 0x3c
    hcec->RxXferSize++;
 8102ea8:	687b      	ldr	r3, [r7, #4]
 8102eaa:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8102eac:	3301      	adds	r3, #1
 8102eae:	b29a      	uxth	r2, r3
 8102eb0:	687b      	ldr	r3, [r7, #4]
 8102eb2:	865a      	strh	r2, [r3, #50]	; 0x32
    /* read received byte */
    *hcec->Init.RxBuffer = (uint8_t) hcec->Instance->RXDR;
 8102eb4:	687b      	ldr	r3, [r7, #4]
 8102eb6:	681b      	ldr	r3, [r3, #0]
 8102eb8:	68da      	ldr	r2, [r3, #12]
 8102eba:	687b      	ldr	r3, [r7, #4]
 8102ebc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8102ebe:	b2d2      	uxtb	r2, r2
 8102ec0:	701a      	strb	r2, [r3, #0]
    hcec->Init.RxBuffer++;
 8102ec2:	687b      	ldr	r3, [r7, #4]
 8102ec4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8102ec6:	1c5a      	adds	r2, r3, #1
 8102ec8:	687b      	ldr	r3, [r7, #4]
 8102eca:	629a      	str	r2, [r3, #40]	; 0x28
    __HAL_CEC_CLEAR_FLAG(hcec, CEC_FLAG_RXBR);
 8102ecc:	687b      	ldr	r3, [r7, #4]
 8102ece:	681b      	ldr	r3, [r3, #0]
 8102ed0:	691a      	ldr	r2, [r3, #16]
 8102ed2:	687b      	ldr	r3, [r7, #4]
 8102ed4:	681b      	ldr	r3, [r3, #0]
 8102ed6:	f042 0201 	orr.w	r2, r2, #1
 8102eda:	611a      	str	r2, [r3, #16]
  }

  /* CEC RX end received interrupt  ---------------------------------------------------*/
  if (HAL_IS_BIT_SET(itflag, CEC_FLAG_RXEND))
 8102edc:	68fb      	ldr	r3, [r7, #12]
 8102ede:	f003 0302 	and.w	r3, r3, #2
 8102ee2:	2b00      	cmp	r3, #0
 8102ee4:	d01e      	beq.n	8102f24 <HAL_CEC_IRQHandler+0xbc>
  {
    /* clear IT */
    __HAL_CEC_CLEAR_FLAG(hcec, CEC_FLAG_RXEND);
 8102ee6:	687b      	ldr	r3, [r7, #4]
 8102ee8:	681b      	ldr	r3, [r3, #0]
 8102eea:	691a      	ldr	r2, [r3, #16]
 8102eec:	687b      	ldr	r3, [r7, #4]
 8102eee:	681b      	ldr	r3, [r3, #0]
 8102ef0:	f042 0202 	orr.w	r2, r2, #2
 8102ef4:	611a      	str	r2, [r3, #16]

    /* Rx process is completed, restore hcec->RxState to Ready */
    hcec->RxState = HAL_CEC_STATE_READY;
 8102ef6:	687b      	ldr	r3, [r7, #4]
 8102ef8:	2220      	movs	r2, #32
 8102efa:	63da      	str	r2, [r3, #60]	; 0x3c
    hcec->ErrorCode = HAL_CEC_ERROR_NONE;
 8102efc:	687b      	ldr	r3, [r7, #4]
 8102efe:	2200      	movs	r2, #0
 8102f00:	641a      	str	r2, [r3, #64]	; 0x40
    hcec->Init.RxBuffer -= hcec->RxXferSize;
 8102f02:	687b      	ldr	r3, [r7, #4]
 8102f04:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8102f06:	687b      	ldr	r3, [r7, #4]
 8102f08:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8102f0a:	425b      	negs	r3, r3
 8102f0c:	441a      	add	r2, r3
 8102f0e:	687b      	ldr	r3, [r7, #4]
 8102f10:	629a      	str	r2, [r3, #40]	; 0x28
#if (USE_HAL_CEC_REGISTER_CALLBACKS == 1U)
    hcec->RxCpltCallback(hcec, hcec->RxXferSize);
#else
    HAL_CEC_RxCpltCallback(hcec, hcec->RxXferSize);
 8102f12:	687b      	ldr	r3, [r7, #4]
 8102f14:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8102f16:	4619      	mov	r1, r3
 8102f18:	6878      	ldr	r0, [r7, #4]
 8102f1a:	f000 f88c 	bl	8103036 <HAL_CEC_RxCpltCallback>
#endif /* USE_HAL_CEC_REGISTER_CALLBACKS */
    hcec->RxXferSize = 0U;
 8102f1e:	687b      	ldr	r3, [r7, #4]
 8102f20:	2200      	movs	r2, #0
 8102f22:	865a      	strh	r2, [r3, #50]	; 0x32
  }

  /* ----------------------------Tx Management----------------------------------*/
  /* CEC TX byte request interrupt ------------------------------------------------*/
  if (HAL_IS_BIT_SET(itflag, CEC_FLAG_TXBR))
 8102f24:	68fb      	ldr	r3, [r7, #12]
 8102f26:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8102f2a:	2b00      	cmp	r3, #0
 8102f2c:	d024      	beq.n	8102f78 <HAL_CEC_IRQHandler+0x110>
  {
    --hcec->TxXferCount;
 8102f2e:	687b      	ldr	r3, [r7, #4]
 8102f30:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
 8102f32:	3b01      	subs	r3, #1
 8102f34:	b29a      	uxth	r2, r3
 8102f36:	687b      	ldr	r3, [r7, #4]
 8102f38:	861a      	strh	r2, [r3, #48]	; 0x30
    if (hcec->TxXferCount == 0U)
 8102f3a:	687b      	ldr	r3, [r7, #4]
 8102f3c:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
 8102f3e:	2b00      	cmp	r3, #0
 8102f40:	d107      	bne.n	8102f52 <HAL_CEC_IRQHandler+0xea>
    {
      /* if this is the last byte transmission, set TX End of Message (TXEOM) bit */
      __HAL_CEC_LAST_BYTE_TX_SET(hcec);
 8102f42:	687b      	ldr	r3, [r7, #4]
 8102f44:	681b      	ldr	r3, [r3, #0]
 8102f46:	681a      	ldr	r2, [r3, #0]
 8102f48:	687b      	ldr	r3, [r7, #4]
 8102f4a:	681b      	ldr	r3, [r3, #0]
 8102f4c:	f042 0204 	orr.w	r2, r2, #4
 8102f50:	601a      	str	r2, [r3, #0]
    }
    /* In all cases transmit the byte */
    hcec->Instance->TXDR = (uint8_t)*hcec->pTxBuffPtr;
 8102f52:	687b      	ldr	r3, [r7, #4]
 8102f54:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8102f56:	781a      	ldrb	r2, [r3, #0]
 8102f58:	687b      	ldr	r3, [r7, #4]
 8102f5a:	681b      	ldr	r3, [r3, #0]
 8102f5c:	609a      	str	r2, [r3, #8]
    hcec->pTxBuffPtr++;
 8102f5e:	687b      	ldr	r3, [r7, #4]
 8102f60:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8102f62:	1c5a      	adds	r2, r3, #1
 8102f64:	687b      	ldr	r3, [r7, #4]
 8102f66:	62da      	str	r2, [r3, #44]	; 0x2c
    /* clear Tx-Byte request flag */
    __HAL_CEC_CLEAR_FLAG(hcec, CEC_FLAG_TXBR);
 8102f68:	687b      	ldr	r3, [r7, #4]
 8102f6a:	681b      	ldr	r3, [r3, #0]
 8102f6c:	691a      	ldr	r2, [r3, #16]
 8102f6e:	687b      	ldr	r3, [r7, #4]
 8102f70:	681b      	ldr	r3, [r3, #0]
 8102f72:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8102f76:	611a      	str	r2, [r3, #16]
  }

  /* CEC TX end interrupt ------------------------------------------------*/
  if (HAL_IS_BIT_SET(itflag, CEC_FLAG_TXEND))
 8102f78:	68fb      	ldr	r3, [r7, #12]
 8102f7a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8102f7e:	2b00      	cmp	r3, #0
 8102f80:	d014      	beq.n	8102fac <HAL_CEC_IRQHandler+0x144>
  {
    __HAL_CEC_CLEAR_FLAG(hcec, CEC_FLAG_TXEND);
 8102f82:	687b      	ldr	r3, [r7, #4]
 8102f84:	681b      	ldr	r3, [r3, #0]
 8102f86:	691a      	ldr	r2, [r3, #16]
 8102f88:	687b      	ldr	r3, [r7, #4]
 8102f8a:	681b      	ldr	r3, [r3, #0]
 8102f8c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8102f90:	611a      	str	r2, [r3, #16]

    /* Tx process is ended, restore hcec->gState to Ready */
    hcec->gState = HAL_CEC_STATE_READY;
 8102f92:	687b      	ldr	r3, [r7, #4]
 8102f94:	2220      	movs	r2, #32
 8102f96:	639a      	str	r2, [r3, #56]	; 0x38
    /* Call the Process Unlocked before calling the Tx call back API to give the possibility to
    start again the Transmission under the Tx call back API */
    __HAL_UNLOCK(hcec);
 8102f98:	687b      	ldr	r3, [r7, #4]
 8102f9a:	2200      	movs	r2, #0
 8102f9c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hcec->ErrorCode = HAL_CEC_ERROR_NONE;
 8102fa0:	687b      	ldr	r3, [r7, #4]
 8102fa2:	2200      	movs	r2, #0
 8102fa4:	641a      	str	r2, [r3, #64]	; 0x40
#if (USE_HAL_CEC_REGISTER_CALLBACKS == 1U)
    hcec->TxCpltCallback(hcec);
#else
    HAL_CEC_TxCpltCallback(hcec);
 8102fa6:	6878      	ldr	r0, [r7, #4]
 8102fa8:	f000 f83b 	bl	8103022 <HAL_CEC_TxCpltCallback>
#endif /* USE_HAL_CEC_REGISTER_CALLBACKS */
  }

  /* ----------------------------Rx/Tx Error Management----------------------------------*/
  if ((itflag & (CEC_ISR_RXOVR | CEC_ISR_BRE | CEC_ISR_SBPE | CEC_ISR_LBPE | CEC_ISR_RXACKE | CEC_ISR_TXUDR |
 8102fac:	68fa      	ldr	r2, [r7, #12]
 8102fae:	f641 437c 	movw	r3, #7292	; 0x1c7c
 8102fb2:	4013      	ands	r3, r2
 8102fb4:	2b00      	cmp	r3, #0
 8102fb6:	d030      	beq.n	810301a <HAL_CEC_IRQHandler+0x1b2>
              CEC_ISR_TXERR | CEC_ISR_TXACKE)) != 0U)
  {
    hcec->ErrorCode = itflag;
 8102fb8:	687b      	ldr	r3, [r7, #4]
 8102fba:	68fa      	ldr	r2, [r7, #12]
 8102fbc:	641a      	str	r2, [r3, #64]	; 0x40
    __HAL_CEC_CLEAR_FLAG(hcec, HAL_CEC_ERROR_RXOVR | HAL_CEC_ERROR_BRE | CEC_FLAG_LBPE | CEC_FLAG_SBPE |
 8102fbe:	687b      	ldr	r3, [r7, #4]
 8102fc0:	681b      	ldr	r3, [r3, #0]
 8102fc2:	691b      	ldr	r3, [r3, #16]
 8102fc4:	687a      	ldr	r2, [r7, #4]
 8102fc6:	6812      	ldr	r2, [r2, #0]
 8102fc8:	f443 53e3 	orr.w	r3, r3, #7264	; 0x1c60
 8102fcc:	f043 031c 	orr.w	r3, r3, #28
 8102fd0:	6113      	str	r3, [r2, #16]
                         HAL_CEC_ERROR_RXACKE | HAL_CEC_ERROR_TXUDR | HAL_CEC_ERROR_TXERR | HAL_CEC_ERROR_TXACKE);


    if ((itflag & (CEC_ISR_RXOVR | CEC_ISR_BRE | CEC_ISR_SBPE | CEC_ISR_LBPE | CEC_ISR_RXACKE)) != 0U)
 8102fd2:	68fb      	ldr	r3, [r7, #12]
 8102fd4:	f003 037c 	and.w	r3, r3, #124	; 0x7c
 8102fd8:	2b00      	cmp	r3, #0
 8102fda:	d00e      	beq.n	8102ffa <HAL_CEC_IRQHandler+0x192>
    {
      hcec->Init.RxBuffer -= hcec->RxXferSize;
 8102fdc:	687b      	ldr	r3, [r7, #4]
 8102fde:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8102fe0:	687b      	ldr	r3, [r7, #4]
 8102fe2:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8102fe4:	425b      	negs	r3, r3
 8102fe6:	441a      	add	r2, r3
 8102fe8:	687b      	ldr	r3, [r7, #4]
 8102fea:	629a      	str	r2, [r3, #40]	; 0x28
      hcec->RxXferSize = 0U;
 8102fec:	687b      	ldr	r3, [r7, #4]
 8102fee:	2200      	movs	r2, #0
 8102ff0:	865a      	strh	r2, [r3, #50]	; 0x32
      hcec->RxState = HAL_CEC_STATE_READY;
 8102ff2:	687b      	ldr	r3, [r7, #4]
 8102ff4:	2220      	movs	r2, #32
 8102ff6:	63da      	str	r2, [r3, #60]	; 0x3c
 8102ff8:	e00c      	b.n	8103014 <HAL_CEC_IRQHandler+0x1ac>
    }
    else if (((itflag & CEC_ISR_ARBLST) == 0U) && ((itflag & (CEC_ISR_TXUDR | CEC_ISR_TXERR | CEC_ISR_TXACKE)) != 0U))
 8102ffa:	68fb      	ldr	r3, [r7, #12]
 8102ffc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8103000:	2b00      	cmp	r3, #0
 8103002:	d107      	bne.n	8103014 <HAL_CEC_IRQHandler+0x1ac>
 8103004:	68fb      	ldr	r3, [r7, #12]
 8103006:	f403 53e0 	and.w	r3, r3, #7168	; 0x1c00
 810300a:	2b00      	cmp	r3, #0
 810300c:	d002      	beq.n	8103014 <HAL_CEC_IRQHandler+0x1ac>
    {
      /* Set the CEC state ready to be able to start again the process */
      hcec->gState = HAL_CEC_STATE_READY;
 810300e:	687b      	ldr	r3, [r7, #4]
 8103010:	2220      	movs	r2, #32
 8103012:	639a      	str	r2, [r3, #56]	; 0x38
    }
#if (USE_HAL_CEC_REGISTER_CALLBACKS == 1U)
    hcec->ErrorCallback(hcec);
#else
    /* Error  Call Back */
    HAL_CEC_ErrorCallback(hcec);
 8103014:	6878      	ldr	r0, [r7, #4]
 8103016:	f000 f819 	bl	810304c <HAL_CEC_ErrorCallback>
  }
  else
  {
    /* Nothing todo*/
  }
}
 810301a:	bf00      	nop
 810301c:	3710      	adds	r7, #16
 810301e:	46bd      	mov	sp, r7
 8103020:	bd80      	pop	{r7, pc}

08103022 <HAL_CEC_TxCpltCallback>:
  * @brief Tx Transfer completed callback
  * @param hcec CEC handle
  * @retval None
  */
__weak void HAL_CEC_TxCpltCallback(CEC_HandleTypeDef *hcec)
{
 8103022:	b480      	push	{r7}
 8103024:	b083      	sub	sp, #12
 8103026:	af00      	add	r7, sp, #0
 8103028:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hcec);
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_CEC_TxCpltCallback can be implemented in the user file
   */
}
 810302a:	bf00      	nop
 810302c:	370c      	adds	r7, #12
 810302e:	46bd      	mov	sp, r7
 8103030:	f85d 7b04 	ldr.w	r7, [sp], #4
 8103034:	4770      	bx	lr

08103036 <HAL_CEC_RxCpltCallback>:
  * @param hcec CEC handle
  * @param RxFrameSize Size of frame
  * @retval None
  */
__weak void HAL_CEC_RxCpltCallback(CEC_HandleTypeDef *hcec, uint32_t RxFrameSize)
{
 8103036:	b480      	push	{r7}
 8103038:	b083      	sub	sp, #12
 810303a:	af00      	add	r7, sp, #0
 810303c:	6078      	str	r0, [r7, #4]
 810303e:	6039      	str	r1, [r7, #0]
  UNUSED(hcec);
  UNUSED(RxFrameSize);
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_CEC_RxCpltCallback can be implemented in the user file
   */
}
 8103040:	bf00      	nop
 8103042:	370c      	adds	r7, #12
 8103044:	46bd      	mov	sp, r7
 8103046:	f85d 7b04 	ldr.w	r7, [sp], #4
 810304a:	4770      	bx	lr

0810304c <HAL_CEC_ErrorCallback>:
  * @brief CEC error callbacks
  * @param hcec CEC handle
  * @retval None
  */
__weak void HAL_CEC_ErrorCallback(CEC_HandleTypeDef *hcec)
{
 810304c:	b480      	push	{r7}
 810304e:	b083      	sub	sp, #12
 8103050:	af00      	add	r7, sp, #0
 8103052:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hcec);
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_CEC_ErrorCallback can be implemented in the user file
   */
}
 8103054:	bf00      	nop
 8103056:	370c      	adds	r7, #12
 8103058:	46bd      	mov	sp, r7
 810305a:	f85d 7b04 	ldr.w	r7, [sp], #4
 810305e:	4770      	bx	lr

08103060 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8103060:	b480      	push	{r7}
 8103062:	b085      	sub	sp, #20
 8103064:	af00      	add	r7, sp, #0
 8103066:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8103068:	687b      	ldr	r3, [r7, #4]
 810306a:	f003 0307 	and.w	r3, r3, #7
 810306e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8103070:	4b0c      	ldr	r3, [pc, #48]	; (81030a4 <__NVIC_SetPriorityGrouping+0x44>)
 8103072:	68db      	ldr	r3, [r3, #12]
 8103074:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8103076:	68ba      	ldr	r2, [r7, #8]
 8103078:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 810307c:	4013      	ands	r3, r2
 810307e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8103080:	68fb      	ldr	r3, [r7, #12]
 8103082:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8103084:	68bb      	ldr	r3, [r7, #8]
 8103086:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8103088:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 810308c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8103090:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8103092:	4a04      	ldr	r2, [pc, #16]	; (81030a4 <__NVIC_SetPriorityGrouping+0x44>)
 8103094:	68bb      	ldr	r3, [r7, #8]
 8103096:	60d3      	str	r3, [r2, #12]
}
 8103098:	bf00      	nop
 810309a:	3714      	adds	r7, #20
 810309c:	46bd      	mov	sp, r7
 810309e:	f85d 7b04 	ldr.w	r7, [sp], #4
 81030a2:	4770      	bx	lr
 81030a4:	e000ed00 	.word	0xe000ed00

081030a8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 81030a8:	b480      	push	{r7}
 81030aa:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 81030ac:	4b04      	ldr	r3, [pc, #16]	; (81030c0 <__NVIC_GetPriorityGrouping+0x18>)
 81030ae:	68db      	ldr	r3, [r3, #12]
 81030b0:	0a1b      	lsrs	r3, r3, #8
 81030b2:	f003 0307 	and.w	r3, r3, #7
}
 81030b6:	4618      	mov	r0, r3
 81030b8:	46bd      	mov	sp, r7
 81030ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 81030be:	4770      	bx	lr
 81030c0:	e000ed00 	.word	0xe000ed00

081030c4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 81030c4:	b480      	push	{r7}
 81030c6:	b083      	sub	sp, #12
 81030c8:	af00      	add	r7, sp, #0
 81030ca:	4603      	mov	r3, r0
 81030cc:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 81030ce:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 81030d2:	2b00      	cmp	r3, #0
 81030d4:	db0b      	blt.n	81030ee <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 81030d6:	88fb      	ldrh	r3, [r7, #6]
 81030d8:	f003 021f 	and.w	r2, r3, #31
 81030dc:	4907      	ldr	r1, [pc, #28]	; (81030fc <__NVIC_EnableIRQ+0x38>)
 81030de:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 81030e2:	095b      	lsrs	r3, r3, #5
 81030e4:	2001      	movs	r0, #1
 81030e6:	fa00 f202 	lsl.w	r2, r0, r2
 81030ea:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 81030ee:	bf00      	nop
 81030f0:	370c      	adds	r7, #12
 81030f2:	46bd      	mov	sp, r7
 81030f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 81030f8:	4770      	bx	lr
 81030fa:	bf00      	nop
 81030fc:	e000e100 	.word	0xe000e100

08103100 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8103100:	b480      	push	{r7}
 8103102:	b083      	sub	sp, #12
 8103104:	af00      	add	r7, sp, #0
 8103106:	4603      	mov	r3, r0
 8103108:	6039      	str	r1, [r7, #0]
 810310a:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 810310c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8103110:	2b00      	cmp	r3, #0
 8103112:	db0a      	blt.n	810312a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8103114:	683b      	ldr	r3, [r7, #0]
 8103116:	b2da      	uxtb	r2, r3
 8103118:	490c      	ldr	r1, [pc, #48]	; (810314c <__NVIC_SetPriority+0x4c>)
 810311a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 810311e:	0112      	lsls	r2, r2, #4
 8103120:	b2d2      	uxtb	r2, r2
 8103122:	440b      	add	r3, r1
 8103124:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8103128:	e00a      	b.n	8103140 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 810312a:	683b      	ldr	r3, [r7, #0]
 810312c:	b2da      	uxtb	r2, r3
 810312e:	4908      	ldr	r1, [pc, #32]	; (8103150 <__NVIC_SetPriority+0x50>)
 8103130:	88fb      	ldrh	r3, [r7, #6]
 8103132:	f003 030f 	and.w	r3, r3, #15
 8103136:	3b04      	subs	r3, #4
 8103138:	0112      	lsls	r2, r2, #4
 810313a:	b2d2      	uxtb	r2, r2
 810313c:	440b      	add	r3, r1
 810313e:	761a      	strb	r2, [r3, #24]
}
 8103140:	bf00      	nop
 8103142:	370c      	adds	r7, #12
 8103144:	46bd      	mov	sp, r7
 8103146:	f85d 7b04 	ldr.w	r7, [sp], #4
 810314a:	4770      	bx	lr
 810314c:	e000e100 	.word	0xe000e100
 8103150:	e000ed00 	.word	0xe000ed00

08103154 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8103154:	b480      	push	{r7}
 8103156:	b089      	sub	sp, #36	; 0x24
 8103158:	af00      	add	r7, sp, #0
 810315a:	60f8      	str	r0, [r7, #12]
 810315c:	60b9      	str	r1, [r7, #8]
 810315e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8103160:	68fb      	ldr	r3, [r7, #12]
 8103162:	f003 0307 	and.w	r3, r3, #7
 8103166:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8103168:	69fb      	ldr	r3, [r7, #28]
 810316a:	f1c3 0307 	rsb	r3, r3, #7
 810316e:	2b04      	cmp	r3, #4
 8103170:	bf28      	it	cs
 8103172:	2304      	movcs	r3, #4
 8103174:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8103176:	69fb      	ldr	r3, [r7, #28]
 8103178:	3304      	adds	r3, #4
 810317a:	2b06      	cmp	r3, #6
 810317c:	d902      	bls.n	8103184 <NVIC_EncodePriority+0x30>
 810317e:	69fb      	ldr	r3, [r7, #28]
 8103180:	3b03      	subs	r3, #3
 8103182:	e000      	b.n	8103186 <NVIC_EncodePriority+0x32>
 8103184:	2300      	movs	r3, #0
 8103186:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8103188:	f04f 32ff 	mov.w	r2, #4294967295
 810318c:	69bb      	ldr	r3, [r7, #24]
 810318e:	fa02 f303 	lsl.w	r3, r2, r3
 8103192:	43da      	mvns	r2, r3
 8103194:	68bb      	ldr	r3, [r7, #8]
 8103196:	401a      	ands	r2, r3
 8103198:	697b      	ldr	r3, [r7, #20]
 810319a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 810319c:	f04f 31ff 	mov.w	r1, #4294967295
 81031a0:	697b      	ldr	r3, [r7, #20]
 81031a2:	fa01 f303 	lsl.w	r3, r1, r3
 81031a6:	43d9      	mvns	r1, r3
 81031a8:	687b      	ldr	r3, [r7, #4]
 81031aa:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 81031ac:	4313      	orrs	r3, r2
         );
}
 81031ae:	4618      	mov	r0, r3
 81031b0:	3724      	adds	r7, #36	; 0x24
 81031b2:	46bd      	mov	sp, r7
 81031b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 81031b8:	4770      	bx	lr
	...

081031bc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 81031bc:	b580      	push	{r7, lr}
 81031be:	b082      	sub	sp, #8
 81031c0:	af00      	add	r7, sp, #0
 81031c2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 81031c4:	687b      	ldr	r3, [r7, #4]
 81031c6:	3b01      	subs	r3, #1
 81031c8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 81031cc:	d301      	bcc.n	81031d2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 81031ce:	2301      	movs	r3, #1
 81031d0:	e00f      	b.n	81031f2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 81031d2:	4a0a      	ldr	r2, [pc, #40]	; (81031fc <SysTick_Config+0x40>)
 81031d4:	687b      	ldr	r3, [r7, #4]
 81031d6:	3b01      	subs	r3, #1
 81031d8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 81031da:	210f      	movs	r1, #15
 81031dc:	f04f 30ff 	mov.w	r0, #4294967295
 81031e0:	f7ff ff8e 	bl	8103100 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 81031e4:	4b05      	ldr	r3, [pc, #20]	; (81031fc <SysTick_Config+0x40>)
 81031e6:	2200      	movs	r2, #0
 81031e8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 81031ea:	4b04      	ldr	r3, [pc, #16]	; (81031fc <SysTick_Config+0x40>)
 81031ec:	2207      	movs	r2, #7
 81031ee:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 81031f0:	2300      	movs	r3, #0
}
 81031f2:	4618      	mov	r0, r3
 81031f4:	3708      	adds	r7, #8
 81031f6:	46bd      	mov	sp, r7
 81031f8:	bd80      	pop	{r7, pc}
 81031fa:	bf00      	nop
 81031fc:	e000e010 	.word	0xe000e010

08103200 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8103200:	b580      	push	{r7, lr}
 8103202:	b082      	sub	sp, #8
 8103204:	af00      	add	r7, sp, #0
 8103206:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8103208:	6878      	ldr	r0, [r7, #4]
 810320a:	f7ff ff29 	bl	8103060 <__NVIC_SetPriorityGrouping>
}
 810320e:	bf00      	nop
 8103210:	3708      	adds	r7, #8
 8103212:	46bd      	mov	sp, r7
 8103214:	bd80      	pop	{r7, pc}

08103216 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8103216:	b580      	push	{r7, lr}
 8103218:	b086      	sub	sp, #24
 810321a:	af00      	add	r7, sp, #0
 810321c:	4603      	mov	r3, r0
 810321e:	60b9      	str	r1, [r7, #8]
 8103220:	607a      	str	r2, [r7, #4]
 8103222:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8103224:	f7ff ff40 	bl	81030a8 <__NVIC_GetPriorityGrouping>
 8103228:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 810322a:	687a      	ldr	r2, [r7, #4]
 810322c:	68b9      	ldr	r1, [r7, #8]
 810322e:	6978      	ldr	r0, [r7, #20]
 8103230:	f7ff ff90 	bl	8103154 <NVIC_EncodePriority>
 8103234:	4602      	mov	r2, r0
 8103236:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 810323a:	4611      	mov	r1, r2
 810323c:	4618      	mov	r0, r3
 810323e:	f7ff ff5f 	bl	8103100 <__NVIC_SetPriority>
}
 8103242:	bf00      	nop
 8103244:	3718      	adds	r7, #24
 8103246:	46bd      	mov	sp, r7
 8103248:	bd80      	pop	{r7, pc}

0810324a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 810324a:	b580      	push	{r7, lr}
 810324c:	b082      	sub	sp, #8
 810324e:	af00      	add	r7, sp, #0
 8103250:	4603      	mov	r3, r0
 8103252:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8103254:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8103258:	4618      	mov	r0, r3
 810325a:	f7ff ff33 	bl	81030c4 <__NVIC_EnableIRQ>
}
 810325e:	bf00      	nop
 8103260:	3708      	adds	r7, #8
 8103262:	46bd      	mov	sp, r7
 8103264:	bd80      	pop	{r7, pc}

08103266 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8103266:	b580      	push	{r7, lr}
 8103268:	b082      	sub	sp, #8
 810326a:	af00      	add	r7, sp, #0
 810326c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 810326e:	6878      	ldr	r0, [r7, #4]
 8103270:	f7ff ffa4 	bl	81031bc <SysTick_Config>
 8103274:	4603      	mov	r3, r0
}
 8103276:	4618      	mov	r0, r3
 8103278:	3708      	adds	r7, #8
 810327a:	46bd      	mov	sp, r7
 810327c:	bd80      	pop	{r7, pc}
	...

08103280 <HAL_GetCurrentCPUID>:
/**
  * @brief  Returns the current CPU ID.
  * @retval CPU identifier
  */
uint32_t HAL_GetCurrentCPUID(void)
{
 8103280:	b480      	push	{r7}
 8103282:	af00      	add	r7, sp, #0
  if (((SCB->CPUID & 0x000000F0U) >> 4 )== 0x7U)
 8103284:	4b07      	ldr	r3, [pc, #28]	; (81032a4 <HAL_GetCurrentCPUID+0x24>)
 8103286:	681b      	ldr	r3, [r3, #0]
 8103288:	091b      	lsrs	r3, r3, #4
 810328a:	f003 030f 	and.w	r3, r3, #15
 810328e:	2b07      	cmp	r3, #7
 8103290:	d101      	bne.n	8103296 <HAL_GetCurrentCPUID+0x16>
  {
    return  CM7_CPUID;
 8103292:	2303      	movs	r3, #3
 8103294:	e000      	b.n	8103298 <HAL_GetCurrentCPUID+0x18>
  }
  else
  {
    return CM4_CPUID;
 8103296:	2301      	movs	r3, #1
  }
}
 8103298:	4618      	mov	r0, r3
 810329a:	46bd      	mov	sp, r7
 810329c:	f85d 7b04 	ldr.w	r7, [sp], #4
 81032a0:	4770      	bx	lr
 81032a2:	bf00      	nop
 81032a4:	e000ed00 	.word	0xe000ed00

081032a8 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 81032a8:	b480      	push	{r7}
 81032aa:	b089      	sub	sp, #36	; 0x24
 81032ac:	af00      	add	r7, sp, #0
 81032ae:	6078      	str	r0, [r7, #4]
 81032b0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 81032b2:	2300      	movs	r3, #0
 81032b4:	61fb      	str	r3, [r7, #28]
  uint32_t iocurrent;
  uint32_t temp;
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
 81032b6:	4b89      	ldr	r3, [pc, #548]	; (81034dc <HAL_GPIO_Init+0x234>)
 81032b8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 81032ba:	e194      	b.n	81035e6 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 81032bc:	683b      	ldr	r3, [r7, #0]
 81032be:	681a      	ldr	r2, [r3, #0]
 81032c0:	2101      	movs	r1, #1
 81032c2:	69fb      	ldr	r3, [r7, #28]
 81032c4:	fa01 f303 	lsl.w	r3, r1, r3
 81032c8:	4013      	ands	r3, r2
 81032ca:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 81032cc:	693b      	ldr	r3, [r7, #16]
 81032ce:	2b00      	cmp	r3, #0
 81032d0:	f000 8186 	beq.w	81035e0 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 81032d4:	683b      	ldr	r3, [r7, #0]
 81032d6:	685b      	ldr	r3, [r3, #4]
 81032d8:	f003 0303 	and.w	r3, r3, #3
 81032dc:	2b01      	cmp	r3, #1
 81032de:	d005      	beq.n	81032ec <HAL_GPIO_Init+0x44>
 81032e0:	683b      	ldr	r3, [r7, #0]
 81032e2:	685b      	ldr	r3, [r3, #4]
 81032e4:	f003 0303 	and.w	r3, r3, #3
 81032e8:	2b02      	cmp	r3, #2
 81032ea:	d130      	bne.n	810334e <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 81032ec:	687b      	ldr	r3, [r7, #4]
 81032ee:	689b      	ldr	r3, [r3, #8]
 81032f0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 81032f2:	69fb      	ldr	r3, [r7, #28]
 81032f4:	005b      	lsls	r3, r3, #1
 81032f6:	2203      	movs	r2, #3
 81032f8:	fa02 f303 	lsl.w	r3, r2, r3
 81032fc:	43db      	mvns	r3, r3
 81032fe:	69ba      	ldr	r2, [r7, #24]
 8103300:	4013      	ands	r3, r2
 8103302:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8103304:	683b      	ldr	r3, [r7, #0]
 8103306:	68da      	ldr	r2, [r3, #12]
 8103308:	69fb      	ldr	r3, [r7, #28]
 810330a:	005b      	lsls	r3, r3, #1
 810330c:	fa02 f303 	lsl.w	r3, r2, r3
 8103310:	69ba      	ldr	r2, [r7, #24]
 8103312:	4313      	orrs	r3, r2
 8103314:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8103316:	687b      	ldr	r3, [r7, #4]
 8103318:	69ba      	ldr	r2, [r7, #24]
 810331a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 810331c:	687b      	ldr	r3, [r7, #4]
 810331e:	685b      	ldr	r3, [r3, #4]
 8103320:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8103322:	2201      	movs	r2, #1
 8103324:	69fb      	ldr	r3, [r7, #28]
 8103326:	fa02 f303 	lsl.w	r3, r2, r3
 810332a:	43db      	mvns	r3, r3
 810332c:	69ba      	ldr	r2, [r7, #24]
 810332e:	4013      	ands	r3, r2
 8103330:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8103332:	683b      	ldr	r3, [r7, #0]
 8103334:	685b      	ldr	r3, [r3, #4]
 8103336:	091b      	lsrs	r3, r3, #4
 8103338:	f003 0201 	and.w	r2, r3, #1
 810333c:	69fb      	ldr	r3, [r7, #28]
 810333e:	fa02 f303 	lsl.w	r3, r2, r3
 8103342:	69ba      	ldr	r2, [r7, #24]
 8103344:	4313      	orrs	r3, r2
 8103346:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8103348:	687b      	ldr	r3, [r7, #4]
 810334a:	69ba      	ldr	r2, [r7, #24]
 810334c:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 810334e:	683b      	ldr	r3, [r7, #0]
 8103350:	685b      	ldr	r3, [r3, #4]
 8103352:	f003 0303 	and.w	r3, r3, #3
 8103356:	2b03      	cmp	r3, #3
 8103358:	d017      	beq.n	810338a <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 810335a:	687b      	ldr	r3, [r7, #4]
 810335c:	68db      	ldr	r3, [r3, #12]
 810335e:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8103360:	69fb      	ldr	r3, [r7, #28]
 8103362:	005b      	lsls	r3, r3, #1
 8103364:	2203      	movs	r2, #3
 8103366:	fa02 f303 	lsl.w	r3, r2, r3
 810336a:	43db      	mvns	r3, r3
 810336c:	69ba      	ldr	r2, [r7, #24]
 810336e:	4013      	ands	r3, r2
 8103370:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8103372:	683b      	ldr	r3, [r7, #0]
 8103374:	689a      	ldr	r2, [r3, #8]
 8103376:	69fb      	ldr	r3, [r7, #28]
 8103378:	005b      	lsls	r3, r3, #1
 810337a:	fa02 f303 	lsl.w	r3, r2, r3
 810337e:	69ba      	ldr	r2, [r7, #24]
 8103380:	4313      	orrs	r3, r2
 8103382:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8103384:	687b      	ldr	r3, [r7, #4]
 8103386:	69ba      	ldr	r2, [r7, #24]
 8103388:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 810338a:	683b      	ldr	r3, [r7, #0]
 810338c:	685b      	ldr	r3, [r3, #4]
 810338e:	f003 0303 	and.w	r3, r3, #3
 8103392:	2b02      	cmp	r3, #2
 8103394:	d123      	bne.n	81033de <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8103396:	69fb      	ldr	r3, [r7, #28]
 8103398:	08da      	lsrs	r2, r3, #3
 810339a:	687b      	ldr	r3, [r7, #4]
 810339c:	3208      	adds	r2, #8
 810339e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 81033a2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 81033a4:	69fb      	ldr	r3, [r7, #28]
 81033a6:	f003 0307 	and.w	r3, r3, #7
 81033aa:	009b      	lsls	r3, r3, #2
 81033ac:	220f      	movs	r2, #15
 81033ae:	fa02 f303 	lsl.w	r3, r2, r3
 81033b2:	43db      	mvns	r3, r3
 81033b4:	69ba      	ldr	r2, [r7, #24]
 81033b6:	4013      	ands	r3, r2
 81033b8:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 81033ba:	683b      	ldr	r3, [r7, #0]
 81033bc:	691a      	ldr	r2, [r3, #16]
 81033be:	69fb      	ldr	r3, [r7, #28]
 81033c0:	f003 0307 	and.w	r3, r3, #7
 81033c4:	009b      	lsls	r3, r3, #2
 81033c6:	fa02 f303 	lsl.w	r3, r2, r3
 81033ca:	69ba      	ldr	r2, [r7, #24]
 81033cc:	4313      	orrs	r3, r2
 81033ce:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 81033d0:	69fb      	ldr	r3, [r7, #28]
 81033d2:	08da      	lsrs	r2, r3, #3
 81033d4:	687b      	ldr	r3, [r7, #4]
 81033d6:	3208      	adds	r2, #8
 81033d8:	69b9      	ldr	r1, [r7, #24]
 81033da:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 81033de:	687b      	ldr	r3, [r7, #4]
 81033e0:	681b      	ldr	r3, [r3, #0]
 81033e2:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 81033e4:	69fb      	ldr	r3, [r7, #28]
 81033e6:	005b      	lsls	r3, r3, #1
 81033e8:	2203      	movs	r2, #3
 81033ea:	fa02 f303 	lsl.w	r3, r2, r3
 81033ee:	43db      	mvns	r3, r3
 81033f0:	69ba      	ldr	r2, [r7, #24]
 81033f2:	4013      	ands	r3, r2
 81033f4:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 81033f6:	683b      	ldr	r3, [r7, #0]
 81033f8:	685b      	ldr	r3, [r3, #4]
 81033fa:	f003 0203 	and.w	r2, r3, #3
 81033fe:	69fb      	ldr	r3, [r7, #28]
 8103400:	005b      	lsls	r3, r3, #1
 8103402:	fa02 f303 	lsl.w	r3, r2, r3
 8103406:	69ba      	ldr	r2, [r7, #24]
 8103408:	4313      	orrs	r3, r2
 810340a:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 810340c:	687b      	ldr	r3, [r7, #4]
 810340e:	69ba      	ldr	r2, [r7, #24]
 8103410:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8103412:	683b      	ldr	r3, [r7, #0]
 8103414:	685b      	ldr	r3, [r3, #4]
 8103416:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 810341a:	2b00      	cmp	r3, #0
 810341c:	f000 80e0 	beq.w	81035e0 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8103420:	4b2f      	ldr	r3, [pc, #188]	; (81034e0 <HAL_GPIO_Init+0x238>)
 8103422:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8103426:	4a2e      	ldr	r2, [pc, #184]	; (81034e0 <HAL_GPIO_Init+0x238>)
 8103428:	f043 0302 	orr.w	r3, r3, #2
 810342c:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8103430:	4b2b      	ldr	r3, [pc, #172]	; (81034e0 <HAL_GPIO_Init+0x238>)
 8103432:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8103436:	f003 0302 	and.w	r3, r3, #2
 810343a:	60fb      	str	r3, [r7, #12]
 810343c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 810343e:	4a29      	ldr	r2, [pc, #164]	; (81034e4 <HAL_GPIO_Init+0x23c>)
 8103440:	69fb      	ldr	r3, [r7, #28]
 8103442:	089b      	lsrs	r3, r3, #2
 8103444:	3302      	adds	r3, #2
 8103446:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 810344a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 810344c:	69fb      	ldr	r3, [r7, #28]
 810344e:	f003 0303 	and.w	r3, r3, #3
 8103452:	009b      	lsls	r3, r3, #2
 8103454:	220f      	movs	r2, #15
 8103456:	fa02 f303 	lsl.w	r3, r2, r3
 810345a:	43db      	mvns	r3, r3
 810345c:	69ba      	ldr	r2, [r7, #24]
 810345e:	4013      	ands	r3, r2
 8103460:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8103462:	687b      	ldr	r3, [r7, #4]
 8103464:	4a20      	ldr	r2, [pc, #128]	; (81034e8 <HAL_GPIO_Init+0x240>)
 8103466:	4293      	cmp	r3, r2
 8103468:	d052      	beq.n	8103510 <HAL_GPIO_Init+0x268>
 810346a:	687b      	ldr	r3, [r7, #4]
 810346c:	4a1f      	ldr	r2, [pc, #124]	; (81034ec <HAL_GPIO_Init+0x244>)
 810346e:	4293      	cmp	r3, r2
 8103470:	d031      	beq.n	81034d6 <HAL_GPIO_Init+0x22e>
 8103472:	687b      	ldr	r3, [r7, #4]
 8103474:	4a1e      	ldr	r2, [pc, #120]	; (81034f0 <HAL_GPIO_Init+0x248>)
 8103476:	4293      	cmp	r3, r2
 8103478:	d02b      	beq.n	81034d2 <HAL_GPIO_Init+0x22a>
 810347a:	687b      	ldr	r3, [r7, #4]
 810347c:	4a1d      	ldr	r2, [pc, #116]	; (81034f4 <HAL_GPIO_Init+0x24c>)
 810347e:	4293      	cmp	r3, r2
 8103480:	d025      	beq.n	81034ce <HAL_GPIO_Init+0x226>
 8103482:	687b      	ldr	r3, [r7, #4]
 8103484:	4a1c      	ldr	r2, [pc, #112]	; (81034f8 <HAL_GPIO_Init+0x250>)
 8103486:	4293      	cmp	r3, r2
 8103488:	d01f      	beq.n	81034ca <HAL_GPIO_Init+0x222>
 810348a:	687b      	ldr	r3, [r7, #4]
 810348c:	4a1b      	ldr	r2, [pc, #108]	; (81034fc <HAL_GPIO_Init+0x254>)
 810348e:	4293      	cmp	r3, r2
 8103490:	d019      	beq.n	81034c6 <HAL_GPIO_Init+0x21e>
 8103492:	687b      	ldr	r3, [r7, #4]
 8103494:	4a1a      	ldr	r2, [pc, #104]	; (8103500 <HAL_GPIO_Init+0x258>)
 8103496:	4293      	cmp	r3, r2
 8103498:	d013      	beq.n	81034c2 <HAL_GPIO_Init+0x21a>
 810349a:	687b      	ldr	r3, [r7, #4]
 810349c:	4a19      	ldr	r2, [pc, #100]	; (8103504 <HAL_GPIO_Init+0x25c>)
 810349e:	4293      	cmp	r3, r2
 81034a0:	d00d      	beq.n	81034be <HAL_GPIO_Init+0x216>
 81034a2:	687b      	ldr	r3, [r7, #4]
 81034a4:	4a18      	ldr	r2, [pc, #96]	; (8103508 <HAL_GPIO_Init+0x260>)
 81034a6:	4293      	cmp	r3, r2
 81034a8:	d007      	beq.n	81034ba <HAL_GPIO_Init+0x212>
 81034aa:	687b      	ldr	r3, [r7, #4]
 81034ac:	4a17      	ldr	r2, [pc, #92]	; (810350c <HAL_GPIO_Init+0x264>)
 81034ae:	4293      	cmp	r3, r2
 81034b0:	d101      	bne.n	81034b6 <HAL_GPIO_Init+0x20e>
 81034b2:	2309      	movs	r3, #9
 81034b4:	e02d      	b.n	8103512 <HAL_GPIO_Init+0x26a>
 81034b6:	230a      	movs	r3, #10
 81034b8:	e02b      	b.n	8103512 <HAL_GPIO_Init+0x26a>
 81034ba:	2308      	movs	r3, #8
 81034bc:	e029      	b.n	8103512 <HAL_GPIO_Init+0x26a>
 81034be:	2307      	movs	r3, #7
 81034c0:	e027      	b.n	8103512 <HAL_GPIO_Init+0x26a>
 81034c2:	2306      	movs	r3, #6
 81034c4:	e025      	b.n	8103512 <HAL_GPIO_Init+0x26a>
 81034c6:	2305      	movs	r3, #5
 81034c8:	e023      	b.n	8103512 <HAL_GPIO_Init+0x26a>
 81034ca:	2304      	movs	r3, #4
 81034cc:	e021      	b.n	8103512 <HAL_GPIO_Init+0x26a>
 81034ce:	2303      	movs	r3, #3
 81034d0:	e01f      	b.n	8103512 <HAL_GPIO_Init+0x26a>
 81034d2:	2302      	movs	r3, #2
 81034d4:	e01d      	b.n	8103512 <HAL_GPIO_Init+0x26a>
 81034d6:	2301      	movs	r3, #1
 81034d8:	e01b      	b.n	8103512 <HAL_GPIO_Init+0x26a>
 81034da:	bf00      	nop
 81034dc:	580000c0 	.word	0x580000c0
 81034e0:	58024400 	.word	0x58024400
 81034e4:	58000400 	.word	0x58000400
 81034e8:	58020000 	.word	0x58020000
 81034ec:	58020400 	.word	0x58020400
 81034f0:	58020800 	.word	0x58020800
 81034f4:	58020c00 	.word	0x58020c00
 81034f8:	58021000 	.word	0x58021000
 81034fc:	58021400 	.word	0x58021400
 8103500:	58021800 	.word	0x58021800
 8103504:	58021c00 	.word	0x58021c00
 8103508:	58022000 	.word	0x58022000
 810350c:	58022400 	.word	0x58022400
 8103510:	2300      	movs	r3, #0
 8103512:	69fa      	ldr	r2, [r7, #28]
 8103514:	f002 0203 	and.w	r2, r2, #3
 8103518:	0092      	lsls	r2, r2, #2
 810351a:	4093      	lsls	r3, r2
 810351c:	69ba      	ldr	r2, [r7, #24]
 810351e:	4313      	orrs	r3, r2
 8103520:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8103522:	4938      	ldr	r1, [pc, #224]	; (8103604 <HAL_GPIO_Init+0x35c>)
 8103524:	69fb      	ldr	r3, [r7, #28]
 8103526:	089b      	lsrs	r3, r3, #2
 8103528:	3302      	adds	r3, #2
 810352a:	69ba      	ldr	r2, [r7, #24]
 810352c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8103530:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8103534:	681b      	ldr	r3, [r3, #0]
 8103536:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8103538:	693b      	ldr	r3, [r7, #16]
 810353a:	43db      	mvns	r3, r3
 810353c:	69ba      	ldr	r2, [r7, #24]
 810353e:	4013      	ands	r3, r2
 8103540:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8103542:	683b      	ldr	r3, [r7, #0]
 8103544:	685b      	ldr	r3, [r3, #4]
 8103546:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 810354a:	2b00      	cmp	r3, #0
 810354c:	d003      	beq.n	8103556 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 810354e:	69ba      	ldr	r2, [r7, #24]
 8103550:	693b      	ldr	r3, [r7, #16]
 8103552:	4313      	orrs	r3, r2
 8103554:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8103556:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 810355a:	69bb      	ldr	r3, [r7, #24]
 810355c:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 810355e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8103562:	685b      	ldr	r3, [r3, #4]
 8103564:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8103566:	693b      	ldr	r3, [r7, #16]
 8103568:	43db      	mvns	r3, r3
 810356a:	69ba      	ldr	r2, [r7, #24]
 810356c:	4013      	ands	r3, r2
 810356e:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8103570:	683b      	ldr	r3, [r7, #0]
 8103572:	685b      	ldr	r3, [r3, #4]
 8103574:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8103578:	2b00      	cmp	r3, #0
 810357a:	d003      	beq.n	8103584 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 810357c:	69ba      	ldr	r2, [r7, #24]
 810357e:	693b      	ldr	r3, [r7, #16]
 8103580:	4313      	orrs	r3, r2
 8103582:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8103584:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8103588:	69bb      	ldr	r3, [r7, #24]
 810358a:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 810358c:	697b      	ldr	r3, [r7, #20]
 810358e:	685b      	ldr	r3, [r3, #4]
 8103590:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8103592:	693b      	ldr	r3, [r7, #16]
 8103594:	43db      	mvns	r3, r3
 8103596:	69ba      	ldr	r2, [r7, #24]
 8103598:	4013      	ands	r3, r2
 810359a:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 810359c:	683b      	ldr	r3, [r7, #0]
 810359e:	685b      	ldr	r3, [r3, #4]
 81035a0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 81035a4:	2b00      	cmp	r3, #0
 81035a6:	d003      	beq.n	81035b0 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 81035a8:	69ba      	ldr	r2, [r7, #24]
 81035aa:	693b      	ldr	r3, [r7, #16]
 81035ac:	4313      	orrs	r3, r2
 81035ae:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 81035b0:	697b      	ldr	r3, [r7, #20]
 81035b2:	69ba      	ldr	r2, [r7, #24]
 81035b4:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 81035b6:	697b      	ldr	r3, [r7, #20]
 81035b8:	681b      	ldr	r3, [r3, #0]
 81035ba:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 81035bc:	693b      	ldr	r3, [r7, #16]
 81035be:	43db      	mvns	r3, r3
 81035c0:	69ba      	ldr	r2, [r7, #24]
 81035c2:	4013      	ands	r3, r2
 81035c4:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 81035c6:	683b      	ldr	r3, [r7, #0]
 81035c8:	685b      	ldr	r3, [r3, #4]
 81035ca:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 81035ce:	2b00      	cmp	r3, #0
 81035d0:	d003      	beq.n	81035da <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 81035d2:	69ba      	ldr	r2, [r7, #24]
 81035d4:	693b      	ldr	r3, [r7, #16]
 81035d6:	4313      	orrs	r3, r2
 81035d8:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 81035da:	697b      	ldr	r3, [r7, #20]
 81035dc:	69ba      	ldr	r2, [r7, #24]
 81035de:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 81035e0:	69fb      	ldr	r3, [r7, #28]
 81035e2:	3301      	adds	r3, #1
 81035e4:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 81035e6:	683b      	ldr	r3, [r7, #0]
 81035e8:	681a      	ldr	r2, [r3, #0]
 81035ea:	69fb      	ldr	r3, [r7, #28]
 81035ec:	fa22 f303 	lsr.w	r3, r2, r3
 81035f0:	2b00      	cmp	r3, #0
 81035f2:	f47f ae63 	bne.w	81032bc <HAL_GPIO_Init+0x14>
  }
}
 81035f6:	bf00      	nop
 81035f8:	bf00      	nop
 81035fa:	3724      	adds	r7, #36	; 0x24
 81035fc:	46bd      	mov	sp, r7
 81035fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8103602:	4770      	bx	lr
 8103604:	58000400 	.word	0x58000400

08103608 <HAL_HSEM_ActivateNotification>:
  * @brief  Activate Semaphore release Notification for a given Semaphores Mask .
  * @param  SemMask: Mask of Released semaphores
  * @retval Semaphore Key
  */
void HAL_HSEM_ActivateNotification(uint32_t SemMask)
{
 8103608:	b480      	push	{r7}
 810360a:	b083      	sub	sp, #12
 810360c:	af00      	add	r7, sp, #0
 810360e:	6078      	str	r0, [r7, #4]
  {
    /*Use interrupt line 1 for CPU2 Master*/
    HSEM->C2IER |= SemMask;
  }
#else
  HSEM_COMMON->IER |= SemMask;
 8103610:	4b05      	ldr	r3, [pc, #20]	; (8103628 <HAL_HSEM_ActivateNotification+0x20>)
 8103612:	681a      	ldr	r2, [r3, #0]
 8103614:	4904      	ldr	r1, [pc, #16]	; (8103628 <HAL_HSEM_ActivateNotification+0x20>)
 8103616:	687b      	ldr	r3, [r7, #4]
 8103618:	4313      	orrs	r3, r2
 810361a:	600b      	str	r3, [r1, #0]
#endif
}
 810361c:	bf00      	nop
 810361e:	370c      	adds	r7, #12
 8103620:	46bd      	mov	sp, r7
 8103622:	f85d 7b04 	ldr.w	r7, [sp], #4
 8103626:	4770      	bx	lr
 8103628:	58026510 	.word	0x58026510

0810362c <HAL_PWREx_EnterSTOPMode>:
  *            @arg PWR_D2_DOMAIN : Enter D2 Domain to DSTOP mode.
  *            @arg PWR_D3_DOMAIN : Enter D3/SRD Domain to DSTOP mode.
  * @retval None.
  */
void HAL_PWREx_EnterSTOPMode (uint32_t Regulator, uint8_t STOPEntry, uint32_t Domain)
{
 810362c:	b580      	push	{r7, lr}
 810362e:	b084      	sub	sp, #16
 8103630:	af00      	add	r7, sp, #0
 8103632:	60f8      	str	r0, [r7, #12]
 8103634:	460b      	mov	r3, r1
 8103636:	607a      	str	r2, [r7, #4]
 8103638:	72fb      	strb	r3, [r7, #11]
  assert_param (IS_PWR_REGULATOR (Regulator));
  assert_param (IS_PWR_STOP_ENTRY (STOPEntry));
  assert_param (IS_PWR_DOMAIN (Domain));

  /* Select the regulator state in Stop mode */
  MODIFY_REG (PWR->CR1, PWR_CR1_LPDS, Regulator);
 810363a:	4b37      	ldr	r3, [pc, #220]	; (8103718 <HAL_PWREx_EnterSTOPMode+0xec>)
 810363c:	681b      	ldr	r3, [r3, #0]
 810363e:	f023 0201 	bic.w	r2, r3, #1
 8103642:	4935      	ldr	r1, [pc, #212]	; (8103718 <HAL_PWREx_EnterSTOPMode+0xec>)
 8103644:	68fb      	ldr	r3, [r7, #12]
 8103646:	4313      	orrs	r3, r2
 8103648:	600b      	str	r3, [r1, #0]

  /* Select the domain Power Down DeepSleep */
  if (Domain == PWR_D1_DOMAIN)
 810364a:	687b      	ldr	r3, [r7, #4]
 810364c:	2b00      	cmp	r3, #0
 810364e:	d123      	bne.n	8103698 <HAL_PWREx_EnterSTOPMode+0x6c>
  {
#if defined (DUAL_CORE)
    /* Check current core */
    if (HAL_GetCurrentCPUID () != CM7_CPUID)
 8103650:	f7ff fe16 	bl	8103280 <HAL_GetCurrentCPUID>
 8103654:	4603      	mov	r3, r0
 8103656:	2b03      	cmp	r3, #3
 8103658:	d158      	bne.n	810370c <HAL_PWREx_EnterSTOPMode+0xe0>
      return;
    }
#endif /* defined (DUAL_CORE) */

    /* Keep DSTOP mode when D1/CD domain enters Deepsleep */
    CLEAR_BIT (PWR->CPUCR, PWR_CPUCR_PDDS_D1);
 810365a:	4b2f      	ldr	r3, [pc, #188]	; (8103718 <HAL_PWREx_EnterSTOPMode+0xec>)
 810365c:	691b      	ldr	r3, [r3, #16]
 810365e:	4a2e      	ldr	r2, [pc, #184]	; (8103718 <HAL_PWREx_EnterSTOPMode+0xec>)
 8103660:	f023 0301 	bic.w	r3, r3, #1
 8103664:	6113      	str	r3, [r2, #16]

    /* Set SLEEPDEEP bit of Cortex System Control Register */
    SET_BIT (SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 8103666:	4b2d      	ldr	r3, [pc, #180]	; (810371c <HAL_PWREx_EnterSTOPMode+0xf0>)
 8103668:	691b      	ldr	r3, [r3, #16]
 810366a:	4a2c      	ldr	r2, [pc, #176]	; (810371c <HAL_PWREx_EnterSTOPMode+0xf0>)
 810366c:	f043 0304 	orr.w	r3, r3, #4
 8103670:	6113      	str	r3, [r2, #16]
  __ASM volatile ("dsb 0xF":::"memory");
 8103672:	f3bf 8f4f 	dsb	sy
}
 8103676:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8103678:	f3bf 8f6f 	isb	sy
}
 810367c:	bf00      	nop
    /* Ensure that all instructions are done before entering STOP mode */
    __DSB ();
    __ISB ();

    /* Select Stop mode entry */
    if (STOPEntry == PWR_STOPENTRY_WFI)
 810367e:	7afb      	ldrb	r3, [r7, #11]
 8103680:	2b01      	cmp	r3, #1
 8103682:	d101      	bne.n	8103688 <HAL_PWREx_EnterSTOPMode+0x5c>
    {
      /* Request Wait For Interrupt */
      __WFI ();
 8103684:	bf30      	wfi
 8103686:	e000      	b.n	810368a <HAL_PWREx_EnterSTOPMode+0x5e>
    }
    else
    {
      /* Request Wait For Event */
      __WFE ();
 8103688:	bf20      	wfe
    }

    /* Clear SLEEPDEEP bit of Cortex-Mx in the System Control Register */
    CLEAR_BIT (SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 810368a:	4b24      	ldr	r3, [pc, #144]	; (810371c <HAL_PWREx_EnterSTOPMode+0xf0>)
 810368c:	691b      	ldr	r3, [r3, #16]
 810368e:	4a23      	ldr	r2, [pc, #140]	; (810371c <HAL_PWREx_EnterSTOPMode+0xf0>)
 8103690:	f023 0304 	bic.w	r3, r3, #4
 8103694:	6113      	str	r3, [r2, #16]
 8103696:	e03c      	b.n	8103712 <HAL_PWREx_EnterSTOPMode+0xe6>
  }
#if defined (PWR_CPUCR_PDDS_D2)
  else if (Domain == PWR_D2_DOMAIN)
 8103698:	687b      	ldr	r3, [r7, #4]
 810369a:	2b01      	cmp	r3, #1
 810369c:	d123      	bne.n	81036e6 <HAL_PWREx_EnterSTOPMode+0xba>
  {
#if defined (DUAL_CORE)
    /* Check current core */
    if (HAL_GetCurrentCPUID () != CM4_CPUID)
 810369e:	f7ff fdef 	bl	8103280 <HAL_GetCurrentCPUID>
 81036a2:	4603      	mov	r3, r0
 81036a4:	2b01      	cmp	r3, #1
 81036a6:	d133      	bne.n	8103710 <HAL_PWREx_EnterSTOPMode+0xe4>
      */
      return;
    }

    /* Keep DSTOP mode when D2 domain enters Deepsleep */
    CLEAR_BIT (PWR->CPU2CR, PWR_CPU2CR_PDDS_D2);
 81036a8:	4b1b      	ldr	r3, [pc, #108]	; (8103718 <HAL_PWREx_EnterSTOPMode+0xec>)
 81036aa:	695b      	ldr	r3, [r3, #20]
 81036ac:	4a1a      	ldr	r2, [pc, #104]	; (8103718 <HAL_PWREx_EnterSTOPMode+0xec>)
 81036ae:	f023 0302 	bic.w	r3, r3, #2
 81036b2:	6153      	str	r3, [r2, #20]

    /* Set SLEEPDEEP bit of Cortex System Control Register */
    SET_BIT (SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 81036b4:	4b19      	ldr	r3, [pc, #100]	; (810371c <HAL_PWREx_EnterSTOPMode+0xf0>)
 81036b6:	691b      	ldr	r3, [r3, #16]
 81036b8:	4a18      	ldr	r2, [pc, #96]	; (810371c <HAL_PWREx_EnterSTOPMode+0xf0>)
 81036ba:	f043 0304 	orr.w	r3, r3, #4
 81036be:	6113      	str	r3, [r2, #16]
  __ASM volatile ("dsb 0xF":::"memory");
 81036c0:	f3bf 8f4f 	dsb	sy
}
 81036c4:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 81036c6:	f3bf 8f6f 	isb	sy
}
 81036ca:	bf00      	nop
    /* Ensure that all instructions are done before entering STOP mode */
    __DSB ();
    __ISB ();

    /* Select Stop mode entry */
    if (STOPEntry == PWR_STOPENTRY_WFI)
 81036cc:	7afb      	ldrb	r3, [r7, #11]
 81036ce:	2b01      	cmp	r3, #1
 81036d0:	d101      	bne.n	81036d6 <HAL_PWREx_EnterSTOPMode+0xaa>
    {
      /* Request Wait For Interrupt */
      __WFI ();
 81036d2:	bf30      	wfi
 81036d4:	e000      	b.n	81036d8 <HAL_PWREx_EnterSTOPMode+0xac>
    }
    else
    {
      /* Request Wait For Event */
      __WFE ();
 81036d6:	bf20      	wfe
    }

    /* Clear SLEEPDEEP bit of Cortex-Mx in the System Control Register */
    CLEAR_BIT (SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 81036d8:	4b10      	ldr	r3, [pc, #64]	; (810371c <HAL_PWREx_EnterSTOPMode+0xf0>)
 81036da:	691b      	ldr	r3, [r3, #16]
 81036dc:	4a0f      	ldr	r2, [pc, #60]	; (810371c <HAL_PWREx_EnterSTOPMode+0xf0>)
 81036de:	f023 0304 	bic.w	r3, r3, #4
 81036e2:	6113      	str	r3, [r2, #16]
 81036e4:	e015      	b.n	8103712 <HAL_PWREx_EnterSTOPMode+0xe6>
#endif /* defined (PWR_CPUCR_PDDS_D2) */
  else
  {
#if defined (DUAL_CORE)
    /* Check current core */
    if (HAL_GetCurrentCPUID () == CM7_CPUID)
 81036e6:	f7ff fdcb 	bl	8103280 <HAL_GetCurrentCPUID>
 81036ea:	4603      	mov	r3, r0
 81036ec:	2b03      	cmp	r3, #3
 81036ee:	d106      	bne.n	81036fe <HAL_PWREx_EnterSTOPMode+0xd2>
    {
      /* Keep DSTOP mode when D3 domain enters Deepsleep */
      CLEAR_BIT (PWR->CPUCR, PWR_CPUCR_PDDS_D3);
 81036f0:	4b09      	ldr	r3, [pc, #36]	; (8103718 <HAL_PWREx_EnterSTOPMode+0xec>)
 81036f2:	691b      	ldr	r3, [r3, #16]
 81036f4:	4a08      	ldr	r2, [pc, #32]	; (8103718 <HAL_PWREx_EnterSTOPMode+0xec>)
 81036f6:	f023 0304 	bic.w	r3, r3, #4
 81036fa:	6113      	str	r3, [r2, #16]
 81036fc:	e009      	b.n	8103712 <HAL_PWREx_EnterSTOPMode+0xe6>
    }
    else
    {
      /* Keep DSTOP mode when D3 domain enters Deepsleep */
      CLEAR_BIT (PWR->CPU2CR, PWR_CPU2CR_PDDS_D3);
 81036fe:	4b06      	ldr	r3, [pc, #24]	; (8103718 <HAL_PWREx_EnterSTOPMode+0xec>)
 8103700:	695b      	ldr	r3, [r3, #20]
 8103702:	4a05      	ldr	r2, [pc, #20]	; (8103718 <HAL_PWREx_EnterSTOPMode+0xec>)
 8103704:	f023 0304 	bic.w	r3, r3, #4
 8103708:	6153      	str	r3, [r2, #20]
 810370a:	e002      	b.n	8103712 <HAL_PWREx_EnterSTOPMode+0xe6>
      return;
 810370c:	bf00      	nop
 810370e:	e000      	b.n	8103712 <HAL_PWREx_EnterSTOPMode+0xe6>
      return;
 8103710:	bf00      	nop
#else
    /* Keep DSTOP mode when D3/SRD domain enters Deepsleep */
    CLEAR_BIT (PWR->CPUCR, PWR_CPUCR_PDDS_D3);
#endif  /* defined (DUAL_CORE) */
  }
}
 8103712:	3710      	adds	r7, #16
 8103714:	46bd      	mov	sp, r7
 8103716:	bd80      	pop	{r7, pc}
 8103718:	58024800 	.word	0x58024800
 810371c:	e000ed00 	.word	0xe000ed00

08103720 <HAL_PWREx_ClearPendingEvent>:
  *         enter low power mode using Wait For Event request.
  * @note   Cortex-M7 must be in CRUN mode when calling this API by Cortex-M4.
  * @retval None.
  */
void HAL_PWREx_ClearPendingEvent (void)
{
 8103720:	b580      	push	{r7, lr}
 8103722:	af00      	add	r7, sp, #0
#if defined (DUAL_CORE)
  /* Check the current Core */
  if (HAL_GetCurrentCPUID () == CM7_CPUID)
 8103724:	f7ff fdac 	bl	8103280 <HAL_GetCurrentCPUID>
 8103728:	4603      	mov	r3, r0
 810372a:	2b03      	cmp	r3, #3
 810372c:	d101      	bne.n	8103732 <HAL_PWREx_ClearPendingEvent+0x12>
  {
    __WFE ();
 810372e:	bf20      	wfe
    __WFE ();
  }
#else
  __WFE ();
#endif /* defined (DUAL_CORE) */
}
 8103730:	e001      	b.n	8103736 <HAL_PWREx_ClearPendingEvent+0x16>
    __SEV ();
 8103732:	bf40      	sev
    __WFE ();
 8103734:	bf20      	wfe
}
 8103736:	bf00      	nop
 8103738:	bd80      	pop	{r7, pc}
	...

0810373c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 810373c:	b480      	push	{r7}
 810373e:	b089      	sub	sp, #36	; 0x24
 8103740:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8103742:	4bb3      	ldr	r3, [pc, #716]	; (8103a10 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8103744:	691b      	ldr	r3, [r3, #16]
 8103746:	f003 0338 	and.w	r3, r3, #56	; 0x38
 810374a:	2b18      	cmp	r3, #24
 810374c:	f200 8155 	bhi.w	81039fa <HAL_RCC_GetSysClockFreq+0x2be>
 8103750:	a201      	add	r2, pc, #4	; (adr r2, 8103758 <HAL_RCC_GetSysClockFreq+0x1c>)
 8103752:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8103756:	bf00      	nop
 8103758:	081037bd 	.word	0x081037bd
 810375c:	081039fb 	.word	0x081039fb
 8103760:	081039fb 	.word	0x081039fb
 8103764:	081039fb 	.word	0x081039fb
 8103768:	081039fb 	.word	0x081039fb
 810376c:	081039fb 	.word	0x081039fb
 8103770:	081039fb 	.word	0x081039fb
 8103774:	081039fb 	.word	0x081039fb
 8103778:	081037e3 	.word	0x081037e3
 810377c:	081039fb 	.word	0x081039fb
 8103780:	081039fb 	.word	0x081039fb
 8103784:	081039fb 	.word	0x081039fb
 8103788:	081039fb 	.word	0x081039fb
 810378c:	081039fb 	.word	0x081039fb
 8103790:	081039fb 	.word	0x081039fb
 8103794:	081039fb 	.word	0x081039fb
 8103798:	081037e9 	.word	0x081037e9
 810379c:	081039fb 	.word	0x081039fb
 81037a0:	081039fb 	.word	0x081039fb
 81037a4:	081039fb 	.word	0x081039fb
 81037a8:	081039fb 	.word	0x081039fb
 81037ac:	081039fb 	.word	0x081039fb
 81037b0:	081039fb 	.word	0x081039fb
 81037b4:	081039fb 	.word	0x081039fb
 81037b8:	081037ef 	.word	0x081037ef
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 81037bc:	4b94      	ldr	r3, [pc, #592]	; (8103a10 <HAL_RCC_GetSysClockFreq+0x2d4>)
 81037be:	681b      	ldr	r3, [r3, #0]
 81037c0:	f003 0320 	and.w	r3, r3, #32
 81037c4:	2b00      	cmp	r3, #0
 81037c6:	d009      	beq.n	81037dc <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 81037c8:	4b91      	ldr	r3, [pc, #580]	; (8103a10 <HAL_RCC_GetSysClockFreq+0x2d4>)
 81037ca:	681b      	ldr	r3, [r3, #0]
 81037cc:	08db      	lsrs	r3, r3, #3
 81037ce:	f003 0303 	and.w	r3, r3, #3
 81037d2:	4a90      	ldr	r2, [pc, #576]	; (8103a14 <HAL_RCC_GetSysClockFreq+0x2d8>)
 81037d4:	fa22 f303 	lsr.w	r3, r2, r3
 81037d8:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 81037da:	e111      	b.n	8103a00 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 81037dc:	4b8d      	ldr	r3, [pc, #564]	; (8103a14 <HAL_RCC_GetSysClockFreq+0x2d8>)
 81037de:	61bb      	str	r3, [r7, #24]
      break;
 81037e0:	e10e      	b.n	8103a00 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 81037e2:	4b8d      	ldr	r3, [pc, #564]	; (8103a18 <HAL_RCC_GetSysClockFreq+0x2dc>)
 81037e4:	61bb      	str	r3, [r7, #24]
      break;
 81037e6:	e10b      	b.n	8103a00 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 81037e8:	4b8c      	ldr	r3, [pc, #560]	; (8103a1c <HAL_RCC_GetSysClockFreq+0x2e0>)
 81037ea:	61bb      	str	r3, [r7, #24]
      break;
 81037ec:	e108      	b.n	8103a00 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 81037ee:	4b88      	ldr	r3, [pc, #544]	; (8103a10 <HAL_RCC_GetSysClockFreq+0x2d4>)
 81037f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 81037f2:	f003 0303 	and.w	r3, r3, #3
 81037f6:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 81037f8:	4b85      	ldr	r3, [pc, #532]	; (8103a10 <HAL_RCC_GetSysClockFreq+0x2d4>)
 81037fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 81037fc:	091b      	lsrs	r3, r3, #4
 81037fe:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8103802:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 8103804:	4b82      	ldr	r3, [pc, #520]	; (8103a10 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8103806:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8103808:	f003 0301 	and.w	r3, r3, #1
 810380c:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 810380e:	4b80      	ldr	r3, [pc, #512]	; (8103a10 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8103810:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8103812:	08db      	lsrs	r3, r3, #3
 8103814:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8103818:	68fa      	ldr	r2, [r7, #12]
 810381a:	fb02 f303 	mul.w	r3, r2, r3
 810381e:	ee07 3a90 	vmov	s15, r3
 8103822:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8103826:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 810382a:	693b      	ldr	r3, [r7, #16]
 810382c:	2b00      	cmp	r3, #0
 810382e:	f000 80e1 	beq.w	81039f4 <HAL_RCC_GetSysClockFreq+0x2b8>
 8103832:	697b      	ldr	r3, [r7, #20]
 8103834:	2b02      	cmp	r3, #2
 8103836:	f000 8083 	beq.w	8103940 <HAL_RCC_GetSysClockFreq+0x204>
 810383a:	697b      	ldr	r3, [r7, #20]
 810383c:	2b02      	cmp	r3, #2
 810383e:	f200 80a1 	bhi.w	8103984 <HAL_RCC_GetSysClockFreq+0x248>
 8103842:	697b      	ldr	r3, [r7, #20]
 8103844:	2b00      	cmp	r3, #0
 8103846:	d003      	beq.n	8103850 <HAL_RCC_GetSysClockFreq+0x114>
 8103848:	697b      	ldr	r3, [r7, #20]
 810384a:	2b01      	cmp	r3, #1
 810384c:	d056      	beq.n	81038fc <HAL_RCC_GetSysClockFreq+0x1c0>
 810384e:	e099      	b.n	8103984 <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8103850:	4b6f      	ldr	r3, [pc, #444]	; (8103a10 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8103852:	681b      	ldr	r3, [r3, #0]
 8103854:	f003 0320 	and.w	r3, r3, #32
 8103858:	2b00      	cmp	r3, #0
 810385a:	d02d      	beq.n	81038b8 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 810385c:	4b6c      	ldr	r3, [pc, #432]	; (8103a10 <HAL_RCC_GetSysClockFreq+0x2d4>)
 810385e:	681b      	ldr	r3, [r3, #0]
 8103860:	08db      	lsrs	r3, r3, #3
 8103862:	f003 0303 	and.w	r3, r3, #3
 8103866:	4a6b      	ldr	r2, [pc, #428]	; (8103a14 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8103868:	fa22 f303 	lsr.w	r3, r2, r3
 810386c:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 810386e:	687b      	ldr	r3, [r7, #4]
 8103870:	ee07 3a90 	vmov	s15, r3
 8103874:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8103878:	693b      	ldr	r3, [r7, #16]
 810387a:	ee07 3a90 	vmov	s15, r3
 810387e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8103882:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8103886:	4b62      	ldr	r3, [pc, #392]	; (8103a10 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8103888:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 810388a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 810388e:	ee07 3a90 	vmov	s15, r3
 8103892:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8103896:	ed97 6a02 	vldr	s12, [r7, #8]
 810389a:	eddf 5a61 	vldr	s11, [pc, #388]	; 8103a20 <HAL_RCC_GetSysClockFreq+0x2e4>
 810389e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 81038a2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 81038a6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 81038aa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 81038ae:	ee67 7a27 	vmul.f32	s15, s14, s15
 81038b2:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 81038b6:	e087      	b.n	81039c8 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 81038b8:	693b      	ldr	r3, [r7, #16]
 81038ba:	ee07 3a90 	vmov	s15, r3
 81038be:	eef8 7a67 	vcvt.f32.u32	s15, s15
 81038c2:	eddf 6a58 	vldr	s13, [pc, #352]	; 8103a24 <HAL_RCC_GetSysClockFreq+0x2e8>
 81038c6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 81038ca:	4b51      	ldr	r3, [pc, #324]	; (8103a10 <HAL_RCC_GetSysClockFreq+0x2d4>)
 81038cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 81038ce:	f3c3 0308 	ubfx	r3, r3, #0, #9
 81038d2:	ee07 3a90 	vmov	s15, r3
 81038d6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 81038da:	ed97 6a02 	vldr	s12, [r7, #8]
 81038de:	eddf 5a50 	vldr	s11, [pc, #320]	; 8103a20 <HAL_RCC_GetSysClockFreq+0x2e4>
 81038e2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 81038e6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 81038ea:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 81038ee:	ee77 7aa6 	vadd.f32	s15, s15, s13
 81038f2:	ee67 7a27 	vmul.f32	s15, s14, s15
 81038f6:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 81038fa:	e065      	b.n	81039c8 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 81038fc:	693b      	ldr	r3, [r7, #16]
 81038fe:	ee07 3a90 	vmov	s15, r3
 8103902:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8103906:	eddf 6a48 	vldr	s13, [pc, #288]	; 8103a28 <HAL_RCC_GetSysClockFreq+0x2ec>
 810390a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 810390e:	4b40      	ldr	r3, [pc, #256]	; (8103a10 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8103910:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8103912:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8103916:	ee07 3a90 	vmov	s15, r3
 810391a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 810391e:	ed97 6a02 	vldr	s12, [r7, #8]
 8103922:	eddf 5a3f 	vldr	s11, [pc, #252]	; 8103a20 <HAL_RCC_GetSysClockFreq+0x2e4>
 8103926:	eec6 7a25 	vdiv.f32	s15, s12, s11
 810392a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 810392e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8103932:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8103936:	ee67 7a27 	vmul.f32	s15, s14, s15
 810393a:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 810393e:	e043      	b.n	81039c8 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8103940:	693b      	ldr	r3, [r7, #16]
 8103942:	ee07 3a90 	vmov	s15, r3
 8103946:	eef8 7a67 	vcvt.f32.u32	s15, s15
 810394a:	eddf 6a38 	vldr	s13, [pc, #224]	; 8103a2c <HAL_RCC_GetSysClockFreq+0x2f0>
 810394e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8103952:	4b2f      	ldr	r3, [pc, #188]	; (8103a10 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8103954:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8103956:	f3c3 0308 	ubfx	r3, r3, #0, #9
 810395a:	ee07 3a90 	vmov	s15, r3
 810395e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8103962:	ed97 6a02 	vldr	s12, [r7, #8]
 8103966:	eddf 5a2e 	vldr	s11, [pc, #184]	; 8103a20 <HAL_RCC_GetSysClockFreq+0x2e4>
 810396a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 810396e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8103972:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8103976:	ee77 7aa6 	vadd.f32	s15, s15, s13
 810397a:	ee67 7a27 	vmul.f32	s15, s14, s15
 810397e:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8103982:	e021      	b.n	81039c8 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8103984:	693b      	ldr	r3, [r7, #16]
 8103986:	ee07 3a90 	vmov	s15, r3
 810398a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 810398e:	eddf 6a26 	vldr	s13, [pc, #152]	; 8103a28 <HAL_RCC_GetSysClockFreq+0x2ec>
 8103992:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8103996:	4b1e      	ldr	r3, [pc, #120]	; (8103a10 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8103998:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 810399a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 810399e:	ee07 3a90 	vmov	s15, r3
 81039a2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 81039a6:	ed97 6a02 	vldr	s12, [r7, #8]
 81039aa:	eddf 5a1d 	vldr	s11, [pc, #116]	; 8103a20 <HAL_RCC_GetSysClockFreq+0x2e4>
 81039ae:	eec6 7a25 	vdiv.f32	s15, s12, s11
 81039b2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 81039b6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 81039ba:	ee77 7aa6 	vadd.f32	s15, s15, s13
 81039be:	ee67 7a27 	vmul.f32	s15, s14, s15
 81039c2:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 81039c6:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 81039c8:	4b11      	ldr	r3, [pc, #68]	; (8103a10 <HAL_RCC_GetSysClockFreq+0x2d4>)
 81039ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 81039cc:	0a5b      	lsrs	r3, r3, #9
 81039ce:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 81039d2:	3301      	adds	r3, #1
 81039d4:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 81039d6:	683b      	ldr	r3, [r7, #0]
 81039d8:	ee07 3a90 	vmov	s15, r3
 81039dc:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 81039e0:	edd7 6a07 	vldr	s13, [r7, #28]
 81039e4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 81039e8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 81039ec:	ee17 3a90 	vmov	r3, s15
 81039f0:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 81039f2:	e005      	b.n	8103a00 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 81039f4:	2300      	movs	r3, #0
 81039f6:	61bb      	str	r3, [r7, #24]
      break;
 81039f8:	e002      	b.n	8103a00 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 81039fa:	4b07      	ldr	r3, [pc, #28]	; (8103a18 <HAL_RCC_GetSysClockFreq+0x2dc>)
 81039fc:	61bb      	str	r3, [r7, #24]
      break;
 81039fe:	bf00      	nop
  }

  return sysclockfreq;
 8103a00:	69bb      	ldr	r3, [r7, #24]
}
 8103a02:	4618      	mov	r0, r3
 8103a04:	3724      	adds	r7, #36	; 0x24
 8103a06:	46bd      	mov	sp, r7
 8103a08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8103a0c:	4770      	bx	lr
 8103a0e:	bf00      	nop
 8103a10:	58024400 	.word	0x58024400
 8103a14:	03d09000 	.word	0x03d09000
 8103a18:	003d0900 	.word	0x003d0900
 8103a1c:	017d7840 	.word	0x017d7840
 8103a20:	46000000 	.word	0x46000000
 8103a24:	4c742400 	.word	0x4c742400
 8103a28:	4a742400 	.word	0x4a742400
 8103a2c:	4bbebc20 	.word	0x4bbebc20

08103a30 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8103a30:	b580      	push	{r7, lr}
 8103a32:	b082      	sub	sp, #8
 8103a34:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8103a36:	f7ff fe81 	bl	810373c <HAL_RCC_GetSysClockFreq>
 8103a3a:	4602      	mov	r2, r0
 8103a3c:	4b11      	ldr	r3, [pc, #68]	; (8103a84 <HAL_RCC_GetHCLKFreq+0x54>)
 8103a3e:	699b      	ldr	r3, [r3, #24]
 8103a40:	0a1b      	lsrs	r3, r3, #8
 8103a42:	f003 030f 	and.w	r3, r3, #15
 8103a46:	4910      	ldr	r1, [pc, #64]	; (8103a88 <HAL_RCC_GetHCLKFreq+0x58>)
 8103a48:	5ccb      	ldrb	r3, [r1, r3]
 8103a4a:	f003 031f 	and.w	r3, r3, #31
 8103a4e:	fa22 f303 	lsr.w	r3, r2, r3
 8103a52:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8103a54:	4b0b      	ldr	r3, [pc, #44]	; (8103a84 <HAL_RCC_GetHCLKFreq+0x54>)
 8103a56:	699b      	ldr	r3, [r3, #24]
 8103a58:	f003 030f 	and.w	r3, r3, #15
 8103a5c:	4a0a      	ldr	r2, [pc, #40]	; (8103a88 <HAL_RCC_GetHCLKFreq+0x58>)
 8103a5e:	5cd3      	ldrb	r3, [r2, r3]
 8103a60:	f003 031f 	and.w	r3, r3, #31
 8103a64:	687a      	ldr	r2, [r7, #4]
 8103a66:	fa22 f303 	lsr.w	r3, r2, r3
 8103a6a:	4a08      	ldr	r2, [pc, #32]	; (8103a8c <HAL_RCC_GetHCLKFreq+0x5c>)
 8103a6c:	6013      	str	r3, [r2, #0]
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE) >> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
 8103a6e:	4b07      	ldr	r3, [pc, #28]	; (8103a8c <HAL_RCC_GetHCLKFreq+0x5c>)
 8103a70:	681b      	ldr	r3, [r3, #0]
 8103a72:	4a07      	ldr	r2, [pc, #28]	; (8103a90 <HAL_RCC_GetHCLKFreq+0x60>)
 8103a74:	6013      	str	r3, [r2, #0]
#else
  SystemCoreClock = common_system_clock;
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8103a76:	4b05      	ldr	r3, [pc, #20]	; (8103a8c <HAL_RCC_GetHCLKFreq+0x5c>)
 8103a78:	681b      	ldr	r3, [r3, #0]
}
 8103a7a:	4618      	mov	r0, r3
 8103a7c:	3708      	adds	r7, #8
 8103a7e:	46bd      	mov	sp, r7
 8103a80:	bd80      	pop	{r7, pc}
 8103a82:	bf00      	nop
 8103a84:	58024400 	.word	0x58024400
 8103a88:	0810bd98 	.word	0x0810bd98
 8103a8c:	10000004 	.word	0x10000004
 8103a90:	10000000 	.word	0x10000000

08103a94 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8103a94:	b580      	push	{r7, lr}
 8103a96:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8103a98:	f7ff ffca 	bl	8103a30 <HAL_RCC_GetHCLKFreq>
 8103a9c:	4602      	mov	r2, r0
 8103a9e:	4b06      	ldr	r3, [pc, #24]	; (8103ab8 <HAL_RCC_GetPCLK1Freq+0x24>)
 8103aa0:	69db      	ldr	r3, [r3, #28]
 8103aa2:	091b      	lsrs	r3, r3, #4
 8103aa4:	f003 0307 	and.w	r3, r3, #7
 8103aa8:	4904      	ldr	r1, [pc, #16]	; (8103abc <HAL_RCC_GetPCLK1Freq+0x28>)
 8103aaa:	5ccb      	ldrb	r3, [r1, r3]
 8103aac:	f003 031f 	and.w	r3, r3, #31
 8103ab0:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8103ab4:	4618      	mov	r0, r3
 8103ab6:	bd80      	pop	{r7, pc}
 8103ab8:	58024400 	.word	0x58024400
 8103abc:	0810bd98 	.word	0x0810bd98

08103ac0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8103ac0:	b580      	push	{r7, lr}
 8103ac2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8103ac4:	f7ff ffb4 	bl	8103a30 <HAL_RCC_GetHCLKFreq>
 8103ac8:	4602      	mov	r2, r0
 8103aca:	4b06      	ldr	r3, [pc, #24]	; (8103ae4 <HAL_RCC_GetPCLK2Freq+0x24>)
 8103acc:	69db      	ldr	r3, [r3, #28]
 8103ace:	0a1b      	lsrs	r3, r3, #8
 8103ad0:	f003 0307 	and.w	r3, r3, #7
 8103ad4:	4904      	ldr	r1, [pc, #16]	; (8103ae8 <HAL_RCC_GetPCLK2Freq+0x28>)
 8103ad6:	5ccb      	ldrb	r3, [r1, r3]
 8103ad8:	f003 031f 	and.w	r3, r3, #31
 8103adc:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8103ae0:	4618      	mov	r0, r3
 8103ae2:	bd80      	pop	{r7, pc}
 8103ae4:	58024400 	.word	0x58024400
 8103ae8:	0810bd98 	.word	0x0810bd98

08103aec <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8103aec:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8103af0:	b0cc      	sub	sp, #304	; 0x130
 8103af2:	af00      	add	r7, sp, #0
 8103af4:	f8c7 011c 	str.w	r0, [r7, #284]	; 0x11c
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8103af8:	2300      	movs	r3, #0
 8103afa:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8103afe:	2300      	movs	r3, #0
 8103b00:	f887 312e 	strb.w	r3, [r7, #302]	; 0x12e

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8103b04:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8103b08:	e9d3 2300 	ldrd	r2, r3, [r3]
 8103b0c:	f002 6400 	and.w	r4, r2, #134217728	; 0x8000000
 8103b10:	2500      	movs	r5, #0
 8103b12:	ea54 0305 	orrs.w	r3, r4, r5
 8103b16:	d049      	beq.n	8103bac <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 8103b18:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8103b1c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8103b1e:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8103b22:	d02f      	beq.n	8103b84 <HAL_RCCEx_PeriphCLKConfig+0x98>
 8103b24:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8103b28:	d828      	bhi.n	8103b7c <HAL_RCCEx_PeriphCLKConfig+0x90>
 8103b2a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8103b2e:	d01a      	beq.n	8103b66 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8103b30:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8103b34:	d822      	bhi.n	8103b7c <HAL_RCCEx_PeriphCLKConfig+0x90>
 8103b36:	2b00      	cmp	r3, #0
 8103b38:	d003      	beq.n	8103b42 <HAL_RCCEx_PeriphCLKConfig+0x56>
 8103b3a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8103b3e:	d007      	beq.n	8103b50 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8103b40:	e01c      	b.n	8103b7c <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8103b42:	4bb8      	ldr	r3, [pc, #736]	; (8103e24 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8103b44:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8103b46:	4ab7      	ldr	r2, [pc, #732]	; (8103e24 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8103b48:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8103b4c:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8103b4e:	e01a      	b.n	8103b86 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8103b50:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8103b54:	3308      	adds	r3, #8
 8103b56:	2102      	movs	r1, #2
 8103b58:	4618      	mov	r0, r3
 8103b5a:	f002 fba1 	bl	81062a0 <RCCEx_PLL2_Config>
 8103b5e:	4603      	mov	r3, r0
 8103b60:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8103b64:	e00f      	b.n	8103b86 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8103b66:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8103b6a:	3328      	adds	r3, #40	; 0x28
 8103b6c:	2102      	movs	r1, #2
 8103b6e:	4618      	mov	r0, r3
 8103b70:	f002 fc48 	bl	8106404 <RCCEx_PLL3_Config>
 8103b74:	4603      	mov	r3, r0
 8103b76:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8103b7a:	e004      	b.n	8103b86 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8103b7c:	2301      	movs	r3, #1
 8103b7e:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
        break;
 8103b82:	e000      	b.n	8103b86 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 8103b84:	bf00      	nop
    }

    if (ret == HAL_OK)
 8103b86:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8103b8a:	2b00      	cmp	r3, #0
 8103b8c:	d10a      	bne.n	8103ba4 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8103b8e:	4ba5      	ldr	r3, [pc, #660]	; (8103e24 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8103b90:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8103b92:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 8103b96:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8103b9a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8103b9c:	4aa1      	ldr	r2, [pc, #644]	; (8103e24 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8103b9e:	430b      	orrs	r3, r1
 8103ba0:	6513      	str	r3, [r2, #80]	; 0x50
 8103ba2:	e003      	b.n	8103bac <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8103ba4:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8103ba8:	f887 312e 	strb.w	r3, [r7, #302]	; 0x12e
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8103bac:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8103bb0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8103bb4:	f402 7880 	and.w	r8, r2, #256	; 0x100
 8103bb8:	f04f 0900 	mov.w	r9, #0
 8103bbc:	ea58 0309 	orrs.w	r3, r8, r9
 8103bc0:	d047      	beq.n	8103c52 <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 8103bc2:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8103bc6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8103bc8:	2b04      	cmp	r3, #4
 8103bca:	d82a      	bhi.n	8103c22 <HAL_RCCEx_PeriphCLKConfig+0x136>
 8103bcc:	a201      	add	r2, pc, #4	; (adr r2, 8103bd4 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 8103bce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8103bd2:	bf00      	nop
 8103bd4:	08103be9 	.word	0x08103be9
 8103bd8:	08103bf7 	.word	0x08103bf7
 8103bdc:	08103c0d 	.word	0x08103c0d
 8103be0:	08103c2b 	.word	0x08103c2b
 8103be4:	08103c2b 	.word	0x08103c2b
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8103be8:	4b8e      	ldr	r3, [pc, #568]	; (8103e24 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8103bea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8103bec:	4a8d      	ldr	r2, [pc, #564]	; (8103e24 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8103bee:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8103bf2:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8103bf4:	e01a      	b.n	8103c2c <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8103bf6:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8103bfa:	3308      	adds	r3, #8
 8103bfc:	2100      	movs	r1, #0
 8103bfe:	4618      	mov	r0, r3
 8103c00:	f002 fb4e 	bl	81062a0 <RCCEx_PLL2_Config>
 8103c04:	4603      	mov	r3, r0
 8103c06:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8103c0a:	e00f      	b.n	8103c2c <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8103c0c:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8103c10:	3328      	adds	r3, #40	; 0x28
 8103c12:	2100      	movs	r1, #0
 8103c14:	4618      	mov	r0, r3
 8103c16:	f002 fbf5 	bl	8106404 <RCCEx_PLL3_Config>
 8103c1a:	4603      	mov	r3, r0
 8103c1c:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8103c20:	e004      	b.n	8103c2c <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8103c22:	2301      	movs	r3, #1
 8103c24:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
        break;
 8103c28:	e000      	b.n	8103c2c <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 8103c2a:	bf00      	nop
    }

    if (ret == HAL_OK)
 8103c2c:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8103c30:	2b00      	cmp	r3, #0
 8103c32:	d10a      	bne.n	8103c4a <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8103c34:	4b7b      	ldr	r3, [pc, #492]	; (8103e24 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8103c36:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8103c38:	f023 0107 	bic.w	r1, r3, #7
 8103c3c:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8103c40:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8103c42:	4a78      	ldr	r2, [pc, #480]	; (8103e24 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8103c44:	430b      	orrs	r3, r1
 8103c46:	6513      	str	r3, [r2, #80]	; 0x50
 8103c48:	e003      	b.n	8103c52 <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8103c4a:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8103c4e:	f887 312e 	strb.w	r3, [r7, #302]	; 0x12e
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 8103c52:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8103c56:	e9d3 2300 	ldrd	r2, r3, [r3]
 8103c5a:	f402 7a00 	and.w	sl, r2, #512	; 0x200
 8103c5e:	f04f 0b00 	mov.w	fp, #0
 8103c62:	ea5a 030b 	orrs.w	r3, sl, fp
 8103c66:	d04c      	beq.n	8103d02 <HAL_RCCEx_PeriphCLKConfig+0x216>
  {
    switch (PeriphClkInit->Sai23ClockSelection)
 8103c68:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8103c6c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8103c6e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8103c72:	d030      	beq.n	8103cd6 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
 8103c74:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8103c78:	d829      	bhi.n	8103cce <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8103c7a:	2bc0      	cmp	r3, #192	; 0xc0
 8103c7c:	d02d      	beq.n	8103cda <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 8103c7e:	2bc0      	cmp	r3, #192	; 0xc0
 8103c80:	d825      	bhi.n	8103cce <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8103c82:	2b80      	cmp	r3, #128	; 0x80
 8103c84:	d018      	beq.n	8103cb8 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 8103c86:	2b80      	cmp	r3, #128	; 0x80
 8103c88:	d821      	bhi.n	8103cce <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8103c8a:	2b00      	cmp	r3, #0
 8103c8c:	d002      	beq.n	8103c94 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
 8103c8e:	2b40      	cmp	r3, #64	; 0x40
 8103c90:	d007      	beq.n	8103ca2 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
 8103c92:	e01c      	b.n	8103cce <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    {
      case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8103c94:	4b63      	ldr	r3, [pc, #396]	; (8103e24 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8103c96:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8103c98:	4a62      	ldr	r2, [pc, #392]	; (8103e24 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8103c9a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8103c9e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8103ca0:	e01c      	b.n	8103cdc <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8103ca2:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8103ca6:	3308      	adds	r3, #8
 8103ca8:	2100      	movs	r1, #0
 8103caa:	4618      	mov	r0, r3
 8103cac:	f002 faf8 	bl	81062a0 <RCCEx_PLL2_Config>
 8103cb0:	4603      	mov	r3, r0
 8103cb2:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8103cb6:	e011      	b.n	8103cdc <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8103cb8:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8103cbc:	3328      	adds	r3, #40	; 0x28
 8103cbe:	2100      	movs	r1, #0
 8103cc0:	4618      	mov	r0, r3
 8103cc2:	f002 fb9f 	bl	8106404 <RCCEx_PLL3_Config>
 8103cc6:	4603      	mov	r3, r0
 8103cc8:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8103ccc:	e006      	b.n	8103cdc <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
        /* SAI2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8103cce:	2301      	movs	r3, #1
 8103cd0:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
        break;
 8103cd4:	e002      	b.n	8103cdc <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 8103cd6:	bf00      	nop
 8103cd8:	e000      	b.n	8103cdc <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 8103cda:	bf00      	nop
    }

    if (ret == HAL_OK)
 8103cdc:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8103ce0:	2b00      	cmp	r3, #0
 8103ce2:	d10a      	bne.n	8103cfa <HAL_RCCEx_PeriphCLKConfig+0x20e>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 8103ce4:	4b4f      	ldr	r3, [pc, #316]	; (8103e24 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8103ce6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8103ce8:	f423 71e0 	bic.w	r1, r3, #448	; 0x1c0
 8103cec:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8103cf0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8103cf2:	4a4c      	ldr	r2, [pc, #304]	; (8103e24 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8103cf4:	430b      	orrs	r3, r1
 8103cf6:	6513      	str	r3, [r2, #80]	; 0x50
 8103cf8:	e003      	b.n	8103d02 <HAL_RCCEx_PeriphCLKConfig+0x216>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8103cfa:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8103cfe:	f887 312e 	strb.w	r3, [r7, #302]	; 0x12e
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8103d02:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8103d06:	e9d3 2300 	ldrd	r2, r3, [r3]
 8103d0a:	f402 6380 	and.w	r3, r2, #1024	; 0x400
 8103d0e:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 8103d12:	2300      	movs	r3, #0
 8103d14:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 8103d18:	e9d7 1244 	ldrd	r1, r2, [r7, #272]	; 0x110
 8103d1c:	460b      	mov	r3, r1
 8103d1e:	4313      	orrs	r3, r2
 8103d20:	d053      	beq.n	8103dca <HAL_RCCEx_PeriphCLKConfig+0x2de>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 8103d22:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8103d26:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8103d2a:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8103d2e:	d035      	beq.n	8103d9c <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 8103d30:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8103d34:	d82e      	bhi.n	8103d94 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8103d36:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8103d3a:	d031      	beq.n	8103da0 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 8103d3c:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8103d40:	d828      	bhi.n	8103d94 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8103d42:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8103d46:	d01a      	beq.n	8103d7e <HAL_RCCEx_PeriphCLKConfig+0x292>
 8103d48:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8103d4c:	d822      	bhi.n	8103d94 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8103d4e:	2b00      	cmp	r3, #0
 8103d50:	d003      	beq.n	8103d5a <HAL_RCCEx_PeriphCLKConfig+0x26e>
 8103d52:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8103d56:	d007      	beq.n	8103d68 <HAL_RCCEx_PeriphCLKConfig+0x27c>
 8103d58:	e01c      	b.n	8103d94 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8103d5a:	4b32      	ldr	r3, [pc, #200]	; (8103e24 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8103d5c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8103d5e:	4a31      	ldr	r2, [pc, #196]	; (8103e24 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8103d60:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8103d64:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8103d66:	e01c      	b.n	8103da2 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8103d68:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8103d6c:	3308      	adds	r3, #8
 8103d6e:	2100      	movs	r1, #0
 8103d70:	4618      	mov	r0, r3
 8103d72:	f002 fa95 	bl	81062a0 <RCCEx_PLL2_Config>
 8103d76:	4603      	mov	r3, r0
 8103d78:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8103d7c:	e011      	b.n	8103da2 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8103d7e:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8103d82:	3328      	adds	r3, #40	; 0x28
 8103d84:	2100      	movs	r1, #0
 8103d86:	4618      	mov	r0, r3
 8103d88:	f002 fb3c 	bl	8106404 <RCCEx_PLL3_Config>
 8103d8c:	4603      	mov	r3, r0
 8103d8e:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8103d92:	e006      	b.n	8103da2 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8103d94:	2301      	movs	r3, #1
 8103d96:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
        break;
 8103d9a:	e002      	b.n	8103da2 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8103d9c:	bf00      	nop
 8103d9e:	e000      	b.n	8103da2 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8103da0:	bf00      	nop
    }

    if (ret == HAL_OK)
 8103da2:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8103da6:	2b00      	cmp	r3, #0
 8103da8:	d10b      	bne.n	8103dc2 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8103daa:	4b1e      	ldr	r3, [pc, #120]	; (8103e24 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8103dac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8103dae:	f423 0160 	bic.w	r1, r3, #14680064	; 0xe00000
 8103db2:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8103db6:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8103dba:	4a1a      	ldr	r2, [pc, #104]	; (8103e24 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8103dbc:	430b      	orrs	r3, r1
 8103dbe:	6593      	str	r3, [r2, #88]	; 0x58
 8103dc0:	e003      	b.n	8103dca <HAL_RCCEx_PeriphCLKConfig+0x2de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8103dc2:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8103dc6:	f887 312e 	strb.w	r3, [r7, #302]	; 0x12e
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8103dca:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8103dce:	e9d3 2300 	ldrd	r2, r3, [r3]
 8103dd2:	f402 6300 	and.w	r3, r2, #2048	; 0x800
 8103dd6:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 8103dda:	2300      	movs	r3, #0
 8103ddc:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8103de0:	e9d7 1242 	ldrd	r1, r2, [r7, #264]	; 0x108
 8103de4:	460b      	mov	r3, r1
 8103de6:	4313      	orrs	r3, r2
 8103de8:	d056      	beq.n	8103e98 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 8103dea:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8103dee:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8103df2:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8103df6:	d038      	beq.n	8103e6a <HAL_RCCEx_PeriphCLKConfig+0x37e>
 8103df8:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8103dfc:	d831      	bhi.n	8103e62 <HAL_RCCEx_PeriphCLKConfig+0x376>
 8103dfe:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8103e02:	d034      	beq.n	8103e6e <HAL_RCCEx_PeriphCLKConfig+0x382>
 8103e04:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8103e08:	d82b      	bhi.n	8103e62 <HAL_RCCEx_PeriphCLKConfig+0x376>
 8103e0a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8103e0e:	d01d      	beq.n	8103e4c <HAL_RCCEx_PeriphCLKConfig+0x360>
 8103e10:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8103e14:	d825      	bhi.n	8103e62 <HAL_RCCEx_PeriphCLKConfig+0x376>
 8103e16:	2b00      	cmp	r3, #0
 8103e18:	d006      	beq.n	8103e28 <HAL_RCCEx_PeriphCLKConfig+0x33c>
 8103e1a:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8103e1e:	d00a      	beq.n	8103e36 <HAL_RCCEx_PeriphCLKConfig+0x34a>
 8103e20:	e01f      	b.n	8103e62 <HAL_RCCEx_PeriphCLKConfig+0x376>
 8103e22:	bf00      	nop
 8103e24:	58024400 	.word	0x58024400
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8103e28:	4ba2      	ldr	r3, [pc, #648]	; (81040b4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8103e2a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8103e2c:	4aa1      	ldr	r2, [pc, #644]	; (81040b4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8103e2e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8103e32:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8103e34:	e01c      	b.n	8103e70 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8103e36:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8103e3a:	3308      	adds	r3, #8
 8103e3c:	2100      	movs	r1, #0
 8103e3e:	4618      	mov	r0, r3
 8103e40:	f002 fa2e 	bl	81062a0 <RCCEx_PLL2_Config>
 8103e44:	4603      	mov	r3, r0
 8103e46:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8103e4a:	e011      	b.n	8103e70 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8103e4c:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8103e50:	3328      	adds	r3, #40	; 0x28
 8103e52:	2100      	movs	r1, #0
 8103e54:	4618      	mov	r0, r3
 8103e56:	f002 fad5 	bl	8106404 <RCCEx_PLL3_Config>
 8103e5a:	4603      	mov	r3, r0
 8103e5c:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8103e60:	e006      	b.n	8103e70 <HAL_RCCEx_PeriphCLKConfig+0x384>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8103e62:	2301      	movs	r3, #1
 8103e64:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
        break;
 8103e68:	e002      	b.n	8103e70 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 8103e6a:	bf00      	nop
 8103e6c:	e000      	b.n	8103e70 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 8103e6e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8103e70:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8103e74:	2b00      	cmp	r3, #0
 8103e76:	d10b      	bne.n	8103e90 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8103e78:	4b8e      	ldr	r3, [pc, #568]	; (81040b4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8103e7a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8103e7c:	f023 61e0 	bic.w	r1, r3, #117440512	; 0x7000000
 8103e80:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8103e84:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8103e88:	4a8a      	ldr	r2, [pc, #552]	; (81040b4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8103e8a:	430b      	orrs	r3, r1
 8103e8c:	6593      	str	r3, [r2, #88]	; 0x58
 8103e8e:	e003      	b.n	8103e98 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8103e90:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8103e94:	f887 312e 	strb.w	r3, [r7, #302]	; 0x12e
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8103e98:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8103e9c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8103ea0:	f002 7300 	and.w	r3, r2, #33554432	; 0x2000000
 8103ea4:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8103ea8:	2300      	movs	r3, #0
 8103eaa:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8103eae:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	; 0x100
 8103eb2:	460b      	mov	r3, r1
 8103eb4:	4313      	orrs	r3, r2
 8103eb6:	d03a      	beq.n	8103f2e <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    switch (PeriphClkInit->QspiClockSelection)
 8103eb8:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8103ebc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8103ebe:	2b30      	cmp	r3, #48	; 0x30
 8103ec0:	d01f      	beq.n	8103f02 <HAL_RCCEx_PeriphCLKConfig+0x416>
 8103ec2:	2b30      	cmp	r3, #48	; 0x30
 8103ec4:	d819      	bhi.n	8103efa <HAL_RCCEx_PeriphCLKConfig+0x40e>
 8103ec6:	2b20      	cmp	r3, #32
 8103ec8:	d00c      	beq.n	8103ee4 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 8103eca:	2b20      	cmp	r3, #32
 8103ecc:	d815      	bhi.n	8103efa <HAL_RCCEx_PeriphCLKConfig+0x40e>
 8103ece:	2b00      	cmp	r3, #0
 8103ed0:	d019      	beq.n	8103f06 <HAL_RCCEx_PeriphCLKConfig+0x41a>
 8103ed2:	2b10      	cmp	r3, #16
 8103ed4:	d111      	bne.n	8103efa <HAL_RCCEx_PeriphCLKConfig+0x40e>
    {
      case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
        /* Enable QSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8103ed6:	4b77      	ldr	r3, [pc, #476]	; (81040b4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8103ed8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8103eda:	4a76      	ldr	r2, [pc, #472]	; (81040b4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8103edc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8103ee0:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* QSPI clock source configuration done later after clock selection check */
        break;
 8103ee2:	e011      	b.n	8103f08 <HAL_RCCEx_PeriphCLKConfig+0x41c>

      case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8103ee4:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8103ee8:	3308      	adds	r3, #8
 8103eea:	2102      	movs	r1, #2
 8103eec:	4618      	mov	r0, r3
 8103eee:	f002 f9d7 	bl	81062a0 <RCCEx_PLL2_Config>
 8103ef2:	4603      	mov	r3, r0
 8103ef4:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f

        /* QSPI clock source configuration done later after clock selection check */
        break;
 8103ef8:	e006      	b.n	8103f08 <HAL_RCCEx_PeriphCLKConfig+0x41c>
      case RCC_QSPICLKSOURCE_D1HCLK:
        /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8103efa:	2301      	movs	r3, #1
 8103efc:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
        break;
 8103f00:	e002      	b.n	8103f08 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 8103f02:	bf00      	nop
 8103f04:	e000      	b.n	8103f08 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 8103f06:	bf00      	nop
    }

    if (ret == HAL_OK)
 8103f08:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8103f0c:	2b00      	cmp	r3, #0
 8103f0e:	d10a      	bne.n	8103f26 <HAL_RCCEx_PeriphCLKConfig+0x43a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8103f10:	4b68      	ldr	r3, [pc, #416]	; (81040b4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8103f12:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8103f14:	f023 0130 	bic.w	r1, r3, #48	; 0x30
 8103f18:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8103f1c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8103f1e:	4a65      	ldr	r2, [pc, #404]	; (81040b4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8103f20:	430b      	orrs	r3, r1
 8103f22:	64d3      	str	r3, [r2, #76]	; 0x4c
 8103f24:	e003      	b.n	8103f2e <HAL_RCCEx_PeriphCLKConfig+0x442>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8103f26:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8103f2a:	f887 312e 	strb.w	r3, [r7, #302]	; 0x12e
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8103f2e:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8103f32:	e9d3 2300 	ldrd	r2, r3, [r3]
 8103f36:	f402 5380 	and.w	r3, r2, #4096	; 0x1000
 8103f3a:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8103f3e:	2300      	movs	r3, #0
 8103f40:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8103f44:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	; 0xf8
 8103f48:	460b      	mov	r3, r1
 8103f4a:	4313      	orrs	r3, r2
 8103f4c:	d051      	beq.n	8103ff2 <HAL_RCCEx_PeriphCLKConfig+0x506>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 8103f4e:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8103f52:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8103f54:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8103f58:	d035      	beq.n	8103fc6 <HAL_RCCEx_PeriphCLKConfig+0x4da>
 8103f5a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8103f5e:	d82e      	bhi.n	8103fbe <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8103f60:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8103f64:	d031      	beq.n	8103fca <HAL_RCCEx_PeriphCLKConfig+0x4de>
 8103f66:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8103f6a:	d828      	bhi.n	8103fbe <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8103f6c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8103f70:	d01a      	beq.n	8103fa8 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
 8103f72:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8103f76:	d822      	bhi.n	8103fbe <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8103f78:	2b00      	cmp	r3, #0
 8103f7a:	d003      	beq.n	8103f84 <HAL_RCCEx_PeriphCLKConfig+0x498>
 8103f7c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8103f80:	d007      	beq.n	8103f92 <HAL_RCCEx_PeriphCLKConfig+0x4a6>
 8103f82:	e01c      	b.n	8103fbe <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8103f84:	4b4b      	ldr	r3, [pc, #300]	; (81040b4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8103f86:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8103f88:	4a4a      	ldr	r2, [pc, #296]	; (81040b4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8103f8a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8103f8e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8103f90:	e01c      	b.n	8103fcc <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8103f92:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8103f96:	3308      	adds	r3, #8
 8103f98:	2100      	movs	r1, #0
 8103f9a:	4618      	mov	r0, r3
 8103f9c:	f002 f980 	bl	81062a0 <RCCEx_PLL2_Config>
 8103fa0:	4603      	mov	r3, r0
 8103fa2:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8103fa6:	e011      	b.n	8103fcc <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8103fa8:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8103fac:	3328      	adds	r3, #40	; 0x28
 8103fae:	2100      	movs	r1, #0
 8103fb0:	4618      	mov	r0, r3
 8103fb2:	f002 fa27 	bl	8106404 <RCCEx_PLL3_Config>
 8103fb6:	4603      	mov	r3, r0
 8103fb8:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8103fbc:	e006      	b.n	8103fcc <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8103fbe:	2301      	movs	r3, #1
 8103fc0:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
        break;
 8103fc4:	e002      	b.n	8103fcc <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 8103fc6:	bf00      	nop
 8103fc8:	e000      	b.n	8103fcc <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 8103fca:	bf00      	nop
    }

    if (ret == HAL_OK)
 8103fcc:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8103fd0:	2b00      	cmp	r3, #0
 8103fd2:	d10a      	bne.n	8103fea <HAL_RCCEx_PeriphCLKConfig+0x4fe>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8103fd4:	4b37      	ldr	r3, [pc, #220]	; (81040b4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8103fd6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8103fd8:	f423 41e0 	bic.w	r1, r3, #28672	; 0x7000
 8103fdc:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8103fe0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8103fe2:	4a34      	ldr	r2, [pc, #208]	; (81040b4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8103fe4:	430b      	orrs	r3, r1
 8103fe6:	6513      	str	r3, [r2, #80]	; 0x50
 8103fe8:	e003      	b.n	8103ff2 <HAL_RCCEx_PeriphCLKConfig+0x506>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8103fea:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8103fee:	f887 312e 	strb.w	r3, [r7, #302]	; 0x12e
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8103ff2:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8103ff6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8103ffa:	f402 5300 	and.w	r3, r2, #8192	; 0x2000
 8103ffe:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8104002:	2300      	movs	r3, #0
 8104004:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8104008:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	; 0xf0
 810400c:	460b      	mov	r3, r1
 810400e:	4313      	orrs	r3, r2
 8104010:	d056      	beq.n	81040c0 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 8104012:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8104016:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8104018:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 810401c:	d033      	beq.n	8104086 <HAL_RCCEx_PeriphCLKConfig+0x59a>
 810401e:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8104022:	d82c      	bhi.n	810407e <HAL_RCCEx_PeriphCLKConfig+0x592>
 8104024:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8104028:	d02f      	beq.n	810408a <HAL_RCCEx_PeriphCLKConfig+0x59e>
 810402a:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 810402e:	d826      	bhi.n	810407e <HAL_RCCEx_PeriphCLKConfig+0x592>
 8104030:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8104034:	d02b      	beq.n	810408e <HAL_RCCEx_PeriphCLKConfig+0x5a2>
 8104036:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 810403a:	d820      	bhi.n	810407e <HAL_RCCEx_PeriphCLKConfig+0x592>
 810403c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8104040:	d012      	beq.n	8104068 <HAL_RCCEx_PeriphCLKConfig+0x57c>
 8104042:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8104046:	d81a      	bhi.n	810407e <HAL_RCCEx_PeriphCLKConfig+0x592>
 8104048:	2b00      	cmp	r3, #0
 810404a:	d022      	beq.n	8104092 <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 810404c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8104050:	d115      	bne.n	810407e <HAL_RCCEx_PeriphCLKConfig+0x592>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8104052:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8104056:	3308      	adds	r3, #8
 8104058:	2101      	movs	r1, #1
 810405a:	4618      	mov	r0, r3
 810405c:	f002 f920 	bl	81062a0 <RCCEx_PLL2_Config>
 8104060:	4603      	mov	r3, r0
 8104062:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8104066:	e015      	b.n	8104094 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8104068:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 810406c:	3328      	adds	r3, #40	; 0x28
 810406e:	2101      	movs	r1, #1
 8104070:	4618      	mov	r0, r3
 8104072:	f002 f9c7 	bl	8106404 <RCCEx_PLL3_Config>
 8104076:	4603      	mov	r3, r0
 8104078:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 810407c:	e00a      	b.n	8104094 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 810407e:	2301      	movs	r3, #1
 8104080:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
        break;
 8104084:	e006      	b.n	8104094 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8104086:	bf00      	nop
 8104088:	e004      	b.n	8104094 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 810408a:	bf00      	nop
 810408c:	e002      	b.n	8104094 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 810408e:	bf00      	nop
 8104090:	e000      	b.n	8104094 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8104092:	bf00      	nop
    }

    if (ret == HAL_OK)
 8104094:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8104098:	2b00      	cmp	r3, #0
 810409a:	d10d      	bne.n	81040b8 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 810409c:	4b05      	ldr	r3, [pc, #20]	; (81040b4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 810409e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 81040a0:	f423 21e0 	bic.w	r1, r3, #458752	; 0x70000
 81040a4:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 81040a8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 81040aa:	4a02      	ldr	r2, [pc, #8]	; (81040b4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 81040ac:	430b      	orrs	r3, r1
 81040ae:	6513      	str	r3, [r2, #80]	; 0x50
 81040b0:	e006      	b.n	81040c0 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 81040b2:	bf00      	nop
 81040b4:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 81040b8:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 81040bc:	f887 312e 	strb.w	r3, [r7, #302]	; 0x12e
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 81040c0:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 81040c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 81040c8:	f402 4380 	and.w	r3, r2, #16384	; 0x4000
 81040cc:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 81040d0:	2300      	movs	r3, #0
 81040d2:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 81040d6:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	; 0xe8
 81040da:	460b      	mov	r3, r1
 81040dc:	4313      	orrs	r3, r2
 81040de:	d055      	beq.n	810418c <HAL_RCCEx_PeriphCLKConfig+0x6a0>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 81040e0:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 81040e4:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 81040e8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 81040ec:	d033      	beq.n	8104156 <HAL_RCCEx_PeriphCLKConfig+0x66a>
 81040ee:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 81040f2:	d82c      	bhi.n	810414e <HAL_RCCEx_PeriphCLKConfig+0x662>
 81040f4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 81040f8:	d02f      	beq.n	810415a <HAL_RCCEx_PeriphCLKConfig+0x66e>
 81040fa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 81040fe:	d826      	bhi.n	810414e <HAL_RCCEx_PeriphCLKConfig+0x662>
 8104100:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8104104:	d02b      	beq.n	810415e <HAL_RCCEx_PeriphCLKConfig+0x672>
 8104106:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 810410a:	d820      	bhi.n	810414e <HAL_RCCEx_PeriphCLKConfig+0x662>
 810410c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8104110:	d012      	beq.n	8104138 <HAL_RCCEx_PeriphCLKConfig+0x64c>
 8104112:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8104116:	d81a      	bhi.n	810414e <HAL_RCCEx_PeriphCLKConfig+0x662>
 8104118:	2b00      	cmp	r3, #0
 810411a:	d022      	beq.n	8104162 <HAL_RCCEx_PeriphCLKConfig+0x676>
 810411c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8104120:	d115      	bne.n	810414e <HAL_RCCEx_PeriphCLKConfig+0x662>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8104122:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8104126:	3308      	adds	r3, #8
 8104128:	2101      	movs	r1, #1
 810412a:	4618      	mov	r0, r3
 810412c:	f002 f8b8 	bl	81062a0 <RCCEx_PLL2_Config>
 8104130:	4603      	mov	r3, r0
 8104132:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8104136:	e015      	b.n	8104164 <HAL_RCCEx_PeriphCLKConfig+0x678>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8104138:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 810413c:	3328      	adds	r3, #40	; 0x28
 810413e:	2101      	movs	r1, #1
 8104140:	4618      	mov	r0, r3
 8104142:	f002 f95f 	bl	8106404 <RCCEx_PLL3_Config>
 8104146:	4603      	mov	r3, r0
 8104148:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 810414c:	e00a      	b.n	8104164 <HAL_RCCEx_PeriphCLKConfig+0x678>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 810414e:	2301      	movs	r3, #1
 8104150:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
        break;
 8104154:	e006      	b.n	8104164 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8104156:	bf00      	nop
 8104158:	e004      	b.n	8104164 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 810415a:	bf00      	nop
 810415c:	e002      	b.n	8104164 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 810415e:	bf00      	nop
 8104160:	e000      	b.n	8104164 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8104162:	bf00      	nop
    }

    if (ret == HAL_OK)
 8104164:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8104168:	2b00      	cmp	r3, #0
 810416a:	d10b      	bne.n	8104184 <HAL_RCCEx_PeriphCLKConfig+0x698>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 810416c:	4bb7      	ldr	r3, [pc, #732]	; (810444c <HAL_RCCEx_PeriphCLKConfig+0x960>)
 810416e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8104170:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 8104174:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8104178:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 810417c:	4ab3      	ldr	r2, [pc, #716]	; (810444c <HAL_RCCEx_PeriphCLKConfig+0x960>)
 810417e:	430b      	orrs	r3, r1
 8104180:	6593      	str	r3, [r2, #88]	; 0x58
 8104182:	e003      	b.n	810418c <HAL_RCCEx_PeriphCLKConfig+0x6a0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8104184:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8104188:	f887 312e 	strb.w	r3, [r7, #302]	; 0x12e
    }
  }

#if defined(DSI)
  /*---------------------------- DSI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DSI) == RCC_PERIPHCLK_DSI)
 810418c:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8104190:	e9d3 2300 	ldrd	r2, r3, [r3]
 8104194:	f002 6380 	and.w	r3, r2, #67108864	; 0x4000000
 8104198:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 810419c:	2300      	movs	r3, #0
 810419e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 81041a2:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	; 0xe0
 81041a6:	460b      	mov	r3, r1
 81041a8:	4313      	orrs	r3, r2
 81041aa:	d02a      	beq.n	8104202 <HAL_RCCEx_PeriphCLKConfig+0x716>
  {
    switch (PeriphClkInit->DsiClockSelection)
 81041ac:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 81041b0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 81041b2:	2b00      	cmp	r3, #0
 81041b4:	d011      	beq.n	81041da <HAL_RCCEx_PeriphCLKConfig+0x6ee>
 81041b6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 81041ba:	d10a      	bne.n	81041d2 <HAL_RCCEx_PeriphCLKConfig+0x6e6>
    {

      case RCC_DSICLKSOURCE_PLL2: /* PLL2 is used as clock source for DSI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 81041bc:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 81041c0:	3308      	adds	r3, #8
 81041c2:	2101      	movs	r1, #1
 81041c4:	4618      	mov	r0, r3
 81041c6:	f002 f86b 	bl	81062a0 <RCCEx_PLL2_Config>
 81041ca:	4603      	mov	r3, r0
 81041cc:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f

        /* DSI clock source configuration done later after clock selection check */
        break;
 81041d0:	e004      	b.n	81041dc <HAL_RCCEx_PeriphCLKConfig+0x6f0>
        /* PHY is used as clock source for DSI*/
        /* DSI clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 81041d2:	2301      	movs	r3, #1
 81041d4:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
        break;
 81041d8:	e000      	b.n	81041dc <HAL_RCCEx_PeriphCLKConfig+0x6f0>
        break;
 81041da:	bf00      	nop
    }

    if (ret == HAL_OK)
 81041dc:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 81041e0:	2b00      	cmp	r3, #0
 81041e2:	d10a      	bne.n	81041fa <HAL_RCCEx_PeriphCLKConfig+0x70e>
    {
      /* Set the source of DSI clock*/
      __HAL_RCC_DSI_CONFIG(PeriphClkInit->DsiClockSelection);
 81041e4:	4b99      	ldr	r3, [pc, #612]	; (810444c <HAL_RCCEx_PeriphCLKConfig+0x960>)
 81041e6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 81041e8:	f423 7180 	bic.w	r1, r3, #256	; 0x100
 81041ec:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 81041f0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 81041f2:	4a96      	ldr	r2, [pc, #600]	; (810444c <HAL_RCCEx_PeriphCLKConfig+0x960>)
 81041f4:	430b      	orrs	r3, r1
 81041f6:	64d3      	str	r3, [r2, #76]	; 0x4c
 81041f8:	e003      	b.n	8104202 <HAL_RCCEx_PeriphCLKConfig+0x716>
    }
    else
    {
      /* set overall return value */
      status = ret;
 81041fa:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 81041fe:	f887 312e 	strb.w	r3, [r7, #302]	; 0x12e
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8104202:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8104206:	e9d3 2300 	ldrd	r2, r3, [r3]
 810420a:	f402 4300 	and.w	r3, r2, #32768	; 0x8000
 810420e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8104212:	2300      	movs	r3, #0
 8104214:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8104218:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 810421c:	460b      	mov	r3, r1
 810421e:	4313      	orrs	r3, r2
 8104220:	d037      	beq.n	8104292 <HAL_RCCEx_PeriphCLKConfig+0x7a6>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 8104222:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8104226:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8104228:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 810422c:	d00e      	beq.n	810424c <HAL_RCCEx_PeriphCLKConfig+0x760>
 810422e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8104232:	d816      	bhi.n	8104262 <HAL_RCCEx_PeriphCLKConfig+0x776>
 8104234:	2b00      	cmp	r3, #0
 8104236:	d018      	beq.n	810426a <HAL_RCCEx_PeriphCLKConfig+0x77e>
 8104238:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 810423c:	d111      	bne.n	8104262 <HAL_RCCEx_PeriphCLKConfig+0x776>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 810423e:	4b83      	ldr	r3, [pc, #524]	; (810444c <HAL_RCCEx_PeriphCLKConfig+0x960>)
 8104240:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8104242:	4a82      	ldr	r2, [pc, #520]	; (810444c <HAL_RCCEx_PeriphCLKConfig+0x960>)
 8104244:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8104248:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 810424a:	e00f      	b.n	810426c <HAL_RCCEx_PeriphCLKConfig+0x780>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 810424c:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8104250:	3308      	adds	r3, #8
 8104252:	2101      	movs	r1, #1
 8104254:	4618      	mov	r0, r3
 8104256:	f002 f823 	bl	81062a0 <RCCEx_PLL2_Config>
 810425a:	4603      	mov	r3, r0
 810425c:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8104260:	e004      	b.n	810426c <HAL_RCCEx_PeriphCLKConfig+0x780>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8104262:	2301      	movs	r3, #1
 8104264:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
        break;
 8104268:	e000      	b.n	810426c <HAL_RCCEx_PeriphCLKConfig+0x780>
        break;
 810426a:	bf00      	nop
    }

    if (ret == HAL_OK)
 810426c:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8104270:	2b00      	cmp	r3, #0
 8104272:	d10a      	bne.n	810428a <HAL_RCCEx_PeriphCLKConfig+0x79e>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8104274:	4b75      	ldr	r3, [pc, #468]	; (810444c <HAL_RCCEx_PeriphCLKConfig+0x960>)
 8104276:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8104278:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 810427c:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8104280:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8104282:	4a72      	ldr	r2, [pc, #456]	; (810444c <HAL_RCCEx_PeriphCLKConfig+0x960>)
 8104284:	430b      	orrs	r3, r1
 8104286:	6513      	str	r3, [r2, #80]	; 0x50
 8104288:	e003      	b.n	8104292 <HAL_RCCEx_PeriphCLKConfig+0x7a6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 810428a:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 810428e:	f887 312e 	strb.w	r3, [r7, #302]	; 0x12e
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8104292:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8104296:	e9d3 2300 	ldrd	r2, r3, [r3]
 810429a:	f002 7380 	and.w	r3, r2, #16777216	; 0x1000000
 810429e:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 81042a2:	2300      	movs	r3, #0
 81042a4:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 81042a8:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	; 0xd0
 81042ac:	460b      	mov	r3, r1
 81042ae:	4313      	orrs	r3, r2
 81042b0:	d03a      	beq.n	8104328 <HAL_RCCEx_PeriphCLKConfig+0x83c>
  {
    switch (PeriphClkInit->FmcClockSelection)
 81042b2:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 81042b6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 81042b8:	2b03      	cmp	r3, #3
 81042ba:	d81d      	bhi.n	81042f8 <HAL_RCCEx_PeriphCLKConfig+0x80c>
 81042bc:	a201      	add	r2, pc, #4	; (adr r2, 81042c4 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 81042be:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 81042c2:	bf00      	nop
 81042c4:	08104301 	.word	0x08104301
 81042c8:	081042d5 	.word	0x081042d5
 81042cc:	081042e3 	.word	0x081042e3
 81042d0:	08104301 	.word	0x08104301
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 81042d4:	4b5d      	ldr	r3, [pc, #372]	; (810444c <HAL_RCCEx_PeriphCLKConfig+0x960>)
 81042d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 81042d8:	4a5c      	ldr	r2, [pc, #368]	; (810444c <HAL_RCCEx_PeriphCLKConfig+0x960>)
 81042da:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 81042de:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 81042e0:	e00f      	b.n	8104302 <HAL_RCCEx_PeriphCLKConfig+0x816>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 81042e2:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 81042e6:	3308      	adds	r3, #8
 81042e8:	2102      	movs	r1, #2
 81042ea:	4618      	mov	r0, r3
 81042ec:	f001 ffd8 	bl	81062a0 <RCCEx_PLL2_Config>
 81042f0:	4603      	mov	r3, r0
 81042f2:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f

        /* FMC clock source configuration done later after clock selection check */
        break;
 81042f6:	e004      	b.n	8104302 <HAL_RCCEx_PeriphCLKConfig+0x816>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 81042f8:	2301      	movs	r3, #1
 81042fa:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
        break;
 81042fe:	e000      	b.n	8104302 <HAL_RCCEx_PeriphCLKConfig+0x816>
        break;
 8104300:	bf00      	nop
    }

    if (ret == HAL_OK)
 8104302:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8104306:	2b00      	cmp	r3, #0
 8104308:	d10a      	bne.n	8104320 <HAL_RCCEx_PeriphCLKConfig+0x834>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 810430a:	4b50      	ldr	r3, [pc, #320]	; (810444c <HAL_RCCEx_PeriphCLKConfig+0x960>)
 810430c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 810430e:	f023 0103 	bic.w	r1, r3, #3
 8104312:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8104316:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8104318:	4a4c      	ldr	r2, [pc, #304]	; (810444c <HAL_RCCEx_PeriphCLKConfig+0x960>)
 810431a:	430b      	orrs	r3, r1
 810431c:	64d3      	str	r3, [r2, #76]	; 0x4c
 810431e:	e003      	b.n	8104328 <HAL_RCCEx_PeriphCLKConfig+0x83c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8104320:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8104324:	f887 312e 	strb.w	r3, [r7, #302]	; 0x12e
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8104328:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 810432c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8104330:	f402 0380 	and.w	r3, r2, #4194304	; 0x400000
 8104334:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8104338:	2300      	movs	r3, #0
 810433a:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 810433e:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	; 0xc8
 8104342:	460b      	mov	r3, r1
 8104344:	4313      	orrs	r3, r2
 8104346:	f000 80a0 	beq.w	810448a <HAL_RCCEx_PeriphCLKConfig+0x99e>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 810434a:	4b41      	ldr	r3, [pc, #260]	; (8104450 <HAL_RCCEx_PeriphCLKConfig+0x964>)
 810434c:	681b      	ldr	r3, [r3, #0]
 810434e:	4a40      	ldr	r2, [pc, #256]	; (8104450 <HAL_RCCEx_PeriphCLKConfig+0x964>)
 8104350:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8104354:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8104356:	f7fd fc65 	bl	8101c24 <HAL_GetTick>
 810435a:	f8c7 0128 	str.w	r0, [r7, #296]	; 0x128

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 810435e:	e00b      	b.n	8104378 <HAL_RCCEx_PeriphCLKConfig+0x88c>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8104360:	f7fd fc60 	bl	8101c24 <HAL_GetTick>
 8104364:	4602      	mov	r2, r0
 8104366:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 810436a:	1ad3      	subs	r3, r2, r3
 810436c:	2b64      	cmp	r3, #100	; 0x64
 810436e:	d903      	bls.n	8104378 <HAL_RCCEx_PeriphCLKConfig+0x88c>
      {
        ret = HAL_TIMEOUT;
 8104370:	2303      	movs	r3, #3
 8104372:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
        break;
 8104376:	e005      	b.n	8104384 <HAL_RCCEx_PeriphCLKConfig+0x898>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8104378:	4b35      	ldr	r3, [pc, #212]	; (8104450 <HAL_RCCEx_PeriphCLKConfig+0x964>)
 810437a:	681b      	ldr	r3, [r3, #0]
 810437c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8104380:	2b00      	cmp	r3, #0
 8104382:	d0ed      	beq.n	8104360 <HAL_RCCEx_PeriphCLKConfig+0x874>
      }
    }

    if (ret == HAL_OK)
 8104384:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8104388:	2b00      	cmp	r3, #0
 810438a:	d17a      	bne.n	8104482 <HAL_RCCEx_PeriphCLKConfig+0x996>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 810438c:	4b2f      	ldr	r3, [pc, #188]	; (810444c <HAL_RCCEx_PeriphCLKConfig+0x960>)
 810438e:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8104390:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8104394:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8104398:	4053      	eors	r3, r2
 810439a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 810439e:	2b00      	cmp	r3, #0
 81043a0:	d015      	beq.n	81043ce <HAL_RCCEx_PeriphCLKConfig+0x8e2>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 81043a2:	4b2a      	ldr	r3, [pc, #168]	; (810444c <HAL_RCCEx_PeriphCLKConfig+0x960>)
 81043a4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 81043a6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 81043aa:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 81043ae:	4b27      	ldr	r3, [pc, #156]	; (810444c <HAL_RCCEx_PeriphCLKConfig+0x960>)
 81043b0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 81043b2:	4a26      	ldr	r2, [pc, #152]	; (810444c <HAL_RCCEx_PeriphCLKConfig+0x960>)
 81043b4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 81043b8:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 81043ba:	4b24      	ldr	r3, [pc, #144]	; (810444c <HAL_RCCEx_PeriphCLKConfig+0x960>)
 81043bc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 81043be:	4a23      	ldr	r2, [pc, #140]	; (810444c <HAL_RCCEx_PeriphCLKConfig+0x960>)
 81043c0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 81043c4:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 81043c6:	4a21      	ldr	r2, [pc, #132]	; (810444c <HAL_RCCEx_PeriphCLKConfig+0x960>)
 81043c8:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 81043cc:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 81043ce:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 81043d2:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 81043d6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 81043da:	d118      	bne.n	810440e <HAL_RCCEx_PeriphCLKConfig+0x922>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 81043dc:	f7fd fc22 	bl	8101c24 <HAL_GetTick>
 81043e0:	f8c7 0128 	str.w	r0, [r7, #296]	; 0x128

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 81043e4:	e00d      	b.n	8104402 <HAL_RCCEx_PeriphCLKConfig+0x916>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 81043e6:	f7fd fc1d 	bl	8101c24 <HAL_GetTick>
 81043ea:	4602      	mov	r2, r0
 81043ec:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 81043f0:	1ad2      	subs	r2, r2, r3
 81043f2:	f241 3388 	movw	r3, #5000	; 0x1388
 81043f6:	429a      	cmp	r2, r3
 81043f8:	d903      	bls.n	8104402 <HAL_RCCEx_PeriphCLKConfig+0x916>
          {
            ret = HAL_TIMEOUT;
 81043fa:	2303      	movs	r3, #3
 81043fc:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
            break;
 8104400:	e005      	b.n	810440e <HAL_RCCEx_PeriphCLKConfig+0x922>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8104402:	4b12      	ldr	r3, [pc, #72]	; (810444c <HAL_RCCEx_PeriphCLKConfig+0x960>)
 8104404:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8104406:	f003 0302 	and.w	r3, r3, #2
 810440a:	2b00      	cmp	r3, #0
 810440c:	d0eb      	beq.n	81043e6 <HAL_RCCEx_PeriphCLKConfig+0x8fa>
          }
        }
      }

      if (ret == HAL_OK)
 810440e:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8104412:	2b00      	cmp	r3, #0
 8104414:	d130      	bne.n	8104478 <HAL_RCCEx_PeriphCLKConfig+0x98c>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8104416:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 810441a:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 810441e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8104422:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8104426:	d115      	bne.n	8104454 <HAL_RCCEx_PeriphCLKConfig+0x968>
 8104428:	4b08      	ldr	r3, [pc, #32]	; (810444c <HAL_RCCEx_PeriphCLKConfig+0x960>)
 810442a:	691b      	ldr	r3, [r3, #16]
 810442c:	f423 517c 	bic.w	r1, r3, #16128	; 0x3f00
 8104430:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8104434:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8104438:	091b      	lsrs	r3, r3, #4
 810443a:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 810443e:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8104442:	4a02      	ldr	r2, [pc, #8]	; (810444c <HAL_RCCEx_PeriphCLKConfig+0x960>)
 8104444:	430b      	orrs	r3, r1
 8104446:	6113      	str	r3, [r2, #16]
 8104448:	e00a      	b.n	8104460 <HAL_RCCEx_PeriphCLKConfig+0x974>
 810444a:	bf00      	nop
 810444c:	58024400 	.word	0x58024400
 8104450:	58024800 	.word	0x58024800
 8104454:	4bd4      	ldr	r3, [pc, #848]	; (81047a8 <HAL_RCCEx_PeriphCLKConfig+0xcbc>)
 8104456:	691b      	ldr	r3, [r3, #16]
 8104458:	4ad3      	ldr	r2, [pc, #844]	; (81047a8 <HAL_RCCEx_PeriphCLKConfig+0xcbc>)
 810445a:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 810445e:	6113      	str	r3, [r2, #16]
 8104460:	4bd1      	ldr	r3, [pc, #836]	; (81047a8 <HAL_RCCEx_PeriphCLKConfig+0xcbc>)
 8104462:	6f19      	ldr	r1, [r3, #112]	; 0x70
 8104464:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8104468:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 810446c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8104470:	4acd      	ldr	r2, [pc, #820]	; (81047a8 <HAL_RCCEx_PeriphCLKConfig+0xcbc>)
 8104472:	430b      	orrs	r3, r1
 8104474:	6713      	str	r3, [r2, #112]	; 0x70
 8104476:	e008      	b.n	810448a <HAL_RCCEx_PeriphCLKConfig+0x99e>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8104478:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 810447c:	f887 312e 	strb.w	r3, [r7, #302]	; 0x12e
 8104480:	e003      	b.n	810448a <HAL_RCCEx_PeriphCLKConfig+0x99e>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8104482:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8104486:	f887 312e 	strb.w	r3, [r7, #302]	; 0x12e
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 810448a:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 810448e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8104492:	f002 0301 	and.w	r3, r2, #1
 8104496:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 810449a:	2300      	movs	r3, #0
 810449c:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 81044a0:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 81044a4:	460b      	mov	r3, r1
 81044a6:	4313      	orrs	r3, r2
 81044a8:	f000 808b 	beq.w	81045c2 <HAL_RCCEx_PeriphCLKConfig+0xad6>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 81044ac:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 81044b0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 81044b4:	2b28      	cmp	r3, #40	; 0x28
 81044b6:	d86b      	bhi.n	8104590 <HAL_RCCEx_PeriphCLKConfig+0xaa4>
 81044b8:	a201      	add	r2, pc, #4	; (adr r2, 81044c0 <HAL_RCCEx_PeriphCLKConfig+0x9d4>)
 81044ba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 81044be:	bf00      	nop
 81044c0:	08104599 	.word	0x08104599
 81044c4:	08104591 	.word	0x08104591
 81044c8:	08104591 	.word	0x08104591
 81044cc:	08104591 	.word	0x08104591
 81044d0:	08104591 	.word	0x08104591
 81044d4:	08104591 	.word	0x08104591
 81044d8:	08104591 	.word	0x08104591
 81044dc:	08104591 	.word	0x08104591
 81044e0:	08104565 	.word	0x08104565
 81044e4:	08104591 	.word	0x08104591
 81044e8:	08104591 	.word	0x08104591
 81044ec:	08104591 	.word	0x08104591
 81044f0:	08104591 	.word	0x08104591
 81044f4:	08104591 	.word	0x08104591
 81044f8:	08104591 	.word	0x08104591
 81044fc:	08104591 	.word	0x08104591
 8104500:	0810457b 	.word	0x0810457b
 8104504:	08104591 	.word	0x08104591
 8104508:	08104591 	.word	0x08104591
 810450c:	08104591 	.word	0x08104591
 8104510:	08104591 	.word	0x08104591
 8104514:	08104591 	.word	0x08104591
 8104518:	08104591 	.word	0x08104591
 810451c:	08104591 	.word	0x08104591
 8104520:	08104599 	.word	0x08104599
 8104524:	08104591 	.word	0x08104591
 8104528:	08104591 	.word	0x08104591
 810452c:	08104591 	.word	0x08104591
 8104530:	08104591 	.word	0x08104591
 8104534:	08104591 	.word	0x08104591
 8104538:	08104591 	.word	0x08104591
 810453c:	08104591 	.word	0x08104591
 8104540:	08104599 	.word	0x08104599
 8104544:	08104591 	.word	0x08104591
 8104548:	08104591 	.word	0x08104591
 810454c:	08104591 	.word	0x08104591
 8104550:	08104591 	.word	0x08104591
 8104554:	08104591 	.word	0x08104591
 8104558:	08104591 	.word	0x08104591
 810455c:	08104591 	.word	0x08104591
 8104560:	08104599 	.word	0x08104599
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8104564:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8104568:	3308      	adds	r3, #8
 810456a:	2101      	movs	r1, #1
 810456c:	4618      	mov	r0, r3
 810456e:	f001 fe97 	bl	81062a0 <RCCEx_PLL2_Config>
 8104572:	4603      	mov	r3, r0
 8104574:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8104578:	e00f      	b.n	810459a <HAL_RCCEx_PeriphCLKConfig+0xaae>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 810457a:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 810457e:	3328      	adds	r3, #40	; 0x28
 8104580:	2101      	movs	r1, #1
 8104582:	4618      	mov	r0, r3
 8104584:	f001 ff3e 	bl	8106404 <RCCEx_PLL3_Config>
 8104588:	4603      	mov	r3, r0
 810458a:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 810458e:	e004      	b.n	810459a <HAL_RCCEx_PeriphCLKConfig+0xaae>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8104590:	2301      	movs	r3, #1
 8104592:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
        break;
 8104596:	e000      	b.n	810459a <HAL_RCCEx_PeriphCLKConfig+0xaae>
        break;
 8104598:	bf00      	nop
    }

    if (ret == HAL_OK)
 810459a:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 810459e:	2b00      	cmp	r3, #0
 81045a0:	d10b      	bne.n	81045ba <HAL_RCCEx_PeriphCLKConfig+0xace>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 81045a2:	4b81      	ldr	r3, [pc, #516]	; (81047a8 <HAL_RCCEx_PeriphCLKConfig+0xcbc>)
 81045a4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 81045a6:	f023 0138 	bic.w	r1, r3, #56	; 0x38
 81045aa:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 81045ae:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 81045b2:	4a7d      	ldr	r2, [pc, #500]	; (81047a8 <HAL_RCCEx_PeriphCLKConfig+0xcbc>)
 81045b4:	430b      	orrs	r3, r1
 81045b6:	6553      	str	r3, [r2, #84]	; 0x54
 81045b8:	e003      	b.n	81045c2 <HAL_RCCEx_PeriphCLKConfig+0xad6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 81045ba:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 81045be:	f887 312e 	strb.w	r3, [r7, #302]	; 0x12e
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 81045c2:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 81045c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 81045ca:	f002 0302 	and.w	r3, r2, #2
 81045ce:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 81045d2:	2300      	movs	r3, #0
 81045d4:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 81045d8:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	; 0xb8
 81045dc:	460b      	mov	r3, r1
 81045de:	4313      	orrs	r3, r2
 81045e0:	d042      	beq.n	8104668 <HAL_RCCEx_PeriphCLKConfig+0xb7c>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 81045e2:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 81045e6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 81045e8:	2b05      	cmp	r3, #5
 81045ea:	d825      	bhi.n	8104638 <HAL_RCCEx_PeriphCLKConfig+0xb4c>
 81045ec:	a201      	add	r2, pc, #4	; (adr r2, 81045f4 <HAL_RCCEx_PeriphCLKConfig+0xb08>)
 81045ee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 81045f2:	bf00      	nop
 81045f4:	08104641 	.word	0x08104641
 81045f8:	0810460d 	.word	0x0810460d
 81045fc:	08104623 	.word	0x08104623
 8104600:	08104641 	.word	0x08104641
 8104604:	08104641 	.word	0x08104641
 8104608:	08104641 	.word	0x08104641
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 810460c:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8104610:	3308      	adds	r3, #8
 8104612:	2101      	movs	r1, #1
 8104614:	4618      	mov	r0, r3
 8104616:	f001 fe43 	bl	81062a0 <RCCEx_PLL2_Config>
 810461a:	4603      	mov	r3, r0
 810461c:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8104620:	e00f      	b.n	8104642 <HAL_RCCEx_PeriphCLKConfig+0xb56>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8104622:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8104626:	3328      	adds	r3, #40	; 0x28
 8104628:	2101      	movs	r1, #1
 810462a:	4618      	mov	r0, r3
 810462c:	f001 feea 	bl	8106404 <RCCEx_PLL3_Config>
 8104630:	4603      	mov	r3, r0
 8104632:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8104636:	e004      	b.n	8104642 <HAL_RCCEx_PeriphCLKConfig+0xb56>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8104638:	2301      	movs	r3, #1
 810463a:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
        break;
 810463e:	e000      	b.n	8104642 <HAL_RCCEx_PeriphCLKConfig+0xb56>
        break;
 8104640:	bf00      	nop
    }

    if (ret == HAL_OK)
 8104642:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8104646:	2b00      	cmp	r3, #0
 8104648:	d10a      	bne.n	8104660 <HAL_RCCEx_PeriphCLKConfig+0xb74>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 810464a:	4b57      	ldr	r3, [pc, #348]	; (81047a8 <HAL_RCCEx_PeriphCLKConfig+0xcbc>)
 810464c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 810464e:	f023 0107 	bic.w	r1, r3, #7
 8104652:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8104656:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8104658:	4a53      	ldr	r2, [pc, #332]	; (81047a8 <HAL_RCCEx_PeriphCLKConfig+0xcbc>)
 810465a:	430b      	orrs	r3, r1
 810465c:	6553      	str	r3, [r2, #84]	; 0x54
 810465e:	e003      	b.n	8104668 <HAL_RCCEx_PeriphCLKConfig+0xb7c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8104660:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8104664:	f887 312e 	strb.w	r3, [r7, #302]	; 0x12e
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8104668:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 810466c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8104670:	f002 0304 	and.w	r3, r2, #4
 8104674:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8104678:	2300      	movs	r3, #0
 810467a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 810467e:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	; 0xb0
 8104682:	460b      	mov	r3, r1
 8104684:	4313      	orrs	r3, r2
 8104686:	d044      	beq.n	8104712 <HAL_RCCEx_PeriphCLKConfig+0xc26>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 8104688:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 810468c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8104690:	2b05      	cmp	r3, #5
 8104692:	d825      	bhi.n	81046e0 <HAL_RCCEx_PeriphCLKConfig+0xbf4>
 8104694:	a201      	add	r2, pc, #4	; (adr r2, 810469c <HAL_RCCEx_PeriphCLKConfig+0xbb0>)
 8104696:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 810469a:	bf00      	nop
 810469c:	081046e9 	.word	0x081046e9
 81046a0:	081046b5 	.word	0x081046b5
 81046a4:	081046cb 	.word	0x081046cb
 81046a8:	081046e9 	.word	0x081046e9
 81046ac:	081046e9 	.word	0x081046e9
 81046b0:	081046e9 	.word	0x081046e9
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 81046b4:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 81046b8:	3308      	adds	r3, #8
 81046ba:	2101      	movs	r1, #1
 81046bc:	4618      	mov	r0, r3
 81046be:	f001 fdef 	bl	81062a0 <RCCEx_PLL2_Config>
 81046c2:	4603      	mov	r3, r0
 81046c4:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 81046c8:	e00f      	b.n	81046ea <HAL_RCCEx_PeriphCLKConfig+0xbfe>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 81046ca:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 81046ce:	3328      	adds	r3, #40	; 0x28
 81046d0:	2101      	movs	r1, #1
 81046d2:	4618      	mov	r0, r3
 81046d4:	f001 fe96 	bl	8106404 <RCCEx_PLL3_Config>
 81046d8:	4603      	mov	r3, r0
 81046da:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 81046de:	e004      	b.n	81046ea <HAL_RCCEx_PeriphCLKConfig+0xbfe>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 81046e0:	2301      	movs	r3, #1
 81046e2:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
        break;
 81046e6:	e000      	b.n	81046ea <HAL_RCCEx_PeriphCLKConfig+0xbfe>
        break;
 81046e8:	bf00      	nop
    }

    if (ret == HAL_OK)
 81046ea:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 81046ee:	2b00      	cmp	r3, #0
 81046f0:	d10b      	bne.n	810470a <HAL_RCCEx_PeriphCLKConfig+0xc1e>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 81046f2:	4b2d      	ldr	r3, [pc, #180]	; (81047a8 <HAL_RCCEx_PeriphCLKConfig+0xcbc>)
 81046f4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 81046f6:	f023 0107 	bic.w	r1, r3, #7
 81046fa:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 81046fe:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8104702:	4a29      	ldr	r2, [pc, #164]	; (81047a8 <HAL_RCCEx_PeriphCLKConfig+0xcbc>)
 8104704:	430b      	orrs	r3, r1
 8104706:	6593      	str	r3, [r2, #88]	; 0x58
 8104708:	e003      	b.n	8104712 <HAL_RCCEx_PeriphCLKConfig+0xc26>
    }
    else
    {
      /* set overall return value */
      status = ret;
 810470a:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 810470e:	f887 312e 	strb.w	r3, [r7, #302]	; 0x12e
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8104712:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8104716:	e9d3 2300 	ldrd	r2, r3, [r3]
 810471a:	f002 0320 	and.w	r3, r2, #32
 810471e:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8104722:	2300      	movs	r3, #0
 8104724:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8104728:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 810472c:	460b      	mov	r3, r1
 810472e:	4313      	orrs	r3, r2
 8104730:	d057      	beq.n	81047e2 <HAL_RCCEx_PeriphCLKConfig+0xcf6>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 8104732:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8104736:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 810473a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 810473e:	d035      	beq.n	81047ac <HAL_RCCEx_PeriphCLKConfig+0xcc0>
 8104740:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8104744:	d82c      	bhi.n	81047a0 <HAL_RCCEx_PeriphCLKConfig+0xcb4>
 8104746:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 810474a:	d031      	beq.n	81047b0 <HAL_RCCEx_PeriphCLKConfig+0xcc4>
 810474c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8104750:	d826      	bhi.n	81047a0 <HAL_RCCEx_PeriphCLKConfig+0xcb4>
 8104752:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8104756:	d02d      	beq.n	81047b4 <HAL_RCCEx_PeriphCLKConfig+0xcc8>
 8104758:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 810475c:	d820      	bhi.n	81047a0 <HAL_RCCEx_PeriphCLKConfig+0xcb4>
 810475e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8104762:	d012      	beq.n	810478a <HAL_RCCEx_PeriphCLKConfig+0xc9e>
 8104764:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8104768:	d81a      	bhi.n	81047a0 <HAL_RCCEx_PeriphCLKConfig+0xcb4>
 810476a:	2b00      	cmp	r3, #0
 810476c:	d024      	beq.n	81047b8 <HAL_RCCEx_PeriphCLKConfig+0xccc>
 810476e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8104772:	d115      	bne.n	81047a0 <HAL_RCCEx_PeriphCLKConfig+0xcb4>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8104774:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8104778:	3308      	adds	r3, #8
 810477a:	2100      	movs	r1, #0
 810477c:	4618      	mov	r0, r3
 810477e:	f001 fd8f 	bl	81062a0 <RCCEx_PLL2_Config>
 8104782:	4603      	mov	r3, r0
 8104784:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8104788:	e017      	b.n	81047ba <HAL_RCCEx_PeriphCLKConfig+0xcce>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 810478a:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 810478e:	3328      	adds	r3, #40	; 0x28
 8104790:	2102      	movs	r1, #2
 8104792:	4618      	mov	r0, r3
 8104794:	f001 fe36 	bl	8106404 <RCCEx_PLL3_Config>
 8104798:	4603      	mov	r3, r0
 810479a:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 810479e:	e00c      	b.n	81047ba <HAL_RCCEx_PeriphCLKConfig+0xcce>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 81047a0:	2301      	movs	r3, #1
 81047a2:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
        break;
 81047a6:	e008      	b.n	81047ba <HAL_RCCEx_PeriphCLKConfig+0xcce>
 81047a8:	58024400 	.word	0x58024400
        break;
 81047ac:	bf00      	nop
 81047ae:	e004      	b.n	81047ba <HAL_RCCEx_PeriphCLKConfig+0xcce>
        break;
 81047b0:	bf00      	nop
 81047b2:	e002      	b.n	81047ba <HAL_RCCEx_PeriphCLKConfig+0xcce>
        break;
 81047b4:	bf00      	nop
 81047b6:	e000      	b.n	81047ba <HAL_RCCEx_PeriphCLKConfig+0xcce>
        break;
 81047b8:	bf00      	nop
    }

    if (ret == HAL_OK)
 81047ba:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 81047be:	2b00      	cmp	r3, #0
 81047c0:	d10b      	bne.n	81047da <HAL_RCCEx_PeriphCLKConfig+0xcee>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 81047c2:	4bc2      	ldr	r3, [pc, #776]	; (8104acc <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 81047c4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 81047c6:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 81047ca:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 81047ce:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 81047d2:	4abe      	ldr	r2, [pc, #760]	; (8104acc <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 81047d4:	430b      	orrs	r3, r1
 81047d6:	6553      	str	r3, [r2, #84]	; 0x54
 81047d8:	e003      	b.n	81047e2 <HAL_RCCEx_PeriphCLKConfig+0xcf6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 81047da:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 81047de:	f887 312e 	strb.w	r3, [r7, #302]	; 0x12e
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 81047e2:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 81047e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 81047ea:	f002 0340 	and.w	r3, r2, #64	; 0x40
 81047ee:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 81047f2:	2300      	movs	r3, #0
 81047f4:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 81047f8:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	; 0xa0
 81047fc:	460b      	mov	r3, r1
 81047fe:	4313      	orrs	r3, r2
 8104800:	d055      	beq.n	81048ae <HAL_RCCEx_PeriphCLKConfig+0xdc2>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 8104802:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8104806:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 810480a:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 810480e:	d033      	beq.n	8104878 <HAL_RCCEx_PeriphCLKConfig+0xd8c>
 8104810:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8104814:	d82c      	bhi.n	8104870 <HAL_RCCEx_PeriphCLKConfig+0xd84>
 8104816:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 810481a:	d02f      	beq.n	810487c <HAL_RCCEx_PeriphCLKConfig+0xd90>
 810481c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8104820:	d826      	bhi.n	8104870 <HAL_RCCEx_PeriphCLKConfig+0xd84>
 8104822:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8104826:	d02b      	beq.n	8104880 <HAL_RCCEx_PeriphCLKConfig+0xd94>
 8104828:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 810482c:	d820      	bhi.n	8104870 <HAL_RCCEx_PeriphCLKConfig+0xd84>
 810482e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8104832:	d012      	beq.n	810485a <HAL_RCCEx_PeriphCLKConfig+0xd6e>
 8104834:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8104838:	d81a      	bhi.n	8104870 <HAL_RCCEx_PeriphCLKConfig+0xd84>
 810483a:	2b00      	cmp	r3, #0
 810483c:	d022      	beq.n	8104884 <HAL_RCCEx_PeriphCLKConfig+0xd98>
 810483e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8104842:	d115      	bne.n	8104870 <HAL_RCCEx_PeriphCLKConfig+0xd84>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8104844:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8104848:	3308      	adds	r3, #8
 810484a:	2100      	movs	r1, #0
 810484c:	4618      	mov	r0, r3
 810484e:	f001 fd27 	bl	81062a0 <RCCEx_PLL2_Config>
 8104852:	4603      	mov	r3, r0
 8104854:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8104858:	e015      	b.n	8104886 <HAL_RCCEx_PeriphCLKConfig+0xd9a>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 810485a:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 810485e:	3328      	adds	r3, #40	; 0x28
 8104860:	2102      	movs	r1, #2
 8104862:	4618      	mov	r0, r3
 8104864:	f001 fdce 	bl	8106404 <RCCEx_PLL3_Config>
 8104868:	4603      	mov	r3, r0
 810486a:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 810486e:	e00a      	b.n	8104886 <HAL_RCCEx_PeriphCLKConfig+0xd9a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8104870:	2301      	movs	r3, #1
 8104872:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
        break;
 8104876:	e006      	b.n	8104886 <HAL_RCCEx_PeriphCLKConfig+0xd9a>
        break;
 8104878:	bf00      	nop
 810487a:	e004      	b.n	8104886 <HAL_RCCEx_PeriphCLKConfig+0xd9a>
        break;
 810487c:	bf00      	nop
 810487e:	e002      	b.n	8104886 <HAL_RCCEx_PeriphCLKConfig+0xd9a>
        break;
 8104880:	bf00      	nop
 8104882:	e000      	b.n	8104886 <HAL_RCCEx_PeriphCLKConfig+0xd9a>
        break;
 8104884:	bf00      	nop
    }

    if (ret == HAL_OK)
 8104886:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 810488a:	2b00      	cmp	r3, #0
 810488c:	d10b      	bne.n	81048a6 <HAL_RCCEx_PeriphCLKConfig+0xdba>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 810488e:	4b8f      	ldr	r3, [pc, #572]	; (8104acc <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8104890:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8104892:	f423 51e0 	bic.w	r1, r3, #7168	; 0x1c00
 8104896:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 810489a:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 810489e:	4a8b      	ldr	r2, [pc, #556]	; (8104acc <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 81048a0:	430b      	orrs	r3, r1
 81048a2:	6593      	str	r3, [r2, #88]	; 0x58
 81048a4:	e003      	b.n	81048ae <HAL_RCCEx_PeriphCLKConfig+0xdc2>
    }
    else
    {
      /* set overall return value */
      status = ret;
 81048a6:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 81048aa:	f887 312e 	strb.w	r3, [r7, #302]	; 0x12e
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 81048ae:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 81048b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 81048b6:	f002 0380 	and.w	r3, r2, #128	; 0x80
 81048ba:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 81048be:	2300      	movs	r3, #0
 81048c0:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 81048c4:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	; 0x98
 81048c8:	460b      	mov	r3, r1
 81048ca:	4313      	orrs	r3, r2
 81048cc:	d055      	beq.n	810497a <HAL_RCCEx_PeriphCLKConfig+0xe8e>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 81048ce:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 81048d2:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 81048d6:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 81048da:	d033      	beq.n	8104944 <HAL_RCCEx_PeriphCLKConfig+0xe58>
 81048dc:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 81048e0:	d82c      	bhi.n	810493c <HAL_RCCEx_PeriphCLKConfig+0xe50>
 81048e2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 81048e6:	d02f      	beq.n	8104948 <HAL_RCCEx_PeriphCLKConfig+0xe5c>
 81048e8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 81048ec:	d826      	bhi.n	810493c <HAL_RCCEx_PeriphCLKConfig+0xe50>
 81048ee:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 81048f2:	d02b      	beq.n	810494c <HAL_RCCEx_PeriphCLKConfig+0xe60>
 81048f4:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 81048f8:	d820      	bhi.n	810493c <HAL_RCCEx_PeriphCLKConfig+0xe50>
 81048fa:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 81048fe:	d012      	beq.n	8104926 <HAL_RCCEx_PeriphCLKConfig+0xe3a>
 8104900:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8104904:	d81a      	bhi.n	810493c <HAL_RCCEx_PeriphCLKConfig+0xe50>
 8104906:	2b00      	cmp	r3, #0
 8104908:	d022      	beq.n	8104950 <HAL_RCCEx_PeriphCLKConfig+0xe64>
 810490a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 810490e:	d115      	bne.n	810493c <HAL_RCCEx_PeriphCLKConfig+0xe50>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8104910:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8104914:	3308      	adds	r3, #8
 8104916:	2100      	movs	r1, #0
 8104918:	4618      	mov	r0, r3
 810491a:	f001 fcc1 	bl	81062a0 <RCCEx_PLL2_Config>
 810491e:	4603      	mov	r3, r0
 8104920:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8104924:	e015      	b.n	8104952 <HAL_RCCEx_PeriphCLKConfig+0xe66>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8104926:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 810492a:	3328      	adds	r3, #40	; 0x28
 810492c:	2102      	movs	r1, #2
 810492e:	4618      	mov	r0, r3
 8104930:	f001 fd68 	bl	8106404 <RCCEx_PLL3_Config>
 8104934:	4603      	mov	r3, r0
 8104936:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 810493a:	e00a      	b.n	8104952 <HAL_RCCEx_PeriphCLKConfig+0xe66>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 810493c:	2301      	movs	r3, #1
 810493e:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
        break;
 8104942:	e006      	b.n	8104952 <HAL_RCCEx_PeriphCLKConfig+0xe66>
        break;
 8104944:	bf00      	nop
 8104946:	e004      	b.n	8104952 <HAL_RCCEx_PeriphCLKConfig+0xe66>
        break;
 8104948:	bf00      	nop
 810494a:	e002      	b.n	8104952 <HAL_RCCEx_PeriphCLKConfig+0xe66>
        break;
 810494c:	bf00      	nop
 810494e:	e000      	b.n	8104952 <HAL_RCCEx_PeriphCLKConfig+0xe66>
        break;
 8104950:	bf00      	nop
    }

    if (ret == HAL_OK)
 8104952:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8104956:	2b00      	cmp	r3, #0
 8104958:	d10b      	bne.n	8104972 <HAL_RCCEx_PeriphCLKConfig+0xe86>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 810495a:	4b5c      	ldr	r3, [pc, #368]	; (8104acc <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 810495c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 810495e:	f423 4160 	bic.w	r1, r3, #57344	; 0xe000
 8104962:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8104966:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 810496a:	4a58      	ldr	r2, [pc, #352]	; (8104acc <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 810496c:	430b      	orrs	r3, r1
 810496e:	6593      	str	r3, [r2, #88]	; 0x58
 8104970:	e003      	b.n	810497a <HAL_RCCEx_PeriphCLKConfig+0xe8e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8104972:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8104976:	f887 312e 	strb.w	r3, [r7, #302]	; 0x12e

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 810497a:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 810497e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8104982:	f002 0308 	and.w	r3, r2, #8
 8104986:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 810498a:	2300      	movs	r3, #0
 810498c:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8104990:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	; 0x90
 8104994:	460b      	mov	r3, r1
 8104996:	4313      	orrs	r3, r2
 8104998:	d01e      	beq.n	81049d8 <HAL_RCCEx_PeriphCLKConfig+0xeec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 810499a:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 810499e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 81049a2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 81049a6:	d10c      	bne.n	81049c2 <HAL_RCCEx_PeriphCLKConfig+0xed6>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 81049a8:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 81049ac:	3328      	adds	r3, #40	; 0x28
 81049ae:	2102      	movs	r1, #2
 81049b0:	4618      	mov	r0, r3
 81049b2:	f001 fd27 	bl	8106404 <RCCEx_PLL3_Config>
 81049b6:	4603      	mov	r3, r0
 81049b8:	2b00      	cmp	r3, #0
 81049ba:	d002      	beq.n	81049c2 <HAL_RCCEx_PeriphCLKConfig+0xed6>
      {
        status = HAL_ERROR;
 81049bc:	2301      	movs	r3, #1
 81049be:	f887 312e 	strb.w	r3, [r7, #302]	; 0x12e
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 81049c2:	4b42      	ldr	r3, [pc, #264]	; (8104acc <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 81049c4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 81049c6:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 81049ca:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 81049ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 81049d2:	4a3e      	ldr	r2, [pc, #248]	; (8104acc <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 81049d4:	430b      	orrs	r3, r1
 81049d6:	6553      	str	r3, [r2, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 81049d8:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 81049dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 81049e0:	f002 0310 	and.w	r3, r2, #16
 81049e4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 81049e8:	2300      	movs	r3, #0
 81049ea:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 81049ee:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	; 0x88
 81049f2:	460b      	mov	r3, r1
 81049f4:	4313      	orrs	r3, r2
 81049f6:	d01e      	beq.n	8104a36 <HAL_RCCEx_PeriphCLKConfig+0xf4a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 81049f8:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 81049fc:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8104a00:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8104a04:	d10c      	bne.n	8104a20 <HAL_RCCEx_PeriphCLKConfig+0xf34>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8104a06:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8104a0a:	3328      	adds	r3, #40	; 0x28
 8104a0c:	2102      	movs	r1, #2
 8104a0e:	4618      	mov	r0, r3
 8104a10:	f001 fcf8 	bl	8106404 <RCCEx_PLL3_Config>
 8104a14:	4603      	mov	r3, r0
 8104a16:	2b00      	cmp	r3, #0
 8104a18:	d002      	beq.n	8104a20 <HAL_RCCEx_PeriphCLKConfig+0xf34>
      {
        status = HAL_ERROR;
 8104a1a:	2301      	movs	r3, #1
 8104a1c:	f887 312e 	strb.w	r3, [r7, #302]	; 0x12e
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8104a20:	4b2a      	ldr	r3, [pc, #168]	; (8104acc <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8104a22:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8104a24:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8104a28:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8104a2c:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8104a30:	4a26      	ldr	r2, [pc, #152]	; (8104acc <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8104a32:	430b      	orrs	r3, r1
 8104a34:	6593      	str	r3, [r2, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8104a36:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8104a3a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8104a3e:	f402 2300 	and.w	r3, r2, #524288	; 0x80000
 8104a42:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8104a46:	2300      	movs	r3, #0
 8104a48:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8104a4c:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	; 0x80
 8104a50:	460b      	mov	r3, r1
 8104a52:	4313      	orrs	r3, r2
 8104a54:	d040      	beq.n	8104ad8 <HAL_RCCEx_PeriphCLKConfig+0xfec>
  {
    switch (PeriphClkInit->AdcClockSelection)
 8104a56:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8104a5a:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8104a5e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8104a62:	d022      	beq.n	8104aaa <HAL_RCCEx_PeriphCLKConfig+0xfbe>
 8104a64:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8104a68:	d81b      	bhi.n	8104aa2 <HAL_RCCEx_PeriphCLKConfig+0xfb6>
 8104a6a:	2b00      	cmp	r3, #0
 8104a6c:	d003      	beq.n	8104a76 <HAL_RCCEx_PeriphCLKConfig+0xf8a>
 8104a6e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8104a72:	d00b      	beq.n	8104a8c <HAL_RCCEx_PeriphCLKConfig+0xfa0>
 8104a74:	e015      	b.n	8104aa2 <HAL_RCCEx_PeriphCLKConfig+0xfb6>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8104a76:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8104a7a:	3308      	adds	r3, #8
 8104a7c:	2100      	movs	r1, #0
 8104a7e:	4618      	mov	r0, r3
 8104a80:	f001 fc0e 	bl	81062a0 <RCCEx_PLL2_Config>
 8104a84:	4603      	mov	r3, r0
 8104a86:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f

        /* ADC clock source configuration done later after clock selection check */
        break;
 8104a8a:	e00f      	b.n	8104aac <HAL_RCCEx_PeriphCLKConfig+0xfc0>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8104a8c:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8104a90:	3328      	adds	r3, #40	; 0x28
 8104a92:	2102      	movs	r1, #2
 8104a94:	4618      	mov	r0, r3
 8104a96:	f001 fcb5 	bl	8106404 <RCCEx_PLL3_Config>
 8104a9a:	4603      	mov	r3, r0
 8104a9c:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f

        /* ADC clock source configuration done later after clock selection check */
        break;
 8104aa0:	e004      	b.n	8104aac <HAL_RCCEx_PeriphCLKConfig+0xfc0>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8104aa2:	2301      	movs	r3, #1
 8104aa4:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
        break;
 8104aa8:	e000      	b.n	8104aac <HAL_RCCEx_PeriphCLKConfig+0xfc0>
        break;
 8104aaa:	bf00      	nop
    }

    if (ret == HAL_OK)
 8104aac:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8104ab0:	2b00      	cmp	r3, #0
 8104ab2:	d10d      	bne.n	8104ad0 <HAL_RCCEx_PeriphCLKConfig+0xfe4>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8104ab4:	4b05      	ldr	r3, [pc, #20]	; (8104acc <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8104ab6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8104ab8:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 8104abc:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8104ac0:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8104ac4:	4a01      	ldr	r2, [pc, #4]	; (8104acc <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8104ac6:	430b      	orrs	r3, r1
 8104ac8:	6593      	str	r3, [r2, #88]	; 0x58
 8104aca:	e005      	b.n	8104ad8 <HAL_RCCEx_PeriphCLKConfig+0xfec>
 8104acc:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8104ad0:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8104ad4:	f887 312e 	strb.w	r3, [r7, #302]	; 0x12e
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8104ad8:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8104adc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8104ae0:	f402 2380 	and.w	r3, r2, #262144	; 0x40000
 8104ae4:	67bb      	str	r3, [r7, #120]	; 0x78
 8104ae6:	2300      	movs	r3, #0
 8104ae8:	67fb      	str	r3, [r7, #124]	; 0x7c
 8104aea:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	; 0x78
 8104aee:	460b      	mov	r3, r1
 8104af0:	4313      	orrs	r3, r2
 8104af2:	d03b      	beq.n	8104b6c <HAL_RCCEx_PeriphCLKConfig+0x1080>
  {

    switch (PeriphClkInit->UsbClockSelection)
 8104af4:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8104af8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8104afc:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8104b00:	d01f      	beq.n	8104b42 <HAL_RCCEx_PeriphCLKConfig+0x1056>
 8104b02:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8104b06:	d818      	bhi.n	8104b3a <HAL_RCCEx_PeriphCLKConfig+0x104e>
 8104b08:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8104b0c:	d003      	beq.n	8104b16 <HAL_RCCEx_PeriphCLKConfig+0x102a>
 8104b0e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8104b12:	d007      	beq.n	8104b24 <HAL_RCCEx_PeriphCLKConfig+0x1038>
 8104b14:	e011      	b.n	8104b3a <HAL_RCCEx_PeriphCLKConfig+0x104e>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8104b16:	4b64      	ldr	r3, [pc, #400]	; (8104ca8 <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 8104b18:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8104b1a:	4a63      	ldr	r2, [pc, #396]	; (8104ca8 <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 8104b1c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8104b20:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 8104b22:	e00f      	b.n	8104b44 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8104b24:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8104b28:	3328      	adds	r3, #40	; 0x28
 8104b2a:	2101      	movs	r1, #1
 8104b2c:	4618      	mov	r0, r3
 8104b2e:	f001 fc69 	bl	8106404 <RCCEx_PLL3_Config>
 8104b32:	4603      	mov	r3, r0
 8104b34:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f

        /* USB clock source configuration done later after clock selection check */
        break;
 8104b38:	e004      	b.n	8104b44 <HAL_RCCEx_PeriphCLKConfig+0x1058>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8104b3a:	2301      	movs	r3, #1
 8104b3c:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
        break;
 8104b40:	e000      	b.n	8104b44 <HAL_RCCEx_PeriphCLKConfig+0x1058>
        break;
 8104b42:	bf00      	nop
    }

    if (ret == HAL_OK)
 8104b44:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8104b48:	2b00      	cmp	r3, #0
 8104b4a:	d10b      	bne.n	8104b64 <HAL_RCCEx_PeriphCLKConfig+0x1078>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8104b4c:	4b56      	ldr	r3, [pc, #344]	; (8104ca8 <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 8104b4e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8104b50:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 8104b54:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8104b58:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8104b5c:	4a52      	ldr	r2, [pc, #328]	; (8104ca8 <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 8104b5e:	430b      	orrs	r3, r1
 8104b60:	6553      	str	r3, [r2, #84]	; 0x54
 8104b62:	e003      	b.n	8104b6c <HAL_RCCEx_PeriphCLKConfig+0x1080>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8104b64:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8104b68:	f887 312e 	strb.w	r3, [r7, #302]	; 0x12e
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8104b6c:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8104b70:	e9d3 2300 	ldrd	r2, r3, [r3]
 8104b74:	f402 3380 	and.w	r3, r2, #65536	; 0x10000
 8104b78:	673b      	str	r3, [r7, #112]	; 0x70
 8104b7a:	2300      	movs	r3, #0
 8104b7c:	677b      	str	r3, [r7, #116]	; 0x74
 8104b7e:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	; 0x70
 8104b82:	460b      	mov	r3, r1
 8104b84:	4313      	orrs	r3, r2
 8104b86:	d031      	beq.n	8104bec <HAL_RCCEx_PeriphCLKConfig+0x1100>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 8104b88:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8104b8c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8104b8e:	2b00      	cmp	r3, #0
 8104b90:	d003      	beq.n	8104b9a <HAL_RCCEx_PeriphCLKConfig+0x10ae>
 8104b92:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8104b96:	d007      	beq.n	8104ba8 <HAL_RCCEx_PeriphCLKConfig+0x10bc>
 8104b98:	e011      	b.n	8104bbe <HAL_RCCEx_PeriphCLKConfig+0x10d2>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8104b9a:	4b43      	ldr	r3, [pc, #268]	; (8104ca8 <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 8104b9c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8104b9e:	4a42      	ldr	r2, [pc, #264]	; (8104ca8 <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 8104ba0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8104ba4:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8104ba6:	e00e      	b.n	8104bc6 <HAL_RCCEx_PeriphCLKConfig+0x10da>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8104ba8:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8104bac:	3308      	adds	r3, #8
 8104bae:	2102      	movs	r1, #2
 8104bb0:	4618      	mov	r0, r3
 8104bb2:	f001 fb75 	bl	81062a0 <RCCEx_PLL2_Config>
 8104bb6:	4603      	mov	r3, r0
 8104bb8:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8104bbc:	e003      	b.n	8104bc6 <HAL_RCCEx_PeriphCLKConfig+0x10da>

      default:
        ret = HAL_ERROR;
 8104bbe:	2301      	movs	r3, #1
 8104bc0:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
        break;
 8104bc4:	bf00      	nop
    }

    if (ret == HAL_OK)
 8104bc6:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8104bca:	2b00      	cmp	r3, #0
 8104bcc:	d10a      	bne.n	8104be4 <HAL_RCCEx_PeriphCLKConfig+0x10f8>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8104bce:	4b36      	ldr	r3, [pc, #216]	; (8104ca8 <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 8104bd0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8104bd2:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8104bd6:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8104bda:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8104bdc:	4a32      	ldr	r2, [pc, #200]	; (8104ca8 <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 8104bde:	430b      	orrs	r3, r1
 8104be0:	64d3      	str	r3, [r2, #76]	; 0x4c
 8104be2:	e003      	b.n	8104bec <HAL_RCCEx_PeriphCLKConfig+0x1100>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8104be4:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8104be8:	f887 312e 	strb.w	r3, [r7, #302]	; 0x12e
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8104bec:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8104bf0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8104bf4:	f002 5300 	and.w	r3, r2, #536870912	; 0x20000000
 8104bf8:	66bb      	str	r3, [r7, #104]	; 0x68
 8104bfa:	2300      	movs	r3, #0
 8104bfc:	66fb      	str	r3, [r7, #108]	; 0x6c
 8104bfe:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	; 0x68
 8104c02:	460b      	mov	r3, r1
 8104c04:	4313      	orrs	r3, r2
 8104c06:	d00c      	beq.n	8104c22 <HAL_RCCEx_PeriphCLKConfig+0x1136>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8104c08:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8104c0c:	3328      	adds	r3, #40	; 0x28
 8104c0e:	2102      	movs	r1, #2
 8104c10:	4618      	mov	r0, r3
 8104c12:	f001 fbf7 	bl	8106404 <RCCEx_PLL3_Config>
 8104c16:	4603      	mov	r3, r0
 8104c18:	2b00      	cmp	r3, #0
 8104c1a:	d002      	beq.n	8104c22 <HAL_RCCEx_PeriphCLKConfig+0x1136>
    {
      status = HAL_ERROR;
 8104c1c:	2301      	movs	r3, #1
 8104c1e:	f887 312e 	strb.w	r3, [r7, #302]	; 0x12e
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8104c22:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8104c26:	e9d3 2300 	ldrd	r2, r3, [r3]
 8104c2a:	f402 3300 	and.w	r3, r2, #131072	; 0x20000
 8104c2e:	663b      	str	r3, [r7, #96]	; 0x60
 8104c30:	2300      	movs	r3, #0
 8104c32:	667b      	str	r3, [r7, #100]	; 0x64
 8104c34:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	; 0x60
 8104c38:	460b      	mov	r3, r1
 8104c3a:	4313      	orrs	r3, r2
 8104c3c:	d03a      	beq.n	8104cb4 <HAL_RCCEx_PeriphCLKConfig+0x11c8>
  {

    switch (PeriphClkInit->RngClockSelection)
 8104c3e:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8104c42:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8104c46:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8104c4a:	d018      	beq.n	8104c7e <HAL_RCCEx_PeriphCLKConfig+0x1192>
 8104c4c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8104c50:	d811      	bhi.n	8104c76 <HAL_RCCEx_PeriphCLKConfig+0x118a>
 8104c52:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8104c56:	d014      	beq.n	8104c82 <HAL_RCCEx_PeriphCLKConfig+0x1196>
 8104c58:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8104c5c:	d80b      	bhi.n	8104c76 <HAL_RCCEx_PeriphCLKConfig+0x118a>
 8104c5e:	2b00      	cmp	r3, #0
 8104c60:	d011      	beq.n	8104c86 <HAL_RCCEx_PeriphCLKConfig+0x119a>
 8104c62:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8104c66:	d106      	bne.n	8104c76 <HAL_RCCEx_PeriphCLKConfig+0x118a>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8104c68:	4b0f      	ldr	r3, [pc, #60]	; (8104ca8 <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 8104c6a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8104c6c:	4a0e      	ldr	r2, [pc, #56]	; (8104ca8 <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 8104c6e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8104c72:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 8104c74:	e008      	b.n	8104c88 <HAL_RCCEx_PeriphCLKConfig+0x119c>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8104c76:	2301      	movs	r3, #1
 8104c78:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
        break;
 8104c7c:	e004      	b.n	8104c88 <HAL_RCCEx_PeriphCLKConfig+0x119c>
        break;
 8104c7e:	bf00      	nop
 8104c80:	e002      	b.n	8104c88 <HAL_RCCEx_PeriphCLKConfig+0x119c>
        break;
 8104c82:	bf00      	nop
 8104c84:	e000      	b.n	8104c88 <HAL_RCCEx_PeriphCLKConfig+0x119c>
        break;
 8104c86:	bf00      	nop
    }

    if (ret == HAL_OK)
 8104c88:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8104c8c:	2b00      	cmp	r3, #0
 8104c8e:	d10d      	bne.n	8104cac <HAL_RCCEx_PeriphCLKConfig+0x11c0>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8104c90:	4b05      	ldr	r3, [pc, #20]	; (8104ca8 <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 8104c92:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8104c94:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8104c98:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8104c9c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8104ca0:	4a01      	ldr	r2, [pc, #4]	; (8104ca8 <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 8104ca2:	430b      	orrs	r3, r1
 8104ca4:	6553      	str	r3, [r2, #84]	; 0x54
 8104ca6:	e005      	b.n	8104cb4 <HAL_RCCEx_PeriphCLKConfig+0x11c8>
 8104ca8:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8104cac:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8104cb0:	f887 312e 	strb.w	r3, [r7, #302]	; 0x12e
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8104cb4:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8104cb8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8104cbc:	f402 1380 	and.w	r3, r2, #1048576	; 0x100000
 8104cc0:	65bb      	str	r3, [r7, #88]	; 0x58
 8104cc2:	2300      	movs	r3, #0
 8104cc4:	65fb      	str	r3, [r7, #92]	; 0x5c
 8104cc6:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	; 0x58
 8104cca:	460b      	mov	r3, r1
 8104ccc:	4313      	orrs	r3, r2
 8104cce:	d009      	beq.n	8104ce4 <HAL_RCCEx_PeriphCLKConfig+0x11f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8104cd0:	4baa      	ldr	r3, [pc, #680]	; (8104f7c <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 8104cd2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8104cd4:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8104cd8:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8104cdc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8104cde:	4aa7      	ldr	r2, [pc, #668]	; (8104f7c <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 8104ce0:	430b      	orrs	r3, r1
 8104ce2:	6513      	str	r3, [r2, #80]	; 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 8104ce4:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8104ce8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8104cec:	f002 5380 	and.w	r3, r2, #268435456	; 0x10000000
 8104cf0:	653b      	str	r3, [r7, #80]	; 0x50
 8104cf2:	2300      	movs	r3, #0
 8104cf4:	657b      	str	r3, [r7, #84]	; 0x54
 8104cf6:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	; 0x50
 8104cfa:	460b      	mov	r3, r1
 8104cfc:	4313      	orrs	r3, r2
 8104cfe:	d00a      	beq.n	8104d16 <HAL_RCCEx_PeriphCLKConfig+0x122a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 8104d00:	4b9e      	ldr	r3, [pc, #632]	; (8104f7c <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 8104d02:	691b      	ldr	r3, [r3, #16]
 8104d04:	f423 4180 	bic.w	r1, r3, #16384	; 0x4000
 8104d08:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8104d0c:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8104d10:	4a9a      	ldr	r2, [pc, #616]	; (8104f7c <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 8104d12:	430b      	orrs	r3, r1
 8104d14:	6113      	str	r3, [r2, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8104d16:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8104d1a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8104d1e:	f402 1300 	and.w	r3, r2, #2097152	; 0x200000
 8104d22:	64bb      	str	r3, [r7, #72]	; 0x48
 8104d24:	2300      	movs	r3, #0
 8104d26:	64fb      	str	r3, [r7, #76]	; 0x4c
 8104d28:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	; 0x48
 8104d2c:	460b      	mov	r3, r1
 8104d2e:	4313      	orrs	r3, r2
 8104d30:	d009      	beq.n	8104d46 <HAL_RCCEx_PeriphCLKConfig+0x125a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8104d32:	4b92      	ldr	r3, [pc, #584]	; (8104f7c <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 8104d34:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8104d36:	f023 7180 	bic.w	r1, r3, #16777216	; 0x1000000
 8104d3a:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8104d3e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8104d40:	4a8e      	ldr	r2, [pc, #568]	; (8104f7c <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 8104d42:	430b      	orrs	r3, r1
 8104d44:	6513      	str	r3, [r2, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8104d46:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8104d4a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8104d4e:	f002 4380 	and.w	r3, r2, #1073741824	; 0x40000000
 8104d52:	643b      	str	r3, [r7, #64]	; 0x40
 8104d54:	2300      	movs	r3, #0
 8104d56:	647b      	str	r3, [r7, #68]	; 0x44
 8104d58:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	; 0x40
 8104d5c:	460b      	mov	r3, r1
 8104d5e:	4313      	orrs	r3, r2
 8104d60:	d00e      	beq.n	8104d80 <HAL_RCCEx_PeriphCLKConfig+0x1294>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8104d62:	4b86      	ldr	r3, [pc, #536]	; (8104f7c <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 8104d64:	691b      	ldr	r3, [r3, #16]
 8104d66:	4a85      	ldr	r2, [pc, #532]	; (8104f7c <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 8104d68:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8104d6c:	6113      	str	r3, [r2, #16]
 8104d6e:	4b83      	ldr	r3, [pc, #524]	; (8104f7c <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 8104d70:	6919      	ldr	r1, [r3, #16]
 8104d72:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8104d76:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8104d7a:	4a80      	ldr	r2, [pc, #512]	; (8104f7c <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 8104d7c:	430b      	orrs	r3, r1
 8104d7e:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8104d80:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8104d84:	e9d3 2300 	ldrd	r2, r3, [r3]
 8104d88:	f002 4300 	and.w	r3, r2, #2147483648	; 0x80000000
 8104d8c:	63bb      	str	r3, [r7, #56]	; 0x38
 8104d8e:	2300      	movs	r3, #0
 8104d90:	63fb      	str	r3, [r7, #60]	; 0x3c
 8104d92:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	; 0x38
 8104d96:	460b      	mov	r3, r1
 8104d98:	4313      	orrs	r3, r2
 8104d9a:	d009      	beq.n	8104db0 <HAL_RCCEx_PeriphCLKConfig+0x12c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8104d9c:	4b77      	ldr	r3, [pc, #476]	; (8104f7c <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 8104d9e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8104da0:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 8104da4:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8104da8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8104daa:	4a74      	ldr	r2, [pc, #464]	; (8104f7c <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 8104dac:	430b      	orrs	r3, r1
 8104dae:	64d3      	str	r3, [r2, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8104db0:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8104db4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8104db8:	f402 0300 	and.w	r3, r2, #8388608	; 0x800000
 8104dbc:	633b      	str	r3, [r7, #48]	; 0x30
 8104dbe:	2300      	movs	r3, #0
 8104dc0:	637b      	str	r3, [r7, #52]	; 0x34
 8104dc2:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	; 0x30
 8104dc6:	460b      	mov	r3, r1
 8104dc8:	4313      	orrs	r3, r2
 8104dca:	d00a      	beq.n	8104de2 <HAL_RCCEx_PeriphCLKConfig+0x12f6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8104dcc:	4b6b      	ldr	r3, [pc, #428]	; (8104f7c <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 8104dce:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8104dd0:	f423 0140 	bic.w	r1, r3, #12582912	; 0xc00000
 8104dd4:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8104dd8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8104ddc:	4a67      	ldr	r2, [pc, #412]	; (8104f7c <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 8104dde:	430b      	orrs	r3, r1
 8104de0:	6553      	str	r3, [r2, #84]	; 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 8104de2:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8104de6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8104dea:	2100      	movs	r1, #0
 8104dec:	62b9      	str	r1, [r7, #40]	; 0x28
 8104dee:	f003 0301 	and.w	r3, r3, #1
 8104df2:	62fb      	str	r3, [r7, #44]	; 0x2c
 8104df4:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	; 0x28
 8104df8:	460b      	mov	r3, r1
 8104dfa:	4313      	orrs	r3, r2
 8104dfc:	d011      	beq.n	8104e22 <HAL_RCCEx_PeriphCLKConfig+0x1336>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8104dfe:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8104e02:	3308      	adds	r3, #8
 8104e04:	2100      	movs	r1, #0
 8104e06:	4618      	mov	r0, r3
 8104e08:	f001 fa4a 	bl	81062a0 <RCCEx_PLL2_Config>
 8104e0c:	4603      	mov	r3, r0
 8104e0e:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
    
    if (ret == HAL_OK)
 8104e12:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8104e16:	2b00      	cmp	r3, #0
 8104e18:	d003      	beq.n	8104e22 <HAL_RCCEx_PeriphCLKConfig+0x1336>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8104e1a:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8104e1e:	f887 312e 	strb.w	r3, [r7, #302]	; 0x12e
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 8104e22:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8104e26:	e9d3 2300 	ldrd	r2, r3, [r3]
 8104e2a:	2100      	movs	r1, #0
 8104e2c:	6239      	str	r1, [r7, #32]
 8104e2e:	f003 0302 	and.w	r3, r3, #2
 8104e32:	627b      	str	r3, [r7, #36]	; 0x24
 8104e34:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8104e38:	460b      	mov	r3, r1
 8104e3a:	4313      	orrs	r3, r2
 8104e3c:	d011      	beq.n	8104e62 <HAL_RCCEx_PeriphCLKConfig+0x1376>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8104e3e:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8104e42:	3308      	adds	r3, #8
 8104e44:	2101      	movs	r1, #1
 8104e46:	4618      	mov	r0, r3
 8104e48:	f001 fa2a 	bl	81062a0 <RCCEx_PLL2_Config>
 8104e4c:	4603      	mov	r3, r0
 8104e4e:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
    
    if (ret == HAL_OK)
 8104e52:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8104e56:	2b00      	cmp	r3, #0
 8104e58:	d003      	beq.n	8104e62 <HAL_RCCEx_PeriphCLKConfig+0x1376>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8104e5a:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8104e5e:	f887 312e 	strb.w	r3, [r7, #302]	; 0x12e
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 8104e62:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8104e66:	e9d3 2300 	ldrd	r2, r3, [r3]
 8104e6a:	2100      	movs	r1, #0
 8104e6c:	61b9      	str	r1, [r7, #24]
 8104e6e:	f003 0304 	and.w	r3, r3, #4
 8104e72:	61fb      	str	r3, [r7, #28]
 8104e74:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8104e78:	460b      	mov	r3, r1
 8104e7a:	4313      	orrs	r3, r2
 8104e7c:	d011      	beq.n	8104ea2 <HAL_RCCEx_PeriphCLKConfig+0x13b6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8104e7e:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8104e82:	3308      	adds	r3, #8
 8104e84:	2102      	movs	r1, #2
 8104e86:	4618      	mov	r0, r3
 8104e88:	f001 fa0a 	bl	81062a0 <RCCEx_PLL2_Config>
 8104e8c:	4603      	mov	r3, r0
 8104e8e:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
    
    if (ret == HAL_OK)
 8104e92:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8104e96:	2b00      	cmp	r3, #0
 8104e98:	d003      	beq.n	8104ea2 <HAL_RCCEx_PeriphCLKConfig+0x13b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8104e9a:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8104e9e:	f887 312e 	strb.w	r3, [r7, #302]	; 0x12e
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 8104ea2:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8104ea6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8104eaa:	2100      	movs	r1, #0
 8104eac:	6139      	str	r1, [r7, #16]
 8104eae:	f003 0308 	and.w	r3, r3, #8
 8104eb2:	617b      	str	r3, [r7, #20]
 8104eb4:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8104eb8:	460b      	mov	r3, r1
 8104eba:	4313      	orrs	r3, r2
 8104ebc:	d011      	beq.n	8104ee2 <HAL_RCCEx_PeriphCLKConfig+0x13f6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8104ebe:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8104ec2:	3328      	adds	r3, #40	; 0x28
 8104ec4:	2100      	movs	r1, #0
 8104ec6:	4618      	mov	r0, r3
 8104ec8:	f001 fa9c 	bl	8106404 <RCCEx_PLL3_Config>
 8104ecc:	4603      	mov	r3, r0
 8104ece:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
  
    if (ret == HAL_OK)
 8104ed2:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8104ed6:	2b00      	cmp	r3, #0
 8104ed8:	d003      	beq.n	8104ee2 <HAL_RCCEx_PeriphCLKConfig+0x13f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8104eda:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8104ede:	f887 312e 	strb.w	r3, [r7, #302]	; 0x12e
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 8104ee2:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8104ee6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8104eea:	2100      	movs	r1, #0
 8104eec:	60b9      	str	r1, [r7, #8]
 8104eee:	f003 0310 	and.w	r3, r3, #16
 8104ef2:	60fb      	str	r3, [r7, #12]
 8104ef4:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8104ef8:	460b      	mov	r3, r1
 8104efa:	4313      	orrs	r3, r2
 8104efc:	d011      	beq.n	8104f22 <HAL_RCCEx_PeriphCLKConfig+0x1436>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8104efe:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8104f02:	3328      	adds	r3, #40	; 0x28
 8104f04:	2101      	movs	r1, #1
 8104f06:	4618      	mov	r0, r3
 8104f08:	f001 fa7c 	bl	8106404 <RCCEx_PLL3_Config>
 8104f0c:	4603      	mov	r3, r0
 8104f0e:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
    
    if (ret == HAL_OK)
 8104f12:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8104f16:	2b00      	cmp	r3, #0
 8104f18:	d003      	beq.n	8104f22 <HAL_RCCEx_PeriphCLKConfig+0x1436>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8104f1a:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8104f1e:	f887 312e 	strb.w	r3, [r7, #302]	; 0x12e
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 8104f22:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8104f26:	e9d3 2300 	ldrd	r2, r3, [r3]
 8104f2a:	2100      	movs	r1, #0
 8104f2c:	6039      	str	r1, [r7, #0]
 8104f2e:	f003 0320 	and.w	r3, r3, #32
 8104f32:	607b      	str	r3, [r7, #4]
 8104f34:	e9d7 1200 	ldrd	r1, r2, [r7]
 8104f38:	460b      	mov	r3, r1
 8104f3a:	4313      	orrs	r3, r2
 8104f3c:	d011      	beq.n	8104f62 <HAL_RCCEx_PeriphCLKConfig+0x1476>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8104f3e:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8104f42:	3328      	adds	r3, #40	; 0x28
 8104f44:	2102      	movs	r1, #2
 8104f46:	4618      	mov	r0, r3
 8104f48:	f001 fa5c 	bl	8106404 <RCCEx_PLL3_Config>
 8104f4c:	4603      	mov	r3, r0
 8104f4e:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
    
    if (ret == HAL_OK)
 8104f52:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8104f56:	2b00      	cmp	r3, #0
 8104f58:	d003      	beq.n	8104f62 <HAL_RCCEx_PeriphCLKConfig+0x1476>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8104f5a:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8104f5e:	f887 312e 	strb.w	r3, [r7, #302]	; 0x12e
    } 
  }

  if (status == HAL_OK)
 8104f62:	f897 312e 	ldrb.w	r3, [r7, #302]	; 0x12e
 8104f66:	2b00      	cmp	r3, #0
 8104f68:	d101      	bne.n	8104f6e <HAL_RCCEx_PeriphCLKConfig+0x1482>
  {
    return HAL_OK;
 8104f6a:	2300      	movs	r3, #0
 8104f6c:	e000      	b.n	8104f70 <HAL_RCCEx_PeriphCLKConfig+0x1484>
  }
  return HAL_ERROR;
 8104f6e:	2301      	movs	r3, #1
}
 8104f70:	4618      	mov	r0, r3
 8104f72:	f507 7798 	add.w	r7, r7, #304	; 0x130
 8104f76:	46bd      	mov	sp, r7
 8104f78:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8104f7c:	58024400 	.word	0x58024400

08104f80 <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in KHz
  *
  *  (*) : Available on some STM32H7 lines only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint64_t PeriphClk)
{
 8104f80:	b580      	push	{r7, lr}
 8104f82:	b090      	sub	sp, #64	; 0x40
 8104f84:	af00      	add	r7, sp, #0
 8104f86:	e9c7 0100 	strd	r0, r1, [r7]
  /* This variable is used to store the SAI and CKP clock source */
  uint32_t saiclocksource;
  uint32_t ckpclocksource;
  uint32_t srcclk;

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 8104f8a:	e9d7 2300 	ldrd	r2, r3, [r7]
 8104f8e:	f5a2 7180 	sub.w	r1, r2, #256	; 0x100
 8104f92:	430b      	orrs	r3, r1
 8104f94:	f040 8094 	bne.w	81050c0 <HAL_RCCEx_GetPeriphCLKFreq+0x140>
  {

    saiclocksource = __HAL_RCC_GET_SAI1_SOURCE();
 8104f98:	4b9e      	ldr	r3, [pc, #632]	; (8105214 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8104f9a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8104f9c:	f003 0307 	and.w	r3, r3, #7
 8104fa0:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 8104fa2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8104fa4:	2b04      	cmp	r3, #4
 8104fa6:	f200 8087 	bhi.w	81050b8 <HAL_RCCEx_GetPeriphCLKFreq+0x138>
 8104faa:	a201      	add	r2, pc, #4	; (adr r2, 8104fb0 <HAL_RCCEx_GetPeriphCLKFreq+0x30>)
 8104fac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8104fb0:	08104fc5 	.word	0x08104fc5
 8104fb4:	08104fed 	.word	0x08104fed
 8104fb8:	08105015 	.word	0x08105015
 8104fbc:	081050b1 	.word	0x081050b1
 8104fc0:	0810503d 	.word	0x0810503d
    {
      case RCC_SAI1CLKSOURCE_PLL: /* PLL1 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8104fc4:	4b93      	ldr	r3, [pc, #588]	; (8105214 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8104fc6:	681b      	ldr	r3, [r3, #0]
 8104fc8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8104fcc:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8104fd0:	d108      	bne.n	8104fe4 <HAL_RCCEx_GetPeriphCLKFreq+0x64>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8104fd2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8104fd6:	4618      	mov	r0, r3
 8104fd8:	f001 f810 	bl	8105ffc <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8104fdc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8104fde:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8104fe0:	f000 bd45 	b.w	8105a6e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8104fe4:	2300      	movs	r3, #0
 8104fe6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8104fe8:	f000 bd41 	b.w	8105a6e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8104fec:	4b89      	ldr	r3, [pc, #548]	; (8105214 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8104fee:	681b      	ldr	r3, [r3, #0]
 8104ff0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8104ff4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8104ff8:	d108      	bne.n	810500c <HAL_RCCEx_GetPeriphCLKFreq+0x8c>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8104ffa:	f107 0318 	add.w	r3, r7, #24
 8104ffe:	4618      	mov	r0, r3
 8105000:	f000 fd54 	bl	8105aac <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8105004:	69bb      	ldr	r3, [r7, #24]
 8105006:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8105008:	f000 bd31 	b.w	8105a6e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 810500c:	2300      	movs	r3, #0
 810500e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8105010:	f000 bd2d 	b.w	8105a6e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI1CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8105014:	4b7f      	ldr	r3, [pc, #508]	; (8105214 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8105016:	681b      	ldr	r3, [r3, #0]
 8105018:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 810501c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8105020:	d108      	bne.n	8105034 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8105022:	f107 030c 	add.w	r3, r7, #12
 8105026:	4618      	mov	r0, r3
 8105028:	f000 fe94 	bl	8105d54 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 810502c:	68fb      	ldr	r3, [r7, #12]
 810502e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8105030:	f000 bd1d 	b.w	8105a6e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8105034:	2300      	movs	r3, #0
 8105036:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8105038:	f000 bd19 	b.w	8105a6e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI1CLKSOURCE_CLKP: /* CKPER is the clock source for SAI1*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 810503c:	4b75      	ldr	r3, [pc, #468]	; (8105214 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 810503e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8105040:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8105044:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8105046:	4b73      	ldr	r3, [pc, #460]	; (8105214 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8105048:	681b      	ldr	r3, [r3, #0]
 810504a:	f003 0304 	and.w	r3, r3, #4
 810504e:	2b04      	cmp	r3, #4
 8105050:	d10c      	bne.n	810506c <HAL_RCCEx_GetPeriphCLKFreq+0xec>
 8105052:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8105054:	2b00      	cmp	r3, #0
 8105056:	d109      	bne.n	810506c <HAL_RCCEx_GetPeriphCLKFreq+0xec>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8105058:	4b6e      	ldr	r3, [pc, #440]	; (8105214 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 810505a:	681b      	ldr	r3, [r3, #0]
 810505c:	08db      	lsrs	r3, r3, #3
 810505e:	f003 0303 	and.w	r3, r3, #3
 8105062:	4a6d      	ldr	r2, [pc, #436]	; (8105218 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 8105064:	fa22 f303 	lsr.w	r3, r2, r3
 8105068:	63fb      	str	r3, [r7, #60]	; 0x3c
 810506a:	e01f      	b.n	81050ac <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 810506c:	4b69      	ldr	r3, [pc, #420]	; (8105214 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 810506e:	681b      	ldr	r3, [r3, #0]
 8105070:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8105074:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8105078:	d106      	bne.n	8105088 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
 810507a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 810507c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8105080:	d102      	bne.n	8105088 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8105082:	4b66      	ldr	r3, [pc, #408]	; (810521c <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 8105084:	63fb      	str	r3, [r7, #60]	; 0x3c
 8105086:	e011      	b.n	81050ac <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8105088:	4b62      	ldr	r3, [pc, #392]	; (8105214 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 810508a:	681b      	ldr	r3, [r3, #0]
 810508c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8105090:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8105094:	d106      	bne.n	81050a4 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
 8105096:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8105098:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 810509c:	d102      	bne.n	81050a4 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 810509e:	4b60      	ldr	r3, [pc, #384]	; (8105220 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 81050a0:	63fb      	str	r3, [r7, #60]	; 0x3c
 81050a2:	e003      	b.n	81050ac <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 81050a4:	2300      	movs	r3, #0
 81050a6:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 81050a8:	f000 bce1 	b.w	8105a6e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 81050ac:	f000 bcdf 	b.w	8105a6e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SAI1CLKSOURCE_PIN): /* External clock is the clock source for SAI1 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 81050b0:	4b5c      	ldr	r3, [pc, #368]	; (8105224 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 81050b2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 81050b4:	f000 bcdb 	b.w	8105a6e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 81050b8:	2300      	movs	r3, #0
 81050ba:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 81050bc:	f000 bcd7 	b.w	8105a6e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }

#if defined(SAI3)
  else if (PeriphClk == RCC_PERIPHCLK_SAI23)
 81050c0:	e9d7 2300 	ldrd	r2, r3, [r7]
 81050c4:	f5a2 7100 	sub.w	r1, r2, #512	; 0x200
 81050c8:	430b      	orrs	r3, r1
 81050ca:	f040 80ad 	bne.w	8105228 <HAL_RCCEx_GetPeriphCLKFreq+0x2a8>
  {

    saiclocksource = __HAL_RCC_GET_SAI23_SOURCE();
 81050ce:	4b51      	ldr	r3, [pc, #324]	; (8105214 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 81050d0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 81050d2:	f403 73e0 	and.w	r3, r3, #448	; 0x1c0
 81050d6:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 81050d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 81050da:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 81050de:	d056      	beq.n	810518e <HAL_RCCEx_GetPeriphCLKFreq+0x20e>
 81050e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 81050e2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 81050e6:	f200 8090 	bhi.w	810520a <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 81050ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 81050ec:	2bc0      	cmp	r3, #192	; 0xc0
 81050ee:	f000 8088 	beq.w	8105202 <HAL_RCCEx_GetPeriphCLKFreq+0x282>
 81050f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 81050f4:	2bc0      	cmp	r3, #192	; 0xc0
 81050f6:	f200 8088 	bhi.w	810520a <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 81050fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 81050fc:	2b80      	cmp	r3, #128	; 0x80
 81050fe:	d032      	beq.n	8105166 <HAL_RCCEx_GetPeriphCLKFreq+0x1e6>
 8105100:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8105102:	2b80      	cmp	r3, #128	; 0x80
 8105104:	f200 8081 	bhi.w	810520a <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 8105108:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 810510a:	2b00      	cmp	r3, #0
 810510c:	d003      	beq.n	8105116 <HAL_RCCEx_GetPeriphCLKFreq+0x196>
 810510e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8105110:	2b40      	cmp	r3, #64	; 0x40
 8105112:	d014      	beq.n	810513e <HAL_RCCEx_GetPeriphCLKFreq+0x1be>
 8105114:	e079      	b.n	810520a <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
    {
      case RCC_SAI23CLKSOURCE_PLL: /* PLL1 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8105116:	4b3f      	ldr	r3, [pc, #252]	; (8105214 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8105118:	681b      	ldr	r3, [r3, #0]
 810511a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 810511e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8105122:	d108      	bne.n	8105136 <HAL_RCCEx_GetPeriphCLKFreq+0x1b6>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8105124:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8105128:	4618      	mov	r0, r3
 810512a:	f000 ff67 	bl	8105ffc <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 810512e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8105130:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8105132:	f000 bc9c 	b.w	8105a6e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8105136:	2300      	movs	r3, #0
 8105138:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 810513a:	f000 bc98 	b.w	8105a6e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 810513e:	4b35      	ldr	r3, [pc, #212]	; (8105214 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8105140:	681b      	ldr	r3, [r3, #0]
 8105142:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8105146:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 810514a:	d108      	bne.n	810515e <HAL_RCCEx_GetPeriphCLKFreq+0x1de>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 810514c:	f107 0318 	add.w	r3, r7, #24
 8105150:	4618      	mov	r0, r3
 8105152:	f000 fcab 	bl	8105aac <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8105156:	69bb      	ldr	r3, [r7, #24]
 8105158:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 810515a:	f000 bc88 	b.w	8105a6e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 810515e:	2300      	movs	r3, #0
 8105160:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8105162:	f000 bc84 	b.w	8105a6e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI23CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8105166:	4b2b      	ldr	r3, [pc, #172]	; (8105214 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8105168:	681b      	ldr	r3, [r3, #0]
 810516a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 810516e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8105172:	d108      	bne.n	8105186 <HAL_RCCEx_GetPeriphCLKFreq+0x206>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8105174:	f107 030c 	add.w	r3, r7, #12
 8105178:	4618      	mov	r0, r3
 810517a:	f000 fdeb 	bl	8105d54 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 810517e:	68fb      	ldr	r3, [r7, #12]
 8105180:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8105182:	f000 bc74 	b.w	8105a6e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8105186:	2300      	movs	r3, #0
 8105188:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 810518a:	f000 bc70 	b.w	8105a6e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI23CLKSOURCE_CLKP: /* CKPER is the clock source for SAI2/3 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 810518e:	4b21      	ldr	r3, [pc, #132]	; (8105214 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8105190:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8105192:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8105196:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8105198:	4b1e      	ldr	r3, [pc, #120]	; (8105214 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 810519a:	681b      	ldr	r3, [r3, #0]
 810519c:	f003 0304 	and.w	r3, r3, #4
 81051a0:	2b04      	cmp	r3, #4
 81051a2:	d10c      	bne.n	81051be <HAL_RCCEx_GetPeriphCLKFreq+0x23e>
 81051a4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 81051a6:	2b00      	cmp	r3, #0
 81051a8:	d109      	bne.n	81051be <HAL_RCCEx_GetPeriphCLKFreq+0x23e>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 81051aa:	4b1a      	ldr	r3, [pc, #104]	; (8105214 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 81051ac:	681b      	ldr	r3, [r3, #0]
 81051ae:	08db      	lsrs	r3, r3, #3
 81051b0:	f003 0303 	and.w	r3, r3, #3
 81051b4:	4a18      	ldr	r2, [pc, #96]	; (8105218 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 81051b6:	fa22 f303 	lsr.w	r3, r2, r3
 81051ba:	63fb      	str	r3, [r7, #60]	; 0x3c
 81051bc:	e01f      	b.n	81051fe <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 81051be:	4b15      	ldr	r3, [pc, #84]	; (8105214 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 81051c0:	681b      	ldr	r3, [r3, #0]
 81051c2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 81051c6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 81051ca:	d106      	bne.n	81051da <HAL_RCCEx_GetPeriphCLKFreq+0x25a>
 81051cc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 81051ce:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 81051d2:	d102      	bne.n	81051da <HAL_RCCEx_GetPeriphCLKFreq+0x25a>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 81051d4:	4b11      	ldr	r3, [pc, #68]	; (810521c <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 81051d6:	63fb      	str	r3, [r7, #60]	; 0x3c
 81051d8:	e011      	b.n	81051fe <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 81051da:	4b0e      	ldr	r3, [pc, #56]	; (8105214 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 81051dc:	681b      	ldr	r3, [r3, #0]
 81051de:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 81051e2:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 81051e6:	d106      	bne.n	81051f6 <HAL_RCCEx_GetPeriphCLKFreq+0x276>
 81051e8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 81051ea:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 81051ee:	d102      	bne.n	81051f6 <HAL_RCCEx_GetPeriphCLKFreq+0x276>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 81051f0:	4b0b      	ldr	r3, [pc, #44]	; (8105220 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 81051f2:	63fb      	str	r3, [r7, #60]	; 0x3c
 81051f4:	e003      	b.n	81051fe <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 81051f6:	2300      	movs	r3, #0
 81051f8:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 81051fa:	f000 bc38 	b.w	8105a6e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 81051fe:	f000 bc36 	b.w	8105a6e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SAI23CLKSOURCE_PIN): /* External clock is the clock source for SAI2/3 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8105202:	4b08      	ldr	r3, [pc, #32]	; (8105224 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 8105204:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8105206:	f000 bc32 	b.w	8105a6e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 810520a:	2300      	movs	r3, #0
 810520c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 810520e:	f000 bc2e 	b.w	8105a6e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8105212:	bf00      	nop
 8105214:	58024400 	.word	0x58024400
 8105218:	03d09000 	.word	0x03d09000
 810521c:	003d0900 	.word	0x003d0900
 8105220:	017d7840 	.word	0x017d7840
 8105224:	00bb8000 	.word	0x00bb8000
    }
  }
#endif

#if defined(SAI4)
  else if (PeriphClk == RCC_PERIPHCLK_SAI4A)
 8105228:	e9d7 2300 	ldrd	r2, r3, [r7]
 810522c:	f5a2 6180 	sub.w	r1, r2, #1024	; 0x400
 8105230:	430b      	orrs	r3, r1
 8105232:	f040 809c 	bne.w	810536e <HAL_RCCEx_GetPeriphCLKFreq+0x3ee>
  {

    saiclocksource = __HAL_RCC_GET_SAI4A_SOURCE();
 8105236:	4b9e      	ldr	r3, [pc, #632]	; (81054b0 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8105238:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 810523a:	f403 0360 	and.w	r3, r3, #14680064	; 0xe00000
 810523e:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 8105240:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8105242:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8105246:	d054      	beq.n	81052f2 <HAL_RCCEx_GetPeriphCLKFreq+0x372>
 8105248:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 810524a:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 810524e:	f200 808b 	bhi.w	8105368 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 8105252:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8105254:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8105258:	f000 8083 	beq.w	8105362 <HAL_RCCEx_GetPeriphCLKFreq+0x3e2>
 810525c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 810525e:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8105262:	f200 8081 	bhi.w	8105368 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 8105266:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8105268:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 810526c:	d02f      	beq.n	81052ce <HAL_RCCEx_GetPeriphCLKFreq+0x34e>
 810526e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8105270:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8105274:	d878      	bhi.n	8105368 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 8105276:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8105278:	2b00      	cmp	r3, #0
 810527a:	d004      	beq.n	8105286 <HAL_RCCEx_GetPeriphCLKFreq+0x306>
 810527c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 810527e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8105282:	d012      	beq.n	81052aa <HAL_RCCEx_GetPeriphCLKFreq+0x32a>
 8105284:	e070      	b.n	8105368 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
    {
      case RCC_SAI4ACLKSOURCE_PLL: /* PLL1 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8105286:	4b8a      	ldr	r3, [pc, #552]	; (81054b0 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8105288:	681b      	ldr	r3, [r3, #0]
 810528a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 810528e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8105292:	d107      	bne.n	81052a4 <HAL_RCCEx_GetPeriphCLKFreq+0x324>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8105294:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8105298:	4618      	mov	r0, r3
 810529a:	f000 feaf 	bl	8105ffc <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 810529e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 81052a0:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 81052a2:	e3e4      	b.n	8105a6e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 81052a4:	2300      	movs	r3, #0
 81052a6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 81052a8:	e3e1      	b.n	8105a6e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI4ACLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 81052aa:	4b81      	ldr	r3, [pc, #516]	; (81054b0 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 81052ac:	681b      	ldr	r3, [r3, #0]
 81052ae:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 81052b2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 81052b6:	d107      	bne.n	81052c8 <HAL_RCCEx_GetPeriphCLKFreq+0x348>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 81052b8:	f107 0318 	add.w	r3, r7, #24
 81052bc:	4618      	mov	r0, r3
 81052be:	f000 fbf5 	bl	8105aac <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 81052c2:	69bb      	ldr	r3, [r7, #24]
 81052c4:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 81052c6:	e3d2      	b.n	8105a6e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 81052c8:	2300      	movs	r3, #0
 81052ca:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 81052cc:	e3cf      	b.n	8105a6e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 81052ce:	4b78      	ldr	r3, [pc, #480]	; (81054b0 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 81052d0:	681b      	ldr	r3, [r3, #0]
 81052d2:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 81052d6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 81052da:	d107      	bne.n	81052ec <HAL_RCCEx_GetPeriphCLKFreq+0x36c>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 81052dc:	f107 030c 	add.w	r3, r7, #12
 81052e0:	4618      	mov	r0, r3
 81052e2:	f000 fd37 	bl	8105d54 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 81052e6:	68fb      	ldr	r3, [r7, #12]
 81052e8:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 81052ea:	e3c0      	b.n	8105a6e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 81052ec:	2300      	movs	r3, #0
 81052ee:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 81052f0:	e3bd      	b.n	8105a6e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_CLKP: /* CKPER is the clock source for SAI4A*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 81052f2:	4b6f      	ldr	r3, [pc, #444]	; (81054b0 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 81052f4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 81052f6:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 81052fa:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 81052fc:	4b6c      	ldr	r3, [pc, #432]	; (81054b0 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 81052fe:	681b      	ldr	r3, [r3, #0]
 8105300:	f003 0304 	and.w	r3, r3, #4
 8105304:	2b04      	cmp	r3, #4
 8105306:	d10c      	bne.n	8105322 <HAL_RCCEx_GetPeriphCLKFreq+0x3a2>
 8105308:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 810530a:	2b00      	cmp	r3, #0
 810530c:	d109      	bne.n	8105322 <HAL_RCCEx_GetPeriphCLKFreq+0x3a2>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 810530e:	4b68      	ldr	r3, [pc, #416]	; (81054b0 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8105310:	681b      	ldr	r3, [r3, #0]
 8105312:	08db      	lsrs	r3, r3, #3
 8105314:	f003 0303 	and.w	r3, r3, #3
 8105318:	4a66      	ldr	r2, [pc, #408]	; (81054b4 <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 810531a:	fa22 f303 	lsr.w	r3, r2, r3
 810531e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8105320:	e01e      	b.n	8105360 <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8105322:	4b63      	ldr	r3, [pc, #396]	; (81054b0 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8105324:	681b      	ldr	r3, [r3, #0]
 8105326:	f403 7380 	and.w	r3, r3, #256	; 0x100
 810532a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 810532e:	d106      	bne.n	810533e <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
 8105330:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8105332:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8105336:	d102      	bne.n	810533e <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8105338:	4b5f      	ldr	r3, [pc, #380]	; (81054b8 <HAL_RCCEx_GetPeriphCLKFreq+0x538>)
 810533a:	63fb      	str	r3, [r7, #60]	; 0x3c
 810533c:	e010      	b.n	8105360 <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 810533e:	4b5c      	ldr	r3, [pc, #368]	; (81054b0 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8105340:	681b      	ldr	r3, [r3, #0]
 8105342:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8105346:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 810534a:	d106      	bne.n	810535a <HAL_RCCEx_GetPeriphCLKFreq+0x3da>
 810534c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 810534e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8105352:	d102      	bne.n	810535a <HAL_RCCEx_GetPeriphCLKFreq+0x3da>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8105354:	4b59      	ldr	r3, [pc, #356]	; (81054bc <HAL_RCCEx_GetPeriphCLKFreq+0x53c>)
 8105356:	63fb      	str	r3, [r7, #60]	; 0x3c
 8105358:	e002      	b.n	8105360 <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 810535a:	2300      	movs	r3, #0
 810535c:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 810535e:	e386      	b.n	8105a6e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8105360:	e385      	b.n	8105a6e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_PIN: /* External clock is the clock source for SAI4A */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8105362:	4b57      	ldr	r3, [pc, #348]	; (81054c0 <HAL_RCCEx_GetPeriphCLKFreq+0x540>)
 8105364:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8105366:	e382      	b.n	8105a6e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 8105368:	2300      	movs	r3, #0
 810536a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 810536c:	e37f      	b.n	8105a6e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }

  else if (PeriphClk == RCC_PERIPHCLK_SAI4B)
 810536e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8105372:	f5a2 6100 	sub.w	r1, r2, #2048	; 0x800
 8105376:	430b      	orrs	r3, r1
 8105378:	f040 80a7 	bne.w	81054ca <HAL_RCCEx_GetPeriphCLKFreq+0x54a>
  {

    saiclocksource = __HAL_RCC_GET_SAI4B_SOURCE();
 810537c:	4b4c      	ldr	r3, [pc, #304]	; (81054b0 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 810537e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8105380:	f003 63e0 	and.w	r3, r3, #117440512	; 0x7000000
 8105384:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 8105386:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8105388:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 810538c:	d055      	beq.n	810543a <HAL_RCCEx_GetPeriphCLKFreq+0x4ba>
 810538e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8105390:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8105394:	f200 8096 	bhi.w	81054c4 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 8105398:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 810539a:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 810539e:	f000 8084 	beq.w	81054aa <HAL_RCCEx_GetPeriphCLKFreq+0x52a>
 81053a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 81053a4:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 81053a8:	f200 808c 	bhi.w	81054c4 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 81053ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 81053ae:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 81053b2:	d030      	beq.n	8105416 <HAL_RCCEx_GetPeriphCLKFreq+0x496>
 81053b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 81053b6:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 81053ba:	f200 8083 	bhi.w	81054c4 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 81053be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 81053c0:	2b00      	cmp	r3, #0
 81053c2:	d004      	beq.n	81053ce <HAL_RCCEx_GetPeriphCLKFreq+0x44e>
 81053c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 81053c6:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 81053ca:	d012      	beq.n	81053f2 <HAL_RCCEx_GetPeriphCLKFreq+0x472>
 81053cc:	e07a      	b.n	81054c4 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
    {
      case RCC_SAI4BCLKSOURCE_PLL: /* PLL1 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 81053ce:	4b38      	ldr	r3, [pc, #224]	; (81054b0 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 81053d0:	681b      	ldr	r3, [r3, #0]
 81053d2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 81053d6:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 81053da:	d107      	bne.n	81053ec <HAL_RCCEx_GetPeriphCLKFreq+0x46c>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 81053dc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 81053e0:	4618      	mov	r0, r3
 81053e2:	f000 fe0b 	bl	8105ffc <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 81053e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 81053e8:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 81053ea:	e340      	b.n	8105a6e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 81053ec:	2300      	movs	r3, #0
 81053ee:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 81053f0:	e33d      	b.n	8105a6e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI4BCLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 81053f2:	4b2f      	ldr	r3, [pc, #188]	; (81054b0 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 81053f4:	681b      	ldr	r3, [r3, #0]
 81053f6:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 81053fa:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 81053fe:	d107      	bne.n	8105410 <HAL_RCCEx_GetPeriphCLKFreq+0x490>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8105400:	f107 0318 	add.w	r3, r7, #24
 8105404:	4618      	mov	r0, r3
 8105406:	f000 fb51 	bl	8105aac <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 810540a:	69bb      	ldr	r3, [r7, #24]
 810540c:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 810540e:	e32e      	b.n	8105a6e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8105410:	2300      	movs	r3, #0
 8105412:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8105414:	e32b      	b.n	8105a6e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8105416:	4b26      	ldr	r3, [pc, #152]	; (81054b0 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8105418:	681b      	ldr	r3, [r3, #0]
 810541a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 810541e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8105422:	d107      	bne.n	8105434 <HAL_RCCEx_GetPeriphCLKFreq+0x4b4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8105424:	f107 030c 	add.w	r3, r7, #12
 8105428:	4618      	mov	r0, r3
 810542a:	f000 fc93 	bl	8105d54 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 810542e:	68fb      	ldr	r3, [r7, #12]
 8105430:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8105432:	e31c      	b.n	8105a6e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8105434:	2300      	movs	r3, #0
 8105436:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8105438:	e319      	b.n	8105a6e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_CLKP: /* CKPER is the clock source for SAI4B*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 810543a:	4b1d      	ldr	r3, [pc, #116]	; (81054b0 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 810543c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 810543e:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8105442:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8105444:	4b1a      	ldr	r3, [pc, #104]	; (81054b0 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8105446:	681b      	ldr	r3, [r3, #0]
 8105448:	f003 0304 	and.w	r3, r3, #4
 810544c:	2b04      	cmp	r3, #4
 810544e:	d10c      	bne.n	810546a <HAL_RCCEx_GetPeriphCLKFreq+0x4ea>
 8105450:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8105452:	2b00      	cmp	r3, #0
 8105454:	d109      	bne.n	810546a <HAL_RCCEx_GetPeriphCLKFreq+0x4ea>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8105456:	4b16      	ldr	r3, [pc, #88]	; (81054b0 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8105458:	681b      	ldr	r3, [r3, #0]
 810545a:	08db      	lsrs	r3, r3, #3
 810545c:	f003 0303 	and.w	r3, r3, #3
 8105460:	4a14      	ldr	r2, [pc, #80]	; (81054b4 <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 8105462:	fa22 f303 	lsr.w	r3, r2, r3
 8105466:	63fb      	str	r3, [r7, #60]	; 0x3c
 8105468:	e01e      	b.n	81054a8 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 810546a:	4b11      	ldr	r3, [pc, #68]	; (81054b0 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 810546c:	681b      	ldr	r3, [r3, #0]
 810546e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8105472:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8105476:	d106      	bne.n	8105486 <HAL_RCCEx_GetPeriphCLKFreq+0x506>
 8105478:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 810547a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 810547e:	d102      	bne.n	8105486 <HAL_RCCEx_GetPeriphCLKFreq+0x506>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8105480:	4b0d      	ldr	r3, [pc, #52]	; (81054b8 <HAL_RCCEx_GetPeriphCLKFreq+0x538>)
 8105482:	63fb      	str	r3, [r7, #60]	; 0x3c
 8105484:	e010      	b.n	81054a8 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8105486:	4b0a      	ldr	r3, [pc, #40]	; (81054b0 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8105488:	681b      	ldr	r3, [r3, #0]
 810548a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 810548e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8105492:	d106      	bne.n	81054a2 <HAL_RCCEx_GetPeriphCLKFreq+0x522>
 8105494:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8105496:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 810549a:	d102      	bne.n	81054a2 <HAL_RCCEx_GetPeriphCLKFreq+0x522>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 810549c:	4b07      	ldr	r3, [pc, #28]	; (81054bc <HAL_RCCEx_GetPeriphCLKFreq+0x53c>)
 810549e:	63fb      	str	r3, [r7, #60]	; 0x3c
 81054a0:	e002      	b.n	81054a8 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 81054a2:	2300      	movs	r3, #0
 81054a4:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 81054a6:	e2e2      	b.n	8105a6e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 81054a8:	e2e1      	b.n	8105a6e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_PIN: /* External clock is the clock source for SAI4B */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 81054aa:	4b05      	ldr	r3, [pc, #20]	; (81054c0 <HAL_RCCEx_GetPeriphCLKFreq+0x540>)
 81054ac:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 81054ae:	e2de      	b.n	8105a6e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 81054b0:	58024400 	.word	0x58024400
 81054b4:	03d09000 	.word	0x03d09000
 81054b8:	003d0900 	.word	0x003d0900
 81054bc:	017d7840 	.word	0x017d7840
 81054c0:	00bb8000 	.word	0x00bb8000
      }

      default :
      {
        frequency = 0;
 81054c4:	2300      	movs	r3, #0
 81054c6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 81054c8:	e2d1      	b.n	8105a6e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
#endif /*SAI4*/
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 81054ca:	e9d7 2300 	ldrd	r2, r3, [r7]
 81054ce:	f5a2 5180 	sub.w	r1, r2, #4096	; 0x1000
 81054d2:	430b      	orrs	r3, r1
 81054d4:	f040 809c 	bne.w	8105610 <HAL_RCCEx_GetPeriphCLKFreq+0x690>
  {
    /* Get SPI1/2/3 clock source */
    srcclk = __HAL_RCC_GET_SPI123_SOURCE();
 81054d8:	4b93      	ldr	r3, [pc, #588]	; (8105728 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 81054da:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 81054dc:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 81054e0:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 81054e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 81054e4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 81054e8:	d054      	beq.n	8105594 <HAL_RCCEx_GetPeriphCLKFreq+0x614>
 81054ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 81054ec:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 81054f0:	f200 808b 	bhi.w	810560a <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 81054f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 81054f6:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 81054fa:	f000 8083 	beq.w	8105604 <HAL_RCCEx_GetPeriphCLKFreq+0x684>
 81054fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8105500:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8105504:	f200 8081 	bhi.w	810560a <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 8105508:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 810550a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 810550e:	d02f      	beq.n	8105570 <HAL_RCCEx_GetPeriphCLKFreq+0x5f0>
 8105510:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8105512:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8105516:	d878      	bhi.n	810560a <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 8105518:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 810551a:	2b00      	cmp	r3, #0
 810551c:	d004      	beq.n	8105528 <HAL_RCCEx_GetPeriphCLKFreq+0x5a8>
 810551e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8105520:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8105524:	d012      	beq.n	810554c <HAL_RCCEx_GetPeriphCLKFreq+0x5cc>
 8105526:	e070      	b.n	810560a <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
    {
      case RCC_SPI123CLKSOURCE_PLL: /* PLL1 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8105528:	4b7f      	ldr	r3, [pc, #508]	; (8105728 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 810552a:	681b      	ldr	r3, [r3, #0]
 810552c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8105530:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8105534:	d107      	bne.n	8105546 <HAL_RCCEx_GetPeriphCLKFreq+0x5c6>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8105536:	f107 0324 	add.w	r3, r7, #36	; 0x24
 810553a:	4618      	mov	r0, r3
 810553c:	f000 fd5e 	bl	8105ffc <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8105540:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8105542:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8105544:	e293      	b.n	8105a6e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8105546:	2300      	movs	r3, #0
 8105548:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 810554a:	e290      	b.n	8105a6e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 810554c:	4b76      	ldr	r3, [pc, #472]	; (8105728 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 810554e:	681b      	ldr	r3, [r3, #0]
 8105550:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8105554:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8105558:	d107      	bne.n	810556a <HAL_RCCEx_GetPeriphCLKFreq+0x5ea>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 810555a:	f107 0318 	add.w	r3, r7, #24
 810555e:	4618      	mov	r0, r3
 8105560:	f000 faa4 	bl	8105aac <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8105564:	69bb      	ldr	r3, [r7, #24]
 8105566:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8105568:	e281      	b.n	8105a6e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 810556a:	2300      	movs	r3, #0
 810556c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 810556e:	e27e      	b.n	8105a6e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SPI123CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8105570:	4b6d      	ldr	r3, [pc, #436]	; (8105728 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8105572:	681b      	ldr	r3, [r3, #0]
 8105574:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8105578:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 810557c:	d107      	bne.n	810558e <HAL_RCCEx_GetPeriphCLKFreq+0x60e>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 810557e:	f107 030c 	add.w	r3, r7, #12
 8105582:	4618      	mov	r0, r3
 8105584:	f000 fbe6 	bl	8105d54 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8105588:	68fb      	ldr	r3, [r7, #12]
 810558a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 810558c:	e26f      	b.n	8105a6e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 810558e:	2300      	movs	r3, #0
 8105590:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8105592:	e26c      	b.n	8105a6e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SPI123CLKSOURCE_CLKP: /* CKPER is the clock source for SPI123 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8105594:	4b64      	ldr	r3, [pc, #400]	; (8105728 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8105596:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8105598:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 810559c:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 810559e:	4b62      	ldr	r3, [pc, #392]	; (8105728 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 81055a0:	681b      	ldr	r3, [r3, #0]
 81055a2:	f003 0304 	and.w	r3, r3, #4
 81055a6:	2b04      	cmp	r3, #4
 81055a8:	d10c      	bne.n	81055c4 <HAL_RCCEx_GetPeriphCLKFreq+0x644>
 81055aa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 81055ac:	2b00      	cmp	r3, #0
 81055ae:	d109      	bne.n	81055c4 <HAL_RCCEx_GetPeriphCLKFreq+0x644>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 81055b0:	4b5d      	ldr	r3, [pc, #372]	; (8105728 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 81055b2:	681b      	ldr	r3, [r3, #0]
 81055b4:	08db      	lsrs	r3, r3, #3
 81055b6:	f003 0303 	and.w	r3, r3, #3
 81055ba:	4a5c      	ldr	r2, [pc, #368]	; (810572c <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>)
 81055bc:	fa22 f303 	lsr.w	r3, r2, r3
 81055c0:	63fb      	str	r3, [r7, #60]	; 0x3c
 81055c2:	e01e      	b.n	8105602 <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 81055c4:	4b58      	ldr	r3, [pc, #352]	; (8105728 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 81055c6:	681b      	ldr	r3, [r3, #0]
 81055c8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 81055cc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 81055d0:	d106      	bne.n	81055e0 <HAL_RCCEx_GetPeriphCLKFreq+0x660>
 81055d2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 81055d4:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 81055d8:	d102      	bne.n	81055e0 <HAL_RCCEx_GetPeriphCLKFreq+0x660>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 81055da:	4b55      	ldr	r3, [pc, #340]	; (8105730 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 81055dc:	63fb      	str	r3, [r7, #60]	; 0x3c
 81055de:	e010      	b.n	8105602 <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 81055e0:	4b51      	ldr	r3, [pc, #324]	; (8105728 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 81055e2:	681b      	ldr	r3, [r3, #0]
 81055e4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 81055e8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 81055ec:	d106      	bne.n	81055fc <HAL_RCCEx_GetPeriphCLKFreq+0x67c>
 81055ee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 81055f0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 81055f4:	d102      	bne.n	81055fc <HAL_RCCEx_GetPeriphCLKFreq+0x67c>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 81055f6:	4b4f      	ldr	r3, [pc, #316]	; (8105734 <HAL_RCCEx_GetPeriphCLKFreq+0x7b4>)
 81055f8:	63fb      	str	r3, [r7, #60]	; 0x3c
 81055fa:	e002      	b.n	8105602 <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 81055fc:	2300      	movs	r3, #0
 81055fe:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 8105600:	e235      	b.n	8105a6e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8105602:	e234      	b.n	8105a6e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SPI123CLKSOURCE_PIN): /* External clock is the clock source for I2S */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8105604:	4b4c      	ldr	r3, [pc, #304]	; (8105738 <HAL_RCCEx_GetPeriphCLKFreq+0x7b8>)
 8105606:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8105608:	e231      	b.n	8105a6e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 810560a:	2300      	movs	r3, #0
 810560c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 810560e:	e22e      	b.n	8105a6e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI45)
 8105610:	e9d7 2300 	ldrd	r2, r3, [r7]
 8105614:	f5a2 5100 	sub.w	r1, r2, #8192	; 0x2000
 8105618:	430b      	orrs	r3, r1
 810561a:	f040 808f 	bne.w	810573c <HAL_RCCEx_GetPeriphCLKFreq+0x7bc>
  {
    /* Get SPI45 clock source */
    srcclk = __HAL_RCC_GET_SPI45_SOURCE();
 810561e:	4b42      	ldr	r3, [pc, #264]	; (8105728 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8105620:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8105622:	f403 23e0 	and.w	r3, r3, #458752	; 0x70000
 8105626:	63bb      	str	r3, [r7, #56]	; 0x38
    switch (srcclk)
 8105628:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 810562a:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 810562e:	d06b      	beq.n	8105708 <HAL_RCCEx_GetPeriphCLKFreq+0x788>
 8105630:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8105632:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8105636:	d874      	bhi.n	8105722 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 8105638:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 810563a:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 810563e:	d056      	beq.n	81056ee <HAL_RCCEx_GetPeriphCLKFreq+0x76e>
 8105640:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8105642:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8105646:	d86c      	bhi.n	8105722 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 8105648:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 810564a:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 810564e:	d03b      	beq.n	81056c8 <HAL_RCCEx_GetPeriphCLKFreq+0x748>
 8105650:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8105652:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8105656:	d864      	bhi.n	8105722 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 8105658:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 810565a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 810565e:	d021      	beq.n	81056a4 <HAL_RCCEx_GetPeriphCLKFreq+0x724>
 8105660:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8105662:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8105666:	d85c      	bhi.n	8105722 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 8105668:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 810566a:	2b00      	cmp	r3, #0
 810566c:	d004      	beq.n	8105678 <HAL_RCCEx_GetPeriphCLKFreq+0x6f8>
 810566e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8105670:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8105674:	d004      	beq.n	8105680 <HAL_RCCEx_GetPeriphCLKFreq+0x700>
 8105676:	e054      	b.n	8105722 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
    {
      case RCC_SPI45CLKSOURCE_PCLK2: /* CD/D2 PCLK2 is the clock source for SPI4/5 */
      {
        frequency = HAL_RCC_GetPCLK1Freq();
 8105678:	f7fe fa0c 	bl	8103a94 <HAL_RCC_GetPCLK1Freq>
 810567c:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 810567e:	e1f6      	b.n	8105a6e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8105680:	4b29      	ldr	r3, [pc, #164]	; (8105728 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8105682:	681b      	ldr	r3, [r3, #0]
 8105684:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8105688:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 810568c:	d107      	bne.n	810569e <HAL_RCCEx_GetPeriphCLKFreq+0x71e>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 810568e:	f107 0318 	add.w	r3, r7, #24
 8105692:	4618      	mov	r0, r3
 8105694:	f000 fa0a 	bl	8105aac <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8105698:	69fb      	ldr	r3, [r7, #28]
 810569a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 810569c:	e1e7      	b.n	8105a6e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 810569e:	2300      	movs	r3, #0
 81056a0:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 81056a2:	e1e4      	b.n	8105a6e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 81056a4:	4b20      	ldr	r3, [pc, #128]	; (8105728 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 81056a6:	681b      	ldr	r3, [r3, #0]
 81056a8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 81056ac:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 81056b0:	d107      	bne.n	81056c2 <HAL_RCCEx_GetPeriphCLKFreq+0x742>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 81056b2:	f107 030c 	add.w	r3, r7, #12
 81056b6:	4618      	mov	r0, r3
 81056b8:	f000 fb4c 	bl	8105d54 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 81056bc:	693b      	ldr	r3, [r7, #16]
 81056be:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 81056c0:	e1d5      	b.n	8105a6e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 81056c2:	2300      	movs	r3, #0
 81056c4:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 81056c6:	e1d2      	b.n	8105a6e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_HSI: /* HSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 81056c8:	4b17      	ldr	r3, [pc, #92]	; (8105728 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 81056ca:	681b      	ldr	r3, [r3, #0]
 81056cc:	f003 0304 	and.w	r3, r3, #4
 81056d0:	2b04      	cmp	r3, #4
 81056d2:	d109      	bne.n	81056e8 <HAL_RCCEx_GetPeriphCLKFreq+0x768>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 81056d4:	4b14      	ldr	r3, [pc, #80]	; (8105728 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 81056d6:	681b      	ldr	r3, [r3, #0]
 81056d8:	08db      	lsrs	r3, r3, #3
 81056da:	f003 0303 	and.w	r3, r3, #3
 81056de:	4a13      	ldr	r2, [pc, #76]	; (810572c <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>)
 81056e0:	fa22 f303 	lsr.w	r3, r2, r3
 81056e4:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 81056e6:	e1c2      	b.n	8105a6e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 81056e8:	2300      	movs	r3, #0
 81056ea:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 81056ec:	e1bf      	b.n	8105a6e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_CSI: /* CSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 81056ee:	4b0e      	ldr	r3, [pc, #56]	; (8105728 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 81056f0:	681b      	ldr	r3, [r3, #0]
 81056f2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 81056f6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 81056fa:	d102      	bne.n	8105702 <HAL_RCCEx_GetPeriphCLKFreq+0x782>
        {
          frequency = CSI_VALUE;
 81056fc:	4b0c      	ldr	r3, [pc, #48]	; (8105730 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 81056fe:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8105700:	e1b5      	b.n	8105a6e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8105702:	2300      	movs	r3, #0
 8105704:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8105706:	e1b2      	b.n	8105a6e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_HSE: /* HSE is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8105708:	4b07      	ldr	r3, [pc, #28]	; (8105728 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 810570a:	681b      	ldr	r3, [r3, #0]
 810570c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8105710:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8105714:	d102      	bne.n	810571c <HAL_RCCEx_GetPeriphCLKFreq+0x79c>
        {
          frequency = HSE_VALUE;
 8105716:	4b07      	ldr	r3, [pc, #28]	; (8105734 <HAL_RCCEx_GetPeriphCLKFreq+0x7b4>)
 8105718:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 810571a:	e1a8      	b.n	8105a6e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 810571c:	2300      	movs	r3, #0
 810571e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8105720:	e1a5      	b.n	8105a6e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 8105722:	2300      	movs	r3, #0
 8105724:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8105726:	e1a2      	b.n	8105a6e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8105728:	58024400 	.word	0x58024400
 810572c:	03d09000 	.word	0x03d09000
 8105730:	003d0900 	.word	0x003d0900
 8105734:	017d7840 	.word	0x017d7840
 8105738:	00bb8000 	.word	0x00bb8000
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 810573c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8105740:	f5a2 2100 	sub.w	r1, r2, #524288	; 0x80000
 8105744:	430b      	orrs	r3, r1
 8105746:	d173      	bne.n	8105830 <HAL_RCCEx_GetPeriphCLKFreq+0x8b0>
  {
    /* Get ADC clock source */
    srcclk = __HAL_RCC_GET_ADC_SOURCE();
 8105748:	4b9c      	ldr	r3, [pc, #624]	; (81059bc <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 810574a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 810574c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8105750:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 8105752:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8105754:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8105758:	d02f      	beq.n	81057ba <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
 810575a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 810575c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8105760:	d863      	bhi.n	810582a <HAL_RCCEx_GetPeriphCLKFreq+0x8aa>
 8105762:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8105764:	2b00      	cmp	r3, #0
 8105766:	d004      	beq.n	8105772 <HAL_RCCEx_GetPeriphCLKFreq+0x7f2>
 8105768:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 810576a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 810576e:	d012      	beq.n	8105796 <HAL_RCCEx_GetPeriphCLKFreq+0x816>
 8105770:	e05b      	b.n	810582a <HAL_RCCEx_GetPeriphCLKFreq+0x8aa>
    {
      case RCC_ADCCLKSOURCE_PLL2:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8105772:	4b92      	ldr	r3, [pc, #584]	; (81059bc <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8105774:	681b      	ldr	r3, [r3, #0]
 8105776:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 810577a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 810577e:	d107      	bne.n	8105790 <HAL_RCCEx_GetPeriphCLKFreq+0x810>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8105780:	f107 0318 	add.w	r3, r7, #24
 8105784:	4618      	mov	r0, r3
 8105786:	f000 f991 	bl	8105aac <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 810578a:	69bb      	ldr	r3, [r7, #24]
 810578c:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 810578e:	e16e      	b.n	8105a6e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8105790:	2300      	movs	r3, #0
 8105792:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8105794:	e16b      	b.n	8105a6e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_ADCCLKSOURCE_PLL3:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8105796:	4b89      	ldr	r3, [pc, #548]	; (81059bc <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8105798:	681b      	ldr	r3, [r3, #0]
 810579a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 810579e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 81057a2:	d107      	bne.n	81057b4 <HAL_RCCEx_GetPeriphCLKFreq+0x834>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 81057a4:	f107 030c 	add.w	r3, r7, #12
 81057a8:	4618      	mov	r0, r3
 81057aa:	f000 fad3 	bl	8105d54 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 81057ae:	697b      	ldr	r3, [r7, #20]
 81057b0:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 81057b2:	e15c      	b.n	8105a6e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 81057b4:	2300      	movs	r3, #0
 81057b6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 81057b8:	e159      	b.n	8105a6e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_ADCCLKSOURCE_CLKP:
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 81057ba:	4b80      	ldr	r3, [pc, #512]	; (81059bc <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 81057bc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 81057be:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 81057c2:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 81057c4:	4b7d      	ldr	r3, [pc, #500]	; (81059bc <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 81057c6:	681b      	ldr	r3, [r3, #0]
 81057c8:	f003 0304 	and.w	r3, r3, #4
 81057cc:	2b04      	cmp	r3, #4
 81057ce:	d10c      	bne.n	81057ea <HAL_RCCEx_GetPeriphCLKFreq+0x86a>
 81057d0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 81057d2:	2b00      	cmp	r3, #0
 81057d4:	d109      	bne.n	81057ea <HAL_RCCEx_GetPeriphCLKFreq+0x86a>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 81057d6:	4b79      	ldr	r3, [pc, #484]	; (81059bc <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 81057d8:	681b      	ldr	r3, [r3, #0]
 81057da:	08db      	lsrs	r3, r3, #3
 81057dc:	f003 0303 	and.w	r3, r3, #3
 81057e0:	4a77      	ldr	r2, [pc, #476]	; (81059c0 <HAL_RCCEx_GetPeriphCLKFreq+0xa40>)
 81057e2:	fa22 f303 	lsr.w	r3, r2, r3
 81057e6:	63fb      	str	r3, [r7, #60]	; 0x3c
 81057e8:	e01e      	b.n	8105828 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 81057ea:	4b74      	ldr	r3, [pc, #464]	; (81059bc <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 81057ec:	681b      	ldr	r3, [r3, #0]
 81057ee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 81057f2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 81057f6:	d106      	bne.n	8105806 <HAL_RCCEx_GetPeriphCLKFreq+0x886>
 81057f8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 81057fa:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 81057fe:	d102      	bne.n	8105806 <HAL_RCCEx_GetPeriphCLKFreq+0x886>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8105800:	4b70      	ldr	r3, [pc, #448]	; (81059c4 <HAL_RCCEx_GetPeriphCLKFreq+0xa44>)
 8105802:	63fb      	str	r3, [r7, #60]	; 0x3c
 8105804:	e010      	b.n	8105828 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8105806:	4b6d      	ldr	r3, [pc, #436]	; (81059bc <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8105808:	681b      	ldr	r3, [r3, #0]
 810580a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 810580e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8105812:	d106      	bne.n	8105822 <HAL_RCCEx_GetPeriphCLKFreq+0x8a2>
 8105814:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8105816:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 810581a:	d102      	bne.n	8105822 <HAL_RCCEx_GetPeriphCLKFreq+0x8a2>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 810581c:	4b6a      	ldr	r3, [pc, #424]	; (81059c8 <HAL_RCCEx_GetPeriphCLKFreq+0xa48>)
 810581e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8105820:	e002      	b.n	8105828 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8105822:	2300      	movs	r3, #0
 8105824:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 8105826:	e122      	b.n	8105a6e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8105828:	e121      	b.n	8105a6e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 810582a:	2300      	movs	r3, #0
 810582c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 810582e:	e11e      	b.n	8105a6e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 8105830:	e9d7 2300 	ldrd	r2, r3, [r7]
 8105834:	f5a2 3180 	sub.w	r1, r2, #65536	; 0x10000
 8105838:	430b      	orrs	r3, r1
 810583a:	d133      	bne.n	81058a4 <HAL_RCCEx_GetPeriphCLKFreq+0x924>
  {
    /* Get SDMMC clock source */
    srcclk = __HAL_RCC_GET_SDMMC_SOURCE();
 810583c:	4b5f      	ldr	r3, [pc, #380]	; (81059bc <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 810583e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8105840:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8105844:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 8105846:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8105848:	2b00      	cmp	r3, #0
 810584a:	d004      	beq.n	8105856 <HAL_RCCEx_GetPeriphCLKFreq+0x8d6>
 810584c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 810584e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8105852:	d012      	beq.n	810587a <HAL_RCCEx_GetPeriphCLKFreq+0x8fa>
 8105854:	e023      	b.n	810589e <HAL_RCCEx_GetPeriphCLKFreq+0x91e>
    {
      case RCC_SDMMCCLKSOURCE_PLL: /* PLL1 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8105856:	4b59      	ldr	r3, [pc, #356]	; (81059bc <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8105858:	681b      	ldr	r3, [r3, #0]
 810585a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 810585e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8105862:	d107      	bne.n	8105874 <HAL_RCCEx_GetPeriphCLKFreq+0x8f4>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8105864:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8105868:	4618      	mov	r0, r3
 810586a:	f000 fbc7 	bl	8105ffc <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 810586e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8105870:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8105872:	e0fc      	b.n	8105a6e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8105874:	2300      	movs	r3, #0
 8105876:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8105878:	e0f9      	b.n	8105a6e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 810587a:	4b50      	ldr	r3, [pc, #320]	; (81059bc <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 810587c:	681b      	ldr	r3, [r3, #0]
 810587e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8105882:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8105886:	d107      	bne.n	8105898 <HAL_RCCEx_GetPeriphCLKFreq+0x918>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8105888:	f107 0318 	add.w	r3, r7, #24
 810588c:	4618      	mov	r0, r3
 810588e:	f000 f90d 	bl	8105aac <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 8105892:	6a3b      	ldr	r3, [r7, #32]
 8105894:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8105896:	e0ea      	b.n	8105a6e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8105898:	2300      	movs	r3, #0
 810589a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 810589c:	e0e7      	b.n	8105a6e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 810589e:	2300      	movs	r3, #0
 81058a0:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 81058a2:	e0e4      	b.n	8105a6e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 81058a4:	e9d7 2300 	ldrd	r2, r3, [r7]
 81058a8:	f5a2 4180 	sub.w	r1, r2, #16384	; 0x4000
 81058ac:	430b      	orrs	r3, r1
 81058ae:	f040 808d 	bne.w	81059cc <HAL_RCCEx_GetPeriphCLKFreq+0xa4c>
  {
    /* Get SPI6 clock source */
    srcclk = __HAL_RCC_GET_SPI6_SOURCE();
 81058b2:	4b42      	ldr	r3, [pc, #264]	; (81059bc <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 81058b4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 81058b6:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
 81058ba:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 81058bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 81058be:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 81058c2:	d06b      	beq.n	810599c <HAL_RCCEx_GetPeriphCLKFreq+0xa1c>
 81058c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 81058c6:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 81058ca:	d874      	bhi.n	81059b6 <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 81058cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 81058ce:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 81058d2:	d056      	beq.n	8105982 <HAL_RCCEx_GetPeriphCLKFreq+0xa02>
 81058d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 81058d6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 81058da:	d86c      	bhi.n	81059b6 <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 81058dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 81058de:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 81058e2:	d03b      	beq.n	810595c <HAL_RCCEx_GetPeriphCLKFreq+0x9dc>
 81058e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 81058e6:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 81058ea:	d864      	bhi.n	81059b6 <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 81058ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 81058ee:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 81058f2:	d021      	beq.n	8105938 <HAL_RCCEx_GetPeriphCLKFreq+0x9b8>
 81058f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 81058f6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 81058fa:	d85c      	bhi.n	81059b6 <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 81058fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 81058fe:	2b00      	cmp	r3, #0
 8105900:	d004      	beq.n	810590c <HAL_RCCEx_GetPeriphCLKFreq+0x98c>
 8105902:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8105904:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8105908:	d004      	beq.n	8105914 <HAL_RCCEx_GetPeriphCLKFreq+0x994>
 810590a:	e054      	b.n	81059b6 <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
    {
      case RCC_SPI6CLKSOURCE_D3PCLK1: /* D3PCLK1 (PCLK4) is the clock source for SPI6 */
      {
        frequency = HAL_RCCEx_GetD3PCLK1Freq();
 810590c:	f000 f8b8 	bl	8105a80 <HAL_RCCEx_GetD3PCLK1Freq>
 8105910:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8105912:	e0ac      	b.n	8105a6e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8105914:	4b29      	ldr	r3, [pc, #164]	; (81059bc <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8105916:	681b      	ldr	r3, [r3, #0]
 8105918:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 810591c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8105920:	d107      	bne.n	8105932 <HAL_RCCEx_GetPeriphCLKFreq+0x9b2>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8105922:	f107 0318 	add.w	r3, r7, #24
 8105926:	4618      	mov	r0, r3
 8105928:	f000 f8c0 	bl	8105aac <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 810592c:	69fb      	ldr	r3, [r7, #28]
 810592e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8105930:	e09d      	b.n	8105a6e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8105932:	2300      	movs	r3, #0
 8105934:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8105936:	e09a      	b.n	8105a6e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8105938:	4b20      	ldr	r3, [pc, #128]	; (81059bc <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 810593a:	681b      	ldr	r3, [r3, #0]
 810593c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8105940:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8105944:	d107      	bne.n	8105956 <HAL_RCCEx_GetPeriphCLKFreq+0x9d6>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8105946:	f107 030c 	add.w	r3, r7, #12
 810594a:	4618      	mov	r0, r3
 810594c:	f000 fa02 	bl	8105d54 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8105950:	693b      	ldr	r3, [r7, #16]
 8105952:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8105954:	e08b      	b.n	8105a6e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8105956:	2300      	movs	r3, #0
 8105958:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 810595a:	e088      	b.n	8105a6e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_HSI: /* HSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 810595c:	4b17      	ldr	r3, [pc, #92]	; (81059bc <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 810595e:	681b      	ldr	r3, [r3, #0]
 8105960:	f003 0304 	and.w	r3, r3, #4
 8105964:	2b04      	cmp	r3, #4
 8105966:	d109      	bne.n	810597c <HAL_RCCEx_GetPeriphCLKFreq+0x9fc>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8105968:	4b14      	ldr	r3, [pc, #80]	; (81059bc <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 810596a:	681b      	ldr	r3, [r3, #0]
 810596c:	08db      	lsrs	r3, r3, #3
 810596e:	f003 0303 	and.w	r3, r3, #3
 8105972:	4a13      	ldr	r2, [pc, #76]	; (81059c0 <HAL_RCCEx_GetPeriphCLKFreq+0xa40>)
 8105974:	fa22 f303 	lsr.w	r3, r2, r3
 8105978:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 810597a:	e078      	b.n	8105a6e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 810597c:	2300      	movs	r3, #0
 810597e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8105980:	e075      	b.n	8105a6e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_CSI: /* CSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 8105982:	4b0e      	ldr	r3, [pc, #56]	; (81059bc <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8105984:	681b      	ldr	r3, [r3, #0]
 8105986:	f403 7380 	and.w	r3, r3, #256	; 0x100
 810598a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 810598e:	d102      	bne.n	8105996 <HAL_RCCEx_GetPeriphCLKFreq+0xa16>
        {
          frequency = CSI_VALUE;
 8105990:	4b0c      	ldr	r3, [pc, #48]	; (81059c4 <HAL_RCCEx_GetPeriphCLKFreq+0xa44>)
 8105992:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8105994:	e06b      	b.n	8105a6e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8105996:	2300      	movs	r3, #0
 8105998:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 810599a:	e068      	b.n	8105a6e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_HSE: /* HSE is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 810599c:	4b07      	ldr	r3, [pc, #28]	; (81059bc <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 810599e:	681b      	ldr	r3, [r3, #0]
 81059a0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 81059a4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 81059a8:	d102      	bne.n	81059b0 <HAL_RCCEx_GetPeriphCLKFreq+0xa30>
        {
          frequency = HSE_VALUE;
 81059aa:	4b07      	ldr	r3, [pc, #28]	; (81059c8 <HAL_RCCEx_GetPeriphCLKFreq+0xa48>)
 81059ac:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 81059ae:	e05e      	b.n	8105a6e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 81059b0:	2300      	movs	r3, #0
 81059b2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 81059b4:	e05b      	b.n	8105a6e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
        break;
      }
#endif /* RCC_SPI6CLKSOURCE_PIN */
      default :
      {
        frequency = 0;
 81059b6:	2300      	movs	r3, #0
 81059b8:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 81059ba:	e058      	b.n	8105a6e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 81059bc:	58024400 	.word	0x58024400
 81059c0:	03d09000 	.word	0x03d09000
 81059c4:	003d0900 	.word	0x003d0900
 81059c8:	017d7840 	.word	0x017d7840
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN)
 81059cc:	e9d7 2300 	ldrd	r2, r3, [r7]
 81059d0:	f5a2 4100 	sub.w	r1, r2, #32768	; 0x8000
 81059d4:	430b      	orrs	r3, r1
 81059d6:	d148      	bne.n	8105a6a <HAL_RCCEx_GetPeriphCLKFreq+0xaea>
  {
    /* Get FDCAN clock source */
    srcclk = __HAL_RCC_GET_FDCAN_SOURCE();
 81059d8:	4b27      	ldr	r3, [pc, #156]	; (8105a78 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 81059da:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 81059dc:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 81059e0:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 81059e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 81059e4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 81059e8:	d02a      	beq.n	8105a40 <HAL_RCCEx_GetPeriphCLKFreq+0xac0>
 81059ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 81059ec:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 81059f0:	d838      	bhi.n	8105a64 <HAL_RCCEx_GetPeriphCLKFreq+0xae4>
 81059f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 81059f4:	2b00      	cmp	r3, #0
 81059f6:	d004      	beq.n	8105a02 <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
 81059f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 81059fa:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 81059fe:	d00d      	beq.n	8105a1c <HAL_RCCEx_GetPeriphCLKFreq+0xa9c>
 8105a00:	e030      	b.n	8105a64 <HAL_RCCEx_GetPeriphCLKFreq+0xae4>
    {
      case RCC_FDCANCLKSOURCE_HSE: /* HSE is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8105a02:	4b1d      	ldr	r3, [pc, #116]	; (8105a78 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 8105a04:	681b      	ldr	r3, [r3, #0]
 8105a06:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8105a0a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8105a0e:	d102      	bne.n	8105a16 <HAL_RCCEx_GetPeriphCLKFreq+0xa96>
        {
          frequency = HSE_VALUE;
 8105a10:	4b1a      	ldr	r3, [pc, #104]	; (8105a7c <HAL_RCCEx_GetPeriphCLKFreq+0xafc>)
 8105a12:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8105a14:	e02b      	b.n	8105a6e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8105a16:	2300      	movs	r3, #0
 8105a18:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8105a1a:	e028      	b.n	8105a6e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_FDCANCLKSOURCE_PLL: /* PLL is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8105a1c:	4b16      	ldr	r3, [pc, #88]	; (8105a78 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 8105a1e:	681b      	ldr	r3, [r3, #0]
 8105a20:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8105a24:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8105a28:	d107      	bne.n	8105a3a <HAL_RCCEx_GetPeriphCLKFreq+0xaba>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8105a2a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8105a2e:	4618      	mov	r0, r3
 8105a30:	f000 fae4 	bl	8105ffc <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8105a34:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8105a36:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8105a38:	e019      	b.n	8105a6e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8105a3a:	2300      	movs	r3, #0
 8105a3c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8105a3e:	e016      	b.n	8105a6e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8105a40:	4b0d      	ldr	r3, [pc, #52]	; (8105a78 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 8105a42:	681b      	ldr	r3, [r3, #0]
 8105a44:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8105a48:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8105a4c:	d107      	bne.n	8105a5e <HAL_RCCEx_GetPeriphCLKFreq+0xade>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8105a4e:	f107 0318 	add.w	r3, r7, #24
 8105a52:	4618      	mov	r0, r3
 8105a54:	f000 f82a 	bl	8105aac <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8105a58:	69fb      	ldr	r3, [r7, #28]
 8105a5a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8105a5c:	e007      	b.n	8105a6e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8105a5e:	2300      	movs	r3, #0
 8105a60:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8105a62:	e004      	b.n	8105a6e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 8105a64:	2300      	movs	r3, #0
 8105a66:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8105a68:	e001      	b.n	8105a6e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else
  {
    frequency = 0;
 8105a6a:	2300      	movs	r3, #0
 8105a6c:	63fb      	str	r3, [r7, #60]	; 0x3c
  }

  return frequency;
 8105a6e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8105a70:	4618      	mov	r0, r3
 8105a72:	3740      	adds	r7, #64	; 0x40
 8105a74:	46bd      	mov	sp, r7
 8105a76:	bd80      	pop	{r7, pc}
 8105a78:	58024400 	.word	0x58024400
 8105a7c:	017d7840 	.word	0x017d7840

08105a80 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8105a80:	b580      	push	{r7, lr}
 8105a82:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8105a84:	f7fd ffd4 	bl	8103a30 <HAL_RCC_GetHCLKFreq>
 8105a88:	4602      	mov	r2, r0
 8105a8a:	4b06      	ldr	r3, [pc, #24]	; (8105aa4 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8105a8c:	6a1b      	ldr	r3, [r3, #32]
 8105a8e:	091b      	lsrs	r3, r3, #4
 8105a90:	f003 0307 	and.w	r3, r3, #7
 8105a94:	4904      	ldr	r1, [pc, #16]	; (8105aa8 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 8105a96:	5ccb      	ldrb	r3, [r1, r3]
 8105a98:	f003 031f 	and.w	r3, r3, #31
 8105a9c:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 8105aa0:	4618      	mov	r0, r3
 8105aa2:	bd80      	pop	{r7, pc}
 8105aa4:	58024400 	.word	0x58024400
 8105aa8:	0810bd98 	.word	0x0810bd98

08105aac <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 8105aac:	b480      	push	{r7}
 8105aae:	b089      	sub	sp, #36	; 0x24
 8105ab0:	af00      	add	r7, sp, #0
 8105ab2:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8105ab4:	4ba1      	ldr	r3, [pc, #644]	; (8105d3c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8105ab6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8105ab8:	f003 0303 	and.w	r3, r3, #3
 8105abc:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 8105abe:	4b9f      	ldr	r3, [pc, #636]	; (8105d3c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8105ac0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8105ac2:	0b1b      	lsrs	r3, r3, #12
 8105ac4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8105ac8:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8105aca:	4b9c      	ldr	r3, [pc, #624]	; (8105d3c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8105acc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8105ace:	091b      	lsrs	r3, r3, #4
 8105ad0:	f003 0301 	and.w	r3, r3, #1
 8105ad4:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 8105ad6:	4b99      	ldr	r3, [pc, #612]	; (8105d3c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8105ad8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8105ada:	08db      	lsrs	r3, r3, #3
 8105adc:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8105ae0:	693a      	ldr	r2, [r7, #16]
 8105ae2:	fb02 f303 	mul.w	r3, r2, r3
 8105ae6:	ee07 3a90 	vmov	s15, r3
 8105aea:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8105aee:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 8105af2:	697b      	ldr	r3, [r7, #20]
 8105af4:	2b00      	cmp	r3, #0
 8105af6:	f000 8111 	beq.w	8105d1c <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 8105afa:	69bb      	ldr	r3, [r7, #24]
 8105afc:	2b02      	cmp	r3, #2
 8105afe:	f000 8083 	beq.w	8105c08 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 8105b02:	69bb      	ldr	r3, [r7, #24]
 8105b04:	2b02      	cmp	r3, #2
 8105b06:	f200 80a1 	bhi.w	8105c4c <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 8105b0a:	69bb      	ldr	r3, [r7, #24]
 8105b0c:	2b00      	cmp	r3, #0
 8105b0e:	d003      	beq.n	8105b18 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8105b10:	69bb      	ldr	r3, [r7, #24]
 8105b12:	2b01      	cmp	r3, #1
 8105b14:	d056      	beq.n	8105bc4 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 8105b16:	e099      	b.n	8105c4c <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8105b18:	4b88      	ldr	r3, [pc, #544]	; (8105d3c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8105b1a:	681b      	ldr	r3, [r3, #0]
 8105b1c:	f003 0320 	and.w	r3, r3, #32
 8105b20:	2b00      	cmp	r3, #0
 8105b22:	d02d      	beq.n	8105b80 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8105b24:	4b85      	ldr	r3, [pc, #532]	; (8105d3c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8105b26:	681b      	ldr	r3, [r3, #0]
 8105b28:	08db      	lsrs	r3, r3, #3
 8105b2a:	f003 0303 	and.w	r3, r3, #3
 8105b2e:	4a84      	ldr	r2, [pc, #528]	; (8105d40 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8105b30:	fa22 f303 	lsr.w	r3, r2, r3
 8105b34:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8105b36:	68bb      	ldr	r3, [r7, #8]
 8105b38:	ee07 3a90 	vmov	s15, r3
 8105b3c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8105b40:	697b      	ldr	r3, [r7, #20]
 8105b42:	ee07 3a90 	vmov	s15, r3
 8105b46:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8105b4a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8105b4e:	4b7b      	ldr	r3, [pc, #492]	; (8105d3c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8105b50:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8105b52:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8105b56:	ee07 3a90 	vmov	s15, r3
 8105b5a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8105b5e:	ed97 6a03 	vldr	s12, [r7, #12]
 8105b62:	eddf 5a78 	vldr	s11, [pc, #480]	; 8105d44 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8105b66:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8105b6a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8105b6e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8105b72:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8105b76:	ee67 7a27 	vmul.f32	s15, s14, s15
 8105b7a:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8105b7e:	e087      	b.n	8105c90 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8105b80:	697b      	ldr	r3, [r7, #20]
 8105b82:	ee07 3a90 	vmov	s15, r3
 8105b86:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8105b8a:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8105d48 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 8105b8e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8105b92:	4b6a      	ldr	r3, [pc, #424]	; (8105d3c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8105b94:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8105b96:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8105b9a:	ee07 3a90 	vmov	s15, r3
 8105b9e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8105ba2:	ed97 6a03 	vldr	s12, [r7, #12]
 8105ba6:	eddf 5a67 	vldr	s11, [pc, #412]	; 8105d44 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8105baa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8105bae:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8105bb2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8105bb6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8105bba:	ee67 7a27 	vmul.f32	s15, s14, s15
 8105bbe:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8105bc2:	e065      	b.n	8105c90 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8105bc4:	697b      	ldr	r3, [r7, #20]
 8105bc6:	ee07 3a90 	vmov	s15, r3
 8105bca:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8105bce:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8105d4c <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8105bd2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8105bd6:	4b59      	ldr	r3, [pc, #356]	; (8105d3c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8105bd8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8105bda:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8105bde:	ee07 3a90 	vmov	s15, r3
 8105be2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8105be6:	ed97 6a03 	vldr	s12, [r7, #12]
 8105bea:	eddf 5a56 	vldr	s11, [pc, #344]	; 8105d44 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8105bee:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8105bf2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8105bf6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8105bfa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8105bfe:	ee67 7a27 	vmul.f32	s15, s14, s15
 8105c02:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8105c06:	e043      	b.n	8105c90 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8105c08:	697b      	ldr	r3, [r7, #20]
 8105c0a:	ee07 3a90 	vmov	s15, r3
 8105c0e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8105c12:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8105d50 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 8105c16:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8105c1a:	4b48      	ldr	r3, [pc, #288]	; (8105d3c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8105c1c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8105c1e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8105c22:	ee07 3a90 	vmov	s15, r3
 8105c26:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8105c2a:	ed97 6a03 	vldr	s12, [r7, #12]
 8105c2e:	eddf 5a45 	vldr	s11, [pc, #276]	; 8105d44 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8105c32:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8105c36:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8105c3a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8105c3e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8105c42:	ee67 7a27 	vmul.f32	s15, s14, s15
 8105c46:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8105c4a:	e021      	b.n	8105c90 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8105c4c:	697b      	ldr	r3, [r7, #20]
 8105c4e:	ee07 3a90 	vmov	s15, r3
 8105c52:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8105c56:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8105d4c <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8105c5a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8105c5e:	4b37      	ldr	r3, [pc, #220]	; (8105d3c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8105c60:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8105c62:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8105c66:	ee07 3a90 	vmov	s15, r3
 8105c6a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8105c6e:	ed97 6a03 	vldr	s12, [r7, #12]
 8105c72:	eddf 5a34 	vldr	s11, [pc, #208]	; 8105d44 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8105c76:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8105c7a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8105c7e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8105c82:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8105c86:	ee67 7a27 	vmul.f32	s15, s14, s15
 8105c8a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8105c8e:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 8105c90:	4b2a      	ldr	r3, [pc, #168]	; (8105d3c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8105c92:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8105c94:	0a5b      	lsrs	r3, r3, #9
 8105c96:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8105c9a:	ee07 3a90 	vmov	s15, r3
 8105c9e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8105ca2:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8105ca6:	ee37 7a87 	vadd.f32	s14, s15, s14
 8105caa:	edd7 6a07 	vldr	s13, [r7, #28]
 8105cae:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8105cb2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8105cb6:	ee17 2a90 	vmov	r2, s15
 8105cba:	687b      	ldr	r3, [r7, #4]
 8105cbc:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 8105cbe:	4b1f      	ldr	r3, [pc, #124]	; (8105d3c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8105cc0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8105cc2:	0c1b      	lsrs	r3, r3, #16
 8105cc4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8105cc8:	ee07 3a90 	vmov	s15, r3
 8105ccc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8105cd0:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8105cd4:	ee37 7a87 	vadd.f32	s14, s15, s14
 8105cd8:	edd7 6a07 	vldr	s13, [r7, #28]
 8105cdc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8105ce0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8105ce4:	ee17 2a90 	vmov	r2, s15
 8105ce8:	687b      	ldr	r3, [r7, #4]
 8105cea:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 8105cec:	4b13      	ldr	r3, [pc, #76]	; (8105d3c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8105cee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8105cf0:	0e1b      	lsrs	r3, r3, #24
 8105cf2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8105cf6:	ee07 3a90 	vmov	s15, r3
 8105cfa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8105cfe:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8105d02:	ee37 7a87 	vadd.f32	s14, s15, s14
 8105d06:	edd7 6a07 	vldr	s13, [r7, #28]
 8105d0a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8105d0e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8105d12:	ee17 2a90 	vmov	r2, s15
 8105d16:	687b      	ldr	r3, [r7, #4]
 8105d18:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8105d1a:	e008      	b.n	8105d2e <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8105d1c:	687b      	ldr	r3, [r7, #4]
 8105d1e:	2200      	movs	r2, #0
 8105d20:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8105d22:	687b      	ldr	r3, [r7, #4]
 8105d24:	2200      	movs	r2, #0
 8105d26:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8105d28:	687b      	ldr	r3, [r7, #4]
 8105d2a:	2200      	movs	r2, #0
 8105d2c:	609a      	str	r2, [r3, #8]
}
 8105d2e:	bf00      	nop
 8105d30:	3724      	adds	r7, #36	; 0x24
 8105d32:	46bd      	mov	sp, r7
 8105d34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8105d38:	4770      	bx	lr
 8105d3a:	bf00      	nop
 8105d3c:	58024400 	.word	0x58024400
 8105d40:	03d09000 	.word	0x03d09000
 8105d44:	46000000 	.word	0x46000000
 8105d48:	4c742400 	.word	0x4c742400
 8105d4c:	4a742400 	.word	0x4a742400
 8105d50:	4bbebc20 	.word	0x4bbebc20

08105d54 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 8105d54:	b480      	push	{r7}
 8105d56:	b089      	sub	sp, #36	; 0x24
 8105d58:	af00      	add	r7, sp, #0
 8105d5a:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8105d5c:	4ba1      	ldr	r3, [pc, #644]	; (8105fe4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8105d5e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8105d60:	f003 0303 	and.w	r3, r3, #3
 8105d64:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 8105d66:	4b9f      	ldr	r3, [pc, #636]	; (8105fe4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8105d68:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8105d6a:	0d1b      	lsrs	r3, r3, #20
 8105d6c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8105d70:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8105d72:	4b9c      	ldr	r3, [pc, #624]	; (8105fe4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8105d74:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8105d76:	0a1b      	lsrs	r3, r3, #8
 8105d78:	f003 0301 	and.w	r3, r3, #1
 8105d7c:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 8105d7e:	4b99      	ldr	r3, [pc, #612]	; (8105fe4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8105d80:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8105d82:	08db      	lsrs	r3, r3, #3
 8105d84:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8105d88:	693a      	ldr	r2, [r7, #16]
 8105d8a:	fb02 f303 	mul.w	r3, r2, r3
 8105d8e:	ee07 3a90 	vmov	s15, r3
 8105d92:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8105d96:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8105d9a:	697b      	ldr	r3, [r7, #20]
 8105d9c:	2b00      	cmp	r3, #0
 8105d9e:	f000 8111 	beq.w	8105fc4 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 8105da2:	69bb      	ldr	r3, [r7, #24]
 8105da4:	2b02      	cmp	r3, #2
 8105da6:	f000 8083 	beq.w	8105eb0 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 8105daa:	69bb      	ldr	r3, [r7, #24]
 8105dac:	2b02      	cmp	r3, #2
 8105dae:	f200 80a1 	bhi.w	8105ef4 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 8105db2:	69bb      	ldr	r3, [r7, #24]
 8105db4:	2b00      	cmp	r3, #0
 8105db6:	d003      	beq.n	8105dc0 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8105db8:	69bb      	ldr	r3, [r7, #24]
 8105dba:	2b01      	cmp	r3, #1
 8105dbc:	d056      	beq.n	8105e6c <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 8105dbe:	e099      	b.n	8105ef4 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8105dc0:	4b88      	ldr	r3, [pc, #544]	; (8105fe4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8105dc2:	681b      	ldr	r3, [r3, #0]
 8105dc4:	f003 0320 	and.w	r3, r3, #32
 8105dc8:	2b00      	cmp	r3, #0
 8105dca:	d02d      	beq.n	8105e28 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8105dcc:	4b85      	ldr	r3, [pc, #532]	; (8105fe4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8105dce:	681b      	ldr	r3, [r3, #0]
 8105dd0:	08db      	lsrs	r3, r3, #3
 8105dd2:	f003 0303 	and.w	r3, r3, #3
 8105dd6:	4a84      	ldr	r2, [pc, #528]	; (8105fe8 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8105dd8:	fa22 f303 	lsr.w	r3, r2, r3
 8105ddc:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8105dde:	68bb      	ldr	r3, [r7, #8]
 8105de0:	ee07 3a90 	vmov	s15, r3
 8105de4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8105de8:	697b      	ldr	r3, [r7, #20]
 8105dea:	ee07 3a90 	vmov	s15, r3
 8105dee:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8105df2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8105df6:	4b7b      	ldr	r3, [pc, #492]	; (8105fe4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8105df8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8105dfa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8105dfe:	ee07 3a90 	vmov	s15, r3
 8105e02:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8105e06:	ed97 6a03 	vldr	s12, [r7, #12]
 8105e0a:	eddf 5a78 	vldr	s11, [pc, #480]	; 8105fec <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8105e0e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8105e12:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8105e16:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8105e1a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8105e1e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8105e22:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8105e26:	e087      	b.n	8105f38 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8105e28:	697b      	ldr	r3, [r7, #20]
 8105e2a:	ee07 3a90 	vmov	s15, r3
 8105e2e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8105e32:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8105ff0 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 8105e36:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8105e3a:	4b6a      	ldr	r3, [pc, #424]	; (8105fe4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8105e3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8105e3e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8105e42:	ee07 3a90 	vmov	s15, r3
 8105e46:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8105e4a:	ed97 6a03 	vldr	s12, [r7, #12]
 8105e4e:	eddf 5a67 	vldr	s11, [pc, #412]	; 8105fec <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8105e52:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8105e56:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8105e5a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8105e5e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8105e62:	ee67 7a27 	vmul.f32	s15, s14, s15
 8105e66:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8105e6a:	e065      	b.n	8105f38 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8105e6c:	697b      	ldr	r3, [r7, #20]
 8105e6e:	ee07 3a90 	vmov	s15, r3
 8105e72:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8105e76:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8105ff4 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8105e7a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8105e7e:	4b59      	ldr	r3, [pc, #356]	; (8105fe4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8105e80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8105e82:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8105e86:	ee07 3a90 	vmov	s15, r3
 8105e8a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8105e8e:	ed97 6a03 	vldr	s12, [r7, #12]
 8105e92:	eddf 5a56 	vldr	s11, [pc, #344]	; 8105fec <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8105e96:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8105e9a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8105e9e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8105ea2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8105ea6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8105eaa:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8105eae:	e043      	b.n	8105f38 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8105eb0:	697b      	ldr	r3, [r7, #20]
 8105eb2:	ee07 3a90 	vmov	s15, r3
 8105eb6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8105eba:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8105ff8 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 8105ebe:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8105ec2:	4b48      	ldr	r3, [pc, #288]	; (8105fe4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8105ec4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8105ec6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8105eca:	ee07 3a90 	vmov	s15, r3
 8105ece:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8105ed2:	ed97 6a03 	vldr	s12, [r7, #12]
 8105ed6:	eddf 5a45 	vldr	s11, [pc, #276]	; 8105fec <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8105eda:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8105ede:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8105ee2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8105ee6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8105eea:	ee67 7a27 	vmul.f32	s15, s14, s15
 8105eee:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8105ef2:	e021      	b.n	8105f38 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8105ef4:	697b      	ldr	r3, [r7, #20]
 8105ef6:	ee07 3a90 	vmov	s15, r3
 8105efa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8105efe:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8105ff4 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8105f02:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8105f06:	4b37      	ldr	r3, [pc, #220]	; (8105fe4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8105f08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8105f0a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8105f0e:	ee07 3a90 	vmov	s15, r3
 8105f12:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8105f16:	ed97 6a03 	vldr	s12, [r7, #12]
 8105f1a:	eddf 5a34 	vldr	s11, [pc, #208]	; 8105fec <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8105f1e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8105f22:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8105f26:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8105f2a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8105f2e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8105f32:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8105f36:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 8105f38:	4b2a      	ldr	r3, [pc, #168]	; (8105fe4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8105f3a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8105f3c:	0a5b      	lsrs	r3, r3, #9
 8105f3e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8105f42:	ee07 3a90 	vmov	s15, r3
 8105f46:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8105f4a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8105f4e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8105f52:	edd7 6a07 	vldr	s13, [r7, #28]
 8105f56:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8105f5a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8105f5e:	ee17 2a90 	vmov	r2, s15
 8105f62:	687b      	ldr	r3, [r7, #4]
 8105f64:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 8105f66:	4b1f      	ldr	r3, [pc, #124]	; (8105fe4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8105f68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8105f6a:	0c1b      	lsrs	r3, r3, #16
 8105f6c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8105f70:	ee07 3a90 	vmov	s15, r3
 8105f74:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8105f78:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8105f7c:	ee37 7a87 	vadd.f32	s14, s15, s14
 8105f80:	edd7 6a07 	vldr	s13, [r7, #28]
 8105f84:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8105f88:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8105f8c:	ee17 2a90 	vmov	r2, s15
 8105f90:	687b      	ldr	r3, [r7, #4]
 8105f92:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 8105f94:	4b13      	ldr	r3, [pc, #76]	; (8105fe4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8105f96:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8105f98:	0e1b      	lsrs	r3, r3, #24
 8105f9a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8105f9e:	ee07 3a90 	vmov	s15, r3
 8105fa2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8105fa6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8105faa:	ee37 7a87 	vadd.f32	s14, s15, s14
 8105fae:	edd7 6a07 	vldr	s13, [r7, #28]
 8105fb2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8105fb6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8105fba:	ee17 2a90 	vmov	r2, s15
 8105fbe:	687b      	ldr	r3, [r7, #4]
 8105fc0:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8105fc2:	e008      	b.n	8105fd6 <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8105fc4:	687b      	ldr	r3, [r7, #4]
 8105fc6:	2200      	movs	r2, #0
 8105fc8:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8105fca:	687b      	ldr	r3, [r7, #4]
 8105fcc:	2200      	movs	r2, #0
 8105fce:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8105fd0:	687b      	ldr	r3, [r7, #4]
 8105fd2:	2200      	movs	r2, #0
 8105fd4:	609a      	str	r2, [r3, #8]
}
 8105fd6:	bf00      	nop
 8105fd8:	3724      	adds	r7, #36	; 0x24
 8105fda:	46bd      	mov	sp, r7
 8105fdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8105fe0:	4770      	bx	lr
 8105fe2:	bf00      	nop
 8105fe4:	58024400 	.word	0x58024400
 8105fe8:	03d09000 	.word	0x03d09000
 8105fec:	46000000 	.word	0x46000000
 8105ff0:	4c742400 	.word	0x4c742400
 8105ff4:	4a742400 	.word	0x4a742400
 8105ff8:	4bbebc20 	.word	0x4bbebc20

08105ffc <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef *PLL1_Clocks)
{
 8105ffc:	b480      	push	{r7}
 8105ffe:	b089      	sub	sp, #36	; 0x24
 8106000:	af00      	add	r7, sp, #0
 8106002:	6078      	str	r0, [r7, #4]
  uint32_t pllsource, pll1m, pll1fracen, hsivalue;
  float_t fracn1, pll1vco;

  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8106004:	4ba0      	ldr	r3, [pc, #640]	; (8106288 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8106006:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8106008:	f003 0303 	and.w	r3, r3, #3
 810600c:	61bb      	str	r3, [r7, #24]
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4);
 810600e:	4b9e      	ldr	r3, [pc, #632]	; (8106288 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8106010:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8106012:	091b      	lsrs	r3, r3, #4
 8106014:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8106018:	617b      	str	r3, [r7, #20]
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 810601a:	4b9b      	ldr	r3, [pc, #620]	; (8106288 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 810601c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 810601e:	f003 0301 	and.w	r3, r3, #1
 8106022:	613b      	str	r3, [r7, #16]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8106024:	4b98      	ldr	r3, [pc, #608]	; (8106288 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8106026:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8106028:	08db      	lsrs	r3, r3, #3
 810602a:	f3c3 030c 	ubfx	r3, r3, #0, #13
 810602e:	693a      	ldr	r2, [r7, #16]
 8106030:	fb02 f303 	mul.w	r3, r2, r3
 8106034:	ee07 3a90 	vmov	s15, r3
 8106038:	eef8 7a67 	vcvt.f32.u32	s15, s15
 810603c:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll1m != 0U)
 8106040:	697b      	ldr	r3, [r7, #20]
 8106042:	2b00      	cmp	r3, #0
 8106044:	f000 8111 	beq.w	810626a <HAL_RCCEx_GetPLL1ClockFreq+0x26e>
  {
    switch (pllsource)
 8106048:	69bb      	ldr	r3, [r7, #24]
 810604a:	2b02      	cmp	r3, #2
 810604c:	f000 8083 	beq.w	8106156 <HAL_RCCEx_GetPLL1ClockFreq+0x15a>
 8106050:	69bb      	ldr	r3, [r7, #24]
 8106052:	2b02      	cmp	r3, #2
 8106054:	f200 80a1 	bhi.w	810619a <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
 8106058:	69bb      	ldr	r3, [r7, #24]
 810605a:	2b00      	cmp	r3, #0
 810605c:	d003      	beq.n	8106066 <HAL_RCCEx_GetPLL1ClockFreq+0x6a>
 810605e:	69bb      	ldr	r3, [r7, #24]
 8106060:	2b01      	cmp	r3, #1
 8106062:	d056      	beq.n	8106112 <HAL_RCCEx_GetPLL1ClockFreq+0x116>
 8106064:	e099      	b.n	810619a <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8106066:	4b88      	ldr	r3, [pc, #544]	; (8106288 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8106068:	681b      	ldr	r3, [r3, #0]
 810606a:	f003 0320 	and.w	r3, r3, #32
 810606e:	2b00      	cmp	r3, #0
 8106070:	d02d      	beq.n	81060ce <HAL_RCCEx_GetPLL1ClockFreq+0xd2>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8106072:	4b85      	ldr	r3, [pc, #532]	; (8106288 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8106074:	681b      	ldr	r3, [r3, #0]
 8106076:	08db      	lsrs	r3, r3, #3
 8106078:	f003 0303 	and.w	r3, r3, #3
 810607c:	4a83      	ldr	r2, [pc, #524]	; (810628c <HAL_RCCEx_GetPLL1ClockFreq+0x290>)
 810607e:	fa22 f303 	lsr.w	r3, r2, r3
 8106082:	60bb      	str	r3, [r7, #8]
          pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8106084:	68bb      	ldr	r3, [r7, #8]
 8106086:	ee07 3a90 	vmov	s15, r3
 810608a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 810608e:	697b      	ldr	r3, [r7, #20]
 8106090:	ee07 3a90 	vmov	s15, r3
 8106094:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8106098:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 810609c:	4b7a      	ldr	r3, [pc, #488]	; (8106288 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 810609e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 81060a0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 81060a4:	ee07 3a90 	vmov	s15, r3
 81060a8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 81060ac:	ed97 6a03 	vldr	s12, [r7, #12]
 81060b0:	eddf 5a77 	vldr	s11, [pc, #476]	; 8106290 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 81060b4:	eec6 7a25 	vdiv.f32	s15, s12, s11
 81060b8:	ee76 7aa7 	vadd.f32	s15, s13, s15
 81060bc:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 81060c0:	ee77 7aa6 	vadd.f32	s15, s15, s13
 81060c4:	ee67 7a27 	vmul.f32	s15, s14, s15
 81060c8:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
        }
        break;
 81060cc:	e087      	b.n	81061de <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 81060ce:	697b      	ldr	r3, [r7, #20]
 81060d0:	ee07 3a90 	vmov	s15, r3
 81060d4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 81060d8:	eddf 6a6e 	vldr	s13, [pc, #440]	; 8106294 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 81060dc:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 81060e0:	4b69      	ldr	r3, [pc, #420]	; (8106288 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 81060e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 81060e4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 81060e8:	ee07 3a90 	vmov	s15, r3
 81060ec:	eef8 6a67 	vcvt.f32.u32	s13, s15
 81060f0:	ed97 6a03 	vldr	s12, [r7, #12]
 81060f4:	eddf 5a66 	vldr	s11, [pc, #408]	; 8106290 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 81060f8:	eec6 7a25 	vdiv.f32	s15, s12, s11
 81060fc:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8106100:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8106104:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8106108:	ee67 7a27 	vmul.f32	s15, s14, s15
 810610c:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8106110:	e065      	b.n	81061de <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8106112:	697b      	ldr	r3, [r7, #20]
 8106114:	ee07 3a90 	vmov	s15, r3
 8106118:	eef8 7a67 	vcvt.f32.u32	s15, s15
 810611c:	eddf 6a5e 	vldr	s13, [pc, #376]	; 8106298 <HAL_RCCEx_GetPLL1ClockFreq+0x29c>
 8106120:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8106124:	4b58      	ldr	r3, [pc, #352]	; (8106288 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8106126:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8106128:	f3c3 0308 	ubfx	r3, r3, #0, #9
 810612c:	ee07 3a90 	vmov	s15, r3
 8106130:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8106134:	ed97 6a03 	vldr	s12, [r7, #12]
 8106138:	eddf 5a55 	vldr	s11, [pc, #340]	; 8106290 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 810613c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8106140:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8106144:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8106148:	ee77 7aa6 	vadd.f32	s15, s15, s13
 810614c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8106150:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8106154:	e043      	b.n	81061de <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8106156:	697b      	ldr	r3, [r7, #20]
 8106158:	ee07 3a90 	vmov	s15, r3
 810615c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8106160:	eddf 6a4e 	vldr	s13, [pc, #312]	; 810629c <HAL_RCCEx_GetPLL1ClockFreq+0x2a0>
 8106164:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8106168:	4b47      	ldr	r3, [pc, #284]	; (8106288 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 810616a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 810616c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8106170:	ee07 3a90 	vmov	s15, r3
 8106174:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8106178:	ed97 6a03 	vldr	s12, [r7, #12]
 810617c:	eddf 5a44 	vldr	s11, [pc, #272]	; 8106290 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8106180:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8106184:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8106188:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 810618c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8106190:	ee67 7a27 	vmul.f32	s15, s14, s15
 8106194:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8106198:	e021      	b.n	81061de <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      default:
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 810619a:	697b      	ldr	r3, [r7, #20]
 810619c:	ee07 3a90 	vmov	s15, r3
 81061a0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 81061a4:	eddf 6a3b 	vldr	s13, [pc, #236]	; 8106294 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 81061a8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 81061ac:	4b36      	ldr	r3, [pc, #216]	; (8106288 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 81061ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 81061b0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 81061b4:	ee07 3a90 	vmov	s15, r3
 81061b8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 81061bc:	ed97 6a03 	vldr	s12, [r7, #12]
 81061c0:	eddf 5a33 	vldr	s11, [pc, #204]	; 8106290 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 81061c4:	eec6 7a25 	vdiv.f32	s15, s12, s11
 81061c8:	ee76 7aa7 	vadd.f32	s15, s13, s15
 81061cc:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 81061d0:	ee77 7aa6 	vadd.f32	s15, s15, s13
 81061d4:	ee67 7a27 	vmul.f32	s15, s14, s15
 81061d8:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 81061dc:	bf00      	nop
    }

    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9)  + (float_t)1)) ;
 81061de:	4b2a      	ldr	r3, [pc, #168]	; (8106288 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 81061e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 81061e2:	0a5b      	lsrs	r3, r3, #9
 81061e4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 81061e8:	ee07 3a90 	vmov	s15, r3
 81061ec:	eef8 7a67 	vcvt.f32.u32	s15, s15
 81061f0:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 81061f4:	ee37 7a87 	vadd.f32	s14, s15, s14
 81061f8:	edd7 6a07 	vldr	s13, [r7, #28]
 81061fc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8106200:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8106204:	ee17 2a90 	vmov	r2, s15
 8106208:	687b      	ldr	r3, [r7, #4]
 810620a:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >> 16) + (float_t)1)) ;
 810620c:	4b1e      	ldr	r3, [pc, #120]	; (8106288 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 810620e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8106210:	0c1b      	lsrs	r3, r3, #16
 8106212:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8106216:	ee07 3a90 	vmov	s15, r3
 810621a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 810621e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8106222:	ee37 7a87 	vadd.f32	s14, s15, s14
 8106226:	edd7 6a07 	vldr	s13, [r7, #28]
 810622a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 810622e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8106232:	ee17 2a90 	vmov	r2, s15
 8106236:	687b      	ldr	r3, [r7, #4]
 8106238:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >> 24) + (float_t)1)) ;
 810623a:	4b13      	ldr	r3, [pc, #76]	; (8106288 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 810623c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 810623e:	0e1b      	lsrs	r3, r3, #24
 8106240:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8106244:	ee07 3a90 	vmov	s15, r3
 8106248:	eef8 7a67 	vcvt.f32.u32	s15, s15
 810624c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8106250:	ee37 7a87 	vadd.f32	s14, s15, s14
 8106254:	edd7 6a07 	vldr	s13, [r7, #28]
 8106258:	eec6 7a87 	vdiv.f32	s15, s13, s14
 810625c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8106260:	ee17 2a90 	vmov	r2, s15
 8106264:	687b      	ldr	r3, [r7, #4]
 8106266:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 8106268:	e008      	b.n	810627c <HAL_RCCEx_GetPLL1ClockFreq+0x280>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 810626a:	687b      	ldr	r3, [r7, #4]
 810626c:	2200      	movs	r2, #0
 810626e:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 8106270:	687b      	ldr	r3, [r7, #4]
 8106272:	2200      	movs	r2, #0
 8106274:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 8106276:	687b      	ldr	r3, [r7, #4]
 8106278:	2200      	movs	r2, #0
 810627a:	609a      	str	r2, [r3, #8]
}
 810627c:	bf00      	nop
 810627e:	3724      	adds	r7, #36	; 0x24
 8106280:	46bd      	mov	sp, r7
 8106282:	f85d 7b04 	ldr.w	r7, [sp], #4
 8106286:	4770      	bx	lr
 8106288:	58024400 	.word	0x58024400
 810628c:	03d09000 	.word	0x03d09000
 8106290:	46000000 	.word	0x46000000
 8106294:	4c742400 	.word	0x4c742400
 8106298:	4a742400 	.word	0x4a742400
 810629c:	4bbebc20 	.word	0x4bbebc20

081062a0 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 81062a0:	b580      	push	{r7, lr}
 81062a2:	b084      	sub	sp, #16
 81062a4:	af00      	add	r7, sp, #0
 81062a6:	6078      	str	r0, [r7, #4]
 81062a8:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 81062aa:	2300      	movs	r3, #0
 81062ac:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 81062ae:	4b54      	ldr	r3, [pc, #336]	; (8106400 <RCCEx_PLL2_Config+0x160>)
 81062b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 81062b2:	f003 0303 	and.w	r3, r3, #3
 81062b6:	2b03      	cmp	r3, #3
 81062b8:	d101      	bne.n	81062be <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 81062ba:	2301      	movs	r3, #1
 81062bc:	e09b      	b.n	81063f6 <RCCEx_PLL2_Config+0x156>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 81062be:	4b50      	ldr	r3, [pc, #320]	; (8106400 <RCCEx_PLL2_Config+0x160>)
 81062c0:	681b      	ldr	r3, [r3, #0]
 81062c2:	4a4f      	ldr	r2, [pc, #316]	; (8106400 <RCCEx_PLL2_Config+0x160>)
 81062c4:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 81062c8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 81062ca:	f7fb fcab 	bl	8101c24 <HAL_GetTick>
 81062ce:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 81062d0:	e008      	b.n	81062e4 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 81062d2:	f7fb fca7 	bl	8101c24 <HAL_GetTick>
 81062d6:	4602      	mov	r2, r0
 81062d8:	68bb      	ldr	r3, [r7, #8]
 81062da:	1ad3      	subs	r3, r2, r3
 81062dc:	2b02      	cmp	r3, #2
 81062de:	d901      	bls.n	81062e4 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 81062e0:	2303      	movs	r3, #3
 81062e2:	e088      	b.n	81063f6 <RCCEx_PLL2_Config+0x156>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 81062e4:	4b46      	ldr	r3, [pc, #280]	; (8106400 <RCCEx_PLL2_Config+0x160>)
 81062e6:	681b      	ldr	r3, [r3, #0]
 81062e8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 81062ec:	2b00      	cmp	r3, #0
 81062ee:	d1f0      	bne.n	81062d2 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 81062f0:	4b43      	ldr	r3, [pc, #268]	; (8106400 <RCCEx_PLL2_Config+0x160>)
 81062f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 81062f4:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 81062f8:	687b      	ldr	r3, [r7, #4]
 81062fa:	681b      	ldr	r3, [r3, #0]
 81062fc:	031b      	lsls	r3, r3, #12
 81062fe:	4940      	ldr	r1, [pc, #256]	; (8106400 <RCCEx_PLL2_Config+0x160>)
 8106300:	4313      	orrs	r3, r2
 8106302:	628b      	str	r3, [r1, #40]	; 0x28
 8106304:	687b      	ldr	r3, [r7, #4]
 8106306:	685b      	ldr	r3, [r3, #4]
 8106308:	3b01      	subs	r3, #1
 810630a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 810630e:	687b      	ldr	r3, [r7, #4]
 8106310:	689b      	ldr	r3, [r3, #8]
 8106312:	3b01      	subs	r3, #1
 8106314:	025b      	lsls	r3, r3, #9
 8106316:	b29b      	uxth	r3, r3
 8106318:	431a      	orrs	r2, r3
 810631a:	687b      	ldr	r3, [r7, #4]
 810631c:	68db      	ldr	r3, [r3, #12]
 810631e:	3b01      	subs	r3, #1
 8106320:	041b      	lsls	r3, r3, #16
 8106322:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8106326:	431a      	orrs	r2, r3
 8106328:	687b      	ldr	r3, [r7, #4]
 810632a:	691b      	ldr	r3, [r3, #16]
 810632c:	3b01      	subs	r3, #1
 810632e:	061b      	lsls	r3, r3, #24
 8106330:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8106334:	4932      	ldr	r1, [pc, #200]	; (8106400 <RCCEx_PLL2_Config+0x160>)
 8106336:	4313      	orrs	r3, r2
 8106338:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 810633a:	4b31      	ldr	r3, [pc, #196]	; (8106400 <RCCEx_PLL2_Config+0x160>)
 810633c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 810633e:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8106342:	687b      	ldr	r3, [r7, #4]
 8106344:	695b      	ldr	r3, [r3, #20]
 8106346:	492e      	ldr	r1, [pc, #184]	; (8106400 <RCCEx_PLL2_Config+0x160>)
 8106348:	4313      	orrs	r3, r2
 810634a:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 810634c:	4b2c      	ldr	r3, [pc, #176]	; (8106400 <RCCEx_PLL2_Config+0x160>)
 810634e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8106350:	f023 0220 	bic.w	r2, r3, #32
 8106354:	687b      	ldr	r3, [r7, #4]
 8106356:	699b      	ldr	r3, [r3, #24]
 8106358:	4929      	ldr	r1, [pc, #164]	; (8106400 <RCCEx_PLL2_Config+0x160>)
 810635a:	4313      	orrs	r3, r2
 810635c:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 810635e:	4b28      	ldr	r3, [pc, #160]	; (8106400 <RCCEx_PLL2_Config+0x160>)
 8106360:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8106362:	4a27      	ldr	r2, [pc, #156]	; (8106400 <RCCEx_PLL2_Config+0x160>)
 8106364:	f023 0310 	bic.w	r3, r3, #16
 8106368:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 810636a:	4b25      	ldr	r3, [pc, #148]	; (8106400 <RCCEx_PLL2_Config+0x160>)
 810636c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 810636e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8106372:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8106376:	687a      	ldr	r2, [r7, #4]
 8106378:	69d2      	ldr	r2, [r2, #28]
 810637a:	00d2      	lsls	r2, r2, #3
 810637c:	4920      	ldr	r1, [pc, #128]	; (8106400 <RCCEx_PLL2_Config+0x160>)
 810637e:	4313      	orrs	r3, r2
 8106380:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8106382:	4b1f      	ldr	r3, [pc, #124]	; (8106400 <RCCEx_PLL2_Config+0x160>)
 8106384:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8106386:	4a1e      	ldr	r2, [pc, #120]	; (8106400 <RCCEx_PLL2_Config+0x160>)
 8106388:	f043 0310 	orr.w	r3, r3, #16
 810638c:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 810638e:	683b      	ldr	r3, [r7, #0]
 8106390:	2b00      	cmp	r3, #0
 8106392:	d106      	bne.n	81063a2 <RCCEx_PLL2_Config+0x102>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8106394:	4b1a      	ldr	r3, [pc, #104]	; (8106400 <RCCEx_PLL2_Config+0x160>)
 8106396:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8106398:	4a19      	ldr	r2, [pc, #100]	; (8106400 <RCCEx_PLL2_Config+0x160>)
 810639a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 810639e:	62d3      	str	r3, [r2, #44]	; 0x2c
 81063a0:	e00f      	b.n	81063c2 <RCCEx_PLL2_Config+0x122>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 81063a2:	683b      	ldr	r3, [r7, #0]
 81063a4:	2b01      	cmp	r3, #1
 81063a6:	d106      	bne.n	81063b6 <RCCEx_PLL2_Config+0x116>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 81063a8:	4b15      	ldr	r3, [pc, #84]	; (8106400 <RCCEx_PLL2_Config+0x160>)
 81063aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 81063ac:	4a14      	ldr	r2, [pc, #80]	; (8106400 <RCCEx_PLL2_Config+0x160>)
 81063ae:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 81063b2:	62d3      	str	r3, [r2, #44]	; 0x2c
 81063b4:	e005      	b.n	81063c2 <RCCEx_PLL2_Config+0x122>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 81063b6:	4b12      	ldr	r3, [pc, #72]	; (8106400 <RCCEx_PLL2_Config+0x160>)
 81063b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 81063ba:	4a11      	ldr	r2, [pc, #68]	; (8106400 <RCCEx_PLL2_Config+0x160>)
 81063bc:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 81063c0:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 81063c2:	4b0f      	ldr	r3, [pc, #60]	; (8106400 <RCCEx_PLL2_Config+0x160>)
 81063c4:	681b      	ldr	r3, [r3, #0]
 81063c6:	4a0e      	ldr	r2, [pc, #56]	; (8106400 <RCCEx_PLL2_Config+0x160>)
 81063c8:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 81063cc:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 81063ce:	f7fb fc29 	bl	8101c24 <HAL_GetTick>
 81063d2:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 81063d4:	e008      	b.n	81063e8 <RCCEx_PLL2_Config+0x148>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 81063d6:	f7fb fc25 	bl	8101c24 <HAL_GetTick>
 81063da:	4602      	mov	r2, r0
 81063dc:	68bb      	ldr	r3, [r7, #8]
 81063de:	1ad3      	subs	r3, r2, r3
 81063e0:	2b02      	cmp	r3, #2
 81063e2:	d901      	bls.n	81063e8 <RCCEx_PLL2_Config+0x148>
      {
        return HAL_TIMEOUT;
 81063e4:	2303      	movs	r3, #3
 81063e6:	e006      	b.n	81063f6 <RCCEx_PLL2_Config+0x156>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 81063e8:	4b05      	ldr	r3, [pc, #20]	; (8106400 <RCCEx_PLL2_Config+0x160>)
 81063ea:	681b      	ldr	r3, [r3, #0]
 81063ec:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 81063f0:	2b00      	cmp	r3, #0
 81063f2:	d0f0      	beq.n	81063d6 <RCCEx_PLL2_Config+0x136>
    }

  }


  return status;
 81063f4:	7bfb      	ldrb	r3, [r7, #15]
}
 81063f6:	4618      	mov	r0, r3
 81063f8:	3710      	adds	r7, #16
 81063fa:	46bd      	mov	sp, r7
 81063fc:	bd80      	pop	{r7, pc}
 81063fe:	bf00      	nop
 8106400:	58024400 	.word	0x58024400

08106404 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8106404:	b580      	push	{r7, lr}
 8106406:	b084      	sub	sp, #16
 8106408:	af00      	add	r7, sp, #0
 810640a:	6078      	str	r0, [r7, #4]
 810640c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 810640e:	2300      	movs	r3, #0
 8106410:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8106412:	4b54      	ldr	r3, [pc, #336]	; (8106564 <RCCEx_PLL3_Config+0x160>)
 8106414:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8106416:	f003 0303 	and.w	r3, r3, #3
 810641a:	2b03      	cmp	r3, #3
 810641c:	d101      	bne.n	8106422 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 810641e:	2301      	movs	r3, #1
 8106420:	e09b      	b.n	810655a <RCCEx_PLL3_Config+0x156>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8106422:	4b50      	ldr	r3, [pc, #320]	; (8106564 <RCCEx_PLL3_Config+0x160>)
 8106424:	681b      	ldr	r3, [r3, #0]
 8106426:	4a4f      	ldr	r2, [pc, #316]	; (8106564 <RCCEx_PLL3_Config+0x160>)
 8106428:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 810642c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 810642e:	f7fb fbf9 	bl	8101c24 <HAL_GetTick>
 8106432:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8106434:	e008      	b.n	8106448 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8106436:	f7fb fbf5 	bl	8101c24 <HAL_GetTick>
 810643a:	4602      	mov	r2, r0
 810643c:	68bb      	ldr	r3, [r7, #8]
 810643e:	1ad3      	subs	r3, r2, r3
 8106440:	2b02      	cmp	r3, #2
 8106442:	d901      	bls.n	8106448 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8106444:	2303      	movs	r3, #3
 8106446:	e088      	b.n	810655a <RCCEx_PLL3_Config+0x156>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8106448:	4b46      	ldr	r3, [pc, #280]	; (8106564 <RCCEx_PLL3_Config+0x160>)
 810644a:	681b      	ldr	r3, [r3, #0]
 810644c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8106450:	2b00      	cmp	r3, #0
 8106452:	d1f0      	bne.n	8106436 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8106454:	4b43      	ldr	r3, [pc, #268]	; (8106564 <RCCEx_PLL3_Config+0x160>)
 8106456:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8106458:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 810645c:	687b      	ldr	r3, [r7, #4]
 810645e:	681b      	ldr	r3, [r3, #0]
 8106460:	051b      	lsls	r3, r3, #20
 8106462:	4940      	ldr	r1, [pc, #256]	; (8106564 <RCCEx_PLL3_Config+0x160>)
 8106464:	4313      	orrs	r3, r2
 8106466:	628b      	str	r3, [r1, #40]	; 0x28
 8106468:	687b      	ldr	r3, [r7, #4]
 810646a:	685b      	ldr	r3, [r3, #4]
 810646c:	3b01      	subs	r3, #1
 810646e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8106472:	687b      	ldr	r3, [r7, #4]
 8106474:	689b      	ldr	r3, [r3, #8]
 8106476:	3b01      	subs	r3, #1
 8106478:	025b      	lsls	r3, r3, #9
 810647a:	b29b      	uxth	r3, r3
 810647c:	431a      	orrs	r2, r3
 810647e:	687b      	ldr	r3, [r7, #4]
 8106480:	68db      	ldr	r3, [r3, #12]
 8106482:	3b01      	subs	r3, #1
 8106484:	041b      	lsls	r3, r3, #16
 8106486:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 810648a:	431a      	orrs	r2, r3
 810648c:	687b      	ldr	r3, [r7, #4]
 810648e:	691b      	ldr	r3, [r3, #16]
 8106490:	3b01      	subs	r3, #1
 8106492:	061b      	lsls	r3, r3, #24
 8106494:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8106498:	4932      	ldr	r1, [pc, #200]	; (8106564 <RCCEx_PLL3_Config+0x160>)
 810649a:	4313      	orrs	r3, r2
 810649c:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 810649e:	4b31      	ldr	r3, [pc, #196]	; (8106564 <RCCEx_PLL3_Config+0x160>)
 81064a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 81064a2:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 81064a6:	687b      	ldr	r3, [r7, #4]
 81064a8:	695b      	ldr	r3, [r3, #20]
 81064aa:	492e      	ldr	r1, [pc, #184]	; (8106564 <RCCEx_PLL3_Config+0x160>)
 81064ac:	4313      	orrs	r3, r2
 81064ae:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 81064b0:	4b2c      	ldr	r3, [pc, #176]	; (8106564 <RCCEx_PLL3_Config+0x160>)
 81064b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 81064b4:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 81064b8:	687b      	ldr	r3, [r7, #4]
 81064ba:	699b      	ldr	r3, [r3, #24]
 81064bc:	4929      	ldr	r1, [pc, #164]	; (8106564 <RCCEx_PLL3_Config+0x160>)
 81064be:	4313      	orrs	r3, r2
 81064c0:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 81064c2:	4b28      	ldr	r3, [pc, #160]	; (8106564 <RCCEx_PLL3_Config+0x160>)
 81064c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 81064c6:	4a27      	ldr	r2, [pc, #156]	; (8106564 <RCCEx_PLL3_Config+0x160>)
 81064c8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 81064cc:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 81064ce:	4b25      	ldr	r3, [pc, #148]	; (8106564 <RCCEx_PLL3_Config+0x160>)
 81064d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 81064d2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 81064d6:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 81064da:	687a      	ldr	r2, [r7, #4]
 81064dc:	69d2      	ldr	r2, [r2, #28]
 81064de:	00d2      	lsls	r2, r2, #3
 81064e0:	4920      	ldr	r1, [pc, #128]	; (8106564 <RCCEx_PLL3_Config+0x160>)
 81064e2:	4313      	orrs	r3, r2
 81064e4:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 81064e6:	4b1f      	ldr	r3, [pc, #124]	; (8106564 <RCCEx_PLL3_Config+0x160>)
 81064e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 81064ea:	4a1e      	ldr	r2, [pc, #120]	; (8106564 <RCCEx_PLL3_Config+0x160>)
 81064ec:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 81064f0:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 81064f2:	683b      	ldr	r3, [r7, #0]
 81064f4:	2b00      	cmp	r3, #0
 81064f6:	d106      	bne.n	8106506 <RCCEx_PLL3_Config+0x102>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 81064f8:	4b1a      	ldr	r3, [pc, #104]	; (8106564 <RCCEx_PLL3_Config+0x160>)
 81064fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 81064fc:	4a19      	ldr	r2, [pc, #100]	; (8106564 <RCCEx_PLL3_Config+0x160>)
 81064fe:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8106502:	62d3      	str	r3, [r2, #44]	; 0x2c
 8106504:	e00f      	b.n	8106526 <RCCEx_PLL3_Config+0x122>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8106506:	683b      	ldr	r3, [r7, #0]
 8106508:	2b01      	cmp	r3, #1
 810650a:	d106      	bne.n	810651a <RCCEx_PLL3_Config+0x116>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 810650c:	4b15      	ldr	r3, [pc, #84]	; (8106564 <RCCEx_PLL3_Config+0x160>)
 810650e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8106510:	4a14      	ldr	r2, [pc, #80]	; (8106564 <RCCEx_PLL3_Config+0x160>)
 8106512:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8106516:	62d3      	str	r3, [r2, #44]	; 0x2c
 8106518:	e005      	b.n	8106526 <RCCEx_PLL3_Config+0x122>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 810651a:	4b12      	ldr	r3, [pc, #72]	; (8106564 <RCCEx_PLL3_Config+0x160>)
 810651c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 810651e:	4a11      	ldr	r2, [pc, #68]	; (8106564 <RCCEx_PLL3_Config+0x160>)
 8106520:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8106524:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8106526:	4b0f      	ldr	r3, [pc, #60]	; (8106564 <RCCEx_PLL3_Config+0x160>)
 8106528:	681b      	ldr	r3, [r3, #0]
 810652a:	4a0e      	ldr	r2, [pc, #56]	; (8106564 <RCCEx_PLL3_Config+0x160>)
 810652c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8106530:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8106532:	f7fb fb77 	bl	8101c24 <HAL_GetTick>
 8106536:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8106538:	e008      	b.n	810654c <RCCEx_PLL3_Config+0x148>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 810653a:	f7fb fb73 	bl	8101c24 <HAL_GetTick>
 810653e:	4602      	mov	r2, r0
 8106540:	68bb      	ldr	r3, [r7, #8]
 8106542:	1ad3      	subs	r3, r2, r3
 8106544:	2b02      	cmp	r3, #2
 8106546:	d901      	bls.n	810654c <RCCEx_PLL3_Config+0x148>
      {
        return HAL_TIMEOUT;
 8106548:	2303      	movs	r3, #3
 810654a:	e006      	b.n	810655a <RCCEx_PLL3_Config+0x156>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 810654c:	4b05      	ldr	r3, [pc, #20]	; (8106564 <RCCEx_PLL3_Config+0x160>)
 810654e:	681b      	ldr	r3, [r3, #0]
 8106550:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8106554:	2b00      	cmp	r3, #0
 8106556:	d0f0      	beq.n	810653a <RCCEx_PLL3_Config+0x136>
    }

  }


  return status;
 8106558:	7bfb      	ldrb	r3, [r7, #15]
}
 810655a:	4618      	mov	r0, r3
 810655c:	3710      	adds	r7, #16
 810655e:	46bd      	mov	sp, r7
 8106560:	bd80      	pop	{r7, pc}
 8106562:	bf00      	nop
 8106564:	58024400 	.word	0x58024400

08106568 <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8106568:	b580      	push	{r7, lr}
 810656a:	b084      	sub	sp, #16
 810656c:	af00      	add	r7, sp, #0
 810656e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8106570:	2301      	movs	r3, #1
 8106572:	73fb      	strb	r3, [r7, #15]

  /* Check RTC handler */
  if(hrtc != NULL)
 8106574:	687b      	ldr	r3, [r7, #4]
 8106576:	2b00      	cmp	r3, #0
 8106578:	d073      	beq.n	8106662 <HAL_RTC_Init+0xfa>
      {
        hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
      }
    }
#else /*  (USE_HAL_RTC_REGISTER_CALLBACKS == 1) */
    if(hrtc->State == HAL_RTC_STATE_RESET)
 810657a:	687b      	ldr	r3, [r7, #4]
 810657c:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8106580:	b2db      	uxtb	r3, r3
 8106582:	2b00      	cmp	r3, #0
 8106584:	d106      	bne.n	8106594 <HAL_RTC_Init+0x2c>
    {
      /* Allocate lock resource and initialize it */
      hrtc->Lock = HAL_UNLOCKED;
 8106586:	687b      	ldr	r3, [r7, #4]
 8106588:	2200      	movs	r2, #0
 810658a:	f883 2020 	strb.w	r2, [r3, #32]

      /* Initialize RTC MSP */
      HAL_RTC_MspInit(hrtc);
 810658e:	6878      	ldr	r0, [r7, #4]
 8106590:	f7fa ff3c 	bl	810140c <HAL_RTC_MspInit>
    }
#endif /*  (USE_HAL_RTC_REGISTER_CALLBACKS == 1) */

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_BUSY;
 8106594:	687b      	ldr	r3, [r7, #4]
 8106596:	2202      	movs	r2, #2
 8106598:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Check whether the calendar needs to be initialized */
    if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 810659c:	687b      	ldr	r3, [r7, #4]
 810659e:	681b      	ldr	r3, [r3, #0]
 81065a0:	68db      	ldr	r3, [r3, #12]
 81065a2:	f003 0310 	and.w	r3, r3, #16
 81065a6:	2b10      	cmp	r3, #16
 81065a8:	d052      	beq.n	8106650 <HAL_RTC_Init+0xe8>
    {
      /* Disable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 81065aa:	687b      	ldr	r3, [r7, #4]
 81065ac:	681b      	ldr	r3, [r3, #0]
 81065ae:	22ca      	movs	r2, #202	; 0xca
 81065b0:	625a      	str	r2, [r3, #36]	; 0x24
 81065b2:	687b      	ldr	r3, [r7, #4]
 81065b4:	681b      	ldr	r3, [r3, #0]
 81065b6:	2253      	movs	r2, #83	; 0x53
 81065b8:	625a      	str	r2, [r3, #36]	; 0x24

     /* Enter Initialization mode */
      status = RTC_EnterInitMode(hrtc);
 81065ba:	6878      	ldr	r0, [r7, #4]
 81065bc:	f000 f87a 	bl	81066b4 <RTC_EnterInitMode>
 81065c0:	4603      	mov	r3, r0
 81065c2:	73fb      	strb	r3, [r7, #15]
      if (status == HAL_OK)
 81065c4:	7bfb      	ldrb	r3, [r7, #15]
 81065c6:	2b00      	cmp	r3, #0
 81065c8:	d126      	bne.n	8106618 <HAL_RTC_Init+0xb0>
#if defined(TAMP)
        /* Clear RTC_CR FMT, OSEL, POL and TAMPOE Bits */
        hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE);
#else
        /* Clear RTC_CR FMT, OSEL and POL Bits */
        hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL);
 81065ca:	687b      	ldr	r3, [r7, #4]
 81065cc:	681b      	ldr	r3, [r3, #0]
 81065ce:	689b      	ldr	r3, [r3, #8]
 81065d0:	687a      	ldr	r2, [r7, #4]
 81065d2:	6812      	ldr	r2, [r2, #0]
 81065d4:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 81065d8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 81065dc:	6093      	str	r3, [r2, #8]
#endif /* TAMP */

        /* Set RTC_CR register */
        hrtc->Instance->CR |= (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 81065de:	687b      	ldr	r3, [r7, #4]
 81065e0:	681b      	ldr	r3, [r3, #0]
 81065e2:	6899      	ldr	r1, [r3, #8]
 81065e4:	687b      	ldr	r3, [r7, #4]
 81065e6:	685a      	ldr	r2, [r3, #4]
 81065e8:	687b      	ldr	r3, [r7, #4]
 81065ea:	691b      	ldr	r3, [r3, #16]
 81065ec:	431a      	orrs	r2, r3
 81065ee:	687b      	ldr	r3, [r7, #4]
 81065f0:	699b      	ldr	r3, [r3, #24]
 81065f2:	431a      	orrs	r2, r3
 81065f4:	687b      	ldr	r3, [r7, #4]
 81065f6:	681b      	ldr	r3, [r3, #0]
 81065f8:	430a      	orrs	r2, r1
 81065fa:	609a      	str	r2, [r3, #8]

        /* Configure the RTC PRER */
        hrtc->Instance->PRER = (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos) | (hrtc->Init.SynchPrediv << RTC_PRER_PREDIV_S_Pos);
 81065fc:	687b      	ldr	r3, [r7, #4]
 81065fe:	689b      	ldr	r3, [r3, #8]
 8106600:	0419      	lsls	r1, r3, #16
 8106602:	687b      	ldr	r3, [r7, #4]
 8106604:	68da      	ldr	r2, [r3, #12]
 8106606:	687b      	ldr	r3, [r7, #4]
 8106608:	681b      	ldr	r3, [r3, #0]
 810660a:	430a      	orrs	r2, r1
 810660c:	611a      	str	r2, [r3, #16]

        /* Exit Initialization mode */
        status = RTC_ExitInitMode(hrtc);
 810660e:	6878      	ldr	r0, [r7, #4]
 8106610:	f000 f884 	bl	810671c <RTC_ExitInitMode>
 8106614:	4603      	mov	r3, r0
 8106616:	73fb      	strb	r3, [r7, #15]
      }
      if(status == HAL_OK)
 8106618:	7bfb      	ldrb	r3, [r7, #15]
 810661a:	2b00      	cmp	r3, #0
 810661c:	d113      	bne.n	8106646 <HAL_RTC_Init+0xde>
      {
#if defined(TAMP)
        hrtc->Instance->CR &= ~(RTC_CR_TAMPALRM_PU | RTC_CR_TAMPALRM_TYPE | RTC_CR_OUT2EN);
        hrtc->Instance->CR |= (hrtc->Init.OutPutPullUp | hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
#else
        hrtc->Instance->OR &= ~(RTC_OR_ALARMOUTTYPE | RTC_OR_OUT_RMP);
 810661e:	687b      	ldr	r3, [r7, #4]
 8106620:	681b      	ldr	r3, [r3, #0]
 8106622:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8106624:	687b      	ldr	r3, [r7, #4]
 8106626:	681b      	ldr	r3, [r3, #0]
 8106628:	f022 0203 	bic.w	r2, r2, #3
 810662c:	64da      	str	r2, [r3, #76]	; 0x4c
        hrtc->Instance->OR |= (hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 810662e:	687b      	ldr	r3, [r7, #4]
 8106630:	681b      	ldr	r3, [r3, #0]
 8106632:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 8106634:	687b      	ldr	r3, [r7, #4]
 8106636:	69da      	ldr	r2, [r3, #28]
 8106638:	687b      	ldr	r3, [r7, #4]
 810663a:	695b      	ldr	r3, [r3, #20]
 810663c:	431a      	orrs	r2, r3
 810663e:	687b      	ldr	r3, [r7, #4]
 8106640:	681b      	ldr	r3, [r3, #0]
 8106642:	430a      	orrs	r2, r1
 8106644:	64da      	str	r2, [r3, #76]	; 0x4c
#endif /* TAMP */
      }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8106646:	687b      	ldr	r3, [r7, #4]
 8106648:	681b      	ldr	r3, [r3, #0]
 810664a:	22ff      	movs	r2, #255	; 0xff
 810664c:	625a      	str	r2, [r3, #36]	; 0x24
 810664e:	e001      	b.n	8106654 <HAL_RTC_Init+0xec>
    }
    else
    {
      /* The calendar is already initialized */
      status = HAL_OK;
 8106650:	2300      	movs	r3, #0
 8106652:	73fb      	strb	r3, [r7, #15]
    }

    if (status == HAL_OK)
 8106654:	7bfb      	ldrb	r3, [r7, #15]
 8106656:	2b00      	cmp	r3, #0
 8106658:	d103      	bne.n	8106662 <HAL_RTC_Init+0xfa>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_READY;
 810665a:	687b      	ldr	r3, [r7, #4]
 810665c:	2201      	movs	r2, #1
 810665e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
  }

  /* return status */
  return status;
 8106662:	7bfb      	ldrb	r3, [r7, #15]
}
 8106664:	4618      	mov	r0, r3
 8106666:	3710      	adds	r7, #16
 8106668:	46bd      	mov	sp, r7
 810666a:	bd80      	pop	{r7, pc}

0810666c <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 810666c:	b580      	push	{r7, lr}
 810666e:	b084      	sub	sp, #16
 8106670:	af00      	add	r7, sp, #0
 8106672:	6078      	str	r0, [r7, #4]

  /* Clear RSF flag, keep reserved bits at reset values (setting other flags has no effect) */
#if defined(TAMP)
  hrtc->Instance->ICSR = ((uint32_t)(RTC_RSF_MASK & RTC_ICSR_RESERVED_MASK));
#else
  hrtc->Instance->ISR = ((uint32_t)(RTC_RSF_MASK & RTC_ISR_RESERVED_MASK));
 8106674:	687b      	ldr	r3, [r7, #4]
 8106676:	681b      	ldr	r3, [r3, #0]
 8106678:	4a0d      	ldr	r2, [pc, #52]	; (81066b0 <HAL_RTC_WaitForSynchro+0x44>)
 810667a:	60da      	str	r2, [r3, #12]
#endif /* TAMP */

  tickstart = HAL_GetTick();
 810667c:	f7fb fad2 	bl	8101c24 <HAL_GetTick>
 8106680:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
#if defined(TAMP)
  while ((hrtc->Instance->ICSR & RTC_ICSR_RSF) == 0U)
#else
    while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8106682:	e009      	b.n	8106698 <HAL_RTC_WaitForSynchro+0x2c>
#endif /* TAMP */
    {
      if((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8106684:	f7fb face 	bl	8101c24 <HAL_GetTick>
 8106688:	4602      	mov	r2, r0
 810668a:	68fb      	ldr	r3, [r7, #12]
 810668c:	1ad3      	subs	r3, r2, r3
 810668e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8106692:	d901      	bls.n	8106698 <HAL_RTC_WaitForSynchro+0x2c>
      {
        return HAL_TIMEOUT;
 8106694:	2303      	movs	r3, #3
 8106696:	e007      	b.n	81066a8 <HAL_RTC_WaitForSynchro+0x3c>
    while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8106698:	687b      	ldr	r3, [r7, #4]
 810669a:	681b      	ldr	r3, [r3, #0]
 810669c:	68db      	ldr	r3, [r3, #12]
 810669e:	f003 0320 	and.w	r3, r3, #32
 81066a2:	2b00      	cmp	r3, #0
 81066a4:	d0ee      	beq.n	8106684 <HAL_RTC_WaitForSynchro+0x18>
      }
    }

  return HAL_OK;
 81066a6:	2300      	movs	r3, #0
}
 81066a8:	4618      	mov	r0, r3
 81066aa:	3710      	adds	r7, #16
 81066ac:	46bd      	mov	sp, r7
 81066ae:	bd80      	pop	{r7, pc}
 81066b0:	0003ff5f 	.word	0x0003ff5f

081066b4 <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 81066b4:	b580      	push	{r7, lr}
 81066b6:	b084      	sub	sp, #16
 81066b8:	af00      	add	r7, sp, #0
 81066ba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 81066bc:	2300      	movs	r3, #0
 81066be:	73fb      	strb	r3, [r7, #15]
    tickstart = HAL_GetTick();

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while (((hrtc->Instance->ICSR & RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
#else
  if ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 81066c0:	687b      	ldr	r3, [r7, #4]
 81066c2:	681b      	ldr	r3, [r3, #0]
 81066c4:	68db      	ldr	r3, [r3, #12]
 81066c6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 81066ca:	2b00      	cmp	r3, #0
 81066cc:	d120      	bne.n	8106710 <RTC_EnterInitMode+0x5c>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 81066ce:	687b      	ldr	r3, [r7, #4]
 81066d0:	681b      	ldr	r3, [r3, #0]
 81066d2:	f04f 32ff 	mov.w	r2, #4294967295
 81066d6:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 81066d8:	f7fb faa4 	bl	8101c24 <HAL_GetTick>
 81066dc:	60b8      	str	r0, [r7, #8]

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while (((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U) && (status != HAL_TIMEOUT))
 81066de:	e00d      	b.n	81066fc <RTC_EnterInitMode+0x48>
#endif /* TAMP */
    {
      if((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 81066e0:	f7fb faa0 	bl	8101c24 <HAL_GetTick>
 81066e4:	4602      	mov	r2, r0
 81066e6:	68bb      	ldr	r3, [r7, #8]
 81066e8:	1ad3      	subs	r3, r2, r3
 81066ea:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 81066ee:	d905      	bls.n	81066fc <RTC_EnterInitMode+0x48>
      {
        status = HAL_TIMEOUT;
 81066f0:	2303      	movs	r3, #3
 81066f2:	73fb      	strb	r3, [r7, #15]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 81066f4:	687b      	ldr	r3, [r7, #4]
 81066f6:	2203      	movs	r2, #3
 81066f8:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    while (((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U) && (status != HAL_TIMEOUT))
 81066fc:	687b      	ldr	r3, [r7, #4]
 81066fe:	681b      	ldr	r3, [r3, #0]
 8106700:	68db      	ldr	r3, [r3, #12]
 8106702:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8106706:	2b00      	cmp	r3, #0
 8106708:	d102      	bne.n	8106710 <RTC_EnterInitMode+0x5c>
 810670a:	7bfb      	ldrb	r3, [r7, #15]
 810670c:	2b03      	cmp	r3, #3
 810670e:	d1e7      	bne.n	81066e0 <RTC_EnterInitMode+0x2c>
      }
    }
  }

  return status;
 8106710:	7bfb      	ldrb	r3, [r7, #15]
}
 8106712:	4618      	mov	r0, r3
 8106714:	3710      	adds	r7, #16
 8106716:	46bd      	mov	sp, r7
 8106718:	bd80      	pop	{r7, pc}
	...

0810671c <RTC_ExitInitMode>:
  * @brief  Exit the RTC Initialization mode.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 810671c:	b580      	push	{r7, lr}
 810671e:	b084      	sub	sp, #16
 8106720:	af00      	add	r7, sp, #0
 8106722:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8106724:	2300      	movs	r3, #0
 8106726:	73fb      	strb	r3, [r7, #15]

  /* Exit Initialization mode */
#if defined(TAMP)
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);
#else
  CLEAR_BIT(RTC->ISR, RTC_ISR_INITF);
 8106728:	4b1a      	ldr	r3, [pc, #104]	; (8106794 <RTC_ExitInitMode+0x78>)
 810672a:	68db      	ldr	r3, [r3, #12]
 810672c:	4a19      	ldr	r2, [pc, #100]	; (8106794 <RTC_ExitInitMode+0x78>)
 810672e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8106732:	60d3      	str	r3, [r2, #12]
#endif /* TAMP */

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 8106734:	4b17      	ldr	r3, [pc, #92]	; (8106794 <RTC_ExitInitMode+0x78>)
 8106736:	689b      	ldr	r3, [r3, #8]
 8106738:	f003 0320 	and.w	r3, r3, #32
 810673c:	2b00      	cmp	r3, #0
 810673e:	d10c      	bne.n	810675a <RTC_ExitInitMode+0x3e>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8106740:	6878      	ldr	r0, [r7, #4]
 8106742:	f7ff ff93 	bl	810666c <HAL_RTC_WaitForSynchro>
 8106746:	4603      	mov	r3, r0
 8106748:	2b00      	cmp	r3, #0
 810674a:	d01e      	beq.n	810678a <RTC_ExitInitMode+0x6e>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 810674c:	687b      	ldr	r3, [r7, #4]
 810674e:	2203      	movs	r2, #3
 8106750:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
      status = HAL_TIMEOUT;
 8106754:	2303      	movs	r3, #3
 8106756:	73fb      	strb	r3, [r7, #15]
 8106758:	e017      	b.n	810678a <RTC_ExitInitMode+0x6e>
    }
  }
  else
  {
    /* Clear BYPSHAD bit */
    CLEAR_BIT(RTC->CR, RTC_CR_BYPSHAD);
 810675a:	4b0e      	ldr	r3, [pc, #56]	; (8106794 <RTC_ExitInitMode+0x78>)
 810675c:	689b      	ldr	r3, [r3, #8]
 810675e:	4a0d      	ldr	r2, [pc, #52]	; (8106794 <RTC_ExitInitMode+0x78>)
 8106760:	f023 0320 	bic.w	r3, r3, #32
 8106764:	6093      	str	r3, [r2, #8]
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8106766:	6878      	ldr	r0, [r7, #4]
 8106768:	f7ff ff80 	bl	810666c <HAL_RTC_WaitForSynchro>
 810676c:	4603      	mov	r3, r0
 810676e:	2b00      	cmp	r3, #0
 8106770:	d005      	beq.n	810677e <RTC_ExitInitMode+0x62>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8106772:	687b      	ldr	r3, [r7, #4]
 8106774:	2203      	movs	r2, #3
 8106776:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
      status = HAL_TIMEOUT;
 810677a:	2303      	movs	r3, #3
 810677c:	73fb      	strb	r3, [r7, #15]
    }
    /* Restore BYPSHAD bit */
    SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 810677e:	4b05      	ldr	r3, [pc, #20]	; (8106794 <RTC_ExitInitMode+0x78>)
 8106780:	689b      	ldr	r3, [r3, #8]
 8106782:	4a04      	ldr	r2, [pc, #16]	; (8106794 <RTC_ExitInitMode+0x78>)
 8106784:	f043 0320 	orr.w	r3, r3, #32
 8106788:	6093      	str	r3, [r2, #8]
  }

  return status;
 810678a:	7bfb      	ldrb	r3, [r7, #15]
}
 810678c:	4618      	mov	r0, r3
 810678e:	3710      	adds	r7, #16
 8106790:	46bd      	mov	sp, r7
 8106792:	bd80      	pop	{r7, pc}
 8106794:	58004000 	.word	0x58004000

08106798 <HAL_RTCEx_SetTamper>:
  * @param  hrtc RTC handle
  * @param  sTamper Pointer to Tamper Structure.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_SetTamper(RTC_HandleTypeDef * hrtc, RTC_TamperTypeDef * sTamper)
{
 8106798:	b480      	push	{r7}
 810679a:	b085      	sub	sp, #20
 810679c:	af00      	add	r7, sp, #0
 810679e:	6078      	str	r0, [r7, #4]
 81067a0:	6039      	str	r1, [r7, #0]
  assert_param(IS_RTC_TAMPER_PULLUP_STATE(sTamper->TamperPullUp));
  assert_param(IS_RTC_TAMPER_TIMESTAMPONTAMPER_DETECTION(sTamper->TimeStampOnTamperDetection));
  assert_param(IS_RTC_TAMPER_FILTER_CONFIG_CORRECT(sTamper->Filter, sTamper->Trigger));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 81067a2:	687b      	ldr	r3, [r7, #4]
 81067a4:	f893 3020 	ldrb.w	r3, [r3, #32]
 81067a8:	2b01      	cmp	r3, #1
 81067aa:	d101      	bne.n	81067b0 <HAL_RTCEx_SetTamper+0x18>
 81067ac:	2302      	movs	r3, #2
 81067ae:	e0cc      	b.n	810694a <HAL_RTCEx_SetTamper+0x1b2>
 81067b0:	687b      	ldr	r3, [r7, #4]
 81067b2:	2201      	movs	r2, #1
 81067b4:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 81067b8:	687b      	ldr	r3, [r7, #4]
 81067ba:	2202      	movs	r2, #2
 81067bc:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Copy control register into temporary variable */
  tmpreg = hrtc->Instance->TAMPCR;
 81067c0:	687b      	ldr	r3, [r7, #4]
 81067c2:	681b      	ldr	r3, [r3, #0]
 81067c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 81067c6:	60fb      	str	r3, [r7, #12]

  /* Enable selected tamper */
  tmpreg |= (sTamper->Tamper);
 81067c8:	683b      	ldr	r3, [r7, #0]
 81067ca:	681b      	ldr	r3, [r3, #0]
 81067cc:	68fa      	ldr	r2, [r7, #12]
 81067ce:	4313      	orrs	r3, r2
 81067d0:	60fb      	str	r3, [r7, #12]

  /* Configure the bit (located just next to the tamper enable bit) */
  if ((sTamper->Trigger == RTC_TAMPERTRIGGER_HIGHLEVEL) || (sTamper->Trigger == RTC_TAMPERTRIGGER_FALLINGEDGE))
 81067d2:	683b      	ldr	r3, [r7, #0]
 81067d4:	689b      	ldr	r3, [r3, #8]
 81067d6:	2b08      	cmp	r3, #8
 81067d8:	d003      	beq.n	81067e2 <HAL_RTCEx_SetTamper+0x4a>
 81067da:	683b      	ldr	r3, [r7, #0]
 81067dc:	689b      	ldr	r3, [r3, #8]
 81067de:	2b02      	cmp	r3, #2
 81067e0:	d106      	bne.n	81067f0 <HAL_RTCEx_SetTamper+0x58>
  {
    /* Set the tamper trigger bit */
    tmpreg |= (uint32_t)(sTamper->Tamper << 1U);
 81067e2:	683b      	ldr	r3, [r7, #0]
 81067e4:	681b      	ldr	r3, [r3, #0]
 81067e6:	005b      	lsls	r3, r3, #1
 81067e8:	68fa      	ldr	r2, [r7, #12]
 81067ea:	4313      	orrs	r3, r2
 81067ec:	60fb      	str	r3, [r7, #12]
 81067ee:	e006      	b.n	81067fe <HAL_RTCEx_SetTamper+0x66>
  }
  else
  {
    /* Clear the tamper trigger bit */
    tmpreg &= (uint32_t)~(sTamper->Tamper << 1U);
 81067f0:	683b      	ldr	r3, [r7, #0]
 81067f2:	681b      	ldr	r3, [r3, #0]
 81067f4:	005b      	lsls	r3, r3, #1
 81067f6:	43db      	mvns	r3, r3
 81067f8:	68fa      	ldr	r2, [r7, #12]
 81067fa:	4013      	ands	r3, r2
 81067fc:	60fb      	str	r3, [r7, #12]
  }

  /* Configure the tamper backup registers erasure bit */
  if (sTamper->NoErase != RTC_TAMPER_ERASE_BACKUP_ENABLE)
 81067fe:	683b      	ldr	r3, [r7, #0]
 8106800:	68db      	ldr	r3, [r3, #12]
 8106802:	2b00      	cmp	r3, #0
 8106804:	d01e      	beq.n	8106844 <HAL_RTCEx_SetTamper+0xac>
  {
    if ((sTamper->Tamper & RTC_TAMPER_1) != 0U)
 8106806:	683b      	ldr	r3, [r7, #0]
 8106808:	681b      	ldr	r3, [r3, #0]
 810680a:	f003 0301 	and.w	r3, r3, #1
 810680e:	2b00      	cmp	r3, #0
 8106810:	d003      	beq.n	810681a <HAL_RTCEx_SetTamper+0x82>
    {
      tmpreg |= (uint32_t)(RTC_TAMPCR_TAMP1NOERASE);
 8106812:	68fb      	ldr	r3, [r7, #12]
 8106814:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8106818:	60fb      	str	r3, [r7, #12]
    }
    if ((sTamper->Tamper & RTC_TAMPER_2) != 0U)
 810681a:	683b      	ldr	r3, [r7, #0]
 810681c:	681b      	ldr	r3, [r3, #0]
 810681e:	f003 0308 	and.w	r3, r3, #8
 8106822:	2b00      	cmp	r3, #0
 8106824:	d003      	beq.n	810682e <HAL_RTCEx_SetTamper+0x96>
    {
      tmpreg |= (uint32_t)(RTC_TAMPCR_TAMP2NOERASE);
 8106826:	68fb      	ldr	r3, [r7, #12]
 8106828:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 810682c:	60fb      	str	r3, [r7, #12]
    }
    if ((sTamper->Tamper & RTC_TAMPER_3) != 0U)
 810682e:	683b      	ldr	r3, [r7, #0]
 8106830:	681b      	ldr	r3, [r3, #0]
 8106832:	f003 0320 	and.w	r3, r3, #32
 8106836:	2b00      	cmp	r3, #0
 8106838:	d022      	beq.n	8106880 <HAL_RTCEx_SetTamper+0xe8>
    {
      tmpreg |= (uint32_t)(RTC_TAMPCR_TAMP3NOERASE);
 810683a:	68fb      	ldr	r3, [r7, #12]
 810683c:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8106840:	60fb      	str	r3, [r7, #12]
 8106842:	e01d      	b.n	8106880 <HAL_RTCEx_SetTamper+0xe8>
    }
  }
  else
  {
    if ((sTamper->Tamper & RTC_TAMPER_1) != 0U)
 8106844:	683b      	ldr	r3, [r7, #0]
 8106846:	681b      	ldr	r3, [r3, #0]
 8106848:	f003 0301 	and.w	r3, r3, #1
 810684c:	2b00      	cmp	r3, #0
 810684e:	d003      	beq.n	8106858 <HAL_RTCEx_SetTamper+0xc0>
    {
      tmpreg &= (uint32_t)~(RTC_TAMPCR_TAMP1NOERASE);
 8106850:	68fb      	ldr	r3, [r7, #12]
 8106852:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8106856:	60fb      	str	r3, [r7, #12]
    }
    if ((sTamper->Tamper & RTC_TAMPER_2) != 0U)
 8106858:	683b      	ldr	r3, [r7, #0]
 810685a:	681b      	ldr	r3, [r3, #0]
 810685c:	f003 0308 	and.w	r3, r3, #8
 8106860:	2b00      	cmp	r3, #0
 8106862:	d003      	beq.n	810686c <HAL_RTCEx_SetTamper+0xd4>
    {
      tmpreg &= (uint32_t)~(RTC_TAMPCR_TAMP2NOERASE);
 8106864:	68fb      	ldr	r3, [r7, #12]
 8106866:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 810686a:	60fb      	str	r3, [r7, #12]
    }
    if ((sTamper->Tamper & RTC_TAMPER_3) != 0U)
 810686c:	683b      	ldr	r3, [r7, #0]
 810686e:	681b      	ldr	r3, [r3, #0]
 8106870:	f003 0320 	and.w	r3, r3, #32
 8106874:	2b00      	cmp	r3, #0
 8106876:	d003      	beq.n	8106880 <HAL_RTCEx_SetTamper+0xe8>
    {
      tmpreg &= (uint32_t)~(RTC_TAMPCR_TAMP3NOERASE);
 8106878:	68fb      	ldr	r3, [r7, #12]
 810687a:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 810687e:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Configure the tamper flags masking bit */
  if (sTamper->MaskFlag != RTC_TAMPERMASK_FLAG_DISABLE)
 8106880:	683b      	ldr	r3, [r7, #0]
 8106882:	691b      	ldr	r3, [r3, #16]
 8106884:	2b00      	cmp	r3, #0
 8106886:	d01e      	beq.n	81068c6 <HAL_RTCEx_SetTamper+0x12e>
  {
    if ((sTamper->Tamper & RTC_TAMPER_1) != 0U)
 8106888:	683b      	ldr	r3, [r7, #0]
 810688a:	681b      	ldr	r3, [r3, #0]
 810688c:	f003 0301 	and.w	r3, r3, #1
 8106890:	2b00      	cmp	r3, #0
 8106892:	d003      	beq.n	810689c <HAL_RTCEx_SetTamper+0x104>
    {
      tmpreg |= (uint32_t)(RTC_TAMPCR_TAMP1MF);
 8106894:	68fb      	ldr	r3, [r7, #12]
 8106896:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 810689a:	60fb      	str	r3, [r7, #12]
    }
    if ((sTamper->Tamper & RTC_TAMPER_2) != 0U)
 810689c:	683b      	ldr	r3, [r7, #0]
 810689e:	681b      	ldr	r3, [r3, #0]
 81068a0:	f003 0308 	and.w	r3, r3, #8
 81068a4:	2b00      	cmp	r3, #0
 81068a6:	d003      	beq.n	81068b0 <HAL_RTCEx_SetTamper+0x118>
    {
      tmpreg |= (uint32_t)(RTC_TAMPCR_TAMP2MF);
 81068a8:	68fb      	ldr	r3, [r7, #12]
 81068aa:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 81068ae:	60fb      	str	r3, [r7, #12]
    }
    if ((sTamper->Tamper & RTC_TAMPER_3) != 0U)
 81068b0:	683b      	ldr	r3, [r7, #0]
 81068b2:	681b      	ldr	r3, [r3, #0]
 81068b4:	f003 0320 	and.w	r3, r3, #32
 81068b8:	2b00      	cmp	r3, #0
 81068ba:	d022      	beq.n	8106902 <HAL_RTCEx_SetTamper+0x16a>
    {
      tmpreg |= (uint32_t)(RTC_TAMPCR_TAMP3MF);
 81068bc:	68fb      	ldr	r3, [r7, #12]
 81068be:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 81068c2:	60fb      	str	r3, [r7, #12]
 81068c4:	e01d      	b.n	8106902 <HAL_RTCEx_SetTamper+0x16a>
    }
  }
  else
  {
    if ((sTamper->Tamper & RTC_TAMPER_1) != 0U)
 81068c6:	683b      	ldr	r3, [r7, #0]
 81068c8:	681b      	ldr	r3, [r3, #0]
 81068ca:	f003 0301 	and.w	r3, r3, #1
 81068ce:	2b00      	cmp	r3, #0
 81068d0:	d003      	beq.n	81068da <HAL_RTCEx_SetTamper+0x142>
    {
      tmpreg &= (uint32_t)~(RTC_TAMPCR_TAMP1MF);
 81068d2:	68fb      	ldr	r3, [r7, #12]
 81068d4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 81068d8:	60fb      	str	r3, [r7, #12]
    }
    if ((sTamper->Tamper & RTC_TAMPER_2) != 0U)
 81068da:	683b      	ldr	r3, [r7, #0]
 81068dc:	681b      	ldr	r3, [r3, #0]
 81068de:	f003 0308 	and.w	r3, r3, #8
 81068e2:	2b00      	cmp	r3, #0
 81068e4:	d003      	beq.n	81068ee <HAL_RTCEx_SetTamper+0x156>
    {
      tmpreg &= (uint32_t)~(RTC_TAMPCR_TAMP2MF);
 81068e6:	68fb      	ldr	r3, [r7, #12]
 81068e8:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 81068ec:	60fb      	str	r3, [r7, #12]
    }
    if ((sTamper->Tamper & RTC_TAMPER_3) != 0U)
 81068ee:	683b      	ldr	r3, [r7, #0]
 81068f0:	681b      	ldr	r3, [r3, #0]
 81068f2:	f003 0320 	and.w	r3, r3, #32
 81068f6:	2b00      	cmp	r3, #0
 81068f8:	d003      	beq.n	8106902 <HAL_RTCEx_SetTamper+0x16a>
    {
      tmpreg &= (uint32_t)~(RTC_TAMPCR_TAMP3MF);
 81068fa:	68fb      	ldr	r3, [r7, #12]
 81068fc:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8106900:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Clearing remaining fields before setting them */
  tmpreg &= ~(RTC_TAMPERFILTER_MASK            | RTC_TAMPERSAMPLINGFREQ_RTCCLK_MASK | \
 8106902:	68fb      	ldr	r3, [r7, #12]
 8106904:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8106908:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 810690c:	60fb      	str	r3, [r7, #12]
              RTC_TAMPERPRECHARGEDURATION_MASK | RTC_TAMPER_PULLUP_MASK             | \
              RTC_TIMESTAMPONTAMPERDETECTION_MASK);

  /* Set remaining parameters of desired configuration into temporary variable */
  tmpreg |= ((uint32_t)sTamper->Filter            | \
 810690e:	683b      	ldr	r3, [r7, #0]
 8106910:	695a      	ldr	r2, [r3, #20]
             (uint32_t)sTamper->SamplingFrequency | \
 8106912:	683b      	ldr	r3, [r7, #0]
 8106914:	699b      	ldr	r3, [r3, #24]
  tmpreg |= ((uint32_t)sTamper->Filter            | \
 8106916:	431a      	orrs	r2, r3
             (uint32_t)sTamper->PrechargeDuration | \
 8106918:	683b      	ldr	r3, [r7, #0]
 810691a:	69db      	ldr	r3, [r3, #28]
             (uint32_t)sTamper->SamplingFrequency | \
 810691c:	431a      	orrs	r2, r3
             (uint32_t)sTamper->TamperPullUp      | \
 810691e:	683b      	ldr	r3, [r7, #0]
 8106920:	6a1b      	ldr	r3, [r3, #32]
             (uint32_t)sTamper->PrechargeDuration | \
 8106922:	431a      	orrs	r2, r3
             (uint32_t)sTamper->TimeStampOnTamperDetection);
 8106924:	683b      	ldr	r3, [r7, #0]
 8106926:	6a5b      	ldr	r3, [r3, #36]	; 0x24
             (uint32_t)sTamper->TamperPullUp      | \
 8106928:	4313      	orrs	r3, r2
  tmpreg |= ((uint32_t)sTamper->Filter            | \
 810692a:	68fa      	ldr	r2, [r7, #12]
 810692c:	4313      	orrs	r3, r2
 810692e:	60fb      	str	r3, [r7, #12]

  /* Copy desired configuration into configuration register */
  hrtc->Instance->TAMPCR = tmpreg;
 8106930:	687b      	ldr	r3, [r7, #4]
 8106932:	681b      	ldr	r3, [r3, #0]
 8106934:	68fa      	ldr	r2, [r7, #12]
 8106936:	641a      	str	r2, [r3, #64]	; 0x40

  hrtc->State = HAL_RTC_STATE_READY;
 8106938:	687b      	ldr	r3, [r7, #4]
 810693a:	2201      	movs	r2, #1
 810693c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8106940:	687b      	ldr	r3, [r7, #4]
 8106942:	2200      	movs	r2, #0
 8106944:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8106948:	2300      	movs	r3, #0
}
 810694a:	4618      	mov	r0, r3
 810694c:	3714      	adds	r7, #20
 810694e:	46bd      	mov	sp, r7
 8106950:	f85d 7b04 	ldr.w	r7, [sp], #4
 8106954:	4770      	bx	lr
	...

08106958 <HAL_SAI_Init>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *              the configuration information for SAI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_Init(SAI_HandleTypeDef *hsai)
{
 8106958:	b580      	push	{r7, lr}
 810695a:	b08a      	sub	sp, #40	; 0x28
 810695c:	af00      	add	r7, sp, #0
 810695e:	6078      	str	r0, [r7, #4]
  uint32_t ckstr_bits;
  uint32_t syncen_bits;
  SAI_TypeDef *SaiBaseAddress;

  /* Check the SAI handle allocation */
  if (hsai == NULL)
 8106960:	687b      	ldr	r3, [r7, #4]
 8106962:	2b00      	cmp	r3, #0
 8106964:	d101      	bne.n	810696a <HAL_SAI_Init+0x12>
  {
    return HAL_ERROR;
 8106966:	2301      	movs	r3, #1
 8106968:	e290      	b.n	8106e8c <HAL_SAI_Init+0x534>
  assert_param(IS_SAI_BLOCK_FIRST_BIT(hsai->Init.FirstBit));
  assert_param(IS_SAI_BLOCK_CLOCK_STROBING(hsai->Init.ClockStrobing));
  assert_param(IS_SAI_BLOCK_SYNCHRO(hsai->Init.Synchro));
#if defined(SAI_VER_V2_X)
  /* SAI Peripheral version depends on STM32H7 device revision ID */
  if (HAL_GetREVID() >= REV_ID_B) /* STM32H7xx Rev.B and above */
 810696a:	f7fb f967 	bl	8101c3c <HAL_GetREVID>
  assert_param(IS_SAI_BLOCK_SLOT_NUMBER(hsai->SlotInit.SlotNumber));
  assert_param(IS_SAI_SLOT_ACTIVE(hsai->SlotInit.SlotActive));

  /* Check the SAI PDM parameters */
  assert_param(IS_FUNCTIONAL_STATE(hsai->Init.PdmInit.Activation));
  if (hsai->Init.PdmInit.Activation == ENABLE)
 810696e:	687b      	ldr	r3, [r7, #4]
 8106970:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8106974:	2b01      	cmp	r3, #1
 8106976:	d113      	bne.n	81069a0 <HAL_SAI_Init+0x48>
  {
    assert_param(IS_SAI_PDM_MIC_PAIRS_NUMBER(hsai->Init.PdmInit.MicPairsNbr));
    assert_param(IS_SAI_PDM_CLOCK_ENABLE(hsai->Init.PdmInit.ClockEnable));
    /* Check that SAI sub-block is SAI1 or SAI4 sub-block A, in master RX mode with free protocol */
#if defined(SAI4)
    if (((hsai->Instance != SAI1_Block_A) && (hsai->Instance != SAI4_Block_A)) ||
 8106978:	687b      	ldr	r3, [r7, #4]
 810697a:	681b      	ldr	r3, [r3, #0]
 810697c:	4a96      	ldr	r2, [pc, #600]	; (8106bd8 <HAL_SAI_Init+0x280>)
 810697e:	4293      	cmp	r3, r2
 8106980:	d004      	beq.n	810698c <HAL_SAI_Init+0x34>
 8106982:	687b      	ldr	r3, [r7, #4]
 8106984:	681b      	ldr	r3, [r3, #0]
 8106986:	4a95      	ldr	r2, [pc, #596]	; (8106bdc <HAL_SAI_Init+0x284>)
 8106988:	4293      	cmp	r3, r2
 810698a:	d107      	bne.n	810699c <HAL_SAI_Init+0x44>
         (hsai->Init.AudioMode != SAI_MODEMASTER_RX) ||
 810698c:	687b      	ldr	r3, [r7, #4]
 810698e:	685b      	ldr	r3, [r3, #4]
    if (((hsai->Instance != SAI1_Block_A) && (hsai->Instance != SAI4_Block_A)) ||
 8106990:	2b01      	cmp	r3, #1
 8106992:	d103      	bne.n	810699c <HAL_SAI_Init+0x44>
         (hsai->Init.Protocol != SAI_FREE_PROTOCOL))
 8106994:	687b      	ldr	r3, [r7, #4]
 8106996:	6c5b      	ldr	r3, [r3, #68]	; 0x44
         (hsai->Init.AudioMode != SAI_MODEMASTER_RX) ||
 8106998:	2b00      	cmp	r3, #0
 810699a:	d001      	beq.n	81069a0 <HAL_SAI_Init+0x48>
    {
      return HAL_ERROR;
 810699c:	2301      	movs	r3, #1
 810699e:	e275      	b.n	8106e8c <HAL_SAI_Init+0x534>
    }
#endif /* SAI4 */
  }

  /* Get the SAI base address according to the SAI handle */
  if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI1_Block_B))
 81069a0:	687b      	ldr	r3, [r7, #4]
 81069a2:	681b      	ldr	r3, [r3, #0]
 81069a4:	4a8c      	ldr	r2, [pc, #560]	; (8106bd8 <HAL_SAI_Init+0x280>)
 81069a6:	4293      	cmp	r3, r2
 81069a8:	d004      	beq.n	81069b4 <HAL_SAI_Init+0x5c>
 81069aa:	687b      	ldr	r3, [r7, #4]
 81069ac:	681b      	ldr	r3, [r3, #0]
 81069ae:	4a8c      	ldr	r2, [pc, #560]	; (8106be0 <HAL_SAI_Init+0x288>)
 81069b0:	4293      	cmp	r3, r2
 81069b2:	d102      	bne.n	81069ba <HAL_SAI_Init+0x62>
  {
    SaiBaseAddress = SAI1;
 81069b4:	4b8b      	ldr	r3, [pc, #556]	; (8106be4 <HAL_SAI_Init+0x28c>)
 81069b6:	61bb      	str	r3, [r7, #24]
 81069b8:	e028      	b.n	8106a0c <HAL_SAI_Init+0xb4>
  }
#if defined(SAI2)
  else if ((hsai->Instance == SAI2_Block_A) || (hsai->Instance == SAI2_Block_B))
 81069ba:	687b      	ldr	r3, [r7, #4]
 81069bc:	681b      	ldr	r3, [r3, #0]
 81069be:	4a8a      	ldr	r2, [pc, #552]	; (8106be8 <HAL_SAI_Init+0x290>)
 81069c0:	4293      	cmp	r3, r2
 81069c2:	d004      	beq.n	81069ce <HAL_SAI_Init+0x76>
 81069c4:	687b      	ldr	r3, [r7, #4]
 81069c6:	681b      	ldr	r3, [r3, #0]
 81069c8:	4a88      	ldr	r2, [pc, #544]	; (8106bec <HAL_SAI_Init+0x294>)
 81069ca:	4293      	cmp	r3, r2
 81069cc:	d102      	bne.n	81069d4 <HAL_SAI_Init+0x7c>
  {
    SaiBaseAddress = SAI2;
 81069ce:	4b88      	ldr	r3, [pc, #544]	; (8106bf0 <HAL_SAI_Init+0x298>)
 81069d0:	61bb      	str	r3, [r7, #24]
 81069d2:	e01b      	b.n	8106a0c <HAL_SAI_Init+0xb4>
  }
#endif /* SAI2 */
#if defined(SAI3)
  else if ((hsai->Instance == SAI3_Block_A) || (hsai->Instance == SAI3_Block_B))
 81069d4:	687b      	ldr	r3, [r7, #4]
 81069d6:	681b      	ldr	r3, [r3, #0]
 81069d8:	4a86      	ldr	r2, [pc, #536]	; (8106bf4 <HAL_SAI_Init+0x29c>)
 81069da:	4293      	cmp	r3, r2
 81069dc:	d004      	beq.n	81069e8 <HAL_SAI_Init+0x90>
 81069de:	687b      	ldr	r3, [r7, #4]
 81069e0:	681b      	ldr	r3, [r3, #0]
 81069e2:	4a85      	ldr	r2, [pc, #532]	; (8106bf8 <HAL_SAI_Init+0x2a0>)
 81069e4:	4293      	cmp	r3, r2
 81069e6:	d102      	bne.n	81069ee <HAL_SAI_Init+0x96>
  {
    SaiBaseAddress = SAI3;
 81069e8:	4b84      	ldr	r3, [pc, #528]	; (8106bfc <HAL_SAI_Init+0x2a4>)
 81069ea:	61bb      	str	r3, [r7, #24]
 81069ec:	e00e      	b.n	8106a0c <HAL_SAI_Init+0xb4>
  }
#endif /* SAI3 */
#if defined(SAI4)
  else if ((hsai->Instance == SAI4_Block_A) || (hsai->Instance == SAI4_Block_B))
 81069ee:	687b      	ldr	r3, [r7, #4]
 81069f0:	681b      	ldr	r3, [r3, #0]
 81069f2:	4a7a      	ldr	r2, [pc, #488]	; (8106bdc <HAL_SAI_Init+0x284>)
 81069f4:	4293      	cmp	r3, r2
 81069f6:	d004      	beq.n	8106a02 <HAL_SAI_Init+0xaa>
 81069f8:	687b      	ldr	r3, [r7, #4]
 81069fa:	681b      	ldr	r3, [r3, #0]
 81069fc:	4a80      	ldr	r2, [pc, #512]	; (8106c00 <HAL_SAI_Init+0x2a8>)
 81069fe:	4293      	cmp	r3, r2
 8106a00:	d102      	bne.n	8106a08 <HAL_SAI_Init+0xb0>
  {
    SaiBaseAddress = SAI4;
 8106a02:	4b80      	ldr	r3, [pc, #512]	; (8106c04 <HAL_SAI_Init+0x2ac>)
 8106a04:	61bb      	str	r3, [r7, #24]
 8106a06:	e001      	b.n	8106a0c <HAL_SAI_Init+0xb4>
  }
#endif /* SAI4 */
  else
  {
    return HAL_ERROR;
 8106a08:	2301      	movs	r3, #1
 8106a0a:	e23f      	b.n	8106e8c <HAL_SAI_Init+0x534>
  }

  if (hsai->State == HAL_SAI_STATE_RESET)
 8106a0c:	687b      	ldr	r3, [r7, #4]
 8106a0e:	f893 3091 	ldrb.w	r3, [r3, #145]	; 0x91
 8106a12:	b2db      	uxtb	r3, r3
 8106a14:	2b00      	cmp	r3, #0
 8106a16:	d106      	bne.n	8106a26 <HAL_SAI_Init+0xce>
  {
    /* Allocate lock resource and initialize it */
    hsai->Lock = HAL_UNLOCKED;
 8106a18:	687b      	ldr	r3, [r7, #4]
 8106a1a:	2200      	movs	r2, #0
 8106a1c:	f883 2090 	strb.w	r2, [r3, #144]	; 0x90
      hsai->MspInitCallback = HAL_SAI_MspInit;
    }
    hsai->MspInitCallback(hsai);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_SAI_MspInit(hsai);
 8106a20:	6878      	ldr	r0, [r7, #4]
 8106a22:	f7fa fe7b 	bl	810171c <HAL_SAI_MspInit>
#endif
  }

  /* Disable the selected SAI peripheral */
  if(SAI_Disable(hsai) != HAL_OK)
 8106a26:	6878      	ldr	r0, [r7, #4]
 8106a28:	f000 fa40 	bl	8106eac <SAI_Disable>
 8106a2c:	4603      	mov	r3, r0
 8106a2e:	2b00      	cmp	r3, #0
 8106a30:	d001      	beq.n	8106a36 <HAL_SAI_Init+0xde>
  {
    return HAL_ERROR;
 8106a32:	2301      	movs	r3, #1
 8106a34:	e22a      	b.n	8106e8c <HAL_SAI_Init+0x534>
  }

  hsai->State = HAL_SAI_STATE_BUSY;
 8106a36:	687b      	ldr	r3, [r7, #4]
 8106a38:	2202      	movs	r2, #2
 8106a3a:	f883 2091 	strb.w	r2, [r3, #145]	; 0x91

  /* SAI Block Synchro Configuration -----------------------------------------*/
  /* This setting must be done with both audio block (A & B) disabled         */
  switch (hsai->Init.SynchroExt)
 8106a3e:	687b      	ldr	r3, [r7, #4]
 8106a40:	68db      	ldr	r3, [r3, #12]
 8106a42:	2b02      	cmp	r3, #2
 8106a44:	d00c      	beq.n	8106a60 <HAL_SAI_Init+0x108>
 8106a46:	2b02      	cmp	r3, #2
 8106a48:	d80d      	bhi.n	8106a66 <HAL_SAI_Init+0x10e>
 8106a4a:	2b00      	cmp	r3, #0
 8106a4c:	d002      	beq.n	8106a54 <HAL_SAI_Init+0xfc>
 8106a4e:	2b01      	cmp	r3, #1
 8106a50:	d003      	beq.n	8106a5a <HAL_SAI_Init+0x102>
 8106a52:	e008      	b.n	8106a66 <HAL_SAI_Init+0x10e>
  {
    case SAI_SYNCEXT_DISABLE :
      tmpregisterGCR = 0;
 8106a54:	2300      	movs	r3, #0
 8106a56:	627b      	str	r3, [r7, #36]	; 0x24
      break;
 8106a58:	e008      	b.n	8106a6c <HAL_SAI_Init+0x114>
    case SAI_SYNCEXT_OUTBLOCKA_ENABLE :
      tmpregisterGCR = SAI_GCR_SYNCOUT_0;
 8106a5a:	2310      	movs	r3, #16
 8106a5c:	627b      	str	r3, [r7, #36]	; 0x24
      break;
 8106a5e:	e005      	b.n	8106a6c <HAL_SAI_Init+0x114>
    case SAI_SYNCEXT_OUTBLOCKB_ENABLE :
      tmpregisterGCR = SAI_GCR_SYNCOUT_1;
 8106a60:	2320      	movs	r3, #32
 8106a62:	627b      	str	r3, [r7, #36]	; 0x24
      break;
 8106a64:	e002      	b.n	8106a6c <HAL_SAI_Init+0x114>
    default:
      tmpregisterGCR = 0;
 8106a66:	2300      	movs	r3, #0
 8106a68:	627b      	str	r3, [r7, #36]	; 0x24
      break;
 8106a6a:	bf00      	nop
  }

  switch (hsai->Init.Synchro)
 8106a6c:	687b      	ldr	r3, [r7, #4]
 8106a6e:	689b      	ldr	r3, [r3, #8]
 8106a70:	2b05      	cmp	r3, #5
 8106a72:	d832      	bhi.n	8106ada <HAL_SAI_Init+0x182>
 8106a74:	a201      	add	r2, pc, #4	; (adr r2, 8106a7c <HAL_SAI_Init+0x124>)
 8106a76:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8106a7a:	bf00      	nop
 8106a7c:	08106a95 	.word	0x08106a95
 8106a80:	08106a9b 	.word	0x08106a9b
 8106a84:	08106aa3 	.word	0x08106aa3
 8106a88:	08106aab 	.word	0x08106aab
 8106a8c:	08106abb 	.word	0x08106abb
 8106a90:	08106acb 	.word	0x08106acb
  {
    case SAI_ASYNCHRONOUS :
      syncen_bits = 0;
 8106a94:	2300      	movs	r3, #0
 8106a96:	61fb      	str	r3, [r7, #28]
      break;
 8106a98:	e022      	b.n	8106ae0 <HAL_SAI_Init+0x188>
    case SAI_SYNCHRONOUS :
      syncen_bits = SAI_xCR1_SYNCEN_0;
 8106a9a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8106a9e:	61fb      	str	r3, [r7, #28]
      break;
 8106aa0:	e01e      	b.n	8106ae0 <HAL_SAI_Init+0x188>
    case SAI_SYNCHRONOUS_EXT_SAI1 :
      syncen_bits = SAI_xCR1_SYNCEN_1;
 8106aa2:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8106aa6:	61fb      	str	r3, [r7, #28]
      break;
 8106aa8:	e01a      	b.n	8106ae0 <HAL_SAI_Init+0x188>
#if defined(SAI2)
    case SAI_SYNCHRONOUS_EXT_SAI2 :
      syncen_bits = SAI_xCR1_SYNCEN_1;
 8106aaa:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8106aae:	61fb      	str	r3, [r7, #28]
      tmpregisterGCR |= SAI_GCR_SYNCIN_0;
 8106ab0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8106ab2:	f043 0301 	orr.w	r3, r3, #1
 8106ab6:	627b      	str	r3, [r7, #36]	; 0x24
      break;
 8106ab8:	e012      	b.n	8106ae0 <HAL_SAI_Init+0x188>
#endif /* SAI2 */
#if defined(SAI3)
    case SAI_SYNCHRONOUS_EXT_SAI3 :
      syncen_bits = SAI_xCR1_SYNCEN_1;
 8106aba:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8106abe:	61fb      	str	r3, [r7, #28]
      tmpregisterGCR |= SAI_GCR_SYNCIN_1;
 8106ac0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8106ac2:	f043 0302 	orr.w	r3, r3, #2
 8106ac6:	627b      	str	r3, [r7, #36]	; 0x24
      break;
 8106ac8:	e00a      	b.n	8106ae0 <HAL_SAI_Init+0x188>
#endif /* SAI3 */
#if defined(SAI4)
    case SAI_SYNCHRONOUS_EXT_SAI4 :
      syncen_bits = SAI_xCR1_SYNCEN_1;
 8106aca:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8106ace:	61fb      	str	r3, [r7, #28]
      tmpregisterGCR |= (SAI_GCR_SYNCIN_1 | SAI_GCR_SYNCIN_0);
 8106ad0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8106ad2:	f043 0303 	orr.w	r3, r3, #3
 8106ad6:	627b      	str	r3, [r7, #36]	; 0x24
      break;
 8106ad8:	e002      	b.n	8106ae0 <HAL_SAI_Init+0x188>
#endif /* SAI4 */
    default:
      syncen_bits = 0;
 8106ada:	2300      	movs	r3, #0
 8106adc:	61fb      	str	r3, [r7, #28]
      break;
 8106ade:	bf00      	nop
  }

  /* Set the SAI Block Synchro Configuration */
  SaiBaseAddress->GCR = tmpregisterGCR;
 8106ae0:	69bb      	ldr	r3, [r7, #24]
 8106ae2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8106ae4:	601a      	str	r2, [r3, #0]

  if (hsai->Init.AudioFrequency != SAI_AUDIO_FREQUENCY_MCKDIV)
 8106ae6:	687b      	ldr	r3, [r7, #4]
 8106ae8:	6a1b      	ldr	r3, [r3, #32]
 8106aea:	2b00      	cmp	r3, #0
 8106aec:	f000 80c5 	beq.w	8106c7a <HAL_SAI_Init+0x322>
  {
    uint32_t freq = 0;
 8106af0:	2300      	movs	r3, #0
 8106af2:	617b      	str	r3, [r7, #20]
    uint32_t tmpval;

    /* In this case, the MCKDIV value is calculated to get AudioFrequency */
    if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI1_Block_B))
 8106af4:	687b      	ldr	r3, [r7, #4]
 8106af6:	681b      	ldr	r3, [r3, #0]
 8106af8:	4a37      	ldr	r2, [pc, #220]	; (8106bd8 <HAL_SAI_Init+0x280>)
 8106afa:	4293      	cmp	r3, r2
 8106afc:	d004      	beq.n	8106b08 <HAL_SAI_Init+0x1b0>
 8106afe:	687b      	ldr	r3, [r7, #4]
 8106b00:	681b      	ldr	r3, [r3, #0]
 8106b02:	4a37      	ldr	r2, [pc, #220]	; (8106be0 <HAL_SAI_Init+0x288>)
 8106b04:	4293      	cmp	r3, r2
 8106b06:	d106      	bne.n	8106b16 <HAL_SAI_Init+0x1be>
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI1);
 8106b08:	f44f 7080 	mov.w	r0, #256	; 0x100
 8106b0c:	f04f 0100 	mov.w	r1, #0
 8106b10:	f7fe fa36 	bl	8104f80 <HAL_RCCEx_GetPeriphCLKFreq>
 8106b14:	6178      	str	r0, [r7, #20]
    }

#if defined(SAI2)
#if defined(RCC_PERIPHCLK_SAI2)
    if ((hsai->Instance == SAI2_Block_A) || (hsai->Instance == SAI2_Block_B))
 8106b16:	687b      	ldr	r3, [r7, #4]
 8106b18:	681b      	ldr	r3, [r3, #0]
 8106b1a:	4a33      	ldr	r2, [pc, #204]	; (8106be8 <HAL_SAI_Init+0x290>)
 8106b1c:	4293      	cmp	r3, r2
 8106b1e:	d004      	beq.n	8106b2a <HAL_SAI_Init+0x1d2>
 8106b20:	687b      	ldr	r3, [r7, #4]
 8106b22:	681b      	ldr	r3, [r3, #0]
 8106b24:	4a31      	ldr	r2, [pc, #196]	; (8106bec <HAL_SAI_Init+0x294>)
 8106b26:	4293      	cmp	r3, r2
 8106b28:	d106      	bne.n	8106b38 <HAL_SAI_Init+0x1e0>
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI2);
 8106b2a:	f44f 7000 	mov.w	r0, #512	; 0x200
 8106b2e:	f04f 0100 	mov.w	r1, #0
 8106b32:	f7fe fa25 	bl	8104f80 <HAL_RCCEx_GetPeriphCLKFreq>
 8106b36:	6178      	str	r0, [r7, #20]
    }
#endif /* RCC_PERIPHCLK_SAI2 */
#endif /* SAI2 */

#if defined(SAI3)
    if ((hsai->Instance == SAI3_Block_A) || (hsai->Instance == SAI3_Block_B))
 8106b38:	687b      	ldr	r3, [r7, #4]
 8106b3a:	681b      	ldr	r3, [r3, #0]
 8106b3c:	4a2d      	ldr	r2, [pc, #180]	; (8106bf4 <HAL_SAI_Init+0x29c>)
 8106b3e:	4293      	cmp	r3, r2
 8106b40:	d004      	beq.n	8106b4c <HAL_SAI_Init+0x1f4>
 8106b42:	687b      	ldr	r3, [r7, #4]
 8106b44:	681b      	ldr	r3, [r3, #0]
 8106b46:	4a2c      	ldr	r2, [pc, #176]	; (8106bf8 <HAL_SAI_Init+0x2a0>)
 8106b48:	4293      	cmp	r3, r2
 8106b4a:	d106      	bne.n	8106b5a <HAL_SAI_Init+0x202>
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI3);
 8106b4c:	f44f 7000 	mov.w	r0, #512	; 0x200
 8106b50:	f04f 0100 	mov.w	r1, #0
 8106b54:	f7fe fa14 	bl	8104f80 <HAL_RCCEx_GetPeriphCLKFreq>
 8106b58:	6178      	str	r0, [r7, #20]
    }
#endif /* SAI3 */
#if defined(SAI4)
    if (hsai->Instance == SAI4_Block_A)
 8106b5a:	687b      	ldr	r3, [r7, #4]
 8106b5c:	681b      	ldr	r3, [r3, #0]
 8106b5e:	4a1f      	ldr	r2, [pc, #124]	; (8106bdc <HAL_SAI_Init+0x284>)
 8106b60:	4293      	cmp	r3, r2
 8106b62:	d106      	bne.n	8106b72 <HAL_SAI_Init+0x21a>
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI4A);
 8106b64:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8106b68:	f04f 0100 	mov.w	r1, #0
 8106b6c:	f7fe fa08 	bl	8104f80 <HAL_RCCEx_GetPeriphCLKFreq>
 8106b70:	6178      	str	r0, [r7, #20]
    }
    if (hsai->Instance == SAI4_Block_B)
 8106b72:	687b      	ldr	r3, [r7, #4]
 8106b74:	681b      	ldr	r3, [r3, #0]
 8106b76:	4a22      	ldr	r2, [pc, #136]	; (8106c00 <HAL_SAI_Init+0x2a8>)
 8106b78:	4293      	cmp	r3, r2
 8106b7a:	d106      	bne.n	8106b8a <HAL_SAI_Init+0x232>
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI4B);
 8106b7c:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8106b80:	f04f 0100 	mov.w	r1, #0
 8106b84:	f7fe f9fc 	bl	8104f80 <HAL_RCCEx_GetPeriphCLKFreq>
 8106b88:	6178      	str	r0, [r7, #20]
    /* Configure Master Clock Divider using the following formula :
       - If NODIV = 1 :
         MCKDIV[5:0] = SAI_CK_x / (FS * (FRL + 1))
       - If NODIV = 0 :
         MCKDIV[5:0] = SAI_CK_x / (FS * (OSR + 1) * 256) */
    if (hsai->Init.NoDivider == SAI_MASTERDIVIDER_DISABLE)
 8106b8a:	687b      	ldr	r3, [r7, #4]
 8106b8c:	699b      	ldr	r3, [r3, #24]
 8106b8e:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8106b92:	d139      	bne.n	8106c08 <HAL_SAI_Init+0x2b0>
    {
      /* NODIV = 1 */
      uint32_t tmpframelength;

      if (hsai->Init.Protocol == SAI_SPDIF_PROTOCOL)
 8106b94:	687b      	ldr	r3, [r7, #4]
 8106b96:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8106b98:	2b04      	cmp	r3, #4
 8106b9a:	d102      	bne.n	8106ba2 <HAL_SAI_Init+0x24a>
      {
        /* For SPDIF protocol, frame length is set by hardware to 64 */
        tmpframelength = SAI_SPDIF_FRAME_LENGTH;
 8106b9c:	2340      	movs	r3, #64	; 0x40
 8106b9e:	60fb      	str	r3, [r7, #12]
 8106ba0:	e00a      	b.n	8106bb8 <HAL_SAI_Init+0x260>
      }
      else if (hsai->Init.Protocol == SAI_AC97_PROTOCOL)
 8106ba2:	687b      	ldr	r3, [r7, #4]
 8106ba4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8106ba6:	2b08      	cmp	r3, #8
 8106ba8:	d103      	bne.n	8106bb2 <HAL_SAI_Init+0x25a>
      {
        /* For AC97 protocol, frame length is set by hardware to 256 */
        tmpframelength = SAI_AC97_FRAME_LENGTH;
 8106baa:	f44f 7380 	mov.w	r3, #256	; 0x100
 8106bae:	60fb      	str	r3, [r7, #12]
 8106bb0:	e002      	b.n	8106bb8 <HAL_SAI_Init+0x260>
      }
      else
      {
        /* For free protocol, frame length is set by user */
        tmpframelength = hsai->FrameInit.FrameLength;
 8106bb2:	687b      	ldr	r3, [r7, #4]
 8106bb4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8106bb6:	60fb      	str	r3, [r7, #12]
      }

      /* (freq x 10) to keep Significant digits */
      tmpval = (freq * 10U) / (hsai->Init.AudioFrequency * tmpframelength);
 8106bb8:	697a      	ldr	r2, [r7, #20]
 8106bba:	4613      	mov	r3, r2
 8106bbc:	009b      	lsls	r3, r3, #2
 8106bbe:	4413      	add	r3, r2
 8106bc0:	005b      	lsls	r3, r3, #1
 8106bc2:	4619      	mov	r1, r3
 8106bc4:	687b      	ldr	r3, [r7, #4]
 8106bc6:	6a1b      	ldr	r3, [r3, #32]
 8106bc8:	68fa      	ldr	r2, [r7, #12]
 8106bca:	fb02 f303 	mul.w	r3, r2, r3
 8106bce:	fbb1 f3f3 	udiv	r3, r1, r3
 8106bd2:	613b      	str	r3, [r7, #16]
 8106bd4:	e030      	b.n	8106c38 <HAL_SAI_Init+0x2e0>
 8106bd6:	bf00      	nop
 8106bd8:	40015804 	.word	0x40015804
 8106bdc:	58005404 	.word	0x58005404
 8106be0:	40015824 	.word	0x40015824
 8106be4:	40015800 	.word	0x40015800
 8106be8:	40015c04 	.word	0x40015c04
 8106bec:	40015c24 	.word	0x40015c24
 8106bf0:	40015c00 	.word	0x40015c00
 8106bf4:	40016004 	.word	0x40016004
 8106bf8:	40016024 	.word	0x40016024
 8106bfc:	40016000 	.word	0x40016000
 8106c00:	58005424 	.word	0x58005424
 8106c04:	58005400 	.word	0x58005400
    }
    else
    {
      /* NODIV = 0 */
      uint32_t tmposr;
      tmposr = (hsai->Init.MckOverSampling == SAI_MCK_OVERSAMPLING_ENABLE) ? 2U : 1U;
 8106c08:	687b      	ldr	r3, [r7, #4]
 8106c0a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8106c0c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8106c10:	d101      	bne.n	8106c16 <HAL_SAI_Init+0x2be>
 8106c12:	2302      	movs	r3, #2
 8106c14:	e000      	b.n	8106c18 <HAL_SAI_Init+0x2c0>
 8106c16:	2301      	movs	r3, #1
 8106c18:	60bb      	str	r3, [r7, #8]
      /* (freq x 10) to keep Significant digits */
      tmpval = (freq * 10U) / (hsai->Init.AudioFrequency * tmposr * 256U);
 8106c1a:	697a      	ldr	r2, [r7, #20]
 8106c1c:	4613      	mov	r3, r2
 8106c1e:	009b      	lsls	r3, r3, #2
 8106c20:	4413      	add	r3, r2
 8106c22:	005b      	lsls	r3, r3, #1
 8106c24:	4619      	mov	r1, r3
 8106c26:	687b      	ldr	r3, [r7, #4]
 8106c28:	6a1b      	ldr	r3, [r3, #32]
 8106c2a:	68ba      	ldr	r2, [r7, #8]
 8106c2c:	fb02 f303 	mul.w	r3, r2, r3
 8106c30:	021b      	lsls	r3, r3, #8
 8106c32:	fbb1 f3f3 	udiv	r3, r1, r3
 8106c36:	613b      	str	r3, [r7, #16]
    }
    hsai->Init.Mckdiv = tmpval / 10U;
 8106c38:	693b      	ldr	r3, [r7, #16]
 8106c3a:	4a96      	ldr	r2, [pc, #600]	; (8106e94 <HAL_SAI_Init+0x53c>)
 8106c3c:	fba2 2303 	umull	r2, r3, r2, r3
 8106c40:	08da      	lsrs	r2, r3, #3
 8106c42:	687b      	ldr	r3, [r7, #4]
 8106c44:	625a      	str	r2, [r3, #36]	; 0x24

    /* Round result to the nearest integer */
    if ((tmpval % 10U) > 8U)
 8106c46:	6939      	ldr	r1, [r7, #16]
 8106c48:	4b92      	ldr	r3, [pc, #584]	; (8106e94 <HAL_SAI_Init+0x53c>)
 8106c4a:	fba3 2301 	umull	r2, r3, r3, r1
 8106c4e:	08da      	lsrs	r2, r3, #3
 8106c50:	4613      	mov	r3, r2
 8106c52:	009b      	lsls	r3, r3, #2
 8106c54:	4413      	add	r3, r2
 8106c56:	005b      	lsls	r3, r3, #1
 8106c58:	1aca      	subs	r2, r1, r3
 8106c5a:	2a08      	cmp	r2, #8
 8106c5c:	d904      	bls.n	8106c68 <HAL_SAI_Init+0x310>
    {
      hsai->Init.Mckdiv += 1U;
 8106c5e:	687b      	ldr	r3, [r7, #4]
 8106c60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8106c62:	1c5a      	adds	r2, r3, #1
 8106c64:	687b      	ldr	r3, [r7, #4]
 8106c66:	625a      	str	r2, [r3, #36]	; 0x24
    }

    /* For SPDIF protocol, SAI shall provide a bit clock twice faster the symbol-rate */
    if (hsai->Init.Protocol == SAI_SPDIF_PROTOCOL)
 8106c68:	687b      	ldr	r3, [r7, #4]
 8106c6a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8106c6c:	2b04      	cmp	r3, #4
 8106c6e:	d104      	bne.n	8106c7a <HAL_SAI_Init+0x322>
    {
      hsai->Init.Mckdiv = hsai->Init.Mckdiv >> 1;
 8106c70:	687b      	ldr	r3, [r7, #4]
 8106c72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8106c74:	085a      	lsrs	r2, r3, #1
 8106c76:	687b      	ldr	r3, [r7, #4]
 8106c78:	625a      	str	r2, [r3, #36]	; 0x24

  /* Check the SAI Block master clock divider parameter */
  assert_param(IS_SAI_BLOCK_MASTER_DIVIDER(hsai->Init.Mckdiv));

  /* Compute CKSTR bits of SAI CR1 according ClockStrobing and AudioMode */
  if ((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 8106c7a:	687b      	ldr	r3, [r7, #4]
 8106c7c:	685b      	ldr	r3, [r3, #4]
 8106c7e:	2b00      	cmp	r3, #0
 8106c80:	d003      	beq.n	8106c8a <HAL_SAI_Init+0x332>
 8106c82:	687b      	ldr	r3, [r7, #4]
 8106c84:	685b      	ldr	r3, [r3, #4]
 8106c86:	2b02      	cmp	r3, #2
 8106c88:	d109      	bne.n	8106c9e <HAL_SAI_Init+0x346>
  {
    /* Transmit */
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? 0U : SAI_xCR1_CKSTR;
 8106c8a:	687b      	ldr	r3, [r7, #4]
 8106c8c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8106c8e:	2b01      	cmp	r3, #1
 8106c90:	d101      	bne.n	8106c96 <HAL_SAI_Init+0x33e>
 8106c92:	2300      	movs	r3, #0
 8106c94:	e001      	b.n	8106c9a <HAL_SAI_Init+0x342>
 8106c96:	f44f 7300 	mov.w	r3, #512	; 0x200
 8106c9a:	623b      	str	r3, [r7, #32]
 8106c9c:	e008      	b.n	8106cb0 <HAL_SAI_Init+0x358>
  }
  else
  {
    /* Receive */
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? SAI_xCR1_CKSTR : 0U;
 8106c9e:	687b      	ldr	r3, [r7, #4]
 8106ca0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8106ca2:	2b01      	cmp	r3, #1
 8106ca4:	d102      	bne.n	8106cac <HAL_SAI_Init+0x354>
 8106ca6:	f44f 7300 	mov.w	r3, #512	; 0x200
 8106caa:	e000      	b.n	8106cae <HAL_SAI_Init+0x356>
 8106cac:	2300      	movs	r3, #0
 8106cae:	623b      	str	r3, [r7, #32]

  /* SAI Block Configuration -------------------------------------------------*/
  /* SAI CR1 Configuration */
#if defined(SAI_VER_V2_X) /* SAI Peripheral version depends on STM32H7 device revision ID */

  if (HAL_GetREVID() >= REV_ID_B) /* STM32H7xx Rev.B and above */
 8106cb0:	f7fa ffc4 	bl	8101c3c <HAL_GetREVID>
 8106cb4:	4603      	mov	r3, r0
 8106cb6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8106cba:	d331      	bcc.n	8106d20 <HAL_SAI_Init+0x3c8>
  {
    hsai->Instance->CR1 &= ~(SAI_xCR1_MODE | SAI_xCR1_PRTCFG |  SAI_xCR1_DS |      \
 8106cbc:	687b      	ldr	r3, [r7, #4]
 8106cbe:	681b      	ldr	r3, [r3, #0]
 8106cc0:	6819      	ldr	r1, [r3, #0]
 8106cc2:	687b      	ldr	r3, [r7, #4]
 8106cc4:	681a      	ldr	r2, [r3, #0]
 8106cc6:	4b74      	ldr	r3, [pc, #464]	; (8106e98 <HAL_SAI_Init+0x540>)
 8106cc8:	400b      	ands	r3, r1
 8106cca:	6013      	str	r3, [r2, #0]
                             SAI_xCR1_LSBFIRST | SAI_xCR1_CKSTR | SAI_xCR1_SYNCEN | \
                             SAI_xCR1_MONO | SAI_xCR1_OUTDRIV  | SAI_xCR1_DMAEN |  \
                             SAI_xCR1_NODIV | SAI_xCR1_MCKDIV | SAI_xCR1_OSR |     \
                             SAI_xCR1_MCKEN);

    hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 8106ccc:	687b      	ldr	r3, [r7, #4]
 8106cce:	681b      	ldr	r3, [r3, #0]
 8106cd0:	6819      	ldr	r1, [r3, #0]
 8106cd2:	687b      	ldr	r3, [r7, #4]
 8106cd4:	685a      	ldr	r2, [r3, #4]
 8106cd6:	687b      	ldr	r3, [r7, #4]
 8106cd8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8106cda:	431a      	orrs	r2, r3
                            hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 8106cdc:	687b      	ldr	r3, [r7, #4]
 8106cde:	6c9b      	ldr	r3, [r3, #72]	; 0x48
    hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 8106ce0:	431a      	orrs	r2, r3
                            hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 8106ce2:	687b      	ldr	r3, [r7, #4]
 8106ce4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8106ce6:	431a      	orrs	r2, r3
 8106ce8:	6a3b      	ldr	r3, [r7, #32]
 8106cea:	431a      	orrs	r2, r3
                            ckstr_bits | syncen_bits |                             \
 8106cec:	69fb      	ldr	r3, [r7, #28]
 8106cee:	431a      	orrs	r2, r3
                            hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 8106cf0:	687b      	ldr	r3, [r7, #4]
 8106cf2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
                            ckstr_bits | syncen_bits |                             \
 8106cf4:	431a      	orrs	r2, r3
                            hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 8106cf6:	687b      	ldr	r3, [r7, #4]
 8106cf8:	695b      	ldr	r3, [r3, #20]
 8106cfa:	431a      	orrs	r2, r3
                            hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
 8106cfc:	687b      	ldr	r3, [r7, #4]
 8106cfe:	699b      	ldr	r3, [r3, #24]
                            hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 8106d00:	431a      	orrs	r2, r3
                            hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
 8106d02:	687b      	ldr	r3, [r7, #4]
 8106d04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8106d06:	051b      	lsls	r3, r3, #20
 8106d08:	431a      	orrs	r2, r3
                            hsai->Init.MckOverSampling | hsai->Init.MckOutput);
 8106d0a:	687b      	ldr	r3, [r7, #4]
 8106d0c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
                            hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
 8106d0e:	431a      	orrs	r2, r3
                            hsai->Init.MckOverSampling | hsai->Init.MckOutput);
 8106d10:	687b      	ldr	r3, [r7, #4]
 8106d12:	691b      	ldr	r3, [r3, #16]
 8106d14:	431a      	orrs	r2, r3
    hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 8106d16:	687b      	ldr	r3, [r7, #4]
 8106d18:	681b      	ldr	r3, [r3, #0]
 8106d1a:	430a      	orrs	r2, r1
 8106d1c:	601a      	str	r2, [r3, #0]
 8106d1e:	e02d      	b.n	8106d7c <HAL_SAI_Init+0x424>
  }
  else /* STM32H7xx Rev.Y */
  {
    hsai->Instance->CR1 &= ~(SAI_xCR1_MODE | SAI_xCR1_PRTCFG |  SAI_xCR1_DS |      \
 8106d20:	687b      	ldr	r3, [r7, #4]
 8106d22:	681b      	ldr	r3, [r3, #0]
 8106d24:	6819      	ldr	r1, [r3, #0]
 8106d26:	687b      	ldr	r3, [r7, #4]
 8106d28:	681a      	ldr	r2, [r3, #0]
 8106d2a:	4b5c      	ldr	r3, [pc, #368]	; (8106e9c <HAL_SAI_Init+0x544>)
 8106d2c:	400b      	ands	r3, r1
 8106d2e:	6013      	str	r3, [r2, #0]
                             SAI_xCR1_LSBFIRST | SAI_xCR1_CKSTR | SAI_xCR1_SYNCEN | \
                             SAI_xCR1_MONO | SAI_xCR1_OUTDRIV  | SAI_xCR1_DMAEN |  \
                             SAI_xCR1_NODIV | SAI_xCR1_MCKDIV | SAI_xCR1_OSR);

    hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 8106d30:	687b      	ldr	r3, [r7, #4]
 8106d32:	681b      	ldr	r3, [r3, #0]
 8106d34:	6819      	ldr	r1, [r3, #0]
 8106d36:	687b      	ldr	r3, [r7, #4]
 8106d38:	685a      	ldr	r2, [r3, #4]
 8106d3a:	687b      	ldr	r3, [r7, #4]
 8106d3c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8106d3e:	431a      	orrs	r2, r3
                            hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 8106d40:	687b      	ldr	r3, [r7, #4]
 8106d42:	6c9b      	ldr	r3, [r3, #72]	; 0x48
    hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 8106d44:	431a      	orrs	r2, r3
                            hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 8106d46:	687b      	ldr	r3, [r7, #4]
 8106d48:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8106d4a:	431a      	orrs	r2, r3
 8106d4c:	6a3b      	ldr	r3, [r7, #32]
 8106d4e:	431a      	orrs	r2, r3
                            ckstr_bits | syncen_bits |                             \
 8106d50:	69fb      	ldr	r3, [r7, #28]
 8106d52:	431a      	orrs	r2, r3
                            hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 8106d54:	687b      	ldr	r3, [r7, #4]
 8106d56:	6adb      	ldr	r3, [r3, #44]	; 0x2c
                            ckstr_bits | syncen_bits |                             \
 8106d58:	431a      	orrs	r2, r3
                            hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 8106d5a:	687b      	ldr	r3, [r7, #4]
 8106d5c:	695b      	ldr	r3, [r3, #20]
 8106d5e:	431a      	orrs	r2, r3
                            hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
 8106d60:	687b      	ldr	r3, [r7, #4]
 8106d62:	699b      	ldr	r3, [r3, #24]
                            hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 8106d64:	431a      	orrs	r2, r3
                            hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
 8106d66:	687b      	ldr	r3, [r7, #4]
 8106d68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8106d6a:	051b      	lsls	r3, r3, #20
 8106d6c:	431a      	orrs	r2, r3
                            hsai->Init.MckOverSampling);
 8106d6e:	687b      	ldr	r3, [r7, #4]
 8106d70:	6a9b      	ldr	r3, [r3, #40]	; 0x28
                            hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
 8106d72:	431a      	orrs	r2, r3
    hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 8106d74:	687b      	ldr	r3, [r7, #4]
 8106d76:	681b      	ldr	r3, [r3, #0]
 8106d78:	430a      	orrs	r2, r1
 8106d7a:	601a      	str	r2, [r3, #0]
                          hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
                          hsai->Init.MckOverSampling | hsai->Init.MckOutput);
#endif /* SAI_VER_V2_X */

  /* SAI CR2 Configuration */
  hsai->Instance->CR2 &= ~(SAI_xCR2_FTH | SAI_xCR2_FFLUSH | SAI_xCR2_COMP | SAI_xCR2_CPL);
 8106d7c:	687b      	ldr	r3, [r7, #4]
 8106d7e:	681b      	ldr	r3, [r3, #0]
 8106d80:	685b      	ldr	r3, [r3, #4]
 8106d82:	687a      	ldr	r2, [r7, #4]
 8106d84:	6812      	ldr	r2, [r2, #0]
 8106d86:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 8106d8a:	f023 030f 	bic.w	r3, r3, #15
 8106d8e:	6053      	str	r3, [r2, #4]
  hsai->Instance->CR2 |= (hsai->Init.FIFOThreshold | hsai->Init.CompandingMode | hsai->Init.TriState);
 8106d90:	687b      	ldr	r3, [r7, #4]
 8106d92:	681b      	ldr	r3, [r3, #0]
 8106d94:	6859      	ldr	r1, [r3, #4]
 8106d96:	687b      	ldr	r3, [r7, #4]
 8106d98:	69da      	ldr	r2, [r3, #28]
 8106d9a:	687b      	ldr	r3, [r7, #4]
 8106d9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8106d9e:	431a      	orrs	r2, r3
 8106da0:	687b      	ldr	r3, [r7, #4]
 8106da2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8106da4:	431a      	orrs	r2, r3
 8106da6:	687b      	ldr	r3, [r7, #4]
 8106da8:	681b      	ldr	r3, [r3, #0]
 8106daa:	430a      	orrs	r2, r1
 8106dac:	605a      	str	r2, [r3, #4]

  /* SAI Frame Configuration -----------------------------------------*/
  hsai->Instance->FRCR &= (~(SAI_xFRCR_FRL | SAI_xFRCR_FSALL | SAI_xFRCR_FSDEF | \
 8106dae:	687b      	ldr	r3, [r7, #4]
 8106db0:	681b      	ldr	r3, [r3, #0]
 8106db2:	6899      	ldr	r1, [r3, #8]
 8106db4:	687b      	ldr	r3, [r7, #4]
 8106db6:	681a      	ldr	r2, [r3, #0]
 8106db8:	4b39      	ldr	r3, [pc, #228]	; (8106ea0 <HAL_SAI_Init+0x548>)
 8106dba:	400b      	ands	r3, r1
 8106dbc:	6093      	str	r3, [r2, #8]
                             SAI_xFRCR_FSPOL | SAI_xFRCR_FSOFF));
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1U) |
 8106dbe:	687b      	ldr	r3, [r7, #4]
 8106dc0:	681b      	ldr	r3, [r3, #0]
 8106dc2:	6899      	ldr	r1, [r3, #8]
 8106dc4:	687b      	ldr	r3, [r7, #4]
 8106dc6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8106dc8:	1e5a      	subs	r2, r3, #1
                           hsai->FrameInit.FSOffset |
 8106dca:	687b      	ldr	r3, [r7, #4]
 8106dcc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1U) |
 8106dce:	431a      	orrs	r2, r3
                           hsai->FrameInit.FSDefinition |
 8106dd0:	687b      	ldr	r3, [r7, #4]
 8106dd2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
                           hsai->FrameInit.FSOffset |
 8106dd4:	431a      	orrs	r2, r3
                           hsai->FrameInit.FSPolarity   |
 8106dd6:	687b      	ldr	r3, [r7, #4]
 8106dd8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
                           hsai->FrameInit.FSDefinition |
 8106dda:	431a      	orrs	r2, r3
                           ((hsai->FrameInit.ActiveFrameLength - 1U) << 8));
 8106ddc:	687b      	ldr	r3, [r7, #4]
 8106dde:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8106de0:	3b01      	subs	r3, #1
 8106de2:	021b      	lsls	r3, r3, #8
                           hsai->FrameInit.FSPolarity   |
 8106de4:	431a      	orrs	r2, r3
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1U) |
 8106de6:	687b      	ldr	r3, [r7, #4]
 8106de8:	681b      	ldr	r3, [r3, #0]
 8106dea:	430a      	orrs	r2, r1
 8106dec:	609a      	str	r2, [r3, #8]

  /* SAI Block_x SLOT Configuration ------------------------------------------*/
  /* This register has no meaning in AC 97 and SPDIF audio protocol */
  hsai->Instance->SLOTR &= (~(SAI_xSLOTR_FBOFF | SAI_xSLOTR_SLOTSZ |  \
 8106dee:	687b      	ldr	r3, [r7, #4]
 8106df0:	681b      	ldr	r3, [r3, #0]
 8106df2:	68d9      	ldr	r1, [r3, #12]
 8106df4:	687b      	ldr	r3, [r7, #4]
 8106df6:	681a      	ldr	r2, [r3, #0]
 8106df8:	f24f 0320 	movw	r3, #61472	; 0xf020
 8106dfc:	400b      	ands	r3, r1
 8106dfe:	60d3      	str	r3, [r2, #12]
                              SAI_xSLOTR_NBSLOT | SAI_xSLOTR_SLOTEN));

  hsai->Instance->SLOTR |= hsai->SlotInit.FirstBitOffset | hsai->SlotInit.SlotSize | \
 8106e00:	687b      	ldr	r3, [r7, #4]
 8106e02:	681b      	ldr	r3, [r3, #0]
 8106e04:	68d9      	ldr	r1, [r3, #12]
 8106e06:	687b      	ldr	r3, [r7, #4]
 8106e08:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8106e0a:	687b      	ldr	r3, [r7, #4]
 8106e0c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8106e0e:	431a      	orrs	r2, r3
                           (hsai->SlotInit.SlotActive << 16) | ((hsai->SlotInit.SlotNumber - 1U) <<  8);
 8106e10:	687b      	ldr	r3, [r7, #4]
 8106e12:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8106e14:	041b      	lsls	r3, r3, #16
  hsai->Instance->SLOTR |= hsai->SlotInit.FirstBitOffset | hsai->SlotInit.SlotSize | \
 8106e16:	431a      	orrs	r2, r3
                           (hsai->SlotInit.SlotActive << 16) | ((hsai->SlotInit.SlotNumber - 1U) <<  8);
 8106e18:	687b      	ldr	r3, [r7, #4]
 8106e1a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8106e1c:	3b01      	subs	r3, #1
 8106e1e:	021b      	lsls	r3, r3, #8
 8106e20:	431a      	orrs	r2, r3
  hsai->Instance->SLOTR |= hsai->SlotInit.FirstBitOffset | hsai->SlotInit.SlotSize | \
 8106e22:	687b      	ldr	r3, [r7, #4]
 8106e24:	681b      	ldr	r3, [r3, #0]
 8106e26:	430a      	orrs	r2, r1
 8106e28:	60da      	str	r2, [r3, #12]

  /* SAI PDM Configuration ---------------------------------------------------*/
#if defined(SAI4)
  if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI4_Block_A))
 8106e2a:	687b      	ldr	r3, [r7, #4]
 8106e2c:	681b      	ldr	r3, [r3, #0]
 8106e2e:	4a1d      	ldr	r2, [pc, #116]	; (8106ea4 <HAL_SAI_Init+0x54c>)
 8106e30:	4293      	cmp	r3, r2
 8106e32:	d004      	beq.n	8106e3e <HAL_SAI_Init+0x4e6>
 8106e34:	687b      	ldr	r3, [r7, #4]
 8106e36:	681b      	ldr	r3, [r3, #0]
 8106e38:	4a1b      	ldr	r2, [pc, #108]	; (8106ea8 <HAL_SAI_Init+0x550>)
 8106e3a:	4293      	cmp	r3, r2
 8106e3c:	d119      	bne.n	8106e72 <HAL_SAI_Init+0x51a>
#else
  if (hsai->Instance == SAI1_Block_A)
#endif /* SAI4 */
  {
    /* Disable PDM interface */
    SaiBaseAddress->PDMCR &= ~(SAI_PDMCR_PDMEN);
 8106e3e:	69bb      	ldr	r3, [r7, #24]
 8106e40:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8106e42:	f023 0201 	bic.w	r2, r3, #1
 8106e46:	69bb      	ldr	r3, [r7, #24]
 8106e48:	645a      	str	r2, [r3, #68]	; 0x44
    if (hsai->Init.PdmInit.Activation == ENABLE)
 8106e4a:	687b      	ldr	r3, [r7, #4]
 8106e4c:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8106e50:	2b01      	cmp	r3, #1
 8106e52:	d10e      	bne.n	8106e72 <HAL_SAI_Init+0x51a>
    {
      /* Configure and enable PDM interface */
      SaiBaseAddress->PDMCR = (hsai->Init.PdmInit.ClockEnable |
 8106e54:	687b      	ldr	r3, [r7, #4]
 8106e56:	6c1a      	ldr	r2, [r3, #64]	; 0x40
                               ((hsai->Init.PdmInit.MicPairsNbr - 1U) << SAI_PDMCR_MICNBR_Pos));
 8106e58:	687b      	ldr	r3, [r7, #4]
 8106e5a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8106e5c:	3b01      	subs	r3, #1
 8106e5e:	011b      	lsls	r3, r3, #4
      SaiBaseAddress->PDMCR = (hsai->Init.PdmInit.ClockEnable |
 8106e60:	431a      	orrs	r2, r3
 8106e62:	69bb      	ldr	r3, [r7, #24]
 8106e64:	645a      	str	r2, [r3, #68]	; 0x44
      SaiBaseAddress->PDMCR |= SAI_PDMCR_PDMEN;
 8106e66:	69bb      	ldr	r3, [r7, #24]
 8106e68:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8106e6a:	f043 0201 	orr.w	r2, r3, #1
 8106e6e:	69bb      	ldr	r3, [r7, #24]
 8106e70:	645a      	str	r2, [r3, #68]	; 0x44
    }
  }

  /* Initialize the error code */
  hsai->ErrorCode = HAL_SAI_ERROR_NONE;
 8106e72:	687b      	ldr	r3, [r7, #4]
 8106e74:	2200      	movs	r2, #0
 8106e76:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94

  /* Initialize the SAI state */
  hsai->State = HAL_SAI_STATE_READY;
 8106e7a:	687b      	ldr	r3, [r7, #4]
 8106e7c:	2201      	movs	r2, #1
 8106e7e:	f883 2091 	strb.w	r2, [r3, #145]	; 0x91

  /* Release Lock */
  __HAL_UNLOCK(hsai);
 8106e82:	687b      	ldr	r3, [r7, #4]
 8106e84:	2200      	movs	r2, #0
 8106e86:	f883 2090 	strb.w	r2, [r3, #144]	; 0x90

  return HAL_OK;
 8106e8a:	2300      	movs	r3, #0
}
 8106e8c:	4618      	mov	r0, r3
 8106e8e:	3728      	adds	r7, #40	; 0x28
 8106e90:	46bd      	mov	sp, r7
 8106e92:	bd80      	pop	{r7, pc}
 8106e94:	cccccccd 	.word	0xcccccccd
 8106e98:	f005c010 	.word	0xf005c010
 8106e9c:	f805c010 	.word	0xf805c010
 8106ea0:	fff88000 	.word	0xfff88000
 8106ea4:	40015804 	.word	0x40015804
 8106ea8:	58005404 	.word	0x58005404

08106eac <SAI_Disable>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *              the configuration information for SAI module.
  * @retval None
  */
static HAL_StatusTypeDef SAI_Disable(SAI_HandleTypeDef *hsai)
{
 8106eac:	b480      	push	{r7}
 8106eae:	b085      	sub	sp, #20
 8106eb0:	af00      	add	r7, sp, #0
 8106eb2:	6078      	str	r0, [r7, #4]
  uint32_t count = SAI_DEFAULT_TIMEOUT * (SystemCoreClock / 7U / 1000U);
 8106eb4:	4b18      	ldr	r3, [pc, #96]	; (8106f18 <SAI_Disable+0x6c>)
 8106eb6:	681b      	ldr	r3, [r3, #0]
 8106eb8:	4a18      	ldr	r2, [pc, #96]	; (8106f1c <SAI_Disable+0x70>)
 8106eba:	fba2 2303 	umull	r2, r3, r2, r3
 8106ebe:	0b1b      	lsrs	r3, r3, #12
 8106ec0:	009b      	lsls	r3, r3, #2
 8106ec2:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef status = HAL_OK;
 8106ec4:	2300      	movs	r3, #0
 8106ec6:	72fb      	strb	r3, [r7, #11]

  /* Disable the SAI instance */
  __HAL_SAI_DISABLE(hsai);
 8106ec8:	687b      	ldr	r3, [r7, #4]
 8106eca:	681b      	ldr	r3, [r3, #0]
 8106ecc:	681a      	ldr	r2, [r3, #0]
 8106ece:	687b      	ldr	r3, [r7, #4]
 8106ed0:	681b      	ldr	r3, [r3, #0]
 8106ed2:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8106ed6:	601a      	str	r2, [r3, #0]

  do
  {
    /* Check for the Timeout */
    if (count == 0U)
 8106ed8:	68fb      	ldr	r3, [r7, #12]
 8106eda:	2b00      	cmp	r3, #0
 8106edc:	d10a      	bne.n	8106ef4 <SAI_Disable+0x48>
    {
      /* Update error code */
      hsai->ErrorCode |= HAL_SAI_ERROR_TIMEOUT;
 8106ede:	687b      	ldr	r3, [r7, #4]
 8106ee0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8106ee4:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8106ee8:	687b      	ldr	r3, [r7, #4]
 8106eea:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
      status = HAL_TIMEOUT;
 8106eee:	2303      	movs	r3, #3
 8106ef0:	72fb      	strb	r3, [r7, #11]
      break;
 8106ef2:	e009      	b.n	8106f08 <SAI_Disable+0x5c>
    }
    count--;
 8106ef4:	68fb      	ldr	r3, [r7, #12]
 8106ef6:	3b01      	subs	r3, #1
 8106ef8:	60fb      	str	r3, [r7, #12]
  }
  while ((hsai->Instance->CR1 & SAI_xCR1_SAIEN) != 0U);
 8106efa:	687b      	ldr	r3, [r7, #4]
 8106efc:	681b      	ldr	r3, [r3, #0]
 8106efe:	681b      	ldr	r3, [r3, #0]
 8106f00:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8106f04:	2b00      	cmp	r3, #0
 8106f06:	d1e7      	bne.n	8106ed8 <SAI_Disable+0x2c>

  return status;
 8106f08:	7afb      	ldrb	r3, [r7, #11]
}
 8106f0a:	4618      	mov	r0, r3
 8106f0c:	3714      	adds	r7, #20
 8106f0e:	46bd      	mov	sp, r7
 8106f10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8106f14:	4770      	bx	lr
 8106f16:	bf00      	nop
 8106f18:	10000000 	.word	0x10000000
 8106f1c:	95cbec1b 	.word	0x95cbec1b

08106f20 <HAL_SPDIFRX_Init>:
  *        in the SPDIFRX_InitTypeDef and create the associated handle.
  * @param hspdif SPDIFRX handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPDIFRX_Init(SPDIFRX_HandleTypeDef *hspdif)
{
 8106f20:	b580      	push	{r7, lr}
 8106f22:	b084      	sub	sp, #16
 8106f24:	af00      	add	r7, sp, #0
 8106f26:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  /* Check the SPDIFRX handle allocation */
  if (hspdif == NULL)
 8106f28:	687b      	ldr	r3, [r7, #4]
 8106f2a:	2b00      	cmp	r3, #0
 8106f2c:	d101      	bne.n	8106f32 <HAL_SPDIFRX_Init+0x12>
  {
    return HAL_ERROR;
 8106f2e:	2301      	movs	r3, #1
 8106f30:	e05e      	b.n	8106ff0 <HAL_SPDIFRX_Init+0xd0>

    /* Init the low level hardware */
    hspdif->MspInitCallback(hspdif);
  }
#else
  if (hspdif->State == HAL_SPDIFRX_STATE_RESET)
 8106f32:	687b      	ldr	r3, [r7, #4]
 8106f34:	f893 3049 	ldrb.w	r3, [r3, #73]	; 0x49
 8106f38:	b2db      	uxtb	r3, r3
 8106f3a:	2b00      	cmp	r3, #0
 8106f3c:	d106      	bne.n	8106f4c <HAL_SPDIFRX_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hspdif->Lock = HAL_UNLOCKED;
 8106f3e:	687b      	ldr	r3, [r7, #4]
 8106f40:	2200      	movs	r2, #0
 8106f42:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SPDIFRX_MspInit(hspdif);
 8106f46:	6878      	ldr	r0, [r7, #4]
 8106f48:	f7fa fa92 	bl	8101470 <HAL_SPDIFRX_MspInit>
  }
#endif /* USE_HAL_SPDIFRX_REGISTER_CALLBACKS */

  /* SPDIFRX peripheral state is BUSY */
  hspdif->State = HAL_SPDIFRX_STATE_BUSY;
 8106f4c:	687b      	ldr	r3, [r7, #4]
 8106f4e:	2202      	movs	r2, #2
 8106f50:	f883 2049 	strb.w	r2, [r3, #73]	; 0x49

  /* Disable SPDIFRX interface (IDLE State) */
  __HAL_SPDIFRX_IDLE(hspdif);
 8106f54:	687b      	ldr	r3, [r7, #4]
 8106f56:	681b      	ldr	r3, [r3, #0]
 8106f58:	681a      	ldr	r2, [r3, #0]
 8106f5a:	687b      	ldr	r3, [r7, #4]
 8106f5c:	681b      	ldr	r3, [r3, #0]
 8106f5e:	f022 0203 	bic.w	r2, r2, #3
 8106f62:	601a      	str	r2, [r3, #0]

  /* Reset the old SPDIFRX CR configuration */
  tmpreg = hspdif->Instance->CR;
 8106f64:	687b      	ldr	r3, [r7, #4]
 8106f66:	681b      	ldr	r3, [r3, #0]
 8106f68:	681b      	ldr	r3, [r3, #0]
 8106f6a:	60fb      	str	r3, [r7, #12]

  tmpreg &= ~(SPDIFRX_CR_RXSTEO  | SPDIFRX_CR_DRFMT  | SPDIFRX_CR_PMSK |
 8106f6c:	68fa      	ldr	r2, [r7, #12]
 8106f6e:	4b22      	ldr	r3, [pc, #136]	; (8106ff8 <HAL_SPDIFRX_Init+0xd8>)
 8106f70:	4013      	ands	r3, r2
 8106f72:	60fb      	str	r3, [r7, #12]
              SPDIFRX_CR_CHSEL | SPDIFRX_CR_NBTR | SPDIFRX_CR_WFA |
              SPDIFRX_CR_CKSEN | SPDIFRX_CR_CKSBKPEN |
              SPDIFRX_CR_INSEL);

  /* Sets the new configuration of the SPDIFRX peripheral */
  tmpreg |= (hspdif->Init.StereoMode |
 8106f74:	687b      	ldr	r3, [r7, #4]
 8106f76:	699a      	ldr	r2, [r3, #24]
             hspdif->Init.InputSelection |
 8106f78:	687b      	ldr	r3, [r7, #4]
 8106f7a:	685b      	ldr	r3, [r3, #4]
  tmpreg |= (hspdif->Init.StereoMode |
 8106f7c:	431a      	orrs	r2, r3
             hspdif->Init.Retries |
 8106f7e:	687b      	ldr	r3, [r7, #4]
 8106f80:	689b      	ldr	r3, [r3, #8]
             hspdif->Init.InputSelection |
 8106f82:	431a      	orrs	r2, r3
             hspdif->Init.WaitForActivity |
 8106f84:	687b      	ldr	r3, [r7, #4]
 8106f86:	68db      	ldr	r3, [r3, #12]
             hspdif->Init.Retries |
 8106f88:	431a      	orrs	r2, r3
             hspdif->Init.ChannelSelection |
 8106f8a:	687b      	ldr	r3, [r7, #4]
 8106f8c:	691b      	ldr	r3, [r3, #16]
             hspdif->Init.WaitForActivity |
 8106f8e:	431a      	orrs	r2, r3
             hspdif->Init.DataFormat |
 8106f90:	687b      	ldr	r3, [r7, #4]
 8106f92:	695b      	ldr	r3, [r3, #20]
             hspdif->Init.ChannelSelection |
 8106f94:	431a      	orrs	r2, r3
             hspdif->Init.PreambleTypeMask |
 8106f96:	687b      	ldr	r3, [r7, #4]
 8106f98:	69db      	ldr	r3, [r3, #28]
             hspdif->Init.DataFormat |
 8106f9a:	431a      	orrs	r2, r3
             hspdif->Init.ChannelStatusMask |
 8106f9c:	687b      	ldr	r3, [r7, #4]
 8106f9e:	6a1b      	ldr	r3, [r3, #32]
             hspdif->Init.PreambleTypeMask |
 8106fa0:	431a      	orrs	r2, r3
             hspdif->Init.ValidityBitMask |
 8106fa2:	687b      	ldr	r3, [r7, #4]
 8106fa4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
             hspdif->Init.ChannelStatusMask |
 8106fa6:	431a      	orrs	r2, r3
             hspdif->Init.ParityErrorMask
 8106fa8:	687b      	ldr	r3, [r7, #4]
 8106faa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
             hspdif->Init.ValidityBitMask |
 8106fac:	4313      	orrs	r3, r2
  tmpreg |= (hspdif->Init.StereoMode |
 8106fae:	68fa      	ldr	r2, [r7, #12]
 8106fb0:	4313      	orrs	r3, r2
 8106fb2:	60fb      	str	r3, [r7, #12]
            );

  if (hspdif->Init.SymbolClockGen == ENABLE)
 8106fb4:	687b      	ldr	r3, [r7, #4]
 8106fb6:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8106fba:	2b01      	cmp	r3, #1
 8106fbc:	d103      	bne.n	8106fc6 <HAL_SPDIFRX_Init+0xa6>
  {
    tmpreg |= SPDIFRX_CR_CKSEN;
 8106fbe:	68fb      	ldr	r3, [r7, #12]
 8106fc0:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8106fc4:	60fb      	str	r3, [r7, #12]
  }

  if (hspdif->Init.BackupSymbolClockGen == ENABLE)
 8106fc6:	687b      	ldr	r3, [r7, #4]
 8106fc8:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8106fcc:	2b01      	cmp	r3, #1
 8106fce:	d103      	bne.n	8106fd8 <HAL_SPDIFRX_Init+0xb8>
  {
    tmpreg |= SPDIFRX_CR_CKSBKPEN;
 8106fd0:	68fb      	ldr	r3, [r7, #12]
 8106fd2:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8106fd6:	60fb      	str	r3, [r7, #12]
  }

  hspdif->Instance->CR = tmpreg;
 8106fd8:	687b      	ldr	r3, [r7, #4]
 8106fda:	681b      	ldr	r3, [r3, #0]
 8106fdc:	68fa      	ldr	r2, [r7, #12]
 8106fde:	601a      	str	r2, [r3, #0]

  hspdif->ErrorCode = HAL_SPDIFRX_ERROR_NONE;
 8106fe0:	687b      	ldr	r3, [r7, #4]
 8106fe2:	2200      	movs	r2, #0
 8106fe4:	64da      	str	r2, [r3, #76]	; 0x4c

  /* SPDIFRX peripheral state is READY*/
  hspdif->State = HAL_SPDIFRX_STATE_READY;
 8106fe6:	687b      	ldr	r3, [r7, #4]
 8106fe8:	2201      	movs	r2, #1
 8106fea:	f883 2049 	strb.w	r2, [r3, #73]	; 0x49

  return HAL_OK;
 8106fee:	2300      	movs	r3, #0
}
 8106ff0:	4618      	mov	r0, r3
 8106ff2:	3710      	adds	r7, #16
 8106ff4:	46bd      	mov	sp, r7
 8106ff6:	bd80      	pop	{r7, pc}
 8106ff8:	ffc88407 	.word	0xffc88407

08106ffc <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8106ffc:	b580      	push	{r7, lr}
 8106ffe:	b082      	sub	sp, #8
 8107000:	af00      	add	r7, sp, #0
 8107002:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8107004:	687b      	ldr	r3, [r7, #4]
 8107006:	2b00      	cmp	r3, #0
 8107008:	d101      	bne.n	810700e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 810700a:	2301      	movs	r3, #1
 810700c:	e049      	b.n	81070a2 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 810700e:	687b      	ldr	r3, [r7, #4]
 8107010:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8107014:	b2db      	uxtb	r3, r3
 8107016:	2b00      	cmp	r3, #0
 8107018:	d106      	bne.n	8107028 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 810701a:	687b      	ldr	r3, [r7, #4]
 810701c:	2200      	movs	r2, #0
 810701e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8107022:	6878      	ldr	r0, [r7, #4]
 8107024:	f7fa faac 	bl	8101580 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8107028:	687b      	ldr	r3, [r7, #4]
 810702a:	2202      	movs	r2, #2
 810702c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8107030:	687b      	ldr	r3, [r7, #4]
 8107032:	681a      	ldr	r2, [r3, #0]
 8107034:	687b      	ldr	r3, [r7, #4]
 8107036:	3304      	adds	r3, #4
 8107038:	4619      	mov	r1, r3
 810703a:	4610      	mov	r0, r2
 810703c:	f000 fa04 	bl	8107448 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8107040:	687b      	ldr	r3, [r7, #4]
 8107042:	2201      	movs	r2, #1
 8107044:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8107048:	687b      	ldr	r3, [r7, #4]
 810704a:	2201      	movs	r2, #1
 810704c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8107050:	687b      	ldr	r3, [r7, #4]
 8107052:	2201      	movs	r2, #1
 8107054:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8107058:	687b      	ldr	r3, [r7, #4]
 810705a:	2201      	movs	r2, #1
 810705c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8107060:	687b      	ldr	r3, [r7, #4]
 8107062:	2201      	movs	r2, #1
 8107064:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8107068:	687b      	ldr	r3, [r7, #4]
 810706a:	2201      	movs	r2, #1
 810706c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8107070:	687b      	ldr	r3, [r7, #4]
 8107072:	2201      	movs	r2, #1
 8107074:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8107078:	687b      	ldr	r3, [r7, #4]
 810707a:	2201      	movs	r2, #1
 810707c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8107080:	687b      	ldr	r3, [r7, #4]
 8107082:	2201      	movs	r2, #1
 8107084:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8107088:	687b      	ldr	r3, [r7, #4]
 810708a:	2201      	movs	r2, #1
 810708c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8107090:	687b      	ldr	r3, [r7, #4]
 8107092:	2201      	movs	r2, #1
 8107094:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8107098:	687b      	ldr	r3, [r7, #4]
 810709a:	2201      	movs	r2, #1
 810709c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 81070a0:	2300      	movs	r3, #0
}
 81070a2:	4618      	mov	r0, r3
 81070a4:	3708      	adds	r7, #8
 81070a6:	46bd      	mov	sp, r7
 81070a8:	bd80      	pop	{r7, pc}

081070aa <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 81070aa:	b580      	push	{r7, lr}
 81070ac:	b082      	sub	sp, #8
 81070ae:	af00      	add	r7, sp, #0
 81070b0:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 81070b2:	687b      	ldr	r3, [r7, #4]
 81070b4:	2b00      	cmp	r3, #0
 81070b6:	d101      	bne.n	81070bc <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 81070b8:	2301      	movs	r3, #1
 81070ba:	e049      	b.n	8107150 <HAL_TIM_OC_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 81070bc:	687b      	ldr	r3, [r7, #4]
 81070be:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 81070c2:	b2db      	uxtb	r3, r3
 81070c4:	2b00      	cmp	r3, #0
 81070c6:	d106      	bne.n	81070d6 <HAL_TIM_OC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 81070c8:	687b      	ldr	r3, [r7, #4]
 81070ca:	2200      	movs	r2, #0
 81070cc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OC_MspInit(htim);
 81070d0:	6878      	ldr	r0, [r7, #4]
 81070d2:	f7fa fa33 	bl	810153c <HAL_TIM_OC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 81070d6:	687b      	ldr	r3, [r7, #4]
 81070d8:	2202      	movs	r2, #2
 81070da:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 81070de:	687b      	ldr	r3, [r7, #4]
 81070e0:	681a      	ldr	r2, [r3, #0]
 81070e2:	687b      	ldr	r3, [r7, #4]
 81070e4:	3304      	adds	r3, #4
 81070e6:	4619      	mov	r1, r3
 81070e8:	4610      	mov	r0, r2
 81070ea:	f000 f9ad 	bl	8107448 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 81070ee:	687b      	ldr	r3, [r7, #4]
 81070f0:	2201      	movs	r2, #1
 81070f2:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 81070f6:	687b      	ldr	r3, [r7, #4]
 81070f8:	2201      	movs	r2, #1
 81070fa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 81070fe:	687b      	ldr	r3, [r7, #4]
 8107100:	2201      	movs	r2, #1
 8107102:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8107106:	687b      	ldr	r3, [r7, #4]
 8107108:	2201      	movs	r2, #1
 810710a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 810710e:	687b      	ldr	r3, [r7, #4]
 8107110:	2201      	movs	r2, #1
 8107112:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8107116:	687b      	ldr	r3, [r7, #4]
 8107118:	2201      	movs	r2, #1
 810711a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 810711e:	687b      	ldr	r3, [r7, #4]
 8107120:	2201      	movs	r2, #1
 8107122:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8107126:	687b      	ldr	r3, [r7, #4]
 8107128:	2201      	movs	r2, #1
 810712a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 810712e:	687b      	ldr	r3, [r7, #4]
 8107130:	2201      	movs	r2, #1
 8107132:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8107136:	687b      	ldr	r3, [r7, #4]
 8107138:	2201      	movs	r2, #1
 810713a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 810713e:	687b      	ldr	r3, [r7, #4]
 8107140:	2201      	movs	r2, #1
 8107142:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8107146:	687b      	ldr	r3, [r7, #4]
 8107148:	2201      	movs	r2, #1
 810714a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 810714e:	2300      	movs	r3, #0
}
 8107150:	4618      	mov	r0, r3
 8107152:	3708      	adds	r7, #8
 8107154:	46bd      	mov	sp, r7
 8107156:	bd80      	pop	{r7, pc}

08107158 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8107158:	b580      	push	{r7, lr}
 810715a:	b082      	sub	sp, #8
 810715c:	af00      	add	r7, sp, #0
 810715e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8107160:	687b      	ldr	r3, [r7, #4]
 8107162:	2b00      	cmp	r3, #0
 8107164:	d101      	bne.n	810716a <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 8107166:	2301      	movs	r3, #1
 8107168:	e049      	b.n	81071fe <HAL_TIM_IC_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 810716a:	687b      	ldr	r3, [r7, #4]
 810716c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8107170:	b2db      	uxtb	r3, r3
 8107172:	2b00      	cmp	r3, #0
 8107174:	d106      	bne.n	8107184 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8107176:	687b      	ldr	r3, [r7, #4]
 8107178:	2200      	movs	r2, #0
 810717a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 810717e:	6878      	ldr	r0, [r7, #4]
 8107180:	f000 f841 	bl	8107206 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8107184:	687b      	ldr	r3, [r7, #4]
 8107186:	2202      	movs	r2, #2
 8107188:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 810718c:	687b      	ldr	r3, [r7, #4]
 810718e:	681a      	ldr	r2, [r3, #0]
 8107190:	687b      	ldr	r3, [r7, #4]
 8107192:	3304      	adds	r3, #4
 8107194:	4619      	mov	r1, r3
 8107196:	4610      	mov	r0, r2
 8107198:	f000 f956 	bl	8107448 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 810719c:	687b      	ldr	r3, [r7, #4]
 810719e:	2201      	movs	r2, #1
 81071a0:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 81071a4:	687b      	ldr	r3, [r7, #4]
 81071a6:	2201      	movs	r2, #1
 81071a8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 81071ac:	687b      	ldr	r3, [r7, #4]
 81071ae:	2201      	movs	r2, #1
 81071b0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 81071b4:	687b      	ldr	r3, [r7, #4]
 81071b6:	2201      	movs	r2, #1
 81071b8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 81071bc:	687b      	ldr	r3, [r7, #4]
 81071be:	2201      	movs	r2, #1
 81071c0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 81071c4:	687b      	ldr	r3, [r7, #4]
 81071c6:	2201      	movs	r2, #1
 81071c8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 81071cc:	687b      	ldr	r3, [r7, #4]
 81071ce:	2201      	movs	r2, #1
 81071d0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 81071d4:	687b      	ldr	r3, [r7, #4]
 81071d6:	2201      	movs	r2, #1
 81071d8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 81071dc:	687b      	ldr	r3, [r7, #4]
 81071de:	2201      	movs	r2, #1
 81071e0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 81071e4:	687b      	ldr	r3, [r7, #4]
 81071e6:	2201      	movs	r2, #1
 81071e8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 81071ec:	687b      	ldr	r3, [r7, #4]
 81071ee:	2201      	movs	r2, #1
 81071f0:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 81071f4:	687b      	ldr	r3, [r7, #4]
 81071f6:	2201      	movs	r2, #1
 81071f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 81071fc:	2300      	movs	r3, #0
}
 81071fe:	4618      	mov	r0, r3
 8107200:	3708      	adds	r7, #8
 8107202:	46bd      	mov	sp, r7
 8107204:	bd80      	pop	{r7, pc}

08107206 <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 8107206:	b480      	push	{r7}
 8107208:	b083      	sub	sp, #12
 810720a:	af00      	add	r7, sp, #0
 810720c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 810720e:	bf00      	nop
 8107210:	370c      	adds	r7, #12
 8107212:	46bd      	mov	sp, r7
 8107214:	f85d 7b04 	ldr.w	r7, [sp], #4
 8107218:	4770      	bx	lr
	...

0810721c <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           const TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 810721c:	b580      	push	{r7, lr}
 810721e:	b086      	sub	sp, #24
 8107220:	af00      	add	r7, sp, #0
 8107222:	60f8      	str	r0, [r7, #12]
 8107224:	60b9      	str	r1, [r7, #8]
 8107226:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8107228:	2300      	movs	r3, #0
 810722a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 810722c:	68fb      	ldr	r3, [r7, #12]
 810722e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8107232:	2b01      	cmp	r3, #1
 8107234:	d101      	bne.n	810723a <HAL_TIM_OC_ConfigChannel+0x1e>
 8107236:	2302      	movs	r3, #2
 8107238:	e066      	b.n	8107308 <HAL_TIM_OC_ConfigChannel+0xec>
 810723a:	68fb      	ldr	r3, [r7, #12]
 810723c:	2201      	movs	r2, #1
 810723e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8107242:	687b      	ldr	r3, [r7, #4]
 8107244:	2b14      	cmp	r3, #20
 8107246:	d857      	bhi.n	81072f8 <HAL_TIM_OC_ConfigChannel+0xdc>
 8107248:	a201      	add	r2, pc, #4	; (adr r2, 8107250 <HAL_TIM_OC_ConfigChannel+0x34>)
 810724a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 810724e:	bf00      	nop
 8107250:	081072a5 	.word	0x081072a5
 8107254:	081072f9 	.word	0x081072f9
 8107258:	081072f9 	.word	0x081072f9
 810725c:	081072f9 	.word	0x081072f9
 8107260:	081072b3 	.word	0x081072b3
 8107264:	081072f9 	.word	0x081072f9
 8107268:	081072f9 	.word	0x081072f9
 810726c:	081072f9 	.word	0x081072f9
 8107270:	081072c1 	.word	0x081072c1
 8107274:	081072f9 	.word	0x081072f9
 8107278:	081072f9 	.word	0x081072f9
 810727c:	081072f9 	.word	0x081072f9
 8107280:	081072cf 	.word	0x081072cf
 8107284:	081072f9 	.word	0x081072f9
 8107288:	081072f9 	.word	0x081072f9
 810728c:	081072f9 	.word	0x081072f9
 8107290:	081072dd 	.word	0x081072dd
 8107294:	081072f9 	.word	0x081072f9
 8107298:	081072f9 	.word	0x081072f9
 810729c:	081072f9 	.word	0x081072f9
 81072a0:	081072eb 	.word	0x081072eb
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 81072a4:	68fb      	ldr	r3, [r7, #12]
 81072a6:	681b      	ldr	r3, [r3, #0]
 81072a8:	68b9      	ldr	r1, [r7, #8]
 81072aa:	4618      	mov	r0, r3
 81072ac:	f000 f966 	bl	810757c <TIM_OC1_SetConfig>
      break;
 81072b0:	e025      	b.n	81072fe <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 81072b2:	68fb      	ldr	r3, [r7, #12]
 81072b4:	681b      	ldr	r3, [r3, #0]
 81072b6:	68b9      	ldr	r1, [r7, #8]
 81072b8:	4618      	mov	r0, r3
 81072ba:	f000 f9ef 	bl	810769c <TIM_OC2_SetConfig>
      break;
 81072be:	e01e      	b.n	81072fe <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 81072c0:	68fb      	ldr	r3, [r7, #12]
 81072c2:	681b      	ldr	r3, [r3, #0]
 81072c4:	68b9      	ldr	r1, [r7, #8]
 81072c6:	4618      	mov	r0, r3
 81072c8:	f000 fa72 	bl	81077b0 <TIM_OC3_SetConfig>
      break;
 81072cc:	e017      	b.n	81072fe <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 81072ce:	68fb      	ldr	r3, [r7, #12]
 81072d0:	681b      	ldr	r3, [r3, #0]
 81072d2:	68b9      	ldr	r1, [r7, #8]
 81072d4:	4618      	mov	r0, r3
 81072d6:	f000 faf3 	bl	81078c0 <TIM_OC4_SetConfig>
      break;
 81072da:	e010      	b.n	81072fe <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 5 in Output Compare */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 81072dc:	68fb      	ldr	r3, [r7, #12]
 81072de:	681b      	ldr	r3, [r3, #0]
 81072e0:	68b9      	ldr	r1, [r7, #8]
 81072e2:	4618      	mov	r0, r3
 81072e4:	f000 fb56 	bl	8107994 <TIM_OC5_SetConfig>
      break;
 81072e8:	e009      	b.n	81072fe <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 6 in Output Compare */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 81072ea:	68fb      	ldr	r3, [r7, #12]
 81072ec:	681b      	ldr	r3, [r3, #0]
 81072ee:	68b9      	ldr	r1, [r7, #8]
 81072f0:	4618      	mov	r0, r3
 81072f2:	f000 fbb3 	bl	8107a5c <TIM_OC6_SetConfig>
      break;
 81072f6:	e002      	b.n	81072fe <HAL_TIM_OC_ConfigChannel+0xe2>
    }

    default:
      status = HAL_ERROR;
 81072f8:	2301      	movs	r3, #1
 81072fa:	75fb      	strb	r3, [r7, #23]
      break;
 81072fc:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 81072fe:	68fb      	ldr	r3, [r7, #12]
 8107300:	2200      	movs	r2, #0
 8107302:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8107306:	7dfb      	ldrb	r3, [r7, #23]
}
 8107308:	4618      	mov	r0, r3
 810730a:	3718      	adds	r7, #24
 810730c:	46bd      	mov	sp, r7
 810730e:	bd80      	pop	{r7, pc}

08107310 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, const TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 8107310:	b580      	push	{r7, lr}
 8107312:	b086      	sub	sp, #24
 8107314:	af00      	add	r7, sp, #0
 8107316:	60f8      	str	r0, [r7, #12]
 8107318:	60b9      	str	r1, [r7, #8]
 810731a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 810731c:	2300      	movs	r3, #0
 810731e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 8107320:	68fb      	ldr	r3, [r7, #12]
 8107322:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8107326:	2b01      	cmp	r3, #1
 8107328:	d101      	bne.n	810732e <HAL_TIM_IC_ConfigChannel+0x1e>
 810732a:	2302      	movs	r3, #2
 810732c:	e088      	b.n	8107440 <HAL_TIM_IC_ConfigChannel+0x130>
 810732e:	68fb      	ldr	r3, [r7, #12]
 8107330:	2201      	movs	r2, #1
 8107332:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (Channel == TIM_CHANNEL_1)
 8107336:	687b      	ldr	r3, [r7, #4]
 8107338:	2b00      	cmp	r3, #0
 810733a:	d11b      	bne.n	8107374 <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 810733c:	68fb      	ldr	r3, [r7, #12]
 810733e:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8107340:	68bb      	ldr	r3, [r7, #8]
 8107342:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8107344:	68bb      	ldr	r3, [r7, #8]
 8107346:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8107348:	68bb      	ldr	r3, [r7, #8]
 810734a:	68db      	ldr	r3, [r3, #12]
    TIM_TI1_SetConfig(htim->Instance,
 810734c:	f000 fbec 	bl	8107b28 <TIM_TI1_SetConfig>

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8107350:	68fb      	ldr	r3, [r7, #12]
 8107352:	681b      	ldr	r3, [r3, #0]
 8107354:	699a      	ldr	r2, [r3, #24]
 8107356:	68fb      	ldr	r3, [r7, #12]
 8107358:	681b      	ldr	r3, [r3, #0]
 810735a:	f022 020c 	bic.w	r2, r2, #12
 810735e:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8107360:	68fb      	ldr	r3, [r7, #12]
 8107362:	681b      	ldr	r3, [r3, #0]
 8107364:	6999      	ldr	r1, [r3, #24]
 8107366:	68bb      	ldr	r3, [r7, #8]
 8107368:	689a      	ldr	r2, [r3, #8]
 810736a:	68fb      	ldr	r3, [r7, #12]
 810736c:	681b      	ldr	r3, [r3, #0]
 810736e:	430a      	orrs	r2, r1
 8107370:	619a      	str	r2, [r3, #24]
 8107372:	e060      	b.n	8107436 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 8107374:	687b      	ldr	r3, [r7, #4]
 8107376:	2b04      	cmp	r3, #4
 8107378:	d11c      	bne.n	81073b4 <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 810737a:	68fb      	ldr	r3, [r7, #12]
 810737c:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 810737e:	68bb      	ldr	r3, [r7, #8]
 8107380:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8107382:	68bb      	ldr	r3, [r7, #8]
 8107384:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8107386:	68bb      	ldr	r3, [r7, #8]
 8107388:	68db      	ldr	r3, [r3, #12]
    TIM_TI2_SetConfig(htim->Instance,
 810738a:	f000 fc41 	bl	8107c10 <TIM_TI2_SetConfig>

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 810738e:	68fb      	ldr	r3, [r7, #12]
 8107390:	681b      	ldr	r3, [r3, #0]
 8107392:	699a      	ldr	r2, [r3, #24]
 8107394:	68fb      	ldr	r3, [r7, #12]
 8107396:	681b      	ldr	r3, [r3, #0]
 8107398:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 810739c:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 810739e:	68fb      	ldr	r3, [r7, #12]
 81073a0:	681b      	ldr	r3, [r3, #0]
 81073a2:	6999      	ldr	r1, [r3, #24]
 81073a4:	68bb      	ldr	r3, [r7, #8]
 81073a6:	689b      	ldr	r3, [r3, #8]
 81073a8:	021a      	lsls	r2, r3, #8
 81073aa:	68fb      	ldr	r3, [r7, #12]
 81073ac:	681b      	ldr	r3, [r3, #0]
 81073ae:	430a      	orrs	r2, r1
 81073b0:	619a      	str	r2, [r3, #24]
 81073b2:	e040      	b.n	8107436 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 81073b4:	687b      	ldr	r3, [r7, #4]
 81073b6:	2b08      	cmp	r3, #8
 81073b8:	d11b      	bne.n	81073f2 <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 81073ba:	68fb      	ldr	r3, [r7, #12]
 81073bc:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 81073be:	68bb      	ldr	r3, [r7, #8]
 81073c0:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 81073c2:	68bb      	ldr	r3, [r7, #8]
 81073c4:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 81073c6:	68bb      	ldr	r3, [r7, #8]
 81073c8:	68db      	ldr	r3, [r3, #12]
    TIM_TI3_SetConfig(htim->Instance,
 81073ca:	f000 fc5e 	bl	8107c8a <TIM_TI3_SetConfig>

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 81073ce:	68fb      	ldr	r3, [r7, #12]
 81073d0:	681b      	ldr	r3, [r3, #0]
 81073d2:	69da      	ldr	r2, [r3, #28]
 81073d4:	68fb      	ldr	r3, [r7, #12]
 81073d6:	681b      	ldr	r3, [r3, #0]
 81073d8:	f022 020c 	bic.w	r2, r2, #12
 81073dc:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 81073de:	68fb      	ldr	r3, [r7, #12]
 81073e0:	681b      	ldr	r3, [r3, #0]
 81073e2:	69d9      	ldr	r1, [r3, #28]
 81073e4:	68bb      	ldr	r3, [r7, #8]
 81073e6:	689a      	ldr	r2, [r3, #8]
 81073e8:	68fb      	ldr	r3, [r7, #12]
 81073ea:	681b      	ldr	r3, [r3, #0]
 81073ec:	430a      	orrs	r2, r1
 81073ee:	61da      	str	r2, [r3, #28]
 81073f0:	e021      	b.n	8107436 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 81073f2:	687b      	ldr	r3, [r7, #4]
 81073f4:	2b0c      	cmp	r3, #12
 81073f6:	d11c      	bne.n	8107432 <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 81073f8:	68fb      	ldr	r3, [r7, #12]
 81073fa:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 81073fc:	68bb      	ldr	r3, [r7, #8]
 81073fe:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8107400:	68bb      	ldr	r3, [r7, #8]
 8107402:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8107404:	68bb      	ldr	r3, [r7, #8]
 8107406:	68db      	ldr	r3, [r3, #12]
    TIM_TI4_SetConfig(htim->Instance,
 8107408:	f000 fc7b 	bl	8107d02 <TIM_TI4_SetConfig>

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 810740c:	68fb      	ldr	r3, [r7, #12]
 810740e:	681b      	ldr	r3, [r3, #0]
 8107410:	69da      	ldr	r2, [r3, #28]
 8107412:	68fb      	ldr	r3, [r7, #12]
 8107414:	681b      	ldr	r3, [r3, #0]
 8107416:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 810741a:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 810741c:	68fb      	ldr	r3, [r7, #12]
 810741e:	681b      	ldr	r3, [r3, #0]
 8107420:	69d9      	ldr	r1, [r3, #28]
 8107422:	68bb      	ldr	r3, [r7, #8]
 8107424:	689b      	ldr	r3, [r3, #8]
 8107426:	021a      	lsls	r2, r3, #8
 8107428:	68fb      	ldr	r3, [r7, #12]
 810742a:	681b      	ldr	r3, [r3, #0]
 810742c:	430a      	orrs	r2, r1
 810742e:	61da      	str	r2, [r3, #28]
 8107430:	e001      	b.n	8107436 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 8107432:	2301      	movs	r3, #1
 8107434:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 8107436:	68fb      	ldr	r3, [r7, #12]
 8107438:	2200      	movs	r2, #0
 810743a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 810743e:	7dfb      	ldrb	r3, [r7, #23]
}
 8107440:	4618      	mov	r0, r3
 8107442:	3718      	adds	r7, #24
 8107444:	46bd      	mov	sp, r7
 8107446:	bd80      	pop	{r7, pc}

08107448 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8107448:	b480      	push	{r7}
 810744a:	b085      	sub	sp, #20
 810744c:	af00      	add	r7, sp, #0
 810744e:	6078      	str	r0, [r7, #4]
 8107450:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8107452:	687b      	ldr	r3, [r7, #4]
 8107454:	681b      	ldr	r3, [r3, #0]
 8107456:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8107458:	687b      	ldr	r3, [r7, #4]
 810745a:	4a40      	ldr	r2, [pc, #256]	; (810755c <TIM_Base_SetConfig+0x114>)
 810745c:	4293      	cmp	r3, r2
 810745e:	d013      	beq.n	8107488 <TIM_Base_SetConfig+0x40>
 8107460:	687b      	ldr	r3, [r7, #4]
 8107462:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8107466:	d00f      	beq.n	8107488 <TIM_Base_SetConfig+0x40>
 8107468:	687b      	ldr	r3, [r7, #4]
 810746a:	4a3d      	ldr	r2, [pc, #244]	; (8107560 <TIM_Base_SetConfig+0x118>)
 810746c:	4293      	cmp	r3, r2
 810746e:	d00b      	beq.n	8107488 <TIM_Base_SetConfig+0x40>
 8107470:	687b      	ldr	r3, [r7, #4]
 8107472:	4a3c      	ldr	r2, [pc, #240]	; (8107564 <TIM_Base_SetConfig+0x11c>)
 8107474:	4293      	cmp	r3, r2
 8107476:	d007      	beq.n	8107488 <TIM_Base_SetConfig+0x40>
 8107478:	687b      	ldr	r3, [r7, #4]
 810747a:	4a3b      	ldr	r2, [pc, #236]	; (8107568 <TIM_Base_SetConfig+0x120>)
 810747c:	4293      	cmp	r3, r2
 810747e:	d003      	beq.n	8107488 <TIM_Base_SetConfig+0x40>
 8107480:	687b      	ldr	r3, [r7, #4]
 8107482:	4a3a      	ldr	r2, [pc, #232]	; (810756c <TIM_Base_SetConfig+0x124>)
 8107484:	4293      	cmp	r3, r2
 8107486:	d108      	bne.n	810749a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8107488:	68fb      	ldr	r3, [r7, #12]
 810748a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 810748e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8107490:	683b      	ldr	r3, [r7, #0]
 8107492:	685b      	ldr	r3, [r3, #4]
 8107494:	68fa      	ldr	r2, [r7, #12]
 8107496:	4313      	orrs	r3, r2
 8107498:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 810749a:	687b      	ldr	r3, [r7, #4]
 810749c:	4a2f      	ldr	r2, [pc, #188]	; (810755c <TIM_Base_SetConfig+0x114>)
 810749e:	4293      	cmp	r3, r2
 81074a0:	d01f      	beq.n	81074e2 <TIM_Base_SetConfig+0x9a>
 81074a2:	687b      	ldr	r3, [r7, #4]
 81074a4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 81074a8:	d01b      	beq.n	81074e2 <TIM_Base_SetConfig+0x9a>
 81074aa:	687b      	ldr	r3, [r7, #4]
 81074ac:	4a2c      	ldr	r2, [pc, #176]	; (8107560 <TIM_Base_SetConfig+0x118>)
 81074ae:	4293      	cmp	r3, r2
 81074b0:	d017      	beq.n	81074e2 <TIM_Base_SetConfig+0x9a>
 81074b2:	687b      	ldr	r3, [r7, #4]
 81074b4:	4a2b      	ldr	r2, [pc, #172]	; (8107564 <TIM_Base_SetConfig+0x11c>)
 81074b6:	4293      	cmp	r3, r2
 81074b8:	d013      	beq.n	81074e2 <TIM_Base_SetConfig+0x9a>
 81074ba:	687b      	ldr	r3, [r7, #4]
 81074bc:	4a2a      	ldr	r2, [pc, #168]	; (8107568 <TIM_Base_SetConfig+0x120>)
 81074be:	4293      	cmp	r3, r2
 81074c0:	d00f      	beq.n	81074e2 <TIM_Base_SetConfig+0x9a>
 81074c2:	687b      	ldr	r3, [r7, #4]
 81074c4:	4a29      	ldr	r2, [pc, #164]	; (810756c <TIM_Base_SetConfig+0x124>)
 81074c6:	4293      	cmp	r3, r2
 81074c8:	d00b      	beq.n	81074e2 <TIM_Base_SetConfig+0x9a>
 81074ca:	687b      	ldr	r3, [r7, #4]
 81074cc:	4a28      	ldr	r2, [pc, #160]	; (8107570 <TIM_Base_SetConfig+0x128>)
 81074ce:	4293      	cmp	r3, r2
 81074d0:	d007      	beq.n	81074e2 <TIM_Base_SetConfig+0x9a>
 81074d2:	687b      	ldr	r3, [r7, #4]
 81074d4:	4a27      	ldr	r2, [pc, #156]	; (8107574 <TIM_Base_SetConfig+0x12c>)
 81074d6:	4293      	cmp	r3, r2
 81074d8:	d003      	beq.n	81074e2 <TIM_Base_SetConfig+0x9a>
 81074da:	687b      	ldr	r3, [r7, #4]
 81074dc:	4a26      	ldr	r2, [pc, #152]	; (8107578 <TIM_Base_SetConfig+0x130>)
 81074de:	4293      	cmp	r3, r2
 81074e0:	d108      	bne.n	81074f4 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 81074e2:	68fb      	ldr	r3, [r7, #12]
 81074e4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 81074e8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 81074ea:	683b      	ldr	r3, [r7, #0]
 81074ec:	68db      	ldr	r3, [r3, #12]
 81074ee:	68fa      	ldr	r2, [r7, #12]
 81074f0:	4313      	orrs	r3, r2
 81074f2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 81074f4:	68fb      	ldr	r3, [r7, #12]
 81074f6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 81074fa:	683b      	ldr	r3, [r7, #0]
 81074fc:	695b      	ldr	r3, [r3, #20]
 81074fe:	4313      	orrs	r3, r2
 8107500:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8107502:	687b      	ldr	r3, [r7, #4]
 8107504:	68fa      	ldr	r2, [r7, #12]
 8107506:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8107508:	683b      	ldr	r3, [r7, #0]
 810750a:	689a      	ldr	r2, [r3, #8]
 810750c:	687b      	ldr	r3, [r7, #4]
 810750e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8107510:	683b      	ldr	r3, [r7, #0]
 8107512:	681a      	ldr	r2, [r3, #0]
 8107514:	687b      	ldr	r3, [r7, #4]
 8107516:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8107518:	687b      	ldr	r3, [r7, #4]
 810751a:	4a10      	ldr	r2, [pc, #64]	; (810755c <TIM_Base_SetConfig+0x114>)
 810751c:	4293      	cmp	r3, r2
 810751e:	d00f      	beq.n	8107540 <TIM_Base_SetConfig+0xf8>
 8107520:	687b      	ldr	r3, [r7, #4]
 8107522:	4a12      	ldr	r2, [pc, #72]	; (810756c <TIM_Base_SetConfig+0x124>)
 8107524:	4293      	cmp	r3, r2
 8107526:	d00b      	beq.n	8107540 <TIM_Base_SetConfig+0xf8>
 8107528:	687b      	ldr	r3, [r7, #4]
 810752a:	4a11      	ldr	r2, [pc, #68]	; (8107570 <TIM_Base_SetConfig+0x128>)
 810752c:	4293      	cmp	r3, r2
 810752e:	d007      	beq.n	8107540 <TIM_Base_SetConfig+0xf8>
 8107530:	687b      	ldr	r3, [r7, #4]
 8107532:	4a10      	ldr	r2, [pc, #64]	; (8107574 <TIM_Base_SetConfig+0x12c>)
 8107534:	4293      	cmp	r3, r2
 8107536:	d003      	beq.n	8107540 <TIM_Base_SetConfig+0xf8>
 8107538:	687b      	ldr	r3, [r7, #4]
 810753a:	4a0f      	ldr	r2, [pc, #60]	; (8107578 <TIM_Base_SetConfig+0x130>)
 810753c:	4293      	cmp	r3, r2
 810753e:	d103      	bne.n	8107548 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8107540:	683b      	ldr	r3, [r7, #0]
 8107542:	691a      	ldr	r2, [r3, #16]
 8107544:	687b      	ldr	r3, [r7, #4]
 8107546:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8107548:	687b      	ldr	r3, [r7, #4]
 810754a:	2201      	movs	r2, #1
 810754c:	615a      	str	r2, [r3, #20]
}
 810754e:	bf00      	nop
 8107550:	3714      	adds	r7, #20
 8107552:	46bd      	mov	sp, r7
 8107554:	f85d 7b04 	ldr.w	r7, [sp], #4
 8107558:	4770      	bx	lr
 810755a:	bf00      	nop
 810755c:	40010000 	.word	0x40010000
 8107560:	40000400 	.word	0x40000400
 8107564:	40000800 	.word	0x40000800
 8107568:	40000c00 	.word	0x40000c00
 810756c:	40010400 	.word	0x40010400
 8107570:	40014000 	.word	0x40014000
 8107574:	40014400 	.word	0x40014400
 8107578:	40014800 	.word	0x40014800

0810757c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 810757c:	b480      	push	{r7}
 810757e:	b087      	sub	sp, #28
 8107580:	af00      	add	r7, sp, #0
 8107582:	6078      	str	r0, [r7, #4]
 8107584:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8107586:	687b      	ldr	r3, [r7, #4]
 8107588:	6a1b      	ldr	r3, [r3, #32]
 810758a:	f023 0201 	bic.w	r2, r3, #1
 810758e:	687b      	ldr	r3, [r7, #4]
 8107590:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8107592:	687b      	ldr	r3, [r7, #4]
 8107594:	6a1b      	ldr	r3, [r3, #32]
 8107596:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8107598:	687b      	ldr	r3, [r7, #4]
 810759a:	685b      	ldr	r3, [r3, #4]
 810759c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 810759e:	687b      	ldr	r3, [r7, #4]
 81075a0:	699b      	ldr	r3, [r3, #24]
 81075a2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 81075a4:	68fb      	ldr	r3, [r7, #12]
 81075a6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 81075aa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 81075ae:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 81075b0:	68fb      	ldr	r3, [r7, #12]
 81075b2:	f023 0303 	bic.w	r3, r3, #3
 81075b6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 81075b8:	683b      	ldr	r3, [r7, #0]
 81075ba:	681b      	ldr	r3, [r3, #0]
 81075bc:	68fa      	ldr	r2, [r7, #12]
 81075be:	4313      	orrs	r3, r2
 81075c0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 81075c2:	697b      	ldr	r3, [r7, #20]
 81075c4:	f023 0302 	bic.w	r3, r3, #2
 81075c8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 81075ca:	683b      	ldr	r3, [r7, #0]
 81075cc:	689b      	ldr	r3, [r3, #8]
 81075ce:	697a      	ldr	r2, [r7, #20]
 81075d0:	4313      	orrs	r3, r2
 81075d2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 81075d4:	687b      	ldr	r3, [r7, #4]
 81075d6:	4a2c      	ldr	r2, [pc, #176]	; (8107688 <TIM_OC1_SetConfig+0x10c>)
 81075d8:	4293      	cmp	r3, r2
 81075da:	d00f      	beq.n	81075fc <TIM_OC1_SetConfig+0x80>
 81075dc:	687b      	ldr	r3, [r7, #4]
 81075de:	4a2b      	ldr	r2, [pc, #172]	; (810768c <TIM_OC1_SetConfig+0x110>)
 81075e0:	4293      	cmp	r3, r2
 81075e2:	d00b      	beq.n	81075fc <TIM_OC1_SetConfig+0x80>
 81075e4:	687b      	ldr	r3, [r7, #4]
 81075e6:	4a2a      	ldr	r2, [pc, #168]	; (8107690 <TIM_OC1_SetConfig+0x114>)
 81075e8:	4293      	cmp	r3, r2
 81075ea:	d007      	beq.n	81075fc <TIM_OC1_SetConfig+0x80>
 81075ec:	687b      	ldr	r3, [r7, #4]
 81075ee:	4a29      	ldr	r2, [pc, #164]	; (8107694 <TIM_OC1_SetConfig+0x118>)
 81075f0:	4293      	cmp	r3, r2
 81075f2:	d003      	beq.n	81075fc <TIM_OC1_SetConfig+0x80>
 81075f4:	687b      	ldr	r3, [r7, #4]
 81075f6:	4a28      	ldr	r2, [pc, #160]	; (8107698 <TIM_OC1_SetConfig+0x11c>)
 81075f8:	4293      	cmp	r3, r2
 81075fa:	d10c      	bne.n	8107616 <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 81075fc:	697b      	ldr	r3, [r7, #20]
 81075fe:	f023 0308 	bic.w	r3, r3, #8
 8107602:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8107604:	683b      	ldr	r3, [r7, #0]
 8107606:	68db      	ldr	r3, [r3, #12]
 8107608:	697a      	ldr	r2, [r7, #20]
 810760a:	4313      	orrs	r3, r2
 810760c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 810760e:	697b      	ldr	r3, [r7, #20]
 8107610:	f023 0304 	bic.w	r3, r3, #4
 8107614:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8107616:	687b      	ldr	r3, [r7, #4]
 8107618:	4a1b      	ldr	r2, [pc, #108]	; (8107688 <TIM_OC1_SetConfig+0x10c>)
 810761a:	4293      	cmp	r3, r2
 810761c:	d00f      	beq.n	810763e <TIM_OC1_SetConfig+0xc2>
 810761e:	687b      	ldr	r3, [r7, #4]
 8107620:	4a1a      	ldr	r2, [pc, #104]	; (810768c <TIM_OC1_SetConfig+0x110>)
 8107622:	4293      	cmp	r3, r2
 8107624:	d00b      	beq.n	810763e <TIM_OC1_SetConfig+0xc2>
 8107626:	687b      	ldr	r3, [r7, #4]
 8107628:	4a19      	ldr	r2, [pc, #100]	; (8107690 <TIM_OC1_SetConfig+0x114>)
 810762a:	4293      	cmp	r3, r2
 810762c:	d007      	beq.n	810763e <TIM_OC1_SetConfig+0xc2>
 810762e:	687b      	ldr	r3, [r7, #4]
 8107630:	4a18      	ldr	r2, [pc, #96]	; (8107694 <TIM_OC1_SetConfig+0x118>)
 8107632:	4293      	cmp	r3, r2
 8107634:	d003      	beq.n	810763e <TIM_OC1_SetConfig+0xc2>
 8107636:	687b      	ldr	r3, [r7, #4]
 8107638:	4a17      	ldr	r2, [pc, #92]	; (8107698 <TIM_OC1_SetConfig+0x11c>)
 810763a:	4293      	cmp	r3, r2
 810763c:	d111      	bne.n	8107662 <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 810763e:	693b      	ldr	r3, [r7, #16]
 8107640:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8107644:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8107646:	693b      	ldr	r3, [r7, #16]
 8107648:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 810764c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 810764e:	683b      	ldr	r3, [r7, #0]
 8107650:	695b      	ldr	r3, [r3, #20]
 8107652:	693a      	ldr	r2, [r7, #16]
 8107654:	4313      	orrs	r3, r2
 8107656:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8107658:	683b      	ldr	r3, [r7, #0]
 810765a:	699b      	ldr	r3, [r3, #24]
 810765c:	693a      	ldr	r2, [r7, #16]
 810765e:	4313      	orrs	r3, r2
 8107660:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8107662:	687b      	ldr	r3, [r7, #4]
 8107664:	693a      	ldr	r2, [r7, #16]
 8107666:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8107668:	687b      	ldr	r3, [r7, #4]
 810766a:	68fa      	ldr	r2, [r7, #12]
 810766c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 810766e:	683b      	ldr	r3, [r7, #0]
 8107670:	685a      	ldr	r2, [r3, #4]
 8107672:	687b      	ldr	r3, [r7, #4]
 8107674:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8107676:	687b      	ldr	r3, [r7, #4]
 8107678:	697a      	ldr	r2, [r7, #20]
 810767a:	621a      	str	r2, [r3, #32]
}
 810767c:	bf00      	nop
 810767e:	371c      	adds	r7, #28
 8107680:	46bd      	mov	sp, r7
 8107682:	f85d 7b04 	ldr.w	r7, [sp], #4
 8107686:	4770      	bx	lr
 8107688:	40010000 	.word	0x40010000
 810768c:	40010400 	.word	0x40010400
 8107690:	40014000 	.word	0x40014000
 8107694:	40014400 	.word	0x40014400
 8107698:	40014800 	.word	0x40014800

0810769c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 810769c:	b480      	push	{r7}
 810769e:	b087      	sub	sp, #28
 81076a0:	af00      	add	r7, sp, #0
 81076a2:	6078      	str	r0, [r7, #4]
 81076a4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 81076a6:	687b      	ldr	r3, [r7, #4]
 81076a8:	6a1b      	ldr	r3, [r3, #32]
 81076aa:	f023 0210 	bic.w	r2, r3, #16
 81076ae:	687b      	ldr	r3, [r7, #4]
 81076b0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 81076b2:	687b      	ldr	r3, [r7, #4]
 81076b4:	6a1b      	ldr	r3, [r3, #32]
 81076b6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 81076b8:	687b      	ldr	r3, [r7, #4]
 81076ba:	685b      	ldr	r3, [r3, #4]
 81076bc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 81076be:	687b      	ldr	r3, [r7, #4]
 81076c0:	699b      	ldr	r3, [r3, #24]
 81076c2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 81076c4:	68fb      	ldr	r3, [r7, #12]
 81076c6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 81076ca:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 81076ce:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 81076d0:	68fb      	ldr	r3, [r7, #12]
 81076d2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 81076d6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 81076d8:	683b      	ldr	r3, [r7, #0]
 81076da:	681b      	ldr	r3, [r3, #0]
 81076dc:	021b      	lsls	r3, r3, #8
 81076de:	68fa      	ldr	r2, [r7, #12]
 81076e0:	4313      	orrs	r3, r2
 81076e2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 81076e4:	697b      	ldr	r3, [r7, #20]
 81076e6:	f023 0320 	bic.w	r3, r3, #32
 81076ea:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 81076ec:	683b      	ldr	r3, [r7, #0]
 81076ee:	689b      	ldr	r3, [r3, #8]
 81076f0:	011b      	lsls	r3, r3, #4
 81076f2:	697a      	ldr	r2, [r7, #20]
 81076f4:	4313      	orrs	r3, r2
 81076f6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 81076f8:	687b      	ldr	r3, [r7, #4]
 81076fa:	4a28      	ldr	r2, [pc, #160]	; (810779c <TIM_OC2_SetConfig+0x100>)
 81076fc:	4293      	cmp	r3, r2
 81076fe:	d003      	beq.n	8107708 <TIM_OC2_SetConfig+0x6c>
 8107700:	687b      	ldr	r3, [r7, #4]
 8107702:	4a27      	ldr	r2, [pc, #156]	; (81077a0 <TIM_OC2_SetConfig+0x104>)
 8107704:	4293      	cmp	r3, r2
 8107706:	d10d      	bne.n	8107724 <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8107708:	697b      	ldr	r3, [r7, #20]
 810770a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 810770e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8107710:	683b      	ldr	r3, [r7, #0]
 8107712:	68db      	ldr	r3, [r3, #12]
 8107714:	011b      	lsls	r3, r3, #4
 8107716:	697a      	ldr	r2, [r7, #20]
 8107718:	4313      	orrs	r3, r2
 810771a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 810771c:	697b      	ldr	r3, [r7, #20]
 810771e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8107722:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8107724:	687b      	ldr	r3, [r7, #4]
 8107726:	4a1d      	ldr	r2, [pc, #116]	; (810779c <TIM_OC2_SetConfig+0x100>)
 8107728:	4293      	cmp	r3, r2
 810772a:	d00f      	beq.n	810774c <TIM_OC2_SetConfig+0xb0>
 810772c:	687b      	ldr	r3, [r7, #4]
 810772e:	4a1c      	ldr	r2, [pc, #112]	; (81077a0 <TIM_OC2_SetConfig+0x104>)
 8107730:	4293      	cmp	r3, r2
 8107732:	d00b      	beq.n	810774c <TIM_OC2_SetConfig+0xb0>
 8107734:	687b      	ldr	r3, [r7, #4]
 8107736:	4a1b      	ldr	r2, [pc, #108]	; (81077a4 <TIM_OC2_SetConfig+0x108>)
 8107738:	4293      	cmp	r3, r2
 810773a:	d007      	beq.n	810774c <TIM_OC2_SetConfig+0xb0>
 810773c:	687b      	ldr	r3, [r7, #4]
 810773e:	4a1a      	ldr	r2, [pc, #104]	; (81077a8 <TIM_OC2_SetConfig+0x10c>)
 8107740:	4293      	cmp	r3, r2
 8107742:	d003      	beq.n	810774c <TIM_OC2_SetConfig+0xb0>
 8107744:	687b      	ldr	r3, [r7, #4]
 8107746:	4a19      	ldr	r2, [pc, #100]	; (81077ac <TIM_OC2_SetConfig+0x110>)
 8107748:	4293      	cmp	r3, r2
 810774a:	d113      	bne.n	8107774 <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 810774c:	693b      	ldr	r3, [r7, #16]
 810774e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8107752:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8107754:	693b      	ldr	r3, [r7, #16]
 8107756:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 810775a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 810775c:	683b      	ldr	r3, [r7, #0]
 810775e:	695b      	ldr	r3, [r3, #20]
 8107760:	009b      	lsls	r3, r3, #2
 8107762:	693a      	ldr	r2, [r7, #16]
 8107764:	4313      	orrs	r3, r2
 8107766:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8107768:	683b      	ldr	r3, [r7, #0]
 810776a:	699b      	ldr	r3, [r3, #24]
 810776c:	009b      	lsls	r3, r3, #2
 810776e:	693a      	ldr	r2, [r7, #16]
 8107770:	4313      	orrs	r3, r2
 8107772:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8107774:	687b      	ldr	r3, [r7, #4]
 8107776:	693a      	ldr	r2, [r7, #16]
 8107778:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 810777a:	687b      	ldr	r3, [r7, #4]
 810777c:	68fa      	ldr	r2, [r7, #12]
 810777e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8107780:	683b      	ldr	r3, [r7, #0]
 8107782:	685a      	ldr	r2, [r3, #4]
 8107784:	687b      	ldr	r3, [r7, #4]
 8107786:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8107788:	687b      	ldr	r3, [r7, #4]
 810778a:	697a      	ldr	r2, [r7, #20]
 810778c:	621a      	str	r2, [r3, #32]
}
 810778e:	bf00      	nop
 8107790:	371c      	adds	r7, #28
 8107792:	46bd      	mov	sp, r7
 8107794:	f85d 7b04 	ldr.w	r7, [sp], #4
 8107798:	4770      	bx	lr
 810779a:	bf00      	nop
 810779c:	40010000 	.word	0x40010000
 81077a0:	40010400 	.word	0x40010400
 81077a4:	40014000 	.word	0x40014000
 81077a8:	40014400 	.word	0x40014400
 81077ac:	40014800 	.word	0x40014800

081077b0 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 81077b0:	b480      	push	{r7}
 81077b2:	b087      	sub	sp, #28
 81077b4:	af00      	add	r7, sp, #0
 81077b6:	6078      	str	r0, [r7, #4]
 81077b8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 81077ba:	687b      	ldr	r3, [r7, #4]
 81077bc:	6a1b      	ldr	r3, [r3, #32]
 81077be:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 81077c2:	687b      	ldr	r3, [r7, #4]
 81077c4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 81077c6:	687b      	ldr	r3, [r7, #4]
 81077c8:	6a1b      	ldr	r3, [r3, #32]
 81077ca:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 81077cc:	687b      	ldr	r3, [r7, #4]
 81077ce:	685b      	ldr	r3, [r3, #4]
 81077d0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 81077d2:	687b      	ldr	r3, [r7, #4]
 81077d4:	69db      	ldr	r3, [r3, #28]
 81077d6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 81077d8:	68fb      	ldr	r3, [r7, #12]
 81077da:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 81077de:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 81077e2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 81077e4:	68fb      	ldr	r3, [r7, #12]
 81077e6:	f023 0303 	bic.w	r3, r3, #3
 81077ea:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 81077ec:	683b      	ldr	r3, [r7, #0]
 81077ee:	681b      	ldr	r3, [r3, #0]
 81077f0:	68fa      	ldr	r2, [r7, #12]
 81077f2:	4313      	orrs	r3, r2
 81077f4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 81077f6:	697b      	ldr	r3, [r7, #20]
 81077f8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 81077fc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 81077fe:	683b      	ldr	r3, [r7, #0]
 8107800:	689b      	ldr	r3, [r3, #8]
 8107802:	021b      	lsls	r3, r3, #8
 8107804:	697a      	ldr	r2, [r7, #20]
 8107806:	4313      	orrs	r3, r2
 8107808:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 810780a:	687b      	ldr	r3, [r7, #4]
 810780c:	4a27      	ldr	r2, [pc, #156]	; (81078ac <TIM_OC3_SetConfig+0xfc>)
 810780e:	4293      	cmp	r3, r2
 8107810:	d003      	beq.n	810781a <TIM_OC3_SetConfig+0x6a>
 8107812:	687b      	ldr	r3, [r7, #4]
 8107814:	4a26      	ldr	r2, [pc, #152]	; (81078b0 <TIM_OC3_SetConfig+0x100>)
 8107816:	4293      	cmp	r3, r2
 8107818:	d10d      	bne.n	8107836 <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 810781a:	697b      	ldr	r3, [r7, #20]
 810781c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8107820:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8107822:	683b      	ldr	r3, [r7, #0]
 8107824:	68db      	ldr	r3, [r3, #12]
 8107826:	021b      	lsls	r3, r3, #8
 8107828:	697a      	ldr	r2, [r7, #20]
 810782a:	4313      	orrs	r3, r2
 810782c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 810782e:	697b      	ldr	r3, [r7, #20]
 8107830:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8107834:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8107836:	687b      	ldr	r3, [r7, #4]
 8107838:	4a1c      	ldr	r2, [pc, #112]	; (81078ac <TIM_OC3_SetConfig+0xfc>)
 810783a:	4293      	cmp	r3, r2
 810783c:	d00f      	beq.n	810785e <TIM_OC3_SetConfig+0xae>
 810783e:	687b      	ldr	r3, [r7, #4]
 8107840:	4a1b      	ldr	r2, [pc, #108]	; (81078b0 <TIM_OC3_SetConfig+0x100>)
 8107842:	4293      	cmp	r3, r2
 8107844:	d00b      	beq.n	810785e <TIM_OC3_SetConfig+0xae>
 8107846:	687b      	ldr	r3, [r7, #4]
 8107848:	4a1a      	ldr	r2, [pc, #104]	; (81078b4 <TIM_OC3_SetConfig+0x104>)
 810784a:	4293      	cmp	r3, r2
 810784c:	d007      	beq.n	810785e <TIM_OC3_SetConfig+0xae>
 810784e:	687b      	ldr	r3, [r7, #4]
 8107850:	4a19      	ldr	r2, [pc, #100]	; (81078b8 <TIM_OC3_SetConfig+0x108>)
 8107852:	4293      	cmp	r3, r2
 8107854:	d003      	beq.n	810785e <TIM_OC3_SetConfig+0xae>
 8107856:	687b      	ldr	r3, [r7, #4]
 8107858:	4a18      	ldr	r2, [pc, #96]	; (81078bc <TIM_OC3_SetConfig+0x10c>)
 810785a:	4293      	cmp	r3, r2
 810785c:	d113      	bne.n	8107886 <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 810785e:	693b      	ldr	r3, [r7, #16]
 8107860:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8107864:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8107866:	693b      	ldr	r3, [r7, #16]
 8107868:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 810786c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 810786e:	683b      	ldr	r3, [r7, #0]
 8107870:	695b      	ldr	r3, [r3, #20]
 8107872:	011b      	lsls	r3, r3, #4
 8107874:	693a      	ldr	r2, [r7, #16]
 8107876:	4313      	orrs	r3, r2
 8107878:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 810787a:	683b      	ldr	r3, [r7, #0]
 810787c:	699b      	ldr	r3, [r3, #24]
 810787e:	011b      	lsls	r3, r3, #4
 8107880:	693a      	ldr	r2, [r7, #16]
 8107882:	4313      	orrs	r3, r2
 8107884:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8107886:	687b      	ldr	r3, [r7, #4]
 8107888:	693a      	ldr	r2, [r7, #16]
 810788a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 810788c:	687b      	ldr	r3, [r7, #4]
 810788e:	68fa      	ldr	r2, [r7, #12]
 8107890:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8107892:	683b      	ldr	r3, [r7, #0]
 8107894:	685a      	ldr	r2, [r3, #4]
 8107896:	687b      	ldr	r3, [r7, #4]
 8107898:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 810789a:	687b      	ldr	r3, [r7, #4]
 810789c:	697a      	ldr	r2, [r7, #20]
 810789e:	621a      	str	r2, [r3, #32]
}
 81078a0:	bf00      	nop
 81078a2:	371c      	adds	r7, #28
 81078a4:	46bd      	mov	sp, r7
 81078a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 81078aa:	4770      	bx	lr
 81078ac:	40010000 	.word	0x40010000
 81078b0:	40010400 	.word	0x40010400
 81078b4:	40014000 	.word	0x40014000
 81078b8:	40014400 	.word	0x40014400
 81078bc:	40014800 	.word	0x40014800

081078c0 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 81078c0:	b480      	push	{r7}
 81078c2:	b087      	sub	sp, #28
 81078c4:	af00      	add	r7, sp, #0
 81078c6:	6078      	str	r0, [r7, #4]
 81078c8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 81078ca:	687b      	ldr	r3, [r7, #4]
 81078cc:	6a1b      	ldr	r3, [r3, #32]
 81078ce:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 81078d2:	687b      	ldr	r3, [r7, #4]
 81078d4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 81078d6:	687b      	ldr	r3, [r7, #4]
 81078d8:	6a1b      	ldr	r3, [r3, #32]
 81078da:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 81078dc:	687b      	ldr	r3, [r7, #4]
 81078de:	685b      	ldr	r3, [r3, #4]
 81078e0:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 81078e2:	687b      	ldr	r3, [r7, #4]
 81078e4:	69db      	ldr	r3, [r3, #28]
 81078e6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 81078e8:	68fb      	ldr	r3, [r7, #12]
 81078ea:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 81078ee:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 81078f2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 81078f4:	68fb      	ldr	r3, [r7, #12]
 81078f6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 81078fa:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 81078fc:	683b      	ldr	r3, [r7, #0]
 81078fe:	681b      	ldr	r3, [r3, #0]
 8107900:	021b      	lsls	r3, r3, #8
 8107902:	68fa      	ldr	r2, [r7, #12]
 8107904:	4313      	orrs	r3, r2
 8107906:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8107908:	693b      	ldr	r3, [r7, #16]
 810790a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 810790e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8107910:	683b      	ldr	r3, [r7, #0]
 8107912:	689b      	ldr	r3, [r3, #8]
 8107914:	031b      	lsls	r3, r3, #12
 8107916:	693a      	ldr	r2, [r7, #16]
 8107918:	4313      	orrs	r3, r2
 810791a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 810791c:	687b      	ldr	r3, [r7, #4]
 810791e:	4a18      	ldr	r2, [pc, #96]	; (8107980 <TIM_OC4_SetConfig+0xc0>)
 8107920:	4293      	cmp	r3, r2
 8107922:	d00f      	beq.n	8107944 <TIM_OC4_SetConfig+0x84>
 8107924:	687b      	ldr	r3, [r7, #4]
 8107926:	4a17      	ldr	r2, [pc, #92]	; (8107984 <TIM_OC4_SetConfig+0xc4>)
 8107928:	4293      	cmp	r3, r2
 810792a:	d00b      	beq.n	8107944 <TIM_OC4_SetConfig+0x84>
 810792c:	687b      	ldr	r3, [r7, #4]
 810792e:	4a16      	ldr	r2, [pc, #88]	; (8107988 <TIM_OC4_SetConfig+0xc8>)
 8107930:	4293      	cmp	r3, r2
 8107932:	d007      	beq.n	8107944 <TIM_OC4_SetConfig+0x84>
 8107934:	687b      	ldr	r3, [r7, #4]
 8107936:	4a15      	ldr	r2, [pc, #84]	; (810798c <TIM_OC4_SetConfig+0xcc>)
 8107938:	4293      	cmp	r3, r2
 810793a:	d003      	beq.n	8107944 <TIM_OC4_SetConfig+0x84>
 810793c:	687b      	ldr	r3, [r7, #4]
 810793e:	4a14      	ldr	r2, [pc, #80]	; (8107990 <TIM_OC4_SetConfig+0xd0>)
 8107940:	4293      	cmp	r3, r2
 8107942:	d109      	bne.n	8107958 <TIM_OC4_SetConfig+0x98>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8107944:	697b      	ldr	r3, [r7, #20]
 8107946:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 810794a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 810794c:	683b      	ldr	r3, [r7, #0]
 810794e:	695b      	ldr	r3, [r3, #20]
 8107950:	019b      	lsls	r3, r3, #6
 8107952:	697a      	ldr	r2, [r7, #20]
 8107954:	4313      	orrs	r3, r2
 8107956:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8107958:	687b      	ldr	r3, [r7, #4]
 810795a:	697a      	ldr	r2, [r7, #20]
 810795c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 810795e:	687b      	ldr	r3, [r7, #4]
 8107960:	68fa      	ldr	r2, [r7, #12]
 8107962:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8107964:	683b      	ldr	r3, [r7, #0]
 8107966:	685a      	ldr	r2, [r3, #4]
 8107968:	687b      	ldr	r3, [r7, #4]
 810796a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 810796c:	687b      	ldr	r3, [r7, #4]
 810796e:	693a      	ldr	r2, [r7, #16]
 8107970:	621a      	str	r2, [r3, #32]
}
 8107972:	bf00      	nop
 8107974:	371c      	adds	r7, #28
 8107976:	46bd      	mov	sp, r7
 8107978:	f85d 7b04 	ldr.w	r7, [sp], #4
 810797c:	4770      	bx	lr
 810797e:	bf00      	nop
 8107980:	40010000 	.word	0x40010000
 8107984:	40010400 	.word	0x40010400
 8107988:	40014000 	.word	0x40014000
 810798c:	40014400 	.word	0x40014400
 8107990:	40014800 	.word	0x40014800

08107994 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8107994:	b480      	push	{r7}
 8107996:	b087      	sub	sp, #28
 8107998:	af00      	add	r7, sp, #0
 810799a:	6078      	str	r0, [r7, #4]
 810799c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 810799e:	687b      	ldr	r3, [r7, #4]
 81079a0:	6a1b      	ldr	r3, [r3, #32]
 81079a2:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 81079a6:	687b      	ldr	r3, [r7, #4]
 81079a8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 81079aa:	687b      	ldr	r3, [r7, #4]
 81079ac:	6a1b      	ldr	r3, [r3, #32]
 81079ae:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 81079b0:	687b      	ldr	r3, [r7, #4]
 81079b2:	685b      	ldr	r3, [r3, #4]
 81079b4:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 81079b6:	687b      	ldr	r3, [r7, #4]
 81079b8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 81079ba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 81079bc:	68fb      	ldr	r3, [r7, #12]
 81079be:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 81079c2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 81079c6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 81079c8:	683b      	ldr	r3, [r7, #0]
 81079ca:	681b      	ldr	r3, [r3, #0]
 81079cc:	68fa      	ldr	r2, [r7, #12]
 81079ce:	4313      	orrs	r3, r2
 81079d0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 81079d2:	693b      	ldr	r3, [r7, #16]
 81079d4:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 81079d8:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 81079da:	683b      	ldr	r3, [r7, #0]
 81079dc:	689b      	ldr	r3, [r3, #8]
 81079de:	041b      	lsls	r3, r3, #16
 81079e0:	693a      	ldr	r2, [r7, #16]
 81079e2:	4313      	orrs	r3, r2
 81079e4:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 81079e6:	687b      	ldr	r3, [r7, #4]
 81079e8:	4a17      	ldr	r2, [pc, #92]	; (8107a48 <TIM_OC5_SetConfig+0xb4>)
 81079ea:	4293      	cmp	r3, r2
 81079ec:	d00f      	beq.n	8107a0e <TIM_OC5_SetConfig+0x7a>
 81079ee:	687b      	ldr	r3, [r7, #4]
 81079f0:	4a16      	ldr	r2, [pc, #88]	; (8107a4c <TIM_OC5_SetConfig+0xb8>)
 81079f2:	4293      	cmp	r3, r2
 81079f4:	d00b      	beq.n	8107a0e <TIM_OC5_SetConfig+0x7a>
 81079f6:	687b      	ldr	r3, [r7, #4]
 81079f8:	4a15      	ldr	r2, [pc, #84]	; (8107a50 <TIM_OC5_SetConfig+0xbc>)
 81079fa:	4293      	cmp	r3, r2
 81079fc:	d007      	beq.n	8107a0e <TIM_OC5_SetConfig+0x7a>
 81079fe:	687b      	ldr	r3, [r7, #4]
 8107a00:	4a14      	ldr	r2, [pc, #80]	; (8107a54 <TIM_OC5_SetConfig+0xc0>)
 8107a02:	4293      	cmp	r3, r2
 8107a04:	d003      	beq.n	8107a0e <TIM_OC5_SetConfig+0x7a>
 8107a06:	687b      	ldr	r3, [r7, #4]
 8107a08:	4a13      	ldr	r2, [pc, #76]	; (8107a58 <TIM_OC5_SetConfig+0xc4>)
 8107a0a:	4293      	cmp	r3, r2
 8107a0c:	d109      	bne.n	8107a22 <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8107a0e:	697b      	ldr	r3, [r7, #20]
 8107a10:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8107a14:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8107a16:	683b      	ldr	r3, [r7, #0]
 8107a18:	695b      	ldr	r3, [r3, #20]
 8107a1a:	021b      	lsls	r3, r3, #8
 8107a1c:	697a      	ldr	r2, [r7, #20]
 8107a1e:	4313      	orrs	r3, r2
 8107a20:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8107a22:	687b      	ldr	r3, [r7, #4]
 8107a24:	697a      	ldr	r2, [r7, #20]
 8107a26:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8107a28:	687b      	ldr	r3, [r7, #4]
 8107a2a:	68fa      	ldr	r2, [r7, #12]
 8107a2c:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8107a2e:	683b      	ldr	r3, [r7, #0]
 8107a30:	685a      	ldr	r2, [r3, #4]
 8107a32:	687b      	ldr	r3, [r7, #4]
 8107a34:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8107a36:	687b      	ldr	r3, [r7, #4]
 8107a38:	693a      	ldr	r2, [r7, #16]
 8107a3a:	621a      	str	r2, [r3, #32]
}
 8107a3c:	bf00      	nop
 8107a3e:	371c      	adds	r7, #28
 8107a40:	46bd      	mov	sp, r7
 8107a42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8107a46:	4770      	bx	lr
 8107a48:	40010000 	.word	0x40010000
 8107a4c:	40010400 	.word	0x40010400
 8107a50:	40014000 	.word	0x40014000
 8107a54:	40014400 	.word	0x40014400
 8107a58:	40014800 	.word	0x40014800

08107a5c <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8107a5c:	b480      	push	{r7}
 8107a5e:	b087      	sub	sp, #28
 8107a60:	af00      	add	r7, sp, #0
 8107a62:	6078      	str	r0, [r7, #4]
 8107a64:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8107a66:	687b      	ldr	r3, [r7, #4]
 8107a68:	6a1b      	ldr	r3, [r3, #32]
 8107a6a:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8107a6e:	687b      	ldr	r3, [r7, #4]
 8107a70:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8107a72:	687b      	ldr	r3, [r7, #4]
 8107a74:	6a1b      	ldr	r3, [r3, #32]
 8107a76:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8107a78:	687b      	ldr	r3, [r7, #4]
 8107a7a:	685b      	ldr	r3, [r3, #4]
 8107a7c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8107a7e:	687b      	ldr	r3, [r7, #4]
 8107a80:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8107a82:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8107a84:	68fb      	ldr	r3, [r7, #12]
 8107a86:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8107a8a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8107a8e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8107a90:	683b      	ldr	r3, [r7, #0]
 8107a92:	681b      	ldr	r3, [r3, #0]
 8107a94:	021b      	lsls	r3, r3, #8
 8107a96:	68fa      	ldr	r2, [r7, #12]
 8107a98:	4313      	orrs	r3, r2
 8107a9a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8107a9c:	693b      	ldr	r3, [r7, #16]
 8107a9e:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8107aa2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8107aa4:	683b      	ldr	r3, [r7, #0]
 8107aa6:	689b      	ldr	r3, [r3, #8]
 8107aa8:	051b      	lsls	r3, r3, #20
 8107aaa:	693a      	ldr	r2, [r7, #16]
 8107aac:	4313      	orrs	r3, r2
 8107aae:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8107ab0:	687b      	ldr	r3, [r7, #4]
 8107ab2:	4a18      	ldr	r2, [pc, #96]	; (8107b14 <TIM_OC6_SetConfig+0xb8>)
 8107ab4:	4293      	cmp	r3, r2
 8107ab6:	d00f      	beq.n	8107ad8 <TIM_OC6_SetConfig+0x7c>
 8107ab8:	687b      	ldr	r3, [r7, #4]
 8107aba:	4a17      	ldr	r2, [pc, #92]	; (8107b18 <TIM_OC6_SetConfig+0xbc>)
 8107abc:	4293      	cmp	r3, r2
 8107abe:	d00b      	beq.n	8107ad8 <TIM_OC6_SetConfig+0x7c>
 8107ac0:	687b      	ldr	r3, [r7, #4]
 8107ac2:	4a16      	ldr	r2, [pc, #88]	; (8107b1c <TIM_OC6_SetConfig+0xc0>)
 8107ac4:	4293      	cmp	r3, r2
 8107ac6:	d007      	beq.n	8107ad8 <TIM_OC6_SetConfig+0x7c>
 8107ac8:	687b      	ldr	r3, [r7, #4]
 8107aca:	4a15      	ldr	r2, [pc, #84]	; (8107b20 <TIM_OC6_SetConfig+0xc4>)
 8107acc:	4293      	cmp	r3, r2
 8107ace:	d003      	beq.n	8107ad8 <TIM_OC6_SetConfig+0x7c>
 8107ad0:	687b      	ldr	r3, [r7, #4]
 8107ad2:	4a14      	ldr	r2, [pc, #80]	; (8107b24 <TIM_OC6_SetConfig+0xc8>)
 8107ad4:	4293      	cmp	r3, r2
 8107ad6:	d109      	bne.n	8107aec <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8107ad8:	697b      	ldr	r3, [r7, #20]
 8107ada:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8107ade:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8107ae0:	683b      	ldr	r3, [r7, #0]
 8107ae2:	695b      	ldr	r3, [r3, #20]
 8107ae4:	029b      	lsls	r3, r3, #10
 8107ae6:	697a      	ldr	r2, [r7, #20]
 8107ae8:	4313      	orrs	r3, r2
 8107aea:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8107aec:	687b      	ldr	r3, [r7, #4]
 8107aee:	697a      	ldr	r2, [r7, #20]
 8107af0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8107af2:	687b      	ldr	r3, [r7, #4]
 8107af4:	68fa      	ldr	r2, [r7, #12]
 8107af6:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8107af8:	683b      	ldr	r3, [r7, #0]
 8107afa:	685a      	ldr	r2, [r3, #4]
 8107afc:	687b      	ldr	r3, [r7, #4]
 8107afe:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8107b00:	687b      	ldr	r3, [r7, #4]
 8107b02:	693a      	ldr	r2, [r7, #16]
 8107b04:	621a      	str	r2, [r3, #32]
}
 8107b06:	bf00      	nop
 8107b08:	371c      	adds	r7, #28
 8107b0a:	46bd      	mov	sp, r7
 8107b0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8107b10:	4770      	bx	lr
 8107b12:	bf00      	nop
 8107b14:	40010000 	.word	0x40010000
 8107b18:	40010400 	.word	0x40010400
 8107b1c:	40014000 	.word	0x40014000
 8107b20:	40014400 	.word	0x40014400
 8107b24:	40014800 	.word	0x40014800

08107b28 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8107b28:	b480      	push	{r7}
 8107b2a:	b087      	sub	sp, #28
 8107b2c:	af00      	add	r7, sp, #0
 8107b2e:	60f8      	str	r0, [r7, #12]
 8107b30:	60b9      	str	r1, [r7, #8]
 8107b32:	607a      	str	r2, [r7, #4]
 8107b34:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8107b36:	68fb      	ldr	r3, [r7, #12]
 8107b38:	6a1b      	ldr	r3, [r3, #32]
 8107b3a:	f023 0201 	bic.w	r2, r3, #1
 8107b3e:	68fb      	ldr	r3, [r7, #12]
 8107b40:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8107b42:	68fb      	ldr	r3, [r7, #12]
 8107b44:	699b      	ldr	r3, [r3, #24]
 8107b46:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8107b48:	68fb      	ldr	r3, [r7, #12]
 8107b4a:	6a1b      	ldr	r3, [r3, #32]
 8107b4c:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8107b4e:	68fb      	ldr	r3, [r7, #12]
 8107b50:	4a28      	ldr	r2, [pc, #160]	; (8107bf4 <TIM_TI1_SetConfig+0xcc>)
 8107b52:	4293      	cmp	r3, r2
 8107b54:	d01b      	beq.n	8107b8e <TIM_TI1_SetConfig+0x66>
 8107b56:	68fb      	ldr	r3, [r7, #12]
 8107b58:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8107b5c:	d017      	beq.n	8107b8e <TIM_TI1_SetConfig+0x66>
 8107b5e:	68fb      	ldr	r3, [r7, #12]
 8107b60:	4a25      	ldr	r2, [pc, #148]	; (8107bf8 <TIM_TI1_SetConfig+0xd0>)
 8107b62:	4293      	cmp	r3, r2
 8107b64:	d013      	beq.n	8107b8e <TIM_TI1_SetConfig+0x66>
 8107b66:	68fb      	ldr	r3, [r7, #12]
 8107b68:	4a24      	ldr	r2, [pc, #144]	; (8107bfc <TIM_TI1_SetConfig+0xd4>)
 8107b6a:	4293      	cmp	r3, r2
 8107b6c:	d00f      	beq.n	8107b8e <TIM_TI1_SetConfig+0x66>
 8107b6e:	68fb      	ldr	r3, [r7, #12]
 8107b70:	4a23      	ldr	r2, [pc, #140]	; (8107c00 <TIM_TI1_SetConfig+0xd8>)
 8107b72:	4293      	cmp	r3, r2
 8107b74:	d00b      	beq.n	8107b8e <TIM_TI1_SetConfig+0x66>
 8107b76:	68fb      	ldr	r3, [r7, #12]
 8107b78:	4a22      	ldr	r2, [pc, #136]	; (8107c04 <TIM_TI1_SetConfig+0xdc>)
 8107b7a:	4293      	cmp	r3, r2
 8107b7c:	d007      	beq.n	8107b8e <TIM_TI1_SetConfig+0x66>
 8107b7e:	68fb      	ldr	r3, [r7, #12]
 8107b80:	4a21      	ldr	r2, [pc, #132]	; (8107c08 <TIM_TI1_SetConfig+0xe0>)
 8107b82:	4293      	cmp	r3, r2
 8107b84:	d003      	beq.n	8107b8e <TIM_TI1_SetConfig+0x66>
 8107b86:	68fb      	ldr	r3, [r7, #12]
 8107b88:	4a20      	ldr	r2, [pc, #128]	; (8107c0c <TIM_TI1_SetConfig+0xe4>)
 8107b8a:	4293      	cmp	r3, r2
 8107b8c:	d101      	bne.n	8107b92 <TIM_TI1_SetConfig+0x6a>
 8107b8e:	2301      	movs	r3, #1
 8107b90:	e000      	b.n	8107b94 <TIM_TI1_SetConfig+0x6c>
 8107b92:	2300      	movs	r3, #0
 8107b94:	2b00      	cmp	r3, #0
 8107b96:	d008      	beq.n	8107baa <TIM_TI1_SetConfig+0x82>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8107b98:	697b      	ldr	r3, [r7, #20]
 8107b9a:	f023 0303 	bic.w	r3, r3, #3
 8107b9e:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8107ba0:	697a      	ldr	r2, [r7, #20]
 8107ba2:	687b      	ldr	r3, [r7, #4]
 8107ba4:	4313      	orrs	r3, r2
 8107ba6:	617b      	str	r3, [r7, #20]
 8107ba8:	e003      	b.n	8107bb2 <TIM_TI1_SetConfig+0x8a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 8107baa:	697b      	ldr	r3, [r7, #20]
 8107bac:	f043 0301 	orr.w	r3, r3, #1
 8107bb0:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8107bb2:	697b      	ldr	r3, [r7, #20]
 8107bb4:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8107bb8:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8107bba:	683b      	ldr	r3, [r7, #0]
 8107bbc:	011b      	lsls	r3, r3, #4
 8107bbe:	b2db      	uxtb	r3, r3
 8107bc0:	697a      	ldr	r2, [r7, #20]
 8107bc2:	4313      	orrs	r3, r2
 8107bc4:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8107bc6:	693b      	ldr	r3, [r7, #16]
 8107bc8:	f023 030a 	bic.w	r3, r3, #10
 8107bcc:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8107bce:	68bb      	ldr	r3, [r7, #8]
 8107bd0:	f003 030a 	and.w	r3, r3, #10
 8107bd4:	693a      	ldr	r2, [r7, #16]
 8107bd6:	4313      	orrs	r3, r2
 8107bd8:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8107bda:	68fb      	ldr	r3, [r7, #12]
 8107bdc:	697a      	ldr	r2, [r7, #20]
 8107bde:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8107be0:	68fb      	ldr	r3, [r7, #12]
 8107be2:	693a      	ldr	r2, [r7, #16]
 8107be4:	621a      	str	r2, [r3, #32]
}
 8107be6:	bf00      	nop
 8107be8:	371c      	adds	r7, #28
 8107bea:	46bd      	mov	sp, r7
 8107bec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8107bf0:	4770      	bx	lr
 8107bf2:	bf00      	nop
 8107bf4:	40010000 	.word	0x40010000
 8107bf8:	40000400 	.word	0x40000400
 8107bfc:	40000800 	.word	0x40000800
 8107c00:	40000c00 	.word	0x40000c00
 8107c04:	40010400 	.word	0x40010400
 8107c08:	40001800 	.word	0x40001800
 8107c0c:	40014000 	.word	0x40014000

08107c10 <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8107c10:	b480      	push	{r7}
 8107c12:	b087      	sub	sp, #28
 8107c14:	af00      	add	r7, sp, #0
 8107c16:	60f8      	str	r0, [r7, #12]
 8107c18:	60b9      	str	r1, [r7, #8]
 8107c1a:	607a      	str	r2, [r7, #4]
 8107c1c:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8107c1e:	68fb      	ldr	r3, [r7, #12]
 8107c20:	6a1b      	ldr	r3, [r3, #32]
 8107c22:	f023 0210 	bic.w	r2, r3, #16
 8107c26:	68fb      	ldr	r3, [r7, #12]
 8107c28:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8107c2a:	68fb      	ldr	r3, [r7, #12]
 8107c2c:	699b      	ldr	r3, [r3, #24]
 8107c2e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8107c30:	68fb      	ldr	r3, [r7, #12]
 8107c32:	6a1b      	ldr	r3, [r3, #32]
 8107c34:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8107c36:	697b      	ldr	r3, [r7, #20]
 8107c38:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8107c3c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8107c3e:	687b      	ldr	r3, [r7, #4]
 8107c40:	021b      	lsls	r3, r3, #8
 8107c42:	697a      	ldr	r2, [r7, #20]
 8107c44:	4313      	orrs	r3, r2
 8107c46:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8107c48:	697b      	ldr	r3, [r7, #20]
 8107c4a:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8107c4e:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8107c50:	683b      	ldr	r3, [r7, #0]
 8107c52:	031b      	lsls	r3, r3, #12
 8107c54:	b29b      	uxth	r3, r3
 8107c56:	697a      	ldr	r2, [r7, #20]
 8107c58:	4313      	orrs	r3, r2
 8107c5a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8107c5c:	693b      	ldr	r3, [r7, #16]
 8107c5e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8107c62:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8107c64:	68bb      	ldr	r3, [r7, #8]
 8107c66:	011b      	lsls	r3, r3, #4
 8107c68:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 8107c6c:	693a      	ldr	r2, [r7, #16]
 8107c6e:	4313      	orrs	r3, r2
 8107c70:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8107c72:	68fb      	ldr	r3, [r7, #12]
 8107c74:	697a      	ldr	r2, [r7, #20]
 8107c76:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8107c78:	68fb      	ldr	r3, [r7, #12]
 8107c7a:	693a      	ldr	r2, [r7, #16]
 8107c7c:	621a      	str	r2, [r3, #32]
}
 8107c7e:	bf00      	nop
 8107c80:	371c      	adds	r7, #28
 8107c82:	46bd      	mov	sp, r7
 8107c84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8107c88:	4770      	bx	lr

08107c8a <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8107c8a:	b480      	push	{r7}
 8107c8c:	b087      	sub	sp, #28
 8107c8e:	af00      	add	r7, sp, #0
 8107c90:	60f8      	str	r0, [r7, #12]
 8107c92:	60b9      	str	r1, [r7, #8]
 8107c94:	607a      	str	r2, [r7, #4]
 8107c96:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8107c98:	68fb      	ldr	r3, [r7, #12]
 8107c9a:	6a1b      	ldr	r3, [r3, #32]
 8107c9c:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8107ca0:	68fb      	ldr	r3, [r7, #12]
 8107ca2:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8107ca4:	68fb      	ldr	r3, [r7, #12]
 8107ca6:	69db      	ldr	r3, [r3, #28]
 8107ca8:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8107caa:	68fb      	ldr	r3, [r7, #12]
 8107cac:	6a1b      	ldr	r3, [r3, #32]
 8107cae:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 8107cb0:	697b      	ldr	r3, [r7, #20]
 8107cb2:	f023 0303 	bic.w	r3, r3, #3
 8107cb6:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 8107cb8:	697a      	ldr	r2, [r7, #20]
 8107cba:	687b      	ldr	r3, [r7, #4]
 8107cbc:	4313      	orrs	r3, r2
 8107cbe:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 8107cc0:	697b      	ldr	r3, [r7, #20]
 8107cc2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8107cc6:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8107cc8:	683b      	ldr	r3, [r7, #0]
 8107cca:	011b      	lsls	r3, r3, #4
 8107ccc:	b2db      	uxtb	r3, r3
 8107cce:	697a      	ldr	r2, [r7, #20]
 8107cd0:	4313      	orrs	r3, r2
 8107cd2:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 8107cd4:	693b      	ldr	r3, [r7, #16]
 8107cd6:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 8107cda:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 8107cdc:	68bb      	ldr	r3, [r7, #8]
 8107cde:	021b      	lsls	r3, r3, #8
 8107ce0:	f403 6320 	and.w	r3, r3, #2560	; 0xa00
 8107ce4:	693a      	ldr	r2, [r7, #16]
 8107ce6:	4313      	orrs	r3, r2
 8107ce8:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8107cea:	68fb      	ldr	r3, [r7, #12]
 8107cec:	697a      	ldr	r2, [r7, #20]
 8107cee:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 8107cf0:	68fb      	ldr	r3, [r7, #12]
 8107cf2:	693a      	ldr	r2, [r7, #16]
 8107cf4:	621a      	str	r2, [r3, #32]
}
 8107cf6:	bf00      	nop
 8107cf8:	371c      	adds	r7, #28
 8107cfa:	46bd      	mov	sp, r7
 8107cfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8107d00:	4770      	bx	lr

08107d02 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8107d02:	b480      	push	{r7}
 8107d04:	b087      	sub	sp, #28
 8107d06:	af00      	add	r7, sp, #0
 8107d08:	60f8      	str	r0, [r7, #12]
 8107d0a:	60b9      	str	r1, [r7, #8]
 8107d0c:	607a      	str	r2, [r7, #4]
 8107d0e:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8107d10:	68fb      	ldr	r3, [r7, #12]
 8107d12:	6a1b      	ldr	r3, [r3, #32]
 8107d14:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8107d18:	68fb      	ldr	r3, [r7, #12]
 8107d1a:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8107d1c:	68fb      	ldr	r3, [r7, #12]
 8107d1e:	69db      	ldr	r3, [r3, #28]
 8107d20:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8107d22:	68fb      	ldr	r3, [r7, #12]
 8107d24:	6a1b      	ldr	r3, [r3, #32]
 8107d26:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 8107d28:	697b      	ldr	r3, [r7, #20]
 8107d2a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8107d2e:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 8107d30:	687b      	ldr	r3, [r7, #4]
 8107d32:	021b      	lsls	r3, r3, #8
 8107d34:	697a      	ldr	r2, [r7, #20]
 8107d36:	4313      	orrs	r3, r2
 8107d38:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8107d3a:	697b      	ldr	r3, [r7, #20]
 8107d3c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8107d40:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8107d42:	683b      	ldr	r3, [r7, #0]
 8107d44:	031b      	lsls	r3, r3, #12
 8107d46:	b29b      	uxth	r3, r3
 8107d48:	697a      	ldr	r2, [r7, #20]
 8107d4a:	4313      	orrs	r3, r2
 8107d4c:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 8107d4e:	693b      	ldr	r3, [r7, #16]
 8107d50:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 8107d54:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 8107d56:	68bb      	ldr	r3, [r7, #8]
 8107d58:	031b      	lsls	r3, r3, #12
 8107d5a:	f403 4320 	and.w	r3, r3, #40960	; 0xa000
 8107d5e:	693a      	ldr	r2, [r7, #16]
 8107d60:	4313      	orrs	r3, r2
 8107d62:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8107d64:	68fb      	ldr	r3, [r7, #12]
 8107d66:	697a      	ldr	r2, [r7, #20]
 8107d68:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 8107d6a:	68fb      	ldr	r3, [r7, #12]
 8107d6c:	693a      	ldr	r2, [r7, #16]
 8107d6e:	621a      	str	r2, [r3, #32]
}
 8107d70:	bf00      	nop
 8107d72:	371c      	adds	r7, #28
 8107d74:	46bd      	mov	sp, r7
 8107d76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8107d7a:	4770      	bx	lr

08107d7c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8107d7c:	b480      	push	{r7}
 8107d7e:	b085      	sub	sp, #20
 8107d80:	af00      	add	r7, sp, #0
 8107d82:	6078      	str	r0, [r7, #4]
 8107d84:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8107d86:	687b      	ldr	r3, [r7, #4]
 8107d88:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8107d8c:	2b01      	cmp	r3, #1
 8107d8e:	d101      	bne.n	8107d94 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8107d90:	2302      	movs	r3, #2
 8107d92:	e06d      	b.n	8107e70 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 8107d94:	687b      	ldr	r3, [r7, #4]
 8107d96:	2201      	movs	r2, #1
 8107d98:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8107d9c:	687b      	ldr	r3, [r7, #4]
 8107d9e:	2202      	movs	r2, #2
 8107da0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8107da4:	687b      	ldr	r3, [r7, #4]
 8107da6:	681b      	ldr	r3, [r3, #0]
 8107da8:	685b      	ldr	r3, [r3, #4]
 8107daa:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8107dac:	687b      	ldr	r3, [r7, #4]
 8107dae:	681b      	ldr	r3, [r3, #0]
 8107db0:	689b      	ldr	r3, [r3, #8]
 8107db2:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8107db4:	687b      	ldr	r3, [r7, #4]
 8107db6:	681b      	ldr	r3, [r3, #0]
 8107db8:	4a30      	ldr	r2, [pc, #192]	; (8107e7c <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8107dba:	4293      	cmp	r3, r2
 8107dbc:	d004      	beq.n	8107dc8 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8107dbe:	687b      	ldr	r3, [r7, #4]
 8107dc0:	681b      	ldr	r3, [r3, #0]
 8107dc2:	4a2f      	ldr	r2, [pc, #188]	; (8107e80 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8107dc4:	4293      	cmp	r3, r2
 8107dc6:	d108      	bne.n	8107dda <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8107dc8:	68fb      	ldr	r3, [r7, #12]
 8107dca:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8107dce:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8107dd0:	683b      	ldr	r3, [r7, #0]
 8107dd2:	685b      	ldr	r3, [r3, #4]
 8107dd4:	68fa      	ldr	r2, [r7, #12]
 8107dd6:	4313      	orrs	r3, r2
 8107dd8:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8107dda:	68fb      	ldr	r3, [r7, #12]
 8107ddc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8107de0:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8107de2:	683b      	ldr	r3, [r7, #0]
 8107de4:	681b      	ldr	r3, [r3, #0]
 8107de6:	68fa      	ldr	r2, [r7, #12]
 8107de8:	4313      	orrs	r3, r2
 8107dea:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8107dec:	687b      	ldr	r3, [r7, #4]
 8107dee:	681b      	ldr	r3, [r3, #0]
 8107df0:	68fa      	ldr	r2, [r7, #12]
 8107df2:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8107df4:	687b      	ldr	r3, [r7, #4]
 8107df6:	681b      	ldr	r3, [r3, #0]
 8107df8:	4a20      	ldr	r2, [pc, #128]	; (8107e7c <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8107dfa:	4293      	cmp	r3, r2
 8107dfc:	d022      	beq.n	8107e44 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8107dfe:	687b      	ldr	r3, [r7, #4]
 8107e00:	681b      	ldr	r3, [r3, #0]
 8107e02:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8107e06:	d01d      	beq.n	8107e44 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8107e08:	687b      	ldr	r3, [r7, #4]
 8107e0a:	681b      	ldr	r3, [r3, #0]
 8107e0c:	4a1d      	ldr	r2, [pc, #116]	; (8107e84 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8107e0e:	4293      	cmp	r3, r2
 8107e10:	d018      	beq.n	8107e44 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8107e12:	687b      	ldr	r3, [r7, #4]
 8107e14:	681b      	ldr	r3, [r3, #0]
 8107e16:	4a1c      	ldr	r2, [pc, #112]	; (8107e88 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8107e18:	4293      	cmp	r3, r2
 8107e1a:	d013      	beq.n	8107e44 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8107e1c:	687b      	ldr	r3, [r7, #4]
 8107e1e:	681b      	ldr	r3, [r3, #0]
 8107e20:	4a1a      	ldr	r2, [pc, #104]	; (8107e8c <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8107e22:	4293      	cmp	r3, r2
 8107e24:	d00e      	beq.n	8107e44 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8107e26:	687b      	ldr	r3, [r7, #4]
 8107e28:	681b      	ldr	r3, [r3, #0]
 8107e2a:	4a15      	ldr	r2, [pc, #84]	; (8107e80 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8107e2c:	4293      	cmp	r3, r2
 8107e2e:	d009      	beq.n	8107e44 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8107e30:	687b      	ldr	r3, [r7, #4]
 8107e32:	681b      	ldr	r3, [r3, #0]
 8107e34:	4a16      	ldr	r2, [pc, #88]	; (8107e90 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8107e36:	4293      	cmp	r3, r2
 8107e38:	d004      	beq.n	8107e44 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8107e3a:	687b      	ldr	r3, [r7, #4]
 8107e3c:	681b      	ldr	r3, [r3, #0]
 8107e3e:	4a15      	ldr	r2, [pc, #84]	; (8107e94 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8107e40:	4293      	cmp	r3, r2
 8107e42:	d10c      	bne.n	8107e5e <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8107e44:	68bb      	ldr	r3, [r7, #8]
 8107e46:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8107e4a:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8107e4c:	683b      	ldr	r3, [r7, #0]
 8107e4e:	689b      	ldr	r3, [r3, #8]
 8107e50:	68ba      	ldr	r2, [r7, #8]
 8107e52:	4313      	orrs	r3, r2
 8107e54:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8107e56:	687b      	ldr	r3, [r7, #4]
 8107e58:	681b      	ldr	r3, [r3, #0]
 8107e5a:	68ba      	ldr	r2, [r7, #8]
 8107e5c:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8107e5e:	687b      	ldr	r3, [r7, #4]
 8107e60:	2201      	movs	r2, #1
 8107e62:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8107e66:	687b      	ldr	r3, [r7, #4]
 8107e68:	2200      	movs	r2, #0
 8107e6a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8107e6e:	2300      	movs	r3, #0
}
 8107e70:	4618      	mov	r0, r3
 8107e72:	3714      	adds	r7, #20
 8107e74:	46bd      	mov	sp, r7
 8107e76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8107e7a:	4770      	bx	lr
 8107e7c:	40010000 	.word	0x40010000
 8107e80:	40010400 	.word	0x40010400
 8107e84:	40000400 	.word	0x40000400
 8107e88:	40000800 	.word	0x40000800
 8107e8c:	40000c00 	.word	0x40000c00
 8107e90:	40001800 	.word	0x40001800
 8107e94:	40014000 	.word	0x40014000

08107e98 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8107e98:	b480      	push	{r7}
 8107e9a:	b085      	sub	sp, #20
 8107e9c:	af00      	add	r7, sp, #0
 8107e9e:	6078      	str	r0, [r7, #4]
 8107ea0:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8107ea2:	2300      	movs	r3, #0
 8107ea4:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8107ea6:	687b      	ldr	r3, [r7, #4]
 8107ea8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8107eac:	2b01      	cmp	r3, #1
 8107eae:	d101      	bne.n	8107eb4 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8107eb0:	2302      	movs	r3, #2
 8107eb2:	e065      	b.n	8107f80 <HAL_TIMEx_ConfigBreakDeadTime+0xe8>
 8107eb4:	687b      	ldr	r3, [r7, #4]
 8107eb6:	2201      	movs	r2, #1
 8107eb8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8107ebc:	68fb      	ldr	r3, [r7, #12]
 8107ebe:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8107ec2:	683b      	ldr	r3, [r7, #0]
 8107ec4:	68db      	ldr	r3, [r3, #12]
 8107ec6:	4313      	orrs	r3, r2
 8107ec8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8107eca:	68fb      	ldr	r3, [r7, #12]
 8107ecc:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8107ed0:	683b      	ldr	r3, [r7, #0]
 8107ed2:	689b      	ldr	r3, [r3, #8]
 8107ed4:	4313      	orrs	r3, r2
 8107ed6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8107ed8:	68fb      	ldr	r3, [r7, #12]
 8107eda:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8107ede:	683b      	ldr	r3, [r7, #0]
 8107ee0:	685b      	ldr	r3, [r3, #4]
 8107ee2:	4313      	orrs	r3, r2
 8107ee4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8107ee6:	68fb      	ldr	r3, [r7, #12]
 8107ee8:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8107eec:	683b      	ldr	r3, [r7, #0]
 8107eee:	681b      	ldr	r3, [r3, #0]
 8107ef0:	4313      	orrs	r3, r2
 8107ef2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8107ef4:	68fb      	ldr	r3, [r7, #12]
 8107ef6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8107efa:	683b      	ldr	r3, [r7, #0]
 8107efc:	691b      	ldr	r3, [r3, #16]
 8107efe:	4313      	orrs	r3, r2
 8107f00:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8107f02:	68fb      	ldr	r3, [r7, #12]
 8107f04:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8107f08:	683b      	ldr	r3, [r7, #0]
 8107f0a:	695b      	ldr	r3, [r3, #20]
 8107f0c:	4313      	orrs	r3, r2
 8107f0e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8107f10:	68fb      	ldr	r3, [r7, #12]
 8107f12:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8107f16:	683b      	ldr	r3, [r7, #0]
 8107f18:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8107f1a:	4313      	orrs	r3, r2
 8107f1c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8107f1e:	68fb      	ldr	r3, [r7, #12]
 8107f20:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 8107f24:	683b      	ldr	r3, [r7, #0]
 8107f26:	699b      	ldr	r3, [r3, #24]
 8107f28:	041b      	lsls	r3, r3, #16
 8107f2a:	4313      	orrs	r3, r2
 8107f2c:	60fb      	str	r3, [r7, #12]
    /* Set BREAK AF mode */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
  }

#endif /* TIM_BDTR_BKBID */
  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8107f2e:	687b      	ldr	r3, [r7, #4]
 8107f30:	681b      	ldr	r3, [r3, #0]
 8107f32:	4a16      	ldr	r2, [pc, #88]	; (8107f8c <HAL_TIMEx_ConfigBreakDeadTime+0xf4>)
 8107f34:	4293      	cmp	r3, r2
 8107f36:	d004      	beq.n	8107f42 <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 8107f38:	687b      	ldr	r3, [r7, #4]
 8107f3a:	681b      	ldr	r3, [r3, #0]
 8107f3c:	4a14      	ldr	r2, [pc, #80]	; (8107f90 <HAL_TIMEx_ConfigBreakDeadTime+0xf8>)
 8107f3e:	4293      	cmp	r3, r2
 8107f40:	d115      	bne.n	8107f6e <HAL_TIMEx_ConfigBreakDeadTime+0xd6>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8107f42:	68fb      	ldr	r3, [r7, #12]
 8107f44:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 8107f48:	683b      	ldr	r3, [r7, #0]
 8107f4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8107f4c:	051b      	lsls	r3, r3, #20
 8107f4e:	4313      	orrs	r3, r2
 8107f50:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8107f52:	68fb      	ldr	r3, [r7, #12]
 8107f54:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8107f58:	683b      	ldr	r3, [r7, #0]
 8107f5a:	69db      	ldr	r3, [r3, #28]
 8107f5c:	4313      	orrs	r3, r2
 8107f5e:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8107f60:	68fb      	ldr	r3, [r7, #12]
 8107f62:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8107f66:	683b      	ldr	r3, [r7, #0]
 8107f68:	6a1b      	ldr	r3, [r3, #32]
 8107f6a:	4313      	orrs	r3, r2
 8107f6c:	60fb      	str	r3, [r7, #12]
    }
#endif /* TIM_BDTR_BKBID */
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8107f6e:	687b      	ldr	r3, [r7, #4]
 8107f70:	681b      	ldr	r3, [r3, #0]
 8107f72:	68fa      	ldr	r2, [r7, #12]
 8107f74:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8107f76:	687b      	ldr	r3, [r7, #4]
 8107f78:	2200      	movs	r2, #0
 8107f7a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8107f7e:	2300      	movs	r3, #0
}
 8107f80:	4618      	mov	r0, r3
 8107f82:	3714      	adds	r7, #20
 8107f84:	46bd      	mov	sp, r7
 8107f86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8107f8a:	4770      	bx	lr
 8107f8c:	40010000 	.word	0x40010000
 8107f90:	40010400 	.word	0x40010400

08107f94 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8107f94:	b580      	push	{r7, lr}
 8107f96:	b082      	sub	sp, #8
 8107f98:	af00      	add	r7, sp, #0
 8107f9a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8107f9c:	687b      	ldr	r3, [r7, #4]
 8107f9e:	2b00      	cmp	r3, #0
 8107fa0:	d101      	bne.n	8107fa6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8107fa2:	2301      	movs	r3, #1
 8107fa4:	e042      	b.n	810802c <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8107fa6:	687b      	ldr	r3, [r7, #4]
 8107fa8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8107fac:	2b00      	cmp	r3, #0
 8107fae:	d106      	bne.n	8107fbe <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8107fb0:	687b      	ldr	r3, [r7, #4]
 8107fb2:	2200      	movs	r2, #0
 8107fb4:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8107fb8:	6878      	ldr	r0, [r7, #4]
 8107fba:	f7f9 fb65 	bl	8101688 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8107fbe:	687b      	ldr	r3, [r7, #4]
 8107fc0:	2224      	movs	r2, #36	; 0x24
 8107fc2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 8107fc6:	687b      	ldr	r3, [r7, #4]
 8107fc8:	681b      	ldr	r3, [r3, #0]
 8107fca:	681a      	ldr	r2, [r3, #0]
 8107fcc:	687b      	ldr	r3, [r7, #4]
 8107fce:	681b      	ldr	r3, [r3, #0]
 8107fd0:	f022 0201 	bic.w	r2, r2, #1
 8107fd4:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8107fd6:	6878      	ldr	r0, [r7, #4]
 8107fd8:	f000 f82c 	bl	8108034 <UART_SetConfig>
 8107fdc:	4603      	mov	r3, r0
 8107fde:	2b01      	cmp	r3, #1
 8107fe0:	d101      	bne.n	8107fe6 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8107fe2:	2301      	movs	r3, #1
 8107fe4:	e022      	b.n	810802c <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8107fe6:	687b      	ldr	r3, [r7, #4]
 8107fe8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8107fea:	2b00      	cmp	r3, #0
 8107fec:	d002      	beq.n	8107ff4 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8107fee:	6878      	ldr	r0, [r7, #4]
 8107ff0:	f000 fd88 	bl	8108b04 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8107ff4:	687b      	ldr	r3, [r7, #4]
 8107ff6:	681b      	ldr	r3, [r3, #0]
 8107ff8:	685a      	ldr	r2, [r3, #4]
 8107ffa:	687b      	ldr	r3, [r7, #4]
 8107ffc:	681b      	ldr	r3, [r3, #0]
 8107ffe:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8108002:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8108004:	687b      	ldr	r3, [r7, #4]
 8108006:	681b      	ldr	r3, [r3, #0]
 8108008:	689a      	ldr	r2, [r3, #8]
 810800a:	687b      	ldr	r3, [r7, #4]
 810800c:	681b      	ldr	r3, [r3, #0]
 810800e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8108012:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8108014:	687b      	ldr	r3, [r7, #4]
 8108016:	681b      	ldr	r3, [r3, #0]
 8108018:	681a      	ldr	r2, [r3, #0]
 810801a:	687b      	ldr	r3, [r7, #4]
 810801c:	681b      	ldr	r3, [r3, #0]
 810801e:	f042 0201 	orr.w	r2, r2, #1
 8108022:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8108024:	6878      	ldr	r0, [r7, #4]
 8108026:	f000 fe0f 	bl	8108c48 <UART_CheckIdleState>
 810802a:	4603      	mov	r3, r0
}
 810802c:	4618      	mov	r0, r3
 810802e:	3708      	adds	r7, #8
 8108030:	46bd      	mov	sp, r7
 8108032:	bd80      	pop	{r7, pc}

08108034 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8108034:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8108038:	b092      	sub	sp, #72	; 0x48
 810803a:	af00      	add	r7, sp, #0
 810803c:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 810803e:	2300      	movs	r3, #0
 8108040:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8108044:	697b      	ldr	r3, [r7, #20]
 8108046:	689a      	ldr	r2, [r3, #8]
 8108048:	697b      	ldr	r3, [r7, #20]
 810804a:	691b      	ldr	r3, [r3, #16]
 810804c:	431a      	orrs	r2, r3
 810804e:	697b      	ldr	r3, [r7, #20]
 8108050:	695b      	ldr	r3, [r3, #20]
 8108052:	431a      	orrs	r2, r3
 8108054:	697b      	ldr	r3, [r7, #20]
 8108056:	69db      	ldr	r3, [r3, #28]
 8108058:	4313      	orrs	r3, r2
 810805a:	647b      	str	r3, [r7, #68]	; 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 810805c:	697b      	ldr	r3, [r7, #20]
 810805e:	681b      	ldr	r3, [r3, #0]
 8108060:	681a      	ldr	r2, [r3, #0]
 8108062:	4bbd      	ldr	r3, [pc, #756]	; (8108358 <UART_SetConfig+0x324>)
 8108064:	4013      	ands	r3, r2
 8108066:	697a      	ldr	r2, [r7, #20]
 8108068:	6812      	ldr	r2, [r2, #0]
 810806a:	6c79      	ldr	r1, [r7, #68]	; 0x44
 810806c:	430b      	orrs	r3, r1
 810806e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8108070:	697b      	ldr	r3, [r7, #20]
 8108072:	681b      	ldr	r3, [r3, #0]
 8108074:	685b      	ldr	r3, [r3, #4]
 8108076:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 810807a:	697b      	ldr	r3, [r7, #20]
 810807c:	68da      	ldr	r2, [r3, #12]
 810807e:	697b      	ldr	r3, [r7, #20]
 8108080:	681b      	ldr	r3, [r3, #0]
 8108082:	430a      	orrs	r2, r1
 8108084:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8108086:	697b      	ldr	r3, [r7, #20]
 8108088:	699b      	ldr	r3, [r3, #24]
 810808a:	647b      	str	r3, [r7, #68]	; 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 810808c:	697b      	ldr	r3, [r7, #20]
 810808e:	681b      	ldr	r3, [r3, #0]
 8108090:	4ab2      	ldr	r2, [pc, #712]	; (810835c <UART_SetConfig+0x328>)
 8108092:	4293      	cmp	r3, r2
 8108094:	d004      	beq.n	81080a0 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8108096:	697b      	ldr	r3, [r7, #20]
 8108098:	6a1b      	ldr	r3, [r3, #32]
 810809a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 810809c:	4313      	orrs	r3, r2
 810809e:	647b      	str	r3, [r7, #68]	; 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 81080a0:	697b      	ldr	r3, [r7, #20]
 81080a2:	681b      	ldr	r3, [r3, #0]
 81080a4:	689b      	ldr	r3, [r3, #8]
 81080a6:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 81080aa:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 81080ae:	697a      	ldr	r2, [r7, #20]
 81080b0:	6812      	ldr	r2, [r2, #0]
 81080b2:	6c79      	ldr	r1, [r7, #68]	; 0x44
 81080b4:	430b      	orrs	r3, r1
 81080b6:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 81080b8:	697b      	ldr	r3, [r7, #20]
 81080ba:	681b      	ldr	r3, [r3, #0]
 81080bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 81080be:	f023 010f 	bic.w	r1, r3, #15
 81080c2:	697b      	ldr	r3, [r7, #20]
 81080c4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 81080c6:	697b      	ldr	r3, [r7, #20]
 81080c8:	681b      	ldr	r3, [r3, #0]
 81080ca:	430a      	orrs	r2, r1
 81080cc:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 81080ce:	697b      	ldr	r3, [r7, #20]
 81080d0:	681b      	ldr	r3, [r3, #0]
 81080d2:	4aa3      	ldr	r2, [pc, #652]	; (8108360 <UART_SetConfig+0x32c>)
 81080d4:	4293      	cmp	r3, r2
 81080d6:	d177      	bne.n	81081c8 <UART_SetConfig+0x194>
 81080d8:	4ba2      	ldr	r3, [pc, #648]	; (8108364 <UART_SetConfig+0x330>)
 81080da:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 81080dc:	f003 0338 	and.w	r3, r3, #56	; 0x38
 81080e0:	2b28      	cmp	r3, #40	; 0x28
 81080e2:	d86d      	bhi.n	81081c0 <UART_SetConfig+0x18c>
 81080e4:	a201      	add	r2, pc, #4	; (adr r2, 81080ec <UART_SetConfig+0xb8>)
 81080e6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 81080ea:	bf00      	nop
 81080ec:	08108191 	.word	0x08108191
 81080f0:	081081c1 	.word	0x081081c1
 81080f4:	081081c1 	.word	0x081081c1
 81080f8:	081081c1 	.word	0x081081c1
 81080fc:	081081c1 	.word	0x081081c1
 8108100:	081081c1 	.word	0x081081c1
 8108104:	081081c1 	.word	0x081081c1
 8108108:	081081c1 	.word	0x081081c1
 810810c:	08108199 	.word	0x08108199
 8108110:	081081c1 	.word	0x081081c1
 8108114:	081081c1 	.word	0x081081c1
 8108118:	081081c1 	.word	0x081081c1
 810811c:	081081c1 	.word	0x081081c1
 8108120:	081081c1 	.word	0x081081c1
 8108124:	081081c1 	.word	0x081081c1
 8108128:	081081c1 	.word	0x081081c1
 810812c:	081081a1 	.word	0x081081a1
 8108130:	081081c1 	.word	0x081081c1
 8108134:	081081c1 	.word	0x081081c1
 8108138:	081081c1 	.word	0x081081c1
 810813c:	081081c1 	.word	0x081081c1
 8108140:	081081c1 	.word	0x081081c1
 8108144:	081081c1 	.word	0x081081c1
 8108148:	081081c1 	.word	0x081081c1
 810814c:	081081a9 	.word	0x081081a9
 8108150:	081081c1 	.word	0x081081c1
 8108154:	081081c1 	.word	0x081081c1
 8108158:	081081c1 	.word	0x081081c1
 810815c:	081081c1 	.word	0x081081c1
 8108160:	081081c1 	.word	0x081081c1
 8108164:	081081c1 	.word	0x081081c1
 8108168:	081081c1 	.word	0x081081c1
 810816c:	081081b1 	.word	0x081081b1
 8108170:	081081c1 	.word	0x081081c1
 8108174:	081081c1 	.word	0x081081c1
 8108178:	081081c1 	.word	0x081081c1
 810817c:	081081c1 	.word	0x081081c1
 8108180:	081081c1 	.word	0x081081c1
 8108184:	081081c1 	.word	0x081081c1
 8108188:	081081c1 	.word	0x081081c1
 810818c:	081081b9 	.word	0x081081b9
 8108190:	2301      	movs	r3, #1
 8108192:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8108196:	e220      	b.n	81085da <UART_SetConfig+0x5a6>
 8108198:	2304      	movs	r3, #4
 810819a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 810819e:	e21c      	b.n	81085da <UART_SetConfig+0x5a6>
 81081a0:	2308      	movs	r3, #8
 81081a2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 81081a6:	e218      	b.n	81085da <UART_SetConfig+0x5a6>
 81081a8:	2310      	movs	r3, #16
 81081aa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 81081ae:	e214      	b.n	81085da <UART_SetConfig+0x5a6>
 81081b0:	2320      	movs	r3, #32
 81081b2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 81081b6:	e210      	b.n	81085da <UART_SetConfig+0x5a6>
 81081b8:	2340      	movs	r3, #64	; 0x40
 81081ba:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 81081be:	e20c      	b.n	81085da <UART_SetConfig+0x5a6>
 81081c0:	2380      	movs	r3, #128	; 0x80
 81081c2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 81081c6:	e208      	b.n	81085da <UART_SetConfig+0x5a6>
 81081c8:	697b      	ldr	r3, [r7, #20]
 81081ca:	681b      	ldr	r3, [r3, #0]
 81081cc:	4a66      	ldr	r2, [pc, #408]	; (8108368 <UART_SetConfig+0x334>)
 81081ce:	4293      	cmp	r3, r2
 81081d0:	d130      	bne.n	8108234 <UART_SetConfig+0x200>
 81081d2:	4b64      	ldr	r3, [pc, #400]	; (8108364 <UART_SetConfig+0x330>)
 81081d4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 81081d6:	f003 0307 	and.w	r3, r3, #7
 81081da:	2b05      	cmp	r3, #5
 81081dc:	d826      	bhi.n	810822c <UART_SetConfig+0x1f8>
 81081de:	a201      	add	r2, pc, #4	; (adr r2, 81081e4 <UART_SetConfig+0x1b0>)
 81081e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 81081e4:	081081fd 	.word	0x081081fd
 81081e8:	08108205 	.word	0x08108205
 81081ec:	0810820d 	.word	0x0810820d
 81081f0:	08108215 	.word	0x08108215
 81081f4:	0810821d 	.word	0x0810821d
 81081f8:	08108225 	.word	0x08108225
 81081fc:	2300      	movs	r3, #0
 81081fe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8108202:	e1ea      	b.n	81085da <UART_SetConfig+0x5a6>
 8108204:	2304      	movs	r3, #4
 8108206:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 810820a:	e1e6      	b.n	81085da <UART_SetConfig+0x5a6>
 810820c:	2308      	movs	r3, #8
 810820e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8108212:	e1e2      	b.n	81085da <UART_SetConfig+0x5a6>
 8108214:	2310      	movs	r3, #16
 8108216:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 810821a:	e1de      	b.n	81085da <UART_SetConfig+0x5a6>
 810821c:	2320      	movs	r3, #32
 810821e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8108222:	e1da      	b.n	81085da <UART_SetConfig+0x5a6>
 8108224:	2340      	movs	r3, #64	; 0x40
 8108226:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 810822a:	e1d6      	b.n	81085da <UART_SetConfig+0x5a6>
 810822c:	2380      	movs	r3, #128	; 0x80
 810822e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8108232:	e1d2      	b.n	81085da <UART_SetConfig+0x5a6>
 8108234:	697b      	ldr	r3, [r7, #20]
 8108236:	681b      	ldr	r3, [r3, #0]
 8108238:	4a4c      	ldr	r2, [pc, #304]	; (810836c <UART_SetConfig+0x338>)
 810823a:	4293      	cmp	r3, r2
 810823c:	d130      	bne.n	81082a0 <UART_SetConfig+0x26c>
 810823e:	4b49      	ldr	r3, [pc, #292]	; (8108364 <UART_SetConfig+0x330>)
 8108240:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8108242:	f003 0307 	and.w	r3, r3, #7
 8108246:	2b05      	cmp	r3, #5
 8108248:	d826      	bhi.n	8108298 <UART_SetConfig+0x264>
 810824a:	a201      	add	r2, pc, #4	; (adr r2, 8108250 <UART_SetConfig+0x21c>)
 810824c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8108250:	08108269 	.word	0x08108269
 8108254:	08108271 	.word	0x08108271
 8108258:	08108279 	.word	0x08108279
 810825c:	08108281 	.word	0x08108281
 8108260:	08108289 	.word	0x08108289
 8108264:	08108291 	.word	0x08108291
 8108268:	2300      	movs	r3, #0
 810826a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 810826e:	e1b4      	b.n	81085da <UART_SetConfig+0x5a6>
 8108270:	2304      	movs	r3, #4
 8108272:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8108276:	e1b0      	b.n	81085da <UART_SetConfig+0x5a6>
 8108278:	2308      	movs	r3, #8
 810827a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 810827e:	e1ac      	b.n	81085da <UART_SetConfig+0x5a6>
 8108280:	2310      	movs	r3, #16
 8108282:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8108286:	e1a8      	b.n	81085da <UART_SetConfig+0x5a6>
 8108288:	2320      	movs	r3, #32
 810828a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 810828e:	e1a4      	b.n	81085da <UART_SetConfig+0x5a6>
 8108290:	2340      	movs	r3, #64	; 0x40
 8108292:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8108296:	e1a0      	b.n	81085da <UART_SetConfig+0x5a6>
 8108298:	2380      	movs	r3, #128	; 0x80
 810829a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 810829e:	e19c      	b.n	81085da <UART_SetConfig+0x5a6>
 81082a0:	697b      	ldr	r3, [r7, #20]
 81082a2:	681b      	ldr	r3, [r3, #0]
 81082a4:	4a32      	ldr	r2, [pc, #200]	; (8108370 <UART_SetConfig+0x33c>)
 81082a6:	4293      	cmp	r3, r2
 81082a8:	d130      	bne.n	810830c <UART_SetConfig+0x2d8>
 81082aa:	4b2e      	ldr	r3, [pc, #184]	; (8108364 <UART_SetConfig+0x330>)
 81082ac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 81082ae:	f003 0307 	and.w	r3, r3, #7
 81082b2:	2b05      	cmp	r3, #5
 81082b4:	d826      	bhi.n	8108304 <UART_SetConfig+0x2d0>
 81082b6:	a201      	add	r2, pc, #4	; (adr r2, 81082bc <UART_SetConfig+0x288>)
 81082b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 81082bc:	081082d5 	.word	0x081082d5
 81082c0:	081082dd 	.word	0x081082dd
 81082c4:	081082e5 	.word	0x081082e5
 81082c8:	081082ed 	.word	0x081082ed
 81082cc:	081082f5 	.word	0x081082f5
 81082d0:	081082fd 	.word	0x081082fd
 81082d4:	2300      	movs	r3, #0
 81082d6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 81082da:	e17e      	b.n	81085da <UART_SetConfig+0x5a6>
 81082dc:	2304      	movs	r3, #4
 81082de:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 81082e2:	e17a      	b.n	81085da <UART_SetConfig+0x5a6>
 81082e4:	2308      	movs	r3, #8
 81082e6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 81082ea:	e176      	b.n	81085da <UART_SetConfig+0x5a6>
 81082ec:	2310      	movs	r3, #16
 81082ee:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 81082f2:	e172      	b.n	81085da <UART_SetConfig+0x5a6>
 81082f4:	2320      	movs	r3, #32
 81082f6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 81082fa:	e16e      	b.n	81085da <UART_SetConfig+0x5a6>
 81082fc:	2340      	movs	r3, #64	; 0x40
 81082fe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8108302:	e16a      	b.n	81085da <UART_SetConfig+0x5a6>
 8108304:	2380      	movs	r3, #128	; 0x80
 8108306:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 810830a:	e166      	b.n	81085da <UART_SetConfig+0x5a6>
 810830c:	697b      	ldr	r3, [r7, #20]
 810830e:	681b      	ldr	r3, [r3, #0]
 8108310:	4a18      	ldr	r2, [pc, #96]	; (8108374 <UART_SetConfig+0x340>)
 8108312:	4293      	cmp	r3, r2
 8108314:	d140      	bne.n	8108398 <UART_SetConfig+0x364>
 8108316:	4b13      	ldr	r3, [pc, #76]	; (8108364 <UART_SetConfig+0x330>)
 8108318:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 810831a:	f003 0307 	and.w	r3, r3, #7
 810831e:	2b05      	cmp	r3, #5
 8108320:	d836      	bhi.n	8108390 <UART_SetConfig+0x35c>
 8108322:	a201      	add	r2, pc, #4	; (adr r2, 8108328 <UART_SetConfig+0x2f4>)
 8108324:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8108328:	08108341 	.word	0x08108341
 810832c:	08108349 	.word	0x08108349
 8108330:	08108351 	.word	0x08108351
 8108334:	08108379 	.word	0x08108379
 8108338:	08108381 	.word	0x08108381
 810833c:	08108389 	.word	0x08108389
 8108340:	2300      	movs	r3, #0
 8108342:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8108346:	e148      	b.n	81085da <UART_SetConfig+0x5a6>
 8108348:	2304      	movs	r3, #4
 810834a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 810834e:	e144      	b.n	81085da <UART_SetConfig+0x5a6>
 8108350:	2308      	movs	r3, #8
 8108352:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8108356:	e140      	b.n	81085da <UART_SetConfig+0x5a6>
 8108358:	cfff69f3 	.word	0xcfff69f3
 810835c:	58000c00 	.word	0x58000c00
 8108360:	40011000 	.word	0x40011000
 8108364:	58024400 	.word	0x58024400
 8108368:	40004400 	.word	0x40004400
 810836c:	40004800 	.word	0x40004800
 8108370:	40004c00 	.word	0x40004c00
 8108374:	40005000 	.word	0x40005000
 8108378:	2310      	movs	r3, #16
 810837a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 810837e:	e12c      	b.n	81085da <UART_SetConfig+0x5a6>
 8108380:	2320      	movs	r3, #32
 8108382:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8108386:	e128      	b.n	81085da <UART_SetConfig+0x5a6>
 8108388:	2340      	movs	r3, #64	; 0x40
 810838a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 810838e:	e124      	b.n	81085da <UART_SetConfig+0x5a6>
 8108390:	2380      	movs	r3, #128	; 0x80
 8108392:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8108396:	e120      	b.n	81085da <UART_SetConfig+0x5a6>
 8108398:	697b      	ldr	r3, [r7, #20]
 810839a:	681b      	ldr	r3, [r3, #0]
 810839c:	4acb      	ldr	r2, [pc, #812]	; (81086cc <UART_SetConfig+0x698>)
 810839e:	4293      	cmp	r3, r2
 81083a0:	d176      	bne.n	8108490 <UART_SetConfig+0x45c>
 81083a2:	4bcb      	ldr	r3, [pc, #812]	; (81086d0 <UART_SetConfig+0x69c>)
 81083a4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 81083a6:	f003 0338 	and.w	r3, r3, #56	; 0x38
 81083aa:	2b28      	cmp	r3, #40	; 0x28
 81083ac:	d86c      	bhi.n	8108488 <UART_SetConfig+0x454>
 81083ae:	a201      	add	r2, pc, #4	; (adr r2, 81083b4 <UART_SetConfig+0x380>)
 81083b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 81083b4:	08108459 	.word	0x08108459
 81083b8:	08108489 	.word	0x08108489
 81083bc:	08108489 	.word	0x08108489
 81083c0:	08108489 	.word	0x08108489
 81083c4:	08108489 	.word	0x08108489
 81083c8:	08108489 	.word	0x08108489
 81083cc:	08108489 	.word	0x08108489
 81083d0:	08108489 	.word	0x08108489
 81083d4:	08108461 	.word	0x08108461
 81083d8:	08108489 	.word	0x08108489
 81083dc:	08108489 	.word	0x08108489
 81083e0:	08108489 	.word	0x08108489
 81083e4:	08108489 	.word	0x08108489
 81083e8:	08108489 	.word	0x08108489
 81083ec:	08108489 	.word	0x08108489
 81083f0:	08108489 	.word	0x08108489
 81083f4:	08108469 	.word	0x08108469
 81083f8:	08108489 	.word	0x08108489
 81083fc:	08108489 	.word	0x08108489
 8108400:	08108489 	.word	0x08108489
 8108404:	08108489 	.word	0x08108489
 8108408:	08108489 	.word	0x08108489
 810840c:	08108489 	.word	0x08108489
 8108410:	08108489 	.word	0x08108489
 8108414:	08108471 	.word	0x08108471
 8108418:	08108489 	.word	0x08108489
 810841c:	08108489 	.word	0x08108489
 8108420:	08108489 	.word	0x08108489
 8108424:	08108489 	.word	0x08108489
 8108428:	08108489 	.word	0x08108489
 810842c:	08108489 	.word	0x08108489
 8108430:	08108489 	.word	0x08108489
 8108434:	08108479 	.word	0x08108479
 8108438:	08108489 	.word	0x08108489
 810843c:	08108489 	.word	0x08108489
 8108440:	08108489 	.word	0x08108489
 8108444:	08108489 	.word	0x08108489
 8108448:	08108489 	.word	0x08108489
 810844c:	08108489 	.word	0x08108489
 8108450:	08108489 	.word	0x08108489
 8108454:	08108481 	.word	0x08108481
 8108458:	2301      	movs	r3, #1
 810845a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 810845e:	e0bc      	b.n	81085da <UART_SetConfig+0x5a6>
 8108460:	2304      	movs	r3, #4
 8108462:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8108466:	e0b8      	b.n	81085da <UART_SetConfig+0x5a6>
 8108468:	2308      	movs	r3, #8
 810846a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 810846e:	e0b4      	b.n	81085da <UART_SetConfig+0x5a6>
 8108470:	2310      	movs	r3, #16
 8108472:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8108476:	e0b0      	b.n	81085da <UART_SetConfig+0x5a6>
 8108478:	2320      	movs	r3, #32
 810847a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 810847e:	e0ac      	b.n	81085da <UART_SetConfig+0x5a6>
 8108480:	2340      	movs	r3, #64	; 0x40
 8108482:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8108486:	e0a8      	b.n	81085da <UART_SetConfig+0x5a6>
 8108488:	2380      	movs	r3, #128	; 0x80
 810848a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 810848e:	e0a4      	b.n	81085da <UART_SetConfig+0x5a6>
 8108490:	697b      	ldr	r3, [r7, #20]
 8108492:	681b      	ldr	r3, [r3, #0]
 8108494:	4a8f      	ldr	r2, [pc, #572]	; (81086d4 <UART_SetConfig+0x6a0>)
 8108496:	4293      	cmp	r3, r2
 8108498:	d130      	bne.n	81084fc <UART_SetConfig+0x4c8>
 810849a:	4b8d      	ldr	r3, [pc, #564]	; (81086d0 <UART_SetConfig+0x69c>)
 810849c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 810849e:	f003 0307 	and.w	r3, r3, #7
 81084a2:	2b05      	cmp	r3, #5
 81084a4:	d826      	bhi.n	81084f4 <UART_SetConfig+0x4c0>
 81084a6:	a201      	add	r2, pc, #4	; (adr r2, 81084ac <UART_SetConfig+0x478>)
 81084a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 81084ac:	081084c5 	.word	0x081084c5
 81084b0:	081084cd 	.word	0x081084cd
 81084b4:	081084d5 	.word	0x081084d5
 81084b8:	081084dd 	.word	0x081084dd
 81084bc:	081084e5 	.word	0x081084e5
 81084c0:	081084ed 	.word	0x081084ed
 81084c4:	2300      	movs	r3, #0
 81084c6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 81084ca:	e086      	b.n	81085da <UART_SetConfig+0x5a6>
 81084cc:	2304      	movs	r3, #4
 81084ce:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 81084d2:	e082      	b.n	81085da <UART_SetConfig+0x5a6>
 81084d4:	2308      	movs	r3, #8
 81084d6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 81084da:	e07e      	b.n	81085da <UART_SetConfig+0x5a6>
 81084dc:	2310      	movs	r3, #16
 81084de:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 81084e2:	e07a      	b.n	81085da <UART_SetConfig+0x5a6>
 81084e4:	2320      	movs	r3, #32
 81084e6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 81084ea:	e076      	b.n	81085da <UART_SetConfig+0x5a6>
 81084ec:	2340      	movs	r3, #64	; 0x40
 81084ee:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 81084f2:	e072      	b.n	81085da <UART_SetConfig+0x5a6>
 81084f4:	2380      	movs	r3, #128	; 0x80
 81084f6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 81084fa:	e06e      	b.n	81085da <UART_SetConfig+0x5a6>
 81084fc:	697b      	ldr	r3, [r7, #20]
 81084fe:	681b      	ldr	r3, [r3, #0]
 8108500:	4a75      	ldr	r2, [pc, #468]	; (81086d8 <UART_SetConfig+0x6a4>)
 8108502:	4293      	cmp	r3, r2
 8108504:	d130      	bne.n	8108568 <UART_SetConfig+0x534>
 8108506:	4b72      	ldr	r3, [pc, #456]	; (81086d0 <UART_SetConfig+0x69c>)
 8108508:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 810850a:	f003 0307 	and.w	r3, r3, #7
 810850e:	2b05      	cmp	r3, #5
 8108510:	d826      	bhi.n	8108560 <UART_SetConfig+0x52c>
 8108512:	a201      	add	r2, pc, #4	; (adr r2, 8108518 <UART_SetConfig+0x4e4>)
 8108514:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8108518:	08108531 	.word	0x08108531
 810851c:	08108539 	.word	0x08108539
 8108520:	08108541 	.word	0x08108541
 8108524:	08108549 	.word	0x08108549
 8108528:	08108551 	.word	0x08108551
 810852c:	08108559 	.word	0x08108559
 8108530:	2300      	movs	r3, #0
 8108532:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8108536:	e050      	b.n	81085da <UART_SetConfig+0x5a6>
 8108538:	2304      	movs	r3, #4
 810853a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 810853e:	e04c      	b.n	81085da <UART_SetConfig+0x5a6>
 8108540:	2308      	movs	r3, #8
 8108542:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8108546:	e048      	b.n	81085da <UART_SetConfig+0x5a6>
 8108548:	2310      	movs	r3, #16
 810854a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 810854e:	e044      	b.n	81085da <UART_SetConfig+0x5a6>
 8108550:	2320      	movs	r3, #32
 8108552:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8108556:	e040      	b.n	81085da <UART_SetConfig+0x5a6>
 8108558:	2340      	movs	r3, #64	; 0x40
 810855a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 810855e:	e03c      	b.n	81085da <UART_SetConfig+0x5a6>
 8108560:	2380      	movs	r3, #128	; 0x80
 8108562:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8108566:	e038      	b.n	81085da <UART_SetConfig+0x5a6>
 8108568:	697b      	ldr	r3, [r7, #20]
 810856a:	681b      	ldr	r3, [r3, #0]
 810856c:	4a5b      	ldr	r2, [pc, #364]	; (81086dc <UART_SetConfig+0x6a8>)
 810856e:	4293      	cmp	r3, r2
 8108570:	d130      	bne.n	81085d4 <UART_SetConfig+0x5a0>
 8108572:	4b57      	ldr	r3, [pc, #348]	; (81086d0 <UART_SetConfig+0x69c>)
 8108574:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8108576:	f003 0307 	and.w	r3, r3, #7
 810857a:	2b05      	cmp	r3, #5
 810857c:	d826      	bhi.n	81085cc <UART_SetConfig+0x598>
 810857e:	a201      	add	r2, pc, #4	; (adr r2, 8108584 <UART_SetConfig+0x550>)
 8108580:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8108584:	0810859d 	.word	0x0810859d
 8108588:	081085a5 	.word	0x081085a5
 810858c:	081085ad 	.word	0x081085ad
 8108590:	081085b5 	.word	0x081085b5
 8108594:	081085bd 	.word	0x081085bd
 8108598:	081085c5 	.word	0x081085c5
 810859c:	2302      	movs	r3, #2
 810859e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 81085a2:	e01a      	b.n	81085da <UART_SetConfig+0x5a6>
 81085a4:	2304      	movs	r3, #4
 81085a6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 81085aa:	e016      	b.n	81085da <UART_SetConfig+0x5a6>
 81085ac:	2308      	movs	r3, #8
 81085ae:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 81085b2:	e012      	b.n	81085da <UART_SetConfig+0x5a6>
 81085b4:	2310      	movs	r3, #16
 81085b6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 81085ba:	e00e      	b.n	81085da <UART_SetConfig+0x5a6>
 81085bc:	2320      	movs	r3, #32
 81085be:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 81085c2:	e00a      	b.n	81085da <UART_SetConfig+0x5a6>
 81085c4:	2340      	movs	r3, #64	; 0x40
 81085c6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 81085ca:	e006      	b.n	81085da <UART_SetConfig+0x5a6>
 81085cc:	2380      	movs	r3, #128	; 0x80
 81085ce:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 81085d2:	e002      	b.n	81085da <UART_SetConfig+0x5a6>
 81085d4:	2380      	movs	r3, #128	; 0x80
 81085d6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 81085da:	697b      	ldr	r3, [r7, #20]
 81085dc:	681b      	ldr	r3, [r3, #0]
 81085de:	4a3f      	ldr	r2, [pc, #252]	; (81086dc <UART_SetConfig+0x6a8>)
 81085e0:	4293      	cmp	r3, r2
 81085e2:	f040 80f8 	bne.w	81087d6 <UART_SetConfig+0x7a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 81085e6:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 81085ea:	2b20      	cmp	r3, #32
 81085ec:	dc46      	bgt.n	810867c <UART_SetConfig+0x648>
 81085ee:	2b02      	cmp	r3, #2
 81085f0:	f2c0 8082 	blt.w	81086f8 <UART_SetConfig+0x6c4>
 81085f4:	3b02      	subs	r3, #2
 81085f6:	2b1e      	cmp	r3, #30
 81085f8:	d87e      	bhi.n	81086f8 <UART_SetConfig+0x6c4>
 81085fa:	a201      	add	r2, pc, #4	; (adr r2, 8108600 <UART_SetConfig+0x5cc>)
 81085fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8108600:	08108683 	.word	0x08108683
 8108604:	081086f9 	.word	0x081086f9
 8108608:	0810868b 	.word	0x0810868b
 810860c:	081086f9 	.word	0x081086f9
 8108610:	081086f9 	.word	0x081086f9
 8108614:	081086f9 	.word	0x081086f9
 8108618:	0810869b 	.word	0x0810869b
 810861c:	081086f9 	.word	0x081086f9
 8108620:	081086f9 	.word	0x081086f9
 8108624:	081086f9 	.word	0x081086f9
 8108628:	081086f9 	.word	0x081086f9
 810862c:	081086f9 	.word	0x081086f9
 8108630:	081086f9 	.word	0x081086f9
 8108634:	081086f9 	.word	0x081086f9
 8108638:	081086ab 	.word	0x081086ab
 810863c:	081086f9 	.word	0x081086f9
 8108640:	081086f9 	.word	0x081086f9
 8108644:	081086f9 	.word	0x081086f9
 8108648:	081086f9 	.word	0x081086f9
 810864c:	081086f9 	.word	0x081086f9
 8108650:	081086f9 	.word	0x081086f9
 8108654:	081086f9 	.word	0x081086f9
 8108658:	081086f9 	.word	0x081086f9
 810865c:	081086f9 	.word	0x081086f9
 8108660:	081086f9 	.word	0x081086f9
 8108664:	081086f9 	.word	0x081086f9
 8108668:	081086f9 	.word	0x081086f9
 810866c:	081086f9 	.word	0x081086f9
 8108670:	081086f9 	.word	0x081086f9
 8108674:	081086f9 	.word	0x081086f9
 8108678:	081086eb 	.word	0x081086eb
 810867c:	2b40      	cmp	r3, #64	; 0x40
 810867e:	d037      	beq.n	81086f0 <UART_SetConfig+0x6bc>
 8108680:	e03a      	b.n	81086f8 <UART_SetConfig+0x6c4>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 8108682:	f7fd f9fd 	bl	8105a80 <HAL_RCCEx_GetD3PCLK1Freq>
 8108686:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8108688:	e03c      	b.n	8108704 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 810868a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 810868e:	4618      	mov	r0, r3
 8108690:	f7fd fa0c 	bl	8105aac <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8108694:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8108696:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8108698:	e034      	b.n	8108704 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 810869a:	f107 0318 	add.w	r3, r7, #24
 810869e:	4618      	mov	r0, r3
 81086a0:	f7fd fb58 	bl	8105d54 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 81086a4:	69fb      	ldr	r3, [r7, #28]
 81086a6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 81086a8:	e02c      	b.n	8108704 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 81086aa:	4b09      	ldr	r3, [pc, #36]	; (81086d0 <UART_SetConfig+0x69c>)
 81086ac:	681b      	ldr	r3, [r3, #0]
 81086ae:	f003 0320 	and.w	r3, r3, #32
 81086b2:	2b00      	cmp	r3, #0
 81086b4:	d016      	beq.n	81086e4 <UART_SetConfig+0x6b0>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 81086b6:	4b06      	ldr	r3, [pc, #24]	; (81086d0 <UART_SetConfig+0x69c>)
 81086b8:	681b      	ldr	r3, [r3, #0]
 81086ba:	08db      	lsrs	r3, r3, #3
 81086bc:	f003 0303 	and.w	r3, r3, #3
 81086c0:	4a07      	ldr	r2, [pc, #28]	; (81086e0 <UART_SetConfig+0x6ac>)
 81086c2:	fa22 f303 	lsr.w	r3, r2, r3
 81086c6:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 81086c8:	e01c      	b.n	8108704 <UART_SetConfig+0x6d0>
 81086ca:	bf00      	nop
 81086cc:	40011400 	.word	0x40011400
 81086d0:	58024400 	.word	0x58024400
 81086d4:	40007800 	.word	0x40007800
 81086d8:	40007c00 	.word	0x40007c00
 81086dc:	58000c00 	.word	0x58000c00
 81086e0:	03d09000 	.word	0x03d09000
          pclk = (uint32_t) HSI_VALUE;
 81086e4:	4b9d      	ldr	r3, [pc, #628]	; (810895c <UART_SetConfig+0x928>)
 81086e6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 81086e8:	e00c      	b.n	8108704 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 81086ea:	4b9d      	ldr	r3, [pc, #628]	; (8108960 <UART_SetConfig+0x92c>)
 81086ec:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 81086ee:	e009      	b.n	8108704 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 81086f0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 81086f4:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 81086f6:	e005      	b.n	8108704 <UART_SetConfig+0x6d0>
      default:
        pclk = 0U;
 81086f8:	2300      	movs	r3, #0
 81086fa:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 81086fc:	2301      	movs	r3, #1
 81086fe:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 8108702:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8108704:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8108706:	2b00      	cmp	r3, #0
 8108708:	f000 81de 	beq.w	8108ac8 <UART_SetConfig+0xa94>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 810870c:	697b      	ldr	r3, [r7, #20]
 810870e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8108710:	4a94      	ldr	r2, [pc, #592]	; (8108964 <UART_SetConfig+0x930>)
 8108712:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8108716:	461a      	mov	r2, r3
 8108718:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 810871a:	fbb3 f3f2 	udiv	r3, r3, r2
 810871e:	633b      	str	r3, [r7, #48]	; 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8108720:	697b      	ldr	r3, [r7, #20]
 8108722:	685a      	ldr	r2, [r3, #4]
 8108724:	4613      	mov	r3, r2
 8108726:	005b      	lsls	r3, r3, #1
 8108728:	4413      	add	r3, r2
 810872a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 810872c:	429a      	cmp	r2, r3
 810872e:	d305      	bcc.n	810873c <UART_SetConfig+0x708>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8108730:	697b      	ldr	r3, [r7, #20]
 8108732:	685b      	ldr	r3, [r3, #4]
 8108734:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8108736:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8108738:	429a      	cmp	r2, r3
 810873a:	d903      	bls.n	8108744 <UART_SetConfig+0x710>
      {
        ret = HAL_ERROR;
 810873c:	2301      	movs	r3, #1
 810873e:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 8108742:	e1c1      	b.n	8108ac8 <UART_SetConfig+0xa94>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8108744:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8108746:	2200      	movs	r2, #0
 8108748:	60bb      	str	r3, [r7, #8]
 810874a:	60fa      	str	r2, [r7, #12]
 810874c:	697b      	ldr	r3, [r7, #20]
 810874e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8108750:	4a84      	ldr	r2, [pc, #528]	; (8108964 <UART_SetConfig+0x930>)
 8108752:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8108756:	b29b      	uxth	r3, r3
 8108758:	2200      	movs	r2, #0
 810875a:	603b      	str	r3, [r7, #0]
 810875c:	607a      	str	r2, [r7, #4]
 810875e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8108762:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8108766:	f7f7 fe0b 	bl	8100380 <__aeabi_uldivmod>
 810876a:	4602      	mov	r2, r0
 810876c:	460b      	mov	r3, r1
 810876e:	4610      	mov	r0, r2
 8108770:	4619      	mov	r1, r3
 8108772:	f04f 0200 	mov.w	r2, #0
 8108776:	f04f 0300 	mov.w	r3, #0
 810877a:	020b      	lsls	r3, r1, #8
 810877c:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8108780:	0202      	lsls	r2, r0, #8
 8108782:	6979      	ldr	r1, [r7, #20]
 8108784:	6849      	ldr	r1, [r1, #4]
 8108786:	0849      	lsrs	r1, r1, #1
 8108788:	2000      	movs	r0, #0
 810878a:	460c      	mov	r4, r1
 810878c:	4605      	mov	r5, r0
 810878e:	eb12 0804 	adds.w	r8, r2, r4
 8108792:	eb43 0905 	adc.w	r9, r3, r5
 8108796:	697b      	ldr	r3, [r7, #20]
 8108798:	685b      	ldr	r3, [r3, #4]
 810879a:	2200      	movs	r2, #0
 810879c:	469a      	mov	sl, r3
 810879e:	4693      	mov	fp, r2
 81087a0:	4652      	mov	r2, sl
 81087a2:	465b      	mov	r3, fp
 81087a4:	4640      	mov	r0, r8
 81087a6:	4649      	mov	r1, r9
 81087a8:	f7f7 fdea 	bl	8100380 <__aeabi_uldivmod>
 81087ac:	4602      	mov	r2, r0
 81087ae:	460b      	mov	r3, r1
 81087b0:	4613      	mov	r3, r2
 81087b2:	63bb      	str	r3, [r7, #56]	; 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 81087b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 81087b6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 81087ba:	d308      	bcc.n	81087ce <UART_SetConfig+0x79a>
 81087bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 81087be:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 81087c2:	d204      	bcs.n	81087ce <UART_SetConfig+0x79a>
        {
          huart->Instance->BRR = usartdiv;
 81087c4:	697b      	ldr	r3, [r7, #20]
 81087c6:	681b      	ldr	r3, [r3, #0]
 81087c8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 81087ca:	60da      	str	r2, [r3, #12]
 81087cc:	e17c      	b.n	8108ac8 <UART_SetConfig+0xa94>
        }
        else
        {
          ret = HAL_ERROR;
 81087ce:	2301      	movs	r3, #1
 81087d0:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 81087d4:	e178      	b.n	8108ac8 <UART_SetConfig+0xa94>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 81087d6:	697b      	ldr	r3, [r7, #20]
 81087d8:	69db      	ldr	r3, [r3, #28]
 81087da:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 81087de:	f040 80c5 	bne.w	810896c <UART_SetConfig+0x938>
  {
    switch (clocksource)
 81087e2:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 81087e6:	2b20      	cmp	r3, #32
 81087e8:	dc48      	bgt.n	810887c <UART_SetConfig+0x848>
 81087ea:	2b00      	cmp	r3, #0
 81087ec:	db7b      	blt.n	81088e6 <UART_SetConfig+0x8b2>
 81087ee:	2b20      	cmp	r3, #32
 81087f0:	d879      	bhi.n	81088e6 <UART_SetConfig+0x8b2>
 81087f2:	a201      	add	r2, pc, #4	; (adr r2, 81087f8 <UART_SetConfig+0x7c4>)
 81087f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 81087f8:	08108883 	.word	0x08108883
 81087fc:	0810888b 	.word	0x0810888b
 8108800:	081088e7 	.word	0x081088e7
 8108804:	081088e7 	.word	0x081088e7
 8108808:	08108893 	.word	0x08108893
 810880c:	081088e7 	.word	0x081088e7
 8108810:	081088e7 	.word	0x081088e7
 8108814:	081088e7 	.word	0x081088e7
 8108818:	081088a3 	.word	0x081088a3
 810881c:	081088e7 	.word	0x081088e7
 8108820:	081088e7 	.word	0x081088e7
 8108824:	081088e7 	.word	0x081088e7
 8108828:	081088e7 	.word	0x081088e7
 810882c:	081088e7 	.word	0x081088e7
 8108830:	081088e7 	.word	0x081088e7
 8108834:	081088e7 	.word	0x081088e7
 8108838:	081088b3 	.word	0x081088b3
 810883c:	081088e7 	.word	0x081088e7
 8108840:	081088e7 	.word	0x081088e7
 8108844:	081088e7 	.word	0x081088e7
 8108848:	081088e7 	.word	0x081088e7
 810884c:	081088e7 	.word	0x081088e7
 8108850:	081088e7 	.word	0x081088e7
 8108854:	081088e7 	.word	0x081088e7
 8108858:	081088e7 	.word	0x081088e7
 810885c:	081088e7 	.word	0x081088e7
 8108860:	081088e7 	.word	0x081088e7
 8108864:	081088e7 	.word	0x081088e7
 8108868:	081088e7 	.word	0x081088e7
 810886c:	081088e7 	.word	0x081088e7
 8108870:	081088e7 	.word	0x081088e7
 8108874:	081088e7 	.word	0x081088e7
 8108878:	081088d9 	.word	0x081088d9
 810887c:	2b40      	cmp	r3, #64	; 0x40
 810887e:	d02e      	beq.n	81088de <UART_SetConfig+0x8aa>
 8108880:	e031      	b.n	81088e6 <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8108882:	f7fb f907 	bl	8103a94 <HAL_RCC_GetPCLK1Freq>
 8108886:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8108888:	e033      	b.n	81088f2 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 810888a:	f7fb f919 	bl	8103ac0 <HAL_RCC_GetPCLK2Freq>
 810888e:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8108890:	e02f      	b.n	81088f2 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8108892:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8108896:	4618      	mov	r0, r3
 8108898:	f7fd f908 	bl	8105aac <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 810889c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 810889e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 81088a0:	e027      	b.n	81088f2 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 81088a2:	f107 0318 	add.w	r3, r7, #24
 81088a6:	4618      	mov	r0, r3
 81088a8:	f7fd fa54 	bl	8105d54 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 81088ac:	69fb      	ldr	r3, [r7, #28]
 81088ae:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 81088b0:	e01f      	b.n	81088f2 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 81088b2:	4b2d      	ldr	r3, [pc, #180]	; (8108968 <UART_SetConfig+0x934>)
 81088b4:	681b      	ldr	r3, [r3, #0]
 81088b6:	f003 0320 	and.w	r3, r3, #32
 81088ba:	2b00      	cmp	r3, #0
 81088bc:	d009      	beq.n	81088d2 <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 81088be:	4b2a      	ldr	r3, [pc, #168]	; (8108968 <UART_SetConfig+0x934>)
 81088c0:	681b      	ldr	r3, [r3, #0]
 81088c2:	08db      	lsrs	r3, r3, #3
 81088c4:	f003 0303 	and.w	r3, r3, #3
 81088c8:	4a24      	ldr	r2, [pc, #144]	; (810895c <UART_SetConfig+0x928>)
 81088ca:	fa22 f303 	lsr.w	r3, r2, r3
 81088ce:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 81088d0:	e00f      	b.n	81088f2 <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 81088d2:	4b22      	ldr	r3, [pc, #136]	; (810895c <UART_SetConfig+0x928>)
 81088d4:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 81088d6:	e00c      	b.n	81088f2 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 81088d8:	4b21      	ldr	r3, [pc, #132]	; (8108960 <UART_SetConfig+0x92c>)
 81088da:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 81088dc:	e009      	b.n	81088f2 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 81088de:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 81088e2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 81088e4:	e005      	b.n	81088f2 <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 81088e6:	2300      	movs	r3, #0
 81088e8:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 81088ea:	2301      	movs	r3, #1
 81088ec:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 81088f0:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 81088f2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 81088f4:	2b00      	cmp	r3, #0
 81088f6:	f000 80e7 	beq.w	8108ac8 <UART_SetConfig+0xa94>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 81088fa:	697b      	ldr	r3, [r7, #20]
 81088fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 81088fe:	4a19      	ldr	r2, [pc, #100]	; (8108964 <UART_SetConfig+0x930>)
 8108900:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8108904:	461a      	mov	r2, r3
 8108906:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8108908:	fbb3 f3f2 	udiv	r3, r3, r2
 810890c:	005a      	lsls	r2, r3, #1
 810890e:	697b      	ldr	r3, [r7, #20]
 8108910:	685b      	ldr	r3, [r3, #4]
 8108912:	085b      	lsrs	r3, r3, #1
 8108914:	441a      	add	r2, r3
 8108916:	697b      	ldr	r3, [r7, #20]
 8108918:	685b      	ldr	r3, [r3, #4]
 810891a:	fbb2 f3f3 	udiv	r3, r2, r3
 810891e:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8108920:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8108922:	2b0f      	cmp	r3, #15
 8108924:	d916      	bls.n	8108954 <UART_SetConfig+0x920>
 8108926:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8108928:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 810892c:	d212      	bcs.n	8108954 <UART_SetConfig+0x920>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 810892e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8108930:	b29b      	uxth	r3, r3
 8108932:	f023 030f 	bic.w	r3, r3, #15
 8108936:	86fb      	strh	r3, [r7, #54]	; 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8108938:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 810893a:	085b      	lsrs	r3, r3, #1
 810893c:	b29b      	uxth	r3, r3
 810893e:	f003 0307 	and.w	r3, r3, #7
 8108942:	b29a      	uxth	r2, r3
 8108944:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8108946:	4313      	orrs	r3, r2
 8108948:	86fb      	strh	r3, [r7, #54]	; 0x36
        huart->Instance->BRR = brrtemp;
 810894a:	697b      	ldr	r3, [r7, #20]
 810894c:	681b      	ldr	r3, [r3, #0]
 810894e:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8108950:	60da      	str	r2, [r3, #12]
 8108952:	e0b9      	b.n	8108ac8 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 8108954:	2301      	movs	r3, #1
 8108956:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 810895a:	e0b5      	b.n	8108ac8 <UART_SetConfig+0xa94>
 810895c:	03d09000 	.word	0x03d09000
 8108960:	003d0900 	.word	0x003d0900
 8108964:	0810bdb8 	.word	0x0810bdb8
 8108968:	58024400 	.word	0x58024400
      }
    }
  }
  else
  {
    switch (clocksource)
 810896c:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8108970:	2b20      	cmp	r3, #32
 8108972:	dc49      	bgt.n	8108a08 <UART_SetConfig+0x9d4>
 8108974:	2b00      	cmp	r3, #0
 8108976:	db7c      	blt.n	8108a72 <UART_SetConfig+0xa3e>
 8108978:	2b20      	cmp	r3, #32
 810897a:	d87a      	bhi.n	8108a72 <UART_SetConfig+0xa3e>
 810897c:	a201      	add	r2, pc, #4	; (adr r2, 8108984 <UART_SetConfig+0x950>)
 810897e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8108982:	bf00      	nop
 8108984:	08108a0f 	.word	0x08108a0f
 8108988:	08108a17 	.word	0x08108a17
 810898c:	08108a73 	.word	0x08108a73
 8108990:	08108a73 	.word	0x08108a73
 8108994:	08108a1f 	.word	0x08108a1f
 8108998:	08108a73 	.word	0x08108a73
 810899c:	08108a73 	.word	0x08108a73
 81089a0:	08108a73 	.word	0x08108a73
 81089a4:	08108a2f 	.word	0x08108a2f
 81089a8:	08108a73 	.word	0x08108a73
 81089ac:	08108a73 	.word	0x08108a73
 81089b0:	08108a73 	.word	0x08108a73
 81089b4:	08108a73 	.word	0x08108a73
 81089b8:	08108a73 	.word	0x08108a73
 81089bc:	08108a73 	.word	0x08108a73
 81089c0:	08108a73 	.word	0x08108a73
 81089c4:	08108a3f 	.word	0x08108a3f
 81089c8:	08108a73 	.word	0x08108a73
 81089cc:	08108a73 	.word	0x08108a73
 81089d0:	08108a73 	.word	0x08108a73
 81089d4:	08108a73 	.word	0x08108a73
 81089d8:	08108a73 	.word	0x08108a73
 81089dc:	08108a73 	.word	0x08108a73
 81089e0:	08108a73 	.word	0x08108a73
 81089e4:	08108a73 	.word	0x08108a73
 81089e8:	08108a73 	.word	0x08108a73
 81089ec:	08108a73 	.word	0x08108a73
 81089f0:	08108a73 	.word	0x08108a73
 81089f4:	08108a73 	.word	0x08108a73
 81089f8:	08108a73 	.word	0x08108a73
 81089fc:	08108a73 	.word	0x08108a73
 8108a00:	08108a73 	.word	0x08108a73
 8108a04:	08108a65 	.word	0x08108a65
 8108a08:	2b40      	cmp	r3, #64	; 0x40
 8108a0a:	d02e      	beq.n	8108a6a <UART_SetConfig+0xa36>
 8108a0c:	e031      	b.n	8108a72 <UART_SetConfig+0xa3e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8108a0e:	f7fb f841 	bl	8103a94 <HAL_RCC_GetPCLK1Freq>
 8108a12:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8108a14:	e033      	b.n	8108a7e <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8108a16:	f7fb f853 	bl	8103ac0 <HAL_RCC_GetPCLK2Freq>
 8108a1a:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8108a1c:	e02f      	b.n	8108a7e <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8108a1e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8108a22:	4618      	mov	r0, r3
 8108a24:	f7fd f842 	bl	8105aac <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8108a28:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8108a2a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8108a2c:	e027      	b.n	8108a7e <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8108a2e:	f107 0318 	add.w	r3, r7, #24
 8108a32:	4618      	mov	r0, r3
 8108a34:	f7fd f98e 	bl	8105d54 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8108a38:	69fb      	ldr	r3, [r7, #28]
 8108a3a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8108a3c:	e01f      	b.n	8108a7e <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8108a3e:	4b2d      	ldr	r3, [pc, #180]	; (8108af4 <UART_SetConfig+0xac0>)
 8108a40:	681b      	ldr	r3, [r3, #0]
 8108a42:	f003 0320 	and.w	r3, r3, #32
 8108a46:	2b00      	cmp	r3, #0
 8108a48:	d009      	beq.n	8108a5e <UART_SetConfig+0xa2a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8108a4a:	4b2a      	ldr	r3, [pc, #168]	; (8108af4 <UART_SetConfig+0xac0>)
 8108a4c:	681b      	ldr	r3, [r3, #0]
 8108a4e:	08db      	lsrs	r3, r3, #3
 8108a50:	f003 0303 	and.w	r3, r3, #3
 8108a54:	4a28      	ldr	r2, [pc, #160]	; (8108af8 <UART_SetConfig+0xac4>)
 8108a56:	fa22 f303 	lsr.w	r3, r2, r3
 8108a5a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8108a5c:	e00f      	b.n	8108a7e <UART_SetConfig+0xa4a>
          pclk = (uint32_t) HSI_VALUE;
 8108a5e:	4b26      	ldr	r3, [pc, #152]	; (8108af8 <UART_SetConfig+0xac4>)
 8108a60:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8108a62:	e00c      	b.n	8108a7e <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8108a64:	4b25      	ldr	r3, [pc, #148]	; (8108afc <UART_SetConfig+0xac8>)
 8108a66:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8108a68:	e009      	b.n	8108a7e <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8108a6a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8108a6e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8108a70:	e005      	b.n	8108a7e <UART_SetConfig+0xa4a>
      default:
        pclk = 0U;
 8108a72:	2300      	movs	r3, #0
 8108a74:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 8108a76:	2301      	movs	r3, #1
 8108a78:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 8108a7c:	bf00      	nop
    }

    if (pclk != 0U)
 8108a7e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8108a80:	2b00      	cmp	r3, #0
 8108a82:	d021      	beq.n	8108ac8 <UART_SetConfig+0xa94>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8108a84:	697b      	ldr	r3, [r7, #20]
 8108a86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8108a88:	4a1d      	ldr	r2, [pc, #116]	; (8108b00 <UART_SetConfig+0xacc>)
 8108a8a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8108a8e:	461a      	mov	r2, r3
 8108a90:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8108a92:	fbb3 f2f2 	udiv	r2, r3, r2
 8108a96:	697b      	ldr	r3, [r7, #20]
 8108a98:	685b      	ldr	r3, [r3, #4]
 8108a9a:	085b      	lsrs	r3, r3, #1
 8108a9c:	441a      	add	r2, r3
 8108a9e:	697b      	ldr	r3, [r7, #20]
 8108aa0:	685b      	ldr	r3, [r3, #4]
 8108aa2:	fbb2 f3f3 	udiv	r3, r2, r3
 8108aa6:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8108aa8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8108aaa:	2b0f      	cmp	r3, #15
 8108aac:	d909      	bls.n	8108ac2 <UART_SetConfig+0xa8e>
 8108aae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8108ab0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8108ab4:	d205      	bcs.n	8108ac2 <UART_SetConfig+0xa8e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8108ab6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8108ab8:	b29a      	uxth	r2, r3
 8108aba:	697b      	ldr	r3, [r7, #20]
 8108abc:	681b      	ldr	r3, [r3, #0]
 8108abe:	60da      	str	r2, [r3, #12]
 8108ac0:	e002      	b.n	8108ac8 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 8108ac2:	2301      	movs	r3, #1
 8108ac4:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8108ac8:	697b      	ldr	r3, [r7, #20]
 8108aca:	2201      	movs	r2, #1
 8108acc:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8108ad0:	697b      	ldr	r3, [r7, #20]
 8108ad2:	2201      	movs	r2, #1
 8108ad4:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8108ad8:	697b      	ldr	r3, [r7, #20]
 8108ada:	2200      	movs	r2, #0
 8108adc:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 8108ade:	697b      	ldr	r3, [r7, #20]
 8108ae0:	2200      	movs	r2, #0
 8108ae2:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 8108ae4:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
}
 8108ae8:	4618      	mov	r0, r3
 8108aea:	3748      	adds	r7, #72	; 0x48
 8108aec:	46bd      	mov	sp, r7
 8108aee:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8108af2:	bf00      	nop
 8108af4:	58024400 	.word	0x58024400
 8108af8:	03d09000 	.word	0x03d09000
 8108afc:	003d0900 	.word	0x003d0900
 8108b00:	0810bdb8 	.word	0x0810bdb8

08108b04 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8108b04:	b480      	push	{r7}
 8108b06:	b083      	sub	sp, #12
 8108b08:	af00      	add	r7, sp, #0
 8108b0a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8108b0c:	687b      	ldr	r3, [r7, #4]
 8108b0e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8108b10:	f003 0301 	and.w	r3, r3, #1
 8108b14:	2b00      	cmp	r3, #0
 8108b16:	d00a      	beq.n	8108b2e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8108b18:	687b      	ldr	r3, [r7, #4]
 8108b1a:	681b      	ldr	r3, [r3, #0]
 8108b1c:	685b      	ldr	r3, [r3, #4]
 8108b1e:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8108b22:	687b      	ldr	r3, [r7, #4]
 8108b24:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8108b26:	687b      	ldr	r3, [r7, #4]
 8108b28:	681b      	ldr	r3, [r3, #0]
 8108b2a:	430a      	orrs	r2, r1
 8108b2c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8108b2e:	687b      	ldr	r3, [r7, #4]
 8108b30:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8108b32:	f003 0302 	and.w	r3, r3, #2
 8108b36:	2b00      	cmp	r3, #0
 8108b38:	d00a      	beq.n	8108b50 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8108b3a:	687b      	ldr	r3, [r7, #4]
 8108b3c:	681b      	ldr	r3, [r3, #0]
 8108b3e:	685b      	ldr	r3, [r3, #4]
 8108b40:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8108b44:	687b      	ldr	r3, [r7, #4]
 8108b46:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8108b48:	687b      	ldr	r3, [r7, #4]
 8108b4a:	681b      	ldr	r3, [r3, #0]
 8108b4c:	430a      	orrs	r2, r1
 8108b4e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8108b50:	687b      	ldr	r3, [r7, #4]
 8108b52:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8108b54:	f003 0304 	and.w	r3, r3, #4
 8108b58:	2b00      	cmp	r3, #0
 8108b5a:	d00a      	beq.n	8108b72 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8108b5c:	687b      	ldr	r3, [r7, #4]
 8108b5e:	681b      	ldr	r3, [r3, #0]
 8108b60:	685b      	ldr	r3, [r3, #4]
 8108b62:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8108b66:	687b      	ldr	r3, [r7, #4]
 8108b68:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8108b6a:	687b      	ldr	r3, [r7, #4]
 8108b6c:	681b      	ldr	r3, [r3, #0]
 8108b6e:	430a      	orrs	r2, r1
 8108b70:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8108b72:	687b      	ldr	r3, [r7, #4]
 8108b74:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8108b76:	f003 0308 	and.w	r3, r3, #8
 8108b7a:	2b00      	cmp	r3, #0
 8108b7c:	d00a      	beq.n	8108b94 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8108b7e:	687b      	ldr	r3, [r7, #4]
 8108b80:	681b      	ldr	r3, [r3, #0]
 8108b82:	685b      	ldr	r3, [r3, #4]
 8108b84:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8108b88:	687b      	ldr	r3, [r7, #4]
 8108b8a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8108b8c:	687b      	ldr	r3, [r7, #4]
 8108b8e:	681b      	ldr	r3, [r3, #0]
 8108b90:	430a      	orrs	r2, r1
 8108b92:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8108b94:	687b      	ldr	r3, [r7, #4]
 8108b96:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8108b98:	f003 0310 	and.w	r3, r3, #16
 8108b9c:	2b00      	cmp	r3, #0
 8108b9e:	d00a      	beq.n	8108bb6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8108ba0:	687b      	ldr	r3, [r7, #4]
 8108ba2:	681b      	ldr	r3, [r3, #0]
 8108ba4:	689b      	ldr	r3, [r3, #8]
 8108ba6:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8108baa:	687b      	ldr	r3, [r7, #4]
 8108bac:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8108bae:	687b      	ldr	r3, [r7, #4]
 8108bb0:	681b      	ldr	r3, [r3, #0]
 8108bb2:	430a      	orrs	r2, r1
 8108bb4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8108bb6:	687b      	ldr	r3, [r7, #4]
 8108bb8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8108bba:	f003 0320 	and.w	r3, r3, #32
 8108bbe:	2b00      	cmp	r3, #0
 8108bc0:	d00a      	beq.n	8108bd8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8108bc2:	687b      	ldr	r3, [r7, #4]
 8108bc4:	681b      	ldr	r3, [r3, #0]
 8108bc6:	689b      	ldr	r3, [r3, #8]
 8108bc8:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8108bcc:	687b      	ldr	r3, [r7, #4]
 8108bce:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8108bd0:	687b      	ldr	r3, [r7, #4]
 8108bd2:	681b      	ldr	r3, [r3, #0]
 8108bd4:	430a      	orrs	r2, r1
 8108bd6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8108bd8:	687b      	ldr	r3, [r7, #4]
 8108bda:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8108bdc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8108be0:	2b00      	cmp	r3, #0
 8108be2:	d01a      	beq.n	8108c1a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8108be4:	687b      	ldr	r3, [r7, #4]
 8108be6:	681b      	ldr	r3, [r3, #0]
 8108be8:	685b      	ldr	r3, [r3, #4]
 8108bea:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8108bee:	687b      	ldr	r3, [r7, #4]
 8108bf0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8108bf2:	687b      	ldr	r3, [r7, #4]
 8108bf4:	681b      	ldr	r3, [r3, #0]
 8108bf6:	430a      	orrs	r2, r1
 8108bf8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8108bfa:	687b      	ldr	r3, [r7, #4]
 8108bfc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8108bfe:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8108c02:	d10a      	bne.n	8108c1a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8108c04:	687b      	ldr	r3, [r7, #4]
 8108c06:	681b      	ldr	r3, [r3, #0]
 8108c08:	685b      	ldr	r3, [r3, #4]
 8108c0a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8108c0e:	687b      	ldr	r3, [r7, #4]
 8108c10:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8108c12:	687b      	ldr	r3, [r7, #4]
 8108c14:	681b      	ldr	r3, [r3, #0]
 8108c16:	430a      	orrs	r2, r1
 8108c18:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8108c1a:	687b      	ldr	r3, [r7, #4]
 8108c1c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8108c1e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8108c22:	2b00      	cmp	r3, #0
 8108c24:	d00a      	beq.n	8108c3c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8108c26:	687b      	ldr	r3, [r7, #4]
 8108c28:	681b      	ldr	r3, [r3, #0]
 8108c2a:	685b      	ldr	r3, [r3, #4]
 8108c2c:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8108c30:	687b      	ldr	r3, [r7, #4]
 8108c32:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8108c34:	687b      	ldr	r3, [r7, #4]
 8108c36:	681b      	ldr	r3, [r3, #0]
 8108c38:	430a      	orrs	r2, r1
 8108c3a:	605a      	str	r2, [r3, #4]
  }
}
 8108c3c:	bf00      	nop
 8108c3e:	370c      	adds	r7, #12
 8108c40:	46bd      	mov	sp, r7
 8108c42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8108c46:	4770      	bx	lr

08108c48 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8108c48:	b580      	push	{r7, lr}
 8108c4a:	b098      	sub	sp, #96	; 0x60
 8108c4c:	af02      	add	r7, sp, #8
 8108c4e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8108c50:	687b      	ldr	r3, [r7, #4]
 8108c52:	2200      	movs	r2, #0
 8108c54:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8108c58:	f7f8 ffe4 	bl	8101c24 <HAL_GetTick>
 8108c5c:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8108c5e:	687b      	ldr	r3, [r7, #4]
 8108c60:	681b      	ldr	r3, [r3, #0]
 8108c62:	681b      	ldr	r3, [r3, #0]
 8108c64:	f003 0308 	and.w	r3, r3, #8
 8108c68:	2b08      	cmp	r3, #8
 8108c6a:	d12f      	bne.n	8108ccc <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8108c6c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8108c70:	9300      	str	r3, [sp, #0]
 8108c72:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8108c74:	2200      	movs	r2, #0
 8108c76:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8108c7a:	6878      	ldr	r0, [r7, #4]
 8108c7c:	f000 f88e 	bl	8108d9c <UART_WaitOnFlagUntilTimeout>
 8108c80:	4603      	mov	r3, r0
 8108c82:	2b00      	cmp	r3, #0
 8108c84:	d022      	beq.n	8108ccc <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8108c86:	687b      	ldr	r3, [r7, #4]
 8108c88:	681b      	ldr	r3, [r3, #0]
 8108c8a:	63bb      	str	r3, [r7, #56]	; 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8108c8c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8108c8e:	e853 3f00 	ldrex	r3, [r3]
 8108c92:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8108c94:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8108c96:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8108c9a:	653b      	str	r3, [r7, #80]	; 0x50
 8108c9c:	687b      	ldr	r3, [r7, #4]
 8108c9e:	681b      	ldr	r3, [r3, #0]
 8108ca0:	461a      	mov	r2, r3
 8108ca2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8108ca4:	647b      	str	r3, [r7, #68]	; 0x44
 8108ca6:	643a      	str	r2, [r7, #64]	; 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8108ca8:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8108caa:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8108cac:	e841 2300 	strex	r3, r2, [r1]
 8108cb0:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8108cb2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8108cb4:	2b00      	cmp	r3, #0
 8108cb6:	d1e6      	bne.n	8108c86 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8108cb8:	687b      	ldr	r3, [r7, #4]
 8108cba:	2220      	movs	r2, #32
 8108cbc:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      __HAL_UNLOCK(huart);
 8108cc0:	687b      	ldr	r3, [r7, #4]
 8108cc2:	2200      	movs	r2, #0
 8108cc4:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8108cc8:	2303      	movs	r3, #3
 8108cca:	e063      	b.n	8108d94 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8108ccc:	687b      	ldr	r3, [r7, #4]
 8108cce:	681b      	ldr	r3, [r3, #0]
 8108cd0:	681b      	ldr	r3, [r3, #0]
 8108cd2:	f003 0304 	and.w	r3, r3, #4
 8108cd6:	2b04      	cmp	r3, #4
 8108cd8:	d149      	bne.n	8108d6e <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8108cda:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8108cde:	9300      	str	r3, [sp, #0]
 8108ce0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8108ce2:	2200      	movs	r2, #0
 8108ce4:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8108ce8:	6878      	ldr	r0, [r7, #4]
 8108cea:	f000 f857 	bl	8108d9c <UART_WaitOnFlagUntilTimeout>
 8108cee:	4603      	mov	r3, r0
 8108cf0:	2b00      	cmp	r3, #0
 8108cf2:	d03c      	beq.n	8108d6e <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8108cf4:	687b      	ldr	r3, [r7, #4]
 8108cf6:	681b      	ldr	r3, [r3, #0]
 8108cf8:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8108cfa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8108cfc:	e853 3f00 	ldrex	r3, [r3]
 8108d00:	623b      	str	r3, [r7, #32]
   return(result);
 8108d02:	6a3b      	ldr	r3, [r7, #32]
 8108d04:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8108d08:	64fb      	str	r3, [r7, #76]	; 0x4c
 8108d0a:	687b      	ldr	r3, [r7, #4]
 8108d0c:	681b      	ldr	r3, [r3, #0]
 8108d0e:	461a      	mov	r2, r3
 8108d10:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8108d12:	633b      	str	r3, [r7, #48]	; 0x30
 8108d14:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8108d16:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8108d18:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8108d1a:	e841 2300 	strex	r3, r2, [r1]
 8108d1e:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8108d20:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8108d22:	2b00      	cmp	r3, #0
 8108d24:	d1e6      	bne.n	8108cf4 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8108d26:	687b      	ldr	r3, [r7, #4]
 8108d28:	681b      	ldr	r3, [r3, #0]
 8108d2a:	3308      	adds	r3, #8
 8108d2c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8108d2e:	693b      	ldr	r3, [r7, #16]
 8108d30:	e853 3f00 	ldrex	r3, [r3]
 8108d34:	60fb      	str	r3, [r7, #12]
   return(result);
 8108d36:	68fb      	ldr	r3, [r7, #12]
 8108d38:	f023 0301 	bic.w	r3, r3, #1
 8108d3c:	64bb      	str	r3, [r7, #72]	; 0x48
 8108d3e:	687b      	ldr	r3, [r7, #4]
 8108d40:	681b      	ldr	r3, [r3, #0]
 8108d42:	3308      	adds	r3, #8
 8108d44:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8108d46:	61fa      	str	r2, [r7, #28]
 8108d48:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8108d4a:	69b9      	ldr	r1, [r7, #24]
 8108d4c:	69fa      	ldr	r2, [r7, #28]
 8108d4e:	e841 2300 	strex	r3, r2, [r1]
 8108d52:	617b      	str	r3, [r7, #20]
   return(result);
 8108d54:	697b      	ldr	r3, [r7, #20]
 8108d56:	2b00      	cmp	r3, #0
 8108d58:	d1e5      	bne.n	8108d26 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8108d5a:	687b      	ldr	r3, [r7, #4]
 8108d5c:	2220      	movs	r2, #32
 8108d5e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 8108d62:	687b      	ldr	r3, [r7, #4]
 8108d64:	2200      	movs	r2, #0
 8108d66:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8108d6a:	2303      	movs	r3, #3
 8108d6c:	e012      	b.n	8108d94 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8108d6e:	687b      	ldr	r3, [r7, #4]
 8108d70:	2220      	movs	r2, #32
 8108d72:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8108d76:	687b      	ldr	r3, [r7, #4]
 8108d78:	2220      	movs	r2, #32
 8108d7a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8108d7e:	687b      	ldr	r3, [r7, #4]
 8108d80:	2200      	movs	r2, #0
 8108d82:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8108d84:	687b      	ldr	r3, [r7, #4]
 8108d86:	2200      	movs	r2, #0
 8108d88:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 8108d8a:	687b      	ldr	r3, [r7, #4]
 8108d8c:	2200      	movs	r2, #0
 8108d8e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8108d92:	2300      	movs	r3, #0
}
 8108d94:	4618      	mov	r0, r3
 8108d96:	3758      	adds	r7, #88	; 0x58
 8108d98:	46bd      	mov	sp, r7
 8108d9a:	bd80      	pop	{r7, pc}

08108d9c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8108d9c:	b580      	push	{r7, lr}
 8108d9e:	b084      	sub	sp, #16
 8108da0:	af00      	add	r7, sp, #0
 8108da2:	60f8      	str	r0, [r7, #12]
 8108da4:	60b9      	str	r1, [r7, #8]
 8108da6:	603b      	str	r3, [r7, #0]
 8108da8:	4613      	mov	r3, r2
 8108daa:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8108dac:	e049      	b.n	8108e42 <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8108dae:	69bb      	ldr	r3, [r7, #24]
 8108db0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8108db4:	d045      	beq.n	8108e42 <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8108db6:	f7f8 ff35 	bl	8101c24 <HAL_GetTick>
 8108dba:	4602      	mov	r2, r0
 8108dbc:	683b      	ldr	r3, [r7, #0]
 8108dbe:	1ad3      	subs	r3, r2, r3
 8108dc0:	69ba      	ldr	r2, [r7, #24]
 8108dc2:	429a      	cmp	r2, r3
 8108dc4:	d302      	bcc.n	8108dcc <UART_WaitOnFlagUntilTimeout+0x30>
 8108dc6:	69bb      	ldr	r3, [r7, #24]
 8108dc8:	2b00      	cmp	r3, #0
 8108dca:	d101      	bne.n	8108dd0 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8108dcc:	2303      	movs	r3, #3
 8108dce:	e048      	b.n	8108e62 <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8108dd0:	68fb      	ldr	r3, [r7, #12]
 8108dd2:	681b      	ldr	r3, [r3, #0]
 8108dd4:	681b      	ldr	r3, [r3, #0]
 8108dd6:	f003 0304 	and.w	r3, r3, #4
 8108dda:	2b00      	cmp	r3, #0
 8108ddc:	d031      	beq.n	8108e42 <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8108dde:	68fb      	ldr	r3, [r7, #12]
 8108de0:	681b      	ldr	r3, [r3, #0]
 8108de2:	69db      	ldr	r3, [r3, #28]
 8108de4:	f003 0308 	and.w	r3, r3, #8
 8108de8:	2b08      	cmp	r3, #8
 8108dea:	d110      	bne.n	8108e0e <UART_WaitOnFlagUntilTimeout+0x72>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8108dec:	68fb      	ldr	r3, [r7, #12]
 8108dee:	681b      	ldr	r3, [r3, #0]
 8108df0:	2208      	movs	r2, #8
 8108df2:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 8108df4:	68f8      	ldr	r0, [r7, #12]
 8108df6:	f000 f838 	bl	8108e6a <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 8108dfa:	68fb      	ldr	r3, [r7, #12]
 8108dfc:	2208      	movs	r2, #8
 8108dfe:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 8108e02:	68fb      	ldr	r3, [r7, #12]
 8108e04:	2200      	movs	r2, #0
 8108e06:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

           return HAL_ERROR;
 8108e0a:	2301      	movs	r3, #1
 8108e0c:	e029      	b.n	8108e62 <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8108e0e:	68fb      	ldr	r3, [r7, #12]
 8108e10:	681b      	ldr	r3, [r3, #0]
 8108e12:	69db      	ldr	r3, [r3, #28]
 8108e14:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8108e18:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8108e1c:	d111      	bne.n	8108e42 <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8108e1e:	68fb      	ldr	r3, [r7, #12]
 8108e20:	681b      	ldr	r3, [r3, #0]
 8108e22:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8108e26:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8108e28:	68f8      	ldr	r0, [r7, #12]
 8108e2a:	f000 f81e 	bl	8108e6a <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8108e2e:	68fb      	ldr	r3, [r7, #12]
 8108e30:	2220      	movs	r2, #32
 8108e32:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8108e36:	68fb      	ldr	r3, [r7, #12]
 8108e38:	2200      	movs	r2, #0
 8108e3a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 8108e3e:	2303      	movs	r3, #3
 8108e40:	e00f      	b.n	8108e62 <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8108e42:	68fb      	ldr	r3, [r7, #12]
 8108e44:	681b      	ldr	r3, [r3, #0]
 8108e46:	69da      	ldr	r2, [r3, #28]
 8108e48:	68bb      	ldr	r3, [r7, #8]
 8108e4a:	4013      	ands	r3, r2
 8108e4c:	68ba      	ldr	r2, [r7, #8]
 8108e4e:	429a      	cmp	r2, r3
 8108e50:	bf0c      	ite	eq
 8108e52:	2301      	moveq	r3, #1
 8108e54:	2300      	movne	r3, #0
 8108e56:	b2db      	uxtb	r3, r3
 8108e58:	461a      	mov	r2, r3
 8108e5a:	79fb      	ldrb	r3, [r7, #7]
 8108e5c:	429a      	cmp	r2, r3
 8108e5e:	d0a6      	beq.n	8108dae <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8108e60:	2300      	movs	r3, #0
}
 8108e62:	4618      	mov	r0, r3
 8108e64:	3710      	adds	r7, #16
 8108e66:	46bd      	mov	sp, r7
 8108e68:	bd80      	pop	{r7, pc}

08108e6a <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8108e6a:	b480      	push	{r7}
 8108e6c:	b095      	sub	sp, #84	; 0x54
 8108e6e:	af00      	add	r7, sp, #0
 8108e70:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8108e72:	687b      	ldr	r3, [r7, #4]
 8108e74:	681b      	ldr	r3, [r3, #0]
 8108e76:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8108e78:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8108e7a:	e853 3f00 	ldrex	r3, [r3]
 8108e7e:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8108e80:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8108e82:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8108e86:	64fb      	str	r3, [r7, #76]	; 0x4c
 8108e88:	687b      	ldr	r3, [r7, #4]
 8108e8a:	681b      	ldr	r3, [r3, #0]
 8108e8c:	461a      	mov	r2, r3
 8108e8e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8108e90:	643b      	str	r3, [r7, #64]	; 0x40
 8108e92:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8108e94:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8108e96:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8108e98:	e841 2300 	strex	r3, r2, [r1]
 8108e9c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8108e9e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8108ea0:	2b00      	cmp	r3, #0
 8108ea2:	d1e6      	bne.n	8108e72 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8108ea4:	687b      	ldr	r3, [r7, #4]
 8108ea6:	681b      	ldr	r3, [r3, #0]
 8108ea8:	3308      	adds	r3, #8
 8108eaa:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8108eac:	6a3b      	ldr	r3, [r7, #32]
 8108eae:	e853 3f00 	ldrex	r3, [r3]
 8108eb2:	61fb      	str	r3, [r7, #28]
   return(result);
 8108eb4:	69fb      	ldr	r3, [r7, #28]
 8108eb6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8108eba:	f023 0301 	bic.w	r3, r3, #1
 8108ebe:	64bb      	str	r3, [r7, #72]	; 0x48
 8108ec0:	687b      	ldr	r3, [r7, #4]
 8108ec2:	681b      	ldr	r3, [r3, #0]
 8108ec4:	3308      	adds	r3, #8
 8108ec6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8108ec8:	62fa      	str	r2, [r7, #44]	; 0x2c
 8108eca:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8108ecc:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8108ece:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8108ed0:	e841 2300 	strex	r3, r2, [r1]
 8108ed4:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8108ed6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8108ed8:	2b00      	cmp	r3, #0
 8108eda:	d1e3      	bne.n	8108ea4 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8108edc:	687b      	ldr	r3, [r7, #4]
 8108ede:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8108ee0:	2b01      	cmp	r3, #1
 8108ee2:	d118      	bne.n	8108f16 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8108ee4:	687b      	ldr	r3, [r7, #4]
 8108ee6:	681b      	ldr	r3, [r3, #0]
 8108ee8:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8108eea:	68fb      	ldr	r3, [r7, #12]
 8108eec:	e853 3f00 	ldrex	r3, [r3]
 8108ef0:	60bb      	str	r3, [r7, #8]
   return(result);
 8108ef2:	68bb      	ldr	r3, [r7, #8]
 8108ef4:	f023 0310 	bic.w	r3, r3, #16
 8108ef8:	647b      	str	r3, [r7, #68]	; 0x44
 8108efa:	687b      	ldr	r3, [r7, #4]
 8108efc:	681b      	ldr	r3, [r3, #0]
 8108efe:	461a      	mov	r2, r3
 8108f00:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8108f02:	61bb      	str	r3, [r7, #24]
 8108f04:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8108f06:	6979      	ldr	r1, [r7, #20]
 8108f08:	69ba      	ldr	r2, [r7, #24]
 8108f0a:	e841 2300 	strex	r3, r2, [r1]
 8108f0e:	613b      	str	r3, [r7, #16]
   return(result);
 8108f10:	693b      	ldr	r3, [r7, #16]
 8108f12:	2b00      	cmp	r3, #0
 8108f14:	d1e6      	bne.n	8108ee4 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8108f16:	687b      	ldr	r3, [r7, #4]
 8108f18:	2220      	movs	r2, #32
 8108f1a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8108f1e:	687b      	ldr	r3, [r7, #4]
 8108f20:	2200      	movs	r2, #0
 8108f22:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8108f24:	687b      	ldr	r3, [r7, #4]
 8108f26:	2200      	movs	r2, #0
 8108f28:	675a      	str	r2, [r3, #116]	; 0x74
}
 8108f2a:	bf00      	nop
 8108f2c:	3754      	adds	r7, #84	; 0x54
 8108f2e:	46bd      	mov	sp, r7
 8108f30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8108f34:	4770      	bx	lr

08108f36 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8108f36:	b480      	push	{r7}
 8108f38:	b085      	sub	sp, #20
 8108f3a:	af00      	add	r7, sp, #0
 8108f3c:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8108f3e:	687b      	ldr	r3, [r7, #4]
 8108f40:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8108f44:	2b01      	cmp	r3, #1
 8108f46:	d101      	bne.n	8108f4c <HAL_UARTEx_DisableFifoMode+0x16>
 8108f48:	2302      	movs	r3, #2
 8108f4a:	e027      	b.n	8108f9c <HAL_UARTEx_DisableFifoMode+0x66>
 8108f4c:	687b      	ldr	r3, [r7, #4]
 8108f4e:	2201      	movs	r2, #1
 8108f50:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8108f54:	687b      	ldr	r3, [r7, #4]
 8108f56:	2224      	movs	r2, #36	; 0x24
 8108f58:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8108f5c:	687b      	ldr	r3, [r7, #4]
 8108f5e:	681b      	ldr	r3, [r3, #0]
 8108f60:	681b      	ldr	r3, [r3, #0]
 8108f62:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8108f64:	687b      	ldr	r3, [r7, #4]
 8108f66:	681b      	ldr	r3, [r3, #0]
 8108f68:	681a      	ldr	r2, [r3, #0]
 8108f6a:	687b      	ldr	r3, [r7, #4]
 8108f6c:	681b      	ldr	r3, [r3, #0]
 8108f6e:	f022 0201 	bic.w	r2, r2, #1
 8108f72:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8108f74:	68fb      	ldr	r3, [r7, #12]
 8108f76:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8108f7a:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8108f7c:	687b      	ldr	r3, [r7, #4]
 8108f7e:	2200      	movs	r2, #0
 8108f80:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8108f82:	687b      	ldr	r3, [r7, #4]
 8108f84:	681b      	ldr	r3, [r3, #0]
 8108f86:	68fa      	ldr	r2, [r7, #12]
 8108f88:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8108f8a:	687b      	ldr	r3, [r7, #4]
 8108f8c:	2220      	movs	r2, #32
 8108f8e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8108f92:	687b      	ldr	r3, [r7, #4]
 8108f94:	2200      	movs	r2, #0
 8108f96:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8108f9a:	2300      	movs	r3, #0
}
 8108f9c:	4618      	mov	r0, r3
 8108f9e:	3714      	adds	r7, #20
 8108fa0:	46bd      	mov	sp, r7
 8108fa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8108fa6:	4770      	bx	lr

08108fa8 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8108fa8:	b580      	push	{r7, lr}
 8108faa:	b084      	sub	sp, #16
 8108fac:	af00      	add	r7, sp, #0
 8108fae:	6078      	str	r0, [r7, #4]
 8108fb0:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8108fb2:	687b      	ldr	r3, [r7, #4]
 8108fb4:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8108fb8:	2b01      	cmp	r3, #1
 8108fba:	d101      	bne.n	8108fc0 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8108fbc:	2302      	movs	r3, #2
 8108fbe:	e02d      	b.n	810901c <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8108fc0:	687b      	ldr	r3, [r7, #4]
 8108fc2:	2201      	movs	r2, #1
 8108fc4:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8108fc8:	687b      	ldr	r3, [r7, #4]
 8108fca:	2224      	movs	r2, #36	; 0x24
 8108fcc:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8108fd0:	687b      	ldr	r3, [r7, #4]
 8108fd2:	681b      	ldr	r3, [r3, #0]
 8108fd4:	681b      	ldr	r3, [r3, #0]
 8108fd6:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8108fd8:	687b      	ldr	r3, [r7, #4]
 8108fda:	681b      	ldr	r3, [r3, #0]
 8108fdc:	681a      	ldr	r2, [r3, #0]
 8108fde:	687b      	ldr	r3, [r7, #4]
 8108fe0:	681b      	ldr	r3, [r3, #0]
 8108fe2:	f022 0201 	bic.w	r2, r2, #1
 8108fe6:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8108fe8:	687b      	ldr	r3, [r7, #4]
 8108fea:	681b      	ldr	r3, [r3, #0]
 8108fec:	689b      	ldr	r3, [r3, #8]
 8108fee:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8108ff2:	687b      	ldr	r3, [r7, #4]
 8108ff4:	681b      	ldr	r3, [r3, #0]
 8108ff6:	683a      	ldr	r2, [r7, #0]
 8108ff8:	430a      	orrs	r2, r1
 8108ffa:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8108ffc:	6878      	ldr	r0, [r7, #4]
 8108ffe:	f000 f84f 	bl	81090a0 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8109002:	687b      	ldr	r3, [r7, #4]
 8109004:	681b      	ldr	r3, [r3, #0]
 8109006:	68fa      	ldr	r2, [r7, #12]
 8109008:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 810900a:	687b      	ldr	r3, [r7, #4]
 810900c:	2220      	movs	r2, #32
 810900e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8109012:	687b      	ldr	r3, [r7, #4]
 8109014:	2200      	movs	r2, #0
 8109016:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 810901a:	2300      	movs	r3, #0
}
 810901c:	4618      	mov	r0, r3
 810901e:	3710      	adds	r7, #16
 8109020:	46bd      	mov	sp, r7
 8109022:	bd80      	pop	{r7, pc}

08109024 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8109024:	b580      	push	{r7, lr}
 8109026:	b084      	sub	sp, #16
 8109028:	af00      	add	r7, sp, #0
 810902a:	6078      	str	r0, [r7, #4]
 810902c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 810902e:	687b      	ldr	r3, [r7, #4]
 8109030:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8109034:	2b01      	cmp	r3, #1
 8109036:	d101      	bne.n	810903c <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8109038:	2302      	movs	r3, #2
 810903a:	e02d      	b.n	8109098 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 810903c:	687b      	ldr	r3, [r7, #4]
 810903e:	2201      	movs	r2, #1
 8109040:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8109044:	687b      	ldr	r3, [r7, #4]
 8109046:	2224      	movs	r2, #36	; 0x24
 8109048:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 810904c:	687b      	ldr	r3, [r7, #4]
 810904e:	681b      	ldr	r3, [r3, #0]
 8109050:	681b      	ldr	r3, [r3, #0]
 8109052:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8109054:	687b      	ldr	r3, [r7, #4]
 8109056:	681b      	ldr	r3, [r3, #0]
 8109058:	681a      	ldr	r2, [r3, #0]
 810905a:	687b      	ldr	r3, [r7, #4]
 810905c:	681b      	ldr	r3, [r3, #0]
 810905e:	f022 0201 	bic.w	r2, r2, #1
 8109062:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8109064:	687b      	ldr	r3, [r7, #4]
 8109066:	681b      	ldr	r3, [r3, #0]
 8109068:	689b      	ldr	r3, [r3, #8]
 810906a:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 810906e:	687b      	ldr	r3, [r7, #4]
 8109070:	681b      	ldr	r3, [r3, #0]
 8109072:	683a      	ldr	r2, [r7, #0]
 8109074:	430a      	orrs	r2, r1
 8109076:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8109078:	6878      	ldr	r0, [r7, #4]
 810907a:	f000 f811 	bl	81090a0 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 810907e:	687b      	ldr	r3, [r7, #4]
 8109080:	681b      	ldr	r3, [r3, #0]
 8109082:	68fa      	ldr	r2, [r7, #12]
 8109084:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8109086:	687b      	ldr	r3, [r7, #4]
 8109088:	2220      	movs	r2, #32
 810908a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 810908e:	687b      	ldr	r3, [r7, #4]
 8109090:	2200      	movs	r2, #0
 8109092:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8109096:	2300      	movs	r3, #0
}
 8109098:	4618      	mov	r0, r3
 810909a:	3710      	adds	r7, #16
 810909c:	46bd      	mov	sp, r7
 810909e:	bd80      	pop	{r7, pc}

081090a0 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 81090a0:	b480      	push	{r7}
 81090a2:	b085      	sub	sp, #20
 81090a4:	af00      	add	r7, sp, #0
 81090a6:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 81090a8:	687b      	ldr	r3, [r7, #4]
 81090aa:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 81090ac:	2b00      	cmp	r3, #0
 81090ae:	d108      	bne.n	81090c2 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 81090b0:	687b      	ldr	r3, [r7, #4]
 81090b2:	2201      	movs	r2, #1
 81090b4:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 81090b8:	687b      	ldr	r3, [r7, #4]
 81090ba:	2201      	movs	r2, #1
 81090bc:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 81090c0:	e031      	b.n	8109126 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 81090c2:	2310      	movs	r3, #16
 81090c4:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 81090c6:	2310      	movs	r3, #16
 81090c8:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 81090ca:	687b      	ldr	r3, [r7, #4]
 81090cc:	681b      	ldr	r3, [r3, #0]
 81090ce:	689b      	ldr	r3, [r3, #8]
 81090d0:	0e5b      	lsrs	r3, r3, #25
 81090d2:	b2db      	uxtb	r3, r3
 81090d4:	f003 0307 	and.w	r3, r3, #7
 81090d8:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 81090da:	687b      	ldr	r3, [r7, #4]
 81090dc:	681b      	ldr	r3, [r3, #0]
 81090de:	689b      	ldr	r3, [r3, #8]
 81090e0:	0f5b      	lsrs	r3, r3, #29
 81090e2:	b2db      	uxtb	r3, r3
 81090e4:	f003 0307 	and.w	r3, r3, #7
 81090e8:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 81090ea:	7bbb      	ldrb	r3, [r7, #14]
 81090ec:	7b3a      	ldrb	r2, [r7, #12]
 81090ee:	4911      	ldr	r1, [pc, #68]	; (8109134 <UARTEx_SetNbDataToProcess+0x94>)
 81090f0:	5c8a      	ldrb	r2, [r1, r2]
 81090f2:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 81090f6:	7b3a      	ldrb	r2, [r7, #12]
 81090f8:	490f      	ldr	r1, [pc, #60]	; (8109138 <UARTEx_SetNbDataToProcess+0x98>)
 81090fa:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 81090fc:	fb93 f3f2 	sdiv	r3, r3, r2
 8109100:	b29a      	uxth	r2, r3
 8109102:	687b      	ldr	r3, [r7, #4]
 8109104:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8109108:	7bfb      	ldrb	r3, [r7, #15]
 810910a:	7b7a      	ldrb	r2, [r7, #13]
 810910c:	4909      	ldr	r1, [pc, #36]	; (8109134 <UARTEx_SetNbDataToProcess+0x94>)
 810910e:	5c8a      	ldrb	r2, [r1, r2]
 8109110:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8109114:	7b7a      	ldrb	r2, [r7, #13]
 8109116:	4908      	ldr	r1, [pc, #32]	; (8109138 <UARTEx_SetNbDataToProcess+0x98>)
 8109118:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 810911a:	fb93 f3f2 	sdiv	r3, r3, r2
 810911e:	b29a      	uxth	r2, r3
 8109120:	687b      	ldr	r3, [r7, #4]
 8109122:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8109126:	bf00      	nop
 8109128:	3714      	adds	r7, #20
 810912a:	46bd      	mov	sp, r7
 810912c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8109130:	4770      	bx	lr
 8109132:	bf00      	nop
 8109134:	0810bdd0 	.word	0x0810bdd0
 8109138:	0810bdd8 	.word	0x0810bdd8

0810913c <__assert_func>:
 810913c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 810913e:	4614      	mov	r4, r2
 8109140:	461a      	mov	r2, r3
 8109142:	4b09      	ldr	r3, [pc, #36]	; (8109168 <__assert_func+0x2c>)
 8109144:	681b      	ldr	r3, [r3, #0]
 8109146:	4605      	mov	r5, r0
 8109148:	68d8      	ldr	r0, [r3, #12]
 810914a:	b14c      	cbz	r4, 8109160 <__assert_func+0x24>
 810914c:	4b07      	ldr	r3, [pc, #28]	; (810916c <__assert_func+0x30>)
 810914e:	9100      	str	r1, [sp, #0]
 8109150:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8109154:	4906      	ldr	r1, [pc, #24]	; (8109170 <__assert_func+0x34>)
 8109156:	462b      	mov	r3, r5
 8109158:	f000 fa0c 	bl	8109574 <fiprintf>
 810915c:	f000 fbab 	bl	81098b6 <abort>
 8109160:	4b04      	ldr	r3, [pc, #16]	; (8109174 <__assert_func+0x38>)
 8109162:	461c      	mov	r4, r3
 8109164:	e7f3      	b.n	810914e <__assert_func+0x12>
 8109166:	bf00      	nop
 8109168:	10000068 	.word	0x10000068
 810916c:	0810bde0 	.word	0x0810bde0
 8109170:	0810bded 	.word	0x0810bded
 8109174:	0810be1b 	.word	0x0810be1b

08109178 <sbrk_aligned>:
 8109178:	b570      	push	{r4, r5, r6, lr}
 810917a:	4e0e      	ldr	r6, [pc, #56]	; (81091b4 <sbrk_aligned+0x3c>)
 810917c:	460c      	mov	r4, r1
 810917e:	6831      	ldr	r1, [r6, #0]
 8109180:	4605      	mov	r5, r0
 8109182:	b911      	cbnz	r1, 810918a <sbrk_aligned+0x12>
 8109184:	f000 fb3a 	bl	81097fc <_sbrk_r>
 8109188:	6030      	str	r0, [r6, #0]
 810918a:	4621      	mov	r1, r4
 810918c:	4628      	mov	r0, r5
 810918e:	f000 fb35 	bl	81097fc <_sbrk_r>
 8109192:	1c43      	adds	r3, r0, #1
 8109194:	d00a      	beq.n	81091ac <sbrk_aligned+0x34>
 8109196:	1cc4      	adds	r4, r0, #3
 8109198:	f024 0403 	bic.w	r4, r4, #3
 810919c:	42a0      	cmp	r0, r4
 810919e:	d007      	beq.n	81091b0 <sbrk_aligned+0x38>
 81091a0:	1a21      	subs	r1, r4, r0
 81091a2:	4628      	mov	r0, r5
 81091a4:	f000 fb2a 	bl	81097fc <_sbrk_r>
 81091a8:	3001      	adds	r0, #1
 81091aa:	d101      	bne.n	81091b0 <sbrk_aligned+0x38>
 81091ac:	f04f 34ff 	mov.w	r4, #4294967295
 81091b0:	4620      	mov	r0, r4
 81091b2:	bd70      	pop	{r4, r5, r6, pc}
 81091b4:	10001cdc 	.word	0x10001cdc

081091b8 <_malloc_r>:
 81091b8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 81091bc:	1ccd      	adds	r5, r1, #3
 81091be:	f025 0503 	bic.w	r5, r5, #3
 81091c2:	3508      	adds	r5, #8
 81091c4:	2d0c      	cmp	r5, #12
 81091c6:	bf38      	it	cc
 81091c8:	250c      	movcc	r5, #12
 81091ca:	2d00      	cmp	r5, #0
 81091cc:	4607      	mov	r7, r0
 81091ce:	db01      	blt.n	81091d4 <_malloc_r+0x1c>
 81091d0:	42a9      	cmp	r1, r5
 81091d2:	d905      	bls.n	81091e0 <_malloc_r+0x28>
 81091d4:	230c      	movs	r3, #12
 81091d6:	603b      	str	r3, [r7, #0]
 81091d8:	2600      	movs	r6, #0
 81091da:	4630      	mov	r0, r6
 81091dc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 81091e0:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 81092b4 <_malloc_r+0xfc>
 81091e4:	f000 f868 	bl	81092b8 <__malloc_lock>
 81091e8:	f8d8 3000 	ldr.w	r3, [r8]
 81091ec:	461c      	mov	r4, r3
 81091ee:	bb5c      	cbnz	r4, 8109248 <_malloc_r+0x90>
 81091f0:	4629      	mov	r1, r5
 81091f2:	4638      	mov	r0, r7
 81091f4:	f7ff ffc0 	bl	8109178 <sbrk_aligned>
 81091f8:	1c43      	adds	r3, r0, #1
 81091fa:	4604      	mov	r4, r0
 81091fc:	d155      	bne.n	81092aa <_malloc_r+0xf2>
 81091fe:	f8d8 4000 	ldr.w	r4, [r8]
 8109202:	4626      	mov	r6, r4
 8109204:	2e00      	cmp	r6, #0
 8109206:	d145      	bne.n	8109294 <_malloc_r+0xdc>
 8109208:	2c00      	cmp	r4, #0
 810920a:	d048      	beq.n	810929e <_malloc_r+0xe6>
 810920c:	6823      	ldr	r3, [r4, #0]
 810920e:	4631      	mov	r1, r6
 8109210:	4638      	mov	r0, r7
 8109212:	eb04 0903 	add.w	r9, r4, r3
 8109216:	f000 faf1 	bl	81097fc <_sbrk_r>
 810921a:	4581      	cmp	r9, r0
 810921c:	d13f      	bne.n	810929e <_malloc_r+0xe6>
 810921e:	6821      	ldr	r1, [r4, #0]
 8109220:	1a6d      	subs	r5, r5, r1
 8109222:	4629      	mov	r1, r5
 8109224:	4638      	mov	r0, r7
 8109226:	f7ff ffa7 	bl	8109178 <sbrk_aligned>
 810922a:	3001      	adds	r0, #1
 810922c:	d037      	beq.n	810929e <_malloc_r+0xe6>
 810922e:	6823      	ldr	r3, [r4, #0]
 8109230:	442b      	add	r3, r5
 8109232:	6023      	str	r3, [r4, #0]
 8109234:	f8d8 3000 	ldr.w	r3, [r8]
 8109238:	2b00      	cmp	r3, #0
 810923a:	d038      	beq.n	81092ae <_malloc_r+0xf6>
 810923c:	685a      	ldr	r2, [r3, #4]
 810923e:	42a2      	cmp	r2, r4
 8109240:	d12b      	bne.n	810929a <_malloc_r+0xe2>
 8109242:	2200      	movs	r2, #0
 8109244:	605a      	str	r2, [r3, #4]
 8109246:	e00f      	b.n	8109268 <_malloc_r+0xb0>
 8109248:	6822      	ldr	r2, [r4, #0]
 810924a:	1b52      	subs	r2, r2, r5
 810924c:	d41f      	bmi.n	810928e <_malloc_r+0xd6>
 810924e:	2a0b      	cmp	r2, #11
 8109250:	d917      	bls.n	8109282 <_malloc_r+0xca>
 8109252:	1961      	adds	r1, r4, r5
 8109254:	42a3      	cmp	r3, r4
 8109256:	6025      	str	r5, [r4, #0]
 8109258:	bf18      	it	ne
 810925a:	6059      	strne	r1, [r3, #4]
 810925c:	6863      	ldr	r3, [r4, #4]
 810925e:	bf08      	it	eq
 8109260:	f8c8 1000 	streq.w	r1, [r8]
 8109264:	5162      	str	r2, [r4, r5]
 8109266:	604b      	str	r3, [r1, #4]
 8109268:	4638      	mov	r0, r7
 810926a:	f104 060b 	add.w	r6, r4, #11
 810926e:	f000 f829 	bl	81092c4 <__malloc_unlock>
 8109272:	f026 0607 	bic.w	r6, r6, #7
 8109276:	1d23      	adds	r3, r4, #4
 8109278:	1af2      	subs	r2, r6, r3
 810927a:	d0ae      	beq.n	81091da <_malloc_r+0x22>
 810927c:	1b9b      	subs	r3, r3, r6
 810927e:	50a3      	str	r3, [r4, r2]
 8109280:	e7ab      	b.n	81091da <_malloc_r+0x22>
 8109282:	42a3      	cmp	r3, r4
 8109284:	6862      	ldr	r2, [r4, #4]
 8109286:	d1dd      	bne.n	8109244 <_malloc_r+0x8c>
 8109288:	f8c8 2000 	str.w	r2, [r8]
 810928c:	e7ec      	b.n	8109268 <_malloc_r+0xb0>
 810928e:	4623      	mov	r3, r4
 8109290:	6864      	ldr	r4, [r4, #4]
 8109292:	e7ac      	b.n	81091ee <_malloc_r+0x36>
 8109294:	4634      	mov	r4, r6
 8109296:	6876      	ldr	r6, [r6, #4]
 8109298:	e7b4      	b.n	8109204 <_malloc_r+0x4c>
 810929a:	4613      	mov	r3, r2
 810929c:	e7cc      	b.n	8109238 <_malloc_r+0x80>
 810929e:	230c      	movs	r3, #12
 81092a0:	603b      	str	r3, [r7, #0]
 81092a2:	4638      	mov	r0, r7
 81092a4:	f000 f80e 	bl	81092c4 <__malloc_unlock>
 81092a8:	e797      	b.n	81091da <_malloc_r+0x22>
 81092aa:	6025      	str	r5, [r4, #0]
 81092ac:	e7dc      	b.n	8109268 <_malloc_r+0xb0>
 81092ae:	605b      	str	r3, [r3, #4]
 81092b0:	deff      	udf	#255	; 0xff
 81092b2:	bf00      	nop
 81092b4:	10001cd8 	.word	0x10001cd8

081092b8 <__malloc_lock>:
 81092b8:	4801      	ldr	r0, [pc, #4]	; (81092c0 <__malloc_lock+0x8>)
 81092ba:	f000 baec 	b.w	8109896 <__retarget_lock_acquire_recursive>
 81092be:	bf00      	nop
 81092c0:	10001e20 	.word	0x10001e20

081092c4 <__malloc_unlock>:
 81092c4:	4801      	ldr	r0, [pc, #4]	; (81092cc <__malloc_unlock+0x8>)
 81092c6:	f000 bae7 	b.w	8109898 <__retarget_lock_release_recursive>
 81092ca:	bf00      	nop
 81092cc:	10001e20 	.word	0x10001e20

081092d0 <__sflush_r>:
 81092d0:	898a      	ldrh	r2, [r1, #12]
 81092d2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 81092d6:	4605      	mov	r5, r0
 81092d8:	0710      	lsls	r0, r2, #28
 81092da:	460c      	mov	r4, r1
 81092dc:	d458      	bmi.n	8109390 <__sflush_r+0xc0>
 81092de:	684b      	ldr	r3, [r1, #4]
 81092e0:	2b00      	cmp	r3, #0
 81092e2:	dc05      	bgt.n	81092f0 <__sflush_r+0x20>
 81092e4:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 81092e6:	2b00      	cmp	r3, #0
 81092e8:	dc02      	bgt.n	81092f0 <__sflush_r+0x20>
 81092ea:	2000      	movs	r0, #0
 81092ec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 81092f0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 81092f2:	2e00      	cmp	r6, #0
 81092f4:	d0f9      	beq.n	81092ea <__sflush_r+0x1a>
 81092f6:	2300      	movs	r3, #0
 81092f8:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 81092fc:	682f      	ldr	r7, [r5, #0]
 81092fe:	6a21      	ldr	r1, [r4, #32]
 8109300:	602b      	str	r3, [r5, #0]
 8109302:	d032      	beq.n	810936a <__sflush_r+0x9a>
 8109304:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8109306:	89a3      	ldrh	r3, [r4, #12]
 8109308:	075a      	lsls	r2, r3, #29
 810930a:	d505      	bpl.n	8109318 <__sflush_r+0x48>
 810930c:	6863      	ldr	r3, [r4, #4]
 810930e:	1ac0      	subs	r0, r0, r3
 8109310:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8109312:	b10b      	cbz	r3, 8109318 <__sflush_r+0x48>
 8109314:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8109316:	1ac0      	subs	r0, r0, r3
 8109318:	2300      	movs	r3, #0
 810931a:	4602      	mov	r2, r0
 810931c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 810931e:	6a21      	ldr	r1, [r4, #32]
 8109320:	4628      	mov	r0, r5
 8109322:	47b0      	blx	r6
 8109324:	1c43      	adds	r3, r0, #1
 8109326:	89a3      	ldrh	r3, [r4, #12]
 8109328:	d106      	bne.n	8109338 <__sflush_r+0x68>
 810932a:	6829      	ldr	r1, [r5, #0]
 810932c:	291d      	cmp	r1, #29
 810932e:	d82b      	bhi.n	8109388 <__sflush_r+0xb8>
 8109330:	4a29      	ldr	r2, [pc, #164]	; (81093d8 <__sflush_r+0x108>)
 8109332:	410a      	asrs	r2, r1
 8109334:	07d6      	lsls	r6, r2, #31
 8109336:	d427      	bmi.n	8109388 <__sflush_r+0xb8>
 8109338:	2200      	movs	r2, #0
 810933a:	6062      	str	r2, [r4, #4]
 810933c:	04d9      	lsls	r1, r3, #19
 810933e:	6922      	ldr	r2, [r4, #16]
 8109340:	6022      	str	r2, [r4, #0]
 8109342:	d504      	bpl.n	810934e <__sflush_r+0x7e>
 8109344:	1c42      	adds	r2, r0, #1
 8109346:	d101      	bne.n	810934c <__sflush_r+0x7c>
 8109348:	682b      	ldr	r3, [r5, #0]
 810934a:	b903      	cbnz	r3, 810934e <__sflush_r+0x7e>
 810934c:	6560      	str	r0, [r4, #84]	; 0x54
 810934e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8109350:	602f      	str	r7, [r5, #0]
 8109352:	2900      	cmp	r1, #0
 8109354:	d0c9      	beq.n	81092ea <__sflush_r+0x1a>
 8109356:	f104 0344 	add.w	r3, r4, #68	; 0x44
 810935a:	4299      	cmp	r1, r3
 810935c:	d002      	beq.n	8109364 <__sflush_r+0x94>
 810935e:	4628      	mov	r0, r5
 8109360:	f000 fab0 	bl	81098c4 <_free_r>
 8109364:	2000      	movs	r0, #0
 8109366:	6360      	str	r0, [r4, #52]	; 0x34
 8109368:	e7c0      	b.n	81092ec <__sflush_r+0x1c>
 810936a:	2301      	movs	r3, #1
 810936c:	4628      	mov	r0, r5
 810936e:	47b0      	blx	r6
 8109370:	1c41      	adds	r1, r0, #1
 8109372:	d1c8      	bne.n	8109306 <__sflush_r+0x36>
 8109374:	682b      	ldr	r3, [r5, #0]
 8109376:	2b00      	cmp	r3, #0
 8109378:	d0c5      	beq.n	8109306 <__sflush_r+0x36>
 810937a:	2b1d      	cmp	r3, #29
 810937c:	d001      	beq.n	8109382 <__sflush_r+0xb2>
 810937e:	2b16      	cmp	r3, #22
 8109380:	d101      	bne.n	8109386 <__sflush_r+0xb6>
 8109382:	602f      	str	r7, [r5, #0]
 8109384:	e7b1      	b.n	81092ea <__sflush_r+0x1a>
 8109386:	89a3      	ldrh	r3, [r4, #12]
 8109388:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 810938c:	81a3      	strh	r3, [r4, #12]
 810938e:	e7ad      	b.n	81092ec <__sflush_r+0x1c>
 8109390:	690f      	ldr	r7, [r1, #16]
 8109392:	2f00      	cmp	r7, #0
 8109394:	d0a9      	beq.n	81092ea <__sflush_r+0x1a>
 8109396:	0793      	lsls	r3, r2, #30
 8109398:	680e      	ldr	r6, [r1, #0]
 810939a:	bf08      	it	eq
 810939c:	694b      	ldreq	r3, [r1, #20]
 810939e:	600f      	str	r7, [r1, #0]
 81093a0:	bf18      	it	ne
 81093a2:	2300      	movne	r3, #0
 81093a4:	eba6 0807 	sub.w	r8, r6, r7
 81093a8:	608b      	str	r3, [r1, #8]
 81093aa:	f1b8 0f00 	cmp.w	r8, #0
 81093ae:	dd9c      	ble.n	81092ea <__sflush_r+0x1a>
 81093b0:	6a21      	ldr	r1, [r4, #32]
 81093b2:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 81093b4:	4643      	mov	r3, r8
 81093b6:	463a      	mov	r2, r7
 81093b8:	4628      	mov	r0, r5
 81093ba:	47b0      	blx	r6
 81093bc:	2800      	cmp	r0, #0
 81093be:	dc06      	bgt.n	81093ce <__sflush_r+0xfe>
 81093c0:	89a3      	ldrh	r3, [r4, #12]
 81093c2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 81093c6:	81a3      	strh	r3, [r4, #12]
 81093c8:	f04f 30ff 	mov.w	r0, #4294967295
 81093cc:	e78e      	b.n	81092ec <__sflush_r+0x1c>
 81093ce:	4407      	add	r7, r0
 81093d0:	eba8 0800 	sub.w	r8, r8, r0
 81093d4:	e7e9      	b.n	81093aa <__sflush_r+0xda>
 81093d6:	bf00      	nop
 81093d8:	dfbffffe 	.word	0xdfbffffe

081093dc <_fflush_r>:
 81093dc:	b538      	push	{r3, r4, r5, lr}
 81093de:	690b      	ldr	r3, [r1, #16]
 81093e0:	4605      	mov	r5, r0
 81093e2:	460c      	mov	r4, r1
 81093e4:	b913      	cbnz	r3, 81093ec <_fflush_r+0x10>
 81093e6:	2500      	movs	r5, #0
 81093e8:	4628      	mov	r0, r5
 81093ea:	bd38      	pop	{r3, r4, r5, pc}
 81093ec:	b118      	cbz	r0, 81093f6 <_fflush_r+0x1a>
 81093ee:	6a03      	ldr	r3, [r0, #32]
 81093f0:	b90b      	cbnz	r3, 81093f6 <_fflush_r+0x1a>
 81093f2:	f000 f8a7 	bl	8109544 <__sinit>
 81093f6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 81093fa:	2b00      	cmp	r3, #0
 81093fc:	d0f3      	beq.n	81093e6 <_fflush_r+0xa>
 81093fe:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8109400:	07d0      	lsls	r0, r2, #31
 8109402:	d404      	bmi.n	810940e <_fflush_r+0x32>
 8109404:	0599      	lsls	r1, r3, #22
 8109406:	d402      	bmi.n	810940e <_fflush_r+0x32>
 8109408:	6da0      	ldr	r0, [r4, #88]	; 0x58
 810940a:	f000 fa44 	bl	8109896 <__retarget_lock_acquire_recursive>
 810940e:	4628      	mov	r0, r5
 8109410:	4621      	mov	r1, r4
 8109412:	f7ff ff5d 	bl	81092d0 <__sflush_r>
 8109416:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8109418:	07da      	lsls	r2, r3, #31
 810941a:	4605      	mov	r5, r0
 810941c:	d4e4      	bmi.n	81093e8 <_fflush_r+0xc>
 810941e:	89a3      	ldrh	r3, [r4, #12]
 8109420:	059b      	lsls	r3, r3, #22
 8109422:	d4e1      	bmi.n	81093e8 <_fflush_r+0xc>
 8109424:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8109426:	f000 fa37 	bl	8109898 <__retarget_lock_release_recursive>
 810942a:	e7dd      	b.n	81093e8 <_fflush_r+0xc>

0810942c <std>:
 810942c:	2300      	movs	r3, #0
 810942e:	b510      	push	{r4, lr}
 8109430:	4604      	mov	r4, r0
 8109432:	e9c0 3300 	strd	r3, r3, [r0]
 8109436:	e9c0 3304 	strd	r3, r3, [r0, #16]
 810943a:	6083      	str	r3, [r0, #8]
 810943c:	8181      	strh	r1, [r0, #12]
 810943e:	6643      	str	r3, [r0, #100]	; 0x64
 8109440:	81c2      	strh	r2, [r0, #14]
 8109442:	6183      	str	r3, [r0, #24]
 8109444:	4619      	mov	r1, r3
 8109446:	2208      	movs	r2, #8
 8109448:	305c      	adds	r0, #92	; 0x5c
 810944a:	f000 f99b 	bl	8109784 <memset>
 810944e:	4b0d      	ldr	r3, [pc, #52]	; (8109484 <std+0x58>)
 8109450:	6263      	str	r3, [r4, #36]	; 0x24
 8109452:	4b0d      	ldr	r3, [pc, #52]	; (8109488 <std+0x5c>)
 8109454:	62a3      	str	r3, [r4, #40]	; 0x28
 8109456:	4b0d      	ldr	r3, [pc, #52]	; (810948c <std+0x60>)
 8109458:	62e3      	str	r3, [r4, #44]	; 0x2c
 810945a:	4b0d      	ldr	r3, [pc, #52]	; (8109490 <std+0x64>)
 810945c:	6323      	str	r3, [r4, #48]	; 0x30
 810945e:	4b0d      	ldr	r3, [pc, #52]	; (8109494 <std+0x68>)
 8109460:	6224      	str	r4, [r4, #32]
 8109462:	429c      	cmp	r4, r3
 8109464:	d006      	beq.n	8109474 <std+0x48>
 8109466:	f103 0268 	add.w	r2, r3, #104	; 0x68
 810946a:	4294      	cmp	r4, r2
 810946c:	d002      	beq.n	8109474 <std+0x48>
 810946e:	33d0      	adds	r3, #208	; 0xd0
 8109470:	429c      	cmp	r4, r3
 8109472:	d105      	bne.n	8109480 <std+0x54>
 8109474:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8109478:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 810947c:	f000 ba0a 	b.w	8109894 <__retarget_lock_init_recursive>
 8109480:	bd10      	pop	{r4, pc}
 8109482:	bf00      	nop
 8109484:	081095d5 	.word	0x081095d5
 8109488:	081095f7 	.word	0x081095f7
 810948c:	0810962f 	.word	0x0810962f
 8109490:	08109653 	.word	0x08109653
 8109494:	10001ce0 	.word	0x10001ce0

08109498 <stdio_exit_handler>:
 8109498:	4a02      	ldr	r2, [pc, #8]	; (81094a4 <stdio_exit_handler+0xc>)
 810949a:	4903      	ldr	r1, [pc, #12]	; (81094a8 <stdio_exit_handler+0x10>)
 810949c:	4803      	ldr	r0, [pc, #12]	; (81094ac <stdio_exit_handler+0x14>)
 810949e:	f000 b87b 	b.w	8109598 <_fwalk_sglue>
 81094a2:	bf00      	nop
 81094a4:	10000010 	.word	0x10000010
 81094a8:	081093dd 	.word	0x081093dd
 81094ac:	1000001c 	.word	0x1000001c

081094b0 <cleanup_stdio>:
 81094b0:	6841      	ldr	r1, [r0, #4]
 81094b2:	4b0c      	ldr	r3, [pc, #48]	; (81094e4 <cleanup_stdio+0x34>)
 81094b4:	4299      	cmp	r1, r3
 81094b6:	b510      	push	{r4, lr}
 81094b8:	4604      	mov	r4, r0
 81094ba:	d001      	beq.n	81094c0 <cleanup_stdio+0x10>
 81094bc:	f7ff ff8e 	bl	81093dc <_fflush_r>
 81094c0:	68a1      	ldr	r1, [r4, #8]
 81094c2:	4b09      	ldr	r3, [pc, #36]	; (81094e8 <cleanup_stdio+0x38>)
 81094c4:	4299      	cmp	r1, r3
 81094c6:	d002      	beq.n	81094ce <cleanup_stdio+0x1e>
 81094c8:	4620      	mov	r0, r4
 81094ca:	f7ff ff87 	bl	81093dc <_fflush_r>
 81094ce:	68e1      	ldr	r1, [r4, #12]
 81094d0:	4b06      	ldr	r3, [pc, #24]	; (81094ec <cleanup_stdio+0x3c>)
 81094d2:	4299      	cmp	r1, r3
 81094d4:	d004      	beq.n	81094e0 <cleanup_stdio+0x30>
 81094d6:	4620      	mov	r0, r4
 81094d8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 81094dc:	f7ff bf7e 	b.w	81093dc <_fflush_r>
 81094e0:	bd10      	pop	{r4, pc}
 81094e2:	bf00      	nop
 81094e4:	10001ce0 	.word	0x10001ce0
 81094e8:	10001d48 	.word	0x10001d48
 81094ec:	10001db0 	.word	0x10001db0

081094f0 <global_stdio_init.part.0>:
 81094f0:	b510      	push	{r4, lr}
 81094f2:	4b0b      	ldr	r3, [pc, #44]	; (8109520 <global_stdio_init.part.0+0x30>)
 81094f4:	4c0b      	ldr	r4, [pc, #44]	; (8109524 <global_stdio_init.part.0+0x34>)
 81094f6:	4a0c      	ldr	r2, [pc, #48]	; (8109528 <global_stdio_init.part.0+0x38>)
 81094f8:	601a      	str	r2, [r3, #0]
 81094fa:	4620      	mov	r0, r4
 81094fc:	2200      	movs	r2, #0
 81094fe:	2104      	movs	r1, #4
 8109500:	f7ff ff94 	bl	810942c <std>
 8109504:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8109508:	2201      	movs	r2, #1
 810950a:	2109      	movs	r1, #9
 810950c:	f7ff ff8e 	bl	810942c <std>
 8109510:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8109514:	2202      	movs	r2, #2
 8109516:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 810951a:	2112      	movs	r1, #18
 810951c:	f7ff bf86 	b.w	810942c <std>
 8109520:	10001e18 	.word	0x10001e18
 8109524:	10001ce0 	.word	0x10001ce0
 8109528:	08109499 	.word	0x08109499

0810952c <__sfp_lock_acquire>:
 810952c:	4801      	ldr	r0, [pc, #4]	; (8109534 <__sfp_lock_acquire+0x8>)
 810952e:	f000 b9b2 	b.w	8109896 <__retarget_lock_acquire_recursive>
 8109532:	bf00      	nop
 8109534:	10001e21 	.word	0x10001e21

08109538 <__sfp_lock_release>:
 8109538:	4801      	ldr	r0, [pc, #4]	; (8109540 <__sfp_lock_release+0x8>)
 810953a:	f000 b9ad 	b.w	8109898 <__retarget_lock_release_recursive>
 810953e:	bf00      	nop
 8109540:	10001e21 	.word	0x10001e21

08109544 <__sinit>:
 8109544:	b510      	push	{r4, lr}
 8109546:	4604      	mov	r4, r0
 8109548:	f7ff fff0 	bl	810952c <__sfp_lock_acquire>
 810954c:	6a23      	ldr	r3, [r4, #32]
 810954e:	b11b      	cbz	r3, 8109558 <__sinit+0x14>
 8109550:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8109554:	f7ff bff0 	b.w	8109538 <__sfp_lock_release>
 8109558:	4b04      	ldr	r3, [pc, #16]	; (810956c <__sinit+0x28>)
 810955a:	6223      	str	r3, [r4, #32]
 810955c:	4b04      	ldr	r3, [pc, #16]	; (8109570 <__sinit+0x2c>)
 810955e:	681b      	ldr	r3, [r3, #0]
 8109560:	2b00      	cmp	r3, #0
 8109562:	d1f5      	bne.n	8109550 <__sinit+0xc>
 8109564:	f7ff ffc4 	bl	81094f0 <global_stdio_init.part.0>
 8109568:	e7f2      	b.n	8109550 <__sinit+0xc>
 810956a:	bf00      	nop
 810956c:	081094b1 	.word	0x081094b1
 8109570:	10001e18 	.word	0x10001e18

08109574 <fiprintf>:
 8109574:	b40e      	push	{r1, r2, r3}
 8109576:	b503      	push	{r0, r1, lr}
 8109578:	4601      	mov	r1, r0
 810957a:	ab03      	add	r3, sp, #12
 810957c:	4805      	ldr	r0, [pc, #20]	; (8109594 <fiprintf+0x20>)
 810957e:	f853 2b04 	ldr.w	r2, [r3], #4
 8109582:	6800      	ldr	r0, [r0, #0]
 8109584:	9301      	str	r3, [sp, #4]
 8109586:	f000 fa13 	bl	81099b0 <_vfiprintf_r>
 810958a:	b002      	add	sp, #8
 810958c:	f85d eb04 	ldr.w	lr, [sp], #4
 8109590:	b003      	add	sp, #12
 8109592:	4770      	bx	lr
 8109594:	10000068 	.word	0x10000068

08109598 <_fwalk_sglue>:
 8109598:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 810959c:	4607      	mov	r7, r0
 810959e:	4688      	mov	r8, r1
 81095a0:	4614      	mov	r4, r2
 81095a2:	2600      	movs	r6, #0
 81095a4:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 81095a8:	f1b9 0901 	subs.w	r9, r9, #1
 81095ac:	d505      	bpl.n	81095ba <_fwalk_sglue+0x22>
 81095ae:	6824      	ldr	r4, [r4, #0]
 81095b0:	2c00      	cmp	r4, #0
 81095b2:	d1f7      	bne.n	81095a4 <_fwalk_sglue+0xc>
 81095b4:	4630      	mov	r0, r6
 81095b6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 81095ba:	89ab      	ldrh	r3, [r5, #12]
 81095bc:	2b01      	cmp	r3, #1
 81095be:	d907      	bls.n	81095d0 <_fwalk_sglue+0x38>
 81095c0:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 81095c4:	3301      	adds	r3, #1
 81095c6:	d003      	beq.n	81095d0 <_fwalk_sglue+0x38>
 81095c8:	4629      	mov	r1, r5
 81095ca:	4638      	mov	r0, r7
 81095cc:	47c0      	blx	r8
 81095ce:	4306      	orrs	r6, r0
 81095d0:	3568      	adds	r5, #104	; 0x68
 81095d2:	e7e9      	b.n	81095a8 <_fwalk_sglue+0x10>

081095d4 <__sread>:
 81095d4:	b510      	push	{r4, lr}
 81095d6:	460c      	mov	r4, r1
 81095d8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 81095dc:	f000 f8fc 	bl	81097d8 <_read_r>
 81095e0:	2800      	cmp	r0, #0
 81095e2:	bfab      	itete	ge
 81095e4:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 81095e6:	89a3      	ldrhlt	r3, [r4, #12]
 81095e8:	181b      	addge	r3, r3, r0
 81095ea:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 81095ee:	bfac      	ite	ge
 81095f0:	6563      	strge	r3, [r4, #84]	; 0x54
 81095f2:	81a3      	strhlt	r3, [r4, #12]
 81095f4:	bd10      	pop	{r4, pc}

081095f6 <__swrite>:
 81095f6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 81095fa:	461f      	mov	r7, r3
 81095fc:	898b      	ldrh	r3, [r1, #12]
 81095fe:	05db      	lsls	r3, r3, #23
 8109600:	4605      	mov	r5, r0
 8109602:	460c      	mov	r4, r1
 8109604:	4616      	mov	r6, r2
 8109606:	d505      	bpl.n	8109614 <__swrite+0x1e>
 8109608:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 810960c:	2302      	movs	r3, #2
 810960e:	2200      	movs	r2, #0
 8109610:	f000 f8d0 	bl	81097b4 <_lseek_r>
 8109614:	89a3      	ldrh	r3, [r4, #12]
 8109616:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 810961a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 810961e:	81a3      	strh	r3, [r4, #12]
 8109620:	4632      	mov	r2, r6
 8109622:	463b      	mov	r3, r7
 8109624:	4628      	mov	r0, r5
 8109626:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 810962a:	f000 b8f7 	b.w	810981c <_write_r>

0810962e <__sseek>:
 810962e:	b510      	push	{r4, lr}
 8109630:	460c      	mov	r4, r1
 8109632:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8109636:	f000 f8bd 	bl	81097b4 <_lseek_r>
 810963a:	1c43      	adds	r3, r0, #1
 810963c:	89a3      	ldrh	r3, [r4, #12]
 810963e:	bf15      	itete	ne
 8109640:	6560      	strne	r0, [r4, #84]	; 0x54
 8109642:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8109646:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 810964a:	81a3      	strheq	r3, [r4, #12]
 810964c:	bf18      	it	ne
 810964e:	81a3      	strhne	r3, [r4, #12]
 8109650:	bd10      	pop	{r4, pc}

08109652 <__sclose>:
 8109652:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8109656:	f000 b89d 	b.w	8109794 <_close_r>

0810965a <__swbuf_r>:
 810965a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 810965c:	460e      	mov	r6, r1
 810965e:	4614      	mov	r4, r2
 8109660:	4605      	mov	r5, r0
 8109662:	b118      	cbz	r0, 810966c <__swbuf_r+0x12>
 8109664:	6a03      	ldr	r3, [r0, #32]
 8109666:	b90b      	cbnz	r3, 810966c <__swbuf_r+0x12>
 8109668:	f7ff ff6c 	bl	8109544 <__sinit>
 810966c:	69a3      	ldr	r3, [r4, #24]
 810966e:	60a3      	str	r3, [r4, #8]
 8109670:	89a3      	ldrh	r3, [r4, #12]
 8109672:	071a      	lsls	r2, r3, #28
 8109674:	d525      	bpl.n	81096c2 <__swbuf_r+0x68>
 8109676:	6923      	ldr	r3, [r4, #16]
 8109678:	b31b      	cbz	r3, 81096c2 <__swbuf_r+0x68>
 810967a:	6823      	ldr	r3, [r4, #0]
 810967c:	6922      	ldr	r2, [r4, #16]
 810967e:	1a98      	subs	r0, r3, r2
 8109680:	6963      	ldr	r3, [r4, #20]
 8109682:	b2f6      	uxtb	r6, r6
 8109684:	4283      	cmp	r3, r0
 8109686:	4637      	mov	r7, r6
 8109688:	dc04      	bgt.n	8109694 <__swbuf_r+0x3a>
 810968a:	4621      	mov	r1, r4
 810968c:	4628      	mov	r0, r5
 810968e:	f7ff fea5 	bl	81093dc <_fflush_r>
 8109692:	b9e0      	cbnz	r0, 81096ce <__swbuf_r+0x74>
 8109694:	68a3      	ldr	r3, [r4, #8]
 8109696:	3b01      	subs	r3, #1
 8109698:	60a3      	str	r3, [r4, #8]
 810969a:	6823      	ldr	r3, [r4, #0]
 810969c:	1c5a      	adds	r2, r3, #1
 810969e:	6022      	str	r2, [r4, #0]
 81096a0:	701e      	strb	r6, [r3, #0]
 81096a2:	6962      	ldr	r2, [r4, #20]
 81096a4:	1c43      	adds	r3, r0, #1
 81096a6:	429a      	cmp	r2, r3
 81096a8:	d004      	beq.n	81096b4 <__swbuf_r+0x5a>
 81096aa:	89a3      	ldrh	r3, [r4, #12]
 81096ac:	07db      	lsls	r3, r3, #31
 81096ae:	d506      	bpl.n	81096be <__swbuf_r+0x64>
 81096b0:	2e0a      	cmp	r6, #10
 81096b2:	d104      	bne.n	81096be <__swbuf_r+0x64>
 81096b4:	4621      	mov	r1, r4
 81096b6:	4628      	mov	r0, r5
 81096b8:	f7ff fe90 	bl	81093dc <_fflush_r>
 81096bc:	b938      	cbnz	r0, 81096ce <__swbuf_r+0x74>
 81096be:	4638      	mov	r0, r7
 81096c0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 81096c2:	4621      	mov	r1, r4
 81096c4:	4628      	mov	r0, r5
 81096c6:	f000 f805 	bl	81096d4 <__swsetup_r>
 81096ca:	2800      	cmp	r0, #0
 81096cc:	d0d5      	beq.n	810967a <__swbuf_r+0x20>
 81096ce:	f04f 37ff 	mov.w	r7, #4294967295
 81096d2:	e7f4      	b.n	81096be <__swbuf_r+0x64>

081096d4 <__swsetup_r>:
 81096d4:	b538      	push	{r3, r4, r5, lr}
 81096d6:	4b2a      	ldr	r3, [pc, #168]	; (8109780 <__swsetup_r+0xac>)
 81096d8:	4605      	mov	r5, r0
 81096da:	6818      	ldr	r0, [r3, #0]
 81096dc:	460c      	mov	r4, r1
 81096de:	b118      	cbz	r0, 81096e8 <__swsetup_r+0x14>
 81096e0:	6a03      	ldr	r3, [r0, #32]
 81096e2:	b90b      	cbnz	r3, 81096e8 <__swsetup_r+0x14>
 81096e4:	f7ff ff2e 	bl	8109544 <__sinit>
 81096e8:	89a3      	ldrh	r3, [r4, #12]
 81096ea:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 81096ee:	0718      	lsls	r0, r3, #28
 81096f0:	d422      	bmi.n	8109738 <__swsetup_r+0x64>
 81096f2:	06d9      	lsls	r1, r3, #27
 81096f4:	d407      	bmi.n	8109706 <__swsetup_r+0x32>
 81096f6:	2309      	movs	r3, #9
 81096f8:	602b      	str	r3, [r5, #0]
 81096fa:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 81096fe:	81a3      	strh	r3, [r4, #12]
 8109700:	f04f 30ff 	mov.w	r0, #4294967295
 8109704:	e034      	b.n	8109770 <__swsetup_r+0x9c>
 8109706:	0758      	lsls	r0, r3, #29
 8109708:	d512      	bpl.n	8109730 <__swsetup_r+0x5c>
 810970a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 810970c:	b141      	cbz	r1, 8109720 <__swsetup_r+0x4c>
 810970e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8109712:	4299      	cmp	r1, r3
 8109714:	d002      	beq.n	810971c <__swsetup_r+0x48>
 8109716:	4628      	mov	r0, r5
 8109718:	f000 f8d4 	bl	81098c4 <_free_r>
 810971c:	2300      	movs	r3, #0
 810971e:	6363      	str	r3, [r4, #52]	; 0x34
 8109720:	89a3      	ldrh	r3, [r4, #12]
 8109722:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8109726:	81a3      	strh	r3, [r4, #12]
 8109728:	2300      	movs	r3, #0
 810972a:	6063      	str	r3, [r4, #4]
 810972c:	6923      	ldr	r3, [r4, #16]
 810972e:	6023      	str	r3, [r4, #0]
 8109730:	89a3      	ldrh	r3, [r4, #12]
 8109732:	f043 0308 	orr.w	r3, r3, #8
 8109736:	81a3      	strh	r3, [r4, #12]
 8109738:	6923      	ldr	r3, [r4, #16]
 810973a:	b94b      	cbnz	r3, 8109750 <__swsetup_r+0x7c>
 810973c:	89a3      	ldrh	r3, [r4, #12]
 810973e:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8109742:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8109746:	d003      	beq.n	8109750 <__swsetup_r+0x7c>
 8109748:	4621      	mov	r1, r4
 810974a:	4628      	mov	r0, r5
 810974c:	f000 fc00 	bl	8109f50 <__smakebuf_r>
 8109750:	89a0      	ldrh	r0, [r4, #12]
 8109752:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8109756:	f010 0301 	ands.w	r3, r0, #1
 810975a:	d00a      	beq.n	8109772 <__swsetup_r+0x9e>
 810975c:	2300      	movs	r3, #0
 810975e:	60a3      	str	r3, [r4, #8]
 8109760:	6963      	ldr	r3, [r4, #20]
 8109762:	425b      	negs	r3, r3
 8109764:	61a3      	str	r3, [r4, #24]
 8109766:	6923      	ldr	r3, [r4, #16]
 8109768:	b943      	cbnz	r3, 810977c <__swsetup_r+0xa8>
 810976a:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 810976e:	d1c4      	bne.n	81096fa <__swsetup_r+0x26>
 8109770:	bd38      	pop	{r3, r4, r5, pc}
 8109772:	0781      	lsls	r1, r0, #30
 8109774:	bf58      	it	pl
 8109776:	6963      	ldrpl	r3, [r4, #20]
 8109778:	60a3      	str	r3, [r4, #8]
 810977a:	e7f4      	b.n	8109766 <__swsetup_r+0x92>
 810977c:	2000      	movs	r0, #0
 810977e:	e7f7      	b.n	8109770 <__swsetup_r+0x9c>
 8109780:	10000068 	.word	0x10000068

08109784 <memset>:
 8109784:	4402      	add	r2, r0
 8109786:	4603      	mov	r3, r0
 8109788:	4293      	cmp	r3, r2
 810978a:	d100      	bne.n	810978e <memset+0xa>
 810978c:	4770      	bx	lr
 810978e:	f803 1b01 	strb.w	r1, [r3], #1
 8109792:	e7f9      	b.n	8109788 <memset+0x4>

08109794 <_close_r>:
 8109794:	b538      	push	{r3, r4, r5, lr}
 8109796:	4d06      	ldr	r5, [pc, #24]	; (81097b0 <_close_r+0x1c>)
 8109798:	2300      	movs	r3, #0
 810979a:	4604      	mov	r4, r0
 810979c:	4608      	mov	r0, r1
 810979e:	602b      	str	r3, [r5, #0]
 81097a0:	f7f8 f903 	bl	81019aa <_close>
 81097a4:	1c43      	adds	r3, r0, #1
 81097a6:	d102      	bne.n	81097ae <_close_r+0x1a>
 81097a8:	682b      	ldr	r3, [r5, #0]
 81097aa:	b103      	cbz	r3, 81097ae <_close_r+0x1a>
 81097ac:	6023      	str	r3, [r4, #0]
 81097ae:	bd38      	pop	{r3, r4, r5, pc}
 81097b0:	10001e1c 	.word	0x10001e1c

081097b4 <_lseek_r>:
 81097b4:	b538      	push	{r3, r4, r5, lr}
 81097b6:	4d07      	ldr	r5, [pc, #28]	; (81097d4 <_lseek_r+0x20>)
 81097b8:	4604      	mov	r4, r0
 81097ba:	4608      	mov	r0, r1
 81097bc:	4611      	mov	r1, r2
 81097be:	2200      	movs	r2, #0
 81097c0:	602a      	str	r2, [r5, #0]
 81097c2:	461a      	mov	r2, r3
 81097c4:	f7f8 f918 	bl	81019f8 <_lseek>
 81097c8:	1c43      	adds	r3, r0, #1
 81097ca:	d102      	bne.n	81097d2 <_lseek_r+0x1e>
 81097cc:	682b      	ldr	r3, [r5, #0]
 81097ce:	b103      	cbz	r3, 81097d2 <_lseek_r+0x1e>
 81097d0:	6023      	str	r3, [r4, #0]
 81097d2:	bd38      	pop	{r3, r4, r5, pc}
 81097d4:	10001e1c 	.word	0x10001e1c

081097d8 <_read_r>:
 81097d8:	b538      	push	{r3, r4, r5, lr}
 81097da:	4d07      	ldr	r5, [pc, #28]	; (81097f8 <_read_r+0x20>)
 81097dc:	4604      	mov	r4, r0
 81097de:	4608      	mov	r0, r1
 81097e0:	4611      	mov	r1, r2
 81097e2:	2200      	movs	r2, #0
 81097e4:	602a      	str	r2, [r5, #0]
 81097e6:	461a      	mov	r2, r3
 81097e8:	f7f8 f8a6 	bl	8101938 <_read>
 81097ec:	1c43      	adds	r3, r0, #1
 81097ee:	d102      	bne.n	81097f6 <_read_r+0x1e>
 81097f0:	682b      	ldr	r3, [r5, #0]
 81097f2:	b103      	cbz	r3, 81097f6 <_read_r+0x1e>
 81097f4:	6023      	str	r3, [r4, #0]
 81097f6:	bd38      	pop	{r3, r4, r5, pc}
 81097f8:	10001e1c 	.word	0x10001e1c

081097fc <_sbrk_r>:
 81097fc:	b538      	push	{r3, r4, r5, lr}
 81097fe:	4d06      	ldr	r5, [pc, #24]	; (8109818 <_sbrk_r+0x1c>)
 8109800:	2300      	movs	r3, #0
 8109802:	4604      	mov	r4, r0
 8109804:	4608      	mov	r0, r1
 8109806:	602b      	str	r3, [r5, #0]
 8109808:	f7f8 f904 	bl	8101a14 <_sbrk>
 810980c:	1c43      	adds	r3, r0, #1
 810980e:	d102      	bne.n	8109816 <_sbrk_r+0x1a>
 8109810:	682b      	ldr	r3, [r5, #0]
 8109812:	b103      	cbz	r3, 8109816 <_sbrk_r+0x1a>
 8109814:	6023      	str	r3, [r4, #0]
 8109816:	bd38      	pop	{r3, r4, r5, pc}
 8109818:	10001e1c 	.word	0x10001e1c

0810981c <_write_r>:
 810981c:	b538      	push	{r3, r4, r5, lr}
 810981e:	4d07      	ldr	r5, [pc, #28]	; (810983c <_write_r+0x20>)
 8109820:	4604      	mov	r4, r0
 8109822:	4608      	mov	r0, r1
 8109824:	4611      	mov	r1, r2
 8109826:	2200      	movs	r2, #0
 8109828:	602a      	str	r2, [r5, #0]
 810982a:	461a      	mov	r2, r3
 810982c:	f7f8 f8a1 	bl	8101972 <_write>
 8109830:	1c43      	adds	r3, r0, #1
 8109832:	d102      	bne.n	810983a <_write_r+0x1e>
 8109834:	682b      	ldr	r3, [r5, #0]
 8109836:	b103      	cbz	r3, 810983a <_write_r+0x1e>
 8109838:	6023      	str	r3, [r4, #0]
 810983a:	bd38      	pop	{r3, r4, r5, pc}
 810983c:	10001e1c 	.word	0x10001e1c

08109840 <__errno>:
 8109840:	4b01      	ldr	r3, [pc, #4]	; (8109848 <__errno+0x8>)
 8109842:	6818      	ldr	r0, [r3, #0]
 8109844:	4770      	bx	lr
 8109846:	bf00      	nop
 8109848:	10000068 	.word	0x10000068

0810984c <__libc_init_array>:
 810984c:	b570      	push	{r4, r5, r6, lr}
 810984e:	4d0d      	ldr	r5, [pc, #52]	; (8109884 <__libc_init_array+0x38>)
 8109850:	4c0d      	ldr	r4, [pc, #52]	; (8109888 <__libc_init_array+0x3c>)
 8109852:	1b64      	subs	r4, r4, r5
 8109854:	10a4      	asrs	r4, r4, #2
 8109856:	2600      	movs	r6, #0
 8109858:	42a6      	cmp	r6, r4
 810985a:	d109      	bne.n	8109870 <__libc_init_array+0x24>
 810985c:	4d0b      	ldr	r5, [pc, #44]	; (810988c <__libc_init_array+0x40>)
 810985e:	4c0c      	ldr	r4, [pc, #48]	; (8109890 <__libc_init_array+0x44>)
 8109860:	f000 fc18 	bl	810a094 <_init>
 8109864:	1b64      	subs	r4, r4, r5
 8109866:	10a4      	asrs	r4, r4, #2
 8109868:	2600      	movs	r6, #0
 810986a:	42a6      	cmp	r6, r4
 810986c:	d105      	bne.n	810987a <__libc_init_array+0x2e>
 810986e:	bd70      	pop	{r4, r5, r6, pc}
 8109870:	f855 3b04 	ldr.w	r3, [r5], #4
 8109874:	4798      	blx	r3
 8109876:	3601      	adds	r6, #1
 8109878:	e7ee      	b.n	8109858 <__libc_init_array+0xc>
 810987a:	f855 3b04 	ldr.w	r3, [r5], #4
 810987e:	4798      	blx	r3
 8109880:	3601      	adds	r6, #1
 8109882:	e7f2      	b.n	810986a <__libc_init_array+0x1e>
 8109884:	0810be58 	.word	0x0810be58
 8109888:	0810be58 	.word	0x0810be58
 810988c:	0810be58 	.word	0x0810be58
 8109890:	0810be5c 	.word	0x0810be5c

08109894 <__retarget_lock_init_recursive>:
 8109894:	4770      	bx	lr

08109896 <__retarget_lock_acquire_recursive>:
 8109896:	4770      	bx	lr

08109898 <__retarget_lock_release_recursive>:
 8109898:	4770      	bx	lr

0810989a <memcpy>:
 810989a:	440a      	add	r2, r1
 810989c:	4291      	cmp	r1, r2
 810989e:	f100 33ff 	add.w	r3, r0, #4294967295
 81098a2:	d100      	bne.n	81098a6 <memcpy+0xc>
 81098a4:	4770      	bx	lr
 81098a6:	b510      	push	{r4, lr}
 81098a8:	f811 4b01 	ldrb.w	r4, [r1], #1
 81098ac:	f803 4f01 	strb.w	r4, [r3, #1]!
 81098b0:	4291      	cmp	r1, r2
 81098b2:	d1f9      	bne.n	81098a8 <memcpy+0xe>
 81098b4:	bd10      	pop	{r4, pc}

081098b6 <abort>:
 81098b6:	b508      	push	{r3, lr}
 81098b8:	2006      	movs	r0, #6
 81098ba:	f000 fbad 	bl	810a018 <raise>
 81098be:	2001      	movs	r0, #1
 81098c0:	f7f8 f830 	bl	8101924 <_exit>

081098c4 <_free_r>:
 81098c4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 81098c6:	2900      	cmp	r1, #0
 81098c8:	d044      	beq.n	8109954 <_free_r+0x90>
 81098ca:	f851 3c04 	ldr.w	r3, [r1, #-4]
 81098ce:	9001      	str	r0, [sp, #4]
 81098d0:	2b00      	cmp	r3, #0
 81098d2:	f1a1 0404 	sub.w	r4, r1, #4
 81098d6:	bfb8      	it	lt
 81098d8:	18e4      	addlt	r4, r4, r3
 81098da:	f7ff fced 	bl	81092b8 <__malloc_lock>
 81098de:	4a1e      	ldr	r2, [pc, #120]	; (8109958 <_free_r+0x94>)
 81098e0:	9801      	ldr	r0, [sp, #4]
 81098e2:	6813      	ldr	r3, [r2, #0]
 81098e4:	b933      	cbnz	r3, 81098f4 <_free_r+0x30>
 81098e6:	6063      	str	r3, [r4, #4]
 81098e8:	6014      	str	r4, [r2, #0]
 81098ea:	b003      	add	sp, #12
 81098ec:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 81098f0:	f7ff bce8 	b.w	81092c4 <__malloc_unlock>
 81098f4:	42a3      	cmp	r3, r4
 81098f6:	d908      	bls.n	810990a <_free_r+0x46>
 81098f8:	6825      	ldr	r5, [r4, #0]
 81098fa:	1961      	adds	r1, r4, r5
 81098fc:	428b      	cmp	r3, r1
 81098fe:	bf01      	itttt	eq
 8109900:	6819      	ldreq	r1, [r3, #0]
 8109902:	685b      	ldreq	r3, [r3, #4]
 8109904:	1949      	addeq	r1, r1, r5
 8109906:	6021      	streq	r1, [r4, #0]
 8109908:	e7ed      	b.n	81098e6 <_free_r+0x22>
 810990a:	461a      	mov	r2, r3
 810990c:	685b      	ldr	r3, [r3, #4]
 810990e:	b10b      	cbz	r3, 8109914 <_free_r+0x50>
 8109910:	42a3      	cmp	r3, r4
 8109912:	d9fa      	bls.n	810990a <_free_r+0x46>
 8109914:	6811      	ldr	r1, [r2, #0]
 8109916:	1855      	adds	r5, r2, r1
 8109918:	42a5      	cmp	r5, r4
 810991a:	d10b      	bne.n	8109934 <_free_r+0x70>
 810991c:	6824      	ldr	r4, [r4, #0]
 810991e:	4421      	add	r1, r4
 8109920:	1854      	adds	r4, r2, r1
 8109922:	42a3      	cmp	r3, r4
 8109924:	6011      	str	r1, [r2, #0]
 8109926:	d1e0      	bne.n	81098ea <_free_r+0x26>
 8109928:	681c      	ldr	r4, [r3, #0]
 810992a:	685b      	ldr	r3, [r3, #4]
 810992c:	6053      	str	r3, [r2, #4]
 810992e:	440c      	add	r4, r1
 8109930:	6014      	str	r4, [r2, #0]
 8109932:	e7da      	b.n	81098ea <_free_r+0x26>
 8109934:	d902      	bls.n	810993c <_free_r+0x78>
 8109936:	230c      	movs	r3, #12
 8109938:	6003      	str	r3, [r0, #0]
 810993a:	e7d6      	b.n	81098ea <_free_r+0x26>
 810993c:	6825      	ldr	r5, [r4, #0]
 810993e:	1961      	adds	r1, r4, r5
 8109940:	428b      	cmp	r3, r1
 8109942:	bf04      	itt	eq
 8109944:	6819      	ldreq	r1, [r3, #0]
 8109946:	685b      	ldreq	r3, [r3, #4]
 8109948:	6063      	str	r3, [r4, #4]
 810994a:	bf04      	itt	eq
 810994c:	1949      	addeq	r1, r1, r5
 810994e:	6021      	streq	r1, [r4, #0]
 8109950:	6054      	str	r4, [r2, #4]
 8109952:	e7ca      	b.n	81098ea <_free_r+0x26>
 8109954:	b003      	add	sp, #12
 8109956:	bd30      	pop	{r4, r5, pc}
 8109958:	10001cd8 	.word	0x10001cd8

0810995c <__sfputc_r>:
 810995c:	6893      	ldr	r3, [r2, #8]
 810995e:	3b01      	subs	r3, #1
 8109960:	2b00      	cmp	r3, #0
 8109962:	b410      	push	{r4}
 8109964:	6093      	str	r3, [r2, #8]
 8109966:	da08      	bge.n	810997a <__sfputc_r+0x1e>
 8109968:	6994      	ldr	r4, [r2, #24]
 810996a:	42a3      	cmp	r3, r4
 810996c:	db01      	blt.n	8109972 <__sfputc_r+0x16>
 810996e:	290a      	cmp	r1, #10
 8109970:	d103      	bne.n	810997a <__sfputc_r+0x1e>
 8109972:	f85d 4b04 	ldr.w	r4, [sp], #4
 8109976:	f7ff be70 	b.w	810965a <__swbuf_r>
 810997a:	6813      	ldr	r3, [r2, #0]
 810997c:	1c58      	adds	r0, r3, #1
 810997e:	6010      	str	r0, [r2, #0]
 8109980:	7019      	strb	r1, [r3, #0]
 8109982:	4608      	mov	r0, r1
 8109984:	f85d 4b04 	ldr.w	r4, [sp], #4
 8109988:	4770      	bx	lr

0810998a <__sfputs_r>:
 810998a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 810998c:	4606      	mov	r6, r0
 810998e:	460f      	mov	r7, r1
 8109990:	4614      	mov	r4, r2
 8109992:	18d5      	adds	r5, r2, r3
 8109994:	42ac      	cmp	r4, r5
 8109996:	d101      	bne.n	810999c <__sfputs_r+0x12>
 8109998:	2000      	movs	r0, #0
 810999a:	e007      	b.n	81099ac <__sfputs_r+0x22>
 810999c:	f814 1b01 	ldrb.w	r1, [r4], #1
 81099a0:	463a      	mov	r2, r7
 81099a2:	4630      	mov	r0, r6
 81099a4:	f7ff ffda 	bl	810995c <__sfputc_r>
 81099a8:	1c43      	adds	r3, r0, #1
 81099aa:	d1f3      	bne.n	8109994 <__sfputs_r+0xa>
 81099ac:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

081099b0 <_vfiprintf_r>:
 81099b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 81099b4:	460d      	mov	r5, r1
 81099b6:	b09d      	sub	sp, #116	; 0x74
 81099b8:	4614      	mov	r4, r2
 81099ba:	4698      	mov	r8, r3
 81099bc:	4606      	mov	r6, r0
 81099be:	b118      	cbz	r0, 81099c8 <_vfiprintf_r+0x18>
 81099c0:	6a03      	ldr	r3, [r0, #32]
 81099c2:	b90b      	cbnz	r3, 81099c8 <_vfiprintf_r+0x18>
 81099c4:	f7ff fdbe 	bl	8109544 <__sinit>
 81099c8:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 81099ca:	07d9      	lsls	r1, r3, #31
 81099cc:	d405      	bmi.n	81099da <_vfiprintf_r+0x2a>
 81099ce:	89ab      	ldrh	r3, [r5, #12]
 81099d0:	059a      	lsls	r2, r3, #22
 81099d2:	d402      	bmi.n	81099da <_vfiprintf_r+0x2a>
 81099d4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 81099d6:	f7ff ff5e 	bl	8109896 <__retarget_lock_acquire_recursive>
 81099da:	89ab      	ldrh	r3, [r5, #12]
 81099dc:	071b      	lsls	r3, r3, #28
 81099de:	d501      	bpl.n	81099e4 <_vfiprintf_r+0x34>
 81099e0:	692b      	ldr	r3, [r5, #16]
 81099e2:	b99b      	cbnz	r3, 8109a0c <_vfiprintf_r+0x5c>
 81099e4:	4629      	mov	r1, r5
 81099e6:	4630      	mov	r0, r6
 81099e8:	f7ff fe74 	bl	81096d4 <__swsetup_r>
 81099ec:	b170      	cbz	r0, 8109a0c <_vfiprintf_r+0x5c>
 81099ee:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 81099f0:	07dc      	lsls	r4, r3, #31
 81099f2:	d504      	bpl.n	81099fe <_vfiprintf_r+0x4e>
 81099f4:	f04f 30ff 	mov.w	r0, #4294967295
 81099f8:	b01d      	add	sp, #116	; 0x74
 81099fa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 81099fe:	89ab      	ldrh	r3, [r5, #12]
 8109a00:	0598      	lsls	r0, r3, #22
 8109a02:	d4f7      	bmi.n	81099f4 <_vfiprintf_r+0x44>
 8109a04:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8109a06:	f7ff ff47 	bl	8109898 <__retarget_lock_release_recursive>
 8109a0a:	e7f3      	b.n	81099f4 <_vfiprintf_r+0x44>
 8109a0c:	2300      	movs	r3, #0
 8109a0e:	9309      	str	r3, [sp, #36]	; 0x24
 8109a10:	2320      	movs	r3, #32
 8109a12:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8109a16:	f8cd 800c 	str.w	r8, [sp, #12]
 8109a1a:	2330      	movs	r3, #48	; 0x30
 8109a1c:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 8109bd0 <_vfiprintf_r+0x220>
 8109a20:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8109a24:	f04f 0901 	mov.w	r9, #1
 8109a28:	4623      	mov	r3, r4
 8109a2a:	469a      	mov	sl, r3
 8109a2c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8109a30:	b10a      	cbz	r2, 8109a36 <_vfiprintf_r+0x86>
 8109a32:	2a25      	cmp	r2, #37	; 0x25
 8109a34:	d1f9      	bne.n	8109a2a <_vfiprintf_r+0x7a>
 8109a36:	ebba 0b04 	subs.w	fp, sl, r4
 8109a3a:	d00b      	beq.n	8109a54 <_vfiprintf_r+0xa4>
 8109a3c:	465b      	mov	r3, fp
 8109a3e:	4622      	mov	r2, r4
 8109a40:	4629      	mov	r1, r5
 8109a42:	4630      	mov	r0, r6
 8109a44:	f7ff ffa1 	bl	810998a <__sfputs_r>
 8109a48:	3001      	adds	r0, #1
 8109a4a:	f000 80a9 	beq.w	8109ba0 <_vfiprintf_r+0x1f0>
 8109a4e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8109a50:	445a      	add	r2, fp
 8109a52:	9209      	str	r2, [sp, #36]	; 0x24
 8109a54:	f89a 3000 	ldrb.w	r3, [sl]
 8109a58:	2b00      	cmp	r3, #0
 8109a5a:	f000 80a1 	beq.w	8109ba0 <_vfiprintf_r+0x1f0>
 8109a5e:	2300      	movs	r3, #0
 8109a60:	f04f 32ff 	mov.w	r2, #4294967295
 8109a64:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8109a68:	f10a 0a01 	add.w	sl, sl, #1
 8109a6c:	9304      	str	r3, [sp, #16]
 8109a6e:	9307      	str	r3, [sp, #28]
 8109a70:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8109a74:	931a      	str	r3, [sp, #104]	; 0x68
 8109a76:	4654      	mov	r4, sl
 8109a78:	2205      	movs	r2, #5
 8109a7a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8109a7e:	4854      	ldr	r0, [pc, #336]	; (8109bd0 <_vfiprintf_r+0x220>)
 8109a80:	f7f6 fc2e 	bl	81002e0 <memchr>
 8109a84:	9a04      	ldr	r2, [sp, #16]
 8109a86:	b9d8      	cbnz	r0, 8109ac0 <_vfiprintf_r+0x110>
 8109a88:	06d1      	lsls	r1, r2, #27
 8109a8a:	bf44      	itt	mi
 8109a8c:	2320      	movmi	r3, #32
 8109a8e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8109a92:	0713      	lsls	r3, r2, #28
 8109a94:	bf44      	itt	mi
 8109a96:	232b      	movmi	r3, #43	; 0x2b
 8109a98:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8109a9c:	f89a 3000 	ldrb.w	r3, [sl]
 8109aa0:	2b2a      	cmp	r3, #42	; 0x2a
 8109aa2:	d015      	beq.n	8109ad0 <_vfiprintf_r+0x120>
 8109aa4:	9a07      	ldr	r2, [sp, #28]
 8109aa6:	4654      	mov	r4, sl
 8109aa8:	2000      	movs	r0, #0
 8109aaa:	f04f 0c0a 	mov.w	ip, #10
 8109aae:	4621      	mov	r1, r4
 8109ab0:	f811 3b01 	ldrb.w	r3, [r1], #1
 8109ab4:	3b30      	subs	r3, #48	; 0x30
 8109ab6:	2b09      	cmp	r3, #9
 8109ab8:	d94d      	bls.n	8109b56 <_vfiprintf_r+0x1a6>
 8109aba:	b1b0      	cbz	r0, 8109aea <_vfiprintf_r+0x13a>
 8109abc:	9207      	str	r2, [sp, #28]
 8109abe:	e014      	b.n	8109aea <_vfiprintf_r+0x13a>
 8109ac0:	eba0 0308 	sub.w	r3, r0, r8
 8109ac4:	fa09 f303 	lsl.w	r3, r9, r3
 8109ac8:	4313      	orrs	r3, r2
 8109aca:	9304      	str	r3, [sp, #16]
 8109acc:	46a2      	mov	sl, r4
 8109ace:	e7d2      	b.n	8109a76 <_vfiprintf_r+0xc6>
 8109ad0:	9b03      	ldr	r3, [sp, #12]
 8109ad2:	1d19      	adds	r1, r3, #4
 8109ad4:	681b      	ldr	r3, [r3, #0]
 8109ad6:	9103      	str	r1, [sp, #12]
 8109ad8:	2b00      	cmp	r3, #0
 8109ada:	bfbb      	ittet	lt
 8109adc:	425b      	neglt	r3, r3
 8109ade:	f042 0202 	orrlt.w	r2, r2, #2
 8109ae2:	9307      	strge	r3, [sp, #28]
 8109ae4:	9307      	strlt	r3, [sp, #28]
 8109ae6:	bfb8      	it	lt
 8109ae8:	9204      	strlt	r2, [sp, #16]
 8109aea:	7823      	ldrb	r3, [r4, #0]
 8109aec:	2b2e      	cmp	r3, #46	; 0x2e
 8109aee:	d10c      	bne.n	8109b0a <_vfiprintf_r+0x15a>
 8109af0:	7863      	ldrb	r3, [r4, #1]
 8109af2:	2b2a      	cmp	r3, #42	; 0x2a
 8109af4:	d134      	bne.n	8109b60 <_vfiprintf_r+0x1b0>
 8109af6:	9b03      	ldr	r3, [sp, #12]
 8109af8:	1d1a      	adds	r2, r3, #4
 8109afa:	681b      	ldr	r3, [r3, #0]
 8109afc:	9203      	str	r2, [sp, #12]
 8109afe:	2b00      	cmp	r3, #0
 8109b00:	bfb8      	it	lt
 8109b02:	f04f 33ff 	movlt.w	r3, #4294967295
 8109b06:	3402      	adds	r4, #2
 8109b08:	9305      	str	r3, [sp, #20]
 8109b0a:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 8109be0 <_vfiprintf_r+0x230>
 8109b0e:	7821      	ldrb	r1, [r4, #0]
 8109b10:	2203      	movs	r2, #3
 8109b12:	4650      	mov	r0, sl
 8109b14:	f7f6 fbe4 	bl	81002e0 <memchr>
 8109b18:	b138      	cbz	r0, 8109b2a <_vfiprintf_r+0x17a>
 8109b1a:	9b04      	ldr	r3, [sp, #16]
 8109b1c:	eba0 000a 	sub.w	r0, r0, sl
 8109b20:	2240      	movs	r2, #64	; 0x40
 8109b22:	4082      	lsls	r2, r0
 8109b24:	4313      	orrs	r3, r2
 8109b26:	3401      	adds	r4, #1
 8109b28:	9304      	str	r3, [sp, #16]
 8109b2a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8109b2e:	4829      	ldr	r0, [pc, #164]	; (8109bd4 <_vfiprintf_r+0x224>)
 8109b30:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8109b34:	2206      	movs	r2, #6
 8109b36:	f7f6 fbd3 	bl	81002e0 <memchr>
 8109b3a:	2800      	cmp	r0, #0
 8109b3c:	d03f      	beq.n	8109bbe <_vfiprintf_r+0x20e>
 8109b3e:	4b26      	ldr	r3, [pc, #152]	; (8109bd8 <_vfiprintf_r+0x228>)
 8109b40:	bb1b      	cbnz	r3, 8109b8a <_vfiprintf_r+0x1da>
 8109b42:	9b03      	ldr	r3, [sp, #12]
 8109b44:	3307      	adds	r3, #7
 8109b46:	f023 0307 	bic.w	r3, r3, #7
 8109b4a:	3308      	adds	r3, #8
 8109b4c:	9303      	str	r3, [sp, #12]
 8109b4e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8109b50:	443b      	add	r3, r7
 8109b52:	9309      	str	r3, [sp, #36]	; 0x24
 8109b54:	e768      	b.n	8109a28 <_vfiprintf_r+0x78>
 8109b56:	fb0c 3202 	mla	r2, ip, r2, r3
 8109b5a:	460c      	mov	r4, r1
 8109b5c:	2001      	movs	r0, #1
 8109b5e:	e7a6      	b.n	8109aae <_vfiprintf_r+0xfe>
 8109b60:	2300      	movs	r3, #0
 8109b62:	3401      	adds	r4, #1
 8109b64:	9305      	str	r3, [sp, #20]
 8109b66:	4619      	mov	r1, r3
 8109b68:	f04f 0c0a 	mov.w	ip, #10
 8109b6c:	4620      	mov	r0, r4
 8109b6e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8109b72:	3a30      	subs	r2, #48	; 0x30
 8109b74:	2a09      	cmp	r2, #9
 8109b76:	d903      	bls.n	8109b80 <_vfiprintf_r+0x1d0>
 8109b78:	2b00      	cmp	r3, #0
 8109b7a:	d0c6      	beq.n	8109b0a <_vfiprintf_r+0x15a>
 8109b7c:	9105      	str	r1, [sp, #20]
 8109b7e:	e7c4      	b.n	8109b0a <_vfiprintf_r+0x15a>
 8109b80:	fb0c 2101 	mla	r1, ip, r1, r2
 8109b84:	4604      	mov	r4, r0
 8109b86:	2301      	movs	r3, #1
 8109b88:	e7f0      	b.n	8109b6c <_vfiprintf_r+0x1bc>
 8109b8a:	ab03      	add	r3, sp, #12
 8109b8c:	9300      	str	r3, [sp, #0]
 8109b8e:	462a      	mov	r2, r5
 8109b90:	4b12      	ldr	r3, [pc, #72]	; (8109bdc <_vfiprintf_r+0x22c>)
 8109b92:	a904      	add	r1, sp, #16
 8109b94:	4630      	mov	r0, r6
 8109b96:	f3af 8000 	nop.w
 8109b9a:	4607      	mov	r7, r0
 8109b9c:	1c78      	adds	r0, r7, #1
 8109b9e:	d1d6      	bne.n	8109b4e <_vfiprintf_r+0x19e>
 8109ba0:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8109ba2:	07d9      	lsls	r1, r3, #31
 8109ba4:	d405      	bmi.n	8109bb2 <_vfiprintf_r+0x202>
 8109ba6:	89ab      	ldrh	r3, [r5, #12]
 8109ba8:	059a      	lsls	r2, r3, #22
 8109baa:	d402      	bmi.n	8109bb2 <_vfiprintf_r+0x202>
 8109bac:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8109bae:	f7ff fe73 	bl	8109898 <__retarget_lock_release_recursive>
 8109bb2:	89ab      	ldrh	r3, [r5, #12]
 8109bb4:	065b      	lsls	r3, r3, #25
 8109bb6:	f53f af1d 	bmi.w	81099f4 <_vfiprintf_r+0x44>
 8109bba:	9809      	ldr	r0, [sp, #36]	; 0x24
 8109bbc:	e71c      	b.n	81099f8 <_vfiprintf_r+0x48>
 8109bbe:	ab03      	add	r3, sp, #12
 8109bc0:	9300      	str	r3, [sp, #0]
 8109bc2:	462a      	mov	r2, r5
 8109bc4:	4b05      	ldr	r3, [pc, #20]	; (8109bdc <_vfiprintf_r+0x22c>)
 8109bc6:	a904      	add	r1, sp, #16
 8109bc8:	4630      	mov	r0, r6
 8109bca:	f000 f879 	bl	8109cc0 <_printf_i>
 8109bce:	e7e4      	b.n	8109b9a <_vfiprintf_r+0x1ea>
 8109bd0:	0810be1c 	.word	0x0810be1c
 8109bd4:	0810be26 	.word	0x0810be26
 8109bd8:	00000000 	.word	0x00000000
 8109bdc:	0810998b 	.word	0x0810998b
 8109be0:	0810be22 	.word	0x0810be22

08109be4 <_printf_common>:
 8109be4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8109be8:	4616      	mov	r6, r2
 8109bea:	4699      	mov	r9, r3
 8109bec:	688a      	ldr	r2, [r1, #8]
 8109bee:	690b      	ldr	r3, [r1, #16]
 8109bf0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8109bf4:	4293      	cmp	r3, r2
 8109bf6:	bfb8      	it	lt
 8109bf8:	4613      	movlt	r3, r2
 8109bfa:	6033      	str	r3, [r6, #0]
 8109bfc:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8109c00:	4607      	mov	r7, r0
 8109c02:	460c      	mov	r4, r1
 8109c04:	b10a      	cbz	r2, 8109c0a <_printf_common+0x26>
 8109c06:	3301      	adds	r3, #1
 8109c08:	6033      	str	r3, [r6, #0]
 8109c0a:	6823      	ldr	r3, [r4, #0]
 8109c0c:	0699      	lsls	r1, r3, #26
 8109c0e:	bf42      	ittt	mi
 8109c10:	6833      	ldrmi	r3, [r6, #0]
 8109c12:	3302      	addmi	r3, #2
 8109c14:	6033      	strmi	r3, [r6, #0]
 8109c16:	6825      	ldr	r5, [r4, #0]
 8109c18:	f015 0506 	ands.w	r5, r5, #6
 8109c1c:	d106      	bne.n	8109c2c <_printf_common+0x48>
 8109c1e:	f104 0a19 	add.w	sl, r4, #25
 8109c22:	68e3      	ldr	r3, [r4, #12]
 8109c24:	6832      	ldr	r2, [r6, #0]
 8109c26:	1a9b      	subs	r3, r3, r2
 8109c28:	42ab      	cmp	r3, r5
 8109c2a:	dc26      	bgt.n	8109c7a <_printf_common+0x96>
 8109c2c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8109c30:	1e13      	subs	r3, r2, #0
 8109c32:	6822      	ldr	r2, [r4, #0]
 8109c34:	bf18      	it	ne
 8109c36:	2301      	movne	r3, #1
 8109c38:	0692      	lsls	r2, r2, #26
 8109c3a:	d42b      	bmi.n	8109c94 <_printf_common+0xb0>
 8109c3c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8109c40:	4649      	mov	r1, r9
 8109c42:	4638      	mov	r0, r7
 8109c44:	47c0      	blx	r8
 8109c46:	3001      	adds	r0, #1
 8109c48:	d01e      	beq.n	8109c88 <_printf_common+0xa4>
 8109c4a:	6823      	ldr	r3, [r4, #0]
 8109c4c:	6922      	ldr	r2, [r4, #16]
 8109c4e:	f003 0306 	and.w	r3, r3, #6
 8109c52:	2b04      	cmp	r3, #4
 8109c54:	bf02      	ittt	eq
 8109c56:	68e5      	ldreq	r5, [r4, #12]
 8109c58:	6833      	ldreq	r3, [r6, #0]
 8109c5a:	1aed      	subeq	r5, r5, r3
 8109c5c:	68a3      	ldr	r3, [r4, #8]
 8109c5e:	bf0c      	ite	eq
 8109c60:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8109c64:	2500      	movne	r5, #0
 8109c66:	4293      	cmp	r3, r2
 8109c68:	bfc4      	itt	gt
 8109c6a:	1a9b      	subgt	r3, r3, r2
 8109c6c:	18ed      	addgt	r5, r5, r3
 8109c6e:	2600      	movs	r6, #0
 8109c70:	341a      	adds	r4, #26
 8109c72:	42b5      	cmp	r5, r6
 8109c74:	d11a      	bne.n	8109cac <_printf_common+0xc8>
 8109c76:	2000      	movs	r0, #0
 8109c78:	e008      	b.n	8109c8c <_printf_common+0xa8>
 8109c7a:	2301      	movs	r3, #1
 8109c7c:	4652      	mov	r2, sl
 8109c7e:	4649      	mov	r1, r9
 8109c80:	4638      	mov	r0, r7
 8109c82:	47c0      	blx	r8
 8109c84:	3001      	adds	r0, #1
 8109c86:	d103      	bne.n	8109c90 <_printf_common+0xac>
 8109c88:	f04f 30ff 	mov.w	r0, #4294967295
 8109c8c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8109c90:	3501      	adds	r5, #1
 8109c92:	e7c6      	b.n	8109c22 <_printf_common+0x3e>
 8109c94:	18e1      	adds	r1, r4, r3
 8109c96:	1c5a      	adds	r2, r3, #1
 8109c98:	2030      	movs	r0, #48	; 0x30
 8109c9a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8109c9e:	4422      	add	r2, r4
 8109ca0:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8109ca4:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8109ca8:	3302      	adds	r3, #2
 8109caa:	e7c7      	b.n	8109c3c <_printf_common+0x58>
 8109cac:	2301      	movs	r3, #1
 8109cae:	4622      	mov	r2, r4
 8109cb0:	4649      	mov	r1, r9
 8109cb2:	4638      	mov	r0, r7
 8109cb4:	47c0      	blx	r8
 8109cb6:	3001      	adds	r0, #1
 8109cb8:	d0e6      	beq.n	8109c88 <_printf_common+0xa4>
 8109cba:	3601      	adds	r6, #1
 8109cbc:	e7d9      	b.n	8109c72 <_printf_common+0x8e>
	...

08109cc0 <_printf_i>:
 8109cc0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8109cc4:	7e0f      	ldrb	r7, [r1, #24]
 8109cc6:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8109cc8:	2f78      	cmp	r7, #120	; 0x78
 8109cca:	4691      	mov	r9, r2
 8109ccc:	4680      	mov	r8, r0
 8109cce:	460c      	mov	r4, r1
 8109cd0:	469a      	mov	sl, r3
 8109cd2:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8109cd6:	d807      	bhi.n	8109ce8 <_printf_i+0x28>
 8109cd8:	2f62      	cmp	r7, #98	; 0x62
 8109cda:	d80a      	bhi.n	8109cf2 <_printf_i+0x32>
 8109cdc:	2f00      	cmp	r7, #0
 8109cde:	f000 80d4 	beq.w	8109e8a <_printf_i+0x1ca>
 8109ce2:	2f58      	cmp	r7, #88	; 0x58
 8109ce4:	f000 80c0 	beq.w	8109e68 <_printf_i+0x1a8>
 8109ce8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8109cec:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8109cf0:	e03a      	b.n	8109d68 <_printf_i+0xa8>
 8109cf2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8109cf6:	2b15      	cmp	r3, #21
 8109cf8:	d8f6      	bhi.n	8109ce8 <_printf_i+0x28>
 8109cfa:	a101      	add	r1, pc, #4	; (adr r1, 8109d00 <_printf_i+0x40>)
 8109cfc:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8109d00:	08109d59 	.word	0x08109d59
 8109d04:	08109d6d 	.word	0x08109d6d
 8109d08:	08109ce9 	.word	0x08109ce9
 8109d0c:	08109ce9 	.word	0x08109ce9
 8109d10:	08109ce9 	.word	0x08109ce9
 8109d14:	08109ce9 	.word	0x08109ce9
 8109d18:	08109d6d 	.word	0x08109d6d
 8109d1c:	08109ce9 	.word	0x08109ce9
 8109d20:	08109ce9 	.word	0x08109ce9
 8109d24:	08109ce9 	.word	0x08109ce9
 8109d28:	08109ce9 	.word	0x08109ce9
 8109d2c:	08109e71 	.word	0x08109e71
 8109d30:	08109d99 	.word	0x08109d99
 8109d34:	08109e2b 	.word	0x08109e2b
 8109d38:	08109ce9 	.word	0x08109ce9
 8109d3c:	08109ce9 	.word	0x08109ce9
 8109d40:	08109e93 	.word	0x08109e93
 8109d44:	08109ce9 	.word	0x08109ce9
 8109d48:	08109d99 	.word	0x08109d99
 8109d4c:	08109ce9 	.word	0x08109ce9
 8109d50:	08109ce9 	.word	0x08109ce9
 8109d54:	08109e33 	.word	0x08109e33
 8109d58:	682b      	ldr	r3, [r5, #0]
 8109d5a:	1d1a      	adds	r2, r3, #4
 8109d5c:	681b      	ldr	r3, [r3, #0]
 8109d5e:	602a      	str	r2, [r5, #0]
 8109d60:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8109d64:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8109d68:	2301      	movs	r3, #1
 8109d6a:	e09f      	b.n	8109eac <_printf_i+0x1ec>
 8109d6c:	6820      	ldr	r0, [r4, #0]
 8109d6e:	682b      	ldr	r3, [r5, #0]
 8109d70:	0607      	lsls	r7, r0, #24
 8109d72:	f103 0104 	add.w	r1, r3, #4
 8109d76:	6029      	str	r1, [r5, #0]
 8109d78:	d501      	bpl.n	8109d7e <_printf_i+0xbe>
 8109d7a:	681e      	ldr	r6, [r3, #0]
 8109d7c:	e003      	b.n	8109d86 <_printf_i+0xc6>
 8109d7e:	0646      	lsls	r6, r0, #25
 8109d80:	d5fb      	bpl.n	8109d7a <_printf_i+0xba>
 8109d82:	f9b3 6000 	ldrsh.w	r6, [r3]
 8109d86:	2e00      	cmp	r6, #0
 8109d88:	da03      	bge.n	8109d92 <_printf_i+0xd2>
 8109d8a:	232d      	movs	r3, #45	; 0x2d
 8109d8c:	4276      	negs	r6, r6
 8109d8e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8109d92:	485a      	ldr	r0, [pc, #360]	; (8109efc <_printf_i+0x23c>)
 8109d94:	230a      	movs	r3, #10
 8109d96:	e012      	b.n	8109dbe <_printf_i+0xfe>
 8109d98:	682b      	ldr	r3, [r5, #0]
 8109d9a:	6820      	ldr	r0, [r4, #0]
 8109d9c:	1d19      	adds	r1, r3, #4
 8109d9e:	6029      	str	r1, [r5, #0]
 8109da0:	0605      	lsls	r5, r0, #24
 8109da2:	d501      	bpl.n	8109da8 <_printf_i+0xe8>
 8109da4:	681e      	ldr	r6, [r3, #0]
 8109da6:	e002      	b.n	8109dae <_printf_i+0xee>
 8109da8:	0641      	lsls	r1, r0, #25
 8109daa:	d5fb      	bpl.n	8109da4 <_printf_i+0xe4>
 8109dac:	881e      	ldrh	r6, [r3, #0]
 8109dae:	4853      	ldr	r0, [pc, #332]	; (8109efc <_printf_i+0x23c>)
 8109db0:	2f6f      	cmp	r7, #111	; 0x6f
 8109db2:	bf0c      	ite	eq
 8109db4:	2308      	moveq	r3, #8
 8109db6:	230a      	movne	r3, #10
 8109db8:	2100      	movs	r1, #0
 8109dba:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8109dbe:	6865      	ldr	r5, [r4, #4]
 8109dc0:	60a5      	str	r5, [r4, #8]
 8109dc2:	2d00      	cmp	r5, #0
 8109dc4:	bfa2      	ittt	ge
 8109dc6:	6821      	ldrge	r1, [r4, #0]
 8109dc8:	f021 0104 	bicge.w	r1, r1, #4
 8109dcc:	6021      	strge	r1, [r4, #0]
 8109dce:	b90e      	cbnz	r6, 8109dd4 <_printf_i+0x114>
 8109dd0:	2d00      	cmp	r5, #0
 8109dd2:	d04b      	beq.n	8109e6c <_printf_i+0x1ac>
 8109dd4:	4615      	mov	r5, r2
 8109dd6:	fbb6 f1f3 	udiv	r1, r6, r3
 8109dda:	fb03 6711 	mls	r7, r3, r1, r6
 8109dde:	5dc7      	ldrb	r7, [r0, r7]
 8109de0:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8109de4:	4637      	mov	r7, r6
 8109de6:	42bb      	cmp	r3, r7
 8109de8:	460e      	mov	r6, r1
 8109dea:	d9f4      	bls.n	8109dd6 <_printf_i+0x116>
 8109dec:	2b08      	cmp	r3, #8
 8109dee:	d10b      	bne.n	8109e08 <_printf_i+0x148>
 8109df0:	6823      	ldr	r3, [r4, #0]
 8109df2:	07de      	lsls	r6, r3, #31
 8109df4:	d508      	bpl.n	8109e08 <_printf_i+0x148>
 8109df6:	6923      	ldr	r3, [r4, #16]
 8109df8:	6861      	ldr	r1, [r4, #4]
 8109dfa:	4299      	cmp	r1, r3
 8109dfc:	bfde      	ittt	le
 8109dfe:	2330      	movle	r3, #48	; 0x30
 8109e00:	f805 3c01 	strble.w	r3, [r5, #-1]
 8109e04:	f105 35ff 	addle.w	r5, r5, #4294967295
 8109e08:	1b52      	subs	r2, r2, r5
 8109e0a:	6122      	str	r2, [r4, #16]
 8109e0c:	f8cd a000 	str.w	sl, [sp]
 8109e10:	464b      	mov	r3, r9
 8109e12:	aa03      	add	r2, sp, #12
 8109e14:	4621      	mov	r1, r4
 8109e16:	4640      	mov	r0, r8
 8109e18:	f7ff fee4 	bl	8109be4 <_printf_common>
 8109e1c:	3001      	adds	r0, #1
 8109e1e:	d14a      	bne.n	8109eb6 <_printf_i+0x1f6>
 8109e20:	f04f 30ff 	mov.w	r0, #4294967295
 8109e24:	b004      	add	sp, #16
 8109e26:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8109e2a:	6823      	ldr	r3, [r4, #0]
 8109e2c:	f043 0320 	orr.w	r3, r3, #32
 8109e30:	6023      	str	r3, [r4, #0]
 8109e32:	4833      	ldr	r0, [pc, #204]	; (8109f00 <_printf_i+0x240>)
 8109e34:	2778      	movs	r7, #120	; 0x78
 8109e36:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8109e3a:	6823      	ldr	r3, [r4, #0]
 8109e3c:	6829      	ldr	r1, [r5, #0]
 8109e3e:	061f      	lsls	r7, r3, #24
 8109e40:	f851 6b04 	ldr.w	r6, [r1], #4
 8109e44:	d402      	bmi.n	8109e4c <_printf_i+0x18c>
 8109e46:	065f      	lsls	r7, r3, #25
 8109e48:	bf48      	it	mi
 8109e4a:	b2b6      	uxthmi	r6, r6
 8109e4c:	07df      	lsls	r7, r3, #31
 8109e4e:	bf48      	it	mi
 8109e50:	f043 0320 	orrmi.w	r3, r3, #32
 8109e54:	6029      	str	r1, [r5, #0]
 8109e56:	bf48      	it	mi
 8109e58:	6023      	strmi	r3, [r4, #0]
 8109e5a:	b91e      	cbnz	r6, 8109e64 <_printf_i+0x1a4>
 8109e5c:	6823      	ldr	r3, [r4, #0]
 8109e5e:	f023 0320 	bic.w	r3, r3, #32
 8109e62:	6023      	str	r3, [r4, #0]
 8109e64:	2310      	movs	r3, #16
 8109e66:	e7a7      	b.n	8109db8 <_printf_i+0xf8>
 8109e68:	4824      	ldr	r0, [pc, #144]	; (8109efc <_printf_i+0x23c>)
 8109e6a:	e7e4      	b.n	8109e36 <_printf_i+0x176>
 8109e6c:	4615      	mov	r5, r2
 8109e6e:	e7bd      	b.n	8109dec <_printf_i+0x12c>
 8109e70:	682b      	ldr	r3, [r5, #0]
 8109e72:	6826      	ldr	r6, [r4, #0]
 8109e74:	6961      	ldr	r1, [r4, #20]
 8109e76:	1d18      	adds	r0, r3, #4
 8109e78:	6028      	str	r0, [r5, #0]
 8109e7a:	0635      	lsls	r5, r6, #24
 8109e7c:	681b      	ldr	r3, [r3, #0]
 8109e7e:	d501      	bpl.n	8109e84 <_printf_i+0x1c4>
 8109e80:	6019      	str	r1, [r3, #0]
 8109e82:	e002      	b.n	8109e8a <_printf_i+0x1ca>
 8109e84:	0670      	lsls	r0, r6, #25
 8109e86:	d5fb      	bpl.n	8109e80 <_printf_i+0x1c0>
 8109e88:	8019      	strh	r1, [r3, #0]
 8109e8a:	2300      	movs	r3, #0
 8109e8c:	6123      	str	r3, [r4, #16]
 8109e8e:	4615      	mov	r5, r2
 8109e90:	e7bc      	b.n	8109e0c <_printf_i+0x14c>
 8109e92:	682b      	ldr	r3, [r5, #0]
 8109e94:	1d1a      	adds	r2, r3, #4
 8109e96:	602a      	str	r2, [r5, #0]
 8109e98:	681d      	ldr	r5, [r3, #0]
 8109e9a:	6862      	ldr	r2, [r4, #4]
 8109e9c:	2100      	movs	r1, #0
 8109e9e:	4628      	mov	r0, r5
 8109ea0:	f7f6 fa1e 	bl	81002e0 <memchr>
 8109ea4:	b108      	cbz	r0, 8109eaa <_printf_i+0x1ea>
 8109ea6:	1b40      	subs	r0, r0, r5
 8109ea8:	6060      	str	r0, [r4, #4]
 8109eaa:	6863      	ldr	r3, [r4, #4]
 8109eac:	6123      	str	r3, [r4, #16]
 8109eae:	2300      	movs	r3, #0
 8109eb0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8109eb4:	e7aa      	b.n	8109e0c <_printf_i+0x14c>
 8109eb6:	6923      	ldr	r3, [r4, #16]
 8109eb8:	462a      	mov	r2, r5
 8109eba:	4649      	mov	r1, r9
 8109ebc:	4640      	mov	r0, r8
 8109ebe:	47d0      	blx	sl
 8109ec0:	3001      	adds	r0, #1
 8109ec2:	d0ad      	beq.n	8109e20 <_printf_i+0x160>
 8109ec4:	6823      	ldr	r3, [r4, #0]
 8109ec6:	079b      	lsls	r3, r3, #30
 8109ec8:	d413      	bmi.n	8109ef2 <_printf_i+0x232>
 8109eca:	68e0      	ldr	r0, [r4, #12]
 8109ecc:	9b03      	ldr	r3, [sp, #12]
 8109ece:	4298      	cmp	r0, r3
 8109ed0:	bfb8      	it	lt
 8109ed2:	4618      	movlt	r0, r3
 8109ed4:	e7a6      	b.n	8109e24 <_printf_i+0x164>
 8109ed6:	2301      	movs	r3, #1
 8109ed8:	4632      	mov	r2, r6
 8109eda:	4649      	mov	r1, r9
 8109edc:	4640      	mov	r0, r8
 8109ede:	47d0      	blx	sl
 8109ee0:	3001      	adds	r0, #1
 8109ee2:	d09d      	beq.n	8109e20 <_printf_i+0x160>
 8109ee4:	3501      	adds	r5, #1
 8109ee6:	68e3      	ldr	r3, [r4, #12]
 8109ee8:	9903      	ldr	r1, [sp, #12]
 8109eea:	1a5b      	subs	r3, r3, r1
 8109eec:	42ab      	cmp	r3, r5
 8109eee:	dcf2      	bgt.n	8109ed6 <_printf_i+0x216>
 8109ef0:	e7eb      	b.n	8109eca <_printf_i+0x20a>
 8109ef2:	2500      	movs	r5, #0
 8109ef4:	f104 0619 	add.w	r6, r4, #25
 8109ef8:	e7f5      	b.n	8109ee6 <_printf_i+0x226>
 8109efa:	bf00      	nop
 8109efc:	0810be2d 	.word	0x0810be2d
 8109f00:	0810be3e 	.word	0x0810be3e

08109f04 <__swhatbuf_r>:
 8109f04:	b570      	push	{r4, r5, r6, lr}
 8109f06:	460c      	mov	r4, r1
 8109f08:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8109f0c:	2900      	cmp	r1, #0
 8109f0e:	b096      	sub	sp, #88	; 0x58
 8109f10:	4615      	mov	r5, r2
 8109f12:	461e      	mov	r6, r3
 8109f14:	da0d      	bge.n	8109f32 <__swhatbuf_r+0x2e>
 8109f16:	89a3      	ldrh	r3, [r4, #12]
 8109f18:	f013 0f80 	tst.w	r3, #128	; 0x80
 8109f1c:	f04f 0100 	mov.w	r1, #0
 8109f20:	bf0c      	ite	eq
 8109f22:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 8109f26:	2340      	movne	r3, #64	; 0x40
 8109f28:	2000      	movs	r0, #0
 8109f2a:	6031      	str	r1, [r6, #0]
 8109f2c:	602b      	str	r3, [r5, #0]
 8109f2e:	b016      	add	sp, #88	; 0x58
 8109f30:	bd70      	pop	{r4, r5, r6, pc}
 8109f32:	466a      	mov	r2, sp
 8109f34:	f000 f878 	bl	810a028 <_fstat_r>
 8109f38:	2800      	cmp	r0, #0
 8109f3a:	dbec      	blt.n	8109f16 <__swhatbuf_r+0x12>
 8109f3c:	9901      	ldr	r1, [sp, #4]
 8109f3e:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 8109f42:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 8109f46:	4259      	negs	r1, r3
 8109f48:	4159      	adcs	r1, r3
 8109f4a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8109f4e:	e7eb      	b.n	8109f28 <__swhatbuf_r+0x24>

08109f50 <__smakebuf_r>:
 8109f50:	898b      	ldrh	r3, [r1, #12]
 8109f52:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8109f54:	079d      	lsls	r5, r3, #30
 8109f56:	4606      	mov	r6, r0
 8109f58:	460c      	mov	r4, r1
 8109f5a:	d507      	bpl.n	8109f6c <__smakebuf_r+0x1c>
 8109f5c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8109f60:	6023      	str	r3, [r4, #0]
 8109f62:	6123      	str	r3, [r4, #16]
 8109f64:	2301      	movs	r3, #1
 8109f66:	6163      	str	r3, [r4, #20]
 8109f68:	b002      	add	sp, #8
 8109f6a:	bd70      	pop	{r4, r5, r6, pc}
 8109f6c:	ab01      	add	r3, sp, #4
 8109f6e:	466a      	mov	r2, sp
 8109f70:	f7ff ffc8 	bl	8109f04 <__swhatbuf_r>
 8109f74:	9900      	ldr	r1, [sp, #0]
 8109f76:	4605      	mov	r5, r0
 8109f78:	4630      	mov	r0, r6
 8109f7a:	f7ff f91d 	bl	81091b8 <_malloc_r>
 8109f7e:	b948      	cbnz	r0, 8109f94 <__smakebuf_r+0x44>
 8109f80:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8109f84:	059a      	lsls	r2, r3, #22
 8109f86:	d4ef      	bmi.n	8109f68 <__smakebuf_r+0x18>
 8109f88:	f023 0303 	bic.w	r3, r3, #3
 8109f8c:	f043 0302 	orr.w	r3, r3, #2
 8109f90:	81a3      	strh	r3, [r4, #12]
 8109f92:	e7e3      	b.n	8109f5c <__smakebuf_r+0xc>
 8109f94:	89a3      	ldrh	r3, [r4, #12]
 8109f96:	6020      	str	r0, [r4, #0]
 8109f98:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8109f9c:	81a3      	strh	r3, [r4, #12]
 8109f9e:	9b00      	ldr	r3, [sp, #0]
 8109fa0:	6163      	str	r3, [r4, #20]
 8109fa2:	9b01      	ldr	r3, [sp, #4]
 8109fa4:	6120      	str	r0, [r4, #16]
 8109fa6:	b15b      	cbz	r3, 8109fc0 <__smakebuf_r+0x70>
 8109fa8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8109fac:	4630      	mov	r0, r6
 8109fae:	f000 f84d 	bl	810a04c <_isatty_r>
 8109fb2:	b128      	cbz	r0, 8109fc0 <__smakebuf_r+0x70>
 8109fb4:	89a3      	ldrh	r3, [r4, #12]
 8109fb6:	f023 0303 	bic.w	r3, r3, #3
 8109fba:	f043 0301 	orr.w	r3, r3, #1
 8109fbe:	81a3      	strh	r3, [r4, #12]
 8109fc0:	89a3      	ldrh	r3, [r4, #12]
 8109fc2:	431d      	orrs	r5, r3
 8109fc4:	81a5      	strh	r5, [r4, #12]
 8109fc6:	e7cf      	b.n	8109f68 <__smakebuf_r+0x18>

08109fc8 <_raise_r>:
 8109fc8:	291f      	cmp	r1, #31
 8109fca:	b538      	push	{r3, r4, r5, lr}
 8109fcc:	4604      	mov	r4, r0
 8109fce:	460d      	mov	r5, r1
 8109fd0:	d904      	bls.n	8109fdc <_raise_r+0x14>
 8109fd2:	2316      	movs	r3, #22
 8109fd4:	6003      	str	r3, [r0, #0]
 8109fd6:	f04f 30ff 	mov.w	r0, #4294967295
 8109fda:	bd38      	pop	{r3, r4, r5, pc}
 8109fdc:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 8109fde:	b112      	cbz	r2, 8109fe6 <_raise_r+0x1e>
 8109fe0:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8109fe4:	b94b      	cbnz	r3, 8109ffa <_raise_r+0x32>
 8109fe6:	4620      	mov	r0, r4
 8109fe8:	f000 f852 	bl	810a090 <_getpid_r>
 8109fec:	462a      	mov	r2, r5
 8109fee:	4601      	mov	r1, r0
 8109ff0:	4620      	mov	r0, r4
 8109ff2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8109ff6:	f000 b839 	b.w	810a06c <_kill_r>
 8109ffa:	2b01      	cmp	r3, #1
 8109ffc:	d00a      	beq.n	810a014 <_raise_r+0x4c>
 8109ffe:	1c59      	adds	r1, r3, #1
 810a000:	d103      	bne.n	810a00a <_raise_r+0x42>
 810a002:	2316      	movs	r3, #22
 810a004:	6003      	str	r3, [r0, #0]
 810a006:	2001      	movs	r0, #1
 810a008:	e7e7      	b.n	8109fda <_raise_r+0x12>
 810a00a:	2400      	movs	r4, #0
 810a00c:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 810a010:	4628      	mov	r0, r5
 810a012:	4798      	blx	r3
 810a014:	2000      	movs	r0, #0
 810a016:	e7e0      	b.n	8109fda <_raise_r+0x12>

0810a018 <raise>:
 810a018:	4b02      	ldr	r3, [pc, #8]	; (810a024 <raise+0xc>)
 810a01a:	4601      	mov	r1, r0
 810a01c:	6818      	ldr	r0, [r3, #0]
 810a01e:	f7ff bfd3 	b.w	8109fc8 <_raise_r>
 810a022:	bf00      	nop
 810a024:	10000068 	.word	0x10000068

0810a028 <_fstat_r>:
 810a028:	b538      	push	{r3, r4, r5, lr}
 810a02a:	4d07      	ldr	r5, [pc, #28]	; (810a048 <_fstat_r+0x20>)
 810a02c:	2300      	movs	r3, #0
 810a02e:	4604      	mov	r4, r0
 810a030:	4608      	mov	r0, r1
 810a032:	4611      	mov	r1, r2
 810a034:	602b      	str	r3, [r5, #0]
 810a036:	f7f7 fcc4 	bl	81019c2 <_fstat>
 810a03a:	1c43      	adds	r3, r0, #1
 810a03c:	d102      	bne.n	810a044 <_fstat_r+0x1c>
 810a03e:	682b      	ldr	r3, [r5, #0]
 810a040:	b103      	cbz	r3, 810a044 <_fstat_r+0x1c>
 810a042:	6023      	str	r3, [r4, #0]
 810a044:	bd38      	pop	{r3, r4, r5, pc}
 810a046:	bf00      	nop
 810a048:	10001e1c 	.word	0x10001e1c

0810a04c <_isatty_r>:
 810a04c:	b538      	push	{r3, r4, r5, lr}
 810a04e:	4d06      	ldr	r5, [pc, #24]	; (810a068 <_isatty_r+0x1c>)
 810a050:	2300      	movs	r3, #0
 810a052:	4604      	mov	r4, r0
 810a054:	4608      	mov	r0, r1
 810a056:	602b      	str	r3, [r5, #0]
 810a058:	f7f7 fcc3 	bl	81019e2 <_isatty>
 810a05c:	1c43      	adds	r3, r0, #1
 810a05e:	d102      	bne.n	810a066 <_isatty_r+0x1a>
 810a060:	682b      	ldr	r3, [r5, #0]
 810a062:	b103      	cbz	r3, 810a066 <_isatty_r+0x1a>
 810a064:	6023      	str	r3, [r4, #0]
 810a066:	bd38      	pop	{r3, r4, r5, pc}
 810a068:	10001e1c 	.word	0x10001e1c

0810a06c <_kill_r>:
 810a06c:	b538      	push	{r3, r4, r5, lr}
 810a06e:	4d07      	ldr	r5, [pc, #28]	; (810a08c <_kill_r+0x20>)
 810a070:	2300      	movs	r3, #0
 810a072:	4604      	mov	r4, r0
 810a074:	4608      	mov	r0, r1
 810a076:	4611      	mov	r1, r2
 810a078:	602b      	str	r3, [r5, #0]
 810a07a:	f7f7 fc43 	bl	8101904 <_kill>
 810a07e:	1c43      	adds	r3, r0, #1
 810a080:	d102      	bne.n	810a088 <_kill_r+0x1c>
 810a082:	682b      	ldr	r3, [r5, #0]
 810a084:	b103      	cbz	r3, 810a088 <_kill_r+0x1c>
 810a086:	6023      	str	r3, [r4, #0]
 810a088:	bd38      	pop	{r3, r4, r5, pc}
 810a08a:	bf00      	nop
 810a08c:	10001e1c 	.word	0x10001e1c

0810a090 <_getpid_r>:
 810a090:	f7f7 bc30 	b.w	81018f4 <_getpid>

0810a094 <_init>:
 810a094:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 810a096:	bf00      	nop
 810a098:	bcf8      	pop	{r3, r4, r5, r6, r7}
 810a09a:	bc08      	pop	{r3}
 810a09c:	469e      	mov	lr, r3
 810a09e:	4770      	bx	lr

0810a0a0 <_fini>:
 810a0a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 810a0a2:	bf00      	nop
 810a0a4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 810a0a6:	bc08      	pop	{r3}
 810a0a8:	469e      	mov	lr, r3
 810a0aa:	4770      	bx	lr
