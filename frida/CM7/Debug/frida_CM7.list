
frida_CM7.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000fdc8  08000298  08000298  00010298  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001c8  08010060  08010060  00020060  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08010228  08010228  00030040  2**0
                  CONTENTS
  4 .ARM          00000008  08010228  08010228  00020228  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08010230  08010230  00030040  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08010230  08010230  00020230  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08010234  08010234  00020234  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000040  24000000  08010238  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000013f8  24000040  08010278  00030040  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  24001438  08010278  00031438  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  00030040  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  0003006e  2**0
                  CONTENTS, READONLY
 13 .debug_info   000266ef  00000000  00000000  000300b1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00005726  00000000  00000000  000567a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001a08  00000000  00000000  0005bec8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00001478  00000000  00000000  0005d8d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00047512  00000000  00000000  0005ed48  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000244f6  00000000  00000000  000a625a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    001b7c3f  00000000  00000000  000ca750  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00006c24  00000000  00000000  00282390  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000060  00000000  00000000  00288fb4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000298 <__do_global_dtors_aux>:
 8000298:	b510      	push	{r4, lr}
 800029a:	4c05      	ldr	r4, [pc, #20]	; (80002b0 <__do_global_dtors_aux+0x18>)
 800029c:	7823      	ldrb	r3, [r4, #0]
 800029e:	b933      	cbnz	r3, 80002ae <__do_global_dtors_aux+0x16>
 80002a0:	4b04      	ldr	r3, [pc, #16]	; (80002b4 <__do_global_dtors_aux+0x1c>)
 80002a2:	b113      	cbz	r3, 80002aa <__do_global_dtors_aux+0x12>
 80002a4:	4804      	ldr	r0, [pc, #16]	; (80002b8 <__do_global_dtors_aux+0x20>)
 80002a6:	f3af 8000 	nop.w
 80002aa:	2301      	movs	r3, #1
 80002ac:	7023      	strb	r3, [r4, #0]
 80002ae:	bd10      	pop	{r4, pc}
 80002b0:	24000040 	.word	0x24000040
 80002b4:	00000000 	.word	0x00000000
 80002b8:	08010048 	.word	0x08010048

080002bc <frame_dummy>:
 80002bc:	b508      	push	{r3, lr}
 80002be:	4b03      	ldr	r3, [pc, #12]	; (80002cc <frame_dummy+0x10>)
 80002c0:	b11b      	cbz	r3, 80002ca <frame_dummy+0xe>
 80002c2:	4903      	ldr	r1, [pc, #12]	; (80002d0 <frame_dummy+0x14>)
 80002c4:	4803      	ldr	r0, [pc, #12]	; (80002d4 <frame_dummy+0x18>)
 80002c6:	f3af 8000 	nop.w
 80002ca:	bd08      	pop	{r3, pc}
 80002cc:	00000000 	.word	0x00000000
 80002d0:	24000044 	.word	0x24000044
 80002d4:	08010048 	.word	0x08010048

080002d8 <strlen>:
 80002d8:	4603      	mov	r3, r0
 80002da:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002de:	2a00      	cmp	r2, #0
 80002e0:	d1fb      	bne.n	80002da <strlen+0x2>
 80002e2:	1a18      	subs	r0, r3, r0
 80002e4:	3801      	subs	r0, #1
 80002e6:	4770      	bx	lr

080002e8 <__aeabi_uldivmod>:
 80002e8:	b953      	cbnz	r3, 8000300 <__aeabi_uldivmod+0x18>
 80002ea:	b94a      	cbnz	r2, 8000300 <__aeabi_uldivmod+0x18>
 80002ec:	2900      	cmp	r1, #0
 80002ee:	bf08      	it	eq
 80002f0:	2800      	cmpeq	r0, #0
 80002f2:	bf1c      	itt	ne
 80002f4:	f04f 31ff 	movne.w	r1, #4294967295
 80002f8:	f04f 30ff 	movne.w	r0, #4294967295
 80002fc:	f000 b970 	b.w	80005e0 <__aeabi_idiv0>
 8000300:	f1ad 0c08 	sub.w	ip, sp, #8
 8000304:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000308:	f000 f806 	bl	8000318 <__udivmoddi4>
 800030c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000310:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000314:	b004      	add	sp, #16
 8000316:	4770      	bx	lr

08000318 <__udivmoddi4>:
 8000318:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800031c:	9e08      	ldr	r6, [sp, #32]
 800031e:	460d      	mov	r5, r1
 8000320:	4604      	mov	r4, r0
 8000322:	460f      	mov	r7, r1
 8000324:	2b00      	cmp	r3, #0
 8000326:	d14a      	bne.n	80003be <__udivmoddi4+0xa6>
 8000328:	428a      	cmp	r2, r1
 800032a:	4694      	mov	ip, r2
 800032c:	d965      	bls.n	80003fa <__udivmoddi4+0xe2>
 800032e:	fab2 f382 	clz	r3, r2
 8000332:	b143      	cbz	r3, 8000346 <__udivmoddi4+0x2e>
 8000334:	fa02 fc03 	lsl.w	ip, r2, r3
 8000338:	f1c3 0220 	rsb	r2, r3, #32
 800033c:	409f      	lsls	r7, r3
 800033e:	fa20 f202 	lsr.w	r2, r0, r2
 8000342:	4317      	orrs	r7, r2
 8000344:	409c      	lsls	r4, r3
 8000346:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 800034a:	fa1f f58c 	uxth.w	r5, ip
 800034e:	fbb7 f1fe 	udiv	r1, r7, lr
 8000352:	0c22      	lsrs	r2, r4, #16
 8000354:	fb0e 7711 	mls	r7, lr, r1, r7
 8000358:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 800035c:	fb01 f005 	mul.w	r0, r1, r5
 8000360:	4290      	cmp	r0, r2
 8000362:	d90a      	bls.n	800037a <__udivmoddi4+0x62>
 8000364:	eb1c 0202 	adds.w	r2, ip, r2
 8000368:	f101 37ff 	add.w	r7, r1, #4294967295
 800036c:	f080 811c 	bcs.w	80005a8 <__udivmoddi4+0x290>
 8000370:	4290      	cmp	r0, r2
 8000372:	f240 8119 	bls.w	80005a8 <__udivmoddi4+0x290>
 8000376:	3902      	subs	r1, #2
 8000378:	4462      	add	r2, ip
 800037a:	1a12      	subs	r2, r2, r0
 800037c:	b2a4      	uxth	r4, r4
 800037e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000382:	fb0e 2210 	mls	r2, lr, r0, r2
 8000386:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800038a:	fb00 f505 	mul.w	r5, r0, r5
 800038e:	42a5      	cmp	r5, r4
 8000390:	d90a      	bls.n	80003a8 <__udivmoddi4+0x90>
 8000392:	eb1c 0404 	adds.w	r4, ip, r4
 8000396:	f100 32ff 	add.w	r2, r0, #4294967295
 800039a:	f080 8107 	bcs.w	80005ac <__udivmoddi4+0x294>
 800039e:	42a5      	cmp	r5, r4
 80003a0:	f240 8104 	bls.w	80005ac <__udivmoddi4+0x294>
 80003a4:	4464      	add	r4, ip
 80003a6:	3802      	subs	r0, #2
 80003a8:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80003ac:	1b64      	subs	r4, r4, r5
 80003ae:	2100      	movs	r1, #0
 80003b0:	b11e      	cbz	r6, 80003ba <__udivmoddi4+0xa2>
 80003b2:	40dc      	lsrs	r4, r3
 80003b4:	2300      	movs	r3, #0
 80003b6:	e9c6 4300 	strd	r4, r3, [r6]
 80003ba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003be:	428b      	cmp	r3, r1
 80003c0:	d908      	bls.n	80003d4 <__udivmoddi4+0xbc>
 80003c2:	2e00      	cmp	r6, #0
 80003c4:	f000 80ed 	beq.w	80005a2 <__udivmoddi4+0x28a>
 80003c8:	2100      	movs	r1, #0
 80003ca:	e9c6 0500 	strd	r0, r5, [r6]
 80003ce:	4608      	mov	r0, r1
 80003d0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003d4:	fab3 f183 	clz	r1, r3
 80003d8:	2900      	cmp	r1, #0
 80003da:	d149      	bne.n	8000470 <__udivmoddi4+0x158>
 80003dc:	42ab      	cmp	r3, r5
 80003de:	d302      	bcc.n	80003e6 <__udivmoddi4+0xce>
 80003e0:	4282      	cmp	r2, r0
 80003e2:	f200 80f8 	bhi.w	80005d6 <__udivmoddi4+0x2be>
 80003e6:	1a84      	subs	r4, r0, r2
 80003e8:	eb65 0203 	sbc.w	r2, r5, r3
 80003ec:	2001      	movs	r0, #1
 80003ee:	4617      	mov	r7, r2
 80003f0:	2e00      	cmp	r6, #0
 80003f2:	d0e2      	beq.n	80003ba <__udivmoddi4+0xa2>
 80003f4:	e9c6 4700 	strd	r4, r7, [r6]
 80003f8:	e7df      	b.n	80003ba <__udivmoddi4+0xa2>
 80003fa:	b902      	cbnz	r2, 80003fe <__udivmoddi4+0xe6>
 80003fc:	deff      	udf	#255	; 0xff
 80003fe:	fab2 f382 	clz	r3, r2
 8000402:	2b00      	cmp	r3, #0
 8000404:	f040 8090 	bne.w	8000528 <__udivmoddi4+0x210>
 8000408:	1a8a      	subs	r2, r1, r2
 800040a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800040e:	fa1f fe8c 	uxth.w	lr, ip
 8000412:	2101      	movs	r1, #1
 8000414:	fbb2 f5f7 	udiv	r5, r2, r7
 8000418:	fb07 2015 	mls	r0, r7, r5, r2
 800041c:	0c22      	lsrs	r2, r4, #16
 800041e:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000422:	fb0e f005 	mul.w	r0, lr, r5
 8000426:	4290      	cmp	r0, r2
 8000428:	d908      	bls.n	800043c <__udivmoddi4+0x124>
 800042a:	eb1c 0202 	adds.w	r2, ip, r2
 800042e:	f105 38ff 	add.w	r8, r5, #4294967295
 8000432:	d202      	bcs.n	800043a <__udivmoddi4+0x122>
 8000434:	4290      	cmp	r0, r2
 8000436:	f200 80cb 	bhi.w	80005d0 <__udivmoddi4+0x2b8>
 800043a:	4645      	mov	r5, r8
 800043c:	1a12      	subs	r2, r2, r0
 800043e:	b2a4      	uxth	r4, r4
 8000440:	fbb2 f0f7 	udiv	r0, r2, r7
 8000444:	fb07 2210 	mls	r2, r7, r0, r2
 8000448:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800044c:	fb0e fe00 	mul.w	lr, lr, r0
 8000450:	45a6      	cmp	lr, r4
 8000452:	d908      	bls.n	8000466 <__udivmoddi4+0x14e>
 8000454:	eb1c 0404 	adds.w	r4, ip, r4
 8000458:	f100 32ff 	add.w	r2, r0, #4294967295
 800045c:	d202      	bcs.n	8000464 <__udivmoddi4+0x14c>
 800045e:	45a6      	cmp	lr, r4
 8000460:	f200 80bb 	bhi.w	80005da <__udivmoddi4+0x2c2>
 8000464:	4610      	mov	r0, r2
 8000466:	eba4 040e 	sub.w	r4, r4, lr
 800046a:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 800046e:	e79f      	b.n	80003b0 <__udivmoddi4+0x98>
 8000470:	f1c1 0720 	rsb	r7, r1, #32
 8000474:	408b      	lsls	r3, r1
 8000476:	fa22 fc07 	lsr.w	ip, r2, r7
 800047a:	ea4c 0c03 	orr.w	ip, ip, r3
 800047e:	fa05 f401 	lsl.w	r4, r5, r1
 8000482:	fa20 f307 	lsr.w	r3, r0, r7
 8000486:	40fd      	lsrs	r5, r7
 8000488:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800048c:	4323      	orrs	r3, r4
 800048e:	fbb5 f8f9 	udiv	r8, r5, r9
 8000492:	fa1f fe8c 	uxth.w	lr, ip
 8000496:	fb09 5518 	mls	r5, r9, r8, r5
 800049a:	0c1c      	lsrs	r4, r3, #16
 800049c:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 80004a0:	fb08 f50e 	mul.w	r5, r8, lr
 80004a4:	42a5      	cmp	r5, r4
 80004a6:	fa02 f201 	lsl.w	r2, r2, r1
 80004aa:	fa00 f001 	lsl.w	r0, r0, r1
 80004ae:	d90b      	bls.n	80004c8 <__udivmoddi4+0x1b0>
 80004b0:	eb1c 0404 	adds.w	r4, ip, r4
 80004b4:	f108 3aff 	add.w	sl, r8, #4294967295
 80004b8:	f080 8088 	bcs.w	80005cc <__udivmoddi4+0x2b4>
 80004bc:	42a5      	cmp	r5, r4
 80004be:	f240 8085 	bls.w	80005cc <__udivmoddi4+0x2b4>
 80004c2:	f1a8 0802 	sub.w	r8, r8, #2
 80004c6:	4464      	add	r4, ip
 80004c8:	1b64      	subs	r4, r4, r5
 80004ca:	b29d      	uxth	r5, r3
 80004cc:	fbb4 f3f9 	udiv	r3, r4, r9
 80004d0:	fb09 4413 	mls	r4, r9, r3, r4
 80004d4:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80004d8:	fb03 fe0e 	mul.w	lr, r3, lr
 80004dc:	45a6      	cmp	lr, r4
 80004de:	d908      	bls.n	80004f2 <__udivmoddi4+0x1da>
 80004e0:	eb1c 0404 	adds.w	r4, ip, r4
 80004e4:	f103 35ff 	add.w	r5, r3, #4294967295
 80004e8:	d26c      	bcs.n	80005c4 <__udivmoddi4+0x2ac>
 80004ea:	45a6      	cmp	lr, r4
 80004ec:	d96a      	bls.n	80005c4 <__udivmoddi4+0x2ac>
 80004ee:	3b02      	subs	r3, #2
 80004f0:	4464      	add	r4, ip
 80004f2:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80004f6:	fba3 9502 	umull	r9, r5, r3, r2
 80004fa:	eba4 040e 	sub.w	r4, r4, lr
 80004fe:	42ac      	cmp	r4, r5
 8000500:	46c8      	mov	r8, r9
 8000502:	46ae      	mov	lr, r5
 8000504:	d356      	bcc.n	80005b4 <__udivmoddi4+0x29c>
 8000506:	d053      	beq.n	80005b0 <__udivmoddi4+0x298>
 8000508:	b156      	cbz	r6, 8000520 <__udivmoddi4+0x208>
 800050a:	ebb0 0208 	subs.w	r2, r0, r8
 800050e:	eb64 040e 	sbc.w	r4, r4, lr
 8000512:	fa04 f707 	lsl.w	r7, r4, r7
 8000516:	40ca      	lsrs	r2, r1
 8000518:	40cc      	lsrs	r4, r1
 800051a:	4317      	orrs	r7, r2
 800051c:	e9c6 7400 	strd	r7, r4, [r6]
 8000520:	4618      	mov	r0, r3
 8000522:	2100      	movs	r1, #0
 8000524:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000528:	f1c3 0120 	rsb	r1, r3, #32
 800052c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000530:	fa20 f201 	lsr.w	r2, r0, r1
 8000534:	fa25 f101 	lsr.w	r1, r5, r1
 8000538:	409d      	lsls	r5, r3
 800053a:	432a      	orrs	r2, r5
 800053c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000540:	fa1f fe8c 	uxth.w	lr, ip
 8000544:	fbb1 f0f7 	udiv	r0, r1, r7
 8000548:	fb07 1510 	mls	r5, r7, r0, r1
 800054c:	0c11      	lsrs	r1, r2, #16
 800054e:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000552:	fb00 f50e 	mul.w	r5, r0, lr
 8000556:	428d      	cmp	r5, r1
 8000558:	fa04 f403 	lsl.w	r4, r4, r3
 800055c:	d908      	bls.n	8000570 <__udivmoddi4+0x258>
 800055e:	eb1c 0101 	adds.w	r1, ip, r1
 8000562:	f100 38ff 	add.w	r8, r0, #4294967295
 8000566:	d22f      	bcs.n	80005c8 <__udivmoddi4+0x2b0>
 8000568:	428d      	cmp	r5, r1
 800056a:	d92d      	bls.n	80005c8 <__udivmoddi4+0x2b0>
 800056c:	3802      	subs	r0, #2
 800056e:	4461      	add	r1, ip
 8000570:	1b49      	subs	r1, r1, r5
 8000572:	b292      	uxth	r2, r2
 8000574:	fbb1 f5f7 	udiv	r5, r1, r7
 8000578:	fb07 1115 	mls	r1, r7, r5, r1
 800057c:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000580:	fb05 f10e 	mul.w	r1, r5, lr
 8000584:	4291      	cmp	r1, r2
 8000586:	d908      	bls.n	800059a <__udivmoddi4+0x282>
 8000588:	eb1c 0202 	adds.w	r2, ip, r2
 800058c:	f105 38ff 	add.w	r8, r5, #4294967295
 8000590:	d216      	bcs.n	80005c0 <__udivmoddi4+0x2a8>
 8000592:	4291      	cmp	r1, r2
 8000594:	d914      	bls.n	80005c0 <__udivmoddi4+0x2a8>
 8000596:	3d02      	subs	r5, #2
 8000598:	4462      	add	r2, ip
 800059a:	1a52      	subs	r2, r2, r1
 800059c:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 80005a0:	e738      	b.n	8000414 <__udivmoddi4+0xfc>
 80005a2:	4631      	mov	r1, r6
 80005a4:	4630      	mov	r0, r6
 80005a6:	e708      	b.n	80003ba <__udivmoddi4+0xa2>
 80005a8:	4639      	mov	r1, r7
 80005aa:	e6e6      	b.n	800037a <__udivmoddi4+0x62>
 80005ac:	4610      	mov	r0, r2
 80005ae:	e6fb      	b.n	80003a8 <__udivmoddi4+0x90>
 80005b0:	4548      	cmp	r0, r9
 80005b2:	d2a9      	bcs.n	8000508 <__udivmoddi4+0x1f0>
 80005b4:	ebb9 0802 	subs.w	r8, r9, r2
 80005b8:	eb65 0e0c 	sbc.w	lr, r5, ip
 80005bc:	3b01      	subs	r3, #1
 80005be:	e7a3      	b.n	8000508 <__udivmoddi4+0x1f0>
 80005c0:	4645      	mov	r5, r8
 80005c2:	e7ea      	b.n	800059a <__udivmoddi4+0x282>
 80005c4:	462b      	mov	r3, r5
 80005c6:	e794      	b.n	80004f2 <__udivmoddi4+0x1da>
 80005c8:	4640      	mov	r0, r8
 80005ca:	e7d1      	b.n	8000570 <__udivmoddi4+0x258>
 80005cc:	46d0      	mov	r8, sl
 80005ce:	e77b      	b.n	80004c8 <__udivmoddi4+0x1b0>
 80005d0:	3d02      	subs	r5, #2
 80005d2:	4462      	add	r2, ip
 80005d4:	e732      	b.n	800043c <__udivmoddi4+0x124>
 80005d6:	4608      	mov	r0, r1
 80005d8:	e70a      	b.n	80003f0 <__udivmoddi4+0xd8>
 80005da:	4464      	add	r4, ip
 80005dc:	3802      	subs	r0, #2
 80005de:	e742      	b.n	8000466 <__udivmoddi4+0x14e>

080005e0 <__aeabi_idiv0>:
 80005e0:	4770      	bx	lr
 80005e2:	bf00      	nop

080005e4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80005e4:	b480      	push	{r7}
 80005e6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80005e8:	4b3d      	ldr	r3, [pc, #244]	; (80006e0 <SystemInit+0xfc>)
 80005ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80005ee:	4a3c      	ldr	r2, [pc, #240]	; (80006e0 <SystemInit+0xfc>)
 80005f0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80005f4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

    /*SEVONPEND enabled so that an interrupt coming from the CPU(n) interrupt signal is
     detectable by the CPU after a WFI/WFE instruction.*/
 SCB->SCR |= SCB_SCR_SEVONPEND_Msk;
 80005f8:	4b39      	ldr	r3, [pc, #228]	; (80006e0 <SystemInit+0xfc>)
 80005fa:	691b      	ldr	r3, [r3, #16]
 80005fc:	4a38      	ldr	r2, [pc, #224]	; (80006e0 <SystemInit+0xfc>)
 80005fe:	f043 0310 	orr.w	r3, r3, #16
 8000602:	6113      	str	r3, [r2, #16]

#if defined(CORE_CM7)
  /* Reset the RCC clock configuration to the default reset state ------------*/
   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000604:	4b37      	ldr	r3, [pc, #220]	; (80006e4 <SystemInit+0x100>)
 8000606:	681b      	ldr	r3, [r3, #0]
 8000608:	f003 030f 	and.w	r3, r3, #15
 800060c:	2b06      	cmp	r3, #6
 800060e:	d807      	bhi.n	8000620 <SystemInit+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000610:	4b34      	ldr	r3, [pc, #208]	; (80006e4 <SystemInit+0x100>)
 8000612:	681b      	ldr	r3, [r3, #0]
 8000614:	f023 030f 	bic.w	r3, r3, #15
 8000618:	4a32      	ldr	r2, [pc, #200]	; (80006e4 <SystemInit+0x100>)
 800061a:	f043 0307 	orr.w	r3, r3, #7
 800061e:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8000620:	4b31      	ldr	r3, [pc, #196]	; (80006e8 <SystemInit+0x104>)
 8000622:	681b      	ldr	r3, [r3, #0]
 8000624:	4a30      	ldr	r2, [pc, #192]	; (80006e8 <SystemInit+0x104>)
 8000626:	f043 0301 	orr.w	r3, r3, #1
 800062a:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 800062c:	4b2e      	ldr	r3, [pc, #184]	; (80006e8 <SystemInit+0x104>)
 800062e:	2200      	movs	r2, #0
 8000630:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8000632:	4b2d      	ldr	r3, [pc, #180]	; (80006e8 <SystemInit+0x104>)
 8000634:	681a      	ldr	r2, [r3, #0]
 8000636:	492c      	ldr	r1, [pc, #176]	; (80006e8 <SystemInit+0x104>)
 8000638:	4b2c      	ldr	r3, [pc, #176]	; (80006ec <SystemInit+0x108>)
 800063a:	4013      	ands	r3, r2
 800063c:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 800063e:	4b29      	ldr	r3, [pc, #164]	; (80006e4 <SystemInit+0x100>)
 8000640:	681b      	ldr	r3, [r3, #0]
 8000642:	f003 0308 	and.w	r3, r3, #8
 8000646:	2b00      	cmp	r3, #0
 8000648:	d007      	beq.n	800065a <SystemInit+0x76>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 800064a:	4b26      	ldr	r3, [pc, #152]	; (80006e4 <SystemInit+0x100>)
 800064c:	681b      	ldr	r3, [r3, #0]
 800064e:	f023 030f 	bic.w	r3, r3, #15
 8000652:	4a24      	ldr	r2, [pc, #144]	; (80006e4 <SystemInit+0x100>)
 8000654:	f043 0307 	orr.w	r3, r3, #7
 8000658:	6013      	str	r3, [r2, #0]
  }

  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 800065a:	4b23      	ldr	r3, [pc, #140]	; (80006e8 <SystemInit+0x104>)
 800065c:	2200      	movs	r2, #0
 800065e:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8000660:	4b21      	ldr	r3, [pc, #132]	; (80006e8 <SystemInit+0x104>)
 8000662:	2200      	movs	r2, #0
 8000664:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8000666:	4b20      	ldr	r3, [pc, #128]	; (80006e8 <SystemInit+0x104>)
 8000668:	2200      	movs	r2, #0
 800066a:	621a      	str	r2, [r3, #32]

  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 800066c:	4b1e      	ldr	r3, [pc, #120]	; (80006e8 <SystemInit+0x104>)
 800066e:	4a20      	ldr	r2, [pc, #128]	; (80006f0 <SystemInit+0x10c>)
 8000670:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8000672:	4b1d      	ldr	r3, [pc, #116]	; (80006e8 <SystemInit+0x104>)
 8000674:	4a1f      	ldr	r2, [pc, #124]	; (80006f4 <SystemInit+0x110>)
 8000676:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8000678:	4b1b      	ldr	r3, [pc, #108]	; (80006e8 <SystemInit+0x104>)
 800067a:	4a1f      	ldr	r2, [pc, #124]	; (80006f8 <SystemInit+0x114>)
 800067c:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 800067e:	4b1a      	ldr	r3, [pc, #104]	; (80006e8 <SystemInit+0x104>)
 8000680:	2200      	movs	r2, #0
 8000682:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8000684:	4b18      	ldr	r3, [pc, #96]	; (80006e8 <SystemInit+0x104>)
 8000686:	4a1c      	ldr	r2, [pc, #112]	; (80006f8 <SystemInit+0x114>)
 8000688:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 800068a:	4b17      	ldr	r3, [pc, #92]	; (80006e8 <SystemInit+0x104>)
 800068c:	2200      	movs	r2, #0
 800068e:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8000690:	4b15      	ldr	r3, [pc, #84]	; (80006e8 <SystemInit+0x104>)
 8000692:	4a19      	ldr	r2, [pc, #100]	; (80006f8 <SystemInit+0x114>)
 8000694:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8000696:	4b14      	ldr	r3, [pc, #80]	; (80006e8 <SystemInit+0x104>)
 8000698:	2200      	movs	r2, #0
 800069a:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 800069c:	4b12      	ldr	r3, [pc, #72]	; (80006e8 <SystemInit+0x104>)
 800069e:	681b      	ldr	r3, [r3, #0]
 80006a0:	4a11      	ldr	r2, [pc, #68]	; (80006e8 <SystemInit+0x104>)
 80006a2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80006a6:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 80006a8:	4b0f      	ldr	r3, [pc, #60]	; (80006e8 <SystemInit+0x104>)
 80006aa:	2200      	movs	r2, #0
 80006ac:	661a      	str	r2, [r3, #96]	; 0x60

  /* Enable CortexM7 HSEM EXTI line (line 78)*/
  EXTI_D2->EMR3 |= 0x4000UL;
 80006ae:	4b13      	ldr	r3, [pc, #76]	; (80006fc <SystemInit+0x118>)
 80006b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80006b2:	4a12      	ldr	r2, [pc, #72]	; (80006fc <SystemInit+0x118>)
 80006b4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80006b8:	6253      	str	r3, [r2, #36]	; 0x24

  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 80006ba:	4b11      	ldr	r3, [pc, #68]	; (8000700 <SystemInit+0x11c>)
 80006bc:	681a      	ldr	r2, [r3, #0]
 80006be:	4b11      	ldr	r3, [pc, #68]	; (8000704 <SystemInit+0x120>)
 80006c0:	4013      	ands	r3, r2
 80006c2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80006c6:	d202      	bcs.n	80006ce <SystemInit+0xea>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 80006c8:	4b0f      	ldr	r3, [pc, #60]	; (8000708 <SystemInit+0x124>)
 80006ca:	2201      	movs	r2, #1
 80006cc:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 80006ce:	4b0f      	ldr	r3, [pc, #60]	; (800070c <SystemInit+0x128>)
 80006d0:	f243 02d2 	movw	r2, #12498	; 0x30d2
 80006d4:	601a      	str	r2, [r3, #0]
#endif /* USER_VECT_TAB_ADDRESS */

#else
#error Please #define CORE_CM4 or CORE_CM7
#endif /* CORE_CM4 */
}
 80006d6:	bf00      	nop
 80006d8:	46bd      	mov	sp, r7
 80006da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006de:	4770      	bx	lr
 80006e0:	e000ed00 	.word	0xe000ed00
 80006e4:	52002000 	.word	0x52002000
 80006e8:	58024400 	.word	0x58024400
 80006ec:	eaf6ed7f 	.word	0xeaf6ed7f
 80006f0:	02020200 	.word	0x02020200
 80006f4:	01ff0000 	.word	0x01ff0000
 80006f8:	01010280 	.word	0x01010280
 80006fc:	580000c0 	.word	0x580000c0
 8000700:	5c001000 	.word	0x5c001000
 8000704:	ffff0000 	.word	0xffff0000
 8000708:	51008108 	.word	0x51008108
 800070c:	52004000 	.word	0x52004000

08000710 <tud_cdc_available>:
{
  tud_cdc_n_set_wanted_char(0, wanted);
}

static inline uint32_t tud_cdc_available (void)
{
 8000710:	b580      	push	{r7, lr}
 8000712:	af00      	add	r7, sp, #0
  return tud_cdc_n_available(0);
 8000714:	2000      	movs	r0, #0
 8000716:	f001 f811 	bl	800173c <tud_cdc_n_available>
 800071a:	4603      	mov	r3, r0
}
 800071c:	4618      	mov	r0, r3
 800071e:	bd80      	pop	{r7, pc}

08000720 <tud_cdc_read>:
{
  return tud_cdc_n_read_char(0);
}

static inline uint32_t tud_cdc_read (void* buffer, uint32_t bufsize)
{
 8000720:	b580      	push	{r7, lr}
 8000722:	b082      	sub	sp, #8
 8000724:	af00      	add	r7, sp, #0
 8000726:	6078      	str	r0, [r7, #4]
 8000728:	6039      	str	r1, [r7, #0]
  return tud_cdc_n_read(0, buffer, bufsize);
 800072a:	683a      	ldr	r2, [r7, #0]
 800072c:	6879      	ldr	r1, [r7, #4]
 800072e:	2000      	movs	r0, #0
 8000730:	f001 f81c 	bl	800176c <tud_cdc_n_read>
 8000734:	4603      	mov	r3, r0
}
 8000736:	4618      	mov	r0, r3
 8000738:	3708      	adds	r7, #8
 800073a:	46bd      	mov	sp, r7
 800073c:	bd80      	pop	{r7, pc}

0800073e <tud_cdc_write>:
{
  return tud_cdc_n_write_char(0, ch);
}

static inline uint32_t tud_cdc_write (void const* buffer, uint32_t bufsize)
{
 800073e:	b580      	push	{r7, lr}
 8000740:	b082      	sub	sp, #8
 8000742:	af00      	add	r7, sp, #0
 8000744:	6078      	str	r0, [r7, #4]
 8000746:	6039      	str	r1, [r7, #0]
  return tud_cdc_n_write(0, buffer, bufsize);
 8000748:	683a      	ldr	r2, [r7, #0]
 800074a:	6879      	ldr	r1, [r7, #4]
 800074c:	2000      	movs	r0, #0
 800074e:	f001 f839 	bl	80017c4 <tud_cdc_n_write>
 8000752:	4603      	mov	r3, r0
}
 8000754:	4618      	mov	r0, r3
 8000756:	3708      	adds	r7, #8
 8000758:	46bd      	mov	sp, r7
 800075a:	bd80      	pop	{r7, pc}

0800075c <tud_cdc_write_flush>:
{
  return tud_cdc_n_write_str(0, str);
}

static inline uint32_t tud_cdc_write_flush (void)
{
 800075c:	b580      	push	{r7, lr}
 800075e:	af00      	add	r7, sp, #0
  return tud_cdc_n_write_flush(0);
 8000760:	2000      	movs	r0, #0
 8000762:	f001 f865 	bl	8001830 <tud_cdc_n_write_flush>
 8000766:	4603      	mov	r3, r0
}
 8000768:	4618      	mov	r0, r3
 800076a:	bd80      	pop	{r7, pc}

0800076c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800076c:	b580      	push	{r7, lr}
 800076e:	b082      	sub	sp, #8
 8000770:	af00      	add	r7, sp, #0
  int32_t timeout;
/* USER CODE END Boot_Mode_Sequence_0 */

/* USER CODE BEGIN Boot_Mode_Sequence_1 */
  /* Wait until CPU2 boots and enters in stop mode or timeout*/
  timeout = 0xFFFF;
 8000772:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000776:	607b      	str	r3, [r7, #4]
  while((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) != RESET) && (timeout-- > 0));
 8000778:	bf00      	nop
 800077a:	4b1f      	ldr	r3, [pc, #124]	; (80007f8 <main+0x8c>)
 800077c:	681b      	ldr	r3, [r3, #0]
 800077e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000782:	2b00      	cmp	r3, #0
 8000784:	d004      	beq.n	8000790 <main+0x24>
 8000786:	687b      	ldr	r3, [r7, #4]
 8000788:	1e5a      	subs	r2, r3, #1
 800078a:	607a      	str	r2, [r7, #4]
 800078c:	2b00      	cmp	r3, #0
 800078e:	dcf4      	bgt.n	800077a <main+0xe>
  if ( timeout < 0 )
 8000790:	687b      	ldr	r3, [r7, #4]
 8000792:	2b00      	cmp	r3, #0
 8000794:	da01      	bge.n	800079a <main+0x2e>
  {
  Error_Handler();
 8000796:	f000 faea 	bl	8000d6e <Error_Handler>
  }
/* USER CODE END Boot_Mode_Sequence_1 */
  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800079a:	f007 f84b 	bl	8007834 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800079e:	f000 f82d 	bl	80007fc <SystemClock_Config>

/* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 80007a2:	f000 f8bf 	bl	8000924 <PeriphCommonClock_Config>
/* USER CODE BEGIN Boot_Mode_Sequence_2 */
/* When system initialization is finished, Cortex-M7 will release Cortex-M4 by means of
HSEM notification */
/*HW semaphore Clock enable*/
__HAL_RCC_HSEM_CLK_ENABLE();
 80007a6:	4b14      	ldr	r3, [pc, #80]	; (80007f8 <main+0x8c>)
 80007a8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80007ac:	4a12      	ldr	r2, [pc, #72]	; (80007f8 <main+0x8c>)
 80007ae:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80007b2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80007b6:	4b10      	ldr	r3, [pc, #64]	; (80007f8 <main+0x8c>)
 80007b8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80007bc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80007c0:	603b      	str	r3, [r7, #0]
 80007c2:	683b      	ldr	r3, [r7, #0]
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80007c4:	f000 f986 	bl	8000ad4 <MX_GPIO_Init>
  MX_USART1_UART_Init();
 80007c8:	f000 f906 	bl	80009d8 <MX_USART1_UART_Init>
  MX_SDMMC1_SD_Init();
 80007cc:	f000 f8e0 	bl	8000990 <MX_SDMMC1_SD_Init>
  MX_USB_OTG_HS_PCD_Init();
 80007d0:	f000 f94e 	bl	8000a70 <MX_USB_OTG_HS_PCD_Init>
  MX_FATFS_Init();
 80007d4:	f00f f940 	bl	800fa58 <MX_FATFS_Init>
  /* USER CODE BEGIN 2 */

  fatfs_init();
 80007d8:	f000 face 	bl	8000d78 <fatfs_init>

  tud_init(BOARD_TUD_RHPORT);
 80007dc:	2001      	movs	r0, #1
 80007de:	f003 fc05 	bl	8003fec <tud_init>
void tud_task_ext(uint32_t timeout_ms, bool in_isr);

// Task function should be called in main/rtos loop
TU_ATTR_ALWAYS_INLINE static inline
void tud_task (void) {
  tud_task_ext(UINT32_MAX, false);
 80007e2:	2100      	movs	r1, #0
 80007e4:	f04f 30ff 	mov.w	r0, #4294967295
 80007e8:	f003 fd1a 	bl	8004220 <tud_task_ext>
}
 80007ec:	bf00      	nop
  /* USER CODE BEGIN WHILE */
  while (1)
  {

	  tud_task();
	  led_blinking_task();
 80007ee:	f000 fa85 	bl	8000cfc <led_blinking_task>
	  cdc_task();
 80007f2:	f000 fa4f 	bl	8000c94 <cdc_task>
	  tud_task();
 80007f6:	e7f4      	b.n	80007e2 <main+0x76>
 80007f8:	58024400 	.word	0x58024400

080007fc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80007fc:	b580      	push	{r7, lr}
 80007fe:	b09c      	sub	sp, #112	; 0x70
 8000800:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000802:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000806:	224c      	movs	r2, #76	; 0x4c
 8000808:	2100      	movs	r1, #0
 800080a:	4618      	mov	r0, r3
 800080c:	f00f fbe1 	bl	800ffd2 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000810:	1d3b      	adds	r3, r7, #4
 8000812:	2220      	movs	r2, #32
 8000814:	2100      	movs	r1, #0
 8000816:	4618      	mov	r0, r3
 8000818:	f00f fbdb 	bl	800ffd2 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_DIRECT_SMPS_SUPPLY);
 800081c:	2004      	movs	r0, #4
 800081e:	f007 fd15 	bl	800824c <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000822:	2300      	movs	r3, #0
 8000824:	603b      	str	r3, [r7, #0]
 8000826:	4b3c      	ldr	r3, [pc, #240]	; (8000918 <SystemClock_Config+0x11c>)
 8000828:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800082a:	4a3b      	ldr	r2, [pc, #236]	; (8000918 <SystemClock_Config+0x11c>)
 800082c:	f023 0301 	bic.w	r3, r3, #1
 8000830:	62d3      	str	r3, [r2, #44]	; 0x2c
 8000832:	4b39      	ldr	r3, [pc, #228]	; (8000918 <SystemClock_Config+0x11c>)
 8000834:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000836:	f003 0301 	and.w	r3, r3, #1
 800083a:	603b      	str	r3, [r7, #0]
 800083c:	4b37      	ldr	r3, [pc, #220]	; (800091c <SystemClock_Config+0x120>)
 800083e:	699b      	ldr	r3, [r3, #24]
 8000840:	4a36      	ldr	r2, [pc, #216]	; (800091c <SystemClock_Config+0x120>)
 8000842:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000846:	6193      	str	r3, [r2, #24]
 8000848:	4b34      	ldr	r3, [pc, #208]	; (800091c <SystemClock_Config+0x120>)
 800084a:	699b      	ldr	r3, [r3, #24]
 800084c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000850:	603b      	str	r3, [r7, #0]
 8000852:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000854:	bf00      	nop
 8000856:	4b31      	ldr	r3, [pc, #196]	; (800091c <SystemClock_Config+0x120>)
 8000858:	699b      	ldr	r3, [r3, #24]
 800085a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800085e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000862:	d1f8      	bne.n	8000856 <SystemClock_Config+0x5a>

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8000864:	f007 fce2 	bl	800822c <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 8000868:	f007 f89a 	bl	80079a0 <HAL_GetREVID>
 800086c:	4b2c      	ldr	r3, [pc, #176]	; (8000920 <SystemClock_Config+0x124>)
 800086e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8000870:	4a2b      	ldr	r2, [pc, #172]	; (8000920 <SystemClock_Config+0x124>)
 8000872:	f023 0318 	bic.w	r3, r3, #24
 8000876:	6713      	str	r3, [r2, #112]	; 0x70

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI
 8000878:	230f      	movs	r3, #15
 800087a:	627b      	str	r3, [r7, #36]	; 0x24
                              |RCC_OSCILLATORTYPE_HSE|RCC_OSCILLATORTYPE_LSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800087c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000880:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8000882:	2301      	movs	r3, #1
 8000884:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 8000886:	2301      	movs	r3, #1
 8000888:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800088a:	2340      	movs	r3, #64	; 0x40
 800088c:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 800088e:	2301      	movs	r3, #1
 8000890:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000892:	2302      	movs	r3, #2
 8000894:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000896:	2302      	movs	r3, #2
 8000898:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 5;
 800089a:	2305      	movs	r3, #5
 800089c:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 48;
 800089e:	2330      	movs	r3, #48	; 0x30
 80008a0:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 80008a2:	2302      	movs	r3, #2
 80008a4:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 3;
 80008a6:	2303      	movs	r3, #3
 80008a8:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 80008aa:	2302      	movs	r3, #2
 80008ac:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_2;
 80008ae:	2308      	movs	r3, #8
 80008b0:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 80008b2:	2300      	movs	r3, #0
 80008b4:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 80008b6:	2300      	movs	r3, #0
 80008b8:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80008ba:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80008be:	4618      	mov	r0, r3
 80008c0:	f007 fd2e 	bl	8008320 <HAL_RCC_OscConfig>
 80008c4:	4603      	mov	r3, r0
 80008c6:	2b00      	cmp	r3, #0
 80008c8:	d001      	beq.n	80008ce <SystemClock_Config+0xd2>
  {
    Error_Handler();
 80008ca:	f000 fa50 	bl	8000d6e <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80008ce:	233f      	movs	r3, #63	; 0x3f
 80008d0:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80008d2:	2303      	movs	r3, #3
 80008d4:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 80008d6:	2300      	movs	r3, #0
 80008d8:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 80008da:	2300      	movs	r3, #0
 80008dc:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV1;
 80008de:	2300      	movs	r3, #0
 80008e0:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV1;
 80008e2:	2300      	movs	r3, #0
 80008e4:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV1;
 80008e6:	2300      	movs	r3, #0
 80008e8:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV1;
 80008ea:	2300      	movs	r3, #0
 80008ec:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80008ee:	1d3b      	adds	r3, r7, #4
 80008f0:	2101      	movs	r1, #1
 80008f2:	4618      	mov	r0, r3
 80008f4:	f008 f96e 	bl	8008bd4 <HAL_RCC_ClockConfig>
 80008f8:	4603      	mov	r3, r0
 80008fa:	2b00      	cmp	r3, #0
 80008fc:	d001      	beq.n	8000902 <SystemClock_Config+0x106>
  {
    Error_Handler();
 80008fe:	f000 fa36 	bl	8000d6e <Error_Handler>
  }
  HAL_RCC_MCOConfig(RCC_MCO1, RCC_MCO1SOURCE_HSI, RCC_MCODIV_1);
 8000902:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8000906:	2100      	movs	r1, #0
 8000908:	2000      	movs	r0, #0
 800090a:	f008 fb19 	bl	8008f40 <HAL_RCC_MCOConfig>
}
 800090e:	bf00      	nop
 8000910:	3770      	adds	r7, #112	; 0x70
 8000912:	46bd      	mov	sp, r7
 8000914:	bd80      	pop	{r7, pc}
 8000916:	bf00      	nop
 8000918:	58000400 	.word	0x58000400
 800091c:	58024800 	.word	0x58024800
 8000920:	58024400 	.word	0x58024400

08000924 <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 8000924:	b580      	push	{r7, lr}
 8000926:	b0b2      	sub	sp, #200	; 0xc8
 8000928:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800092a:	463b      	mov	r3, r7
 800092c:	22c8      	movs	r2, #200	; 0xc8
 800092e:	2100      	movs	r1, #0
 8000930:	4618      	mov	r0, r3
 8000932:	f00f fb4e 	bl	800ffd2 <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_ADC|RCC_PERIPHCLK_UART8
 8000936:	4a15      	ldr	r2, [pc, #84]	; (800098c <PeriphCommonClock_Config+0x68>)
 8000938:	f04f 0300 	mov.w	r3, #0
 800093c:	e9c7 2300 	strd	r2, r3, [r7]
                              |RCC_PERIPHCLK_USART1;
  PeriphClkInitStruct.PLL2.PLL2M = 2;
 8000940:	2302      	movs	r3, #2
 8000942:	60bb      	str	r3, [r7, #8]
  PeriphClkInitStruct.PLL2.PLL2N = 12;
 8000944:	230c      	movs	r3, #12
 8000946:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.PLL2.PLL2P = 2;
 8000948:	2302      	movs	r3, #2
 800094a:	613b      	str	r3, [r7, #16]
  PeriphClkInitStruct.PLL2.PLL2Q = 2;
 800094c:	2302      	movs	r3, #2
 800094e:	617b      	str	r3, [r7, #20]
  PeriphClkInitStruct.PLL2.PLL2R = 5;
 8000950:	2305      	movs	r3, #5
 8000952:	61bb      	str	r3, [r7, #24]
  PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_3;
 8000954:	23c0      	movs	r3, #192	; 0xc0
 8000956:	61fb      	str	r3, [r7, #28]
  PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOMEDIUM;
 8000958:	2320      	movs	r3, #32
 800095a:	623b      	str	r3, [r7, #32]
  PeriphClkInitStruct.PLL2.PLL2FRACN = 0;
 800095c:	2300      	movs	r3, #0
 800095e:	627b      	str	r3, [r7, #36]	; 0x24
  PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_PLL2;
 8000960:	2301      	movs	r3, #1
 8000962:	67fb      	str	r3, [r7, #124]	; 0x7c
  PeriphClkInitStruct.Usart16ClockSelection = RCC_USART16CLKSOURCE_PLL2;
 8000964:	2308      	movs	r3, #8
 8000966:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  PeriphClkInitStruct.AdcClockSelection = RCC_ADCCLKSOURCE_PLL2;
 800096a:	2300      	movs	r3, #0
 800096c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000970:	463b      	mov	r3, r7
 8000972:	4618      	mov	r0, r3
 8000974:	f008 fd24 	bl	80093c0 <HAL_RCCEx_PeriphCLKConfig>
 8000978:	4603      	mov	r3, r0
 800097a:	2b00      	cmp	r3, #0
 800097c:	d001      	beq.n	8000982 <PeriphCommonClock_Config+0x5e>
  {
    Error_Handler();
 800097e:	f000 f9f6 	bl	8000d6e <Error_Handler>
  }
}
 8000982:	bf00      	nop
 8000984:	37c8      	adds	r7, #200	; 0xc8
 8000986:	46bd      	mov	sp, r7
 8000988:	bd80      	pop	{r7, pc}
 800098a:	bf00      	nop
 800098c:	00080003 	.word	0x00080003

08000990 <MX_SDMMC1_SD_Init>:
  * @brief SDMMC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SDMMC1_SD_Init(void)
{
 8000990:	b580      	push	{r7, lr}
 8000992:	af00      	add	r7, sp, #0
  /* USER CODE END SDMMC1_Init 0 */

  /* USER CODE BEGIN SDMMC1_Init 1 */

  /* USER CODE END SDMMC1_Init 1 */
  hsd1.Instance = SDMMC1;
 8000994:	4b0e      	ldr	r3, [pc, #56]	; (80009d0 <MX_SDMMC1_SD_Init+0x40>)
 8000996:	4a0f      	ldr	r2, [pc, #60]	; (80009d4 <MX_SDMMC1_SD_Init+0x44>)
 8000998:	601a      	str	r2, [r3, #0]
  hsd1.Init.ClockEdge = SDMMC_CLOCK_EDGE_RISING;
 800099a:	4b0d      	ldr	r3, [pc, #52]	; (80009d0 <MX_SDMMC1_SD_Init+0x40>)
 800099c:	2200      	movs	r2, #0
 800099e:	605a      	str	r2, [r3, #4]
  hsd1.Init.ClockPowerSave = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 80009a0:	4b0b      	ldr	r3, [pc, #44]	; (80009d0 <MX_SDMMC1_SD_Init+0x40>)
 80009a2:	2200      	movs	r2, #0
 80009a4:	609a      	str	r2, [r3, #8]
  hsd1.Init.BusWide = SDMMC_BUS_WIDE_4B;
 80009a6:	4b0a      	ldr	r3, [pc, #40]	; (80009d0 <MX_SDMMC1_SD_Init+0x40>)
 80009a8:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80009ac:	60da      	str	r2, [r3, #12]
  hsd1.Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 80009ae:	4b08      	ldr	r3, [pc, #32]	; (80009d0 <MX_SDMMC1_SD_Init+0x40>)
 80009b0:	2200      	movs	r2, #0
 80009b2:	611a      	str	r2, [r3, #16]
  hsd1.Init.ClockDiv = 0;
 80009b4:	4b06      	ldr	r3, [pc, #24]	; (80009d0 <MX_SDMMC1_SD_Init+0x40>)
 80009b6:	2200      	movs	r2, #0
 80009b8:	615a      	str	r2, [r3, #20]
  if (HAL_SD_Init(&hsd1) != HAL_OK)
 80009ba:	4805      	ldr	r0, [pc, #20]	; (80009d0 <MX_SDMMC1_SD_Init+0x40>)
 80009bc:	f00b fa3e 	bl	800be3c <HAL_SD_Init>
 80009c0:	4603      	mov	r3, r0
 80009c2:	2b00      	cmp	r3, #0
 80009c4:	d001      	beq.n	80009ca <MX_SDMMC1_SD_Init+0x3a>
  {
    Error_Handler();
 80009c6:	f000 f9d2 	bl	8000d6e <Error_Handler>
  }
  /* USER CODE BEGIN SDMMC1_Init 2 */

  /* USER CODE END SDMMC1_Init 2 */

}
 80009ca:	bf00      	nop
 80009cc:	bd80      	pop	{r7, pc}
 80009ce:	bf00      	nop
 80009d0:	2400005c 	.word	0x2400005c
 80009d4:	52007000 	.word	0x52007000

080009d8 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80009d8:	b580      	push	{r7, lr}
 80009da:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80009dc:	4b22      	ldr	r3, [pc, #136]	; (8000a68 <MX_USART1_UART_Init+0x90>)
 80009de:	4a23      	ldr	r2, [pc, #140]	; (8000a6c <MX_USART1_UART_Init+0x94>)
 80009e0:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80009e2:	4b21      	ldr	r3, [pc, #132]	; (8000a68 <MX_USART1_UART_Init+0x90>)
 80009e4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80009e8:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80009ea:	4b1f      	ldr	r3, [pc, #124]	; (8000a68 <MX_USART1_UART_Init+0x90>)
 80009ec:	2200      	movs	r2, #0
 80009ee:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80009f0:	4b1d      	ldr	r3, [pc, #116]	; (8000a68 <MX_USART1_UART_Init+0x90>)
 80009f2:	2200      	movs	r2, #0
 80009f4:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80009f6:	4b1c      	ldr	r3, [pc, #112]	; (8000a68 <MX_USART1_UART_Init+0x90>)
 80009f8:	2200      	movs	r2, #0
 80009fa:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80009fc:	4b1a      	ldr	r3, [pc, #104]	; (8000a68 <MX_USART1_UART_Init+0x90>)
 80009fe:	220c      	movs	r2, #12
 8000a00:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000a02:	4b19      	ldr	r3, [pc, #100]	; (8000a68 <MX_USART1_UART_Init+0x90>)
 8000a04:	2200      	movs	r2, #0
 8000a06:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000a08:	4b17      	ldr	r3, [pc, #92]	; (8000a68 <MX_USART1_UART_Init+0x90>)
 8000a0a:	2200      	movs	r2, #0
 8000a0c:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000a0e:	4b16      	ldr	r3, [pc, #88]	; (8000a68 <MX_USART1_UART_Init+0x90>)
 8000a10:	2200      	movs	r2, #0
 8000a12:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000a14:	4b14      	ldr	r3, [pc, #80]	; (8000a68 <MX_USART1_UART_Init+0x90>)
 8000a16:	2200      	movs	r2, #0
 8000a18:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000a1a:	4b13      	ldr	r3, [pc, #76]	; (8000a68 <MX_USART1_UART_Init+0x90>)
 8000a1c:	2200      	movs	r2, #0
 8000a1e:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000a20:	4811      	ldr	r0, [pc, #68]	; (8000a68 <MX_USART1_UART_Init+0x90>)
 8000a22:	f00c fe6f 	bl	800d704 <HAL_UART_Init>
 8000a26:	4603      	mov	r3, r0
 8000a28:	2b00      	cmp	r3, #0
 8000a2a:	d001      	beq.n	8000a30 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 8000a2c:	f000 f99f 	bl	8000d6e <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000a30:	2100      	movs	r1, #0
 8000a32:	480d      	ldr	r0, [pc, #52]	; (8000a68 <MX_USART1_UART_Init+0x90>)
 8000a34:	f00d fe71 	bl	800e71a <HAL_UARTEx_SetTxFifoThreshold>
 8000a38:	4603      	mov	r3, r0
 8000a3a:	2b00      	cmp	r3, #0
 8000a3c:	d001      	beq.n	8000a42 <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 8000a3e:	f000 f996 	bl	8000d6e <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000a42:	2100      	movs	r1, #0
 8000a44:	4808      	ldr	r0, [pc, #32]	; (8000a68 <MX_USART1_UART_Init+0x90>)
 8000a46:	f00d fea6 	bl	800e796 <HAL_UARTEx_SetRxFifoThreshold>
 8000a4a:	4603      	mov	r3, r0
 8000a4c:	2b00      	cmp	r3, #0
 8000a4e:	d001      	beq.n	8000a54 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 8000a50:	f000 f98d 	bl	8000d6e <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8000a54:	4804      	ldr	r0, [pc, #16]	; (8000a68 <MX_USART1_UART_Init+0x90>)
 8000a56:	f00d fe27 	bl	800e6a8 <HAL_UARTEx_DisableFifoMode>
 8000a5a:	4603      	mov	r3, r0
 8000a5c:	2b00      	cmp	r3, #0
 8000a5e:	d001      	beq.n	8000a64 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8000a60:	f000 f985 	bl	8000d6e <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000a64:	bf00      	nop
 8000a66:	bd80      	pop	{r7, pc}
 8000a68:	240000d8 	.word	0x240000d8
 8000a6c:	40011000 	.word	0x40011000

08000a70 <MX_USB_OTG_HS_PCD_Init>:
  * @brief USB_OTG_HS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_HS_PCD_Init(void)
{
 8000a70:	b580      	push	{r7, lr}
 8000a72:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_HS_Init 0 */

  /* USER CODE BEGIN USB_OTG_HS_Init 1 */

  /* USER CODE END USB_OTG_HS_Init 1 */
  hpcd_USB_OTG_HS.Instance = USB_OTG_HS;
 8000a74:	4b15      	ldr	r3, [pc, #84]	; (8000acc <MX_USB_OTG_HS_PCD_Init+0x5c>)
 8000a76:	4a16      	ldr	r2, [pc, #88]	; (8000ad0 <MX_USB_OTG_HS_PCD_Init+0x60>)
 8000a78:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_HS.Init.dev_endpoints = 9;
 8000a7a:	4b14      	ldr	r3, [pc, #80]	; (8000acc <MX_USB_OTG_HS_PCD_Init+0x5c>)
 8000a7c:	2209      	movs	r2, #9
 8000a7e:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_HS.Init.speed = PCD_SPEED_HIGH;
 8000a80:	4b12      	ldr	r3, [pc, #72]	; (8000acc <MX_USB_OTG_HS_PCD_Init+0x5c>)
 8000a82:	2200      	movs	r2, #0
 8000a84:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_HS.Init.dma_enable = DISABLE;
 8000a86:	4b11      	ldr	r3, [pc, #68]	; (8000acc <MX_USB_OTG_HS_PCD_Init+0x5c>)
 8000a88:	2200      	movs	r2, #0
 8000a8a:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_HS.Init.phy_itface = USB_OTG_ULPI_PHY;
 8000a8c:	4b0f      	ldr	r3, [pc, #60]	; (8000acc <MX_USB_OTG_HS_PCD_Init+0x5c>)
 8000a8e:	2201      	movs	r2, #1
 8000a90:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_HS.Init.Sof_enable = DISABLE;
 8000a92:	4b0e      	ldr	r3, [pc, #56]	; (8000acc <MX_USB_OTG_HS_PCD_Init+0x5c>)
 8000a94:	2200      	movs	r2, #0
 8000a96:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_HS.Init.low_power_enable = DISABLE;
 8000a98:	4b0c      	ldr	r3, [pc, #48]	; (8000acc <MX_USB_OTG_HS_PCD_Init+0x5c>)
 8000a9a:	2200      	movs	r2, #0
 8000a9c:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_HS.Init.lpm_enable = DISABLE;
 8000a9e:	4b0b      	ldr	r3, [pc, #44]	; (8000acc <MX_USB_OTG_HS_PCD_Init+0x5c>)
 8000aa0:	2200      	movs	r2, #0
 8000aa2:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_HS.Init.vbus_sensing_enable = DISABLE;
 8000aa4:	4b09      	ldr	r3, [pc, #36]	; (8000acc <MX_USB_OTG_HS_PCD_Init+0x5c>)
 8000aa6:	2200      	movs	r2, #0
 8000aa8:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_HS.Init.use_dedicated_ep1 = DISABLE;
 8000aaa:	4b08      	ldr	r3, [pc, #32]	; (8000acc <MX_USB_OTG_HS_PCD_Init+0x5c>)
 8000aac:	2200      	movs	r2, #0
 8000aae:	631a      	str	r2, [r3, #48]	; 0x30
  hpcd_USB_OTG_HS.Init.use_external_vbus = DISABLE;
 8000ab0:	4b06      	ldr	r3, [pc, #24]	; (8000acc <MX_USB_OTG_HS_PCD_Init+0x5c>)
 8000ab2:	2200      	movs	r2, #0
 8000ab4:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_PCD_Init(&hpcd_USB_OTG_HS) != HAL_OK)
 8000ab6:	4805      	ldr	r0, [pc, #20]	; (8000acc <MX_USB_OTG_HS_PCD_Init+0x5c>)
 8000ab8:	f007 fa6f 	bl	8007f9a <HAL_PCD_Init>
 8000abc:	4603      	mov	r3, r0
 8000abe:	2b00      	cmp	r3, #0
 8000ac0:	d001      	beq.n	8000ac6 <MX_USB_OTG_HS_PCD_Init+0x56>
  {
    Error_Handler();
 8000ac2:	f000 f954 	bl	8000d6e <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_HS_Init 2 */

  /* USER CODE END USB_OTG_HS_Init 2 */

}
 8000ac6:	bf00      	nop
 8000ac8:	bd80      	pop	{r7, pc}
 8000aca:	bf00      	nop
 8000acc:	2400016c 	.word	0x2400016c
 8000ad0:	40040000 	.word	0x40040000

08000ad4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000ad4:	b580      	push	{r7, lr}
 8000ad6:	b08c      	sub	sp, #48	; 0x30
 8000ad8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ada:	f107 031c 	add.w	r3, r7, #28
 8000ade:	2200      	movs	r2, #0
 8000ae0:	601a      	str	r2, [r3, #0]
 8000ae2:	605a      	str	r2, [r3, #4]
 8000ae4:	609a      	str	r2, [r3, #8]
 8000ae6:	60da      	str	r2, [r3, #12]
 8000ae8:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000aea:	4b48      	ldr	r3, [pc, #288]	; (8000c0c <MX_GPIO_Init+0x138>)
 8000aec:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000af0:	4a46      	ldr	r2, [pc, #280]	; (8000c0c <MX_GPIO_Init+0x138>)
 8000af2:	f043 0302 	orr.w	r3, r3, #2
 8000af6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000afa:	4b44      	ldr	r3, [pc, #272]	; (8000c0c <MX_GPIO_Init+0x138>)
 8000afc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000b00:	f003 0302 	and.w	r3, r3, #2
 8000b04:	61bb      	str	r3, [r7, #24]
 8000b06:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000b08:	4b40      	ldr	r3, [pc, #256]	; (8000c0c <MX_GPIO_Init+0x138>)
 8000b0a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000b0e:	4a3f      	ldr	r2, [pc, #252]	; (8000c0c <MX_GPIO_Init+0x138>)
 8000b10:	f043 0304 	orr.w	r3, r3, #4
 8000b14:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000b18:	4b3c      	ldr	r3, [pc, #240]	; (8000c0c <MX_GPIO_Init+0x138>)
 8000b1a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000b1e:	f003 0304 	and.w	r3, r3, #4
 8000b22:	617b      	str	r3, [r7, #20]
 8000b24:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000b26:	4b39      	ldr	r3, [pc, #228]	; (8000c0c <MX_GPIO_Init+0x138>)
 8000b28:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000b2c:	4a37      	ldr	r2, [pc, #220]	; (8000c0c <MX_GPIO_Init+0x138>)
 8000b2e:	f043 0308 	orr.w	r3, r3, #8
 8000b32:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000b36:	4b35      	ldr	r3, [pc, #212]	; (8000c0c <MX_GPIO_Init+0x138>)
 8000b38:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000b3c:	f003 0308 	and.w	r3, r3, #8
 8000b40:	613b      	str	r3, [r7, #16]
 8000b42:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b44:	4b31      	ldr	r3, [pc, #196]	; (8000c0c <MX_GPIO_Init+0x138>)
 8000b46:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000b4a:	4a30      	ldr	r2, [pc, #192]	; (8000c0c <MX_GPIO_Init+0x138>)
 8000b4c:	f043 0301 	orr.w	r3, r3, #1
 8000b50:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000b54:	4b2d      	ldr	r3, [pc, #180]	; (8000c0c <MX_GPIO_Init+0x138>)
 8000b56:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000b5a:	f003 0301 	and.w	r3, r3, #1
 8000b5e:	60fb      	str	r3, [r7, #12]
 8000b60:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOI_CLK_ENABLE();
 8000b62:	4b2a      	ldr	r3, [pc, #168]	; (8000c0c <MX_GPIO_Init+0x138>)
 8000b64:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000b68:	4a28      	ldr	r2, [pc, #160]	; (8000c0c <MX_GPIO_Init+0x138>)
 8000b6a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000b6e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000b72:	4b26      	ldr	r3, [pc, #152]	; (8000c0c <MX_GPIO_Init+0x138>)
 8000b74:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000b78:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000b7c:	60bb      	str	r3, [r7, #8]
 8000b7e:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000b80:	4b22      	ldr	r3, [pc, #136]	; (8000c0c <MX_GPIO_Init+0x138>)
 8000b82:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000b86:	4a21      	ldr	r2, [pc, #132]	; (8000c0c <MX_GPIO_Init+0x138>)
 8000b88:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000b8c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000b90:	4b1e      	ldr	r3, [pc, #120]	; (8000c0c <MX_GPIO_Init+0x138>)
 8000b92:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000b96:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000b9a:	607b      	str	r3, [r7, #4]
 8000b9c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOI, LED1_Pin|LED2_Pin|LED3_Pin|LED4_Pin, GPIO_PIN_RESET);
 8000b9e:	2200      	movs	r2, #0
 8000ba0:	f44f 4170 	mov.w	r1, #61440	; 0xf000
 8000ba4:	481a      	ldr	r0, [pc, #104]	; (8000c10 <MX_GPIO_Init+0x13c>)
 8000ba6:	f007 f9df 	bl	8007f68 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : uSD_Detect_Pin */
  GPIO_InitStruct.Pin = uSD_Detect_Pin;
 8000baa:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000bae:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000bb0:	2300      	movs	r3, #0
 8000bb2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bb4:	2300      	movs	r3, #0
 8000bb6:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(uSD_Detect_GPIO_Port, &GPIO_InitStruct);
 8000bb8:	f107 031c 	add.w	r3, r7, #28
 8000bbc:	4619      	mov	r1, r3
 8000bbe:	4814      	ldr	r0, [pc, #80]	; (8000c10 <MX_GPIO_Init+0x13c>)
 8000bc0:	f007 f80a 	bl	8007bd8 <HAL_GPIO_Init>

  /*Configure GPIO pin : CEC_CK_MCO1_Pin */
  GPIO_InitStruct.Pin = CEC_CK_MCO1_Pin;
 8000bc4:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000bc8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bca:	2302      	movs	r3, #2
 8000bcc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bce:	2300      	movs	r3, #0
 8000bd0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bd2:	2300      	movs	r3, #0
 8000bd4:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 8000bd6:	2300      	movs	r3, #0
 8000bd8:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(CEC_CK_MCO1_GPIO_Port, &GPIO_InitStruct);
 8000bda:	f107 031c 	add.w	r3, r7, #28
 8000bde:	4619      	mov	r1, r3
 8000be0:	480c      	ldr	r0, [pc, #48]	; (8000c14 <MX_GPIO_Init+0x140>)
 8000be2:	f006 fff9 	bl	8007bd8 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED1_Pin LED2_Pin LED3_Pin LED4_Pin */
  GPIO_InitStruct.Pin = LED1_Pin|LED2_Pin|LED3_Pin|LED4_Pin;
 8000be6:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 8000bea:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000bec:	2301      	movs	r3, #1
 8000bee:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bf0:	2300      	movs	r3, #0
 8000bf2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bf4:	2300      	movs	r3, #0
 8000bf6:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8000bf8:	f107 031c 	add.w	r3, r7, #28
 8000bfc:	4619      	mov	r1, r3
 8000bfe:	4804      	ldr	r0, [pc, #16]	; (8000c10 <MX_GPIO_Init+0x13c>)
 8000c00:	f006 ffea 	bl	8007bd8 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000c04:	bf00      	nop
 8000c06:	3730      	adds	r7, #48	; 0x30
 8000c08:	46bd      	mov	sp, r7
 8000c0a:	bd80      	pop	{r7, pc}
 8000c0c:	58024400 	.word	0x58024400
 8000c10:	58022000 	.word	0x58022000
 8000c14:	58020000 	.word	0x58020000

08000c18 <tud_mount_cb>:
//--------------------------------------------------------------------+
// Device callbacks
//--------------------------------------------------------------------+

// Invoked when device is mounted
void tud_mount_cb(void) {
 8000c18:	b480      	push	{r7}
 8000c1a:	af00      	add	r7, sp, #0
  blink_interval_ms = BLINK_MOUNTED;
 8000c1c:	4b04      	ldr	r3, [pc, #16]	; (8000c30 <tud_mount_cb+0x18>)
 8000c1e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000c22:	601a      	str	r2, [r3, #0]
}
 8000c24:	bf00      	nop
 8000c26:	46bd      	mov	sp, r7
 8000c28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c2c:	4770      	bx	lr
 8000c2e:	bf00      	nop
 8000c30:	24000008 	.word	0x24000008

08000c34 <tud_umount_cb>:

// Invoked when device is unmounted
void tud_umount_cb(void) {
 8000c34:	b480      	push	{r7}
 8000c36:	af00      	add	r7, sp, #0
  blink_interval_ms = BLINK_NOT_MOUNTED;
 8000c38:	4b04      	ldr	r3, [pc, #16]	; (8000c4c <tud_umount_cb+0x18>)
 8000c3a:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8000c3e:	601a      	str	r2, [r3, #0]
}
 8000c40:	bf00      	nop
 8000c42:	46bd      	mov	sp, r7
 8000c44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c48:	4770      	bx	lr
 8000c4a:	bf00      	nop
 8000c4c:	24000008 	.word	0x24000008

08000c50 <tud_suspend_cb>:

// Invoked when usb bus is suspended
// remote_wakeup_en : if host allow us  to perform remote wakeup
// Within 7ms, device must draw an average of current less than 2.5 mA from bus
void tud_suspend_cb(bool remote_wakeup_en) {
 8000c50:	b480      	push	{r7}
 8000c52:	b083      	sub	sp, #12
 8000c54:	af00      	add	r7, sp, #0
 8000c56:	4603      	mov	r3, r0
 8000c58:	71fb      	strb	r3, [r7, #7]
  (void) remote_wakeup_en;
  blink_interval_ms = BLINK_SUSPENDED;
 8000c5a:	4b04      	ldr	r3, [pc, #16]	; (8000c6c <tud_suspend_cb+0x1c>)
 8000c5c:	2264      	movs	r2, #100	; 0x64
 8000c5e:	601a      	str	r2, [r3, #0]
}
 8000c60:	bf00      	nop
 8000c62:	370c      	adds	r7, #12
 8000c64:	46bd      	mov	sp, r7
 8000c66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c6a:	4770      	bx	lr
 8000c6c:	24000008 	.word	0x24000008

08000c70 <tud_resume_cb>:

// Invoked when usb bus is resumed
void tud_resume_cb(void) {
 8000c70:	b580      	push	{r7, lr}
 8000c72:	af00      	add	r7, sp, #0
  blink_interval_ms = tud_mounted() ? BLINK_MOUNTED : BLINK_NOT_MOUNTED;
 8000c74:	f003 f984 	bl	8003f80 <tud_mounted>
 8000c78:	4603      	mov	r3, r0
 8000c7a:	2b00      	cmp	r3, #0
 8000c7c:	d002      	beq.n	8000c84 <tud_resume_cb+0x14>
 8000c7e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000c82:	e001      	b.n	8000c88 <tud_resume_cb+0x18>
 8000c84:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8000c88:	4a01      	ldr	r2, [pc, #4]	; (8000c90 <tud_resume_cb+0x20>)
 8000c8a:	6013      	str	r3, [r2, #0]
}
 8000c8c:	bf00      	nop
 8000c8e:	bd80      	pop	{r7, pc}
 8000c90:	24000008 	.word	0x24000008

08000c94 <cdc_task>:

//--------------------------------------------------------------------+
// USB CDC
//--------------------------------------------------------------------+
void cdc_task(void) {
 8000c94:	b580      	push	{r7, lr}
 8000c96:	b092      	sub	sp, #72	; 0x48
 8000c98:	af00      	add	r7, sp, #0
  // connected() check for DTR bit
  // Most but not all terminal client set this when making connection
  // if ( tud_cdc_connected() )
  {
    // connected and there are data available
    if (tud_cdc_available()) {
 8000c9a:	f7ff fd39 	bl	8000710 <tud_cdc_available>
 8000c9e:	4603      	mov	r3, r0
 8000ca0:	2b00      	cmp	r3, #0
 8000ca2:	d00c      	beq.n	8000cbe <cdc_task+0x2a>
      // read data
      char buf[64];
      uint32_t count = tud_cdc_read(buf, sizeof(buf));
 8000ca4:	1d3b      	adds	r3, r7, #4
 8000ca6:	2140      	movs	r1, #64	; 0x40
 8000ca8:	4618      	mov	r0, r3
 8000caa:	f7ff fd39 	bl	8000720 <tud_cdc_read>
 8000cae:	6478      	str	r0, [r7, #68]	; 0x44

      // Echo back
      // Note: Skip echo by commenting out write() and write_flush()
      // for throughput test e.g
      //    $ dd if=/dev/zero of=/dev/ttyACM0 count=10000
      tud_cdc_write(buf, count);
 8000cb0:	1d3b      	adds	r3, r7, #4
 8000cb2:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8000cb4:	4618      	mov	r0, r3
 8000cb6:	f7ff fd42 	bl	800073e <tud_cdc_write>
      tud_cdc_write_flush();
 8000cba:	f7ff fd4f 	bl	800075c <tud_cdc_write_flush>
    }
  }
}
 8000cbe:	bf00      	nop
 8000cc0:	3748      	adds	r7, #72	; 0x48
 8000cc2:	46bd      	mov	sp, r7
 8000cc4:	bd80      	pop	{r7, pc}

08000cc6 <tud_cdc_line_state_cb>:

// Invoked when cdc when line state changed e.g connected/disconnected
void tud_cdc_line_state_cb(uint8_t itf, bool dtr, bool rts) {
 8000cc6:	b480      	push	{r7}
 8000cc8:	b083      	sub	sp, #12
 8000cca:	af00      	add	r7, sp, #0
 8000ccc:	4603      	mov	r3, r0
 8000cce:	71fb      	strb	r3, [r7, #7]
 8000cd0:	460b      	mov	r3, r1
 8000cd2:	71bb      	strb	r3, [r7, #6]
 8000cd4:	4613      	mov	r3, r2
 8000cd6:	717b      	strb	r3, [r7, #5]
  if (dtr) {
    // Terminal connected
  } else {
    // Terminal disconnected
  }
}
 8000cd8:	bf00      	nop
 8000cda:	370c      	adds	r7, #12
 8000cdc:	46bd      	mov	sp, r7
 8000cde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ce2:	4770      	bx	lr

08000ce4 <tud_cdc_rx_cb>:

// Invoked when CDC interface received data from host
void tud_cdc_rx_cb(uint8_t itf) {
 8000ce4:	b480      	push	{r7}
 8000ce6:	b083      	sub	sp, #12
 8000ce8:	af00      	add	r7, sp, #0
 8000cea:	4603      	mov	r3, r0
 8000cec:	71fb      	strb	r3, [r7, #7]
  (void) itf;
}
 8000cee:	bf00      	nop
 8000cf0:	370c      	adds	r7, #12
 8000cf2:	46bd      	mov	sp, r7
 8000cf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cf8:	4770      	bx	lr
	...

08000cfc <led_blinking_task>:


//--------------------------------------------------------------------+
// BLINKING TASK
//--------------------------------------------------------------------+
void led_blinking_task(void) {
 8000cfc:	b580      	push	{r7, lr}
 8000cfe:	af00      	add	r7, sp, #0
  static uint32_t start_ms = 0;
  static bool led_state = false;

  // Blink every interval ms
  if (millis() - start_ms < blink_interval_ms) return; // not enough time
 8000d00:	f000 f82e 	bl	8000d60 <millis>
 8000d04:	4602      	mov	r2, r0
 8000d06:	4b12      	ldr	r3, [pc, #72]	; (8000d50 <led_blinking_task+0x54>)
 8000d08:	681b      	ldr	r3, [r3, #0]
 8000d0a:	1ad2      	subs	r2, r2, r3
 8000d0c:	4b11      	ldr	r3, [pc, #68]	; (8000d54 <led_blinking_task+0x58>)
 8000d0e:	681b      	ldr	r3, [r3, #0]
 8000d10:	429a      	cmp	r2, r3
 8000d12:	d31a      	bcc.n	8000d4a <led_blinking_task+0x4e>
  start_ms += blink_interval_ms;
 8000d14:	4b0e      	ldr	r3, [pc, #56]	; (8000d50 <led_blinking_task+0x54>)
 8000d16:	681a      	ldr	r2, [r3, #0]
 8000d18:	4b0e      	ldr	r3, [pc, #56]	; (8000d54 <led_blinking_task+0x58>)
 8000d1a:	681b      	ldr	r3, [r3, #0]
 8000d1c:	4413      	add	r3, r2
 8000d1e:	4a0c      	ldr	r2, [pc, #48]	; (8000d50 <led_blinking_task+0x54>)
 8000d20:	6013      	str	r3, [r2, #0]

  HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, led_state);
 8000d22:	4b0d      	ldr	r3, [pc, #52]	; (8000d58 <led_blinking_task+0x5c>)
 8000d24:	781b      	ldrb	r3, [r3, #0]
 8000d26:	461a      	mov	r2, r3
 8000d28:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000d2c:	480b      	ldr	r0, [pc, #44]	; (8000d5c <led_blinking_task+0x60>)
 8000d2e:	f007 f91b 	bl	8007f68 <HAL_GPIO_WritePin>
  led_state = 1 - led_state; // toggle
 8000d32:	4b09      	ldr	r3, [pc, #36]	; (8000d58 <led_blinking_task+0x5c>)
 8000d34:	781b      	ldrb	r3, [r3, #0]
 8000d36:	f1c3 0301 	rsb	r3, r3, #1
 8000d3a:	2b00      	cmp	r3, #0
 8000d3c:	bf14      	ite	ne
 8000d3e:	2301      	movne	r3, #1
 8000d40:	2300      	moveq	r3, #0
 8000d42:	b2da      	uxtb	r2, r3
 8000d44:	4b04      	ldr	r3, [pc, #16]	; (8000d58 <led_blinking_task+0x5c>)
 8000d46:	701a      	strb	r2, [r3, #0]
 8000d48:	e000      	b.n	8000d4c <led_blinking_task+0x50>
  if (millis() - start_ms < blink_interval_ms) return; // not enough time
 8000d4a:	bf00      	nop
}
 8000d4c:	bd80      	pop	{r7, pc}
 8000d4e:	bf00      	nop
 8000d50:	24000678 	.word	0x24000678
 8000d54:	24000008 	.word	0x24000008
 8000d58:	2400067c 	.word	0x2400067c
 8000d5c:	58022000 	.word	0x58022000

08000d60 <millis>:

static uint32_t millis(void)
{
 8000d60:	b580      	push	{r7, lr}
 8000d62:	af00      	add	r7, sp, #0
	return HAL_GetTick();
 8000d64:	f006 fdec 	bl	8007940 <HAL_GetTick>
 8000d68:	4603      	mov	r3, r0
}
 8000d6a:	4618      	mov	r0, r3
 8000d6c:	bd80      	pop	{r7, pc}

08000d6e <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000d6e:	b480      	push	{r7}
 8000d70:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000d72:	b672      	cpsid	i
}
 8000d74:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000d76:	e7fe      	b.n	8000d76 <Error_Handler+0x8>

08000d78 <fatfs_init>:
#define DISK_BLOCK_SIZE 512

FRESULT res;


void fatfs_init(void) {
 8000d78:	b580      	push	{r7, lr}
 8000d7a:	af00      	add	r7, sp, #0
    // Close the file, as it was just a test
    f_close(&SDFile);

    ejected = false;*/

	if(SD_Driver.disk_initialize(0) != 0){
 8000d7c:	4b18      	ldr	r3, [pc, #96]	; (8000de0 <fatfs_init+0x68>)
 8000d7e:	681b      	ldr	r3, [r3, #0]
 8000d80:	2000      	movs	r0, #0
 8000d82:	4798      	blx	r3
 8000d84:	4603      	mov	r3, r0
 8000d86:	2b00      	cmp	r3, #0
 8000d88:	d027      	beq.n	8000dda <fatfs_init+0x62>
		HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, 1);
 8000d8a:	2201      	movs	r2, #1
 8000d8c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000d90:	4814      	ldr	r0, [pc, #80]	; (8000de4 <fatfs_init+0x6c>)
 8000d92:	f007 f8e9 	bl	8007f68 <HAL_GPIO_WritePin>
		HAL_Delay(500);
 8000d96:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000d9a:	f006 fddd 	bl	8007958 <HAL_Delay>
		HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, 0);
 8000d9e:	2200      	movs	r2, #0
 8000da0:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000da4:	480f      	ldr	r0, [pc, #60]	; (8000de4 <fatfs_init+0x6c>)
 8000da6:	f007 f8df 	bl	8007f68 <HAL_GPIO_WritePin>
		HAL_Delay(500);
 8000daa:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000dae:	f006 fdd3 	bl	8007958 <HAL_Delay>
		HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, 1);
 8000db2:	2201      	movs	r2, #1
 8000db4:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000db8:	480a      	ldr	r0, [pc, #40]	; (8000de4 <fatfs_init+0x6c>)
 8000dba:	f007 f8d5 	bl	8007f68 <HAL_GPIO_WritePin>
		HAL_Delay(500);
 8000dbe:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000dc2:	f006 fdc9 	bl	8007958 <HAL_Delay>
		HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, 0);
 8000dc6:	2200      	movs	r2, #0
 8000dc8:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000dcc:	4805      	ldr	r0, [pc, #20]	; (8000de4 <fatfs_init+0x6c>)
 8000dce:	f007 f8cb 	bl	8007f68 <HAL_GPIO_WritePin>
		HAL_Delay(500);
 8000dd2:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000dd6:	f006 fdbf 	bl	8007958 <HAL_Delay>
	}

}
 8000dda:	bf00      	nop
 8000ddc:	bd80      	pop	{r7, pc}
 8000dde:	bf00      	nop
 8000de0:	08010214 	.word	0x08010214
 8000de4:	58022000 	.word	0x58022000

08000de8 <tud_msc_inquiry_cb>:

// Invoked when received SCSI_CMD_INQUIRY
// Application fill vendor id, product id and revision with string up to 8, 16, 4 characters respectively
void tud_msc_inquiry_cb(uint8_t lun, uint8_t vendor_id[8], uint8_t product_id[16], uint8_t product_rev[4])
{
 8000de8:	b580      	push	{r7, lr}
 8000dea:	b08a      	sub	sp, #40	; 0x28
 8000dec:	af00      	add	r7, sp, #0
 8000dee:	60b9      	str	r1, [r7, #8]
 8000df0:	607a      	str	r2, [r7, #4]
 8000df2:	603b      	str	r3, [r7, #0]
 8000df4:	4603      	mov	r3, r0
 8000df6:	73fb      	strb	r3, [r7, #15]
  (void) lun;

  const char vid[] = "TinyUSB";
 8000df8:	4a14      	ldr	r2, [pc, #80]	; (8000e4c <tud_msc_inquiry_cb+0x64>)
 8000dfa:	f107 0320 	add.w	r3, r7, #32
 8000dfe:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000e02:	e883 0003 	stmia.w	r3, {r0, r1}
  const char pid[] = "Frida";
 8000e06:	4a12      	ldr	r2, [pc, #72]	; (8000e50 <tud_msc_inquiry_cb+0x68>)
 8000e08:	f107 0318 	add.w	r3, r7, #24
 8000e0c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000e10:	6018      	str	r0, [r3, #0]
 8000e12:	3304      	adds	r3, #4
 8000e14:	8019      	strh	r1, [r3, #0]
  const char rev[] = "1.0";
 8000e16:	4b0f      	ldr	r3, [pc, #60]	; (8000e54 <tud_msc_inquiry_cb+0x6c>)
 8000e18:	617b      	str	r3, [r7, #20]

  memcpy(vendor_id  , vid, strlen(vid));
 8000e1a:	f107 0320 	add.w	r3, r7, #32
 8000e1e:	2207      	movs	r2, #7
 8000e20:	4619      	mov	r1, r3
 8000e22:	68b8      	ldr	r0, [r7, #8]
 8000e24:	f00f f902 	bl	801002c <memcpy>
  memcpy(product_id , pid, strlen(pid));
 8000e28:	f107 0318 	add.w	r3, r7, #24
 8000e2c:	2205      	movs	r2, #5
 8000e2e:	4619      	mov	r1, r3
 8000e30:	6878      	ldr	r0, [r7, #4]
 8000e32:	f00f f8fb 	bl	801002c <memcpy>
  memcpy(product_rev, rev, strlen(rev));
 8000e36:	f107 0314 	add.w	r3, r7, #20
 8000e3a:	2203      	movs	r2, #3
 8000e3c:	4619      	mov	r1, r3
 8000e3e:	6838      	ldr	r0, [r7, #0]
 8000e40:	f00f f8f4 	bl	801002c <memcpy>
}
 8000e44:	bf00      	nop
 8000e46:	3728      	adds	r7, #40	; 0x28
 8000e48:	46bd      	mov	sp, r7
 8000e4a:	bd80      	pop	{r7, pc}
 8000e4c:	08010060 	.word	0x08010060
 8000e50:	08010068 	.word	0x08010068
 8000e54:	00302e31 	.word	0x00302e31

08000e58 <tud_msc_test_unit_ready_cb>:

// Invoked when received Test Unit Ready command.
// return true allowing host to read/write this LUN e.g SD card inserted
bool tud_msc_test_unit_ready_cb(uint8_t lun)
{
 8000e58:	b580      	push	{r7, lr}
 8000e5a:	b082      	sub	sp, #8
 8000e5c:	af00      	add	r7, sp, #0
 8000e5e:	4603      	mov	r3, r0
 8000e60:	71fb      	strb	r3, [r7, #7]
  (void) lun;

  // RAM disk is ready until ejected
  if (ejected) {
 8000e62:	4b08      	ldr	r3, [pc, #32]	; (8000e84 <tud_msc_test_unit_ready_cb+0x2c>)
 8000e64:	781b      	ldrb	r3, [r3, #0]
 8000e66:	2b00      	cmp	r3, #0
 8000e68:	d007      	beq.n	8000e7a <tud_msc_test_unit_ready_cb+0x22>
    // Additional Sense 3A-00 is NOT_FOUND
    tud_msc_set_sense(lun, SCSI_SENSE_NOT_READY, 0x3a, 0x00);
 8000e6a:	79f8      	ldrb	r0, [r7, #7]
 8000e6c:	2300      	movs	r3, #0
 8000e6e:	223a      	movs	r2, #58	; 0x3a
 8000e70:	2102      	movs	r1, #2
 8000e72:	f001 f9b9 	bl	80021e8 <tud_msc_set_sense>
    return false;
 8000e76:	2300      	movs	r3, #0
 8000e78:	e000      	b.n	8000e7c <tud_msc_test_unit_ready_cb+0x24>
  }


  return true;
 8000e7a:	2301      	movs	r3, #1
}
 8000e7c:	4618      	mov	r0, r3
 8000e7e:	3708      	adds	r7, #8
 8000e80:	46bd      	mov	sp, r7
 8000e82:	bd80      	pop	{r7, pc}
 8000e84:	2400067d 	.word	0x2400067d

08000e88 <tud_msc_capacity_cb>:

// Invoked when received SCSI_CMD_READ_CAPACITY_10 and SCSI_CMD_READ_FORMAT_CAPACITY to determine the disk size
// Application update block count and block size
void tud_msc_capacity_cb(uint8_t lun, uint32_t* block_count, uint16_t* block_size) {
 8000e88:	b580      	push	{r7, lr}
 8000e8a:	b086      	sub	sp, #24
 8000e8c:	af00      	add	r7, sp, #0
 8000e8e:	4603      	mov	r3, r0
 8000e90:	60b9      	str	r1, [r7, #8]
 8000e92:	607a      	str	r2, [r7, #4]
 8000e94:	73fb      	strb	r3, [r7, #15]

	DRESULT res;

	res = SD_Driver.disk_ioctl(lun, GET_SECTOR_COUNT, block_count);
 8000e96:	4b0d      	ldr	r3, [pc, #52]	; (8000ecc <tud_msc_capacity_cb+0x44>)
 8000e98:	691b      	ldr	r3, [r3, #16]
 8000e9a:	7bf8      	ldrb	r0, [r7, #15]
 8000e9c:	68ba      	ldr	r2, [r7, #8]
 8000e9e:	2101      	movs	r1, #1
 8000ea0:	4798      	blx	r3
 8000ea2:	4603      	mov	r3, r0
 8000ea4:	75fb      	strb	r3, [r7, #23]
	if(res != RES_OK) return;
 8000ea6:	7dfb      	ldrb	r3, [r7, #23]
 8000ea8:	2b00      	cmp	r3, #0
 8000eaa:	d10a      	bne.n	8000ec2 <tud_msc_capacity_cb+0x3a>
    res = SD_Driver.disk_ioctl(lun, GET_SECTOR_SIZE, block_size);
 8000eac:	4b07      	ldr	r3, [pc, #28]	; (8000ecc <tud_msc_capacity_cb+0x44>)
 8000eae:	691b      	ldr	r3, [r3, #16]
 8000eb0:	7bf8      	ldrb	r0, [r7, #15]
 8000eb2:	687a      	ldr	r2, [r7, #4]
 8000eb4:	2102      	movs	r1, #2
 8000eb6:	4798      	blx	r3
 8000eb8:	4603      	mov	r3, r0
 8000eba:	75fb      	strb	r3, [r7, #23]
    if(res != RES_OK) return;
 8000ebc:	7dfb      	ldrb	r3, [r7, #23]
 8000ebe:	2b00      	cmp	r3, #0

    return;
 8000ec0:	e000      	b.n	8000ec4 <tud_msc_capacity_cb+0x3c>
	if(res != RES_OK) return;
 8000ec2:	bf00      	nop
}
 8000ec4:	3718      	adds	r7, #24
 8000ec6:	46bd      	mov	sp, r7
 8000ec8:	bd80      	pop	{r7, pc}
 8000eca:	bf00      	nop
 8000ecc:	08010214 	.word	0x08010214

08000ed0 <tud_msc_start_stop_cb>:

// Invoked when received Start Stop Unit command
// - Start = 0 : stopped power mode, if load_eject = 1 : unload disk storage
// - Start = 1 : active mode, if load_eject = 1 : load disk storage
bool tud_msc_start_stop_cb(uint8_t lun, uint8_t power_condition, bool start, bool load_eject)
{
 8000ed0:	b490      	push	{r4, r7}
 8000ed2:	b082      	sub	sp, #8
 8000ed4:	af00      	add	r7, sp, #0
 8000ed6:	4604      	mov	r4, r0
 8000ed8:	4608      	mov	r0, r1
 8000eda:	4611      	mov	r1, r2
 8000edc:	461a      	mov	r2, r3
 8000ede:	4623      	mov	r3, r4
 8000ee0:	71fb      	strb	r3, [r7, #7]
 8000ee2:	4603      	mov	r3, r0
 8000ee4:	71bb      	strb	r3, [r7, #6]
 8000ee6:	460b      	mov	r3, r1
 8000ee8:	717b      	strb	r3, [r7, #5]
 8000eea:	4613      	mov	r3, r2
 8000eec:	713b      	strb	r3, [r7, #4]
  (void) lun;
  (void) power_condition;

  if ( load_eject )
 8000eee:	793b      	ldrb	r3, [r7, #4]
 8000ef0:	2b00      	cmp	r3, #0
 8000ef2:	d005      	beq.n	8000f00 <tud_msc_start_stop_cb+0x30>
  {
    if (start)
 8000ef4:	797b      	ldrb	r3, [r7, #5]
 8000ef6:	2b00      	cmp	r3, #0
 8000ef8:	d102      	bne.n	8000f00 <tud_msc_start_stop_cb+0x30>
    {
      // load disk storage
    }else
    {
      // unload disk storage
      ejected = true;
 8000efa:	4b04      	ldr	r3, [pc, #16]	; (8000f0c <tud_msc_start_stop_cb+0x3c>)
 8000efc:	2201      	movs	r2, #1
 8000efe:	701a      	strb	r2, [r3, #0]
    }
  }

  return true;
 8000f00:	2301      	movs	r3, #1
}
 8000f02:	4618      	mov	r0, r3
 8000f04:	3708      	adds	r7, #8
 8000f06:	46bd      	mov	sp, r7
 8000f08:	bc90      	pop	{r4, r7}
 8000f0a:	4770      	bx	lr
 8000f0c:	2400067d 	.word	0x2400067d

08000f10 <tud_msc_read10_cb>:

// Callback invoked when received READ10 command.
// Copy disk's data to buffer (up to bufsize) and return number of copied bytes.
int32_t tud_msc_read10_cb(uint8_t lun, uint32_t lba, uint32_t offset, void* buffer, uint32_t bufsize) {
 8000f10:	b590      	push	{r4, r7, lr}
 8000f12:	b087      	sub	sp, #28
 8000f14:	af00      	add	r7, sp, #0
 8000f16:	60b9      	str	r1, [r7, #8]
 8000f18:	607a      	str	r2, [r7, #4]
 8000f1a:	603b      	str	r3, [r7, #0]
 8000f1c:	4603      	mov	r3, r0
 8000f1e:	73fb      	strb	r3, [r7, #15]
    (void) lun;

    DWORD sector = lba; // Logical Block Addressing
 8000f20:	68bb      	ldr	r3, [r7, #8]
 8000f22:	617b      	str	r3, [r7, #20]
    uint16_t blocksize;
    SD_Driver.disk_ioctl(lun, GET_SECTOR_SIZE, &blocksize);
 8000f24:	4b0f      	ldr	r3, [pc, #60]	; (8000f64 <tud_msc_read10_cb+0x54>)
 8000f26:	691b      	ldr	r3, [r3, #16]
 8000f28:	f107 0210 	add.w	r2, r7, #16
 8000f2c:	7bf8      	ldrb	r0, [r7, #15]
 8000f2e:	2102      	movs	r1, #2
 8000f30:	4798      	blx	r3
    //UINT byteRead;

    //DRESULT res = disk_read(0, buffer, sector, bufsize / DISK_BLOCK_SIZE);
    DRESULT res = SD_Driver.disk_read(lun, buffer, sector, bufsize / blocksize);
 8000f32:	4b0c      	ldr	r3, [pc, #48]	; (8000f64 <tud_msc_read10_cb+0x54>)
 8000f34:	689c      	ldr	r4, [r3, #8]
 8000f36:	8a3b      	ldrh	r3, [r7, #16]
 8000f38:	461a      	mov	r2, r3
 8000f3a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000f3c:	fbb3 f3f2 	udiv	r3, r3, r2
 8000f40:	7bf8      	ldrb	r0, [r7, #15]
 8000f42:	697a      	ldr	r2, [r7, #20]
 8000f44:	6839      	ldr	r1, [r7, #0]
 8000f46:	47a0      	blx	r4
 8000f48:	4603      	mov	r3, r0
 8000f4a:	74fb      	strb	r3, [r7, #19]
    if (res != RES_OK) {
 8000f4c:	7cfb      	ldrb	r3, [r7, #19]
 8000f4e:	2b00      	cmp	r3, #0
 8000f50:	d002      	beq.n	8000f58 <tud_msc_read10_cb+0x48>
        return -1;
 8000f52:	f04f 33ff 	mov.w	r3, #4294967295
 8000f56:	e000      	b.n	8000f5a <tud_msc_read10_cb+0x4a>
    }

    return bufsize;
 8000f58:	6abb      	ldr	r3, [r7, #40]	; 0x28
}
 8000f5a:	4618      	mov	r0, r3
 8000f5c:	371c      	adds	r7, #28
 8000f5e:	46bd      	mov	sp, r7
 8000f60:	bd90      	pop	{r4, r7, pc}
 8000f62:	bf00      	nop
 8000f64:	08010214 	.word	0x08010214

08000f68 <tud_msc_is_writable_cb>:

bool tud_msc_is_writable_cb (uint8_t lun)
{
 8000f68:	b480      	push	{r7}
 8000f6a:	b083      	sub	sp, #12
 8000f6c:	af00      	add	r7, sp, #0
 8000f6e:	4603      	mov	r3, r0
 8000f70:	71fb      	strb	r3, [r7, #7]
  (void) lun;

#ifdef CFG_EXAMPLE_MSC_READONLY
  return false;
#else
  return true;
 8000f72:	2301      	movs	r3, #1
#endif
}
 8000f74:	4618      	mov	r0, r3
 8000f76:	370c      	adds	r7, #12
 8000f78:	46bd      	mov	sp, r7
 8000f7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f7e:	4770      	bx	lr

08000f80 <tud_msc_write10_cb>:

// Callback invoked when received WRITE10 command.
// Process data in buffer to disk's storage and return number of written bytes
int32_t tud_msc_write10_cb(uint8_t lun, uint32_t lba, uint32_t offset, uint8_t* buffer, uint32_t bufsize) {
 8000f80:	b590      	push	{r4, r7, lr}
 8000f82:	b087      	sub	sp, #28
 8000f84:	af00      	add	r7, sp, #0
 8000f86:	60b9      	str	r1, [r7, #8]
 8000f88:	607a      	str	r2, [r7, #4]
 8000f8a:	603b      	str	r3, [r7, #0]
 8000f8c:	4603      	mov	r3, r0
 8000f8e:	73fb      	strb	r3, [r7, #15]
    (void) lun;

    DWORD sector = lba; // Logical Block Addressing
 8000f90:	68bb      	ldr	r3, [r7, #8]
 8000f92:	617b      	str	r3, [r7, #20]
    uint16_t blocksize;
    SD_Driver.disk_ioctl(lun, GET_SECTOR_SIZE, &blocksize);
 8000f94:	4b0f      	ldr	r3, [pc, #60]	; (8000fd4 <tud_msc_write10_cb+0x54>)
 8000f96:	691b      	ldr	r3, [r3, #16]
 8000f98:	f107 0210 	add.w	r2, r7, #16
 8000f9c:	7bf8      	ldrb	r0, [r7, #15]
 8000f9e:	2102      	movs	r1, #2
 8000fa0:	4798      	blx	r3
    //UINT byteWritten;

    //DRESULT res = disk_write(0, buffer, sector, bufsize / DISK_BLOCK_SIZE);
    DRESULT res = SD_Driver.disk_write(lun, buffer, sector, bufsize / blocksize);
 8000fa2:	4b0c      	ldr	r3, [pc, #48]	; (8000fd4 <tud_msc_write10_cb+0x54>)
 8000fa4:	68dc      	ldr	r4, [r3, #12]
 8000fa6:	8a3b      	ldrh	r3, [r7, #16]
 8000fa8:	461a      	mov	r2, r3
 8000faa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000fac:	fbb3 f3f2 	udiv	r3, r3, r2
 8000fb0:	7bf8      	ldrb	r0, [r7, #15]
 8000fb2:	697a      	ldr	r2, [r7, #20]
 8000fb4:	6839      	ldr	r1, [r7, #0]
 8000fb6:	47a0      	blx	r4
 8000fb8:	4603      	mov	r3, r0
 8000fba:	74fb      	strb	r3, [r7, #19]
    if (res != RES_OK) {
 8000fbc:	7cfb      	ldrb	r3, [r7, #19]
 8000fbe:	2b00      	cmp	r3, #0
 8000fc0:	d002      	beq.n	8000fc8 <tud_msc_write10_cb+0x48>
        return -1;
 8000fc2:	f04f 33ff 	mov.w	r3, #4294967295
 8000fc6:	e000      	b.n	8000fca <tud_msc_write10_cb+0x4a>
    }

    return bufsize;
 8000fc8:	6abb      	ldr	r3, [r7, #40]	; 0x28
}
 8000fca:	4618      	mov	r0, r3
 8000fcc:	371c      	adds	r7, #28
 8000fce:	46bd      	mov	sp, r7
 8000fd0:	bd90      	pop	{r4, r7, pc}
 8000fd2:	bf00      	nop
 8000fd4:	08010214 	.word	0x08010214

08000fd8 <tud_msc_scsi_cb>:

// Callback invoked when received an SCSI command not in built-in list below
// - READ_CAPACITY10, READ_FORMAT_CAPACITY, INQUIRY, MODE_SENSE6, REQUEST_SENSE
// - READ10 and WRITE10 has their own callbacks
int32_t tud_msc_scsi_cb (uint8_t lun, uint8_t const scsi_cmd[16], void* buffer, uint16_t bufsize)
{
 8000fd8:	b580      	push	{r7, lr}
 8000fda:	b088      	sub	sp, #32
 8000fdc:	af00      	add	r7, sp, #0
 8000fde:	60b9      	str	r1, [r7, #8]
 8000fe0:	607a      	str	r2, [r7, #4]
 8000fe2:	461a      	mov	r2, r3
 8000fe4:	4603      	mov	r3, r0
 8000fe6:	73fb      	strb	r3, [r7, #15]
 8000fe8:	4613      	mov	r3, r2
 8000fea:	81bb      	strh	r3, [r7, #12]
  // read10 & write10 has their own callback and MUST not be handled here

  void const* response = NULL;
 8000fec:	2300      	movs	r3, #0
 8000fee:	61bb      	str	r3, [r7, #24]
  int32_t resplen = 0;
 8000ff0:	2300      	movs	r3, #0
 8000ff2:	61fb      	str	r3, [r7, #28]

  // most scsi handled is input
  bool in_xfer = true;
 8000ff4:	2301      	movs	r3, #1
 8000ff6:	75fb      	strb	r3, [r7, #23]

  switch (scsi_cmd[0])
  {
    default:
      // Set Sense = Invalid Command Operation
      tud_msc_set_sense(lun, SCSI_SENSE_ILLEGAL_REQUEST, 0x20, 0x00);
 8000ff8:	7bf8      	ldrb	r0, [r7, #15]
 8000ffa:	2300      	movs	r3, #0
 8000ffc:	2220      	movs	r2, #32
 8000ffe:	2105      	movs	r1, #5
 8001000:	f001 f8f2 	bl	80021e8 <tud_msc_set_sense>

      // negative means error -> tinyusb could stall and/or response with failed status
      resplen = -1;
 8001004:	f04f 33ff 	mov.w	r3, #4294967295
 8001008:	61fb      	str	r3, [r7, #28]
    break;
 800100a:	bf00      	nop
  }

  // return resplen must not larger than bufsize
  if ( resplen > bufsize ) resplen = bufsize;
 800100c:	89bb      	ldrh	r3, [r7, #12]
 800100e:	69fa      	ldr	r2, [r7, #28]
 8001010:	429a      	cmp	r2, r3
 8001012:	dd01      	ble.n	8001018 <tud_msc_scsi_cb+0x40>
 8001014:	89bb      	ldrh	r3, [r7, #12]
 8001016:	61fb      	str	r3, [r7, #28]

  if ( response && (resplen > 0) )
 8001018:	69bb      	ldr	r3, [r7, #24]
 800101a:	2b00      	cmp	r3, #0
 800101c:	d00b      	beq.n	8001036 <tud_msc_scsi_cb+0x5e>
 800101e:	69fb      	ldr	r3, [r7, #28]
 8001020:	2b00      	cmp	r3, #0
 8001022:	dd08      	ble.n	8001036 <tud_msc_scsi_cb+0x5e>
  {
    if(in_xfer)
 8001024:	7dfb      	ldrb	r3, [r7, #23]
 8001026:	2b00      	cmp	r3, #0
 8001028:	d005      	beq.n	8001036 <tud_msc_scsi_cb+0x5e>
    {
      memcpy(buffer, response, (size_t) resplen);
 800102a:	69fb      	ldr	r3, [r7, #28]
 800102c:	461a      	mov	r2, r3
 800102e:	69b9      	ldr	r1, [r7, #24]
 8001030:	6878      	ldr	r0, [r7, #4]
 8001032:	f00e fffb 	bl	801002c <memcpy>
    {
      // SCSI output
    }
  }

  return (int32_t) resplen;
 8001036:	69fb      	ldr	r3, [r7, #28]
}
 8001038:	4618      	mov	r0, r3
 800103a:	3720      	adds	r7, #32
 800103c:	46bd      	mov	sp, r7
 800103e:	bd80      	pop	{r7, pc}

08001040 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001040:	b480      	push	{r7}
 8001042:	b083      	sub	sp, #12
 8001044:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001046:	4b0a      	ldr	r3, [pc, #40]	; (8001070 <HAL_MspInit+0x30>)
 8001048:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800104c:	4a08      	ldr	r2, [pc, #32]	; (8001070 <HAL_MspInit+0x30>)
 800104e:	f043 0302 	orr.w	r3, r3, #2
 8001052:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8001056:	4b06      	ldr	r3, [pc, #24]	; (8001070 <HAL_MspInit+0x30>)
 8001058:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800105c:	f003 0302 	and.w	r3, r3, #2
 8001060:	607b      	str	r3, [r7, #4]
 8001062:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001064:	bf00      	nop
 8001066:	370c      	adds	r7, #12
 8001068:	46bd      	mov	sp, r7
 800106a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800106e:	4770      	bx	lr
 8001070:	58024400 	.word	0x58024400

08001074 <HAL_SD_MspInit>:
* This function configures the hardware resources used in this example
* @param hsd: SD handle pointer
* @retval None
*/
void HAL_SD_MspInit(SD_HandleTypeDef* hsd)
{
 8001074:	b580      	push	{r7, lr}
 8001076:	b0be      	sub	sp, #248	; 0xf8
 8001078:	af00      	add	r7, sp, #0
 800107a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800107c:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8001080:	2200      	movs	r2, #0
 8001082:	601a      	str	r2, [r3, #0]
 8001084:	605a      	str	r2, [r3, #4]
 8001086:	609a      	str	r2, [r3, #8]
 8001088:	60da      	str	r2, [r3, #12]
 800108a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800108c:	f107 0318 	add.w	r3, r7, #24
 8001090:	22c8      	movs	r2, #200	; 0xc8
 8001092:	2100      	movs	r1, #0
 8001094:	4618      	mov	r0, r3
 8001096:	f00e ff9c 	bl	800ffd2 <memset>
  if(hsd->Instance==SDMMC1)
 800109a:	687b      	ldr	r3, [r7, #4]
 800109c:	681b      	ldr	r3, [r3, #0]
 800109e:	4a3c      	ldr	r2, [pc, #240]	; (8001190 <HAL_SD_MspInit+0x11c>)
 80010a0:	4293      	cmp	r3, r2
 80010a2:	d171      	bne.n	8001188 <HAL_SD_MspInit+0x114>

  /* USER CODE END SDMMC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SDMMC;
 80010a4:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80010a8:	f04f 0300 	mov.w	r3, #0
 80010ac:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.SdmmcClockSelection = RCC_SDMMCCLKSOURCE_PLL;
 80010b0:	2300      	movs	r3, #0
 80010b2:	66fb      	str	r3, [r7, #108]	; 0x6c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80010b4:	f107 0318 	add.w	r3, r7, #24
 80010b8:	4618      	mov	r0, r3
 80010ba:	f008 f981 	bl	80093c0 <HAL_RCCEx_PeriphCLKConfig>
 80010be:	4603      	mov	r3, r0
 80010c0:	2b00      	cmp	r3, #0
 80010c2:	d001      	beq.n	80010c8 <HAL_SD_MspInit+0x54>
    {
      Error_Handler();
 80010c4:	f7ff fe53 	bl	8000d6e <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SDMMC1_CLK_ENABLE();
 80010c8:	4b32      	ldr	r3, [pc, #200]	; (8001194 <HAL_SD_MspInit+0x120>)
 80010ca:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 80010ce:	4a31      	ldr	r2, [pc, #196]	; (8001194 <HAL_SD_MspInit+0x120>)
 80010d0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80010d4:	f8c2 30d4 	str.w	r3, [r2, #212]	; 0xd4
 80010d8:	4b2e      	ldr	r3, [pc, #184]	; (8001194 <HAL_SD_MspInit+0x120>)
 80010da:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 80010de:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80010e2:	617b      	str	r3, [r7, #20]
 80010e4:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80010e6:	4b2b      	ldr	r3, [pc, #172]	; (8001194 <HAL_SD_MspInit+0x120>)
 80010e8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80010ec:	4a29      	ldr	r2, [pc, #164]	; (8001194 <HAL_SD_MspInit+0x120>)
 80010ee:	f043 0304 	orr.w	r3, r3, #4
 80010f2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80010f6:	4b27      	ldr	r3, [pc, #156]	; (8001194 <HAL_SD_MspInit+0x120>)
 80010f8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80010fc:	f003 0304 	and.w	r3, r3, #4
 8001100:	613b      	str	r3, [r7, #16]
 8001102:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001104:	4b23      	ldr	r3, [pc, #140]	; (8001194 <HAL_SD_MspInit+0x120>)
 8001106:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800110a:	4a22      	ldr	r2, [pc, #136]	; (8001194 <HAL_SD_MspInit+0x120>)
 800110c:	f043 0308 	orr.w	r3, r3, #8
 8001110:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001114:	4b1f      	ldr	r3, [pc, #124]	; (8001194 <HAL_SD_MspInit+0x120>)
 8001116:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800111a:	f003 0308 	and.w	r3, r3, #8
 800111e:	60fb      	str	r3, [r7, #12]
 8001120:	68fb      	ldr	r3, [r7, #12]
    PC12     ------> SDMMC1_CK
    PD2     ------> SDMMC1_CMD
    PC8     ------> SDMMC1_D0
    PC9     ------> SDMMC1_D1
    */
    GPIO_InitStruct.Pin = SDIO1_D2_Pin|SDIO1_D3_Pin|SDIO1_CK_Pin|SDIO1_D0_Pin
 8001122:	f44f 53f8 	mov.w	r3, #7936	; 0x1f00
 8001126:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
                          |SDIO1_D1_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800112a:	2302      	movs	r3, #2
 800112c:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001130:	2300      	movs	r3, #0
 8001132:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001136:	2303      	movs	r3, #3
 8001138:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO1;
 800113c:	230c      	movs	r3, #12
 800113e:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001142:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8001146:	4619      	mov	r1, r3
 8001148:	4813      	ldr	r0, [pc, #76]	; (8001198 <HAL_SD_MspInit+0x124>)
 800114a:	f006 fd45 	bl	8007bd8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = SDIO1_CMD_Pin;
 800114e:	2304      	movs	r3, #4
 8001150:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001154:	2302      	movs	r3, #2
 8001156:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800115a:	2300      	movs	r3, #0
 800115c:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001160:	2303      	movs	r3, #3
 8001162:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO1;
 8001166:	230c      	movs	r3, #12
 8001168:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    HAL_GPIO_Init(SDIO1_CMD_GPIO_Port, &GPIO_InitStruct);
 800116c:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8001170:	4619      	mov	r1, r3
 8001172:	480a      	ldr	r0, [pc, #40]	; (800119c <HAL_SD_MspInit+0x128>)
 8001174:	f006 fd30 	bl	8007bd8 <HAL_GPIO_Init>

    /* SDMMC1 interrupt Init */
    HAL_NVIC_SetPriority(SDMMC1_IRQn, 0, 0);
 8001178:	2200      	movs	r2, #0
 800117a:	2100      	movs	r1, #0
 800117c:	2031      	movs	r0, #49	; 0x31
 800117e:	f006 fcf6 	bl	8007b6e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SDMMC1_IRQn);
 8001182:	2031      	movs	r0, #49	; 0x31
 8001184:	f006 fd0d 	bl	8007ba2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SDMMC1_MspInit 1 */

  /* USER CODE END SDMMC1_MspInit 1 */
  }

}
 8001188:	bf00      	nop
 800118a:	37f8      	adds	r7, #248	; 0xf8
 800118c:	46bd      	mov	sp, r7
 800118e:	bd80      	pop	{r7, pc}
 8001190:	52007000 	.word	0x52007000
 8001194:	58024400 	.word	0x58024400
 8001198:	58020800 	.word	0x58020800
 800119c:	58020c00 	.word	0x58020c00

080011a0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80011a0:	b580      	push	{r7, lr}
 80011a2:	b08a      	sub	sp, #40	; 0x28
 80011a4:	af00      	add	r7, sp, #0
 80011a6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011a8:	f107 0314 	add.w	r3, r7, #20
 80011ac:	2200      	movs	r2, #0
 80011ae:	601a      	str	r2, [r3, #0]
 80011b0:	605a      	str	r2, [r3, #4]
 80011b2:	609a      	str	r2, [r3, #8]
 80011b4:	60da      	str	r2, [r3, #12]
 80011b6:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 80011b8:	687b      	ldr	r3, [r7, #4]
 80011ba:	681b      	ldr	r3, [r3, #0]
 80011bc:	4a1a      	ldr	r2, [pc, #104]	; (8001228 <HAL_UART_MspInit+0x88>)
 80011be:	4293      	cmp	r3, r2
 80011c0:	d12e      	bne.n	8001220 <HAL_UART_MspInit+0x80>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80011c2:	4b1a      	ldr	r3, [pc, #104]	; (800122c <HAL_UART_MspInit+0x8c>)
 80011c4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80011c8:	4a18      	ldr	r2, [pc, #96]	; (800122c <HAL_UART_MspInit+0x8c>)
 80011ca:	f043 0310 	orr.w	r3, r3, #16
 80011ce:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 80011d2:	4b16      	ldr	r3, [pc, #88]	; (800122c <HAL_UART_MspInit+0x8c>)
 80011d4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80011d8:	f003 0310 	and.w	r3, r3, #16
 80011dc:	613b      	str	r3, [r7, #16]
 80011de:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80011e0:	4b12      	ldr	r3, [pc, #72]	; (800122c <HAL_UART_MspInit+0x8c>)
 80011e2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80011e6:	4a11      	ldr	r2, [pc, #68]	; (800122c <HAL_UART_MspInit+0x8c>)
 80011e8:	f043 0301 	orr.w	r3, r3, #1
 80011ec:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80011f0:	4b0e      	ldr	r3, [pc, #56]	; (800122c <HAL_UART_MspInit+0x8c>)
 80011f2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80011f6:	f003 0301 	and.w	r3, r3, #1
 80011fa:	60fb      	str	r3, [r7, #12]
 80011fc:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA10     ------> USART1_RX
    PA9     ------> USART1_TX
    */
    GPIO_InitStruct.Pin = STLINK_TX_Pin|STLINK_RX_Pin;
 80011fe:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8001202:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001204:	2302      	movs	r3, #2
 8001206:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001208:	2300      	movs	r3, #0
 800120a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800120c:	2300      	movs	r3, #0
 800120e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001210:	2307      	movs	r3, #7
 8001212:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001214:	f107 0314 	add.w	r3, r7, #20
 8001218:	4619      	mov	r1, r3
 800121a:	4805      	ldr	r0, [pc, #20]	; (8001230 <HAL_UART_MspInit+0x90>)
 800121c:	f006 fcdc 	bl	8007bd8 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8001220:	bf00      	nop
 8001222:	3728      	adds	r7, #40	; 0x28
 8001224:	46bd      	mov	sp, r7
 8001226:	bd80      	pop	{r7, pc}
 8001228:	40011000 	.word	0x40011000
 800122c:	58024400 	.word	0x58024400
 8001230:	58020000 	.word	0x58020000

08001234 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8001234:	b580      	push	{r7, lr}
 8001236:	b0c2      	sub	sp, #264	; 0x108
 8001238:	af00      	add	r7, sp, #0
 800123a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800123e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8001242:	6018      	str	r0, [r3, #0]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001244:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 8001248:	2200      	movs	r2, #0
 800124a:	601a      	str	r2, [r3, #0]
 800124c:	605a      	str	r2, [r3, #4]
 800124e:	609a      	str	r2, [r3, #8]
 8001250:	60da      	str	r2, [r3, #12]
 8001252:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001254:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001258:	22c8      	movs	r2, #200	; 0xc8
 800125a:	2100      	movs	r1, #0
 800125c:	4618      	mov	r0, r3
 800125e:	f00e feb8 	bl	800ffd2 <memset>
  if(hpcd->Instance==USB_OTG_HS)
 8001262:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8001266:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800126a:	681b      	ldr	r3, [r3, #0]
 800126c:	681b      	ldr	r3, [r3, #0]
 800126e:	4a85      	ldr	r2, [pc, #532]	; (8001484 <HAL_PCD_MspInit+0x250>)
 8001270:	4293      	cmp	r3, r2
 8001272:	f040 8102 	bne.w	800147a <HAL_PCD_MspInit+0x246>

  /* USER CODE END USB_OTG_HS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8001276:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 800127a:	f04f 0300 	mov.w	r3, #0
 800127e:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
    PeriphClkInitStruct.PLL3.PLL3M = 25;
 8001282:	2319      	movs	r3, #25
 8001284:	653b      	str	r3, [r7, #80]	; 0x50
    PeriphClkInitStruct.PLL3.PLL3N = 200;
 8001286:	23c8      	movs	r3, #200	; 0xc8
 8001288:	657b      	str	r3, [r7, #84]	; 0x54
    PeriphClkInitStruct.PLL3.PLL3P = 2;
 800128a:	2302      	movs	r3, #2
 800128c:	65bb      	str	r3, [r7, #88]	; 0x58
    PeriphClkInitStruct.PLL3.PLL3Q = 4;
 800128e:	2304      	movs	r3, #4
 8001290:	65fb      	str	r3, [r7, #92]	; 0x5c
    PeriphClkInitStruct.PLL3.PLL3R = 2;
 8001292:	2302      	movs	r3, #2
 8001294:	663b      	str	r3, [r7, #96]	; 0x60
    PeriphClkInitStruct.PLL3.PLL3RGE = RCC_PLL3VCIRANGE_0;
 8001296:	2300      	movs	r3, #0
 8001298:	667b      	str	r3, [r7, #100]	; 0x64
    PeriphClkInitStruct.PLL3.PLL3VCOSEL = RCC_PLL3VCOWIDE;
 800129a:	2300      	movs	r3, #0
 800129c:	66bb      	str	r3, [r7, #104]	; 0x68
    PeriphClkInitStruct.PLL3.PLL3FRACN = 0;
 800129e:	2300      	movs	r3, #0
 80012a0:	66fb      	str	r3, [r7, #108]	; 0x6c
    PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_PLL3;
 80012a2:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80012a6:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80012aa:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80012ae:	4618      	mov	r0, r3
 80012b0:	f008 f886 	bl	80093c0 <HAL_RCCEx_PeriphCLKConfig>
 80012b4:	4603      	mov	r3, r0
 80012b6:	2b00      	cmp	r3, #0
 80012b8:	d001      	beq.n	80012be <HAL_PCD_MspInit+0x8a>
    {
      Error_Handler();
 80012ba:	f7ff fd58 	bl	8000d6e <Error_Handler>
    }

  /** Enable USB Voltage detector
  */
    HAL_PWREx_EnableUSBVoltageDetector();
 80012be:	f007 f81f 	bl	8008300 <HAL_PWREx_EnableUSBVoltageDetector>

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80012c2:	4b71      	ldr	r3, [pc, #452]	; (8001488 <HAL_PCD_MspInit+0x254>)
 80012c4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80012c8:	4a6f      	ldr	r2, [pc, #444]	; (8001488 <HAL_PCD_MspInit+0x254>)
 80012ca:	f043 0302 	orr.w	r3, r3, #2
 80012ce:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80012d2:	4b6d      	ldr	r3, [pc, #436]	; (8001488 <HAL_PCD_MspInit+0x254>)
 80012d4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80012d8:	f003 0302 	and.w	r3, r3, #2
 80012dc:	627b      	str	r3, [r7, #36]	; 0x24
 80012de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    __HAL_RCC_GPIOI_CLK_ENABLE();
 80012e0:	4b69      	ldr	r3, [pc, #420]	; (8001488 <HAL_PCD_MspInit+0x254>)
 80012e2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80012e6:	4a68      	ldr	r2, [pc, #416]	; (8001488 <HAL_PCD_MspInit+0x254>)
 80012e8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80012ec:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80012f0:	4b65      	ldr	r3, [pc, #404]	; (8001488 <HAL_PCD_MspInit+0x254>)
 80012f2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80012f6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80012fa:	623b      	str	r3, [r7, #32]
 80012fc:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80012fe:	4b62      	ldr	r3, [pc, #392]	; (8001488 <HAL_PCD_MspInit+0x254>)
 8001300:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001304:	4a60      	ldr	r2, [pc, #384]	; (8001488 <HAL_PCD_MspInit+0x254>)
 8001306:	f043 0304 	orr.w	r3, r3, #4
 800130a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800130e:	4b5e      	ldr	r3, [pc, #376]	; (8001488 <HAL_PCD_MspInit+0x254>)
 8001310:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001314:	f003 0304 	and.w	r3, r3, #4
 8001318:	61fb      	str	r3, [r7, #28]
 800131a:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOH_CLK_ENABLE();
 800131c:	4b5a      	ldr	r3, [pc, #360]	; (8001488 <HAL_PCD_MspInit+0x254>)
 800131e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001322:	4a59      	ldr	r2, [pc, #356]	; (8001488 <HAL_PCD_MspInit+0x254>)
 8001324:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001328:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800132c:	4b56      	ldr	r3, [pc, #344]	; (8001488 <HAL_PCD_MspInit+0x254>)
 800132e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001332:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001336:	61bb      	str	r3, [r7, #24]
 8001338:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800133a:	4b53      	ldr	r3, [pc, #332]	; (8001488 <HAL_PCD_MspInit+0x254>)
 800133c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001340:	4a51      	ldr	r2, [pc, #324]	; (8001488 <HAL_PCD_MspInit+0x254>)
 8001342:	f043 0301 	orr.w	r3, r3, #1
 8001346:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800134a:	4b4f      	ldr	r3, [pc, #316]	; (8001488 <HAL_PCD_MspInit+0x254>)
 800134c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001350:	f003 0301 	and.w	r3, r3, #1
 8001354:	617b      	str	r3, [r7, #20]
 8001356:	697b      	ldr	r3, [r7, #20]
    PB12     ------> USB_OTG_HS_ULPI_D5
    PA3     ------> USB_OTG_HS_ULPI_D0
    PB0     ------> USB_OTG_HS_ULPI_D1
    PB13     ------> USB_OTG_HS_ULPI_D6
    */
    GPIO_InitStruct.Pin = ULPI_D7_Pin|ULPI_D3_Pin|ULPI_D4_Pin|ULPI_D2_Pin
 8001358:	f643 4323 	movw	r3, #15395	; 0x3c23
 800135c:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
                          |ULPI_D5_Pin|ULPI_D1_Pin|ULPI_D6_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001360:	2302      	movs	r3, #2
 8001362:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001366:	2300      	movs	r3, #0
 8001368:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800136c:	2302      	movs	r3, #2
 800136e:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG2_HS;
 8001372:	230a      	movs	r3, #10
 8001374:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001378:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 800137c:	4619      	mov	r1, r3
 800137e:	4843      	ldr	r0, [pc, #268]	; (800148c <HAL_PCD_MspInit+0x258>)
 8001380:	f006 fc2a 	bl	8007bd8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = ULPI_DIR_Pin;
 8001384:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001388:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800138c:	2302      	movs	r3, #2
 800138e:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001392:	2300      	movs	r3, #0
 8001394:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001398:	2302      	movs	r3, #2
 800139a:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG2_HS;
 800139e:	230a      	movs	r3, #10
 80013a0:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
    HAL_GPIO_Init(ULPI_DIR_GPIO_Port, &GPIO_InitStruct);
 80013a4:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 80013a8:	4619      	mov	r1, r3
 80013aa:	4839      	ldr	r0, [pc, #228]	; (8001490 <HAL_PCD_MspInit+0x25c>)
 80013ac:	f006 fc14 	bl	8007bd8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = ULPI_STP_Pin;
 80013b0:	2301      	movs	r3, #1
 80013b2:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013b6:	2302      	movs	r3, #2
 80013b8:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013bc:	2300      	movs	r3, #0
 80013be:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80013c2:	2302      	movs	r3, #2
 80013c4:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG2_HS;
 80013c8:	230a      	movs	r3, #10
 80013ca:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
    HAL_GPIO_Init(ULPI_STP_GPIO_Port, &GPIO_InitStruct);
 80013ce:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 80013d2:	4619      	mov	r1, r3
 80013d4:	482f      	ldr	r0, [pc, #188]	; (8001494 <HAL_PCD_MspInit+0x260>)
 80013d6:	f006 fbff 	bl	8007bd8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = ULPI_NXT_Pin;
 80013da:	2310      	movs	r3, #16
 80013dc:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013e0:	2302      	movs	r3, #2
 80013e2:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013e6:	2300      	movs	r3, #0
 80013e8:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80013ec:	2302      	movs	r3, #2
 80013ee:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG2_HS;
 80013f2:	230a      	movs	r3, #10
 80013f4:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
    HAL_GPIO_Init(ULPI_NXT_GPIO_Port, &GPIO_InitStruct);
 80013f8:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 80013fc:	4619      	mov	r1, r3
 80013fe:	4826      	ldr	r0, [pc, #152]	; (8001498 <HAL_PCD_MspInit+0x264>)
 8001400:	f006 fbea 	bl	8007bd8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = ULPI_CK_Pin|ULPI_D0_Pin;
 8001404:	2328      	movs	r3, #40	; 0x28
 8001406:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800140a:	2302      	movs	r3, #2
 800140c:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001410:	2300      	movs	r3, #0
 8001412:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001416:	2302      	movs	r3, #2
 8001418:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG2_HS;
 800141c:	230a      	movs	r3, #10
 800141e:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001422:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 8001426:	4619      	mov	r1, r3
 8001428:	481c      	ldr	r0, [pc, #112]	; (800149c <HAL_PCD_MspInit+0x268>)
 800142a:	f006 fbd5 	bl	8007bd8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_HS_CLK_ENABLE();
 800142e:	4b16      	ldr	r3, [pc, #88]	; (8001488 <HAL_PCD_MspInit+0x254>)
 8001430:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8001434:	4a14      	ldr	r2, [pc, #80]	; (8001488 <HAL_PCD_MspInit+0x254>)
 8001436:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800143a:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 800143e:	4b12      	ldr	r3, [pc, #72]	; (8001488 <HAL_PCD_MspInit+0x254>)
 8001440:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8001444:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001448:	613b      	str	r3, [r7, #16]
 800144a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_USB_OTG_HS_ULPI_CLK_ENABLE();
 800144c:	4b0e      	ldr	r3, [pc, #56]	; (8001488 <HAL_PCD_MspInit+0x254>)
 800144e:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8001452:	4a0d      	ldr	r2, [pc, #52]	; (8001488 <HAL_PCD_MspInit+0x254>)
 8001454:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8001458:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 800145c:	4b0a      	ldr	r3, [pc, #40]	; (8001488 <HAL_PCD_MspInit+0x254>)
 800145e:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8001462:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001466:	60fb      	str	r3, [r7, #12]
 8001468:	68fb      	ldr	r3, [r7, #12]
    /* USB_OTG_HS interrupt Init */
    HAL_NVIC_SetPriority(OTG_HS_IRQn, 0, 0);
 800146a:	2200      	movs	r2, #0
 800146c:	2100      	movs	r1, #0
 800146e:	204d      	movs	r0, #77	; 0x4d
 8001470:	f006 fb7d 	bl	8007b6e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_HS_IRQn);
 8001474:	204d      	movs	r0, #77	; 0x4d
 8001476:	f006 fb94 	bl	8007ba2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_HS_MspInit 1 */

  /* USER CODE END USB_OTG_HS_MspInit 1 */
  }

}
 800147a:	bf00      	nop
 800147c:	f507 7784 	add.w	r7, r7, #264	; 0x108
 8001480:	46bd      	mov	sp, r7
 8001482:	bd80      	pop	{r7, pc}
 8001484:	40040000 	.word	0x40040000
 8001488:	58024400 	.word	0x58024400
 800148c:	58020400 	.word	0x58020400
 8001490:	58022000 	.word	0x58022000
 8001494:	58020800 	.word	0x58020800
 8001498:	58021c00 	.word	0x58021c00
 800149c:	58020000 	.word	0x58020000

080014a0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80014a0:	b480      	push	{r7}
 80014a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80014a4:	e7fe      	b.n	80014a4 <NMI_Handler+0x4>

080014a6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80014a6:	b480      	push	{r7}
 80014a8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80014aa:	e7fe      	b.n	80014aa <HardFault_Handler+0x4>

080014ac <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80014ac:	b480      	push	{r7}
 80014ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80014b0:	e7fe      	b.n	80014b0 <MemManage_Handler+0x4>

080014b2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80014b2:	b480      	push	{r7}
 80014b4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80014b6:	e7fe      	b.n	80014b6 <BusFault_Handler+0x4>

080014b8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80014b8:	b480      	push	{r7}
 80014ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80014bc:	e7fe      	b.n	80014bc <UsageFault_Handler+0x4>

080014be <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80014be:	b480      	push	{r7}
 80014c0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80014c2:	bf00      	nop
 80014c4:	46bd      	mov	sp, r7
 80014c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014ca:	4770      	bx	lr

080014cc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80014cc:	b480      	push	{r7}
 80014ce:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80014d0:	bf00      	nop
 80014d2:	46bd      	mov	sp, r7
 80014d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014d8:	4770      	bx	lr

080014da <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80014da:	b480      	push	{r7}
 80014dc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80014de:	bf00      	nop
 80014e0:	46bd      	mov	sp, r7
 80014e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014e6:	4770      	bx	lr

080014e8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80014e8:	b580      	push	{r7, lr}
 80014ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80014ec:	f006 fa14 	bl	8007918 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80014f0:	bf00      	nop
 80014f2:	bd80      	pop	{r7, pc}

080014f4 <SDMMC1_IRQHandler>:

/**
  * @brief This function handles SDMMC1 global interrupt.
  */
void SDMMC1_IRQHandler(void)
{
 80014f4:	b580      	push	{r7, lr}
 80014f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SDMMC1_IRQn 0 */

  /* USER CODE END SDMMC1_IRQn 0 */
  HAL_SD_IRQHandler(&hsd1);
 80014f8:	4802      	ldr	r0, [pc, #8]	; (8001504 <SDMMC1_IRQHandler+0x10>)
 80014fa:	f00a ff0f 	bl	800c31c <HAL_SD_IRQHandler>
  /* USER CODE BEGIN SDMMC1_IRQn 1 */

  /* USER CODE END SDMMC1_IRQn 1 */
}
 80014fe:	bf00      	nop
 8001500:	bd80      	pop	{r7, pc}
 8001502:	bf00      	nop
 8001504:	2400005c 	.word	0x2400005c

08001508 <OTG_HS_IRQHandler>:

/**
  * @brief This function handles USB On The Go HS global interrupt.
  */
void OTG_HS_IRQHandler(void)
{
 8001508:	b580      	push	{r7, lr}
 800150a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_HS_IRQn 0 */

	tud_int_handler(BOARD_TUD_RHPORT);
 800150c:	2001      	movs	r0, #1
 800150e:	f005 feef 	bl	80072f0 <dcd_int_handler>
	return;
 8001512:	bf00      	nop
  /* USER CODE END OTG_HS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_HS);
  /* USER CODE BEGIN OTG_HS_IRQn 1 */

  /* USER CODE END OTG_HS_IRQn 1 */
}
 8001514:	bd80      	pop	{r7, pc}
	...

08001518 <tud_descriptor_device_cb>:
    .bNumConfigurations = 0x01
};

// Invoked when received GET DEVICE DESCRIPTOR
// Application return pointer to descriptor
uint8_t const *tud_descriptor_device_cb(void) {
 8001518:	b480      	push	{r7}
 800151a:	af00      	add	r7, sp, #0
  return (uint8_t const *) &desc_device;
 800151c:	4b02      	ldr	r3, [pc, #8]	; (8001528 <tud_descriptor_device_cb+0x10>)
}
 800151e:	4618      	mov	r0, r3
 8001520:	46bd      	mov	sp, r7
 8001522:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001526:	4770      	bx	lr
 8001528:	080100b0 	.word	0x080100b0

0800152c <tud_descriptor_device_qualifier_cb>:

// Invoked when received GET DEVICE QUALIFIER DESCRIPTOR request
// Application return pointer to descriptor, whose contents must exist long enough for transfer to complete.
// device_qualifier descriptor describes information about a high-speed capable device that would
// change if the device were operating at the other speed. If not highspeed capable stall this request.
uint8_t const *tud_descriptor_device_qualifier_cb(void) {
 800152c:	b480      	push	{r7}
 800152e:	af00      	add	r7, sp, #0
  return (uint8_t const *) &desc_device_qualifier;
 8001530:	4b02      	ldr	r3, [pc, #8]	; (800153c <tud_descriptor_device_qualifier_cb+0x10>)
}
 8001532:	4618      	mov	r0, r3
 8001534:	46bd      	mov	sp, r7
 8001536:	f85d 7b04 	ldr.w	r7, [sp], #4
 800153a:	4770      	bx	lr
 800153c:	0801018c 	.word	0x0801018c

08001540 <tud_descriptor_other_speed_configuration_cb>:

// Invoked when received GET OTHER SEED CONFIGURATION DESCRIPTOR request
// Application return pointer to descriptor, whose contents must exist long enough for transfer to complete
// Configuration descriptor in the other speed e.g if high speed then this is for full speed and vice versa
uint8_t const *tud_descriptor_other_speed_configuration_cb(uint8_t index) {
 8001540:	b580      	push	{r7, lr}
 8001542:	b082      	sub	sp, #8
 8001544:	af00      	add	r7, sp, #0
 8001546:	4603      	mov	r3, r0
 8001548:	71fb      	strb	r3, [r7, #7]
  (void) index; // for multiple configurations

  // if link speed is high return fullspeed config, and vice versa
  // Note: the descriptor type is OHER_SPEED_CONFIG instead of CONFIG
  memcpy(desc_other_speed_config,
         (tud_speed_get() == TUSB_SPEED_HIGH) ? desc_fs_configuration : desc_hs_configuration,
 800154a:	f002 fd0d 	bl	8003f68 <tud_speed_get>
 800154e:	4603      	mov	r3, r0
  memcpy(desc_other_speed_config,
 8001550:	2b02      	cmp	r3, #2
 8001552:	d101      	bne.n	8001558 <tud_descriptor_other_speed_configuration_cb+0x18>
 8001554:	4b08      	ldr	r3, [pc, #32]	; (8001578 <tud_descriptor_other_speed_configuration_cb+0x38>)
 8001556:	e000      	b.n	800155a <tud_descriptor_other_speed_configuration_cb+0x1a>
 8001558:	4b08      	ldr	r3, [pc, #32]	; (800157c <tud_descriptor_other_speed_configuration_cb+0x3c>)
 800155a:	4a09      	ldr	r2, [pc, #36]	; (8001580 <tud_descriptor_other_speed_configuration_cb+0x40>)
 800155c:	4610      	mov	r0, r2
 800155e:	4619      	mov	r1, r3
 8001560:	2362      	movs	r3, #98	; 0x62
 8001562:	461a      	mov	r2, r3
 8001564:	f00e fd62 	bl	801002c <memcpy>
         CONFIG_TOTAL_LEN);

  desc_other_speed_config[1] = TUSB_DESC_OTHER_SPEED_CONFIG;
 8001568:	4b05      	ldr	r3, [pc, #20]	; (8001580 <tud_descriptor_other_speed_configuration_cb+0x40>)
 800156a:	2207      	movs	r2, #7
 800156c:	705a      	strb	r2, [r3, #1]

  return desc_other_speed_config;
 800156e:	4b04      	ldr	r3, [pc, #16]	; (8001580 <tud_descriptor_other_speed_configuration_cb+0x40>)
}
 8001570:	4618      	mov	r0, r3
 8001572:	3708      	adds	r7, #8
 8001574:	46bd      	mov	sp, r7
 8001576:	bd80      	pop	{r7, pc}
 8001578:	080100c4 	.word	0x080100c4
 800157c:	08010128 	.word	0x08010128
 8001580:	24000680 	.word	0x24000680

08001584 <tud_descriptor_configuration_cb>:


// Invoked when received GET CONFIGURATION DESCRIPTOR
// Application return pointer to descriptor
// Descriptor contents must exist long enough for transfer to complete
uint8_t const *tud_descriptor_configuration_cb(uint8_t index) {
 8001584:	b580      	push	{r7, lr}
 8001586:	b082      	sub	sp, #8
 8001588:	af00      	add	r7, sp, #0
 800158a:	4603      	mov	r3, r0
 800158c:	71fb      	strb	r3, [r7, #7]
  (void) index; // for multiple configurations

#if TUD_OPT_HIGH_SPEED
  // Although we are highspeed, host may be fullspeed.
  return (tud_speed_get() == TUSB_SPEED_HIGH) ? desc_hs_configuration : desc_fs_configuration;
 800158e:	f002 fceb 	bl	8003f68 <tud_speed_get>
 8001592:	4603      	mov	r3, r0
 8001594:	2b02      	cmp	r3, #2
 8001596:	d101      	bne.n	800159c <tud_descriptor_configuration_cb+0x18>
 8001598:	4b03      	ldr	r3, [pc, #12]	; (80015a8 <tud_descriptor_configuration_cb+0x24>)
 800159a:	e000      	b.n	800159e <tud_descriptor_configuration_cb+0x1a>
 800159c:	4b03      	ldr	r3, [pc, #12]	; (80015ac <tud_descriptor_configuration_cb+0x28>)
#else
  return desc_fs_configuration;
#endif
}
 800159e:	4618      	mov	r0, r3
 80015a0:	3708      	adds	r7, #8
 80015a2:	46bd      	mov	sp, r7
 80015a4:	bd80      	pop	{r7, pc}
 80015a6:	bf00      	nop
 80015a8:	08010128 	.word	0x08010128
 80015ac:	080100c4 	.word	0x080100c4

080015b0 <tud_descriptor_string_cb>:

static uint16_t _desc_str[32 + 1];

// Invoked when received GET STRING DESCRIPTOR request
// Application return pointer to descriptor, whose contents must exist long enough for transfer to complete
uint16_t const *tud_descriptor_string_cb(uint8_t index, uint16_t langid) {
 80015b0:	b580      	push	{r7, lr}
 80015b2:	b086      	sub	sp, #24
 80015b4:	af00      	add	r7, sp, #0
 80015b6:	4603      	mov	r3, r0
 80015b8:	460a      	mov	r2, r1
 80015ba:	71fb      	strb	r3, [r7, #7]
 80015bc:	4613      	mov	r3, r2
 80015be:	80bb      	strh	r3, [r7, #4]
  (void) langid;
  size_t chr_count;

  switch ( index ) {
 80015c0:	79fb      	ldrb	r3, [r7, #7]
 80015c2:	2b00      	cmp	r3, #0
 80015c4:	d002      	beq.n	80015cc <tud_descriptor_string_cb+0x1c>
 80015c6:	2b03      	cmp	r3, #3
 80015c8:	d034      	beq.n	8001634 <tud_descriptor_string_cb+0x84>
 80015ca:	e008      	b.n	80015de <tud_descriptor_string_cb+0x2e>
    case STRID_LANGID:
      memcpy(&_desc_str[1], string_desc_arr[0], 2);
 80015cc:	4b22      	ldr	r3, [pc, #136]	; (8001658 <tud_descriptor_string_cb+0xa8>)
 80015ce:	681b      	ldr	r3, [r3, #0]
 80015d0:	881b      	ldrh	r3, [r3, #0]
 80015d2:	b29a      	uxth	r2, r3
 80015d4:	4b21      	ldr	r3, [pc, #132]	; (800165c <tud_descriptor_string_cb+0xac>)
 80015d6:	805a      	strh	r2, [r3, #2]
      chr_count = 1;
 80015d8:	2301      	movs	r3, #1
 80015da:	617b      	str	r3, [r7, #20]
      break;
 80015dc:	e02b      	b.n	8001636 <tud_descriptor_string_cb+0x86>

    default:
      // Note: the 0xEE index string is a Microsoft OS 1.0 Descriptors.
      // https://docs.microsoft.com/en-us/windows-hardware/drivers/usbcon/microsoft-defined-usb-descriptors

      if ( !(index < sizeof(string_desc_arr) / sizeof(string_desc_arr[0])) ) return NULL;
 80015de:	79fb      	ldrb	r3, [r7, #7]
 80015e0:	2b05      	cmp	r3, #5
 80015e2:	d901      	bls.n	80015e8 <tud_descriptor_string_cb+0x38>
 80015e4:	2300      	movs	r3, #0
 80015e6:	e032      	b.n	800164e <tud_descriptor_string_cb+0x9e>

      const char *str = string_desc_arr[index];
 80015e8:	79fb      	ldrb	r3, [r7, #7]
 80015ea:	4a1b      	ldr	r2, [pc, #108]	; (8001658 <tud_descriptor_string_cb+0xa8>)
 80015ec:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80015f0:	60fb      	str	r3, [r7, #12]

      // Cap at max char
      chr_count = strlen(str);
 80015f2:	68f8      	ldr	r0, [r7, #12]
 80015f4:	f7fe fe70 	bl	80002d8 <strlen>
 80015f8:	6178      	str	r0, [r7, #20]
      size_t const max_count = sizeof(_desc_str) / sizeof(_desc_str[0]) - 1; // -1 for string type
 80015fa:	2320      	movs	r3, #32
 80015fc:	60bb      	str	r3, [r7, #8]
      if ( chr_count > max_count ) chr_count = max_count;
 80015fe:	697a      	ldr	r2, [r7, #20]
 8001600:	68bb      	ldr	r3, [r7, #8]
 8001602:	429a      	cmp	r2, r3
 8001604:	d901      	bls.n	800160a <tud_descriptor_string_cb+0x5a>
 8001606:	68bb      	ldr	r3, [r7, #8]
 8001608:	617b      	str	r3, [r7, #20]

      // Convert ASCII string into UTF-16
      for ( size_t i = 0; i < chr_count; i++ ) {
 800160a:	2300      	movs	r3, #0
 800160c:	613b      	str	r3, [r7, #16]
 800160e:	e00c      	b.n	800162a <tud_descriptor_string_cb+0x7a>
        _desc_str[1 + i] = str[i];
 8001610:	68fa      	ldr	r2, [r7, #12]
 8001612:	693b      	ldr	r3, [r7, #16]
 8001614:	4413      	add	r3, r2
 8001616:	781a      	ldrb	r2, [r3, #0]
 8001618:	693b      	ldr	r3, [r7, #16]
 800161a:	3301      	adds	r3, #1
 800161c:	b291      	uxth	r1, r2
 800161e:	4a0f      	ldr	r2, [pc, #60]	; (800165c <tud_descriptor_string_cb+0xac>)
 8001620:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
      for ( size_t i = 0; i < chr_count; i++ ) {
 8001624:	693b      	ldr	r3, [r7, #16]
 8001626:	3301      	adds	r3, #1
 8001628:	613b      	str	r3, [r7, #16]
 800162a:	693a      	ldr	r2, [r7, #16]
 800162c:	697b      	ldr	r3, [r7, #20]
 800162e:	429a      	cmp	r2, r3
 8001630:	d3ee      	bcc.n	8001610 <tud_descriptor_string_cb+0x60>
      }
      break;
 8001632:	e000      	b.n	8001636 <tud_descriptor_string_cb+0x86>
      break;
 8001634:	bf00      	nop
  }

  // first byte is length (including header), second byte is string type
  _desc_str[0] = (uint16_t) ((TUSB_DESC_STRING << 8) | (2 * chr_count + 2));
 8001636:	697b      	ldr	r3, [r7, #20]
 8001638:	b29b      	uxth	r3, r3
 800163a:	3301      	adds	r3, #1
 800163c:	b29b      	uxth	r3, r3
 800163e:	005b      	lsls	r3, r3, #1
 8001640:	b29b      	uxth	r3, r3
 8001642:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 8001646:	b29a      	uxth	r2, r3
 8001648:	4b04      	ldr	r3, [pc, #16]	; (800165c <tud_descriptor_string_cb+0xac>)
 800164a:	801a      	strh	r2, [r3, #0]

  return _desc_str;
 800164c:	4b03      	ldr	r3, [pc, #12]	; (800165c <tud_descriptor_string_cb+0xac>)
}
 800164e:	4618      	mov	r0, r3
 8001650:	3718      	adds	r7, #24
 8001652:	46bd      	mov	sp, r7
 8001654:	bd80      	pop	{r7, pc}
 8001656:	bf00      	nop
 8001658:	2400000c 	.word	0x2400000c
 800165c:	240006e4 	.word	0x240006e4

08001660 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8001660:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001698 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8001664:	f7fe ffbe 	bl	80005e4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001668:	480c      	ldr	r0, [pc, #48]	; (800169c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800166a:	490d      	ldr	r1, [pc, #52]	; (80016a0 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 800166c:	4a0d      	ldr	r2, [pc, #52]	; (80016a4 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800166e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001670:	e002      	b.n	8001678 <LoopCopyDataInit>

08001672 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001672:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001674:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001676:	3304      	adds	r3, #4

08001678 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001678:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800167a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800167c:	d3f9      	bcc.n	8001672 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800167e:	4a0a      	ldr	r2, [pc, #40]	; (80016a8 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001680:	4c0a      	ldr	r4, [pc, #40]	; (80016ac <LoopFillZerobss+0x22>)
  movs r3, #0
 8001682:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001684:	e001      	b.n	800168a <LoopFillZerobss>

08001686 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001686:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001688:	3204      	adds	r2, #4

0800168a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800168a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800168c:	d3fb      	bcc.n	8001686 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800168e:	f00e fca9 	bl	800ffe4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001692:	f7ff f86b 	bl	800076c <main>
  bx  lr
 8001696:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001698:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 800169c:	24000000 	.word	0x24000000
  ldr r1, =_edata
 80016a0:	24000040 	.word	0x24000040
  ldr r2, =_sidata
 80016a4:	08010238 	.word	0x08010238
  ldr r2, =_sbss
 80016a8:	24000040 	.word	0x24000040
  ldr r4, =_ebss
 80016ac:	24001438 	.word	0x24001438

080016b0 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80016b0:	e7fe      	b.n	80016b0 <ADC3_IRQHandler>

080016b2 <_prep_out_transaction>:
// INTERNAL OBJECT & FUNCTION DECLARATION
//--------------------------------------------------------------------+
CFG_TUD_MEM_SECTION tu_static cdcd_interface_t _cdcd_itf[CFG_TUD_CDC];

static bool _prep_out_transaction (cdcd_interface_t* p_cdc)
{
 80016b2:	b580      	push	{r7, lr}
 80016b4:	b084      	sub	sp, #16
 80016b6:	af00      	add	r7, sp, #0
 80016b8:	6078      	str	r0, [r7, #4]
  uint8_t const rhport = 0;
 80016ba:	2300      	movs	r3, #0
 80016bc:	73fb      	strb	r3, [r7, #15]
  uint16_t available = tu_fifo_remaining(&p_cdc->rx_ff);
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	3310      	adds	r3, #16
 80016c2:	4618      	mov	r0, r3
 80016c4:	f002 fb37 	bl	8003d36 <tu_fifo_remaining>
 80016c8:	4603      	mov	r3, r0
 80016ca:	81bb      	strh	r3, [r7, #12]

  // Prepare for incoming data but only allow what we can store in the ring buffer.
  // TODO Actually we can still carry out the transfer, keeping count of received bytes
  // and slowly move it to the FIFO when read().
  // This pre-check reduces endpoint claiming
  TU_VERIFY(available >= sizeof(p_cdc->epout_buf));
 80016cc:	89bb      	ldrh	r3, [r7, #12]
 80016ce:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80016d2:	d201      	bcs.n	80016d8 <_prep_out_transaction+0x26>
 80016d4:	2300      	movs	r3, #0
 80016d6:	e02d      	b.n	8001734 <_prep_out_transaction+0x82>

  // claim endpoint
  TU_VERIFY(usbd_edpt_claim(rhport, p_cdc->ep_out));
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	78da      	ldrb	r2, [r3, #3]
 80016dc:	7bfb      	ldrb	r3, [r7, #15]
 80016de:	4611      	mov	r1, r2
 80016e0:	4618      	mov	r0, r3
 80016e2:	f003 fe89 	bl	80053f8 <usbd_edpt_claim>
 80016e6:	4603      	mov	r3, r0
 80016e8:	f083 0301 	eor.w	r3, r3, #1
 80016ec:	b2db      	uxtb	r3, r3
 80016ee:	2b00      	cmp	r3, #0
 80016f0:	d001      	beq.n	80016f6 <_prep_out_transaction+0x44>
 80016f2:	2300      	movs	r3, #0
 80016f4:	e01e      	b.n	8001734 <_prep_out_transaction+0x82>

  // fifo can be changed before endpoint is claimed
  available = tu_fifo_remaining(&p_cdc->rx_ff);
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	3310      	adds	r3, #16
 80016fa:	4618      	mov	r0, r3
 80016fc:	f002 fb1b 	bl	8003d36 <tu_fifo_remaining>
 8001700:	4603      	mov	r3, r0
 8001702:	81bb      	strh	r3, [r7, #12]

  if ( available >= sizeof(p_cdc->epout_buf) )
 8001704:	89bb      	ldrh	r3, [r7, #12]
 8001706:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800170a:	d30b      	bcc.n	8001724 <_prep_out_transaction+0x72>
  {
    return usbd_edpt_xfer(rhport, p_cdc->ep_out, p_cdc->epout_buf, sizeof(p_cdc->epout_buf));
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	78d9      	ldrb	r1, [r3, #3]
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	f503 6285 	add.w	r2, r3, #1064	; 0x428
 8001716:	7bf8      	ldrb	r0, [r7, #15]
 8001718:	f44f 7300 	mov.w	r3, #512	; 0x200
 800171c:	f003 fec0 	bl	80054a0 <usbd_edpt_xfer>
 8001720:	4603      	mov	r3, r0
 8001722:	e007      	b.n	8001734 <_prep_out_transaction+0x82>
  }else
  {
    // Release endpoint since we don't make any transfer
    usbd_edpt_release(rhport, p_cdc->ep_out);
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	78da      	ldrb	r2, [r3, #3]
 8001728:	7bfb      	ldrb	r3, [r7, #15]
 800172a:	4611      	mov	r1, r2
 800172c:	4618      	mov	r0, r3
 800172e:	f003 fe8d 	bl	800544c <usbd_edpt_release>

    return false;
 8001732:	2300      	movs	r3, #0
  }
}
 8001734:	4618      	mov	r0, r3
 8001736:	3710      	adds	r7, #16
 8001738:	46bd      	mov	sp, r7
 800173a:	bd80      	pop	{r7, pc}

0800173c <tud_cdc_n_available>:

//--------------------------------------------------------------------+
// READ API
//--------------------------------------------------------------------+
uint32_t tud_cdc_n_available(uint8_t itf)
{
 800173c:	b580      	push	{r7, lr}
 800173e:	b082      	sub	sp, #8
 8001740:	af00      	add	r7, sp, #0
 8001742:	4603      	mov	r3, r0
 8001744:	71fb      	strb	r3, [r7, #7]
  return tu_fifo_count(&_cdcd_itf[itf].rx_ff);
 8001746:	79fb      	ldrb	r3, [r7, #7]
 8001748:	f640 0228 	movw	r2, #2088	; 0x828
 800174c:	fb02 f303 	mul.w	r3, r2, r3
 8001750:	3310      	adds	r3, #16
 8001752:	4a05      	ldr	r2, [pc, #20]	; (8001768 <tud_cdc_n_available+0x2c>)
 8001754:	4413      	add	r3, r2
 8001756:	4618      	mov	r0, r3
 8001758:	f002 fa78 	bl	8003c4c <tu_fifo_count>
 800175c:	4603      	mov	r3, r0
}
 800175e:	4618      	mov	r0, r3
 8001760:	3708      	adds	r7, #8
 8001762:	46bd      	mov	sp, r7
 8001764:	bd80      	pop	{r7, pc}
 8001766:	bf00      	nop
 8001768:	24000728 	.word	0x24000728

0800176c <tud_cdc_n_read>:

uint32_t tud_cdc_n_read(uint8_t itf, void* buffer, uint32_t bufsize)
{
 800176c:	b580      	push	{r7, lr}
 800176e:	b086      	sub	sp, #24
 8001770:	af00      	add	r7, sp, #0
 8001772:	4603      	mov	r3, r0
 8001774:	60b9      	str	r1, [r7, #8]
 8001776:	607a      	str	r2, [r7, #4]
 8001778:	73fb      	strb	r3, [r7, #15]
  cdcd_interface_t* p_cdc = &_cdcd_itf[itf];
 800177a:	7bfb      	ldrb	r3, [r7, #15]
 800177c:	f640 0228 	movw	r2, #2088	; 0x828
 8001780:	fb02 f303 	mul.w	r3, r2, r3
 8001784:	4a0e      	ldr	r2, [pc, #56]	; (80017c0 <tud_cdc_n_read+0x54>)
 8001786:	4413      	add	r3, r2
 8001788:	617b      	str	r3, [r7, #20]
  uint32_t num_read = tu_fifo_read_n(&p_cdc->rx_ff, buffer, (uint16_t) TU_MIN(bufsize, UINT16_MAX));
 800178a:	697b      	ldr	r3, [r7, #20]
 800178c:	f103 0010 	add.w	r0, r3, #16
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8001796:	4293      	cmp	r3, r2
 8001798:	d802      	bhi.n	80017a0 <tud_cdc_n_read+0x34>
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	b29b      	uxth	r3, r3
 800179e:	e001      	b.n	80017a4 <tud_cdc_n_read+0x38>
 80017a0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80017a4:	461a      	mov	r2, r3
 80017a6:	68b9      	ldr	r1, [r7, #8]
 80017a8:	f002 fb21 	bl	8003dee <tu_fifo_read_n>
 80017ac:	4603      	mov	r3, r0
 80017ae:	613b      	str	r3, [r7, #16]
  _prep_out_transaction(p_cdc);
 80017b0:	6978      	ldr	r0, [r7, #20]
 80017b2:	f7ff ff7e 	bl	80016b2 <_prep_out_transaction>
  return num_read;
 80017b6:	693b      	ldr	r3, [r7, #16]
}
 80017b8:	4618      	mov	r0, r3
 80017ba:	3718      	adds	r7, #24
 80017bc:	46bd      	mov	sp, r7
 80017be:	bd80      	pop	{r7, pc}
 80017c0:	24000728 	.word	0x24000728

080017c4 <tud_cdc_n_write>:

//--------------------------------------------------------------------+
// WRITE API
//--------------------------------------------------------------------+
uint32_t tud_cdc_n_write(uint8_t itf, void const* buffer, uint32_t bufsize)
{
 80017c4:	b580      	push	{r7, lr}
 80017c6:	b086      	sub	sp, #24
 80017c8:	af00      	add	r7, sp, #0
 80017ca:	4603      	mov	r3, r0
 80017cc:	60b9      	str	r1, [r7, #8]
 80017ce:	607a      	str	r2, [r7, #4]
 80017d0:	73fb      	strb	r3, [r7, #15]
  cdcd_interface_t* p_cdc = &_cdcd_itf[itf];
 80017d2:	7bfb      	ldrb	r3, [r7, #15]
 80017d4:	f640 0228 	movw	r2, #2088	; 0x828
 80017d8:	fb02 f303 	mul.w	r3, r2, r3
 80017dc:	4a13      	ldr	r2, [pc, #76]	; (800182c <tud_cdc_n_write+0x68>)
 80017de:	4413      	add	r3, r2
 80017e0:	617b      	str	r3, [r7, #20]
  uint16_t ret = tu_fifo_write_n(&p_cdc->tx_ff, buffer, (uint16_t) TU_MIN(bufsize, UINT16_MAX));
 80017e2:	697b      	ldr	r3, [r7, #20]
 80017e4:	f103 001c 	add.w	r0, r3, #28
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 80017ee:	4293      	cmp	r3, r2
 80017f0:	d802      	bhi.n	80017f8 <tud_cdc_n_write+0x34>
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	b29b      	uxth	r3, r3
 80017f6:	e001      	b.n	80017fc <tud_cdc_n_write+0x38>
 80017f8:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80017fc:	461a      	mov	r2, r3
 80017fe:	68b9      	ldr	r1, [r7, #8]
 8001800:	f002 fb5c 	bl	8003ebc <tu_fifo_write_n>
 8001804:	4603      	mov	r3, r0
 8001806:	827b      	strh	r3, [r7, #18]

  // flush if queue more than packet size
  // may need to suppress -Wunreachable-code since most of the time CFG_TUD_CDC_TX_BUFSIZE < BULK_PACKET_SIZE
  if ( (tu_fifo_count(&p_cdc->tx_ff) >= BULK_PACKET_SIZE) || ((CFG_TUD_CDC_TX_BUFSIZE < BULK_PACKET_SIZE) && tu_fifo_full(&p_cdc->tx_ff)) )
 8001808:	697b      	ldr	r3, [r7, #20]
 800180a:	331c      	adds	r3, #28
 800180c:	4618      	mov	r0, r3
 800180e:	f002 fa1d 	bl	8003c4c <tu_fifo_count>
 8001812:	4603      	mov	r3, r0
 8001814:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001818:	d303      	bcc.n	8001822 <tud_cdc_n_write+0x5e>
  {
    tud_cdc_n_write_flush(itf);
 800181a:	7bfb      	ldrb	r3, [r7, #15]
 800181c:	4618      	mov	r0, r3
 800181e:	f000 f807 	bl	8001830 <tud_cdc_n_write_flush>
  }

  return ret;
 8001822:	8a7b      	ldrh	r3, [r7, #18]
}
 8001824:	4618      	mov	r0, r3
 8001826:	3718      	adds	r7, #24
 8001828:	46bd      	mov	sp, r7
 800182a:	bd80      	pop	{r7, pc}
 800182c:	24000728 	.word	0x24000728

08001830 <tud_cdc_n_write_flush>:

uint32_t tud_cdc_n_write_flush (uint8_t itf)
{
 8001830:	b580      	push	{r7, lr}
 8001832:	b086      	sub	sp, #24
 8001834:	af00      	add	r7, sp, #0
 8001836:	4603      	mov	r3, r0
 8001838:	71fb      	strb	r3, [r7, #7]
  cdcd_interface_t* p_cdc = &_cdcd_itf[itf];
 800183a:	79fb      	ldrb	r3, [r7, #7]
 800183c:	f640 0228 	movw	r2, #2088	; 0x828
 8001840:	fb02 f303 	mul.w	r3, r2, r3
 8001844:	4a37      	ldr	r2, [pc, #220]	; (8001924 <tud_cdc_n_write_flush+0xf4>)
 8001846:	4413      	add	r3, r2
 8001848:	617b      	str	r3, [r7, #20]
bool tud_suspended(void);

// Check if device is ready to transfer
TU_ATTR_ALWAYS_INLINE static inline
bool tud_ready(void) {
  return tud_mounted() && !tud_suspended();
 800184a:	f002 fb99 	bl	8003f80 <tud_mounted>
 800184e:	4603      	mov	r3, r0
 8001850:	2b00      	cmp	r3, #0
 8001852:	d009      	beq.n	8001868 <tud_cdc_n_write_flush+0x38>
 8001854:	f002 fba6 	bl	8003fa4 <tud_suspended>
 8001858:	4603      	mov	r3, r0
 800185a:	f083 0301 	eor.w	r3, r3, #1
 800185e:	b2db      	uxtb	r3, r3
 8001860:	2b00      	cmp	r3, #0
 8001862:	d001      	beq.n	8001868 <tud_cdc_n_write_flush+0x38>
 8001864:	2301      	movs	r3, #1
 8001866:	e000      	b.n	800186a <tud_cdc_n_write_flush+0x3a>
 8001868:	2300      	movs	r3, #0
 800186a:	f003 0301 	and.w	r3, r3, #1
 800186e:	b2db      	uxtb	r3, r3

  // Skip if usb is not ready yet
  TU_VERIFY( tud_ready(), 0 );
 8001870:	f083 0301 	eor.w	r3, r3, #1
 8001874:	b2db      	uxtb	r3, r3
 8001876:	2b00      	cmp	r3, #0
 8001878:	d001      	beq.n	800187e <tud_cdc_n_write_flush+0x4e>
 800187a:	2300      	movs	r3, #0
 800187c:	e04e      	b.n	800191c <tud_cdc_n_write_flush+0xec>

  // No data to send
  if ( !tu_fifo_count(&p_cdc->tx_ff) ) return 0;
 800187e:	697b      	ldr	r3, [r7, #20]
 8001880:	331c      	adds	r3, #28
 8001882:	4618      	mov	r0, r3
 8001884:	f002 f9e2 	bl	8003c4c <tu_fifo_count>
 8001888:	4603      	mov	r3, r0
 800188a:	2b00      	cmp	r3, #0
 800188c:	d101      	bne.n	8001892 <tud_cdc_n_write_flush+0x62>
 800188e:	2300      	movs	r3, #0
 8001890:	e044      	b.n	800191c <tud_cdc_n_write_flush+0xec>

  uint8_t const rhport = 0;
 8001892:	2300      	movs	r3, #0
 8001894:	74fb      	strb	r3, [r7, #19]

  // Claim the endpoint
  TU_VERIFY( usbd_edpt_claim(rhport, p_cdc->ep_in), 0 );
 8001896:	697b      	ldr	r3, [r7, #20]
 8001898:	789a      	ldrb	r2, [r3, #2]
 800189a:	7cfb      	ldrb	r3, [r7, #19]
 800189c:	4611      	mov	r1, r2
 800189e:	4618      	mov	r0, r3
 80018a0:	f003 fdaa 	bl	80053f8 <usbd_edpt_claim>
 80018a4:	4603      	mov	r3, r0
 80018a6:	f083 0301 	eor.w	r3, r3, #1
 80018aa:	b2db      	uxtb	r3, r3
 80018ac:	2b00      	cmp	r3, #0
 80018ae:	d001      	beq.n	80018b4 <tud_cdc_n_write_flush+0x84>
 80018b0:	2300      	movs	r3, #0
 80018b2:	e033      	b.n	800191c <tud_cdc_n_write_flush+0xec>

  // Pull data from FIFO
  uint16_t const count = tu_fifo_read_n(&p_cdc->tx_ff, p_cdc->epin_buf, sizeof(p_cdc->epin_buf));
 80018b4:	697b      	ldr	r3, [r7, #20]
 80018b6:	f103 001c 	add.w	r0, r3, #28
 80018ba:	697b      	ldr	r3, [r7, #20]
 80018bc:	f503 63c5 	add.w	r3, r3, #1576	; 0x628
 80018c0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80018c4:	4619      	mov	r1, r3
 80018c6:	f002 fa92 	bl	8003dee <tu_fifo_read_n>
 80018ca:	4603      	mov	r3, r0
 80018cc:	823b      	strh	r3, [r7, #16]

  if ( count )
 80018ce:	8a3b      	ldrh	r3, [r7, #16]
 80018d0:	2b00      	cmp	r3, #0
 80018d2:	d01b      	beq.n	800190c <tud_cdc_n_write_flush+0xdc>
  {
    TU_ASSERT( usbd_edpt_xfer(rhport, p_cdc->ep_in, p_cdc->epin_buf, count), 0 );
 80018d4:	697b      	ldr	r3, [r7, #20]
 80018d6:	7899      	ldrb	r1, [r3, #2]
 80018d8:	697b      	ldr	r3, [r7, #20]
 80018da:	f503 62c5 	add.w	r2, r3, #1576	; 0x628
 80018de:	8a3b      	ldrh	r3, [r7, #16]
 80018e0:	7cf8      	ldrb	r0, [r7, #19]
 80018e2:	f003 fddd 	bl	80054a0 <usbd_edpt_xfer>
 80018e6:	4603      	mov	r3, r0
 80018e8:	f083 0301 	eor.w	r3, r3, #1
 80018ec:	b2db      	uxtb	r3, r3
 80018ee:	2b00      	cmp	r3, #0
 80018f0:	d00a      	beq.n	8001908 <tud_cdc_n_write_flush+0xd8>
 80018f2:	4b0d      	ldr	r3, [pc, #52]	; (8001928 <tud_cdc_n_write_flush+0xf8>)
 80018f4:	60fb      	str	r3, [r7, #12]
 80018f6:	68fb      	ldr	r3, [r7, #12]
 80018f8:	681b      	ldr	r3, [r3, #0]
 80018fa:	f003 0301 	and.w	r3, r3, #1
 80018fe:	2b00      	cmp	r3, #0
 8001900:	d000      	beq.n	8001904 <tud_cdc_n_write_flush+0xd4>
 8001902:	be00      	bkpt	0x0000
 8001904:	2300      	movs	r3, #0
 8001906:	e009      	b.n	800191c <tud_cdc_n_write_flush+0xec>
    return count;
 8001908:	8a3b      	ldrh	r3, [r7, #16]
 800190a:	e007      	b.n	800191c <tud_cdc_n_write_flush+0xec>
  }else
  {
    // Release endpoint since we don't make any transfer
    // Note: data is dropped if terminal is not connected
    usbd_edpt_release(rhport, p_cdc->ep_in);
 800190c:	697b      	ldr	r3, [r7, #20]
 800190e:	789a      	ldrb	r2, [r3, #2]
 8001910:	7cfb      	ldrb	r3, [r7, #19]
 8001912:	4611      	mov	r1, r2
 8001914:	4618      	mov	r0, r3
 8001916:	f003 fd99 	bl	800544c <usbd_edpt_release>
    return 0;
 800191a:	2300      	movs	r3, #0
  }
}
 800191c:	4618      	mov	r0, r3
 800191e:	3718      	adds	r7, #24
 8001920:	46bd      	mov	sp, r7
 8001922:	bd80      	pop	{r7, pc}
 8001924:	24000728 	.word	0x24000728
 8001928:	e000edf0 	.word	0xe000edf0

0800192c <cdcd_init>:

//--------------------------------------------------------------------+
// USBD Driver API
//--------------------------------------------------------------------+
void cdcd_init(void)
{
 800192c:	b580      	push	{r7, lr}
 800192e:	b084      	sub	sp, #16
 8001930:	af02      	add	r7, sp, #8
  tu_memclr(_cdcd_itf, sizeof(_cdcd_itf));
 8001932:	f640 0228 	movw	r2, #2088	; 0x828
 8001936:	2100      	movs	r1, #0
 8001938:	4821      	ldr	r0, [pc, #132]	; (80019c0 <cdcd_init+0x94>)
 800193a:	f00e fb4a 	bl	800ffd2 <memset>

  for(uint8_t i=0; i<CFG_TUD_CDC; i++)
 800193e:	2300      	movs	r3, #0
 8001940:	71fb      	strb	r3, [r7, #7]
 8001942:	e034      	b.n	80019ae <cdcd_init+0x82>
  {
    cdcd_interface_t* p_cdc = &_cdcd_itf[i];
 8001944:	79fb      	ldrb	r3, [r7, #7]
 8001946:	f640 0228 	movw	r2, #2088	; 0x828
 800194a:	fb02 f303 	mul.w	r3, r2, r3
 800194e:	4a1c      	ldr	r2, [pc, #112]	; (80019c0 <cdcd_init+0x94>)
 8001950:	4413      	add	r3, r2
 8001952:	603b      	str	r3, [r7, #0]

    p_cdc->wanted_char = (char) -1;
 8001954:	683b      	ldr	r3, [r7, #0]
 8001956:	22ff      	movs	r2, #255	; 0xff
 8001958:	715a      	strb	r2, [r3, #5]

    // default line coding is : stop bit = 1, parity = none, data bits = 8
    p_cdc->line_coding.bit_rate  = 115200;
 800195a:	683b      	ldr	r3, [r7, #0]
 800195c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001960:	609a      	str	r2, [r3, #8]
    p_cdc->line_coding.stop_bits = 0;
 8001962:	683b      	ldr	r3, [r7, #0]
 8001964:	2200      	movs	r2, #0
 8001966:	731a      	strb	r2, [r3, #12]
    p_cdc->line_coding.parity    = 0;
 8001968:	683b      	ldr	r3, [r7, #0]
 800196a:	2200      	movs	r2, #0
 800196c:	735a      	strb	r2, [r3, #13]
    p_cdc->line_coding.data_bits = 8;
 800196e:	683b      	ldr	r3, [r7, #0]
 8001970:	2208      	movs	r2, #8
 8001972:	739a      	strb	r2, [r3, #14]

    // Config RX fifo
    tu_fifo_config(&p_cdc->rx_ff, p_cdc->rx_ff_buf, TU_ARRAY_SIZE(p_cdc->rx_ff_buf), 1, false);
 8001974:	683b      	ldr	r3, [r7, #0]
 8001976:	f103 0010 	add.w	r0, r3, #16
 800197a:	683b      	ldr	r3, [r7, #0]
 800197c:	f103 0128 	add.w	r1, r3, #40	; 0x28
 8001980:	2300      	movs	r3, #0
 8001982:	9300      	str	r3, [sp, #0]
 8001984:	2301      	movs	r3, #1
 8001986:	f44f 7200 	mov.w	r2, #512	; 0x200
 800198a:	f001 fccd 	bl	8003328 <tu_fifo_config>

    // Config TX fifo as overwritable at initialization and will be changed to non-overwritable
    // if terminal supports DTR bit. Without DTR we do not know if data is actually polled by terminal.
    // In this way, the most current data is prioritized.
    tu_fifo_config(&p_cdc->tx_ff, p_cdc->tx_ff_buf, TU_ARRAY_SIZE(p_cdc->tx_ff_buf), 1, true);
 800198e:	683b      	ldr	r3, [r7, #0]
 8001990:	f103 001c 	add.w	r0, r3, #28
 8001994:	683b      	ldr	r3, [r7, #0]
 8001996:	f503 710a 	add.w	r1, r3, #552	; 0x228
 800199a:	2301      	movs	r3, #1
 800199c:	9300      	str	r3, [sp, #0]
 800199e:	2301      	movs	r3, #1
 80019a0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80019a4:	f001 fcc0 	bl	8003328 <tu_fifo_config>
  for(uint8_t i=0; i<CFG_TUD_CDC; i++)
 80019a8:	79fb      	ldrb	r3, [r7, #7]
 80019aa:	3301      	adds	r3, #1
 80019ac:	71fb      	strb	r3, [r7, #7]
 80019ae:	79fb      	ldrb	r3, [r7, #7]
 80019b0:	2b00      	cmp	r3, #0
 80019b2:	d0c7      	beq.n	8001944 <cdcd_init+0x18>

    tu_fifo_config_mutex(&p_cdc->rx_ff, NULL, osal_mutex_create(&p_cdc->rx_ff_mutex));
    tu_fifo_config_mutex(&p_cdc->tx_ff, osal_mutex_create(&p_cdc->tx_ff_mutex), NULL);
  }
}
 80019b4:	bf00      	nop
 80019b6:	bf00      	nop
 80019b8:	3708      	adds	r7, #8
 80019ba:	46bd      	mov	sp, r7
 80019bc:	bd80      	pop	{r7, pc}
 80019be:	bf00      	nop
 80019c0:	24000728 	.word	0x24000728

080019c4 <cdcd_reset>:

void cdcd_reset(uint8_t rhport)
{
 80019c4:	b580      	push	{r7, lr}
 80019c6:	b084      	sub	sp, #16
 80019c8:	af00      	add	r7, sp, #0
 80019ca:	4603      	mov	r3, r0
 80019cc:	71fb      	strb	r3, [r7, #7]
  (void) rhport;

  for(uint8_t i=0; i<CFG_TUD_CDC; i++)
 80019ce:	2300      	movs	r3, #0
 80019d0:	73fb      	strb	r3, [r7, #15]
 80019d2:	e01f      	b.n	8001a14 <cdcd_reset+0x50>
  {
    cdcd_interface_t* p_cdc = &_cdcd_itf[i];
 80019d4:	7bfb      	ldrb	r3, [r7, #15]
 80019d6:	f640 0228 	movw	r2, #2088	; 0x828
 80019da:	fb02 f303 	mul.w	r3, r2, r3
 80019de:	4a11      	ldr	r2, [pc, #68]	; (8001a24 <cdcd_reset+0x60>)
 80019e0:	4413      	add	r3, r2
 80019e2:	60bb      	str	r3, [r7, #8]

    tu_memclr(p_cdc, ITF_MEM_RESET_SIZE);
 80019e4:	2205      	movs	r2, #5
 80019e6:	2100      	movs	r1, #0
 80019e8:	68b8      	ldr	r0, [r7, #8]
 80019ea:	f00e faf2 	bl	800ffd2 <memset>
    tu_fifo_clear(&p_cdc->rx_ff);
 80019ee:	68bb      	ldr	r3, [r7, #8]
 80019f0:	3310      	adds	r3, #16
 80019f2:	4618      	mov	r0, r3
 80019f4:	f002 fa86 	bl	8003f04 <tu_fifo_clear>
    tu_fifo_clear(&p_cdc->tx_ff);
 80019f8:	68bb      	ldr	r3, [r7, #8]
 80019fa:	331c      	adds	r3, #28
 80019fc:	4618      	mov	r0, r3
 80019fe:	f002 fa81 	bl	8003f04 <tu_fifo_clear>
    tu_fifo_set_overwritable(&p_cdc->tx_ff, true);
 8001a02:	68bb      	ldr	r3, [r7, #8]
 8001a04:	331c      	adds	r3, #28
 8001a06:	2101      	movs	r1, #1
 8001a08:	4618      	mov	r0, r3
 8001a0a:	f002 fa8c 	bl	8003f26 <tu_fifo_set_overwritable>
  for(uint8_t i=0; i<CFG_TUD_CDC; i++)
 8001a0e:	7bfb      	ldrb	r3, [r7, #15]
 8001a10:	3301      	adds	r3, #1
 8001a12:	73fb      	strb	r3, [r7, #15]
 8001a14:	7bfb      	ldrb	r3, [r7, #15]
 8001a16:	2b00      	cmp	r3, #0
 8001a18:	d0dc      	beq.n	80019d4 <cdcd_reset+0x10>
  }
}
 8001a1a:	bf00      	nop
 8001a1c:	bf00      	nop
 8001a1e:	3710      	adds	r7, #16
 8001a20:	46bd      	mov	sp, r7
 8001a22:	bd80      	pop	{r7, pc}
 8001a24:	24000728 	.word	0x24000728

08001a28 <cdcd_open>:

uint16_t cdcd_open(uint8_t rhport, tusb_desc_interface_t const * itf_desc, uint16_t max_len)
{
 8001a28:	b580      	push	{r7, lr}
 8001a2a:	b09a      	sub	sp, #104	; 0x68
 8001a2c:	af02      	add	r7, sp, #8
 8001a2e:	4603      	mov	r3, r0
 8001a30:	6039      	str	r1, [r7, #0]
 8001a32:	71fb      	strb	r3, [r7, #7]
 8001a34:	4613      	mov	r3, r2
 8001a36:	80bb      	strh	r3, [r7, #4]
  // Only support ACM subclass
  TU_VERIFY( TUSB_CLASS_CDC                           == itf_desc->bInterfaceClass &&
 8001a38:	683b      	ldr	r3, [r7, #0]
 8001a3a:	795b      	ldrb	r3, [r3, #5]
 8001a3c:	2b02      	cmp	r3, #2
 8001a3e:	d103      	bne.n	8001a48 <cdcd_open+0x20>
 8001a40:	683b      	ldr	r3, [r7, #0]
 8001a42:	799b      	ldrb	r3, [r3, #6]
 8001a44:	2b02      	cmp	r3, #2
 8001a46:	d001      	beq.n	8001a4c <cdcd_open+0x24>
 8001a48:	2300      	movs	r3, #0
 8001a4a:	e0e1      	b.n	8001c10 <cdcd_open+0x1e8>
             CDC_COMM_SUBCLASS_ABSTRACT_CONTROL_MODEL == itf_desc->bInterfaceSubClass, 0);

  // Find available interface
  cdcd_interface_t * p_cdc = NULL;
 8001a4c:	2300      	movs	r3, #0
 8001a4e:	65fb      	str	r3, [r7, #92]	; 0x5c
  for(uint8_t cdc_id=0; cdc_id<CFG_TUD_CDC; cdc_id++)
 8001a50:	2300      	movs	r3, #0
 8001a52:	f887 305b 	strb.w	r3, [r7, #91]	; 0x5b
 8001a56:	e01a      	b.n	8001a8e <cdcd_open+0x66>
  {
    if ( _cdcd_itf[cdc_id].ep_in == 0 )
 8001a58:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
 8001a5c:	4a6e      	ldr	r2, [pc, #440]	; (8001c18 <cdcd_open+0x1f0>)
 8001a5e:	f640 0128 	movw	r1, #2088	; 0x828
 8001a62:	fb01 f303 	mul.w	r3, r1, r3
 8001a66:	4413      	add	r3, r2
 8001a68:	3302      	adds	r3, #2
 8001a6a:	781b      	ldrb	r3, [r3, #0]
 8001a6c:	2b00      	cmp	r3, #0
 8001a6e:	d109      	bne.n	8001a84 <cdcd_open+0x5c>
    {
      p_cdc = &_cdcd_itf[cdc_id];
 8001a70:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
 8001a74:	f640 0228 	movw	r2, #2088	; 0x828
 8001a78:	fb02 f303 	mul.w	r3, r2, r3
 8001a7c:	4a66      	ldr	r2, [pc, #408]	; (8001c18 <cdcd_open+0x1f0>)
 8001a7e:	4413      	add	r3, r2
 8001a80:	65fb      	str	r3, [r7, #92]	; 0x5c
      break;
 8001a82:	e008      	b.n	8001a96 <cdcd_open+0x6e>
  for(uint8_t cdc_id=0; cdc_id<CFG_TUD_CDC; cdc_id++)
 8001a84:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
 8001a88:	3301      	adds	r3, #1
 8001a8a:	f887 305b 	strb.w	r3, [r7, #91]	; 0x5b
 8001a8e:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
 8001a92:	2b00      	cmp	r3, #0
 8001a94:	d0e0      	beq.n	8001a58 <cdcd_open+0x30>
    }
  }
  TU_ASSERT(p_cdc, 0);
 8001a96:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001a98:	2b00      	cmp	r3, #0
 8001a9a:	d10a      	bne.n	8001ab2 <cdcd_open+0x8a>
 8001a9c:	4b5f      	ldr	r3, [pc, #380]	; (8001c1c <cdcd_open+0x1f4>)
 8001a9e:	647b      	str	r3, [r7, #68]	; 0x44
 8001aa0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001aa2:	681b      	ldr	r3, [r3, #0]
 8001aa4:	f003 0301 	and.w	r3, r3, #1
 8001aa8:	2b00      	cmp	r3, #0
 8001aaa:	d000      	beq.n	8001aae <cdcd_open+0x86>
 8001aac:	be00      	bkpt	0x0000
 8001aae:	2300      	movs	r3, #0
 8001ab0:	e0ae      	b.n	8001c10 <cdcd_open+0x1e8>

  //------------- Control Interface -------------//
  p_cdc->itf_num = itf_desc->bInterfaceNumber;
 8001ab2:	683b      	ldr	r3, [r7, #0]
 8001ab4:	789a      	ldrb	r2, [r3, #2]
 8001ab6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001ab8:	701a      	strb	r2, [r3, #0]

  uint16_t drv_len = sizeof(tusb_desc_interface_t);
 8001aba:	2309      	movs	r3, #9
 8001abc:	f8a7 3058 	strh.w	r3, [r7, #88]	; 0x58
 8001ac0:	683b      	ldr	r3, [r7, #0]
 8001ac2:	643b      	str	r3, [r7, #64]	; 0x40
//--------------------------------------------------------------------+

// return next descriptor
TU_ATTR_ALWAYS_INLINE static inline uint8_t const * tu_desc_next(void const* desc)
{
  uint8_t const* desc8 = (uint8_t const*) desc;
 8001ac4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001ac6:	63fb      	str	r3, [r7, #60]	; 0x3c
  return desc8 + desc8[DESC_OFFSET_LEN];
 8001ac8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001aca:	781b      	ldrb	r3, [r3, #0]
 8001acc:	461a      	mov	r2, r3
 8001ace:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001ad0:	4413      	add	r3, r2
  uint8_t const * p_desc = tu_desc_next( itf_desc );
 8001ad2:	657b      	str	r3, [r7, #84]	; 0x54

  // Communication Functional Descriptors
  while ( TUSB_DESC_CS_INTERFACE == tu_desc_type(p_desc) && drv_len <= max_len )
 8001ad4:	e013      	b.n	8001afe <cdcd_open+0xd6>
 8001ad6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001ad8:	633b      	str	r3, [r7, #48]	; 0x30
}

// get descriptor length
TU_ATTR_ALWAYS_INLINE static inline uint8_t tu_desc_len(void const* desc)
{
  return ((uint8_t const*) desc)[DESC_OFFSET_LEN];
 8001ada:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001adc:	781b      	ldrb	r3, [r3, #0]
  {
    drv_len += tu_desc_len(p_desc);
 8001ade:	b29a      	uxth	r2, r3
 8001ae0:	f8b7 3058 	ldrh.w	r3, [r7, #88]	; 0x58
 8001ae4:	4413      	add	r3, r2
 8001ae6:	f8a7 3058 	strh.w	r3, [r7, #88]	; 0x58
 8001aea:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001aec:	63bb      	str	r3, [r7, #56]	; 0x38
  uint8_t const* desc8 = (uint8_t const*) desc;
 8001aee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001af0:	637b      	str	r3, [r7, #52]	; 0x34
  return desc8 + desc8[DESC_OFFSET_LEN];
 8001af2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001af4:	781b      	ldrb	r3, [r3, #0]
 8001af6:	461a      	mov	r2, r3
 8001af8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001afa:	4413      	add	r3, r2
    p_desc   = tu_desc_next(p_desc);
 8001afc:	657b      	str	r3, [r7, #84]	; 0x54
 8001afe:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001b00:	62fb      	str	r3, [r7, #44]	; 0x2c
  return ((uint8_t const*) desc)[DESC_OFFSET_TYPE];
 8001b02:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001b04:	3301      	adds	r3, #1
 8001b06:	781b      	ldrb	r3, [r3, #0]
  while ( TUSB_DESC_CS_INTERFACE == tu_desc_type(p_desc) && drv_len <= max_len )
 8001b08:	2b24      	cmp	r3, #36	; 0x24
 8001b0a:	d104      	bne.n	8001b16 <cdcd_open+0xee>
 8001b0c:	f8b7 2058 	ldrh.w	r2, [r7, #88]	; 0x58
 8001b10:	88bb      	ldrh	r3, [r7, #4]
 8001b12:	429a      	cmp	r2, r3
 8001b14:	d9df      	bls.n	8001ad6 <cdcd_open+0xae>
 8001b16:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001b18:	62bb      	str	r3, [r7, #40]	; 0x28
 8001b1a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001b1c:	3301      	adds	r3, #1
 8001b1e:	781b      	ldrb	r3, [r3, #0]
  }

  if ( TUSB_DESC_ENDPOINT == tu_desc_type(p_desc) )
 8001b20:	2b05      	cmp	r3, #5
 8001b22:	d12f      	bne.n	8001b84 <cdcd_open+0x15c>
  {
    // notification endpoint
    tusb_desc_endpoint_t const * desc_ep = (tusb_desc_endpoint_t const *) p_desc;
 8001b24:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001b26:	653b      	str	r3, [r7, #80]	; 0x50

    TU_ASSERT( usbd_edpt_open(rhport, desc_ep), 0 );
 8001b28:	79fb      	ldrb	r3, [r7, #7]
 8001b2a:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8001b2c:	4618      	mov	r0, r3
 8001b2e:	f003 fc1f 	bl	8005370 <usbd_edpt_open>
 8001b32:	4603      	mov	r3, r0
 8001b34:	f083 0301 	eor.w	r3, r3, #1
 8001b38:	b2db      	uxtb	r3, r3
 8001b3a:	2b00      	cmp	r3, #0
 8001b3c:	d00a      	beq.n	8001b54 <cdcd_open+0x12c>
 8001b3e:	4b37      	ldr	r3, [pc, #220]	; (8001c1c <cdcd_open+0x1f4>)
 8001b40:	64fb      	str	r3, [r7, #76]	; 0x4c
 8001b42:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001b44:	681b      	ldr	r3, [r3, #0]
 8001b46:	f003 0301 	and.w	r3, r3, #1
 8001b4a:	2b00      	cmp	r3, #0
 8001b4c:	d000      	beq.n	8001b50 <cdcd_open+0x128>
 8001b4e:	be00      	bkpt	0x0000
 8001b50:	2300      	movs	r3, #0
 8001b52:	e05d      	b.n	8001c10 <cdcd_open+0x1e8>
    p_cdc->ep_notif = desc_ep->bEndpointAddress;
 8001b54:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001b56:	789a      	ldrb	r2, [r3, #2]
 8001b58:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001b5a:	705a      	strb	r2, [r3, #1]
 8001b5c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001b5e:	61fb      	str	r3, [r7, #28]
  return ((uint8_t const*) desc)[DESC_OFFSET_LEN];
 8001b60:	69fb      	ldr	r3, [r7, #28]
 8001b62:	781b      	ldrb	r3, [r3, #0]

    drv_len += tu_desc_len(p_desc);
 8001b64:	b29a      	uxth	r2, r3
 8001b66:	f8b7 3058 	ldrh.w	r3, [r7, #88]	; 0x58
 8001b6a:	4413      	add	r3, r2
 8001b6c:	f8a7 3058 	strh.w	r3, [r7, #88]	; 0x58
 8001b70:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001b72:	627b      	str	r3, [r7, #36]	; 0x24
  uint8_t const* desc8 = (uint8_t const*) desc;
 8001b74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b76:	623b      	str	r3, [r7, #32]
  return desc8 + desc8[DESC_OFFSET_LEN];
 8001b78:	6a3b      	ldr	r3, [r7, #32]
 8001b7a:	781b      	ldrb	r3, [r3, #0]
 8001b7c:	461a      	mov	r2, r3
 8001b7e:	6a3b      	ldr	r3, [r7, #32]
 8001b80:	4413      	add	r3, r2
    p_desc   = tu_desc_next(p_desc);
 8001b82:	657b      	str	r3, [r7, #84]	; 0x54
 8001b84:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001b86:	61bb      	str	r3, [r7, #24]
  return ((uint8_t const*) desc)[DESC_OFFSET_TYPE];
 8001b88:	69bb      	ldr	r3, [r7, #24]
 8001b8a:	3301      	adds	r3, #1
 8001b8c:	781b      	ldrb	r3, [r3, #0]
  }

  //------------- Data Interface (if any) -------------//
  if ( (TUSB_DESC_INTERFACE == tu_desc_type(p_desc)) &&
 8001b8e:	2b04      	cmp	r3, #4
 8001b90:	d139      	bne.n	8001c06 <cdcd_open+0x1de>
       (TUSB_CLASS_CDC_DATA == ((tusb_desc_interface_t const *) p_desc)->bInterfaceClass) )
 8001b92:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001b94:	795b      	ldrb	r3, [r3, #5]
  if ( (TUSB_DESC_INTERFACE == tu_desc_type(p_desc)) &&
 8001b96:	2b0a      	cmp	r3, #10
 8001b98:	d135      	bne.n	8001c06 <cdcd_open+0x1de>
 8001b9a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001b9c:	60fb      	str	r3, [r7, #12]
  return ((uint8_t const*) desc)[DESC_OFFSET_LEN];
 8001b9e:	68fb      	ldr	r3, [r7, #12]
 8001ba0:	781b      	ldrb	r3, [r3, #0]
  {
    // next to endpoint descriptor
    drv_len += tu_desc_len(p_desc);
 8001ba2:	b29a      	uxth	r2, r3
 8001ba4:	f8b7 3058 	ldrh.w	r3, [r7, #88]	; 0x58
 8001ba8:	4413      	add	r3, r2
 8001baa:	f8a7 3058 	strh.w	r3, [r7, #88]	; 0x58
 8001bae:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001bb0:	617b      	str	r3, [r7, #20]
  uint8_t const* desc8 = (uint8_t const*) desc;
 8001bb2:	697b      	ldr	r3, [r7, #20]
 8001bb4:	613b      	str	r3, [r7, #16]
  return desc8 + desc8[DESC_OFFSET_LEN];
 8001bb6:	693b      	ldr	r3, [r7, #16]
 8001bb8:	781b      	ldrb	r3, [r3, #0]
 8001bba:	461a      	mov	r2, r3
 8001bbc:	693b      	ldr	r3, [r7, #16]
 8001bbe:	4413      	add	r3, r2
    p_desc   = tu_desc_next(p_desc);
 8001bc0:	657b      	str	r3, [r7, #84]	; 0x54

    // Open endpoint pair
    TU_ASSERT( usbd_open_edpt_pair(rhport, p_desc, 2, TUSB_XFER_BULK, &p_cdc->ep_out, &p_cdc->ep_in), 0 );
 8001bc2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001bc4:	3303      	adds	r3, #3
 8001bc6:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8001bc8:	3202      	adds	r2, #2
 8001bca:	79f8      	ldrb	r0, [r7, #7]
 8001bcc:	9201      	str	r2, [sp, #4]
 8001bce:	9300      	str	r3, [sp, #0]
 8001bd0:	2302      	movs	r3, #2
 8001bd2:	2202      	movs	r2, #2
 8001bd4:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8001bd6:	f003 fb63 	bl	80052a0 <usbd_open_edpt_pair>
 8001bda:	4603      	mov	r3, r0
 8001bdc:	f083 0301 	eor.w	r3, r3, #1
 8001be0:	b2db      	uxtb	r3, r3
 8001be2:	2b00      	cmp	r3, #0
 8001be4:	d00a      	beq.n	8001bfc <cdcd_open+0x1d4>
 8001be6:	4b0d      	ldr	r3, [pc, #52]	; (8001c1c <cdcd_open+0x1f4>)
 8001be8:	64bb      	str	r3, [r7, #72]	; 0x48
 8001bea:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001bec:	681b      	ldr	r3, [r3, #0]
 8001bee:	f003 0301 	and.w	r3, r3, #1
 8001bf2:	2b00      	cmp	r3, #0
 8001bf4:	d000      	beq.n	8001bf8 <cdcd_open+0x1d0>
 8001bf6:	be00      	bkpt	0x0000
 8001bf8:	2300      	movs	r3, #0
 8001bfa:	e009      	b.n	8001c10 <cdcd_open+0x1e8>

    drv_len += 2*sizeof(tusb_desc_endpoint_t);
 8001bfc:	f8b7 3058 	ldrh.w	r3, [r7, #88]	; 0x58
 8001c00:	330e      	adds	r3, #14
 8001c02:	f8a7 3058 	strh.w	r3, [r7, #88]	; 0x58
  }

  // Prepare for incoming data
  _prep_out_transaction(p_cdc);
 8001c06:	6df8      	ldr	r0, [r7, #92]	; 0x5c
 8001c08:	f7ff fd53 	bl	80016b2 <_prep_out_transaction>

  return drv_len;
 8001c0c:	f8b7 3058 	ldrh.w	r3, [r7, #88]	; 0x58
}
 8001c10:	4618      	mov	r0, r3
 8001c12:	3760      	adds	r7, #96	; 0x60
 8001c14:	46bd      	mov	sp, r7
 8001c16:	bd80      	pop	{r7, pc}
 8001c18:	24000728 	.word	0x24000728
 8001c1c:	e000edf0 	.word	0xe000edf0

08001c20 <cdcd_control_xfer_cb>:

// Invoked when a control transfer occurred on an interface of this class
// Driver response accordingly to the request and the transfer stage (setup/data/ack)
// return false to stall control endpoint (e.g unsupported request)
bool cdcd_control_xfer_cb(uint8_t rhport, uint8_t stage, tusb_control_request_t const * request)
{
 8001c20:	b580      	push	{r7, lr}
 8001c22:	b08a      	sub	sp, #40	; 0x28
 8001c24:	af00      	add	r7, sp, #0
 8001c26:	4603      	mov	r3, r0
 8001c28:	603a      	str	r2, [r7, #0]
 8001c2a:	71fb      	strb	r3, [r7, #7]
 8001c2c:	460b      	mov	r3, r1
 8001c2e:	71bb      	strb	r3, [r7, #6]
  // Handle class request only
  TU_VERIFY(request->bmRequestType_bit.type == TUSB_REQ_TYPE_CLASS);
 8001c30:	683b      	ldr	r3, [r7, #0]
 8001c32:	781b      	ldrb	r3, [r3, #0]
 8001c34:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8001c38:	b2db      	uxtb	r3, r3
 8001c3a:	2b20      	cmp	r3, #32
 8001c3c:	d001      	beq.n	8001c42 <cdcd_control_xfer_cb+0x22>
 8001c3e:	2300      	movs	r3, #0
 8001c40:	e0cf      	b.n	8001de2 <cdcd_control_xfer_cb+0x1c2>

  uint8_t itf = 0;
 8001c42:	2300      	movs	r3, #0
 8001c44:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  cdcd_interface_t* p_cdc = _cdcd_itf;
 8001c48:	4b68      	ldr	r3, [pc, #416]	; (8001dec <cdcd_control_xfer_cb+0x1cc>)
 8001c4a:	623b      	str	r3, [r7, #32]

  // Identify which interface to use
  for ( ; ; itf++, p_cdc++)
  {
    if (itf >= TU_ARRAY_SIZE(_cdcd_itf)) return false;
 8001c4c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001c50:	2b00      	cmp	r3, #0
 8001c52:	d001      	beq.n	8001c58 <cdcd_control_xfer_cb+0x38>
 8001c54:	2300      	movs	r3, #0
 8001c56:	e0c4      	b.n	8001de2 <cdcd_control_xfer_cb+0x1c2>

    if ( p_cdc->itf_num == request->wIndex ) break;
 8001c58:	6a3b      	ldr	r3, [r7, #32]
 8001c5a:	781b      	ldrb	r3, [r3, #0]
 8001c5c:	b29a      	uxth	r2, r3
 8001c5e:	683b      	ldr	r3, [r7, #0]
 8001c60:	889b      	ldrh	r3, [r3, #4]
 8001c62:	b29b      	uxth	r3, r3
 8001c64:	429a      	cmp	r2, r3
 8001c66:	d009      	beq.n	8001c7c <cdcd_control_xfer_cb+0x5c>
  for ( ; ; itf++, p_cdc++)
 8001c68:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001c6c:	3301      	adds	r3, #1
 8001c6e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8001c72:	6a3b      	ldr	r3, [r7, #32]
 8001c74:	f603 0328 	addw	r3, r3, #2088	; 0x828
 8001c78:	623b      	str	r3, [r7, #32]
    if (itf >= TU_ARRAY_SIZE(_cdcd_itf)) return false;
 8001c7a:	e7e7      	b.n	8001c4c <cdcd_control_xfer_cb+0x2c>
    if ( p_cdc->itf_num == request->wIndex ) break;
 8001c7c:	bf00      	nop
  }

  switch ( request->bRequest )
 8001c7e:	683b      	ldr	r3, [r7, #0]
 8001c80:	785b      	ldrb	r3, [r3, #1]
 8001c82:	3b20      	subs	r3, #32
 8001c84:	2b03      	cmp	r3, #3
 8001c86:	f200 80a2 	bhi.w	8001dce <cdcd_control_xfer_cb+0x1ae>
 8001c8a:	a201      	add	r2, pc, #4	; (adr r2, 8001c90 <cdcd_control_xfer_cb+0x70>)
 8001c8c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001c90:	08001ca1 	.word	0x08001ca1
 8001c94:	08001cdd 	.word	0x08001cdd
 8001c98:	08001cf5 	.word	0x08001cf5
 8001c9c:	08001d9d 	.word	0x08001d9d
  {
    case CDC_REQUEST_SET_LINE_CODING:
      if (stage == CONTROL_STAGE_SETUP)
 8001ca0:	79bb      	ldrb	r3, [r7, #6]
 8001ca2:	2b01      	cmp	r3, #1
 8001ca4:	d108      	bne.n	8001cb8 <cdcd_control_xfer_cb+0x98>
      {
        TU_LOG_DRV("  Set Line Coding\r\n");
        tud_control_xfer(rhport, request, &p_cdc->line_coding, sizeof(cdc_line_coding_t));
 8001ca6:	6a3b      	ldr	r3, [r7, #32]
 8001ca8:	f103 0208 	add.w	r2, r3, #8
 8001cac:	79f8      	ldrb	r0, [r7, #7]
 8001cae:	2307      	movs	r3, #7
 8001cb0:	6839      	ldr	r1, [r7, #0]
 8001cb2:	f003 fdf9 	bl	80058a8 <tud_control_xfer>
      }
      else if ( stage == CONTROL_STAGE_ACK)
      {
        if ( tud_cdc_line_coding_cb ) tud_cdc_line_coding_cb(itf, &p_cdc->line_coding);
      }
    break;
 8001cb6:	e08c      	b.n	8001dd2 <cdcd_control_xfer_cb+0x1b2>
      else if ( stage == CONTROL_STAGE_ACK)
 8001cb8:	79bb      	ldrb	r3, [r7, #6]
 8001cba:	2b03      	cmp	r3, #3
 8001cbc:	f040 8089 	bne.w	8001dd2 <cdcd_control_xfer_cb+0x1b2>
        if ( tud_cdc_line_coding_cb ) tud_cdc_line_coding_cb(itf, &p_cdc->line_coding);
 8001cc0:	4b4b      	ldr	r3, [pc, #300]	; (8001df0 <cdcd_control_xfer_cb+0x1d0>)
 8001cc2:	2b00      	cmp	r3, #0
 8001cc4:	f000 8085 	beq.w	8001dd2 <cdcd_control_xfer_cb+0x1b2>
 8001cc8:	6a3b      	ldr	r3, [r7, #32]
 8001cca:	f103 0208 	add.w	r2, r3, #8
 8001cce:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001cd2:	4611      	mov	r1, r2
 8001cd4:	4618      	mov	r0, r3
 8001cd6:	f3af 8000 	nop.w
    break;
 8001cda:	e07a      	b.n	8001dd2 <cdcd_control_xfer_cb+0x1b2>

    case CDC_REQUEST_GET_LINE_CODING:
      if (stage == CONTROL_STAGE_SETUP)
 8001cdc:	79bb      	ldrb	r3, [r7, #6]
 8001cde:	2b01      	cmp	r3, #1
 8001ce0:	d179      	bne.n	8001dd6 <cdcd_control_xfer_cb+0x1b6>
      {
        TU_LOG_DRV("  Get Line Coding\r\n");
        tud_control_xfer(rhport, request, &p_cdc->line_coding, sizeof(cdc_line_coding_t));
 8001ce2:	6a3b      	ldr	r3, [r7, #32]
 8001ce4:	f103 0208 	add.w	r2, r3, #8
 8001ce8:	79f8      	ldrb	r0, [r7, #7]
 8001cea:	2307      	movs	r3, #7
 8001cec:	6839      	ldr	r1, [r7, #0]
 8001cee:	f003 fddb 	bl	80058a8 <tud_control_xfer>
      }
    break;
 8001cf2:	e070      	b.n	8001dd6 <cdcd_control_xfer_cb+0x1b6>

    case CDC_REQUEST_SET_CONTROL_LINE_STATE:
      if (stage == CONTROL_STAGE_SETUP)
 8001cf4:	79bb      	ldrb	r3, [r7, #6]
 8001cf6:	2b01      	cmp	r3, #1
 8001cf8:	d105      	bne.n	8001d06 <cdcd_control_xfer_cb+0xe6>
      {
        tud_control_status(rhport, request);
 8001cfa:	79fb      	ldrb	r3, [r7, #7]
 8001cfc:	6839      	ldr	r1, [r7, #0]
 8001cfe:	4618      	mov	r0, r3
 8001d00:	f003 fd60 	bl	80057c4 <tud_control_status>
        TU_LOG_DRV("  Set Control Line State: DTR = %d, RTS = %d\r\n", dtr, rts);

        // Invoke callback
        if ( tud_cdc_line_state_cb ) tud_cdc_line_state_cb(itf, dtr, rts);
      }
    break;
 8001d04:	e069      	b.n	8001dda <cdcd_control_xfer_cb+0x1ba>
      else if (stage == CONTROL_STAGE_ACK)
 8001d06:	79bb      	ldrb	r3, [r7, #6]
 8001d08:	2b03      	cmp	r3, #3
 8001d0a:	d166      	bne.n	8001dda <cdcd_control_xfer_cb+0x1ba>
        bool const dtr = tu_bit_test(request->wValue, 0);
 8001d0c:	683b      	ldr	r3, [r7, #0]
 8001d0e:	885b      	ldrh	r3, [r3, #2]
 8001d10:	b29b      	uxth	r3, r3
 8001d12:	613b      	str	r3, [r7, #16]
 8001d14:	2300      	movs	r3, #0
 8001d16:	73fb      	strb	r3, [r7, #15]
TU_ATTR_ALWAYS_INLINE static inline uint8_t tu_u16_low (uint16_t ui16) { return TU_U16_LOW(ui16); }

//------------- Bits -------------//
TU_ATTR_ALWAYS_INLINE static inline uint32_t tu_bit_set  (uint32_t value, uint8_t pos) { return value | TU_BIT(pos);                  }
TU_ATTR_ALWAYS_INLINE static inline uint32_t tu_bit_clear(uint32_t value, uint8_t pos) { return value & (~TU_BIT(pos));               }
TU_ATTR_ALWAYS_INLINE static inline bool     tu_bit_test (uint32_t value, uint8_t pos) { return (value & TU_BIT(pos)) ? true : false; }
 8001d18:	7bfb      	ldrb	r3, [r7, #15]
 8001d1a:	693a      	ldr	r2, [r7, #16]
 8001d1c:	fa22 f303 	lsr.w	r3, r2, r3
 8001d20:	f003 0301 	and.w	r3, r3, #1
 8001d24:	2b00      	cmp	r3, #0
 8001d26:	bf14      	ite	ne
 8001d28:	2301      	movne	r3, #1
 8001d2a:	2300      	moveq	r3, #0
 8001d2c:	b2db      	uxtb	r3, r3
 8001d2e:	77fb      	strb	r3, [r7, #31]
        bool const rts = tu_bit_test(request->wValue, 1);
 8001d30:	683b      	ldr	r3, [r7, #0]
 8001d32:	885b      	ldrh	r3, [r3, #2]
 8001d34:	b29b      	uxth	r3, r3
 8001d36:	61bb      	str	r3, [r7, #24]
 8001d38:	2301      	movs	r3, #1
 8001d3a:	75fb      	strb	r3, [r7, #23]
 8001d3c:	7dfb      	ldrb	r3, [r7, #23]
 8001d3e:	69ba      	ldr	r2, [r7, #24]
 8001d40:	fa22 f303 	lsr.w	r3, r2, r3
 8001d44:	f003 0301 	and.w	r3, r3, #1
 8001d48:	2b00      	cmp	r3, #0
 8001d4a:	bf14      	ite	ne
 8001d4c:	2301      	movne	r3, #1
 8001d4e:	2300      	moveq	r3, #0
 8001d50:	b2db      	uxtb	r3, r3
 8001d52:	77bb      	strb	r3, [r7, #30]
        p_cdc->line_state = (uint8_t) request->wValue;
 8001d54:	683b      	ldr	r3, [r7, #0]
 8001d56:	885b      	ldrh	r3, [r3, #2]
 8001d58:	b29b      	uxth	r3, r3
 8001d5a:	b2da      	uxtb	r2, r3
 8001d5c:	6a3b      	ldr	r3, [r7, #32]
 8001d5e:	711a      	strb	r2, [r3, #4]
        tu_fifo_set_overwritable(&p_cdc->tx_ff, !dtr);
 8001d60:	6a3b      	ldr	r3, [r7, #32]
 8001d62:	f103 021c 	add.w	r2, r3, #28
 8001d66:	7ffb      	ldrb	r3, [r7, #31]
 8001d68:	2b00      	cmp	r3, #0
 8001d6a:	bf14      	ite	ne
 8001d6c:	2301      	movne	r3, #1
 8001d6e:	2300      	moveq	r3, #0
 8001d70:	b2db      	uxtb	r3, r3
 8001d72:	f083 0301 	eor.w	r3, r3, #1
 8001d76:	b2db      	uxtb	r3, r3
 8001d78:	f003 0301 	and.w	r3, r3, #1
 8001d7c:	b2db      	uxtb	r3, r3
 8001d7e:	4619      	mov	r1, r3
 8001d80:	4610      	mov	r0, r2
 8001d82:	f002 f8d0 	bl	8003f26 <tu_fifo_set_overwritable>
        if ( tud_cdc_line_state_cb ) tud_cdc_line_state_cb(itf, dtr, rts);
 8001d86:	4b1b      	ldr	r3, [pc, #108]	; (8001df4 <cdcd_control_xfer_cb+0x1d4>)
 8001d88:	2b00      	cmp	r3, #0
 8001d8a:	d026      	beq.n	8001dda <cdcd_control_xfer_cb+0x1ba>
 8001d8c:	7fba      	ldrb	r2, [r7, #30]
 8001d8e:	7ff9      	ldrb	r1, [r7, #31]
 8001d90:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001d94:	4618      	mov	r0, r3
 8001d96:	f7fe ff96 	bl	8000cc6 <tud_cdc_line_state_cb>
    break;
 8001d9a:	e01e      	b.n	8001dda <cdcd_control_xfer_cb+0x1ba>
    case CDC_REQUEST_SEND_BREAK:
      if (stage == CONTROL_STAGE_SETUP)
 8001d9c:	79bb      	ldrb	r3, [r7, #6]
 8001d9e:	2b01      	cmp	r3, #1
 8001da0:	d105      	bne.n	8001dae <cdcd_control_xfer_cb+0x18e>
      {
        tud_control_status(rhport, request);
 8001da2:	79fb      	ldrb	r3, [r7, #7]
 8001da4:	6839      	ldr	r1, [r7, #0]
 8001da6:	4618      	mov	r0, r3
 8001da8:	f003 fd0c 	bl	80057c4 <tud_control_status>
      else if (stage == CONTROL_STAGE_ACK)
      {
        TU_LOG_DRV("  Send Break\r\n");
        if ( tud_cdc_send_break_cb ) tud_cdc_send_break_cb(itf, request->wValue);
      }
    break;
 8001dac:	e017      	b.n	8001dde <cdcd_control_xfer_cb+0x1be>
      else if (stage == CONTROL_STAGE_ACK)
 8001dae:	79bb      	ldrb	r3, [r7, #6]
 8001db0:	2b03      	cmp	r3, #3
 8001db2:	d114      	bne.n	8001dde <cdcd_control_xfer_cb+0x1be>
        if ( tud_cdc_send_break_cb ) tud_cdc_send_break_cb(itf, request->wValue);
 8001db4:	4b10      	ldr	r3, [pc, #64]	; (8001df8 <cdcd_control_xfer_cb+0x1d8>)
 8001db6:	2b00      	cmp	r3, #0
 8001db8:	d011      	beq.n	8001dde <cdcd_control_xfer_cb+0x1be>
 8001dba:	683b      	ldr	r3, [r7, #0]
 8001dbc:	885b      	ldrh	r3, [r3, #2]
 8001dbe:	b29a      	uxth	r2, r3
 8001dc0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001dc4:	4611      	mov	r1, r2
 8001dc6:	4618      	mov	r0, r3
 8001dc8:	f3af 8000 	nop.w
    break;
 8001dcc:	e007      	b.n	8001dde <cdcd_control_xfer_cb+0x1be>

    default: return false; // stall unsupported request
 8001dce:	2300      	movs	r3, #0
 8001dd0:	e007      	b.n	8001de2 <cdcd_control_xfer_cb+0x1c2>
    break;
 8001dd2:	bf00      	nop
 8001dd4:	e004      	b.n	8001de0 <cdcd_control_xfer_cb+0x1c0>
    break;
 8001dd6:	bf00      	nop
 8001dd8:	e002      	b.n	8001de0 <cdcd_control_xfer_cb+0x1c0>
    break;
 8001dda:	bf00      	nop
 8001ddc:	e000      	b.n	8001de0 <cdcd_control_xfer_cb+0x1c0>
    break;
 8001dde:	bf00      	nop
  }

  return true;
 8001de0:	2301      	movs	r3, #1
}
 8001de2:	4618      	mov	r0, r3
 8001de4:	3728      	adds	r7, #40	; 0x28
 8001de6:	46bd      	mov	sp, r7
 8001de8:	bd80      	pop	{r7, pc}
 8001dea:	bf00      	nop
 8001dec:	24000728 	.word	0x24000728
 8001df0:	00000000 	.word	0x00000000
 8001df4:	08000cc7 	.word	0x08000cc7
 8001df8:	00000000 	.word	0x00000000

08001dfc <cdcd_xfer_cb>:

bool cdcd_xfer_cb(uint8_t rhport, uint8_t ep_addr, xfer_result_t result, uint32_t xferred_bytes)
{
 8001dfc:	b580      	push	{r7, lr}
 8001dfe:	b086      	sub	sp, #24
 8001e00:	af00      	add	r7, sp, #0
 8001e02:	603b      	str	r3, [r7, #0]
 8001e04:	4603      	mov	r3, r0
 8001e06:	71fb      	strb	r3, [r7, #7]
 8001e08:	460b      	mov	r3, r1
 8001e0a:	71bb      	strb	r3, [r7, #6]
 8001e0c:	4613      	mov	r3, r2
 8001e0e:	717b      	strb	r3, [r7, #5]

  uint8_t itf;
  cdcd_interface_t* p_cdc;

  // Identify which interface to use
  for (itf = 0; itf < CFG_TUD_CDC; itf++)
 8001e10:	2300      	movs	r3, #0
 8001e12:	75fb      	strb	r3, [r7, #23]
 8001e14:	e014      	b.n	8001e40 <cdcd_xfer_cb+0x44>
  {
    p_cdc = &_cdcd_itf[itf];
 8001e16:	7dfb      	ldrb	r3, [r7, #23]
 8001e18:	f640 0228 	movw	r2, #2088	; 0x828
 8001e1c:	fb02 f303 	mul.w	r3, r2, r3
 8001e20:	4a55      	ldr	r2, [pc, #340]	; (8001f78 <cdcd_xfer_cb+0x17c>)
 8001e22:	4413      	add	r3, r2
 8001e24:	613b      	str	r3, [r7, #16]
    if ( ( ep_addr == p_cdc->ep_out ) || ( ep_addr == p_cdc->ep_in ) ) break;
 8001e26:	693b      	ldr	r3, [r7, #16]
 8001e28:	78db      	ldrb	r3, [r3, #3]
 8001e2a:	79ba      	ldrb	r2, [r7, #6]
 8001e2c:	429a      	cmp	r2, r3
 8001e2e:	d00a      	beq.n	8001e46 <cdcd_xfer_cb+0x4a>
 8001e30:	693b      	ldr	r3, [r7, #16]
 8001e32:	789b      	ldrb	r3, [r3, #2]
 8001e34:	79ba      	ldrb	r2, [r7, #6]
 8001e36:	429a      	cmp	r2, r3
 8001e38:	d005      	beq.n	8001e46 <cdcd_xfer_cb+0x4a>
  for (itf = 0; itf < CFG_TUD_CDC; itf++)
 8001e3a:	7dfb      	ldrb	r3, [r7, #23]
 8001e3c:	3301      	adds	r3, #1
 8001e3e:	75fb      	strb	r3, [r7, #23]
 8001e40:	7dfb      	ldrb	r3, [r7, #23]
 8001e42:	2b00      	cmp	r3, #0
 8001e44:	d0e7      	beq.n	8001e16 <cdcd_xfer_cb+0x1a>
  }
  TU_ASSERT(itf < CFG_TUD_CDC);
 8001e46:	7dfb      	ldrb	r3, [r7, #23]
 8001e48:	2b00      	cmp	r3, #0
 8001e4a:	d00a      	beq.n	8001e62 <cdcd_xfer_cb+0x66>
 8001e4c:	4b4b      	ldr	r3, [pc, #300]	; (8001f7c <cdcd_xfer_cb+0x180>)
 8001e4e:	60bb      	str	r3, [r7, #8]
 8001e50:	68bb      	ldr	r3, [r7, #8]
 8001e52:	681b      	ldr	r3, [r3, #0]
 8001e54:	f003 0301 	and.w	r3, r3, #1
 8001e58:	2b00      	cmp	r3, #0
 8001e5a:	d000      	beq.n	8001e5e <cdcd_xfer_cb+0x62>
 8001e5c:	be00      	bkpt	0x0000
 8001e5e:	2300      	movs	r3, #0
 8001e60:	e086      	b.n	8001f70 <cdcd_xfer_cb+0x174>

  // Received new data
  if ( ep_addr == p_cdc->ep_out )
 8001e62:	693b      	ldr	r3, [r7, #16]
 8001e64:	78db      	ldrb	r3, [r3, #3]
 8001e66:	79ba      	ldrb	r2, [r7, #6]
 8001e68:	429a      	cmp	r2, r3
 8001e6a:	d14c      	bne.n	8001f06 <cdcd_xfer_cb+0x10a>
  {
    tu_fifo_write_n(&p_cdc->rx_ff, p_cdc->epout_buf, (uint16_t) xferred_bytes);
 8001e6c:	693b      	ldr	r3, [r7, #16]
 8001e6e:	f103 0010 	add.w	r0, r3, #16
 8001e72:	693b      	ldr	r3, [r7, #16]
 8001e74:	f503 6385 	add.w	r3, r3, #1064	; 0x428
 8001e78:	683a      	ldr	r2, [r7, #0]
 8001e7a:	b292      	uxth	r2, r2
 8001e7c:	4619      	mov	r1, r3
 8001e7e:	f002 f81d 	bl	8003ebc <tu_fifo_write_n>

    // Check for wanted char and invoke callback if needed
    if ( tud_cdc_rx_wanted_cb && (((signed char) p_cdc->wanted_char) != -1) )
 8001e82:	4b3f      	ldr	r3, [pc, #252]	; (8001f80 <cdcd_xfer_cb+0x184>)
 8001e84:	2b00      	cmp	r3, #0
 8001e86:	d029      	beq.n	8001edc <cdcd_xfer_cb+0xe0>
 8001e88:	693b      	ldr	r3, [r7, #16]
 8001e8a:	795b      	ldrb	r3, [r3, #5]
 8001e8c:	2bff      	cmp	r3, #255	; 0xff
 8001e8e:	d025      	beq.n	8001edc <cdcd_xfer_cb+0xe0>
    {
      for ( uint32_t i = 0; i < xferred_bytes; i++ )
 8001e90:	2300      	movs	r3, #0
 8001e92:	60fb      	str	r3, [r7, #12]
 8001e94:	e01e      	b.n	8001ed4 <cdcd_xfer_cb+0xd8>
      {
        if ( (p_cdc->wanted_char == p_cdc->epout_buf[i]) && !tu_fifo_empty(&p_cdc->rx_ff) )
 8001e96:	693b      	ldr	r3, [r7, #16]
 8001e98:	795a      	ldrb	r2, [r3, #5]
 8001e9a:	6939      	ldr	r1, [r7, #16]
 8001e9c:	68fb      	ldr	r3, [r7, #12]
 8001e9e:	440b      	add	r3, r1
 8001ea0:	f503 6385 	add.w	r3, r3, #1064	; 0x428
 8001ea4:	781b      	ldrb	r3, [r3, #0]
 8001ea6:	429a      	cmp	r2, r3
 8001ea8:	d111      	bne.n	8001ece <cdcd_xfer_cb+0xd2>
 8001eaa:	693b      	ldr	r3, [r7, #16]
 8001eac:	3310      	adds	r3, #16
 8001eae:	4618      	mov	r0, r3
 8001eb0:	f001 fefe 	bl	8003cb0 <tu_fifo_empty>
 8001eb4:	4603      	mov	r3, r0
 8001eb6:	f083 0301 	eor.w	r3, r3, #1
 8001eba:	b2db      	uxtb	r3, r3
 8001ebc:	2b00      	cmp	r3, #0
 8001ebe:	d006      	beq.n	8001ece <cdcd_xfer_cb+0xd2>
        {
          tud_cdc_rx_wanted_cb(itf, p_cdc->wanted_char);
 8001ec0:	693b      	ldr	r3, [r7, #16]
 8001ec2:	795a      	ldrb	r2, [r3, #5]
 8001ec4:	7dfb      	ldrb	r3, [r7, #23]
 8001ec6:	4611      	mov	r1, r2
 8001ec8:	4618      	mov	r0, r3
 8001eca:	f3af 8000 	nop.w
      for ( uint32_t i = 0; i < xferred_bytes; i++ )
 8001ece:	68fb      	ldr	r3, [r7, #12]
 8001ed0:	3301      	adds	r3, #1
 8001ed2:	60fb      	str	r3, [r7, #12]
 8001ed4:	68fa      	ldr	r2, [r7, #12]
 8001ed6:	683b      	ldr	r3, [r7, #0]
 8001ed8:	429a      	cmp	r2, r3
 8001eda:	d3dc      	bcc.n	8001e96 <cdcd_xfer_cb+0x9a>
        }
      }
    }

    // invoke receive callback (if there is still data)
    if (tud_cdc_rx_cb && !tu_fifo_empty(&p_cdc->rx_ff) ) tud_cdc_rx_cb(itf);
 8001edc:	4b29      	ldr	r3, [pc, #164]	; (8001f84 <cdcd_xfer_cb+0x188>)
 8001ede:	2b00      	cmp	r3, #0
 8001ee0:	d00e      	beq.n	8001f00 <cdcd_xfer_cb+0x104>
 8001ee2:	693b      	ldr	r3, [r7, #16]
 8001ee4:	3310      	adds	r3, #16
 8001ee6:	4618      	mov	r0, r3
 8001ee8:	f001 fee2 	bl	8003cb0 <tu_fifo_empty>
 8001eec:	4603      	mov	r3, r0
 8001eee:	f083 0301 	eor.w	r3, r3, #1
 8001ef2:	b2db      	uxtb	r3, r3
 8001ef4:	2b00      	cmp	r3, #0
 8001ef6:	d003      	beq.n	8001f00 <cdcd_xfer_cb+0x104>
 8001ef8:	7dfb      	ldrb	r3, [r7, #23]
 8001efa:	4618      	mov	r0, r3
 8001efc:	f7fe fef2 	bl	8000ce4 <tud_cdc_rx_cb>

    // prepare for OUT transaction
    _prep_out_transaction(p_cdc);
 8001f00:	6938      	ldr	r0, [r7, #16]
 8001f02:	f7ff fbd6 	bl	80016b2 <_prep_out_transaction>
  }

  // Data sent to host, we continue to fetch from tx fifo to send.
  // Note: This will cause incorrect baudrate set in line coding.
  //       Though maybe the baudrate is not really important !!!
  if ( ep_addr == p_cdc->ep_in )
 8001f06:	693b      	ldr	r3, [r7, #16]
 8001f08:	789b      	ldrb	r3, [r3, #2]
 8001f0a:	79ba      	ldrb	r2, [r7, #6]
 8001f0c:	429a      	cmp	r2, r3
 8001f0e:	d12e      	bne.n	8001f6e <cdcd_xfer_cb+0x172>
  {
    // invoke transmit callback to possibly refill tx fifo
    if ( tud_cdc_tx_complete_cb ) tud_cdc_tx_complete_cb(itf);
 8001f10:	4b1d      	ldr	r3, [pc, #116]	; (8001f88 <cdcd_xfer_cb+0x18c>)
 8001f12:	2b00      	cmp	r3, #0
 8001f14:	d003      	beq.n	8001f1e <cdcd_xfer_cb+0x122>
 8001f16:	7dfb      	ldrb	r3, [r7, #23]
 8001f18:	4618      	mov	r0, r3
 8001f1a:	f3af 8000 	nop.w

    if ( 0 == tud_cdc_n_write_flush(itf) )
 8001f1e:	7dfb      	ldrb	r3, [r7, #23]
 8001f20:	4618      	mov	r0, r3
 8001f22:	f7ff fc85 	bl	8001830 <tud_cdc_n_write_flush>
 8001f26:	4603      	mov	r3, r0
 8001f28:	2b00      	cmp	r3, #0
 8001f2a:	d120      	bne.n	8001f6e <cdcd_xfer_cb+0x172>
    {
      // If there is no data left, a ZLP should be sent if
      // xferred_bytes is multiple of EP Packet size and not zero
      if ( !tu_fifo_count(&p_cdc->tx_ff) && xferred_bytes && (0 == (xferred_bytes & (BULK_PACKET_SIZE-1))) )
 8001f2c:	693b      	ldr	r3, [r7, #16]
 8001f2e:	331c      	adds	r3, #28
 8001f30:	4618      	mov	r0, r3
 8001f32:	f001 fe8b 	bl	8003c4c <tu_fifo_count>
 8001f36:	4603      	mov	r3, r0
 8001f38:	2b00      	cmp	r3, #0
 8001f3a:	d118      	bne.n	8001f6e <cdcd_xfer_cb+0x172>
 8001f3c:	683b      	ldr	r3, [r7, #0]
 8001f3e:	2b00      	cmp	r3, #0
 8001f40:	d015      	beq.n	8001f6e <cdcd_xfer_cb+0x172>
 8001f42:	683b      	ldr	r3, [r7, #0]
 8001f44:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001f48:	2b00      	cmp	r3, #0
 8001f4a:	d110      	bne.n	8001f6e <cdcd_xfer_cb+0x172>
      {
        if ( usbd_edpt_claim(rhport, p_cdc->ep_in) )
 8001f4c:	693b      	ldr	r3, [r7, #16]
 8001f4e:	789a      	ldrb	r2, [r3, #2]
 8001f50:	79fb      	ldrb	r3, [r7, #7]
 8001f52:	4611      	mov	r1, r2
 8001f54:	4618      	mov	r0, r3
 8001f56:	f003 fa4f 	bl	80053f8 <usbd_edpt_claim>
 8001f5a:	4603      	mov	r3, r0
 8001f5c:	2b00      	cmp	r3, #0
 8001f5e:	d006      	beq.n	8001f6e <cdcd_xfer_cb+0x172>
        {
          usbd_edpt_xfer(rhport, p_cdc->ep_in, NULL, 0);
 8001f60:	693b      	ldr	r3, [r7, #16]
 8001f62:	7899      	ldrb	r1, [r3, #2]
 8001f64:	79f8      	ldrb	r0, [r7, #7]
 8001f66:	2300      	movs	r3, #0
 8001f68:	2200      	movs	r2, #0
 8001f6a:	f003 fa99 	bl	80054a0 <usbd_edpt_xfer>
    }
  }

  // nothing to do with notif endpoint for now

  return true;
 8001f6e:	2301      	movs	r3, #1
}
 8001f70:	4618      	mov	r0, r3
 8001f72:	3718      	adds	r7, #24
 8001f74:	46bd      	mov	sp, r7
 8001f76:	bd80      	pop	{r7, pc}
 8001f78:	24000728 	.word	0x24000728
 8001f7c:	e000edf0 	.word	0xe000edf0
 8001f80:	00000000 	.word	0x00000000
 8001f84:	08000ce5 	.word	0x08000ce5
 8001f88:	00000000 	.word	0x00000000

08001f8c <send_csw>:
{
  return tu_bit_test(dir, 7);
}

static inline bool send_csw(uint8_t rhport, mscd_interface_t* p_msc)
{
 8001f8c:	b580      	push	{r7, lr}
 8001f8e:	b082      	sub	sp, #8
 8001f90:	af00      	add	r7, sp, #0
 8001f92:	4603      	mov	r3, r0
 8001f94:	6039      	str	r1, [r7, #0]
 8001f96:	71fb      	strb	r3, [r7, #7]
  // Data residue is always = host expect - actual transferred
  p_msc->csw.data_residue = p_msc->cbw.total_bytes - p_msc->xferred_len;
 8001f98:	683b      	ldr	r3, [r7, #0]
 8001f9a:	689a      	ldr	r2, [r3, #8]
 8001f9c:	683b      	ldr	r3, [r7, #0]
 8001f9e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001fa0:	1ad2      	subs	r2, r2, r3
 8001fa2:	683b      	ldr	r3, [r7, #0]
 8001fa4:	629a      	str	r2, [r3, #40]	; 0x28

  p_msc->stage = MSC_STAGE_STATUS_SENT;
 8001fa6:	683b      	ldr	r3, [r7, #0]
 8001fa8:	2203      	movs	r2, #3
 8001faa:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  return usbd_edpt_xfer(rhport, p_msc->ep_in , (uint8_t*) &p_msc->csw, sizeof(msc_csw_t));
 8001fae:	683b      	ldr	r3, [r7, #0]
 8001fb0:	f893 102e 	ldrb.w	r1, [r3, #46]	; 0x2e
 8001fb4:	683b      	ldr	r3, [r7, #0]
 8001fb6:	f103 0220 	add.w	r2, r3, #32
 8001fba:	79f8      	ldrb	r0, [r7, #7]
 8001fbc:	230d      	movs	r3, #13
 8001fbe:	f003 fa6f 	bl	80054a0 <usbd_edpt_xfer>
 8001fc2:	4603      	mov	r3, r0
}
 8001fc4:	4618      	mov	r0, r3
 8001fc6:	3708      	adds	r7, #8
 8001fc8:	46bd      	mov	sp, r7
 8001fca:	bd80      	pop	{r7, pc}

08001fcc <prepare_cbw>:

static inline bool prepare_cbw(uint8_t rhport, mscd_interface_t* p_msc)
{
 8001fcc:	b580      	push	{r7, lr}
 8001fce:	b082      	sub	sp, #8
 8001fd0:	af00      	add	r7, sp, #0
 8001fd2:	4603      	mov	r3, r0
 8001fd4:	6039      	str	r1, [r7, #0]
 8001fd6:	71fb      	strb	r3, [r7, #7]
  p_msc->stage = MSC_STAGE_CMD;
 8001fd8:	683b      	ldr	r3, [r7, #0]
 8001fda:	2200      	movs	r2, #0
 8001fdc:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  return usbd_edpt_xfer(rhport, p_msc->ep_out, (uint8_t*) &p_msc->cbw, sizeof(msc_cbw_t));
 8001fe0:	683b      	ldr	r3, [r7, #0]
 8001fe2:	f893 102f 	ldrb.w	r1, [r3, #47]	; 0x2f
 8001fe6:	683a      	ldr	r2, [r7, #0]
 8001fe8:	79f8      	ldrb	r0, [r7, #7]
 8001fea:	231f      	movs	r3, #31
 8001fec:	f003 fa58 	bl	80054a0 <usbd_edpt_xfer>
 8001ff0:	4603      	mov	r3, r0
}
 8001ff2:	4618      	mov	r0, r3
 8001ff4:	3708      	adds	r7, #8
 8001ff6:	46bd      	mov	sp, r7
 8001ff8:	bd80      	pop	{r7, pc}

08001ffa <fail_scsi_op>:

static void fail_scsi_op(uint8_t rhport, mscd_interface_t* p_msc, uint8_t status)
{
 8001ffa:	b580      	push	{r7, lr}
 8001ffc:	b088      	sub	sp, #32
 8001ffe:	af00      	add	r7, sp, #0
 8002000:	4603      	mov	r3, r0
 8002002:	6039      	str	r1, [r7, #0]
 8002004:	71fb      	strb	r3, [r7, #7]
 8002006:	4613      	mov	r3, r2
 8002008:	71bb      	strb	r3, [r7, #6]
  msc_cbw_t const * p_cbw = &p_msc->cbw;
 800200a:	683b      	ldr	r3, [r7, #0]
 800200c:	61fb      	str	r3, [r7, #28]
  msc_csw_t       * p_csw = &p_msc->csw;
 800200e:	683b      	ldr	r3, [r7, #0]
 8002010:	3320      	adds	r3, #32
 8002012:	61bb      	str	r3, [r7, #24]

  p_csw->status       = status;
 8002014:	69bb      	ldr	r3, [r7, #24]
 8002016:	79ba      	ldrb	r2, [r7, #6]
 8002018:	731a      	strb	r2, [r3, #12]
  p_csw->data_residue = p_msc->cbw.total_bytes - p_msc->xferred_len;
 800201a:	683b      	ldr	r3, [r7, #0]
 800201c:	689a      	ldr	r2, [r3, #8]
 800201e:	683b      	ldr	r3, [r7, #0]
 8002020:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002022:	1ad2      	subs	r2, r2, r3
 8002024:	69bb      	ldr	r3, [r7, #24]
 8002026:	609a      	str	r2, [r3, #8]
  p_msc->stage        = MSC_STAGE_STATUS;
 8002028:	683b      	ldr	r3, [r7, #0]
 800202a:	2202      	movs	r2, #2
 800202c:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

  // failed but sense key is not set: default to Illegal Request
  if ( p_msc->sense_key == 0 ) tud_msc_set_sense(p_cbw->lun, SCSI_SENSE_ILLEGAL_REQUEST, 0x20, 0x00);
 8002030:	683b      	ldr	r3, [r7, #0]
 8002032:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002036:	2b00      	cmp	r3, #0
 8002038:	d106      	bne.n	8002048 <fail_scsi_op+0x4e>
 800203a:	69fb      	ldr	r3, [r7, #28]
 800203c:	7b58      	ldrb	r0, [r3, #13]
 800203e:	2300      	movs	r3, #0
 8002040:	2220      	movs	r2, #32
 8002042:	2105      	movs	r1, #5
 8002044:	f000 f8d0 	bl	80021e8 <tud_msc_set_sense>

  // If there is data stage and not yet complete, stall it
  if ( p_cbw->total_bytes && p_csw->data_residue )
 8002048:	69fb      	ldr	r3, [r7, #28]
 800204a:	689b      	ldr	r3, [r3, #8]
 800204c:	2b00      	cmp	r3, #0
 800204e:	d028      	beq.n	80020a2 <fail_scsi_op+0xa8>
 8002050:	69bb      	ldr	r3, [r7, #24]
 8002052:	689b      	ldr	r3, [r3, #8]
 8002054:	2b00      	cmp	r3, #0
 8002056:	d024      	beq.n	80020a2 <fail_scsi_op+0xa8>
  {
    if ( is_data_in(p_cbw->dir) )
 8002058:	69fb      	ldr	r3, [r7, #28]
 800205a:	7b1b      	ldrb	r3, [r3, #12]
 800205c:	75fb      	strb	r3, [r7, #23]
  return tu_bit_test(dir, 7);
 800205e:	7dfb      	ldrb	r3, [r7, #23]
 8002060:	613b      	str	r3, [r7, #16]
 8002062:	2307      	movs	r3, #7
 8002064:	73fb      	strb	r3, [r7, #15]
 8002066:	7bfb      	ldrb	r3, [r7, #15]
 8002068:	693a      	ldr	r2, [r7, #16]
 800206a:	fa22 f303 	lsr.w	r3, r2, r3
 800206e:	f003 0301 	and.w	r3, r3, #1
 8002072:	2b00      	cmp	r3, #0
 8002074:	bf14      	ite	ne
 8002076:	2301      	movne	r3, #1
 8002078:	2300      	moveq	r3, #0
 800207a:	b2db      	uxtb	r3, r3
    if ( is_data_in(p_cbw->dir) )
 800207c:	2b00      	cmp	r3, #0
 800207e:	d008      	beq.n	8002092 <fail_scsi_op+0x98>
    {
      usbd_edpt_stall(rhport, p_msc->ep_in);
 8002080:	683b      	ldr	r3, [r7, #0]
 8002082:	f893 202e 	ldrb.w	r2, [r3, #46]	; 0x2e
 8002086:	79fb      	ldrb	r3, [r7, #7]
 8002088:	4611      	mov	r1, r2
 800208a:	4618      	mov	r0, r3
 800208c:	f003 faac 	bl	80055e8 <usbd_edpt_stall>
    else
    {
      usbd_edpt_stall(rhport, p_msc->ep_out);
    }
  }
}
 8002090:	e007      	b.n	80020a2 <fail_scsi_op+0xa8>
      usbd_edpt_stall(rhport, p_msc->ep_out);
 8002092:	683b      	ldr	r3, [r7, #0]
 8002094:	f893 202f 	ldrb.w	r2, [r3, #47]	; 0x2f
 8002098:	79fb      	ldrb	r3, [r7, #7]
 800209a:	4611      	mov	r1, r2
 800209c:	4618      	mov	r0, r3
 800209e:	f003 faa3 	bl	80055e8 <usbd_edpt_stall>
}
 80020a2:	bf00      	nop
 80020a4:	3720      	adds	r7, #32
 80020a6:	46bd      	mov	sp, r7
 80020a8:	bd80      	pop	{r7, pc}

080020aa <rdwr10_get_lba>:

static inline uint32_t rdwr10_get_lba(uint8_t const command[])
{
 80020aa:	b480      	push	{r7}
 80020ac:	b085      	sub	sp, #20
 80020ae:	af00      	add	r7, sp, #0
 80020b0:	6078      	str	r0, [r7, #4]
  // use offsetof to avoid pointer to the odd/unaligned address
  uint32_t const lba = tu_unaligned_read32(command + offsetof(scsi_write10_t, lba));
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	3302      	adds	r3, #2
 80020b6:	60bb      	str	r3, [r7, #8]

#else

// MCU that could access unaligned memory natively
TU_ATTR_ALWAYS_INLINE static inline uint32_t tu_unaligned_read32(const void *mem) {
  return *((uint32_t const *) mem);
 80020b8:	68bb      	ldr	r3, [r7, #8]
 80020ba:	681b      	ldr	r3, [r3, #0]
 80020bc:	60fb      	str	r3, [r7, #12]

  // lba is in Big Endian
  return tu_ntohl(lba);
 80020be:	68fb      	ldr	r3, [r7, #12]
 80020c0:	ba1b      	rev	r3, r3
}
 80020c2:	4618      	mov	r0, r3
 80020c4:	3714      	adds	r7, #20
 80020c6:	46bd      	mov	sp, r7
 80020c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020cc:	4770      	bx	lr

080020ce <rdwr10_get_blockcount>:

static inline uint16_t rdwr10_get_blockcount(msc_cbw_t const* cbw)
{
 80020ce:	b480      	push	{r7}
 80020d0:	b085      	sub	sp, #20
 80020d2:	af00      	add	r7, sp, #0
 80020d4:	6078      	str	r0, [r7, #4]
  uint16_t const block_count = tu_unaligned_read16(cbw->command + offsetof(scsi_write10_t, block_count));
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	330f      	adds	r3, #15
 80020da:	3307      	adds	r3, #7
 80020dc:	60bb      	str	r3, [r7, #8]
}

TU_ATTR_ALWAYS_INLINE static inline uint16_t tu_unaligned_read16(const void *mem) {
  return *((uint16_t const *) mem);
 80020de:	68bb      	ldr	r3, [r7, #8]
 80020e0:	881b      	ldrh	r3, [r3, #0]
 80020e2:	81fb      	strh	r3, [r7, #14]
  return tu_ntohs(block_count);
 80020e4:	89fb      	ldrh	r3, [r7, #14]
 80020e6:	ba5b      	rev16	r3, r3
 80020e8:	b29b      	uxth	r3, r3
}
 80020ea:	4618      	mov	r0, r3
 80020ec:	3714      	adds	r7, #20
 80020ee:	46bd      	mov	sp, r7
 80020f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020f4:	4770      	bx	lr

080020f6 <rdwr10_get_blocksize>:

static inline uint16_t rdwr10_get_blocksize(msc_cbw_t const* cbw)
{
 80020f6:	b580      	push	{r7, lr}
 80020f8:	b084      	sub	sp, #16
 80020fa:	af00      	add	r7, sp, #0
 80020fc:	6078      	str	r0, [r7, #4]
  // first extract block count in the command
  uint16_t const block_count = rdwr10_get_blockcount(cbw);
 80020fe:	6878      	ldr	r0, [r7, #4]
 8002100:	f7ff ffe5 	bl	80020ce <rdwr10_get_blockcount>
 8002104:	4603      	mov	r3, r0
 8002106:	81fb      	strh	r3, [r7, #14]

  // invalid block count
  if (block_count == 0) return 0;
 8002108:	89fb      	ldrh	r3, [r7, #14]
 800210a:	2b00      	cmp	r3, #0
 800210c:	d101      	bne.n	8002112 <rdwr10_get_blocksize+0x1c>
 800210e:	2300      	movs	r3, #0
 8002110:	e005      	b.n	800211e <rdwr10_get_blocksize+0x28>

  return (uint16_t) (cbw->total_bytes / block_count);
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	689a      	ldr	r2, [r3, #8]
 8002116:	89fb      	ldrh	r3, [r7, #14]
 8002118:	fbb2 f3f3 	udiv	r3, r2, r3
 800211c:	b29b      	uxth	r3, r3
}
 800211e:	4618      	mov	r0, r3
 8002120:	3710      	adds	r7, #16
 8002122:	46bd      	mov	sp, r7
 8002124:	bd80      	pop	{r7, pc}

08002126 <rdwr10_validate_cmd>:

uint8_t rdwr10_validate_cmd(msc_cbw_t const* cbw)
{
 8002126:	b580      	push	{r7, lr}
 8002128:	b088      	sub	sp, #32
 800212a:	af00      	add	r7, sp, #0
 800212c:	6078      	str	r0, [r7, #4]
  uint8_t status = MSC_CSW_STATUS_PASSED;
 800212e:	2300      	movs	r3, #0
 8002130:	77fb      	strb	r3, [r7, #31]
  uint16_t const block_count = rdwr10_get_blockcount(cbw);
 8002132:	6878      	ldr	r0, [r7, #4]
 8002134:	f7ff ffcb 	bl	80020ce <rdwr10_get_blockcount>
 8002138:	4603      	mov	r3, r0
 800213a:	83bb      	strh	r3, [r7, #28]

  if ( cbw->total_bytes == 0 )
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	689b      	ldr	r3, [r3, #8]
 8002140:	2b00      	cmp	r3, #0
 8002142:	d105      	bne.n	8002150 <rdwr10_validate_cmd+0x2a>
  {
    if ( block_count )
 8002144:	8bbb      	ldrh	r3, [r7, #28]
 8002146:	2b00      	cmp	r3, #0
 8002148:	d048      	beq.n	80021dc <rdwr10_validate_cmd+0xb6>
    {
      TU_LOG_DRV("  SCSI case 2 (Hn < Di) or case 3 (Hn < Do) \r\n");
      status = MSC_CSW_STATUS_PHASE_ERROR;
 800214a:	2302      	movs	r3, #2
 800214c:	77fb      	strb	r3, [r7, #31]
 800214e:	e045      	b.n	80021dc <rdwr10_validate_cmd+0xb6>
    {
      // no data transfer, only exist in complaint test suite
    }
  }else
  {
    if ( SCSI_CMD_READ_10 == cbw->command[0] && !is_data_in(cbw->dir) )
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	7bdb      	ldrb	r3, [r3, #15]
 8002154:	2b28      	cmp	r3, #40	; 0x28
 8002156:	d119      	bne.n	800218c <rdwr10_validate_cmd+0x66>
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	7b1b      	ldrb	r3, [r3, #12]
 800215c:	76fb      	strb	r3, [r7, #27]
  return tu_bit_test(dir, 7);
 800215e:	7efb      	ldrb	r3, [r7, #27]
 8002160:	617b      	str	r3, [r7, #20]
 8002162:	2307      	movs	r3, #7
 8002164:	74fb      	strb	r3, [r7, #19]
TU_ATTR_ALWAYS_INLINE static inline bool     tu_bit_test (uint32_t value, uint8_t pos) { return (value & TU_BIT(pos)) ? true : false; }
 8002166:	7cfb      	ldrb	r3, [r7, #19]
 8002168:	697a      	ldr	r2, [r7, #20]
 800216a:	fa22 f303 	lsr.w	r3, r2, r3
 800216e:	f003 0301 	and.w	r3, r3, #1
 8002172:	2b00      	cmp	r3, #0
 8002174:	bf14      	ite	ne
 8002176:	2301      	movne	r3, #1
 8002178:	2300      	moveq	r3, #0
 800217a:	b2db      	uxtb	r3, r3
    if ( SCSI_CMD_READ_10 == cbw->command[0] && !is_data_in(cbw->dir) )
 800217c:	f083 0301 	eor.w	r3, r3, #1
 8002180:	b2db      	uxtb	r3, r3
 8002182:	2b00      	cmp	r3, #0
 8002184:	d002      	beq.n	800218c <rdwr10_validate_cmd+0x66>
    {
      TU_LOG_DRV("  SCSI case 10 (Ho <> Di)\r\n");
      status = MSC_CSW_STATUS_PHASE_ERROR;
 8002186:	2302      	movs	r3, #2
 8002188:	77fb      	strb	r3, [r7, #31]
 800218a:	e027      	b.n	80021dc <rdwr10_validate_cmd+0xb6>
    }
    else if ( SCSI_CMD_WRITE_10 == cbw->command[0] && is_data_in(cbw->dir) )
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	7bdb      	ldrb	r3, [r3, #15]
 8002190:	2b2a      	cmp	r3, #42	; 0x2a
 8002192:	d116      	bne.n	80021c2 <rdwr10_validate_cmd+0x9c>
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	7b1b      	ldrb	r3, [r3, #12]
 8002198:	74bb      	strb	r3, [r7, #18]
  return tu_bit_test(dir, 7);
 800219a:	7cbb      	ldrb	r3, [r7, #18]
 800219c:	60fb      	str	r3, [r7, #12]
 800219e:	2307      	movs	r3, #7
 80021a0:	72fb      	strb	r3, [r7, #11]
 80021a2:	7afb      	ldrb	r3, [r7, #11]
 80021a4:	68fa      	ldr	r2, [r7, #12]
 80021a6:	fa22 f303 	lsr.w	r3, r2, r3
 80021aa:	f003 0301 	and.w	r3, r3, #1
 80021ae:	2b00      	cmp	r3, #0
 80021b0:	bf14      	ite	ne
 80021b2:	2301      	movne	r3, #1
 80021b4:	2300      	moveq	r3, #0
 80021b6:	b2db      	uxtb	r3, r3
    else if ( SCSI_CMD_WRITE_10 == cbw->command[0] && is_data_in(cbw->dir) )
 80021b8:	2b00      	cmp	r3, #0
 80021ba:	d002      	beq.n	80021c2 <rdwr10_validate_cmd+0x9c>
    {
      TU_LOG_DRV("  SCSI case 8 (Hi <> Do)\r\n");
      status = MSC_CSW_STATUS_PHASE_ERROR;
 80021bc:	2302      	movs	r3, #2
 80021be:	77fb      	strb	r3, [r7, #31]
 80021c0:	e00c      	b.n	80021dc <rdwr10_validate_cmd+0xb6>
    }
    else if ( 0 == block_count )
 80021c2:	8bbb      	ldrh	r3, [r7, #28]
 80021c4:	2b00      	cmp	r3, #0
 80021c6:	d102      	bne.n	80021ce <rdwr10_validate_cmd+0xa8>
    {
      TU_LOG_DRV("  SCSI case 4 Hi > Dn (READ10) or case 9 Ho > Dn (WRITE10) \r\n");
      status =  MSC_CSW_STATUS_FAILED;
 80021c8:	2301      	movs	r3, #1
 80021ca:	77fb      	strb	r3, [r7, #31]
 80021cc:	e006      	b.n	80021dc <rdwr10_validate_cmd+0xb6>
    }
    else if ( cbw->total_bytes / block_count == 0 )
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	689a      	ldr	r2, [r3, #8]
 80021d2:	8bbb      	ldrh	r3, [r7, #28]
 80021d4:	429a      	cmp	r2, r3
 80021d6:	d201      	bcs.n	80021dc <rdwr10_validate_cmd+0xb6>
    {
      TU_LOG_DRV(" Computed block size = 0. SCSI case 7 Hi < Di (READ10) or case 13 Ho < Do (WRIT10)\r\n");
      status = MSC_CSW_STATUS_PHASE_ERROR;
 80021d8:	2302      	movs	r3, #2
 80021da:	77fb      	strb	r3, [r7, #31]
    }
  }

  return status;
 80021dc:	7ffb      	ldrb	r3, [r7, #31]
}
 80021de:	4618      	mov	r0, r3
 80021e0:	3720      	adds	r7, #32
 80021e2:	46bd      	mov	sp, r7
 80021e4:	bd80      	pop	{r7, pc}
	...

080021e8 <tud_msc_set_sense>:

//--------------------------------------------------------------------+
// APPLICATION API
//--------------------------------------------------------------------+
bool tud_msc_set_sense(uint8_t lun, uint8_t sense_key, uint8_t add_sense_code, uint8_t add_sense_qualifier)
{
 80021e8:	b490      	push	{r4, r7}
 80021ea:	b082      	sub	sp, #8
 80021ec:	af00      	add	r7, sp, #0
 80021ee:	4604      	mov	r4, r0
 80021f0:	4608      	mov	r0, r1
 80021f2:	4611      	mov	r1, r2
 80021f4:	461a      	mov	r2, r3
 80021f6:	4623      	mov	r3, r4
 80021f8:	71fb      	strb	r3, [r7, #7]
 80021fa:	4603      	mov	r3, r0
 80021fc:	71bb      	strb	r3, [r7, #6]
 80021fe:	460b      	mov	r3, r1
 8002200:	717b      	strb	r3, [r7, #5]
 8002202:	4613      	mov	r3, r2
 8002204:	713b      	strb	r3, [r7, #4]
  (void) lun;

  _mscd_itf.sense_key           = sense_key;
 8002206:	4a09      	ldr	r2, [pc, #36]	; (800222c <tud_msc_set_sense+0x44>)
 8002208:	79bb      	ldrb	r3, [r7, #6]
 800220a:	f882 303c 	strb.w	r3, [r2, #60]	; 0x3c
  _mscd_itf.add_sense_code      = add_sense_code;
 800220e:	4a07      	ldr	r2, [pc, #28]	; (800222c <tud_msc_set_sense+0x44>)
 8002210:	797b      	ldrb	r3, [r7, #5]
 8002212:	f882 303d 	strb.w	r3, [r2, #61]	; 0x3d
  _mscd_itf.add_sense_qualifier = add_sense_qualifier;
 8002216:	4a05      	ldr	r2, [pc, #20]	; (800222c <tud_msc_set_sense+0x44>)
 8002218:	793b      	ldrb	r3, [r7, #4]
 800221a:	f882 303e 	strb.w	r3, [r2, #62]	; 0x3e

  return true;
 800221e:	2301      	movs	r3, #1
}
 8002220:	4618      	mov	r0, r3
 8002222:	3708      	adds	r7, #8
 8002224:	46bd      	mov	sp, r7
 8002226:	bc90      	pop	{r4, r7}
 8002228:	4770      	bx	lr
 800222a:	bf00      	nop
 800222c:	24000f50 	.word	0x24000f50

08002230 <set_sense_medium_not_present>:

static inline void set_sense_medium_not_present(uint8_t lun)
{
 8002230:	b580      	push	{r7, lr}
 8002232:	b082      	sub	sp, #8
 8002234:	af00      	add	r7, sp, #0
 8002236:	4603      	mov	r3, r0
 8002238:	71fb      	strb	r3, [r7, #7]
  // default sense is NOT READY, MEDIUM NOT PRESENT
  tud_msc_set_sense(lun, SCSI_SENSE_NOT_READY, 0x3A, 0x00);
 800223a:	79f8      	ldrb	r0, [r7, #7]
 800223c:	2300      	movs	r3, #0
 800223e:	223a      	movs	r2, #58	; 0x3a
 8002240:	2102      	movs	r1, #2
 8002242:	f7ff ffd1 	bl	80021e8 <tud_msc_set_sense>
}
 8002246:	bf00      	nop
 8002248:	3708      	adds	r7, #8
 800224a:	46bd      	mov	sp, r7
 800224c:	bd80      	pop	{r7, pc}
	...

08002250 <mscd_init>:

//--------------------------------------------------------------------+
// USBD Driver API
//--------------------------------------------------------------------+
void mscd_init(void)
{
 8002250:	b580      	push	{r7, lr}
 8002252:	af00      	add	r7, sp, #0
  tu_memclr(&_mscd_itf, sizeof(mscd_interface_t));
 8002254:	2240      	movs	r2, #64	; 0x40
 8002256:	2100      	movs	r1, #0
 8002258:	4802      	ldr	r0, [pc, #8]	; (8002264 <mscd_init+0x14>)
 800225a:	f00d feba 	bl	800ffd2 <memset>
}
 800225e:	bf00      	nop
 8002260:	bd80      	pop	{r7, pc}
 8002262:	bf00      	nop
 8002264:	24000f50 	.word	0x24000f50

08002268 <mscd_reset>:

void mscd_reset(uint8_t rhport)
{
 8002268:	b580      	push	{r7, lr}
 800226a:	b082      	sub	sp, #8
 800226c:	af00      	add	r7, sp, #0
 800226e:	4603      	mov	r3, r0
 8002270:	71fb      	strb	r3, [r7, #7]
  (void) rhport;
  tu_memclr(&_mscd_itf, sizeof(mscd_interface_t));
 8002272:	2240      	movs	r2, #64	; 0x40
 8002274:	2100      	movs	r1, #0
 8002276:	4803      	ldr	r0, [pc, #12]	; (8002284 <mscd_reset+0x1c>)
 8002278:	f00d feab 	bl	800ffd2 <memset>
}
 800227c:	bf00      	nop
 800227e:	3708      	adds	r7, #8
 8002280:	46bd      	mov	sp, r7
 8002282:	bd80      	pop	{r7, pc}
 8002284:	24000f50 	.word	0x24000f50

08002288 <mscd_open>:

uint16_t mscd_open(uint8_t rhport, tusb_desc_interface_t const * itf_desc, uint16_t max_len)
{
 8002288:	b580      	push	{r7, lr}
 800228a:	b08c      	sub	sp, #48	; 0x30
 800228c:	af02      	add	r7, sp, #8
 800228e:	4603      	mov	r3, r0
 8002290:	6039      	str	r1, [r7, #0]
 8002292:	71fb      	strb	r3, [r7, #7]
 8002294:	4613      	mov	r3, r2
 8002296:	80bb      	strh	r3, [r7, #4]
  // only support SCSI's BOT protocol
  TU_VERIFY(TUSB_CLASS_MSC    == itf_desc->bInterfaceClass &&
 8002298:	683b      	ldr	r3, [r7, #0]
 800229a:	795b      	ldrb	r3, [r3, #5]
 800229c:	2b08      	cmp	r3, #8
 800229e:	d107      	bne.n	80022b0 <mscd_open+0x28>
 80022a0:	683b      	ldr	r3, [r7, #0]
 80022a2:	799b      	ldrb	r3, [r3, #6]
 80022a4:	2b06      	cmp	r3, #6
 80022a6:	d103      	bne.n	80022b0 <mscd_open+0x28>
 80022a8:	683b      	ldr	r3, [r7, #0]
 80022aa:	79db      	ldrb	r3, [r3, #7]
 80022ac:	2b50      	cmp	r3, #80	; 0x50
 80022ae:	d001      	beq.n	80022b4 <mscd_open+0x2c>
 80022b0:	2300      	movs	r3, #0
 80022b2:	e053      	b.n	800235c <mscd_open+0xd4>
            MSC_SUBCLASS_SCSI == itf_desc->bInterfaceSubClass &&
            MSC_PROTOCOL_BOT  == itf_desc->bInterfaceProtocol, 0);

  // msc driver length is fixed
  uint16_t const drv_len = sizeof(tusb_desc_interface_t) + 2*sizeof(tusb_desc_endpoint_t);
 80022b4:	2317      	movs	r3, #23
 80022b6:	84fb      	strh	r3, [r7, #38]	; 0x26

  // Max length must be at least 1 interface + 2 endpoints
  TU_ASSERT(max_len >= drv_len, 0);
 80022b8:	88ba      	ldrh	r2, [r7, #4]
 80022ba:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80022bc:	429a      	cmp	r2, r3
 80022be:	d20a      	bcs.n	80022d6 <mscd_open+0x4e>
 80022c0:	4b28      	ldr	r3, [pc, #160]	; (8002364 <mscd_open+0xdc>)
 80022c2:	617b      	str	r3, [r7, #20]
 80022c4:	697b      	ldr	r3, [r7, #20]
 80022c6:	681b      	ldr	r3, [r3, #0]
 80022c8:	f003 0301 	and.w	r3, r3, #1
 80022cc:	2b00      	cmp	r3, #0
 80022ce:	d000      	beq.n	80022d2 <mscd_open+0x4a>
 80022d0:	be00      	bkpt	0x0000
 80022d2:	2300      	movs	r3, #0
 80022d4:	e042      	b.n	800235c <mscd_open+0xd4>

  mscd_interface_t * p_msc = &_mscd_itf;
 80022d6:	4b24      	ldr	r3, [pc, #144]	; (8002368 <mscd_open+0xe0>)
 80022d8:	623b      	str	r3, [r7, #32]
  p_msc->itf_num = itf_desc->bInterfaceNumber;
 80022da:	683b      	ldr	r3, [r7, #0]
 80022dc:	789a      	ldrb	r2, [r3, #2]
 80022de:	6a3b      	ldr	r3, [r7, #32]
 80022e0:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
 80022e4:	683b      	ldr	r3, [r7, #0]
 80022e6:	613b      	str	r3, [r7, #16]
  uint8_t const* desc8 = (uint8_t const*) desc;
 80022e8:	693b      	ldr	r3, [r7, #16]
 80022ea:	60fb      	str	r3, [r7, #12]
  return desc8 + desc8[DESC_OFFSET_LEN];
 80022ec:	68fb      	ldr	r3, [r7, #12]
 80022ee:	781b      	ldrb	r3, [r3, #0]
 80022f0:	461a      	mov	r2, r3
 80022f2:	68fb      	ldr	r3, [r7, #12]
 80022f4:	1899      	adds	r1, r3, r2

  // Open endpoint pair
  TU_ASSERT( usbd_open_edpt_pair(rhport, tu_desc_next(itf_desc), 2, TUSB_XFER_BULK, &p_msc->ep_out, &p_msc->ep_in), 0 );
 80022f6:	6a3b      	ldr	r3, [r7, #32]
 80022f8:	332f      	adds	r3, #47	; 0x2f
 80022fa:	6a3a      	ldr	r2, [r7, #32]
 80022fc:	322e      	adds	r2, #46	; 0x2e
 80022fe:	79f8      	ldrb	r0, [r7, #7]
 8002300:	9201      	str	r2, [sp, #4]
 8002302:	9300      	str	r3, [sp, #0]
 8002304:	2302      	movs	r3, #2
 8002306:	2202      	movs	r2, #2
 8002308:	f002 ffca 	bl	80052a0 <usbd_open_edpt_pair>
 800230c:	4603      	mov	r3, r0
 800230e:	f083 0301 	eor.w	r3, r3, #1
 8002312:	b2db      	uxtb	r3, r3
 8002314:	2b00      	cmp	r3, #0
 8002316:	d00a      	beq.n	800232e <mscd_open+0xa6>
 8002318:	4b12      	ldr	r3, [pc, #72]	; (8002364 <mscd_open+0xdc>)
 800231a:	61bb      	str	r3, [r7, #24]
 800231c:	69bb      	ldr	r3, [r7, #24]
 800231e:	681b      	ldr	r3, [r3, #0]
 8002320:	f003 0301 	and.w	r3, r3, #1
 8002324:	2b00      	cmp	r3, #0
 8002326:	d000      	beq.n	800232a <mscd_open+0xa2>
 8002328:	be00      	bkpt	0x0000
 800232a:	2300      	movs	r3, #0
 800232c:	e016      	b.n	800235c <mscd_open+0xd4>

  // Prepare for Command Block Wrapper
  TU_ASSERT( prepare_cbw(rhport, p_msc), drv_len);
 800232e:	79fb      	ldrb	r3, [r7, #7]
 8002330:	6a39      	ldr	r1, [r7, #32]
 8002332:	4618      	mov	r0, r3
 8002334:	f7ff fe4a 	bl	8001fcc <prepare_cbw>
 8002338:	4603      	mov	r3, r0
 800233a:	f083 0301 	eor.w	r3, r3, #1
 800233e:	b2db      	uxtb	r3, r3
 8002340:	2b00      	cmp	r3, #0
 8002342:	d00a      	beq.n	800235a <mscd_open+0xd2>
 8002344:	4b07      	ldr	r3, [pc, #28]	; (8002364 <mscd_open+0xdc>)
 8002346:	61fb      	str	r3, [r7, #28]
 8002348:	69fb      	ldr	r3, [r7, #28]
 800234a:	681b      	ldr	r3, [r3, #0]
 800234c:	f003 0301 	and.w	r3, r3, #1
 8002350:	2b00      	cmp	r3, #0
 8002352:	d000      	beq.n	8002356 <mscd_open+0xce>
 8002354:	be00      	bkpt	0x0000
 8002356:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8002358:	e000      	b.n	800235c <mscd_open+0xd4>

  return drv_len;
 800235a:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
}
 800235c:	4618      	mov	r0, r3
 800235e:	3728      	adds	r7, #40	; 0x28
 8002360:	46bd      	mov	sp, r7
 8002362:	bd80      	pop	{r7, pc}
 8002364:	e000edf0 	.word	0xe000edf0
 8002368:	24000f50 	.word	0x24000f50

0800236c <proc_bot_reset>:

static void proc_bot_reset(mscd_interface_t* p_msc)
{
 800236c:	b480      	push	{r7}
 800236e:	b083      	sub	sp, #12
 8002370:	af00      	add	r7, sp, #0
 8002372:	6078      	str	r0, [r7, #4]
  p_msc->stage       = MSC_STAGE_CMD;
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	2200      	movs	r2, #0
 8002378:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  p_msc->total_len   = 0;
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	2200      	movs	r2, #0
 8002380:	635a      	str	r2, [r3, #52]	; 0x34
  p_msc->xferred_len = 0;
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	2200      	movs	r2, #0
 8002386:	639a      	str	r2, [r3, #56]	; 0x38

  p_msc->sense_key           = 0;
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	2200      	movs	r2, #0
 800238c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  p_msc->add_sense_code      = 0;
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	2200      	movs	r2, #0
 8002394:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  p_msc->add_sense_qualifier = 0;
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	2200      	movs	r2, #0
 800239c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
}
 80023a0:	bf00      	nop
 80023a2:	370c      	adds	r7, #12
 80023a4:	46bd      	mov	sp, r7
 80023a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023aa:	4770      	bx	lr

080023ac <mscd_control_xfer_cb>:

// Invoked when a control transfer occurred on an interface of this class
// Driver response accordingly to the request and the transfer stage (setup/data/ack)
// return false to stall control endpoint (e.g unsupported request)
bool mscd_control_xfer_cb(uint8_t rhport, uint8_t stage, tusb_control_request_t const * request)
{
 80023ac:	b580      	push	{r7, lr}
 80023ae:	b088      	sub	sp, #32
 80023b0:	af00      	add	r7, sp, #0
 80023b2:	4603      	mov	r3, r0
 80023b4:	603a      	str	r2, [r7, #0]
 80023b6:	71fb      	strb	r3, [r7, #7]
 80023b8:	460b      	mov	r3, r1
 80023ba:	71bb      	strb	r3, [r7, #6]
  // nothing to do with DATA & ACK stage
  if (stage != CONTROL_STAGE_SETUP) return true;
 80023bc:	79bb      	ldrb	r3, [r7, #6]
 80023be:	2b01      	cmp	r3, #1
 80023c0:	d001      	beq.n	80023c6 <mscd_control_xfer_cb+0x1a>
 80023c2:	2301      	movs	r3, #1
 80023c4:	e0e6      	b.n	8002594 <mscd_control_xfer_cb+0x1e8>

  mscd_interface_t* p_msc = &_mscd_itf;
 80023c6:	4b75      	ldr	r3, [pc, #468]	; (800259c <mscd_control_xfer_cb+0x1f0>)
 80023c8:	61fb      	str	r3, [r7, #28]

  // Clear Endpoint Feature (stall) for recovery
  if ( TUSB_REQ_TYPE_STANDARD     == request->bmRequestType_bit.type      &&
 80023ca:	683b      	ldr	r3, [r7, #0]
 80023cc:	781b      	ldrb	r3, [r3, #0]
 80023ce:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80023d2:	b2db      	uxtb	r3, r3
 80023d4:	2b00      	cmp	r3, #0
 80023d6:	f040 8090 	bne.w	80024fa <mscd_control_xfer_cb+0x14e>
       TUSB_REQ_RCPT_ENDPOINT     == request->bmRequestType_bit.recipient &&
 80023da:	683b      	ldr	r3, [r7, #0]
 80023dc:	781b      	ldrb	r3, [r3, #0]
 80023de:	f003 031f 	and.w	r3, r3, #31
 80023e2:	b2db      	uxtb	r3, r3
  if ( TUSB_REQ_TYPE_STANDARD     == request->bmRequestType_bit.type      &&
 80023e4:	2b02      	cmp	r3, #2
 80023e6:	f040 8088 	bne.w	80024fa <mscd_control_xfer_cb+0x14e>
       TUSB_REQ_CLEAR_FEATURE     == request->bRequest                    &&
 80023ea:	683b      	ldr	r3, [r7, #0]
 80023ec:	785b      	ldrb	r3, [r3, #1]
       TUSB_REQ_RCPT_ENDPOINT     == request->bmRequestType_bit.recipient &&
 80023ee:	2b01      	cmp	r3, #1
 80023f0:	f040 8083 	bne.w	80024fa <mscd_control_xfer_cb+0x14e>
       TUSB_REQ_FEATURE_EDPT_HALT == request->wValue )
 80023f4:	683b      	ldr	r3, [r7, #0]
 80023f6:	885b      	ldrh	r3, [r3, #2]
 80023f8:	b29b      	uxth	r3, r3
       TUSB_REQ_CLEAR_FEATURE     == request->bRequest                    &&
 80023fa:	2b00      	cmp	r3, #0
 80023fc:	d17d      	bne.n	80024fa <mscd_control_xfer_cb+0x14e>
  {
    uint8_t const ep_addr = tu_u16_low(request->wIndex);
 80023fe:	683b      	ldr	r3, [r7, #0]
 8002400:	889b      	ldrh	r3, [r3, #4]
 8002402:	b29b      	uxth	r3, r3
 8002404:	81fb      	strh	r3, [r7, #14]
TU_ATTR_ALWAYS_INLINE static inline uint8_t tu_u16_low (uint16_t ui16) { return TU_U16_LOW(ui16); }
 8002406:	89fb      	ldrh	r3, [r7, #14]
 8002408:	b2db      	uxtb	r3, r3
 800240a:	76fb      	strb	r3, [r7, #27]

    if ( p_msc->stage == MSC_STAGE_NEED_RESET )
 800240c:	69fb      	ldr	r3, [r7, #28]
 800240e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8002412:	2b04      	cmp	r3, #4
 8002414:	d106      	bne.n	8002424 <mscd_control_xfer_cb+0x78>
    {
      // reset recovery is required to recover from this stage
      // Clear Stall request cannot resolve this -> continue to stall endpoint
      usbd_edpt_stall(rhport, ep_addr);
 8002416:	7efa      	ldrb	r2, [r7, #27]
 8002418:	79fb      	ldrb	r3, [r7, #7]
 800241a:	4611      	mov	r1, r2
 800241c:	4618      	mov	r0, r3
 800241e:	f003 f8e3 	bl	80055e8 <usbd_edpt_stall>
 8002422:	e068      	b.n	80024f6 <mscd_control_xfer_cb+0x14a>
    }
    else
    {
      if ( ep_addr == p_msc->ep_in )
 8002424:	69fb      	ldr	r3, [r7, #28]
 8002426:	f893 302e 	ldrb.w	r3, [r3, #46]	; 0x2e
 800242a:	7efa      	ldrb	r2, [r7, #27]
 800242c:	429a      	cmp	r2, r3
 800242e:	d11a      	bne.n	8002466 <mscd_control_xfer_cb+0xba>
      {
        if ( p_msc->stage == MSC_STAGE_STATUS )
 8002430:	69fb      	ldr	r3, [r7, #28]
 8002432:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8002436:	2b02      	cmp	r3, #2
 8002438:	d15d      	bne.n	80024f6 <mscd_control_xfer_cb+0x14a>
        {
          // resume sending SCSI status if we are in this stage previously before stalled
          TU_ASSERT( send_csw(rhport, p_msc) );
 800243a:	79fb      	ldrb	r3, [r7, #7]
 800243c:	69f9      	ldr	r1, [r7, #28]
 800243e:	4618      	mov	r0, r3
 8002440:	f7ff fda4 	bl	8001f8c <send_csw>
 8002444:	4603      	mov	r3, r0
 8002446:	f083 0301 	eor.w	r3, r3, #1
 800244a:	b2db      	uxtb	r3, r3
 800244c:	2b00      	cmp	r3, #0
 800244e:	d052      	beq.n	80024f6 <mscd_control_xfer_cb+0x14a>
 8002450:	4b53      	ldr	r3, [pc, #332]	; (80025a0 <mscd_control_xfer_cb+0x1f4>)
 8002452:	613b      	str	r3, [r7, #16]
 8002454:	693b      	ldr	r3, [r7, #16]
 8002456:	681b      	ldr	r3, [r3, #0]
 8002458:	f003 0301 	and.w	r3, r3, #1
 800245c:	2b00      	cmp	r3, #0
 800245e:	d000      	beq.n	8002462 <mscd_control_xfer_cb+0xb6>
 8002460:	be00      	bkpt	0x0000
 8002462:	2300      	movs	r3, #0
 8002464:	e096      	b.n	8002594 <mscd_control_xfer_cb+0x1e8>
        }
      }
      else if ( ep_addr == p_msc->ep_out )
 8002466:	69fb      	ldr	r3, [r7, #28]
 8002468:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800246c:	7efa      	ldrb	r2, [r7, #27]
 800246e:	429a      	cmp	r2, r3
 8002470:	d141      	bne.n	80024f6 <mscd_control_xfer_cb+0x14a>
      {
        if ( p_msc->stage == MSC_STAGE_CMD )
 8002472:	69fb      	ldr	r3, [r7, #28]
 8002474:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8002478:	2b00      	cmp	r3, #0
 800247a:	d13c      	bne.n	80024f6 <mscd_control_xfer_cb+0x14a>
        {
          // part of reset recovery (probably due to invalid CBW) -> prepare for new command
          // Note: skip if already queued previously
          if ( usbd_edpt_ready(rhport, p_msc->ep_out) )
 800247c:	69fb      	ldr	r3, [r7, #28]
 800247e:	f893 202f 	ldrb.w	r2, [r3, #47]	; 0x2f
 8002482:	79fb      	ldrb	r3, [r7, #7]
 8002484:	737b      	strb	r3, [r7, #13]
 8002486:	4613      	mov	r3, r2
 8002488:	733b      	strb	r3, [r7, #12]
bool usbd_edpt_iso_activate(uint8_t rhport,  tusb_desc_endpoint_t const * p_endpoint_desc);

// Check if endpoint is ready (not busy and not stalled)
TU_ATTR_ALWAYS_INLINE static inline
bool usbd_edpt_ready(uint8_t rhport, uint8_t ep_addr) {
  return !usbd_edpt_busy(rhport, ep_addr) && !usbd_edpt_stalled(rhport, ep_addr);
 800248a:	7b3a      	ldrb	r2, [r7, #12]
 800248c:	7b7b      	ldrb	r3, [r7, #13]
 800248e:	4611      	mov	r1, r2
 8002490:	4618      	mov	r0, r3
 8002492:	f003 f87b 	bl	800558c <usbd_edpt_busy>
 8002496:	4603      	mov	r3, r0
 8002498:	f083 0301 	eor.w	r3, r3, #1
 800249c:	b2db      	uxtb	r3, r3
 800249e:	2b00      	cmp	r3, #0
 80024a0:	d00d      	beq.n	80024be <mscd_control_xfer_cb+0x112>
 80024a2:	7b3a      	ldrb	r2, [r7, #12]
 80024a4:	7b7b      	ldrb	r3, [r7, #13]
 80024a6:	4611      	mov	r1, r2
 80024a8:	4618      	mov	r0, r3
 80024aa:	f003 f935 	bl	8005718 <usbd_edpt_stalled>
 80024ae:	4603      	mov	r3, r0
 80024b0:	f083 0301 	eor.w	r3, r3, #1
 80024b4:	b2db      	uxtb	r3, r3
 80024b6:	2b00      	cmp	r3, #0
 80024b8:	d001      	beq.n	80024be <mscd_control_xfer_cb+0x112>
 80024ba:	2301      	movs	r3, #1
 80024bc:	e000      	b.n	80024c0 <mscd_control_xfer_cb+0x114>
 80024be:	2300      	movs	r3, #0
 80024c0:	f003 0301 	and.w	r3, r3, #1
 80024c4:	b2db      	uxtb	r3, r3
 80024c6:	2b00      	cmp	r3, #0
 80024c8:	d015      	beq.n	80024f6 <mscd_control_xfer_cb+0x14a>
          {
            TU_ASSERT( prepare_cbw(rhport, p_msc) );
 80024ca:	79fb      	ldrb	r3, [r7, #7]
 80024cc:	69f9      	ldr	r1, [r7, #28]
 80024ce:	4618      	mov	r0, r3
 80024d0:	f7ff fd7c 	bl	8001fcc <prepare_cbw>
 80024d4:	4603      	mov	r3, r0
 80024d6:	f083 0301 	eor.w	r3, r3, #1
 80024da:	b2db      	uxtb	r3, r3
 80024dc:	2b00      	cmp	r3, #0
 80024de:	d00a      	beq.n	80024f6 <mscd_control_xfer_cb+0x14a>
 80024e0:	4b2f      	ldr	r3, [pc, #188]	; (80025a0 <mscd_control_xfer_cb+0x1f4>)
 80024e2:	617b      	str	r3, [r7, #20]
 80024e4:	697b      	ldr	r3, [r7, #20]
 80024e6:	681b      	ldr	r3, [r3, #0]
 80024e8:	f003 0301 	and.w	r3, r3, #1
 80024ec:	2b00      	cmp	r3, #0
 80024ee:	d000      	beq.n	80024f2 <mscd_control_xfer_cb+0x146>
 80024f0:	be00      	bkpt	0x0000
 80024f2:	2300      	movs	r3, #0
 80024f4:	e04e      	b.n	8002594 <mscd_control_xfer_cb+0x1e8>
          }
        }
      }
    }

    return true;
 80024f6:	2301      	movs	r3, #1
 80024f8:	e04c      	b.n	8002594 <mscd_control_xfer_cb+0x1e8>
  }

  // From this point only handle class request only
  TU_VERIFY(request->bmRequestType_bit.type == TUSB_REQ_TYPE_CLASS);
 80024fa:	683b      	ldr	r3, [r7, #0]
 80024fc:	781b      	ldrb	r3, [r3, #0]
 80024fe:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8002502:	b2db      	uxtb	r3, r3
 8002504:	2b20      	cmp	r3, #32
 8002506:	d001      	beq.n	800250c <mscd_control_xfer_cb+0x160>
 8002508:	2300      	movs	r3, #0
 800250a:	e043      	b.n	8002594 <mscd_control_xfer_cb+0x1e8>

  switch ( request->bRequest )
 800250c:	683b      	ldr	r3, [r7, #0]
 800250e:	785b      	ldrb	r3, [r3, #1]
 8002510:	2bfe      	cmp	r3, #254	; 0xfe
 8002512:	d016      	beq.n	8002542 <mscd_control_xfer_cb+0x196>
 8002514:	2bff      	cmp	r3, #255	; 0xff
 8002516:	d13a      	bne.n	800258e <mscd_control_xfer_cb+0x1e2>
  {
    case MSC_REQ_RESET:
      TU_LOG_DRV("  MSC BOT Reset\r\n");
      TU_VERIFY(request->wValue == 0 && request->wLength == 0);
 8002518:	683b      	ldr	r3, [r7, #0]
 800251a:	885b      	ldrh	r3, [r3, #2]
 800251c:	b29b      	uxth	r3, r3
 800251e:	2b00      	cmp	r3, #0
 8002520:	d104      	bne.n	800252c <mscd_control_xfer_cb+0x180>
 8002522:	683b      	ldr	r3, [r7, #0]
 8002524:	88db      	ldrh	r3, [r3, #6]
 8002526:	b29b      	uxth	r3, r3
 8002528:	2b00      	cmp	r3, #0
 800252a:	d001      	beq.n	8002530 <mscd_control_xfer_cb+0x184>
 800252c:	2300      	movs	r3, #0
 800252e:	e031      	b.n	8002594 <mscd_control_xfer_cb+0x1e8>

      // driver state reset
      proc_bot_reset(p_msc);
 8002530:	69f8      	ldr	r0, [r7, #28]
 8002532:	f7ff ff1b 	bl	800236c <proc_bot_reset>

      tud_control_status(rhport, request);
 8002536:	79fb      	ldrb	r3, [r7, #7]
 8002538:	6839      	ldr	r1, [r7, #0]
 800253a:	4618      	mov	r0, r3
 800253c:	f003 f942 	bl	80057c4 <tud_control_status>
    break;
 8002540:	e027      	b.n	8002592 <mscd_control_xfer_cb+0x1e6>

    case MSC_REQ_GET_MAX_LUN:
    {
      TU_LOG_DRV("  MSC Get Max Lun\r\n");
      TU_VERIFY(request->wValue == 0 && request->wLength == 1);
 8002542:	683b      	ldr	r3, [r7, #0]
 8002544:	885b      	ldrh	r3, [r3, #2]
 8002546:	b29b      	uxth	r3, r3
 8002548:	2b00      	cmp	r3, #0
 800254a:	d104      	bne.n	8002556 <mscd_control_xfer_cb+0x1aa>
 800254c:	683b      	ldr	r3, [r7, #0]
 800254e:	88db      	ldrh	r3, [r3, #6]
 8002550:	b29b      	uxth	r3, r3
 8002552:	2b01      	cmp	r3, #1
 8002554:	d001      	beq.n	800255a <mscd_control_xfer_cb+0x1ae>
 8002556:	2300      	movs	r3, #0
 8002558:	e01c      	b.n	8002594 <mscd_control_xfer_cb+0x1e8>

      uint8_t maxlun = 1;
 800255a:	2301      	movs	r3, #1
 800255c:	72fb      	strb	r3, [r7, #11]
      if (tud_msc_get_maxlun_cb) maxlun = tud_msc_get_maxlun_cb();
 800255e:	4b11      	ldr	r3, [pc, #68]	; (80025a4 <mscd_control_xfer_cb+0x1f8>)
 8002560:	2b00      	cmp	r3, #0
 8002562:	d003      	beq.n	800256c <mscd_control_xfer_cb+0x1c0>
 8002564:	f3af 8000 	nop.w
 8002568:	4603      	mov	r3, r0
 800256a:	72fb      	strb	r3, [r7, #11]
      TU_VERIFY(maxlun);
 800256c:	7afb      	ldrb	r3, [r7, #11]
 800256e:	2b00      	cmp	r3, #0
 8002570:	d101      	bne.n	8002576 <mscd_control_xfer_cb+0x1ca>
 8002572:	2300      	movs	r3, #0
 8002574:	e00e      	b.n	8002594 <mscd_control_xfer_cb+0x1e8>

      // MAX LUN is minus 1 by specs
      maxlun--;
 8002576:	7afb      	ldrb	r3, [r7, #11]
 8002578:	3b01      	subs	r3, #1
 800257a:	b2db      	uxtb	r3, r3
 800257c:	72fb      	strb	r3, [r7, #11]

      tud_control_xfer(rhport, request, &maxlun, 1);
 800257e:	f107 020b 	add.w	r2, r7, #11
 8002582:	79f8      	ldrb	r0, [r7, #7]
 8002584:	2301      	movs	r3, #1
 8002586:	6839      	ldr	r1, [r7, #0]
 8002588:	f003 f98e 	bl	80058a8 <tud_control_xfer>
    }
    break;
 800258c:	e001      	b.n	8002592 <mscd_control_xfer_cb+0x1e6>

    default: return false; // stall unsupported request
 800258e:	2300      	movs	r3, #0
 8002590:	e000      	b.n	8002594 <mscd_control_xfer_cb+0x1e8>
  }

  return true;
 8002592:	2301      	movs	r3, #1
}
 8002594:	4618      	mov	r0, r3
 8002596:	3720      	adds	r7, #32
 8002598:	46bd      	mov	sp, r7
 800259a:	bd80      	pop	{r7, pc}
 800259c:	24000f50 	.word	0x24000f50
 80025a0:	e000edf0 	.word	0xe000edf0
 80025a4:	00000000 	.word	0x00000000

080025a8 <mscd_xfer_cb>:

bool mscd_xfer_cb(uint8_t rhport, uint8_t ep_addr, xfer_result_t event, uint32_t xferred_bytes)
{
 80025a8:	b580      	push	{r7, lr}
 80025aa:	b098      	sub	sp, #96	; 0x60
 80025ac:	af00      	add	r7, sp, #0
 80025ae:	603b      	str	r3, [r7, #0]
 80025b0:	4603      	mov	r3, r0
 80025b2:	71fb      	strb	r3, [r7, #7]
 80025b4:	460b      	mov	r3, r1
 80025b6:	71bb      	strb	r3, [r7, #6]
 80025b8:	4613      	mov	r3, r2
 80025ba:	717b      	strb	r3, [r7, #5]
  (void) event;

  mscd_interface_t* p_msc = &_mscd_itf;
 80025bc:	4b95      	ldr	r3, [pc, #596]	; (8002814 <mscd_xfer_cb+0x26c>)
 80025be:	65bb      	str	r3, [r7, #88]	; 0x58
  msc_cbw_t const * p_cbw = &p_msc->cbw;
 80025c0:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80025c2:	657b      	str	r3, [r7, #84]	; 0x54
  msc_csw_t       * p_csw = &p_msc->csw;
 80025c4:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80025c6:	3320      	adds	r3, #32
 80025c8:	653b      	str	r3, [r7, #80]	; 0x50

  switch (p_msc->stage)
 80025ca:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80025cc:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80025d0:	2b03      	cmp	r3, #3
 80025d2:	f200 8207 	bhi.w	80029e4 <mscd_xfer_cb+0x43c>
 80025d6:	a201      	add	r2, pc, #4	; (adr r2, 80025dc <mscd_xfer_cb+0x34>)
 80025d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80025dc:	080025ed 	.word	0x080025ed
 80025e0:	08002879 	.word	0x08002879
 80025e4:	080029e5 	.word	0x080029e5
 80025e8:	08002953 	.word	0x08002953
  {
    case MSC_STAGE_CMD:
      //------------- new CBW received -------------//
      // Complete IN while waiting for CMD is usually Status of previous SCSI op, ignore it
      if(ep_addr != p_msc->ep_out) return true;
 80025ec:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80025ee:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 80025f2:	79ba      	ldrb	r2, [r7, #6]
 80025f4:	429a      	cmp	r2, r3
 80025f6:	d001      	beq.n	80025fc <mscd_xfer_cb+0x54>
 80025f8:	2301      	movs	r3, #1
 80025fa:	e247      	b.n	8002a8c <mscd_xfer_cb+0x4e4>

      if ( !(xferred_bytes == sizeof(msc_cbw_t) && p_cbw->signature == MSC_CBW_SIGNATURE) )
 80025fc:	683b      	ldr	r3, [r7, #0]
 80025fe:	2b1f      	cmp	r3, #31
 8002600:	d104      	bne.n	800260c <mscd_xfer_cb+0x64>
 8002602:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	4a84      	ldr	r2, [pc, #528]	; (8002818 <mscd_xfer_cb+0x270>)
 8002608:	4293      	cmp	r3, r2
 800260a:	d015      	beq.n	8002638 <mscd_xfer_cb+0x90>
      {
        TU_LOG_DRV("  SCSI CBW is not valid\r\n");

        // BOT 6.6.1 If CBW is not valid stall both endpoints until reset recovery
        p_msc->stage = MSC_STAGE_NEED_RESET;
 800260c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800260e:	2204      	movs	r2, #4
 8002610:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

        // invalid CBW stall both endpoints
        usbd_edpt_stall(rhport, p_msc->ep_in);
 8002614:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002616:	f893 202e 	ldrb.w	r2, [r3, #46]	; 0x2e
 800261a:	79fb      	ldrb	r3, [r7, #7]
 800261c:	4611      	mov	r1, r2
 800261e:	4618      	mov	r0, r3
 8002620:	f002 ffe2 	bl	80055e8 <usbd_edpt_stall>
        usbd_edpt_stall(rhport, p_msc->ep_out);
 8002624:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002626:	f893 202f 	ldrb.w	r2, [r3, #47]	; 0x2f
 800262a:	79fb      	ldrb	r3, [r7, #7]
 800262c:	4611      	mov	r1, r2
 800262e:	4618      	mov	r0, r3
 8002630:	f002 ffda 	bl	80055e8 <usbd_edpt_stall>

        return false;
 8002634:	2300      	movs	r3, #0
 8002636:	e229      	b.n	8002a8c <mscd_xfer_cb+0x4e4>
      }

      TU_LOG_DRV("  SCSI Command [Lun%u]: %s\r\n", p_cbw->lun, tu_lookup_find(&_msc_scsi_cmd_table, p_cbw->command[0]));
      //TU_LOG_MEM(MSC_DEBUG, p_cbw, xferred_bytes, 2);

      p_csw->signature    = MSC_CSW_SIGNATURE;
 8002638:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800263a:	2200      	movs	r2, #0
 800263c:	f042 0255 	orr.w	r2, r2, #85	; 0x55
 8002640:	701a      	strb	r2, [r3, #0]
 8002642:	2200      	movs	r2, #0
 8002644:	f042 0253 	orr.w	r2, r2, #83	; 0x53
 8002648:	705a      	strb	r2, [r3, #1]
 800264a:	2200      	movs	r2, #0
 800264c:	f042 0242 	orr.w	r2, r2, #66	; 0x42
 8002650:	709a      	strb	r2, [r3, #2]
 8002652:	2200      	movs	r2, #0
 8002654:	f042 0253 	orr.w	r2, r2, #83	; 0x53
 8002658:	70da      	strb	r2, [r3, #3]
      p_csw->tag          = p_cbw->tag;
 800265a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800265c:	685a      	ldr	r2, [r3, #4]
 800265e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002660:	605a      	str	r2, [r3, #4]
      p_csw->data_residue = 0;
 8002662:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002664:	2200      	movs	r2, #0
 8002666:	721a      	strb	r2, [r3, #8]
 8002668:	2200      	movs	r2, #0
 800266a:	725a      	strb	r2, [r3, #9]
 800266c:	2200      	movs	r2, #0
 800266e:	729a      	strb	r2, [r3, #10]
 8002670:	2200      	movs	r2, #0
 8002672:	72da      	strb	r2, [r3, #11]
      p_csw->status       = MSC_CSW_STATUS_PASSED;
 8002674:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002676:	2200      	movs	r2, #0
 8002678:	731a      	strb	r2, [r3, #12]

      /*------------- Parse command and prepare DATA -------------*/
      p_msc->stage = MSC_STAGE_DATA;
 800267a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800267c:	2201      	movs	r2, #1
 800267e:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      p_msc->total_len = p_cbw->total_bytes;
 8002682:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002684:	689a      	ldr	r2, [r3, #8]
 8002686:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002688:	635a      	str	r2, [r3, #52]	; 0x34
      p_msc->xferred_len = 0;
 800268a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800268c:	2200      	movs	r2, #0
 800268e:	639a      	str	r2, [r3, #56]	; 0x38

      // Read10 or Write10
      if ( (SCSI_CMD_READ_10 == p_cbw->command[0]) || (SCSI_CMD_WRITE_10 == p_cbw->command[0]) )
 8002690:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002692:	7bdb      	ldrb	r3, [r3, #15]
 8002694:	2b28      	cmp	r3, #40	; 0x28
 8002696:	d003      	beq.n	80026a0 <mscd_xfer_cb+0xf8>
 8002698:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800269a:	7bdb      	ldrb	r3, [r3, #15]
 800269c:	2b2a      	cmp	r3, #42	; 0x2a
 800269e:	d12a      	bne.n	80026f6 <mscd_xfer_cb+0x14e>
      {
        uint8_t const status = rdwr10_validate_cmd(p_cbw);
 80026a0:	6d78      	ldr	r0, [r7, #84]	; 0x54
 80026a2:	f7ff fd40 	bl	8002126 <rdwr10_validate_cmd>
 80026a6:	4603      	mov	r3, r0
 80026a8:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b

        if ( status != MSC_CSW_STATUS_PASSED)
 80026ac:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 80026b0:	2b00      	cmp	r3, #0
 80026b2:	d007      	beq.n	80026c4 <mscd_xfer_cb+0x11c>
        {
          fail_scsi_op(rhport, p_msc, status);
 80026b4:	f897 203b 	ldrb.w	r2, [r7, #59]	; 0x3b
 80026b8:	79fb      	ldrb	r3, [r7, #7]
 80026ba:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80026bc:	4618      	mov	r0, r3
 80026be:	f7ff fc9c 	bl	8001ffa <fail_scsi_op>
      {
 80026c2:	e0d8      	b.n	8002876 <mscd_xfer_cb+0x2ce>
        }else if ( p_cbw->total_bytes )
 80026c4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80026c6:	689b      	ldr	r3, [r3, #8]
 80026c8:	2b00      	cmp	r3, #0
 80026ca:	d00f      	beq.n	80026ec <mscd_xfer_cb+0x144>
        {
          if (SCSI_CMD_READ_10 == p_cbw->command[0])
 80026cc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80026ce:	7bdb      	ldrb	r3, [r3, #15]
 80026d0:	2b28      	cmp	r3, #40	; 0x28
 80026d2:	d105      	bne.n	80026e0 <mscd_xfer_cb+0x138>
          {
            proc_read10_cmd(rhport, p_msc);
 80026d4:	79fb      	ldrb	r3, [r7, #7]
 80026d6:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80026d8:	4618      	mov	r0, r3
 80026da:	f000 fc95 	bl	8003008 <proc_read10_cmd>
      {
 80026de:	e0ca      	b.n	8002876 <mscd_xfer_cb+0x2ce>
          }else
          {
            proc_write10_cmd(rhport, p_msc);
 80026e0:	79fb      	ldrb	r3, [r7, #7]
 80026e2:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80026e4:	4618      	mov	r0, r3
 80026e6:	f000 fd23 	bl	8003130 <proc_write10_cmd>
      {
 80026ea:	e0c4      	b.n	8002876 <mscd_xfer_cb+0x2ce>
          }
        }else
        {
          // no data transfer, only exist in complaint test suite
          p_msc->stage = MSC_STAGE_STATUS;
 80026ec:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80026ee:	2202      	movs	r2, #2
 80026f0:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      {
 80026f4:	e0bf      	b.n	8002876 <mscd_xfer_cb+0x2ce>
      else
      {
        // For other SCSI commands
        // 1. OUT : queue transfer (invoke app callback after done)
        // 2. IN & Zero: Process if is built-in, else Invoke app callback. Skip DATA if zero length
        if ( (p_cbw->total_bytes > 0 ) && !is_data_in(p_cbw->dir) )
 80026f6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80026f8:	689b      	ldr	r3, [r3, #8]
 80026fa:	2b00      	cmp	r3, #0
 80026fc:	d042      	beq.n	8002784 <mscd_xfer_cb+0x1dc>
 80026fe:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002700:	7b1b      	ldrb	r3, [r3, #12]
 8002702:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  return tu_bit_test(dir, 7);
 8002706:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800270a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800270c:	2307      	movs	r3, #7
 800270e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
TU_ATTR_ALWAYS_INLINE static inline bool     tu_bit_test (uint32_t value, uint8_t pos) { return (value & TU_BIT(pos)) ? true : false; }
 8002712:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8002716:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002718:	fa22 f303 	lsr.w	r3, r2, r3
 800271c:	f003 0301 	and.w	r3, r3, #1
 8002720:	2b00      	cmp	r3, #0
 8002722:	bf14      	ite	ne
 8002724:	2301      	movne	r3, #1
 8002726:	2300      	moveq	r3, #0
 8002728:	b2db      	uxtb	r3, r3
        if ( (p_cbw->total_bytes > 0 ) && !is_data_in(p_cbw->dir) )
 800272a:	f083 0301 	eor.w	r3, r3, #1
 800272e:	b2db      	uxtb	r3, r3
 8002730:	2b00      	cmp	r3, #0
 8002732:	d027      	beq.n	8002784 <mscd_xfer_cb+0x1dc>
        {
          if (p_cbw->total_bytes > sizeof(_mscd_buf))
 8002734:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002736:	689b      	ldr	r3, [r3, #8]
 8002738:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800273c:	d906      	bls.n	800274c <mscd_xfer_cb+0x1a4>
          {
            TU_LOG_DRV("  SCSI reject non READ10/WRITE10 with large data\r\n");
            fail_scsi_op(rhport, p_msc, MSC_CSW_STATUS_FAILED);
 800273e:	79fb      	ldrb	r3, [r7, #7]
 8002740:	2201      	movs	r2, #1
 8002742:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8002744:	4618      	mov	r0, r3
 8002746:	f7ff fc58 	bl	8001ffa <fail_scsi_op>
          if (p_cbw->total_bytes > sizeof(_mscd_buf))
 800274a:	e093      	b.n	8002874 <mscd_xfer_cb+0x2cc>
          }else
          {
            // Didn't check for case 9 (Ho > Dn), which requires examining scsi command first
            // but it is OK to just receive data then responded with failed status
            TU_ASSERT( usbd_edpt_xfer(rhport, p_msc->ep_out, _mscd_buf, (uint16_t) p_msc->total_len) );
 800274c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800274e:	f893 102f 	ldrb.w	r1, [r3, #47]	; 0x2f
 8002752:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002754:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002756:	b29b      	uxth	r3, r3
 8002758:	79f8      	ldrb	r0, [r7, #7]
 800275a:	4a30      	ldr	r2, [pc, #192]	; (800281c <mscd_xfer_cb+0x274>)
 800275c:	f002 fea0 	bl	80054a0 <usbd_edpt_xfer>
 8002760:	4603      	mov	r3, r0
 8002762:	f083 0301 	eor.w	r3, r3, #1
 8002766:	b2db      	uxtb	r3, r3
 8002768:	2b00      	cmp	r3, #0
 800276a:	f000 8083 	beq.w	8002874 <mscd_xfer_cb+0x2cc>
 800276e:	4b2c      	ldr	r3, [pc, #176]	; (8002820 <mscd_xfer_cb+0x278>)
 8002770:	643b      	str	r3, [r7, #64]	; 0x40
 8002772:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002774:	681b      	ldr	r3, [r3, #0]
 8002776:	f003 0301 	and.w	r3, r3, #1
 800277a:	2b00      	cmp	r3, #0
 800277c:	d000      	beq.n	8002780 <mscd_xfer_cb+0x1d8>
 800277e:	be00      	bkpt	0x0000
 8002780:	2300      	movs	r3, #0
 8002782:	e183      	b.n	8002a8c <mscd_xfer_cb+0x4e4>
          }
        }else
        {
          // First process if it is a built-in commands
          int32_t resplen = proc_builtin_scsi(p_cbw->lun, p_cbw->command, _mscd_buf, sizeof(_mscd_buf));
 8002784:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002786:	7b58      	ldrb	r0, [r3, #13]
 8002788:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800278a:	f103 010f 	add.w	r1, r3, #15
 800278e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002792:	4a22      	ldr	r2, [pc, #136]	; (800281c <mscd_xfer_cb+0x274>)
 8002794:	f000 f988 	bl	8002aa8 <proc_builtin_scsi>
 8002798:	65f8      	str	r0, [r7, #92]	; 0x5c

          // Invoke user callback if not built-in
          if ( (resplen < 0) && (p_msc->sense_key == 0) )
 800279a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800279c:	2b00      	cmp	r3, #0
 800279e:	da10      	bge.n	80027c2 <mscd_xfer_cb+0x21a>
 80027a0:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80027a2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80027a6:	2b00      	cmp	r3, #0
 80027a8:	d10b      	bne.n	80027c2 <mscd_xfer_cb+0x21a>
          {
            resplen = tud_msc_scsi_cb(p_cbw->lun, p_cbw->command, _mscd_buf, (uint16_t) p_msc->total_len);
 80027aa:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80027ac:	7b58      	ldrb	r0, [r3, #13]
 80027ae:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80027b0:	f103 010f 	add.w	r1, r3, #15
 80027b4:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80027b6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80027b8:	b29b      	uxth	r3, r3
 80027ba:	4a18      	ldr	r2, [pc, #96]	; (800281c <mscd_xfer_cb+0x274>)
 80027bc:	f7fe fc0c 	bl	8000fd8 <tud_msc_scsi_cb>
 80027c0:	65f8      	str	r0, [r7, #92]	; 0x5c
          }

          if ( resplen < 0 )
 80027c2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80027c4:	2b00      	cmp	r3, #0
 80027c6:	da06      	bge.n	80027d6 <mscd_xfer_cb+0x22e>
          {
            // unsupported command
            TU_LOG_DRV("  SCSI unsupported or failed command\r\n");
            fail_scsi_op(rhport, p_msc, MSC_CSW_STATUS_FAILED);
 80027c8:	79fb      	ldrb	r3, [r7, #7]
 80027ca:	2201      	movs	r2, #1
 80027cc:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80027ce:	4618      	mov	r0, r3
 80027d0:	f7ff fc13 	bl	8001ffa <fail_scsi_op>
              TU_ASSERT( usbd_edpt_xfer(rhport, p_msc->ep_in, _mscd_buf, (uint16_t) p_msc->total_len) );
            }
          }
        }
      }
    break;
 80027d4:	e108      	b.n	80029e8 <mscd_xfer_cb+0x440>
          else if (resplen == 0)
 80027d6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80027d8:	2b00      	cmp	r3, #0
 80027da:	d10f      	bne.n	80027fc <mscd_xfer_cb+0x254>
            if (p_cbw->total_bytes)
 80027dc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80027de:	689b      	ldr	r3, [r3, #8]
 80027e0:	2b00      	cmp	r3, #0
 80027e2:	d006      	beq.n	80027f2 <mscd_xfer_cb+0x24a>
              fail_scsi_op(rhport, p_msc, MSC_CSW_STATUS_FAILED);
 80027e4:	79fb      	ldrb	r3, [r7, #7]
 80027e6:	2201      	movs	r2, #1
 80027e8:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80027ea:	4618      	mov	r0, r3
 80027ec:	f7ff fc05 	bl	8001ffa <fail_scsi_op>
    break;
 80027f0:	e0fa      	b.n	80029e8 <mscd_xfer_cb+0x440>
              p_msc->stage = MSC_STAGE_STATUS;
 80027f2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80027f4:	2202      	movs	r2, #2
 80027f6:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    break;
 80027fa:	e0f5      	b.n	80029e8 <mscd_xfer_cb+0x440>
            if ( p_cbw->total_bytes == 0 )
 80027fc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80027fe:	689b      	ldr	r3, [r3, #8]
 8002800:	2b00      	cmp	r3, #0
 8002802:	d10f      	bne.n	8002824 <mscd_xfer_cb+0x27c>
              fail_scsi_op(rhport, p_msc, MSC_CSW_STATUS_FAILED);
 8002804:	79fb      	ldrb	r3, [r7, #7]
 8002806:	2201      	movs	r2, #1
 8002808:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800280a:	4618      	mov	r0, r3
 800280c:	f7ff fbf5 	bl	8001ffa <fail_scsi_op>
    break;
 8002810:	e0ea      	b.n	80029e8 <mscd_xfer_cb+0x440>
 8002812:	bf00      	nop
 8002814:	24000f50 	.word	0x24000f50
 8002818:	43425355 	.word	0x43425355
 800281c:	24000f90 	.word	0x24000f90
 8002820:	e000edf0 	.word	0xe000edf0
              p_msc->total_len = tu_min32((uint32_t) resplen, p_cbw->total_bytes);
 8002824:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8002826:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002828:	689b      	ldr	r3, [r3, #8]
 800282a:	627a      	str	r2, [r7, #36]	; 0x24
 800282c:	623b      	str	r3, [r7, #32]
TU_ATTR_ALWAYS_INLINE static inline uint32_t tu_min32 (uint32_t x, uint32_t y) { return (x < y) ? x : y; }
 800282e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002830:	6a3b      	ldr	r3, [r7, #32]
 8002832:	429a      	cmp	r2, r3
 8002834:	bf28      	it	cs
 8002836:	461a      	movcs	r2, r3
 8002838:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800283a:	635a      	str	r2, [r3, #52]	; 0x34
              TU_ASSERT( usbd_edpt_xfer(rhport, p_msc->ep_in, _mscd_buf, (uint16_t) p_msc->total_len) );
 800283c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800283e:	f893 102e 	ldrb.w	r1, [r3, #46]	; 0x2e
 8002842:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002844:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002846:	b29b      	uxth	r3, r3
 8002848:	79f8      	ldrb	r0, [r7, #7]
 800284a:	4a92      	ldr	r2, [pc, #584]	; (8002a94 <mscd_xfer_cb+0x4ec>)
 800284c:	f002 fe28 	bl	80054a0 <usbd_edpt_xfer>
 8002850:	4603      	mov	r3, r0
 8002852:	f083 0301 	eor.w	r3, r3, #1
 8002856:	b2db      	uxtb	r3, r3
 8002858:	2b00      	cmp	r3, #0
 800285a:	f000 80c5 	beq.w	80029e8 <mscd_xfer_cb+0x440>
 800285e:	4b8e      	ldr	r3, [pc, #568]	; (8002a98 <mscd_xfer_cb+0x4f0>)
 8002860:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002862:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002864:	681b      	ldr	r3, [r3, #0]
 8002866:	f003 0301 	and.w	r3, r3, #1
 800286a:	2b00      	cmp	r3, #0
 800286c:	d000      	beq.n	8002870 <mscd_xfer_cb+0x2c8>
 800286e:	be00      	bkpt	0x0000
 8002870:	2300      	movs	r3, #0
 8002872:	e10b      	b.n	8002a8c <mscd_xfer_cb+0x4e4>
          if (p_cbw->total_bytes > sizeof(_mscd_buf))
 8002874:	bf00      	nop
    break;
 8002876:	e0b7      	b.n	80029e8 <mscd_xfer_cb+0x440>

    case MSC_STAGE_DATA:
      TU_LOG_DRV("  SCSI Data [Lun%u]\r\n", p_cbw->lun);
      //TU_LOG_MEM(MSC_DEBUG, _mscd_buf, xferred_bytes, 2);

      if (SCSI_CMD_READ_10 == p_cbw->command[0])
 8002878:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800287a:	7bdb      	ldrb	r3, [r3, #15]
 800287c:	2b28      	cmp	r3, #40	; 0x28
 800287e:	d116      	bne.n	80028ae <mscd_xfer_cb+0x306>
      {
        p_msc->xferred_len += xferred_bytes;
 8002880:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002882:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002884:	683b      	ldr	r3, [r7, #0]
 8002886:	441a      	add	r2, r3
 8002888:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800288a:	639a      	str	r2, [r3, #56]	; 0x38

        if ( p_msc->xferred_len >= p_msc->total_len )
 800288c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800288e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002890:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002892:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002894:	429a      	cmp	r2, r3
 8002896:	d304      	bcc.n	80028a2 <mscd_xfer_cb+0x2fa>
        {
          // Data Stage is complete
          p_msc->stage = MSC_STAGE_STATUS;
 8002898:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800289a:	2202      	movs	r2, #2
 800289c:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
        {
          // This scenario with command that take more than one transfer is already rejected at Command stage
          TU_BREAKPOINT();
        }
      }
    break;
 80028a0:	e0a4      	b.n	80029ec <mscd_xfer_cb+0x444>
          proc_read10_cmd(rhport, p_msc);
 80028a2:	79fb      	ldrb	r3, [r7, #7]
 80028a4:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80028a6:	4618      	mov	r0, r3
 80028a8:	f000 fbae 	bl	8003008 <proc_read10_cmd>
    break;
 80028ac:	e09e      	b.n	80029ec <mscd_xfer_cb+0x444>
      else if (SCSI_CMD_WRITE_10 == p_cbw->command[0])
 80028ae:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80028b0:	7bdb      	ldrb	r3, [r3, #15]
 80028b2:	2b2a      	cmp	r3, #42	; 0x2a
 80028b4:	d106      	bne.n	80028c4 <mscd_xfer_cb+0x31c>
        proc_write10_new_data(rhport, p_msc, xferred_bytes);
 80028b6:	79fb      	ldrb	r3, [r7, #7]
 80028b8:	683a      	ldr	r2, [r7, #0]
 80028ba:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80028bc:	4618      	mov	r0, r3
 80028be:	f000 fc8f 	bl	80031e0 <proc_write10_new_data>
    break;
 80028c2:	e093      	b.n	80029ec <mscd_xfer_cb+0x444>
        p_msc->xferred_len += xferred_bytes;
 80028c4:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80028c6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80028c8:	683b      	ldr	r3, [r7, #0]
 80028ca:	441a      	add	r2, r3
 80028cc:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80028ce:	639a      	str	r2, [r3, #56]	; 0x38
        if ( !is_data_in(p_cbw->dir) )
 80028d0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80028d2:	7b1b      	ldrb	r3, [r3, #12]
 80028d4:	77fb      	strb	r3, [r7, #31]
  return tu_bit_test(dir, 7);
 80028d6:	7ffb      	ldrb	r3, [r7, #31]
 80028d8:	61bb      	str	r3, [r7, #24]
 80028da:	2307      	movs	r3, #7
 80028dc:	75fb      	strb	r3, [r7, #23]
TU_ATTR_ALWAYS_INLINE static inline bool     tu_bit_test (uint32_t value, uint8_t pos) { return (value & TU_BIT(pos)) ? true : false; }
 80028de:	7dfb      	ldrb	r3, [r7, #23]
 80028e0:	69ba      	ldr	r2, [r7, #24]
 80028e2:	fa22 f303 	lsr.w	r3, r2, r3
 80028e6:	f003 0301 	and.w	r3, r3, #1
 80028ea:	2b00      	cmp	r3, #0
 80028ec:	bf14      	ite	ne
 80028ee:	2301      	movne	r3, #1
 80028f0:	2300      	moveq	r3, #0
 80028f2:	b2db      	uxtb	r3, r3
        if ( !is_data_in(p_cbw->dir) )
 80028f4:	f083 0301 	eor.w	r3, r3, #1
 80028f8:	b2db      	uxtb	r3, r3
 80028fa:	2b00      	cmp	r3, #0
 80028fc:	d014      	beq.n	8002928 <mscd_xfer_cb+0x380>
          int32_t cb_result = tud_msc_scsi_cb(p_cbw->lun, p_cbw->command, _mscd_buf, (uint16_t) p_msc->total_len);
 80028fe:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002900:	7b58      	ldrb	r0, [r3, #13]
 8002902:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002904:	f103 010f 	add.w	r1, r3, #15
 8002908:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800290a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800290c:	b29b      	uxth	r3, r3
 800290e:	4a61      	ldr	r2, [pc, #388]	; (8002a94 <mscd_xfer_cb+0x4ec>)
 8002910:	f7fe fb62 	bl	8000fd8 <tud_msc_scsi_cb>
 8002914:	64b8      	str	r0, [r7, #72]	; 0x48
          if ( cb_result < 0 )
 8002916:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002918:	2b00      	cmp	r3, #0
 800291a:	da05      	bge.n	8002928 <mscd_xfer_cb+0x380>
            fail_scsi_op(rhport, p_msc, MSC_CSW_STATUS_FAILED);
 800291c:	79fb      	ldrb	r3, [r7, #7]
 800291e:	2201      	movs	r2, #1
 8002920:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8002922:	4618      	mov	r0, r3
 8002924:	f7ff fb69 	bl	8001ffa <fail_scsi_op>
        if ( p_msc->xferred_len >= p_msc->total_len )
 8002928:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800292a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800292c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800292e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002930:	429a      	cmp	r2, r3
 8002932:	d304      	bcc.n	800293e <mscd_xfer_cb+0x396>
          p_msc->stage = MSC_STAGE_STATUS;
 8002934:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002936:	2202      	movs	r2, #2
 8002938:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    break;
 800293c:	e056      	b.n	80029ec <mscd_xfer_cb+0x444>
          TU_BREAKPOINT();
 800293e:	4b56      	ldr	r3, [pc, #344]	; (8002a98 <mscd_xfer_cb+0x4f0>)
 8002940:	647b      	str	r3, [r7, #68]	; 0x44
 8002942:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002944:	681b      	ldr	r3, [r3, #0]
 8002946:	f003 0301 	and.w	r3, r3, #1
 800294a:	2b00      	cmp	r3, #0
 800294c:	d04e      	beq.n	80029ec <mscd_xfer_cb+0x444>
 800294e:	be00      	bkpt	0x0000
    break;
 8002950:	e04c      	b.n	80029ec <mscd_xfer_cb+0x444>
      // processed immediately after this switch, supposedly to be empty
    break;

    case MSC_STAGE_STATUS_SENT:
      // Wait for the Status phase to complete
      if( (ep_addr == p_msc->ep_in) && (xferred_bytes == sizeof(msc_csw_t)) )
 8002952:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002954:	f893 302e 	ldrb.w	r3, [r3, #46]	; 0x2e
 8002958:	79ba      	ldrb	r2, [r7, #6]
 800295a:	429a      	cmp	r2, r3
 800295c:	d148      	bne.n	80029f0 <mscd_xfer_cb+0x448>
 800295e:	683b      	ldr	r3, [r7, #0]
 8002960:	2b0d      	cmp	r3, #13
 8002962:	d145      	bne.n	80029f0 <mscd_xfer_cb+0x448>
        // TU_LOG_MEM(MSC_DEBUG, p_csw, xferred_bytes, 2);

        // Invoke complete callback if defined
        // Note: There is racing issue with samd51 + qspi flash testing with arduino
        // if complete_cb() is invoked after queuing the status.
        switch(p_cbw->command[0])
 8002964:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002966:	7bdb      	ldrb	r3, [r3, #15]
 8002968:	2b28      	cmp	r3, #40	; 0x28
 800296a:	d002      	beq.n	8002972 <mscd_xfer_cb+0x3ca>
 800296c:	2b2a      	cmp	r3, #42	; 0x2a
 800296e:	d009      	beq.n	8002984 <mscd_xfer_cb+0x3dc>
 8002970:	e011      	b.n	8002996 <mscd_xfer_cb+0x3ee>
        {
          case SCSI_CMD_READ_10:
            if ( tud_msc_read10_complete_cb ) tud_msc_read10_complete_cb(p_cbw->lun);
 8002972:	4b4a      	ldr	r3, [pc, #296]	; (8002a9c <mscd_xfer_cb+0x4f4>)
 8002974:	2b00      	cmp	r3, #0
 8002976:	d01a      	beq.n	80029ae <mscd_xfer_cb+0x406>
 8002978:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800297a:	7b5b      	ldrb	r3, [r3, #13]
 800297c:	4618      	mov	r0, r3
 800297e:	f3af 8000 	nop.w
          break;
 8002982:	e014      	b.n	80029ae <mscd_xfer_cb+0x406>

          case SCSI_CMD_WRITE_10:
            if ( tud_msc_write10_complete_cb ) tud_msc_write10_complete_cb(p_cbw->lun);
 8002984:	4b46      	ldr	r3, [pc, #280]	; (8002aa0 <mscd_xfer_cb+0x4f8>)
 8002986:	2b00      	cmp	r3, #0
 8002988:	d013      	beq.n	80029b2 <mscd_xfer_cb+0x40a>
 800298a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800298c:	7b5b      	ldrb	r3, [r3, #13]
 800298e:	4618      	mov	r0, r3
 8002990:	f3af 8000 	nop.w
          break;
 8002994:	e00d      	b.n	80029b2 <mscd_xfer_cb+0x40a>

          default:
            if ( tud_msc_scsi_complete_cb ) tud_msc_scsi_complete_cb(p_cbw->lun, p_cbw->command);
 8002996:	4b43      	ldr	r3, [pc, #268]	; (8002aa4 <mscd_xfer_cb+0x4fc>)
 8002998:	2b00      	cmp	r3, #0
 800299a:	d00c      	beq.n	80029b6 <mscd_xfer_cb+0x40e>
 800299c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800299e:	7b5a      	ldrb	r2, [r3, #13]
 80029a0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80029a2:	330f      	adds	r3, #15
 80029a4:	4619      	mov	r1, r3
 80029a6:	4610      	mov	r0, r2
 80029a8:	f3af 8000 	nop.w
          break;
 80029ac:	e003      	b.n	80029b6 <mscd_xfer_cb+0x40e>
          break;
 80029ae:	bf00      	nop
 80029b0:	e002      	b.n	80029b8 <mscd_xfer_cb+0x410>
          break;
 80029b2:	bf00      	nop
 80029b4:	e000      	b.n	80029b8 <mscd_xfer_cb+0x410>
          break;
 80029b6:	bf00      	nop
        }

        TU_ASSERT( prepare_cbw(rhport, p_msc) );
 80029b8:	79fb      	ldrb	r3, [r7, #7]
 80029ba:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80029bc:	4618      	mov	r0, r3
 80029be:	f7ff fb05 	bl	8001fcc <prepare_cbw>
 80029c2:	4603      	mov	r3, r0
 80029c4:	f083 0301 	eor.w	r3, r3, #1
 80029c8:	b2db      	uxtb	r3, r3
 80029ca:	2b00      	cmp	r3, #0
 80029cc:	d010      	beq.n	80029f0 <mscd_xfer_cb+0x448>
 80029ce:	4b32      	ldr	r3, [pc, #200]	; (8002a98 <mscd_xfer_cb+0x4f0>)
 80029d0:	64fb      	str	r3, [r7, #76]	; 0x4c
 80029d2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80029d4:	681b      	ldr	r3, [r3, #0]
 80029d6:	f003 0301 	and.w	r3, r3, #1
 80029da:	2b00      	cmp	r3, #0
 80029dc:	d000      	beq.n	80029e0 <mscd_xfer_cb+0x438>
 80029de:	be00      	bkpt	0x0000
 80029e0:	2300      	movs	r3, #0
 80029e2:	e053      	b.n	8002a8c <mscd_xfer_cb+0x4e4>
        // Any xfer ended here is consider unknown error, ignore it
        TU_LOG1("  Warning expect SCSI Status but received unknown data\r\n");
      }
    break;

    default : break;
 80029e4:	bf00      	nop
 80029e6:	e004      	b.n	80029f2 <mscd_xfer_cb+0x44a>
    break;
 80029e8:	bf00      	nop
 80029ea:	e002      	b.n	80029f2 <mscd_xfer_cb+0x44a>
    break;
 80029ec:	bf00      	nop
 80029ee:	e000      	b.n	80029f2 <mscd_xfer_cb+0x44a>
    break;
 80029f0:	bf00      	nop
  }

  if ( p_msc->stage == MSC_STAGE_STATUS )
 80029f2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80029f4:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80029f8:	2b02      	cmp	r3, #2
 80029fa:	d146      	bne.n	8002a8a <mscd_xfer_cb+0x4e2>
  {
    // skip status if epin is currently stalled, will do it when received Clear Stall request
    if ( !usbd_edpt_stalled(rhport,  p_msc->ep_in) )
 80029fc:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80029fe:	f893 202e 	ldrb.w	r2, [r3, #46]	; 0x2e
 8002a02:	79fb      	ldrb	r3, [r7, #7]
 8002a04:	4611      	mov	r1, r2
 8002a06:	4618      	mov	r0, r3
 8002a08:	f002 fe86 	bl	8005718 <usbd_edpt_stalled>
 8002a0c:	4603      	mov	r3, r0
 8002a0e:	f083 0301 	eor.w	r3, r3, #1
 8002a12:	b2db      	uxtb	r3, r3
 8002a14:	2b00      	cmp	r3, #0
 8002a16:	d038      	beq.n	8002a8a <mscd_xfer_cb+0x4e2>
    {
      if ( (p_cbw->total_bytes > p_msc->xferred_len) && is_data_in(p_cbw->dir) )
 8002a18:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002a1a:	689a      	ldr	r2, [r3, #8]
 8002a1c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002a1e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002a20:	429a      	cmp	r2, r3
 8002a22:	d91c      	bls.n	8002a5e <mscd_xfer_cb+0x4b6>
 8002a24:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002a26:	7b1b      	ldrb	r3, [r3, #12]
 8002a28:	75bb      	strb	r3, [r7, #22]
  return tu_bit_test(dir, 7);
 8002a2a:	7dbb      	ldrb	r3, [r7, #22]
 8002a2c:	613b      	str	r3, [r7, #16]
 8002a2e:	2307      	movs	r3, #7
 8002a30:	73fb      	strb	r3, [r7, #15]
 8002a32:	7bfb      	ldrb	r3, [r7, #15]
 8002a34:	693a      	ldr	r2, [r7, #16]
 8002a36:	fa22 f303 	lsr.w	r3, r2, r3
 8002a3a:	f003 0301 	and.w	r3, r3, #1
 8002a3e:	2b00      	cmp	r3, #0
 8002a40:	bf14      	ite	ne
 8002a42:	2301      	movne	r3, #1
 8002a44:	2300      	moveq	r3, #0
 8002a46:	b2db      	uxtb	r3, r3
      if ( (p_cbw->total_bytes > p_msc->xferred_len) && is_data_in(p_cbw->dir) )
 8002a48:	2b00      	cmp	r3, #0
 8002a4a:	d008      	beq.n	8002a5e <mscd_xfer_cb+0x4b6>
      {
        // 6.7 The 13 Cases: case 5 (Hi > Di): STALL before status
        // TU_LOG(MSC_DEBUG, "  SCSI case 5 (Hi > Di): %lu > %lu\r\n", p_cbw->total_bytes, p_msc->xferred_len);
        usbd_edpt_stall(rhport, p_msc->ep_in);
 8002a4c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002a4e:	f893 202e 	ldrb.w	r2, [r3, #46]	; 0x2e
 8002a52:	79fb      	ldrb	r3, [r7, #7]
 8002a54:	4611      	mov	r1, r2
 8002a56:	4618      	mov	r0, r3
 8002a58:	f002 fdc6 	bl	80055e8 <usbd_edpt_stall>
 8002a5c:	e015      	b.n	8002a8a <mscd_xfer_cb+0x4e2>
      }else
      {
        TU_ASSERT( send_csw(rhport, p_msc) );
 8002a5e:	79fb      	ldrb	r3, [r7, #7]
 8002a60:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8002a62:	4618      	mov	r0, r3
 8002a64:	f7ff fa92 	bl	8001f8c <send_csw>
 8002a68:	4603      	mov	r3, r0
 8002a6a:	f083 0301 	eor.w	r3, r3, #1
 8002a6e:	b2db      	uxtb	r3, r3
 8002a70:	2b00      	cmp	r3, #0
 8002a72:	d00a      	beq.n	8002a8a <mscd_xfer_cb+0x4e2>
 8002a74:	4b08      	ldr	r3, [pc, #32]	; (8002a98 <mscd_xfer_cb+0x4f0>)
 8002a76:	637b      	str	r3, [r7, #52]	; 0x34
 8002a78:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	f003 0301 	and.w	r3, r3, #1
 8002a80:	2b00      	cmp	r3, #0
 8002a82:	d000      	beq.n	8002a86 <mscd_xfer_cb+0x4de>
 8002a84:	be00      	bkpt	0x0000
 8002a86:	2300      	movs	r3, #0
 8002a88:	e000      	b.n	8002a8c <mscd_xfer_cb+0x4e4>
      send_csw(rhport, p_msc);
    }
    #endif
  }

  return true;
 8002a8a:	2301      	movs	r3, #1
}
 8002a8c:	4618      	mov	r0, r3
 8002a8e:	3760      	adds	r7, #96	; 0x60
 8002a90:	46bd      	mov	sp, r7
 8002a92:	bd80      	pop	{r7, pc}
 8002a94:	24000f90 	.word	0x24000f90
 8002a98:	e000edf0 	.word	0xe000edf0
	...

08002aa8 <proc_builtin_scsi>:
 *------------------------------------------------------------------*/

// return response's length (copied to buffer). Negative if it is not an built-in command or indicate Failed status (CSW)
// In case of a failed status, sense key must be set for reason of failure
static int32_t proc_builtin_scsi(uint8_t lun, uint8_t const scsi_cmd[16], uint8_t* buffer, uint32_t bufsize)
{
 8002aa8:	b590      	push	{r4, r7, lr}
 8002aaa:	b0b7      	sub	sp, #220	; 0xdc
 8002aac:	af00      	add	r7, sp, #0
 8002aae:	60b9      	str	r1, [r7, #8]
 8002ab0:	607a      	str	r2, [r7, #4]
 8002ab2:	603b      	str	r3, [r7, #0]
 8002ab4:	4603      	mov	r3, r0
 8002ab6:	73fb      	strb	r3, [r7, #15]
  (void) bufsize; // TODO refractor later
  int32_t resplen;

  mscd_interface_t* p_msc = &_mscd_itf;
 8002ab8:	4bb2      	ldr	r3, [pc, #712]	; (8002d84 <proc_builtin_scsi+0x2dc>)
 8002aba:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc

  switch ( scsi_cmd[0] )
 8002abe:	68bb      	ldr	r3, [r7, #8]
 8002ac0:	781b      	ldrb	r3, [r3, #0]
 8002ac2:	2b25      	cmp	r3, #37	; 0x25
 8002ac4:	f200 8286 	bhi.w	8002fd4 <proc_builtin_scsi+0x52c>
 8002ac8:	a201      	add	r2, pc, #4	; (adr r2, 8002ad0 <proc_builtin_scsi+0x28>)
 8002aca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002ace:	bf00      	nop
 8002ad0:	08002b69 	.word	0x08002b69
 8002ad4:	08002fd5 	.word	0x08002fd5
 8002ad8:	08002fd5 	.word	0x08002fd5
 8002adc:	08002f0d 	.word	0x08002f0d
 8002ae0:	08002fd5 	.word	0x08002fd5
 8002ae4:	08002fd5 	.word	0x08002fd5
 8002ae8:	08002fd5 	.word	0x08002fd5
 8002aec:	08002fd5 	.word	0x08002fd5
 8002af0:	08002fd5 	.word	0x08002fd5
 8002af4:	08002fd5 	.word	0x08002fd5
 8002af8:	08002fd5 	.word	0x08002fd5
 8002afc:	08002fd5 	.word	0x08002fd5
 8002b00:	08002fd5 	.word	0x08002fd5
 8002b04:	08002fd5 	.word	0x08002fd5
 8002b08:	08002fd5 	.word	0x08002fd5
 8002b0c:	08002fd5 	.word	0x08002fd5
 8002b10:	08002fd5 	.word	0x08002fd5
 8002b14:	08002fd5 	.word	0x08002fd5
 8002b18:	08002d8d 	.word	0x08002d8d
 8002b1c:	08002fd5 	.word	0x08002fd5
 8002b20:	08002fd5 	.word	0x08002fd5
 8002b24:	08002fd5 	.word	0x08002fd5
 8002b28:	08002fd5 	.word	0x08002fd5
 8002b2c:	08002fd5 	.word	0x08002fd5
 8002b30:	08002fd5 	.word	0x08002fd5
 8002b34:	08002fd5 	.word	0x08002fd5
 8002b38:	08002e55 	.word	0x08002e55
 8002b3c:	08002ba5 	.word	0x08002ba5
 8002b40:	08002fd5 	.word	0x08002fd5
 8002b44:	08002fd5 	.word	0x08002fd5
 8002b48:	08002fd5 	.word	0x08002fd5
 8002b4c:	08002fd5 	.word	0x08002fd5
 8002b50:	08002fd5 	.word	0x08002fd5
 8002b54:	08002fd5 	.word	0x08002fd5
 8002b58:	08002fd5 	.word	0x08002fd5
 8002b5c:	08002ccd 	.word	0x08002ccd
 8002b60:	08002fd5 	.word	0x08002fd5
 8002b64:	08002c27 	.word	0x08002c27
  {
    case SCSI_CMD_TEST_UNIT_READY:
      resplen = 0;
 8002b68:	2300      	movs	r3, #0
 8002b6a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ( !tud_msc_test_unit_ready_cb(lun) )
 8002b6e:	7bfb      	ldrb	r3, [r7, #15]
 8002b70:	4618      	mov	r0, r3
 8002b72:	f7fe f971 	bl	8000e58 <tud_msc_test_unit_ready_cb>
 8002b76:	4603      	mov	r3, r0
 8002b78:	f083 0301 	eor.w	r3, r3, #1
 8002b7c:	b2db      	uxtb	r3, r3
 8002b7e:	2b00      	cmp	r3, #0
 8002b80:	f000 822d 	beq.w	8002fde <proc_builtin_scsi+0x536>
      {
        // Failed status response
        resplen = - 1;
 8002b84:	f04f 33ff 	mov.w	r3, #4294967295
 8002b88:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

        // set default sense if not set by callback
        if ( p_msc->sense_key == 0 ) set_sense_medium_not_present(lun);
 8002b8c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8002b90:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002b94:	2b00      	cmp	r3, #0
 8002b96:	f040 8222 	bne.w	8002fde <proc_builtin_scsi+0x536>
 8002b9a:	7bfb      	ldrb	r3, [r7, #15]
 8002b9c:	4618      	mov	r0, r3
 8002b9e:	f7ff fb47 	bl	8002230 <set_sense_medium_not_present>
      }
    break;
 8002ba2:	e21c      	b.n	8002fde <proc_builtin_scsi+0x536>

    case SCSI_CMD_START_STOP_UNIT:
      resplen = 0;
 8002ba4:	2300      	movs	r3, #0
 8002ba6:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

      if (tud_msc_start_stop_cb)
 8002baa:	4b77      	ldr	r3, [pc, #476]	; (8002d88 <proc_builtin_scsi+0x2e0>)
 8002bac:	2b00      	cmp	r3, #0
 8002bae:	f000 8218 	beq.w	8002fe2 <proc_builtin_scsi+0x53a>
      {
        scsi_start_stop_unit_t const * start_stop = (scsi_start_stop_unit_t const *) scsi_cmd;
 8002bb2:	68bb      	ldr	r3, [r7, #8]
 8002bb4:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
        if ( !tud_msc_start_stop_cb(lun, start_stop->power_condition, start_stop->start, start_stop->load_eject) )
 8002bb8:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002bbc:	791b      	ldrb	r3, [r3, #4]
 8002bbe:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8002bc2:	b2db      	uxtb	r3, r3
 8002bc4:	4619      	mov	r1, r3
 8002bc6:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002bca:	791b      	ldrb	r3, [r3, #4]
 8002bcc:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8002bd0:	b2db      	uxtb	r3, r3
 8002bd2:	2b00      	cmp	r3, #0
 8002bd4:	bf14      	ite	ne
 8002bd6:	2301      	movne	r3, #1
 8002bd8:	2300      	moveq	r3, #0
 8002bda:	b2da      	uxtb	r2, r3
 8002bdc:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002be0:	791b      	ldrb	r3, [r3, #4]
 8002be2:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8002be6:	b2db      	uxtb	r3, r3
 8002be8:	2b00      	cmp	r3, #0
 8002bea:	bf14      	ite	ne
 8002bec:	2301      	movne	r3, #1
 8002bee:	2300      	moveq	r3, #0
 8002bf0:	b2db      	uxtb	r3, r3
 8002bf2:	7bf8      	ldrb	r0, [r7, #15]
 8002bf4:	f7fe f96c 	bl	8000ed0 <tud_msc_start_stop_cb>
 8002bf8:	4603      	mov	r3, r0
 8002bfa:	f083 0301 	eor.w	r3, r3, #1
 8002bfe:	b2db      	uxtb	r3, r3
 8002c00:	2b00      	cmp	r3, #0
 8002c02:	f000 81ee 	beq.w	8002fe2 <proc_builtin_scsi+0x53a>
        {
          // Failed status response
          resplen = - 1;
 8002c06:	f04f 33ff 	mov.w	r3, #4294967295
 8002c0a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

          // set default sense if not set by callback
          if ( p_msc->sense_key == 0 ) set_sense_medium_not_present(lun);
 8002c0e:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8002c12:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002c16:	2b00      	cmp	r3, #0
 8002c18:	f040 81e3 	bne.w	8002fe2 <proc_builtin_scsi+0x53a>
 8002c1c:	7bfb      	ldrb	r3, [r7, #15]
 8002c1e:	4618      	mov	r0, r3
 8002c20:	f7ff fb06 	bl	8002230 <set_sense_medium_not_present>
        }
      }
    break;
 8002c24:	e1dd      	b.n	8002fe2 <proc_builtin_scsi+0x53a>
    {
      uint32_t block_count;
      uint32_t block_size;
      uint16_t block_size_u16;

      tud_msc_capacity_cb(lun, &block_count, &block_size_u16);
 8002c26:	f107 026e 	add.w	r2, r7, #110	; 0x6e
 8002c2a:	f107 0170 	add.w	r1, r7, #112	; 0x70
 8002c2e:	7bfb      	ldrb	r3, [r7, #15]
 8002c30:	4618      	mov	r0, r3
 8002c32:	f7fe f929 	bl	8000e88 <tud_msc_capacity_cb>
      block_size = (uint32_t) block_size_u16;
 8002c36:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 8002c3a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8

      // Invalid block size/count from callback, possibly unit is not ready
      // stall this request, set sense key to NOT READY
      if (block_count == 0 || block_size == 0)
 8002c3e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002c40:	2b00      	cmp	r3, #0
 8002c42:	d003      	beq.n	8002c4c <proc_builtin_scsi+0x1a4>
 8002c44:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8002c48:	2b00      	cmp	r3, #0
 8002c4a:	d10e      	bne.n	8002c6a <proc_builtin_scsi+0x1c2>
      {
        resplen = -1;
 8002c4c:	f04f 33ff 	mov.w	r3, #4294967295
 8002c50:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

        // set default sense if not set by callback
        if ( p_msc->sense_key == 0 ) set_sense_medium_not_present(lun);
 8002c54:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8002c58:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002c5c:	2b00      	cmp	r3, #0
 8002c5e:	d134      	bne.n	8002cca <proc_builtin_scsi+0x222>
 8002c60:	7bfb      	ldrb	r3, [r7, #15]
 8002c62:	4618      	mov	r0, r3
 8002c64:	f7ff fae4 	bl	8002230 <set_sense_medium_not_present>
 8002c68:	e02f      	b.n	8002cca <proc_builtin_scsi+0x222>
      }else
      {
        scsi_read_capacity10_resp_t read_capa10;

        read_capa10.last_lba   = tu_htonl(block_count-1);
 8002c6a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002c6c:	3b01      	subs	r3, #1
 8002c6e:	ba1b      	rev	r3, r3
 8002c70:	667b      	str	r3, [r7, #100]	; 0x64
        read_capa10.block_size = tu_htonl(block_size);
 8002c72:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8002c76:	ba1b      	rev	r3, r3
 8002c78:	66bb      	str	r3, [r7, #104]	; 0x68

        resplen = sizeof(read_capa10);
 8002c7a:	2308      	movs	r3, #8
 8002c7c:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
        TU_VERIFY(0 == tu_memcpy_s(buffer, bufsize, &read_capa10, (size_t) resplen));
 8002c80:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8002c84:	687a      	ldr	r2, [r7, #4]
 8002c86:	f8c7 20c0 	str.w	r2, [r7, #192]	; 0xc0
 8002c8a:	683a      	ldr	r2, [r7, #0]
 8002c8c:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8002c90:	f107 0264 	add.w	r2, r7, #100	; 0x64
 8002c94:	f8c7 20b8 	str.w	r2, [r7, #184]	; 0xb8
 8002c98:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  if ( count > destsz ) {
 8002c9c:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8002ca0:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8002ca4:	429a      	cmp	r2, r3
 8002ca6:	d202      	bcs.n	8002cae <proc_builtin_scsi+0x206>
    return -1;
 8002ca8:	f04f 33ff 	mov.w	r3, #4294967295
 8002cac:	e008      	b.n	8002cc0 <proc_builtin_scsi+0x218>
  memcpy(dest, src, count);
 8002cae:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8002cb2:	f8d7 10b8 	ldr.w	r1, [r7, #184]	; 0xb8
 8002cb6:	f8d7 00c0 	ldr.w	r0, [r7, #192]	; 0xc0
 8002cba:	f00d f9b7 	bl	801002c <memcpy>
  return 0;
 8002cbe:	2300      	movs	r3, #0
 8002cc0:	2b00      	cmp	r3, #0
 8002cc2:	f000 8190 	beq.w	8002fe6 <proc_builtin_scsi+0x53e>
 8002cc6:	2300      	movs	r3, #0
 8002cc8:	e196      	b.n	8002ff8 <proc_builtin_scsi+0x550>
      }
    }
    break;
 8002cca:	e18c      	b.n	8002fe6 <proc_builtin_scsi+0x53e>

    case SCSI_CMD_READ_FORMAT_CAPACITY:
    {
      scsi_read_format_capacity_data_t read_fmt_capa =
 8002ccc:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8002cd0:	2200      	movs	r2, #0
 8002cd2:	601a      	str	r2, [r3, #0]
 8002cd4:	605a      	str	r2, [r3, #4]
 8002cd6:	609a      	str	r2, [r3, #8]
 8002cd8:	2308      	movs	r3, #8
 8002cda:	f887 305b 	strb.w	r3, [r7, #91]	; 0x5b
 8002cde:	2302      	movs	r3, #2
 8002ce0:	f887 3060 	strb.w	r3, [r7, #96]	; 0x60
      };

      uint32_t block_count;
      uint16_t block_size;

      tud_msc_capacity_cb(lun, &block_count, &block_size);
 8002ce4:	f107 0252 	add.w	r2, r7, #82	; 0x52
 8002ce8:	f107 0154 	add.w	r1, r7, #84	; 0x54
 8002cec:	7bfb      	ldrb	r3, [r7, #15]
 8002cee:	4618      	mov	r0, r3
 8002cf0:	f7fe f8ca 	bl	8000e88 <tud_msc_capacity_cb>

      // Invalid block size/count from callback, possibly unit is not ready
      // stall this request, set sense key to NOT READY
      if (block_count == 0 || block_size == 0)
 8002cf4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002cf6:	2b00      	cmp	r3, #0
 8002cf8:	d003      	beq.n	8002d02 <proc_builtin_scsi+0x25a>
 8002cfa:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 8002cfe:	2b00      	cmp	r3, #0
 8002d00:	d10e      	bne.n	8002d20 <proc_builtin_scsi+0x278>
      {
        resplen = -1;
 8002d02:	f04f 33ff 	mov.w	r3, #4294967295
 8002d06:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

        // set default sense if not set by callback
        if ( p_msc->sense_key == 0 ) set_sense_medium_not_present(lun);
 8002d0a:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8002d0e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002d12:	2b00      	cmp	r3, #0
 8002d14:	d135      	bne.n	8002d82 <proc_builtin_scsi+0x2da>
 8002d16:	7bfb      	ldrb	r3, [r7, #15]
 8002d18:	4618      	mov	r0, r3
 8002d1a:	f7ff fa89 	bl	8002230 <set_sense_medium_not_present>
 8002d1e:	e030      	b.n	8002d82 <proc_builtin_scsi+0x2da>
      }else
      {
        read_fmt_capa.block_num = tu_htonl(block_count);
 8002d20:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002d22:	ba1b      	rev	r3, r3
 8002d24:	65fb      	str	r3, [r7, #92]	; 0x5c
        read_fmt_capa.block_size_u16 = tu_htons(block_size);
 8002d26:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 8002d2a:	ba5b      	rev16	r3, r3
 8002d2c:	b29b      	uxth	r3, r3
 8002d2e:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62

        resplen = sizeof(read_fmt_capa);
 8002d32:	230c      	movs	r3, #12
 8002d34:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
        TU_VERIFY(0 == tu_memcpy_s(buffer, bufsize, &read_fmt_capa, (size_t) resplen));
 8002d38:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8002d3c:	687a      	ldr	r2, [r7, #4]
 8002d3e:	f8c7 20b0 	str.w	r2, [r7, #176]	; 0xb0
 8002d42:	683a      	ldr	r2, [r7, #0]
 8002d44:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8002d48:	f107 0258 	add.w	r2, r7, #88	; 0x58
 8002d4c:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8002d50:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  if ( count > destsz ) {
 8002d54:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8002d58:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8002d5c:	429a      	cmp	r2, r3
 8002d5e:	d202      	bcs.n	8002d66 <proc_builtin_scsi+0x2be>
    return -1;
 8002d60:	f04f 33ff 	mov.w	r3, #4294967295
 8002d64:	e008      	b.n	8002d78 <proc_builtin_scsi+0x2d0>
  memcpy(dest, src, count);
 8002d66:	f8d7 20a4 	ldr.w	r2, [r7, #164]	; 0xa4
 8002d6a:	f8d7 10a8 	ldr.w	r1, [r7, #168]	; 0xa8
 8002d6e:	f8d7 00b0 	ldr.w	r0, [r7, #176]	; 0xb0
 8002d72:	f00d f95b 	bl	801002c <memcpy>
  return 0;
 8002d76:	2300      	movs	r3, #0
 8002d78:	2b00      	cmp	r3, #0
 8002d7a:	f000 8136 	beq.w	8002fea <proc_builtin_scsi+0x542>
 8002d7e:	2300      	movs	r3, #0
 8002d80:	e13a      	b.n	8002ff8 <proc_builtin_scsi+0x550>
      }
    }
    break;
 8002d82:	e132      	b.n	8002fea <proc_builtin_scsi+0x542>
 8002d84:	24000f50 	.word	0x24000f50
 8002d88:	08000ed1 	.word	0x08000ed1

    case SCSI_CMD_INQUIRY:
    {
      scsi_inquiry_resp_t inquiry_rsp =
 8002d8c:	f107 0314 	add.w	r3, r7, #20
 8002d90:	2224      	movs	r2, #36	; 0x24
 8002d92:	2100      	movs	r1, #0
 8002d94:	4618      	mov	r0, r3
 8002d96:	f00d f91c 	bl	800ffd2 <memset>
 8002d9a:	7d7b      	ldrb	r3, [r7, #21]
 8002d9c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002da0:	757b      	strb	r3, [r7, #21]
 8002da2:	2302      	movs	r3, #2
 8002da4:	75bb      	strb	r3, [r7, #22]
 8002da6:	7dfb      	ldrb	r3, [r7, #23]
 8002da8:	2202      	movs	r2, #2
 8002daa:	f362 0303 	bfi	r3, r2, #0, #4
 8002dae:	75fb      	strb	r3, [r7, #23]
 8002db0:	231f      	movs	r3, #31
 8002db2:	763b      	strb	r3, [r7, #24]
          .response_data_format = 2,
          .additional_length    = sizeof(scsi_inquiry_resp_t) - 5,
      };

      // vendor_id, product_id, product_rev is space padded string
      memset(inquiry_rsp.vendor_id  , ' ', sizeof(inquiry_rsp.vendor_id));
 8002db4:	f107 0314 	add.w	r3, r7, #20
 8002db8:	3308      	adds	r3, #8
 8002dba:	2208      	movs	r2, #8
 8002dbc:	2120      	movs	r1, #32
 8002dbe:	4618      	mov	r0, r3
 8002dc0:	f00d f907 	bl	800ffd2 <memset>
      memset(inquiry_rsp.product_id , ' ', sizeof(inquiry_rsp.product_id));
 8002dc4:	f107 0314 	add.w	r3, r7, #20
 8002dc8:	3310      	adds	r3, #16
 8002dca:	2210      	movs	r2, #16
 8002dcc:	2120      	movs	r1, #32
 8002dce:	4618      	mov	r0, r3
 8002dd0:	f00d f8ff 	bl	800ffd2 <memset>
      memset(inquiry_rsp.product_rev, ' ', sizeof(inquiry_rsp.product_rev));
 8002dd4:	f107 0314 	add.w	r3, r7, #20
 8002dd8:	3320      	adds	r3, #32
 8002dda:	2204      	movs	r2, #4
 8002ddc:	2120      	movs	r1, #32
 8002dde:	4618      	mov	r0, r3
 8002de0:	f00d f8f7 	bl	800ffd2 <memset>

      tud_msc_inquiry_cb(lun, inquiry_rsp.vendor_id, inquiry_rsp.product_id, inquiry_rsp.product_rev);
 8002de4:	f107 0314 	add.w	r3, r7, #20
 8002de8:	f103 0420 	add.w	r4, r3, #32
 8002dec:	f107 0314 	add.w	r3, r7, #20
 8002df0:	f103 0210 	add.w	r2, r3, #16
 8002df4:	f107 0314 	add.w	r3, r7, #20
 8002df8:	f103 0108 	add.w	r1, r3, #8
 8002dfc:	7bf8      	ldrb	r0, [r7, #15]
 8002dfe:	4623      	mov	r3, r4
 8002e00:	f7fd fff2 	bl	8000de8 <tud_msc_inquiry_cb>

      resplen = sizeof(inquiry_rsp);
 8002e04:	2324      	movs	r3, #36	; 0x24
 8002e06:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      TU_VERIFY(0 == tu_memcpy_s(buffer, bufsize, &inquiry_rsp, (size_t) resplen));
 8002e0a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8002e0e:	687a      	ldr	r2, [r7, #4]
 8002e10:	f8c7 20a0 	str.w	r2, [r7, #160]	; 0xa0
 8002e14:	683a      	ldr	r2, [r7, #0]
 8002e16:	f8c7 209c 	str.w	r2, [r7, #156]	; 0x9c
 8002e1a:	f107 0214 	add.w	r2, r7, #20
 8002e1e:	f8c7 2098 	str.w	r2, [r7, #152]	; 0x98
 8002e22:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  if ( count > destsz ) {
 8002e26:	f8d7 209c 	ldr.w	r2, [r7, #156]	; 0x9c
 8002e2a:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8002e2e:	429a      	cmp	r2, r3
 8002e30:	d202      	bcs.n	8002e38 <proc_builtin_scsi+0x390>
    return -1;
 8002e32:	f04f 33ff 	mov.w	r3, #4294967295
 8002e36:	e008      	b.n	8002e4a <proc_builtin_scsi+0x3a2>
  memcpy(dest, src, count);
 8002e38:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8002e3c:	f8d7 1098 	ldr.w	r1, [r7, #152]	; 0x98
 8002e40:	f8d7 00a0 	ldr.w	r0, [r7, #160]	; 0xa0
 8002e44:	f00d f8f2 	bl	801002c <memcpy>
  return 0;
 8002e48:	2300      	movs	r3, #0
 8002e4a:	2b00      	cmp	r3, #0
 8002e4c:	f000 80cf 	beq.w	8002fee <proc_builtin_scsi+0x546>
 8002e50:	2300      	movs	r3, #0
 8002e52:	e0d1      	b.n	8002ff8 <proc_builtin_scsi+0x550>
    }
    break;

    case SCSI_CMD_MODE_SENSE_6:
    {
      scsi_mode_sense6_resp_t mode_resp =
 8002e54:	2303      	movs	r3, #3
 8002e56:	f887 304c 	strb.w	r3, [r7, #76]	; 0x4c
 8002e5a:	2300      	movs	r3, #0
 8002e5c:	f887 304d 	strb.w	r3, [r7, #77]	; 0x4d
 8002e60:	f897 304e 	ldrb.w	r3, [r7, #78]	; 0x4e
 8002e64:	f36f 0306 	bfc	r3, #0, #7
 8002e68:	f887 304e 	strb.w	r3, [r7, #78]	; 0x4e
 8002e6c:	f897 304e 	ldrb.w	r3, [r7, #78]	; 0x4e
 8002e70:	f36f 13c7 	bfc	r3, #7, #1
 8002e74:	f887 304e 	strb.w	r3, [r7, #78]	; 0x4e
 8002e78:	2300      	movs	r3, #0
 8002e7a:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
          .write_protected      = false,
          .reserved             = 0,
          .block_descriptor_len = 0  // no block descriptor are included
      };

      bool writable = true;
 8002e7e:	2301      	movs	r3, #1
 8002e80:	f887 30d3 	strb.w	r3, [r7, #211]	; 0xd3
      if ( tud_msc_is_writable_cb )
 8002e84:	4b5e      	ldr	r3, [pc, #376]	; (8003000 <proc_builtin_scsi+0x558>)
 8002e86:	2b00      	cmp	r3, #0
 8002e88:	d006      	beq.n	8002e98 <proc_builtin_scsi+0x3f0>
      {
        writable = tud_msc_is_writable_cb(lun);
 8002e8a:	7bfb      	ldrb	r3, [r7, #15]
 8002e8c:	4618      	mov	r0, r3
 8002e8e:	f7fe f86b 	bl	8000f68 <tud_msc_is_writable_cb>
 8002e92:	4603      	mov	r3, r0
 8002e94:	f887 30d3 	strb.w	r3, [r7, #211]	; 0xd3
      }

      mode_resp.write_protected = !writable;
 8002e98:	f897 30d3 	ldrb.w	r3, [r7, #211]	; 0xd3
 8002e9c:	2b00      	cmp	r3, #0
 8002e9e:	bf14      	ite	ne
 8002ea0:	2301      	movne	r3, #1
 8002ea2:	2300      	moveq	r3, #0
 8002ea4:	b2db      	uxtb	r3, r3
 8002ea6:	f083 0301 	eor.w	r3, r3, #1
 8002eaa:	b2db      	uxtb	r3, r3
 8002eac:	f003 0301 	and.w	r3, r3, #1
 8002eb0:	b2da      	uxtb	r2, r3
 8002eb2:	f897 304e 	ldrb.w	r3, [r7, #78]	; 0x4e
 8002eb6:	f362 13c7 	bfi	r3, r2, #7, #1
 8002eba:	f887 304e 	strb.w	r3, [r7, #78]	; 0x4e

      resplen = sizeof(mode_resp);
 8002ebe:	2304      	movs	r3, #4
 8002ec0:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      TU_VERIFY(0 == tu_memcpy_s(buffer, bufsize, &mode_resp, (size_t) resplen));
 8002ec4:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8002ec8:	687a      	ldr	r2, [r7, #4]
 8002eca:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
 8002ece:	683a      	ldr	r2, [r7, #0]
 8002ed0:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8002ed4:	f107 024c 	add.w	r2, r7, #76	; 0x4c
 8002ed8:	f8c7 2088 	str.w	r2, [r7, #136]	; 0x88
 8002edc:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if ( count > destsz ) {
 8002ee0:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 8002ee4:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002ee8:	429a      	cmp	r2, r3
 8002eea:	d202      	bcs.n	8002ef2 <proc_builtin_scsi+0x44a>
    return -1;
 8002eec:	f04f 33ff 	mov.w	r3, #4294967295
 8002ef0:	e008      	b.n	8002f04 <proc_builtin_scsi+0x45c>
  memcpy(dest, src, count);
 8002ef2:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 8002ef6:	f8d7 1088 	ldr.w	r1, [r7, #136]	; 0x88
 8002efa:	f8d7 0090 	ldr.w	r0, [r7, #144]	; 0x90
 8002efe:	f00d f895 	bl	801002c <memcpy>
  return 0;
 8002f02:	2300      	movs	r3, #0
 8002f04:	2b00      	cmp	r3, #0
 8002f06:	d074      	beq.n	8002ff2 <proc_builtin_scsi+0x54a>
 8002f08:	2300      	movs	r3, #0
 8002f0a:	e075      	b.n	8002ff8 <proc_builtin_scsi+0x550>
    }
    break;

    case SCSI_CMD_REQUEST_SENSE:
    {
      scsi_sense_fixed_resp_t sense_rsp =
 8002f0c:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8002f10:	2200      	movs	r2, #0
 8002f12:	601a      	str	r2, [r3, #0]
 8002f14:	605a      	str	r2, [r3, #4]
 8002f16:	609a      	str	r2, [r3, #8]
 8002f18:	60da      	str	r2, [r3, #12]
 8002f1a:	821a      	strh	r2, [r3, #16]
 8002f1c:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
 8002f20:	2270      	movs	r2, #112	; 0x70
 8002f22:	f362 0306 	bfi	r3, r2, #0, #7
 8002f26:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
 8002f2a:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
 8002f2e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002f32:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
      {
          .response_code = 0x70, // current, fixed format
          .valid         = 1
      };

      sense_rsp.add_sense_len       = sizeof(scsi_sense_fixed_resp_t) - 8;
 8002f36:	230a      	movs	r3, #10
 8002f38:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
      sense_rsp.sense_key           = (uint8_t) (p_msc->sense_key & 0x0F);
 8002f3c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8002f40:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002f44:	f003 030f 	and.w	r3, r3, #15
 8002f48:	b2da      	uxtb	r2, r3
 8002f4a:	f897 303a 	ldrb.w	r3, [r7, #58]	; 0x3a
 8002f4e:	f362 0303 	bfi	r3, r2, #0, #4
 8002f52:	f887 303a 	strb.w	r3, [r7, #58]	; 0x3a
      sense_rsp.add_sense_code      = p_msc->add_sense_code;
 8002f56:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8002f5a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002f5e:	f887 3044 	strb.w	r3, [r7, #68]	; 0x44
      sense_rsp.add_sense_qualifier = p_msc->add_sense_qualifier;
 8002f62:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8002f66:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002f6a:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45

      resplen = sizeof(sense_rsp);
 8002f6e:	2312      	movs	r3, #18
 8002f70:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      TU_VERIFY(0 == tu_memcpy_s(buffer, bufsize, &sense_rsp, (size_t) resplen));
 8002f74:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8002f78:	687a      	ldr	r2, [r7, #4]
 8002f7a:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8002f7e:	683a      	ldr	r2, [r7, #0]
 8002f80:	67fa      	str	r2, [r7, #124]	; 0x7c
 8002f82:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8002f86:	67ba      	str	r2, [r7, #120]	; 0x78
 8002f88:	677b      	str	r3, [r7, #116]	; 0x74
  if ( count > destsz ) {
 8002f8a:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8002f8c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002f8e:	429a      	cmp	r2, r3
 8002f90:	d202      	bcs.n	8002f98 <proc_builtin_scsi+0x4f0>
    return -1;
 8002f92:	f04f 33ff 	mov.w	r3, #4294967295
 8002f96:	e006      	b.n	8002fa6 <proc_builtin_scsi+0x4fe>
  memcpy(dest, src, count);
 8002f98:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8002f9a:	6fb9      	ldr	r1, [r7, #120]	; 0x78
 8002f9c:	f8d7 0080 	ldr.w	r0, [r7, #128]	; 0x80
 8002fa0:	f00d f844 	bl	801002c <memcpy>
  return 0;
 8002fa4:	2300      	movs	r3, #0
 8002fa6:	2b00      	cmp	r3, #0
 8002fa8:	d001      	beq.n	8002fae <proc_builtin_scsi+0x506>
 8002faa:	2300      	movs	r3, #0
 8002fac:	e024      	b.n	8002ff8 <proc_builtin_scsi+0x550>

      // request sense callback could overwrite the sense data
      if (tud_msc_request_sense_cb)
 8002fae:	4b15      	ldr	r3, [pc, #84]	; (8003004 <proc_builtin_scsi+0x55c>)
 8002fb0:	2b00      	cmp	r3, #0
 8002fb2:	d008      	beq.n	8002fc6 <proc_builtin_scsi+0x51e>
      {
        resplen = tud_msc_request_sense_cb(lun, buffer, (uint16_t) bufsize);
 8002fb4:	683b      	ldr	r3, [r7, #0]
 8002fb6:	b29a      	uxth	r2, r3
 8002fb8:	7bfb      	ldrb	r3, [r7, #15]
 8002fba:	6879      	ldr	r1, [r7, #4]
 8002fbc:	4618      	mov	r0, r3
 8002fbe:	f3af 8000 	nop.w
 8002fc2:	f8c7 00d4 	str.w	r0, [r7, #212]	; 0xd4
      }

      // Clear sense data after copy
      tud_msc_set_sense(lun, 0, 0, 0);
 8002fc6:	7bf8      	ldrb	r0, [r7, #15]
 8002fc8:	2300      	movs	r3, #0
 8002fca:	2200      	movs	r2, #0
 8002fcc:	2100      	movs	r1, #0
 8002fce:	f7ff f90b 	bl	80021e8 <tud_msc_set_sense>
    }
    break;
 8002fd2:	e00f      	b.n	8002ff4 <proc_builtin_scsi+0x54c>

    default: resplen = -1; break;
 8002fd4:	f04f 33ff 	mov.w	r3, #4294967295
 8002fd8:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8002fdc:	e00a      	b.n	8002ff4 <proc_builtin_scsi+0x54c>
    break;
 8002fde:	bf00      	nop
 8002fe0:	e008      	b.n	8002ff4 <proc_builtin_scsi+0x54c>
    break;
 8002fe2:	bf00      	nop
 8002fe4:	e006      	b.n	8002ff4 <proc_builtin_scsi+0x54c>
    break;
 8002fe6:	bf00      	nop
 8002fe8:	e004      	b.n	8002ff4 <proc_builtin_scsi+0x54c>
    break;
 8002fea:	bf00      	nop
 8002fec:	e002      	b.n	8002ff4 <proc_builtin_scsi+0x54c>
    break;
 8002fee:	bf00      	nop
 8002ff0:	e000      	b.n	8002ff4 <proc_builtin_scsi+0x54c>
    break;
 8002ff2:	bf00      	nop
  }

  return resplen;
 8002ff4:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
}
 8002ff8:	4618      	mov	r0, r3
 8002ffa:	37dc      	adds	r7, #220	; 0xdc
 8002ffc:	46bd      	mov	sp, r7
 8002ffe:	bd90      	pop	{r4, r7, pc}
 8003000:	08000f69 	.word	0x08000f69
 8003004:	00000000 	.word	0x00000000

08003008 <proc_read10_cmd>:

static void proc_read10_cmd(uint8_t rhport, mscd_interface_t* p_msc)
{
 8003008:	b580      	push	{r7, lr}
 800300a:	b092      	sub	sp, #72	; 0x48
 800300c:	af02      	add	r7, sp, #8
 800300e:	4603      	mov	r3, r0
 8003010:	6039      	str	r1, [r7, #0]
 8003012:	71fb      	strb	r3, [r7, #7]
  msc_cbw_t const * p_cbw = &p_msc->cbw;
 8003014:	683b      	ldr	r3, [r7, #0]
 8003016:	63fb      	str	r3, [r7, #60]	; 0x3c

  // block size already verified not zero
  uint16_t const block_sz = rdwr10_get_blocksize(p_cbw);
 8003018:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800301a:	f7ff f86c 	bl	80020f6 <rdwr10_get_blocksize>
 800301e:	4603      	mov	r3, r0
 8003020:	877b      	strh	r3, [r7, #58]	; 0x3a

  // Adjust lba with transferred bytes
  uint32_t const lba = rdwr10_get_lba(p_cbw->command) + (p_msc->xferred_len / block_sz);
 8003022:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003024:	330f      	adds	r3, #15
 8003026:	4618      	mov	r0, r3
 8003028:	f7ff f83f 	bl	80020aa <rdwr10_get_lba>
 800302c:	4601      	mov	r1, r0
 800302e:	683b      	ldr	r3, [r7, #0]
 8003030:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003032:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8003034:	fbb2 f3f3 	udiv	r3, r2, r3
 8003038:	440b      	add	r3, r1
 800303a:	637b      	str	r3, [r7, #52]	; 0x34

  // remaining bytes capped at class buffer
  int32_t nbytes = (int32_t) tu_min32(sizeof(_mscd_buf), p_cbw->total_bytes-p_msc->xferred_len);
 800303c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800303e:	689a      	ldr	r2, [r3, #8]
 8003040:	683b      	ldr	r3, [r7, #0]
 8003042:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003044:	1ad3      	subs	r3, r2, r3
 8003046:	f44f 7200 	mov.w	r2, #512	; 0x200
 800304a:	627a      	str	r2, [r7, #36]	; 0x24
 800304c:	623b      	str	r3, [r7, #32]
TU_ATTR_ALWAYS_INLINE static inline uint32_t tu_min32 (uint32_t x, uint32_t y) { return (x < y) ? x : y; }
 800304e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003050:	6a3b      	ldr	r3, [r7, #32]
 8003052:	4293      	cmp	r3, r2
 8003054:	bf28      	it	cs
 8003056:	4613      	movcs	r3, r2
 8003058:	633b      	str	r3, [r7, #48]	; 0x30

  // Application can consume smaller bytes
  uint32_t const offset = p_msc->xferred_len % block_sz;
 800305a:	683b      	ldr	r3, [r7, #0]
 800305c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800305e:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 8003060:	fbb3 f1f2 	udiv	r1, r3, r2
 8003064:	fb01 f202 	mul.w	r2, r1, r2
 8003068:	1a9b      	subs	r3, r3, r2
 800306a:	62fb      	str	r3, [r7, #44]	; 0x2c
  nbytes = tud_msc_read10_cb(p_cbw->lun, lba, offset, _mscd_buf, (uint32_t) nbytes);
 800306c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800306e:	7b58      	ldrb	r0, [r3, #13]
 8003070:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003072:	9300      	str	r3, [sp, #0]
 8003074:	4b2c      	ldr	r3, [pc, #176]	; (8003128 <proc_read10_cmd+0x120>)
 8003076:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003078:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800307a:	f7fd ff49 	bl	8000f10 <tud_msc_read10_cb>
 800307e:	6338      	str	r0, [r7, #48]	; 0x30

  if ( nbytes < 0 )
 8003080:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003082:	2b00      	cmp	r3, #0
 8003084:	da0b      	bge.n	800309e <proc_read10_cmd+0x96>
  {
    // negative means error -> endpoint is stalled & status in CSW set to failed
    TU_LOG_DRV("  tud_msc_read10_cb() return -1\r\n");

    // set sense
    set_sense_medium_not_present(p_cbw->lun);
 8003086:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003088:	7b5b      	ldrb	r3, [r3, #13]
 800308a:	4618      	mov	r0, r3
 800308c:	f7ff f8d0 	bl	8002230 <set_sense_medium_not_present>

    fail_scsi_op(rhport, p_msc, MSC_CSW_STATUS_FAILED);
 8003090:	79fb      	ldrb	r3, [r7, #7]
 8003092:	2201      	movs	r2, #1
 8003094:	6839      	ldr	r1, [r7, #0]
 8003096:	4618      	mov	r0, r3
 8003098:	f7fe ffaf 	bl	8001ffa <fail_scsi_op>
 800309c:	e040      	b.n	8003120 <proc_read10_cmd+0x118>
  }
  else if ( nbytes == 0 )
 800309e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80030a0:	2b00      	cmp	r3, #0
 80030a2:	d124      	bne.n	80030ee <proc_read10_cmd+0xe6>
  {
    // zero means not ready -> simulate an transfer complete so that this driver callback will fired again
    dcd_event_xfer_complete(rhport, p_msc->ep_in, 0, XFER_RESULT_SUCCESS, false);
 80030a4:	683b      	ldr	r3, [r7, #0]
 80030a6:	f893 202e 	ldrb.w	r2, [r3, #46]	; 0x2e
 80030aa:	79fb      	ldrb	r3, [r7, #7]
 80030ac:	77fb      	strb	r3, [r7, #31]
 80030ae:	4613      	mov	r3, r2
 80030b0:	77bb      	strb	r3, [r7, #30]
 80030b2:	2300      	movs	r3, #0
 80030b4:	61bb      	str	r3, [r7, #24]
 80030b6:	2300      	movs	r3, #0
 80030b8:	75fb      	strb	r3, [r7, #23]
 80030ba:	2300      	movs	r3, #0
 80030bc:	75bb      	strb	r3, [r7, #22]
  dcd_event_handler(&event, in_isr);
}

// helper to send transfer complete event
TU_ATTR_ALWAYS_INLINE static inline void dcd_event_xfer_complete (uint8_t rhport, uint8_t ep_addr, uint32_t xferred_bytes, uint8_t result, bool in_isr) {
  dcd_event_t event = { .rhport = rhport, .event_id = DCD_EVENT_XFER_COMPLETE };
 80030be:	f107 0308 	add.w	r3, r7, #8
 80030c2:	2200      	movs	r2, #0
 80030c4:	601a      	str	r2, [r3, #0]
 80030c6:	605a      	str	r2, [r3, #4]
 80030c8:	609a      	str	r2, [r3, #8]
 80030ca:	7ffb      	ldrb	r3, [r7, #31]
 80030cc:	723b      	strb	r3, [r7, #8]
 80030ce:	2307      	movs	r3, #7
 80030d0:	727b      	strb	r3, [r7, #9]

  event.xfer_complete.ep_addr = ep_addr;
 80030d2:	7fbb      	ldrb	r3, [r7, #30]
 80030d4:	733b      	strb	r3, [r7, #12]
  event.xfer_complete.len     = xferred_bytes;
 80030d6:	69bb      	ldr	r3, [r7, #24]
 80030d8:	613b      	str	r3, [r7, #16]
  event.xfer_complete.result  = result;
 80030da:	7dfb      	ldrb	r3, [r7, #23]
 80030dc:	737b      	strb	r3, [r7, #13]

  dcd_event_handler(&event, in_isr);
 80030de:	7dba      	ldrb	r2, [r7, #22]
 80030e0:	f107 0308 	add.w	r3, r7, #8
 80030e4:	4611      	mov	r1, r2
 80030e6:	4618      	mov	r0, r3
 80030e8:	f001 ff48 	bl	8004f7c <dcd_event_handler>
}
 80030ec:	e018      	b.n	8003120 <proc_read10_cmd+0x118>
  }
  else
  {
    TU_ASSERT( usbd_edpt_xfer(rhport, p_msc->ep_in, _mscd_buf, (uint16_t) nbytes), );
 80030ee:	683b      	ldr	r3, [r7, #0]
 80030f0:	f893 102e 	ldrb.w	r1, [r3, #46]	; 0x2e
 80030f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80030f6:	b29b      	uxth	r3, r3
 80030f8:	79f8      	ldrb	r0, [r7, #7]
 80030fa:	4a0b      	ldr	r2, [pc, #44]	; (8003128 <proc_read10_cmd+0x120>)
 80030fc:	f002 f9d0 	bl	80054a0 <usbd_edpt_xfer>
 8003100:	4603      	mov	r3, r0
 8003102:	f083 0301 	eor.w	r3, r3, #1
 8003106:	b2db      	uxtb	r3, r3
 8003108:	2b00      	cmp	r3, #0
 800310a:	d009      	beq.n	8003120 <proc_read10_cmd+0x118>
 800310c:	4b07      	ldr	r3, [pc, #28]	; (800312c <proc_read10_cmd+0x124>)
 800310e:	62bb      	str	r3, [r7, #40]	; 0x28
 8003110:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003112:	681b      	ldr	r3, [r3, #0]
 8003114:	f003 0301 	and.w	r3, r3, #1
 8003118:	2b00      	cmp	r3, #0
 800311a:	d000      	beq.n	800311e <proc_read10_cmd+0x116>
 800311c:	be00      	bkpt	0x0000
 800311e:	bf00      	nop
  }
}
 8003120:	3740      	adds	r7, #64	; 0x40
 8003122:	46bd      	mov	sp, r7
 8003124:	bd80      	pop	{r7, pc}
 8003126:	bf00      	nop
 8003128:	24000f90 	.word	0x24000f90
 800312c:	e000edf0 	.word	0xe000edf0

08003130 <proc_write10_cmd>:

static void proc_write10_cmd(uint8_t rhport, mscd_interface_t* p_msc)
{
 8003130:	b580      	push	{r7, lr}
 8003132:	b088      	sub	sp, #32
 8003134:	af00      	add	r7, sp, #0
 8003136:	4603      	mov	r3, r0
 8003138:	6039      	str	r1, [r7, #0]
 800313a:	71fb      	strb	r3, [r7, #7]
  msc_cbw_t const * p_cbw = &p_msc->cbw;
 800313c:	683b      	ldr	r3, [r7, #0]
 800313e:	61bb      	str	r3, [r7, #24]
  bool writable = true;
 8003140:	2301      	movs	r3, #1
 8003142:	77fb      	strb	r3, [r7, #31]

  if ( tud_msc_is_writable_cb )
 8003144:	4b23      	ldr	r3, [pc, #140]	; (80031d4 <proc_write10_cmd+0xa4>)
 8003146:	2b00      	cmp	r3, #0
 8003148:	d006      	beq.n	8003158 <proc_write10_cmd+0x28>
  {
    writable = tud_msc_is_writable_cb(p_cbw->lun);
 800314a:	69bb      	ldr	r3, [r7, #24]
 800314c:	7b5b      	ldrb	r3, [r3, #13]
 800314e:	4618      	mov	r0, r3
 8003150:	f7fd ff0a 	bl	8000f68 <tud_msc_is_writable_cb>
 8003154:	4603      	mov	r3, r0
 8003156:	77fb      	strb	r3, [r7, #31]
  }

  if ( !writable )
 8003158:	7ffb      	ldrb	r3, [r7, #31]
 800315a:	f083 0301 	eor.w	r3, r3, #1
 800315e:	b2db      	uxtb	r3, r3
 8003160:	2b00      	cmp	r3, #0
 8003162:	d00d      	beq.n	8003180 <proc_write10_cmd+0x50>
  {
    // Not writable, complete this SCSI op with error
    // Sense = Write protected
    tud_msc_set_sense(p_cbw->lun, SCSI_SENSE_DATA_PROTECT, 0x27, 0x00);
 8003164:	69bb      	ldr	r3, [r7, #24]
 8003166:	7b58      	ldrb	r0, [r3, #13]
 8003168:	2300      	movs	r3, #0
 800316a:	2227      	movs	r2, #39	; 0x27
 800316c:	2107      	movs	r1, #7
 800316e:	f7ff f83b 	bl	80021e8 <tud_msc_set_sense>
    fail_scsi_op(rhport, p_msc, MSC_CSW_STATUS_FAILED);
 8003172:	79fb      	ldrb	r3, [r7, #7]
 8003174:	2201      	movs	r2, #1
 8003176:	6839      	ldr	r1, [r7, #0]
 8003178:	4618      	mov	r0, r3
 800317a:	f7fe ff3e 	bl	8001ffa <fail_scsi_op>
    return;
 800317e:	e026      	b.n	80031ce <proc_write10_cmd+0x9e>
  }

  // remaining bytes capped at class buffer
  uint16_t nbytes = (uint16_t) tu_min32(sizeof(_mscd_buf), p_cbw->total_bytes-p_msc->xferred_len);
 8003180:	69bb      	ldr	r3, [r7, #24]
 8003182:	689a      	ldr	r2, [r3, #8]
 8003184:	683b      	ldr	r3, [r7, #0]
 8003186:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003188:	1ad3      	subs	r3, r2, r3
 800318a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800318e:	60fa      	str	r2, [r7, #12]
 8003190:	60bb      	str	r3, [r7, #8]
 8003192:	68fa      	ldr	r2, [r7, #12]
 8003194:	68bb      	ldr	r3, [r7, #8]
 8003196:	4293      	cmp	r3, r2
 8003198:	bf28      	it	cs
 800319a:	4613      	movcs	r3, r2
 800319c:	82fb      	strh	r3, [r7, #22]

  // Write10 callback will be called later when usb transfer complete
  TU_ASSERT( usbd_edpt_xfer(rhport, p_msc->ep_out, _mscd_buf, nbytes), );
 800319e:	683b      	ldr	r3, [r7, #0]
 80031a0:	f893 102f 	ldrb.w	r1, [r3, #47]	; 0x2f
 80031a4:	8afb      	ldrh	r3, [r7, #22]
 80031a6:	79f8      	ldrb	r0, [r7, #7]
 80031a8:	4a0b      	ldr	r2, [pc, #44]	; (80031d8 <proc_write10_cmd+0xa8>)
 80031aa:	f002 f979 	bl	80054a0 <usbd_edpt_xfer>
 80031ae:	4603      	mov	r3, r0
 80031b0:	f083 0301 	eor.w	r3, r3, #1
 80031b4:	b2db      	uxtb	r3, r3
 80031b6:	2b00      	cmp	r3, #0
 80031b8:	d009      	beq.n	80031ce <proc_write10_cmd+0x9e>
 80031ba:	4b08      	ldr	r3, [pc, #32]	; (80031dc <proc_write10_cmd+0xac>)
 80031bc:	613b      	str	r3, [r7, #16]
 80031be:	693b      	ldr	r3, [r7, #16]
 80031c0:	681b      	ldr	r3, [r3, #0]
 80031c2:	f003 0301 	and.w	r3, r3, #1
 80031c6:	2b00      	cmp	r3, #0
 80031c8:	d000      	beq.n	80031cc <proc_write10_cmd+0x9c>
 80031ca:	be00      	bkpt	0x0000
 80031cc:	bf00      	nop
}
 80031ce:	3720      	adds	r7, #32
 80031d0:	46bd      	mov	sp, r7
 80031d2:	bd80      	pop	{r7, pc}
 80031d4:	08000f69 	.word	0x08000f69
 80031d8:	24000f90 	.word	0x24000f90
 80031dc:	e000edf0 	.word	0xe000edf0

080031e0 <proc_write10_new_data>:

// process new data arrived from WRITE10
static void proc_write10_new_data(uint8_t rhport, mscd_interface_t* p_msc, uint32_t xferred_bytes)
{
 80031e0:	b580      	push	{r7, lr}
 80031e2:	b092      	sub	sp, #72	; 0x48
 80031e4:	af02      	add	r7, sp, #8
 80031e6:	4603      	mov	r3, r0
 80031e8:	60b9      	str	r1, [r7, #8]
 80031ea:	607a      	str	r2, [r7, #4]
 80031ec:	73fb      	strb	r3, [r7, #15]
  msc_cbw_t const * p_cbw = &p_msc->cbw;
 80031ee:	68bb      	ldr	r3, [r7, #8]
 80031f0:	63fb      	str	r3, [r7, #60]	; 0x3c

  // block size already verified not zero
  uint16_t const block_sz = rdwr10_get_blocksize(p_cbw);
 80031f2:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 80031f4:	f7fe ff7f 	bl	80020f6 <rdwr10_get_blocksize>
 80031f8:	4603      	mov	r3, r0
 80031fa:	877b      	strh	r3, [r7, #58]	; 0x3a

  // Adjust lba with transferred bytes
  uint32_t const lba = rdwr10_get_lba(p_cbw->command) + (p_msc->xferred_len / block_sz);
 80031fc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80031fe:	330f      	adds	r3, #15
 8003200:	4618      	mov	r0, r3
 8003202:	f7fe ff52 	bl	80020aa <rdwr10_get_lba>
 8003206:	4601      	mov	r1, r0
 8003208:	68bb      	ldr	r3, [r7, #8]
 800320a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800320c:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 800320e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003212:	440b      	add	r3, r1
 8003214:	637b      	str	r3, [r7, #52]	; 0x34

  // Invoke callback to consume new data
  uint32_t const offset = p_msc->xferred_len % block_sz;
 8003216:	68bb      	ldr	r3, [r7, #8]
 8003218:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800321a:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 800321c:	fbb3 f1f2 	udiv	r1, r3, r2
 8003220:	fb01 f202 	mul.w	r2, r1, r2
 8003224:	1a9b      	subs	r3, r3, r2
 8003226:	633b      	str	r3, [r7, #48]	; 0x30
  int32_t nbytes = tud_msc_write10_cb(p_cbw->lun, lba, offset, _mscd_buf, xferred_bytes);
 8003228:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800322a:	7b58      	ldrb	r0, [r3, #13]
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	9300      	str	r3, [sp, #0]
 8003230:	4b3c      	ldr	r3, [pc, #240]	; (8003324 <proc_write10_new_data+0x144>)
 8003232:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003234:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8003236:	f7fd fea3 	bl	8000f80 <tud_msc_write10_cb>
 800323a:	62f8      	str	r0, [r7, #44]	; 0x2c

  if ( nbytes < 0 )
 800323c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800323e:	2b00      	cmp	r3, #0
 8003240:	da11      	bge.n	8003266 <proc_write10_new_data+0x86>
  {
    // negative means error -> failed this scsi op
    TU_LOG_DRV("  tud_msc_write10_cb() return -1\r\n");

    // update actual byte before failed
    p_msc->xferred_len += xferred_bytes;
 8003242:	68bb      	ldr	r3, [r7, #8]
 8003244:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	441a      	add	r2, r3
 800324a:	68bb      	ldr	r3, [r7, #8]
 800324c:	639a      	str	r2, [r3, #56]	; 0x38

    // Set sense
    set_sense_medium_not_present(p_cbw->lun);
 800324e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003250:	7b5b      	ldrb	r3, [r3, #13]
 8003252:	4618      	mov	r0, r3
 8003254:	f7fe ffec 	bl	8002230 <set_sense_medium_not_present>

    fail_scsi_op(rhport, p_msc, MSC_CSW_STATUS_FAILED);
 8003258:	7bfb      	ldrb	r3, [r7, #15]
 800325a:	2201      	movs	r2, #1
 800325c:	68b9      	ldr	r1, [r7, #8]
 800325e:	4618      	mov	r0, r3
 8003260:	f7fe fecb 	bl	8001ffa <fail_scsi_op>
        // prepare to receive more data from host
        proc_write10_cmd(rhport, p_msc);
      }
    }
  }
}
 8003264:	e059      	b.n	800331a <proc_write10_new_data+0x13a>
    if ( (uint32_t) nbytes < xferred_bytes )
 8003266:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003268:	687a      	ldr	r2, [r7, #4]
 800326a:	429a      	cmp	r2, r3
 800326c:	d93f      	bls.n	80032ee <proc_write10_new_data+0x10e>
      uint32_t const left_over = xferred_bytes - (uint32_t) nbytes;
 800326e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003270:	687a      	ldr	r2, [r7, #4]
 8003272:	1ad3      	subs	r3, r2, r3
 8003274:	62bb      	str	r3, [r7, #40]	; 0x28
      if ( nbytes > 0 )
 8003276:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003278:	2b00      	cmp	r3, #0
 800327a:	dd0e      	ble.n	800329a <proc_write10_new_data+0xba>
        p_msc->xferred_len += (uint16_t) nbytes;
 800327c:	68bb      	ldr	r3, [r7, #8]
 800327e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003280:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003282:	b292      	uxth	r2, r2
 8003284:	441a      	add	r2, r3
 8003286:	68bb      	ldr	r3, [r7, #8]
 8003288:	639a      	str	r2, [r3, #56]	; 0x38
        memmove(_mscd_buf, _mscd_buf+nbytes, left_over);
 800328a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800328c:	4a25      	ldr	r2, [pc, #148]	; (8003324 <proc_write10_new_data+0x144>)
 800328e:	4413      	add	r3, r2
 8003290:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003292:	4619      	mov	r1, r3
 8003294:	4823      	ldr	r0, [pc, #140]	; (8003324 <proc_write10_new_data+0x144>)
 8003296:	f00c fe82 	bl	800ff9e <memmove>
      dcd_event_xfer_complete(rhport, p_msc->ep_out, left_over, XFER_RESULT_SUCCESS, false);
 800329a:	68bb      	ldr	r3, [r7, #8]
 800329c:	f893 202f 	ldrb.w	r2, [r3, #47]	; 0x2f
 80032a0:	7bfb      	ldrb	r3, [r7, #15]
 80032a2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80032a6:	4613      	mov	r3, r2
 80032a8:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 80032ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80032ae:	623b      	str	r3, [r7, #32]
 80032b0:	2300      	movs	r3, #0
 80032b2:	77fb      	strb	r3, [r7, #31]
 80032b4:	2300      	movs	r3, #0
 80032b6:	77bb      	strb	r3, [r7, #30]
  dcd_event_t event = { .rhport = rhport, .event_id = DCD_EVENT_XFER_COMPLETE };
 80032b8:	f107 0310 	add.w	r3, r7, #16
 80032bc:	2200      	movs	r2, #0
 80032be:	601a      	str	r2, [r3, #0]
 80032c0:	605a      	str	r2, [r3, #4]
 80032c2:	609a      	str	r2, [r3, #8]
 80032c4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80032c8:	743b      	strb	r3, [r7, #16]
 80032ca:	2307      	movs	r3, #7
 80032cc:	747b      	strb	r3, [r7, #17]
  event.xfer_complete.ep_addr = ep_addr;
 80032ce:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80032d2:	753b      	strb	r3, [r7, #20]
  event.xfer_complete.len     = xferred_bytes;
 80032d4:	6a3b      	ldr	r3, [r7, #32]
 80032d6:	61bb      	str	r3, [r7, #24]
  event.xfer_complete.result  = result;
 80032d8:	7ffb      	ldrb	r3, [r7, #31]
 80032da:	757b      	strb	r3, [r7, #21]
  dcd_event_handler(&event, in_isr);
 80032dc:	7fba      	ldrb	r2, [r7, #30]
 80032de:	f107 0310 	add.w	r3, r7, #16
 80032e2:	4611      	mov	r1, r2
 80032e4:	4618      	mov	r0, r3
 80032e6:	f001 fe49 	bl	8004f7c <dcd_event_handler>
}
 80032ea:	bf00      	nop
}
 80032ec:	e015      	b.n	800331a <proc_write10_new_data+0x13a>
      p_msc->xferred_len += xferred_bytes;
 80032ee:	68bb      	ldr	r3, [r7, #8]
 80032f0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	441a      	add	r2, r3
 80032f6:	68bb      	ldr	r3, [r7, #8]
 80032f8:	639a      	str	r2, [r3, #56]	; 0x38
      if ( p_msc->xferred_len >= p_msc->total_len )
 80032fa:	68bb      	ldr	r3, [r7, #8]
 80032fc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80032fe:	68bb      	ldr	r3, [r7, #8]
 8003300:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003302:	429a      	cmp	r2, r3
 8003304:	d304      	bcc.n	8003310 <proc_write10_new_data+0x130>
        p_msc->stage = MSC_STAGE_STATUS;
 8003306:	68bb      	ldr	r3, [r7, #8]
 8003308:	2202      	movs	r2, #2
 800330a:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
}
 800330e:	e004      	b.n	800331a <proc_write10_new_data+0x13a>
        proc_write10_cmd(rhport, p_msc);
 8003310:	7bfb      	ldrb	r3, [r7, #15]
 8003312:	68b9      	ldr	r1, [r7, #8]
 8003314:	4618      	mov	r0, r3
 8003316:	f7ff ff0b 	bl	8003130 <proc_write10_cmd>
}
 800331a:	bf00      	nop
 800331c:	3740      	adds	r7, #64	; 0x40
 800331e:	46bd      	mov	sp, r7
 8003320:	bd80      	pop	{r7, pc}
 8003322:	bf00      	nop
 8003324:	24000f90 	.word	0x24000f90

08003328 <tu_fifo_config>:
  TU_FIFO_COPY_INC,            ///< Copy from/to an increasing source/destination address - default mode
  TU_FIFO_COPY_CST_FULL_WORDS, ///< Copy from/to a constant source/destination address - required for e.g. STM32 to write into USB hardware FIFO
} tu_fifo_copy_mode_t;

bool tu_fifo_config(tu_fifo_t *f, void* buffer, uint16_t depth, uint16_t item_size, bool overwritable)
{
 8003328:	b480      	push	{r7}
 800332a:	b085      	sub	sp, #20
 800332c:	af00      	add	r7, sp, #0
 800332e:	60f8      	str	r0, [r7, #12]
 8003330:	60b9      	str	r1, [r7, #8]
 8003332:	4611      	mov	r1, r2
 8003334:	461a      	mov	r2, r3
 8003336:	460b      	mov	r3, r1
 8003338:	80fb      	strh	r3, [r7, #6]
 800333a:	4613      	mov	r3, r2
 800333c:	80bb      	strh	r3, [r7, #4]
  // Limit index space to 2*depth - this allows for a fast "modulo" calculation
  // but limits the maximum depth to 2^16/2 = 2^15 and buffer overflows are detectable
  // only if overflow happens once (important for unsupervised DMA applications)
  if (depth > 0x8000) return false;
 800333e:	88fb      	ldrh	r3, [r7, #6]
 8003340:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003344:	d901      	bls.n	800334a <tu_fifo_config+0x22>
 8003346:	2300      	movs	r3, #0
 8003348:	e01b      	b.n	8003382 <tu_fifo_config+0x5a>

  _ff_lock(f->mutex_wr);
  _ff_lock(f->mutex_rd);

  f->buffer       = (uint8_t*) buffer;
 800334a:	68fb      	ldr	r3, [r7, #12]
 800334c:	68ba      	ldr	r2, [r7, #8]
 800334e:	601a      	str	r2, [r3, #0]
  f->depth        = depth;
 8003350:	68fb      	ldr	r3, [r7, #12]
 8003352:	88fa      	ldrh	r2, [r7, #6]
 8003354:	809a      	strh	r2, [r3, #4]
  f->item_size    = (uint16_t) (item_size & 0x7FFF);
 8003356:	88bb      	ldrh	r3, [r7, #4]
 8003358:	f3c3 030e 	ubfx	r3, r3, #0, #15
 800335c:	b299      	uxth	r1, r3
 800335e:	68fa      	ldr	r2, [r7, #12]
 8003360:	88d3      	ldrh	r3, [r2, #6]
 8003362:	f361 030e 	bfi	r3, r1, #0, #15
 8003366:	80d3      	strh	r3, [r2, #6]
  f->overwritable = overwritable;
 8003368:	68fa      	ldr	r2, [r7, #12]
 800336a:	79d3      	ldrb	r3, [r2, #7]
 800336c:	7e39      	ldrb	r1, [r7, #24]
 800336e:	f361 13c7 	bfi	r3, r1, #7, #1
 8003372:	71d3      	strb	r3, [r2, #7]
  f->rd_idx       = 0;
 8003374:	68fb      	ldr	r3, [r7, #12]
 8003376:	2200      	movs	r2, #0
 8003378:	815a      	strh	r2, [r3, #10]
  f->wr_idx       = 0;
 800337a:	68fb      	ldr	r3, [r7, #12]
 800337c:	2200      	movs	r2, #0
 800337e:	811a      	strh	r2, [r3, #8]

  _ff_unlock(f->mutex_wr);
  _ff_unlock(f->mutex_rd);

  return true;
 8003380:	2301      	movs	r3, #1
}
 8003382:	4618      	mov	r0, r3
 8003384:	3714      	adds	r7, #20
 8003386:	46bd      	mov	sp, r7
 8003388:	f85d 7b04 	ldr.w	r7, [sp], #4
 800338c:	4770      	bx	lr

0800338e <_ff_push_const_addr>:

// Intended to be used to read from hardware USB FIFO in e.g. STM32 where all data is read from a constant address
// Code adapted from dcd_synopsys.c
// TODO generalize with configurable 1 byte or 4 byte each read
static void _ff_push_const_addr(uint8_t * ff_buf, const void * app_buf, uint16_t len)
{
 800338e:	b580      	push	{r7, lr}
 8003390:	b08a      	sub	sp, #40	; 0x28
 8003392:	af00      	add	r7, sp, #0
 8003394:	60f8      	str	r0, [r7, #12]
 8003396:	60b9      	str	r1, [r7, #8]
 8003398:	4613      	mov	r3, r2
 800339a:	80fb      	strh	r3, [r7, #6]
  volatile const uint32_t * reg_rx = (volatile const uint32_t *) app_buf;
 800339c:	68bb      	ldr	r3, [r7, #8]
 800339e:	623b      	str	r3, [r7, #32]

  // Reading full available 32 bit words from const app address
  uint16_t full_words = len >> 2;
 80033a0:	88fb      	ldrh	r3, [r7, #6]
 80033a2:	089b      	lsrs	r3, r3, #2
 80033a4:	84fb      	strh	r3, [r7, #38]	; 0x26
  while(full_words--)
 80033a6:	e00b      	b.n	80033c0 <_ff_push_const_addr+0x32>
  {
    tu_unaligned_write32(ff_buf, *reg_rx);
 80033a8:	6a3b      	ldr	r3, [r7, #32]
 80033aa:	681b      	ldr	r3, [r3, #0]
 80033ac:	68fa      	ldr	r2, [r7, #12]
 80033ae:	61ba      	str	r2, [r7, #24]
 80033b0:	617b      	str	r3, [r7, #20]
}

TU_ATTR_ALWAYS_INLINE static inline void tu_unaligned_write32(void *mem, uint32_t value) {
  *((uint32_t *) mem) = value;
 80033b2:	69bb      	ldr	r3, [r7, #24]
 80033b4:	697a      	ldr	r2, [r7, #20]
 80033b6:	601a      	str	r2, [r3, #0]
}
 80033b8:	bf00      	nop
    ff_buf += 4;
 80033ba:	68fb      	ldr	r3, [r7, #12]
 80033bc:	3304      	adds	r3, #4
 80033be:	60fb      	str	r3, [r7, #12]
  while(full_words--)
 80033c0:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80033c2:	1e5a      	subs	r2, r3, #1
 80033c4:	84fa      	strh	r2, [r7, #38]	; 0x26
 80033c6:	2b00      	cmp	r3, #0
 80033c8:	d1ee      	bne.n	80033a8 <_ff_push_const_addr+0x1a>
  }

  // Read the remaining 1-3 bytes from const app address
  uint8_t const bytes_rem = len & 0x03;
 80033ca:	88fb      	ldrh	r3, [r7, #6]
 80033cc:	b2db      	uxtb	r3, r3
 80033ce:	f003 0303 	and.w	r3, r3, #3
 80033d2:	77fb      	strb	r3, [r7, #31]
  if ( bytes_rem )
 80033d4:	7ffb      	ldrb	r3, [r7, #31]
 80033d6:	2b00      	cmp	r3, #0
 80033d8:	d009      	beq.n	80033ee <_ff_push_const_addr+0x60>
  {
    uint32_t tmp32 = *reg_rx;
 80033da:	6a3b      	ldr	r3, [r7, #32]
 80033dc:	681b      	ldr	r3, [r3, #0]
 80033de:	613b      	str	r3, [r7, #16]
    memcpy(ff_buf, &tmp32, bytes_rem);
 80033e0:	7ffa      	ldrb	r2, [r7, #31]
 80033e2:	f107 0310 	add.w	r3, r7, #16
 80033e6:	4619      	mov	r1, r3
 80033e8:	68f8      	ldr	r0, [r7, #12]
 80033ea:	f00c fe1f 	bl	801002c <memcpy>
  }
}
 80033ee:	bf00      	nop
 80033f0:	3728      	adds	r7, #40	; 0x28
 80033f2:	46bd      	mov	sp, r7
 80033f4:	bd80      	pop	{r7, pc}

080033f6 <_ff_pull_const_addr>:

// Intended to be used to write to hardware USB FIFO in e.g. STM32
// where all data is written to a constant address in full word copies
static void _ff_pull_const_addr(void * app_buf, const uint8_t * ff_buf, uint16_t len)
{
 80033f6:	b580      	push	{r7, lr}
 80033f8:	b08a      	sub	sp, #40	; 0x28
 80033fa:	af00      	add	r7, sp, #0
 80033fc:	60f8      	str	r0, [r7, #12]
 80033fe:	60b9      	str	r1, [r7, #8]
 8003400:	4613      	mov	r3, r2
 8003402:	80fb      	strh	r3, [r7, #6]
  volatile uint32_t * reg_tx = (volatile uint32_t *) app_buf;
 8003404:	68fb      	ldr	r3, [r7, #12]
 8003406:	623b      	str	r3, [r7, #32]

  // Write full available 32 bit words to const address
  uint16_t full_words = len >> 2;
 8003408:	88fb      	ldrh	r3, [r7, #6]
 800340a:	089b      	lsrs	r3, r3, #2
 800340c:	84fb      	strh	r3, [r7, #38]	; 0x26
  while(full_words--)
 800340e:	e008      	b.n	8003422 <_ff_pull_const_addr+0x2c>
 8003410:	68bb      	ldr	r3, [r7, #8]
 8003412:	61bb      	str	r3, [r7, #24]
  return *((uint32_t const *) mem);
 8003414:	69bb      	ldr	r3, [r7, #24]
 8003416:	681a      	ldr	r2, [r3, #0]
  {
    *reg_tx = tu_unaligned_read32(ff_buf);
 8003418:	6a3b      	ldr	r3, [r7, #32]
 800341a:	601a      	str	r2, [r3, #0]
    ff_buf += 4;
 800341c:	68bb      	ldr	r3, [r7, #8]
 800341e:	3304      	adds	r3, #4
 8003420:	60bb      	str	r3, [r7, #8]
  while(full_words--)
 8003422:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8003424:	1e5a      	subs	r2, r3, #1
 8003426:	84fa      	strh	r2, [r7, #38]	; 0x26
 8003428:	2b00      	cmp	r3, #0
 800342a:	d1f1      	bne.n	8003410 <_ff_pull_const_addr+0x1a>
  }

  // Write the remaining 1-3 bytes into const address
  uint8_t const bytes_rem = len & 0x03;
 800342c:	88fb      	ldrh	r3, [r7, #6]
 800342e:	b2db      	uxtb	r3, r3
 8003430:	f003 0303 	and.w	r3, r3, #3
 8003434:	77fb      	strb	r3, [r7, #31]
  if ( bytes_rem )
 8003436:	7ffb      	ldrb	r3, [r7, #31]
 8003438:	2b00      	cmp	r3, #0
 800343a:	d00b      	beq.n	8003454 <_ff_pull_const_addr+0x5e>
  {
    uint32_t tmp32 = 0;
 800343c:	2300      	movs	r3, #0
 800343e:	617b      	str	r3, [r7, #20]
    memcpy(&tmp32, ff_buf, bytes_rem);
 8003440:	7ffa      	ldrb	r2, [r7, #31]
 8003442:	f107 0314 	add.w	r3, r7, #20
 8003446:	68b9      	ldr	r1, [r7, #8]
 8003448:	4618      	mov	r0, r3
 800344a:	f00c fdef 	bl	801002c <memcpy>

    *reg_tx = tmp32;
 800344e:	697a      	ldr	r2, [r7, #20]
 8003450:	6a3b      	ldr	r3, [r7, #32]
 8003452:	601a      	str	r2, [r3, #0]
  }
}
 8003454:	bf00      	nop
 8003456:	3728      	adds	r7, #40	; 0x28
 8003458:	46bd      	mov	sp, r7
 800345a:	bd80      	pop	{r7, pc}

0800345c <_ff_push>:

// send one item to fifo WITHOUT updating write pointer
static inline void _ff_push(tu_fifo_t* f, void const * app_buf, uint16_t rel)
{
 800345c:	b580      	push	{r7, lr}
 800345e:	b084      	sub	sp, #16
 8003460:	af00      	add	r7, sp, #0
 8003462:	60f8      	str	r0, [r7, #12]
 8003464:	60b9      	str	r1, [r7, #8]
 8003466:	4613      	mov	r3, r2
 8003468:	80fb      	strh	r3, [r7, #6]
  memcpy(f->buffer + (rel * f->item_size), app_buf, f->item_size);
 800346a:	68fb      	ldr	r3, [r7, #12]
 800346c:	681b      	ldr	r3, [r3, #0]
 800346e:	88fa      	ldrh	r2, [r7, #6]
 8003470:	68f9      	ldr	r1, [r7, #12]
 8003472:	88c9      	ldrh	r1, [r1, #6]
 8003474:	f3c1 010e 	ubfx	r1, r1, #0, #15
 8003478:	b289      	uxth	r1, r1
 800347a:	fb01 f202 	mul.w	r2, r1, r2
 800347e:	1898      	adds	r0, r3, r2
 8003480:	68fb      	ldr	r3, [r7, #12]
 8003482:	88db      	ldrh	r3, [r3, #6]
 8003484:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8003488:	b29b      	uxth	r3, r3
 800348a:	461a      	mov	r2, r3
 800348c:	68b9      	ldr	r1, [r7, #8]
 800348e:	f00c fdcd 	bl	801002c <memcpy>
}
 8003492:	bf00      	nop
 8003494:	3710      	adds	r7, #16
 8003496:	46bd      	mov	sp, r7
 8003498:	bd80      	pop	{r7, pc}

0800349a <_ff_push_n>:

// send n items to fifo WITHOUT updating write pointer
static void _ff_push_n(tu_fifo_t* f, void const * app_buf, uint16_t n, uint16_t wr_ptr, tu_fifo_copy_mode_t copy_mode)
{
 800349a:	b580      	push	{r7, lr}
 800349c:	b08e      	sub	sp, #56	; 0x38
 800349e:	af00      	add	r7, sp, #0
 80034a0:	60f8      	str	r0, [r7, #12]
 80034a2:	60b9      	str	r1, [r7, #8]
 80034a4:	4611      	mov	r1, r2
 80034a6:	461a      	mov	r2, r3
 80034a8:	460b      	mov	r3, r1
 80034aa:	80fb      	strh	r3, [r7, #6]
 80034ac:	4613      	mov	r3, r2
 80034ae:	80bb      	strh	r3, [r7, #4]
  uint16_t const lin_count = f->depth - wr_ptr;
 80034b0:	68fb      	ldr	r3, [r7, #12]
 80034b2:	889a      	ldrh	r2, [r3, #4]
 80034b4:	88bb      	ldrh	r3, [r7, #4]
 80034b6:	1ad3      	subs	r3, r2, r3
 80034b8:	84fb      	strh	r3, [r7, #38]	; 0x26
  uint16_t const wrap_count = n - lin_count;
 80034ba:	88fa      	ldrh	r2, [r7, #6]
 80034bc:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80034be:	1ad3      	subs	r3, r2, r3
 80034c0:	84bb      	strh	r3, [r7, #36]	; 0x24

  uint16_t lin_bytes = lin_count * f->item_size;
 80034c2:	68fb      	ldr	r3, [r7, #12]
 80034c4:	88db      	ldrh	r3, [r3, #6]
 80034c6:	f3c3 030e 	ubfx	r3, r3, #0, #15
 80034ca:	b29b      	uxth	r3, r3
 80034cc:	461a      	mov	r2, r3
 80034ce:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80034d0:	fb13 f302 	smulbb	r3, r3, r2
 80034d4:	847b      	strh	r3, [r7, #34]	; 0x22
  uint16_t wrap_bytes = wrap_count * f->item_size;
 80034d6:	68fb      	ldr	r3, [r7, #12]
 80034d8:	88db      	ldrh	r3, [r3, #6]
 80034da:	f3c3 030e 	ubfx	r3, r3, #0, #15
 80034de:	b29b      	uxth	r3, r3
 80034e0:	461a      	mov	r2, r3
 80034e2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80034e4:	fb13 f302 	smulbb	r3, r3, r2
 80034e8:	86fb      	strh	r3, [r7, #54]	; 0x36

  // current buffer of fifo
  uint8_t* ff_buf = f->buffer + (wr_ptr * f->item_size);
 80034ea:	68fb      	ldr	r3, [r7, #12]
 80034ec:	681b      	ldr	r3, [r3, #0]
 80034ee:	88ba      	ldrh	r2, [r7, #4]
 80034f0:	68f9      	ldr	r1, [r7, #12]
 80034f2:	88c9      	ldrh	r1, [r1, #6]
 80034f4:	f3c1 010e 	ubfx	r1, r1, #0, #15
 80034f8:	b289      	uxth	r1, r1
 80034fa:	fb01 f202 	mul.w	r2, r1, r2
 80034fe:	4413      	add	r3, r2
 8003500:	633b      	str	r3, [r7, #48]	; 0x30

  switch (copy_mode)
 8003502:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 8003506:	2b00      	cmp	r3, #0
 8003508:	d002      	beq.n	8003510 <_ff_push_n+0x76>
 800350a:	2b01      	cmp	r3, #1
 800350c:	d022      	beq.n	8003554 <_ff_push_n+0xba>
        // Write data wrapped part
        if (wrap_bytes > 0) _ff_push_const_addr(ff_buf, app_buf, wrap_bytes);
      }
      break;
  }
}
 800350e:	e09e      	b.n	800364e <_ff_push_n+0x1b4>
      if(n <= lin_count)
 8003510:	88fa      	ldrh	r2, [r7, #6]
 8003512:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8003514:	429a      	cmp	r2, r3
 8003516:	d80d      	bhi.n	8003534 <_ff_push_n+0x9a>
        memcpy(ff_buf, app_buf, n*f->item_size);
 8003518:	88fb      	ldrh	r3, [r7, #6]
 800351a:	68fa      	ldr	r2, [r7, #12]
 800351c:	88d2      	ldrh	r2, [r2, #6]
 800351e:	f3c2 020e 	ubfx	r2, r2, #0, #15
 8003522:	b292      	uxth	r2, r2
 8003524:	fb02 f303 	mul.w	r3, r2, r3
 8003528:	461a      	mov	r2, r3
 800352a:	68b9      	ldr	r1, [r7, #8]
 800352c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800352e:	f00c fd7d 	bl	801002c <memcpy>
      break;
 8003532:	e08c      	b.n	800364e <_ff_push_n+0x1b4>
        memcpy(ff_buf, app_buf, lin_bytes);
 8003534:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8003536:	461a      	mov	r2, r3
 8003538:	68b9      	ldr	r1, [r7, #8]
 800353a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800353c:	f00c fd76 	bl	801002c <memcpy>
        memcpy(f->buffer, ((uint8_t const*) app_buf) + lin_bytes, wrap_bytes);
 8003540:	68fb      	ldr	r3, [r7, #12]
 8003542:	6818      	ldr	r0, [r3, #0]
 8003544:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8003546:	68ba      	ldr	r2, [r7, #8]
 8003548:	4413      	add	r3, r2
 800354a:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 800354c:	4619      	mov	r1, r3
 800354e:	f00c fd6d 	bl	801002c <memcpy>
      break;
 8003552:	e07c      	b.n	800364e <_ff_push_n+0x1b4>
      if(n <= lin_count)
 8003554:	88fa      	ldrh	r2, [r7, #6]
 8003556:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8003558:	429a      	cmp	r2, r3
 800355a:	d80f      	bhi.n	800357c <_ff_push_n+0xe2>
        _ff_push_const_addr(ff_buf, app_buf, n*f->item_size);
 800355c:	68fb      	ldr	r3, [r7, #12]
 800355e:	88db      	ldrh	r3, [r3, #6]
 8003560:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8003564:	b29b      	uxth	r3, r3
 8003566:	461a      	mov	r2, r3
 8003568:	88fb      	ldrh	r3, [r7, #6]
 800356a:	fb13 f302 	smulbb	r3, r3, r2
 800356e:	b29b      	uxth	r3, r3
 8003570:	461a      	mov	r2, r3
 8003572:	68b9      	ldr	r1, [r7, #8]
 8003574:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003576:	f7ff ff0a 	bl	800338e <_ff_push_const_addr>
      break;
 800357a:	e067      	b.n	800364c <_ff_push_n+0x1b2>
        uint16_t nLin_4n_bytes = lin_bytes & 0xFFFC;
 800357c:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800357e:	f023 0303 	bic.w	r3, r3, #3
 8003582:	843b      	strh	r3, [r7, #32]
        _ff_push_const_addr(ff_buf, app_buf, nLin_4n_bytes);
 8003584:	8c3b      	ldrh	r3, [r7, #32]
 8003586:	461a      	mov	r2, r3
 8003588:	68b9      	ldr	r1, [r7, #8]
 800358a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800358c:	f7ff feff 	bl	800338e <_ff_push_const_addr>
        ff_buf += nLin_4n_bytes;
 8003590:	8c3b      	ldrh	r3, [r7, #32]
 8003592:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003594:	4413      	add	r3, r2
 8003596:	633b      	str	r3, [r7, #48]	; 0x30
        uint8_t rem = lin_bytes & 0x03;
 8003598:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800359a:	b2db      	uxtb	r3, r3
 800359c:	f003 0303 	and.w	r3, r3, #3
 80035a0:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
        if (rem > 0)
 80035a4:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80035a8:	2b00      	cmp	r3, #0
 80035aa:	d043      	beq.n	8003634 <_ff_push_n+0x19a>
          volatile const uint32_t * rx_fifo = (volatile const uint32_t *) app_buf;
 80035ac:	68bb      	ldr	r3, [r7, #8]
 80035ae:	61fb      	str	r3, [r7, #28]
          uint8_t remrem = (uint8_t) tu_min16(wrap_bytes, 4-rem);
 80035b0:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80035b4:	b29b      	uxth	r3, r3
 80035b6:	f1c3 0304 	rsb	r3, r3, #4
 80035ba:	b29a      	uxth	r2, r3
 80035bc:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80035be:	837b      	strh	r3, [r7, #26]
 80035c0:	4613      	mov	r3, r2
 80035c2:	833b      	strh	r3, [r7, #24]
TU_ATTR_ALWAYS_INLINE static inline uint16_t tu_min16 (uint16_t x, uint16_t y) { return (x < y) ? x : y; }
 80035c4:	8b7a      	ldrh	r2, [r7, #26]
 80035c6:	8b3b      	ldrh	r3, [r7, #24]
 80035c8:	4293      	cmp	r3, r2
 80035ca:	bf28      	it	cs
 80035cc:	4613      	movcs	r3, r2
 80035ce:	b29b      	uxth	r3, r3
 80035d0:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
          wrap_bytes -= remrem;
 80035d4:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 80035d8:	b29b      	uxth	r3, r3
 80035da:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 80035dc:	1ad3      	subs	r3, r2, r3
 80035de:	86fb      	strh	r3, [r7, #54]	; 0x36
          uint32_t tmp32 = *rx_fifo;
 80035e0:	69fb      	ldr	r3, [r7, #28]
 80035e2:	681b      	ldr	r3, [r3, #0]
 80035e4:	617b      	str	r3, [r7, #20]
          uint8_t * src_u8 = ((uint8_t *) &tmp32);
 80035e6:	f107 0314 	add.w	r3, r7, #20
 80035ea:	62bb      	str	r3, [r7, #40]	; 0x28
          while(rem--) *ff_buf++ = *src_u8++;
 80035ec:	e007      	b.n	80035fe <_ff_push_n+0x164>
 80035ee:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80035f0:	1c53      	adds	r3, r2, #1
 80035f2:	62bb      	str	r3, [r7, #40]	; 0x28
 80035f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80035f6:	1c59      	adds	r1, r3, #1
 80035f8:	6339      	str	r1, [r7, #48]	; 0x30
 80035fa:	7812      	ldrb	r2, [r2, #0]
 80035fc:	701a      	strb	r2, [r3, #0]
 80035fe:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8003602:	1e5a      	subs	r2, r3, #1
 8003604:	f887 202f 	strb.w	r2, [r7, #47]	; 0x2f
 8003608:	2b00      	cmp	r3, #0
 800360a:	d1f0      	bne.n	80035ee <_ff_push_n+0x154>
          ff_buf = f->buffer;
 800360c:	68fb      	ldr	r3, [r7, #12]
 800360e:	681b      	ldr	r3, [r3, #0]
 8003610:	633b      	str	r3, [r7, #48]	; 0x30
          while(remrem--) *ff_buf++ = *src_u8++;
 8003612:	e007      	b.n	8003624 <_ff_push_n+0x18a>
 8003614:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003616:	1c53      	adds	r3, r2, #1
 8003618:	62bb      	str	r3, [r7, #40]	; 0x28
 800361a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800361c:	1c59      	adds	r1, r3, #1
 800361e:	6339      	str	r1, [r7, #48]	; 0x30
 8003620:	7812      	ldrb	r2, [r2, #0]
 8003622:	701a      	strb	r2, [r3, #0]
 8003624:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8003628:	1e5a      	subs	r2, r3, #1
 800362a:	f887 202e 	strb.w	r2, [r7, #46]	; 0x2e
 800362e:	2b00      	cmp	r3, #0
 8003630:	d1f0      	bne.n	8003614 <_ff_push_n+0x17a>
 8003632:	e002      	b.n	800363a <_ff_push_n+0x1a0>
          ff_buf = f->buffer; // wrap around to beginning
 8003634:	68fb      	ldr	r3, [r7, #12]
 8003636:	681b      	ldr	r3, [r3, #0]
 8003638:	633b      	str	r3, [r7, #48]	; 0x30
        if (wrap_bytes > 0) _ff_push_const_addr(ff_buf, app_buf, wrap_bytes);
 800363a:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800363c:	2b00      	cmp	r3, #0
 800363e:	d005      	beq.n	800364c <_ff_push_n+0x1b2>
 8003640:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8003642:	461a      	mov	r2, r3
 8003644:	68b9      	ldr	r1, [r7, #8]
 8003646:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003648:	f7ff fea1 	bl	800338e <_ff_push_const_addr>
      break;
 800364c:	bf00      	nop
}
 800364e:	bf00      	nop
 8003650:	3738      	adds	r7, #56	; 0x38
 8003652:	46bd      	mov	sp, r7
 8003654:	bd80      	pop	{r7, pc}

08003656 <_ff_pull>:

// get one item from fifo WITHOUT updating read pointer
static inline void _ff_pull(tu_fifo_t* f, void * app_buf, uint16_t rel)
{
 8003656:	b580      	push	{r7, lr}
 8003658:	b084      	sub	sp, #16
 800365a:	af00      	add	r7, sp, #0
 800365c:	60f8      	str	r0, [r7, #12]
 800365e:	60b9      	str	r1, [r7, #8]
 8003660:	4613      	mov	r3, r2
 8003662:	80fb      	strh	r3, [r7, #6]
  memcpy(app_buf, f->buffer + (rel * f->item_size), f->item_size);
 8003664:	68fb      	ldr	r3, [r7, #12]
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	88fa      	ldrh	r2, [r7, #6]
 800366a:	68f9      	ldr	r1, [r7, #12]
 800366c:	88c9      	ldrh	r1, [r1, #6]
 800366e:	f3c1 010e 	ubfx	r1, r1, #0, #15
 8003672:	b289      	uxth	r1, r1
 8003674:	fb01 f202 	mul.w	r2, r1, r2
 8003678:	1899      	adds	r1, r3, r2
 800367a:	68fb      	ldr	r3, [r7, #12]
 800367c:	88db      	ldrh	r3, [r3, #6]
 800367e:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8003682:	b29b      	uxth	r3, r3
 8003684:	461a      	mov	r2, r3
 8003686:	68b8      	ldr	r0, [r7, #8]
 8003688:	f00c fcd0 	bl	801002c <memcpy>
}
 800368c:	bf00      	nop
 800368e:	3710      	adds	r7, #16
 8003690:	46bd      	mov	sp, r7
 8003692:	bd80      	pop	{r7, pc}

08003694 <_ff_pull_n>:

// get n items from fifo WITHOUT updating read pointer
static void _ff_pull_n(tu_fifo_t* f, void* app_buf, uint16_t n, uint16_t rd_ptr, tu_fifo_copy_mode_t copy_mode)
{
 8003694:	b580      	push	{r7, lr}
 8003696:	b08e      	sub	sp, #56	; 0x38
 8003698:	af00      	add	r7, sp, #0
 800369a:	60f8      	str	r0, [r7, #12]
 800369c:	60b9      	str	r1, [r7, #8]
 800369e:	4611      	mov	r1, r2
 80036a0:	461a      	mov	r2, r3
 80036a2:	460b      	mov	r3, r1
 80036a4:	80fb      	strh	r3, [r7, #6]
 80036a6:	4613      	mov	r3, r2
 80036a8:	80bb      	strh	r3, [r7, #4]
  uint16_t const lin_count = f->depth - rd_ptr;
 80036aa:	68fb      	ldr	r3, [r7, #12]
 80036ac:	889a      	ldrh	r2, [r3, #4]
 80036ae:	88bb      	ldrh	r3, [r7, #4]
 80036b0:	1ad3      	subs	r3, r2, r3
 80036b2:	84fb      	strh	r3, [r7, #38]	; 0x26
  uint16_t const wrap_count = n - lin_count; // only used if wrapped
 80036b4:	88fa      	ldrh	r2, [r7, #6]
 80036b6:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80036b8:	1ad3      	subs	r3, r2, r3
 80036ba:	84bb      	strh	r3, [r7, #36]	; 0x24

  uint16_t lin_bytes = lin_count * f->item_size;
 80036bc:	68fb      	ldr	r3, [r7, #12]
 80036be:	88db      	ldrh	r3, [r3, #6]
 80036c0:	f3c3 030e 	ubfx	r3, r3, #0, #15
 80036c4:	b29b      	uxth	r3, r3
 80036c6:	461a      	mov	r2, r3
 80036c8:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80036ca:	fb13 f302 	smulbb	r3, r3, r2
 80036ce:	847b      	strh	r3, [r7, #34]	; 0x22
  uint16_t wrap_bytes = wrap_count * f->item_size;
 80036d0:	68fb      	ldr	r3, [r7, #12]
 80036d2:	88db      	ldrh	r3, [r3, #6]
 80036d4:	f3c3 030e 	ubfx	r3, r3, #0, #15
 80036d8:	b29b      	uxth	r3, r3
 80036da:	461a      	mov	r2, r3
 80036dc:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80036de:	fb13 f302 	smulbb	r3, r3, r2
 80036e2:	86fb      	strh	r3, [r7, #54]	; 0x36

  // current buffer of fifo
  uint8_t* ff_buf = f->buffer + (rd_ptr * f->item_size);
 80036e4:	68fb      	ldr	r3, [r7, #12]
 80036e6:	681b      	ldr	r3, [r3, #0]
 80036e8:	88ba      	ldrh	r2, [r7, #4]
 80036ea:	68f9      	ldr	r1, [r7, #12]
 80036ec:	88c9      	ldrh	r1, [r1, #6]
 80036ee:	f3c1 010e 	ubfx	r1, r1, #0, #15
 80036f2:	b289      	uxth	r1, r1
 80036f4:	fb01 f202 	mul.w	r2, r1, r2
 80036f8:	4413      	add	r3, r2
 80036fa:	633b      	str	r3, [r7, #48]	; 0x30

  switch (copy_mode)
 80036fc:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 8003700:	2b00      	cmp	r3, #0
 8003702:	d002      	beq.n	800370a <_ff_pull_n+0x76>
 8003704:	2b01      	cmp	r3, #1
 8003706:	d022      	beq.n	800374e <_ff_pull_n+0xba>
        // Read data wrapped part
        if (wrap_bytes > 0) _ff_pull_const_addr(app_buf, ff_buf, wrap_bytes);
      }
    break;

    default: break;
 8003708:	e0a0      	b.n	800384c <_ff_pull_n+0x1b8>
      if ( n <= lin_count )
 800370a:	88fa      	ldrh	r2, [r7, #6]
 800370c:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800370e:	429a      	cmp	r2, r3
 8003710:	d80d      	bhi.n	800372e <_ff_pull_n+0x9a>
        memcpy(app_buf, ff_buf, n*f->item_size);
 8003712:	88fb      	ldrh	r3, [r7, #6]
 8003714:	68fa      	ldr	r2, [r7, #12]
 8003716:	88d2      	ldrh	r2, [r2, #6]
 8003718:	f3c2 020e 	ubfx	r2, r2, #0, #15
 800371c:	b292      	uxth	r2, r2
 800371e:	fb02 f303 	mul.w	r3, r2, r3
 8003722:	461a      	mov	r2, r3
 8003724:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003726:	68b8      	ldr	r0, [r7, #8]
 8003728:	f00c fc80 	bl	801002c <memcpy>
    break;
 800372c:	e08e      	b.n	800384c <_ff_pull_n+0x1b8>
        memcpy(app_buf, ff_buf, lin_bytes);
 800372e:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8003730:	461a      	mov	r2, r3
 8003732:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003734:	68b8      	ldr	r0, [r7, #8]
 8003736:	f00c fc79 	bl	801002c <memcpy>
        memcpy((uint8_t*) app_buf + lin_bytes, f->buffer, wrap_bytes);
 800373a:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800373c:	68ba      	ldr	r2, [r7, #8]
 800373e:	18d0      	adds	r0, r2, r3
 8003740:	68fb      	ldr	r3, [r7, #12]
 8003742:	681b      	ldr	r3, [r3, #0]
 8003744:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8003746:	4619      	mov	r1, r3
 8003748:	f00c fc70 	bl	801002c <memcpy>
    break;
 800374c:	e07e      	b.n	800384c <_ff_pull_n+0x1b8>
      if ( n <= lin_count )
 800374e:	88fa      	ldrh	r2, [r7, #6]
 8003750:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8003752:	429a      	cmp	r2, r3
 8003754:	d80f      	bhi.n	8003776 <_ff_pull_n+0xe2>
        _ff_pull_const_addr(app_buf, ff_buf, n*f->item_size);
 8003756:	68fb      	ldr	r3, [r7, #12]
 8003758:	88db      	ldrh	r3, [r3, #6]
 800375a:	f3c3 030e 	ubfx	r3, r3, #0, #15
 800375e:	b29b      	uxth	r3, r3
 8003760:	461a      	mov	r2, r3
 8003762:	88fb      	ldrh	r3, [r7, #6]
 8003764:	fb13 f302 	smulbb	r3, r3, r2
 8003768:	b29b      	uxth	r3, r3
 800376a:	461a      	mov	r2, r3
 800376c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800376e:	68b8      	ldr	r0, [r7, #8]
 8003770:	f7ff fe41 	bl	80033f6 <_ff_pull_const_addr>
    break;
 8003774:	e069      	b.n	800384a <_ff_pull_n+0x1b6>
        uint16_t lin_4n_bytes = lin_bytes & 0xFFFC;
 8003776:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8003778:	f023 0303 	bic.w	r3, r3, #3
 800377c:	843b      	strh	r3, [r7, #32]
        _ff_pull_const_addr(app_buf, ff_buf, lin_4n_bytes);
 800377e:	8c3b      	ldrh	r3, [r7, #32]
 8003780:	461a      	mov	r2, r3
 8003782:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003784:	68b8      	ldr	r0, [r7, #8]
 8003786:	f7ff fe36 	bl	80033f6 <_ff_pull_const_addr>
        ff_buf += lin_4n_bytes;
 800378a:	8c3b      	ldrh	r3, [r7, #32]
 800378c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800378e:	4413      	add	r3, r2
 8003790:	633b      	str	r3, [r7, #48]	; 0x30
        uint8_t rem = lin_bytes & 0x03;
 8003792:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8003794:	b2db      	uxtb	r3, r3
 8003796:	f003 0303 	and.w	r3, r3, #3
 800379a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
        if (rem > 0)
 800379e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80037a2:	2b00      	cmp	r3, #0
 80037a4:	d045      	beq.n	8003832 <_ff_pull_n+0x19e>
          volatile uint32_t * reg_tx = (volatile uint32_t *) app_buf;
 80037a6:	68bb      	ldr	r3, [r7, #8]
 80037a8:	61fb      	str	r3, [r7, #28]
          uint8_t remrem = (uint8_t) tu_min16(wrap_bytes, 4-rem);
 80037aa:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80037ae:	b29b      	uxth	r3, r3
 80037b0:	f1c3 0304 	rsb	r3, r3, #4
 80037b4:	b29a      	uxth	r2, r3
 80037b6:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80037b8:	837b      	strh	r3, [r7, #26]
 80037ba:	4613      	mov	r3, r2
 80037bc:	833b      	strh	r3, [r7, #24]
 80037be:	8b7a      	ldrh	r2, [r7, #26]
 80037c0:	8b3b      	ldrh	r3, [r7, #24]
 80037c2:	4293      	cmp	r3, r2
 80037c4:	bf28      	it	cs
 80037c6:	4613      	movcs	r3, r2
 80037c8:	b29b      	uxth	r3, r3
 80037ca:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
          wrap_bytes -= remrem;
 80037ce:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 80037d2:	b29b      	uxth	r3, r3
 80037d4:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 80037d6:	1ad3      	subs	r3, r2, r3
 80037d8:	86fb      	strh	r3, [r7, #54]	; 0x36
          uint32_t tmp32=0;
 80037da:	2300      	movs	r3, #0
 80037dc:	617b      	str	r3, [r7, #20]
          uint8_t * dst_u8 = (uint8_t *)&tmp32;
 80037de:	f107 0314 	add.w	r3, r7, #20
 80037e2:	62bb      	str	r3, [r7, #40]	; 0x28
          while(rem--) *dst_u8++ = *ff_buf++;
 80037e4:	e007      	b.n	80037f6 <_ff_pull_n+0x162>
 80037e6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80037e8:	1c53      	adds	r3, r2, #1
 80037ea:	633b      	str	r3, [r7, #48]	; 0x30
 80037ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80037ee:	1c59      	adds	r1, r3, #1
 80037f0:	62b9      	str	r1, [r7, #40]	; 0x28
 80037f2:	7812      	ldrb	r2, [r2, #0]
 80037f4:	701a      	strb	r2, [r3, #0]
 80037f6:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80037fa:	1e5a      	subs	r2, r3, #1
 80037fc:	f887 202f 	strb.w	r2, [r7, #47]	; 0x2f
 8003800:	2b00      	cmp	r3, #0
 8003802:	d1f0      	bne.n	80037e6 <_ff_pull_n+0x152>
          ff_buf = f->buffer;
 8003804:	68fb      	ldr	r3, [r7, #12]
 8003806:	681b      	ldr	r3, [r3, #0]
 8003808:	633b      	str	r3, [r7, #48]	; 0x30
          while(remrem--) *dst_u8++ = *ff_buf++;
 800380a:	e007      	b.n	800381c <_ff_pull_n+0x188>
 800380c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800380e:	1c53      	adds	r3, r2, #1
 8003810:	633b      	str	r3, [r7, #48]	; 0x30
 8003812:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003814:	1c59      	adds	r1, r3, #1
 8003816:	62b9      	str	r1, [r7, #40]	; 0x28
 8003818:	7812      	ldrb	r2, [r2, #0]
 800381a:	701a      	strb	r2, [r3, #0]
 800381c:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8003820:	1e5a      	subs	r2, r3, #1
 8003822:	f887 202e 	strb.w	r2, [r7, #46]	; 0x2e
 8003826:	2b00      	cmp	r3, #0
 8003828:	d1f0      	bne.n	800380c <_ff_pull_n+0x178>
          *reg_tx = tmp32;
 800382a:	697a      	ldr	r2, [r7, #20]
 800382c:	69fb      	ldr	r3, [r7, #28]
 800382e:	601a      	str	r2, [r3, #0]
 8003830:	e002      	b.n	8003838 <_ff_pull_n+0x1a4>
          ff_buf = f->buffer; // wrap around to beginning
 8003832:	68fb      	ldr	r3, [r7, #12]
 8003834:	681b      	ldr	r3, [r3, #0]
 8003836:	633b      	str	r3, [r7, #48]	; 0x30
        if (wrap_bytes > 0) _ff_pull_const_addr(app_buf, ff_buf, wrap_bytes);
 8003838:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800383a:	2b00      	cmp	r3, #0
 800383c:	d005      	beq.n	800384a <_ff_pull_n+0x1b6>
 800383e:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8003840:	461a      	mov	r2, r3
 8003842:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003844:	68b8      	ldr	r0, [r7, #8]
 8003846:	f7ff fdd6 	bl	80033f6 <_ff_pull_const_addr>
    break;
 800384a:	bf00      	nop
  }
}
 800384c:	bf00      	nop
 800384e:	3738      	adds	r7, #56	; 0x38
 8003850:	46bd      	mov	sp, r7
 8003852:	bd80      	pop	{r7, pc}

08003854 <advance_index>:
//--------------------------------------------------------------------+

// Advance an absolute index
// "absolute" index is only in the range of [0..2*depth)
static uint16_t advance_index(uint16_t depth, uint16_t idx, uint16_t offset)
{
 8003854:	b480      	push	{r7}
 8003856:	b085      	sub	sp, #20
 8003858:	af00      	add	r7, sp, #0
 800385a:	4603      	mov	r3, r0
 800385c:	80fb      	strh	r3, [r7, #6]
 800385e:	460b      	mov	r3, r1
 8003860:	80bb      	strh	r3, [r7, #4]
 8003862:	4613      	mov	r3, r2
 8003864:	807b      	strh	r3, [r7, #2]
  // We limit the index space of p such that a correct wrap around happens
  // Check for a wrap around or if we are in unused index space - This has to be checked first!!
  // We are exploiting the wrap around to the correct index
  uint16_t new_idx = (uint16_t) (idx + offset);
 8003866:	88ba      	ldrh	r2, [r7, #4]
 8003868:	887b      	ldrh	r3, [r7, #2]
 800386a:	4413      	add	r3, r2
 800386c:	81fb      	strh	r3, [r7, #14]
  if ( (idx > new_idx) || (new_idx >= 2*depth) )
 800386e:	88ba      	ldrh	r2, [r7, #4]
 8003870:	89fb      	ldrh	r3, [r7, #14]
 8003872:	429a      	cmp	r2, r3
 8003874:	d804      	bhi.n	8003880 <advance_index+0x2c>
 8003876:	89fa      	ldrh	r2, [r7, #14]
 8003878:	88fb      	ldrh	r3, [r7, #6]
 800387a:	005b      	lsls	r3, r3, #1
 800387c:	429a      	cmp	r2, r3
 800387e:	db08      	blt.n	8003892 <advance_index+0x3e>
  {
    uint16_t const non_used_index_space = (uint16_t) (UINT16_MAX - (2*depth-1));
 8003880:	88fb      	ldrh	r3, [r7, #6]
 8003882:	005b      	lsls	r3, r3, #1
 8003884:	b29b      	uxth	r3, r3
 8003886:	425b      	negs	r3, r3
 8003888:	81bb      	strh	r3, [r7, #12]
    new_idx = (uint16_t) (new_idx + non_used_index_space);
 800388a:	89fa      	ldrh	r2, [r7, #14]
 800388c:	89bb      	ldrh	r3, [r7, #12]
 800388e:	4413      	add	r3, r2
 8003890:	81fb      	strh	r3, [r7, #14]
  }

  return new_idx;
 8003892:	89fb      	ldrh	r3, [r7, #14]
}
 8003894:	4618      	mov	r0, r3
 8003896:	3714      	adds	r7, #20
 8003898:	46bd      	mov	sp, r7
 800389a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800389e:	4770      	bx	lr

080038a0 <_tu_fifo_peek>:
}

// Works on local copies of w and r
// Must be protected by mutexes since in case of an overflow read pointer gets modified
static bool _tu_fifo_peek(tu_fifo_t* f, void * p_buffer, uint16_t wr_idx, uint16_t rd_idx)
{
 80038a0:	b580      	push	{r7, lr}
 80038a2:	b08a      	sub	sp, #40	; 0x28
 80038a4:	af00      	add	r7, sp, #0
 80038a6:	60f8      	str	r0, [r7, #12]
 80038a8:	60b9      	str	r1, [r7, #8]
 80038aa:	4611      	mov	r1, r2
 80038ac:	461a      	mov	r2, r3
 80038ae:	460b      	mov	r3, r1
 80038b0:	80fb      	strh	r3, [r7, #6]
 80038b2:	4613      	mov	r3, r2
 80038b4:	80bb      	strh	r3, [r7, #4]
  uint16_t cnt = _ff_count(f->depth, wr_idx, rd_idx);
 80038b6:	68fb      	ldr	r3, [r7, #12]
 80038b8:	889b      	ldrh	r3, [r3, #4]
 80038ba:	847b      	strh	r3, [r7, #34]	; 0x22
 80038bc:	88fb      	ldrh	r3, [r7, #6]
 80038be:	843b      	strh	r3, [r7, #32]
 80038c0:	88bb      	ldrh	r3, [r7, #4]
 80038c2:	83fb      	strh	r3, [r7, #30]
  if (wr_idx >= rd_idx)
 80038c4:	8c3a      	ldrh	r2, [r7, #32]
 80038c6:	8bfb      	ldrh	r3, [r7, #30]
 80038c8:	429a      	cmp	r2, r3
 80038ca:	d304      	bcc.n	80038d6 <_tu_fifo_peek+0x36>
    return (uint16_t) (wr_idx - rd_idx);
 80038cc:	8c3a      	ldrh	r2, [r7, #32]
 80038ce:	8bfb      	ldrh	r3, [r7, #30]
 80038d0:	1ad3      	subs	r3, r2, r3
 80038d2:	b29b      	uxth	r3, r3
 80038d4:	e008      	b.n	80038e8 <_tu_fifo_peek+0x48>
    return (uint16_t) (2*depth - (rd_idx - wr_idx));
 80038d6:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80038d8:	005b      	lsls	r3, r3, #1
 80038da:	b29a      	uxth	r2, r3
 80038dc:	8c39      	ldrh	r1, [r7, #32]
 80038de:	8bfb      	ldrh	r3, [r7, #30]
 80038e0:	1acb      	subs	r3, r1, r3
 80038e2:	b29b      	uxth	r3, r3
 80038e4:	4413      	add	r3, r2
 80038e6:	b29b      	uxth	r3, r3
  uint16_t cnt = _ff_count(f->depth, wr_idx, rd_idx);
 80038e8:	84fb      	strh	r3, [r7, #38]	; 0x26

  // nothing to peek
  if ( cnt == 0 ) return false;
 80038ea:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80038ec:	2b00      	cmp	r3, #0
 80038ee:	d101      	bne.n	80038f4 <_tu_fifo_peek+0x54>
 80038f0:	2300      	movs	r3, #0
 80038f2:	e037      	b.n	8003964 <_tu_fifo_peek+0xc4>

  // Check overflow and correct if required
  if ( cnt > f->depth )
 80038f4:	68fb      	ldr	r3, [r7, #12]
 80038f6:	889b      	ldrh	r3, [r3, #4]
 80038f8:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 80038fa:	429a      	cmp	r2, r3
 80038fc:	d91b      	bls.n	8003936 <_tu_fifo_peek+0x96>
 80038fe:	68fb      	ldr	r3, [r7, #12]
 8003900:	61bb      	str	r3, [r7, #24]
 8003902:	88fb      	ldrh	r3, [r7, #6]
 8003904:	82fb      	strh	r3, [r7, #22]
  if ( wr_idx >= f->depth )
 8003906:	69bb      	ldr	r3, [r7, #24]
 8003908:	889b      	ldrh	r3, [r3, #4]
 800390a:	8afa      	ldrh	r2, [r7, #22]
 800390c:	429a      	cmp	r2, r3
 800390e:	d305      	bcc.n	800391c <_tu_fifo_peek+0x7c>
    rd_idx = wr_idx - f->depth;
 8003910:	69bb      	ldr	r3, [r7, #24]
 8003912:	889b      	ldrh	r3, [r3, #4]
 8003914:	8afa      	ldrh	r2, [r7, #22]
 8003916:	1ad3      	subs	r3, r2, r3
 8003918:	82bb      	strh	r3, [r7, #20]
 800391a:	e004      	b.n	8003926 <_tu_fifo_peek+0x86>
    rd_idx = wr_idx + f->depth;
 800391c:	69bb      	ldr	r3, [r7, #24]
 800391e:	889a      	ldrh	r2, [r3, #4]
 8003920:	8afb      	ldrh	r3, [r7, #22]
 8003922:	4413      	add	r3, r2
 8003924:	82bb      	strh	r3, [r7, #20]
  f->rd_idx = rd_idx;
 8003926:	69bb      	ldr	r3, [r7, #24]
 8003928:	8aba      	ldrh	r2, [r7, #20]
 800392a:	815a      	strh	r2, [r3, #10]
  return rd_idx;
 800392c:	8abb      	ldrh	r3, [r7, #20]
  {
    rd_idx = _ff_correct_read_index(f, wr_idx);
 800392e:	80bb      	strh	r3, [r7, #4]
    cnt = f->depth;
 8003930:	68fb      	ldr	r3, [r7, #12]
 8003932:	889b      	ldrh	r3, [r3, #4]
 8003934:	84fb      	strh	r3, [r7, #38]	; 0x26
  }

  uint16_t rd_ptr = idx2ptr(f->depth, rd_idx);
 8003936:	68fb      	ldr	r3, [r7, #12]
 8003938:	889b      	ldrh	r3, [r3, #4]
 800393a:	827b      	strh	r3, [r7, #18]
 800393c:	88bb      	ldrh	r3, [r7, #4]
 800393e:	823b      	strh	r3, [r7, #16]
  while ( idx >= depth ) idx -= depth;
 8003940:	e003      	b.n	800394a <_tu_fifo_peek+0xaa>
 8003942:	8a3a      	ldrh	r2, [r7, #16]
 8003944:	8a7b      	ldrh	r3, [r7, #18]
 8003946:	1ad3      	subs	r3, r2, r3
 8003948:	823b      	strh	r3, [r7, #16]
 800394a:	8a7a      	ldrh	r2, [r7, #18]
 800394c:	8a3b      	ldrh	r3, [r7, #16]
 800394e:	429a      	cmp	r2, r3
 8003950:	d9f7      	bls.n	8003942 <_tu_fifo_peek+0xa2>
  return idx;
 8003952:	8a3b      	ldrh	r3, [r7, #16]
  uint16_t rd_ptr = idx2ptr(f->depth, rd_idx);
 8003954:	84bb      	strh	r3, [r7, #36]	; 0x24

  // Peek data
  _ff_pull(f, p_buffer, rd_ptr);
 8003956:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8003958:	461a      	mov	r2, r3
 800395a:	68b9      	ldr	r1, [r7, #8]
 800395c:	68f8      	ldr	r0, [r7, #12]
 800395e:	f7ff fe7a 	bl	8003656 <_ff_pull>

  return true;
 8003962:	2301      	movs	r3, #1
}
 8003964:	4618      	mov	r0, r3
 8003966:	3728      	adds	r7, #40	; 0x28
 8003968:	46bd      	mov	sp, r7
 800396a:	bd80      	pop	{r7, pc}

0800396c <_tu_fifo_peek_n>:

// Works on local copies of w and r
// Must be protected by mutexes since in case of an overflow read pointer gets modified
static uint16_t _tu_fifo_peek_n(tu_fifo_t* f, void * p_buffer, uint16_t n, uint16_t wr_idx, uint16_t rd_idx, tu_fifo_copy_mode_t copy_mode)
{
 800396c:	b580      	push	{r7, lr}
 800396e:	b08c      	sub	sp, #48	; 0x30
 8003970:	af02      	add	r7, sp, #8
 8003972:	60f8      	str	r0, [r7, #12]
 8003974:	60b9      	str	r1, [r7, #8]
 8003976:	4611      	mov	r1, r2
 8003978:	461a      	mov	r2, r3
 800397a:	460b      	mov	r3, r1
 800397c:	80fb      	strh	r3, [r7, #6]
 800397e:	4613      	mov	r3, r2
 8003980:	80bb      	strh	r3, [r7, #4]
  uint16_t cnt = _ff_count(f->depth, wr_idx, rd_idx);
 8003982:	68fb      	ldr	r3, [r7, #12]
 8003984:	889b      	ldrh	r3, [r3, #4]
 8003986:	847b      	strh	r3, [r7, #34]	; 0x22
 8003988:	88bb      	ldrh	r3, [r7, #4]
 800398a:	843b      	strh	r3, [r7, #32]
 800398c:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 800398e:	83fb      	strh	r3, [r7, #30]
  if (wr_idx >= rd_idx)
 8003990:	8c3a      	ldrh	r2, [r7, #32]
 8003992:	8bfb      	ldrh	r3, [r7, #30]
 8003994:	429a      	cmp	r2, r3
 8003996:	d304      	bcc.n	80039a2 <_tu_fifo_peek_n+0x36>
    return (uint16_t) (wr_idx - rd_idx);
 8003998:	8c3a      	ldrh	r2, [r7, #32]
 800399a:	8bfb      	ldrh	r3, [r7, #30]
 800399c:	1ad3      	subs	r3, r2, r3
 800399e:	b29b      	uxth	r3, r3
 80039a0:	e008      	b.n	80039b4 <_tu_fifo_peek_n+0x48>
    return (uint16_t) (2*depth - (rd_idx - wr_idx));
 80039a2:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80039a4:	005b      	lsls	r3, r3, #1
 80039a6:	b29a      	uxth	r2, r3
 80039a8:	8c39      	ldrh	r1, [r7, #32]
 80039aa:	8bfb      	ldrh	r3, [r7, #30]
 80039ac:	1acb      	subs	r3, r1, r3
 80039ae:	b29b      	uxth	r3, r3
 80039b0:	4413      	add	r3, r2
 80039b2:	b29b      	uxth	r3, r3
  uint16_t cnt = _ff_count(f->depth, wr_idx, rd_idx);
 80039b4:	84fb      	strh	r3, [r7, #38]	; 0x26

  // nothing to peek
  if ( cnt == 0 ) return 0;
 80039b6:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80039b8:	2b00      	cmp	r3, #0
 80039ba:	d101      	bne.n	80039c0 <_tu_fifo_peek_n+0x54>
 80039bc:	2300      	movs	r3, #0
 80039be:	e041      	b.n	8003a44 <_tu_fifo_peek_n+0xd8>

  // Check overflow and correct if required
  if ( cnt > f->depth )
 80039c0:	68fb      	ldr	r3, [r7, #12]
 80039c2:	889b      	ldrh	r3, [r3, #4]
 80039c4:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 80039c6:	429a      	cmp	r2, r3
 80039c8:	d91b      	bls.n	8003a02 <_tu_fifo_peek_n+0x96>
 80039ca:	68fb      	ldr	r3, [r7, #12]
 80039cc:	61bb      	str	r3, [r7, #24]
 80039ce:	88bb      	ldrh	r3, [r7, #4]
 80039d0:	82fb      	strh	r3, [r7, #22]
  if ( wr_idx >= f->depth )
 80039d2:	69bb      	ldr	r3, [r7, #24]
 80039d4:	889b      	ldrh	r3, [r3, #4]
 80039d6:	8afa      	ldrh	r2, [r7, #22]
 80039d8:	429a      	cmp	r2, r3
 80039da:	d305      	bcc.n	80039e8 <_tu_fifo_peek_n+0x7c>
    rd_idx = wr_idx - f->depth;
 80039dc:	69bb      	ldr	r3, [r7, #24]
 80039de:	889b      	ldrh	r3, [r3, #4]
 80039e0:	8afa      	ldrh	r2, [r7, #22]
 80039e2:	1ad3      	subs	r3, r2, r3
 80039e4:	82bb      	strh	r3, [r7, #20]
 80039e6:	e004      	b.n	80039f2 <_tu_fifo_peek_n+0x86>
    rd_idx = wr_idx + f->depth;
 80039e8:	69bb      	ldr	r3, [r7, #24]
 80039ea:	889a      	ldrh	r2, [r3, #4]
 80039ec:	8afb      	ldrh	r3, [r7, #22]
 80039ee:	4413      	add	r3, r2
 80039f0:	82bb      	strh	r3, [r7, #20]
  f->rd_idx = rd_idx;
 80039f2:	69bb      	ldr	r3, [r7, #24]
 80039f4:	8aba      	ldrh	r2, [r7, #20]
 80039f6:	815a      	strh	r2, [r3, #10]
  return rd_idx;
 80039f8:	8abb      	ldrh	r3, [r7, #20]
  {
    rd_idx = _ff_correct_read_index(f, wr_idx);
 80039fa:	863b      	strh	r3, [r7, #48]	; 0x30
    cnt = f->depth;
 80039fc:	68fb      	ldr	r3, [r7, #12]
 80039fe:	889b      	ldrh	r3, [r3, #4]
 8003a00:	84fb      	strh	r3, [r7, #38]	; 0x26
  }

  // Check if we can read something at and after offset - if too less is available we read what remains
  if ( cnt < n ) n = cnt;
 8003a02:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8003a04:	88fb      	ldrh	r3, [r7, #6]
 8003a06:	429a      	cmp	r2, r3
 8003a08:	d201      	bcs.n	8003a0e <_tu_fifo_peek_n+0xa2>
 8003a0a:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8003a0c:	80fb      	strh	r3, [r7, #6]

  uint16_t rd_ptr = idx2ptr(f->depth, rd_idx);
 8003a0e:	68fb      	ldr	r3, [r7, #12]
 8003a10:	889b      	ldrh	r3, [r3, #4]
 8003a12:	827b      	strh	r3, [r7, #18]
 8003a14:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8003a16:	823b      	strh	r3, [r7, #16]
  while ( idx >= depth ) idx -= depth;
 8003a18:	e003      	b.n	8003a22 <_tu_fifo_peek_n+0xb6>
 8003a1a:	8a3a      	ldrh	r2, [r7, #16]
 8003a1c:	8a7b      	ldrh	r3, [r7, #18]
 8003a1e:	1ad3      	subs	r3, r2, r3
 8003a20:	823b      	strh	r3, [r7, #16]
 8003a22:	8a7a      	ldrh	r2, [r7, #18]
 8003a24:	8a3b      	ldrh	r3, [r7, #16]
 8003a26:	429a      	cmp	r2, r3
 8003a28:	d9f7      	bls.n	8003a1a <_tu_fifo_peek_n+0xae>
  return idx;
 8003a2a:	8a3b      	ldrh	r3, [r7, #16]
  uint16_t rd_ptr = idx2ptr(f->depth, rd_idx);
 8003a2c:	84bb      	strh	r3, [r7, #36]	; 0x24

  // Peek data
  _ff_pull_n(f, p_buffer, n, rd_ptr, copy_mode);
 8003a2e:	8cb9      	ldrh	r1, [r7, #36]	; 0x24
 8003a30:	88fa      	ldrh	r2, [r7, #6]
 8003a32:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8003a36:	9300      	str	r3, [sp, #0]
 8003a38:	460b      	mov	r3, r1
 8003a3a:	68b9      	ldr	r1, [r7, #8]
 8003a3c:	68f8      	ldr	r0, [r7, #12]
 8003a3e:	f7ff fe29 	bl	8003694 <_ff_pull_n>

  return n;
 8003a42:	88fb      	ldrh	r3, [r7, #6]
}
 8003a44:	4618      	mov	r0, r3
 8003a46:	3728      	adds	r7, #40	; 0x28
 8003a48:	46bd      	mov	sp, r7
 8003a4a:	bd80      	pop	{r7, pc}

08003a4c <_tu_fifo_write_n>:

static uint16_t _tu_fifo_write_n(tu_fifo_t* f, const void * data, uint16_t n, tu_fifo_copy_mode_t copy_mode)
{
 8003a4c:	b580      	push	{r7, lr}
 8003a4e:	b092      	sub	sp, #72	; 0x48
 8003a50:	af02      	add	r7, sp, #8
 8003a52:	60f8      	str	r0, [r7, #12]
 8003a54:	60b9      	str	r1, [r7, #8]
 8003a56:	4611      	mov	r1, r2
 8003a58:	461a      	mov	r2, r3
 8003a5a:	460b      	mov	r3, r1
 8003a5c:	80fb      	strh	r3, [r7, #6]
 8003a5e:	4613      	mov	r3, r2
 8003a60:	717b      	strb	r3, [r7, #5]
  if ( n == 0 ) return 0;
 8003a62:	88fb      	ldrh	r3, [r7, #6]
 8003a64:	2b00      	cmp	r3, #0
 8003a66:	d101      	bne.n	8003a6c <_tu_fifo_write_n+0x20>
 8003a68:	2300      	movs	r3, #0
 8003a6a:	e0bc      	b.n	8003be6 <_tu_fifo_write_n+0x19a>

  _ff_lock(f->mutex_wr);

  uint16_t wr_idx = f->wr_idx;
 8003a6c:	68fb      	ldr	r3, [r7, #12]
 8003a6e:	891b      	ldrh	r3, [r3, #8]
 8003a70:	87fb      	strh	r3, [r7, #62]	; 0x3e
  uint16_t rd_idx = f->rd_idx;
 8003a72:	68fb      	ldr	r3, [r7, #12]
 8003a74:	895b      	ldrh	r3, [r3, #10]
 8003a76:	86fb      	strh	r3, [r7, #54]	; 0x36

  uint8_t const* buf8 = (uint8_t const*) data;
 8003a78:	68bb      	ldr	r3, [r7, #8]
 8003a7a:	63bb      	str	r3, [r7, #56]	; 0x38

  TU_LOG(TU_FIFO_DBG, "rd = %3u, wr = %3u, count = %3u, remain = %3u, n = %3u:  ",
                       rd_idx, wr_idx, _ff_count(f->depth, wr_idx, rd_idx), _ff_remaining(f->depth, wr_idx, rd_idx), n);

  if ( !f->overwritable )
 8003a7c:	68fb      	ldr	r3, [r7, #12]
 8003a7e:	79db      	ldrb	r3, [r3, #7]
 8003a80:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 8003a84:	b2db      	uxtb	r3, r3
 8003a86:	f083 0301 	eor.w	r3, r3, #1
 8003a8a:	b2db      	uxtb	r3, r3
 8003a8c:	2b00      	cmp	r3, #0
 8003a8e:	d036      	beq.n	8003afe <_tu_fifo_write_n+0xb2>
  {
    // limit up to full
    uint16_t const remain = _ff_remaining(f->depth, wr_idx, rd_idx);
 8003a90:	68fb      	ldr	r3, [r7, #12]
 8003a92:	889b      	ldrh	r3, [r3, #4]
 8003a94:	857b      	strh	r3, [r7, #42]	; 0x2a
 8003a96:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8003a98:	853b      	strh	r3, [r7, #40]	; 0x28
 8003a9a:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8003a9c:	84fb      	strh	r3, [r7, #38]	; 0x26
 8003a9e:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8003aa0:	84bb      	strh	r3, [r7, #36]	; 0x24
 8003aa2:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8003aa4:	847b      	strh	r3, [r7, #34]	; 0x22
 8003aa6:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8003aa8:	843b      	strh	r3, [r7, #32]
  if (wr_idx >= rd_idx)
 8003aaa:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8003aac:	8c3b      	ldrh	r3, [r7, #32]
 8003aae:	429a      	cmp	r2, r3
 8003ab0:	d304      	bcc.n	8003abc <_tu_fifo_write_n+0x70>
    return (uint16_t) (wr_idx - rd_idx);
 8003ab2:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8003ab4:	8c3b      	ldrh	r3, [r7, #32]
 8003ab6:	1ad3      	subs	r3, r2, r3
 8003ab8:	b29b      	uxth	r3, r3
 8003aba:	e008      	b.n	8003ace <_tu_fifo_write_n+0x82>
    return (uint16_t) (2*depth - (rd_idx - wr_idx));
 8003abc:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8003abe:	005b      	lsls	r3, r3, #1
 8003ac0:	b29a      	uxth	r2, r3
 8003ac2:	8c79      	ldrh	r1, [r7, #34]	; 0x22
 8003ac4:	8c3b      	ldrh	r3, [r7, #32]
 8003ac6:	1acb      	subs	r3, r1, r3
 8003ac8:	b29b      	uxth	r3, r3
 8003aca:	4413      	add	r3, r2
 8003acc:	b29b      	uxth	r3, r3
  uint16_t const count = _ff_count(depth, wr_idx, rd_idx);
 8003ace:	83fb      	strh	r3, [r7, #30]
  return (depth > count) ? (depth - count) : 0;
 8003ad0:	8d7a      	ldrh	r2, [r7, #42]	; 0x2a
 8003ad2:	8bfb      	ldrh	r3, [r7, #30]
 8003ad4:	429a      	cmp	r2, r3
 8003ad6:	d904      	bls.n	8003ae2 <_tu_fifo_write_n+0x96>
 8003ad8:	8d7a      	ldrh	r2, [r7, #42]	; 0x2a
 8003ada:	8bfb      	ldrh	r3, [r7, #30]
 8003adc:	1ad3      	subs	r3, r2, r3
 8003ade:	b29b      	uxth	r3, r3
 8003ae0:	e000      	b.n	8003ae4 <_tu_fifo_write_n+0x98>
 8003ae2:	2300      	movs	r3, #0
    uint16_t const remain = _ff_remaining(f->depth, wr_idx, rd_idx);
 8003ae4:	867b      	strh	r3, [r7, #50]	; 0x32
 8003ae6:	88fb      	ldrh	r3, [r7, #6]
 8003ae8:	85fb      	strh	r3, [r7, #46]	; 0x2e
 8003aea:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 8003aec:	85bb      	strh	r3, [r7, #44]	; 0x2c
 8003aee:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8003af0:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8003af2:	4293      	cmp	r3, r2
 8003af4:	bf28      	it	cs
 8003af6:	4613      	movcs	r3, r2
 8003af8:	b29b      	uxth	r3, r3
    n = tu_min16(n, remain);
 8003afa:	80fb      	strh	r3, [r7, #6]
 8003afc:	e04b      	b.n	8003b96 <_tu_fifo_write_n+0x14a>
  {
    // In over-writable mode, fifo_write() is allowed even when fifo is full. In such case,
    // oldest data in fifo i.e at read pointer data will be overwritten
    // Note: we can modify read buffer contents but we must not modify the read index itself within a write function!
    // Since it would end up in a race condition with read functions!
    if ( n >= f->depth )
 8003afe:	68fb      	ldr	r3, [r7, #12]
 8003b00:	889b      	ldrh	r3, [r3, #4]
 8003b02:	88fa      	ldrh	r2, [r7, #6]
 8003b04:	429a      	cmp	r2, r3
 8003b06:	d317      	bcc.n	8003b38 <_tu_fifo_write_n+0xec>
    {
      // Only copy last part
      if ( copy_mode == TU_FIFO_COPY_INC )
 8003b08:	797b      	ldrb	r3, [r7, #5]
 8003b0a:	2b00      	cmp	r3, #0
 8003b0c:	d10e      	bne.n	8003b2c <_tu_fifo_write_n+0xe0>
      {
        buf8 += (n - f->depth) * f->item_size;
 8003b0e:	88fb      	ldrh	r3, [r7, #6]
 8003b10:	68fa      	ldr	r2, [r7, #12]
 8003b12:	8892      	ldrh	r2, [r2, #4]
 8003b14:	1a9b      	subs	r3, r3, r2
 8003b16:	68fa      	ldr	r2, [r7, #12]
 8003b18:	88d2      	ldrh	r2, [r2, #6]
 8003b1a:	f3c2 020e 	ubfx	r2, r2, #0, #15
 8003b1e:	b292      	uxth	r2, r2
 8003b20:	fb02 f303 	mul.w	r3, r2, r3
 8003b24:	461a      	mov	r2, r3
 8003b26:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003b28:	4413      	add	r3, r2
 8003b2a:	63bb      	str	r3, [r7, #56]	; 0x38
      {
        // TODO should read from hw fifo to discard data, however reading an odd number could
        // accidentally discard data.
      }

      n = f->depth;
 8003b2c:	68fb      	ldr	r3, [r7, #12]
 8003b2e:	889b      	ldrh	r3, [r3, #4]
 8003b30:	80fb      	strh	r3, [r7, #6]

      // We start writing at the read pointer's position since we fill the whole buffer
      wr_idx = rd_idx;
 8003b32:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8003b34:	87fb      	strh	r3, [r7, #62]	; 0x3e
 8003b36:	e02e      	b.n	8003b96 <_tu_fifo_write_n+0x14a>
    }
    else
    {
      uint16_t const overflowable_count = _ff_count(f->depth, wr_idx, rd_idx);
 8003b38:	68fb      	ldr	r3, [r7, #12]
 8003b3a:	889b      	ldrh	r3, [r3, #4]
 8003b3c:	83bb      	strh	r3, [r7, #28]
 8003b3e:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8003b40:	837b      	strh	r3, [r7, #26]
 8003b42:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8003b44:	833b      	strh	r3, [r7, #24]
  if (wr_idx >= rd_idx)
 8003b46:	8b7a      	ldrh	r2, [r7, #26]
 8003b48:	8b3b      	ldrh	r3, [r7, #24]
 8003b4a:	429a      	cmp	r2, r3
 8003b4c:	d304      	bcc.n	8003b58 <_tu_fifo_write_n+0x10c>
    return (uint16_t) (wr_idx - rd_idx);
 8003b4e:	8b7a      	ldrh	r2, [r7, #26]
 8003b50:	8b3b      	ldrh	r3, [r7, #24]
 8003b52:	1ad3      	subs	r3, r2, r3
 8003b54:	b29b      	uxth	r3, r3
 8003b56:	e008      	b.n	8003b6a <_tu_fifo_write_n+0x11e>
    return (uint16_t) (2*depth - (rd_idx - wr_idx));
 8003b58:	8bbb      	ldrh	r3, [r7, #28]
 8003b5a:	005b      	lsls	r3, r3, #1
 8003b5c:	b29a      	uxth	r2, r3
 8003b5e:	8b79      	ldrh	r1, [r7, #26]
 8003b60:	8b3b      	ldrh	r3, [r7, #24]
 8003b62:	1acb      	subs	r3, r1, r3
 8003b64:	b29b      	uxth	r3, r3
 8003b66:	4413      	add	r3, r2
 8003b68:	b29b      	uxth	r3, r3
      uint16_t const overflowable_count = _ff_count(f->depth, wr_idx, rd_idx);
 8003b6a:	86bb      	strh	r3, [r7, #52]	; 0x34
      if (overflowable_count + n >= 2*f->depth)
 8003b6c:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8003b6e:	88fb      	ldrh	r3, [r7, #6]
 8003b70:	441a      	add	r2, r3
 8003b72:	68fb      	ldr	r3, [r7, #12]
 8003b74:	889b      	ldrh	r3, [r3, #4]
 8003b76:	005b      	lsls	r3, r3, #1
 8003b78:	429a      	cmp	r2, r3
 8003b7a:	db0c      	blt.n	8003b96 <_tu_fifo_write_n+0x14a>
      {
        // Double overflowed
        // Index is bigger than the allowed range [0,2*depth)
        // re-position write index to have a full fifo after pushed
        wr_idx = advance_index(f->depth, rd_idx, f->depth - n);
 8003b7c:	68fb      	ldr	r3, [r7, #12]
 8003b7e:	8898      	ldrh	r0, [r3, #4]
 8003b80:	68fb      	ldr	r3, [r7, #12]
 8003b82:	889a      	ldrh	r2, [r3, #4]
 8003b84:	88fb      	ldrh	r3, [r7, #6]
 8003b86:	1ad3      	subs	r3, r2, r3
 8003b88:	b29a      	uxth	r2, r3
 8003b8a:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8003b8c:	4619      	mov	r1, r3
 8003b8e:	f7ff fe61 	bl	8003854 <advance_index>
 8003b92:	4603      	mov	r3, r0
 8003b94:	87fb      	strh	r3, [r7, #62]	; 0x3e
        // we will correct (re-position) read index later on in fifo_read() function
      }
    }
  }

  if (n)
 8003b96:	88fb      	ldrh	r3, [r7, #6]
 8003b98:	2b00      	cmp	r3, #0
 8003b9a:	d023      	beq.n	8003be4 <_tu_fifo_write_n+0x198>
  {
    uint16_t wr_ptr = idx2ptr(f->depth, wr_idx);
 8003b9c:	68fb      	ldr	r3, [r7, #12]
 8003b9e:	889b      	ldrh	r3, [r3, #4]
 8003ba0:	82fb      	strh	r3, [r7, #22]
 8003ba2:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8003ba4:	82bb      	strh	r3, [r7, #20]
  while ( idx >= depth ) idx -= depth;
 8003ba6:	e003      	b.n	8003bb0 <_tu_fifo_write_n+0x164>
 8003ba8:	8aba      	ldrh	r2, [r7, #20]
 8003baa:	8afb      	ldrh	r3, [r7, #22]
 8003bac:	1ad3      	subs	r3, r2, r3
 8003bae:	82bb      	strh	r3, [r7, #20]
 8003bb0:	8afa      	ldrh	r2, [r7, #22]
 8003bb2:	8abb      	ldrh	r3, [r7, #20]
 8003bb4:	429a      	cmp	r2, r3
 8003bb6:	d9f7      	bls.n	8003ba8 <_tu_fifo_write_n+0x15c>
  return idx;
 8003bb8:	8abb      	ldrh	r3, [r7, #20]
    uint16_t wr_ptr = idx2ptr(f->depth, wr_idx);
 8003bba:	863b      	strh	r3, [r7, #48]	; 0x30

    TU_LOG(TU_FIFO_DBG, "actual_n = %u, wr_ptr = %u", n, wr_ptr);

    // Write data
    _ff_push_n(f, buf8, n, wr_ptr, copy_mode);
 8003bbc:	8e39      	ldrh	r1, [r7, #48]	; 0x30
 8003bbe:	88fa      	ldrh	r2, [r7, #6]
 8003bc0:	797b      	ldrb	r3, [r7, #5]
 8003bc2:	9300      	str	r3, [sp, #0]
 8003bc4:	460b      	mov	r3, r1
 8003bc6:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8003bc8:	68f8      	ldr	r0, [r7, #12]
 8003bca:	f7ff fc66 	bl	800349a <_ff_push_n>

    // Advance index
    f->wr_idx = advance_index(f->depth, wr_idx, n);
 8003bce:	68fb      	ldr	r3, [r7, #12]
 8003bd0:	889b      	ldrh	r3, [r3, #4]
 8003bd2:	88fa      	ldrh	r2, [r7, #6]
 8003bd4:	8ff9      	ldrh	r1, [r7, #62]	; 0x3e
 8003bd6:	4618      	mov	r0, r3
 8003bd8:	f7ff fe3c 	bl	8003854 <advance_index>
 8003bdc:	4603      	mov	r3, r0
 8003bde:	461a      	mov	r2, r3
 8003be0:	68fb      	ldr	r3, [r7, #12]
 8003be2:	811a      	strh	r2, [r3, #8]
    TU_LOG(TU_FIFO_DBG, "\tnew_wr = %u\r\n", f->wr_idx);
  }

  _ff_unlock(f->mutex_wr);

  return n;
 8003be4:	88fb      	ldrh	r3, [r7, #6]
}
 8003be6:	4618      	mov	r0, r3
 8003be8:	3740      	adds	r7, #64	; 0x40
 8003bea:	46bd      	mov	sp, r7
 8003bec:	bd80      	pop	{r7, pc}

08003bee <_tu_fifo_read_n>:

static uint16_t _tu_fifo_read_n(tu_fifo_t* f, void * buffer, uint16_t n, tu_fifo_copy_mode_t copy_mode)
{
 8003bee:	b580      	push	{r7, lr}
 8003bf0:	b086      	sub	sp, #24
 8003bf2:	af02      	add	r7, sp, #8
 8003bf4:	60f8      	str	r0, [r7, #12]
 8003bf6:	60b9      	str	r1, [r7, #8]
 8003bf8:	4611      	mov	r1, r2
 8003bfa:	461a      	mov	r2, r3
 8003bfc:	460b      	mov	r3, r1
 8003bfe:	80fb      	strh	r3, [r7, #6]
 8003c00:	4613      	mov	r3, r2
 8003c02:	717b      	strb	r3, [r7, #5]
  _ff_lock(f->mutex_rd);

  // Peek the data
  // f->rd_idx might get modified in case of an overflow so we can not use a local variable
  n = _tu_fifo_peek_n(f, buffer, n, f->wr_idx, f->rd_idx, copy_mode);
 8003c04:	68fb      	ldr	r3, [r7, #12]
 8003c06:	891b      	ldrh	r3, [r3, #8]
 8003c08:	b298      	uxth	r0, r3
 8003c0a:	68fb      	ldr	r3, [r7, #12]
 8003c0c:	895b      	ldrh	r3, [r3, #10]
 8003c0e:	b29b      	uxth	r3, r3
 8003c10:	88f9      	ldrh	r1, [r7, #6]
 8003c12:	797a      	ldrb	r2, [r7, #5]
 8003c14:	9201      	str	r2, [sp, #4]
 8003c16:	9300      	str	r3, [sp, #0]
 8003c18:	4603      	mov	r3, r0
 8003c1a:	460a      	mov	r2, r1
 8003c1c:	68b9      	ldr	r1, [r7, #8]
 8003c1e:	68f8      	ldr	r0, [r7, #12]
 8003c20:	f7ff fea4 	bl	800396c <_tu_fifo_peek_n>
 8003c24:	4603      	mov	r3, r0
 8003c26:	80fb      	strh	r3, [r7, #6]

  // Advance read pointer
  f->rd_idx = advance_index(f->depth, f->rd_idx, n);
 8003c28:	68fb      	ldr	r3, [r7, #12]
 8003c2a:	8898      	ldrh	r0, [r3, #4]
 8003c2c:	68fb      	ldr	r3, [r7, #12]
 8003c2e:	895b      	ldrh	r3, [r3, #10]
 8003c30:	b29b      	uxth	r3, r3
 8003c32:	88fa      	ldrh	r2, [r7, #6]
 8003c34:	4619      	mov	r1, r3
 8003c36:	f7ff fe0d 	bl	8003854 <advance_index>
 8003c3a:	4603      	mov	r3, r0
 8003c3c:	461a      	mov	r2, r3
 8003c3e:	68fb      	ldr	r3, [r7, #12]
 8003c40:	815a      	strh	r2, [r3, #10]

  _ff_unlock(f->mutex_rd);
  return n;
 8003c42:	88fb      	ldrh	r3, [r7, #6]
}
 8003c44:	4618      	mov	r0, r3
 8003c46:	3710      	adds	r7, #16
 8003c48:	46bd      	mov	sp, r7
 8003c4a:	bd80      	pop	{r7, pc}

08003c4c <tu_fifo_count>:

    @returns Number of items in FIFO
 */
/******************************************************************************/
uint16_t tu_fifo_count(tu_fifo_t* f)
{
 8003c4c:	b480      	push	{r7}
 8003c4e:	b087      	sub	sp, #28
 8003c50:	af00      	add	r7, sp, #0
 8003c52:	6078      	str	r0, [r7, #4]
  return tu_min16(_ff_count(f->depth, f->wr_idx, f->rd_idx), f->depth);
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	8899      	ldrh	r1, [r3, #4]
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	891b      	ldrh	r3, [r3, #8]
 8003c5c:	b29a      	uxth	r2, r3
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	895b      	ldrh	r3, [r3, #10]
 8003c62:	b29b      	uxth	r3, r3
 8003c64:	8279      	strh	r1, [r7, #18]
 8003c66:	823a      	strh	r2, [r7, #16]
 8003c68:	81fb      	strh	r3, [r7, #14]
  if (wr_idx >= rd_idx)
 8003c6a:	8a3a      	ldrh	r2, [r7, #16]
 8003c6c:	89fb      	ldrh	r3, [r7, #14]
 8003c6e:	429a      	cmp	r2, r3
 8003c70:	d304      	bcc.n	8003c7c <tu_fifo_count+0x30>
    return (uint16_t) (wr_idx - rd_idx);
 8003c72:	8a3a      	ldrh	r2, [r7, #16]
 8003c74:	89fb      	ldrh	r3, [r7, #14]
 8003c76:	1ad3      	subs	r3, r2, r3
 8003c78:	b29b      	uxth	r3, r3
 8003c7a:	e008      	b.n	8003c8e <tu_fifo_count+0x42>
    return (uint16_t) (2*depth - (rd_idx - wr_idx));
 8003c7c:	8a7b      	ldrh	r3, [r7, #18]
 8003c7e:	005b      	lsls	r3, r3, #1
 8003c80:	b29a      	uxth	r2, r3
 8003c82:	8a39      	ldrh	r1, [r7, #16]
 8003c84:	89fb      	ldrh	r3, [r7, #14]
 8003c86:	1acb      	subs	r3, r1, r3
 8003c88:	b29b      	uxth	r3, r3
 8003c8a:	4413      	add	r3, r2
 8003c8c:	b29b      	uxth	r3, r3
  return tu_min16(_ff_count(f->depth, f->wr_idx, f->rd_idx), f->depth);
 8003c8e:	687a      	ldr	r2, [r7, #4]
 8003c90:	8892      	ldrh	r2, [r2, #4]
 8003c92:	82fb      	strh	r3, [r7, #22]
 8003c94:	4613      	mov	r3, r2
 8003c96:	82bb      	strh	r3, [r7, #20]
 8003c98:	8afa      	ldrh	r2, [r7, #22]
 8003c9a:	8abb      	ldrh	r3, [r7, #20]
 8003c9c:	4293      	cmp	r3, r2
 8003c9e:	bf28      	it	cs
 8003ca0:	4613      	movcs	r3, r2
 8003ca2:	b29b      	uxth	r3, r3
}
 8003ca4:	4618      	mov	r0, r3
 8003ca6:	371c      	adds	r7, #28
 8003ca8:	46bd      	mov	sp, r7
 8003caa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cae:	4770      	bx	lr

08003cb0 <tu_fifo_empty>:

    @returns Number of items in FIFO
 */
/******************************************************************************/
bool tu_fifo_empty(tu_fifo_t* f)
{
 8003cb0:	b480      	push	{r7}
 8003cb2:	b083      	sub	sp, #12
 8003cb4:	af00      	add	r7, sp, #0
 8003cb6:	6078      	str	r0, [r7, #4]
  return f->wr_idx == f->rd_idx;
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	891b      	ldrh	r3, [r3, #8]
 8003cbc:	b29a      	uxth	r2, r3
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	895b      	ldrh	r3, [r3, #10]
 8003cc2:	b29b      	uxth	r3, r3
 8003cc4:	429a      	cmp	r2, r3
 8003cc6:	bf0c      	ite	eq
 8003cc8:	2301      	moveq	r3, #1
 8003cca:	2300      	movne	r3, #0
 8003ccc:	b2db      	uxtb	r3, r3
}
 8003cce:	4618      	mov	r0, r3
 8003cd0:	370c      	adds	r7, #12
 8003cd2:	46bd      	mov	sp, r7
 8003cd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cd8:	4770      	bx	lr

08003cda <tu_fifo_full>:

    @returns Number of items in FIFO
 */
/******************************************************************************/
bool tu_fifo_full(tu_fifo_t* f)
{
 8003cda:	b480      	push	{r7}
 8003cdc:	b085      	sub	sp, #20
 8003cde:	af00      	add	r7, sp, #0
 8003ce0:	6078      	str	r0, [r7, #4]
  return _ff_count(f->depth, f->wr_idx, f->rd_idx) >= f->depth;
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	8899      	ldrh	r1, [r3, #4]
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	891b      	ldrh	r3, [r3, #8]
 8003cea:	b29a      	uxth	r2, r3
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	895b      	ldrh	r3, [r3, #10]
 8003cf0:	b29b      	uxth	r3, r3
 8003cf2:	81f9      	strh	r1, [r7, #14]
 8003cf4:	81ba      	strh	r2, [r7, #12]
 8003cf6:	817b      	strh	r3, [r7, #10]
  if (wr_idx >= rd_idx)
 8003cf8:	89ba      	ldrh	r2, [r7, #12]
 8003cfa:	897b      	ldrh	r3, [r7, #10]
 8003cfc:	429a      	cmp	r2, r3
 8003cfe:	d304      	bcc.n	8003d0a <tu_fifo_full+0x30>
    return (uint16_t) (wr_idx - rd_idx);
 8003d00:	89ba      	ldrh	r2, [r7, #12]
 8003d02:	897b      	ldrh	r3, [r7, #10]
 8003d04:	1ad3      	subs	r3, r2, r3
 8003d06:	b29b      	uxth	r3, r3
 8003d08:	e008      	b.n	8003d1c <tu_fifo_full+0x42>
    return (uint16_t) (2*depth - (rd_idx - wr_idx));
 8003d0a:	89fb      	ldrh	r3, [r7, #14]
 8003d0c:	005b      	lsls	r3, r3, #1
 8003d0e:	b29a      	uxth	r2, r3
 8003d10:	89b9      	ldrh	r1, [r7, #12]
 8003d12:	897b      	ldrh	r3, [r7, #10]
 8003d14:	1acb      	subs	r3, r1, r3
 8003d16:	b29b      	uxth	r3, r3
 8003d18:	4413      	add	r3, r2
 8003d1a:	b29b      	uxth	r3, r3
  return _ff_count(f->depth, f->wr_idx, f->rd_idx) >= f->depth;
 8003d1c:	687a      	ldr	r2, [r7, #4]
 8003d1e:	8892      	ldrh	r2, [r2, #4]
 8003d20:	4293      	cmp	r3, r2
 8003d22:	bf2c      	ite	cs
 8003d24:	2301      	movcs	r3, #1
 8003d26:	2300      	movcc	r3, #0
 8003d28:	b2db      	uxtb	r3, r3
}
 8003d2a:	4618      	mov	r0, r3
 8003d2c:	3714      	adds	r7, #20
 8003d2e:	46bd      	mov	sp, r7
 8003d30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d34:	4770      	bx	lr

08003d36 <tu_fifo_remaining>:

    @returns Number of items in FIFO
 */
/******************************************************************************/
uint16_t tu_fifo_remaining(tu_fifo_t* f)
{
 8003d36:	b480      	push	{r7}
 8003d38:	b087      	sub	sp, #28
 8003d3a:	af00      	add	r7, sp, #0
 8003d3c:	6078      	str	r0, [r7, #4]
  return _ff_remaining(f->depth, f->wr_idx, f->rd_idx);
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	8899      	ldrh	r1, [r3, #4]
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	891b      	ldrh	r3, [r3, #8]
 8003d46:	b29a      	uxth	r2, r3
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	895b      	ldrh	r3, [r3, #10]
 8003d4c:	b29b      	uxth	r3, r3
 8003d4e:	82f9      	strh	r1, [r7, #22]
 8003d50:	82ba      	strh	r2, [r7, #20]
 8003d52:	827b      	strh	r3, [r7, #18]
 8003d54:	8afb      	ldrh	r3, [r7, #22]
 8003d56:	823b      	strh	r3, [r7, #16]
 8003d58:	8abb      	ldrh	r3, [r7, #20]
 8003d5a:	81fb      	strh	r3, [r7, #14]
 8003d5c:	8a7b      	ldrh	r3, [r7, #18]
 8003d5e:	81bb      	strh	r3, [r7, #12]
  if (wr_idx >= rd_idx)
 8003d60:	89fa      	ldrh	r2, [r7, #14]
 8003d62:	89bb      	ldrh	r3, [r7, #12]
 8003d64:	429a      	cmp	r2, r3
 8003d66:	d304      	bcc.n	8003d72 <tu_fifo_remaining+0x3c>
    return (uint16_t) (wr_idx - rd_idx);
 8003d68:	89fa      	ldrh	r2, [r7, #14]
 8003d6a:	89bb      	ldrh	r3, [r7, #12]
 8003d6c:	1ad3      	subs	r3, r2, r3
 8003d6e:	b29b      	uxth	r3, r3
 8003d70:	e008      	b.n	8003d84 <tu_fifo_remaining+0x4e>
    return (uint16_t) (2*depth - (rd_idx - wr_idx));
 8003d72:	8a3b      	ldrh	r3, [r7, #16]
 8003d74:	005b      	lsls	r3, r3, #1
 8003d76:	b29a      	uxth	r2, r3
 8003d78:	89f9      	ldrh	r1, [r7, #14]
 8003d7a:	89bb      	ldrh	r3, [r7, #12]
 8003d7c:	1acb      	subs	r3, r1, r3
 8003d7e:	b29b      	uxth	r3, r3
 8003d80:	4413      	add	r3, r2
 8003d82:	b29b      	uxth	r3, r3
  uint16_t const count = _ff_count(depth, wr_idx, rd_idx);
 8003d84:	817b      	strh	r3, [r7, #10]
  return (depth > count) ? (depth - count) : 0;
 8003d86:	8afa      	ldrh	r2, [r7, #22]
 8003d88:	897b      	ldrh	r3, [r7, #10]
 8003d8a:	429a      	cmp	r2, r3
 8003d8c:	d904      	bls.n	8003d98 <tu_fifo_remaining+0x62>
 8003d8e:	8afa      	ldrh	r2, [r7, #22]
 8003d90:	897b      	ldrh	r3, [r7, #10]
 8003d92:	1ad3      	subs	r3, r2, r3
 8003d94:	b29b      	uxth	r3, r3
 8003d96:	e000      	b.n	8003d9a <tu_fifo_remaining+0x64>
 8003d98:	2300      	movs	r3, #0
}
 8003d9a:	4618      	mov	r0, r3
 8003d9c:	371c      	adds	r7, #28
 8003d9e:	46bd      	mov	sp, r7
 8003da0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003da4:	4770      	bx	lr

08003da6 <tu_fifo_read>:

    @returns TRUE if the queue is not empty
 */
/******************************************************************************/
bool tu_fifo_read(tu_fifo_t* f, void * buffer)
{
 8003da6:	b580      	push	{r7, lr}
 8003da8:	b084      	sub	sp, #16
 8003daa:	af00      	add	r7, sp, #0
 8003dac:	6078      	str	r0, [r7, #4]
 8003dae:	6039      	str	r1, [r7, #0]
  _ff_lock(f->mutex_rd);

  // Peek the data
  // f->rd_idx might get modified in case of an overflow so we can not use a local variable
  bool ret = _tu_fifo_peek(f, buffer, f->wr_idx, f->rd_idx);
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	891b      	ldrh	r3, [r3, #8]
 8003db4:	b29a      	uxth	r2, r3
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	895b      	ldrh	r3, [r3, #10]
 8003dba:	b29b      	uxth	r3, r3
 8003dbc:	6839      	ldr	r1, [r7, #0]
 8003dbe:	6878      	ldr	r0, [r7, #4]
 8003dc0:	f7ff fd6e 	bl	80038a0 <_tu_fifo_peek>
 8003dc4:	4603      	mov	r3, r0
 8003dc6:	73fb      	strb	r3, [r7, #15]

  // Advance pointer
  f->rd_idx = advance_index(f->depth, f->rd_idx, ret);
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	8898      	ldrh	r0, [r3, #4]
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	895b      	ldrh	r3, [r3, #10]
 8003dd0:	b29b      	uxth	r3, r3
 8003dd2:	7bfa      	ldrb	r2, [r7, #15]
 8003dd4:	b292      	uxth	r2, r2
 8003dd6:	4619      	mov	r1, r3
 8003dd8:	f7ff fd3c 	bl	8003854 <advance_index>
 8003ddc:	4603      	mov	r3, r0
 8003dde:	461a      	mov	r2, r3
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	815a      	strh	r2, [r3, #10]

  _ff_unlock(f->mutex_rd);
  return ret;
 8003de4:	7bfb      	ldrb	r3, [r7, #15]
}
 8003de6:	4618      	mov	r0, r3
 8003de8:	3710      	adds	r7, #16
 8003dea:	46bd      	mov	sp, r7
 8003dec:	bd80      	pop	{r7, pc}

08003dee <tu_fifo_read_n>:

    @returns number of items read from the FIFO
 */
/******************************************************************************/
uint16_t tu_fifo_read_n(tu_fifo_t* f, void * buffer, uint16_t n)
{
 8003dee:	b580      	push	{r7, lr}
 8003df0:	b084      	sub	sp, #16
 8003df2:	af00      	add	r7, sp, #0
 8003df4:	60f8      	str	r0, [r7, #12]
 8003df6:	60b9      	str	r1, [r7, #8]
 8003df8:	4613      	mov	r3, r2
 8003dfa:	80fb      	strh	r3, [r7, #6]
  return _tu_fifo_read_n(f, buffer, n, TU_FIFO_COPY_INC);
 8003dfc:	88fa      	ldrh	r2, [r7, #6]
 8003dfe:	2300      	movs	r3, #0
 8003e00:	68b9      	ldr	r1, [r7, #8]
 8003e02:	68f8      	ldr	r0, [r7, #12]
 8003e04:	f7ff fef3 	bl	8003bee <_tu_fifo_read_n>
 8003e08:	4603      	mov	r3, r0
}
 8003e0a:	4618      	mov	r0, r3
 8003e0c:	3710      	adds	r7, #16
 8003e0e:	46bd      	mov	sp, r7
 8003e10:	bd80      	pop	{r7, pc}

08003e12 <tu_fifo_read_n_const_addr_full_words>:

uint16_t tu_fifo_read_n_const_addr_full_words(tu_fifo_t* f, void * buffer, uint16_t n)
{
 8003e12:	b580      	push	{r7, lr}
 8003e14:	b084      	sub	sp, #16
 8003e16:	af00      	add	r7, sp, #0
 8003e18:	60f8      	str	r0, [r7, #12]
 8003e1a:	60b9      	str	r1, [r7, #8]
 8003e1c:	4613      	mov	r3, r2
 8003e1e:	80fb      	strh	r3, [r7, #6]
  return _tu_fifo_read_n(f, buffer, n, TU_FIFO_COPY_CST_FULL_WORDS);
 8003e20:	88fa      	ldrh	r2, [r7, #6]
 8003e22:	2301      	movs	r3, #1
 8003e24:	68b9      	ldr	r1, [r7, #8]
 8003e26:	68f8      	ldr	r0, [r7, #12]
 8003e28:	f7ff fee1 	bl	8003bee <_tu_fifo_read_n>
 8003e2c:	4603      	mov	r3, r0
}
 8003e2e:	4618      	mov	r0, r3
 8003e30:	3710      	adds	r7, #16
 8003e32:	46bd      	mov	sp, r7
 8003e34:	bd80      	pop	{r7, pc}

08003e36 <tu_fifo_write>:
    @returns TRUE if the data was written to the FIFO (overwrittable
             FIFO will always return TRUE)
 */
/******************************************************************************/
bool tu_fifo_write(tu_fifo_t* f, const void * data)
{
 8003e36:	b580      	push	{r7, lr}
 8003e38:	b086      	sub	sp, #24
 8003e3a:	af00      	add	r7, sp, #0
 8003e3c:	6078      	str	r0, [r7, #4]
 8003e3e:	6039      	str	r1, [r7, #0]
  _ff_lock(f->mutex_wr);

  bool ret;
  uint16_t const wr_idx = f->wr_idx;
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	891b      	ldrh	r3, [r3, #8]
 8003e44:	82bb      	strh	r3, [r7, #20]

  if ( tu_fifo_full(f) && !f->overwritable )
 8003e46:	6878      	ldr	r0, [r7, #4]
 8003e48:	f7ff ff47 	bl	8003cda <tu_fifo_full>
 8003e4c:	4603      	mov	r3, r0
 8003e4e:	2b00      	cmp	r3, #0
 8003e50:	d00c      	beq.n	8003e6c <tu_fifo_write+0x36>
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	79db      	ldrb	r3, [r3, #7]
 8003e56:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 8003e5a:	b2db      	uxtb	r3, r3
 8003e5c:	f083 0301 	eor.w	r3, r3, #1
 8003e60:	b2db      	uxtb	r3, r3
 8003e62:	2b00      	cmp	r3, #0
 8003e64:	d002      	beq.n	8003e6c <tu_fifo_write+0x36>
  {
    ret = false;
 8003e66:	2300      	movs	r3, #0
 8003e68:	75fb      	strb	r3, [r7, #23]
 8003e6a:	e022      	b.n	8003eb2 <tu_fifo_write+0x7c>
  }else
  {
    uint16_t wr_ptr = idx2ptr(f->depth, wr_idx);
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	889b      	ldrh	r3, [r3, #4]
 8003e70:	823b      	strh	r3, [r7, #16]
 8003e72:	8abb      	ldrh	r3, [r7, #20]
 8003e74:	81fb      	strh	r3, [r7, #14]
  while ( idx >= depth ) idx -= depth;
 8003e76:	e003      	b.n	8003e80 <tu_fifo_write+0x4a>
 8003e78:	89fa      	ldrh	r2, [r7, #14]
 8003e7a:	8a3b      	ldrh	r3, [r7, #16]
 8003e7c:	1ad3      	subs	r3, r2, r3
 8003e7e:	81fb      	strh	r3, [r7, #14]
 8003e80:	8a3a      	ldrh	r2, [r7, #16]
 8003e82:	89fb      	ldrh	r3, [r7, #14]
 8003e84:	429a      	cmp	r2, r3
 8003e86:	d9f7      	bls.n	8003e78 <tu_fifo_write+0x42>
  return idx;
 8003e88:	89fb      	ldrh	r3, [r7, #14]
    uint16_t wr_ptr = idx2ptr(f->depth, wr_idx);
 8003e8a:	827b      	strh	r3, [r7, #18]

    // Write data
    _ff_push(f, data, wr_ptr);
 8003e8c:	8a7b      	ldrh	r3, [r7, #18]
 8003e8e:	461a      	mov	r2, r3
 8003e90:	6839      	ldr	r1, [r7, #0]
 8003e92:	6878      	ldr	r0, [r7, #4]
 8003e94:	f7ff fae2 	bl	800345c <_ff_push>

    // Advance pointer
    f->wr_idx = advance_index(f->depth, wr_idx, 1);
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	889b      	ldrh	r3, [r3, #4]
 8003e9c:	8ab9      	ldrh	r1, [r7, #20]
 8003e9e:	2201      	movs	r2, #1
 8003ea0:	4618      	mov	r0, r3
 8003ea2:	f7ff fcd7 	bl	8003854 <advance_index>
 8003ea6:	4603      	mov	r3, r0
 8003ea8:	461a      	mov	r2, r3
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	811a      	strh	r2, [r3, #8]

    ret = true;
 8003eae:	2301      	movs	r3, #1
 8003eb0:	75fb      	strb	r3, [r7, #23]
  }

  _ff_unlock(f->mutex_wr);

  return ret;
 8003eb2:	7dfb      	ldrb	r3, [r7, #23]
}
 8003eb4:	4618      	mov	r0, r3
 8003eb6:	3718      	adds	r7, #24
 8003eb8:	46bd      	mov	sp, r7
 8003eba:	bd80      	pop	{r7, pc}

08003ebc <tu_fifo_write_n>:
                Number of element
    @return Number of written elements
 */
/******************************************************************************/
uint16_t tu_fifo_write_n(tu_fifo_t* f, const void * data, uint16_t n)
{
 8003ebc:	b580      	push	{r7, lr}
 8003ebe:	b084      	sub	sp, #16
 8003ec0:	af00      	add	r7, sp, #0
 8003ec2:	60f8      	str	r0, [r7, #12]
 8003ec4:	60b9      	str	r1, [r7, #8]
 8003ec6:	4613      	mov	r3, r2
 8003ec8:	80fb      	strh	r3, [r7, #6]
  return _tu_fifo_write_n(f, data, n, TU_FIFO_COPY_INC);
 8003eca:	88fa      	ldrh	r2, [r7, #6]
 8003ecc:	2300      	movs	r3, #0
 8003ece:	68b9      	ldr	r1, [r7, #8]
 8003ed0:	68f8      	ldr	r0, [r7, #12]
 8003ed2:	f7ff fdbb 	bl	8003a4c <_tu_fifo_write_n>
 8003ed6:	4603      	mov	r3, r0
}
 8003ed8:	4618      	mov	r0, r3
 8003eda:	3710      	adds	r7, #16
 8003edc:	46bd      	mov	sp, r7
 8003ede:	bd80      	pop	{r7, pc}

08003ee0 <tu_fifo_write_n_const_addr_full_words>:
                Number of element
    @return Number of written elements
 */
/******************************************************************************/
uint16_t tu_fifo_write_n_const_addr_full_words(tu_fifo_t* f, const void * data, uint16_t n)
{
 8003ee0:	b580      	push	{r7, lr}
 8003ee2:	b084      	sub	sp, #16
 8003ee4:	af00      	add	r7, sp, #0
 8003ee6:	60f8      	str	r0, [r7, #12]
 8003ee8:	60b9      	str	r1, [r7, #8]
 8003eea:	4613      	mov	r3, r2
 8003eec:	80fb      	strh	r3, [r7, #6]
  return _tu_fifo_write_n(f, data, n, TU_FIFO_COPY_CST_FULL_WORDS);
 8003eee:	88fa      	ldrh	r2, [r7, #6]
 8003ef0:	2301      	movs	r3, #1
 8003ef2:	68b9      	ldr	r1, [r7, #8]
 8003ef4:	68f8      	ldr	r0, [r7, #12]
 8003ef6:	f7ff fda9 	bl	8003a4c <_tu_fifo_write_n>
 8003efa:	4603      	mov	r3, r0
}
 8003efc:	4618      	mov	r0, r3
 8003efe:	3710      	adds	r7, #16
 8003f00:	46bd      	mov	sp, r7
 8003f02:	bd80      	pop	{r7, pc}

08003f04 <tu_fifo_clear>:
    @param[in]  f
                Pointer to the FIFO buffer to manipulate
 */
/******************************************************************************/
bool tu_fifo_clear(tu_fifo_t *f)
{
 8003f04:	b480      	push	{r7}
 8003f06:	b083      	sub	sp, #12
 8003f08:	af00      	add	r7, sp, #0
 8003f0a:	6078      	str	r0, [r7, #4]
  _ff_lock(f->mutex_wr);
  _ff_lock(f->mutex_rd);

  f->rd_idx = 0;
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	2200      	movs	r2, #0
 8003f10:	815a      	strh	r2, [r3, #10]
  f->wr_idx = 0;
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	2200      	movs	r2, #0
 8003f16:	811a      	strh	r2, [r3, #8]

  _ff_unlock(f->mutex_wr);
  _ff_unlock(f->mutex_rd);
  return true;
 8003f18:	2301      	movs	r3, #1
}
 8003f1a:	4618      	mov	r0, r3
 8003f1c:	370c      	adds	r7, #12
 8003f1e:	46bd      	mov	sp, r7
 8003f20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f24:	4770      	bx	lr

08003f26 <tu_fifo_set_overwritable>:
    @param[in]  overwritable
                Overwritable mode the fifo is set to
 */
/******************************************************************************/
bool tu_fifo_set_overwritable(tu_fifo_t *f, bool overwritable)
{
 8003f26:	b480      	push	{r7}
 8003f28:	b083      	sub	sp, #12
 8003f2a:	af00      	add	r7, sp, #0
 8003f2c:	6078      	str	r0, [r7, #4]
 8003f2e:	460b      	mov	r3, r1
 8003f30:	70fb      	strb	r3, [r7, #3]
  _ff_lock(f->mutex_wr);
  _ff_lock(f->mutex_rd);

  f->overwritable = overwritable;
 8003f32:	687a      	ldr	r2, [r7, #4]
 8003f34:	79d3      	ldrb	r3, [r2, #7]
 8003f36:	78f9      	ldrb	r1, [r7, #3]
 8003f38:	f361 13c7 	bfi	r3, r1, #7, #1
 8003f3c:	71d3      	strb	r3, [r2, #7]

  _ff_unlock(f->mutex_wr);
  _ff_unlock(f->mutex_rd);

  return true;
 8003f3e:	2301      	movs	r3, #1
}
 8003f40:	4618      	mov	r0, r3
 8003f42:	370c      	adds	r7, #12
 8003f44:	46bd      	mov	sp, r7
 8003f46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f4a:	4770      	bx	lr

08003f4c <tud_event_hook_cb>:
#endif

//--------------------------------------------------------------------+
// Callback weak stubs (called if application does not provide)
//--------------------------------------------------------------------+
TU_ATTR_WEAK void tud_event_hook_cb(uint8_t rhport, uint32_t eventid, bool in_isr) {
 8003f4c:	b480      	push	{r7}
 8003f4e:	b083      	sub	sp, #12
 8003f50:	af00      	add	r7, sp, #0
 8003f52:	4603      	mov	r3, r0
 8003f54:	6039      	str	r1, [r7, #0]
 8003f56:	71fb      	strb	r3, [r7, #7]
 8003f58:	4613      	mov	r3, r2
 8003f5a:	71bb      	strb	r3, [r7, #6]
  (void)rhport;
  (void)eventid;
  (void)in_isr;
}
 8003f5c:	bf00      	nop
 8003f5e:	370c      	adds	r7, #12
 8003f60:	46bd      	mov	sp, r7
 8003f62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f66:	4770      	bx	lr

08003f68 <tud_speed_get>:
#endif

//--------------------------------------------------------------------+
// Application API
//--------------------------------------------------------------------+
tusb_speed_t tud_speed_get(void) {
 8003f68:	b480      	push	{r7}
 8003f6a:	af00      	add	r7, sp, #0
  return (tusb_speed_t) _usbd_dev.speed;
 8003f6c:	4b03      	ldr	r3, [pc, #12]	; (8003f7c <tud_speed_get+0x14>)
 8003f6e:	789b      	ldrb	r3, [r3, #2]
}
 8003f70:	4618      	mov	r0, r3
 8003f72:	46bd      	mov	sp, r7
 8003f74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f78:	4770      	bx	lr
 8003f7a:	bf00      	nop
 8003f7c:	24001190 	.word	0x24001190

08003f80 <tud_mounted>:

bool tud_connected(void) {
  return _usbd_dev.connected;
}

bool tud_mounted(void) {
 8003f80:	b480      	push	{r7}
 8003f82:	af00      	add	r7, sp, #0
  return _usbd_dev.cfg_num ? true : false;
 8003f84:	4b06      	ldr	r3, [pc, #24]	; (8003fa0 <tud_mounted+0x20>)
 8003f86:	785b      	ldrb	r3, [r3, #1]
 8003f88:	b2db      	uxtb	r3, r3
 8003f8a:	2b00      	cmp	r3, #0
 8003f8c:	bf14      	ite	ne
 8003f8e:	2301      	movne	r3, #1
 8003f90:	2300      	moveq	r3, #0
 8003f92:	b2db      	uxtb	r3, r3
}
 8003f94:	4618      	mov	r0, r3
 8003f96:	46bd      	mov	sp, r7
 8003f98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f9c:	4770      	bx	lr
 8003f9e:	bf00      	nop
 8003fa0:	24001190 	.word	0x24001190

08003fa4 <tud_suspended>:

bool tud_suspended(void) {
 8003fa4:	b480      	push	{r7}
 8003fa6:	af00      	add	r7, sp, #0
  return _usbd_dev.suspended;
 8003fa8:	4b07      	ldr	r3, [pc, #28]	; (8003fc8 <tud_suspended+0x24>)
 8003faa:	781b      	ldrb	r3, [r3, #0]
 8003fac:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8003fb0:	b2db      	uxtb	r3, r3
 8003fb2:	2b00      	cmp	r3, #0
 8003fb4:	bf14      	ite	ne
 8003fb6:	2301      	movne	r3, #1
 8003fb8:	2300      	moveq	r3, #0
 8003fba:	b2db      	uxtb	r3, r3
}
 8003fbc:	4618      	mov	r0, r3
 8003fbe:	46bd      	mov	sp, r7
 8003fc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fc4:	4770      	bx	lr
 8003fc6:	bf00      	nop
 8003fc8:	24001190 	.word	0x24001190

08003fcc <tud_inited>:
}

//--------------------------------------------------------------------+
// USBD Task
//--------------------------------------------------------------------+
bool tud_inited(void) {
 8003fcc:	b480      	push	{r7}
 8003fce:	af00      	add	r7, sp, #0
  return _usbd_rhport != RHPORT_INVALID;
 8003fd0:	4b05      	ldr	r3, [pc, #20]	; (8003fe8 <tud_inited+0x1c>)
 8003fd2:	781b      	ldrb	r3, [r3, #0]
 8003fd4:	2bff      	cmp	r3, #255	; 0xff
 8003fd6:	bf14      	ite	ne
 8003fd8:	2301      	movne	r3, #1
 8003fda:	2300      	moveq	r3, #0
 8003fdc:	b2db      	uxtb	r3, r3
}
 8003fde:	4618      	mov	r0, r3
 8003fe0:	46bd      	mov	sp, r7
 8003fe2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fe6:	4770      	bx	lr
 8003fe8:	24000024 	.word	0x24000024

08003fec <tud_init>:

bool tud_init (uint8_t rhport)
{
 8003fec:	b580      	push	{r7, lr}
 8003fee:	b08a      	sub	sp, #40	; 0x28
 8003ff0:	af00      	add	r7, sp, #0
 8003ff2:	4603      	mov	r3, r0
 8003ff4:	71fb      	strb	r3, [r7, #7]
  // skip if already initialized
  if ( tud_inited() ) return true;
 8003ff6:	f7ff ffe9 	bl	8003fcc <tud_inited>
 8003ffa:	4603      	mov	r3, r0
 8003ffc:	2b00      	cmp	r3, #0
 8003ffe:	d001      	beq.n	8004004 <tud_init+0x18>
 8004000:	2301      	movs	r3, #1
 8004002:	e07a      	b.n	80040fa <tud_init+0x10e>
  TU_LOG_USBD("USBD init on controller %u\r\n", rhport);
  TU_LOG_INT(CFG_TUD_LOG_LEVEL, sizeof(usbd_device_t));
  TU_LOG_INT(CFG_TUD_LOG_LEVEL, sizeof(tu_fifo_t));
  TU_LOG_INT(CFG_TUD_LOG_LEVEL, sizeof(tu_edpt_stream_t));

  tu_varclr(&_usbd_dev);
 8004004:	2237      	movs	r2, #55	; 0x37
 8004006:	2100      	movs	r1, #0
 8004008:	483e      	ldr	r0, [pc, #248]	; (8004104 <tud_init+0x118>)
 800400a:	f00b ffe2 	bl	800ffd2 <memset>
 800400e:	4b3e      	ldr	r3, [pc, #248]	; (8004108 <tud_init+0x11c>)
 8004010:	617b      	str	r3, [r7, #20]
  // enable dcd/hcd interrupt
  qhdl->interrupt_set(true);
}

TU_ATTR_ALWAYS_INLINE static inline osal_queue_t osal_queue_create(osal_queue_def_t* qdef) {
  tu_fifo_clear(&qdef->ff);
 8004012:	697b      	ldr	r3, [r7, #20]
 8004014:	3304      	adds	r3, #4
 8004016:	4618      	mov	r0, r3
 8004018:	f7ff ff74 	bl	8003f04 <tu_fifo_clear>
  return (osal_queue_t) qdef;
 800401c:	697b      	ldr	r3, [r7, #20]
  _usbd_mutex = osal_mutex_create(&_ubsd_mutexdef);
  TU_ASSERT(_usbd_mutex);
#endif

  // Init device queue & task
  _usbd_q = osal_queue_create(&_usbd_qdef);
 800401e:	4a3b      	ldr	r2, [pc, #236]	; (800410c <tud_init+0x120>)
 8004020:	6013      	str	r3, [r2, #0]
  TU_ASSERT(_usbd_q);
 8004022:	4b3a      	ldr	r3, [pc, #232]	; (800410c <tud_init+0x120>)
 8004024:	681b      	ldr	r3, [r3, #0]
 8004026:	2b00      	cmp	r3, #0
 8004028:	d10a      	bne.n	8004040 <tud_init+0x54>
 800402a:	4b39      	ldr	r3, [pc, #228]	; (8004110 <tud_init+0x124>)
 800402c:	61bb      	str	r3, [r7, #24]
 800402e:	69bb      	ldr	r3, [r7, #24]
 8004030:	681b      	ldr	r3, [r3, #0]
 8004032:	f003 0301 	and.w	r3, r3, #1
 8004036:	2b00      	cmp	r3, #0
 8004038:	d000      	beq.n	800403c <tud_init+0x50>
 800403a:	be00      	bkpt	0x0000
 800403c:	2300      	movs	r3, #0
 800403e:	e05c      	b.n	80040fa <tud_init+0x10e>

  // Get application driver if available
  if ( usbd_app_driver_get_cb )
 8004040:	4b34      	ldr	r3, [pc, #208]	; (8004114 <tud_init+0x128>)
 8004042:	2b00      	cmp	r3, #0
 8004044:	d005      	beq.n	8004052 <tud_init+0x66>
  {
    _app_driver = usbd_app_driver_get_cb(&_app_driver_count);
 8004046:	4834      	ldr	r0, [pc, #208]	; (8004118 <tud_init+0x12c>)
 8004048:	f3af 8000 	nop.w
 800404c:	4603      	mov	r3, r0
 800404e:	4a33      	ldr	r2, [pc, #204]	; (800411c <tud_init+0x130>)
 8004050:	6013      	str	r3, [r2, #0]
  }

  // Init class drivers
  for (uint8_t i = 0; i < TOTAL_DRIVER_COUNT; i++)
 8004052:	2300      	movs	r3, #0
 8004054:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8004058:	e03c      	b.n	80040d4 <tud_init+0xe8>
 800405a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800405e:	74fb      	strb	r3, [r7, #19]
  usbd_class_driver_t const * driver = NULL;
 8004060:	2300      	movs	r3, #0
 8004062:	60fb      	str	r3, [r7, #12]
  if ( drvid < _app_driver_count ) {
 8004064:	4b2c      	ldr	r3, [pc, #176]	; (8004118 <tud_init+0x12c>)
 8004066:	781b      	ldrb	r3, [r3, #0]
 8004068:	7cfa      	ldrb	r2, [r7, #19]
 800406a:	429a      	cmp	r2, r3
 800406c:	d209      	bcs.n	8004082 <tud_init+0x96>
    driver = &_app_driver[drvid];
 800406e:	4b2b      	ldr	r3, [pc, #172]	; (800411c <tud_init+0x130>)
 8004070:	6819      	ldr	r1, [r3, #0]
 8004072:	7cfa      	ldrb	r2, [r7, #19]
 8004074:	4613      	mov	r3, r2
 8004076:	005b      	lsls	r3, r3, #1
 8004078:	4413      	add	r3, r2
 800407a:	00db      	lsls	r3, r3, #3
 800407c:	440b      	add	r3, r1
 800407e:	60fb      	str	r3, [r7, #12]
 8004080:	e010      	b.n	80040a4 <tud_init+0xb8>
  } else if ( drvid < TOTAL_DRIVER_COUNT && BUILTIN_DRIVER_COUNT > 0 ){
 8004082:	4b25      	ldr	r3, [pc, #148]	; (8004118 <tud_init+0x12c>)
 8004084:	781b      	ldrb	r3, [r3, #0]
 8004086:	1c5a      	adds	r2, r3, #1
 8004088:	7cfb      	ldrb	r3, [r7, #19]
 800408a:	429a      	cmp	r2, r3
 800408c:	db0a      	blt.n	80040a4 <tud_init+0xb8>
    driver = &_usbd_driver[drvid - _app_driver_count];
 800408e:	7cfb      	ldrb	r3, [r7, #19]
 8004090:	4a21      	ldr	r2, [pc, #132]	; (8004118 <tud_init+0x12c>)
 8004092:	7812      	ldrb	r2, [r2, #0]
 8004094:	1a9a      	subs	r2, r3, r2
 8004096:	4613      	mov	r3, r2
 8004098:	005b      	lsls	r3, r3, #1
 800409a:	4413      	add	r3, r2
 800409c:	00db      	lsls	r3, r3, #3
 800409e:	4a20      	ldr	r2, [pc, #128]	; (8004120 <tud_init+0x134>)
 80040a0:	4413      	add	r3, r2
 80040a2:	60fb      	str	r3, [r7, #12]
  return driver;
 80040a4:	68fb      	ldr	r3, [r7, #12]
  {
    usbd_class_driver_t const * driver = get_driver(i);
 80040a6:	623b      	str	r3, [r7, #32]
    TU_ASSERT(driver);
 80040a8:	6a3b      	ldr	r3, [r7, #32]
 80040aa:	2b00      	cmp	r3, #0
 80040ac:	d10a      	bne.n	80040c4 <tud_init+0xd8>
 80040ae:	4b18      	ldr	r3, [pc, #96]	; (8004110 <tud_init+0x124>)
 80040b0:	61fb      	str	r3, [r7, #28]
 80040b2:	69fb      	ldr	r3, [r7, #28]
 80040b4:	681b      	ldr	r3, [r3, #0]
 80040b6:	f003 0301 	and.w	r3, r3, #1
 80040ba:	2b00      	cmp	r3, #0
 80040bc:	d000      	beq.n	80040c0 <tud_init+0xd4>
 80040be:	be00      	bkpt	0x0000
 80040c0:	2300      	movs	r3, #0
 80040c2:	e01a      	b.n	80040fa <tud_init+0x10e>
    TU_LOG_USBD("%s init\r\n", driver->name);
    driver->init();
 80040c4:	6a3b      	ldr	r3, [r7, #32]
 80040c6:	681b      	ldr	r3, [r3, #0]
 80040c8:	4798      	blx	r3
  for (uint8_t i = 0; i < TOTAL_DRIVER_COUNT; i++)
 80040ca:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80040ce:	3301      	adds	r3, #1
 80040d0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80040d4:	4b10      	ldr	r3, [pc, #64]	; (8004118 <tud_init+0x12c>)
 80040d6:	781b      	ldrb	r3, [r3, #0]
 80040d8:	1c5a      	adds	r2, r3, #1
 80040da:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80040de:	429a      	cmp	r2, r3
 80040e0:	dabb      	bge.n	800405a <tud_init+0x6e>
  }

  _usbd_rhport = rhport;
 80040e2:	4a10      	ldr	r2, [pc, #64]	; (8004124 <tud_init+0x138>)
 80040e4:	79fb      	ldrb	r3, [r7, #7]
 80040e6:	7013      	strb	r3, [r2, #0]

  // Init device controller driver
  dcd_init(rhport);
 80040e8:	79fb      	ldrb	r3, [r7, #7]
 80040ea:	4618      	mov	r0, r3
 80040ec:	f002 f91c 	bl	8006328 <dcd_init>
  dcd_int_enable(rhport);
 80040f0:	79fb      	ldrb	r3, [r7, #7]
 80040f2:	4618      	mov	r0, r3
 80040f4:	f002 f9a0 	bl	8006438 <dcd_int_enable>

  return true;
 80040f8:	2301      	movs	r3, #1
}
 80040fa:	4618      	mov	r0, r3
 80040fc:	3728      	adds	r7, #40	; 0x28
 80040fe:	46bd      	mov	sp, r7
 8004100:	bd80      	pop	{r7, pc}
 8004102:	bf00      	nop
 8004104:	24001190 	.word	0x24001190
 8004108:	24000028 	.word	0x24000028
 800410c:	24001290 	.word	0x24001290
 8004110:	e000edf0 	.word	0xe000edf0
 8004114:	00000000 	.word	0x00000000
 8004118:	240011cc 	.word	0x240011cc
 800411c:	240011c8 	.word	0x240011c8
 8004120:	0801019c 	.word	0x0801019c
 8004124:	24000024 	.word	0x24000024

08004128 <configuration_reset>:

static void configuration_reset(uint8_t rhport)
{
 8004128:	b580      	push	{r7, lr}
 800412a:	b088      	sub	sp, #32
 800412c:	af00      	add	r7, sp, #0
 800412e:	4603      	mov	r3, r0
 8004130:	71fb      	strb	r3, [r7, #7]
  for ( uint8_t i = 0; i < TOTAL_DRIVER_COUNT; i++ )
 8004132:	2300      	movs	r3, #0
 8004134:	77fb      	strb	r3, [r7, #31]
 8004136:	e03a      	b.n	80041ae <configuration_reset+0x86>
 8004138:	7ffb      	ldrb	r3, [r7, #31]
 800413a:	74fb      	strb	r3, [r7, #19]
  usbd_class_driver_t const * driver = NULL;
 800413c:	2300      	movs	r3, #0
 800413e:	60fb      	str	r3, [r7, #12]
  if ( drvid < _app_driver_count ) {
 8004140:	4b28      	ldr	r3, [pc, #160]	; (80041e4 <configuration_reset+0xbc>)
 8004142:	781b      	ldrb	r3, [r3, #0]
 8004144:	7cfa      	ldrb	r2, [r7, #19]
 8004146:	429a      	cmp	r2, r3
 8004148:	d209      	bcs.n	800415e <configuration_reset+0x36>
    driver = &_app_driver[drvid];
 800414a:	4b27      	ldr	r3, [pc, #156]	; (80041e8 <configuration_reset+0xc0>)
 800414c:	6819      	ldr	r1, [r3, #0]
 800414e:	7cfa      	ldrb	r2, [r7, #19]
 8004150:	4613      	mov	r3, r2
 8004152:	005b      	lsls	r3, r3, #1
 8004154:	4413      	add	r3, r2
 8004156:	00db      	lsls	r3, r3, #3
 8004158:	440b      	add	r3, r1
 800415a:	60fb      	str	r3, [r7, #12]
 800415c:	e010      	b.n	8004180 <configuration_reset+0x58>
  } else if ( drvid < TOTAL_DRIVER_COUNT && BUILTIN_DRIVER_COUNT > 0 ){
 800415e:	4b21      	ldr	r3, [pc, #132]	; (80041e4 <configuration_reset+0xbc>)
 8004160:	781b      	ldrb	r3, [r3, #0]
 8004162:	1c5a      	adds	r2, r3, #1
 8004164:	7cfb      	ldrb	r3, [r7, #19]
 8004166:	429a      	cmp	r2, r3
 8004168:	db0a      	blt.n	8004180 <configuration_reset+0x58>
    driver = &_usbd_driver[drvid - _app_driver_count];
 800416a:	7cfb      	ldrb	r3, [r7, #19]
 800416c:	4a1d      	ldr	r2, [pc, #116]	; (80041e4 <configuration_reset+0xbc>)
 800416e:	7812      	ldrb	r2, [r2, #0]
 8004170:	1a9a      	subs	r2, r3, r2
 8004172:	4613      	mov	r3, r2
 8004174:	005b      	lsls	r3, r3, #1
 8004176:	4413      	add	r3, r2
 8004178:	00db      	lsls	r3, r3, #3
 800417a:	4a1c      	ldr	r2, [pc, #112]	; (80041ec <configuration_reset+0xc4>)
 800417c:	4413      	add	r3, r2
 800417e:	60fb      	str	r3, [r7, #12]
  return driver;
 8004180:	68fb      	ldr	r3, [r7, #12]
  {
    usbd_class_driver_t const * driver = get_driver(i);
 8004182:	61bb      	str	r3, [r7, #24]
    TU_ASSERT(driver, );
 8004184:	69bb      	ldr	r3, [r7, #24]
 8004186:	2b00      	cmp	r3, #0
 8004188:	d109      	bne.n	800419e <configuration_reset+0x76>
 800418a:	4b19      	ldr	r3, [pc, #100]	; (80041f0 <configuration_reset+0xc8>)
 800418c:	617b      	str	r3, [r7, #20]
 800418e:	697b      	ldr	r3, [r7, #20]
 8004190:	681b      	ldr	r3, [r3, #0]
 8004192:	f003 0301 	and.w	r3, r3, #1
 8004196:	2b00      	cmp	r3, #0
 8004198:	d01f      	beq.n	80041da <configuration_reset+0xb2>
 800419a:	be00      	bkpt	0x0000
 800419c:	e01d      	b.n	80041da <configuration_reset+0xb2>
    driver->reset(rhport);
 800419e:	69bb      	ldr	r3, [r7, #24]
 80041a0:	685b      	ldr	r3, [r3, #4]
 80041a2:	79fa      	ldrb	r2, [r7, #7]
 80041a4:	4610      	mov	r0, r2
 80041a6:	4798      	blx	r3
  for ( uint8_t i = 0; i < TOTAL_DRIVER_COUNT; i++ )
 80041a8:	7ffb      	ldrb	r3, [r7, #31]
 80041aa:	3301      	adds	r3, #1
 80041ac:	77fb      	strb	r3, [r7, #31]
 80041ae:	4b0d      	ldr	r3, [pc, #52]	; (80041e4 <configuration_reset+0xbc>)
 80041b0:	781b      	ldrb	r3, [r3, #0]
 80041b2:	1c5a      	adds	r2, r3, #1
 80041b4:	7ffb      	ldrb	r3, [r7, #31]
 80041b6:	429a      	cmp	r2, r3
 80041b8:	dabe      	bge.n	8004138 <configuration_reset+0x10>
  }

  tu_varclr(&_usbd_dev);
 80041ba:	2237      	movs	r2, #55	; 0x37
 80041bc:	2100      	movs	r1, #0
 80041be:	480d      	ldr	r0, [pc, #52]	; (80041f4 <configuration_reset+0xcc>)
 80041c0:	f00b ff07 	bl	800ffd2 <memset>
  memset(_usbd_dev.itf2drv, DRVID_INVALID, sizeof(_usbd_dev.itf2drv)); // invalid mapping
 80041c4:	2210      	movs	r2, #16
 80041c6:	21ff      	movs	r1, #255	; 0xff
 80041c8:	480b      	ldr	r0, [pc, #44]	; (80041f8 <configuration_reset+0xd0>)
 80041ca:	f00b ff02 	bl	800ffd2 <memset>
  memset(_usbd_dev.ep2drv , DRVID_INVALID, sizeof(_usbd_dev.ep2drv )); // invalid mapping
 80041ce:	2212      	movs	r2, #18
 80041d0:	21ff      	movs	r1, #255	; 0xff
 80041d2:	480a      	ldr	r0, [pc, #40]	; (80041fc <configuration_reset+0xd4>)
 80041d4:	f00b fefd 	bl	800ffd2 <memset>
 80041d8:	e000      	b.n	80041dc <configuration_reset+0xb4>
    TU_ASSERT(driver, );
 80041da:	bf00      	nop
}
 80041dc:	3720      	adds	r7, #32
 80041de:	46bd      	mov	sp, r7
 80041e0:	bd80      	pop	{r7, pc}
 80041e2:	bf00      	nop
 80041e4:	240011cc 	.word	0x240011cc
 80041e8:	240011c8 	.word	0x240011c8
 80041ec:	0801019c 	.word	0x0801019c
 80041f0:	e000edf0 	.word	0xe000edf0
 80041f4:	24001190 	.word	0x24001190
 80041f8:	24001193 	.word	0x24001193
 80041fc:	240011a3 	.word	0x240011a3

08004200 <usbd_reset>:

static void usbd_reset(uint8_t rhport)
{
 8004200:	b580      	push	{r7, lr}
 8004202:	b082      	sub	sp, #8
 8004204:	af00      	add	r7, sp, #0
 8004206:	4603      	mov	r3, r0
 8004208:	71fb      	strb	r3, [r7, #7]
  configuration_reset(rhport);
 800420a:	79fb      	ldrb	r3, [r7, #7]
 800420c:	4618      	mov	r0, r3
 800420e:	f7ff ff8b 	bl	8004128 <configuration_reset>
  usbd_control_reset();
 8004212:	f001 fbb9 	bl	8005988 <usbd_control_reset>
}
 8004216:	bf00      	nop
 8004218:	3708      	adds	r7, #8
 800421a:	46bd      	mov	sp, r7
 800421c:	bd80      	pop	{r7, pc}
	...

08004220 <tud_task_ext>:
      }
    }
    @endcode
 */
void tud_task_ext(uint32_t timeout_ms, bool in_isr)
{
 8004220:	b590      	push	{r4, r7, lr}
 8004222:	b093      	sub	sp, #76	; 0x4c
 8004224:	af00      	add	r7, sp, #0
 8004226:	6078      	str	r0, [r7, #4]
 8004228:	460b      	mov	r3, r1
 800422a:	70fb      	strb	r3, [r7, #3]
  (void) in_isr; // not implemented yet

  // Skip if stack is not initialized
  if ( !tud_inited() ) return;
 800422c:	f7ff fece 	bl	8003fcc <tud_inited>
 8004230:	4603      	mov	r3, r0
 8004232:	f083 0301 	eor.w	r3, r3, #1
 8004236:	b2db      	uxtb	r3, r3
 8004238:	2b00      	cmp	r3, #0
 800423a:	f040 8151 	bne.w	80044e0 <tud_task_ext+0x2c0>

  // Loop until there is no more events in the queue
  while (1)
  {
    dcd_event_t event;
    if ( !osal_queue_receive(_usbd_q, &event, timeout_ms) ) return;
 800423e:	4bac      	ldr	r3, [pc, #688]	; (80044f0 <tud_task_ext+0x2d0>)
 8004240:	681b      	ldr	r3, [r3, #0]
 8004242:	637b      	str	r3, [r7, #52]	; 0x34
 8004244:	f107 030c 	add.w	r3, r7, #12
 8004248:	633b      	str	r3, [r7, #48]	; 0x30
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800424e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004250:	62bb      	str	r3, [r7, #40]	; 0x28
  qhdl->interrupt_set(false);
 8004252:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004254:	681b      	ldr	r3, [r3, #0]
 8004256:	2000      	movs	r0, #0
 8004258:	4798      	blx	r3
}
 800425a:	bf00      	nop

TU_ATTR_ALWAYS_INLINE static inline bool osal_queue_receive(osal_queue_t qhdl, void* data, uint32_t msec) {
  (void) msec; // not used, always behave as msec = 0

  _osal_q_lock(qhdl);
  bool success = tu_fifo_read(&qhdl->ff, data);
 800425c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800425e:	3304      	adds	r3, #4
 8004260:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004262:	4618      	mov	r0, r3
 8004264:	f7ff fd9f 	bl	8003da6 <tu_fifo_read>
 8004268:	4603      	mov	r3, r0
 800426a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800426e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004270:	623b      	str	r3, [r7, #32]
  qhdl->interrupt_set(true);
 8004272:	6a3b      	ldr	r3, [r7, #32]
 8004274:	681b      	ldr	r3, [r3, #0]
 8004276:	2001      	movs	r0, #1
 8004278:	4798      	blx	r3
}
 800427a:	bf00      	nop
  _osal_q_unlock(qhdl);

  return success;
 800427c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8004280:	f083 0301 	eor.w	r3, r3, #1
 8004284:	b2db      	uxtb	r3, r3
 8004286:	2b00      	cmp	r3, #0
 8004288:	f040 812c 	bne.w	80044e4 <tud_task_ext+0x2c4>
#if CFG_TUSB_DEBUG >= CFG_TUD_LOG_LEVEL
    if (event.event_id == DCD_EVENT_SETUP_RECEIVED) TU_LOG_USBD("\r\n"); // extra line for setup
    TU_LOG_USBD("USBD %s ", event.event_id < DCD_EVENT_COUNT ? _usbd_event_str[event.event_id] : "CORRUPTED");
#endif

    switch ( event.event_id )
 800428c:	7b7b      	ldrb	r3, [r7, #13]
 800428e:	3b01      	subs	r3, #1
 8004290:	2b07      	cmp	r3, #7
 8004292:	f200 810f 	bhi.w	80044b4 <tud_task_ext+0x294>
 8004296:	a201      	add	r2, pc, #4	; (adr r2, 800429c <tud_task_ext+0x7c>)
 8004298:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800429c:	080042bd 	.word	0x080042bd
 80042a0:	080042cd 	.word	0x080042cd
 80042a4:	080044b5 	.word	0x080044b5
 80042a8:	0800445b 	.word	0x0800445b
 80042ac:	0800448b 	.word	0x0800448b
 80042b0:	080042e3 	.word	0x080042e3
 80042b4:	08004359 	.word	0x08004359
 80042b8:	080044a5 	.word	0x080044a5
    {
      case DCD_EVENT_BUS_RESET:
        TU_LOG_USBD(": %s Speed\r\n", tu_str_speed[event.bus_reset.speed]);
        usbd_reset(event.rhport);
 80042bc:	7b3b      	ldrb	r3, [r7, #12]
 80042be:	4618      	mov	r0, r3
 80042c0:	f7ff ff9e 	bl	8004200 <usbd_reset>
        _usbd_dev.speed = event.bus_reset.speed;
 80042c4:	7c3a      	ldrb	r2, [r7, #16]
 80042c6:	4b8b      	ldr	r3, [pc, #556]	; (80044f4 <tud_task_ext+0x2d4>)
 80042c8:	709a      	strb	r2, [r3, #2]
      break;
 80042ca:	e108      	b.n	80044de <tud_task_ext+0x2be>

      case DCD_EVENT_UNPLUGGED:
        TU_LOG_USBD("\r\n");
        usbd_reset(event.rhport);
 80042cc:	7b3b      	ldrb	r3, [r7, #12]
 80042ce:	4618      	mov	r0, r3
 80042d0:	f7ff ff96 	bl	8004200 <usbd_reset>

        // invoke callback
        if (tud_umount_cb) tud_umount_cb();
 80042d4:	4b88      	ldr	r3, [pc, #544]	; (80044f8 <tud_task_ext+0x2d8>)
 80042d6:	2b00      	cmp	r3, #0
 80042d8:	f000 80f6 	beq.w	80044c8 <tud_task_ext+0x2a8>
 80042dc:	f7fc fcaa 	bl	8000c34 <tud_umount_cb>
      break;
 80042e0:	e0f2      	b.n	80044c8 <tud_task_ext+0x2a8>
        TU_LOG_BUF(CFG_TUD_LOG_LEVEL, &event.setup_received, 8);
        TU_LOG_USBD("\r\n");

        // Mark as connected after receiving 1st setup packet.
        // But it is easier to set it every time instead of wasting time to check then set
        _usbd_dev.connected = 1;
 80042e2:	4a84      	ldr	r2, [pc, #528]	; (80044f4 <tud_task_ext+0x2d4>)
 80042e4:	7813      	ldrb	r3, [r2, #0]
 80042e6:	f043 0301 	orr.w	r3, r3, #1
 80042ea:	7013      	strb	r3, [r2, #0]

        // mark both in & out control as free
        _usbd_dev.ep_status[0][TUSB_DIR_OUT].busy = 0;
 80042ec:	4a81      	ldr	r2, [pc, #516]	; (80044f4 <tud_task_ext+0x2d4>)
 80042ee:	f892 3025 	ldrb.w	r3, [r2, #37]	; 0x25
 80042f2:	f36f 0300 	bfc	r3, #0, #1
 80042f6:	f882 3025 	strb.w	r3, [r2, #37]	; 0x25
        _usbd_dev.ep_status[0][TUSB_DIR_OUT].claimed = 0;
 80042fa:	4a7e      	ldr	r2, [pc, #504]	; (80044f4 <tud_task_ext+0x2d4>)
 80042fc:	f892 3025 	ldrb.w	r3, [r2, #37]	; 0x25
 8004300:	f36f 0382 	bfc	r3, #2, #1
 8004304:	f882 3025 	strb.w	r3, [r2, #37]	; 0x25
        _usbd_dev.ep_status[0][TUSB_DIR_IN ].busy = 0;
 8004308:	4a7a      	ldr	r2, [pc, #488]	; (80044f4 <tud_task_ext+0x2d4>)
 800430a:	f892 3026 	ldrb.w	r3, [r2, #38]	; 0x26
 800430e:	f36f 0300 	bfc	r3, #0, #1
 8004312:	f882 3026 	strb.w	r3, [r2, #38]	; 0x26
        _usbd_dev.ep_status[0][TUSB_DIR_IN ].claimed = 0;
 8004316:	4a77      	ldr	r2, [pc, #476]	; (80044f4 <tud_task_ext+0x2d4>)
 8004318:	f892 3026 	ldrb.w	r3, [r2, #38]	; 0x26
 800431c:	f36f 0382 	bfc	r3, #2, #1
 8004320:	f882 3026 	strb.w	r3, [r2, #38]	; 0x26

        // Process control request
        if ( !process_control_request(event.rhport, &event.setup_received) )
 8004324:	7b3a      	ldrb	r2, [r7, #12]
 8004326:	f107 030c 	add.w	r3, r7, #12
 800432a:	3304      	adds	r3, #4
 800432c:	4619      	mov	r1, r3
 800432e:	4610      	mov	r0, r2
 8004330:	f000 f908 	bl	8004544 <process_control_request>
 8004334:	4603      	mov	r3, r0
 8004336:	f083 0301 	eor.w	r3, r3, #1
 800433a:	b2db      	uxtb	r3, r3
 800433c:	2b00      	cmp	r3, #0
 800433e:	f000 80c5 	beq.w	80044cc <tud_task_ext+0x2ac>
        {
          TU_LOG_USBD("  Stall EP0\r\n");
          // Failed -> stall both control endpoint IN and OUT
          dcd_edpt_stall(event.rhport, 0);
 8004342:	7b3b      	ldrb	r3, [r7, #12]
 8004344:	2100      	movs	r1, #0
 8004346:	4618      	mov	r0, r3
 8004348:	f002 fbf0 	bl	8006b2c <dcd_edpt_stall>
          dcd_edpt_stall(event.rhport, 0 | TUSB_DIR_IN_MASK);
 800434c:	7b3b      	ldrb	r3, [r7, #12]
 800434e:	2180      	movs	r1, #128	; 0x80
 8004350:	4618      	mov	r0, r3
 8004352:	f002 fbeb 	bl	8006b2c <dcd_edpt_stall>
        }
      break;
 8004356:	e0b9      	b.n	80044cc <tud_task_ext+0x2ac>

      case DCD_EVENT_XFER_COMPLETE:
      {
        // Invoke the class callback associated with the endpoint address
        uint8_t const ep_addr = event.xfer_complete.ep_addr;
 8004358:	7c3b      	ldrb	r3, [r7, #16]
 800435a:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 800435e:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8004362:	77bb      	strb	r3, [r7, #30]
  return (uint8_t)(addr & (~TUSB_DIR_IN_MASK));
 8004364:	7fbb      	ldrb	r3, [r7, #30]
 8004366:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800436a:	b2db      	uxtb	r3, r3
        uint8_t const epnum   = tu_edpt_number(ep_addr);
 800436c:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
 8004370:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8004374:	77fb      	strb	r3, [r7, #31]
  return (addr & TUSB_DIR_IN_MASK) ? TUSB_DIR_IN : TUSB_DIR_OUT;
 8004376:	7ffb      	ldrb	r3, [r7, #31]
 8004378:	09db      	lsrs	r3, r3, #7
 800437a:	b2db      	uxtb	r3, r3
        uint8_t const ep_dir  = tu_edpt_dir(ep_addr);
 800437c:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45

        TU_LOG_USBD("on EP %02X with %u bytes\r\n", ep_addr, (unsigned int) event.xfer_complete.len);

        _usbd_dev.ep_status[epnum][ep_dir].busy = 0;
 8004380:	f897 2046 	ldrb.w	r2, [r7, #70]	; 0x46
 8004384:	f897 3045 	ldrb.w	r3, [r7, #69]	; 0x45
 8004388:	495a      	ldr	r1, [pc, #360]	; (80044f4 <tud_task_ext+0x2d4>)
 800438a:	0052      	lsls	r2, r2, #1
 800438c:	440a      	add	r2, r1
 800438e:	4413      	add	r3, r2
 8004390:	f103 0220 	add.w	r2, r3, #32
 8004394:	7953      	ldrb	r3, [r2, #5]
 8004396:	f36f 0300 	bfc	r3, #0, #1
 800439a:	7153      	strb	r3, [r2, #5]
        _usbd_dev.ep_status[epnum][ep_dir].claimed = 0;
 800439c:	f897 2046 	ldrb.w	r2, [r7, #70]	; 0x46
 80043a0:	f897 3045 	ldrb.w	r3, [r7, #69]	; 0x45
 80043a4:	4953      	ldr	r1, [pc, #332]	; (80044f4 <tud_task_ext+0x2d4>)
 80043a6:	0052      	lsls	r2, r2, #1
 80043a8:	440a      	add	r2, r1
 80043aa:	4413      	add	r3, r2
 80043ac:	f103 0220 	add.w	r2, r3, #32
 80043b0:	7953      	ldrb	r3, [r2, #5]
 80043b2:	f36f 0382 	bfc	r3, #2, #1
 80043b6:	7153      	strb	r3, [r2, #5]

        if ( 0 == epnum )
 80043b8:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 80043bc:	2b00      	cmp	r3, #0
 80043be:	d107      	bne.n	80043d0 <tud_task_ext+0x1b0>
        {
          usbd_control_xfer_cb(event.rhport, ep_addr, (xfer_result_t) event.xfer_complete.result, event.xfer_complete
 80043c0:	7b38      	ldrb	r0, [r7, #12]
 80043c2:	7c7a      	ldrb	r2, [r7, #17]
 80043c4:	697b      	ldr	r3, [r7, #20]
 80043c6:	f897 1047 	ldrb.w	r1, [r7, #71]	; 0x47
 80043ca:	f001 fb13 	bl	80059f4 <usbd_control_xfer_cb>

          TU_LOG_USBD("  %s xfer callback\r\n", driver->name);
          driver->xfer_cb(event.rhport, ep_addr, (xfer_result_t) event.xfer_complete.result, event.xfer_complete.len);
        }
      }
      break;
 80043ce:	e086      	b.n	80044de <tud_task_ext+0x2be>
          usbd_class_driver_t const * driver = get_driver( _usbd_dev.ep2drv[epnum][ep_dir] );
 80043d0:	f897 2046 	ldrb.w	r2, [r7, #70]	; 0x46
 80043d4:	f897 3045 	ldrb.w	r3, [r7, #69]	; 0x45
 80043d8:	4946      	ldr	r1, [pc, #280]	; (80044f4 <tud_task_ext+0x2d4>)
 80043da:	0052      	lsls	r2, r2, #1
 80043dc:	440a      	add	r2, r1
 80043de:	4413      	add	r3, r2
 80043e0:	3313      	adds	r3, #19
 80043e2:	781b      	ldrb	r3, [r3, #0]
 80043e4:	777b      	strb	r3, [r7, #29]
  usbd_class_driver_t const * driver = NULL;
 80043e6:	2300      	movs	r3, #0
 80043e8:	61bb      	str	r3, [r7, #24]
  if ( drvid < _app_driver_count ) {
 80043ea:	4b44      	ldr	r3, [pc, #272]	; (80044fc <tud_task_ext+0x2dc>)
 80043ec:	781b      	ldrb	r3, [r3, #0]
 80043ee:	7f7a      	ldrb	r2, [r7, #29]
 80043f0:	429a      	cmp	r2, r3
 80043f2:	d209      	bcs.n	8004408 <tud_task_ext+0x1e8>
    driver = &_app_driver[drvid];
 80043f4:	4b42      	ldr	r3, [pc, #264]	; (8004500 <tud_task_ext+0x2e0>)
 80043f6:	6819      	ldr	r1, [r3, #0]
 80043f8:	7f7a      	ldrb	r2, [r7, #29]
 80043fa:	4613      	mov	r3, r2
 80043fc:	005b      	lsls	r3, r3, #1
 80043fe:	4413      	add	r3, r2
 8004400:	00db      	lsls	r3, r3, #3
 8004402:	440b      	add	r3, r1
 8004404:	61bb      	str	r3, [r7, #24]
 8004406:	e010      	b.n	800442a <tud_task_ext+0x20a>
  } else if ( drvid < TOTAL_DRIVER_COUNT && BUILTIN_DRIVER_COUNT > 0 ){
 8004408:	4b3c      	ldr	r3, [pc, #240]	; (80044fc <tud_task_ext+0x2dc>)
 800440a:	781b      	ldrb	r3, [r3, #0]
 800440c:	1c5a      	adds	r2, r3, #1
 800440e:	7f7b      	ldrb	r3, [r7, #29]
 8004410:	429a      	cmp	r2, r3
 8004412:	db0a      	blt.n	800442a <tud_task_ext+0x20a>
    driver = &_usbd_driver[drvid - _app_driver_count];
 8004414:	7f7b      	ldrb	r3, [r7, #29]
 8004416:	4a39      	ldr	r2, [pc, #228]	; (80044fc <tud_task_ext+0x2dc>)
 8004418:	7812      	ldrb	r2, [r2, #0]
 800441a:	1a9a      	subs	r2, r3, r2
 800441c:	4613      	mov	r3, r2
 800441e:	005b      	lsls	r3, r3, #1
 8004420:	4413      	add	r3, r2
 8004422:	00db      	lsls	r3, r3, #3
 8004424:	4a37      	ldr	r2, [pc, #220]	; (8004504 <tud_task_ext+0x2e4>)
 8004426:	4413      	add	r3, r2
 8004428:	61bb      	str	r3, [r7, #24]
  return driver;
 800442a:	69bb      	ldr	r3, [r7, #24]
          usbd_class_driver_t const * driver = get_driver( _usbd_dev.ep2drv[epnum][ep_dir] );
 800442c:	643b      	str	r3, [r7, #64]	; 0x40
          TU_ASSERT(driver, );
 800442e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004430:	2b00      	cmp	r3, #0
 8004432:	d109      	bne.n	8004448 <tud_task_ext+0x228>
 8004434:	4b34      	ldr	r3, [pc, #208]	; (8004508 <tud_task_ext+0x2e8>)
 8004436:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004438:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800443a:	681b      	ldr	r3, [r3, #0]
 800443c:	f003 0301 	and.w	r3, r3, #1
 8004440:	2b00      	cmp	r3, #0
 8004442:	d051      	beq.n	80044e8 <tud_task_ext+0x2c8>
 8004444:	be00      	bkpt	0x0000
 8004446:	e04f      	b.n	80044e8 <tud_task_ext+0x2c8>
          driver->xfer_cb(event.rhport, ep_addr, (xfer_result_t) event.xfer_complete.result, event.xfer_complete.len);
 8004448:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800444a:	691c      	ldr	r4, [r3, #16]
 800444c:	7b38      	ldrb	r0, [r7, #12]
 800444e:	7c7a      	ldrb	r2, [r7, #17]
 8004450:	697b      	ldr	r3, [r7, #20]
 8004452:	f897 1047 	ldrb.w	r1, [r7, #71]	; 0x47
 8004456:	47a0      	blx	r4
      break;
 8004458:	e041      	b.n	80044de <tud_task_ext+0x2be>

      case DCD_EVENT_SUSPEND:
        // NOTE: When plugging/unplugging device, the D+/D- state are unstable and
        // can accidentally meet the SUSPEND condition ( Bus Idle for 3ms ), which result in a series of event
        // e.g suspend -> resume -> unplug/plug. Skip suspend/resume if not connected
        if ( _usbd_dev.connected )
 800445a:	4b26      	ldr	r3, [pc, #152]	; (80044f4 <tud_task_ext+0x2d4>)
 800445c:	781b      	ldrb	r3, [r3, #0]
 800445e:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8004462:	b2db      	uxtb	r3, r3
 8004464:	2b00      	cmp	r3, #0
 8004466:	d033      	beq.n	80044d0 <tud_task_ext+0x2b0>
        {
          TU_LOG_USBD(": Remote Wakeup = %u\r\n", _usbd_dev.remote_wakeup_en);
          if (tud_suspend_cb) tud_suspend_cb(_usbd_dev.remote_wakeup_en);
 8004468:	4b28      	ldr	r3, [pc, #160]	; (800450c <tud_task_ext+0x2ec>)
 800446a:	2b00      	cmp	r3, #0
 800446c:	d030      	beq.n	80044d0 <tud_task_ext+0x2b0>
 800446e:	4b21      	ldr	r3, [pc, #132]	; (80044f4 <tud_task_ext+0x2d4>)
 8004470:	781b      	ldrb	r3, [r3, #0]
 8004472:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8004476:	b2db      	uxtb	r3, r3
 8004478:	2b00      	cmp	r3, #0
 800447a:	bf14      	ite	ne
 800447c:	2301      	movne	r3, #1
 800447e:	2300      	moveq	r3, #0
 8004480:	b2db      	uxtb	r3, r3
 8004482:	4618      	mov	r0, r3
 8004484:	f7fc fbe4 	bl	8000c50 <tud_suspend_cb>
        }else
        {
          TU_LOG_USBD(" Skipped\r\n");
        }
      break;
 8004488:	e022      	b.n	80044d0 <tud_task_ext+0x2b0>

      case DCD_EVENT_RESUME:
        if ( _usbd_dev.connected )
 800448a:	4b1a      	ldr	r3, [pc, #104]	; (80044f4 <tud_task_ext+0x2d4>)
 800448c:	781b      	ldrb	r3, [r3, #0]
 800448e:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8004492:	b2db      	uxtb	r3, r3
 8004494:	2b00      	cmp	r3, #0
 8004496:	d01d      	beq.n	80044d4 <tud_task_ext+0x2b4>
        {
          TU_LOG_USBD("\r\n");
          if (tud_resume_cb) tud_resume_cb();
 8004498:	4b1d      	ldr	r3, [pc, #116]	; (8004510 <tud_task_ext+0x2f0>)
 800449a:	2b00      	cmp	r3, #0
 800449c:	d01a      	beq.n	80044d4 <tud_task_ext+0x2b4>
 800449e:	f7fc fbe7 	bl	8000c70 <tud_resume_cb>
        }else
        {
          TU_LOG_USBD(" Skipped\r\n");
        }
      break;
 80044a2:	e017      	b.n	80044d4 <tud_task_ext+0x2b4>

      case USBD_EVENT_FUNC_CALL:
        TU_LOG_USBD("\r\n");
        if ( event.func_call.func ) event.func_call.func(event.func_call.param);
 80044a4:	693b      	ldr	r3, [r7, #16]
 80044a6:	2b00      	cmp	r3, #0
 80044a8:	d016      	beq.n	80044d8 <tud_task_ext+0x2b8>
 80044aa:	693b      	ldr	r3, [r7, #16]
 80044ac:	697a      	ldr	r2, [r7, #20]
 80044ae:	4610      	mov	r0, r2
 80044b0:	4798      	blx	r3
      break;
 80044b2:	e011      	b.n	80044d8 <tud_task_ext+0x2b8>

      case DCD_EVENT_SOF:
      default:
        TU_BREAKPOINT();
 80044b4:	4b14      	ldr	r3, [pc, #80]	; (8004508 <tud_task_ext+0x2e8>)
 80044b6:	63bb      	str	r3, [r7, #56]	; 0x38
 80044b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80044ba:	681b      	ldr	r3, [r3, #0]
 80044bc:	f003 0301 	and.w	r3, r3, #1
 80044c0:	2b00      	cmp	r3, #0
 80044c2:	d00b      	beq.n	80044dc <tud_task_ext+0x2bc>
 80044c4:	be00      	bkpt	0x0000
      break;
 80044c6:	e009      	b.n	80044dc <tud_task_ext+0x2bc>
      break;
 80044c8:	bf00      	nop
 80044ca:	e6b8      	b.n	800423e <tud_task_ext+0x1e>
      break;
 80044cc:	bf00      	nop
 80044ce:	e6b6      	b.n	800423e <tud_task_ext+0x1e>
      break;
 80044d0:	bf00      	nop
 80044d2:	e6b4      	b.n	800423e <tud_task_ext+0x1e>
      break;
 80044d4:	bf00      	nop
 80044d6:	e6b2      	b.n	800423e <tud_task_ext+0x1e>
      break;
 80044d8:	bf00      	nop
 80044da:	e6b0      	b.n	800423e <tud_task_ext+0x1e>
      break;
 80044dc:	bf00      	nop
  {
 80044de:	e6ae      	b.n	800423e <tud_task_ext+0x1e>
  if ( !tud_inited() ) return;
 80044e0:	bf00      	nop
 80044e2:	e002      	b.n	80044ea <tud_task_ext+0x2ca>
    if ( !osal_queue_receive(_usbd_q, &event, timeout_ms) ) return;
 80044e4:	bf00      	nop
 80044e6:	e000      	b.n	80044ea <tud_task_ext+0x2ca>
          TU_ASSERT(driver, );
 80044e8:	bf00      	nop
#if CFG_TUSB_OS != OPT_OS_NONE && CFG_TUSB_OS != OPT_OS_PICO
    // return if there is no more events, for application to run other background
    if (osal_queue_empty(_usbd_q)) return;
#endif
  }
}
 80044ea:	374c      	adds	r7, #76	; 0x4c
 80044ec:	46bd      	mov	sp, r7
 80044ee:	bd90      	pop	{r4, r7, pc}
 80044f0:	24001290 	.word	0x24001290
 80044f4:	24001190 	.word	0x24001190
 80044f8:	08000c35 	.word	0x08000c35
 80044fc:	240011cc 	.word	0x240011cc
 8004500:	240011c8 	.word	0x240011c8
 8004504:	0801019c 	.word	0x0801019c
 8004508:	e000edf0 	.word	0xe000edf0
 800450c:	08000c51 	.word	0x08000c51
 8004510:	08000c71 	.word	0x08000c71

08004514 <invoke_class_control>:
// Control Request Parser & Handling
//--------------------------------------------------------------------+

// Helper to invoke class driver control request handler
static bool invoke_class_control(uint8_t rhport, usbd_class_driver_t const * driver, tusb_control_request_t const * request)
{
 8004514:	b580      	push	{r7, lr}
 8004516:	b084      	sub	sp, #16
 8004518:	af00      	add	r7, sp, #0
 800451a:	4603      	mov	r3, r0
 800451c:	60b9      	str	r1, [r7, #8]
 800451e:	607a      	str	r2, [r7, #4]
 8004520:	73fb      	strb	r3, [r7, #15]
  usbd_control_set_complete_callback(driver->control_xfer_cb);
 8004522:	68bb      	ldr	r3, [r7, #8]
 8004524:	68db      	ldr	r3, [r3, #12]
 8004526:	4618      	mov	r0, r3
 8004528:	f001 fa3a 	bl	80059a0 <usbd_control_set_complete_callback>
  TU_LOG_USBD("  %s control request\r\n", driver->name);
  return driver->control_xfer_cb(rhport, CONTROL_STAGE_SETUP, request);
 800452c:	68bb      	ldr	r3, [r7, #8]
 800452e:	68db      	ldr	r3, [r3, #12]
 8004530:	7bf8      	ldrb	r0, [r7, #15]
 8004532:	687a      	ldr	r2, [r7, #4]
 8004534:	2101      	movs	r1, #1
 8004536:	4798      	blx	r3
 8004538:	4603      	mov	r3, r0
}
 800453a:	4618      	mov	r0, r3
 800453c:	3710      	adds	r7, #16
 800453e:	46bd      	mov	sp, r7
 8004540:	bd80      	pop	{r7, pc}
	...

08004544 <process_control_request>:

// This handles the actual request and its response.
// return false will cause its caller to stall control endpoint
static bool process_control_request(uint8_t rhport, tusb_control_request_t const * p_request)
{
 8004544:	b580      	push	{r7, lr}
 8004546:	b09a      	sub	sp, #104	; 0x68
 8004548:	af00      	add	r7, sp, #0
 800454a:	4603      	mov	r3, r0
 800454c:	6039      	str	r1, [r7, #0]
 800454e:	71fb      	strb	r3, [r7, #7]
  usbd_control_set_complete_callback(NULL);
 8004550:	2000      	movs	r0, #0
 8004552:	f001 fa25 	bl	80059a0 <usbd_control_set_complete_callback>

  TU_ASSERT(p_request->bmRequestType_bit.type < TUSB_REQ_TYPE_INVALID);
 8004556:	683b      	ldr	r3, [r7, #0]
 8004558:	781b      	ldrb	r3, [r3, #0]
 800455a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800455e:	b2db      	uxtb	r3, r3
 8004560:	2b60      	cmp	r3, #96	; 0x60
 8004562:	d10a      	bne.n	800457a <process_control_request+0x36>
 8004564:	4ba3      	ldr	r3, [pc, #652]	; (80047f4 <process_control_request+0x2b0>)
 8004566:	633b      	str	r3, [r7, #48]	; 0x30
 8004568:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800456a:	681b      	ldr	r3, [r3, #0]
 800456c:	f003 0301 	and.w	r3, r3, #1
 8004570:	2b00      	cmp	r3, #0
 8004572:	d000      	beq.n	8004576 <process_control_request+0x32>
 8004574:	be00      	bkpt	0x0000
 8004576:	2300      	movs	r3, #0
 8004578:	e2d5      	b.n	8004b26 <process_control_request+0x5e2>

  // Vendor request
  if ( p_request->bmRequestType_bit.type == TUSB_REQ_TYPE_VENDOR )
 800457a:	683b      	ldr	r3, [r7, #0]
 800457c:	781b      	ldrb	r3, [r3, #0]
 800457e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8004582:	b2db      	uxtb	r3, r3
 8004584:	2b40      	cmp	r3, #64	; 0x40
 8004586:	d10f      	bne.n	80045a8 <process_control_request+0x64>
  {
    TU_VERIFY(tud_vendor_control_xfer_cb);
 8004588:	4b9b      	ldr	r3, [pc, #620]	; (80047f8 <process_control_request+0x2b4>)
 800458a:	2b00      	cmp	r3, #0
 800458c:	d101      	bne.n	8004592 <process_control_request+0x4e>
 800458e:	2300      	movs	r3, #0
 8004590:	e2c9      	b.n	8004b26 <process_control_request+0x5e2>

    usbd_control_set_complete_callback(tud_vendor_control_xfer_cb);
 8004592:	4899      	ldr	r0, [pc, #612]	; (80047f8 <process_control_request+0x2b4>)
 8004594:	f001 fa04 	bl	80059a0 <usbd_control_set_complete_callback>
    return tud_vendor_control_xfer_cb(rhport, CONTROL_STAGE_SETUP, p_request);
 8004598:	79fb      	ldrb	r3, [r7, #7]
 800459a:	683a      	ldr	r2, [r7, #0]
 800459c:	2101      	movs	r1, #1
 800459e:	4618      	mov	r0, r3
 80045a0:	f3af 8000 	nop.w
 80045a4:	4603      	mov	r3, r0
 80045a6:	e2be      	b.n	8004b26 <process_control_request+0x5e2>
    TU_LOG_USBD("  %s", tu_str_std_request[p_request->bRequest]);
    if (TUSB_REQ_GET_DESCRIPTOR != p_request->bRequest) TU_LOG_USBD("\r\n");
  }
#endif

  switch ( p_request->bmRequestType_bit.recipient )
 80045a8:	683b      	ldr	r3, [r7, #0]
 80045aa:	781b      	ldrb	r3, [r3, #0]
 80045ac:	f3c3 0304 	ubfx	r3, r3, #0, #5
 80045b0:	b2db      	uxtb	r3, r3
 80045b2:	2b02      	cmp	r3, #2
 80045b4:	f000 81d8 	beq.w	8004968 <process_control_request+0x424>
 80045b8:	2b02      	cmp	r3, #2
 80045ba:	f300 82a7 	bgt.w	8004b0c <process_control_request+0x5c8>
 80045be:	2b00      	cmp	r3, #0
 80045c0:	d003      	beq.n	80045ca <process_control_request+0x86>
 80045c2:	2b01      	cmp	r3, #1
 80045c4:	f000 8159 	beq.w	800487a <process_control_request+0x336>
 80045c8:	e2a0      	b.n	8004b0c <process_control_request+0x5c8>
  {
    //------------- Device Requests e.g in enumeration -------------//
    case TUSB_REQ_RCPT_DEVICE:
      if ( TUSB_REQ_TYPE_CLASS == p_request->bmRequestType_bit.type )
 80045ca:	683b      	ldr	r3, [r7, #0]
 80045cc:	781b      	ldrb	r3, [r3, #0]
 80045ce:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80045d2:	b2db      	uxtb	r3, r3
 80045d4:	2b20      	cmp	r3, #32
 80045d6:	d149      	bne.n	800466c <process_control_request+0x128>
      {
        uint8_t const itf = tu_u16_low(p_request->wIndex);
 80045d8:	683b      	ldr	r3, [r7, #0]
 80045da:	889b      	ldrh	r3, [r3, #4]
 80045dc:	b29b      	uxth	r3, r3
 80045de:	85fb      	strh	r3, [r7, #46]	; 0x2e
TU_ATTR_ALWAYS_INLINE static inline uint8_t tu_u16_low (uint16_t ui16) { return TU_U16_LOW(ui16); }
 80045e0:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80045e2:	b2db      	uxtb	r3, r3
 80045e4:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
        TU_VERIFY(itf < TU_ARRAY_SIZE(_usbd_dev.itf2drv));
 80045e8:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80045ec:	2b0f      	cmp	r3, #15
 80045ee:	d901      	bls.n	80045f4 <process_control_request+0xb0>
 80045f0:	2300      	movs	r3, #0
 80045f2:	e298      	b.n	8004b26 <process_control_request+0x5e2>

        usbd_class_driver_t const * driver = get_driver(_usbd_dev.itf2drv[itf]);
 80045f4:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80045f8:	4a80      	ldr	r2, [pc, #512]	; (80047fc <process_control_request+0x2b8>)
 80045fa:	4413      	add	r3, r2
 80045fc:	78db      	ldrb	r3, [r3, #3]
 80045fe:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
  usbd_class_driver_t const * driver = NULL;
 8004602:	2300      	movs	r3, #0
 8004604:	62bb      	str	r3, [r7, #40]	; 0x28
  if ( drvid < _app_driver_count ) {
 8004606:	4b7e      	ldr	r3, [pc, #504]	; (8004800 <process_control_request+0x2bc>)
 8004608:	781b      	ldrb	r3, [r3, #0]
 800460a:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 800460e:	429a      	cmp	r2, r3
 8004610:	d20a      	bcs.n	8004628 <process_control_request+0xe4>
    driver = &_app_driver[drvid];
 8004612:	4b7c      	ldr	r3, [pc, #496]	; (8004804 <process_control_request+0x2c0>)
 8004614:	6819      	ldr	r1, [r3, #0]
 8004616:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 800461a:	4613      	mov	r3, r2
 800461c:	005b      	lsls	r3, r3, #1
 800461e:	4413      	add	r3, r2
 8004620:	00db      	lsls	r3, r3, #3
 8004622:	440b      	add	r3, r1
 8004624:	62bb      	str	r3, [r7, #40]	; 0x28
 8004626:	e012      	b.n	800464e <process_control_request+0x10a>
  } else if ( drvid < TOTAL_DRIVER_COUNT && BUILTIN_DRIVER_COUNT > 0 ){
 8004628:	4b75      	ldr	r3, [pc, #468]	; (8004800 <process_control_request+0x2bc>)
 800462a:	781b      	ldrb	r3, [r3, #0]
 800462c:	1c5a      	adds	r2, r3, #1
 800462e:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8004632:	429a      	cmp	r2, r3
 8004634:	db0b      	blt.n	800464e <process_control_request+0x10a>
    driver = &_usbd_driver[drvid - _app_driver_count];
 8004636:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 800463a:	4a71      	ldr	r2, [pc, #452]	; (8004800 <process_control_request+0x2bc>)
 800463c:	7812      	ldrb	r2, [r2, #0]
 800463e:	1a9a      	subs	r2, r3, r2
 8004640:	4613      	mov	r3, r2
 8004642:	005b      	lsls	r3, r3, #1
 8004644:	4413      	add	r3, r2
 8004646:	00db      	lsls	r3, r3, #3
 8004648:	4a6f      	ldr	r2, [pc, #444]	; (8004808 <process_control_request+0x2c4>)
 800464a:	4413      	add	r3, r2
 800464c:	62bb      	str	r3, [r7, #40]	; 0x28
  return driver;
 800464e:	6abb      	ldr	r3, [r7, #40]	; 0x28
        usbd_class_driver_t const * driver = get_driver(_usbd_dev.itf2drv[itf]);
 8004650:	63bb      	str	r3, [r7, #56]	; 0x38
        TU_VERIFY(driver);
 8004652:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004654:	2b00      	cmp	r3, #0
 8004656:	d101      	bne.n	800465c <process_control_request+0x118>
 8004658:	2300      	movs	r3, #0
 800465a:	e264      	b.n	8004b26 <process_control_request+0x5e2>

        // forward to class driver: "non-STD request to Interface"
        return invoke_class_control(rhport, driver, p_request);
 800465c:	79fb      	ldrb	r3, [r7, #7]
 800465e:	683a      	ldr	r2, [r7, #0]
 8004660:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8004662:	4618      	mov	r0, r3
 8004664:	f7ff ff56 	bl	8004514 <invoke_class_control>
 8004668:	4603      	mov	r3, r0
 800466a:	e25c      	b.n	8004b26 <process_control_request+0x5e2>
      }

      if ( TUSB_REQ_TYPE_STANDARD != p_request->bmRequestType_bit.type )
 800466c:	683b      	ldr	r3, [r7, #0]
 800466e:	781b      	ldrb	r3, [r3, #0]
 8004670:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8004674:	b2db      	uxtb	r3, r3
 8004676:	2b00      	cmp	r3, #0
 8004678:	d00a      	beq.n	8004690 <process_control_request+0x14c>
      {
        // Non standard request is not supported
        TU_BREAKPOINT();
 800467a:	4b5e      	ldr	r3, [pc, #376]	; (80047f4 <process_control_request+0x2b0>)
 800467c:	643b      	str	r3, [r7, #64]	; 0x40
 800467e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004680:	681b      	ldr	r3, [r3, #0]
 8004682:	f003 0301 	and.w	r3, r3, #1
 8004686:	2b00      	cmp	r3, #0
 8004688:	d000      	beq.n	800468c <process_control_request+0x148>
 800468a:	be00      	bkpt	0x0000
        return false;
 800468c:	2300      	movs	r3, #0
 800468e:	e24a      	b.n	8004b26 <process_control_request+0x5e2>
      }

      switch ( p_request->bRequest )
 8004690:	683b      	ldr	r3, [r7, #0]
 8004692:	785b      	ldrb	r3, [r3, #1]
 8004694:	2b09      	cmp	r3, #9
 8004696:	f200 80e3 	bhi.w	8004860 <process_control_request+0x31c>
 800469a:	a201      	add	r2, pc, #4	; (adr r2, 80046a0 <process_control_request+0x15c>)
 800469c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80046a0:	0800482b 	.word	0x0800482b
 80046a4:	080047e7 	.word	0x080047e7
 80046a8:	08004861 	.word	0x08004861
 80046ac:	080047c3 	.word	0x080047c3
 80046b0:	08004861 	.word	0x08004861
 80046b4:	080046c9 	.word	0x080046c9
 80046b8:	080047a9 	.word	0x080047a9
 80046bc:	08004861 	.word	0x08004861
 80046c0:	080046ed 	.word	0x080046ed
 80046c4:	08004705 	.word	0x08004705
      {
        case TUSB_REQ_SET_ADDRESS:
          // Depending on mcu, status phase could be sent either before or after changing device address,
          // or even require stack to not response with status at all
          // Therefore DCD must take full responsibility to response and include zlp status packet if needed.
          usbd_control_set_request(p_request); // set request since DCD has no access to tud_control_status() API
 80046c8:	6838      	ldr	r0, [r7, #0]
 80046ca:	f001 f979 	bl	80059c0 <usbd_control_set_request>
          dcd_set_address(rhport, (uint8_t) p_request->wValue);
 80046ce:	683b      	ldr	r3, [r7, #0]
 80046d0:	885b      	ldrh	r3, [r3, #2]
 80046d2:	b29b      	uxth	r3, r3
 80046d4:	b2da      	uxtb	r2, r3
 80046d6:	79fb      	ldrb	r3, [r7, #7]
 80046d8:	4611      	mov	r1, r2
 80046da:	4618      	mov	r0, r3
 80046dc:	f001 fedc 	bl	8006498 <dcd_set_address>
          // skip tud_control_status()
          _usbd_dev.addressed = 1;
 80046e0:	4a46      	ldr	r2, [pc, #280]	; (80047fc <process_control_request+0x2b8>)
 80046e2:	7813      	ldrb	r3, [r2, #0]
 80046e4:	f043 0302 	orr.w	r3, r3, #2
 80046e8:	7013      	strb	r3, [r2, #0]
        break;
 80046ea:	e0c5      	b.n	8004878 <process_control_request+0x334>

        case TUSB_REQ_GET_CONFIGURATION:
        {
          uint8_t cfg_num = _usbd_dev.cfg_num;
 80046ec:	4b43      	ldr	r3, [pc, #268]	; (80047fc <process_control_request+0x2b8>)
 80046ee:	785b      	ldrb	r3, [r3, #1]
 80046f0:	b2db      	uxtb	r3, r3
 80046f2:	74fb      	strb	r3, [r7, #19]
          tud_control_xfer(rhport, p_request, &cfg_num, 1);
 80046f4:	f107 0213 	add.w	r2, r7, #19
 80046f8:	79f8      	ldrb	r0, [r7, #7]
 80046fa:	2301      	movs	r3, #1
 80046fc:	6839      	ldr	r1, [r7, #0]
 80046fe:	f001 f8d3 	bl	80058a8 <tud_control_xfer>
        }
        break;
 8004702:	e0b9      	b.n	8004878 <process_control_request+0x334>

        case TUSB_REQ_SET_CONFIGURATION:
        {
          uint8_t const cfg_num = (uint8_t) p_request->wValue;
 8004704:	683b      	ldr	r3, [r7, #0]
 8004706:	885b      	ldrh	r3, [r3, #2]
 8004708:	b29b      	uxth	r3, r3
 800470a:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f

          // Only process if new configure is different
          if (_usbd_dev.cfg_num != cfg_num)
 800470e:	4b3b      	ldr	r3, [pc, #236]	; (80047fc <process_control_request+0x2b8>)
 8004710:	785b      	ldrb	r3, [r3, #1]
 8004712:	b2db      	uxtb	r3, r3
 8004714:	f897 204f 	ldrb.w	r2, [r7, #79]	; 0x4f
 8004718:	429a      	cmp	r2, r3
 800471a:	d03b      	beq.n	8004794 <process_control_request+0x250>
          {
            if ( _usbd_dev.cfg_num )
 800471c:	4b37      	ldr	r3, [pc, #220]	; (80047fc <process_control_request+0x2b8>)
 800471e:	785b      	ldrb	r3, [r3, #1]
 8004720:	b2db      	uxtb	r3, r3
 8004722:	2b00      	cmp	r3, #0
 8004724:	d00f      	beq.n	8004746 <process_control_request+0x202>
            {
              // already configured: need to clear all endpoints and driver first
              TU_LOG_USBD("  Clear current Configuration (%u) before switching\r\n", _usbd_dev.cfg_num);

              // close all non-control endpoints, cancel all pending transfers if any
              dcd_edpt_close_all(rhport);
 8004726:	79fb      	ldrb	r3, [r7, #7]
 8004728:	4618      	mov	r0, r3
 800472a:	f002 f85f 	bl	80067ec <dcd_edpt_close_all>

              // close all drivers and current configured state except bus speed
              uint8_t const speed = _usbd_dev.speed;
 800472e:	4b33      	ldr	r3, [pc, #204]	; (80047fc <process_control_request+0x2b8>)
 8004730:	789b      	ldrb	r3, [r3, #2]
 8004732:	f887 304e 	strb.w	r3, [r7, #78]	; 0x4e
              configuration_reset(rhport);
 8004736:	79fb      	ldrb	r3, [r7, #7]
 8004738:	4618      	mov	r0, r3
 800473a:	f7ff fcf5 	bl	8004128 <configuration_reset>

              _usbd_dev.speed = speed; // restore speed
 800473e:	4a2f      	ldr	r2, [pc, #188]	; (80047fc <process_control_request+0x2b8>)
 8004740:	f897 304e 	ldrb.w	r3, [r7, #78]	; 0x4e
 8004744:	7093      	strb	r3, [r2, #2]
            }

            // Handle the new configuration and execute the corresponding callback
            if ( cfg_num )
 8004746:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800474a:	2b00      	cmp	r3, #0
 800474c:	d01d      	beq.n	800478a <process_control_request+0x246>
            {
              // switch to new configuration if not zero
              TU_ASSERT( process_set_config(rhport, cfg_num) );
 800474e:	f897 204f 	ldrb.w	r2, [r7, #79]	; 0x4f
 8004752:	79fb      	ldrb	r3, [r7, #7]
 8004754:	4611      	mov	r1, r2
 8004756:	4618      	mov	r0, r3
 8004758:	f000 f9ee 	bl	8004b38 <process_set_config>
 800475c:	4603      	mov	r3, r0
 800475e:	f083 0301 	eor.w	r3, r3, #1
 8004762:	b2db      	uxtb	r3, r3
 8004764:	2b00      	cmp	r3, #0
 8004766:	d00a      	beq.n	800477e <process_control_request+0x23a>
 8004768:	4b22      	ldr	r3, [pc, #136]	; (80047f4 <process_control_request+0x2b0>)
 800476a:	64bb      	str	r3, [r7, #72]	; 0x48
 800476c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800476e:	681b      	ldr	r3, [r3, #0]
 8004770:	f003 0301 	and.w	r3, r3, #1
 8004774:	2b00      	cmp	r3, #0
 8004776:	d000      	beq.n	800477a <process_control_request+0x236>
 8004778:	be00      	bkpt	0x0000
 800477a:	2300      	movs	r3, #0
 800477c:	e1d3      	b.n	8004b26 <process_control_request+0x5e2>

              if ( tud_mount_cb ) tud_mount_cb();
 800477e:	4b23      	ldr	r3, [pc, #140]	; (800480c <process_control_request+0x2c8>)
 8004780:	2b00      	cmp	r3, #0
 8004782:	d007      	beq.n	8004794 <process_control_request+0x250>
 8004784:	f7fc fa48 	bl	8000c18 <tud_mount_cb>
 8004788:	e004      	b.n	8004794 <process_control_request+0x250>
            }
            else
            {
              if ( tud_umount_cb ) tud_umount_cb();
 800478a:	4b21      	ldr	r3, [pc, #132]	; (8004810 <process_control_request+0x2cc>)
 800478c:	2b00      	cmp	r3, #0
 800478e:	d001      	beq.n	8004794 <process_control_request+0x250>
 8004790:	f7fc fa50 	bl	8000c34 <tud_umount_cb>
            }
          }

          _usbd_dev.cfg_num = cfg_num;
 8004794:	4a19      	ldr	r2, [pc, #100]	; (80047fc <process_control_request+0x2b8>)
 8004796:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800479a:	7053      	strb	r3, [r2, #1]
          tud_control_status(rhport, p_request);
 800479c:	79fb      	ldrb	r3, [r7, #7]
 800479e:	6839      	ldr	r1, [r7, #0]
 80047a0:	4618      	mov	r0, r3
 80047a2:	f001 f80f 	bl	80057c4 <tud_control_status>
        }
        break;
 80047a6:	e067      	b.n	8004878 <process_control_request+0x334>

        case TUSB_REQ_GET_DESCRIPTOR:
          TU_VERIFY( process_get_descriptor(rhport, p_request) );
 80047a8:	79fb      	ldrb	r3, [r7, #7]
 80047aa:	6839      	ldr	r1, [r7, #0]
 80047ac:	4618      	mov	r0, r3
 80047ae:	f000 fafd 	bl	8004dac <process_get_descriptor>
 80047b2:	4603      	mov	r3, r0
 80047b4:	f083 0301 	eor.w	r3, r3, #1
 80047b8:	b2db      	uxtb	r3, r3
 80047ba:	2b00      	cmp	r3, #0
 80047bc:	d05b      	beq.n	8004876 <process_control_request+0x332>
 80047be:	2300      	movs	r3, #0
 80047c0:	e1b1      	b.n	8004b26 <process_control_request+0x5e2>
        break;

        case TUSB_REQ_SET_FEATURE:
          // Only support remote wakeup for device feature
          TU_VERIFY(TUSB_REQ_FEATURE_REMOTE_WAKEUP == p_request->wValue);
 80047c2:	683b      	ldr	r3, [r7, #0]
 80047c4:	885b      	ldrh	r3, [r3, #2]
 80047c6:	b29b      	uxth	r3, r3
 80047c8:	2b01      	cmp	r3, #1
 80047ca:	d001      	beq.n	80047d0 <process_control_request+0x28c>
 80047cc:	2300      	movs	r3, #0
 80047ce:	e1aa      	b.n	8004b26 <process_control_request+0x5e2>

          TU_LOG_USBD("    Enable Remote Wakeup\r\n");

          // Host may enable remote wake up before suspending especially HID device
          _usbd_dev.remote_wakeup_en = true;
 80047d0:	4a0a      	ldr	r2, [pc, #40]	; (80047fc <process_control_request+0x2b8>)
 80047d2:	7813      	ldrb	r3, [r2, #0]
 80047d4:	f043 0308 	orr.w	r3, r3, #8
 80047d8:	7013      	strb	r3, [r2, #0]
          tud_control_status(rhport, p_request);
 80047da:	79fb      	ldrb	r3, [r7, #7]
 80047dc:	6839      	ldr	r1, [r7, #0]
 80047de:	4618      	mov	r0, r3
 80047e0:	f000 fff0 	bl	80057c4 <tud_control_status>
        break;
 80047e4:	e048      	b.n	8004878 <process_control_request+0x334>

        case TUSB_REQ_CLEAR_FEATURE:
          // Only support remote wakeup for device feature
          TU_VERIFY(TUSB_REQ_FEATURE_REMOTE_WAKEUP == p_request->wValue);
 80047e6:	683b      	ldr	r3, [r7, #0]
 80047e8:	885b      	ldrh	r3, [r3, #2]
 80047ea:	b29b      	uxth	r3, r3
 80047ec:	2b01      	cmp	r3, #1
 80047ee:	d011      	beq.n	8004814 <process_control_request+0x2d0>
 80047f0:	2300      	movs	r3, #0
 80047f2:	e198      	b.n	8004b26 <process_control_request+0x5e2>
 80047f4:	e000edf0 	.word	0xe000edf0
 80047f8:	00000000 	.word	0x00000000
 80047fc:	24001190 	.word	0x24001190
 8004800:	240011cc 	.word	0x240011cc
 8004804:	240011c8 	.word	0x240011c8
 8004808:	0801019c 	.word	0x0801019c
 800480c:	08000c19 	.word	0x08000c19
 8004810:	08000c35 	.word	0x08000c35

          TU_LOG_USBD("    Disable Remote Wakeup\r\n");

          // Host may disable remote wake up after resuming
          _usbd_dev.remote_wakeup_en = false;
 8004814:	4aa1      	ldr	r2, [pc, #644]	; (8004a9c <process_control_request+0x558>)
 8004816:	7813      	ldrb	r3, [r2, #0]
 8004818:	f36f 03c3 	bfc	r3, #3, #1
 800481c:	7013      	strb	r3, [r2, #0]
          tud_control_status(rhport, p_request);
 800481e:	79fb      	ldrb	r3, [r7, #7]
 8004820:	6839      	ldr	r1, [r7, #0]
 8004822:	4618      	mov	r0, r3
 8004824:	f000 ffce 	bl	80057c4 <tud_control_status>
        break;
 8004828:	e026      	b.n	8004878 <process_control_request+0x334>
        case TUSB_REQ_GET_STATUS:
        {
          // Device status bit mask
          // - Bit 0: Self Powered
          // - Bit 1: Remote Wakeup enabled
          uint16_t status = (uint16_t) ((_usbd_dev.self_powered ? 1u : 0u) | (_usbd_dev.remote_wakeup_en ? 2u : 0u));
 800482a:	4b9c      	ldr	r3, [pc, #624]	; (8004a9c <process_control_request+0x558>)
 800482c:	781b      	ldrb	r3, [r3, #0]
 800482e:	095b      	lsrs	r3, r3, #5
 8004830:	b2db      	uxtb	r3, r3
 8004832:	b29b      	uxth	r3, r3
 8004834:	f003 0301 	and.w	r3, r3, #1
 8004838:	b29a      	uxth	r2, r3
 800483a:	4b98      	ldr	r3, [pc, #608]	; (8004a9c <process_control_request+0x558>)
 800483c:	781b      	ldrb	r3, [r3, #0]
 800483e:	089b      	lsrs	r3, r3, #2
 8004840:	b2db      	uxtb	r3, r3
 8004842:	b29b      	uxth	r3, r3
 8004844:	f003 0302 	and.w	r3, r3, #2
 8004848:	b29b      	uxth	r3, r3
 800484a:	4313      	orrs	r3, r2
 800484c:	b29b      	uxth	r3, r3
 800484e:	823b      	strh	r3, [r7, #16]
          tud_control_xfer(rhport, p_request, &status, 2);
 8004850:	f107 0210 	add.w	r2, r7, #16
 8004854:	79f8      	ldrb	r0, [r7, #7]
 8004856:	2302      	movs	r3, #2
 8004858:	6839      	ldr	r1, [r7, #0]
 800485a:	f001 f825 	bl	80058a8 <tud_control_xfer>
        }
        break;
 800485e:	e00b      	b.n	8004878 <process_control_request+0x334>

        // Unknown/Unsupported request
        default: TU_BREAKPOINT(); return false;
 8004860:	4b8f      	ldr	r3, [pc, #572]	; (8004aa0 <process_control_request+0x55c>)
 8004862:	647b      	str	r3, [r7, #68]	; 0x44
 8004864:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004866:	681b      	ldr	r3, [r3, #0]
 8004868:	f003 0301 	and.w	r3, r3, #1
 800486c:	2b00      	cmp	r3, #0
 800486e:	d000      	beq.n	8004872 <process_control_request+0x32e>
 8004870:	be00      	bkpt	0x0000
 8004872:	2300      	movs	r3, #0
 8004874:	e157      	b.n	8004b26 <process_control_request+0x5e2>
        break;
 8004876:	bf00      	nop
      }
    break;
 8004878:	e154      	b.n	8004b24 <process_control_request+0x5e0>

    //------------- Class/Interface Specific Request -------------//
    case TUSB_REQ_RCPT_INTERFACE:
    {
      uint8_t const itf = tu_u16_low(p_request->wIndex);
 800487a:	683b      	ldr	r3, [r7, #0]
 800487c:	889b      	ldrh	r3, [r3, #4]
 800487e:	b29b      	uxth	r3, r3
 8004880:	84fb      	strh	r3, [r7, #38]	; 0x26
 8004882:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8004884:	b2db      	uxtb	r3, r3
 8004886:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
      TU_VERIFY(itf < TU_ARRAY_SIZE(_usbd_dev.itf2drv));
 800488a:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800488e:	2b0f      	cmp	r3, #15
 8004890:	d901      	bls.n	8004896 <process_control_request+0x352>
 8004892:	2300      	movs	r3, #0
 8004894:	e147      	b.n	8004b26 <process_control_request+0x5e2>

      usbd_class_driver_t const * driver = get_driver(_usbd_dev.itf2drv[itf]);
 8004896:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800489a:	4a80      	ldr	r2, [pc, #512]	; (8004a9c <process_control_request+0x558>)
 800489c:	4413      	add	r3, r2
 800489e:	78db      	ldrb	r3, [r3, #3]
 80048a0:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  usbd_class_driver_t const * driver = NULL;
 80048a4:	2300      	movs	r3, #0
 80048a6:	623b      	str	r3, [r7, #32]
  if ( drvid < _app_driver_count ) {
 80048a8:	4b7e      	ldr	r3, [pc, #504]	; (8004aa4 <process_control_request+0x560>)
 80048aa:	781b      	ldrb	r3, [r3, #0]
 80048ac:	f897 2025 	ldrb.w	r2, [r7, #37]	; 0x25
 80048b0:	429a      	cmp	r2, r3
 80048b2:	d20a      	bcs.n	80048ca <process_control_request+0x386>
    driver = &_app_driver[drvid];
 80048b4:	4b7c      	ldr	r3, [pc, #496]	; (8004aa8 <process_control_request+0x564>)
 80048b6:	6819      	ldr	r1, [r3, #0]
 80048b8:	f897 2025 	ldrb.w	r2, [r7, #37]	; 0x25
 80048bc:	4613      	mov	r3, r2
 80048be:	005b      	lsls	r3, r3, #1
 80048c0:	4413      	add	r3, r2
 80048c2:	00db      	lsls	r3, r3, #3
 80048c4:	440b      	add	r3, r1
 80048c6:	623b      	str	r3, [r7, #32]
 80048c8:	e012      	b.n	80048f0 <process_control_request+0x3ac>
  } else if ( drvid < TOTAL_DRIVER_COUNT && BUILTIN_DRIVER_COUNT > 0 ){
 80048ca:	4b76      	ldr	r3, [pc, #472]	; (8004aa4 <process_control_request+0x560>)
 80048cc:	781b      	ldrb	r3, [r3, #0]
 80048ce:	1c5a      	adds	r2, r3, #1
 80048d0:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 80048d4:	429a      	cmp	r2, r3
 80048d6:	db0b      	blt.n	80048f0 <process_control_request+0x3ac>
    driver = &_usbd_driver[drvid - _app_driver_count];
 80048d8:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 80048dc:	4a71      	ldr	r2, [pc, #452]	; (8004aa4 <process_control_request+0x560>)
 80048de:	7812      	ldrb	r2, [r2, #0]
 80048e0:	1a9a      	subs	r2, r3, r2
 80048e2:	4613      	mov	r3, r2
 80048e4:	005b      	lsls	r3, r3, #1
 80048e6:	4413      	add	r3, r2
 80048e8:	00db      	lsls	r3, r3, #3
 80048ea:	4a70      	ldr	r2, [pc, #448]	; (8004aac <process_control_request+0x568>)
 80048ec:	4413      	add	r3, r2
 80048ee:	623b      	str	r3, [r7, #32]
  return driver;
 80048f0:	6a3b      	ldr	r3, [r7, #32]
      usbd_class_driver_t const * driver = get_driver(_usbd_dev.itf2drv[itf]);
 80048f2:	653b      	str	r3, [r7, #80]	; 0x50
      TU_VERIFY(driver);
 80048f4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80048f6:	2b00      	cmp	r3, #0
 80048f8:	d101      	bne.n	80048fe <process_control_request+0x3ba>
 80048fa:	2300      	movs	r3, #0
 80048fc:	e113      	b.n	8004b26 <process_control_request+0x5e2>

      // all requests to Interface (STD or Class) is forwarded to class driver.
      // notable requests are: GET HID REPORT DESCRIPTOR, SET_INTERFACE, GET_INTERFACE
      if ( !invoke_class_control(rhport, driver, p_request) )
 80048fe:	79fb      	ldrb	r3, [r7, #7]
 8004900:	683a      	ldr	r2, [r7, #0]
 8004902:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8004904:	4618      	mov	r0, r3
 8004906:	f7ff fe05 	bl	8004514 <invoke_class_control>
 800490a:	4603      	mov	r3, r0
 800490c:	f083 0301 	eor.w	r3, r3, #1
 8004910:	b2db      	uxtb	r3, r3
 8004912:	2b00      	cmp	r3, #0
 8004914:	f000 8105 	beq.w	8004b22 <process_control_request+0x5de>
      {
        // For GET_INTERFACE and SET_INTERFACE, it is mandatory to respond even if the class
        // driver doesn't use alternate settings or implement this
        TU_VERIFY(TUSB_REQ_TYPE_STANDARD == p_request->bmRequestType_bit.type);
 8004918:	683b      	ldr	r3, [r7, #0]
 800491a:	781b      	ldrb	r3, [r3, #0]
 800491c:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8004920:	b2db      	uxtb	r3, r3
 8004922:	2b00      	cmp	r3, #0
 8004924:	d001      	beq.n	800492a <process_control_request+0x3e6>
 8004926:	2300      	movs	r3, #0
 8004928:	e0fd      	b.n	8004b26 <process_control_request+0x5e2>

        switch(p_request->bRequest)
 800492a:	683b      	ldr	r3, [r7, #0]
 800492c:	785b      	ldrb	r3, [r3, #1]
 800492e:	3b0a      	subs	r3, #10
 8004930:	2b01      	cmp	r3, #1
 8004932:	d816      	bhi.n	8004962 <process_control_request+0x41e>
        {
          case TUSB_REQ_GET_INTERFACE:
          case TUSB_REQ_SET_INTERFACE:
            // Clear complete callback if driver set since it can also stall the request.
            usbd_control_set_complete_callback(NULL);
 8004934:	2000      	movs	r0, #0
 8004936:	f001 f833 	bl	80059a0 <usbd_control_set_complete_callback>

            if (TUSB_REQ_GET_INTERFACE == p_request->bRequest)
 800493a:	683b      	ldr	r3, [r7, #0]
 800493c:	785b      	ldrb	r3, [r3, #1]
 800493e:	2b0a      	cmp	r3, #10
 8004940:	d109      	bne.n	8004956 <process_control_request+0x412>
            {
              uint8_t alternate = 0;
 8004942:	2300      	movs	r3, #0
 8004944:	73fb      	strb	r3, [r7, #15]
              tud_control_xfer(rhport, p_request, &alternate, 1);
 8004946:	f107 020f 	add.w	r2, r7, #15
 800494a:	79f8      	ldrb	r0, [r7, #7]
 800494c:	2301      	movs	r3, #1
 800494e:	6839      	ldr	r1, [r7, #0]
 8004950:	f000 ffaa 	bl	80058a8 <tud_control_xfer>
            }else
            {
              tud_control_status(rhport, p_request);
            }
          break;
 8004954:	e007      	b.n	8004966 <process_control_request+0x422>
              tud_control_status(rhport, p_request);
 8004956:	79fb      	ldrb	r3, [r7, #7]
 8004958:	6839      	ldr	r1, [r7, #0]
 800495a:	4618      	mov	r0, r3
 800495c:	f000 ff32 	bl	80057c4 <tud_control_status>
          break;
 8004960:	e001      	b.n	8004966 <process_control_request+0x422>

          default: return false;
 8004962:	2300      	movs	r3, #0
 8004964:	e0df      	b.n	8004b26 <process_control_request+0x5e2>
        }
      }
    }
    break;
 8004966:	e0dc      	b.n	8004b22 <process_control_request+0x5de>

    //------------- Endpoint Request -------------//
    case TUSB_REQ_RCPT_ENDPOINT:
    {
      uint8_t const ep_addr = tu_u16_low(p_request->wIndex);
 8004968:	683b      	ldr	r3, [r7, #0]
 800496a:	889b      	ldrh	r3, [r3, #4]
 800496c:	b29b      	uxth	r3, r3
 800496e:	83bb      	strh	r3, [r7, #28]
 8004970:	8bbb      	ldrh	r3, [r7, #28]
 8004972:	b2db      	uxtb	r3, r3
 8004974:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 8004978:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800497c:	77bb      	strb	r3, [r7, #30]
  return (uint8_t)(addr & (~TUSB_DIR_IN_MASK));
 800497e:	7fbb      	ldrb	r3, [r7, #30]
 8004980:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004984:	b2db      	uxtb	r3, r3
      uint8_t const ep_num  = tu_edpt_number(ep_addr);
 8004986:	f887 3066 	strb.w	r3, [r7, #102]	; 0x66
 800498a:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800498e:	77fb      	strb	r3, [r7, #31]
  return (addr & TUSB_DIR_IN_MASK) ? TUSB_DIR_IN : TUSB_DIR_OUT;
 8004990:	7ffb      	ldrb	r3, [r7, #31]
 8004992:	09db      	lsrs	r3, r3, #7
 8004994:	b2db      	uxtb	r3, r3
      uint8_t const ep_dir  = tu_edpt_dir(ep_addr);
 8004996:	f887 3065 	strb.w	r3, [r7, #101]	; 0x65

      TU_ASSERT(ep_num < TU_ARRAY_SIZE(_usbd_dev.ep2drv) );
 800499a:	f897 3066 	ldrb.w	r3, [r7, #102]	; 0x66
 800499e:	2b08      	cmp	r3, #8
 80049a0:	d90a      	bls.n	80049b8 <process_control_request+0x474>
 80049a2:	4b3f      	ldr	r3, [pc, #252]	; (8004aa0 <process_control_request+0x55c>)
 80049a4:	65bb      	str	r3, [r7, #88]	; 0x58
 80049a6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80049a8:	681b      	ldr	r3, [r3, #0]
 80049aa:	f003 0301 	and.w	r3, r3, #1
 80049ae:	2b00      	cmp	r3, #0
 80049b0:	d000      	beq.n	80049b4 <process_control_request+0x470>
 80049b2:	be00      	bkpt	0x0000
 80049b4:	2300      	movs	r3, #0
 80049b6:	e0b6      	b.n	8004b26 <process_control_request+0x5e2>

      usbd_class_driver_t const * driver = get_driver(_usbd_dev.ep2drv[ep_num][ep_dir]);
 80049b8:	f897 2066 	ldrb.w	r2, [r7, #102]	; 0x66
 80049bc:	f897 3065 	ldrb.w	r3, [r7, #101]	; 0x65
 80049c0:	4936      	ldr	r1, [pc, #216]	; (8004a9c <process_control_request+0x558>)
 80049c2:	0052      	lsls	r2, r2, #1
 80049c4:	440a      	add	r2, r1
 80049c6:	4413      	add	r3, r2
 80049c8:	3313      	adds	r3, #19
 80049ca:	781b      	ldrb	r3, [r3, #0]
 80049cc:	76fb      	strb	r3, [r7, #27]
  usbd_class_driver_t const * driver = NULL;
 80049ce:	2300      	movs	r3, #0
 80049d0:	617b      	str	r3, [r7, #20]
  if ( drvid < _app_driver_count ) {
 80049d2:	4b34      	ldr	r3, [pc, #208]	; (8004aa4 <process_control_request+0x560>)
 80049d4:	781b      	ldrb	r3, [r3, #0]
 80049d6:	7efa      	ldrb	r2, [r7, #27]
 80049d8:	429a      	cmp	r2, r3
 80049da:	d209      	bcs.n	80049f0 <process_control_request+0x4ac>
    driver = &_app_driver[drvid];
 80049dc:	4b32      	ldr	r3, [pc, #200]	; (8004aa8 <process_control_request+0x564>)
 80049de:	6819      	ldr	r1, [r3, #0]
 80049e0:	7efa      	ldrb	r2, [r7, #27]
 80049e2:	4613      	mov	r3, r2
 80049e4:	005b      	lsls	r3, r3, #1
 80049e6:	4413      	add	r3, r2
 80049e8:	00db      	lsls	r3, r3, #3
 80049ea:	440b      	add	r3, r1
 80049ec:	617b      	str	r3, [r7, #20]
 80049ee:	e010      	b.n	8004a12 <process_control_request+0x4ce>
  } else if ( drvid < TOTAL_DRIVER_COUNT && BUILTIN_DRIVER_COUNT > 0 ){
 80049f0:	4b2c      	ldr	r3, [pc, #176]	; (8004aa4 <process_control_request+0x560>)
 80049f2:	781b      	ldrb	r3, [r3, #0]
 80049f4:	1c5a      	adds	r2, r3, #1
 80049f6:	7efb      	ldrb	r3, [r7, #27]
 80049f8:	429a      	cmp	r2, r3
 80049fa:	db0a      	blt.n	8004a12 <process_control_request+0x4ce>
    driver = &_usbd_driver[drvid - _app_driver_count];
 80049fc:	7efb      	ldrb	r3, [r7, #27]
 80049fe:	4a29      	ldr	r2, [pc, #164]	; (8004aa4 <process_control_request+0x560>)
 8004a00:	7812      	ldrb	r2, [r2, #0]
 8004a02:	1a9a      	subs	r2, r3, r2
 8004a04:	4613      	mov	r3, r2
 8004a06:	005b      	lsls	r3, r3, #1
 8004a08:	4413      	add	r3, r2
 8004a0a:	00db      	lsls	r3, r3, #3
 8004a0c:	4a27      	ldr	r2, [pc, #156]	; (8004aac <process_control_request+0x568>)
 8004a0e:	4413      	add	r3, r2
 8004a10:	617b      	str	r3, [r7, #20]
  return driver;
 8004a12:	697b      	ldr	r3, [r7, #20]
      usbd_class_driver_t const * driver = get_driver(_usbd_dev.ep2drv[ep_num][ep_dir]);
 8004a14:	663b      	str	r3, [r7, #96]	; 0x60

      if ( TUSB_REQ_TYPE_STANDARD != p_request->bmRequestType_bit.type )
 8004a16:	683b      	ldr	r3, [r7, #0]
 8004a18:	781b      	ldrb	r3, [r3, #0]
 8004a1a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8004a1e:	b2db      	uxtb	r3, r3
 8004a20:	2b00      	cmp	r3, #0
 8004a22:	d00c      	beq.n	8004a3e <process_control_request+0x4fa>
      {
        // Forward class request to its driver
        TU_VERIFY(driver);
 8004a24:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004a26:	2b00      	cmp	r3, #0
 8004a28:	d101      	bne.n	8004a2e <process_control_request+0x4ea>
 8004a2a:	2300      	movs	r3, #0
 8004a2c:	e07b      	b.n	8004b26 <process_control_request+0x5e2>
        return invoke_class_control(rhport, driver, p_request);
 8004a2e:	79fb      	ldrb	r3, [r7, #7]
 8004a30:	683a      	ldr	r2, [r7, #0]
 8004a32:	6e39      	ldr	r1, [r7, #96]	; 0x60
 8004a34:	4618      	mov	r0, r3
 8004a36:	f7ff fd6d 	bl	8004514 <invoke_class_control>
 8004a3a:	4603      	mov	r3, r0
 8004a3c:	e073      	b.n	8004b26 <process_control_request+0x5e2>
      }
      else
      {
        // Handle STD request to endpoint
        switch ( p_request->bRequest )
 8004a3e:	683b      	ldr	r3, [r7, #0]
 8004a40:	785b      	ldrb	r3, [r3, #1]
 8004a42:	2b03      	cmp	r3, #3
 8004a44:	d018      	beq.n	8004a78 <process_control_request+0x534>
 8004a46:	2b03      	cmp	r3, #3
 8004a48:	dc53      	bgt.n	8004af2 <process_control_request+0x5ae>
 8004a4a:	2b00      	cmp	r3, #0
 8004a4c:	d002      	beq.n	8004a54 <process_control_request+0x510>
 8004a4e:	2b01      	cmp	r3, #1
 8004a50:	d012      	beq.n	8004a78 <process_control_request+0x534>
 8004a52:	e04e      	b.n	8004af2 <process_control_request+0x5ae>
        {
          case TUSB_REQ_GET_STATUS:
          {
            uint16_t status = usbd_edpt_stalled(rhport, ep_addr) ? 0x0001 : 0x0000;
 8004a54:	f897 2067 	ldrb.w	r2, [r7, #103]	; 0x67
 8004a58:	79fb      	ldrb	r3, [r7, #7]
 8004a5a:	4611      	mov	r1, r2
 8004a5c:	4618      	mov	r0, r3
 8004a5e:	f000 fe5b 	bl	8005718 <usbd_edpt_stalled>
 8004a62:	4603      	mov	r3, r0
 8004a64:	b29b      	uxth	r3, r3
 8004a66:	81bb      	strh	r3, [r7, #12]
            tud_control_xfer(rhport, p_request, &status, 2);
 8004a68:	f107 020c 	add.w	r2, r7, #12
 8004a6c:	79f8      	ldrb	r0, [r7, #7]
 8004a6e:	2302      	movs	r3, #2
 8004a70:	6839      	ldr	r1, [r7, #0]
 8004a72:	f000 ff19 	bl	80058a8 <tud_control_xfer>
          }
          break;
 8004a76:	e048      	b.n	8004b0a <process_control_request+0x5c6>

          case TUSB_REQ_CLEAR_FEATURE:
          case TUSB_REQ_SET_FEATURE:
          {
            if ( TUSB_REQ_FEATURE_EDPT_HALT == p_request->wValue )
 8004a78:	683b      	ldr	r3, [r7, #0]
 8004a7a:	885b      	ldrh	r3, [r3, #2]
 8004a7c:	b29b      	uxth	r3, r3
 8004a7e:	2b00      	cmp	r3, #0
 8004a80:	d11d      	bne.n	8004abe <process_control_request+0x57a>
            {
              if ( TUSB_REQ_CLEAR_FEATURE ==  p_request->bRequest )
 8004a82:	683b      	ldr	r3, [r7, #0]
 8004a84:	785b      	ldrb	r3, [r3, #1]
 8004a86:	2b01      	cmp	r3, #1
 8004a88:	d112      	bne.n	8004ab0 <process_control_request+0x56c>
              {
                usbd_edpt_clear_stall(rhport, ep_addr);
 8004a8a:	f897 2067 	ldrb.w	r2, [r7, #103]	; 0x67
 8004a8e:	79fb      	ldrb	r3, [r7, #7]
 8004a90:	4611      	mov	r1, r2
 8004a92:	4618      	mov	r0, r3
 8004a94:	f000 fdf4 	bl	8005680 <usbd_edpt_clear_stall>
 8004a98:	e011      	b.n	8004abe <process_control_request+0x57a>
 8004a9a:	bf00      	nop
 8004a9c:	24001190 	.word	0x24001190
 8004aa0:	e000edf0 	.word	0xe000edf0
 8004aa4:	240011cc 	.word	0x240011cc
 8004aa8:	240011c8 	.word	0x240011c8
 8004aac:	0801019c 	.word	0x0801019c
              }else
              {
                usbd_edpt_stall(rhport, ep_addr);
 8004ab0:	f897 2067 	ldrb.w	r2, [r7, #103]	; 0x67
 8004ab4:	79fb      	ldrb	r3, [r7, #7]
 8004ab6:	4611      	mov	r1, r2
 8004ab8:	4618      	mov	r0, r3
 8004aba:	f000 fd95 	bl	80055e8 <usbd_edpt_stall>
              }
            }

            if (driver)
 8004abe:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004ac0:	2b00      	cmp	r3, #0
 8004ac2:	d021      	beq.n	8004b08 <process_control_request+0x5c4>
              // Some classes such as USBTMC needs to clear/re-init its buffer when receiving CLEAR_FEATURE request
              // We will also forward std request targeted endpoint to class drivers as well

              // STD request must always be ACKed regardless of driver returned value
              // Also clear complete callback if driver set since it can also stall the request.
              (void) invoke_class_control(rhport, driver, p_request);
 8004ac4:	79fb      	ldrb	r3, [r7, #7]
 8004ac6:	683a      	ldr	r2, [r7, #0]
 8004ac8:	6e39      	ldr	r1, [r7, #96]	; 0x60
 8004aca:	4618      	mov	r0, r3
 8004acc:	f7ff fd22 	bl	8004514 <invoke_class_control>
              usbd_control_set_complete_callback(NULL);
 8004ad0:	2000      	movs	r0, #0
 8004ad2:	f000 ff65 	bl	80059a0 <usbd_control_set_complete_callback>

              // skip ZLP status if driver already did that
              if ( !_usbd_dev.ep_status[0][TUSB_DIR_IN].busy ) tud_control_status(rhport, p_request);
 8004ad6:	4b16      	ldr	r3, [pc, #88]	; (8004b30 <process_control_request+0x5ec>)
 8004ad8:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 8004adc:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8004ae0:	b2db      	uxtb	r3, r3
 8004ae2:	2b00      	cmp	r3, #0
 8004ae4:	d110      	bne.n	8004b08 <process_control_request+0x5c4>
 8004ae6:	79fb      	ldrb	r3, [r7, #7]
 8004ae8:	6839      	ldr	r1, [r7, #0]
 8004aea:	4618      	mov	r0, r3
 8004aec:	f000 fe6a 	bl	80057c4 <tud_control_status>
            }
          }
          break;
 8004af0:	e00a      	b.n	8004b08 <process_control_request+0x5c4>

          // Unknown/Unsupported request
          default: TU_BREAKPOINT(); return false;
 8004af2:	4b10      	ldr	r3, [pc, #64]	; (8004b34 <process_control_request+0x5f0>)
 8004af4:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004af6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004af8:	681b      	ldr	r3, [r3, #0]
 8004afa:	f003 0301 	and.w	r3, r3, #1
 8004afe:	2b00      	cmp	r3, #0
 8004b00:	d000      	beq.n	8004b04 <process_control_request+0x5c0>
 8004b02:	be00      	bkpt	0x0000
 8004b04:	2300      	movs	r3, #0
 8004b06:	e00e      	b.n	8004b26 <process_control_request+0x5e2>
          break;
 8004b08:	bf00      	nop
        }
      }
    }
    break;
 8004b0a:	e00b      	b.n	8004b24 <process_control_request+0x5e0>

    // Unknown recipient
    default: TU_BREAKPOINT(); return false;
 8004b0c:	4b09      	ldr	r3, [pc, #36]	; (8004b34 <process_control_request+0x5f0>)
 8004b0e:	637b      	str	r3, [r7, #52]	; 0x34
 8004b10:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004b12:	681b      	ldr	r3, [r3, #0]
 8004b14:	f003 0301 	and.w	r3, r3, #1
 8004b18:	2b00      	cmp	r3, #0
 8004b1a:	d000      	beq.n	8004b1e <process_control_request+0x5da>
 8004b1c:	be00      	bkpt	0x0000
 8004b1e:	2300      	movs	r3, #0
 8004b20:	e001      	b.n	8004b26 <process_control_request+0x5e2>
    break;
 8004b22:	bf00      	nop
  }

  return true;
 8004b24:	2301      	movs	r3, #1
}
 8004b26:	4618      	mov	r0, r3
 8004b28:	3768      	adds	r7, #104	; 0x68
 8004b2a:	46bd      	mov	sp, r7
 8004b2c:	bd80      	pop	{r7, pc}
 8004b2e:	bf00      	nop
 8004b30:	24001190 	.word	0x24001190
 8004b34:	e000edf0 	.word	0xe000edf0

08004b38 <process_set_config>:

// Process Set Configure Request
// This function parse configuration descriptor & open drivers accordingly
static bool process_set_config(uint8_t rhport, uint8_t cfg_num)
{
 8004b38:	b580      	push	{r7, lr}
 8004b3a:	b096      	sub	sp, #88	; 0x58
 8004b3c:	af00      	add	r7, sp, #0
 8004b3e:	4603      	mov	r3, r0
 8004b40:	460a      	mov	r2, r1
 8004b42:	71fb      	strb	r3, [r7, #7]
 8004b44:	4613      	mov	r3, r2
 8004b46:	71bb      	strb	r3, [r7, #6]
  // index is cfg_num-1
  tusb_desc_configuration_t const * desc_cfg = (tusb_desc_configuration_t const *) tud_descriptor_configuration_cb(cfg_num-1);
 8004b48:	79bb      	ldrb	r3, [r7, #6]
 8004b4a:	3b01      	subs	r3, #1
 8004b4c:	b2db      	uxtb	r3, r3
 8004b4e:	4618      	mov	r0, r3
 8004b50:	f7fc fd18 	bl	8001584 <tud_descriptor_configuration_cb>
 8004b54:	64f8      	str	r0, [r7, #76]	; 0x4c
  TU_ASSERT(desc_cfg != NULL && desc_cfg->bDescriptorType == TUSB_DESC_CONFIGURATION);
 8004b56:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004b58:	2b00      	cmp	r3, #0
 8004b5a:	d003      	beq.n	8004b64 <process_set_config+0x2c>
 8004b5c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004b5e:	785b      	ldrb	r3, [r3, #1]
 8004b60:	2b02      	cmp	r3, #2
 8004b62:	d00a      	beq.n	8004b7a <process_set_config+0x42>
 8004b64:	4b8a      	ldr	r3, [pc, #552]	; (8004d90 <process_set_config+0x258>)
 8004b66:	623b      	str	r3, [r7, #32]
 8004b68:	6a3b      	ldr	r3, [r7, #32]
 8004b6a:	681b      	ldr	r3, [r3, #0]
 8004b6c:	f003 0301 	and.w	r3, r3, #1
 8004b70:	2b00      	cmp	r3, #0
 8004b72:	d000      	beq.n	8004b76 <process_set_config+0x3e>
 8004b74:	be00      	bkpt	0x0000
 8004b76:	2300      	movs	r3, #0
 8004b78:	e106      	b.n	8004d88 <process_set_config+0x250>

  // Parse configuration descriptor
  _usbd_dev.remote_wakeup_support = (desc_cfg->bmAttributes & TUSB_DESC_CONFIG_ATT_REMOTE_WAKEUP) ? 1u : 0u;
 8004b7a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004b7c:	79db      	ldrb	r3, [r3, #7]
 8004b7e:	115b      	asrs	r3, r3, #5
 8004b80:	f003 0301 	and.w	r3, r3, #1
 8004b84:	b2d9      	uxtb	r1, r3
 8004b86:	4a83      	ldr	r2, [pc, #524]	; (8004d94 <process_set_config+0x25c>)
 8004b88:	7813      	ldrb	r3, [r2, #0]
 8004b8a:	f361 1304 	bfi	r3, r1, #4, #1
 8004b8e:	7013      	strb	r3, [r2, #0]
  _usbd_dev.self_powered          = (desc_cfg->bmAttributes & TUSB_DESC_CONFIG_ATT_SELF_POWERED ) ? 1u : 0u;
 8004b90:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004b92:	79db      	ldrb	r3, [r3, #7]
 8004b94:	119b      	asrs	r3, r3, #6
 8004b96:	f003 0301 	and.w	r3, r3, #1
 8004b9a:	b2d9      	uxtb	r1, r3
 8004b9c:	4a7d      	ldr	r2, [pc, #500]	; (8004d94 <process_set_config+0x25c>)
 8004b9e:	7813      	ldrb	r3, [r2, #0]
 8004ba0:	f361 1345 	bfi	r3, r1, #5, #1
 8004ba4:	7013      	strb	r3, [r2, #0]

  // Parse interface descriptor
  uint8_t const * p_desc   = ((uint8_t const*) desc_cfg) + sizeof(tusb_desc_configuration_t);
 8004ba6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004ba8:	3309      	adds	r3, #9
 8004baa:	657b      	str	r3, [r7, #84]	; 0x54
  uint8_t const * desc_end = ((uint8_t const*) desc_cfg) + tu_le16toh(desc_cfg->wTotalLength);
 8004bac:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004bae:	885b      	ldrh	r3, [r3, #2]
 8004bb0:	b29b      	uxth	r3, r3
 8004bb2:	461a      	mov	r2, r3
 8004bb4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004bb6:	4413      	add	r3, r2
 8004bb8:	64bb      	str	r3, [r7, #72]	; 0x48

  while( p_desc < desc_end )
 8004bba:	e0df      	b.n	8004d7c <process_set_config+0x244>
  {
    uint8_t assoc_itf_count = 1;
 8004bbc:	2301      	movs	r3, #1
 8004bbe:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
 8004bc2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004bc4:	61fb      	str	r3, [r7, #28]
  return ((uint8_t const*) desc)[DESC_OFFSET_TYPE];
 8004bc6:	69fb      	ldr	r3, [r7, #28]
 8004bc8:	3301      	adds	r3, #1
 8004bca:	781b      	ldrb	r3, [r3, #0]

    // Class will always starts with Interface Association (if any) and then Interface descriptor
    if ( TUSB_DESC_INTERFACE_ASSOCIATION == tu_desc_type(p_desc) )
 8004bcc:	2b0b      	cmp	r3, #11
 8004bce:	d10f      	bne.n	8004bf0 <process_set_config+0xb8>
    {
      tusb_desc_interface_assoc_t const * desc_iad = (tusb_desc_interface_assoc_t const *) p_desc;
 8004bd0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004bd2:	647b      	str	r3, [r7, #68]	; 0x44
      assoc_itf_count = desc_iad->bInterfaceCount;
 8004bd4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004bd6:	78db      	ldrb	r3, [r3, #3]
 8004bd8:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
 8004bdc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004bde:	61bb      	str	r3, [r7, #24]
  uint8_t const* desc8 = (uint8_t const*) desc;
 8004be0:	69bb      	ldr	r3, [r7, #24]
 8004be2:	617b      	str	r3, [r7, #20]
  return desc8 + desc8[DESC_OFFSET_LEN];
 8004be4:	697b      	ldr	r3, [r7, #20]
 8004be6:	781b      	ldrb	r3, [r3, #0]
 8004be8:	461a      	mov	r2, r3
 8004bea:	697b      	ldr	r3, [r7, #20]
 8004bec:	4413      	add	r3, r2

      p_desc = tu_desc_next(p_desc); // next to Interface
 8004bee:	657b      	str	r3, [r7, #84]	; 0x54
 8004bf0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004bf2:	613b      	str	r3, [r7, #16]
  return ((uint8_t const*) desc)[DESC_OFFSET_TYPE];
 8004bf4:	693b      	ldr	r3, [r7, #16]
 8004bf6:	3301      	adds	r3, #1
 8004bf8:	781b      	ldrb	r3, [r3, #0]
      // IAD's first interface number and class should match with opened interface
      //TU_ASSERT(desc_iad->bFirstInterface == desc_itf->bInterfaceNumber &&
      //          desc_iad->bFunctionClass  == desc_itf->bInterfaceClass);
    }

    TU_ASSERT( TUSB_DESC_INTERFACE == tu_desc_type(p_desc) );
 8004bfa:	2b04      	cmp	r3, #4
 8004bfc:	d00a      	beq.n	8004c14 <process_set_config+0xdc>
 8004bfe:	4b64      	ldr	r3, [pc, #400]	; (8004d90 <process_set_config+0x258>)
 8004c00:	627b      	str	r3, [r7, #36]	; 0x24
 8004c02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c04:	681b      	ldr	r3, [r3, #0]
 8004c06:	f003 0301 	and.w	r3, r3, #1
 8004c0a:	2b00      	cmp	r3, #0
 8004c0c:	d000      	beq.n	8004c10 <process_set_config+0xd8>
 8004c0e:	be00      	bkpt	0x0000
 8004c10:	2300      	movs	r3, #0
 8004c12:	e0b9      	b.n	8004d88 <process_set_config+0x250>
    tusb_desc_interface_t const * desc_itf = (tusb_desc_interface_t const*) p_desc;
 8004c14:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004c16:	643b      	str	r3, [r7, #64]	; 0x40

    // Find driver for this interface
    uint16_t const remaining_len = (uint16_t) (desc_end-p_desc);
 8004c18:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004c1a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004c1c:	1ad3      	subs	r3, r2, r3
 8004c1e:	87fb      	strh	r3, [r7, #62]	; 0x3e
    uint8_t drv_id;
    for (drv_id = 0; drv_id < TOTAL_DRIVER_COUNT; drv_id++)
 8004c20:	2300      	movs	r3, #0
 8004c22:	f887 3052 	strb.w	r3, [r7, #82]	; 0x52
 8004c26:	e08f      	b.n	8004d48 <process_set_config+0x210>
 8004c28:	f897 3052 	ldrb.w	r3, [r7, #82]	; 0x52
 8004c2c:	73fb      	strb	r3, [r7, #15]
  usbd_class_driver_t const * driver = NULL;
 8004c2e:	2300      	movs	r3, #0
 8004c30:	60bb      	str	r3, [r7, #8]
  if ( drvid < _app_driver_count ) {
 8004c32:	4b59      	ldr	r3, [pc, #356]	; (8004d98 <process_set_config+0x260>)
 8004c34:	781b      	ldrb	r3, [r3, #0]
 8004c36:	7bfa      	ldrb	r2, [r7, #15]
 8004c38:	429a      	cmp	r2, r3
 8004c3a:	d209      	bcs.n	8004c50 <process_set_config+0x118>
    driver = &_app_driver[drvid];
 8004c3c:	4b57      	ldr	r3, [pc, #348]	; (8004d9c <process_set_config+0x264>)
 8004c3e:	6819      	ldr	r1, [r3, #0]
 8004c40:	7bfa      	ldrb	r2, [r7, #15]
 8004c42:	4613      	mov	r3, r2
 8004c44:	005b      	lsls	r3, r3, #1
 8004c46:	4413      	add	r3, r2
 8004c48:	00db      	lsls	r3, r3, #3
 8004c4a:	440b      	add	r3, r1
 8004c4c:	60bb      	str	r3, [r7, #8]
 8004c4e:	e010      	b.n	8004c72 <process_set_config+0x13a>
  } else if ( drvid < TOTAL_DRIVER_COUNT && BUILTIN_DRIVER_COUNT > 0 ){
 8004c50:	4b51      	ldr	r3, [pc, #324]	; (8004d98 <process_set_config+0x260>)
 8004c52:	781b      	ldrb	r3, [r3, #0]
 8004c54:	1c5a      	adds	r2, r3, #1
 8004c56:	7bfb      	ldrb	r3, [r7, #15]
 8004c58:	429a      	cmp	r2, r3
 8004c5a:	db0a      	blt.n	8004c72 <process_set_config+0x13a>
    driver = &_usbd_driver[drvid - _app_driver_count];
 8004c5c:	7bfb      	ldrb	r3, [r7, #15]
 8004c5e:	4a4e      	ldr	r2, [pc, #312]	; (8004d98 <process_set_config+0x260>)
 8004c60:	7812      	ldrb	r2, [r2, #0]
 8004c62:	1a9a      	subs	r2, r3, r2
 8004c64:	4613      	mov	r3, r2
 8004c66:	005b      	lsls	r3, r3, #1
 8004c68:	4413      	add	r3, r2
 8004c6a:	00db      	lsls	r3, r3, #3
 8004c6c:	4a4c      	ldr	r2, [pc, #304]	; (8004da0 <process_set_config+0x268>)
 8004c6e:	4413      	add	r3, r2
 8004c70:	60bb      	str	r3, [r7, #8]
  return driver;
 8004c72:	68bb      	ldr	r3, [r7, #8]
    {
      usbd_class_driver_t const *driver = get_driver(drv_id);
 8004c74:	63bb      	str	r3, [r7, #56]	; 0x38
      TU_ASSERT(driver);
 8004c76:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004c78:	2b00      	cmp	r3, #0
 8004c7a:	d10a      	bne.n	8004c92 <process_set_config+0x15a>
 8004c7c:	4b44      	ldr	r3, [pc, #272]	; (8004d90 <process_set_config+0x258>)
 8004c7e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004c80:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004c82:	681b      	ldr	r3, [r3, #0]
 8004c84:	f003 0301 	and.w	r3, r3, #1
 8004c88:	2b00      	cmp	r3, #0
 8004c8a:	d000      	beq.n	8004c8e <process_set_config+0x156>
 8004c8c:	be00      	bkpt	0x0000
 8004c8e:	2300      	movs	r3, #0
 8004c90:	e07a      	b.n	8004d88 <process_set_config+0x250>
      uint16_t const drv_len = driver->open(rhport, desc_itf, remaining_len);
 8004c92:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004c94:	689b      	ldr	r3, [r3, #8]
 8004c96:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 8004c98:	79f8      	ldrb	r0, [r7, #7]
 8004c9a:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8004c9c:	4798      	blx	r3
 8004c9e:	4603      	mov	r3, r0
 8004ca0:	86fb      	strh	r3, [r7, #54]	; 0x36

      if ( (sizeof(tusb_desc_interface_t) <= drv_len)  && (drv_len <= remaining_len) )
 8004ca2:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8004ca4:	2b08      	cmp	r3, #8
 8004ca6:	d94a      	bls.n	8004d3e <process_set_config+0x206>
 8004ca8:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8004caa:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8004cac:	429a      	cmp	r2, r3
 8004cae:	d846      	bhi.n	8004d3e <process_set_config+0x206>
        // Open successfully
        TU_LOG_USBD("  %s opened\r\n", driver->name);

        // Some drivers use 2 or more interfaces but may not have IAD e.g MIDI (always) or
        // BTH (even CDC) with class in device descriptor (single interface)
        if ( assoc_itf_count == 1)
 8004cb0:	f897 3053 	ldrb.w	r3, [r7, #83]	; 0x53
 8004cb4:	2b01      	cmp	r3, #1
 8004cb6:	d107      	bne.n	8004cc8 <process_set_config+0x190>
        {
          #if CFG_TUD_CDC
          if ( driver->open == cdcd_open ) assoc_itf_count = 2;
 8004cb8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004cba:	689b      	ldr	r3, [r3, #8]
 8004cbc:	4a39      	ldr	r2, [pc, #228]	; (8004da4 <process_set_config+0x26c>)
 8004cbe:	4293      	cmp	r3, r2
 8004cc0:	d102      	bne.n	8004cc8 <process_set_config+0x190>
 8004cc2:	2302      	movs	r3, #2
 8004cc4:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
          if ( driver->open == btd_open ) assoc_itf_count = 2;
          #endif
        }

        // bind (associated) interfaces to found driver
        for(uint8_t i=0; i<assoc_itf_count; i++)
 8004cc8:	2300      	movs	r3, #0
 8004cca:	f887 3051 	strb.w	r3, [r7, #81]	; 0x51
 8004cce:	e024      	b.n	8004d1a <process_set_config+0x1e2>
        {
          uint8_t const itf_num = desc_itf->bInterfaceNumber+i;
 8004cd0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004cd2:	789a      	ldrb	r2, [r3, #2]
 8004cd4:	f897 3051 	ldrb.w	r3, [r7, #81]	; 0x51
 8004cd8:	4413      	add	r3, r2
 8004cda:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35

          // Interface number must not be used already
          TU_ASSERT(DRVID_INVALID == _usbd_dev.itf2drv[itf_num]);
 8004cde:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 8004ce2:	4a2c      	ldr	r2, [pc, #176]	; (8004d94 <process_set_config+0x25c>)
 8004ce4:	4413      	add	r3, r2
 8004ce6:	78db      	ldrb	r3, [r3, #3]
 8004ce8:	2bff      	cmp	r3, #255	; 0xff
 8004cea:	d00a      	beq.n	8004d02 <process_set_config+0x1ca>
 8004cec:	4b28      	ldr	r3, [pc, #160]	; (8004d90 <process_set_config+0x258>)
 8004cee:	633b      	str	r3, [r7, #48]	; 0x30
 8004cf0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004cf2:	681b      	ldr	r3, [r3, #0]
 8004cf4:	f003 0301 	and.w	r3, r3, #1
 8004cf8:	2b00      	cmp	r3, #0
 8004cfa:	d000      	beq.n	8004cfe <process_set_config+0x1c6>
 8004cfc:	be00      	bkpt	0x0000
 8004cfe:	2300      	movs	r3, #0
 8004d00:	e042      	b.n	8004d88 <process_set_config+0x250>
          _usbd_dev.itf2drv[itf_num] = drv_id;
 8004d02:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 8004d06:	4a23      	ldr	r2, [pc, #140]	; (8004d94 <process_set_config+0x25c>)
 8004d08:	4413      	add	r3, r2
 8004d0a:	f897 2052 	ldrb.w	r2, [r7, #82]	; 0x52
 8004d0e:	70da      	strb	r2, [r3, #3]
        for(uint8_t i=0; i<assoc_itf_count; i++)
 8004d10:	f897 3051 	ldrb.w	r3, [r7, #81]	; 0x51
 8004d14:	3301      	adds	r3, #1
 8004d16:	f887 3051 	strb.w	r3, [r7, #81]	; 0x51
 8004d1a:	f897 2051 	ldrb.w	r2, [r7, #81]	; 0x51
 8004d1e:	f897 3053 	ldrb.w	r3, [r7, #83]	; 0x53
 8004d22:	429a      	cmp	r2, r3
 8004d24:	d3d4      	bcc.n	8004cd0 <process_set_config+0x198>
        }

        // bind all endpoints to found driver
        tu_edpt_bind_driver(_usbd_dev.ep2drv, desc_itf, drv_len, drv_id);
 8004d26:	f897 3052 	ldrb.w	r3, [r7, #82]	; 0x52
 8004d2a:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8004d2c:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8004d2e:	481e      	ldr	r0, [pc, #120]	; (8004da8 <process_set_config+0x270>)
 8004d30:	f002 fd3a 	bl	80077a8 <tu_edpt_bind_driver>

        // next Interface
        p_desc += drv_len;
 8004d34:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8004d36:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8004d38:	4413      	add	r3, r2
 8004d3a:	657b      	str	r3, [r7, #84]	; 0x54

        break; // exit driver find loop
 8004d3c:	e00c      	b.n	8004d58 <process_set_config+0x220>
    for (drv_id = 0; drv_id < TOTAL_DRIVER_COUNT; drv_id++)
 8004d3e:	f897 3052 	ldrb.w	r3, [r7, #82]	; 0x52
 8004d42:	3301      	adds	r3, #1
 8004d44:	f887 3052 	strb.w	r3, [r7, #82]	; 0x52
 8004d48:	4b13      	ldr	r3, [pc, #76]	; (8004d98 <process_set_config+0x260>)
 8004d4a:	781b      	ldrb	r3, [r3, #0]
 8004d4c:	1c5a      	adds	r2, r3, #1
 8004d4e:	f897 3052 	ldrb.w	r3, [r7, #82]	; 0x52
 8004d52:	429a      	cmp	r2, r3
 8004d54:	f6bf af68 	bge.w	8004c28 <process_set_config+0xf0>
      }
    }

    // Failed if there is no supported drivers
    TU_ASSERT(drv_id < TOTAL_DRIVER_COUNT);
 8004d58:	4b0f      	ldr	r3, [pc, #60]	; (8004d98 <process_set_config+0x260>)
 8004d5a:	781b      	ldrb	r3, [r3, #0]
 8004d5c:	1c5a      	adds	r2, r3, #1
 8004d5e:	f897 3052 	ldrb.w	r3, [r7, #82]	; 0x52
 8004d62:	429a      	cmp	r2, r3
 8004d64:	da0a      	bge.n	8004d7c <process_set_config+0x244>
 8004d66:	4b0a      	ldr	r3, [pc, #40]	; (8004d90 <process_set_config+0x258>)
 8004d68:	62bb      	str	r3, [r7, #40]	; 0x28
 8004d6a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004d6c:	681b      	ldr	r3, [r3, #0]
 8004d6e:	f003 0301 	and.w	r3, r3, #1
 8004d72:	2b00      	cmp	r3, #0
 8004d74:	d000      	beq.n	8004d78 <process_set_config+0x240>
 8004d76:	be00      	bkpt	0x0000
 8004d78:	2300      	movs	r3, #0
 8004d7a:	e005      	b.n	8004d88 <process_set_config+0x250>
  while( p_desc < desc_end )
 8004d7c:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8004d7e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004d80:	429a      	cmp	r2, r3
 8004d82:	f4ff af1b 	bcc.w	8004bbc <process_set_config+0x84>
  }

  return true;
 8004d86:	2301      	movs	r3, #1
}
 8004d88:	4618      	mov	r0, r3
 8004d8a:	3758      	adds	r7, #88	; 0x58
 8004d8c:	46bd      	mov	sp, r7
 8004d8e:	bd80      	pop	{r7, pc}
 8004d90:	e000edf0 	.word	0xe000edf0
 8004d94:	24001190 	.word	0x24001190
 8004d98:	240011cc 	.word	0x240011cc
 8004d9c:	240011c8 	.word	0x240011c8
 8004da0:	0801019c 	.word	0x0801019c
 8004da4:	08001a29 	.word	0x08001a29
 8004da8:	240011a3 	.word	0x240011a3

08004dac <process_get_descriptor>:

// return descriptor's buffer and update desc_len
static bool process_get_descriptor(uint8_t rhport, tusb_control_request_t const * p_request)
{
 8004dac:	b580      	push	{r7, lr}
 8004dae:	b094      	sub	sp, #80	; 0x50
 8004db0:	af00      	add	r7, sp, #0
 8004db2:	4603      	mov	r3, r0
 8004db4:	6039      	str	r1, [r7, #0]
 8004db6:	71fb      	strb	r3, [r7, #7]
  tusb_desc_type_t const desc_type = (tusb_desc_type_t) tu_u16_high(p_request->wValue);
 8004db8:	683b      	ldr	r3, [r7, #0]
 8004dba:	885b      	ldrh	r3, [r3, #2]
 8004dbc:	b29b      	uxth	r3, r3
 8004dbe:	84bb      	strh	r3, [r7, #36]	; 0x24
TU_ATTR_ALWAYS_INLINE static inline uint8_t tu_u16_high(uint16_t ui16) { return TU_U16_HIGH(ui16); }
 8004dc0:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8004dc2:	0a1b      	lsrs	r3, r3, #8
 8004dc4:	b29b      	uxth	r3, r3
 8004dc6:	b2db      	uxtb	r3, r3
 8004dc8:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
  uint8_t const desc_index = tu_u16_low( p_request->wValue );
 8004dcc:	683b      	ldr	r3, [r7, #0]
 8004dce:	885b      	ldrh	r3, [r3, #2]
 8004dd0:	b29b      	uxth	r3, r3
 8004dd2:	84fb      	strh	r3, [r7, #38]	; 0x26
TU_ATTR_ALWAYS_INLINE static inline uint8_t tu_u16_low (uint16_t ui16) { return TU_U16_LOW(ui16); }
 8004dd4:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8004dd6:	b2db      	uxtb	r3, r3
 8004dd8:	f887 304a 	strb.w	r3, [r7, #74]	; 0x4a

  switch(desc_type)
 8004ddc:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 8004de0:	3b01      	subs	r3, #1
 8004de2:	2b0e      	cmp	r3, #14
 8004de4:	f200 80bc 	bhi.w	8004f60 <process_get_descriptor+0x1b4>
 8004de8:	a201      	add	r2, pc, #4	; (adr r2, 8004df0 <process_get_descriptor+0x44>)
 8004dea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004dee:	bf00      	nop
 8004df0:	08004e2d 	.word	0x08004e2d
 8004df4:	08004e91 	.word	0x08004e91
 8004df8:	08004ef9 	.word	0x08004ef9
 8004dfc:	08004f61 	.word	0x08004f61
 8004e00:	08004f61 	.word	0x08004f61
 8004e04:	08004f2f 	.word	0x08004f2f
 8004e08:	08004e91 	.word	0x08004e91
 8004e0c:	08004f61 	.word	0x08004f61
 8004e10:	08004f61 	.word	0x08004f61
 8004e14:	08004f61 	.word	0x08004f61
 8004e18:	08004f61 	.word	0x08004f61
 8004e1c:	08004f61 	.word	0x08004f61
 8004e20:	08004f61 	.word	0x08004f61
 8004e24:	08004f61 	.word	0x08004f61
 8004e28:	08004e43 	.word	0x08004e43
  {
    case TUSB_DESC_DEVICE:
    {
      TU_LOG_USBD(" Device\r\n");

      void* desc_device = (void*) (uintptr_t) tud_descriptor_device_cb();
 8004e2c:	f7fc fb74 	bl	8001518 <tud_descriptor_device_cb>
 8004e30:	62b8      	str	r0, [r7, #40]	; 0x28
        mod_request.wLength = CFG_TUD_ENDPOINT0_SIZE;

        return tud_control_xfer(rhport, &mod_request, desc_device, CFG_TUD_ENDPOINT0_SIZE);
      }else
      {
        return tud_control_xfer(rhport, p_request, desc_device, sizeof(tusb_desc_device_t));
 8004e32:	79f8      	ldrb	r0, [r7, #7]
 8004e34:	2312      	movs	r3, #18
 8004e36:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004e38:	6839      	ldr	r1, [r7, #0]
 8004e3a:	f000 fd35 	bl	80058a8 <tud_control_xfer>
 8004e3e:	4603      	mov	r3, r0
 8004e40:	e08f      	b.n	8004f62 <process_get_descriptor+0x1b6>
    case TUSB_DESC_BOS:
    {
      TU_LOG_USBD(" BOS\r\n");

      // requested by host if USB > 2.0 ( i.e 2.1 or 3.x )
      if (!tud_descriptor_bos_cb) return false;
 8004e42:	4b4a      	ldr	r3, [pc, #296]	; (8004f6c <process_get_descriptor+0x1c0>)
 8004e44:	2b00      	cmp	r3, #0
 8004e46:	d101      	bne.n	8004e4c <process_get_descriptor+0xa0>
 8004e48:	2300      	movs	r3, #0
 8004e4a:	e08a      	b.n	8004f62 <process_get_descriptor+0x1b6>

      uintptr_t desc_bos = (uintptr_t) tud_descriptor_bos_cb();
 8004e4c:	f3af 8000 	nop.w
 8004e50:	4603      	mov	r3, r0
 8004e52:	647b      	str	r3, [r7, #68]	; 0x44
      TU_ASSERT(desc_bos);
 8004e54:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004e56:	2b00      	cmp	r3, #0
 8004e58:	d10a      	bne.n	8004e70 <process_get_descriptor+0xc4>
 8004e5a:	4b45      	ldr	r3, [pc, #276]	; (8004f70 <process_get_descriptor+0x1c4>)
 8004e5c:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004e5e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004e60:	681b      	ldr	r3, [r3, #0]
 8004e62:	f003 0301 	and.w	r3, r3, #1
 8004e66:	2b00      	cmp	r3, #0
 8004e68:	d000      	beq.n	8004e6c <process_get_descriptor+0xc0>
 8004e6a:	be00      	bkpt	0x0000
 8004e6c:	2300      	movs	r3, #0
 8004e6e:	e078      	b.n	8004f62 <process_get_descriptor+0x1b6>

      // Use offsetof to avoid pointer to the odd/misaligned address
      uint16_t const total_len = tu_le16toh( tu_unaligned_read16((const void*) (desc_bos + offsetof(tusb_desc_bos_t, wTotalLength))) );
 8004e70:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004e72:	3302      	adds	r3, #2
 8004e74:	623b      	str	r3, [r7, #32]
  return *((uint16_t const *) mem);
 8004e76:	6a3b      	ldr	r3, [r7, #32]
 8004e78:	881b      	ldrh	r3, [r3, #0]
 8004e7a:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42

      return tud_control_xfer(rhport, p_request, (void*) desc_bos, total_len);
 8004e7e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004e80:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8004e84:	79f8      	ldrb	r0, [r7, #7]
 8004e86:	6839      	ldr	r1, [r7, #0]
 8004e88:	f000 fd0e 	bl	80058a8 <tud_control_xfer>
 8004e8c:	4603      	mov	r3, r0
 8004e8e:	e068      	b.n	8004f62 <process_get_descriptor+0x1b6>
    case TUSB_DESC_CONFIGURATION:
    case TUSB_DESC_OTHER_SPEED_CONFIG:
    {
      uintptr_t desc_config;

      if ( desc_type == TUSB_DESC_CONFIGURATION )
 8004e90:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 8004e94:	2b02      	cmp	r3, #2
 8004e96:	d107      	bne.n	8004ea8 <process_get_descriptor+0xfc>
      {
        TU_LOG_USBD(" Configuration[%u]\r\n", desc_index);
        desc_config = (uintptr_t) tud_descriptor_configuration_cb(desc_index);
 8004e98:	f897 304a 	ldrb.w	r3, [r7, #74]	; 0x4a
 8004e9c:	4618      	mov	r0, r3
 8004e9e:	f7fc fb71 	bl	8001584 <tud_descriptor_configuration_cb>
 8004ea2:	4603      	mov	r3, r0
 8004ea4:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004ea6:	e00b      	b.n	8004ec0 <process_get_descriptor+0x114>
      }else
      {
        // Host only request this after getting Device Qualifier descriptor
        TU_LOG_USBD(" Other Speed Configuration\r\n");
        TU_VERIFY( tud_descriptor_other_speed_configuration_cb );
 8004ea8:	4b32      	ldr	r3, [pc, #200]	; (8004f74 <process_get_descriptor+0x1c8>)
 8004eaa:	2b00      	cmp	r3, #0
 8004eac:	d101      	bne.n	8004eb2 <process_get_descriptor+0x106>
 8004eae:	2300      	movs	r3, #0
 8004eb0:	e057      	b.n	8004f62 <process_get_descriptor+0x1b6>
        desc_config = (uintptr_t) tud_descriptor_other_speed_configuration_cb(desc_index);
 8004eb2:	f897 304a 	ldrb.w	r3, [r7, #74]	; 0x4a
 8004eb6:	4618      	mov	r0, r3
 8004eb8:	f7fc fb42 	bl	8001540 <tud_descriptor_other_speed_configuration_cb>
 8004ebc:	4603      	mov	r3, r0
 8004ebe:	64fb      	str	r3, [r7, #76]	; 0x4c
      }

      TU_ASSERT(desc_config);
 8004ec0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004ec2:	2b00      	cmp	r3, #0
 8004ec4:	d10a      	bne.n	8004edc <process_get_descriptor+0x130>
 8004ec6:	4b2a      	ldr	r3, [pc, #168]	; (8004f70 <process_get_descriptor+0x1c4>)
 8004ec8:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004eca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004ecc:	681b      	ldr	r3, [r3, #0]
 8004ece:	f003 0301 	and.w	r3, r3, #1
 8004ed2:	2b00      	cmp	r3, #0
 8004ed4:	d000      	beq.n	8004ed8 <process_get_descriptor+0x12c>
 8004ed6:	be00      	bkpt	0x0000
 8004ed8:	2300      	movs	r3, #0
 8004eda:	e042      	b.n	8004f62 <process_get_descriptor+0x1b6>

      // Use offsetof to avoid pointer to the odd/misaligned address
      uint16_t const total_len = tu_le16toh( tu_unaligned_read16((const void*) (desc_config + offsetof(tusb_desc_configuration_t, wTotalLength))) );
 8004edc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004ede:	3302      	adds	r3, #2
 8004ee0:	61fb      	str	r3, [r7, #28]
 8004ee2:	69fb      	ldr	r3, [r7, #28]
 8004ee4:	881b      	ldrh	r3, [r3, #0]
 8004ee6:	867b      	strh	r3, [r7, #50]	; 0x32

      return tud_control_xfer(rhport, p_request, (void*) desc_config, total_len);
 8004ee8:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8004eea:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 8004eec:	79f8      	ldrb	r0, [r7, #7]
 8004eee:	6839      	ldr	r1, [r7, #0]
 8004ef0:	f000 fcda 	bl	80058a8 <tud_control_xfer>
 8004ef4:	4603      	mov	r3, r0
 8004ef6:	e034      	b.n	8004f62 <process_get_descriptor+0x1b6>
    case TUSB_DESC_STRING:
    {
      TU_LOG_USBD(" String[%u]\r\n", desc_index);

      // String Descriptor always uses the desc set from user
      uint8_t const* desc_str = (uint8_t const*) tud_descriptor_string_cb(desc_index, tu_le16toh(p_request->wIndex));
 8004ef8:	683b      	ldr	r3, [r7, #0]
 8004efa:	889b      	ldrh	r3, [r3, #4]
 8004efc:	b29a      	uxth	r2, r3
 8004efe:	f897 304a 	ldrb.w	r3, [r7, #74]	; 0x4a
 8004f02:	4611      	mov	r1, r2
 8004f04:	4618      	mov	r0, r3
 8004f06:	f7fc fb53 	bl	80015b0 <tud_descriptor_string_cb>
 8004f0a:	6378      	str	r0, [r7, #52]	; 0x34
      TU_VERIFY(desc_str);
 8004f0c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004f0e:	2b00      	cmp	r3, #0
 8004f10:	d101      	bne.n	8004f16 <process_get_descriptor+0x16a>
 8004f12:	2300      	movs	r3, #0
 8004f14:	e025      	b.n	8004f62 <process_get_descriptor+0x1b6>
 8004f16:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004f18:	61bb      	str	r3, [r7, #24]
  return ((uint8_t const*) desc)[DESC_OFFSET_LEN];
 8004f1a:	69bb      	ldr	r3, [r7, #24]
 8004f1c:	781b      	ldrb	r3, [r3, #0]

      // first byte of descriptor is its size
      return tud_control_xfer(rhport, p_request, (void*) (uintptr_t) desc_str, tu_desc_len(desc_str));
 8004f1e:	b29b      	uxth	r3, r3
 8004f20:	79f8      	ldrb	r0, [r7, #7]
 8004f22:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004f24:	6839      	ldr	r1, [r7, #0]
 8004f26:	f000 fcbf 	bl	80058a8 <tud_control_xfer>
 8004f2a:	4603      	mov	r3, r0
 8004f2c:	e019      	b.n	8004f62 <process_get_descriptor+0x1b6>

    case TUSB_DESC_DEVICE_QUALIFIER:
    {
      TU_LOG_USBD(" Device Qualifier\r\n");

      TU_VERIFY( tud_descriptor_device_qualifier_cb );
 8004f2e:	4b12      	ldr	r3, [pc, #72]	; (8004f78 <process_get_descriptor+0x1cc>)
 8004f30:	2b00      	cmp	r3, #0
 8004f32:	d101      	bne.n	8004f38 <process_get_descriptor+0x18c>
 8004f34:	2300      	movs	r3, #0
 8004f36:	e014      	b.n	8004f62 <process_get_descriptor+0x1b6>

      uint8_t const* desc_qualifier = tud_descriptor_device_qualifier_cb();
 8004f38:	f7fc faf8 	bl	800152c <tud_descriptor_device_qualifier_cb>
 8004f3c:	63b8      	str	r0, [r7, #56]	; 0x38
      TU_VERIFY(desc_qualifier);
 8004f3e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004f40:	2b00      	cmp	r3, #0
 8004f42:	d101      	bne.n	8004f48 <process_get_descriptor+0x19c>
 8004f44:	2300      	movs	r3, #0
 8004f46:	e00c      	b.n	8004f62 <process_get_descriptor+0x1b6>
 8004f48:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004f4a:	617b      	str	r3, [r7, #20]
 8004f4c:	697b      	ldr	r3, [r7, #20]
 8004f4e:	781b      	ldrb	r3, [r3, #0]

      // first byte of descriptor is its size
      return tud_control_xfer(rhport, p_request, (void*) (uintptr_t) desc_qualifier, tu_desc_len(desc_qualifier));
 8004f50:	b29b      	uxth	r3, r3
 8004f52:	79f8      	ldrb	r0, [r7, #7]
 8004f54:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004f56:	6839      	ldr	r1, [r7, #0]
 8004f58:	f000 fca6 	bl	80058a8 <tud_control_xfer>
 8004f5c:	4603      	mov	r3, r0
 8004f5e:	e000      	b.n	8004f62 <process_get_descriptor+0x1b6>
    }
    // break; // unreachable

    default: return false;
 8004f60:	2300      	movs	r3, #0
  }
}
 8004f62:	4618      	mov	r0, r3
 8004f64:	3750      	adds	r7, #80	; 0x50
 8004f66:	46bd      	mov	sp, r7
 8004f68:	bd80      	pop	{r7, pc}
 8004f6a:	bf00      	nop
 8004f6c:	00000000 	.word	0x00000000
 8004f70:	e000edf0 	.word	0xe000edf0
 8004f74:	08001541 	.word	0x08001541
 8004f78:	0800152d 	.word	0x0800152d

08004f7c <dcd_event_handler>:

//--------------------------------------------------------------------+
// DCD Event Handler
//--------------------------------------------------------------------+
TU_ATTR_FAST_FUNC void dcd_event_handler(dcd_event_t const* event, bool in_isr) {
 8004f7c:	b580      	push	{r7, lr}
 8004f7e:	b09c      	sub	sp, #112	; 0x70
 8004f80:	af00      	add	r7, sp, #0
 8004f82:	6078      	str	r0, [r7, #4]
 8004f84:	460b      	mov	r3, r1
 8004f86:	70fb      	strb	r3, [r7, #3]
  bool send = false;
 8004f88:	2300      	movs	r3, #0
 8004f8a:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
  switch (event->event_id) {
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	785b      	ldrb	r3, [r3, #1]
 8004f92:	3b02      	subs	r3, #2
 8004f94:	2b03      	cmp	r3, #3
 8004f96:	f200 80fb 	bhi.w	8005190 <dcd_event_handler+0x214>
 8004f9a:	a201      	add	r2, pc, #4	; (adr r2, 8004fa0 <dcd_event_handler+0x24>)
 8004f9c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004fa0:	08004fb1 	.word	0x08004fb1
 8004fa4:	08005021 	.word	0x08005021
 8004fa8:	08004fdd 	.word	0x08004fdd
 8004fac:	08004fff 	.word	0x08004fff
    case DCD_EVENT_UNPLUGGED:
      _usbd_dev.connected = 0;
 8004fb0:	4aa8      	ldr	r2, [pc, #672]	; (8005254 <dcd_event_handler+0x2d8>)
 8004fb2:	7813      	ldrb	r3, [r2, #0]
 8004fb4:	f36f 0300 	bfc	r3, #0, #1
 8004fb8:	7013      	strb	r3, [r2, #0]
      _usbd_dev.addressed = 0;
 8004fba:	4aa6      	ldr	r2, [pc, #664]	; (8005254 <dcd_event_handler+0x2d8>)
 8004fbc:	7813      	ldrb	r3, [r2, #0]
 8004fbe:	f36f 0341 	bfc	r3, #1, #1
 8004fc2:	7013      	strb	r3, [r2, #0]
      _usbd_dev.cfg_num = 0;
 8004fc4:	4ba3      	ldr	r3, [pc, #652]	; (8005254 <dcd_event_handler+0x2d8>)
 8004fc6:	2200      	movs	r2, #0
 8004fc8:	705a      	strb	r2, [r3, #1]
      _usbd_dev.suspended = 0;
 8004fca:	4aa2      	ldr	r2, [pc, #648]	; (8005254 <dcd_event_handler+0x2d8>)
 8004fcc:	7813      	ldrb	r3, [r2, #0]
 8004fce:	f36f 0382 	bfc	r3, #2, #1
 8004fd2:	7013      	strb	r3, [r2, #0]
      send = true;
 8004fd4:	2301      	movs	r3, #1
 8004fd6:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
      break;
 8004fda:	e0e0      	b.n	800519e <dcd_event_handler+0x222>
    case DCD_EVENT_SUSPEND:
      // NOTE: When plugging/unplugging device, the D+/D- state are unstable and
      // can accidentally meet the SUSPEND condition ( Bus Idle for 3ms ).
      // In addition, some MCUs such as SAMD or boards that haven no VBUS detection cannot distinguish
      // suspended vs disconnected. We will skip handling SUSPEND/RESUME event if not currently connected
      if (_usbd_dev.connected) {
 8004fdc:	4b9d      	ldr	r3, [pc, #628]	; (8005254 <dcd_event_handler+0x2d8>)
 8004fde:	781b      	ldrb	r3, [r3, #0]
 8004fe0:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8004fe4:	b2db      	uxtb	r3, r3
 8004fe6:	2b00      	cmp	r3, #0
 8004fe8:	f000 80d6 	beq.w	8005198 <dcd_event_handler+0x21c>
        _usbd_dev.suspended = 1;
 8004fec:	4a99      	ldr	r2, [pc, #612]	; (8005254 <dcd_event_handler+0x2d8>)
 8004fee:	7813      	ldrb	r3, [r2, #0]
 8004ff0:	f043 0304 	orr.w	r3, r3, #4
 8004ff4:	7013      	strb	r3, [r2, #0]
        send = true;
 8004ff6:	2301      	movs	r3, #1
 8004ff8:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
      }
      break;
 8004ffc:	e0cc      	b.n	8005198 <dcd_event_handler+0x21c>

    case DCD_EVENT_RESUME:
      // skip event if not connected (especially required for SAMD)
      if (_usbd_dev.connected) {
 8004ffe:	4b95      	ldr	r3, [pc, #596]	; (8005254 <dcd_event_handler+0x2d8>)
 8005000:	781b      	ldrb	r3, [r3, #0]
 8005002:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8005006:	b2db      	uxtb	r3, r3
 8005008:	2b00      	cmp	r3, #0
 800500a:	f000 80c7 	beq.w	800519c <dcd_event_handler+0x220>
        _usbd_dev.suspended = 0;
 800500e:	4a91      	ldr	r2, [pc, #580]	; (8005254 <dcd_event_handler+0x2d8>)
 8005010:	7813      	ldrb	r3, [r2, #0]
 8005012:	f36f 0382 	bfc	r3, #2, #1
 8005016:	7013      	strb	r3, [r2, #0]
        send = true;
 8005018:	2301      	movs	r3, #1
 800501a:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
      }
      break;
 800501e:	e0bd      	b.n	800519c <dcd_event_handler+0x220>

    case DCD_EVENT_SOF:
      // Some MCUs after running dcd_remote_wakeup() does not have way to detect the end of remote wakeup
      // which last 1-15 ms. DCD can use SOF as a clear indicator that bus is back to operational
      if (_usbd_dev.suspended) {
 8005020:	4b8c      	ldr	r3, [pc, #560]	; (8005254 <dcd_event_handler+0x2d8>)
 8005022:	781b      	ldrb	r3, [r3, #0]
 8005024:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8005028:	b2db      	uxtb	r3, r3
 800502a:	2b00      	cmp	r3, #0
 800502c:	d064      	beq.n	80050f8 <dcd_event_handler+0x17c>
        _usbd_dev.suspended = 0;
 800502e:	4a89      	ldr	r2, [pc, #548]	; (8005254 <dcd_event_handler+0x2d8>)
 8005030:	7813      	ldrb	r3, [r2, #0]
 8005032:	f36f 0382 	bfc	r3, #2, #1
 8005036:	7013      	strb	r3, [r2, #0]

        dcd_event_t const event_resume = {.rhport = event->rhport, .event_id = DCD_EVENT_RESUME};
 8005038:	f107 0308 	add.w	r3, r7, #8
 800503c:	2200      	movs	r2, #0
 800503e:	601a      	str	r2, [r3, #0]
 8005040:	605a      	str	r2, [r3, #4]
 8005042:	609a      	str	r2, [r3, #8]
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	781b      	ldrb	r3, [r3, #0]
 8005048:	723b      	strb	r3, [r7, #8]
 800504a:	2305      	movs	r3, #5
 800504c:	727b      	strb	r3, [r7, #9]
 800504e:	f107 0308 	add.w	r3, r7, #8
 8005052:	667b      	str	r3, [r7, #100]	; 0x64
 8005054:	78fb      	ldrb	r3, [r7, #3]
 8005056:	f887 3063 	strb.w	r3, [r7, #99]	; 0x63
  bool ret = osal_queue_send(_usbd_q, event, in_isr);
 800505a:	4b7f      	ldr	r3, [pc, #508]	; (8005258 <dcd_event_handler+0x2dc>)
 800505c:	681b      	ldr	r3, [r3, #0]
 800505e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005060:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005062:	65bb      	str	r3, [r7, #88]	; 0x58
 8005064:	f897 3063 	ldrb.w	r3, [r7, #99]	; 0x63
 8005068:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
}

TU_ATTR_ALWAYS_INLINE static inline bool osal_queue_send(osal_queue_t qhdl, void const* data, bool in_isr) {
  if (!in_isr) {
 800506c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8005070:	f083 0301 	eor.w	r3, r3, #1
 8005074:	b2db      	uxtb	r3, r3
 8005076:	2b00      	cmp	r3, #0
 8005078:	d006      	beq.n	8005088 <dcd_event_handler+0x10c>
 800507a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800507c:	653b      	str	r3, [r7, #80]	; 0x50
  qhdl->interrupt_set(false);
 800507e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005080:	681b      	ldr	r3, [r3, #0]
 8005082:	2000      	movs	r0, #0
 8005084:	4798      	blx	r3
}
 8005086:	bf00      	nop
    _osal_q_lock(qhdl);
  }

  bool success = tu_fifo_write(&qhdl->ff, data);
 8005088:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800508a:	3304      	adds	r3, #4
 800508c:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800508e:	4618      	mov	r0, r3
 8005090:	f7fe fed1 	bl	8003e36 <tu_fifo_write>
 8005094:	4603      	mov	r3, r0
 8005096:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f

  if (!in_isr) {
 800509a:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800509e:	f083 0301 	eor.w	r3, r3, #1
 80050a2:	b2db      	uxtb	r3, r3
 80050a4:	2b00      	cmp	r3, #0
 80050a6:	d006      	beq.n	80050b6 <dcd_event_handler+0x13a>
 80050a8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80050aa:	64bb      	str	r3, [r7, #72]	; 0x48
  qhdl->interrupt_set(true);
 80050ac:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80050ae:	681b      	ldr	r3, [r3, #0]
 80050b0:	2001      	movs	r0, #1
 80050b2:	4798      	blx	r3
}
 80050b4:	bf00      	nop
    _osal_q_unlock(qhdl);
  }

  TU_ASSERT(success);
 80050b6:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 80050ba:	f083 0301 	eor.w	r3, r3, #1
 80050be:	b2db      	uxtb	r3, r3
 80050c0:	2b00      	cmp	r3, #0
 80050c2:	d00a      	beq.n	80050da <dcd_event_handler+0x15e>
 80050c4:	4b65      	ldr	r3, [pc, #404]	; (800525c <dcd_event_handler+0x2e0>)
 80050c6:	647b      	str	r3, [r7, #68]	; 0x44
 80050c8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80050ca:	681b      	ldr	r3, [r3, #0]
 80050cc:	f003 0301 	and.w	r3, r3, #1
 80050d0:	2b00      	cmp	r3, #0
 80050d2:	d000      	beq.n	80050d6 <dcd_event_handler+0x15a>
 80050d4:	be00      	bkpt	0x0000
 80050d6:	2300      	movs	r3, #0
 80050d8:	e001      	b.n	80050de <dcd_event_handler+0x162>
  return success;
 80050da:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 80050de:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
  tud_event_hook_cb(event->rhport, event->event_id, in_isr);
 80050e2:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80050e4:	7818      	ldrb	r0, [r3, #0]
 80050e6:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80050e8:	785b      	ldrb	r3, [r3, #1]
 80050ea:	4619      	mov	r1, r3
 80050ec:	f897 3063 	ldrb.w	r3, [r7, #99]	; 0x63
 80050f0:	461a      	mov	r2, r3
 80050f2:	f7fe ff2b 	bl	8003f4c <tud_event_hook_cb>
  return ret;
 80050f6:	bf00      	nop
        queue_event(&event_resume, in_isr);
      }

      // SOF driver handler in ISR context
      for (uint8_t i = 0; i < TOTAL_DRIVER_COUNT; i++) {
 80050f8:	2300      	movs	r3, #0
 80050fa:	f887 306e 	strb.w	r3, [r7, #110]	; 0x6e
 80050fe:	e03f      	b.n	8005180 <dcd_event_handler+0x204>
 8005100:	f897 306e 	ldrb.w	r3, [r7, #110]	; 0x6e
 8005104:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
  usbd_class_driver_t const * driver = NULL;
 8005108:	2300      	movs	r3, #0
 800510a:	63fb      	str	r3, [r7, #60]	; 0x3c
  if ( drvid < _app_driver_count ) {
 800510c:	4b54      	ldr	r3, [pc, #336]	; (8005260 <dcd_event_handler+0x2e4>)
 800510e:	781b      	ldrb	r3, [r3, #0]
 8005110:	f897 2042 	ldrb.w	r2, [r7, #66]	; 0x42
 8005114:	429a      	cmp	r2, r3
 8005116:	d20a      	bcs.n	800512e <dcd_event_handler+0x1b2>
    driver = &_app_driver[drvid];
 8005118:	4b52      	ldr	r3, [pc, #328]	; (8005264 <dcd_event_handler+0x2e8>)
 800511a:	6819      	ldr	r1, [r3, #0]
 800511c:	f897 2042 	ldrb.w	r2, [r7, #66]	; 0x42
 8005120:	4613      	mov	r3, r2
 8005122:	005b      	lsls	r3, r3, #1
 8005124:	4413      	add	r3, r2
 8005126:	00db      	lsls	r3, r3, #3
 8005128:	440b      	add	r3, r1
 800512a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800512c:	e012      	b.n	8005154 <dcd_event_handler+0x1d8>
  } else if ( drvid < TOTAL_DRIVER_COUNT && BUILTIN_DRIVER_COUNT > 0 ){
 800512e:	4b4c      	ldr	r3, [pc, #304]	; (8005260 <dcd_event_handler+0x2e4>)
 8005130:	781b      	ldrb	r3, [r3, #0]
 8005132:	1c5a      	adds	r2, r3, #1
 8005134:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
 8005138:	429a      	cmp	r2, r3
 800513a:	db0b      	blt.n	8005154 <dcd_event_handler+0x1d8>
    driver = &_usbd_driver[drvid - _app_driver_count];
 800513c:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
 8005140:	4a47      	ldr	r2, [pc, #284]	; (8005260 <dcd_event_handler+0x2e4>)
 8005142:	7812      	ldrb	r2, [r2, #0]
 8005144:	1a9a      	subs	r2, r3, r2
 8005146:	4613      	mov	r3, r2
 8005148:	005b      	lsls	r3, r3, #1
 800514a:	4413      	add	r3, r2
 800514c:	00db      	lsls	r3, r3, #3
 800514e:	4a46      	ldr	r2, [pc, #280]	; (8005268 <dcd_event_handler+0x2ec>)
 8005150:	4413      	add	r3, r2
 8005152:	63fb      	str	r3, [r7, #60]	; 0x3c
  return driver;
 8005154:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
        usbd_class_driver_t const* driver = get_driver(i);
 8005156:	66bb      	str	r3, [r7, #104]	; 0x68
        if (driver && driver->sof) {
 8005158:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800515a:	2b00      	cmp	r3, #0
 800515c:	d00b      	beq.n	8005176 <dcd_event_handler+0x1fa>
 800515e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8005160:	695b      	ldr	r3, [r3, #20]
 8005162:	2b00      	cmp	r3, #0
 8005164:	d007      	beq.n	8005176 <dcd_event_handler+0x1fa>
          driver->sof(event->rhport, event->sof.frame_count);
 8005166:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8005168:	695b      	ldr	r3, [r3, #20]
 800516a:	687a      	ldr	r2, [r7, #4]
 800516c:	7810      	ldrb	r0, [r2, #0]
 800516e:	687a      	ldr	r2, [r7, #4]
 8005170:	6852      	ldr	r2, [r2, #4]
 8005172:	4611      	mov	r1, r2
 8005174:	4798      	blx	r3
      for (uint8_t i = 0; i < TOTAL_DRIVER_COUNT; i++) {
 8005176:	f897 306e 	ldrb.w	r3, [r7, #110]	; 0x6e
 800517a:	3301      	adds	r3, #1
 800517c:	f887 306e 	strb.w	r3, [r7, #110]	; 0x6e
 8005180:	4b37      	ldr	r3, [pc, #220]	; (8005260 <dcd_event_handler+0x2e4>)
 8005182:	781b      	ldrb	r3, [r3, #0]
 8005184:	1c5a      	adds	r2, r3, #1
 8005186:	f897 306e 	ldrb.w	r3, [r7, #110]	; 0x6e
 800518a:	429a      	cmp	r2, r3
 800518c:	dab8      	bge.n	8005100 <dcd_event_handler+0x184>
        }
      }

      // skip osal queue for SOF in usbd task
      break;
 800518e:	e006      	b.n	800519e <dcd_event_handler+0x222>

    default:
      send = true;
 8005190:	2301      	movs	r3, #1
 8005192:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
      break;
 8005196:	e002      	b.n	800519e <dcd_event_handler+0x222>
      break;
 8005198:	bf00      	nop
 800519a:	e000      	b.n	800519e <dcd_event_handler+0x222>
      break;
 800519c:	bf00      	nop
  }

  if (send) {
 800519e:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 80051a2:	2b00      	cmp	r3, #0
 80051a4:	d051      	beq.n	800524a <dcd_event_handler+0x2ce>
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	63bb      	str	r3, [r7, #56]	; 0x38
 80051aa:	78fb      	ldrb	r3, [r7, #3]
 80051ac:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
  bool ret = osal_queue_send(_usbd_q, event, in_isr);
 80051b0:	4b29      	ldr	r3, [pc, #164]	; (8005258 <dcd_event_handler+0x2dc>)
 80051b2:	681b      	ldr	r3, [r3, #0]
 80051b4:	633b      	str	r3, [r7, #48]	; 0x30
 80051b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80051b8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80051ba:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80051be:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
  if (!in_isr) {
 80051c2:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80051c6:	f083 0301 	eor.w	r3, r3, #1
 80051ca:	b2db      	uxtb	r3, r3
 80051cc:	2b00      	cmp	r3, #0
 80051ce:	d006      	beq.n	80051de <dcd_event_handler+0x262>
 80051d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80051d2:	627b      	str	r3, [r7, #36]	; 0x24
  qhdl->interrupt_set(false);
 80051d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051d6:	681b      	ldr	r3, [r3, #0]
 80051d8:	2000      	movs	r0, #0
 80051da:	4798      	blx	r3
}
 80051dc:	bf00      	nop
  bool success = tu_fifo_write(&qhdl->ff, data);
 80051de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80051e0:	3304      	adds	r3, #4
 80051e2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80051e4:	4618      	mov	r0, r3
 80051e6:	f7fe fe26 	bl	8003e36 <tu_fifo_write>
 80051ea:	4603      	mov	r3, r0
 80051ec:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  if (!in_isr) {
 80051f0:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80051f4:	f083 0301 	eor.w	r3, r3, #1
 80051f8:	b2db      	uxtb	r3, r3
 80051fa:	2b00      	cmp	r3, #0
 80051fc:	d006      	beq.n	800520c <dcd_event_handler+0x290>
 80051fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005200:	61fb      	str	r3, [r7, #28]
  qhdl->interrupt_set(true);
 8005202:	69fb      	ldr	r3, [r7, #28]
 8005204:	681b      	ldr	r3, [r3, #0]
 8005206:	2001      	movs	r0, #1
 8005208:	4798      	blx	r3
}
 800520a:	bf00      	nop
  TU_ASSERT(success);
 800520c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8005210:	f083 0301 	eor.w	r3, r3, #1
 8005214:	b2db      	uxtb	r3, r3
 8005216:	2b00      	cmp	r3, #0
 8005218:	d00a      	beq.n	8005230 <dcd_event_handler+0x2b4>
 800521a:	4b10      	ldr	r3, [pc, #64]	; (800525c <dcd_event_handler+0x2e0>)
 800521c:	61bb      	str	r3, [r7, #24]
 800521e:	69bb      	ldr	r3, [r7, #24]
 8005220:	681b      	ldr	r3, [r3, #0]
 8005222:	f003 0301 	and.w	r3, r3, #1
 8005226:	2b00      	cmp	r3, #0
 8005228:	d000      	beq.n	800522c <dcd_event_handler+0x2b0>
 800522a:	be00      	bkpt	0x0000
 800522c:	2300      	movs	r3, #0
 800522e:	e001      	b.n	8005234 <dcd_event_handler+0x2b8>
  return success;
 8005230:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8005234:	75fb      	strb	r3, [r7, #23]
  tud_event_hook_cb(event->rhport, event->event_id, in_isr);
 8005236:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005238:	7818      	ldrb	r0, [r3, #0]
 800523a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800523c:	785b      	ldrb	r3, [r3, #1]
 800523e:	4619      	mov	r1, r3
 8005240:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8005244:	461a      	mov	r2, r3
 8005246:	f7fe fe81 	bl	8003f4c <tud_event_hook_cb>
    queue_event(event, in_isr);
  }
}
 800524a:	bf00      	nop
 800524c:	3770      	adds	r7, #112	; 0x70
 800524e:	46bd      	mov	sp, r7
 8005250:	bd80      	pop	{r7, pc}
 8005252:	bf00      	nop
 8005254:	24001190 	.word	0x24001190
 8005258:	24001290 	.word	0x24001290
 800525c:	e000edf0 	.word	0xe000edf0
 8005260:	240011cc 	.word	0x240011cc
 8005264:	240011c8 	.word	0x240011c8
 8005268:	0801019c 	.word	0x0801019c

0800526c <usbd_int_set>:
//--------------------------------------------------------------------+
// USBD API For Class Driver
//--------------------------------------------------------------------+

void usbd_int_set(bool enabled)
{
 800526c:	b580      	push	{r7, lr}
 800526e:	b082      	sub	sp, #8
 8005270:	af00      	add	r7, sp, #0
 8005272:	4603      	mov	r3, r0
 8005274:	71fb      	strb	r3, [r7, #7]
  if (enabled)
 8005276:	79fb      	ldrb	r3, [r7, #7]
 8005278:	2b00      	cmp	r3, #0
 800527a:	d005      	beq.n	8005288 <usbd_int_set+0x1c>
  {
    dcd_int_enable(_usbd_rhport);
 800527c:	4b07      	ldr	r3, [pc, #28]	; (800529c <usbd_int_set+0x30>)
 800527e:	781b      	ldrb	r3, [r3, #0]
 8005280:	4618      	mov	r0, r3
 8005282:	f001 f8d9 	bl	8006438 <dcd_int_enable>
  }else
  {
    dcd_int_disable(_usbd_rhport);
  }
}
 8005286:	e004      	b.n	8005292 <usbd_int_set+0x26>
    dcd_int_disable(_usbd_rhport);
 8005288:	4b04      	ldr	r3, [pc, #16]	; (800529c <usbd_int_set+0x30>)
 800528a:	781b      	ldrb	r3, [r3, #0]
 800528c:	4618      	mov	r0, r3
 800528e:	f001 f8eb 	bl	8006468 <dcd_int_disable>
}
 8005292:	bf00      	nop
 8005294:	3708      	adds	r7, #8
 8005296:	46bd      	mov	sp, r7
 8005298:	bd80      	pop	{r7, pc}
 800529a:	bf00      	nop
 800529c:	24000024 	.word	0x24000024

080052a0 <usbd_open_edpt_pair>:

// Parse consecutive endpoint descriptors (IN & OUT)
bool usbd_open_edpt_pair(uint8_t rhport, uint8_t const* p_desc, uint8_t ep_count, uint8_t xfer_type, uint8_t* ep_out, uint8_t* ep_in)
{
 80052a0:	b580      	push	{r7, lr}
 80052a2:	b08a      	sub	sp, #40	; 0x28
 80052a4:	af00      	add	r7, sp, #0
 80052a6:	6039      	str	r1, [r7, #0]
 80052a8:	4611      	mov	r1, r2
 80052aa:	461a      	mov	r2, r3
 80052ac:	4603      	mov	r3, r0
 80052ae:	71fb      	strb	r3, [r7, #7]
 80052b0:	460b      	mov	r3, r1
 80052b2:	71bb      	strb	r3, [r7, #6]
 80052b4:	4613      	mov	r3, r2
 80052b6:	717b      	strb	r3, [r7, #5]
  for(int i=0; i<ep_count; i++)
 80052b8:	2300      	movs	r3, #0
 80052ba:	627b      	str	r3, [r7, #36]	; 0x24
 80052bc:	e04d      	b.n	800535a <usbd_open_edpt_pair+0xba>
  {
    tusb_desc_endpoint_t const * desc_ep = (tusb_desc_endpoint_t const *) p_desc;
 80052be:	683b      	ldr	r3, [r7, #0]
 80052c0:	623b      	str	r3, [r7, #32]

    TU_ASSERT(TUSB_DESC_ENDPOINT == desc_ep->bDescriptorType && xfer_type == desc_ep->bmAttributes.xfer);
 80052c2:	6a3b      	ldr	r3, [r7, #32]
 80052c4:	785b      	ldrb	r3, [r3, #1]
 80052c6:	2b05      	cmp	r3, #5
 80052c8:	d108      	bne.n	80052dc <usbd_open_edpt_pair+0x3c>
 80052ca:	6a3b      	ldr	r3, [r7, #32]
 80052cc:	78db      	ldrb	r3, [r3, #3]
 80052ce:	f3c3 0301 	ubfx	r3, r3, #0, #2
 80052d2:	b2db      	uxtb	r3, r3
 80052d4:	461a      	mov	r2, r3
 80052d6:	797b      	ldrb	r3, [r7, #5]
 80052d8:	4293      	cmp	r3, r2
 80052da:	d00a      	beq.n	80052f2 <usbd_open_edpt_pair+0x52>
 80052dc:	4b23      	ldr	r3, [pc, #140]	; (800536c <usbd_open_edpt_pair+0xcc>)
 80052de:	61bb      	str	r3, [r7, #24]
 80052e0:	69bb      	ldr	r3, [r7, #24]
 80052e2:	681b      	ldr	r3, [r3, #0]
 80052e4:	f003 0301 	and.w	r3, r3, #1
 80052e8:	2b00      	cmp	r3, #0
 80052ea:	d000      	beq.n	80052ee <usbd_open_edpt_pair+0x4e>
 80052ec:	be00      	bkpt	0x0000
 80052ee:	2300      	movs	r3, #0
 80052f0:	e038      	b.n	8005364 <usbd_open_edpt_pair+0xc4>
    TU_ASSERT(usbd_edpt_open(rhport, desc_ep));
 80052f2:	79fb      	ldrb	r3, [r7, #7]
 80052f4:	6a39      	ldr	r1, [r7, #32]
 80052f6:	4618      	mov	r0, r3
 80052f8:	f000 f83a 	bl	8005370 <usbd_edpt_open>
 80052fc:	4603      	mov	r3, r0
 80052fe:	f083 0301 	eor.w	r3, r3, #1
 8005302:	b2db      	uxtb	r3, r3
 8005304:	2b00      	cmp	r3, #0
 8005306:	d00a      	beq.n	800531e <usbd_open_edpt_pair+0x7e>
 8005308:	4b18      	ldr	r3, [pc, #96]	; (800536c <usbd_open_edpt_pair+0xcc>)
 800530a:	61fb      	str	r3, [r7, #28]
 800530c:	69fb      	ldr	r3, [r7, #28]
 800530e:	681b      	ldr	r3, [r3, #0]
 8005310:	f003 0301 	and.w	r3, r3, #1
 8005314:	2b00      	cmp	r3, #0
 8005316:	d000      	beq.n	800531a <usbd_open_edpt_pair+0x7a>
 8005318:	be00      	bkpt	0x0000
 800531a:	2300      	movs	r3, #0
 800531c:	e022      	b.n	8005364 <usbd_open_edpt_pair+0xc4>

    if ( tu_edpt_dir(desc_ep->bEndpointAddress) == TUSB_DIR_IN )
 800531e:	6a3b      	ldr	r3, [r7, #32]
 8005320:	789b      	ldrb	r3, [r3, #2]
 8005322:	75fb      	strb	r3, [r7, #23]
  return (addr & TUSB_DIR_IN_MASK) ? TUSB_DIR_IN : TUSB_DIR_OUT;
 8005324:	7dfb      	ldrb	r3, [r7, #23]
 8005326:	09db      	lsrs	r3, r3, #7
 8005328:	b2db      	uxtb	r3, r3
 800532a:	2b01      	cmp	r3, #1
 800532c:	d104      	bne.n	8005338 <usbd_open_edpt_pair+0x98>
    {
      (*ep_in) = desc_ep->bEndpointAddress;
 800532e:	6a3b      	ldr	r3, [r7, #32]
 8005330:	789a      	ldrb	r2, [r3, #2]
 8005332:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005334:	701a      	strb	r2, [r3, #0]
 8005336:	e003      	b.n	8005340 <usbd_open_edpt_pair+0xa0>
    }else
    {
      (*ep_out) = desc_ep->bEndpointAddress;
 8005338:	6a3b      	ldr	r3, [r7, #32]
 800533a:	789a      	ldrb	r2, [r3, #2]
 800533c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800533e:	701a      	strb	r2, [r3, #0]
 8005340:	683b      	ldr	r3, [r7, #0]
 8005342:	613b      	str	r3, [r7, #16]
  uint8_t const* desc8 = (uint8_t const*) desc;
 8005344:	693b      	ldr	r3, [r7, #16]
 8005346:	60fb      	str	r3, [r7, #12]
  return desc8 + desc8[DESC_OFFSET_LEN];
 8005348:	68fb      	ldr	r3, [r7, #12]
 800534a:	781b      	ldrb	r3, [r3, #0]
 800534c:	461a      	mov	r2, r3
 800534e:	68fb      	ldr	r3, [r7, #12]
 8005350:	4413      	add	r3, r2
    }

    p_desc = tu_desc_next(p_desc);
 8005352:	603b      	str	r3, [r7, #0]
  for(int i=0; i<ep_count; i++)
 8005354:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005356:	3301      	adds	r3, #1
 8005358:	627b      	str	r3, [r7, #36]	; 0x24
 800535a:	79bb      	ldrb	r3, [r7, #6]
 800535c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800535e:	429a      	cmp	r2, r3
 8005360:	dbad      	blt.n	80052be <usbd_open_edpt_pair+0x1e>
  }

  return true;
 8005362:	2301      	movs	r3, #1
}
 8005364:	4618      	mov	r0, r3
 8005366:	3728      	adds	r7, #40	; 0x28
 8005368:	46bd      	mov	sp, r7
 800536a:	bd80      	pop	{r7, pc}
 800536c:	e000edf0 	.word	0xe000edf0

08005370 <usbd_edpt_open>:
//--------------------------------------------------------------------+
// USBD Endpoint API
//--------------------------------------------------------------------+

bool usbd_edpt_open(uint8_t rhport, tusb_desc_endpoint_t const * desc_ep)
{
 8005370:	b580      	push	{r7, lr}
 8005372:	b086      	sub	sp, #24
 8005374:	af00      	add	r7, sp, #0
 8005376:	4603      	mov	r3, r0
 8005378:	6039      	str	r1, [r7, #0]
 800537a:	71fb      	strb	r3, [r7, #7]
  rhport = _usbd_rhport;
 800537c:	4b1b      	ldr	r3, [pc, #108]	; (80053ec <usbd_edpt_open+0x7c>)
 800537e:	781b      	ldrb	r3, [r3, #0]
 8005380:	71fb      	strb	r3, [r7, #7]

  TU_ASSERT(tu_edpt_number(desc_ep->bEndpointAddress) < CFG_TUD_ENDPPOINT_MAX);
 8005382:	683b      	ldr	r3, [r7, #0]
 8005384:	789b      	ldrb	r3, [r3, #2]
 8005386:	73fb      	strb	r3, [r7, #15]
  return (uint8_t)(addr & (~TUSB_DIR_IN_MASK));
 8005388:	7bfb      	ldrb	r3, [r7, #15]
 800538a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800538e:	b2db      	uxtb	r3, r3
 8005390:	2b08      	cmp	r3, #8
 8005392:	d90a      	bls.n	80053aa <usbd_edpt_open+0x3a>
 8005394:	4b16      	ldr	r3, [pc, #88]	; (80053f0 <usbd_edpt_open+0x80>)
 8005396:	613b      	str	r3, [r7, #16]
 8005398:	693b      	ldr	r3, [r7, #16]
 800539a:	681b      	ldr	r3, [r3, #0]
 800539c:	f003 0301 	and.w	r3, r3, #1
 80053a0:	2b00      	cmp	r3, #0
 80053a2:	d000      	beq.n	80053a6 <usbd_edpt_open+0x36>
 80053a4:	be00      	bkpt	0x0000
 80053a6:	2300      	movs	r3, #0
 80053a8:	e01c      	b.n	80053e4 <usbd_edpt_open+0x74>
  TU_ASSERT(tu_edpt_validate(desc_ep, (tusb_speed_t) _usbd_dev.speed));
 80053aa:	4b12      	ldr	r3, [pc, #72]	; (80053f4 <usbd_edpt_open+0x84>)
 80053ac:	789b      	ldrb	r3, [r3, #2]
 80053ae:	4619      	mov	r1, r3
 80053b0:	6838      	ldr	r0, [r7, #0]
 80053b2:	f002 f97d 	bl	80076b0 <tu_edpt_validate>
 80053b6:	4603      	mov	r3, r0
 80053b8:	f083 0301 	eor.w	r3, r3, #1
 80053bc:	b2db      	uxtb	r3, r3
 80053be:	2b00      	cmp	r3, #0
 80053c0:	d00a      	beq.n	80053d8 <usbd_edpt_open+0x68>
 80053c2:	4b0b      	ldr	r3, [pc, #44]	; (80053f0 <usbd_edpt_open+0x80>)
 80053c4:	617b      	str	r3, [r7, #20]
 80053c6:	697b      	ldr	r3, [r7, #20]
 80053c8:	681b      	ldr	r3, [r3, #0]
 80053ca:	f003 0301 	and.w	r3, r3, #1
 80053ce:	2b00      	cmp	r3, #0
 80053d0:	d000      	beq.n	80053d4 <usbd_edpt_open+0x64>
 80053d2:	be00      	bkpt	0x0000
 80053d4:	2300      	movs	r3, #0
 80053d6:	e005      	b.n	80053e4 <usbd_edpt_open+0x74>

  return dcd_edpt_open(rhport, desc_ep);
 80053d8:	79fb      	ldrb	r3, [r7, #7]
 80053da:	6839      	ldr	r1, [r7, #0]
 80053dc:	4618      	mov	r0, r3
 80053de:	f001 f8c7 	bl	8006570 <dcd_edpt_open>
 80053e2:	4603      	mov	r3, r0
}
 80053e4:	4618      	mov	r0, r3
 80053e6:	3718      	adds	r7, #24
 80053e8:	46bd      	mov	sp, r7
 80053ea:	bd80      	pop	{r7, pc}
 80053ec:	24000024 	.word	0x24000024
 80053f0:	e000edf0 	.word	0xe000edf0
 80053f4:	24001190 	.word	0x24001190

080053f8 <usbd_edpt_claim>:

bool usbd_edpt_claim(uint8_t rhport, uint8_t ep_addr)
{
 80053f8:	b580      	push	{r7, lr}
 80053fa:	b086      	sub	sp, #24
 80053fc:	af00      	add	r7, sp, #0
 80053fe:	4603      	mov	r3, r0
 8005400:	460a      	mov	r2, r1
 8005402:	71fb      	strb	r3, [r7, #7]
 8005404:	4613      	mov	r3, r2
 8005406:	71bb      	strb	r3, [r7, #6]
 8005408:	79bb      	ldrb	r3, [r7, #6]
 800540a:	73bb      	strb	r3, [r7, #14]
 800540c:	7bbb      	ldrb	r3, [r7, #14]
 800540e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005412:	b2db      	uxtb	r3, r3
  (void) rhport;

  // TODO add this check later, also make sure we don't starve an out endpoint while suspending
  // TU_VERIFY(tud_ready());

  uint8_t const epnum       = tu_edpt_number(ep_addr);
 8005414:	75fb      	strb	r3, [r7, #23]
 8005416:	79bb      	ldrb	r3, [r7, #6]
 8005418:	73fb      	strb	r3, [r7, #15]
  return (addr & TUSB_DIR_IN_MASK) ? TUSB_DIR_IN : TUSB_DIR_OUT;
 800541a:	7bfb      	ldrb	r3, [r7, #15]
 800541c:	09db      	lsrs	r3, r3, #7
 800541e:	b2db      	uxtb	r3, r3
  uint8_t const dir         = tu_edpt_dir(ep_addr);
 8005420:	75bb      	strb	r3, [r7, #22]
  tu_edpt_state_t* ep_state = &_usbd_dev.ep_status[epnum][dir];
 8005422:	7dfa      	ldrb	r2, [r7, #23]
 8005424:	7dbb      	ldrb	r3, [r7, #22]
 8005426:	0052      	lsls	r2, r2, #1
 8005428:	4413      	add	r3, r2
 800542a:	3320      	adds	r3, #32
 800542c:	4a06      	ldr	r2, [pc, #24]	; (8005448 <usbd_edpt_claim+0x50>)
 800542e:	4413      	add	r3, r2
 8005430:	3305      	adds	r3, #5
 8005432:	613b      	str	r3, [r7, #16]

  return tu_edpt_claim(ep_state, _usbd_mutex);
 8005434:	2100      	movs	r1, #0
 8005436:	6938      	ldr	r0, [r7, #16]
 8005438:	f002 f8d6 	bl	80075e8 <tu_edpt_claim>
 800543c:	4603      	mov	r3, r0
}
 800543e:	4618      	mov	r0, r3
 8005440:	3718      	adds	r7, #24
 8005442:	46bd      	mov	sp, r7
 8005444:	bd80      	pop	{r7, pc}
 8005446:	bf00      	nop
 8005448:	24001190 	.word	0x24001190

0800544c <usbd_edpt_release>:

bool usbd_edpt_release(uint8_t rhport, uint8_t ep_addr)
{
 800544c:	b580      	push	{r7, lr}
 800544e:	b086      	sub	sp, #24
 8005450:	af00      	add	r7, sp, #0
 8005452:	4603      	mov	r3, r0
 8005454:	460a      	mov	r2, r1
 8005456:	71fb      	strb	r3, [r7, #7]
 8005458:	4613      	mov	r3, r2
 800545a:	71bb      	strb	r3, [r7, #6]
 800545c:	79bb      	ldrb	r3, [r7, #6]
 800545e:	73bb      	strb	r3, [r7, #14]
  return (uint8_t)(addr & (~TUSB_DIR_IN_MASK));
 8005460:	7bbb      	ldrb	r3, [r7, #14]
 8005462:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005466:	b2db      	uxtb	r3, r3
  (void) rhport;

  uint8_t const epnum       = tu_edpt_number(ep_addr);
 8005468:	75fb      	strb	r3, [r7, #23]
 800546a:	79bb      	ldrb	r3, [r7, #6]
 800546c:	73fb      	strb	r3, [r7, #15]
  return (addr & TUSB_DIR_IN_MASK) ? TUSB_DIR_IN : TUSB_DIR_OUT;
 800546e:	7bfb      	ldrb	r3, [r7, #15]
 8005470:	09db      	lsrs	r3, r3, #7
 8005472:	b2db      	uxtb	r3, r3
  uint8_t const dir         = tu_edpt_dir(ep_addr);
 8005474:	75bb      	strb	r3, [r7, #22]
  tu_edpt_state_t* ep_state = &_usbd_dev.ep_status[epnum][dir];
 8005476:	7dfa      	ldrb	r2, [r7, #23]
 8005478:	7dbb      	ldrb	r3, [r7, #22]
 800547a:	0052      	lsls	r2, r2, #1
 800547c:	4413      	add	r3, r2
 800547e:	3320      	adds	r3, #32
 8005480:	4a06      	ldr	r2, [pc, #24]	; (800549c <usbd_edpt_release+0x50>)
 8005482:	4413      	add	r3, r2
 8005484:	3305      	adds	r3, #5
 8005486:	613b      	str	r3, [r7, #16]

  return tu_edpt_release(ep_state, _usbd_mutex);
 8005488:	2100      	movs	r1, #0
 800548a:	6938      	ldr	r0, [r7, #16]
 800548c:	f002 f8e6 	bl	800765c <tu_edpt_release>
 8005490:	4603      	mov	r3, r0
}
 8005492:	4618      	mov	r0, r3
 8005494:	3718      	adds	r7, #24
 8005496:	46bd      	mov	sp, r7
 8005498:	bd80      	pop	{r7, pc}
 800549a:	bf00      	nop
 800549c:	24001190 	.word	0x24001190

080054a0 <usbd_edpt_xfer>:

bool usbd_edpt_xfer(uint8_t rhport, uint8_t ep_addr, uint8_t * buffer, uint16_t total_bytes)
{
 80054a0:	b580      	push	{r7, lr}
 80054a2:	b086      	sub	sp, #24
 80054a4:	af00      	add	r7, sp, #0
 80054a6:	603a      	str	r2, [r7, #0]
 80054a8:	461a      	mov	r2, r3
 80054aa:	4603      	mov	r3, r0
 80054ac:	71fb      	strb	r3, [r7, #7]
 80054ae:	460b      	mov	r3, r1
 80054b0:	71bb      	strb	r3, [r7, #6]
 80054b2:	4613      	mov	r3, r2
 80054b4:	80bb      	strh	r3, [r7, #4]
  rhport = _usbd_rhport;
 80054b6:	4b32      	ldr	r3, [pc, #200]	; (8005580 <usbd_edpt_xfer+0xe0>)
 80054b8:	781b      	ldrb	r3, [r3, #0]
 80054ba:	71fb      	strb	r3, [r7, #7]
 80054bc:	79bb      	ldrb	r3, [r7, #6]
 80054be:	72bb      	strb	r3, [r7, #10]
  return (uint8_t)(addr & (~TUSB_DIR_IN_MASK));
 80054c0:	7abb      	ldrb	r3, [r7, #10]
 80054c2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80054c6:	b2db      	uxtb	r3, r3

  uint8_t const epnum = tu_edpt_number(ep_addr);
 80054c8:	75fb      	strb	r3, [r7, #23]
 80054ca:	79bb      	ldrb	r3, [r7, #6]
 80054cc:	72fb      	strb	r3, [r7, #11]
  return (addr & TUSB_DIR_IN_MASK) ? TUSB_DIR_IN : TUSB_DIR_OUT;
 80054ce:	7afb      	ldrb	r3, [r7, #11]
 80054d0:	09db      	lsrs	r3, r3, #7
 80054d2:	b2db      	uxtb	r3, r3
  uint8_t const dir   = tu_edpt_dir(ep_addr);
 80054d4:	75bb      	strb	r3, [r7, #22]
  // TU_VERIFY(tud_ready());

  TU_LOG_USBD("  Queue EP %02X with %u bytes ...\r\n", ep_addr, total_bytes);

  // Attempt to transfer on a busy endpoint, sound like an race condition !
  TU_ASSERT(_usbd_dev.ep_status[epnum][dir].busy == 0);
 80054d6:	7dfa      	ldrb	r2, [r7, #23]
 80054d8:	7dbb      	ldrb	r3, [r7, #22]
 80054da:	492a      	ldr	r1, [pc, #168]	; (8005584 <usbd_edpt_xfer+0xe4>)
 80054dc:	0052      	lsls	r2, r2, #1
 80054de:	440a      	add	r2, r1
 80054e0:	4413      	add	r3, r2
 80054e2:	3320      	adds	r3, #32
 80054e4:	795b      	ldrb	r3, [r3, #5]
 80054e6:	f3c3 0300 	ubfx	r3, r3, #0, #1
 80054ea:	b2db      	uxtb	r3, r3
 80054ec:	2b00      	cmp	r3, #0
 80054ee:	d00a      	beq.n	8005506 <usbd_edpt_xfer+0x66>
 80054f0:	4b25      	ldr	r3, [pc, #148]	; (8005588 <usbd_edpt_xfer+0xe8>)
 80054f2:	60fb      	str	r3, [r7, #12]
 80054f4:	68fb      	ldr	r3, [r7, #12]
 80054f6:	681b      	ldr	r3, [r3, #0]
 80054f8:	f003 0301 	and.w	r3, r3, #1
 80054fc:	2b00      	cmp	r3, #0
 80054fe:	d000      	beq.n	8005502 <usbd_edpt_xfer+0x62>
 8005500:	be00      	bkpt	0x0000
 8005502:	2300      	movs	r3, #0
 8005504:	e038      	b.n	8005578 <usbd_edpt_xfer+0xd8>

  // Set busy first since the actual transfer can be complete before dcd_edpt_xfer()
  // could return and USBD task can preempt and clear the busy
  _usbd_dev.ep_status[epnum][dir].busy = 1;
 8005506:	7dfa      	ldrb	r2, [r7, #23]
 8005508:	7dbb      	ldrb	r3, [r7, #22]
 800550a:	491e      	ldr	r1, [pc, #120]	; (8005584 <usbd_edpt_xfer+0xe4>)
 800550c:	0052      	lsls	r2, r2, #1
 800550e:	440a      	add	r2, r1
 8005510:	4413      	add	r3, r2
 8005512:	f103 0220 	add.w	r2, r3, #32
 8005516:	7953      	ldrb	r3, [r2, #5]
 8005518:	f043 0301 	orr.w	r3, r3, #1
 800551c:	7153      	strb	r3, [r2, #5]

  if ( dcd_edpt_xfer(rhport, ep_addr, buffer, total_bytes) )
 800551e:	88bb      	ldrh	r3, [r7, #4]
 8005520:	79b9      	ldrb	r1, [r7, #6]
 8005522:	79f8      	ldrb	r0, [r7, #7]
 8005524:	683a      	ldr	r2, [r7, #0]
 8005526:	f001 f9ad 	bl	8006884 <dcd_edpt_xfer>
 800552a:	4603      	mov	r3, r0
 800552c:	2b00      	cmp	r3, #0
 800552e:	d001      	beq.n	8005534 <usbd_edpt_xfer+0x94>
  {
    return true;
 8005530:	2301      	movs	r3, #1
 8005532:	e021      	b.n	8005578 <usbd_edpt_xfer+0xd8>
  }else
  {
    // DCD error, mark endpoint as ready to allow next transfer
    _usbd_dev.ep_status[epnum][dir].busy = 0;
 8005534:	7dfa      	ldrb	r2, [r7, #23]
 8005536:	7dbb      	ldrb	r3, [r7, #22]
 8005538:	4912      	ldr	r1, [pc, #72]	; (8005584 <usbd_edpt_xfer+0xe4>)
 800553a:	0052      	lsls	r2, r2, #1
 800553c:	440a      	add	r2, r1
 800553e:	4413      	add	r3, r2
 8005540:	f103 0220 	add.w	r2, r3, #32
 8005544:	7953      	ldrb	r3, [r2, #5]
 8005546:	f36f 0300 	bfc	r3, #0, #1
 800554a:	7153      	strb	r3, [r2, #5]
    _usbd_dev.ep_status[epnum][dir].claimed = 0;
 800554c:	7dfa      	ldrb	r2, [r7, #23]
 800554e:	7dbb      	ldrb	r3, [r7, #22]
 8005550:	490c      	ldr	r1, [pc, #48]	; (8005584 <usbd_edpt_xfer+0xe4>)
 8005552:	0052      	lsls	r2, r2, #1
 8005554:	440a      	add	r2, r1
 8005556:	4413      	add	r3, r2
 8005558:	f103 0220 	add.w	r2, r3, #32
 800555c:	7953      	ldrb	r3, [r2, #5]
 800555e:	f36f 0382 	bfc	r3, #2, #1
 8005562:	7153      	strb	r3, [r2, #5]
    TU_LOG_USBD("FAILED\r\n");
    TU_BREAKPOINT();
 8005564:	4b08      	ldr	r3, [pc, #32]	; (8005588 <usbd_edpt_xfer+0xe8>)
 8005566:	613b      	str	r3, [r7, #16]
 8005568:	693b      	ldr	r3, [r7, #16]
 800556a:	681b      	ldr	r3, [r3, #0]
 800556c:	f003 0301 	and.w	r3, r3, #1
 8005570:	2b00      	cmp	r3, #0
 8005572:	d000      	beq.n	8005576 <usbd_edpt_xfer+0xd6>
 8005574:	be00      	bkpt	0x0000
    return false;
 8005576:	2300      	movs	r3, #0
  }
}
 8005578:	4618      	mov	r0, r3
 800557a:	3718      	adds	r7, #24
 800557c:	46bd      	mov	sp, r7
 800557e:	bd80      	pop	{r7, pc}
 8005580:	24000024 	.word	0x24000024
 8005584:	24001190 	.word	0x24001190
 8005588:	e000edf0 	.word	0xe000edf0

0800558c <usbd_edpt_busy>:
    return false;
  }
}

bool usbd_edpt_busy(uint8_t rhport, uint8_t ep_addr)
{
 800558c:	b480      	push	{r7}
 800558e:	b085      	sub	sp, #20
 8005590:	af00      	add	r7, sp, #0
 8005592:	4603      	mov	r3, r0
 8005594:	460a      	mov	r2, r1
 8005596:	71fb      	strb	r3, [r7, #7]
 8005598:	4613      	mov	r3, r2
 800559a:	71bb      	strb	r3, [r7, #6]
 800559c:	79bb      	ldrb	r3, [r7, #6]
 800559e:	733b      	strb	r3, [r7, #12]
  return (uint8_t)(addr & (~TUSB_DIR_IN_MASK));
 80055a0:	7b3b      	ldrb	r3, [r7, #12]
 80055a2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80055a6:	b2db      	uxtb	r3, r3
  (void) rhport;

  uint8_t const epnum = tu_edpt_number(ep_addr);
 80055a8:	73fb      	strb	r3, [r7, #15]
 80055aa:	79bb      	ldrb	r3, [r7, #6]
 80055ac:	737b      	strb	r3, [r7, #13]
  return (addr & TUSB_DIR_IN_MASK) ? TUSB_DIR_IN : TUSB_DIR_OUT;
 80055ae:	7b7b      	ldrb	r3, [r7, #13]
 80055b0:	09db      	lsrs	r3, r3, #7
 80055b2:	b2db      	uxtb	r3, r3
  uint8_t const dir   = tu_edpt_dir(ep_addr);
 80055b4:	73bb      	strb	r3, [r7, #14]

  return _usbd_dev.ep_status[epnum][dir].busy;
 80055b6:	7bfa      	ldrb	r2, [r7, #15]
 80055b8:	7bbb      	ldrb	r3, [r7, #14]
 80055ba:	490a      	ldr	r1, [pc, #40]	; (80055e4 <usbd_edpt_busy+0x58>)
 80055bc:	0052      	lsls	r2, r2, #1
 80055be:	440a      	add	r2, r1
 80055c0:	4413      	add	r3, r2
 80055c2:	3320      	adds	r3, #32
 80055c4:	795b      	ldrb	r3, [r3, #5]
 80055c6:	f3c3 0300 	ubfx	r3, r3, #0, #1
 80055ca:	b2db      	uxtb	r3, r3
 80055cc:	2b00      	cmp	r3, #0
 80055ce:	bf14      	ite	ne
 80055d0:	2301      	movne	r3, #1
 80055d2:	2300      	moveq	r3, #0
 80055d4:	b2db      	uxtb	r3, r3
}
 80055d6:	4618      	mov	r0, r3
 80055d8:	3714      	adds	r7, #20
 80055da:	46bd      	mov	sp, r7
 80055dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055e0:	4770      	bx	lr
 80055e2:	bf00      	nop
 80055e4:	24001190 	.word	0x24001190

080055e8 <usbd_edpt_stall>:

void usbd_edpt_stall(uint8_t rhport, uint8_t ep_addr)
{
 80055e8:	b580      	push	{r7, lr}
 80055ea:	b084      	sub	sp, #16
 80055ec:	af00      	add	r7, sp, #0
 80055ee:	4603      	mov	r3, r0
 80055f0:	460a      	mov	r2, r1
 80055f2:	71fb      	strb	r3, [r7, #7]
 80055f4:	4613      	mov	r3, r2
 80055f6:	71bb      	strb	r3, [r7, #6]
  rhport = _usbd_rhport;
 80055f8:	4b1f      	ldr	r3, [pc, #124]	; (8005678 <usbd_edpt_stall+0x90>)
 80055fa:	781b      	ldrb	r3, [r3, #0]
 80055fc:	71fb      	strb	r3, [r7, #7]
 80055fe:	79bb      	ldrb	r3, [r7, #6]
 8005600:	733b      	strb	r3, [r7, #12]
  return (uint8_t)(addr & (~TUSB_DIR_IN_MASK));
 8005602:	7b3b      	ldrb	r3, [r7, #12]
 8005604:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005608:	b2db      	uxtb	r3, r3

  uint8_t const epnum = tu_edpt_number(ep_addr);
 800560a:	73fb      	strb	r3, [r7, #15]
 800560c:	79bb      	ldrb	r3, [r7, #6]
 800560e:	737b      	strb	r3, [r7, #13]
  return (addr & TUSB_DIR_IN_MASK) ? TUSB_DIR_IN : TUSB_DIR_OUT;
 8005610:	7b7b      	ldrb	r3, [r7, #13]
 8005612:	09db      	lsrs	r3, r3, #7
 8005614:	b2db      	uxtb	r3, r3
  uint8_t const dir   = tu_edpt_dir(ep_addr);
 8005616:	73bb      	strb	r3, [r7, #14]

  // only stalled if currently cleared
  if ( !_usbd_dev.ep_status[epnum][dir].stalled )
 8005618:	7bfa      	ldrb	r2, [r7, #15]
 800561a:	7bbb      	ldrb	r3, [r7, #14]
 800561c:	4917      	ldr	r1, [pc, #92]	; (800567c <usbd_edpt_stall+0x94>)
 800561e:	0052      	lsls	r2, r2, #1
 8005620:	440a      	add	r2, r1
 8005622:	4413      	add	r3, r2
 8005624:	3320      	adds	r3, #32
 8005626:	795b      	ldrb	r3, [r3, #5]
 8005628:	f3c3 0340 	ubfx	r3, r3, #1, #1
 800562c:	b2db      	uxtb	r3, r3
 800562e:	2b00      	cmp	r3, #0
 8005630:	d11d      	bne.n	800566e <usbd_edpt_stall+0x86>
  {
    TU_LOG_USBD("    Stall EP %02X\r\n", ep_addr);
    dcd_edpt_stall(rhport, ep_addr);
 8005632:	79ba      	ldrb	r2, [r7, #6]
 8005634:	79fb      	ldrb	r3, [r7, #7]
 8005636:	4611      	mov	r1, r2
 8005638:	4618      	mov	r0, r3
 800563a:	f001 fa77 	bl	8006b2c <dcd_edpt_stall>
    _usbd_dev.ep_status[epnum][dir].stalled = 1;
 800563e:	7bfa      	ldrb	r2, [r7, #15]
 8005640:	7bbb      	ldrb	r3, [r7, #14]
 8005642:	490e      	ldr	r1, [pc, #56]	; (800567c <usbd_edpt_stall+0x94>)
 8005644:	0052      	lsls	r2, r2, #1
 8005646:	440a      	add	r2, r1
 8005648:	4413      	add	r3, r2
 800564a:	f103 0220 	add.w	r2, r3, #32
 800564e:	7953      	ldrb	r3, [r2, #5]
 8005650:	f043 0302 	orr.w	r3, r3, #2
 8005654:	7153      	strb	r3, [r2, #5]
    _usbd_dev.ep_status[epnum][dir].busy = 1;
 8005656:	7bfa      	ldrb	r2, [r7, #15]
 8005658:	7bbb      	ldrb	r3, [r7, #14]
 800565a:	4908      	ldr	r1, [pc, #32]	; (800567c <usbd_edpt_stall+0x94>)
 800565c:	0052      	lsls	r2, r2, #1
 800565e:	440a      	add	r2, r1
 8005660:	4413      	add	r3, r2
 8005662:	f103 0220 	add.w	r2, r3, #32
 8005666:	7953      	ldrb	r3, [r2, #5]
 8005668:	f043 0301 	orr.w	r3, r3, #1
 800566c:	7153      	strb	r3, [r2, #5]
  }
}
 800566e:	bf00      	nop
 8005670:	3710      	adds	r7, #16
 8005672:	46bd      	mov	sp, r7
 8005674:	bd80      	pop	{r7, pc}
 8005676:	bf00      	nop
 8005678:	24000024 	.word	0x24000024
 800567c:	24001190 	.word	0x24001190

08005680 <usbd_edpt_clear_stall>:

void usbd_edpt_clear_stall(uint8_t rhport, uint8_t ep_addr)
{
 8005680:	b580      	push	{r7, lr}
 8005682:	b084      	sub	sp, #16
 8005684:	af00      	add	r7, sp, #0
 8005686:	4603      	mov	r3, r0
 8005688:	460a      	mov	r2, r1
 800568a:	71fb      	strb	r3, [r7, #7]
 800568c:	4613      	mov	r3, r2
 800568e:	71bb      	strb	r3, [r7, #6]
  rhport = _usbd_rhport;
 8005690:	4b1f      	ldr	r3, [pc, #124]	; (8005710 <usbd_edpt_clear_stall+0x90>)
 8005692:	781b      	ldrb	r3, [r3, #0]
 8005694:	71fb      	strb	r3, [r7, #7]
 8005696:	79bb      	ldrb	r3, [r7, #6]
 8005698:	733b      	strb	r3, [r7, #12]
  return (uint8_t)(addr & (~TUSB_DIR_IN_MASK));
 800569a:	7b3b      	ldrb	r3, [r7, #12]
 800569c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80056a0:	b2db      	uxtb	r3, r3

  uint8_t const epnum = tu_edpt_number(ep_addr);
 80056a2:	73fb      	strb	r3, [r7, #15]
 80056a4:	79bb      	ldrb	r3, [r7, #6]
 80056a6:	737b      	strb	r3, [r7, #13]
  return (addr & TUSB_DIR_IN_MASK) ? TUSB_DIR_IN : TUSB_DIR_OUT;
 80056a8:	7b7b      	ldrb	r3, [r7, #13]
 80056aa:	09db      	lsrs	r3, r3, #7
 80056ac:	b2db      	uxtb	r3, r3
  uint8_t const dir   = tu_edpt_dir(ep_addr);
 80056ae:	73bb      	strb	r3, [r7, #14]

  // only clear if currently stalled
  if ( _usbd_dev.ep_status[epnum][dir].stalled )
 80056b0:	7bfa      	ldrb	r2, [r7, #15]
 80056b2:	7bbb      	ldrb	r3, [r7, #14]
 80056b4:	4917      	ldr	r1, [pc, #92]	; (8005714 <usbd_edpt_clear_stall+0x94>)
 80056b6:	0052      	lsls	r2, r2, #1
 80056b8:	440a      	add	r2, r1
 80056ba:	4413      	add	r3, r2
 80056bc:	3320      	adds	r3, #32
 80056be:	795b      	ldrb	r3, [r3, #5]
 80056c0:	f3c3 0340 	ubfx	r3, r3, #1, #1
 80056c4:	b2db      	uxtb	r3, r3
 80056c6:	2b00      	cmp	r3, #0
 80056c8:	d01d      	beq.n	8005706 <usbd_edpt_clear_stall+0x86>
  {
    TU_LOG_USBD("    Clear Stall EP %02X\r\n", ep_addr);
    dcd_edpt_clear_stall(rhport, ep_addr);
 80056ca:	79ba      	ldrb	r2, [r7, #6]
 80056cc:	79fb      	ldrb	r3, [r7, #7]
 80056ce:	4611      	mov	r1, r2
 80056d0:	4618      	mov	r0, r3
 80056d2:	f001 fa3d 	bl	8006b50 <dcd_edpt_clear_stall>
    _usbd_dev.ep_status[epnum][dir].stalled = 0;
 80056d6:	7bfa      	ldrb	r2, [r7, #15]
 80056d8:	7bbb      	ldrb	r3, [r7, #14]
 80056da:	490e      	ldr	r1, [pc, #56]	; (8005714 <usbd_edpt_clear_stall+0x94>)
 80056dc:	0052      	lsls	r2, r2, #1
 80056de:	440a      	add	r2, r1
 80056e0:	4413      	add	r3, r2
 80056e2:	f103 0220 	add.w	r2, r3, #32
 80056e6:	7953      	ldrb	r3, [r2, #5]
 80056e8:	f36f 0341 	bfc	r3, #1, #1
 80056ec:	7153      	strb	r3, [r2, #5]
    _usbd_dev.ep_status[epnum][dir].busy = 0;
 80056ee:	7bfa      	ldrb	r2, [r7, #15]
 80056f0:	7bbb      	ldrb	r3, [r7, #14]
 80056f2:	4908      	ldr	r1, [pc, #32]	; (8005714 <usbd_edpt_clear_stall+0x94>)
 80056f4:	0052      	lsls	r2, r2, #1
 80056f6:	440a      	add	r2, r1
 80056f8:	4413      	add	r3, r2
 80056fa:	f103 0220 	add.w	r2, r3, #32
 80056fe:	7953      	ldrb	r3, [r2, #5]
 8005700:	f36f 0300 	bfc	r3, #0, #1
 8005704:	7153      	strb	r3, [r2, #5]
  }
}
 8005706:	bf00      	nop
 8005708:	3710      	adds	r7, #16
 800570a:	46bd      	mov	sp, r7
 800570c:	bd80      	pop	{r7, pc}
 800570e:	bf00      	nop
 8005710:	24000024 	.word	0x24000024
 8005714:	24001190 	.word	0x24001190

08005718 <usbd_edpt_stalled>:

bool usbd_edpt_stalled(uint8_t rhport, uint8_t ep_addr)
{
 8005718:	b480      	push	{r7}
 800571a:	b085      	sub	sp, #20
 800571c:	af00      	add	r7, sp, #0
 800571e:	4603      	mov	r3, r0
 8005720:	460a      	mov	r2, r1
 8005722:	71fb      	strb	r3, [r7, #7]
 8005724:	4613      	mov	r3, r2
 8005726:	71bb      	strb	r3, [r7, #6]
 8005728:	79bb      	ldrb	r3, [r7, #6]
 800572a:	733b      	strb	r3, [r7, #12]
  return (uint8_t)(addr & (~TUSB_DIR_IN_MASK));
 800572c:	7b3b      	ldrb	r3, [r7, #12]
 800572e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005732:	b2db      	uxtb	r3, r3
  (void) rhport;

  uint8_t const epnum = tu_edpt_number(ep_addr);
 8005734:	73fb      	strb	r3, [r7, #15]
 8005736:	79bb      	ldrb	r3, [r7, #6]
 8005738:	737b      	strb	r3, [r7, #13]
  return (addr & TUSB_DIR_IN_MASK) ? TUSB_DIR_IN : TUSB_DIR_OUT;
 800573a:	7b7b      	ldrb	r3, [r7, #13]
 800573c:	09db      	lsrs	r3, r3, #7
 800573e:	b2db      	uxtb	r3, r3
  uint8_t const dir   = tu_edpt_dir(ep_addr);
 8005740:	73bb      	strb	r3, [r7, #14]

  return _usbd_dev.ep_status[epnum][dir].stalled;
 8005742:	7bfa      	ldrb	r2, [r7, #15]
 8005744:	7bbb      	ldrb	r3, [r7, #14]
 8005746:	490a      	ldr	r1, [pc, #40]	; (8005770 <usbd_edpt_stalled+0x58>)
 8005748:	0052      	lsls	r2, r2, #1
 800574a:	440a      	add	r2, r1
 800574c:	4413      	add	r3, r2
 800574e:	3320      	adds	r3, #32
 8005750:	795b      	ldrb	r3, [r3, #5]
 8005752:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8005756:	b2db      	uxtb	r3, r3
 8005758:	2b00      	cmp	r3, #0
 800575a:	bf14      	ite	ne
 800575c:	2301      	movne	r3, #1
 800575e:	2300      	moveq	r3, #0
 8005760:	b2db      	uxtb	r3, r3
}
 8005762:	4618      	mov	r0, r3
 8005764:	3714      	adds	r7, #20
 8005766:	46bd      	mov	sp, r7
 8005768:	f85d 7b04 	ldr.w	r7, [sp], #4
 800576c:	4770      	bx	lr
 800576e:	bf00      	nop
 8005770:	24001190 	.word	0x24001190

08005774 <dcd_edpt0_status_complete>:
#include "device/usbd_pvt.h"

//--------------------------------------------------------------------+
// Callback weak stubs (called if application does not provide)
//--------------------------------------------------------------------+
TU_ATTR_WEAK void dcd_edpt0_status_complete(uint8_t rhport, tusb_control_request_t const* request) {
 8005774:	b480      	push	{r7}
 8005776:	b083      	sub	sp, #12
 8005778:	af00      	add	r7, sp, #0
 800577a:	4603      	mov	r3, r0
 800577c:	6039      	str	r1, [r7, #0]
 800577e:	71fb      	strb	r3, [r7, #7]
  (void) rhport;
  (void) request;
}
 8005780:	bf00      	nop
 8005782:	370c      	adds	r7, #12
 8005784:	46bd      	mov	sp, r7
 8005786:	f85d 7b04 	ldr.w	r7, [sp], #4
 800578a:	4770      	bx	lr

0800578c <_status_stage_xact>:
//--------------------------------------------------------------------+
// Application API
//--------------------------------------------------------------------+

// Queue ZLP status transaction
static inline bool _status_stage_xact(uint8_t rhport, tusb_control_request_t const* request) {
 800578c:	b580      	push	{r7, lr}
 800578e:	b084      	sub	sp, #16
 8005790:	af00      	add	r7, sp, #0
 8005792:	4603      	mov	r3, r0
 8005794:	6039      	str	r1, [r7, #0]
 8005796:	71fb      	strb	r3, [r7, #7]
  // Opposite to endpoint in Data Phase
  uint8_t const ep_addr = request->bmRequestType_bit.direction ? EDPT_CTRL_OUT : EDPT_CTRL_IN;
 8005798:	683b      	ldr	r3, [r7, #0]
 800579a:	781b      	ldrb	r3, [r3, #0]
 800579c:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 80057a0:	b2db      	uxtb	r3, r3
 80057a2:	2b00      	cmp	r3, #0
 80057a4:	d001      	beq.n	80057aa <_status_stage_xact+0x1e>
 80057a6:	2300      	movs	r3, #0
 80057a8:	e000      	b.n	80057ac <_status_stage_xact+0x20>
 80057aa:	2380      	movs	r3, #128	; 0x80
 80057ac:	73fb      	strb	r3, [r7, #15]
  return usbd_edpt_xfer(rhport, ep_addr, NULL, 0);
 80057ae:	7bf9      	ldrb	r1, [r7, #15]
 80057b0:	79f8      	ldrb	r0, [r7, #7]
 80057b2:	2300      	movs	r3, #0
 80057b4:	2200      	movs	r2, #0
 80057b6:	f7ff fe73 	bl	80054a0 <usbd_edpt_xfer>
 80057ba:	4603      	mov	r3, r0
}
 80057bc:	4618      	mov	r0, r3
 80057be:	3710      	adds	r7, #16
 80057c0:	46bd      	mov	sp, r7
 80057c2:	bd80      	pop	{r7, pc}

080057c4 <tud_control_status>:

// Status phase
bool tud_control_status(uint8_t rhport, tusb_control_request_t const* request) {
 80057c4:	b580      	push	{r7, lr}
 80057c6:	b082      	sub	sp, #8
 80057c8:	af00      	add	r7, sp, #0
 80057ca:	4603      	mov	r3, r0
 80057cc:	6039      	str	r1, [r7, #0]
 80057ce:	71fb      	strb	r3, [r7, #7]
  _ctrl_xfer.request = (*request);
 80057d0:	4b0b      	ldr	r3, [pc, #44]	; (8005800 <tud_control_status+0x3c>)
 80057d2:	683a      	ldr	r2, [r7, #0]
 80057d4:	6810      	ldr	r0, [r2, #0]
 80057d6:	6851      	ldr	r1, [r2, #4]
 80057d8:	c303      	stmia	r3!, {r0, r1}
  _ctrl_xfer.buffer = NULL;
 80057da:	4b09      	ldr	r3, [pc, #36]	; (8005800 <tud_control_status+0x3c>)
 80057dc:	2200      	movs	r2, #0
 80057de:	609a      	str	r2, [r3, #8]
  _ctrl_xfer.total_xferred = 0;
 80057e0:	4b07      	ldr	r3, [pc, #28]	; (8005800 <tud_control_status+0x3c>)
 80057e2:	2200      	movs	r2, #0
 80057e4:	81da      	strh	r2, [r3, #14]
  _ctrl_xfer.data_len = 0;
 80057e6:	4b06      	ldr	r3, [pc, #24]	; (8005800 <tud_control_status+0x3c>)
 80057e8:	2200      	movs	r2, #0
 80057ea:	819a      	strh	r2, [r3, #12]

  return _status_stage_xact(rhport, request);
 80057ec:	79fb      	ldrb	r3, [r7, #7]
 80057ee:	6839      	ldr	r1, [r7, #0]
 80057f0:	4618      	mov	r0, r3
 80057f2:	f7ff ffcb 	bl	800578c <_status_stage_xact>
 80057f6:	4603      	mov	r3, r0
}
 80057f8:	4618      	mov	r0, r3
 80057fa:	3708      	adds	r7, #8
 80057fc:	46bd      	mov	sp, r7
 80057fe:	bd80      	pop	{r7, pc}
 8005800:	24001294 	.word	0x24001294

08005804 <_data_stage_xact>:

// Queue a transaction in Data Stage
// Each transaction has up to Endpoint0's max packet size.
// This function can also transfer an zero-length packet
static bool _data_stage_xact(uint8_t rhport) {
 8005804:	b580      	push	{r7, lr}
 8005806:	b088      	sub	sp, #32
 8005808:	af00      	add	r7, sp, #0
 800580a:	4603      	mov	r3, r0
 800580c:	71fb      	strb	r3, [r7, #7]
  uint16_t const xact_len = tu_min16(_ctrl_xfer.data_len - _ctrl_xfer.total_xferred,
 800580e:	4b24      	ldr	r3, [pc, #144]	; (80058a0 <_data_stage_xact+0x9c>)
 8005810:	899a      	ldrh	r2, [r3, #12]
 8005812:	4b23      	ldr	r3, [pc, #140]	; (80058a0 <_data_stage_xact+0x9c>)
 8005814:	89db      	ldrh	r3, [r3, #14]
 8005816:	1ad3      	subs	r3, r2, r3
 8005818:	b29b      	uxth	r3, r3
 800581a:	837b      	strh	r3, [r7, #26]
 800581c:	2340      	movs	r3, #64	; 0x40
 800581e:	833b      	strh	r3, [r7, #24]
TU_ATTR_ALWAYS_INLINE static inline uint16_t tu_min16 (uint16_t x, uint16_t y) { return (x < y) ? x : y; }
 8005820:	8b7a      	ldrh	r2, [r7, #26]
 8005822:	8b3b      	ldrh	r3, [r7, #24]
 8005824:	4293      	cmp	r3, r2
 8005826:	bf28      	it	cs
 8005828:	4613      	movcs	r3, r2
 800582a:	b29b      	uxth	r3, r3
 800582c:	83bb      	strh	r3, [r7, #28]
                                     CFG_TUD_ENDPOINT0_SIZE);

  uint8_t ep_addr = EDPT_CTRL_OUT;
 800582e:	2300      	movs	r3, #0
 8005830:	77fb      	strb	r3, [r7, #31]

  if (_ctrl_xfer.request.bmRequestType_bit.direction == TUSB_DIR_IN) {
 8005832:	4b1b      	ldr	r3, [pc, #108]	; (80058a0 <_data_stage_xact+0x9c>)
 8005834:	781b      	ldrb	r3, [r3, #0]
 8005836:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800583a:	b2db      	uxtb	r3, r3
 800583c:	2b00      	cmp	r3, #0
 800583e:	d01e      	beq.n	800587e <_data_stage_xact+0x7a>
    ep_addr = EDPT_CTRL_IN;
 8005840:	2380      	movs	r3, #128	; 0x80
 8005842:	77fb      	strb	r3, [r7, #31]
    if (xact_len) {
 8005844:	8bbb      	ldrh	r3, [r7, #28]
 8005846:	2b00      	cmp	r3, #0
 8005848:	d019      	beq.n	800587e <_data_stage_xact+0x7a>
      TU_VERIFY(0 == tu_memcpy_s(_usbd_ctrl_buf, CFG_TUD_ENDPOINT0_SIZE, _ctrl_xfer.buffer, xact_len));
 800584a:	4b15      	ldr	r3, [pc, #84]	; (80058a0 <_data_stage_xact+0x9c>)
 800584c:	689a      	ldr	r2, [r3, #8]
 800584e:	8bbb      	ldrh	r3, [r7, #28]
 8005850:	4914      	ldr	r1, [pc, #80]	; (80058a4 <_data_stage_xact+0xa0>)
 8005852:	6179      	str	r1, [r7, #20]
 8005854:	2140      	movs	r1, #64	; 0x40
 8005856:	6139      	str	r1, [r7, #16]
 8005858:	60fa      	str	r2, [r7, #12]
 800585a:	60bb      	str	r3, [r7, #8]
  if ( count > destsz ) {
 800585c:	693a      	ldr	r2, [r7, #16]
 800585e:	68bb      	ldr	r3, [r7, #8]
 8005860:	429a      	cmp	r2, r3
 8005862:	d202      	bcs.n	800586a <_data_stage_xact+0x66>
    return -1;
 8005864:	f04f 33ff 	mov.w	r3, #4294967295
 8005868:	e005      	b.n	8005876 <_data_stage_xact+0x72>
  memcpy(dest, src, count);
 800586a:	68ba      	ldr	r2, [r7, #8]
 800586c:	68f9      	ldr	r1, [r7, #12]
 800586e:	6978      	ldr	r0, [r7, #20]
 8005870:	f00a fbdc 	bl	801002c <memcpy>
  return 0;
 8005874:	2300      	movs	r3, #0
 8005876:	2b00      	cmp	r3, #0
 8005878:	d001      	beq.n	800587e <_data_stage_xact+0x7a>
 800587a:	2300      	movs	r3, #0
 800587c:	e00b      	b.n	8005896 <_data_stage_xact+0x92>
    }
  }

  return usbd_edpt_xfer(rhport, ep_addr, xact_len ? _usbd_ctrl_buf : NULL, xact_len);
 800587e:	8bbb      	ldrh	r3, [r7, #28]
 8005880:	2b00      	cmp	r3, #0
 8005882:	d001      	beq.n	8005888 <_data_stage_xact+0x84>
 8005884:	4a07      	ldr	r2, [pc, #28]	; (80058a4 <_data_stage_xact+0xa0>)
 8005886:	e000      	b.n	800588a <_data_stage_xact+0x86>
 8005888:	2200      	movs	r2, #0
 800588a:	8bbb      	ldrh	r3, [r7, #28]
 800588c:	7ff9      	ldrb	r1, [r7, #31]
 800588e:	79f8      	ldrb	r0, [r7, #7]
 8005890:	f7ff fe06 	bl	80054a0 <usbd_edpt_xfer>
 8005894:	4603      	mov	r3, r0
}
 8005896:	4618      	mov	r0, r3
 8005898:	3720      	adds	r7, #32
 800589a:	46bd      	mov	sp, r7
 800589c:	bd80      	pop	{r7, pc}
 800589e:	bf00      	nop
 80058a0:	24001294 	.word	0x24001294
 80058a4:	240012a8 	.word	0x240012a8

080058a8 <tud_control_xfer>:

// Transmit data to/from the control endpoint.
// If the request's wLength is zero, a status packet is sent instead.
bool tud_control_xfer(uint8_t rhport, tusb_control_request_t const* request, void* buffer, uint16_t len) {
 80058a8:	b580      	push	{r7, lr}
 80058aa:	b088      	sub	sp, #32
 80058ac:	af00      	add	r7, sp, #0
 80058ae:	60b9      	str	r1, [r7, #8]
 80058b0:	607a      	str	r2, [r7, #4]
 80058b2:	461a      	mov	r2, r3
 80058b4:	4603      	mov	r3, r0
 80058b6:	73fb      	strb	r3, [r7, #15]
 80058b8:	4613      	mov	r3, r2
 80058ba:	81bb      	strh	r3, [r7, #12]
  _ctrl_xfer.request = (*request);
 80058bc:	4b30      	ldr	r3, [pc, #192]	; (8005980 <tud_control_xfer+0xd8>)
 80058be:	68ba      	ldr	r2, [r7, #8]
 80058c0:	6810      	ldr	r0, [r2, #0]
 80058c2:	6851      	ldr	r1, [r2, #4]
 80058c4:	c303      	stmia	r3!, {r0, r1}
  _ctrl_xfer.buffer = (uint8_t*) buffer;
 80058c6:	4a2e      	ldr	r2, [pc, #184]	; (8005980 <tud_control_xfer+0xd8>)
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	6093      	str	r3, [r2, #8]
  _ctrl_xfer.total_xferred = 0U;
 80058cc:	4b2c      	ldr	r3, [pc, #176]	; (8005980 <tud_control_xfer+0xd8>)
 80058ce:	2200      	movs	r2, #0
 80058d0:	81da      	strh	r2, [r3, #14]
  _ctrl_xfer.data_len = tu_min16(len, request->wLength);
 80058d2:	68bb      	ldr	r3, [r7, #8]
 80058d4:	88db      	ldrh	r3, [r3, #6]
 80058d6:	b29a      	uxth	r2, r3
 80058d8:	89bb      	ldrh	r3, [r7, #12]
 80058da:	827b      	strh	r3, [r7, #18]
 80058dc:	4613      	mov	r3, r2
 80058de:	823b      	strh	r3, [r7, #16]
TU_ATTR_ALWAYS_INLINE static inline uint16_t tu_min16 (uint16_t x, uint16_t y) { return (x < y) ? x : y; }
 80058e0:	8a7a      	ldrh	r2, [r7, #18]
 80058e2:	8a3b      	ldrh	r3, [r7, #16]
 80058e4:	4293      	cmp	r3, r2
 80058e6:	bf28      	it	cs
 80058e8:	4613      	movcs	r3, r2
 80058ea:	b29a      	uxth	r2, r3
 80058ec:	4b24      	ldr	r3, [pc, #144]	; (8005980 <tud_control_xfer+0xd8>)
 80058ee:	819a      	strh	r2, [r3, #12]

  if (request->wLength > 0U) {
 80058f0:	68bb      	ldr	r3, [r7, #8]
 80058f2:	88db      	ldrh	r3, [r3, #6]
 80058f4:	b29b      	uxth	r3, r3
 80058f6:	2b00      	cmp	r3, #0
 80058f8:	d026      	beq.n	8005948 <tud_control_xfer+0xa0>
    if (_ctrl_xfer.data_len > 0U) {
 80058fa:	4b21      	ldr	r3, [pc, #132]	; (8005980 <tud_control_xfer+0xd8>)
 80058fc:	899b      	ldrh	r3, [r3, #12]
 80058fe:	2b00      	cmp	r3, #0
 8005900:	d00d      	beq.n	800591e <tud_control_xfer+0x76>
      TU_ASSERT(buffer);
 8005902:	687b      	ldr	r3, [r7, #4]
 8005904:	2b00      	cmp	r3, #0
 8005906:	d10a      	bne.n	800591e <tud_control_xfer+0x76>
 8005908:	4b1e      	ldr	r3, [pc, #120]	; (8005984 <tud_control_xfer+0xdc>)
 800590a:	61bb      	str	r3, [r7, #24]
 800590c:	69bb      	ldr	r3, [r7, #24]
 800590e:	681b      	ldr	r3, [r3, #0]
 8005910:	f003 0301 	and.w	r3, r3, #1
 8005914:	2b00      	cmp	r3, #0
 8005916:	d000      	beq.n	800591a <tud_control_xfer+0x72>
 8005918:	be00      	bkpt	0x0000
 800591a:	2300      	movs	r3, #0
 800591c:	e02b      	b.n	8005976 <tud_control_xfer+0xce>
    }

//    TU_LOG2("  Control total data length is %u bytes\r\n", _ctrl_xfer.data_len);

    // Data stage
    TU_ASSERT(_data_stage_xact(rhport));
 800591e:	7bfb      	ldrb	r3, [r7, #15]
 8005920:	4618      	mov	r0, r3
 8005922:	f7ff ff6f 	bl	8005804 <_data_stage_xact>
 8005926:	4603      	mov	r3, r0
 8005928:	f083 0301 	eor.w	r3, r3, #1
 800592c:	b2db      	uxtb	r3, r3
 800592e:	2b00      	cmp	r3, #0
 8005930:	d020      	beq.n	8005974 <tud_control_xfer+0xcc>
 8005932:	4b14      	ldr	r3, [pc, #80]	; (8005984 <tud_control_xfer+0xdc>)
 8005934:	617b      	str	r3, [r7, #20]
 8005936:	697b      	ldr	r3, [r7, #20]
 8005938:	681b      	ldr	r3, [r3, #0]
 800593a:	f003 0301 	and.w	r3, r3, #1
 800593e:	2b00      	cmp	r3, #0
 8005940:	d000      	beq.n	8005944 <tud_control_xfer+0x9c>
 8005942:	be00      	bkpt	0x0000
 8005944:	2300      	movs	r3, #0
 8005946:	e016      	b.n	8005976 <tud_control_xfer+0xce>
  } else {
    // Status stage
    TU_ASSERT(_status_stage_xact(rhport, request));
 8005948:	7bfb      	ldrb	r3, [r7, #15]
 800594a:	68b9      	ldr	r1, [r7, #8]
 800594c:	4618      	mov	r0, r3
 800594e:	f7ff ff1d 	bl	800578c <_status_stage_xact>
 8005952:	4603      	mov	r3, r0
 8005954:	f083 0301 	eor.w	r3, r3, #1
 8005958:	b2db      	uxtb	r3, r3
 800595a:	2b00      	cmp	r3, #0
 800595c:	d00a      	beq.n	8005974 <tud_control_xfer+0xcc>
 800595e:	4b09      	ldr	r3, [pc, #36]	; (8005984 <tud_control_xfer+0xdc>)
 8005960:	61fb      	str	r3, [r7, #28]
 8005962:	69fb      	ldr	r3, [r7, #28]
 8005964:	681b      	ldr	r3, [r3, #0]
 8005966:	f003 0301 	and.w	r3, r3, #1
 800596a:	2b00      	cmp	r3, #0
 800596c:	d000      	beq.n	8005970 <tud_control_xfer+0xc8>
 800596e:	be00      	bkpt	0x0000
 8005970:	2300      	movs	r3, #0
 8005972:	e000      	b.n	8005976 <tud_control_xfer+0xce>
  }

  return true;
 8005974:	2301      	movs	r3, #1
}
 8005976:	4618      	mov	r0, r3
 8005978:	3720      	adds	r7, #32
 800597a:	46bd      	mov	sp, r7
 800597c:	bd80      	pop	{r7, pc}
 800597e:	bf00      	nop
 8005980:	24001294 	.word	0x24001294
 8005984:	e000edf0 	.word	0xe000edf0

08005988 <usbd_control_reset>:
void usbd_control_reset(void);
void usbd_control_set_request(tusb_control_request_t const* request);
void usbd_control_set_complete_callback(usbd_control_xfer_cb_t fp);
bool usbd_control_xfer_cb(uint8_t rhport, uint8_t ep_addr, xfer_result_t event, uint32_t xferred_bytes);

void usbd_control_reset(void) {
 8005988:	b580      	push	{r7, lr}
 800598a:	af00      	add	r7, sp, #0
  tu_varclr(&_ctrl_xfer);
 800598c:	2214      	movs	r2, #20
 800598e:	2100      	movs	r1, #0
 8005990:	4802      	ldr	r0, [pc, #8]	; (800599c <usbd_control_reset+0x14>)
 8005992:	f00a fb1e 	bl	800ffd2 <memset>
}
 8005996:	bf00      	nop
 8005998:	bd80      	pop	{r7, pc}
 800599a:	bf00      	nop
 800599c:	24001294 	.word	0x24001294

080059a0 <usbd_control_set_complete_callback>:

// Set complete callback
void usbd_control_set_complete_callback(usbd_control_xfer_cb_t fp) {
 80059a0:	b480      	push	{r7}
 80059a2:	b083      	sub	sp, #12
 80059a4:	af00      	add	r7, sp, #0
 80059a6:	6078      	str	r0, [r7, #4]
  _ctrl_xfer.complete_cb = fp;
 80059a8:	4a04      	ldr	r2, [pc, #16]	; (80059bc <usbd_control_set_complete_callback+0x1c>)
 80059aa:	687b      	ldr	r3, [r7, #4]
 80059ac:	6113      	str	r3, [r2, #16]
}
 80059ae:	bf00      	nop
 80059b0:	370c      	adds	r7, #12
 80059b2:	46bd      	mov	sp, r7
 80059b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059b8:	4770      	bx	lr
 80059ba:	bf00      	nop
 80059bc:	24001294 	.word	0x24001294

080059c0 <usbd_control_set_request>:

// for dcd_set_address where DCD is responsible for status response
void usbd_control_set_request(tusb_control_request_t const* request) {
 80059c0:	b480      	push	{r7}
 80059c2:	b083      	sub	sp, #12
 80059c4:	af00      	add	r7, sp, #0
 80059c6:	6078      	str	r0, [r7, #4]
  _ctrl_xfer.request = (*request);
 80059c8:	4b09      	ldr	r3, [pc, #36]	; (80059f0 <usbd_control_set_request+0x30>)
 80059ca:	687a      	ldr	r2, [r7, #4]
 80059cc:	6810      	ldr	r0, [r2, #0]
 80059ce:	6851      	ldr	r1, [r2, #4]
 80059d0:	c303      	stmia	r3!, {r0, r1}
  _ctrl_xfer.buffer = NULL;
 80059d2:	4b07      	ldr	r3, [pc, #28]	; (80059f0 <usbd_control_set_request+0x30>)
 80059d4:	2200      	movs	r2, #0
 80059d6:	609a      	str	r2, [r3, #8]
  _ctrl_xfer.total_xferred = 0;
 80059d8:	4b05      	ldr	r3, [pc, #20]	; (80059f0 <usbd_control_set_request+0x30>)
 80059da:	2200      	movs	r2, #0
 80059dc:	81da      	strh	r2, [r3, #14]
  _ctrl_xfer.data_len = 0;
 80059de:	4b04      	ldr	r3, [pc, #16]	; (80059f0 <usbd_control_set_request+0x30>)
 80059e0:	2200      	movs	r2, #0
 80059e2:	819a      	strh	r2, [r3, #12]
}
 80059e4:	bf00      	nop
 80059e6:	370c      	adds	r7, #12
 80059e8:	46bd      	mov	sp, r7
 80059ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059ee:	4770      	bx	lr
 80059f0:	24001294 	.word	0x24001294

080059f4 <usbd_control_xfer_cb>:

// callback when a transaction complete on
// - DATA stage of control endpoint or
// - Status stage
bool usbd_control_xfer_cb(uint8_t rhport, uint8_t ep_addr, xfer_result_t result, uint32_t xferred_bytes) {
 80059f4:	b580      	push	{r7, lr}
 80059f6:	b088      	sub	sp, #32
 80059f8:	af00      	add	r7, sp, #0
 80059fa:	603b      	str	r3, [r7, #0]
 80059fc:	4603      	mov	r3, r0
 80059fe:	71fb      	strb	r3, [r7, #7]
 8005a00:	460b      	mov	r3, r1
 8005a02:	71bb      	strb	r3, [r7, #6]
 8005a04:	4613      	mov	r3, r2
 8005a06:	717b      	strb	r3, [r7, #5]
 8005a08:	79bb      	ldrb	r3, [r7, #6]
 8005a0a:	73fb      	strb	r3, [r7, #15]
 8005a0c:	7bfb      	ldrb	r3, [r7, #15]
 8005a0e:	09db      	lsrs	r3, r3, #7
 8005a10:	b2db      	uxtb	r3, r3
  (void) result;

  // Endpoint Address is opposite to direction bit, this is Status Stage complete event
  if (tu_edpt_dir(ep_addr) != _ctrl_xfer.request.bmRequestType_bit.direction) {
 8005a12:	4a4f      	ldr	r2, [pc, #316]	; (8005b50 <usbd_control_xfer_cb+0x15c>)
 8005a14:	7812      	ldrb	r2, [r2, #0]
 8005a16:	f3c2 12c0 	ubfx	r2, r2, #7, #1
 8005a1a:	b2d2      	uxtb	r2, r2
 8005a1c:	4293      	cmp	r3, r2
 8005a1e:	d01e      	beq.n	8005a5e <usbd_control_xfer_cb+0x6a>
    TU_ASSERT(0 == xferred_bytes);
 8005a20:	683b      	ldr	r3, [r7, #0]
 8005a22:	2b00      	cmp	r3, #0
 8005a24:	d00a      	beq.n	8005a3c <usbd_control_xfer_cb+0x48>
 8005a26:	4b4b      	ldr	r3, [pc, #300]	; (8005b54 <usbd_control_xfer_cb+0x160>)
 8005a28:	613b      	str	r3, [r7, #16]
 8005a2a:	693b      	ldr	r3, [r7, #16]
 8005a2c:	681b      	ldr	r3, [r3, #0]
 8005a2e:	f003 0301 	and.w	r3, r3, #1
 8005a32:	2b00      	cmp	r3, #0
 8005a34:	d000      	beq.n	8005a38 <usbd_control_xfer_cb+0x44>
 8005a36:	be00      	bkpt	0x0000
 8005a38:	2300      	movs	r3, #0
 8005a3a:	e084      	b.n	8005b46 <usbd_control_xfer_cb+0x152>

    // invoke optional dcd hook if available
    dcd_edpt0_status_complete(rhport, &_ctrl_xfer.request);
 8005a3c:	79fb      	ldrb	r3, [r7, #7]
 8005a3e:	4944      	ldr	r1, [pc, #272]	; (8005b50 <usbd_control_xfer_cb+0x15c>)
 8005a40:	4618      	mov	r0, r3
 8005a42:	f7ff fe97 	bl	8005774 <dcd_edpt0_status_complete>

    if (_ctrl_xfer.complete_cb) {
 8005a46:	4b42      	ldr	r3, [pc, #264]	; (8005b50 <usbd_control_xfer_cb+0x15c>)
 8005a48:	691b      	ldr	r3, [r3, #16]
 8005a4a:	2b00      	cmp	r3, #0
 8005a4c:	d005      	beq.n	8005a5a <usbd_control_xfer_cb+0x66>
      // TODO refactor with usbd_driver_print_control_complete_name
      _ctrl_xfer.complete_cb(rhport, CONTROL_STAGE_ACK, &_ctrl_xfer.request);
 8005a4e:	4b40      	ldr	r3, [pc, #256]	; (8005b50 <usbd_control_xfer_cb+0x15c>)
 8005a50:	691b      	ldr	r3, [r3, #16]
 8005a52:	79f8      	ldrb	r0, [r7, #7]
 8005a54:	4a3e      	ldr	r2, [pc, #248]	; (8005b50 <usbd_control_xfer_cb+0x15c>)
 8005a56:	2103      	movs	r1, #3
 8005a58:	4798      	blx	r3
    }

    return true;
 8005a5a:	2301      	movs	r3, #1
 8005a5c:	e073      	b.n	8005b46 <usbd_control_xfer_cb+0x152>
  }

  if (_ctrl_xfer.request.bmRequestType_bit.direction == TUSB_DIR_OUT) {
 8005a5e:	4b3c      	ldr	r3, [pc, #240]	; (8005b50 <usbd_control_xfer_cb+0x15c>)
 8005a60:	781b      	ldrb	r3, [r3, #0]
 8005a62:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8005a66:	b2db      	uxtb	r3, r3
 8005a68:	2b00      	cmp	r3, #0
 8005a6a:	d10c      	bne.n	8005a86 <usbd_control_xfer_cb+0x92>
    TU_VERIFY(_ctrl_xfer.buffer);
 8005a6c:	4b38      	ldr	r3, [pc, #224]	; (8005b50 <usbd_control_xfer_cb+0x15c>)
 8005a6e:	689b      	ldr	r3, [r3, #8]
 8005a70:	2b00      	cmp	r3, #0
 8005a72:	d101      	bne.n	8005a78 <usbd_control_xfer_cb+0x84>
 8005a74:	2300      	movs	r3, #0
 8005a76:	e066      	b.n	8005b46 <usbd_control_xfer_cb+0x152>
    memcpy(_ctrl_xfer.buffer, _usbd_ctrl_buf, xferred_bytes);
 8005a78:	4b35      	ldr	r3, [pc, #212]	; (8005b50 <usbd_control_xfer_cb+0x15c>)
 8005a7a:	689b      	ldr	r3, [r3, #8]
 8005a7c:	683a      	ldr	r2, [r7, #0]
 8005a7e:	4936      	ldr	r1, [pc, #216]	; (8005b58 <usbd_control_xfer_cb+0x164>)
 8005a80:	4618      	mov	r0, r3
 8005a82:	f00a fad3 	bl	801002c <memcpy>
    TU_LOG_MEM(CFG_TUD_LOG_LEVEL, _usbd_ctrl_buf, xferred_bytes, 2);
  }

  _ctrl_xfer.total_xferred += (uint16_t) xferred_bytes;
 8005a86:	4b32      	ldr	r3, [pc, #200]	; (8005b50 <usbd_control_xfer_cb+0x15c>)
 8005a88:	89da      	ldrh	r2, [r3, #14]
 8005a8a:	683b      	ldr	r3, [r7, #0]
 8005a8c:	b29b      	uxth	r3, r3
 8005a8e:	4413      	add	r3, r2
 8005a90:	b29a      	uxth	r2, r3
 8005a92:	4b2f      	ldr	r3, [pc, #188]	; (8005b50 <usbd_control_xfer_cb+0x15c>)
 8005a94:	81da      	strh	r2, [r3, #14]
  _ctrl_xfer.buffer += xferred_bytes;
 8005a96:	4b2e      	ldr	r3, [pc, #184]	; (8005b50 <usbd_control_xfer_cb+0x15c>)
 8005a98:	689a      	ldr	r2, [r3, #8]
 8005a9a:	683b      	ldr	r3, [r7, #0]
 8005a9c:	4413      	add	r3, r2
 8005a9e:	4a2c      	ldr	r2, [pc, #176]	; (8005b50 <usbd_control_xfer_cb+0x15c>)
 8005aa0:	6093      	str	r3, [r2, #8]

  // Data Stage is complete when all request's length are transferred or
  // a short packet is sent including zero-length packet.
  if ((_ctrl_xfer.request.wLength == _ctrl_xfer.total_xferred) ||
 8005aa2:	4b2b      	ldr	r3, [pc, #172]	; (8005b50 <usbd_control_xfer_cb+0x15c>)
 8005aa4:	88da      	ldrh	r2, [r3, #6]
 8005aa6:	4b2a      	ldr	r3, [pc, #168]	; (8005b50 <usbd_control_xfer_cb+0x15c>)
 8005aa8:	89db      	ldrh	r3, [r3, #14]
 8005aaa:	429a      	cmp	r2, r3
 8005aac:	d002      	beq.n	8005ab4 <usbd_control_xfer_cb+0xc0>
 8005aae:	683b      	ldr	r3, [r7, #0]
 8005ab0:	2b3f      	cmp	r3, #63	; 0x3f
 8005ab2:	d831      	bhi.n	8005b18 <usbd_control_xfer_cb+0x124>
      (xferred_bytes < CFG_TUD_ENDPOINT0_SIZE)) {
    // DATA stage is complete
    bool is_ok = true;
 8005ab4:	2301      	movs	r3, #1
 8005ab6:	77fb      	strb	r3, [r7, #31]

    // invoke complete callback if set
    // callback can still stall control in status phase e.g out data does not make sense
    if (_ctrl_xfer.complete_cb) {
 8005ab8:	4b25      	ldr	r3, [pc, #148]	; (8005b50 <usbd_control_xfer_cb+0x15c>)
 8005aba:	691b      	ldr	r3, [r3, #16]
 8005abc:	2b00      	cmp	r3, #0
 8005abe:	d007      	beq.n	8005ad0 <usbd_control_xfer_cb+0xdc>
      #if CFG_TUSB_DEBUG >= CFG_TUD_LOG_LEVEL
      usbd_driver_print_control_complete_name(_ctrl_xfer.complete_cb);
      #endif

      is_ok = _ctrl_xfer.complete_cb(rhport, CONTROL_STAGE_DATA, &_ctrl_xfer.request);
 8005ac0:	4b23      	ldr	r3, [pc, #140]	; (8005b50 <usbd_control_xfer_cb+0x15c>)
 8005ac2:	691b      	ldr	r3, [r3, #16]
 8005ac4:	79f8      	ldrb	r0, [r7, #7]
 8005ac6:	4a22      	ldr	r2, [pc, #136]	; (8005b50 <usbd_control_xfer_cb+0x15c>)
 8005ac8:	2102      	movs	r1, #2
 8005aca:	4798      	blx	r3
 8005acc:	4603      	mov	r3, r0
 8005ace:	77fb      	strb	r3, [r7, #31]
    }

    if (is_ok) {
 8005ad0:	7ffb      	ldrb	r3, [r7, #31]
 8005ad2:	2b00      	cmp	r3, #0
 8005ad4:	d015      	beq.n	8005b02 <usbd_control_xfer_cb+0x10e>
      // Send status
      TU_ASSERT(_status_stage_xact(rhport, &_ctrl_xfer.request));
 8005ad6:	79fb      	ldrb	r3, [r7, #7]
 8005ad8:	491d      	ldr	r1, [pc, #116]	; (8005b50 <usbd_control_xfer_cb+0x15c>)
 8005ada:	4618      	mov	r0, r3
 8005adc:	f7ff fe56 	bl	800578c <_status_stage_xact>
 8005ae0:	4603      	mov	r3, r0
 8005ae2:	f083 0301 	eor.w	r3, r3, #1
 8005ae6:	b2db      	uxtb	r3, r3
 8005ae8:	2b00      	cmp	r3, #0
 8005aea:	d02a      	beq.n	8005b42 <usbd_control_xfer_cb+0x14e>
 8005aec:	4b19      	ldr	r3, [pc, #100]	; (8005b54 <usbd_control_xfer_cb+0x160>)
 8005aee:	617b      	str	r3, [r7, #20]
 8005af0:	697b      	ldr	r3, [r7, #20]
 8005af2:	681b      	ldr	r3, [r3, #0]
 8005af4:	f003 0301 	and.w	r3, r3, #1
 8005af8:	2b00      	cmp	r3, #0
 8005afa:	d000      	beq.n	8005afe <usbd_control_xfer_cb+0x10a>
 8005afc:	be00      	bkpt	0x0000
 8005afe:	2300      	movs	r3, #0
 8005b00:	e021      	b.n	8005b46 <usbd_control_xfer_cb+0x152>
    } else {
      // Stall both IN and OUT control endpoint
      dcd_edpt_stall(rhport, EDPT_CTRL_OUT);
 8005b02:	79fb      	ldrb	r3, [r7, #7]
 8005b04:	2100      	movs	r1, #0
 8005b06:	4618      	mov	r0, r3
 8005b08:	f001 f810 	bl	8006b2c <dcd_edpt_stall>
      dcd_edpt_stall(rhport, EDPT_CTRL_IN);
 8005b0c:	79fb      	ldrb	r3, [r7, #7]
 8005b0e:	2180      	movs	r1, #128	; 0x80
 8005b10:	4618      	mov	r0, r3
 8005b12:	f001 f80b 	bl	8006b2c <dcd_edpt_stall>
      (xferred_bytes < CFG_TUD_ENDPOINT0_SIZE)) {
 8005b16:	e014      	b.n	8005b42 <usbd_control_xfer_cb+0x14e>
    }
  } else {
    // More data to transfer
    TU_ASSERT(_data_stage_xact(rhport));
 8005b18:	79fb      	ldrb	r3, [r7, #7]
 8005b1a:	4618      	mov	r0, r3
 8005b1c:	f7ff fe72 	bl	8005804 <_data_stage_xact>
 8005b20:	4603      	mov	r3, r0
 8005b22:	f083 0301 	eor.w	r3, r3, #1
 8005b26:	b2db      	uxtb	r3, r3
 8005b28:	2b00      	cmp	r3, #0
 8005b2a:	d00b      	beq.n	8005b44 <usbd_control_xfer_cb+0x150>
 8005b2c:	4b09      	ldr	r3, [pc, #36]	; (8005b54 <usbd_control_xfer_cb+0x160>)
 8005b2e:	61bb      	str	r3, [r7, #24]
 8005b30:	69bb      	ldr	r3, [r7, #24]
 8005b32:	681b      	ldr	r3, [r3, #0]
 8005b34:	f003 0301 	and.w	r3, r3, #1
 8005b38:	2b00      	cmp	r3, #0
 8005b3a:	d000      	beq.n	8005b3e <usbd_control_xfer_cb+0x14a>
 8005b3c:	be00      	bkpt	0x0000
 8005b3e:	2300      	movs	r3, #0
 8005b40:	e001      	b.n	8005b46 <usbd_control_xfer_cb+0x152>
      (xferred_bytes < CFG_TUD_ENDPOINT0_SIZE)) {
 8005b42:	bf00      	nop
  }

  return true;
 8005b44:	2301      	movs	r3, #1
}
 8005b46:	4618      	mov	r0, r3
 8005b48:	3720      	adds	r7, #32
 8005b4a:	46bd      	mov	sp, r7
 8005b4c:	bd80      	pop	{r7, pc}
 8005b4e:	bf00      	nop
 8005b50:	24001294 	.word	0x24001294
 8005b54:	e000edf0 	.word	0xe000edf0
 8005b58:	240012a8 	.word	0x240012a8

08005b5c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005b5c:	b480      	push	{r7}
 8005b5e:	b083      	sub	sp, #12
 8005b60:	af00      	add	r7, sp, #0
 8005b62:	4603      	mov	r3, r0
 8005b64:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8005b66:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8005b6a:	2b00      	cmp	r3, #0
 8005b6c:	db0b      	blt.n	8005b86 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8005b6e:	88fb      	ldrh	r3, [r7, #6]
 8005b70:	f003 021f 	and.w	r2, r3, #31
 8005b74:	4907      	ldr	r1, [pc, #28]	; (8005b94 <__NVIC_EnableIRQ+0x38>)
 8005b76:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8005b7a:	095b      	lsrs	r3, r3, #5
 8005b7c:	2001      	movs	r0, #1
 8005b7e:	fa00 f202 	lsl.w	r2, r0, r2
 8005b82:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8005b86:	bf00      	nop
 8005b88:	370c      	adds	r7, #12
 8005b8a:	46bd      	mov	sp, r7
 8005b8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b90:	4770      	bx	lr
 8005b92:	bf00      	nop
 8005b94:	e000e100 	.word	0xe000e100

08005b98 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8005b98:	b480      	push	{r7}
 8005b9a:	b083      	sub	sp, #12
 8005b9c:	af00      	add	r7, sp, #0
 8005b9e:	4603      	mov	r3, r0
 8005ba0:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8005ba2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8005ba6:	2b00      	cmp	r3, #0
 8005ba8:	db12      	blt.n	8005bd0 <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8005baa:	88fb      	ldrh	r3, [r7, #6]
 8005bac:	f003 021f 	and.w	r2, r3, #31
 8005bb0:	490a      	ldr	r1, [pc, #40]	; (8005bdc <__NVIC_DisableIRQ+0x44>)
 8005bb2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8005bb6:	095b      	lsrs	r3, r3, #5
 8005bb8:	2001      	movs	r0, #1
 8005bba:	fa00 f202 	lsl.w	r2, r0, r2
 8005bbe:	3320      	adds	r3, #32
 8005bc0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8005bc4:	f3bf 8f4f 	dsb	sy
}
 8005bc8:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8005bca:	f3bf 8f6f 	isb	sy
}
 8005bce:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 8005bd0:	bf00      	nop
 8005bd2:	370c      	adds	r7, #12
 8005bd4:	46bd      	mov	sp, r7
 8005bd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bda:	4770      	bx	lr
 8005bdc:	e000e100 	.word	0xe000e100

08005be0 <dwc2_phy_init>:
}

// MCU specific PHY init, called BEFORE core reset
// - dwc2 3.30a (H5) use USB_HS_PHYC
// - dwc2 4.11a (U5) use femtoPHY
static inline void dwc2_phy_init(dwc2_regs_t* dwc2, uint8_t hs_phy_type) {
 8005be0:	b480      	push	{r7}
 8005be2:	b083      	sub	sp, #12
 8005be4:	af00      	add	r7, sp, #0
 8005be6:	6078      	str	r0, [r7, #4]
 8005be8:	460b      	mov	r3, r1
 8005bea:	70fb      	strb	r3, [r7, #3]
  if (hs_phy_type == HS_PHY_TYPE_NONE) {
 8005bec:	78fb      	ldrb	r3, [r7, #3]
 8005bee:	2b00      	cmp	r3, #0
 8005bf0:	d11e      	bne.n	8005c30 <dwc2_phy_init+0x50>
    // Enable on-chip FS PHY
    dwc2->stm32_gccfg |= STM32_GCCFG_PWRDWN;
 8005bf2:	687b      	ldr	r3, [r7, #4]
 8005bf4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005bf6:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8005bfa:	687b      	ldr	r3, [r7, #4]
 8005bfc:	639a      	str	r2, [r3, #56]	; 0x38
    // https://community.st.com/t5/stm32cubemx-mcus/why-stm32h743-usb-fs-doesn-t-work-if-freertos-tickless-idle/m-p/349480#M18867
    // H7 running on full-speed phy need to disable ULPI clock in sleep mode.
    // Otherwise, USB won't work when mcu executing WFI/WFE instruction i.e tick-less RTOS.
    // Note: there may be other family that is affected by this, but only H7 and F7 is tested so far
    #if defined(USB_OTG_FS_PERIPH_BASE) && defined(RCC_AHB1LPENR_USB2OTGFSULPILPEN)
    if ( USB_OTG_FS_PERIPH_BASE == (uint32_t) dwc2 ) {
 8005bfe:	687b      	ldr	r3, [r7, #4]
 8005c00:	4a11      	ldr	r2, [pc, #68]	; (8005c48 <dwc2_phy_init+0x68>)
 8005c02:	4293      	cmp	r3, r2
 8005c04:	d107      	bne.n	8005c16 <dwc2_phy_init+0x36>
      RCC->AHB1LPENR &= ~RCC_AHB1LPENR_USB2OTGFSULPILPEN;
 8005c06:	4b11      	ldr	r3, [pc, #68]	; (8005c4c <dwc2_phy_init+0x6c>)
 8005c08:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 8005c0c:	4a0f      	ldr	r2, [pc, #60]	; (8005c4c <dwc2_phy_init+0x6c>)
 8005c0e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005c12:	f8c2 3100 	str.w	r3, [r2, #256]	; 0x100
    }
    #endif

    #if defined(USB_OTG_HS_PERIPH_BASE) && defined(RCC_AHB1LPENR_USB1OTGHSULPILPEN)
    if ( USB_OTG_HS_PERIPH_BASE == (uint32_t) dwc2 ) {
 8005c16:	687b      	ldr	r3, [r7, #4]
 8005c18:	4a0d      	ldr	r2, [pc, #52]	; (8005c50 <dwc2_phy_init+0x70>)
 8005c1a:	4293      	cmp	r3, r2
 8005c1c:	d10e      	bne.n	8005c3c <dwc2_phy_init+0x5c>
      RCC->AHB1LPENR &= ~RCC_AHB1LPENR_USB1OTGHSULPILPEN;
 8005c1e:	4b0b      	ldr	r3, [pc, #44]	; (8005c4c <dwc2_phy_init+0x6c>)
 8005c20:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 8005c24:	4a09      	ldr	r2, [pc, #36]	; (8005c4c <dwc2_phy_init+0x6c>)
 8005c26:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8005c2a:	f8c2 3100 	str.w	r3, [r2, #256]	; 0x100
      #else

      #endif
    }
  }
}
 8005c2e:	e005      	b.n	8005c3c <dwc2_phy_init+0x5c>
    dwc2->stm32_gccfg &= ~STM32_GCCFG_PWRDWN;
 8005c30:	687b      	ldr	r3, [r7, #4]
 8005c32:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005c34:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8005c38:	687b      	ldr	r3, [r7, #4]
 8005c3a:	639a      	str	r2, [r3, #56]	; 0x38
}
 8005c3c:	bf00      	nop
 8005c3e:	370c      	adds	r7, #12
 8005c40:	46bd      	mov	sp, r7
 8005c42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c46:	4770      	bx	lr
 8005c48:	40080000 	.word	0x40080000
 8005c4c:	58024400 	.word	0x58024400
 8005c50:	40040000 	.word	0x40040000

08005c54 <dwc2_phy_update>:

// MCU specific PHY update, it is called AFTER init() and core reset
static inline void dwc2_phy_update(dwc2_regs_t* dwc2, uint8_t hs_phy_type) {
 8005c54:	b480      	push	{r7}
 8005c56:	b085      	sub	sp, #20
 8005c58:	af00      	add	r7, sp, #0
 8005c5a:	6078      	str	r0, [r7, #4]
 8005c5c:	460b      	mov	r3, r1
 8005c5e:	70fb      	strb	r3, [r7, #3]
  // used to set turnaround time for fullspeed, nothing to do in highspeed mode
  if (hs_phy_type == HS_PHY_TYPE_NONE) {
 8005c60:	78fb      	ldrb	r3, [r7, #3]
 8005c62:	2b00      	cmp	r3, #0
 8005c64:	d152      	bne.n	8005d0c <dwc2_phy_update+0xb8>
    // Turnaround timeout depends on the AHB clock dictated by STM32 Reference Manual
    uint32_t turnaround;

    if (SystemCoreClock >= 32000000u) {
 8005c66:	4b2c      	ldr	r3, [pc, #176]	; (8005d18 <dwc2_phy_update+0xc4>)
 8005c68:	681b      	ldr	r3, [r3, #0]
 8005c6a:	4a2c      	ldr	r2, [pc, #176]	; (8005d1c <dwc2_phy_update+0xc8>)
 8005c6c:	4293      	cmp	r3, r2
 8005c6e:	d302      	bcc.n	8005c76 <dwc2_phy_update+0x22>
      turnaround = 0x6u;
 8005c70:	2306      	movs	r3, #6
 8005c72:	60fb      	str	r3, [r7, #12]
 8005c74:	e041      	b.n	8005cfa <dwc2_phy_update+0xa6>
    } else if (SystemCoreClock >= 27500000u) {
 8005c76:	4b28      	ldr	r3, [pc, #160]	; (8005d18 <dwc2_phy_update+0xc4>)
 8005c78:	681b      	ldr	r3, [r3, #0]
 8005c7a:	4a29      	ldr	r2, [pc, #164]	; (8005d20 <dwc2_phy_update+0xcc>)
 8005c7c:	4293      	cmp	r3, r2
 8005c7e:	d902      	bls.n	8005c86 <dwc2_phy_update+0x32>
      turnaround = 0x7u;
 8005c80:	2307      	movs	r3, #7
 8005c82:	60fb      	str	r3, [r7, #12]
 8005c84:	e039      	b.n	8005cfa <dwc2_phy_update+0xa6>
    } else if (SystemCoreClock >= 24000000u) {
 8005c86:	4b24      	ldr	r3, [pc, #144]	; (8005d18 <dwc2_phy_update+0xc4>)
 8005c88:	681b      	ldr	r3, [r3, #0]
 8005c8a:	4a26      	ldr	r2, [pc, #152]	; (8005d24 <dwc2_phy_update+0xd0>)
 8005c8c:	4293      	cmp	r3, r2
 8005c8e:	d302      	bcc.n	8005c96 <dwc2_phy_update+0x42>
      turnaround = 0x8u;
 8005c90:	2308      	movs	r3, #8
 8005c92:	60fb      	str	r3, [r7, #12]
 8005c94:	e031      	b.n	8005cfa <dwc2_phy_update+0xa6>
    } else if (SystemCoreClock >= 21800000u) {
 8005c96:	4b20      	ldr	r3, [pc, #128]	; (8005d18 <dwc2_phy_update+0xc4>)
 8005c98:	681b      	ldr	r3, [r3, #0]
 8005c9a:	4a23      	ldr	r2, [pc, #140]	; (8005d28 <dwc2_phy_update+0xd4>)
 8005c9c:	4293      	cmp	r3, r2
 8005c9e:	d902      	bls.n	8005ca6 <dwc2_phy_update+0x52>
      turnaround = 0x9u;
 8005ca0:	2309      	movs	r3, #9
 8005ca2:	60fb      	str	r3, [r7, #12]
 8005ca4:	e029      	b.n	8005cfa <dwc2_phy_update+0xa6>
    }
    else if (SystemCoreClock >= 20000000u) {
 8005ca6:	4b1c      	ldr	r3, [pc, #112]	; (8005d18 <dwc2_phy_update+0xc4>)
 8005ca8:	681b      	ldr	r3, [r3, #0]
 8005caa:	4a20      	ldr	r2, [pc, #128]	; (8005d2c <dwc2_phy_update+0xd8>)
 8005cac:	4293      	cmp	r3, r2
 8005cae:	d902      	bls.n	8005cb6 <dwc2_phy_update+0x62>
      turnaround = 0xAu;
 8005cb0:	230a      	movs	r3, #10
 8005cb2:	60fb      	str	r3, [r7, #12]
 8005cb4:	e021      	b.n	8005cfa <dwc2_phy_update+0xa6>
    }
    else if (SystemCoreClock >= 18500000u) {
 8005cb6:	4b18      	ldr	r3, [pc, #96]	; (8005d18 <dwc2_phy_update+0xc4>)
 8005cb8:	681b      	ldr	r3, [r3, #0]
 8005cba:	4a1d      	ldr	r2, [pc, #116]	; (8005d30 <dwc2_phy_update+0xdc>)
 8005cbc:	4293      	cmp	r3, r2
 8005cbe:	d902      	bls.n	8005cc6 <dwc2_phy_update+0x72>
      turnaround = 0xBu;
 8005cc0:	230b      	movs	r3, #11
 8005cc2:	60fb      	str	r3, [r7, #12]
 8005cc4:	e019      	b.n	8005cfa <dwc2_phy_update+0xa6>
    }
    else if (SystemCoreClock >= 17200000u) {
 8005cc6:	4b14      	ldr	r3, [pc, #80]	; (8005d18 <dwc2_phy_update+0xc4>)
 8005cc8:	681b      	ldr	r3, [r3, #0]
 8005cca:	4a1a      	ldr	r2, [pc, #104]	; (8005d34 <dwc2_phy_update+0xe0>)
 8005ccc:	4293      	cmp	r3, r2
 8005cce:	d302      	bcc.n	8005cd6 <dwc2_phy_update+0x82>
      turnaround = 0xCu;
 8005cd0:	230c      	movs	r3, #12
 8005cd2:	60fb      	str	r3, [r7, #12]
 8005cd4:	e011      	b.n	8005cfa <dwc2_phy_update+0xa6>
    }
    else if (SystemCoreClock >= 16000000u) {
 8005cd6:	4b10      	ldr	r3, [pc, #64]	; (8005d18 <dwc2_phy_update+0xc4>)
 8005cd8:	681b      	ldr	r3, [r3, #0]
 8005cda:	4a17      	ldr	r2, [pc, #92]	; (8005d38 <dwc2_phy_update+0xe4>)
 8005cdc:	4293      	cmp	r3, r2
 8005cde:	d302      	bcc.n	8005ce6 <dwc2_phy_update+0x92>
      turnaround = 0xDu;
 8005ce0:	230d      	movs	r3, #13
 8005ce2:	60fb      	str	r3, [r7, #12]
 8005ce4:	e009      	b.n	8005cfa <dwc2_phy_update+0xa6>
    }
    else if (SystemCoreClock >= 15000000u) {
 8005ce6:	4b0c      	ldr	r3, [pc, #48]	; (8005d18 <dwc2_phy_update+0xc4>)
 8005ce8:	681b      	ldr	r3, [r3, #0]
 8005cea:	4a14      	ldr	r2, [pc, #80]	; (8005d3c <dwc2_phy_update+0xe8>)
 8005cec:	4293      	cmp	r3, r2
 8005cee:	d302      	bcc.n	8005cf6 <dwc2_phy_update+0xa2>
      turnaround = 0xEu;
 8005cf0:	230e      	movs	r3, #14
 8005cf2:	60fb      	str	r3, [r7, #12]
 8005cf4:	e001      	b.n	8005cfa <dwc2_phy_update+0xa6>
    }
    else {
      turnaround = 0xFu;
 8005cf6:	230f      	movs	r3, #15
 8005cf8:	60fb      	str	r3, [r7, #12]
    }

    dwc2->gusbcfg = (dwc2->gusbcfg & ~GUSBCFG_TRDT_Msk) | (turnaround << GUSBCFG_TRDT_Pos);
 8005cfa:	687b      	ldr	r3, [r7, #4]
 8005cfc:	68db      	ldr	r3, [r3, #12]
 8005cfe:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 8005d02:	68fb      	ldr	r3, [r7, #12]
 8005d04:	029b      	lsls	r3, r3, #10
 8005d06:	431a      	orrs	r2, r3
 8005d08:	687b      	ldr	r3, [r7, #4]
 8005d0a:	60da      	str	r2, [r3, #12]
  }
}
 8005d0c:	bf00      	nop
 8005d0e:	3714      	adds	r7, #20
 8005d10:	46bd      	mov	sp, r7
 8005d12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d16:	4770      	bx	lr
 8005d18:	24000000 	.word	0x24000000
 8005d1c:	01e84800 	.word	0x01e84800
 8005d20:	01a39ddf 	.word	0x01a39ddf
 8005d24:	016e3600 	.word	0x016e3600
 8005d28:	014ca43f 	.word	0x014ca43f
 8005d2c:	01312cff 	.word	0x01312cff
 8005d30:	011a499f 	.word	0x011a499f
 8005d34:	01067380 	.word	0x01067380
 8005d38:	00f42400 	.word	0x00f42400
 8005d3c:	00e4e1c0 	.word	0x00e4e1c0

08005d40 <calc_grxfsiz>:

// SOF enabling flag - required for SOF to not get disabled in ISR when SOF was enabled by
static bool _sof_en;

// Calculate the RX FIFO size according to recommendations from reference manual
static inline uint16_t calc_grxfsiz(uint16_t max_ep_size, uint8_t ep_count) {
 8005d40:	b480      	push	{r7}
 8005d42:	b083      	sub	sp, #12
 8005d44:	af00      	add	r7, sp, #0
 8005d46:	4603      	mov	r3, r0
 8005d48:	460a      	mov	r2, r1
 8005d4a:	80fb      	strh	r3, [r7, #6]
 8005d4c:	4613      	mov	r3, r2
 8005d4e:	717b      	strb	r3, [r7, #5]
  return 15 + 2 * (max_ep_size / 4) + 2 * ep_count;
 8005d50:	88fb      	ldrh	r3, [r7, #6]
 8005d52:	089b      	lsrs	r3, r3, #2
 8005d54:	b29a      	uxth	r2, r3
 8005d56:	797b      	ldrb	r3, [r7, #5]
 8005d58:	b29b      	uxth	r3, r3
 8005d5a:	4413      	add	r3, r2
 8005d5c:	b29b      	uxth	r3, r3
 8005d5e:	005b      	lsls	r3, r3, #1
 8005d60:	b29b      	uxth	r3, r3
 8005d62:	330f      	adds	r3, #15
 8005d64:	b29b      	uxth	r3, r3
}
 8005d66:	4618      	mov	r0, r3
 8005d68:	370c      	adds	r7, #12
 8005d6a:	46bd      	mov	sp, r7
 8005d6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d70:	4770      	bx	lr
	...

08005d74 <update_grxfsiz>:

static void update_grxfsiz(uint8_t rhport) {
 8005d74:	b580      	push	{r7, lr}
 8005d76:	b086      	sub	sp, #24
 8005d78:	af00      	add	r7, sp, #0
 8005d7a:	4603      	mov	r3, r0
 8005d7c:	71fb      	strb	r3, [r7, #7]
  dwc2_regs_t* dwc2 = DWC2_REG(rhport);
 8005d7e:	79fb      	ldrb	r3, [r7, #7]
 8005d80:	4a1b      	ldr	r2, [pc, #108]	; (8005df0 <update_grxfsiz+0x7c>)
 8005d82:	011b      	lsls	r3, r3, #4
 8005d84:	4413      	add	r3, r2
 8005d86:	681b      	ldr	r3, [r3, #0]
 8005d88:	613b      	str	r3, [r7, #16]
  uint8_t const ep_count = _dwc2_controller[rhport].ep_count;
 8005d8a:	79fb      	ldrb	r3, [r7, #7]
 8005d8c:	4a18      	ldr	r2, [pc, #96]	; (8005df0 <update_grxfsiz+0x7c>)
 8005d8e:	011b      	lsls	r3, r3, #4
 8005d90:	4413      	add	r3, r2
 8005d92:	3308      	adds	r3, #8
 8005d94:	781b      	ldrb	r3, [r3, #0]
 8005d96:	73fb      	strb	r3, [r7, #15]

  // Determine largest EP size for RX FIFO
  uint16_t max_epsize = 0;
 8005d98:	2300      	movs	r3, #0
 8005d9a:	82fb      	strh	r3, [r7, #22]
  for (uint8_t epnum = 0; epnum < ep_count; epnum++) {
 8005d9c:	2300      	movs	r3, #0
 8005d9e:	757b      	strb	r3, [r7, #21]
 8005da0:	e013      	b.n	8005dca <update_grxfsiz+0x56>
    max_epsize = tu_max16(max_epsize, xfer_status[epnum][TUSB_DIR_OUT].max_size);
 8005da2:	7d7b      	ldrb	r3, [r7, #21]
 8005da4:	4a13      	ldr	r2, [pc, #76]	; (8005df4 <update_grxfsiz+0x80>)
 8005da6:	015b      	lsls	r3, r3, #5
 8005da8:	4413      	add	r3, r2
 8005daa:	330a      	adds	r3, #10
 8005dac:	881a      	ldrh	r2, [r3, #0]
 8005dae:	8afb      	ldrh	r3, [r7, #22]
 8005db0:	81bb      	strh	r3, [r7, #12]
 8005db2:	4613      	mov	r3, r2
 8005db4:	817b      	strh	r3, [r7, #10]
TU_ATTR_ALWAYS_INLINE static inline uint16_t tu_max16 (uint16_t x, uint16_t y) { return (x > y) ? x : y; }
 8005db6:	89ba      	ldrh	r2, [r7, #12]
 8005db8:	897b      	ldrh	r3, [r7, #10]
 8005dba:	4293      	cmp	r3, r2
 8005dbc:	bf38      	it	cc
 8005dbe:	4613      	movcc	r3, r2
 8005dc0:	b29b      	uxth	r3, r3
 8005dc2:	82fb      	strh	r3, [r7, #22]
  for (uint8_t epnum = 0; epnum < ep_count; epnum++) {
 8005dc4:	7d7b      	ldrb	r3, [r7, #21]
 8005dc6:	3301      	adds	r3, #1
 8005dc8:	757b      	strb	r3, [r7, #21]
 8005dca:	7d7a      	ldrb	r2, [r7, #21]
 8005dcc:	7bfb      	ldrb	r3, [r7, #15]
 8005dce:	429a      	cmp	r2, r3
 8005dd0:	d3e7      	bcc.n	8005da2 <update_grxfsiz+0x2e>
  }

  // Update size of RX FIFO
  dwc2->grxfsiz = calc_grxfsiz(max_epsize, ep_count);
 8005dd2:	7bfa      	ldrb	r2, [r7, #15]
 8005dd4:	8afb      	ldrh	r3, [r7, #22]
 8005dd6:	4611      	mov	r1, r2
 8005dd8:	4618      	mov	r0, r3
 8005dda:	f7ff ffb1 	bl	8005d40 <calc_grxfsiz>
 8005dde:	4603      	mov	r3, r0
 8005de0:	461a      	mov	r2, r3
 8005de2:	693b      	ldr	r3, [r7, #16]
 8005de4:	625a      	str	r2, [r3, #36]	; 0x24
}
 8005de6:	bf00      	nop
 8005de8:	3718      	adds	r7, #24
 8005dea:	46bd      	mov	sp, r7
 8005dec:	bd80      	pop	{r7, pc}
 8005dee:	bf00      	nop
 8005df0:	080101cc 	.word	0x080101cc
 8005df4:	240012f0 	.word	0x240012f0

08005df8 <bus_reset>:

// Start of Bus Reset
static void bus_reset(uint8_t rhport) {
 8005df8:	b580      	push	{r7, lr}
 8005dfa:	b086      	sub	sp, #24
 8005dfc:	af00      	add	r7, sp, #0
 8005dfe:	4603      	mov	r3, r0
 8005e00:	71fb      	strb	r3, [r7, #7]
  dwc2_regs_t* dwc2 = DWC2_REG(rhport);
 8005e02:	79fb      	ldrb	r3, [r7, #7]
 8005e04:	4a3f      	ldr	r2, [pc, #252]	; (8005f04 <bus_reset+0x10c>)
 8005e06:	011b      	lsls	r3, r3, #4
 8005e08:	4413      	add	r3, r2
 8005e0a:	681b      	ldr	r3, [r3, #0]
 8005e0c:	613b      	str	r3, [r7, #16]
  uint8_t const ep_count = _dwc2_controller[rhport].ep_count;
 8005e0e:	79fb      	ldrb	r3, [r7, #7]
 8005e10:	4a3c      	ldr	r2, [pc, #240]	; (8005f04 <bus_reset+0x10c>)
 8005e12:	011b      	lsls	r3, r3, #4
 8005e14:	4413      	add	r3, r2
 8005e16:	3308      	adds	r3, #8
 8005e18:	781b      	ldrb	r3, [r3, #0]
 8005e1a:	73fb      	strb	r3, [r7, #15]

  tu_memclr(xfer_status, sizeof(xfer_status));
 8005e1c:	f44f 7290 	mov.w	r2, #288	; 0x120
 8005e20:	2100      	movs	r1, #0
 8005e22:	4839      	ldr	r0, [pc, #228]	; (8005f08 <bus_reset+0x110>)
 8005e24:	f00a f8d5 	bl	800ffd2 <memset>
  _out_ep_closed = false;
 8005e28:	4b38      	ldr	r3, [pc, #224]	; (8005f0c <bus_reset+0x114>)
 8005e2a:	2200      	movs	r2, #0
 8005e2c:	701a      	strb	r2, [r3, #0]

  _sof_en = false;
 8005e2e:	4b38      	ldr	r3, [pc, #224]	; (8005f10 <bus_reset+0x118>)
 8005e30:	2200      	movs	r2, #0
 8005e32:	701a      	strb	r2, [r3, #0]

  // clear device address
  dwc2->dcfg &= ~DCFG_DAD_Msk;
 8005e34:	693b      	ldr	r3, [r7, #16]
 8005e36:	f8d3 3800 	ldr.w	r3, [r3, #2048]	; 0x800
 8005e3a:	f423 62fe 	bic.w	r2, r3, #2032	; 0x7f0
 8005e3e:	693b      	ldr	r3, [r7, #16]
 8005e40:	f8c3 2800 	str.w	r2, [r3, #2048]	; 0x800

  // 1. NAK for all OUT endpoints
  for (uint8_t n = 0; n < ep_count; n++) {
 8005e44:	2300      	movs	r3, #0
 8005e46:	75fb      	strb	r3, [r7, #23]
 8005e48:	e010      	b.n	8005e6c <bus_reset+0x74>
    dwc2->epout[n].doepctl |= DOEPCTL_SNAK;
 8005e4a:	7dfb      	ldrb	r3, [r7, #23]
 8005e4c:	693a      	ldr	r2, [r7, #16]
 8005e4e:	3358      	adds	r3, #88	; 0x58
 8005e50:	015b      	lsls	r3, r3, #5
 8005e52:	4413      	add	r3, r2
 8005e54:	681a      	ldr	r2, [r3, #0]
 8005e56:	7dfb      	ldrb	r3, [r7, #23]
 8005e58:	f042 6200 	orr.w	r2, r2, #134217728	; 0x8000000
 8005e5c:	6939      	ldr	r1, [r7, #16]
 8005e5e:	3358      	adds	r3, #88	; 0x58
 8005e60:	015b      	lsls	r3, r3, #5
 8005e62:	440b      	add	r3, r1
 8005e64:	601a      	str	r2, [r3, #0]
  for (uint8_t n = 0; n < ep_count; n++) {
 8005e66:	7dfb      	ldrb	r3, [r7, #23]
 8005e68:	3301      	adds	r3, #1
 8005e6a:	75fb      	strb	r3, [r7, #23]
 8005e6c:	7dfa      	ldrb	r2, [r7, #23]
 8005e6e:	7bfb      	ldrb	r3, [r7, #15]
 8005e70:	429a      	cmp	r2, r3
 8005e72:	d3ea      	bcc.n	8005e4a <bus_reset+0x52>
  }

  // 2. Set up interrupt mask
  dwc2->daintmsk = TU_BIT(DAINTMSK_OEPM_Pos) | TU_BIT(DAINTMSK_IEPM_Pos);
 8005e74:	693b      	ldr	r3, [r7, #16]
 8005e76:	f04f 1201 	mov.w	r2, #65537	; 0x10001
 8005e7a:	f8c3 281c 	str.w	r2, [r3, #2076]	; 0x81c
  dwc2->doepmsk = DOEPMSK_STUPM | DOEPMSK_XFRCM;
 8005e7e:	693b      	ldr	r3, [r7, #16]
 8005e80:	2209      	movs	r2, #9
 8005e82:	f8c3 2814 	str.w	r2, [r3, #2068]	; 0x814
  dwc2->diepmsk = DIEPMSK_TOM | DIEPMSK_XFRCM;
 8005e86:	693b      	ldr	r3, [r7, #16]
 8005e88:	2209      	movs	r2, #9
 8005e8a:	f8c3 2810 	str.w	r2, [r3, #2064]	; 0x810
  //   For Isochronous, largest EP size can be 1023/1024 for FS/HS respectively. In addition if multiple ISO
  //   are enabled at least "2 x (Largest-EPsize/4) + 1" are recommended.  Maybe provide a macro for application to
  //   overwrite this.

  // EP0 out max is 64
  dwc2->grxfsiz = calc_grxfsiz(64, ep_count);
 8005e8e:	7bfb      	ldrb	r3, [r7, #15]
 8005e90:	4619      	mov	r1, r3
 8005e92:	2040      	movs	r0, #64	; 0x40
 8005e94:	f7ff ff54 	bl	8005d40 <calc_grxfsiz>
 8005e98:	4603      	mov	r3, r0
 8005e9a:	461a      	mov	r2, r3
 8005e9c:	693b      	ldr	r3, [r7, #16]
 8005e9e:	625a      	str	r2, [r3, #36]	; 0x24

  // Setup the control endpoint 0
  _allocated_fifo_words_tx = 16;
 8005ea0:	4b1c      	ldr	r3, [pc, #112]	; (8005f14 <bus_reset+0x11c>)
 8005ea2:	2210      	movs	r2, #16
 8005ea4:	801a      	strh	r2, [r3, #0]

  // Control IN uses FIFO 0 with 64 bytes ( 16 32-bit word )
  dwc2->dieptxf0 = (16 << DIEPTXF0_TX0FD_Pos) | (_dwc2_controller[rhport].ep_fifo_size / 4 - _allocated_fifo_words_tx);
 8005ea6:	79fb      	ldrb	r3, [r7, #7]
 8005ea8:	4a16      	ldr	r2, [pc, #88]	; (8005f04 <bus_reset+0x10c>)
 8005eaa:	011b      	lsls	r3, r3, #4
 8005eac:	4413      	add	r3, r2
 8005eae:	330c      	adds	r3, #12
 8005eb0:	681b      	ldr	r3, [r3, #0]
 8005eb2:	089b      	lsrs	r3, r3, #2
 8005eb4:	4a17      	ldr	r2, [pc, #92]	; (8005f14 <bus_reset+0x11c>)
 8005eb6:	8812      	ldrh	r2, [r2, #0]
 8005eb8:	1a9b      	subs	r3, r3, r2
 8005eba:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8005ebe:	693b      	ldr	r3, [r7, #16]
 8005ec0:	629a      	str	r2, [r3, #40]	; 0x28

  // Fixed control EP0 size to 64 bytes
  dwc2->epin[0].diepctl &= ~(0x03 << DIEPCTL_MPSIZ_Pos);
 8005ec2:	693b      	ldr	r3, [r7, #16]
 8005ec4:	f8d3 3900 	ldr.w	r3, [r3, #2304]	; 0x900
 8005ec8:	f023 0203 	bic.w	r2, r3, #3
 8005ecc:	693b      	ldr	r3, [r7, #16]
 8005ece:	f8c3 2900 	str.w	r2, [r3, #2304]	; 0x900
  xfer_status[0][TUSB_DIR_OUT].max_size = 64;
 8005ed2:	4b0d      	ldr	r3, [pc, #52]	; (8005f08 <bus_reset+0x110>)
 8005ed4:	2240      	movs	r2, #64	; 0x40
 8005ed6:	815a      	strh	r2, [r3, #10]
  xfer_status[0][TUSB_DIR_IN].max_size = 64;
 8005ed8:	4b0b      	ldr	r3, [pc, #44]	; (8005f08 <bus_reset+0x110>)
 8005eda:	2240      	movs	r2, #64	; 0x40
 8005edc:	835a      	strh	r2, [r3, #26]

  dwc2->epout[0].doeptsiz |= (3 << DOEPTSIZ_STUPCNT_Pos);
 8005ede:	693b      	ldr	r3, [r7, #16]
 8005ee0:	f8d3 3b10 	ldr.w	r3, [r3, #2832]	; 0xb10
 8005ee4:	f043 42c0 	orr.w	r2, r3, #1610612736	; 0x60000000
 8005ee8:	693b      	ldr	r3, [r7, #16]
 8005eea:	f8c3 2b10 	str.w	r2, [r3, #2832]	; 0xb10

  dwc2->gintmsk |= GINTMSK_OEPINT | GINTMSK_IEPINT;
 8005eee:	693b      	ldr	r3, [r7, #16]
 8005ef0:	699b      	ldr	r3, [r3, #24]
 8005ef2:	f443 2240 	orr.w	r2, r3, #786432	; 0xc0000
 8005ef6:	693b      	ldr	r3, [r7, #16]
 8005ef8:	619a      	str	r2, [r3, #24]
}
 8005efa:	bf00      	nop
 8005efc:	3718      	adds	r7, #24
 8005efe:	46bd      	mov	sp, r7
 8005f00:	bd80      	pop	{r7, pc}
 8005f02:	bf00      	nop
 8005f04:	080101cc 	.word	0x080101cc
 8005f08:	240012f0 	.word	0x240012f0
 8005f0c:	24001416 	.word	0x24001416
 8005f10:	24001417 	.word	0x24001417
 8005f14:	24001414 	.word	0x24001414

08005f18 <edpt_schedule_packets>:

static void edpt_schedule_packets(uint8_t rhport, uint8_t const epnum, uint8_t const dir, uint16_t const num_packets,
                                  uint16_t total_bytes) {
 8005f18:	b490      	push	{r4, r7}
 8005f1a:	b08a      	sub	sp, #40	; 0x28
 8005f1c:	af00      	add	r7, sp, #0
 8005f1e:	4604      	mov	r4, r0
 8005f20:	4608      	mov	r0, r1
 8005f22:	4611      	mov	r1, r2
 8005f24:	461a      	mov	r2, r3
 8005f26:	4623      	mov	r3, r4
 8005f28:	71fb      	strb	r3, [r7, #7]
 8005f2a:	4603      	mov	r3, r0
 8005f2c:	71bb      	strb	r3, [r7, #6]
 8005f2e:	460b      	mov	r3, r1
 8005f30:	717b      	strb	r3, [r7, #5]
 8005f32:	4613      	mov	r3, r2
 8005f34:	807b      	strh	r3, [r7, #2]
  (void) rhport;

  dwc2_regs_t* dwc2 = DWC2_REG(rhport);
 8005f36:	79fb      	ldrb	r3, [r7, #7]
 8005f38:	4a71      	ldr	r2, [pc, #452]	; (8006100 <edpt_schedule_packets+0x1e8>)
 8005f3a:	011b      	lsls	r3, r3, #4
 8005f3c:	4413      	add	r3, r2
 8005f3e:	681b      	ldr	r3, [r3, #0]
 8005f40:	627b      	str	r3, [r7, #36]	; 0x24

  // EP0 is limited to one packet each xfer
  // We use multiple transaction of xfer->max_size length to get a whole transfer done
  if (epnum == 0) {
 8005f42:	79bb      	ldrb	r3, [r7, #6]
 8005f44:	2b00      	cmp	r3, #0
 8005f46:	d121      	bne.n	8005f8c <edpt_schedule_packets+0x74>
    xfer_ctl_t* const xfer = XFER_CTL_BASE(epnum, dir);
 8005f48:	79ba      	ldrb	r2, [r7, #6]
 8005f4a:	797b      	ldrb	r3, [r7, #5]
 8005f4c:	0052      	lsls	r2, r2, #1
 8005f4e:	4413      	add	r3, r2
 8005f50:	011b      	lsls	r3, r3, #4
 8005f52:	4a6c      	ldr	r2, [pc, #432]	; (8006104 <edpt_schedule_packets+0x1ec>)
 8005f54:	4413      	add	r3, r2
 8005f56:	623b      	str	r3, [r7, #32]
    total_bytes = tu_min16(ep0_pending[dir], xfer->max_size);
 8005f58:	797b      	ldrb	r3, [r7, #5]
 8005f5a:	4a6b      	ldr	r2, [pc, #428]	; (8006108 <edpt_schedule_packets+0x1f0>)
 8005f5c:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 8005f60:	6a3b      	ldr	r3, [r7, #32]
 8005f62:	895b      	ldrh	r3, [r3, #10]
 8005f64:	81fa      	strh	r2, [r7, #14]
 8005f66:	81bb      	strh	r3, [r7, #12]
TU_ATTR_ALWAYS_INLINE static inline uint16_t tu_min16 (uint16_t x, uint16_t y) { return (x < y) ? x : y; }
 8005f68:	89fa      	ldrh	r2, [r7, #14]
 8005f6a:	89bb      	ldrh	r3, [r7, #12]
 8005f6c:	4293      	cmp	r3, r2
 8005f6e:	bf28      	it	cs
 8005f70:	4613      	movcs	r3, r2
 8005f72:	b29b      	uxth	r3, r3
 8005f74:	863b      	strh	r3, [r7, #48]	; 0x30
    ep0_pending[dir] -= total_bytes;
 8005f76:	797b      	ldrb	r3, [r7, #5]
 8005f78:	4a63      	ldr	r2, [pc, #396]	; (8006108 <edpt_schedule_packets+0x1f0>)
 8005f7a:	f832 1013 	ldrh.w	r1, [r2, r3, lsl #1]
 8005f7e:	797b      	ldrb	r3, [r7, #5]
 8005f80:	8e3a      	ldrh	r2, [r7, #48]	; 0x30
 8005f82:	1a8a      	subs	r2, r1, r2
 8005f84:	b291      	uxth	r1, r2
 8005f86:	4a60      	ldr	r2, [pc, #384]	; (8006108 <edpt_schedule_packets+0x1f0>)
 8005f88:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
  }

  // IN and OUT endpoint xfers are interrupt-driven, we just schedule them here.
  if (dir == TUSB_DIR_IN) {
 8005f8c:	797b      	ldrb	r3, [r7, #5]
 8005f8e:	2b01      	cmp	r3, #1
 8005f90:	d156      	bne.n	8006040 <edpt_schedule_packets+0x128>
    dwc2_epin_t* epin = dwc2->epin;
 8005f92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f94:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005f98:	617b      	str	r3, [r7, #20]

    // A full IN transfer (multiple packets, possibly) triggers XFRC.
    epin[epnum].dieptsiz = (num_packets << DIEPTSIZ_PKTCNT_Pos) |
 8005f9a:	887b      	ldrh	r3, [r7, #2]
 8005f9c:	04db      	lsls	r3, r3, #19
 8005f9e:	4618      	mov	r0, r3
                           ((total_bytes << DIEPTSIZ_XFRSIZ_Pos) & DIEPTSIZ_XFRSIZ_Msk);
 8005fa0:	8e3a      	ldrh	r2, [r7, #48]	; 0x30
    epin[epnum].dieptsiz = (num_packets << DIEPTSIZ_PKTCNT_Pos) |
 8005fa2:	79bb      	ldrb	r3, [r7, #6]
 8005fa4:	015b      	lsls	r3, r3, #5
 8005fa6:	6979      	ldr	r1, [r7, #20]
 8005fa8:	440b      	add	r3, r1
 8005faa:	4302      	orrs	r2, r0
 8005fac:	611a      	str	r2, [r3, #16]

    epin[epnum].diepctl |= DIEPCTL_EPENA | DIEPCTL_CNAK;
 8005fae:	79bb      	ldrb	r3, [r7, #6]
 8005fb0:	015b      	lsls	r3, r3, #5
 8005fb2:	697a      	ldr	r2, [r7, #20]
 8005fb4:	4413      	add	r3, r2
 8005fb6:	681a      	ldr	r2, [r3, #0]
 8005fb8:	79bb      	ldrb	r3, [r7, #6]
 8005fba:	015b      	lsls	r3, r3, #5
 8005fbc:	6979      	ldr	r1, [r7, #20]
 8005fbe:	440b      	add	r3, r1
 8005fc0:	f042 4204 	orr.w	r2, r2, #2214592512	; 0x84000000
 8005fc4:	601a      	str	r2, [r3, #0]

    // For ISO endpoint set correct odd/even bit for next frame.
    if ((epin[epnum].diepctl & DIEPCTL_EPTYP) == DIEPCTL_EPTYP_0 && (XFER_CTL_BASE(epnum, dir))->interval == 1) {
 8005fc6:	79bb      	ldrb	r3, [r7, #6]
 8005fc8:	015b      	lsls	r3, r3, #5
 8005fca:	697a      	ldr	r2, [r7, #20]
 8005fcc:	4413      	add	r3, r2
 8005fce:	681b      	ldr	r3, [r3, #0]
 8005fd0:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
 8005fd4:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8005fd8:	d123      	bne.n	8006022 <edpt_schedule_packets+0x10a>
 8005fda:	79ba      	ldrb	r2, [r7, #6]
 8005fdc:	797b      	ldrb	r3, [r7, #5]
 8005fde:	4949      	ldr	r1, [pc, #292]	; (8006104 <edpt_schedule_packets+0x1ec>)
 8005fe0:	0052      	lsls	r2, r2, #1
 8005fe2:	4413      	add	r3, r2
 8005fe4:	011b      	lsls	r3, r3, #4
 8005fe6:	440b      	add	r3, r1
 8005fe8:	330c      	adds	r3, #12
 8005fea:	781b      	ldrb	r3, [r3, #0]
 8005fec:	2b01      	cmp	r3, #1
 8005fee:	d118      	bne.n	8006022 <edpt_schedule_packets+0x10a>
      // Take odd/even bit from frame counter.
      uint32_t const odd_frame_now = (dwc2->dsts & (1u << DSTS_FNSOF_Pos));
 8005ff0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ff2:	f8d3 3808 	ldr.w	r3, [r3, #2056]	; 0x808
 8005ff6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005ffa:	613b      	str	r3, [r7, #16]
      epin[epnum].diepctl |= (odd_frame_now ? DIEPCTL_SD0PID_SEVNFRM_Msk : DIEPCTL_SODDFRM_Msk);
 8005ffc:	79bb      	ldrb	r3, [r7, #6]
 8005ffe:	015b      	lsls	r3, r3, #5
 8006000:	697a      	ldr	r2, [r7, #20]
 8006002:	4413      	add	r3, r2
 8006004:	681a      	ldr	r2, [r3, #0]
 8006006:	693b      	ldr	r3, [r7, #16]
 8006008:	2b00      	cmp	r3, #0
 800600a:	d002      	beq.n	8006012 <edpt_schedule_packets+0xfa>
 800600c:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
 8006010:	e001      	b.n	8006016 <edpt_schedule_packets+0xfe>
 8006012:	f04f 5100 	mov.w	r1, #536870912	; 0x20000000
 8006016:	79bb      	ldrb	r3, [r7, #6]
 8006018:	015b      	lsls	r3, r3, #5
 800601a:	6978      	ldr	r0, [r7, #20]
 800601c:	4403      	add	r3, r0
 800601e:	430a      	orrs	r2, r1
 8006020:	601a      	str	r2, [r3, #0]
    }
    // Enable fifo empty interrupt only if there are something to put in the fifo.
    if (total_bytes != 0) {
 8006022:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8006024:	2b00      	cmp	r3, #0
 8006026:	d065      	beq.n	80060f4 <edpt_schedule_packets+0x1dc>
      dwc2->diepempmsk |= (1 << epnum);
 8006028:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800602a:	f8d3 3834 	ldr.w	r3, [r3, #2100]	; 0x834
 800602e:	79ba      	ldrb	r2, [r7, #6]
 8006030:	2101      	movs	r1, #1
 8006032:	fa01 f202 	lsl.w	r2, r1, r2
 8006036:	431a      	orrs	r2, r3
 8006038:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800603a:	f8c3 2834 	str.w	r2, [r3, #2100]	; 0x834
      // Take odd/even bit from frame counter.
      uint32_t const odd_frame_now = (dwc2->dsts & (1u << DSTS_FNSOF_Pos));
      epout[epnum].doepctl |= (odd_frame_now ? DOEPCTL_SD0PID_SEVNFRM_Msk : DOEPCTL_SODDFRM_Msk);
    }
  }
}
 800603e:	e059      	b.n	80060f4 <edpt_schedule_packets+0x1dc>
    dwc2_epout_t* epout = dwc2->epout;
 8006040:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006042:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006046:	61fb      	str	r3, [r7, #28]
    epout[epnum].doeptsiz &= ~(DOEPTSIZ_PKTCNT_Msk | DOEPTSIZ_XFRSIZ);
 8006048:	79bb      	ldrb	r3, [r7, #6]
 800604a:	015b      	lsls	r3, r3, #5
 800604c:	69fa      	ldr	r2, [r7, #28]
 800604e:	4413      	add	r3, r2
 8006050:	691a      	ldr	r2, [r3, #16]
 8006052:	79bb      	ldrb	r3, [r7, #6]
 8006054:	015b      	lsls	r3, r3, #5
 8006056:	69f9      	ldr	r1, [r7, #28]
 8006058:	440b      	add	r3, r1
 800605a:	f002 4260 	and.w	r2, r2, #3758096384	; 0xe0000000
 800605e:	611a      	str	r2, [r3, #16]
    epout[epnum].doeptsiz |= (num_packets << DOEPTSIZ_PKTCNT_Pos) |
 8006060:	79bb      	ldrb	r3, [r7, #6]
 8006062:	015b      	lsls	r3, r3, #5
 8006064:	69fa      	ldr	r2, [r7, #28]
 8006066:	4413      	add	r3, r2
 8006068:	6919      	ldr	r1, [r3, #16]
 800606a:	887b      	ldrh	r3, [r7, #2]
 800606c:	04db      	lsls	r3, r3, #19
 800606e:	461a      	mov	r2, r3
                             ((total_bytes << DOEPTSIZ_XFRSIZ_Pos) & DOEPTSIZ_XFRSIZ_Msk);
 8006070:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
    epout[epnum].doeptsiz |= (num_packets << DOEPTSIZ_PKTCNT_Pos) |
 8006072:	431a      	orrs	r2, r3
 8006074:	79bb      	ldrb	r3, [r7, #6]
 8006076:	015b      	lsls	r3, r3, #5
 8006078:	69f8      	ldr	r0, [r7, #28]
 800607a:	4403      	add	r3, r0
 800607c:	430a      	orrs	r2, r1
 800607e:	611a      	str	r2, [r3, #16]
    epout[epnum].doepctl |= DOEPCTL_EPENA | DOEPCTL_CNAK;
 8006080:	79bb      	ldrb	r3, [r7, #6]
 8006082:	015b      	lsls	r3, r3, #5
 8006084:	69fa      	ldr	r2, [r7, #28]
 8006086:	4413      	add	r3, r2
 8006088:	681a      	ldr	r2, [r3, #0]
 800608a:	79bb      	ldrb	r3, [r7, #6]
 800608c:	015b      	lsls	r3, r3, #5
 800608e:	69f9      	ldr	r1, [r7, #28]
 8006090:	440b      	add	r3, r1
 8006092:	f042 4204 	orr.w	r2, r2, #2214592512	; 0x84000000
 8006096:	601a      	str	r2, [r3, #0]
    if ((epout[epnum].doepctl & DOEPCTL_EPTYP) == DOEPCTL_EPTYP_0 &&
 8006098:	79bb      	ldrb	r3, [r7, #6]
 800609a:	015b      	lsls	r3, r3, #5
 800609c:	69fa      	ldr	r2, [r7, #28]
 800609e:	4413      	add	r3, r2
 80060a0:	681b      	ldr	r3, [r3, #0]
 80060a2:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
 80060a6:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80060aa:	d123      	bne.n	80060f4 <edpt_schedule_packets+0x1dc>
        XFER_CTL_BASE(epnum, dir)->interval == 1) {
 80060ac:	79ba      	ldrb	r2, [r7, #6]
 80060ae:	797b      	ldrb	r3, [r7, #5]
 80060b0:	4914      	ldr	r1, [pc, #80]	; (8006104 <edpt_schedule_packets+0x1ec>)
 80060b2:	0052      	lsls	r2, r2, #1
 80060b4:	4413      	add	r3, r2
 80060b6:	011b      	lsls	r3, r3, #4
 80060b8:	440b      	add	r3, r1
 80060ba:	330c      	adds	r3, #12
 80060bc:	781b      	ldrb	r3, [r3, #0]
    if ((epout[epnum].doepctl & DOEPCTL_EPTYP) == DOEPCTL_EPTYP_0 &&
 80060be:	2b01      	cmp	r3, #1
 80060c0:	d118      	bne.n	80060f4 <edpt_schedule_packets+0x1dc>
      uint32_t const odd_frame_now = (dwc2->dsts & (1u << DSTS_FNSOF_Pos));
 80060c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80060c4:	f8d3 3808 	ldr.w	r3, [r3, #2056]	; 0x808
 80060c8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80060cc:	61bb      	str	r3, [r7, #24]
      epout[epnum].doepctl |= (odd_frame_now ? DOEPCTL_SD0PID_SEVNFRM_Msk : DOEPCTL_SODDFRM_Msk);
 80060ce:	79bb      	ldrb	r3, [r7, #6]
 80060d0:	015b      	lsls	r3, r3, #5
 80060d2:	69fa      	ldr	r2, [r7, #28]
 80060d4:	4413      	add	r3, r2
 80060d6:	681a      	ldr	r2, [r3, #0]
 80060d8:	69bb      	ldr	r3, [r7, #24]
 80060da:	2b00      	cmp	r3, #0
 80060dc:	d002      	beq.n	80060e4 <edpt_schedule_packets+0x1cc>
 80060de:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
 80060e2:	e001      	b.n	80060e8 <edpt_schedule_packets+0x1d0>
 80060e4:	f04f 5100 	mov.w	r1, #536870912	; 0x20000000
 80060e8:	79bb      	ldrb	r3, [r7, #6]
 80060ea:	015b      	lsls	r3, r3, #5
 80060ec:	69f8      	ldr	r0, [r7, #28]
 80060ee:	4403      	add	r3, r0
 80060f0:	430a      	orrs	r2, r1
 80060f2:	601a      	str	r2, [r3, #0]
}
 80060f4:	bf00      	nop
 80060f6:	3728      	adds	r7, #40	; 0x28
 80060f8:	46bd      	mov	sp, r7
 80060fa:	bc90      	pop	{r4, r7}
 80060fc:	4770      	bx	lr
 80060fe:	bf00      	nop
 8006100:	080101cc 	.word	0x080101cc
 8006104:	240012f0 	.word	0x240012f0
 8006108:	24001410 	.word	0x24001410

0800610c <reset_core>:
  TU_LOG(DWC2_DEBUG, "0x%08lX\r\n", p[5]);
}

#endif

static void reset_core(dwc2_regs_t* dwc2) {
 800610c:	b480      	push	{r7}
 800610e:	b083      	sub	sp, #12
 8006110:	af00      	add	r7, sp, #0
 8006112:	6078      	str	r0, [r7, #4]
  // reset core
  dwc2->grstctl |= GRSTCTL_CSRST;
 8006114:	687b      	ldr	r3, [r7, #4]
 8006116:	691b      	ldr	r3, [r3, #16]
 8006118:	f043 0201 	orr.w	r2, r3, #1
 800611c:	687b      	ldr	r3, [r7, #4]
 800611e:	611a      	str	r2, [r3, #16]

  // wait for reset bit is cleared
  // TODO version 4.20a should wait for RESET DONE mask
  while (dwc2->grstctl & GRSTCTL_CSRST) {}
 8006120:	bf00      	nop
 8006122:	687b      	ldr	r3, [r7, #4]
 8006124:	691b      	ldr	r3, [r3, #16]
 8006126:	f003 0301 	and.w	r3, r3, #1
 800612a:	2b00      	cmp	r3, #0
 800612c:	d1f9      	bne.n	8006122 <reset_core+0x16>

  // wait for AHB master IDLE
  while (!(dwc2->grstctl & GRSTCTL_AHBIDL)) {}
 800612e:	bf00      	nop
 8006130:	687b      	ldr	r3, [r7, #4]
 8006132:	691b      	ldr	r3, [r3, #16]
 8006134:	2b00      	cmp	r3, #0
 8006136:	dafb      	bge.n	8006130 <reset_core+0x24>

  // wait for device mode ?
}
 8006138:	bf00      	nop
 800613a:	bf00      	nop
 800613c:	370c      	adds	r7, #12
 800613e:	46bd      	mov	sp, r7
 8006140:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006144:	4770      	bx	lr

08006146 <phy_hs_supported>:

static bool phy_hs_supported(dwc2_regs_t* dwc2) {
 8006146:	b480      	push	{r7}
 8006148:	b083      	sub	sp, #12
 800614a:	af00      	add	r7, sp, #0
 800614c:	6078      	str	r0, [r7, #4]
  // note: esp32 incorrect report its hs_phy_type as utmi
#if TU_CHECK_MCU(OPT_MCU_ESP32S2, OPT_MCU_ESP32S3)
  return false;
#else
  return TUD_OPT_HIGH_SPEED && dwc2->ghwcfg2_bm.hs_phy_type != HS_PHY_TYPE_NONE;
 800614e:	687b      	ldr	r3, [r7, #4]
 8006150:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8006154:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8006158:	b2db      	uxtb	r3, r3
 800615a:	2b00      	cmp	r3, #0
 800615c:	bf14      	ite	ne
 800615e:	2301      	movne	r3, #1
 8006160:	2300      	moveq	r3, #0
 8006162:	b2db      	uxtb	r3, r3
#endif
}
 8006164:	4618      	mov	r0, r3
 8006166:	370c      	adds	r7, #12
 8006168:	46bd      	mov	sp, r7
 800616a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800616e:	4770      	bx	lr

08006170 <phy_fs_init>:

static void phy_fs_init(dwc2_regs_t* dwc2) {
 8006170:	b580      	push	{r7, lr}
 8006172:	b082      	sub	sp, #8
 8006174:	af00      	add	r7, sp, #0
 8006176:	6078      	str	r0, [r7, #4]
  TU_LOG(DWC2_DEBUG, "Fullspeed PHY init\r\n");

  // Select FS PHY
  dwc2->gusbcfg |= GUSBCFG_PHYSEL;
 8006178:	687b      	ldr	r3, [r7, #4]
 800617a:	68db      	ldr	r3, [r3, #12]
 800617c:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8006180:	687b      	ldr	r3, [r7, #4]
 8006182:	60da      	str	r2, [r3, #12]

  // MCU specific PHY init before reset
  dwc2_phy_init(dwc2, HS_PHY_TYPE_NONE);
 8006184:	2100      	movs	r1, #0
 8006186:	6878      	ldr	r0, [r7, #4]
 8006188:	f7ff fd2a 	bl	8005be0 <dwc2_phy_init>

  // Reset core after selecting PHY
  reset_core(dwc2);
 800618c:	6878      	ldr	r0, [r7, #4]
 800618e:	f7ff ffbd 	bl	800610c <reset_core>

  // USB turnaround time is critical for certification where long cables and 5-Hubs are used.
  // So if you need the AHB to run at less than 30 MHz, and if USB turnaround time is not critical,
  // these bits can be programmed to a larger value. Default is 5
  dwc2->gusbcfg = (dwc2->gusbcfg & ~GUSBCFG_TRDT_Msk) | (5u << GUSBCFG_TRDT_Pos);
 8006192:	687b      	ldr	r3, [r7, #4]
 8006194:	68db      	ldr	r3, [r3, #12]
 8006196:	f423 5370 	bic.w	r3, r3, #15360	; 0x3c00
 800619a:	f443 52a0 	orr.w	r2, r3, #5120	; 0x1400
 800619e:	687b      	ldr	r3, [r7, #4]
 80061a0:	60da      	str	r2, [r3, #12]

  // MCU specific PHY update post reset
  dwc2_phy_update(dwc2, HS_PHY_TYPE_NONE);
 80061a2:	2100      	movs	r1, #0
 80061a4:	6878      	ldr	r0, [r7, #4]
 80061a6:	f7ff fd55 	bl	8005c54 <dwc2_phy_update>

  // set max speed
  dwc2->dcfg = (dwc2->dcfg & ~DCFG_DSPD_Msk) | (DCFG_DSPD_FS << DCFG_DSPD_Pos);
 80061aa:	687b      	ldr	r3, [r7, #4]
 80061ac:	f8d3 3800 	ldr.w	r3, [r3, #2048]	; 0x800
 80061b0:	f043 0203 	orr.w	r2, r3, #3
 80061b4:	687b      	ldr	r3, [r7, #4]
 80061b6:	f8c3 2800 	str.w	r2, [r3, #2048]	; 0x800
}
 80061ba:	bf00      	nop
 80061bc:	3708      	adds	r7, #8
 80061be:	46bd      	mov	sp, r7
 80061c0:	bd80      	pop	{r7, pc}

080061c2 <phy_hs_init>:

static void phy_hs_init(dwc2_regs_t* dwc2) {
 80061c2:	b580      	push	{r7, lr}
 80061c4:	b084      	sub	sp, #16
 80061c6:	af00      	add	r7, sp, #0
 80061c8:	6078      	str	r0, [r7, #4]
  uint32_t gusbcfg = dwc2->gusbcfg;
 80061ca:	687b      	ldr	r3, [r7, #4]
 80061cc:	68db      	ldr	r3, [r3, #12]
 80061ce:	60fb      	str	r3, [r7, #12]

  // De-select FS PHY
  gusbcfg &= ~GUSBCFG_PHYSEL;
 80061d0:	68fb      	ldr	r3, [r7, #12]
 80061d2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80061d6:	60fb      	str	r3, [r7, #12]

  if (dwc2->ghwcfg2_bm.hs_phy_type == HS_PHY_TYPE_ULPI) {
 80061d8:	687b      	ldr	r3, [r7, #4]
 80061da:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 80061de:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80061e2:	b2db      	uxtb	r3, r3
 80061e4:	2b80      	cmp	r3, #128	; 0x80
 80061e6:	d110      	bne.n	800620a <phy_hs_init+0x48>
    TU_LOG(DWC2_DEBUG, "Highspeed ULPI PHY init\r\n");

    // Select ULPI
    gusbcfg |= GUSBCFG_ULPI_UTMI_SEL;
 80061e8:	68fb      	ldr	r3, [r7, #12]
 80061ea:	f043 0310 	orr.w	r3, r3, #16
 80061ee:	60fb      	str	r3, [r7, #12]

    // ULPI 8-bit interface, single data rate
    gusbcfg &= ~(GUSBCFG_PHYIF16 | GUSBCFG_DDRSEL);
 80061f0:	68fb      	ldr	r3, [r7, #12]
 80061f2:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 80061f6:	60fb      	str	r3, [r7, #12]

    // default internal VBUS Indicator and Drive
    gusbcfg &= ~(GUSBCFG_ULPIEVBUSD | GUSBCFG_ULPIEVBUSI);
 80061f8:	68fb      	ldr	r3, [r7, #12]
 80061fa:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 80061fe:	60fb      	str	r3, [r7, #12]

    // Disable FS/LS ULPI
    gusbcfg &= ~(GUSBCFG_ULPIFSLS | GUSBCFG_ULPICSM);
 8006200:	68fb      	ldr	r3, [r7, #12]
 8006202:	f423 2320 	bic.w	r3, r3, #655360	; 0xa0000
 8006206:	60fb      	str	r3, [r7, #12]
 8006208:	e00f      	b.n	800622a <phy_hs_init+0x68>
  } else {
    TU_LOG(DWC2_DEBUG, "Highspeed UTMI+ PHY init\r\n");

    // Select UTMI+ with 8-bit interface
    gusbcfg &= ~(GUSBCFG_ULPI_UTMI_SEL | GUSBCFG_PHYIF16);
 800620a:	68fb      	ldr	r3, [r7, #12]
 800620c:	f023 0318 	bic.w	r3, r3, #24
 8006210:	60fb      	str	r3, [r7, #12]

    // Set 16-bit interface if supported
    if (dwc2->ghwcfg4_bm.utmi_phy_data_width) gusbcfg |= GUSBCFG_PHYIF16;
 8006212:	687b      	ldr	r3, [r7, #4]
 8006214:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8006218:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800621c:	b2db      	uxtb	r3, r3
 800621e:	2b00      	cmp	r3, #0
 8006220:	d003      	beq.n	800622a <phy_hs_init+0x68>
 8006222:	68fb      	ldr	r3, [r7, #12]
 8006224:	f043 0308 	orr.w	r3, r3, #8
 8006228:	60fb      	str	r3, [r7, #12]
  }

  // Apply config
  dwc2->gusbcfg = gusbcfg;
 800622a:	687b      	ldr	r3, [r7, #4]
 800622c:	68fa      	ldr	r2, [r7, #12]
 800622e:	60da      	str	r2, [r3, #12]

  // mcu specific phy init
  dwc2_phy_init(dwc2, dwc2->ghwcfg2_bm.hs_phy_type);
 8006230:	687b      	ldr	r3, [r7, #4]
 8006232:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8006236:	f3c3 1381 	ubfx	r3, r3, #6, #2
 800623a:	b2db      	uxtb	r3, r3
 800623c:	4619      	mov	r1, r3
 800623e:	6878      	ldr	r0, [r7, #4]
 8006240:	f7ff fcce 	bl	8005be0 <dwc2_phy_init>

  // Reset core after selecting PHY
  reset_core(dwc2);
 8006244:	6878      	ldr	r0, [r7, #4]
 8006246:	f7ff ff61 	bl	800610c <reset_core>

  // Set turn-around, must after core reset otherwise it will be clear
  // - 9 if using 8-bit PHY interface
  // - 5 if using 16-bit PHY interface
  gusbcfg &= ~GUSBCFG_TRDT_Msk;
 800624a:	68fb      	ldr	r3, [r7, #12]
 800624c:	f423 5370 	bic.w	r3, r3, #15360	; 0x3c00
 8006250:	60fb      	str	r3, [r7, #12]
  gusbcfg |= (dwc2->ghwcfg4_bm.utmi_phy_data_width ? 5u : 9u) << GUSBCFG_TRDT_Pos;
 8006252:	687b      	ldr	r3, [r7, #4]
 8006254:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8006258:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800625c:	b2db      	uxtb	r3, r3
 800625e:	2b00      	cmp	r3, #0
 8006260:	d002      	beq.n	8006268 <phy_hs_init+0xa6>
 8006262:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8006266:	e001      	b.n	800626c <phy_hs_init+0xaa>
 8006268:	f44f 5310 	mov.w	r3, #9216	; 0x2400
 800626c:	68fa      	ldr	r2, [r7, #12]
 800626e:	4313      	orrs	r3, r2
 8006270:	60fb      	str	r3, [r7, #12]
  dwc2->gusbcfg = gusbcfg;
 8006272:	687b      	ldr	r3, [r7, #4]
 8006274:	68fa      	ldr	r2, [r7, #12]
 8006276:	60da      	str	r2, [r3, #12]

  // MCU specific PHY update post reset
  dwc2_phy_update(dwc2, dwc2->ghwcfg2_bm.hs_phy_type);
 8006278:	687b      	ldr	r3, [r7, #4]
 800627a:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 800627e:	f3c3 1381 	ubfx	r3, r3, #6, #2
 8006282:	b2db      	uxtb	r3, r3
 8006284:	4619      	mov	r1, r3
 8006286:	6878      	ldr	r0, [r7, #4]
 8006288:	f7ff fce4 	bl	8005c54 <dwc2_phy_update>

  // Set max speed
  uint32_t dcfg = dwc2->dcfg;
 800628c:	687b      	ldr	r3, [r7, #4]
 800628e:	f8d3 3800 	ldr.w	r3, [r3, #2048]	; 0x800
 8006292:	60bb      	str	r3, [r7, #8]
  dcfg &= ~DCFG_DSPD_Msk;
 8006294:	68bb      	ldr	r3, [r7, #8]
 8006296:	f023 0303 	bic.w	r3, r3, #3
 800629a:	60bb      	str	r3, [r7, #8]
  dcfg |= DCFG_DSPD_HS << DCFG_DSPD_Pos;

  // XCVRDLY: transceiver delay between xcvr_sel and txvalid during device chirp is required
  // when using with some PHYs such as USB334x (USB3341, USB3343, USB3346, USB3347)
  if (dwc2->ghwcfg2_bm.hs_phy_type == HS_PHY_TYPE_ULPI) dcfg |= DCFG_XCVRDLY;
 800629c:	687b      	ldr	r3, [r7, #4]
 800629e:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 80062a2:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80062a6:	b2db      	uxtb	r3, r3
 80062a8:	2b80      	cmp	r3, #128	; 0x80
 80062aa:	d103      	bne.n	80062b4 <phy_hs_init+0xf2>
 80062ac:	68bb      	ldr	r3, [r7, #8]
 80062ae:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80062b2:	60bb      	str	r3, [r7, #8]

  dwc2->dcfg = dcfg;
 80062b4:	687b      	ldr	r3, [r7, #4]
 80062b6:	68ba      	ldr	r2, [r7, #8]
 80062b8:	f8c3 2800 	str.w	r2, [r3, #2048]	; 0x800
}
 80062bc:	bf00      	nop
 80062be:	3710      	adds	r7, #16
 80062c0:	46bd      	mov	sp, r7
 80062c2:	bd80      	pop	{r7, pc}

080062c4 <check_dwc2>:

static bool check_dwc2(dwc2_regs_t* dwc2) {
 80062c4:	b480      	push	{r7}
 80062c6:	b085      	sub	sp, #20
 80062c8:	af00      	add	r7, sp, #0
 80062ca:	6078      	str	r0, [r7, #4]
#endif

  // For some reasons: GD32VF103 snpsid and all hwcfg register are always zero (skip it)
  (void) dwc2;
#if !TU_CHECK_MCU(OPT_MCU_GD32VF103)
  uint32_t const gsnpsid = dwc2->gsnpsid & GSNPSID_ID_MASK;
 80062cc:	687b      	ldr	r3, [r7, #4]
 80062ce:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80062d0:	4b10      	ldr	r3, [pc, #64]	; (8006314 <check_dwc2+0x50>)
 80062d2:	4013      	ands	r3, r2
 80062d4:	60fb      	str	r3, [r7, #12]
  TU_ASSERT(gsnpsid == DWC2_OTG_ID || gsnpsid == DWC2_FS_IOT_ID || gsnpsid == DWC2_HS_IOT_ID);
 80062d6:	68fb      	ldr	r3, [r7, #12]
 80062d8:	4a0f      	ldr	r2, [pc, #60]	; (8006318 <check_dwc2+0x54>)
 80062da:	4293      	cmp	r3, r2
 80062dc:	d012      	beq.n	8006304 <check_dwc2+0x40>
 80062de:	68fb      	ldr	r3, [r7, #12]
 80062e0:	4a0e      	ldr	r2, [pc, #56]	; (800631c <check_dwc2+0x58>)
 80062e2:	4293      	cmp	r3, r2
 80062e4:	d00e      	beq.n	8006304 <check_dwc2+0x40>
 80062e6:	68fb      	ldr	r3, [r7, #12]
 80062e8:	4a0d      	ldr	r2, [pc, #52]	; (8006320 <check_dwc2+0x5c>)
 80062ea:	4293      	cmp	r3, r2
 80062ec:	d00a      	beq.n	8006304 <check_dwc2+0x40>
 80062ee:	4b0d      	ldr	r3, [pc, #52]	; (8006324 <check_dwc2+0x60>)
 80062f0:	60bb      	str	r3, [r7, #8]
 80062f2:	68bb      	ldr	r3, [r7, #8]
 80062f4:	681b      	ldr	r3, [r3, #0]
 80062f6:	f003 0301 	and.w	r3, r3, #1
 80062fa:	2b00      	cmp	r3, #0
 80062fc:	d000      	beq.n	8006300 <check_dwc2+0x3c>
 80062fe:	be00      	bkpt	0x0000
 8006300:	2300      	movs	r3, #0
 8006302:	e000      	b.n	8006306 <check_dwc2+0x42>
#endif

  return true;
 8006304:	2301      	movs	r3, #1
}
 8006306:	4618      	mov	r0, r3
 8006308:	3714      	adds	r7, #20
 800630a:	46bd      	mov	sp, r7
 800630c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006310:	4770      	bx	lr
 8006312:	bf00      	nop
 8006314:	ffff0000 	.word	0xffff0000
 8006318:	4f540000 	.word	0x4f540000
 800631c:	55310000 	.word	0x55310000
 8006320:	55320000 	.word	0x55320000
 8006324:	e000edf0 	.word	0xe000edf0

08006328 <dcd_init>:

void dcd_init(uint8_t rhport) {
 8006328:	b580      	push	{r7, lr}
 800632a:	b084      	sub	sp, #16
 800632c:	af00      	add	r7, sp, #0
 800632e:	4603      	mov	r3, r0
 8006330:	71fb      	strb	r3, [r7, #7]
  // Programming model begins in the last section of the chapter on the USB
  // peripheral in each Reference Manual.
  dwc2_regs_t* dwc2 = DWC2_REG(rhport);
 8006332:	79fb      	ldrb	r3, [r7, #7]
 8006334:	4a3e      	ldr	r2, [pc, #248]	; (8006430 <dcd_init+0x108>)
 8006336:	011b      	lsls	r3, r3, #4
 8006338:	4413      	add	r3, r2
 800633a:	681b      	ldr	r3, [r3, #0]
 800633c:	60fb      	str	r3, [r7, #12]

  // Check Synopsys ID register, failed if controller clock/power is not enabled
  if (!check_dwc2(dwc2)) return;
 800633e:	68f8      	ldr	r0, [r7, #12]
 8006340:	f7ff ffc0 	bl	80062c4 <check_dwc2>
 8006344:	4603      	mov	r3, r0
 8006346:	f083 0301 	eor.w	r3, r3, #1
 800634a:	b2db      	uxtb	r3, r3
 800634c:	2b00      	cmp	r3, #0
 800634e:	d16b      	bne.n	8006428 <dcd_init+0x100>
  dcd_disconnect(rhport);
 8006350:	79fb      	ldrb	r3, [r7, #7]
 8006352:	4618      	mov	r0, r3
 8006354:	f000 f8f0 	bl	8006538 <dcd_disconnect>

  // max number of endpoints & total_fifo_size are:
  // hw_cfg2->num_dev_ep, hw_cfg2->total_fifo_size

  if (phy_hs_supported(dwc2)) {
 8006358:	68f8      	ldr	r0, [r7, #12]
 800635a:	f7ff fef4 	bl	8006146 <phy_hs_supported>
 800635e:	4603      	mov	r3, r0
 8006360:	2b00      	cmp	r3, #0
 8006362:	d003      	beq.n	800636c <dcd_init+0x44>
    phy_hs_init(dwc2); // Highspeed
 8006364:	68f8      	ldr	r0, [r7, #12]
 8006366:	f7ff ff2c 	bl	80061c2 <phy_hs_init>
 800636a:	e002      	b.n	8006372 <dcd_init+0x4a>
  } else {
    phy_fs_init(dwc2); // core does not support highspeed or hs phy is not present
 800636c:	68f8      	ldr	r0, [r7, #12]
 800636e:	f7ff feff 	bl	8006170 <phy_fs_init>
  }

  // Restart PHY clock
  dwc2->pcgctl &= ~(PCGCTL_STOPPCLK | PCGCTL_GATEHCLK | PCGCTL_PWRCLMP | PCGCTL_RSTPDWNMODULE);
 8006372:	68fb      	ldr	r3, [r7, #12]
 8006374:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	; 0xe00
 8006378:	f023 020f 	bic.w	r2, r3, #15
 800637c:	68fb      	ldr	r3, [r7, #12]
 800637e:	f8c3 2e00 	str.w	r2, [r3, #3584]	; 0xe00
   * duration in the core to account for any additional delays
   * introduced by the PHY. This can be required, because the delay
   * introduced by the PHY in generating the linestate condition
   * can vary from one PHY to another.
   */
  dwc2->gusbcfg |= (7ul << GUSBCFG_TOCAL_Pos);
 8006382:	68fb      	ldr	r3, [r7, #12]
 8006384:	68db      	ldr	r3, [r3, #12]
 8006386:	f043 0207 	orr.w	r2, r3, #7
 800638a:	68fb      	ldr	r3, [r7, #12]
 800638c:	60da      	str	r2, [r3, #12]

  // Force device mode
  dwc2->gusbcfg = (dwc2->gusbcfg & ~GUSBCFG_FHMOD) | GUSBCFG_FDMOD;
 800638e:	68fb      	ldr	r3, [r7, #12]
 8006390:	68db      	ldr	r3, [r3, #12]
 8006392:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 8006396:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800639a:	68fb      	ldr	r3, [r7, #12]
 800639c:	60da      	str	r2, [r3, #12]

  // Clear A override, force B Valid
  dwc2->gotgctl = (dwc2->gotgctl & ~GOTGCTL_AVALOEN) | GOTGCTL_BVALOEN | GOTGCTL_BVALOVAL;
 800639e:	68fb      	ldr	r3, [r7, #12]
 80063a0:	681b      	ldr	r3, [r3, #0]
 80063a2:	f023 03d0 	bic.w	r3, r3, #208	; 0xd0
 80063a6:	f043 02c0 	orr.w	r2, r3, #192	; 0xc0
 80063aa:	68fb      	ldr	r3, [r7, #12]
 80063ac:	601a      	str	r2, [r3, #0]

  // If USB host misbehaves during status portion of control xfer
  // (non zero-length packet), send STALL back and discard.
  dwc2->dcfg |= DCFG_NZLSOHSK;
 80063ae:	68fb      	ldr	r3, [r7, #12]
 80063b0:	f8d3 3800 	ldr.w	r3, [r3, #2048]	; 0x800
 80063b4:	f043 0204 	orr.w	r2, r3, #4
 80063b8:	68fb      	ldr	r3, [r7, #12]
 80063ba:	f8c3 2800 	str.w	r2, [r3, #2048]	; 0x800

  // flush all TX fifo and wait for it cleared
  dwc2->grstctl = GRSTCTL_TXFFLSH | (0x10u << GRSTCTL_TXFNUM_Pos);
 80063be:	68fb      	ldr	r3, [r7, #12]
 80063c0:	f44f 6284 	mov.w	r2, #1056	; 0x420
 80063c4:	611a      	str	r2, [r3, #16]
  while (dwc2->grstctl & GRSTCTL_TXFFLSH_Msk) {}
 80063c6:	bf00      	nop
 80063c8:	68fb      	ldr	r3, [r7, #12]
 80063ca:	691b      	ldr	r3, [r3, #16]
 80063cc:	f003 0320 	and.w	r3, r3, #32
 80063d0:	2b00      	cmp	r3, #0
 80063d2:	d1f9      	bne.n	80063c8 <dcd_init+0xa0>

  // flush RX fifo and wait for it cleared
  dwc2->grstctl = GRSTCTL_RXFFLSH;
 80063d4:	68fb      	ldr	r3, [r7, #12]
 80063d6:	2210      	movs	r2, #16
 80063d8:	611a      	str	r2, [r3, #16]
  while (dwc2->grstctl & GRSTCTL_RXFFLSH_Msk) {}
 80063da:	bf00      	nop
 80063dc:	68fb      	ldr	r3, [r7, #12]
 80063de:	691b      	ldr	r3, [r3, #16]
 80063e0:	f003 0310 	and.w	r3, r3, #16
 80063e4:	2b00      	cmp	r3, #0
 80063e6:	d1f9      	bne.n	80063dc <dcd_init+0xb4>

  // Clear all interrupts
  uint32_t int_mask = dwc2->gintsts;
 80063e8:	68fb      	ldr	r3, [r7, #12]
 80063ea:	695b      	ldr	r3, [r3, #20]
 80063ec:	60bb      	str	r3, [r7, #8]
  dwc2->gintsts |= int_mask;
 80063ee:	68fb      	ldr	r3, [r7, #12]
 80063f0:	695a      	ldr	r2, [r3, #20]
 80063f2:	68bb      	ldr	r3, [r7, #8]
 80063f4:	431a      	orrs	r2, r3
 80063f6:	68fb      	ldr	r3, [r7, #12]
 80063f8:	615a      	str	r2, [r3, #20]
  int_mask = dwc2->gotgint;
 80063fa:	68fb      	ldr	r3, [r7, #12]
 80063fc:	685b      	ldr	r3, [r3, #4]
 80063fe:	60bb      	str	r3, [r7, #8]
  dwc2->gotgint |= int_mask;
 8006400:	68fb      	ldr	r3, [r7, #12]
 8006402:	685a      	ldr	r2, [r3, #4]
 8006404:	68bb      	ldr	r3, [r7, #8]
 8006406:	431a      	orrs	r2, r3
 8006408:	68fb      	ldr	r3, [r7, #12]
 800640a:	605a      	str	r2, [r3, #4]

  // Required as part of core initialization.
  // TODO: How should mode mismatch be handled? It will cause
  // the core to stop working/require reset.
  dwc2->gintmsk = GINTMSK_OTGINT | GINTMSK_MMISM | GINTMSK_RXFLVLM |
 800640c:	68fb      	ldr	r3, [r7, #12]
 800640e:	4a09      	ldr	r2, [pc, #36]	; (8006434 <dcd_init+0x10c>)
 8006410:	619a      	str	r2, [r3, #24]
                  GINTMSK_USBSUSPM | GINTMSK_USBRST | GINTMSK_ENUMDNEM | GINTMSK_WUIM;

  // Enable global interrupt
  dwc2->gahbcfg |= GAHBCFG_GINT;
 8006412:	68fb      	ldr	r3, [r7, #12]
 8006414:	689b      	ldr	r3, [r3, #8]
 8006416:	f043 0201 	orr.w	r2, r3, #1
 800641a:	68fb      	ldr	r3, [r7, #12]
 800641c:	609a      	str	r2, [r3, #8]
//  TU_LOG_HEX(DWC2_DEBUG, dwc2->gotgctl);
//  TU_LOG_HEX(DWC2_DEBUG, dwc2->gusbcfg);
//  TU_LOG_HEX(DWC2_DEBUG, dwc2->dcfg);
//  TU_LOG_HEX(DWC2_DEBUG, dwc2->gahbcfg);

  dcd_connect(rhport);
 800641e:	79fb      	ldrb	r3, [r7, #7]
 8006420:	4618      	mov	r0, r3
 8006422:	f000 f86d 	bl	8006500 <dcd_connect>
 8006426:	e000      	b.n	800642a <dcd_init+0x102>
  if (!check_dwc2(dwc2)) return;
 8006428:	bf00      	nop
}
 800642a:	3710      	adds	r7, #16
 800642c:	46bd      	mov	sp, r7
 800642e:	bd80      	pop	{r7, pc}
 8006430:	080101cc 	.word	0x080101cc
 8006434:	80003816 	.word	0x80003816

08006438 <dcd_int_enable>:

void dcd_int_enable(uint8_t rhport) {
 8006438:	b580      	push	{r7, lr}
 800643a:	b084      	sub	sp, #16
 800643c:	af00      	add	r7, sp, #0
 800643e:	4603      	mov	r3, r0
 8006440:	71fb      	strb	r3, [r7, #7]
 8006442:	79fb      	ldrb	r3, [r7, #7]
 8006444:	73fb      	strb	r3, [r7, #15]
  NVIC_EnableIRQ((IRQn_Type) _dwc2_controller[rhport].irqnum);
 8006446:	7bfb      	ldrb	r3, [r7, #15]
 8006448:	4a06      	ldr	r2, [pc, #24]	; (8006464 <dcd_int_enable+0x2c>)
 800644a:	011b      	lsls	r3, r3, #4
 800644c:	4413      	add	r3, r2
 800644e:	3304      	adds	r3, #4
 8006450:	681b      	ldr	r3, [r3, #0]
 8006452:	b21b      	sxth	r3, r3
 8006454:	4618      	mov	r0, r3
 8006456:	f7ff fb81 	bl	8005b5c <__NVIC_EnableIRQ>
}
 800645a:	bf00      	nop
  dwc2_dcd_int_enable(rhport);
}
 800645c:	bf00      	nop
 800645e:	3710      	adds	r7, #16
 8006460:	46bd      	mov	sp, r7
 8006462:	bd80      	pop	{r7, pc}
 8006464:	080101cc 	.word	0x080101cc

08006468 <dcd_int_disable>:

void dcd_int_disable(uint8_t rhport) {
 8006468:	b580      	push	{r7, lr}
 800646a:	b084      	sub	sp, #16
 800646c:	af00      	add	r7, sp, #0
 800646e:	4603      	mov	r3, r0
 8006470:	71fb      	strb	r3, [r7, #7]
 8006472:	79fb      	ldrb	r3, [r7, #7]
 8006474:	73fb      	strb	r3, [r7, #15]
  NVIC_DisableIRQ((IRQn_Type) _dwc2_controller[rhport].irqnum);
 8006476:	7bfb      	ldrb	r3, [r7, #15]
 8006478:	4a06      	ldr	r2, [pc, #24]	; (8006494 <dcd_int_disable+0x2c>)
 800647a:	011b      	lsls	r3, r3, #4
 800647c:	4413      	add	r3, r2
 800647e:	3304      	adds	r3, #4
 8006480:	681b      	ldr	r3, [r3, #0]
 8006482:	b21b      	sxth	r3, r3
 8006484:	4618      	mov	r0, r3
 8006486:	f7ff fb87 	bl	8005b98 <__NVIC_DisableIRQ>
}
 800648a:	bf00      	nop
  dwc2_dcd_int_disable(rhport);
}
 800648c:	bf00      	nop
 800648e:	3710      	adds	r7, #16
 8006490:	46bd      	mov	sp, r7
 8006492:	bd80      	pop	{r7, pc}
 8006494:	080101cc 	.word	0x080101cc

08006498 <dcd_set_address>:

void dcd_set_address(uint8_t rhport, uint8_t dev_addr) {
 8006498:	b580      	push	{r7, lr}
 800649a:	b084      	sub	sp, #16
 800649c:	af00      	add	r7, sp, #0
 800649e:	4603      	mov	r3, r0
 80064a0:	460a      	mov	r2, r1
 80064a2:	71fb      	strb	r3, [r7, #7]
 80064a4:	4613      	mov	r3, r2
 80064a6:	71bb      	strb	r3, [r7, #6]
  dwc2_regs_t* dwc2 = DWC2_REG(rhport);
 80064a8:	79fb      	ldrb	r3, [r7, #7]
 80064aa:	4a14      	ldr	r2, [pc, #80]	; (80064fc <dcd_set_address+0x64>)
 80064ac:	011b      	lsls	r3, r3, #4
 80064ae:	4413      	add	r3, r2
 80064b0:	681b      	ldr	r3, [r3, #0]
 80064b2:	60fb      	str	r3, [r7, #12]
  dwc2->dcfg = (dwc2->dcfg & ~DCFG_DAD_Msk) | (dev_addr << DCFG_DAD_Pos);
 80064b4:	68fb      	ldr	r3, [r7, #12]
 80064b6:	f8d3 3800 	ldr.w	r3, [r3, #2048]	; 0x800
 80064ba:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 80064be:	79ba      	ldrb	r2, [r7, #6]
 80064c0:	0112      	lsls	r2, r2, #4
 80064c2:	431a      	orrs	r2, r3
 80064c4:	68fb      	ldr	r3, [r7, #12]
 80064c6:	f8c3 2800 	str.w	r2, [r3, #2048]	; 0x800
 80064ca:	2300      	movs	r3, #0
 80064cc:	72fb      	strb	r3, [r7, #11]
 80064ce:	2301      	movs	r3, #1
 80064d0:	72bb      	strb	r3, [r7, #10]
  return (uint8_t)(num | (dir ? TUSB_DIR_IN_MASK : 0));
 80064d2:	7abb      	ldrb	r3, [r7, #10]
 80064d4:	2b00      	cmp	r3, #0
 80064d6:	d002      	beq.n	80064de <dcd_set_address+0x46>
 80064d8:	f06f 037f 	mvn.w	r3, #127	; 0x7f
 80064dc:	e000      	b.n	80064e0 <dcd_set_address+0x48>
 80064de:	2300      	movs	r3, #0
 80064e0:	f997 200b 	ldrsb.w	r2, [r7, #11]
 80064e4:	4313      	orrs	r3, r2
 80064e6:	b25b      	sxtb	r3, r3
 80064e8:	b2d9      	uxtb	r1, r3

  // Response with status after changing device address
  dcd_edpt_xfer(rhport, tu_edpt_addr(0, TUSB_DIR_IN), NULL, 0);
 80064ea:	79f8      	ldrb	r0, [r7, #7]
 80064ec:	2300      	movs	r3, #0
 80064ee:	2200      	movs	r2, #0
 80064f0:	f000 f9c8 	bl	8006884 <dcd_edpt_xfer>
}
 80064f4:	bf00      	nop
 80064f6:	3710      	adds	r7, #16
 80064f8:	46bd      	mov	sp, r7
 80064fa:	bd80      	pop	{r7, pc}
 80064fc:	080101cc 	.word	0x080101cc

08006500 <dcd_connect>:
  dwc2_remote_wakeup_delay();

  dwc2->dctl &= ~DCTL_RWUSIG;
}

void dcd_connect(uint8_t rhport) {
 8006500:	b480      	push	{r7}
 8006502:	b085      	sub	sp, #20
 8006504:	af00      	add	r7, sp, #0
 8006506:	4603      	mov	r3, r0
 8006508:	71fb      	strb	r3, [r7, #7]
  (void) rhport;
  dwc2_regs_t* dwc2 = DWC2_REG(rhport);
 800650a:	79fb      	ldrb	r3, [r7, #7]
 800650c:	4a09      	ldr	r2, [pc, #36]	; (8006534 <dcd_connect+0x34>)
 800650e:	011b      	lsls	r3, r3, #4
 8006510:	4413      	add	r3, r2
 8006512:	681b      	ldr	r3, [r3, #0]
 8006514:	60fb      	str	r3, [r7, #12]
  dwc2->dctl &= ~DCTL_SDIS;
 8006516:	68fb      	ldr	r3, [r7, #12]
 8006518:	f8d3 3804 	ldr.w	r3, [r3, #2052]	; 0x804
 800651c:	f023 0202 	bic.w	r2, r3, #2
 8006520:	68fb      	ldr	r3, [r7, #12]
 8006522:	f8c3 2804 	str.w	r2, [r3, #2052]	; 0x804
}
 8006526:	bf00      	nop
 8006528:	3714      	adds	r7, #20
 800652a:	46bd      	mov	sp, r7
 800652c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006530:	4770      	bx	lr
 8006532:	bf00      	nop
 8006534:	080101cc 	.word	0x080101cc

08006538 <dcd_disconnect>:

void dcd_disconnect(uint8_t rhport) {
 8006538:	b480      	push	{r7}
 800653a:	b085      	sub	sp, #20
 800653c:	af00      	add	r7, sp, #0
 800653e:	4603      	mov	r3, r0
 8006540:	71fb      	strb	r3, [r7, #7]
  (void) rhport;
  dwc2_regs_t* dwc2 = DWC2_REG(rhport);
 8006542:	79fb      	ldrb	r3, [r7, #7]
 8006544:	4a09      	ldr	r2, [pc, #36]	; (800656c <dcd_disconnect+0x34>)
 8006546:	011b      	lsls	r3, r3, #4
 8006548:	4413      	add	r3, r2
 800654a:	681b      	ldr	r3, [r3, #0]
 800654c:	60fb      	str	r3, [r7, #12]
  dwc2->dctl |= DCTL_SDIS;
 800654e:	68fb      	ldr	r3, [r7, #12]
 8006550:	f8d3 3804 	ldr.w	r3, [r3, #2052]	; 0x804
 8006554:	f043 0202 	orr.w	r2, r3, #2
 8006558:	68fb      	ldr	r3, [r7, #12]
 800655a:	f8c3 2804 	str.w	r2, [r3, #2052]	; 0x804
}
 800655e:	bf00      	nop
 8006560:	3714      	adds	r7, #20
 8006562:	46bd      	mov	sp, r7
 8006564:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006568:	4770      	bx	lr
 800656a:	bf00      	nop
 800656c:	080101cc 	.word	0x080101cc

08006570 <dcd_edpt_open>:

/*------------------------------------------------------------------*/
/* DCD Endpoint port
 *------------------------------------------------------------------*/

bool dcd_edpt_open(uint8_t rhport, tusb_desc_endpoint_t const* desc_edpt) {
 8006570:	b580      	push	{r7, lr}
 8006572:	b08e      	sub	sp, #56	; 0x38
 8006574:	af00      	add	r7, sp, #0
 8006576:	4603      	mov	r3, r0
 8006578:	6039      	str	r1, [r7, #0]
 800657a:	71fb      	strb	r3, [r7, #7]
  (void) rhport;

  dwc2_regs_t* dwc2 = DWC2_REG(rhport);
 800657c:	79fb      	ldrb	r3, [r7, #7]
 800657e:	4a97      	ldr	r2, [pc, #604]	; (80067dc <dcd_edpt_open+0x26c>)
 8006580:	011b      	lsls	r3, r3, #4
 8006582:	4413      	add	r3, r2
 8006584:	681b      	ldr	r3, [r3, #0]
 8006586:	637b      	str	r3, [r7, #52]	; 0x34
  uint8_t const ep_count = _dwc2_controller[rhport].ep_count;
 8006588:	79fb      	ldrb	r3, [r7, #7]
 800658a:	4a94      	ldr	r2, [pc, #592]	; (80067dc <dcd_edpt_open+0x26c>)
 800658c:	011b      	lsls	r3, r3, #4
 800658e:	4413      	add	r3, r2
 8006590:	3308      	adds	r3, #8
 8006592:	781b      	ldrb	r3, [r3, #0]
 8006594:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

  uint8_t const epnum = tu_edpt_number(desc_edpt->bEndpointAddress);
 8006598:	683b      	ldr	r3, [r7, #0]
 800659a:	789b      	ldrb	r3, [r3, #2]
 800659c:	75bb      	strb	r3, [r7, #22]
  return (uint8_t)(addr & (~TUSB_DIR_IN_MASK));
 800659e:	7dbb      	ldrb	r3, [r7, #22]
 80065a0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80065a4:	b2db      	uxtb	r3, r3
 80065a6:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
  uint8_t const dir = tu_edpt_dir(desc_edpt->bEndpointAddress);
 80065aa:	683b      	ldr	r3, [r7, #0]
 80065ac:	789b      	ldrb	r3, [r3, #2]
 80065ae:	75fb      	strb	r3, [r7, #23]
  return (addr & TUSB_DIR_IN_MASK) ? TUSB_DIR_IN : TUSB_DIR_OUT;
 80065b0:	7dfb      	ldrb	r3, [r7, #23]
 80065b2:	09db      	lsrs	r3, r3, #7
 80065b4:	b2db      	uxtb	r3, r3
 80065b6:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31

  TU_ASSERT(epnum < ep_count);
 80065ba:	f897 2032 	ldrb.w	r2, [r7, #50]	; 0x32
 80065be:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80065c2:	429a      	cmp	r2, r3
 80065c4:	d30a      	bcc.n	80065dc <dcd_edpt_open+0x6c>
 80065c6:	4b86      	ldr	r3, [pc, #536]	; (80067e0 <dcd_edpt_open+0x270>)
 80065c8:	61bb      	str	r3, [r7, #24]
 80065ca:	69bb      	ldr	r3, [r7, #24]
 80065cc:	681b      	ldr	r3, [r3, #0]
 80065ce:	f003 0301 	and.w	r3, r3, #1
 80065d2:	2b00      	cmp	r3, #0
 80065d4:	d000      	beq.n	80065d8 <dcd_edpt_open+0x68>
 80065d6:	be00      	bkpt	0x0000
 80065d8:	2300      	movs	r3, #0
 80065da:	e0fb      	b.n	80067d4 <dcd_edpt_open+0x264>

  xfer_ctl_t* xfer = XFER_CTL_BASE(epnum, dir);
 80065dc:	f897 2032 	ldrb.w	r2, [r7, #50]	; 0x32
 80065e0:	f897 3031 	ldrb.w	r3, [r7, #49]	; 0x31
 80065e4:	0052      	lsls	r2, r2, #1
 80065e6:	4413      	add	r3, r2
 80065e8:	011b      	lsls	r3, r3, #4
 80065ea:	4a7e      	ldr	r2, [pc, #504]	; (80067e4 <dcd_edpt_open+0x274>)
 80065ec:	4413      	add	r3, r2
 80065ee:	62fb      	str	r3, [r7, #44]	; 0x2c
 80065f0:	683b      	ldr	r3, [r7, #0]
 80065f2:	60bb      	str	r3, [r7, #8]
  return tu_le16toh(desc_ep->wMaxPacketSize) & TU_GENMASK(10, 0);
 80065f4:	68bb      	ldr	r3, [r7, #8]
 80065f6:	889b      	ldrh	r3, [r3, #4]
 80065f8:	b29b      	uxth	r3, r3
 80065fa:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80065fe:	b29a      	uxth	r2, r3
  xfer->max_size = tu_edpt_packet_size(desc_edpt);
 8006600:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006602:	815a      	strh	r2, [r3, #10]
  xfer->interval = desc_edpt->bInterval;
 8006604:	683b      	ldr	r3, [r7, #0]
 8006606:	799a      	ldrb	r2, [r3, #6]
 8006608:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800660a:	731a      	strb	r2, [r3, #12]

  uint16_t const fifo_size = tu_div_ceil(xfer->max_size, 4);
 800660c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800660e:	895b      	ldrh	r3, [r3, #10]
 8006610:	613b      	str	r3, [r7, #16]
 8006612:	2304      	movs	r3, #4
 8006614:	60fb      	str	r3, [r7, #12]
TU_ATTR_ALWAYS_INLINE static inline uint32_t tu_div_ceil(uint32_t v, uint32_t d) { return (v + d -1)/d; }
 8006616:	693a      	ldr	r2, [r7, #16]
 8006618:	68fb      	ldr	r3, [r7, #12]
 800661a:	4413      	add	r3, r2
 800661c:	1e5a      	subs	r2, r3, #1
 800661e:	68fb      	ldr	r3, [r7, #12]
 8006620:	fbb2 f3f3 	udiv	r3, r2, r3
 8006624:	857b      	strh	r3, [r7, #42]	; 0x2a

  if (dir == TUSB_DIR_OUT) {
 8006626:	f897 3031 	ldrb.w	r3, [r7, #49]	; 0x31
 800662a:	2b00      	cmp	r3, #0
 800662c:	d160      	bne.n	80066f0 <dcd_edpt_open+0x180>
    // Calculate required size of RX FIFO
    uint16_t const sz = calc_grxfsiz(4 * fifo_size, ep_count);
 800662e:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8006630:	009b      	lsls	r3, r3, #2
 8006632:	b29b      	uxth	r3, r3
 8006634:	f897 2033 	ldrb.w	r2, [r7, #51]	; 0x33
 8006638:	4611      	mov	r1, r2
 800663a:	4618      	mov	r0, r3
 800663c:	f7ff fb80 	bl	8005d40 <calc_grxfsiz>
 8006640:	4603      	mov	r3, r0
 8006642:	847b      	strh	r3, [r7, #34]	; 0x22

    // If size_rx needs to be extended check if possible and if so enlarge it
    if (dwc2->grxfsiz < sz) {
 8006644:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006646:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8006648:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800664a:	429a      	cmp	r2, r3
 800664c:	d21b      	bcs.n	8006686 <dcd_edpt_open+0x116>
      TU_ASSERT(sz + _allocated_fifo_words_tx <= _dwc2_controller[rhport].ep_fifo_size / 4);
 800664e:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8006650:	4a65      	ldr	r2, [pc, #404]	; (80067e8 <dcd_edpt_open+0x278>)
 8006652:	8812      	ldrh	r2, [r2, #0]
 8006654:	4413      	add	r3, r2
 8006656:	4619      	mov	r1, r3
 8006658:	79fb      	ldrb	r3, [r7, #7]
 800665a:	4a60      	ldr	r2, [pc, #384]	; (80067dc <dcd_edpt_open+0x26c>)
 800665c:	011b      	lsls	r3, r3, #4
 800665e:	4413      	add	r3, r2
 8006660:	330c      	adds	r3, #12
 8006662:	681b      	ldr	r3, [r3, #0]
 8006664:	089b      	lsrs	r3, r3, #2
 8006666:	4299      	cmp	r1, r3
 8006668:	d90a      	bls.n	8006680 <dcd_edpt_open+0x110>
 800666a:	4b5d      	ldr	r3, [pc, #372]	; (80067e0 <dcd_edpt_open+0x270>)
 800666c:	61fb      	str	r3, [r7, #28]
 800666e:	69fb      	ldr	r3, [r7, #28]
 8006670:	681b      	ldr	r3, [r3, #0]
 8006672:	f003 0301 	and.w	r3, r3, #1
 8006676:	2b00      	cmp	r3, #0
 8006678:	d000      	beq.n	800667c <dcd_edpt_open+0x10c>
 800667a:	be00      	bkpt	0x0000
 800667c:	2300      	movs	r3, #0
 800667e:	e0a9      	b.n	80067d4 <dcd_edpt_open+0x264>

      // Enlarge RX FIFO
      dwc2->grxfsiz = sz;
 8006680:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8006682:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006684:	625a      	str	r2, [r3, #36]	; 0x24
    }

    dwc2->epout[epnum].doepctl |= (1 << DOEPCTL_USBAEP_Pos) |
 8006686:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800668a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800668c:	3358      	adds	r3, #88	; 0x58
 800668e:	015b      	lsls	r3, r3, #5
 8006690:	4413      	add	r3, r2
 8006692:	681a      	ldr	r2, [r3, #0]
                                  (desc_edpt->bmAttributes.xfer << DOEPCTL_EPTYP_Pos) |
 8006694:	683b      	ldr	r3, [r7, #0]
 8006696:	78db      	ldrb	r3, [r3, #3]
 8006698:	f3c3 0301 	ubfx	r3, r3, #0, #2
 800669c:	b2db      	uxtb	r3, r3
 800669e:	049b      	lsls	r3, r3, #18
 80066a0:	4619      	mov	r1, r3
                                  (desc_edpt->bmAttributes.xfer != TUSB_XFER_ISOCHRONOUS ? DOEPCTL_SD0PID_SEVNFRM : 0) |
 80066a2:	683b      	ldr	r3, [r7, #0]
 80066a4:	78db      	ldrb	r3, [r3, #3]
 80066a6:	f003 0303 	and.w	r3, r3, #3
 80066aa:	b2db      	uxtb	r3, r3
 80066ac:	2b01      	cmp	r3, #1
 80066ae:	d002      	beq.n	80066b6 <dcd_edpt_open+0x146>
 80066b0:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80066b4:	e000      	b.n	80066b8 <dcd_edpt_open+0x148>
 80066b6:	2300      	movs	r3, #0
                                  (desc_edpt->bmAttributes.xfer << DOEPCTL_EPTYP_Pos) |
 80066b8:	430b      	orrs	r3, r1
                                  (xfer->max_size << DOEPCTL_MPSIZ_Pos);
 80066ba:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80066bc:	8949      	ldrh	r1, [r1, #10]
                                  (desc_edpt->bmAttributes.xfer != TUSB_XFER_ISOCHRONOUS ? DOEPCTL_SD0PID_SEVNFRM : 0) |
 80066be:	430b      	orrs	r3, r1
    dwc2->epout[epnum].doepctl |= (1 << DOEPCTL_USBAEP_Pos) |
 80066c0:	431a      	orrs	r2, r3
 80066c2:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 80066c6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80066ca:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80066cc:	3358      	adds	r3, #88	; 0x58
 80066ce:	015b      	lsls	r3, r3, #5
 80066d0:	440b      	add	r3, r1
 80066d2:	601a      	str	r2, [r3, #0]

    dwc2->daintmsk |= TU_BIT(DAINTMSK_OEPM_Pos + epnum);
 80066d4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80066d6:	f8d3 281c 	ldr.w	r2, [r3, #2076]	; 0x81c
 80066da:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 80066de:	3310      	adds	r3, #16
 80066e0:	2101      	movs	r1, #1
 80066e2:	fa01 f303 	lsl.w	r3, r1, r3
 80066e6:	431a      	orrs	r2, r3
 80066e8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80066ea:	f8c3 281c 	str.w	r2, [r3, #2076]	; 0x81c
 80066ee:	e070      	b.n	80067d2 <dcd_edpt_open+0x262>
    //
    // In FIFO is allocated by following rules:
    // - IN EP 1 gets FIFO 1, IN EP "n" gets FIFO "n".

    // Check if free space is available
    TU_ASSERT(_allocated_fifo_words_tx + fifo_size + dwc2->grxfsiz <= _dwc2_controller[rhport].ep_fifo_size / 4);
 80066f0:	4b3d      	ldr	r3, [pc, #244]	; (80067e8 <dcd_edpt_open+0x278>)
 80066f2:	881b      	ldrh	r3, [r3, #0]
 80066f4:	461a      	mov	r2, r3
 80066f6:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80066f8:	4413      	add	r3, r2
 80066fa:	461a      	mov	r2, r3
 80066fc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80066fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006700:	441a      	add	r2, r3
 8006702:	79fb      	ldrb	r3, [r7, #7]
 8006704:	4935      	ldr	r1, [pc, #212]	; (80067dc <dcd_edpt_open+0x26c>)
 8006706:	011b      	lsls	r3, r3, #4
 8006708:	440b      	add	r3, r1
 800670a:	330c      	adds	r3, #12
 800670c:	681b      	ldr	r3, [r3, #0]
 800670e:	089b      	lsrs	r3, r3, #2
 8006710:	429a      	cmp	r2, r3
 8006712:	d90a      	bls.n	800672a <dcd_edpt_open+0x1ba>
 8006714:	4b32      	ldr	r3, [pc, #200]	; (80067e0 <dcd_edpt_open+0x270>)
 8006716:	627b      	str	r3, [r7, #36]	; 0x24
 8006718:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800671a:	681b      	ldr	r3, [r3, #0]
 800671c:	f003 0301 	and.w	r3, r3, #1
 8006720:	2b00      	cmp	r3, #0
 8006722:	d000      	beq.n	8006726 <dcd_edpt_open+0x1b6>
 8006724:	be00      	bkpt	0x0000
 8006726:	2300      	movs	r3, #0
 8006728:	e054      	b.n	80067d4 <dcd_edpt_open+0x264>

    _allocated_fifo_words_tx += fifo_size;
 800672a:	4b2f      	ldr	r3, [pc, #188]	; (80067e8 <dcd_edpt_open+0x278>)
 800672c:	881a      	ldrh	r2, [r3, #0]
 800672e:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8006730:	4413      	add	r3, r2
 8006732:	b29a      	uxth	r2, r3
 8006734:	4b2c      	ldr	r3, [pc, #176]	; (80067e8 <dcd_edpt_open+0x278>)
 8006736:	801a      	strh	r2, [r3, #0]
    TU_LOG(DWC2_DEBUG, "    Allocated %u bytes at offset %lu", fifo_size * 4,
           _dwc2_controller[rhport].ep_fifo_size - _allocated_fifo_words_tx * 4);

    // DIEPTXF starts at FIFO #1.
    // Both TXFD and TXSA are in unit of 32-bit words.
    dwc2->dieptxf[epnum - 1] = (fifo_size << DIEPTXF_INEPTXFD_Pos) |
 8006738:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800673a:	041b      	lsls	r3, r3, #16
 800673c:	4619      	mov	r1, r3
                               (_dwc2_controller[rhport].ep_fifo_size / 4 - _allocated_fifo_words_tx);
 800673e:	79fb      	ldrb	r3, [r7, #7]
 8006740:	4a26      	ldr	r2, [pc, #152]	; (80067dc <dcd_edpt_open+0x26c>)
 8006742:	011b      	lsls	r3, r3, #4
 8006744:	4413      	add	r3, r2
 8006746:	330c      	adds	r3, #12
 8006748:	681b      	ldr	r3, [r3, #0]
 800674a:	089b      	lsrs	r3, r3, #2
 800674c:	4a26      	ldr	r2, [pc, #152]	; (80067e8 <dcd_edpt_open+0x278>)
 800674e:	8812      	ldrh	r2, [r2, #0]
 8006750:	1a9a      	subs	r2, r3, r2
    dwc2->dieptxf[epnum - 1] = (fifo_size << DIEPTXF_INEPTXFD_Pos) |
 8006752:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 8006756:	3b01      	subs	r3, #1
 8006758:	430a      	orrs	r2, r1
 800675a:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800675c:	3340      	adds	r3, #64	; 0x40
 800675e:	009b      	lsls	r3, r3, #2
 8006760:	440b      	add	r3, r1
 8006762:	605a      	str	r2, [r3, #4]

    dwc2->epin[epnum].diepctl |= (1 << DIEPCTL_USBAEP_Pos) |
 8006764:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 8006768:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800676a:	3348      	adds	r3, #72	; 0x48
 800676c:	015b      	lsls	r3, r3, #5
 800676e:	4413      	add	r3, r2
 8006770:	6819      	ldr	r1, [r3, #0]
                                 (epnum << DIEPCTL_TXFNUM_Pos) |
 8006772:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 8006776:	059b      	lsls	r3, r3, #22
    dwc2->epin[epnum].diepctl |= (1 << DIEPCTL_USBAEP_Pos) |
 8006778:	f443 4200 	orr.w	r2, r3, #32768	; 0x8000
                                 (desc_edpt->bmAttributes.xfer << DIEPCTL_EPTYP_Pos) |
 800677c:	683b      	ldr	r3, [r7, #0]
 800677e:	78db      	ldrb	r3, [r3, #3]
 8006780:	f3c3 0301 	ubfx	r3, r3, #0, #2
 8006784:	b2db      	uxtb	r3, r3
 8006786:	049b      	lsls	r3, r3, #18
                                 (epnum << DIEPCTL_TXFNUM_Pos) |
 8006788:	4313      	orrs	r3, r2
 800678a:	461a      	mov	r2, r3
                                 (desc_edpt->bmAttributes.xfer != TUSB_XFER_ISOCHRONOUS ? DIEPCTL_SD0PID_SEVNFRM : 0) |
 800678c:	683b      	ldr	r3, [r7, #0]
 800678e:	78db      	ldrb	r3, [r3, #3]
 8006790:	f003 0303 	and.w	r3, r3, #3
 8006794:	b2db      	uxtb	r3, r3
 8006796:	2b01      	cmp	r3, #1
 8006798:	d002      	beq.n	80067a0 <dcd_edpt_open+0x230>
 800679a:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800679e:	e000      	b.n	80067a2 <dcd_edpt_open+0x232>
 80067a0:	2300      	movs	r3, #0
                                 (desc_edpt->bmAttributes.xfer << DIEPCTL_EPTYP_Pos) |
 80067a2:	4313      	orrs	r3, r2
                                 (xfer->max_size << DIEPCTL_MPSIZ_Pos);
 80067a4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80067a6:	8952      	ldrh	r2, [r2, #10]
                                 (desc_edpt->bmAttributes.xfer != TUSB_XFER_ISOCHRONOUS ? DIEPCTL_SD0PID_SEVNFRM : 0) |
 80067a8:	431a      	orrs	r2, r3
    dwc2->epin[epnum].diepctl |= (1 << DIEPCTL_USBAEP_Pos) |
 80067aa:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 80067ae:	430a      	orrs	r2, r1
 80067b0:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80067b2:	3348      	adds	r3, #72	; 0x48
 80067b4:	015b      	lsls	r3, r3, #5
 80067b6:	440b      	add	r3, r1
 80067b8:	601a      	str	r2, [r3, #0]

    dwc2->daintmsk |= (1 << (DAINTMSK_IEPM_Pos + epnum));
 80067ba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80067bc:	f8d3 381c 	ldr.w	r3, [r3, #2076]	; 0x81c
 80067c0:	f897 2032 	ldrb.w	r2, [r7, #50]	; 0x32
 80067c4:	2101      	movs	r1, #1
 80067c6:	fa01 f202 	lsl.w	r2, r1, r2
 80067ca:	431a      	orrs	r2, r3
 80067cc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80067ce:	f8c3 281c 	str.w	r2, [r3, #2076]	; 0x81c
  }

  return true;
 80067d2:	2301      	movs	r3, #1
}
 80067d4:	4618      	mov	r0, r3
 80067d6:	3738      	adds	r7, #56	; 0x38
 80067d8:	46bd      	mov	sp, r7
 80067da:	bd80      	pop	{r7, pc}
 80067dc:	080101cc 	.word	0x080101cc
 80067e0:	e000edf0 	.word	0xe000edf0
 80067e4:	240012f0 	.word	0x240012f0
 80067e8:	24001414 	.word	0x24001414

080067ec <dcd_edpt_close_all>:

// Close all non-control endpoints, cancel all pending transfers if any.
void dcd_edpt_close_all(uint8_t rhport) {
 80067ec:	b480      	push	{r7}
 80067ee:	b087      	sub	sp, #28
 80067f0:	af00      	add	r7, sp, #0
 80067f2:	4603      	mov	r3, r0
 80067f4:	71fb      	strb	r3, [r7, #7]
  dwc2_regs_t* dwc2 = DWC2_REG(rhport);
 80067f6:	79fb      	ldrb	r3, [r7, #7]
 80067f8:	4a1f      	ldr	r2, [pc, #124]	; (8006878 <dcd_edpt_close_all+0x8c>)
 80067fa:	011b      	lsls	r3, r3, #4
 80067fc:	4413      	add	r3, r2
 80067fe:	681b      	ldr	r3, [r3, #0]
 8006800:	613b      	str	r3, [r7, #16]
  uint8_t const ep_count = _dwc2_controller[rhport].ep_count;
 8006802:	79fb      	ldrb	r3, [r7, #7]
 8006804:	4a1c      	ldr	r2, [pc, #112]	; (8006878 <dcd_edpt_close_all+0x8c>)
 8006806:	011b      	lsls	r3, r3, #4
 8006808:	4413      	add	r3, r2
 800680a:	3308      	adds	r3, #8
 800680c:	781b      	ldrb	r3, [r3, #0]
 800680e:	73fb      	strb	r3, [r7, #15]

  // Disable non-control interrupt
  dwc2->daintmsk = (1 << DAINTMSK_OEPM_Pos) | (1 << DAINTMSK_IEPM_Pos);
 8006810:	693b      	ldr	r3, [r7, #16]
 8006812:	f04f 1201 	mov.w	r2, #65537	; 0x10001
 8006816:	f8c3 281c 	str.w	r2, [r3, #2076]	; 0x81c

  for (uint8_t n = 1; n < ep_count; n++) {
 800681a:	2301      	movs	r3, #1
 800681c:	75fb      	strb	r3, [r7, #23]
 800681e:	e01e      	b.n	800685e <dcd_edpt_close_all+0x72>
    // disable OUT endpoint
    dwc2->epout[n].doepctl = 0;
 8006820:	7dfb      	ldrb	r3, [r7, #23]
 8006822:	693a      	ldr	r2, [r7, #16]
 8006824:	3358      	adds	r3, #88	; 0x58
 8006826:	015b      	lsls	r3, r3, #5
 8006828:	4413      	add	r3, r2
 800682a:	2200      	movs	r2, #0
 800682c:	601a      	str	r2, [r3, #0]
    xfer_status[n][TUSB_DIR_OUT].max_size = 0;
 800682e:	7dfb      	ldrb	r3, [r7, #23]
 8006830:	4a12      	ldr	r2, [pc, #72]	; (800687c <dcd_edpt_close_all+0x90>)
 8006832:	015b      	lsls	r3, r3, #5
 8006834:	4413      	add	r3, r2
 8006836:	330a      	adds	r3, #10
 8006838:	2200      	movs	r2, #0
 800683a:	801a      	strh	r2, [r3, #0]

    // disable IN endpoint
    dwc2->epin[n].diepctl = 0;
 800683c:	7dfb      	ldrb	r3, [r7, #23]
 800683e:	693a      	ldr	r2, [r7, #16]
 8006840:	3348      	adds	r3, #72	; 0x48
 8006842:	015b      	lsls	r3, r3, #5
 8006844:	4413      	add	r3, r2
 8006846:	2200      	movs	r2, #0
 8006848:	601a      	str	r2, [r3, #0]
    xfer_status[n][TUSB_DIR_IN].max_size = 0;
 800684a:	7dfb      	ldrb	r3, [r7, #23]
 800684c:	4a0b      	ldr	r2, [pc, #44]	; (800687c <dcd_edpt_close_all+0x90>)
 800684e:	015b      	lsls	r3, r3, #5
 8006850:	4413      	add	r3, r2
 8006852:	331a      	adds	r3, #26
 8006854:	2200      	movs	r2, #0
 8006856:	801a      	strh	r2, [r3, #0]
  for (uint8_t n = 1; n < ep_count; n++) {
 8006858:	7dfb      	ldrb	r3, [r7, #23]
 800685a:	3301      	adds	r3, #1
 800685c:	75fb      	strb	r3, [r7, #23]
 800685e:	7dfa      	ldrb	r2, [r7, #23]
 8006860:	7bfb      	ldrb	r3, [r7, #15]
 8006862:	429a      	cmp	r2, r3
 8006864:	d3dc      	bcc.n	8006820 <dcd_edpt_close_all+0x34>
  }

  // reset allocated fifo IN
  _allocated_fifo_words_tx = 16;
 8006866:	4b06      	ldr	r3, [pc, #24]	; (8006880 <dcd_edpt_close_all+0x94>)
 8006868:	2210      	movs	r2, #16
 800686a:	801a      	strh	r2, [r3, #0]
}
 800686c:	bf00      	nop
 800686e:	371c      	adds	r7, #28
 8006870:	46bd      	mov	sp, r7
 8006872:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006876:	4770      	bx	lr
 8006878:	080101cc 	.word	0x080101cc
 800687c:	240012f0 	.word	0x240012f0
 8006880:	24001414 	.word	0x24001414

08006884 <dcd_edpt_xfer>:

bool dcd_edpt_xfer(uint8_t rhport, uint8_t ep_addr, uint8_t* buffer, uint16_t total_bytes) {
 8006884:	b590      	push	{r4, r7, lr}
 8006886:	b089      	sub	sp, #36	; 0x24
 8006888:	af02      	add	r7, sp, #8
 800688a:	603a      	str	r2, [r7, #0]
 800688c:	461a      	mov	r2, r3
 800688e:	4603      	mov	r3, r0
 8006890:	71fb      	strb	r3, [r7, #7]
 8006892:	460b      	mov	r3, r1
 8006894:	71bb      	strb	r3, [r7, #6]
 8006896:	4613      	mov	r3, r2
 8006898:	80bb      	strh	r3, [r7, #4]
 800689a:	79bb      	ldrb	r3, [r7, #6]
 800689c:	733b      	strb	r3, [r7, #12]
  return (uint8_t)(addr & (~TUSB_DIR_IN_MASK));
 800689e:	7b3b      	ldrb	r3, [r7, #12]
 80068a0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80068a4:	b2db      	uxtb	r3, r3
  uint8_t const epnum = tu_edpt_number(ep_addr);
 80068a6:	757b      	strb	r3, [r7, #21]
 80068a8:	79bb      	ldrb	r3, [r7, #6]
 80068aa:	737b      	strb	r3, [r7, #13]
  return (addr & TUSB_DIR_IN_MASK) ? TUSB_DIR_IN : TUSB_DIR_OUT;
 80068ac:	7b7b      	ldrb	r3, [r7, #13]
 80068ae:	09db      	lsrs	r3, r3, #7
 80068b0:	b2db      	uxtb	r3, r3
  uint8_t const dir = tu_edpt_dir(ep_addr);
 80068b2:	753b      	strb	r3, [r7, #20]

  xfer_ctl_t* xfer = XFER_CTL_BASE(epnum, dir);
 80068b4:	7d7a      	ldrb	r2, [r7, #21]
 80068b6:	7d3b      	ldrb	r3, [r7, #20]
 80068b8:	0052      	lsls	r2, r2, #1
 80068ba:	4413      	add	r3, r2
 80068bc:	011b      	lsls	r3, r3, #4
 80068be:	4a23      	ldr	r2, [pc, #140]	; (800694c <dcd_edpt_xfer+0xc8>)
 80068c0:	4413      	add	r3, r2
 80068c2:	613b      	str	r3, [r7, #16]
  xfer->buffer = buffer;
 80068c4:	693b      	ldr	r3, [r7, #16]
 80068c6:	683a      	ldr	r2, [r7, #0]
 80068c8:	601a      	str	r2, [r3, #0]
  xfer->ff = NULL;
 80068ca:	693b      	ldr	r3, [r7, #16]
 80068cc:	2200      	movs	r2, #0
 80068ce:	605a      	str	r2, [r3, #4]
  xfer->total_len = total_bytes;
 80068d0:	693b      	ldr	r3, [r7, #16]
 80068d2:	88ba      	ldrh	r2, [r7, #4]
 80068d4:	811a      	strh	r2, [r3, #8]

  // EP0 can only handle one packet
  if (epnum == 0) {
 80068d6:	7d7b      	ldrb	r3, [r7, #21]
 80068d8:	2b00      	cmp	r3, #0
 80068da:	d110      	bne.n	80068fe <dcd_edpt_xfer+0x7a>
    ep0_pending[dir] = total_bytes;
 80068dc:	7d3b      	ldrb	r3, [r7, #20]
 80068de:	491c      	ldr	r1, [pc, #112]	; (8006950 <dcd_edpt_xfer+0xcc>)
 80068e0:	88ba      	ldrh	r2, [r7, #4]
 80068e2:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]

    // Schedule the first transaction for EP0 transfer
    edpt_schedule_packets(rhport, epnum, dir, 1, ep0_pending[dir]);
 80068e6:	7d3b      	ldrb	r3, [r7, #20]
 80068e8:	4a19      	ldr	r2, [pc, #100]	; (8006950 <dcd_edpt_xfer+0xcc>)
 80068ea:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80068ee:	7d3a      	ldrb	r2, [r7, #20]
 80068f0:	7d79      	ldrb	r1, [r7, #21]
 80068f2:	79f8      	ldrb	r0, [r7, #7]
 80068f4:	9300      	str	r3, [sp, #0]
 80068f6:	2301      	movs	r3, #1
 80068f8:	f7ff fb0e 	bl	8005f18 <edpt_schedule_packets>
 80068fc:	e020      	b.n	8006940 <dcd_edpt_xfer+0xbc>
  } else {
    uint16_t num_packets = (total_bytes / xfer->max_size);
 80068fe:	693b      	ldr	r3, [r7, #16]
 8006900:	895b      	ldrh	r3, [r3, #10]
 8006902:	88ba      	ldrh	r2, [r7, #4]
 8006904:	fbb2 f3f3 	udiv	r3, r2, r3
 8006908:	82fb      	strh	r3, [r7, #22]
    uint16_t const short_packet_size = total_bytes % xfer->max_size;
 800690a:	693b      	ldr	r3, [r7, #16]
 800690c:	895a      	ldrh	r2, [r3, #10]
 800690e:	88bb      	ldrh	r3, [r7, #4]
 8006910:	fbb3 f1f2 	udiv	r1, r3, r2
 8006914:	fb01 f202 	mul.w	r2, r1, r2
 8006918:	1a9b      	subs	r3, r3, r2
 800691a:	81fb      	strh	r3, [r7, #14]

    // Zero-size packet is special case.
    if ((short_packet_size > 0) || (total_bytes == 0)) num_packets++;
 800691c:	89fb      	ldrh	r3, [r7, #14]
 800691e:	2b00      	cmp	r3, #0
 8006920:	d102      	bne.n	8006928 <dcd_edpt_xfer+0xa4>
 8006922:	88bb      	ldrh	r3, [r7, #4]
 8006924:	2b00      	cmp	r3, #0
 8006926:	d102      	bne.n	800692e <dcd_edpt_xfer+0xaa>
 8006928:	8afb      	ldrh	r3, [r7, #22]
 800692a:	3301      	adds	r3, #1
 800692c:	82fb      	strh	r3, [r7, #22]

    // Schedule packets to be sent within interrupt
    edpt_schedule_packets(rhport, epnum, dir, num_packets, total_bytes);
 800692e:	8afc      	ldrh	r4, [r7, #22]
 8006930:	7d3a      	ldrb	r2, [r7, #20]
 8006932:	7d79      	ldrb	r1, [r7, #21]
 8006934:	79f8      	ldrb	r0, [r7, #7]
 8006936:	88bb      	ldrh	r3, [r7, #4]
 8006938:	9300      	str	r3, [sp, #0]
 800693a:	4623      	mov	r3, r4
 800693c:	f7ff faec 	bl	8005f18 <edpt_schedule_packets>
  }

  return true;
 8006940:	2301      	movs	r3, #1
}
 8006942:	4618      	mov	r0, r3
 8006944:	371c      	adds	r7, #28
 8006946:	46bd      	mov	sp, r7
 8006948:	bd90      	pop	{r4, r7, pc}
 800694a:	bf00      	nop
 800694c:	240012f0 	.word	0x240012f0
 8006950:	24001410 	.word	0x24001410

08006954 <dcd_edpt_disable>:
  edpt_schedule_packets(rhport, epnum, dir, num_packets, total_bytes);

  return true;
}

static void dcd_edpt_disable(uint8_t rhport, uint8_t ep_addr, bool stall) {
 8006954:	b480      	push	{r7}
 8006956:	b089      	sub	sp, #36	; 0x24
 8006958:	af00      	add	r7, sp, #0
 800695a:	4603      	mov	r3, r0
 800695c:	71fb      	strb	r3, [r7, #7]
 800695e:	460b      	mov	r3, r1
 8006960:	71bb      	strb	r3, [r7, #6]
 8006962:	4613      	mov	r3, r2
 8006964:	717b      	strb	r3, [r7, #5]
  (void) rhport;

  dwc2_regs_t* dwc2 = DWC2_REG(rhport);
 8006966:	79fb      	ldrb	r3, [r7, #7]
 8006968:	4a6e      	ldr	r2, [pc, #440]	; (8006b24 <dcd_edpt_disable+0x1d0>)
 800696a:	011b      	lsls	r3, r3, #4
 800696c:	4413      	add	r3, r2
 800696e:	681b      	ldr	r3, [r3, #0]
 8006970:	61fb      	str	r3, [r7, #28]
 8006972:	79bb      	ldrb	r3, [r7, #6]
 8006974:	73bb      	strb	r3, [r7, #14]
  return (uint8_t)(addr & (~TUSB_DIR_IN_MASK));
 8006976:	7bbb      	ldrb	r3, [r7, #14]
 8006978:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800697c:	b2db      	uxtb	r3, r3

  uint8_t const epnum = tu_edpt_number(ep_addr);
 800697e:	76fb      	strb	r3, [r7, #27]
 8006980:	79bb      	ldrb	r3, [r7, #6]
 8006982:	73fb      	strb	r3, [r7, #15]
  return (addr & TUSB_DIR_IN_MASK) ? TUSB_DIR_IN : TUSB_DIR_OUT;
 8006984:	7bfb      	ldrb	r3, [r7, #15]
 8006986:	09db      	lsrs	r3, r3, #7
 8006988:	b2db      	uxtb	r3, r3
  uint8_t const dir = tu_edpt_dir(ep_addr);
 800698a:	76bb      	strb	r3, [r7, #26]

  if (dir == TUSB_DIR_IN) {
 800698c:	7ebb      	ldrb	r3, [r7, #26]
 800698e:	2b01      	cmp	r3, #1
 8006990:	d167      	bne.n	8006a62 <dcd_edpt_disable+0x10e>
    dwc2_epin_t* epin = dwc2->epin;
 8006992:	69fb      	ldr	r3, [r7, #28]
 8006994:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006998:	613b      	str	r3, [r7, #16]

    // Only disable currently enabled non-control endpoint
    if ((epnum == 0) || !(epin[epnum].diepctl & DIEPCTL_EPENA)) {
 800699a:	7efb      	ldrb	r3, [r7, #27]
 800699c:	2b00      	cmp	r3, #0
 800699e:	d006      	beq.n	80069ae <dcd_edpt_disable+0x5a>
 80069a0:	7efb      	ldrb	r3, [r7, #27]
 80069a2:	015b      	lsls	r3, r3, #5
 80069a4:	693a      	ldr	r2, [r7, #16]
 80069a6:	4413      	add	r3, r2
 80069a8:	681b      	ldr	r3, [r3, #0]
 80069aa:	2b00      	cmp	r3, #0
 80069ac:	db13      	blt.n	80069d6 <dcd_edpt_disable+0x82>
      epin[epnum].diepctl |= DIEPCTL_SNAK | (stall ? DIEPCTL_STALL : 0);
 80069ae:	7efb      	ldrb	r3, [r7, #27]
 80069b0:	015b      	lsls	r3, r3, #5
 80069b2:	693a      	ldr	r2, [r7, #16]
 80069b4:	4413      	add	r3, r2
 80069b6:	681a      	ldr	r2, [r3, #0]
 80069b8:	797b      	ldrb	r3, [r7, #5]
 80069ba:	2b00      	cmp	r3, #0
 80069bc:	d002      	beq.n	80069c4 <dcd_edpt_disable+0x70>
 80069be:	f04f 6102 	mov.w	r1, #136314880	; 0x8200000
 80069c2:	e001      	b.n	80069c8 <dcd_edpt_disable+0x74>
 80069c4:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
 80069c8:	7efb      	ldrb	r3, [r7, #27]
 80069ca:	015b      	lsls	r3, r3, #5
 80069cc:	6938      	ldr	r0, [r7, #16]
 80069ce:	4403      	add	r3, r0
 80069d0:	430a      	orrs	r2, r1
 80069d2:	601a      	str	r2, [r3, #0]
 80069d4:	e037      	b.n	8006a46 <dcd_edpt_disable+0xf2>
    } else {
      // Stop transmitting packets and NAK IN xfers.
      epin[epnum].diepctl |= DIEPCTL_SNAK;
 80069d6:	7efb      	ldrb	r3, [r7, #27]
 80069d8:	015b      	lsls	r3, r3, #5
 80069da:	693a      	ldr	r2, [r7, #16]
 80069dc:	4413      	add	r3, r2
 80069de:	681a      	ldr	r2, [r3, #0]
 80069e0:	7efb      	ldrb	r3, [r7, #27]
 80069e2:	015b      	lsls	r3, r3, #5
 80069e4:	6939      	ldr	r1, [r7, #16]
 80069e6:	440b      	add	r3, r1
 80069e8:	f042 6200 	orr.w	r2, r2, #134217728	; 0x8000000
 80069ec:	601a      	str	r2, [r3, #0]
      while ((epin[epnum].diepint & DIEPINT_INEPNE) == 0) {}
 80069ee:	bf00      	nop
 80069f0:	7efb      	ldrb	r3, [r7, #27]
 80069f2:	015b      	lsls	r3, r3, #5
 80069f4:	693a      	ldr	r2, [r7, #16]
 80069f6:	4413      	add	r3, r2
 80069f8:	689b      	ldr	r3, [r3, #8]
 80069fa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80069fe:	2b00      	cmp	r3, #0
 8006a00:	d0f6      	beq.n	80069f0 <dcd_edpt_disable+0x9c>

      // Disable the endpoint.
      epin[epnum].diepctl |= DIEPCTL_EPDIS | (stall ? DIEPCTL_STALL : 0);
 8006a02:	7efb      	ldrb	r3, [r7, #27]
 8006a04:	015b      	lsls	r3, r3, #5
 8006a06:	693a      	ldr	r2, [r7, #16]
 8006a08:	4413      	add	r3, r2
 8006a0a:	681a      	ldr	r2, [r3, #0]
 8006a0c:	797b      	ldrb	r3, [r7, #5]
 8006a0e:	2b00      	cmp	r3, #0
 8006a10:	d001      	beq.n	8006a16 <dcd_edpt_disable+0xc2>
 8006a12:	4945      	ldr	r1, [pc, #276]	; (8006b28 <dcd_edpt_disable+0x1d4>)
 8006a14:	e001      	b.n	8006a1a <dcd_edpt_disable+0xc6>
 8006a16:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8006a1a:	7efb      	ldrb	r3, [r7, #27]
 8006a1c:	015b      	lsls	r3, r3, #5
 8006a1e:	6938      	ldr	r0, [r7, #16]
 8006a20:	4403      	add	r3, r0
 8006a22:	430a      	orrs	r2, r1
 8006a24:	601a      	str	r2, [r3, #0]
      while ((epin[epnum].diepint & DIEPINT_EPDISD_Msk) == 0) {}
 8006a26:	bf00      	nop
 8006a28:	7efb      	ldrb	r3, [r7, #27]
 8006a2a:	015b      	lsls	r3, r3, #5
 8006a2c:	693a      	ldr	r2, [r7, #16]
 8006a2e:	4413      	add	r3, r2
 8006a30:	689b      	ldr	r3, [r3, #8]
 8006a32:	f003 0302 	and.w	r3, r3, #2
 8006a36:	2b00      	cmp	r3, #0
 8006a38:	d0f6      	beq.n	8006a28 <dcd_edpt_disable+0xd4>

      epin[epnum].diepint = DIEPINT_EPDISD;
 8006a3a:	7efb      	ldrb	r3, [r7, #27]
 8006a3c:	015b      	lsls	r3, r3, #5
 8006a3e:	693a      	ldr	r2, [r7, #16]
 8006a40:	4413      	add	r3, r2
 8006a42:	2202      	movs	r2, #2
 8006a44:	609a      	str	r2, [r3, #8]
    }

    // Flush the FIFO, and wait until we have confirmed it cleared.
    dwc2->grstctl = ((epnum << GRSTCTL_TXFNUM_Pos) | GRSTCTL_TXFFLSH);
 8006a46:	7efb      	ldrb	r3, [r7, #27]
 8006a48:	019b      	lsls	r3, r3, #6
 8006a4a:	f043 0220 	orr.w	r2, r3, #32
 8006a4e:	69fb      	ldr	r3, [r7, #28]
 8006a50:	611a      	str	r2, [r3, #16]
    while ((dwc2->grstctl & GRSTCTL_TXFFLSH_Msk) != 0) {}
 8006a52:	bf00      	nop
 8006a54:	69fb      	ldr	r3, [r7, #28]
 8006a56:	691b      	ldr	r3, [r3, #16]
 8006a58:	f003 0320 	and.w	r3, r3, #32
 8006a5c:	2b00      	cmp	r3, #0
 8006a5e:	d1f9      	bne.n	8006a54 <dcd_edpt_disable+0x100>

      // Allow other OUT endpoints to keep receiving.
      dwc2->dctl |= DCTL_CGONAK;
    }
  }
}
 8006a60:	e059      	b.n	8006b16 <dcd_edpt_disable+0x1c2>
    dwc2_epout_t* epout = dwc2->epout;
 8006a62:	69fb      	ldr	r3, [r7, #28]
 8006a64:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006a68:	617b      	str	r3, [r7, #20]
    if ((epnum == 0) || !(epout[epnum].doepctl & DOEPCTL_EPENA)) {
 8006a6a:	7efb      	ldrb	r3, [r7, #27]
 8006a6c:	2b00      	cmp	r3, #0
 8006a6e:	d006      	beq.n	8006a7e <dcd_edpt_disable+0x12a>
 8006a70:	7efb      	ldrb	r3, [r7, #27]
 8006a72:	015b      	lsls	r3, r3, #5
 8006a74:	697a      	ldr	r2, [r7, #20]
 8006a76:	4413      	add	r3, r2
 8006a78:	681b      	ldr	r3, [r3, #0]
 8006a7a:	2b00      	cmp	r3, #0
 8006a7c:	db12      	blt.n	8006aa4 <dcd_edpt_disable+0x150>
      epout[epnum].doepctl |= stall ? DOEPCTL_STALL : 0;
 8006a7e:	7efb      	ldrb	r3, [r7, #27]
 8006a80:	015b      	lsls	r3, r3, #5
 8006a82:	697a      	ldr	r2, [r7, #20]
 8006a84:	4413      	add	r3, r2
 8006a86:	681a      	ldr	r2, [r3, #0]
 8006a88:	797b      	ldrb	r3, [r7, #5]
 8006a8a:	2b00      	cmp	r3, #0
 8006a8c:	d002      	beq.n	8006a94 <dcd_edpt_disable+0x140>
 8006a8e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8006a92:	e000      	b.n	8006a96 <dcd_edpt_disable+0x142>
 8006a94:	2100      	movs	r1, #0
 8006a96:	7efb      	ldrb	r3, [r7, #27]
 8006a98:	015b      	lsls	r3, r3, #5
 8006a9a:	6978      	ldr	r0, [r7, #20]
 8006a9c:	4403      	add	r3, r0
 8006a9e:	430a      	orrs	r2, r1
 8006aa0:	601a      	str	r2, [r3, #0]
}
 8006aa2:	e038      	b.n	8006b16 <dcd_edpt_disable+0x1c2>
      dwc2->dctl |= DCTL_SGONAK;
 8006aa4:	69fb      	ldr	r3, [r7, #28]
 8006aa6:	f8d3 3804 	ldr.w	r3, [r3, #2052]	; 0x804
 8006aaa:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8006aae:	69fb      	ldr	r3, [r7, #28]
 8006ab0:	f8c3 2804 	str.w	r2, [r3, #2052]	; 0x804
      while ((dwc2->gintsts & GINTSTS_BOUTNAKEFF_Msk) == 0) {}
 8006ab4:	bf00      	nop
 8006ab6:	69fb      	ldr	r3, [r7, #28]
 8006ab8:	695b      	ldr	r3, [r3, #20]
 8006aba:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006abe:	2b00      	cmp	r3, #0
 8006ac0:	d0f9      	beq.n	8006ab6 <dcd_edpt_disable+0x162>
      epout[epnum].doepctl |= DOEPCTL_EPDIS | (stall ? DOEPCTL_STALL : 0);
 8006ac2:	7efb      	ldrb	r3, [r7, #27]
 8006ac4:	015b      	lsls	r3, r3, #5
 8006ac6:	697a      	ldr	r2, [r7, #20]
 8006ac8:	4413      	add	r3, r2
 8006aca:	681a      	ldr	r2, [r3, #0]
 8006acc:	797b      	ldrb	r3, [r7, #5]
 8006ace:	2b00      	cmp	r3, #0
 8006ad0:	d001      	beq.n	8006ad6 <dcd_edpt_disable+0x182>
 8006ad2:	4915      	ldr	r1, [pc, #84]	; (8006b28 <dcd_edpt_disable+0x1d4>)
 8006ad4:	e001      	b.n	8006ada <dcd_edpt_disable+0x186>
 8006ad6:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8006ada:	7efb      	ldrb	r3, [r7, #27]
 8006adc:	015b      	lsls	r3, r3, #5
 8006ade:	6978      	ldr	r0, [r7, #20]
 8006ae0:	4403      	add	r3, r0
 8006ae2:	430a      	orrs	r2, r1
 8006ae4:	601a      	str	r2, [r3, #0]
      while ((epout[epnum].doepint & DOEPINT_EPDISD_Msk) == 0) {}
 8006ae6:	bf00      	nop
 8006ae8:	7efb      	ldrb	r3, [r7, #27]
 8006aea:	015b      	lsls	r3, r3, #5
 8006aec:	697a      	ldr	r2, [r7, #20]
 8006aee:	4413      	add	r3, r2
 8006af0:	689b      	ldr	r3, [r3, #8]
 8006af2:	f003 0302 	and.w	r3, r3, #2
 8006af6:	2b00      	cmp	r3, #0
 8006af8:	d0f6      	beq.n	8006ae8 <dcd_edpt_disable+0x194>
      epout[epnum].doepint = DOEPINT_EPDISD;
 8006afa:	7efb      	ldrb	r3, [r7, #27]
 8006afc:	015b      	lsls	r3, r3, #5
 8006afe:	697a      	ldr	r2, [r7, #20]
 8006b00:	4413      	add	r3, r2
 8006b02:	2202      	movs	r2, #2
 8006b04:	609a      	str	r2, [r3, #8]
      dwc2->dctl |= DCTL_CGONAK;
 8006b06:	69fb      	ldr	r3, [r7, #28]
 8006b08:	f8d3 3804 	ldr.w	r3, [r3, #2052]	; 0x804
 8006b0c:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8006b10:	69fb      	ldr	r3, [r7, #28]
 8006b12:	f8c3 2804 	str.w	r2, [r3, #2052]	; 0x804
}
 8006b16:	bf00      	nop
 8006b18:	3724      	adds	r7, #36	; 0x24
 8006b1a:	46bd      	mov	sp, r7
 8006b1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b20:	4770      	bx	lr
 8006b22:	bf00      	nop
 8006b24:	080101cc 	.word	0x080101cc
 8006b28:	40200000 	.word	0x40200000

08006b2c <dcd_edpt_stall>:
  } else {
    _out_ep_closed = true;     // Set flag such that RX FIFO gets reduced in size once RX FIFO is empty
  }
}

void dcd_edpt_stall(uint8_t rhport, uint8_t ep_addr) {
 8006b2c:	b580      	push	{r7, lr}
 8006b2e:	b082      	sub	sp, #8
 8006b30:	af00      	add	r7, sp, #0
 8006b32:	4603      	mov	r3, r0
 8006b34:	460a      	mov	r2, r1
 8006b36:	71fb      	strb	r3, [r7, #7]
 8006b38:	4613      	mov	r3, r2
 8006b3a:	71bb      	strb	r3, [r7, #6]
  dcd_edpt_disable(rhport, ep_addr, true);
 8006b3c:	79b9      	ldrb	r1, [r7, #6]
 8006b3e:	79fb      	ldrb	r3, [r7, #7]
 8006b40:	2201      	movs	r2, #1
 8006b42:	4618      	mov	r0, r3
 8006b44:	f7ff ff06 	bl	8006954 <dcd_edpt_disable>
}
 8006b48:	bf00      	nop
 8006b4a:	3708      	adds	r7, #8
 8006b4c:	46bd      	mov	sp, r7
 8006b4e:	bd80      	pop	{r7, pc}

08006b50 <dcd_edpt_clear_stall>:

void dcd_edpt_clear_stall(uint8_t rhport, uint8_t ep_addr) {
 8006b50:	b480      	push	{r7}
 8006b52:	b085      	sub	sp, #20
 8006b54:	af00      	add	r7, sp, #0
 8006b56:	4603      	mov	r3, r0
 8006b58:	460a      	mov	r2, r1
 8006b5a:	71fb      	strb	r3, [r7, #7]
 8006b5c:	4613      	mov	r3, r2
 8006b5e:	71bb      	strb	r3, [r7, #6]
  (void) rhport;

  dwc2_regs_t* dwc2 = DWC2_REG(rhport);
 8006b60:	79fb      	ldrb	r3, [r7, #7]
 8006b62:	4a2a      	ldr	r2, [pc, #168]	; (8006c0c <dcd_edpt_clear_stall+0xbc>)
 8006b64:	011b      	lsls	r3, r3, #4
 8006b66:	4413      	add	r3, r2
 8006b68:	681b      	ldr	r3, [r3, #0]
 8006b6a:	60fb      	str	r3, [r7, #12]
 8006b6c:	79bb      	ldrb	r3, [r7, #6]
 8006b6e:	723b      	strb	r3, [r7, #8]
  return (uint8_t)(addr & (~TUSB_DIR_IN_MASK));
 8006b70:	7a3b      	ldrb	r3, [r7, #8]
 8006b72:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006b76:	b2db      	uxtb	r3, r3

  uint8_t const epnum = tu_edpt_number(ep_addr);
 8006b78:	72fb      	strb	r3, [r7, #11]
 8006b7a:	79bb      	ldrb	r3, [r7, #6]
 8006b7c:	727b      	strb	r3, [r7, #9]
  return (addr & TUSB_DIR_IN_MASK) ? TUSB_DIR_IN : TUSB_DIR_OUT;
 8006b7e:	7a7b      	ldrb	r3, [r7, #9]
 8006b80:	09db      	lsrs	r3, r3, #7
 8006b82:	b2db      	uxtb	r3, r3
  uint8_t const dir = tu_edpt_dir(ep_addr);
 8006b84:	72bb      	strb	r3, [r7, #10]

  // Clear stall and reset data toggle
  if (dir == TUSB_DIR_IN) {
 8006b86:	7abb      	ldrb	r3, [r7, #10]
 8006b88:	2b01      	cmp	r3, #1
 8006b8a:	d11c      	bne.n	8006bc6 <dcd_edpt_clear_stall+0x76>
    dwc2->epin[epnum].diepctl &= ~DIEPCTL_STALL;
 8006b8c:	7afb      	ldrb	r3, [r7, #11]
 8006b8e:	68fa      	ldr	r2, [r7, #12]
 8006b90:	3348      	adds	r3, #72	; 0x48
 8006b92:	015b      	lsls	r3, r3, #5
 8006b94:	4413      	add	r3, r2
 8006b96:	681a      	ldr	r2, [r3, #0]
 8006b98:	7afb      	ldrb	r3, [r7, #11]
 8006b9a:	f422 1200 	bic.w	r2, r2, #2097152	; 0x200000
 8006b9e:	68f9      	ldr	r1, [r7, #12]
 8006ba0:	3348      	adds	r3, #72	; 0x48
 8006ba2:	015b      	lsls	r3, r3, #5
 8006ba4:	440b      	add	r3, r1
 8006ba6:	601a      	str	r2, [r3, #0]
    dwc2->epin[epnum].diepctl |= DIEPCTL_SD0PID_SEVNFRM;
 8006ba8:	7afb      	ldrb	r3, [r7, #11]
 8006baa:	68fa      	ldr	r2, [r7, #12]
 8006bac:	3348      	adds	r3, #72	; 0x48
 8006bae:	015b      	lsls	r3, r3, #5
 8006bb0:	4413      	add	r3, r2
 8006bb2:	681a      	ldr	r2, [r3, #0]
 8006bb4:	7afb      	ldrb	r3, [r7, #11]
 8006bb6:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8006bba:	68f9      	ldr	r1, [r7, #12]
 8006bbc:	3348      	adds	r3, #72	; 0x48
 8006bbe:	015b      	lsls	r3, r3, #5
 8006bc0:	440b      	add	r3, r1
 8006bc2:	601a      	str	r2, [r3, #0]
  } else {
    dwc2->epout[epnum].doepctl &= ~DOEPCTL_STALL;
    dwc2->epout[epnum].doepctl |= DOEPCTL_SD0PID_SEVNFRM;
  }
}
 8006bc4:	e01b      	b.n	8006bfe <dcd_edpt_clear_stall+0xae>
    dwc2->epout[epnum].doepctl &= ~DOEPCTL_STALL;
 8006bc6:	7afb      	ldrb	r3, [r7, #11]
 8006bc8:	68fa      	ldr	r2, [r7, #12]
 8006bca:	3358      	adds	r3, #88	; 0x58
 8006bcc:	015b      	lsls	r3, r3, #5
 8006bce:	4413      	add	r3, r2
 8006bd0:	681a      	ldr	r2, [r3, #0]
 8006bd2:	7afb      	ldrb	r3, [r7, #11]
 8006bd4:	f422 1200 	bic.w	r2, r2, #2097152	; 0x200000
 8006bd8:	68f9      	ldr	r1, [r7, #12]
 8006bda:	3358      	adds	r3, #88	; 0x58
 8006bdc:	015b      	lsls	r3, r3, #5
 8006bde:	440b      	add	r3, r1
 8006be0:	601a      	str	r2, [r3, #0]
    dwc2->epout[epnum].doepctl |= DOEPCTL_SD0PID_SEVNFRM;
 8006be2:	7afb      	ldrb	r3, [r7, #11]
 8006be4:	68fa      	ldr	r2, [r7, #12]
 8006be6:	3358      	adds	r3, #88	; 0x58
 8006be8:	015b      	lsls	r3, r3, #5
 8006bea:	4413      	add	r3, r2
 8006bec:	681a      	ldr	r2, [r3, #0]
 8006bee:	7afb      	ldrb	r3, [r7, #11]
 8006bf0:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8006bf4:	68f9      	ldr	r1, [r7, #12]
 8006bf6:	3358      	adds	r3, #88	; 0x58
 8006bf8:	015b      	lsls	r3, r3, #5
 8006bfa:	440b      	add	r3, r1
 8006bfc:	601a      	str	r2, [r3, #0]
}
 8006bfe:	bf00      	nop
 8006c00:	3714      	adds	r7, #20
 8006c02:	46bd      	mov	sp, r7
 8006c04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c08:	4770      	bx	lr
 8006c0a:	bf00      	nop
 8006c0c:	080101cc 	.word	0x080101cc

08006c10 <read_fifo_packet>:

/*------------------------------------------------------------------*/

// Read a single data packet from receive FIFO
static void read_fifo_packet(uint8_t rhport, uint8_t* dst, uint16_t len) {
 8006c10:	b480      	push	{r7}
 8006c12:	b08d      	sub	sp, #52	; 0x34
 8006c14:	af00      	add	r7, sp, #0
 8006c16:	4603      	mov	r3, r0
 8006c18:	6039      	str	r1, [r7, #0]
 8006c1a:	71fb      	strb	r3, [r7, #7]
 8006c1c:	4613      	mov	r3, r2
 8006c1e:	80bb      	strh	r3, [r7, #4]
  (void) rhport;

  dwc2_regs_t* dwc2 = DWC2_REG(rhport);
 8006c20:	79fb      	ldrb	r3, [r7, #7]
 8006c22:	4a27      	ldr	r2, [pc, #156]	; (8006cc0 <read_fifo_packet+0xb0>)
 8006c24:	011b      	lsls	r3, r3, #4
 8006c26:	4413      	add	r3, r2
 8006c28:	681b      	ldr	r3, [r3, #0]
 8006c2a:	62bb      	str	r3, [r7, #40]	; 0x28
  volatile const uint32_t* rx_fifo = dwc2->fifo[0];
 8006c2c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006c2e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006c32:	627b      	str	r3, [r7, #36]	; 0x24

  // Reading full available 32 bit words from fifo
  uint16_t full_words = len >> 2;
 8006c34:	88bb      	ldrh	r3, [r7, #4]
 8006c36:	089b      	lsrs	r3, r3, #2
 8006c38:	85fb      	strh	r3, [r7, #46]	; 0x2e
  while (full_words--) {
 8006c3a:	e00b      	b.n	8006c54 <read_fifo_packet+0x44>
    tu_unaligned_write32(dst, *rx_fifo);
 8006c3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c3e:	681b      	ldr	r3, [r3, #0]
 8006c40:	683a      	ldr	r2, [r7, #0]
 8006c42:	61ba      	str	r2, [r7, #24]
 8006c44:	617b      	str	r3, [r7, #20]
  *((uint32_t *) mem) = value;
 8006c46:	69bb      	ldr	r3, [r7, #24]
 8006c48:	697a      	ldr	r2, [r7, #20]
 8006c4a:	601a      	str	r2, [r3, #0]
}
 8006c4c:	bf00      	nop
    dst += 4;
 8006c4e:	683b      	ldr	r3, [r7, #0]
 8006c50:	3304      	adds	r3, #4
 8006c52:	603b      	str	r3, [r7, #0]
  while (full_words--) {
 8006c54:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8006c56:	1e5a      	subs	r2, r3, #1
 8006c58:	85fa      	strh	r2, [r7, #46]	; 0x2e
 8006c5a:	2b00      	cmp	r3, #0
 8006c5c:	d1ee      	bne.n	8006c3c <read_fifo_packet+0x2c>
  }

  // Read the remaining 1-3 bytes from fifo
  uint8_t const bytes_rem = len & 0x03;
 8006c5e:	88bb      	ldrh	r3, [r7, #4]
 8006c60:	b2db      	uxtb	r3, r3
 8006c62:	f003 0303 	and.w	r3, r3, #3
 8006c66:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  if (bytes_rem != 0) {
 8006c6a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8006c6e:	2b00      	cmp	r3, #0
 8006c70:	d020      	beq.n	8006cb4 <read_fifo_packet+0xa4>
    uint32_t const tmp = *rx_fifo;
 8006c72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c74:	681b      	ldr	r3, [r3, #0]
 8006c76:	61fb      	str	r3, [r7, #28]
 8006c78:	69fb      	ldr	r3, [r7, #28]
 8006c7a:	613b      	str	r3, [r7, #16]
TU_ATTR_ALWAYS_INLINE static inline uint8_t tu_u32_byte0(uint32_t ui32) { return TU_U32_BYTE0(ui32); }
 8006c7c:	693b      	ldr	r3, [r7, #16]
 8006c7e:	b2da      	uxtb	r2, r3
    dst[0] = tu_u32_byte0(tmp);
 8006c80:	683b      	ldr	r3, [r7, #0]
 8006c82:	701a      	strb	r2, [r3, #0]
    if (bytes_rem > 1) dst[1] = tu_u32_byte1(tmp);
 8006c84:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8006c88:	2b01      	cmp	r3, #1
 8006c8a:	d907      	bls.n	8006c9c <read_fifo_packet+0x8c>
 8006c8c:	683b      	ldr	r3, [r7, #0]
 8006c8e:	3301      	adds	r3, #1
 8006c90:	69fa      	ldr	r2, [r7, #28]
 8006c92:	60fa      	str	r2, [r7, #12]
TU_ATTR_ALWAYS_INLINE static inline uint8_t tu_u32_byte1(uint32_t ui32) { return TU_U32_BYTE1(ui32); }
 8006c94:	68fa      	ldr	r2, [r7, #12]
 8006c96:	0a12      	lsrs	r2, r2, #8
 8006c98:	b2d2      	uxtb	r2, r2
 8006c9a:	701a      	strb	r2, [r3, #0]
    if (bytes_rem > 2) dst[2] = tu_u32_byte2(tmp);
 8006c9c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8006ca0:	2b02      	cmp	r3, #2
 8006ca2:	d907      	bls.n	8006cb4 <read_fifo_packet+0xa4>
 8006ca4:	683b      	ldr	r3, [r7, #0]
 8006ca6:	3302      	adds	r3, #2
 8006ca8:	69fa      	ldr	r2, [r7, #28]
 8006caa:	60ba      	str	r2, [r7, #8]
TU_ATTR_ALWAYS_INLINE static inline uint8_t tu_u32_byte2(uint32_t ui32) { return TU_U32_BYTE2(ui32); }
 8006cac:	68ba      	ldr	r2, [r7, #8]
 8006cae:	0c12      	lsrs	r2, r2, #16
 8006cb0:	b2d2      	uxtb	r2, r2
 8006cb2:	701a      	strb	r2, [r3, #0]
  }
}
 8006cb4:	bf00      	nop
 8006cb6:	3734      	adds	r7, #52	; 0x34
 8006cb8:	46bd      	mov	sp, r7
 8006cba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cbe:	4770      	bx	lr
 8006cc0:	080101cc 	.word	0x080101cc

08006cc4 <write_fifo_packet>:

// Write a single data packet to EPIN FIFO
static void write_fifo_packet(uint8_t rhport, uint8_t fifo_num, uint8_t const* src, uint16_t len) {
 8006cc4:	b480      	push	{r7}
 8006cc6:	b089      	sub	sp, #36	; 0x24
 8006cc8:	af00      	add	r7, sp, #0
 8006cca:	603a      	str	r2, [r7, #0]
 8006ccc:	461a      	mov	r2, r3
 8006cce:	4603      	mov	r3, r0
 8006cd0:	71fb      	strb	r3, [r7, #7]
 8006cd2:	460b      	mov	r3, r1
 8006cd4:	71bb      	strb	r3, [r7, #6]
 8006cd6:	4613      	mov	r3, r2
 8006cd8:	80bb      	strh	r3, [r7, #4]
  (void) rhport;

  dwc2_regs_t* dwc2 = DWC2_REG(rhport);
 8006cda:	79fb      	ldrb	r3, [r7, #7]
 8006cdc:	4a23      	ldr	r2, [pc, #140]	; (8006d6c <write_fifo_packet+0xa8>)
 8006cde:	011b      	lsls	r3, r3, #4
 8006ce0:	4413      	add	r3, r2
 8006ce2:	681b      	ldr	r3, [r3, #0]
 8006ce4:	617b      	str	r3, [r7, #20]
  volatile uint32_t* tx_fifo = dwc2->fifo[fifo_num];
 8006ce6:	79bb      	ldrb	r3, [r7, #6]
 8006ce8:	3301      	adds	r3, #1
 8006cea:	031b      	lsls	r3, r3, #12
 8006cec:	697a      	ldr	r2, [r7, #20]
 8006cee:	4413      	add	r3, r2
 8006cf0:	613b      	str	r3, [r7, #16]

  // Pushing full available 32 bit words to fifo
  uint16_t full_words = len >> 2;
 8006cf2:	88bb      	ldrh	r3, [r7, #4]
 8006cf4:	089b      	lsrs	r3, r3, #2
 8006cf6:	83fb      	strh	r3, [r7, #30]
  while (full_words--) {
 8006cf8:	e008      	b.n	8006d0c <write_fifo_packet+0x48>
 8006cfa:	683b      	ldr	r3, [r7, #0]
 8006cfc:	60bb      	str	r3, [r7, #8]
  return *((uint32_t const *) mem);
 8006cfe:	68bb      	ldr	r3, [r7, #8]
 8006d00:	681a      	ldr	r2, [r3, #0]
    *tx_fifo = tu_unaligned_read32(src);
 8006d02:	693b      	ldr	r3, [r7, #16]
 8006d04:	601a      	str	r2, [r3, #0]
    src += 4;
 8006d06:	683b      	ldr	r3, [r7, #0]
 8006d08:	3304      	adds	r3, #4
 8006d0a:	603b      	str	r3, [r7, #0]
  while (full_words--) {
 8006d0c:	8bfb      	ldrh	r3, [r7, #30]
 8006d0e:	1e5a      	subs	r2, r3, #1
 8006d10:	83fa      	strh	r2, [r7, #30]
 8006d12:	2b00      	cmp	r3, #0
 8006d14:	d1f1      	bne.n	8006cfa <write_fifo_packet+0x36>
  }

  // Write the remaining 1-3 bytes into fifo
  uint8_t const bytes_rem = len & 0x03;
 8006d16:	88bb      	ldrh	r3, [r7, #4]
 8006d18:	b2db      	uxtb	r3, r3
 8006d1a:	f003 0303 	and.w	r3, r3, #3
 8006d1e:	73fb      	strb	r3, [r7, #15]
  if (bytes_rem) {
 8006d20:	7bfb      	ldrb	r3, [r7, #15]
 8006d22:	2b00      	cmp	r3, #0
 8006d24:	d01b      	beq.n	8006d5e <write_fifo_packet+0x9a>
    uint32_t tmp_word = src[0];
 8006d26:	683b      	ldr	r3, [r7, #0]
 8006d28:	781b      	ldrb	r3, [r3, #0]
 8006d2a:	61bb      	str	r3, [r7, #24]
    if (bytes_rem > 1) tmp_word |= (src[1] << 8);
 8006d2c:	7bfb      	ldrb	r3, [r7, #15]
 8006d2e:	2b01      	cmp	r3, #1
 8006d30:	d907      	bls.n	8006d42 <write_fifo_packet+0x7e>
 8006d32:	683b      	ldr	r3, [r7, #0]
 8006d34:	3301      	adds	r3, #1
 8006d36:	781b      	ldrb	r3, [r3, #0]
 8006d38:	021b      	lsls	r3, r3, #8
 8006d3a:	461a      	mov	r2, r3
 8006d3c:	69bb      	ldr	r3, [r7, #24]
 8006d3e:	4313      	orrs	r3, r2
 8006d40:	61bb      	str	r3, [r7, #24]
    if (bytes_rem > 2) tmp_word |= (src[2] << 16);
 8006d42:	7bfb      	ldrb	r3, [r7, #15]
 8006d44:	2b02      	cmp	r3, #2
 8006d46:	d907      	bls.n	8006d58 <write_fifo_packet+0x94>
 8006d48:	683b      	ldr	r3, [r7, #0]
 8006d4a:	3302      	adds	r3, #2
 8006d4c:	781b      	ldrb	r3, [r3, #0]
 8006d4e:	041b      	lsls	r3, r3, #16
 8006d50:	461a      	mov	r2, r3
 8006d52:	69bb      	ldr	r3, [r7, #24]
 8006d54:	4313      	orrs	r3, r2
 8006d56:	61bb      	str	r3, [r7, #24]

    *tx_fifo = tmp_word;
 8006d58:	693b      	ldr	r3, [r7, #16]
 8006d5a:	69ba      	ldr	r2, [r7, #24]
 8006d5c:	601a      	str	r2, [r3, #0]
  }
}
 8006d5e:	bf00      	nop
 8006d60:	3724      	adds	r7, #36	; 0x24
 8006d62:	46bd      	mov	sp, r7
 8006d64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d68:	4770      	bx	lr
 8006d6a:	bf00      	nop
 8006d6c:	080101cc 	.word	0x080101cc

08006d70 <handle_rxflvl_irq>:

static void handle_rxflvl_irq(uint8_t rhport) {
 8006d70:	b580      	push	{r7, lr}
 8006d72:	b08c      	sub	sp, #48	; 0x30
 8006d74:	af00      	add	r7, sp, #0
 8006d76:	4603      	mov	r3, r0
 8006d78:	71fb      	strb	r3, [r7, #7]
  dwc2_regs_t* dwc2 = DWC2_REG(rhport);
 8006d7a:	79fb      	ldrb	r3, [r7, #7]
 8006d7c:	4a5d      	ldr	r2, [pc, #372]	; (8006ef4 <handle_rxflvl_irq+0x184>)
 8006d7e:	011b      	lsls	r3, r3, #4
 8006d80:	4413      	add	r3, r2
 8006d82:	681b      	ldr	r3, [r3, #0]
 8006d84:	62bb      	str	r3, [r7, #40]	; 0x28
  volatile uint32_t const* rx_fifo = dwc2->fifo[0];
 8006d86:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006d88:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006d8c:	627b      	str	r3, [r7, #36]	; 0x24

  // Pop control word off FIFO
  uint32_t const ctl_word = dwc2->grxstsp;
 8006d8e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006d90:	6a1b      	ldr	r3, [r3, #32]
 8006d92:	623b      	str	r3, [r7, #32]
  uint8_t const pktsts = (ctl_word & GRXSTSP_PKTSTS_Msk) >> GRXSTSP_PKTSTS_Pos;
 8006d94:	6a3b      	ldr	r3, [r7, #32]
 8006d96:	0c5b      	lsrs	r3, r3, #17
 8006d98:	b2db      	uxtb	r3, r3
 8006d9a:	f003 030f 	and.w	r3, r3, #15
 8006d9e:	77fb      	strb	r3, [r7, #31]
  uint8_t const epnum = (ctl_word & GRXSTSP_EPNUM_Msk) >> GRXSTSP_EPNUM_Pos;
 8006da0:	6a3b      	ldr	r3, [r7, #32]
 8006da2:	b2db      	uxtb	r3, r3
 8006da4:	f003 030f 	and.w	r3, r3, #15
 8006da8:	77bb      	strb	r3, [r7, #30]
  uint16_t const bcnt = (ctl_word & GRXSTSP_BCNT_Msk) >> GRXSTSP_BCNT_Pos;
 8006daa:	6a3b      	ldr	r3, [r7, #32]
 8006dac:	091b      	lsrs	r3, r3, #4
 8006dae:	b29b      	uxth	r3, r3
 8006db0:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8006db4:	83bb      	strh	r3, [r7, #28]

  dwc2_epout_t* epout = &dwc2->epout[epnum];
 8006db6:	7fbb      	ldrb	r3, [r7, #30]
 8006db8:	3358      	adds	r3, #88	; 0x58
 8006dba:	015b      	lsls	r3, r3, #5
 8006dbc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006dbe:	4413      	add	r3, r2
 8006dc0:	61bb      	str	r3, [r7, #24]
//  TU_LOG_LOCATION();
//  TU_LOG(DWC2_DEBUG, "  EP %02X, Byte Count %u, %s\r\n", epnum, bcnt, pktsts_str[pktsts]);
//  TU_LOG(DWC2_DEBUG, "  daint = %08lX, doepint = %04X\r\n", (unsigned long) dwc2->daint, (unsigned int) epout->doepint);
//#endif

  switch (pktsts) {
 8006dc2:	7ffb      	ldrb	r3, [r7, #31]
 8006dc4:	3b01      	subs	r3, #1
 8006dc6:	2b05      	cmp	r3, #5
 8006dc8:	d87e      	bhi.n	8006ec8 <handle_rxflvl_irq+0x158>
 8006dca:	a201      	add	r2, pc, #4	; (adr r2, 8006dd0 <handle_rxflvl_irq+0x60>)
 8006dcc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006dd0:	08006edd 	.word	0x08006edd
 8006dd4:	08006e09 	.word	0x08006e09
 8006dd8:	08006e83 	.word	0x08006e83
 8006ddc:	08006dfb 	.word	0x08006dfb
 8006de0:	08006ec9 	.word	0x08006ec9
 8006de4:	08006de9 	.word	0x08006de9
    case GRXSTS_PKTSTS_SETUPRX:
      // Setup packet received

      // We can receive up to three setup packets in succession, but
      // only the last one is valid.
      _setup_packet[0] = (*rx_fifo);
 8006de8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006dea:	681b      	ldr	r3, [r3, #0]
 8006dec:	4a42      	ldr	r2, [pc, #264]	; (8006ef8 <handle_rxflvl_irq+0x188>)
 8006dee:	6013      	str	r3, [r2, #0]
      _setup_packet[1] = (*rx_fifo);
 8006df0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006df2:	681b      	ldr	r3, [r3, #0]
 8006df4:	4a40      	ldr	r2, [pc, #256]	; (8006ef8 <handle_rxflvl_irq+0x188>)
 8006df6:	6053      	str	r3, [r2, #4]
      break;
 8006df8:	e077      	b.n	8006eea <handle_rxflvl_irq+0x17a>

    case GRXSTS_PKTSTS_SETUPDONE:
      // Setup packet done (Interrupt)
      epout->doeptsiz |= (3 << DOEPTSIZ_STUPCNT_Pos);
 8006dfa:	69bb      	ldr	r3, [r7, #24]
 8006dfc:	691b      	ldr	r3, [r3, #16]
 8006dfe:	f043 42c0 	orr.w	r2, r3, #1610612736	; 0x60000000
 8006e02:	69bb      	ldr	r3, [r7, #24]
 8006e04:	611a      	str	r2, [r3, #16]
      break;
 8006e06:	e070      	b.n	8006eea <handle_rxflvl_irq+0x17a>

    case GRXSTS_PKTSTS_OUTRX: {
      // Out packet received
      xfer_ctl_t* xfer = XFER_CTL_BASE(epnum, TUSB_DIR_OUT);
 8006e08:	7fbb      	ldrb	r3, [r7, #30]
 8006e0a:	015b      	lsls	r3, r3, #5
 8006e0c:	4a3b      	ldr	r2, [pc, #236]	; (8006efc <handle_rxflvl_irq+0x18c>)
 8006e0e:	4413      	add	r3, r2
 8006e10:	613b      	str	r3, [r7, #16]

      // Read packet off RxFIFO
      if (xfer->ff) {
 8006e12:	693b      	ldr	r3, [r7, #16]
 8006e14:	685b      	ldr	r3, [r3, #4]
 8006e16:	2b00      	cmp	r3, #0
 8006e18:	d007      	beq.n	8006e2a <handle_rxflvl_irq+0xba>
        // Ring buffer
        tu_fifo_write_n_const_addr_full_words(xfer->ff, (const void*) (uintptr_t) rx_fifo, bcnt);
 8006e1a:	693b      	ldr	r3, [r7, #16]
 8006e1c:	685b      	ldr	r3, [r3, #4]
 8006e1e:	8bba      	ldrh	r2, [r7, #28]
 8006e20:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8006e22:	4618      	mov	r0, r3
 8006e24:	f7fd f85c 	bl	8003ee0 <tu_fifo_write_n_const_addr_full_words>
 8006e28:	e00c      	b.n	8006e44 <handle_rxflvl_irq+0xd4>
      } else {
        // Linear buffer
        read_fifo_packet(rhport, xfer->buffer, bcnt);
 8006e2a:	693b      	ldr	r3, [r7, #16]
 8006e2c:	6819      	ldr	r1, [r3, #0]
 8006e2e:	8bba      	ldrh	r2, [r7, #28]
 8006e30:	79fb      	ldrb	r3, [r7, #7]
 8006e32:	4618      	mov	r0, r3
 8006e34:	f7ff feec 	bl	8006c10 <read_fifo_packet>

        // Increment pointer to xfer data
        xfer->buffer += bcnt;
 8006e38:	693b      	ldr	r3, [r7, #16]
 8006e3a:	681a      	ldr	r2, [r3, #0]
 8006e3c:	8bbb      	ldrh	r3, [r7, #28]
 8006e3e:	441a      	add	r2, r3
 8006e40:	693b      	ldr	r3, [r7, #16]
 8006e42:	601a      	str	r2, [r3, #0]
      }

      // Truncate transfer length in case of short packet
      if (bcnt < xfer->max_size) {
 8006e44:	693b      	ldr	r3, [r7, #16]
 8006e46:	895b      	ldrh	r3, [r3, #10]
 8006e48:	8bba      	ldrh	r2, [r7, #28]
 8006e4a:	429a      	cmp	r2, r3
 8006e4c:	d248      	bcs.n	8006ee0 <handle_rxflvl_irq+0x170>
        xfer->total_len -= (epout->doeptsiz & DOEPTSIZ_XFRSIZ_Msk) >> DOEPTSIZ_XFRSIZ_Pos;
 8006e4e:	69bb      	ldr	r3, [r7, #24]
 8006e50:	691b      	ldr	r3, [r3, #16]
 8006e52:	f3c3 0112 	ubfx	r1, r3, #0, #19
 8006e56:	693b      	ldr	r3, [r7, #16]
 8006e58:	891a      	ldrh	r2, [r3, #8]
 8006e5a:	b28b      	uxth	r3, r1
 8006e5c:	1ad3      	subs	r3, r2, r3
 8006e5e:	b29a      	uxth	r2, r3
 8006e60:	693b      	ldr	r3, [r7, #16]
 8006e62:	811a      	strh	r2, [r3, #8]
        if (epnum == 0) {
 8006e64:	7fbb      	ldrb	r3, [r7, #30]
 8006e66:	2b00      	cmp	r3, #0
 8006e68:	d13a      	bne.n	8006ee0 <handle_rxflvl_irq+0x170>
          xfer->total_len -= ep0_pending[TUSB_DIR_OUT];
 8006e6a:	693b      	ldr	r3, [r7, #16]
 8006e6c:	891a      	ldrh	r2, [r3, #8]
 8006e6e:	4b24      	ldr	r3, [pc, #144]	; (8006f00 <handle_rxflvl_irq+0x190>)
 8006e70:	881b      	ldrh	r3, [r3, #0]
 8006e72:	1ad3      	subs	r3, r2, r3
 8006e74:	b29a      	uxth	r2, r3
 8006e76:	693b      	ldr	r3, [r7, #16]
 8006e78:	811a      	strh	r2, [r3, #8]
          ep0_pending[TUSB_DIR_OUT] = 0;
 8006e7a:	4b21      	ldr	r3, [pc, #132]	; (8006f00 <handle_rxflvl_irq+0x190>)
 8006e7c:	2200      	movs	r2, #0
 8006e7e:	801a      	strh	r2, [r3, #0]
        }
      }
    }
      break;
 8006e80:	e02e      	b.n	8006ee0 <handle_rxflvl_irq+0x170>
      // Occurred on STM32L47 with dwc2 version 3.10a but not found on other version like 2.80a or 3.30a
      // May (or not) be 3.10a specific feature/bug or depending on MCU configuration
      // XFRC complete is additionally generated when
      // - setup packet is received
      // - complete the data stage of control write is complete
      if ((epnum == 0) && (bcnt == 0) && (dwc2->gsnpsid >= DWC2_CORE_REV_3_00a)) {
 8006e82:	7fbb      	ldrb	r3, [r7, #30]
 8006e84:	2b00      	cmp	r3, #0
 8006e86:	d12d      	bne.n	8006ee4 <handle_rxflvl_irq+0x174>
 8006e88:	8bbb      	ldrh	r3, [r7, #28]
 8006e8a:	2b00      	cmp	r3, #0
 8006e8c:	d12a      	bne.n	8006ee4 <handle_rxflvl_irq+0x174>
 8006e8e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006e90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006e92:	4a1c      	ldr	r2, [pc, #112]	; (8006f04 <handle_rxflvl_irq+0x194>)
 8006e94:	4293      	cmp	r3, r2
 8006e96:	d925      	bls.n	8006ee4 <handle_rxflvl_irq+0x174>
        uint32_t doepint = epout->doepint;
 8006e98:	69bb      	ldr	r3, [r7, #24]
 8006e9a:	689b      	ldr	r3, [r3, #8]
 8006e9c:	617b      	str	r3, [r7, #20]

        if (doepint & (DOEPINT_STPKTRX | DOEPINT_OTEPSPR)) {
 8006e9e:	697a      	ldr	r2, [r7, #20]
 8006ea0:	f248 0320 	movw	r3, #32800	; 0x8020
 8006ea4:	4013      	ands	r3, r2
 8006ea6:	2b00      	cmp	r3, #0
 8006ea8:	d01c      	beq.n	8006ee4 <handle_rxflvl_irq+0x174>
          // skip this "no-data" transfer complete event
          // Note: STPKTRX will be clear later by setup received handler
          uint32_t clear_flags = DOEPINT_XFRC;
 8006eaa:	2301      	movs	r3, #1
 8006eac:	62fb      	str	r3, [r7, #44]	; 0x2c

          if (doepint & DOEPINT_OTEPSPR) clear_flags |= DOEPINT_OTEPSPR;
 8006eae:	697b      	ldr	r3, [r7, #20]
 8006eb0:	f003 0320 	and.w	r3, r3, #32
 8006eb4:	2b00      	cmp	r3, #0
 8006eb6:	d003      	beq.n	8006ec0 <handle_rxflvl_irq+0x150>
 8006eb8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006eba:	f043 0320 	orr.w	r3, r3, #32
 8006ebe:	62fb      	str	r3, [r7, #44]	; 0x2c

          epout->doepint = clear_flags;
 8006ec0:	69bb      	ldr	r3, [r7, #24]
 8006ec2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006ec4:	609a      	str	r2, [r3, #8]

          // TU_LOG(DWC2_DEBUG, "  FIX extra transfer complete on setup/data compete\r\n");
        }
      }
      break;
 8006ec6:	e00d      	b.n	8006ee4 <handle_rxflvl_irq+0x174>

    default:    // Invalid
      TU_BREAKPOINT();
 8006ec8:	4b0f      	ldr	r3, [pc, #60]	; (8006f08 <handle_rxflvl_irq+0x198>)
 8006eca:	60fb      	str	r3, [r7, #12]
 8006ecc:	68fb      	ldr	r3, [r7, #12]
 8006ece:	681b      	ldr	r3, [r3, #0]
 8006ed0:	f003 0301 	and.w	r3, r3, #1
 8006ed4:	2b00      	cmp	r3, #0
 8006ed6:	d007      	beq.n	8006ee8 <handle_rxflvl_irq+0x178>
 8006ed8:	be00      	bkpt	0x0000
      break;
 8006eda:	e005      	b.n	8006ee8 <handle_rxflvl_irq+0x178>
      break;
 8006edc:	bf00      	nop
 8006ede:	e004      	b.n	8006eea <handle_rxflvl_irq+0x17a>
      break;
 8006ee0:	bf00      	nop
 8006ee2:	e002      	b.n	8006eea <handle_rxflvl_irq+0x17a>
      break;
 8006ee4:	bf00      	nop
 8006ee6:	e000      	b.n	8006eea <handle_rxflvl_irq+0x17a>
      break;
 8006ee8:	bf00      	nop
  }
}
 8006eea:	bf00      	nop
 8006eec:	3730      	adds	r7, #48	; 0x30
 8006eee:	46bd      	mov	sp, r7
 8006ef0:	bd80      	pop	{r7, pc}
 8006ef2:	bf00      	nop
 8006ef4:	080101cc 	.word	0x080101cc
 8006ef8:	240012e8 	.word	0x240012e8
 8006efc:	240012f0 	.word	0x240012f0
 8006f00:	24001410 	.word	0x24001410
 8006f04:	4f543009 	.word	0x4f543009
 8006f08:	e000edf0 	.word	0xe000edf0

08006f0c <handle_epout_irq>:

static void handle_epout_irq(uint8_t rhport) {
 8006f0c:	b580      	push	{r7, lr}
 8006f0e:	b096      	sub	sp, #88	; 0x58
 8006f10:	af02      	add	r7, sp, #8
 8006f12:	4603      	mov	r3, r0
 8006f14:	71fb      	strb	r3, [r7, #7]
  dwc2_regs_t* dwc2 = DWC2_REG(rhport);
 8006f16:	79fb      	ldrb	r3, [r7, #7]
 8006f18:	4a60      	ldr	r2, [pc, #384]	; (800709c <handle_epout_irq+0x190>)
 8006f1a:	011b      	lsls	r3, r3, #4
 8006f1c:	4413      	add	r3, r2
 8006f1e:	681b      	ldr	r3, [r3, #0]
 8006f20:	647b      	str	r3, [r7, #68]	; 0x44
  uint8_t const ep_count = _dwc2_controller[rhport].ep_count;
 8006f22:	79fb      	ldrb	r3, [r7, #7]
 8006f24:	4a5d      	ldr	r2, [pc, #372]	; (800709c <handle_epout_irq+0x190>)
 8006f26:	011b      	lsls	r3, r3, #4
 8006f28:	4413      	add	r3, r2
 8006f2a:	3308      	adds	r3, #8
 8006f2c:	781b      	ldrb	r3, [r3, #0]
 8006f2e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

  // DAINT for a given EP clears when DOEPINTx is cleared.
  // OEPINT will be cleared when DAINT's out bits are cleared.
  for (uint8_t n = 0; n < ep_count; n++) {
 8006f32:	2300      	movs	r3, #0
 8006f34:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
 8006f38:	e0a4      	b.n	8007084 <handle_epout_irq+0x178>
    if (dwc2->daint & TU_BIT(DAINT_OEPINT_Pos + n)) {
 8006f3a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006f3c:	f8d3 2818 	ldr.w	r2, [r3, #2072]	; 0x818
 8006f40:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8006f44:	3310      	adds	r3, #16
 8006f46:	fa22 f303 	lsr.w	r3, r2, r3
 8006f4a:	f003 0301 	and.w	r3, r3, #1
 8006f4e:	2b00      	cmp	r3, #0
 8006f50:	f000 8093 	beq.w	800707a <handle_epout_irq+0x16e>
      dwc2_epout_t* epout = &dwc2->epout[n];
 8006f54:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8006f58:	3358      	adds	r3, #88	; 0x58
 8006f5a:	015b      	lsls	r3, r3, #5
 8006f5c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006f5e:	4413      	add	r3, r2
 8006f60:	63fb      	str	r3, [r7, #60]	; 0x3c

      uint32_t const doepint = epout->doepint;
 8006f62:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006f64:	689b      	ldr	r3, [r3, #8]
 8006f66:	63bb      	str	r3, [r7, #56]	; 0x38

      // SETUP packet Setup Phase done.
      if (doepint & DOEPINT_STUP) {
 8006f68:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006f6a:	f003 0308 	and.w	r3, r3, #8
 8006f6e:	2b00      	cmp	r3, #0
 8006f70:	d034      	beq.n	8006fdc <handle_epout_irq+0xd0>
        uint32_t clear_flag = DOEPINT_STUP;
 8006f72:	2308      	movs	r3, #8
 8006f74:	64bb      	str	r3, [r7, #72]	; 0x48

        // STPKTRX is only available for version from 3_00a
        if ((doepint & DOEPINT_STPKTRX) && (dwc2->gsnpsid >= DWC2_CORE_REV_3_00a)) {
 8006f76:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006f78:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006f7c:	2b00      	cmp	r3, #0
 8006f7e:	d008      	beq.n	8006f92 <handle_epout_irq+0x86>
 8006f80:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006f82:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006f84:	4a46      	ldr	r2, [pc, #280]	; (80070a0 <handle_epout_irq+0x194>)
 8006f86:	4293      	cmp	r3, r2
 8006f88:	d903      	bls.n	8006f92 <handle_epout_irq+0x86>
          clear_flag |= DOEPINT_STPKTRX;
 8006f8a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006f8c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006f90:	64bb      	str	r3, [r7, #72]	; 0x48
        }

        epout->doepint = clear_flag;
 8006f92:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006f94:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006f96:	609a      	str	r2, [r3, #8]
 8006f98:	79fb      	ldrb	r3, [r7, #7]
 8006f9a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006f9e:	4b41      	ldr	r3, [pc, #260]	; (80070a4 <handle_epout_irq+0x198>)
 8006fa0:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006fa2:	2301      	movs	r3, #1
 8006fa4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
  dcd_event_t event = { .rhport = rhport, .event_id = DCD_EVENT_SETUP_RECEIVED };
 8006fa8:	f107 0314 	add.w	r3, r7, #20
 8006fac:	2200      	movs	r2, #0
 8006fae:	601a      	str	r2, [r3, #0]
 8006fb0:	605a      	str	r2, [r3, #4]
 8006fb2:	609a      	str	r2, [r3, #8]
 8006fb4:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8006fb8:	753b      	strb	r3, [r7, #20]
 8006fba:	2306      	movs	r3, #6
 8006fbc:	757b      	strb	r3, [r7, #21]
  memcpy(&event.setup_received, setup, sizeof(tusb_control_request_t));
 8006fbe:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006fc0:	f107 0318 	add.w	r3, r7, #24
 8006fc4:	6810      	ldr	r0, [r2, #0]
 8006fc6:	6851      	ldr	r1, [r2, #4]
 8006fc8:	c303      	stmia	r3!, {r0, r1}
  dcd_event_handler(&event, in_isr);
 8006fca:	f897 202b 	ldrb.w	r2, [r7, #43]	; 0x2b
 8006fce:	f107 0314 	add.w	r3, r7, #20
 8006fd2:	4611      	mov	r1, r2
 8006fd4:	4618      	mov	r0, r3
 8006fd6:	f7fd ffd1 	bl	8004f7c <dcd_event_handler>
}
 8006fda:	bf00      	nop
        dcd_event_setup_received(rhport, (uint8_t*) _setup_packet, true);
      }

      // OUT XFER complete
      if (epout->doepint & DOEPINT_XFRC) {
 8006fdc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006fde:	689b      	ldr	r3, [r3, #8]
 8006fe0:	f003 0301 	and.w	r3, r3, #1
 8006fe4:	2b00      	cmp	r3, #0
 8006fe6:	d048      	beq.n	800707a <handle_epout_irq+0x16e>
        epout->doepint = DOEPINT_XFRC;
 8006fe8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006fea:	2201      	movs	r2, #1
 8006fec:	609a      	str	r2, [r3, #8]

        xfer_ctl_t* xfer = XFER_CTL_BASE(n, TUSB_DIR_OUT);
 8006fee:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8006ff2:	015b      	lsls	r3, r3, #5
 8006ff4:	4a2c      	ldr	r2, [pc, #176]	; (80070a8 <handle_epout_irq+0x19c>)
 8006ff6:	4413      	add	r3, r2
 8006ff8:	637b      	str	r3, [r7, #52]	; 0x34

        // EP0 can only handle one packet
        if ((n == 0) && ep0_pending[TUSB_DIR_OUT]) {
 8006ffa:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8006ffe:	2b00      	cmp	r3, #0
 8007000:	d10e      	bne.n	8007020 <handle_epout_irq+0x114>
 8007002:	4b2a      	ldr	r3, [pc, #168]	; (80070ac <handle_epout_irq+0x1a0>)
 8007004:	881b      	ldrh	r3, [r3, #0]
 8007006:	2b00      	cmp	r3, #0
 8007008:	d00a      	beq.n	8007020 <handle_epout_irq+0x114>
          // Schedule another packet to be received.
          edpt_schedule_packets(rhport, n, TUSB_DIR_OUT, 1, ep0_pending[TUSB_DIR_OUT]);
 800700a:	4b28      	ldr	r3, [pc, #160]	; (80070ac <handle_epout_irq+0x1a0>)
 800700c:	881b      	ldrh	r3, [r3, #0]
 800700e:	f897 104f 	ldrb.w	r1, [r7, #79]	; 0x4f
 8007012:	79f8      	ldrb	r0, [r7, #7]
 8007014:	9300      	str	r3, [sp, #0]
 8007016:	2301      	movs	r3, #1
 8007018:	2200      	movs	r2, #0
 800701a:	f7fe ff7d 	bl	8005f18 <edpt_schedule_packets>
 800701e:	e02c      	b.n	800707a <handle_epout_irq+0x16e>
        } else {
          dcd_event_xfer_complete(rhport, n, xfer->total_len, XFER_RESULT_SUCCESS, true);
 8007020:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007022:	891b      	ldrh	r3, [r3, #8]
 8007024:	461a      	mov	r2, r3
 8007026:	79fb      	ldrb	r3, [r7, #7]
 8007028:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 800702c:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8007030:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
 8007034:	627a      	str	r2, [r7, #36]	; 0x24
 8007036:	2300      	movs	r3, #0
 8007038:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800703c:	2301      	movs	r3, #1
 800703e:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  dcd_event_t event = { .rhport = rhport, .event_id = DCD_EVENT_XFER_COMPLETE };
 8007042:	f107 0308 	add.w	r3, r7, #8
 8007046:	2200      	movs	r2, #0
 8007048:	601a      	str	r2, [r3, #0]
 800704a:	605a      	str	r2, [r3, #4]
 800704c:	609a      	str	r2, [r3, #8]
 800704e:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 8007052:	723b      	strb	r3, [r7, #8]
 8007054:	2307      	movs	r3, #7
 8007056:	727b      	strb	r3, [r7, #9]
  event.xfer_complete.ep_addr = ep_addr;
 8007058:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 800705c:	733b      	strb	r3, [r7, #12]
  event.xfer_complete.len     = xferred_bytes;
 800705e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007060:	613b      	str	r3, [r7, #16]
  event.xfer_complete.result  = result;
 8007062:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8007066:	737b      	strb	r3, [r7, #13]
  dcd_event_handler(&event, in_isr);
 8007068:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 800706c:	f107 0308 	add.w	r3, r7, #8
 8007070:	4611      	mov	r1, r2
 8007072:	4618      	mov	r0, r3
 8007074:	f7fd ff82 	bl	8004f7c <dcd_event_handler>
}
 8007078:	bf00      	nop
  for (uint8_t n = 0; n < ep_count; n++) {
 800707a:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800707e:	3301      	adds	r3, #1
 8007080:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
 8007084:	f897 204f 	ldrb.w	r2, [r7, #79]	; 0x4f
 8007088:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800708c:	429a      	cmp	r2, r3
 800708e:	f4ff af54 	bcc.w	8006f3a <handle_epout_irq+0x2e>
        }
      }
    }
  }
}
 8007092:	bf00      	nop
 8007094:	bf00      	nop
 8007096:	3750      	adds	r7, #80	; 0x50
 8007098:	46bd      	mov	sp, r7
 800709a:	bd80      	pop	{r7, pc}
 800709c:	080101cc 	.word	0x080101cc
 80070a0:	4f543009 	.word	0x4f543009
 80070a4:	240012e8 	.word	0x240012e8
 80070a8:	240012f0 	.word	0x240012f0
 80070ac:	24001410 	.word	0x24001410

080070b0 <handle_epin_irq>:

static void handle_epin_irq(uint8_t rhport) {
 80070b0:	b580      	push	{r7, lr}
 80070b2:	b094      	sub	sp, #80	; 0x50
 80070b4:	af02      	add	r7, sp, #8
 80070b6:	4603      	mov	r3, r0
 80070b8:	71fb      	strb	r3, [r7, #7]
  dwc2_regs_t* dwc2 = DWC2_REG(rhport);
 80070ba:	79fb      	ldrb	r3, [r7, #7]
 80070bc:	4a88      	ldr	r2, [pc, #544]	; (80072e0 <handle_epin_irq+0x230>)
 80070be:	011b      	lsls	r3, r3, #4
 80070c0:	4413      	add	r3, r2
 80070c2:	681b      	ldr	r3, [r3, #0]
 80070c4:	643b      	str	r3, [r7, #64]	; 0x40
  uint8_t const ep_count = _dwc2_controller[rhport].ep_count;
 80070c6:	79fb      	ldrb	r3, [r7, #7]
 80070c8:	4a85      	ldr	r2, [pc, #532]	; (80072e0 <handle_epin_irq+0x230>)
 80070ca:	011b      	lsls	r3, r3, #4
 80070cc:	4413      	add	r3, r2
 80070ce:	3308      	adds	r3, #8
 80070d0:	781b      	ldrb	r3, [r3, #0]
 80070d2:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  dwc2_epin_t* epin = dwc2->epin;
 80070d6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80070d8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80070dc:	63bb      	str	r3, [r7, #56]	; 0x38

  // DAINT for a given EP clears when DIEPINTx is cleared.
  // IEPINT will be cleared when DAINT's out bits are cleared.
  for (uint8_t n = 0; n < ep_count; n++) {
 80070de:	2300      	movs	r3, #0
 80070e0:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 80070e4:	e0f0      	b.n	80072c8 <handle_epin_irq+0x218>
    if (dwc2->daint & TU_BIT(DAINT_IEPINT_Pos + n)) {
 80070e6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80070e8:	f8d3 2818 	ldr.w	r2, [r3, #2072]	; 0x818
 80070ec:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 80070f0:	fa22 f303 	lsr.w	r3, r2, r3
 80070f4:	f003 0301 	and.w	r3, r3, #1
 80070f8:	2b00      	cmp	r3, #0
 80070fa:	f000 80e0 	beq.w	80072be <handle_epin_irq+0x20e>
      // IN XFER complete (entire xfer).
      xfer_ctl_t* xfer = XFER_CTL_BASE(n, TUSB_DIR_IN);
 80070fe:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8007102:	015b      	lsls	r3, r3, #5
 8007104:	3310      	adds	r3, #16
 8007106:	4a77      	ldr	r2, [pc, #476]	; (80072e4 <handle_epin_irq+0x234>)
 8007108:	4413      	add	r3, r2
 800710a:	637b      	str	r3, [r7, #52]	; 0x34

      if (epin[n].diepint & DIEPINT_XFRC) {
 800710c:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8007110:	015b      	lsls	r3, r3, #5
 8007112:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007114:	4413      	add	r3, r2
 8007116:	689b      	ldr	r3, [r3, #8]
 8007118:	f003 0301 	and.w	r3, r3, #1
 800711c:	2b00      	cmp	r3, #0
 800711e:	d046      	beq.n	80071ae <handle_epin_irq+0xfe>
        epin[n].diepint = DIEPINT_XFRC;
 8007120:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8007124:	015b      	lsls	r3, r3, #5
 8007126:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007128:	4413      	add	r3, r2
 800712a:	2201      	movs	r2, #1
 800712c:	609a      	str	r2, [r3, #8]

        // EP0 can only handle one packet
        if ((n == 0) && ep0_pending[TUSB_DIR_IN]) {
 800712e:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8007132:	2b00      	cmp	r3, #0
 8007134:	d10e      	bne.n	8007154 <handle_epin_irq+0xa4>
 8007136:	4b6c      	ldr	r3, [pc, #432]	; (80072e8 <handle_epin_irq+0x238>)
 8007138:	885b      	ldrh	r3, [r3, #2]
 800713a:	2b00      	cmp	r3, #0
 800713c:	d00a      	beq.n	8007154 <handle_epin_irq+0xa4>
          // Schedule another packet to be transmitted.
          edpt_schedule_packets(rhport, n, TUSB_DIR_IN, 1, ep0_pending[TUSB_DIR_IN]);
 800713e:	4b6a      	ldr	r3, [pc, #424]	; (80072e8 <handle_epin_irq+0x238>)
 8007140:	885b      	ldrh	r3, [r3, #2]
 8007142:	f897 1047 	ldrb.w	r1, [r7, #71]	; 0x47
 8007146:	79f8      	ldrb	r0, [r7, #7]
 8007148:	9300      	str	r3, [sp, #0]
 800714a:	2301      	movs	r3, #1
 800714c:	2201      	movs	r2, #1
 800714e:	f7fe fee3 	bl	8005f18 <edpt_schedule_packets>
 8007152:	e02c      	b.n	80071ae <handle_epin_irq+0xfe>
        } else {
          dcd_event_xfer_complete(rhport, n | TUSB_DIR_IN_MASK, xfer->total_len, XFER_RESULT_SUCCESS, true);
 8007154:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8007158:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800715c:	b2d9      	uxtb	r1, r3
 800715e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007160:	891b      	ldrh	r3, [r3, #8]
 8007162:	461a      	mov	r2, r3
 8007164:	79fb      	ldrb	r3, [r7, #7]
 8007166:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800716a:	460b      	mov	r3, r1
 800716c:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8007170:	623a      	str	r2, [r7, #32]
 8007172:	2300      	movs	r3, #0
 8007174:	77fb      	strb	r3, [r7, #31]
 8007176:	2301      	movs	r3, #1
 8007178:	77bb      	strb	r3, [r7, #30]
  dcd_event_t event = { .rhport = rhport, .event_id = DCD_EVENT_XFER_COMPLETE };
 800717a:	f107 030c 	add.w	r3, r7, #12
 800717e:	2200      	movs	r2, #0
 8007180:	601a      	str	r2, [r3, #0]
 8007182:	605a      	str	r2, [r3, #4]
 8007184:	609a      	str	r2, [r3, #8]
 8007186:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800718a:	733b      	strb	r3, [r7, #12]
 800718c:	2307      	movs	r3, #7
 800718e:	737b      	strb	r3, [r7, #13]
  event.xfer_complete.ep_addr = ep_addr;
 8007190:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8007194:	743b      	strb	r3, [r7, #16]
  event.xfer_complete.len     = xferred_bytes;
 8007196:	6a3b      	ldr	r3, [r7, #32]
 8007198:	617b      	str	r3, [r7, #20]
  event.xfer_complete.result  = result;
 800719a:	7ffb      	ldrb	r3, [r7, #31]
 800719c:	747b      	strb	r3, [r7, #17]
  dcd_event_handler(&event, in_isr);
 800719e:	7fba      	ldrb	r2, [r7, #30]
 80071a0:	f107 030c 	add.w	r3, r7, #12
 80071a4:	4611      	mov	r1, r2
 80071a6:	4618      	mov	r0, r3
 80071a8:	f7fd fee8 	bl	8004f7c <dcd_event_handler>
}
 80071ac:	bf00      	nop
        }
      }

      // XFER FIFO empty
      if ((epin[n].diepint & DIEPINT_TXFE) && (dwc2->diepempmsk & (1 << n))) {
 80071ae:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 80071b2:	015b      	lsls	r3, r3, #5
 80071b4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80071b6:	4413      	add	r3, r2
 80071b8:	689b      	ldr	r3, [r3, #8]
 80071ba:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80071be:	2b00      	cmp	r3, #0
 80071c0:	d07d      	beq.n	80072be <handle_epin_irq+0x20e>
 80071c2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80071c4:	f8d3 3834 	ldr.w	r3, [r3, #2100]	; 0x834
 80071c8:	f897 2047 	ldrb.w	r2, [r7, #71]	; 0x47
 80071cc:	2101      	movs	r1, #1
 80071ce:	fa01 f202 	lsl.w	r2, r1, r2
 80071d2:	4013      	ands	r3, r2
 80071d4:	2b00      	cmp	r3, #0
 80071d6:	d072      	beq.n	80072be <handle_epin_irq+0x20e>
        // diepint's TXFE bit is read-only, software cannot clear it.
        // It will only be cleared by hardware when written bytes is more than
        // - 64 bytes or
        // - Half of TX FIFO size (configured by DIEPTXF)

        uint16_t remaining_packets = (epin[n].dieptsiz & DIEPTSIZ_PKTCNT_Msk) >> DIEPTSIZ_PKTCNT_Pos;
 80071d8:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 80071dc:	015b      	lsls	r3, r3, #5
 80071de:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80071e0:	4413      	add	r3, r2
 80071e2:	691b      	ldr	r3, [r3, #16]
 80071e4:	0cdb      	lsrs	r3, r3, #19
 80071e6:	b29b      	uxth	r3, r3
 80071e8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80071ec:	867b      	strh	r3, [r7, #50]	; 0x32

        // Process every single packet (only whole packets can be written to fifo)
        for (uint16_t i = 0; i < remaining_packets; i++) {
 80071ee:	2300      	movs	r3, #0
 80071f0:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 80071f4:	e045      	b.n	8007282 <handle_epin_irq+0x1d2>
          uint16_t const remaining_bytes = (epin[n].dieptsiz & DIEPTSIZ_XFRSIZ_Msk) >> DIEPTSIZ_XFRSIZ_Pos;
 80071f6:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 80071fa:	015b      	lsls	r3, r3, #5
 80071fc:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80071fe:	4413      	add	r3, r2
 8007200:	691b      	ldr	r3, [r3, #16]
 8007202:	863b      	strh	r3, [r7, #48]	; 0x30

          // Packet can not be larger than ep max size
          uint16_t const packet_size = tu_min16(remaining_bytes, xfer->max_size);
 8007204:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007206:	895a      	ldrh	r2, [r3, #10]
 8007208:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 800720a:	83bb      	strh	r3, [r7, #28]
 800720c:	4613      	mov	r3, r2
 800720e:	837b      	strh	r3, [r7, #26]
TU_ATTR_ALWAYS_INLINE static inline uint16_t tu_min16 (uint16_t x, uint16_t y) { return (x < y) ? x : y; }
 8007210:	8bba      	ldrh	r2, [r7, #28]
 8007212:	8b7b      	ldrh	r3, [r7, #26]
 8007214:	4293      	cmp	r3, r2
 8007216:	bf28      	it	cs
 8007218:	4613      	movcs	r3, r2
 800721a:	b29b      	uxth	r3, r3
 800721c:	85fb      	strh	r3, [r7, #46]	; 0x2e

          // It's only possible to write full packets into FIFO. Therefore DTXFSTS register of current
          // EP has to be checked if the buffer can take another WHOLE packet
          if (packet_size > ((epin[n].dtxfsts & DTXFSTS_INEPTFSAV_Msk) << 2)) break;
 800721e:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8007220:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8007224:	015b      	lsls	r3, r3, #5
 8007226:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8007228:	440b      	add	r3, r1
 800722a:	699b      	ldr	r3, [r3, #24]
 800722c:	0099      	lsls	r1, r3, #2
 800722e:	4b2f      	ldr	r3, [pc, #188]	; (80072ec <handle_epin_irq+0x23c>)
 8007230:	400b      	ands	r3, r1
 8007232:	429a      	cmp	r2, r3
 8007234:	d82b      	bhi.n	800728e <handle_epin_irq+0x1de>

          // Push packet to Tx-FIFO
          if (xfer->ff) {
 8007236:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007238:	685b      	ldr	r3, [r3, #4]
 800723a:	2b00      	cmp	r3, #0
 800723c:	d00e      	beq.n	800725c <handle_epin_irq+0x1ac>
            volatile uint32_t* tx_fifo = dwc2->fifo[n];
 800723e:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8007242:	3301      	adds	r3, #1
 8007244:	031b      	lsls	r3, r3, #12
 8007246:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8007248:	4413      	add	r3, r2
 800724a:	62bb      	str	r3, [r7, #40]	; 0x28
            tu_fifo_read_n_const_addr_full_words(xfer->ff, (void*) (uintptr_t) tx_fifo, packet_size);
 800724c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800724e:	685b      	ldr	r3, [r3, #4]
 8007250:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8007252:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007254:	4618      	mov	r0, r3
 8007256:	f7fc fddc 	bl	8003e12 <tu_fifo_read_n_const_addr_full_words>
 800725a:	e00d      	b.n	8007278 <handle_epin_irq+0x1c8>
          } else {
            write_fifo_packet(rhport, n, xfer->buffer, packet_size);
 800725c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800725e:	681a      	ldr	r2, [r3, #0]
 8007260:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8007262:	f897 1047 	ldrb.w	r1, [r7, #71]	; 0x47
 8007266:	79f8      	ldrb	r0, [r7, #7]
 8007268:	f7ff fd2c 	bl	8006cc4 <write_fifo_packet>

            // Increment pointer to xfer data
            xfer->buffer += packet_size;
 800726c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800726e:	681a      	ldr	r2, [r3, #0]
 8007270:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8007272:	441a      	add	r2, r3
 8007274:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007276:	601a      	str	r2, [r3, #0]
        for (uint16_t i = 0; i < remaining_packets; i++) {
 8007278:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 800727c:	3301      	adds	r3, #1
 800727e:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 8007282:	f8b7 2044 	ldrh.w	r2, [r7, #68]	; 0x44
 8007286:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 8007288:	429a      	cmp	r2, r3
 800728a:	d3b4      	bcc.n	80071f6 <handle_epin_irq+0x146>
 800728c:	e000      	b.n	8007290 <handle_epin_irq+0x1e0>
          if (packet_size > ((epin[n].dtxfsts & DTXFSTS_INEPTFSAV_Msk) << 2)) break;
 800728e:	bf00      	nop
          }
        }

        // Turn off TXFE if all bytes are written.
        if (((epin[n].dieptsiz & DIEPTSIZ_XFRSIZ_Msk) >> DIEPTSIZ_XFRSIZ_Pos) == 0) {
 8007290:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8007294:	015b      	lsls	r3, r3, #5
 8007296:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007298:	4413      	add	r3, r2
 800729a:	691b      	ldr	r3, [r3, #16]
 800729c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80072a0:	2b00      	cmp	r3, #0
 80072a2:	d10c      	bne.n	80072be <handle_epin_irq+0x20e>
          dwc2->diepempmsk &= ~(1 << n);
 80072a4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80072a6:	f8d3 3834 	ldr.w	r3, [r3, #2100]	; 0x834
 80072aa:	f897 2047 	ldrb.w	r2, [r7, #71]	; 0x47
 80072ae:	2101      	movs	r1, #1
 80072b0:	fa01 f202 	lsl.w	r2, r1, r2
 80072b4:	43d2      	mvns	r2, r2
 80072b6:	401a      	ands	r2, r3
 80072b8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80072ba:	f8c3 2834 	str.w	r2, [r3, #2100]	; 0x834
  for (uint8_t n = 0; n < ep_count; n++) {
 80072be:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 80072c2:	3301      	adds	r3, #1
 80072c4:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 80072c8:	f897 2047 	ldrb.w	r2, [r7, #71]	; 0x47
 80072cc:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80072d0:	429a      	cmp	r2, r3
 80072d2:	f4ff af08 	bcc.w	80070e6 <handle_epin_irq+0x36>
        }
      }
    }
  }
}
 80072d6:	bf00      	nop
 80072d8:	bf00      	nop
 80072da:	3748      	adds	r7, #72	; 0x48
 80072dc:	46bd      	mov	sp, r7
 80072de:	bd80      	pop	{r7, pc}
 80072e0:	080101cc 	.word	0x080101cc
 80072e4:	240012f0 	.word	0x240012f0
 80072e8:	24001410 	.word	0x24001410
 80072ec:	0003fffc 	.word	0x0003fffc

080072f0 <dcd_int_handler>:

void dcd_int_handler(uint8_t rhport) {
 80072f0:	b580      	push	{r7, lr}
 80072f2:	b0a0      	sub	sp, #128	; 0x80
 80072f4:	af00      	add	r7, sp, #0
 80072f6:	4603      	mov	r3, r0
 80072f8:	71fb      	strb	r3, [r7, #7]
  dwc2_regs_t* dwc2 = DWC2_REG(rhport);
 80072fa:	79fb      	ldrb	r3, [r7, #7]
 80072fc:	4ab7      	ldr	r2, [pc, #732]	; (80075dc <dcd_int_handler+0x2ec>)
 80072fe:	011b      	lsls	r3, r3, #4
 8007300:	4413      	add	r3, r2
 8007302:	681b      	ldr	r3, [r3, #0]
 8007304:	67bb      	str	r3, [r7, #120]	; 0x78

  uint32_t const int_mask = dwc2->gintmsk;
 8007306:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007308:	699b      	ldr	r3, [r3, #24]
 800730a:	677b      	str	r3, [r7, #116]	; 0x74
  uint32_t const int_status = dwc2->gintsts & int_mask;
 800730c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800730e:	695b      	ldr	r3, [r3, #20]
 8007310:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8007312:	4013      	ands	r3, r2
 8007314:	673b      	str	r3, [r7, #112]	; 0x70

  if (int_status & GINTSTS_USBRST) {
 8007316:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8007318:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800731c:	2b00      	cmp	r3, #0
 800731e:	d007      	beq.n	8007330 <dcd_int_handler+0x40>
    // USBRST is start of reset.
    dwc2->gintsts = GINTSTS_USBRST;
 8007320:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007322:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8007326:	615a      	str	r2, [r3, #20]
    bus_reset(rhport);
 8007328:	79fb      	ldrb	r3, [r7, #7]
 800732a:	4618      	mov	r0, r3
 800732c:	f7fe fd64 	bl	8005df8 <bus_reset>
  }

  if (int_status & GINTSTS_ENUMDNE) {
 8007330:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8007332:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8007336:	2b00      	cmp	r3, #0
 8007338:	d03e      	beq.n	80073b8 <dcd_int_handler+0xc8>
    // ENUMDNE is the end of reset where speed of the link is detected
    dwc2->gintsts = GINTSTS_ENUMDNE;
 800733a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800733c:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8007340:	615a      	str	r2, [r3, #20]

    tusb_speed_t speed;
    switch ((dwc2->dsts & DSTS_ENUMSPD_Msk) >> DSTS_ENUMSPD_Pos) {
 8007342:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007344:	f8d3 3808 	ldr.w	r3, [r3, #2056]	; 0x808
 8007348:	085b      	lsrs	r3, r3, #1
 800734a:	f003 0303 	and.w	r3, r3, #3
 800734e:	2b00      	cmp	r3, #0
 8007350:	d002      	beq.n	8007358 <dcd_int_handler+0x68>
 8007352:	2b02      	cmp	r3, #2
 8007354:	d004      	beq.n	8007360 <dcd_int_handler+0x70>
 8007356:	e007      	b.n	8007368 <dcd_int_handler+0x78>
      case DSTS_ENUMSPD_HS:
        speed = TUSB_SPEED_HIGH;
 8007358:	2302      	movs	r3, #2
 800735a:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
        break;
 800735e:	e007      	b.n	8007370 <dcd_int_handler+0x80>

      case DSTS_ENUMSPD_LS:
        speed = TUSB_SPEED_LOW;
 8007360:	2301      	movs	r3, #1
 8007362:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
        break;
 8007366:	e003      	b.n	8007370 <dcd_int_handler+0x80>

      case DSTS_ENUMSPD_FS_HSPHY:
      case DSTS_ENUMSPD_FS:
      default:
        speed = TUSB_SPEED_FULL;
 8007368:	2300      	movs	r3, #0
 800736a:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
        break;
 800736e:	bf00      	nop
 8007370:	79fb      	ldrb	r3, [r7, #7]
 8007372:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 8007376:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 800737a:	f887 3066 	strb.w	r3, [r7, #102]	; 0x66
 800737e:	2301      	movs	r3, #1
 8007380:	f887 3065 	strb.w	r3, [r7, #101]	; 0x65
  dcd_event_t event = { .rhport = rhport, .event_id = DCD_EVENT_BUS_RESET };
 8007384:	f107 0320 	add.w	r3, r7, #32
 8007388:	2200      	movs	r2, #0
 800738a:	601a      	str	r2, [r3, #0]
 800738c:	605a      	str	r2, [r3, #4]
 800738e:	609a      	str	r2, [r3, #8]
 8007390:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8007394:	f887 3020 	strb.w	r3, [r7, #32]
 8007398:	2301      	movs	r3, #1
 800739a:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
  event.bus_reset.speed = speed;
 800739e:	f897 3066 	ldrb.w	r3, [r7, #102]	; 0x66
 80073a2:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  dcd_event_handler(&event, in_isr);
 80073a6:	f897 2065 	ldrb.w	r2, [r7, #101]	; 0x65
 80073aa:	f107 0320 	add.w	r3, r7, #32
 80073ae:	4611      	mov	r1, r2
 80073b0:	4618      	mov	r0, r3
 80073b2:	f7fd fde3 	bl	8004f7c <dcd_event_handler>
}
 80073b6:	bf00      	nop
    // TODO must update GUSBCFG_TRDT according to link speed

    dcd_event_bus_reset(rhport, speed, true);
  }

  if (int_status & GINTSTS_USBSUSP) {
 80073b8:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80073ba:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80073be:	2b00      	cmp	r3, #0
 80073c0:	d023      	beq.n	800740a <dcd_int_handler+0x11a>
    dwc2->gintsts = GINTSTS_USBSUSP;
 80073c2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80073c4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80073c8:	615a      	str	r2, [r3, #20]
 80073ca:	79fb      	ldrb	r3, [r7, #7]
 80073cc:	f887 3064 	strb.w	r3, [r7, #100]	; 0x64
 80073d0:	2304      	movs	r3, #4
 80073d2:	f887 3063 	strb.w	r3, [r7, #99]	; 0x63
 80073d6:	2301      	movs	r3, #1
 80073d8:	f887 3062 	strb.w	r3, [r7, #98]	; 0x62
  dcd_event_t event = { .rhport = rhport, .event_id = eid };
 80073dc:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80073e0:	2200      	movs	r2, #0
 80073e2:	601a      	str	r2, [r3, #0]
 80073e4:	605a      	str	r2, [r3, #4]
 80073e6:	609a      	str	r2, [r3, #8]
 80073e8:	f897 3064 	ldrb.w	r3, [r7, #100]	; 0x64
 80073ec:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
 80073f0:	f897 3063 	ldrb.w	r3, [r7, #99]	; 0x63
 80073f4:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
  dcd_event_handler(&event, in_isr);
 80073f8:	f897 2062 	ldrb.w	r2, [r7, #98]	; 0x62
 80073fc:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8007400:	4611      	mov	r1, r2
 8007402:	4618      	mov	r0, r3
 8007404:	f7fd fdba 	bl	8004f7c <dcd_event_handler>
}
 8007408:	bf00      	nop
    dcd_event_bus_signal(rhport, DCD_EVENT_SUSPEND, true);
  }

  if (int_status & GINTSTS_WKUINT) {
 800740a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800740c:	2b00      	cmp	r3, #0
 800740e:	da23      	bge.n	8007458 <dcd_int_handler+0x168>
    dwc2->gintsts = GINTSTS_WKUINT;
 8007410:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007412:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8007416:	615a      	str	r2, [r3, #20]
 8007418:	79fb      	ldrb	r3, [r7, #7]
 800741a:	f887 3061 	strb.w	r3, [r7, #97]	; 0x61
 800741e:	2305      	movs	r3, #5
 8007420:	f887 3060 	strb.w	r3, [r7, #96]	; 0x60
 8007424:	2301      	movs	r3, #1
 8007426:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
  dcd_event_t event = { .rhport = rhport, .event_id = eid };
 800742a:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800742e:	2200      	movs	r2, #0
 8007430:	601a      	str	r2, [r3, #0]
 8007432:	605a      	str	r2, [r3, #4]
 8007434:	609a      	str	r2, [r3, #8]
 8007436:	f897 3061 	ldrb.w	r3, [r7, #97]	; 0x61
 800743a:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
 800743e:	f897 3060 	ldrb.w	r3, [r7, #96]	; 0x60
 8007442:	f887 3039 	strb.w	r3, [r7, #57]	; 0x39
  dcd_event_handler(&event, in_isr);
 8007446:	f897 205f 	ldrb.w	r2, [r7, #95]	; 0x5f
 800744a:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800744e:	4611      	mov	r1, r2
 8007450:	4618      	mov	r0, r3
 8007452:	f7fd fd93 	bl	8004f7c <dcd_event_handler>
}
 8007456:	bf00      	nop
  }

  // TODO check GINTSTS_DISCINT for disconnect detection
  // if(int_status & GINTSTS_DISCINT)

  if (int_status & GINTSTS_OTGINT) {
 8007458:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800745a:	f003 0304 	and.w	r3, r3, #4
 800745e:	2b00      	cmp	r3, #0
 8007460:	d028      	beq.n	80074b4 <dcd_int_handler+0x1c4>
    // OTG INT bit is read-only
    uint32_t const otg_int = dwc2->gotgint;
 8007462:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007464:	685b      	ldr	r3, [r3, #4]
 8007466:	66fb      	str	r3, [r7, #108]	; 0x6c

    if (otg_int & GOTGINT_SEDET) {
 8007468:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800746a:	f003 0304 	and.w	r3, r3, #4
 800746e:	2b00      	cmp	r3, #0
 8007470:	d01d      	beq.n	80074ae <dcd_int_handler+0x1be>
 8007472:	79fb      	ldrb	r3, [r7, #7]
 8007474:	f887 305e 	strb.w	r3, [r7, #94]	; 0x5e
 8007478:	2302      	movs	r3, #2
 800747a:	f887 305d 	strb.w	r3, [r7, #93]	; 0x5d
 800747e:	2301      	movs	r3, #1
 8007480:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
  dcd_event_t event = { .rhport = rhport, .event_id = eid };
 8007484:	f107 0314 	add.w	r3, r7, #20
 8007488:	2200      	movs	r2, #0
 800748a:	601a      	str	r2, [r3, #0]
 800748c:	605a      	str	r2, [r3, #4]
 800748e:	609a      	str	r2, [r3, #8]
 8007490:	f897 305e 	ldrb.w	r3, [r7, #94]	; 0x5e
 8007494:	753b      	strb	r3, [r7, #20]
 8007496:	f897 305d 	ldrb.w	r3, [r7, #93]	; 0x5d
 800749a:	757b      	strb	r3, [r7, #21]
  dcd_event_handler(&event, in_isr);
 800749c:	f897 205c 	ldrb.w	r2, [r7, #92]	; 0x5c
 80074a0:	f107 0314 	add.w	r3, r7, #20
 80074a4:	4611      	mov	r1, r2
 80074a6:	4618      	mov	r0, r3
 80074a8:	f7fd fd68 	bl	8004f7c <dcd_event_handler>
}
 80074ac:	bf00      	nop
      dcd_event_bus_signal(rhport, DCD_EVENT_UNPLUGGED, true);
    }

    dwc2->gotgint = otg_int;
 80074ae:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80074b0:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80074b2:	605a      	str	r2, [r3, #4]
  }

  if (int_status & GINTSTS_SOF) {
 80074b4:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80074b6:	f003 0308 	and.w	r3, r3, #8
 80074ba:	2b00      	cmp	r3, #0
 80074bc:	d051      	beq.n	8007562 <dcd_int_handler+0x272>
    dwc2->gotgint = GINTSTS_SOF;
 80074be:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80074c0:	2208      	movs	r2, #8
 80074c2:	605a      	str	r2, [r3, #4]

    if (_sof_en) {
 80074c4:	4b46      	ldr	r3, [pc, #280]	; (80075e0 <dcd_int_handler+0x2f0>)
 80074c6:	781b      	ldrb	r3, [r3, #0]
 80074c8:	2b00      	cmp	r3, #0
 80074ca:	d024      	beq.n	8007516 <dcd_int_handler+0x226>
      uint32_t frame = (dwc2->dsts & (DSTS_FNSOF)) >> 8;
 80074cc:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80074ce:	f8d3 3808 	ldr.w	r3, [r3, #2056]	; 0x808
 80074d2:	0a1b      	lsrs	r3, r3, #8
 80074d4:	f3c3 030d 	ubfx	r3, r3, #0, #14
 80074d8:	66bb      	str	r3, [r7, #104]	; 0x68
 80074da:	79fb      	ldrb	r3, [r7, #7]
 80074dc:	f887 305b 	strb.w	r3, [r7, #91]	; 0x5b
 80074e0:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80074e2:	657b      	str	r3, [r7, #84]	; 0x54
 80074e4:	2301      	movs	r3, #1
 80074e6:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53

TU_ATTR_ALWAYS_INLINE static inline void dcd_event_sof(uint8_t rhport, uint32_t frame_count, bool in_isr) {
  dcd_event_t event = { .rhport = rhport, .event_id = DCD_EVENT_SOF };
 80074ea:	f107 0308 	add.w	r3, r7, #8
 80074ee:	2200      	movs	r2, #0
 80074f0:	601a      	str	r2, [r3, #0]
 80074f2:	605a      	str	r2, [r3, #4]
 80074f4:	609a      	str	r2, [r3, #8]
 80074f6:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
 80074fa:	723b      	strb	r3, [r7, #8]
 80074fc:	2303      	movs	r3, #3
 80074fe:	727b      	strb	r3, [r7, #9]
  event.sof.frame_count = frame_count;
 8007500:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007502:	60fb      	str	r3, [r7, #12]
  dcd_event_handler(&event, in_isr);
 8007504:	f897 2053 	ldrb.w	r2, [r7, #83]	; 0x53
 8007508:	f107 0308 	add.w	r3, r7, #8
 800750c:	4611      	mov	r1, r2
 800750e:	4618      	mov	r0, r3
 8007510:	f7fd fd34 	bl	8004f7c <dcd_event_handler>
}
 8007514:	e005      	b.n	8007522 <dcd_int_handler+0x232>
      dcd_event_sof(rhport, frame, true);
    } else {
      // Disable SOF interrupt if SOF was not explicitly enabled. SOF was used for remote wakeup detection
      dwc2->gintmsk &= ~GINTMSK_SOFM;
 8007516:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007518:	699b      	ldr	r3, [r3, #24]
 800751a:	f023 0208 	bic.w	r2, r3, #8
 800751e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007520:	619a      	str	r2, [r3, #24]
 8007522:	79fb      	ldrb	r3, [r7, #7]
 8007524:	f887 3052 	strb.w	r3, [r7, #82]	; 0x52
 8007528:	2303      	movs	r3, #3
 800752a:	f887 3051 	strb.w	r3, [r7, #81]	; 0x51
 800752e:	2301      	movs	r3, #1
 8007530:	f887 3050 	strb.w	r3, [r7, #80]	; 0x50
  dcd_event_t event = { .rhport = rhport, .event_id = eid };
 8007534:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8007538:	2200      	movs	r2, #0
 800753a:	601a      	str	r2, [r3, #0]
 800753c:	605a      	str	r2, [r3, #4]
 800753e:	609a      	str	r2, [r3, #8]
 8007540:	f897 3052 	ldrb.w	r3, [r7, #82]	; 0x52
 8007544:	f887 3044 	strb.w	r3, [r7, #68]	; 0x44
 8007548:	f897 3051 	ldrb.w	r3, [r7, #81]	; 0x51
 800754c:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
  dcd_event_handler(&event, in_isr);
 8007550:	f897 2050 	ldrb.w	r2, [r7, #80]	; 0x50
 8007554:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8007558:	4611      	mov	r1, r2
 800755a:	4618      	mov	r0, r3
 800755c:	f7fd fd0e 	bl	8004f7c <dcd_event_handler>
}
 8007560:	bf00      	nop

    dcd_event_bus_signal(rhport, DCD_EVENT_SOF, true);
  }

  // RxFIFO non-empty interrupt handling.
  if (int_status & GINTSTS_RXFLVL) {
 8007562:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8007564:	f003 0310 	and.w	r3, r3, #16
 8007568:	2b00      	cmp	r3, #0
 800756a:	d020      	beq.n	80075ae <dcd_int_handler+0x2be>
    // RXFLVL bit is read-only

    // Mask out RXFLVL while reading data from FIFO
    dwc2->gintmsk &= ~GINTMSK_RXFLVLM;
 800756c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800756e:	699b      	ldr	r3, [r3, #24]
 8007570:	f023 0210 	bic.w	r2, r3, #16
 8007574:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007576:	619a      	str	r2, [r3, #24]

    // Loop until all available packets were handled
    do {
      handle_rxflvl_irq(rhport);
 8007578:	79fb      	ldrb	r3, [r7, #7]
 800757a:	4618      	mov	r0, r3
 800757c:	f7ff fbf8 	bl	8006d70 <handle_rxflvl_irq>
    } while (dwc2->gotgint & GINTSTS_RXFLVL);
 8007580:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007582:	685b      	ldr	r3, [r3, #4]
 8007584:	f003 0310 	and.w	r3, r3, #16
 8007588:	2b00      	cmp	r3, #0
 800758a:	d1f5      	bne.n	8007578 <dcd_int_handler+0x288>

    // Manage RX FIFO size
    if (_out_ep_closed) {
 800758c:	4b15      	ldr	r3, [pc, #84]	; (80075e4 <dcd_int_handler+0x2f4>)
 800758e:	781b      	ldrb	r3, [r3, #0]
 8007590:	2b00      	cmp	r3, #0
 8007592:	d006      	beq.n	80075a2 <dcd_int_handler+0x2b2>
      update_grxfsiz(rhport);
 8007594:	79fb      	ldrb	r3, [r7, #7]
 8007596:	4618      	mov	r0, r3
 8007598:	f7fe fbec 	bl	8005d74 <update_grxfsiz>

      // Disable flag
      _out_ep_closed = false;
 800759c:	4b11      	ldr	r3, [pc, #68]	; (80075e4 <dcd_int_handler+0x2f4>)
 800759e:	2200      	movs	r2, #0
 80075a0:	701a      	strb	r2, [r3, #0]
    }

    dwc2->gintmsk |= GINTMSK_RXFLVLM;
 80075a2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80075a4:	699b      	ldr	r3, [r3, #24]
 80075a6:	f043 0210 	orr.w	r2, r3, #16
 80075aa:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80075ac:	619a      	str	r2, [r3, #24]
  }

  // OUT endpoint interrupt handling.
  if (int_status & GINTSTS_OEPINT) {
 80075ae:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80075b0:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80075b4:	2b00      	cmp	r3, #0
 80075b6:	d003      	beq.n	80075c0 <dcd_int_handler+0x2d0>
    // OEPINT is read-only, clear using DOEPINTn
    handle_epout_irq(rhport);
 80075b8:	79fb      	ldrb	r3, [r7, #7]
 80075ba:	4618      	mov	r0, r3
 80075bc:	f7ff fca6 	bl	8006f0c <handle_epout_irq>
  }

  // IN endpoint interrupt handling.
  if (int_status & GINTSTS_IEPINT) {
 80075c0:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80075c2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80075c6:	2b00      	cmp	r3, #0
 80075c8:	d003      	beq.n	80075d2 <dcd_int_handler+0x2e2>
    // IEPINT bit read-only, clear using DIEPINTn
    handle_epin_irq(rhport);
 80075ca:	79fb      	ldrb	r3, [r7, #7]
 80075cc:	4618      	mov	r0, r3
 80075ce:	f7ff fd6f 	bl	80070b0 <handle_epin_irq>
  //  // Check for Incomplete isochronous IN transfer
  //  if(int_status & GINTSTS_IISOIXFR) {
  //    printf("      IISOIXFR!\r\n");
  ////    TU_LOG(DWC2_DEBUG, "      IISOIXFR!\r\n");
  //  }
}
 80075d2:	bf00      	nop
 80075d4:	3780      	adds	r7, #128	; 0x80
 80075d6:	46bd      	mov	sp, r7
 80075d8:	bd80      	pop	{r7, pc}
 80075da:	bf00      	nop
 80075dc:	080101cc 	.word	0x080101cc
 80075e0:	24001417 	.word	0x24001417
 80075e4:	24001416 	.word	0x24001416

080075e8 <tu_edpt_claim>:
//--------------------------------------------------------------------+
// Endpoint Helper for both Host and Device stack
//--------------------------------------------------------------------+

bool tu_edpt_claim(tu_edpt_state_t* ep_state, osal_mutex_t mutex)
{
 80075e8:	b480      	push	{r7}
 80075ea:	b085      	sub	sp, #20
 80075ec:	af00      	add	r7, sp, #0
 80075ee:	6078      	str	r0, [r7, #4]
 80075f0:	6039      	str	r1, [r7, #0]
  (void) mutex;

  // pre-check to help reducing mutex lock
  TU_VERIFY((ep_state->busy == 0) && (ep_state->claimed == 0));
 80075f2:	687b      	ldr	r3, [r7, #4]
 80075f4:	781b      	ldrb	r3, [r3, #0]
 80075f6:	f3c3 0300 	ubfx	r3, r3, #0, #1
 80075fa:	b2db      	uxtb	r3, r3
 80075fc:	2b00      	cmp	r3, #0
 80075fe:	d106      	bne.n	800760e <tu_edpt_claim+0x26>
 8007600:	687b      	ldr	r3, [r7, #4]
 8007602:	781b      	ldrb	r3, [r3, #0]
 8007604:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8007608:	b2db      	uxtb	r3, r3
 800760a:	2b00      	cmp	r3, #0
 800760c:	d001      	beq.n	8007612 <tu_edpt_claim+0x2a>
 800760e:	2300      	movs	r3, #0
 8007610:	e01e      	b.n	8007650 <tu_edpt_claim+0x68>
  (void) osal_mutex_lock(mutex, OSAL_TIMEOUT_WAIT_FOREVER);

  // can only claim the endpoint if it is not busy and not claimed yet.
  bool const available = (ep_state->busy == 0) && (ep_state->claimed == 0);
 8007612:	687b      	ldr	r3, [r7, #4]
 8007614:	781b      	ldrb	r3, [r3, #0]
 8007616:	f3c3 0300 	ubfx	r3, r3, #0, #1
 800761a:	b2db      	uxtb	r3, r3
 800761c:	2b00      	cmp	r3, #0
 800761e:	d108      	bne.n	8007632 <tu_edpt_claim+0x4a>
 8007620:	687b      	ldr	r3, [r7, #4]
 8007622:	781b      	ldrb	r3, [r3, #0]
 8007624:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8007628:	b2db      	uxtb	r3, r3
 800762a:	2b00      	cmp	r3, #0
 800762c:	d101      	bne.n	8007632 <tu_edpt_claim+0x4a>
 800762e:	2301      	movs	r3, #1
 8007630:	e000      	b.n	8007634 <tu_edpt_claim+0x4c>
 8007632:	2300      	movs	r3, #0
 8007634:	73fb      	strb	r3, [r7, #15]
 8007636:	7bfb      	ldrb	r3, [r7, #15]
 8007638:	f003 0301 	and.w	r3, r3, #1
 800763c:	73fb      	strb	r3, [r7, #15]
  if (available)
 800763e:	7bfb      	ldrb	r3, [r7, #15]
 8007640:	2b00      	cmp	r3, #0
 8007642:	d004      	beq.n	800764e <tu_edpt_claim+0x66>
  {
    ep_state->claimed = 1;
 8007644:	687a      	ldr	r2, [r7, #4]
 8007646:	7813      	ldrb	r3, [r2, #0]
 8007648:	f043 0304 	orr.w	r3, r3, #4
 800764c:	7013      	strb	r3, [r2, #0]
  }

  (void) osal_mutex_unlock(mutex);

  return available;
 800764e:	7bfb      	ldrb	r3, [r7, #15]
}
 8007650:	4618      	mov	r0, r3
 8007652:	3714      	adds	r7, #20
 8007654:	46bd      	mov	sp, r7
 8007656:	f85d 7b04 	ldr.w	r7, [sp], #4
 800765a:	4770      	bx	lr

0800765c <tu_edpt_release>:

bool tu_edpt_release(tu_edpt_state_t* ep_state, osal_mutex_t mutex)
{
 800765c:	b480      	push	{r7}
 800765e:	b085      	sub	sp, #20
 8007660:	af00      	add	r7, sp, #0
 8007662:	6078      	str	r0, [r7, #4]
 8007664:	6039      	str	r1, [r7, #0]
  (void) mutex;

  (void) osal_mutex_lock(mutex, OSAL_TIMEOUT_WAIT_FOREVER);

  // can only release the endpoint if it is claimed and not busy
  bool const ret = (ep_state->claimed == 1) && (ep_state->busy == 0);
 8007666:	687b      	ldr	r3, [r7, #4]
 8007668:	781b      	ldrb	r3, [r3, #0]
 800766a:	f3c3 0380 	ubfx	r3, r3, #2, #1
 800766e:	b2db      	uxtb	r3, r3
 8007670:	2b01      	cmp	r3, #1
 8007672:	d108      	bne.n	8007686 <tu_edpt_release+0x2a>
 8007674:	687b      	ldr	r3, [r7, #4]
 8007676:	781b      	ldrb	r3, [r3, #0]
 8007678:	f3c3 0300 	ubfx	r3, r3, #0, #1
 800767c:	b2db      	uxtb	r3, r3
 800767e:	2b00      	cmp	r3, #0
 8007680:	d101      	bne.n	8007686 <tu_edpt_release+0x2a>
 8007682:	2301      	movs	r3, #1
 8007684:	e000      	b.n	8007688 <tu_edpt_release+0x2c>
 8007686:	2300      	movs	r3, #0
 8007688:	73fb      	strb	r3, [r7, #15]
 800768a:	7bfb      	ldrb	r3, [r7, #15]
 800768c:	f003 0301 	and.w	r3, r3, #1
 8007690:	73fb      	strb	r3, [r7, #15]
  if (ret)
 8007692:	7bfb      	ldrb	r3, [r7, #15]
 8007694:	2b00      	cmp	r3, #0
 8007696:	d004      	beq.n	80076a2 <tu_edpt_release+0x46>
  {
    ep_state->claimed = 0;
 8007698:	687a      	ldr	r2, [r7, #4]
 800769a:	7813      	ldrb	r3, [r2, #0]
 800769c:	f36f 0382 	bfc	r3, #2, #1
 80076a0:	7013      	strb	r3, [r2, #0]
  }

  (void) osal_mutex_unlock(mutex);

  return ret;
 80076a2:	7bfb      	ldrb	r3, [r7, #15]
}
 80076a4:	4618      	mov	r0, r3
 80076a6:	3714      	adds	r7, #20
 80076a8:	46bd      	mov	sp, r7
 80076aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076ae:	4770      	bx	lr

080076b0 <tu_edpt_validate>:

bool tu_edpt_validate(tusb_desc_endpoint_t const * desc_ep, tusb_speed_t speed)
{
 80076b0:	b480      	push	{r7}
 80076b2:	b08b      	sub	sp, #44	; 0x2c
 80076b4:	af00      	add	r7, sp, #0
 80076b6:	6078      	str	r0, [r7, #4]
 80076b8:	460b      	mov	r3, r1
 80076ba:	70fb      	strb	r3, [r7, #3]
 80076bc:	687b      	ldr	r3, [r7, #4]
 80076be:	60fb      	str	r3, [r7, #12]
  return tu_le16toh(desc_ep->wMaxPacketSize) & TU_GENMASK(10, 0);
 80076c0:	68fb      	ldr	r3, [r7, #12]
 80076c2:	889b      	ldrh	r3, [r3, #4]
 80076c4:	b29b      	uxth	r3, r3
 80076c6:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80076ca:	b29b      	uxth	r3, r3
  uint16_t const max_packet_size = tu_edpt_packet_size(desc_ep);
 80076cc:	84fb      	strh	r3, [r7, #38]	; 0x26
  TU_LOG2("  Open EP %02X with Size = %u\r\n", desc_ep->bEndpointAddress, max_packet_size);

  switch (desc_ep->bmAttributes.xfer)
 80076ce:	687b      	ldr	r3, [r7, #4]
 80076d0:	78db      	ldrb	r3, [r3, #3]
 80076d2:	f3c3 0301 	ubfx	r3, r3, #0, #2
 80076d6:	b2db      	uxtb	r3, r3
 80076d8:	2b03      	cmp	r3, #3
 80076da:	d03e      	beq.n	800775a <tu_edpt_validate+0xaa>
 80076dc:	2b03      	cmp	r3, #3
 80076de:	dc53      	bgt.n	8007788 <tu_edpt_validate+0xd8>
 80076e0:	2b01      	cmp	r3, #1
 80076e2:	d002      	beq.n	80076ea <tu_edpt_validate+0x3a>
 80076e4:	2b02      	cmp	r3, #2
 80076e6:	d018      	beq.n	800771a <tu_edpt_validate+0x6a>
 80076e8:	e04e      	b.n	8007788 <tu_edpt_validate+0xd8>
  {
    case TUSB_XFER_ISOCHRONOUS:
    {
      uint16_t const spec_size = (speed == TUSB_SPEED_HIGH ? 1024 : 1023);
 80076ea:	78fb      	ldrb	r3, [r7, #3]
 80076ec:	2b02      	cmp	r3, #2
 80076ee:	d102      	bne.n	80076f6 <tu_edpt_validate+0x46>
 80076f0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80076f4:	e001      	b.n	80076fa <tu_edpt_validate+0x4a>
 80076f6:	f240 33ff 	movw	r3, #1023	; 0x3ff
 80076fa:	82fb      	strh	r3, [r7, #22]
      TU_ASSERT(max_packet_size <= spec_size);
 80076fc:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 80076fe:	8afb      	ldrh	r3, [r7, #22]
 8007700:	429a      	cmp	r2, r3
 8007702:	d943      	bls.n	800778c <tu_edpt_validate+0xdc>
 8007704:	4b27      	ldr	r3, [pc, #156]	; (80077a4 <tu_edpt_validate+0xf4>)
 8007706:	613b      	str	r3, [r7, #16]
 8007708:	693b      	ldr	r3, [r7, #16]
 800770a:	681b      	ldr	r3, [r3, #0]
 800770c:	f003 0301 	and.w	r3, r3, #1
 8007710:	2b00      	cmp	r3, #0
 8007712:	d000      	beq.n	8007716 <tu_edpt_validate+0x66>
 8007714:	be00      	bkpt	0x0000
 8007716:	2300      	movs	r3, #0
 8007718:	e03e      	b.n	8007798 <tu_edpt_validate+0xe8>
    }
    break;

    case TUSB_XFER_BULK:
      if (speed == TUSB_SPEED_HIGH)
 800771a:	78fb      	ldrb	r3, [r7, #3]
 800771c:	2b02      	cmp	r3, #2
 800771e:	d10e      	bne.n	800773e <tu_edpt_validate+0x8e>
      {
        // Bulk highspeed must be EXACTLY 512
        TU_ASSERT(max_packet_size == 512);
 8007720:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8007722:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007726:	d033      	beq.n	8007790 <tu_edpt_validate+0xe0>
 8007728:	4b1e      	ldr	r3, [pc, #120]	; (80077a4 <tu_edpt_validate+0xf4>)
 800772a:	61bb      	str	r3, [r7, #24]
 800772c:	69bb      	ldr	r3, [r7, #24]
 800772e:	681b      	ldr	r3, [r3, #0]
 8007730:	f003 0301 	and.w	r3, r3, #1
 8007734:	2b00      	cmp	r3, #0
 8007736:	d000      	beq.n	800773a <tu_edpt_validate+0x8a>
 8007738:	be00      	bkpt	0x0000
 800773a:	2300      	movs	r3, #0
 800773c:	e02c      	b.n	8007798 <tu_edpt_validate+0xe8>
      }else
      {
        // TODO Bulk fullspeed can only be 8, 16, 32, 64
        TU_ASSERT(max_packet_size <= 64);
 800773e:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8007740:	2b40      	cmp	r3, #64	; 0x40
 8007742:	d925      	bls.n	8007790 <tu_edpt_validate+0xe0>
 8007744:	4b17      	ldr	r3, [pc, #92]	; (80077a4 <tu_edpt_validate+0xf4>)
 8007746:	61fb      	str	r3, [r7, #28]
 8007748:	69fb      	ldr	r3, [r7, #28]
 800774a:	681b      	ldr	r3, [r3, #0]
 800774c:	f003 0301 	and.w	r3, r3, #1
 8007750:	2b00      	cmp	r3, #0
 8007752:	d000      	beq.n	8007756 <tu_edpt_validate+0xa6>
 8007754:	be00      	bkpt	0x0000
 8007756:	2300      	movs	r3, #0
 8007758:	e01e      	b.n	8007798 <tu_edpt_validate+0xe8>
      }
    break;

    case TUSB_XFER_INTERRUPT:
    {
      uint16_t const spec_size = (speed == TUSB_SPEED_HIGH ? 1024 : 64);
 800775a:	78fb      	ldrb	r3, [r7, #3]
 800775c:	2b02      	cmp	r3, #2
 800775e:	d102      	bne.n	8007766 <tu_edpt_validate+0xb6>
 8007760:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007764:	e000      	b.n	8007768 <tu_edpt_validate+0xb8>
 8007766:	2340      	movs	r3, #64	; 0x40
 8007768:	84bb      	strh	r3, [r7, #36]	; 0x24
      TU_ASSERT(max_packet_size <= spec_size);
 800776a:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800776c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800776e:	429a      	cmp	r2, r3
 8007770:	d910      	bls.n	8007794 <tu_edpt_validate+0xe4>
 8007772:	4b0c      	ldr	r3, [pc, #48]	; (80077a4 <tu_edpt_validate+0xf4>)
 8007774:	623b      	str	r3, [r7, #32]
 8007776:	6a3b      	ldr	r3, [r7, #32]
 8007778:	681b      	ldr	r3, [r3, #0]
 800777a:	f003 0301 	and.w	r3, r3, #1
 800777e:	2b00      	cmp	r3, #0
 8007780:	d000      	beq.n	8007784 <tu_edpt_validate+0xd4>
 8007782:	be00      	bkpt	0x0000
 8007784:	2300      	movs	r3, #0
 8007786:	e007      	b.n	8007798 <tu_edpt_validate+0xe8>
    }
    break;

    default: return false;
 8007788:	2300      	movs	r3, #0
 800778a:	e005      	b.n	8007798 <tu_edpt_validate+0xe8>
    break;
 800778c:	bf00      	nop
 800778e:	e002      	b.n	8007796 <tu_edpt_validate+0xe6>
    break;
 8007790:	bf00      	nop
 8007792:	e000      	b.n	8007796 <tu_edpt_validate+0xe6>
    break;
 8007794:	bf00      	nop
  }

  return true;
 8007796:	2301      	movs	r3, #1
}
 8007798:	4618      	mov	r0, r3
 800779a:	372c      	adds	r7, #44	; 0x2c
 800779c:	46bd      	mov	sp, r7
 800779e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077a2:	4770      	bx	lr
 80077a4:	e000edf0 	.word	0xe000edf0

080077a8 <tu_edpt_bind_driver>:

void tu_edpt_bind_driver(uint8_t ep2drv[][2], tusb_desc_interface_t const* desc_itf, uint16_t desc_len, uint8_t driver_id)
{
 80077a8:	b480      	push	{r7}
 80077aa:	b08d      	sub	sp, #52	; 0x34
 80077ac:	af00      	add	r7, sp, #0
 80077ae:	60f8      	str	r0, [r7, #12]
 80077b0:	60b9      	str	r1, [r7, #8]
 80077b2:	4611      	mov	r1, r2
 80077b4:	461a      	mov	r2, r3
 80077b6:	460b      	mov	r3, r1
 80077b8:	80fb      	strh	r3, [r7, #6]
 80077ba:	4613      	mov	r3, r2
 80077bc:	717b      	strb	r3, [r7, #5]
  uint8_t const* p_desc = (uint8_t const*) desc_itf;
 80077be:	68bb      	ldr	r3, [r7, #8]
 80077c0:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint8_t const* desc_end = p_desc + desc_len;
 80077c2:	88fb      	ldrh	r3, [r7, #6]
 80077c4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80077c6:	4413      	add	r3, r2
 80077c8:	62bb      	str	r3, [r7, #40]	; 0x28

  while( p_desc < desc_end )
 80077ca:	e027      	b.n	800781c <tu_edpt_bind_driver+0x74>
 80077cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80077ce:	623b      	str	r3, [r7, #32]
  return ((uint8_t const*) desc)[DESC_OFFSET_TYPE];
 80077d0:	6a3b      	ldr	r3, [r7, #32]
 80077d2:	3301      	adds	r3, #1
 80077d4:	781b      	ldrb	r3, [r3, #0]
  {
    if ( TUSB_DESC_ENDPOINT == tu_desc_type(p_desc) )
 80077d6:	2b05      	cmp	r3, #5
 80077d8:	d116      	bne.n	8007808 <tu_edpt_bind_driver+0x60>
    {
      uint8_t const ep_addr = ((tusb_desc_endpoint_t const*) p_desc)->bEndpointAddress;
 80077da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80077dc:	789b      	ldrb	r3, [r3, #2]
 80077de:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80077e2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80077e6:	77bb      	strb	r3, [r7, #30]
  return (uint8_t)(addr & (~TUSB_DIR_IN_MASK));
 80077e8:	7fbb      	ldrb	r3, [r7, #30]
 80077ea:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80077ee:	b2db      	uxtb	r3, r3

      TU_LOG(2, "  Bind EP %02x to driver id %u\r\n", ep_addr, driver_id);
      ep2drv[tu_edpt_number(ep_addr)][tu_edpt_dir(ep_addr)] = driver_id;
 80077f0:	005b      	lsls	r3, r3, #1
 80077f2:	68fa      	ldr	r2, [r7, #12]
 80077f4:	4413      	add	r3, r2
 80077f6:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 80077fa:	77fa      	strb	r2, [r7, #31]
  return (addr & TUSB_DIR_IN_MASK) ? TUSB_DIR_IN : TUSB_DIR_OUT;
 80077fc:	7ffa      	ldrb	r2, [r7, #31]
 80077fe:	09d2      	lsrs	r2, r2, #7
 8007800:	b2d2      	uxtb	r2, r2
 8007802:	4611      	mov	r1, r2
 8007804:	797a      	ldrb	r2, [r7, #5]
 8007806:	545a      	strb	r2, [r3, r1]
 8007808:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800780a:	61bb      	str	r3, [r7, #24]
  uint8_t const* desc8 = (uint8_t const*) desc;
 800780c:	69bb      	ldr	r3, [r7, #24]
 800780e:	617b      	str	r3, [r7, #20]
  return desc8 + desc8[DESC_OFFSET_LEN];
 8007810:	697b      	ldr	r3, [r7, #20]
 8007812:	781b      	ldrb	r3, [r3, #0]
 8007814:	461a      	mov	r2, r3
 8007816:	697b      	ldr	r3, [r7, #20]
 8007818:	4413      	add	r3, r2
    }

    p_desc = tu_desc_next(p_desc);
 800781a:	62fb      	str	r3, [r7, #44]	; 0x2c
  while( p_desc < desc_end )
 800781c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800781e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007820:	429a      	cmp	r2, r3
 8007822:	d3d3      	bcc.n	80077cc <tu_edpt_bind_driver+0x24>
  }
}
 8007824:	bf00      	nop
 8007826:	bf00      	nop
 8007828:	3734      	adds	r7, #52	; 0x34
 800782a:	46bd      	mov	sp, r7
 800782c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007830:	4770      	bx	lr
	...

08007834 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8007834:	b580      	push	{r7, lr}
 8007836:	b082      	sub	sp, #8
 8007838:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800783a:	2003      	movs	r0, #3
 800783c:	f000 f98c 	bl	8007b58 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8007840:	f001 fbe8 	bl	8009014 <HAL_RCC_GetSysClockFreq>
 8007844:	4602      	mov	r2, r0
 8007846:	4b15      	ldr	r3, [pc, #84]	; (800789c <HAL_Init+0x68>)
 8007848:	699b      	ldr	r3, [r3, #24]
 800784a:	0a1b      	lsrs	r3, r3, #8
 800784c:	f003 030f 	and.w	r3, r3, #15
 8007850:	4913      	ldr	r1, [pc, #76]	; (80078a0 <HAL_Init+0x6c>)
 8007852:	5ccb      	ldrb	r3, [r1, r3]
 8007854:	f003 031f 	and.w	r3, r3, #31
 8007858:	fa22 f303 	lsr.w	r3, r2, r3
 800785c:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800785e:	4b0f      	ldr	r3, [pc, #60]	; (800789c <HAL_Init+0x68>)
 8007860:	699b      	ldr	r3, [r3, #24]
 8007862:	f003 030f 	and.w	r3, r3, #15
 8007866:	4a0e      	ldr	r2, [pc, #56]	; (80078a0 <HAL_Init+0x6c>)
 8007868:	5cd3      	ldrb	r3, [r2, r3]
 800786a:	f003 031f 	and.w	r3, r3, #31
 800786e:	687a      	ldr	r2, [r7, #4]
 8007870:	fa22 f303 	lsr.w	r3, r2, r3
 8007874:	4a0b      	ldr	r2, [pc, #44]	; (80078a4 <HAL_Init+0x70>)
 8007876:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8007878:	4a0b      	ldr	r2, [pc, #44]	; (80078a8 <HAL_Init+0x74>)
 800787a:	687b      	ldr	r3, [r7, #4]
 800787c:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800787e:	2000      	movs	r0, #0
 8007880:	f000 f814 	bl	80078ac <HAL_InitTick>
 8007884:	4603      	mov	r3, r0
 8007886:	2b00      	cmp	r3, #0
 8007888:	d001      	beq.n	800788e <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 800788a:	2301      	movs	r3, #1
 800788c:	e002      	b.n	8007894 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 800788e:	f7f9 fbd7 	bl	8001040 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8007892:	2300      	movs	r3, #0
}
 8007894:	4618      	mov	r0, r3
 8007896:	3708      	adds	r7, #8
 8007898:	46bd      	mov	sp, r7
 800789a:	bd80      	pop	{r7, pc}
 800789c:	58024400 	.word	0x58024400
 80078a0:	080100a0 	.word	0x080100a0
 80078a4:	24000004 	.word	0x24000004
 80078a8:	24000000 	.word	0x24000000

080078ac <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80078ac:	b580      	push	{r7, lr}
 80078ae:	b082      	sub	sp, #8
 80078b0:	af00      	add	r7, sp, #0
 80078b2:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 80078b4:	4b15      	ldr	r3, [pc, #84]	; (800790c <HAL_InitTick+0x60>)
 80078b6:	781b      	ldrb	r3, [r3, #0]
 80078b8:	2b00      	cmp	r3, #0
 80078ba:	d101      	bne.n	80078c0 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 80078bc:	2301      	movs	r3, #1
 80078be:	e021      	b.n	8007904 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 80078c0:	4b13      	ldr	r3, [pc, #76]	; (8007910 <HAL_InitTick+0x64>)
 80078c2:	681a      	ldr	r2, [r3, #0]
 80078c4:	4b11      	ldr	r3, [pc, #68]	; (800790c <HAL_InitTick+0x60>)
 80078c6:	781b      	ldrb	r3, [r3, #0]
 80078c8:	4619      	mov	r1, r3
 80078ca:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80078ce:	fbb3 f3f1 	udiv	r3, r3, r1
 80078d2:	fbb2 f3f3 	udiv	r3, r2, r3
 80078d6:	4618      	mov	r0, r3
 80078d8:	f000 f971 	bl	8007bbe <HAL_SYSTICK_Config>
 80078dc:	4603      	mov	r3, r0
 80078de:	2b00      	cmp	r3, #0
 80078e0:	d001      	beq.n	80078e6 <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 80078e2:	2301      	movs	r3, #1
 80078e4:	e00e      	b.n	8007904 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80078e6:	687b      	ldr	r3, [r7, #4]
 80078e8:	2b0f      	cmp	r3, #15
 80078ea:	d80a      	bhi.n	8007902 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80078ec:	2200      	movs	r2, #0
 80078ee:	6879      	ldr	r1, [r7, #4]
 80078f0:	f04f 30ff 	mov.w	r0, #4294967295
 80078f4:	f000 f93b 	bl	8007b6e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80078f8:	4a06      	ldr	r2, [pc, #24]	; (8007914 <HAL_InitTick+0x68>)
 80078fa:	687b      	ldr	r3, [r7, #4]
 80078fc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80078fe:	2300      	movs	r3, #0
 8007900:	e000      	b.n	8007904 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8007902:	2301      	movs	r3, #1
}
 8007904:	4618      	mov	r0, r3
 8007906:	3708      	adds	r7, #8
 8007908:	46bd      	mov	sp, r7
 800790a:	bd80      	pop	{r7, pc}
 800790c:	2400003c 	.word	0x2400003c
 8007910:	24000000 	.word	0x24000000
 8007914:	24000038 	.word	0x24000038

08007918 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8007918:	b480      	push	{r7}
 800791a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 800791c:	4b06      	ldr	r3, [pc, #24]	; (8007938 <HAL_IncTick+0x20>)
 800791e:	781b      	ldrb	r3, [r3, #0]
 8007920:	461a      	mov	r2, r3
 8007922:	4b06      	ldr	r3, [pc, #24]	; (800793c <HAL_IncTick+0x24>)
 8007924:	681b      	ldr	r3, [r3, #0]
 8007926:	4413      	add	r3, r2
 8007928:	4a04      	ldr	r2, [pc, #16]	; (800793c <HAL_IncTick+0x24>)
 800792a:	6013      	str	r3, [r2, #0]
}
 800792c:	bf00      	nop
 800792e:	46bd      	mov	sp, r7
 8007930:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007934:	4770      	bx	lr
 8007936:	bf00      	nop
 8007938:	2400003c 	.word	0x2400003c
 800793c:	24001418 	.word	0x24001418

08007940 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8007940:	b480      	push	{r7}
 8007942:	af00      	add	r7, sp, #0
  return uwTick;
 8007944:	4b03      	ldr	r3, [pc, #12]	; (8007954 <HAL_GetTick+0x14>)
 8007946:	681b      	ldr	r3, [r3, #0]
}
 8007948:	4618      	mov	r0, r3
 800794a:	46bd      	mov	sp, r7
 800794c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007950:	4770      	bx	lr
 8007952:	bf00      	nop
 8007954:	24001418 	.word	0x24001418

08007958 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8007958:	b580      	push	{r7, lr}
 800795a:	b084      	sub	sp, #16
 800795c:	af00      	add	r7, sp, #0
 800795e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8007960:	f7ff ffee 	bl	8007940 <HAL_GetTick>
 8007964:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8007966:	687b      	ldr	r3, [r7, #4]
 8007968:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800796a:	68fb      	ldr	r3, [r7, #12]
 800796c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007970:	d005      	beq.n	800797e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8007972:	4b0a      	ldr	r3, [pc, #40]	; (800799c <HAL_Delay+0x44>)
 8007974:	781b      	ldrb	r3, [r3, #0]
 8007976:	461a      	mov	r2, r3
 8007978:	68fb      	ldr	r3, [r7, #12]
 800797a:	4413      	add	r3, r2
 800797c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800797e:	bf00      	nop
 8007980:	f7ff ffde 	bl	8007940 <HAL_GetTick>
 8007984:	4602      	mov	r2, r0
 8007986:	68bb      	ldr	r3, [r7, #8]
 8007988:	1ad3      	subs	r3, r2, r3
 800798a:	68fa      	ldr	r2, [r7, #12]
 800798c:	429a      	cmp	r2, r3
 800798e:	d8f7      	bhi.n	8007980 <HAL_Delay+0x28>
  {
  }
}
 8007990:	bf00      	nop
 8007992:	bf00      	nop
 8007994:	3710      	adds	r7, #16
 8007996:	46bd      	mov	sp, r7
 8007998:	bd80      	pop	{r7, pc}
 800799a:	bf00      	nop
 800799c:	2400003c 	.word	0x2400003c

080079a0 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 80079a0:	b480      	push	{r7}
 80079a2:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 80079a4:	4b03      	ldr	r3, [pc, #12]	; (80079b4 <HAL_GetREVID+0x14>)
 80079a6:	681b      	ldr	r3, [r3, #0]
 80079a8:	0c1b      	lsrs	r3, r3, #16
}
 80079aa:	4618      	mov	r0, r3
 80079ac:	46bd      	mov	sp, r7
 80079ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079b2:	4770      	bx	lr
 80079b4:	5c001000 	.word	0x5c001000

080079b8 <__NVIC_SetPriorityGrouping>:
{
 80079b8:	b480      	push	{r7}
 80079ba:	b085      	sub	sp, #20
 80079bc:	af00      	add	r7, sp, #0
 80079be:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80079c0:	687b      	ldr	r3, [r7, #4]
 80079c2:	f003 0307 	and.w	r3, r3, #7
 80079c6:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80079c8:	4b0b      	ldr	r3, [pc, #44]	; (80079f8 <__NVIC_SetPriorityGrouping+0x40>)
 80079ca:	68db      	ldr	r3, [r3, #12]
 80079cc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80079ce:	68ba      	ldr	r2, [r7, #8]
 80079d0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80079d4:	4013      	ands	r3, r2
 80079d6:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80079d8:	68fb      	ldr	r3, [r7, #12]
 80079da:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80079dc:	68bb      	ldr	r3, [r7, #8]
 80079de:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80079e0:	4b06      	ldr	r3, [pc, #24]	; (80079fc <__NVIC_SetPriorityGrouping+0x44>)
 80079e2:	4313      	orrs	r3, r2
 80079e4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80079e6:	4a04      	ldr	r2, [pc, #16]	; (80079f8 <__NVIC_SetPriorityGrouping+0x40>)
 80079e8:	68bb      	ldr	r3, [r7, #8]
 80079ea:	60d3      	str	r3, [r2, #12]
}
 80079ec:	bf00      	nop
 80079ee:	3714      	adds	r7, #20
 80079f0:	46bd      	mov	sp, r7
 80079f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079f6:	4770      	bx	lr
 80079f8:	e000ed00 	.word	0xe000ed00
 80079fc:	05fa0000 	.word	0x05fa0000

08007a00 <__NVIC_GetPriorityGrouping>:
{
 8007a00:	b480      	push	{r7}
 8007a02:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8007a04:	4b04      	ldr	r3, [pc, #16]	; (8007a18 <__NVIC_GetPriorityGrouping+0x18>)
 8007a06:	68db      	ldr	r3, [r3, #12]
 8007a08:	0a1b      	lsrs	r3, r3, #8
 8007a0a:	f003 0307 	and.w	r3, r3, #7
}
 8007a0e:	4618      	mov	r0, r3
 8007a10:	46bd      	mov	sp, r7
 8007a12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a16:	4770      	bx	lr
 8007a18:	e000ed00 	.word	0xe000ed00

08007a1c <__NVIC_EnableIRQ>:
{
 8007a1c:	b480      	push	{r7}
 8007a1e:	b083      	sub	sp, #12
 8007a20:	af00      	add	r7, sp, #0
 8007a22:	4603      	mov	r3, r0
 8007a24:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8007a26:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8007a2a:	2b00      	cmp	r3, #0
 8007a2c:	db0b      	blt.n	8007a46 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8007a2e:	88fb      	ldrh	r3, [r7, #6]
 8007a30:	f003 021f 	and.w	r2, r3, #31
 8007a34:	4907      	ldr	r1, [pc, #28]	; (8007a54 <__NVIC_EnableIRQ+0x38>)
 8007a36:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8007a3a:	095b      	lsrs	r3, r3, #5
 8007a3c:	2001      	movs	r0, #1
 8007a3e:	fa00 f202 	lsl.w	r2, r0, r2
 8007a42:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8007a46:	bf00      	nop
 8007a48:	370c      	adds	r7, #12
 8007a4a:	46bd      	mov	sp, r7
 8007a4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a50:	4770      	bx	lr
 8007a52:	bf00      	nop
 8007a54:	e000e100 	.word	0xe000e100

08007a58 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8007a58:	b480      	push	{r7}
 8007a5a:	b083      	sub	sp, #12
 8007a5c:	af00      	add	r7, sp, #0
 8007a5e:	4603      	mov	r3, r0
 8007a60:	6039      	str	r1, [r7, #0]
 8007a62:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8007a64:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8007a68:	2b00      	cmp	r3, #0
 8007a6a:	db0a      	blt.n	8007a82 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8007a6c:	683b      	ldr	r3, [r7, #0]
 8007a6e:	b2da      	uxtb	r2, r3
 8007a70:	490c      	ldr	r1, [pc, #48]	; (8007aa4 <__NVIC_SetPriority+0x4c>)
 8007a72:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8007a76:	0112      	lsls	r2, r2, #4
 8007a78:	b2d2      	uxtb	r2, r2
 8007a7a:	440b      	add	r3, r1
 8007a7c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8007a80:	e00a      	b.n	8007a98 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8007a82:	683b      	ldr	r3, [r7, #0]
 8007a84:	b2da      	uxtb	r2, r3
 8007a86:	4908      	ldr	r1, [pc, #32]	; (8007aa8 <__NVIC_SetPriority+0x50>)
 8007a88:	88fb      	ldrh	r3, [r7, #6]
 8007a8a:	f003 030f 	and.w	r3, r3, #15
 8007a8e:	3b04      	subs	r3, #4
 8007a90:	0112      	lsls	r2, r2, #4
 8007a92:	b2d2      	uxtb	r2, r2
 8007a94:	440b      	add	r3, r1
 8007a96:	761a      	strb	r2, [r3, #24]
}
 8007a98:	bf00      	nop
 8007a9a:	370c      	adds	r7, #12
 8007a9c:	46bd      	mov	sp, r7
 8007a9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007aa2:	4770      	bx	lr
 8007aa4:	e000e100 	.word	0xe000e100
 8007aa8:	e000ed00 	.word	0xe000ed00

08007aac <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8007aac:	b480      	push	{r7}
 8007aae:	b089      	sub	sp, #36	; 0x24
 8007ab0:	af00      	add	r7, sp, #0
 8007ab2:	60f8      	str	r0, [r7, #12]
 8007ab4:	60b9      	str	r1, [r7, #8]
 8007ab6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8007ab8:	68fb      	ldr	r3, [r7, #12]
 8007aba:	f003 0307 	and.w	r3, r3, #7
 8007abe:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8007ac0:	69fb      	ldr	r3, [r7, #28]
 8007ac2:	f1c3 0307 	rsb	r3, r3, #7
 8007ac6:	2b04      	cmp	r3, #4
 8007ac8:	bf28      	it	cs
 8007aca:	2304      	movcs	r3, #4
 8007acc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8007ace:	69fb      	ldr	r3, [r7, #28]
 8007ad0:	3304      	adds	r3, #4
 8007ad2:	2b06      	cmp	r3, #6
 8007ad4:	d902      	bls.n	8007adc <NVIC_EncodePriority+0x30>
 8007ad6:	69fb      	ldr	r3, [r7, #28]
 8007ad8:	3b03      	subs	r3, #3
 8007ada:	e000      	b.n	8007ade <NVIC_EncodePriority+0x32>
 8007adc:	2300      	movs	r3, #0
 8007ade:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8007ae0:	f04f 32ff 	mov.w	r2, #4294967295
 8007ae4:	69bb      	ldr	r3, [r7, #24]
 8007ae6:	fa02 f303 	lsl.w	r3, r2, r3
 8007aea:	43da      	mvns	r2, r3
 8007aec:	68bb      	ldr	r3, [r7, #8]
 8007aee:	401a      	ands	r2, r3
 8007af0:	697b      	ldr	r3, [r7, #20]
 8007af2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8007af4:	f04f 31ff 	mov.w	r1, #4294967295
 8007af8:	697b      	ldr	r3, [r7, #20]
 8007afa:	fa01 f303 	lsl.w	r3, r1, r3
 8007afe:	43d9      	mvns	r1, r3
 8007b00:	687b      	ldr	r3, [r7, #4]
 8007b02:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8007b04:	4313      	orrs	r3, r2
         );
}
 8007b06:	4618      	mov	r0, r3
 8007b08:	3724      	adds	r7, #36	; 0x24
 8007b0a:	46bd      	mov	sp, r7
 8007b0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b10:	4770      	bx	lr
	...

08007b14 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8007b14:	b580      	push	{r7, lr}
 8007b16:	b082      	sub	sp, #8
 8007b18:	af00      	add	r7, sp, #0
 8007b1a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8007b1c:	687b      	ldr	r3, [r7, #4]
 8007b1e:	3b01      	subs	r3, #1
 8007b20:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8007b24:	d301      	bcc.n	8007b2a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8007b26:	2301      	movs	r3, #1
 8007b28:	e00f      	b.n	8007b4a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8007b2a:	4a0a      	ldr	r2, [pc, #40]	; (8007b54 <SysTick_Config+0x40>)
 8007b2c:	687b      	ldr	r3, [r7, #4]
 8007b2e:	3b01      	subs	r3, #1
 8007b30:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8007b32:	210f      	movs	r1, #15
 8007b34:	f04f 30ff 	mov.w	r0, #4294967295
 8007b38:	f7ff ff8e 	bl	8007a58 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8007b3c:	4b05      	ldr	r3, [pc, #20]	; (8007b54 <SysTick_Config+0x40>)
 8007b3e:	2200      	movs	r2, #0
 8007b40:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8007b42:	4b04      	ldr	r3, [pc, #16]	; (8007b54 <SysTick_Config+0x40>)
 8007b44:	2207      	movs	r2, #7
 8007b46:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8007b48:	2300      	movs	r3, #0
}
 8007b4a:	4618      	mov	r0, r3
 8007b4c:	3708      	adds	r7, #8
 8007b4e:	46bd      	mov	sp, r7
 8007b50:	bd80      	pop	{r7, pc}
 8007b52:	bf00      	nop
 8007b54:	e000e010 	.word	0xe000e010

08007b58 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8007b58:	b580      	push	{r7, lr}
 8007b5a:	b082      	sub	sp, #8
 8007b5c:	af00      	add	r7, sp, #0
 8007b5e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8007b60:	6878      	ldr	r0, [r7, #4]
 8007b62:	f7ff ff29 	bl	80079b8 <__NVIC_SetPriorityGrouping>
}
 8007b66:	bf00      	nop
 8007b68:	3708      	adds	r7, #8
 8007b6a:	46bd      	mov	sp, r7
 8007b6c:	bd80      	pop	{r7, pc}

08007b6e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8007b6e:	b580      	push	{r7, lr}
 8007b70:	b086      	sub	sp, #24
 8007b72:	af00      	add	r7, sp, #0
 8007b74:	4603      	mov	r3, r0
 8007b76:	60b9      	str	r1, [r7, #8]
 8007b78:	607a      	str	r2, [r7, #4]
 8007b7a:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8007b7c:	f7ff ff40 	bl	8007a00 <__NVIC_GetPriorityGrouping>
 8007b80:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8007b82:	687a      	ldr	r2, [r7, #4]
 8007b84:	68b9      	ldr	r1, [r7, #8]
 8007b86:	6978      	ldr	r0, [r7, #20]
 8007b88:	f7ff ff90 	bl	8007aac <NVIC_EncodePriority>
 8007b8c:	4602      	mov	r2, r0
 8007b8e:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8007b92:	4611      	mov	r1, r2
 8007b94:	4618      	mov	r0, r3
 8007b96:	f7ff ff5f 	bl	8007a58 <__NVIC_SetPriority>
}
 8007b9a:	bf00      	nop
 8007b9c:	3718      	adds	r7, #24
 8007b9e:	46bd      	mov	sp, r7
 8007ba0:	bd80      	pop	{r7, pc}

08007ba2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8007ba2:	b580      	push	{r7, lr}
 8007ba4:	b082      	sub	sp, #8
 8007ba6:	af00      	add	r7, sp, #0
 8007ba8:	4603      	mov	r3, r0
 8007baa:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8007bac:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8007bb0:	4618      	mov	r0, r3
 8007bb2:	f7ff ff33 	bl	8007a1c <__NVIC_EnableIRQ>
}
 8007bb6:	bf00      	nop
 8007bb8:	3708      	adds	r7, #8
 8007bba:	46bd      	mov	sp, r7
 8007bbc:	bd80      	pop	{r7, pc}

08007bbe <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8007bbe:	b580      	push	{r7, lr}
 8007bc0:	b082      	sub	sp, #8
 8007bc2:	af00      	add	r7, sp, #0
 8007bc4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8007bc6:	6878      	ldr	r0, [r7, #4]
 8007bc8:	f7ff ffa4 	bl	8007b14 <SysTick_Config>
 8007bcc:	4603      	mov	r3, r0
}
 8007bce:	4618      	mov	r0, r3
 8007bd0:	3708      	adds	r7, #8
 8007bd2:	46bd      	mov	sp, r7
 8007bd4:	bd80      	pop	{r7, pc}
	...

08007bd8 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8007bd8:	b480      	push	{r7}
 8007bda:	b089      	sub	sp, #36	; 0x24
 8007bdc:	af00      	add	r7, sp, #0
 8007bde:	6078      	str	r0, [r7, #4]
 8007be0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8007be2:	2300      	movs	r3, #0
 8007be4:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8007be6:	4b89      	ldr	r3, [pc, #548]	; (8007e0c <HAL_GPIO_Init+0x234>)
 8007be8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8007bea:	e194      	b.n	8007f16 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8007bec:	683b      	ldr	r3, [r7, #0]
 8007bee:	681a      	ldr	r2, [r3, #0]
 8007bf0:	2101      	movs	r1, #1
 8007bf2:	69fb      	ldr	r3, [r7, #28]
 8007bf4:	fa01 f303 	lsl.w	r3, r1, r3
 8007bf8:	4013      	ands	r3, r2
 8007bfa:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8007bfc:	693b      	ldr	r3, [r7, #16]
 8007bfe:	2b00      	cmp	r3, #0
 8007c00:	f000 8186 	beq.w	8007f10 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8007c04:	683b      	ldr	r3, [r7, #0]
 8007c06:	685b      	ldr	r3, [r3, #4]
 8007c08:	f003 0303 	and.w	r3, r3, #3
 8007c0c:	2b01      	cmp	r3, #1
 8007c0e:	d005      	beq.n	8007c1c <HAL_GPIO_Init+0x44>
 8007c10:	683b      	ldr	r3, [r7, #0]
 8007c12:	685b      	ldr	r3, [r3, #4]
 8007c14:	f003 0303 	and.w	r3, r3, #3
 8007c18:	2b02      	cmp	r3, #2
 8007c1a:	d130      	bne.n	8007c7e <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8007c1c:	687b      	ldr	r3, [r7, #4]
 8007c1e:	689b      	ldr	r3, [r3, #8]
 8007c20:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8007c22:	69fb      	ldr	r3, [r7, #28]
 8007c24:	005b      	lsls	r3, r3, #1
 8007c26:	2203      	movs	r2, #3
 8007c28:	fa02 f303 	lsl.w	r3, r2, r3
 8007c2c:	43db      	mvns	r3, r3
 8007c2e:	69ba      	ldr	r2, [r7, #24]
 8007c30:	4013      	ands	r3, r2
 8007c32:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8007c34:	683b      	ldr	r3, [r7, #0]
 8007c36:	68da      	ldr	r2, [r3, #12]
 8007c38:	69fb      	ldr	r3, [r7, #28]
 8007c3a:	005b      	lsls	r3, r3, #1
 8007c3c:	fa02 f303 	lsl.w	r3, r2, r3
 8007c40:	69ba      	ldr	r2, [r7, #24]
 8007c42:	4313      	orrs	r3, r2
 8007c44:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8007c46:	687b      	ldr	r3, [r7, #4]
 8007c48:	69ba      	ldr	r2, [r7, #24]
 8007c4a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8007c4c:	687b      	ldr	r3, [r7, #4]
 8007c4e:	685b      	ldr	r3, [r3, #4]
 8007c50:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8007c52:	2201      	movs	r2, #1
 8007c54:	69fb      	ldr	r3, [r7, #28]
 8007c56:	fa02 f303 	lsl.w	r3, r2, r3
 8007c5a:	43db      	mvns	r3, r3
 8007c5c:	69ba      	ldr	r2, [r7, #24]
 8007c5e:	4013      	ands	r3, r2
 8007c60:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8007c62:	683b      	ldr	r3, [r7, #0]
 8007c64:	685b      	ldr	r3, [r3, #4]
 8007c66:	091b      	lsrs	r3, r3, #4
 8007c68:	f003 0201 	and.w	r2, r3, #1
 8007c6c:	69fb      	ldr	r3, [r7, #28]
 8007c6e:	fa02 f303 	lsl.w	r3, r2, r3
 8007c72:	69ba      	ldr	r2, [r7, #24]
 8007c74:	4313      	orrs	r3, r2
 8007c76:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8007c78:	687b      	ldr	r3, [r7, #4]
 8007c7a:	69ba      	ldr	r2, [r7, #24]
 8007c7c:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8007c7e:	683b      	ldr	r3, [r7, #0]
 8007c80:	685b      	ldr	r3, [r3, #4]
 8007c82:	f003 0303 	and.w	r3, r3, #3
 8007c86:	2b03      	cmp	r3, #3
 8007c88:	d017      	beq.n	8007cba <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8007c8a:	687b      	ldr	r3, [r7, #4]
 8007c8c:	68db      	ldr	r3, [r3, #12]
 8007c8e:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8007c90:	69fb      	ldr	r3, [r7, #28]
 8007c92:	005b      	lsls	r3, r3, #1
 8007c94:	2203      	movs	r2, #3
 8007c96:	fa02 f303 	lsl.w	r3, r2, r3
 8007c9a:	43db      	mvns	r3, r3
 8007c9c:	69ba      	ldr	r2, [r7, #24]
 8007c9e:	4013      	ands	r3, r2
 8007ca0:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8007ca2:	683b      	ldr	r3, [r7, #0]
 8007ca4:	689a      	ldr	r2, [r3, #8]
 8007ca6:	69fb      	ldr	r3, [r7, #28]
 8007ca8:	005b      	lsls	r3, r3, #1
 8007caa:	fa02 f303 	lsl.w	r3, r2, r3
 8007cae:	69ba      	ldr	r2, [r7, #24]
 8007cb0:	4313      	orrs	r3, r2
 8007cb2:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8007cb4:	687b      	ldr	r3, [r7, #4]
 8007cb6:	69ba      	ldr	r2, [r7, #24]
 8007cb8:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8007cba:	683b      	ldr	r3, [r7, #0]
 8007cbc:	685b      	ldr	r3, [r3, #4]
 8007cbe:	f003 0303 	and.w	r3, r3, #3
 8007cc2:	2b02      	cmp	r3, #2
 8007cc4:	d123      	bne.n	8007d0e <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8007cc6:	69fb      	ldr	r3, [r7, #28]
 8007cc8:	08da      	lsrs	r2, r3, #3
 8007cca:	687b      	ldr	r3, [r7, #4]
 8007ccc:	3208      	adds	r2, #8
 8007cce:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007cd2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8007cd4:	69fb      	ldr	r3, [r7, #28]
 8007cd6:	f003 0307 	and.w	r3, r3, #7
 8007cda:	009b      	lsls	r3, r3, #2
 8007cdc:	220f      	movs	r2, #15
 8007cde:	fa02 f303 	lsl.w	r3, r2, r3
 8007ce2:	43db      	mvns	r3, r3
 8007ce4:	69ba      	ldr	r2, [r7, #24]
 8007ce6:	4013      	ands	r3, r2
 8007ce8:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8007cea:	683b      	ldr	r3, [r7, #0]
 8007cec:	691a      	ldr	r2, [r3, #16]
 8007cee:	69fb      	ldr	r3, [r7, #28]
 8007cf0:	f003 0307 	and.w	r3, r3, #7
 8007cf4:	009b      	lsls	r3, r3, #2
 8007cf6:	fa02 f303 	lsl.w	r3, r2, r3
 8007cfa:	69ba      	ldr	r2, [r7, #24]
 8007cfc:	4313      	orrs	r3, r2
 8007cfe:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8007d00:	69fb      	ldr	r3, [r7, #28]
 8007d02:	08da      	lsrs	r2, r3, #3
 8007d04:	687b      	ldr	r3, [r7, #4]
 8007d06:	3208      	adds	r2, #8
 8007d08:	69b9      	ldr	r1, [r7, #24]
 8007d0a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8007d0e:	687b      	ldr	r3, [r7, #4]
 8007d10:	681b      	ldr	r3, [r3, #0]
 8007d12:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8007d14:	69fb      	ldr	r3, [r7, #28]
 8007d16:	005b      	lsls	r3, r3, #1
 8007d18:	2203      	movs	r2, #3
 8007d1a:	fa02 f303 	lsl.w	r3, r2, r3
 8007d1e:	43db      	mvns	r3, r3
 8007d20:	69ba      	ldr	r2, [r7, #24]
 8007d22:	4013      	ands	r3, r2
 8007d24:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8007d26:	683b      	ldr	r3, [r7, #0]
 8007d28:	685b      	ldr	r3, [r3, #4]
 8007d2a:	f003 0203 	and.w	r2, r3, #3
 8007d2e:	69fb      	ldr	r3, [r7, #28]
 8007d30:	005b      	lsls	r3, r3, #1
 8007d32:	fa02 f303 	lsl.w	r3, r2, r3
 8007d36:	69ba      	ldr	r2, [r7, #24]
 8007d38:	4313      	orrs	r3, r2
 8007d3a:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8007d3c:	687b      	ldr	r3, [r7, #4]
 8007d3e:	69ba      	ldr	r2, [r7, #24]
 8007d40:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8007d42:	683b      	ldr	r3, [r7, #0]
 8007d44:	685b      	ldr	r3, [r3, #4]
 8007d46:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8007d4a:	2b00      	cmp	r3, #0
 8007d4c:	f000 80e0 	beq.w	8007f10 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8007d50:	4b2f      	ldr	r3, [pc, #188]	; (8007e10 <HAL_GPIO_Init+0x238>)
 8007d52:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8007d56:	4a2e      	ldr	r2, [pc, #184]	; (8007e10 <HAL_GPIO_Init+0x238>)
 8007d58:	f043 0302 	orr.w	r3, r3, #2
 8007d5c:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8007d60:	4b2b      	ldr	r3, [pc, #172]	; (8007e10 <HAL_GPIO_Init+0x238>)
 8007d62:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8007d66:	f003 0302 	and.w	r3, r3, #2
 8007d6a:	60fb      	str	r3, [r7, #12]
 8007d6c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8007d6e:	4a29      	ldr	r2, [pc, #164]	; (8007e14 <HAL_GPIO_Init+0x23c>)
 8007d70:	69fb      	ldr	r3, [r7, #28]
 8007d72:	089b      	lsrs	r3, r3, #2
 8007d74:	3302      	adds	r3, #2
 8007d76:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007d7a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8007d7c:	69fb      	ldr	r3, [r7, #28]
 8007d7e:	f003 0303 	and.w	r3, r3, #3
 8007d82:	009b      	lsls	r3, r3, #2
 8007d84:	220f      	movs	r2, #15
 8007d86:	fa02 f303 	lsl.w	r3, r2, r3
 8007d8a:	43db      	mvns	r3, r3
 8007d8c:	69ba      	ldr	r2, [r7, #24]
 8007d8e:	4013      	ands	r3, r2
 8007d90:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8007d92:	687b      	ldr	r3, [r7, #4]
 8007d94:	4a20      	ldr	r2, [pc, #128]	; (8007e18 <HAL_GPIO_Init+0x240>)
 8007d96:	4293      	cmp	r3, r2
 8007d98:	d052      	beq.n	8007e40 <HAL_GPIO_Init+0x268>
 8007d9a:	687b      	ldr	r3, [r7, #4]
 8007d9c:	4a1f      	ldr	r2, [pc, #124]	; (8007e1c <HAL_GPIO_Init+0x244>)
 8007d9e:	4293      	cmp	r3, r2
 8007da0:	d031      	beq.n	8007e06 <HAL_GPIO_Init+0x22e>
 8007da2:	687b      	ldr	r3, [r7, #4]
 8007da4:	4a1e      	ldr	r2, [pc, #120]	; (8007e20 <HAL_GPIO_Init+0x248>)
 8007da6:	4293      	cmp	r3, r2
 8007da8:	d02b      	beq.n	8007e02 <HAL_GPIO_Init+0x22a>
 8007daa:	687b      	ldr	r3, [r7, #4]
 8007dac:	4a1d      	ldr	r2, [pc, #116]	; (8007e24 <HAL_GPIO_Init+0x24c>)
 8007dae:	4293      	cmp	r3, r2
 8007db0:	d025      	beq.n	8007dfe <HAL_GPIO_Init+0x226>
 8007db2:	687b      	ldr	r3, [r7, #4]
 8007db4:	4a1c      	ldr	r2, [pc, #112]	; (8007e28 <HAL_GPIO_Init+0x250>)
 8007db6:	4293      	cmp	r3, r2
 8007db8:	d01f      	beq.n	8007dfa <HAL_GPIO_Init+0x222>
 8007dba:	687b      	ldr	r3, [r7, #4]
 8007dbc:	4a1b      	ldr	r2, [pc, #108]	; (8007e2c <HAL_GPIO_Init+0x254>)
 8007dbe:	4293      	cmp	r3, r2
 8007dc0:	d019      	beq.n	8007df6 <HAL_GPIO_Init+0x21e>
 8007dc2:	687b      	ldr	r3, [r7, #4]
 8007dc4:	4a1a      	ldr	r2, [pc, #104]	; (8007e30 <HAL_GPIO_Init+0x258>)
 8007dc6:	4293      	cmp	r3, r2
 8007dc8:	d013      	beq.n	8007df2 <HAL_GPIO_Init+0x21a>
 8007dca:	687b      	ldr	r3, [r7, #4]
 8007dcc:	4a19      	ldr	r2, [pc, #100]	; (8007e34 <HAL_GPIO_Init+0x25c>)
 8007dce:	4293      	cmp	r3, r2
 8007dd0:	d00d      	beq.n	8007dee <HAL_GPIO_Init+0x216>
 8007dd2:	687b      	ldr	r3, [r7, #4]
 8007dd4:	4a18      	ldr	r2, [pc, #96]	; (8007e38 <HAL_GPIO_Init+0x260>)
 8007dd6:	4293      	cmp	r3, r2
 8007dd8:	d007      	beq.n	8007dea <HAL_GPIO_Init+0x212>
 8007dda:	687b      	ldr	r3, [r7, #4]
 8007ddc:	4a17      	ldr	r2, [pc, #92]	; (8007e3c <HAL_GPIO_Init+0x264>)
 8007dde:	4293      	cmp	r3, r2
 8007de0:	d101      	bne.n	8007de6 <HAL_GPIO_Init+0x20e>
 8007de2:	2309      	movs	r3, #9
 8007de4:	e02d      	b.n	8007e42 <HAL_GPIO_Init+0x26a>
 8007de6:	230a      	movs	r3, #10
 8007de8:	e02b      	b.n	8007e42 <HAL_GPIO_Init+0x26a>
 8007dea:	2308      	movs	r3, #8
 8007dec:	e029      	b.n	8007e42 <HAL_GPIO_Init+0x26a>
 8007dee:	2307      	movs	r3, #7
 8007df0:	e027      	b.n	8007e42 <HAL_GPIO_Init+0x26a>
 8007df2:	2306      	movs	r3, #6
 8007df4:	e025      	b.n	8007e42 <HAL_GPIO_Init+0x26a>
 8007df6:	2305      	movs	r3, #5
 8007df8:	e023      	b.n	8007e42 <HAL_GPIO_Init+0x26a>
 8007dfa:	2304      	movs	r3, #4
 8007dfc:	e021      	b.n	8007e42 <HAL_GPIO_Init+0x26a>
 8007dfe:	2303      	movs	r3, #3
 8007e00:	e01f      	b.n	8007e42 <HAL_GPIO_Init+0x26a>
 8007e02:	2302      	movs	r3, #2
 8007e04:	e01d      	b.n	8007e42 <HAL_GPIO_Init+0x26a>
 8007e06:	2301      	movs	r3, #1
 8007e08:	e01b      	b.n	8007e42 <HAL_GPIO_Init+0x26a>
 8007e0a:	bf00      	nop
 8007e0c:	58000080 	.word	0x58000080
 8007e10:	58024400 	.word	0x58024400
 8007e14:	58000400 	.word	0x58000400
 8007e18:	58020000 	.word	0x58020000
 8007e1c:	58020400 	.word	0x58020400
 8007e20:	58020800 	.word	0x58020800
 8007e24:	58020c00 	.word	0x58020c00
 8007e28:	58021000 	.word	0x58021000
 8007e2c:	58021400 	.word	0x58021400
 8007e30:	58021800 	.word	0x58021800
 8007e34:	58021c00 	.word	0x58021c00
 8007e38:	58022000 	.word	0x58022000
 8007e3c:	58022400 	.word	0x58022400
 8007e40:	2300      	movs	r3, #0
 8007e42:	69fa      	ldr	r2, [r7, #28]
 8007e44:	f002 0203 	and.w	r2, r2, #3
 8007e48:	0092      	lsls	r2, r2, #2
 8007e4a:	4093      	lsls	r3, r2
 8007e4c:	69ba      	ldr	r2, [r7, #24]
 8007e4e:	4313      	orrs	r3, r2
 8007e50:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8007e52:	4938      	ldr	r1, [pc, #224]	; (8007f34 <HAL_GPIO_Init+0x35c>)
 8007e54:	69fb      	ldr	r3, [r7, #28]
 8007e56:	089b      	lsrs	r3, r3, #2
 8007e58:	3302      	adds	r3, #2
 8007e5a:	69ba      	ldr	r2, [r7, #24]
 8007e5c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8007e60:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007e64:	681b      	ldr	r3, [r3, #0]
 8007e66:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8007e68:	693b      	ldr	r3, [r7, #16]
 8007e6a:	43db      	mvns	r3, r3
 8007e6c:	69ba      	ldr	r2, [r7, #24]
 8007e6e:	4013      	ands	r3, r2
 8007e70:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8007e72:	683b      	ldr	r3, [r7, #0]
 8007e74:	685b      	ldr	r3, [r3, #4]
 8007e76:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8007e7a:	2b00      	cmp	r3, #0
 8007e7c:	d003      	beq.n	8007e86 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8007e7e:	69ba      	ldr	r2, [r7, #24]
 8007e80:	693b      	ldr	r3, [r7, #16]
 8007e82:	4313      	orrs	r3, r2
 8007e84:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8007e86:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8007e8a:	69bb      	ldr	r3, [r7, #24]
 8007e8c:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8007e8e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007e92:	685b      	ldr	r3, [r3, #4]
 8007e94:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8007e96:	693b      	ldr	r3, [r7, #16]
 8007e98:	43db      	mvns	r3, r3
 8007e9a:	69ba      	ldr	r2, [r7, #24]
 8007e9c:	4013      	ands	r3, r2
 8007e9e:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8007ea0:	683b      	ldr	r3, [r7, #0]
 8007ea2:	685b      	ldr	r3, [r3, #4]
 8007ea4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8007ea8:	2b00      	cmp	r3, #0
 8007eaa:	d003      	beq.n	8007eb4 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8007eac:	69ba      	ldr	r2, [r7, #24]
 8007eae:	693b      	ldr	r3, [r7, #16]
 8007eb0:	4313      	orrs	r3, r2
 8007eb2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8007eb4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8007eb8:	69bb      	ldr	r3, [r7, #24]
 8007eba:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8007ebc:	697b      	ldr	r3, [r7, #20]
 8007ebe:	685b      	ldr	r3, [r3, #4]
 8007ec0:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8007ec2:	693b      	ldr	r3, [r7, #16]
 8007ec4:	43db      	mvns	r3, r3
 8007ec6:	69ba      	ldr	r2, [r7, #24]
 8007ec8:	4013      	ands	r3, r2
 8007eca:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8007ecc:	683b      	ldr	r3, [r7, #0]
 8007ece:	685b      	ldr	r3, [r3, #4]
 8007ed0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007ed4:	2b00      	cmp	r3, #0
 8007ed6:	d003      	beq.n	8007ee0 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8007ed8:	69ba      	ldr	r2, [r7, #24]
 8007eda:	693b      	ldr	r3, [r7, #16]
 8007edc:	4313      	orrs	r3, r2
 8007ede:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8007ee0:	697b      	ldr	r3, [r7, #20]
 8007ee2:	69ba      	ldr	r2, [r7, #24]
 8007ee4:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8007ee6:	697b      	ldr	r3, [r7, #20]
 8007ee8:	681b      	ldr	r3, [r3, #0]
 8007eea:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8007eec:	693b      	ldr	r3, [r7, #16]
 8007eee:	43db      	mvns	r3, r3
 8007ef0:	69ba      	ldr	r2, [r7, #24]
 8007ef2:	4013      	ands	r3, r2
 8007ef4:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8007ef6:	683b      	ldr	r3, [r7, #0]
 8007ef8:	685b      	ldr	r3, [r3, #4]
 8007efa:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007efe:	2b00      	cmp	r3, #0
 8007f00:	d003      	beq.n	8007f0a <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 8007f02:	69ba      	ldr	r2, [r7, #24]
 8007f04:	693b      	ldr	r3, [r7, #16]
 8007f06:	4313      	orrs	r3, r2
 8007f08:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8007f0a:	697b      	ldr	r3, [r7, #20]
 8007f0c:	69ba      	ldr	r2, [r7, #24]
 8007f0e:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8007f10:	69fb      	ldr	r3, [r7, #28]
 8007f12:	3301      	adds	r3, #1
 8007f14:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8007f16:	683b      	ldr	r3, [r7, #0]
 8007f18:	681a      	ldr	r2, [r3, #0]
 8007f1a:	69fb      	ldr	r3, [r7, #28]
 8007f1c:	fa22 f303 	lsr.w	r3, r2, r3
 8007f20:	2b00      	cmp	r3, #0
 8007f22:	f47f ae63 	bne.w	8007bec <HAL_GPIO_Init+0x14>
  }
}
 8007f26:	bf00      	nop
 8007f28:	bf00      	nop
 8007f2a:	3724      	adds	r7, #36	; 0x24
 8007f2c:	46bd      	mov	sp, r7
 8007f2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f32:	4770      	bx	lr
 8007f34:	58000400 	.word	0x58000400

08007f38 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8007f38:	b480      	push	{r7}
 8007f3a:	b085      	sub	sp, #20
 8007f3c:	af00      	add	r7, sp, #0
 8007f3e:	6078      	str	r0, [r7, #4]
 8007f40:	460b      	mov	r3, r1
 8007f42:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 8007f44:	687b      	ldr	r3, [r7, #4]
 8007f46:	691a      	ldr	r2, [r3, #16]
 8007f48:	887b      	ldrh	r3, [r7, #2]
 8007f4a:	4013      	ands	r3, r2
 8007f4c:	2b00      	cmp	r3, #0
 8007f4e:	d002      	beq.n	8007f56 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8007f50:	2301      	movs	r3, #1
 8007f52:	73fb      	strb	r3, [r7, #15]
 8007f54:	e001      	b.n	8007f5a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8007f56:	2300      	movs	r3, #0
 8007f58:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8007f5a:	7bfb      	ldrb	r3, [r7, #15]
}
 8007f5c:	4618      	mov	r0, r3
 8007f5e:	3714      	adds	r7, #20
 8007f60:	46bd      	mov	sp, r7
 8007f62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f66:	4770      	bx	lr

08007f68 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8007f68:	b480      	push	{r7}
 8007f6a:	b083      	sub	sp, #12
 8007f6c:	af00      	add	r7, sp, #0
 8007f6e:	6078      	str	r0, [r7, #4]
 8007f70:	460b      	mov	r3, r1
 8007f72:	807b      	strh	r3, [r7, #2]
 8007f74:	4613      	mov	r3, r2
 8007f76:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8007f78:	787b      	ldrb	r3, [r7, #1]
 8007f7a:	2b00      	cmp	r3, #0
 8007f7c:	d003      	beq.n	8007f86 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8007f7e:	887a      	ldrh	r2, [r7, #2]
 8007f80:	687b      	ldr	r3, [r7, #4]
 8007f82:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8007f84:	e003      	b.n	8007f8e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8007f86:	887b      	ldrh	r3, [r7, #2]
 8007f88:	041a      	lsls	r2, r3, #16
 8007f8a:	687b      	ldr	r3, [r7, #4]
 8007f8c:	619a      	str	r2, [r3, #24]
}
 8007f8e:	bf00      	nop
 8007f90:	370c      	adds	r7, #12
 8007f92:	46bd      	mov	sp, r7
 8007f94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f98:	4770      	bx	lr

08007f9a <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8007f9a:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007f9c:	b08f      	sub	sp, #60	; 0x3c
 8007f9e:	af0a      	add	r7, sp, #40	; 0x28
 8007fa0:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8007fa2:	687b      	ldr	r3, [r7, #4]
 8007fa4:	2b00      	cmp	r3, #0
 8007fa6:	d101      	bne.n	8007fac <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8007fa8:	2301      	movs	r3, #1
 8007faa:	e116      	b.n	80081da <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8007fac:	687b      	ldr	r3, [r7, #4]
 8007fae:	681b      	ldr	r3, [r3, #0]
 8007fb0:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8007fb2:	687b      	ldr	r3, [r7, #4]
 8007fb4:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 8007fb8:	b2db      	uxtb	r3, r3
 8007fba:	2b00      	cmp	r3, #0
 8007fbc:	d106      	bne.n	8007fcc <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8007fbe:	687b      	ldr	r3, [r7, #4]
 8007fc0:	2200      	movs	r2, #0
 8007fc2:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8007fc6:	6878      	ldr	r0, [r7, #4]
 8007fc8:	f7f9 f934 	bl	8001234 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8007fcc:	687b      	ldr	r3, [r7, #4]
 8007fce:	2203      	movs	r2, #3
 8007fd0:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8007fd4:	68bb      	ldr	r3, [r7, #8]
 8007fd6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007fd8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007fdc:	2b00      	cmp	r3, #0
 8007fde:	d102      	bne.n	8007fe6 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8007fe0:	687b      	ldr	r3, [r7, #4]
 8007fe2:	2200      	movs	r2, #0
 8007fe4:	60da      	str	r2, [r3, #12]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8007fe6:	687b      	ldr	r3, [r7, #4]
 8007fe8:	681b      	ldr	r3, [r3, #0]
 8007fea:	4618      	mov	r0, r3
 8007fec:	f007 fa98 	bl	800f520 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8007ff0:	687b      	ldr	r3, [r7, #4]
 8007ff2:	681b      	ldr	r3, [r3, #0]
 8007ff4:	603b      	str	r3, [r7, #0]
 8007ff6:	687e      	ldr	r6, [r7, #4]
 8007ff8:	466d      	mov	r5, sp
 8007ffa:	f106 0410 	add.w	r4, r6, #16
 8007ffe:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8008000:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8008002:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8008004:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8008006:	e894 0003 	ldmia.w	r4, {r0, r1}
 800800a:	e885 0003 	stmia.w	r5, {r0, r1}
 800800e:	1d33      	adds	r3, r6, #4
 8008010:	cb0e      	ldmia	r3, {r1, r2, r3}
 8008012:	6838      	ldr	r0, [r7, #0]
 8008014:	f007 fa16 	bl	800f444 <USB_CoreInit>
 8008018:	4603      	mov	r3, r0
 800801a:	2b00      	cmp	r3, #0
 800801c:	d005      	beq.n	800802a <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800801e:	687b      	ldr	r3, [r7, #4]
 8008020:	2202      	movs	r2, #2
 8008022:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8008026:	2301      	movs	r3, #1
 8008028:	e0d7      	b.n	80081da <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 800802a:	687b      	ldr	r3, [r7, #4]
 800802c:	681b      	ldr	r3, [r3, #0]
 800802e:	2100      	movs	r1, #0
 8008030:	4618      	mov	r0, r3
 8008032:	f007 fa86 	bl	800f542 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8008036:	2300      	movs	r3, #0
 8008038:	73fb      	strb	r3, [r7, #15]
 800803a:	e04a      	b.n	80080d2 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 800803c:	7bfa      	ldrb	r2, [r7, #15]
 800803e:	6879      	ldr	r1, [r7, #4]
 8008040:	4613      	mov	r3, r2
 8008042:	00db      	lsls	r3, r3, #3
 8008044:	4413      	add	r3, r2
 8008046:	009b      	lsls	r3, r3, #2
 8008048:	440b      	add	r3, r1
 800804a:	333d      	adds	r3, #61	; 0x3d
 800804c:	2201      	movs	r2, #1
 800804e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8008050:	7bfa      	ldrb	r2, [r7, #15]
 8008052:	6879      	ldr	r1, [r7, #4]
 8008054:	4613      	mov	r3, r2
 8008056:	00db      	lsls	r3, r3, #3
 8008058:	4413      	add	r3, r2
 800805a:	009b      	lsls	r3, r3, #2
 800805c:	440b      	add	r3, r1
 800805e:	333c      	adds	r3, #60	; 0x3c
 8008060:	7bfa      	ldrb	r2, [r7, #15]
 8008062:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8008064:	7bfa      	ldrb	r2, [r7, #15]
 8008066:	7bfb      	ldrb	r3, [r7, #15]
 8008068:	b298      	uxth	r0, r3
 800806a:	6879      	ldr	r1, [r7, #4]
 800806c:	4613      	mov	r3, r2
 800806e:	00db      	lsls	r3, r3, #3
 8008070:	4413      	add	r3, r2
 8008072:	009b      	lsls	r3, r3, #2
 8008074:	440b      	add	r3, r1
 8008076:	3356      	adds	r3, #86	; 0x56
 8008078:	4602      	mov	r2, r0
 800807a:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800807c:	7bfa      	ldrb	r2, [r7, #15]
 800807e:	6879      	ldr	r1, [r7, #4]
 8008080:	4613      	mov	r3, r2
 8008082:	00db      	lsls	r3, r3, #3
 8008084:	4413      	add	r3, r2
 8008086:	009b      	lsls	r3, r3, #2
 8008088:	440b      	add	r3, r1
 800808a:	3340      	adds	r3, #64	; 0x40
 800808c:	2200      	movs	r2, #0
 800808e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8008090:	7bfa      	ldrb	r2, [r7, #15]
 8008092:	6879      	ldr	r1, [r7, #4]
 8008094:	4613      	mov	r3, r2
 8008096:	00db      	lsls	r3, r3, #3
 8008098:	4413      	add	r3, r2
 800809a:	009b      	lsls	r3, r3, #2
 800809c:	440b      	add	r3, r1
 800809e:	3344      	adds	r3, #68	; 0x44
 80080a0:	2200      	movs	r2, #0
 80080a2:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80080a4:	7bfa      	ldrb	r2, [r7, #15]
 80080a6:	6879      	ldr	r1, [r7, #4]
 80080a8:	4613      	mov	r3, r2
 80080aa:	00db      	lsls	r3, r3, #3
 80080ac:	4413      	add	r3, r2
 80080ae:	009b      	lsls	r3, r3, #2
 80080b0:	440b      	add	r3, r1
 80080b2:	3348      	adds	r3, #72	; 0x48
 80080b4:	2200      	movs	r2, #0
 80080b6:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80080b8:	7bfa      	ldrb	r2, [r7, #15]
 80080ba:	6879      	ldr	r1, [r7, #4]
 80080bc:	4613      	mov	r3, r2
 80080be:	00db      	lsls	r3, r3, #3
 80080c0:	4413      	add	r3, r2
 80080c2:	009b      	lsls	r3, r3, #2
 80080c4:	440b      	add	r3, r1
 80080c6:	334c      	adds	r3, #76	; 0x4c
 80080c8:	2200      	movs	r2, #0
 80080ca:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80080cc:	7bfb      	ldrb	r3, [r7, #15]
 80080ce:	3301      	adds	r3, #1
 80080d0:	73fb      	strb	r3, [r7, #15]
 80080d2:	7bfa      	ldrb	r2, [r7, #15]
 80080d4:	687b      	ldr	r3, [r7, #4]
 80080d6:	685b      	ldr	r3, [r3, #4]
 80080d8:	429a      	cmp	r2, r3
 80080da:	d3af      	bcc.n	800803c <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80080dc:	2300      	movs	r3, #0
 80080de:	73fb      	strb	r3, [r7, #15]
 80080e0:	e044      	b.n	800816c <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80080e2:	7bfa      	ldrb	r2, [r7, #15]
 80080e4:	6879      	ldr	r1, [r7, #4]
 80080e6:	4613      	mov	r3, r2
 80080e8:	00db      	lsls	r3, r3, #3
 80080ea:	4413      	add	r3, r2
 80080ec:	009b      	lsls	r3, r3, #2
 80080ee:	440b      	add	r3, r1
 80080f0:	f203 237d 	addw	r3, r3, #637	; 0x27d
 80080f4:	2200      	movs	r2, #0
 80080f6:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80080f8:	7bfa      	ldrb	r2, [r7, #15]
 80080fa:	6879      	ldr	r1, [r7, #4]
 80080fc:	4613      	mov	r3, r2
 80080fe:	00db      	lsls	r3, r3, #3
 8008100:	4413      	add	r3, r2
 8008102:	009b      	lsls	r3, r3, #2
 8008104:	440b      	add	r3, r1
 8008106:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 800810a:	7bfa      	ldrb	r2, [r7, #15]
 800810c:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800810e:	7bfa      	ldrb	r2, [r7, #15]
 8008110:	6879      	ldr	r1, [r7, #4]
 8008112:	4613      	mov	r3, r2
 8008114:	00db      	lsls	r3, r3, #3
 8008116:	4413      	add	r3, r2
 8008118:	009b      	lsls	r3, r3, #2
 800811a:	440b      	add	r3, r1
 800811c:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8008120:	2200      	movs	r2, #0
 8008122:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8008124:	7bfa      	ldrb	r2, [r7, #15]
 8008126:	6879      	ldr	r1, [r7, #4]
 8008128:	4613      	mov	r3, r2
 800812a:	00db      	lsls	r3, r3, #3
 800812c:	4413      	add	r3, r2
 800812e:	009b      	lsls	r3, r3, #2
 8008130:	440b      	add	r3, r1
 8008132:	f503 7321 	add.w	r3, r3, #644	; 0x284
 8008136:	2200      	movs	r2, #0
 8008138:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800813a:	7bfa      	ldrb	r2, [r7, #15]
 800813c:	6879      	ldr	r1, [r7, #4]
 800813e:	4613      	mov	r3, r2
 8008140:	00db      	lsls	r3, r3, #3
 8008142:	4413      	add	r3, r2
 8008144:	009b      	lsls	r3, r3, #2
 8008146:	440b      	add	r3, r1
 8008148:	f503 7322 	add.w	r3, r3, #648	; 0x288
 800814c:	2200      	movs	r2, #0
 800814e:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8008150:	7bfa      	ldrb	r2, [r7, #15]
 8008152:	6879      	ldr	r1, [r7, #4]
 8008154:	4613      	mov	r3, r2
 8008156:	00db      	lsls	r3, r3, #3
 8008158:	4413      	add	r3, r2
 800815a:	009b      	lsls	r3, r3, #2
 800815c:	440b      	add	r3, r1
 800815e:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8008162:	2200      	movs	r2, #0
 8008164:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8008166:	7bfb      	ldrb	r3, [r7, #15]
 8008168:	3301      	adds	r3, #1
 800816a:	73fb      	strb	r3, [r7, #15]
 800816c:	7bfa      	ldrb	r2, [r7, #15]
 800816e:	687b      	ldr	r3, [r7, #4]
 8008170:	685b      	ldr	r3, [r3, #4]
 8008172:	429a      	cmp	r2, r3
 8008174:	d3b5      	bcc.n	80080e2 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8008176:	687b      	ldr	r3, [r7, #4]
 8008178:	681b      	ldr	r3, [r3, #0]
 800817a:	603b      	str	r3, [r7, #0]
 800817c:	687e      	ldr	r6, [r7, #4]
 800817e:	466d      	mov	r5, sp
 8008180:	f106 0410 	add.w	r4, r6, #16
 8008184:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8008186:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8008188:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800818a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800818c:	e894 0003 	ldmia.w	r4, {r0, r1}
 8008190:	e885 0003 	stmia.w	r5, {r0, r1}
 8008194:	1d33      	adds	r3, r6, #4
 8008196:	cb0e      	ldmia	r3, {r1, r2, r3}
 8008198:	6838      	ldr	r0, [r7, #0]
 800819a:	f007 fa1f 	bl	800f5dc <USB_DevInit>
 800819e:	4603      	mov	r3, r0
 80081a0:	2b00      	cmp	r3, #0
 80081a2:	d005      	beq.n	80081b0 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80081a4:	687b      	ldr	r3, [r7, #4]
 80081a6:	2202      	movs	r2, #2
 80081a8:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 80081ac:	2301      	movs	r3, #1
 80081ae:	e014      	b.n	80081da <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 80081b0:	687b      	ldr	r3, [r7, #4]
 80081b2:	2200      	movs	r2, #0
 80081b4:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 80081b8:	687b      	ldr	r3, [r7, #4]
 80081ba:	2201      	movs	r2, #1
 80081bc:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 80081c0:	687b      	ldr	r3, [r7, #4]
 80081c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80081c4:	2b01      	cmp	r3, #1
 80081c6:	d102      	bne.n	80081ce <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 80081c8:	6878      	ldr	r0, [r7, #4]
 80081ca:	f000 f80b 	bl	80081e4 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 80081ce:	687b      	ldr	r3, [r7, #4]
 80081d0:	681b      	ldr	r3, [r3, #0]
 80081d2:	4618      	mov	r0, r3
 80081d4:	f007 fbdd 	bl	800f992 <USB_DevDisconnect>

  return HAL_OK;
 80081d8:	2300      	movs	r3, #0
}
 80081da:	4618      	mov	r0, r3
 80081dc:	3714      	adds	r7, #20
 80081de:	46bd      	mov	sp, r7
 80081e0:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

080081e4 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 80081e4:	b480      	push	{r7}
 80081e6:	b085      	sub	sp, #20
 80081e8:	af00      	add	r7, sp, #0
 80081ea:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80081ec:	687b      	ldr	r3, [r7, #4]
 80081ee:	681b      	ldr	r3, [r3, #0]
 80081f0:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 80081f2:	687b      	ldr	r3, [r7, #4]
 80081f4:	2201      	movs	r2, #1
 80081f6:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  hpcd->LPM_State = LPM_L0;
 80081fa:	687b      	ldr	r3, [r7, #4]
 80081fc:	2200      	movs	r2, #0
 80081fe:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8008202:	68fb      	ldr	r3, [r7, #12]
 8008204:	699b      	ldr	r3, [r3, #24]
 8008206:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800820a:	68fb      	ldr	r3, [r7, #12]
 800820c:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 800820e:	68fb      	ldr	r3, [r7, #12]
 8008210:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8008212:	4b05      	ldr	r3, [pc, #20]	; (8008228 <HAL_PCDEx_ActivateLPM+0x44>)
 8008214:	4313      	orrs	r3, r2
 8008216:	68fa      	ldr	r2, [r7, #12]
 8008218:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 800821a:	2300      	movs	r3, #0
}
 800821c:	4618      	mov	r0, r3
 800821e:	3714      	adds	r7, #20
 8008220:	46bd      	mov	sp, r7
 8008222:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008226:	4770      	bx	lr
 8008228:	10000003 	.word	0x10000003

0800822c <HAL_PWR_EnableBkUpAccess>:
  * @note   If the HSE divided by 2, 3, ..31 is used as the RTC clock, the
  *         Backup Domain Access should be kept enabled.
  * @retval None.
  */
void HAL_PWR_EnableBkUpAccess (void)
{
 800822c:	b480      	push	{r7}
 800822e:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT (PWR->CR1, PWR_CR1_DBP);
 8008230:	4b05      	ldr	r3, [pc, #20]	; (8008248 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8008232:	681b      	ldr	r3, [r3, #0]
 8008234:	4a04      	ldr	r2, [pc, #16]	; (8008248 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8008236:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800823a:	6013      	str	r3, [r2, #0]
}
 800823c:	bf00      	nop
 800823e:	46bd      	mov	sp, r7
 8008240:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008244:	4770      	bx	lr
 8008246:	bf00      	nop
 8008248:	58024800 	.word	0x58024800

0800824c <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 800824c:	b580      	push	{r7, lr}
 800824e:	b084      	sub	sp, #16
 8008250:	af00      	add	r7, sp, #0
 8008252:	6078      	str	r0, [r7, #4]

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
 8008254:	4b29      	ldr	r3, [pc, #164]	; (80082fc <HAL_PWREx_ConfigSupply+0xb0>)
 8008256:	68db      	ldr	r3, [r3, #12]
 8008258:	f003 0307 	and.w	r3, r3, #7
 800825c:	2b06      	cmp	r3, #6
 800825e:	d00a      	beq.n	8008276 <HAL_PWREx_ConfigSupply+0x2a>
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8008260:	4b26      	ldr	r3, [pc, #152]	; (80082fc <HAL_PWREx_ConfigSupply+0xb0>)
 8008262:	68db      	ldr	r3, [r3, #12]
 8008264:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8008268:	687a      	ldr	r2, [r7, #4]
 800826a:	429a      	cmp	r2, r3
 800826c:	d001      	beq.n	8008272 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 800826e:	2301      	movs	r3, #1
 8008270:	e040      	b.n	80082f4 <HAL_PWREx_ConfigSupply+0xa8>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8008272:	2300      	movs	r3, #0
 8008274:	e03e      	b.n	80082f4 <HAL_PWREx_ConfigSupply+0xa8>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8008276:	4b21      	ldr	r3, [pc, #132]	; (80082fc <HAL_PWREx_ConfigSupply+0xb0>)
 8008278:	68db      	ldr	r3, [r3, #12]
 800827a:	f023 023f 	bic.w	r2, r3, #63	; 0x3f
 800827e:	491f      	ldr	r1, [pc, #124]	; (80082fc <HAL_PWREx_ConfigSupply+0xb0>)
 8008280:	687b      	ldr	r3, [r7, #4]
 8008282:	4313      	orrs	r3, r2
 8008284:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8008286:	f7ff fb5b 	bl	8007940 <HAL_GetTick>
 800828a:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800828c:	e009      	b.n	80082a2 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 800828e:	f7ff fb57 	bl	8007940 <HAL_GetTick>
 8008292:	4602      	mov	r2, r0
 8008294:	68fb      	ldr	r3, [r7, #12]
 8008296:	1ad3      	subs	r3, r2, r3
 8008298:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800829c:	d901      	bls.n	80082a2 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 800829e:	2301      	movs	r3, #1
 80082a0:	e028      	b.n	80082f4 <HAL_PWREx_ConfigSupply+0xa8>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80082a2:	4b16      	ldr	r3, [pc, #88]	; (80082fc <HAL_PWREx_ConfigSupply+0xb0>)
 80082a4:	685b      	ldr	r3, [r3, #4]
 80082a6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80082aa:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80082ae:	d1ee      	bne.n	800828e <HAL_PWREx_ConfigSupply+0x42>
    }
  }

#if defined (SMPS)
  /* When the SMPS supplies external circuits verify that SDEXTRDY flag is set */
  if ((SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT_AND_LDO) ||
 80082b0:	687b      	ldr	r3, [r7, #4]
 80082b2:	2b1e      	cmp	r3, #30
 80082b4:	d008      	beq.n	80082c8 <HAL_PWREx_ConfigSupply+0x7c>
 80082b6:	687b      	ldr	r3, [r7, #4]
 80082b8:	2b2e      	cmp	r3, #46	; 0x2e
 80082ba:	d005      	beq.n	80082c8 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT_AND_LDO) ||
 80082bc:	687b      	ldr	r3, [r7, #4]
 80082be:	2b1d      	cmp	r3, #29
 80082c0:	d002      	beq.n	80082c8 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT)         ||
 80082c2:	687b      	ldr	r3, [r7, #4]
 80082c4:	2b2d      	cmp	r3, #45	; 0x2d
 80082c6:	d114      	bne.n	80082f2 <HAL_PWREx_ConfigSupply+0xa6>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT))
  {
    /* Get the current tick number */
    tickstart = HAL_GetTick ();
 80082c8:	f7ff fb3a 	bl	8007940 <HAL_GetTick>
 80082cc:	60f8      	str	r0, [r7, #12]

    /* Wait till SMPS external supply ready flag is set */
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 80082ce:	e009      	b.n	80082e4 <HAL_PWREx_ConfigSupply+0x98>
    {
      if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 80082d0:	f7ff fb36 	bl	8007940 <HAL_GetTick>
 80082d4:	4602      	mov	r2, r0
 80082d6:	68fb      	ldr	r3, [r7, #12]
 80082d8:	1ad3      	subs	r3, r2, r3
 80082da:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80082de:	d901      	bls.n	80082e4 <HAL_PWREx_ConfigSupply+0x98>
      {
        return HAL_ERROR;
 80082e0:	2301      	movs	r3, #1
 80082e2:	e007      	b.n	80082f4 <HAL_PWREx_ConfigSupply+0xa8>
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 80082e4:	4b05      	ldr	r3, [pc, #20]	; (80082fc <HAL_PWREx_ConfigSupply+0xb0>)
 80082e6:	68db      	ldr	r3, [r3, #12]
 80082e8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80082ec:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80082f0:	d1ee      	bne.n	80082d0 <HAL_PWREx_ConfigSupply+0x84>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 80082f2:	2300      	movs	r3, #0
}
 80082f4:	4618      	mov	r0, r3
 80082f6:	3710      	adds	r7, #16
 80082f8:	46bd      	mov	sp, r7
 80082fa:	bd80      	pop	{r7, pc}
 80082fc:	58024800 	.word	0x58024800

08008300 <HAL_PWREx_EnableUSBVoltageDetector>:
/**
  * @brief Enable the USB voltage level detector.
  * @retval None.
  */
void HAL_PWREx_EnableUSBVoltageDetector (void)
{
 8008300:	b480      	push	{r7}
 8008302:	af00      	add	r7, sp, #0
  /* Enable the USB voltage detector */
  SET_BIT (PWR->CR3, PWR_CR3_USB33DEN);
 8008304:	4b05      	ldr	r3, [pc, #20]	; (800831c <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 8008306:	68db      	ldr	r3, [r3, #12]
 8008308:	4a04      	ldr	r2, [pc, #16]	; (800831c <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 800830a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800830e:	60d3      	str	r3, [r2, #12]
}
 8008310:	bf00      	nop
 8008312:	46bd      	mov	sp, r7
 8008314:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008318:	4770      	bx	lr
 800831a:	bf00      	nop
 800831c:	58024800 	.word	0x58024800

08008320 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8008320:	b580      	push	{r7, lr}
 8008322:	b08c      	sub	sp, #48	; 0x30
 8008324:	af00      	add	r7, sp, #0
 8008326:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8008328:	687b      	ldr	r3, [r7, #4]
 800832a:	2b00      	cmp	r3, #0
 800832c:	d102      	bne.n	8008334 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800832e:	2301      	movs	r3, #1
 8008330:	f000 bc48 	b.w	8008bc4 <HAL_RCC_OscConfig+0x8a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8008334:	687b      	ldr	r3, [r7, #4]
 8008336:	681b      	ldr	r3, [r3, #0]
 8008338:	f003 0301 	and.w	r3, r3, #1
 800833c:	2b00      	cmp	r3, #0
 800833e:	f000 8088 	beq.w	8008452 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8008342:	4b99      	ldr	r3, [pc, #612]	; (80085a8 <HAL_RCC_OscConfig+0x288>)
 8008344:	691b      	ldr	r3, [r3, #16]
 8008346:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800834a:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800834c:	4b96      	ldr	r3, [pc, #600]	; (80085a8 <HAL_RCC_OscConfig+0x288>)
 800834e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008350:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8008352:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008354:	2b10      	cmp	r3, #16
 8008356:	d007      	beq.n	8008368 <HAL_RCC_OscConfig+0x48>
 8008358:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800835a:	2b18      	cmp	r3, #24
 800835c:	d111      	bne.n	8008382 <HAL_RCC_OscConfig+0x62>
 800835e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008360:	f003 0303 	and.w	r3, r3, #3
 8008364:	2b02      	cmp	r3, #2
 8008366:	d10c      	bne.n	8008382 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8008368:	4b8f      	ldr	r3, [pc, #572]	; (80085a8 <HAL_RCC_OscConfig+0x288>)
 800836a:	681b      	ldr	r3, [r3, #0]
 800836c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008370:	2b00      	cmp	r3, #0
 8008372:	d06d      	beq.n	8008450 <HAL_RCC_OscConfig+0x130>
 8008374:	687b      	ldr	r3, [r7, #4]
 8008376:	685b      	ldr	r3, [r3, #4]
 8008378:	2b00      	cmp	r3, #0
 800837a:	d169      	bne.n	8008450 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 800837c:	2301      	movs	r3, #1
 800837e:	f000 bc21 	b.w	8008bc4 <HAL_RCC_OscConfig+0x8a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8008382:	687b      	ldr	r3, [r7, #4]
 8008384:	685b      	ldr	r3, [r3, #4]
 8008386:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800838a:	d106      	bne.n	800839a <HAL_RCC_OscConfig+0x7a>
 800838c:	4b86      	ldr	r3, [pc, #536]	; (80085a8 <HAL_RCC_OscConfig+0x288>)
 800838e:	681b      	ldr	r3, [r3, #0]
 8008390:	4a85      	ldr	r2, [pc, #532]	; (80085a8 <HAL_RCC_OscConfig+0x288>)
 8008392:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008396:	6013      	str	r3, [r2, #0]
 8008398:	e02e      	b.n	80083f8 <HAL_RCC_OscConfig+0xd8>
 800839a:	687b      	ldr	r3, [r7, #4]
 800839c:	685b      	ldr	r3, [r3, #4]
 800839e:	2b00      	cmp	r3, #0
 80083a0:	d10c      	bne.n	80083bc <HAL_RCC_OscConfig+0x9c>
 80083a2:	4b81      	ldr	r3, [pc, #516]	; (80085a8 <HAL_RCC_OscConfig+0x288>)
 80083a4:	681b      	ldr	r3, [r3, #0]
 80083a6:	4a80      	ldr	r2, [pc, #512]	; (80085a8 <HAL_RCC_OscConfig+0x288>)
 80083a8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80083ac:	6013      	str	r3, [r2, #0]
 80083ae:	4b7e      	ldr	r3, [pc, #504]	; (80085a8 <HAL_RCC_OscConfig+0x288>)
 80083b0:	681b      	ldr	r3, [r3, #0]
 80083b2:	4a7d      	ldr	r2, [pc, #500]	; (80085a8 <HAL_RCC_OscConfig+0x288>)
 80083b4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80083b8:	6013      	str	r3, [r2, #0]
 80083ba:	e01d      	b.n	80083f8 <HAL_RCC_OscConfig+0xd8>
 80083bc:	687b      	ldr	r3, [r7, #4]
 80083be:	685b      	ldr	r3, [r3, #4]
 80083c0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80083c4:	d10c      	bne.n	80083e0 <HAL_RCC_OscConfig+0xc0>
 80083c6:	4b78      	ldr	r3, [pc, #480]	; (80085a8 <HAL_RCC_OscConfig+0x288>)
 80083c8:	681b      	ldr	r3, [r3, #0]
 80083ca:	4a77      	ldr	r2, [pc, #476]	; (80085a8 <HAL_RCC_OscConfig+0x288>)
 80083cc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80083d0:	6013      	str	r3, [r2, #0]
 80083d2:	4b75      	ldr	r3, [pc, #468]	; (80085a8 <HAL_RCC_OscConfig+0x288>)
 80083d4:	681b      	ldr	r3, [r3, #0]
 80083d6:	4a74      	ldr	r2, [pc, #464]	; (80085a8 <HAL_RCC_OscConfig+0x288>)
 80083d8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80083dc:	6013      	str	r3, [r2, #0]
 80083de:	e00b      	b.n	80083f8 <HAL_RCC_OscConfig+0xd8>
 80083e0:	4b71      	ldr	r3, [pc, #452]	; (80085a8 <HAL_RCC_OscConfig+0x288>)
 80083e2:	681b      	ldr	r3, [r3, #0]
 80083e4:	4a70      	ldr	r2, [pc, #448]	; (80085a8 <HAL_RCC_OscConfig+0x288>)
 80083e6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80083ea:	6013      	str	r3, [r2, #0]
 80083ec:	4b6e      	ldr	r3, [pc, #440]	; (80085a8 <HAL_RCC_OscConfig+0x288>)
 80083ee:	681b      	ldr	r3, [r3, #0]
 80083f0:	4a6d      	ldr	r2, [pc, #436]	; (80085a8 <HAL_RCC_OscConfig+0x288>)
 80083f2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80083f6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80083f8:	687b      	ldr	r3, [r7, #4]
 80083fa:	685b      	ldr	r3, [r3, #4]
 80083fc:	2b00      	cmp	r3, #0
 80083fe:	d013      	beq.n	8008428 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008400:	f7ff fa9e 	bl	8007940 <HAL_GetTick>
 8008404:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8008406:	e008      	b.n	800841a <HAL_RCC_OscConfig+0xfa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8008408:	f7ff fa9a 	bl	8007940 <HAL_GetTick>
 800840c:	4602      	mov	r2, r0
 800840e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008410:	1ad3      	subs	r3, r2, r3
 8008412:	2b64      	cmp	r3, #100	; 0x64
 8008414:	d901      	bls.n	800841a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8008416:	2303      	movs	r3, #3
 8008418:	e3d4      	b.n	8008bc4 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800841a:	4b63      	ldr	r3, [pc, #396]	; (80085a8 <HAL_RCC_OscConfig+0x288>)
 800841c:	681b      	ldr	r3, [r3, #0]
 800841e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008422:	2b00      	cmp	r3, #0
 8008424:	d0f0      	beq.n	8008408 <HAL_RCC_OscConfig+0xe8>
 8008426:	e014      	b.n	8008452 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008428:	f7ff fa8a 	bl	8007940 <HAL_GetTick>
 800842c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800842e:	e008      	b.n	8008442 <HAL_RCC_OscConfig+0x122>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8008430:	f7ff fa86 	bl	8007940 <HAL_GetTick>
 8008434:	4602      	mov	r2, r0
 8008436:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008438:	1ad3      	subs	r3, r2, r3
 800843a:	2b64      	cmp	r3, #100	; 0x64
 800843c:	d901      	bls.n	8008442 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 800843e:	2303      	movs	r3, #3
 8008440:	e3c0      	b.n	8008bc4 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8008442:	4b59      	ldr	r3, [pc, #356]	; (80085a8 <HAL_RCC_OscConfig+0x288>)
 8008444:	681b      	ldr	r3, [r3, #0]
 8008446:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800844a:	2b00      	cmp	r3, #0
 800844c:	d1f0      	bne.n	8008430 <HAL_RCC_OscConfig+0x110>
 800844e:	e000      	b.n	8008452 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8008450:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8008452:	687b      	ldr	r3, [r7, #4]
 8008454:	681b      	ldr	r3, [r3, #0]
 8008456:	f003 0302 	and.w	r3, r3, #2
 800845a:	2b00      	cmp	r3, #0
 800845c:	f000 80ca 	beq.w	80085f4 <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8008460:	4b51      	ldr	r3, [pc, #324]	; (80085a8 <HAL_RCC_OscConfig+0x288>)
 8008462:	691b      	ldr	r3, [r3, #16]
 8008464:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8008468:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800846a:	4b4f      	ldr	r3, [pc, #316]	; (80085a8 <HAL_RCC_OscConfig+0x288>)
 800846c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800846e:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8008470:	6a3b      	ldr	r3, [r7, #32]
 8008472:	2b00      	cmp	r3, #0
 8008474:	d007      	beq.n	8008486 <HAL_RCC_OscConfig+0x166>
 8008476:	6a3b      	ldr	r3, [r7, #32]
 8008478:	2b18      	cmp	r3, #24
 800847a:	d156      	bne.n	800852a <HAL_RCC_OscConfig+0x20a>
 800847c:	69fb      	ldr	r3, [r7, #28]
 800847e:	f003 0303 	and.w	r3, r3, #3
 8008482:	2b00      	cmp	r3, #0
 8008484:	d151      	bne.n	800852a <HAL_RCC_OscConfig+0x20a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8008486:	4b48      	ldr	r3, [pc, #288]	; (80085a8 <HAL_RCC_OscConfig+0x288>)
 8008488:	681b      	ldr	r3, [r3, #0]
 800848a:	f003 0304 	and.w	r3, r3, #4
 800848e:	2b00      	cmp	r3, #0
 8008490:	d005      	beq.n	800849e <HAL_RCC_OscConfig+0x17e>
 8008492:	687b      	ldr	r3, [r7, #4]
 8008494:	68db      	ldr	r3, [r3, #12]
 8008496:	2b00      	cmp	r3, #0
 8008498:	d101      	bne.n	800849e <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 800849a:	2301      	movs	r3, #1
 800849c:	e392      	b.n	8008bc4 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800849e:	4b42      	ldr	r3, [pc, #264]	; (80085a8 <HAL_RCC_OscConfig+0x288>)
 80084a0:	681b      	ldr	r3, [r3, #0]
 80084a2:	f023 0219 	bic.w	r2, r3, #25
 80084a6:	687b      	ldr	r3, [r7, #4]
 80084a8:	68db      	ldr	r3, [r3, #12]
 80084aa:	493f      	ldr	r1, [pc, #252]	; (80085a8 <HAL_RCC_OscConfig+0x288>)
 80084ac:	4313      	orrs	r3, r2
 80084ae:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80084b0:	f7ff fa46 	bl	8007940 <HAL_GetTick>
 80084b4:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80084b6:	e008      	b.n	80084ca <HAL_RCC_OscConfig+0x1aa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80084b8:	f7ff fa42 	bl	8007940 <HAL_GetTick>
 80084bc:	4602      	mov	r2, r0
 80084be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80084c0:	1ad3      	subs	r3, r2, r3
 80084c2:	2b02      	cmp	r3, #2
 80084c4:	d901      	bls.n	80084ca <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 80084c6:	2303      	movs	r3, #3
 80084c8:	e37c      	b.n	8008bc4 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80084ca:	4b37      	ldr	r3, [pc, #220]	; (80085a8 <HAL_RCC_OscConfig+0x288>)
 80084cc:	681b      	ldr	r3, [r3, #0]
 80084ce:	f003 0304 	and.w	r3, r3, #4
 80084d2:	2b00      	cmp	r3, #0
 80084d4:	d0f0      	beq.n	80084b8 <HAL_RCC_OscConfig+0x198>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80084d6:	f7ff fa63 	bl	80079a0 <HAL_GetREVID>
 80084da:	4603      	mov	r3, r0
 80084dc:	f241 0203 	movw	r2, #4099	; 0x1003
 80084e0:	4293      	cmp	r3, r2
 80084e2:	d817      	bhi.n	8008514 <HAL_RCC_OscConfig+0x1f4>
 80084e4:	687b      	ldr	r3, [r7, #4]
 80084e6:	691b      	ldr	r3, [r3, #16]
 80084e8:	2b40      	cmp	r3, #64	; 0x40
 80084ea:	d108      	bne.n	80084fe <HAL_RCC_OscConfig+0x1de>
 80084ec:	4b2e      	ldr	r3, [pc, #184]	; (80085a8 <HAL_RCC_OscConfig+0x288>)
 80084ee:	685b      	ldr	r3, [r3, #4]
 80084f0:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 80084f4:	4a2c      	ldr	r2, [pc, #176]	; (80085a8 <HAL_RCC_OscConfig+0x288>)
 80084f6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80084fa:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80084fc:	e07a      	b.n	80085f4 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80084fe:	4b2a      	ldr	r3, [pc, #168]	; (80085a8 <HAL_RCC_OscConfig+0x288>)
 8008500:	685b      	ldr	r3, [r3, #4]
 8008502:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8008506:	687b      	ldr	r3, [r7, #4]
 8008508:	691b      	ldr	r3, [r3, #16]
 800850a:	031b      	lsls	r3, r3, #12
 800850c:	4926      	ldr	r1, [pc, #152]	; (80085a8 <HAL_RCC_OscConfig+0x288>)
 800850e:	4313      	orrs	r3, r2
 8008510:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8008512:	e06f      	b.n	80085f4 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8008514:	4b24      	ldr	r3, [pc, #144]	; (80085a8 <HAL_RCC_OscConfig+0x288>)
 8008516:	685b      	ldr	r3, [r3, #4]
 8008518:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800851c:	687b      	ldr	r3, [r7, #4]
 800851e:	691b      	ldr	r3, [r3, #16]
 8008520:	061b      	lsls	r3, r3, #24
 8008522:	4921      	ldr	r1, [pc, #132]	; (80085a8 <HAL_RCC_OscConfig+0x288>)
 8008524:	4313      	orrs	r3, r2
 8008526:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8008528:	e064      	b.n	80085f4 <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800852a:	687b      	ldr	r3, [r7, #4]
 800852c:	68db      	ldr	r3, [r3, #12]
 800852e:	2b00      	cmp	r3, #0
 8008530:	d047      	beq.n	80085c2 <HAL_RCC_OscConfig+0x2a2>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8008532:	4b1d      	ldr	r3, [pc, #116]	; (80085a8 <HAL_RCC_OscConfig+0x288>)
 8008534:	681b      	ldr	r3, [r3, #0]
 8008536:	f023 0219 	bic.w	r2, r3, #25
 800853a:	687b      	ldr	r3, [r7, #4]
 800853c:	68db      	ldr	r3, [r3, #12]
 800853e:	491a      	ldr	r1, [pc, #104]	; (80085a8 <HAL_RCC_OscConfig+0x288>)
 8008540:	4313      	orrs	r3, r2
 8008542:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008544:	f7ff f9fc 	bl	8007940 <HAL_GetTick>
 8008548:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800854a:	e008      	b.n	800855e <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800854c:	f7ff f9f8 	bl	8007940 <HAL_GetTick>
 8008550:	4602      	mov	r2, r0
 8008552:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008554:	1ad3      	subs	r3, r2, r3
 8008556:	2b02      	cmp	r3, #2
 8008558:	d901      	bls.n	800855e <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 800855a:	2303      	movs	r3, #3
 800855c:	e332      	b.n	8008bc4 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800855e:	4b12      	ldr	r3, [pc, #72]	; (80085a8 <HAL_RCC_OscConfig+0x288>)
 8008560:	681b      	ldr	r3, [r3, #0]
 8008562:	f003 0304 	and.w	r3, r3, #4
 8008566:	2b00      	cmp	r3, #0
 8008568:	d0f0      	beq.n	800854c <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800856a:	f7ff fa19 	bl	80079a0 <HAL_GetREVID>
 800856e:	4603      	mov	r3, r0
 8008570:	f241 0203 	movw	r2, #4099	; 0x1003
 8008574:	4293      	cmp	r3, r2
 8008576:	d819      	bhi.n	80085ac <HAL_RCC_OscConfig+0x28c>
 8008578:	687b      	ldr	r3, [r7, #4]
 800857a:	691b      	ldr	r3, [r3, #16]
 800857c:	2b40      	cmp	r3, #64	; 0x40
 800857e:	d108      	bne.n	8008592 <HAL_RCC_OscConfig+0x272>
 8008580:	4b09      	ldr	r3, [pc, #36]	; (80085a8 <HAL_RCC_OscConfig+0x288>)
 8008582:	685b      	ldr	r3, [r3, #4]
 8008584:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8008588:	4a07      	ldr	r2, [pc, #28]	; (80085a8 <HAL_RCC_OscConfig+0x288>)
 800858a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800858e:	6053      	str	r3, [r2, #4]
 8008590:	e030      	b.n	80085f4 <HAL_RCC_OscConfig+0x2d4>
 8008592:	4b05      	ldr	r3, [pc, #20]	; (80085a8 <HAL_RCC_OscConfig+0x288>)
 8008594:	685b      	ldr	r3, [r3, #4]
 8008596:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 800859a:	687b      	ldr	r3, [r7, #4]
 800859c:	691b      	ldr	r3, [r3, #16]
 800859e:	031b      	lsls	r3, r3, #12
 80085a0:	4901      	ldr	r1, [pc, #4]	; (80085a8 <HAL_RCC_OscConfig+0x288>)
 80085a2:	4313      	orrs	r3, r2
 80085a4:	604b      	str	r3, [r1, #4]
 80085a6:	e025      	b.n	80085f4 <HAL_RCC_OscConfig+0x2d4>
 80085a8:	58024400 	.word	0x58024400
 80085ac:	4b9a      	ldr	r3, [pc, #616]	; (8008818 <HAL_RCC_OscConfig+0x4f8>)
 80085ae:	685b      	ldr	r3, [r3, #4]
 80085b0:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80085b4:	687b      	ldr	r3, [r7, #4]
 80085b6:	691b      	ldr	r3, [r3, #16]
 80085b8:	061b      	lsls	r3, r3, #24
 80085ba:	4997      	ldr	r1, [pc, #604]	; (8008818 <HAL_RCC_OscConfig+0x4f8>)
 80085bc:	4313      	orrs	r3, r2
 80085be:	604b      	str	r3, [r1, #4]
 80085c0:	e018      	b.n	80085f4 <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80085c2:	4b95      	ldr	r3, [pc, #596]	; (8008818 <HAL_RCC_OscConfig+0x4f8>)
 80085c4:	681b      	ldr	r3, [r3, #0]
 80085c6:	4a94      	ldr	r2, [pc, #592]	; (8008818 <HAL_RCC_OscConfig+0x4f8>)
 80085c8:	f023 0301 	bic.w	r3, r3, #1
 80085cc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80085ce:	f7ff f9b7 	bl	8007940 <HAL_GetTick>
 80085d2:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80085d4:	e008      	b.n	80085e8 <HAL_RCC_OscConfig+0x2c8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80085d6:	f7ff f9b3 	bl	8007940 <HAL_GetTick>
 80085da:	4602      	mov	r2, r0
 80085dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80085de:	1ad3      	subs	r3, r2, r3
 80085e0:	2b02      	cmp	r3, #2
 80085e2:	d901      	bls.n	80085e8 <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 80085e4:	2303      	movs	r3, #3
 80085e6:	e2ed      	b.n	8008bc4 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80085e8:	4b8b      	ldr	r3, [pc, #556]	; (8008818 <HAL_RCC_OscConfig+0x4f8>)
 80085ea:	681b      	ldr	r3, [r3, #0]
 80085ec:	f003 0304 	and.w	r3, r3, #4
 80085f0:	2b00      	cmp	r3, #0
 80085f2:	d1f0      	bne.n	80085d6 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 80085f4:	687b      	ldr	r3, [r7, #4]
 80085f6:	681b      	ldr	r3, [r3, #0]
 80085f8:	f003 0310 	and.w	r3, r3, #16
 80085fc:	2b00      	cmp	r3, #0
 80085fe:	f000 80a9 	beq.w	8008754 <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8008602:	4b85      	ldr	r3, [pc, #532]	; (8008818 <HAL_RCC_OscConfig+0x4f8>)
 8008604:	691b      	ldr	r3, [r3, #16]
 8008606:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800860a:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800860c:	4b82      	ldr	r3, [pc, #520]	; (8008818 <HAL_RCC_OscConfig+0x4f8>)
 800860e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008610:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8008612:	69bb      	ldr	r3, [r7, #24]
 8008614:	2b08      	cmp	r3, #8
 8008616:	d007      	beq.n	8008628 <HAL_RCC_OscConfig+0x308>
 8008618:	69bb      	ldr	r3, [r7, #24]
 800861a:	2b18      	cmp	r3, #24
 800861c:	d13a      	bne.n	8008694 <HAL_RCC_OscConfig+0x374>
 800861e:	697b      	ldr	r3, [r7, #20]
 8008620:	f003 0303 	and.w	r3, r3, #3
 8008624:	2b01      	cmp	r3, #1
 8008626:	d135      	bne.n	8008694 <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8008628:	4b7b      	ldr	r3, [pc, #492]	; (8008818 <HAL_RCC_OscConfig+0x4f8>)
 800862a:	681b      	ldr	r3, [r3, #0]
 800862c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008630:	2b00      	cmp	r3, #0
 8008632:	d005      	beq.n	8008640 <HAL_RCC_OscConfig+0x320>
 8008634:	687b      	ldr	r3, [r7, #4]
 8008636:	69db      	ldr	r3, [r3, #28]
 8008638:	2b80      	cmp	r3, #128	; 0x80
 800863a:	d001      	beq.n	8008640 <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 800863c:	2301      	movs	r3, #1
 800863e:	e2c1      	b.n	8008bc4 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8008640:	f7ff f9ae 	bl	80079a0 <HAL_GetREVID>
 8008644:	4603      	mov	r3, r0
 8008646:	f241 0203 	movw	r2, #4099	; 0x1003
 800864a:	4293      	cmp	r3, r2
 800864c:	d817      	bhi.n	800867e <HAL_RCC_OscConfig+0x35e>
 800864e:	687b      	ldr	r3, [r7, #4]
 8008650:	6a1b      	ldr	r3, [r3, #32]
 8008652:	2b20      	cmp	r3, #32
 8008654:	d108      	bne.n	8008668 <HAL_RCC_OscConfig+0x348>
 8008656:	4b70      	ldr	r3, [pc, #448]	; (8008818 <HAL_RCC_OscConfig+0x4f8>)
 8008658:	685b      	ldr	r3, [r3, #4]
 800865a:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 800865e:	4a6e      	ldr	r2, [pc, #440]	; (8008818 <HAL_RCC_OscConfig+0x4f8>)
 8008660:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8008664:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8008666:	e075      	b.n	8008754 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8008668:	4b6b      	ldr	r3, [pc, #428]	; (8008818 <HAL_RCC_OscConfig+0x4f8>)
 800866a:	685b      	ldr	r3, [r3, #4]
 800866c:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8008670:	687b      	ldr	r3, [r7, #4]
 8008672:	6a1b      	ldr	r3, [r3, #32]
 8008674:	069b      	lsls	r3, r3, #26
 8008676:	4968      	ldr	r1, [pc, #416]	; (8008818 <HAL_RCC_OscConfig+0x4f8>)
 8008678:	4313      	orrs	r3, r2
 800867a:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800867c:	e06a      	b.n	8008754 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800867e:	4b66      	ldr	r3, [pc, #408]	; (8008818 <HAL_RCC_OscConfig+0x4f8>)
 8008680:	68db      	ldr	r3, [r3, #12]
 8008682:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8008686:	687b      	ldr	r3, [r7, #4]
 8008688:	6a1b      	ldr	r3, [r3, #32]
 800868a:	061b      	lsls	r3, r3, #24
 800868c:	4962      	ldr	r1, [pc, #392]	; (8008818 <HAL_RCC_OscConfig+0x4f8>)
 800868e:	4313      	orrs	r3, r2
 8008690:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8008692:	e05f      	b.n	8008754 <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 8008694:	687b      	ldr	r3, [r7, #4]
 8008696:	69db      	ldr	r3, [r3, #28]
 8008698:	2b00      	cmp	r3, #0
 800869a:	d042      	beq.n	8008722 <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 800869c:	4b5e      	ldr	r3, [pc, #376]	; (8008818 <HAL_RCC_OscConfig+0x4f8>)
 800869e:	681b      	ldr	r3, [r3, #0]
 80086a0:	4a5d      	ldr	r2, [pc, #372]	; (8008818 <HAL_RCC_OscConfig+0x4f8>)
 80086a2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80086a6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80086a8:	f7ff f94a 	bl	8007940 <HAL_GetTick>
 80086ac:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80086ae:	e008      	b.n	80086c2 <HAL_RCC_OscConfig+0x3a2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 80086b0:	f7ff f946 	bl	8007940 <HAL_GetTick>
 80086b4:	4602      	mov	r2, r0
 80086b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80086b8:	1ad3      	subs	r3, r2, r3
 80086ba:	2b02      	cmp	r3, #2
 80086bc:	d901      	bls.n	80086c2 <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 80086be:	2303      	movs	r3, #3
 80086c0:	e280      	b.n	8008bc4 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80086c2:	4b55      	ldr	r3, [pc, #340]	; (8008818 <HAL_RCC_OscConfig+0x4f8>)
 80086c4:	681b      	ldr	r3, [r3, #0]
 80086c6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80086ca:	2b00      	cmp	r3, #0
 80086cc:	d0f0      	beq.n	80086b0 <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80086ce:	f7ff f967 	bl	80079a0 <HAL_GetREVID>
 80086d2:	4603      	mov	r3, r0
 80086d4:	f241 0203 	movw	r2, #4099	; 0x1003
 80086d8:	4293      	cmp	r3, r2
 80086da:	d817      	bhi.n	800870c <HAL_RCC_OscConfig+0x3ec>
 80086dc:	687b      	ldr	r3, [r7, #4]
 80086de:	6a1b      	ldr	r3, [r3, #32]
 80086e0:	2b20      	cmp	r3, #32
 80086e2:	d108      	bne.n	80086f6 <HAL_RCC_OscConfig+0x3d6>
 80086e4:	4b4c      	ldr	r3, [pc, #304]	; (8008818 <HAL_RCC_OscConfig+0x4f8>)
 80086e6:	685b      	ldr	r3, [r3, #4]
 80086e8:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 80086ec:	4a4a      	ldr	r2, [pc, #296]	; (8008818 <HAL_RCC_OscConfig+0x4f8>)
 80086ee:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80086f2:	6053      	str	r3, [r2, #4]
 80086f4:	e02e      	b.n	8008754 <HAL_RCC_OscConfig+0x434>
 80086f6:	4b48      	ldr	r3, [pc, #288]	; (8008818 <HAL_RCC_OscConfig+0x4f8>)
 80086f8:	685b      	ldr	r3, [r3, #4]
 80086fa:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 80086fe:	687b      	ldr	r3, [r7, #4]
 8008700:	6a1b      	ldr	r3, [r3, #32]
 8008702:	069b      	lsls	r3, r3, #26
 8008704:	4944      	ldr	r1, [pc, #272]	; (8008818 <HAL_RCC_OscConfig+0x4f8>)
 8008706:	4313      	orrs	r3, r2
 8008708:	604b      	str	r3, [r1, #4]
 800870a:	e023      	b.n	8008754 <HAL_RCC_OscConfig+0x434>
 800870c:	4b42      	ldr	r3, [pc, #264]	; (8008818 <HAL_RCC_OscConfig+0x4f8>)
 800870e:	68db      	ldr	r3, [r3, #12]
 8008710:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8008714:	687b      	ldr	r3, [r7, #4]
 8008716:	6a1b      	ldr	r3, [r3, #32]
 8008718:	061b      	lsls	r3, r3, #24
 800871a:	493f      	ldr	r1, [pc, #252]	; (8008818 <HAL_RCC_OscConfig+0x4f8>)
 800871c:	4313      	orrs	r3, r2
 800871e:	60cb      	str	r3, [r1, #12]
 8008720:	e018      	b.n	8008754 <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8008722:	4b3d      	ldr	r3, [pc, #244]	; (8008818 <HAL_RCC_OscConfig+0x4f8>)
 8008724:	681b      	ldr	r3, [r3, #0]
 8008726:	4a3c      	ldr	r2, [pc, #240]	; (8008818 <HAL_RCC_OscConfig+0x4f8>)
 8008728:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800872c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800872e:	f7ff f907 	bl	8007940 <HAL_GetTick>
 8008732:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8008734:	e008      	b.n	8008748 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8008736:	f7ff f903 	bl	8007940 <HAL_GetTick>
 800873a:	4602      	mov	r2, r0
 800873c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800873e:	1ad3      	subs	r3, r2, r3
 8008740:	2b02      	cmp	r3, #2
 8008742:	d901      	bls.n	8008748 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8008744:	2303      	movs	r3, #3
 8008746:	e23d      	b.n	8008bc4 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8008748:	4b33      	ldr	r3, [pc, #204]	; (8008818 <HAL_RCC_OscConfig+0x4f8>)
 800874a:	681b      	ldr	r3, [r3, #0]
 800874c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008750:	2b00      	cmp	r3, #0
 8008752:	d1f0      	bne.n	8008736 <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8008754:	687b      	ldr	r3, [r7, #4]
 8008756:	681b      	ldr	r3, [r3, #0]
 8008758:	f003 0308 	and.w	r3, r3, #8
 800875c:	2b00      	cmp	r3, #0
 800875e:	d036      	beq.n	80087ce <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8008760:	687b      	ldr	r3, [r7, #4]
 8008762:	695b      	ldr	r3, [r3, #20]
 8008764:	2b00      	cmp	r3, #0
 8008766:	d019      	beq.n	800879c <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8008768:	4b2b      	ldr	r3, [pc, #172]	; (8008818 <HAL_RCC_OscConfig+0x4f8>)
 800876a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800876c:	4a2a      	ldr	r2, [pc, #168]	; (8008818 <HAL_RCC_OscConfig+0x4f8>)
 800876e:	f043 0301 	orr.w	r3, r3, #1
 8008772:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008774:	f7ff f8e4 	bl	8007940 <HAL_GetTick>
 8008778:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800877a:	e008      	b.n	800878e <HAL_RCC_OscConfig+0x46e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800877c:	f7ff f8e0 	bl	8007940 <HAL_GetTick>
 8008780:	4602      	mov	r2, r0
 8008782:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008784:	1ad3      	subs	r3, r2, r3
 8008786:	2b02      	cmp	r3, #2
 8008788:	d901      	bls.n	800878e <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 800878a:	2303      	movs	r3, #3
 800878c:	e21a      	b.n	8008bc4 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800878e:	4b22      	ldr	r3, [pc, #136]	; (8008818 <HAL_RCC_OscConfig+0x4f8>)
 8008790:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008792:	f003 0302 	and.w	r3, r3, #2
 8008796:	2b00      	cmp	r3, #0
 8008798:	d0f0      	beq.n	800877c <HAL_RCC_OscConfig+0x45c>
 800879a:	e018      	b.n	80087ce <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800879c:	4b1e      	ldr	r3, [pc, #120]	; (8008818 <HAL_RCC_OscConfig+0x4f8>)
 800879e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80087a0:	4a1d      	ldr	r2, [pc, #116]	; (8008818 <HAL_RCC_OscConfig+0x4f8>)
 80087a2:	f023 0301 	bic.w	r3, r3, #1
 80087a6:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80087a8:	f7ff f8ca 	bl	8007940 <HAL_GetTick>
 80087ac:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80087ae:	e008      	b.n	80087c2 <HAL_RCC_OscConfig+0x4a2>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80087b0:	f7ff f8c6 	bl	8007940 <HAL_GetTick>
 80087b4:	4602      	mov	r2, r0
 80087b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80087b8:	1ad3      	subs	r3, r2, r3
 80087ba:	2b02      	cmp	r3, #2
 80087bc:	d901      	bls.n	80087c2 <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 80087be:	2303      	movs	r3, #3
 80087c0:	e200      	b.n	8008bc4 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80087c2:	4b15      	ldr	r3, [pc, #84]	; (8008818 <HAL_RCC_OscConfig+0x4f8>)
 80087c4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80087c6:	f003 0302 	and.w	r3, r3, #2
 80087ca:	2b00      	cmp	r3, #0
 80087cc:	d1f0      	bne.n	80087b0 <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80087ce:	687b      	ldr	r3, [r7, #4]
 80087d0:	681b      	ldr	r3, [r3, #0]
 80087d2:	f003 0320 	and.w	r3, r3, #32
 80087d6:	2b00      	cmp	r3, #0
 80087d8:	d039      	beq.n	800884e <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 80087da:	687b      	ldr	r3, [r7, #4]
 80087dc:	699b      	ldr	r3, [r3, #24]
 80087de:	2b00      	cmp	r3, #0
 80087e0:	d01c      	beq.n	800881c <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80087e2:	4b0d      	ldr	r3, [pc, #52]	; (8008818 <HAL_RCC_OscConfig+0x4f8>)
 80087e4:	681b      	ldr	r3, [r3, #0]
 80087e6:	4a0c      	ldr	r2, [pc, #48]	; (8008818 <HAL_RCC_OscConfig+0x4f8>)
 80087e8:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80087ec:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80087ee:	f7ff f8a7 	bl	8007940 <HAL_GetTick>
 80087f2:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80087f4:	e008      	b.n	8008808 <HAL_RCC_OscConfig+0x4e8>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80087f6:	f7ff f8a3 	bl	8007940 <HAL_GetTick>
 80087fa:	4602      	mov	r2, r0
 80087fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80087fe:	1ad3      	subs	r3, r2, r3
 8008800:	2b02      	cmp	r3, #2
 8008802:	d901      	bls.n	8008808 <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 8008804:	2303      	movs	r3, #3
 8008806:	e1dd      	b.n	8008bc4 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8008808:	4b03      	ldr	r3, [pc, #12]	; (8008818 <HAL_RCC_OscConfig+0x4f8>)
 800880a:	681b      	ldr	r3, [r3, #0]
 800880c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8008810:	2b00      	cmp	r3, #0
 8008812:	d0f0      	beq.n	80087f6 <HAL_RCC_OscConfig+0x4d6>
 8008814:	e01b      	b.n	800884e <HAL_RCC_OscConfig+0x52e>
 8008816:	bf00      	nop
 8008818:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800881c:	4b9b      	ldr	r3, [pc, #620]	; (8008a8c <HAL_RCC_OscConfig+0x76c>)
 800881e:	681b      	ldr	r3, [r3, #0]
 8008820:	4a9a      	ldr	r2, [pc, #616]	; (8008a8c <HAL_RCC_OscConfig+0x76c>)
 8008822:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8008826:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8008828:	f7ff f88a 	bl	8007940 <HAL_GetTick>
 800882c:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800882e:	e008      	b.n	8008842 <HAL_RCC_OscConfig+0x522>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8008830:	f7ff f886 	bl	8007940 <HAL_GetTick>
 8008834:	4602      	mov	r2, r0
 8008836:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008838:	1ad3      	subs	r3, r2, r3
 800883a:	2b02      	cmp	r3, #2
 800883c:	d901      	bls.n	8008842 <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 800883e:	2303      	movs	r3, #3
 8008840:	e1c0      	b.n	8008bc4 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8008842:	4b92      	ldr	r3, [pc, #584]	; (8008a8c <HAL_RCC_OscConfig+0x76c>)
 8008844:	681b      	ldr	r3, [r3, #0]
 8008846:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800884a:	2b00      	cmp	r3, #0
 800884c:	d1f0      	bne.n	8008830 <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800884e:	687b      	ldr	r3, [r7, #4]
 8008850:	681b      	ldr	r3, [r3, #0]
 8008852:	f003 0304 	and.w	r3, r3, #4
 8008856:	2b00      	cmp	r3, #0
 8008858:	f000 8081 	beq.w	800895e <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 800885c:	4b8c      	ldr	r3, [pc, #560]	; (8008a90 <HAL_RCC_OscConfig+0x770>)
 800885e:	681b      	ldr	r3, [r3, #0]
 8008860:	4a8b      	ldr	r2, [pc, #556]	; (8008a90 <HAL_RCC_OscConfig+0x770>)
 8008862:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008866:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8008868:	f7ff f86a 	bl	8007940 <HAL_GetTick>
 800886c:	6278      	str	r0, [r7, #36]	; 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800886e:	e008      	b.n	8008882 <HAL_RCC_OscConfig+0x562>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8008870:	f7ff f866 	bl	8007940 <HAL_GetTick>
 8008874:	4602      	mov	r2, r0
 8008876:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008878:	1ad3      	subs	r3, r2, r3
 800887a:	2b64      	cmp	r3, #100	; 0x64
 800887c:	d901      	bls.n	8008882 <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 800887e:	2303      	movs	r3, #3
 8008880:	e1a0      	b.n	8008bc4 <HAL_RCC_OscConfig+0x8a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8008882:	4b83      	ldr	r3, [pc, #524]	; (8008a90 <HAL_RCC_OscConfig+0x770>)
 8008884:	681b      	ldr	r3, [r3, #0]
 8008886:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800888a:	2b00      	cmp	r3, #0
 800888c:	d0f0      	beq.n	8008870 <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800888e:	687b      	ldr	r3, [r7, #4]
 8008890:	689b      	ldr	r3, [r3, #8]
 8008892:	2b01      	cmp	r3, #1
 8008894:	d106      	bne.n	80088a4 <HAL_RCC_OscConfig+0x584>
 8008896:	4b7d      	ldr	r3, [pc, #500]	; (8008a8c <HAL_RCC_OscConfig+0x76c>)
 8008898:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800889a:	4a7c      	ldr	r2, [pc, #496]	; (8008a8c <HAL_RCC_OscConfig+0x76c>)
 800889c:	f043 0301 	orr.w	r3, r3, #1
 80088a0:	6713      	str	r3, [r2, #112]	; 0x70
 80088a2:	e02d      	b.n	8008900 <HAL_RCC_OscConfig+0x5e0>
 80088a4:	687b      	ldr	r3, [r7, #4]
 80088a6:	689b      	ldr	r3, [r3, #8]
 80088a8:	2b00      	cmp	r3, #0
 80088aa:	d10c      	bne.n	80088c6 <HAL_RCC_OscConfig+0x5a6>
 80088ac:	4b77      	ldr	r3, [pc, #476]	; (8008a8c <HAL_RCC_OscConfig+0x76c>)
 80088ae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80088b0:	4a76      	ldr	r2, [pc, #472]	; (8008a8c <HAL_RCC_OscConfig+0x76c>)
 80088b2:	f023 0301 	bic.w	r3, r3, #1
 80088b6:	6713      	str	r3, [r2, #112]	; 0x70
 80088b8:	4b74      	ldr	r3, [pc, #464]	; (8008a8c <HAL_RCC_OscConfig+0x76c>)
 80088ba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80088bc:	4a73      	ldr	r2, [pc, #460]	; (8008a8c <HAL_RCC_OscConfig+0x76c>)
 80088be:	f023 0304 	bic.w	r3, r3, #4
 80088c2:	6713      	str	r3, [r2, #112]	; 0x70
 80088c4:	e01c      	b.n	8008900 <HAL_RCC_OscConfig+0x5e0>
 80088c6:	687b      	ldr	r3, [r7, #4]
 80088c8:	689b      	ldr	r3, [r3, #8]
 80088ca:	2b05      	cmp	r3, #5
 80088cc:	d10c      	bne.n	80088e8 <HAL_RCC_OscConfig+0x5c8>
 80088ce:	4b6f      	ldr	r3, [pc, #444]	; (8008a8c <HAL_RCC_OscConfig+0x76c>)
 80088d0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80088d2:	4a6e      	ldr	r2, [pc, #440]	; (8008a8c <HAL_RCC_OscConfig+0x76c>)
 80088d4:	f043 0304 	orr.w	r3, r3, #4
 80088d8:	6713      	str	r3, [r2, #112]	; 0x70
 80088da:	4b6c      	ldr	r3, [pc, #432]	; (8008a8c <HAL_RCC_OscConfig+0x76c>)
 80088dc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80088de:	4a6b      	ldr	r2, [pc, #428]	; (8008a8c <HAL_RCC_OscConfig+0x76c>)
 80088e0:	f043 0301 	orr.w	r3, r3, #1
 80088e4:	6713      	str	r3, [r2, #112]	; 0x70
 80088e6:	e00b      	b.n	8008900 <HAL_RCC_OscConfig+0x5e0>
 80088e8:	4b68      	ldr	r3, [pc, #416]	; (8008a8c <HAL_RCC_OscConfig+0x76c>)
 80088ea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80088ec:	4a67      	ldr	r2, [pc, #412]	; (8008a8c <HAL_RCC_OscConfig+0x76c>)
 80088ee:	f023 0301 	bic.w	r3, r3, #1
 80088f2:	6713      	str	r3, [r2, #112]	; 0x70
 80088f4:	4b65      	ldr	r3, [pc, #404]	; (8008a8c <HAL_RCC_OscConfig+0x76c>)
 80088f6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80088f8:	4a64      	ldr	r2, [pc, #400]	; (8008a8c <HAL_RCC_OscConfig+0x76c>)
 80088fa:	f023 0304 	bic.w	r3, r3, #4
 80088fe:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8008900:	687b      	ldr	r3, [r7, #4]
 8008902:	689b      	ldr	r3, [r3, #8]
 8008904:	2b00      	cmp	r3, #0
 8008906:	d015      	beq.n	8008934 <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008908:	f7ff f81a 	bl	8007940 <HAL_GetTick>
 800890c:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800890e:	e00a      	b.n	8008926 <HAL_RCC_OscConfig+0x606>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8008910:	f7ff f816 	bl	8007940 <HAL_GetTick>
 8008914:	4602      	mov	r2, r0
 8008916:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008918:	1ad3      	subs	r3, r2, r3
 800891a:	f241 3288 	movw	r2, #5000	; 0x1388
 800891e:	4293      	cmp	r3, r2
 8008920:	d901      	bls.n	8008926 <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 8008922:	2303      	movs	r3, #3
 8008924:	e14e      	b.n	8008bc4 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8008926:	4b59      	ldr	r3, [pc, #356]	; (8008a8c <HAL_RCC_OscConfig+0x76c>)
 8008928:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800892a:	f003 0302 	and.w	r3, r3, #2
 800892e:	2b00      	cmp	r3, #0
 8008930:	d0ee      	beq.n	8008910 <HAL_RCC_OscConfig+0x5f0>
 8008932:	e014      	b.n	800895e <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008934:	f7ff f804 	bl	8007940 <HAL_GetTick>
 8008938:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800893a:	e00a      	b.n	8008952 <HAL_RCC_OscConfig+0x632>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800893c:	f7ff f800 	bl	8007940 <HAL_GetTick>
 8008940:	4602      	mov	r2, r0
 8008942:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008944:	1ad3      	subs	r3, r2, r3
 8008946:	f241 3288 	movw	r2, #5000	; 0x1388
 800894a:	4293      	cmp	r3, r2
 800894c:	d901      	bls.n	8008952 <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 800894e:	2303      	movs	r3, #3
 8008950:	e138      	b.n	8008bc4 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8008952:	4b4e      	ldr	r3, [pc, #312]	; (8008a8c <HAL_RCC_OscConfig+0x76c>)
 8008954:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008956:	f003 0302 	and.w	r3, r3, #2
 800895a:	2b00      	cmp	r3, #0
 800895c:	d1ee      	bne.n	800893c <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800895e:	687b      	ldr	r3, [r7, #4]
 8008960:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008962:	2b00      	cmp	r3, #0
 8008964:	f000 812d 	beq.w	8008bc2 <HAL_RCC_OscConfig+0x8a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8008968:	4b48      	ldr	r3, [pc, #288]	; (8008a8c <HAL_RCC_OscConfig+0x76c>)
 800896a:	691b      	ldr	r3, [r3, #16]
 800896c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8008970:	2b18      	cmp	r3, #24
 8008972:	f000 80bd 	beq.w	8008af0 <HAL_RCC_OscConfig+0x7d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8008976:	687b      	ldr	r3, [r7, #4]
 8008978:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800897a:	2b02      	cmp	r3, #2
 800897c:	f040 809e 	bne.w	8008abc <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8008980:	4b42      	ldr	r3, [pc, #264]	; (8008a8c <HAL_RCC_OscConfig+0x76c>)
 8008982:	681b      	ldr	r3, [r3, #0]
 8008984:	4a41      	ldr	r2, [pc, #260]	; (8008a8c <HAL_RCC_OscConfig+0x76c>)
 8008986:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800898a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800898c:	f7fe ffd8 	bl	8007940 <HAL_GetTick>
 8008990:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8008992:	e008      	b.n	80089a6 <HAL_RCC_OscConfig+0x686>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8008994:	f7fe ffd4 	bl	8007940 <HAL_GetTick>
 8008998:	4602      	mov	r2, r0
 800899a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800899c:	1ad3      	subs	r3, r2, r3
 800899e:	2b02      	cmp	r3, #2
 80089a0:	d901      	bls.n	80089a6 <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 80089a2:	2303      	movs	r3, #3
 80089a4:	e10e      	b.n	8008bc4 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80089a6:	4b39      	ldr	r3, [pc, #228]	; (8008a8c <HAL_RCC_OscConfig+0x76c>)
 80089a8:	681b      	ldr	r3, [r3, #0]
 80089aa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80089ae:	2b00      	cmp	r3, #0
 80089b0:	d1f0      	bne.n	8008994 <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80089b2:	4b36      	ldr	r3, [pc, #216]	; (8008a8c <HAL_RCC_OscConfig+0x76c>)
 80089b4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80089b6:	4b37      	ldr	r3, [pc, #220]	; (8008a94 <HAL_RCC_OscConfig+0x774>)
 80089b8:	4013      	ands	r3, r2
 80089ba:	687a      	ldr	r2, [r7, #4]
 80089bc:	6a91      	ldr	r1, [r2, #40]	; 0x28
 80089be:	687a      	ldr	r2, [r7, #4]
 80089c0:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 80089c2:	0112      	lsls	r2, r2, #4
 80089c4:	430a      	orrs	r2, r1
 80089c6:	4931      	ldr	r1, [pc, #196]	; (8008a8c <HAL_RCC_OscConfig+0x76c>)
 80089c8:	4313      	orrs	r3, r2
 80089ca:	628b      	str	r3, [r1, #40]	; 0x28
 80089cc:	687b      	ldr	r3, [r7, #4]
 80089ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80089d0:	3b01      	subs	r3, #1
 80089d2:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80089d6:	687b      	ldr	r3, [r7, #4]
 80089d8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80089da:	3b01      	subs	r3, #1
 80089dc:	025b      	lsls	r3, r3, #9
 80089de:	b29b      	uxth	r3, r3
 80089e0:	431a      	orrs	r2, r3
 80089e2:	687b      	ldr	r3, [r7, #4]
 80089e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80089e6:	3b01      	subs	r3, #1
 80089e8:	041b      	lsls	r3, r3, #16
 80089ea:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 80089ee:	431a      	orrs	r2, r3
 80089f0:	687b      	ldr	r3, [r7, #4]
 80089f2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80089f4:	3b01      	subs	r3, #1
 80089f6:	061b      	lsls	r3, r3, #24
 80089f8:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 80089fc:	4923      	ldr	r1, [pc, #140]	; (8008a8c <HAL_RCC_OscConfig+0x76c>)
 80089fe:	4313      	orrs	r3, r2
 8008a00:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 8008a02:	4b22      	ldr	r3, [pc, #136]	; (8008a8c <HAL_RCC_OscConfig+0x76c>)
 8008a04:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008a06:	4a21      	ldr	r2, [pc, #132]	; (8008a8c <HAL_RCC_OscConfig+0x76c>)
 8008a08:	f023 0301 	bic.w	r3, r3, #1
 8008a0c:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8008a0e:	4b1f      	ldr	r3, [pc, #124]	; (8008a8c <HAL_RCC_OscConfig+0x76c>)
 8008a10:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008a12:	4b21      	ldr	r3, [pc, #132]	; (8008a98 <HAL_RCC_OscConfig+0x778>)
 8008a14:	4013      	ands	r3, r2
 8008a16:	687a      	ldr	r2, [r7, #4]
 8008a18:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8008a1a:	00d2      	lsls	r2, r2, #3
 8008a1c:	491b      	ldr	r1, [pc, #108]	; (8008a8c <HAL_RCC_OscConfig+0x76c>)
 8008a1e:	4313      	orrs	r3, r2
 8008a20:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8008a22:	4b1a      	ldr	r3, [pc, #104]	; (8008a8c <HAL_RCC_OscConfig+0x76c>)
 8008a24:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008a26:	f023 020c 	bic.w	r2, r3, #12
 8008a2a:	687b      	ldr	r3, [r7, #4]
 8008a2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008a2e:	4917      	ldr	r1, [pc, #92]	; (8008a8c <HAL_RCC_OscConfig+0x76c>)
 8008a30:	4313      	orrs	r3, r2
 8008a32:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8008a34:	4b15      	ldr	r3, [pc, #84]	; (8008a8c <HAL_RCC_OscConfig+0x76c>)
 8008a36:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008a38:	f023 0202 	bic.w	r2, r3, #2
 8008a3c:	687b      	ldr	r3, [r7, #4]
 8008a3e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008a40:	4912      	ldr	r1, [pc, #72]	; (8008a8c <HAL_RCC_OscConfig+0x76c>)
 8008a42:	4313      	orrs	r3, r2
 8008a44:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8008a46:	4b11      	ldr	r3, [pc, #68]	; (8008a8c <HAL_RCC_OscConfig+0x76c>)
 8008a48:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008a4a:	4a10      	ldr	r2, [pc, #64]	; (8008a8c <HAL_RCC_OscConfig+0x76c>)
 8008a4c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008a50:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008a52:	4b0e      	ldr	r3, [pc, #56]	; (8008a8c <HAL_RCC_OscConfig+0x76c>)
 8008a54:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008a56:	4a0d      	ldr	r2, [pc, #52]	; (8008a8c <HAL_RCC_OscConfig+0x76c>)
 8008a58:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008a5c:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8008a5e:	4b0b      	ldr	r3, [pc, #44]	; (8008a8c <HAL_RCC_OscConfig+0x76c>)
 8008a60:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008a62:	4a0a      	ldr	r2, [pc, #40]	; (8008a8c <HAL_RCC_OscConfig+0x76c>)
 8008a64:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8008a68:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 8008a6a:	4b08      	ldr	r3, [pc, #32]	; (8008a8c <HAL_RCC_OscConfig+0x76c>)
 8008a6c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008a6e:	4a07      	ldr	r2, [pc, #28]	; (8008a8c <HAL_RCC_OscConfig+0x76c>)
 8008a70:	f043 0301 	orr.w	r3, r3, #1
 8008a74:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8008a76:	4b05      	ldr	r3, [pc, #20]	; (8008a8c <HAL_RCC_OscConfig+0x76c>)
 8008a78:	681b      	ldr	r3, [r3, #0]
 8008a7a:	4a04      	ldr	r2, [pc, #16]	; (8008a8c <HAL_RCC_OscConfig+0x76c>)
 8008a7c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8008a80:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008a82:	f7fe ff5d 	bl	8007940 <HAL_GetTick>
 8008a86:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8008a88:	e011      	b.n	8008aae <HAL_RCC_OscConfig+0x78e>
 8008a8a:	bf00      	nop
 8008a8c:	58024400 	.word	0x58024400
 8008a90:	58024800 	.word	0x58024800
 8008a94:	fffffc0c 	.word	0xfffffc0c
 8008a98:	ffff0007 	.word	0xffff0007
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8008a9c:	f7fe ff50 	bl	8007940 <HAL_GetTick>
 8008aa0:	4602      	mov	r2, r0
 8008aa2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008aa4:	1ad3      	subs	r3, r2, r3
 8008aa6:	2b02      	cmp	r3, #2
 8008aa8:	d901      	bls.n	8008aae <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 8008aaa:	2303      	movs	r3, #3
 8008aac:	e08a      	b.n	8008bc4 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8008aae:	4b47      	ldr	r3, [pc, #284]	; (8008bcc <HAL_RCC_OscConfig+0x8ac>)
 8008ab0:	681b      	ldr	r3, [r3, #0]
 8008ab2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008ab6:	2b00      	cmp	r3, #0
 8008ab8:	d0f0      	beq.n	8008a9c <HAL_RCC_OscConfig+0x77c>
 8008aba:	e082      	b.n	8008bc2 <HAL_RCC_OscConfig+0x8a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8008abc:	4b43      	ldr	r3, [pc, #268]	; (8008bcc <HAL_RCC_OscConfig+0x8ac>)
 8008abe:	681b      	ldr	r3, [r3, #0]
 8008ac0:	4a42      	ldr	r2, [pc, #264]	; (8008bcc <HAL_RCC_OscConfig+0x8ac>)
 8008ac2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8008ac6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008ac8:	f7fe ff3a 	bl	8007940 <HAL_GetTick>
 8008acc:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8008ace:	e008      	b.n	8008ae2 <HAL_RCC_OscConfig+0x7c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8008ad0:	f7fe ff36 	bl	8007940 <HAL_GetTick>
 8008ad4:	4602      	mov	r2, r0
 8008ad6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008ad8:	1ad3      	subs	r3, r2, r3
 8008ada:	2b02      	cmp	r3, #2
 8008adc:	d901      	bls.n	8008ae2 <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 8008ade:	2303      	movs	r3, #3
 8008ae0:	e070      	b.n	8008bc4 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8008ae2:	4b3a      	ldr	r3, [pc, #232]	; (8008bcc <HAL_RCC_OscConfig+0x8ac>)
 8008ae4:	681b      	ldr	r3, [r3, #0]
 8008ae6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008aea:	2b00      	cmp	r3, #0
 8008aec:	d1f0      	bne.n	8008ad0 <HAL_RCC_OscConfig+0x7b0>
 8008aee:	e068      	b.n	8008bc2 <HAL_RCC_OscConfig+0x8a2>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8008af0:	4b36      	ldr	r3, [pc, #216]	; (8008bcc <HAL_RCC_OscConfig+0x8ac>)
 8008af2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008af4:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8008af6:	4b35      	ldr	r3, [pc, #212]	; (8008bcc <HAL_RCC_OscConfig+0x8ac>)
 8008af8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008afa:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8008afc:	687b      	ldr	r3, [r7, #4]
 8008afe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008b00:	2b01      	cmp	r3, #1
 8008b02:	d031      	beq.n	8008b68 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8008b04:	693b      	ldr	r3, [r7, #16]
 8008b06:	f003 0203 	and.w	r2, r3, #3
 8008b0a:	687b      	ldr	r3, [r7, #4]
 8008b0c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8008b0e:	429a      	cmp	r2, r3
 8008b10:	d12a      	bne.n	8008b68 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8008b12:	693b      	ldr	r3, [r7, #16]
 8008b14:	091b      	lsrs	r3, r3, #4
 8008b16:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8008b1a:	687b      	ldr	r3, [r7, #4]
 8008b1c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8008b1e:	429a      	cmp	r2, r3
 8008b20:	d122      	bne.n	8008b68 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8008b22:	68fb      	ldr	r3, [r7, #12]
 8008b24:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8008b28:	687b      	ldr	r3, [r7, #4]
 8008b2a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008b2c:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8008b2e:	429a      	cmp	r2, r3
 8008b30:	d11a      	bne.n	8008b68 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8008b32:	68fb      	ldr	r3, [r7, #12]
 8008b34:	0a5b      	lsrs	r3, r3, #9
 8008b36:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8008b3a:	687b      	ldr	r3, [r7, #4]
 8008b3c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008b3e:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8008b40:	429a      	cmp	r2, r3
 8008b42:	d111      	bne.n	8008b68 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8008b44:	68fb      	ldr	r3, [r7, #12]
 8008b46:	0c1b      	lsrs	r3, r3, #16
 8008b48:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8008b4c:	687b      	ldr	r3, [r7, #4]
 8008b4e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008b50:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8008b52:	429a      	cmp	r2, r3
 8008b54:	d108      	bne.n	8008b68 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8008b56:	68fb      	ldr	r3, [r7, #12]
 8008b58:	0e1b      	lsrs	r3, r3, #24
 8008b5a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8008b5e:	687b      	ldr	r3, [r7, #4]
 8008b60:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008b62:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8008b64:	429a      	cmp	r2, r3
 8008b66:	d001      	beq.n	8008b6c <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 8008b68:	2301      	movs	r3, #1
 8008b6a:	e02b      	b.n	8008bc4 <HAL_RCC_OscConfig+0x8a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 8008b6c:	4b17      	ldr	r3, [pc, #92]	; (8008bcc <HAL_RCC_OscConfig+0x8ac>)
 8008b6e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008b70:	08db      	lsrs	r3, r3, #3
 8008b72:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8008b76:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 8008b78:	687b      	ldr	r3, [r7, #4]
 8008b7a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008b7c:	693a      	ldr	r2, [r7, #16]
 8008b7e:	429a      	cmp	r2, r3
 8008b80:	d01f      	beq.n	8008bc2 <HAL_RCC_OscConfig+0x8a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 8008b82:	4b12      	ldr	r3, [pc, #72]	; (8008bcc <HAL_RCC_OscConfig+0x8ac>)
 8008b84:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008b86:	4a11      	ldr	r2, [pc, #68]	; (8008bcc <HAL_RCC_OscConfig+0x8ac>)
 8008b88:	f023 0301 	bic.w	r3, r3, #1
 8008b8c:	62d3      	str	r3, [r2, #44]	; 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8008b8e:	f7fe fed7 	bl	8007940 <HAL_GetTick>
 8008b92:	6278      	str	r0, [r7, #36]	; 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 8008b94:	bf00      	nop
 8008b96:	f7fe fed3 	bl	8007940 <HAL_GetTick>
 8008b9a:	4602      	mov	r2, r0
 8008b9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008b9e:	4293      	cmp	r3, r2
 8008ba0:	d0f9      	beq.n	8008b96 <HAL_RCC_OscConfig+0x876>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8008ba2:	4b0a      	ldr	r3, [pc, #40]	; (8008bcc <HAL_RCC_OscConfig+0x8ac>)
 8008ba4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008ba6:	4b0a      	ldr	r3, [pc, #40]	; (8008bd0 <HAL_RCC_OscConfig+0x8b0>)
 8008ba8:	4013      	ands	r3, r2
 8008baa:	687a      	ldr	r2, [r7, #4]
 8008bac:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8008bae:	00d2      	lsls	r2, r2, #3
 8008bb0:	4906      	ldr	r1, [pc, #24]	; (8008bcc <HAL_RCC_OscConfig+0x8ac>)
 8008bb2:	4313      	orrs	r3, r2
 8008bb4:	634b      	str	r3, [r1, #52]	; 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 8008bb6:	4b05      	ldr	r3, [pc, #20]	; (8008bcc <HAL_RCC_OscConfig+0x8ac>)
 8008bb8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008bba:	4a04      	ldr	r2, [pc, #16]	; (8008bcc <HAL_RCC_OscConfig+0x8ac>)
 8008bbc:	f043 0301 	orr.w	r3, r3, #1
 8008bc0:	62d3      	str	r3, [r2, #44]	; 0x2c
        }
      }
    }
  }
  return HAL_OK;
 8008bc2:	2300      	movs	r3, #0
}
 8008bc4:	4618      	mov	r0, r3
 8008bc6:	3730      	adds	r7, #48	; 0x30
 8008bc8:	46bd      	mov	sp, r7
 8008bca:	bd80      	pop	{r7, pc}
 8008bcc:	58024400 	.word	0x58024400
 8008bd0:	ffff0007 	.word	0xffff0007

08008bd4 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8008bd4:	b580      	push	{r7, lr}
 8008bd6:	b086      	sub	sp, #24
 8008bd8:	af00      	add	r7, sp, #0
 8008bda:	6078      	str	r0, [r7, #4]
 8008bdc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8008bde:	687b      	ldr	r3, [r7, #4]
 8008be0:	2b00      	cmp	r3, #0
 8008be2:	d101      	bne.n	8008be8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8008be4:	2301      	movs	r3, #1
 8008be6:	e19c      	b.n	8008f22 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8008be8:	4b8a      	ldr	r3, [pc, #552]	; (8008e14 <HAL_RCC_ClockConfig+0x240>)
 8008bea:	681b      	ldr	r3, [r3, #0]
 8008bec:	f003 030f 	and.w	r3, r3, #15
 8008bf0:	683a      	ldr	r2, [r7, #0]
 8008bf2:	429a      	cmp	r2, r3
 8008bf4:	d910      	bls.n	8008c18 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8008bf6:	4b87      	ldr	r3, [pc, #540]	; (8008e14 <HAL_RCC_ClockConfig+0x240>)
 8008bf8:	681b      	ldr	r3, [r3, #0]
 8008bfa:	f023 020f 	bic.w	r2, r3, #15
 8008bfe:	4985      	ldr	r1, [pc, #532]	; (8008e14 <HAL_RCC_ClockConfig+0x240>)
 8008c00:	683b      	ldr	r3, [r7, #0]
 8008c02:	4313      	orrs	r3, r2
 8008c04:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8008c06:	4b83      	ldr	r3, [pc, #524]	; (8008e14 <HAL_RCC_ClockConfig+0x240>)
 8008c08:	681b      	ldr	r3, [r3, #0]
 8008c0a:	f003 030f 	and.w	r3, r3, #15
 8008c0e:	683a      	ldr	r2, [r7, #0]
 8008c10:	429a      	cmp	r2, r3
 8008c12:	d001      	beq.n	8008c18 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8008c14:	2301      	movs	r3, #1
 8008c16:	e184      	b.n	8008f22 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8008c18:	687b      	ldr	r3, [r7, #4]
 8008c1a:	681b      	ldr	r3, [r3, #0]
 8008c1c:	f003 0304 	and.w	r3, r3, #4
 8008c20:	2b00      	cmp	r3, #0
 8008c22:	d010      	beq.n	8008c46 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8008c24:	687b      	ldr	r3, [r7, #4]
 8008c26:	691a      	ldr	r2, [r3, #16]
 8008c28:	4b7b      	ldr	r3, [pc, #492]	; (8008e18 <HAL_RCC_ClockConfig+0x244>)
 8008c2a:	699b      	ldr	r3, [r3, #24]
 8008c2c:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8008c30:	429a      	cmp	r2, r3
 8008c32:	d908      	bls.n	8008c46 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8008c34:	4b78      	ldr	r3, [pc, #480]	; (8008e18 <HAL_RCC_ClockConfig+0x244>)
 8008c36:	699b      	ldr	r3, [r3, #24]
 8008c38:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8008c3c:	687b      	ldr	r3, [r7, #4]
 8008c3e:	691b      	ldr	r3, [r3, #16]
 8008c40:	4975      	ldr	r1, [pc, #468]	; (8008e18 <HAL_RCC_ClockConfig+0x244>)
 8008c42:	4313      	orrs	r3, r2
 8008c44:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8008c46:	687b      	ldr	r3, [r7, #4]
 8008c48:	681b      	ldr	r3, [r3, #0]
 8008c4a:	f003 0308 	and.w	r3, r3, #8
 8008c4e:	2b00      	cmp	r3, #0
 8008c50:	d010      	beq.n	8008c74 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8008c52:	687b      	ldr	r3, [r7, #4]
 8008c54:	695a      	ldr	r2, [r3, #20]
 8008c56:	4b70      	ldr	r3, [pc, #448]	; (8008e18 <HAL_RCC_ClockConfig+0x244>)
 8008c58:	69db      	ldr	r3, [r3, #28]
 8008c5a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8008c5e:	429a      	cmp	r2, r3
 8008c60:	d908      	bls.n	8008c74 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8008c62:	4b6d      	ldr	r3, [pc, #436]	; (8008e18 <HAL_RCC_ClockConfig+0x244>)
 8008c64:	69db      	ldr	r3, [r3, #28]
 8008c66:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8008c6a:	687b      	ldr	r3, [r7, #4]
 8008c6c:	695b      	ldr	r3, [r3, #20]
 8008c6e:	496a      	ldr	r1, [pc, #424]	; (8008e18 <HAL_RCC_ClockConfig+0x244>)
 8008c70:	4313      	orrs	r3, r2
 8008c72:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8008c74:	687b      	ldr	r3, [r7, #4]
 8008c76:	681b      	ldr	r3, [r3, #0]
 8008c78:	f003 0310 	and.w	r3, r3, #16
 8008c7c:	2b00      	cmp	r3, #0
 8008c7e:	d010      	beq.n	8008ca2 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8008c80:	687b      	ldr	r3, [r7, #4]
 8008c82:	699a      	ldr	r2, [r3, #24]
 8008c84:	4b64      	ldr	r3, [pc, #400]	; (8008e18 <HAL_RCC_ClockConfig+0x244>)
 8008c86:	69db      	ldr	r3, [r3, #28]
 8008c88:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8008c8c:	429a      	cmp	r2, r3
 8008c8e:	d908      	bls.n	8008ca2 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8008c90:	4b61      	ldr	r3, [pc, #388]	; (8008e18 <HAL_RCC_ClockConfig+0x244>)
 8008c92:	69db      	ldr	r3, [r3, #28]
 8008c94:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8008c98:	687b      	ldr	r3, [r7, #4]
 8008c9a:	699b      	ldr	r3, [r3, #24]
 8008c9c:	495e      	ldr	r1, [pc, #376]	; (8008e18 <HAL_RCC_ClockConfig+0x244>)
 8008c9e:	4313      	orrs	r3, r2
 8008ca0:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8008ca2:	687b      	ldr	r3, [r7, #4]
 8008ca4:	681b      	ldr	r3, [r3, #0]
 8008ca6:	f003 0320 	and.w	r3, r3, #32
 8008caa:	2b00      	cmp	r3, #0
 8008cac:	d010      	beq.n	8008cd0 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8008cae:	687b      	ldr	r3, [r7, #4]
 8008cb0:	69da      	ldr	r2, [r3, #28]
 8008cb2:	4b59      	ldr	r3, [pc, #356]	; (8008e18 <HAL_RCC_ClockConfig+0x244>)
 8008cb4:	6a1b      	ldr	r3, [r3, #32]
 8008cb6:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8008cba:	429a      	cmp	r2, r3
 8008cbc:	d908      	bls.n	8008cd0 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8008cbe:	4b56      	ldr	r3, [pc, #344]	; (8008e18 <HAL_RCC_ClockConfig+0x244>)
 8008cc0:	6a1b      	ldr	r3, [r3, #32]
 8008cc2:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8008cc6:	687b      	ldr	r3, [r7, #4]
 8008cc8:	69db      	ldr	r3, [r3, #28]
 8008cca:	4953      	ldr	r1, [pc, #332]	; (8008e18 <HAL_RCC_ClockConfig+0x244>)
 8008ccc:	4313      	orrs	r3, r2
 8008cce:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8008cd0:	687b      	ldr	r3, [r7, #4]
 8008cd2:	681b      	ldr	r3, [r3, #0]
 8008cd4:	f003 0302 	and.w	r3, r3, #2
 8008cd8:	2b00      	cmp	r3, #0
 8008cda:	d010      	beq.n	8008cfe <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8008cdc:	687b      	ldr	r3, [r7, #4]
 8008cde:	68da      	ldr	r2, [r3, #12]
 8008ce0:	4b4d      	ldr	r3, [pc, #308]	; (8008e18 <HAL_RCC_ClockConfig+0x244>)
 8008ce2:	699b      	ldr	r3, [r3, #24]
 8008ce4:	f003 030f 	and.w	r3, r3, #15
 8008ce8:	429a      	cmp	r2, r3
 8008cea:	d908      	bls.n	8008cfe <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8008cec:	4b4a      	ldr	r3, [pc, #296]	; (8008e18 <HAL_RCC_ClockConfig+0x244>)
 8008cee:	699b      	ldr	r3, [r3, #24]
 8008cf0:	f023 020f 	bic.w	r2, r3, #15
 8008cf4:	687b      	ldr	r3, [r7, #4]
 8008cf6:	68db      	ldr	r3, [r3, #12]
 8008cf8:	4947      	ldr	r1, [pc, #284]	; (8008e18 <HAL_RCC_ClockConfig+0x244>)
 8008cfa:	4313      	orrs	r3, r2
 8008cfc:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8008cfe:	687b      	ldr	r3, [r7, #4]
 8008d00:	681b      	ldr	r3, [r3, #0]
 8008d02:	f003 0301 	and.w	r3, r3, #1
 8008d06:	2b00      	cmp	r3, #0
 8008d08:	d055      	beq.n	8008db6 <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8008d0a:	4b43      	ldr	r3, [pc, #268]	; (8008e18 <HAL_RCC_ClockConfig+0x244>)
 8008d0c:	699b      	ldr	r3, [r3, #24]
 8008d0e:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8008d12:	687b      	ldr	r3, [r7, #4]
 8008d14:	689b      	ldr	r3, [r3, #8]
 8008d16:	4940      	ldr	r1, [pc, #256]	; (8008e18 <HAL_RCC_ClockConfig+0x244>)
 8008d18:	4313      	orrs	r3, r2
 8008d1a:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8008d1c:	687b      	ldr	r3, [r7, #4]
 8008d1e:	685b      	ldr	r3, [r3, #4]
 8008d20:	2b02      	cmp	r3, #2
 8008d22:	d107      	bne.n	8008d34 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8008d24:	4b3c      	ldr	r3, [pc, #240]	; (8008e18 <HAL_RCC_ClockConfig+0x244>)
 8008d26:	681b      	ldr	r3, [r3, #0]
 8008d28:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008d2c:	2b00      	cmp	r3, #0
 8008d2e:	d121      	bne.n	8008d74 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8008d30:	2301      	movs	r3, #1
 8008d32:	e0f6      	b.n	8008f22 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8008d34:	687b      	ldr	r3, [r7, #4]
 8008d36:	685b      	ldr	r3, [r3, #4]
 8008d38:	2b03      	cmp	r3, #3
 8008d3a:	d107      	bne.n	8008d4c <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8008d3c:	4b36      	ldr	r3, [pc, #216]	; (8008e18 <HAL_RCC_ClockConfig+0x244>)
 8008d3e:	681b      	ldr	r3, [r3, #0]
 8008d40:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008d44:	2b00      	cmp	r3, #0
 8008d46:	d115      	bne.n	8008d74 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8008d48:	2301      	movs	r3, #1
 8008d4a:	e0ea      	b.n	8008f22 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8008d4c:	687b      	ldr	r3, [r7, #4]
 8008d4e:	685b      	ldr	r3, [r3, #4]
 8008d50:	2b01      	cmp	r3, #1
 8008d52:	d107      	bne.n	8008d64 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8008d54:	4b30      	ldr	r3, [pc, #192]	; (8008e18 <HAL_RCC_ClockConfig+0x244>)
 8008d56:	681b      	ldr	r3, [r3, #0]
 8008d58:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008d5c:	2b00      	cmp	r3, #0
 8008d5e:	d109      	bne.n	8008d74 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8008d60:	2301      	movs	r3, #1
 8008d62:	e0de      	b.n	8008f22 <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8008d64:	4b2c      	ldr	r3, [pc, #176]	; (8008e18 <HAL_RCC_ClockConfig+0x244>)
 8008d66:	681b      	ldr	r3, [r3, #0]
 8008d68:	f003 0304 	and.w	r3, r3, #4
 8008d6c:	2b00      	cmp	r3, #0
 8008d6e:	d101      	bne.n	8008d74 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8008d70:	2301      	movs	r3, #1
 8008d72:	e0d6      	b.n	8008f22 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8008d74:	4b28      	ldr	r3, [pc, #160]	; (8008e18 <HAL_RCC_ClockConfig+0x244>)
 8008d76:	691b      	ldr	r3, [r3, #16]
 8008d78:	f023 0207 	bic.w	r2, r3, #7
 8008d7c:	687b      	ldr	r3, [r7, #4]
 8008d7e:	685b      	ldr	r3, [r3, #4]
 8008d80:	4925      	ldr	r1, [pc, #148]	; (8008e18 <HAL_RCC_ClockConfig+0x244>)
 8008d82:	4313      	orrs	r3, r2
 8008d84:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008d86:	f7fe fddb 	bl	8007940 <HAL_GetTick>
 8008d8a:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8008d8c:	e00a      	b.n	8008da4 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8008d8e:	f7fe fdd7 	bl	8007940 <HAL_GetTick>
 8008d92:	4602      	mov	r2, r0
 8008d94:	697b      	ldr	r3, [r7, #20]
 8008d96:	1ad3      	subs	r3, r2, r3
 8008d98:	f241 3288 	movw	r2, #5000	; 0x1388
 8008d9c:	4293      	cmp	r3, r2
 8008d9e:	d901      	bls.n	8008da4 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 8008da0:	2303      	movs	r3, #3
 8008da2:	e0be      	b.n	8008f22 <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8008da4:	4b1c      	ldr	r3, [pc, #112]	; (8008e18 <HAL_RCC_ClockConfig+0x244>)
 8008da6:	691b      	ldr	r3, [r3, #16]
 8008da8:	f003 0238 	and.w	r2, r3, #56	; 0x38
 8008dac:	687b      	ldr	r3, [r7, #4]
 8008dae:	685b      	ldr	r3, [r3, #4]
 8008db0:	00db      	lsls	r3, r3, #3
 8008db2:	429a      	cmp	r2, r3
 8008db4:	d1eb      	bne.n	8008d8e <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8008db6:	687b      	ldr	r3, [r7, #4]
 8008db8:	681b      	ldr	r3, [r3, #0]
 8008dba:	f003 0302 	and.w	r3, r3, #2
 8008dbe:	2b00      	cmp	r3, #0
 8008dc0:	d010      	beq.n	8008de4 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8008dc2:	687b      	ldr	r3, [r7, #4]
 8008dc4:	68da      	ldr	r2, [r3, #12]
 8008dc6:	4b14      	ldr	r3, [pc, #80]	; (8008e18 <HAL_RCC_ClockConfig+0x244>)
 8008dc8:	699b      	ldr	r3, [r3, #24]
 8008dca:	f003 030f 	and.w	r3, r3, #15
 8008dce:	429a      	cmp	r2, r3
 8008dd0:	d208      	bcs.n	8008de4 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8008dd2:	4b11      	ldr	r3, [pc, #68]	; (8008e18 <HAL_RCC_ClockConfig+0x244>)
 8008dd4:	699b      	ldr	r3, [r3, #24]
 8008dd6:	f023 020f 	bic.w	r2, r3, #15
 8008dda:	687b      	ldr	r3, [r7, #4]
 8008ddc:	68db      	ldr	r3, [r3, #12]
 8008dde:	490e      	ldr	r1, [pc, #56]	; (8008e18 <HAL_RCC_ClockConfig+0x244>)
 8008de0:	4313      	orrs	r3, r2
 8008de2:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8008de4:	4b0b      	ldr	r3, [pc, #44]	; (8008e14 <HAL_RCC_ClockConfig+0x240>)
 8008de6:	681b      	ldr	r3, [r3, #0]
 8008de8:	f003 030f 	and.w	r3, r3, #15
 8008dec:	683a      	ldr	r2, [r7, #0]
 8008dee:	429a      	cmp	r2, r3
 8008df0:	d214      	bcs.n	8008e1c <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8008df2:	4b08      	ldr	r3, [pc, #32]	; (8008e14 <HAL_RCC_ClockConfig+0x240>)
 8008df4:	681b      	ldr	r3, [r3, #0]
 8008df6:	f023 020f 	bic.w	r2, r3, #15
 8008dfa:	4906      	ldr	r1, [pc, #24]	; (8008e14 <HAL_RCC_ClockConfig+0x240>)
 8008dfc:	683b      	ldr	r3, [r7, #0]
 8008dfe:	4313      	orrs	r3, r2
 8008e00:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8008e02:	4b04      	ldr	r3, [pc, #16]	; (8008e14 <HAL_RCC_ClockConfig+0x240>)
 8008e04:	681b      	ldr	r3, [r3, #0]
 8008e06:	f003 030f 	and.w	r3, r3, #15
 8008e0a:	683a      	ldr	r2, [r7, #0]
 8008e0c:	429a      	cmp	r2, r3
 8008e0e:	d005      	beq.n	8008e1c <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8008e10:	2301      	movs	r3, #1
 8008e12:	e086      	b.n	8008f22 <HAL_RCC_ClockConfig+0x34e>
 8008e14:	52002000 	.word	0x52002000
 8008e18:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8008e1c:	687b      	ldr	r3, [r7, #4]
 8008e1e:	681b      	ldr	r3, [r3, #0]
 8008e20:	f003 0304 	and.w	r3, r3, #4
 8008e24:	2b00      	cmp	r3, #0
 8008e26:	d010      	beq.n	8008e4a <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8008e28:	687b      	ldr	r3, [r7, #4]
 8008e2a:	691a      	ldr	r2, [r3, #16]
 8008e2c:	4b3f      	ldr	r3, [pc, #252]	; (8008f2c <HAL_RCC_ClockConfig+0x358>)
 8008e2e:	699b      	ldr	r3, [r3, #24]
 8008e30:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8008e34:	429a      	cmp	r2, r3
 8008e36:	d208      	bcs.n	8008e4a <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8008e38:	4b3c      	ldr	r3, [pc, #240]	; (8008f2c <HAL_RCC_ClockConfig+0x358>)
 8008e3a:	699b      	ldr	r3, [r3, #24]
 8008e3c:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8008e40:	687b      	ldr	r3, [r7, #4]
 8008e42:	691b      	ldr	r3, [r3, #16]
 8008e44:	4939      	ldr	r1, [pc, #228]	; (8008f2c <HAL_RCC_ClockConfig+0x358>)
 8008e46:	4313      	orrs	r3, r2
 8008e48:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8008e4a:	687b      	ldr	r3, [r7, #4]
 8008e4c:	681b      	ldr	r3, [r3, #0]
 8008e4e:	f003 0308 	and.w	r3, r3, #8
 8008e52:	2b00      	cmp	r3, #0
 8008e54:	d010      	beq.n	8008e78 <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8008e56:	687b      	ldr	r3, [r7, #4]
 8008e58:	695a      	ldr	r2, [r3, #20]
 8008e5a:	4b34      	ldr	r3, [pc, #208]	; (8008f2c <HAL_RCC_ClockConfig+0x358>)
 8008e5c:	69db      	ldr	r3, [r3, #28]
 8008e5e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8008e62:	429a      	cmp	r2, r3
 8008e64:	d208      	bcs.n	8008e78 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8008e66:	4b31      	ldr	r3, [pc, #196]	; (8008f2c <HAL_RCC_ClockConfig+0x358>)
 8008e68:	69db      	ldr	r3, [r3, #28]
 8008e6a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8008e6e:	687b      	ldr	r3, [r7, #4]
 8008e70:	695b      	ldr	r3, [r3, #20]
 8008e72:	492e      	ldr	r1, [pc, #184]	; (8008f2c <HAL_RCC_ClockConfig+0x358>)
 8008e74:	4313      	orrs	r3, r2
 8008e76:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8008e78:	687b      	ldr	r3, [r7, #4]
 8008e7a:	681b      	ldr	r3, [r3, #0]
 8008e7c:	f003 0310 	and.w	r3, r3, #16
 8008e80:	2b00      	cmp	r3, #0
 8008e82:	d010      	beq.n	8008ea6 <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8008e84:	687b      	ldr	r3, [r7, #4]
 8008e86:	699a      	ldr	r2, [r3, #24]
 8008e88:	4b28      	ldr	r3, [pc, #160]	; (8008f2c <HAL_RCC_ClockConfig+0x358>)
 8008e8a:	69db      	ldr	r3, [r3, #28]
 8008e8c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8008e90:	429a      	cmp	r2, r3
 8008e92:	d208      	bcs.n	8008ea6 <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8008e94:	4b25      	ldr	r3, [pc, #148]	; (8008f2c <HAL_RCC_ClockConfig+0x358>)
 8008e96:	69db      	ldr	r3, [r3, #28]
 8008e98:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8008e9c:	687b      	ldr	r3, [r7, #4]
 8008e9e:	699b      	ldr	r3, [r3, #24]
 8008ea0:	4922      	ldr	r1, [pc, #136]	; (8008f2c <HAL_RCC_ClockConfig+0x358>)
 8008ea2:	4313      	orrs	r3, r2
 8008ea4:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8008ea6:	687b      	ldr	r3, [r7, #4]
 8008ea8:	681b      	ldr	r3, [r3, #0]
 8008eaa:	f003 0320 	and.w	r3, r3, #32
 8008eae:	2b00      	cmp	r3, #0
 8008eb0:	d010      	beq.n	8008ed4 <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8008eb2:	687b      	ldr	r3, [r7, #4]
 8008eb4:	69da      	ldr	r2, [r3, #28]
 8008eb6:	4b1d      	ldr	r3, [pc, #116]	; (8008f2c <HAL_RCC_ClockConfig+0x358>)
 8008eb8:	6a1b      	ldr	r3, [r3, #32]
 8008eba:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8008ebe:	429a      	cmp	r2, r3
 8008ec0:	d208      	bcs.n	8008ed4 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8008ec2:	4b1a      	ldr	r3, [pc, #104]	; (8008f2c <HAL_RCC_ClockConfig+0x358>)
 8008ec4:	6a1b      	ldr	r3, [r3, #32]
 8008ec6:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8008eca:	687b      	ldr	r3, [r7, #4]
 8008ecc:	69db      	ldr	r3, [r3, #28]
 8008ece:	4917      	ldr	r1, [pc, #92]	; (8008f2c <HAL_RCC_ClockConfig+0x358>)
 8008ed0:	4313      	orrs	r3, r2
 8008ed2:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8008ed4:	f000 f89e 	bl	8009014 <HAL_RCC_GetSysClockFreq>
 8008ed8:	4602      	mov	r2, r0
 8008eda:	4b14      	ldr	r3, [pc, #80]	; (8008f2c <HAL_RCC_ClockConfig+0x358>)
 8008edc:	699b      	ldr	r3, [r3, #24]
 8008ede:	0a1b      	lsrs	r3, r3, #8
 8008ee0:	f003 030f 	and.w	r3, r3, #15
 8008ee4:	4912      	ldr	r1, [pc, #72]	; (8008f30 <HAL_RCC_ClockConfig+0x35c>)
 8008ee6:	5ccb      	ldrb	r3, [r1, r3]
 8008ee8:	f003 031f 	and.w	r3, r3, #31
 8008eec:	fa22 f303 	lsr.w	r3, r2, r3
 8008ef0:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8008ef2:	4b0e      	ldr	r3, [pc, #56]	; (8008f2c <HAL_RCC_ClockConfig+0x358>)
 8008ef4:	699b      	ldr	r3, [r3, #24]
 8008ef6:	f003 030f 	and.w	r3, r3, #15
 8008efa:	4a0d      	ldr	r2, [pc, #52]	; (8008f30 <HAL_RCC_ClockConfig+0x35c>)
 8008efc:	5cd3      	ldrb	r3, [r2, r3]
 8008efe:	f003 031f 	and.w	r3, r3, #31
 8008f02:	693a      	ldr	r2, [r7, #16]
 8008f04:	fa22 f303 	lsr.w	r3, r2, r3
 8008f08:	4a0a      	ldr	r2, [pc, #40]	; (8008f34 <HAL_RCC_ClockConfig+0x360>)
 8008f0a:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8008f0c:	4a0a      	ldr	r2, [pc, #40]	; (8008f38 <HAL_RCC_ClockConfig+0x364>)
 8008f0e:	693b      	ldr	r3, [r7, #16]
 8008f10:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 8008f12:	4b0a      	ldr	r3, [pc, #40]	; (8008f3c <HAL_RCC_ClockConfig+0x368>)
 8008f14:	681b      	ldr	r3, [r3, #0]
 8008f16:	4618      	mov	r0, r3
 8008f18:	f7fe fcc8 	bl	80078ac <HAL_InitTick>
 8008f1c:	4603      	mov	r3, r0
 8008f1e:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8008f20:	7bfb      	ldrb	r3, [r7, #15]
}
 8008f22:	4618      	mov	r0, r3
 8008f24:	3718      	adds	r7, #24
 8008f26:	46bd      	mov	sp, r7
 8008f28:	bd80      	pop	{r7, pc}
 8008f2a:	bf00      	nop
 8008f2c:	58024400 	.word	0x58024400
 8008f30:	080100a0 	.word	0x080100a0
 8008f34:	24000004 	.word	0x24000004
 8008f38:	24000000 	.word	0x24000000
 8008f3c:	24000038 	.word	0x24000038

08008f40 <HAL_RCC_MCOConfig>:
  *          This parameter can be one of the following values:
  *            @arg RCC_MCODIV_1 up to RCC_MCODIV_15  : divider applied to MCOx clock
  * @retval None
  */
void HAL_RCC_MCOConfig(uint32_t RCC_MCOx, uint32_t RCC_MCOSource, uint32_t RCC_MCODiv)
{
 8008f40:	b580      	push	{r7, lr}
 8008f42:	b08c      	sub	sp, #48	; 0x30
 8008f44:	af00      	add	r7, sp, #0
 8008f46:	60f8      	str	r0, [r7, #12]
 8008f48:	60b9      	str	r1, [r7, #8]
 8008f4a:	607a      	str	r2, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct;
  /* Check the parameters */
  assert_param(IS_RCC_MCO(RCC_MCOx));
  assert_param(IS_RCC_MCODIV(RCC_MCODiv));
  /* RCC_MCO1 */
  if (RCC_MCOx == RCC_MCO1)
 8008f4c:	68fb      	ldr	r3, [r7, #12]
 8008f4e:	2b00      	cmp	r3, #0
 8008f50:	d12a      	bne.n	8008fa8 <HAL_RCC_MCOConfig+0x68>
  {
    assert_param(IS_RCC_MCO1SOURCE(RCC_MCOSource));

    /* MCO1 Clock Enable */
    MCO1_CLK_ENABLE();
 8008f52:	4b2d      	ldr	r3, [pc, #180]	; (8009008 <HAL_RCC_MCOConfig+0xc8>)
 8008f54:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8008f58:	4a2b      	ldr	r2, [pc, #172]	; (8009008 <HAL_RCC_MCOConfig+0xc8>)
 8008f5a:	f043 0301 	orr.w	r3, r3, #1
 8008f5e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8008f62:	4b29      	ldr	r3, [pc, #164]	; (8009008 <HAL_RCC_MCOConfig+0xc8>)
 8008f64:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8008f68:	f003 0301 	and.w	r3, r3, #1
 8008f6c:	61bb      	str	r3, [r7, #24]
 8008f6e:	69bb      	ldr	r3, [r7, #24]

    /* Configure the MCO1 pin in alternate function mode */
    GPIO_InitStruct.Pin = MCO1_PIN;
 8008f70:	f44f 7380 	mov.w	r3, #256	; 0x100
 8008f74:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008f76:	2302      	movs	r3, #2
 8008f78:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8008f7a:	2303      	movs	r3, #3
 8008f7c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008f7e:	2300      	movs	r3, #0
 8008f80:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 8008f82:	2300      	movs	r3, #0
 8008f84:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(MCO1_GPIO_PORT, &GPIO_InitStruct);
 8008f86:	f107 031c 	add.w	r3, r7, #28
 8008f8a:	4619      	mov	r1, r3
 8008f8c:	481f      	ldr	r0, [pc, #124]	; (800900c <HAL_RCC_MCOConfig+0xcc>)
 8008f8e:	f7fe fe23 	bl	8007bd8 <HAL_GPIO_Init>

    /* Mask MCO1 and MCO1PRE[3:0] bits then Select MCO1 clock source and pre-scaler */
    MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCO1 | RCC_CFGR_MCO1PRE), (RCC_MCOSource | RCC_MCODiv));
 8008f92:	4b1d      	ldr	r3, [pc, #116]	; (8009008 <HAL_RCC_MCOConfig+0xc8>)
 8008f94:	691b      	ldr	r3, [r3, #16]
 8008f96:	f023 72fe 	bic.w	r2, r3, #33292288	; 0x1fc0000
 8008f9a:	68b9      	ldr	r1, [r7, #8]
 8008f9c:	687b      	ldr	r3, [r7, #4]
 8008f9e:	430b      	orrs	r3, r1
 8008fa0:	4919      	ldr	r1, [pc, #100]	; (8009008 <HAL_RCC_MCOConfig+0xc8>)
 8008fa2:	4313      	orrs	r3, r2
 8008fa4:	610b      	str	r3, [r1, #16]
    HAL_GPIO_Init(MCO2_GPIO_PORT, &GPIO_InitStruct);

    /* Mask MCO2 and MCO2PRE[3:0] bits then Select MCO2 clock source and pre-scaler */
    MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCO2 | RCC_CFGR_MCO2PRE), (RCC_MCOSource | (RCC_MCODiv << 7U)));
  }
}
 8008fa6:	e02a      	b.n	8008ffe <HAL_RCC_MCOConfig+0xbe>
    MCO2_CLK_ENABLE();
 8008fa8:	4b17      	ldr	r3, [pc, #92]	; (8009008 <HAL_RCC_MCOConfig+0xc8>)
 8008faa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8008fae:	4a16      	ldr	r2, [pc, #88]	; (8009008 <HAL_RCC_MCOConfig+0xc8>)
 8008fb0:	f043 0304 	orr.w	r3, r3, #4
 8008fb4:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8008fb8:	4b13      	ldr	r3, [pc, #76]	; (8009008 <HAL_RCC_MCOConfig+0xc8>)
 8008fba:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8008fbe:	f003 0304 	and.w	r3, r3, #4
 8008fc2:	617b      	str	r3, [r7, #20]
 8008fc4:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = MCO2_PIN;
 8008fc6:	f44f 7300 	mov.w	r3, #512	; 0x200
 8008fca:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008fcc:	2302      	movs	r3, #2
 8008fce:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8008fd0:	2303      	movs	r3, #3
 8008fd2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008fd4:	2300      	movs	r3, #0
 8008fd6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 8008fd8:	2300      	movs	r3, #0
 8008fda:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(MCO2_GPIO_PORT, &GPIO_InitStruct);
 8008fdc:	f107 031c 	add.w	r3, r7, #28
 8008fe0:	4619      	mov	r1, r3
 8008fe2:	480b      	ldr	r0, [pc, #44]	; (8009010 <HAL_RCC_MCOConfig+0xd0>)
 8008fe4:	f7fe fdf8 	bl	8007bd8 <HAL_GPIO_Init>
    MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCO2 | RCC_CFGR_MCO2PRE), (RCC_MCOSource | (RCC_MCODiv << 7U)));
 8008fe8:	4b07      	ldr	r3, [pc, #28]	; (8009008 <HAL_RCC_MCOConfig+0xc8>)
 8008fea:	691b      	ldr	r3, [r3, #16]
 8008fec:	f023 427e 	bic.w	r2, r3, #4261412864	; 0xfe000000
 8008ff0:	687b      	ldr	r3, [r7, #4]
 8008ff2:	01d9      	lsls	r1, r3, #7
 8008ff4:	68bb      	ldr	r3, [r7, #8]
 8008ff6:	430b      	orrs	r3, r1
 8008ff8:	4903      	ldr	r1, [pc, #12]	; (8009008 <HAL_RCC_MCOConfig+0xc8>)
 8008ffa:	4313      	orrs	r3, r2
 8008ffc:	610b      	str	r3, [r1, #16]
}
 8008ffe:	bf00      	nop
 8009000:	3730      	adds	r7, #48	; 0x30
 8009002:	46bd      	mov	sp, r7
 8009004:	bd80      	pop	{r7, pc}
 8009006:	bf00      	nop
 8009008:	58024400 	.word	0x58024400
 800900c:	58020000 	.word	0x58020000
 8009010:	58020800 	.word	0x58020800

08009014 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8009014:	b480      	push	{r7}
 8009016:	b089      	sub	sp, #36	; 0x24
 8009018:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 800901a:	4bb3      	ldr	r3, [pc, #716]	; (80092e8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800901c:	691b      	ldr	r3, [r3, #16]
 800901e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8009022:	2b18      	cmp	r3, #24
 8009024:	f200 8155 	bhi.w	80092d2 <HAL_RCC_GetSysClockFreq+0x2be>
 8009028:	a201      	add	r2, pc, #4	; (adr r2, 8009030 <HAL_RCC_GetSysClockFreq+0x1c>)
 800902a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800902e:	bf00      	nop
 8009030:	08009095 	.word	0x08009095
 8009034:	080092d3 	.word	0x080092d3
 8009038:	080092d3 	.word	0x080092d3
 800903c:	080092d3 	.word	0x080092d3
 8009040:	080092d3 	.word	0x080092d3
 8009044:	080092d3 	.word	0x080092d3
 8009048:	080092d3 	.word	0x080092d3
 800904c:	080092d3 	.word	0x080092d3
 8009050:	080090bb 	.word	0x080090bb
 8009054:	080092d3 	.word	0x080092d3
 8009058:	080092d3 	.word	0x080092d3
 800905c:	080092d3 	.word	0x080092d3
 8009060:	080092d3 	.word	0x080092d3
 8009064:	080092d3 	.word	0x080092d3
 8009068:	080092d3 	.word	0x080092d3
 800906c:	080092d3 	.word	0x080092d3
 8009070:	080090c1 	.word	0x080090c1
 8009074:	080092d3 	.word	0x080092d3
 8009078:	080092d3 	.word	0x080092d3
 800907c:	080092d3 	.word	0x080092d3
 8009080:	080092d3 	.word	0x080092d3
 8009084:	080092d3 	.word	0x080092d3
 8009088:	080092d3 	.word	0x080092d3
 800908c:	080092d3 	.word	0x080092d3
 8009090:	080090c7 	.word	0x080090c7
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8009094:	4b94      	ldr	r3, [pc, #592]	; (80092e8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009096:	681b      	ldr	r3, [r3, #0]
 8009098:	f003 0320 	and.w	r3, r3, #32
 800909c:	2b00      	cmp	r3, #0
 800909e:	d009      	beq.n	80090b4 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80090a0:	4b91      	ldr	r3, [pc, #580]	; (80092e8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80090a2:	681b      	ldr	r3, [r3, #0]
 80090a4:	08db      	lsrs	r3, r3, #3
 80090a6:	f003 0303 	and.w	r3, r3, #3
 80090aa:	4a90      	ldr	r2, [pc, #576]	; (80092ec <HAL_RCC_GetSysClockFreq+0x2d8>)
 80090ac:	fa22 f303 	lsr.w	r3, r2, r3
 80090b0:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 80090b2:	e111      	b.n	80092d8 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 80090b4:	4b8d      	ldr	r3, [pc, #564]	; (80092ec <HAL_RCC_GetSysClockFreq+0x2d8>)
 80090b6:	61bb      	str	r3, [r7, #24]
      break;
 80090b8:	e10e      	b.n	80092d8 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 80090ba:	4b8d      	ldr	r3, [pc, #564]	; (80092f0 <HAL_RCC_GetSysClockFreq+0x2dc>)
 80090bc:	61bb      	str	r3, [r7, #24]
      break;
 80090be:	e10b      	b.n	80092d8 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 80090c0:	4b8c      	ldr	r3, [pc, #560]	; (80092f4 <HAL_RCC_GetSysClockFreq+0x2e0>)
 80090c2:	61bb      	str	r3, [r7, #24]
      break;
 80090c4:	e108      	b.n	80092d8 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80090c6:	4b88      	ldr	r3, [pc, #544]	; (80092e8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80090c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80090ca:	f003 0303 	and.w	r3, r3, #3
 80090ce:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 80090d0:	4b85      	ldr	r3, [pc, #532]	; (80092e8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80090d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80090d4:	091b      	lsrs	r3, r3, #4
 80090d6:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80090da:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 80090dc:	4b82      	ldr	r3, [pc, #520]	; (80092e8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80090de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80090e0:	f003 0301 	and.w	r3, r3, #1
 80090e4:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 80090e6:	4b80      	ldr	r3, [pc, #512]	; (80092e8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80090e8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80090ea:	08db      	lsrs	r3, r3, #3
 80090ec:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80090f0:	68fa      	ldr	r2, [r7, #12]
 80090f2:	fb02 f303 	mul.w	r3, r2, r3
 80090f6:	ee07 3a90 	vmov	s15, r3
 80090fa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80090fe:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 8009102:	693b      	ldr	r3, [r7, #16]
 8009104:	2b00      	cmp	r3, #0
 8009106:	f000 80e1 	beq.w	80092cc <HAL_RCC_GetSysClockFreq+0x2b8>
 800910a:	697b      	ldr	r3, [r7, #20]
 800910c:	2b02      	cmp	r3, #2
 800910e:	f000 8083 	beq.w	8009218 <HAL_RCC_GetSysClockFreq+0x204>
 8009112:	697b      	ldr	r3, [r7, #20]
 8009114:	2b02      	cmp	r3, #2
 8009116:	f200 80a1 	bhi.w	800925c <HAL_RCC_GetSysClockFreq+0x248>
 800911a:	697b      	ldr	r3, [r7, #20]
 800911c:	2b00      	cmp	r3, #0
 800911e:	d003      	beq.n	8009128 <HAL_RCC_GetSysClockFreq+0x114>
 8009120:	697b      	ldr	r3, [r7, #20]
 8009122:	2b01      	cmp	r3, #1
 8009124:	d056      	beq.n	80091d4 <HAL_RCC_GetSysClockFreq+0x1c0>
 8009126:	e099      	b.n	800925c <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8009128:	4b6f      	ldr	r3, [pc, #444]	; (80092e8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800912a:	681b      	ldr	r3, [r3, #0]
 800912c:	f003 0320 	and.w	r3, r3, #32
 8009130:	2b00      	cmp	r3, #0
 8009132:	d02d      	beq.n	8009190 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8009134:	4b6c      	ldr	r3, [pc, #432]	; (80092e8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009136:	681b      	ldr	r3, [r3, #0]
 8009138:	08db      	lsrs	r3, r3, #3
 800913a:	f003 0303 	and.w	r3, r3, #3
 800913e:	4a6b      	ldr	r2, [pc, #428]	; (80092ec <HAL_RCC_GetSysClockFreq+0x2d8>)
 8009140:	fa22 f303 	lsr.w	r3, r2, r3
 8009144:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8009146:	687b      	ldr	r3, [r7, #4]
 8009148:	ee07 3a90 	vmov	s15, r3
 800914c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009150:	693b      	ldr	r3, [r7, #16]
 8009152:	ee07 3a90 	vmov	s15, r3
 8009156:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800915a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800915e:	4b62      	ldr	r3, [pc, #392]	; (80092e8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009160:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009162:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009166:	ee07 3a90 	vmov	s15, r3
 800916a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800916e:	ed97 6a02 	vldr	s12, [r7, #8]
 8009172:	eddf 5a61 	vldr	s11, [pc, #388]	; 80092f8 <HAL_RCC_GetSysClockFreq+0x2e4>
 8009176:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800917a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800917e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009182:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009186:	ee67 7a27 	vmul.f32	s15, s14, s15
 800918a:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 800918e:	e087      	b.n	80092a0 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8009190:	693b      	ldr	r3, [r7, #16]
 8009192:	ee07 3a90 	vmov	s15, r3
 8009196:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800919a:	eddf 6a58 	vldr	s13, [pc, #352]	; 80092fc <HAL_RCC_GetSysClockFreq+0x2e8>
 800919e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80091a2:	4b51      	ldr	r3, [pc, #324]	; (80092e8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80091a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80091a6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80091aa:	ee07 3a90 	vmov	s15, r3
 80091ae:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80091b2:	ed97 6a02 	vldr	s12, [r7, #8]
 80091b6:	eddf 5a50 	vldr	s11, [pc, #320]	; 80092f8 <HAL_RCC_GetSysClockFreq+0x2e4>
 80091ba:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80091be:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80091c2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80091c6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80091ca:	ee67 7a27 	vmul.f32	s15, s14, s15
 80091ce:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80091d2:	e065      	b.n	80092a0 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80091d4:	693b      	ldr	r3, [r7, #16]
 80091d6:	ee07 3a90 	vmov	s15, r3
 80091da:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80091de:	eddf 6a48 	vldr	s13, [pc, #288]	; 8009300 <HAL_RCC_GetSysClockFreq+0x2ec>
 80091e2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80091e6:	4b40      	ldr	r3, [pc, #256]	; (80092e8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80091e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80091ea:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80091ee:	ee07 3a90 	vmov	s15, r3
 80091f2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80091f6:	ed97 6a02 	vldr	s12, [r7, #8]
 80091fa:	eddf 5a3f 	vldr	s11, [pc, #252]	; 80092f8 <HAL_RCC_GetSysClockFreq+0x2e4>
 80091fe:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009202:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009206:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800920a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800920e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009212:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8009216:	e043      	b.n	80092a0 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8009218:	693b      	ldr	r3, [r7, #16]
 800921a:	ee07 3a90 	vmov	s15, r3
 800921e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009222:	eddf 6a38 	vldr	s13, [pc, #224]	; 8009304 <HAL_RCC_GetSysClockFreq+0x2f0>
 8009226:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800922a:	4b2f      	ldr	r3, [pc, #188]	; (80092e8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800922c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800922e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009232:	ee07 3a90 	vmov	s15, r3
 8009236:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800923a:	ed97 6a02 	vldr	s12, [r7, #8]
 800923e:	eddf 5a2e 	vldr	s11, [pc, #184]	; 80092f8 <HAL_RCC_GetSysClockFreq+0x2e4>
 8009242:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009246:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800924a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800924e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009252:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009256:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800925a:	e021      	b.n	80092a0 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800925c:	693b      	ldr	r3, [r7, #16]
 800925e:	ee07 3a90 	vmov	s15, r3
 8009262:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009266:	eddf 6a26 	vldr	s13, [pc, #152]	; 8009300 <HAL_RCC_GetSysClockFreq+0x2ec>
 800926a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800926e:	4b1e      	ldr	r3, [pc, #120]	; (80092e8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009270:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009272:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009276:	ee07 3a90 	vmov	s15, r3
 800927a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800927e:	ed97 6a02 	vldr	s12, [r7, #8]
 8009282:	eddf 5a1d 	vldr	s11, [pc, #116]	; 80092f8 <HAL_RCC_GetSysClockFreq+0x2e4>
 8009286:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800928a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800928e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009292:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009296:	ee67 7a27 	vmul.f32	s15, s14, s15
 800929a:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800929e:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 80092a0:	4b11      	ldr	r3, [pc, #68]	; (80092e8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80092a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80092a4:	0a5b      	lsrs	r3, r3, #9
 80092a6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80092aa:	3301      	adds	r3, #1
 80092ac:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 80092ae:	683b      	ldr	r3, [r7, #0]
 80092b0:	ee07 3a90 	vmov	s15, r3
 80092b4:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80092b8:	edd7 6a07 	vldr	s13, [r7, #28]
 80092bc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80092c0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80092c4:	ee17 3a90 	vmov	r3, s15
 80092c8:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 80092ca:	e005      	b.n	80092d8 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 80092cc:	2300      	movs	r3, #0
 80092ce:	61bb      	str	r3, [r7, #24]
      break;
 80092d0:	e002      	b.n	80092d8 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 80092d2:	4b07      	ldr	r3, [pc, #28]	; (80092f0 <HAL_RCC_GetSysClockFreq+0x2dc>)
 80092d4:	61bb      	str	r3, [r7, #24]
      break;
 80092d6:	bf00      	nop
  }

  return sysclockfreq;
 80092d8:	69bb      	ldr	r3, [r7, #24]
}
 80092da:	4618      	mov	r0, r3
 80092dc:	3724      	adds	r7, #36	; 0x24
 80092de:	46bd      	mov	sp, r7
 80092e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092e4:	4770      	bx	lr
 80092e6:	bf00      	nop
 80092e8:	58024400 	.word	0x58024400
 80092ec:	03d09000 	.word	0x03d09000
 80092f0:	003d0900 	.word	0x003d0900
 80092f4:	017d7840 	.word	0x017d7840
 80092f8:	46000000 	.word	0x46000000
 80092fc:	4c742400 	.word	0x4c742400
 8009300:	4a742400 	.word	0x4a742400
 8009304:	4bbebc20 	.word	0x4bbebc20

08009308 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8009308:	b580      	push	{r7, lr}
 800930a:	b082      	sub	sp, #8
 800930c:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 800930e:	f7ff fe81 	bl	8009014 <HAL_RCC_GetSysClockFreq>
 8009312:	4602      	mov	r2, r0
 8009314:	4b10      	ldr	r3, [pc, #64]	; (8009358 <HAL_RCC_GetHCLKFreq+0x50>)
 8009316:	699b      	ldr	r3, [r3, #24]
 8009318:	0a1b      	lsrs	r3, r3, #8
 800931a:	f003 030f 	and.w	r3, r3, #15
 800931e:	490f      	ldr	r1, [pc, #60]	; (800935c <HAL_RCC_GetHCLKFreq+0x54>)
 8009320:	5ccb      	ldrb	r3, [r1, r3]
 8009322:	f003 031f 	and.w	r3, r3, #31
 8009326:	fa22 f303 	lsr.w	r3, r2, r3
 800932a:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800932c:	4b0a      	ldr	r3, [pc, #40]	; (8009358 <HAL_RCC_GetHCLKFreq+0x50>)
 800932e:	699b      	ldr	r3, [r3, #24]
 8009330:	f003 030f 	and.w	r3, r3, #15
 8009334:	4a09      	ldr	r2, [pc, #36]	; (800935c <HAL_RCC_GetHCLKFreq+0x54>)
 8009336:	5cd3      	ldrb	r3, [r2, r3]
 8009338:	f003 031f 	and.w	r3, r3, #31
 800933c:	687a      	ldr	r2, [r7, #4]
 800933e:	fa22 f303 	lsr.w	r3, r2, r3
 8009342:	4a07      	ldr	r2, [pc, #28]	; (8009360 <HAL_RCC_GetHCLKFreq+0x58>)
 8009344:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8009346:	4a07      	ldr	r2, [pc, #28]	; (8009364 <HAL_RCC_GetHCLKFreq+0x5c>)
 8009348:	687b      	ldr	r3, [r7, #4]
 800934a:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 800934c:	4b04      	ldr	r3, [pc, #16]	; (8009360 <HAL_RCC_GetHCLKFreq+0x58>)
 800934e:	681b      	ldr	r3, [r3, #0]
}
 8009350:	4618      	mov	r0, r3
 8009352:	3708      	adds	r7, #8
 8009354:	46bd      	mov	sp, r7
 8009356:	bd80      	pop	{r7, pc}
 8009358:	58024400 	.word	0x58024400
 800935c:	080100a0 	.word	0x080100a0
 8009360:	24000004 	.word	0x24000004
 8009364:	24000000 	.word	0x24000000

08009368 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8009368:	b580      	push	{r7, lr}
 800936a:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 800936c:	f7ff ffcc 	bl	8009308 <HAL_RCC_GetHCLKFreq>
 8009370:	4602      	mov	r2, r0
 8009372:	4b06      	ldr	r3, [pc, #24]	; (800938c <HAL_RCC_GetPCLK1Freq+0x24>)
 8009374:	69db      	ldr	r3, [r3, #28]
 8009376:	091b      	lsrs	r3, r3, #4
 8009378:	f003 0307 	and.w	r3, r3, #7
 800937c:	4904      	ldr	r1, [pc, #16]	; (8009390 <HAL_RCC_GetPCLK1Freq+0x28>)
 800937e:	5ccb      	ldrb	r3, [r1, r3]
 8009380:	f003 031f 	and.w	r3, r3, #31
 8009384:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8009388:	4618      	mov	r0, r3
 800938a:	bd80      	pop	{r7, pc}
 800938c:	58024400 	.word	0x58024400
 8009390:	080100a0 	.word	0x080100a0

08009394 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8009394:	b580      	push	{r7, lr}
 8009396:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8009398:	f7ff ffb6 	bl	8009308 <HAL_RCC_GetHCLKFreq>
 800939c:	4602      	mov	r2, r0
 800939e:	4b06      	ldr	r3, [pc, #24]	; (80093b8 <HAL_RCC_GetPCLK2Freq+0x24>)
 80093a0:	69db      	ldr	r3, [r3, #28]
 80093a2:	0a1b      	lsrs	r3, r3, #8
 80093a4:	f003 0307 	and.w	r3, r3, #7
 80093a8:	4904      	ldr	r1, [pc, #16]	; (80093bc <HAL_RCC_GetPCLK2Freq+0x28>)
 80093aa:	5ccb      	ldrb	r3, [r1, r3]
 80093ac:	f003 031f 	and.w	r3, r3, #31
 80093b0:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 80093b4:	4618      	mov	r0, r3
 80093b6:	bd80      	pop	{r7, pc}
 80093b8:	58024400 	.word	0x58024400
 80093bc:	080100a0 	.word	0x080100a0

080093c0 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80093c0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80093c4:	b0cc      	sub	sp, #304	; 0x130
 80093c6:	af00      	add	r7, sp, #0
 80093c8:	f8c7 011c 	str.w	r0, [r7, #284]	; 0x11c
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80093cc:	2300      	movs	r3, #0
 80093ce:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80093d2:	2300      	movs	r3, #0
 80093d4:	f887 312e 	strb.w	r3, [r7, #302]	; 0x12e

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80093d8:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80093dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80093e0:	f002 6400 	and.w	r4, r2, #134217728	; 0x8000000
 80093e4:	2500      	movs	r5, #0
 80093e6:	ea54 0305 	orrs.w	r3, r4, r5
 80093ea:	d049      	beq.n	8009480 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 80093ec:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80093f0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80093f2:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80093f6:	d02f      	beq.n	8009458 <HAL_RCCEx_PeriphCLKConfig+0x98>
 80093f8:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80093fc:	d828      	bhi.n	8009450 <HAL_RCCEx_PeriphCLKConfig+0x90>
 80093fe:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8009402:	d01a      	beq.n	800943a <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8009404:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8009408:	d822      	bhi.n	8009450 <HAL_RCCEx_PeriphCLKConfig+0x90>
 800940a:	2b00      	cmp	r3, #0
 800940c:	d003      	beq.n	8009416 <HAL_RCCEx_PeriphCLKConfig+0x56>
 800940e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8009412:	d007      	beq.n	8009424 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8009414:	e01c      	b.n	8009450 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009416:	4bb8      	ldr	r3, [pc, #736]	; (80096f8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8009418:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800941a:	4ab7      	ldr	r2, [pc, #732]	; (80096f8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800941c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009420:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8009422:	e01a      	b.n	800945a <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8009424:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8009428:	3308      	adds	r3, #8
 800942a:	2102      	movs	r1, #2
 800942c:	4618      	mov	r0, r3
 800942e:	f002 fba1 	bl	800bb74 <RCCEx_PLL2_Config>
 8009432:	4603      	mov	r3, r0
 8009434:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8009438:	e00f      	b.n	800945a <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800943a:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800943e:	3328      	adds	r3, #40	; 0x28
 8009440:	2102      	movs	r1, #2
 8009442:	4618      	mov	r0, r3
 8009444:	f002 fc48 	bl	800bcd8 <RCCEx_PLL3_Config>
 8009448:	4603      	mov	r3, r0
 800944a:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800944e:	e004      	b.n	800945a <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8009450:	2301      	movs	r3, #1
 8009452:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
        break;
 8009456:	e000      	b.n	800945a <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 8009458:	bf00      	nop
    }

    if (ret == HAL_OK)
 800945a:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 800945e:	2b00      	cmp	r3, #0
 8009460:	d10a      	bne.n	8009478 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8009462:	4ba5      	ldr	r3, [pc, #660]	; (80096f8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8009464:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009466:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 800946a:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800946e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009470:	4aa1      	ldr	r2, [pc, #644]	; (80096f8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8009472:	430b      	orrs	r3, r1
 8009474:	6513      	str	r3, [r2, #80]	; 0x50
 8009476:	e003      	b.n	8009480 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009478:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 800947c:	f887 312e 	strb.w	r3, [r7, #302]	; 0x12e
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8009480:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8009484:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009488:	f402 7880 	and.w	r8, r2, #256	; 0x100
 800948c:	f04f 0900 	mov.w	r9, #0
 8009490:	ea58 0309 	orrs.w	r3, r8, r9
 8009494:	d047      	beq.n	8009526 <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 8009496:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800949a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800949c:	2b04      	cmp	r3, #4
 800949e:	d82a      	bhi.n	80094f6 <HAL_RCCEx_PeriphCLKConfig+0x136>
 80094a0:	a201      	add	r2, pc, #4	; (adr r2, 80094a8 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 80094a2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80094a6:	bf00      	nop
 80094a8:	080094bd 	.word	0x080094bd
 80094ac:	080094cb 	.word	0x080094cb
 80094b0:	080094e1 	.word	0x080094e1
 80094b4:	080094ff 	.word	0x080094ff
 80094b8:	080094ff 	.word	0x080094ff
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80094bc:	4b8e      	ldr	r3, [pc, #568]	; (80096f8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80094be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80094c0:	4a8d      	ldr	r2, [pc, #564]	; (80096f8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80094c2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80094c6:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80094c8:	e01a      	b.n	8009500 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80094ca:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80094ce:	3308      	adds	r3, #8
 80094d0:	2100      	movs	r1, #0
 80094d2:	4618      	mov	r0, r3
 80094d4:	f002 fb4e 	bl	800bb74 <RCCEx_PLL2_Config>
 80094d8:	4603      	mov	r3, r0
 80094da:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80094de:	e00f      	b.n	8009500 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80094e0:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80094e4:	3328      	adds	r3, #40	; 0x28
 80094e6:	2100      	movs	r1, #0
 80094e8:	4618      	mov	r0, r3
 80094ea:	f002 fbf5 	bl	800bcd8 <RCCEx_PLL3_Config>
 80094ee:	4603      	mov	r3, r0
 80094f0:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80094f4:	e004      	b.n	8009500 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80094f6:	2301      	movs	r3, #1
 80094f8:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
        break;
 80094fc:	e000      	b.n	8009500 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 80094fe:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009500:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8009504:	2b00      	cmp	r3, #0
 8009506:	d10a      	bne.n	800951e <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8009508:	4b7b      	ldr	r3, [pc, #492]	; (80096f8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800950a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800950c:	f023 0107 	bic.w	r1, r3, #7
 8009510:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8009514:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009516:	4a78      	ldr	r2, [pc, #480]	; (80096f8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8009518:	430b      	orrs	r3, r1
 800951a:	6513      	str	r3, [r2, #80]	; 0x50
 800951c:	e003      	b.n	8009526 <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800951e:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8009522:	f887 312e 	strb.w	r3, [r7, #302]	; 0x12e
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 8009526:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800952a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800952e:	f402 7a00 	and.w	sl, r2, #512	; 0x200
 8009532:	f04f 0b00 	mov.w	fp, #0
 8009536:	ea5a 030b 	orrs.w	r3, sl, fp
 800953a:	d04c      	beq.n	80095d6 <HAL_RCCEx_PeriphCLKConfig+0x216>
  {
    switch (PeriphClkInit->Sai23ClockSelection)
 800953c:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8009540:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009542:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009546:	d030      	beq.n	80095aa <HAL_RCCEx_PeriphCLKConfig+0x1ea>
 8009548:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800954c:	d829      	bhi.n	80095a2 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 800954e:	2bc0      	cmp	r3, #192	; 0xc0
 8009550:	d02d      	beq.n	80095ae <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 8009552:	2bc0      	cmp	r3, #192	; 0xc0
 8009554:	d825      	bhi.n	80095a2 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8009556:	2b80      	cmp	r3, #128	; 0x80
 8009558:	d018      	beq.n	800958c <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 800955a:	2b80      	cmp	r3, #128	; 0x80
 800955c:	d821      	bhi.n	80095a2 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 800955e:	2b00      	cmp	r3, #0
 8009560:	d002      	beq.n	8009568 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
 8009562:	2b40      	cmp	r3, #64	; 0x40
 8009564:	d007      	beq.n	8009576 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
 8009566:	e01c      	b.n	80095a2 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    {
      case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009568:	4b63      	ldr	r3, [pc, #396]	; (80096f8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800956a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800956c:	4a62      	ldr	r2, [pc, #392]	; (80096f8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800956e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009572:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8009574:	e01c      	b.n	80095b0 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8009576:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800957a:	3308      	adds	r3, #8
 800957c:	2100      	movs	r1, #0
 800957e:	4618      	mov	r0, r3
 8009580:	f002 faf8 	bl	800bb74 <RCCEx_PLL2_Config>
 8009584:	4603      	mov	r3, r0
 8009586:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 800958a:	e011      	b.n	80095b0 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800958c:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8009590:	3328      	adds	r3, #40	; 0x28
 8009592:	2100      	movs	r1, #0
 8009594:	4618      	mov	r0, r3
 8009596:	f002 fb9f 	bl	800bcd8 <RCCEx_PLL3_Config>
 800959a:	4603      	mov	r3, r0
 800959c:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 80095a0:	e006      	b.n	80095b0 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
        /* SAI2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80095a2:	2301      	movs	r3, #1
 80095a4:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
        break;
 80095a8:	e002      	b.n	80095b0 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 80095aa:	bf00      	nop
 80095ac:	e000      	b.n	80095b0 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 80095ae:	bf00      	nop
    }

    if (ret == HAL_OK)
 80095b0:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 80095b4:	2b00      	cmp	r3, #0
 80095b6:	d10a      	bne.n	80095ce <HAL_RCCEx_PeriphCLKConfig+0x20e>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 80095b8:	4b4f      	ldr	r3, [pc, #316]	; (80096f8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80095ba:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80095bc:	f423 71e0 	bic.w	r1, r3, #448	; 0x1c0
 80095c0:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80095c4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80095c6:	4a4c      	ldr	r2, [pc, #304]	; (80096f8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80095c8:	430b      	orrs	r3, r1
 80095ca:	6513      	str	r3, [r2, #80]	; 0x50
 80095cc:	e003      	b.n	80095d6 <HAL_RCCEx_PeriphCLKConfig+0x216>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80095ce:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 80095d2:	f887 312e 	strb.w	r3, [r7, #302]	; 0x12e
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 80095d6:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80095da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80095de:	f402 6380 	and.w	r3, r2, #1024	; 0x400
 80095e2:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 80095e6:	2300      	movs	r3, #0
 80095e8:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 80095ec:	e9d7 1244 	ldrd	r1, r2, [r7, #272]	; 0x110
 80095f0:	460b      	mov	r3, r1
 80095f2:	4313      	orrs	r3, r2
 80095f4:	d053      	beq.n	800969e <HAL_RCCEx_PeriphCLKConfig+0x2de>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 80095f6:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80095fa:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 80095fe:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8009602:	d035      	beq.n	8009670 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 8009604:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8009608:	d82e      	bhi.n	8009668 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 800960a:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800960e:	d031      	beq.n	8009674 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 8009610:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8009614:	d828      	bhi.n	8009668 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8009616:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800961a:	d01a      	beq.n	8009652 <HAL_RCCEx_PeriphCLKConfig+0x292>
 800961c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8009620:	d822      	bhi.n	8009668 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8009622:	2b00      	cmp	r3, #0
 8009624:	d003      	beq.n	800962e <HAL_RCCEx_PeriphCLKConfig+0x26e>
 8009626:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800962a:	d007      	beq.n	800963c <HAL_RCCEx_PeriphCLKConfig+0x27c>
 800962c:	e01c      	b.n	8009668 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800962e:	4b32      	ldr	r3, [pc, #200]	; (80096f8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8009630:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009632:	4a31      	ldr	r2, [pc, #196]	; (80096f8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8009634:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009638:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800963a:	e01c      	b.n	8009676 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800963c:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8009640:	3308      	adds	r3, #8
 8009642:	2100      	movs	r1, #0
 8009644:	4618      	mov	r0, r3
 8009646:	f002 fa95 	bl	800bb74 <RCCEx_PLL2_Config>
 800964a:	4603      	mov	r3, r0
 800964c:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8009650:	e011      	b.n	8009676 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8009652:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8009656:	3328      	adds	r3, #40	; 0x28
 8009658:	2100      	movs	r1, #0
 800965a:	4618      	mov	r0, r3
 800965c:	f002 fb3c 	bl	800bcd8 <RCCEx_PLL3_Config>
 8009660:	4603      	mov	r3, r0
 8009662:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8009666:	e006      	b.n	8009676 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8009668:	2301      	movs	r3, #1
 800966a:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
        break;
 800966e:	e002      	b.n	8009676 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8009670:	bf00      	nop
 8009672:	e000      	b.n	8009676 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8009674:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009676:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 800967a:	2b00      	cmp	r3, #0
 800967c:	d10b      	bne.n	8009696 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 800967e:	4b1e      	ldr	r3, [pc, #120]	; (80096f8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8009680:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009682:	f423 0160 	bic.w	r1, r3, #14680064	; 0xe00000
 8009686:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800968a:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800968e:	4a1a      	ldr	r2, [pc, #104]	; (80096f8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8009690:	430b      	orrs	r3, r1
 8009692:	6593      	str	r3, [r2, #88]	; 0x58
 8009694:	e003      	b.n	800969e <HAL_RCCEx_PeriphCLKConfig+0x2de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009696:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 800969a:	f887 312e 	strb.w	r3, [r7, #302]	; 0x12e
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 800969e:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80096a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80096a6:	f402 6300 	and.w	r3, r2, #2048	; 0x800
 80096aa:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 80096ae:	2300      	movs	r3, #0
 80096b0:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 80096b4:	e9d7 1242 	ldrd	r1, r2, [r7, #264]	; 0x108
 80096b8:	460b      	mov	r3, r1
 80096ba:	4313      	orrs	r3, r2
 80096bc:	d056      	beq.n	800976c <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 80096be:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80096c2:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80096c6:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80096ca:	d038      	beq.n	800973e <HAL_RCCEx_PeriphCLKConfig+0x37e>
 80096cc:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80096d0:	d831      	bhi.n	8009736 <HAL_RCCEx_PeriphCLKConfig+0x376>
 80096d2:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80096d6:	d034      	beq.n	8009742 <HAL_RCCEx_PeriphCLKConfig+0x382>
 80096d8:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80096dc:	d82b      	bhi.n	8009736 <HAL_RCCEx_PeriphCLKConfig+0x376>
 80096de:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80096e2:	d01d      	beq.n	8009720 <HAL_RCCEx_PeriphCLKConfig+0x360>
 80096e4:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80096e8:	d825      	bhi.n	8009736 <HAL_RCCEx_PeriphCLKConfig+0x376>
 80096ea:	2b00      	cmp	r3, #0
 80096ec:	d006      	beq.n	80096fc <HAL_RCCEx_PeriphCLKConfig+0x33c>
 80096ee:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80096f2:	d00a      	beq.n	800970a <HAL_RCCEx_PeriphCLKConfig+0x34a>
 80096f4:	e01f      	b.n	8009736 <HAL_RCCEx_PeriphCLKConfig+0x376>
 80096f6:	bf00      	nop
 80096f8:	58024400 	.word	0x58024400
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80096fc:	4ba2      	ldr	r3, [pc, #648]	; (8009988 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80096fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009700:	4aa1      	ldr	r2, [pc, #644]	; (8009988 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8009702:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009706:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8009708:	e01c      	b.n	8009744 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800970a:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800970e:	3308      	adds	r3, #8
 8009710:	2100      	movs	r1, #0
 8009712:	4618      	mov	r0, r3
 8009714:	f002 fa2e 	bl	800bb74 <RCCEx_PLL2_Config>
 8009718:	4603      	mov	r3, r0
 800971a:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 800971e:	e011      	b.n	8009744 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8009720:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8009724:	3328      	adds	r3, #40	; 0x28
 8009726:	2100      	movs	r1, #0
 8009728:	4618      	mov	r0, r3
 800972a:	f002 fad5 	bl	800bcd8 <RCCEx_PLL3_Config>
 800972e:	4603      	mov	r3, r0
 8009730:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8009734:	e006      	b.n	8009744 <HAL_RCCEx_PeriphCLKConfig+0x384>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8009736:	2301      	movs	r3, #1
 8009738:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
        break;
 800973c:	e002      	b.n	8009744 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 800973e:	bf00      	nop
 8009740:	e000      	b.n	8009744 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 8009742:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009744:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8009748:	2b00      	cmp	r3, #0
 800974a:	d10b      	bne.n	8009764 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 800974c:	4b8e      	ldr	r3, [pc, #568]	; (8009988 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800974e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009750:	f023 61e0 	bic.w	r1, r3, #117440512	; 0x7000000
 8009754:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8009758:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800975c:	4a8a      	ldr	r2, [pc, #552]	; (8009988 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800975e:	430b      	orrs	r3, r1
 8009760:	6593      	str	r3, [r2, #88]	; 0x58
 8009762:	e003      	b.n	800976c <HAL_RCCEx_PeriphCLKConfig+0x3ac>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009764:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8009768:	f887 312e 	strb.w	r3, [r7, #302]	; 0x12e
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 800976c:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8009770:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009774:	f002 7300 	and.w	r3, r2, #33554432	; 0x2000000
 8009778:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 800977c:	2300      	movs	r3, #0
 800977e:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8009782:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	; 0x100
 8009786:	460b      	mov	r3, r1
 8009788:	4313      	orrs	r3, r2
 800978a:	d03a      	beq.n	8009802 <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    switch (PeriphClkInit->QspiClockSelection)
 800978c:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8009790:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009792:	2b30      	cmp	r3, #48	; 0x30
 8009794:	d01f      	beq.n	80097d6 <HAL_RCCEx_PeriphCLKConfig+0x416>
 8009796:	2b30      	cmp	r3, #48	; 0x30
 8009798:	d819      	bhi.n	80097ce <HAL_RCCEx_PeriphCLKConfig+0x40e>
 800979a:	2b20      	cmp	r3, #32
 800979c:	d00c      	beq.n	80097b8 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 800979e:	2b20      	cmp	r3, #32
 80097a0:	d815      	bhi.n	80097ce <HAL_RCCEx_PeriphCLKConfig+0x40e>
 80097a2:	2b00      	cmp	r3, #0
 80097a4:	d019      	beq.n	80097da <HAL_RCCEx_PeriphCLKConfig+0x41a>
 80097a6:	2b10      	cmp	r3, #16
 80097a8:	d111      	bne.n	80097ce <HAL_RCCEx_PeriphCLKConfig+0x40e>
    {
      case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
        /* Enable QSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80097aa:	4b77      	ldr	r3, [pc, #476]	; (8009988 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80097ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80097ae:	4a76      	ldr	r2, [pc, #472]	; (8009988 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80097b0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80097b4:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* QSPI clock source configuration done later after clock selection check */
        break;
 80097b6:	e011      	b.n	80097dc <HAL_RCCEx_PeriphCLKConfig+0x41c>

      case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80097b8:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80097bc:	3308      	adds	r3, #8
 80097be:	2102      	movs	r1, #2
 80097c0:	4618      	mov	r0, r3
 80097c2:	f002 f9d7 	bl	800bb74 <RCCEx_PLL2_Config>
 80097c6:	4603      	mov	r3, r0
 80097c8:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f

        /* QSPI clock source configuration done later after clock selection check */
        break;
 80097cc:	e006      	b.n	80097dc <HAL_RCCEx_PeriphCLKConfig+0x41c>
      case RCC_QSPICLKSOURCE_D1HCLK:
        /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 80097ce:	2301      	movs	r3, #1
 80097d0:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
        break;
 80097d4:	e002      	b.n	80097dc <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 80097d6:	bf00      	nop
 80097d8:	e000      	b.n	80097dc <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 80097da:	bf00      	nop
    }

    if (ret == HAL_OK)
 80097dc:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 80097e0:	2b00      	cmp	r3, #0
 80097e2:	d10a      	bne.n	80097fa <HAL_RCCEx_PeriphCLKConfig+0x43a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 80097e4:	4b68      	ldr	r3, [pc, #416]	; (8009988 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80097e6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80097e8:	f023 0130 	bic.w	r1, r3, #48	; 0x30
 80097ec:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80097f0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80097f2:	4a65      	ldr	r2, [pc, #404]	; (8009988 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80097f4:	430b      	orrs	r3, r1
 80097f6:	64d3      	str	r3, [r2, #76]	; 0x4c
 80097f8:	e003      	b.n	8009802 <HAL_RCCEx_PeriphCLKConfig+0x442>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80097fa:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 80097fe:	f887 312e 	strb.w	r3, [r7, #302]	; 0x12e
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8009802:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8009806:	e9d3 2300 	ldrd	r2, r3, [r3]
 800980a:	f402 5380 	and.w	r3, r2, #4096	; 0x1000
 800980e:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8009812:	2300      	movs	r3, #0
 8009814:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8009818:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	; 0xf8
 800981c:	460b      	mov	r3, r1
 800981e:	4313      	orrs	r3, r2
 8009820:	d051      	beq.n	80098c6 <HAL_RCCEx_PeriphCLKConfig+0x506>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 8009822:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8009826:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8009828:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800982c:	d035      	beq.n	800989a <HAL_RCCEx_PeriphCLKConfig+0x4da>
 800982e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8009832:	d82e      	bhi.n	8009892 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8009834:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8009838:	d031      	beq.n	800989e <HAL_RCCEx_PeriphCLKConfig+0x4de>
 800983a:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800983e:	d828      	bhi.n	8009892 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8009840:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009844:	d01a      	beq.n	800987c <HAL_RCCEx_PeriphCLKConfig+0x4bc>
 8009846:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800984a:	d822      	bhi.n	8009892 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 800984c:	2b00      	cmp	r3, #0
 800984e:	d003      	beq.n	8009858 <HAL_RCCEx_PeriphCLKConfig+0x498>
 8009850:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009854:	d007      	beq.n	8009866 <HAL_RCCEx_PeriphCLKConfig+0x4a6>
 8009856:	e01c      	b.n	8009892 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009858:	4b4b      	ldr	r3, [pc, #300]	; (8009988 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800985a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800985c:	4a4a      	ldr	r2, [pc, #296]	; (8009988 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800985e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009862:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8009864:	e01c      	b.n	80098a0 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8009866:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800986a:	3308      	adds	r3, #8
 800986c:	2100      	movs	r1, #0
 800986e:	4618      	mov	r0, r3
 8009870:	f002 f980 	bl	800bb74 <RCCEx_PLL2_Config>
 8009874:	4603      	mov	r3, r0
 8009876:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800987a:	e011      	b.n	80098a0 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800987c:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8009880:	3328      	adds	r3, #40	; 0x28
 8009882:	2100      	movs	r1, #0
 8009884:	4618      	mov	r0, r3
 8009886:	f002 fa27 	bl	800bcd8 <RCCEx_PLL3_Config>
 800988a:	4603      	mov	r3, r0
 800988c:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8009890:	e006      	b.n	80098a0 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8009892:	2301      	movs	r3, #1
 8009894:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
        break;
 8009898:	e002      	b.n	80098a0 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 800989a:	bf00      	nop
 800989c:	e000      	b.n	80098a0 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 800989e:	bf00      	nop
    }

    if (ret == HAL_OK)
 80098a0:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 80098a4:	2b00      	cmp	r3, #0
 80098a6:	d10a      	bne.n	80098be <HAL_RCCEx_PeriphCLKConfig+0x4fe>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 80098a8:	4b37      	ldr	r3, [pc, #220]	; (8009988 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80098aa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80098ac:	f423 41e0 	bic.w	r1, r3, #28672	; 0x7000
 80098b0:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80098b4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80098b6:	4a34      	ldr	r2, [pc, #208]	; (8009988 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80098b8:	430b      	orrs	r3, r1
 80098ba:	6513      	str	r3, [r2, #80]	; 0x50
 80098bc:	e003      	b.n	80098c6 <HAL_RCCEx_PeriphCLKConfig+0x506>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80098be:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 80098c2:	f887 312e 	strb.w	r3, [r7, #302]	; 0x12e
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 80098c6:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80098ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80098ce:	f402 5300 	and.w	r3, r2, #8192	; 0x2000
 80098d2:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 80098d6:	2300      	movs	r3, #0
 80098d8:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 80098dc:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	; 0xf0
 80098e0:	460b      	mov	r3, r1
 80098e2:	4313      	orrs	r3, r2
 80098e4:	d056      	beq.n	8009994 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 80098e6:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80098ea:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80098ec:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80098f0:	d033      	beq.n	800995a <HAL_RCCEx_PeriphCLKConfig+0x59a>
 80098f2:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80098f6:	d82c      	bhi.n	8009952 <HAL_RCCEx_PeriphCLKConfig+0x592>
 80098f8:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80098fc:	d02f      	beq.n	800995e <HAL_RCCEx_PeriphCLKConfig+0x59e>
 80098fe:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8009902:	d826      	bhi.n	8009952 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8009904:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8009908:	d02b      	beq.n	8009962 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
 800990a:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800990e:	d820      	bhi.n	8009952 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8009910:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8009914:	d012      	beq.n	800993c <HAL_RCCEx_PeriphCLKConfig+0x57c>
 8009916:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800991a:	d81a      	bhi.n	8009952 <HAL_RCCEx_PeriphCLKConfig+0x592>
 800991c:	2b00      	cmp	r3, #0
 800991e:	d022      	beq.n	8009966 <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 8009920:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009924:	d115      	bne.n	8009952 <HAL_RCCEx_PeriphCLKConfig+0x592>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8009926:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800992a:	3308      	adds	r3, #8
 800992c:	2101      	movs	r1, #1
 800992e:	4618      	mov	r0, r3
 8009930:	f002 f920 	bl	800bb74 <RCCEx_PLL2_Config>
 8009934:	4603      	mov	r3, r0
 8009936:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 800993a:	e015      	b.n	8009968 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800993c:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8009940:	3328      	adds	r3, #40	; 0x28
 8009942:	2101      	movs	r1, #1
 8009944:	4618      	mov	r0, r3
 8009946:	f002 f9c7 	bl	800bcd8 <RCCEx_PLL3_Config>
 800994a:	4603      	mov	r3, r0
 800994c:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8009950:	e00a      	b.n	8009968 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8009952:	2301      	movs	r3, #1
 8009954:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
        break;
 8009958:	e006      	b.n	8009968 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 800995a:	bf00      	nop
 800995c:	e004      	b.n	8009968 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 800995e:	bf00      	nop
 8009960:	e002      	b.n	8009968 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8009962:	bf00      	nop
 8009964:	e000      	b.n	8009968 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8009966:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009968:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 800996c:	2b00      	cmp	r3, #0
 800996e:	d10d      	bne.n	800998c <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8009970:	4b05      	ldr	r3, [pc, #20]	; (8009988 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8009972:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009974:	f423 21e0 	bic.w	r1, r3, #458752	; 0x70000
 8009978:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800997c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800997e:	4a02      	ldr	r2, [pc, #8]	; (8009988 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8009980:	430b      	orrs	r3, r1
 8009982:	6513      	str	r3, [r2, #80]	; 0x50
 8009984:	e006      	b.n	8009994 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 8009986:	bf00      	nop
 8009988:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800998c:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8009990:	f887 312e 	strb.w	r3, [r7, #302]	; 0x12e
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8009994:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8009998:	e9d3 2300 	ldrd	r2, r3, [r3]
 800999c:	f402 4380 	and.w	r3, r2, #16384	; 0x4000
 80099a0:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80099a4:	2300      	movs	r3, #0
 80099a6:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 80099aa:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	; 0xe8
 80099ae:	460b      	mov	r3, r1
 80099b0:	4313      	orrs	r3, r2
 80099b2:	d055      	beq.n	8009a60 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 80099b4:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80099b8:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 80099bc:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80099c0:	d033      	beq.n	8009a2a <HAL_RCCEx_PeriphCLKConfig+0x66a>
 80099c2:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80099c6:	d82c      	bhi.n	8009a22 <HAL_RCCEx_PeriphCLKConfig+0x662>
 80099c8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80099cc:	d02f      	beq.n	8009a2e <HAL_RCCEx_PeriphCLKConfig+0x66e>
 80099ce:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80099d2:	d826      	bhi.n	8009a22 <HAL_RCCEx_PeriphCLKConfig+0x662>
 80099d4:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80099d8:	d02b      	beq.n	8009a32 <HAL_RCCEx_PeriphCLKConfig+0x672>
 80099da:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80099de:	d820      	bhi.n	8009a22 <HAL_RCCEx_PeriphCLKConfig+0x662>
 80099e0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80099e4:	d012      	beq.n	8009a0c <HAL_RCCEx_PeriphCLKConfig+0x64c>
 80099e6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80099ea:	d81a      	bhi.n	8009a22 <HAL_RCCEx_PeriphCLKConfig+0x662>
 80099ec:	2b00      	cmp	r3, #0
 80099ee:	d022      	beq.n	8009a36 <HAL_RCCEx_PeriphCLKConfig+0x676>
 80099f0:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80099f4:	d115      	bne.n	8009a22 <HAL_RCCEx_PeriphCLKConfig+0x662>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80099f6:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80099fa:	3308      	adds	r3, #8
 80099fc:	2101      	movs	r1, #1
 80099fe:	4618      	mov	r0, r3
 8009a00:	f002 f8b8 	bl	800bb74 <RCCEx_PLL2_Config>
 8009a04:	4603      	mov	r3, r0
 8009a06:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8009a0a:	e015      	b.n	8009a38 <HAL_RCCEx_PeriphCLKConfig+0x678>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8009a0c:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8009a10:	3328      	adds	r3, #40	; 0x28
 8009a12:	2101      	movs	r1, #1
 8009a14:	4618      	mov	r0, r3
 8009a16:	f002 f95f 	bl	800bcd8 <RCCEx_PLL3_Config>
 8009a1a:	4603      	mov	r3, r0
 8009a1c:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8009a20:	e00a      	b.n	8009a38 <HAL_RCCEx_PeriphCLKConfig+0x678>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 8009a22:	2301      	movs	r3, #1
 8009a24:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
        break;
 8009a28:	e006      	b.n	8009a38 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8009a2a:	bf00      	nop
 8009a2c:	e004      	b.n	8009a38 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8009a2e:	bf00      	nop
 8009a30:	e002      	b.n	8009a38 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8009a32:	bf00      	nop
 8009a34:	e000      	b.n	8009a38 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8009a36:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009a38:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8009a3c:	2b00      	cmp	r3, #0
 8009a3e:	d10b      	bne.n	8009a58 <HAL_RCCEx_PeriphCLKConfig+0x698>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8009a40:	4bb6      	ldr	r3, [pc, #728]	; (8009d1c <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8009a42:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009a44:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 8009a48:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8009a4c:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8009a50:	4ab2      	ldr	r2, [pc, #712]	; (8009d1c <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8009a52:	430b      	orrs	r3, r1
 8009a54:	6593      	str	r3, [r2, #88]	; 0x58
 8009a56:	e003      	b.n	8009a60 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009a58:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8009a5c:	f887 312e 	strb.w	r3, [r7, #302]	; 0x12e
    }
  }

#if defined(DSI)
  /*---------------------------- DSI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DSI) == RCC_PERIPHCLK_DSI)
 8009a60:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8009a64:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009a68:	f002 6380 	and.w	r3, r2, #67108864	; 0x4000000
 8009a6c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8009a70:	2300      	movs	r3, #0
 8009a72:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8009a76:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	; 0xe0
 8009a7a:	460b      	mov	r3, r1
 8009a7c:	4313      	orrs	r3, r2
 8009a7e:	d02a      	beq.n	8009ad6 <HAL_RCCEx_PeriphCLKConfig+0x716>
  {
    switch (PeriphClkInit->DsiClockSelection)
 8009a80:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8009a84:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009a86:	2b00      	cmp	r3, #0
 8009a88:	d011      	beq.n	8009aae <HAL_RCCEx_PeriphCLKConfig+0x6ee>
 8009a8a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009a8e:	d10a      	bne.n	8009aa6 <HAL_RCCEx_PeriphCLKConfig+0x6e6>
    {

      case RCC_DSICLKSOURCE_PLL2: /* PLL2 is used as clock source for DSI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8009a90:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8009a94:	3308      	adds	r3, #8
 8009a96:	2101      	movs	r1, #1
 8009a98:	4618      	mov	r0, r3
 8009a9a:	f002 f86b 	bl	800bb74 <RCCEx_PLL2_Config>
 8009a9e:	4603      	mov	r3, r0
 8009aa0:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f

        /* DSI clock source configuration done later after clock selection check */
        break;
 8009aa4:	e004      	b.n	8009ab0 <HAL_RCCEx_PeriphCLKConfig+0x6f0>
        /* PHY is used as clock source for DSI*/
        /* DSI clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8009aa6:	2301      	movs	r3, #1
 8009aa8:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
        break;
 8009aac:	e000      	b.n	8009ab0 <HAL_RCCEx_PeriphCLKConfig+0x6f0>
        break;
 8009aae:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009ab0:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8009ab4:	2b00      	cmp	r3, #0
 8009ab6:	d10a      	bne.n	8009ace <HAL_RCCEx_PeriphCLKConfig+0x70e>
    {
      /* Set the source of DSI clock*/
      __HAL_RCC_DSI_CONFIG(PeriphClkInit->DsiClockSelection);
 8009ab8:	4b98      	ldr	r3, [pc, #608]	; (8009d1c <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8009aba:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009abc:	f423 7180 	bic.w	r1, r3, #256	; 0x100
 8009ac0:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8009ac4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009ac6:	4a95      	ldr	r2, [pc, #596]	; (8009d1c <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8009ac8:	430b      	orrs	r3, r1
 8009aca:	64d3      	str	r3, [r2, #76]	; 0x4c
 8009acc:	e003      	b.n	8009ad6 <HAL_RCCEx_PeriphCLKConfig+0x716>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009ace:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8009ad2:	f887 312e 	strb.w	r3, [r7, #302]	; 0x12e
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8009ad6:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8009ada:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009ade:	f402 4300 	and.w	r3, r2, #32768	; 0x8000
 8009ae2:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8009ae6:	2300      	movs	r3, #0
 8009ae8:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8009aec:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8009af0:	460b      	mov	r3, r1
 8009af2:	4313      	orrs	r3, r2
 8009af4:	d037      	beq.n	8009b66 <HAL_RCCEx_PeriphCLKConfig+0x7a6>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 8009af6:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8009afa:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009afc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009b00:	d00e      	beq.n	8009b20 <HAL_RCCEx_PeriphCLKConfig+0x760>
 8009b02:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009b06:	d816      	bhi.n	8009b36 <HAL_RCCEx_PeriphCLKConfig+0x776>
 8009b08:	2b00      	cmp	r3, #0
 8009b0a:	d018      	beq.n	8009b3e <HAL_RCCEx_PeriphCLKConfig+0x77e>
 8009b0c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8009b10:	d111      	bne.n	8009b36 <HAL_RCCEx_PeriphCLKConfig+0x776>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009b12:	4b82      	ldr	r3, [pc, #520]	; (8009d1c <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8009b14:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009b16:	4a81      	ldr	r2, [pc, #516]	; (8009d1c <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8009b18:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009b1c:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8009b1e:	e00f      	b.n	8009b40 <HAL_RCCEx_PeriphCLKConfig+0x780>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8009b20:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8009b24:	3308      	adds	r3, #8
 8009b26:	2101      	movs	r1, #1
 8009b28:	4618      	mov	r0, r3
 8009b2a:	f002 f823 	bl	800bb74 <RCCEx_PLL2_Config>
 8009b2e:	4603      	mov	r3, r0
 8009b30:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8009b34:	e004      	b.n	8009b40 <HAL_RCCEx_PeriphCLKConfig+0x780>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8009b36:	2301      	movs	r3, #1
 8009b38:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
        break;
 8009b3c:	e000      	b.n	8009b40 <HAL_RCCEx_PeriphCLKConfig+0x780>
        break;
 8009b3e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009b40:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8009b44:	2b00      	cmp	r3, #0
 8009b46:	d10a      	bne.n	8009b5e <HAL_RCCEx_PeriphCLKConfig+0x79e>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8009b48:	4b74      	ldr	r3, [pc, #464]	; (8009d1c <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8009b4a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009b4c:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 8009b50:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8009b54:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009b56:	4a71      	ldr	r2, [pc, #452]	; (8009d1c <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8009b58:	430b      	orrs	r3, r1
 8009b5a:	6513      	str	r3, [r2, #80]	; 0x50
 8009b5c:	e003      	b.n	8009b66 <HAL_RCCEx_PeriphCLKConfig+0x7a6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009b5e:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8009b62:	f887 312e 	strb.w	r3, [r7, #302]	; 0x12e
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8009b66:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8009b6a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009b6e:	f002 7380 	and.w	r3, r2, #16777216	; 0x1000000
 8009b72:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8009b76:	2300      	movs	r3, #0
 8009b78:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8009b7c:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	; 0xd0
 8009b80:	460b      	mov	r3, r1
 8009b82:	4313      	orrs	r3, r2
 8009b84:	d03a      	beq.n	8009bfc <HAL_RCCEx_PeriphCLKConfig+0x83c>
  {
    switch (PeriphClkInit->FmcClockSelection)
 8009b86:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8009b8a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009b8c:	2b03      	cmp	r3, #3
 8009b8e:	d81d      	bhi.n	8009bcc <HAL_RCCEx_PeriphCLKConfig+0x80c>
 8009b90:	a201      	add	r2, pc, #4	; (adr r2, 8009b98 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8009b92:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009b96:	bf00      	nop
 8009b98:	08009bd5 	.word	0x08009bd5
 8009b9c:	08009ba9 	.word	0x08009ba9
 8009ba0:	08009bb7 	.word	0x08009bb7
 8009ba4:	08009bd5 	.word	0x08009bd5
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009ba8:	4b5c      	ldr	r3, [pc, #368]	; (8009d1c <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8009baa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009bac:	4a5b      	ldr	r2, [pc, #364]	; (8009d1c <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8009bae:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009bb2:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 8009bb4:	e00f      	b.n	8009bd6 <HAL_RCCEx_PeriphCLKConfig+0x816>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8009bb6:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8009bba:	3308      	adds	r3, #8
 8009bbc:	2102      	movs	r1, #2
 8009bbe:	4618      	mov	r0, r3
 8009bc0:	f001 ffd8 	bl	800bb74 <RCCEx_PLL2_Config>
 8009bc4:	4603      	mov	r3, r0
 8009bc6:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f

        /* FMC clock source configuration done later after clock selection check */
        break;
 8009bca:	e004      	b.n	8009bd6 <HAL_RCCEx_PeriphCLKConfig+0x816>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8009bcc:	2301      	movs	r3, #1
 8009bce:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
        break;
 8009bd2:	e000      	b.n	8009bd6 <HAL_RCCEx_PeriphCLKConfig+0x816>
        break;
 8009bd4:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009bd6:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8009bda:	2b00      	cmp	r3, #0
 8009bdc:	d10a      	bne.n	8009bf4 <HAL_RCCEx_PeriphCLKConfig+0x834>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8009bde:	4b4f      	ldr	r3, [pc, #316]	; (8009d1c <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8009be0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009be2:	f023 0103 	bic.w	r1, r3, #3
 8009be6:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8009bea:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009bec:	4a4b      	ldr	r2, [pc, #300]	; (8009d1c <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8009bee:	430b      	orrs	r3, r1
 8009bf0:	64d3      	str	r3, [r2, #76]	; 0x4c
 8009bf2:	e003      	b.n	8009bfc <HAL_RCCEx_PeriphCLKConfig+0x83c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009bf4:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8009bf8:	f887 312e 	strb.w	r3, [r7, #302]	; 0x12e
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8009bfc:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8009c00:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009c04:	f402 0380 	and.w	r3, r2, #4194304	; 0x400000
 8009c08:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8009c0c:	2300      	movs	r3, #0
 8009c0e:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8009c12:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	; 0xc8
 8009c16:	460b      	mov	r3, r1
 8009c18:	4313      	orrs	r3, r2
 8009c1a:	f000 80a0 	beq.w	8009d5e <HAL_RCCEx_PeriphCLKConfig+0x99e>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8009c1e:	4b40      	ldr	r3, [pc, #256]	; (8009d20 <HAL_RCCEx_PeriphCLKConfig+0x960>)
 8009c20:	681b      	ldr	r3, [r3, #0]
 8009c22:	4a3f      	ldr	r2, [pc, #252]	; (8009d20 <HAL_RCCEx_PeriphCLKConfig+0x960>)
 8009c24:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8009c28:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8009c2a:	f7fd fe89 	bl	8007940 <HAL_GetTick>
 8009c2e:	f8c7 0128 	str.w	r0, [r7, #296]	; 0x128

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8009c32:	e00b      	b.n	8009c4c <HAL_RCCEx_PeriphCLKConfig+0x88c>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8009c34:	f7fd fe84 	bl	8007940 <HAL_GetTick>
 8009c38:	4602      	mov	r2, r0
 8009c3a:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8009c3e:	1ad3      	subs	r3, r2, r3
 8009c40:	2b64      	cmp	r3, #100	; 0x64
 8009c42:	d903      	bls.n	8009c4c <HAL_RCCEx_PeriphCLKConfig+0x88c>
      {
        ret = HAL_TIMEOUT;
 8009c44:	2303      	movs	r3, #3
 8009c46:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
        break;
 8009c4a:	e005      	b.n	8009c58 <HAL_RCCEx_PeriphCLKConfig+0x898>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8009c4c:	4b34      	ldr	r3, [pc, #208]	; (8009d20 <HAL_RCCEx_PeriphCLKConfig+0x960>)
 8009c4e:	681b      	ldr	r3, [r3, #0]
 8009c50:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009c54:	2b00      	cmp	r3, #0
 8009c56:	d0ed      	beq.n	8009c34 <HAL_RCCEx_PeriphCLKConfig+0x874>
      }
    }

    if (ret == HAL_OK)
 8009c58:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8009c5c:	2b00      	cmp	r3, #0
 8009c5e:	d17a      	bne.n	8009d56 <HAL_RCCEx_PeriphCLKConfig+0x996>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8009c60:	4b2e      	ldr	r3, [pc, #184]	; (8009d1c <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8009c62:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8009c64:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8009c68:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8009c6c:	4053      	eors	r3, r2
 8009c6e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8009c72:	2b00      	cmp	r3, #0
 8009c74:	d015      	beq.n	8009ca2 <HAL_RCCEx_PeriphCLKConfig+0x8e2>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8009c76:	4b29      	ldr	r3, [pc, #164]	; (8009d1c <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8009c78:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009c7a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009c7e:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8009c82:	4b26      	ldr	r3, [pc, #152]	; (8009d1c <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8009c84:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009c86:	4a25      	ldr	r2, [pc, #148]	; (8009d1c <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8009c88:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8009c8c:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8009c8e:	4b23      	ldr	r3, [pc, #140]	; (8009d1c <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8009c90:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009c92:	4a22      	ldr	r2, [pc, #136]	; (8009d1c <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8009c94:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8009c98:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8009c9a:	4a20      	ldr	r2, [pc, #128]	; (8009d1c <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8009c9c:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8009ca0:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8009ca2:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8009ca6:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8009caa:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009cae:	d118      	bne.n	8009ce2 <HAL_RCCEx_PeriphCLKConfig+0x922>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009cb0:	f7fd fe46 	bl	8007940 <HAL_GetTick>
 8009cb4:	f8c7 0128 	str.w	r0, [r7, #296]	; 0x128

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8009cb8:	e00d      	b.n	8009cd6 <HAL_RCCEx_PeriphCLKConfig+0x916>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8009cba:	f7fd fe41 	bl	8007940 <HAL_GetTick>
 8009cbe:	4602      	mov	r2, r0
 8009cc0:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8009cc4:	1ad2      	subs	r2, r2, r3
 8009cc6:	f241 3388 	movw	r3, #5000	; 0x1388
 8009cca:	429a      	cmp	r2, r3
 8009ccc:	d903      	bls.n	8009cd6 <HAL_RCCEx_PeriphCLKConfig+0x916>
          {
            ret = HAL_TIMEOUT;
 8009cce:	2303      	movs	r3, #3
 8009cd0:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
            break;
 8009cd4:	e005      	b.n	8009ce2 <HAL_RCCEx_PeriphCLKConfig+0x922>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8009cd6:	4b11      	ldr	r3, [pc, #68]	; (8009d1c <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8009cd8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009cda:	f003 0302 	and.w	r3, r3, #2
 8009cde:	2b00      	cmp	r3, #0
 8009ce0:	d0eb      	beq.n	8009cba <HAL_RCCEx_PeriphCLKConfig+0x8fa>
          }
        }
      }

      if (ret == HAL_OK)
 8009ce2:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8009ce6:	2b00      	cmp	r3, #0
 8009ce8:	d130      	bne.n	8009d4c <HAL_RCCEx_PeriphCLKConfig+0x98c>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8009cea:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8009cee:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8009cf2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8009cf6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8009cfa:	d115      	bne.n	8009d28 <HAL_RCCEx_PeriphCLKConfig+0x968>
 8009cfc:	4b07      	ldr	r3, [pc, #28]	; (8009d1c <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8009cfe:	691b      	ldr	r3, [r3, #16]
 8009d00:	f423 517c 	bic.w	r1, r3, #16128	; 0x3f00
 8009d04:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8009d08:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8009d0c:	091a      	lsrs	r2, r3, #4
 8009d0e:	4b05      	ldr	r3, [pc, #20]	; (8009d24 <HAL_RCCEx_PeriphCLKConfig+0x964>)
 8009d10:	4013      	ands	r3, r2
 8009d12:	4a02      	ldr	r2, [pc, #8]	; (8009d1c <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8009d14:	430b      	orrs	r3, r1
 8009d16:	6113      	str	r3, [r2, #16]
 8009d18:	e00c      	b.n	8009d34 <HAL_RCCEx_PeriphCLKConfig+0x974>
 8009d1a:	bf00      	nop
 8009d1c:	58024400 	.word	0x58024400
 8009d20:	58024800 	.word	0x58024800
 8009d24:	00ffffcf 	.word	0x00ffffcf
 8009d28:	4bd4      	ldr	r3, [pc, #848]	; (800a07c <HAL_RCCEx_PeriphCLKConfig+0xcbc>)
 8009d2a:	691b      	ldr	r3, [r3, #16]
 8009d2c:	4ad3      	ldr	r2, [pc, #844]	; (800a07c <HAL_RCCEx_PeriphCLKConfig+0xcbc>)
 8009d2e:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8009d32:	6113      	str	r3, [r2, #16]
 8009d34:	4bd1      	ldr	r3, [pc, #836]	; (800a07c <HAL_RCCEx_PeriphCLKConfig+0xcbc>)
 8009d36:	6f19      	ldr	r1, [r3, #112]	; 0x70
 8009d38:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8009d3c:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8009d40:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8009d44:	4acd      	ldr	r2, [pc, #820]	; (800a07c <HAL_RCCEx_PeriphCLKConfig+0xcbc>)
 8009d46:	430b      	orrs	r3, r1
 8009d48:	6713      	str	r3, [r2, #112]	; 0x70
 8009d4a:	e008      	b.n	8009d5e <HAL_RCCEx_PeriphCLKConfig+0x99e>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8009d4c:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8009d50:	f887 312e 	strb.w	r3, [r7, #302]	; 0x12e
 8009d54:	e003      	b.n	8009d5e <HAL_RCCEx_PeriphCLKConfig+0x99e>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009d56:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8009d5a:	f887 312e 	strb.w	r3, [r7, #302]	; 0x12e
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8009d5e:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8009d62:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009d66:	f002 0301 	and.w	r3, r2, #1
 8009d6a:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8009d6e:	2300      	movs	r3, #0
 8009d70:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8009d74:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8009d78:	460b      	mov	r3, r1
 8009d7a:	4313      	orrs	r3, r2
 8009d7c:	f000 808b 	beq.w	8009e96 <HAL_RCCEx_PeriphCLKConfig+0xad6>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 8009d80:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8009d84:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8009d88:	2b28      	cmp	r3, #40	; 0x28
 8009d8a:	d86b      	bhi.n	8009e64 <HAL_RCCEx_PeriphCLKConfig+0xaa4>
 8009d8c:	a201      	add	r2, pc, #4	; (adr r2, 8009d94 <HAL_RCCEx_PeriphCLKConfig+0x9d4>)
 8009d8e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009d92:	bf00      	nop
 8009d94:	08009e6d 	.word	0x08009e6d
 8009d98:	08009e65 	.word	0x08009e65
 8009d9c:	08009e65 	.word	0x08009e65
 8009da0:	08009e65 	.word	0x08009e65
 8009da4:	08009e65 	.word	0x08009e65
 8009da8:	08009e65 	.word	0x08009e65
 8009dac:	08009e65 	.word	0x08009e65
 8009db0:	08009e65 	.word	0x08009e65
 8009db4:	08009e39 	.word	0x08009e39
 8009db8:	08009e65 	.word	0x08009e65
 8009dbc:	08009e65 	.word	0x08009e65
 8009dc0:	08009e65 	.word	0x08009e65
 8009dc4:	08009e65 	.word	0x08009e65
 8009dc8:	08009e65 	.word	0x08009e65
 8009dcc:	08009e65 	.word	0x08009e65
 8009dd0:	08009e65 	.word	0x08009e65
 8009dd4:	08009e4f 	.word	0x08009e4f
 8009dd8:	08009e65 	.word	0x08009e65
 8009ddc:	08009e65 	.word	0x08009e65
 8009de0:	08009e65 	.word	0x08009e65
 8009de4:	08009e65 	.word	0x08009e65
 8009de8:	08009e65 	.word	0x08009e65
 8009dec:	08009e65 	.word	0x08009e65
 8009df0:	08009e65 	.word	0x08009e65
 8009df4:	08009e6d 	.word	0x08009e6d
 8009df8:	08009e65 	.word	0x08009e65
 8009dfc:	08009e65 	.word	0x08009e65
 8009e00:	08009e65 	.word	0x08009e65
 8009e04:	08009e65 	.word	0x08009e65
 8009e08:	08009e65 	.word	0x08009e65
 8009e0c:	08009e65 	.word	0x08009e65
 8009e10:	08009e65 	.word	0x08009e65
 8009e14:	08009e6d 	.word	0x08009e6d
 8009e18:	08009e65 	.word	0x08009e65
 8009e1c:	08009e65 	.word	0x08009e65
 8009e20:	08009e65 	.word	0x08009e65
 8009e24:	08009e65 	.word	0x08009e65
 8009e28:	08009e65 	.word	0x08009e65
 8009e2c:	08009e65 	.word	0x08009e65
 8009e30:	08009e65 	.word	0x08009e65
 8009e34:	08009e6d 	.word	0x08009e6d
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8009e38:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8009e3c:	3308      	adds	r3, #8
 8009e3e:	2101      	movs	r1, #1
 8009e40:	4618      	mov	r0, r3
 8009e42:	f001 fe97 	bl	800bb74 <RCCEx_PLL2_Config>
 8009e46:	4603      	mov	r3, r0
 8009e48:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8009e4c:	e00f      	b.n	8009e6e <HAL_RCCEx_PeriphCLKConfig+0xaae>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8009e4e:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8009e52:	3328      	adds	r3, #40	; 0x28
 8009e54:	2101      	movs	r1, #1
 8009e56:	4618      	mov	r0, r3
 8009e58:	f001 ff3e 	bl	800bcd8 <RCCEx_PLL3_Config>
 8009e5c:	4603      	mov	r3, r0
 8009e5e:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8009e62:	e004      	b.n	8009e6e <HAL_RCCEx_PeriphCLKConfig+0xaae>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8009e64:	2301      	movs	r3, #1
 8009e66:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
        break;
 8009e6a:	e000      	b.n	8009e6e <HAL_RCCEx_PeriphCLKConfig+0xaae>
        break;
 8009e6c:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009e6e:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8009e72:	2b00      	cmp	r3, #0
 8009e74:	d10b      	bne.n	8009e8e <HAL_RCCEx_PeriphCLKConfig+0xace>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8009e76:	4b81      	ldr	r3, [pc, #516]	; (800a07c <HAL_RCCEx_PeriphCLKConfig+0xcbc>)
 8009e78:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009e7a:	f023 0138 	bic.w	r1, r3, #56	; 0x38
 8009e7e:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8009e82:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8009e86:	4a7d      	ldr	r2, [pc, #500]	; (800a07c <HAL_RCCEx_PeriphCLKConfig+0xcbc>)
 8009e88:	430b      	orrs	r3, r1
 8009e8a:	6553      	str	r3, [r2, #84]	; 0x54
 8009e8c:	e003      	b.n	8009e96 <HAL_RCCEx_PeriphCLKConfig+0xad6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009e8e:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8009e92:	f887 312e 	strb.w	r3, [r7, #302]	; 0x12e
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8009e96:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8009e9a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009e9e:	f002 0302 	and.w	r3, r2, #2
 8009ea2:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8009ea6:	2300      	movs	r3, #0
 8009ea8:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8009eac:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	; 0xb8
 8009eb0:	460b      	mov	r3, r1
 8009eb2:	4313      	orrs	r3, r2
 8009eb4:	d042      	beq.n	8009f3c <HAL_RCCEx_PeriphCLKConfig+0xb7c>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 8009eb6:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8009eba:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009ebc:	2b05      	cmp	r3, #5
 8009ebe:	d825      	bhi.n	8009f0c <HAL_RCCEx_PeriphCLKConfig+0xb4c>
 8009ec0:	a201      	add	r2, pc, #4	; (adr r2, 8009ec8 <HAL_RCCEx_PeriphCLKConfig+0xb08>)
 8009ec2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009ec6:	bf00      	nop
 8009ec8:	08009f15 	.word	0x08009f15
 8009ecc:	08009ee1 	.word	0x08009ee1
 8009ed0:	08009ef7 	.word	0x08009ef7
 8009ed4:	08009f15 	.word	0x08009f15
 8009ed8:	08009f15 	.word	0x08009f15
 8009edc:	08009f15 	.word	0x08009f15
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8009ee0:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8009ee4:	3308      	adds	r3, #8
 8009ee6:	2101      	movs	r1, #1
 8009ee8:	4618      	mov	r0, r3
 8009eea:	f001 fe43 	bl	800bb74 <RCCEx_PLL2_Config>
 8009eee:	4603      	mov	r3, r0
 8009ef0:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8009ef4:	e00f      	b.n	8009f16 <HAL_RCCEx_PeriphCLKConfig+0xb56>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8009ef6:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8009efa:	3328      	adds	r3, #40	; 0x28
 8009efc:	2101      	movs	r1, #1
 8009efe:	4618      	mov	r0, r3
 8009f00:	f001 feea 	bl	800bcd8 <RCCEx_PLL3_Config>
 8009f04:	4603      	mov	r3, r0
 8009f06:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8009f0a:	e004      	b.n	8009f16 <HAL_RCCEx_PeriphCLKConfig+0xb56>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8009f0c:	2301      	movs	r3, #1
 8009f0e:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
        break;
 8009f12:	e000      	b.n	8009f16 <HAL_RCCEx_PeriphCLKConfig+0xb56>
        break;
 8009f14:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009f16:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8009f1a:	2b00      	cmp	r3, #0
 8009f1c:	d10a      	bne.n	8009f34 <HAL_RCCEx_PeriphCLKConfig+0xb74>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8009f1e:	4b57      	ldr	r3, [pc, #348]	; (800a07c <HAL_RCCEx_PeriphCLKConfig+0xcbc>)
 8009f20:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009f22:	f023 0107 	bic.w	r1, r3, #7
 8009f26:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8009f2a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009f2c:	4a53      	ldr	r2, [pc, #332]	; (800a07c <HAL_RCCEx_PeriphCLKConfig+0xcbc>)
 8009f2e:	430b      	orrs	r3, r1
 8009f30:	6553      	str	r3, [r2, #84]	; 0x54
 8009f32:	e003      	b.n	8009f3c <HAL_RCCEx_PeriphCLKConfig+0xb7c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009f34:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8009f38:	f887 312e 	strb.w	r3, [r7, #302]	; 0x12e
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8009f3c:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8009f40:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009f44:	f002 0304 	and.w	r3, r2, #4
 8009f48:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8009f4c:	2300      	movs	r3, #0
 8009f4e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8009f52:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	; 0xb0
 8009f56:	460b      	mov	r3, r1
 8009f58:	4313      	orrs	r3, r2
 8009f5a:	d044      	beq.n	8009fe6 <HAL_RCCEx_PeriphCLKConfig+0xc26>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 8009f5c:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8009f60:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8009f64:	2b05      	cmp	r3, #5
 8009f66:	d825      	bhi.n	8009fb4 <HAL_RCCEx_PeriphCLKConfig+0xbf4>
 8009f68:	a201      	add	r2, pc, #4	; (adr r2, 8009f70 <HAL_RCCEx_PeriphCLKConfig+0xbb0>)
 8009f6a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009f6e:	bf00      	nop
 8009f70:	08009fbd 	.word	0x08009fbd
 8009f74:	08009f89 	.word	0x08009f89
 8009f78:	08009f9f 	.word	0x08009f9f
 8009f7c:	08009fbd 	.word	0x08009fbd
 8009f80:	08009fbd 	.word	0x08009fbd
 8009f84:	08009fbd 	.word	0x08009fbd
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8009f88:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8009f8c:	3308      	adds	r3, #8
 8009f8e:	2101      	movs	r1, #1
 8009f90:	4618      	mov	r0, r3
 8009f92:	f001 fdef 	bl	800bb74 <RCCEx_PLL2_Config>
 8009f96:	4603      	mov	r3, r0
 8009f98:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8009f9c:	e00f      	b.n	8009fbe <HAL_RCCEx_PeriphCLKConfig+0xbfe>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8009f9e:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8009fa2:	3328      	adds	r3, #40	; 0x28
 8009fa4:	2101      	movs	r1, #1
 8009fa6:	4618      	mov	r0, r3
 8009fa8:	f001 fe96 	bl	800bcd8 <RCCEx_PLL3_Config>
 8009fac:	4603      	mov	r3, r0
 8009fae:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8009fb2:	e004      	b.n	8009fbe <HAL_RCCEx_PeriphCLKConfig+0xbfe>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8009fb4:	2301      	movs	r3, #1
 8009fb6:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
        break;
 8009fba:	e000      	b.n	8009fbe <HAL_RCCEx_PeriphCLKConfig+0xbfe>
        break;
 8009fbc:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009fbe:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8009fc2:	2b00      	cmp	r3, #0
 8009fc4:	d10b      	bne.n	8009fde <HAL_RCCEx_PeriphCLKConfig+0xc1e>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8009fc6:	4b2d      	ldr	r3, [pc, #180]	; (800a07c <HAL_RCCEx_PeriphCLKConfig+0xcbc>)
 8009fc8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009fca:	f023 0107 	bic.w	r1, r3, #7
 8009fce:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8009fd2:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8009fd6:	4a29      	ldr	r2, [pc, #164]	; (800a07c <HAL_RCCEx_PeriphCLKConfig+0xcbc>)
 8009fd8:	430b      	orrs	r3, r1
 8009fda:	6593      	str	r3, [r2, #88]	; 0x58
 8009fdc:	e003      	b.n	8009fe6 <HAL_RCCEx_PeriphCLKConfig+0xc26>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009fde:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8009fe2:	f887 312e 	strb.w	r3, [r7, #302]	; 0x12e
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8009fe6:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8009fea:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009fee:	f002 0320 	and.w	r3, r2, #32
 8009ff2:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8009ff6:	2300      	movs	r3, #0
 8009ff8:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8009ffc:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 800a000:	460b      	mov	r3, r1
 800a002:	4313      	orrs	r3, r2
 800a004:	d057      	beq.n	800a0b6 <HAL_RCCEx_PeriphCLKConfig+0xcf6>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 800a006:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800a00a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800a00e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800a012:	d035      	beq.n	800a080 <HAL_RCCEx_PeriphCLKConfig+0xcc0>
 800a014:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800a018:	d82c      	bhi.n	800a074 <HAL_RCCEx_PeriphCLKConfig+0xcb4>
 800a01a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a01e:	d031      	beq.n	800a084 <HAL_RCCEx_PeriphCLKConfig+0xcc4>
 800a020:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a024:	d826      	bhi.n	800a074 <HAL_RCCEx_PeriphCLKConfig+0xcb4>
 800a026:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800a02a:	d02d      	beq.n	800a088 <HAL_RCCEx_PeriphCLKConfig+0xcc8>
 800a02c:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800a030:	d820      	bhi.n	800a074 <HAL_RCCEx_PeriphCLKConfig+0xcb4>
 800a032:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800a036:	d012      	beq.n	800a05e <HAL_RCCEx_PeriphCLKConfig+0xc9e>
 800a038:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800a03c:	d81a      	bhi.n	800a074 <HAL_RCCEx_PeriphCLKConfig+0xcb4>
 800a03e:	2b00      	cmp	r3, #0
 800a040:	d024      	beq.n	800a08c <HAL_RCCEx_PeriphCLKConfig+0xccc>
 800a042:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800a046:	d115      	bne.n	800a074 <HAL_RCCEx_PeriphCLKConfig+0xcb4>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800a048:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800a04c:	3308      	adds	r3, #8
 800a04e:	2100      	movs	r1, #0
 800a050:	4618      	mov	r0, r3
 800a052:	f001 fd8f 	bl	800bb74 <RCCEx_PLL2_Config>
 800a056:	4603      	mov	r3, r0
 800a058:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 800a05c:	e017      	b.n	800a08e <HAL_RCCEx_PeriphCLKConfig+0xcce>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800a05e:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800a062:	3328      	adds	r3, #40	; 0x28
 800a064:	2102      	movs	r1, #2
 800a066:	4618      	mov	r0, r3
 800a068:	f001 fe36 	bl	800bcd8 <RCCEx_PLL3_Config>
 800a06c:	4603      	mov	r3, r0
 800a06e:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 800a072:	e00c      	b.n	800a08e <HAL_RCCEx_PeriphCLKConfig+0xcce>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800a074:	2301      	movs	r3, #1
 800a076:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
        break;
 800a07a:	e008      	b.n	800a08e <HAL_RCCEx_PeriphCLKConfig+0xcce>
 800a07c:	58024400 	.word	0x58024400
        break;
 800a080:	bf00      	nop
 800a082:	e004      	b.n	800a08e <HAL_RCCEx_PeriphCLKConfig+0xcce>
        break;
 800a084:	bf00      	nop
 800a086:	e002      	b.n	800a08e <HAL_RCCEx_PeriphCLKConfig+0xcce>
        break;
 800a088:	bf00      	nop
 800a08a:	e000      	b.n	800a08e <HAL_RCCEx_PeriphCLKConfig+0xcce>
        break;
 800a08c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a08e:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 800a092:	2b00      	cmp	r3, #0
 800a094:	d10b      	bne.n	800a0ae <HAL_RCCEx_PeriphCLKConfig+0xcee>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800a096:	4bc2      	ldr	r3, [pc, #776]	; (800a3a0 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800a098:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a09a:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 800a09e:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800a0a2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800a0a6:	4abe      	ldr	r2, [pc, #760]	; (800a3a0 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800a0a8:	430b      	orrs	r3, r1
 800a0aa:	6553      	str	r3, [r2, #84]	; 0x54
 800a0ac:	e003      	b.n	800a0b6 <HAL_RCCEx_PeriphCLKConfig+0xcf6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a0ae:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 800a0b2:	f887 312e 	strb.w	r3, [r7, #302]	; 0x12e
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 800a0b6:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800a0ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a0be:	f002 0340 	and.w	r3, r2, #64	; 0x40
 800a0c2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800a0c6:	2300      	movs	r3, #0
 800a0c8:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 800a0cc:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	; 0xa0
 800a0d0:	460b      	mov	r3, r1
 800a0d2:	4313      	orrs	r3, r2
 800a0d4:	d055      	beq.n	800a182 <HAL_RCCEx_PeriphCLKConfig+0xdc2>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 800a0d6:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800a0da:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800a0de:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 800a0e2:	d033      	beq.n	800a14c <HAL_RCCEx_PeriphCLKConfig+0xd8c>
 800a0e4:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 800a0e8:	d82c      	bhi.n	800a144 <HAL_RCCEx_PeriphCLKConfig+0xd84>
 800a0ea:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a0ee:	d02f      	beq.n	800a150 <HAL_RCCEx_PeriphCLKConfig+0xd90>
 800a0f0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a0f4:	d826      	bhi.n	800a144 <HAL_RCCEx_PeriphCLKConfig+0xd84>
 800a0f6:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800a0fa:	d02b      	beq.n	800a154 <HAL_RCCEx_PeriphCLKConfig+0xd94>
 800a0fc:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800a100:	d820      	bhi.n	800a144 <HAL_RCCEx_PeriphCLKConfig+0xd84>
 800a102:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800a106:	d012      	beq.n	800a12e <HAL_RCCEx_PeriphCLKConfig+0xd6e>
 800a108:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800a10c:	d81a      	bhi.n	800a144 <HAL_RCCEx_PeriphCLKConfig+0xd84>
 800a10e:	2b00      	cmp	r3, #0
 800a110:	d022      	beq.n	800a158 <HAL_RCCEx_PeriphCLKConfig+0xd98>
 800a112:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800a116:	d115      	bne.n	800a144 <HAL_RCCEx_PeriphCLKConfig+0xd84>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800a118:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800a11c:	3308      	adds	r3, #8
 800a11e:	2100      	movs	r1, #0
 800a120:	4618      	mov	r0, r3
 800a122:	f001 fd27 	bl	800bb74 <RCCEx_PLL2_Config>
 800a126:	4603      	mov	r3, r0
 800a128:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 800a12c:	e015      	b.n	800a15a <HAL_RCCEx_PeriphCLKConfig+0xd9a>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800a12e:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800a132:	3328      	adds	r3, #40	; 0x28
 800a134:	2102      	movs	r1, #2
 800a136:	4618      	mov	r0, r3
 800a138:	f001 fdce 	bl	800bcd8 <RCCEx_PLL3_Config>
 800a13c:	4603      	mov	r3, r0
 800a13e:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 800a142:	e00a      	b.n	800a15a <HAL_RCCEx_PeriphCLKConfig+0xd9a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800a144:	2301      	movs	r3, #1
 800a146:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
        break;
 800a14a:	e006      	b.n	800a15a <HAL_RCCEx_PeriphCLKConfig+0xd9a>
        break;
 800a14c:	bf00      	nop
 800a14e:	e004      	b.n	800a15a <HAL_RCCEx_PeriphCLKConfig+0xd9a>
        break;
 800a150:	bf00      	nop
 800a152:	e002      	b.n	800a15a <HAL_RCCEx_PeriphCLKConfig+0xd9a>
        break;
 800a154:	bf00      	nop
 800a156:	e000      	b.n	800a15a <HAL_RCCEx_PeriphCLKConfig+0xd9a>
        break;
 800a158:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a15a:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 800a15e:	2b00      	cmp	r3, #0
 800a160:	d10b      	bne.n	800a17a <HAL_RCCEx_PeriphCLKConfig+0xdba>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800a162:	4b8f      	ldr	r3, [pc, #572]	; (800a3a0 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800a164:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a166:	f423 51e0 	bic.w	r1, r3, #7168	; 0x1c00
 800a16a:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800a16e:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800a172:	4a8b      	ldr	r2, [pc, #556]	; (800a3a0 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800a174:	430b      	orrs	r3, r1
 800a176:	6593      	str	r3, [r2, #88]	; 0x58
 800a178:	e003      	b.n	800a182 <HAL_RCCEx_PeriphCLKConfig+0xdc2>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a17a:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 800a17e:	f887 312e 	strb.w	r3, [r7, #302]	; 0x12e
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 800a182:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800a186:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a18a:	f002 0380 	and.w	r3, r2, #128	; 0x80
 800a18e:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800a192:	2300      	movs	r3, #0
 800a194:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800a198:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	; 0x98
 800a19c:	460b      	mov	r3, r1
 800a19e:	4313      	orrs	r3, r2
 800a1a0:	d055      	beq.n	800a24e <HAL_RCCEx_PeriphCLKConfig+0xe8e>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 800a1a2:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800a1a6:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800a1aa:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 800a1ae:	d033      	beq.n	800a218 <HAL_RCCEx_PeriphCLKConfig+0xe58>
 800a1b0:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 800a1b4:	d82c      	bhi.n	800a210 <HAL_RCCEx_PeriphCLKConfig+0xe50>
 800a1b6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800a1ba:	d02f      	beq.n	800a21c <HAL_RCCEx_PeriphCLKConfig+0xe5c>
 800a1bc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800a1c0:	d826      	bhi.n	800a210 <HAL_RCCEx_PeriphCLKConfig+0xe50>
 800a1c2:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 800a1c6:	d02b      	beq.n	800a220 <HAL_RCCEx_PeriphCLKConfig+0xe60>
 800a1c8:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 800a1cc:	d820      	bhi.n	800a210 <HAL_RCCEx_PeriphCLKConfig+0xe50>
 800a1ce:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800a1d2:	d012      	beq.n	800a1fa <HAL_RCCEx_PeriphCLKConfig+0xe3a>
 800a1d4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800a1d8:	d81a      	bhi.n	800a210 <HAL_RCCEx_PeriphCLKConfig+0xe50>
 800a1da:	2b00      	cmp	r3, #0
 800a1dc:	d022      	beq.n	800a224 <HAL_RCCEx_PeriphCLKConfig+0xe64>
 800a1de:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800a1e2:	d115      	bne.n	800a210 <HAL_RCCEx_PeriphCLKConfig+0xe50>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800a1e4:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800a1e8:	3308      	adds	r3, #8
 800a1ea:	2100      	movs	r1, #0
 800a1ec:	4618      	mov	r0, r3
 800a1ee:	f001 fcc1 	bl	800bb74 <RCCEx_PLL2_Config>
 800a1f2:	4603      	mov	r3, r0
 800a1f4:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 800a1f8:	e015      	b.n	800a226 <HAL_RCCEx_PeriphCLKConfig+0xe66>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800a1fa:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800a1fe:	3328      	adds	r3, #40	; 0x28
 800a200:	2102      	movs	r1, #2
 800a202:	4618      	mov	r0, r3
 800a204:	f001 fd68 	bl	800bcd8 <RCCEx_PLL3_Config>
 800a208:	4603      	mov	r3, r0
 800a20a:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 800a20e:	e00a      	b.n	800a226 <HAL_RCCEx_PeriphCLKConfig+0xe66>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800a210:	2301      	movs	r3, #1
 800a212:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
        break;
 800a216:	e006      	b.n	800a226 <HAL_RCCEx_PeriphCLKConfig+0xe66>
        break;
 800a218:	bf00      	nop
 800a21a:	e004      	b.n	800a226 <HAL_RCCEx_PeriphCLKConfig+0xe66>
        break;
 800a21c:	bf00      	nop
 800a21e:	e002      	b.n	800a226 <HAL_RCCEx_PeriphCLKConfig+0xe66>
        break;
 800a220:	bf00      	nop
 800a222:	e000      	b.n	800a226 <HAL_RCCEx_PeriphCLKConfig+0xe66>
        break;
 800a224:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a226:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 800a22a:	2b00      	cmp	r3, #0
 800a22c:	d10b      	bne.n	800a246 <HAL_RCCEx_PeriphCLKConfig+0xe86>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 800a22e:	4b5c      	ldr	r3, [pc, #368]	; (800a3a0 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800a230:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a232:	f423 4160 	bic.w	r1, r3, #57344	; 0xe000
 800a236:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800a23a:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800a23e:	4a58      	ldr	r2, [pc, #352]	; (800a3a0 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800a240:	430b      	orrs	r3, r1
 800a242:	6593      	str	r3, [r2, #88]	; 0x58
 800a244:	e003      	b.n	800a24e <HAL_RCCEx_PeriphCLKConfig+0xe8e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a246:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 800a24a:	f887 312e 	strb.w	r3, [r7, #302]	; 0x12e

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 800a24e:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800a252:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a256:	f002 0308 	and.w	r3, r2, #8
 800a25a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800a25e:	2300      	movs	r3, #0
 800a260:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800a264:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	; 0x90
 800a268:	460b      	mov	r3, r1
 800a26a:	4313      	orrs	r3, r2
 800a26c:	d01e      	beq.n	800a2ac <HAL_RCCEx_PeriphCLKConfig+0xeec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 800a26e:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800a272:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a276:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a27a:	d10c      	bne.n	800a296 <HAL_RCCEx_PeriphCLKConfig+0xed6>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800a27c:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800a280:	3328      	adds	r3, #40	; 0x28
 800a282:	2102      	movs	r1, #2
 800a284:	4618      	mov	r0, r3
 800a286:	f001 fd27 	bl	800bcd8 <RCCEx_PLL3_Config>
 800a28a:	4603      	mov	r3, r0
 800a28c:	2b00      	cmp	r3, #0
 800a28e:	d002      	beq.n	800a296 <HAL_RCCEx_PeriphCLKConfig+0xed6>
      {
        status = HAL_ERROR;
 800a290:	2301      	movs	r3, #1
 800a292:	f887 312e 	strb.w	r3, [r7, #302]	; 0x12e
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 800a296:	4b42      	ldr	r3, [pc, #264]	; (800a3a0 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800a298:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a29a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800a29e:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800a2a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a2a6:	4a3e      	ldr	r2, [pc, #248]	; (800a3a0 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800a2a8:	430b      	orrs	r3, r1
 800a2aa:	6553      	str	r3, [r2, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800a2ac:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800a2b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a2b4:	f002 0310 	and.w	r3, r2, #16
 800a2b8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800a2bc:	2300      	movs	r3, #0
 800a2be:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 800a2c2:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	; 0x88
 800a2c6:	460b      	mov	r3, r1
 800a2c8:	4313      	orrs	r3, r2
 800a2ca:	d01e      	beq.n	800a30a <HAL_RCCEx_PeriphCLKConfig+0xf4a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 800a2cc:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800a2d0:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800a2d4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a2d8:	d10c      	bne.n	800a2f4 <HAL_RCCEx_PeriphCLKConfig+0xf34>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800a2da:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800a2de:	3328      	adds	r3, #40	; 0x28
 800a2e0:	2102      	movs	r1, #2
 800a2e2:	4618      	mov	r0, r3
 800a2e4:	f001 fcf8 	bl	800bcd8 <RCCEx_PLL3_Config>
 800a2e8:	4603      	mov	r3, r0
 800a2ea:	2b00      	cmp	r3, #0
 800a2ec:	d002      	beq.n	800a2f4 <HAL_RCCEx_PeriphCLKConfig+0xf34>
      {
        status = HAL_ERROR;
 800a2ee:	2301      	movs	r3, #1
 800a2f0:	f887 312e 	strb.w	r3, [r7, #302]	; 0x12e
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800a2f4:	4b2a      	ldr	r3, [pc, #168]	; (800a3a0 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800a2f6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a2f8:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800a2fc:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800a300:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800a304:	4a26      	ldr	r2, [pc, #152]	; (800a3a0 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800a306:	430b      	orrs	r3, r1
 800a308:	6593      	str	r3, [r2, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800a30a:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800a30e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a312:	f402 2300 	and.w	r3, r2, #524288	; 0x80000
 800a316:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800a31a:	2300      	movs	r3, #0
 800a31c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800a320:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	; 0x80
 800a324:	460b      	mov	r3, r1
 800a326:	4313      	orrs	r3, r2
 800a328:	d040      	beq.n	800a3ac <HAL_RCCEx_PeriphCLKConfig+0xfec>
  {
    switch (PeriphClkInit->AdcClockSelection)
 800a32a:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800a32e:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800a332:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800a336:	d022      	beq.n	800a37e <HAL_RCCEx_PeriphCLKConfig+0xfbe>
 800a338:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800a33c:	d81b      	bhi.n	800a376 <HAL_RCCEx_PeriphCLKConfig+0xfb6>
 800a33e:	2b00      	cmp	r3, #0
 800a340:	d003      	beq.n	800a34a <HAL_RCCEx_PeriphCLKConfig+0xf8a>
 800a342:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a346:	d00b      	beq.n	800a360 <HAL_RCCEx_PeriphCLKConfig+0xfa0>
 800a348:	e015      	b.n	800a376 <HAL_RCCEx_PeriphCLKConfig+0xfb6>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800a34a:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800a34e:	3308      	adds	r3, #8
 800a350:	2100      	movs	r1, #0
 800a352:	4618      	mov	r0, r3
 800a354:	f001 fc0e 	bl	800bb74 <RCCEx_PLL2_Config>
 800a358:	4603      	mov	r3, r0
 800a35a:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f

        /* ADC clock source configuration done later after clock selection check */
        break;
 800a35e:	e00f      	b.n	800a380 <HAL_RCCEx_PeriphCLKConfig+0xfc0>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800a360:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800a364:	3328      	adds	r3, #40	; 0x28
 800a366:	2102      	movs	r1, #2
 800a368:	4618      	mov	r0, r3
 800a36a:	f001 fcb5 	bl	800bcd8 <RCCEx_PLL3_Config>
 800a36e:	4603      	mov	r3, r0
 800a370:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f

        /* ADC clock source configuration done later after clock selection check */
        break;
 800a374:	e004      	b.n	800a380 <HAL_RCCEx_PeriphCLKConfig+0xfc0>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800a376:	2301      	movs	r3, #1
 800a378:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
        break;
 800a37c:	e000      	b.n	800a380 <HAL_RCCEx_PeriphCLKConfig+0xfc0>
        break;
 800a37e:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a380:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 800a384:	2b00      	cmp	r3, #0
 800a386:	d10d      	bne.n	800a3a4 <HAL_RCCEx_PeriphCLKConfig+0xfe4>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800a388:	4b05      	ldr	r3, [pc, #20]	; (800a3a0 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800a38a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a38c:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 800a390:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800a394:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800a398:	4a01      	ldr	r2, [pc, #4]	; (800a3a0 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800a39a:	430b      	orrs	r3, r1
 800a39c:	6593      	str	r3, [r2, #88]	; 0x58
 800a39e:	e005      	b.n	800a3ac <HAL_RCCEx_PeriphCLKConfig+0xfec>
 800a3a0:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a3a4:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 800a3a8:	f887 312e 	strb.w	r3, [r7, #302]	; 0x12e
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800a3ac:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800a3b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a3b4:	f402 2380 	and.w	r3, r2, #262144	; 0x40000
 800a3b8:	67bb      	str	r3, [r7, #120]	; 0x78
 800a3ba:	2300      	movs	r3, #0
 800a3bc:	67fb      	str	r3, [r7, #124]	; 0x7c
 800a3be:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	; 0x78
 800a3c2:	460b      	mov	r3, r1
 800a3c4:	4313      	orrs	r3, r2
 800a3c6:	d03b      	beq.n	800a440 <HAL_RCCEx_PeriphCLKConfig+0x1080>
  {

    switch (PeriphClkInit->UsbClockSelection)
 800a3c8:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800a3cc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800a3d0:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800a3d4:	d01f      	beq.n	800a416 <HAL_RCCEx_PeriphCLKConfig+0x1056>
 800a3d6:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800a3da:	d818      	bhi.n	800a40e <HAL_RCCEx_PeriphCLKConfig+0x104e>
 800a3dc:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800a3e0:	d003      	beq.n	800a3ea <HAL_RCCEx_PeriphCLKConfig+0x102a>
 800a3e2:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800a3e6:	d007      	beq.n	800a3f8 <HAL_RCCEx_PeriphCLKConfig+0x1038>
 800a3e8:	e011      	b.n	800a40e <HAL_RCCEx_PeriphCLKConfig+0x104e>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800a3ea:	4b64      	ldr	r3, [pc, #400]	; (800a57c <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 800a3ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a3ee:	4a63      	ldr	r2, [pc, #396]	; (800a57c <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 800a3f0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800a3f4:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 800a3f6:	e00f      	b.n	800a418 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800a3f8:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800a3fc:	3328      	adds	r3, #40	; 0x28
 800a3fe:	2101      	movs	r1, #1
 800a400:	4618      	mov	r0, r3
 800a402:	f001 fc69 	bl	800bcd8 <RCCEx_PLL3_Config>
 800a406:	4603      	mov	r3, r0
 800a408:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f

        /* USB clock source configuration done later after clock selection check */
        break;
 800a40c:	e004      	b.n	800a418 <HAL_RCCEx_PeriphCLKConfig+0x1058>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800a40e:	2301      	movs	r3, #1
 800a410:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
        break;
 800a414:	e000      	b.n	800a418 <HAL_RCCEx_PeriphCLKConfig+0x1058>
        break;
 800a416:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a418:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 800a41c:	2b00      	cmp	r3, #0
 800a41e:	d10b      	bne.n	800a438 <HAL_RCCEx_PeriphCLKConfig+0x1078>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800a420:	4b56      	ldr	r3, [pc, #344]	; (800a57c <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 800a422:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a424:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 800a428:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800a42c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800a430:	4a52      	ldr	r2, [pc, #328]	; (800a57c <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 800a432:	430b      	orrs	r3, r1
 800a434:	6553      	str	r3, [r2, #84]	; 0x54
 800a436:	e003      	b.n	800a440 <HAL_RCCEx_PeriphCLKConfig+0x1080>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a438:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 800a43c:	f887 312e 	strb.w	r3, [r7, #302]	; 0x12e
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 800a440:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800a444:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a448:	f402 3380 	and.w	r3, r2, #65536	; 0x10000
 800a44c:	673b      	str	r3, [r7, #112]	; 0x70
 800a44e:	2300      	movs	r3, #0
 800a450:	677b      	str	r3, [r7, #116]	; 0x74
 800a452:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	; 0x70
 800a456:	460b      	mov	r3, r1
 800a458:	4313      	orrs	r3, r2
 800a45a:	d031      	beq.n	800a4c0 <HAL_RCCEx_PeriphCLKConfig+0x1100>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 800a45c:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800a460:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a462:	2b00      	cmp	r3, #0
 800a464:	d003      	beq.n	800a46e <HAL_RCCEx_PeriphCLKConfig+0x10ae>
 800a466:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a46a:	d007      	beq.n	800a47c <HAL_RCCEx_PeriphCLKConfig+0x10bc>
 800a46c:	e011      	b.n	800a492 <HAL_RCCEx_PeriphCLKConfig+0x10d2>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800a46e:	4b43      	ldr	r3, [pc, #268]	; (800a57c <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 800a470:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a472:	4a42      	ldr	r2, [pc, #264]	; (800a57c <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 800a474:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800a478:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 800a47a:	e00e      	b.n	800a49a <HAL_RCCEx_PeriphCLKConfig+0x10da>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800a47c:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800a480:	3308      	adds	r3, #8
 800a482:	2102      	movs	r1, #2
 800a484:	4618      	mov	r0, r3
 800a486:	f001 fb75 	bl	800bb74 <RCCEx_PLL2_Config>
 800a48a:	4603      	mov	r3, r0
 800a48c:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 800a490:	e003      	b.n	800a49a <HAL_RCCEx_PeriphCLKConfig+0x10da>

      default:
        ret = HAL_ERROR;
 800a492:	2301      	movs	r3, #1
 800a494:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
        break;
 800a498:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a49a:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 800a49e:	2b00      	cmp	r3, #0
 800a4a0:	d10a      	bne.n	800a4b8 <HAL_RCCEx_PeriphCLKConfig+0x10f8>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 800a4a2:	4b36      	ldr	r3, [pc, #216]	; (800a57c <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 800a4a4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a4a6:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800a4aa:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800a4ae:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a4b0:	4a32      	ldr	r2, [pc, #200]	; (800a57c <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 800a4b2:	430b      	orrs	r3, r1
 800a4b4:	64d3      	str	r3, [r2, #76]	; 0x4c
 800a4b6:	e003      	b.n	800a4c0 <HAL_RCCEx_PeriphCLKConfig+0x1100>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a4b8:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 800a4bc:	f887 312e 	strb.w	r3, [r7, #302]	; 0x12e
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800a4c0:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800a4c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a4c8:	f002 5300 	and.w	r3, r2, #536870912	; 0x20000000
 800a4cc:	66bb      	str	r3, [r7, #104]	; 0x68
 800a4ce:	2300      	movs	r3, #0
 800a4d0:	66fb      	str	r3, [r7, #108]	; 0x6c
 800a4d2:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	; 0x68
 800a4d6:	460b      	mov	r3, r1
 800a4d8:	4313      	orrs	r3, r2
 800a4da:	d00c      	beq.n	800a4f6 <HAL_RCCEx_PeriphCLKConfig+0x1136>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800a4dc:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800a4e0:	3328      	adds	r3, #40	; 0x28
 800a4e2:	2102      	movs	r1, #2
 800a4e4:	4618      	mov	r0, r3
 800a4e6:	f001 fbf7 	bl	800bcd8 <RCCEx_PLL3_Config>
 800a4ea:	4603      	mov	r3, r0
 800a4ec:	2b00      	cmp	r3, #0
 800a4ee:	d002      	beq.n	800a4f6 <HAL_RCCEx_PeriphCLKConfig+0x1136>
    {
      status = HAL_ERROR;
 800a4f0:	2301      	movs	r3, #1
 800a4f2:	f887 312e 	strb.w	r3, [r7, #302]	; 0x12e
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 800a4f6:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800a4fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a4fe:	f402 3300 	and.w	r3, r2, #131072	; 0x20000
 800a502:	663b      	str	r3, [r7, #96]	; 0x60
 800a504:	2300      	movs	r3, #0
 800a506:	667b      	str	r3, [r7, #100]	; 0x64
 800a508:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	; 0x60
 800a50c:	460b      	mov	r3, r1
 800a50e:	4313      	orrs	r3, r2
 800a510:	d03a      	beq.n	800a588 <HAL_RCCEx_PeriphCLKConfig+0x11c8>
  {

    switch (PeriphClkInit->RngClockSelection)
 800a512:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800a516:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800a51a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800a51e:	d018      	beq.n	800a552 <HAL_RCCEx_PeriphCLKConfig+0x1192>
 800a520:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800a524:	d811      	bhi.n	800a54a <HAL_RCCEx_PeriphCLKConfig+0x118a>
 800a526:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a52a:	d014      	beq.n	800a556 <HAL_RCCEx_PeriphCLKConfig+0x1196>
 800a52c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a530:	d80b      	bhi.n	800a54a <HAL_RCCEx_PeriphCLKConfig+0x118a>
 800a532:	2b00      	cmp	r3, #0
 800a534:	d011      	beq.n	800a55a <HAL_RCCEx_PeriphCLKConfig+0x119a>
 800a536:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a53a:	d106      	bne.n	800a54a <HAL_RCCEx_PeriphCLKConfig+0x118a>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800a53c:	4b0f      	ldr	r3, [pc, #60]	; (800a57c <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 800a53e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a540:	4a0e      	ldr	r2, [pc, #56]	; (800a57c <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 800a542:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800a546:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 800a548:	e008      	b.n	800a55c <HAL_RCCEx_PeriphCLKConfig+0x119c>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800a54a:	2301      	movs	r3, #1
 800a54c:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
        break;
 800a550:	e004      	b.n	800a55c <HAL_RCCEx_PeriphCLKConfig+0x119c>
        break;
 800a552:	bf00      	nop
 800a554:	e002      	b.n	800a55c <HAL_RCCEx_PeriphCLKConfig+0x119c>
        break;
 800a556:	bf00      	nop
 800a558:	e000      	b.n	800a55c <HAL_RCCEx_PeriphCLKConfig+0x119c>
        break;
 800a55a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a55c:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 800a560:	2b00      	cmp	r3, #0
 800a562:	d10d      	bne.n	800a580 <HAL_RCCEx_PeriphCLKConfig+0x11c0>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800a564:	4b05      	ldr	r3, [pc, #20]	; (800a57c <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 800a566:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a568:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800a56c:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800a570:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800a574:	4a01      	ldr	r2, [pc, #4]	; (800a57c <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 800a576:	430b      	orrs	r3, r1
 800a578:	6553      	str	r3, [r2, #84]	; 0x54
 800a57a:	e005      	b.n	800a588 <HAL_RCCEx_PeriphCLKConfig+0x11c8>
 800a57c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a580:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 800a584:	f887 312e 	strb.w	r3, [r7, #302]	; 0x12e
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800a588:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800a58c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a590:	f402 1380 	and.w	r3, r2, #1048576	; 0x100000
 800a594:	65bb      	str	r3, [r7, #88]	; 0x58
 800a596:	2300      	movs	r3, #0
 800a598:	65fb      	str	r3, [r7, #92]	; 0x5c
 800a59a:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	; 0x58
 800a59e:	460b      	mov	r3, r1
 800a5a0:	4313      	orrs	r3, r2
 800a5a2:	d009      	beq.n	800a5b8 <HAL_RCCEx_PeriphCLKConfig+0x11f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800a5a4:	4baa      	ldr	r3, [pc, #680]	; (800a850 <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 800a5a6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a5a8:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 800a5ac:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800a5b0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800a5b2:	4aa7      	ldr	r2, [pc, #668]	; (800a850 <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 800a5b4:	430b      	orrs	r3, r1
 800a5b6:	6513      	str	r3, [r2, #80]	; 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 800a5b8:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800a5bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a5c0:	f002 5380 	and.w	r3, r2, #268435456	; 0x10000000
 800a5c4:	653b      	str	r3, [r7, #80]	; 0x50
 800a5c6:	2300      	movs	r3, #0
 800a5c8:	657b      	str	r3, [r7, #84]	; 0x54
 800a5ca:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	; 0x50
 800a5ce:	460b      	mov	r3, r1
 800a5d0:	4313      	orrs	r3, r2
 800a5d2:	d00a      	beq.n	800a5ea <HAL_RCCEx_PeriphCLKConfig+0x122a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 800a5d4:	4b9e      	ldr	r3, [pc, #632]	; (800a850 <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 800a5d6:	691b      	ldr	r3, [r3, #16]
 800a5d8:	f423 4180 	bic.w	r1, r3, #16384	; 0x4000
 800a5dc:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800a5e0:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 800a5e4:	4a9a      	ldr	r2, [pc, #616]	; (800a850 <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 800a5e6:	430b      	orrs	r3, r1
 800a5e8:	6113      	str	r3, [r2, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800a5ea:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800a5ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a5f2:	f402 1300 	and.w	r3, r2, #2097152	; 0x200000
 800a5f6:	64bb      	str	r3, [r7, #72]	; 0x48
 800a5f8:	2300      	movs	r3, #0
 800a5fa:	64fb      	str	r3, [r7, #76]	; 0x4c
 800a5fc:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	; 0x48
 800a600:	460b      	mov	r3, r1
 800a602:	4313      	orrs	r3, r2
 800a604:	d009      	beq.n	800a61a <HAL_RCCEx_PeriphCLKConfig+0x125a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800a606:	4b92      	ldr	r3, [pc, #584]	; (800a850 <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 800a608:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a60a:	f023 7180 	bic.w	r1, r3, #16777216	; 0x1000000
 800a60e:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800a612:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a614:	4a8e      	ldr	r2, [pc, #568]	; (800a850 <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 800a616:	430b      	orrs	r3, r1
 800a618:	6513      	str	r3, [r2, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 800a61a:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800a61e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a622:	f002 4380 	and.w	r3, r2, #1073741824	; 0x40000000
 800a626:	643b      	str	r3, [r7, #64]	; 0x40
 800a628:	2300      	movs	r3, #0
 800a62a:	647b      	str	r3, [r7, #68]	; 0x44
 800a62c:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	; 0x40
 800a630:	460b      	mov	r3, r1
 800a632:	4313      	orrs	r3, r2
 800a634:	d00e      	beq.n	800a654 <HAL_RCCEx_PeriphCLKConfig+0x1294>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800a636:	4b86      	ldr	r3, [pc, #536]	; (800a850 <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 800a638:	691b      	ldr	r3, [r3, #16]
 800a63a:	4a85      	ldr	r2, [pc, #532]	; (800a850 <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 800a63c:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800a640:	6113      	str	r3, [r2, #16]
 800a642:	4b83      	ldr	r3, [pc, #524]	; (800a850 <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 800a644:	6919      	ldr	r1, [r3, #16]
 800a646:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800a64a:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 800a64e:	4a80      	ldr	r2, [pc, #512]	; (800a850 <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 800a650:	430b      	orrs	r3, r1
 800a652:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 800a654:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800a658:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a65c:	f002 4300 	and.w	r3, r2, #2147483648	; 0x80000000
 800a660:	63bb      	str	r3, [r7, #56]	; 0x38
 800a662:	2300      	movs	r3, #0
 800a664:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a666:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	; 0x38
 800a66a:	460b      	mov	r3, r1
 800a66c:	4313      	orrs	r3, r2
 800a66e:	d009      	beq.n	800a684 <HAL_RCCEx_PeriphCLKConfig+0x12c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 800a670:	4b77      	ldr	r3, [pc, #476]	; (800a850 <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 800a672:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a674:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 800a678:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800a67c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a67e:	4a74      	ldr	r2, [pc, #464]	; (800a850 <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 800a680:	430b      	orrs	r3, r1
 800a682:	64d3      	str	r3, [r2, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800a684:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800a688:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a68c:	f402 0300 	and.w	r3, r2, #8388608	; 0x800000
 800a690:	633b      	str	r3, [r7, #48]	; 0x30
 800a692:	2300      	movs	r3, #0
 800a694:	637b      	str	r3, [r7, #52]	; 0x34
 800a696:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	; 0x30
 800a69a:	460b      	mov	r3, r1
 800a69c:	4313      	orrs	r3, r2
 800a69e:	d00a      	beq.n	800a6b6 <HAL_RCCEx_PeriphCLKConfig+0x12f6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800a6a0:	4b6b      	ldr	r3, [pc, #428]	; (800a850 <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 800a6a2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a6a4:	f423 0140 	bic.w	r1, r3, #12582912	; 0xc00000
 800a6a8:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800a6ac:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a6b0:	4a67      	ldr	r2, [pc, #412]	; (800a850 <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 800a6b2:	430b      	orrs	r3, r1
 800a6b4:	6553      	str	r3, [r2, #84]	; 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 800a6b6:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800a6ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a6be:	2100      	movs	r1, #0
 800a6c0:	62b9      	str	r1, [r7, #40]	; 0x28
 800a6c2:	f003 0301 	and.w	r3, r3, #1
 800a6c6:	62fb      	str	r3, [r7, #44]	; 0x2c
 800a6c8:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	; 0x28
 800a6cc:	460b      	mov	r3, r1
 800a6ce:	4313      	orrs	r3, r2
 800a6d0:	d011      	beq.n	800a6f6 <HAL_RCCEx_PeriphCLKConfig+0x1336>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800a6d2:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800a6d6:	3308      	adds	r3, #8
 800a6d8:	2100      	movs	r1, #0
 800a6da:	4618      	mov	r0, r3
 800a6dc:	f001 fa4a 	bl	800bb74 <RCCEx_PLL2_Config>
 800a6e0:	4603      	mov	r3, r0
 800a6e2:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
    
    if (ret == HAL_OK)
 800a6e6:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 800a6ea:	2b00      	cmp	r3, #0
 800a6ec:	d003      	beq.n	800a6f6 <HAL_RCCEx_PeriphCLKConfig+0x1336>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a6ee:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 800a6f2:	f887 312e 	strb.w	r3, [r7, #302]	; 0x12e
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 800a6f6:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800a6fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a6fe:	2100      	movs	r1, #0
 800a700:	6239      	str	r1, [r7, #32]
 800a702:	f003 0302 	and.w	r3, r3, #2
 800a706:	627b      	str	r3, [r7, #36]	; 0x24
 800a708:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 800a70c:	460b      	mov	r3, r1
 800a70e:	4313      	orrs	r3, r2
 800a710:	d011      	beq.n	800a736 <HAL_RCCEx_PeriphCLKConfig+0x1376>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800a712:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800a716:	3308      	adds	r3, #8
 800a718:	2101      	movs	r1, #1
 800a71a:	4618      	mov	r0, r3
 800a71c:	f001 fa2a 	bl	800bb74 <RCCEx_PLL2_Config>
 800a720:	4603      	mov	r3, r0
 800a722:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
    
    if (ret == HAL_OK)
 800a726:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 800a72a:	2b00      	cmp	r3, #0
 800a72c:	d003      	beq.n	800a736 <HAL_RCCEx_PeriphCLKConfig+0x1376>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a72e:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 800a732:	f887 312e 	strb.w	r3, [r7, #302]	; 0x12e
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 800a736:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800a73a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a73e:	2100      	movs	r1, #0
 800a740:	61b9      	str	r1, [r7, #24]
 800a742:	f003 0304 	and.w	r3, r3, #4
 800a746:	61fb      	str	r3, [r7, #28]
 800a748:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 800a74c:	460b      	mov	r3, r1
 800a74e:	4313      	orrs	r3, r2
 800a750:	d011      	beq.n	800a776 <HAL_RCCEx_PeriphCLKConfig+0x13b6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800a752:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800a756:	3308      	adds	r3, #8
 800a758:	2102      	movs	r1, #2
 800a75a:	4618      	mov	r0, r3
 800a75c:	f001 fa0a 	bl	800bb74 <RCCEx_PLL2_Config>
 800a760:	4603      	mov	r3, r0
 800a762:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
    
    if (ret == HAL_OK)
 800a766:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 800a76a:	2b00      	cmp	r3, #0
 800a76c:	d003      	beq.n	800a776 <HAL_RCCEx_PeriphCLKConfig+0x13b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a76e:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 800a772:	f887 312e 	strb.w	r3, [r7, #302]	; 0x12e
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 800a776:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800a77a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a77e:	2100      	movs	r1, #0
 800a780:	6139      	str	r1, [r7, #16]
 800a782:	f003 0308 	and.w	r3, r3, #8
 800a786:	617b      	str	r3, [r7, #20]
 800a788:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 800a78c:	460b      	mov	r3, r1
 800a78e:	4313      	orrs	r3, r2
 800a790:	d011      	beq.n	800a7b6 <HAL_RCCEx_PeriphCLKConfig+0x13f6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800a792:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800a796:	3328      	adds	r3, #40	; 0x28
 800a798:	2100      	movs	r1, #0
 800a79a:	4618      	mov	r0, r3
 800a79c:	f001 fa9c 	bl	800bcd8 <RCCEx_PLL3_Config>
 800a7a0:	4603      	mov	r3, r0
 800a7a2:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
  
    if (ret == HAL_OK)
 800a7a6:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 800a7aa:	2b00      	cmp	r3, #0
 800a7ac:	d003      	beq.n	800a7b6 <HAL_RCCEx_PeriphCLKConfig+0x13f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a7ae:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 800a7b2:	f887 312e 	strb.w	r3, [r7, #302]	; 0x12e
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 800a7b6:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800a7ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a7be:	2100      	movs	r1, #0
 800a7c0:	60b9      	str	r1, [r7, #8]
 800a7c2:	f003 0310 	and.w	r3, r3, #16
 800a7c6:	60fb      	str	r3, [r7, #12]
 800a7c8:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 800a7cc:	460b      	mov	r3, r1
 800a7ce:	4313      	orrs	r3, r2
 800a7d0:	d011      	beq.n	800a7f6 <HAL_RCCEx_PeriphCLKConfig+0x1436>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800a7d2:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800a7d6:	3328      	adds	r3, #40	; 0x28
 800a7d8:	2101      	movs	r1, #1
 800a7da:	4618      	mov	r0, r3
 800a7dc:	f001 fa7c 	bl	800bcd8 <RCCEx_PLL3_Config>
 800a7e0:	4603      	mov	r3, r0
 800a7e2:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
    
    if (ret == HAL_OK)
 800a7e6:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 800a7ea:	2b00      	cmp	r3, #0
 800a7ec:	d003      	beq.n	800a7f6 <HAL_RCCEx_PeriphCLKConfig+0x1436>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a7ee:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 800a7f2:	f887 312e 	strb.w	r3, [r7, #302]	; 0x12e
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 800a7f6:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800a7fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a7fe:	2100      	movs	r1, #0
 800a800:	6039      	str	r1, [r7, #0]
 800a802:	f003 0320 	and.w	r3, r3, #32
 800a806:	607b      	str	r3, [r7, #4]
 800a808:	e9d7 1200 	ldrd	r1, r2, [r7]
 800a80c:	460b      	mov	r3, r1
 800a80e:	4313      	orrs	r3, r2
 800a810:	d011      	beq.n	800a836 <HAL_RCCEx_PeriphCLKConfig+0x1476>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800a812:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800a816:	3328      	adds	r3, #40	; 0x28
 800a818:	2102      	movs	r1, #2
 800a81a:	4618      	mov	r0, r3
 800a81c:	f001 fa5c 	bl	800bcd8 <RCCEx_PLL3_Config>
 800a820:	4603      	mov	r3, r0
 800a822:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
    
    if (ret == HAL_OK)
 800a826:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 800a82a:	2b00      	cmp	r3, #0
 800a82c:	d003      	beq.n	800a836 <HAL_RCCEx_PeriphCLKConfig+0x1476>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a82e:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 800a832:	f887 312e 	strb.w	r3, [r7, #302]	; 0x12e
    } 
  }

  if (status == HAL_OK)
 800a836:	f897 312e 	ldrb.w	r3, [r7, #302]	; 0x12e
 800a83a:	2b00      	cmp	r3, #0
 800a83c:	d101      	bne.n	800a842 <HAL_RCCEx_PeriphCLKConfig+0x1482>
  {
    return HAL_OK;
 800a83e:	2300      	movs	r3, #0
 800a840:	e000      	b.n	800a844 <HAL_RCCEx_PeriphCLKConfig+0x1484>
  }
  return HAL_ERROR;
 800a842:	2301      	movs	r3, #1
}
 800a844:	4618      	mov	r0, r3
 800a846:	f507 7798 	add.w	r7, r7, #304	; 0x130
 800a84a:	46bd      	mov	sp, r7
 800a84c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800a850:	58024400 	.word	0x58024400

0800a854 <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in KHz
  *
  *  (*) : Available on some STM32H7 lines only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint64_t PeriphClk)
{
 800a854:	b580      	push	{r7, lr}
 800a856:	b090      	sub	sp, #64	; 0x40
 800a858:	af00      	add	r7, sp, #0
 800a85a:	e9c7 0100 	strd	r0, r1, [r7]
  /* This variable is used to store the SAI and CKP clock source */
  uint32_t saiclocksource;
  uint32_t ckpclocksource;
  uint32_t srcclk;

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 800a85e:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a862:	f5a2 7180 	sub.w	r1, r2, #256	; 0x100
 800a866:	430b      	orrs	r3, r1
 800a868:	f040 8094 	bne.w	800a994 <HAL_RCCEx_GetPeriphCLKFreq+0x140>
  {

    saiclocksource = __HAL_RCC_GET_SAI1_SOURCE();
 800a86c:	4b9e      	ldr	r3, [pc, #632]	; (800aae8 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800a86e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a870:	f003 0307 	and.w	r3, r3, #7
 800a874:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 800a876:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a878:	2b04      	cmp	r3, #4
 800a87a:	f200 8087 	bhi.w	800a98c <HAL_RCCEx_GetPeriphCLKFreq+0x138>
 800a87e:	a201      	add	r2, pc, #4	; (adr r2, 800a884 <HAL_RCCEx_GetPeriphCLKFreq+0x30>)
 800a880:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a884:	0800a899 	.word	0x0800a899
 800a888:	0800a8c1 	.word	0x0800a8c1
 800a88c:	0800a8e9 	.word	0x0800a8e9
 800a890:	0800a985 	.word	0x0800a985
 800a894:	0800a911 	.word	0x0800a911
    {
      case RCC_SAI1CLKSOURCE_PLL: /* PLL1 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800a898:	4b93      	ldr	r3, [pc, #588]	; (800aae8 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800a89a:	681b      	ldr	r3, [r3, #0]
 800a89c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a8a0:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800a8a4:	d108      	bne.n	800a8b8 <HAL_RCCEx_GetPeriphCLKFreq+0x64>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800a8a6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800a8aa:	4618      	mov	r0, r3
 800a8ac:	f001 f810 	bl	800b8d0 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800a8b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a8b2:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a8b4:	f000 bd45 	b.w	800b342 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800a8b8:	2300      	movs	r3, #0
 800a8ba:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a8bc:	f000 bd41 	b.w	800b342 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800a8c0:	4b89      	ldr	r3, [pc, #548]	; (800aae8 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800a8c2:	681b      	ldr	r3, [r3, #0]
 800a8c4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800a8c8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800a8cc:	d108      	bne.n	800a8e0 <HAL_RCCEx_GetPeriphCLKFreq+0x8c>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a8ce:	f107 0318 	add.w	r3, r7, #24
 800a8d2:	4618      	mov	r0, r3
 800a8d4:	f000 fd54 	bl	800b380 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800a8d8:	69bb      	ldr	r3, [r7, #24]
 800a8da:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a8dc:	f000 bd31 	b.w	800b342 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800a8e0:	2300      	movs	r3, #0
 800a8e2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a8e4:	f000 bd2d 	b.w	800b342 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI1CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800a8e8:	4b7f      	ldr	r3, [pc, #508]	; (800aae8 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800a8ea:	681b      	ldr	r3, [r3, #0]
 800a8ec:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800a8f0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800a8f4:	d108      	bne.n	800a908 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a8f6:	f107 030c 	add.w	r3, r7, #12
 800a8fa:	4618      	mov	r0, r3
 800a8fc:	f000 fe94 	bl	800b628 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800a900:	68fb      	ldr	r3, [r7, #12]
 800a902:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a904:	f000 bd1d 	b.w	800b342 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800a908:	2300      	movs	r3, #0
 800a90a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a90c:	f000 bd19 	b.w	800b342 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI1CLKSOURCE_CLKP: /* CKPER is the clock source for SAI1*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800a910:	4b75      	ldr	r3, [pc, #468]	; (800aae8 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800a912:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a914:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800a918:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800a91a:	4b73      	ldr	r3, [pc, #460]	; (800aae8 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800a91c:	681b      	ldr	r3, [r3, #0]
 800a91e:	f003 0304 	and.w	r3, r3, #4
 800a922:	2b04      	cmp	r3, #4
 800a924:	d10c      	bne.n	800a940 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
 800a926:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a928:	2b00      	cmp	r3, #0
 800a92a:	d109      	bne.n	800a940 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800a92c:	4b6e      	ldr	r3, [pc, #440]	; (800aae8 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800a92e:	681b      	ldr	r3, [r3, #0]
 800a930:	08db      	lsrs	r3, r3, #3
 800a932:	f003 0303 	and.w	r3, r3, #3
 800a936:	4a6d      	ldr	r2, [pc, #436]	; (800aaec <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 800a938:	fa22 f303 	lsr.w	r3, r2, r3
 800a93c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a93e:	e01f      	b.n	800a980 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800a940:	4b69      	ldr	r3, [pc, #420]	; (800aae8 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800a942:	681b      	ldr	r3, [r3, #0]
 800a944:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a948:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a94c:	d106      	bne.n	800a95c <HAL_RCCEx_GetPeriphCLKFreq+0x108>
 800a94e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a950:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800a954:	d102      	bne.n	800a95c <HAL_RCCEx_GetPeriphCLKFreq+0x108>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800a956:	4b66      	ldr	r3, [pc, #408]	; (800aaf0 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 800a958:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a95a:	e011      	b.n	800a980 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800a95c:	4b62      	ldr	r3, [pc, #392]	; (800aae8 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800a95e:	681b      	ldr	r3, [r3, #0]
 800a960:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a964:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800a968:	d106      	bne.n	800a978 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
 800a96a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a96c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800a970:	d102      	bne.n	800a978 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800a972:	4b60      	ldr	r3, [pc, #384]	; (800aaf4 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 800a974:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a976:	e003      	b.n	800a980 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800a978:	2300      	movs	r3, #0
 800a97a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 800a97c:	f000 bce1 	b.w	800b342 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800a980:	f000 bcdf 	b.w	800b342 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SAI1CLKSOURCE_PIN): /* External clock is the clock source for SAI1 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800a984:	4b5c      	ldr	r3, [pc, #368]	; (800aaf8 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 800a986:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a988:	f000 bcdb 	b.w	800b342 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 800a98c:	2300      	movs	r3, #0
 800a98e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a990:	f000 bcd7 	b.w	800b342 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }

#if defined(SAI3)
  else if (PeriphClk == RCC_PERIPHCLK_SAI23)
 800a994:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a998:	f5a2 7100 	sub.w	r1, r2, #512	; 0x200
 800a99c:	430b      	orrs	r3, r1
 800a99e:	f040 80ad 	bne.w	800aafc <HAL_RCCEx_GetPeriphCLKFreq+0x2a8>
  {

    saiclocksource = __HAL_RCC_GET_SAI23_SOURCE();
 800a9a2:	4b51      	ldr	r3, [pc, #324]	; (800aae8 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800a9a4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a9a6:	f403 73e0 	and.w	r3, r3, #448	; 0x1c0
 800a9aa:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 800a9ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a9ae:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a9b2:	d056      	beq.n	800aa62 <HAL_RCCEx_GetPeriphCLKFreq+0x20e>
 800a9b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a9b6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a9ba:	f200 8090 	bhi.w	800aade <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 800a9be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a9c0:	2bc0      	cmp	r3, #192	; 0xc0
 800a9c2:	f000 8088 	beq.w	800aad6 <HAL_RCCEx_GetPeriphCLKFreq+0x282>
 800a9c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a9c8:	2bc0      	cmp	r3, #192	; 0xc0
 800a9ca:	f200 8088 	bhi.w	800aade <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 800a9ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a9d0:	2b80      	cmp	r3, #128	; 0x80
 800a9d2:	d032      	beq.n	800aa3a <HAL_RCCEx_GetPeriphCLKFreq+0x1e6>
 800a9d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a9d6:	2b80      	cmp	r3, #128	; 0x80
 800a9d8:	f200 8081 	bhi.w	800aade <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 800a9dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a9de:	2b00      	cmp	r3, #0
 800a9e0:	d003      	beq.n	800a9ea <HAL_RCCEx_GetPeriphCLKFreq+0x196>
 800a9e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a9e4:	2b40      	cmp	r3, #64	; 0x40
 800a9e6:	d014      	beq.n	800aa12 <HAL_RCCEx_GetPeriphCLKFreq+0x1be>
 800a9e8:	e079      	b.n	800aade <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
    {
      case RCC_SAI23CLKSOURCE_PLL: /* PLL1 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800a9ea:	4b3f      	ldr	r3, [pc, #252]	; (800aae8 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800a9ec:	681b      	ldr	r3, [r3, #0]
 800a9ee:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a9f2:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800a9f6:	d108      	bne.n	800aa0a <HAL_RCCEx_GetPeriphCLKFreq+0x1b6>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800a9f8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800a9fc:	4618      	mov	r0, r3
 800a9fe:	f000 ff67 	bl	800b8d0 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800aa02:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aa04:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800aa06:	f000 bc9c 	b.w	800b342 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800aa0a:	2300      	movs	r3, #0
 800aa0c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800aa0e:	f000 bc98 	b.w	800b342 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800aa12:	4b35      	ldr	r3, [pc, #212]	; (800aae8 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800aa14:	681b      	ldr	r3, [r3, #0]
 800aa16:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800aa1a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800aa1e:	d108      	bne.n	800aa32 <HAL_RCCEx_GetPeriphCLKFreq+0x1de>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800aa20:	f107 0318 	add.w	r3, r7, #24
 800aa24:	4618      	mov	r0, r3
 800aa26:	f000 fcab 	bl	800b380 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800aa2a:	69bb      	ldr	r3, [r7, #24]
 800aa2c:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800aa2e:	f000 bc88 	b.w	800b342 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800aa32:	2300      	movs	r3, #0
 800aa34:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800aa36:	f000 bc84 	b.w	800b342 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI23CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800aa3a:	4b2b      	ldr	r3, [pc, #172]	; (800aae8 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800aa3c:	681b      	ldr	r3, [r3, #0]
 800aa3e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800aa42:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800aa46:	d108      	bne.n	800aa5a <HAL_RCCEx_GetPeriphCLKFreq+0x206>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800aa48:	f107 030c 	add.w	r3, r7, #12
 800aa4c:	4618      	mov	r0, r3
 800aa4e:	f000 fdeb 	bl	800b628 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800aa52:	68fb      	ldr	r3, [r7, #12]
 800aa54:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800aa56:	f000 bc74 	b.w	800b342 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800aa5a:	2300      	movs	r3, #0
 800aa5c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800aa5e:	f000 bc70 	b.w	800b342 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI23CLKSOURCE_CLKP: /* CKPER is the clock source for SAI2/3 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800aa62:	4b21      	ldr	r3, [pc, #132]	; (800aae8 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800aa64:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800aa66:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800aa6a:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800aa6c:	4b1e      	ldr	r3, [pc, #120]	; (800aae8 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800aa6e:	681b      	ldr	r3, [r3, #0]
 800aa70:	f003 0304 	and.w	r3, r3, #4
 800aa74:	2b04      	cmp	r3, #4
 800aa76:	d10c      	bne.n	800aa92 <HAL_RCCEx_GetPeriphCLKFreq+0x23e>
 800aa78:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800aa7a:	2b00      	cmp	r3, #0
 800aa7c:	d109      	bne.n	800aa92 <HAL_RCCEx_GetPeriphCLKFreq+0x23e>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800aa7e:	4b1a      	ldr	r3, [pc, #104]	; (800aae8 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800aa80:	681b      	ldr	r3, [r3, #0]
 800aa82:	08db      	lsrs	r3, r3, #3
 800aa84:	f003 0303 	and.w	r3, r3, #3
 800aa88:	4a18      	ldr	r2, [pc, #96]	; (800aaec <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 800aa8a:	fa22 f303 	lsr.w	r3, r2, r3
 800aa8e:	63fb      	str	r3, [r7, #60]	; 0x3c
 800aa90:	e01f      	b.n	800aad2 <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800aa92:	4b15      	ldr	r3, [pc, #84]	; (800aae8 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800aa94:	681b      	ldr	r3, [r3, #0]
 800aa96:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800aa9a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800aa9e:	d106      	bne.n	800aaae <HAL_RCCEx_GetPeriphCLKFreq+0x25a>
 800aaa0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800aaa2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800aaa6:	d102      	bne.n	800aaae <HAL_RCCEx_GetPeriphCLKFreq+0x25a>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800aaa8:	4b11      	ldr	r3, [pc, #68]	; (800aaf0 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 800aaaa:	63fb      	str	r3, [r7, #60]	; 0x3c
 800aaac:	e011      	b.n	800aad2 <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800aaae:	4b0e      	ldr	r3, [pc, #56]	; (800aae8 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800aab0:	681b      	ldr	r3, [r3, #0]
 800aab2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800aab6:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800aaba:	d106      	bne.n	800aaca <HAL_RCCEx_GetPeriphCLKFreq+0x276>
 800aabc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800aabe:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800aac2:	d102      	bne.n	800aaca <HAL_RCCEx_GetPeriphCLKFreq+0x276>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800aac4:	4b0b      	ldr	r3, [pc, #44]	; (800aaf4 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 800aac6:	63fb      	str	r3, [r7, #60]	; 0x3c
 800aac8:	e003      	b.n	800aad2 <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800aaca:	2300      	movs	r3, #0
 800aacc:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 800aace:	f000 bc38 	b.w	800b342 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800aad2:	f000 bc36 	b.w	800b342 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SAI23CLKSOURCE_PIN): /* External clock is the clock source for SAI2/3 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800aad6:	4b08      	ldr	r3, [pc, #32]	; (800aaf8 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 800aad8:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800aada:	f000 bc32 	b.w	800b342 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 800aade:	2300      	movs	r3, #0
 800aae0:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800aae2:	f000 bc2e 	b.w	800b342 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800aae6:	bf00      	nop
 800aae8:	58024400 	.word	0x58024400
 800aaec:	03d09000 	.word	0x03d09000
 800aaf0:	003d0900 	.word	0x003d0900
 800aaf4:	017d7840 	.word	0x017d7840
 800aaf8:	00bb8000 	.word	0x00bb8000
    }
  }
#endif

#if defined(SAI4)
  else if (PeriphClk == RCC_PERIPHCLK_SAI4A)
 800aafc:	e9d7 2300 	ldrd	r2, r3, [r7]
 800ab00:	f5a2 6180 	sub.w	r1, r2, #1024	; 0x400
 800ab04:	430b      	orrs	r3, r1
 800ab06:	f040 809c 	bne.w	800ac42 <HAL_RCCEx_GetPeriphCLKFreq+0x3ee>
  {

    saiclocksource = __HAL_RCC_GET_SAI4A_SOURCE();
 800ab0a:	4b9e      	ldr	r3, [pc, #632]	; (800ad84 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800ab0c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ab0e:	f403 0360 	and.w	r3, r3, #14680064	; 0xe00000
 800ab12:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 800ab14:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ab16:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800ab1a:	d054      	beq.n	800abc6 <HAL_RCCEx_GetPeriphCLKFreq+0x372>
 800ab1c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ab1e:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800ab22:	f200 808b 	bhi.w	800ac3c <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 800ab26:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ab28:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800ab2c:	f000 8083 	beq.w	800ac36 <HAL_RCCEx_GetPeriphCLKFreq+0x3e2>
 800ab30:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ab32:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800ab36:	f200 8081 	bhi.w	800ac3c <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 800ab3a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ab3c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800ab40:	d02f      	beq.n	800aba2 <HAL_RCCEx_GetPeriphCLKFreq+0x34e>
 800ab42:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ab44:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800ab48:	d878      	bhi.n	800ac3c <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 800ab4a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ab4c:	2b00      	cmp	r3, #0
 800ab4e:	d004      	beq.n	800ab5a <HAL_RCCEx_GetPeriphCLKFreq+0x306>
 800ab50:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ab52:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800ab56:	d012      	beq.n	800ab7e <HAL_RCCEx_GetPeriphCLKFreq+0x32a>
 800ab58:	e070      	b.n	800ac3c <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
    {
      case RCC_SAI4ACLKSOURCE_PLL: /* PLL1 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800ab5a:	4b8a      	ldr	r3, [pc, #552]	; (800ad84 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800ab5c:	681b      	ldr	r3, [r3, #0]
 800ab5e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800ab62:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800ab66:	d107      	bne.n	800ab78 <HAL_RCCEx_GetPeriphCLKFreq+0x324>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800ab68:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800ab6c:	4618      	mov	r0, r3
 800ab6e:	f000 feaf 	bl	800b8d0 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800ab72:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ab74:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800ab76:	e3e4      	b.n	800b342 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800ab78:	2300      	movs	r3, #0
 800ab7a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800ab7c:	e3e1      	b.n	800b342 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI4ACLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800ab7e:	4b81      	ldr	r3, [pc, #516]	; (800ad84 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800ab80:	681b      	ldr	r3, [r3, #0]
 800ab82:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800ab86:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800ab8a:	d107      	bne.n	800ab9c <HAL_RCCEx_GetPeriphCLKFreq+0x348>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800ab8c:	f107 0318 	add.w	r3, r7, #24
 800ab90:	4618      	mov	r0, r3
 800ab92:	f000 fbf5 	bl	800b380 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800ab96:	69bb      	ldr	r3, [r7, #24]
 800ab98:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800ab9a:	e3d2      	b.n	800b342 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800ab9c:	2300      	movs	r3, #0
 800ab9e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800aba0:	e3cf      	b.n	800b342 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800aba2:	4b78      	ldr	r3, [pc, #480]	; (800ad84 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800aba4:	681b      	ldr	r3, [r3, #0]
 800aba6:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800abaa:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800abae:	d107      	bne.n	800abc0 <HAL_RCCEx_GetPeriphCLKFreq+0x36c>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800abb0:	f107 030c 	add.w	r3, r7, #12
 800abb4:	4618      	mov	r0, r3
 800abb6:	f000 fd37 	bl	800b628 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800abba:	68fb      	ldr	r3, [r7, #12]
 800abbc:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800abbe:	e3c0      	b.n	800b342 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800abc0:	2300      	movs	r3, #0
 800abc2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800abc4:	e3bd      	b.n	800b342 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_CLKP: /* CKPER is the clock source for SAI4A*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800abc6:	4b6f      	ldr	r3, [pc, #444]	; (800ad84 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800abc8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800abca:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800abce:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800abd0:	4b6c      	ldr	r3, [pc, #432]	; (800ad84 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800abd2:	681b      	ldr	r3, [r3, #0]
 800abd4:	f003 0304 	and.w	r3, r3, #4
 800abd8:	2b04      	cmp	r3, #4
 800abda:	d10c      	bne.n	800abf6 <HAL_RCCEx_GetPeriphCLKFreq+0x3a2>
 800abdc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800abde:	2b00      	cmp	r3, #0
 800abe0:	d109      	bne.n	800abf6 <HAL_RCCEx_GetPeriphCLKFreq+0x3a2>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800abe2:	4b68      	ldr	r3, [pc, #416]	; (800ad84 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800abe4:	681b      	ldr	r3, [r3, #0]
 800abe6:	08db      	lsrs	r3, r3, #3
 800abe8:	f003 0303 	and.w	r3, r3, #3
 800abec:	4a66      	ldr	r2, [pc, #408]	; (800ad88 <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 800abee:	fa22 f303 	lsr.w	r3, r2, r3
 800abf2:	63fb      	str	r3, [r7, #60]	; 0x3c
 800abf4:	e01e      	b.n	800ac34 <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800abf6:	4b63      	ldr	r3, [pc, #396]	; (800ad84 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800abf8:	681b      	ldr	r3, [r3, #0]
 800abfa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800abfe:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800ac02:	d106      	bne.n	800ac12 <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
 800ac04:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ac06:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800ac0a:	d102      	bne.n	800ac12 <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800ac0c:	4b5f      	ldr	r3, [pc, #380]	; (800ad8c <HAL_RCCEx_GetPeriphCLKFreq+0x538>)
 800ac0e:	63fb      	str	r3, [r7, #60]	; 0x3c
 800ac10:	e010      	b.n	800ac34 <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800ac12:	4b5c      	ldr	r3, [pc, #368]	; (800ad84 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800ac14:	681b      	ldr	r3, [r3, #0]
 800ac16:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800ac1a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800ac1e:	d106      	bne.n	800ac2e <HAL_RCCEx_GetPeriphCLKFreq+0x3da>
 800ac20:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ac22:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800ac26:	d102      	bne.n	800ac2e <HAL_RCCEx_GetPeriphCLKFreq+0x3da>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800ac28:	4b59      	ldr	r3, [pc, #356]	; (800ad90 <HAL_RCCEx_GetPeriphCLKFreq+0x53c>)
 800ac2a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800ac2c:	e002      	b.n	800ac34 <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800ac2e:	2300      	movs	r3, #0
 800ac30:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 800ac32:	e386      	b.n	800b342 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800ac34:	e385      	b.n	800b342 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_PIN: /* External clock is the clock source for SAI4A */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800ac36:	4b57      	ldr	r3, [pc, #348]	; (800ad94 <HAL_RCCEx_GetPeriphCLKFreq+0x540>)
 800ac38:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800ac3a:	e382      	b.n	800b342 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 800ac3c:	2300      	movs	r3, #0
 800ac3e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800ac40:	e37f      	b.n	800b342 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }

  else if (PeriphClk == RCC_PERIPHCLK_SAI4B)
 800ac42:	e9d7 2300 	ldrd	r2, r3, [r7]
 800ac46:	f5a2 6100 	sub.w	r1, r2, #2048	; 0x800
 800ac4a:	430b      	orrs	r3, r1
 800ac4c:	f040 80a7 	bne.w	800ad9e <HAL_RCCEx_GetPeriphCLKFreq+0x54a>
  {

    saiclocksource = __HAL_RCC_GET_SAI4B_SOURCE();
 800ac50:	4b4c      	ldr	r3, [pc, #304]	; (800ad84 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800ac52:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ac54:	f003 63e0 	and.w	r3, r3, #117440512	; 0x7000000
 800ac58:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 800ac5a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ac5c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800ac60:	d055      	beq.n	800ad0e <HAL_RCCEx_GetPeriphCLKFreq+0x4ba>
 800ac62:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ac64:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800ac68:	f200 8096 	bhi.w	800ad98 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 800ac6c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ac6e:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800ac72:	f000 8084 	beq.w	800ad7e <HAL_RCCEx_GetPeriphCLKFreq+0x52a>
 800ac76:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ac78:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800ac7c:	f200 808c 	bhi.w	800ad98 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 800ac80:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ac82:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800ac86:	d030      	beq.n	800acea <HAL_RCCEx_GetPeriphCLKFreq+0x496>
 800ac88:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ac8a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800ac8e:	f200 8083 	bhi.w	800ad98 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 800ac92:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ac94:	2b00      	cmp	r3, #0
 800ac96:	d004      	beq.n	800aca2 <HAL_RCCEx_GetPeriphCLKFreq+0x44e>
 800ac98:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ac9a:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800ac9e:	d012      	beq.n	800acc6 <HAL_RCCEx_GetPeriphCLKFreq+0x472>
 800aca0:	e07a      	b.n	800ad98 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
    {
      case RCC_SAI4BCLKSOURCE_PLL: /* PLL1 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800aca2:	4b38      	ldr	r3, [pc, #224]	; (800ad84 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800aca4:	681b      	ldr	r3, [r3, #0]
 800aca6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800acaa:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800acae:	d107      	bne.n	800acc0 <HAL_RCCEx_GetPeriphCLKFreq+0x46c>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800acb0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800acb4:	4618      	mov	r0, r3
 800acb6:	f000 fe0b 	bl	800b8d0 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800acba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800acbc:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800acbe:	e340      	b.n	800b342 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800acc0:	2300      	movs	r3, #0
 800acc2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800acc4:	e33d      	b.n	800b342 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI4BCLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800acc6:	4b2f      	ldr	r3, [pc, #188]	; (800ad84 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800acc8:	681b      	ldr	r3, [r3, #0]
 800acca:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800acce:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800acd2:	d107      	bne.n	800ace4 <HAL_RCCEx_GetPeriphCLKFreq+0x490>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800acd4:	f107 0318 	add.w	r3, r7, #24
 800acd8:	4618      	mov	r0, r3
 800acda:	f000 fb51 	bl	800b380 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800acde:	69bb      	ldr	r3, [r7, #24]
 800ace0:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800ace2:	e32e      	b.n	800b342 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800ace4:	2300      	movs	r3, #0
 800ace6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800ace8:	e32b      	b.n	800b342 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800acea:	4b26      	ldr	r3, [pc, #152]	; (800ad84 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800acec:	681b      	ldr	r3, [r3, #0]
 800acee:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800acf2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800acf6:	d107      	bne.n	800ad08 <HAL_RCCEx_GetPeriphCLKFreq+0x4b4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800acf8:	f107 030c 	add.w	r3, r7, #12
 800acfc:	4618      	mov	r0, r3
 800acfe:	f000 fc93 	bl	800b628 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800ad02:	68fb      	ldr	r3, [r7, #12]
 800ad04:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800ad06:	e31c      	b.n	800b342 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800ad08:	2300      	movs	r3, #0
 800ad0a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800ad0c:	e319      	b.n	800b342 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_CLKP: /* CKPER is the clock source for SAI4B*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800ad0e:	4b1d      	ldr	r3, [pc, #116]	; (800ad84 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800ad10:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800ad12:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800ad16:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800ad18:	4b1a      	ldr	r3, [pc, #104]	; (800ad84 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800ad1a:	681b      	ldr	r3, [r3, #0]
 800ad1c:	f003 0304 	and.w	r3, r3, #4
 800ad20:	2b04      	cmp	r3, #4
 800ad22:	d10c      	bne.n	800ad3e <HAL_RCCEx_GetPeriphCLKFreq+0x4ea>
 800ad24:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ad26:	2b00      	cmp	r3, #0
 800ad28:	d109      	bne.n	800ad3e <HAL_RCCEx_GetPeriphCLKFreq+0x4ea>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800ad2a:	4b16      	ldr	r3, [pc, #88]	; (800ad84 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800ad2c:	681b      	ldr	r3, [r3, #0]
 800ad2e:	08db      	lsrs	r3, r3, #3
 800ad30:	f003 0303 	and.w	r3, r3, #3
 800ad34:	4a14      	ldr	r2, [pc, #80]	; (800ad88 <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 800ad36:	fa22 f303 	lsr.w	r3, r2, r3
 800ad3a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800ad3c:	e01e      	b.n	800ad7c <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800ad3e:	4b11      	ldr	r3, [pc, #68]	; (800ad84 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800ad40:	681b      	ldr	r3, [r3, #0]
 800ad42:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800ad46:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800ad4a:	d106      	bne.n	800ad5a <HAL_RCCEx_GetPeriphCLKFreq+0x506>
 800ad4c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ad4e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800ad52:	d102      	bne.n	800ad5a <HAL_RCCEx_GetPeriphCLKFreq+0x506>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800ad54:	4b0d      	ldr	r3, [pc, #52]	; (800ad8c <HAL_RCCEx_GetPeriphCLKFreq+0x538>)
 800ad56:	63fb      	str	r3, [r7, #60]	; 0x3c
 800ad58:	e010      	b.n	800ad7c <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800ad5a:	4b0a      	ldr	r3, [pc, #40]	; (800ad84 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800ad5c:	681b      	ldr	r3, [r3, #0]
 800ad5e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800ad62:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800ad66:	d106      	bne.n	800ad76 <HAL_RCCEx_GetPeriphCLKFreq+0x522>
 800ad68:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ad6a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800ad6e:	d102      	bne.n	800ad76 <HAL_RCCEx_GetPeriphCLKFreq+0x522>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800ad70:	4b07      	ldr	r3, [pc, #28]	; (800ad90 <HAL_RCCEx_GetPeriphCLKFreq+0x53c>)
 800ad72:	63fb      	str	r3, [r7, #60]	; 0x3c
 800ad74:	e002      	b.n	800ad7c <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800ad76:	2300      	movs	r3, #0
 800ad78:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 800ad7a:	e2e2      	b.n	800b342 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800ad7c:	e2e1      	b.n	800b342 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_PIN: /* External clock is the clock source for SAI4B */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800ad7e:	4b05      	ldr	r3, [pc, #20]	; (800ad94 <HAL_RCCEx_GetPeriphCLKFreq+0x540>)
 800ad80:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800ad82:	e2de      	b.n	800b342 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800ad84:	58024400 	.word	0x58024400
 800ad88:	03d09000 	.word	0x03d09000
 800ad8c:	003d0900 	.word	0x003d0900
 800ad90:	017d7840 	.word	0x017d7840
 800ad94:	00bb8000 	.word	0x00bb8000
      }

      default :
      {
        frequency = 0;
 800ad98:	2300      	movs	r3, #0
 800ad9a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800ad9c:	e2d1      	b.n	800b342 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
#endif /*SAI4*/
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 800ad9e:	e9d7 2300 	ldrd	r2, r3, [r7]
 800ada2:	f5a2 5180 	sub.w	r1, r2, #4096	; 0x1000
 800ada6:	430b      	orrs	r3, r1
 800ada8:	f040 809c 	bne.w	800aee4 <HAL_RCCEx_GetPeriphCLKFreq+0x690>
  {
    /* Get SPI1/2/3 clock source */
    srcclk = __HAL_RCC_GET_SPI123_SOURCE();
 800adac:	4b93      	ldr	r3, [pc, #588]	; (800affc <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800adae:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800adb0:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 800adb4:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 800adb6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800adb8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800adbc:	d054      	beq.n	800ae68 <HAL_RCCEx_GetPeriphCLKFreq+0x614>
 800adbe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800adc0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800adc4:	f200 808b 	bhi.w	800aede <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 800adc8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800adca:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800adce:	f000 8083 	beq.w	800aed8 <HAL_RCCEx_GetPeriphCLKFreq+0x684>
 800add2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800add4:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800add8:	f200 8081 	bhi.w	800aede <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 800addc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800adde:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800ade2:	d02f      	beq.n	800ae44 <HAL_RCCEx_GetPeriphCLKFreq+0x5f0>
 800ade4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ade6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800adea:	d878      	bhi.n	800aede <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 800adec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800adee:	2b00      	cmp	r3, #0
 800adf0:	d004      	beq.n	800adfc <HAL_RCCEx_GetPeriphCLKFreq+0x5a8>
 800adf2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800adf4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800adf8:	d012      	beq.n	800ae20 <HAL_RCCEx_GetPeriphCLKFreq+0x5cc>
 800adfa:	e070      	b.n	800aede <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
    {
      case RCC_SPI123CLKSOURCE_PLL: /* PLL1 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800adfc:	4b7f      	ldr	r3, [pc, #508]	; (800affc <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800adfe:	681b      	ldr	r3, [r3, #0]
 800ae00:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800ae04:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800ae08:	d107      	bne.n	800ae1a <HAL_RCCEx_GetPeriphCLKFreq+0x5c6>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800ae0a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800ae0e:	4618      	mov	r0, r3
 800ae10:	f000 fd5e 	bl	800b8d0 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800ae14:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ae16:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800ae18:	e293      	b.n	800b342 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800ae1a:	2300      	movs	r3, #0
 800ae1c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800ae1e:	e290      	b.n	800b342 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800ae20:	4b76      	ldr	r3, [pc, #472]	; (800affc <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800ae22:	681b      	ldr	r3, [r3, #0]
 800ae24:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800ae28:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800ae2c:	d107      	bne.n	800ae3e <HAL_RCCEx_GetPeriphCLKFreq+0x5ea>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800ae2e:	f107 0318 	add.w	r3, r7, #24
 800ae32:	4618      	mov	r0, r3
 800ae34:	f000 faa4 	bl	800b380 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800ae38:	69bb      	ldr	r3, [r7, #24]
 800ae3a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800ae3c:	e281      	b.n	800b342 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800ae3e:	2300      	movs	r3, #0
 800ae40:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800ae42:	e27e      	b.n	800b342 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SPI123CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800ae44:	4b6d      	ldr	r3, [pc, #436]	; (800affc <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800ae46:	681b      	ldr	r3, [r3, #0]
 800ae48:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800ae4c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800ae50:	d107      	bne.n	800ae62 <HAL_RCCEx_GetPeriphCLKFreq+0x60e>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800ae52:	f107 030c 	add.w	r3, r7, #12
 800ae56:	4618      	mov	r0, r3
 800ae58:	f000 fbe6 	bl	800b628 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800ae5c:	68fb      	ldr	r3, [r7, #12]
 800ae5e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800ae60:	e26f      	b.n	800b342 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800ae62:	2300      	movs	r3, #0
 800ae64:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800ae66:	e26c      	b.n	800b342 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SPI123CLKSOURCE_CLKP: /* CKPER is the clock source for SPI123 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800ae68:	4b64      	ldr	r3, [pc, #400]	; (800affc <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800ae6a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800ae6c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800ae70:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800ae72:	4b62      	ldr	r3, [pc, #392]	; (800affc <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800ae74:	681b      	ldr	r3, [r3, #0]
 800ae76:	f003 0304 	and.w	r3, r3, #4
 800ae7a:	2b04      	cmp	r3, #4
 800ae7c:	d10c      	bne.n	800ae98 <HAL_RCCEx_GetPeriphCLKFreq+0x644>
 800ae7e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ae80:	2b00      	cmp	r3, #0
 800ae82:	d109      	bne.n	800ae98 <HAL_RCCEx_GetPeriphCLKFreq+0x644>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800ae84:	4b5d      	ldr	r3, [pc, #372]	; (800affc <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800ae86:	681b      	ldr	r3, [r3, #0]
 800ae88:	08db      	lsrs	r3, r3, #3
 800ae8a:	f003 0303 	and.w	r3, r3, #3
 800ae8e:	4a5c      	ldr	r2, [pc, #368]	; (800b000 <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>)
 800ae90:	fa22 f303 	lsr.w	r3, r2, r3
 800ae94:	63fb      	str	r3, [r7, #60]	; 0x3c
 800ae96:	e01e      	b.n	800aed6 <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800ae98:	4b58      	ldr	r3, [pc, #352]	; (800affc <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800ae9a:	681b      	ldr	r3, [r3, #0]
 800ae9c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800aea0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800aea4:	d106      	bne.n	800aeb4 <HAL_RCCEx_GetPeriphCLKFreq+0x660>
 800aea6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800aea8:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800aeac:	d102      	bne.n	800aeb4 <HAL_RCCEx_GetPeriphCLKFreq+0x660>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800aeae:	4b55      	ldr	r3, [pc, #340]	; (800b004 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 800aeb0:	63fb      	str	r3, [r7, #60]	; 0x3c
 800aeb2:	e010      	b.n	800aed6 <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800aeb4:	4b51      	ldr	r3, [pc, #324]	; (800affc <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800aeb6:	681b      	ldr	r3, [r3, #0]
 800aeb8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800aebc:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800aec0:	d106      	bne.n	800aed0 <HAL_RCCEx_GetPeriphCLKFreq+0x67c>
 800aec2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800aec4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800aec8:	d102      	bne.n	800aed0 <HAL_RCCEx_GetPeriphCLKFreq+0x67c>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800aeca:	4b4f      	ldr	r3, [pc, #316]	; (800b008 <HAL_RCCEx_GetPeriphCLKFreq+0x7b4>)
 800aecc:	63fb      	str	r3, [r7, #60]	; 0x3c
 800aece:	e002      	b.n	800aed6 <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800aed0:	2300      	movs	r3, #0
 800aed2:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 800aed4:	e235      	b.n	800b342 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800aed6:	e234      	b.n	800b342 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SPI123CLKSOURCE_PIN): /* External clock is the clock source for I2S */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800aed8:	4b4c      	ldr	r3, [pc, #304]	; (800b00c <HAL_RCCEx_GetPeriphCLKFreq+0x7b8>)
 800aeda:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800aedc:	e231      	b.n	800b342 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 800aede:	2300      	movs	r3, #0
 800aee0:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800aee2:	e22e      	b.n	800b342 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI45)
 800aee4:	e9d7 2300 	ldrd	r2, r3, [r7]
 800aee8:	f5a2 5100 	sub.w	r1, r2, #8192	; 0x2000
 800aeec:	430b      	orrs	r3, r1
 800aeee:	f040 808f 	bne.w	800b010 <HAL_RCCEx_GetPeriphCLKFreq+0x7bc>
  {
    /* Get SPI45 clock source */
    srcclk = __HAL_RCC_GET_SPI45_SOURCE();
 800aef2:	4b42      	ldr	r3, [pc, #264]	; (800affc <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800aef4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800aef6:	f403 23e0 	and.w	r3, r3, #458752	; 0x70000
 800aefa:	63bb      	str	r3, [r7, #56]	; 0x38
    switch (srcclk)
 800aefc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800aefe:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800af02:	d06b      	beq.n	800afdc <HAL_RCCEx_GetPeriphCLKFreq+0x788>
 800af04:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800af06:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800af0a:	d874      	bhi.n	800aff6 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 800af0c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800af0e:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800af12:	d056      	beq.n	800afc2 <HAL_RCCEx_GetPeriphCLKFreq+0x76e>
 800af14:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800af16:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800af1a:	d86c      	bhi.n	800aff6 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 800af1c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800af1e:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800af22:	d03b      	beq.n	800af9c <HAL_RCCEx_GetPeriphCLKFreq+0x748>
 800af24:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800af26:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800af2a:	d864      	bhi.n	800aff6 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 800af2c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800af2e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800af32:	d021      	beq.n	800af78 <HAL_RCCEx_GetPeriphCLKFreq+0x724>
 800af34:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800af36:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800af3a:	d85c      	bhi.n	800aff6 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 800af3c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800af3e:	2b00      	cmp	r3, #0
 800af40:	d004      	beq.n	800af4c <HAL_RCCEx_GetPeriphCLKFreq+0x6f8>
 800af42:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800af44:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800af48:	d004      	beq.n	800af54 <HAL_RCCEx_GetPeriphCLKFreq+0x700>
 800af4a:	e054      	b.n	800aff6 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
    {
      case RCC_SPI45CLKSOURCE_PCLK2: /* CD/D2 PCLK2 is the clock source for SPI4/5 */
      {
        frequency = HAL_RCC_GetPCLK1Freq();
 800af4c:	f7fe fa0c 	bl	8009368 <HAL_RCC_GetPCLK1Freq>
 800af50:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800af52:	e1f6      	b.n	800b342 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800af54:	4b29      	ldr	r3, [pc, #164]	; (800affc <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800af56:	681b      	ldr	r3, [r3, #0]
 800af58:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800af5c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800af60:	d107      	bne.n	800af72 <HAL_RCCEx_GetPeriphCLKFreq+0x71e>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800af62:	f107 0318 	add.w	r3, r7, #24
 800af66:	4618      	mov	r0, r3
 800af68:	f000 fa0a 	bl	800b380 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800af6c:	69fb      	ldr	r3, [r7, #28]
 800af6e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800af70:	e1e7      	b.n	800b342 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800af72:	2300      	movs	r3, #0
 800af74:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800af76:	e1e4      	b.n	800b342 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800af78:	4b20      	ldr	r3, [pc, #128]	; (800affc <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800af7a:	681b      	ldr	r3, [r3, #0]
 800af7c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800af80:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800af84:	d107      	bne.n	800af96 <HAL_RCCEx_GetPeriphCLKFreq+0x742>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800af86:	f107 030c 	add.w	r3, r7, #12
 800af8a:	4618      	mov	r0, r3
 800af8c:	f000 fb4c 	bl	800b628 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800af90:	693b      	ldr	r3, [r7, #16]
 800af92:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800af94:	e1d5      	b.n	800b342 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800af96:	2300      	movs	r3, #0
 800af98:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800af9a:	e1d2      	b.n	800b342 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_HSI: /* HSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800af9c:	4b17      	ldr	r3, [pc, #92]	; (800affc <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800af9e:	681b      	ldr	r3, [r3, #0]
 800afa0:	f003 0304 	and.w	r3, r3, #4
 800afa4:	2b04      	cmp	r3, #4
 800afa6:	d109      	bne.n	800afbc <HAL_RCCEx_GetPeriphCLKFreq+0x768>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800afa8:	4b14      	ldr	r3, [pc, #80]	; (800affc <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800afaa:	681b      	ldr	r3, [r3, #0]
 800afac:	08db      	lsrs	r3, r3, #3
 800afae:	f003 0303 	and.w	r3, r3, #3
 800afb2:	4a13      	ldr	r2, [pc, #76]	; (800b000 <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>)
 800afb4:	fa22 f303 	lsr.w	r3, r2, r3
 800afb8:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800afba:	e1c2      	b.n	800b342 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800afbc:	2300      	movs	r3, #0
 800afbe:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800afc0:	e1bf      	b.n	800b342 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_CSI: /* CSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 800afc2:	4b0e      	ldr	r3, [pc, #56]	; (800affc <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800afc4:	681b      	ldr	r3, [r3, #0]
 800afc6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800afca:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800afce:	d102      	bne.n	800afd6 <HAL_RCCEx_GetPeriphCLKFreq+0x782>
        {
          frequency = CSI_VALUE;
 800afd0:	4b0c      	ldr	r3, [pc, #48]	; (800b004 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 800afd2:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800afd4:	e1b5      	b.n	800b342 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800afd6:	2300      	movs	r3, #0
 800afd8:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800afda:	e1b2      	b.n	800b342 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_HSE: /* HSE is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800afdc:	4b07      	ldr	r3, [pc, #28]	; (800affc <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800afde:	681b      	ldr	r3, [r3, #0]
 800afe0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800afe4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800afe8:	d102      	bne.n	800aff0 <HAL_RCCEx_GetPeriphCLKFreq+0x79c>
        {
          frequency = HSE_VALUE;
 800afea:	4b07      	ldr	r3, [pc, #28]	; (800b008 <HAL_RCCEx_GetPeriphCLKFreq+0x7b4>)
 800afec:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800afee:	e1a8      	b.n	800b342 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800aff0:	2300      	movs	r3, #0
 800aff2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800aff4:	e1a5      	b.n	800b342 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 800aff6:	2300      	movs	r3, #0
 800aff8:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800affa:	e1a2      	b.n	800b342 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800affc:	58024400 	.word	0x58024400
 800b000:	03d09000 	.word	0x03d09000
 800b004:	003d0900 	.word	0x003d0900
 800b008:	017d7840 	.word	0x017d7840
 800b00c:	00bb8000 	.word	0x00bb8000
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 800b010:	e9d7 2300 	ldrd	r2, r3, [r7]
 800b014:	f5a2 2100 	sub.w	r1, r2, #524288	; 0x80000
 800b018:	430b      	orrs	r3, r1
 800b01a:	d173      	bne.n	800b104 <HAL_RCCEx_GetPeriphCLKFreq+0x8b0>
  {
    /* Get ADC clock source */
    srcclk = __HAL_RCC_GET_ADC_SOURCE();
 800b01c:	4b9c      	ldr	r3, [pc, #624]	; (800b290 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800b01e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b020:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800b024:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 800b026:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b028:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800b02c:	d02f      	beq.n	800b08e <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
 800b02e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b030:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800b034:	d863      	bhi.n	800b0fe <HAL_RCCEx_GetPeriphCLKFreq+0x8aa>
 800b036:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b038:	2b00      	cmp	r3, #0
 800b03a:	d004      	beq.n	800b046 <HAL_RCCEx_GetPeriphCLKFreq+0x7f2>
 800b03c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b03e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b042:	d012      	beq.n	800b06a <HAL_RCCEx_GetPeriphCLKFreq+0x816>
 800b044:	e05b      	b.n	800b0fe <HAL_RCCEx_GetPeriphCLKFreq+0x8aa>
    {
      case RCC_ADCCLKSOURCE_PLL2:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800b046:	4b92      	ldr	r3, [pc, #584]	; (800b290 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800b048:	681b      	ldr	r3, [r3, #0]
 800b04a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800b04e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800b052:	d107      	bne.n	800b064 <HAL_RCCEx_GetPeriphCLKFreq+0x810>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800b054:	f107 0318 	add.w	r3, r7, #24
 800b058:	4618      	mov	r0, r3
 800b05a:	f000 f991 	bl	800b380 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800b05e:	69bb      	ldr	r3, [r7, #24]
 800b060:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b062:	e16e      	b.n	800b342 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800b064:	2300      	movs	r3, #0
 800b066:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b068:	e16b      	b.n	800b342 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_ADCCLKSOURCE_PLL3:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800b06a:	4b89      	ldr	r3, [pc, #548]	; (800b290 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800b06c:	681b      	ldr	r3, [r3, #0]
 800b06e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800b072:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800b076:	d107      	bne.n	800b088 <HAL_RCCEx_GetPeriphCLKFreq+0x834>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800b078:	f107 030c 	add.w	r3, r7, #12
 800b07c:	4618      	mov	r0, r3
 800b07e:	f000 fad3 	bl	800b628 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 800b082:	697b      	ldr	r3, [r7, #20]
 800b084:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b086:	e15c      	b.n	800b342 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800b088:	2300      	movs	r3, #0
 800b08a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b08c:	e159      	b.n	800b342 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_ADCCLKSOURCE_CLKP:
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800b08e:	4b80      	ldr	r3, [pc, #512]	; (800b290 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800b090:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b092:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800b096:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800b098:	4b7d      	ldr	r3, [pc, #500]	; (800b290 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800b09a:	681b      	ldr	r3, [r3, #0]
 800b09c:	f003 0304 	and.w	r3, r3, #4
 800b0a0:	2b04      	cmp	r3, #4
 800b0a2:	d10c      	bne.n	800b0be <HAL_RCCEx_GetPeriphCLKFreq+0x86a>
 800b0a4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b0a6:	2b00      	cmp	r3, #0
 800b0a8:	d109      	bne.n	800b0be <HAL_RCCEx_GetPeriphCLKFreq+0x86a>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800b0aa:	4b79      	ldr	r3, [pc, #484]	; (800b290 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800b0ac:	681b      	ldr	r3, [r3, #0]
 800b0ae:	08db      	lsrs	r3, r3, #3
 800b0b0:	f003 0303 	and.w	r3, r3, #3
 800b0b4:	4a77      	ldr	r2, [pc, #476]	; (800b294 <HAL_RCCEx_GetPeriphCLKFreq+0xa40>)
 800b0b6:	fa22 f303 	lsr.w	r3, r2, r3
 800b0ba:	63fb      	str	r3, [r7, #60]	; 0x3c
 800b0bc:	e01e      	b.n	800b0fc <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800b0be:	4b74      	ldr	r3, [pc, #464]	; (800b290 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800b0c0:	681b      	ldr	r3, [r3, #0]
 800b0c2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b0c6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b0ca:	d106      	bne.n	800b0da <HAL_RCCEx_GetPeriphCLKFreq+0x886>
 800b0cc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b0ce:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800b0d2:	d102      	bne.n	800b0da <HAL_RCCEx_GetPeriphCLKFreq+0x886>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800b0d4:	4b70      	ldr	r3, [pc, #448]	; (800b298 <HAL_RCCEx_GetPeriphCLKFreq+0xa44>)
 800b0d6:	63fb      	str	r3, [r7, #60]	; 0x3c
 800b0d8:	e010      	b.n	800b0fc <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800b0da:	4b6d      	ldr	r3, [pc, #436]	; (800b290 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800b0dc:	681b      	ldr	r3, [r3, #0]
 800b0de:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800b0e2:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800b0e6:	d106      	bne.n	800b0f6 <HAL_RCCEx_GetPeriphCLKFreq+0x8a2>
 800b0e8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b0ea:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800b0ee:	d102      	bne.n	800b0f6 <HAL_RCCEx_GetPeriphCLKFreq+0x8a2>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800b0f0:	4b6a      	ldr	r3, [pc, #424]	; (800b29c <HAL_RCCEx_GetPeriphCLKFreq+0xa48>)
 800b0f2:	63fb      	str	r3, [r7, #60]	; 0x3c
 800b0f4:	e002      	b.n	800b0fc <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800b0f6:	2300      	movs	r3, #0
 800b0f8:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 800b0fa:	e122      	b.n	800b342 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800b0fc:	e121      	b.n	800b342 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 800b0fe:	2300      	movs	r3, #0
 800b100:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b102:	e11e      	b.n	800b342 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 800b104:	e9d7 2300 	ldrd	r2, r3, [r7]
 800b108:	f5a2 3180 	sub.w	r1, r2, #65536	; 0x10000
 800b10c:	430b      	orrs	r3, r1
 800b10e:	d133      	bne.n	800b178 <HAL_RCCEx_GetPeriphCLKFreq+0x924>
  {
    /* Get SDMMC clock source */
    srcclk = __HAL_RCC_GET_SDMMC_SOURCE();
 800b110:	4b5f      	ldr	r3, [pc, #380]	; (800b290 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800b112:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b114:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800b118:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 800b11a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b11c:	2b00      	cmp	r3, #0
 800b11e:	d004      	beq.n	800b12a <HAL_RCCEx_GetPeriphCLKFreq+0x8d6>
 800b120:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b122:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b126:	d012      	beq.n	800b14e <HAL_RCCEx_GetPeriphCLKFreq+0x8fa>
 800b128:	e023      	b.n	800b172 <HAL_RCCEx_GetPeriphCLKFreq+0x91e>
    {
      case RCC_SDMMCCLKSOURCE_PLL: /* PLL1 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800b12a:	4b59      	ldr	r3, [pc, #356]	; (800b290 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800b12c:	681b      	ldr	r3, [r3, #0]
 800b12e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800b132:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800b136:	d107      	bne.n	800b148 <HAL_RCCEx_GetPeriphCLKFreq+0x8f4>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800b138:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800b13c:	4618      	mov	r0, r3
 800b13e:	f000 fbc7 	bl	800b8d0 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800b142:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b144:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b146:	e0fc      	b.n	800b342 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800b148:	2300      	movs	r3, #0
 800b14a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b14c:	e0f9      	b.n	800b342 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800b14e:	4b50      	ldr	r3, [pc, #320]	; (800b290 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800b150:	681b      	ldr	r3, [r3, #0]
 800b152:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800b156:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800b15a:	d107      	bne.n	800b16c <HAL_RCCEx_GetPeriphCLKFreq+0x918>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800b15c:	f107 0318 	add.w	r3, r7, #24
 800b160:	4618      	mov	r0, r3
 800b162:	f000 f90d 	bl	800b380 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 800b166:	6a3b      	ldr	r3, [r7, #32]
 800b168:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b16a:	e0ea      	b.n	800b342 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800b16c:	2300      	movs	r3, #0
 800b16e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b170:	e0e7      	b.n	800b342 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 800b172:	2300      	movs	r3, #0
 800b174:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b176:	e0e4      	b.n	800b342 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 800b178:	e9d7 2300 	ldrd	r2, r3, [r7]
 800b17c:	f5a2 4180 	sub.w	r1, r2, #16384	; 0x4000
 800b180:	430b      	orrs	r3, r1
 800b182:	f040 808d 	bne.w	800b2a0 <HAL_RCCEx_GetPeriphCLKFreq+0xa4c>
  {
    /* Get SPI6 clock source */
    srcclk = __HAL_RCC_GET_SPI6_SOURCE();
 800b186:	4b42      	ldr	r3, [pc, #264]	; (800b290 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800b188:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b18a:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
 800b18e:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 800b190:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b192:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800b196:	d06b      	beq.n	800b270 <HAL_RCCEx_GetPeriphCLKFreq+0xa1c>
 800b198:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b19a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800b19e:	d874      	bhi.n	800b28a <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 800b1a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b1a2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b1a6:	d056      	beq.n	800b256 <HAL_RCCEx_GetPeriphCLKFreq+0xa02>
 800b1a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b1aa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b1ae:	d86c      	bhi.n	800b28a <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 800b1b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b1b2:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800b1b6:	d03b      	beq.n	800b230 <HAL_RCCEx_GetPeriphCLKFreq+0x9dc>
 800b1b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b1ba:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800b1be:	d864      	bhi.n	800b28a <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 800b1c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b1c2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800b1c6:	d021      	beq.n	800b20c <HAL_RCCEx_GetPeriphCLKFreq+0x9b8>
 800b1c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b1ca:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800b1ce:	d85c      	bhi.n	800b28a <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 800b1d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b1d2:	2b00      	cmp	r3, #0
 800b1d4:	d004      	beq.n	800b1e0 <HAL_RCCEx_GetPeriphCLKFreq+0x98c>
 800b1d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b1d8:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800b1dc:	d004      	beq.n	800b1e8 <HAL_RCCEx_GetPeriphCLKFreq+0x994>
 800b1de:	e054      	b.n	800b28a <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
    {
      case RCC_SPI6CLKSOURCE_D3PCLK1: /* D3PCLK1 (PCLK4) is the clock source for SPI6 */
      {
        frequency = HAL_RCCEx_GetD3PCLK1Freq();
 800b1e0:	f000 f8b8 	bl	800b354 <HAL_RCCEx_GetD3PCLK1Freq>
 800b1e4:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800b1e6:	e0ac      	b.n	800b342 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800b1e8:	4b29      	ldr	r3, [pc, #164]	; (800b290 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800b1ea:	681b      	ldr	r3, [r3, #0]
 800b1ec:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800b1f0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800b1f4:	d107      	bne.n	800b206 <HAL_RCCEx_GetPeriphCLKFreq+0x9b2>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800b1f6:	f107 0318 	add.w	r3, r7, #24
 800b1fa:	4618      	mov	r0, r3
 800b1fc:	f000 f8c0 	bl	800b380 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800b200:	69fb      	ldr	r3, [r7, #28]
 800b202:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b204:	e09d      	b.n	800b342 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800b206:	2300      	movs	r3, #0
 800b208:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b20a:	e09a      	b.n	800b342 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800b20c:	4b20      	ldr	r3, [pc, #128]	; (800b290 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800b20e:	681b      	ldr	r3, [r3, #0]
 800b210:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800b214:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800b218:	d107      	bne.n	800b22a <HAL_RCCEx_GetPeriphCLKFreq+0x9d6>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800b21a:	f107 030c 	add.w	r3, r7, #12
 800b21e:	4618      	mov	r0, r3
 800b220:	f000 fa02 	bl	800b628 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800b224:	693b      	ldr	r3, [r7, #16]
 800b226:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b228:	e08b      	b.n	800b342 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800b22a:	2300      	movs	r3, #0
 800b22c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b22e:	e088      	b.n	800b342 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_HSI: /* HSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800b230:	4b17      	ldr	r3, [pc, #92]	; (800b290 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800b232:	681b      	ldr	r3, [r3, #0]
 800b234:	f003 0304 	and.w	r3, r3, #4
 800b238:	2b04      	cmp	r3, #4
 800b23a:	d109      	bne.n	800b250 <HAL_RCCEx_GetPeriphCLKFreq+0x9fc>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800b23c:	4b14      	ldr	r3, [pc, #80]	; (800b290 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800b23e:	681b      	ldr	r3, [r3, #0]
 800b240:	08db      	lsrs	r3, r3, #3
 800b242:	f003 0303 	and.w	r3, r3, #3
 800b246:	4a13      	ldr	r2, [pc, #76]	; (800b294 <HAL_RCCEx_GetPeriphCLKFreq+0xa40>)
 800b248:	fa22 f303 	lsr.w	r3, r2, r3
 800b24c:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b24e:	e078      	b.n	800b342 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800b250:	2300      	movs	r3, #0
 800b252:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b254:	e075      	b.n	800b342 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_CSI: /* CSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 800b256:	4b0e      	ldr	r3, [pc, #56]	; (800b290 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800b258:	681b      	ldr	r3, [r3, #0]
 800b25a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b25e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b262:	d102      	bne.n	800b26a <HAL_RCCEx_GetPeriphCLKFreq+0xa16>
        {
          frequency = CSI_VALUE;
 800b264:	4b0c      	ldr	r3, [pc, #48]	; (800b298 <HAL_RCCEx_GetPeriphCLKFreq+0xa44>)
 800b266:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b268:	e06b      	b.n	800b342 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800b26a:	2300      	movs	r3, #0
 800b26c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b26e:	e068      	b.n	800b342 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_HSE: /* HSE is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800b270:	4b07      	ldr	r3, [pc, #28]	; (800b290 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800b272:	681b      	ldr	r3, [r3, #0]
 800b274:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800b278:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800b27c:	d102      	bne.n	800b284 <HAL_RCCEx_GetPeriphCLKFreq+0xa30>
        {
          frequency = HSE_VALUE;
 800b27e:	4b07      	ldr	r3, [pc, #28]	; (800b29c <HAL_RCCEx_GetPeriphCLKFreq+0xa48>)
 800b280:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b282:	e05e      	b.n	800b342 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800b284:	2300      	movs	r3, #0
 800b286:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b288:	e05b      	b.n	800b342 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
        break;
      }
#endif /* RCC_SPI6CLKSOURCE_PIN */
      default :
      {
        frequency = 0;
 800b28a:	2300      	movs	r3, #0
 800b28c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b28e:	e058      	b.n	800b342 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800b290:	58024400 	.word	0x58024400
 800b294:	03d09000 	.word	0x03d09000
 800b298:	003d0900 	.word	0x003d0900
 800b29c:	017d7840 	.word	0x017d7840
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN)
 800b2a0:	e9d7 2300 	ldrd	r2, r3, [r7]
 800b2a4:	f5a2 4100 	sub.w	r1, r2, #32768	; 0x8000
 800b2a8:	430b      	orrs	r3, r1
 800b2aa:	d148      	bne.n	800b33e <HAL_RCCEx_GetPeriphCLKFreq+0xaea>
  {
    /* Get FDCAN clock source */
    srcclk = __HAL_RCC_GET_FDCAN_SOURCE();
 800b2ac:	4b27      	ldr	r3, [pc, #156]	; (800b34c <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 800b2ae:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b2b0:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800b2b4:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 800b2b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b2b8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800b2bc:	d02a      	beq.n	800b314 <HAL_RCCEx_GetPeriphCLKFreq+0xac0>
 800b2be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b2c0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800b2c4:	d838      	bhi.n	800b338 <HAL_RCCEx_GetPeriphCLKFreq+0xae4>
 800b2c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b2c8:	2b00      	cmp	r3, #0
 800b2ca:	d004      	beq.n	800b2d6 <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
 800b2cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b2ce:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800b2d2:	d00d      	beq.n	800b2f0 <HAL_RCCEx_GetPeriphCLKFreq+0xa9c>
 800b2d4:	e030      	b.n	800b338 <HAL_RCCEx_GetPeriphCLKFreq+0xae4>
    {
      case RCC_FDCANCLKSOURCE_HSE: /* HSE is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800b2d6:	4b1d      	ldr	r3, [pc, #116]	; (800b34c <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 800b2d8:	681b      	ldr	r3, [r3, #0]
 800b2da:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800b2de:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800b2e2:	d102      	bne.n	800b2ea <HAL_RCCEx_GetPeriphCLKFreq+0xa96>
        {
          frequency = HSE_VALUE;
 800b2e4:	4b1a      	ldr	r3, [pc, #104]	; (800b350 <HAL_RCCEx_GetPeriphCLKFreq+0xafc>)
 800b2e6:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b2e8:	e02b      	b.n	800b342 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800b2ea:	2300      	movs	r3, #0
 800b2ec:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b2ee:	e028      	b.n	800b342 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_FDCANCLKSOURCE_PLL: /* PLL is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800b2f0:	4b16      	ldr	r3, [pc, #88]	; (800b34c <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 800b2f2:	681b      	ldr	r3, [r3, #0]
 800b2f4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800b2f8:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800b2fc:	d107      	bne.n	800b30e <HAL_RCCEx_GetPeriphCLKFreq+0xaba>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800b2fe:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800b302:	4618      	mov	r0, r3
 800b304:	f000 fae4 	bl	800b8d0 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800b308:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b30a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b30c:	e019      	b.n	800b342 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800b30e:	2300      	movs	r3, #0
 800b310:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b312:	e016      	b.n	800b342 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800b314:	4b0d      	ldr	r3, [pc, #52]	; (800b34c <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 800b316:	681b      	ldr	r3, [r3, #0]
 800b318:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800b31c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800b320:	d107      	bne.n	800b332 <HAL_RCCEx_GetPeriphCLKFreq+0xade>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800b322:	f107 0318 	add.w	r3, r7, #24
 800b326:	4618      	mov	r0, r3
 800b328:	f000 f82a 	bl	800b380 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800b32c:	69fb      	ldr	r3, [r7, #28]
 800b32e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b330:	e007      	b.n	800b342 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800b332:	2300      	movs	r3, #0
 800b334:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b336:	e004      	b.n	800b342 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 800b338:	2300      	movs	r3, #0
 800b33a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b33c:	e001      	b.n	800b342 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else
  {
    frequency = 0;
 800b33e:	2300      	movs	r3, #0
 800b340:	63fb      	str	r3, [r7, #60]	; 0x3c
  }

  return frequency;
 800b342:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800b344:	4618      	mov	r0, r3
 800b346:	3740      	adds	r7, #64	; 0x40
 800b348:	46bd      	mov	sp, r7
 800b34a:	bd80      	pop	{r7, pc}
 800b34c:	58024400 	.word	0x58024400
 800b350:	017d7840 	.word	0x017d7840

0800b354 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 800b354:	b580      	push	{r7, lr}
 800b356:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 800b358:	f7fd ffd6 	bl	8009308 <HAL_RCC_GetHCLKFreq>
 800b35c:	4602      	mov	r2, r0
 800b35e:	4b06      	ldr	r3, [pc, #24]	; (800b378 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 800b360:	6a1b      	ldr	r3, [r3, #32]
 800b362:	091b      	lsrs	r3, r3, #4
 800b364:	f003 0307 	and.w	r3, r3, #7
 800b368:	4904      	ldr	r1, [pc, #16]	; (800b37c <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 800b36a:	5ccb      	ldrb	r3, [r1, r3]
 800b36c:	f003 031f 	and.w	r3, r3, #31
 800b370:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 800b374:	4618      	mov	r0, r3
 800b376:	bd80      	pop	{r7, pc}
 800b378:	58024400 	.word	0x58024400
 800b37c:	080100a0 	.word	0x080100a0

0800b380 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 800b380:	b480      	push	{r7}
 800b382:	b089      	sub	sp, #36	; 0x24
 800b384:	af00      	add	r7, sp, #0
 800b386:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800b388:	4ba1      	ldr	r3, [pc, #644]	; (800b610 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800b38a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b38c:	f003 0303 	and.w	r3, r3, #3
 800b390:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 800b392:	4b9f      	ldr	r3, [pc, #636]	; (800b610 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800b394:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b396:	0b1b      	lsrs	r3, r3, #12
 800b398:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800b39c:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 800b39e:	4b9c      	ldr	r3, [pc, #624]	; (800b610 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800b3a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b3a2:	091b      	lsrs	r3, r3, #4
 800b3a4:	f003 0301 	and.w	r3, r3, #1
 800b3a8:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 800b3aa:	4b99      	ldr	r3, [pc, #612]	; (800b610 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800b3ac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b3ae:	08db      	lsrs	r3, r3, #3
 800b3b0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800b3b4:	693a      	ldr	r2, [r7, #16]
 800b3b6:	fb02 f303 	mul.w	r3, r2, r3
 800b3ba:	ee07 3a90 	vmov	s15, r3
 800b3be:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b3c2:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 800b3c6:	697b      	ldr	r3, [r7, #20]
 800b3c8:	2b00      	cmp	r3, #0
 800b3ca:	f000 8111 	beq.w	800b5f0 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 800b3ce:	69bb      	ldr	r3, [r7, #24]
 800b3d0:	2b02      	cmp	r3, #2
 800b3d2:	f000 8083 	beq.w	800b4dc <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 800b3d6:	69bb      	ldr	r3, [r7, #24]
 800b3d8:	2b02      	cmp	r3, #2
 800b3da:	f200 80a1 	bhi.w	800b520 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 800b3de:	69bb      	ldr	r3, [r7, #24]
 800b3e0:	2b00      	cmp	r3, #0
 800b3e2:	d003      	beq.n	800b3ec <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 800b3e4:	69bb      	ldr	r3, [r7, #24]
 800b3e6:	2b01      	cmp	r3, #1
 800b3e8:	d056      	beq.n	800b498 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 800b3ea:	e099      	b.n	800b520 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800b3ec:	4b88      	ldr	r3, [pc, #544]	; (800b610 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800b3ee:	681b      	ldr	r3, [r3, #0]
 800b3f0:	f003 0320 	and.w	r3, r3, #32
 800b3f4:	2b00      	cmp	r3, #0
 800b3f6:	d02d      	beq.n	800b454 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800b3f8:	4b85      	ldr	r3, [pc, #532]	; (800b610 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800b3fa:	681b      	ldr	r3, [r3, #0]
 800b3fc:	08db      	lsrs	r3, r3, #3
 800b3fe:	f003 0303 	and.w	r3, r3, #3
 800b402:	4a84      	ldr	r2, [pc, #528]	; (800b614 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 800b404:	fa22 f303 	lsr.w	r3, r2, r3
 800b408:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800b40a:	68bb      	ldr	r3, [r7, #8]
 800b40c:	ee07 3a90 	vmov	s15, r3
 800b410:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b414:	697b      	ldr	r3, [r7, #20]
 800b416:	ee07 3a90 	vmov	s15, r3
 800b41a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b41e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b422:	4b7b      	ldr	r3, [pc, #492]	; (800b610 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800b424:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b426:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b42a:	ee07 3a90 	vmov	s15, r3
 800b42e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b432:	ed97 6a03 	vldr	s12, [r7, #12]
 800b436:	eddf 5a78 	vldr	s11, [pc, #480]	; 800b618 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800b43a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b43e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b442:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800b446:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b44a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b44e:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800b452:	e087      	b.n	800b564 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800b454:	697b      	ldr	r3, [r7, #20]
 800b456:	ee07 3a90 	vmov	s15, r3
 800b45a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b45e:	eddf 6a6f 	vldr	s13, [pc, #444]	; 800b61c <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 800b462:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b466:	4b6a      	ldr	r3, [pc, #424]	; (800b610 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800b468:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b46a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b46e:	ee07 3a90 	vmov	s15, r3
 800b472:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b476:	ed97 6a03 	vldr	s12, [r7, #12]
 800b47a:	eddf 5a67 	vldr	s11, [pc, #412]	; 800b618 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800b47e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b482:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b486:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800b48a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b48e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b492:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800b496:	e065      	b.n	800b564 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800b498:	697b      	ldr	r3, [r7, #20]
 800b49a:	ee07 3a90 	vmov	s15, r3
 800b49e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b4a2:	eddf 6a5f 	vldr	s13, [pc, #380]	; 800b620 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800b4a6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b4aa:	4b59      	ldr	r3, [pc, #356]	; (800b610 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800b4ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b4ae:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b4b2:	ee07 3a90 	vmov	s15, r3
 800b4b6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b4ba:	ed97 6a03 	vldr	s12, [r7, #12]
 800b4be:	eddf 5a56 	vldr	s11, [pc, #344]	; 800b618 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800b4c2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b4c6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b4ca:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800b4ce:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b4d2:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b4d6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800b4da:	e043      	b.n	800b564 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800b4dc:	697b      	ldr	r3, [r7, #20]
 800b4de:	ee07 3a90 	vmov	s15, r3
 800b4e2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b4e6:	eddf 6a4f 	vldr	s13, [pc, #316]	; 800b624 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 800b4ea:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b4ee:	4b48      	ldr	r3, [pc, #288]	; (800b610 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800b4f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b4f2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b4f6:	ee07 3a90 	vmov	s15, r3
 800b4fa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b4fe:	ed97 6a03 	vldr	s12, [r7, #12]
 800b502:	eddf 5a45 	vldr	s11, [pc, #276]	; 800b618 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800b506:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b50a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b50e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800b512:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b516:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b51a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800b51e:	e021      	b.n	800b564 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800b520:	697b      	ldr	r3, [r7, #20]
 800b522:	ee07 3a90 	vmov	s15, r3
 800b526:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b52a:	eddf 6a3d 	vldr	s13, [pc, #244]	; 800b620 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800b52e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b532:	4b37      	ldr	r3, [pc, #220]	; (800b610 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800b534:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b536:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b53a:	ee07 3a90 	vmov	s15, r3
 800b53e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b542:	ed97 6a03 	vldr	s12, [r7, #12]
 800b546:	eddf 5a34 	vldr	s11, [pc, #208]	; 800b618 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800b54a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b54e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b552:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800b556:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b55a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b55e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800b562:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 800b564:	4b2a      	ldr	r3, [pc, #168]	; (800b610 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800b566:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b568:	0a5b      	lsrs	r3, r3, #9
 800b56a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b56e:	ee07 3a90 	vmov	s15, r3
 800b572:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b576:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800b57a:	ee37 7a87 	vadd.f32	s14, s15, s14
 800b57e:	edd7 6a07 	vldr	s13, [r7, #28]
 800b582:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800b586:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b58a:	ee17 2a90 	vmov	r2, s15
 800b58e:	687b      	ldr	r3, [r7, #4]
 800b590:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 800b592:	4b1f      	ldr	r3, [pc, #124]	; (800b610 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800b594:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b596:	0c1b      	lsrs	r3, r3, #16
 800b598:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b59c:	ee07 3a90 	vmov	s15, r3
 800b5a0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b5a4:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800b5a8:	ee37 7a87 	vadd.f32	s14, s15, s14
 800b5ac:	edd7 6a07 	vldr	s13, [r7, #28]
 800b5b0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800b5b4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b5b8:	ee17 2a90 	vmov	r2, s15
 800b5bc:	687b      	ldr	r3, [r7, #4]
 800b5be:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 800b5c0:	4b13      	ldr	r3, [pc, #76]	; (800b610 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800b5c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b5c4:	0e1b      	lsrs	r3, r3, #24
 800b5c6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b5ca:	ee07 3a90 	vmov	s15, r3
 800b5ce:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b5d2:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800b5d6:	ee37 7a87 	vadd.f32	s14, s15, s14
 800b5da:	edd7 6a07 	vldr	s13, [r7, #28]
 800b5de:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800b5e2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b5e6:	ee17 2a90 	vmov	r2, s15
 800b5ea:	687b      	ldr	r3, [r7, #4]
 800b5ec:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 800b5ee:	e008      	b.n	800b602 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 800b5f0:	687b      	ldr	r3, [r7, #4]
 800b5f2:	2200      	movs	r2, #0
 800b5f4:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 800b5f6:	687b      	ldr	r3, [r7, #4]
 800b5f8:	2200      	movs	r2, #0
 800b5fa:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 800b5fc:	687b      	ldr	r3, [r7, #4]
 800b5fe:	2200      	movs	r2, #0
 800b600:	609a      	str	r2, [r3, #8]
}
 800b602:	bf00      	nop
 800b604:	3724      	adds	r7, #36	; 0x24
 800b606:	46bd      	mov	sp, r7
 800b608:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b60c:	4770      	bx	lr
 800b60e:	bf00      	nop
 800b610:	58024400 	.word	0x58024400
 800b614:	03d09000 	.word	0x03d09000
 800b618:	46000000 	.word	0x46000000
 800b61c:	4c742400 	.word	0x4c742400
 800b620:	4a742400 	.word	0x4a742400
 800b624:	4bbebc20 	.word	0x4bbebc20

0800b628 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 800b628:	b480      	push	{r7}
 800b62a:	b089      	sub	sp, #36	; 0x24
 800b62c:	af00      	add	r7, sp, #0
 800b62e:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800b630:	4ba1      	ldr	r3, [pc, #644]	; (800b8b8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b632:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b634:	f003 0303 	and.w	r3, r3, #3
 800b638:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 800b63a:	4b9f      	ldr	r3, [pc, #636]	; (800b8b8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b63c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b63e:	0d1b      	lsrs	r3, r3, #20
 800b640:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800b644:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 800b646:	4b9c      	ldr	r3, [pc, #624]	; (800b8b8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b648:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b64a:	0a1b      	lsrs	r3, r3, #8
 800b64c:	f003 0301 	and.w	r3, r3, #1
 800b650:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 800b652:	4b99      	ldr	r3, [pc, #612]	; (800b8b8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b654:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b656:	08db      	lsrs	r3, r3, #3
 800b658:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800b65c:	693a      	ldr	r2, [r7, #16]
 800b65e:	fb02 f303 	mul.w	r3, r2, r3
 800b662:	ee07 3a90 	vmov	s15, r3
 800b666:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b66a:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 800b66e:	697b      	ldr	r3, [r7, #20]
 800b670:	2b00      	cmp	r3, #0
 800b672:	f000 8111 	beq.w	800b898 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 800b676:	69bb      	ldr	r3, [r7, #24]
 800b678:	2b02      	cmp	r3, #2
 800b67a:	f000 8083 	beq.w	800b784 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 800b67e:	69bb      	ldr	r3, [r7, #24]
 800b680:	2b02      	cmp	r3, #2
 800b682:	f200 80a1 	bhi.w	800b7c8 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 800b686:	69bb      	ldr	r3, [r7, #24]
 800b688:	2b00      	cmp	r3, #0
 800b68a:	d003      	beq.n	800b694 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 800b68c:	69bb      	ldr	r3, [r7, #24]
 800b68e:	2b01      	cmp	r3, #1
 800b690:	d056      	beq.n	800b740 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 800b692:	e099      	b.n	800b7c8 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800b694:	4b88      	ldr	r3, [pc, #544]	; (800b8b8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b696:	681b      	ldr	r3, [r3, #0]
 800b698:	f003 0320 	and.w	r3, r3, #32
 800b69c:	2b00      	cmp	r3, #0
 800b69e:	d02d      	beq.n	800b6fc <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800b6a0:	4b85      	ldr	r3, [pc, #532]	; (800b8b8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b6a2:	681b      	ldr	r3, [r3, #0]
 800b6a4:	08db      	lsrs	r3, r3, #3
 800b6a6:	f003 0303 	and.w	r3, r3, #3
 800b6aa:	4a84      	ldr	r2, [pc, #528]	; (800b8bc <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 800b6ac:	fa22 f303 	lsr.w	r3, r2, r3
 800b6b0:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800b6b2:	68bb      	ldr	r3, [r7, #8]
 800b6b4:	ee07 3a90 	vmov	s15, r3
 800b6b8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b6bc:	697b      	ldr	r3, [r7, #20]
 800b6be:	ee07 3a90 	vmov	s15, r3
 800b6c2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b6c6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b6ca:	4b7b      	ldr	r3, [pc, #492]	; (800b8b8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b6cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b6ce:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b6d2:	ee07 3a90 	vmov	s15, r3
 800b6d6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b6da:	ed97 6a03 	vldr	s12, [r7, #12]
 800b6de:	eddf 5a78 	vldr	s11, [pc, #480]	; 800b8c0 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800b6e2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b6e6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b6ea:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800b6ee:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b6f2:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b6f6:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800b6fa:	e087      	b.n	800b80c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800b6fc:	697b      	ldr	r3, [r7, #20]
 800b6fe:	ee07 3a90 	vmov	s15, r3
 800b702:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b706:	eddf 6a6f 	vldr	s13, [pc, #444]	; 800b8c4 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 800b70a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b70e:	4b6a      	ldr	r3, [pc, #424]	; (800b8b8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b710:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b712:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b716:	ee07 3a90 	vmov	s15, r3
 800b71a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b71e:	ed97 6a03 	vldr	s12, [r7, #12]
 800b722:	eddf 5a67 	vldr	s11, [pc, #412]	; 800b8c0 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800b726:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b72a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b72e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800b732:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b736:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b73a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800b73e:	e065      	b.n	800b80c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800b740:	697b      	ldr	r3, [r7, #20]
 800b742:	ee07 3a90 	vmov	s15, r3
 800b746:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b74a:	eddf 6a5f 	vldr	s13, [pc, #380]	; 800b8c8 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800b74e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b752:	4b59      	ldr	r3, [pc, #356]	; (800b8b8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b754:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b756:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b75a:	ee07 3a90 	vmov	s15, r3
 800b75e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b762:	ed97 6a03 	vldr	s12, [r7, #12]
 800b766:	eddf 5a56 	vldr	s11, [pc, #344]	; 800b8c0 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800b76a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b76e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b772:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800b776:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b77a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b77e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800b782:	e043      	b.n	800b80c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800b784:	697b      	ldr	r3, [r7, #20]
 800b786:	ee07 3a90 	vmov	s15, r3
 800b78a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b78e:	eddf 6a4f 	vldr	s13, [pc, #316]	; 800b8cc <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 800b792:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b796:	4b48      	ldr	r3, [pc, #288]	; (800b8b8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b798:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b79a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b79e:	ee07 3a90 	vmov	s15, r3
 800b7a2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b7a6:	ed97 6a03 	vldr	s12, [r7, #12]
 800b7aa:	eddf 5a45 	vldr	s11, [pc, #276]	; 800b8c0 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800b7ae:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b7b2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b7b6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800b7ba:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b7be:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b7c2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800b7c6:	e021      	b.n	800b80c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800b7c8:	697b      	ldr	r3, [r7, #20]
 800b7ca:	ee07 3a90 	vmov	s15, r3
 800b7ce:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b7d2:	eddf 6a3d 	vldr	s13, [pc, #244]	; 800b8c8 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800b7d6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b7da:	4b37      	ldr	r3, [pc, #220]	; (800b8b8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b7dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b7de:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b7e2:	ee07 3a90 	vmov	s15, r3
 800b7e6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b7ea:	ed97 6a03 	vldr	s12, [r7, #12]
 800b7ee:	eddf 5a34 	vldr	s11, [pc, #208]	; 800b8c0 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800b7f2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b7f6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b7fa:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800b7fe:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b802:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b806:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800b80a:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 800b80c:	4b2a      	ldr	r3, [pc, #168]	; (800b8b8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b80e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b810:	0a5b      	lsrs	r3, r3, #9
 800b812:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b816:	ee07 3a90 	vmov	s15, r3
 800b81a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b81e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800b822:	ee37 7a87 	vadd.f32	s14, s15, s14
 800b826:	edd7 6a07 	vldr	s13, [r7, #28]
 800b82a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800b82e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b832:	ee17 2a90 	vmov	r2, s15
 800b836:	687b      	ldr	r3, [r7, #4]
 800b838:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 800b83a:	4b1f      	ldr	r3, [pc, #124]	; (800b8b8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b83c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b83e:	0c1b      	lsrs	r3, r3, #16
 800b840:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b844:	ee07 3a90 	vmov	s15, r3
 800b848:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b84c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800b850:	ee37 7a87 	vadd.f32	s14, s15, s14
 800b854:	edd7 6a07 	vldr	s13, [r7, #28]
 800b858:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800b85c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b860:	ee17 2a90 	vmov	r2, s15
 800b864:	687b      	ldr	r3, [r7, #4]
 800b866:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 800b868:	4b13      	ldr	r3, [pc, #76]	; (800b8b8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b86a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b86c:	0e1b      	lsrs	r3, r3, #24
 800b86e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b872:	ee07 3a90 	vmov	s15, r3
 800b876:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b87a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800b87e:	ee37 7a87 	vadd.f32	s14, s15, s14
 800b882:	edd7 6a07 	vldr	s13, [r7, #28]
 800b886:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800b88a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b88e:	ee17 2a90 	vmov	r2, s15
 800b892:	687b      	ldr	r3, [r7, #4]
 800b894:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 800b896:	e008      	b.n	800b8aa <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 800b898:	687b      	ldr	r3, [r7, #4]
 800b89a:	2200      	movs	r2, #0
 800b89c:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 800b89e:	687b      	ldr	r3, [r7, #4]
 800b8a0:	2200      	movs	r2, #0
 800b8a2:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 800b8a4:	687b      	ldr	r3, [r7, #4]
 800b8a6:	2200      	movs	r2, #0
 800b8a8:	609a      	str	r2, [r3, #8]
}
 800b8aa:	bf00      	nop
 800b8ac:	3724      	adds	r7, #36	; 0x24
 800b8ae:	46bd      	mov	sp, r7
 800b8b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b8b4:	4770      	bx	lr
 800b8b6:	bf00      	nop
 800b8b8:	58024400 	.word	0x58024400
 800b8bc:	03d09000 	.word	0x03d09000
 800b8c0:	46000000 	.word	0x46000000
 800b8c4:	4c742400 	.word	0x4c742400
 800b8c8:	4a742400 	.word	0x4a742400
 800b8cc:	4bbebc20 	.word	0x4bbebc20

0800b8d0 <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef *PLL1_Clocks)
{
 800b8d0:	b480      	push	{r7}
 800b8d2:	b089      	sub	sp, #36	; 0x24
 800b8d4:	af00      	add	r7, sp, #0
 800b8d6:	6078      	str	r0, [r7, #4]
  uint32_t pllsource, pll1m, pll1fracen, hsivalue;
  float_t fracn1, pll1vco;

  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800b8d8:	4ba0      	ldr	r3, [pc, #640]	; (800bb5c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800b8da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b8dc:	f003 0303 	and.w	r3, r3, #3
 800b8e0:	61bb      	str	r3, [r7, #24]
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4);
 800b8e2:	4b9e      	ldr	r3, [pc, #632]	; (800bb5c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800b8e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b8e6:	091b      	lsrs	r3, r3, #4
 800b8e8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800b8ec:	617b      	str	r3, [r7, #20]
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 800b8ee:	4b9b      	ldr	r3, [pc, #620]	; (800bb5c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800b8f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b8f2:	f003 0301 	and.w	r3, r3, #1
 800b8f6:	613b      	str	r3, [r7, #16]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 800b8f8:	4b98      	ldr	r3, [pc, #608]	; (800bb5c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800b8fa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b8fc:	08db      	lsrs	r3, r3, #3
 800b8fe:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800b902:	693a      	ldr	r2, [r7, #16]
 800b904:	fb02 f303 	mul.w	r3, r2, r3
 800b908:	ee07 3a90 	vmov	s15, r3
 800b90c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b910:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll1m != 0U)
 800b914:	697b      	ldr	r3, [r7, #20]
 800b916:	2b00      	cmp	r3, #0
 800b918:	f000 8111 	beq.w	800bb3e <HAL_RCCEx_GetPLL1ClockFreq+0x26e>
  {
    switch (pllsource)
 800b91c:	69bb      	ldr	r3, [r7, #24]
 800b91e:	2b02      	cmp	r3, #2
 800b920:	f000 8083 	beq.w	800ba2a <HAL_RCCEx_GetPLL1ClockFreq+0x15a>
 800b924:	69bb      	ldr	r3, [r7, #24]
 800b926:	2b02      	cmp	r3, #2
 800b928:	f200 80a1 	bhi.w	800ba6e <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
 800b92c:	69bb      	ldr	r3, [r7, #24]
 800b92e:	2b00      	cmp	r3, #0
 800b930:	d003      	beq.n	800b93a <HAL_RCCEx_GetPLL1ClockFreq+0x6a>
 800b932:	69bb      	ldr	r3, [r7, #24]
 800b934:	2b01      	cmp	r3, #1
 800b936:	d056      	beq.n	800b9e6 <HAL_RCCEx_GetPLL1ClockFreq+0x116>
 800b938:	e099      	b.n	800ba6e <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800b93a:	4b88      	ldr	r3, [pc, #544]	; (800bb5c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800b93c:	681b      	ldr	r3, [r3, #0]
 800b93e:	f003 0320 	and.w	r3, r3, #32
 800b942:	2b00      	cmp	r3, #0
 800b944:	d02d      	beq.n	800b9a2 <HAL_RCCEx_GetPLL1ClockFreq+0xd2>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800b946:	4b85      	ldr	r3, [pc, #532]	; (800bb5c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800b948:	681b      	ldr	r3, [r3, #0]
 800b94a:	08db      	lsrs	r3, r3, #3
 800b94c:	f003 0303 	and.w	r3, r3, #3
 800b950:	4a83      	ldr	r2, [pc, #524]	; (800bb60 <HAL_RCCEx_GetPLL1ClockFreq+0x290>)
 800b952:	fa22 f303 	lsr.w	r3, r2, r3
 800b956:	60bb      	str	r3, [r7, #8]
          pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800b958:	68bb      	ldr	r3, [r7, #8]
 800b95a:	ee07 3a90 	vmov	s15, r3
 800b95e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b962:	697b      	ldr	r3, [r7, #20]
 800b964:	ee07 3a90 	vmov	s15, r3
 800b968:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b96c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b970:	4b7a      	ldr	r3, [pc, #488]	; (800bb5c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800b972:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b974:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b978:	ee07 3a90 	vmov	s15, r3
 800b97c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b980:	ed97 6a03 	vldr	s12, [r7, #12]
 800b984:	eddf 5a77 	vldr	s11, [pc, #476]	; 800bb64 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800b988:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b98c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b990:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800b994:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b998:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b99c:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800b9a0:	e087      	b.n	800bab2 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800b9a2:	697b      	ldr	r3, [r7, #20]
 800b9a4:	ee07 3a90 	vmov	s15, r3
 800b9a8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b9ac:	eddf 6a6e 	vldr	s13, [pc, #440]	; 800bb68 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 800b9b0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b9b4:	4b69      	ldr	r3, [pc, #420]	; (800bb5c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800b9b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b9b8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b9bc:	ee07 3a90 	vmov	s15, r3
 800b9c0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b9c4:	ed97 6a03 	vldr	s12, [r7, #12]
 800b9c8:	eddf 5a66 	vldr	s11, [pc, #408]	; 800bb64 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800b9cc:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b9d0:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b9d4:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800b9d8:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b9dc:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b9e0:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800b9e4:	e065      	b.n	800bab2 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800b9e6:	697b      	ldr	r3, [r7, #20]
 800b9e8:	ee07 3a90 	vmov	s15, r3
 800b9ec:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b9f0:	eddf 6a5e 	vldr	s13, [pc, #376]	; 800bb6c <HAL_RCCEx_GetPLL1ClockFreq+0x29c>
 800b9f4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b9f8:	4b58      	ldr	r3, [pc, #352]	; (800bb5c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800b9fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b9fc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ba00:	ee07 3a90 	vmov	s15, r3
 800ba04:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ba08:	ed97 6a03 	vldr	s12, [r7, #12]
 800ba0c:	eddf 5a55 	vldr	s11, [pc, #340]	; 800bb64 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800ba10:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800ba14:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800ba18:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800ba1c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800ba20:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ba24:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800ba28:	e043      	b.n	800bab2 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800ba2a:	697b      	ldr	r3, [r7, #20]
 800ba2c:	ee07 3a90 	vmov	s15, r3
 800ba30:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ba34:	eddf 6a4e 	vldr	s13, [pc, #312]	; 800bb70 <HAL_RCCEx_GetPLL1ClockFreq+0x2a0>
 800ba38:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800ba3c:	4b47      	ldr	r3, [pc, #284]	; (800bb5c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800ba3e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ba40:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ba44:	ee07 3a90 	vmov	s15, r3
 800ba48:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ba4c:	ed97 6a03 	vldr	s12, [r7, #12]
 800ba50:	eddf 5a44 	vldr	s11, [pc, #272]	; 800bb64 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800ba54:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800ba58:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800ba5c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800ba60:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800ba64:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ba68:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800ba6c:	e021      	b.n	800bab2 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      default:
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800ba6e:	697b      	ldr	r3, [r7, #20]
 800ba70:	ee07 3a90 	vmov	s15, r3
 800ba74:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ba78:	eddf 6a3b 	vldr	s13, [pc, #236]	; 800bb68 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 800ba7c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800ba80:	4b36      	ldr	r3, [pc, #216]	; (800bb5c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800ba82:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ba84:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ba88:	ee07 3a90 	vmov	s15, r3
 800ba8c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ba90:	ed97 6a03 	vldr	s12, [r7, #12]
 800ba94:	eddf 5a33 	vldr	s11, [pc, #204]	; 800bb64 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800ba98:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800ba9c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800baa0:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800baa4:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800baa8:	ee67 7a27 	vmul.f32	s15, s14, s15
 800baac:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800bab0:	bf00      	nop
    }

    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9)  + (float_t)1)) ;
 800bab2:	4b2a      	ldr	r3, [pc, #168]	; (800bb5c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800bab4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bab6:	0a5b      	lsrs	r3, r3, #9
 800bab8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800babc:	ee07 3a90 	vmov	s15, r3
 800bac0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bac4:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800bac8:	ee37 7a87 	vadd.f32	s14, s15, s14
 800bacc:	edd7 6a07 	vldr	s13, [r7, #28]
 800bad0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800bad4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800bad8:	ee17 2a90 	vmov	r2, s15
 800badc:	687b      	ldr	r3, [r7, #4]
 800bade:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >> 16) + (float_t)1)) ;
 800bae0:	4b1e      	ldr	r3, [pc, #120]	; (800bb5c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800bae2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bae4:	0c1b      	lsrs	r3, r3, #16
 800bae6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800baea:	ee07 3a90 	vmov	s15, r3
 800baee:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800baf2:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800baf6:	ee37 7a87 	vadd.f32	s14, s15, s14
 800bafa:	edd7 6a07 	vldr	s13, [r7, #28]
 800bafe:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800bb02:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800bb06:	ee17 2a90 	vmov	r2, s15
 800bb0a:	687b      	ldr	r3, [r7, #4]
 800bb0c:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >> 24) + (float_t)1)) ;
 800bb0e:	4b13      	ldr	r3, [pc, #76]	; (800bb5c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800bb10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bb12:	0e1b      	lsrs	r3, r3, #24
 800bb14:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800bb18:	ee07 3a90 	vmov	s15, r3
 800bb1c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bb20:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800bb24:	ee37 7a87 	vadd.f32	s14, s15, s14
 800bb28:	edd7 6a07 	vldr	s13, [r7, #28]
 800bb2c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800bb30:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800bb34:	ee17 2a90 	vmov	r2, s15
 800bb38:	687b      	ldr	r3, [r7, #4]
 800bb3a:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 800bb3c:	e008      	b.n	800bb50 <HAL_RCCEx_GetPLL1ClockFreq+0x280>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 800bb3e:	687b      	ldr	r3, [r7, #4]
 800bb40:	2200      	movs	r2, #0
 800bb42:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 800bb44:	687b      	ldr	r3, [r7, #4]
 800bb46:	2200      	movs	r2, #0
 800bb48:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 800bb4a:	687b      	ldr	r3, [r7, #4]
 800bb4c:	2200      	movs	r2, #0
 800bb4e:	609a      	str	r2, [r3, #8]
}
 800bb50:	bf00      	nop
 800bb52:	3724      	adds	r7, #36	; 0x24
 800bb54:	46bd      	mov	sp, r7
 800bb56:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb5a:	4770      	bx	lr
 800bb5c:	58024400 	.word	0x58024400
 800bb60:	03d09000 	.word	0x03d09000
 800bb64:	46000000 	.word	0x46000000
 800bb68:	4c742400 	.word	0x4c742400
 800bb6c:	4a742400 	.word	0x4a742400
 800bb70:	4bbebc20 	.word	0x4bbebc20

0800bb74 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 800bb74:	b580      	push	{r7, lr}
 800bb76:	b084      	sub	sp, #16
 800bb78:	af00      	add	r7, sp, #0
 800bb7a:	6078      	str	r0, [r7, #4]
 800bb7c:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800bb7e:	2300      	movs	r3, #0
 800bb80:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800bb82:	4b53      	ldr	r3, [pc, #332]	; (800bcd0 <RCCEx_PLL2_Config+0x15c>)
 800bb84:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bb86:	f003 0303 	and.w	r3, r3, #3
 800bb8a:	2b03      	cmp	r3, #3
 800bb8c:	d101      	bne.n	800bb92 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 800bb8e:	2301      	movs	r3, #1
 800bb90:	e099      	b.n	800bcc6 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 800bb92:	4b4f      	ldr	r3, [pc, #316]	; (800bcd0 <RCCEx_PLL2_Config+0x15c>)
 800bb94:	681b      	ldr	r3, [r3, #0]
 800bb96:	4a4e      	ldr	r2, [pc, #312]	; (800bcd0 <RCCEx_PLL2_Config+0x15c>)
 800bb98:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800bb9c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800bb9e:	f7fb fecf 	bl	8007940 <HAL_GetTick>
 800bba2:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800bba4:	e008      	b.n	800bbb8 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800bba6:	f7fb fecb 	bl	8007940 <HAL_GetTick>
 800bbaa:	4602      	mov	r2, r0
 800bbac:	68bb      	ldr	r3, [r7, #8]
 800bbae:	1ad3      	subs	r3, r2, r3
 800bbb0:	2b02      	cmp	r3, #2
 800bbb2:	d901      	bls.n	800bbb8 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 800bbb4:	2303      	movs	r3, #3
 800bbb6:	e086      	b.n	800bcc6 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800bbb8:	4b45      	ldr	r3, [pc, #276]	; (800bcd0 <RCCEx_PLL2_Config+0x15c>)
 800bbba:	681b      	ldr	r3, [r3, #0]
 800bbbc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800bbc0:	2b00      	cmp	r3, #0
 800bbc2:	d1f0      	bne.n	800bba6 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 800bbc4:	4b42      	ldr	r3, [pc, #264]	; (800bcd0 <RCCEx_PLL2_Config+0x15c>)
 800bbc6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bbc8:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 800bbcc:	687b      	ldr	r3, [r7, #4]
 800bbce:	681b      	ldr	r3, [r3, #0]
 800bbd0:	031b      	lsls	r3, r3, #12
 800bbd2:	493f      	ldr	r1, [pc, #252]	; (800bcd0 <RCCEx_PLL2_Config+0x15c>)
 800bbd4:	4313      	orrs	r3, r2
 800bbd6:	628b      	str	r3, [r1, #40]	; 0x28
 800bbd8:	687b      	ldr	r3, [r7, #4]
 800bbda:	685b      	ldr	r3, [r3, #4]
 800bbdc:	3b01      	subs	r3, #1
 800bbde:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800bbe2:	687b      	ldr	r3, [r7, #4]
 800bbe4:	689b      	ldr	r3, [r3, #8]
 800bbe6:	3b01      	subs	r3, #1
 800bbe8:	025b      	lsls	r3, r3, #9
 800bbea:	b29b      	uxth	r3, r3
 800bbec:	431a      	orrs	r2, r3
 800bbee:	687b      	ldr	r3, [r7, #4]
 800bbf0:	68db      	ldr	r3, [r3, #12]
 800bbf2:	3b01      	subs	r3, #1
 800bbf4:	041b      	lsls	r3, r3, #16
 800bbf6:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800bbfa:	431a      	orrs	r2, r3
 800bbfc:	687b      	ldr	r3, [r7, #4]
 800bbfe:	691b      	ldr	r3, [r3, #16]
 800bc00:	3b01      	subs	r3, #1
 800bc02:	061b      	lsls	r3, r3, #24
 800bc04:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800bc08:	4931      	ldr	r1, [pc, #196]	; (800bcd0 <RCCEx_PLL2_Config+0x15c>)
 800bc0a:	4313      	orrs	r3, r2
 800bc0c:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 800bc0e:	4b30      	ldr	r3, [pc, #192]	; (800bcd0 <RCCEx_PLL2_Config+0x15c>)
 800bc10:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bc12:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800bc16:	687b      	ldr	r3, [r7, #4]
 800bc18:	695b      	ldr	r3, [r3, #20]
 800bc1a:	492d      	ldr	r1, [pc, #180]	; (800bcd0 <RCCEx_PLL2_Config+0x15c>)
 800bc1c:	4313      	orrs	r3, r2
 800bc1e:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 800bc20:	4b2b      	ldr	r3, [pc, #172]	; (800bcd0 <RCCEx_PLL2_Config+0x15c>)
 800bc22:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bc24:	f023 0220 	bic.w	r2, r3, #32
 800bc28:	687b      	ldr	r3, [r7, #4]
 800bc2a:	699b      	ldr	r3, [r3, #24]
 800bc2c:	4928      	ldr	r1, [pc, #160]	; (800bcd0 <RCCEx_PLL2_Config+0x15c>)
 800bc2e:	4313      	orrs	r3, r2
 800bc30:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 800bc32:	4b27      	ldr	r3, [pc, #156]	; (800bcd0 <RCCEx_PLL2_Config+0x15c>)
 800bc34:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bc36:	4a26      	ldr	r2, [pc, #152]	; (800bcd0 <RCCEx_PLL2_Config+0x15c>)
 800bc38:	f023 0310 	bic.w	r3, r3, #16
 800bc3c:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 800bc3e:	4b24      	ldr	r3, [pc, #144]	; (800bcd0 <RCCEx_PLL2_Config+0x15c>)
 800bc40:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800bc42:	4b24      	ldr	r3, [pc, #144]	; (800bcd4 <RCCEx_PLL2_Config+0x160>)
 800bc44:	4013      	ands	r3, r2
 800bc46:	687a      	ldr	r2, [r7, #4]
 800bc48:	69d2      	ldr	r2, [r2, #28]
 800bc4a:	00d2      	lsls	r2, r2, #3
 800bc4c:	4920      	ldr	r1, [pc, #128]	; (800bcd0 <RCCEx_PLL2_Config+0x15c>)
 800bc4e:	4313      	orrs	r3, r2
 800bc50:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 800bc52:	4b1f      	ldr	r3, [pc, #124]	; (800bcd0 <RCCEx_PLL2_Config+0x15c>)
 800bc54:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bc56:	4a1e      	ldr	r2, [pc, #120]	; (800bcd0 <RCCEx_PLL2_Config+0x15c>)
 800bc58:	f043 0310 	orr.w	r3, r3, #16
 800bc5c:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800bc5e:	683b      	ldr	r3, [r7, #0]
 800bc60:	2b00      	cmp	r3, #0
 800bc62:	d106      	bne.n	800bc72 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 800bc64:	4b1a      	ldr	r3, [pc, #104]	; (800bcd0 <RCCEx_PLL2_Config+0x15c>)
 800bc66:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bc68:	4a19      	ldr	r2, [pc, #100]	; (800bcd0 <RCCEx_PLL2_Config+0x15c>)
 800bc6a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800bc6e:	62d3      	str	r3, [r2, #44]	; 0x2c
 800bc70:	e00f      	b.n	800bc92 <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800bc72:	683b      	ldr	r3, [r7, #0]
 800bc74:	2b01      	cmp	r3, #1
 800bc76:	d106      	bne.n	800bc86 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 800bc78:	4b15      	ldr	r3, [pc, #84]	; (800bcd0 <RCCEx_PLL2_Config+0x15c>)
 800bc7a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bc7c:	4a14      	ldr	r2, [pc, #80]	; (800bcd0 <RCCEx_PLL2_Config+0x15c>)
 800bc7e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800bc82:	62d3      	str	r3, [r2, #44]	; 0x2c
 800bc84:	e005      	b.n	800bc92 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 800bc86:	4b12      	ldr	r3, [pc, #72]	; (800bcd0 <RCCEx_PLL2_Config+0x15c>)
 800bc88:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bc8a:	4a11      	ldr	r2, [pc, #68]	; (800bcd0 <RCCEx_PLL2_Config+0x15c>)
 800bc8c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800bc90:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 800bc92:	4b0f      	ldr	r3, [pc, #60]	; (800bcd0 <RCCEx_PLL2_Config+0x15c>)
 800bc94:	681b      	ldr	r3, [r3, #0]
 800bc96:	4a0e      	ldr	r2, [pc, #56]	; (800bcd0 <RCCEx_PLL2_Config+0x15c>)
 800bc98:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800bc9c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800bc9e:	f7fb fe4f 	bl	8007940 <HAL_GetTick>
 800bca2:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800bca4:	e008      	b.n	800bcb8 <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800bca6:	f7fb fe4b 	bl	8007940 <HAL_GetTick>
 800bcaa:	4602      	mov	r2, r0
 800bcac:	68bb      	ldr	r3, [r7, #8]
 800bcae:	1ad3      	subs	r3, r2, r3
 800bcb0:	2b02      	cmp	r3, #2
 800bcb2:	d901      	bls.n	800bcb8 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 800bcb4:	2303      	movs	r3, #3
 800bcb6:	e006      	b.n	800bcc6 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800bcb8:	4b05      	ldr	r3, [pc, #20]	; (800bcd0 <RCCEx_PLL2_Config+0x15c>)
 800bcba:	681b      	ldr	r3, [r3, #0]
 800bcbc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800bcc0:	2b00      	cmp	r3, #0
 800bcc2:	d0f0      	beq.n	800bca6 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 800bcc4:	7bfb      	ldrb	r3, [r7, #15]
}
 800bcc6:	4618      	mov	r0, r3
 800bcc8:	3710      	adds	r7, #16
 800bcca:	46bd      	mov	sp, r7
 800bccc:	bd80      	pop	{r7, pc}
 800bcce:	bf00      	nop
 800bcd0:	58024400 	.word	0x58024400
 800bcd4:	ffff0007 	.word	0xffff0007

0800bcd8 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 800bcd8:	b580      	push	{r7, lr}
 800bcda:	b084      	sub	sp, #16
 800bcdc:	af00      	add	r7, sp, #0
 800bcde:	6078      	str	r0, [r7, #4]
 800bce0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800bce2:	2300      	movs	r3, #0
 800bce4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800bce6:	4b53      	ldr	r3, [pc, #332]	; (800be34 <RCCEx_PLL3_Config+0x15c>)
 800bce8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bcea:	f003 0303 	and.w	r3, r3, #3
 800bcee:	2b03      	cmp	r3, #3
 800bcf0:	d101      	bne.n	800bcf6 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 800bcf2:	2301      	movs	r3, #1
 800bcf4:	e099      	b.n	800be2a <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 800bcf6:	4b4f      	ldr	r3, [pc, #316]	; (800be34 <RCCEx_PLL3_Config+0x15c>)
 800bcf8:	681b      	ldr	r3, [r3, #0]
 800bcfa:	4a4e      	ldr	r2, [pc, #312]	; (800be34 <RCCEx_PLL3_Config+0x15c>)
 800bcfc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800bd00:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800bd02:	f7fb fe1d 	bl	8007940 <HAL_GetTick>
 800bd06:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800bd08:	e008      	b.n	800bd1c <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800bd0a:	f7fb fe19 	bl	8007940 <HAL_GetTick>
 800bd0e:	4602      	mov	r2, r0
 800bd10:	68bb      	ldr	r3, [r7, #8]
 800bd12:	1ad3      	subs	r3, r2, r3
 800bd14:	2b02      	cmp	r3, #2
 800bd16:	d901      	bls.n	800bd1c <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 800bd18:	2303      	movs	r3, #3
 800bd1a:	e086      	b.n	800be2a <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800bd1c:	4b45      	ldr	r3, [pc, #276]	; (800be34 <RCCEx_PLL3_Config+0x15c>)
 800bd1e:	681b      	ldr	r3, [r3, #0]
 800bd20:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800bd24:	2b00      	cmp	r3, #0
 800bd26:	d1f0      	bne.n	800bd0a <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 800bd28:	4b42      	ldr	r3, [pc, #264]	; (800be34 <RCCEx_PLL3_Config+0x15c>)
 800bd2a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bd2c:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 800bd30:	687b      	ldr	r3, [r7, #4]
 800bd32:	681b      	ldr	r3, [r3, #0]
 800bd34:	051b      	lsls	r3, r3, #20
 800bd36:	493f      	ldr	r1, [pc, #252]	; (800be34 <RCCEx_PLL3_Config+0x15c>)
 800bd38:	4313      	orrs	r3, r2
 800bd3a:	628b      	str	r3, [r1, #40]	; 0x28
 800bd3c:	687b      	ldr	r3, [r7, #4]
 800bd3e:	685b      	ldr	r3, [r3, #4]
 800bd40:	3b01      	subs	r3, #1
 800bd42:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800bd46:	687b      	ldr	r3, [r7, #4]
 800bd48:	689b      	ldr	r3, [r3, #8]
 800bd4a:	3b01      	subs	r3, #1
 800bd4c:	025b      	lsls	r3, r3, #9
 800bd4e:	b29b      	uxth	r3, r3
 800bd50:	431a      	orrs	r2, r3
 800bd52:	687b      	ldr	r3, [r7, #4]
 800bd54:	68db      	ldr	r3, [r3, #12]
 800bd56:	3b01      	subs	r3, #1
 800bd58:	041b      	lsls	r3, r3, #16
 800bd5a:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800bd5e:	431a      	orrs	r2, r3
 800bd60:	687b      	ldr	r3, [r7, #4]
 800bd62:	691b      	ldr	r3, [r3, #16]
 800bd64:	3b01      	subs	r3, #1
 800bd66:	061b      	lsls	r3, r3, #24
 800bd68:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800bd6c:	4931      	ldr	r1, [pc, #196]	; (800be34 <RCCEx_PLL3_Config+0x15c>)
 800bd6e:	4313      	orrs	r3, r2
 800bd70:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 800bd72:	4b30      	ldr	r3, [pc, #192]	; (800be34 <RCCEx_PLL3_Config+0x15c>)
 800bd74:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bd76:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800bd7a:	687b      	ldr	r3, [r7, #4]
 800bd7c:	695b      	ldr	r3, [r3, #20]
 800bd7e:	492d      	ldr	r1, [pc, #180]	; (800be34 <RCCEx_PLL3_Config+0x15c>)
 800bd80:	4313      	orrs	r3, r2
 800bd82:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 800bd84:	4b2b      	ldr	r3, [pc, #172]	; (800be34 <RCCEx_PLL3_Config+0x15c>)
 800bd86:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bd88:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 800bd8c:	687b      	ldr	r3, [r7, #4]
 800bd8e:	699b      	ldr	r3, [r3, #24]
 800bd90:	4928      	ldr	r1, [pc, #160]	; (800be34 <RCCEx_PLL3_Config+0x15c>)
 800bd92:	4313      	orrs	r3, r2
 800bd94:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 800bd96:	4b27      	ldr	r3, [pc, #156]	; (800be34 <RCCEx_PLL3_Config+0x15c>)
 800bd98:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bd9a:	4a26      	ldr	r2, [pc, #152]	; (800be34 <RCCEx_PLL3_Config+0x15c>)
 800bd9c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800bda0:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 800bda2:	4b24      	ldr	r3, [pc, #144]	; (800be34 <RCCEx_PLL3_Config+0x15c>)
 800bda4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800bda6:	4b24      	ldr	r3, [pc, #144]	; (800be38 <RCCEx_PLL3_Config+0x160>)
 800bda8:	4013      	ands	r3, r2
 800bdaa:	687a      	ldr	r2, [r7, #4]
 800bdac:	69d2      	ldr	r2, [r2, #28]
 800bdae:	00d2      	lsls	r2, r2, #3
 800bdb0:	4920      	ldr	r1, [pc, #128]	; (800be34 <RCCEx_PLL3_Config+0x15c>)
 800bdb2:	4313      	orrs	r3, r2
 800bdb4:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 800bdb6:	4b1f      	ldr	r3, [pc, #124]	; (800be34 <RCCEx_PLL3_Config+0x15c>)
 800bdb8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bdba:	4a1e      	ldr	r2, [pc, #120]	; (800be34 <RCCEx_PLL3_Config+0x15c>)
 800bdbc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800bdc0:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800bdc2:	683b      	ldr	r3, [r7, #0]
 800bdc4:	2b00      	cmp	r3, #0
 800bdc6:	d106      	bne.n	800bdd6 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 800bdc8:	4b1a      	ldr	r3, [pc, #104]	; (800be34 <RCCEx_PLL3_Config+0x15c>)
 800bdca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bdcc:	4a19      	ldr	r2, [pc, #100]	; (800be34 <RCCEx_PLL3_Config+0x15c>)
 800bdce:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800bdd2:	62d3      	str	r3, [r2, #44]	; 0x2c
 800bdd4:	e00f      	b.n	800bdf6 <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800bdd6:	683b      	ldr	r3, [r7, #0]
 800bdd8:	2b01      	cmp	r3, #1
 800bdda:	d106      	bne.n	800bdea <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 800bddc:	4b15      	ldr	r3, [pc, #84]	; (800be34 <RCCEx_PLL3_Config+0x15c>)
 800bdde:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bde0:	4a14      	ldr	r2, [pc, #80]	; (800be34 <RCCEx_PLL3_Config+0x15c>)
 800bde2:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800bde6:	62d3      	str	r3, [r2, #44]	; 0x2c
 800bde8:	e005      	b.n	800bdf6 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 800bdea:	4b12      	ldr	r3, [pc, #72]	; (800be34 <RCCEx_PLL3_Config+0x15c>)
 800bdec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bdee:	4a11      	ldr	r2, [pc, #68]	; (800be34 <RCCEx_PLL3_Config+0x15c>)
 800bdf0:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800bdf4:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 800bdf6:	4b0f      	ldr	r3, [pc, #60]	; (800be34 <RCCEx_PLL3_Config+0x15c>)
 800bdf8:	681b      	ldr	r3, [r3, #0]
 800bdfa:	4a0e      	ldr	r2, [pc, #56]	; (800be34 <RCCEx_PLL3_Config+0x15c>)
 800bdfc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800be00:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800be02:	f7fb fd9d 	bl	8007940 <HAL_GetTick>
 800be06:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800be08:	e008      	b.n	800be1c <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800be0a:	f7fb fd99 	bl	8007940 <HAL_GetTick>
 800be0e:	4602      	mov	r2, r0
 800be10:	68bb      	ldr	r3, [r7, #8]
 800be12:	1ad3      	subs	r3, r2, r3
 800be14:	2b02      	cmp	r3, #2
 800be16:	d901      	bls.n	800be1c <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 800be18:	2303      	movs	r3, #3
 800be1a:	e006      	b.n	800be2a <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800be1c:	4b05      	ldr	r3, [pc, #20]	; (800be34 <RCCEx_PLL3_Config+0x15c>)
 800be1e:	681b      	ldr	r3, [r3, #0]
 800be20:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800be24:	2b00      	cmp	r3, #0
 800be26:	d0f0      	beq.n	800be0a <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 800be28:	7bfb      	ldrb	r3, [r7, #15]
}
 800be2a:	4618      	mov	r0, r3
 800be2c:	3710      	adds	r7, #16
 800be2e:	46bd      	mov	sp, r7
 800be30:	bd80      	pop	{r7, pc}
 800be32:	bf00      	nop
 800be34:	58024400 	.word	0x58024400
 800be38:	ffff0007 	.word	0xffff0007

0800be3c <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd: Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 800be3c:	b580      	push	{r7, lr}
 800be3e:	b08a      	sub	sp, #40	; 0x28
 800be40:	af00      	add	r7, sp, #0
 800be42:	6078      	str	r0, [r7, #4]
  uint32_t speedgrade;
  uint32_t unitsize;
  uint32_t tickstart;

  /* Check the SD handle allocation */
  if (hsd == NULL)
 800be44:	687b      	ldr	r3, [r7, #4]
 800be46:	2b00      	cmp	r3, #0
 800be48:	d101      	bne.n	800be4e <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 800be4a:	2301      	movs	r3, #1
 800be4c:	e075      	b.n	800bf3a <HAL_SD_Init+0xfe>
  assert_param(IS_SDMMC_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDMMC_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(hsd->Init.ClockDiv));

  if (hsd->State == HAL_SD_STATE_RESET)
 800be4e:	687b      	ldr	r3, [r7, #4]
 800be50:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800be54:	b2db      	uxtb	r3, r3
 800be56:	2b00      	cmp	r3, #0
 800be58:	d105      	bne.n	800be66 <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 800be5a:	687b      	ldr	r3, [r7, #4]
 800be5c:	2200      	movs	r2, #0
 800be5e:	761a      	strb	r2, [r3, #24]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 800be60:	6878      	ldr	r0, [r7, #4]
 800be62:	f7f5 f907 	bl	8001074 <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_PROGRAMMING;
 800be66:	687b      	ldr	r3, [r7, #4]
 800be68:	2204      	movs	r2, #4
 800be6a:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 800be6e:	6878      	ldr	r0, [r7, #4]
 800be70:	f000 f868 	bl	800bf44 <HAL_SD_InitCard>
 800be74:	4603      	mov	r3, r0
 800be76:	2b00      	cmp	r3, #0
 800be78:	d001      	beq.n	800be7e <HAL_SD_Init+0x42>
  {
    return HAL_ERROR;
 800be7a:	2301      	movs	r3, #1
 800be7c:	e05d      	b.n	800bf3a <HAL_SD_Init+0xfe>
  }

  if (HAL_SD_GetCardStatus(hsd, &CardStatus) != HAL_OK)
 800be7e:	f107 0308 	add.w	r3, r7, #8
 800be82:	4619      	mov	r1, r3
 800be84:	6878      	ldr	r0, [r7, #4]
 800be86:	f000 fdaf 	bl	800c9e8 <HAL_SD_GetCardStatus>
 800be8a:	4603      	mov	r3, r0
 800be8c:	2b00      	cmp	r3, #0
 800be8e:	d001      	beq.n	800be94 <HAL_SD_Init+0x58>
  {
    return HAL_ERROR;
 800be90:	2301      	movs	r3, #1
 800be92:	e052      	b.n	800bf3a <HAL_SD_Init+0xfe>
  }
  /* Get Initial Card Speed from Card Status*/
  speedgrade = CardStatus.UhsSpeedGrade;
 800be94:	7e3b      	ldrb	r3, [r7, #24]
 800be96:	b2db      	uxtb	r3, r3
 800be98:	627b      	str	r3, [r7, #36]	; 0x24
  unitsize = CardStatus.UhsAllocationUnitSize;
 800be9a:	7e7b      	ldrb	r3, [r7, #25]
 800be9c:	b2db      	uxtb	r3, r3
 800be9e:	623b      	str	r3, [r7, #32]
  if ((hsd->SdCard.CardType == CARD_SDHC_SDXC) && ((speedgrade != 0U) || (unitsize != 0U)))
 800bea0:	687b      	ldr	r3, [r7, #4]
 800bea2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bea4:	2b01      	cmp	r3, #1
 800bea6:	d10a      	bne.n	800bebe <HAL_SD_Init+0x82>
 800bea8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800beaa:	2b00      	cmp	r3, #0
 800beac:	d102      	bne.n	800beb4 <HAL_SD_Init+0x78>
 800beae:	6a3b      	ldr	r3, [r7, #32]
 800beb0:	2b00      	cmp	r3, #0
 800beb2:	d004      	beq.n	800bebe <HAL_SD_Init+0x82>
  {
    hsd->SdCard.CardSpeed = CARD_ULTRA_HIGH_SPEED;
 800beb4:	687b      	ldr	r3, [r7, #4]
 800beb6:	f44f 7200 	mov.w	r2, #512	; 0x200
 800beba:	659a      	str	r2, [r3, #88]	; 0x58
 800bebc:	e00b      	b.n	800bed6 <HAL_SD_Init+0x9a>
  }
  else
  {
    if (hsd->SdCard.CardType == CARD_SDHC_SDXC)
 800bebe:	687b      	ldr	r3, [r7, #4]
 800bec0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bec2:	2b01      	cmp	r3, #1
 800bec4:	d104      	bne.n	800bed0 <HAL_SD_Init+0x94>
    {
      hsd->SdCard.CardSpeed  = CARD_HIGH_SPEED;
 800bec6:	687b      	ldr	r3, [r7, #4]
 800bec8:	f44f 7280 	mov.w	r2, #256	; 0x100
 800becc:	659a      	str	r2, [r3, #88]	; 0x58
 800bece:	e002      	b.n	800bed6 <HAL_SD_Init+0x9a>
    }
    else
    {
      hsd->SdCard.CardSpeed  = CARD_NORMAL_SPEED;
 800bed0:	687b      	ldr	r3, [r7, #4]
 800bed2:	2200      	movs	r2, #0
 800bed4:	659a      	str	r2, [r3, #88]	; 0x58
    }

  }
  /* Configure the bus wide */
  if (HAL_SD_ConfigWideBusOperation(hsd, hsd->Init.BusWide) != HAL_OK)
 800bed6:	687b      	ldr	r3, [r7, #4]
 800bed8:	68db      	ldr	r3, [r3, #12]
 800beda:	4619      	mov	r1, r3
 800bedc:	6878      	ldr	r0, [r7, #4]
 800bede:	f000 fe6d 	bl	800cbbc <HAL_SD_ConfigWideBusOperation>
 800bee2:	4603      	mov	r3, r0
 800bee4:	2b00      	cmp	r3, #0
 800bee6:	d001      	beq.n	800beec <HAL_SD_Init+0xb0>
  {
    return HAL_ERROR;
 800bee8:	2301      	movs	r3, #1
 800beea:	e026      	b.n	800bf3a <HAL_SD_Init+0xfe>
  }

  /* Verify that SD card is ready to use after Initialization */
  tickstart = HAL_GetTick();
 800beec:	f7fb fd28 	bl	8007940 <HAL_GetTick>
 800bef0:	61f8      	str	r0, [r7, #28]
  while ((HAL_SD_GetCardState(hsd) != HAL_SD_CARD_TRANSFER))
 800bef2:	e011      	b.n	800bf18 <HAL_SD_Init+0xdc>
  {
    if ((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 800bef4:	f7fb fd24 	bl	8007940 <HAL_GetTick>
 800bef8:	4602      	mov	r2, r0
 800befa:	69fb      	ldr	r3, [r7, #28]
 800befc:	1ad3      	subs	r3, r2, r3
 800befe:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bf02:	d109      	bne.n	800bf18 <HAL_SD_Init+0xdc>
    {
      hsd->ErrorCode = HAL_SD_ERROR_TIMEOUT;
 800bf04:	687b      	ldr	r3, [r7, #4]
 800bf06:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800bf0a:	635a      	str	r2, [r3, #52]	; 0x34
      hsd->State = HAL_SD_STATE_READY;
 800bf0c:	687b      	ldr	r3, [r7, #4]
 800bf0e:	2201      	movs	r2, #1
 800bf10:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      return HAL_TIMEOUT;
 800bf14:	2303      	movs	r3, #3
 800bf16:	e010      	b.n	800bf3a <HAL_SD_Init+0xfe>
  while ((HAL_SD_GetCardState(hsd) != HAL_SD_CARD_TRANSFER))
 800bf18:	6878      	ldr	r0, [r7, #4]
 800bf1a:	f000 ff61 	bl	800cde0 <HAL_SD_GetCardState>
 800bf1e:	4603      	mov	r3, r0
 800bf20:	2b04      	cmp	r3, #4
 800bf22:	d1e7      	bne.n	800bef4 <HAL_SD_Init+0xb8>
    }
  }

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800bf24:	687b      	ldr	r3, [r7, #4]
 800bf26:	2200      	movs	r2, #0
 800bf28:	635a      	str	r2, [r3, #52]	; 0x34

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 800bf2a:	687b      	ldr	r3, [r7, #4]
 800bf2c:	2200      	movs	r2, #0
 800bf2e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 800bf30:	687b      	ldr	r3, [r7, #4]
 800bf32:	2201      	movs	r2, #1
 800bf34:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

  return HAL_OK;
 800bf38:	2300      	movs	r3, #0
}
 800bf3a:	4618      	mov	r0, r3
 800bf3c:	3728      	adds	r7, #40	; 0x28
 800bf3e:	46bd      	mov	sp, r7
 800bf40:	bd80      	pop	{r7, pc}
	...

0800bf44 <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 800bf44:	b590      	push	{r4, r7, lr}
 800bf46:	b08d      	sub	sp, #52	; 0x34
 800bf48:	af02      	add	r7, sp, #8
 800bf4a:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  SD_InitTypeDef Init;
  uint32_t sdmmc_clk;

  /* Default SDMMC peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDMMC_CLOCK_EDGE_RISING;
 800bf4c:	2300      	movs	r3, #0
 800bf4e:	60fb      	str	r3, [r7, #12]
  Init.ClockPowerSave      = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 800bf50:	2300      	movs	r3, #0
 800bf52:	613b      	str	r3, [r7, #16]
  Init.BusWide             = SDMMC_BUS_WIDE_1B;
 800bf54:	2300      	movs	r3, #0
 800bf56:	617b      	str	r3, [r7, #20]
  Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 800bf58:	2300      	movs	r3, #0
 800bf5a:	61bb      	str	r3, [r7, #24]

  /* Init Clock should be less or equal to 400Khz*/
  sdmmc_clk     = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SDMMC);
 800bf5c:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 800bf60:	f04f 0100 	mov.w	r1, #0
 800bf64:	f7fe fc76 	bl	800a854 <HAL_RCCEx_GetPeriphCLKFreq>
 800bf68:	6278      	str	r0, [r7, #36]	; 0x24
  if (sdmmc_clk == 0U)
 800bf6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bf6c:	2b00      	cmp	r3, #0
 800bf6e:	d109      	bne.n	800bf84 <HAL_SD_InitCard+0x40>
  {
    hsd->State = HAL_SD_STATE_READY;
 800bf70:	687b      	ldr	r3, [r7, #4]
 800bf72:	2201      	movs	r2, #1
 800bf74:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    hsd->ErrorCode = SDMMC_ERROR_INVALID_PARAMETER;
 800bf78:	687b      	ldr	r3, [r7, #4]
 800bf7a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800bf7e:	635a      	str	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 800bf80:	2301      	movs	r3, #1
 800bf82:	e070      	b.n	800c066 <HAL_SD_InitCard+0x122>
  }
  Init.ClockDiv = sdmmc_clk / (2U * SD_INIT_FREQ);
 800bf84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bf86:	0a1b      	lsrs	r3, r3, #8
 800bf88:	4a39      	ldr	r2, [pc, #228]	; (800c070 <HAL_SD_InitCard+0x12c>)
 800bf8a:	fba2 2303 	umull	r2, r3, r2, r3
 800bf8e:	091b      	lsrs	r3, r3, #4
 800bf90:	61fb      	str	r3, [r7, #28]
  /* Set Transceiver polarity */
  hsd->Instance->POWER |= SDMMC_POWER_DIRPOL;
#endif /* USE_SD_TRANSCEIVER  */

  /* Initialize SDMMC peripheral interface with default configuration */
  (void)SDMMC_Init(hsd->Instance, Init);
 800bf92:	687b      	ldr	r3, [r7, #4]
 800bf94:	681c      	ldr	r4, [r3, #0]
 800bf96:	466a      	mov	r2, sp
 800bf98:	f107 0318 	add.w	r3, r7, #24
 800bf9c:	e893 0003 	ldmia.w	r3, {r0, r1}
 800bfa0:	e882 0003 	stmia.w	r2, {r0, r1}
 800bfa4:	f107 030c 	add.w	r3, r7, #12
 800bfa8:	cb0e      	ldmia	r3, {r1, r2, r3}
 800bfaa:	4620      	mov	r0, r4
 800bfac:	f002 fc80 	bl	800e8b0 <SDMMC_Init>

  /* Set Power State to ON */
  (void)SDMMC_PowerState_ON(hsd->Instance);
 800bfb0:	687b      	ldr	r3, [r7, #4]
 800bfb2:	681b      	ldr	r3, [r3, #0]
 800bfb4:	4618      	mov	r0, r3
 800bfb6:	f002 fcc3 	bl	800e940 <SDMMC_PowerState_ON>

  /* wait 74 Cycles: required power up waiting time before starting
     the SD initialization sequence */
  if (Init.ClockDiv != 0U)
 800bfba:	69fb      	ldr	r3, [r7, #28]
 800bfbc:	2b00      	cmp	r3, #0
 800bfbe:	d005      	beq.n	800bfcc <HAL_SD_InitCard+0x88>
  {
    sdmmc_clk = sdmmc_clk / (2U * Init.ClockDiv);
 800bfc0:	69fb      	ldr	r3, [r7, #28]
 800bfc2:	005b      	lsls	r3, r3, #1
 800bfc4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800bfc6:	fbb2 f3f3 	udiv	r3, r2, r3
 800bfca:	627b      	str	r3, [r7, #36]	; 0x24
  }

  if (sdmmc_clk != 0U)
 800bfcc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bfce:	2b00      	cmp	r3, #0
 800bfd0:	d007      	beq.n	800bfe2 <HAL_SD_InitCard+0x9e>
  {
    HAL_Delay(1U + (74U * 1000U / (sdmmc_clk)));
 800bfd2:	4a28      	ldr	r2, [pc, #160]	; (800c074 <HAL_SD_InitCard+0x130>)
 800bfd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bfd6:	fbb2 f3f3 	udiv	r3, r2, r3
 800bfda:	3301      	adds	r3, #1
 800bfdc:	4618      	mov	r0, r3
 800bfde:	f7fb fcbb 	bl	8007958 <HAL_Delay>
  }

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 800bfe2:	6878      	ldr	r0, [r7, #4]
 800bfe4:	f000 ffea 	bl	800cfbc <SD_PowerON>
 800bfe8:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 800bfea:	6a3b      	ldr	r3, [r7, #32]
 800bfec:	2b00      	cmp	r3, #0
 800bfee:	d00b      	beq.n	800c008 <HAL_SD_InitCard+0xc4>
  {
    hsd->State = HAL_SD_STATE_READY;
 800bff0:	687b      	ldr	r3, [r7, #4]
 800bff2:	2201      	movs	r2, #1
 800bff4:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    hsd->ErrorCode |= errorstate;
 800bff8:	687b      	ldr	r3, [r7, #4]
 800bffa:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800bffc:	6a3b      	ldr	r3, [r7, #32]
 800bffe:	431a      	orrs	r2, r3
 800c000:	687b      	ldr	r3, [r7, #4]
 800c002:	635a      	str	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 800c004:	2301      	movs	r3, #1
 800c006:	e02e      	b.n	800c066 <HAL_SD_InitCard+0x122>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 800c008:	6878      	ldr	r0, [r7, #4]
 800c00a:	f000 ff09 	bl	800ce20 <SD_InitCard>
 800c00e:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 800c010:	6a3b      	ldr	r3, [r7, #32]
 800c012:	2b00      	cmp	r3, #0
 800c014:	d00b      	beq.n	800c02e <HAL_SD_InitCard+0xea>
  {
    hsd->State = HAL_SD_STATE_READY;
 800c016:	687b      	ldr	r3, [r7, #4]
 800c018:	2201      	movs	r2, #1
 800c01a:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    hsd->ErrorCode |= errorstate;
 800c01e:	687b      	ldr	r3, [r7, #4]
 800c020:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800c022:	6a3b      	ldr	r3, [r7, #32]
 800c024:	431a      	orrs	r2, r3
 800c026:	687b      	ldr	r3, [r7, #4]
 800c028:	635a      	str	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 800c02a:	2301      	movs	r3, #1
 800c02c:	e01b      	b.n	800c066 <HAL_SD_InitCard+0x122>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 800c02e:	687b      	ldr	r3, [r7, #4]
 800c030:	681b      	ldr	r3, [r3, #0]
 800c032:	f44f 7100 	mov.w	r1, #512	; 0x200
 800c036:	4618      	mov	r0, r3
 800c038:	f002 fd18 	bl	800ea6c <SDMMC_CmdBlockLength>
 800c03c:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 800c03e:	6a3b      	ldr	r3, [r7, #32]
 800c040:	2b00      	cmp	r3, #0
 800c042:	d00f      	beq.n	800c064 <HAL_SD_InitCard+0x120>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800c044:	687b      	ldr	r3, [r7, #4]
 800c046:	681b      	ldr	r3, [r3, #0]
 800c048:	4a0b      	ldr	r2, [pc, #44]	; (800c078 <HAL_SD_InitCard+0x134>)
 800c04a:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 800c04c:	687b      	ldr	r3, [r7, #4]
 800c04e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800c050:	6a3b      	ldr	r3, [r7, #32]
 800c052:	431a      	orrs	r2, r3
 800c054:	687b      	ldr	r3, [r7, #4]
 800c056:	635a      	str	r2, [r3, #52]	; 0x34
    hsd->State = HAL_SD_STATE_READY;
 800c058:	687b      	ldr	r3, [r7, #4]
 800c05a:	2201      	movs	r2, #1
 800c05c:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    return HAL_ERROR;
 800c060:	2301      	movs	r3, #1
 800c062:	e000      	b.n	800c066 <HAL_SD_InitCard+0x122>
  }

  return HAL_OK;
 800c064:	2300      	movs	r3, #0
}
 800c066:	4618      	mov	r0, r3
 800c068:	372c      	adds	r7, #44	; 0x2c
 800c06a:	46bd      	mov	sp, r7
 800c06c:	bd90      	pop	{r4, r7, pc}
 800c06e:	bf00      	nop
 800c070:	014f8b59 	.word	0x014f8b59
 800c074:	00012110 	.word	0x00012110
 800c078:	1fe00fff 	.word	0x1fe00fff

0800c07c <HAL_SD_ReadBlocks_DMA>:
  * @param  NumberOfBlocks: Number of blocks to read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ReadBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd,
                                        uint32_t NumberOfBlocks)
{
 800c07c:	b580      	push	{r7, lr}
 800c07e:	b08c      	sub	sp, #48	; 0x30
 800c080:	af00      	add	r7, sp, #0
 800c082:	60f8      	str	r0, [r7, #12]
 800c084:	60b9      	str	r1, [r7, #8]
 800c086:	607a      	str	r2, [r7, #4]
 800c088:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 800c08a:	687b      	ldr	r3, [r7, #4]
 800c08c:	62bb      	str	r3, [r7, #40]	; 0x28

  if (NULL == pData)
 800c08e:	68bb      	ldr	r3, [r7, #8]
 800c090:	2b00      	cmp	r3, #0
 800c092:	d107      	bne.n	800c0a4 <HAL_SD_ReadBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800c094:	68fb      	ldr	r3, [r7, #12]
 800c096:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c098:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800c09c:	68fb      	ldr	r3, [r7, #12]
 800c09e:	635a      	str	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 800c0a0:	2301      	movs	r3, #1
 800c0a2:	e08d      	b.n	800c1c0 <HAL_SD_ReadBlocks_DMA+0x144>
  }

  if (hsd->State == HAL_SD_STATE_READY)
 800c0a4:	68fb      	ldr	r3, [r7, #12]
 800c0a6:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800c0aa:	b2db      	uxtb	r3, r3
 800c0ac:	2b01      	cmp	r3, #1
 800c0ae:	f040 8086 	bne.w	800c1be <HAL_SD_ReadBlocks_DMA+0x142>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800c0b2:	68fb      	ldr	r3, [r7, #12]
 800c0b4:	2200      	movs	r2, #0
 800c0b6:	635a      	str	r2, [r3, #52]	; 0x34

    if ((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 800c0b8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800c0ba:	683b      	ldr	r3, [r7, #0]
 800c0bc:	441a      	add	r2, r3
 800c0be:	68fb      	ldr	r3, [r7, #12]
 800c0c0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c0c2:	429a      	cmp	r2, r3
 800c0c4:	d907      	bls.n	800c0d6 <HAL_SD_ReadBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 800c0c6:	68fb      	ldr	r3, [r7, #12]
 800c0c8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c0ca:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 800c0ce:	68fb      	ldr	r3, [r7, #12]
 800c0d0:	635a      	str	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 800c0d2:	2301      	movs	r3, #1
 800c0d4:	e074      	b.n	800c1c0 <HAL_SD_ReadBlocks_DMA+0x144>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 800c0d6:	68fb      	ldr	r3, [r7, #12]
 800c0d8:	2203      	movs	r2, #3
 800c0da:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 800c0de:	68fb      	ldr	r3, [r7, #12]
 800c0e0:	681b      	ldr	r3, [r3, #0]
 800c0e2:	2200      	movs	r2, #0
 800c0e4:	62da      	str	r2, [r3, #44]	; 0x2c

    hsd->pRxBuffPtr = pData;
 800c0e6:	68fb      	ldr	r3, [r7, #12]
 800c0e8:	68ba      	ldr	r2, [r7, #8]
 800c0ea:	625a      	str	r2, [r3, #36]	; 0x24
    hsd->RxXferSize = BLOCKSIZE * NumberOfBlocks;
 800c0ec:	683b      	ldr	r3, [r7, #0]
 800c0ee:	025a      	lsls	r2, r3, #9
 800c0f0:	68fb      	ldr	r3, [r7, #12]
 800c0f2:	629a      	str	r2, [r3, #40]	; 0x28

    if (hsd->SdCard.CardType != CARD_SDHC_SDXC)
 800c0f4:	68fb      	ldr	r3, [r7, #12]
 800c0f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c0f8:	2b01      	cmp	r3, #1
 800c0fa:	d002      	beq.n	800c102 <HAL_SD_ReadBlocks_DMA+0x86>
    {
      add *= 512U;
 800c0fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c0fe:	025b      	lsls	r3, r3, #9
 800c100:	62bb      	str	r3, [r7, #40]	; 0x28
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800c102:	f04f 33ff 	mov.w	r3, #4294967295
 800c106:	613b      	str	r3, [r7, #16]
    config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 800c108:	683b      	ldr	r3, [r7, #0]
 800c10a:	025b      	lsls	r3, r3, #9
 800c10c:	617b      	str	r3, [r7, #20]
    config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 800c10e:	2390      	movs	r3, #144	; 0x90
 800c110:	61bb      	str	r3, [r7, #24]
    config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 800c112:	2302      	movs	r3, #2
 800c114:	61fb      	str	r3, [r7, #28]
    config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 800c116:	2300      	movs	r3, #0
 800c118:	623b      	str	r3, [r7, #32]
    config.DPSM          = SDMMC_DPSM_DISABLE;
 800c11a:	2300      	movs	r3, #0
 800c11c:	627b      	str	r3, [r7, #36]	; 0x24
    (void)SDMMC_ConfigData(hsd->Instance, &config);
 800c11e:	68fb      	ldr	r3, [r7, #12]
 800c120:	681b      	ldr	r3, [r3, #0]
 800c122:	f107 0210 	add.w	r2, r7, #16
 800c126:	4611      	mov	r1, r2
 800c128:	4618      	mov	r0, r3
 800c12a:	f002 fc73 	bl	800ea14 <SDMMC_ConfigData>

    __SDMMC_CMDTRANS_ENABLE(hsd->Instance);
 800c12e:	68fb      	ldr	r3, [r7, #12]
 800c130:	681b      	ldr	r3, [r3, #0]
 800c132:	68da      	ldr	r2, [r3, #12]
 800c134:	68fb      	ldr	r3, [r7, #12]
 800c136:	681b      	ldr	r3, [r3, #0]
 800c138:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800c13c:	60da      	str	r2, [r3, #12]
    hsd->Instance->IDMABASE0 = (uint32_t) pData ;
 800c13e:	68fb      	ldr	r3, [r7, #12]
 800c140:	681b      	ldr	r3, [r3, #0]
 800c142:	68ba      	ldr	r2, [r7, #8]
 800c144:	659a      	str	r2, [r3, #88]	; 0x58
    hsd->Instance->IDMACTRL  = SDMMC_ENABLE_IDMA_SINGLE_BUFF;
 800c146:	68fb      	ldr	r3, [r7, #12]
 800c148:	681b      	ldr	r3, [r3, #0]
 800c14a:	2201      	movs	r2, #1
 800c14c:	651a      	str	r2, [r3, #80]	; 0x50

    /* Read Blocks in DMA mode */
    if (NumberOfBlocks > 1U)
 800c14e:	683b      	ldr	r3, [r7, #0]
 800c150:	2b01      	cmp	r3, #1
 800c152:	d90a      	bls.n	800c16a <HAL_SD_ReadBlocks_DMA+0xee>
    {
      hsd->Context = (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 800c154:	68fb      	ldr	r3, [r7, #12]
 800c156:	2282      	movs	r2, #130	; 0x82
 800c158:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Read Multi Block command */
      errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 800c15a:	68fb      	ldr	r3, [r7, #12]
 800c15c:	681b      	ldr	r3, [r3, #0]
 800c15e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800c160:	4618      	mov	r0, r3
 800c162:	f002 fcc9 	bl	800eaf8 <SDMMC_CmdReadMultiBlock>
 800c166:	62f8      	str	r0, [r7, #44]	; 0x2c
 800c168:	e009      	b.n	800c17e <HAL_SD_ReadBlocks_DMA+0x102>
    }
    else
    {
      hsd->Context = (SD_CONTEXT_READ_SINGLE_BLOCK | SD_CONTEXT_DMA);
 800c16a:	68fb      	ldr	r3, [r7, #12]
 800c16c:	2281      	movs	r2, #129	; 0x81
 800c16e:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Read Single Block command */
      errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 800c170:	68fb      	ldr	r3, [r7, #12]
 800c172:	681b      	ldr	r3, [r3, #0]
 800c174:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800c176:	4618      	mov	r0, r3
 800c178:	f002 fc9b 	bl	800eab2 <SDMMC_CmdReadSingleBlock>
 800c17c:	62f8      	str	r0, [r7, #44]	; 0x2c
    }
    if (errorstate != HAL_SD_ERROR_NONE)
 800c17e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c180:	2b00      	cmp	r3, #0
 800c182:	d012      	beq.n	800c1aa <HAL_SD_ReadBlocks_DMA+0x12e>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800c184:	68fb      	ldr	r3, [r7, #12]
 800c186:	681b      	ldr	r3, [r3, #0]
 800c188:	4a0f      	ldr	r2, [pc, #60]	; (800c1c8 <HAL_SD_ReadBlocks_DMA+0x14c>)
 800c18a:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 800c18c:	68fb      	ldr	r3, [r7, #12]
 800c18e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800c190:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c192:	431a      	orrs	r2, r3
 800c194:	68fb      	ldr	r3, [r7, #12]
 800c196:	635a      	str	r2, [r3, #52]	; 0x34
      hsd->State = HAL_SD_STATE_READY;
 800c198:	68fb      	ldr	r3, [r7, #12]
 800c19a:	2201      	movs	r2, #1
 800c19c:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      hsd->Context = SD_CONTEXT_NONE;
 800c1a0:	68fb      	ldr	r3, [r7, #12]
 800c1a2:	2200      	movs	r2, #0
 800c1a4:	62da      	str	r2, [r3, #44]	; 0x2c
      return HAL_ERROR;
 800c1a6:	2301      	movs	r3, #1
 800c1a8:	e00a      	b.n	800c1c0 <HAL_SD_ReadBlocks_DMA+0x144>
    }

    /* Enable transfer interrupts */
    __HAL_SD_ENABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_RXOVERR | SDMMC_IT_DATAEND));
 800c1aa:	68fb      	ldr	r3, [r7, #12]
 800c1ac:	681b      	ldr	r3, [r3, #0]
 800c1ae:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800c1b0:	68fb      	ldr	r3, [r7, #12]
 800c1b2:	681b      	ldr	r3, [r3, #0]
 800c1b4:	f442 7295 	orr.w	r2, r2, #298	; 0x12a
 800c1b8:	63da      	str	r2, [r3, #60]	; 0x3c


    return HAL_OK;
 800c1ba:	2300      	movs	r3, #0
 800c1bc:	e000      	b.n	800c1c0 <HAL_SD_ReadBlocks_DMA+0x144>
  }
  else
  {
    return HAL_BUSY;
 800c1be:	2302      	movs	r3, #2
  }
}
 800c1c0:	4618      	mov	r0, r3
 800c1c2:	3730      	adds	r7, #48	; 0x30
 800c1c4:	46bd      	mov	sp, r7
 800c1c6:	bd80      	pop	{r7, pc}
 800c1c8:	1fe00fff 	.word	0x1fe00fff

0800c1cc <HAL_SD_WriteBlocks_DMA>:
  * @param  NumberOfBlocks: Number of blocks to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_WriteBlocks_DMA(SD_HandleTypeDef *hsd, const uint8_t *pData, uint32_t BlockAdd,
                                         uint32_t NumberOfBlocks)
{
 800c1cc:	b580      	push	{r7, lr}
 800c1ce:	b08c      	sub	sp, #48	; 0x30
 800c1d0:	af00      	add	r7, sp, #0
 800c1d2:	60f8      	str	r0, [r7, #12]
 800c1d4:	60b9      	str	r1, [r7, #8]
 800c1d6:	607a      	str	r2, [r7, #4]
 800c1d8:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 800c1da:	687b      	ldr	r3, [r7, #4]
 800c1dc:	62bb      	str	r3, [r7, #40]	; 0x28

  if (NULL == pData)
 800c1de:	68bb      	ldr	r3, [r7, #8]
 800c1e0:	2b00      	cmp	r3, #0
 800c1e2:	d107      	bne.n	800c1f4 <HAL_SD_WriteBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800c1e4:	68fb      	ldr	r3, [r7, #12]
 800c1e6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c1e8:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800c1ec:	68fb      	ldr	r3, [r7, #12]
 800c1ee:	635a      	str	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 800c1f0:	2301      	movs	r3, #1
 800c1f2:	e08d      	b.n	800c310 <HAL_SD_WriteBlocks_DMA+0x144>
  }

  if (hsd->State == HAL_SD_STATE_READY)
 800c1f4:	68fb      	ldr	r3, [r7, #12]
 800c1f6:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800c1fa:	b2db      	uxtb	r3, r3
 800c1fc:	2b01      	cmp	r3, #1
 800c1fe:	f040 8086 	bne.w	800c30e <HAL_SD_WriteBlocks_DMA+0x142>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800c202:	68fb      	ldr	r3, [r7, #12]
 800c204:	2200      	movs	r2, #0
 800c206:	635a      	str	r2, [r3, #52]	; 0x34

    if ((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 800c208:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800c20a:	683b      	ldr	r3, [r7, #0]
 800c20c:	441a      	add	r2, r3
 800c20e:	68fb      	ldr	r3, [r7, #12]
 800c210:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c212:	429a      	cmp	r2, r3
 800c214:	d907      	bls.n	800c226 <HAL_SD_WriteBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 800c216:	68fb      	ldr	r3, [r7, #12]
 800c218:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c21a:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 800c21e:	68fb      	ldr	r3, [r7, #12]
 800c220:	635a      	str	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 800c222:	2301      	movs	r3, #1
 800c224:	e074      	b.n	800c310 <HAL_SD_WriteBlocks_DMA+0x144>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 800c226:	68fb      	ldr	r3, [r7, #12]
 800c228:	2203      	movs	r2, #3
 800c22a:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 800c22e:	68fb      	ldr	r3, [r7, #12]
 800c230:	681b      	ldr	r3, [r3, #0]
 800c232:	2200      	movs	r2, #0
 800c234:	62da      	str	r2, [r3, #44]	; 0x2c

    hsd->pTxBuffPtr = pData;
 800c236:	68fb      	ldr	r3, [r7, #12]
 800c238:	68ba      	ldr	r2, [r7, #8]
 800c23a:	61da      	str	r2, [r3, #28]
    hsd->TxXferSize = BLOCKSIZE * NumberOfBlocks;
 800c23c:	683b      	ldr	r3, [r7, #0]
 800c23e:	025a      	lsls	r2, r3, #9
 800c240:	68fb      	ldr	r3, [r7, #12]
 800c242:	621a      	str	r2, [r3, #32]

    if (hsd->SdCard.CardType != CARD_SDHC_SDXC)
 800c244:	68fb      	ldr	r3, [r7, #12]
 800c246:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c248:	2b01      	cmp	r3, #1
 800c24a:	d002      	beq.n	800c252 <HAL_SD_WriteBlocks_DMA+0x86>
    {
      add *= 512U;
 800c24c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c24e:	025b      	lsls	r3, r3, #9
 800c250:	62bb      	str	r3, [r7, #40]	; 0x28
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800c252:	f04f 33ff 	mov.w	r3, #4294967295
 800c256:	613b      	str	r3, [r7, #16]
    config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 800c258:	683b      	ldr	r3, [r7, #0]
 800c25a:	025b      	lsls	r3, r3, #9
 800c25c:	617b      	str	r3, [r7, #20]
    config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 800c25e:	2390      	movs	r3, #144	; 0x90
 800c260:	61bb      	str	r3, [r7, #24]
    config.TransferDir   = SDMMC_TRANSFER_DIR_TO_CARD;
 800c262:	2300      	movs	r3, #0
 800c264:	61fb      	str	r3, [r7, #28]
    config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 800c266:	2300      	movs	r3, #0
 800c268:	623b      	str	r3, [r7, #32]
    config.DPSM          = SDMMC_DPSM_DISABLE;
 800c26a:	2300      	movs	r3, #0
 800c26c:	627b      	str	r3, [r7, #36]	; 0x24
    (void)SDMMC_ConfigData(hsd->Instance, &config);
 800c26e:	68fb      	ldr	r3, [r7, #12]
 800c270:	681b      	ldr	r3, [r3, #0]
 800c272:	f107 0210 	add.w	r2, r7, #16
 800c276:	4611      	mov	r1, r2
 800c278:	4618      	mov	r0, r3
 800c27a:	f002 fbcb 	bl	800ea14 <SDMMC_ConfigData>


    __SDMMC_CMDTRANS_ENABLE(hsd->Instance);
 800c27e:	68fb      	ldr	r3, [r7, #12]
 800c280:	681b      	ldr	r3, [r3, #0]
 800c282:	68da      	ldr	r2, [r3, #12]
 800c284:	68fb      	ldr	r3, [r7, #12]
 800c286:	681b      	ldr	r3, [r3, #0]
 800c288:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800c28c:	60da      	str	r2, [r3, #12]

    hsd->Instance->IDMABASE0 = (uint32_t) pData ;
 800c28e:	68fb      	ldr	r3, [r7, #12]
 800c290:	681b      	ldr	r3, [r3, #0]
 800c292:	68ba      	ldr	r2, [r7, #8]
 800c294:	659a      	str	r2, [r3, #88]	; 0x58
    hsd->Instance->IDMACTRL  = SDMMC_ENABLE_IDMA_SINGLE_BUFF;
 800c296:	68fb      	ldr	r3, [r7, #12]
 800c298:	681b      	ldr	r3, [r3, #0]
 800c29a:	2201      	movs	r2, #1
 800c29c:	651a      	str	r2, [r3, #80]	; 0x50

    /* Write Blocks in Polling mode */
    if (NumberOfBlocks > 1U)
 800c29e:	683b      	ldr	r3, [r7, #0]
 800c2a0:	2b01      	cmp	r3, #1
 800c2a2:	d90a      	bls.n	800c2ba <HAL_SD_WriteBlocks_DMA+0xee>
    {
      hsd->Context = (SD_CONTEXT_WRITE_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 800c2a4:	68fb      	ldr	r3, [r7, #12]
 800c2a6:	22a0      	movs	r2, #160	; 0xa0
 800c2a8:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Write Multi Block command */
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 800c2aa:	68fb      	ldr	r3, [r7, #12]
 800c2ac:	681b      	ldr	r3, [r3, #0]
 800c2ae:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800c2b0:	4618      	mov	r0, r3
 800c2b2:	f002 fc67 	bl	800eb84 <SDMMC_CmdWriteMultiBlock>
 800c2b6:	62f8      	str	r0, [r7, #44]	; 0x2c
 800c2b8:	e009      	b.n	800c2ce <HAL_SD_WriteBlocks_DMA+0x102>
    }
    else
    {
      hsd->Context = (SD_CONTEXT_WRITE_SINGLE_BLOCK | SD_CONTEXT_DMA);
 800c2ba:	68fb      	ldr	r3, [r7, #12]
 800c2bc:	2290      	movs	r2, #144	; 0x90
 800c2be:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Write Single Block command */
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 800c2c0:	68fb      	ldr	r3, [r7, #12]
 800c2c2:	681b      	ldr	r3, [r3, #0]
 800c2c4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800c2c6:	4618      	mov	r0, r3
 800c2c8:	f002 fc39 	bl	800eb3e <SDMMC_CmdWriteSingleBlock>
 800c2cc:	62f8      	str	r0, [r7, #44]	; 0x2c
    }
    if (errorstate != HAL_SD_ERROR_NONE)
 800c2ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c2d0:	2b00      	cmp	r3, #0
 800c2d2:	d012      	beq.n	800c2fa <HAL_SD_WriteBlocks_DMA+0x12e>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800c2d4:	68fb      	ldr	r3, [r7, #12]
 800c2d6:	681b      	ldr	r3, [r3, #0]
 800c2d8:	4a0f      	ldr	r2, [pc, #60]	; (800c318 <HAL_SD_WriteBlocks_DMA+0x14c>)
 800c2da:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 800c2dc:	68fb      	ldr	r3, [r7, #12]
 800c2de:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800c2e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c2e2:	431a      	orrs	r2, r3
 800c2e4:	68fb      	ldr	r3, [r7, #12]
 800c2e6:	635a      	str	r2, [r3, #52]	; 0x34
      hsd->State = HAL_SD_STATE_READY;
 800c2e8:	68fb      	ldr	r3, [r7, #12]
 800c2ea:	2201      	movs	r2, #1
 800c2ec:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      hsd->Context = SD_CONTEXT_NONE;
 800c2f0:	68fb      	ldr	r3, [r7, #12]
 800c2f2:	2200      	movs	r2, #0
 800c2f4:	62da      	str	r2, [r3, #44]	; 0x2c
      return HAL_ERROR;
 800c2f6:	2301      	movs	r3, #1
 800c2f8:	e00a      	b.n	800c310 <HAL_SD_WriteBlocks_DMA+0x144>
    }

    /* Enable transfer interrupts */
    __HAL_SD_ENABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_TXUNDERR | SDMMC_IT_DATAEND));
 800c2fa:	68fb      	ldr	r3, [r7, #12]
 800c2fc:	681b      	ldr	r3, [r3, #0]
 800c2fe:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800c300:	68fb      	ldr	r3, [r7, #12]
 800c302:	681b      	ldr	r3, [r3, #0]
 800c304:	f442 728d 	orr.w	r2, r2, #282	; 0x11a
 800c308:	63da      	str	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800c30a:	2300      	movs	r3, #0
 800c30c:	e000      	b.n	800c310 <HAL_SD_WriteBlocks_DMA+0x144>
  }
  else
  {
    return HAL_BUSY;
 800c30e:	2302      	movs	r3, #2
  }
}
 800c310:	4618      	mov	r0, r3
 800c312:	3730      	adds	r7, #48	; 0x30
 800c314:	46bd      	mov	sp, r7
 800c316:	bd80      	pop	{r7, pc}
 800c318:	1fe00fff 	.word	0x1fe00fff

0800c31c <HAL_SD_IRQHandler>:
  * @brief  This function handles SD card interrupt request.
  * @param  hsd: Pointer to SD handle
  * @retval None
  */
void HAL_SD_IRQHandler(SD_HandleTypeDef *hsd)
{
 800c31c:	b580      	push	{r7, lr}
 800c31e:	b084      	sub	sp, #16
 800c320:	af00      	add	r7, sp, #0
 800c322:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  uint32_t context = hsd->Context;
 800c324:	687b      	ldr	r3, [r7, #4]
 800c326:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c328:	60fb      	str	r3, [r7, #12]

  /* Check for SDMMC interrupt flags */
  if ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 800c32a:	687b      	ldr	r3, [r7, #4]
 800c32c:	681b      	ldr	r3, [r3, #0]
 800c32e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c330:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800c334:	2b00      	cmp	r3, #0
 800c336:	d008      	beq.n	800c34a <HAL_SD_IRQHandler+0x2e>
 800c338:	68fb      	ldr	r3, [r7, #12]
 800c33a:	f003 0308 	and.w	r3, r3, #8
 800c33e:	2b00      	cmp	r3, #0
 800c340:	d003      	beq.n	800c34a <HAL_SD_IRQHandler+0x2e>
  {
    SD_Read_IT(hsd);
 800c342:	6878      	ldr	r0, [r7, #4]
 800c344:	f001 f926 	bl	800d594 <SD_Read_IT>
 800c348:	e19a      	b.n	800c680 <HAL_SD_IRQHandler+0x364>
  }

  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DATAEND) != RESET)
 800c34a:	687b      	ldr	r3, [r7, #4]
 800c34c:	681b      	ldr	r3, [r3, #0]
 800c34e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c350:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c354:	2b00      	cmp	r3, #0
 800c356:	f000 80ac 	beq.w	800c4b2 <HAL_SD_IRQHandler+0x196>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DATAEND);
 800c35a:	687b      	ldr	r3, [r7, #4]
 800c35c:	681b      	ldr	r3, [r3, #0]
 800c35e:	f44f 7280 	mov.w	r2, #256	; 0x100
 800c362:	639a      	str	r2, [r3, #56]	; 0x38

    __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_DATAEND  | SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | \
 800c364:	687b      	ldr	r3, [r7, #4]
 800c366:	681b      	ldr	r3, [r3, #0]
 800c368:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 800c36a:	687b      	ldr	r3, [r7, #4]
 800c36c:	681a      	ldr	r2, [r3, #0]
 800c36e:	4b59      	ldr	r3, [pc, #356]	; (800c4d4 <HAL_SD_IRQHandler+0x1b8>)
 800c370:	400b      	ands	r3, r1
 800c372:	63d3      	str	r3, [r2, #60]	; 0x3c
                        SDMMC_IT_TXUNDERR | SDMMC_IT_RXOVERR  | SDMMC_IT_TXFIFOHE | \
                        SDMMC_IT_RXFIFOHF);

    __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_IDMABTC);
 800c374:	687b      	ldr	r3, [r7, #4]
 800c376:	681b      	ldr	r3, [r3, #0]
 800c378:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800c37a:	687b      	ldr	r3, [r7, #4]
 800c37c:	681b      	ldr	r3, [r3, #0]
 800c37e:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 800c382:	63da      	str	r2, [r3, #60]	; 0x3c
    __SDMMC_CMDTRANS_DISABLE(hsd->Instance);
 800c384:	687b      	ldr	r3, [r7, #4]
 800c386:	681b      	ldr	r3, [r3, #0]
 800c388:	68da      	ldr	r2, [r3, #12]
 800c38a:	687b      	ldr	r3, [r7, #4]
 800c38c:	681b      	ldr	r3, [r3, #0]
 800c38e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800c392:	60da      	str	r2, [r3, #12]

    if ((context & SD_CONTEXT_IT) != 0U)
 800c394:	68fb      	ldr	r3, [r7, #12]
 800c396:	f003 0308 	and.w	r3, r3, #8
 800c39a:	2b00      	cmp	r3, #0
 800c39c:	d038      	beq.n	800c410 <HAL_SD_IRQHandler+0xf4>
    {
      if (((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 800c39e:	68fb      	ldr	r3, [r7, #12]
 800c3a0:	f003 0302 	and.w	r3, r3, #2
 800c3a4:	2b00      	cmp	r3, #0
 800c3a6:	d104      	bne.n	800c3b2 <HAL_SD_IRQHandler+0x96>
 800c3a8:	68fb      	ldr	r3, [r7, #12]
 800c3aa:	f003 0320 	and.w	r3, r3, #32
 800c3ae:	2b00      	cmp	r3, #0
 800c3b0:	d011      	beq.n	800c3d6 <HAL_SD_IRQHandler+0xba>
      {
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 800c3b2:	687b      	ldr	r3, [r7, #4]
 800c3b4:	681b      	ldr	r3, [r3, #0]
 800c3b6:	4618      	mov	r0, r3
 800c3b8:	f002 fc08 	bl	800ebcc <SDMMC_CmdStopTransfer>
 800c3bc:	60b8      	str	r0, [r7, #8]
        if (errorstate != HAL_SD_ERROR_NONE)
 800c3be:	68bb      	ldr	r3, [r7, #8]
 800c3c0:	2b00      	cmp	r3, #0
 800c3c2:	d008      	beq.n	800c3d6 <HAL_SD_IRQHandler+0xba>
        {
          hsd->ErrorCode |= errorstate;
 800c3c4:	687b      	ldr	r3, [r7, #4]
 800c3c6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800c3c8:	68bb      	ldr	r3, [r7, #8]
 800c3ca:	431a      	orrs	r2, r3
 800c3cc:	687b      	ldr	r3, [r7, #4]
 800c3ce:	635a      	str	r2, [r3, #52]	; 0x34
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
          hsd->ErrorCallback(hsd);
#else
          HAL_SD_ErrorCallback(hsd);
 800c3d0:	6878      	ldr	r0, [r7, #4]
 800c3d2:	f000 f95b 	bl	800c68c <HAL_SD_ErrorCallback>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
        }
      }

      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800c3d6:	687b      	ldr	r3, [r7, #4]
 800c3d8:	681b      	ldr	r3, [r3, #0]
 800c3da:	4a3f      	ldr	r2, [pc, #252]	; (800c4d8 <HAL_SD_IRQHandler+0x1bc>)
 800c3dc:	639a      	str	r2, [r3, #56]	; 0x38

      hsd->State = HAL_SD_STATE_READY;
 800c3de:	687b      	ldr	r3, [r7, #4]
 800c3e0:	2201      	movs	r2, #1
 800c3e2:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      hsd->Context = SD_CONTEXT_NONE;
 800c3e6:	687b      	ldr	r3, [r7, #4]
 800c3e8:	2200      	movs	r2, #0
 800c3ea:	62da      	str	r2, [r3, #44]	; 0x2c
      if (((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 800c3ec:	68fb      	ldr	r3, [r7, #12]
 800c3ee:	f003 0301 	and.w	r3, r3, #1
 800c3f2:	2b00      	cmp	r3, #0
 800c3f4:	d104      	bne.n	800c400 <HAL_SD_IRQHandler+0xe4>
 800c3f6:	68fb      	ldr	r3, [r7, #12]
 800c3f8:	f003 0302 	and.w	r3, r3, #2
 800c3fc:	2b00      	cmp	r3, #0
 800c3fe:	d003      	beq.n	800c408 <HAL_SD_IRQHandler+0xec>
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->RxCpltCallback(hsd);
#else
        HAL_SD_RxCpltCallback(hsd);
 800c400:	6878      	ldr	r0, [r7, #4]
 800c402:	f003 fbbd 	bl	800fb80 <HAL_SD_RxCpltCallback>
 800c406:	e13b      	b.n	800c680 <HAL_SD_IRQHandler+0x364>
      else
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->TxCpltCallback(hsd);
#else
        HAL_SD_TxCpltCallback(hsd);
 800c408:	6878      	ldr	r0, [r7, #4]
 800c40a:	f003 fbaf 	bl	800fb6c <HAL_SD_TxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 800c40e:	e137      	b.n	800c680 <HAL_SD_IRQHandler+0x364>
    else if ((context & SD_CONTEXT_DMA) != 0U)
 800c410:	68fb      	ldr	r3, [r7, #12]
 800c412:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c416:	2b00      	cmp	r3, #0
 800c418:	f000 8132 	beq.w	800c680 <HAL_SD_IRQHandler+0x364>
      hsd->Instance->DLEN = 0;
 800c41c:	687b      	ldr	r3, [r7, #4]
 800c41e:	681b      	ldr	r3, [r3, #0]
 800c420:	2200      	movs	r2, #0
 800c422:	629a      	str	r2, [r3, #40]	; 0x28
      hsd->Instance->DCTRL = 0;
 800c424:	687b      	ldr	r3, [r7, #4]
 800c426:	681b      	ldr	r3, [r3, #0]
 800c428:	2200      	movs	r2, #0
 800c42a:	62da      	str	r2, [r3, #44]	; 0x2c
      hsd->Instance->IDMACTRL = SDMMC_DISABLE_IDMA;
 800c42c:	687b      	ldr	r3, [r7, #4]
 800c42e:	681b      	ldr	r3, [r3, #0]
 800c430:	2200      	movs	r2, #0
 800c432:	651a      	str	r2, [r3, #80]	; 0x50
      if (((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 800c434:	68fb      	ldr	r3, [r7, #12]
 800c436:	f003 0302 	and.w	r3, r3, #2
 800c43a:	2b00      	cmp	r3, #0
 800c43c:	d104      	bne.n	800c448 <HAL_SD_IRQHandler+0x12c>
 800c43e:	68fb      	ldr	r3, [r7, #12]
 800c440:	f003 0320 	and.w	r3, r3, #32
 800c444:	2b00      	cmp	r3, #0
 800c446:	d011      	beq.n	800c46c <HAL_SD_IRQHandler+0x150>
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 800c448:	687b      	ldr	r3, [r7, #4]
 800c44a:	681b      	ldr	r3, [r3, #0]
 800c44c:	4618      	mov	r0, r3
 800c44e:	f002 fbbd 	bl	800ebcc <SDMMC_CmdStopTransfer>
 800c452:	60b8      	str	r0, [r7, #8]
        if (errorstate != HAL_SD_ERROR_NONE)
 800c454:	68bb      	ldr	r3, [r7, #8]
 800c456:	2b00      	cmp	r3, #0
 800c458:	d008      	beq.n	800c46c <HAL_SD_IRQHandler+0x150>
          hsd->ErrorCode |= errorstate;
 800c45a:	687b      	ldr	r3, [r7, #4]
 800c45c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800c45e:	68bb      	ldr	r3, [r7, #8]
 800c460:	431a      	orrs	r2, r3
 800c462:	687b      	ldr	r3, [r7, #4]
 800c464:	635a      	str	r2, [r3, #52]	; 0x34
          HAL_SD_ErrorCallback(hsd);
 800c466:	6878      	ldr	r0, [r7, #4]
 800c468:	f000 f910 	bl	800c68c <HAL_SD_ErrorCallback>
      hsd->State = HAL_SD_STATE_READY;
 800c46c:	687b      	ldr	r3, [r7, #4]
 800c46e:	2201      	movs	r2, #1
 800c470:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      hsd->Context = SD_CONTEXT_NONE;
 800c474:	687b      	ldr	r3, [r7, #4]
 800c476:	2200      	movs	r2, #0
 800c478:	62da      	str	r2, [r3, #44]	; 0x2c
      if (((context & SD_CONTEXT_WRITE_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 800c47a:	68fb      	ldr	r3, [r7, #12]
 800c47c:	f003 0310 	and.w	r3, r3, #16
 800c480:	2b00      	cmp	r3, #0
 800c482:	d104      	bne.n	800c48e <HAL_SD_IRQHandler+0x172>
 800c484:	68fb      	ldr	r3, [r7, #12]
 800c486:	f003 0320 	and.w	r3, r3, #32
 800c48a:	2b00      	cmp	r3, #0
 800c48c:	d002      	beq.n	800c494 <HAL_SD_IRQHandler+0x178>
        HAL_SD_TxCpltCallback(hsd);
 800c48e:	6878      	ldr	r0, [r7, #4]
 800c490:	f003 fb6c 	bl	800fb6c <HAL_SD_TxCpltCallback>
      if (((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 800c494:	68fb      	ldr	r3, [r7, #12]
 800c496:	f003 0301 	and.w	r3, r3, #1
 800c49a:	2b00      	cmp	r3, #0
 800c49c:	d105      	bne.n	800c4aa <HAL_SD_IRQHandler+0x18e>
 800c49e:	68fb      	ldr	r3, [r7, #12]
 800c4a0:	f003 0302 	and.w	r3, r3, #2
 800c4a4:	2b00      	cmp	r3, #0
 800c4a6:	f000 80eb 	beq.w	800c680 <HAL_SD_IRQHandler+0x364>
        HAL_SD_RxCpltCallback(hsd);
 800c4aa:	6878      	ldr	r0, [r7, #4]
 800c4ac:	f003 fb68 	bl	800fb80 <HAL_SD_RxCpltCallback>
}
 800c4b0:	e0e6      	b.n	800c680 <HAL_SD_IRQHandler+0x364>
  else if ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXFIFOHE) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 800c4b2:	687b      	ldr	r3, [r7, #4]
 800c4b4:	681b      	ldr	r3, [r3, #0]
 800c4b6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c4b8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800c4bc:	2b00      	cmp	r3, #0
 800c4be:	d00d      	beq.n	800c4dc <HAL_SD_IRQHandler+0x1c0>
 800c4c0:	68fb      	ldr	r3, [r7, #12]
 800c4c2:	f003 0308 	and.w	r3, r3, #8
 800c4c6:	2b00      	cmp	r3, #0
 800c4c8:	d008      	beq.n	800c4dc <HAL_SD_IRQHandler+0x1c0>
    SD_Write_IT(hsd);
 800c4ca:	6878      	ldr	r0, [r7, #4]
 800c4cc:	f001 f8a8 	bl	800d620 <SD_Write_IT>
 800c4d0:	e0d6      	b.n	800c680 <HAL_SD_IRQHandler+0x364>
 800c4d2:	bf00      	nop
 800c4d4:	ffff3ec5 	.word	0xffff3ec5
 800c4d8:	18000f3a 	.word	0x18000f3a
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_RXOVERR |
 800c4dc:	687b      	ldr	r3, [r7, #4]
 800c4de:	681b      	ldr	r3, [r3, #0]
 800c4e0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c4e2:	f003 033a 	and.w	r3, r3, #58	; 0x3a
 800c4e6:	2b00      	cmp	r3, #0
 800c4e8:	f000 809d 	beq.w	800c626 <HAL_SD_IRQHandler+0x30a>
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_IT_DCRCFAIL) != RESET)
 800c4ec:	687b      	ldr	r3, [r7, #4]
 800c4ee:	681b      	ldr	r3, [r3, #0]
 800c4f0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c4f2:	f003 0302 	and.w	r3, r3, #2
 800c4f6:	2b00      	cmp	r3, #0
 800c4f8:	d005      	beq.n	800c506 <HAL_SD_IRQHandler+0x1ea>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 800c4fa:	687b      	ldr	r3, [r7, #4]
 800c4fc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c4fe:	f043 0202 	orr.w	r2, r3, #2
 800c502:	687b      	ldr	r3, [r7, #4]
 800c504:	635a      	str	r2, [r3, #52]	; 0x34
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_IT_DTIMEOUT) != RESET)
 800c506:	687b      	ldr	r3, [r7, #4]
 800c508:	681b      	ldr	r3, [r3, #0]
 800c50a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c50c:	f003 0308 	and.w	r3, r3, #8
 800c510:	2b00      	cmp	r3, #0
 800c512:	d005      	beq.n	800c520 <HAL_SD_IRQHandler+0x204>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 800c514:	687b      	ldr	r3, [r7, #4]
 800c516:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c518:	f043 0208 	orr.w	r2, r3, #8
 800c51c:	687b      	ldr	r3, [r7, #4]
 800c51e:	635a      	str	r2, [r3, #52]	; 0x34
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_IT_RXOVERR) != RESET)
 800c520:	687b      	ldr	r3, [r7, #4]
 800c522:	681b      	ldr	r3, [r3, #0]
 800c524:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c526:	f003 0320 	and.w	r3, r3, #32
 800c52a:	2b00      	cmp	r3, #0
 800c52c:	d005      	beq.n	800c53a <HAL_SD_IRQHandler+0x21e>
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 800c52e:	687b      	ldr	r3, [r7, #4]
 800c530:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c532:	f043 0220 	orr.w	r2, r3, #32
 800c536:	687b      	ldr	r3, [r7, #4]
 800c538:	635a      	str	r2, [r3, #52]	; 0x34
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_IT_TXUNDERR) != RESET)
 800c53a:	687b      	ldr	r3, [r7, #4]
 800c53c:	681b      	ldr	r3, [r3, #0]
 800c53e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c540:	f003 0310 	and.w	r3, r3, #16
 800c544:	2b00      	cmp	r3, #0
 800c546:	d005      	beq.n	800c554 <HAL_SD_IRQHandler+0x238>
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 800c548:	687b      	ldr	r3, [r7, #4]
 800c54a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c54c:	f043 0210 	orr.w	r2, r3, #16
 800c550:	687b      	ldr	r3, [r7, #4]
 800c552:	635a      	str	r2, [r3, #52]	; 0x34
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800c554:	687b      	ldr	r3, [r7, #4]
 800c556:	681b      	ldr	r3, [r3, #0]
 800c558:	4a4b      	ldr	r2, [pc, #300]	; (800c688 <HAL_SD_IRQHandler+0x36c>)
 800c55a:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_DATAEND | SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | \
 800c55c:	687b      	ldr	r3, [r7, #4]
 800c55e:	681b      	ldr	r3, [r3, #0]
 800c560:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800c562:	687b      	ldr	r3, [r7, #4]
 800c564:	681b      	ldr	r3, [r3, #0]
 800c566:	f422 729d 	bic.w	r2, r2, #314	; 0x13a
 800c56a:	63da      	str	r2, [r3, #60]	; 0x3c
    __SDMMC_CMDTRANS_DISABLE(hsd->Instance);
 800c56c:	687b      	ldr	r3, [r7, #4]
 800c56e:	681b      	ldr	r3, [r3, #0]
 800c570:	68da      	ldr	r2, [r3, #12]
 800c572:	687b      	ldr	r3, [r7, #4]
 800c574:	681b      	ldr	r3, [r3, #0]
 800c576:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800c57a:	60da      	str	r2, [r3, #12]
    hsd->Instance->DCTRL |= SDMMC_DCTRL_FIFORST;
 800c57c:	687b      	ldr	r3, [r7, #4]
 800c57e:	681b      	ldr	r3, [r3, #0]
 800c580:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c582:	687b      	ldr	r3, [r7, #4]
 800c584:	681b      	ldr	r3, [r3, #0]
 800c586:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800c58a:	62da      	str	r2, [r3, #44]	; 0x2c
    hsd->Instance->CMD |= SDMMC_CMD_CMDSTOP;
 800c58c:	687b      	ldr	r3, [r7, #4]
 800c58e:	681b      	ldr	r3, [r3, #0]
 800c590:	68da      	ldr	r2, [r3, #12]
 800c592:	687b      	ldr	r3, [r7, #4]
 800c594:	681b      	ldr	r3, [r3, #0]
 800c596:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800c59a:	60da      	str	r2, [r3, #12]
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 800c59c:	687b      	ldr	r3, [r7, #4]
 800c59e:	681b      	ldr	r3, [r3, #0]
 800c5a0:	4618      	mov	r0, r3
 800c5a2:	f002 fb13 	bl	800ebcc <SDMMC_CmdStopTransfer>
 800c5a6:	4602      	mov	r2, r0
 800c5a8:	687b      	ldr	r3, [r7, #4]
 800c5aa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c5ac:	431a      	orrs	r2, r3
 800c5ae:	687b      	ldr	r3, [r7, #4]
 800c5b0:	635a      	str	r2, [r3, #52]	; 0x34
    hsd->Instance->CMD &= ~(SDMMC_CMD_CMDSTOP);
 800c5b2:	687b      	ldr	r3, [r7, #4]
 800c5b4:	681b      	ldr	r3, [r3, #0]
 800c5b6:	68da      	ldr	r2, [r3, #12]
 800c5b8:	687b      	ldr	r3, [r7, #4]
 800c5ba:	681b      	ldr	r3, [r3, #0]
 800c5bc:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800c5c0:	60da      	str	r2, [r3, #12]
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DABORT);
 800c5c2:	687b      	ldr	r3, [r7, #4]
 800c5c4:	681b      	ldr	r3, [r3, #0]
 800c5c6:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800c5ca:	639a      	str	r2, [r3, #56]	; 0x38
    if ((context & SD_CONTEXT_IT) != 0U)
 800c5cc:	68fb      	ldr	r3, [r7, #12]
 800c5ce:	f003 0308 	and.w	r3, r3, #8
 800c5d2:	2b00      	cmp	r3, #0
 800c5d4:	d00a      	beq.n	800c5ec <HAL_SD_IRQHandler+0x2d0>
      hsd->State = HAL_SD_STATE_READY;
 800c5d6:	687b      	ldr	r3, [r7, #4]
 800c5d8:	2201      	movs	r2, #1
 800c5da:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      hsd->Context = SD_CONTEXT_NONE;
 800c5de:	687b      	ldr	r3, [r7, #4]
 800c5e0:	2200      	movs	r2, #0
 800c5e2:	62da      	str	r2, [r3, #44]	; 0x2c
      HAL_SD_ErrorCallback(hsd);
 800c5e4:	6878      	ldr	r0, [r7, #4]
 800c5e6:	f000 f851 	bl	800c68c <HAL_SD_ErrorCallback>
}
 800c5ea:	e049      	b.n	800c680 <HAL_SD_IRQHandler+0x364>
    else if ((context & SD_CONTEXT_DMA) != 0U)
 800c5ec:	68fb      	ldr	r3, [r7, #12]
 800c5ee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c5f2:	2b00      	cmp	r3, #0
 800c5f4:	d044      	beq.n	800c680 <HAL_SD_IRQHandler+0x364>
      if (hsd->ErrorCode != HAL_SD_ERROR_NONE)
 800c5f6:	687b      	ldr	r3, [r7, #4]
 800c5f8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c5fa:	2b00      	cmp	r3, #0
 800c5fc:	d040      	beq.n	800c680 <HAL_SD_IRQHandler+0x364>
        __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_IDMABTC);
 800c5fe:	687b      	ldr	r3, [r7, #4]
 800c600:	681b      	ldr	r3, [r3, #0]
 800c602:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800c604:	687b      	ldr	r3, [r7, #4]
 800c606:	681b      	ldr	r3, [r3, #0]
 800c608:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 800c60c:	63da      	str	r2, [r3, #60]	; 0x3c
        hsd->Instance->IDMACTRL = SDMMC_DISABLE_IDMA;
 800c60e:	687b      	ldr	r3, [r7, #4]
 800c610:	681b      	ldr	r3, [r3, #0]
 800c612:	2200      	movs	r2, #0
 800c614:	651a      	str	r2, [r3, #80]	; 0x50
        hsd->State = HAL_SD_STATE_READY;
 800c616:	687b      	ldr	r3, [r7, #4]
 800c618:	2201      	movs	r2, #1
 800c61a:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
        HAL_SD_ErrorCallback(hsd);
 800c61e:	6878      	ldr	r0, [r7, #4]
 800c620:	f000 f834 	bl	800c68c <HAL_SD_ErrorCallback>
}
 800c624:	e02c      	b.n	800c680 <HAL_SD_IRQHandler+0x364>
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_IDMABTC) != RESET)
 800c626:	687b      	ldr	r3, [r7, #4]
 800c628:	681b      	ldr	r3, [r3, #0]
 800c62a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c62c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800c630:	2b00      	cmp	r3, #0
 800c632:	d025      	beq.n	800c680 <HAL_SD_IRQHandler+0x364>
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_IDMABTC);
 800c634:	687b      	ldr	r3, [r7, #4]
 800c636:	681b      	ldr	r3, [r3, #0]
 800c638:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c63c:	639a      	str	r2, [r3, #56]	; 0x38
    if (READ_BIT(hsd->Instance->IDMACTRL, SDMMC_IDMA_IDMABACT) == 0U)
 800c63e:	687b      	ldr	r3, [r7, #4]
 800c640:	681b      	ldr	r3, [r3, #0]
 800c642:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c644:	f003 0304 	and.w	r3, r3, #4
 800c648:	2b00      	cmp	r3, #0
 800c64a:	d10c      	bne.n	800c666 <HAL_SD_IRQHandler+0x34a>
      if ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U)
 800c64c:	68fb      	ldr	r3, [r7, #12]
 800c64e:	f003 0320 	and.w	r3, r3, #32
 800c652:	2b00      	cmp	r3, #0
 800c654:	d003      	beq.n	800c65e <HAL_SD_IRQHandler+0x342>
        HAL_SDEx_Write_DMADoubleBuf1CpltCallback(hsd);
 800c656:	6878      	ldr	r0, [r7, #4]
 800c658:	f001 f84a 	bl	800d6f0 <HAL_SDEx_Write_DMADoubleBuf1CpltCallback>
}
 800c65c:	e010      	b.n	800c680 <HAL_SD_IRQHandler+0x364>
        HAL_SDEx_Read_DMADoubleBuf1CpltCallback(hsd);
 800c65e:	6878      	ldr	r0, [r7, #4]
 800c660:	f001 f832 	bl	800d6c8 <HAL_SDEx_Read_DMADoubleBuf1CpltCallback>
}
 800c664:	e00c      	b.n	800c680 <HAL_SD_IRQHandler+0x364>
      if ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U)
 800c666:	68fb      	ldr	r3, [r7, #12]
 800c668:	f003 0320 	and.w	r3, r3, #32
 800c66c:	2b00      	cmp	r3, #0
 800c66e:	d003      	beq.n	800c678 <HAL_SD_IRQHandler+0x35c>
        HAL_SDEx_Write_DMADoubleBuf0CpltCallback(hsd);
 800c670:	6878      	ldr	r0, [r7, #4]
 800c672:	f001 f833 	bl	800d6dc <HAL_SDEx_Write_DMADoubleBuf0CpltCallback>
}
 800c676:	e003      	b.n	800c680 <HAL_SD_IRQHandler+0x364>
        HAL_SDEx_Read_DMADoubleBuf0CpltCallback(hsd);
 800c678:	6878      	ldr	r0, [r7, #4]
 800c67a:	f001 f81b 	bl	800d6b4 <HAL_SDEx_Read_DMADoubleBuf0CpltCallback>
}
 800c67e:	e7ff      	b.n	800c680 <HAL_SD_IRQHandler+0x364>
 800c680:	bf00      	nop
 800c682:	3710      	adds	r7, #16
 800c684:	46bd      	mov	sp, r7
 800c686:	bd80      	pop	{r7, pc}
 800c688:	18000f3a 	.word	0x18000f3a

0800c68c <HAL_SD_ErrorCallback>:
  * @brief SD error callbacks
  * @param hsd: Pointer SD handle
  * @retval None
  */
__weak void HAL_SD_ErrorCallback(SD_HandleTypeDef *hsd)
{
 800c68c:	b480      	push	{r7}
 800c68e:	b083      	sub	sp, #12
 800c690:	af00      	add	r7, sp, #0
 800c692:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SD_ErrorCallback can be implemented in the user file
   */
}
 800c694:	bf00      	nop
 800c696:	370c      	adds	r7, #12
 800c698:	46bd      	mov	sp, r7
 800c69a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c69e:	4770      	bx	lr

0800c6a0 <HAL_SD_GetCardCSD>:
  * @param  pCSD: Pointer to a HAL_SD_CardCSDTypeDef structure that
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 800c6a0:	b480      	push	{r7}
 800c6a2:	b083      	sub	sp, #12
 800c6a4:	af00      	add	r7, sp, #0
 800c6a6:	6078      	str	r0, [r7, #4]
 800c6a8:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 800c6aa:	687b      	ldr	r3, [r7, #4]
 800c6ac:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800c6ae:	0f9b      	lsrs	r3, r3, #30
 800c6b0:	b2da      	uxtb	r2, r3
 800c6b2:	683b      	ldr	r3, [r7, #0]
 800c6b4:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 800c6b6:	687b      	ldr	r3, [r7, #4]
 800c6b8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800c6ba:	0e9b      	lsrs	r3, r3, #26
 800c6bc:	b2db      	uxtb	r3, r3
 800c6be:	f003 030f 	and.w	r3, r3, #15
 800c6c2:	b2da      	uxtb	r2, r3
 800c6c4:	683b      	ldr	r3, [r7, #0]
 800c6c6:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 800c6c8:	687b      	ldr	r3, [r7, #4]
 800c6ca:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800c6cc:	0e1b      	lsrs	r3, r3, #24
 800c6ce:	b2db      	uxtb	r3, r3
 800c6d0:	f003 0303 	and.w	r3, r3, #3
 800c6d4:	b2da      	uxtb	r2, r3
 800c6d6:	683b      	ldr	r3, [r7, #0]
 800c6d8:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 800c6da:	687b      	ldr	r3, [r7, #4]
 800c6dc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800c6de:	0c1b      	lsrs	r3, r3, #16
 800c6e0:	b2da      	uxtb	r2, r3
 800c6e2:	683b      	ldr	r3, [r7, #0]
 800c6e4:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 800c6e6:	687b      	ldr	r3, [r7, #4]
 800c6e8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800c6ea:	0a1b      	lsrs	r3, r3, #8
 800c6ec:	b2da      	uxtb	r2, r3
 800c6ee:	683b      	ldr	r3, [r7, #0]
 800c6f0:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 800c6f2:	687b      	ldr	r3, [r7, #4]
 800c6f4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800c6f6:	b2da      	uxtb	r2, r3
 800c6f8:	683b      	ldr	r3, [r7, #0]
 800c6fa:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 800c6fc:	687b      	ldr	r3, [r7, #4]
 800c6fe:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800c700:	0d1b      	lsrs	r3, r3, #20
 800c702:	b29a      	uxth	r2, r3
 800c704:	683b      	ldr	r3, [r7, #0]
 800c706:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 800c708:	687b      	ldr	r3, [r7, #4]
 800c70a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800c70c:	0c1b      	lsrs	r3, r3, #16
 800c70e:	b2db      	uxtb	r3, r3
 800c710:	f003 030f 	and.w	r3, r3, #15
 800c714:	b2da      	uxtb	r2, r3
 800c716:	683b      	ldr	r3, [r7, #0]
 800c718:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 800c71a:	687b      	ldr	r3, [r7, #4]
 800c71c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800c71e:	0bdb      	lsrs	r3, r3, #15
 800c720:	b2db      	uxtb	r3, r3
 800c722:	f003 0301 	and.w	r3, r3, #1
 800c726:	b2da      	uxtb	r2, r3
 800c728:	683b      	ldr	r3, [r7, #0]
 800c72a:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 800c72c:	687b      	ldr	r3, [r7, #4]
 800c72e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800c730:	0b9b      	lsrs	r3, r3, #14
 800c732:	b2db      	uxtb	r3, r3
 800c734:	f003 0301 	and.w	r3, r3, #1
 800c738:	b2da      	uxtb	r2, r3
 800c73a:	683b      	ldr	r3, [r7, #0]
 800c73c:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 800c73e:	687b      	ldr	r3, [r7, #4]
 800c740:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800c742:	0b5b      	lsrs	r3, r3, #13
 800c744:	b2db      	uxtb	r3, r3
 800c746:	f003 0301 	and.w	r3, r3, #1
 800c74a:	b2da      	uxtb	r2, r3
 800c74c:	683b      	ldr	r3, [r7, #0]
 800c74e:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 800c750:	687b      	ldr	r3, [r7, #4]
 800c752:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800c754:	0b1b      	lsrs	r3, r3, #12
 800c756:	b2db      	uxtb	r3, r3
 800c758:	f003 0301 	and.w	r3, r3, #1
 800c75c:	b2da      	uxtb	r2, r3
 800c75e:	683b      	ldr	r3, [r7, #0]
 800c760:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 800c762:	683b      	ldr	r3, [r7, #0]
 800c764:	2200      	movs	r2, #0
 800c766:	735a      	strb	r2, [r3, #13]

  if (hsd->SdCard.CardType == CARD_SDSC)
 800c768:	687b      	ldr	r3, [r7, #4]
 800c76a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c76c:	2b00      	cmp	r3, #0
 800c76e:	d163      	bne.n	800c838 <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 800c770:	687b      	ldr	r3, [r7, #4]
 800c772:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800c774:	009a      	lsls	r2, r3, #2
 800c776:	f640 73fc 	movw	r3, #4092	; 0xffc
 800c77a:	4013      	ands	r3, r2
 800c77c:	687a      	ldr	r2, [r7, #4]
 800c77e:	6e52      	ldr	r2, [r2, #100]	; 0x64
 800c780:	0f92      	lsrs	r2, r2, #30
 800c782:	431a      	orrs	r2, r3
 800c784:	683b      	ldr	r3, [r7, #0]
 800c786:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 800c788:	687b      	ldr	r3, [r7, #4]
 800c78a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800c78c:	0edb      	lsrs	r3, r3, #27
 800c78e:	b2db      	uxtb	r3, r3
 800c790:	f003 0307 	and.w	r3, r3, #7
 800c794:	b2da      	uxtb	r2, r3
 800c796:	683b      	ldr	r3, [r7, #0]
 800c798:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 800c79a:	687b      	ldr	r3, [r7, #4]
 800c79c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800c79e:	0e1b      	lsrs	r3, r3, #24
 800c7a0:	b2db      	uxtb	r3, r3
 800c7a2:	f003 0307 	and.w	r3, r3, #7
 800c7a6:	b2da      	uxtb	r2, r3
 800c7a8:	683b      	ldr	r3, [r7, #0]
 800c7aa:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 800c7ac:	687b      	ldr	r3, [r7, #4]
 800c7ae:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800c7b0:	0d5b      	lsrs	r3, r3, #21
 800c7b2:	b2db      	uxtb	r3, r3
 800c7b4:	f003 0307 	and.w	r3, r3, #7
 800c7b8:	b2da      	uxtb	r2, r3
 800c7ba:	683b      	ldr	r3, [r7, #0]
 800c7bc:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 800c7be:	687b      	ldr	r3, [r7, #4]
 800c7c0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800c7c2:	0c9b      	lsrs	r3, r3, #18
 800c7c4:	b2db      	uxtb	r3, r3
 800c7c6:	f003 0307 	and.w	r3, r3, #7
 800c7ca:	b2da      	uxtb	r2, r3
 800c7cc:	683b      	ldr	r3, [r7, #0]
 800c7ce:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 800c7d0:	687b      	ldr	r3, [r7, #4]
 800c7d2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800c7d4:	0bdb      	lsrs	r3, r3, #15
 800c7d6:	b2db      	uxtb	r3, r3
 800c7d8:	f003 0307 	and.w	r3, r3, #7
 800c7dc:	b2da      	uxtb	r2, r3
 800c7de:	683b      	ldr	r3, [r7, #0]
 800c7e0:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 800c7e2:	683b      	ldr	r3, [r7, #0]
 800c7e4:	691b      	ldr	r3, [r3, #16]
 800c7e6:	1c5a      	adds	r2, r3, #1
 800c7e8:	687b      	ldr	r3, [r7, #4]
 800c7ea:	649a      	str	r2, [r3, #72]	; 0x48
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 800c7ec:	683b      	ldr	r3, [r7, #0]
 800c7ee:	7e1b      	ldrb	r3, [r3, #24]
 800c7f0:	b2db      	uxtb	r3, r3
 800c7f2:	f003 0307 	and.w	r3, r3, #7
 800c7f6:	3302      	adds	r3, #2
 800c7f8:	2201      	movs	r2, #1
 800c7fa:	fa02 f303 	lsl.w	r3, r2, r3
 800c7fe:	687a      	ldr	r2, [r7, #4]
 800c800:	6c92      	ldr	r2, [r2, #72]	; 0x48
 800c802:	fb03 f202 	mul.w	r2, r3, r2
 800c806:	687b      	ldr	r3, [r7, #4]
 800c808:	649a      	str	r2, [r3, #72]	; 0x48
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 800c80a:	683b      	ldr	r3, [r7, #0]
 800c80c:	7a1b      	ldrb	r3, [r3, #8]
 800c80e:	b2db      	uxtb	r3, r3
 800c810:	f003 030f 	and.w	r3, r3, #15
 800c814:	2201      	movs	r2, #1
 800c816:	409a      	lsls	r2, r3
 800c818:	687b      	ldr	r3, [r7, #4]
 800c81a:	64da      	str	r2, [r3, #76]	; 0x4c

    hsd->SdCard.LogBlockNbr = (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 800c81c:	687b      	ldr	r3, [r7, #4]
 800c81e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800c820:	687a      	ldr	r2, [r7, #4]
 800c822:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 800c824:	0a52      	lsrs	r2, r2, #9
 800c826:	fb03 f202 	mul.w	r2, r3, r2
 800c82a:	687b      	ldr	r3, [r7, #4]
 800c82c:	651a      	str	r2, [r3, #80]	; 0x50
    hsd->SdCard.LogBlockSize = 512U;
 800c82e:	687b      	ldr	r3, [r7, #4]
 800c830:	f44f 7200 	mov.w	r2, #512	; 0x200
 800c834:	655a      	str	r2, [r3, #84]	; 0x54
 800c836:	e031      	b.n	800c89c <HAL_SD_GetCardCSD+0x1fc>
  }
  else if (hsd->SdCard.CardType == CARD_SDHC_SDXC)
 800c838:	687b      	ldr	r3, [r7, #4]
 800c83a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c83c:	2b01      	cmp	r3, #1
 800c83e:	d11d      	bne.n	800c87c <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 800c840:	687b      	ldr	r3, [r7, #4]
 800c842:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800c844:	041b      	lsls	r3, r3, #16
 800c846:	f403 127c 	and.w	r2, r3, #4128768	; 0x3f0000
 800c84a:	687b      	ldr	r3, [r7, #4]
 800c84c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800c84e:	0c1b      	lsrs	r3, r3, #16
 800c850:	431a      	orrs	r2, r3
 800c852:	683b      	ldr	r3, [r7, #0]
 800c854:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 800c856:	683b      	ldr	r3, [r7, #0]
 800c858:	691b      	ldr	r3, [r3, #16]
 800c85a:	3301      	adds	r3, #1
 800c85c:	029a      	lsls	r2, r3, #10
 800c85e:	687b      	ldr	r3, [r7, #4]
 800c860:	649a      	str	r2, [r3, #72]	; 0x48
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 800c862:	687b      	ldr	r3, [r7, #4]
 800c864:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800c866:	687b      	ldr	r3, [r7, #4]
 800c868:	651a      	str	r2, [r3, #80]	; 0x50
    hsd->SdCard.BlockSize = 512U;
 800c86a:	687b      	ldr	r3, [r7, #4]
 800c86c:	f44f 7200 	mov.w	r2, #512	; 0x200
 800c870:	64da      	str	r2, [r3, #76]	; 0x4c
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 800c872:	687b      	ldr	r3, [r7, #4]
 800c874:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800c876:	687b      	ldr	r3, [r7, #4]
 800c878:	655a      	str	r2, [r3, #84]	; 0x54
 800c87a:	e00f      	b.n	800c89c <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800c87c:	687b      	ldr	r3, [r7, #4]
 800c87e:	681b      	ldr	r3, [r3, #0]
 800c880:	4a58      	ldr	r2, [pc, #352]	; (800c9e4 <HAL_SD_GetCardCSD+0x344>)
 800c882:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800c884:	687b      	ldr	r3, [r7, #4]
 800c886:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c888:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800c88c:	687b      	ldr	r3, [r7, #4]
 800c88e:	635a      	str	r2, [r3, #52]	; 0x34
    hsd->State = HAL_SD_STATE_READY;
 800c890:	687b      	ldr	r3, [r7, #4]
 800c892:	2201      	movs	r2, #1
 800c894:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    return HAL_ERROR;
 800c898:	2301      	movs	r3, #1
 800c89a:	e09d      	b.n	800c9d8 <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 800c89c:	687b      	ldr	r3, [r7, #4]
 800c89e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800c8a0:	0b9b      	lsrs	r3, r3, #14
 800c8a2:	b2db      	uxtb	r3, r3
 800c8a4:	f003 0301 	and.w	r3, r3, #1
 800c8a8:	b2da      	uxtb	r2, r3
 800c8aa:	683b      	ldr	r3, [r7, #0]
 800c8ac:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 800c8ae:	687b      	ldr	r3, [r7, #4]
 800c8b0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800c8b2:	09db      	lsrs	r3, r3, #7
 800c8b4:	b2db      	uxtb	r3, r3
 800c8b6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c8ba:	b2da      	uxtb	r2, r3
 800c8bc:	683b      	ldr	r3, [r7, #0]
 800c8be:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 800c8c0:	687b      	ldr	r3, [r7, #4]
 800c8c2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800c8c4:	b2db      	uxtb	r3, r3
 800c8c6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c8ca:	b2da      	uxtb	r2, r3
 800c8cc:	683b      	ldr	r3, [r7, #0]
 800c8ce:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 800c8d0:	687b      	ldr	r3, [r7, #4]
 800c8d2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800c8d4:	0fdb      	lsrs	r3, r3, #31
 800c8d6:	b2da      	uxtb	r2, r3
 800c8d8:	683b      	ldr	r3, [r7, #0]
 800c8da:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 800c8dc:	687b      	ldr	r3, [r7, #4]
 800c8de:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800c8e0:	0f5b      	lsrs	r3, r3, #29
 800c8e2:	b2db      	uxtb	r3, r3
 800c8e4:	f003 0303 	and.w	r3, r3, #3
 800c8e8:	b2da      	uxtb	r2, r3
 800c8ea:	683b      	ldr	r3, [r7, #0]
 800c8ec:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 800c8ee:	687b      	ldr	r3, [r7, #4]
 800c8f0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800c8f2:	0e9b      	lsrs	r3, r3, #26
 800c8f4:	b2db      	uxtb	r3, r3
 800c8f6:	f003 0307 	and.w	r3, r3, #7
 800c8fa:	b2da      	uxtb	r2, r3
 800c8fc:	683b      	ldr	r3, [r7, #0]
 800c8fe:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen = (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 800c900:	687b      	ldr	r3, [r7, #4]
 800c902:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800c904:	0d9b      	lsrs	r3, r3, #22
 800c906:	b2db      	uxtb	r3, r3
 800c908:	f003 030f 	and.w	r3, r3, #15
 800c90c:	b2da      	uxtb	r2, r3
 800c90e:	683b      	ldr	r3, [r7, #0]
 800c910:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 800c912:	687b      	ldr	r3, [r7, #4]
 800c914:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800c916:	0d5b      	lsrs	r3, r3, #21
 800c918:	b2db      	uxtb	r3, r3
 800c91a:	f003 0301 	and.w	r3, r3, #1
 800c91e:	b2da      	uxtb	r2, r3
 800c920:	683b      	ldr	r3, [r7, #0]
 800c922:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 800c926:	683b      	ldr	r3, [r7, #0]
 800c928:	2200      	movs	r2, #0
 800c92a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 800c92e:	687b      	ldr	r3, [r7, #4]
 800c930:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800c932:	0c1b      	lsrs	r3, r3, #16
 800c934:	b2db      	uxtb	r3, r3
 800c936:	f003 0301 	and.w	r3, r3, #1
 800c93a:	b2da      	uxtb	r2, r3
 800c93c:	683b      	ldr	r3, [r7, #0]
 800c93e:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 800c942:	687b      	ldr	r3, [r7, #4]
 800c944:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800c946:	0bdb      	lsrs	r3, r3, #15
 800c948:	b2db      	uxtb	r3, r3
 800c94a:	f003 0301 	and.w	r3, r3, #1
 800c94e:	b2da      	uxtb	r2, r3
 800c950:	683b      	ldr	r3, [r7, #0]
 800c952:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 800c956:	687b      	ldr	r3, [r7, #4]
 800c958:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800c95a:	0b9b      	lsrs	r3, r3, #14
 800c95c:	b2db      	uxtb	r3, r3
 800c95e:	f003 0301 	and.w	r3, r3, #1
 800c962:	b2da      	uxtb	r2, r3
 800c964:	683b      	ldr	r3, [r7, #0]
 800c966:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 800c96a:	687b      	ldr	r3, [r7, #4]
 800c96c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800c96e:	0b5b      	lsrs	r3, r3, #13
 800c970:	b2db      	uxtb	r3, r3
 800c972:	f003 0301 	and.w	r3, r3, #1
 800c976:	b2da      	uxtb	r2, r3
 800c978:	683b      	ldr	r3, [r7, #0]
 800c97a:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 800c97e:	687b      	ldr	r3, [r7, #4]
 800c980:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800c982:	0b1b      	lsrs	r3, r3, #12
 800c984:	b2db      	uxtb	r3, r3
 800c986:	f003 0301 	and.w	r3, r3, #1
 800c98a:	b2da      	uxtb	r2, r3
 800c98c:	683b      	ldr	r3, [r7, #0]
 800c98e:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 800c992:	687b      	ldr	r3, [r7, #4]
 800c994:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800c996:	0a9b      	lsrs	r3, r3, #10
 800c998:	b2db      	uxtb	r3, r3
 800c99a:	f003 0303 	and.w	r3, r3, #3
 800c99e:	b2da      	uxtb	r2, r3
 800c9a0:	683b      	ldr	r3, [r7, #0]
 800c9a2:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27

  pCSD->ECC = (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 800c9a6:	687b      	ldr	r3, [r7, #4]
 800c9a8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800c9aa:	0a1b      	lsrs	r3, r3, #8
 800c9ac:	b2db      	uxtb	r3, r3
 800c9ae:	f003 0303 	and.w	r3, r3, #3
 800c9b2:	b2da      	uxtb	r2, r3
 800c9b4:	683b      	ldr	r3, [r7, #0]
 800c9b6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 800c9ba:	687b      	ldr	r3, [r7, #4]
 800c9bc:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800c9be:	085b      	lsrs	r3, r3, #1
 800c9c0:	b2db      	uxtb	r3, r3
 800c9c2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c9c6:	b2da      	uxtb	r2, r3
 800c9c8:	683b      	ldr	r3, [r7, #0]
 800c9ca:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  pCSD->Reserved4 = 1;
 800c9ce:	683b      	ldr	r3, [r7, #0]
 800c9d0:	2201      	movs	r2, #1
 800c9d2:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

  return HAL_OK;
 800c9d6:	2300      	movs	r3, #0
}
 800c9d8:	4618      	mov	r0, r3
 800c9da:	370c      	adds	r7, #12
 800c9dc:	46bd      	mov	sp, r7
 800c9de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c9e2:	4770      	bx	lr
 800c9e4:	1fe00fff 	.word	0x1fe00fff

0800c9e8 <HAL_SD_GetCardStatus>:
  * @param  pStatus: Pointer to the HAL_SD_CardStatusTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardStatus(SD_HandleTypeDef *hsd, HAL_SD_CardStatusTypeDef *pStatus)
{
 800c9e8:	b580      	push	{r7, lr}
 800c9ea:	b094      	sub	sp, #80	; 0x50
 800c9ec:	af00      	add	r7, sp, #0
 800c9ee:	6078      	str	r0, [r7, #4]
 800c9f0:	6039      	str	r1, [r7, #0]
  uint32_t sd_status[16];
  uint32_t errorstate;
  HAL_StatusTypeDef status = HAL_OK;
 800c9f2:	2300      	movs	r3, #0
 800c9f4:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f

  if (hsd->State == HAL_SD_STATE_BUSY)
 800c9f8:	687b      	ldr	r3, [r7, #4]
 800c9fa:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800c9fe:	b2db      	uxtb	r3, r3
 800ca00:	2b03      	cmp	r3, #3
 800ca02:	d101      	bne.n	800ca08 <HAL_SD_GetCardStatus+0x20>
  {
    return HAL_ERROR;
 800ca04:	2301      	movs	r3, #1
 800ca06:	e0a7      	b.n	800cb58 <HAL_SD_GetCardStatus+0x170>
  }

  errorstate = SD_SendSDStatus(hsd, sd_status);
 800ca08:	f107 0308 	add.w	r3, r7, #8
 800ca0c:	4619      	mov	r1, r3
 800ca0e:	6878      	ldr	r0, [r7, #4]
 800ca10:	f000 fb62 	bl	800d0d8 <SD_SendSDStatus>
 800ca14:	64b8      	str	r0, [r7, #72]	; 0x48
  if (errorstate != HAL_SD_ERROR_NONE)
 800ca16:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800ca18:	2b00      	cmp	r3, #0
 800ca1a:	d011      	beq.n	800ca40 <HAL_SD_GetCardStatus+0x58>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800ca1c:	687b      	ldr	r3, [r7, #4]
 800ca1e:	681b      	ldr	r3, [r3, #0]
 800ca20:	4a4f      	ldr	r2, [pc, #316]	; (800cb60 <HAL_SD_GetCardStatus+0x178>)
 800ca22:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 800ca24:	687b      	ldr	r3, [r7, #4]
 800ca26:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800ca28:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800ca2a:	431a      	orrs	r2, r3
 800ca2c:	687b      	ldr	r3, [r7, #4]
 800ca2e:	635a      	str	r2, [r3, #52]	; 0x34
    hsd->State = HAL_SD_STATE_READY;
 800ca30:	687b      	ldr	r3, [r7, #4]
 800ca32:	2201      	movs	r2, #1
 800ca34:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    status = HAL_ERROR;
 800ca38:	2301      	movs	r3, #1
 800ca3a:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
 800ca3e:	e070      	b.n	800cb22 <HAL_SD_GetCardStatus+0x13a>
  }
  else
  {
    pStatus->DataBusWidth = (uint8_t)((sd_status[0] & 0xC0U) >> 6U);
 800ca40:	68bb      	ldr	r3, [r7, #8]
 800ca42:	099b      	lsrs	r3, r3, #6
 800ca44:	b2db      	uxtb	r3, r3
 800ca46:	f003 0303 	and.w	r3, r3, #3
 800ca4a:	b2da      	uxtb	r2, r3
 800ca4c:	683b      	ldr	r3, [r7, #0]
 800ca4e:	701a      	strb	r2, [r3, #0]

    pStatus->SecuredMode = (uint8_t)((sd_status[0] & 0x20U) >> 5U);
 800ca50:	68bb      	ldr	r3, [r7, #8]
 800ca52:	095b      	lsrs	r3, r3, #5
 800ca54:	b2db      	uxtb	r3, r3
 800ca56:	f003 0301 	and.w	r3, r3, #1
 800ca5a:	b2da      	uxtb	r2, r3
 800ca5c:	683b      	ldr	r3, [r7, #0]
 800ca5e:	705a      	strb	r2, [r3, #1]

    pStatus->CardType = (uint16_t)(((sd_status[0] & 0x00FF0000U) >> 8U) | ((sd_status[0] & 0xFF000000U) >> 24U));
 800ca60:	68bb      	ldr	r3, [r7, #8]
 800ca62:	0a1b      	lsrs	r3, r3, #8
 800ca64:	b29b      	uxth	r3, r3
 800ca66:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800ca6a:	b29a      	uxth	r2, r3
 800ca6c:	68bb      	ldr	r3, [r7, #8]
 800ca6e:	0e1b      	lsrs	r3, r3, #24
 800ca70:	b29b      	uxth	r3, r3
 800ca72:	4313      	orrs	r3, r2
 800ca74:	b29a      	uxth	r2, r3
 800ca76:	683b      	ldr	r3, [r7, #0]
 800ca78:	805a      	strh	r2, [r3, #2]

    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 800ca7a:	68fb      	ldr	r3, [r7, #12]
 800ca7c:	061a      	lsls	r2, r3, #24
 800ca7e:	68fb      	ldr	r3, [r7, #12]
 800ca80:	021b      	lsls	r3, r3, #8
 800ca82:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800ca86:	431a      	orrs	r2, r3
                                  ((sd_status[1] & 0xFF0000U) >> 8U) | ((sd_status[1] & 0xFF000000U) >> 24U));
 800ca88:	68fb      	ldr	r3, [r7, #12]
 800ca8a:	0a1b      	lsrs	r3, r3, #8
 800ca8c:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 800ca90:	431a      	orrs	r2, r3
                                  ((sd_status[1] & 0xFF0000U) >> 8U) | ((sd_status[1] & 0xFF000000U) >> 24U));
 800ca92:	68fb      	ldr	r3, [r7, #12]
 800ca94:	0e1b      	lsrs	r3, r3, #24
 800ca96:	431a      	orrs	r2, r3
    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 800ca98:	683b      	ldr	r3, [r7, #0]
 800ca9a:	605a      	str	r2, [r3, #4]

    pStatus->SpeedClass = (uint8_t)(sd_status[2] & 0xFFU);
 800ca9c:	693b      	ldr	r3, [r7, #16]
 800ca9e:	b2da      	uxtb	r2, r3
 800caa0:	683b      	ldr	r3, [r7, #0]
 800caa2:	721a      	strb	r2, [r3, #8]

    pStatus->PerformanceMove = (uint8_t)((sd_status[2] & 0xFF00U) >> 8U);
 800caa4:	693b      	ldr	r3, [r7, #16]
 800caa6:	0a1b      	lsrs	r3, r3, #8
 800caa8:	b2da      	uxtb	r2, r3
 800caaa:	683b      	ldr	r3, [r7, #0]
 800caac:	725a      	strb	r2, [r3, #9]

    pStatus->AllocationUnitSize = (uint8_t)((sd_status[2] & 0xF00000U) >> 20U);
 800caae:	693b      	ldr	r3, [r7, #16]
 800cab0:	0d1b      	lsrs	r3, r3, #20
 800cab2:	b2db      	uxtb	r3, r3
 800cab4:	f003 030f 	and.w	r3, r3, #15
 800cab8:	b2da      	uxtb	r2, r3
 800caba:	683b      	ldr	r3, [r7, #0]
 800cabc:	729a      	strb	r2, [r3, #10]

    pStatus->EraseSize = (uint16_t)(((sd_status[2] & 0xFF000000U) >> 16U) | (sd_status[3] & 0xFFU));
 800cabe:	693b      	ldr	r3, [r7, #16]
 800cac0:	0c1b      	lsrs	r3, r3, #16
 800cac2:	b29b      	uxth	r3, r3
 800cac4:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800cac8:	b29a      	uxth	r2, r3
 800caca:	697b      	ldr	r3, [r7, #20]
 800cacc:	b29b      	uxth	r3, r3
 800cace:	b2db      	uxtb	r3, r3
 800cad0:	b29b      	uxth	r3, r3
 800cad2:	4313      	orrs	r3, r2
 800cad4:	b29a      	uxth	r2, r3
 800cad6:	683b      	ldr	r3, [r7, #0]
 800cad8:	819a      	strh	r2, [r3, #12]

    pStatus->EraseTimeout = (uint8_t)((sd_status[3] & 0xFC00U) >> 10U);
 800cada:	697b      	ldr	r3, [r7, #20]
 800cadc:	0a9b      	lsrs	r3, r3, #10
 800cade:	b2db      	uxtb	r3, r3
 800cae0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800cae4:	b2da      	uxtb	r2, r3
 800cae6:	683b      	ldr	r3, [r7, #0]
 800cae8:	739a      	strb	r2, [r3, #14]

    pStatus->EraseOffset = (uint8_t)((sd_status[3] & 0x0300U) >> 8U);
 800caea:	697b      	ldr	r3, [r7, #20]
 800caec:	0a1b      	lsrs	r3, r3, #8
 800caee:	b2db      	uxtb	r3, r3
 800caf0:	f003 0303 	and.w	r3, r3, #3
 800caf4:	b2da      	uxtb	r2, r3
 800caf6:	683b      	ldr	r3, [r7, #0]
 800caf8:	73da      	strb	r2, [r3, #15]

    pStatus->UhsSpeedGrade = (uint8_t)((sd_status[3] & 0x00F0U) >> 4U);
 800cafa:	697b      	ldr	r3, [r7, #20]
 800cafc:	091b      	lsrs	r3, r3, #4
 800cafe:	b2db      	uxtb	r3, r3
 800cb00:	f003 030f 	and.w	r3, r3, #15
 800cb04:	b2da      	uxtb	r2, r3
 800cb06:	683b      	ldr	r3, [r7, #0]
 800cb08:	741a      	strb	r2, [r3, #16]
    pStatus->UhsAllocationUnitSize = (uint8_t)(sd_status[3] & 0x000FU) ;
 800cb0a:	697b      	ldr	r3, [r7, #20]
 800cb0c:	b2db      	uxtb	r3, r3
 800cb0e:	f003 030f 	and.w	r3, r3, #15
 800cb12:	b2da      	uxtb	r2, r3
 800cb14:	683b      	ldr	r3, [r7, #0]
 800cb16:	745a      	strb	r2, [r3, #17]
    pStatus->VideoSpeedClass = (uint8_t)((sd_status[4] & 0xFF000000U) >> 24U);
 800cb18:	69bb      	ldr	r3, [r7, #24]
 800cb1a:	0e1b      	lsrs	r3, r3, #24
 800cb1c:	b2da      	uxtb	r2, r3
 800cb1e:	683b      	ldr	r3, [r7, #0]
 800cb20:	749a      	strb	r2, [r3, #18]
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 800cb22:	687b      	ldr	r3, [r7, #4]
 800cb24:	681b      	ldr	r3, [r3, #0]
 800cb26:	f44f 7100 	mov.w	r1, #512	; 0x200
 800cb2a:	4618      	mov	r0, r3
 800cb2c:	f001 ff9e 	bl	800ea6c <SDMMC_CmdBlockLength>
 800cb30:	64b8      	str	r0, [r7, #72]	; 0x48
  if (errorstate != HAL_SD_ERROR_NONE)
 800cb32:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800cb34:	2b00      	cmp	r3, #0
 800cb36:	d00d      	beq.n	800cb54 <HAL_SD_GetCardStatus+0x16c>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800cb38:	687b      	ldr	r3, [r7, #4]
 800cb3a:	681b      	ldr	r3, [r3, #0]
 800cb3c:	4a08      	ldr	r2, [pc, #32]	; (800cb60 <HAL_SD_GetCardStatus+0x178>)
 800cb3e:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode = errorstate;
 800cb40:	687b      	ldr	r3, [r7, #4]
 800cb42:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800cb44:	635a      	str	r2, [r3, #52]	; 0x34
    hsd->State = HAL_SD_STATE_READY;
 800cb46:	687b      	ldr	r3, [r7, #4]
 800cb48:	2201      	movs	r2, #1
 800cb4a:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    status = HAL_ERROR;
 800cb4e:	2301      	movs	r3, #1
 800cb50:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
  }


  return status;
 800cb54:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
}
 800cb58:	4618      	mov	r0, r3
 800cb5a:	3750      	adds	r7, #80	; 0x50
 800cb5c:	46bd      	mov	sp, r7
 800cb5e:	bd80      	pop	{r7, pc}
 800cb60:	1fe00fff 	.word	0x1fe00fff

0800cb64 <HAL_SD_GetCardInfo>:
  * @param  pCardInfo: Pointer to the HAL_SD_CardInfoTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardInfo(SD_HandleTypeDef *hsd, HAL_SD_CardInfoTypeDef *pCardInfo)
{
 800cb64:	b480      	push	{r7}
 800cb66:	b083      	sub	sp, #12
 800cb68:	af00      	add	r7, sp, #0
 800cb6a:	6078      	str	r0, [r7, #4]
 800cb6c:	6039      	str	r1, [r7, #0]
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 800cb6e:	687b      	ldr	r3, [r7, #4]
 800cb70:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800cb72:	683b      	ldr	r3, [r7, #0]
 800cb74:	601a      	str	r2, [r3, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 800cb76:	687b      	ldr	r3, [r7, #4]
 800cb78:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800cb7a:	683b      	ldr	r3, [r7, #0]
 800cb7c:	605a      	str	r2, [r3, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 800cb7e:	687b      	ldr	r3, [r7, #4]
 800cb80:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800cb82:	683b      	ldr	r3, [r7, #0]
 800cb84:	609a      	str	r2, [r3, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 800cb86:	687b      	ldr	r3, [r7, #4]
 800cb88:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800cb8a:	683b      	ldr	r3, [r7, #0]
 800cb8c:	60da      	str	r2, [r3, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 800cb8e:	687b      	ldr	r3, [r7, #4]
 800cb90:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800cb92:	683b      	ldr	r3, [r7, #0]
 800cb94:	611a      	str	r2, [r3, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 800cb96:	687b      	ldr	r3, [r7, #4]
 800cb98:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800cb9a:	683b      	ldr	r3, [r7, #0]
 800cb9c:	615a      	str	r2, [r3, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 800cb9e:	687b      	ldr	r3, [r7, #4]
 800cba0:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800cba2:	683b      	ldr	r3, [r7, #0]
 800cba4:	619a      	str	r2, [r3, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 800cba6:	687b      	ldr	r3, [r7, #4]
 800cba8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800cbaa:	683b      	ldr	r3, [r7, #0]
 800cbac:	61da      	str	r2, [r3, #28]

  return HAL_OK;
 800cbae:	2300      	movs	r3, #0
}
 800cbb0:	4618      	mov	r0, r3
 800cbb2:	370c      	adds	r7, #12
 800cbb4:	46bd      	mov	sp, r7
 800cbb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cbba:	4770      	bx	lr

0800cbbc <HAL_SD_ConfigWideBusOperation>:
  *            @arg SDMMC_BUS_WIDE_4B: 4-bit data transfer
  *            @arg SDMMC_BUS_WIDE_1B: 1-bit data transfer
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ConfigWideBusOperation(SD_HandleTypeDef *hsd, uint32_t WideMode)
{
 800cbbc:	b590      	push	{r4, r7, lr}
 800cbbe:	b08d      	sub	sp, #52	; 0x34
 800cbc0:	af02      	add	r7, sp, #8
 800cbc2:	6078      	str	r0, [r7, #4]
 800cbc4:	6039      	str	r1, [r7, #0]
  SDMMC_InitTypeDef Init;
  uint32_t errorstate;
  uint32_t sdmmc_clk;
  HAL_StatusTypeDef status = HAL_OK;
 800cbc6:	2300      	movs	r3, #0
 800cbc8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  /* Check the parameters */
  assert_param(IS_SDMMC_BUS_WIDE(WideMode));

  /* Change State */
  hsd->State = HAL_SD_STATE_BUSY;
 800cbcc:	687b      	ldr	r3, [r7, #4]
 800cbce:	2203      	movs	r2, #3
 800cbd0:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

  if (hsd->SdCard.CardType != CARD_SECURED)
 800cbd4:	687b      	ldr	r3, [r7, #4]
 800cbd6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cbd8:	2b03      	cmp	r3, #3
 800cbda:	d02e      	beq.n	800cc3a <HAL_SD_ConfigWideBusOperation+0x7e>
  {
    if (WideMode == SDMMC_BUS_WIDE_8B)
 800cbdc:	683b      	ldr	r3, [r7, #0]
 800cbde:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800cbe2:	d106      	bne.n	800cbf2 <HAL_SD_ConfigWideBusOperation+0x36>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800cbe4:	687b      	ldr	r3, [r7, #4]
 800cbe6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800cbe8:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800cbec:	687b      	ldr	r3, [r7, #4]
 800cbee:	635a      	str	r2, [r3, #52]	; 0x34
 800cbf0:	e029      	b.n	800cc46 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if (WideMode == SDMMC_BUS_WIDE_4B)
 800cbf2:	683b      	ldr	r3, [r7, #0]
 800cbf4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800cbf8:	d10a      	bne.n	800cc10 <HAL_SD_ConfigWideBusOperation+0x54>
    {
      errorstate = SD_WideBus_Enable(hsd);
 800cbfa:	6878      	ldr	r0, [r7, #4]
 800cbfc:	f000 fb64 	bl	800d2c8 <SD_WideBus_Enable>
 800cc00:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 800cc02:	687b      	ldr	r3, [r7, #4]
 800cc04:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800cc06:	6a3b      	ldr	r3, [r7, #32]
 800cc08:	431a      	orrs	r2, r3
 800cc0a:	687b      	ldr	r3, [r7, #4]
 800cc0c:	635a      	str	r2, [r3, #52]	; 0x34
 800cc0e:	e01a      	b.n	800cc46 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if (WideMode == SDMMC_BUS_WIDE_1B)
 800cc10:	683b      	ldr	r3, [r7, #0]
 800cc12:	2b00      	cmp	r3, #0
 800cc14:	d10a      	bne.n	800cc2c <HAL_SD_ConfigWideBusOperation+0x70>
    {
      errorstate = SD_WideBus_Disable(hsd);
 800cc16:	6878      	ldr	r0, [r7, #4]
 800cc18:	f000 fba1 	bl	800d35e <SD_WideBus_Disable>
 800cc1c:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 800cc1e:	687b      	ldr	r3, [r7, #4]
 800cc20:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800cc22:	6a3b      	ldr	r3, [r7, #32]
 800cc24:	431a      	orrs	r2, r3
 800cc26:	687b      	ldr	r3, [r7, #4]
 800cc28:	635a      	str	r2, [r3, #52]	; 0x34
 800cc2a:	e00c      	b.n	800cc46 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else
    {
      /* WideMode is not a valid argument*/
      hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800cc2c:	687b      	ldr	r3, [r7, #4]
 800cc2e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800cc30:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800cc34:	687b      	ldr	r3, [r7, #4]
 800cc36:	635a      	str	r2, [r3, #52]	; 0x34
 800cc38:	e005      	b.n	800cc46 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
  }
  else
  {
    /* SD Card does not support this feature */
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800cc3a:	687b      	ldr	r3, [r7, #4]
 800cc3c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800cc3e:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800cc42:	687b      	ldr	r3, [r7, #4]
 800cc44:	635a      	str	r2, [r3, #52]	; 0x34
  }

  if (hsd->ErrorCode != HAL_SD_ERROR_NONE)
 800cc46:	687b      	ldr	r3, [r7, #4]
 800cc48:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800cc4a:	2b00      	cmp	r3, #0
 800cc4c:	d007      	beq.n	800cc5e <HAL_SD_ConfigWideBusOperation+0xa2>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800cc4e:	687b      	ldr	r3, [r7, #4]
 800cc50:	681b      	ldr	r3, [r3, #0]
 800cc52:	4a5f      	ldr	r2, [pc, #380]	; (800cdd0 <HAL_SD_ConfigWideBusOperation+0x214>)
 800cc54:	639a      	str	r2, [r3, #56]	; 0x38
    status = HAL_ERROR;
 800cc56:	2301      	movs	r3, #1
 800cc58:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800cc5c:	e096      	b.n	800cd8c <HAL_SD_ConfigWideBusOperation+0x1d0>
  }
  else
  {
    sdmmc_clk     = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SDMMC);
 800cc5e:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 800cc62:	f04f 0100 	mov.w	r1, #0
 800cc66:	f7fd fdf5 	bl	800a854 <HAL_RCCEx_GetPeriphCLKFreq>
 800cc6a:	61f8      	str	r0, [r7, #28]
    if (sdmmc_clk != 0U)
 800cc6c:	69fb      	ldr	r3, [r7, #28]
 800cc6e:	2b00      	cmp	r3, #0
 800cc70:	f000 8083 	beq.w	800cd7a <HAL_SD_ConfigWideBusOperation+0x1be>
    {
      /* Configure the SDMMC peripheral */
      Init.ClockEdge           = hsd->Init.ClockEdge;
 800cc74:	687b      	ldr	r3, [r7, #4]
 800cc76:	685b      	ldr	r3, [r3, #4]
 800cc78:	60bb      	str	r3, [r7, #8]
      Init.ClockPowerSave      = hsd->Init.ClockPowerSave;
 800cc7a:	687b      	ldr	r3, [r7, #4]
 800cc7c:	689b      	ldr	r3, [r3, #8]
 800cc7e:	60fb      	str	r3, [r7, #12]
      Init.BusWide             = WideMode;
 800cc80:	683b      	ldr	r3, [r7, #0]
 800cc82:	613b      	str	r3, [r7, #16]
      Init.HardwareFlowControl = hsd->Init.HardwareFlowControl;
 800cc84:	687b      	ldr	r3, [r7, #4]
 800cc86:	691b      	ldr	r3, [r3, #16]
 800cc88:	617b      	str	r3, [r7, #20]

      /* Check if user Clock div < Normal speed 25Mhz, no change in Clockdiv */
      if (hsd->Init.ClockDiv >= (sdmmc_clk / (2U * SD_NORMAL_SPEED_FREQ)))
 800cc8a:	687b      	ldr	r3, [r7, #4]
 800cc8c:	695a      	ldr	r2, [r3, #20]
 800cc8e:	69fb      	ldr	r3, [r7, #28]
 800cc90:	4950      	ldr	r1, [pc, #320]	; (800cdd4 <HAL_SD_ConfigWideBusOperation+0x218>)
 800cc92:	fba1 1303 	umull	r1, r3, r1, r3
 800cc96:	0e1b      	lsrs	r3, r3, #24
 800cc98:	429a      	cmp	r2, r3
 800cc9a:	d303      	bcc.n	800cca4 <HAL_SD_ConfigWideBusOperation+0xe8>
      {
        Init.ClockDiv = hsd->Init.ClockDiv;
 800cc9c:	687b      	ldr	r3, [r7, #4]
 800cc9e:	695b      	ldr	r3, [r3, #20]
 800cca0:	61bb      	str	r3, [r7, #24]
 800cca2:	e05a      	b.n	800cd5a <HAL_SD_ConfigWideBusOperation+0x19e>
      }
      else if (hsd->SdCard.CardSpeed == CARD_ULTRA_HIGH_SPEED)
 800cca4:	687b      	ldr	r3, [r7, #4]
 800cca6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800cca8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800ccac:	d103      	bne.n	800ccb6 <HAL_SD_ConfigWideBusOperation+0xfa>
      {
        /* UltraHigh speed SD card,user Clock div */
        Init.ClockDiv = hsd->Init.ClockDiv;
 800ccae:	687b      	ldr	r3, [r7, #4]
 800ccb0:	695b      	ldr	r3, [r3, #20]
 800ccb2:	61bb      	str	r3, [r7, #24]
 800ccb4:	e051      	b.n	800cd5a <HAL_SD_ConfigWideBusOperation+0x19e>
      }
      else if (hsd->SdCard.CardSpeed == CARD_HIGH_SPEED)
 800ccb6:	687b      	ldr	r3, [r7, #4]
 800ccb8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ccba:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800ccbe:	d126      	bne.n	800cd0e <HAL_SD_ConfigWideBusOperation+0x152>
      {
        /* High speed SD card, Max Frequency = 50Mhz */
        if (hsd->Init.ClockDiv == 0U)
 800ccc0:	687b      	ldr	r3, [r7, #4]
 800ccc2:	695b      	ldr	r3, [r3, #20]
 800ccc4:	2b00      	cmp	r3, #0
 800ccc6:	d10e      	bne.n	800cce6 <HAL_SD_ConfigWideBusOperation+0x12a>
        {
          if (sdmmc_clk > SD_HIGH_SPEED_FREQ)
 800ccc8:	69fb      	ldr	r3, [r7, #28]
 800ccca:	4a43      	ldr	r2, [pc, #268]	; (800cdd8 <HAL_SD_ConfigWideBusOperation+0x21c>)
 800cccc:	4293      	cmp	r3, r2
 800ccce:	d906      	bls.n	800ccde <HAL_SD_ConfigWideBusOperation+0x122>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_HIGH_SPEED_FREQ);
 800ccd0:	69fb      	ldr	r3, [r7, #28]
 800ccd2:	4a40      	ldr	r2, [pc, #256]	; (800cdd4 <HAL_SD_ConfigWideBusOperation+0x218>)
 800ccd4:	fba2 2303 	umull	r2, r3, r2, r3
 800ccd8:	0e5b      	lsrs	r3, r3, #25
 800ccda:	61bb      	str	r3, [r7, #24]
 800ccdc:	e03d      	b.n	800cd5a <HAL_SD_ConfigWideBusOperation+0x19e>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 800ccde:	687b      	ldr	r3, [r7, #4]
 800cce0:	695b      	ldr	r3, [r3, #20]
 800cce2:	61bb      	str	r3, [r7, #24]
 800cce4:	e039      	b.n	800cd5a <HAL_SD_ConfigWideBusOperation+0x19e>
          }
        }
        else
        {
          if ((sdmmc_clk / (2U * hsd->Init.ClockDiv)) > SD_HIGH_SPEED_FREQ)
 800cce6:	687b      	ldr	r3, [r7, #4]
 800cce8:	695b      	ldr	r3, [r3, #20]
 800ccea:	005b      	lsls	r3, r3, #1
 800ccec:	69fa      	ldr	r2, [r7, #28]
 800ccee:	fbb2 f3f3 	udiv	r3, r2, r3
 800ccf2:	4a39      	ldr	r2, [pc, #228]	; (800cdd8 <HAL_SD_ConfigWideBusOperation+0x21c>)
 800ccf4:	4293      	cmp	r3, r2
 800ccf6:	d906      	bls.n	800cd06 <HAL_SD_ConfigWideBusOperation+0x14a>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_HIGH_SPEED_FREQ);
 800ccf8:	69fb      	ldr	r3, [r7, #28]
 800ccfa:	4a36      	ldr	r2, [pc, #216]	; (800cdd4 <HAL_SD_ConfigWideBusOperation+0x218>)
 800ccfc:	fba2 2303 	umull	r2, r3, r2, r3
 800cd00:	0e5b      	lsrs	r3, r3, #25
 800cd02:	61bb      	str	r3, [r7, #24]
 800cd04:	e029      	b.n	800cd5a <HAL_SD_ConfigWideBusOperation+0x19e>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 800cd06:	687b      	ldr	r3, [r7, #4]
 800cd08:	695b      	ldr	r3, [r3, #20]
 800cd0a:	61bb      	str	r3, [r7, #24]
 800cd0c:	e025      	b.n	800cd5a <HAL_SD_ConfigWideBusOperation+0x19e>
        }
      }
      else
      {
        /* No High speed SD card, Max Frequency = 25Mhz */
        if (hsd->Init.ClockDiv == 0U)
 800cd0e:	687b      	ldr	r3, [r7, #4]
 800cd10:	695b      	ldr	r3, [r3, #20]
 800cd12:	2b00      	cmp	r3, #0
 800cd14:	d10e      	bne.n	800cd34 <HAL_SD_ConfigWideBusOperation+0x178>
        {
          if (sdmmc_clk > SD_NORMAL_SPEED_FREQ)
 800cd16:	69fb      	ldr	r3, [r7, #28]
 800cd18:	4a30      	ldr	r2, [pc, #192]	; (800cddc <HAL_SD_ConfigWideBusOperation+0x220>)
 800cd1a:	4293      	cmp	r3, r2
 800cd1c:	d906      	bls.n	800cd2c <HAL_SD_ConfigWideBusOperation+0x170>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_NORMAL_SPEED_FREQ);
 800cd1e:	69fb      	ldr	r3, [r7, #28]
 800cd20:	4a2c      	ldr	r2, [pc, #176]	; (800cdd4 <HAL_SD_ConfigWideBusOperation+0x218>)
 800cd22:	fba2 2303 	umull	r2, r3, r2, r3
 800cd26:	0e1b      	lsrs	r3, r3, #24
 800cd28:	61bb      	str	r3, [r7, #24]
 800cd2a:	e016      	b.n	800cd5a <HAL_SD_ConfigWideBusOperation+0x19e>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 800cd2c:	687b      	ldr	r3, [r7, #4]
 800cd2e:	695b      	ldr	r3, [r3, #20]
 800cd30:	61bb      	str	r3, [r7, #24]
 800cd32:	e012      	b.n	800cd5a <HAL_SD_ConfigWideBusOperation+0x19e>
          }
        }
        else
        {
          if ((sdmmc_clk / (2U * hsd->Init.ClockDiv)) > SD_NORMAL_SPEED_FREQ)
 800cd34:	687b      	ldr	r3, [r7, #4]
 800cd36:	695b      	ldr	r3, [r3, #20]
 800cd38:	005b      	lsls	r3, r3, #1
 800cd3a:	69fa      	ldr	r2, [r7, #28]
 800cd3c:	fbb2 f3f3 	udiv	r3, r2, r3
 800cd40:	4a26      	ldr	r2, [pc, #152]	; (800cddc <HAL_SD_ConfigWideBusOperation+0x220>)
 800cd42:	4293      	cmp	r3, r2
 800cd44:	d906      	bls.n	800cd54 <HAL_SD_ConfigWideBusOperation+0x198>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_NORMAL_SPEED_FREQ);
 800cd46:	69fb      	ldr	r3, [r7, #28]
 800cd48:	4a22      	ldr	r2, [pc, #136]	; (800cdd4 <HAL_SD_ConfigWideBusOperation+0x218>)
 800cd4a:	fba2 2303 	umull	r2, r3, r2, r3
 800cd4e:	0e1b      	lsrs	r3, r3, #24
 800cd50:	61bb      	str	r3, [r7, #24]
 800cd52:	e002      	b.n	800cd5a <HAL_SD_ConfigWideBusOperation+0x19e>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 800cd54:	687b      	ldr	r3, [r7, #4]
 800cd56:	695b      	ldr	r3, [r3, #20]
 800cd58:	61bb      	str	r3, [r7, #24]

#if (USE_SD_TRANSCEIVER != 0U)
      Init.TranceiverPresent = hsd->Init.TranceiverPresent;
#endif /* USE_SD_TRANSCEIVER */

      (void)SDMMC_Init(hsd->Instance, Init);
 800cd5a:	687b      	ldr	r3, [r7, #4]
 800cd5c:	681c      	ldr	r4, [r3, #0]
 800cd5e:	466a      	mov	r2, sp
 800cd60:	f107 0314 	add.w	r3, r7, #20
 800cd64:	e893 0003 	ldmia.w	r3, {r0, r1}
 800cd68:	e882 0003 	stmia.w	r2, {r0, r1}
 800cd6c:	f107 0308 	add.w	r3, r7, #8
 800cd70:	cb0e      	ldmia	r3, {r1, r2, r3}
 800cd72:	4620      	mov	r0, r4
 800cd74:	f001 fd9c 	bl	800e8b0 <SDMMC_Init>
 800cd78:	e008      	b.n	800cd8c <HAL_SD_ConfigWideBusOperation+0x1d0>
    }
    else
    {
      hsd->ErrorCode |= SDMMC_ERROR_INVALID_PARAMETER;
 800cd7a:	687b      	ldr	r3, [r7, #4]
 800cd7c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800cd7e:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800cd82:	687b      	ldr	r3, [r7, #4]
 800cd84:	635a      	str	r2, [r3, #52]	; 0x34
      status = HAL_ERROR;
 800cd86:	2301      	movs	r3, #1
 800cd88:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 800cd8c:	687b      	ldr	r3, [r7, #4]
 800cd8e:	681b      	ldr	r3, [r3, #0]
 800cd90:	f44f 7100 	mov.w	r1, #512	; 0x200
 800cd94:	4618      	mov	r0, r3
 800cd96:	f001 fe69 	bl	800ea6c <SDMMC_CmdBlockLength>
 800cd9a:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 800cd9c:	6a3b      	ldr	r3, [r7, #32]
 800cd9e:	2b00      	cmp	r3, #0
 800cda0:	d00c      	beq.n	800cdbc <HAL_SD_ConfigWideBusOperation+0x200>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800cda2:	687b      	ldr	r3, [r7, #4]
 800cda4:	681b      	ldr	r3, [r3, #0]
 800cda6:	4a0a      	ldr	r2, [pc, #40]	; (800cdd0 <HAL_SD_ConfigWideBusOperation+0x214>)
 800cda8:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 800cdaa:	687b      	ldr	r3, [r7, #4]
 800cdac:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800cdae:	6a3b      	ldr	r3, [r7, #32]
 800cdb0:	431a      	orrs	r2, r3
 800cdb2:	687b      	ldr	r3, [r7, #4]
 800cdb4:	635a      	str	r2, [r3, #52]	; 0x34
    status = HAL_ERROR;
 800cdb6:	2301      	movs	r3, #1
 800cdb8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Change State */
  hsd->State = HAL_SD_STATE_READY;
 800cdbc:	687b      	ldr	r3, [r7, #4]
 800cdbe:	2201      	movs	r2, #1
 800cdc0:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

  return status;
 800cdc4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 800cdc8:	4618      	mov	r0, r3
 800cdca:	372c      	adds	r7, #44	; 0x2c
 800cdcc:	46bd      	mov	sp, r7
 800cdce:	bd90      	pop	{r4, r7, pc}
 800cdd0:	1fe00fff 	.word	0x1fe00fff
 800cdd4:	55e63b89 	.word	0x55e63b89
 800cdd8:	02faf080 	.word	0x02faf080
 800cddc:	017d7840 	.word	0x017d7840

0800cde0 <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd: pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 800cde0:	b580      	push	{r7, lr}
 800cde2:	b086      	sub	sp, #24
 800cde4:	af00      	add	r7, sp, #0
 800cde6:	6078      	str	r0, [r7, #4]
  uint32_t cardstate;
  uint32_t errorstate;
  uint32_t resp1 = 0;
 800cde8:	2300      	movs	r3, #0
 800cdea:	60fb      	str	r3, [r7, #12]

  errorstate = SD_SendStatus(hsd, &resp1);
 800cdec:	f107 030c 	add.w	r3, r7, #12
 800cdf0:	4619      	mov	r1, r3
 800cdf2:	6878      	ldr	r0, [r7, #4]
 800cdf4:	f000 fa40 	bl	800d278 <SD_SendStatus>
 800cdf8:	6178      	str	r0, [r7, #20]
  if (errorstate != HAL_SD_ERROR_NONE)
 800cdfa:	697b      	ldr	r3, [r7, #20]
 800cdfc:	2b00      	cmp	r3, #0
 800cdfe:	d005      	beq.n	800ce0c <HAL_SD_GetCardState+0x2c>
  {
    hsd->ErrorCode |= errorstate;
 800ce00:	687b      	ldr	r3, [r7, #4]
 800ce02:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800ce04:	697b      	ldr	r3, [r7, #20]
 800ce06:	431a      	orrs	r2, r3
 800ce08:	687b      	ldr	r3, [r7, #4]
 800ce0a:	635a      	str	r2, [r3, #52]	; 0x34
  }

  cardstate = ((resp1 >> 9U) & 0x0FU);
 800ce0c:	68fb      	ldr	r3, [r7, #12]
 800ce0e:	0a5b      	lsrs	r3, r3, #9
 800ce10:	f003 030f 	and.w	r3, r3, #15
 800ce14:	613b      	str	r3, [r7, #16]

  return (HAL_SD_CardStateTypeDef)cardstate;
 800ce16:	693b      	ldr	r3, [r7, #16]
}
 800ce18:	4618      	mov	r0, r3
 800ce1a:	3718      	adds	r7, #24
 800ce1c:	46bd      	mov	sp, r7
 800ce1e:	bd80      	pop	{r7, pc}

0800ce20 <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd: Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 800ce20:	b580      	push	{r7, lr}
 800ce22:	b090      	sub	sp, #64	; 0x40
 800ce24:	af00      	add	r7, sp, #0
 800ce26:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 0U;
 800ce28:	2300      	movs	r3, #0
 800ce2a:	817b      	strh	r3, [r7, #10]
  uint32_t tickstart = HAL_GetTick();
 800ce2c:	f7fa fd88 	bl	8007940 <HAL_GetTick>
 800ce30:	63f8      	str	r0, [r7, #60]	; 0x3c

  /* Check the power State */
  if (SDMMC_GetPowerState(hsd->Instance) == 0U)
 800ce32:	687b      	ldr	r3, [r7, #4]
 800ce34:	681b      	ldr	r3, [r3, #0]
 800ce36:	4618      	mov	r0, r3
 800ce38:	f001 fd93 	bl	800e962 <SDMMC_GetPowerState>
 800ce3c:	4603      	mov	r3, r0
 800ce3e:	2b00      	cmp	r3, #0
 800ce40:	d102      	bne.n	800ce48 <SD_InitCard+0x28>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800ce42:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 800ce46:	e0b5      	b.n	800cfb4 <SD_InitCard+0x194>
  }

  if (hsd->SdCard.CardType != CARD_SECURED)
 800ce48:	687b      	ldr	r3, [r7, #4]
 800ce4a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ce4c:	2b03      	cmp	r3, #3
 800ce4e:	d02e      	beq.n	800ceae <SD_InitCard+0x8e>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 800ce50:	687b      	ldr	r3, [r7, #4]
 800ce52:	681b      	ldr	r3, [r3, #0]
 800ce54:	4618      	mov	r0, r3
 800ce56:	f001 ffde 	bl	800ee16 <SDMMC_CmdSendCID>
 800ce5a:	63b8      	str	r0, [r7, #56]	; 0x38
    if (errorstate != HAL_SD_ERROR_NONE)
 800ce5c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ce5e:	2b00      	cmp	r3, #0
 800ce60:	d001      	beq.n	800ce66 <SD_InitCard+0x46>
    {
      return errorstate;
 800ce62:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ce64:	e0a6      	b.n	800cfb4 <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800ce66:	687b      	ldr	r3, [r7, #4]
 800ce68:	681b      	ldr	r3, [r3, #0]
 800ce6a:	2100      	movs	r1, #0
 800ce6c:	4618      	mov	r0, r3
 800ce6e:	f001 fdbe 	bl	800e9ee <SDMMC_GetResponse>
 800ce72:	4602      	mov	r2, r0
 800ce74:	687b      	ldr	r3, [r7, #4]
 800ce76:	66da      	str	r2, [r3, #108]	; 0x6c
      hsd->CID[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 800ce78:	687b      	ldr	r3, [r7, #4]
 800ce7a:	681b      	ldr	r3, [r3, #0]
 800ce7c:	2104      	movs	r1, #4
 800ce7e:	4618      	mov	r0, r3
 800ce80:	f001 fdb5 	bl	800e9ee <SDMMC_GetResponse>
 800ce84:	4602      	mov	r2, r0
 800ce86:	687b      	ldr	r3, [r7, #4]
 800ce88:	671a      	str	r2, [r3, #112]	; 0x70
      hsd->CID[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 800ce8a:	687b      	ldr	r3, [r7, #4]
 800ce8c:	681b      	ldr	r3, [r3, #0]
 800ce8e:	2108      	movs	r1, #8
 800ce90:	4618      	mov	r0, r3
 800ce92:	f001 fdac 	bl	800e9ee <SDMMC_GetResponse>
 800ce96:	4602      	mov	r2, r0
 800ce98:	687b      	ldr	r3, [r7, #4]
 800ce9a:	675a      	str	r2, [r3, #116]	; 0x74
      hsd->CID[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 800ce9c:	687b      	ldr	r3, [r7, #4]
 800ce9e:	681b      	ldr	r3, [r3, #0]
 800cea0:	210c      	movs	r1, #12
 800cea2:	4618      	mov	r0, r3
 800cea4:	f001 fda3 	bl	800e9ee <SDMMC_GetResponse>
 800cea8:	4602      	mov	r2, r0
 800ceaa:	687b      	ldr	r3, [r7, #4]
 800ceac:	679a      	str	r2, [r3, #120]	; 0x78
    }
  }

  if (hsd->SdCard.CardType != CARD_SECURED)
 800ceae:	687b      	ldr	r3, [r7, #4]
 800ceb0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ceb2:	2b03      	cmp	r3, #3
 800ceb4:	d01d      	beq.n	800cef2 <SD_InitCard+0xd2>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    while (sd_rca == 0U)
 800ceb6:	e019      	b.n	800ceec <SD_InitCard+0xcc>
    {
      errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 800ceb8:	687b      	ldr	r3, [r7, #4]
 800ceba:	681b      	ldr	r3, [r3, #0]
 800cebc:	f107 020a 	add.w	r2, r7, #10
 800cec0:	4611      	mov	r1, r2
 800cec2:	4618      	mov	r0, r3
 800cec4:	f001 ffe6 	bl	800ee94 <SDMMC_CmdSetRelAdd>
 800cec8:	63b8      	str	r0, [r7, #56]	; 0x38
      if (errorstate != HAL_SD_ERROR_NONE)
 800ceca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cecc:	2b00      	cmp	r3, #0
 800cece:	d001      	beq.n	800ced4 <SD_InitCard+0xb4>
      {
        return errorstate;
 800ced0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ced2:	e06f      	b.n	800cfb4 <SD_InitCard+0x194>
      }
      if ((HAL_GetTick() - tickstart) >=  SDMMC_CMDTIMEOUT)
 800ced4:	f7fa fd34 	bl	8007940 <HAL_GetTick>
 800ced8:	4602      	mov	r2, r0
 800ceda:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800cedc:	1ad3      	subs	r3, r2, r3
 800cede:	f241 3287 	movw	r2, #4999	; 0x1387
 800cee2:	4293      	cmp	r3, r2
 800cee4:	d902      	bls.n	800ceec <SD_InitCard+0xcc>
      {
        return HAL_SD_ERROR_TIMEOUT;
 800cee6:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800ceea:	e063      	b.n	800cfb4 <SD_InitCard+0x194>
    while (sd_rca == 0U)
 800ceec:	897b      	ldrh	r3, [r7, #10]
 800ceee:	2b00      	cmp	r3, #0
 800cef0:	d0e2      	beq.n	800ceb8 <SD_InitCard+0x98>
      }
    }
  }
  if (hsd->SdCard.CardType != CARD_SECURED)
 800cef2:	687b      	ldr	r3, [r7, #4]
 800cef4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cef6:	2b03      	cmp	r3, #3
 800cef8:	d036      	beq.n	800cf68 <SD_InitCard+0x148>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 800cefa:	897b      	ldrh	r3, [r7, #10]
 800cefc:	461a      	mov	r2, r3
 800cefe:	687b      	ldr	r3, [r7, #4]
 800cf00:	645a      	str	r2, [r3, #68]	; 0x44

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800cf02:	687b      	ldr	r3, [r7, #4]
 800cf04:	681a      	ldr	r2, [r3, #0]
 800cf06:	687b      	ldr	r3, [r7, #4]
 800cf08:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800cf0a:	041b      	lsls	r3, r3, #16
 800cf0c:	4619      	mov	r1, r3
 800cf0e:	4610      	mov	r0, r2
 800cf10:	f001 ffa0 	bl	800ee54 <SDMMC_CmdSendCSD>
 800cf14:	63b8      	str	r0, [r7, #56]	; 0x38
    if (errorstate != HAL_SD_ERROR_NONE)
 800cf16:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cf18:	2b00      	cmp	r3, #0
 800cf1a:	d001      	beq.n	800cf20 <SD_InitCard+0x100>
    {
      return errorstate;
 800cf1c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cf1e:	e049      	b.n	800cfb4 <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800cf20:	687b      	ldr	r3, [r7, #4]
 800cf22:	681b      	ldr	r3, [r3, #0]
 800cf24:	2100      	movs	r1, #0
 800cf26:	4618      	mov	r0, r3
 800cf28:	f001 fd61 	bl	800e9ee <SDMMC_GetResponse>
 800cf2c:	4602      	mov	r2, r0
 800cf2e:	687b      	ldr	r3, [r7, #4]
 800cf30:	65da      	str	r2, [r3, #92]	; 0x5c
      hsd->CSD[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 800cf32:	687b      	ldr	r3, [r7, #4]
 800cf34:	681b      	ldr	r3, [r3, #0]
 800cf36:	2104      	movs	r1, #4
 800cf38:	4618      	mov	r0, r3
 800cf3a:	f001 fd58 	bl	800e9ee <SDMMC_GetResponse>
 800cf3e:	4602      	mov	r2, r0
 800cf40:	687b      	ldr	r3, [r7, #4]
 800cf42:	661a      	str	r2, [r3, #96]	; 0x60
      hsd->CSD[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 800cf44:	687b      	ldr	r3, [r7, #4]
 800cf46:	681b      	ldr	r3, [r3, #0]
 800cf48:	2108      	movs	r1, #8
 800cf4a:	4618      	mov	r0, r3
 800cf4c:	f001 fd4f 	bl	800e9ee <SDMMC_GetResponse>
 800cf50:	4602      	mov	r2, r0
 800cf52:	687b      	ldr	r3, [r7, #4]
 800cf54:	665a      	str	r2, [r3, #100]	; 0x64
      hsd->CSD[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 800cf56:	687b      	ldr	r3, [r7, #4]
 800cf58:	681b      	ldr	r3, [r3, #0]
 800cf5a:	210c      	movs	r1, #12
 800cf5c:	4618      	mov	r0, r3
 800cf5e:	f001 fd46 	bl	800e9ee <SDMMC_GetResponse>
 800cf62:	4602      	mov	r2, r0
 800cf64:	687b      	ldr	r3, [r7, #4]
 800cf66:	669a      	str	r2, [r3, #104]	; 0x68
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2) >> 20U);
 800cf68:	687b      	ldr	r3, [r7, #4]
 800cf6a:	681b      	ldr	r3, [r3, #0]
 800cf6c:	2104      	movs	r1, #4
 800cf6e:	4618      	mov	r0, r3
 800cf70:	f001 fd3d 	bl	800e9ee <SDMMC_GetResponse>
 800cf74:	4603      	mov	r3, r0
 800cf76:	0d1a      	lsrs	r2, r3, #20
 800cf78:	687b      	ldr	r3, [r7, #4]
 800cf7a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 800cf7c:	f107 030c 	add.w	r3, r7, #12
 800cf80:	4619      	mov	r1, r3
 800cf82:	6878      	ldr	r0, [r7, #4]
 800cf84:	f7ff fb8c 	bl	800c6a0 <HAL_SD_GetCardCSD>
 800cf88:	4603      	mov	r3, r0
 800cf8a:	2b00      	cmp	r3, #0
 800cf8c:	d002      	beq.n	800cf94 <SD_InitCard+0x174>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800cf8e:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800cf92:	e00f      	b.n	800cfb4 <SD_InitCard+0x194>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 800cf94:	687b      	ldr	r3, [r7, #4]
 800cf96:	681a      	ldr	r2, [r3, #0]
 800cf98:	687b      	ldr	r3, [r7, #4]
 800cf9a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800cf9c:	041b      	lsls	r3, r3, #16
 800cf9e:	4619      	mov	r1, r3
 800cfa0:	4610      	mov	r0, r2
 800cfa2:	f001 fe4f 	bl	800ec44 <SDMMC_CmdSelDesel>
 800cfa6:	63b8      	str	r0, [r7, #56]	; 0x38
  if (errorstate != HAL_SD_ERROR_NONE)
 800cfa8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cfaa:	2b00      	cmp	r3, #0
 800cfac:	d001      	beq.n	800cfb2 <SD_InitCard+0x192>
  {
    return errorstate;
 800cfae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cfb0:	e000      	b.n	800cfb4 <SD_InitCard+0x194>
  }

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 800cfb2:	2300      	movs	r3, #0
}
 800cfb4:	4618      	mov	r0, r3
 800cfb6:	3740      	adds	r7, #64	; 0x40
 800cfb8:	46bd      	mov	sp, r7
 800cfba:	bd80      	pop	{r7, pc}

0800cfbc <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 800cfbc:	b580      	push	{r7, lr}
 800cfbe:	b086      	sub	sp, #24
 800cfc0:	af00      	add	r7, sp, #0
 800cfc2:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800cfc4:	2300      	movs	r3, #0
 800cfc6:	60bb      	str	r3, [r7, #8]
  uint32_t response = 0U;
 800cfc8:	2300      	movs	r3, #0
 800cfca:	617b      	str	r3, [r7, #20]
  uint32_t validvoltage = 0U;
 800cfcc:	2300      	movs	r3, #0
 800cfce:	613b      	str	r3, [r7, #16]
#if (USE_SD_TRANSCEIVER != 0U)
  uint32_t tickstart = HAL_GetTick();
#endif /* USE_SD_TRANSCEIVER  */

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 800cfd0:	687b      	ldr	r3, [r7, #4]
 800cfd2:	681b      	ldr	r3, [r3, #0]
 800cfd4:	4618      	mov	r0, r3
 800cfd6:	f001 fe58 	bl	800ec8a <SDMMC_CmdGoIdleState>
 800cfda:	60f8      	str	r0, [r7, #12]
  if (errorstate != HAL_SD_ERROR_NONE)
 800cfdc:	68fb      	ldr	r3, [r7, #12]
 800cfde:	2b00      	cmp	r3, #0
 800cfe0:	d001      	beq.n	800cfe6 <SD_PowerON+0x2a>
  {
    return errorstate;
 800cfe2:	68fb      	ldr	r3, [r7, #12]
 800cfe4:	e072      	b.n	800d0cc <SD_PowerON+0x110>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 800cfe6:	687b      	ldr	r3, [r7, #4]
 800cfe8:	681b      	ldr	r3, [r3, #0]
 800cfea:	4618      	mov	r0, r3
 800cfec:	f001 fe6b 	bl	800ecc6 <SDMMC_CmdOperCond>
 800cff0:	60f8      	str	r0, [r7, #12]
  if (errorstate == SDMMC_ERROR_TIMEOUT) /* No response to CMD8 */
 800cff2:	68fb      	ldr	r3, [r7, #12]
 800cff4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800cff8:	d10d      	bne.n	800d016 <SD_PowerON+0x5a>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 800cffa:	687b      	ldr	r3, [r7, #4]
 800cffc:	2200      	movs	r2, #0
 800cffe:	63da      	str	r2, [r3, #60]	; 0x3c
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 800d000:	687b      	ldr	r3, [r7, #4]
 800d002:	681b      	ldr	r3, [r3, #0]
 800d004:	4618      	mov	r0, r3
 800d006:	f001 fe40 	bl	800ec8a <SDMMC_CmdGoIdleState>
 800d00a:	60f8      	str	r0, [r7, #12]
    if (errorstate != HAL_SD_ERROR_NONE)
 800d00c:	68fb      	ldr	r3, [r7, #12]
 800d00e:	2b00      	cmp	r3, #0
 800d010:	d004      	beq.n	800d01c <SD_PowerON+0x60>
    {
      return errorstate;
 800d012:	68fb      	ldr	r3, [r7, #12]
 800d014:	e05a      	b.n	800d0cc <SD_PowerON+0x110>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 800d016:	687b      	ldr	r3, [r7, #4]
 800d018:	2201      	movs	r2, #1
 800d01a:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  if (hsd->SdCard.CardVersion == CARD_V2_X)
 800d01c:	687b      	ldr	r3, [r7, #4]
 800d01e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d020:	2b01      	cmp	r3, #1
 800d022:	d137      	bne.n	800d094 <SD_PowerON+0xd8>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 800d024:	687b      	ldr	r3, [r7, #4]
 800d026:	681b      	ldr	r3, [r3, #0]
 800d028:	2100      	movs	r1, #0
 800d02a:	4618      	mov	r0, r3
 800d02c:	f001 fe6b 	bl	800ed06 <SDMMC_CmdAppCommand>
 800d030:	60f8      	str	r0, [r7, #12]
    if (errorstate != HAL_SD_ERROR_NONE)
 800d032:	68fb      	ldr	r3, [r7, #12]
 800d034:	2b00      	cmp	r3, #0
 800d036:	d02d      	beq.n	800d094 <SD_PowerON+0xd8>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800d038:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800d03c:	e046      	b.n	800d0cc <SD_PowerON+0x110>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while ((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 800d03e:	687b      	ldr	r3, [r7, #4]
 800d040:	681b      	ldr	r3, [r3, #0]
 800d042:	2100      	movs	r1, #0
 800d044:	4618      	mov	r0, r3
 800d046:	f001 fe5e 	bl	800ed06 <SDMMC_CmdAppCommand>
 800d04a:	60f8      	str	r0, [r7, #12]
    if (errorstate != HAL_SD_ERROR_NONE)
 800d04c:	68fb      	ldr	r3, [r7, #12]
 800d04e:	2b00      	cmp	r3, #0
 800d050:	d001      	beq.n	800d056 <SD_PowerON+0x9a>
    {
      return errorstate;
 800d052:	68fb      	ldr	r3, [r7, #12]
 800d054:	e03a      	b.n	800d0cc <SD_PowerON+0x110>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY |
 800d056:	687b      	ldr	r3, [r7, #4]
 800d058:	681b      	ldr	r3, [r3, #0]
 800d05a:	491e      	ldr	r1, [pc, #120]	; (800d0d4 <SD_PowerON+0x118>)
 800d05c:	4618      	mov	r0, r3
 800d05e:	f001 fe75 	bl	800ed4c <SDMMC_CmdAppOperCommand>
 800d062:	60f8      	str	r0, [r7, #12]
                                         SD_SWITCH_1_8V_CAPACITY);
    if (errorstate != HAL_SD_ERROR_NONE)
 800d064:	68fb      	ldr	r3, [r7, #12]
 800d066:	2b00      	cmp	r3, #0
 800d068:	d002      	beq.n	800d070 <SD_PowerON+0xb4>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800d06a:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800d06e:	e02d      	b.n	800d0cc <SD_PowerON+0x110>
    }

    /* Get command response */
    response = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800d070:	687b      	ldr	r3, [r7, #4]
 800d072:	681b      	ldr	r3, [r3, #0]
 800d074:	2100      	movs	r1, #0
 800d076:	4618      	mov	r0, r3
 800d078:	f001 fcb9 	bl	800e9ee <SDMMC_GetResponse>
 800d07c:	6178      	str	r0, [r7, #20]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 800d07e:	697b      	ldr	r3, [r7, #20]
 800d080:	0fdb      	lsrs	r3, r3, #31
 800d082:	2b01      	cmp	r3, #1
 800d084:	d101      	bne.n	800d08a <SD_PowerON+0xce>
 800d086:	2301      	movs	r3, #1
 800d088:	e000      	b.n	800d08c <SD_PowerON+0xd0>
 800d08a:	2300      	movs	r3, #0
 800d08c:	613b      	str	r3, [r7, #16]

    count++;
 800d08e:	68bb      	ldr	r3, [r7, #8]
 800d090:	3301      	adds	r3, #1
 800d092:	60bb      	str	r3, [r7, #8]
  while ((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 800d094:	68bb      	ldr	r3, [r7, #8]
 800d096:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800d09a:	4293      	cmp	r3, r2
 800d09c:	d802      	bhi.n	800d0a4 <SD_PowerON+0xe8>
 800d09e:	693b      	ldr	r3, [r7, #16]
 800d0a0:	2b00      	cmp	r3, #0
 800d0a2:	d0cc      	beq.n	800d03e <SD_PowerON+0x82>
  }

  if (count >= SDMMC_MAX_VOLT_TRIAL)
 800d0a4:	68bb      	ldr	r3, [r7, #8]
 800d0a6:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800d0aa:	4293      	cmp	r3, r2
 800d0ac:	d902      	bls.n	800d0b4 <SD_PowerON+0xf8>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 800d0ae:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800d0b2:	e00b      	b.n	800d0cc <SD_PowerON+0x110>
  }

  /* Set default card type */
  hsd->SdCard.CardType = CARD_SDSC;
 800d0b4:	687b      	ldr	r3, [r7, #4]
 800d0b6:	2200      	movs	r2, #0
 800d0b8:	639a      	str	r2, [r3, #56]	; 0x38

  if ((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY)
 800d0ba:	697b      	ldr	r3, [r7, #20]
 800d0bc:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800d0c0:	2b00      	cmp	r3, #0
 800d0c2:	d002      	beq.n	800d0ca <SD_PowerON+0x10e>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 800d0c4:	687b      	ldr	r3, [r7, #4]
 800d0c6:	2201      	movs	r2, #1
 800d0c8:	639a      	str	r2, [r3, #56]	; 0x38
      }
    }
#endif /* USE_SD_TRANSCEIVER  */
  }

  return HAL_SD_ERROR_NONE;
 800d0ca:	2300      	movs	r3, #0
}
 800d0cc:	4618      	mov	r0, r3
 800d0ce:	3718      	adds	r7, #24
 800d0d0:	46bd      	mov	sp, r7
 800d0d2:	bd80      	pop	{r7, pc}
 800d0d4:	c1100000 	.word	0xc1100000

0800d0d8 <SD_SendSDStatus>:
  * @param  pSDstatus: Pointer to the buffer that will contain the SD card status
  *         SD Status register)
  * @retval error state
  */
static uint32_t SD_SendSDStatus(SD_HandleTypeDef *hsd, uint32_t *pSDstatus)
{
 800d0d8:	b580      	push	{r7, lr}
 800d0da:	b08c      	sub	sp, #48	; 0x30
 800d0dc:	af00      	add	r7, sp, #0
 800d0de:	6078      	str	r0, [r7, #4]
 800d0e0:	6039      	str	r1, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 800d0e2:	f7fa fc2d 	bl	8007940 <HAL_GetTick>
 800d0e6:	6278      	str	r0, [r7, #36]	; 0x24
  uint32_t count;
  uint32_t *pData = pSDstatus;
 800d0e8:	683b      	ldr	r3, [r7, #0]
 800d0ea:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Check SD response */
  if ((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 800d0ec:	687b      	ldr	r3, [r7, #4]
 800d0ee:	681b      	ldr	r3, [r3, #0]
 800d0f0:	2100      	movs	r1, #0
 800d0f2:	4618      	mov	r0, r3
 800d0f4:	f001 fc7b 	bl	800e9ee <SDMMC_GetResponse>
 800d0f8:	4603      	mov	r3, r0
 800d0fa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800d0fe:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800d102:	d102      	bne.n	800d10a <SD_SendSDStatus+0x32>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 800d104:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800d108:	e0b0      	b.n	800d26c <SD_SendSDStatus+0x194>
  }

  /* Set block size for card if it is not equal to current block size for card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 64U);
 800d10a:	687b      	ldr	r3, [r7, #4]
 800d10c:	681b      	ldr	r3, [r3, #0]
 800d10e:	2140      	movs	r1, #64	; 0x40
 800d110:	4618      	mov	r0, r3
 800d112:	f001 fcab 	bl	800ea6c <SDMMC_CmdBlockLength>
 800d116:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 800d118:	6a3b      	ldr	r3, [r7, #32]
 800d11a:	2b00      	cmp	r3, #0
 800d11c:	d005      	beq.n	800d12a <SD_SendSDStatus+0x52>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 800d11e:	687b      	ldr	r3, [r7, #4]
 800d120:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800d122:	687b      	ldr	r3, [r7, #4]
 800d124:	635a      	str	r2, [r3, #52]	; 0x34
    return errorstate;
 800d126:	6a3b      	ldr	r3, [r7, #32]
 800d128:	e0a0      	b.n	800d26c <SD_SendSDStatus+0x194>
  }

  /* Send CMD55 */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800d12a:	687b      	ldr	r3, [r7, #4]
 800d12c:	681a      	ldr	r2, [r3, #0]
 800d12e:	687b      	ldr	r3, [r7, #4]
 800d130:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d132:	041b      	lsls	r3, r3, #16
 800d134:	4619      	mov	r1, r3
 800d136:	4610      	mov	r0, r2
 800d138:	f001 fde5 	bl	800ed06 <SDMMC_CmdAppCommand>
 800d13c:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 800d13e:	6a3b      	ldr	r3, [r7, #32]
 800d140:	2b00      	cmp	r3, #0
 800d142:	d005      	beq.n	800d150 <SD_SendSDStatus+0x78>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 800d144:	687b      	ldr	r3, [r7, #4]
 800d146:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800d148:	687b      	ldr	r3, [r7, #4]
 800d14a:	635a      	str	r2, [r3, #52]	; 0x34
    return errorstate;
 800d14c:	6a3b      	ldr	r3, [r7, #32]
 800d14e:	e08d      	b.n	800d26c <SD_SendSDStatus+0x194>
  }

  /* Configure the SD DPSM (Data Path State Machine) */
  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800d150:	f04f 33ff 	mov.w	r3, #4294967295
 800d154:	60bb      	str	r3, [r7, #8]
  config.DataLength    = 64U;
 800d156:	2340      	movs	r3, #64	; 0x40
 800d158:	60fb      	str	r3, [r7, #12]
  config.DataBlockSize = SDMMC_DATABLOCK_SIZE_64B;
 800d15a:	2360      	movs	r3, #96	; 0x60
 800d15c:	613b      	str	r3, [r7, #16]
  config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 800d15e:	2302      	movs	r3, #2
 800d160:	617b      	str	r3, [r7, #20]
  config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 800d162:	2300      	movs	r3, #0
 800d164:	61bb      	str	r3, [r7, #24]
  config.DPSM          = SDMMC_DPSM_ENABLE;
 800d166:	2301      	movs	r3, #1
 800d168:	61fb      	str	r3, [r7, #28]
  (void)SDMMC_ConfigData(hsd->Instance, &config);
 800d16a:	687b      	ldr	r3, [r7, #4]
 800d16c:	681b      	ldr	r3, [r3, #0]
 800d16e:	f107 0208 	add.w	r2, r7, #8
 800d172:	4611      	mov	r1, r2
 800d174:	4618      	mov	r0, r3
 800d176:	f001 fc4d 	bl	800ea14 <SDMMC_ConfigData>

  /* Send ACMD13 (SD_APP_STAUS)  with argument as card's RCA */
  errorstate = SDMMC_CmdStatusRegister(hsd->Instance);
 800d17a:	687b      	ldr	r3, [r7, #4]
 800d17c:	681b      	ldr	r3, [r3, #0]
 800d17e:	4618      	mov	r0, r3
 800d180:	f001 fecd 	bl	800ef1e <SDMMC_CmdStatusRegister>
 800d184:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 800d186:	6a3b      	ldr	r3, [r7, #32]
 800d188:	2b00      	cmp	r3, #0
 800d18a:	d02b      	beq.n	800d1e4 <SD_SendSDStatus+0x10c>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 800d18c:	687b      	ldr	r3, [r7, #4]
 800d18e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800d190:	687b      	ldr	r3, [r7, #4]
 800d192:	635a      	str	r2, [r3, #52]	; 0x34
    return errorstate;
 800d194:	6a3b      	ldr	r3, [r7, #32]
 800d196:	e069      	b.n	800d26c <SD_SendSDStatus+0x194>
  }

  /* Get status data */
  while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
  {
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF))
 800d198:	687b      	ldr	r3, [r7, #4]
 800d19a:	681b      	ldr	r3, [r3, #0]
 800d19c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d19e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800d1a2:	2b00      	cmp	r3, #0
 800d1a4:	d013      	beq.n	800d1ce <SD_SendSDStatus+0xf6>
    {
      for (count = 0U; count < 8U; count++)
 800d1a6:	2300      	movs	r3, #0
 800d1a8:	62fb      	str	r3, [r7, #44]	; 0x2c
 800d1aa:	e00d      	b.n	800d1c8 <SD_SendSDStatus+0xf0>
      {
        *pData = SDMMC_ReadFIFO(hsd->Instance);
 800d1ac:	687b      	ldr	r3, [r7, #4]
 800d1ae:	681b      	ldr	r3, [r3, #0]
 800d1b0:	4618      	mov	r0, r3
 800d1b2:	f001 fba7 	bl	800e904 <SDMMC_ReadFIFO>
 800d1b6:	4602      	mov	r2, r0
 800d1b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d1ba:	601a      	str	r2, [r3, #0]
        pData++;
 800d1bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d1be:	3304      	adds	r3, #4
 800d1c0:	62bb      	str	r3, [r7, #40]	; 0x28
      for (count = 0U; count < 8U; count++)
 800d1c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d1c4:	3301      	adds	r3, #1
 800d1c6:	62fb      	str	r3, [r7, #44]	; 0x2c
 800d1c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d1ca:	2b07      	cmp	r3, #7
 800d1cc:	d9ee      	bls.n	800d1ac <SD_SendSDStatus+0xd4>
      }
    }

    if ((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 800d1ce:	f7fa fbb7 	bl	8007940 <HAL_GetTick>
 800d1d2:	4602      	mov	r2, r0
 800d1d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d1d6:	1ad3      	subs	r3, r2, r3
 800d1d8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d1dc:	d102      	bne.n	800d1e4 <SD_SendSDStatus+0x10c>
    {
      return HAL_SD_ERROR_TIMEOUT;
 800d1de:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800d1e2:	e043      	b.n	800d26c <SD_SendSDStatus+0x194>
  while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 800d1e4:	687b      	ldr	r3, [r7, #4]
 800d1e6:	681b      	ldr	r3, [r3, #0]
 800d1e8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d1ea:	f403 7395 	and.w	r3, r3, #298	; 0x12a
 800d1ee:	2b00      	cmp	r3, #0
 800d1f0:	d0d2      	beq.n	800d198 <SD_SendSDStatus+0xc0>
    }
  }

  if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 800d1f2:	687b      	ldr	r3, [r7, #4]
 800d1f4:	681b      	ldr	r3, [r3, #0]
 800d1f6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d1f8:	f003 0308 	and.w	r3, r3, #8
 800d1fc:	2b00      	cmp	r3, #0
 800d1fe:	d001      	beq.n	800d204 <SD_SendSDStatus+0x12c>
  {
    return HAL_SD_ERROR_DATA_TIMEOUT;
 800d200:	2308      	movs	r3, #8
 800d202:	e033      	b.n	800d26c <SD_SendSDStatus+0x194>
  }
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 800d204:	687b      	ldr	r3, [r7, #4]
 800d206:	681b      	ldr	r3, [r3, #0]
 800d208:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d20a:	f003 0302 	and.w	r3, r3, #2
 800d20e:	2b00      	cmp	r3, #0
 800d210:	d001      	beq.n	800d216 <SD_SendSDStatus+0x13e>
  {
    return HAL_SD_ERROR_DATA_CRC_FAIL;
 800d212:	2302      	movs	r3, #2
 800d214:	e02a      	b.n	800d26c <SD_SendSDStatus+0x194>
  }
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 800d216:	687b      	ldr	r3, [r7, #4]
 800d218:	681b      	ldr	r3, [r3, #0]
 800d21a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d21c:	f003 0320 	and.w	r3, r3, #32
 800d220:	2b00      	cmp	r3, #0
 800d222:	d017      	beq.n	800d254 <SD_SendSDStatus+0x17c>
  {
    return HAL_SD_ERROR_RX_OVERRUN;
 800d224:	2320      	movs	r3, #32
 800d226:	e021      	b.n	800d26c <SD_SendSDStatus+0x194>
    /* Nothing to do */
  }

  while ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DPSMACT)))
  {
    *pData = SDMMC_ReadFIFO(hsd->Instance);
 800d228:	687b      	ldr	r3, [r7, #4]
 800d22a:	681b      	ldr	r3, [r3, #0]
 800d22c:	4618      	mov	r0, r3
 800d22e:	f001 fb69 	bl	800e904 <SDMMC_ReadFIFO>
 800d232:	4602      	mov	r2, r0
 800d234:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d236:	601a      	str	r2, [r3, #0]
    pData++;
 800d238:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d23a:	3304      	adds	r3, #4
 800d23c:	62bb      	str	r3, [r7, #40]	; 0x28

    if ((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 800d23e:	f7fa fb7f 	bl	8007940 <HAL_GetTick>
 800d242:	4602      	mov	r2, r0
 800d244:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d246:	1ad3      	subs	r3, r2, r3
 800d248:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d24c:	d102      	bne.n	800d254 <SD_SendSDStatus+0x17c>
    {
      return HAL_SD_ERROR_TIMEOUT;
 800d24e:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800d252:	e00b      	b.n	800d26c <SD_SendSDStatus+0x194>
  while ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DPSMACT)))
 800d254:	687b      	ldr	r3, [r7, #4]
 800d256:	681b      	ldr	r3, [r3, #0]
 800d258:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d25a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800d25e:	2b00      	cmp	r3, #0
 800d260:	d1e2      	bne.n	800d228 <SD_SendSDStatus+0x150>
    }
  }

  /* Clear all the static status flags*/
  __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800d262:	687b      	ldr	r3, [r7, #4]
 800d264:	681b      	ldr	r3, [r3, #0]
 800d266:	4a03      	ldr	r2, [pc, #12]	; (800d274 <SD_SendSDStatus+0x19c>)
 800d268:	639a      	str	r2, [r3, #56]	; 0x38

  return HAL_SD_ERROR_NONE;
 800d26a:	2300      	movs	r3, #0
}
 800d26c:	4618      	mov	r0, r3
 800d26e:	3730      	adds	r7, #48	; 0x30
 800d270:	46bd      	mov	sp, r7
 800d272:	bd80      	pop	{r7, pc}
 800d274:	18000f3a 	.word	0x18000f3a

0800d278 <SD_SendStatus>:
  * @param  pCardStatus: pointer to the buffer that will contain the SD card
  *         status (Card Status register)
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 800d278:	b580      	push	{r7, lr}
 800d27a:	b084      	sub	sp, #16
 800d27c:	af00      	add	r7, sp, #0
 800d27e:	6078      	str	r0, [r7, #4]
 800d280:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

  if (pCardStatus == NULL)
 800d282:	683b      	ldr	r3, [r7, #0]
 800d284:	2b00      	cmp	r3, #0
 800d286:	d102      	bne.n	800d28e <SD_SendStatus+0x16>
  {
    return HAL_SD_ERROR_PARAM;
 800d288:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800d28c:	e018      	b.n	800d2c0 <SD_SendStatus+0x48>
  }

  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800d28e:	687b      	ldr	r3, [r7, #4]
 800d290:	681a      	ldr	r2, [r3, #0]
 800d292:	687b      	ldr	r3, [r7, #4]
 800d294:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d296:	041b      	lsls	r3, r3, #16
 800d298:	4619      	mov	r1, r3
 800d29a:	4610      	mov	r0, r2
 800d29c:	f001 fe1c 	bl	800eed8 <SDMMC_CmdSendStatus>
 800d2a0:	60f8      	str	r0, [r7, #12]
  if (errorstate != HAL_SD_ERROR_NONE)
 800d2a2:	68fb      	ldr	r3, [r7, #12]
 800d2a4:	2b00      	cmp	r3, #0
 800d2a6:	d001      	beq.n	800d2ac <SD_SendStatus+0x34>
  {
    return errorstate;
 800d2a8:	68fb      	ldr	r3, [r7, #12]
 800d2aa:	e009      	b.n	800d2c0 <SD_SendStatus+0x48>
  }

  /* Get SD card status */
  *pCardStatus = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800d2ac:	687b      	ldr	r3, [r7, #4]
 800d2ae:	681b      	ldr	r3, [r3, #0]
 800d2b0:	2100      	movs	r1, #0
 800d2b2:	4618      	mov	r0, r3
 800d2b4:	f001 fb9b 	bl	800e9ee <SDMMC_GetResponse>
 800d2b8:	4602      	mov	r2, r0
 800d2ba:	683b      	ldr	r3, [r7, #0]
 800d2bc:	601a      	str	r2, [r3, #0]

  return HAL_SD_ERROR_NONE;
 800d2be:	2300      	movs	r3, #0
}
 800d2c0:	4618      	mov	r0, r3
 800d2c2:	3710      	adds	r7, #16
 800d2c4:	46bd      	mov	sp, r7
 800d2c6:	bd80      	pop	{r7, pc}

0800d2c8 <SD_WideBus_Enable>:
  * @brief  Enables the SDMMC wide bus mode.
  * @param  hsd: pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Enable(SD_HandleTypeDef *hsd)
{
 800d2c8:	b580      	push	{r7, lr}
 800d2ca:	b086      	sub	sp, #24
 800d2cc:	af00      	add	r7, sp, #0
 800d2ce:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0UL, 0UL};
 800d2d0:	2300      	movs	r3, #0
 800d2d2:	60fb      	str	r3, [r7, #12]
 800d2d4:	2300      	movs	r3, #0
 800d2d6:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if ((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 800d2d8:	687b      	ldr	r3, [r7, #4]
 800d2da:	681b      	ldr	r3, [r3, #0]
 800d2dc:	2100      	movs	r1, #0
 800d2de:	4618      	mov	r0, r3
 800d2e0:	f001 fb85 	bl	800e9ee <SDMMC_GetResponse>
 800d2e4:	4603      	mov	r3, r0
 800d2e6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800d2ea:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800d2ee:	d102      	bne.n	800d2f6 <SD_WideBus_Enable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 800d2f0:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800d2f4:	e02f      	b.n	800d356 <SD_WideBus_Enable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 800d2f6:	f107 030c 	add.w	r3, r7, #12
 800d2fa:	4619      	mov	r1, r3
 800d2fc:	6878      	ldr	r0, [r7, #4]
 800d2fe:	f000 f879 	bl	800d3f4 <SD_FindSCR>
 800d302:	6178      	str	r0, [r7, #20]
  if (errorstate != HAL_SD_ERROR_NONE)
 800d304:	697b      	ldr	r3, [r7, #20]
 800d306:	2b00      	cmp	r3, #0
 800d308:	d001      	beq.n	800d30e <SD_WideBus_Enable+0x46>
  {
    return errorstate;
 800d30a:	697b      	ldr	r3, [r7, #20]
 800d30c:	e023      	b.n	800d356 <SD_WideBus_Enable+0x8e>
  }

  /* If requested card supports wide bus operation */
  if ((scr[1U] & SDMMC_WIDE_BUS_SUPPORT) != SDMMC_ALLZERO)
 800d30e:	693b      	ldr	r3, [r7, #16]
 800d310:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800d314:	2b00      	cmp	r3, #0
 800d316:	d01c      	beq.n	800d352 <SD_WideBus_Enable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA.*/
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800d318:	687b      	ldr	r3, [r7, #4]
 800d31a:	681a      	ldr	r2, [r3, #0]
 800d31c:	687b      	ldr	r3, [r7, #4]
 800d31e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d320:	041b      	lsls	r3, r3, #16
 800d322:	4619      	mov	r1, r3
 800d324:	4610      	mov	r0, r2
 800d326:	f001 fcee 	bl	800ed06 <SDMMC_CmdAppCommand>
 800d32a:	6178      	str	r0, [r7, #20]
    if (errorstate != HAL_SD_ERROR_NONE)
 800d32c:	697b      	ldr	r3, [r7, #20]
 800d32e:	2b00      	cmp	r3, #0
 800d330:	d001      	beq.n	800d336 <SD_WideBus_Enable+0x6e>
    {
      return errorstate;
 800d332:	697b      	ldr	r3, [r7, #20]
 800d334:	e00f      	b.n	800d356 <SD_WideBus_Enable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 2 for wide bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 2U);
 800d336:	687b      	ldr	r3, [r7, #4]
 800d338:	681b      	ldr	r3, [r3, #0]
 800d33a:	2102      	movs	r1, #2
 800d33c:	4618      	mov	r0, r3
 800d33e:	f001 fd25 	bl	800ed8c <SDMMC_CmdBusWidth>
 800d342:	6178      	str	r0, [r7, #20]
    if (errorstate != HAL_SD_ERROR_NONE)
 800d344:	697b      	ldr	r3, [r7, #20]
 800d346:	2b00      	cmp	r3, #0
 800d348:	d001      	beq.n	800d34e <SD_WideBus_Enable+0x86>
    {
      return errorstate;
 800d34a:	697b      	ldr	r3, [r7, #20]
 800d34c:	e003      	b.n	800d356 <SD_WideBus_Enable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 800d34e:	2300      	movs	r3, #0
 800d350:	e001      	b.n	800d356 <SD_WideBus_Enable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800d352:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 800d356:	4618      	mov	r0, r3
 800d358:	3718      	adds	r7, #24
 800d35a:	46bd      	mov	sp, r7
 800d35c:	bd80      	pop	{r7, pc}

0800d35e <SD_WideBus_Disable>:
  * @brief  Disables the SDMMC wide bus mode.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Disable(SD_HandleTypeDef *hsd)
{
 800d35e:	b580      	push	{r7, lr}
 800d360:	b086      	sub	sp, #24
 800d362:	af00      	add	r7, sp, #0
 800d364:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0UL, 0UL};
 800d366:	2300      	movs	r3, #0
 800d368:	60fb      	str	r3, [r7, #12]
 800d36a:	2300      	movs	r3, #0
 800d36c:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if ((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 800d36e:	687b      	ldr	r3, [r7, #4]
 800d370:	681b      	ldr	r3, [r3, #0]
 800d372:	2100      	movs	r1, #0
 800d374:	4618      	mov	r0, r3
 800d376:	f001 fb3a 	bl	800e9ee <SDMMC_GetResponse>
 800d37a:	4603      	mov	r3, r0
 800d37c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800d380:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800d384:	d102      	bne.n	800d38c <SD_WideBus_Disable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 800d386:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800d38a:	e02f      	b.n	800d3ec <SD_WideBus_Disable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 800d38c:	f107 030c 	add.w	r3, r7, #12
 800d390:	4619      	mov	r1, r3
 800d392:	6878      	ldr	r0, [r7, #4]
 800d394:	f000 f82e 	bl	800d3f4 <SD_FindSCR>
 800d398:	6178      	str	r0, [r7, #20]
  if (errorstate != HAL_SD_ERROR_NONE)
 800d39a:	697b      	ldr	r3, [r7, #20]
 800d39c:	2b00      	cmp	r3, #0
 800d39e:	d001      	beq.n	800d3a4 <SD_WideBus_Disable+0x46>
  {
    return errorstate;
 800d3a0:	697b      	ldr	r3, [r7, #20]
 800d3a2:	e023      	b.n	800d3ec <SD_WideBus_Disable+0x8e>
  }

  /* If requested card supports 1 bit mode operation */
  if ((scr[1U] & SDMMC_SINGLE_BUS_SUPPORT) != SDMMC_ALLZERO)
 800d3a4:	693b      	ldr	r3, [r7, #16]
 800d3a6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800d3aa:	2b00      	cmp	r3, #0
 800d3ac:	d01c      	beq.n	800d3e8 <SD_WideBus_Disable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800d3ae:	687b      	ldr	r3, [r7, #4]
 800d3b0:	681a      	ldr	r2, [r3, #0]
 800d3b2:	687b      	ldr	r3, [r7, #4]
 800d3b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d3b6:	041b      	lsls	r3, r3, #16
 800d3b8:	4619      	mov	r1, r3
 800d3ba:	4610      	mov	r0, r2
 800d3bc:	f001 fca3 	bl	800ed06 <SDMMC_CmdAppCommand>
 800d3c0:	6178      	str	r0, [r7, #20]
    if (errorstate != HAL_SD_ERROR_NONE)
 800d3c2:	697b      	ldr	r3, [r7, #20]
 800d3c4:	2b00      	cmp	r3, #0
 800d3c6:	d001      	beq.n	800d3cc <SD_WideBus_Disable+0x6e>
    {
      return errorstate;
 800d3c8:	697b      	ldr	r3, [r7, #20]
 800d3ca:	e00f      	b.n	800d3ec <SD_WideBus_Disable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 0 for single bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 0U);
 800d3cc:	687b      	ldr	r3, [r7, #4]
 800d3ce:	681b      	ldr	r3, [r3, #0]
 800d3d0:	2100      	movs	r1, #0
 800d3d2:	4618      	mov	r0, r3
 800d3d4:	f001 fcda 	bl	800ed8c <SDMMC_CmdBusWidth>
 800d3d8:	6178      	str	r0, [r7, #20]
    if (errorstate != HAL_SD_ERROR_NONE)
 800d3da:	697b      	ldr	r3, [r7, #20]
 800d3dc:	2b00      	cmp	r3, #0
 800d3de:	d001      	beq.n	800d3e4 <SD_WideBus_Disable+0x86>
    {
      return errorstate;
 800d3e0:	697b      	ldr	r3, [r7, #20]
 800d3e2:	e003      	b.n	800d3ec <SD_WideBus_Disable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 800d3e4:	2300      	movs	r3, #0
 800d3e6:	e001      	b.n	800d3ec <SD_WideBus_Disable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800d3e8:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 800d3ec:	4618      	mov	r0, r3
 800d3ee:	3718      	adds	r7, #24
 800d3f0:	46bd      	mov	sp, r7
 800d3f2:	bd80      	pop	{r7, pc}

0800d3f4 <SD_FindSCR>:
  * @param  hsd: Pointer to SD handle
  * @param  pSCR: pointer to the buffer that will contain the SCR value
  * @retval error state
  */
static uint32_t SD_FindSCR(SD_HandleTypeDef *hsd, uint32_t *pSCR)
{
 800d3f4:	b580      	push	{r7, lr}
 800d3f6:	b08e      	sub	sp, #56	; 0x38
 800d3f8:	af00      	add	r7, sp, #0
 800d3fa:	6078      	str	r0, [r7, #4]
 800d3fc:	6039      	str	r1, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 800d3fe:	f7fa fa9f 	bl	8007940 <HAL_GetTick>
 800d402:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t index = 0U;
 800d404:	2300      	movs	r3, #0
 800d406:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t tempscr[2U] = {0UL, 0UL};
 800d408:	2300      	movs	r3, #0
 800d40a:	60bb      	str	r3, [r7, #8]
 800d40c:	2300      	movs	r3, #0
 800d40e:	60fb      	str	r3, [r7, #12]
  uint32_t *scr = pSCR;
 800d410:	683b      	ldr	r3, [r7, #0]
 800d412:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Set Block Size To 8 Bytes */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8U);
 800d414:	687b      	ldr	r3, [r7, #4]
 800d416:	681b      	ldr	r3, [r3, #0]
 800d418:	2108      	movs	r1, #8
 800d41a:	4618      	mov	r0, r3
 800d41c:	f001 fb26 	bl	800ea6c <SDMMC_CmdBlockLength>
 800d420:	62b8      	str	r0, [r7, #40]	; 0x28
  if (errorstate != HAL_SD_ERROR_NONE)
 800d422:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d424:	2b00      	cmp	r3, #0
 800d426:	d001      	beq.n	800d42c <SD_FindSCR+0x38>
  {
    return errorstate;
 800d428:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d42a:	e0ad      	b.n	800d588 <SD_FindSCR+0x194>
  }

  /* Send CMD55 APP_CMD with argument as card's RCA */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)((hsd->SdCard.RelCardAdd) << 16U));
 800d42c:	687b      	ldr	r3, [r7, #4]
 800d42e:	681a      	ldr	r2, [r3, #0]
 800d430:	687b      	ldr	r3, [r7, #4]
 800d432:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d434:	041b      	lsls	r3, r3, #16
 800d436:	4619      	mov	r1, r3
 800d438:	4610      	mov	r0, r2
 800d43a:	f001 fc64 	bl	800ed06 <SDMMC_CmdAppCommand>
 800d43e:	62b8      	str	r0, [r7, #40]	; 0x28
  if (errorstate != HAL_SD_ERROR_NONE)
 800d440:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d442:	2b00      	cmp	r3, #0
 800d444:	d001      	beq.n	800d44a <SD_FindSCR+0x56>
  {
    return errorstate;
 800d446:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d448:	e09e      	b.n	800d588 <SD_FindSCR+0x194>
  }

  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800d44a:	f04f 33ff 	mov.w	r3, #4294967295
 800d44e:	613b      	str	r3, [r7, #16]
  config.DataLength    = 8U;
 800d450:	2308      	movs	r3, #8
 800d452:	617b      	str	r3, [r7, #20]
  config.DataBlockSize = SDMMC_DATABLOCK_SIZE_8B;
 800d454:	2330      	movs	r3, #48	; 0x30
 800d456:	61bb      	str	r3, [r7, #24]
  config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 800d458:	2302      	movs	r3, #2
 800d45a:	61fb      	str	r3, [r7, #28]
  config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 800d45c:	2300      	movs	r3, #0
 800d45e:	623b      	str	r3, [r7, #32]
  config.DPSM          = SDMMC_DPSM_ENABLE;
 800d460:	2301      	movs	r3, #1
 800d462:	627b      	str	r3, [r7, #36]	; 0x24
  (void)SDMMC_ConfigData(hsd->Instance, &config);
 800d464:	687b      	ldr	r3, [r7, #4]
 800d466:	681b      	ldr	r3, [r3, #0]
 800d468:	f107 0210 	add.w	r2, r7, #16
 800d46c:	4611      	mov	r1, r2
 800d46e:	4618      	mov	r0, r3
 800d470:	f001 fad0 	bl	800ea14 <SDMMC_ConfigData>

  /* Send ACMD51 SD_APP_SEND_SCR with argument as 0 */
  errorstate = SDMMC_CmdSendSCR(hsd->Instance);
 800d474:	687b      	ldr	r3, [r7, #4]
 800d476:	681b      	ldr	r3, [r3, #0]
 800d478:	4618      	mov	r0, r3
 800d47a:	f001 fcaa 	bl	800edd2 <SDMMC_CmdSendSCR>
 800d47e:	62b8      	str	r0, [r7, #40]	; 0x28
  if (errorstate != HAL_SD_ERROR_NONE)
 800d480:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d482:	2b00      	cmp	r3, #0
 800d484:	d027      	beq.n	800d4d6 <SD_FindSCR+0xe2>
  {
    return errorstate;
 800d486:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d488:	e07e      	b.n	800d588 <SD_FindSCR+0x194>
  }

  while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND |
                            SDMMC_FLAG_DATAEND))
  {
    if ((!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOE)) && (index == 0U))
 800d48a:	687b      	ldr	r3, [r7, #4]
 800d48c:	681b      	ldr	r3, [r3, #0]
 800d48e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d490:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800d494:	2b00      	cmp	r3, #0
 800d496:	d113      	bne.n	800d4c0 <SD_FindSCR+0xcc>
 800d498:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d49a:	2b00      	cmp	r3, #0
 800d49c:	d110      	bne.n	800d4c0 <SD_FindSCR+0xcc>
    {
      tempscr[0] = SDMMC_ReadFIFO(hsd->Instance);
 800d49e:	687b      	ldr	r3, [r7, #4]
 800d4a0:	681b      	ldr	r3, [r3, #0]
 800d4a2:	4618      	mov	r0, r3
 800d4a4:	f001 fa2e 	bl	800e904 <SDMMC_ReadFIFO>
 800d4a8:	4603      	mov	r3, r0
 800d4aa:	60bb      	str	r3, [r7, #8]
      tempscr[1] = SDMMC_ReadFIFO(hsd->Instance);
 800d4ac:	687b      	ldr	r3, [r7, #4]
 800d4ae:	681b      	ldr	r3, [r3, #0]
 800d4b0:	4618      	mov	r0, r3
 800d4b2:	f001 fa27 	bl	800e904 <SDMMC_ReadFIFO>
 800d4b6:	4603      	mov	r3, r0
 800d4b8:	60fb      	str	r3, [r7, #12]
      index++;
 800d4ba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d4bc:	3301      	adds	r3, #1
 800d4be:	637b      	str	r3, [r7, #52]	; 0x34
    }


    if ((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 800d4c0:	f7fa fa3e 	bl	8007940 <HAL_GetTick>
 800d4c4:	4602      	mov	r2, r0
 800d4c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d4c8:	1ad3      	subs	r3, r2, r3
 800d4ca:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d4ce:	d102      	bne.n	800d4d6 <SD_FindSCR+0xe2>
    {
      return HAL_SD_ERROR_TIMEOUT;
 800d4d0:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800d4d4:	e058      	b.n	800d588 <SD_FindSCR+0x194>
  while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND |
 800d4d6:	687b      	ldr	r3, [r7, #4]
 800d4d8:	681b      	ldr	r3, [r3, #0]
 800d4da:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800d4dc:	f240 532a 	movw	r3, #1322	; 0x52a
 800d4e0:	4013      	ands	r3, r2
 800d4e2:	2b00      	cmp	r3, #0
 800d4e4:	d0d1      	beq.n	800d48a <SD_FindSCR+0x96>
    }
  }

  if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 800d4e6:	687b      	ldr	r3, [r7, #4]
 800d4e8:	681b      	ldr	r3, [r3, #0]
 800d4ea:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d4ec:	f003 0308 	and.w	r3, r3, #8
 800d4f0:	2b00      	cmp	r3, #0
 800d4f2:	d005      	beq.n	800d500 <SD_FindSCR+0x10c>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DTIMEOUT);
 800d4f4:	687b      	ldr	r3, [r7, #4]
 800d4f6:	681b      	ldr	r3, [r3, #0]
 800d4f8:	2208      	movs	r2, #8
 800d4fa:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_TIMEOUT;
 800d4fc:	2308      	movs	r3, #8
 800d4fe:	e043      	b.n	800d588 <SD_FindSCR+0x194>
  }
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 800d500:	687b      	ldr	r3, [r7, #4]
 800d502:	681b      	ldr	r3, [r3, #0]
 800d504:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d506:	f003 0302 	and.w	r3, r3, #2
 800d50a:	2b00      	cmp	r3, #0
 800d50c:	d005      	beq.n	800d51a <SD_FindSCR+0x126>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DCRCFAIL);
 800d50e:	687b      	ldr	r3, [r7, #4]
 800d510:	681b      	ldr	r3, [r3, #0]
 800d512:	2202      	movs	r2, #2
 800d514:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_CRC_FAIL;
 800d516:	2302      	movs	r3, #2
 800d518:	e036      	b.n	800d588 <SD_FindSCR+0x194>
  }
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 800d51a:	687b      	ldr	r3, [r7, #4]
 800d51c:	681b      	ldr	r3, [r3, #0]
 800d51e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d520:	f003 0320 	and.w	r3, r3, #32
 800d524:	2b00      	cmp	r3, #0
 800d526:	d005      	beq.n	800d534 <SD_FindSCR+0x140>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_RXOVERR);
 800d528:	687b      	ldr	r3, [r7, #4]
 800d52a:	681b      	ldr	r3, [r3, #0]
 800d52c:	2220      	movs	r2, #32
 800d52e:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_RX_OVERRUN;
 800d530:	2320      	movs	r3, #32
 800d532:	e029      	b.n	800d588 <SD_FindSCR+0x194>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800d534:	687b      	ldr	r3, [r7, #4]
 800d536:	681b      	ldr	r3, [r3, #0]
 800d538:	4a15      	ldr	r2, [pc, #84]	; (800d590 <SD_FindSCR+0x19c>)
 800d53a:	639a      	str	r2, [r3, #56]	; 0x38

    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) | \
 800d53c:	68fb      	ldr	r3, [r7, #12]
 800d53e:	061a      	lsls	r2, r3, #24
 800d540:	68fb      	ldr	r3, [r7, #12]
 800d542:	021b      	lsls	r3, r3, #8
 800d544:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800d548:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 800d54a:	68fb      	ldr	r3, [r7, #12]
 800d54c:	0a1b      	lsrs	r3, r3, #8
 800d54e:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) | \
 800d552:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 800d554:	68fb      	ldr	r3, [r7, #12]
 800d556:	0e1b      	lsrs	r3, r3, #24
 800d558:	431a      	orrs	r2, r3
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) | \
 800d55a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d55c:	601a      	str	r2, [r3, #0]
    scr++;
 800d55e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d560:	3304      	adds	r3, #4
 800d562:	62fb      	str	r3, [r7, #44]	; 0x2c
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) | \
 800d564:	68bb      	ldr	r3, [r7, #8]
 800d566:	061a      	lsls	r2, r3, #24
 800d568:	68bb      	ldr	r3, [r7, #8]
 800d56a:	021b      	lsls	r3, r3, #8
 800d56c:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800d570:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 800d572:	68bb      	ldr	r3, [r7, #8]
 800d574:	0a1b      	lsrs	r3, r3, #8
 800d576:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) | \
 800d57a:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 800d57c:	68bb      	ldr	r3, [r7, #8]
 800d57e:	0e1b      	lsrs	r3, r3, #24
 800d580:	431a      	orrs	r2, r3
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) | \
 800d582:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d584:	601a      	str	r2, [r3, #0]

  }

  return HAL_SD_ERROR_NONE;
 800d586:	2300      	movs	r3, #0
}
 800d588:	4618      	mov	r0, r3
 800d58a:	3738      	adds	r7, #56	; 0x38
 800d58c:	46bd      	mov	sp, r7
 800d58e:	bd80      	pop	{r7, pc}
 800d590:	18000f3a 	.word	0x18000f3a

0800d594 <SD_Read_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Read_IT(SD_HandleTypeDef *hsd)
{
 800d594:	b580      	push	{r7, lr}
 800d596:	b086      	sub	sp, #24
 800d598:	af00      	add	r7, sp, #0
 800d59a:	6078      	str	r0, [r7, #4]
  uint32_t count;
  uint32_t data;
  uint8_t *tmp;

  tmp = hsd->pRxBuffPtr;
 800d59c:	687b      	ldr	r3, [r7, #4]
 800d59e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d5a0:	613b      	str	r3, [r7, #16]

  if (hsd->RxXferSize >= 32U)
 800d5a2:	687b      	ldr	r3, [r7, #4]
 800d5a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d5a6:	2b1f      	cmp	r3, #31
 800d5a8:	d936      	bls.n	800d618 <SD_Read_IT+0x84>
  {
    /* Read data from SDMMC Rx FIFO */
    for (count = 0U; count < 8U; count++)
 800d5aa:	2300      	movs	r3, #0
 800d5ac:	617b      	str	r3, [r7, #20]
 800d5ae:	e027      	b.n	800d600 <SD_Read_IT+0x6c>
    {
      data = SDMMC_ReadFIFO(hsd->Instance);
 800d5b0:	687b      	ldr	r3, [r7, #4]
 800d5b2:	681b      	ldr	r3, [r3, #0]
 800d5b4:	4618      	mov	r0, r3
 800d5b6:	f001 f9a5 	bl	800e904 <SDMMC_ReadFIFO>
 800d5ba:	60f8      	str	r0, [r7, #12]
      *tmp = (uint8_t)(data & 0xFFU);
 800d5bc:	68fb      	ldr	r3, [r7, #12]
 800d5be:	b2da      	uxtb	r2, r3
 800d5c0:	693b      	ldr	r3, [r7, #16]
 800d5c2:	701a      	strb	r2, [r3, #0]
      tmp++;
 800d5c4:	693b      	ldr	r3, [r7, #16]
 800d5c6:	3301      	adds	r3, #1
 800d5c8:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 8U) & 0xFFU);
 800d5ca:	68fb      	ldr	r3, [r7, #12]
 800d5cc:	0a1b      	lsrs	r3, r3, #8
 800d5ce:	b2da      	uxtb	r2, r3
 800d5d0:	693b      	ldr	r3, [r7, #16]
 800d5d2:	701a      	strb	r2, [r3, #0]
      tmp++;
 800d5d4:	693b      	ldr	r3, [r7, #16]
 800d5d6:	3301      	adds	r3, #1
 800d5d8:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 16U) & 0xFFU);
 800d5da:	68fb      	ldr	r3, [r7, #12]
 800d5dc:	0c1b      	lsrs	r3, r3, #16
 800d5de:	b2da      	uxtb	r2, r3
 800d5e0:	693b      	ldr	r3, [r7, #16]
 800d5e2:	701a      	strb	r2, [r3, #0]
      tmp++;
 800d5e4:	693b      	ldr	r3, [r7, #16]
 800d5e6:	3301      	adds	r3, #1
 800d5e8:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 24U) & 0xFFU);
 800d5ea:	68fb      	ldr	r3, [r7, #12]
 800d5ec:	0e1b      	lsrs	r3, r3, #24
 800d5ee:	b2da      	uxtb	r2, r3
 800d5f0:	693b      	ldr	r3, [r7, #16]
 800d5f2:	701a      	strb	r2, [r3, #0]
      tmp++;
 800d5f4:	693b      	ldr	r3, [r7, #16]
 800d5f6:	3301      	adds	r3, #1
 800d5f8:	613b      	str	r3, [r7, #16]
    for (count = 0U; count < 8U; count++)
 800d5fa:	697b      	ldr	r3, [r7, #20]
 800d5fc:	3301      	adds	r3, #1
 800d5fe:	617b      	str	r3, [r7, #20]
 800d600:	697b      	ldr	r3, [r7, #20]
 800d602:	2b07      	cmp	r3, #7
 800d604:	d9d4      	bls.n	800d5b0 <SD_Read_IT+0x1c>
    }

    hsd->pRxBuffPtr = tmp;
 800d606:	687b      	ldr	r3, [r7, #4]
 800d608:	693a      	ldr	r2, [r7, #16]
 800d60a:	625a      	str	r2, [r3, #36]	; 0x24
    hsd->RxXferSize -= 32U;
 800d60c:	687b      	ldr	r3, [r7, #4]
 800d60e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d610:	f1a3 0220 	sub.w	r2, r3, #32
 800d614:	687b      	ldr	r3, [r7, #4]
 800d616:	629a      	str	r2, [r3, #40]	; 0x28
  }
}
 800d618:	bf00      	nop
 800d61a:	3718      	adds	r7, #24
 800d61c:	46bd      	mov	sp, r7
 800d61e:	bd80      	pop	{r7, pc}

0800d620 <SD_Write_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Write_IT(SD_HandleTypeDef *hsd)
{
 800d620:	b580      	push	{r7, lr}
 800d622:	b086      	sub	sp, #24
 800d624:	af00      	add	r7, sp, #0
 800d626:	6078      	str	r0, [r7, #4]
  uint32_t count;
  uint32_t data;
  const uint8_t *tmp;

  tmp = hsd->pTxBuffPtr;
 800d628:	687b      	ldr	r3, [r7, #4]
 800d62a:	69db      	ldr	r3, [r3, #28]
 800d62c:	613b      	str	r3, [r7, #16]

  if (hsd->TxXferSize >= 32U)
 800d62e:	687b      	ldr	r3, [r7, #4]
 800d630:	6a1b      	ldr	r3, [r3, #32]
 800d632:	2b1f      	cmp	r3, #31
 800d634:	d93a      	bls.n	800d6ac <SD_Write_IT+0x8c>
  {
    /* Write data to SDMMC Tx FIFO */
    for (count = 0U; count < 8U; count++)
 800d636:	2300      	movs	r3, #0
 800d638:	617b      	str	r3, [r7, #20]
 800d63a:	e02b      	b.n	800d694 <SD_Write_IT+0x74>
    {
      data = (uint32_t)(*tmp);
 800d63c:	693b      	ldr	r3, [r7, #16]
 800d63e:	781b      	ldrb	r3, [r3, #0]
 800d640:	60fb      	str	r3, [r7, #12]
      tmp++;
 800d642:	693b      	ldr	r3, [r7, #16]
 800d644:	3301      	adds	r3, #1
 800d646:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 8U);
 800d648:	693b      	ldr	r3, [r7, #16]
 800d64a:	781b      	ldrb	r3, [r3, #0]
 800d64c:	021a      	lsls	r2, r3, #8
 800d64e:	68fb      	ldr	r3, [r7, #12]
 800d650:	4313      	orrs	r3, r2
 800d652:	60fb      	str	r3, [r7, #12]
      tmp++;
 800d654:	693b      	ldr	r3, [r7, #16]
 800d656:	3301      	adds	r3, #1
 800d658:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 16U);
 800d65a:	693b      	ldr	r3, [r7, #16]
 800d65c:	781b      	ldrb	r3, [r3, #0]
 800d65e:	041a      	lsls	r2, r3, #16
 800d660:	68fb      	ldr	r3, [r7, #12]
 800d662:	4313      	orrs	r3, r2
 800d664:	60fb      	str	r3, [r7, #12]
      tmp++;
 800d666:	693b      	ldr	r3, [r7, #16]
 800d668:	3301      	adds	r3, #1
 800d66a:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 24U);
 800d66c:	693b      	ldr	r3, [r7, #16]
 800d66e:	781b      	ldrb	r3, [r3, #0]
 800d670:	061a      	lsls	r2, r3, #24
 800d672:	68fb      	ldr	r3, [r7, #12]
 800d674:	4313      	orrs	r3, r2
 800d676:	60fb      	str	r3, [r7, #12]
      tmp++;
 800d678:	693b      	ldr	r3, [r7, #16]
 800d67a:	3301      	adds	r3, #1
 800d67c:	613b      	str	r3, [r7, #16]
      (void)SDMMC_WriteFIFO(hsd->Instance, &data);
 800d67e:	687b      	ldr	r3, [r7, #4]
 800d680:	681b      	ldr	r3, [r3, #0]
 800d682:	f107 020c 	add.w	r2, r7, #12
 800d686:	4611      	mov	r1, r2
 800d688:	4618      	mov	r0, r3
 800d68a:	f001 f948 	bl	800e91e <SDMMC_WriteFIFO>
    for (count = 0U; count < 8U; count++)
 800d68e:	697b      	ldr	r3, [r7, #20]
 800d690:	3301      	adds	r3, #1
 800d692:	617b      	str	r3, [r7, #20]
 800d694:	697b      	ldr	r3, [r7, #20]
 800d696:	2b07      	cmp	r3, #7
 800d698:	d9d0      	bls.n	800d63c <SD_Write_IT+0x1c>
    }

    hsd->pTxBuffPtr = tmp;
 800d69a:	687b      	ldr	r3, [r7, #4]
 800d69c:	693a      	ldr	r2, [r7, #16]
 800d69e:	61da      	str	r2, [r3, #28]
    hsd->TxXferSize -= 32U;
 800d6a0:	687b      	ldr	r3, [r7, #4]
 800d6a2:	6a1b      	ldr	r3, [r3, #32]
 800d6a4:	f1a3 0220 	sub.w	r2, r3, #32
 800d6a8:	687b      	ldr	r3, [r7, #4]
 800d6aa:	621a      	str	r2, [r3, #32]
  }
}
 800d6ac:	bf00      	nop
 800d6ae:	3718      	adds	r7, #24
 800d6b0:	46bd      	mov	sp, r7
 800d6b2:	bd80      	pop	{r7, pc}

0800d6b4 <HAL_SDEx_Read_DMADoubleBuf0CpltCallback>:
  * @brief Read DMA Buffer 0 Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
__weak void HAL_SDEx_Read_DMADoubleBuf0CpltCallback(SD_HandleTypeDef *hsd)
{
 800d6b4:	b480      	push	{r7}
 800d6b6:	b083      	sub	sp, #12
 800d6b8:	af00      	add	r7, sp, #0
 800d6ba:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SDEx_Read_DMADoubleBuf0CpltCallback can be implemented in the user file
   */
}
 800d6bc:	bf00      	nop
 800d6be:	370c      	adds	r7, #12
 800d6c0:	46bd      	mov	sp, r7
 800d6c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d6c6:	4770      	bx	lr

0800d6c8 <HAL_SDEx_Read_DMADoubleBuf1CpltCallback>:
  * @brief Read DMA Buffer 1 Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
__weak void HAL_SDEx_Read_DMADoubleBuf1CpltCallback(SD_HandleTypeDef *hsd)
{
 800d6c8:	b480      	push	{r7}
 800d6ca:	b083      	sub	sp, #12
 800d6cc:	af00      	add	r7, sp, #0
 800d6ce:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SDEx_Read_DMADoubleBuf1CpltCallback can be implemented in the user file
   */
}
 800d6d0:	bf00      	nop
 800d6d2:	370c      	adds	r7, #12
 800d6d4:	46bd      	mov	sp, r7
 800d6d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d6da:	4770      	bx	lr

0800d6dc <HAL_SDEx_Write_DMADoubleBuf0CpltCallback>:
  * @brief Write DMA Buffer 0 Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
__weak void HAL_SDEx_Write_DMADoubleBuf0CpltCallback(SD_HandleTypeDef *hsd)
{
 800d6dc:	b480      	push	{r7}
 800d6de:	b083      	sub	sp, #12
 800d6e0:	af00      	add	r7, sp, #0
 800d6e2:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SDEx_Write_DMADoubleBuf0CpltCallback can be implemented in the user file
   */
}
 800d6e4:	bf00      	nop
 800d6e6:	370c      	adds	r7, #12
 800d6e8:	46bd      	mov	sp, r7
 800d6ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d6ee:	4770      	bx	lr

0800d6f0 <HAL_SDEx_Write_DMADoubleBuf1CpltCallback>:
  * @brief Write DMA Buffer 1 Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
__weak void HAL_SDEx_Write_DMADoubleBuf1CpltCallback(SD_HandleTypeDef *hsd)
{
 800d6f0:	b480      	push	{r7}
 800d6f2:	b083      	sub	sp, #12
 800d6f4:	af00      	add	r7, sp, #0
 800d6f6:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SDEx_Write_DMADoubleBuf1CpltCallback can be implemented in the user file
   */
}
 800d6f8:	bf00      	nop
 800d6fa:	370c      	adds	r7, #12
 800d6fc:	46bd      	mov	sp, r7
 800d6fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d702:	4770      	bx	lr

0800d704 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800d704:	b580      	push	{r7, lr}
 800d706:	b082      	sub	sp, #8
 800d708:	af00      	add	r7, sp, #0
 800d70a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800d70c:	687b      	ldr	r3, [r7, #4]
 800d70e:	2b00      	cmp	r3, #0
 800d710:	d101      	bne.n	800d716 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800d712:	2301      	movs	r3, #1
 800d714:	e042      	b.n	800d79c <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800d716:	687b      	ldr	r3, [r7, #4]
 800d718:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800d71c:	2b00      	cmp	r3, #0
 800d71e:	d106      	bne.n	800d72e <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800d720:	687b      	ldr	r3, [r7, #4]
 800d722:	2200      	movs	r2, #0
 800d724:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800d728:	6878      	ldr	r0, [r7, #4]
 800d72a:	f7f3 fd39 	bl	80011a0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800d72e:	687b      	ldr	r3, [r7, #4]
 800d730:	2224      	movs	r2, #36	; 0x24
 800d732:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 800d736:	687b      	ldr	r3, [r7, #4]
 800d738:	681b      	ldr	r3, [r3, #0]
 800d73a:	681a      	ldr	r2, [r3, #0]
 800d73c:	687b      	ldr	r3, [r7, #4]
 800d73e:	681b      	ldr	r3, [r3, #0]
 800d740:	f022 0201 	bic.w	r2, r2, #1
 800d744:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800d746:	6878      	ldr	r0, [r7, #4]
 800d748:	f000 f82c 	bl	800d7a4 <UART_SetConfig>
 800d74c:	4603      	mov	r3, r0
 800d74e:	2b01      	cmp	r3, #1
 800d750:	d101      	bne.n	800d756 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 800d752:	2301      	movs	r3, #1
 800d754:	e022      	b.n	800d79c <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800d756:	687b      	ldr	r3, [r7, #4]
 800d758:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d75a:	2b00      	cmp	r3, #0
 800d75c:	d002      	beq.n	800d764 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 800d75e:	6878      	ldr	r0, [r7, #4]
 800d760:	f000 fd88 	bl	800e274 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800d764:	687b      	ldr	r3, [r7, #4]
 800d766:	681b      	ldr	r3, [r3, #0]
 800d768:	685a      	ldr	r2, [r3, #4]
 800d76a:	687b      	ldr	r3, [r7, #4]
 800d76c:	681b      	ldr	r3, [r3, #0]
 800d76e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800d772:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800d774:	687b      	ldr	r3, [r7, #4]
 800d776:	681b      	ldr	r3, [r3, #0]
 800d778:	689a      	ldr	r2, [r3, #8]
 800d77a:	687b      	ldr	r3, [r7, #4]
 800d77c:	681b      	ldr	r3, [r3, #0]
 800d77e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800d782:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800d784:	687b      	ldr	r3, [r7, #4]
 800d786:	681b      	ldr	r3, [r3, #0]
 800d788:	681a      	ldr	r2, [r3, #0]
 800d78a:	687b      	ldr	r3, [r7, #4]
 800d78c:	681b      	ldr	r3, [r3, #0]
 800d78e:	f042 0201 	orr.w	r2, r2, #1
 800d792:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800d794:	6878      	ldr	r0, [r7, #4]
 800d796:	f000 fe0f 	bl	800e3b8 <UART_CheckIdleState>
 800d79a:	4603      	mov	r3, r0
}
 800d79c:	4618      	mov	r0, r3
 800d79e:	3708      	adds	r7, #8
 800d7a0:	46bd      	mov	sp, r7
 800d7a2:	bd80      	pop	{r7, pc}

0800d7a4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800d7a4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800d7a8:	b092      	sub	sp, #72	; 0x48
 800d7aa:	af00      	add	r7, sp, #0
 800d7ac:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800d7ae:	2300      	movs	r3, #0
 800d7b0:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800d7b4:	697b      	ldr	r3, [r7, #20]
 800d7b6:	689a      	ldr	r2, [r3, #8]
 800d7b8:	697b      	ldr	r3, [r7, #20]
 800d7ba:	691b      	ldr	r3, [r3, #16]
 800d7bc:	431a      	orrs	r2, r3
 800d7be:	697b      	ldr	r3, [r7, #20]
 800d7c0:	695b      	ldr	r3, [r3, #20]
 800d7c2:	431a      	orrs	r2, r3
 800d7c4:	697b      	ldr	r3, [r7, #20]
 800d7c6:	69db      	ldr	r3, [r3, #28]
 800d7c8:	4313      	orrs	r3, r2
 800d7ca:	647b      	str	r3, [r7, #68]	; 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800d7cc:	697b      	ldr	r3, [r7, #20]
 800d7ce:	681b      	ldr	r3, [r3, #0]
 800d7d0:	681a      	ldr	r2, [r3, #0]
 800d7d2:	4bbe      	ldr	r3, [pc, #760]	; (800dacc <UART_SetConfig+0x328>)
 800d7d4:	4013      	ands	r3, r2
 800d7d6:	697a      	ldr	r2, [r7, #20]
 800d7d8:	6812      	ldr	r2, [r2, #0]
 800d7da:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800d7dc:	430b      	orrs	r3, r1
 800d7de:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800d7e0:	697b      	ldr	r3, [r7, #20]
 800d7e2:	681b      	ldr	r3, [r3, #0]
 800d7e4:	685b      	ldr	r3, [r3, #4]
 800d7e6:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800d7ea:	697b      	ldr	r3, [r7, #20]
 800d7ec:	68da      	ldr	r2, [r3, #12]
 800d7ee:	697b      	ldr	r3, [r7, #20]
 800d7f0:	681b      	ldr	r3, [r3, #0]
 800d7f2:	430a      	orrs	r2, r1
 800d7f4:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800d7f6:	697b      	ldr	r3, [r7, #20]
 800d7f8:	699b      	ldr	r3, [r3, #24]
 800d7fa:	647b      	str	r3, [r7, #68]	; 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800d7fc:	697b      	ldr	r3, [r7, #20]
 800d7fe:	681b      	ldr	r3, [r3, #0]
 800d800:	4ab3      	ldr	r2, [pc, #716]	; (800dad0 <UART_SetConfig+0x32c>)
 800d802:	4293      	cmp	r3, r2
 800d804:	d004      	beq.n	800d810 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800d806:	697b      	ldr	r3, [r7, #20]
 800d808:	6a1b      	ldr	r3, [r3, #32]
 800d80a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800d80c:	4313      	orrs	r3, r2
 800d80e:	647b      	str	r3, [r7, #68]	; 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800d810:	697b      	ldr	r3, [r7, #20]
 800d812:	681b      	ldr	r3, [r3, #0]
 800d814:	689a      	ldr	r2, [r3, #8]
 800d816:	4baf      	ldr	r3, [pc, #700]	; (800dad4 <UART_SetConfig+0x330>)
 800d818:	4013      	ands	r3, r2
 800d81a:	697a      	ldr	r2, [r7, #20]
 800d81c:	6812      	ldr	r2, [r2, #0]
 800d81e:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800d820:	430b      	orrs	r3, r1
 800d822:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800d824:	697b      	ldr	r3, [r7, #20]
 800d826:	681b      	ldr	r3, [r3, #0]
 800d828:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d82a:	f023 010f 	bic.w	r1, r3, #15
 800d82e:	697b      	ldr	r3, [r7, #20]
 800d830:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800d832:	697b      	ldr	r3, [r7, #20]
 800d834:	681b      	ldr	r3, [r3, #0]
 800d836:	430a      	orrs	r2, r1
 800d838:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800d83a:	697b      	ldr	r3, [r7, #20]
 800d83c:	681b      	ldr	r3, [r3, #0]
 800d83e:	4aa6      	ldr	r2, [pc, #664]	; (800dad8 <UART_SetConfig+0x334>)
 800d840:	4293      	cmp	r3, r2
 800d842:	d177      	bne.n	800d934 <UART_SetConfig+0x190>
 800d844:	4ba5      	ldr	r3, [pc, #660]	; (800dadc <UART_SetConfig+0x338>)
 800d846:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800d848:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800d84c:	2b28      	cmp	r3, #40	; 0x28
 800d84e:	d86d      	bhi.n	800d92c <UART_SetConfig+0x188>
 800d850:	a201      	add	r2, pc, #4	; (adr r2, 800d858 <UART_SetConfig+0xb4>)
 800d852:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d856:	bf00      	nop
 800d858:	0800d8fd 	.word	0x0800d8fd
 800d85c:	0800d92d 	.word	0x0800d92d
 800d860:	0800d92d 	.word	0x0800d92d
 800d864:	0800d92d 	.word	0x0800d92d
 800d868:	0800d92d 	.word	0x0800d92d
 800d86c:	0800d92d 	.word	0x0800d92d
 800d870:	0800d92d 	.word	0x0800d92d
 800d874:	0800d92d 	.word	0x0800d92d
 800d878:	0800d905 	.word	0x0800d905
 800d87c:	0800d92d 	.word	0x0800d92d
 800d880:	0800d92d 	.word	0x0800d92d
 800d884:	0800d92d 	.word	0x0800d92d
 800d888:	0800d92d 	.word	0x0800d92d
 800d88c:	0800d92d 	.word	0x0800d92d
 800d890:	0800d92d 	.word	0x0800d92d
 800d894:	0800d92d 	.word	0x0800d92d
 800d898:	0800d90d 	.word	0x0800d90d
 800d89c:	0800d92d 	.word	0x0800d92d
 800d8a0:	0800d92d 	.word	0x0800d92d
 800d8a4:	0800d92d 	.word	0x0800d92d
 800d8a8:	0800d92d 	.word	0x0800d92d
 800d8ac:	0800d92d 	.word	0x0800d92d
 800d8b0:	0800d92d 	.word	0x0800d92d
 800d8b4:	0800d92d 	.word	0x0800d92d
 800d8b8:	0800d915 	.word	0x0800d915
 800d8bc:	0800d92d 	.word	0x0800d92d
 800d8c0:	0800d92d 	.word	0x0800d92d
 800d8c4:	0800d92d 	.word	0x0800d92d
 800d8c8:	0800d92d 	.word	0x0800d92d
 800d8cc:	0800d92d 	.word	0x0800d92d
 800d8d0:	0800d92d 	.word	0x0800d92d
 800d8d4:	0800d92d 	.word	0x0800d92d
 800d8d8:	0800d91d 	.word	0x0800d91d
 800d8dc:	0800d92d 	.word	0x0800d92d
 800d8e0:	0800d92d 	.word	0x0800d92d
 800d8e4:	0800d92d 	.word	0x0800d92d
 800d8e8:	0800d92d 	.word	0x0800d92d
 800d8ec:	0800d92d 	.word	0x0800d92d
 800d8f0:	0800d92d 	.word	0x0800d92d
 800d8f4:	0800d92d 	.word	0x0800d92d
 800d8f8:	0800d925 	.word	0x0800d925
 800d8fc:	2301      	movs	r3, #1
 800d8fe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d902:	e222      	b.n	800dd4a <UART_SetConfig+0x5a6>
 800d904:	2304      	movs	r3, #4
 800d906:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d90a:	e21e      	b.n	800dd4a <UART_SetConfig+0x5a6>
 800d90c:	2308      	movs	r3, #8
 800d90e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d912:	e21a      	b.n	800dd4a <UART_SetConfig+0x5a6>
 800d914:	2310      	movs	r3, #16
 800d916:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d91a:	e216      	b.n	800dd4a <UART_SetConfig+0x5a6>
 800d91c:	2320      	movs	r3, #32
 800d91e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d922:	e212      	b.n	800dd4a <UART_SetConfig+0x5a6>
 800d924:	2340      	movs	r3, #64	; 0x40
 800d926:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d92a:	e20e      	b.n	800dd4a <UART_SetConfig+0x5a6>
 800d92c:	2380      	movs	r3, #128	; 0x80
 800d92e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d932:	e20a      	b.n	800dd4a <UART_SetConfig+0x5a6>
 800d934:	697b      	ldr	r3, [r7, #20]
 800d936:	681b      	ldr	r3, [r3, #0]
 800d938:	4a69      	ldr	r2, [pc, #420]	; (800dae0 <UART_SetConfig+0x33c>)
 800d93a:	4293      	cmp	r3, r2
 800d93c:	d130      	bne.n	800d9a0 <UART_SetConfig+0x1fc>
 800d93e:	4b67      	ldr	r3, [pc, #412]	; (800dadc <UART_SetConfig+0x338>)
 800d940:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800d942:	f003 0307 	and.w	r3, r3, #7
 800d946:	2b05      	cmp	r3, #5
 800d948:	d826      	bhi.n	800d998 <UART_SetConfig+0x1f4>
 800d94a:	a201      	add	r2, pc, #4	; (adr r2, 800d950 <UART_SetConfig+0x1ac>)
 800d94c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d950:	0800d969 	.word	0x0800d969
 800d954:	0800d971 	.word	0x0800d971
 800d958:	0800d979 	.word	0x0800d979
 800d95c:	0800d981 	.word	0x0800d981
 800d960:	0800d989 	.word	0x0800d989
 800d964:	0800d991 	.word	0x0800d991
 800d968:	2300      	movs	r3, #0
 800d96a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d96e:	e1ec      	b.n	800dd4a <UART_SetConfig+0x5a6>
 800d970:	2304      	movs	r3, #4
 800d972:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d976:	e1e8      	b.n	800dd4a <UART_SetConfig+0x5a6>
 800d978:	2308      	movs	r3, #8
 800d97a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d97e:	e1e4      	b.n	800dd4a <UART_SetConfig+0x5a6>
 800d980:	2310      	movs	r3, #16
 800d982:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d986:	e1e0      	b.n	800dd4a <UART_SetConfig+0x5a6>
 800d988:	2320      	movs	r3, #32
 800d98a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d98e:	e1dc      	b.n	800dd4a <UART_SetConfig+0x5a6>
 800d990:	2340      	movs	r3, #64	; 0x40
 800d992:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d996:	e1d8      	b.n	800dd4a <UART_SetConfig+0x5a6>
 800d998:	2380      	movs	r3, #128	; 0x80
 800d99a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d99e:	e1d4      	b.n	800dd4a <UART_SetConfig+0x5a6>
 800d9a0:	697b      	ldr	r3, [r7, #20]
 800d9a2:	681b      	ldr	r3, [r3, #0]
 800d9a4:	4a4f      	ldr	r2, [pc, #316]	; (800dae4 <UART_SetConfig+0x340>)
 800d9a6:	4293      	cmp	r3, r2
 800d9a8:	d130      	bne.n	800da0c <UART_SetConfig+0x268>
 800d9aa:	4b4c      	ldr	r3, [pc, #304]	; (800dadc <UART_SetConfig+0x338>)
 800d9ac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800d9ae:	f003 0307 	and.w	r3, r3, #7
 800d9b2:	2b05      	cmp	r3, #5
 800d9b4:	d826      	bhi.n	800da04 <UART_SetConfig+0x260>
 800d9b6:	a201      	add	r2, pc, #4	; (adr r2, 800d9bc <UART_SetConfig+0x218>)
 800d9b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d9bc:	0800d9d5 	.word	0x0800d9d5
 800d9c0:	0800d9dd 	.word	0x0800d9dd
 800d9c4:	0800d9e5 	.word	0x0800d9e5
 800d9c8:	0800d9ed 	.word	0x0800d9ed
 800d9cc:	0800d9f5 	.word	0x0800d9f5
 800d9d0:	0800d9fd 	.word	0x0800d9fd
 800d9d4:	2300      	movs	r3, #0
 800d9d6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d9da:	e1b6      	b.n	800dd4a <UART_SetConfig+0x5a6>
 800d9dc:	2304      	movs	r3, #4
 800d9de:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d9e2:	e1b2      	b.n	800dd4a <UART_SetConfig+0x5a6>
 800d9e4:	2308      	movs	r3, #8
 800d9e6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d9ea:	e1ae      	b.n	800dd4a <UART_SetConfig+0x5a6>
 800d9ec:	2310      	movs	r3, #16
 800d9ee:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d9f2:	e1aa      	b.n	800dd4a <UART_SetConfig+0x5a6>
 800d9f4:	2320      	movs	r3, #32
 800d9f6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d9fa:	e1a6      	b.n	800dd4a <UART_SetConfig+0x5a6>
 800d9fc:	2340      	movs	r3, #64	; 0x40
 800d9fe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800da02:	e1a2      	b.n	800dd4a <UART_SetConfig+0x5a6>
 800da04:	2380      	movs	r3, #128	; 0x80
 800da06:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800da0a:	e19e      	b.n	800dd4a <UART_SetConfig+0x5a6>
 800da0c:	697b      	ldr	r3, [r7, #20]
 800da0e:	681b      	ldr	r3, [r3, #0]
 800da10:	4a35      	ldr	r2, [pc, #212]	; (800dae8 <UART_SetConfig+0x344>)
 800da12:	4293      	cmp	r3, r2
 800da14:	d130      	bne.n	800da78 <UART_SetConfig+0x2d4>
 800da16:	4b31      	ldr	r3, [pc, #196]	; (800dadc <UART_SetConfig+0x338>)
 800da18:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800da1a:	f003 0307 	and.w	r3, r3, #7
 800da1e:	2b05      	cmp	r3, #5
 800da20:	d826      	bhi.n	800da70 <UART_SetConfig+0x2cc>
 800da22:	a201      	add	r2, pc, #4	; (adr r2, 800da28 <UART_SetConfig+0x284>)
 800da24:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800da28:	0800da41 	.word	0x0800da41
 800da2c:	0800da49 	.word	0x0800da49
 800da30:	0800da51 	.word	0x0800da51
 800da34:	0800da59 	.word	0x0800da59
 800da38:	0800da61 	.word	0x0800da61
 800da3c:	0800da69 	.word	0x0800da69
 800da40:	2300      	movs	r3, #0
 800da42:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800da46:	e180      	b.n	800dd4a <UART_SetConfig+0x5a6>
 800da48:	2304      	movs	r3, #4
 800da4a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800da4e:	e17c      	b.n	800dd4a <UART_SetConfig+0x5a6>
 800da50:	2308      	movs	r3, #8
 800da52:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800da56:	e178      	b.n	800dd4a <UART_SetConfig+0x5a6>
 800da58:	2310      	movs	r3, #16
 800da5a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800da5e:	e174      	b.n	800dd4a <UART_SetConfig+0x5a6>
 800da60:	2320      	movs	r3, #32
 800da62:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800da66:	e170      	b.n	800dd4a <UART_SetConfig+0x5a6>
 800da68:	2340      	movs	r3, #64	; 0x40
 800da6a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800da6e:	e16c      	b.n	800dd4a <UART_SetConfig+0x5a6>
 800da70:	2380      	movs	r3, #128	; 0x80
 800da72:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800da76:	e168      	b.n	800dd4a <UART_SetConfig+0x5a6>
 800da78:	697b      	ldr	r3, [r7, #20]
 800da7a:	681b      	ldr	r3, [r3, #0]
 800da7c:	4a1b      	ldr	r2, [pc, #108]	; (800daec <UART_SetConfig+0x348>)
 800da7e:	4293      	cmp	r3, r2
 800da80:	d142      	bne.n	800db08 <UART_SetConfig+0x364>
 800da82:	4b16      	ldr	r3, [pc, #88]	; (800dadc <UART_SetConfig+0x338>)
 800da84:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800da86:	f003 0307 	and.w	r3, r3, #7
 800da8a:	2b05      	cmp	r3, #5
 800da8c:	d838      	bhi.n	800db00 <UART_SetConfig+0x35c>
 800da8e:	a201      	add	r2, pc, #4	; (adr r2, 800da94 <UART_SetConfig+0x2f0>)
 800da90:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800da94:	0800daad 	.word	0x0800daad
 800da98:	0800dab5 	.word	0x0800dab5
 800da9c:	0800dabd 	.word	0x0800dabd
 800daa0:	0800dac5 	.word	0x0800dac5
 800daa4:	0800daf1 	.word	0x0800daf1
 800daa8:	0800daf9 	.word	0x0800daf9
 800daac:	2300      	movs	r3, #0
 800daae:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800dab2:	e14a      	b.n	800dd4a <UART_SetConfig+0x5a6>
 800dab4:	2304      	movs	r3, #4
 800dab6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800daba:	e146      	b.n	800dd4a <UART_SetConfig+0x5a6>
 800dabc:	2308      	movs	r3, #8
 800dabe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800dac2:	e142      	b.n	800dd4a <UART_SetConfig+0x5a6>
 800dac4:	2310      	movs	r3, #16
 800dac6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800daca:	e13e      	b.n	800dd4a <UART_SetConfig+0x5a6>
 800dacc:	cfff69f3 	.word	0xcfff69f3
 800dad0:	58000c00 	.word	0x58000c00
 800dad4:	11fff4ff 	.word	0x11fff4ff
 800dad8:	40011000 	.word	0x40011000
 800dadc:	58024400 	.word	0x58024400
 800dae0:	40004400 	.word	0x40004400
 800dae4:	40004800 	.word	0x40004800
 800dae8:	40004c00 	.word	0x40004c00
 800daec:	40005000 	.word	0x40005000
 800daf0:	2320      	movs	r3, #32
 800daf2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800daf6:	e128      	b.n	800dd4a <UART_SetConfig+0x5a6>
 800daf8:	2340      	movs	r3, #64	; 0x40
 800dafa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800dafe:	e124      	b.n	800dd4a <UART_SetConfig+0x5a6>
 800db00:	2380      	movs	r3, #128	; 0x80
 800db02:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800db06:	e120      	b.n	800dd4a <UART_SetConfig+0x5a6>
 800db08:	697b      	ldr	r3, [r7, #20]
 800db0a:	681b      	ldr	r3, [r3, #0]
 800db0c:	4acb      	ldr	r2, [pc, #812]	; (800de3c <UART_SetConfig+0x698>)
 800db0e:	4293      	cmp	r3, r2
 800db10:	d176      	bne.n	800dc00 <UART_SetConfig+0x45c>
 800db12:	4bcb      	ldr	r3, [pc, #812]	; (800de40 <UART_SetConfig+0x69c>)
 800db14:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800db16:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800db1a:	2b28      	cmp	r3, #40	; 0x28
 800db1c:	d86c      	bhi.n	800dbf8 <UART_SetConfig+0x454>
 800db1e:	a201      	add	r2, pc, #4	; (adr r2, 800db24 <UART_SetConfig+0x380>)
 800db20:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800db24:	0800dbc9 	.word	0x0800dbc9
 800db28:	0800dbf9 	.word	0x0800dbf9
 800db2c:	0800dbf9 	.word	0x0800dbf9
 800db30:	0800dbf9 	.word	0x0800dbf9
 800db34:	0800dbf9 	.word	0x0800dbf9
 800db38:	0800dbf9 	.word	0x0800dbf9
 800db3c:	0800dbf9 	.word	0x0800dbf9
 800db40:	0800dbf9 	.word	0x0800dbf9
 800db44:	0800dbd1 	.word	0x0800dbd1
 800db48:	0800dbf9 	.word	0x0800dbf9
 800db4c:	0800dbf9 	.word	0x0800dbf9
 800db50:	0800dbf9 	.word	0x0800dbf9
 800db54:	0800dbf9 	.word	0x0800dbf9
 800db58:	0800dbf9 	.word	0x0800dbf9
 800db5c:	0800dbf9 	.word	0x0800dbf9
 800db60:	0800dbf9 	.word	0x0800dbf9
 800db64:	0800dbd9 	.word	0x0800dbd9
 800db68:	0800dbf9 	.word	0x0800dbf9
 800db6c:	0800dbf9 	.word	0x0800dbf9
 800db70:	0800dbf9 	.word	0x0800dbf9
 800db74:	0800dbf9 	.word	0x0800dbf9
 800db78:	0800dbf9 	.word	0x0800dbf9
 800db7c:	0800dbf9 	.word	0x0800dbf9
 800db80:	0800dbf9 	.word	0x0800dbf9
 800db84:	0800dbe1 	.word	0x0800dbe1
 800db88:	0800dbf9 	.word	0x0800dbf9
 800db8c:	0800dbf9 	.word	0x0800dbf9
 800db90:	0800dbf9 	.word	0x0800dbf9
 800db94:	0800dbf9 	.word	0x0800dbf9
 800db98:	0800dbf9 	.word	0x0800dbf9
 800db9c:	0800dbf9 	.word	0x0800dbf9
 800dba0:	0800dbf9 	.word	0x0800dbf9
 800dba4:	0800dbe9 	.word	0x0800dbe9
 800dba8:	0800dbf9 	.word	0x0800dbf9
 800dbac:	0800dbf9 	.word	0x0800dbf9
 800dbb0:	0800dbf9 	.word	0x0800dbf9
 800dbb4:	0800dbf9 	.word	0x0800dbf9
 800dbb8:	0800dbf9 	.word	0x0800dbf9
 800dbbc:	0800dbf9 	.word	0x0800dbf9
 800dbc0:	0800dbf9 	.word	0x0800dbf9
 800dbc4:	0800dbf1 	.word	0x0800dbf1
 800dbc8:	2301      	movs	r3, #1
 800dbca:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800dbce:	e0bc      	b.n	800dd4a <UART_SetConfig+0x5a6>
 800dbd0:	2304      	movs	r3, #4
 800dbd2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800dbd6:	e0b8      	b.n	800dd4a <UART_SetConfig+0x5a6>
 800dbd8:	2308      	movs	r3, #8
 800dbda:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800dbde:	e0b4      	b.n	800dd4a <UART_SetConfig+0x5a6>
 800dbe0:	2310      	movs	r3, #16
 800dbe2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800dbe6:	e0b0      	b.n	800dd4a <UART_SetConfig+0x5a6>
 800dbe8:	2320      	movs	r3, #32
 800dbea:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800dbee:	e0ac      	b.n	800dd4a <UART_SetConfig+0x5a6>
 800dbf0:	2340      	movs	r3, #64	; 0x40
 800dbf2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800dbf6:	e0a8      	b.n	800dd4a <UART_SetConfig+0x5a6>
 800dbf8:	2380      	movs	r3, #128	; 0x80
 800dbfa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800dbfe:	e0a4      	b.n	800dd4a <UART_SetConfig+0x5a6>
 800dc00:	697b      	ldr	r3, [r7, #20]
 800dc02:	681b      	ldr	r3, [r3, #0]
 800dc04:	4a8f      	ldr	r2, [pc, #572]	; (800de44 <UART_SetConfig+0x6a0>)
 800dc06:	4293      	cmp	r3, r2
 800dc08:	d130      	bne.n	800dc6c <UART_SetConfig+0x4c8>
 800dc0a:	4b8d      	ldr	r3, [pc, #564]	; (800de40 <UART_SetConfig+0x69c>)
 800dc0c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800dc0e:	f003 0307 	and.w	r3, r3, #7
 800dc12:	2b05      	cmp	r3, #5
 800dc14:	d826      	bhi.n	800dc64 <UART_SetConfig+0x4c0>
 800dc16:	a201      	add	r2, pc, #4	; (adr r2, 800dc1c <UART_SetConfig+0x478>)
 800dc18:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800dc1c:	0800dc35 	.word	0x0800dc35
 800dc20:	0800dc3d 	.word	0x0800dc3d
 800dc24:	0800dc45 	.word	0x0800dc45
 800dc28:	0800dc4d 	.word	0x0800dc4d
 800dc2c:	0800dc55 	.word	0x0800dc55
 800dc30:	0800dc5d 	.word	0x0800dc5d
 800dc34:	2300      	movs	r3, #0
 800dc36:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800dc3a:	e086      	b.n	800dd4a <UART_SetConfig+0x5a6>
 800dc3c:	2304      	movs	r3, #4
 800dc3e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800dc42:	e082      	b.n	800dd4a <UART_SetConfig+0x5a6>
 800dc44:	2308      	movs	r3, #8
 800dc46:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800dc4a:	e07e      	b.n	800dd4a <UART_SetConfig+0x5a6>
 800dc4c:	2310      	movs	r3, #16
 800dc4e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800dc52:	e07a      	b.n	800dd4a <UART_SetConfig+0x5a6>
 800dc54:	2320      	movs	r3, #32
 800dc56:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800dc5a:	e076      	b.n	800dd4a <UART_SetConfig+0x5a6>
 800dc5c:	2340      	movs	r3, #64	; 0x40
 800dc5e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800dc62:	e072      	b.n	800dd4a <UART_SetConfig+0x5a6>
 800dc64:	2380      	movs	r3, #128	; 0x80
 800dc66:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800dc6a:	e06e      	b.n	800dd4a <UART_SetConfig+0x5a6>
 800dc6c:	697b      	ldr	r3, [r7, #20]
 800dc6e:	681b      	ldr	r3, [r3, #0]
 800dc70:	4a75      	ldr	r2, [pc, #468]	; (800de48 <UART_SetConfig+0x6a4>)
 800dc72:	4293      	cmp	r3, r2
 800dc74:	d130      	bne.n	800dcd8 <UART_SetConfig+0x534>
 800dc76:	4b72      	ldr	r3, [pc, #456]	; (800de40 <UART_SetConfig+0x69c>)
 800dc78:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800dc7a:	f003 0307 	and.w	r3, r3, #7
 800dc7e:	2b05      	cmp	r3, #5
 800dc80:	d826      	bhi.n	800dcd0 <UART_SetConfig+0x52c>
 800dc82:	a201      	add	r2, pc, #4	; (adr r2, 800dc88 <UART_SetConfig+0x4e4>)
 800dc84:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800dc88:	0800dca1 	.word	0x0800dca1
 800dc8c:	0800dca9 	.word	0x0800dca9
 800dc90:	0800dcb1 	.word	0x0800dcb1
 800dc94:	0800dcb9 	.word	0x0800dcb9
 800dc98:	0800dcc1 	.word	0x0800dcc1
 800dc9c:	0800dcc9 	.word	0x0800dcc9
 800dca0:	2300      	movs	r3, #0
 800dca2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800dca6:	e050      	b.n	800dd4a <UART_SetConfig+0x5a6>
 800dca8:	2304      	movs	r3, #4
 800dcaa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800dcae:	e04c      	b.n	800dd4a <UART_SetConfig+0x5a6>
 800dcb0:	2308      	movs	r3, #8
 800dcb2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800dcb6:	e048      	b.n	800dd4a <UART_SetConfig+0x5a6>
 800dcb8:	2310      	movs	r3, #16
 800dcba:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800dcbe:	e044      	b.n	800dd4a <UART_SetConfig+0x5a6>
 800dcc0:	2320      	movs	r3, #32
 800dcc2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800dcc6:	e040      	b.n	800dd4a <UART_SetConfig+0x5a6>
 800dcc8:	2340      	movs	r3, #64	; 0x40
 800dcca:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800dcce:	e03c      	b.n	800dd4a <UART_SetConfig+0x5a6>
 800dcd0:	2380      	movs	r3, #128	; 0x80
 800dcd2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800dcd6:	e038      	b.n	800dd4a <UART_SetConfig+0x5a6>
 800dcd8:	697b      	ldr	r3, [r7, #20]
 800dcda:	681b      	ldr	r3, [r3, #0]
 800dcdc:	4a5b      	ldr	r2, [pc, #364]	; (800de4c <UART_SetConfig+0x6a8>)
 800dcde:	4293      	cmp	r3, r2
 800dce0:	d130      	bne.n	800dd44 <UART_SetConfig+0x5a0>
 800dce2:	4b57      	ldr	r3, [pc, #348]	; (800de40 <UART_SetConfig+0x69c>)
 800dce4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800dce6:	f003 0307 	and.w	r3, r3, #7
 800dcea:	2b05      	cmp	r3, #5
 800dcec:	d826      	bhi.n	800dd3c <UART_SetConfig+0x598>
 800dcee:	a201      	add	r2, pc, #4	; (adr r2, 800dcf4 <UART_SetConfig+0x550>)
 800dcf0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800dcf4:	0800dd0d 	.word	0x0800dd0d
 800dcf8:	0800dd15 	.word	0x0800dd15
 800dcfc:	0800dd1d 	.word	0x0800dd1d
 800dd00:	0800dd25 	.word	0x0800dd25
 800dd04:	0800dd2d 	.word	0x0800dd2d
 800dd08:	0800dd35 	.word	0x0800dd35
 800dd0c:	2302      	movs	r3, #2
 800dd0e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800dd12:	e01a      	b.n	800dd4a <UART_SetConfig+0x5a6>
 800dd14:	2304      	movs	r3, #4
 800dd16:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800dd1a:	e016      	b.n	800dd4a <UART_SetConfig+0x5a6>
 800dd1c:	2308      	movs	r3, #8
 800dd1e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800dd22:	e012      	b.n	800dd4a <UART_SetConfig+0x5a6>
 800dd24:	2310      	movs	r3, #16
 800dd26:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800dd2a:	e00e      	b.n	800dd4a <UART_SetConfig+0x5a6>
 800dd2c:	2320      	movs	r3, #32
 800dd2e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800dd32:	e00a      	b.n	800dd4a <UART_SetConfig+0x5a6>
 800dd34:	2340      	movs	r3, #64	; 0x40
 800dd36:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800dd3a:	e006      	b.n	800dd4a <UART_SetConfig+0x5a6>
 800dd3c:	2380      	movs	r3, #128	; 0x80
 800dd3e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800dd42:	e002      	b.n	800dd4a <UART_SetConfig+0x5a6>
 800dd44:	2380      	movs	r3, #128	; 0x80
 800dd46:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800dd4a:	697b      	ldr	r3, [r7, #20]
 800dd4c:	681b      	ldr	r3, [r3, #0]
 800dd4e:	4a3f      	ldr	r2, [pc, #252]	; (800de4c <UART_SetConfig+0x6a8>)
 800dd50:	4293      	cmp	r3, r2
 800dd52:	f040 80f8 	bne.w	800df46 <UART_SetConfig+0x7a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800dd56:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800dd5a:	2b20      	cmp	r3, #32
 800dd5c:	dc46      	bgt.n	800ddec <UART_SetConfig+0x648>
 800dd5e:	2b02      	cmp	r3, #2
 800dd60:	f2c0 8082 	blt.w	800de68 <UART_SetConfig+0x6c4>
 800dd64:	3b02      	subs	r3, #2
 800dd66:	2b1e      	cmp	r3, #30
 800dd68:	d87e      	bhi.n	800de68 <UART_SetConfig+0x6c4>
 800dd6a:	a201      	add	r2, pc, #4	; (adr r2, 800dd70 <UART_SetConfig+0x5cc>)
 800dd6c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800dd70:	0800ddf3 	.word	0x0800ddf3
 800dd74:	0800de69 	.word	0x0800de69
 800dd78:	0800ddfb 	.word	0x0800ddfb
 800dd7c:	0800de69 	.word	0x0800de69
 800dd80:	0800de69 	.word	0x0800de69
 800dd84:	0800de69 	.word	0x0800de69
 800dd88:	0800de0b 	.word	0x0800de0b
 800dd8c:	0800de69 	.word	0x0800de69
 800dd90:	0800de69 	.word	0x0800de69
 800dd94:	0800de69 	.word	0x0800de69
 800dd98:	0800de69 	.word	0x0800de69
 800dd9c:	0800de69 	.word	0x0800de69
 800dda0:	0800de69 	.word	0x0800de69
 800dda4:	0800de69 	.word	0x0800de69
 800dda8:	0800de1b 	.word	0x0800de1b
 800ddac:	0800de69 	.word	0x0800de69
 800ddb0:	0800de69 	.word	0x0800de69
 800ddb4:	0800de69 	.word	0x0800de69
 800ddb8:	0800de69 	.word	0x0800de69
 800ddbc:	0800de69 	.word	0x0800de69
 800ddc0:	0800de69 	.word	0x0800de69
 800ddc4:	0800de69 	.word	0x0800de69
 800ddc8:	0800de69 	.word	0x0800de69
 800ddcc:	0800de69 	.word	0x0800de69
 800ddd0:	0800de69 	.word	0x0800de69
 800ddd4:	0800de69 	.word	0x0800de69
 800ddd8:	0800de69 	.word	0x0800de69
 800dddc:	0800de69 	.word	0x0800de69
 800dde0:	0800de69 	.word	0x0800de69
 800dde4:	0800de69 	.word	0x0800de69
 800dde8:	0800de5b 	.word	0x0800de5b
 800ddec:	2b40      	cmp	r3, #64	; 0x40
 800ddee:	d037      	beq.n	800de60 <UART_SetConfig+0x6bc>
 800ddf0:	e03a      	b.n	800de68 <UART_SetConfig+0x6c4>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 800ddf2:	f7fd faaf 	bl	800b354 <HAL_RCCEx_GetD3PCLK1Freq>
 800ddf6:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800ddf8:	e03c      	b.n	800de74 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800ddfa:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800ddfe:	4618      	mov	r0, r3
 800de00:	f7fd fabe 	bl	800b380 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800de04:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800de06:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800de08:	e034      	b.n	800de74 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800de0a:	f107 0318 	add.w	r3, r7, #24
 800de0e:	4618      	mov	r0, r3
 800de10:	f7fd fc0a 	bl	800b628 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800de14:	69fb      	ldr	r3, [r7, #28]
 800de16:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800de18:	e02c      	b.n	800de74 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800de1a:	4b09      	ldr	r3, [pc, #36]	; (800de40 <UART_SetConfig+0x69c>)
 800de1c:	681b      	ldr	r3, [r3, #0]
 800de1e:	f003 0320 	and.w	r3, r3, #32
 800de22:	2b00      	cmp	r3, #0
 800de24:	d016      	beq.n	800de54 <UART_SetConfig+0x6b0>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800de26:	4b06      	ldr	r3, [pc, #24]	; (800de40 <UART_SetConfig+0x69c>)
 800de28:	681b      	ldr	r3, [r3, #0]
 800de2a:	08db      	lsrs	r3, r3, #3
 800de2c:	f003 0303 	and.w	r3, r3, #3
 800de30:	4a07      	ldr	r2, [pc, #28]	; (800de50 <UART_SetConfig+0x6ac>)
 800de32:	fa22 f303 	lsr.w	r3, r2, r3
 800de36:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800de38:	e01c      	b.n	800de74 <UART_SetConfig+0x6d0>
 800de3a:	bf00      	nop
 800de3c:	40011400 	.word	0x40011400
 800de40:	58024400 	.word	0x58024400
 800de44:	40007800 	.word	0x40007800
 800de48:	40007c00 	.word	0x40007c00
 800de4c:	58000c00 	.word	0x58000c00
 800de50:	03d09000 	.word	0x03d09000
          pclk = (uint32_t) HSI_VALUE;
 800de54:	4b9d      	ldr	r3, [pc, #628]	; (800e0cc <UART_SetConfig+0x928>)
 800de56:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800de58:	e00c      	b.n	800de74 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800de5a:	4b9d      	ldr	r3, [pc, #628]	; (800e0d0 <UART_SetConfig+0x92c>)
 800de5c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800de5e:	e009      	b.n	800de74 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800de60:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800de64:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800de66:	e005      	b.n	800de74 <UART_SetConfig+0x6d0>
      default:
        pclk = 0U;
 800de68:	2300      	movs	r3, #0
 800de6a:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 800de6c:	2301      	movs	r3, #1
 800de6e:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 800de72:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800de74:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800de76:	2b00      	cmp	r3, #0
 800de78:	f000 81de 	beq.w	800e238 <UART_SetConfig+0xa94>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800de7c:	697b      	ldr	r3, [r7, #20]
 800de7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800de80:	4a94      	ldr	r2, [pc, #592]	; (800e0d4 <UART_SetConfig+0x930>)
 800de82:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800de86:	461a      	mov	r2, r3
 800de88:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800de8a:	fbb3 f3f2 	udiv	r3, r3, r2
 800de8e:	633b      	str	r3, [r7, #48]	; 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800de90:	697b      	ldr	r3, [r7, #20]
 800de92:	685a      	ldr	r2, [r3, #4]
 800de94:	4613      	mov	r3, r2
 800de96:	005b      	lsls	r3, r3, #1
 800de98:	4413      	add	r3, r2
 800de9a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800de9c:	429a      	cmp	r2, r3
 800de9e:	d305      	bcc.n	800deac <UART_SetConfig+0x708>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800dea0:	697b      	ldr	r3, [r7, #20]
 800dea2:	685b      	ldr	r3, [r3, #4]
 800dea4:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800dea6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800dea8:	429a      	cmp	r2, r3
 800deaa:	d903      	bls.n	800deb4 <UART_SetConfig+0x710>
      {
        ret = HAL_ERROR;
 800deac:	2301      	movs	r3, #1
 800deae:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 800deb2:	e1c1      	b.n	800e238 <UART_SetConfig+0xa94>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800deb4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800deb6:	2200      	movs	r2, #0
 800deb8:	60bb      	str	r3, [r7, #8]
 800deba:	60fa      	str	r2, [r7, #12]
 800debc:	697b      	ldr	r3, [r7, #20]
 800debe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800dec0:	4a84      	ldr	r2, [pc, #528]	; (800e0d4 <UART_SetConfig+0x930>)
 800dec2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800dec6:	b29b      	uxth	r3, r3
 800dec8:	2200      	movs	r2, #0
 800deca:	603b      	str	r3, [r7, #0]
 800decc:	607a      	str	r2, [r7, #4]
 800dece:	e9d7 2300 	ldrd	r2, r3, [r7]
 800ded2:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800ded6:	f7f2 fa07 	bl	80002e8 <__aeabi_uldivmod>
 800deda:	4602      	mov	r2, r0
 800dedc:	460b      	mov	r3, r1
 800dede:	4610      	mov	r0, r2
 800dee0:	4619      	mov	r1, r3
 800dee2:	f04f 0200 	mov.w	r2, #0
 800dee6:	f04f 0300 	mov.w	r3, #0
 800deea:	020b      	lsls	r3, r1, #8
 800deec:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800def0:	0202      	lsls	r2, r0, #8
 800def2:	6979      	ldr	r1, [r7, #20]
 800def4:	6849      	ldr	r1, [r1, #4]
 800def6:	0849      	lsrs	r1, r1, #1
 800def8:	2000      	movs	r0, #0
 800defa:	460c      	mov	r4, r1
 800defc:	4605      	mov	r5, r0
 800defe:	eb12 0804 	adds.w	r8, r2, r4
 800df02:	eb43 0905 	adc.w	r9, r3, r5
 800df06:	697b      	ldr	r3, [r7, #20]
 800df08:	685b      	ldr	r3, [r3, #4]
 800df0a:	2200      	movs	r2, #0
 800df0c:	469a      	mov	sl, r3
 800df0e:	4693      	mov	fp, r2
 800df10:	4652      	mov	r2, sl
 800df12:	465b      	mov	r3, fp
 800df14:	4640      	mov	r0, r8
 800df16:	4649      	mov	r1, r9
 800df18:	f7f2 f9e6 	bl	80002e8 <__aeabi_uldivmod>
 800df1c:	4602      	mov	r2, r0
 800df1e:	460b      	mov	r3, r1
 800df20:	4613      	mov	r3, r2
 800df22:	63bb      	str	r3, [r7, #56]	; 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800df24:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800df26:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800df2a:	d308      	bcc.n	800df3e <UART_SetConfig+0x79a>
 800df2c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800df2e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800df32:	d204      	bcs.n	800df3e <UART_SetConfig+0x79a>
        {
          huart->Instance->BRR = usartdiv;
 800df34:	697b      	ldr	r3, [r7, #20]
 800df36:	681b      	ldr	r3, [r3, #0]
 800df38:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800df3a:	60da      	str	r2, [r3, #12]
 800df3c:	e17c      	b.n	800e238 <UART_SetConfig+0xa94>
        }
        else
        {
          ret = HAL_ERROR;
 800df3e:	2301      	movs	r3, #1
 800df40:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 800df44:	e178      	b.n	800e238 <UART_SetConfig+0xa94>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800df46:	697b      	ldr	r3, [r7, #20]
 800df48:	69db      	ldr	r3, [r3, #28]
 800df4a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800df4e:	f040 80c5 	bne.w	800e0dc <UART_SetConfig+0x938>
  {
    switch (clocksource)
 800df52:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800df56:	2b20      	cmp	r3, #32
 800df58:	dc48      	bgt.n	800dfec <UART_SetConfig+0x848>
 800df5a:	2b00      	cmp	r3, #0
 800df5c:	db7b      	blt.n	800e056 <UART_SetConfig+0x8b2>
 800df5e:	2b20      	cmp	r3, #32
 800df60:	d879      	bhi.n	800e056 <UART_SetConfig+0x8b2>
 800df62:	a201      	add	r2, pc, #4	; (adr r2, 800df68 <UART_SetConfig+0x7c4>)
 800df64:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800df68:	0800dff3 	.word	0x0800dff3
 800df6c:	0800dffb 	.word	0x0800dffb
 800df70:	0800e057 	.word	0x0800e057
 800df74:	0800e057 	.word	0x0800e057
 800df78:	0800e003 	.word	0x0800e003
 800df7c:	0800e057 	.word	0x0800e057
 800df80:	0800e057 	.word	0x0800e057
 800df84:	0800e057 	.word	0x0800e057
 800df88:	0800e013 	.word	0x0800e013
 800df8c:	0800e057 	.word	0x0800e057
 800df90:	0800e057 	.word	0x0800e057
 800df94:	0800e057 	.word	0x0800e057
 800df98:	0800e057 	.word	0x0800e057
 800df9c:	0800e057 	.word	0x0800e057
 800dfa0:	0800e057 	.word	0x0800e057
 800dfa4:	0800e057 	.word	0x0800e057
 800dfa8:	0800e023 	.word	0x0800e023
 800dfac:	0800e057 	.word	0x0800e057
 800dfb0:	0800e057 	.word	0x0800e057
 800dfb4:	0800e057 	.word	0x0800e057
 800dfb8:	0800e057 	.word	0x0800e057
 800dfbc:	0800e057 	.word	0x0800e057
 800dfc0:	0800e057 	.word	0x0800e057
 800dfc4:	0800e057 	.word	0x0800e057
 800dfc8:	0800e057 	.word	0x0800e057
 800dfcc:	0800e057 	.word	0x0800e057
 800dfd0:	0800e057 	.word	0x0800e057
 800dfd4:	0800e057 	.word	0x0800e057
 800dfd8:	0800e057 	.word	0x0800e057
 800dfdc:	0800e057 	.word	0x0800e057
 800dfe0:	0800e057 	.word	0x0800e057
 800dfe4:	0800e057 	.word	0x0800e057
 800dfe8:	0800e049 	.word	0x0800e049
 800dfec:	2b40      	cmp	r3, #64	; 0x40
 800dfee:	d02e      	beq.n	800e04e <UART_SetConfig+0x8aa>
 800dff0:	e031      	b.n	800e056 <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800dff2:	f7fb f9b9 	bl	8009368 <HAL_RCC_GetPCLK1Freq>
 800dff6:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800dff8:	e033      	b.n	800e062 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800dffa:	f7fb f9cb 	bl	8009394 <HAL_RCC_GetPCLK2Freq>
 800dffe:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800e000:	e02f      	b.n	800e062 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800e002:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800e006:	4618      	mov	r0, r3
 800e008:	f7fd f9ba 	bl	800b380 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800e00c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e00e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800e010:	e027      	b.n	800e062 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800e012:	f107 0318 	add.w	r3, r7, #24
 800e016:	4618      	mov	r0, r3
 800e018:	f7fd fb06 	bl	800b628 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800e01c:	69fb      	ldr	r3, [r7, #28]
 800e01e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800e020:	e01f      	b.n	800e062 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800e022:	4b2d      	ldr	r3, [pc, #180]	; (800e0d8 <UART_SetConfig+0x934>)
 800e024:	681b      	ldr	r3, [r3, #0]
 800e026:	f003 0320 	and.w	r3, r3, #32
 800e02a:	2b00      	cmp	r3, #0
 800e02c:	d009      	beq.n	800e042 <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800e02e:	4b2a      	ldr	r3, [pc, #168]	; (800e0d8 <UART_SetConfig+0x934>)
 800e030:	681b      	ldr	r3, [r3, #0]
 800e032:	08db      	lsrs	r3, r3, #3
 800e034:	f003 0303 	and.w	r3, r3, #3
 800e038:	4a24      	ldr	r2, [pc, #144]	; (800e0cc <UART_SetConfig+0x928>)
 800e03a:	fa22 f303 	lsr.w	r3, r2, r3
 800e03e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800e040:	e00f      	b.n	800e062 <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 800e042:	4b22      	ldr	r3, [pc, #136]	; (800e0cc <UART_SetConfig+0x928>)
 800e044:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800e046:	e00c      	b.n	800e062 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800e048:	4b21      	ldr	r3, [pc, #132]	; (800e0d0 <UART_SetConfig+0x92c>)
 800e04a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800e04c:	e009      	b.n	800e062 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800e04e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800e052:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800e054:	e005      	b.n	800e062 <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 800e056:	2300      	movs	r3, #0
 800e058:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 800e05a:	2301      	movs	r3, #1
 800e05c:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 800e060:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800e062:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e064:	2b00      	cmp	r3, #0
 800e066:	f000 80e7 	beq.w	800e238 <UART_SetConfig+0xa94>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800e06a:	697b      	ldr	r3, [r7, #20]
 800e06c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e06e:	4a19      	ldr	r2, [pc, #100]	; (800e0d4 <UART_SetConfig+0x930>)
 800e070:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800e074:	461a      	mov	r2, r3
 800e076:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e078:	fbb3 f3f2 	udiv	r3, r3, r2
 800e07c:	005a      	lsls	r2, r3, #1
 800e07e:	697b      	ldr	r3, [r7, #20]
 800e080:	685b      	ldr	r3, [r3, #4]
 800e082:	085b      	lsrs	r3, r3, #1
 800e084:	441a      	add	r2, r3
 800e086:	697b      	ldr	r3, [r7, #20]
 800e088:	685b      	ldr	r3, [r3, #4]
 800e08a:	fbb2 f3f3 	udiv	r3, r2, r3
 800e08e:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800e090:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e092:	2b0f      	cmp	r3, #15
 800e094:	d916      	bls.n	800e0c4 <UART_SetConfig+0x920>
 800e096:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e098:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800e09c:	d212      	bcs.n	800e0c4 <UART_SetConfig+0x920>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800e09e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e0a0:	b29b      	uxth	r3, r3
 800e0a2:	f023 030f 	bic.w	r3, r3, #15
 800e0a6:	86fb      	strh	r3, [r7, #54]	; 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800e0a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e0aa:	085b      	lsrs	r3, r3, #1
 800e0ac:	b29b      	uxth	r3, r3
 800e0ae:	f003 0307 	and.w	r3, r3, #7
 800e0b2:	b29a      	uxth	r2, r3
 800e0b4:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800e0b6:	4313      	orrs	r3, r2
 800e0b8:	86fb      	strh	r3, [r7, #54]	; 0x36
        huart->Instance->BRR = brrtemp;
 800e0ba:	697b      	ldr	r3, [r7, #20]
 800e0bc:	681b      	ldr	r3, [r3, #0]
 800e0be:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 800e0c0:	60da      	str	r2, [r3, #12]
 800e0c2:	e0b9      	b.n	800e238 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 800e0c4:	2301      	movs	r3, #1
 800e0c6:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 800e0ca:	e0b5      	b.n	800e238 <UART_SetConfig+0xa94>
 800e0cc:	03d09000 	.word	0x03d09000
 800e0d0:	003d0900 	.word	0x003d0900
 800e0d4:	080101ec 	.word	0x080101ec
 800e0d8:	58024400 	.word	0x58024400
      }
    }
  }
  else
  {
    switch (clocksource)
 800e0dc:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800e0e0:	2b20      	cmp	r3, #32
 800e0e2:	dc49      	bgt.n	800e178 <UART_SetConfig+0x9d4>
 800e0e4:	2b00      	cmp	r3, #0
 800e0e6:	db7c      	blt.n	800e1e2 <UART_SetConfig+0xa3e>
 800e0e8:	2b20      	cmp	r3, #32
 800e0ea:	d87a      	bhi.n	800e1e2 <UART_SetConfig+0xa3e>
 800e0ec:	a201      	add	r2, pc, #4	; (adr r2, 800e0f4 <UART_SetConfig+0x950>)
 800e0ee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e0f2:	bf00      	nop
 800e0f4:	0800e17f 	.word	0x0800e17f
 800e0f8:	0800e187 	.word	0x0800e187
 800e0fc:	0800e1e3 	.word	0x0800e1e3
 800e100:	0800e1e3 	.word	0x0800e1e3
 800e104:	0800e18f 	.word	0x0800e18f
 800e108:	0800e1e3 	.word	0x0800e1e3
 800e10c:	0800e1e3 	.word	0x0800e1e3
 800e110:	0800e1e3 	.word	0x0800e1e3
 800e114:	0800e19f 	.word	0x0800e19f
 800e118:	0800e1e3 	.word	0x0800e1e3
 800e11c:	0800e1e3 	.word	0x0800e1e3
 800e120:	0800e1e3 	.word	0x0800e1e3
 800e124:	0800e1e3 	.word	0x0800e1e3
 800e128:	0800e1e3 	.word	0x0800e1e3
 800e12c:	0800e1e3 	.word	0x0800e1e3
 800e130:	0800e1e3 	.word	0x0800e1e3
 800e134:	0800e1af 	.word	0x0800e1af
 800e138:	0800e1e3 	.word	0x0800e1e3
 800e13c:	0800e1e3 	.word	0x0800e1e3
 800e140:	0800e1e3 	.word	0x0800e1e3
 800e144:	0800e1e3 	.word	0x0800e1e3
 800e148:	0800e1e3 	.word	0x0800e1e3
 800e14c:	0800e1e3 	.word	0x0800e1e3
 800e150:	0800e1e3 	.word	0x0800e1e3
 800e154:	0800e1e3 	.word	0x0800e1e3
 800e158:	0800e1e3 	.word	0x0800e1e3
 800e15c:	0800e1e3 	.word	0x0800e1e3
 800e160:	0800e1e3 	.word	0x0800e1e3
 800e164:	0800e1e3 	.word	0x0800e1e3
 800e168:	0800e1e3 	.word	0x0800e1e3
 800e16c:	0800e1e3 	.word	0x0800e1e3
 800e170:	0800e1e3 	.word	0x0800e1e3
 800e174:	0800e1d5 	.word	0x0800e1d5
 800e178:	2b40      	cmp	r3, #64	; 0x40
 800e17a:	d02e      	beq.n	800e1da <UART_SetConfig+0xa36>
 800e17c:	e031      	b.n	800e1e2 <UART_SetConfig+0xa3e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800e17e:	f7fb f8f3 	bl	8009368 <HAL_RCC_GetPCLK1Freq>
 800e182:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800e184:	e033      	b.n	800e1ee <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800e186:	f7fb f905 	bl	8009394 <HAL_RCC_GetPCLK2Freq>
 800e18a:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800e18c:	e02f      	b.n	800e1ee <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800e18e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800e192:	4618      	mov	r0, r3
 800e194:	f7fd f8f4 	bl	800b380 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800e198:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e19a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800e19c:	e027      	b.n	800e1ee <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800e19e:	f107 0318 	add.w	r3, r7, #24
 800e1a2:	4618      	mov	r0, r3
 800e1a4:	f7fd fa40 	bl	800b628 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800e1a8:	69fb      	ldr	r3, [r7, #28]
 800e1aa:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800e1ac:	e01f      	b.n	800e1ee <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800e1ae:	4b2d      	ldr	r3, [pc, #180]	; (800e264 <UART_SetConfig+0xac0>)
 800e1b0:	681b      	ldr	r3, [r3, #0]
 800e1b2:	f003 0320 	and.w	r3, r3, #32
 800e1b6:	2b00      	cmp	r3, #0
 800e1b8:	d009      	beq.n	800e1ce <UART_SetConfig+0xa2a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800e1ba:	4b2a      	ldr	r3, [pc, #168]	; (800e264 <UART_SetConfig+0xac0>)
 800e1bc:	681b      	ldr	r3, [r3, #0]
 800e1be:	08db      	lsrs	r3, r3, #3
 800e1c0:	f003 0303 	and.w	r3, r3, #3
 800e1c4:	4a28      	ldr	r2, [pc, #160]	; (800e268 <UART_SetConfig+0xac4>)
 800e1c6:	fa22 f303 	lsr.w	r3, r2, r3
 800e1ca:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800e1cc:	e00f      	b.n	800e1ee <UART_SetConfig+0xa4a>
          pclk = (uint32_t) HSI_VALUE;
 800e1ce:	4b26      	ldr	r3, [pc, #152]	; (800e268 <UART_SetConfig+0xac4>)
 800e1d0:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800e1d2:	e00c      	b.n	800e1ee <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800e1d4:	4b25      	ldr	r3, [pc, #148]	; (800e26c <UART_SetConfig+0xac8>)
 800e1d6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800e1d8:	e009      	b.n	800e1ee <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800e1da:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800e1de:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800e1e0:	e005      	b.n	800e1ee <UART_SetConfig+0xa4a>
      default:
        pclk = 0U;
 800e1e2:	2300      	movs	r3, #0
 800e1e4:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 800e1e6:	2301      	movs	r3, #1
 800e1e8:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 800e1ec:	bf00      	nop
    }

    if (pclk != 0U)
 800e1ee:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e1f0:	2b00      	cmp	r3, #0
 800e1f2:	d021      	beq.n	800e238 <UART_SetConfig+0xa94>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800e1f4:	697b      	ldr	r3, [r7, #20]
 800e1f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e1f8:	4a1d      	ldr	r2, [pc, #116]	; (800e270 <UART_SetConfig+0xacc>)
 800e1fa:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800e1fe:	461a      	mov	r2, r3
 800e200:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e202:	fbb3 f2f2 	udiv	r2, r3, r2
 800e206:	697b      	ldr	r3, [r7, #20]
 800e208:	685b      	ldr	r3, [r3, #4]
 800e20a:	085b      	lsrs	r3, r3, #1
 800e20c:	441a      	add	r2, r3
 800e20e:	697b      	ldr	r3, [r7, #20]
 800e210:	685b      	ldr	r3, [r3, #4]
 800e212:	fbb2 f3f3 	udiv	r3, r2, r3
 800e216:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800e218:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e21a:	2b0f      	cmp	r3, #15
 800e21c:	d909      	bls.n	800e232 <UART_SetConfig+0xa8e>
 800e21e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e220:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800e224:	d205      	bcs.n	800e232 <UART_SetConfig+0xa8e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800e226:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e228:	b29a      	uxth	r2, r3
 800e22a:	697b      	ldr	r3, [r7, #20]
 800e22c:	681b      	ldr	r3, [r3, #0]
 800e22e:	60da      	str	r2, [r3, #12]
 800e230:	e002      	b.n	800e238 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 800e232:	2301      	movs	r3, #1
 800e234:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800e238:	697b      	ldr	r3, [r7, #20]
 800e23a:	2201      	movs	r2, #1
 800e23c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 800e240:	697b      	ldr	r3, [r7, #20]
 800e242:	2201      	movs	r2, #1
 800e244:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800e248:	697b      	ldr	r3, [r7, #20]
 800e24a:	2200      	movs	r2, #0
 800e24c:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 800e24e:	697b      	ldr	r3, [r7, #20]
 800e250:	2200      	movs	r2, #0
 800e252:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 800e254:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
}
 800e258:	4618      	mov	r0, r3
 800e25a:	3748      	adds	r7, #72	; 0x48
 800e25c:	46bd      	mov	sp, r7
 800e25e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800e262:	bf00      	nop
 800e264:	58024400 	.word	0x58024400
 800e268:	03d09000 	.word	0x03d09000
 800e26c:	003d0900 	.word	0x003d0900
 800e270:	080101ec 	.word	0x080101ec

0800e274 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800e274:	b480      	push	{r7}
 800e276:	b083      	sub	sp, #12
 800e278:	af00      	add	r7, sp, #0
 800e27a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800e27c:	687b      	ldr	r3, [r7, #4]
 800e27e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e280:	f003 0301 	and.w	r3, r3, #1
 800e284:	2b00      	cmp	r3, #0
 800e286:	d00a      	beq.n	800e29e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800e288:	687b      	ldr	r3, [r7, #4]
 800e28a:	681b      	ldr	r3, [r3, #0]
 800e28c:	685b      	ldr	r3, [r3, #4]
 800e28e:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800e292:	687b      	ldr	r3, [r7, #4]
 800e294:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e296:	687b      	ldr	r3, [r7, #4]
 800e298:	681b      	ldr	r3, [r3, #0]
 800e29a:	430a      	orrs	r2, r1
 800e29c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800e29e:	687b      	ldr	r3, [r7, #4]
 800e2a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e2a2:	f003 0302 	and.w	r3, r3, #2
 800e2a6:	2b00      	cmp	r3, #0
 800e2a8:	d00a      	beq.n	800e2c0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800e2aa:	687b      	ldr	r3, [r7, #4]
 800e2ac:	681b      	ldr	r3, [r3, #0]
 800e2ae:	685b      	ldr	r3, [r3, #4]
 800e2b0:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800e2b4:	687b      	ldr	r3, [r7, #4]
 800e2b6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800e2b8:	687b      	ldr	r3, [r7, #4]
 800e2ba:	681b      	ldr	r3, [r3, #0]
 800e2bc:	430a      	orrs	r2, r1
 800e2be:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800e2c0:	687b      	ldr	r3, [r7, #4]
 800e2c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e2c4:	f003 0304 	and.w	r3, r3, #4
 800e2c8:	2b00      	cmp	r3, #0
 800e2ca:	d00a      	beq.n	800e2e2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800e2cc:	687b      	ldr	r3, [r7, #4]
 800e2ce:	681b      	ldr	r3, [r3, #0]
 800e2d0:	685b      	ldr	r3, [r3, #4]
 800e2d2:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800e2d6:	687b      	ldr	r3, [r7, #4]
 800e2d8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800e2da:	687b      	ldr	r3, [r7, #4]
 800e2dc:	681b      	ldr	r3, [r3, #0]
 800e2de:	430a      	orrs	r2, r1
 800e2e0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800e2e2:	687b      	ldr	r3, [r7, #4]
 800e2e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e2e6:	f003 0308 	and.w	r3, r3, #8
 800e2ea:	2b00      	cmp	r3, #0
 800e2ec:	d00a      	beq.n	800e304 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800e2ee:	687b      	ldr	r3, [r7, #4]
 800e2f0:	681b      	ldr	r3, [r3, #0]
 800e2f2:	685b      	ldr	r3, [r3, #4]
 800e2f4:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800e2f8:	687b      	ldr	r3, [r7, #4]
 800e2fa:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800e2fc:	687b      	ldr	r3, [r7, #4]
 800e2fe:	681b      	ldr	r3, [r3, #0]
 800e300:	430a      	orrs	r2, r1
 800e302:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800e304:	687b      	ldr	r3, [r7, #4]
 800e306:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e308:	f003 0310 	and.w	r3, r3, #16
 800e30c:	2b00      	cmp	r3, #0
 800e30e:	d00a      	beq.n	800e326 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800e310:	687b      	ldr	r3, [r7, #4]
 800e312:	681b      	ldr	r3, [r3, #0]
 800e314:	689b      	ldr	r3, [r3, #8]
 800e316:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800e31a:	687b      	ldr	r3, [r7, #4]
 800e31c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800e31e:	687b      	ldr	r3, [r7, #4]
 800e320:	681b      	ldr	r3, [r3, #0]
 800e322:	430a      	orrs	r2, r1
 800e324:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800e326:	687b      	ldr	r3, [r7, #4]
 800e328:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e32a:	f003 0320 	and.w	r3, r3, #32
 800e32e:	2b00      	cmp	r3, #0
 800e330:	d00a      	beq.n	800e348 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800e332:	687b      	ldr	r3, [r7, #4]
 800e334:	681b      	ldr	r3, [r3, #0]
 800e336:	689b      	ldr	r3, [r3, #8]
 800e338:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800e33c:	687b      	ldr	r3, [r7, #4]
 800e33e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800e340:	687b      	ldr	r3, [r7, #4]
 800e342:	681b      	ldr	r3, [r3, #0]
 800e344:	430a      	orrs	r2, r1
 800e346:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800e348:	687b      	ldr	r3, [r7, #4]
 800e34a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e34c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e350:	2b00      	cmp	r3, #0
 800e352:	d01a      	beq.n	800e38a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800e354:	687b      	ldr	r3, [r7, #4]
 800e356:	681b      	ldr	r3, [r3, #0]
 800e358:	685b      	ldr	r3, [r3, #4]
 800e35a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800e35e:	687b      	ldr	r3, [r7, #4]
 800e360:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800e362:	687b      	ldr	r3, [r7, #4]
 800e364:	681b      	ldr	r3, [r3, #0]
 800e366:	430a      	orrs	r2, r1
 800e368:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800e36a:	687b      	ldr	r3, [r7, #4]
 800e36c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e36e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800e372:	d10a      	bne.n	800e38a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800e374:	687b      	ldr	r3, [r7, #4]
 800e376:	681b      	ldr	r3, [r3, #0]
 800e378:	685b      	ldr	r3, [r3, #4]
 800e37a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800e37e:	687b      	ldr	r3, [r7, #4]
 800e380:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800e382:	687b      	ldr	r3, [r7, #4]
 800e384:	681b      	ldr	r3, [r3, #0]
 800e386:	430a      	orrs	r2, r1
 800e388:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800e38a:	687b      	ldr	r3, [r7, #4]
 800e38c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e38e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800e392:	2b00      	cmp	r3, #0
 800e394:	d00a      	beq.n	800e3ac <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800e396:	687b      	ldr	r3, [r7, #4]
 800e398:	681b      	ldr	r3, [r3, #0]
 800e39a:	685b      	ldr	r3, [r3, #4]
 800e39c:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800e3a0:	687b      	ldr	r3, [r7, #4]
 800e3a2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800e3a4:	687b      	ldr	r3, [r7, #4]
 800e3a6:	681b      	ldr	r3, [r3, #0]
 800e3a8:	430a      	orrs	r2, r1
 800e3aa:	605a      	str	r2, [r3, #4]
  }
}
 800e3ac:	bf00      	nop
 800e3ae:	370c      	adds	r7, #12
 800e3b0:	46bd      	mov	sp, r7
 800e3b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e3b6:	4770      	bx	lr

0800e3b8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800e3b8:	b580      	push	{r7, lr}
 800e3ba:	b098      	sub	sp, #96	; 0x60
 800e3bc:	af02      	add	r7, sp, #8
 800e3be:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800e3c0:	687b      	ldr	r3, [r7, #4]
 800e3c2:	2200      	movs	r2, #0
 800e3c4:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800e3c8:	f7f9 faba 	bl	8007940 <HAL_GetTick>
 800e3cc:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800e3ce:	687b      	ldr	r3, [r7, #4]
 800e3d0:	681b      	ldr	r3, [r3, #0]
 800e3d2:	681b      	ldr	r3, [r3, #0]
 800e3d4:	f003 0308 	and.w	r3, r3, #8
 800e3d8:	2b08      	cmp	r3, #8
 800e3da:	d12f      	bne.n	800e43c <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800e3dc:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800e3e0:	9300      	str	r3, [sp, #0]
 800e3e2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800e3e4:	2200      	movs	r2, #0
 800e3e6:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800e3ea:	6878      	ldr	r0, [r7, #4]
 800e3ec:	f000 f88e 	bl	800e50c <UART_WaitOnFlagUntilTimeout>
 800e3f0:	4603      	mov	r3, r0
 800e3f2:	2b00      	cmp	r3, #0
 800e3f4:	d022      	beq.n	800e43c <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800e3f6:	687b      	ldr	r3, [r7, #4]
 800e3f8:	681b      	ldr	r3, [r3, #0]
 800e3fa:	63bb      	str	r3, [r7, #56]	; 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e3fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e3fe:	e853 3f00 	ldrex	r3, [r3]
 800e402:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800e404:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e406:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800e40a:	653b      	str	r3, [r7, #80]	; 0x50
 800e40c:	687b      	ldr	r3, [r7, #4]
 800e40e:	681b      	ldr	r3, [r3, #0]
 800e410:	461a      	mov	r2, r3
 800e412:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800e414:	647b      	str	r3, [r7, #68]	; 0x44
 800e416:	643a      	str	r2, [r7, #64]	; 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e418:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800e41a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800e41c:	e841 2300 	strex	r3, r2, [r1]
 800e420:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800e422:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e424:	2b00      	cmp	r3, #0
 800e426:	d1e6      	bne.n	800e3f6 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800e428:	687b      	ldr	r3, [r7, #4]
 800e42a:	2220      	movs	r2, #32
 800e42c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      __HAL_UNLOCK(huart);
 800e430:	687b      	ldr	r3, [r7, #4]
 800e432:	2200      	movs	r2, #0
 800e434:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800e438:	2303      	movs	r3, #3
 800e43a:	e063      	b.n	800e504 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800e43c:	687b      	ldr	r3, [r7, #4]
 800e43e:	681b      	ldr	r3, [r3, #0]
 800e440:	681b      	ldr	r3, [r3, #0]
 800e442:	f003 0304 	and.w	r3, r3, #4
 800e446:	2b04      	cmp	r3, #4
 800e448:	d149      	bne.n	800e4de <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800e44a:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800e44e:	9300      	str	r3, [sp, #0]
 800e450:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800e452:	2200      	movs	r2, #0
 800e454:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800e458:	6878      	ldr	r0, [r7, #4]
 800e45a:	f000 f857 	bl	800e50c <UART_WaitOnFlagUntilTimeout>
 800e45e:	4603      	mov	r3, r0
 800e460:	2b00      	cmp	r3, #0
 800e462:	d03c      	beq.n	800e4de <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800e464:	687b      	ldr	r3, [r7, #4]
 800e466:	681b      	ldr	r3, [r3, #0]
 800e468:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e46a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e46c:	e853 3f00 	ldrex	r3, [r3]
 800e470:	623b      	str	r3, [r7, #32]
   return(result);
 800e472:	6a3b      	ldr	r3, [r7, #32]
 800e474:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800e478:	64fb      	str	r3, [r7, #76]	; 0x4c
 800e47a:	687b      	ldr	r3, [r7, #4]
 800e47c:	681b      	ldr	r3, [r3, #0]
 800e47e:	461a      	mov	r2, r3
 800e480:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800e482:	633b      	str	r3, [r7, #48]	; 0x30
 800e484:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e486:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800e488:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800e48a:	e841 2300 	strex	r3, r2, [r1]
 800e48e:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800e490:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e492:	2b00      	cmp	r3, #0
 800e494:	d1e6      	bne.n	800e464 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800e496:	687b      	ldr	r3, [r7, #4]
 800e498:	681b      	ldr	r3, [r3, #0]
 800e49a:	3308      	adds	r3, #8
 800e49c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e49e:	693b      	ldr	r3, [r7, #16]
 800e4a0:	e853 3f00 	ldrex	r3, [r3]
 800e4a4:	60fb      	str	r3, [r7, #12]
   return(result);
 800e4a6:	68fb      	ldr	r3, [r7, #12]
 800e4a8:	f023 0301 	bic.w	r3, r3, #1
 800e4ac:	64bb      	str	r3, [r7, #72]	; 0x48
 800e4ae:	687b      	ldr	r3, [r7, #4]
 800e4b0:	681b      	ldr	r3, [r3, #0]
 800e4b2:	3308      	adds	r3, #8
 800e4b4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800e4b6:	61fa      	str	r2, [r7, #28]
 800e4b8:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e4ba:	69b9      	ldr	r1, [r7, #24]
 800e4bc:	69fa      	ldr	r2, [r7, #28]
 800e4be:	e841 2300 	strex	r3, r2, [r1]
 800e4c2:	617b      	str	r3, [r7, #20]
   return(result);
 800e4c4:	697b      	ldr	r3, [r7, #20]
 800e4c6:	2b00      	cmp	r3, #0
 800e4c8:	d1e5      	bne.n	800e496 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800e4ca:	687b      	ldr	r3, [r7, #4]
 800e4cc:	2220      	movs	r2, #32
 800e4ce:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 800e4d2:	687b      	ldr	r3, [r7, #4]
 800e4d4:	2200      	movs	r2, #0
 800e4d6:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800e4da:	2303      	movs	r3, #3
 800e4dc:	e012      	b.n	800e504 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800e4de:	687b      	ldr	r3, [r7, #4]
 800e4e0:	2220      	movs	r2, #32
 800e4e2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800e4e6:	687b      	ldr	r3, [r7, #4]
 800e4e8:	2220      	movs	r2, #32
 800e4ea:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800e4ee:	687b      	ldr	r3, [r7, #4]
 800e4f0:	2200      	movs	r2, #0
 800e4f2:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800e4f4:	687b      	ldr	r3, [r7, #4]
 800e4f6:	2200      	movs	r2, #0
 800e4f8:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 800e4fa:	687b      	ldr	r3, [r7, #4]
 800e4fc:	2200      	movs	r2, #0
 800e4fe:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800e502:	2300      	movs	r3, #0
}
 800e504:	4618      	mov	r0, r3
 800e506:	3758      	adds	r7, #88	; 0x58
 800e508:	46bd      	mov	sp, r7
 800e50a:	bd80      	pop	{r7, pc}

0800e50c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800e50c:	b580      	push	{r7, lr}
 800e50e:	b084      	sub	sp, #16
 800e510:	af00      	add	r7, sp, #0
 800e512:	60f8      	str	r0, [r7, #12]
 800e514:	60b9      	str	r1, [r7, #8]
 800e516:	603b      	str	r3, [r7, #0]
 800e518:	4613      	mov	r3, r2
 800e51a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800e51c:	e049      	b.n	800e5b2 <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800e51e:	69bb      	ldr	r3, [r7, #24]
 800e520:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e524:	d045      	beq.n	800e5b2 <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800e526:	f7f9 fa0b 	bl	8007940 <HAL_GetTick>
 800e52a:	4602      	mov	r2, r0
 800e52c:	683b      	ldr	r3, [r7, #0]
 800e52e:	1ad3      	subs	r3, r2, r3
 800e530:	69ba      	ldr	r2, [r7, #24]
 800e532:	429a      	cmp	r2, r3
 800e534:	d302      	bcc.n	800e53c <UART_WaitOnFlagUntilTimeout+0x30>
 800e536:	69bb      	ldr	r3, [r7, #24]
 800e538:	2b00      	cmp	r3, #0
 800e53a:	d101      	bne.n	800e540 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800e53c:	2303      	movs	r3, #3
 800e53e:	e048      	b.n	800e5d2 <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800e540:	68fb      	ldr	r3, [r7, #12]
 800e542:	681b      	ldr	r3, [r3, #0]
 800e544:	681b      	ldr	r3, [r3, #0]
 800e546:	f003 0304 	and.w	r3, r3, #4
 800e54a:	2b00      	cmp	r3, #0
 800e54c:	d031      	beq.n	800e5b2 <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800e54e:	68fb      	ldr	r3, [r7, #12]
 800e550:	681b      	ldr	r3, [r3, #0]
 800e552:	69db      	ldr	r3, [r3, #28]
 800e554:	f003 0308 	and.w	r3, r3, #8
 800e558:	2b08      	cmp	r3, #8
 800e55a:	d110      	bne.n	800e57e <UART_WaitOnFlagUntilTimeout+0x72>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800e55c:	68fb      	ldr	r3, [r7, #12]
 800e55e:	681b      	ldr	r3, [r3, #0]
 800e560:	2208      	movs	r2, #8
 800e562:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 800e564:	68f8      	ldr	r0, [r7, #12]
 800e566:	f000 f839 	bl	800e5dc <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 800e56a:	68fb      	ldr	r3, [r7, #12]
 800e56c:	2208      	movs	r2, #8
 800e56e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 800e572:	68fb      	ldr	r3, [r7, #12]
 800e574:	2200      	movs	r2, #0
 800e576:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

           return HAL_ERROR;
 800e57a:	2301      	movs	r3, #1
 800e57c:	e029      	b.n	800e5d2 <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800e57e:	68fb      	ldr	r3, [r7, #12]
 800e580:	681b      	ldr	r3, [r3, #0]
 800e582:	69db      	ldr	r3, [r3, #28]
 800e584:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800e588:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800e58c:	d111      	bne.n	800e5b2 <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800e58e:	68fb      	ldr	r3, [r7, #12]
 800e590:	681b      	ldr	r3, [r3, #0]
 800e592:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800e596:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800e598:	68f8      	ldr	r0, [r7, #12]
 800e59a:	f000 f81f 	bl	800e5dc <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800e59e:	68fb      	ldr	r3, [r7, #12]
 800e5a0:	2220      	movs	r2, #32
 800e5a2:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800e5a6:	68fb      	ldr	r3, [r7, #12]
 800e5a8:	2200      	movs	r2, #0
 800e5aa:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 800e5ae:	2303      	movs	r3, #3
 800e5b0:	e00f      	b.n	800e5d2 <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800e5b2:	68fb      	ldr	r3, [r7, #12]
 800e5b4:	681b      	ldr	r3, [r3, #0]
 800e5b6:	69da      	ldr	r2, [r3, #28]
 800e5b8:	68bb      	ldr	r3, [r7, #8]
 800e5ba:	4013      	ands	r3, r2
 800e5bc:	68ba      	ldr	r2, [r7, #8]
 800e5be:	429a      	cmp	r2, r3
 800e5c0:	bf0c      	ite	eq
 800e5c2:	2301      	moveq	r3, #1
 800e5c4:	2300      	movne	r3, #0
 800e5c6:	b2db      	uxtb	r3, r3
 800e5c8:	461a      	mov	r2, r3
 800e5ca:	79fb      	ldrb	r3, [r7, #7]
 800e5cc:	429a      	cmp	r2, r3
 800e5ce:	d0a6      	beq.n	800e51e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800e5d0:	2300      	movs	r3, #0
}
 800e5d2:	4618      	mov	r0, r3
 800e5d4:	3710      	adds	r7, #16
 800e5d6:	46bd      	mov	sp, r7
 800e5d8:	bd80      	pop	{r7, pc}
	...

0800e5dc <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800e5dc:	b480      	push	{r7}
 800e5de:	b095      	sub	sp, #84	; 0x54
 800e5e0:	af00      	add	r7, sp, #0
 800e5e2:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800e5e4:	687b      	ldr	r3, [r7, #4]
 800e5e6:	681b      	ldr	r3, [r3, #0]
 800e5e8:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e5ea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e5ec:	e853 3f00 	ldrex	r3, [r3]
 800e5f0:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800e5f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e5f4:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800e5f8:	64fb      	str	r3, [r7, #76]	; 0x4c
 800e5fa:	687b      	ldr	r3, [r7, #4]
 800e5fc:	681b      	ldr	r3, [r3, #0]
 800e5fe:	461a      	mov	r2, r3
 800e600:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800e602:	643b      	str	r3, [r7, #64]	; 0x40
 800e604:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e606:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800e608:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800e60a:	e841 2300 	strex	r3, r2, [r1]
 800e60e:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800e610:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e612:	2b00      	cmp	r3, #0
 800e614:	d1e6      	bne.n	800e5e4 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800e616:	687b      	ldr	r3, [r7, #4]
 800e618:	681b      	ldr	r3, [r3, #0]
 800e61a:	3308      	adds	r3, #8
 800e61c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e61e:	6a3b      	ldr	r3, [r7, #32]
 800e620:	e853 3f00 	ldrex	r3, [r3]
 800e624:	61fb      	str	r3, [r7, #28]
   return(result);
 800e626:	69fa      	ldr	r2, [r7, #28]
 800e628:	4b1e      	ldr	r3, [pc, #120]	; (800e6a4 <UART_EndRxTransfer+0xc8>)
 800e62a:	4013      	ands	r3, r2
 800e62c:	64bb      	str	r3, [r7, #72]	; 0x48
 800e62e:	687b      	ldr	r3, [r7, #4]
 800e630:	681b      	ldr	r3, [r3, #0]
 800e632:	3308      	adds	r3, #8
 800e634:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800e636:	62fa      	str	r2, [r7, #44]	; 0x2c
 800e638:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e63a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800e63c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800e63e:	e841 2300 	strex	r3, r2, [r1]
 800e642:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800e644:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e646:	2b00      	cmp	r3, #0
 800e648:	d1e5      	bne.n	800e616 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800e64a:	687b      	ldr	r3, [r7, #4]
 800e64c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800e64e:	2b01      	cmp	r3, #1
 800e650:	d118      	bne.n	800e684 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800e652:	687b      	ldr	r3, [r7, #4]
 800e654:	681b      	ldr	r3, [r3, #0]
 800e656:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e658:	68fb      	ldr	r3, [r7, #12]
 800e65a:	e853 3f00 	ldrex	r3, [r3]
 800e65e:	60bb      	str	r3, [r7, #8]
   return(result);
 800e660:	68bb      	ldr	r3, [r7, #8]
 800e662:	f023 0310 	bic.w	r3, r3, #16
 800e666:	647b      	str	r3, [r7, #68]	; 0x44
 800e668:	687b      	ldr	r3, [r7, #4]
 800e66a:	681b      	ldr	r3, [r3, #0]
 800e66c:	461a      	mov	r2, r3
 800e66e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800e670:	61bb      	str	r3, [r7, #24]
 800e672:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e674:	6979      	ldr	r1, [r7, #20]
 800e676:	69ba      	ldr	r2, [r7, #24]
 800e678:	e841 2300 	strex	r3, r2, [r1]
 800e67c:	613b      	str	r3, [r7, #16]
   return(result);
 800e67e:	693b      	ldr	r3, [r7, #16]
 800e680:	2b00      	cmp	r3, #0
 800e682:	d1e6      	bne.n	800e652 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800e684:	687b      	ldr	r3, [r7, #4]
 800e686:	2220      	movs	r2, #32
 800e688:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800e68c:	687b      	ldr	r3, [r7, #4]
 800e68e:	2200      	movs	r2, #0
 800e690:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800e692:	687b      	ldr	r3, [r7, #4]
 800e694:	2200      	movs	r2, #0
 800e696:	675a      	str	r2, [r3, #116]	; 0x74
}
 800e698:	bf00      	nop
 800e69a:	3754      	adds	r7, #84	; 0x54
 800e69c:	46bd      	mov	sp, r7
 800e69e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e6a2:	4770      	bx	lr
 800e6a4:	effffffe 	.word	0xeffffffe

0800e6a8 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800e6a8:	b480      	push	{r7}
 800e6aa:	b085      	sub	sp, #20
 800e6ac:	af00      	add	r7, sp, #0
 800e6ae:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800e6b0:	687b      	ldr	r3, [r7, #4]
 800e6b2:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800e6b6:	2b01      	cmp	r3, #1
 800e6b8:	d101      	bne.n	800e6be <HAL_UARTEx_DisableFifoMode+0x16>
 800e6ba:	2302      	movs	r3, #2
 800e6bc:	e027      	b.n	800e70e <HAL_UARTEx_DisableFifoMode+0x66>
 800e6be:	687b      	ldr	r3, [r7, #4]
 800e6c0:	2201      	movs	r2, #1
 800e6c2:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800e6c6:	687b      	ldr	r3, [r7, #4]
 800e6c8:	2224      	movs	r2, #36	; 0x24
 800e6ca:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800e6ce:	687b      	ldr	r3, [r7, #4]
 800e6d0:	681b      	ldr	r3, [r3, #0]
 800e6d2:	681b      	ldr	r3, [r3, #0]
 800e6d4:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800e6d6:	687b      	ldr	r3, [r7, #4]
 800e6d8:	681b      	ldr	r3, [r3, #0]
 800e6da:	681a      	ldr	r2, [r3, #0]
 800e6dc:	687b      	ldr	r3, [r7, #4]
 800e6de:	681b      	ldr	r3, [r3, #0]
 800e6e0:	f022 0201 	bic.w	r2, r2, #1
 800e6e4:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800e6e6:	68fb      	ldr	r3, [r7, #12]
 800e6e8:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800e6ec:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800e6ee:	687b      	ldr	r3, [r7, #4]
 800e6f0:	2200      	movs	r2, #0
 800e6f2:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800e6f4:	687b      	ldr	r3, [r7, #4]
 800e6f6:	681b      	ldr	r3, [r3, #0]
 800e6f8:	68fa      	ldr	r2, [r7, #12]
 800e6fa:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800e6fc:	687b      	ldr	r3, [r7, #4]
 800e6fe:	2220      	movs	r2, #32
 800e700:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800e704:	687b      	ldr	r3, [r7, #4]
 800e706:	2200      	movs	r2, #0
 800e708:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800e70c:	2300      	movs	r3, #0
}
 800e70e:	4618      	mov	r0, r3
 800e710:	3714      	adds	r7, #20
 800e712:	46bd      	mov	sp, r7
 800e714:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e718:	4770      	bx	lr

0800e71a <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800e71a:	b580      	push	{r7, lr}
 800e71c:	b084      	sub	sp, #16
 800e71e:	af00      	add	r7, sp, #0
 800e720:	6078      	str	r0, [r7, #4]
 800e722:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800e724:	687b      	ldr	r3, [r7, #4]
 800e726:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800e72a:	2b01      	cmp	r3, #1
 800e72c:	d101      	bne.n	800e732 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800e72e:	2302      	movs	r3, #2
 800e730:	e02d      	b.n	800e78e <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800e732:	687b      	ldr	r3, [r7, #4]
 800e734:	2201      	movs	r2, #1
 800e736:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800e73a:	687b      	ldr	r3, [r7, #4]
 800e73c:	2224      	movs	r2, #36	; 0x24
 800e73e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800e742:	687b      	ldr	r3, [r7, #4]
 800e744:	681b      	ldr	r3, [r3, #0]
 800e746:	681b      	ldr	r3, [r3, #0]
 800e748:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800e74a:	687b      	ldr	r3, [r7, #4]
 800e74c:	681b      	ldr	r3, [r3, #0]
 800e74e:	681a      	ldr	r2, [r3, #0]
 800e750:	687b      	ldr	r3, [r7, #4]
 800e752:	681b      	ldr	r3, [r3, #0]
 800e754:	f022 0201 	bic.w	r2, r2, #1
 800e758:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800e75a:	687b      	ldr	r3, [r7, #4]
 800e75c:	681b      	ldr	r3, [r3, #0]
 800e75e:	689b      	ldr	r3, [r3, #8]
 800e760:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 800e764:	687b      	ldr	r3, [r7, #4]
 800e766:	681b      	ldr	r3, [r3, #0]
 800e768:	683a      	ldr	r2, [r7, #0]
 800e76a:	430a      	orrs	r2, r1
 800e76c:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800e76e:	6878      	ldr	r0, [r7, #4]
 800e770:	f000 f850 	bl	800e814 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800e774:	687b      	ldr	r3, [r7, #4]
 800e776:	681b      	ldr	r3, [r3, #0]
 800e778:	68fa      	ldr	r2, [r7, #12]
 800e77a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800e77c:	687b      	ldr	r3, [r7, #4]
 800e77e:	2220      	movs	r2, #32
 800e780:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800e784:	687b      	ldr	r3, [r7, #4]
 800e786:	2200      	movs	r2, #0
 800e788:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800e78c:	2300      	movs	r3, #0
}
 800e78e:	4618      	mov	r0, r3
 800e790:	3710      	adds	r7, #16
 800e792:	46bd      	mov	sp, r7
 800e794:	bd80      	pop	{r7, pc}

0800e796 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800e796:	b580      	push	{r7, lr}
 800e798:	b084      	sub	sp, #16
 800e79a:	af00      	add	r7, sp, #0
 800e79c:	6078      	str	r0, [r7, #4]
 800e79e:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800e7a0:	687b      	ldr	r3, [r7, #4]
 800e7a2:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800e7a6:	2b01      	cmp	r3, #1
 800e7a8:	d101      	bne.n	800e7ae <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800e7aa:	2302      	movs	r3, #2
 800e7ac:	e02d      	b.n	800e80a <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800e7ae:	687b      	ldr	r3, [r7, #4]
 800e7b0:	2201      	movs	r2, #1
 800e7b2:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800e7b6:	687b      	ldr	r3, [r7, #4]
 800e7b8:	2224      	movs	r2, #36	; 0x24
 800e7ba:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800e7be:	687b      	ldr	r3, [r7, #4]
 800e7c0:	681b      	ldr	r3, [r3, #0]
 800e7c2:	681b      	ldr	r3, [r3, #0]
 800e7c4:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800e7c6:	687b      	ldr	r3, [r7, #4]
 800e7c8:	681b      	ldr	r3, [r3, #0]
 800e7ca:	681a      	ldr	r2, [r3, #0]
 800e7cc:	687b      	ldr	r3, [r7, #4]
 800e7ce:	681b      	ldr	r3, [r3, #0]
 800e7d0:	f022 0201 	bic.w	r2, r2, #1
 800e7d4:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800e7d6:	687b      	ldr	r3, [r7, #4]
 800e7d8:	681b      	ldr	r3, [r3, #0]
 800e7da:	689b      	ldr	r3, [r3, #8]
 800e7dc:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 800e7e0:	687b      	ldr	r3, [r7, #4]
 800e7e2:	681b      	ldr	r3, [r3, #0]
 800e7e4:	683a      	ldr	r2, [r7, #0]
 800e7e6:	430a      	orrs	r2, r1
 800e7e8:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800e7ea:	6878      	ldr	r0, [r7, #4]
 800e7ec:	f000 f812 	bl	800e814 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800e7f0:	687b      	ldr	r3, [r7, #4]
 800e7f2:	681b      	ldr	r3, [r3, #0]
 800e7f4:	68fa      	ldr	r2, [r7, #12]
 800e7f6:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800e7f8:	687b      	ldr	r3, [r7, #4]
 800e7fa:	2220      	movs	r2, #32
 800e7fc:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800e800:	687b      	ldr	r3, [r7, #4]
 800e802:	2200      	movs	r2, #0
 800e804:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800e808:	2300      	movs	r3, #0
}
 800e80a:	4618      	mov	r0, r3
 800e80c:	3710      	adds	r7, #16
 800e80e:	46bd      	mov	sp, r7
 800e810:	bd80      	pop	{r7, pc}
	...

0800e814 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800e814:	b480      	push	{r7}
 800e816:	b085      	sub	sp, #20
 800e818:	af00      	add	r7, sp, #0
 800e81a:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800e81c:	687b      	ldr	r3, [r7, #4]
 800e81e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800e820:	2b00      	cmp	r3, #0
 800e822:	d108      	bne.n	800e836 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800e824:	687b      	ldr	r3, [r7, #4]
 800e826:	2201      	movs	r2, #1
 800e828:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 800e82c:	687b      	ldr	r3, [r7, #4]
 800e82e:	2201      	movs	r2, #1
 800e830:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800e834:	e031      	b.n	800e89a <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800e836:	2310      	movs	r3, #16
 800e838:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800e83a:	2310      	movs	r3, #16
 800e83c:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800e83e:	687b      	ldr	r3, [r7, #4]
 800e840:	681b      	ldr	r3, [r3, #0]
 800e842:	689b      	ldr	r3, [r3, #8]
 800e844:	0e5b      	lsrs	r3, r3, #25
 800e846:	b2db      	uxtb	r3, r3
 800e848:	f003 0307 	and.w	r3, r3, #7
 800e84c:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800e84e:	687b      	ldr	r3, [r7, #4]
 800e850:	681b      	ldr	r3, [r3, #0]
 800e852:	689b      	ldr	r3, [r3, #8]
 800e854:	0f5b      	lsrs	r3, r3, #29
 800e856:	b2db      	uxtb	r3, r3
 800e858:	f003 0307 	and.w	r3, r3, #7
 800e85c:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800e85e:	7bbb      	ldrb	r3, [r7, #14]
 800e860:	7b3a      	ldrb	r2, [r7, #12]
 800e862:	4911      	ldr	r1, [pc, #68]	; (800e8a8 <UARTEx_SetNbDataToProcess+0x94>)
 800e864:	5c8a      	ldrb	r2, [r1, r2]
 800e866:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800e86a:	7b3a      	ldrb	r2, [r7, #12]
 800e86c:	490f      	ldr	r1, [pc, #60]	; (800e8ac <UARTEx_SetNbDataToProcess+0x98>)
 800e86e:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800e870:	fb93 f3f2 	sdiv	r3, r3, r2
 800e874:	b29a      	uxth	r2, r3
 800e876:	687b      	ldr	r3, [r7, #4]
 800e878:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800e87c:	7bfb      	ldrb	r3, [r7, #15]
 800e87e:	7b7a      	ldrb	r2, [r7, #13]
 800e880:	4909      	ldr	r1, [pc, #36]	; (800e8a8 <UARTEx_SetNbDataToProcess+0x94>)
 800e882:	5c8a      	ldrb	r2, [r1, r2]
 800e884:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800e888:	7b7a      	ldrb	r2, [r7, #13]
 800e88a:	4908      	ldr	r1, [pc, #32]	; (800e8ac <UARTEx_SetNbDataToProcess+0x98>)
 800e88c:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800e88e:	fb93 f3f2 	sdiv	r3, r3, r2
 800e892:	b29a      	uxth	r2, r3
 800e894:	687b      	ldr	r3, [r7, #4]
 800e896:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 800e89a:	bf00      	nop
 800e89c:	3714      	adds	r7, #20
 800e89e:	46bd      	mov	sp, r7
 800e8a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e8a4:	4770      	bx	lr
 800e8a6:	bf00      	nop
 800e8a8:	08010204 	.word	0x08010204
 800e8ac:	0801020c 	.word	0x0801020c

0800e8b0 <SDMMC_Init>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Init: SDMMC initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_Init(SDMMC_TypeDef *SDMMCx, SDMMC_InitTypeDef Init)
{
 800e8b0:	b084      	sub	sp, #16
 800e8b2:	b480      	push	{r7}
 800e8b4:	b085      	sub	sp, #20
 800e8b6:	af00      	add	r7, sp, #0
 800e8b8:	6078      	str	r0, [r7, #4]
 800e8ba:	f107 001c 	add.w	r0, r7, #28
 800e8be:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 800e8c2:	2300      	movs	r3, #0
 800e8c4:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(Init.ClockDiv));

  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           | \
 800e8c6:	69fa      	ldr	r2, [r7, #28]
             Init.ClockPowerSave      | \
 800e8c8:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           | \
 800e8ca:	431a      	orrs	r2, r3
             Init.BusWide             | \
 800e8cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
             Init.ClockPowerSave      | \
 800e8ce:	431a      	orrs	r2, r3
             Init.HardwareFlowControl | \
 800e8d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
             Init.BusWide             | \
 800e8d2:	431a      	orrs	r2, r3
             Init.ClockDiv
 800e8d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
             Init.HardwareFlowControl | \
 800e8d6:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           | \
 800e8d8:	68fa      	ldr	r2, [r7, #12]
 800e8da:	4313      	orrs	r3, r2
 800e8dc:	60fb      	str	r3, [r7, #12]
            );

  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDMMCx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);
 800e8de:	687b      	ldr	r3, [r7, #4]
 800e8e0:	685a      	ldr	r2, [r3, #4]
 800e8e2:	4b07      	ldr	r3, [pc, #28]	; (800e900 <SDMMC_Init+0x50>)
 800e8e4:	4013      	ands	r3, r2
 800e8e6:	68fa      	ldr	r2, [r7, #12]
 800e8e8:	431a      	orrs	r2, r3
 800e8ea:	687b      	ldr	r3, [r7, #4]
 800e8ec:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 800e8ee:	2300      	movs	r3, #0
}
 800e8f0:	4618      	mov	r0, r3
 800e8f2:	3714      	adds	r7, #20
 800e8f4:	46bd      	mov	sp, r7
 800e8f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e8fa:	b004      	add	sp, #16
 800e8fc:	4770      	bx	lr
 800e8fe:	bf00      	nop
 800e900:	ffc02c00 	.word	0xffc02c00

0800e904 <SDMMC_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling)
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_ReadFIFO(SDMMC_TypeDef *SDMMCx)
{
 800e904:	b480      	push	{r7}
 800e906:	b083      	sub	sp, #12
 800e908:	af00      	add	r7, sp, #0
 800e90a:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */
  return (SDMMCx->FIFO);
 800e90c:	687b      	ldr	r3, [r7, #4]
 800e90e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
}
 800e912:	4618      	mov	r0, r3
 800e914:	370c      	adds	r7, #12
 800e916:	46bd      	mov	sp, r7
 800e918:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e91c:	4770      	bx	lr

0800e91e <SDMMC_WriteFIFO>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  pWriteData: pointer to data to write
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_WriteFIFO(SDMMC_TypeDef *SDMMCx, uint32_t *pWriteData)
{
 800e91e:	b480      	push	{r7}
 800e920:	b083      	sub	sp, #12
 800e922:	af00      	add	r7, sp, #0
 800e924:	6078      	str	r0, [r7, #4]
 800e926:	6039      	str	r1, [r7, #0]
  /* Write data to FIFO */
  SDMMCx->FIFO = *pWriteData;
 800e928:	683b      	ldr	r3, [r7, #0]
 800e92a:	681a      	ldr	r2, [r3, #0]
 800e92c:	687b      	ldr	r3, [r7, #4]
 800e92e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800e932:	2300      	movs	r3, #0
}
 800e934:	4618      	mov	r0, r3
 800e936:	370c      	adds	r7, #12
 800e938:	46bd      	mov	sp, r7
 800e93a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e93e:	4770      	bx	lr

0800e940 <SDMMC_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_PowerState_ON(SDMMC_TypeDef *SDMMCx)
{
 800e940:	b480      	push	{r7}
 800e942:	b083      	sub	sp, #12
 800e944:	af00      	add	r7, sp, #0
 800e946:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */
  SDMMCx->POWER |= SDMMC_POWER_PWRCTRL;
 800e948:	687b      	ldr	r3, [r7, #4]
 800e94a:	681b      	ldr	r3, [r3, #0]
 800e94c:	f043 0203 	orr.w	r2, r3, #3
 800e950:	687b      	ldr	r3, [r7, #4]
 800e952:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 800e954:	2300      	movs	r3, #0
}
 800e956:	4618      	mov	r0, r3
 800e958:	370c      	adds	r7, #12
 800e95a:	46bd      	mov	sp, r7
 800e95c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e960:	4770      	bx	lr

0800e962 <SDMMC_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON
  */
uint32_t SDMMC_GetPowerState(SDMMC_TypeDef *SDMMCx)
{
 800e962:	b480      	push	{r7}
 800e964:	b083      	sub	sp, #12
 800e966:	af00      	add	r7, sp, #0
 800e968:	6078      	str	r0, [r7, #4]
  return (SDMMCx->POWER & SDMMC_POWER_PWRCTRL);
 800e96a:	687b      	ldr	r3, [r7, #4]
 800e96c:	681b      	ldr	r3, [r3, #0]
 800e96e:	f003 0303 	and.w	r3, r3, #3
}
 800e972:	4618      	mov	r0, r3
 800e974:	370c      	adds	r7, #12
 800e976:	46bd      	mov	sp, r7
 800e978:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e97c:	4770      	bx	lr
	...

0800e980 <SDMMC_SendCommand>:
  * @param  Command: pointer to a SDMMC_CmdInitTypeDef structure that contains
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_SendCommand(SDMMC_TypeDef *SDMMCx, SDMMC_CmdInitTypeDef *Command)
{
 800e980:	b480      	push	{r7}
 800e982:	b085      	sub	sp, #20
 800e984:	af00      	add	r7, sp, #0
 800e986:	6078      	str	r0, [r7, #4]
 800e988:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800e98a:	2300      	movs	r3, #0
 800e98c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_RESPONSE(Command->Response));
  assert_param(IS_SDMMC_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDMMC_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDMMCx->ARG = Command->Argument;
 800e98e:	683b      	ldr	r3, [r7, #0]
 800e990:	681a      	ldr	r2, [r3, #0]
 800e992:	687b      	ldr	r3, [r7, #4]
 800e994:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         | \
 800e996:	683b      	ldr	r3, [r7, #0]
 800e998:	685a      	ldr	r2, [r3, #4]
                       Command->Response         | \
 800e99a:	683b      	ldr	r3, [r7, #0]
 800e99c:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         | \
 800e99e:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt | \
 800e9a0:	683b      	ldr	r3, [r7, #0]
 800e9a2:	68db      	ldr	r3, [r3, #12]
                       Command->Response         | \
 800e9a4:	431a      	orrs	r2, r3
                       Command->CPSM);
 800e9a6:	683b      	ldr	r3, [r7, #0]
 800e9a8:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt | \
 800e9aa:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         | \
 800e9ac:	68fa      	ldr	r2, [r7, #12]
 800e9ae:	4313      	orrs	r3, r2
 800e9b0:	60fb      	str	r3, [r7, #12]

  /* Write to SDMMC CMD register */
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800e9b2:	687b      	ldr	r3, [r7, #4]
 800e9b4:	68da      	ldr	r2, [r3, #12]
 800e9b6:	4b06      	ldr	r3, [pc, #24]	; (800e9d0 <SDMMC_SendCommand+0x50>)
 800e9b8:	4013      	ands	r3, r2
 800e9ba:	68fa      	ldr	r2, [r7, #12]
 800e9bc:	431a      	orrs	r2, r3
 800e9be:	687b      	ldr	r3, [r7, #4]
 800e9c0:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800e9c2:	2300      	movs	r3, #0
}
 800e9c4:	4618      	mov	r0, r3
 800e9c6:	3714      	adds	r7, #20
 800e9c8:	46bd      	mov	sp, r7
 800e9ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e9ce:	4770      	bx	lr
 800e9d0:	fffee0c0 	.word	0xfffee0c0

0800e9d4 <SDMMC_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDMMC_GetCommandResponse(SDMMC_TypeDef *SDMMCx)
{
 800e9d4:	b480      	push	{r7}
 800e9d6:	b083      	sub	sp, #12
 800e9d8:	af00      	add	r7, sp, #0
 800e9da:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDMMCx->RESPCMD);
 800e9dc:	687b      	ldr	r3, [r7, #4]
 800e9de:	691b      	ldr	r3, [r3, #16]
 800e9e0:	b2db      	uxtb	r3, r3
}
 800e9e2:	4618      	mov	r0, r3
 800e9e4:	370c      	adds	r7, #12
 800e9e6:	46bd      	mov	sp, r7
 800e9e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e9ec:	4770      	bx	lr

0800e9ee <SDMMC_GetResponse>:
  *            @arg SDMMC_RESP3: Response Register 3
  *            @arg SDMMC_RESP4: Response Register 4
  * @retval The Corresponding response register value
  */
uint32_t SDMMC_GetResponse(SDMMC_TypeDef *SDMMCx, uint32_t Response)
{
 800e9ee:	b480      	push	{r7}
 800e9f0:	b085      	sub	sp, #20
 800e9f2:	af00      	add	r7, sp, #0
 800e9f4:	6078      	str	r0, [r7, #4]
 800e9f6:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDMMC_RESP(Response));

  /* Get the response */
  tmp = (uint32_t)(&(SDMMCx->RESP1)) + Response;
 800e9f8:	687b      	ldr	r3, [r7, #4]
 800e9fa:	3314      	adds	r3, #20
 800e9fc:	461a      	mov	r2, r3
 800e9fe:	683b      	ldr	r3, [r7, #0]
 800ea00:	4413      	add	r3, r2
 800ea02:	60fb      	str	r3, [r7, #12]

  return (*(__IO uint32_t *) tmp);
 800ea04:	68fb      	ldr	r3, [r7, #12]
 800ea06:	681b      	ldr	r3, [r3, #0]
}
 800ea08:	4618      	mov	r0, r3
 800ea0a:	3714      	adds	r7, #20
 800ea0c:	46bd      	mov	sp, r7
 800ea0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ea12:	4770      	bx	lr

0800ea14 <SDMMC_ConfigData>:
  * @param  Data : pointer to a SDMMC_DataInitTypeDef structure
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_ConfigData(SDMMC_TypeDef *SDMMCx, SDMMC_DataInitTypeDef *Data)
{
 800ea14:	b480      	push	{r7}
 800ea16:	b085      	sub	sp, #20
 800ea18:	af00      	add	r7, sp, #0
 800ea1a:	6078      	str	r0, [r7, #4]
 800ea1c:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800ea1e:	2300      	movs	r3, #0
 800ea20:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDMMC_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDMMC_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDMMCx->DTIMER = Data->DataTimeOut;
 800ea22:	683b      	ldr	r3, [r7, #0]
 800ea24:	681a      	ldr	r2, [r3, #0]
 800ea26:	687b      	ldr	r3, [r7, #4]
 800ea28:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set the SDMMC DataLength value */
  SDMMCx->DLEN = Data->DataLength;
 800ea2a:	683b      	ldr	r3, [r7, #0]
 800ea2c:	685a      	ldr	r2, [r3, #4]
 800ea2e:	687b      	ldr	r3, [r7, #4]
 800ea30:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize | \
 800ea32:	683b      	ldr	r3, [r7, #0]
 800ea34:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   | \
 800ea36:	683b      	ldr	r3, [r7, #0]
 800ea38:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize | \
 800ea3a:	431a      	orrs	r2, r3
                       Data->TransferMode  | \
 800ea3c:	683b      	ldr	r3, [r7, #0]
 800ea3e:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   | \
 800ea40:	431a      	orrs	r2, r3
                       Data->DPSM);
 800ea42:	683b      	ldr	r3, [r7, #0]
 800ea44:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  | \
 800ea46:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize | \
 800ea48:	68fa      	ldr	r2, [r7, #12]
 800ea4a:	4313      	orrs	r3, r2
 800ea4c:	60fb      	str	r3, [r7, #12]

  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDMMCx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 800ea4e:	687b      	ldr	r3, [r7, #4]
 800ea50:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ea52:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800ea56:	68fb      	ldr	r3, [r7, #12]
 800ea58:	431a      	orrs	r2, r3
 800ea5a:	687b      	ldr	r3, [r7, #4]
 800ea5c:	62da      	str	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 800ea5e:	2300      	movs	r3, #0

}
 800ea60:	4618      	mov	r0, r3
 800ea62:	3714      	adds	r7, #20
 800ea64:	46bd      	mov	sp, r7
 800ea66:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ea6a:	4770      	bx	lr

0800ea6c <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Length command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDMMC_TypeDef *SDMMCx, uint32_t BlockSize)
{
 800ea6c:	b580      	push	{r7, lr}
 800ea6e:	b088      	sub	sp, #32
 800ea70:	af00      	add	r7, sp, #0
 800ea72:	6078      	str	r0, [r7, #4]
 800ea74:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 800ea76:	683b      	ldr	r3, [r7, #0]
 800ea78:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 800ea7a:	2310      	movs	r3, #16
 800ea7c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800ea7e:	f44f 7380 	mov.w	r3, #256	; 0x100
 800ea82:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800ea84:	2300      	movs	r3, #0
 800ea86:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800ea88:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800ea8c:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800ea8e:	f107 0308 	add.w	r3, r7, #8
 800ea92:	4619      	mov	r1, r3
 800ea94:	6878      	ldr	r0, [r7, #4]
 800ea96:	f7ff ff73 	bl	800e980 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SET_BLOCKLEN, SDMMC_CMDTIMEOUT);
 800ea9a:	f241 3288 	movw	r2, #5000	; 0x1388
 800ea9e:	2110      	movs	r1, #16
 800eaa0:	6878      	ldr	r0, [r7, #4]
 800eaa2:	f000 fa5f 	bl	800ef64 <SDMMC_GetCmdResp1>
 800eaa6:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800eaa8:	69fb      	ldr	r3, [r7, #28]
}
 800eaaa:	4618      	mov	r0, r3
 800eaac:	3720      	adds	r7, #32
 800eaae:	46bd      	mov	sp, r7
 800eab0:	bd80      	pop	{r7, pc}

0800eab2 <SDMMC_CmdReadSingleBlock>:
  * @brief  Send the Read Single Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 800eab2:	b580      	push	{r7, lr}
 800eab4:	b088      	sub	sp, #32
 800eab6:	af00      	add	r7, sp, #0
 800eab8:	6078      	str	r0, [r7, #4]
 800eaba:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 800eabc:	683b      	ldr	r3, [r7, #0]
 800eabe:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 800eac0:	2311      	movs	r3, #17
 800eac2:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800eac4:	f44f 7380 	mov.w	r3, #256	; 0x100
 800eac8:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800eaca:	2300      	movs	r3, #0
 800eacc:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800eace:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800ead2:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800ead4:	f107 0308 	add.w	r3, r7, #8
 800ead8:	4619      	mov	r1, r3
 800eada:	6878      	ldr	r0, [r7, #4]
 800eadc:	f7ff ff50 	bl	800e980 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 800eae0:	f241 3288 	movw	r2, #5000	; 0x1388
 800eae4:	2111      	movs	r1, #17
 800eae6:	6878      	ldr	r0, [r7, #4]
 800eae8:	f000 fa3c 	bl	800ef64 <SDMMC_GetCmdResp1>
 800eaec:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800eaee:	69fb      	ldr	r3, [r7, #28]
}
 800eaf0:	4618      	mov	r0, r3
 800eaf2:	3720      	adds	r7, #32
 800eaf4:	46bd      	mov	sp, r7
 800eaf6:	bd80      	pop	{r7, pc}

0800eaf8 <SDMMC_CmdReadMultiBlock>:
  * @brief  Send the Read Multi Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 800eaf8:	b580      	push	{r7, lr}
 800eafa:	b088      	sub	sp, #32
 800eafc:	af00      	add	r7, sp, #0
 800eafe:	6078      	str	r0, [r7, #4]
 800eb00:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 800eb02:	683b      	ldr	r3, [r7, #0]
 800eb04:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 800eb06:	2312      	movs	r3, #18
 800eb08:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800eb0a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800eb0e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800eb10:	2300      	movs	r3, #0
 800eb12:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800eb14:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800eb18:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800eb1a:	f107 0308 	add.w	r3, r7, #8
 800eb1e:	4619      	mov	r1, r3
 800eb20:	6878      	ldr	r0, [r7, #4]
 800eb22:	f7ff ff2d 	bl	800e980 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 800eb26:	f241 3288 	movw	r2, #5000	; 0x1388
 800eb2a:	2112      	movs	r1, #18
 800eb2c:	6878      	ldr	r0, [r7, #4]
 800eb2e:	f000 fa19 	bl	800ef64 <SDMMC_GetCmdResp1>
 800eb32:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800eb34:	69fb      	ldr	r3, [r7, #28]
}
 800eb36:	4618      	mov	r0, r3
 800eb38:	3720      	adds	r7, #32
 800eb3a:	46bd      	mov	sp, r7
 800eb3c:	bd80      	pop	{r7, pc}

0800eb3e <SDMMC_CmdWriteSingleBlock>:
  * @brief  Send the Write Single Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 800eb3e:	b580      	push	{r7, lr}
 800eb40:	b088      	sub	sp, #32
 800eb42:	af00      	add	r7, sp, #0
 800eb44:	6078      	str	r0, [r7, #4]
 800eb46:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 800eb48:	683b      	ldr	r3, [r7, #0]
 800eb4a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 800eb4c:	2318      	movs	r3, #24
 800eb4e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800eb50:	f44f 7380 	mov.w	r3, #256	; 0x100
 800eb54:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800eb56:	2300      	movs	r3, #0
 800eb58:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800eb5a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800eb5e:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800eb60:	f107 0308 	add.w	r3, r7, #8
 800eb64:	4619      	mov	r1, r3
 800eb66:	6878      	ldr	r0, [r7, #4]
 800eb68:	f7ff ff0a 	bl	800e980 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 800eb6c:	f241 3288 	movw	r2, #5000	; 0x1388
 800eb70:	2118      	movs	r1, #24
 800eb72:	6878      	ldr	r0, [r7, #4]
 800eb74:	f000 f9f6 	bl	800ef64 <SDMMC_GetCmdResp1>
 800eb78:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800eb7a:	69fb      	ldr	r3, [r7, #28]
}
 800eb7c:	4618      	mov	r0, r3
 800eb7e:	3720      	adds	r7, #32
 800eb80:	46bd      	mov	sp, r7
 800eb82:	bd80      	pop	{r7, pc}

0800eb84 <SDMMC_CmdWriteMultiBlock>:
  * @brief  Send the Write Multi Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 800eb84:	b580      	push	{r7, lr}
 800eb86:	b088      	sub	sp, #32
 800eb88:	af00      	add	r7, sp, #0
 800eb8a:	6078      	str	r0, [r7, #4]
 800eb8c:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 800eb8e:	683b      	ldr	r3, [r7, #0]
 800eb90:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 800eb92:	2319      	movs	r3, #25
 800eb94:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800eb96:	f44f 7380 	mov.w	r3, #256	; 0x100
 800eb9a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800eb9c:	2300      	movs	r3, #0
 800eb9e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800eba0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800eba4:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800eba6:	f107 0308 	add.w	r3, r7, #8
 800ebaa:	4619      	mov	r1, r3
 800ebac:	6878      	ldr	r0, [r7, #4]
 800ebae:	f7ff fee7 	bl	800e980 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 800ebb2:	f241 3288 	movw	r2, #5000	; 0x1388
 800ebb6:	2119      	movs	r1, #25
 800ebb8:	6878      	ldr	r0, [r7, #4]
 800ebba:	f000 f9d3 	bl	800ef64 <SDMMC_GetCmdResp1>
 800ebbe:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800ebc0:	69fb      	ldr	r3, [r7, #28]
}
 800ebc2:	4618      	mov	r0, r3
 800ebc4:	3720      	adds	r7, #32
 800ebc6:	46bd      	mov	sp, r7
 800ebc8:	bd80      	pop	{r7, pc}
	...

0800ebcc <SDMMC_CmdStopTransfer>:
  * @brief  Send the Stop Transfer command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdStopTransfer(SDMMC_TypeDef *SDMMCx)
{
 800ebcc:	b580      	push	{r7, lr}
 800ebce:	b088      	sub	sp, #32
 800ebd0:	af00      	add	r7, sp, #0
 800ebd2:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD12 STOP_TRANSMISSION  */
  sdmmc_cmdinit.Argument         = 0U;
 800ebd4:	2300      	movs	r3, #0
 800ebd6:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 800ebd8:	230c      	movs	r3, #12
 800ebda:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800ebdc:	f44f 7380 	mov.w	r3, #256	; 0x100
 800ebe0:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800ebe2:	2300      	movs	r3, #0
 800ebe4:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800ebe6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800ebea:	61bb      	str	r3, [r7, #24]

  __SDMMC_CMDSTOP_ENABLE(SDMMCx);
 800ebec:	687b      	ldr	r3, [r7, #4]
 800ebee:	68db      	ldr	r3, [r3, #12]
 800ebf0:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800ebf4:	687b      	ldr	r3, [r7, #4]
 800ebf6:	60da      	str	r2, [r3, #12]
  __SDMMC_CMDTRANS_DISABLE(SDMMCx);
 800ebf8:	687b      	ldr	r3, [r7, #4]
 800ebfa:	68db      	ldr	r3, [r3, #12]
 800ebfc:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 800ec00:	687b      	ldr	r3, [r7, #4]
 800ec02:	60da      	str	r2, [r3, #12]

  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800ec04:	f107 0308 	add.w	r3, r7, #8
 800ec08:	4619      	mov	r1, r3
 800ec0a:	6878      	ldr	r0, [r7, #4]
 800ec0c:	f7ff feb8 	bl	800e980 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_STOP_TRANSMISSION, SDMMC_STOPTRANSFERTIMEOUT);
 800ec10:	4a0b      	ldr	r2, [pc, #44]	; (800ec40 <SDMMC_CmdStopTransfer+0x74>)
 800ec12:	210c      	movs	r1, #12
 800ec14:	6878      	ldr	r0, [r7, #4]
 800ec16:	f000 f9a5 	bl	800ef64 <SDMMC_GetCmdResp1>
 800ec1a:	61f8      	str	r0, [r7, #28]

  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 800ec1c:	687b      	ldr	r3, [r7, #4]
 800ec1e:	68db      	ldr	r3, [r3, #12]
 800ec20:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800ec24:	687b      	ldr	r3, [r7, #4]
 800ec26:	60da      	str	r2, [r3, #12]

  /* Ignore Address Out Of Range Error, Not relevant at end of memory */
  if (errorstate == SDMMC_ERROR_ADDR_OUT_OF_RANGE)
 800ec28:	69fb      	ldr	r3, [r7, #28]
 800ec2a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800ec2e:	d101      	bne.n	800ec34 <SDMMC_CmdStopTransfer+0x68>
  {
    errorstate = SDMMC_ERROR_NONE;
 800ec30:	2300      	movs	r3, #0
 800ec32:	61fb      	str	r3, [r7, #28]
  }

  return errorstate;
 800ec34:	69fb      	ldr	r3, [r7, #28]
}
 800ec36:	4618      	mov	r0, r3
 800ec38:	3720      	adds	r7, #32
 800ec3a:	46bd      	mov	sp, r7
 800ec3c:	bd80      	pop	{r7, pc}
 800ec3e:	bf00      	nop
 800ec40:	05f5e100 	.word	0x05f5e100

0800ec44 <SDMMC_CmdSelDesel>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  addr: Address of the card to be selected
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDMMC_TypeDef *SDMMCx, uint32_t Addr)
{
 800ec44:	b580      	push	{r7, lr}
 800ec46:	b088      	sub	sp, #32
 800ec48:	af00      	add	r7, sp, #0
 800ec4a:	6078      	str	r0, [r7, #4]
 800ec4c:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 800ec4e:	683b      	ldr	r3, [r7, #0]
 800ec50:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 800ec52:	2307      	movs	r3, #7
 800ec54:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800ec56:	f44f 7380 	mov.w	r3, #256	; 0x100
 800ec5a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800ec5c:	2300      	movs	r3, #0
 800ec5e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800ec60:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800ec64:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800ec66:	f107 0308 	add.w	r3, r7, #8
 800ec6a:	4619      	mov	r1, r3
 800ec6c:	6878      	ldr	r0, [r7, #4]
 800ec6e:	f7ff fe87 	bl	800e980 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEL_DESEL_CARD, SDMMC_CMDTIMEOUT);
 800ec72:	f241 3288 	movw	r2, #5000	; 0x1388
 800ec76:	2107      	movs	r1, #7
 800ec78:	6878      	ldr	r0, [r7, #4]
 800ec7a:	f000 f973 	bl	800ef64 <SDMMC_GetCmdResp1>
 800ec7e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800ec80:	69fb      	ldr	r3, [r7, #28]
}
 800ec82:	4618      	mov	r0, r3
 800ec84:	3720      	adds	r7, #32
 800ec86:	46bd      	mov	sp, r7
 800ec88:	bd80      	pop	{r7, pc}

0800ec8a <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDMMC_TypeDef *SDMMCx)
{
 800ec8a:	b580      	push	{r7, lr}
 800ec8c:	b088      	sub	sp, #32
 800ec8e:	af00      	add	r7, sp, #0
 800ec90:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = 0U;
 800ec92:	2300      	movs	r3, #0
 800ec94:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 800ec96:	2300      	movs	r3, #0
 800ec98:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_NO;
 800ec9a:	2300      	movs	r3, #0
 800ec9c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800ec9e:	2300      	movs	r3, #0
 800eca0:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800eca2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800eca6:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800eca8:	f107 0308 	add.w	r3, r7, #8
 800ecac:	4619      	mov	r1, r3
 800ecae:	6878      	ldr	r0, [r7, #4]
 800ecb0:	f7ff fe66 	bl	800e980 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDMMCx);
 800ecb4:	6878      	ldr	r0, [r7, #4]
 800ecb6:	f000 fb97 	bl	800f3e8 <SDMMC_GetCmdError>
 800ecba:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800ecbc:	69fb      	ldr	r3, [r7, #28]
}
 800ecbe:	4618      	mov	r0, r3
 800ecc0:	3720      	adds	r7, #32
 800ecc2:	46bd      	mov	sp, r7
 800ecc4:	bd80      	pop	{r7, pc}

0800ecc6 <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDMMC_TypeDef *SDMMCx)
{
 800ecc6:	b580      	push	{r7, lr}
 800ecc8:	b088      	sub	sp, #32
 800ecca:	af00      	add	r7, sp, #0
 800eccc:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 800ecce:	f44f 73d5 	mov.w	r3, #426	; 0x1aa
 800ecd2:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 800ecd4:	2308      	movs	r3, #8
 800ecd6:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800ecd8:	f44f 7380 	mov.w	r3, #256	; 0x100
 800ecdc:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800ecde:	2300      	movs	r3, #0
 800ece0:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800ece2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800ece6:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800ece8:	f107 0308 	add.w	r3, r7, #8
 800ecec:	4619      	mov	r1, r3
 800ecee:	6878      	ldr	r0, [r7, #4]
 800ecf0:	f7ff fe46 	bl	800e980 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDMMCx);
 800ecf4:	6878      	ldr	r0, [r7, #4]
 800ecf6:	f000 fb29 	bl	800f34c <SDMMC_GetCmdResp7>
 800ecfa:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800ecfc:	69fb      	ldr	r3, [r7, #28]
}
 800ecfe:	4618      	mov	r0, r3
 800ed00:	3720      	adds	r7, #32
 800ed02:	46bd      	mov	sp, r7
 800ed04:	bd80      	pop	{r7, pc}

0800ed06 <SDMMC_CmdAppCommand>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800ed06:	b580      	push	{r7, lr}
 800ed08:	b088      	sub	sp, #32
 800ed0a:	af00      	add	r7, sp, #0
 800ed0c:	6078      	str	r0, [r7, #4]
 800ed0e:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 800ed10:	683b      	ldr	r3, [r7, #0]
 800ed12:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 800ed14:	2337      	movs	r3, #55	; 0x37
 800ed16:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800ed18:	f44f 7380 	mov.w	r3, #256	; 0x100
 800ed1c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800ed1e:	2300      	movs	r3, #0
 800ed20:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800ed22:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800ed26:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800ed28:	f107 0308 	add.w	r3, r7, #8
 800ed2c:	4619      	mov	r1, r3
 800ed2e:	6878      	ldr	r0, [r7, #4]
 800ed30:	f7ff fe26 	bl	800e980 <SDMMC_SendCommand>

  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_CMD, SDMMC_CMDTIMEOUT);
 800ed34:	f241 3288 	movw	r2, #5000	; 0x1388
 800ed38:	2137      	movs	r1, #55	; 0x37
 800ed3a:	6878      	ldr	r0, [r7, #4]
 800ed3c:	f000 f912 	bl	800ef64 <SDMMC_GetCmdResp1>
 800ed40:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800ed42:	69fb      	ldr	r3, [r7, #28]
}
 800ed44:	4618      	mov	r0, r3
 800ed46:	3720      	adds	r7, #32
 800ed48:	46bd      	mov	sp, r7
 800ed4a:	bd80      	pop	{r7, pc}

0800ed4c <SDMMC_CmdAppOperCommand>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800ed4c:	b580      	push	{r7, lr}
 800ed4e:	b088      	sub	sp, #32
 800ed50:	af00      	add	r7, sp, #0
 800ed52:	6078      	str	r0, [r7, #4]
 800ed54:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = Argument;
 800ed56:	683b      	ldr	r3, [r7, #0]
 800ed58:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 800ed5a:	2329      	movs	r3, #41	; 0x29
 800ed5c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800ed5e:	f44f 7380 	mov.w	r3, #256	; 0x100
 800ed62:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800ed64:	2300      	movs	r3, #0
 800ed66:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800ed68:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800ed6c:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800ed6e:	f107 0308 	add.w	r3, r7, #8
 800ed72:	4619      	mov	r1, r3
 800ed74:	6878      	ldr	r0, [r7, #4]
 800ed76:	f7ff fe03 	bl	800e980 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDMMCx);
 800ed7a:	6878      	ldr	r0, [r7, #4]
 800ed7c:	f000 fa2e 	bl	800f1dc <SDMMC_GetCmdResp3>
 800ed80:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800ed82:	69fb      	ldr	r3, [r7, #28]
}
 800ed84:	4618      	mov	r0, r3
 800ed86:	3720      	adds	r7, #32
 800ed88:	46bd      	mov	sp, r7
 800ed8a:	bd80      	pop	{r7, pc}

0800ed8c <SDMMC_CmdBusWidth>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  BusWidth: BusWidth
  * @retval HAL status
  */
uint32_t SDMMC_CmdBusWidth(SDMMC_TypeDef *SDMMCx, uint32_t BusWidth)
{
 800ed8c:	b580      	push	{r7, lr}
 800ed8e:	b088      	sub	sp, #32
 800ed90:	af00      	add	r7, sp, #0
 800ed92:	6078      	str	r0, [r7, #4]
 800ed94:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = (uint32_t)BusWidth;
 800ed96:	683b      	ldr	r3, [r7, #0]
 800ed98:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_SD_SET_BUSWIDTH;
 800ed9a:	2306      	movs	r3, #6
 800ed9c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800ed9e:	f44f 7380 	mov.w	r3, #256	; 0x100
 800eda2:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800eda4:	2300      	movs	r3, #0
 800eda6:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800eda8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800edac:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800edae:	f107 0308 	add.w	r3, r7, #8
 800edb2:	4619      	mov	r1, r3
 800edb4:	6878      	ldr	r0, [r7, #4]
 800edb6:	f7ff fde3 	bl	800e980 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_SD_SET_BUSWIDTH, SDMMC_CMDTIMEOUT);
 800edba:	f241 3288 	movw	r2, #5000	; 0x1388
 800edbe:	2106      	movs	r1, #6
 800edc0:	6878      	ldr	r0, [r7, #4]
 800edc2:	f000 f8cf 	bl	800ef64 <SDMMC_GetCmdResp1>
 800edc6:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800edc8:	69fb      	ldr	r3, [r7, #28]
}
 800edca:	4618      	mov	r0, r3
 800edcc:	3720      	adds	r7, #32
 800edce:	46bd      	mov	sp, r7
 800edd0:	bd80      	pop	{r7, pc}

0800edd2 <SDMMC_CmdSendSCR>:
  * @brief  Send the Send SCR command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendSCR(SDMMC_TypeDef *SDMMCx)
{
 800edd2:	b580      	push	{r7, lr}
 800edd4:	b088      	sub	sp, #32
 800edd6:	af00      	add	r7, sp, #0
 800edd8:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD51 SD_APP_SEND_SCR */
  sdmmc_cmdinit.Argument         = 0U;
 800edda:	2300      	movs	r3, #0
 800eddc:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_SEND_SCR;
 800edde:	2333      	movs	r3, #51	; 0x33
 800ede0:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800ede2:	f44f 7380 	mov.w	r3, #256	; 0x100
 800ede6:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800ede8:	2300      	movs	r3, #0
 800edea:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800edec:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800edf0:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800edf2:	f107 0308 	add.w	r3, r7, #8
 800edf6:	4619      	mov	r1, r3
 800edf8:	6878      	ldr	r0, [r7, #4]
 800edfa:	f7ff fdc1 	bl	800e980 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SD_APP_SEND_SCR, SDMMC_CMDTIMEOUT);
 800edfe:	f241 3288 	movw	r2, #5000	; 0x1388
 800ee02:	2133      	movs	r1, #51	; 0x33
 800ee04:	6878      	ldr	r0, [r7, #4]
 800ee06:	f000 f8ad 	bl	800ef64 <SDMMC_GetCmdResp1>
 800ee0a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800ee0c:	69fb      	ldr	r3, [r7, #28]
}
 800ee0e:	4618      	mov	r0, r3
 800ee10:	3720      	adds	r7, #32
 800ee12:	46bd      	mov	sp, r7
 800ee14:	bd80      	pop	{r7, pc}

0800ee16 <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDMMC_TypeDef *SDMMCx)
{
 800ee16:	b580      	push	{r7, lr}
 800ee18:	b088      	sub	sp, #32
 800ee1a:	af00      	add	r7, sp, #0
 800ee1c:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 800ee1e:	2300      	movs	r3, #0
 800ee20:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 800ee22:	2302      	movs	r3, #2
 800ee24:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 800ee26:	f44f 7340 	mov.w	r3, #768	; 0x300
 800ee2a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800ee2c:	2300      	movs	r3, #0
 800ee2e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800ee30:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800ee34:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800ee36:	f107 0308 	add.w	r3, r7, #8
 800ee3a:	4619      	mov	r1, r3
 800ee3c:	6878      	ldr	r0, [r7, #4]
 800ee3e:	f7ff fd9f 	bl	800e980 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 800ee42:	6878      	ldr	r0, [r7, #4]
 800ee44:	f000 f980 	bl	800f148 <SDMMC_GetCmdResp2>
 800ee48:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800ee4a:	69fb      	ldr	r3, [r7, #28]
}
 800ee4c:	4618      	mov	r0, r3
 800ee4e:	3720      	adds	r7, #32
 800ee50:	46bd      	mov	sp, r7
 800ee52:	bd80      	pop	{r7, pc}

0800ee54 <SDMMC_CmdSendCSD>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800ee54:	b580      	push	{r7, lr}
 800ee56:	b088      	sub	sp, #32
 800ee58:	af00      	add	r7, sp, #0
 800ee5a:	6078      	str	r0, [r7, #4]
 800ee5c:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 800ee5e:	683b      	ldr	r3, [r7, #0]
 800ee60:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 800ee62:	2309      	movs	r3, #9
 800ee64:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 800ee66:	f44f 7340 	mov.w	r3, #768	; 0x300
 800ee6a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800ee6c:	2300      	movs	r3, #0
 800ee6e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800ee70:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800ee74:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800ee76:	f107 0308 	add.w	r3, r7, #8
 800ee7a:	4619      	mov	r1, r3
 800ee7c:	6878      	ldr	r0, [r7, #4]
 800ee7e:	f7ff fd7f 	bl	800e980 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 800ee82:	6878      	ldr	r0, [r7, #4]
 800ee84:	f000 f960 	bl	800f148 <SDMMC_GetCmdResp2>
 800ee88:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800ee8a:	69fb      	ldr	r3, [r7, #28]
}
 800ee8c:	4618      	mov	r0, r3
 800ee8e:	3720      	adds	r7, #32
 800ee90:	46bd      	mov	sp, r7
 800ee92:	bd80      	pop	{r7, pc}

0800ee94 <SDMMC_CmdSetRelAdd>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  pRCA: Card RCA
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDMMC_TypeDef *SDMMCx, uint16_t *pRCA)
{
 800ee94:	b580      	push	{r7, lr}
 800ee96:	b088      	sub	sp, #32
 800ee98:	af00      	add	r7, sp, #0
 800ee9a:	6078      	str	r0, [r7, #4]
 800ee9c:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 800ee9e:	2300      	movs	r3, #0
 800eea0:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 800eea2:	2303      	movs	r3, #3
 800eea4:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800eea6:	f44f 7380 	mov.w	r3, #256	; 0x100
 800eeaa:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800eeac:	2300      	movs	r3, #0
 800eeae:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800eeb0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800eeb4:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800eeb6:	f107 0308 	add.w	r3, r7, #8
 800eeba:	4619      	mov	r1, r3
 800eebc:	6878      	ldr	r0, [r7, #4]
 800eebe:	f7ff fd5f 	bl	800e980 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDMMCx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 800eec2:	683a      	ldr	r2, [r7, #0]
 800eec4:	2103      	movs	r1, #3
 800eec6:	6878      	ldr	r0, [r7, #4]
 800eec8:	f000 f9c8 	bl	800f25c <SDMMC_GetCmdResp6>
 800eecc:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800eece:	69fb      	ldr	r3, [r7, #28]
}
 800eed0:	4618      	mov	r0, r3
 800eed2:	3720      	adds	r7, #32
 800eed4:	46bd      	mov	sp, r7
 800eed6:	bd80      	pop	{r7, pc}

0800eed8 <SDMMC_CmdSendStatus>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800eed8:	b580      	push	{r7, lr}
 800eeda:	b088      	sub	sp, #32
 800eedc:	af00      	add	r7, sp, #0
 800eede:	6078      	str	r0, [r7, #4]
 800eee0:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = Argument;
 800eee2:	683b      	ldr	r3, [r7, #0]
 800eee4:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 800eee6:	230d      	movs	r3, #13
 800eee8:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800eeea:	f44f 7380 	mov.w	r3, #256	; 0x100
 800eeee:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800eef0:	2300      	movs	r3, #0
 800eef2:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800eef4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800eef8:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800eefa:	f107 0308 	add.w	r3, r7, #8
 800eefe:	4619      	mov	r1, r3
 800ef00:	6878      	ldr	r0, [r7, #4]
 800ef02:	f7ff fd3d 	bl	800e980 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEND_STATUS, SDMMC_CMDTIMEOUT);
 800ef06:	f241 3288 	movw	r2, #5000	; 0x1388
 800ef0a:	210d      	movs	r1, #13
 800ef0c:	6878      	ldr	r0, [r7, #4]
 800ef0e:	f000 f829 	bl	800ef64 <SDMMC_GetCmdResp1>
 800ef12:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800ef14:	69fb      	ldr	r3, [r7, #28]
}
 800ef16:	4618      	mov	r0, r3
 800ef18:	3720      	adds	r7, #32
 800ef1a:	46bd      	mov	sp, r7
 800ef1c:	bd80      	pop	{r7, pc}

0800ef1e <SDMMC_CmdStatusRegister>:
  * @brief  Send the Status register command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdStatusRegister(SDMMC_TypeDef *SDMMCx)
{
 800ef1e:	b580      	push	{r7, lr}
 800ef20:	b088      	sub	sp, #32
 800ef22:	af00      	add	r7, sp, #0
 800ef24:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = 0U;
 800ef26:	2300      	movs	r3, #0
 800ef28:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_STATUS;
 800ef2a:	230d      	movs	r3, #13
 800ef2c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800ef2e:	f44f 7380 	mov.w	r3, #256	; 0x100
 800ef32:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800ef34:	2300      	movs	r3, #0
 800ef36:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800ef38:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800ef3c:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800ef3e:	f107 0308 	add.w	r3, r7, #8
 800ef42:	4619      	mov	r1, r3
 800ef44:	6878      	ldr	r0, [r7, #4]
 800ef46:	f7ff fd1b 	bl	800e980 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SD_APP_STATUS, SDMMC_CMDTIMEOUT);
 800ef4a:	f241 3288 	movw	r2, #5000	; 0x1388
 800ef4e:	210d      	movs	r1, #13
 800ef50:	6878      	ldr	r0, [r7, #4]
 800ef52:	f000 f807 	bl	800ef64 <SDMMC_GetCmdResp1>
 800ef56:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800ef58:	69fb      	ldr	r3, [r7, #28]
}
 800ef5a:	4618      	mov	r0, r3
 800ef5c:	3720      	adds	r7, #32
 800ef5e:	46bd      	mov	sp, r7
 800ef60:	bd80      	pop	{r7, pc}
	...

0800ef64 <SDMMC_GetCmdResp1>:
  * @param  hsd: SD handle
  * @param  SD_CMD: The sent command index
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp1(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint32_t Timeout)
{
 800ef64:	b580      	push	{r7, lr}
 800ef66:	b088      	sub	sp, #32
 800ef68:	af00      	add	r7, sp, #0
 800ef6a:	60f8      	str	r0, [r7, #12]
 800ef6c:	460b      	mov	r3, r1
 800ef6e:	607a      	str	r2, [r7, #4]
 800ef70:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 800ef72:	4b70      	ldr	r3, [pc, #448]	; (800f134 <SDMMC_GetCmdResp1+0x1d0>)
 800ef74:	681b      	ldr	r3, [r3, #0]
 800ef76:	4a70      	ldr	r2, [pc, #448]	; (800f138 <SDMMC_GetCmdResp1+0x1d4>)
 800ef78:	fba2 2303 	umull	r2, r3, r2, r3
 800ef7c:	0a5a      	lsrs	r2, r3, #9
 800ef7e:	687b      	ldr	r3, [r7, #4]
 800ef80:	fb02 f303 	mul.w	r3, r2, r3
 800ef84:	61fb      	str	r3, [r7, #28]

  do
  {
    if (count-- == 0U)
 800ef86:	69fb      	ldr	r3, [r7, #28]
 800ef88:	1e5a      	subs	r2, r3, #1
 800ef8a:	61fa      	str	r2, [r7, #28]
 800ef8c:	2b00      	cmp	r3, #0
 800ef8e:	d102      	bne.n	800ef96 <SDMMC_GetCmdResp1+0x32>
    {
      return SDMMC_ERROR_TIMEOUT;
 800ef90:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800ef94:	e0c9      	b.n	800f12a <SDMMC_GetCmdResp1+0x1c6>
    }
    sta_reg = SDMMCx->STA;
 800ef96:	68fb      	ldr	r3, [r7, #12]
 800ef98:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ef9a:	61bb      	str	r3, [r7, #24]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT |
 800ef9c:	69ba      	ldr	r2, [r7, #24]
 800ef9e:	4b67      	ldr	r3, [pc, #412]	; (800f13c <SDMMC_GetCmdResp1+0x1d8>)
 800efa0:	4013      	ands	r3, r2
                        SDMMC_FLAG_BUSYD0END)) == 0U) || ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 800efa2:	2b00      	cmp	r3, #0
 800efa4:	d0ef      	beq.n	800ef86 <SDMMC_GetCmdResp1+0x22>
 800efa6:	69bb      	ldr	r3, [r7, #24]
 800efa8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800efac:	2b00      	cmp	r3, #0
 800efae:	d1ea      	bne.n	800ef86 <SDMMC_GetCmdResp1+0x22>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800efb0:	68fb      	ldr	r3, [r7, #12]
 800efb2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800efb4:	f003 0304 	and.w	r3, r3, #4
 800efb8:	2b00      	cmp	r3, #0
 800efba:	d004      	beq.n	800efc6 <SDMMC_GetCmdResp1+0x62>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800efbc:	68fb      	ldr	r3, [r7, #12]
 800efbe:	2204      	movs	r2, #4
 800efc0:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800efc2:	2304      	movs	r3, #4
 800efc4:	e0b1      	b.n	800f12a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800efc6:	68fb      	ldr	r3, [r7, #12]
 800efc8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800efca:	f003 0301 	and.w	r3, r3, #1
 800efce:	2b00      	cmp	r3, #0
 800efd0:	d004      	beq.n	800efdc <SDMMC_GetCmdResp1+0x78>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800efd2:	68fb      	ldr	r3, [r7, #12]
 800efd4:	2201      	movs	r2, #1
 800efd6:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 800efd8:	2301      	movs	r3, #1
 800efda:	e0a6      	b.n	800f12a <SDMMC_GetCmdResp1+0x1c6>
  {
    /* Nothing to do */
  }

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800efdc:	68fb      	ldr	r3, [r7, #12]
 800efde:	4a58      	ldr	r2, [pc, #352]	; (800f140 <SDMMC_GetCmdResp1+0x1dc>)
 800efe0:	639a      	str	r2, [r3, #56]	; 0x38

  /* Check response received is of desired command */
  if (SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 800efe2:	68f8      	ldr	r0, [r7, #12]
 800efe4:	f7ff fcf6 	bl	800e9d4 <SDMMC_GetCommandResponse>
 800efe8:	4603      	mov	r3, r0
 800efea:	461a      	mov	r2, r3
 800efec:	7afb      	ldrb	r3, [r7, #11]
 800efee:	4293      	cmp	r3, r2
 800eff0:	d001      	beq.n	800eff6 <SDMMC_GetCmdResp1+0x92>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800eff2:	2301      	movs	r3, #1
 800eff4:	e099      	b.n	800f12a <SDMMC_GetCmdResp1+0x1c6>
  }

  /* We have received response, retrieve it for analysis  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 800eff6:	2100      	movs	r1, #0
 800eff8:	68f8      	ldr	r0, [r7, #12]
 800effa:	f7ff fcf8 	bl	800e9ee <SDMMC_GetResponse>
 800effe:	6178      	str	r0, [r7, #20]

  if ((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 800f000:	697a      	ldr	r2, [r7, #20]
 800f002:	4b50      	ldr	r3, [pc, #320]	; (800f144 <SDMMC_GetCmdResp1+0x1e0>)
 800f004:	4013      	ands	r3, r2
 800f006:	2b00      	cmp	r3, #0
 800f008:	d101      	bne.n	800f00e <SDMMC_GetCmdResp1+0xaa>
  {
    return SDMMC_ERROR_NONE;
 800f00a:	2300      	movs	r3, #0
 800f00c:	e08d      	b.n	800f12a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 800f00e:	697b      	ldr	r3, [r7, #20]
 800f010:	2b00      	cmp	r3, #0
 800f012:	da02      	bge.n	800f01a <SDMMC_GetCmdResp1+0xb6>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 800f014:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800f018:	e087      	b.n	800f12a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 800f01a:	697b      	ldr	r3, [r7, #20]
 800f01c:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800f020:	2b00      	cmp	r3, #0
 800f022:	d001      	beq.n	800f028 <SDMMC_GetCmdResp1+0xc4>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 800f024:	2340      	movs	r3, #64	; 0x40
 800f026:	e080      	b.n	800f12a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 800f028:	697b      	ldr	r3, [r7, #20]
 800f02a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800f02e:	2b00      	cmp	r3, #0
 800f030:	d001      	beq.n	800f036 <SDMMC_GetCmdResp1+0xd2>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 800f032:	2380      	movs	r3, #128	; 0x80
 800f034:	e079      	b.n	800f12a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 800f036:	697b      	ldr	r3, [r7, #20]
 800f038:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800f03c:	2b00      	cmp	r3, #0
 800f03e:	d002      	beq.n	800f046 <SDMMC_GetCmdResp1+0xe2>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 800f040:	f44f 7380 	mov.w	r3, #256	; 0x100
 800f044:	e071      	b.n	800f12a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 800f046:	697b      	ldr	r3, [r7, #20]
 800f048:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800f04c:	2b00      	cmp	r3, #0
 800f04e:	d002      	beq.n	800f056 <SDMMC_GetCmdResp1+0xf2>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 800f050:	f44f 7300 	mov.w	r3, #512	; 0x200
 800f054:	e069      	b.n	800f12a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 800f056:	697b      	ldr	r3, [r7, #20]
 800f058:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800f05c:	2b00      	cmp	r3, #0
 800f05e:	d002      	beq.n	800f066 <SDMMC_GetCmdResp1+0x102>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 800f060:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800f064:	e061      	b.n	800f12a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 800f066:	697b      	ldr	r3, [r7, #20]
 800f068:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800f06c:	2b00      	cmp	r3, #0
 800f06e:	d002      	beq.n	800f076 <SDMMC_GetCmdResp1+0x112>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 800f070:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800f074:	e059      	b.n	800f12a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 800f076:	697b      	ldr	r3, [r7, #20]
 800f078:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800f07c:	2b00      	cmp	r3, #0
 800f07e:	d002      	beq.n	800f086 <SDMMC_GetCmdResp1+0x122>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 800f080:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800f084:	e051      	b.n	800f12a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 800f086:	697b      	ldr	r3, [r7, #20]
 800f088:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800f08c:	2b00      	cmp	r3, #0
 800f08e:	d002      	beq.n	800f096 <SDMMC_GetCmdResp1+0x132>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 800f090:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800f094:	e049      	b.n	800f12a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 800f096:	697b      	ldr	r3, [r7, #20]
 800f098:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800f09c:	2b00      	cmp	r3, #0
 800f09e:	d002      	beq.n	800f0a6 <SDMMC_GetCmdResp1+0x142>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 800f0a0:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800f0a4:	e041      	b.n	800f12a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 800f0a6:	697b      	ldr	r3, [r7, #20]
 800f0a8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800f0ac:	2b00      	cmp	r3, #0
 800f0ae:	d002      	beq.n	800f0b6 <SDMMC_GetCmdResp1+0x152>
  {
    return SDMMC_ERROR_CC_ERR;
 800f0b0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800f0b4:	e039      	b.n	800f12a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 800f0b6:	697b      	ldr	r3, [r7, #20]
 800f0b8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800f0bc:	2b00      	cmp	r3, #0
 800f0be:	d002      	beq.n	800f0c6 <SDMMC_GetCmdResp1+0x162>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 800f0c0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800f0c4:	e031      	b.n	800f12a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 800f0c6:	697b      	ldr	r3, [r7, #20]
 800f0c8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800f0cc:	2b00      	cmp	r3, #0
 800f0ce:	d002      	beq.n	800f0d6 <SDMMC_GetCmdResp1+0x172>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 800f0d0:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 800f0d4:	e029      	b.n	800f12a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 800f0d6:	697b      	ldr	r3, [r7, #20]
 800f0d8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800f0dc:	2b00      	cmp	r3, #0
 800f0de:	d002      	beq.n	800f0e6 <SDMMC_GetCmdResp1+0x182>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 800f0e0:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800f0e4:	e021      	b.n	800f12a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 800f0e6:	697b      	ldr	r3, [r7, #20]
 800f0e8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800f0ec:	2b00      	cmp	r3, #0
 800f0ee:	d002      	beq.n	800f0f6 <SDMMC_GetCmdResp1+0x192>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 800f0f0:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800f0f4:	e019      	b.n	800f12a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 800f0f6:	697b      	ldr	r3, [r7, #20]
 800f0f8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800f0fc:	2b00      	cmp	r3, #0
 800f0fe:	d002      	beq.n	800f106 <SDMMC_GetCmdResp1+0x1a2>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 800f100:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800f104:	e011      	b.n	800f12a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 800f106:	697b      	ldr	r3, [r7, #20]
 800f108:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800f10c:	2b00      	cmp	r3, #0
 800f10e:	d002      	beq.n	800f116 <SDMMC_GetCmdResp1+0x1b2>
  {
    return SDMMC_ERROR_ERASE_RESET;
 800f110:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800f114:	e009      	b.n	800f12a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 800f116:	697b      	ldr	r3, [r7, #20]
 800f118:	f003 0308 	and.w	r3, r3, #8
 800f11c:	2b00      	cmp	r3, #0
 800f11e:	d002      	beq.n	800f126 <SDMMC_GetCmdResp1+0x1c2>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 800f120:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 800f124:	e001      	b.n	800f12a <SDMMC_GetCmdResp1+0x1c6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800f126:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 800f12a:	4618      	mov	r0, r3
 800f12c:	3720      	adds	r7, #32
 800f12e:	46bd      	mov	sp, r7
 800f130:	bd80      	pop	{r7, pc}
 800f132:	bf00      	nop
 800f134:	24000000 	.word	0x24000000
 800f138:	10624dd3 	.word	0x10624dd3
 800f13c:	00200045 	.word	0x00200045
 800f140:	002000c5 	.word	0x002000c5
 800f144:	fdffe008 	.word	0xfdffe008

0800f148 <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp2(SDMMC_TypeDef *SDMMCx)
{
 800f148:	b480      	push	{r7}
 800f14a:	b085      	sub	sp, #20
 800f14c:	af00      	add	r7, sp, #0
 800f14e:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 800f150:	4b1f      	ldr	r3, [pc, #124]	; (800f1d0 <SDMMC_GetCmdResp2+0x88>)
 800f152:	681b      	ldr	r3, [r3, #0]
 800f154:	4a1f      	ldr	r2, [pc, #124]	; (800f1d4 <SDMMC_GetCmdResp2+0x8c>)
 800f156:	fba2 2303 	umull	r2, r3, r2, r3
 800f15a:	0a5b      	lsrs	r3, r3, #9
 800f15c:	f241 3288 	movw	r2, #5000	; 0x1388
 800f160:	fb02 f303 	mul.w	r3, r2, r3
 800f164:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 800f166:	68fb      	ldr	r3, [r7, #12]
 800f168:	1e5a      	subs	r2, r3, #1
 800f16a:	60fa      	str	r2, [r7, #12]
 800f16c:	2b00      	cmp	r3, #0
 800f16e:	d102      	bne.n	800f176 <SDMMC_GetCmdResp2+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800f170:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800f174:	e026      	b.n	800f1c4 <SDMMC_GetCmdResp2+0x7c>
    }
    sta_reg = SDMMCx->STA;
 800f176:	687b      	ldr	r3, [r7, #4]
 800f178:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800f17a:	60bb      	str	r3, [r7, #8]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800f17c:	68bb      	ldr	r3, [r7, #8]
 800f17e:	f003 0345 	and.w	r3, r3, #69	; 0x45
 800f182:	2b00      	cmp	r3, #0
 800f184:	d0ef      	beq.n	800f166 <SDMMC_GetCmdResp2+0x1e>
           ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 800f186:	68bb      	ldr	r3, [r7, #8]
 800f188:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800f18c:	2b00      	cmp	r3, #0
 800f18e:	d1ea      	bne.n	800f166 <SDMMC_GetCmdResp2+0x1e>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800f190:	687b      	ldr	r3, [r7, #4]
 800f192:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800f194:	f003 0304 	and.w	r3, r3, #4
 800f198:	2b00      	cmp	r3, #0
 800f19a:	d004      	beq.n	800f1a6 <SDMMC_GetCmdResp2+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800f19c:	687b      	ldr	r3, [r7, #4]
 800f19e:	2204      	movs	r2, #4
 800f1a0:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800f1a2:	2304      	movs	r3, #4
 800f1a4:	e00e      	b.n	800f1c4 <SDMMC_GetCmdResp2+0x7c>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800f1a6:	687b      	ldr	r3, [r7, #4]
 800f1a8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800f1aa:	f003 0301 	and.w	r3, r3, #1
 800f1ae:	2b00      	cmp	r3, #0
 800f1b0:	d004      	beq.n	800f1bc <SDMMC_GetCmdResp2+0x74>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800f1b2:	687b      	ldr	r3, [r7, #4]
 800f1b4:	2201      	movs	r2, #1
 800f1b6:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 800f1b8:	2301      	movs	r3, #1
 800f1ba:	e003      	b.n	800f1c4 <SDMMC_GetCmdResp2+0x7c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800f1bc:	687b      	ldr	r3, [r7, #4]
 800f1be:	4a06      	ldr	r2, [pc, #24]	; (800f1d8 <SDMMC_GetCmdResp2+0x90>)
 800f1c0:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 800f1c2:	2300      	movs	r3, #0
}
 800f1c4:	4618      	mov	r0, r3
 800f1c6:	3714      	adds	r7, #20
 800f1c8:	46bd      	mov	sp, r7
 800f1ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f1ce:	4770      	bx	lr
 800f1d0:	24000000 	.word	0x24000000
 800f1d4:	10624dd3 	.word	0x10624dd3
 800f1d8:	002000c5 	.word	0x002000c5

0800f1dc <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp3(SDMMC_TypeDef *SDMMCx)
{
 800f1dc:	b480      	push	{r7}
 800f1de:	b085      	sub	sp, #20
 800f1e0:	af00      	add	r7, sp, #0
 800f1e2:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 800f1e4:	4b1a      	ldr	r3, [pc, #104]	; (800f250 <SDMMC_GetCmdResp3+0x74>)
 800f1e6:	681b      	ldr	r3, [r3, #0]
 800f1e8:	4a1a      	ldr	r2, [pc, #104]	; (800f254 <SDMMC_GetCmdResp3+0x78>)
 800f1ea:	fba2 2303 	umull	r2, r3, r2, r3
 800f1ee:	0a5b      	lsrs	r3, r3, #9
 800f1f0:	f241 3288 	movw	r2, #5000	; 0x1388
 800f1f4:	fb02 f303 	mul.w	r3, r2, r3
 800f1f8:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 800f1fa:	68fb      	ldr	r3, [r7, #12]
 800f1fc:	1e5a      	subs	r2, r3, #1
 800f1fe:	60fa      	str	r2, [r7, #12]
 800f200:	2b00      	cmp	r3, #0
 800f202:	d102      	bne.n	800f20a <SDMMC_GetCmdResp3+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800f204:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800f208:	e01b      	b.n	800f242 <SDMMC_GetCmdResp3+0x66>
    }
    sta_reg = SDMMCx->STA;
 800f20a:	687b      	ldr	r3, [r7, #4]
 800f20c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800f20e:	60bb      	str	r3, [r7, #8]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800f210:	68bb      	ldr	r3, [r7, #8]
 800f212:	f003 0345 	and.w	r3, r3, #69	; 0x45
 800f216:	2b00      	cmp	r3, #0
 800f218:	d0ef      	beq.n	800f1fa <SDMMC_GetCmdResp3+0x1e>
           ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 800f21a:	68bb      	ldr	r3, [r7, #8]
 800f21c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800f220:	2b00      	cmp	r3, #0
 800f222:	d1ea      	bne.n	800f1fa <SDMMC_GetCmdResp3+0x1e>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800f224:	687b      	ldr	r3, [r7, #4]
 800f226:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800f228:	f003 0304 	and.w	r3, r3, #4
 800f22c:	2b00      	cmp	r3, #0
 800f22e:	d004      	beq.n	800f23a <SDMMC_GetCmdResp3+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800f230:	687b      	ldr	r3, [r7, #4]
 800f232:	2204      	movs	r2, #4
 800f234:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800f236:	2304      	movs	r3, #4
 800f238:	e003      	b.n	800f242 <SDMMC_GetCmdResp3+0x66>
  }
  else
  {
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800f23a:	687b      	ldr	r3, [r7, #4]
 800f23c:	4a06      	ldr	r2, [pc, #24]	; (800f258 <SDMMC_GetCmdResp3+0x7c>)
 800f23e:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 800f240:	2300      	movs	r3, #0
}
 800f242:	4618      	mov	r0, r3
 800f244:	3714      	adds	r7, #20
 800f246:	46bd      	mov	sp, r7
 800f248:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f24c:	4770      	bx	lr
 800f24e:	bf00      	nop
 800f250:	24000000 	.word	0x24000000
 800f254:	10624dd3 	.word	0x10624dd3
 800f258:	002000c5 	.word	0x002000c5

0800f25c <SDMMC_GetCmdResp6>:
  * @param  pRCA: Pointer to the variable that will contain the SD card relative
  *         address RCA
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp6(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint16_t *pRCA)
{
 800f25c:	b580      	push	{r7, lr}
 800f25e:	b088      	sub	sp, #32
 800f260:	af00      	add	r7, sp, #0
 800f262:	60f8      	str	r0, [r7, #12]
 800f264:	460b      	mov	r3, r1
 800f266:	607a      	str	r2, [r7, #4]
 800f268:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 800f26a:	4b35      	ldr	r3, [pc, #212]	; (800f340 <SDMMC_GetCmdResp6+0xe4>)
 800f26c:	681b      	ldr	r3, [r3, #0]
 800f26e:	4a35      	ldr	r2, [pc, #212]	; (800f344 <SDMMC_GetCmdResp6+0xe8>)
 800f270:	fba2 2303 	umull	r2, r3, r2, r3
 800f274:	0a5b      	lsrs	r3, r3, #9
 800f276:	f241 3288 	movw	r2, #5000	; 0x1388
 800f27a:	fb02 f303 	mul.w	r3, r2, r3
 800f27e:	61fb      	str	r3, [r7, #28]

  do
  {
    if (count-- == 0U)
 800f280:	69fb      	ldr	r3, [r7, #28]
 800f282:	1e5a      	subs	r2, r3, #1
 800f284:	61fa      	str	r2, [r7, #28]
 800f286:	2b00      	cmp	r3, #0
 800f288:	d102      	bne.n	800f290 <SDMMC_GetCmdResp6+0x34>
    {
      return SDMMC_ERROR_TIMEOUT;
 800f28a:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800f28e:	e052      	b.n	800f336 <SDMMC_GetCmdResp6+0xda>
    }
    sta_reg = SDMMCx->STA;
 800f290:	68fb      	ldr	r3, [r7, #12]
 800f292:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800f294:	61bb      	str	r3, [r7, #24]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800f296:	69bb      	ldr	r3, [r7, #24]
 800f298:	f003 0345 	and.w	r3, r3, #69	; 0x45
 800f29c:	2b00      	cmp	r3, #0
 800f29e:	d0ef      	beq.n	800f280 <SDMMC_GetCmdResp6+0x24>
           ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 800f2a0:	69bb      	ldr	r3, [r7, #24]
 800f2a2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800f2a6:	2b00      	cmp	r3, #0
 800f2a8:	d1ea      	bne.n	800f280 <SDMMC_GetCmdResp6+0x24>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800f2aa:	68fb      	ldr	r3, [r7, #12]
 800f2ac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800f2ae:	f003 0304 	and.w	r3, r3, #4
 800f2b2:	2b00      	cmp	r3, #0
 800f2b4:	d004      	beq.n	800f2c0 <SDMMC_GetCmdResp6+0x64>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800f2b6:	68fb      	ldr	r3, [r7, #12]
 800f2b8:	2204      	movs	r2, #4
 800f2ba:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800f2bc:	2304      	movs	r3, #4
 800f2be:	e03a      	b.n	800f336 <SDMMC_GetCmdResp6+0xda>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800f2c0:	68fb      	ldr	r3, [r7, #12]
 800f2c2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800f2c4:	f003 0301 	and.w	r3, r3, #1
 800f2c8:	2b00      	cmp	r3, #0
 800f2ca:	d004      	beq.n	800f2d6 <SDMMC_GetCmdResp6+0x7a>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800f2cc:	68fb      	ldr	r3, [r7, #12]
 800f2ce:	2201      	movs	r2, #1
 800f2d0:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 800f2d2:	2301      	movs	r3, #1
 800f2d4:	e02f      	b.n	800f336 <SDMMC_GetCmdResp6+0xda>
  {
    /* Nothing to do */
  }

  /* Check response received is of desired command */
  if (SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 800f2d6:	68f8      	ldr	r0, [r7, #12]
 800f2d8:	f7ff fb7c 	bl	800e9d4 <SDMMC_GetCommandResponse>
 800f2dc:	4603      	mov	r3, r0
 800f2de:	461a      	mov	r2, r3
 800f2e0:	7afb      	ldrb	r3, [r7, #11]
 800f2e2:	4293      	cmp	r3, r2
 800f2e4:	d001      	beq.n	800f2ea <SDMMC_GetCmdResp6+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800f2e6:	2301      	movs	r3, #1
 800f2e8:	e025      	b.n	800f336 <SDMMC_GetCmdResp6+0xda>
  }

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800f2ea:	68fb      	ldr	r3, [r7, #12]
 800f2ec:	4a16      	ldr	r2, [pc, #88]	; (800f348 <SDMMC_GetCmdResp6+0xec>)
 800f2ee:	639a      	str	r2, [r3, #56]	; 0x38

  /* We have received response, retrieve it.  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 800f2f0:	2100      	movs	r1, #0
 800f2f2:	68f8      	ldr	r0, [r7, #12]
 800f2f4:	f7ff fb7b 	bl	800e9ee <SDMMC_GetResponse>
 800f2f8:	6178      	str	r0, [r7, #20]

  if ((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD |
 800f2fa:	697b      	ldr	r3, [r7, #20]
 800f2fc:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 800f300:	2b00      	cmp	r3, #0
 800f302:	d106      	bne.n	800f312 <SDMMC_GetCmdResp6+0xb6>
                      SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
  {
    *pRCA = (uint16_t)(response_r1 >> 16);
 800f304:	697b      	ldr	r3, [r7, #20]
 800f306:	0c1b      	lsrs	r3, r3, #16
 800f308:	b29a      	uxth	r2, r3
 800f30a:	687b      	ldr	r3, [r7, #4]
 800f30c:	801a      	strh	r2, [r3, #0]

    return SDMMC_ERROR_NONE;
 800f30e:	2300      	movs	r3, #0
 800f310:	e011      	b.n	800f336 <SDMMC_GetCmdResp6+0xda>
  }
  else if ((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 800f312:	697b      	ldr	r3, [r7, #20]
 800f314:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800f318:	2b00      	cmp	r3, #0
 800f31a:	d002      	beq.n	800f322 <SDMMC_GetCmdResp6+0xc6>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 800f31c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800f320:	e009      	b.n	800f336 <SDMMC_GetCmdResp6+0xda>
  }
  else if ((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 800f322:	697b      	ldr	r3, [r7, #20]
 800f324:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800f328:	2b00      	cmp	r3, #0
 800f32a:	d002      	beq.n	800f332 <SDMMC_GetCmdResp6+0xd6>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 800f32c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800f330:	e001      	b.n	800f336 <SDMMC_GetCmdResp6+0xda>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800f332:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 800f336:	4618      	mov	r0, r3
 800f338:	3720      	adds	r7, #32
 800f33a:	46bd      	mov	sp, r7
 800f33c:	bd80      	pop	{r7, pc}
 800f33e:	bf00      	nop
 800f340:	24000000 	.word	0x24000000
 800f344:	10624dd3 	.word	0x10624dd3
 800f348:	002000c5 	.word	0x002000c5

0800f34c <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp7(SDMMC_TypeDef *SDMMCx)
{
 800f34c:	b480      	push	{r7}
 800f34e:	b085      	sub	sp, #20
 800f350:	af00      	add	r7, sp, #0
 800f352:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 800f354:	4b22      	ldr	r3, [pc, #136]	; (800f3e0 <SDMMC_GetCmdResp7+0x94>)
 800f356:	681b      	ldr	r3, [r3, #0]
 800f358:	4a22      	ldr	r2, [pc, #136]	; (800f3e4 <SDMMC_GetCmdResp7+0x98>)
 800f35a:	fba2 2303 	umull	r2, r3, r2, r3
 800f35e:	0a5b      	lsrs	r3, r3, #9
 800f360:	f241 3288 	movw	r2, #5000	; 0x1388
 800f364:	fb02 f303 	mul.w	r3, r2, r3
 800f368:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 800f36a:	68fb      	ldr	r3, [r7, #12]
 800f36c:	1e5a      	subs	r2, r3, #1
 800f36e:	60fa      	str	r2, [r7, #12]
 800f370:	2b00      	cmp	r3, #0
 800f372:	d102      	bne.n	800f37a <SDMMC_GetCmdResp7+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800f374:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800f378:	e02c      	b.n	800f3d4 <SDMMC_GetCmdResp7+0x88>
    }
    sta_reg = SDMMCx->STA;
 800f37a:	687b      	ldr	r3, [r7, #4]
 800f37c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800f37e:	60bb      	str	r3, [r7, #8]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800f380:	68bb      	ldr	r3, [r7, #8]
 800f382:	f003 0345 	and.w	r3, r3, #69	; 0x45
 800f386:	2b00      	cmp	r3, #0
 800f388:	d0ef      	beq.n	800f36a <SDMMC_GetCmdResp7+0x1e>
           ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 800f38a:	68bb      	ldr	r3, [r7, #8]
 800f38c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800f390:	2b00      	cmp	r3, #0
 800f392:	d1ea      	bne.n	800f36a <SDMMC_GetCmdResp7+0x1e>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800f394:	687b      	ldr	r3, [r7, #4]
 800f396:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800f398:	f003 0304 	and.w	r3, r3, #4
 800f39c:	2b00      	cmp	r3, #0
 800f39e:	d004      	beq.n	800f3aa <SDMMC_GetCmdResp7+0x5e>
  {
    /* Card is not SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800f3a0:	687b      	ldr	r3, [r7, #4]
 800f3a2:	2204      	movs	r2, #4
 800f3a4:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800f3a6:	2304      	movs	r3, #4
 800f3a8:	e014      	b.n	800f3d4 <SDMMC_GetCmdResp7+0x88>
  }

  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800f3aa:	687b      	ldr	r3, [r7, #4]
 800f3ac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800f3ae:	f003 0301 	and.w	r3, r3, #1
 800f3b2:	2b00      	cmp	r3, #0
 800f3b4:	d004      	beq.n	800f3c0 <SDMMC_GetCmdResp7+0x74>
  {
    /* Card is not SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800f3b6:	687b      	ldr	r3, [r7, #4]
 800f3b8:	2201      	movs	r2, #1
 800f3ba:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 800f3bc:	2301      	movs	r3, #1
 800f3be:	e009      	b.n	800f3d4 <SDMMC_GetCmdResp7+0x88>
  else
  {
    /* Nothing to do */
  }

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDREND))
 800f3c0:	687b      	ldr	r3, [r7, #4]
 800f3c2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800f3c4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800f3c8:	2b00      	cmp	r3, #0
 800f3ca:	d002      	beq.n	800f3d2 <SDMMC_GetCmdResp7+0x86>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CMDREND);
 800f3cc:	687b      	ldr	r3, [r7, #4]
 800f3ce:	2240      	movs	r2, #64	; 0x40
 800f3d0:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 800f3d2:	2300      	movs	r3, #0

}
 800f3d4:	4618      	mov	r0, r3
 800f3d6:	3714      	adds	r7, #20
 800f3d8:	46bd      	mov	sp, r7
 800f3da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f3de:	4770      	bx	lr
 800f3e0:	24000000 	.word	0x24000000
 800f3e4:	10624dd3 	.word	0x10624dd3

0800f3e8 <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDMMC_TypeDef *SDMMCx)
{
 800f3e8:	b480      	push	{r7}
 800f3ea:	b085      	sub	sp, #20
 800f3ec:	af00      	add	r7, sp, #0
 800f3ee:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 800f3f0:	4b11      	ldr	r3, [pc, #68]	; (800f438 <SDMMC_GetCmdError+0x50>)
 800f3f2:	681b      	ldr	r3, [r3, #0]
 800f3f4:	4a11      	ldr	r2, [pc, #68]	; (800f43c <SDMMC_GetCmdError+0x54>)
 800f3f6:	fba2 2303 	umull	r2, r3, r2, r3
 800f3fa:	0a5b      	lsrs	r3, r3, #9
 800f3fc:	f241 3288 	movw	r2, #5000	; 0x1388
 800f400:	fb02 f303 	mul.w	r3, r2, r3
 800f404:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 800f406:	68fb      	ldr	r3, [r7, #12]
 800f408:	1e5a      	subs	r2, r3, #1
 800f40a:	60fa      	str	r2, [r7, #12]
 800f40c:	2b00      	cmp	r3, #0
 800f40e:	d102      	bne.n	800f416 <SDMMC_GetCmdError+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800f410:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800f414:	e009      	b.n	800f42a <SDMMC_GetCmdError+0x42>
    }

  } while (!__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDSENT));
 800f416:	687b      	ldr	r3, [r7, #4]
 800f418:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800f41a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800f41e:	2b00      	cmp	r3, #0
 800f420:	d0f1      	beq.n	800f406 <SDMMC_GetCmdError+0x1e>

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800f422:	687b      	ldr	r3, [r7, #4]
 800f424:	4a06      	ldr	r2, [pc, #24]	; (800f440 <SDMMC_GetCmdError+0x58>)
 800f426:	639a      	str	r2, [r3, #56]	; 0x38

  return SDMMC_ERROR_NONE;
 800f428:	2300      	movs	r3, #0
}
 800f42a:	4618      	mov	r0, r3
 800f42c:	3714      	adds	r7, #20
 800f42e:	46bd      	mov	sp, r7
 800f430:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f434:	4770      	bx	lr
 800f436:	bf00      	nop
 800f438:	24000000 	.word	0x24000000
 800f43c:	10624dd3 	.word	0x10624dd3
 800f440:	002000c5 	.word	0x002000c5

0800f444 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800f444:	b084      	sub	sp, #16
 800f446:	b580      	push	{r7, lr}
 800f448:	b084      	sub	sp, #16
 800f44a:	af00      	add	r7, sp, #0
 800f44c:	6078      	str	r0, [r7, #4]
 800f44e:	f107 001c 	add.w	r0, r7, #28
 800f452:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800f456:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f458:	2b01      	cmp	r3, #1
 800f45a:	d120      	bne.n	800f49e <USB_CoreInit+0x5a>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800f45c:	687b      	ldr	r3, [r7, #4]
 800f45e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f460:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800f464:	687b      	ldr	r3, [r7, #4]
 800f466:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800f468:	687b      	ldr	r3, [r7, #4]
 800f46a:	68da      	ldr	r2, [r3, #12]
 800f46c:	4b2a      	ldr	r3, [pc, #168]	; (800f518 <USB_CoreInit+0xd4>)
 800f46e:	4013      	ands	r3, r2
 800f470:	687a      	ldr	r2, [r7, #4]
 800f472:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800f474:	687b      	ldr	r3, [r7, #4]
 800f476:	68db      	ldr	r3, [r3, #12]
 800f478:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800f47c:	687b      	ldr	r3, [r7, #4]
 800f47e:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800f480:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800f482:	2b01      	cmp	r3, #1
 800f484:	d105      	bne.n	800f492 <USB_CoreInit+0x4e>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800f486:	687b      	ldr	r3, [r7, #4]
 800f488:	68db      	ldr	r3, [r3, #12]
 800f48a:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800f48e:	687b      	ldr	r3, [r7, #4]
 800f490:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800f492:	6878      	ldr	r0, [r7, #4]
 800f494:	f000 faac 	bl	800f9f0 <USB_CoreReset>
 800f498:	4603      	mov	r3, r0
 800f49a:	73fb      	strb	r3, [r7, #15]
 800f49c:	e01a      	b.n	800f4d4 <USB_CoreInit+0x90>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800f49e:	687b      	ldr	r3, [r7, #4]
 800f4a0:	68db      	ldr	r3, [r3, #12]
 800f4a2:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800f4a6:	687b      	ldr	r3, [r7, #4]
 800f4a8:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800f4aa:	6878      	ldr	r0, [r7, #4]
 800f4ac:	f000 faa0 	bl	800f9f0 <USB_CoreReset>
 800f4b0:	4603      	mov	r3, r0
 800f4b2:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 800f4b4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800f4b6:	2b00      	cmp	r3, #0
 800f4b8:	d106      	bne.n	800f4c8 <USB_CoreInit+0x84>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800f4ba:	687b      	ldr	r3, [r7, #4]
 800f4bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f4be:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800f4c2:	687b      	ldr	r3, [r7, #4]
 800f4c4:	639a      	str	r2, [r3, #56]	; 0x38
 800f4c6:	e005      	b.n	800f4d4 <USB_CoreInit+0x90>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800f4c8:	687b      	ldr	r3, [r7, #4]
 800f4ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f4cc:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800f4d0:	687b      	ldr	r3, [r7, #4]
 800f4d2:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 800f4d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f4d6:	2b01      	cmp	r3, #1
 800f4d8:	d116      	bne.n	800f508 <USB_CoreInit+0xc4>
  {
    /* make sure to reserve 18 fifo Locations for DMA buffers */
    USBx->GDFIFOCFG &= ~(0xFFFFU << 16);
 800f4da:	687b      	ldr	r3, [r7, #4]
 800f4dc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800f4de:	b29a      	uxth	r2, r3
 800f4e0:	687b      	ldr	r3, [r7, #4]
 800f4e2:	65da      	str	r2, [r3, #92]	; 0x5c
    USBx->GDFIFOCFG |= 0x3EEU << 16;
 800f4e4:	687b      	ldr	r3, [r7, #4]
 800f4e6:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800f4e8:	4b0c      	ldr	r3, [pc, #48]	; (800f51c <USB_CoreInit+0xd8>)
 800f4ea:	4313      	orrs	r3, r2
 800f4ec:	687a      	ldr	r2, [r7, #4]
 800f4ee:	65d3      	str	r3, [r2, #92]	; 0x5c

    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800f4f0:	687b      	ldr	r3, [r7, #4]
 800f4f2:	689b      	ldr	r3, [r3, #8]
 800f4f4:	f043 0206 	orr.w	r2, r3, #6
 800f4f8:	687b      	ldr	r3, [r7, #4]
 800f4fa:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800f4fc:	687b      	ldr	r3, [r7, #4]
 800f4fe:	689b      	ldr	r3, [r3, #8]
 800f500:	f043 0220 	orr.w	r2, r3, #32
 800f504:	687b      	ldr	r3, [r7, #4]
 800f506:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800f508:	7bfb      	ldrb	r3, [r7, #15]
}
 800f50a:	4618      	mov	r0, r3
 800f50c:	3710      	adds	r7, #16
 800f50e:	46bd      	mov	sp, r7
 800f510:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800f514:	b004      	add	sp, #16
 800f516:	4770      	bx	lr
 800f518:	ffbdffbf 	.word	0xffbdffbf
 800f51c:	03ee0000 	.word	0x03ee0000

0800f520 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800f520:	b480      	push	{r7}
 800f522:	b083      	sub	sp, #12
 800f524:	af00      	add	r7, sp, #0
 800f526:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800f528:	687b      	ldr	r3, [r7, #4]
 800f52a:	689b      	ldr	r3, [r3, #8]
 800f52c:	f023 0201 	bic.w	r2, r3, #1
 800f530:	687b      	ldr	r3, [r7, #4]
 800f532:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800f534:	2300      	movs	r3, #0
}
 800f536:	4618      	mov	r0, r3
 800f538:	370c      	adds	r7, #12
 800f53a:	46bd      	mov	sp, r7
 800f53c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f540:	4770      	bx	lr

0800f542 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800f542:	b580      	push	{r7, lr}
 800f544:	b084      	sub	sp, #16
 800f546:	af00      	add	r7, sp, #0
 800f548:	6078      	str	r0, [r7, #4]
 800f54a:	460b      	mov	r3, r1
 800f54c:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 800f54e:	2300      	movs	r3, #0
 800f550:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800f552:	687b      	ldr	r3, [r7, #4]
 800f554:	68db      	ldr	r3, [r3, #12]
 800f556:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 800f55a:	687b      	ldr	r3, [r7, #4]
 800f55c:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800f55e:	78fb      	ldrb	r3, [r7, #3]
 800f560:	2b01      	cmp	r3, #1
 800f562:	d115      	bne.n	800f590 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800f564:	687b      	ldr	r3, [r7, #4]
 800f566:	68db      	ldr	r3, [r3, #12]
 800f568:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800f56c:	687b      	ldr	r3, [r7, #4]
 800f56e:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800f570:	2001      	movs	r0, #1
 800f572:	f7f8 f9f1 	bl	8007958 <HAL_Delay>
      ms++;
 800f576:	68fb      	ldr	r3, [r7, #12]
 800f578:	3301      	adds	r3, #1
 800f57a:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 800f57c:	6878      	ldr	r0, [r7, #4]
 800f57e:	f000 fa29 	bl	800f9d4 <USB_GetMode>
 800f582:	4603      	mov	r3, r0
 800f584:	2b01      	cmp	r3, #1
 800f586:	d01e      	beq.n	800f5c6 <USB_SetCurrentMode+0x84>
 800f588:	68fb      	ldr	r3, [r7, #12]
 800f58a:	2b31      	cmp	r3, #49	; 0x31
 800f58c:	d9f0      	bls.n	800f570 <USB_SetCurrentMode+0x2e>
 800f58e:	e01a      	b.n	800f5c6 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 800f590:	78fb      	ldrb	r3, [r7, #3]
 800f592:	2b00      	cmp	r3, #0
 800f594:	d115      	bne.n	800f5c2 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800f596:	687b      	ldr	r3, [r7, #4]
 800f598:	68db      	ldr	r3, [r3, #12]
 800f59a:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800f59e:	687b      	ldr	r3, [r7, #4]
 800f5a0:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800f5a2:	2001      	movs	r0, #1
 800f5a4:	f7f8 f9d8 	bl	8007958 <HAL_Delay>
      ms++;
 800f5a8:	68fb      	ldr	r3, [r7, #12]
 800f5aa:	3301      	adds	r3, #1
 800f5ac:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 800f5ae:	6878      	ldr	r0, [r7, #4]
 800f5b0:	f000 fa10 	bl	800f9d4 <USB_GetMode>
 800f5b4:	4603      	mov	r3, r0
 800f5b6:	2b00      	cmp	r3, #0
 800f5b8:	d005      	beq.n	800f5c6 <USB_SetCurrentMode+0x84>
 800f5ba:	68fb      	ldr	r3, [r7, #12]
 800f5bc:	2b31      	cmp	r3, #49	; 0x31
 800f5be:	d9f0      	bls.n	800f5a2 <USB_SetCurrentMode+0x60>
 800f5c0:	e001      	b.n	800f5c6 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 800f5c2:	2301      	movs	r3, #1
 800f5c4:	e005      	b.n	800f5d2 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 800f5c6:	68fb      	ldr	r3, [r7, #12]
 800f5c8:	2b32      	cmp	r3, #50	; 0x32
 800f5ca:	d101      	bne.n	800f5d0 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 800f5cc:	2301      	movs	r3, #1
 800f5ce:	e000      	b.n	800f5d2 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 800f5d0:	2300      	movs	r3, #0
}
 800f5d2:	4618      	mov	r0, r3
 800f5d4:	3710      	adds	r7, #16
 800f5d6:	46bd      	mov	sp, r7
 800f5d8:	bd80      	pop	{r7, pc}
	...

0800f5dc <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800f5dc:	b084      	sub	sp, #16
 800f5de:	b580      	push	{r7, lr}
 800f5e0:	b086      	sub	sp, #24
 800f5e2:	af00      	add	r7, sp, #0
 800f5e4:	6078      	str	r0, [r7, #4]
 800f5e6:	f107 0024 	add.w	r0, r7, #36	; 0x24
 800f5ea:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800f5ee:	2300      	movs	r3, #0
 800f5f0:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800f5f2:	687b      	ldr	r3, [r7, #4]
 800f5f4:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800f5f6:	2300      	movs	r3, #0
 800f5f8:	613b      	str	r3, [r7, #16]
 800f5fa:	e009      	b.n	800f610 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 800f5fc:	687a      	ldr	r2, [r7, #4]
 800f5fe:	693b      	ldr	r3, [r7, #16]
 800f600:	3340      	adds	r3, #64	; 0x40
 800f602:	009b      	lsls	r3, r3, #2
 800f604:	4413      	add	r3, r2
 800f606:	2200      	movs	r2, #0
 800f608:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800f60a:	693b      	ldr	r3, [r7, #16]
 800f60c:	3301      	adds	r3, #1
 800f60e:	613b      	str	r3, [r7, #16]
 800f610:	693b      	ldr	r3, [r7, #16]
 800f612:	2b0e      	cmp	r3, #14
 800f614:	d9f2      	bls.n	800f5fc <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800f616:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800f618:	2b00      	cmp	r3, #0
 800f61a:	d11c      	bne.n	800f656 <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800f61c:	68fb      	ldr	r3, [r7, #12]
 800f61e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800f622:	685b      	ldr	r3, [r3, #4]
 800f624:	68fa      	ldr	r2, [r7, #12]
 800f626:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800f62a:	f043 0302 	orr.w	r3, r3, #2
 800f62e:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 800f630:	687b      	ldr	r3, [r7, #4]
 800f632:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f634:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 800f638:	687b      	ldr	r3, [r7, #4]
 800f63a:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 800f63c:	687b      	ldr	r3, [r7, #4]
 800f63e:	681b      	ldr	r3, [r3, #0]
 800f640:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800f644:	687b      	ldr	r3, [r7, #4]
 800f646:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 800f648:	687b      	ldr	r3, [r7, #4]
 800f64a:	681b      	ldr	r3, [r3, #0]
 800f64c:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800f650:	687b      	ldr	r3, [r7, #4]
 800f652:	601a      	str	r2, [r3, #0]
 800f654:	e005      	b.n	800f662 <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 800f656:	687b      	ldr	r3, [r7, #4]
 800f658:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f65a:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800f65e:	687b      	ldr	r3, [r7, #4]
 800f660:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800f662:	68fb      	ldr	r3, [r7, #12]
 800f664:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800f668:	461a      	mov	r2, r3
 800f66a:	2300      	movs	r3, #0
 800f66c:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 800f66e:	68fb      	ldr	r3, [r7, #12]
 800f670:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800f674:	4619      	mov	r1, r3
 800f676:	68fb      	ldr	r3, [r7, #12]
 800f678:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800f67c:	461a      	mov	r2, r3
 800f67e:	680b      	ldr	r3, [r1, #0]
 800f680:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800f682:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f684:	2b01      	cmp	r3, #1
 800f686:	d10c      	bne.n	800f6a2 <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 800f688:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f68a:	2b00      	cmp	r3, #0
 800f68c:	d104      	bne.n	800f698 <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 800f68e:	2100      	movs	r1, #0
 800f690:	6878      	ldr	r0, [r7, #4]
 800f692:	f000 f965 	bl	800f960 <USB_SetDevSpeed>
 800f696:	e008      	b.n	800f6aa <USB_DevInit+0xce>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 800f698:	2101      	movs	r1, #1
 800f69a:	6878      	ldr	r0, [r7, #4]
 800f69c:	f000 f960 	bl	800f960 <USB_SetDevSpeed>
 800f6a0:	e003      	b.n	800f6aa <USB_DevInit+0xce>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800f6a2:	2103      	movs	r1, #3
 800f6a4:	6878      	ldr	r0, [r7, #4]
 800f6a6:	f000 f95b 	bl	800f960 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800f6aa:	2110      	movs	r1, #16
 800f6ac:	6878      	ldr	r0, [r7, #4]
 800f6ae:	f000 f8f3 	bl	800f898 <USB_FlushTxFifo>
 800f6b2:	4603      	mov	r3, r0
 800f6b4:	2b00      	cmp	r3, #0
 800f6b6:	d001      	beq.n	800f6bc <USB_DevInit+0xe0>
  {
    ret = HAL_ERROR;
 800f6b8:	2301      	movs	r3, #1
 800f6ba:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800f6bc:	6878      	ldr	r0, [r7, #4]
 800f6be:	f000 f91f 	bl	800f900 <USB_FlushRxFifo>
 800f6c2:	4603      	mov	r3, r0
 800f6c4:	2b00      	cmp	r3, #0
 800f6c6:	d001      	beq.n	800f6cc <USB_DevInit+0xf0>
  {
    ret = HAL_ERROR;
 800f6c8:	2301      	movs	r3, #1
 800f6ca:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 800f6cc:	68fb      	ldr	r3, [r7, #12]
 800f6ce:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800f6d2:	461a      	mov	r2, r3
 800f6d4:	2300      	movs	r3, #0
 800f6d6:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 800f6d8:	68fb      	ldr	r3, [r7, #12]
 800f6da:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800f6de:	461a      	mov	r2, r3
 800f6e0:	2300      	movs	r3, #0
 800f6e2:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 800f6e4:	68fb      	ldr	r3, [r7, #12]
 800f6e6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800f6ea:	461a      	mov	r2, r3
 800f6ec:	2300      	movs	r3, #0
 800f6ee:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800f6f0:	2300      	movs	r3, #0
 800f6f2:	613b      	str	r3, [r7, #16]
 800f6f4:	e043      	b.n	800f77e <USB_DevInit+0x1a2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800f6f6:	693b      	ldr	r3, [r7, #16]
 800f6f8:	015a      	lsls	r2, r3, #5
 800f6fa:	68fb      	ldr	r3, [r7, #12]
 800f6fc:	4413      	add	r3, r2
 800f6fe:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f702:	681b      	ldr	r3, [r3, #0]
 800f704:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800f708:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800f70c:	d118      	bne.n	800f740 <USB_DevInit+0x164>
    {
      if (i == 0U)
 800f70e:	693b      	ldr	r3, [r7, #16]
 800f710:	2b00      	cmp	r3, #0
 800f712:	d10a      	bne.n	800f72a <USB_DevInit+0x14e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 800f714:	693b      	ldr	r3, [r7, #16]
 800f716:	015a      	lsls	r2, r3, #5
 800f718:	68fb      	ldr	r3, [r7, #12]
 800f71a:	4413      	add	r3, r2
 800f71c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f720:	461a      	mov	r2, r3
 800f722:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800f726:	6013      	str	r3, [r2, #0]
 800f728:	e013      	b.n	800f752 <USB_DevInit+0x176>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800f72a:	693b      	ldr	r3, [r7, #16]
 800f72c:	015a      	lsls	r2, r3, #5
 800f72e:	68fb      	ldr	r3, [r7, #12]
 800f730:	4413      	add	r3, r2
 800f732:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f736:	461a      	mov	r2, r3
 800f738:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800f73c:	6013      	str	r3, [r2, #0]
 800f73e:	e008      	b.n	800f752 <USB_DevInit+0x176>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 800f740:	693b      	ldr	r3, [r7, #16]
 800f742:	015a      	lsls	r2, r3, #5
 800f744:	68fb      	ldr	r3, [r7, #12]
 800f746:	4413      	add	r3, r2
 800f748:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f74c:	461a      	mov	r2, r3
 800f74e:	2300      	movs	r3, #0
 800f750:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800f752:	693b      	ldr	r3, [r7, #16]
 800f754:	015a      	lsls	r2, r3, #5
 800f756:	68fb      	ldr	r3, [r7, #12]
 800f758:	4413      	add	r3, r2
 800f75a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f75e:	461a      	mov	r2, r3
 800f760:	2300      	movs	r3, #0
 800f762:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 800f764:	693b      	ldr	r3, [r7, #16]
 800f766:	015a      	lsls	r2, r3, #5
 800f768:	68fb      	ldr	r3, [r7, #12]
 800f76a:	4413      	add	r3, r2
 800f76c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f770:	461a      	mov	r2, r3
 800f772:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800f776:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800f778:	693b      	ldr	r3, [r7, #16]
 800f77a:	3301      	adds	r3, #1
 800f77c:	613b      	str	r3, [r7, #16]
 800f77e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f780:	693a      	ldr	r2, [r7, #16]
 800f782:	429a      	cmp	r2, r3
 800f784:	d3b7      	bcc.n	800f6f6 <USB_DevInit+0x11a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800f786:	2300      	movs	r3, #0
 800f788:	613b      	str	r3, [r7, #16]
 800f78a:	e043      	b.n	800f814 <USB_DevInit+0x238>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800f78c:	693b      	ldr	r3, [r7, #16]
 800f78e:	015a      	lsls	r2, r3, #5
 800f790:	68fb      	ldr	r3, [r7, #12]
 800f792:	4413      	add	r3, r2
 800f794:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f798:	681b      	ldr	r3, [r3, #0]
 800f79a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800f79e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800f7a2:	d118      	bne.n	800f7d6 <USB_DevInit+0x1fa>
    {
      if (i == 0U)
 800f7a4:	693b      	ldr	r3, [r7, #16]
 800f7a6:	2b00      	cmp	r3, #0
 800f7a8:	d10a      	bne.n	800f7c0 <USB_DevInit+0x1e4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800f7aa:	693b      	ldr	r3, [r7, #16]
 800f7ac:	015a      	lsls	r2, r3, #5
 800f7ae:	68fb      	ldr	r3, [r7, #12]
 800f7b0:	4413      	add	r3, r2
 800f7b2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f7b6:	461a      	mov	r2, r3
 800f7b8:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800f7bc:	6013      	str	r3, [r2, #0]
 800f7be:	e013      	b.n	800f7e8 <USB_DevInit+0x20c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 800f7c0:	693b      	ldr	r3, [r7, #16]
 800f7c2:	015a      	lsls	r2, r3, #5
 800f7c4:	68fb      	ldr	r3, [r7, #12]
 800f7c6:	4413      	add	r3, r2
 800f7c8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f7cc:	461a      	mov	r2, r3
 800f7ce:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800f7d2:	6013      	str	r3, [r2, #0]
 800f7d4:	e008      	b.n	800f7e8 <USB_DevInit+0x20c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800f7d6:	693b      	ldr	r3, [r7, #16]
 800f7d8:	015a      	lsls	r2, r3, #5
 800f7da:	68fb      	ldr	r3, [r7, #12]
 800f7dc:	4413      	add	r3, r2
 800f7de:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f7e2:	461a      	mov	r2, r3
 800f7e4:	2300      	movs	r3, #0
 800f7e6:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 800f7e8:	693b      	ldr	r3, [r7, #16]
 800f7ea:	015a      	lsls	r2, r3, #5
 800f7ec:	68fb      	ldr	r3, [r7, #12]
 800f7ee:	4413      	add	r3, r2
 800f7f0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f7f4:	461a      	mov	r2, r3
 800f7f6:	2300      	movs	r3, #0
 800f7f8:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800f7fa:	693b      	ldr	r3, [r7, #16]
 800f7fc:	015a      	lsls	r2, r3, #5
 800f7fe:	68fb      	ldr	r3, [r7, #12]
 800f800:	4413      	add	r3, r2
 800f802:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f806:	461a      	mov	r2, r3
 800f808:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800f80c:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800f80e:	693b      	ldr	r3, [r7, #16]
 800f810:	3301      	adds	r3, #1
 800f812:	613b      	str	r3, [r7, #16]
 800f814:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f816:	693a      	ldr	r2, [r7, #16]
 800f818:	429a      	cmp	r2, r3
 800f81a:	d3b7      	bcc.n	800f78c <USB_DevInit+0x1b0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 800f81c:	68fb      	ldr	r3, [r7, #12]
 800f81e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800f822:	691b      	ldr	r3, [r3, #16]
 800f824:	68fa      	ldr	r2, [r7, #12]
 800f826:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800f82a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800f82e:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800f830:	687b      	ldr	r3, [r7, #4]
 800f832:	2200      	movs	r2, #0
 800f834:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800f836:	687b      	ldr	r3, [r7, #4]
 800f838:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 800f83c:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800f83e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f840:	2b00      	cmp	r3, #0
 800f842:	d105      	bne.n	800f850 <USB_DevInit+0x274>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800f844:	687b      	ldr	r3, [r7, #4]
 800f846:	699b      	ldr	r3, [r3, #24]
 800f848:	f043 0210 	orr.w	r2, r3, #16
 800f84c:	687b      	ldr	r3, [r7, #4]
 800f84e:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 800f850:	687b      	ldr	r3, [r7, #4]
 800f852:	699a      	ldr	r2, [r3, #24]
 800f854:	4b0e      	ldr	r3, [pc, #56]	; (800f890 <USB_DevInit+0x2b4>)
 800f856:	4313      	orrs	r3, r2
 800f858:	687a      	ldr	r2, [r7, #4]
 800f85a:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 800f85c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f85e:	2b00      	cmp	r3, #0
 800f860:	d005      	beq.n	800f86e <USB_DevInit+0x292>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800f862:	687b      	ldr	r3, [r7, #4]
 800f864:	699b      	ldr	r3, [r3, #24]
 800f866:	f043 0208 	orr.w	r2, r3, #8
 800f86a:	687b      	ldr	r3, [r7, #4]
 800f86c:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800f86e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800f870:	2b01      	cmp	r3, #1
 800f872:	d105      	bne.n	800f880 <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 800f874:	687b      	ldr	r3, [r7, #4]
 800f876:	699a      	ldr	r2, [r3, #24]
 800f878:	4b06      	ldr	r3, [pc, #24]	; (800f894 <USB_DevInit+0x2b8>)
 800f87a:	4313      	orrs	r3, r2
 800f87c:	687a      	ldr	r2, [r7, #4]
 800f87e:	6193      	str	r3, [r2, #24]
  }

  return ret;
 800f880:	7dfb      	ldrb	r3, [r7, #23]
}
 800f882:	4618      	mov	r0, r3
 800f884:	3718      	adds	r7, #24
 800f886:	46bd      	mov	sp, r7
 800f888:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800f88c:	b004      	add	sp, #16
 800f88e:	4770      	bx	lr
 800f890:	803c3800 	.word	0x803c3800
 800f894:	40000004 	.word	0x40000004

0800f898 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800f898:	b480      	push	{r7}
 800f89a:	b085      	sub	sp, #20
 800f89c:	af00      	add	r7, sp, #0
 800f89e:	6078      	str	r0, [r7, #4]
 800f8a0:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800f8a2:	2300      	movs	r3, #0
 800f8a4:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800f8a6:	68fb      	ldr	r3, [r7, #12]
 800f8a8:	3301      	adds	r3, #1
 800f8aa:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800f8ac:	68fb      	ldr	r3, [r7, #12]
 800f8ae:	4a13      	ldr	r2, [pc, #76]	; (800f8fc <USB_FlushTxFifo+0x64>)
 800f8b0:	4293      	cmp	r3, r2
 800f8b2:	d901      	bls.n	800f8b8 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 800f8b4:	2303      	movs	r3, #3
 800f8b6:	e01b      	b.n	800f8f0 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800f8b8:	687b      	ldr	r3, [r7, #4]
 800f8ba:	691b      	ldr	r3, [r3, #16]
 800f8bc:	2b00      	cmp	r3, #0
 800f8be:	daf2      	bge.n	800f8a6 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 800f8c0:	2300      	movs	r3, #0
 800f8c2:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800f8c4:	683b      	ldr	r3, [r7, #0]
 800f8c6:	019b      	lsls	r3, r3, #6
 800f8c8:	f043 0220 	orr.w	r2, r3, #32
 800f8cc:	687b      	ldr	r3, [r7, #4]
 800f8ce:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800f8d0:	68fb      	ldr	r3, [r7, #12]
 800f8d2:	3301      	adds	r3, #1
 800f8d4:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800f8d6:	68fb      	ldr	r3, [r7, #12]
 800f8d8:	4a08      	ldr	r2, [pc, #32]	; (800f8fc <USB_FlushTxFifo+0x64>)
 800f8da:	4293      	cmp	r3, r2
 800f8dc:	d901      	bls.n	800f8e2 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 800f8de:	2303      	movs	r3, #3
 800f8e0:	e006      	b.n	800f8f0 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800f8e2:	687b      	ldr	r3, [r7, #4]
 800f8e4:	691b      	ldr	r3, [r3, #16]
 800f8e6:	f003 0320 	and.w	r3, r3, #32
 800f8ea:	2b20      	cmp	r3, #32
 800f8ec:	d0f0      	beq.n	800f8d0 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 800f8ee:	2300      	movs	r3, #0
}
 800f8f0:	4618      	mov	r0, r3
 800f8f2:	3714      	adds	r7, #20
 800f8f4:	46bd      	mov	sp, r7
 800f8f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f8fa:	4770      	bx	lr
 800f8fc:	00030d40 	.word	0x00030d40

0800f900 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800f900:	b480      	push	{r7}
 800f902:	b085      	sub	sp, #20
 800f904:	af00      	add	r7, sp, #0
 800f906:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800f908:	2300      	movs	r3, #0
 800f90a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800f90c:	68fb      	ldr	r3, [r7, #12]
 800f90e:	3301      	adds	r3, #1
 800f910:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800f912:	68fb      	ldr	r3, [r7, #12]
 800f914:	4a11      	ldr	r2, [pc, #68]	; (800f95c <USB_FlushRxFifo+0x5c>)
 800f916:	4293      	cmp	r3, r2
 800f918:	d901      	bls.n	800f91e <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 800f91a:	2303      	movs	r3, #3
 800f91c:	e018      	b.n	800f950 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800f91e:	687b      	ldr	r3, [r7, #4]
 800f920:	691b      	ldr	r3, [r3, #16]
 800f922:	2b00      	cmp	r3, #0
 800f924:	daf2      	bge.n	800f90c <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 800f926:	2300      	movs	r3, #0
 800f928:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800f92a:	687b      	ldr	r3, [r7, #4]
 800f92c:	2210      	movs	r2, #16
 800f92e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800f930:	68fb      	ldr	r3, [r7, #12]
 800f932:	3301      	adds	r3, #1
 800f934:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800f936:	68fb      	ldr	r3, [r7, #12]
 800f938:	4a08      	ldr	r2, [pc, #32]	; (800f95c <USB_FlushRxFifo+0x5c>)
 800f93a:	4293      	cmp	r3, r2
 800f93c:	d901      	bls.n	800f942 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 800f93e:	2303      	movs	r3, #3
 800f940:	e006      	b.n	800f950 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800f942:	687b      	ldr	r3, [r7, #4]
 800f944:	691b      	ldr	r3, [r3, #16]
 800f946:	f003 0310 	and.w	r3, r3, #16
 800f94a:	2b10      	cmp	r3, #16
 800f94c:	d0f0      	beq.n	800f930 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 800f94e:	2300      	movs	r3, #0
}
 800f950:	4618      	mov	r0, r3
 800f952:	3714      	adds	r7, #20
 800f954:	46bd      	mov	sp, r7
 800f956:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f95a:	4770      	bx	lr
 800f95c:	00030d40 	.word	0x00030d40

0800f960 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 800f960:	b480      	push	{r7}
 800f962:	b085      	sub	sp, #20
 800f964:	af00      	add	r7, sp, #0
 800f966:	6078      	str	r0, [r7, #4]
 800f968:	460b      	mov	r3, r1
 800f96a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800f96c:	687b      	ldr	r3, [r7, #4]
 800f96e:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 800f970:	68fb      	ldr	r3, [r7, #12]
 800f972:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800f976:	681a      	ldr	r2, [r3, #0]
 800f978:	78fb      	ldrb	r3, [r7, #3]
 800f97a:	68f9      	ldr	r1, [r7, #12]
 800f97c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800f980:	4313      	orrs	r3, r2
 800f982:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 800f984:	2300      	movs	r3, #0
}
 800f986:	4618      	mov	r0, r3
 800f988:	3714      	adds	r7, #20
 800f98a:	46bd      	mov	sp, r7
 800f98c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f990:	4770      	bx	lr

0800f992 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 800f992:	b480      	push	{r7}
 800f994:	b085      	sub	sp, #20
 800f996:	af00      	add	r7, sp, #0
 800f998:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800f99a:	687b      	ldr	r3, [r7, #4]
 800f99c:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800f99e:	68fb      	ldr	r3, [r7, #12]
 800f9a0:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800f9a4:	681b      	ldr	r3, [r3, #0]
 800f9a6:	68fa      	ldr	r2, [r7, #12]
 800f9a8:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800f9ac:	f023 0303 	bic.w	r3, r3, #3
 800f9b0:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800f9b2:	68fb      	ldr	r3, [r7, #12]
 800f9b4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800f9b8:	685b      	ldr	r3, [r3, #4]
 800f9ba:	68fa      	ldr	r2, [r7, #12]
 800f9bc:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800f9c0:	f043 0302 	orr.w	r3, r3, #2
 800f9c4:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800f9c6:	2300      	movs	r3, #0
}
 800f9c8:	4618      	mov	r0, r3
 800f9ca:	3714      	adds	r7, #20
 800f9cc:	46bd      	mov	sp, r7
 800f9ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f9d2:	4770      	bx	lr

0800f9d4 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 800f9d4:	b480      	push	{r7}
 800f9d6:	b083      	sub	sp, #12
 800f9d8:	af00      	add	r7, sp, #0
 800f9da:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800f9dc:	687b      	ldr	r3, [r7, #4]
 800f9de:	695b      	ldr	r3, [r3, #20]
 800f9e0:	f003 0301 	and.w	r3, r3, #1
}
 800f9e4:	4618      	mov	r0, r3
 800f9e6:	370c      	adds	r7, #12
 800f9e8:	46bd      	mov	sp, r7
 800f9ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f9ee:	4770      	bx	lr

0800f9f0 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800f9f0:	b480      	push	{r7}
 800f9f2:	b085      	sub	sp, #20
 800f9f4:	af00      	add	r7, sp, #0
 800f9f6:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800f9f8:	2300      	movs	r3, #0
 800f9fa:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800f9fc:	68fb      	ldr	r3, [r7, #12]
 800f9fe:	3301      	adds	r3, #1
 800fa00:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800fa02:	68fb      	ldr	r3, [r7, #12]
 800fa04:	4a13      	ldr	r2, [pc, #76]	; (800fa54 <USB_CoreReset+0x64>)
 800fa06:	4293      	cmp	r3, r2
 800fa08:	d901      	bls.n	800fa0e <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800fa0a:	2303      	movs	r3, #3
 800fa0c:	e01b      	b.n	800fa46 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800fa0e:	687b      	ldr	r3, [r7, #4]
 800fa10:	691b      	ldr	r3, [r3, #16]
 800fa12:	2b00      	cmp	r3, #0
 800fa14:	daf2      	bge.n	800f9fc <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800fa16:	2300      	movs	r3, #0
 800fa18:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800fa1a:	687b      	ldr	r3, [r7, #4]
 800fa1c:	691b      	ldr	r3, [r3, #16]
 800fa1e:	f043 0201 	orr.w	r2, r3, #1
 800fa22:	687b      	ldr	r3, [r7, #4]
 800fa24:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800fa26:	68fb      	ldr	r3, [r7, #12]
 800fa28:	3301      	adds	r3, #1
 800fa2a:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800fa2c:	68fb      	ldr	r3, [r7, #12]
 800fa2e:	4a09      	ldr	r2, [pc, #36]	; (800fa54 <USB_CoreReset+0x64>)
 800fa30:	4293      	cmp	r3, r2
 800fa32:	d901      	bls.n	800fa38 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800fa34:	2303      	movs	r3, #3
 800fa36:	e006      	b.n	800fa46 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800fa38:	687b      	ldr	r3, [r7, #4]
 800fa3a:	691b      	ldr	r3, [r3, #16]
 800fa3c:	f003 0301 	and.w	r3, r3, #1
 800fa40:	2b01      	cmp	r3, #1
 800fa42:	d0f0      	beq.n	800fa26 <USB_CoreReset+0x36>

  return HAL_OK;
 800fa44:	2300      	movs	r3, #0
}
 800fa46:	4618      	mov	r0, r3
 800fa48:	3714      	adds	r7, #20
 800fa4a:	46bd      	mov	sp, r7
 800fa4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fa50:	4770      	bx	lr
 800fa52:	bf00      	nop
 800fa54:	00030d40 	.word	0x00030d40

0800fa58 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 800fa58:	b580      	push	{r7, lr}
 800fa5a:	af00      	add	r7, sp, #0
  /*## FatFS: Link the SD driver ###########################*/
  retSD = FATFS_LinkDriver(&SD_Driver, SDPath);
 800fa5c:	4904      	ldr	r1, [pc, #16]	; (800fa70 <MX_FATFS_Init+0x18>)
 800fa5e:	4805      	ldr	r0, [pc, #20]	; (800fa74 <MX_FATFS_Init+0x1c>)
 800fa60:	f000 fa8e 	bl	800ff80 <FATFS_LinkDriver>
 800fa64:	4603      	mov	r3, r0
 800fa66:	461a      	mov	r2, r3
 800fa68:	4b03      	ldr	r3, [pc, #12]	; (800fa78 <MX_FATFS_Init+0x20>)
 800fa6a:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 800fa6c:	bf00      	nop
 800fa6e:	bd80      	pop	{r7, pc}
 800fa70:	24001420 	.word	0x24001420
 800fa74:	08010214 	.word	0x08010214
 800fa78:	2400141c 	.word	0x2400141c

0800fa7c <BSP_SD_Init>:
/**
  * @brief  Initializes the SD card device.
  * @retval SD status
  */
__weak uint8_t BSP_SD_Init(void)
{
 800fa7c:	b580      	push	{r7, lr}
 800fa7e:	b082      	sub	sp, #8
 800fa80:	af00      	add	r7, sp, #0
  uint8_t sd_state = MSD_OK;
 800fa82:	2300      	movs	r3, #0
 800fa84:	71fb      	strb	r3, [r7, #7]
  /* Check if the SD card is plugged in the slot */
  if (BSP_SD_IsDetected() != SD_PRESENT)
 800fa86:	f000 f885 	bl	800fb94 <BSP_SD_IsDetected>
 800fa8a:	4603      	mov	r3, r0
 800fa8c:	2b01      	cmp	r3, #1
 800fa8e:	d001      	beq.n	800fa94 <BSP_SD_Init+0x18>
  {
    return MSD_ERROR_SD_NOT_PRESENT;
 800fa90:	2302      	movs	r3, #2
 800fa92:	e012      	b.n	800faba <BSP_SD_Init+0x3e>
  }
  /* HAL SD initialization */
  sd_state = HAL_SD_Init(&hsd1);
 800fa94:	480b      	ldr	r0, [pc, #44]	; (800fac4 <BSP_SD_Init+0x48>)
 800fa96:	f7fc f9d1 	bl	800be3c <HAL_SD_Init>
 800fa9a:	4603      	mov	r3, r0
 800fa9c:	71fb      	strb	r3, [r7, #7]
  /* Configure SD Bus width (4 bits mode selected) */
  if (sd_state == MSD_OK)
 800fa9e:	79fb      	ldrb	r3, [r7, #7]
 800faa0:	2b00      	cmp	r3, #0
 800faa2:	d109      	bne.n	800fab8 <BSP_SD_Init+0x3c>
  {
    /* Enable wide operation */
    if (HAL_SD_ConfigWideBusOperation(&hsd1, SDMMC_BUS_WIDE_4B) != HAL_OK)
 800faa4:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800faa8:	4806      	ldr	r0, [pc, #24]	; (800fac4 <BSP_SD_Init+0x48>)
 800faaa:	f7fd f887 	bl	800cbbc <HAL_SD_ConfigWideBusOperation>
 800faae:	4603      	mov	r3, r0
 800fab0:	2b00      	cmp	r3, #0
 800fab2:	d001      	beq.n	800fab8 <BSP_SD_Init+0x3c>
    {
      sd_state = MSD_ERROR;
 800fab4:	2301      	movs	r3, #1
 800fab6:	71fb      	strb	r3, [r7, #7]
    }
  }

  return sd_state;
 800fab8:	79fb      	ldrb	r3, [r7, #7]
}
 800faba:	4618      	mov	r0, r3
 800fabc:	3708      	adds	r7, #8
 800fabe:	46bd      	mov	sp, r7
 800fac0:	bd80      	pop	{r7, pc}
 800fac2:	bf00      	nop
 800fac4:	2400005c 	.word	0x2400005c

0800fac8 <BSP_SD_ReadBlocks_DMA>:
  * @param  ReadAddr: Address from where data is to be read
  * @param  NumOfBlocks: Number of SD blocks to read
  * @retval SD status
  */
__weak uint8_t BSP_SD_ReadBlocks_DMA(uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks)
{
 800fac8:	b580      	push	{r7, lr}
 800faca:	b086      	sub	sp, #24
 800facc:	af00      	add	r7, sp, #0
 800face:	60f8      	str	r0, [r7, #12]
 800fad0:	60b9      	str	r1, [r7, #8]
 800fad2:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 800fad4:	2300      	movs	r3, #0
 800fad6:	75fb      	strb	r3, [r7, #23]

  /* Read block(s) in DMA transfer mode */
  if (HAL_SD_ReadBlocks_DMA(&hsd1, (uint8_t *)pData, ReadAddr, NumOfBlocks) != HAL_OK)
 800fad8:	687b      	ldr	r3, [r7, #4]
 800fada:	68ba      	ldr	r2, [r7, #8]
 800fadc:	68f9      	ldr	r1, [r7, #12]
 800fade:	4806      	ldr	r0, [pc, #24]	; (800faf8 <BSP_SD_ReadBlocks_DMA+0x30>)
 800fae0:	f7fc facc 	bl	800c07c <HAL_SD_ReadBlocks_DMA>
 800fae4:	4603      	mov	r3, r0
 800fae6:	2b00      	cmp	r3, #0
 800fae8:	d001      	beq.n	800faee <BSP_SD_ReadBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 800faea:	2301      	movs	r3, #1
 800faec:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 800faee:	7dfb      	ldrb	r3, [r7, #23]
}
 800faf0:	4618      	mov	r0, r3
 800faf2:	3718      	adds	r7, #24
 800faf4:	46bd      	mov	sp, r7
 800faf6:	bd80      	pop	{r7, pc}
 800faf8:	2400005c 	.word	0x2400005c

0800fafc <BSP_SD_WriteBlocks_DMA>:
  * @param  WriteAddr: Address from where data is to be written
  * @param  NumOfBlocks: Number of SD blocks to write
  * @retval SD status
  */
__weak uint8_t BSP_SD_WriteBlocks_DMA(uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks)
{
 800fafc:	b580      	push	{r7, lr}
 800fafe:	b086      	sub	sp, #24
 800fb00:	af00      	add	r7, sp, #0
 800fb02:	60f8      	str	r0, [r7, #12]
 800fb04:	60b9      	str	r1, [r7, #8]
 800fb06:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 800fb08:	2300      	movs	r3, #0
 800fb0a:	75fb      	strb	r3, [r7, #23]

  /* Write block(s) in DMA transfer mode */
  if (HAL_SD_WriteBlocks_DMA(&hsd1, (uint8_t *)pData, WriteAddr, NumOfBlocks) != HAL_OK)
 800fb0c:	687b      	ldr	r3, [r7, #4]
 800fb0e:	68ba      	ldr	r2, [r7, #8]
 800fb10:	68f9      	ldr	r1, [r7, #12]
 800fb12:	4806      	ldr	r0, [pc, #24]	; (800fb2c <BSP_SD_WriteBlocks_DMA+0x30>)
 800fb14:	f7fc fb5a 	bl	800c1cc <HAL_SD_WriteBlocks_DMA>
 800fb18:	4603      	mov	r3, r0
 800fb1a:	2b00      	cmp	r3, #0
 800fb1c:	d001      	beq.n	800fb22 <BSP_SD_WriteBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 800fb1e:	2301      	movs	r3, #1
 800fb20:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 800fb22:	7dfb      	ldrb	r3, [r7, #23]
}
 800fb24:	4618      	mov	r0, r3
 800fb26:	3718      	adds	r7, #24
 800fb28:	46bd      	mov	sp, r7
 800fb2a:	bd80      	pop	{r7, pc}
 800fb2c:	2400005c 	.word	0x2400005c

0800fb30 <BSP_SD_GetCardState>:
  *          This value can be one of the following values:
  *            @arg  SD_TRANSFER_OK: No data transfer is acting
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  */
__weak uint8_t BSP_SD_GetCardState(void)
{
 800fb30:	b580      	push	{r7, lr}
 800fb32:	af00      	add	r7, sp, #0
  return ((HAL_SD_GetCardState(&hsd1) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 800fb34:	4805      	ldr	r0, [pc, #20]	; (800fb4c <BSP_SD_GetCardState+0x1c>)
 800fb36:	f7fd f953 	bl	800cde0 <HAL_SD_GetCardState>
 800fb3a:	4603      	mov	r3, r0
 800fb3c:	2b04      	cmp	r3, #4
 800fb3e:	bf14      	ite	ne
 800fb40:	2301      	movne	r3, #1
 800fb42:	2300      	moveq	r3, #0
 800fb44:	b2db      	uxtb	r3, r3
}
 800fb46:	4618      	mov	r0, r3
 800fb48:	bd80      	pop	{r7, pc}
 800fb4a:	bf00      	nop
 800fb4c:	2400005c 	.word	0x2400005c

0800fb50 <BSP_SD_GetCardInfo>:
  * @brief  Get SD information about specific SD card.
  * @param  CardInfo: Pointer to HAL_SD_CardInfoTypedef structure
  * @retval None
  */
__weak void BSP_SD_GetCardInfo(HAL_SD_CardInfoTypeDef *CardInfo)
{
 800fb50:	b580      	push	{r7, lr}
 800fb52:	b082      	sub	sp, #8
 800fb54:	af00      	add	r7, sp, #0
 800fb56:	6078      	str	r0, [r7, #4]
  /* Get SD card Information */
  HAL_SD_GetCardInfo(&hsd1, CardInfo);
 800fb58:	6879      	ldr	r1, [r7, #4]
 800fb5a:	4803      	ldr	r0, [pc, #12]	; (800fb68 <BSP_SD_GetCardInfo+0x18>)
 800fb5c:	f7fd f802 	bl	800cb64 <HAL_SD_GetCardInfo>
}
 800fb60:	bf00      	nop
 800fb62:	3708      	adds	r7, #8
 800fb64:	46bd      	mov	sp, r7
 800fb66:	bd80      	pop	{r7, pc}
 800fb68:	2400005c 	.word	0x2400005c

0800fb6c <HAL_SD_TxCpltCallback>:
  * @brief Tx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_TxCpltCallback(SD_HandleTypeDef *hsd)
{
 800fb6c:	b580      	push	{r7, lr}
 800fb6e:	b082      	sub	sp, #8
 800fb70:	af00      	add	r7, sp, #0
 800fb72:	6078      	str	r0, [r7, #4]
  BSP_SD_WriteCpltCallback();
 800fb74:	f000 f9a0 	bl	800feb8 <BSP_SD_WriteCpltCallback>
}
 800fb78:	bf00      	nop
 800fb7a:	3708      	adds	r7, #8
 800fb7c:	46bd      	mov	sp, r7
 800fb7e:	bd80      	pop	{r7, pc}

0800fb80 <HAL_SD_RxCpltCallback>:
  * @brief Rx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_RxCpltCallback(SD_HandleTypeDef *hsd)
{
 800fb80:	b580      	push	{r7, lr}
 800fb82:	b082      	sub	sp, #8
 800fb84:	af00      	add	r7, sp, #0
 800fb86:	6078      	str	r0, [r7, #4]
  BSP_SD_ReadCpltCallback();
 800fb88:	f000 f9a2 	bl	800fed0 <BSP_SD_ReadCpltCallback>
}
 800fb8c:	bf00      	nop
 800fb8e:	3708      	adds	r7, #8
 800fb90:	46bd      	mov	sp, r7
 800fb92:	bd80      	pop	{r7, pc}

0800fb94 <BSP_SD_IsDetected>:
 * @brief  Detects if SD card is correctly plugged in the memory slot or not.
 * @param  None
 * @retval Returns if SD is detected or not
 */
__weak uint8_t BSP_SD_IsDetected(void)
{
 800fb94:	b580      	push	{r7, lr}
 800fb96:	b082      	sub	sp, #8
 800fb98:	af00      	add	r7, sp, #0
  __IO uint8_t status = SD_PRESENT;
 800fb9a:	2301      	movs	r3, #1
 800fb9c:	71fb      	strb	r3, [r7, #7]

  if (BSP_PlatformIsDetected() == 0x0)
 800fb9e:	f000 f80b 	bl	800fbb8 <BSP_PlatformIsDetected>
 800fba2:	4603      	mov	r3, r0
 800fba4:	2b00      	cmp	r3, #0
 800fba6:	d101      	bne.n	800fbac <BSP_SD_IsDetected+0x18>
  {
    status = SD_NOT_PRESENT;
 800fba8:	2300      	movs	r3, #0
 800fbaa:	71fb      	strb	r3, [r7, #7]
  }

  return status;
 800fbac:	79fb      	ldrb	r3, [r7, #7]
 800fbae:	b2db      	uxtb	r3, r3
}
 800fbb0:	4618      	mov	r0, r3
 800fbb2:	3708      	adds	r7, #8
 800fbb4:	46bd      	mov	sp, r7
 800fbb6:	bd80      	pop	{r7, pc}

0800fbb8 <BSP_PlatformIsDetected>:
  ******************************************************************************
*/
/* USER CODE END Header */
#include "fatfs_platform.h"

uint8_t	BSP_PlatformIsDetected(void) {
 800fbb8:	b580      	push	{r7, lr}
 800fbba:	b082      	sub	sp, #8
 800fbbc:	af00      	add	r7, sp, #0
    uint8_t status = SD_PRESENT;
 800fbbe:	2301      	movs	r3, #1
 800fbc0:	71fb      	strb	r3, [r7, #7]
    /* Check SD card detect pin */
    if(HAL_GPIO_ReadPin(SD_DETECT_GPIO_PORT, SD_DETECT_PIN) != GPIO_PIN_RESET)
 800fbc2:	f44f 7180 	mov.w	r1, #256	; 0x100
 800fbc6:	4806      	ldr	r0, [pc, #24]	; (800fbe0 <BSP_PlatformIsDetected+0x28>)
 800fbc8:	f7f8 f9b6 	bl	8007f38 <HAL_GPIO_ReadPin>
 800fbcc:	4603      	mov	r3, r0
 800fbce:	2b00      	cmp	r3, #0
 800fbd0:	d001      	beq.n	800fbd6 <BSP_PlatformIsDetected+0x1e>
    {
        status = SD_NOT_PRESENT;
 800fbd2:	2300      	movs	r3, #0
 800fbd4:	71fb      	strb	r3, [r7, #7]
    }
    /* USER CODE BEGIN 1 */
    /* user code can be inserted here */
    /* USER CODE END 1 */
    return status;
 800fbd6:	79fb      	ldrb	r3, [r7, #7]
}
 800fbd8:	4618      	mov	r0, r3
 800fbda:	3708      	adds	r7, #8
 800fbdc:	46bd      	mov	sp, r7
 800fbde:	bd80      	pop	{r7, pc}
 800fbe0:	58022000 	.word	0x58022000

0800fbe4 <SD_CheckStatusWithTimeout>:
/* USER CODE END beforeFunctionSection */

/* Private functions ---------------------------------------------------------*/

static int SD_CheckStatusWithTimeout(uint32_t timeout)
{
 800fbe4:	b580      	push	{r7, lr}
 800fbe6:	b084      	sub	sp, #16
 800fbe8:	af00      	add	r7, sp, #0
 800fbea:	6078      	str	r0, [r7, #4]
  uint32_t timer = HAL_GetTick();
 800fbec:	f7f7 fea8 	bl	8007940 <HAL_GetTick>
 800fbf0:	60f8      	str	r0, [r7, #12]
  /* block until SDIO IP is ready again or a timeout occur */
  while(HAL_GetTick() - timer < timeout)
 800fbf2:	e006      	b.n	800fc02 <SD_CheckStatusWithTimeout+0x1e>
  {
    if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 800fbf4:	f7ff ff9c 	bl	800fb30 <BSP_SD_GetCardState>
 800fbf8:	4603      	mov	r3, r0
 800fbfa:	2b00      	cmp	r3, #0
 800fbfc:	d101      	bne.n	800fc02 <SD_CheckStatusWithTimeout+0x1e>
    {
      return 0;
 800fbfe:	2300      	movs	r3, #0
 800fc00:	e009      	b.n	800fc16 <SD_CheckStatusWithTimeout+0x32>
  while(HAL_GetTick() - timer < timeout)
 800fc02:	f7f7 fe9d 	bl	8007940 <HAL_GetTick>
 800fc06:	4602      	mov	r2, r0
 800fc08:	68fb      	ldr	r3, [r7, #12]
 800fc0a:	1ad3      	subs	r3, r2, r3
 800fc0c:	687a      	ldr	r2, [r7, #4]
 800fc0e:	429a      	cmp	r2, r3
 800fc10:	d8f0      	bhi.n	800fbf4 <SD_CheckStatusWithTimeout+0x10>
    }
  }

  return -1;
 800fc12:	f04f 33ff 	mov.w	r3, #4294967295
}
 800fc16:	4618      	mov	r0, r3
 800fc18:	3710      	adds	r7, #16
 800fc1a:	46bd      	mov	sp, r7
 800fc1c:	bd80      	pop	{r7, pc}
	...

0800fc20 <SD_CheckStatus>:

static DSTATUS SD_CheckStatus(BYTE lun)
{
 800fc20:	b580      	push	{r7, lr}
 800fc22:	b082      	sub	sp, #8
 800fc24:	af00      	add	r7, sp, #0
 800fc26:	4603      	mov	r3, r0
 800fc28:	71fb      	strb	r3, [r7, #7]
  Stat = STA_NOINIT;
 800fc2a:	4b0b      	ldr	r3, [pc, #44]	; (800fc58 <SD_CheckStatus+0x38>)
 800fc2c:	2201      	movs	r2, #1
 800fc2e:	701a      	strb	r2, [r3, #0]

  if(BSP_SD_GetCardState() == MSD_OK)
 800fc30:	f7ff ff7e 	bl	800fb30 <BSP_SD_GetCardState>
 800fc34:	4603      	mov	r3, r0
 800fc36:	2b00      	cmp	r3, #0
 800fc38:	d107      	bne.n	800fc4a <SD_CheckStatus+0x2a>
  {
    Stat &= ~STA_NOINIT;
 800fc3a:	4b07      	ldr	r3, [pc, #28]	; (800fc58 <SD_CheckStatus+0x38>)
 800fc3c:	781b      	ldrb	r3, [r3, #0]
 800fc3e:	b2db      	uxtb	r3, r3
 800fc40:	f023 0301 	bic.w	r3, r3, #1
 800fc44:	b2da      	uxtb	r2, r3
 800fc46:	4b04      	ldr	r3, [pc, #16]	; (800fc58 <SD_CheckStatus+0x38>)
 800fc48:	701a      	strb	r2, [r3, #0]
  }

  return Stat;
 800fc4a:	4b03      	ldr	r3, [pc, #12]	; (800fc58 <SD_CheckStatus+0x38>)
 800fc4c:	781b      	ldrb	r3, [r3, #0]
 800fc4e:	b2db      	uxtb	r3, r3
}
 800fc50:	4618      	mov	r0, r3
 800fc52:	3708      	adds	r7, #8
 800fc54:	46bd      	mov	sp, r7
 800fc56:	bd80      	pop	{r7, pc}
 800fc58:	2400003d 	.word	0x2400003d

0800fc5c <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 800fc5c:	b580      	push	{r7, lr}
 800fc5e:	b082      	sub	sp, #8
 800fc60:	af00      	add	r7, sp, #0
 800fc62:	4603      	mov	r3, r0
 800fc64:	71fb      	strb	r3, [r7, #7]

#if !defined(DISABLE_SD_INIT)

  if(BSP_SD_Init() == MSD_OK)
 800fc66:	f7ff ff09 	bl	800fa7c <BSP_SD_Init>
 800fc6a:	4603      	mov	r3, r0
 800fc6c:	2b00      	cmp	r3, #0
 800fc6e:	d107      	bne.n	800fc80 <SD_initialize+0x24>
  {
    Stat = SD_CheckStatus(lun);
 800fc70:	79fb      	ldrb	r3, [r7, #7]
 800fc72:	4618      	mov	r0, r3
 800fc74:	f7ff ffd4 	bl	800fc20 <SD_CheckStatus>
 800fc78:	4603      	mov	r3, r0
 800fc7a:	461a      	mov	r2, r3
 800fc7c:	4b04      	ldr	r3, [pc, #16]	; (800fc90 <SD_initialize+0x34>)
 800fc7e:	701a      	strb	r2, [r3, #0]

#else
  Stat = SD_CheckStatus(lun);
#endif

  return Stat;
 800fc80:	4b03      	ldr	r3, [pc, #12]	; (800fc90 <SD_initialize+0x34>)
 800fc82:	781b      	ldrb	r3, [r3, #0]
 800fc84:	b2db      	uxtb	r3, r3
}
 800fc86:	4618      	mov	r0, r3
 800fc88:	3708      	adds	r7, #8
 800fc8a:	46bd      	mov	sp, r7
 800fc8c:	bd80      	pop	{r7, pc}
 800fc8e:	bf00      	nop
 800fc90:	2400003d 	.word	0x2400003d

0800fc94 <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
 800fc94:	b580      	push	{r7, lr}
 800fc96:	b082      	sub	sp, #8
 800fc98:	af00      	add	r7, sp, #0
 800fc9a:	4603      	mov	r3, r0
 800fc9c:	71fb      	strb	r3, [r7, #7]
  return SD_CheckStatus(lun);
 800fc9e:	79fb      	ldrb	r3, [r7, #7]
 800fca0:	4618      	mov	r0, r3
 800fca2:	f7ff ffbd 	bl	800fc20 <SD_CheckStatus>
 800fca6:	4603      	mov	r3, r0
}
 800fca8:	4618      	mov	r0, r3
 800fcaa:	3708      	adds	r7, #8
 800fcac:	46bd      	mov	sp, r7
 800fcae:	bd80      	pop	{r7, pc}

0800fcb0 <SD_read>:
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */

DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 800fcb0:	b580      	push	{r7, lr}
 800fcb2:	b086      	sub	sp, #24
 800fcb4:	af00      	add	r7, sp, #0
 800fcb6:	60b9      	str	r1, [r7, #8]
 800fcb8:	607a      	str	r2, [r7, #4]
 800fcba:	603b      	str	r3, [r7, #0]
 800fcbc:	4603      	mov	r3, r0
 800fcbe:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 800fcc0:	2301      	movs	r3, #1
 800fcc2:	75fb      	strb	r3, [r7, #23]

  /*
  * ensure the SDCard is ready for a new operation
  */

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 800fcc4:	f247 5030 	movw	r0, #30000	; 0x7530
 800fcc8:	f7ff ff8c 	bl	800fbe4 <SD_CheckStatusWithTimeout>
 800fccc:	4603      	mov	r3, r0
 800fcce:	2b00      	cmp	r3, #0
 800fcd0:	da01      	bge.n	800fcd6 <SD_read+0x26>
  {
    return res;
 800fcd2:	7dfb      	ldrb	r3, [r7, #23]
 800fcd4:	e03b      	b.n	800fd4e <SD_read+0x9e>

#if defined(ENABLE_SCRATCH_BUFFER)
  if (!((uint32_t)buff & 0x3))
  {
#endif
    if(BSP_SD_ReadBlocks_DMA((uint32_t*)buff,
 800fcd6:	683a      	ldr	r2, [r7, #0]
 800fcd8:	6879      	ldr	r1, [r7, #4]
 800fcda:	68b8      	ldr	r0, [r7, #8]
 800fcdc:	f7ff fef4 	bl	800fac8 <BSP_SD_ReadBlocks_DMA>
 800fce0:	4603      	mov	r3, r0
 800fce2:	2b00      	cmp	r3, #0
 800fce4:	d132      	bne.n	800fd4c <SD_read+0x9c>
                             (uint32_t) (sector),
                             count) == MSD_OK)
    {
      ReadStatus = 0;
 800fce6:	4b1c      	ldr	r3, [pc, #112]	; (800fd58 <SD_read+0xa8>)
 800fce8:	2200      	movs	r2, #0
 800fcea:	601a      	str	r2, [r3, #0]
      /* Wait that the reading process is completed or a timeout occurs */
      timeout = HAL_GetTick();
 800fcec:	f7f7 fe28 	bl	8007940 <HAL_GetTick>
 800fcf0:	6138      	str	r0, [r7, #16]
      while((ReadStatus == 0) && ((HAL_GetTick() - timeout) < SD_TIMEOUT))
 800fcf2:	bf00      	nop
 800fcf4:	4b18      	ldr	r3, [pc, #96]	; (800fd58 <SD_read+0xa8>)
 800fcf6:	681b      	ldr	r3, [r3, #0]
 800fcf8:	2b00      	cmp	r3, #0
 800fcfa:	d108      	bne.n	800fd0e <SD_read+0x5e>
 800fcfc:	f7f7 fe20 	bl	8007940 <HAL_GetTick>
 800fd00:	4602      	mov	r2, r0
 800fd02:	693b      	ldr	r3, [r7, #16]
 800fd04:	1ad3      	subs	r3, r2, r3
 800fd06:	f247 522f 	movw	r2, #29999	; 0x752f
 800fd0a:	4293      	cmp	r3, r2
 800fd0c:	d9f2      	bls.n	800fcf4 <SD_read+0x44>
      {
      }
      /* in case of a timeout return error */
      if (ReadStatus == 0)
 800fd0e:	4b12      	ldr	r3, [pc, #72]	; (800fd58 <SD_read+0xa8>)
 800fd10:	681b      	ldr	r3, [r3, #0]
 800fd12:	2b00      	cmp	r3, #0
 800fd14:	d102      	bne.n	800fd1c <SD_read+0x6c>
      {
        res = RES_ERROR;
 800fd16:	2301      	movs	r3, #1
 800fd18:	75fb      	strb	r3, [r7, #23]
 800fd1a:	e017      	b.n	800fd4c <SD_read+0x9c>
      }
      else
      {
        ReadStatus = 0;
 800fd1c:	4b0e      	ldr	r3, [pc, #56]	; (800fd58 <SD_read+0xa8>)
 800fd1e:	2200      	movs	r2, #0
 800fd20:	601a      	str	r2, [r3, #0]
        timeout = HAL_GetTick();
 800fd22:	f7f7 fe0d 	bl	8007940 <HAL_GetTick>
 800fd26:	6138      	str	r0, [r7, #16]

        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 800fd28:	e007      	b.n	800fd3a <SD_read+0x8a>
        {
          if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 800fd2a:	f7ff ff01 	bl	800fb30 <BSP_SD_GetCardState>
 800fd2e:	4603      	mov	r3, r0
 800fd30:	2b00      	cmp	r3, #0
 800fd32:	d102      	bne.n	800fd3a <SD_read+0x8a>
          {
            res = RES_OK;
 800fd34:	2300      	movs	r3, #0
 800fd36:	75fb      	strb	r3, [r7, #23]
            adjust the address and the D-Cache size to invalidate accordingly.
            */
            alignedAddr = (uint32_t)buff & ~0x1F;
            SCB_InvalidateDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif
            break;
 800fd38:	e008      	b.n	800fd4c <SD_read+0x9c>
        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 800fd3a:	f7f7 fe01 	bl	8007940 <HAL_GetTick>
 800fd3e:	4602      	mov	r2, r0
 800fd40:	693b      	ldr	r3, [r7, #16]
 800fd42:	1ad3      	subs	r3, r2, r3
 800fd44:	f247 522f 	movw	r2, #29999	; 0x752f
 800fd48:	4293      	cmp	r3, r2
 800fd4a:	d9ee      	bls.n	800fd2a <SD_read+0x7a>
      if ((i == count) && (ret == MSD_OK))
        res = RES_OK;
    }
#endif

  return res;
 800fd4c:	7dfb      	ldrb	r3, [r7, #23]
}
 800fd4e:	4618      	mov	r0, r3
 800fd50:	3718      	adds	r7, #24
 800fd52:	46bd      	mov	sp, r7
 800fd54:	bd80      	pop	{r7, pc}
 800fd56:	bf00      	nop
 800fd58:	24001428 	.word	0x24001428

0800fd5c <SD_write>:
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1

DRESULT SD_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 800fd5c:	b580      	push	{r7, lr}
 800fd5e:	b086      	sub	sp, #24
 800fd60:	af00      	add	r7, sp, #0
 800fd62:	60b9      	str	r1, [r7, #8]
 800fd64:	607a      	str	r2, [r7, #4]
 800fd66:	603b      	str	r3, [r7, #0]
 800fd68:	4603      	mov	r3, r0
 800fd6a:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 800fd6c:	2301      	movs	r3, #1
 800fd6e:	75fb      	strb	r3, [r7, #23]
#if defined(ENABLE_SCRATCH_BUFFER)
  uint8_t ret;
  int i;
#endif

   WriteStatus = 0;
 800fd70:	4b24      	ldr	r3, [pc, #144]	; (800fe04 <SD_write+0xa8>)
 800fd72:	2200      	movs	r2, #0
 800fd74:	601a      	str	r2, [r3, #0]
#if (ENABLE_SD_DMA_CACHE_MAINTENANCE == 1)
  uint32_t alignedAddr;
#endif

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 800fd76:	f247 5030 	movw	r0, #30000	; 0x7530
 800fd7a:	f7ff ff33 	bl	800fbe4 <SD_CheckStatusWithTimeout>
 800fd7e:	4603      	mov	r3, r0
 800fd80:	2b00      	cmp	r3, #0
 800fd82:	da01      	bge.n	800fd88 <SD_write+0x2c>
  {
    return res;
 800fd84:	7dfb      	ldrb	r3, [r7, #23]
 800fd86:	e038      	b.n	800fdfa <SD_write+0x9e>
    */
    alignedAddr = (uint32_t)buff &  ~0x1F;
    SCB_CleanDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif

    if(BSP_SD_WriteBlocks_DMA((uint32_t*)buff,
 800fd88:	683a      	ldr	r2, [r7, #0]
 800fd8a:	6879      	ldr	r1, [r7, #4]
 800fd8c:	68b8      	ldr	r0, [r7, #8]
 800fd8e:	f7ff feb5 	bl	800fafc <BSP_SD_WriteBlocks_DMA>
 800fd92:	4603      	mov	r3, r0
 800fd94:	2b00      	cmp	r3, #0
 800fd96:	d12f      	bne.n	800fdf8 <SD_write+0x9c>
                              (uint32_t)(sector),
                              count) == MSD_OK)
    {
      /* Wait that writing process is completed or a timeout occurs */

      timeout = HAL_GetTick();
 800fd98:	f7f7 fdd2 	bl	8007940 <HAL_GetTick>
 800fd9c:	6138      	str	r0, [r7, #16]
      while((WriteStatus == 0) && ((HAL_GetTick() - timeout) < SD_TIMEOUT))
 800fd9e:	bf00      	nop
 800fda0:	4b18      	ldr	r3, [pc, #96]	; (800fe04 <SD_write+0xa8>)
 800fda2:	681b      	ldr	r3, [r3, #0]
 800fda4:	2b00      	cmp	r3, #0
 800fda6:	d108      	bne.n	800fdba <SD_write+0x5e>
 800fda8:	f7f7 fdca 	bl	8007940 <HAL_GetTick>
 800fdac:	4602      	mov	r2, r0
 800fdae:	693b      	ldr	r3, [r7, #16]
 800fdb0:	1ad3      	subs	r3, r2, r3
 800fdb2:	f247 522f 	movw	r2, #29999	; 0x752f
 800fdb6:	4293      	cmp	r3, r2
 800fdb8:	d9f2      	bls.n	800fda0 <SD_write+0x44>
      {
      }
      /* in case of a timeout return error */
      if (WriteStatus == 0)
 800fdba:	4b12      	ldr	r3, [pc, #72]	; (800fe04 <SD_write+0xa8>)
 800fdbc:	681b      	ldr	r3, [r3, #0]
 800fdbe:	2b00      	cmp	r3, #0
 800fdc0:	d102      	bne.n	800fdc8 <SD_write+0x6c>
      {
        res = RES_ERROR;
 800fdc2:	2301      	movs	r3, #1
 800fdc4:	75fb      	strb	r3, [r7, #23]
 800fdc6:	e017      	b.n	800fdf8 <SD_write+0x9c>
      }
      else
      {
        WriteStatus = 0;
 800fdc8:	4b0e      	ldr	r3, [pc, #56]	; (800fe04 <SD_write+0xa8>)
 800fdca:	2200      	movs	r2, #0
 800fdcc:	601a      	str	r2, [r3, #0]
        timeout = HAL_GetTick();
 800fdce:	f7f7 fdb7 	bl	8007940 <HAL_GetTick>
 800fdd2:	6138      	str	r0, [r7, #16]

        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 800fdd4:	e007      	b.n	800fde6 <SD_write+0x8a>
        {
          if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 800fdd6:	f7ff feab 	bl	800fb30 <BSP_SD_GetCardState>
 800fdda:	4603      	mov	r3, r0
 800fddc:	2b00      	cmp	r3, #0
 800fdde:	d102      	bne.n	800fde6 <SD_write+0x8a>
          {
            res = RES_OK;
 800fde0:	2300      	movs	r3, #0
 800fde2:	75fb      	strb	r3, [r7, #23]
            break;
 800fde4:	e008      	b.n	800fdf8 <SD_write+0x9c>
        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 800fde6:	f7f7 fdab 	bl	8007940 <HAL_GetTick>
 800fdea:	4602      	mov	r2, r0
 800fdec:	693b      	ldr	r3, [r7, #16]
 800fdee:	1ad3      	subs	r3, r2, r3
 800fdf0:	f247 522f 	movw	r2, #29999	; 0x752f
 800fdf4:	4293      	cmp	r3, r2
 800fdf6:	d9ee      	bls.n	800fdd6 <SD_write+0x7a>
      }
      if ((i == count) && (ret == MSD_OK))
        res = RES_OK;
    }
#endif
  return res;
 800fdf8:	7dfb      	ldrb	r3, [r7, #23]
}
 800fdfa:	4618      	mov	r0, r3
 800fdfc:	3718      	adds	r7, #24
 800fdfe:	46bd      	mov	sp, r7
 800fe00:	bd80      	pop	{r7, pc}
 800fe02:	bf00      	nop
 800fe04:	24001424 	.word	0x24001424

0800fe08 <SD_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 800fe08:	b580      	push	{r7, lr}
 800fe0a:	b08c      	sub	sp, #48	; 0x30
 800fe0c:	af00      	add	r7, sp, #0
 800fe0e:	4603      	mov	r3, r0
 800fe10:	603a      	str	r2, [r7, #0]
 800fe12:	71fb      	strb	r3, [r7, #7]
 800fe14:	460b      	mov	r3, r1
 800fe16:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 800fe18:	2301      	movs	r3, #1
 800fe1a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  BSP_SD_CardInfo CardInfo;

  if (Stat & STA_NOINIT) return RES_NOTRDY;
 800fe1e:	4b25      	ldr	r3, [pc, #148]	; (800feb4 <SD_ioctl+0xac>)
 800fe20:	781b      	ldrb	r3, [r3, #0]
 800fe22:	b2db      	uxtb	r3, r3
 800fe24:	f003 0301 	and.w	r3, r3, #1
 800fe28:	2b00      	cmp	r3, #0
 800fe2a:	d001      	beq.n	800fe30 <SD_ioctl+0x28>
 800fe2c:	2303      	movs	r3, #3
 800fe2e:	e03c      	b.n	800feaa <SD_ioctl+0xa2>

  switch (cmd)
 800fe30:	79bb      	ldrb	r3, [r7, #6]
 800fe32:	2b03      	cmp	r3, #3
 800fe34:	d834      	bhi.n	800fea0 <SD_ioctl+0x98>
 800fe36:	a201      	add	r2, pc, #4	; (adr r2, 800fe3c <SD_ioctl+0x34>)
 800fe38:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800fe3c:	0800fe4d 	.word	0x0800fe4d
 800fe40:	0800fe55 	.word	0x0800fe55
 800fe44:	0800fe6d 	.word	0x0800fe6d
 800fe48:	0800fe87 	.word	0x0800fe87
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC :
    res = RES_OK;
 800fe4c:	2300      	movs	r3, #0
 800fe4e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800fe52:	e028      	b.n	800fea6 <SD_ioctl+0x9e>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    BSP_SD_GetCardInfo(&CardInfo);
 800fe54:	f107 0308 	add.w	r3, r7, #8
 800fe58:	4618      	mov	r0, r3
 800fe5a:	f7ff fe79 	bl	800fb50 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 800fe5e:	6a3a      	ldr	r2, [r7, #32]
 800fe60:	683b      	ldr	r3, [r7, #0]
 800fe62:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 800fe64:	2300      	movs	r3, #0
 800fe66:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800fe6a:	e01c      	b.n	800fea6 <SD_ioctl+0x9e>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 800fe6c:	f107 0308 	add.w	r3, r7, #8
 800fe70:	4618      	mov	r0, r3
 800fe72:	f7ff fe6d 	bl	800fb50 <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 800fe76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fe78:	b29a      	uxth	r2, r3
 800fe7a:	683b      	ldr	r3, [r7, #0]
 800fe7c:	801a      	strh	r2, [r3, #0]
    res = RES_OK;
 800fe7e:	2300      	movs	r3, #0
 800fe80:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800fe84:	e00f      	b.n	800fea6 <SD_ioctl+0x9e>

  /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 800fe86:	f107 0308 	add.w	r3, r7, #8
 800fe8a:	4618      	mov	r0, r3
 800fe8c:	f7ff fe60 	bl	800fb50 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 800fe90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fe92:	0a5a      	lsrs	r2, r3, #9
 800fe94:	683b      	ldr	r3, [r7, #0]
 800fe96:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 800fe98:	2300      	movs	r3, #0
 800fe9a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800fe9e:	e002      	b.n	800fea6 <SD_ioctl+0x9e>

  default:
    res = RES_PARERR;
 800fea0:	2304      	movs	r3, #4
 800fea2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  }

  return res;
 800fea6:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 800feaa:	4618      	mov	r0, r3
 800feac:	3730      	adds	r7, #48	; 0x30
 800feae:	46bd      	mov	sp, r7
 800feb0:	bd80      	pop	{r7, pc}
 800feb2:	bf00      	nop
 800feb4:	2400003d 	.word	0x2400003d

0800feb8 <BSP_SD_WriteCpltCallback>:
  * @brief Tx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_WriteCpltCallback(void)
{
 800feb8:	b480      	push	{r7}
 800feba:	af00      	add	r7, sp, #0

  WriteStatus = 1;
 800febc:	4b03      	ldr	r3, [pc, #12]	; (800fecc <BSP_SD_WriteCpltCallback+0x14>)
 800febe:	2201      	movs	r2, #1
 800fec0:	601a      	str	r2, [r3, #0]
}
 800fec2:	bf00      	nop
 800fec4:	46bd      	mov	sp, r7
 800fec6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800feca:	4770      	bx	lr
 800fecc:	24001424 	.word	0x24001424

0800fed0 <BSP_SD_ReadCpltCallback>:
  * @brief Rx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_ReadCpltCallback(void)
{
 800fed0:	b480      	push	{r7}
 800fed2:	af00      	add	r7, sp, #0
  ReadStatus = 1;
 800fed4:	4b03      	ldr	r3, [pc, #12]	; (800fee4 <BSP_SD_ReadCpltCallback+0x14>)
 800fed6:	2201      	movs	r2, #1
 800fed8:	601a      	str	r2, [r3, #0]
}
 800feda:	bf00      	nop
 800fedc:	46bd      	mov	sp, r7
 800fede:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fee2:	4770      	bx	lr
 800fee4:	24001428 	.word	0x24001428

0800fee8 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 800fee8:	b480      	push	{r7}
 800feea:	b087      	sub	sp, #28
 800feec:	af00      	add	r7, sp, #0
 800feee:	60f8      	str	r0, [r7, #12]
 800fef0:	60b9      	str	r1, [r7, #8]
 800fef2:	4613      	mov	r3, r2
 800fef4:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 800fef6:	2301      	movs	r3, #1
 800fef8:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 800fefa:	2300      	movs	r3, #0
 800fefc:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 800fefe:	4b1f      	ldr	r3, [pc, #124]	; (800ff7c <FATFS_LinkDriverEx+0x94>)
 800ff00:	7a5b      	ldrb	r3, [r3, #9]
 800ff02:	b2db      	uxtb	r3, r3
 800ff04:	2b00      	cmp	r3, #0
 800ff06:	d131      	bne.n	800ff6c <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 800ff08:	4b1c      	ldr	r3, [pc, #112]	; (800ff7c <FATFS_LinkDriverEx+0x94>)
 800ff0a:	7a5b      	ldrb	r3, [r3, #9]
 800ff0c:	b2db      	uxtb	r3, r3
 800ff0e:	461a      	mov	r2, r3
 800ff10:	4b1a      	ldr	r3, [pc, #104]	; (800ff7c <FATFS_LinkDriverEx+0x94>)
 800ff12:	2100      	movs	r1, #0
 800ff14:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 800ff16:	4b19      	ldr	r3, [pc, #100]	; (800ff7c <FATFS_LinkDriverEx+0x94>)
 800ff18:	7a5b      	ldrb	r3, [r3, #9]
 800ff1a:	b2db      	uxtb	r3, r3
 800ff1c:	4a17      	ldr	r2, [pc, #92]	; (800ff7c <FATFS_LinkDriverEx+0x94>)
 800ff1e:	009b      	lsls	r3, r3, #2
 800ff20:	4413      	add	r3, r2
 800ff22:	68fa      	ldr	r2, [r7, #12]
 800ff24:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 800ff26:	4b15      	ldr	r3, [pc, #84]	; (800ff7c <FATFS_LinkDriverEx+0x94>)
 800ff28:	7a5b      	ldrb	r3, [r3, #9]
 800ff2a:	b2db      	uxtb	r3, r3
 800ff2c:	461a      	mov	r2, r3
 800ff2e:	4b13      	ldr	r3, [pc, #76]	; (800ff7c <FATFS_LinkDriverEx+0x94>)
 800ff30:	4413      	add	r3, r2
 800ff32:	79fa      	ldrb	r2, [r7, #7]
 800ff34:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 800ff36:	4b11      	ldr	r3, [pc, #68]	; (800ff7c <FATFS_LinkDriverEx+0x94>)
 800ff38:	7a5b      	ldrb	r3, [r3, #9]
 800ff3a:	b2db      	uxtb	r3, r3
 800ff3c:	1c5a      	adds	r2, r3, #1
 800ff3e:	b2d1      	uxtb	r1, r2
 800ff40:	4a0e      	ldr	r2, [pc, #56]	; (800ff7c <FATFS_LinkDriverEx+0x94>)
 800ff42:	7251      	strb	r1, [r2, #9]
 800ff44:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 800ff46:	7dbb      	ldrb	r3, [r7, #22]
 800ff48:	3330      	adds	r3, #48	; 0x30
 800ff4a:	b2da      	uxtb	r2, r3
 800ff4c:	68bb      	ldr	r3, [r7, #8]
 800ff4e:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 800ff50:	68bb      	ldr	r3, [r7, #8]
 800ff52:	3301      	adds	r3, #1
 800ff54:	223a      	movs	r2, #58	; 0x3a
 800ff56:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 800ff58:	68bb      	ldr	r3, [r7, #8]
 800ff5a:	3302      	adds	r3, #2
 800ff5c:	222f      	movs	r2, #47	; 0x2f
 800ff5e:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 800ff60:	68bb      	ldr	r3, [r7, #8]
 800ff62:	3303      	adds	r3, #3
 800ff64:	2200      	movs	r2, #0
 800ff66:	701a      	strb	r2, [r3, #0]
    ret = 0;
 800ff68:	2300      	movs	r3, #0
 800ff6a:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 800ff6c:	7dfb      	ldrb	r3, [r7, #23]
}
 800ff6e:	4618      	mov	r0, r3
 800ff70:	371c      	adds	r7, #28
 800ff72:	46bd      	mov	sp, r7
 800ff74:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ff78:	4770      	bx	lr
 800ff7a:	bf00      	nop
 800ff7c:	2400142c 	.word	0x2400142c

0800ff80 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 800ff80:	b580      	push	{r7, lr}
 800ff82:	b082      	sub	sp, #8
 800ff84:	af00      	add	r7, sp, #0
 800ff86:	6078      	str	r0, [r7, #4]
 800ff88:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 800ff8a:	2200      	movs	r2, #0
 800ff8c:	6839      	ldr	r1, [r7, #0]
 800ff8e:	6878      	ldr	r0, [r7, #4]
 800ff90:	f7ff ffaa 	bl	800fee8 <FATFS_LinkDriverEx>
 800ff94:	4603      	mov	r3, r0
}
 800ff96:	4618      	mov	r0, r3
 800ff98:	3708      	adds	r7, #8
 800ff9a:	46bd      	mov	sp, r7
 800ff9c:	bd80      	pop	{r7, pc}

0800ff9e <memmove>:
 800ff9e:	4288      	cmp	r0, r1
 800ffa0:	b510      	push	{r4, lr}
 800ffa2:	eb01 0402 	add.w	r4, r1, r2
 800ffa6:	d902      	bls.n	800ffae <memmove+0x10>
 800ffa8:	4284      	cmp	r4, r0
 800ffaa:	4623      	mov	r3, r4
 800ffac:	d807      	bhi.n	800ffbe <memmove+0x20>
 800ffae:	1e43      	subs	r3, r0, #1
 800ffb0:	42a1      	cmp	r1, r4
 800ffb2:	d008      	beq.n	800ffc6 <memmove+0x28>
 800ffb4:	f811 2b01 	ldrb.w	r2, [r1], #1
 800ffb8:	f803 2f01 	strb.w	r2, [r3, #1]!
 800ffbc:	e7f8      	b.n	800ffb0 <memmove+0x12>
 800ffbe:	4402      	add	r2, r0
 800ffc0:	4601      	mov	r1, r0
 800ffc2:	428a      	cmp	r2, r1
 800ffc4:	d100      	bne.n	800ffc8 <memmove+0x2a>
 800ffc6:	bd10      	pop	{r4, pc}
 800ffc8:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800ffcc:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800ffd0:	e7f7      	b.n	800ffc2 <memmove+0x24>

0800ffd2 <memset>:
 800ffd2:	4402      	add	r2, r0
 800ffd4:	4603      	mov	r3, r0
 800ffd6:	4293      	cmp	r3, r2
 800ffd8:	d100      	bne.n	800ffdc <memset+0xa>
 800ffda:	4770      	bx	lr
 800ffdc:	f803 1b01 	strb.w	r1, [r3], #1
 800ffe0:	e7f9      	b.n	800ffd6 <memset+0x4>
	...

0800ffe4 <__libc_init_array>:
 800ffe4:	b570      	push	{r4, r5, r6, lr}
 800ffe6:	4d0d      	ldr	r5, [pc, #52]	; (801001c <__libc_init_array+0x38>)
 800ffe8:	4c0d      	ldr	r4, [pc, #52]	; (8010020 <__libc_init_array+0x3c>)
 800ffea:	1b64      	subs	r4, r4, r5
 800ffec:	10a4      	asrs	r4, r4, #2
 800ffee:	2600      	movs	r6, #0
 800fff0:	42a6      	cmp	r6, r4
 800fff2:	d109      	bne.n	8010008 <__libc_init_array+0x24>
 800fff4:	4d0b      	ldr	r5, [pc, #44]	; (8010024 <__libc_init_array+0x40>)
 800fff6:	4c0c      	ldr	r4, [pc, #48]	; (8010028 <__libc_init_array+0x44>)
 800fff8:	f000 f826 	bl	8010048 <_init>
 800fffc:	1b64      	subs	r4, r4, r5
 800fffe:	10a4      	asrs	r4, r4, #2
 8010000:	2600      	movs	r6, #0
 8010002:	42a6      	cmp	r6, r4
 8010004:	d105      	bne.n	8010012 <__libc_init_array+0x2e>
 8010006:	bd70      	pop	{r4, r5, r6, pc}
 8010008:	f855 3b04 	ldr.w	r3, [r5], #4
 801000c:	4798      	blx	r3
 801000e:	3601      	adds	r6, #1
 8010010:	e7ee      	b.n	800fff0 <__libc_init_array+0xc>
 8010012:	f855 3b04 	ldr.w	r3, [r5], #4
 8010016:	4798      	blx	r3
 8010018:	3601      	adds	r6, #1
 801001a:	e7f2      	b.n	8010002 <__libc_init_array+0x1e>
 801001c:	08010230 	.word	0x08010230
 8010020:	08010230 	.word	0x08010230
 8010024:	08010230 	.word	0x08010230
 8010028:	08010234 	.word	0x08010234

0801002c <memcpy>:
 801002c:	440a      	add	r2, r1
 801002e:	4291      	cmp	r1, r2
 8010030:	f100 33ff 	add.w	r3, r0, #4294967295
 8010034:	d100      	bne.n	8010038 <memcpy+0xc>
 8010036:	4770      	bx	lr
 8010038:	b510      	push	{r4, lr}
 801003a:	f811 4b01 	ldrb.w	r4, [r1], #1
 801003e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8010042:	4291      	cmp	r1, r2
 8010044:	d1f9      	bne.n	801003a <memcpy+0xe>
 8010046:	bd10      	pop	{r4, pc}

08010048 <_init>:
 8010048:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801004a:	bf00      	nop
 801004c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801004e:	bc08      	pop	{r3}
 8010050:	469e      	mov	lr, r3
 8010052:	4770      	bx	lr

08010054 <_fini>:
 8010054:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010056:	bf00      	nop
 8010058:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801005a:	bc08      	pop	{r3}
 801005c:	469e      	mov	lr, r3
 801005e:	4770      	bx	lr
