
frida_CM7.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005070  08000298  08000298  00010298  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000038  08005308  08005308  00015308  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005340  08005340  00020010  2**0
                  CONTENTS
  4 .ARM          00000008  08005340  08005340  00015340  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005348  08005348  00020010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005348  08005348  00015348  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800534c  0800534c  0001534c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  24000000  08005350  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000b4  24000010  08005360  00020010  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  240000c4  08005360  000200c4  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  0002003e  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000fccf  00000000  00000000  00020081  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001e4e  00000000  00000000  0002fd50  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000af8  00000000  00000000  00031ba0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 0000086c  00000000  00000000  00032698  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0003e0ea  00000000  00000000  00032f04  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000ef8b  00000000  00000000  00070fee  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    001939b6  00000000  00000000  0007ff79  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00002cd8  00000000  00000000  00213930  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000060  00000000  00000000  00216608  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000298 <__do_global_dtors_aux>:
 8000298:	b510      	push	{r4, lr}
 800029a:	4c05      	ldr	r4, [pc, #20]	; (80002b0 <__do_global_dtors_aux+0x18>)
 800029c:	7823      	ldrb	r3, [r4, #0]
 800029e:	b933      	cbnz	r3, 80002ae <__do_global_dtors_aux+0x16>
 80002a0:	4b04      	ldr	r3, [pc, #16]	; (80002b4 <__do_global_dtors_aux+0x1c>)
 80002a2:	b113      	cbz	r3, 80002aa <__do_global_dtors_aux+0x12>
 80002a4:	4804      	ldr	r0, [pc, #16]	; (80002b8 <__do_global_dtors_aux+0x20>)
 80002a6:	f3af 8000 	nop.w
 80002aa:	2301      	movs	r3, #1
 80002ac:	7023      	strb	r3, [r4, #0]
 80002ae:	bd10      	pop	{r4, pc}
 80002b0:	24000010 	.word	0x24000010
 80002b4:	00000000 	.word	0x00000000
 80002b8:	080052f0 	.word	0x080052f0

080002bc <frame_dummy>:
 80002bc:	b508      	push	{r3, lr}
 80002be:	4b03      	ldr	r3, [pc, #12]	; (80002cc <frame_dummy+0x10>)
 80002c0:	b11b      	cbz	r3, 80002ca <frame_dummy+0xe>
 80002c2:	4903      	ldr	r1, [pc, #12]	; (80002d0 <frame_dummy+0x14>)
 80002c4:	4803      	ldr	r0, [pc, #12]	; (80002d4 <frame_dummy+0x18>)
 80002c6:	f3af 8000 	nop.w
 80002ca:	bd08      	pop	{r3, pc}
 80002cc:	00000000 	.word	0x00000000
 80002d0:	24000014 	.word	0x24000014
 80002d4:	080052f0 	.word	0x080052f0

080002d8 <__aeabi_uldivmod>:
 80002d8:	b953      	cbnz	r3, 80002f0 <__aeabi_uldivmod+0x18>
 80002da:	b94a      	cbnz	r2, 80002f0 <__aeabi_uldivmod+0x18>
 80002dc:	2900      	cmp	r1, #0
 80002de:	bf08      	it	eq
 80002e0:	2800      	cmpeq	r0, #0
 80002e2:	bf1c      	itt	ne
 80002e4:	f04f 31ff 	movne.w	r1, #4294967295
 80002e8:	f04f 30ff 	movne.w	r0, #4294967295
 80002ec:	f000 b970 	b.w	80005d0 <__aeabi_idiv0>
 80002f0:	f1ad 0c08 	sub.w	ip, sp, #8
 80002f4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002f8:	f000 f806 	bl	8000308 <__udivmoddi4>
 80002fc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000300:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000304:	b004      	add	sp, #16
 8000306:	4770      	bx	lr

08000308 <__udivmoddi4>:
 8000308:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800030c:	9e08      	ldr	r6, [sp, #32]
 800030e:	460d      	mov	r5, r1
 8000310:	4604      	mov	r4, r0
 8000312:	460f      	mov	r7, r1
 8000314:	2b00      	cmp	r3, #0
 8000316:	d14a      	bne.n	80003ae <__udivmoddi4+0xa6>
 8000318:	428a      	cmp	r2, r1
 800031a:	4694      	mov	ip, r2
 800031c:	d965      	bls.n	80003ea <__udivmoddi4+0xe2>
 800031e:	fab2 f382 	clz	r3, r2
 8000322:	b143      	cbz	r3, 8000336 <__udivmoddi4+0x2e>
 8000324:	fa02 fc03 	lsl.w	ip, r2, r3
 8000328:	f1c3 0220 	rsb	r2, r3, #32
 800032c:	409f      	lsls	r7, r3
 800032e:	fa20 f202 	lsr.w	r2, r0, r2
 8000332:	4317      	orrs	r7, r2
 8000334:	409c      	lsls	r4, r3
 8000336:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 800033a:	fa1f f58c 	uxth.w	r5, ip
 800033e:	fbb7 f1fe 	udiv	r1, r7, lr
 8000342:	0c22      	lsrs	r2, r4, #16
 8000344:	fb0e 7711 	mls	r7, lr, r1, r7
 8000348:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 800034c:	fb01 f005 	mul.w	r0, r1, r5
 8000350:	4290      	cmp	r0, r2
 8000352:	d90a      	bls.n	800036a <__udivmoddi4+0x62>
 8000354:	eb1c 0202 	adds.w	r2, ip, r2
 8000358:	f101 37ff 	add.w	r7, r1, #4294967295
 800035c:	f080 811c 	bcs.w	8000598 <__udivmoddi4+0x290>
 8000360:	4290      	cmp	r0, r2
 8000362:	f240 8119 	bls.w	8000598 <__udivmoddi4+0x290>
 8000366:	3902      	subs	r1, #2
 8000368:	4462      	add	r2, ip
 800036a:	1a12      	subs	r2, r2, r0
 800036c:	b2a4      	uxth	r4, r4
 800036e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000372:	fb0e 2210 	mls	r2, lr, r0, r2
 8000376:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800037a:	fb00 f505 	mul.w	r5, r0, r5
 800037e:	42a5      	cmp	r5, r4
 8000380:	d90a      	bls.n	8000398 <__udivmoddi4+0x90>
 8000382:	eb1c 0404 	adds.w	r4, ip, r4
 8000386:	f100 32ff 	add.w	r2, r0, #4294967295
 800038a:	f080 8107 	bcs.w	800059c <__udivmoddi4+0x294>
 800038e:	42a5      	cmp	r5, r4
 8000390:	f240 8104 	bls.w	800059c <__udivmoddi4+0x294>
 8000394:	4464      	add	r4, ip
 8000396:	3802      	subs	r0, #2
 8000398:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 800039c:	1b64      	subs	r4, r4, r5
 800039e:	2100      	movs	r1, #0
 80003a0:	b11e      	cbz	r6, 80003aa <__udivmoddi4+0xa2>
 80003a2:	40dc      	lsrs	r4, r3
 80003a4:	2300      	movs	r3, #0
 80003a6:	e9c6 4300 	strd	r4, r3, [r6]
 80003aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ae:	428b      	cmp	r3, r1
 80003b0:	d908      	bls.n	80003c4 <__udivmoddi4+0xbc>
 80003b2:	2e00      	cmp	r6, #0
 80003b4:	f000 80ed 	beq.w	8000592 <__udivmoddi4+0x28a>
 80003b8:	2100      	movs	r1, #0
 80003ba:	e9c6 0500 	strd	r0, r5, [r6]
 80003be:	4608      	mov	r0, r1
 80003c0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003c4:	fab3 f183 	clz	r1, r3
 80003c8:	2900      	cmp	r1, #0
 80003ca:	d149      	bne.n	8000460 <__udivmoddi4+0x158>
 80003cc:	42ab      	cmp	r3, r5
 80003ce:	d302      	bcc.n	80003d6 <__udivmoddi4+0xce>
 80003d0:	4282      	cmp	r2, r0
 80003d2:	f200 80f8 	bhi.w	80005c6 <__udivmoddi4+0x2be>
 80003d6:	1a84      	subs	r4, r0, r2
 80003d8:	eb65 0203 	sbc.w	r2, r5, r3
 80003dc:	2001      	movs	r0, #1
 80003de:	4617      	mov	r7, r2
 80003e0:	2e00      	cmp	r6, #0
 80003e2:	d0e2      	beq.n	80003aa <__udivmoddi4+0xa2>
 80003e4:	e9c6 4700 	strd	r4, r7, [r6]
 80003e8:	e7df      	b.n	80003aa <__udivmoddi4+0xa2>
 80003ea:	b902      	cbnz	r2, 80003ee <__udivmoddi4+0xe6>
 80003ec:	deff      	udf	#255	; 0xff
 80003ee:	fab2 f382 	clz	r3, r2
 80003f2:	2b00      	cmp	r3, #0
 80003f4:	f040 8090 	bne.w	8000518 <__udivmoddi4+0x210>
 80003f8:	1a8a      	subs	r2, r1, r2
 80003fa:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003fe:	fa1f fe8c 	uxth.w	lr, ip
 8000402:	2101      	movs	r1, #1
 8000404:	fbb2 f5f7 	udiv	r5, r2, r7
 8000408:	fb07 2015 	mls	r0, r7, r5, r2
 800040c:	0c22      	lsrs	r2, r4, #16
 800040e:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000412:	fb0e f005 	mul.w	r0, lr, r5
 8000416:	4290      	cmp	r0, r2
 8000418:	d908      	bls.n	800042c <__udivmoddi4+0x124>
 800041a:	eb1c 0202 	adds.w	r2, ip, r2
 800041e:	f105 38ff 	add.w	r8, r5, #4294967295
 8000422:	d202      	bcs.n	800042a <__udivmoddi4+0x122>
 8000424:	4290      	cmp	r0, r2
 8000426:	f200 80cb 	bhi.w	80005c0 <__udivmoddi4+0x2b8>
 800042a:	4645      	mov	r5, r8
 800042c:	1a12      	subs	r2, r2, r0
 800042e:	b2a4      	uxth	r4, r4
 8000430:	fbb2 f0f7 	udiv	r0, r2, r7
 8000434:	fb07 2210 	mls	r2, r7, r0, r2
 8000438:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800043c:	fb0e fe00 	mul.w	lr, lr, r0
 8000440:	45a6      	cmp	lr, r4
 8000442:	d908      	bls.n	8000456 <__udivmoddi4+0x14e>
 8000444:	eb1c 0404 	adds.w	r4, ip, r4
 8000448:	f100 32ff 	add.w	r2, r0, #4294967295
 800044c:	d202      	bcs.n	8000454 <__udivmoddi4+0x14c>
 800044e:	45a6      	cmp	lr, r4
 8000450:	f200 80bb 	bhi.w	80005ca <__udivmoddi4+0x2c2>
 8000454:	4610      	mov	r0, r2
 8000456:	eba4 040e 	sub.w	r4, r4, lr
 800045a:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 800045e:	e79f      	b.n	80003a0 <__udivmoddi4+0x98>
 8000460:	f1c1 0720 	rsb	r7, r1, #32
 8000464:	408b      	lsls	r3, r1
 8000466:	fa22 fc07 	lsr.w	ip, r2, r7
 800046a:	ea4c 0c03 	orr.w	ip, ip, r3
 800046e:	fa05 f401 	lsl.w	r4, r5, r1
 8000472:	fa20 f307 	lsr.w	r3, r0, r7
 8000476:	40fd      	lsrs	r5, r7
 8000478:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800047c:	4323      	orrs	r3, r4
 800047e:	fbb5 f8f9 	udiv	r8, r5, r9
 8000482:	fa1f fe8c 	uxth.w	lr, ip
 8000486:	fb09 5518 	mls	r5, r9, r8, r5
 800048a:	0c1c      	lsrs	r4, r3, #16
 800048c:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000490:	fb08 f50e 	mul.w	r5, r8, lr
 8000494:	42a5      	cmp	r5, r4
 8000496:	fa02 f201 	lsl.w	r2, r2, r1
 800049a:	fa00 f001 	lsl.w	r0, r0, r1
 800049e:	d90b      	bls.n	80004b8 <__udivmoddi4+0x1b0>
 80004a0:	eb1c 0404 	adds.w	r4, ip, r4
 80004a4:	f108 3aff 	add.w	sl, r8, #4294967295
 80004a8:	f080 8088 	bcs.w	80005bc <__udivmoddi4+0x2b4>
 80004ac:	42a5      	cmp	r5, r4
 80004ae:	f240 8085 	bls.w	80005bc <__udivmoddi4+0x2b4>
 80004b2:	f1a8 0802 	sub.w	r8, r8, #2
 80004b6:	4464      	add	r4, ip
 80004b8:	1b64      	subs	r4, r4, r5
 80004ba:	b29d      	uxth	r5, r3
 80004bc:	fbb4 f3f9 	udiv	r3, r4, r9
 80004c0:	fb09 4413 	mls	r4, r9, r3, r4
 80004c4:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80004c8:	fb03 fe0e 	mul.w	lr, r3, lr
 80004cc:	45a6      	cmp	lr, r4
 80004ce:	d908      	bls.n	80004e2 <__udivmoddi4+0x1da>
 80004d0:	eb1c 0404 	adds.w	r4, ip, r4
 80004d4:	f103 35ff 	add.w	r5, r3, #4294967295
 80004d8:	d26c      	bcs.n	80005b4 <__udivmoddi4+0x2ac>
 80004da:	45a6      	cmp	lr, r4
 80004dc:	d96a      	bls.n	80005b4 <__udivmoddi4+0x2ac>
 80004de:	3b02      	subs	r3, #2
 80004e0:	4464      	add	r4, ip
 80004e2:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80004e6:	fba3 9502 	umull	r9, r5, r3, r2
 80004ea:	eba4 040e 	sub.w	r4, r4, lr
 80004ee:	42ac      	cmp	r4, r5
 80004f0:	46c8      	mov	r8, r9
 80004f2:	46ae      	mov	lr, r5
 80004f4:	d356      	bcc.n	80005a4 <__udivmoddi4+0x29c>
 80004f6:	d053      	beq.n	80005a0 <__udivmoddi4+0x298>
 80004f8:	b156      	cbz	r6, 8000510 <__udivmoddi4+0x208>
 80004fa:	ebb0 0208 	subs.w	r2, r0, r8
 80004fe:	eb64 040e 	sbc.w	r4, r4, lr
 8000502:	fa04 f707 	lsl.w	r7, r4, r7
 8000506:	40ca      	lsrs	r2, r1
 8000508:	40cc      	lsrs	r4, r1
 800050a:	4317      	orrs	r7, r2
 800050c:	e9c6 7400 	strd	r7, r4, [r6]
 8000510:	4618      	mov	r0, r3
 8000512:	2100      	movs	r1, #0
 8000514:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000518:	f1c3 0120 	rsb	r1, r3, #32
 800051c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000520:	fa20 f201 	lsr.w	r2, r0, r1
 8000524:	fa25 f101 	lsr.w	r1, r5, r1
 8000528:	409d      	lsls	r5, r3
 800052a:	432a      	orrs	r2, r5
 800052c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000530:	fa1f fe8c 	uxth.w	lr, ip
 8000534:	fbb1 f0f7 	udiv	r0, r1, r7
 8000538:	fb07 1510 	mls	r5, r7, r0, r1
 800053c:	0c11      	lsrs	r1, r2, #16
 800053e:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000542:	fb00 f50e 	mul.w	r5, r0, lr
 8000546:	428d      	cmp	r5, r1
 8000548:	fa04 f403 	lsl.w	r4, r4, r3
 800054c:	d908      	bls.n	8000560 <__udivmoddi4+0x258>
 800054e:	eb1c 0101 	adds.w	r1, ip, r1
 8000552:	f100 38ff 	add.w	r8, r0, #4294967295
 8000556:	d22f      	bcs.n	80005b8 <__udivmoddi4+0x2b0>
 8000558:	428d      	cmp	r5, r1
 800055a:	d92d      	bls.n	80005b8 <__udivmoddi4+0x2b0>
 800055c:	3802      	subs	r0, #2
 800055e:	4461      	add	r1, ip
 8000560:	1b49      	subs	r1, r1, r5
 8000562:	b292      	uxth	r2, r2
 8000564:	fbb1 f5f7 	udiv	r5, r1, r7
 8000568:	fb07 1115 	mls	r1, r7, r5, r1
 800056c:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000570:	fb05 f10e 	mul.w	r1, r5, lr
 8000574:	4291      	cmp	r1, r2
 8000576:	d908      	bls.n	800058a <__udivmoddi4+0x282>
 8000578:	eb1c 0202 	adds.w	r2, ip, r2
 800057c:	f105 38ff 	add.w	r8, r5, #4294967295
 8000580:	d216      	bcs.n	80005b0 <__udivmoddi4+0x2a8>
 8000582:	4291      	cmp	r1, r2
 8000584:	d914      	bls.n	80005b0 <__udivmoddi4+0x2a8>
 8000586:	3d02      	subs	r5, #2
 8000588:	4462      	add	r2, ip
 800058a:	1a52      	subs	r2, r2, r1
 800058c:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000590:	e738      	b.n	8000404 <__udivmoddi4+0xfc>
 8000592:	4631      	mov	r1, r6
 8000594:	4630      	mov	r0, r6
 8000596:	e708      	b.n	80003aa <__udivmoddi4+0xa2>
 8000598:	4639      	mov	r1, r7
 800059a:	e6e6      	b.n	800036a <__udivmoddi4+0x62>
 800059c:	4610      	mov	r0, r2
 800059e:	e6fb      	b.n	8000398 <__udivmoddi4+0x90>
 80005a0:	4548      	cmp	r0, r9
 80005a2:	d2a9      	bcs.n	80004f8 <__udivmoddi4+0x1f0>
 80005a4:	ebb9 0802 	subs.w	r8, r9, r2
 80005a8:	eb65 0e0c 	sbc.w	lr, r5, ip
 80005ac:	3b01      	subs	r3, #1
 80005ae:	e7a3      	b.n	80004f8 <__udivmoddi4+0x1f0>
 80005b0:	4645      	mov	r5, r8
 80005b2:	e7ea      	b.n	800058a <__udivmoddi4+0x282>
 80005b4:	462b      	mov	r3, r5
 80005b6:	e794      	b.n	80004e2 <__udivmoddi4+0x1da>
 80005b8:	4640      	mov	r0, r8
 80005ba:	e7d1      	b.n	8000560 <__udivmoddi4+0x258>
 80005bc:	46d0      	mov	r8, sl
 80005be:	e77b      	b.n	80004b8 <__udivmoddi4+0x1b0>
 80005c0:	3d02      	subs	r5, #2
 80005c2:	4462      	add	r2, ip
 80005c4:	e732      	b.n	800042c <__udivmoddi4+0x124>
 80005c6:	4608      	mov	r0, r1
 80005c8:	e70a      	b.n	80003e0 <__udivmoddi4+0xd8>
 80005ca:	4464      	add	r4, ip
 80005cc:	3802      	subs	r0, #2
 80005ce:	e742      	b.n	8000456 <__udivmoddi4+0x14e>

080005d0 <__aeabi_idiv0>:
 80005d0:	4770      	bx	lr
 80005d2:	bf00      	nop

080005d4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80005d4:	b480      	push	{r7}
 80005d6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80005d8:	4b3d      	ldr	r3, [pc, #244]	; (80006d0 <SystemInit+0xfc>)
 80005da:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80005de:	4a3c      	ldr	r2, [pc, #240]	; (80006d0 <SystemInit+0xfc>)
 80005e0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80005e4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

    /*SEVONPEND enabled so that an interrupt coming from the CPU(n) interrupt signal is
     detectable by the CPU after a WFI/WFE instruction.*/
 SCB->SCR |= SCB_SCR_SEVONPEND_Msk;
 80005e8:	4b39      	ldr	r3, [pc, #228]	; (80006d0 <SystemInit+0xfc>)
 80005ea:	691b      	ldr	r3, [r3, #16]
 80005ec:	4a38      	ldr	r2, [pc, #224]	; (80006d0 <SystemInit+0xfc>)
 80005ee:	f043 0310 	orr.w	r3, r3, #16
 80005f2:	6113      	str	r3, [r2, #16]

#if defined(CORE_CM7)
  /* Reset the RCC clock configuration to the default reset state ------------*/
   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80005f4:	4b37      	ldr	r3, [pc, #220]	; (80006d4 <SystemInit+0x100>)
 80005f6:	681b      	ldr	r3, [r3, #0]
 80005f8:	f003 030f 	and.w	r3, r3, #15
 80005fc:	2b06      	cmp	r3, #6
 80005fe:	d807      	bhi.n	8000610 <SystemInit+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000600:	4b34      	ldr	r3, [pc, #208]	; (80006d4 <SystemInit+0x100>)
 8000602:	681b      	ldr	r3, [r3, #0]
 8000604:	f023 030f 	bic.w	r3, r3, #15
 8000608:	4a32      	ldr	r2, [pc, #200]	; (80006d4 <SystemInit+0x100>)
 800060a:	f043 0307 	orr.w	r3, r3, #7
 800060e:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8000610:	4b31      	ldr	r3, [pc, #196]	; (80006d8 <SystemInit+0x104>)
 8000612:	681b      	ldr	r3, [r3, #0]
 8000614:	4a30      	ldr	r2, [pc, #192]	; (80006d8 <SystemInit+0x104>)
 8000616:	f043 0301 	orr.w	r3, r3, #1
 800061a:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 800061c:	4b2e      	ldr	r3, [pc, #184]	; (80006d8 <SystemInit+0x104>)
 800061e:	2200      	movs	r2, #0
 8000620:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8000622:	4b2d      	ldr	r3, [pc, #180]	; (80006d8 <SystemInit+0x104>)
 8000624:	681a      	ldr	r2, [r3, #0]
 8000626:	492c      	ldr	r1, [pc, #176]	; (80006d8 <SystemInit+0x104>)
 8000628:	4b2c      	ldr	r3, [pc, #176]	; (80006dc <SystemInit+0x108>)
 800062a:	4013      	ands	r3, r2
 800062c:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 800062e:	4b29      	ldr	r3, [pc, #164]	; (80006d4 <SystemInit+0x100>)
 8000630:	681b      	ldr	r3, [r3, #0]
 8000632:	f003 0308 	and.w	r3, r3, #8
 8000636:	2b00      	cmp	r3, #0
 8000638:	d007      	beq.n	800064a <SystemInit+0x76>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 800063a:	4b26      	ldr	r3, [pc, #152]	; (80006d4 <SystemInit+0x100>)
 800063c:	681b      	ldr	r3, [r3, #0]
 800063e:	f023 030f 	bic.w	r3, r3, #15
 8000642:	4a24      	ldr	r2, [pc, #144]	; (80006d4 <SystemInit+0x100>)
 8000644:	f043 0307 	orr.w	r3, r3, #7
 8000648:	6013      	str	r3, [r2, #0]
  }

  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 800064a:	4b23      	ldr	r3, [pc, #140]	; (80006d8 <SystemInit+0x104>)
 800064c:	2200      	movs	r2, #0
 800064e:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8000650:	4b21      	ldr	r3, [pc, #132]	; (80006d8 <SystemInit+0x104>)
 8000652:	2200      	movs	r2, #0
 8000654:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8000656:	4b20      	ldr	r3, [pc, #128]	; (80006d8 <SystemInit+0x104>)
 8000658:	2200      	movs	r2, #0
 800065a:	621a      	str	r2, [r3, #32]

  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 800065c:	4b1e      	ldr	r3, [pc, #120]	; (80006d8 <SystemInit+0x104>)
 800065e:	4a20      	ldr	r2, [pc, #128]	; (80006e0 <SystemInit+0x10c>)
 8000660:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8000662:	4b1d      	ldr	r3, [pc, #116]	; (80006d8 <SystemInit+0x104>)
 8000664:	4a1f      	ldr	r2, [pc, #124]	; (80006e4 <SystemInit+0x110>)
 8000666:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8000668:	4b1b      	ldr	r3, [pc, #108]	; (80006d8 <SystemInit+0x104>)
 800066a:	4a1f      	ldr	r2, [pc, #124]	; (80006e8 <SystemInit+0x114>)
 800066c:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 800066e:	4b1a      	ldr	r3, [pc, #104]	; (80006d8 <SystemInit+0x104>)
 8000670:	2200      	movs	r2, #0
 8000672:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8000674:	4b18      	ldr	r3, [pc, #96]	; (80006d8 <SystemInit+0x104>)
 8000676:	4a1c      	ldr	r2, [pc, #112]	; (80006e8 <SystemInit+0x114>)
 8000678:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 800067a:	4b17      	ldr	r3, [pc, #92]	; (80006d8 <SystemInit+0x104>)
 800067c:	2200      	movs	r2, #0
 800067e:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8000680:	4b15      	ldr	r3, [pc, #84]	; (80006d8 <SystemInit+0x104>)
 8000682:	4a19      	ldr	r2, [pc, #100]	; (80006e8 <SystemInit+0x114>)
 8000684:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8000686:	4b14      	ldr	r3, [pc, #80]	; (80006d8 <SystemInit+0x104>)
 8000688:	2200      	movs	r2, #0
 800068a:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 800068c:	4b12      	ldr	r3, [pc, #72]	; (80006d8 <SystemInit+0x104>)
 800068e:	681b      	ldr	r3, [r3, #0]
 8000690:	4a11      	ldr	r2, [pc, #68]	; (80006d8 <SystemInit+0x104>)
 8000692:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000696:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8000698:	4b0f      	ldr	r3, [pc, #60]	; (80006d8 <SystemInit+0x104>)
 800069a:	2200      	movs	r2, #0
 800069c:	661a      	str	r2, [r3, #96]	; 0x60

  /* Enable CortexM7 HSEM EXTI line (line 78)*/
  EXTI_D2->EMR3 |= 0x4000UL;
 800069e:	4b13      	ldr	r3, [pc, #76]	; (80006ec <SystemInit+0x118>)
 80006a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80006a2:	4a12      	ldr	r2, [pc, #72]	; (80006ec <SystemInit+0x118>)
 80006a4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80006a8:	6253      	str	r3, [r2, #36]	; 0x24

  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 80006aa:	4b11      	ldr	r3, [pc, #68]	; (80006f0 <SystemInit+0x11c>)
 80006ac:	681a      	ldr	r2, [r3, #0]
 80006ae:	4b11      	ldr	r3, [pc, #68]	; (80006f4 <SystemInit+0x120>)
 80006b0:	4013      	ands	r3, r2
 80006b2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80006b6:	d202      	bcs.n	80006be <SystemInit+0xea>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 80006b8:	4b0f      	ldr	r3, [pc, #60]	; (80006f8 <SystemInit+0x124>)
 80006ba:	2201      	movs	r2, #1
 80006bc:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 80006be:	4b0f      	ldr	r3, [pc, #60]	; (80006fc <SystemInit+0x128>)
 80006c0:	f243 02d2 	movw	r2, #12498	; 0x30d2
 80006c4:	601a      	str	r2, [r3, #0]
#endif /* USER_VECT_TAB_ADDRESS */

#else
#error Please #define CORE_CM4 or CORE_CM7
#endif /* CORE_CM4 */
}
 80006c6:	bf00      	nop
 80006c8:	46bd      	mov	sp, r7
 80006ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006ce:	4770      	bx	lr
 80006d0:	e000ed00 	.word	0xe000ed00
 80006d4:	52002000 	.word	0x52002000
 80006d8:	58024400 	.word	0x58024400
 80006dc:	eaf6ed7f 	.word	0xeaf6ed7f
 80006e0:	02020200 	.word	0x02020200
 80006e4:	01ff0000 	.word	0x01ff0000
 80006e8:	01010280 	.word	0x01010280
 80006ec:	580000c0 	.word	0x580000c0
 80006f0:	5c001000 	.word	0x5c001000
 80006f4:	ffff0000 	.word	0xffff0000
 80006f8:	51008108 	.word	0x51008108
 80006fc:	52004000 	.word	0x52004000

08000700 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000700:	b580      	push	{r7, lr}
 8000702:	b082      	sub	sp, #8
 8000704:	af00      	add	r7, sp, #0
  int32_t timeout;
/* USER CODE END Boot_Mode_Sequence_0 */

/* USER CODE BEGIN Boot_Mode_Sequence_1 */
  /* Wait until CPU2 boots and enters in stop mode or timeout*/
  timeout = 0xFFFF;
 8000706:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800070a:	607b      	str	r3, [r7, #4]
  while((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) != RESET) && (timeout-- > 0));
 800070c:	bf00      	nop
 800070e:	4b22      	ldr	r3, [pc, #136]	; (8000798 <main+0x98>)
 8000710:	681b      	ldr	r3, [r3, #0]
 8000712:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000716:	2b00      	cmp	r3, #0
 8000718:	d004      	beq.n	8000724 <main+0x24>
 800071a:	687b      	ldr	r3, [r7, #4]
 800071c:	1e5a      	subs	r2, r3, #1
 800071e:	607a      	str	r2, [r7, #4]
 8000720:	2b00      	cmp	r3, #0
 8000722:	dcf4      	bgt.n	800070e <main+0xe>
  if ( timeout < 0 )
 8000724:	687b      	ldr	r3, [r7, #4]
 8000726:	2b00      	cmp	r3, #0
 8000728:	da01      	bge.n	800072e <main+0x2e>
  {
  Error_Handler();
 800072a:	f000 f98b 	bl	8000a44 <Error_Handler>
  }
/* USER CODE END Boot_Mode_Sequence_1 */
  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800072e:	f000 fa67 	bl	8000c00 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000732:	f000 f833 	bl	800079c <SystemClock_Config>

/* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 8000736:	f000 f8b7 	bl	80008a8 <PeriphCommonClock_Config>
/* USER CODE BEGIN Boot_Mode_Sequence_2 */
/* When system initialization is finished, Cortex-M7 will release Cortex-M4 by means of
HSEM notification */
/*HW semaphore Clock enable*/
__HAL_RCC_HSEM_CLK_ENABLE();
 800073a:	4b17      	ldr	r3, [pc, #92]	; (8000798 <main+0x98>)
 800073c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000740:	4a15      	ldr	r2, [pc, #84]	; (8000798 <main+0x98>)
 8000742:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000746:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800074a:	4b13      	ldr	r3, [pc, #76]	; (8000798 <main+0x98>)
 800074c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000750:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000754:	603b      	str	r3, [r7, #0]
 8000756:	683b      	ldr	r3, [r7, #0]
/*Take HSEM */
HAL_HSEM_FastTake(HSEM_ID_0);
 8000758:	2000      	movs	r0, #0
 800075a:	f000 fd83 	bl	8001264 <HAL_HSEM_FastTake>
/*Release HSEM in order to notify the CPU2(CM4)*/
HAL_HSEM_Release(HSEM_ID_0,0);
 800075e:	2100      	movs	r1, #0
 8000760:	2000      	movs	r0, #0
 8000762:	f000 fd99 	bl	8001298 <HAL_HSEM_Release>
/* wait until CPU2 wakes up from stop mode */
timeout = 0xFFFF;
 8000766:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800076a:	607b      	str	r3, [r7, #4]
while((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) == RESET) && (timeout-- > 0));
 800076c:	bf00      	nop
 800076e:	4b0a      	ldr	r3, [pc, #40]	; (8000798 <main+0x98>)
 8000770:	681b      	ldr	r3, [r3, #0]
 8000772:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000776:	2b00      	cmp	r3, #0
 8000778:	d104      	bne.n	8000784 <main+0x84>
 800077a:	687b      	ldr	r3, [r7, #4]
 800077c:	1e5a      	subs	r2, r3, #1
 800077e:	607a      	str	r2, [r7, #4]
 8000780:	2b00      	cmp	r3, #0
 8000782:	dcf4      	bgt.n	800076e <main+0x6e>
if ( timeout < 0 )
 8000784:	687b      	ldr	r3, [r7, #4]
 8000786:	2b00      	cmp	r3, #0
 8000788:	da01      	bge.n	800078e <main+0x8e>
{
Error_Handler();
 800078a:	f000 f95b 	bl	8000a44 <Error_Handler>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800078e:	f000 f907 	bl	80009a0 <MX_GPIO_Init>
  MX_USART1_UART_Init();
 8000792:	f000 f8b9 	bl	8000908 <MX_USART1_UART_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000796:	e7fe      	b.n	8000796 <main+0x96>
 8000798:	58024400 	.word	0x58024400

0800079c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800079c:	b580      	push	{r7, lr}
 800079e:	b09c      	sub	sp, #112	; 0x70
 80007a0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80007a2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80007a6:	224c      	movs	r2, #76	; 0x4c
 80007a8:	2100      	movs	r1, #0
 80007aa:	4618      	mov	r0, r3
 80007ac:	f004 fd74 	bl	8005298 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80007b0:	1d3b      	adds	r3, r7, #4
 80007b2:	2220      	movs	r2, #32
 80007b4:	2100      	movs	r1, #0
 80007b6:	4618      	mov	r0, r3
 80007b8:	f004 fd6e 	bl	8005298 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_DIRECT_SMPS_SUPPLY);
 80007bc:	2004      	movs	r0, #4
 80007be:	f000 fd7f 	bl	80012c0 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80007c2:	2300      	movs	r3, #0
 80007c4:	603b      	str	r3, [r7, #0]
 80007c6:	4b36      	ldr	r3, [pc, #216]	; (80008a0 <SystemClock_Config+0x104>)
 80007c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80007ca:	4a35      	ldr	r2, [pc, #212]	; (80008a0 <SystemClock_Config+0x104>)
 80007cc:	f023 0301 	bic.w	r3, r3, #1
 80007d0:	62d3      	str	r3, [r2, #44]	; 0x2c
 80007d2:	4b33      	ldr	r3, [pc, #204]	; (80008a0 <SystemClock_Config+0x104>)
 80007d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80007d6:	f003 0301 	and.w	r3, r3, #1
 80007da:	603b      	str	r3, [r7, #0]
 80007dc:	4b31      	ldr	r3, [pc, #196]	; (80008a4 <SystemClock_Config+0x108>)
 80007de:	699b      	ldr	r3, [r3, #24]
 80007e0:	4a30      	ldr	r2, [pc, #192]	; (80008a4 <SystemClock_Config+0x108>)
 80007e2:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80007e6:	6193      	str	r3, [r2, #24]
 80007e8:	4b2e      	ldr	r3, [pc, #184]	; (80008a4 <SystemClock_Config+0x108>)
 80007ea:	699b      	ldr	r3, [r3, #24]
 80007ec:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80007f0:	603b      	str	r3, [r7, #0]
 80007f2:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 80007f4:	bf00      	nop
 80007f6:	4b2b      	ldr	r3, [pc, #172]	; (80008a4 <SystemClock_Config+0x108>)
 80007f8:	699b      	ldr	r3, [r3, #24]
 80007fa:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80007fe:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000802:	d1f8      	bne.n	80007f6 <SystemClock_Config+0x5a>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI
 8000804:	230b      	movs	r3, #11
 8000806:	627b      	str	r3, [r7, #36]	; 0x24
                              |RCC_OSCILLATORTYPE_HSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000808:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800080c:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 800080e:	2301      	movs	r3, #1
 8000810:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000812:	2340      	movs	r3, #64	; 0x40
 8000814:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8000816:	2301      	movs	r3, #1
 8000818:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800081a:	2302      	movs	r3, #2
 800081c:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800081e:	2302      	movs	r3, #2
 8000820:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 5;
 8000822:	2305      	movs	r3, #5
 8000824:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 48;
 8000826:	2330      	movs	r3, #48	; 0x30
 8000828:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 800082a:	2302      	movs	r3, #2
 800082c:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 5;
 800082e:	2305      	movs	r3, #5
 8000830:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000832:	2302      	movs	r3, #2
 8000834:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_2;
 8000836:	2308      	movs	r3, #8
 8000838:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 800083a:	2300      	movs	r3, #0
 800083c:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 800083e:	2300      	movs	r3, #0
 8000840:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000842:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000846:	4618      	mov	r0, r3
 8000848:	f000 fd94 	bl	8001374 <HAL_RCC_OscConfig>
 800084c:	4603      	mov	r3, r0
 800084e:	2b00      	cmp	r3, #0
 8000850:	d001      	beq.n	8000856 <SystemClock_Config+0xba>
  {
    Error_Handler();
 8000852:	f000 f8f7 	bl	8000a44 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000856:	233f      	movs	r3, #63	; 0x3f
 8000858:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 800085a:	2300      	movs	r3, #0
 800085c:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 800085e:	2300      	movs	r3, #0
 8000860:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 8000862:	2300      	movs	r3, #0
 8000864:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV1;
 8000866:	2300      	movs	r3, #0
 8000868:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV1;
 800086a:	2300      	movs	r3, #0
 800086c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV1;
 800086e:	2300      	movs	r3, #0
 8000870:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV1;
 8000872:	2300      	movs	r3, #0
 8000874:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000876:	1d3b      	adds	r3, r7, #4
 8000878:	2100      	movs	r1, #0
 800087a:	4618      	mov	r0, r3
 800087c:	f001 f9d4 	bl	8001c28 <HAL_RCC_ClockConfig>
 8000880:	4603      	mov	r3, r0
 8000882:	2b00      	cmp	r3, #0
 8000884:	d001      	beq.n	800088a <SystemClock_Config+0xee>
  {
    Error_Handler();
 8000886:	f000 f8dd 	bl	8000a44 <Error_Handler>
  }
  HAL_RCC_MCOConfig(RCC_MCO1, RCC_MCO1SOURCE_HSI, RCC_MCODIV_1);
 800088a:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 800088e:	2100      	movs	r1, #0
 8000890:	2000      	movs	r0, #0
 8000892:	f001 fb7f 	bl	8001f94 <HAL_RCC_MCOConfig>
}
 8000896:	bf00      	nop
 8000898:	3770      	adds	r7, #112	; 0x70
 800089a:	46bd      	mov	sp, r7
 800089c:	bd80      	pop	{r7, pc}
 800089e:	bf00      	nop
 80008a0:	58000400 	.word	0x58000400
 80008a4:	58024800 	.word	0x58024800

080008a8 <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 80008a8:	b580      	push	{r7, lr}
 80008aa:	b0b2      	sub	sp, #200	; 0xc8
 80008ac:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80008ae:	463b      	mov	r3, r7
 80008b0:	22c8      	movs	r2, #200	; 0xc8
 80008b2:	2100      	movs	r1, #0
 80008b4:	4618      	mov	r0, r3
 80008b6:	f004 fcef 	bl	8005298 <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 80008ba:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 80008be:	f04f 0300 	mov.w	r3, #0
 80008c2:	e9c7 2300 	strd	r2, r3, [r7]
  PeriphClkInitStruct.PLL2.PLL2M = 2;
 80008c6:	2302      	movs	r3, #2
 80008c8:	60bb      	str	r3, [r7, #8]
  PeriphClkInitStruct.PLL2.PLL2N = 12;
 80008ca:	230c      	movs	r3, #12
 80008cc:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.PLL2.PLL2P = 2;
 80008ce:	2302      	movs	r3, #2
 80008d0:	613b      	str	r3, [r7, #16]
  PeriphClkInitStruct.PLL2.PLL2Q = 2;
 80008d2:	2302      	movs	r3, #2
 80008d4:	617b      	str	r3, [r7, #20]
  PeriphClkInitStruct.PLL2.PLL2R = 2;
 80008d6:	2302      	movs	r3, #2
 80008d8:	61bb      	str	r3, [r7, #24]
  PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_3;
 80008da:	23c0      	movs	r3, #192	; 0xc0
 80008dc:	61fb      	str	r3, [r7, #28]
  PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOMEDIUM;
 80008de:	2320      	movs	r3, #32
 80008e0:	623b      	str	r3, [r7, #32]
  PeriphClkInitStruct.PLL2.PLL2FRACN = 0;
 80008e2:	2300      	movs	r3, #0
 80008e4:	627b      	str	r3, [r7, #36]	; 0x24
  PeriphClkInitStruct.AdcClockSelection = RCC_ADCCLKSOURCE_PLL2;
 80008e6:	2300      	movs	r3, #0
 80008e8:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80008ec:	463b      	mov	r3, r7
 80008ee:	4618      	mov	r0, r3
 80008f0:	f001 fd90 	bl	8002414 <HAL_RCCEx_PeriphCLKConfig>
 80008f4:	4603      	mov	r3, r0
 80008f6:	2b00      	cmp	r3, #0
 80008f8:	d001      	beq.n	80008fe <PeriphCommonClock_Config+0x56>
  {
    Error_Handler();
 80008fa:	f000 f8a3 	bl	8000a44 <Error_Handler>
  }
}
 80008fe:	bf00      	nop
 8000900:	37c8      	adds	r7, #200	; 0xc8
 8000902:	46bd      	mov	sp, r7
 8000904:	bd80      	pop	{r7, pc}
	...

08000908 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000908:	b580      	push	{r7, lr}
 800090a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 800090c:	4b22      	ldr	r3, [pc, #136]	; (8000998 <MX_USART1_UART_Init+0x90>)
 800090e:	4a23      	ldr	r2, [pc, #140]	; (800099c <MX_USART1_UART_Init+0x94>)
 8000910:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000912:	4b21      	ldr	r3, [pc, #132]	; (8000998 <MX_USART1_UART_Init+0x90>)
 8000914:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000918:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800091a:	4b1f      	ldr	r3, [pc, #124]	; (8000998 <MX_USART1_UART_Init+0x90>)
 800091c:	2200      	movs	r2, #0
 800091e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000920:	4b1d      	ldr	r3, [pc, #116]	; (8000998 <MX_USART1_UART_Init+0x90>)
 8000922:	2200      	movs	r2, #0
 8000924:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000926:	4b1c      	ldr	r3, [pc, #112]	; (8000998 <MX_USART1_UART_Init+0x90>)
 8000928:	2200      	movs	r2, #0
 800092a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800092c:	4b1a      	ldr	r3, [pc, #104]	; (8000998 <MX_USART1_UART_Init+0x90>)
 800092e:	220c      	movs	r2, #12
 8000930:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000932:	4b19      	ldr	r3, [pc, #100]	; (8000998 <MX_USART1_UART_Init+0x90>)
 8000934:	2200      	movs	r2, #0
 8000936:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000938:	4b17      	ldr	r3, [pc, #92]	; (8000998 <MX_USART1_UART_Init+0x90>)
 800093a:	2200      	movs	r2, #0
 800093c:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800093e:	4b16      	ldr	r3, [pc, #88]	; (8000998 <MX_USART1_UART_Init+0x90>)
 8000940:	2200      	movs	r2, #0
 8000942:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000944:	4b14      	ldr	r3, [pc, #80]	; (8000998 <MX_USART1_UART_Init+0x90>)
 8000946:	2200      	movs	r2, #0
 8000948:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800094a:	4b13      	ldr	r3, [pc, #76]	; (8000998 <MX_USART1_UART_Init+0x90>)
 800094c:	2200      	movs	r2, #0
 800094e:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000950:	4811      	ldr	r0, [pc, #68]	; (8000998 <MX_USART1_UART_Init+0x90>)
 8000952:	f003 fbcb 	bl	80040ec <HAL_UART_Init>
 8000956:	4603      	mov	r3, r0
 8000958:	2b00      	cmp	r3, #0
 800095a:	d001      	beq.n	8000960 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 800095c:	f000 f872 	bl	8000a44 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000960:	2100      	movs	r1, #0
 8000962:	480d      	ldr	r0, [pc, #52]	; (8000998 <MX_USART1_UART_Init+0x90>)
 8000964:	f004 fbcd 	bl	8005102 <HAL_UARTEx_SetTxFifoThreshold>
 8000968:	4603      	mov	r3, r0
 800096a:	2b00      	cmp	r3, #0
 800096c:	d001      	beq.n	8000972 <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 800096e:	f000 f869 	bl	8000a44 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000972:	2100      	movs	r1, #0
 8000974:	4808      	ldr	r0, [pc, #32]	; (8000998 <MX_USART1_UART_Init+0x90>)
 8000976:	f004 fc02 	bl	800517e <HAL_UARTEx_SetRxFifoThreshold>
 800097a:	4603      	mov	r3, r0
 800097c:	2b00      	cmp	r3, #0
 800097e:	d001      	beq.n	8000984 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 8000980:	f000 f860 	bl	8000a44 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8000984:	4804      	ldr	r0, [pc, #16]	; (8000998 <MX_USART1_UART_Init+0x90>)
 8000986:	f004 fb83 	bl	8005090 <HAL_UARTEx_DisableFifoMode>
 800098a:	4603      	mov	r3, r0
 800098c:	2b00      	cmp	r3, #0
 800098e:	d001      	beq.n	8000994 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8000990:	f000 f858 	bl	8000a44 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000994:	bf00      	nop
 8000996:	bd80      	pop	{r7, pc}
 8000998:	2400002c 	.word	0x2400002c
 800099c:	40011000 	.word	0x40011000

080009a0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80009a0:	b580      	push	{r7, lr}
 80009a2:	b088      	sub	sp, #32
 80009a4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009a6:	f107 030c 	add.w	r3, r7, #12
 80009aa:	2200      	movs	r2, #0
 80009ac:	601a      	str	r2, [r3, #0]
 80009ae:	605a      	str	r2, [r3, #4]
 80009b0:	609a      	str	r2, [r3, #8]
 80009b2:	60da      	str	r2, [r3, #12]
 80009b4:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80009b6:	4b21      	ldr	r3, [pc, #132]	; (8000a3c <MX_GPIO_Init+0x9c>)
 80009b8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80009bc:	4a1f      	ldr	r2, [pc, #124]	; (8000a3c <MX_GPIO_Init+0x9c>)
 80009be:	f043 0304 	orr.w	r3, r3, #4
 80009c2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80009c6:	4b1d      	ldr	r3, [pc, #116]	; (8000a3c <MX_GPIO_Init+0x9c>)
 80009c8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80009cc:	f003 0304 	and.w	r3, r3, #4
 80009d0:	60bb      	str	r3, [r7, #8]
 80009d2:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80009d4:	4b19      	ldr	r3, [pc, #100]	; (8000a3c <MX_GPIO_Init+0x9c>)
 80009d6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80009da:	4a18      	ldr	r2, [pc, #96]	; (8000a3c <MX_GPIO_Init+0x9c>)
 80009dc:	f043 0301 	orr.w	r3, r3, #1
 80009e0:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80009e4:	4b15      	ldr	r3, [pc, #84]	; (8000a3c <MX_GPIO_Init+0x9c>)
 80009e6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80009ea:	f003 0301 	and.w	r3, r3, #1
 80009ee:	607b      	str	r3, [r7, #4]
 80009f0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80009f2:	4b12      	ldr	r3, [pc, #72]	; (8000a3c <MX_GPIO_Init+0x9c>)
 80009f4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80009f8:	4a10      	ldr	r2, [pc, #64]	; (8000a3c <MX_GPIO_Init+0x9c>)
 80009fa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80009fe:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000a02:	4b0e      	ldr	r3, [pc, #56]	; (8000a3c <MX_GPIO_Init+0x9c>)
 8000a04:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000a08:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000a0c:	603b      	str	r3, [r7, #0]
 8000a0e:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin : CEC_CK_MCO1_Pin */
  GPIO_InitStruct.Pin = CEC_CK_MCO1_Pin;
 8000a10:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000a14:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a16:	2302      	movs	r3, #2
 8000a18:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a1a:	2300      	movs	r3, #0
 8000a1c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a1e:	2300      	movs	r3, #0
 8000a20:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 8000a22:	2300      	movs	r3, #0
 8000a24:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(CEC_CK_MCO1_GPIO_Port, &GPIO_InitStruct);
 8000a26:	f107 030c 	add.w	r3, r7, #12
 8000a2a:	4619      	mov	r1, r3
 8000a2c:	4804      	ldr	r0, [pc, #16]	; (8000a40 <MX_GPIO_Init+0xa0>)
 8000a2e:	f000 fa69 	bl	8000f04 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000a32:	bf00      	nop
 8000a34:	3720      	adds	r7, #32
 8000a36:	46bd      	mov	sp, r7
 8000a38:	bd80      	pop	{r7, pc}
 8000a3a:	bf00      	nop
 8000a3c:	58024400 	.word	0x58024400
 8000a40:	58020000 	.word	0x58020000

08000a44 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000a44:	b480      	push	{r7}
 8000a46:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000a48:	b672      	cpsid	i
}
 8000a4a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000a4c:	e7fe      	b.n	8000a4c <Error_Handler+0x8>
	...

08000a50 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000a50:	b480      	push	{r7}
 8000a52:	b083      	sub	sp, #12
 8000a54:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000a56:	4b0a      	ldr	r3, [pc, #40]	; (8000a80 <HAL_MspInit+0x30>)
 8000a58:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000a5c:	4a08      	ldr	r2, [pc, #32]	; (8000a80 <HAL_MspInit+0x30>)
 8000a5e:	f043 0302 	orr.w	r3, r3, #2
 8000a62:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8000a66:	4b06      	ldr	r3, [pc, #24]	; (8000a80 <HAL_MspInit+0x30>)
 8000a68:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000a6c:	f003 0302 	and.w	r3, r3, #2
 8000a70:	607b      	str	r3, [r7, #4]
 8000a72:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000a74:	bf00      	nop
 8000a76:	370c      	adds	r7, #12
 8000a78:	46bd      	mov	sp, r7
 8000a7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a7e:	4770      	bx	lr
 8000a80:	58024400 	.word	0x58024400

08000a84 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000a84:	b580      	push	{r7, lr}
 8000a86:	b0bc      	sub	sp, #240	; 0xf0
 8000a88:	af00      	add	r7, sp, #0
 8000a8a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a8c:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8000a90:	2200      	movs	r2, #0
 8000a92:	601a      	str	r2, [r3, #0]
 8000a94:	605a      	str	r2, [r3, #4]
 8000a96:	609a      	str	r2, [r3, #8]
 8000a98:	60da      	str	r2, [r3, #12]
 8000a9a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000a9c:	f107 0310 	add.w	r3, r7, #16
 8000aa0:	22c8      	movs	r2, #200	; 0xc8
 8000aa2:	2100      	movs	r1, #0
 8000aa4:	4618      	mov	r0, r3
 8000aa6:	f004 fbf7 	bl	8005298 <memset>
  if(huart->Instance==USART1)
 8000aaa:	687b      	ldr	r3, [r7, #4]
 8000aac:	681b      	ldr	r3, [r3, #0]
 8000aae:	4a27      	ldr	r2, [pc, #156]	; (8000b4c <HAL_UART_MspInit+0xc8>)
 8000ab0:	4293      	cmp	r3, r2
 8000ab2:	d146      	bne.n	8000b42 <HAL_UART_MspInit+0xbe>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8000ab4:	f04f 0201 	mov.w	r2, #1
 8000ab8:	f04f 0300 	mov.w	r3, #0
 8000abc:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Usart16ClockSelection = RCC_USART16CLKSOURCE_D2PCLK2;
 8000ac0:	2300      	movs	r3, #0
 8000ac2:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000ac6:	f107 0310 	add.w	r3, r7, #16
 8000aca:	4618      	mov	r0, r3
 8000acc:	f001 fca2 	bl	8002414 <HAL_RCCEx_PeriphCLKConfig>
 8000ad0:	4603      	mov	r3, r0
 8000ad2:	2b00      	cmp	r3, #0
 8000ad4:	d001      	beq.n	8000ada <HAL_UART_MspInit+0x56>
    {
      Error_Handler();
 8000ad6:	f7ff ffb5 	bl	8000a44 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000ada:	4b1d      	ldr	r3, [pc, #116]	; (8000b50 <HAL_UART_MspInit+0xcc>)
 8000adc:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8000ae0:	4a1b      	ldr	r2, [pc, #108]	; (8000b50 <HAL_UART_MspInit+0xcc>)
 8000ae2:	f043 0310 	orr.w	r3, r3, #16
 8000ae6:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8000aea:	4b19      	ldr	r3, [pc, #100]	; (8000b50 <HAL_UART_MspInit+0xcc>)
 8000aec:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8000af0:	f003 0310 	and.w	r3, r3, #16
 8000af4:	60fb      	str	r3, [r7, #12]
 8000af6:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000af8:	4b15      	ldr	r3, [pc, #84]	; (8000b50 <HAL_UART_MspInit+0xcc>)
 8000afa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000afe:	4a14      	ldr	r2, [pc, #80]	; (8000b50 <HAL_UART_MspInit+0xcc>)
 8000b00:	f043 0301 	orr.w	r3, r3, #1
 8000b04:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000b08:	4b11      	ldr	r3, [pc, #68]	; (8000b50 <HAL_UART_MspInit+0xcc>)
 8000b0a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000b0e:	f003 0301 	and.w	r3, r3, #1
 8000b12:	60bb      	str	r3, [r7, #8]
 8000b14:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA10     ------> USART1_RX
    PA9     ------> USART1_TX
    */
    GPIO_InitStruct.Pin = STLINK_TX_Pin|STLINK_RX_Pin;
 8000b16:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8000b1a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b1e:	2302      	movs	r3, #2
 8000b20:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b24:	2300      	movs	r3, #0
 8000b26:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b2a:	2300      	movs	r3, #0
 8000b2c:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000b30:	2307      	movs	r3, #7
 8000b32:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b36:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8000b3a:	4619      	mov	r1, r3
 8000b3c:	4805      	ldr	r0, [pc, #20]	; (8000b54 <HAL_UART_MspInit+0xd0>)
 8000b3e:	f000 f9e1 	bl	8000f04 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8000b42:	bf00      	nop
 8000b44:	37f0      	adds	r7, #240	; 0xf0
 8000b46:	46bd      	mov	sp, r7
 8000b48:	bd80      	pop	{r7, pc}
 8000b4a:	bf00      	nop
 8000b4c:	40011000 	.word	0x40011000
 8000b50:	58024400 	.word	0x58024400
 8000b54:	58020000 	.word	0x58020000

08000b58 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000b58:	b480      	push	{r7}
 8000b5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000b5c:	e7fe      	b.n	8000b5c <NMI_Handler+0x4>

08000b5e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000b5e:	b480      	push	{r7}
 8000b60:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000b62:	e7fe      	b.n	8000b62 <HardFault_Handler+0x4>

08000b64 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000b64:	b480      	push	{r7}
 8000b66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000b68:	e7fe      	b.n	8000b68 <MemManage_Handler+0x4>

08000b6a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000b6a:	b480      	push	{r7}
 8000b6c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000b6e:	e7fe      	b.n	8000b6e <BusFault_Handler+0x4>

08000b70 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000b70:	b480      	push	{r7}
 8000b72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000b74:	e7fe      	b.n	8000b74 <UsageFault_Handler+0x4>

08000b76 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000b76:	b480      	push	{r7}
 8000b78:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000b7a:	bf00      	nop
 8000b7c:	46bd      	mov	sp, r7
 8000b7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b82:	4770      	bx	lr

08000b84 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000b84:	b480      	push	{r7}
 8000b86:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000b88:	bf00      	nop
 8000b8a:	46bd      	mov	sp, r7
 8000b8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b90:	4770      	bx	lr

08000b92 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000b92:	b480      	push	{r7}
 8000b94:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000b96:	bf00      	nop
 8000b98:	46bd      	mov	sp, r7
 8000b9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b9e:	4770      	bx	lr

08000ba0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000ba0:	b580      	push	{r7, lr}
 8000ba2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000ba4:	f000 f89e 	bl	8000ce4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000ba8:	bf00      	nop
 8000baa:	bd80      	pop	{r7, pc}

08000bac <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8000bac:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000be4 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8000bb0:	f7ff fd10 	bl	80005d4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000bb4:	480c      	ldr	r0, [pc, #48]	; (8000be8 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000bb6:	490d      	ldr	r1, [pc, #52]	; (8000bec <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000bb8:	4a0d      	ldr	r2, [pc, #52]	; (8000bf0 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000bba:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000bbc:	e002      	b.n	8000bc4 <LoopCopyDataInit>

08000bbe <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000bbe:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000bc0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000bc2:	3304      	adds	r3, #4

08000bc4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000bc4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000bc6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000bc8:	d3f9      	bcc.n	8000bbe <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000bca:	4a0a      	ldr	r2, [pc, #40]	; (8000bf4 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000bcc:	4c0a      	ldr	r4, [pc, #40]	; (8000bf8 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000bce:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000bd0:	e001      	b.n	8000bd6 <LoopFillZerobss>

08000bd2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000bd2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000bd4:	3204      	adds	r2, #4

08000bd6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000bd6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000bd8:	d3fb      	bcc.n	8000bd2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000bda:	f004 fb65 	bl	80052a8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000bde:	f7ff fd8f 	bl	8000700 <main>
  bx  lr
 8000be2:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000be4:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 8000be8:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8000bec:	24000010 	.word	0x24000010
  ldr r2, =_sidata
 8000bf0:	08005350 	.word	0x08005350
  ldr r2, =_sbss
 8000bf4:	24000010 	.word	0x24000010
  ldr r4, =_ebss
 8000bf8:	240000c4 	.word	0x240000c4

08000bfc <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000bfc:	e7fe      	b.n	8000bfc <ADC3_IRQHandler>
	...

08000c00 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000c00:	b580      	push	{r7, lr}
 8000c02:	b082      	sub	sp, #8
 8000c04:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000c06:	2003      	movs	r0, #3
 8000c08:	f000 f94a 	bl	8000ea0 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8000c0c:	f001 fa2c 	bl	8002068 <HAL_RCC_GetSysClockFreq>
 8000c10:	4602      	mov	r2, r0
 8000c12:	4b15      	ldr	r3, [pc, #84]	; (8000c68 <HAL_Init+0x68>)
 8000c14:	699b      	ldr	r3, [r3, #24]
 8000c16:	0a1b      	lsrs	r3, r3, #8
 8000c18:	f003 030f 	and.w	r3, r3, #15
 8000c1c:	4913      	ldr	r1, [pc, #76]	; (8000c6c <HAL_Init+0x6c>)
 8000c1e:	5ccb      	ldrb	r3, [r1, r3]
 8000c20:	f003 031f 	and.w	r3, r3, #31
 8000c24:	fa22 f303 	lsr.w	r3, r2, r3
 8000c28:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8000c2a:	4b0f      	ldr	r3, [pc, #60]	; (8000c68 <HAL_Init+0x68>)
 8000c2c:	699b      	ldr	r3, [r3, #24]
 8000c2e:	f003 030f 	and.w	r3, r3, #15
 8000c32:	4a0e      	ldr	r2, [pc, #56]	; (8000c6c <HAL_Init+0x6c>)
 8000c34:	5cd3      	ldrb	r3, [r2, r3]
 8000c36:	f003 031f 	and.w	r3, r3, #31
 8000c3a:	687a      	ldr	r2, [r7, #4]
 8000c3c:	fa22 f303 	lsr.w	r3, r2, r3
 8000c40:	4a0b      	ldr	r2, [pc, #44]	; (8000c70 <HAL_Init+0x70>)
 8000c42:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8000c44:	4a0b      	ldr	r2, [pc, #44]	; (8000c74 <HAL_Init+0x74>)
 8000c46:	687b      	ldr	r3, [r7, #4]
 8000c48:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000c4a:	2000      	movs	r0, #0
 8000c4c:	f000 f814 	bl	8000c78 <HAL_InitTick>
 8000c50:	4603      	mov	r3, r0
 8000c52:	2b00      	cmp	r3, #0
 8000c54:	d001      	beq.n	8000c5a <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8000c56:	2301      	movs	r3, #1
 8000c58:	e002      	b.n	8000c60 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8000c5a:	f7ff fef9 	bl	8000a50 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000c5e:	2300      	movs	r3, #0
}
 8000c60:	4618      	mov	r0, r3
 8000c62:	3708      	adds	r7, #8
 8000c64:	46bd      	mov	sp, r7
 8000c66:	bd80      	pop	{r7, pc}
 8000c68:	58024400 	.word	0x58024400
 8000c6c:	08005308 	.word	0x08005308
 8000c70:	24000004 	.word	0x24000004
 8000c74:	24000000 	.word	0x24000000

08000c78 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000c78:	b580      	push	{r7, lr}
 8000c7a:	b082      	sub	sp, #8
 8000c7c:	af00      	add	r7, sp, #0
 8000c7e:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8000c80:	4b15      	ldr	r3, [pc, #84]	; (8000cd8 <HAL_InitTick+0x60>)
 8000c82:	781b      	ldrb	r3, [r3, #0]
 8000c84:	2b00      	cmp	r3, #0
 8000c86:	d101      	bne.n	8000c8c <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8000c88:	2301      	movs	r3, #1
 8000c8a:	e021      	b.n	8000cd0 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8000c8c:	4b13      	ldr	r3, [pc, #76]	; (8000cdc <HAL_InitTick+0x64>)
 8000c8e:	681a      	ldr	r2, [r3, #0]
 8000c90:	4b11      	ldr	r3, [pc, #68]	; (8000cd8 <HAL_InitTick+0x60>)
 8000c92:	781b      	ldrb	r3, [r3, #0]
 8000c94:	4619      	mov	r1, r3
 8000c96:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000c9a:	fbb3 f3f1 	udiv	r3, r3, r1
 8000c9e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000ca2:	4618      	mov	r0, r3
 8000ca4:	f000 f921 	bl	8000eea <HAL_SYSTICK_Config>
 8000ca8:	4603      	mov	r3, r0
 8000caa:	2b00      	cmp	r3, #0
 8000cac:	d001      	beq.n	8000cb2 <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8000cae:	2301      	movs	r3, #1
 8000cb0:	e00e      	b.n	8000cd0 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000cb2:	687b      	ldr	r3, [r7, #4]
 8000cb4:	2b0f      	cmp	r3, #15
 8000cb6:	d80a      	bhi.n	8000cce <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000cb8:	2200      	movs	r2, #0
 8000cba:	6879      	ldr	r1, [r7, #4]
 8000cbc:	f04f 30ff 	mov.w	r0, #4294967295
 8000cc0:	f000 f8f9 	bl	8000eb6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000cc4:	4a06      	ldr	r2, [pc, #24]	; (8000ce0 <HAL_InitTick+0x68>)
 8000cc6:	687b      	ldr	r3, [r7, #4]
 8000cc8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000cca:	2300      	movs	r3, #0
 8000ccc:	e000      	b.n	8000cd0 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8000cce:	2301      	movs	r3, #1
}
 8000cd0:	4618      	mov	r0, r3
 8000cd2:	3708      	adds	r7, #8
 8000cd4:	46bd      	mov	sp, r7
 8000cd6:	bd80      	pop	{r7, pc}
 8000cd8:	2400000c 	.word	0x2400000c
 8000cdc:	24000000 	.word	0x24000000
 8000ce0:	24000008 	.word	0x24000008

08000ce4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000ce4:	b480      	push	{r7}
 8000ce6:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000ce8:	4b06      	ldr	r3, [pc, #24]	; (8000d04 <HAL_IncTick+0x20>)
 8000cea:	781b      	ldrb	r3, [r3, #0]
 8000cec:	461a      	mov	r2, r3
 8000cee:	4b06      	ldr	r3, [pc, #24]	; (8000d08 <HAL_IncTick+0x24>)
 8000cf0:	681b      	ldr	r3, [r3, #0]
 8000cf2:	4413      	add	r3, r2
 8000cf4:	4a04      	ldr	r2, [pc, #16]	; (8000d08 <HAL_IncTick+0x24>)
 8000cf6:	6013      	str	r3, [r2, #0]
}
 8000cf8:	bf00      	nop
 8000cfa:	46bd      	mov	sp, r7
 8000cfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d00:	4770      	bx	lr
 8000d02:	bf00      	nop
 8000d04:	2400000c 	.word	0x2400000c
 8000d08:	240000c0 	.word	0x240000c0

08000d0c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000d0c:	b480      	push	{r7}
 8000d0e:	af00      	add	r7, sp, #0
  return uwTick;
 8000d10:	4b03      	ldr	r3, [pc, #12]	; (8000d20 <HAL_GetTick+0x14>)
 8000d12:	681b      	ldr	r3, [r3, #0]
}
 8000d14:	4618      	mov	r0, r3
 8000d16:	46bd      	mov	sp, r7
 8000d18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d1c:	4770      	bx	lr
 8000d1e:	bf00      	nop
 8000d20:	240000c0 	.word	0x240000c0

08000d24 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8000d24:	b480      	push	{r7}
 8000d26:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8000d28:	4b03      	ldr	r3, [pc, #12]	; (8000d38 <HAL_GetREVID+0x14>)
 8000d2a:	681b      	ldr	r3, [r3, #0]
 8000d2c:	0c1b      	lsrs	r3, r3, #16
}
 8000d2e:	4618      	mov	r0, r3
 8000d30:	46bd      	mov	sp, r7
 8000d32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d36:	4770      	bx	lr
 8000d38:	5c001000 	.word	0x5c001000

08000d3c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000d3c:	b480      	push	{r7}
 8000d3e:	b085      	sub	sp, #20
 8000d40:	af00      	add	r7, sp, #0
 8000d42:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000d44:	687b      	ldr	r3, [r7, #4]
 8000d46:	f003 0307 	and.w	r3, r3, #7
 8000d4a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000d4c:	4b0b      	ldr	r3, [pc, #44]	; (8000d7c <__NVIC_SetPriorityGrouping+0x40>)
 8000d4e:	68db      	ldr	r3, [r3, #12]
 8000d50:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000d52:	68ba      	ldr	r2, [r7, #8]
 8000d54:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000d58:	4013      	ands	r3, r2
 8000d5a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000d5c:	68fb      	ldr	r3, [r7, #12]
 8000d5e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000d60:	68bb      	ldr	r3, [r7, #8]
 8000d62:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8000d64:	4b06      	ldr	r3, [pc, #24]	; (8000d80 <__NVIC_SetPriorityGrouping+0x44>)
 8000d66:	4313      	orrs	r3, r2
 8000d68:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000d6a:	4a04      	ldr	r2, [pc, #16]	; (8000d7c <__NVIC_SetPriorityGrouping+0x40>)
 8000d6c:	68bb      	ldr	r3, [r7, #8]
 8000d6e:	60d3      	str	r3, [r2, #12]
}
 8000d70:	bf00      	nop
 8000d72:	3714      	adds	r7, #20
 8000d74:	46bd      	mov	sp, r7
 8000d76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d7a:	4770      	bx	lr
 8000d7c:	e000ed00 	.word	0xe000ed00
 8000d80:	05fa0000 	.word	0x05fa0000

08000d84 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000d84:	b480      	push	{r7}
 8000d86:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000d88:	4b04      	ldr	r3, [pc, #16]	; (8000d9c <__NVIC_GetPriorityGrouping+0x18>)
 8000d8a:	68db      	ldr	r3, [r3, #12]
 8000d8c:	0a1b      	lsrs	r3, r3, #8
 8000d8e:	f003 0307 	and.w	r3, r3, #7
}
 8000d92:	4618      	mov	r0, r3
 8000d94:	46bd      	mov	sp, r7
 8000d96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d9a:	4770      	bx	lr
 8000d9c:	e000ed00 	.word	0xe000ed00

08000da0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000da0:	b480      	push	{r7}
 8000da2:	b083      	sub	sp, #12
 8000da4:	af00      	add	r7, sp, #0
 8000da6:	4603      	mov	r3, r0
 8000da8:	6039      	str	r1, [r7, #0]
 8000daa:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8000dac:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000db0:	2b00      	cmp	r3, #0
 8000db2:	db0a      	blt.n	8000dca <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000db4:	683b      	ldr	r3, [r7, #0]
 8000db6:	b2da      	uxtb	r2, r3
 8000db8:	490c      	ldr	r1, [pc, #48]	; (8000dec <__NVIC_SetPriority+0x4c>)
 8000dba:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000dbe:	0112      	lsls	r2, r2, #4
 8000dc0:	b2d2      	uxtb	r2, r2
 8000dc2:	440b      	add	r3, r1
 8000dc4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000dc8:	e00a      	b.n	8000de0 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000dca:	683b      	ldr	r3, [r7, #0]
 8000dcc:	b2da      	uxtb	r2, r3
 8000dce:	4908      	ldr	r1, [pc, #32]	; (8000df0 <__NVIC_SetPriority+0x50>)
 8000dd0:	88fb      	ldrh	r3, [r7, #6]
 8000dd2:	f003 030f 	and.w	r3, r3, #15
 8000dd6:	3b04      	subs	r3, #4
 8000dd8:	0112      	lsls	r2, r2, #4
 8000dda:	b2d2      	uxtb	r2, r2
 8000ddc:	440b      	add	r3, r1
 8000dde:	761a      	strb	r2, [r3, #24]
}
 8000de0:	bf00      	nop
 8000de2:	370c      	adds	r7, #12
 8000de4:	46bd      	mov	sp, r7
 8000de6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dea:	4770      	bx	lr
 8000dec:	e000e100 	.word	0xe000e100
 8000df0:	e000ed00 	.word	0xe000ed00

08000df4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000df4:	b480      	push	{r7}
 8000df6:	b089      	sub	sp, #36	; 0x24
 8000df8:	af00      	add	r7, sp, #0
 8000dfa:	60f8      	str	r0, [r7, #12]
 8000dfc:	60b9      	str	r1, [r7, #8]
 8000dfe:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000e00:	68fb      	ldr	r3, [r7, #12]
 8000e02:	f003 0307 	and.w	r3, r3, #7
 8000e06:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000e08:	69fb      	ldr	r3, [r7, #28]
 8000e0a:	f1c3 0307 	rsb	r3, r3, #7
 8000e0e:	2b04      	cmp	r3, #4
 8000e10:	bf28      	it	cs
 8000e12:	2304      	movcs	r3, #4
 8000e14:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000e16:	69fb      	ldr	r3, [r7, #28]
 8000e18:	3304      	adds	r3, #4
 8000e1a:	2b06      	cmp	r3, #6
 8000e1c:	d902      	bls.n	8000e24 <NVIC_EncodePriority+0x30>
 8000e1e:	69fb      	ldr	r3, [r7, #28]
 8000e20:	3b03      	subs	r3, #3
 8000e22:	e000      	b.n	8000e26 <NVIC_EncodePriority+0x32>
 8000e24:	2300      	movs	r3, #0
 8000e26:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e28:	f04f 32ff 	mov.w	r2, #4294967295
 8000e2c:	69bb      	ldr	r3, [r7, #24]
 8000e2e:	fa02 f303 	lsl.w	r3, r2, r3
 8000e32:	43da      	mvns	r2, r3
 8000e34:	68bb      	ldr	r3, [r7, #8]
 8000e36:	401a      	ands	r2, r3
 8000e38:	697b      	ldr	r3, [r7, #20]
 8000e3a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000e3c:	f04f 31ff 	mov.w	r1, #4294967295
 8000e40:	697b      	ldr	r3, [r7, #20]
 8000e42:	fa01 f303 	lsl.w	r3, r1, r3
 8000e46:	43d9      	mvns	r1, r3
 8000e48:	687b      	ldr	r3, [r7, #4]
 8000e4a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e4c:	4313      	orrs	r3, r2
         );
}
 8000e4e:	4618      	mov	r0, r3
 8000e50:	3724      	adds	r7, #36	; 0x24
 8000e52:	46bd      	mov	sp, r7
 8000e54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e58:	4770      	bx	lr
	...

08000e5c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000e5c:	b580      	push	{r7, lr}
 8000e5e:	b082      	sub	sp, #8
 8000e60:	af00      	add	r7, sp, #0
 8000e62:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000e64:	687b      	ldr	r3, [r7, #4]
 8000e66:	3b01      	subs	r3, #1
 8000e68:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000e6c:	d301      	bcc.n	8000e72 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000e6e:	2301      	movs	r3, #1
 8000e70:	e00f      	b.n	8000e92 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000e72:	4a0a      	ldr	r2, [pc, #40]	; (8000e9c <SysTick_Config+0x40>)
 8000e74:	687b      	ldr	r3, [r7, #4]
 8000e76:	3b01      	subs	r3, #1
 8000e78:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000e7a:	210f      	movs	r1, #15
 8000e7c:	f04f 30ff 	mov.w	r0, #4294967295
 8000e80:	f7ff ff8e 	bl	8000da0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000e84:	4b05      	ldr	r3, [pc, #20]	; (8000e9c <SysTick_Config+0x40>)
 8000e86:	2200      	movs	r2, #0
 8000e88:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000e8a:	4b04      	ldr	r3, [pc, #16]	; (8000e9c <SysTick_Config+0x40>)
 8000e8c:	2207      	movs	r2, #7
 8000e8e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000e90:	2300      	movs	r3, #0
}
 8000e92:	4618      	mov	r0, r3
 8000e94:	3708      	adds	r7, #8
 8000e96:	46bd      	mov	sp, r7
 8000e98:	bd80      	pop	{r7, pc}
 8000e9a:	bf00      	nop
 8000e9c:	e000e010 	.word	0xe000e010

08000ea0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000ea0:	b580      	push	{r7, lr}
 8000ea2:	b082      	sub	sp, #8
 8000ea4:	af00      	add	r7, sp, #0
 8000ea6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000ea8:	6878      	ldr	r0, [r7, #4]
 8000eaa:	f7ff ff47 	bl	8000d3c <__NVIC_SetPriorityGrouping>
}
 8000eae:	bf00      	nop
 8000eb0:	3708      	adds	r7, #8
 8000eb2:	46bd      	mov	sp, r7
 8000eb4:	bd80      	pop	{r7, pc}

08000eb6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000eb6:	b580      	push	{r7, lr}
 8000eb8:	b086      	sub	sp, #24
 8000eba:	af00      	add	r7, sp, #0
 8000ebc:	4603      	mov	r3, r0
 8000ebe:	60b9      	str	r1, [r7, #8]
 8000ec0:	607a      	str	r2, [r7, #4]
 8000ec2:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000ec4:	f7ff ff5e 	bl	8000d84 <__NVIC_GetPriorityGrouping>
 8000ec8:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000eca:	687a      	ldr	r2, [r7, #4]
 8000ecc:	68b9      	ldr	r1, [r7, #8]
 8000ece:	6978      	ldr	r0, [r7, #20]
 8000ed0:	f7ff ff90 	bl	8000df4 <NVIC_EncodePriority>
 8000ed4:	4602      	mov	r2, r0
 8000ed6:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8000eda:	4611      	mov	r1, r2
 8000edc:	4618      	mov	r0, r3
 8000ede:	f7ff ff5f 	bl	8000da0 <__NVIC_SetPriority>
}
 8000ee2:	bf00      	nop
 8000ee4:	3718      	adds	r7, #24
 8000ee6:	46bd      	mov	sp, r7
 8000ee8:	bd80      	pop	{r7, pc}

08000eea <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000eea:	b580      	push	{r7, lr}
 8000eec:	b082      	sub	sp, #8
 8000eee:	af00      	add	r7, sp, #0
 8000ef0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000ef2:	6878      	ldr	r0, [r7, #4]
 8000ef4:	f7ff ffb2 	bl	8000e5c <SysTick_Config>
 8000ef8:	4603      	mov	r3, r0
}
 8000efa:	4618      	mov	r0, r3
 8000efc:	3708      	adds	r7, #8
 8000efe:	46bd      	mov	sp, r7
 8000f00:	bd80      	pop	{r7, pc}
	...

08000f04 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000f04:	b480      	push	{r7}
 8000f06:	b089      	sub	sp, #36	; 0x24
 8000f08:	af00      	add	r7, sp, #0
 8000f0a:	6078      	str	r0, [r7, #4]
 8000f0c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8000f0e:	2300      	movs	r3, #0
 8000f10:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8000f12:	4b89      	ldr	r3, [pc, #548]	; (8001138 <HAL_GPIO_Init+0x234>)
 8000f14:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8000f16:	e194      	b.n	8001242 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8000f18:	683b      	ldr	r3, [r7, #0]
 8000f1a:	681a      	ldr	r2, [r3, #0]
 8000f1c:	2101      	movs	r1, #1
 8000f1e:	69fb      	ldr	r3, [r7, #28]
 8000f20:	fa01 f303 	lsl.w	r3, r1, r3
 8000f24:	4013      	ands	r3, r2
 8000f26:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8000f28:	693b      	ldr	r3, [r7, #16]
 8000f2a:	2b00      	cmp	r3, #0
 8000f2c:	f000 8186 	beq.w	800123c <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000f30:	683b      	ldr	r3, [r7, #0]
 8000f32:	685b      	ldr	r3, [r3, #4]
 8000f34:	f003 0303 	and.w	r3, r3, #3
 8000f38:	2b01      	cmp	r3, #1
 8000f3a:	d005      	beq.n	8000f48 <HAL_GPIO_Init+0x44>
 8000f3c:	683b      	ldr	r3, [r7, #0]
 8000f3e:	685b      	ldr	r3, [r3, #4]
 8000f40:	f003 0303 	and.w	r3, r3, #3
 8000f44:	2b02      	cmp	r3, #2
 8000f46:	d130      	bne.n	8000faa <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000f48:	687b      	ldr	r3, [r7, #4]
 8000f4a:	689b      	ldr	r3, [r3, #8]
 8000f4c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8000f4e:	69fb      	ldr	r3, [r7, #28]
 8000f50:	005b      	lsls	r3, r3, #1
 8000f52:	2203      	movs	r2, #3
 8000f54:	fa02 f303 	lsl.w	r3, r2, r3
 8000f58:	43db      	mvns	r3, r3
 8000f5a:	69ba      	ldr	r2, [r7, #24]
 8000f5c:	4013      	ands	r3, r2
 8000f5e:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000f60:	683b      	ldr	r3, [r7, #0]
 8000f62:	68da      	ldr	r2, [r3, #12]
 8000f64:	69fb      	ldr	r3, [r7, #28]
 8000f66:	005b      	lsls	r3, r3, #1
 8000f68:	fa02 f303 	lsl.w	r3, r2, r3
 8000f6c:	69ba      	ldr	r2, [r7, #24]
 8000f6e:	4313      	orrs	r3, r2
 8000f70:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000f72:	687b      	ldr	r3, [r7, #4]
 8000f74:	69ba      	ldr	r2, [r7, #24]
 8000f76:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000f78:	687b      	ldr	r3, [r7, #4]
 8000f7a:	685b      	ldr	r3, [r3, #4]
 8000f7c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8000f7e:	2201      	movs	r2, #1
 8000f80:	69fb      	ldr	r3, [r7, #28]
 8000f82:	fa02 f303 	lsl.w	r3, r2, r3
 8000f86:	43db      	mvns	r3, r3
 8000f88:	69ba      	ldr	r2, [r7, #24]
 8000f8a:	4013      	ands	r3, r2
 8000f8c:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000f8e:	683b      	ldr	r3, [r7, #0]
 8000f90:	685b      	ldr	r3, [r3, #4]
 8000f92:	091b      	lsrs	r3, r3, #4
 8000f94:	f003 0201 	and.w	r2, r3, #1
 8000f98:	69fb      	ldr	r3, [r7, #28]
 8000f9a:	fa02 f303 	lsl.w	r3, r2, r3
 8000f9e:	69ba      	ldr	r2, [r7, #24]
 8000fa0:	4313      	orrs	r3, r2
 8000fa2:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000fa4:	687b      	ldr	r3, [r7, #4]
 8000fa6:	69ba      	ldr	r2, [r7, #24]
 8000fa8:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000faa:	683b      	ldr	r3, [r7, #0]
 8000fac:	685b      	ldr	r3, [r3, #4]
 8000fae:	f003 0303 	and.w	r3, r3, #3
 8000fb2:	2b03      	cmp	r3, #3
 8000fb4:	d017      	beq.n	8000fe6 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8000fb6:	687b      	ldr	r3, [r7, #4]
 8000fb8:	68db      	ldr	r3, [r3, #12]
 8000fba:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8000fbc:	69fb      	ldr	r3, [r7, #28]
 8000fbe:	005b      	lsls	r3, r3, #1
 8000fc0:	2203      	movs	r2, #3
 8000fc2:	fa02 f303 	lsl.w	r3, r2, r3
 8000fc6:	43db      	mvns	r3, r3
 8000fc8:	69ba      	ldr	r2, [r7, #24]
 8000fca:	4013      	ands	r3, r2
 8000fcc:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000fce:	683b      	ldr	r3, [r7, #0]
 8000fd0:	689a      	ldr	r2, [r3, #8]
 8000fd2:	69fb      	ldr	r3, [r7, #28]
 8000fd4:	005b      	lsls	r3, r3, #1
 8000fd6:	fa02 f303 	lsl.w	r3, r2, r3
 8000fda:	69ba      	ldr	r2, [r7, #24]
 8000fdc:	4313      	orrs	r3, r2
 8000fde:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8000fe0:	687b      	ldr	r3, [r7, #4]
 8000fe2:	69ba      	ldr	r2, [r7, #24]
 8000fe4:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000fe6:	683b      	ldr	r3, [r7, #0]
 8000fe8:	685b      	ldr	r3, [r3, #4]
 8000fea:	f003 0303 	and.w	r3, r3, #3
 8000fee:	2b02      	cmp	r3, #2
 8000ff0:	d123      	bne.n	800103a <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000ff2:	69fb      	ldr	r3, [r7, #28]
 8000ff4:	08da      	lsrs	r2, r3, #3
 8000ff6:	687b      	ldr	r3, [r7, #4]
 8000ff8:	3208      	adds	r2, #8
 8000ffa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000ffe:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8001000:	69fb      	ldr	r3, [r7, #28]
 8001002:	f003 0307 	and.w	r3, r3, #7
 8001006:	009b      	lsls	r3, r3, #2
 8001008:	220f      	movs	r2, #15
 800100a:	fa02 f303 	lsl.w	r3, r2, r3
 800100e:	43db      	mvns	r3, r3
 8001010:	69ba      	ldr	r2, [r7, #24]
 8001012:	4013      	ands	r3, r2
 8001014:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8001016:	683b      	ldr	r3, [r7, #0]
 8001018:	691a      	ldr	r2, [r3, #16]
 800101a:	69fb      	ldr	r3, [r7, #28]
 800101c:	f003 0307 	and.w	r3, r3, #7
 8001020:	009b      	lsls	r3, r3, #2
 8001022:	fa02 f303 	lsl.w	r3, r2, r3
 8001026:	69ba      	ldr	r2, [r7, #24]
 8001028:	4313      	orrs	r3, r2
 800102a:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800102c:	69fb      	ldr	r3, [r7, #28]
 800102e:	08da      	lsrs	r2, r3, #3
 8001030:	687b      	ldr	r3, [r7, #4]
 8001032:	3208      	adds	r2, #8
 8001034:	69b9      	ldr	r1, [r7, #24]
 8001036:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800103a:	687b      	ldr	r3, [r7, #4]
 800103c:	681b      	ldr	r3, [r3, #0]
 800103e:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8001040:	69fb      	ldr	r3, [r7, #28]
 8001042:	005b      	lsls	r3, r3, #1
 8001044:	2203      	movs	r2, #3
 8001046:	fa02 f303 	lsl.w	r3, r2, r3
 800104a:	43db      	mvns	r3, r3
 800104c:	69ba      	ldr	r2, [r7, #24]
 800104e:	4013      	ands	r3, r2
 8001050:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001052:	683b      	ldr	r3, [r7, #0]
 8001054:	685b      	ldr	r3, [r3, #4]
 8001056:	f003 0203 	and.w	r2, r3, #3
 800105a:	69fb      	ldr	r3, [r7, #28]
 800105c:	005b      	lsls	r3, r3, #1
 800105e:	fa02 f303 	lsl.w	r3, r2, r3
 8001062:	69ba      	ldr	r2, [r7, #24]
 8001064:	4313      	orrs	r3, r2
 8001066:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001068:	687b      	ldr	r3, [r7, #4]
 800106a:	69ba      	ldr	r2, [r7, #24]
 800106c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800106e:	683b      	ldr	r3, [r7, #0]
 8001070:	685b      	ldr	r3, [r3, #4]
 8001072:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001076:	2b00      	cmp	r3, #0
 8001078:	f000 80e0 	beq.w	800123c <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800107c:	4b2f      	ldr	r3, [pc, #188]	; (800113c <HAL_GPIO_Init+0x238>)
 800107e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001082:	4a2e      	ldr	r2, [pc, #184]	; (800113c <HAL_GPIO_Init+0x238>)
 8001084:	f043 0302 	orr.w	r3, r3, #2
 8001088:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 800108c:	4b2b      	ldr	r3, [pc, #172]	; (800113c <HAL_GPIO_Init+0x238>)
 800108e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001092:	f003 0302 	and.w	r3, r3, #2
 8001096:	60fb      	str	r3, [r7, #12]
 8001098:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800109a:	4a29      	ldr	r2, [pc, #164]	; (8001140 <HAL_GPIO_Init+0x23c>)
 800109c:	69fb      	ldr	r3, [r7, #28]
 800109e:	089b      	lsrs	r3, r3, #2
 80010a0:	3302      	adds	r3, #2
 80010a2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80010a6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80010a8:	69fb      	ldr	r3, [r7, #28]
 80010aa:	f003 0303 	and.w	r3, r3, #3
 80010ae:	009b      	lsls	r3, r3, #2
 80010b0:	220f      	movs	r2, #15
 80010b2:	fa02 f303 	lsl.w	r3, r2, r3
 80010b6:	43db      	mvns	r3, r3
 80010b8:	69ba      	ldr	r2, [r7, #24]
 80010ba:	4013      	ands	r3, r2
 80010bc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80010be:	687b      	ldr	r3, [r7, #4]
 80010c0:	4a20      	ldr	r2, [pc, #128]	; (8001144 <HAL_GPIO_Init+0x240>)
 80010c2:	4293      	cmp	r3, r2
 80010c4:	d052      	beq.n	800116c <HAL_GPIO_Init+0x268>
 80010c6:	687b      	ldr	r3, [r7, #4]
 80010c8:	4a1f      	ldr	r2, [pc, #124]	; (8001148 <HAL_GPIO_Init+0x244>)
 80010ca:	4293      	cmp	r3, r2
 80010cc:	d031      	beq.n	8001132 <HAL_GPIO_Init+0x22e>
 80010ce:	687b      	ldr	r3, [r7, #4]
 80010d0:	4a1e      	ldr	r2, [pc, #120]	; (800114c <HAL_GPIO_Init+0x248>)
 80010d2:	4293      	cmp	r3, r2
 80010d4:	d02b      	beq.n	800112e <HAL_GPIO_Init+0x22a>
 80010d6:	687b      	ldr	r3, [r7, #4]
 80010d8:	4a1d      	ldr	r2, [pc, #116]	; (8001150 <HAL_GPIO_Init+0x24c>)
 80010da:	4293      	cmp	r3, r2
 80010dc:	d025      	beq.n	800112a <HAL_GPIO_Init+0x226>
 80010de:	687b      	ldr	r3, [r7, #4]
 80010e0:	4a1c      	ldr	r2, [pc, #112]	; (8001154 <HAL_GPIO_Init+0x250>)
 80010e2:	4293      	cmp	r3, r2
 80010e4:	d01f      	beq.n	8001126 <HAL_GPIO_Init+0x222>
 80010e6:	687b      	ldr	r3, [r7, #4]
 80010e8:	4a1b      	ldr	r2, [pc, #108]	; (8001158 <HAL_GPIO_Init+0x254>)
 80010ea:	4293      	cmp	r3, r2
 80010ec:	d019      	beq.n	8001122 <HAL_GPIO_Init+0x21e>
 80010ee:	687b      	ldr	r3, [r7, #4]
 80010f0:	4a1a      	ldr	r2, [pc, #104]	; (800115c <HAL_GPIO_Init+0x258>)
 80010f2:	4293      	cmp	r3, r2
 80010f4:	d013      	beq.n	800111e <HAL_GPIO_Init+0x21a>
 80010f6:	687b      	ldr	r3, [r7, #4]
 80010f8:	4a19      	ldr	r2, [pc, #100]	; (8001160 <HAL_GPIO_Init+0x25c>)
 80010fa:	4293      	cmp	r3, r2
 80010fc:	d00d      	beq.n	800111a <HAL_GPIO_Init+0x216>
 80010fe:	687b      	ldr	r3, [r7, #4]
 8001100:	4a18      	ldr	r2, [pc, #96]	; (8001164 <HAL_GPIO_Init+0x260>)
 8001102:	4293      	cmp	r3, r2
 8001104:	d007      	beq.n	8001116 <HAL_GPIO_Init+0x212>
 8001106:	687b      	ldr	r3, [r7, #4]
 8001108:	4a17      	ldr	r2, [pc, #92]	; (8001168 <HAL_GPIO_Init+0x264>)
 800110a:	4293      	cmp	r3, r2
 800110c:	d101      	bne.n	8001112 <HAL_GPIO_Init+0x20e>
 800110e:	2309      	movs	r3, #9
 8001110:	e02d      	b.n	800116e <HAL_GPIO_Init+0x26a>
 8001112:	230a      	movs	r3, #10
 8001114:	e02b      	b.n	800116e <HAL_GPIO_Init+0x26a>
 8001116:	2308      	movs	r3, #8
 8001118:	e029      	b.n	800116e <HAL_GPIO_Init+0x26a>
 800111a:	2307      	movs	r3, #7
 800111c:	e027      	b.n	800116e <HAL_GPIO_Init+0x26a>
 800111e:	2306      	movs	r3, #6
 8001120:	e025      	b.n	800116e <HAL_GPIO_Init+0x26a>
 8001122:	2305      	movs	r3, #5
 8001124:	e023      	b.n	800116e <HAL_GPIO_Init+0x26a>
 8001126:	2304      	movs	r3, #4
 8001128:	e021      	b.n	800116e <HAL_GPIO_Init+0x26a>
 800112a:	2303      	movs	r3, #3
 800112c:	e01f      	b.n	800116e <HAL_GPIO_Init+0x26a>
 800112e:	2302      	movs	r3, #2
 8001130:	e01d      	b.n	800116e <HAL_GPIO_Init+0x26a>
 8001132:	2301      	movs	r3, #1
 8001134:	e01b      	b.n	800116e <HAL_GPIO_Init+0x26a>
 8001136:	bf00      	nop
 8001138:	58000080 	.word	0x58000080
 800113c:	58024400 	.word	0x58024400
 8001140:	58000400 	.word	0x58000400
 8001144:	58020000 	.word	0x58020000
 8001148:	58020400 	.word	0x58020400
 800114c:	58020800 	.word	0x58020800
 8001150:	58020c00 	.word	0x58020c00
 8001154:	58021000 	.word	0x58021000
 8001158:	58021400 	.word	0x58021400
 800115c:	58021800 	.word	0x58021800
 8001160:	58021c00 	.word	0x58021c00
 8001164:	58022000 	.word	0x58022000
 8001168:	58022400 	.word	0x58022400
 800116c:	2300      	movs	r3, #0
 800116e:	69fa      	ldr	r2, [r7, #28]
 8001170:	f002 0203 	and.w	r2, r2, #3
 8001174:	0092      	lsls	r2, r2, #2
 8001176:	4093      	lsls	r3, r2
 8001178:	69ba      	ldr	r2, [r7, #24]
 800117a:	4313      	orrs	r3, r2
 800117c:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800117e:	4938      	ldr	r1, [pc, #224]	; (8001260 <HAL_GPIO_Init+0x35c>)
 8001180:	69fb      	ldr	r3, [r7, #28]
 8001182:	089b      	lsrs	r3, r3, #2
 8001184:	3302      	adds	r3, #2
 8001186:	69ba      	ldr	r2, [r7, #24]
 8001188:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800118c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001190:	681b      	ldr	r3, [r3, #0]
 8001192:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8001194:	693b      	ldr	r3, [r7, #16]
 8001196:	43db      	mvns	r3, r3
 8001198:	69ba      	ldr	r2, [r7, #24]
 800119a:	4013      	ands	r3, r2
 800119c:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800119e:	683b      	ldr	r3, [r7, #0]
 80011a0:	685b      	ldr	r3, [r3, #4]
 80011a2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80011a6:	2b00      	cmp	r3, #0
 80011a8:	d003      	beq.n	80011b2 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 80011aa:	69ba      	ldr	r2, [r7, #24]
 80011ac:	693b      	ldr	r3, [r7, #16]
 80011ae:	4313      	orrs	r3, r2
 80011b0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 80011b2:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80011b6:	69bb      	ldr	r3, [r7, #24]
 80011b8:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 80011ba:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80011be:	685b      	ldr	r3, [r3, #4]
 80011c0:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80011c2:	693b      	ldr	r3, [r7, #16]
 80011c4:	43db      	mvns	r3, r3
 80011c6:	69ba      	ldr	r2, [r7, #24]
 80011c8:	4013      	ands	r3, r2
 80011ca:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80011cc:	683b      	ldr	r3, [r7, #0]
 80011ce:	685b      	ldr	r3, [r3, #4]
 80011d0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80011d4:	2b00      	cmp	r3, #0
 80011d6:	d003      	beq.n	80011e0 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 80011d8:	69ba      	ldr	r2, [r7, #24]
 80011da:	693b      	ldr	r3, [r7, #16]
 80011dc:	4313      	orrs	r3, r2
 80011de:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 80011e0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80011e4:	69bb      	ldr	r3, [r7, #24]
 80011e6:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 80011e8:	697b      	ldr	r3, [r7, #20]
 80011ea:	685b      	ldr	r3, [r3, #4]
 80011ec:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80011ee:	693b      	ldr	r3, [r7, #16]
 80011f0:	43db      	mvns	r3, r3
 80011f2:	69ba      	ldr	r2, [r7, #24]
 80011f4:	4013      	ands	r3, r2
 80011f6:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80011f8:	683b      	ldr	r3, [r7, #0]
 80011fa:	685b      	ldr	r3, [r3, #4]
 80011fc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001200:	2b00      	cmp	r3, #0
 8001202:	d003      	beq.n	800120c <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8001204:	69ba      	ldr	r2, [r7, #24]
 8001206:	693b      	ldr	r3, [r7, #16]
 8001208:	4313      	orrs	r3, r2
 800120a:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 800120c:	697b      	ldr	r3, [r7, #20]
 800120e:	69ba      	ldr	r2, [r7, #24]
 8001210:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8001212:	697b      	ldr	r3, [r7, #20]
 8001214:	681b      	ldr	r3, [r3, #0]
 8001216:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8001218:	693b      	ldr	r3, [r7, #16]
 800121a:	43db      	mvns	r3, r3
 800121c:	69ba      	ldr	r2, [r7, #24]
 800121e:	4013      	ands	r3, r2
 8001220:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001222:	683b      	ldr	r3, [r7, #0]
 8001224:	685b      	ldr	r3, [r3, #4]
 8001226:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800122a:	2b00      	cmp	r3, #0
 800122c:	d003      	beq.n	8001236 <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 800122e:	69ba      	ldr	r2, [r7, #24]
 8001230:	693b      	ldr	r3, [r7, #16]
 8001232:	4313      	orrs	r3, r2
 8001234:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8001236:	697b      	ldr	r3, [r7, #20]
 8001238:	69ba      	ldr	r2, [r7, #24]
 800123a:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 800123c:	69fb      	ldr	r3, [r7, #28]
 800123e:	3301      	adds	r3, #1
 8001240:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8001242:	683b      	ldr	r3, [r7, #0]
 8001244:	681a      	ldr	r2, [r3, #0]
 8001246:	69fb      	ldr	r3, [r7, #28]
 8001248:	fa22 f303 	lsr.w	r3, r2, r3
 800124c:	2b00      	cmp	r3, #0
 800124e:	f47f ae63 	bne.w	8000f18 <HAL_GPIO_Init+0x14>
  }
}
 8001252:	bf00      	nop
 8001254:	bf00      	nop
 8001256:	3724      	adds	r7, #36	; 0x24
 8001258:	46bd      	mov	sp, r7
 800125a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800125e:	4770      	bx	lr
 8001260:	58000400 	.word	0x58000400

08001264 <HAL_HSEM_FastTake>:
  * @brief  Fast Take a semaphore with 1 Step mode.
  * @param  SemID: semaphore ID from 0 to 31
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HSEM_FastTake(uint32_t SemID)
{
 8001264:	b480      	push	{r7}
 8001266:	b083      	sub	sp, #12
 8001268:	af00      	add	r7, sp, #0
 800126a:	6078      	str	r0, [r7, #4]
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
  }
#else  
  /* Read the RLR register to take the semaphore */
  if (HSEM->RLR[SemID] == (HSEM_CR_COREID_CURRENT | HSEM_RLR_LOCK))
 800126c:	4a08      	ldr	r2, [pc, #32]	; (8001290 <HAL_HSEM_FastTake+0x2c>)
 800126e:	687b      	ldr	r3, [r7, #4]
 8001270:	3320      	adds	r3, #32
 8001272:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001276:	4a07      	ldr	r2, [pc, #28]	; (8001294 <HAL_HSEM_FastTake+0x30>)
 8001278:	4293      	cmp	r3, r2
 800127a:	d101      	bne.n	8001280 <HAL_HSEM_FastTake+0x1c>
  {
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
 800127c:	2300      	movs	r3, #0
 800127e:	e000      	b.n	8001282 <HAL_HSEM_FastTake+0x1e>
  }
#endif

  /* Semaphore take fails */
  return HAL_ERROR;
 8001280:	2301      	movs	r3, #1
}
 8001282:	4618      	mov	r0, r3
 8001284:	370c      	adds	r7, #12
 8001286:	46bd      	mov	sp, r7
 8001288:	f85d 7b04 	ldr.w	r7, [sp], #4
 800128c:	4770      	bx	lr
 800128e:	bf00      	nop
 8001290:	58026400 	.word	0x58026400
 8001294:	80000300 	.word	0x80000300

08001298 <HAL_HSEM_Release>:
  * @param  SemID: semaphore ID from 0 to 31
  * @param  ProcessID: Process ID from 0 to 255
  * @retval None
  */
void  HAL_HSEM_Release(uint32_t SemID, uint32_t ProcessID)
{
 8001298:	b480      	push	{r7}
 800129a:	b083      	sub	sp, #12
 800129c:	af00      	add	r7, sp, #0
 800129e:	6078      	str	r0, [r7, #4]
 80012a0:	6039      	str	r1, [r7, #0]

  /* Clear the semaphore by writing to the R register : the MasterID , the processID and take bit = 0  */
#if  USE_MULTI_CORE_SHARED_CODE != 0U
  HSEM->R[SemID] = (ProcessID | ((HAL_GetCurrentCPUID() << POSITION_VAL(HSEM_R_MASTERID)) & HSEM_R_MASTERID));
#else
  HSEM->R[SemID] = (ProcessID | HSEM_CR_COREID_CURRENT);
 80012a2:	4906      	ldr	r1, [pc, #24]	; (80012bc <HAL_HSEM_Release+0x24>)
 80012a4:	683b      	ldr	r3, [r7, #0]
 80012a6:	f443 7240 	orr.w	r2, r3, #768	; 0x300
 80012aa:	687b      	ldr	r3, [r7, #4]
 80012ac:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
#endif

}
 80012b0:	bf00      	nop
 80012b2:	370c      	adds	r7, #12
 80012b4:	46bd      	mov	sp, r7
 80012b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012ba:	4770      	bx	lr
 80012bc:	58026400 	.word	0x58026400

080012c0 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 80012c0:	b580      	push	{r7, lr}
 80012c2:	b084      	sub	sp, #16
 80012c4:	af00      	add	r7, sp, #0
 80012c6:	6078      	str	r0, [r7, #4]

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
 80012c8:	4b29      	ldr	r3, [pc, #164]	; (8001370 <HAL_PWREx_ConfigSupply+0xb0>)
 80012ca:	68db      	ldr	r3, [r3, #12]
 80012cc:	f003 0307 	and.w	r3, r3, #7
 80012d0:	2b06      	cmp	r3, #6
 80012d2:	d00a      	beq.n	80012ea <HAL_PWREx_ConfigSupply+0x2a>
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 80012d4:	4b26      	ldr	r3, [pc, #152]	; (8001370 <HAL_PWREx_ConfigSupply+0xb0>)
 80012d6:	68db      	ldr	r3, [r3, #12]
 80012d8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80012dc:	687a      	ldr	r2, [r7, #4]
 80012de:	429a      	cmp	r2, r3
 80012e0:	d001      	beq.n	80012e6 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 80012e2:	2301      	movs	r3, #1
 80012e4:	e040      	b.n	8001368 <HAL_PWREx_ConfigSupply+0xa8>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 80012e6:	2300      	movs	r3, #0
 80012e8:	e03e      	b.n	8001368 <HAL_PWREx_ConfigSupply+0xa8>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 80012ea:	4b21      	ldr	r3, [pc, #132]	; (8001370 <HAL_PWREx_ConfigSupply+0xb0>)
 80012ec:	68db      	ldr	r3, [r3, #12]
 80012ee:	f023 023f 	bic.w	r2, r3, #63	; 0x3f
 80012f2:	491f      	ldr	r1, [pc, #124]	; (8001370 <HAL_PWREx_ConfigSupply+0xb0>)
 80012f4:	687b      	ldr	r3, [r7, #4]
 80012f6:	4313      	orrs	r3, r2
 80012f8:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 80012fa:	f7ff fd07 	bl	8000d0c <HAL_GetTick>
 80012fe:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8001300:	e009      	b.n	8001316 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8001302:	f7ff fd03 	bl	8000d0c <HAL_GetTick>
 8001306:	4602      	mov	r2, r0
 8001308:	68fb      	ldr	r3, [r7, #12]
 800130a:	1ad3      	subs	r3, r2, r3
 800130c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001310:	d901      	bls.n	8001316 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8001312:	2301      	movs	r3, #1
 8001314:	e028      	b.n	8001368 <HAL_PWREx_ConfigSupply+0xa8>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8001316:	4b16      	ldr	r3, [pc, #88]	; (8001370 <HAL_PWREx_ConfigSupply+0xb0>)
 8001318:	685b      	ldr	r3, [r3, #4]
 800131a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800131e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001322:	d1ee      	bne.n	8001302 <HAL_PWREx_ConfigSupply+0x42>
    }
  }

#if defined (SMPS)
  /* When the SMPS supplies external circuits verify that SDEXTRDY flag is set */
  if ((SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT_AND_LDO) ||
 8001324:	687b      	ldr	r3, [r7, #4]
 8001326:	2b1e      	cmp	r3, #30
 8001328:	d008      	beq.n	800133c <HAL_PWREx_ConfigSupply+0x7c>
 800132a:	687b      	ldr	r3, [r7, #4]
 800132c:	2b2e      	cmp	r3, #46	; 0x2e
 800132e:	d005      	beq.n	800133c <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT_AND_LDO) ||
 8001330:	687b      	ldr	r3, [r7, #4]
 8001332:	2b1d      	cmp	r3, #29
 8001334:	d002      	beq.n	800133c <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT)         ||
 8001336:	687b      	ldr	r3, [r7, #4]
 8001338:	2b2d      	cmp	r3, #45	; 0x2d
 800133a:	d114      	bne.n	8001366 <HAL_PWREx_ConfigSupply+0xa6>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT))
  {
    /* Get the current tick number */
    tickstart = HAL_GetTick ();
 800133c:	f7ff fce6 	bl	8000d0c <HAL_GetTick>
 8001340:	60f8      	str	r0, [r7, #12]

    /* Wait till SMPS external supply ready flag is set */
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 8001342:	e009      	b.n	8001358 <HAL_PWREx_ConfigSupply+0x98>
    {
      if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8001344:	f7ff fce2 	bl	8000d0c <HAL_GetTick>
 8001348:	4602      	mov	r2, r0
 800134a:	68fb      	ldr	r3, [r7, #12]
 800134c:	1ad3      	subs	r3, r2, r3
 800134e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001352:	d901      	bls.n	8001358 <HAL_PWREx_ConfigSupply+0x98>
      {
        return HAL_ERROR;
 8001354:	2301      	movs	r3, #1
 8001356:	e007      	b.n	8001368 <HAL_PWREx_ConfigSupply+0xa8>
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 8001358:	4b05      	ldr	r3, [pc, #20]	; (8001370 <HAL_PWREx_ConfigSupply+0xb0>)
 800135a:	68db      	ldr	r3, [r3, #12]
 800135c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001360:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001364:	d1ee      	bne.n	8001344 <HAL_PWREx_ConfigSupply+0x84>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8001366:	2300      	movs	r3, #0
}
 8001368:	4618      	mov	r0, r3
 800136a:	3710      	adds	r7, #16
 800136c:	46bd      	mov	sp, r7
 800136e:	bd80      	pop	{r7, pc}
 8001370:	58024800 	.word	0x58024800

08001374 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001374:	b580      	push	{r7, lr}
 8001376:	b08c      	sub	sp, #48	; 0x30
 8001378:	af00      	add	r7, sp, #0
 800137a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800137c:	687b      	ldr	r3, [r7, #4]
 800137e:	2b00      	cmp	r3, #0
 8001380:	d102      	bne.n	8001388 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8001382:	2301      	movs	r3, #1
 8001384:	f000 bc48 	b.w	8001c18 <HAL_RCC_OscConfig+0x8a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001388:	687b      	ldr	r3, [r7, #4]
 800138a:	681b      	ldr	r3, [r3, #0]
 800138c:	f003 0301 	and.w	r3, r3, #1
 8001390:	2b00      	cmp	r3, #0
 8001392:	f000 8088 	beq.w	80014a6 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001396:	4b99      	ldr	r3, [pc, #612]	; (80015fc <HAL_RCC_OscConfig+0x288>)
 8001398:	691b      	ldr	r3, [r3, #16]
 800139a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800139e:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80013a0:	4b96      	ldr	r3, [pc, #600]	; (80015fc <HAL_RCC_OscConfig+0x288>)
 80013a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80013a4:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 80013a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80013a8:	2b10      	cmp	r3, #16
 80013aa:	d007      	beq.n	80013bc <HAL_RCC_OscConfig+0x48>
 80013ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80013ae:	2b18      	cmp	r3, #24
 80013b0:	d111      	bne.n	80013d6 <HAL_RCC_OscConfig+0x62>
 80013b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80013b4:	f003 0303 	and.w	r3, r3, #3
 80013b8:	2b02      	cmp	r3, #2
 80013ba:	d10c      	bne.n	80013d6 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80013bc:	4b8f      	ldr	r3, [pc, #572]	; (80015fc <HAL_RCC_OscConfig+0x288>)
 80013be:	681b      	ldr	r3, [r3, #0]
 80013c0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80013c4:	2b00      	cmp	r3, #0
 80013c6:	d06d      	beq.n	80014a4 <HAL_RCC_OscConfig+0x130>
 80013c8:	687b      	ldr	r3, [r7, #4]
 80013ca:	685b      	ldr	r3, [r3, #4]
 80013cc:	2b00      	cmp	r3, #0
 80013ce:	d169      	bne.n	80014a4 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 80013d0:	2301      	movs	r3, #1
 80013d2:	f000 bc21 	b.w	8001c18 <HAL_RCC_OscConfig+0x8a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80013d6:	687b      	ldr	r3, [r7, #4]
 80013d8:	685b      	ldr	r3, [r3, #4]
 80013da:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80013de:	d106      	bne.n	80013ee <HAL_RCC_OscConfig+0x7a>
 80013e0:	4b86      	ldr	r3, [pc, #536]	; (80015fc <HAL_RCC_OscConfig+0x288>)
 80013e2:	681b      	ldr	r3, [r3, #0]
 80013e4:	4a85      	ldr	r2, [pc, #532]	; (80015fc <HAL_RCC_OscConfig+0x288>)
 80013e6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80013ea:	6013      	str	r3, [r2, #0]
 80013ec:	e02e      	b.n	800144c <HAL_RCC_OscConfig+0xd8>
 80013ee:	687b      	ldr	r3, [r7, #4]
 80013f0:	685b      	ldr	r3, [r3, #4]
 80013f2:	2b00      	cmp	r3, #0
 80013f4:	d10c      	bne.n	8001410 <HAL_RCC_OscConfig+0x9c>
 80013f6:	4b81      	ldr	r3, [pc, #516]	; (80015fc <HAL_RCC_OscConfig+0x288>)
 80013f8:	681b      	ldr	r3, [r3, #0]
 80013fa:	4a80      	ldr	r2, [pc, #512]	; (80015fc <HAL_RCC_OscConfig+0x288>)
 80013fc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001400:	6013      	str	r3, [r2, #0]
 8001402:	4b7e      	ldr	r3, [pc, #504]	; (80015fc <HAL_RCC_OscConfig+0x288>)
 8001404:	681b      	ldr	r3, [r3, #0]
 8001406:	4a7d      	ldr	r2, [pc, #500]	; (80015fc <HAL_RCC_OscConfig+0x288>)
 8001408:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800140c:	6013      	str	r3, [r2, #0]
 800140e:	e01d      	b.n	800144c <HAL_RCC_OscConfig+0xd8>
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	685b      	ldr	r3, [r3, #4]
 8001414:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001418:	d10c      	bne.n	8001434 <HAL_RCC_OscConfig+0xc0>
 800141a:	4b78      	ldr	r3, [pc, #480]	; (80015fc <HAL_RCC_OscConfig+0x288>)
 800141c:	681b      	ldr	r3, [r3, #0]
 800141e:	4a77      	ldr	r2, [pc, #476]	; (80015fc <HAL_RCC_OscConfig+0x288>)
 8001420:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001424:	6013      	str	r3, [r2, #0]
 8001426:	4b75      	ldr	r3, [pc, #468]	; (80015fc <HAL_RCC_OscConfig+0x288>)
 8001428:	681b      	ldr	r3, [r3, #0]
 800142a:	4a74      	ldr	r2, [pc, #464]	; (80015fc <HAL_RCC_OscConfig+0x288>)
 800142c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001430:	6013      	str	r3, [r2, #0]
 8001432:	e00b      	b.n	800144c <HAL_RCC_OscConfig+0xd8>
 8001434:	4b71      	ldr	r3, [pc, #452]	; (80015fc <HAL_RCC_OscConfig+0x288>)
 8001436:	681b      	ldr	r3, [r3, #0]
 8001438:	4a70      	ldr	r2, [pc, #448]	; (80015fc <HAL_RCC_OscConfig+0x288>)
 800143a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800143e:	6013      	str	r3, [r2, #0]
 8001440:	4b6e      	ldr	r3, [pc, #440]	; (80015fc <HAL_RCC_OscConfig+0x288>)
 8001442:	681b      	ldr	r3, [r3, #0]
 8001444:	4a6d      	ldr	r2, [pc, #436]	; (80015fc <HAL_RCC_OscConfig+0x288>)
 8001446:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800144a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800144c:	687b      	ldr	r3, [r7, #4]
 800144e:	685b      	ldr	r3, [r3, #4]
 8001450:	2b00      	cmp	r3, #0
 8001452:	d013      	beq.n	800147c <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001454:	f7ff fc5a 	bl	8000d0c <HAL_GetTick>
 8001458:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800145a:	e008      	b.n	800146e <HAL_RCC_OscConfig+0xfa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800145c:	f7ff fc56 	bl	8000d0c <HAL_GetTick>
 8001460:	4602      	mov	r2, r0
 8001462:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001464:	1ad3      	subs	r3, r2, r3
 8001466:	2b64      	cmp	r3, #100	; 0x64
 8001468:	d901      	bls.n	800146e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800146a:	2303      	movs	r3, #3
 800146c:	e3d4      	b.n	8001c18 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800146e:	4b63      	ldr	r3, [pc, #396]	; (80015fc <HAL_RCC_OscConfig+0x288>)
 8001470:	681b      	ldr	r3, [r3, #0]
 8001472:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001476:	2b00      	cmp	r3, #0
 8001478:	d0f0      	beq.n	800145c <HAL_RCC_OscConfig+0xe8>
 800147a:	e014      	b.n	80014a6 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800147c:	f7ff fc46 	bl	8000d0c <HAL_GetTick>
 8001480:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8001482:	e008      	b.n	8001496 <HAL_RCC_OscConfig+0x122>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001484:	f7ff fc42 	bl	8000d0c <HAL_GetTick>
 8001488:	4602      	mov	r2, r0
 800148a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800148c:	1ad3      	subs	r3, r2, r3
 800148e:	2b64      	cmp	r3, #100	; 0x64
 8001490:	d901      	bls.n	8001496 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8001492:	2303      	movs	r3, #3
 8001494:	e3c0      	b.n	8001c18 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8001496:	4b59      	ldr	r3, [pc, #356]	; (80015fc <HAL_RCC_OscConfig+0x288>)
 8001498:	681b      	ldr	r3, [r3, #0]
 800149a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800149e:	2b00      	cmp	r3, #0
 80014a0:	d1f0      	bne.n	8001484 <HAL_RCC_OscConfig+0x110>
 80014a2:	e000      	b.n	80014a6 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80014a4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80014a6:	687b      	ldr	r3, [r7, #4]
 80014a8:	681b      	ldr	r3, [r3, #0]
 80014aa:	f003 0302 	and.w	r3, r3, #2
 80014ae:	2b00      	cmp	r3, #0
 80014b0:	f000 80ca 	beq.w	8001648 <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80014b4:	4b51      	ldr	r3, [pc, #324]	; (80015fc <HAL_RCC_OscConfig+0x288>)
 80014b6:	691b      	ldr	r3, [r3, #16]
 80014b8:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80014bc:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80014be:	4b4f      	ldr	r3, [pc, #316]	; (80015fc <HAL_RCC_OscConfig+0x288>)
 80014c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80014c2:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 80014c4:	6a3b      	ldr	r3, [r7, #32]
 80014c6:	2b00      	cmp	r3, #0
 80014c8:	d007      	beq.n	80014da <HAL_RCC_OscConfig+0x166>
 80014ca:	6a3b      	ldr	r3, [r7, #32]
 80014cc:	2b18      	cmp	r3, #24
 80014ce:	d156      	bne.n	800157e <HAL_RCC_OscConfig+0x20a>
 80014d0:	69fb      	ldr	r3, [r7, #28]
 80014d2:	f003 0303 	and.w	r3, r3, #3
 80014d6:	2b00      	cmp	r3, #0
 80014d8:	d151      	bne.n	800157e <HAL_RCC_OscConfig+0x20a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80014da:	4b48      	ldr	r3, [pc, #288]	; (80015fc <HAL_RCC_OscConfig+0x288>)
 80014dc:	681b      	ldr	r3, [r3, #0]
 80014de:	f003 0304 	and.w	r3, r3, #4
 80014e2:	2b00      	cmp	r3, #0
 80014e4:	d005      	beq.n	80014f2 <HAL_RCC_OscConfig+0x17e>
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	68db      	ldr	r3, [r3, #12]
 80014ea:	2b00      	cmp	r3, #0
 80014ec:	d101      	bne.n	80014f2 <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 80014ee:	2301      	movs	r3, #1
 80014f0:	e392      	b.n	8001c18 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80014f2:	4b42      	ldr	r3, [pc, #264]	; (80015fc <HAL_RCC_OscConfig+0x288>)
 80014f4:	681b      	ldr	r3, [r3, #0]
 80014f6:	f023 0219 	bic.w	r2, r3, #25
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	68db      	ldr	r3, [r3, #12]
 80014fe:	493f      	ldr	r1, [pc, #252]	; (80015fc <HAL_RCC_OscConfig+0x288>)
 8001500:	4313      	orrs	r3, r2
 8001502:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001504:	f7ff fc02 	bl	8000d0c <HAL_GetTick>
 8001508:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800150a:	e008      	b.n	800151e <HAL_RCC_OscConfig+0x1aa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800150c:	f7ff fbfe 	bl	8000d0c <HAL_GetTick>
 8001510:	4602      	mov	r2, r0
 8001512:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001514:	1ad3      	subs	r3, r2, r3
 8001516:	2b02      	cmp	r3, #2
 8001518:	d901      	bls.n	800151e <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 800151a:	2303      	movs	r3, #3
 800151c:	e37c      	b.n	8001c18 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800151e:	4b37      	ldr	r3, [pc, #220]	; (80015fc <HAL_RCC_OscConfig+0x288>)
 8001520:	681b      	ldr	r3, [r3, #0]
 8001522:	f003 0304 	and.w	r3, r3, #4
 8001526:	2b00      	cmp	r3, #0
 8001528:	d0f0      	beq.n	800150c <HAL_RCC_OscConfig+0x198>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800152a:	f7ff fbfb 	bl	8000d24 <HAL_GetREVID>
 800152e:	4603      	mov	r3, r0
 8001530:	f241 0203 	movw	r2, #4099	; 0x1003
 8001534:	4293      	cmp	r3, r2
 8001536:	d817      	bhi.n	8001568 <HAL_RCC_OscConfig+0x1f4>
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	691b      	ldr	r3, [r3, #16]
 800153c:	2b40      	cmp	r3, #64	; 0x40
 800153e:	d108      	bne.n	8001552 <HAL_RCC_OscConfig+0x1de>
 8001540:	4b2e      	ldr	r3, [pc, #184]	; (80015fc <HAL_RCC_OscConfig+0x288>)
 8001542:	685b      	ldr	r3, [r3, #4]
 8001544:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8001548:	4a2c      	ldr	r2, [pc, #176]	; (80015fc <HAL_RCC_OscConfig+0x288>)
 800154a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800154e:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001550:	e07a      	b.n	8001648 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001552:	4b2a      	ldr	r3, [pc, #168]	; (80015fc <HAL_RCC_OscConfig+0x288>)
 8001554:	685b      	ldr	r3, [r3, #4]
 8001556:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 800155a:	687b      	ldr	r3, [r7, #4]
 800155c:	691b      	ldr	r3, [r3, #16]
 800155e:	031b      	lsls	r3, r3, #12
 8001560:	4926      	ldr	r1, [pc, #152]	; (80015fc <HAL_RCC_OscConfig+0x288>)
 8001562:	4313      	orrs	r3, r2
 8001564:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001566:	e06f      	b.n	8001648 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001568:	4b24      	ldr	r3, [pc, #144]	; (80015fc <HAL_RCC_OscConfig+0x288>)
 800156a:	685b      	ldr	r3, [r3, #4]
 800156c:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	691b      	ldr	r3, [r3, #16]
 8001574:	061b      	lsls	r3, r3, #24
 8001576:	4921      	ldr	r1, [pc, #132]	; (80015fc <HAL_RCC_OscConfig+0x288>)
 8001578:	4313      	orrs	r3, r2
 800157a:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800157c:	e064      	b.n	8001648 <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	68db      	ldr	r3, [r3, #12]
 8001582:	2b00      	cmp	r3, #0
 8001584:	d047      	beq.n	8001616 <HAL_RCC_OscConfig+0x2a2>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8001586:	4b1d      	ldr	r3, [pc, #116]	; (80015fc <HAL_RCC_OscConfig+0x288>)
 8001588:	681b      	ldr	r3, [r3, #0]
 800158a:	f023 0219 	bic.w	r2, r3, #25
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	68db      	ldr	r3, [r3, #12]
 8001592:	491a      	ldr	r1, [pc, #104]	; (80015fc <HAL_RCC_OscConfig+0x288>)
 8001594:	4313      	orrs	r3, r2
 8001596:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001598:	f7ff fbb8 	bl	8000d0c <HAL_GetTick>
 800159c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800159e:	e008      	b.n	80015b2 <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80015a0:	f7ff fbb4 	bl	8000d0c <HAL_GetTick>
 80015a4:	4602      	mov	r2, r0
 80015a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015a8:	1ad3      	subs	r3, r2, r3
 80015aa:	2b02      	cmp	r3, #2
 80015ac:	d901      	bls.n	80015b2 <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 80015ae:	2303      	movs	r3, #3
 80015b0:	e332      	b.n	8001c18 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80015b2:	4b12      	ldr	r3, [pc, #72]	; (80015fc <HAL_RCC_OscConfig+0x288>)
 80015b4:	681b      	ldr	r3, [r3, #0]
 80015b6:	f003 0304 	and.w	r3, r3, #4
 80015ba:	2b00      	cmp	r3, #0
 80015bc:	d0f0      	beq.n	80015a0 <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80015be:	f7ff fbb1 	bl	8000d24 <HAL_GetREVID>
 80015c2:	4603      	mov	r3, r0
 80015c4:	f241 0203 	movw	r2, #4099	; 0x1003
 80015c8:	4293      	cmp	r3, r2
 80015ca:	d819      	bhi.n	8001600 <HAL_RCC_OscConfig+0x28c>
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	691b      	ldr	r3, [r3, #16]
 80015d0:	2b40      	cmp	r3, #64	; 0x40
 80015d2:	d108      	bne.n	80015e6 <HAL_RCC_OscConfig+0x272>
 80015d4:	4b09      	ldr	r3, [pc, #36]	; (80015fc <HAL_RCC_OscConfig+0x288>)
 80015d6:	685b      	ldr	r3, [r3, #4]
 80015d8:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 80015dc:	4a07      	ldr	r2, [pc, #28]	; (80015fc <HAL_RCC_OscConfig+0x288>)
 80015de:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80015e2:	6053      	str	r3, [r2, #4]
 80015e4:	e030      	b.n	8001648 <HAL_RCC_OscConfig+0x2d4>
 80015e6:	4b05      	ldr	r3, [pc, #20]	; (80015fc <HAL_RCC_OscConfig+0x288>)
 80015e8:	685b      	ldr	r3, [r3, #4]
 80015ea:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	691b      	ldr	r3, [r3, #16]
 80015f2:	031b      	lsls	r3, r3, #12
 80015f4:	4901      	ldr	r1, [pc, #4]	; (80015fc <HAL_RCC_OscConfig+0x288>)
 80015f6:	4313      	orrs	r3, r2
 80015f8:	604b      	str	r3, [r1, #4]
 80015fa:	e025      	b.n	8001648 <HAL_RCC_OscConfig+0x2d4>
 80015fc:	58024400 	.word	0x58024400
 8001600:	4b9a      	ldr	r3, [pc, #616]	; (800186c <HAL_RCC_OscConfig+0x4f8>)
 8001602:	685b      	ldr	r3, [r3, #4]
 8001604:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	691b      	ldr	r3, [r3, #16]
 800160c:	061b      	lsls	r3, r3, #24
 800160e:	4997      	ldr	r1, [pc, #604]	; (800186c <HAL_RCC_OscConfig+0x4f8>)
 8001610:	4313      	orrs	r3, r2
 8001612:	604b      	str	r3, [r1, #4]
 8001614:	e018      	b.n	8001648 <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001616:	4b95      	ldr	r3, [pc, #596]	; (800186c <HAL_RCC_OscConfig+0x4f8>)
 8001618:	681b      	ldr	r3, [r3, #0]
 800161a:	4a94      	ldr	r2, [pc, #592]	; (800186c <HAL_RCC_OscConfig+0x4f8>)
 800161c:	f023 0301 	bic.w	r3, r3, #1
 8001620:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001622:	f7ff fb73 	bl	8000d0c <HAL_GetTick>
 8001626:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8001628:	e008      	b.n	800163c <HAL_RCC_OscConfig+0x2c8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800162a:	f7ff fb6f 	bl	8000d0c <HAL_GetTick>
 800162e:	4602      	mov	r2, r0
 8001630:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001632:	1ad3      	subs	r3, r2, r3
 8001634:	2b02      	cmp	r3, #2
 8001636:	d901      	bls.n	800163c <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 8001638:	2303      	movs	r3, #3
 800163a:	e2ed      	b.n	8001c18 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800163c:	4b8b      	ldr	r3, [pc, #556]	; (800186c <HAL_RCC_OscConfig+0x4f8>)
 800163e:	681b      	ldr	r3, [r3, #0]
 8001640:	f003 0304 	and.w	r3, r3, #4
 8001644:	2b00      	cmp	r3, #0
 8001646:	d1f0      	bne.n	800162a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	681b      	ldr	r3, [r3, #0]
 800164c:	f003 0310 	and.w	r3, r3, #16
 8001650:	2b00      	cmp	r3, #0
 8001652:	f000 80a9 	beq.w	80017a8 <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001656:	4b85      	ldr	r3, [pc, #532]	; (800186c <HAL_RCC_OscConfig+0x4f8>)
 8001658:	691b      	ldr	r3, [r3, #16]
 800165a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800165e:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8001660:	4b82      	ldr	r3, [pc, #520]	; (800186c <HAL_RCC_OscConfig+0x4f8>)
 8001662:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001664:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8001666:	69bb      	ldr	r3, [r7, #24]
 8001668:	2b08      	cmp	r3, #8
 800166a:	d007      	beq.n	800167c <HAL_RCC_OscConfig+0x308>
 800166c:	69bb      	ldr	r3, [r7, #24]
 800166e:	2b18      	cmp	r3, #24
 8001670:	d13a      	bne.n	80016e8 <HAL_RCC_OscConfig+0x374>
 8001672:	697b      	ldr	r3, [r7, #20]
 8001674:	f003 0303 	and.w	r3, r3, #3
 8001678:	2b01      	cmp	r3, #1
 800167a:	d135      	bne.n	80016e8 <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800167c:	4b7b      	ldr	r3, [pc, #492]	; (800186c <HAL_RCC_OscConfig+0x4f8>)
 800167e:	681b      	ldr	r3, [r3, #0]
 8001680:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001684:	2b00      	cmp	r3, #0
 8001686:	d005      	beq.n	8001694 <HAL_RCC_OscConfig+0x320>
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	69db      	ldr	r3, [r3, #28]
 800168c:	2b80      	cmp	r3, #128	; 0x80
 800168e:	d001      	beq.n	8001694 <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 8001690:	2301      	movs	r3, #1
 8001692:	e2c1      	b.n	8001c18 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8001694:	f7ff fb46 	bl	8000d24 <HAL_GetREVID>
 8001698:	4603      	mov	r3, r0
 800169a:	f241 0203 	movw	r2, #4099	; 0x1003
 800169e:	4293      	cmp	r3, r2
 80016a0:	d817      	bhi.n	80016d2 <HAL_RCC_OscConfig+0x35e>
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	6a1b      	ldr	r3, [r3, #32]
 80016a6:	2b20      	cmp	r3, #32
 80016a8:	d108      	bne.n	80016bc <HAL_RCC_OscConfig+0x348>
 80016aa:	4b70      	ldr	r3, [pc, #448]	; (800186c <HAL_RCC_OscConfig+0x4f8>)
 80016ac:	685b      	ldr	r3, [r3, #4]
 80016ae:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 80016b2:	4a6e      	ldr	r2, [pc, #440]	; (800186c <HAL_RCC_OscConfig+0x4f8>)
 80016b4:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80016b8:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80016ba:	e075      	b.n	80017a8 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80016bc:	4b6b      	ldr	r3, [pc, #428]	; (800186c <HAL_RCC_OscConfig+0x4f8>)
 80016be:	685b      	ldr	r3, [r3, #4]
 80016c0:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	6a1b      	ldr	r3, [r3, #32]
 80016c8:	069b      	lsls	r3, r3, #26
 80016ca:	4968      	ldr	r1, [pc, #416]	; (800186c <HAL_RCC_OscConfig+0x4f8>)
 80016cc:	4313      	orrs	r3, r2
 80016ce:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80016d0:	e06a      	b.n	80017a8 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80016d2:	4b66      	ldr	r3, [pc, #408]	; (800186c <HAL_RCC_OscConfig+0x4f8>)
 80016d4:	68db      	ldr	r3, [r3, #12]
 80016d6:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	6a1b      	ldr	r3, [r3, #32]
 80016de:	061b      	lsls	r3, r3, #24
 80016e0:	4962      	ldr	r1, [pc, #392]	; (800186c <HAL_RCC_OscConfig+0x4f8>)
 80016e2:	4313      	orrs	r3, r2
 80016e4:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80016e6:	e05f      	b.n	80017a8 <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	69db      	ldr	r3, [r3, #28]
 80016ec:	2b00      	cmp	r3, #0
 80016ee:	d042      	beq.n	8001776 <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 80016f0:	4b5e      	ldr	r3, [pc, #376]	; (800186c <HAL_RCC_OscConfig+0x4f8>)
 80016f2:	681b      	ldr	r3, [r3, #0]
 80016f4:	4a5d      	ldr	r2, [pc, #372]	; (800186c <HAL_RCC_OscConfig+0x4f8>)
 80016f6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80016fa:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80016fc:	f7ff fb06 	bl	8000d0c <HAL_GetTick>
 8001700:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8001702:	e008      	b.n	8001716 <HAL_RCC_OscConfig+0x3a2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8001704:	f7ff fb02 	bl	8000d0c <HAL_GetTick>
 8001708:	4602      	mov	r2, r0
 800170a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800170c:	1ad3      	subs	r3, r2, r3
 800170e:	2b02      	cmp	r3, #2
 8001710:	d901      	bls.n	8001716 <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 8001712:	2303      	movs	r3, #3
 8001714:	e280      	b.n	8001c18 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8001716:	4b55      	ldr	r3, [pc, #340]	; (800186c <HAL_RCC_OscConfig+0x4f8>)
 8001718:	681b      	ldr	r3, [r3, #0]
 800171a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800171e:	2b00      	cmp	r3, #0
 8001720:	d0f0      	beq.n	8001704 <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8001722:	f7ff faff 	bl	8000d24 <HAL_GetREVID>
 8001726:	4603      	mov	r3, r0
 8001728:	f241 0203 	movw	r2, #4099	; 0x1003
 800172c:	4293      	cmp	r3, r2
 800172e:	d817      	bhi.n	8001760 <HAL_RCC_OscConfig+0x3ec>
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	6a1b      	ldr	r3, [r3, #32]
 8001734:	2b20      	cmp	r3, #32
 8001736:	d108      	bne.n	800174a <HAL_RCC_OscConfig+0x3d6>
 8001738:	4b4c      	ldr	r3, [pc, #304]	; (800186c <HAL_RCC_OscConfig+0x4f8>)
 800173a:	685b      	ldr	r3, [r3, #4]
 800173c:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8001740:	4a4a      	ldr	r2, [pc, #296]	; (800186c <HAL_RCC_OscConfig+0x4f8>)
 8001742:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8001746:	6053      	str	r3, [r2, #4]
 8001748:	e02e      	b.n	80017a8 <HAL_RCC_OscConfig+0x434>
 800174a:	4b48      	ldr	r3, [pc, #288]	; (800186c <HAL_RCC_OscConfig+0x4f8>)
 800174c:	685b      	ldr	r3, [r3, #4]
 800174e:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	6a1b      	ldr	r3, [r3, #32]
 8001756:	069b      	lsls	r3, r3, #26
 8001758:	4944      	ldr	r1, [pc, #272]	; (800186c <HAL_RCC_OscConfig+0x4f8>)
 800175a:	4313      	orrs	r3, r2
 800175c:	604b      	str	r3, [r1, #4]
 800175e:	e023      	b.n	80017a8 <HAL_RCC_OscConfig+0x434>
 8001760:	4b42      	ldr	r3, [pc, #264]	; (800186c <HAL_RCC_OscConfig+0x4f8>)
 8001762:	68db      	ldr	r3, [r3, #12]
 8001764:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	6a1b      	ldr	r3, [r3, #32]
 800176c:	061b      	lsls	r3, r3, #24
 800176e:	493f      	ldr	r1, [pc, #252]	; (800186c <HAL_RCC_OscConfig+0x4f8>)
 8001770:	4313      	orrs	r3, r2
 8001772:	60cb      	str	r3, [r1, #12]
 8001774:	e018      	b.n	80017a8 <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8001776:	4b3d      	ldr	r3, [pc, #244]	; (800186c <HAL_RCC_OscConfig+0x4f8>)
 8001778:	681b      	ldr	r3, [r3, #0]
 800177a:	4a3c      	ldr	r2, [pc, #240]	; (800186c <HAL_RCC_OscConfig+0x4f8>)
 800177c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8001780:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001782:	f7ff fac3 	bl	8000d0c <HAL_GetTick>
 8001786:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8001788:	e008      	b.n	800179c <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 800178a:	f7ff fabf 	bl	8000d0c <HAL_GetTick>
 800178e:	4602      	mov	r2, r0
 8001790:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001792:	1ad3      	subs	r3, r2, r3
 8001794:	2b02      	cmp	r3, #2
 8001796:	d901      	bls.n	800179c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8001798:	2303      	movs	r3, #3
 800179a:	e23d      	b.n	8001c18 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 800179c:	4b33      	ldr	r3, [pc, #204]	; (800186c <HAL_RCC_OscConfig+0x4f8>)
 800179e:	681b      	ldr	r3, [r3, #0]
 80017a0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80017a4:	2b00      	cmp	r3, #0
 80017a6:	d1f0      	bne.n	800178a <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	681b      	ldr	r3, [r3, #0]
 80017ac:	f003 0308 	and.w	r3, r3, #8
 80017b0:	2b00      	cmp	r3, #0
 80017b2:	d036      	beq.n	8001822 <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	695b      	ldr	r3, [r3, #20]
 80017b8:	2b00      	cmp	r3, #0
 80017ba:	d019      	beq.n	80017f0 <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80017bc:	4b2b      	ldr	r3, [pc, #172]	; (800186c <HAL_RCC_OscConfig+0x4f8>)
 80017be:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80017c0:	4a2a      	ldr	r2, [pc, #168]	; (800186c <HAL_RCC_OscConfig+0x4f8>)
 80017c2:	f043 0301 	orr.w	r3, r3, #1
 80017c6:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80017c8:	f7ff faa0 	bl	8000d0c <HAL_GetTick>
 80017cc:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80017ce:	e008      	b.n	80017e2 <HAL_RCC_OscConfig+0x46e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80017d0:	f7ff fa9c 	bl	8000d0c <HAL_GetTick>
 80017d4:	4602      	mov	r2, r0
 80017d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017d8:	1ad3      	subs	r3, r2, r3
 80017da:	2b02      	cmp	r3, #2
 80017dc:	d901      	bls.n	80017e2 <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 80017de:	2303      	movs	r3, #3
 80017e0:	e21a      	b.n	8001c18 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80017e2:	4b22      	ldr	r3, [pc, #136]	; (800186c <HAL_RCC_OscConfig+0x4f8>)
 80017e4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80017e6:	f003 0302 	and.w	r3, r3, #2
 80017ea:	2b00      	cmp	r3, #0
 80017ec:	d0f0      	beq.n	80017d0 <HAL_RCC_OscConfig+0x45c>
 80017ee:	e018      	b.n	8001822 <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80017f0:	4b1e      	ldr	r3, [pc, #120]	; (800186c <HAL_RCC_OscConfig+0x4f8>)
 80017f2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80017f4:	4a1d      	ldr	r2, [pc, #116]	; (800186c <HAL_RCC_OscConfig+0x4f8>)
 80017f6:	f023 0301 	bic.w	r3, r3, #1
 80017fa:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80017fc:	f7ff fa86 	bl	8000d0c <HAL_GetTick>
 8001800:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8001802:	e008      	b.n	8001816 <HAL_RCC_OscConfig+0x4a2>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001804:	f7ff fa82 	bl	8000d0c <HAL_GetTick>
 8001808:	4602      	mov	r2, r0
 800180a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800180c:	1ad3      	subs	r3, r2, r3
 800180e:	2b02      	cmp	r3, #2
 8001810:	d901      	bls.n	8001816 <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 8001812:	2303      	movs	r3, #3
 8001814:	e200      	b.n	8001c18 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8001816:	4b15      	ldr	r3, [pc, #84]	; (800186c <HAL_RCC_OscConfig+0x4f8>)
 8001818:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800181a:	f003 0302 	and.w	r3, r3, #2
 800181e:	2b00      	cmp	r3, #0
 8001820:	d1f0      	bne.n	8001804 <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	681b      	ldr	r3, [r3, #0]
 8001826:	f003 0320 	and.w	r3, r3, #32
 800182a:	2b00      	cmp	r3, #0
 800182c:	d039      	beq.n	80018a2 <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	699b      	ldr	r3, [r3, #24]
 8001832:	2b00      	cmp	r3, #0
 8001834:	d01c      	beq.n	8001870 <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8001836:	4b0d      	ldr	r3, [pc, #52]	; (800186c <HAL_RCC_OscConfig+0x4f8>)
 8001838:	681b      	ldr	r3, [r3, #0]
 800183a:	4a0c      	ldr	r2, [pc, #48]	; (800186c <HAL_RCC_OscConfig+0x4f8>)
 800183c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001840:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8001842:	f7ff fa63 	bl	8000d0c <HAL_GetTick>
 8001846:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8001848:	e008      	b.n	800185c <HAL_RCC_OscConfig+0x4e8>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800184a:	f7ff fa5f 	bl	8000d0c <HAL_GetTick>
 800184e:	4602      	mov	r2, r0
 8001850:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001852:	1ad3      	subs	r3, r2, r3
 8001854:	2b02      	cmp	r3, #2
 8001856:	d901      	bls.n	800185c <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 8001858:	2303      	movs	r3, #3
 800185a:	e1dd      	b.n	8001c18 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800185c:	4b03      	ldr	r3, [pc, #12]	; (800186c <HAL_RCC_OscConfig+0x4f8>)
 800185e:	681b      	ldr	r3, [r3, #0]
 8001860:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001864:	2b00      	cmp	r3, #0
 8001866:	d0f0      	beq.n	800184a <HAL_RCC_OscConfig+0x4d6>
 8001868:	e01b      	b.n	80018a2 <HAL_RCC_OscConfig+0x52e>
 800186a:	bf00      	nop
 800186c:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8001870:	4b9b      	ldr	r3, [pc, #620]	; (8001ae0 <HAL_RCC_OscConfig+0x76c>)
 8001872:	681b      	ldr	r3, [r3, #0]
 8001874:	4a9a      	ldr	r2, [pc, #616]	; (8001ae0 <HAL_RCC_OscConfig+0x76c>)
 8001876:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800187a:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800187c:	f7ff fa46 	bl	8000d0c <HAL_GetTick>
 8001880:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8001882:	e008      	b.n	8001896 <HAL_RCC_OscConfig+0x522>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001884:	f7ff fa42 	bl	8000d0c <HAL_GetTick>
 8001888:	4602      	mov	r2, r0
 800188a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800188c:	1ad3      	subs	r3, r2, r3
 800188e:	2b02      	cmp	r3, #2
 8001890:	d901      	bls.n	8001896 <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 8001892:	2303      	movs	r3, #3
 8001894:	e1c0      	b.n	8001c18 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8001896:	4b92      	ldr	r3, [pc, #584]	; (8001ae0 <HAL_RCC_OscConfig+0x76c>)
 8001898:	681b      	ldr	r3, [r3, #0]
 800189a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800189e:	2b00      	cmp	r3, #0
 80018a0:	d1f0      	bne.n	8001884 <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	681b      	ldr	r3, [r3, #0]
 80018a6:	f003 0304 	and.w	r3, r3, #4
 80018aa:	2b00      	cmp	r3, #0
 80018ac:	f000 8081 	beq.w	80019b2 <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 80018b0:	4b8c      	ldr	r3, [pc, #560]	; (8001ae4 <HAL_RCC_OscConfig+0x770>)
 80018b2:	681b      	ldr	r3, [r3, #0]
 80018b4:	4a8b      	ldr	r2, [pc, #556]	; (8001ae4 <HAL_RCC_OscConfig+0x770>)
 80018b6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80018ba:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80018bc:	f7ff fa26 	bl	8000d0c <HAL_GetTick>
 80018c0:	6278      	str	r0, [r7, #36]	; 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80018c2:	e008      	b.n	80018d6 <HAL_RCC_OscConfig+0x562>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80018c4:	f7ff fa22 	bl	8000d0c <HAL_GetTick>
 80018c8:	4602      	mov	r2, r0
 80018ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018cc:	1ad3      	subs	r3, r2, r3
 80018ce:	2b64      	cmp	r3, #100	; 0x64
 80018d0:	d901      	bls.n	80018d6 <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 80018d2:	2303      	movs	r3, #3
 80018d4:	e1a0      	b.n	8001c18 <HAL_RCC_OscConfig+0x8a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80018d6:	4b83      	ldr	r3, [pc, #524]	; (8001ae4 <HAL_RCC_OscConfig+0x770>)
 80018d8:	681b      	ldr	r3, [r3, #0]
 80018da:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80018de:	2b00      	cmp	r3, #0
 80018e0:	d0f0      	beq.n	80018c4 <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	689b      	ldr	r3, [r3, #8]
 80018e6:	2b01      	cmp	r3, #1
 80018e8:	d106      	bne.n	80018f8 <HAL_RCC_OscConfig+0x584>
 80018ea:	4b7d      	ldr	r3, [pc, #500]	; (8001ae0 <HAL_RCC_OscConfig+0x76c>)
 80018ec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80018ee:	4a7c      	ldr	r2, [pc, #496]	; (8001ae0 <HAL_RCC_OscConfig+0x76c>)
 80018f0:	f043 0301 	orr.w	r3, r3, #1
 80018f4:	6713      	str	r3, [r2, #112]	; 0x70
 80018f6:	e02d      	b.n	8001954 <HAL_RCC_OscConfig+0x5e0>
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	689b      	ldr	r3, [r3, #8]
 80018fc:	2b00      	cmp	r3, #0
 80018fe:	d10c      	bne.n	800191a <HAL_RCC_OscConfig+0x5a6>
 8001900:	4b77      	ldr	r3, [pc, #476]	; (8001ae0 <HAL_RCC_OscConfig+0x76c>)
 8001902:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001904:	4a76      	ldr	r2, [pc, #472]	; (8001ae0 <HAL_RCC_OscConfig+0x76c>)
 8001906:	f023 0301 	bic.w	r3, r3, #1
 800190a:	6713      	str	r3, [r2, #112]	; 0x70
 800190c:	4b74      	ldr	r3, [pc, #464]	; (8001ae0 <HAL_RCC_OscConfig+0x76c>)
 800190e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001910:	4a73      	ldr	r2, [pc, #460]	; (8001ae0 <HAL_RCC_OscConfig+0x76c>)
 8001912:	f023 0304 	bic.w	r3, r3, #4
 8001916:	6713      	str	r3, [r2, #112]	; 0x70
 8001918:	e01c      	b.n	8001954 <HAL_RCC_OscConfig+0x5e0>
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	689b      	ldr	r3, [r3, #8]
 800191e:	2b05      	cmp	r3, #5
 8001920:	d10c      	bne.n	800193c <HAL_RCC_OscConfig+0x5c8>
 8001922:	4b6f      	ldr	r3, [pc, #444]	; (8001ae0 <HAL_RCC_OscConfig+0x76c>)
 8001924:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001926:	4a6e      	ldr	r2, [pc, #440]	; (8001ae0 <HAL_RCC_OscConfig+0x76c>)
 8001928:	f043 0304 	orr.w	r3, r3, #4
 800192c:	6713      	str	r3, [r2, #112]	; 0x70
 800192e:	4b6c      	ldr	r3, [pc, #432]	; (8001ae0 <HAL_RCC_OscConfig+0x76c>)
 8001930:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001932:	4a6b      	ldr	r2, [pc, #428]	; (8001ae0 <HAL_RCC_OscConfig+0x76c>)
 8001934:	f043 0301 	orr.w	r3, r3, #1
 8001938:	6713      	str	r3, [r2, #112]	; 0x70
 800193a:	e00b      	b.n	8001954 <HAL_RCC_OscConfig+0x5e0>
 800193c:	4b68      	ldr	r3, [pc, #416]	; (8001ae0 <HAL_RCC_OscConfig+0x76c>)
 800193e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001940:	4a67      	ldr	r2, [pc, #412]	; (8001ae0 <HAL_RCC_OscConfig+0x76c>)
 8001942:	f023 0301 	bic.w	r3, r3, #1
 8001946:	6713      	str	r3, [r2, #112]	; 0x70
 8001948:	4b65      	ldr	r3, [pc, #404]	; (8001ae0 <HAL_RCC_OscConfig+0x76c>)
 800194a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800194c:	4a64      	ldr	r2, [pc, #400]	; (8001ae0 <HAL_RCC_OscConfig+0x76c>)
 800194e:	f023 0304 	bic.w	r3, r3, #4
 8001952:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	689b      	ldr	r3, [r3, #8]
 8001958:	2b00      	cmp	r3, #0
 800195a:	d015      	beq.n	8001988 <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800195c:	f7ff f9d6 	bl	8000d0c <HAL_GetTick>
 8001960:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8001962:	e00a      	b.n	800197a <HAL_RCC_OscConfig+0x606>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001964:	f7ff f9d2 	bl	8000d0c <HAL_GetTick>
 8001968:	4602      	mov	r2, r0
 800196a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800196c:	1ad3      	subs	r3, r2, r3
 800196e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001972:	4293      	cmp	r3, r2
 8001974:	d901      	bls.n	800197a <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 8001976:	2303      	movs	r3, #3
 8001978:	e14e      	b.n	8001c18 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800197a:	4b59      	ldr	r3, [pc, #356]	; (8001ae0 <HAL_RCC_OscConfig+0x76c>)
 800197c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800197e:	f003 0302 	and.w	r3, r3, #2
 8001982:	2b00      	cmp	r3, #0
 8001984:	d0ee      	beq.n	8001964 <HAL_RCC_OscConfig+0x5f0>
 8001986:	e014      	b.n	80019b2 <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001988:	f7ff f9c0 	bl	8000d0c <HAL_GetTick>
 800198c:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800198e:	e00a      	b.n	80019a6 <HAL_RCC_OscConfig+0x632>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001990:	f7ff f9bc 	bl	8000d0c <HAL_GetTick>
 8001994:	4602      	mov	r2, r0
 8001996:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001998:	1ad3      	subs	r3, r2, r3
 800199a:	f241 3288 	movw	r2, #5000	; 0x1388
 800199e:	4293      	cmp	r3, r2
 80019a0:	d901      	bls.n	80019a6 <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 80019a2:	2303      	movs	r3, #3
 80019a4:	e138      	b.n	8001c18 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80019a6:	4b4e      	ldr	r3, [pc, #312]	; (8001ae0 <HAL_RCC_OscConfig+0x76c>)
 80019a8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80019aa:	f003 0302 	and.w	r3, r3, #2
 80019ae:	2b00      	cmp	r3, #0
 80019b0:	d1ee      	bne.n	8001990 <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80019b6:	2b00      	cmp	r3, #0
 80019b8:	f000 812d 	beq.w	8001c16 <HAL_RCC_OscConfig+0x8a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 80019bc:	4b48      	ldr	r3, [pc, #288]	; (8001ae0 <HAL_RCC_OscConfig+0x76c>)
 80019be:	691b      	ldr	r3, [r3, #16]
 80019c0:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80019c4:	2b18      	cmp	r3, #24
 80019c6:	f000 80bd 	beq.w	8001b44 <HAL_RCC_OscConfig+0x7d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80019ce:	2b02      	cmp	r3, #2
 80019d0:	f040 809e 	bne.w	8001b10 <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80019d4:	4b42      	ldr	r3, [pc, #264]	; (8001ae0 <HAL_RCC_OscConfig+0x76c>)
 80019d6:	681b      	ldr	r3, [r3, #0]
 80019d8:	4a41      	ldr	r2, [pc, #260]	; (8001ae0 <HAL_RCC_OscConfig+0x76c>)
 80019da:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80019de:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80019e0:	f7ff f994 	bl	8000d0c <HAL_GetTick>
 80019e4:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80019e6:	e008      	b.n	80019fa <HAL_RCC_OscConfig+0x686>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80019e8:	f7ff f990 	bl	8000d0c <HAL_GetTick>
 80019ec:	4602      	mov	r2, r0
 80019ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019f0:	1ad3      	subs	r3, r2, r3
 80019f2:	2b02      	cmp	r3, #2
 80019f4:	d901      	bls.n	80019fa <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 80019f6:	2303      	movs	r3, #3
 80019f8:	e10e      	b.n	8001c18 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80019fa:	4b39      	ldr	r3, [pc, #228]	; (8001ae0 <HAL_RCC_OscConfig+0x76c>)
 80019fc:	681b      	ldr	r3, [r3, #0]
 80019fe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001a02:	2b00      	cmp	r3, #0
 8001a04:	d1f0      	bne.n	80019e8 <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001a06:	4b36      	ldr	r3, [pc, #216]	; (8001ae0 <HAL_RCC_OscConfig+0x76c>)
 8001a08:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001a0a:	4b37      	ldr	r3, [pc, #220]	; (8001ae8 <HAL_RCC_OscConfig+0x774>)
 8001a0c:	4013      	ands	r3, r2
 8001a0e:	687a      	ldr	r2, [r7, #4]
 8001a10:	6a91      	ldr	r1, [r2, #40]	; 0x28
 8001a12:	687a      	ldr	r2, [r7, #4]
 8001a14:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8001a16:	0112      	lsls	r2, r2, #4
 8001a18:	430a      	orrs	r2, r1
 8001a1a:	4931      	ldr	r1, [pc, #196]	; (8001ae0 <HAL_RCC_OscConfig+0x76c>)
 8001a1c:	4313      	orrs	r3, r2
 8001a1e:	628b      	str	r3, [r1, #40]	; 0x28
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a24:	3b01      	subs	r3, #1
 8001a26:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001a2e:	3b01      	subs	r3, #1
 8001a30:	025b      	lsls	r3, r3, #9
 8001a32:	b29b      	uxth	r3, r3
 8001a34:	431a      	orrs	r2, r3
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001a3a:	3b01      	subs	r3, #1
 8001a3c:	041b      	lsls	r3, r3, #16
 8001a3e:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8001a42:	431a      	orrs	r2, r3
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001a48:	3b01      	subs	r3, #1
 8001a4a:	061b      	lsls	r3, r3, #24
 8001a4c:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8001a50:	4923      	ldr	r1, [pc, #140]	; (8001ae0 <HAL_RCC_OscConfig+0x76c>)
 8001a52:	4313      	orrs	r3, r2
 8001a54:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 8001a56:	4b22      	ldr	r3, [pc, #136]	; (8001ae0 <HAL_RCC_OscConfig+0x76c>)
 8001a58:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a5a:	4a21      	ldr	r2, [pc, #132]	; (8001ae0 <HAL_RCC_OscConfig+0x76c>)
 8001a5c:	f023 0301 	bic.w	r3, r3, #1
 8001a60:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8001a62:	4b1f      	ldr	r3, [pc, #124]	; (8001ae0 <HAL_RCC_OscConfig+0x76c>)
 8001a64:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001a66:	4b21      	ldr	r3, [pc, #132]	; (8001aec <HAL_RCC_OscConfig+0x778>)
 8001a68:	4013      	ands	r3, r2
 8001a6a:	687a      	ldr	r2, [r7, #4]
 8001a6c:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8001a6e:	00d2      	lsls	r2, r2, #3
 8001a70:	491b      	ldr	r1, [pc, #108]	; (8001ae0 <HAL_RCC_OscConfig+0x76c>)
 8001a72:	4313      	orrs	r3, r2
 8001a74:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8001a76:	4b1a      	ldr	r3, [pc, #104]	; (8001ae0 <HAL_RCC_OscConfig+0x76c>)
 8001a78:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a7a:	f023 020c 	bic.w	r2, r3, #12
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a82:	4917      	ldr	r1, [pc, #92]	; (8001ae0 <HAL_RCC_OscConfig+0x76c>)
 8001a84:	4313      	orrs	r3, r2
 8001a86:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8001a88:	4b15      	ldr	r3, [pc, #84]	; (8001ae0 <HAL_RCC_OscConfig+0x76c>)
 8001a8a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a8c:	f023 0202 	bic.w	r2, r3, #2
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a94:	4912      	ldr	r1, [pc, #72]	; (8001ae0 <HAL_RCC_OscConfig+0x76c>)
 8001a96:	4313      	orrs	r3, r2
 8001a98:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8001a9a:	4b11      	ldr	r3, [pc, #68]	; (8001ae0 <HAL_RCC_OscConfig+0x76c>)
 8001a9c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a9e:	4a10      	ldr	r2, [pc, #64]	; (8001ae0 <HAL_RCC_OscConfig+0x76c>)
 8001aa0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001aa4:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8001aa6:	4b0e      	ldr	r3, [pc, #56]	; (8001ae0 <HAL_RCC_OscConfig+0x76c>)
 8001aa8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001aaa:	4a0d      	ldr	r2, [pc, #52]	; (8001ae0 <HAL_RCC_OscConfig+0x76c>)
 8001aac:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001ab0:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8001ab2:	4b0b      	ldr	r3, [pc, #44]	; (8001ae0 <HAL_RCC_OscConfig+0x76c>)
 8001ab4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ab6:	4a0a      	ldr	r2, [pc, #40]	; (8001ae0 <HAL_RCC_OscConfig+0x76c>)
 8001ab8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001abc:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 8001abe:	4b08      	ldr	r3, [pc, #32]	; (8001ae0 <HAL_RCC_OscConfig+0x76c>)
 8001ac0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ac2:	4a07      	ldr	r2, [pc, #28]	; (8001ae0 <HAL_RCC_OscConfig+0x76c>)
 8001ac4:	f043 0301 	orr.w	r3, r3, #1
 8001ac8:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001aca:	4b05      	ldr	r3, [pc, #20]	; (8001ae0 <HAL_RCC_OscConfig+0x76c>)
 8001acc:	681b      	ldr	r3, [r3, #0]
 8001ace:	4a04      	ldr	r2, [pc, #16]	; (8001ae0 <HAL_RCC_OscConfig+0x76c>)
 8001ad0:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001ad4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001ad6:	f7ff f919 	bl	8000d0c <HAL_GetTick>
 8001ada:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8001adc:	e011      	b.n	8001b02 <HAL_RCC_OscConfig+0x78e>
 8001ade:	bf00      	nop
 8001ae0:	58024400 	.word	0x58024400
 8001ae4:	58024800 	.word	0x58024800
 8001ae8:	fffffc0c 	.word	0xfffffc0c
 8001aec:	ffff0007 	.word	0xffff0007
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001af0:	f7ff f90c 	bl	8000d0c <HAL_GetTick>
 8001af4:	4602      	mov	r2, r0
 8001af6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001af8:	1ad3      	subs	r3, r2, r3
 8001afa:	2b02      	cmp	r3, #2
 8001afc:	d901      	bls.n	8001b02 <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 8001afe:	2303      	movs	r3, #3
 8001b00:	e08a      	b.n	8001c18 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8001b02:	4b47      	ldr	r3, [pc, #284]	; (8001c20 <HAL_RCC_OscConfig+0x8ac>)
 8001b04:	681b      	ldr	r3, [r3, #0]
 8001b06:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001b0a:	2b00      	cmp	r3, #0
 8001b0c:	d0f0      	beq.n	8001af0 <HAL_RCC_OscConfig+0x77c>
 8001b0e:	e082      	b.n	8001c16 <HAL_RCC_OscConfig+0x8a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001b10:	4b43      	ldr	r3, [pc, #268]	; (8001c20 <HAL_RCC_OscConfig+0x8ac>)
 8001b12:	681b      	ldr	r3, [r3, #0]
 8001b14:	4a42      	ldr	r2, [pc, #264]	; (8001c20 <HAL_RCC_OscConfig+0x8ac>)
 8001b16:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001b1a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001b1c:	f7ff f8f6 	bl	8000d0c <HAL_GetTick>
 8001b20:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8001b22:	e008      	b.n	8001b36 <HAL_RCC_OscConfig+0x7c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001b24:	f7ff f8f2 	bl	8000d0c <HAL_GetTick>
 8001b28:	4602      	mov	r2, r0
 8001b2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b2c:	1ad3      	subs	r3, r2, r3
 8001b2e:	2b02      	cmp	r3, #2
 8001b30:	d901      	bls.n	8001b36 <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 8001b32:	2303      	movs	r3, #3
 8001b34:	e070      	b.n	8001c18 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8001b36:	4b3a      	ldr	r3, [pc, #232]	; (8001c20 <HAL_RCC_OscConfig+0x8ac>)
 8001b38:	681b      	ldr	r3, [r3, #0]
 8001b3a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001b3e:	2b00      	cmp	r3, #0
 8001b40:	d1f0      	bne.n	8001b24 <HAL_RCC_OscConfig+0x7b0>
 8001b42:	e068      	b.n	8001c16 <HAL_RCC_OscConfig+0x8a2>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8001b44:	4b36      	ldr	r3, [pc, #216]	; (8001c20 <HAL_RCC_OscConfig+0x8ac>)
 8001b46:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b48:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8001b4a:	4b35      	ldr	r3, [pc, #212]	; (8001c20 <HAL_RCC_OscConfig+0x8ac>)
 8001b4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b4e:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b54:	2b01      	cmp	r3, #1
 8001b56:	d031      	beq.n	8001bbc <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001b58:	693b      	ldr	r3, [r7, #16]
 8001b5a:	f003 0203 	and.w	r2, r3, #3
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001b62:	429a      	cmp	r2, r3
 8001b64:	d12a      	bne.n	8001bbc <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8001b66:	693b      	ldr	r3, [r7, #16]
 8001b68:	091b      	lsrs	r3, r3, #4
 8001b6a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	6adb      	ldr	r3, [r3, #44]	; 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001b72:	429a      	cmp	r2, r3
 8001b74:	d122      	bne.n	8001bbc <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8001b76:	68fb      	ldr	r3, [r7, #12]
 8001b78:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b80:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8001b82:	429a      	cmp	r2, r3
 8001b84:	d11a      	bne.n	8001bbc <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8001b86:	68fb      	ldr	r3, [r7, #12]
 8001b88:	0a5b      	lsrs	r3, r3, #9
 8001b8a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001b92:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8001b94:	429a      	cmp	r2, r3
 8001b96:	d111      	bne.n	8001bbc <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8001b98:	68fb      	ldr	r3, [r7, #12]
 8001b9a:	0c1b      	lsrs	r3, r3, #16
 8001b9c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001ba4:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8001ba6:	429a      	cmp	r2, r3
 8001ba8:	d108      	bne.n	8001bbc <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8001baa:	68fb      	ldr	r3, [r7, #12]
 8001bac:	0e1b      	lsrs	r3, r3, #24
 8001bae:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001bb6:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8001bb8:	429a      	cmp	r2, r3
 8001bba:	d001      	beq.n	8001bc0 <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 8001bbc:	2301      	movs	r3, #1
 8001bbe:	e02b      	b.n	8001c18 <HAL_RCC_OscConfig+0x8a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 8001bc0:	4b17      	ldr	r3, [pc, #92]	; (8001c20 <HAL_RCC_OscConfig+0x8ac>)
 8001bc2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001bc4:	08db      	lsrs	r3, r3, #3
 8001bc6:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8001bca:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001bd0:	693a      	ldr	r2, [r7, #16]
 8001bd2:	429a      	cmp	r2, r3
 8001bd4:	d01f      	beq.n	8001c16 <HAL_RCC_OscConfig+0x8a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 8001bd6:	4b12      	ldr	r3, [pc, #72]	; (8001c20 <HAL_RCC_OscConfig+0x8ac>)
 8001bd8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001bda:	4a11      	ldr	r2, [pc, #68]	; (8001c20 <HAL_RCC_OscConfig+0x8ac>)
 8001bdc:	f023 0301 	bic.w	r3, r3, #1
 8001be0:	62d3      	str	r3, [r2, #44]	; 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8001be2:	f7ff f893 	bl	8000d0c <HAL_GetTick>
 8001be6:	6278      	str	r0, [r7, #36]	; 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 8001be8:	bf00      	nop
 8001bea:	f7ff f88f 	bl	8000d0c <HAL_GetTick>
 8001bee:	4602      	mov	r2, r0
 8001bf0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001bf2:	4293      	cmp	r3, r2
 8001bf4:	d0f9      	beq.n	8001bea <HAL_RCC_OscConfig+0x876>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8001bf6:	4b0a      	ldr	r3, [pc, #40]	; (8001c20 <HAL_RCC_OscConfig+0x8ac>)
 8001bf8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001bfa:	4b0a      	ldr	r3, [pc, #40]	; (8001c24 <HAL_RCC_OscConfig+0x8b0>)
 8001bfc:	4013      	ands	r3, r2
 8001bfe:	687a      	ldr	r2, [r7, #4]
 8001c00:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8001c02:	00d2      	lsls	r2, r2, #3
 8001c04:	4906      	ldr	r1, [pc, #24]	; (8001c20 <HAL_RCC_OscConfig+0x8ac>)
 8001c06:	4313      	orrs	r3, r2
 8001c08:	634b      	str	r3, [r1, #52]	; 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 8001c0a:	4b05      	ldr	r3, [pc, #20]	; (8001c20 <HAL_RCC_OscConfig+0x8ac>)
 8001c0c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c0e:	4a04      	ldr	r2, [pc, #16]	; (8001c20 <HAL_RCC_OscConfig+0x8ac>)
 8001c10:	f043 0301 	orr.w	r3, r3, #1
 8001c14:	62d3      	str	r3, [r2, #44]	; 0x2c
        }
      }
    }
  }
  return HAL_OK;
 8001c16:	2300      	movs	r3, #0
}
 8001c18:	4618      	mov	r0, r3
 8001c1a:	3730      	adds	r7, #48	; 0x30
 8001c1c:	46bd      	mov	sp, r7
 8001c1e:	bd80      	pop	{r7, pc}
 8001c20:	58024400 	.word	0x58024400
 8001c24:	ffff0007 	.word	0xffff0007

08001c28 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001c28:	b580      	push	{r7, lr}
 8001c2a:	b086      	sub	sp, #24
 8001c2c:	af00      	add	r7, sp, #0
 8001c2e:	6078      	str	r0, [r7, #4]
 8001c30:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	2b00      	cmp	r3, #0
 8001c36:	d101      	bne.n	8001c3c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001c38:	2301      	movs	r3, #1
 8001c3a:	e19c      	b.n	8001f76 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001c3c:	4b8a      	ldr	r3, [pc, #552]	; (8001e68 <HAL_RCC_ClockConfig+0x240>)
 8001c3e:	681b      	ldr	r3, [r3, #0]
 8001c40:	f003 030f 	and.w	r3, r3, #15
 8001c44:	683a      	ldr	r2, [r7, #0]
 8001c46:	429a      	cmp	r2, r3
 8001c48:	d910      	bls.n	8001c6c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001c4a:	4b87      	ldr	r3, [pc, #540]	; (8001e68 <HAL_RCC_ClockConfig+0x240>)
 8001c4c:	681b      	ldr	r3, [r3, #0]
 8001c4e:	f023 020f 	bic.w	r2, r3, #15
 8001c52:	4985      	ldr	r1, [pc, #532]	; (8001e68 <HAL_RCC_ClockConfig+0x240>)
 8001c54:	683b      	ldr	r3, [r7, #0]
 8001c56:	4313      	orrs	r3, r2
 8001c58:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001c5a:	4b83      	ldr	r3, [pc, #524]	; (8001e68 <HAL_RCC_ClockConfig+0x240>)
 8001c5c:	681b      	ldr	r3, [r3, #0]
 8001c5e:	f003 030f 	and.w	r3, r3, #15
 8001c62:	683a      	ldr	r2, [r7, #0]
 8001c64:	429a      	cmp	r2, r3
 8001c66:	d001      	beq.n	8001c6c <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8001c68:	2301      	movs	r3, #1
 8001c6a:	e184      	b.n	8001f76 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	681b      	ldr	r3, [r3, #0]
 8001c70:	f003 0304 	and.w	r3, r3, #4
 8001c74:	2b00      	cmp	r3, #0
 8001c76:	d010      	beq.n	8001c9a <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	691a      	ldr	r2, [r3, #16]
 8001c7c:	4b7b      	ldr	r3, [pc, #492]	; (8001e6c <HAL_RCC_ClockConfig+0x244>)
 8001c7e:	699b      	ldr	r3, [r3, #24]
 8001c80:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8001c84:	429a      	cmp	r2, r3
 8001c86:	d908      	bls.n	8001c9a <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8001c88:	4b78      	ldr	r3, [pc, #480]	; (8001e6c <HAL_RCC_ClockConfig+0x244>)
 8001c8a:	699b      	ldr	r3, [r3, #24]
 8001c8c:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	691b      	ldr	r3, [r3, #16]
 8001c94:	4975      	ldr	r1, [pc, #468]	; (8001e6c <HAL_RCC_ClockConfig+0x244>)
 8001c96:	4313      	orrs	r3, r2
 8001c98:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	681b      	ldr	r3, [r3, #0]
 8001c9e:	f003 0308 	and.w	r3, r3, #8
 8001ca2:	2b00      	cmp	r3, #0
 8001ca4:	d010      	beq.n	8001cc8 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	695a      	ldr	r2, [r3, #20]
 8001caa:	4b70      	ldr	r3, [pc, #448]	; (8001e6c <HAL_RCC_ClockConfig+0x244>)
 8001cac:	69db      	ldr	r3, [r3, #28]
 8001cae:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8001cb2:	429a      	cmp	r2, r3
 8001cb4:	d908      	bls.n	8001cc8 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8001cb6:	4b6d      	ldr	r3, [pc, #436]	; (8001e6c <HAL_RCC_ClockConfig+0x244>)
 8001cb8:	69db      	ldr	r3, [r3, #28]
 8001cba:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	695b      	ldr	r3, [r3, #20]
 8001cc2:	496a      	ldr	r1, [pc, #424]	; (8001e6c <HAL_RCC_ClockConfig+0x244>)
 8001cc4:	4313      	orrs	r3, r2
 8001cc6:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	681b      	ldr	r3, [r3, #0]
 8001ccc:	f003 0310 	and.w	r3, r3, #16
 8001cd0:	2b00      	cmp	r3, #0
 8001cd2:	d010      	beq.n	8001cf6 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	699a      	ldr	r2, [r3, #24]
 8001cd8:	4b64      	ldr	r3, [pc, #400]	; (8001e6c <HAL_RCC_ClockConfig+0x244>)
 8001cda:	69db      	ldr	r3, [r3, #28]
 8001cdc:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8001ce0:	429a      	cmp	r2, r3
 8001ce2:	d908      	bls.n	8001cf6 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8001ce4:	4b61      	ldr	r3, [pc, #388]	; (8001e6c <HAL_RCC_ClockConfig+0x244>)
 8001ce6:	69db      	ldr	r3, [r3, #28]
 8001ce8:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	699b      	ldr	r3, [r3, #24]
 8001cf0:	495e      	ldr	r1, [pc, #376]	; (8001e6c <HAL_RCC_ClockConfig+0x244>)
 8001cf2:	4313      	orrs	r3, r2
 8001cf4:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	681b      	ldr	r3, [r3, #0]
 8001cfa:	f003 0320 	and.w	r3, r3, #32
 8001cfe:	2b00      	cmp	r3, #0
 8001d00:	d010      	beq.n	8001d24 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	69da      	ldr	r2, [r3, #28]
 8001d06:	4b59      	ldr	r3, [pc, #356]	; (8001e6c <HAL_RCC_ClockConfig+0x244>)
 8001d08:	6a1b      	ldr	r3, [r3, #32]
 8001d0a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8001d0e:	429a      	cmp	r2, r3
 8001d10:	d908      	bls.n	8001d24 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8001d12:	4b56      	ldr	r3, [pc, #344]	; (8001e6c <HAL_RCC_ClockConfig+0x244>)
 8001d14:	6a1b      	ldr	r3, [r3, #32]
 8001d16:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	69db      	ldr	r3, [r3, #28]
 8001d1e:	4953      	ldr	r1, [pc, #332]	; (8001e6c <HAL_RCC_ClockConfig+0x244>)
 8001d20:	4313      	orrs	r3, r2
 8001d22:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	681b      	ldr	r3, [r3, #0]
 8001d28:	f003 0302 	and.w	r3, r3, #2
 8001d2c:	2b00      	cmp	r3, #0
 8001d2e:	d010      	beq.n	8001d52 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	68da      	ldr	r2, [r3, #12]
 8001d34:	4b4d      	ldr	r3, [pc, #308]	; (8001e6c <HAL_RCC_ClockConfig+0x244>)
 8001d36:	699b      	ldr	r3, [r3, #24]
 8001d38:	f003 030f 	and.w	r3, r3, #15
 8001d3c:	429a      	cmp	r2, r3
 8001d3e:	d908      	bls.n	8001d52 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001d40:	4b4a      	ldr	r3, [pc, #296]	; (8001e6c <HAL_RCC_ClockConfig+0x244>)
 8001d42:	699b      	ldr	r3, [r3, #24]
 8001d44:	f023 020f 	bic.w	r2, r3, #15
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	68db      	ldr	r3, [r3, #12]
 8001d4c:	4947      	ldr	r1, [pc, #284]	; (8001e6c <HAL_RCC_ClockConfig+0x244>)
 8001d4e:	4313      	orrs	r3, r2
 8001d50:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	681b      	ldr	r3, [r3, #0]
 8001d56:	f003 0301 	and.w	r3, r3, #1
 8001d5a:	2b00      	cmp	r3, #0
 8001d5c:	d055      	beq.n	8001e0a <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8001d5e:	4b43      	ldr	r3, [pc, #268]	; (8001e6c <HAL_RCC_ClockConfig+0x244>)
 8001d60:	699b      	ldr	r3, [r3, #24]
 8001d62:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	689b      	ldr	r3, [r3, #8]
 8001d6a:	4940      	ldr	r1, [pc, #256]	; (8001e6c <HAL_RCC_ClockConfig+0x244>)
 8001d6c:	4313      	orrs	r3, r2
 8001d6e:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	685b      	ldr	r3, [r3, #4]
 8001d74:	2b02      	cmp	r3, #2
 8001d76:	d107      	bne.n	8001d88 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001d78:	4b3c      	ldr	r3, [pc, #240]	; (8001e6c <HAL_RCC_ClockConfig+0x244>)
 8001d7a:	681b      	ldr	r3, [r3, #0]
 8001d7c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d80:	2b00      	cmp	r3, #0
 8001d82:	d121      	bne.n	8001dc8 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8001d84:	2301      	movs	r3, #1
 8001d86:	e0f6      	b.n	8001f76 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	685b      	ldr	r3, [r3, #4]
 8001d8c:	2b03      	cmp	r3, #3
 8001d8e:	d107      	bne.n	8001da0 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8001d90:	4b36      	ldr	r3, [pc, #216]	; (8001e6c <HAL_RCC_ClockConfig+0x244>)
 8001d92:	681b      	ldr	r3, [r3, #0]
 8001d94:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001d98:	2b00      	cmp	r3, #0
 8001d9a:	d115      	bne.n	8001dc8 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8001d9c:	2301      	movs	r3, #1
 8001d9e:	e0ea      	b.n	8001f76 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	685b      	ldr	r3, [r3, #4]
 8001da4:	2b01      	cmp	r3, #1
 8001da6:	d107      	bne.n	8001db8 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8001da8:	4b30      	ldr	r3, [pc, #192]	; (8001e6c <HAL_RCC_ClockConfig+0x244>)
 8001daa:	681b      	ldr	r3, [r3, #0]
 8001dac:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001db0:	2b00      	cmp	r3, #0
 8001db2:	d109      	bne.n	8001dc8 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8001db4:	2301      	movs	r3, #1
 8001db6:	e0de      	b.n	8001f76 <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001db8:	4b2c      	ldr	r3, [pc, #176]	; (8001e6c <HAL_RCC_ClockConfig+0x244>)
 8001dba:	681b      	ldr	r3, [r3, #0]
 8001dbc:	f003 0304 	and.w	r3, r3, #4
 8001dc0:	2b00      	cmp	r3, #0
 8001dc2:	d101      	bne.n	8001dc8 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8001dc4:	2301      	movs	r3, #1
 8001dc6:	e0d6      	b.n	8001f76 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001dc8:	4b28      	ldr	r3, [pc, #160]	; (8001e6c <HAL_RCC_ClockConfig+0x244>)
 8001dca:	691b      	ldr	r3, [r3, #16]
 8001dcc:	f023 0207 	bic.w	r2, r3, #7
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	685b      	ldr	r3, [r3, #4]
 8001dd4:	4925      	ldr	r1, [pc, #148]	; (8001e6c <HAL_RCC_ClockConfig+0x244>)
 8001dd6:	4313      	orrs	r3, r2
 8001dd8:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001dda:	f7fe ff97 	bl	8000d0c <HAL_GetTick>
 8001dde:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001de0:	e00a      	b.n	8001df8 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001de2:	f7fe ff93 	bl	8000d0c <HAL_GetTick>
 8001de6:	4602      	mov	r2, r0
 8001de8:	697b      	ldr	r3, [r7, #20]
 8001dea:	1ad3      	subs	r3, r2, r3
 8001dec:	f241 3288 	movw	r2, #5000	; 0x1388
 8001df0:	4293      	cmp	r3, r2
 8001df2:	d901      	bls.n	8001df8 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 8001df4:	2303      	movs	r3, #3
 8001df6:	e0be      	b.n	8001f76 <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001df8:	4b1c      	ldr	r3, [pc, #112]	; (8001e6c <HAL_RCC_ClockConfig+0x244>)
 8001dfa:	691b      	ldr	r3, [r3, #16]
 8001dfc:	f003 0238 	and.w	r2, r3, #56	; 0x38
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	685b      	ldr	r3, [r3, #4]
 8001e04:	00db      	lsls	r3, r3, #3
 8001e06:	429a      	cmp	r2, r3
 8001e08:	d1eb      	bne.n	8001de2 <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	681b      	ldr	r3, [r3, #0]
 8001e0e:	f003 0302 	and.w	r3, r3, #2
 8001e12:	2b00      	cmp	r3, #0
 8001e14:	d010      	beq.n	8001e38 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	68da      	ldr	r2, [r3, #12]
 8001e1a:	4b14      	ldr	r3, [pc, #80]	; (8001e6c <HAL_RCC_ClockConfig+0x244>)
 8001e1c:	699b      	ldr	r3, [r3, #24]
 8001e1e:	f003 030f 	and.w	r3, r3, #15
 8001e22:	429a      	cmp	r2, r3
 8001e24:	d208      	bcs.n	8001e38 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001e26:	4b11      	ldr	r3, [pc, #68]	; (8001e6c <HAL_RCC_ClockConfig+0x244>)
 8001e28:	699b      	ldr	r3, [r3, #24]
 8001e2a:	f023 020f 	bic.w	r2, r3, #15
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	68db      	ldr	r3, [r3, #12]
 8001e32:	490e      	ldr	r1, [pc, #56]	; (8001e6c <HAL_RCC_ClockConfig+0x244>)
 8001e34:	4313      	orrs	r3, r2
 8001e36:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001e38:	4b0b      	ldr	r3, [pc, #44]	; (8001e68 <HAL_RCC_ClockConfig+0x240>)
 8001e3a:	681b      	ldr	r3, [r3, #0]
 8001e3c:	f003 030f 	and.w	r3, r3, #15
 8001e40:	683a      	ldr	r2, [r7, #0]
 8001e42:	429a      	cmp	r2, r3
 8001e44:	d214      	bcs.n	8001e70 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001e46:	4b08      	ldr	r3, [pc, #32]	; (8001e68 <HAL_RCC_ClockConfig+0x240>)
 8001e48:	681b      	ldr	r3, [r3, #0]
 8001e4a:	f023 020f 	bic.w	r2, r3, #15
 8001e4e:	4906      	ldr	r1, [pc, #24]	; (8001e68 <HAL_RCC_ClockConfig+0x240>)
 8001e50:	683b      	ldr	r3, [r7, #0]
 8001e52:	4313      	orrs	r3, r2
 8001e54:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001e56:	4b04      	ldr	r3, [pc, #16]	; (8001e68 <HAL_RCC_ClockConfig+0x240>)
 8001e58:	681b      	ldr	r3, [r3, #0]
 8001e5a:	f003 030f 	and.w	r3, r3, #15
 8001e5e:	683a      	ldr	r2, [r7, #0]
 8001e60:	429a      	cmp	r2, r3
 8001e62:	d005      	beq.n	8001e70 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8001e64:	2301      	movs	r3, #1
 8001e66:	e086      	b.n	8001f76 <HAL_RCC_ClockConfig+0x34e>
 8001e68:	52002000 	.word	0x52002000
 8001e6c:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	681b      	ldr	r3, [r3, #0]
 8001e74:	f003 0304 	and.w	r3, r3, #4
 8001e78:	2b00      	cmp	r3, #0
 8001e7a:	d010      	beq.n	8001e9e <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	691a      	ldr	r2, [r3, #16]
 8001e80:	4b3f      	ldr	r3, [pc, #252]	; (8001f80 <HAL_RCC_ClockConfig+0x358>)
 8001e82:	699b      	ldr	r3, [r3, #24]
 8001e84:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8001e88:	429a      	cmp	r2, r3
 8001e8a:	d208      	bcs.n	8001e9e <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8001e8c:	4b3c      	ldr	r3, [pc, #240]	; (8001f80 <HAL_RCC_ClockConfig+0x358>)
 8001e8e:	699b      	ldr	r3, [r3, #24]
 8001e90:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	691b      	ldr	r3, [r3, #16]
 8001e98:	4939      	ldr	r1, [pc, #228]	; (8001f80 <HAL_RCC_ClockConfig+0x358>)
 8001e9a:	4313      	orrs	r3, r2
 8001e9c:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	681b      	ldr	r3, [r3, #0]
 8001ea2:	f003 0308 	and.w	r3, r3, #8
 8001ea6:	2b00      	cmp	r3, #0
 8001ea8:	d010      	beq.n	8001ecc <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	695a      	ldr	r2, [r3, #20]
 8001eae:	4b34      	ldr	r3, [pc, #208]	; (8001f80 <HAL_RCC_ClockConfig+0x358>)
 8001eb0:	69db      	ldr	r3, [r3, #28]
 8001eb2:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8001eb6:	429a      	cmp	r2, r3
 8001eb8:	d208      	bcs.n	8001ecc <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8001eba:	4b31      	ldr	r3, [pc, #196]	; (8001f80 <HAL_RCC_ClockConfig+0x358>)
 8001ebc:	69db      	ldr	r3, [r3, #28]
 8001ebe:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	695b      	ldr	r3, [r3, #20]
 8001ec6:	492e      	ldr	r1, [pc, #184]	; (8001f80 <HAL_RCC_ClockConfig+0x358>)
 8001ec8:	4313      	orrs	r3, r2
 8001eca:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	681b      	ldr	r3, [r3, #0]
 8001ed0:	f003 0310 	and.w	r3, r3, #16
 8001ed4:	2b00      	cmp	r3, #0
 8001ed6:	d010      	beq.n	8001efa <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	699a      	ldr	r2, [r3, #24]
 8001edc:	4b28      	ldr	r3, [pc, #160]	; (8001f80 <HAL_RCC_ClockConfig+0x358>)
 8001ede:	69db      	ldr	r3, [r3, #28]
 8001ee0:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8001ee4:	429a      	cmp	r2, r3
 8001ee6:	d208      	bcs.n	8001efa <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8001ee8:	4b25      	ldr	r3, [pc, #148]	; (8001f80 <HAL_RCC_ClockConfig+0x358>)
 8001eea:	69db      	ldr	r3, [r3, #28]
 8001eec:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	699b      	ldr	r3, [r3, #24]
 8001ef4:	4922      	ldr	r1, [pc, #136]	; (8001f80 <HAL_RCC_ClockConfig+0x358>)
 8001ef6:	4313      	orrs	r3, r2
 8001ef8:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	681b      	ldr	r3, [r3, #0]
 8001efe:	f003 0320 	and.w	r3, r3, #32
 8001f02:	2b00      	cmp	r3, #0
 8001f04:	d010      	beq.n	8001f28 <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	69da      	ldr	r2, [r3, #28]
 8001f0a:	4b1d      	ldr	r3, [pc, #116]	; (8001f80 <HAL_RCC_ClockConfig+0x358>)
 8001f0c:	6a1b      	ldr	r3, [r3, #32]
 8001f0e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8001f12:	429a      	cmp	r2, r3
 8001f14:	d208      	bcs.n	8001f28 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8001f16:	4b1a      	ldr	r3, [pc, #104]	; (8001f80 <HAL_RCC_ClockConfig+0x358>)
 8001f18:	6a1b      	ldr	r3, [r3, #32]
 8001f1a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	69db      	ldr	r3, [r3, #28]
 8001f22:	4917      	ldr	r1, [pc, #92]	; (8001f80 <HAL_RCC_ClockConfig+0x358>)
 8001f24:	4313      	orrs	r3, r2
 8001f26:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8001f28:	f000 f89e 	bl	8002068 <HAL_RCC_GetSysClockFreq>
 8001f2c:	4602      	mov	r2, r0
 8001f2e:	4b14      	ldr	r3, [pc, #80]	; (8001f80 <HAL_RCC_ClockConfig+0x358>)
 8001f30:	699b      	ldr	r3, [r3, #24]
 8001f32:	0a1b      	lsrs	r3, r3, #8
 8001f34:	f003 030f 	and.w	r3, r3, #15
 8001f38:	4912      	ldr	r1, [pc, #72]	; (8001f84 <HAL_RCC_ClockConfig+0x35c>)
 8001f3a:	5ccb      	ldrb	r3, [r1, r3]
 8001f3c:	f003 031f 	and.w	r3, r3, #31
 8001f40:	fa22 f303 	lsr.w	r3, r2, r3
 8001f44:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8001f46:	4b0e      	ldr	r3, [pc, #56]	; (8001f80 <HAL_RCC_ClockConfig+0x358>)
 8001f48:	699b      	ldr	r3, [r3, #24]
 8001f4a:	f003 030f 	and.w	r3, r3, #15
 8001f4e:	4a0d      	ldr	r2, [pc, #52]	; (8001f84 <HAL_RCC_ClockConfig+0x35c>)
 8001f50:	5cd3      	ldrb	r3, [r2, r3]
 8001f52:	f003 031f 	and.w	r3, r3, #31
 8001f56:	693a      	ldr	r2, [r7, #16]
 8001f58:	fa22 f303 	lsr.w	r3, r2, r3
 8001f5c:	4a0a      	ldr	r2, [pc, #40]	; (8001f88 <HAL_RCC_ClockConfig+0x360>)
 8001f5e:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8001f60:	4a0a      	ldr	r2, [pc, #40]	; (8001f8c <HAL_RCC_ClockConfig+0x364>)
 8001f62:	693b      	ldr	r3, [r7, #16]
 8001f64:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 8001f66:	4b0a      	ldr	r3, [pc, #40]	; (8001f90 <HAL_RCC_ClockConfig+0x368>)
 8001f68:	681b      	ldr	r3, [r3, #0]
 8001f6a:	4618      	mov	r0, r3
 8001f6c:	f7fe fe84 	bl	8000c78 <HAL_InitTick>
 8001f70:	4603      	mov	r3, r0
 8001f72:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8001f74:	7bfb      	ldrb	r3, [r7, #15]
}
 8001f76:	4618      	mov	r0, r3
 8001f78:	3718      	adds	r7, #24
 8001f7a:	46bd      	mov	sp, r7
 8001f7c:	bd80      	pop	{r7, pc}
 8001f7e:	bf00      	nop
 8001f80:	58024400 	.word	0x58024400
 8001f84:	08005308 	.word	0x08005308
 8001f88:	24000004 	.word	0x24000004
 8001f8c:	24000000 	.word	0x24000000
 8001f90:	24000008 	.word	0x24000008

08001f94 <HAL_RCC_MCOConfig>:
  *          This parameter can be one of the following values:
  *            @arg RCC_MCODIV_1 up to RCC_MCODIV_15  : divider applied to MCOx clock
  * @retval None
  */
void HAL_RCC_MCOConfig(uint32_t RCC_MCOx, uint32_t RCC_MCOSource, uint32_t RCC_MCODiv)
{
 8001f94:	b580      	push	{r7, lr}
 8001f96:	b08c      	sub	sp, #48	; 0x30
 8001f98:	af00      	add	r7, sp, #0
 8001f9a:	60f8      	str	r0, [r7, #12]
 8001f9c:	60b9      	str	r1, [r7, #8]
 8001f9e:	607a      	str	r2, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct;
  /* Check the parameters */
  assert_param(IS_RCC_MCO(RCC_MCOx));
  assert_param(IS_RCC_MCODIV(RCC_MCODiv));
  /* RCC_MCO1 */
  if (RCC_MCOx == RCC_MCO1)
 8001fa0:	68fb      	ldr	r3, [r7, #12]
 8001fa2:	2b00      	cmp	r3, #0
 8001fa4:	d12a      	bne.n	8001ffc <HAL_RCC_MCOConfig+0x68>
  {
    assert_param(IS_RCC_MCO1SOURCE(RCC_MCOSource));

    /* MCO1 Clock Enable */
    MCO1_CLK_ENABLE();
 8001fa6:	4b2d      	ldr	r3, [pc, #180]	; (800205c <HAL_RCC_MCOConfig+0xc8>)
 8001fa8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001fac:	4a2b      	ldr	r2, [pc, #172]	; (800205c <HAL_RCC_MCOConfig+0xc8>)
 8001fae:	f043 0301 	orr.w	r3, r3, #1
 8001fb2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001fb6:	4b29      	ldr	r3, [pc, #164]	; (800205c <HAL_RCC_MCOConfig+0xc8>)
 8001fb8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001fbc:	f003 0301 	and.w	r3, r3, #1
 8001fc0:	61bb      	str	r3, [r7, #24]
 8001fc2:	69bb      	ldr	r3, [r7, #24]

    /* Configure the MCO1 pin in alternate function mode */
    GPIO_InitStruct.Pin = MCO1_PIN;
 8001fc4:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001fc8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001fca:	2302      	movs	r3, #2
 8001fcc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001fce:	2303      	movs	r3, #3
 8001fd0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fd2:	2300      	movs	r3, #0
 8001fd4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 8001fd6:	2300      	movs	r3, #0
 8001fd8:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(MCO1_GPIO_PORT, &GPIO_InitStruct);
 8001fda:	f107 031c 	add.w	r3, r7, #28
 8001fde:	4619      	mov	r1, r3
 8001fe0:	481f      	ldr	r0, [pc, #124]	; (8002060 <HAL_RCC_MCOConfig+0xcc>)
 8001fe2:	f7fe ff8f 	bl	8000f04 <HAL_GPIO_Init>

    /* Mask MCO1 and MCO1PRE[3:0] bits then Select MCO1 clock source and pre-scaler */
    MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCO1 | RCC_CFGR_MCO1PRE), (RCC_MCOSource | RCC_MCODiv));
 8001fe6:	4b1d      	ldr	r3, [pc, #116]	; (800205c <HAL_RCC_MCOConfig+0xc8>)
 8001fe8:	691b      	ldr	r3, [r3, #16]
 8001fea:	f023 72fe 	bic.w	r2, r3, #33292288	; 0x1fc0000
 8001fee:	68b9      	ldr	r1, [r7, #8]
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	430b      	orrs	r3, r1
 8001ff4:	4919      	ldr	r1, [pc, #100]	; (800205c <HAL_RCC_MCOConfig+0xc8>)
 8001ff6:	4313      	orrs	r3, r2
 8001ff8:	610b      	str	r3, [r1, #16]
    HAL_GPIO_Init(MCO2_GPIO_PORT, &GPIO_InitStruct);

    /* Mask MCO2 and MCO2PRE[3:0] bits then Select MCO2 clock source and pre-scaler */
    MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCO2 | RCC_CFGR_MCO2PRE), (RCC_MCOSource | (RCC_MCODiv << 7U)));
  }
}
 8001ffa:	e02a      	b.n	8002052 <HAL_RCC_MCOConfig+0xbe>
    MCO2_CLK_ENABLE();
 8001ffc:	4b17      	ldr	r3, [pc, #92]	; (800205c <HAL_RCC_MCOConfig+0xc8>)
 8001ffe:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002002:	4a16      	ldr	r2, [pc, #88]	; (800205c <HAL_RCC_MCOConfig+0xc8>)
 8002004:	f043 0304 	orr.w	r3, r3, #4
 8002008:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800200c:	4b13      	ldr	r3, [pc, #76]	; (800205c <HAL_RCC_MCOConfig+0xc8>)
 800200e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002012:	f003 0304 	and.w	r3, r3, #4
 8002016:	617b      	str	r3, [r7, #20]
 8002018:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = MCO2_PIN;
 800201a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800201e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002020:	2302      	movs	r3, #2
 8002022:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002024:	2303      	movs	r3, #3
 8002026:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002028:	2300      	movs	r3, #0
 800202a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 800202c:	2300      	movs	r3, #0
 800202e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(MCO2_GPIO_PORT, &GPIO_InitStruct);
 8002030:	f107 031c 	add.w	r3, r7, #28
 8002034:	4619      	mov	r1, r3
 8002036:	480b      	ldr	r0, [pc, #44]	; (8002064 <HAL_RCC_MCOConfig+0xd0>)
 8002038:	f7fe ff64 	bl	8000f04 <HAL_GPIO_Init>
    MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCO2 | RCC_CFGR_MCO2PRE), (RCC_MCOSource | (RCC_MCODiv << 7U)));
 800203c:	4b07      	ldr	r3, [pc, #28]	; (800205c <HAL_RCC_MCOConfig+0xc8>)
 800203e:	691b      	ldr	r3, [r3, #16]
 8002040:	f023 427e 	bic.w	r2, r3, #4261412864	; 0xfe000000
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	01d9      	lsls	r1, r3, #7
 8002048:	68bb      	ldr	r3, [r7, #8]
 800204a:	430b      	orrs	r3, r1
 800204c:	4903      	ldr	r1, [pc, #12]	; (800205c <HAL_RCC_MCOConfig+0xc8>)
 800204e:	4313      	orrs	r3, r2
 8002050:	610b      	str	r3, [r1, #16]
}
 8002052:	bf00      	nop
 8002054:	3730      	adds	r7, #48	; 0x30
 8002056:	46bd      	mov	sp, r7
 8002058:	bd80      	pop	{r7, pc}
 800205a:	bf00      	nop
 800205c:	58024400 	.word	0x58024400
 8002060:	58020000 	.word	0x58020000
 8002064:	58020800 	.word	0x58020800

08002068 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002068:	b480      	push	{r7}
 800206a:	b089      	sub	sp, #36	; 0x24
 800206c:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 800206e:	4bb3      	ldr	r3, [pc, #716]	; (800233c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002070:	691b      	ldr	r3, [r3, #16]
 8002072:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002076:	2b18      	cmp	r3, #24
 8002078:	f200 8155 	bhi.w	8002326 <HAL_RCC_GetSysClockFreq+0x2be>
 800207c:	a201      	add	r2, pc, #4	; (adr r2, 8002084 <HAL_RCC_GetSysClockFreq+0x1c>)
 800207e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002082:	bf00      	nop
 8002084:	080020e9 	.word	0x080020e9
 8002088:	08002327 	.word	0x08002327
 800208c:	08002327 	.word	0x08002327
 8002090:	08002327 	.word	0x08002327
 8002094:	08002327 	.word	0x08002327
 8002098:	08002327 	.word	0x08002327
 800209c:	08002327 	.word	0x08002327
 80020a0:	08002327 	.word	0x08002327
 80020a4:	0800210f 	.word	0x0800210f
 80020a8:	08002327 	.word	0x08002327
 80020ac:	08002327 	.word	0x08002327
 80020b0:	08002327 	.word	0x08002327
 80020b4:	08002327 	.word	0x08002327
 80020b8:	08002327 	.word	0x08002327
 80020bc:	08002327 	.word	0x08002327
 80020c0:	08002327 	.word	0x08002327
 80020c4:	08002115 	.word	0x08002115
 80020c8:	08002327 	.word	0x08002327
 80020cc:	08002327 	.word	0x08002327
 80020d0:	08002327 	.word	0x08002327
 80020d4:	08002327 	.word	0x08002327
 80020d8:	08002327 	.word	0x08002327
 80020dc:	08002327 	.word	0x08002327
 80020e0:	08002327 	.word	0x08002327
 80020e4:	0800211b 	.word	0x0800211b
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80020e8:	4b94      	ldr	r3, [pc, #592]	; (800233c <HAL_RCC_GetSysClockFreq+0x2d4>)
 80020ea:	681b      	ldr	r3, [r3, #0]
 80020ec:	f003 0320 	and.w	r3, r3, #32
 80020f0:	2b00      	cmp	r3, #0
 80020f2:	d009      	beq.n	8002108 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80020f4:	4b91      	ldr	r3, [pc, #580]	; (800233c <HAL_RCC_GetSysClockFreq+0x2d4>)
 80020f6:	681b      	ldr	r3, [r3, #0]
 80020f8:	08db      	lsrs	r3, r3, #3
 80020fa:	f003 0303 	and.w	r3, r3, #3
 80020fe:	4a90      	ldr	r2, [pc, #576]	; (8002340 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8002100:	fa22 f303 	lsr.w	r3, r2, r3
 8002104:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 8002106:	e111      	b.n	800232c <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8002108:	4b8d      	ldr	r3, [pc, #564]	; (8002340 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800210a:	61bb      	str	r3, [r7, #24]
      break;
 800210c:	e10e      	b.n	800232c <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 800210e:	4b8d      	ldr	r3, [pc, #564]	; (8002344 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8002110:	61bb      	str	r3, [r7, #24]
      break;
 8002112:	e10b      	b.n	800232c <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 8002114:	4b8c      	ldr	r3, [pc, #560]	; (8002348 <HAL_RCC_GetSysClockFreq+0x2e0>)
 8002116:	61bb      	str	r3, [r7, #24]
      break;
 8002118:	e108      	b.n	800232c <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800211a:	4b88      	ldr	r3, [pc, #544]	; (800233c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800211c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800211e:	f003 0303 	and.w	r3, r3, #3
 8002122:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 8002124:	4b85      	ldr	r3, [pc, #532]	; (800233c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002126:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002128:	091b      	lsrs	r3, r3, #4
 800212a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800212e:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 8002130:	4b82      	ldr	r3, [pc, #520]	; (800233c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002132:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002134:	f003 0301 	and.w	r3, r3, #1
 8002138:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 800213a:	4b80      	ldr	r3, [pc, #512]	; (800233c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800213c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800213e:	08db      	lsrs	r3, r3, #3
 8002140:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8002144:	68fa      	ldr	r2, [r7, #12]
 8002146:	fb02 f303 	mul.w	r3, r2, r3
 800214a:	ee07 3a90 	vmov	s15, r3
 800214e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002152:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 8002156:	693b      	ldr	r3, [r7, #16]
 8002158:	2b00      	cmp	r3, #0
 800215a:	f000 80e1 	beq.w	8002320 <HAL_RCC_GetSysClockFreq+0x2b8>
 800215e:	697b      	ldr	r3, [r7, #20]
 8002160:	2b02      	cmp	r3, #2
 8002162:	f000 8083 	beq.w	800226c <HAL_RCC_GetSysClockFreq+0x204>
 8002166:	697b      	ldr	r3, [r7, #20]
 8002168:	2b02      	cmp	r3, #2
 800216a:	f200 80a1 	bhi.w	80022b0 <HAL_RCC_GetSysClockFreq+0x248>
 800216e:	697b      	ldr	r3, [r7, #20]
 8002170:	2b00      	cmp	r3, #0
 8002172:	d003      	beq.n	800217c <HAL_RCC_GetSysClockFreq+0x114>
 8002174:	697b      	ldr	r3, [r7, #20]
 8002176:	2b01      	cmp	r3, #1
 8002178:	d056      	beq.n	8002228 <HAL_RCC_GetSysClockFreq+0x1c0>
 800217a:	e099      	b.n	80022b0 <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800217c:	4b6f      	ldr	r3, [pc, #444]	; (800233c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800217e:	681b      	ldr	r3, [r3, #0]
 8002180:	f003 0320 	and.w	r3, r3, #32
 8002184:	2b00      	cmp	r3, #0
 8002186:	d02d      	beq.n	80021e4 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8002188:	4b6c      	ldr	r3, [pc, #432]	; (800233c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800218a:	681b      	ldr	r3, [r3, #0]
 800218c:	08db      	lsrs	r3, r3, #3
 800218e:	f003 0303 	and.w	r3, r3, #3
 8002192:	4a6b      	ldr	r2, [pc, #428]	; (8002340 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8002194:	fa22 f303 	lsr.w	r3, r2, r3
 8002198:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	ee07 3a90 	vmov	s15, r3
 80021a0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80021a4:	693b      	ldr	r3, [r7, #16]
 80021a6:	ee07 3a90 	vmov	s15, r3
 80021aa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80021ae:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80021b2:	4b62      	ldr	r3, [pc, #392]	; (800233c <HAL_RCC_GetSysClockFreq+0x2d4>)
 80021b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021b6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80021ba:	ee07 3a90 	vmov	s15, r3
 80021be:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80021c2:	ed97 6a02 	vldr	s12, [r7, #8]
 80021c6:	eddf 5a61 	vldr	s11, [pc, #388]	; 800234c <HAL_RCC_GetSysClockFreq+0x2e4>
 80021ca:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80021ce:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80021d2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80021d6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80021da:	ee67 7a27 	vmul.f32	s15, s14, s15
 80021de:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 80021e2:	e087      	b.n	80022f4 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80021e4:	693b      	ldr	r3, [r7, #16]
 80021e6:	ee07 3a90 	vmov	s15, r3
 80021ea:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80021ee:	eddf 6a58 	vldr	s13, [pc, #352]	; 8002350 <HAL_RCC_GetSysClockFreq+0x2e8>
 80021f2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80021f6:	4b51      	ldr	r3, [pc, #324]	; (800233c <HAL_RCC_GetSysClockFreq+0x2d4>)
 80021f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021fa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80021fe:	ee07 3a90 	vmov	s15, r3
 8002202:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002206:	ed97 6a02 	vldr	s12, [r7, #8]
 800220a:	eddf 5a50 	vldr	s11, [pc, #320]	; 800234c <HAL_RCC_GetSysClockFreq+0x2e4>
 800220e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002212:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002216:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800221a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800221e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002222:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8002226:	e065      	b.n	80022f4 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8002228:	693b      	ldr	r3, [r7, #16]
 800222a:	ee07 3a90 	vmov	s15, r3
 800222e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002232:	eddf 6a48 	vldr	s13, [pc, #288]	; 8002354 <HAL_RCC_GetSysClockFreq+0x2ec>
 8002236:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800223a:	4b40      	ldr	r3, [pc, #256]	; (800233c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800223c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800223e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002242:	ee07 3a90 	vmov	s15, r3
 8002246:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800224a:	ed97 6a02 	vldr	s12, [r7, #8]
 800224e:	eddf 5a3f 	vldr	s11, [pc, #252]	; 800234c <HAL_RCC_GetSysClockFreq+0x2e4>
 8002252:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002256:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800225a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800225e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002262:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002266:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800226a:	e043      	b.n	80022f4 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800226c:	693b      	ldr	r3, [r7, #16]
 800226e:	ee07 3a90 	vmov	s15, r3
 8002272:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002276:	eddf 6a38 	vldr	s13, [pc, #224]	; 8002358 <HAL_RCC_GetSysClockFreq+0x2f0>
 800227a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800227e:	4b2f      	ldr	r3, [pc, #188]	; (800233c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002280:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002282:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002286:	ee07 3a90 	vmov	s15, r3
 800228a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800228e:	ed97 6a02 	vldr	s12, [r7, #8]
 8002292:	eddf 5a2e 	vldr	s11, [pc, #184]	; 800234c <HAL_RCC_GetSysClockFreq+0x2e4>
 8002296:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800229a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800229e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80022a2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80022a6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80022aa:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80022ae:	e021      	b.n	80022f4 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80022b0:	693b      	ldr	r3, [r7, #16]
 80022b2:	ee07 3a90 	vmov	s15, r3
 80022b6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80022ba:	eddf 6a26 	vldr	s13, [pc, #152]	; 8002354 <HAL_RCC_GetSysClockFreq+0x2ec>
 80022be:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80022c2:	4b1e      	ldr	r3, [pc, #120]	; (800233c <HAL_RCC_GetSysClockFreq+0x2d4>)
 80022c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022c6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80022ca:	ee07 3a90 	vmov	s15, r3
 80022ce:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80022d2:	ed97 6a02 	vldr	s12, [r7, #8]
 80022d6:	eddf 5a1d 	vldr	s11, [pc, #116]	; 800234c <HAL_RCC_GetSysClockFreq+0x2e4>
 80022da:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80022de:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80022e2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80022e6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80022ea:	ee67 7a27 	vmul.f32	s15, s14, s15
 80022ee:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80022f2:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 80022f4:	4b11      	ldr	r3, [pc, #68]	; (800233c <HAL_RCC_GetSysClockFreq+0x2d4>)
 80022f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022f8:	0a5b      	lsrs	r3, r3, #9
 80022fa:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80022fe:	3301      	adds	r3, #1
 8002300:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 8002302:	683b      	ldr	r3, [r7, #0]
 8002304:	ee07 3a90 	vmov	s15, r3
 8002308:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800230c:	edd7 6a07 	vldr	s13, [r7, #28]
 8002310:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002314:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002318:	ee17 3a90 	vmov	r3, s15
 800231c:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 800231e:	e005      	b.n	800232c <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 8002320:	2300      	movs	r3, #0
 8002322:	61bb      	str	r3, [r7, #24]
      break;
 8002324:	e002      	b.n	800232c <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 8002326:	4b07      	ldr	r3, [pc, #28]	; (8002344 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8002328:	61bb      	str	r3, [r7, #24]
      break;
 800232a:	bf00      	nop
  }

  return sysclockfreq;
 800232c:	69bb      	ldr	r3, [r7, #24]
}
 800232e:	4618      	mov	r0, r3
 8002330:	3724      	adds	r7, #36	; 0x24
 8002332:	46bd      	mov	sp, r7
 8002334:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002338:	4770      	bx	lr
 800233a:	bf00      	nop
 800233c:	58024400 	.word	0x58024400
 8002340:	03d09000 	.word	0x03d09000
 8002344:	003d0900 	.word	0x003d0900
 8002348:	017d7840 	.word	0x017d7840
 800234c:	46000000 	.word	0x46000000
 8002350:	4c742400 	.word	0x4c742400
 8002354:	4a742400 	.word	0x4a742400
 8002358:	4bbebc20 	.word	0x4bbebc20

0800235c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800235c:	b580      	push	{r7, lr}
 800235e:	b082      	sub	sp, #8
 8002360:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8002362:	f7ff fe81 	bl	8002068 <HAL_RCC_GetSysClockFreq>
 8002366:	4602      	mov	r2, r0
 8002368:	4b10      	ldr	r3, [pc, #64]	; (80023ac <HAL_RCC_GetHCLKFreq+0x50>)
 800236a:	699b      	ldr	r3, [r3, #24]
 800236c:	0a1b      	lsrs	r3, r3, #8
 800236e:	f003 030f 	and.w	r3, r3, #15
 8002372:	490f      	ldr	r1, [pc, #60]	; (80023b0 <HAL_RCC_GetHCLKFreq+0x54>)
 8002374:	5ccb      	ldrb	r3, [r1, r3]
 8002376:	f003 031f 	and.w	r3, r3, #31
 800237a:	fa22 f303 	lsr.w	r3, r2, r3
 800237e:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8002380:	4b0a      	ldr	r3, [pc, #40]	; (80023ac <HAL_RCC_GetHCLKFreq+0x50>)
 8002382:	699b      	ldr	r3, [r3, #24]
 8002384:	f003 030f 	and.w	r3, r3, #15
 8002388:	4a09      	ldr	r2, [pc, #36]	; (80023b0 <HAL_RCC_GetHCLKFreq+0x54>)
 800238a:	5cd3      	ldrb	r3, [r2, r3]
 800238c:	f003 031f 	and.w	r3, r3, #31
 8002390:	687a      	ldr	r2, [r7, #4]
 8002392:	fa22 f303 	lsr.w	r3, r2, r3
 8002396:	4a07      	ldr	r2, [pc, #28]	; (80023b4 <HAL_RCC_GetHCLKFreq+0x58>)
 8002398:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800239a:	4a07      	ldr	r2, [pc, #28]	; (80023b8 <HAL_RCC_GetHCLKFreq+0x5c>)
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 80023a0:	4b04      	ldr	r3, [pc, #16]	; (80023b4 <HAL_RCC_GetHCLKFreq+0x58>)
 80023a2:	681b      	ldr	r3, [r3, #0]
}
 80023a4:	4618      	mov	r0, r3
 80023a6:	3708      	adds	r7, #8
 80023a8:	46bd      	mov	sp, r7
 80023aa:	bd80      	pop	{r7, pc}
 80023ac:	58024400 	.word	0x58024400
 80023b0:	08005308 	.word	0x08005308
 80023b4:	24000004 	.word	0x24000004
 80023b8:	24000000 	.word	0x24000000

080023bc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80023bc:	b580      	push	{r7, lr}
 80023be:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 80023c0:	f7ff ffcc 	bl	800235c <HAL_RCC_GetHCLKFreq>
 80023c4:	4602      	mov	r2, r0
 80023c6:	4b06      	ldr	r3, [pc, #24]	; (80023e0 <HAL_RCC_GetPCLK1Freq+0x24>)
 80023c8:	69db      	ldr	r3, [r3, #28]
 80023ca:	091b      	lsrs	r3, r3, #4
 80023cc:	f003 0307 	and.w	r3, r3, #7
 80023d0:	4904      	ldr	r1, [pc, #16]	; (80023e4 <HAL_RCC_GetPCLK1Freq+0x28>)
 80023d2:	5ccb      	ldrb	r3, [r1, r3]
 80023d4:	f003 031f 	and.w	r3, r3, #31
 80023d8:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 80023dc:	4618      	mov	r0, r3
 80023de:	bd80      	pop	{r7, pc}
 80023e0:	58024400 	.word	0x58024400
 80023e4:	08005308 	.word	0x08005308

080023e8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80023e8:	b580      	push	{r7, lr}
 80023ea:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 80023ec:	f7ff ffb6 	bl	800235c <HAL_RCC_GetHCLKFreq>
 80023f0:	4602      	mov	r2, r0
 80023f2:	4b06      	ldr	r3, [pc, #24]	; (800240c <HAL_RCC_GetPCLK2Freq+0x24>)
 80023f4:	69db      	ldr	r3, [r3, #28]
 80023f6:	0a1b      	lsrs	r3, r3, #8
 80023f8:	f003 0307 	and.w	r3, r3, #7
 80023fc:	4904      	ldr	r1, [pc, #16]	; (8002410 <HAL_RCC_GetPCLK2Freq+0x28>)
 80023fe:	5ccb      	ldrb	r3, [r1, r3]
 8002400:	f003 031f 	and.w	r3, r3, #31
 8002404:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8002408:	4618      	mov	r0, r3
 800240a:	bd80      	pop	{r7, pc}
 800240c:	58024400 	.word	0x58024400
 8002410:	08005308 	.word	0x08005308

08002414 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002414:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002418:	b0cc      	sub	sp, #304	; 0x130
 800241a:	af00      	add	r7, sp, #0
 800241c:	f8c7 011c 	str.w	r0, [r7, #284]	; 0x11c
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8002420:	2300      	movs	r3, #0
 8002422:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002426:	2300      	movs	r3, #0
 8002428:	f887 312e 	strb.w	r3, [r7, #302]	; 0x12e

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800242c:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8002430:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002434:	f002 6400 	and.w	r4, r2, #134217728	; 0x8000000
 8002438:	2500      	movs	r5, #0
 800243a:	ea54 0305 	orrs.w	r3, r4, r5
 800243e:	d049      	beq.n	80024d4 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 8002440:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8002444:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002446:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800244a:	d02f      	beq.n	80024ac <HAL_RCCEx_PeriphCLKConfig+0x98>
 800244c:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8002450:	d828      	bhi.n	80024a4 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8002452:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002456:	d01a      	beq.n	800248e <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8002458:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800245c:	d822      	bhi.n	80024a4 <HAL_RCCEx_PeriphCLKConfig+0x90>
 800245e:	2b00      	cmp	r3, #0
 8002460:	d003      	beq.n	800246a <HAL_RCCEx_PeriphCLKConfig+0x56>
 8002462:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002466:	d007      	beq.n	8002478 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8002468:	e01c      	b.n	80024a4 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800246a:	4bb8      	ldr	r3, [pc, #736]	; (800274c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800246c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800246e:	4ab7      	ldr	r2, [pc, #732]	; (800274c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002470:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002474:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8002476:	e01a      	b.n	80024ae <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8002478:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800247c:	3308      	adds	r3, #8
 800247e:	2102      	movs	r1, #2
 8002480:	4618      	mov	r0, r3
 8002482:	f001 fccf 	bl	8003e24 <RCCEx_PLL2_Config>
 8002486:	4603      	mov	r3, r0
 8002488:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800248c:	e00f      	b.n	80024ae <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800248e:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8002492:	3328      	adds	r3, #40	; 0x28
 8002494:	2102      	movs	r1, #2
 8002496:	4618      	mov	r0, r3
 8002498:	f001 fd76 	bl	8003f88 <RCCEx_PLL3_Config>
 800249c:	4603      	mov	r3, r0
 800249e:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 80024a2:	e004      	b.n	80024ae <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80024a4:	2301      	movs	r3, #1
 80024a6:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
        break;
 80024aa:	e000      	b.n	80024ae <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 80024ac:	bf00      	nop
    }

    if (ret == HAL_OK)
 80024ae:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 80024b2:	2b00      	cmp	r3, #0
 80024b4:	d10a      	bne.n	80024cc <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 80024b6:	4ba5      	ldr	r3, [pc, #660]	; (800274c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80024b8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80024ba:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 80024be:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80024c2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80024c4:	4aa1      	ldr	r2, [pc, #644]	; (800274c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80024c6:	430b      	orrs	r3, r1
 80024c8:	6513      	str	r3, [r2, #80]	; 0x50
 80024ca:	e003      	b.n	80024d4 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80024cc:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 80024d0:	f887 312e 	strb.w	r3, [r7, #302]	; 0x12e
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 80024d4:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80024d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80024dc:	f402 7880 	and.w	r8, r2, #256	; 0x100
 80024e0:	f04f 0900 	mov.w	r9, #0
 80024e4:	ea58 0309 	orrs.w	r3, r8, r9
 80024e8:	d047      	beq.n	800257a <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 80024ea:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80024ee:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80024f0:	2b04      	cmp	r3, #4
 80024f2:	d82a      	bhi.n	800254a <HAL_RCCEx_PeriphCLKConfig+0x136>
 80024f4:	a201      	add	r2, pc, #4	; (adr r2, 80024fc <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 80024f6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80024fa:	bf00      	nop
 80024fc:	08002511 	.word	0x08002511
 8002500:	0800251f 	.word	0x0800251f
 8002504:	08002535 	.word	0x08002535
 8002508:	08002553 	.word	0x08002553
 800250c:	08002553 	.word	0x08002553
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002510:	4b8e      	ldr	r3, [pc, #568]	; (800274c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002512:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002514:	4a8d      	ldr	r2, [pc, #564]	; (800274c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002516:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800251a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800251c:	e01a      	b.n	8002554 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800251e:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8002522:	3308      	adds	r3, #8
 8002524:	2100      	movs	r1, #0
 8002526:	4618      	mov	r0, r3
 8002528:	f001 fc7c 	bl	8003e24 <RCCEx_PLL2_Config>
 800252c:	4603      	mov	r3, r0
 800252e:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8002532:	e00f      	b.n	8002554 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8002534:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8002538:	3328      	adds	r3, #40	; 0x28
 800253a:	2100      	movs	r1, #0
 800253c:	4618      	mov	r0, r3
 800253e:	f001 fd23 	bl	8003f88 <RCCEx_PLL3_Config>
 8002542:	4603      	mov	r3, r0
 8002544:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8002548:	e004      	b.n	8002554 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800254a:	2301      	movs	r3, #1
 800254c:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
        break;
 8002550:	e000      	b.n	8002554 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 8002552:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002554:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8002558:	2b00      	cmp	r3, #0
 800255a:	d10a      	bne.n	8002572 <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800255c:	4b7b      	ldr	r3, [pc, #492]	; (800274c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800255e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002560:	f023 0107 	bic.w	r1, r3, #7
 8002564:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8002568:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800256a:	4a78      	ldr	r2, [pc, #480]	; (800274c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800256c:	430b      	orrs	r3, r1
 800256e:	6513      	str	r3, [r2, #80]	; 0x50
 8002570:	e003      	b.n	800257a <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002572:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8002576:	f887 312e 	strb.w	r3, [r7, #302]	; 0x12e
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 800257a:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800257e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002582:	f402 7a00 	and.w	sl, r2, #512	; 0x200
 8002586:	f04f 0b00 	mov.w	fp, #0
 800258a:	ea5a 030b 	orrs.w	r3, sl, fp
 800258e:	d04c      	beq.n	800262a <HAL_RCCEx_PeriphCLKConfig+0x216>
  {
    switch (PeriphClkInit->Sai23ClockSelection)
 8002590:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8002594:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002596:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800259a:	d030      	beq.n	80025fe <HAL_RCCEx_PeriphCLKConfig+0x1ea>
 800259c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80025a0:	d829      	bhi.n	80025f6 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 80025a2:	2bc0      	cmp	r3, #192	; 0xc0
 80025a4:	d02d      	beq.n	8002602 <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 80025a6:	2bc0      	cmp	r3, #192	; 0xc0
 80025a8:	d825      	bhi.n	80025f6 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 80025aa:	2b80      	cmp	r3, #128	; 0x80
 80025ac:	d018      	beq.n	80025e0 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 80025ae:	2b80      	cmp	r3, #128	; 0x80
 80025b0:	d821      	bhi.n	80025f6 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 80025b2:	2b00      	cmp	r3, #0
 80025b4:	d002      	beq.n	80025bc <HAL_RCCEx_PeriphCLKConfig+0x1a8>
 80025b6:	2b40      	cmp	r3, #64	; 0x40
 80025b8:	d007      	beq.n	80025ca <HAL_RCCEx_PeriphCLKConfig+0x1b6>
 80025ba:	e01c      	b.n	80025f6 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    {
      case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80025bc:	4b63      	ldr	r3, [pc, #396]	; (800274c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80025be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80025c0:	4a62      	ldr	r2, [pc, #392]	; (800274c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80025c2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80025c6:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 80025c8:	e01c      	b.n	8002604 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80025ca:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80025ce:	3308      	adds	r3, #8
 80025d0:	2100      	movs	r1, #0
 80025d2:	4618      	mov	r0, r3
 80025d4:	f001 fc26 	bl	8003e24 <RCCEx_PLL2_Config>
 80025d8:	4603      	mov	r3, r0
 80025da:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 80025de:	e011      	b.n	8002604 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80025e0:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80025e4:	3328      	adds	r3, #40	; 0x28
 80025e6:	2100      	movs	r1, #0
 80025e8:	4618      	mov	r0, r3
 80025ea:	f001 fccd 	bl	8003f88 <RCCEx_PLL3_Config>
 80025ee:	4603      	mov	r3, r0
 80025f0:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 80025f4:	e006      	b.n	8002604 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
        /* SAI2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80025f6:	2301      	movs	r3, #1
 80025f8:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
        break;
 80025fc:	e002      	b.n	8002604 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 80025fe:	bf00      	nop
 8002600:	e000      	b.n	8002604 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 8002602:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002604:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8002608:	2b00      	cmp	r3, #0
 800260a:	d10a      	bne.n	8002622 <HAL_RCCEx_PeriphCLKConfig+0x20e>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 800260c:	4b4f      	ldr	r3, [pc, #316]	; (800274c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800260e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002610:	f423 71e0 	bic.w	r1, r3, #448	; 0x1c0
 8002614:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8002618:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800261a:	4a4c      	ldr	r2, [pc, #304]	; (800274c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800261c:	430b      	orrs	r3, r1
 800261e:	6513      	str	r3, [r2, #80]	; 0x50
 8002620:	e003      	b.n	800262a <HAL_RCCEx_PeriphCLKConfig+0x216>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002622:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8002626:	f887 312e 	strb.w	r3, [r7, #302]	; 0x12e
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 800262a:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800262e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002632:	f402 6380 	and.w	r3, r2, #1024	; 0x400
 8002636:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 800263a:	2300      	movs	r3, #0
 800263c:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 8002640:	e9d7 1244 	ldrd	r1, r2, [r7, #272]	; 0x110
 8002644:	460b      	mov	r3, r1
 8002646:	4313      	orrs	r3, r2
 8002648:	d053      	beq.n	80026f2 <HAL_RCCEx_PeriphCLKConfig+0x2de>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 800264a:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800264e:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8002652:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8002656:	d035      	beq.n	80026c4 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 8002658:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800265c:	d82e      	bhi.n	80026bc <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 800265e:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8002662:	d031      	beq.n	80026c8 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 8002664:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8002668:	d828      	bhi.n	80026bc <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 800266a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800266e:	d01a      	beq.n	80026a6 <HAL_RCCEx_PeriphCLKConfig+0x292>
 8002670:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002674:	d822      	bhi.n	80026bc <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8002676:	2b00      	cmp	r3, #0
 8002678:	d003      	beq.n	8002682 <HAL_RCCEx_PeriphCLKConfig+0x26e>
 800267a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800267e:	d007      	beq.n	8002690 <HAL_RCCEx_PeriphCLKConfig+0x27c>
 8002680:	e01c      	b.n	80026bc <HAL_RCCEx_PeriphCLKConfig+0x2a8>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002682:	4b32      	ldr	r3, [pc, #200]	; (800274c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002684:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002686:	4a31      	ldr	r2, [pc, #196]	; (800274c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002688:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800268c:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800268e:	e01c      	b.n	80026ca <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8002690:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8002694:	3308      	adds	r3, #8
 8002696:	2100      	movs	r1, #0
 8002698:	4618      	mov	r0, r3
 800269a:	f001 fbc3 	bl	8003e24 <RCCEx_PLL2_Config>
 800269e:	4603      	mov	r3, r0
 80026a0:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 80026a4:	e011      	b.n	80026ca <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80026a6:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80026aa:	3328      	adds	r3, #40	; 0x28
 80026ac:	2100      	movs	r1, #0
 80026ae:	4618      	mov	r0, r3
 80026b0:	f001 fc6a 	bl	8003f88 <RCCEx_PLL3_Config>
 80026b4:	4603      	mov	r3, r0
 80026b6:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80026ba:	e006      	b.n	80026ca <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 80026bc:	2301      	movs	r3, #1
 80026be:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
        break;
 80026c2:	e002      	b.n	80026ca <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 80026c4:	bf00      	nop
 80026c6:	e000      	b.n	80026ca <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 80026c8:	bf00      	nop
    }

    if (ret == HAL_OK)
 80026ca:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 80026ce:	2b00      	cmp	r3, #0
 80026d0:	d10b      	bne.n	80026ea <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 80026d2:	4b1e      	ldr	r3, [pc, #120]	; (800274c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80026d4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80026d6:	f423 0160 	bic.w	r1, r3, #14680064	; 0xe00000
 80026da:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80026de:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 80026e2:	4a1a      	ldr	r2, [pc, #104]	; (800274c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80026e4:	430b      	orrs	r3, r1
 80026e6:	6593      	str	r3, [r2, #88]	; 0x58
 80026e8:	e003      	b.n	80026f2 <HAL_RCCEx_PeriphCLKConfig+0x2de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80026ea:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 80026ee:	f887 312e 	strb.w	r3, [r7, #302]	; 0x12e
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 80026f2:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80026f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80026fa:	f402 6300 	and.w	r3, r2, #2048	; 0x800
 80026fe:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 8002702:	2300      	movs	r3, #0
 8002704:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8002708:	e9d7 1242 	ldrd	r1, r2, [r7, #264]	; 0x108
 800270c:	460b      	mov	r3, r1
 800270e:	4313      	orrs	r3, r2
 8002710:	d056      	beq.n	80027c0 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 8002712:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8002716:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800271a:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800271e:	d038      	beq.n	8002792 <HAL_RCCEx_PeriphCLKConfig+0x37e>
 8002720:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002724:	d831      	bhi.n	800278a <HAL_RCCEx_PeriphCLKConfig+0x376>
 8002726:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800272a:	d034      	beq.n	8002796 <HAL_RCCEx_PeriphCLKConfig+0x382>
 800272c:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8002730:	d82b      	bhi.n	800278a <HAL_RCCEx_PeriphCLKConfig+0x376>
 8002732:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002736:	d01d      	beq.n	8002774 <HAL_RCCEx_PeriphCLKConfig+0x360>
 8002738:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800273c:	d825      	bhi.n	800278a <HAL_RCCEx_PeriphCLKConfig+0x376>
 800273e:	2b00      	cmp	r3, #0
 8002740:	d006      	beq.n	8002750 <HAL_RCCEx_PeriphCLKConfig+0x33c>
 8002742:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002746:	d00a      	beq.n	800275e <HAL_RCCEx_PeriphCLKConfig+0x34a>
 8002748:	e01f      	b.n	800278a <HAL_RCCEx_PeriphCLKConfig+0x376>
 800274a:	bf00      	nop
 800274c:	58024400 	.word	0x58024400
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002750:	4ba2      	ldr	r3, [pc, #648]	; (80029dc <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8002752:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002754:	4aa1      	ldr	r2, [pc, #644]	; (80029dc <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8002756:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800275a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800275c:	e01c      	b.n	8002798 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800275e:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8002762:	3308      	adds	r3, #8
 8002764:	2100      	movs	r1, #0
 8002766:	4618      	mov	r0, r3
 8002768:	f001 fb5c 	bl	8003e24 <RCCEx_PLL2_Config>
 800276c:	4603      	mov	r3, r0
 800276e:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8002772:	e011      	b.n	8002798 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8002774:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8002778:	3328      	adds	r3, #40	; 0x28
 800277a:	2100      	movs	r1, #0
 800277c:	4618      	mov	r0, r3
 800277e:	f001 fc03 	bl	8003f88 <RCCEx_PLL3_Config>
 8002782:	4603      	mov	r3, r0
 8002784:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8002788:	e006      	b.n	8002798 <HAL_RCCEx_PeriphCLKConfig+0x384>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 800278a:	2301      	movs	r3, #1
 800278c:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
        break;
 8002790:	e002      	b.n	8002798 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 8002792:	bf00      	nop
 8002794:	e000      	b.n	8002798 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 8002796:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002798:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 800279c:	2b00      	cmp	r3, #0
 800279e:	d10b      	bne.n	80027b8 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 80027a0:	4b8e      	ldr	r3, [pc, #568]	; (80029dc <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80027a2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80027a4:	f023 61e0 	bic.w	r1, r3, #117440512	; 0x7000000
 80027a8:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80027ac:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80027b0:	4a8a      	ldr	r2, [pc, #552]	; (80029dc <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80027b2:	430b      	orrs	r3, r1
 80027b4:	6593      	str	r3, [r2, #88]	; 0x58
 80027b6:	e003      	b.n	80027c0 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80027b8:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 80027bc:	f887 312e 	strb.w	r3, [r7, #302]	; 0x12e
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 80027c0:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80027c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80027c8:	f002 7300 	and.w	r3, r2, #33554432	; 0x2000000
 80027cc:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 80027d0:	2300      	movs	r3, #0
 80027d2:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 80027d6:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	; 0x100
 80027da:	460b      	mov	r3, r1
 80027dc:	4313      	orrs	r3, r2
 80027de:	d03a      	beq.n	8002856 <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    switch (PeriphClkInit->QspiClockSelection)
 80027e0:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80027e4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80027e6:	2b30      	cmp	r3, #48	; 0x30
 80027e8:	d01f      	beq.n	800282a <HAL_RCCEx_PeriphCLKConfig+0x416>
 80027ea:	2b30      	cmp	r3, #48	; 0x30
 80027ec:	d819      	bhi.n	8002822 <HAL_RCCEx_PeriphCLKConfig+0x40e>
 80027ee:	2b20      	cmp	r3, #32
 80027f0:	d00c      	beq.n	800280c <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 80027f2:	2b20      	cmp	r3, #32
 80027f4:	d815      	bhi.n	8002822 <HAL_RCCEx_PeriphCLKConfig+0x40e>
 80027f6:	2b00      	cmp	r3, #0
 80027f8:	d019      	beq.n	800282e <HAL_RCCEx_PeriphCLKConfig+0x41a>
 80027fa:	2b10      	cmp	r3, #16
 80027fc:	d111      	bne.n	8002822 <HAL_RCCEx_PeriphCLKConfig+0x40e>
    {
      case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
        /* Enable QSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80027fe:	4b77      	ldr	r3, [pc, #476]	; (80029dc <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8002800:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002802:	4a76      	ldr	r2, [pc, #472]	; (80029dc <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8002804:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002808:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* QSPI clock source configuration done later after clock selection check */
        break;
 800280a:	e011      	b.n	8002830 <HAL_RCCEx_PeriphCLKConfig+0x41c>

      case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800280c:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8002810:	3308      	adds	r3, #8
 8002812:	2102      	movs	r1, #2
 8002814:	4618      	mov	r0, r3
 8002816:	f001 fb05 	bl	8003e24 <RCCEx_PLL2_Config>
 800281a:	4603      	mov	r3, r0
 800281c:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f

        /* QSPI clock source configuration done later after clock selection check */
        break;
 8002820:	e006      	b.n	8002830 <HAL_RCCEx_PeriphCLKConfig+0x41c>
      case RCC_QSPICLKSOURCE_D1HCLK:
        /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8002822:	2301      	movs	r3, #1
 8002824:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
        break;
 8002828:	e002      	b.n	8002830 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 800282a:	bf00      	nop
 800282c:	e000      	b.n	8002830 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 800282e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002830:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8002834:	2b00      	cmp	r3, #0
 8002836:	d10a      	bne.n	800284e <HAL_RCCEx_PeriphCLKConfig+0x43a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8002838:	4b68      	ldr	r3, [pc, #416]	; (80029dc <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800283a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800283c:	f023 0130 	bic.w	r1, r3, #48	; 0x30
 8002840:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8002844:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002846:	4a65      	ldr	r2, [pc, #404]	; (80029dc <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8002848:	430b      	orrs	r3, r1
 800284a:	64d3      	str	r3, [r2, #76]	; 0x4c
 800284c:	e003      	b.n	8002856 <HAL_RCCEx_PeriphCLKConfig+0x442>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800284e:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8002852:	f887 312e 	strb.w	r3, [r7, #302]	; 0x12e
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8002856:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800285a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800285e:	f402 5380 	and.w	r3, r2, #4096	; 0x1000
 8002862:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8002866:	2300      	movs	r3, #0
 8002868:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800286c:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	; 0xf8
 8002870:	460b      	mov	r3, r1
 8002872:	4313      	orrs	r3, r2
 8002874:	d051      	beq.n	800291a <HAL_RCCEx_PeriphCLKConfig+0x506>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 8002876:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800287a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800287c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002880:	d035      	beq.n	80028ee <HAL_RCCEx_PeriphCLKConfig+0x4da>
 8002882:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002886:	d82e      	bhi.n	80028e6 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8002888:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800288c:	d031      	beq.n	80028f2 <HAL_RCCEx_PeriphCLKConfig+0x4de>
 800288e:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8002892:	d828      	bhi.n	80028e6 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8002894:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002898:	d01a      	beq.n	80028d0 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
 800289a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800289e:	d822      	bhi.n	80028e6 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 80028a0:	2b00      	cmp	r3, #0
 80028a2:	d003      	beq.n	80028ac <HAL_RCCEx_PeriphCLKConfig+0x498>
 80028a4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80028a8:	d007      	beq.n	80028ba <HAL_RCCEx_PeriphCLKConfig+0x4a6>
 80028aa:	e01c      	b.n	80028e6 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80028ac:	4b4b      	ldr	r3, [pc, #300]	; (80029dc <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80028ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80028b0:	4a4a      	ldr	r2, [pc, #296]	; (80029dc <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80028b2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80028b6:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 80028b8:	e01c      	b.n	80028f4 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80028ba:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80028be:	3308      	adds	r3, #8
 80028c0:	2100      	movs	r1, #0
 80028c2:	4618      	mov	r0, r3
 80028c4:	f001 faae 	bl	8003e24 <RCCEx_PLL2_Config>
 80028c8:	4603      	mov	r3, r0
 80028ca:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 80028ce:	e011      	b.n	80028f4 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80028d0:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80028d4:	3328      	adds	r3, #40	; 0x28
 80028d6:	2100      	movs	r1, #0
 80028d8:	4618      	mov	r0, r3
 80028da:	f001 fb55 	bl	8003f88 <RCCEx_PLL3_Config>
 80028de:	4603      	mov	r3, r0
 80028e0:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 80028e4:	e006      	b.n	80028f4 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80028e6:	2301      	movs	r3, #1
 80028e8:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
        break;
 80028ec:	e002      	b.n	80028f4 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 80028ee:	bf00      	nop
 80028f0:	e000      	b.n	80028f4 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 80028f2:	bf00      	nop
    }

    if (ret == HAL_OK)
 80028f4:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 80028f8:	2b00      	cmp	r3, #0
 80028fa:	d10a      	bne.n	8002912 <HAL_RCCEx_PeriphCLKConfig+0x4fe>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 80028fc:	4b37      	ldr	r3, [pc, #220]	; (80029dc <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80028fe:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002900:	f423 41e0 	bic.w	r1, r3, #28672	; 0x7000
 8002904:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8002908:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800290a:	4a34      	ldr	r2, [pc, #208]	; (80029dc <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800290c:	430b      	orrs	r3, r1
 800290e:	6513      	str	r3, [r2, #80]	; 0x50
 8002910:	e003      	b.n	800291a <HAL_RCCEx_PeriphCLKConfig+0x506>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002912:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8002916:	f887 312e 	strb.w	r3, [r7, #302]	; 0x12e
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 800291a:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800291e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002922:	f402 5300 	and.w	r3, r2, #8192	; 0x2000
 8002926:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 800292a:	2300      	movs	r3, #0
 800292c:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8002930:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	; 0xf0
 8002934:	460b      	mov	r3, r1
 8002936:	4313      	orrs	r3, r2
 8002938:	d056      	beq.n	80029e8 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 800293a:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800293e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002940:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002944:	d033      	beq.n	80029ae <HAL_RCCEx_PeriphCLKConfig+0x59a>
 8002946:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800294a:	d82c      	bhi.n	80029a6 <HAL_RCCEx_PeriphCLKConfig+0x592>
 800294c:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8002950:	d02f      	beq.n	80029b2 <HAL_RCCEx_PeriphCLKConfig+0x59e>
 8002952:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8002956:	d826      	bhi.n	80029a6 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8002958:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800295c:	d02b      	beq.n	80029b6 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
 800295e:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8002962:	d820      	bhi.n	80029a6 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8002964:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8002968:	d012      	beq.n	8002990 <HAL_RCCEx_PeriphCLKConfig+0x57c>
 800296a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800296e:	d81a      	bhi.n	80029a6 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8002970:	2b00      	cmp	r3, #0
 8002972:	d022      	beq.n	80029ba <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 8002974:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002978:	d115      	bne.n	80029a6 <HAL_RCCEx_PeriphCLKConfig+0x592>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800297a:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800297e:	3308      	adds	r3, #8
 8002980:	2101      	movs	r1, #1
 8002982:	4618      	mov	r0, r3
 8002984:	f001 fa4e 	bl	8003e24 <RCCEx_PLL2_Config>
 8002988:	4603      	mov	r3, r0
 800298a:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 800298e:	e015      	b.n	80029bc <HAL_RCCEx_PeriphCLKConfig+0x5a8>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8002990:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8002994:	3328      	adds	r3, #40	; 0x28
 8002996:	2101      	movs	r1, #1
 8002998:	4618      	mov	r0, r3
 800299a:	f001 faf5 	bl	8003f88 <RCCEx_PLL3_Config>
 800299e:	4603      	mov	r3, r0
 80029a0:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 80029a4:	e00a      	b.n	80029bc <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80029a6:	2301      	movs	r3, #1
 80029a8:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
        break;
 80029ac:	e006      	b.n	80029bc <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 80029ae:	bf00      	nop
 80029b0:	e004      	b.n	80029bc <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 80029b2:	bf00      	nop
 80029b4:	e002      	b.n	80029bc <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 80029b6:	bf00      	nop
 80029b8:	e000      	b.n	80029bc <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 80029ba:	bf00      	nop
    }

    if (ret == HAL_OK)
 80029bc:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 80029c0:	2b00      	cmp	r3, #0
 80029c2:	d10d      	bne.n	80029e0 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 80029c4:	4b05      	ldr	r3, [pc, #20]	; (80029dc <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80029c6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80029c8:	f423 21e0 	bic.w	r1, r3, #458752	; 0x70000
 80029cc:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80029d0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80029d2:	4a02      	ldr	r2, [pc, #8]	; (80029dc <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80029d4:	430b      	orrs	r3, r1
 80029d6:	6513      	str	r3, [r2, #80]	; 0x50
 80029d8:	e006      	b.n	80029e8 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 80029da:	bf00      	nop
 80029dc:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80029e0:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 80029e4:	f887 312e 	strb.w	r3, [r7, #302]	; 0x12e
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 80029e8:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80029ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80029f0:	f402 4380 	and.w	r3, r2, #16384	; 0x4000
 80029f4:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80029f8:	2300      	movs	r3, #0
 80029fa:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 80029fe:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	; 0xe8
 8002a02:	460b      	mov	r3, r1
 8002a04:	4313      	orrs	r3, r2
 8002a06:	d055      	beq.n	8002ab4 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 8002a08:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8002a0c:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8002a10:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002a14:	d033      	beq.n	8002a7e <HAL_RCCEx_PeriphCLKConfig+0x66a>
 8002a16:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002a1a:	d82c      	bhi.n	8002a76 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8002a1c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002a20:	d02f      	beq.n	8002a82 <HAL_RCCEx_PeriphCLKConfig+0x66e>
 8002a22:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002a26:	d826      	bhi.n	8002a76 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8002a28:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8002a2c:	d02b      	beq.n	8002a86 <HAL_RCCEx_PeriphCLKConfig+0x672>
 8002a2e:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8002a32:	d820      	bhi.n	8002a76 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8002a34:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002a38:	d012      	beq.n	8002a60 <HAL_RCCEx_PeriphCLKConfig+0x64c>
 8002a3a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002a3e:	d81a      	bhi.n	8002a76 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8002a40:	2b00      	cmp	r3, #0
 8002a42:	d022      	beq.n	8002a8a <HAL_RCCEx_PeriphCLKConfig+0x676>
 8002a44:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002a48:	d115      	bne.n	8002a76 <HAL_RCCEx_PeriphCLKConfig+0x662>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8002a4a:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8002a4e:	3308      	adds	r3, #8
 8002a50:	2101      	movs	r1, #1
 8002a52:	4618      	mov	r0, r3
 8002a54:	f001 f9e6 	bl	8003e24 <RCCEx_PLL2_Config>
 8002a58:	4603      	mov	r3, r0
 8002a5a:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8002a5e:	e015      	b.n	8002a8c <HAL_RCCEx_PeriphCLKConfig+0x678>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8002a60:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8002a64:	3328      	adds	r3, #40	; 0x28
 8002a66:	2101      	movs	r1, #1
 8002a68:	4618      	mov	r0, r3
 8002a6a:	f001 fa8d 	bl	8003f88 <RCCEx_PLL3_Config>
 8002a6e:	4603      	mov	r3, r0
 8002a70:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8002a74:	e00a      	b.n	8002a8c <HAL_RCCEx_PeriphCLKConfig+0x678>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 8002a76:	2301      	movs	r3, #1
 8002a78:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
        break;
 8002a7c:	e006      	b.n	8002a8c <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8002a7e:	bf00      	nop
 8002a80:	e004      	b.n	8002a8c <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8002a82:	bf00      	nop
 8002a84:	e002      	b.n	8002a8c <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8002a86:	bf00      	nop
 8002a88:	e000      	b.n	8002a8c <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8002a8a:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002a8c:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8002a90:	2b00      	cmp	r3, #0
 8002a92:	d10b      	bne.n	8002aac <HAL_RCCEx_PeriphCLKConfig+0x698>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8002a94:	4bb6      	ldr	r3, [pc, #728]	; (8002d70 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8002a96:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002a98:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 8002a9c:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8002aa0:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8002aa4:	4ab2      	ldr	r2, [pc, #712]	; (8002d70 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8002aa6:	430b      	orrs	r3, r1
 8002aa8:	6593      	str	r3, [r2, #88]	; 0x58
 8002aaa:	e003      	b.n	8002ab4 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002aac:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8002ab0:	f887 312e 	strb.w	r3, [r7, #302]	; 0x12e
    }
  }

#if defined(DSI)
  /*---------------------------- DSI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DSI) == RCC_PERIPHCLK_DSI)
 8002ab4:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8002ab8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002abc:	f002 6380 	and.w	r3, r2, #67108864	; 0x4000000
 8002ac0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8002ac4:	2300      	movs	r3, #0
 8002ac6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8002aca:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	; 0xe0
 8002ace:	460b      	mov	r3, r1
 8002ad0:	4313      	orrs	r3, r2
 8002ad2:	d02a      	beq.n	8002b2a <HAL_RCCEx_PeriphCLKConfig+0x716>
  {
    switch (PeriphClkInit->DsiClockSelection)
 8002ad4:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8002ad8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002ada:	2b00      	cmp	r3, #0
 8002adc:	d011      	beq.n	8002b02 <HAL_RCCEx_PeriphCLKConfig+0x6ee>
 8002ade:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002ae2:	d10a      	bne.n	8002afa <HAL_RCCEx_PeriphCLKConfig+0x6e6>
    {

      case RCC_DSICLKSOURCE_PLL2: /* PLL2 is used as clock source for DSI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8002ae4:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8002ae8:	3308      	adds	r3, #8
 8002aea:	2101      	movs	r1, #1
 8002aec:	4618      	mov	r0, r3
 8002aee:	f001 f999 	bl	8003e24 <RCCEx_PLL2_Config>
 8002af2:	4603      	mov	r3, r0
 8002af4:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f

        /* DSI clock source configuration done later after clock selection check */
        break;
 8002af8:	e004      	b.n	8002b04 <HAL_RCCEx_PeriphCLKConfig+0x6f0>
        /* PHY is used as clock source for DSI*/
        /* DSI clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8002afa:	2301      	movs	r3, #1
 8002afc:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
        break;
 8002b00:	e000      	b.n	8002b04 <HAL_RCCEx_PeriphCLKConfig+0x6f0>
        break;
 8002b02:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002b04:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8002b08:	2b00      	cmp	r3, #0
 8002b0a:	d10a      	bne.n	8002b22 <HAL_RCCEx_PeriphCLKConfig+0x70e>
    {
      /* Set the source of DSI clock*/
      __HAL_RCC_DSI_CONFIG(PeriphClkInit->DsiClockSelection);
 8002b0c:	4b98      	ldr	r3, [pc, #608]	; (8002d70 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8002b0e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002b10:	f423 7180 	bic.w	r1, r3, #256	; 0x100
 8002b14:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8002b18:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002b1a:	4a95      	ldr	r2, [pc, #596]	; (8002d70 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8002b1c:	430b      	orrs	r3, r1
 8002b1e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002b20:	e003      	b.n	8002b2a <HAL_RCCEx_PeriphCLKConfig+0x716>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002b22:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8002b26:	f887 312e 	strb.w	r3, [r7, #302]	; 0x12e
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8002b2a:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8002b2e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002b32:	f402 4300 	and.w	r3, r2, #32768	; 0x8000
 8002b36:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8002b3a:	2300      	movs	r3, #0
 8002b3c:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8002b40:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8002b44:	460b      	mov	r3, r1
 8002b46:	4313      	orrs	r3, r2
 8002b48:	d037      	beq.n	8002bba <HAL_RCCEx_PeriphCLKConfig+0x7a6>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 8002b4a:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8002b4e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002b50:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002b54:	d00e      	beq.n	8002b74 <HAL_RCCEx_PeriphCLKConfig+0x760>
 8002b56:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002b5a:	d816      	bhi.n	8002b8a <HAL_RCCEx_PeriphCLKConfig+0x776>
 8002b5c:	2b00      	cmp	r3, #0
 8002b5e:	d018      	beq.n	8002b92 <HAL_RCCEx_PeriphCLKConfig+0x77e>
 8002b60:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002b64:	d111      	bne.n	8002b8a <HAL_RCCEx_PeriphCLKConfig+0x776>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002b66:	4b82      	ldr	r3, [pc, #520]	; (8002d70 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8002b68:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b6a:	4a81      	ldr	r2, [pc, #516]	; (8002d70 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8002b6c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002b70:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8002b72:	e00f      	b.n	8002b94 <HAL_RCCEx_PeriphCLKConfig+0x780>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8002b74:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8002b78:	3308      	adds	r3, #8
 8002b7a:	2101      	movs	r1, #1
 8002b7c:	4618      	mov	r0, r3
 8002b7e:	f001 f951 	bl	8003e24 <RCCEx_PLL2_Config>
 8002b82:	4603      	mov	r3, r0
 8002b84:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8002b88:	e004      	b.n	8002b94 <HAL_RCCEx_PeriphCLKConfig+0x780>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8002b8a:	2301      	movs	r3, #1
 8002b8c:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
        break;
 8002b90:	e000      	b.n	8002b94 <HAL_RCCEx_PeriphCLKConfig+0x780>
        break;
 8002b92:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002b94:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8002b98:	2b00      	cmp	r3, #0
 8002b9a:	d10a      	bne.n	8002bb2 <HAL_RCCEx_PeriphCLKConfig+0x79e>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8002b9c:	4b74      	ldr	r3, [pc, #464]	; (8002d70 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8002b9e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002ba0:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 8002ba4:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8002ba8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002baa:	4a71      	ldr	r2, [pc, #452]	; (8002d70 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8002bac:	430b      	orrs	r3, r1
 8002bae:	6513      	str	r3, [r2, #80]	; 0x50
 8002bb0:	e003      	b.n	8002bba <HAL_RCCEx_PeriphCLKConfig+0x7a6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002bb2:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8002bb6:	f887 312e 	strb.w	r3, [r7, #302]	; 0x12e
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8002bba:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8002bbe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002bc2:	f002 7380 	and.w	r3, r2, #16777216	; 0x1000000
 8002bc6:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8002bca:	2300      	movs	r3, #0
 8002bcc:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8002bd0:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	; 0xd0
 8002bd4:	460b      	mov	r3, r1
 8002bd6:	4313      	orrs	r3, r2
 8002bd8:	d03a      	beq.n	8002c50 <HAL_RCCEx_PeriphCLKConfig+0x83c>
  {
    switch (PeriphClkInit->FmcClockSelection)
 8002bda:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8002bde:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002be0:	2b03      	cmp	r3, #3
 8002be2:	d81d      	bhi.n	8002c20 <HAL_RCCEx_PeriphCLKConfig+0x80c>
 8002be4:	a201      	add	r2, pc, #4	; (adr r2, 8002bec <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8002be6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002bea:	bf00      	nop
 8002bec:	08002c29 	.word	0x08002c29
 8002bf0:	08002bfd 	.word	0x08002bfd
 8002bf4:	08002c0b 	.word	0x08002c0b
 8002bf8:	08002c29 	.word	0x08002c29
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002bfc:	4b5c      	ldr	r3, [pc, #368]	; (8002d70 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8002bfe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c00:	4a5b      	ldr	r2, [pc, #364]	; (8002d70 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8002c02:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002c06:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 8002c08:	e00f      	b.n	8002c2a <HAL_RCCEx_PeriphCLKConfig+0x816>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8002c0a:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8002c0e:	3308      	adds	r3, #8
 8002c10:	2102      	movs	r1, #2
 8002c12:	4618      	mov	r0, r3
 8002c14:	f001 f906 	bl	8003e24 <RCCEx_PLL2_Config>
 8002c18:	4603      	mov	r3, r0
 8002c1a:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f

        /* FMC clock source configuration done later after clock selection check */
        break;
 8002c1e:	e004      	b.n	8002c2a <HAL_RCCEx_PeriphCLKConfig+0x816>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8002c20:	2301      	movs	r3, #1
 8002c22:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
        break;
 8002c26:	e000      	b.n	8002c2a <HAL_RCCEx_PeriphCLKConfig+0x816>
        break;
 8002c28:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002c2a:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8002c2e:	2b00      	cmp	r3, #0
 8002c30:	d10a      	bne.n	8002c48 <HAL_RCCEx_PeriphCLKConfig+0x834>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8002c32:	4b4f      	ldr	r3, [pc, #316]	; (8002d70 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8002c34:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002c36:	f023 0103 	bic.w	r1, r3, #3
 8002c3a:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8002c3e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002c40:	4a4b      	ldr	r2, [pc, #300]	; (8002d70 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8002c42:	430b      	orrs	r3, r1
 8002c44:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002c46:	e003      	b.n	8002c50 <HAL_RCCEx_PeriphCLKConfig+0x83c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002c48:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8002c4c:	f887 312e 	strb.w	r3, [r7, #302]	; 0x12e
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002c50:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8002c54:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002c58:	f402 0380 	and.w	r3, r2, #4194304	; 0x400000
 8002c5c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8002c60:	2300      	movs	r3, #0
 8002c62:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8002c66:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	; 0xc8
 8002c6a:	460b      	mov	r3, r1
 8002c6c:	4313      	orrs	r3, r2
 8002c6e:	f000 80a0 	beq.w	8002db2 <HAL_RCCEx_PeriphCLKConfig+0x99e>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002c72:	4b40      	ldr	r3, [pc, #256]	; (8002d74 <HAL_RCCEx_PeriphCLKConfig+0x960>)
 8002c74:	681b      	ldr	r3, [r3, #0]
 8002c76:	4a3f      	ldr	r2, [pc, #252]	; (8002d74 <HAL_RCCEx_PeriphCLKConfig+0x960>)
 8002c78:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002c7c:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002c7e:	f7fe f845 	bl	8000d0c <HAL_GetTick>
 8002c82:	f8c7 0128 	str.w	r0, [r7, #296]	; 0x128

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002c86:	e00b      	b.n	8002ca0 <HAL_RCCEx_PeriphCLKConfig+0x88c>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002c88:	f7fe f840 	bl	8000d0c <HAL_GetTick>
 8002c8c:	4602      	mov	r2, r0
 8002c8e:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8002c92:	1ad3      	subs	r3, r2, r3
 8002c94:	2b64      	cmp	r3, #100	; 0x64
 8002c96:	d903      	bls.n	8002ca0 <HAL_RCCEx_PeriphCLKConfig+0x88c>
      {
        ret = HAL_TIMEOUT;
 8002c98:	2303      	movs	r3, #3
 8002c9a:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
        break;
 8002c9e:	e005      	b.n	8002cac <HAL_RCCEx_PeriphCLKConfig+0x898>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002ca0:	4b34      	ldr	r3, [pc, #208]	; (8002d74 <HAL_RCCEx_PeriphCLKConfig+0x960>)
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002ca8:	2b00      	cmp	r3, #0
 8002caa:	d0ed      	beq.n	8002c88 <HAL_RCCEx_PeriphCLKConfig+0x874>
      }
    }

    if (ret == HAL_OK)
 8002cac:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8002cb0:	2b00      	cmp	r3, #0
 8002cb2:	d17a      	bne.n	8002daa <HAL_RCCEx_PeriphCLKConfig+0x996>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8002cb4:	4b2e      	ldr	r3, [pc, #184]	; (8002d70 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8002cb6:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8002cb8:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8002cbc:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8002cc0:	4053      	eors	r3, r2
 8002cc2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002cc6:	2b00      	cmp	r3, #0
 8002cc8:	d015      	beq.n	8002cf6 <HAL_RCCEx_PeriphCLKConfig+0x8e2>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002cca:	4b29      	ldr	r3, [pc, #164]	; (8002d70 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8002ccc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002cce:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002cd2:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002cd6:	4b26      	ldr	r3, [pc, #152]	; (8002d70 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8002cd8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002cda:	4a25      	ldr	r2, [pc, #148]	; (8002d70 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8002cdc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002ce0:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002ce2:	4b23      	ldr	r3, [pc, #140]	; (8002d70 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8002ce4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002ce6:	4a22      	ldr	r2, [pc, #136]	; (8002d70 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8002ce8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002cec:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8002cee:	4a20      	ldr	r2, [pc, #128]	; (8002d70 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8002cf0:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8002cf4:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8002cf6:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8002cfa:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8002cfe:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002d02:	d118      	bne.n	8002d36 <HAL_RCCEx_PeriphCLKConfig+0x922>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d04:	f7fe f802 	bl	8000d0c <HAL_GetTick>
 8002d08:	f8c7 0128 	str.w	r0, [r7, #296]	; 0x128

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002d0c:	e00d      	b.n	8002d2a <HAL_RCCEx_PeriphCLKConfig+0x916>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002d0e:	f7fd fffd 	bl	8000d0c <HAL_GetTick>
 8002d12:	4602      	mov	r2, r0
 8002d14:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8002d18:	1ad2      	subs	r2, r2, r3
 8002d1a:	f241 3388 	movw	r3, #5000	; 0x1388
 8002d1e:	429a      	cmp	r2, r3
 8002d20:	d903      	bls.n	8002d2a <HAL_RCCEx_PeriphCLKConfig+0x916>
          {
            ret = HAL_TIMEOUT;
 8002d22:	2303      	movs	r3, #3
 8002d24:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
            break;
 8002d28:	e005      	b.n	8002d36 <HAL_RCCEx_PeriphCLKConfig+0x922>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002d2a:	4b11      	ldr	r3, [pc, #68]	; (8002d70 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8002d2c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002d2e:	f003 0302 	and.w	r3, r3, #2
 8002d32:	2b00      	cmp	r3, #0
 8002d34:	d0eb      	beq.n	8002d0e <HAL_RCCEx_PeriphCLKConfig+0x8fa>
          }
        }
      }

      if (ret == HAL_OK)
 8002d36:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8002d3a:	2b00      	cmp	r3, #0
 8002d3c:	d130      	bne.n	8002da0 <HAL_RCCEx_PeriphCLKConfig+0x98c>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002d3e:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8002d42:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8002d46:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002d4a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002d4e:	d115      	bne.n	8002d7c <HAL_RCCEx_PeriphCLKConfig+0x968>
 8002d50:	4b07      	ldr	r3, [pc, #28]	; (8002d70 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8002d52:	691b      	ldr	r3, [r3, #16]
 8002d54:	f423 517c 	bic.w	r1, r3, #16128	; 0x3f00
 8002d58:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8002d5c:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8002d60:	091a      	lsrs	r2, r3, #4
 8002d62:	4b05      	ldr	r3, [pc, #20]	; (8002d78 <HAL_RCCEx_PeriphCLKConfig+0x964>)
 8002d64:	4013      	ands	r3, r2
 8002d66:	4a02      	ldr	r2, [pc, #8]	; (8002d70 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8002d68:	430b      	orrs	r3, r1
 8002d6a:	6113      	str	r3, [r2, #16]
 8002d6c:	e00c      	b.n	8002d88 <HAL_RCCEx_PeriphCLKConfig+0x974>
 8002d6e:	bf00      	nop
 8002d70:	58024400 	.word	0x58024400
 8002d74:	58024800 	.word	0x58024800
 8002d78:	00ffffcf 	.word	0x00ffffcf
 8002d7c:	4bd4      	ldr	r3, [pc, #848]	; (80030d0 <HAL_RCCEx_PeriphCLKConfig+0xcbc>)
 8002d7e:	691b      	ldr	r3, [r3, #16]
 8002d80:	4ad3      	ldr	r2, [pc, #844]	; (80030d0 <HAL_RCCEx_PeriphCLKConfig+0xcbc>)
 8002d82:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8002d86:	6113      	str	r3, [r2, #16]
 8002d88:	4bd1      	ldr	r3, [pc, #836]	; (80030d0 <HAL_RCCEx_PeriphCLKConfig+0xcbc>)
 8002d8a:	6f19      	ldr	r1, [r3, #112]	; 0x70
 8002d8c:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8002d90:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8002d94:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002d98:	4acd      	ldr	r2, [pc, #820]	; (80030d0 <HAL_RCCEx_PeriphCLKConfig+0xcbc>)
 8002d9a:	430b      	orrs	r3, r1
 8002d9c:	6713      	str	r3, [r2, #112]	; 0x70
 8002d9e:	e008      	b.n	8002db2 <HAL_RCCEx_PeriphCLKConfig+0x99e>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8002da0:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8002da4:	f887 312e 	strb.w	r3, [r7, #302]	; 0x12e
 8002da8:	e003      	b.n	8002db2 <HAL_RCCEx_PeriphCLKConfig+0x99e>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002daa:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8002dae:	f887 312e 	strb.w	r3, [r7, #302]	; 0x12e
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8002db2:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8002db6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002dba:	f002 0301 	and.w	r3, r2, #1
 8002dbe:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8002dc2:	2300      	movs	r3, #0
 8002dc4:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8002dc8:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8002dcc:	460b      	mov	r3, r1
 8002dce:	4313      	orrs	r3, r2
 8002dd0:	f000 808b 	beq.w	8002eea <HAL_RCCEx_PeriphCLKConfig+0xad6>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 8002dd4:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8002dd8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002ddc:	2b28      	cmp	r3, #40	; 0x28
 8002dde:	d86b      	bhi.n	8002eb8 <HAL_RCCEx_PeriphCLKConfig+0xaa4>
 8002de0:	a201      	add	r2, pc, #4	; (adr r2, 8002de8 <HAL_RCCEx_PeriphCLKConfig+0x9d4>)
 8002de2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002de6:	bf00      	nop
 8002de8:	08002ec1 	.word	0x08002ec1
 8002dec:	08002eb9 	.word	0x08002eb9
 8002df0:	08002eb9 	.word	0x08002eb9
 8002df4:	08002eb9 	.word	0x08002eb9
 8002df8:	08002eb9 	.word	0x08002eb9
 8002dfc:	08002eb9 	.word	0x08002eb9
 8002e00:	08002eb9 	.word	0x08002eb9
 8002e04:	08002eb9 	.word	0x08002eb9
 8002e08:	08002e8d 	.word	0x08002e8d
 8002e0c:	08002eb9 	.word	0x08002eb9
 8002e10:	08002eb9 	.word	0x08002eb9
 8002e14:	08002eb9 	.word	0x08002eb9
 8002e18:	08002eb9 	.word	0x08002eb9
 8002e1c:	08002eb9 	.word	0x08002eb9
 8002e20:	08002eb9 	.word	0x08002eb9
 8002e24:	08002eb9 	.word	0x08002eb9
 8002e28:	08002ea3 	.word	0x08002ea3
 8002e2c:	08002eb9 	.word	0x08002eb9
 8002e30:	08002eb9 	.word	0x08002eb9
 8002e34:	08002eb9 	.word	0x08002eb9
 8002e38:	08002eb9 	.word	0x08002eb9
 8002e3c:	08002eb9 	.word	0x08002eb9
 8002e40:	08002eb9 	.word	0x08002eb9
 8002e44:	08002eb9 	.word	0x08002eb9
 8002e48:	08002ec1 	.word	0x08002ec1
 8002e4c:	08002eb9 	.word	0x08002eb9
 8002e50:	08002eb9 	.word	0x08002eb9
 8002e54:	08002eb9 	.word	0x08002eb9
 8002e58:	08002eb9 	.word	0x08002eb9
 8002e5c:	08002eb9 	.word	0x08002eb9
 8002e60:	08002eb9 	.word	0x08002eb9
 8002e64:	08002eb9 	.word	0x08002eb9
 8002e68:	08002ec1 	.word	0x08002ec1
 8002e6c:	08002eb9 	.word	0x08002eb9
 8002e70:	08002eb9 	.word	0x08002eb9
 8002e74:	08002eb9 	.word	0x08002eb9
 8002e78:	08002eb9 	.word	0x08002eb9
 8002e7c:	08002eb9 	.word	0x08002eb9
 8002e80:	08002eb9 	.word	0x08002eb9
 8002e84:	08002eb9 	.word	0x08002eb9
 8002e88:	08002ec1 	.word	0x08002ec1
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8002e8c:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8002e90:	3308      	adds	r3, #8
 8002e92:	2101      	movs	r1, #1
 8002e94:	4618      	mov	r0, r3
 8002e96:	f000 ffc5 	bl	8003e24 <RCCEx_PLL2_Config>
 8002e9a:	4603      	mov	r3, r0
 8002e9c:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8002ea0:	e00f      	b.n	8002ec2 <HAL_RCCEx_PeriphCLKConfig+0xaae>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8002ea2:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8002ea6:	3328      	adds	r3, #40	; 0x28
 8002ea8:	2101      	movs	r1, #1
 8002eaa:	4618      	mov	r0, r3
 8002eac:	f001 f86c 	bl	8003f88 <RCCEx_PLL3_Config>
 8002eb0:	4603      	mov	r3, r0
 8002eb2:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8002eb6:	e004      	b.n	8002ec2 <HAL_RCCEx_PeriphCLKConfig+0xaae>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8002eb8:	2301      	movs	r3, #1
 8002eba:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
        break;
 8002ebe:	e000      	b.n	8002ec2 <HAL_RCCEx_PeriphCLKConfig+0xaae>
        break;
 8002ec0:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002ec2:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8002ec6:	2b00      	cmp	r3, #0
 8002ec8:	d10b      	bne.n	8002ee2 <HAL_RCCEx_PeriphCLKConfig+0xace>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8002eca:	4b81      	ldr	r3, [pc, #516]	; (80030d0 <HAL_RCCEx_PeriphCLKConfig+0xcbc>)
 8002ecc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002ece:	f023 0138 	bic.w	r1, r3, #56	; 0x38
 8002ed2:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8002ed6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002eda:	4a7d      	ldr	r2, [pc, #500]	; (80030d0 <HAL_RCCEx_PeriphCLKConfig+0xcbc>)
 8002edc:	430b      	orrs	r3, r1
 8002ede:	6553      	str	r3, [r2, #84]	; 0x54
 8002ee0:	e003      	b.n	8002eea <HAL_RCCEx_PeriphCLKConfig+0xad6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002ee2:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8002ee6:	f887 312e 	strb.w	r3, [r7, #302]	; 0x12e
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8002eea:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8002eee:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002ef2:	f002 0302 	and.w	r3, r2, #2
 8002ef6:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8002efa:	2300      	movs	r3, #0
 8002efc:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8002f00:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	; 0xb8
 8002f04:	460b      	mov	r3, r1
 8002f06:	4313      	orrs	r3, r2
 8002f08:	d042      	beq.n	8002f90 <HAL_RCCEx_PeriphCLKConfig+0xb7c>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 8002f0a:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8002f0e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002f10:	2b05      	cmp	r3, #5
 8002f12:	d825      	bhi.n	8002f60 <HAL_RCCEx_PeriphCLKConfig+0xb4c>
 8002f14:	a201      	add	r2, pc, #4	; (adr r2, 8002f1c <HAL_RCCEx_PeriphCLKConfig+0xb08>)
 8002f16:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002f1a:	bf00      	nop
 8002f1c:	08002f69 	.word	0x08002f69
 8002f20:	08002f35 	.word	0x08002f35
 8002f24:	08002f4b 	.word	0x08002f4b
 8002f28:	08002f69 	.word	0x08002f69
 8002f2c:	08002f69 	.word	0x08002f69
 8002f30:	08002f69 	.word	0x08002f69
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8002f34:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8002f38:	3308      	adds	r3, #8
 8002f3a:	2101      	movs	r1, #1
 8002f3c:	4618      	mov	r0, r3
 8002f3e:	f000 ff71 	bl	8003e24 <RCCEx_PLL2_Config>
 8002f42:	4603      	mov	r3, r0
 8002f44:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8002f48:	e00f      	b.n	8002f6a <HAL_RCCEx_PeriphCLKConfig+0xb56>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8002f4a:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8002f4e:	3328      	adds	r3, #40	; 0x28
 8002f50:	2101      	movs	r1, #1
 8002f52:	4618      	mov	r0, r3
 8002f54:	f001 f818 	bl	8003f88 <RCCEx_PLL3_Config>
 8002f58:	4603      	mov	r3, r0
 8002f5a:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8002f5e:	e004      	b.n	8002f6a <HAL_RCCEx_PeriphCLKConfig+0xb56>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8002f60:	2301      	movs	r3, #1
 8002f62:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
        break;
 8002f66:	e000      	b.n	8002f6a <HAL_RCCEx_PeriphCLKConfig+0xb56>
        break;
 8002f68:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002f6a:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8002f6e:	2b00      	cmp	r3, #0
 8002f70:	d10a      	bne.n	8002f88 <HAL_RCCEx_PeriphCLKConfig+0xb74>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8002f72:	4b57      	ldr	r3, [pc, #348]	; (80030d0 <HAL_RCCEx_PeriphCLKConfig+0xcbc>)
 8002f74:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002f76:	f023 0107 	bic.w	r1, r3, #7
 8002f7a:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8002f7e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002f80:	4a53      	ldr	r2, [pc, #332]	; (80030d0 <HAL_RCCEx_PeriphCLKConfig+0xcbc>)
 8002f82:	430b      	orrs	r3, r1
 8002f84:	6553      	str	r3, [r2, #84]	; 0x54
 8002f86:	e003      	b.n	8002f90 <HAL_RCCEx_PeriphCLKConfig+0xb7c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002f88:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8002f8c:	f887 312e 	strb.w	r3, [r7, #302]	; 0x12e
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002f90:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8002f94:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002f98:	f002 0304 	and.w	r3, r2, #4
 8002f9c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8002fa0:	2300      	movs	r3, #0
 8002fa2:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8002fa6:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	; 0xb0
 8002faa:	460b      	mov	r3, r1
 8002fac:	4313      	orrs	r3, r2
 8002fae:	d044      	beq.n	800303a <HAL_RCCEx_PeriphCLKConfig+0xc26>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 8002fb0:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8002fb4:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002fb8:	2b05      	cmp	r3, #5
 8002fba:	d825      	bhi.n	8003008 <HAL_RCCEx_PeriphCLKConfig+0xbf4>
 8002fbc:	a201      	add	r2, pc, #4	; (adr r2, 8002fc4 <HAL_RCCEx_PeriphCLKConfig+0xbb0>)
 8002fbe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002fc2:	bf00      	nop
 8002fc4:	08003011 	.word	0x08003011
 8002fc8:	08002fdd 	.word	0x08002fdd
 8002fcc:	08002ff3 	.word	0x08002ff3
 8002fd0:	08003011 	.word	0x08003011
 8002fd4:	08003011 	.word	0x08003011
 8002fd8:	08003011 	.word	0x08003011
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8002fdc:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8002fe0:	3308      	adds	r3, #8
 8002fe2:	2101      	movs	r1, #1
 8002fe4:	4618      	mov	r0, r3
 8002fe6:	f000 ff1d 	bl	8003e24 <RCCEx_PLL2_Config>
 8002fea:	4603      	mov	r3, r0
 8002fec:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8002ff0:	e00f      	b.n	8003012 <HAL_RCCEx_PeriphCLKConfig+0xbfe>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8002ff2:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8002ff6:	3328      	adds	r3, #40	; 0x28
 8002ff8:	2101      	movs	r1, #1
 8002ffa:	4618      	mov	r0, r3
 8002ffc:	f000 ffc4 	bl	8003f88 <RCCEx_PLL3_Config>
 8003000:	4603      	mov	r3, r0
 8003002:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8003006:	e004      	b.n	8003012 <HAL_RCCEx_PeriphCLKConfig+0xbfe>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003008:	2301      	movs	r3, #1
 800300a:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
        break;
 800300e:	e000      	b.n	8003012 <HAL_RCCEx_PeriphCLKConfig+0xbfe>
        break;
 8003010:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003012:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8003016:	2b00      	cmp	r3, #0
 8003018:	d10b      	bne.n	8003032 <HAL_RCCEx_PeriphCLKConfig+0xc1e>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800301a:	4b2d      	ldr	r3, [pc, #180]	; (80030d0 <HAL_RCCEx_PeriphCLKConfig+0xcbc>)
 800301c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800301e:	f023 0107 	bic.w	r1, r3, #7
 8003022:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8003026:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800302a:	4a29      	ldr	r2, [pc, #164]	; (80030d0 <HAL_RCCEx_PeriphCLKConfig+0xcbc>)
 800302c:	430b      	orrs	r3, r1
 800302e:	6593      	str	r3, [r2, #88]	; 0x58
 8003030:	e003      	b.n	800303a <HAL_RCCEx_PeriphCLKConfig+0xc26>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003032:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8003036:	f887 312e 	strb.w	r3, [r7, #302]	; 0x12e
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800303a:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800303e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003042:	f002 0320 	and.w	r3, r2, #32
 8003046:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800304a:	2300      	movs	r3, #0
 800304c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8003050:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8003054:	460b      	mov	r3, r1
 8003056:	4313      	orrs	r3, r2
 8003058:	d057      	beq.n	800310a <HAL_RCCEx_PeriphCLKConfig+0xcf6>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 800305a:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800305e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003062:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003066:	d035      	beq.n	80030d4 <HAL_RCCEx_PeriphCLKConfig+0xcc0>
 8003068:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800306c:	d82c      	bhi.n	80030c8 <HAL_RCCEx_PeriphCLKConfig+0xcb4>
 800306e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003072:	d031      	beq.n	80030d8 <HAL_RCCEx_PeriphCLKConfig+0xcc4>
 8003074:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003078:	d826      	bhi.n	80030c8 <HAL_RCCEx_PeriphCLKConfig+0xcb4>
 800307a:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800307e:	d02d      	beq.n	80030dc <HAL_RCCEx_PeriphCLKConfig+0xcc8>
 8003080:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8003084:	d820      	bhi.n	80030c8 <HAL_RCCEx_PeriphCLKConfig+0xcb4>
 8003086:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800308a:	d012      	beq.n	80030b2 <HAL_RCCEx_PeriphCLKConfig+0xc9e>
 800308c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003090:	d81a      	bhi.n	80030c8 <HAL_RCCEx_PeriphCLKConfig+0xcb4>
 8003092:	2b00      	cmp	r3, #0
 8003094:	d024      	beq.n	80030e0 <HAL_RCCEx_PeriphCLKConfig+0xccc>
 8003096:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800309a:	d115      	bne.n	80030c8 <HAL_RCCEx_PeriphCLKConfig+0xcb4>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800309c:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80030a0:	3308      	adds	r3, #8
 80030a2:	2100      	movs	r1, #0
 80030a4:	4618      	mov	r0, r3
 80030a6:	f000 febd 	bl	8003e24 <RCCEx_PLL2_Config>
 80030aa:	4603      	mov	r3, r0
 80030ac:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 80030b0:	e017      	b.n	80030e2 <HAL_RCCEx_PeriphCLKConfig+0xcce>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80030b2:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80030b6:	3328      	adds	r3, #40	; 0x28
 80030b8:	2102      	movs	r1, #2
 80030ba:	4618      	mov	r0, r3
 80030bc:	f000 ff64 	bl	8003f88 <RCCEx_PLL3_Config>
 80030c0:	4603      	mov	r3, r0
 80030c2:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 80030c6:	e00c      	b.n	80030e2 <HAL_RCCEx_PeriphCLKConfig+0xcce>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80030c8:	2301      	movs	r3, #1
 80030ca:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
        break;
 80030ce:	e008      	b.n	80030e2 <HAL_RCCEx_PeriphCLKConfig+0xcce>
 80030d0:	58024400 	.word	0x58024400
        break;
 80030d4:	bf00      	nop
 80030d6:	e004      	b.n	80030e2 <HAL_RCCEx_PeriphCLKConfig+0xcce>
        break;
 80030d8:	bf00      	nop
 80030da:	e002      	b.n	80030e2 <HAL_RCCEx_PeriphCLKConfig+0xcce>
        break;
 80030dc:	bf00      	nop
 80030de:	e000      	b.n	80030e2 <HAL_RCCEx_PeriphCLKConfig+0xcce>
        break;
 80030e0:	bf00      	nop
    }

    if (ret == HAL_OK)
 80030e2:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 80030e6:	2b00      	cmp	r3, #0
 80030e8:	d10b      	bne.n	8003102 <HAL_RCCEx_PeriphCLKConfig+0xcee>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80030ea:	4bc2      	ldr	r3, [pc, #776]	; (80033f4 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 80030ec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80030ee:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 80030f2:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80030f6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80030fa:	4abe      	ldr	r2, [pc, #760]	; (80033f4 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 80030fc:	430b      	orrs	r3, r1
 80030fe:	6553      	str	r3, [r2, #84]	; 0x54
 8003100:	e003      	b.n	800310a <HAL_RCCEx_PeriphCLKConfig+0xcf6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003102:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8003106:	f887 312e 	strb.w	r3, [r7, #302]	; 0x12e
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 800310a:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800310e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003112:	f002 0340 	and.w	r3, r2, #64	; 0x40
 8003116:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800311a:	2300      	movs	r3, #0
 800311c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8003120:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	; 0xa0
 8003124:	460b      	mov	r3, r1
 8003126:	4313      	orrs	r3, r2
 8003128:	d055      	beq.n	80031d6 <HAL_RCCEx_PeriphCLKConfig+0xdc2>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 800312a:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800312e:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8003132:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8003136:	d033      	beq.n	80031a0 <HAL_RCCEx_PeriphCLKConfig+0xd8c>
 8003138:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 800313c:	d82c      	bhi.n	8003198 <HAL_RCCEx_PeriphCLKConfig+0xd84>
 800313e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003142:	d02f      	beq.n	80031a4 <HAL_RCCEx_PeriphCLKConfig+0xd90>
 8003144:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003148:	d826      	bhi.n	8003198 <HAL_RCCEx_PeriphCLKConfig+0xd84>
 800314a:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800314e:	d02b      	beq.n	80031a8 <HAL_RCCEx_PeriphCLKConfig+0xd94>
 8003150:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003154:	d820      	bhi.n	8003198 <HAL_RCCEx_PeriphCLKConfig+0xd84>
 8003156:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800315a:	d012      	beq.n	8003182 <HAL_RCCEx_PeriphCLKConfig+0xd6e>
 800315c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003160:	d81a      	bhi.n	8003198 <HAL_RCCEx_PeriphCLKConfig+0xd84>
 8003162:	2b00      	cmp	r3, #0
 8003164:	d022      	beq.n	80031ac <HAL_RCCEx_PeriphCLKConfig+0xd98>
 8003166:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800316a:	d115      	bne.n	8003198 <HAL_RCCEx_PeriphCLKConfig+0xd84>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800316c:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8003170:	3308      	adds	r3, #8
 8003172:	2100      	movs	r1, #0
 8003174:	4618      	mov	r0, r3
 8003176:	f000 fe55 	bl	8003e24 <RCCEx_PLL2_Config>
 800317a:	4603      	mov	r3, r0
 800317c:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8003180:	e015      	b.n	80031ae <HAL_RCCEx_PeriphCLKConfig+0xd9a>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8003182:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8003186:	3328      	adds	r3, #40	; 0x28
 8003188:	2102      	movs	r1, #2
 800318a:	4618      	mov	r0, r3
 800318c:	f000 fefc 	bl	8003f88 <RCCEx_PLL3_Config>
 8003190:	4603      	mov	r3, r0
 8003192:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8003196:	e00a      	b.n	80031ae <HAL_RCCEx_PeriphCLKConfig+0xd9a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003198:	2301      	movs	r3, #1
 800319a:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
        break;
 800319e:	e006      	b.n	80031ae <HAL_RCCEx_PeriphCLKConfig+0xd9a>
        break;
 80031a0:	bf00      	nop
 80031a2:	e004      	b.n	80031ae <HAL_RCCEx_PeriphCLKConfig+0xd9a>
        break;
 80031a4:	bf00      	nop
 80031a6:	e002      	b.n	80031ae <HAL_RCCEx_PeriphCLKConfig+0xd9a>
        break;
 80031a8:	bf00      	nop
 80031aa:	e000      	b.n	80031ae <HAL_RCCEx_PeriphCLKConfig+0xd9a>
        break;
 80031ac:	bf00      	nop
    }

    if (ret == HAL_OK)
 80031ae:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 80031b2:	2b00      	cmp	r3, #0
 80031b4:	d10b      	bne.n	80031ce <HAL_RCCEx_PeriphCLKConfig+0xdba>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80031b6:	4b8f      	ldr	r3, [pc, #572]	; (80033f4 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 80031b8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80031ba:	f423 51e0 	bic.w	r1, r3, #7168	; 0x1c00
 80031be:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80031c2:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 80031c6:	4a8b      	ldr	r2, [pc, #556]	; (80033f4 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 80031c8:	430b      	orrs	r3, r1
 80031ca:	6593      	str	r3, [r2, #88]	; 0x58
 80031cc:	e003      	b.n	80031d6 <HAL_RCCEx_PeriphCLKConfig+0xdc2>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80031ce:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 80031d2:	f887 312e 	strb.w	r3, [r7, #302]	; 0x12e
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 80031d6:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80031da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80031de:	f002 0380 	and.w	r3, r2, #128	; 0x80
 80031e2:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80031e6:	2300      	movs	r3, #0
 80031e8:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80031ec:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	; 0x98
 80031f0:	460b      	mov	r3, r1
 80031f2:	4313      	orrs	r3, r2
 80031f4:	d055      	beq.n	80032a2 <HAL_RCCEx_PeriphCLKConfig+0xe8e>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 80031f6:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80031fa:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80031fe:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8003202:	d033      	beq.n	800326c <HAL_RCCEx_PeriphCLKConfig+0xe58>
 8003204:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8003208:	d82c      	bhi.n	8003264 <HAL_RCCEx_PeriphCLKConfig+0xe50>
 800320a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800320e:	d02f      	beq.n	8003270 <HAL_RCCEx_PeriphCLKConfig+0xe5c>
 8003210:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003214:	d826      	bhi.n	8003264 <HAL_RCCEx_PeriphCLKConfig+0xe50>
 8003216:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 800321a:	d02b      	beq.n	8003274 <HAL_RCCEx_PeriphCLKConfig+0xe60>
 800321c:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8003220:	d820      	bhi.n	8003264 <HAL_RCCEx_PeriphCLKConfig+0xe50>
 8003222:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003226:	d012      	beq.n	800324e <HAL_RCCEx_PeriphCLKConfig+0xe3a>
 8003228:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800322c:	d81a      	bhi.n	8003264 <HAL_RCCEx_PeriphCLKConfig+0xe50>
 800322e:	2b00      	cmp	r3, #0
 8003230:	d022      	beq.n	8003278 <HAL_RCCEx_PeriphCLKConfig+0xe64>
 8003232:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003236:	d115      	bne.n	8003264 <HAL_RCCEx_PeriphCLKConfig+0xe50>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003238:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800323c:	3308      	adds	r3, #8
 800323e:	2100      	movs	r1, #0
 8003240:	4618      	mov	r0, r3
 8003242:	f000 fdef 	bl	8003e24 <RCCEx_PLL2_Config>
 8003246:	4603      	mov	r3, r0
 8003248:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 800324c:	e015      	b.n	800327a <HAL_RCCEx_PeriphCLKConfig+0xe66>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800324e:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8003252:	3328      	adds	r3, #40	; 0x28
 8003254:	2102      	movs	r1, #2
 8003256:	4618      	mov	r0, r3
 8003258:	f000 fe96 	bl	8003f88 <RCCEx_PLL3_Config>
 800325c:	4603      	mov	r3, r0
 800325e:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8003262:	e00a      	b.n	800327a <HAL_RCCEx_PeriphCLKConfig+0xe66>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003264:	2301      	movs	r3, #1
 8003266:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
        break;
 800326a:	e006      	b.n	800327a <HAL_RCCEx_PeriphCLKConfig+0xe66>
        break;
 800326c:	bf00      	nop
 800326e:	e004      	b.n	800327a <HAL_RCCEx_PeriphCLKConfig+0xe66>
        break;
 8003270:	bf00      	nop
 8003272:	e002      	b.n	800327a <HAL_RCCEx_PeriphCLKConfig+0xe66>
        break;
 8003274:	bf00      	nop
 8003276:	e000      	b.n	800327a <HAL_RCCEx_PeriphCLKConfig+0xe66>
        break;
 8003278:	bf00      	nop
    }

    if (ret == HAL_OK)
 800327a:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 800327e:	2b00      	cmp	r3, #0
 8003280:	d10b      	bne.n	800329a <HAL_RCCEx_PeriphCLKConfig+0xe86>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8003282:	4b5c      	ldr	r3, [pc, #368]	; (80033f4 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8003284:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003286:	f423 4160 	bic.w	r1, r3, #57344	; 0xe000
 800328a:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800328e:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8003292:	4a58      	ldr	r2, [pc, #352]	; (80033f4 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8003294:	430b      	orrs	r3, r1
 8003296:	6593      	str	r3, [r2, #88]	; 0x58
 8003298:	e003      	b.n	80032a2 <HAL_RCCEx_PeriphCLKConfig+0xe8e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800329a:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 800329e:	f887 312e 	strb.w	r3, [r7, #302]	; 0x12e

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 80032a2:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80032a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80032aa:	f002 0308 	and.w	r3, r2, #8
 80032ae:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80032b2:	2300      	movs	r3, #0
 80032b4:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80032b8:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	; 0x90
 80032bc:	460b      	mov	r3, r1
 80032be:	4313      	orrs	r3, r2
 80032c0:	d01e      	beq.n	8003300 <HAL_RCCEx_PeriphCLKConfig+0xeec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 80032c2:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80032c6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80032ca:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80032ce:	d10c      	bne.n	80032ea <HAL_RCCEx_PeriphCLKConfig+0xed6>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 80032d0:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80032d4:	3328      	adds	r3, #40	; 0x28
 80032d6:	2102      	movs	r1, #2
 80032d8:	4618      	mov	r0, r3
 80032da:	f000 fe55 	bl	8003f88 <RCCEx_PLL3_Config>
 80032de:	4603      	mov	r3, r0
 80032e0:	2b00      	cmp	r3, #0
 80032e2:	d002      	beq.n	80032ea <HAL_RCCEx_PeriphCLKConfig+0xed6>
      {
        status = HAL_ERROR;
 80032e4:	2301      	movs	r3, #1
 80032e6:	f887 312e 	strb.w	r3, [r7, #302]	; 0x12e
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 80032ea:	4b42      	ldr	r3, [pc, #264]	; (80033f4 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 80032ec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80032ee:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80032f2:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80032f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80032fa:	4a3e      	ldr	r2, [pc, #248]	; (80033f4 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 80032fc:	430b      	orrs	r3, r1
 80032fe:	6553      	str	r3, [r2, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8003300:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8003304:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003308:	f002 0310 	and.w	r3, r2, #16
 800330c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8003310:	2300      	movs	r3, #0
 8003312:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8003316:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	; 0x88
 800331a:	460b      	mov	r3, r1
 800331c:	4313      	orrs	r3, r2
 800331e:	d01e      	beq.n	800335e <HAL_RCCEx_PeriphCLKConfig+0xf4a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 8003320:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8003324:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003328:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800332c:	d10c      	bne.n	8003348 <HAL_RCCEx_PeriphCLKConfig+0xf34>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800332e:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8003332:	3328      	adds	r3, #40	; 0x28
 8003334:	2102      	movs	r1, #2
 8003336:	4618      	mov	r0, r3
 8003338:	f000 fe26 	bl	8003f88 <RCCEx_PLL3_Config>
 800333c:	4603      	mov	r3, r0
 800333e:	2b00      	cmp	r3, #0
 8003340:	d002      	beq.n	8003348 <HAL_RCCEx_PeriphCLKConfig+0xf34>
      {
        status = HAL_ERROR;
 8003342:	2301      	movs	r3, #1
 8003344:	f887 312e 	strb.w	r3, [r7, #302]	; 0x12e
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8003348:	4b2a      	ldr	r3, [pc, #168]	; (80033f4 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800334a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800334c:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8003350:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8003354:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003358:	4a26      	ldr	r2, [pc, #152]	; (80033f4 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800335a:	430b      	orrs	r3, r1
 800335c:	6593      	str	r3, [r2, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800335e:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8003362:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003366:	f402 2300 	and.w	r3, r2, #524288	; 0x80000
 800336a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800336e:	2300      	movs	r3, #0
 8003370:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8003374:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	; 0x80
 8003378:	460b      	mov	r3, r1
 800337a:	4313      	orrs	r3, r2
 800337c:	d040      	beq.n	8003400 <HAL_RCCEx_PeriphCLKConfig+0xfec>
  {
    switch (PeriphClkInit->AdcClockSelection)
 800337e:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8003382:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8003386:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800338a:	d022      	beq.n	80033d2 <HAL_RCCEx_PeriphCLKConfig+0xfbe>
 800338c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003390:	d81b      	bhi.n	80033ca <HAL_RCCEx_PeriphCLKConfig+0xfb6>
 8003392:	2b00      	cmp	r3, #0
 8003394:	d003      	beq.n	800339e <HAL_RCCEx_PeriphCLKConfig+0xf8a>
 8003396:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800339a:	d00b      	beq.n	80033b4 <HAL_RCCEx_PeriphCLKConfig+0xfa0>
 800339c:	e015      	b.n	80033ca <HAL_RCCEx_PeriphCLKConfig+0xfb6>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800339e:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80033a2:	3308      	adds	r3, #8
 80033a4:	2100      	movs	r1, #0
 80033a6:	4618      	mov	r0, r3
 80033a8:	f000 fd3c 	bl	8003e24 <RCCEx_PLL2_Config>
 80033ac:	4603      	mov	r3, r0
 80033ae:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f

        /* ADC clock source configuration done later after clock selection check */
        break;
 80033b2:	e00f      	b.n	80033d4 <HAL_RCCEx_PeriphCLKConfig+0xfc0>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80033b4:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80033b8:	3328      	adds	r3, #40	; 0x28
 80033ba:	2102      	movs	r1, #2
 80033bc:	4618      	mov	r0, r3
 80033be:	f000 fde3 	bl	8003f88 <RCCEx_PLL3_Config>
 80033c2:	4603      	mov	r3, r0
 80033c4:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f

        /* ADC clock source configuration done later after clock selection check */
        break;
 80033c8:	e004      	b.n	80033d4 <HAL_RCCEx_PeriphCLKConfig+0xfc0>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80033ca:	2301      	movs	r3, #1
 80033cc:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
        break;
 80033d0:	e000      	b.n	80033d4 <HAL_RCCEx_PeriphCLKConfig+0xfc0>
        break;
 80033d2:	bf00      	nop
    }

    if (ret == HAL_OK)
 80033d4:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 80033d8:	2b00      	cmp	r3, #0
 80033da:	d10d      	bne.n	80033f8 <HAL_RCCEx_PeriphCLKConfig+0xfe4>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80033dc:	4b05      	ldr	r3, [pc, #20]	; (80033f4 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 80033de:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80033e0:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 80033e4:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80033e8:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 80033ec:	4a01      	ldr	r2, [pc, #4]	; (80033f4 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 80033ee:	430b      	orrs	r3, r1
 80033f0:	6593      	str	r3, [r2, #88]	; 0x58
 80033f2:	e005      	b.n	8003400 <HAL_RCCEx_PeriphCLKConfig+0xfec>
 80033f4:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80033f8:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 80033fc:	f887 312e 	strb.w	r3, [r7, #302]	; 0x12e
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8003400:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8003404:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003408:	f402 2380 	and.w	r3, r2, #262144	; 0x40000
 800340c:	67bb      	str	r3, [r7, #120]	; 0x78
 800340e:	2300      	movs	r3, #0
 8003410:	67fb      	str	r3, [r7, #124]	; 0x7c
 8003412:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	; 0x78
 8003416:	460b      	mov	r3, r1
 8003418:	4313      	orrs	r3, r2
 800341a:	d03b      	beq.n	8003494 <HAL_RCCEx_PeriphCLKConfig+0x1080>
  {

    switch (PeriphClkInit->UsbClockSelection)
 800341c:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8003420:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003424:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8003428:	d01f      	beq.n	800346a <HAL_RCCEx_PeriphCLKConfig+0x1056>
 800342a:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800342e:	d818      	bhi.n	8003462 <HAL_RCCEx_PeriphCLKConfig+0x104e>
 8003430:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003434:	d003      	beq.n	800343e <HAL_RCCEx_PeriphCLKConfig+0x102a>
 8003436:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800343a:	d007      	beq.n	800344c <HAL_RCCEx_PeriphCLKConfig+0x1038>
 800343c:	e011      	b.n	8003462 <HAL_RCCEx_PeriphCLKConfig+0x104e>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800343e:	4b64      	ldr	r3, [pc, #400]	; (80035d0 <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 8003440:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003442:	4a63      	ldr	r2, [pc, #396]	; (80035d0 <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 8003444:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003448:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 800344a:	e00f      	b.n	800346c <HAL_RCCEx_PeriphCLKConfig+0x1058>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800344c:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8003450:	3328      	adds	r3, #40	; 0x28
 8003452:	2101      	movs	r1, #1
 8003454:	4618      	mov	r0, r3
 8003456:	f000 fd97 	bl	8003f88 <RCCEx_PLL3_Config>
 800345a:	4603      	mov	r3, r0
 800345c:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f

        /* USB clock source configuration done later after clock selection check */
        break;
 8003460:	e004      	b.n	800346c <HAL_RCCEx_PeriphCLKConfig+0x1058>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003462:	2301      	movs	r3, #1
 8003464:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
        break;
 8003468:	e000      	b.n	800346c <HAL_RCCEx_PeriphCLKConfig+0x1058>
        break;
 800346a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800346c:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8003470:	2b00      	cmp	r3, #0
 8003472:	d10b      	bne.n	800348c <HAL_RCCEx_PeriphCLKConfig+0x1078>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003474:	4b56      	ldr	r3, [pc, #344]	; (80035d0 <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 8003476:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003478:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 800347c:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8003480:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003484:	4a52      	ldr	r2, [pc, #328]	; (80035d0 <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 8003486:	430b      	orrs	r3, r1
 8003488:	6553      	str	r3, [r2, #84]	; 0x54
 800348a:	e003      	b.n	8003494 <HAL_RCCEx_PeriphCLKConfig+0x1080>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800348c:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8003490:	f887 312e 	strb.w	r3, [r7, #302]	; 0x12e
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8003494:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8003498:	e9d3 2300 	ldrd	r2, r3, [r3]
 800349c:	f402 3380 	and.w	r3, r2, #65536	; 0x10000
 80034a0:	673b      	str	r3, [r7, #112]	; 0x70
 80034a2:	2300      	movs	r3, #0
 80034a4:	677b      	str	r3, [r7, #116]	; 0x74
 80034a6:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	; 0x70
 80034aa:	460b      	mov	r3, r1
 80034ac:	4313      	orrs	r3, r2
 80034ae:	d031      	beq.n	8003514 <HAL_RCCEx_PeriphCLKConfig+0x1100>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 80034b0:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80034b4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80034b6:	2b00      	cmp	r3, #0
 80034b8:	d003      	beq.n	80034c2 <HAL_RCCEx_PeriphCLKConfig+0x10ae>
 80034ba:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80034be:	d007      	beq.n	80034d0 <HAL_RCCEx_PeriphCLKConfig+0x10bc>
 80034c0:	e011      	b.n	80034e6 <HAL_RCCEx_PeriphCLKConfig+0x10d2>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80034c2:	4b43      	ldr	r3, [pc, #268]	; (80035d0 <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 80034c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80034c6:	4a42      	ldr	r2, [pc, #264]	; (80035d0 <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 80034c8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80034cc:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 80034ce:	e00e      	b.n	80034ee <HAL_RCCEx_PeriphCLKConfig+0x10da>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80034d0:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80034d4:	3308      	adds	r3, #8
 80034d6:	2102      	movs	r1, #2
 80034d8:	4618      	mov	r0, r3
 80034da:	f000 fca3 	bl	8003e24 <RCCEx_PLL2_Config>
 80034de:	4603      	mov	r3, r0
 80034e0:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 80034e4:	e003      	b.n	80034ee <HAL_RCCEx_PeriphCLKConfig+0x10da>

      default:
        ret = HAL_ERROR;
 80034e6:	2301      	movs	r3, #1
 80034e8:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
        break;
 80034ec:	bf00      	nop
    }

    if (ret == HAL_OK)
 80034ee:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 80034f2:	2b00      	cmp	r3, #0
 80034f4:	d10a      	bne.n	800350c <HAL_RCCEx_PeriphCLKConfig+0x10f8>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 80034f6:	4b36      	ldr	r3, [pc, #216]	; (80035d0 <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 80034f8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80034fa:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80034fe:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8003502:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003504:	4a32      	ldr	r2, [pc, #200]	; (80035d0 <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 8003506:	430b      	orrs	r3, r1
 8003508:	64d3      	str	r3, [r2, #76]	; 0x4c
 800350a:	e003      	b.n	8003514 <HAL_RCCEx_PeriphCLKConfig+0x1100>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800350c:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8003510:	f887 312e 	strb.w	r3, [r7, #302]	; 0x12e
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8003514:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8003518:	e9d3 2300 	ldrd	r2, r3, [r3]
 800351c:	f002 5300 	and.w	r3, r2, #536870912	; 0x20000000
 8003520:	66bb      	str	r3, [r7, #104]	; 0x68
 8003522:	2300      	movs	r3, #0
 8003524:	66fb      	str	r3, [r7, #108]	; 0x6c
 8003526:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	; 0x68
 800352a:	460b      	mov	r3, r1
 800352c:	4313      	orrs	r3, r2
 800352e:	d00c      	beq.n	800354a <HAL_RCCEx_PeriphCLKConfig+0x1136>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8003530:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8003534:	3328      	adds	r3, #40	; 0x28
 8003536:	2102      	movs	r1, #2
 8003538:	4618      	mov	r0, r3
 800353a:	f000 fd25 	bl	8003f88 <RCCEx_PLL3_Config>
 800353e:	4603      	mov	r3, r0
 8003540:	2b00      	cmp	r3, #0
 8003542:	d002      	beq.n	800354a <HAL_RCCEx_PeriphCLKConfig+0x1136>
    {
      status = HAL_ERROR;
 8003544:	2301      	movs	r3, #1
 8003546:	f887 312e 	strb.w	r3, [r7, #302]	; 0x12e
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 800354a:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800354e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003552:	f402 3300 	and.w	r3, r2, #131072	; 0x20000
 8003556:	663b      	str	r3, [r7, #96]	; 0x60
 8003558:	2300      	movs	r3, #0
 800355a:	667b      	str	r3, [r7, #100]	; 0x64
 800355c:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	; 0x60
 8003560:	460b      	mov	r3, r1
 8003562:	4313      	orrs	r3, r2
 8003564:	d03a      	beq.n	80035dc <HAL_RCCEx_PeriphCLKConfig+0x11c8>
  {

    switch (PeriphClkInit->RngClockSelection)
 8003566:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800356a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800356e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003572:	d018      	beq.n	80035a6 <HAL_RCCEx_PeriphCLKConfig+0x1192>
 8003574:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003578:	d811      	bhi.n	800359e <HAL_RCCEx_PeriphCLKConfig+0x118a>
 800357a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800357e:	d014      	beq.n	80035aa <HAL_RCCEx_PeriphCLKConfig+0x1196>
 8003580:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003584:	d80b      	bhi.n	800359e <HAL_RCCEx_PeriphCLKConfig+0x118a>
 8003586:	2b00      	cmp	r3, #0
 8003588:	d011      	beq.n	80035ae <HAL_RCCEx_PeriphCLKConfig+0x119a>
 800358a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800358e:	d106      	bne.n	800359e <HAL_RCCEx_PeriphCLKConfig+0x118a>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003590:	4b0f      	ldr	r3, [pc, #60]	; (80035d0 <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 8003592:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003594:	4a0e      	ldr	r2, [pc, #56]	; (80035d0 <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 8003596:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800359a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 800359c:	e008      	b.n	80035b0 <HAL_RCCEx_PeriphCLKConfig+0x119c>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800359e:	2301      	movs	r3, #1
 80035a0:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
        break;
 80035a4:	e004      	b.n	80035b0 <HAL_RCCEx_PeriphCLKConfig+0x119c>
        break;
 80035a6:	bf00      	nop
 80035a8:	e002      	b.n	80035b0 <HAL_RCCEx_PeriphCLKConfig+0x119c>
        break;
 80035aa:	bf00      	nop
 80035ac:	e000      	b.n	80035b0 <HAL_RCCEx_PeriphCLKConfig+0x119c>
        break;
 80035ae:	bf00      	nop
    }

    if (ret == HAL_OK)
 80035b0:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 80035b4:	2b00      	cmp	r3, #0
 80035b6:	d10d      	bne.n	80035d4 <HAL_RCCEx_PeriphCLKConfig+0x11c0>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80035b8:	4b05      	ldr	r3, [pc, #20]	; (80035d0 <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 80035ba:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80035bc:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80035c0:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80035c4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80035c8:	4a01      	ldr	r2, [pc, #4]	; (80035d0 <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 80035ca:	430b      	orrs	r3, r1
 80035cc:	6553      	str	r3, [r2, #84]	; 0x54
 80035ce:	e005      	b.n	80035dc <HAL_RCCEx_PeriphCLKConfig+0x11c8>
 80035d0:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80035d4:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 80035d8:	f887 312e 	strb.w	r3, [r7, #302]	; 0x12e
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80035dc:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80035e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80035e4:	f402 1380 	and.w	r3, r2, #1048576	; 0x100000
 80035e8:	65bb      	str	r3, [r7, #88]	; 0x58
 80035ea:	2300      	movs	r3, #0
 80035ec:	65fb      	str	r3, [r7, #92]	; 0x5c
 80035ee:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	; 0x58
 80035f2:	460b      	mov	r3, r1
 80035f4:	4313      	orrs	r3, r2
 80035f6:	d009      	beq.n	800360c <HAL_RCCEx_PeriphCLKConfig+0x11f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80035f8:	4baa      	ldr	r3, [pc, #680]	; (80038a4 <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 80035fa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80035fc:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8003600:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8003604:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003606:	4aa7      	ldr	r2, [pc, #668]	; (80038a4 <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 8003608:	430b      	orrs	r3, r1
 800360a:	6513      	str	r3, [r2, #80]	; 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 800360c:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8003610:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003614:	f002 5380 	and.w	r3, r2, #268435456	; 0x10000000
 8003618:	653b      	str	r3, [r7, #80]	; 0x50
 800361a:	2300      	movs	r3, #0
 800361c:	657b      	str	r3, [r7, #84]	; 0x54
 800361e:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	; 0x50
 8003622:	460b      	mov	r3, r1
 8003624:	4313      	orrs	r3, r2
 8003626:	d00a      	beq.n	800363e <HAL_RCCEx_PeriphCLKConfig+0x122a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 8003628:	4b9e      	ldr	r3, [pc, #632]	; (80038a4 <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 800362a:	691b      	ldr	r3, [r3, #16]
 800362c:	f423 4180 	bic.w	r1, r3, #16384	; 0x4000
 8003630:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8003634:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8003638:	4a9a      	ldr	r2, [pc, #616]	; (80038a4 <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 800363a:	430b      	orrs	r3, r1
 800363c:	6113      	str	r3, [r2, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800363e:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8003642:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003646:	f402 1300 	and.w	r3, r2, #2097152	; 0x200000
 800364a:	64bb      	str	r3, [r7, #72]	; 0x48
 800364c:	2300      	movs	r3, #0
 800364e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003650:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	; 0x48
 8003654:	460b      	mov	r3, r1
 8003656:	4313      	orrs	r3, r2
 8003658:	d009      	beq.n	800366e <HAL_RCCEx_PeriphCLKConfig+0x125a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800365a:	4b92      	ldr	r3, [pc, #584]	; (80038a4 <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 800365c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800365e:	f023 7180 	bic.w	r1, r3, #16777216	; 0x1000000
 8003662:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8003666:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003668:	4a8e      	ldr	r2, [pc, #568]	; (80038a4 <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 800366a:	430b      	orrs	r3, r1
 800366c:	6513      	str	r3, [r2, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 800366e:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8003672:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003676:	f002 4380 	and.w	r3, r2, #1073741824	; 0x40000000
 800367a:	643b      	str	r3, [r7, #64]	; 0x40
 800367c:	2300      	movs	r3, #0
 800367e:	647b      	str	r3, [r7, #68]	; 0x44
 8003680:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	; 0x40
 8003684:	460b      	mov	r3, r1
 8003686:	4313      	orrs	r3, r2
 8003688:	d00e      	beq.n	80036a8 <HAL_RCCEx_PeriphCLKConfig+0x1294>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800368a:	4b86      	ldr	r3, [pc, #536]	; (80038a4 <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 800368c:	691b      	ldr	r3, [r3, #16]
 800368e:	4a85      	ldr	r2, [pc, #532]	; (80038a4 <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 8003690:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8003694:	6113      	str	r3, [r2, #16]
 8003696:	4b83      	ldr	r3, [pc, #524]	; (80038a4 <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 8003698:	6919      	ldr	r1, [r3, #16]
 800369a:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800369e:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 80036a2:	4a80      	ldr	r2, [pc, #512]	; (80038a4 <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 80036a4:	430b      	orrs	r3, r1
 80036a6:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 80036a8:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80036ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80036b0:	f002 4300 	and.w	r3, r2, #2147483648	; 0x80000000
 80036b4:	63bb      	str	r3, [r7, #56]	; 0x38
 80036b6:	2300      	movs	r3, #0
 80036b8:	63fb      	str	r3, [r7, #60]	; 0x3c
 80036ba:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	; 0x38
 80036be:	460b      	mov	r3, r1
 80036c0:	4313      	orrs	r3, r2
 80036c2:	d009      	beq.n	80036d8 <HAL_RCCEx_PeriphCLKConfig+0x12c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 80036c4:	4b77      	ldr	r3, [pc, #476]	; (80038a4 <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 80036c6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80036c8:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 80036cc:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80036d0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80036d2:	4a74      	ldr	r2, [pc, #464]	; (80038a4 <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 80036d4:	430b      	orrs	r3, r1
 80036d6:	64d3      	str	r3, [r2, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80036d8:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80036dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80036e0:	f402 0300 	and.w	r3, r2, #8388608	; 0x800000
 80036e4:	633b      	str	r3, [r7, #48]	; 0x30
 80036e6:	2300      	movs	r3, #0
 80036e8:	637b      	str	r3, [r7, #52]	; 0x34
 80036ea:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	; 0x30
 80036ee:	460b      	mov	r3, r1
 80036f0:	4313      	orrs	r3, r2
 80036f2:	d00a      	beq.n	800370a <HAL_RCCEx_PeriphCLKConfig+0x12f6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80036f4:	4b6b      	ldr	r3, [pc, #428]	; (80038a4 <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 80036f6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80036f8:	f423 0140 	bic.w	r1, r3, #12582912	; 0xc00000
 80036fc:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8003700:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003704:	4a67      	ldr	r2, [pc, #412]	; (80038a4 <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 8003706:	430b      	orrs	r3, r1
 8003708:	6553      	str	r3, [r2, #84]	; 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 800370a:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800370e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003712:	2100      	movs	r1, #0
 8003714:	62b9      	str	r1, [r7, #40]	; 0x28
 8003716:	f003 0301 	and.w	r3, r3, #1
 800371a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800371c:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	; 0x28
 8003720:	460b      	mov	r3, r1
 8003722:	4313      	orrs	r3, r2
 8003724:	d011      	beq.n	800374a <HAL_RCCEx_PeriphCLKConfig+0x1336>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003726:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800372a:	3308      	adds	r3, #8
 800372c:	2100      	movs	r1, #0
 800372e:	4618      	mov	r0, r3
 8003730:	f000 fb78 	bl	8003e24 <RCCEx_PLL2_Config>
 8003734:	4603      	mov	r3, r0
 8003736:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
    
    if (ret == HAL_OK)
 800373a:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 800373e:	2b00      	cmp	r3, #0
 8003740:	d003      	beq.n	800374a <HAL_RCCEx_PeriphCLKConfig+0x1336>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003742:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8003746:	f887 312e 	strb.w	r3, [r7, #302]	; 0x12e
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 800374a:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800374e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003752:	2100      	movs	r1, #0
 8003754:	6239      	str	r1, [r7, #32]
 8003756:	f003 0302 	and.w	r3, r3, #2
 800375a:	627b      	str	r3, [r7, #36]	; 0x24
 800375c:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8003760:	460b      	mov	r3, r1
 8003762:	4313      	orrs	r3, r2
 8003764:	d011      	beq.n	800378a <HAL_RCCEx_PeriphCLKConfig+0x1376>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8003766:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800376a:	3308      	adds	r3, #8
 800376c:	2101      	movs	r1, #1
 800376e:	4618      	mov	r0, r3
 8003770:	f000 fb58 	bl	8003e24 <RCCEx_PLL2_Config>
 8003774:	4603      	mov	r3, r0
 8003776:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
    
    if (ret == HAL_OK)
 800377a:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 800377e:	2b00      	cmp	r3, #0
 8003780:	d003      	beq.n	800378a <HAL_RCCEx_PeriphCLKConfig+0x1376>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003782:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8003786:	f887 312e 	strb.w	r3, [r7, #302]	; 0x12e
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 800378a:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800378e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003792:	2100      	movs	r1, #0
 8003794:	61b9      	str	r1, [r7, #24]
 8003796:	f003 0304 	and.w	r3, r3, #4
 800379a:	61fb      	str	r3, [r7, #28]
 800379c:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 80037a0:	460b      	mov	r3, r1
 80037a2:	4313      	orrs	r3, r2
 80037a4:	d011      	beq.n	80037ca <HAL_RCCEx_PeriphCLKConfig+0x13b6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80037a6:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80037aa:	3308      	adds	r3, #8
 80037ac:	2102      	movs	r1, #2
 80037ae:	4618      	mov	r0, r3
 80037b0:	f000 fb38 	bl	8003e24 <RCCEx_PLL2_Config>
 80037b4:	4603      	mov	r3, r0
 80037b6:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
    
    if (ret == HAL_OK)
 80037ba:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 80037be:	2b00      	cmp	r3, #0
 80037c0:	d003      	beq.n	80037ca <HAL_RCCEx_PeriphCLKConfig+0x13b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80037c2:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 80037c6:	f887 312e 	strb.w	r3, [r7, #302]	; 0x12e
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 80037ca:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80037ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80037d2:	2100      	movs	r1, #0
 80037d4:	6139      	str	r1, [r7, #16]
 80037d6:	f003 0308 	and.w	r3, r3, #8
 80037da:	617b      	str	r3, [r7, #20]
 80037dc:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 80037e0:	460b      	mov	r3, r1
 80037e2:	4313      	orrs	r3, r2
 80037e4:	d011      	beq.n	800380a <HAL_RCCEx_PeriphCLKConfig+0x13f6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80037e6:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80037ea:	3328      	adds	r3, #40	; 0x28
 80037ec:	2100      	movs	r1, #0
 80037ee:	4618      	mov	r0, r3
 80037f0:	f000 fbca 	bl	8003f88 <RCCEx_PLL3_Config>
 80037f4:	4603      	mov	r3, r0
 80037f6:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
  
    if (ret == HAL_OK)
 80037fa:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 80037fe:	2b00      	cmp	r3, #0
 8003800:	d003      	beq.n	800380a <HAL_RCCEx_PeriphCLKConfig+0x13f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003802:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8003806:	f887 312e 	strb.w	r3, [r7, #302]	; 0x12e
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 800380a:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800380e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003812:	2100      	movs	r1, #0
 8003814:	60b9      	str	r1, [r7, #8]
 8003816:	f003 0310 	and.w	r3, r3, #16
 800381a:	60fb      	str	r3, [r7, #12]
 800381c:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8003820:	460b      	mov	r3, r1
 8003822:	4313      	orrs	r3, r2
 8003824:	d011      	beq.n	800384a <HAL_RCCEx_PeriphCLKConfig+0x1436>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8003826:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800382a:	3328      	adds	r3, #40	; 0x28
 800382c:	2101      	movs	r1, #1
 800382e:	4618      	mov	r0, r3
 8003830:	f000 fbaa 	bl	8003f88 <RCCEx_PLL3_Config>
 8003834:	4603      	mov	r3, r0
 8003836:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
    
    if (ret == HAL_OK)
 800383a:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 800383e:	2b00      	cmp	r3, #0
 8003840:	d003      	beq.n	800384a <HAL_RCCEx_PeriphCLKConfig+0x1436>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003842:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8003846:	f887 312e 	strb.w	r3, [r7, #302]	; 0x12e
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 800384a:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800384e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003852:	2100      	movs	r1, #0
 8003854:	6039      	str	r1, [r7, #0]
 8003856:	f003 0320 	and.w	r3, r3, #32
 800385a:	607b      	str	r3, [r7, #4]
 800385c:	e9d7 1200 	ldrd	r1, r2, [r7]
 8003860:	460b      	mov	r3, r1
 8003862:	4313      	orrs	r3, r2
 8003864:	d011      	beq.n	800388a <HAL_RCCEx_PeriphCLKConfig+0x1476>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8003866:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800386a:	3328      	adds	r3, #40	; 0x28
 800386c:	2102      	movs	r1, #2
 800386e:	4618      	mov	r0, r3
 8003870:	f000 fb8a 	bl	8003f88 <RCCEx_PLL3_Config>
 8003874:	4603      	mov	r3, r0
 8003876:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
    
    if (ret == HAL_OK)
 800387a:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 800387e:	2b00      	cmp	r3, #0
 8003880:	d003      	beq.n	800388a <HAL_RCCEx_PeriphCLKConfig+0x1476>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003882:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8003886:	f887 312e 	strb.w	r3, [r7, #302]	; 0x12e
    } 
  }

  if (status == HAL_OK)
 800388a:	f897 312e 	ldrb.w	r3, [r7, #302]	; 0x12e
 800388e:	2b00      	cmp	r3, #0
 8003890:	d101      	bne.n	8003896 <HAL_RCCEx_PeriphCLKConfig+0x1482>
  {
    return HAL_OK;
 8003892:	2300      	movs	r3, #0
 8003894:	e000      	b.n	8003898 <HAL_RCCEx_PeriphCLKConfig+0x1484>
  }
  return HAL_ERROR;
 8003896:	2301      	movs	r3, #1
}
 8003898:	4618      	mov	r0, r3
 800389a:	f507 7798 	add.w	r7, r7, #304	; 0x130
 800389e:	46bd      	mov	sp, r7
 80038a0:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80038a4:	58024400 	.word	0x58024400

080038a8 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 80038a8:	b580      	push	{r7, lr}
 80038aa:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 80038ac:	f7fe fd56 	bl	800235c <HAL_RCC_GetHCLKFreq>
 80038b0:	4602      	mov	r2, r0
 80038b2:	4b06      	ldr	r3, [pc, #24]	; (80038cc <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 80038b4:	6a1b      	ldr	r3, [r3, #32]
 80038b6:	091b      	lsrs	r3, r3, #4
 80038b8:	f003 0307 	and.w	r3, r3, #7
 80038bc:	4904      	ldr	r1, [pc, #16]	; (80038d0 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 80038be:	5ccb      	ldrb	r3, [r1, r3]
 80038c0:	f003 031f 	and.w	r3, r3, #31
 80038c4:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 80038c8:	4618      	mov	r0, r3
 80038ca:	bd80      	pop	{r7, pc}
 80038cc:	58024400 	.word	0x58024400
 80038d0:	08005308 	.word	0x08005308

080038d4 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 80038d4:	b480      	push	{r7}
 80038d6:	b089      	sub	sp, #36	; 0x24
 80038d8:	af00      	add	r7, sp, #0
 80038da:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80038dc:	4ba1      	ldr	r3, [pc, #644]	; (8003b64 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80038de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80038e0:	f003 0303 	and.w	r3, r3, #3
 80038e4:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 80038e6:	4b9f      	ldr	r3, [pc, #636]	; (8003b64 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80038e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80038ea:	0b1b      	lsrs	r3, r3, #12
 80038ec:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80038f0:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 80038f2:	4b9c      	ldr	r3, [pc, #624]	; (8003b64 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80038f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80038f6:	091b      	lsrs	r3, r3, #4
 80038f8:	f003 0301 	and.w	r3, r3, #1
 80038fc:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 80038fe:	4b99      	ldr	r3, [pc, #612]	; (8003b64 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003900:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003902:	08db      	lsrs	r3, r3, #3
 8003904:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8003908:	693a      	ldr	r2, [r7, #16]
 800390a:	fb02 f303 	mul.w	r3, r2, r3
 800390e:	ee07 3a90 	vmov	s15, r3
 8003912:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003916:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 800391a:	697b      	ldr	r3, [r7, #20]
 800391c:	2b00      	cmp	r3, #0
 800391e:	f000 8111 	beq.w	8003b44 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 8003922:	69bb      	ldr	r3, [r7, #24]
 8003924:	2b02      	cmp	r3, #2
 8003926:	f000 8083 	beq.w	8003a30 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 800392a:	69bb      	ldr	r3, [r7, #24]
 800392c:	2b02      	cmp	r3, #2
 800392e:	f200 80a1 	bhi.w	8003a74 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 8003932:	69bb      	ldr	r3, [r7, #24]
 8003934:	2b00      	cmp	r3, #0
 8003936:	d003      	beq.n	8003940 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8003938:	69bb      	ldr	r3, [r7, #24]
 800393a:	2b01      	cmp	r3, #1
 800393c:	d056      	beq.n	80039ec <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 800393e:	e099      	b.n	8003a74 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8003940:	4b88      	ldr	r3, [pc, #544]	; (8003b64 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003942:	681b      	ldr	r3, [r3, #0]
 8003944:	f003 0320 	and.w	r3, r3, #32
 8003948:	2b00      	cmp	r3, #0
 800394a:	d02d      	beq.n	80039a8 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800394c:	4b85      	ldr	r3, [pc, #532]	; (8003b64 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800394e:	681b      	ldr	r3, [r3, #0]
 8003950:	08db      	lsrs	r3, r3, #3
 8003952:	f003 0303 	and.w	r3, r3, #3
 8003956:	4a84      	ldr	r2, [pc, #528]	; (8003b68 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8003958:	fa22 f303 	lsr.w	r3, r2, r3
 800395c:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800395e:	68bb      	ldr	r3, [r7, #8]
 8003960:	ee07 3a90 	vmov	s15, r3
 8003964:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003968:	697b      	ldr	r3, [r7, #20]
 800396a:	ee07 3a90 	vmov	s15, r3
 800396e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003972:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003976:	4b7b      	ldr	r3, [pc, #492]	; (8003b64 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003978:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800397a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800397e:	ee07 3a90 	vmov	s15, r3
 8003982:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003986:	ed97 6a03 	vldr	s12, [r7, #12]
 800398a:	eddf 5a78 	vldr	s11, [pc, #480]	; 8003b6c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800398e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003992:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003996:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800399a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800399e:	ee67 7a27 	vmul.f32	s15, s14, s15
 80039a2:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 80039a6:	e087      	b.n	8003ab8 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80039a8:	697b      	ldr	r3, [r7, #20]
 80039aa:	ee07 3a90 	vmov	s15, r3
 80039ae:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80039b2:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8003b70 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 80039b6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80039ba:	4b6a      	ldr	r3, [pc, #424]	; (8003b64 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80039bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80039be:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80039c2:	ee07 3a90 	vmov	s15, r3
 80039c6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80039ca:	ed97 6a03 	vldr	s12, [r7, #12]
 80039ce:	eddf 5a67 	vldr	s11, [pc, #412]	; 8003b6c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80039d2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80039d6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80039da:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80039de:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80039e2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80039e6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80039ea:	e065      	b.n	8003ab8 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80039ec:	697b      	ldr	r3, [r7, #20]
 80039ee:	ee07 3a90 	vmov	s15, r3
 80039f2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80039f6:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8003b74 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 80039fa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80039fe:	4b59      	ldr	r3, [pc, #356]	; (8003b64 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003a00:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a02:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003a06:	ee07 3a90 	vmov	s15, r3
 8003a0a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003a0e:	ed97 6a03 	vldr	s12, [r7, #12]
 8003a12:	eddf 5a56 	vldr	s11, [pc, #344]	; 8003b6c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8003a16:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003a1a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003a1e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003a22:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003a26:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003a2a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8003a2e:	e043      	b.n	8003ab8 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8003a30:	697b      	ldr	r3, [r7, #20]
 8003a32:	ee07 3a90 	vmov	s15, r3
 8003a36:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003a3a:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8003b78 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 8003a3e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003a42:	4b48      	ldr	r3, [pc, #288]	; (8003b64 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003a44:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a46:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003a4a:	ee07 3a90 	vmov	s15, r3
 8003a4e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003a52:	ed97 6a03 	vldr	s12, [r7, #12]
 8003a56:	eddf 5a45 	vldr	s11, [pc, #276]	; 8003b6c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8003a5a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003a5e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003a62:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003a66:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003a6a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003a6e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8003a72:	e021      	b.n	8003ab8 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8003a74:	697b      	ldr	r3, [r7, #20]
 8003a76:	ee07 3a90 	vmov	s15, r3
 8003a7a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003a7e:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8003b74 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8003a82:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003a86:	4b37      	ldr	r3, [pc, #220]	; (8003b64 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003a88:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a8a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003a8e:	ee07 3a90 	vmov	s15, r3
 8003a92:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003a96:	ed97 6a03 	vldr	s12, [r7, #12]
 8003a9a:	eddf 5a34 	vldr	s11, [pc, #208]	; 8003b6c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8003a9e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003aa2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003aa6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003aaa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003aae:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003ab2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8003ab6:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 8003ab8:	4b2a      	ldr	r3, [pc, #168]	; (8003b64 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003aba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003abc:	0a5b      	lsrs	r3, r3, #9
 8003abe:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003ac2:	ee07 3a90 	vmov	s15, r3
 8003ac6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003aca:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8003ace:	ee37 7a87 	vadd.f32	s14, s15, s14
 8003ad2:	edd7 6a07 	vldr	s13, [r7, #28]
 8003ad6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003ada:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003ade:	ee17 2a90 	vmov	r2, s15
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 8003ae6:	4b1f      	ldr	r3, [pc, #124]	; (8003b64 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003ae8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003aea:	0c1b      	lsrs	r3, r3, #16
 8003aec:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003af0:	ee07 3a90 	vmov	s15, r3
 8003af4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003af8:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8003afc:	ee37 7a87 	vadd.f32	s14, s15, s14
 8003b00:	edd7 6a07 	vldr	s13, [r7, #28]
 8003b04:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003b08:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003b0c:	ee17 2a90 	vmov	r2, s15
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 8003b14:	4b13      	ldr	r3, [pc, #76]	; (8003b64 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003b16:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b18:	0e1b      	lsrs	r3, r3, #24
 8003b1a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003b1e:	ee07 3a90 	vmov	s15, r3
 8003b22:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003b26:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8003b2a:	ee37 7a87 	vadd.f32	s14, s15, s14
 8003b2e:	edd7 6a07 	vldr	s13, [r7, #28]
 8003b32:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003b36:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003b3a:	ee17 2a90 	vmov	r2, s15
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8003b42:	e008      	b.n	8003b56 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	2200      	movs	r2, #0
 8003b48:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	2200      	movs	r2, #0
 8003b4e:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	2200      	movs	r2, #0
 8003b54:	609a      	str	r2, [r3, #8]
}
 8003b56:	bf00      	nop
 8003b58:	3724      	adds	r7, #36	; 0x24
 8003b5a:	46bd      	mov	sp, r7
 8003b5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b60:	4770      	bx	lr
 8003b62:	bf00      	nop
 8003b64:	58024400 	.word	0x58024400
 8003b68:	03d09000 	.word	0x03d09000
 8003b6c:	46000000 	.word	0x46000000
 8003b70:	4c742400 	.word	0x4c742400
 8003b74:	4a742400 	.word	0x4a742400
 8003b78:	4bbebc20 	.word	0x4bbebc20

08003b7c <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 8003b7c:	b480      	push	{r7}
 8003b7e:	b089      	sub	sp, #36	; 0x24
 8003b80:	af00      	add	r7, sp, #0
 8003b82:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8003b84:	4ba1      	ldr	r3, [pc, #644]	; (8003e0c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003b86:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003b88:	f003 0303 	and.w	r3, r3, #3
 8003b8c:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 8003b8e:	4b9f      	ldr	r3, [pc, #636]	; (8003e0c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003b90:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003b92:	0d1b      	lsrs	r3, r3, #20
 8003b94:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003b98:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8003b9a:	4b9c      	ldr	r3, [pc, #624]	; (8003e0c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003b9c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b9e:	0a1b      	lsrs	r3, r3, #8
 8003ba0:	f003 0301 	and.w	r3, r3, #1
 8003ba4:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 8003ba6:	4b99      	ldr	r3, [pc, #612]	; (8003e0c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003ba8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003baa:	08db      	lsrs	r3, r3, #3
 8003bac:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8003bb0:	693a      	ldr	r2, [r7, #16]
 8003bb2:	fb02 f303 	mul.w	r3, r2, r3
 8003bb6:	ee07 3a90 	vmov	s15, r3
 8003bba:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003bbe:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8003bc2:	697b      	ldr	r3, [r7, #20]
 8003bc4:	2b00      	cmp	r3, #0
 8003bc6:	f000 8111 	beq.w	8003dec <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 8003bca:	69bb      	ldr	r3, [r7, #24]
 8003bcc:	2b02      	cmp	r3, #2
 8003bce:	f000 8083 	beq.w	8003cd8 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 8003bd2:	69bb      	ldr	r3, [r7, #24]
 8003bd4:	2b02      	cmp	r3, #2
 8003bd6:	f200 80a1 	bhi.w	8003d1c <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 8003bda:	69bb      	ldr	r3, [r7, #24]
 8003bdc:	2b00      	cmp	r3, #0
 8003bde:	d003      	beq.n	8003be8 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8003be0:	69bb      	ldr	r3, [r7, #24]
 8003be2:	2b01      	cmp	r3, #1
 8003be4:	d056      	beq.n	8003c94 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 8003be6:	e099      	b.n	8003d1c <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8003be8:	4b88      	ldr	r3, [pc, #544]	; (8003e0c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003bea:	681b      	ldr	r3, [r3, #0]
 8003bec:	f003 0320 	and.w	r3, r3, #32
 8003bf0:	2b00      	cmp	r3, #0
 8003bf2:	d02d      	beq.n	8003c50 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8003bf4:	4b85      	ldr	r3, [pc, #532]	; (8003e0c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003bf6:	681b      	ldr	r3, [r3, #0]
 8003bf8:	08db      	lsrs	r3, r3, #3
 8003bfa:	f003 0303 	and.w	r3, r3, #3
 8003bfe:	4a84      	ldr	r2, [pc, #528]	; (8003e10 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8003c00:	fa22 f303 	lsr.w	r3, r2, r3
 8003c04:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8003c06:	68bb      	ldr	r3, [r7, #8]
 8003c08:	ee07 3a90 	vmov	s15, r3
 8003c0c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003c10:	697b      	ldr	r3, [r7, #20]
 8003c12:	ee07 3a90 	vmov	s15, r3
 8003c16:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003c1a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003c1e:	4b7b      	ldr	r3, [pc, #492]	; (8003e0c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003c20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c22:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003c26:	ee07 3a90 	vmov	s15, r3
 8003c2a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003c2e:	ed97 6a03 	vldr	s12, [r7, #12]
 8003c32:	eddf 5a78 	vldr	s11, [pc, #480]	; 8003e14 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8003c36:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003c3a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003c3e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003c42:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003c46:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003c4a:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8003c4e:	e087      	b.n	8003d60 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8003c50:	697b      	ldr	r3, [r7, #20]
 8003c52:	ee07 3a90 	vmov	s15, r3
 8003c56:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003c5a:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8003e18 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 8003c5e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003c62:	4b6a      	ldr	r3, [pc, #424]	; (8003e0c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003c64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c66:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003c6a:	ee07 3a90 	vmov	s15, r3
 8003c6e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003c72:	ed97 6a03 	vldr	s12, [r7, #12]
 8003c76:	eddf 5a67 	vldr	s11, [pc, #412]	; 8003e14 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8003c7a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003c7e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003c82:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003c86:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003c8a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003c8e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8003c92:	e065      	b.n	8003d60 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8003c94:	697b      	ldr	r3, [r7, #20]
 8003c96:	ee07 3a90 	vmov	s15, r3
 8003c9a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003c9e:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8003e1c <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8003ca2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003ca6:	4b59      	ldr	r3, [pc, #356]	; (8003e0c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003ca8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003caa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003cae:	ee07 3a90 	vmov	s15, r3
 8003cb2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003cb6:	ed97 6a03 	vldr	s12, [r7, #12]
 8003cba:	eddf 5a56 	vldr	s11, [pc, #344]	; 8003e14 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8003cbe:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003cc2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003cc6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003cca:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003cce:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003cd2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8003cd6:	e043      	b.n	8003d60 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8003cd8:	697b      	ldr	r3, [r7, #20]
 8003cda:	ee07 3a90 	vmov	s15, r3
 8003cde:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003ce2:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8003e20 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 8003ce6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003cea:	4b48      	ldr	r3, [pc, #288]	; (8003e0c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003cec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003cee:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003cf2:	ee07 3a90 	vmov	s15, r3
 8003cf6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003cfa:	ed97 6a03 	vldr	s12, [r7, #12]
 8003cfe:	eddf 5a45 	vldr	s11, [pc, #276]	; 8003e14 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8003d02:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003d06:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003d0a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003d0e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003d12:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003d16:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8003d1a:	e021      	b.n	8003d60 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8003d1c:	697b      	ldr	r3, [r7, #20]
 8003d1e:	ee07 3a90 	vmov	s15, r3
 8003d22:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003d26:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8003e1c <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8003d2a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003d2e:	4b37      	ldr	r3, [pc, #220]	; (8003e0c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003d30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d32:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003d36:	ee07 3a90 	vmov	s15, r3
 8003d3a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003d3e:	ed97 6a03 	vldr	s12, [r7, #12]
 8003d42:	eddf 5a34 	vldr	s11, [pc, #208]	; 8003e14 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8003d46:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003d4a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003d4e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003d52:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003d56:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003d5a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8003d5e:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 8003d60:	4b2a      	ldr	r3, [pc, #168]	; (8003e0c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003d62:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d64:	0a5b      	lsrs	r3, r3, #9
 8003d66:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003d6a:	ee07 3a90 	vmov	s15, r3
 8003d6e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003d72:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8003d76:	ee37 7a87 	vadd.f32	s14, s15, s14
 8003d7a:	edd7 6a07 	vldr	s13, [r7, #28]
 8003d7e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003d82:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003d86:	ee17 2a90 	vmov	r2, s15
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 8003d8e:	4b1f      	ldr	r3, [pc, #124]	; (8003e0c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003d90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d92:	0c1b      	lsrs	r3, r3, #16
 8003d94:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003d98:	ee07 3a90 	vmov	s15, r3
 8003d9c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003da0:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8003da4:	ee37 7a87 	vadd.f32	s14, s15, s14
 8003da8:	edd7 6a07 	vldr	s13, [r7, #28]
 8003dac:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003db0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003db4:	ee17 2a90 	vmov	r2, s15
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 8003dbc:	4b13      	ldr	r3, [pc, #76]	; (8003e0c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003dbe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003dc0:	0e1b      	lsrs	r3, r3, #24
 8003dc2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003dc6:	ee07 3a90 	vmov	s15, r3
 8003dca:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003dce:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8003dd2:	ee37 7a87 	vadd.f32	s14, s15, s14
 8003dd6:	edd7 6a07 	vldr	s13, [r7, #28]
 8003dda:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003dde:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003de2:	ee17 2a90 	vmov	r2, s15
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8003dea:	e008      	b.n	8003dfe <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	2200      	movs	r2, #0
 8003df0:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	2200      	movs	r2, #0
 8003df6:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	2200      	movs	r2, #0
 8003dfc:	609a      	str	r2, [r3, #8]
}
 8003dfe:	bf00      	nop
 8003e00:	3724      	adds	r7, #36	; 0x24
 8003e02:	46bd      	mov	sp, r7
 8003e04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e08:	4770      	bx	lr
 8003e0a:	bf00      	nop
 8003e0c:	58024400 	.word	0x58024400
 8003e10:	03d09000 	.word	0x03d09000
 8003e14:	46000000 	.word	0x46000000
 8003e18:	4c742400 	.word	0x4c742400
 8003e1c:	4a742400 	.word	0x4a742400
 8003e20:	4bbebc20 	.word	0x4bbebc20

08003e24 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8003e24:	b580      	push	{r7, lr}
 8003e26:	b084      	sub	sp, #16
 8003e28:	af00      	add	r7, sp, #0
 8003e2a:	6078      	str	r0, [r7, #4]
 8003e2c:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003e2e:	2300      	movs	r3, #0
 8003e30:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8003e32:	4b53      	ldr	r3, [pc, #332]	; (8003f80 <RCCEx_PLL2_Config+0x15c>)
 8003e34:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e36:	f003 0303 	and.w	r3, r3, #3
 8003e3a:	2b03      	cmp	r3, #3
 8003e3c:	d101      	bne.n	8003e42 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8003e3e:	2301      	movs	r3, #1
 8003e40:	e099      	b.n	8003f76 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8003e42:	4b4f      	ldr	r3, [pc, #316]	; (8003f80 <RCCEx_PLL2_Config+0x15c>)
 8003e44:	681b      	ldr	r3, [r3, #0]
 8003e46:	4a4e      	ldr	r2, [pc, #312]	; (8003f80 <RCCEx_PLL2_Config+0x15c>)
 8003e48:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8003e4c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003e4e:	f7fc ff5d 	bl	8000d0c <HAL_GetTick>
 8003e52:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8003e54:	e008      	b.n	8003e68 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8003e56:	f7fc ff59 	bl	8000d0c <HAL_GetTick>
 8003e5a:	4602      	mov	r2, r0
 8003e5c:	68bb      	ldr	r3, [r7, #8]
 8003e5e:	1ad3      	subs	r3, r2, r3
 8003e60:	2b02      	cmp	r3, #2
 8003e62:	d901      	bls.n	8003e68 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8003e64:	2303      	movs	r3, #3
 8003e66:	e086      	b.n	8003f76 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8003e68:	4b45      	ldr	r3, [pc, #276]	; (8003f80 <RCCEx_PLL2_Config+0x15c>)
 8003e6a:	681b      	ldr	r3, [r3, #0]
 8003e6c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003e70:	2b00      	cmp	r3, #0
 8003e72:	d1f0      	bne.n	8003e56 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8003e74:	4b42      	ldr	r3, [pc, #264]	; (8003f80 <RCCEx_PLL2_Config+0x15c>)
 8003e76:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e78:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	681b      	ldr	r3, [r3, #0]
 8003e80:	031b      	lsls	r3, r3, #12
 8003e82:	493f      	ldr	r1, [pc, #252]	; (8003f80 <RCCEx_PLL2_Config+0x15c>)
 8003e84:	4313      	orrs	r3, r2
 8003e86:	628b      	str	r3, [r1, #40]	; 0x28
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	685b      	ldr	r3, [r3, #4]
 8003e8c:	3b01      	subs	r3, #1
 8003e8e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	689b      	ldr	r3, [r3, #8]
 8003e96:	3b01      	subs	r3, #1
 8003e98:	025b      	lsls	r3, r3, #9
 8003e9a:	b29b      	uxth	r3, r3
 8003e9c:	431a      	orrs	r2, r3
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	68db      	ldr	r3, [r3, #12]
 8003ea2:	3b01      	subs	r3, #1
 8003ea4:	041b      	lsls	r3, r3, #16
 8003ea6:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8003eaa:	431a      	orrs	r2, r3
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	691b      	ldr	r3, [r3, #16]
 8003eb0:	3b01      	subs	r3, #1
 8003eb2:	061b      	lsls	r3, r3, #24
 8003eb4:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8003eb8:	4931      	ldr	r1, [pc, #196]	; (8003f80 <RCCEx_PLL2_Config+0x15c>)
 8003eba:	4313      	orrs	r3, r2
 8003ebc:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8003ebe:	4b30      	ldr	r3, [pc, #192]	; (8003f80 <RCCEx_PLL2_Config+0x15c>)
 8003ec0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ec2:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	695b      	ldr	r3, [r3, #20]
 8003eca:	492d      	ldr	r1, [pc, #180]	; (8003f80 <RCCEx_PLL2_Config+0x15c>)
 8003ecc:	4313      	orrs	r3, r2
 8003ece:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8003ed0:	4b2b      	ldr	r3, [pc, #172]	; (8003f80 <RCCEx_PLL2_Config+0x15c>)
 8003ed2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ed4:	f023 0220 	bic.w	r2, r3, #32
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	699b      	ldr	r3, [r3, #24]
 8003edc:	4928      	ldr	r1, [pc, #160]	; (8003f80 <RCCEx_PLL2_Config+0x15c>)
 8003ede:	4313      	orrs	r3, r2
 8003ee0:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8003ee2:	4b27      	ldr	r3, [pc, #156]	; (8003f80 <RCCEx_PLL2_Config+0x15c>)
 8003ee4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ee6:	4a26      	ldr	r2, [pc, #152]	; (8003f80 <RCCEx_PLL2_Config+0x15c>)
 8003ee8:	f023 0310 	bic.w	r3, r3, #16
 8003eec:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8003eee:	4b24      	ldr	r3, [pc, #144]	; (8003f80 <RCCEx_PLL2_Config+0x15c>)
 8003ef0:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003ef2:	4b24      	ldr	r3, [pc, #144]	; (8003f84 <RCCEx_PLL2_Config+0x160>)
 8003ef4:	4013      	ands	r3, r2
 8003ef6:	687a      	ldr	r2, [r7, #4]
 8003ef8:	69d2      	ldr	r2, [r2, #28]
 8003efa:	00d2      	lsls	r2, r2, #3
 8003efc:	4920      	ldr	r1, [pc, #128]	; (8003f80 <RCCEx_PLL2_Config+0x15c>)
 8003efe:	4313      	orrs	r3, r2
 8003f00:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8003f02:	4b1f      	ldr	r3, [pc, #124]	; (8003f80 <RCCEx_PLL2_Config+0x15c>)
 8003f04:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f06:	4a1e      	ldr	r2, [pc, #120]	; (8003f80 <RCCEx_PLL2_Config+0x15c>)
 8003f08:	f043 0310 	orr.w	r3, r3, #16
 8003f0c:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8003f0e:	683b      	ldr	r3, [r7, #0]
 8003f10:	2b00      	cmp	r3, #0
 8003f12:	d106      	bne.n	8003f22 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8003f14:	4b1a      	ldr	r3, [pc, #104]	; (8003f80 <RCCEx_PLL2_Config+0x15c>)
 8003f16:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f18:	4a19      	ldr	r2, [pc, #100]	; (8003f80 <RCCEx_PLL2_Config+0x15c>)
 8003f1a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8003f1e:	62d3      	str	r3, [r2, #44]	; 0x2c
 8003f20:	e00f      	b.n	8003f42 <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8003f22:	683b      	ldr	r3, [r7, #0]
 8003f24:	2b01      	cmp	r3, #1
 8003f26:	d106      	bne.n	8003f36 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8003f28:	4b15      	ldr	r3, [pc, #84]	; (8003f80 <RCCEx_PLL2_Config+0x15c>)
 8003f2a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f2c:	4a14      	ldr	r2, [pc, #80]	; (8003f80 <RCCEx_PLL2_Config+0x15c>)
 8003f2e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003f32:	62d3      	str	r3, [r2, #44]	; 0x2c
 8003f34:	e005      	b.n	8003f42 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8003f36:	4b12      	ldr	r3, [pc, #72]	; (8003f80 <RCCEx_PLL2_Config+0x15c>)
 8003f38:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f3a:	4a11      	ldr	r2, [pc, #68]	; (8003f80 <RCCEx_PLL2_Config+0x15c>)
 8003f3c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8003f40:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8003f42:	4b0f      	ldr	r3, [pc, #60]	; (8003f80 <RCCEx_PLL2_Config+0x15c>)
 8003f44:	681b      	ldr	r3, [r3, #0]
 8003f46:	4a0e      	ldr	r2, [pc, #56]	; (8003f80 <RCCEx_PLL2_Config+0x15c>)
 8003f48:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8003f4c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003f4e:	f7fc fedd 	bl	8000d0c <HAL_GetTick>
 8003f52:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8003f54:	e008      	b.n	8003f68 <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8003f56:	f7fc fed9 	bl	8000d0c <HAL_GetTick>
 8003f5a:	4602      	mov	r2, r0
 8003f5c:	68bb      	ldr	r3, [r7, #8]
 8003f5e:	1ad3      	subs	r3, r2, r3
 8003f60:	2b02      	cmp	r3, #2
 8003f62:	d901      	bls.n	8003f68 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8003f64:	2303      	movs	r3, #3
 8003f66:	e006      	b.n	8003f76 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8003f68:	4b05      	ldr	r3, [pc, #20]	; (8003f80 <RCCEx_PLL2_Config+0x15c>)
 8003f6a:	681b      	ldr	r3, [r3, #0]
 8003f6c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003f70:	2b00      	cmp	r3, #0
 8003f72:	d0f0      	beq.n	8003f56 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8003f74:	7bfb      	ldrb	r3, [r7, #15]
}
 8003f76:	4618      	mov	r0, r3
 8003f78:	3710      	adds	r7, #16
 8003f7a:	46bd      	mov	sp, r7
 8003f7c:	bd80      	pop	{r7, pc}
 8003f7e:	bf00      	nop
 8003f80:	58024400 	.word	0x58024400
 8003f84:	ffff0007 	.word	0xffff0007

08003f88 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8003f88:	b580      	push	{r7, lr}
 8003f8a:	b084      	sub	sp, #16
 8003f8c:	af00      	add	r7, sp, #0
 8003f8e:	6078      	str	r0, [r7, #4]
 8003f90:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003f92:	2300      	movs	r3, #0
 8003f94:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8003f96:	4b53      	ldr	r3, [pc, #332]	; (80040e4 <RCCEx_PLL3_Config+0x15c>)
 8003f98:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f9a:	f003 0303 	and.w	r3, r3, #3
 8003f9e:	2b03      	cmp	r3, #3
 8003fa0:	d101      	bne.n	8003fa6 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8003fa2:	2301      	movs	r3, #1
 8003fa4:	e099      	b.n	80040da <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8003fa6:	4b4f      	ldr	r3, [pc, #316]	; (80040e4 <RCCEx_PLL3_Config+0x15c>)
 8003fa8:	681b      	ldr	r3, [r3, #0]
 8003faa:	4a4e      	ldr	r2, [pc, #312]	; (80040e4 <RCCEx_PLL3_Config+0x15c>)
 8003fac:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003fb0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003fb2:	f7fc feab 	bl	8000d0c <HAL_GetTick>
 8003fb6:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8003fb8:	e008      	b.n	8003fcc <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8003fba:	f7fc fea7 	bl	8000d0c <HAL_GetTick>
 8003fbe:	4602      	mov	r2, r0
 8003fc0:	68bb      	ldr	r3, [r7, #8]
 8003fc2:	1ad3      	subs	r3, r2, r3
 8003fc4:	2b02      	cmp	r3, #2
 8003fc6:	d901      	bls.n	8003fcc <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8003fc8:	2303      	movs	r3, #3
 8003fca:	e086      	b.n	80040da <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8003fcc:	4b45      	ldr	r3, [pc, #276]	; (80040e4 <RCCEx_PLL3_Config+0x15c>)
 8003fce:	681b      	ldr	r3, [r3, #0]
 8003fd0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003fd4:	2b00      	cmp	r3, #0
 8003fd6:	d1f0      	bne.n	8003fba <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8003fd8:	4b42      	ldr	r3, [pc, #264]	; (80040e4 <RCCEx_PLL3_Config+0x15c>)
 8003fda:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003fdc:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	681b      	ldr	r3, [r3, #0]
 8003fe4:	051b      	lsls	r3, r3, #20
 8003fe6:	493f      	ldr	r1, [pc, #252]	; (80040e4 <RCCEx_PLL3_Config+0x15c>)
 8003fe8:	4313      	orrs	r3, r2
 8003fea:	628b      	str	r3, [r1, #40]	; 0x28
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	685b      	ldr	r3, [r3, #4]
 8003ff0:	3b01      	subs	r3, #1
 8003ff2:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	689b      	ldr	r3, [r3, #8]
 8003ffa:	3b01      	subs	r3, #1
 8003ffc:	025b      	lsls	r3, r3, #9
 8003ffe:	b29b      	uxth	r3, r3
 8004000:	431a      	orrs	r2, r3
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	68db      	ldr	r3, [r3, #12]
 8004006:	3b01      	subs	r3, #1
 8004008:	041b      	lsls	r3, r3, #16
 800400a:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800400e:	431a      	orrs	r2, r3
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	691b      	ldr	r3, [r3, #16]
 8004014:	3b01      	subs	r3, #1
 8004016:	061b      	lsls	r3, r3, #24
 8004018:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800401c:	4931      	ldr	r1, [pc, #196]	; (80040e4 <RCCEx_PLL3_Config+0x15c>)
 800401e:	4313      	orrs	r3, r2
 8004020:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8004022:	4b30      	ldr	r3, [pc, #192]	; (80040e4 <RCCEx_PLL3_Config+0x15c>)
 8004024:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004026:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	695b      	ldr	r3, [r3, #20]
 800402e:	492d      	ldr	r1, [pc, #180]	; (80040e4 <RCCEx_PLL3_Config+0x15c>)
 8004030:	4313      	orrs	r3, r2
 8004032:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8004034:	4b2b      	ldr	r3, [pc, #172]	; (80040e4 <RCCEx_PLL3_Config+0x15c>)
 8004036:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004038:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	699b      	ldr	r3, [r3, #24]
 8004040:	4928      	ldr	r1, [pc, #160]	; (80040e4 <RCCEx_PLL3_Config+0x15c>)
 8004042:	4313      	orrs	r3, r2
 8004044:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8004046:	4b27      	ldr	r3, [pc, #156]	; (80040e4 <RCCEx_PLL3_Config+0x15c>)
 8004048:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800404a:	4a26      	ldr	r2, [pc, #152]	; (80040e4 <RCCEx_PLL3_Config+0x15c>)
 800404c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004050:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8004052:	4b24      	ldr	r3, [pc, #144]	; (80040e4 <RCCEx_PLL3_Config+0x15c>)
 8004054:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004056:	4b24      	ldr	r3, [pc, #144]	; (80040e8 <RCCEx_PLL3_Config+0x160>)
 8004058:	4013      	ands	r3, r2
 800405a:	687a      	ldr	r2, [r7, #4]
 800405c:	69d2      	ldr	r2, [r2, #28]
 800405e:	00d2      	lsls	r2, r2, #3
 8004060:	4920      	ldr	r1, [pc, #128]	; (80040e4 <RCCEx_PLL3_Config+0x15c>)
 8004062:	4313      	orrs	r3, r2
 8004064:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8004066:	4b1f      	ldr	r3, [pc, #124]	; (80040e4 <RCCEx_PLL3_Config+0x15c>)
 8004068:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800406a:	4a1e      	ldr	r2, [pc, #120]	; (80040e4 <RCCEx_PLL3_Config+0x15c>)
 800406c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004070:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8004072:	683b      	ldr	r3, [r7, #0]
 8004074:	2b00      	cmp	r3, #0
 8004076:	d106      	bne.n	8004086 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8004078:	4b1a      	ldr	r3, [pc, #104]	; (80040e4 <RCCEx_PLL3_Config+0x15c>)
 800407a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800407c:	4a19      	ldr	r2, [pc, #100]	; (80040e4 <RCCEx_PLL3_Config+0x15c>)
 800407e:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8004082:	62d3      	str	r3, [r2, #44]	; 0x2c
 8004084:	e00f      	b.n	80040a6 <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8004086:	683b      	ldr	r3, [r7, #0]
 8004088:	2b01      	cmp	r3, #1
 800408a:	d106      	bne.n	800409a <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 800408c:	4b15      	ldr	r3, [pc, #84]	; (80040e4 <RCCEx_PLL3_Config+0x15c>)
 800408e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004090:	4a14      	ldr	r2, [pc, #80]	; (80040e4 <RCCEx_PLL3_Config+0x15c>)
 8004092:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8004096:	62d3      	str	r3, [r2, #44]	; 0x2c
 8004098:	e005      	b.n	80040a6 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 800409a:	4b12      	ldr	r3, [pc, #72]	; (80040e4 <RCCEx_PLL3_Config+0x15c>)
 800409c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800409e:	4a11      	ldr	r2, [pc, #68]	; (80040e4 <RCCEx_PLL3_Config+0x15c>)
 80040a0:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80040a4:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 80040a6:	4b0f      	ldr	r3, [pc, #60]	; (80040e4 <RCCEx_PLL3_Config+0x15c>)
 80040a8:	681b      	ldr	r3, [r3, #0]
 80040aa:	4a0e      	ldr	r2, [pc, #56]	; (80040e4 <RCCEx_PLL3_Config+0x15c>)
 80040ac:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80040b0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80040b2:	f7fc fe2b 	bl	8000d0c <HAL_GetTick>
 80040b6:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 80040b8:	e008      	b.n	80040cc <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 80040ba:	f7fc fe27 	bl	8000d0c <HAL_GetTick>
 80040be:	4602      	mov	r2, r0
 80040c0:	68bb      	ldr	r3, [r7, #8]
 80040c2:	1ad3      	subs	r3, r2, r3
 80040c4:	2b02      	cmp	r3, #2
 80040c6:	d901      	bls.n	80040cc <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 80040c8:	2303      	movs	r3, #3
 80040ca:	e006      	b.n	80040da <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 80040cc:	4b05      	ldr	r3, [pc, #20]	; (80040e4 <RCCEx_PLL3_Config+0x15c>)
 80040ce:	681b      	ldr	r3, [r3, #0]
 80040d0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80040d4:	2b00      	cmp	r3, #0
 80040d6:	d0f0      	beq.n	80040ba <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 80040d8:	7bfb      	ldrb	r3, [r7, #15]
}
 80040da:	4618      	mov	r0, r3
 80040dc:	3710      	adds	r7, #16
 80040de:	46bd      	mov	sp, r7
 80040e0:	bd80      	pop	{r7, pc}
 80040e2:	bf00      	nop
 80040e4:	58024400 	.word	0x58024400
 80040e8:	ffff0007 	.word	0xffff0007

080040ec <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80040ec:	b580      	push	{r7, lr}
 80040ee:	b082      	sub	sp, #8
 80040f0:	af00      	add	r7, sp, #0
 80040f2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	2b00      	cmp	r3, #0
 80040f8:	d101      	bne.n	80040fe <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80040fa:	2301      	movs	r3, #1
 80040fc:	e042      	b.n	8004184 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004104:	2b00      	cmp	r3, #0
 8004106:	d106      	bne.n	8004116 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	2200      	movs	r2, #0
 800410c:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004110:	6878      	ldr	r0, [r7, #4]
 8004112:	f7fc fcb7 	bl	8000a84 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	2224      	movs	r2, #36	; 0x24
 800411a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	681b      	ldr	r3, [r3, #0]
 8004122:	681a      	ldr	r2, [r3, #0]
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	681b      	ldr	r3, [r3, #0]
 8004128:	f022 0201 	bic.w	r2, r2, #1
 800412c:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800412e:	6878      	ldr	r0, [r7, #4]
 8004130:	f000 f82c 	bl	800418c <UART_SetConfig>
 8004134:	4603      	mov	r3, r0
 8004136:	2b01      	cmp	r3, #1
 8004138:	d101      	bne.n	800413e <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 800413a:	2301      	movs	r3, #1
 800413c:	e022      	b.n	8004184 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004142:	2b00      	cmp	r3, #0
 8004144:	d002      	beq.n	800414c <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8004146:	6878      	ldr	r0, [r7, #4]
 8004148:	f000 fd88 	bl	8004c5c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	681b      	ldr	r3, [r3, #0]
 8004150:	685a      	ldr	r2, [r3, #4]
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	681b      	ldr	r3, [r3, #0]
 8004156:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800415a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	681b      	ldr	r3, [r3, #0]
 8004160:	689a      	ldr	r2, [r3, #8]
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	681b      	ldr	r3, [r3, #0]
 8004166:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800416a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	681b      	ldr	r3, [r3, #0]
 8004170:	681a      	ldr	r2, [r3, #0]
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	681b      	ldr	r3, [r3, #0]
 8004176:	f042 0201 	orr.w	r2, r2, #1
 800417a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800417c:	6878      	ldr	r0, [r7, #4]
 800417e:	f000 fe0f 	bl	8004da0 <UART_CheckIdleState>
 8004182:	4603      	mov	r3, r0
}
 8004184:	4618      	mov	r0, r3
 8004186:	3708      	adds	r7, #8
 8004188:	46bd      	mov	sp, r7
 800418a:	bd80      	pop	{r7, pc}

0800418c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800418c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004190:	b092      	sub	sp, #72	; 0x48
 8004192:	af00      	add	r7, sp, #0
 8004194:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004196:	2300      	movs	r3, #0
 8004198:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800419c:	697b      	ldr	r3, [r7, #20]
 800419e:	689a      	ldr	r2, [r3, #8]
 80041a0:	697b      	ldr	r3, [r7, #20]
 80041a2:	691b      	ldr	r3, [r3, #16]
 80041a4:	431a      	orrs	r2, r3
 80041a6:	697b      	ldr	r3, [r7, #20]
 80041a8:	695b      	ldr	r3, [r3, #20]
 80041aa:	431a      	orrs	r2, r3
 80041ac:	697b      	ldr	r3, [r7, #20]
 80041ae:	69db      	ldr	r3, [r3, #28]
 80041b0:	4313      	orrs	r3, r2
 80041b2:	647b      	str	r3, [r7, #68]	; 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80041b4:	697b      	ldr	r3, [r7, #20]
 80041b6:	681b      	ldr	r3, [r3, #0]
 80041b8:	681a      	ldr	r2, [r3, #0]
 80041ba:	4bbe      	ldr	r3, [pc, #760]	; (80044b4 <UART_SetConfig+0x328>)
 80041bc:	4013      	ands	r3, r2
 80041be:	697a      	ldr	r2, [r7, #20]
 80041c0:	6812      	ldr	r2, [r2, #0]
 80041c2:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80041c4:	430b      	orrs	r3, r1
 80041c6:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80041c8:	697b      	ldr	r3, [r7, #20]
 80041ca:	681b      	ldr	r3, [r3, #0]
 80041cc:	685b      	ldr	r3, [r3, #4]
 80041ce:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80041d2:	697b      	ldr	r3, [r7, #20]
 80041d4:	68da      	ldr	r2, [r3, #12]
 80041d6:	697b      	ldr	r3, [r7, #20]
 80041d8:	681b      	ldr	r3, [r3, #0]
 80041da:	430a      	orrs	r2, r1
 80041dc:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80041de:	697b      	ldr	r3, [r7, #20]
 80041e0:	699b      	ldr	r3, [r3, #24]
 80041e2:	647b      	str	r3, [r7, #68]	; 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80041e4:	697b      	ldr	r3, [r7, #20]
 80041e6:	681b      	ldr	r3, [r3, #0]
 80041e8:	4ab3      	ldr	r2, [pc, #716]	; (80044b8 <UART_SetConfig+0x32c>)
 80041ea:	4293      	cmp	r3, r2
 80041ec:	d004      	beq.n	80041f8 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80041ee:	697b      	ldr	r3, [r7, #20]
 80041f0:	6a1b      	ldr	r3, [r3, #32]
 80041f2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80041f4:	4313      	orrs	r3, r2
 80041f6:	647b      	str	r3, [r7, #68]	; 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80041f8:	697b      	ldr	r3, [r7, #20]
 80041fa:	681b      	ldr	r3, [r3, #0]
 80041fc:	689a      	ldr	r2, [r3, #8]
 80041fe:	4baf      	ldr	r3, [pc, #700]	; (80044bc <UART_SetConfig+0x330>)
 8004200:	4013      	ands	r3, r2
 8004202:	697a      	ldr	r2, [r7, #20]
 8004204:	6812      	ldr	r2, [r2, #0]
 8004206:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8004208:	430b      	orrs	r3, r1
 800420a:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800420c:	697b      	ldr	r3, [r7, #20]
 800420e:	681b      	ldr	r3, [r3, #0]
 8004210:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004212:	f023 010f 	bic.w	r1, r3, #15
 8004216:	697b      	ldr	r3, [r7, #20]
 8004218:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800421a:	697b      	ldr	r3, [r7, #20]
 800421c:	681b      	ldr	r3, [r3, #0]
 800421e:	430a      	orrs	r2, r1
 8004220:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004222:	697b      	ldr	r3, [r7, #20]
 8004224:	681b      	ldr	r3, [r3, #0]
 8004226:	4aa6      	ldr	r2, [pc, #664]	; (80044c0 <UART_SetConfig+0x334>)
 8004228:	4293      	cmp	r3, r2
 800422a:	d177      	bne.n	800431c <UART_SetConfig+0x190>
 800422c:	4ba5      	ldr	r3, [pc, #660]	; (80044c4 <UART_SetConfig+0x338>)
 800422e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004230:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004234:	2b28      	cmp	r3, #40	; 0x28
 8004236:	d86d      	bhi.n	8004314 <UART_SetConfig+0x188>
 8004238:	a201      	add	r2, pc, #4	; (adr r2, 8004240 <UART_SetConfig+0xb4>)
 800423a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800423e:	bf00      	nop
 8004240:	080042e5 	.word	0x080042e5
 8004244:	08004315 	.word	0x08004315
 8004248:	08004315 	.word	0x08004315
 800424c:	08004315 	.word	0x08004315
 8004250:	08004315 	.word	0x08004315
 8004254:	08004315 	.word	0x08004315
 8004258:	08004315 	.word	0x08004315
 800425c:	08004315 	.word	0x08004315
 8004260:	080042ed 	.word	0x080042ed
 8004264:	08004315 	.word	0x08004315
 8004268:	08004315 	.word	0x08004315
 800426c:	08004315 	.word	0x08004315
 8004270:	08004315 	.word	0x08004315
 8004274:	08004315 	.word	0x08004315
 8004278:	08004315 	.word	0x08004315
 800427c:	08004315 	.word	0x08004315
 8004280:	080042f5 	.word	0x080042f5
 8004284:	08004315 	.word	0x08004315
 8004288:	08004315 	.word	0x08004315
 800428c:	08004315 	.word	0x08004315
 8004290:	08004315 	.word	0x08004315
 8004294:	08004315 	.word	0x08004315
 8004298:	08004315 	.word	0x08004315
 800429c:	08004315 	.word	0x08004315
 80042a0:	080042fd 	.word	0x080042fd
 80042a4:	08004315 	.word	0x08004315
 80042a8:	08004315 	.word	0x08004315
 80042ac:	08004315 	.word	0x08004315
 80042b0:	08004315 	.word	0x08004315
 80042b4:	08004315 	.word	0x08004315
 80042b8:	08004315 	.word	0x08004315
 80042bc:	08004315 	.word	0x08004315
 80042c0:	08004305 	.word	0x08004305
 80042c4:	08004315 	.word	0x08004315
 80042c8:	08004315 	.word	0x08004315
 80042cc:	08004315 	.word	0x08004315
 80042d0:	08004315 	.word	0x08004315
 80042d4:	08004315 	.word	0x08004315
 80042d8:	08004315 	.word	0x08004315
 80042dc:	08004315 	.word	0x08004315
 80042e0:	0800430d 	.word	0x0800430d
 80042e4:	2301      	movs	r3, #1
 80042e6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80042ea:	e222      	b.n	8004732 <UART_SetConfig+0x5a6>
 80042ec:	2304      	movs	r3, #4
 80042ee:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80042f2:	e21e      	b.n	8004732 <UART_SetConfig+0x5a6>
 80042f4:	2308      	movs	r3, #8
 80042f6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80042fa:	e21a      	b.n	8004732 <UART_SetConfig+0x5a6>
 80042fc:	2310      	movs	r3, #16
 80042fe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004302:	e216      	b.n	8004732 <UART_SetConfig+0x5a6>
 8004304:	2320      	movs	r3, #32
 8004306:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800430a:	e212      	b.n	8004732 <UART_SetConfig+0x5a6>
 800430c:	2340      	movs	r3, #64	; 0x40
 800430e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004312:	e20e      	b.n	8004732 <UART_SetConfig+0x5a6>
 8004314:	2380      	movs	r3, #128	; 0x80
 8004316:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800431a:	e20a      	b.n	8004732 <UART_SetConfig+0x5a6>
 800431c:	697b      	ldr	r3, [r7, #20]
 800431e:	681b      	ldr	r3, [r3, #0]
 8004320:	4a69      	ldr	r2, [pc, #420]	; (80044c8 <UART_SetConfig+0x33c>)
 8004322:	4293      	cmp	r3, r2
 8004324:	d130      	bne.n	8004388 <UART_SetConfig+0x1fc>
 8004326:	4b67      	ldr	r3, [pc, #412]	; (80044c4 <UART_SetConfig+0x338>)
 8004328:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800432a:	f003 0307 	and.w	r3, r3, #7
 800432e:	2b05      	cmp	r3, #5
 8004330:	d826      	bhi.n	8004380 <UART_SetConfig+0x1f4>
 8004332:	a201      	add	r2, pc, #4	; (adr r2, 8004338 <UART_SetConfig+0x1ac>)
 8004334:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004338:	08004351 	.word	0x08004351
 800433c:	08004359 	.word	0x08004359
 8004340:	08004361 	.word	0x08004361
 8004344:	08004369 	.word	0x08004369
 8004348:	08004371 	.word	0x08004371
 800434c:	08004379 	.word	0x08004379
 8004350:	2300      	movs	r3, #0
 8004352:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004356:	e1ec      	b.n	8004732 <UART_SetConfig+0x5a6>
 8004358:	2304      	movs	r3, #4
 800435a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800435e:	e1e8      	b.n	8004732 <UART_SetConfig+0x5a6>
 8004360:	2308      	movs	r3, #8
 8004362:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004366:	e1e4      	b.n	8004732 <UART_SetConfig+0x5a6>
 8004368:	2310      	movs	r3, #16
 800436a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800436e:	e1e0      	b.n	8004732 <UART_SetConfig+0x5a6>
 8004370:	2320      	movs	r3, #32
 8004372:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004376:	e1dc      	b.n	8004732 <UART_SetConfig+0x5a6>
 8004378:	2340      	movs	r3, #64	; 0x40
 800437a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800437e:	e1d8      	b.n	8004732 <UART_SetConfig+0x5a6>
 8004380:	2380      	movs	r3, #128	; 0x80
 8004382:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004386:	e1d4      	b.n	8004732 <UART_SetConfig+0x5a6>
 8004388:	697b      	ldr	r3, [r7, #20]
 800438a:	681b      	ldr	r3, [r3, #0]
 800438c:	4a4f      	ldr	r2, [pc, #316]	; (80044cc <UART_SetConfig+0x340>)
 800438e:	4293      	cmp	r3, r2
 8004390:	d130      	bne.n	80043f4 <UART_SetConfig+0x268>
 8004392:	4b4c      	ldr	r3, [pc, #304]	; (80044c4 <UART_SetConfig+0x338>)
 8004394:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004396:	f003 0307 	and.w	r3, r3, #7
 800439a:	2b05      	cmp	r3, #5
 800439c:	d826      	bhi.n	80043ec <UART_SetConfig+0x260>
 800439e:	a201      	add	r2, pc, #4	; (adr r2, 80043a4 <UART_SetConfig+0x218>)
 80043a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80043a4:	080043bd 	.word	0x080043bd
 80043a8:	080043c5 	.word	0x080043c5
 80043ac:	080043cd 	.word	0x080043cd
 80043b0:	080043d5 	.word	0x080043d5
 80043b4:	080043dd 	.word	0x080043dd
 80043b8:	080043e5 	.word	0x080043e5
 80043bc:	2300      	movs	r3, #0
 80043be:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80043c2:	e1b6      	b.n	8004732 <UART_SetConfig+0x5a6>
 80043c4:	2304      	movs	r3, #4
 80043c6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80043ca:	e1b2      	b.n	8004732 <UART_SetConfig+0x5a6>
 80043cc:	2308      	movs	r3, #8
 80043ce:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80043d2:	e1ae      	b.n	8004732 <UART_SetConfig+0x5a6>
 80043d4:	2310      	movs	r3, #16
 80043d6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80043da:	e1aa      	b.n	8004732 <UART_SetConfig+0x5a6>
 80043dc:	2320      	movs	r3, #32
 80043de:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80043e2:	e1a6      	b.n	8004732 <UART_SetConfig+0x5a6>
 80043e4:	2340      	movs	r3, #64	; 0x40
 80043e6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80043ea:	e1a2      	b.n	8004732 <UART_SetConfig+0x5a6>
 80043ec:	2380      	movs	r3, #128	; 0x80
 80043ee:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80043f2:	e19e      	b.n	8004732 <UART_SetConfig+0x5a6>
 80043f4:	697b      	ldr	r3, [r7, #20]
 80043f6:	681b      	ldr	r3, [r3, #0]
 80043f8:	4a35      	ldr	r2, [pc, #212]	; (80044d0 <UART_SetConfig+0x344>)
 80043fa:	4293      	cmp	r3, r2
 80043fc:	d130      	bne.n	8004460 <UART_SetConfig+0x2d4>
 80043fe:	4b31      	ldr	r3, [pc, #196]	; (80044c4 <UART_SetConfig+0x338>)
 8004400:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004402:	f003 0307 	and.w	r3, r3, #7
 8004406:	2b05      	cmp	r3, #5
 8004408:	d826      	bhi.n	8004458 <UART_SetConfig+0x2cc>
 800440a:	a201      	add	r2, pc, #4	; (adr r2, 8004410 <UART_SetConfig+0x284>)
 800440c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004410:	08004429 	.word	0x08004429
 8004414:	08004431 	.word	0x08004431
 8004418:	08004439 	.word	0x08004439
 800441c:	08004441 	.word	0x08004441
 8004420:	08004449 	.word	0x08004449
 8004424:	08004451 	.word	0x08004451
 8004428:	2300      	movs	r3, #0
 800442a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800442e:	e180      	b.n	8004732 <UART_SetConfig+0x5a6>
 8004430:	2304      	movs	r3, #4
 8004432:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004436:	e17c      	b.n	8004732 <UART_SetConfig+0x5a6>
 8004438:	2308      	movs	r3, #8
 800443a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800443e:	e178      	b.n	8004732 <UART_SetConfig+0x5a6>
 8004440:	2310      	movs	r3, #16
 8004442:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004446:	e174      	b.n	8004732 <UART_SetConfig+0x5a6>
 8004448:	2320      	movs	r3, #32
 800444a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800444e:	e170      	b.n	8004732 <UART_SetConfig+0x5a6>
 8004450:	2340      	movs	r3, #64	; 0x40
 8004452:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004456:	e16c      	b.n	8004732 <UART_SetConfig+0x5a6>
 8004458:	2380      	movs	r3, #128	; 0x80
 800445a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800445e:	e168      	b.n	8004732 <UART_SetConfig+0x5a6>
 8004460:	697b      	ldr	r3, [r7, #20]
 8004462:	681b      	ldr	r3, [r3, #0]
 8004464:	4a1b      	ldr	r2, [pc, #108]	; (80044d4 <UART_SetConfig+0x348>)
 8004466:	4293      	cmp	r3, r2
 8004468:	d142      	bne.n	80044f0 <UART_SetConfig+0x364>
 800446a:	4b16      	ldr	r3, [pc, #88]	; (80044c4 <UART_SetConfig+0x338>)
 800446c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800446e:	f003 0307 	and.w	r3, r3, #7
 8004472:	2b05      	cmp	r3, #5
 8004474:	d838      	bhi.n	80044e8 <UART_SetConfig+0x35c>
 8004476:	a201      	add	r2, pc, #4	; (adr r2, 800447c <UART_SetConfig+0x2f0>)
 8004478:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800447c:	08004495 	.word	0x08004495
 8004480:	0800449d 	.word	0x0800449d
 8004484:	080044a5 	.word	0x080044a5
 8004488:	080044ad 	.word	0x080044ad
 800448c:	080044d9 	.word	0x080044d9
 8004490:	080044e1 	.word	0x080044e1
 8004494:	2300      	movs	r3, #0
 8004496:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800449a:	e14a      	b.n	8004732 <UART_SetConfig+0x5a6>
 800449c:	2304      	movs	r3, #4
 800449e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80044a2:	e146      	b.n	8004732 <UART_SetConfig+0x5a6>
 80044a4:	2308      	movs	r3, #8
 80044a6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80044aa:	e142      	b.n	8004732 <UART_SetConfig+0x5a6>
 80044ac:	2310      	movs	r3, #16
 80044ae:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80044b2:	e13e      	b.n	8004732 <UART_SetConfig+0x5a6>
 80044b4:	cfff69f3 	.word	0xcfff69f3
 80044b8:	58000c00 	.word	0x58000c00
 80044bc:	11fff4ff 	.word	0x11fff4ff
 80044c0:	40011000 	.word	0x40011000
 80044c4:	58024400 	.word	0x58024400
 80044c8:	40004400 	.word	0x40004400
 80044cc:	40004800 	.word	0x40004800
 80044d0:	40004c00 	.word	0x40004c00
 80044d4:	40005000 	.word	0x40005000
 80044d8:	2320      	movs	r3, #32
 80044da:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80044de:	e128      	b.n	8004732 <UART_SetConfig+0x5a6>
 80044e0:	2340      	movs	r3, #64	; 0x40
 80044e2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80044e6:	e124      	b.n	8004732 <UART_SetConfig+0x5a6>
 80044e8:	2380      	movs	r3, #128	; 0x80
 80044ea:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80044ee:	e120      	b.n	8004732 <UART_SetConfig+0x5a6>
 80044f0:	697b      	ldr	r3, [r7, #20]
 80044f2:	681b      	ldr	r3, [r3, #0]
 80044f4:	4acb      	ldr	r2, [pc, #812]	; (8004824 <UART_SetConfig+0x698>)
 80044f6:	4293      	cmp	r3, r2
 80044f8:	d176      	bne.n	80045e8 <UART_SetConfig+0x45c>
 80044fa:	4bcb      	ldr	r3, [pc, #812]	; (8004828 <UART_SetConfig+0x69c>)
 80044fc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80044fe:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004502:	2b28      	cmp	r3, #40	; 0x28
 8004504:	d86c      	bhi.n	80045e0 <UART_SetConfig+0x454>
 8004506:	a201      	add	r2, pc, #4	; (adr r2, 800450c <UART_SetConfig+0x380>)
 8004508:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800450c:	080045b1 	.word	0x080045b1
 8004510:	080045e1 	.word	0x080045e1
 8004514:	080045e1 	.word	0x080045e1
 8004518:	080045e1 	.word	0x080045e1
 800451c:	080045e1 	.word	0x080045e1
 8004520:	080045e1 	.word	0x080045e1
 8004524:	080045e1 	.word	0x080045e1
 8004528:	080045e1 	.word	0x080045e1
 800452c:	080045b9 	.word	0x080045b9
 8004530:	080045e1 	.word	0x080045e1
 8004534:	080045e1 	.word	0x080045e1
 8004538:	080045e1 	.word	0x080045e1
 800453c:	080045e1 	.word	0x080045e1
 8004540:	080045e1 	.word	0x080045e1
 8004544:	080045e1 	.word	0x080045e1
 8004548:	080045e1 	.word	0x080045e1
 800454c:	080045c1 	.word	0x080045c1
 8004550:	080045e1 	.word	0x080045e1
 8004554:	080045e1 	.word	0x080045e1
 8004558:	080045e1 	.word	0x080045e1
 800455c:	080045e1 	.word	0x080045e1
 8004560:	080045e1 	.word	0x080045e1
 8004564:	080045e1 	.word	0x080045e1
 8004568:	080045e1 	.word	0x080045e1
 800456c:	080045c9 	.word	0x080045c9
 8004570:	080045e1 	.word	0x080045e1
 8004574:	080045e1 	.word	0x080045e1
 8004578:	080045e1 	.word	0x080045e1
 800457c:	080045e1 	.word	0x080045e1
 8004580:	080045e1 	.word	0x080045e1
 8004584:	080045e1 	.word	0x080045e1
 8004588:	080045e1 	.word	0x080045e1
 800458c:	080045d1 	.word	0x080045d1
 8004590:	080045e1 	.word	0x080045e1
 8004594:	080045e1 	.word	0x080045e1
 8004598:	080045e1 	.word	0x080045e1
 800459c:	080045e1 	.word	0x080045e1
 80045a0:	080045e1 	.word	0x080045e1
 80045a4:	080045e1 	.word	0x080045e1
 80045a8:	080045e1 	.word	0x080045e1
 80045ac:	080045d9 	.word	0x080045d9
 80045b0:	2301      	movs	r3, #1
 80045b2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80045b6:	e0bc      	b.n	8004732 <UART_SetConfig+0x5a6>
 80045b8:	2304      	movs	r3, #4
 80045ba:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80045be:	e0b8      	b.n	8004732 <UART_SetConfig+0x5a6>
 80045c0:	2308      	movs	r3, #8
 80045c2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80045c6:	e0b4      	b.n	8004732 <UART_SetConfig+0x5a6>
 80045c8:	2310      	movs	r3, #16
 80045ca:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80045ce:	e0b0      	b.n	8004732 <UART_SetConfig+0x5a6>
 80045d0:	2320      	movs	r3, #32
 80045d2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80045d6:	e0ac      	b.n	8004732 <UART_SetConfig+0x5a6>
 80045d8:	2340      	movs	r3, #64	; 0x40
 80045da:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80045de:	e0a8      	b.n	8004732 <UART_SetConfig+0x5a6>
 80045e0:	2380      	movs	r3, #128	; 0x80
 80045e2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80045e6:	e0a4      	b.n	8004732 <UART_SetConfig+0x5a6>
 80045e8:	697b      	ldr	r3, [r7, #20]
 80045ea:	681b      	ldr	r3, [r3, #0]
 80045ec:	4a8f      	ldr	r2, [pc, #572]	; (800482c <UART_SetConfig+0x6a0>)
 80045ee:	4293      	cmp	r3, r2
 80045f0:	d130      	bne.n	8004654 <UART_SetConfig+0x4c8>
 80045f2:	4b8d      	ldr	r3, [pc, #564]	; (8004828 <UART_SetConfig+0x69c>)
 80045f4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80045f6:	f003 0307 	and.w	r3, r3, #7
 80045fa:	2b05      	cmp	r3, #5
 80045fc:	d826      	bhi.n	800464c <UART_SetConfig+0x4c0>
 80045fe:	a201      	add	r2, pc, #4	; (adr r2, 8004604 <UART_SetConfig+0x478>)
 8004600:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004604:	0800461d 	.word	0x0800461d
 8004608:	08004625 	.word	0x08004625
 800460c:	0800462d 	.word	0x0800462d
 8004610:	08004635 	.word	0x08004635
 8004614:	0800463d 	.word	0x0800463d
 8004618:	08004645 	.word	0x08004645
 800461c:	2300      	movs	r3, #0
 800461e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004622:	e086      	b.n	8004732 <UART_SetConfig+0x5a6>
 8004624:	2304      	movs	r3, #4
 8004626:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800462a:	e082      	b.n	8004732 <UART_SetConfig+0x5a6>
 800462c:	2308      	movs	r3, #8
 800462e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004632:	e07e      	b.n	8004732 <UART_SetConfig+0x5a6>
 8004634:	2310      	movs	r3, #16
 8004636:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800463a:	e07a      	b.n	8004732 <UART_SetConfig+0x5a6>
 800463c:	2320      	movs	r3, #32
 800463e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004642:	e076      	b.n	8004732 <UART_SetConfig+0x5a6>
 8004644:	2340      	movs	r3, #64	; 0x40
 8004646:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800464a:	e072      	b.n	8004732 <UART_SetConfig+0x5a6>
 800464c:	2380      	movs	r3, #128	; 0x80
 800464e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004652:	e06e      	b.n	8004732 <UART_SetConfig+0x5a6>
 8004654:	697b      	ldr	r3, [r7, #20]
 8004656:	681b      	ldr	r3, [r3, #0]
 8004658:	4a75      	ldr	r2, [pc, #468]	; (8004830 <UART_SetConfig+0x6a4>)
 800465a:	4293      	cmp	r3, r2
 800465c:	d130      	bne.n	80046c0 <UART_SetConfig+0x534>
 800465e:	4b72      	ldr	r3, [pc, #456]	; (8004828 <UART_SetConfig+0x69c>)
 8004660:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004662:	f003 0307 	and.w	r3, r3, #7
 8004666:	2b05      	cmp	r3, #5
 8004668:	d826      	bhi.n	80046b8 <UART_SetConfig+0x52c>
 800466a:	a201      	add	r2, pc, #4	; (adr r2, 8004670 <UART_SetConfig+0x4e4>)
 800466c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004670:	08004689 	.word	0x08004689
 8004674:	08004691 	.word	0x08004691
 8004678:	08004699 	.word	0x08004699
 800467c:	080046a1 	.word	0x080046a1
 8004680:	080046a9 	.word	0x080046a9
 8004684:	080046b1 	.word	0x080046b1
 8004688:	2300      	movs	r3, #0
 800468a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800468e:	e050      	b.n	8004732 <UART_SetConfig+0x5a6>
 8004690:	2304      	movs	r3, #4
 8004692:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004696:	e04c      	b.n	8004732 <UART_SetConfig+0x5a6>
 8004698:	2308      	movs	r3, #8
 800469a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800469e:	e048      	b.n	8004732 <UART_SetConfig+0x5a6>
 80046a0:	2310      	movs	r3, #16
 80046a2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80046a6:	e044      	b.n	8004732 <UART_SetConfig+0x5a6>
 80046a8:	2320      	movs	r3, #32
 80046aa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80046ae:	e040      	b.n	8004732 <UART_SetConfig+0x5a6>
 80046b0:	2340      	movs	r3, #64	; 0x40
 80046b2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80046b6:	e03c      	b.n	8004732 <UART_SetConfig+0x5a6>
 80046b8:	2380      	movs	r3, #128	; 0x80
 80046ba:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80046be:	e038      	b.n	8004732 <UART_SetConfig+0x5a6>
 80046c0:	697b      	ldr	r3, [r7, #20]
 80046c2:	681b      	ldr	r3, [r3, #0]
 80046c4:	4a5b      	ldr	r2, [pc, #364]	; (8004834 <UART_SetConfig+0x6a8>)
 80046c6:	4293      	cmp	r3, r2
 80046c8:	d130      	bne.n	800472c <UART_SetConfig+0x5a0>
 80046ca:	4b57      	ldr	r3, [pc, #348]	; (8004828 <UART_SetConfig+0x69c>)
 80046cc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80046ce:	f003 0307 	and.w	r3, r3, #7
 80046d2:	2b05      	cmp	r3, #5
 80046d4:	d826      	bhi.n	8004724 <UART_SetConfig+0x598>
 80046d6:	a201      	add	r2, pc, #4	; (adr r2, 80046dc <UART_SetConfig+0x550>)
 80046d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80046dc:	080046f5 	.word	0x080046f5
 80046e0:	080046fd 	.word	0x080046fd
 80046e4:	08004705 	.word	0x08004705
 80046e8:	0800470d 	.word	0x0800470d
 80046ec:	08004715 	.word	0x08004715
 80046f0:	0800471d 	.word	0x0800471d
 80046f4:	2302      	movs	r3, #2
 80046f6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80046fa:	e01a      	b.n	8004732 <UART_SetConfig+0x5a6>
 80046fc:	2304      	movs	r3, #4
 80046fe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004702:	e016      	b.n	8004732 <UART_SetConfig+0x5a6>
 8004704:	2308      	movs	r3, #8
 8004706:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800470a:	e012      	b.n	8004732 <UART_SetConfig+0x5a6>
 800470c:	2310      	movs	r3, #16
 800470e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004712:	e00e      	b.n	8004732 <UART_SetConfig+0x5a6>
 8004714:	2320      	movs	r3, #32
 8004716:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800471a:	e00a      	b.n	8004732 <UART_SetConfig+0x5a6>
 800471c:	2340      	movs	r3, #64	; 0x40
 800471e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004722:	e006      	b.n	8004732 <UART_SetConfig+0x5a6>
 8004724:	2380      	movs	r3, #128	; 0x80
 8004726:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800472a:	e002      	b.n	8004732 <UART_SetConfig+0x5a6>
 800472c:	2380      	movs	r3, #128	; 0x80
 800472e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8004732:	697b      	ldr	r3, [r7, #20]
 8004734:	681b      	ldr	r3, [r3, #0]
 8004736:	4a3f      	ldr	r2, [pc, #252]	; (8004834 <UART_SetConfig+0x6a8>)
 8004738:	4293      	cmp	r3, r2
 800473a:	f040 80f8 	bne.w	800492e <UART_SetConfig+0x7a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800473e:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8004742:	2b20      	cmp	r3, #32
 8004744:	dc46      	bgt.n	80047d4 <UART_SetConfig+0x648>
 8004746:	2b02      	cmp	r3, #2
 8004748:	f2c0 8082 	blt.w	8004850 <UART_SetConfig+0x6c4>
 800474c:	3b02      	subs	r3, #2
 800474e:	2b1e      	cmp	r3, #30
 8004750:	d87e      	bhi.n	8004850 <UART_SetConfig+0x6c4>
 8004752:	a201      	add	r2, pc, #4	; (adr r2, 8004758 <UART_SetConfig+0x5cc>)
 8004754:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004758:	080047db 	.word	0x080047db
 800475c:	08004851 	.word	0x08004851
 8004760:	080047e3 	.word	0x080047e3
 8004764:	08004851 	.word	0x08004851
 8004768:	08004851 	.word	0x08004851
 800476c:	08004851 	.word	0x08004851
 8004770:	080047f3 	.word	0x080047f3
 8004774:	08004851 	.word	0x08004851
 8004778:	08004851 	.word	0x08004851
 800477c:	08004851 	.word	0x08004851
 8004780:	08004851 	.word	0x08004851
 8004784:	08004851 	.word	0x08004851
 8004788:	08004851 	.word	0x08004851
 800478c:	08004851 	.word	0x08004851
 8004790:	08004803 	.word	0x08004803
 8004794:	08004851 	.word	0x08004851
 8004798:	08004851 	.word	0x08004851
 800479c:	08004851 	.word	0x08004851
 80047a0:	08004851 	.word	0x08004851
 80047a4:	08004851 	.word	0x08004851
 80047a8:	08004851 	.word	0x08004851
 80047ac:	08004851 	.word	0x08004851
 80047b0:	08004851 	.word	0x08004851
 80047b4:	08004851 	.word	0x08004851
 80047b8:	08004851 	.word	0x08004851
 80047bc:	08004851 	.word	0x08004851
 80047c0:	08004851 	.word	0x08004851
 80047c4:	08004851 	.word	0x08004851
 80047c8:	08004851 	.word	0x08004851
 80047cc:	08004851 	.word	0x08004851
 80047d0:	08004843 	.word	0x08004843
 80047d4:	2b40      	cmp	r3, #64	; 0x40
 80047d6:	d037      	beq.n	8004848 <UART_SetConfig+0x6bc>
 80047d8:	e03a      	b.n	8004850 <UART_SetConfig+0x6c4>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 80047da:	f7ff f865 	bl	80038a8 <HAL_RCCEx_GetD3PCLK1Freq>
 80047de:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 80047e0:	e03c      	b.n	800485c <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80047e2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80047e6:	4618      	mov	r0, r3
 80047e8:	f7ff f874 	bl	80038d4 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 80047ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80047ee:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80047f0:	e034      	b.n	800485c <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80047f2:	f107 0318 	add.w	r3, r7, #24
 80047f6:	4618      	mov	r0, r3
 80047f8:	f7ff f9c0 	bl	8003b7c <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 80047fc:	69fb      	ldr	r3, [r7, #28]
 80047fe:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8004800:	e02c      	b.n	800485c <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004802:	4b09      	ldr	r3, [pc, #36]	; (8004828 <UART_SetConfig+0x69c>)
 8004804:	681b      	ldr	r3, [r3, #0]
 8004806:	f003 0320 	and.w	r3, r3, #32
 800480a:	2b00      	cmp	r3, #0
 800480c:	d016      	beq.n	800483c <UART_SetConfig+0x6b0>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800480e:	4b06      	ldr	r3, [pc, #24]	; (8004828 <UART_SetConfig+0x69c>)
 8004810:	681b      	ldr	r3, [r3, #0]
 8004812:	08db      	lsrs	r3, r3, #3
 8004814:	f003 0303 	and.w	r3, r3, #3
 8004818:	4a07      	ldr	r2, [pc, #28]	; (8004838 <UART_SetConfig+0x6ac>)
 800481a:	fa22 f303 	lsr.w	r3, r2, r3
 800481e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8004820:	e01c      	b.n	800485c <UART_SetConfig+0x6d0>
 8004822:	bf00      	nop
 8004824:	40011400 	.word	0x40011400
 8004828:	58024400 	.word	0x58024400
 800482c:	40007800 	.word	0x40007800
 8004830:	40007c00 	.word	0x40007c00
 8004834:	58000c00 	.word	0x58000c00
 8004838:	03d09000 	.word	0x03d09000
          pclk = (uint32_t) HSI_VALUE;
 800483c:	4b9d      	ldr	r3, [pc, #628]	; (8004ab4 <UART_SetConfig+0x928>)
 800483e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8004840:	e00c      	b.n	800485c <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8004842:	4b9d      	ldr	r3, [pc, #628]	; (8004ab8 <UART_SetConfig+0x92c>)
 8004844:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8004846:	e009      	b.n	800485c <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004848:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800484c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800484e:	e005      	b.n	800485c <UART_SetConfig+0x6d0>
      default:
        pclk = 0U;
 8004850:	2300      	movs	r3, #0
 8004852:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 8004854:	2301      	movs	r3, #1
 8004856:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 800485a:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800485c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800485e:	2b00      	cmp	r3, #0
 8004860:	f000 81de 	beq.w	8004c20 <UART_SetConfig+0xa94>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8004864:	697b      	ldr	r3, [r7, #20]
 8004866:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004868:	4a94      	ldr	r2, [pc, #592]	; (8004abc <UART_SetConfig+0x930>)
 800486a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800486e:	461a      	mov	r2, r3
 8004870:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004872:	fbb3 f3f2 	udiv	r3, r3, r2
 8004876:	633b      	str	r3, [r7, #48]	; 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8004878:	697b      	ldr	r3, [r7, #20]
 800487a:	685a      	ldr	r2, [r3, #4]
 800487c:	4613      	mov	r3, r2
 800487e:	005b      	lsls	r3, r3, #1
 8004880:	4413      	add	r3, r2
 8004882:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004884:	429a      	cmp	r2, r3
 8004886:	d305      	bcc.n	8004894 <UART_SetConfig+0x708>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8004888:	697b      	ldr	r3, [r7, #20]
 800488a:	685b      	ldr	r3, [r3, #4]
 800488c:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800488e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004890:	429a      	cmp	r2, r3
 8004892:	d903      	bls.n	800489c <UART_SetConfig+0x710>
      {
        ret = HAL_ERROR;
 8004894:	2301      	movs	r3, #1
 8004896:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 800489a:	e1c1      	b.n	8004c20 <UART_SetConfig+0xa94>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800489c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800489e:	2200      	movs	r2, #0
 80048a0:	60bb      	str	r3, [r7, #8]
 80048a2:	60fa      	str	r2, [r7, #12]
 80048a4:	697b      	ldr	r3, [r7, #20]
 80048a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048a8:	4a84      	ldr	r2, [pc, #528]	; (8004abc <UART_SetConfig+0x930>)
 80048aa:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80048ae:	b29b      	uxth	r3, r3
 80048b0:	2200      	movs	r2, #0
 80048b2:	603b      	str	r3, [r7, #0]
 80048b4:	607a      	str	r2, [r7, #4]
 80048b6:	e9d7 2300 	ldrd	r2, r3, [r7]
 80048ba:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80048be:	f7fb fd0b 	bl	80002d8 <__aeabi_uldivmod>
 80048c2:	4602      	mov	r2, r0
 80048c4:	460b      	mov	r3, r1
 80048c6:	4610      	mov	r0, r2
 80048c8:	4619      	mov	r1, r3
 80048ca:	f04f 0200 	mov.w	r2, #0
 80048ce:	f04f 0300 	mov.w	r3, #0
 80048d2:	020b      	lsls	r3, r1, #8
 80048d4:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 80048d8:	0202      	lsls	r2, r0, #8
 80048da:	6979      	ldr	r1, [r7, #20]
 80048dc:	6849      	ldr	r1, [r1, #4]
 80048de:	0849      	lsrs	r1, r1, #1
 80048e0:	2000      	movs	r0, #0
 80048e2:	460c      	mov	r4, r1
 80048e4:	4605      	mov	r5, r0
 80048e6:	eb12 0804 	adds.w	r8, r2, r4
 80048ea:	eb43 0905 	adc.w	r9, r3, r5
 80048ee:	697b      	ldr	r3, [r7, #20]
 80048f0:	685b      	ldr	r3, [r3, #4]
 80048f2:	2200      	movs	r2, #0
 80048f4:	469a      	mov	sl, r3
 80048f6:	4693      	mov	fp, r2
 80048f8:	4652      	mov	r2, sl
 80048fa:	465b      	mov	r3, fp
 80048fc:	4640      	mov	r0, r8
 80048fe:	4649      	mov	r1, r9
 8004900:	f7fb fcea 	bl	80002d8 <__aeabi_uldivmod>
 8004904:	4602      	mov	r2, r0
 8004906:	460b      	mov	r3, r1
 8004908:	4613      	mov	r3, r2
 800490a:	63bb      	str	r3, [r7, #56]	; 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800490c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800490e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004912:	d308      	bcc.n	8004926 <UART_SetConfig+0x79a>
 8004914:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004916:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800491a:	d204      	bcs.n	8004926 <UART_SetConfig+0x79a>
        {
          huart->Instance->BRR = usartdiv;
 800491c:	697b      	ldr	r3, [r7, #20]
 800491e:	681b      	ldr	r3, [r3, #0]
 8004920:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004922:	60da      	str	r2, [r3, #12]
 8004924:	e17c      	b.n	8004c20 <UART_SetConfig+0xa94>
        }
        else
        {
          ret = HAL_ERROR;
 8004926:	2301      	movs	r3, #1
 8004928:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 800492c:	e178      	b.n	8004c20 <UART_SetConfig+0xa94>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800492e:	697b      	ldr	r3, [r7, #20]
 8004930:	69db      	ldr	r3, [r3, #28]
 8004932:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004936:	f040 80c5 	bne.w	8004ac4 <UART_SetConfig+0x938>
  {
    switch (clocksource)
 800493a:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800493e:	2b20      	cmp	r3, #32
 8004940:	dc48      	bgt.n	80049d4 <UART_SetConfig+0x848>
 8004942:	2b00      	cmp	r3, #0
 8004944:	db7b      	blt.n	8004a3e <UART_SetConfig+0x8b2>
 8004946:	2b20      	cmp	r3, #32
 8004948:	d879      	bhi.n	8004a3e <UART_SetConfig+0x8b2>
 800494a:	a201      	add	r2, pc, #4	; (adr r2, 8004950 <UART_SetConfig+0x7c4>)
 800494c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004950:	080049db 	.word	0x080049db
 8004954:	080049e3 	.word	0x080049e3
 8004958:	08004a3f 	.word	0x08004a3f
 800495c:	08004a3f 	.word	0x08004a3f
 8004960:	080049eb 	.word	0x080049eb
 8004964:	08004a3f 	.word	0x08004a3f
 8004968:	08004a3f 	.word	0x08004a3f
 800496c:	08004a3f 	.word	0x08004a3f
 8004970:	080049fb 	.word	0x080049fb
 8004974:	08004a3f 	.word	0x08004a3f
 8004978:	08004a3f 	.word	0x08004a3f
 800497c:	08004a3f 	.word	0x08004a3f
 8004980:	08004a3f 	.word	0x08004a3f
 8004984:	08004a3f 	.word	0x08004a3f
 8004988:	08004a3f 	.word	0x08004a3f
 800498c:	08004a3f 	.word	0x08004a3f
 8004990:	08004a0b 	.word	0x08004a0b
 8004994:	08004a3f 	.word	0x08004a3f
 8004998:	08004a3f 	.word	0x08004a3f
 800499c:	08004a3f 	.word	0x08004a3f
 80049a0:	08004a3f 	.word	0x08004a3f
 80049a4:	08004a3f 	.word	0x08004a3f
 80049a8:	08004a3f 	.word	0x08004a3f
 80049ac:	08004a3f 	.word	0x08004a3f
 80049b0:	08004a3f 	.word	0x08004a3f
 80049b4:	08004a3f 	.word	0x08004a3f
 80049b8:	08004a3f 	.word	0x08004a3f
 80049bc:	08004a3f 	.word	0x08004a3f
 80049c0:	08004a3f 	.word	0x08004a3f
 80049c4:	08004a3f 	.word	0x08004a3f
 80049c8:	08004a3f 	.word	0x08004a3f
 80049cc:	08004a3f 	.word	0x08004a3f
 80049d0:	08004a31 	.word	0x08004a31
 80049d4:	2b40      	cmp	r3, #64	; 0x40
 80049d6:	d02e      	beq.n	8004a36 <UART_SetConfig+0x8aa>
 80049d8:	e031      	b.n	8004a3e <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80049da:	f7fd fcef 	bl	80023bc <HAL_RCC_GetPCLK1Freq>
 80049de:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 80049e0:	e033      	b.n	8004a4a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80049e2:	f7fd fd01 	bl	80023e8 <HAL_RCC_GetPCLK2Freq>
 80049e6:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 80049e8:	e02f      	b.n	8004a4a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80049ea:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80049ee:	4618      	mov	r0, r3
 80049f0:	f7fe ff70 	bl	80038d4 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 80049f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80049f6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80049f8:	e027      	b.n	8004a4a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80049fa:	f107 0318 	add.w	r3, r7, #24
 80049fe:	4618      	mov	r0, r3
 8004a00:	f7ff f8bc 	bl	8003b7c <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8004a04:	69fb      	ldr	r3, [r7, #28]
 8004a06:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8004a08:	e01f      	b.n	8004a4a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004a0a:	4b2d      	ldr	r3, [pc, #180]	; (8004ac0 <UART_SetConfig+0x934>)
 8004a0c:	681b      	ldr	r3, [r3, #0]
 8004a0e:	f003 0320 	and.w	r3, r3, #32
 8004a12:	2b00      	cmp	r3, #0
 8004a14:	d009      	beq.n	8004a2a <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8004a16:	4b2a      	ldr	r3, [pc, #168]	; (8004ac0 <UART_SetConfig+0x934>)
 8004a18:	681b      	ldr	r3, [r3, #0]
 8004a1a:	08db      	lsrs	r3, r3, #3
 8004a1c:	f003 0303 	and.w	r3, r3, #3
 8004a20:	4a24      	ldr	r2, [pc, #144]	; (8004ab4 <UART_SetConfig+0x928>)
 8004a22:	fa22 f303 	lsr.w	r3, r2, r3
 8004a26:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8004a28:	e00f      	b.n	8004a4a <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 8004a2a:	4b22      	ldr	r3, [pc, #136]	; (8004ab4 <UART_SetConfig+0x928>)
 8004a2c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8004a2e:	e00c      	b.n	8004a4a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8004a30:	4b21      	ldr	r3, [pc, #132]	; (8004ab8 <UART_SetConfig+0x92c>)
 8004a32:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8004a34:	e009      	b.n	8004a4a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004a36:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004a3a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8004a3c:	e005      	b.n	8004a4a <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 8004a3e:	2300      	movs	r3, #0
 8004a40:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 8004a42:	2301      	movs	r3, #1
 8004a44:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 8004a48:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8004a4a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004a4c:	2b00      	cmp	r3, #0
 8004a4e:	f000 80e7 	beq.w	8004c20 <UART_SetConfig+0xa94>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004a52:	697b      	ldr	r3, [r7, #20]
 8004a54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a56:	4a19      	ldr	r2, [pc, #100]	; (8004abc <UART_SetConfig+0x930>)
 8004a58:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004a5c:	461a      	mov	r2, r3
 8004a5e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004a60:	fbb3 f3f2 	udiv	r3, r3, r2
 8004a64:	005a      	lsls	r2, r3, #1
 8004a66:	697b      	ldr	r3, [r7, #20]
 8004a68:	685b      	ldr	r3, [r3, #4]
 8004a6a:	085b      	lsrs	r3, r3, #1
 8004a6c:	441a      	add	r2, r3
 8004a6e:	697b      	ldr	r3, [r7, #20]
 8004a70:	685b      	ldr	r3, [r3, #4]
 8004a72:	fbb2 f3f3 	udiv	r3, r2, r3
 8004a76:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004a78:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004a7a:	2b0f      	cmp	r3, #15
 8004a7c:	d916      	bls.n	8004aac <UART_SetConfig+0x920>
 8004a7e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004a80:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004a84:	d212      	bcs.n	8004aac <UART_SetConfig+0x920>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004a86:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004a88:	b29b      	uxth	r3, r3
 8004a8a:	f023 030f 	bic.w	r3, r3, #15
 8004a8e:	86fb      	strh	r3, [r7, #54]	; 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004a90:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004a92:	085b      	lsrs	r3, r3, #1
 8004a94:	b29b      	uxth	r3, r3
 8004a96:	f003 0307 	and.w	r3, r3, #7
 8004a9a:	b29a      	uxth	r2, r3
 8004a9c:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8004a9e:	4313      	orrs	r3, r2
 8004aa0:	86fb      	strh	r3, [r7, #54]	; 0x36
        huart->Instance->BRR = brrtemp;
 8004aa2:	697b      	ldr	r3, [r7, #20]
 8004aa4:	681b      	ldr	r3, [r3, #0]
 8004aa6:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8004aa8:	60da      	str	r2, [r3, #12]
 8004aaa:	e0b9      	b.n	8004c20 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 8004aac:	2301      	movs	r3, #1
 8004aae:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 8004ab2:	e0b5      	b.n	8004c20 <UART_SetConfig+0xa94>
 8004ab4:	03d09000 	.word	0x03d09000
 8004ab8:	003d0900 	.word	0x003d0900
 8004abc:	08005318 	.word	0x08005318
 8004ac0:	58024400 	.word	0x58024400
      }
    }
  }
  else
  {
    switch (clocksource)
 8004ac4:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8004ac8:	2b20      	cmp	r3, #32
 8004aca:	dc49      	bgt.n	8004b60 <UART_SetConfig+0x9d4>
 8004acc:	2b00      	cmp	r3, #0
 8004ace:	db7c      	blt.n	8004bca <UART_SetConfig+0xa3e>
 8004ad0:	2b20      	cmp	r3, #32
 8004ad2:	d87a      	bhi.n	8004bca <UART_SetConfig+0xa3e>
 8004ad4:	a201      	add	r2, pc, #4	; (adr r2, 8004adc <UART_SetConfig+0x950>)
 8004ad6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004ada:	bf00      	nop
 8004adc:	08004b67 	.word	0x08004b67
 8004ae0:	08004b6f 	.word	0x08004b6f
 8004ae4:	08004bcb 	.word	0x08004bcb
 8004ae8:	08004bcb 	.word	0x08004bcb
 8004aec:	08004b77 	.word	0x08004b77
 8004af0:	08004bcb 	.word	0x08004bcb
 8004af4:	08004bcb 	.word	0x08004bcb
 8004af8:	08004bcb 	.word	0x08004bcb
 8004afc:	08004b87 	.word	0x08004b87
 8004b00:	08004bcb 	.word	0x08004bcb
 8004b04:	08004bcb 	.word	0x08004bcb
 8004b08:	08004bcb 	.word	0x08004bcb
 8004b0c:	08004bcb 	.word	0x08004bcb
 8004b10:	08004bcb 	.word	0x08004bcb
 8004b14:	08004bcb 	.word	0x08004bcb
 8004b18:	08004bcb 	.word	0x08004bcb
 8004b1c:	08004b97 	.word	0x08004b97
 8004b20:	08004bcb 	.word	0x08004bcb
 8004b24:	08004bcb 	.word	0x08004bcb
 8004b28:	08004bcb 	.word	0x08004bcb
 8004b2c:	08004bcb 	.word	0x08004bcb
 8004b30:	08004bcb 	.word	0x08004bcb
 8004b34:	08004bcb 	.word	0x08004bcb
 8004b38:	08004bcb 	.word	0x08004bcb
 8004b3c:	08004bcb 	.word	0x08004bcb
 8004b40:	08004bcb 	.word	0x08004bcb
 8004b44:	08004bcb 	.word	0x08004bcb
 8004b48:	08004bcb 	.word	0x08004bcb
 8004b4c:	08004bcb 	.word	0x08004bcb
 8004b50:	08004bcb 	.word	0x08004bcb
 8004b54:	08004bcb 	.word	0x08004bcb
 8004b58:	08004bcb 	.word	0x08004bcb
 8004b5c:	08004bbd 	.word	0x08004bbd
 8004b60:	2b40      	cmp	r3, #64	; 0x40
 8004b62:	d02e      	beq.n	8004bc2 <UART_SetConfig+0xa36>
 8004b64:	e031      	b.n	8004bca <UART_SetConfig+0xa3e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004b66:	f7fd fc29 	bl	80023bc <HAL_RCC_GetPCLK1Freq>
 8004b6a:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8004b6c:	e033      	b.n	8004bd6 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004b6e:	f7fd fc3b 	bl	80023e8 <HAL_RCC_GetPCLK2Freq>
 8004b72:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8004b74:	e02f      	b.n	8004bd6 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8004b76:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004b7a:	4618      	mov	r0, r3
 8004b7c:	f7fe feaa 	bl	80038d4 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8004b80:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004b82:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8004b84:	e027      	b.n	8004bd6 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8004b86:	f107 0318 	add.w	r3, r7, #24
 8004b8a:	4618      	mov	r0, r3
 8004b8c:	f7fe fff6 	bl	8003b7c <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8004b90:	69fb      	ldr	r3, [r7, #28]
 8004b92:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8004b94:	e01f      	b.n	8004bd6 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004b96:	4b2d      	ldr	r3, [pc, #180]	; (8004c4c <UART_SetConfig+0xac0>)
 8004b98:	681b      	ldr	r3, [r3, #0]
 8004b9a:	f003 0320 	and.w	r3, r3, #32
 8004b9e:	2b00      	cmp	r3, #0
 8004ba0:	d009      	beq.n	8004bb6 <UART_SetConfig+0xa2a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8004ba2:	4b2a      	ldr	r3, [pc, #168]	; (8004c4c <UART_SetConfig+0xac0>)
 8004ba4:	681b      	ldr	r3, [r3, #0]
 8004ba6:	08db      	lsrs	r3, r3, #3
 8004ba8:	f003 0303 	and.w	r3, r3, #3
 8004bac:	4a28      	ldr	r2, [pc, #160]	; (8004c50 <UART_SetConfig+0xac4>)
 8004bae:	fa22 f303 	lsr.w	r3, r2, r3
 8004bb2:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8004bb4:	e00f      	b.n	8004bd6 <UART_SetConfig+0xa4a>
          pclk = (uint32_t) HSI_VALUE;
 8004bb6:	4b26      	ldr	r3, [pc, #152]	; (8004c50 <UART_SetConfig+0xac4>)
 8004bb8:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8004bba:	e00c      	b.n	8004bd6 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8004bbc:	4b25      	ldr	r3, [pc, #148]	; (8004c54 <UART_SetConfig+0xac8>)
 8004bbe:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8004bc0:	e009      	b.n	8004bd6 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004bc2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004bc6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8004bc8:	e005      	b.n	8004bd6 <UART_SetConfig+0xa4a>
      default:
        pclk = 0U;
 8004bca:	2300      	movs	r3, #0
 8004bcc:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 8004bce:	2301      	movs	r3, #1
 8004bd0:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 8004bd4:	bf00      	nop
    }

    if (pclk != 0U)
 8004bd6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004bd8:	2b00      	cmp	r3, #0
 8004bda:	d021      	beq.n	8004c20 <UART_SetConfig+0xa94>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004bdc:	697b      	ldr	r3, [r7, #20]
 8004bde:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004be0:	4a1d      	ldr	r2, [pc, #116]	; (8004c58 <UART_SetConfig+0xacc>)
 8004be2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004be6:	461a      	mov	r2, r3
 8004be8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004bea:	fbb3 f2f2 	udiv	r2, r3, r2
 8004bee:	697b      	ldr	r3, [r7, #20]
 8004bf0:	685b      	ldr	r3, [r3, #4]
 8004bf2:	085b      	lsrs	r3, r3, #1
 8004bf4:	441a      	add	r2, r3
 8004bf6:	697b      	ldr	r3, [r7, #20]
 8004bf8:	685b      	ldr	r3, [r3, #4]
 8004bfa:	fbb2 f3f3 	udiv	r3, r2, r3
 8004bfe:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004c00:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004c02:	2b0f      	cmp	r3, #15
 8004c04:	d909      	bls.n	8004c1a <UART_SetConfig+0xa8e>
 8004c06:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004c08:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004c0c:	d205      	bcs.n	8004c1a <UART_SetConfig+0xa8e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8004c0e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004c10:	b29a      	uxth	r2, r3
 8004c12:	697b      	ldr	r3, [r7, #20]
 8004c14:	681b      	ldr	r3, [r3, #0]
 8004c16:	60da      	str	r2, [r3, #12]
 8004c18:	e002      	b.n	8004c20 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 8004c1a:	2301      	movs	r3, #1
 8004c1c:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8004c20:	697b      	ldr	r3, [r7, #20]
 8004c22:	2201      	movs	r2, #1
 8004c24:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8004c28:	697b      	ldr	r3, [r7, #20]
 8004c2a:	2201      	movs	r2, #1
 8004c2c:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004c30:	697b      	ldr	r3, [r7, #20]
 8004c32:	2200      	movs	r2, #0
 8004c34:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 8004c36:	697b      	ldr	r3, [r7, #20]
 8004c38:	2200      	movs	r2, #0
 8004c3a:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 8004c3c:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
}
 8004c40:	4618      	mov	r0, r3
 8004c42:	3748      	adds	r7, #72	; 0x48
 8004c44:	46bd      	mov	sp, r7
 8004c46:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004c4a:	bf00      	nop
 8004c4c:	58024400 	.word	0x58024400
 8004c50:	03d09000 	.word	0x03d09000
 8004c54:	003d0900 	.word	0x003d0900
 8004c58:	08005318 	.word	0x08005318

08004c5c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004c5c:	b480      	push	{r7}
 8004c5e:	b083      	sub	sp, #12
 8004c60:	af00      	add	r7, sp, #0
 8004c62:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004c68:	f003 0301 	and.w	r3, r3, #1
 8004c6c:	2b00      	cmp	r3, #0
 8004c6e:	d00a      	beq.n	8004c86 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	681b      	ldr	r3, [r3, #0]
 8004c74:	685b      	ldr	r3, [r3, #4]
 8004c76:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	681b      	ldr	r3, [r3, #0]
 8004c82:	430a      	orrs	r2, r1
 8004c84:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004c8a:	f003 0302 	and.w	r3, r3, #2
 8004c8e:	2b00      	cmp	r3, #0
 8004c90:	d00a      	beq.n	8004ca8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	681b      	ldr	r3, [r3, #0]
 8004c96:	685b      	ldr	r3, [r3, #4]
 8004c98:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	681b      	ldr	r3, [r3, #0]
 8004ca4:	430a      	orrs	r2, r1
 8004ca6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004cac:	f003 0304 	and.w	r3, r3, #4
 8004cb0:	2b00      	cmp	r3, #0
 8004cb2:	d00a      	beq.n	8004cca <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	681b      	ldr	r3, [r3, #0]
 8004cb8:	685b      	ldr	r3, [r3, #4]
 8004cba:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	681b      	ldr	r3, [r3, #0]
 8004cc6:	430a      	orrs	r2, r1
 8004cc8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004cce:	f003 0308 	and.w	r3, r3, #8
 8004cd2:	2b00      	cmp	r3, #0
 8004cd4:	d00a      	beq.n	8004cec <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	681b      	ldr	r3, [r3, #0]
 8004cda:	685b      	ldr	r3, [r3, #4]
 8004cdc:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	681b      	ldr	r3, [r3, #0]
 8004ce8:	430a      	orrs	r2, r1
 8004cea:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004cf0:	f003 0310 	and.w	r3, r3, #16
 8004cf4:	2b00      	cmp	r3, #0
 8004cf6:	d00a      	beq.n	8004d0e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	681b      	ldr	r3, [r3, #0]
 8004cfc:	689b      	ldr	r3, [r3, #8]
 8004cfe:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	681b      	ldr	r3, [r3, #0]
 8004d0a:	430a      	orrs	r2, r1
 8004d0c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004d12:	f003 0320 	and.w	r3, r3, #32
 8004d16:	2b00      	cmp	r3, #0
 8004d18:	d00a      	beq.n	8004d30 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	681b      	ldr	r3, [r3, #0]
 8004d1e:	689b      	ldr	r3, [r3, #8]
 8004d20:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	681b      	ldr	r3, [r3, #0]
 8004d2c:	430a      	orrs	r2, r1
 8004d2e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004d34:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004d38:	2b00      	cmp	r3, #0
 8004d3a:	d01a      	beq.n	8004d72 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	681b      	ldr	r3, [r3, #0]
 8004d40:	685b      	ldr	r3, [r3, #4]
 8004d42:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	681b      	ldr	r3, [r3, #0]
 8004d4e:	430a      	orrs	r2, r1
 8004d50:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004d56:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004d5a:	d10a      	bne.n	8004d72 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	681b      	ldr	r3, [r3, #0]
 8004d60:	685b      	ldr	r3, [r3, #4]
 8004d62:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	681b      	ldr	r3, [r3, #0]
 8004d6e:	430a      	orrs	r2, r1
 8004d70:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004d76:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004d7a:	2b00      	cmp	r3, #0
 8004d7c:	d00a      	beq.n	8004d94 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	681b      	ldr	r3, [r3, #0]
 8004d82:	685b      	ldr	r3, [r3, #4]
 8004d84:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	681b      	ldr	r3, [r3, #0]
 8004d90:	430a      	orrs	r2, r1
 8004d92:	605a      	str	r2, [r3, #4]
  }
}
 8004d94:	bf00      	nop
 8004d96:	370c      	adds	r7, #12
 8004d98:	46bd      	mov	sp, r7
 8004d9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d9e:	4770      	bx	lr

08004da0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004da0:	b580      	push	{r7, lr}
 8004da2:	b098      	sub	sp, #96	; 0x60
 8004da4:	af02      	add	r7, sp, #8
 8004da6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	2200      	movs	r2, #0
 8004dac:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004db0:	f7fb ffac 	bl	8000d0c <HAL_GetTick>
 8004db4:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	681b      	ldr	r3, [r3, #0]
 8004dba:	681b      	ldr	r3, [r3, #0]
 8004dbc:	f003 0308 	and.w	r3, r3, #8
 8004dc0:	2b08      	cmp	r3, #8
 8004dc2:	d12f      	bne.n	8004e24 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004dc4:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004dc8:	9300      	str	r3, [sp, #0]
 8004dca:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004dcc:	2200      	movs	r2, #0
 8004dce:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8004dd2:	6878      	ldr	r0, [r7, #4]
 8004dd4:	f000 f88e 	bl	8004ef4 <UART_WaitOnFlagUntilTimeout>
 8004dd8:	4603      	mov	r3, r0
 8004dda:	2b00      	cmp	r3, #0
 8004ddc:	d022      	beq.n	8004e24 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	681b      	ldr	r3, [r3, #0]
 8004de2:	63bb      	str	r3, [r7, #56]	; 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004de4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004de6:	e853 3f00 	ldrex	r3, [r3]
 8004dea:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8004dec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004dee:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004df2:	653b      	str	r3, [r7, #80]	; 0x50
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	681b      	ldr	r3, [r3, #0]
 8004df8:	461a      	mov	r2, r3
 8004dfa:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004dfc:	647b      	str	r3, [r7, #68]	; 0x44
 8004dfe:	643a      	str	r2, [r7, #64]	; 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004e00:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8004e02:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004e04:	e841 2300 	strex	r3, r2, [r1]
 8004e08:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8004e0a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004e0c:	2b00      	cmp	r3, #0
 8004e0e:	d1e6      	bne.n	8004dde <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	2220      	movs	r2, #32
 8004e14:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      __HAL_UNLOCK(huart);
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	2200      	movs	r2, #0
 8004e1c:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004e20:	2303      	movs	r3, #3
 8004e22:	e063      	b.n	8004eec <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	681b      	ldr	r3, [r3, #0]
 8004e28:	681b      	ldr	r3, [r3, #0]
 8004e2a:	f003 0304 	and.w	r3, r3, #4
 8004e2e:	2b04      	cmp	r3, #4
 8004e30:	d149      	bne.n	8004ec6 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004e32:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004e36:	9300      	str	r3, [sp, #0]
 8004e38:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004e3a:	2200      	movs	r2, #0
 8004e3c:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8004e40:	6878      	ldr	r0, [r7, #4]
 8004e42:	f000 f857 	bl	8004ef4 <UART_WaitOnFlagUntilTimeout>
 8004e46:	4603      	mov	r3, r0
 8004e48:	2b00      	cmp	r3, #0
 8004e4a:	d03c      	beq.n	8004ec6 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	681b      	ldr	r3, [r3, #0]
 8004e50:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004e52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e54:	e853 3f00 	ldrex	r3, [r3]
 8004e58:	623b      	str	r3, [r7, #32]
   return(result);
 8004e5a:	6a3b      	ldr	r3, [r7, #32]
 8004e5c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004e60:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	681b      	ldr	r3, [r3, #0]
 8004e66:	461a      	mov	r2, r3
 8004e68:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004e6a:	633b      	str	r3, [r7, #48]	; 0x30
 8004e6c:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004e6e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004e70:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004e72:	e841 2300 	strex	r3, r2, [r1]
 8004e76:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8004e78:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004e7a:	2b00      	cmp	r3, #0
 8004e7c:	d1e6      	bne.n	8004e4c <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	681b      	ldr	r3, [r3, #0]
 8004e82:	3308      	adds	r3, #8
 8004e84:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004e86:	693b      	ldr	r3, [r7, #16]
 8004e88:	e853 3f00 	ldrex	r3, [r3]
 8004e8c:	60fb      	str	r3, [r7, #12]
   return(result);
 8004e8e:	68fb      	ldr	r3, [r7, #12]
 8004e90:	f023 0301 	bic.w	r3, r3, #1
 8004e94:	64bb      	str	r3, [r7, #72]	; 0x48
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	681b      	ldr	r3, [r3, #0]
 8004e9a:	3308      	adds	r3, #8
 8004e9c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004e9e:	61fa      	str	r2, [r7, #28]
 8004ea0:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004ea2:	69b9      	ldr	r1, [r7, #24]
 8004ea4:	69fa      	ldr	r2, [r7, #28]
 8004ea6:	e841 2300 	strex	r3, r2, [r1]
 8004eaa:	617b      	str	r3, [r7, #20]
   return(result);
 8004eac:	697b      	ldr	r3, [r7, #20]
 8004eae:	2b00      	cmp	r3, #0
 8004eb0:	d1e5      	bne.n	8004e7e <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	2220      	movs	r2, #32
 8004eb6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	2200      	movs	r2, #0
 8004ebe:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004ec2:	2303      	movs	r3, #3
 8004ec4:	e012      	b.n	8004eec <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	2220      	movs	r2, #32
 8004eca:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	2220      	movs	r2, #32
 8004ed2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	2200      	movs	r2, #0
 8004eda:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	2200      	movs	r2, #0
 8004ee0:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	2200      	movs	r2, #0
 8004ee6:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8004eea:	2300      	movs	r3, #0
}
 8004eec:	4618      	mov	r0, r3
 8004eee:	3758      	adds	r7, #88	; 0x58
 8004ef0:	46bd      	mov	sp, r7
 8004ef2:	bd80      	pop	{r7, pc}

08004ef4 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004ef4:	b580      	push	{r7, lr}
 8004ef6:	b084      	sub	sp, #16
 8004ef8:	af00      	add	r7, sp, #0
 8004efa:	60f8      	str	r0, [r7, #12]
 8004efc:	60b9      	str	r1, [r7, #8]
 8004efe:	603b      	str	r3, [r7, #0]
 8004f00:	4613      	mov	r3, r2
 8004f02:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004f04:	e049      	b.n	8004f9a <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004f06:	69bb      	ldr	r3, [r7, #24]
 8004f08:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004f0c:	d045      	beq.n	8004f9a <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004f0e:	f7fb fefd 	bl	8000d0c <HAL_GetTick>
 8004f12:	4602      	mov	r2, r0
 8004f14:	683b      	ldr	r3, [r7, #0]
 8004f16:	1ad3      	subs	r3, r2, r3
 8004f18:	69ba      	ldr	r2, [r7, #24]
 8004f1a:	429a      	cmp	r2, r3
 8004f1c:	d302      	bcc.n	8004f24 <UART_WaitOnFlagUntilTimeout+0x30>
 8004f1e:	69bb      	ldr	r3, [r7, #24]
 8004f20:	2b00      	cmp	r3, #0
 8004f22:	d101      	bne.n	8004f28 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8004f24:	2303      	movs	r3, #3
 8004f26:	e048      	b.n	8004fba <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8004f28:	68fb      	ldr	r3, [r7, #12]
 8004f2a:	681b      	ldr	r3, [r3, #0]
 8004f2c:	681b      	ldr	r3, [r3, #0]
 8004f2e:	f003 0304 	and.w	r3, r3, #4
 8004f32:	2b00      	cmp	r3, #0
 8004f34:	d031      	beq.n	8004f9a <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8004f36:	68fb      	ldr	r3, [r7, #12]
 8004f38:	681b      	ldr	r3, [r3, #0]
 8004f3a:	69db      	ldr	r3, [r3, #28]
 8004f3c:	f003 0308 	and.w	r3, r3, #8
 8004f40:	2b08      	cmp	r3, #8
 8004f42:	d110      	bne.n	8004f66 <UART_WaitOnFlagUntilTimeout+0x72>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8004f44:	68fb      	ldr	r3, [r7, #12]
 8004f46:	681b      	ldr	r3, [r3, #0]
 8004f48:	2208      	movs	r2, #8
 8004f4a:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 8004f4c:	68f8      	ldr	r0, [r7, #12]
 8004f4e:	f000 f839 	bl	8004fc4 <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 8004f52:	68fb      	ldr	r3, [r7, #12]
 8004f54:	2208      	movs	r2, #8
 8004f56:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 8004f5a:	68fb      	ldr	r3, [r7, #12]
 8004f5c:	2200      	movs	r2, #0
 8004f5e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

           return HAL_ERROR;
 8004f62:	2301      	movs	r3, #1
 8004f64:	e029      	b.n	8004fba <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004f66:	68fb      	ldr	r3, [r7, #12]
 8004f68:	681b      	ldr	r3, [r3, #0]
 8004f6a:	69db      	ldr	r3, [r3, #28]
 8004f6c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004f70:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004f74:	d111      	bne.n	8004f9a <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004f76:	68fb      	ldr	r3, [r7, #12]
 8004f78:	681b      	ldr	r3, [r3, #0]
 8004f7a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004f7e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004f80:	68f8      	ldr	r0, [r7, #12]
 8004f82:	f000 f81f 	bl	8004fc4 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004f86:	68fb      	ldr	r3, [r7, #12]
 8004f88:	2220      	movs	r2, #32
 8004f8a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004f8e:	68fb      	ldr	r3, [r7, #12]
 8004f90:	2200      	movs	r2, #0
 8004f92:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 8004f96:	2303      	movs	r3, #3
 8004f98:	e00f      	b.n	8004fba <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004f9a:	68fb      	ldr	r3, [r7, #12]
 8004f9c:	681b      	ldr	r3, [r3, #0]
 8004f9e:	69da      	ldr	r2, [r3, #28]
 8004fa0:	68bb      	ldr	r3, [r7, #8]
 8004fa2:	4013      	ands	r3, r2
 8004fa4:	68ba      	ldr	r2, [r7, #8]
 8004fa6:	429a      	cmp	r2, r3
 8004fa8:	bf0c      	ite	eq
 8004faa:	2301      	moveq	r3, #1
 8004fac:	2300      	movne	r3, #0
 8004fae:	b2db      	uxtb	r3, r3
 8004fb0:	461a      	mov	r2, r3
 8004fb2:	79fb      	ldrb	r3, [r7, #7]
 8004fb4:	429a      	cmp	r2, r3
 8004fb6:	d0a6      	beq.n	8004f06 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004fb8:	2300      	movs	r3, #0
}
 8004fba:	4618      	mov	r0, r3
 8004fbc:	3710      	adds	r7, #16
 8004fbe:	46bd      	mov	sp, r7
 8004fc0:	bd80      	pop	{r7, pc}
	...

08004fc4 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004fc4:	b480      	push	{r7}
 8004fc6:	b095      	sub	sp, #84	; 0x54
 8004fc8:	af00      	add	r7, sp, #0
 8004fca:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	681b      	ldr	r3, [r3, #0]
 8004fd0:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004fd2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004fd4:	e853 3f00 	ldrex	r3, [r3]
 8004fd8:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8004fda:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004fdc:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004fe0:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	681b      	ldr	r3, [r3, #0]
 8004fe6:	461a      	mov	r2, r3
 8004fe8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004fea:	643b      	str	r3, [r7, #64]	; 0x40
 8004fec:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004fee:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8004ff0:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8004ff2:	e841 2300 	strex	r3, r2, [r1]
 8004ff6:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8004ff8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004ffa:	2b00      	cmp	r3, #0
 8004ffc:	d1e6      	bne.n	8004fcc <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	681b      	ldr	r3, [r3, #0]
 8005002:	3308      	adds	r3, #8
 8005004:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005006:	6a3b      	ldr	r3, [r7, #32]
 8005008:	e853 3f00 	ldrex	r3, [r3]
 800500c:	61fb      	str	r3, [r7, #28]
   return(result);
 800500e:	69fa      	ldr	r2, [r7, #28]
 8005010:	4b1e      	ldr	r3, [pc, #120]	; (800508c <UART_EndRxTransfer+0xc8>)
 8005012:	4013      	ands	r3, r2
 8005014:	64bb      	str	r3, [r7, #72]	; 0x48
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	681b      	ldr	r3, [r3, #0]
 800501a:	3308      	adds	r3, #8
 800501c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800501e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005020:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005022:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005024:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005026:	e841 2300 	strex	r3, r2, [r1]
 800502a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800502c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800502e:	2b00      	cmp	r3, #0
 8005030:	d1e5      	bne.n	8004ffe <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005036:	2b01      	cmp	r3, #1
 8005038:	d118      	bne.n	800506c <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	681b      	ldr	r3, [r3, #0]
 800503e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005040:	68fb      	ldr	r3, [r7, #12]
 8005042:	e853 3f00 	ldrex	r3, [r3]
 8005046:	60bb      	str	r3, [r7, #8]
   return(result);
 8005048:	68bb      	ldr	r3, [r7, #8]
 800504a:	f023 0310 	bic.w	r3, r3, #16
 800504e:	647b      	str	r3, [r7, #68]	; 0x44
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	681b      	ldr	r3, [r3, #0]
 8005054:	461a      	mov	r2, r3
 8005056:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005058:	61bb      	str	r3, [r7, #24]
 800505a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800505c:	6979      	ldr	r1, [r7, #20]
 800505e:	69ba      	ldr	r2, [r7, #24]
 8005060:	e841 2300 	strex	r3, r2, [r1]
 8005064:	613b      	str	r3, [r7, #16]
   return(result);
 8005066:	693b      	ldr	r3, [r7, #16]
 8005068:	2b00      	cmp	r3, #0
 800506a:	d1e6      	bne.n	800503a <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	2220      	movs	r2, #32
 8005070:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	2200      	movs	r2, #0
 8005078:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	2200      	movs	r2, #0
 800507e:	675a      	str	r2, [r3, #116]	; 0x74
}
 8005080:	bf00      	nop
 8005082:	3754      	adds	r7, #84	; 0x54
 8005084:	46bd      	mov	sp, r7
 8005086:	f85d 7b04 	ldr.w	r7, [sp], #4
 800508a:	4770      	bx	lr
 800508c:	effffffe 	.word	0xeffffffe

08005090 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8005090:	b480      	push	{r7}
 8005092:	b085      	sub	sp, #20
 8005094:	af00      	add	r7, sp, #0
 8005096:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800509e:	2b01      	cmp	r3, #1
 80050a0:	d101      	bne.n	80050a6 <HAL_UARTEx_DisableFifoMode+0x16>
 80050a2:	2302      	movs	r3, #2
 80050a4:	e027      	b.n	80050f6 <HAL_UARTEx_DisableFifoMode+0x66>
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	2201      	movs	r2, #1
 80050aa:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	2224      	movs	r2, #36	; 0x24
 80050b2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	681b      	ldr	r3, [r3, #0]
 80050ba:	681b      	ldr	r3, [r3, #0]
 80050bc:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	681b      	ldr	r3, [r3, #0]
 80050c2:	681a      	ldr	r2, [r3, #0]
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	681b      	ldr	r3, [r3, #0]
 80050c8:	f022 0201 	bic.w	r2, r2, #1
 80050cc:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 80050ce:	68fb      	ldr	r3, [r7, #12]
 80050d0:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 80050d4:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	2200      	movs	r2, #0
 80050da:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	681b      	ldr	r3, [r3, #0]
 80050e0:	68fa      	ldr	r2, [r7, #12]
 80050e2:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	2220      	movs	r2, #32
 80050e8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	2200      	movs	r2, #0
 80050f0:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 80050f4:	2300      	movs	r3, #0
}
 80050f6:	4618      	mov	r0, r3
 80050f8:	3714      	adds	r7, #20
 80050fa:	46bd      	mov	sp, r7
 80050fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005100:	4770      	bx	lr

08005102 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8005102:	b580      	push	{r7, lr}
 8005104:	b084      	sub	sp, #16
 8005106:	af00      	add	r7, sp, #0
 8005108:	6078      	str	r0, [r7, #4]
 800510a:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8005112:	2b01      	cmp	r3, #1
 8005114:	d101      	bne.n	800511a <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8005116:	2302      	movs	r3, #2
 8005118:	e02d      	b.n	8005176 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	2201      	movs	r2, #1
 800511e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	2224      	movs	r2, #36	; 0x24
 8005126:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	681b      	ldr	r3, [r3, #0]
 800512e:	681b      	ldr	r3, [r3, #0]
 8005130:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	681b      	ldr	r3, [r3, #0]
 8005136:	681a      	ldr	r2, [r3, #0]
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	681b      	ldr	r3, [r3, #0]
 800513c:	f022 0201 	bic.w	r2, r2, #1
 8005140:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	681b      	ldr	r3, [r3, #0]
 8005146:	689b      	ldr	r3, [r3, #8]
 8005148:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	681b      	ldr	r3, [r3, #0]
 8005150:	683a      	ldr	r2, [r7, #0]
 8005152:	430a      	orrs	r2, r1
 8005154:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8005156:	6878      	ldr	r0, [r7, #4]
 8005158:	f000 f850 	bl	80051fc <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	681b      	ldr	r3, [r3, #0]
 8005160:	68fa      	ldr	r2, [r7, #12]
 8005162:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	2220      	movs	r2, #32
 8005168:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	2200      	movs	r2, #0
 8005170:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8005174:	2300      	movs	r3, #0
}
 8005176:	4618      	mov	r0, r3
 8005178:	3710      	adds	r7, #16
 800517a:	46bd      	mov	sp, r7
 800517c:	bd80      	pop	{r7, pc}

0800517e <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800517e:	b580      	push	{r7, lr}
 8005180:	b084      	sub	sp, #16
 8005182:	af00      	add	r7, sp, #0
 8005184:	6078      	str	r0, [r7, #4]
 8005186:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800518e:	2b01      	cmp	r3, #1
 8005190:	d101      	bne.n	8005196 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8005192:	2302      	movs	r3, #2
 8005194:	e02d      	b.n	80051f2 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	2201      	movs	r2, #1
 800519a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	2224      	movs	r2, #36	; 0x24
 80051a2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	681b      	ldr	r3, [r3, #0]
 80051aa:	681b      	ldr	r3, [r3, #0]
 80051ac:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	681b      	ldr	r3, [r3, #0]
 80051b2:	681a      	ldr	r2, [r3, #0]
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	681b      	ldr	r3, [r3, #0]
 80051b8:	f022 0201 	bic.w	r2, r2, #1
 80051bc:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	681b      	ldr	r3, [r3, #0]
 80051c2:	689b      	ldr	r3, [r3, #8]
 80051c4:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	681b      	ldr	r3, [r3, #0]
 80051cc:	683a      	ldr	r2, [r7, #0]
 80051ce:	430a      	orrs	r2, r1
 80051d0:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80051d2:	6878      	ldr	r0, [r7, #4]
 80051d4:	f000 f812 	bl	80051fc <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	681b      	ldr	r3, [r3, #0]
 80051dc:	68fa      	ldr	r2, [r7, #12]
 80051de:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	2220      	movs	r2, #32
 80051e4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	2200      	movs	r2, #0
 80051ec:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 80051f0:	2300      	movs	r3, #0
}
 80051f2:	4618      	mov	r0, r3
 80051f4:	3710      	adds	r7, #16
 80051f6:	46bd      	mov	sp, r7
 80051f8:	bd80      	pop	{r7, pc}
	...

080051fc <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 80051fc:	b480      	push	{r7}
 80051fe:	b085      	sub	sp, #20
 8005200:	af00      	add	r7, sp, #0
 8005202:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005208:	2b00      	cmp	r3, #0
 800520a:	d108      	bne.n	800521e <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	2201      	movs	r2, #1
 8005210:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	2201      	movs	r2, #1
 8005218:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800521c:	e031      	b.n	8005282 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800521e:	2310      	movs	r3, #16
 8005220:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8005222:	2310      	movs	r3, #16
 8005224:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	681b      	ldr	r3, [r3, #0]
 800522a:	689b      	ldr	r3, [r3, #8]
 800522c:	0e5b      	lsrs	r3, r3, #25
 800522e:	b2db      	uxtb	r3, r3
 8005230:	f003 0307 	and.w	r3, r3, #7
 8005234:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	681b      	ldr	r3, [r3, #0]
 800523a:	689b      	ldr	r3, [r3, #8]
 800523c:	0f5b      	lsrs	r3, r3, #29
 800523e:	b2db      	uxtb	r3, r3
 8005240:	f003 0307 	and.w	r3, r3, #7
 8005244:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8005246:	7bbb      	ldrb	r3, [r7, #14]
 8005248:	7b3a      	ldrb	r2, [r7, #12]
 800524a:	4911      	ldr	r1, [pc, #68]	; (8005290 <UARTEx_SetNbDataToProcess+0x94>)
 800524c:	5c8a      	ldrb	r2, [r1, r2]
 800524e:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8005252:	7b3a      	ldrb	r2, [r7, #12]
 8005254:	490f      	ldr	r1, [pc, #60]	; (8005294 <UARTEx_SetNbDataToProcess+0x98>)
 8005256:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8005258:	fb93 f3f2 	sdiv	r3, r3, r2
 800525c:	b29a      	uxth	r2, r3
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8005264:	7bfb      	ldrb	r3, [r7, #15]
 8005266:	7b7a      	ldrb	r2, [r7, #13]
 8005268:	4909      	ldr	r1, [pc, #36]	; (8005290 <UARTEx_SetNbDataToProcess+0x94>)
 800526a:	5c8a      	ldrb	r2, [r1, r2]
 800526c:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8005270:	7b7a      	ldrb	r2, [r7, #13]
 8005272:	4908      	ldr	r1, [pc, #32]	; (8005294 <UARTEx_SetNbDataToProcess+0x98>)
 8005274:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8005276:	fb93 f3f2 	sdiv	r3, r3, r2
 800527a:	b29a      	uxth	r2, r3
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8005282:	bf00      	nop
 8005284:	3714      	adds	r7, #20
 8005286:	46bd      	mov	sp, r7
 8005288:	f85d 7b04 	ldr.w	r7, [sp], #4
 800528c:	4770      	bx	lr
 800528e:	bf00      	nop
 8005290:	08005330 	.word	0x08005330
 8005294:	08005338 	.word	0x08005338

08005298 <memset>:
 8005298:	4402      	add	r2, r0
 800529a:	4603      	mov	r3, r0
 800529c:	4293      	cmp	r3, r2
 800529e:	d100      	bne.n	80052a2 <memset+0xa>
 80052a0:	4770      	bx	lr
 80052a2:	f803 1b01 	strb.w	r1, [r3], #1
 80052a6:	e7f9      	b.n	800529c <memset+0x4>

080052a8 <__libc_init_array>:
 80052a8:	b570      	push	{r4, r5, r6, lr}
 80052aa:	4d0d      	ldr	r5, [pc, #52]	; (80052e0 <__libc_init_array+0x38>)
 80052ac:	4c0d      	ldr	r4, [pc, #52]	; (80052e4 <__libc_init_array+0x3c>)
 80052ae:	1b64      	subs	r4, r4, r5
 80052b0:	10a4      	asrs	r4, r4, #2
 80052b2:	2600      	movs	r6, #0
 80052b4:	42a6      	cmp	r6, r4
 80052b6:	d109      	bne.n	80052cc <__libc_init_array+0x24>
 80052b8:	4d0b      	ldr	r5, [pc, #44]	; (80052e8 <__libc_init_array+0x40>)
 80052ba:	4c0c      	ldr	r4, [pc, #48]	; (80052ec <__libc_init_array+0x44>)
 80052bc:	f000 f818 	bl	80052f0 <_init>
 80052c0:	1b64      	subs	r4, r4, r5
 80052c2:	10a4      	asrs	r4, r4, #2
 80052c4:	2600      	movs	r6, #0
 80052c6:	42a6      	cmp	r6, r4
 80052c8:	d105      	bne.n	80052d6 <__libc_init_array+0x2e>
 80052ca:	bd70      	pop	{r4, r5, r6, pc}
 80052cc:	f855 3b04 	ldr.w	r3, [r5], #4
 80052d0:	4798      	blx	r3
 80052d2:	3601      	adds	r6, #1
 80052d4:	e7ee      	b.n	80052b4 <__libc_init_array+0xc>
 80052d6:	f855 3b04 	ldr.w	r3, [r5], #4
 80052da:	4798      	blx	r3
 80052dc:	3601      	adds	r6, #1
 80052de:	e7f2      	b.n	80052c6 <__libc_init_array+0x1e>
 80052e0:	08005348 	.word	0x08005348
 80052e4:	08005348 	.word	0x08005348
 80052e8:	08005348 	.word	0x08005348
 80052ec:	0800534c 	.word	0x0800534c

080052f0 <_init>:
 80052f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80052f2:	bf00      	nop
 80052f4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80052f6:	bc08      	pop	{r3}
 80052f8:	469e      	mov	lr, r3
 80052fa:	4770      	bx	lr

080052fc <_fini>:
 80052fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80052fe:	bf00      	nop
 8005300:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005302:	bc08      	pop	{r3}
 8005304:	469e      	mov	lr, r3
 8005306:	4770      	bx	lr
