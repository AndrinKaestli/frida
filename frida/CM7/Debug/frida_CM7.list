
frida_CM7.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0001a11c  080002a0  080002a0  000012a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001fd8  0801a3bc  0801a3bc  0001b3bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0801c394  0801c394  0001e0b4  2**0
                  CONTENTS
  4 .ARM          00000008  0801c394  0801c394  0001d394  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0801c39c  0801c39c  0001e0b4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0801c39c  0801c39c  0001d39c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0801c3a0  0801c3a0  0001d3a0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000b4  24000000  0801c3a4  0001e000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00002070  240000b4  0801c458  0001e0b4  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  24002124  0801c458  0001e124  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  0001e0b4  2**0
                  CONTENTS, READONLY
 12 .debug_info   00034fb2  00000000  00000000  0001e0e2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00006835  00000000  00000000  00053094  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000027c8  00000000  00000000  000598d0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00002049  00000000  00000000  0005c098  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0004a980  00000000  00000000  0005e0e1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000332ba  00000000  00000000  000a8a61  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    001c1d93  00000000  00000000  000dbd1b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0029daae  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000b7cc  00000000  00000000  0029daf4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000060  00000000  00000000  002a92c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	@ (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	@ (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	@ (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	240000b4 	.word	0x240000b4
 80002bc:	00000000 	.word	0x00000000
 80002c0:	0801a3a4 	.word	0x0801a3a4

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	@ (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	@ (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	@ (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	240000b8 	.word	0x240000b8
 80002dc:	0801a3a4 	.word	0x0801a3a4

080002e0 <memchr>:
 80002e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80002e4:	2a10      	cmp	r2, #16
 80002e6:	db2b      	blt.n	8000340 <memchr+0x60>
 80002e8:	f010 0f07 	tst.w	r0, #7
 80002ec:	d008      	beq.n	8000300 <memchr+0x20>
 80002ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002f2:	3a01      	subs	r2, #1
 80002f4:	428b      	cmp	r3, r1
 80002f6:	d02d      	beq.n	8000354 <memchr+0x74>
 80002f8:	f010 0f07 	tst.w	r0, #7
 80002fc:	b342      	cbz	r2, 8000350 <memchr+0x70>
 80002fe:	d1f6      	bne.n	80002ee <memchr+0xe>
 8000300:	b4f0      	push	{r4, r5, r6, r7}
 8000302:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000306:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800030a:	f022 0407 	bic.w	r4, r2, #7
 800030e:	f07f 0700 	mvns.w	r7, #0
 8000312:	2300      	movs	r3, #0
 8000314:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000318:	3c08      	subs	r4, #8
 800031a:	ea85 0501 	eor.w	r5, r5, r1
 800031e:	ea86 0601 	eor.w	r6, r6, r1
 8000322:	fa85 f547 	uadd8	r5, r5, r7
 8000326:	faa3 f587 	sel	r5, r3, r7
 800032a:	fa86 f647 	uadd8	r6, r6, r7
 800032e:	faa5 f687 	sel	r6, r5, r7
 8000332:	b98e      	cbnz	r6, 8000358 <memchr+0x78>
 8000334:	d1ee      	bne.n	8000314 <memchr+0x34>
 8000336:	bcf0      	pop	{r4, r5, r6, r7}
 8000338:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800033c:	f002 0207 	and.w	r2, r2, #7
 8000340:	b132      	cbz	r2, 8000350 <memchr+0x70>
 8000342:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000346:	3a01      	subs	r2, #1
 8000348:	ea83 0301 	eor.w	r3, r3, r1
 800034c:	b113      	cbz	r3, 8000354 <memchr+0x74>
 800034e:	d1f8      	bne.n	8000342 <memchr+0x62>
 8000350:	2000      	movs	r0, #0
 8000352:	4770      	bx	lr
 8000354:	3801      	subs	r0, #1
 8000356:	4770      	bx	lr
 8000358:	2d00      	cmp	r5, #0
 800035a:	bf06      	itte	eq
 800035c:	4635      	moveq	r5, r6
 800035e:	3803      	subeq	r0, #3
 8000360:	3807      	subne	r0, #7
 8000362:	f015 0f01 	tst.w	r5, #1
 8000366:	d107      	bne.n	8000378 <memchr+0x98>
 8000368:	3001      	adds	r0, #1
 800036a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800036e:	bf02      	ittt	eq
 8000370:	3001      	addeq	r0, #1
 8000372:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000376:	3001      	addeq	r0, #1
 8000378:	bcf0      	pop	{r4, r5, r6, r7}
 800037a:	3801      	subs	r0, #1
 800037c:	4770      	bx	lr
 800037e:	bf00      	nop

08000380 <strlen>:
 8000380:	4603      	mov	r3, r0
 8000382:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000386:	2a00      	cmp	r2, #0
 8000388:	d1fb      	bne.n	8000382 <strlen+0x2>
 800038a:	1a18      	subs	r0, r3, r0
 800038c:	3801      	subs	r0, #1
 800038e:	4770      	bx	lr

08000390 <__aeabi_uldivmod>:
 8000390:	b953      	cbnz	r3, 80003a8 <__aeabi_uldivmod+0x18>
 8000392:	b94a      	cbnz	r2, 80003a8 <__aeabi_uldivmod+0x18>
 8000394:	2900      	cmp	r1, #0
 8000396:	bf08      	it	eq
 8000398:	2800      	cmpeq	r0, #0
 800039a:	bf1c      	itt	ne
 800039c:	f04f 31ff 	movne.w	r1, #4294967295
 80003a0:	f04f 30ff 	movne.w	r0, #4294967295
 80003a4:	f000 b96a 	b.w	800067c <__aeabi_idiv0>
 80003a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80003ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80003b0:	f000 f806 	bl	80003c0 <__udivmoddi4>
 80003b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80003b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80003bc:	b004      	add	sp, #16
 80003be:	4770      	bx	lr

080003c0 <__udivmoddi4>:
 80003c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80003c4:	9d08      	ldr	r5, [sp, #32]
 80003c6:	460c      	mov	r4, r1
 80003c8:	2b00      	cmp	r3, #0
 80003ca:	d14e      	bne.n	800046a <__udivmoddi4+0xaa>
 80003cc:	4694      	mov	ip, r2
 80003ce:	458c      	cmp	ip, r1
 80003d0:	4686      	mov	lr, r0
 80003d2:	fab2 f282 	clz	r2, r2
 80003d6:	d962      	bls.n	800049e <__udivmoddi4+0xde>
 80003d8:	b14a      	cbz	r2, 80003ee <__udivmoddi4+0x2e>
 80003da:	f1c2 0320 	rsb	r3, r2, #32
 80003de:	4091      	lsls	r1, r2
 80003e0:	fa20 f303 	lsr.w	r3, r0, r3
 80003e4:	fa0c fc02 	lsl.w	ip, ip, r2
 80003e8:	4319      	orrs	r1, r3
 80003ea:	fa00 fe02 	lsl.w	lr, r0, r2
 80003ee:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003f2:	fa1f f68c 	uxth.w	r6, ip
 80003f6:	fbb1 f4f7 	udiv	r4, r1, r7
 80003fa:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80003fe:	fb07 1114 	mls	r1, r7, r4, r1
 8000402:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000406:	fb04 f106 	mul.w	r1, r4, r6
 800040a:	4299      	cmp	r1, r3
 800040c:	d90a      	bls.n	8000424 <__udivmoddi4+0x64>
 800040e:	eb1c 0303 	adds.w	r3, ip, r3
 8000412:	f104 30ff 	add.w	r0, r4, #4294967295
 8000416:	f080 8112 	bcs.w	800063e <__udivmoddi4+0x27e>
 800041a:	4299      	cmp	r1, r3
 800041c:	f240 810f 	bls.w	800063e <__udivmoddi4+0x27e>
 8000420:	3c02      	subs	r4, #2
 8000422:	4463      	add	r3, ip
 8000424:	1a59      	subs	r1, r3, r1
 8000426:	fa1f f38e 	uxth.w	r3, lr
 800042a:	fbb1 f0f7 	udiv	r0, r1, r7
 800042e:	fb07 1110 	mls	r1, r7, r0, r1
 8000432:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000436:	fb00 f606 	mul.w	r6, r0, r6
 800043a:	429e      	cmp	r6, r3
 800043c:	d90a      	bls.n	8000454 <__udivmoddi4+0x94>
 800043e:	eb1c 0303 	adds.w	r3, ip, r3
 8000442:	f100 31ff 	add.w	r1, r0, #4294967295
 8000446:	f080 80fc 	bcs.w	8000642 <__udivmoddi4+0x282>
 800044a:	429e      	cmp	r6, r3
 800044c:	f240 80f9 	bls.w	8000642 <__udivmoddi4+0x282>
 8000450:	4463      	add	r3, ip
 8000452:	3802      	subs	r0, #2
 8000454:	1b9b      	subs	r3, r3, r6
 8000456:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800045a:	2100      	movs	r1, #0
 800045c:	b11d      	cbz	r5, 8000466 <__udivmoddi4+0xa6>
 800045e:	40d3      	lsrs	r3, r2
 8000460:	2200      	movs	r2, #0
 8000462:	e9c5 3200 	strd	r3, r2, [r5]
 8000466:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800046a:	428b      	cmp	r3, r1
 800046c:	d905      	bls.n	800047a <__udivmoddi4+0xba>
 800046e:	b10d      	cbz	r5, 8000474 <__udivmoddi4+0xb4>
 8000470:	e9c5 0100 	strd	r0, r1, [r5]
 8000474:	2100      	movs	r1, #0
 8000476:	4608      	mov	r0, r1
 8000478:	e7f5      	b.n	8000466 <__udivmoddi4+0xa6>
 800047a:	fab3 f183 	clz	r1, r3
 800047e:	2900      	cmp	r1, #0
 8000480:	d146      	bne.n	8000510 <__udivmoddi4+0x150>
 8000482:	42a3      	cmp	r3, r4
 8000484:	d302      	bcc.n	800048c <__udivmoddi4+0xcc>
 8000486:	4290      	cmp	r0, r2
 8000488:	f0c0 80f0 	bcc.w	800066c <__udivmoddi4+0x2ac>
 800048c:	1a86      	subs	r6, r0, r2
 800048e:	eb64 0303 	sbc.w	r3, r4, r3
 8000492:	2001      	movs	r0, #1
 8000494:	2d00      	cmp	r5, #0
 8000496:	d0e6      	beq.n	8000466 <__udivmoddi4+0xa6>
 8000498:	e9c5 6300 	strd	r6, r3, [r5]
 800049c:	e7e3      	b.n	8000466 <__udivmoddi4+0xa6>
 800049e:	2a00      	cmp	r2, #0
 80004a0:	f040 8090 	bne.w	80005c4 <__udivmoddi4+0x204>
 80004a4:	eba1 040c 	sub.w	r4, r1, ip
 80004a8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80004ac:	fa1f f78c 	uxth.w	r7, ip
 80004b0:	2101      	movs	r1, #1
 80004b2:	fbb4 f6f8 	udiv	r6, r4, r8
 80004b6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80004ba:	fb08 4416 	mls	r4, r8, r6, r4
 80004be:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80004c2:	fb07 f006 	mul.w	r0, r7, r6
 80004c6:	4298      	cmp	r0, r3
 80004c8:	d908      	bls.n	80004dc <__udivmoddi4+0x11c>
 80004ca:	eb1c 0303 	adds.w	r3, ip, r3
 80004ce:	f106 34ff 	add.w	r4, r6, #4294967295
 80004d2:	d202      	bcs.n	80004da <__udivmoddi4+0x11a>
 80004d4:	4298      	cmp	r0, r3
 80004d6:	f200 80cd 	bhi.w	8000674 <__udivmoddi4+0x2b4>
 80004da:	4626      	mov	r6, r4
 80004dc:	1a1c      	subs	r4, r3, r0
 80004de:	fa1f f38e 	uxth.w	r3, lr
 80004e2:	fbb4 f0f8 	udiv	r0, r4, r8
 80004e6:	fb08 4410 	mls	r4, r8, r0, r4
 80004ea:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80004ee:	fb00 f707 	mul.w	r7, r0, r7
 80004f2:	429f      	cmp	r7, r3
 80004f4:	d908      	bls.n	8000508 <__udivmoddi4+0x148>
 80004f6:	eb1c 0303 	adds.w	r3, ip, r3
 80004fa:	f100 34ff 	add.w	r4, r0, #4294967295
 80004fe:	d202      	bcs.n	8000506 <__udivmoddi4+0x146>
 8000500:	429f      	cmp	r7, r3
 8000502:	f200 80b0 	bhi.w	8000666 <__udivmoddi4+0x2a6>
 8000506:	4620      	mov	r0, r4
 8000508:	1bdb      	subs	r3, r3, r7
 800050a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800050e:	e7a5      	b.n	800045c <__udivmoddi4+0x9c>
 8000510:	f1c1 0620 	rsb	r6, r1, #32
 8000514:	408b      	lsls	r3, r1
 8000516:	fa22 f706 	lsr.w	r7, r2, r6
 800051a:	431f      	orrs	r7, r3
 800051c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000520:	fa04 f301 	lsl.w	r3, r4, r1
 8000524:	ea43 030c 	orr.w	r3, r3, ip
 8000528:	40f4      	lsrs	r4, r6
 800052a:	fa00 f801 	lsl.w	r8, r0, r1
 800052e:	0c38      	lsrs	r0, r7, #16
 8000530:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000534:	fbb4 fef0 	udiv	lr, r4, r0
 8000538:	fa1f fc87 	uxth.w	ip, r7
 800053c:	fb00 441e 	mls	r4, r0, lr, r4
 8000540:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000544:	fb0e f90c 	mul.w	r9, lr, ip
 8000548:	45a1      	cmp	r9, r4
 800054a:	fa02 f201 	lsl.w	r2, r2, r1
 800054e:	d90a      	bls.n	8000566 <__udivmoddi4+0x1a6>
 8000550:	193c      	adds	r4, r7, r4
 8000552:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000556:	f080 8084 	bcs.w	8000662 <__udivmoddi4+0x2a2>
 800055a:	45a1      	cmp	r9, r4
 800055c:	f240 8081 	bls.w	8000662 <__udivmoddi4+0x2a2>
 8000560:	f1ae 0e02 	sub.w	lr, lr, #2
 8000564:	443c      	add	r4, r7
 8000566:	eba4 0409 	sub.w	r4, r4, r9
 800056a:	fa1f f983 	uxth.w	r9, r3
 800056e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000572:	fb00 4413 	mls	r4, r0, r3, r4
 8000576:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800057a:	fb03 fc0c 	mul.w	ip, r3, ip
 800057e:	45a4      	cmp	ip, r4
 8000580:	d907      	bls.n	8000592 <__udivmoddi4+0x1d2>
 8000582:	193c      	adds	r4, r7, r4
 8000584:	f103 30ff 	add.w	r0, r3, #4294967295
 8000588:	d267      	bcs.n	800065a <__udivmoddi4+0x29a>
 800058a:	45a4      	cmp	ip, r4
 800058c:	d965      	bls.n	800065a <__udivmoddi4+0x29a>
 800058e:	3b02      	subs	r3, #2
 8000590:	443c      	add	r4, r7
 8000592:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000596:	fba0 9302 	umull	r9, r3, r0, r2
 800059a:	eba4 040c 	sub.w	r4, r4, ip
 800059e:	429c      	cmp	r4, r3
 80005a0:	46ce      	mov	lr, r9
 80005a2:	469c      	mov	ip, r3
 80005a4:	d351      	bcc.n	800064a <__udivmoddi4+0x28a>
 80005a6:	d04e      	beq.n	8000646 <__udivmoddi4+0x286>
 80005a8:	b155      	cbz	r5, 80005c0 <__udivmoddi4+0x200>
 80005aa:	ebb8 030e 	subs.w	r3, r8, lr
 80005ae:	eb64 040c 	sbc.w	r4, r4, ip
 80005b2:	fa04 f606 	lsl.w	r6, r4, r6
 80005b6:	40cb      	lsrs	r3, r1
 80005b8:	431e      	orrs	r6, r3
 80005ba:	40cc      	lsrs	r4, r1
 80005bc:	e9c5 6400 	strd	r6, r4, [r5]
 80005c0:	2100      	movs	r1, #0
 80005c2:	e750      	b.n	8000466 <__udivmoddi4+0xa6>
 80005c4:	f1c2 0320 	rsb	r3, r2, #32
 80005c8:	fa20 f103 	lsr.w	r1, r0, r3
 80005cc:	fa0c fc02 	lsl.w	ip, ip, r2
 80005d0:	fa24 f303 	lsr.w	r3, r4, r3
 80005d4:	4094      	lsls	r4, r2
 80005d6:	430c      	orrs	r4, r1
 80005d8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80005dc:	fa00 fe02 	lsl.w	lr, r0, r2
 80005e0:	fa1f f78c 	uxth.w	r7, ip
 80005e4:	fbb3 f0f8 	udiv	r0, r3, r8
 80005e8:	fb08 3110 	mls	r1, r8, r0, r3
 80005ec:	0c23      	lsrs	r3, r4, #16
 80005ee:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80005f2:	fb00 f107 	mul.w	r1, r0, r7
 80005f6:	4299      	cmp	r1, r3
 80005f8:	d908      	bls.n	800060c <__udivmoddi4+0x24c>
 80005fa:	eb1c 0303 	adds.w	r3, ip, r3
 80005fe:	f100 36ff 	add.w	r6, r0, #4294967295
 8000602:	d22c      	bcs.n	800065e <__udivmoddi4+0x29e>
 8000604:	4299      	cmp	r1, r3
 8000606:	d92a      	bls.n	800065e <__udivmoddi4+0x29e>
 8000608:	3802      	subs	r0, #2
 800060a:	4463      	add	r3, ip
 800060c:	1a5b      	subs	r3, r3, r1
 800060e:	b2a4      	uxth	r4, r4
 8000610:	fbb3 f1f8 	udiv	r1, r3, r8
 8000614:	fb08 3311 	mls	r3, r8, r1, r3
 8000618:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800061c:	fb01 f307 	mul.w	r3, r1, r7
 8000620:	42a3      	cmp	r3, r4
 8000622:	d908      	bls.n	8000636 <__udivmoddi4+0x276>
 8000624:	eb1c 0404 	adds.w	r4, ip, r4
 8000628:	f101 36ff 	add.w	r6, r1, #4294967295
 800062c:	d213      	bcs.n	8000656 <__udivmoddi4+0x296>
 800062e:	42a3      	cmp	r3, r4
 8000630:	d911      	bls.n	8000656 <__udivmoddi4+0x296>
 8000632:	3902      	subs	r1, #2
 8000634:	4464      	add	r4, ip
 8000636:	1ae4      	subs	r4, r4, r3
 8000638:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800063c:	e739      	b.n	80004b2 <__udivmoddi4+0xf2>
 800063e:	4604      	mov	r4, r0
 8000640:	e6f0      	b.n	8000424 <__udivmoddi4+0x64>
 8000642:	4608      	mov	r0, r1
 8000644:	e706      	b.n	8000454 <__udivmoddi4+0x94>
 8000646:	45c8      	cmp	r8, r9
 8000648:	d2ae      	bcs.n	80005a8 <__udivmoddi4+0x1e8>
 800064a:	ebb9 0e02 	subs.w	lr, r9, r2
 800064e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000652:	3801      	subs	r0, #1
 8000654:	e7a8      	b.n	80005a8 <__udivmoddi4+0x1e8>
 8000656:	4631      	mov	r1, r6
 8000658:	e7ed      	b.n	8000636 <__udivmoddi4+0x276>
 800065a:	4603      	mov	r3, r0
 800065c:	e799      	b.n	8000592 <__udivmoddi4+0x1d2>
 800065e:	4630      	mov	r0, r6
 8000660:	e7d4      	b.n	800060c <__udivmoddi4+0x24c>
 8000662:	46d6      	mov	lr, sl
 8000664:	e77f      	b.n	8000566 <__udivmoddi4+0x1a6>
 8000666:	4463      	add	r3, ip
 8000668:	3802      	subs	r0, #2
 800066a:	e74d      	b.n	8000508 <__udivmoddi4+0x148>
 800066c:	4606      	mov	r6, r0
 800066e:	4623      	mov	r3, r4
 8000670:	4608      	mov	r0, r1
 8000672:	e70f      	b.n	8000494 <__udivmoddi4+0xd4>
 8000674:	3e02      	subs	r6, #2
 8000676:	4463      	add	r3, ip
 8000678:	e730      	b.n	80004dc <__udivmoddi4+0x11c>
 800067a:	bf00      	nop

0800067c <__aeabi_idiv0>:
 800067c:	4770      	bx	lr
 800067e:	bf00      	nop

08000680 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000680:	b480      	push	{r7}
 8000682:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000684:	4b3d      	ldr	r3, [pc, #244]	@ (800077c <SystemInit+0xfc>)
 8000686:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800068a:	4a3c      	ldr	r2, [pc, #240]	@ (800077c <SystemInit+0xfc>)
 800068c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000690:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif

    /*SEVONPEND enabled so that an interrupt coming from the CPU(n) interrupt signal is
     detectable by the CPU after a WFI/WFE instruction.*/
 SCB->SCR |= SCB_SCR_SEVONPEND_Msk;
 8000694:	4b39      	ldr	r3, [pc, #228]	@ (800077c <SystemInit+0xfc>)
 8000696:	691b      	ldr	r3, [r3, #16]
 8000698:	4a38      	ldr	r2, [pc, #224]	@ (800077c <SystemInit+0xfc>)
 800069a:	f043 0310 	orr.w	r3, r3, #16
 800069e:	6113      	str	r3, [r2, #16]

#if defined(CORE_CM7)
  /* Reset the RCC clock configuration to the default reset state ------------*/
   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80006a0:	4b37      	ldr	r3, [pc, #220]	@ (8000780 <SystemInit+0x100>)
 80006a2:	681b      	ldr	r3, [r3, #0]
 80006a4:	f003 030f 	and.w	r3, r3, #15
 80006a8:	2b06      	cmp	r3, #6
 80006aa:	d807      	bhi.n	80006bc <SystemInit+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80006ac:	4b34      	ldr	r3, [pc, #208]	@ (8000780 <SystemInit+0x100>)
 80006ae:	681b      	ldr	r3, [r3, #0]
 80006b0:	f023 030f 	bic.w	r3, r3, #15
 80006b4:	4a32      	ldr	r2, [pc, #200]	@ (8000780 <SystemInit+0x100>)
 80006b6:	f043 0307 	orr.w	r3, r3, #7
 80006ba:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 80006bc:	4b31      	ldr	r3, [pc, #196]	@ (8000784 <SystemInit+0x104>)
 80006be:	681b      	ldr	r3, [r3, #0]
 80006c0:	4a30      	ldr	r2, [pc, #192]	@ (8000784 <SystemInit+0x104>)
 80006c2:	f043 0301 	orr.w	r3, r3, #1
 80006c6:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80006c8:	4b2e      	ldr	r3, [pc, #184]	@ (8000784 <SystemInit+0x104>)
 80006ca:	2200      	movs	r2, #0
 80006cc:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 80006ce:	4b2d      	ldr	r3, [pc, #180]	@ (8000784 <SystemInit+0x104>)
 80006d0:	681a      	ldr	r2, [r3, #0]
 80006d2:	492c      	ldr	r1, [pc, #176]	@ (8000784 <SystemInit+0x104>)
 80006d4:	4b2c      	ldr	r3, [pc, #176]	@ (8000788 <SystemInit+0x108>)
 80006d6:	4013      	ands	r3, r2
 80006d8:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80006da:	4b29      	ldr	r3, [pc, #164]	@ (8000780 <SystemInit+0x100>)
 80006dc:	681b      	ldr	r3, [r3, #0]
 80006de:	f003 0308 	and.w	r3, r3, #8
 80006e2:	2b00      	cmp	r3, #0
 80006e4:	d007      	beq.n	80006f6 <SystemInit+0x76>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80006e6:	4b26      	ldr	r3, [pc, #152]	@ (8000780 <SystemInit+0x100>)
 80006e8:	681b      	ldr	r3, [r3, #0]
 80006ea:	f023 030f 	bic.w	r3, r3, #15
 80006ee:	4a24      	ldr	r2, [pc, #144]	@ (8000780 <SystemInit+0x100>)
 80006f0:	f043 0307 	orr.w	r3, r3, #7
 80006f4:	6013      	str	r3, [r2, #0]
  }

  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 80006f6:	4b23      	ldr	r3, [pc, #140]	@ (8000784 <SystemInit+0x104>)
 80006f8:	2200      	movs	r2, #0
 80006fa:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 80006fc:	4b21      	ldr	r3, [pc, #132]	@ (8000784 <SystemInit+0x104>)
 80006fe:	2200      	movs	r2, #0
 8000700:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8000702:	4b20      	ldr	r3, [pc, #128]	@ (8000784 <SystemInit+0x104>)
 8000704:	2200      	movs	r2, #0
 8000706:	621a      	str	r2, [r3, #32]

  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8000708:	4b1e      	ldr	r3, [pc, #120]	@ (8000784 <SystemInit+0x104>)
 800070a:	4a20      	ldr	r2, [pc, #128]	@ (800078c <SystemInit+0x10c>)
 800070c:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 800070e:	4b1d      	ldr	r3, [pc, #116]	@ (8000784 <SystemInit+0x104>)
 8000710:	4a1f      	ldr	r2, [pc, #124]	@ (8000790 <SystemInit+0x110>)
 8000712:	62da      	str	r2, [r3, #44]	@ 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8000714:	4b1b      	ldr	r3, [pc, #108]	@ (8000784 <SystemInit+0x104>)
 8000716:	4a1f      	ldr	r2, [pc, #124]	@ (8000794 <SystemInit+0x114>)
 8000718:	631a      	str	r2, [r3, #48]	@ 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 800071a:	4b1a      	ldr	r3, [pc, #104]	@ (8000784 <SystemInit+0x104>)
 800071c:	2200      	movs	r2, #0
 800071e:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8000720:	4b18      	ldr	r3, [pc, #96]	@ (8000784 <SystemInit+0x104>)
 8000722:	4a1c      	ldr	r2, [pc, #112]	@ (8000794 <SystemInit+0x114>)
 8000724:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8000726:	4b17      	ldr	r3, [pc, #92]	@ (8000784 <SystemInit+0x104>)
 8000728:	2200      	movs	r2, #0
 800072a:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 800072c:	4b15      	ldr	r3, [pc, #84]	@ (8000784 <SystemInit+0x104>)
 800072e:	4a19      	ldr	r2, [pc, #100]	@ (8000794 <SystemInit+0x114>)
 8000730:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8000732:	4b14      	ldr	r3, [pc, #80]	@ (8000784 <SystemInit+0x104>)
 8000734:	2200      	movs	r2, #0
 8000736:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000738:	4b12      	ldr	r3, [pc, #72]	@ (8000784 <SystemInit+0x104>)
 800073a:	681b      	ldr	r3, [r3, #0]
 800073c:	4a11      	ldr	r2, [pc, #68]	@ (8000784 <SystemInit+0x104>)
 800073e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8000742:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8000744:	4b0f      	ldr	r3, [pc, #60]	@ (8000784 <SystemInit+0x104>)
 8000746:	2200      	movs	r2, #0
 8000748:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Enable CortexM7 HSEM EXTI line (line 78)*/
  EXTI_D2->EMR3 |= 0x4000UL;
 800074a:	4b13      	ldr	r3, [pc, #76]	@ (8000798 <SystemInit+0x118>)
 800074c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800074e:	4a12      	ldr	r2, [pc, #72]	@ (8000798 <SystemInit+0x118>)
 8000750:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000754:	6253      	str	r3, [r2, #36]	@ 0x24

  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 8000756:	4b11      	ldr	r3, [pc, #68]	@ (800079c <SystemInit+0x11c>)
 8000758:	681a      	ldr	r2, [r3, #0]
 800075a:	4b11      	ldr	r3, [pc, #68]	@ (80007a0 <SystemInit+0x120>)
 800075c:	4013      	ands	r3, r2
 800075e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8000762:	d202      	bcs.n	800076a <SystemInit+0xea>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 8000764:	4b0f      	ldr	r3, [pc, #60]	@ (80007a4 <SystemInit+0x124>)
 8000766:	2201      	movs	r2, #1
 8000768:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 800076a:	4b0f      	ldr	r3, [pc, #60]	@ (80007a8 <SystemInit+0x128>)
 800076c:	f243 02d2 	movw	r2, #12498	@ 0x30d2
 8000770:	601a      	str	r2, [r3, #0]
#endif /* USER_VECT_TAB_ADDRESS */

#else
#error Please #define CORE_CM4 or CORE_CM7
#endif /* CORE_CM4 */
}
 8000772:	bf00      	nop
 8000774:	46bd      	mov	sp, r7
 8000776:	f85d 7b04 	ldr.w	r7, [sp], #4
 800077a:	4770      	bx	lr
 800077c:	e000ed00 	.word	0xe000ed00
 8000780:	52002000 	.word	0x52002000
 8000784:	58024400 	.word	0x58024400
 8000788:	eaf6ed7f 	.word	0xeaf6ed7f
 800078c:	02020200 	.word	0x02020200
 8000790:	01ff0000 	.word	0x01ff0000
 8000794:	01010280 	.word	0x01010280
 8000798:	580000c0 	.word	0x580000c0
 800079c:	5c001000 	.word	0x5c001000
 80007a0:	ffff0000 	.word	0xffff0000
 80007a4:	51008108 	.word	0x51008108
 80007a8:	52004000 	.word	0x52004000

080007ac <tud_cdc_available>:
{
  tud_cdc_n_set_wanted_char(0, wanted);
}

static inline uint32_t tud_cdc_available (void)
{
 80007ac:	b580      	push	{r7, lr}
 80007ae:	af00      	add	r7, sp, #0
  return tud_cdc_n_available(0);
 80007b0:	2000      	movs	r0, #0
 80007b2:	f001 fb6d 	bl	8001e90 <tud_cdc_n_available>
 80007b6:	4603      	mov	r3, r0
}
 80007b8:	4618      	mov	r0, r3
 80007ba:	bd80      	pop	{r7, pc}

080007bc <tud_cdc_read>:
{
  return tud_cdc_n_read_char(0);
}

static inline uint32_t tud_cdc_read (void* buffer, uint32_t bufsize)
{
 80007bc:	b580      	push	{r7, lr}
 80007be:	b082      	sub	sp, #8
 80007c0:	af00      	add	r7, sp, #0
 80007c2:	6078      	str	r0, [r7, #4]
 80007c4:	6039      	str	r1, [r7, #0]
  return tud_cdc_n_read(0, buffer, bufsize);
 80007c6:	683a      	ldr	r2, [r7, #0]
 80007c8:	6879      	ldr	r1, [r7, #4]
 80007ca:	2000      	movs	r0, #0
 80007cc:	f001 fb78 	bl	8001ec0 <tud_cdc_n_read>
 80007d0:	4603      	mov	r3, r0
}
 80007d2:	4618      	mov	r0, r3
 80007d4:	3708      	adds	r7, #8
 80007d6:	46bd      	mov	sp, r7
 80007d8:	bd80      	pop	{r7, pc}

080007da <tud_cdc_write>:
{
  return tud_cdc_n_write_char(0, ch);
}

static inline uint32_t tud_cdc_write (void const* buffer, uint32_t bufsize)
{
 80007da:	b580      	push	{r7, lr}
 80007dc:	b082      	sub	sp, #8
 80007de:	af00      	add	r7, sp, #0
 80007e0:	6078      	str	r0, [r7, #4]
 80007e2:	6039      	str	r1, [r7, #0]
  return tud_cdc_n_write(0, buffer, bufsize);
 80007e4:	683a      	ldr	r2, [r7, #0]
 80007e6:	6879      	ldr	r1, [r7, #4]
 80007e8:	2000      	movs	r0, #0
 80007ea:	f001 fb95 	bl	8001f18 <tud_cdc_n_write>
 80007ee:	4603      	mov	r3, r0
}
 80007f0:	4618      	mov	r0, r3
 80007f2:	3708      	adds	r7, #8
 80007f4:	46bd      	mov	sp, r7
 80007f6:	bd80      	pop	{r7, pc}

080007f8 <tud_cdc_write_flush>:
{
  return tud_cdc_n_write_str(0, str);
}

static inline uint32_t tud_cdc_write_flush (void)
{
 80007f8:	b580      	push	{r7, lr}
 80007fa:	af00      	add	r7, sp, #0
  return tud_cdc_n_write_flush(0);
 80007fc:	2000      	movs	r0, #0
 80007fe:	f001 fbc1 	bl	8001f84 <tud_cdc_n_write_flush>
 8000802:	4603      	mov	r3, r0
}
 8000804:	4618      	mov	r0, r3
 8000806:	bd80      	pop	{r7, pc}

08000808 <blink_cb>:
/* USER CODE BEGIN 0 */

static struct mg_tcpip_if *s_ifp;

// Network blink
static void blink_cb(void *arg) {  // Blink periodically
 8000808:	b580      	push	{r7, lr}
 800080a:	b082      	sub	sp, #8
 800080c:	af00      	add	r7, sp, #0
 800080e:	6078      	str	r0, [r7, #4]
	HAL_GPIO_TogglePin(LED1_GPIO_Port, LED1_Pin);
 8000810:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000814:	4803      	ldr	r0, [pc, #12]	@ (8000824 <blink_cb+0x1c>)
 8000816:	f010 fbcc 	bl	8010fb2 <HAL_GPIO_TogglePin>
  (void) arg;
}
 800081a:	bf00      	nop
 800081c:	3708      	adds	r7, #8
 800081e:	46bd      	mov	sp, r7
 8000820:	bd80      	pop	{r7, pc}
 8000822:	bf00      	nop
 8000824:	58022000 	.word	0x58022000

08000828 <mg_millis>:


/* Mongoose user functions */

uint64_t mg_millis(void) {  // Let Mongoose use our uptime function
 8000828:	b5b0      	push	{r4, r5, r7, lr}
 800082a:	af00      	add	r7, sp, #0
  return HAL_GetTick();     // Return number of milliseconds since boot
 800082c:	f010 f894 	bl	8010958 <HAL_GetTick>
 8000830:	4603      	mov	r3, r0
 8000832:	2200      	movs	r2, #0
 8000834:	461c      	mov	r4, r3
 8000836:	4615      	mov	r5, r2
 8000838:	4622      	mov	r2, r4
 800083a:	462b      	mov	r3, r5
}
 800083c:	4610      	mov	r0, r2
 800083e:	4619      	mov	r1, r3
 8000840:	bdb0      	pop	{r4, r5, r7, pc}
	...

08000844 <mg_random>:


// Hardware random generator
void mg_random(void *buf, size_t len) {  // Use on-board RNG
 8000844:	b580      	push	{r7, lr}
 8000846:	b084      	sub	sp, #16
 8000848:	af00      	add	r7, sp, #0
 800084a:	6078      	str	r0, [r7, #4]
 800084c:	6039      	str	r1, [r7, #0]
  for (size_t n = 0; n < len; n += sizeof(uint32_t)) {
 800084e:	2300      	movs	r3, #0
 8000850:	60fb      	str	r3, [r7, #12]
 8000852:	e01a      	b.n	800088a <mg_random+0x46>
    uint32_t r;
    HAL_RNG_GenerateRandomNumber(&hrng, &r);
 8000854:	f107 0308 	add.w	r3, r7, #8
 8000858:	4619      	mov	r1, r3
 800085a:	4810      	ldr	r0, [pc, #64]	@ (800089c <mg_random+0x58>)
 800085c:	f014 fb76 	bl	8014f4c <HAL_RNG_GenerateRandomNumber>
    memcpy((char *) buf + n, &r, n + sizeof(r) > len ? len - n : sizeof(r));
 8000860:	687a      	ldr	r2, [r7, #4]
 8000862:	68fb      	ldr	r3, [r7, #12]
 8000864:	18d0      	adds	r0, r2, r3
 8000866:	68fb      	ldr	r3, [r7, #12]
 8000868:	3304      	adds	r3, #4
 800086a:	683a      	ldr	r2, [r7, #0]
 800086c:	429a      	cmp	r2, r3
 800086e:	d203      	bcs.n	8000878 <mg_random+0x34>
 8000870:	683a      	ldr	r2, [r7, #0]
 8000872:	68fb      	ldr	r3, [r7, #12]
 8000874:	1ad3      	subs	r3, r2, r3
 8000876:	e000      	b.n	800087a <mg_random+0x36>
 8000878:	2304      	movs	r3, #4
 800087a:	f107 0108 	add.w	r1, r7, #8
 800087e:	461a      	mov	r2, r3
 8000880:	f019 f965 	bl	8019b4e <memcpy>
  for (size_t n = 0; n < len; n += sizeof(uint32_t)) {
 8000884:	68fb      	ldr	r3, [r7, #12]
 8000886:	3304      	adds	r3, #4
 8000888:	60fb      	str	r3, [r7, #12]
 800088a:	68fa      	ldr	r2, [r7, #12]
 800088c:	683b      	ldr	r3, [r7, #0]
 800088e:	429a      	cmp	r2, r3
 8000890:	d3e0      	bcc.n	8000854 <mg_random+0x10>
  }
}
 8000892:	bf00      	nop
 8000894:	bf00      	nop
 8000896:	3710      	adds	r7, #16
 8000898:	46bd      	mov	sp, r7
 800089a:	bd80      	pop	{r7, pc}
 800089c:	240000d0 	.word	0x240000d0

080008a0 <init_tud_network_mac_address>:

/* Tiny USB Callbacks & Mongoose Communication functions */

// init the mac address of tiny usb
void init_tud_network_mac_address(void) {
 80008a0:	b480      	push	{r7}
 80008a2:	b085      	sub	sp, #20
 80008a4:	af00      	add	r7, sp, #0
    // Assuming GENERATE_LOCALLY_ADMINISTERED_MAC is a macro that expands to an initializer based on UUID
    uint8_t temp_mac_address[6] = GENERATE_LOCALLY_ADMINISTERED_MAC();
 80008a6:	2302      	movs	r3, #2
 80008a8:	713b      	strb	r3, [r7, #4]
 80008aa:	4b22      	ldr	r3, [pc, #136]	@ (8000934 <init_tud_network_mac_address+0x94>)
 80008ac:	781a      	ldrb	r2, [r3, #0]
 80008ae:	4b22      	ldr	r3, [pc, #136]	@ (8000938 <init_tud_network_mac_address+0x98>)
 80008b0:	781b      	ldrb	r3, [r3, #0]
 80008b2:	4053      	eors	r3, r2
 80008b4:	b2db      	uxtb	r3, r3
 80008b6:	717b      	strb	r3, [r7, #5]
 80008b8:	4b20      	ldr	r3, [pc, #128]	@ (800093c <init_tud_network_mac_address+0x9c>)
 80008ba:	781a      	ldrb	r2, [r3, #0]
 80008bc:	4b20      	ldr	r3, [pc, #128]	@ (8000940 <init_tud_network_mac_address+0xa0>)
 80008be:	781b      	ldrb	r3, [r3, #0]
 80008c0:	4053      	eors	r3, r2
 80008c2:	b2db      	uxtb	r3, r3
 80008c4:	71bb      	strb	r3, [r7, #6]
 80008c6:	4b1f      	ldr	r3, [pc, #124]	@ (8000944 <init_tud_network_mac_address+0xa4>)
 80008c8:	781a      	ldrb	r2, [r3, #0]
 80008ca:	4b1f      	ldr	r3, [pc, #124]	@ (8000948 <init_tud_network_mac_address+0xa8>)
 80008cc:	781b      	ldrb	r3, [r3, #0]
 80008ce:	4053      	eors	r3, r2
 80008d0:	b2db      	uxtb	r3, r3
 80008d2:	71fb      	strb	r3, [r7, #7]
 80008d4:	4b1d      	ldr	r3, [pc, #116]	@ (800094c <init_tud_network_mac_address+0xac>)
 80008d6:	781a      	ldrb	r2, [r3, #0]
 80008d8:	4b1d      	ldr	r3, [pc, #116]	@ (8000950 <init_tud_network_mac_address+0xb0>)
 80008da:	781b      	ldrb	r3, [r3, #0]
 80008dc:	4053      	eors	r3, r2
 80008de:	b2da      	uxtb	r2, r3
 80008e0:	4b1c      	ldr	r3, [pc, #112]	@ (8000954 <init_tud_network_mac_address+0xb4>)
 80008e2:	781b      	ldrb	r3, [r3, #0]
 80008e4:	4053      	eors	r3, r2
 80008e6:	b2db      	uxtb	r3, r3
 80008e8:	723b      	strb	r3, [r7, #8]
 80008ea:	4b1b      	ldr	r3, [pc, #108]	@ (8000958 <init_tud_network_mac_address+0xb8>)
 80008ec:	781a      	ldrb	r2, [r3, #0]
 80008ee:	4b1b      	ldr	r3, [pc, #108]	@ (800095c <init_tud_network_mac_address+0xbc>)
 80008f0:	781b      	ldrb	r3, [r3, #0]
 80008f2:	4053      	eors	r3, r2
 80008f4:	b2da      	uxtb	r2, r3
 80008f6:	4b1a      	ldr	r3, [pc, #104]	@ (8000960 <init_tud_network_mac_address+0xc0>)
 80008f8:	781b      	ldrb	r3, [r3, #0]
 80008fa:	4053      	eors	r3, r2
 80008fc:	b2db      	uxtb	r3, r3
 80008fe:	727b      	strb	r3, [r7, #9]
    for (int i = 0; i < 6; i++) {
 8000900:	2300      	movs	r3, #0
 8000902:	60fb      	str	r3, [r7, #12]
 8000904:	e00b      	b.n	800091e <init_tud_network_mac_address+0x7e>
        tud_network_mac_address[i] = temp_mac_address[i];
 8000906:	1d3a      	adds	r2, r7, #4
 8000908:	68fb      	ldr	r3, [r7, #12]
 800090a:	4413      	add	r3, r2
 800090c:	7819      	ldrb	r1, [r3, #0]
 800090e:	4a15      	ldr	r2, [pc, #84]	@ (8000964 <init_tud_network_mac_address+0xc4>)
 8000910:	68fb      	ldr	r3, [r7, #12]
 8000912:	4413      	add	r3, r2
 8000914:	460a      	mov	r2, r1
 8000916:	701a      	strb	r2, [r3, #0]
    for (int i = 0; i < 6; i++) {
 8000918:	68fb      	ldr	r3, [r7, #12]
 800091a:	3301      	adds	r3, #1
 800091c:	60fb      	str	r3, [r7, #12]
 800091e:	68fb      	ldr	r3, [r7, #12]
 8000920:	2b05      	cmp	r3, #5
 8000922:	ddf0      	ble.n	8000906 <init_tud_network_mac_address+0x66>
    }
}
 8000924:	bf00      	nop
 8000926:	bf00      	nop
 8000928:	3714      	adds	r7, #20
 800092a:	46bd      	mov	sp, r7
 800092c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000930:	4770      	bx	lr
 8000932:	bf00      	nop
 8000934:	1ff1e800 	.word	0x1ff1e800
 8000938:	1ff1e801 	.word	0x1ff1e801
 800093c:	1ff1e802 	.word	0x1ff1e802
 8000940:	1ff1e803 	.word	0x1ff1e803
 8000944:	1ff1e804 	.word	0x1ff1e804
 8000948:	1ff1e805 	.word	0x1ff1e805
 800094c:	1ff1e806 	.word	0x1ff1e806
 8000950:	1ff1e807 	.word	0x1ff1e807
 8000954:	1ff1e808 	.word	0x1ff1e808
 8000958:	1ff1e809 	.word	0x1ff1e809
 800095c:	1ff1e80a 	.word	0x1ff1e80a
 8000960:	1ff1e80b 	.word	0x1ff1e80b
 8000964:	24000700 	.word	0x24000700

08000968 <tud_network_recv_cb>:

// callback when data is coming from usb
bool tud_network_recv_cb(const uint8_t *buf, uint16_t len) {
 8000968:	b580      	push	{r7, lr}
 800096a:	b082      	sub	sp, #8
 800096c:	af00      	add	r7, sp, #0
 800096e:	6078      	str	r0, [r7, #4]
 8000970:	460b      	mov	r3, r1
 8000972:	807b      	strh	r3, [r7, #2]
  mg_tcpip_qwrite((void *) buf, len, s_ifp);
 8000974:	887b      	ldrh	r3, [r7, #2]
 8000976:	4a06      	ldr	r2, [pc, #24]	@ (8000990 <tud_network_recv_cb+0x28>)
 8000978:	6812      	ldr	r2, [r2, #0]
 800097a:	4619      	mov	r1, r3
 800097c:	6878      	ldr	r0, [r7, #4]
 800097e:	f00e faf9 	bl	800ef74 <mg_tcpip_qwrite>
  // MG_INFO(("RECV %hu", len));
  // mg_hexdump(buf, len);
  tud_network_recv_renew();
 8000982:	f003 f877 	bl	8003a74 <tud_network_recv_renew>
  return true;
 8000986:	2301      	movs	r3, #1
}
 8000988:	4618      	mov	r0, r3
 800098a:	3708      	adds	r7, #8
 800098c:	46bd      	mov	sp, r7
 800098e:	bd80      	pop	{r7, pc}
 8000990:	24000708 	.word	0x24000708

08000994 <tud_network_init_cb>:


// callback when network is init
void tud_network_init_cb(void) {
 8000994:	b480      	push	{r7}
 8000996:	af00      	add	r7, sp, #0
}
 8000998:	bf00      	nop
 800099a:	46bd      	mov	sp, r7
 800099c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009a0:	4770      	bx	lr

080009a2 <tud_network_xmit_cb>:


// sends via usb network data (tiny USB)
uint16_t tud_network_xmit_cb(uint8_t *dst, void *ref, uint16_t arg) {
 80009a2:	b580      	push	{r7, lr}
 80009a4:	b084      	sub	sp, #16
 80009a6:	af00      	add	r7, sp, #0
 80009a8:	60f8      	str	r0, [r7, #12]
 80009aa:	60b9      	str	r1, [r7, #8]
 80009ac:	4613      	mov	r3, r2
 80009ae:	80fb      	strh	r3, [r7, #6]
  // MG_INFO(("SEND %hu", arg));
  memcpy(dst, ref, arg);
 80009b0:	88fb      	ldrh	r3, [r7, #6]
 80009b2:	461a      	mov	r2, r3
 80009b4:	68b9      	ldr	r1, [r7, #8]
 80009b6:	68f8      	ldr	r0, [r7, #12]
 80009b8:	f019 f8c9 	bl	8019b4e <memcpy>
  return arg;
 80009bc:	88fb      	ldrh	r3, [r7, #6]
}
 80009be:	4618      	mov	r0, r3
 80009c0:	3710      	adds	r7, #16
 80009c2:	46bd      	mov	sp, r7
 80009c4:	bd80      	pop	{r7, pc}

080009c6 <usb_tx>:

// send via usb network (mongoose)
static size_t usb_tx(const void *buf, size_t len, struct mg_tcpip_if *ifp) {
 80009c6:	b580      	push	{r7, lr}
 80009c8:	b084      	sub	sp, #16
 80009ca:	af00      	add	r7, sp, #0
 80009cc:	60f8      	str	r0, [r7, #12]
 80009ce:	60b9      	str	r1, [r7, #8]
 80009d0:	607a      	str	r2, [r7, #4]
bool tud_suspended(void);

// Check if device is ready to transfer
TU_ATTR_ALWAYS_INLINE static inline
bool tud_ready(void) {
  return tud_mounted() && !tud_suspended();
 80009d2:	f004 fa81 	bl	8004ed8 <tud_mounted>
 80009d6:	4603      	mov	r3, r0
 80009d8:	2b00      	cmp	r3, #0
 80009da:	d009      	beq.n	80009f0 <usb_tx+0x2a>
 80009dc:	f004 fa8e 	bl	8004efc <tud_suspended>
 80009e0:	4603      	mov	r3, r0
 80009e2:	f083 0301 	eor.w	r3, r3, #1
 80009e6:	b2db      	uxtb	r3, r3
 80009e8:	2b00      	cmp	r3, #0
 80009ea:	d001      	beq.n	80009f0 <usb_tx+0x2a>
 80009ec:	2301      	movs	r3, #1
 80009ee:	e000      	b.n	80009f2 <usb_tx+0x2c>
 80009f0:	2300      	movs	r3, #0
 80009f2:	f003 0301 	and.w	r3, r3, #1
 80009f6:	b2db      	uxtb	r3, r3
  if (!tud_ready()) return 0;
 80009f8:	f083 0301 	eor.w	r3, r3, #1
 80009fc:	b2db      	uxtb	r3, r3
 80009fe:	2b00      	cmp	r3, #0
 8000a00:	d007      	beq.n	8000a12 <usb_tx+0x4c>
 8000a02:	2300      	movs	r3, #0
 8000a04:	e017      	b.n	8000a36 <usb_tx+0x70>
  tud_task_ext(UINT32_MAX, false);
 8000a06:	2100      	movs	r1, #0
 8000a08:	f04f 30ff 	mov.w	r0, #4294967295
 8000a0c:	f004 fbb4 	bl	8005178 <tud_task_ext>
}
 8000a10:	bf00      	nop
  while (!tud_network_can_xmit(len)) tud_task();
 8000a12:	68bb      	ldr	r3, [r7, #8]
 8000a14:	b29b      	uxth	r3, r3
 8000a16:	4618      	mov	r0, r3
 8000a18:	f003 fbca 	bl	80041b0 <tud_network_can_xmit>
 8000a1c:	4603      	mov	r3, r0
 8000a1e:	f083 0301 	eor.w	r3, r3, #1
 8000a22:	b2db      	uxtb	r3, r3
 8000a24:	2b00      	cmp	r3, #0
 8000a26:	d1ee      	bne.n	8000a06 <usb_tx+0x40>
  tud_network_xmit((void *) buf, len);
 8000a28:	68bb      	ldr	r3, [r7, #8]
 8000a2a:	b29b      	uxth	r3, r3
 8000a2c:	4619      	mov	r1, r3
 8000a2e:	68f8      	ldr	r0, [r7, #12]
 8000a30:	f003 fbce 	bl	80041d0 <tud_network_xmit>
  (void) ifp;
  return len;
 8000a34:	68bb      	ldr	r3, [r7, #8]
}
 8000a36:	4618      	mov	r0, r3
 8000a38:	3710      	adds	r7, #16
 8000a3a:	46bd      	mov	sp, r7
 8000a3c:	bd80      	pop	{r7, pc}

08000a3e <usb_up>:


// mongoose aks if usb is working
static bool usb_up(struct mg_tcpip_if *ifp) {
 8000a3e:	b580      	push	{r7, lr}
 8000a40:	b082      	sub	sp, #8
 8000a42:	af00      	add	r7, sp, #0
 8000a44:	6078      	str	r0, [r7, #4]
  (void) ifp;
  return tud_inited() && tud_ready() && tud_connected();
 8000a46:	f004 fa6d 	bl	8004f24 <tud_inited>
 8000a4a:	4603      	mov	r3, r0
 8000a4c:	2b00      	cmp	r3, #0
 8000a4e:	d01b      	beq.n	8000a88 <usb_up+0x4a>
  return tud_mounted() && !tud_suspended();
 8000a50:	f004 fa42 	bl	8004ed8 <tud_mounted>
 8000a54:	4603      	mov	r3, r0
 8000a56:	2b00      	cmp	r3, #0
 8000a58:	d009      	beq.n	8000a6e <usb_up+0x30>
 8000a5a:	f004 fa4f 	bl	8004efc <tud_suspended>
 8000a5e:	4603      	mov	r3, r0
 8000a60:	f083 0301 	eor.w	r3, r3, #1
 8000a64:	b2db      	uxtb	r3, r3
 8000a66:	2b00      	cmp	r3, #0
 8000a68:	d001      	beq.n	8000a6e <usb_up+0x30>
 8000a6a:	2301      	movs	r3, #1
 8000a6c:	e000      	b.n	8000a70 <usb_up+0x32>
 8000a6e:	2300      	movs	r3, #0
 8000a70:	f003 0301 	and.w	r3, r3, #1
 8000a74:	b2db      	uxtb	r3, r3
 8000a76:	2b00      	cmp	r3, #0
 8000a78:	d006      	beq.n	8000a88 <usb_up+0x4a>
 8000a7a:	f004 fa19 	bl	8004eb0 <tud_connected>
 8000a7e:	4603      	mov	r3, r0
 8000a80:	2b00      	cmp	r3, #0
 8000a82:	d001      	beq.n	8000a88 <usb_up+0x4a>
 8000a84:	2301      	movs	r3, #1
 8000a86:	e000      	b.n	8000a8a <usb_up+0x4c>
 8000a88:	2300      	movs	r3, #0
 8000a8a:	f003 0301 	and.w	r3, r3, #1
 8000a8e:	b2db      	uxtb	r3, r3
}
 8000a90:	4618      	mov	r0, r3
 8000a92:	3708      	adds	r7, #8
 8000a94:	46bd      	mov	sp, r7
 8000a96:	bd80      	pop	{r7, pc}

08000a98 <fn>:


// website handler
static void fn(struct mg_connection *c, int ev, void *ev_data) {
 8000a98:	b580      	push	{r7, lr}
 8000a9a:	b088      	sub	sp, #32
 8000a9c:	af02      	add	r7, sp, #8
 8000a9e:	60f8      	str	r0, [r7, #12]
 8000aa0:	60b9      	str	r1, [r7, #8]
 8000aa2:	607a      	str	r2, [r7, #4]
  if (ev == MG_EV_HTTP_MSG) {
 8000aa4:	68bb      	ldr	r3, [r7, #8]
 8000aa6:	2b0a      	cmp	r3, #10
 8000aa8:	d123      	bne.n	8000af2 <fn+0x5a>
    struct mg_http_message *hm = (struct mg_http_message *) ev_data;
 8000aaa:	687b      	ldr	r3, [r7, #4]
 8000aac:	617b      	str	r3, [r7, #20]
    if (mg_http_match_uri(hm, "/api/debug")) {
 8000aae:	4913      	ldr	r1, [pc, #76]	@ (8000afc <fn+0x64>)
 8000ab0:	6978      	ldr	r0, [r7, #20]
 8000ab2:	f00a fb6d 	bl	800b190 <mg_http_match_uri>
 8000ab6:	4603      	mov	r3, r0
 8000ab8:	2b00      	cmp	r3, #0
 8000aba:	d014      	beq.n	8000ae6 <fn+0x4e>
      int level = mg_json_get_long(hm->body, "$.level", MG_LL_DEBUG);
 8000abc:	6979      	ldr	r1, [r7, #20]
 8000abe:	2303      	movs	r3, #3
 8000ac0:	4a0f      	ldr	r2, [pc, #60]	@ (8000b00 <fn+0x68>)
 8000ac2:	f501 7100 	add.w	r1, r1, #512	@ 0x200
 8000ac6:	c903      	ldmia	r1, {r0, r1}
 8000ac8:	f00b fc9d 	bl	800c406 <mg_json_get_long>
 8000acc:	6138      	str	r0, [r7, #16]
      mg_log_set(level);
 8000ace:	4a0d      	ldr	r2, [pc, #52]	@ (8000b04 <fn+0x6c>)
 8000ad0:	693b      	ldr	r3, [r7, #16]
 8000ad2:	6013      	str	r3, [r2, #0]
      mg_http_reply(c, 200, "", "Debug level set to %d\n", level);
 8000ad4:	693b      	ldr	r3, [r7, #16]
 8000ad6:	9300      	str	r3, [sp, #0]
 8000ad8:	4b0b      	ldr	r3, [pc, #44]	@ (8000b08 <fn+0x70>)
 8000ada:	4a0c      	ldr	r2, [pc, #48]	@ (8000b0c <fn+0x74>)
 8000adc:	21c8      	movs	r1, #200	@ 0xc8
 8000ade:	68f8      	ldr	r0, [r7, #12]
 8000ae0:	f00a fafe 	bl	800b0e0 <mg_http_reply>
    } else {
      mg_http_reply(c, 200, "", "hi\n");
    }
  }
}
 8000ae4:	e005      	b.n	8000af2 <fn+0x5a>
      mg_http_reply(c, 200, "", "hi\n");
 8000ae6:	4b0a      	ldr	r3, [pc, #40]	@ (8000b10 <fn+0x78>)
 8000ae8:	4a08      	ldr	r2, [pc, #32]	@ (8000b0c <fn+0x74>)
 8000aea:	21c8      	movs	r1, #200	@ 0xc8
 8000aec:	68f8      	ldr	r0, [r7, #12]
 8000aee:	f00a faf7 	bl	800b0e0 <mg_http_reply>
}
 8000af2:	bf00      	nop
 8000af4:	3718      	adds	r7, #24
 8000af6:	46bd      	mov	sp, r7
 8000af8:	bd80      	pop	{r7, pc}
 8000afa:	bf00      	nop
 8000afc:	0801a3bc 	.word	0x0801a3bc
 8000b00:	0801a3c8 	.word	0x0801a3c8
 8000b04:	24000048 	.word	0x24000048
 8000b08:	0801a3d0 	.word	0x0801a3d0
 8000b0c:	0801a3e8 	.word	0x0801a3e8
 8000b10:	0801a3ec 	.word	0x0801a3ec

08000b14 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000b14:	b580      	push	{r7, lr}
 8000b16:	b0bc      	sub	sp, #240	@ 0xf0
 8000b18:	af04      	add	r7, sp, #16
/* USER CODE END Boot_Mode_Sequence_0 */

/* USER CODE BEGIN Boot_Mode_Sequence_1 */

  /* Wait until CPU2 boots and enters in stop mode or timeout*/
  timeout = 0xFFFF;
 8000b1a:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8000b1e:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  while((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) != RESET) && (timeout-- > 0));
 8000b22:	bf00      	nop
 8000b24:	4b7b      	ldr	r3, [pc, #492]	@ (8000d14 <main+0x200>)
 8000b26:	681b      	ldr	r3, [r3, #0]
 8000b28:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8000b2c:	2b00      	cmp	r3, #0
 8000b2e:	d006      	beq.n	8000b3e <main+0x2a>
 8000b30:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8000b34:	1e5a      	subs	r2, r3, #1
 8000b36:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8000b3a:	2b00      	cmp	r3, #0
 8000b3c:	dcf2      	bgt.n	8000b24 <main+0x10>
  if ( timeout < 0 )
 8000b3e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8000b42:	2b00      	cmp	r3, #0
 8000b44:	da01      	bge.n	8000b4a <main+0x36>
  {
  Error_Handler();
 8000b46:	f000 fbd3 	bl	80012f0 <Error_Handler>

/* USER CODE END Boot_Mode_Sequence_1 */
  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000b4a:	f00f fe7f 	bl	801084c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000b4e:	f000 f915 	bl	8000d7c <SystemClock_Config>

/* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 8000b52:	f000 f9a9 	bl	8000ea8 <PeriphCommonClock_Config>
/* USER CODE BEGIN Boot_Mode_Sequence_2 */
/* When system initialization is finished, Cortex-M7 will release Cortex-M4 by means of
HSEM notification */
/*HW semaphore Clock enable*/
__HAL_RCC_HSEM_CLK_ENABLE();
 8000b56:	4b6f      	ldr	r3, [pc, #444]	@ (8000d14 <main+0x200>)
 8000b58:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000b5c:	4a6d      	ldr	r2, [pc, #436]	@ (8000d14 <main+0x200>)
 8000b5e:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8000b62:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000b66:	4b6b      	ldr	r3, [pc, #428]	@ (8000d14 <main+0x200>)
 8000b68:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000b6c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8000b70:	607b      	str	r3, [r7, #4]
 8000b72:	687b      	ldr	r3, [r7, #4]
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000b74:	f000 fa86 	bl	8001084 <MX_GPIO_Init>
  MX_USART1_UART_Init();
 8000b78:	f000 fa06 	bl	8000f88 <MX_USART1_UART_Init>
  MX_USB_OTG_HS_PCD_Init();
 8000b7c:	f000 fa50 	bl	8001020 <MX_USB_OTG_HS_PCD_Init>
  MX_RNG_Init();
 8000b80:	f000 f9c8 	bl	8000f14 <MX_RNG_Init>
  MX_SDMMC1_SD_Init();
 8000b84:	f000 f9dc 	bl	8000f40 <MX_SDMMC1_SD_Init>
  MX_FATFS_Init();
 8000b88:	f018 f844 	bl	8018c14 <MX_FATFS_Init>
  /* USER CODE BEGIN 2 */



  struct mg_mgr mgr;        // Initialise
  mg_mgr_init(&mgr);        // Mongoose event manager
 8000b8c:	f107 0394 	add.w	r3, r7, #148	@ 0x94
 8000b90:	4618      	mov	r0, r3
 8000b92:	f00e fe63 	bl	800f85c <mg_mgr_init>
  mg_log_set(MG_LL_DEBUG);  // Set log level
 8000b96:	4b60      	ldr	r3, [pc, #384]	@ (8000d18 <main+0x204>)
 8000b98:	2203      	movs	r2, #3
 8000b9a:	601a      	str	r2, [r3, #0]

  MG_INFO(("Init TCP/IP stack ..."));
 8000b9c:	4b5e      	ldr	r3, [pc, #376]	@ (8000d18 <main+0x204>)
 8000b9e:	681b      	ldr	r3, [r3, #0]
 8000ba0:	2b01      	cmp	r3, #1
 8000ba2:	dd09      	ble.n	8000bb8 <main+0xa4>
 8000ba4:	4b5d      	ldr	r3, [pc, #372]	@ (8000d1c <main+0x208>)
 8000ba6:	f240 1211 	movw	r2, #273	@ 0x111
 8000baa:	495d      	ldr	r1, [pc, #372]	@ (8000d20 <main+0x20c>)
 8000bac:	2002      	movs	r0, #2
 8000bae:	f00b fc7d 	bl	800c4ac <mg_log_prefix>
 8000bb2:	485c      	ldr	r0, [pc, #368]	@ (8000d24 <main+0x210>)
 8000bb4:	f00b fcca 	bl	800c54c <mg_log>
  struct mg_tcpip_driver driver = {.tx = usb_tx, .up = usb_up};
 8000bb8:	f107 0384 	add.w	r3, r7, #132	@ 0x84
 8000bbc:	2200      	movs	r2, #0
 8000bbe:	601a      	str	r2, [r3, #0]
 8000bc0:	605a      	str	r2, [r3, #4]
 8000bc2:	609a      	str	r2, [r3, #8]
 8000bc4:	60da      	str	r2, [r3, #12]
 8000bc6:	4b58      	ldr	r3, [pc, #352]	@ (8000d28 <main+0x214>)
 8000bc8:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8000bcc:	4b57      	ldr	r3, [pc, #348]	@ (8000d2c <main+0x218>)
 8000bce:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  struct mg_tcpip_if mif = {.mac = GENERATE_LOCALLY_ADMINISTERED_MAC(),
 8000bd2:	f107 0308 	add.w	r3, r7, #8
 8000bd6:	2278      	movs	r2, #120	@ 0x78
 8000bd8:	2100      	movs	r1, #0
 8000bda:	4618      	mov	r0, r3
 8000bdc:	f018 fef6 	bl	80199cc <memset>
 8000be0:	2302      	movs	r3, #2
 8000be2:	723b      	strb	r3, [r7, #8]
 8000be4:	4b52      	ldr	r3, [pc, #328]	@ (8000d30 <main+0x21c>)
 8000be6:	781a      	ldrb	r2, [r3, #0]
 8000be8:	4b52      	ldr	r3, [pc, #328]	@ (8000d34 <main+0x220>)
 8000bea:	781b      	ldrb	r3, [r3, #0]
 8000bec:	4053      	eors	r3, r2
 8000bee:	b2db      	uxtb	r3, r3
 8000bf0:	727b      	strb	r3, [r7, #9]
 8000bf2:	4b51      	ldr	r3, [pc, #324]	@ (8000d38 <main+0x224>)
 8000bf4:	781a      	ldrb	r2, [r3, #0]
 8000bf6:	4b51      	ldr	r3, [pc, #324]	@ (8000d3c <main+0x228>)
 8000bf8:	781b      	ldrb	r3, [r3, #0]
 8000bfa:	4053      	eors	r3, r2
 8000bfc:	b2db      	uxtb	r3, r3
 8000bfe:	72bb      	strb	r3, [r7, #10]
 8000c00:	4b4f      	ldr	r3, [pc, #316]	@ (8000d40 <main+0x22c>)
 8000c02:	781a      	ldrb	r2, [r3, #0]
 8000c04:	4b4f      	ldr	r3, [pc, #316]	@ (8000d44 <main+0x230>)
 8000c06:	781b      	ldrb	r3, [r3, #0]
 8000c08:	4053      	eors	r3, r2
 8000c0a:	b2db      	uxtb	r3, r3
 8000c0c:	72fb      	strb	r3, [r7, #11]
 8000c0e:	4b4e      	ldr	r3, [pc, #312]	@ (8000d48 <main+0x234>)
 8000c10:	781a      	ldrb	r2, [r3, #0]
 8000c12:	4b4e      	ldr	r3, [pc, #312]	@ (8000d4c <main+0x238>)
 8000c14:	781b      	ldrb	r3, [r3, #0]
 8000c16:	4053      	eors	r3, r2
 8000c18:	b2da      	uxtb	r2, r3
 8000c1a:	4b4d      	ldr	r3, [pc, #308]	@ (8000d50 <main+0x23c>)
 8000c1c:	781b      	ldrb	r3, [r3, #0]
 8000c1e:	4053      	eors	r3, r2
 8000c20:	b2db      	uxtb	r3, r3
 8000c22:	733b      	strb	r3, [r7, #12]
 8000c24:	4b4b      	ldr	r3, [pc, #300]	@ (8000d54 <main+0x240>)
 8000c26:	781a      	ldrb	r2, [r3, #0]
 8000c28:	4b4b      	ldr	r3, [pc, #300]	@ (8000d58 <main+0x244>)
 8000c2a:	781b      	ldrb	r3, [r3, #0]
 8000c2c:	4053      	eors	r3, r2
 8000c2e:	b2da      	uxtb	r2, r3
 8000c30:	4b4a      	ldr	r3, [pc, #296]	@ (8000d5c <main+0x248>)
 8000c32:	781b      	ldrb	r3, [r3, #0]
 8000c34:	4053      	eors	r3, r2
 8000c36:	b2db      	uxtb	r3, r3
 8000c38:	737b      	strb	r3, [r7, #13]
                            .ip = mg_htonl(MG_U32(192, 168, 3, 1)),
 8000c3a:	4849      	ldr	r0, [pc, #292]	@ (8000d60 <main+0x24c>)
 8000c3c:	f00f fd9b 	bl	8010776 <mg_ntohl>
 8000c40:	4603      	mov	r3, r0
  struct mg_tcpip_if mif = {.mac = GENERATE_LOCALLY_ADMINISTERED_MAC(),
 8000c42:	613b      	str	r3, [r7, #16]
                            .mask = mg_htonl(MG_U32(255, 255, 255, 0)),
 8000c44:	f06f 00ff 	mvn.w	r0, #255	@ 0xff
 8000c48:	f00f fd95 	bl	8010776 <mg_ntohl>
 8000c4c:	4603      	mov	r3, r0
  struct mg_tcpip_if mif = {.mac = GENERATE_LOCALLY_ADMINISTERED_MAC(),
 8000c4e:	617b      	str	r3, [r7, #20]
 8000c50:	2301      	movs	r3, #1
 8000c52:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
 8000c56:	f107 0384 	add.w	r3, r7, #132	@ 0x84
 8000c5a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8000c5c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000c60:	63fb      	str	r3, [r7, #60]	@ 0x3c
                            .enable_dhcp_server = true,
                            .driver = &driver,
                            .recv_queue.size = 4096};
  s_ifp = &mif;
 8000c62:	4a40      	ldr	r2, [pc, #256]	@ (8000d64 <main+0x250>)
 8000c64:	f107 0308 	add.w	r3, r7, #8
 8000c68:	6013      	str	r3, [r2, #0]
  mg_tcpip_init(&mgr, &mif);
 8000c6a:	f107 0208 	add.w	r2, r7, #8
 8000c6e:	f107 0394 	add.w	r3, r7, #148	@ 0x94
 8000c72:	4611      	mov	r1, r2
 8000c74:	4618      	mov	r0, r3
 8000c76:	f00e f9ab 	bl	800efd0 <mg_tcpip_init>


  mg_timer_add(&mgr, 500, MG_TIMER_REPEAT, blink_cb, &mgr);
 8000c7a:	f107 0194 	add.w	r1, r7, #148	@ 0x94
 8000c7e:	f107 0394 	add.w	r3, r7, #148	@ 0x94
 8000c82:	9302      	str	r3, [sp, #8]
 8000c84:	4b38      	ldr	r3, [pc, #224]	@ (8000d68 <main+0x254>)
 8000c86:	9301      	str	r3, [sp, #4]
 8000c88:	2301      	movs	r3, #1
 8000c8a:	9300      	str	r3, [sp, #0]
 8000c8c:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 8000c90:	f04f 0300 	mov.w	r3, #0
 8000c94:	4608      	mov	r0, r1
 8000c96:	f00e fdb7 	bl	800f808 <mg_timer_add>
  mg_http_listen(&mgr, "tcp://0.0.0.0:80", fn, &mgr);
 8000c9a:	f107 0394 	add.w	r3, r7, #148	@ 0x94
 8000c9e:	f107 0094 	add.w	r0, r7, #148	@ 0x94
 8000ca2:	4a32      	ldr	r2, [pc, #200]	@ (8000d6c <main+0x258>)
 8000ca4:	4932      	ldr	r1, [pc, #200]	@ (8000d70 <main+0x25c>)
 8000ca6:	f00a fd3d 	bl	800b724 <mg_http_listen>

  MG_INFO(("Init USB ..."));
 8000caa:	4b1b      	ldr	r3, [pc, #108]	@ (8000d18 <main+0x204>)
 8000cac:	681b      	ldr	r3, [r3, #0]
 8000cae:	2b01      	cmp	r3, #1
 8000cb0:	dd09      	ble.n	8000cc6 <main+0x1b2>
 8000cb2:	4b1a      	ldr	r3, [pc, #104]	@ (8000d1c <main+0x208>)
 8000cb4:	f44f 7290 	mov.w	r2, #288	@ 0x120
 8000cb8:	4919      	ldr	r1, [pc, #100]	@ (8000d20 <main+0x20c>)
 8000cba:	2002      	movs	r0, #2
 8000cbc:	f00b fbf6 	bl	800c4ac <mg_log_prefix>
 8000cc0:	482c      	ldr	r0, [pc, #176]	@ (8000d74 <main+0x260>)
 8000cc2:	f00b fc43 	bl	800c54c <mg_log>
  init_tud_network_mac_address();
 8000cc6:	f7ff fdeb 	bl	80008a0 <init_tud_network_mac_address>

  fatfs_init();
 8000cca:	f000 fb17 	bl	80012fc <fatfs_init>
  tud_init(BOARD_TUD_RHPORT);
 8000cce:	2001      	movs	r0, #1
 8000cd0:	f004 f938 	bl	8004f44 <tud_init>

  MG_INFO(("Init done, starting main loop ..."));
 8000cd4:	4b10      	ldr	r3, [pc, #64]	@ (8000d18 <main+0x204>)
 8000cd6:	681b      	ldr	r3, [r3, #0]
 8000cd8:	2b01      	cmp	r3, #1
 8000cda:	dd09      	ble.n	8000cf0 <main+0x1dc>
 8000cdc:	4b0f      	ldr	r3, [pc, #60]	@ (8000d1c <main+0x208>)
 8000cde:	f44f 7293 	mov.w	r2, #294	@ 0x126
 8000ce2:	490f      	ldr	r1, [pc, #60]	@ (8000d20 <main+0x20c>)
 8000ce4:	2002      	movs	r0, #2
 8000ce6:	f00b fbe1 	bl	800c4ac <mg_log_prefix>
 8000cea:	4823      	ldr	r0, [pc, #140]	@ (8000d78 <main+0x264>)
 8000cec:	f00b fc2e 	bl	800c54c <mg_log>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  mg_mgr_poll(&mgr, 0);
 8000cf0:	f107 0394 	add.w	r3, r7, #148	@ 0x94
 8000cf4:	2100      	movs	r1, #0
 8000cf6:	4618      	mov	r0, r3
 8000cf8:	f00e fb68 	bl	800f3cc <mg_mgr_poll>
  tud_task_ext(UINT32_MAX, false);
 8000cfc:	2100      	movs	r1, #0
 8000cfe:	f04f 30ff 	mov.w	r0, #4294967295
 8000d02:	f004 fa39 	bl	8005178 <tud_task_ext>
}
 8000d06:	bf00      	nop
	  tud_task();
	  led_blinking_task();
 8000d08:	f000 fad0 	bl	80012ac <led_blinking_task>
	  cdc_task();
 8000d0c:	f000 fa9a 	bl	8001244 <cdc_task>
	  mg_mgr_poll(&mgr, 0);
 8000d10:	bf00      	nop
 8000d12:	e7ed      	b.n	8000cf0 <main+0x1dc>
 8000d14:	58024400 	.word	0x58024400
 8000d18:	24000048 	.word	0x24000048
 8000d1c:	0801bd98 	.word	0x0801bd98
 8000d20:	0801a3f0 	.word	0x0801a3f0
 8000d24:	0801a404 	.word	0x0801a404
 8000d28:	080009c7 	.word	0x080009c7
 8000d2c:	08000a3f 	.word	0x08000a3f
 8000d30:	1ff1e800 	.word	0x1ff1e800
 8000d34:	1ff1e801 	.word	0x1ff1e801
 8000d38:	1ff1e802 	.word	0x1ff1e802
 8000d3c:	1ff1e803 	.word	0x1ff1e803
 8000d40:	1ff1e804 	.word	0x1ff1e804
 8000d44:	1ff1e805 	.word	0x1ff1e805
 8000d48:	1ff1e806 	.word	0x1ff1e806
 8000d4c:	1ff1e807 	.word	0x1ff1e807
 8000d50:	1ff1e808 	.word	0x1ff1e808
 8000d54:	1ff1e809 	.word	0x1ff1e809
 8000d58:	1ff1e80a 	.word	0x1ff1e80a
 8000d5c:	1ff1e80b 	.word	0x1ff1e80b
 8000d60:	c0a80301 	.word	0xc0a80301
 8000d64:	24000708 	.word	0x24000708
 8000d68:	08000809 	.word	0x08000809
 8000d6c:	08000a99 	.word	0x08000a99
 8000d70:	0801a41c 	.word	0x0801a41c
 8000d74:	0801a430 	.word	0x0801a430
 8000d78:	0801a440 	.word	0x0801a440

08000d7c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000d7c:	b580      	push	{r7, lr}
 8000d7e:	b09c      	sub	sp, #112	@ 0x70
 8000d80:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000d82:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000d86:	224c      	movs	r2, #76	@ 0x4c
 8000d88:	2100      	movs	r1, #0
 8000d8a:	4618      	mov	r0, r3
 8000d8c:	f018 fe1e 	bl	80199cc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000d90:	1d3b      	adds	r3, r7, #4
 8000d92:	2220      	movs	r2, #32
 8000d94:	2100      	movs	r1, #0
 8000d96:	4618      	mov	r0, r3
 8000d98:	f018 fe18 	bl	80199cc <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_DIRECT_SMPS_SUPPLY);
 8000d9c:	2004      	movs	r0, #4
 8000d9e:	f010 fa7b 	bl	8011298 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000da2:	2300      	movs	r3, #0
 8000da4:	603b      	str	r3, [r7, #0]
 8000da6:	4b3d      	ldr	r3, [pc, #244]	@ (8000e9c <SystemClock_Config+0x120>)
 8000da8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000daa:	4a3c      	ldr	r2, [pc, #240]	@ (8000e9c <SystemClock_Config+0x120>)
 8000dac:	f023 0301 	bic.w	r3, r3, #1
 8000db0:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8000db2:	4b3a      	ldr	r3, [pc, #232]	@ (8000e9c <SystemClock_Config+0x120>)
 8000db4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000db6:	f003 0301 	and.w	r3, r3, #1
 8000dba:	603b      	str	r3, [r7, #0]
 8000dbc:	4b38      	ldr	r3, [pc, #224]	@ (8000ea0 <SystemClock_Config+0x124>)
 8000dbe:	699b      	ldr	r3, [r3, #24]
 8000dc0:	4a37      	ldr	r2, [pc, #220]	@ (8000ea0 <SystemClock_Config+0x124>)
 8000dc2:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8000dc6:	6193      	str	r3, [r2, #24]
 8000dc8:	4b35      	ldr	r3, [pc, #212]	@ (8000ea0 <SystemClock_Config+0x124>)
 8000dca:	699b      	ldr	r3, [r3, #24]
 8000dcc:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000dd0:	603b      	str	r3, [r7, #0]
 8000dd2:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000dd4:	bf00      	nop
 8000dd6:	4b32      	ldr	r3, [pc, #200]	@ (8000ea0 <SystemClock_Config+0x124>)
 8000dd8:	699b      	ldr	r3, [r3, #24]
 8000dda:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8000dde:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8000de2:	d1f8      	bne.n	8000dd6 <SystemClock_Config+0x5a>

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8000de4:	f010 fa48 	bl	8011278 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 8000de8:	f00f fde6 	bl	80109b8 <HAL_GetREVID>
 8000dec:	4b2d      	ldr	r3, [pc, #180]	@ (8000ea4 <SystemClock_Config+0x128>)
 8000dee:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8000df0:	4a2c      	ldr	r2, [pc, #176]	@ (8000ea4 <SystemClock_Config+0x128>)
 8000df2:	f023 0318 	bic.w	r3, r3, #24
 8000df6:	6713      	str	r3, [r2, #112]	@ 0x70

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_HSI
 8000df8:	232f      	movs	r3, #47	@ 0x2f
 8000dfa:	627b      	str	r3, [r7, #36]	@ 0x24
                              |RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_HSE
                              |RCC_OSCILLATORTYPE_LSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000dfc:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000e00:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8000e02:	2301      	movs	r3, #1
 8000e04:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 8000e06:	2301      	movs	r3, #1
 8000e08:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000e0a:	2340      	movs	r3, #64	@ 0x40
 8000e0c:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8000e0e:	2301      	movs	r3, #1
 8000e10:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 8000e12:	2301      	movs	r3, #1
 8000e14:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000e16:	2302      	movs	r3, #2
 8000e18:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000e1a:	2302      	movs	r3, #2
 8000e1c:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLM = 5;
 8000e1e:	2305      	movs	r3, #5
 8000e20:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLN = 48;
 8000e22:	2330      	movs	r3, #48	@ 0x30
 8000e24:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 8000e26:	2302      	movs	r3, #2
 8000e28:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLQ = 3;
 8000e2a:	2303      	movs	r3, #3
 8000e2c:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000e2e:	2302      	movs	r3, #2
 8000e30:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_2;
 8000e32:	2308      	movs	r3, #8
 8000e34:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8000e36:	2300      	movs	r3, #0
 8000e38:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8000e3a:	2300      	movs	r3, #0
 8000e3c:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000e3e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000e42:	4618      	mov	r0, r3
 8000e44:	f010 fa92 	bl	801136c <HAL_RCC_OscConfig>
 8000e48:	4603      	mov	r3, r0
 8000e4a:	2b00      	cmp	r3, #0
 8000e4c:	d001      	beq.n	8000e52 <SystemClock_Config+0xd6>
  {
    Error_Handler();
 8000e4e:	f000 fa4f 	bl	80012f0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000e52:	233f      	movs	r3, #63	@ 0x3f
 8000e54:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000e56:	2303      	movs	r3, #3
 8000e58:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8000e5a:	2300      	movs	r3, #0
 8000e5c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 8000e5e:	2300      	movs	r3, #0
 8000e60:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV1;
 8000e62:	2300      	movs	r3, #0
 8000e64:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV1;
 8000e66:	2300      	movs	r3, #0
 8000e68:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV1;
 8000e6a:	2300      	movs	r3, #0
 8000e6c:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV1;
 8000e6e:	2300      	movs	r3, #0
 8000e70:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000e72:	1d3b      	adds	r3, r7, #4
 8000e74:	2101      	movs	r1, #1
 8000e76:	4618      	mov	r0, r3
 8000e78:	f010 fed2 	bl	8011c20 <HAL_RCC_ClockConfig>
 8000e7c:	4603      	mov	r3, r0
 8000e7e:	2b00      	cmp	r3, #0
 8000e80:	d001      	beq.n	8000e86 <SystemClock_Config+0x10a>
  {
    Error_Handler();
 8000e82:	f000 fa35 	bl	80012f0 <Error_Handler>
  }
  HAL_RCC_MCOConfig(RCC_MCO1, RCC_MCO1SOURCE_HSI, RCC_MCODIV_1);
 8000e86:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 8000e8a:	2100      	movs	r1, #0
 8000e8c:	2000      	movs	r0, #0
 8000e8e:	f011 f87d 	bl	8011f8c <HAL_RCC_MCOConfig>
}
 8000e92:	bf00      	nop
 8000e94:	3770      	adds	r7, #112	@ 0x70
 8000e96:	46bd      	mov	sp, r7
 8000e98:	bd80      	pop	{r7, pc}
 8000e9a:	bf00      	nop
 8000e9c:	58000400 	.word	0x58000400
 8000ea0:	58024800 	.word	0x58024800
 8000ea4:	58024400 	.word	0x58024400

08000ea8 <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 8000ea8:	b580      	push	{r7, lr}
 8000eaa:	b0b2      	sub	sp, #200	@ 0xc8
 8000eac:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000eae:	463b      	mov	r3, r7
 8000eb0:	22c8      	movs	r2, #200	@ 0xc8
 8000eb2:	2100      	movs	r1, #0
 8000eb4:	4618      	mov	r0, r3
 8000eb6:	f018 fd89 	bl	80199cc <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_ADC|RCC_PERIPHCLK_UART8
 8000eba:	4a15      	ldr	r2, [pc, #84]	@ (8000f10 <PeriphCommonClock_Config+0x68>)
 8000ebc:	f04f 0300 	mov.w	r3, #0
 8000ec0:	e9c7 2300 	strd	r2, r3, [r7]
                              |RCC_PERIPHCLK_USART1;
  PeriphClkInitStruct.PLL2.PLL2M = 2;
 8000ec4:	2302      	movs	r3, #2
 8000ec6:	60bb      	str	r3, [r7, #8]
  PeriphClkInitStruct.PLL2.PLL2N = 12;
 8000ec8:	230c      	movs	r3, #12
 8000eca:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.PLL2.PLL2P = 2;
 8000ecc:	2302      	movs	r3, #2
 8000ece:	613b      	str	r3, [r7, #16]
  PeriphClkInitStruct.PLL2.PLL2Q = 2;
 8000ed0:	2302      	movs	r3, #2
 8000ed2:	617b      	str	r3, [r7, #20]
  PeriphClkInitStruct.PLL2.PLL2R = 5;
 8000ed4:	2305      	movs	r3, #5
 8000ed6:	61bb      	str	r3, [r7, #24]
  PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_3;
 8000ed8:	23c0      	movs	r3, #192	@ 0xc0
 8000eda:	61fb      	str	r3, [r7, #28]
  PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOMEDIUM;
 8000edc:	2320      	movs	r3, #32
 8000ede:	623b      	str	r3, [r7, #32]
  PeriphClkInitStruct.PLL2.PLL2FRACN = 0;
 8000ee0:	2300      	movs	r3, #0
 8000ee2:	627b      	str	r3, [r7, #36]	@ 0x24
  PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_PLL2;
 8000ee4:	2301      	movs	r3, #1
 8000ee6:	67fb      	str	r3, [r7, #124]	@ 0x7c
  PeriphClkInitStruct.Usart16ClockSelection = RCC_USART16CLKSOURCE_PLL2;
 8000ee8:	2308      	movs	r3, #8
 8000eea:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
  PeriphClkInitStruct.AdcClockSelection = RCC_ADCCLKSOURCE_PLL2;
 8000eee:	2300      	movs	r3, #0
 8000ef0:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000ef4:	463b      	mov	r3, r7
 8000ef6:	4618      	mov	r0, r3
 8000ef8:	f011 fa88 	bl	801240c <HAL_RCCEx_PeriphCLKConfig>
 8000efc:	4603      	mov	r3, r0
 8000efe:	2b00      	cmp	r3, #0
 8000f00:	d001      	beq.n	8000f06 <PeriphCommonClock_Config+0x5e>
  {
    Error_Handler();
 8000f02:	f000 f9f5 	bl	80012f0 <Error_Handler>
  }
}
 8000f06:	bf00      	nop
 8000f08:	37c8      	adds	r7, #200	@ 0xc8
 8000f0a:	46bd      	mov	sp, r7
 8000f0c:	bd80      	pop	{r7, pc}
 8000f0e:	bf00      	nop
 8000f10:	00080003 	.word	0x00080003

08000f14 <MX_RNG_Init>:
  * @brief RNG Initialization Function
  * @param None
  * @retval None
  */
static void MX_RNG_Init(void)
{
 8000f14:	b580      	push	{r7, lr}
 8000f16:	af00      	add	r7, sp, #0
  /* USER CODE END RNG_Init 0 */

  /* USER CODE BEGIN RNG_Init 1 */

  /* USER CODE END RNG_Init 1 */
  hrng.Instance = RNG;
 8000f18:	4b07      	ldr	r3, [pc, #28]	@ (8000f38 <MX_RNG_Init+0x24>)
 8000f1a:	4a08      	ldr	r2, [pc, #32]	@ (8000f3c <MX_RNG_Init+0x28>)
 8000f1c:	601a      	str	r2, [r3, #0]
  hrng.Init.ClockErrorDetection = RNG_CED_ENABLE;
 8000f1e:	4b06      	ldr	r3, [pc, #24]	@ (8000f38 <MX_RNG_Init+0x24>)
 8000f20:	2200      	movs	r2, #0
 8000f22:	605a      	str	r2, [r3, #4]
  if (HAL_RNG_Init(&hrng) != HAL_OK)
 8000f24:	4804      	ldr	r0, [pc, #16]	@ (8000f38 <MX_RNG_Init+0x24>)
 8000f26:	f013 ffaf 	bl	8014e88 <HAL_RNG_Init>
 8000f2a:	4603      	mov	r3, r0
 8000f2c:	2b00      	cmp	r3, #0
 8000f2e:	d001      	beq.n	8000f34 <MX_RNG_Init+0x20>
  {
    Error_Handler();
 8000f30:	f000 f9de 	bl	80012f0 <Error_Handler>
  }
  /* USER CODE BEGIN RNG_Init 2 */

  /* USER CODE END RNG_Init 2 */

}
 8000f34:	bf00      	nop
 8000f36:	bd80      	pop	{r7, pc}
 8000f38:	240000d0 	.word	0x240000d0
 8000f3c:	48021800 	.word	0x48021800

08000f40 <MX_SDMMC1_SD_Init>:
  * @brief SDMMC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SDMMC1_SD_Init(void)
{
 8000f40:	b580      	push	{r7, lr}
 8000f42:	af00      	add	r7, sp, #0
  /* USER CODE END SDMMC1_Init 0 */

  /* USER CODE BEGIN SDMMC1_Init 1 */

  /* USER CODE END SDMMC1_Init 1 */
  hsd1.Instance = SDMMC1;
 8000f44:	4b0e      	ldr	r3, [pc, #56]	@ (8000f80 <MX_SDMMC1_SD_Init+0x40>)
 8000f46:	4a0f      	ldr	r2, [pc, #60]	@ (8000f84 <MX_SDMMC1_SD_Init+0x44>)
 8000f48:	601a      	str	r2, [r3, #0]
  hsd1.Init.ClockEdge = SDMMC_CLOCK_EDGE_RISING;
 8000f4a:	4b0d      	ldr	r3, [pc, #52]	@ (8000f80 <MX_SDMMC1_SD_Init+0x40>)
 8000f4c:	2200      	movs	r2, #0
 8000f4e:	605a      	str	r2, [r3, #4]
  hsd1.Init.ClockPowerSave = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 8000f50:	4b0b      	ldr	r3, [pc, #44]	@ (8000f80 <MX_SDMMC1_SD_Init+0x40>)
 8000f52:	2200      	movs	r2, #0
 8000f54:	609a      	str	r2, [r3, #8]
  hsd1.Init.BusWide = SDMMC_BUS_WIDE_4B;
 8000f56:	4b0a      	ldr	r3, [pc, #40]	@ (8000f80 <MX_SDMMC1_SD_Init+0x40>)
 8000f58:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8000f5c:	60da      	str	r2, [r3, #12]
  hsd1.Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 8000f5e:	4b08      	ldr	r3, [pc, #32]	@ (8000f80 <MX_SDMMC1_SD_Init+0x40>)
 8000f60:	2200      	movs	r2, #0
 8000f62:	611a      	str	r2, [r3, #16]
  hsd1.Init.ClockDiv = 0;
 8000f64:	4b06      	ldr	r3, [pc, #24]	@ (8000f80 <MX_SDMMC1_SD_Init+0x40>)
 8000f66:	2200      	movs	r2, #0
 8000f68:	615a      	str	r2, [r3, #20]
  if (HAL_SD_Init(&hsd1) != HAL_OK)
 8000f6a:	4805      	ldr	r0, [pc, #20]	@ (8000f80 <MX_SDMMC1_SD_Init+0x40>)
 8000f6c:	f014 f844 	bl	8014ff8 <HAL_SD_Init>
 8000f70:	4603      	mov	r3, r0
 8000f72:	2b00      	cmp	r3, #0
 8000f74:	d001      	beq.n	8000f7a <MX_SDMMC1_SD_Init+0x3a>
  {
    Error_Handler();
 8000f76:	f000 f9bb 	bl	80012f0 <Error_Handler>
  }
  /* USER CODE BEGIN SDMMC1_Init 2 */

  /* USER CODE END SDMMC1_Init 2 */

}
 8000f7a:	bf00      	nop
 8000f7c:	bd80      	pop	{r7, pc}
 8000f7e:	bf00      	nop
 8000f80:	240000e4 	.word	0x240000e4
 8000f84:	52007000 	.word	0x52007000

08000f88 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000f88:	b580      	push	{r7, lr}
 8000f8a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000f8c:	4b22      	ldr	r3, [pc, #136]	@ (8001018 <MX_USART1_UART_Init+0x90>)
 8000f8e:	4a23      	ldr	r2, [pc, #140]	@ (800101c <MX_USART1_UART_Init+0x94>)
 8000f90:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000f92:	4b21      	ldr	r3, [pc, #132]	@ (8001018 <MX_USART1_UART_Init+0x90>)
 8000f94:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000f98:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000f9a:	4b1f      	ldr	r3, [pc, #124]	@ (8001018 <MX_USART1_UART_Init+0x90>)
 8000f9c:	2200      	movs	r2, #0
 8000f9e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000fa0:	4b1d      	ldr	r3, [pc, #116]	@ (8001018 <MX_USART1_UART_Init+0x90>)
 8000fa2:	2200      	movs	r2, #0
 8000fa4:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000fa6:	4b1c      	ldr	r3, [pc, #112]	@ (8001018 <MX_USART1_UART_Init+0x90>)
 8000fa8:	2200      	movs	r2, #0
 8000faa:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000fac:	4b1a      	ldr	r3, [pc, #104]	@ (8001018 <MX_USART1_UART_Init+0x90>)
 8000fae:	220c      	movs	r2, #12
 8000fb0:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000fb2:	4b19      	ldr	r3, [pc, #100]	@ (8001018 <MX_USART1_UART_Init+0x90>)
 8000fb4:	2200      	movs	r2, #0
 8000fb6:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000fb8:	4b17      	ldr	r3, [pc, #92]	@ (8001018 <MX_USART1_UART_Init+0x90>)
 8000fba:	2200      	movs	r2, #0
 8000fbc:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000fbe:	4b16      	ldr	r3, [pc, #88]	@ (8001018 <MX_USART1_UART_Init+0x90>)
 8000fc0:	2200      	movs	r2, #0
 8000fc2:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000fc4:	4b14      	ldr	r3, [pc, #80]	@ (8001018 <MX_USART1_UART_Init+0x90>)
 8000fc6:	2200      	movs	r2, #0
 8000fc8:	625a      	str	r2, [r3, #36]	@ 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000fca:	4b13      	ldr	r3, [pc, #76]	@ (8001018 <MX_USART1_UART_Init+0x90>)
 8000fcc:	2200      	movs	r2, #0
 8000fce:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000fd0:	4811      	ldr	r0, [pc, #68]	@ (8001018 <MX_USART1_UART_Init+0x90>)
 8000fd2:	f015 fc75 	bl	80168c0 <HAL_UART_Init>
 8000fd6:	4603      	mov	r3, r0
 8000fd8:	2b00      	cmp	r3, #0
 8000fda:	d001      	beq.n	8000fe0 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 8000fdc:	f000 f988 	bl	80012f0 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000fe0:	2100      	movs	r1, #0
 8000fe2:	480d      	ldr	r0, [pc, #52]	@ (8001018 <MX_USART1_UART_Init+0x90>)
 8000fe4:	f016 fc77 	bl	80178d6 <HAL_UARTEx_SetTxFifoThreshold>
 8000fe8:	4603      	mov	r3, r0
 8000fea:	2b00      	cmp	r3, #0
 8000fec:	d001      	beq.n	8000ff2 <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 8000fee:	f000 f97f 	bl	80012f0 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000ff2:	2100      	movs	r1, #0
 8000ff4:	4808      	ldr	r0, [pc, #32]	@ (8001018 <MX_USART1_UART_Init+0x90>)
 8000ff6:	f016 fcac 	bl	8017952 <HAL_UARTEx_SetRxFifoThreshold>
 8000ffa:	4603      	mov	r3, r0
 8000ffc:	2b00      	cmp	r3, #0
 8000ffe:	d001      	beq.n	8001004 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 8001000:	f000 f976 	bl	80012f0 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8001004:	4804      	ldr	r0, [pc, #16]	@ (8001018 <MX_USART1_UART_Init+0x90>)
 8001006:	f016 fc2d 	bl	8017864 <HAL_UARTEx_DisableFifoMode>
 800100a:	4603      	mov	r3, r0
 800100c:	2b00      	cmp	r3, #0
 800100e:	d001      	beq.n	8001014 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8001010:	f000 f96e 	bl	80012f0 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001014:	bf00      	nop
 8001016:	bd80      	pop	{r7, pc}
 8001018:	24000160 	.word	0x24000160
 800101c:	40011000 	.word	0x40011000

08001020 <MX_USB_OTG_HS_PCD_Init>:
  * @brief USB_OTG_HS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_HS_PCD_Init(void)
{
 8001020:	b580      	push	{r7, lr}
 8001022:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_HS_Init 0 */

  /* USER CODE BEGIN USB_OTG_HS_Init 1 */

  /* USER CODE END USB_OTG_HS_Init 1 */
  hpcd_USB_OTG_HS.Instance = USB_OTG_HS;
 8001024:	4b15      	ldr	r3, [pc, #84]	@ (800107c <MX_USB_OTG_HS_PCD_Init+0x5c>)
 8001026:	4a16      	ldr	r2, [pc, #88]	@ (8001080 <MX_USB_OTG_HS_PCD_Init+0x60>)
 8001028:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_HS.Init.dev_endpoints = 9;
 800102a:	4b14      	ldr	r3, [pc, #80]	@ (800107c <MX_USB_OTG_HS_PCD_Init+0x5c>)
 800102c:	2209      	movs	r2, #9
 800102e:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_HS.Init.speed = PCD_SPEED_HIGH;
 8001030:	4b12      	ldr	r3, [pc, #72]	@ (800107c <MX_USB_OTG_HS_PCD_Init+0x5c>)
 8001032:	2200      	movs	r2, #0
 8001034:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_HS.Init.dma_enable = DISABLE;
 8001036:	4b11      	ldr	r3, [pc, #68]	@ (800107c <MX_USB_OTG_HS_PCD_Init+0x5c>)
 8001038:	2200      	movs	r2, #0
 800103a:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_HS.Init.phy_itface = USB_OTG_ULPI_PHY;
 800103c:	4b0f      	ldr	r3, [pc, #60]	@ (800107c <MX_USB_OTG_HS_PCD_Init+0x5c>)
 800103e:	2201      	movs	r2, #1
 8001040:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_HS.Init.Sof_enable = DISABLE;
 8001042:	4b0e      	ldr	r3, [pc, #56]	@ (800107c <MX_USB_OTG_HS_PCD_Init+0x5c>)
 8001044:	2200      	movs	r2, #0
 8001046:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_HS.Init.low_power_enable = DISABLE;
 8001048:	4b0c      	ldr	r3, [pc, #48]	@ (800107c <MX_USB_OTG_HS_PCD_Init+0x5c>)
 800104a:	2200      	movs	r2, #0
 800104c:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_HS.Init.lpm_enable = DISABLE;
 800104e:	4b0b      	ldr	r3, [pc, #44]	@ (800107c <MX_USB_OTG_HS_PCD_Init+0x5c>)
 8001050:	2200      	movs	r2, #0
 8001052:	625a      	str	r2, [r3, #36]	@ 0x24
  hpcd_USB_OTG_HS.Init.vbus_sensing_enable = DISABLE;
 8001054:	4b09      	ldr	r3, [pc, #36]	@ (800107c <MX_USB_OTG_HS_PCD_Init+0x5c>)
 8001056:	2200      	movs	r2, #0
 8001058:	62da      	str	r2, [r3, #44]	@ 0x2c
  hpcd_USB_OTG_HS.Init.use_dedicated_ep1 = DISABLE;
 800105a:	4b08      	ldr	r3, [pc, #32]	@ (800107c <MX_USB_OTG_HS_PCD_Init+0x5c>)
 800105c:	2200      	movs	r2, #0
 800105e:	631a      	str	r2, [r3, #48]	@ 0x30
  hpcd_USB_OTG_HS.Init.use_external_vbus = DISABLE;
 8001060:	4b06      	ldr	r3, [pc, #24]	@ (800107c <MX_USB_OTG_HS_PCD_Init+0x5c>)
 8001062:	2200      	movs	r2, #0
 8001064:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_PCD_Init(&hpcd_USB_OTG_HS) != HAL_OK)
 8001066:	4805      	ldr	r0, [pc, #20]	@ (800107c <MX_USB_OTG_HS_PCD_Init+0x5c>)
 8001068:	f00f ffbd 	bl	8010fe6 <HAL_PCD_Init>
 800106c:	4603      	mov	r3, r0
 800106e:	2b00      	cmp	r3, #0
 8001070:	d001      	beq.n	8001076 <MX_USB_OTG_HS_PCD_Init+0x56>
  {
    Error_Handler();
 8001072:	f000 f93d 	bl	80012f0 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_HS_Init 2 */

  /* USER CODE END USB_OTG_HS_Init 2 */

}
 8001076:	bf00      	nop
 8001078:	bd80      	pop	{r7, pc}
 800107a:	bf00      	nop
 800107c:	240001f4 	.word	0x240001f4
 8001080:	40040000 	.word	0x40040000

08001084 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001084:	b580      	push	{r7, lr}
 8001086:	b08c      	sub	sp, #48	@ 0x30
 8001088:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800108a:	f107 031c 	add.w	r3, r7, #28
 800108e:	2200      	movs	r2, #0
 8001090:	601a      	str	r2, [r3, #0]
 8001092:	605a      	str	r2, [r3, #4]
 8001094:	609a      	str	r2, [r3, #8]
 8001096:	60da      	str	r2, [r3, #12]
 8001098:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800109a:	4b48      	ldr	r3, [pc, #288]	@ (80011bc <MX_GPIO_Init+0x138>)
 800109c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80010a0:	4a46      	ldr	r2, [pc, #280]	@ (80011bc <MX_GPIO_Init+0x138>)
 80010a2:	f043 0302 	orr.w	r3, r3, #2
 80010a6:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80010aa:	4b44      	ldr	r3, [pc, #272]	@ (80011bc <MX_GPIO_Init+0x138>)
 80010ac:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80010b0:	f003 0302 	and.w	r3, r3, #2
 80010b4:	61bb      	str	r3, [r7, #24]
 80010b6:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80010b8:	4b40      	ldr	r3, [pc, #256]	@ (80011bc <MX_GPIO_Init+0x138>)
 80010ba:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80010be:	4a3f      	ldr	r2, [pc, #252]	@ (80011bc <MX_GPIO_Init+0x138>)
 80010c0:	f043 0304 	orr.w	r3, r3, #4
 80010c4:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80010c8:	4b3c      	ldr	r3, [pc, #240]	@ (80011bc <MX_GPIO_Init+0x138>)
 80010ca:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80010ce:	f003 0304 	and.w	r3, r3, #4
 80010d2:	617b      	str	r3, [r7, #20]
 80010d4:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80010d6:	4b39      	ldr	r3, [pc, #228]	@ (80011bc <MX_GPIO_Init+0x138>)
 80010d8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80010dc:	4a37      	ldr	r2, [pc, #220]	@ (80011bc <MX_GPIO_Init+0x138>)
 80010de:	f043 0308 	orr.w	r3, r3, #8
 80010e2:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80010e6:	4b35      	ldr	r3, [pc, #212]	@ (80011bc <MX_GPIO_Init+0x138>)
 80010e8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80010ec:	f003 0308 	and.w	r3, r3, #8
 80010f0:	613b      	str	r3, [r7, #16]
 80010f2:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80010f4:	4b31      	ldr	r3, [pc, #196]	@ (80011bc <MX_GPIO_Init+0x138>)
 80010f6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80010fa:	4a30      	ldr	r2, [pc, #192]	@ (80011bc <MX_GPIO_Init+0x138>)
 80010fc:	f043 0301 	orr.w	r3, r3, #1
 8001100:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001104:	4b2d      	ldr	r3, [pc, #180]	@ (80011bc <MX_GPIO_Init+0x138>)
 8001106:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800110a:	f003 0301 	and.w	r3, r3, #1
 800110e:	60fb      	str	r3, [r7, #12]
 8001110:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOI_CLK_ENABLE();
 8001112:	4b2a      	ldr	r3, [pc, #168]	@ (80011bc <MX_GPIO_Init+0x138>)
 8001114:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001118:	4a28      	ldr	r2, [pc, #160]	@ (80011bc <MX_GPIO_Init+0x138>)
 800111a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800111e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001122:	4b26      	ldr	r3, [pc, #152]	@ (80011bc <MX_GPIO_Init+0x138>)
 8001124:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001128:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800112c:	60bb      	str	r3, [r7, #8]
 800112e:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001130:	4b22      	ldr	r3, [pc, #136]	@ (80011bc <MX_GPIO_Init+0x138>)
 8001132:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001136:	4a21      	ldr	r2, [pc, #132]	@ (80011bc <MX_GPIO_Init+0x138>)
 8001138:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800113c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001140:	4b1e      	ldr	r3, [pc, #120]	@ (80011bc <MX_GPIO_Init+0x138>)
 8001142:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001146:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800114a:	607b      	str	r3, [r7, #4]
 800114c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOI, LED1_Pin|LED2_Pin|LED3_Pin|LED4_Pin, GPIO_PIN_RESET);
 800114e:	2200      	movs	r2, #0
 8001150:	f44f 4170 	mov.w	r1, #61440	@ 0xf000
 8001154:	481a      	ldr	r0, [pc, #104]	@ (80011c0 <MX_GPIO_Init+0x13c>)
 8001156:	f00f ff13 	bl	8010f80 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : uSD_Detect_Pin */
  GPIO_InitStruct.Pin = uSD_Detect_Pin;
 800115a:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800115e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001160:	2300      	movs	r3, #0
 8001162:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001164:	2300      	movs	r3, #0
 8001166:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(uSD_Detect_GPIO_Port, &GPIO_InitStruct);
 8001168:	f107 031c 	add.w	r3, r7, #28
 800116c:	4619      	mov	r1, r3
 800116e:	4814      	ldr	r0, [pc, #80]	@ (80011c0 <MX_GPIO_Init+0x13c>)
 8001170:	f00f fd3e 	bl	8010bf0 <HAL_GPIO_Init>

  /*Configure GPIO pin : CEC_CK_MCO1_Pin */
  GPIO_InitStruct.Pin = CEC_CK_MCO1_Pin;
 8001174:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001178:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800117a:	2302      	movs	r3, #2
 800117c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800117e:	2300      	movs	r3, #0
 8001180:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001182:	2300      	movs	r3, #0
 8001184:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 8001186:	2300      	movs	r3, #0
 8001188:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(CEC_CK_MCO1_GPIO_Port, &GPIO_InitStruct);
 800118a:	f107 031c 	add.w	r3, r7, #28
 800118e:	4619      	mov	r1, r3
 8001190:	480c      	ldr	r0, [pc, #48]	@ (80011c4 <MX_GPIO_Init+0x140>)
 8001192:	f00f fd2d 	bl	8010bf0 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED1_Pin LED2_Pin LED3_Pin LED4_Pin */
  GPIO_InitStruct.Pin = LED1_Pin|LED2_Pin|LED3_Pin|LED4_Pin;
 8001196:	f44f 4370 	mov.w	r3, #61440	@ 0xf000
 800119a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800119c:	2301      	movs	r3, #1
 800119e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011a0:	2300      	movs	r3, #0
 80011a2:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011a4:	2300      	movs	r3, #0
 80011a6:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 80011a8:	f107 031c 	add.w	r3, r7, #28
 80011ac:	4619      	mov	r1, r3
 80011ae:	4804      	ldr	r0, [pc, #16]	@ (80011c0 <MX_GPIO_Init+0x13c>)
 80011b0:	f00f fd1e 	bl	8010bf0 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80011b4:	bf00      	nop
 80011b6:	3730      	adds	r7, #48	@ 0x30
 80011b8:	46bd      	mov	sp, r7
 80011ba:	bd80      	pop	{r7, pc}
 80011bc:	58024400 	.word	0x58024400
 80011c0:	58022000 	.word	0x58022000
 80011c4:	58020000 	.word	0x58020000

080011c8 <tud_mount_cb>:
//--------------------------------------------------------------------+
// Device callbacks
//--------------------------------------------------------------------+

// Invoked when device is mounted
void tud_mount_cb(void) {
 80011c8:	b480      	push	{r7}
 80011ca:	af00      	add	r7, sp, #0
  blink_interval_ms = BLINK_MOUNTED;
 80011cc:	4b04      	ldr	r3, [pc, #16]	@ (80011e0 <tud_mount_cb+0x18>)
 80011ce:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80011d2:	601a      	str	r2, [r3, #0]
}
 80011d4:	bf00      	nop
 80011d6:	46bd      	mov	sp, r7
 80011d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011dc:	4770      	bx	lr
 80011de:	bf00      	nop
 80011e0:	24000008 	.word	0x24000008

080011e4 <tud_umount_cb>:

// Invoked when device is unmounted
void tud_umount_cb(void) {
 80011e4:	b480      	push	{r7}
 80011e6:	af00      	add	r7, sp, #0
  blink_interval_ms = BLINK_NOT_MOUNTED;
 80011e8:	4b04      	ldr	r3, [pc, #16]	@ (80011fc <tud_umount_cb+0x18>)
 80011ea:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 80011ee:	601a      	str	r2, [r3, #0]
}
 80011f0:	bf00      	nop
 80011f2:	46bd      	mov	sp, r7
 80011f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011f8:	4770      	bx	lr
 80011fa:	bf00      	nop
 80011fc:	24000008 	.word	0x24000008

08001200 <tud_suspend_cb>:

// Invoked when usb bus is suspended
// remote_wakeup_en : if host allow us  to perform remote wakeup
// Within 7ms, device must draw an average of current less than 2.5 mA from bus
void tud_suspend_cb(bool remote_wakeup_en) {
 8001200:	b480      	push	{r7}
 8001202:	b083      	sub	sp, #12
 8001204:	af00      	add	r7, sp, #0
 8001206:	4603      	mov	r3, r0
 8001208:	71fb      	strb	r3, [r7, #7]
  (void) remote_wakeup_en;
  blink_interval_ms = BLINK_SUSPENDED;
 800120a:	4b04      	ldr	r3, [pc, #16]	@ (800121c <tud_suspend_cb+0x1c>)
 800120c:	2264      	movs	r2, #100	@ 0x64
 800120e:	601a      	str	r2, [r3, #0]
}
 8001210:	bf00      	nop
 8001212:	370c      	adds	r7, #12
 8001214:	46bd      	mov	sp, r7
 8001216:	f85d 7b04 	ldr.w	r7, [sp], #4
 800121a:	4770      	bx	lr
 800121c:	24000008 	.word	0x24000008

08001220 <tud_resume_cb>:

// Invoked when usb bus is resumed
void tud_resume_cb(void) {
 8001220:	b580      	push	{r7, lr}
 8001222:	af00      	add	r7, sp, #0
  blink_interval_ms = tud_mounted() ? BLINK_MOUNTED : BLINK_NOT_MOUNTED;
 8001224:	f003 fe58 	bl	8004ed8 <tud_mounted>
 8001228:	4603      	mov	r3, r0
 800122a:	2b00      	cmp	r3, #0
 800122c:	d002      	beq.n	8001234 <tud_resume_cb+0x14>
 800122e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001232:	e001      	b.n	8001238 <tud_resume_cb+0x18>
 8001234:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 8001238:	4a01      	ldr	r2, [pc, #4]	@ (8001240 <tud_resume_cb+0x20>)
 800123a:	6013      	str	r3, [r2, #0]
}
 800123c:	bf00      	nop
 800123e:	bd80      	pop	{r7, pc}
 8001240:	24000008 	.word	0x24000008

08001244 <cdc_task>:

//--------------------------------------------------------------------+
// USB CDC
//--------------------------------------------------------------------+

void cdc_task(void) {
 8001244:	b580      	push	{r7, lr}
 8001246:	b092      	sub	sp, #72	@ 0x48
 8001248:	af00      	add	r7, sp, #0
  // connected() check for DTR bit
  // Most but not all terminal client set this when making connection
  // if ( tud_cdc_connected() )
  {
    // connected and there are data available
    if (tud_cdc_available()) {
 800124a:	f7ff faaf 	bl	80007ac <tud_cdc_available>
 800124e:	4603      	mov	r3, r0
 8001250:	2b00      	cmp	r3, #0
 8001252:	d00c      	beq.n	800126e <cdc_task+0x2a>
      // read data
      char buf[64];
      uint32_t count = tud_cdc_read(buf, sizeof(buf));
 8001254:	1d3b      	adds	r3, r7, #4
 8001256:	2140      	movs	r1, #64	@ 0x40
 8001258:	4618      	mov	r0, r3
 800125a:	f7ff faaf 	bl	80007bc <tud_cdc_read>
 800125e:	6478      	str	r0, [r7, #68]	@ 0x44

      // Echo back
      // Note: Skip echo by commenting out write() and write_flush()
      // for throughput test e.g
      //    $ dd if=/dev/zero of=/dev/ttyACM0 count=10000
      tud_cdc_write(buf, count);
 8001260:	1d3b      	adds	r3, r7, #4
 8001262:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8001264:	4618      	mov	r0, r3
 8001266:	f7ff fab8 	bl	80007da <tud_cdc_write>
      tud_cdc_write_flush();
 800126a:	f7ff fac5 	bl	80007f8 <tud_cdc_write_flush>
    }
  }
}
 800126e:	bf00      	nop
 8001270:	3748      	adds	r7, #72	@ 0x48
 8001272:	46bd      	mov	sp, r7
 8001274:	bd80      	pop	{r7, pc}

08001276 <tud_cdc_line_state_cb>:

// Invoked when cdc when line state changed e.g connected/disconnected
void tud_cdc_line_state_cb(uint8_t itf, bool dtr, bool rts) {
 8001276:	b480      	push	{r7}
 8001278:	b083      	sub	sp, #12
 800127a:	af00      	add	r7, sp, #0
 800127c:	4603      	mov	r3, r0
 800127e:	71fb      	strb	r3, [r7, #7]
 8001280:	460b      	mov	r3, r1
 8001282:	71bb      	strb	r3, [r7, #6]
 8001284:	4613      	mov	r3, r2
 8001286:	717b      	strb	r3, [r7, #5]
  if (dtr) {
    // Terminal connected
  } else {
    // Terminal disconnected
  }
}
 8001288:	bf00      	nop
 800128a:	370c      	adds	r7, #12
 800128c:	46bd      	mov	sp, r7
 800128e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001292:	4770      	bx	lr

08001294 <tud_cdc_rx_cb>:

// Invoked when CDC interface received data from host
void tud_cdc_rx_cb(uint8_t itf) {
 8001294:	b480      	push	{r7}
 8001296:	b083      	sub	sp, #12
 8001298:	af00      	add	r7, sp, #0
 800129a:	4603      	mov	r3, r0
 800129c:	71fb      	strb	r3, [r7, #7]
  (void) itf;
}
 800129e:	bf00      	nop
 80012a0:	370c      	adds	r7, #12
 80012a2:	46bd      	mov	sp, r7
 80012a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012a8:	4770      	bx	lr
	...

080012ac <led_blinking_task>:


//--------------------------------------------------------------------+
// BLINKING TASK
//--------------------------------------------------------------------+
void led_blinking_task(void) {
 80012ac:	b580      	push	{r7, lr}
 80012ae:	af00      	add	r7, sp, #0
  static uint32_t start_ms = 0;

  // Blink every interval ms
  if (HAL_GetTick() - start_ms < blink_interval_ms) return; // not enough time
 80012b0:	f00f fb52 	bl	8010958 <HAL_GetTick>
 80012b4:	4602      	mov	r2, r0
 80012b6:	4b0b      	ldr	r3, [pc, #44]	@ (80012e4 <led_blinking_task+0x38>)
 80012b8:	681b      	ldr	r3, [r3, #0]
 80012ba:	1ad2      	subs	r2, r2, r3
 80012bc:	4b0a      	ldr	r3, [pc, #40]	@ (80012e8 <led_blinking_task+0x3c>)
 80012be:	681b      	ldr	r3, [r3, #0]
 80012c0:	429a      	cmp	r2, r3
 80012c2:	d30c      	bcc.n	80012de <led_blinking_task+0x32>
  start_ms += blink_interval_ms;
 80012c4:	4b07      	ldr	r3, [pc, #28]	@ (80012e4 <led_blinking_task+0x38>)
 80012c6:	681a      	ldr	r2, [r3, #0]
 80012c8:	4b07      	ldr	r3, [pc, #28]	@ (80012e8 <led_blinking_task+0x3c>)
 80012ca:	681b      	ldr	r3, [r3, #0]
 80012cc:	4413      	add	r3, r2
 80012ce:	4a05      	ldr	r2, [pc, #20]	@ (80012e4 <led_blinking_task+0x38>)
 80012d0:	6013      	str	r3, [r2, #0]

  HAL_GPIO_TogglePin(LED2_GPIO_Port, LED2_Pin);
 80012d2:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80012d6:	4805      	ldr	r0, [pc, #20]	@ (80012ec <led_blinking_task+0x40>)
 80012d8:	f00f fe6b 	bl	8010fb2 <HAL_GPIO_TogglePin>
 80012dc:	e000      	b.n	80012e0 <led_blinking_task+0x34>
  if (HAL_GetTick() - start_ms < blink_interval_ms) return; // not enough time
 80012de:	bf00      	nop
}
 80012e0:	bd80      	pop	{r7, pc}
 80012e2:	bf00      	nop
 80012e4:	2400070c 	.word	0x2400070c
 80012e8:	24000008 	.word	0x24000008
 80012ec:	58022000 	.word	0x58022000

080012f0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80012f0:	b480      	push	{r7}
 80012f2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80012f4:	b672      	cpsid	i
}
 80012f6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80012f8:	bf00      	nop
 80012fa:	e7fd      	b.n	80012f8 <Error_Handler+0x8>

080012fc <fatfs_init>:
#include "ff.h"

#include "ff_gen_drv.h"
#include "sd_diskio.h"

void fatfs_init(void) {
 80012fc:	b580      	push	{r7, lr}
 80012fe:	af00      	add	r7, sp, #0

	if(SD_Driver.disk_initialize(0) != 0){
 8001300:	4b09      	ldr	r3, [pc, #36]	@ (8001328 <fatfs_init+0x2c>)
 8001302:	681b      	ldr	r3, [r3, #0]
 8001304:	2000      	movs	r0, #0
 8001306:	4798      	blx	r3
 8001308:	4603      	mov	r3, r0
 800130a:	2b00      	cmp	r3, #0
 800130c:	d009      	beq.n	8001322 <fatfs_init+0x26>
		while(1){
			HAL_GPIO_TogglePin(LED2_GPIO_Port, LED2_Pin);
 800130e:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001312:	4806      	ldr	r0, [pc, #24]	@ (800132c <fatfs_init+0x30>)
 8001314:	f00f fe4d 	bl	8010fb2 <HAL_GPIO_TogglePin>
			HAL_Delay(50);
 8001318:	2032      	movs	r0, #50	@ 0x32
 800131a:	f00f fb29 	bl	8010970 <HAL_Delay>
			HAL_GPIO_TogglePin(LED2_GPIO_Port, LED2_Pin);
 800131e:	bf00      	nop
 8001320:	e7f5      	b.n	800130e <fatfs_init+0x12>
		}
	}
}
 8001322:	bf00      	nop
 8001324:	bd80      	pop	{r7, pc}
 8001326:	bf00      	nop
 8001328:	0801c1a0 	.word	0x0801c1a0
 800132c:	58022000 	.word	0x58022000

08001330 <tud_msc_inquiry_cb>:
FRESULT res;

// Invoked when received SCSI_CMD_INQUIRY
// Application fill vendor id, product id and revision with string up to 8, 16, 4 characters respectively
void tud_msc_inquiry_cb(uint8_t lun, uint8_t vendor_id[8], uint8_t product_id[16], uint8_t product_rev[4])
{
 8001330:	b580      	push	{r7, lr}
 8001332:	b08a      	sub	sp, #40	@ 0x28
 8001334:	af00      	add	r7, sp, #0
 8001336:	60b9      	str	r1, [r7, #8]
 8001338:	607a      	str	r2, [r7, #4]
 800133a:	603b      	str	r3, [r7, #0]
 800133c:	4603      	mov	r3, r0
 800133e:	73fb      	strb	r3, [r7, #15]
  (void) lun;

  const char vid[] = "TinyUSB";
 8001340:	4a14      	ldr	r2, [pc, #80]	@ (8001394 <tud_msc_inquiry_cb+0x64>)
 8001342:	f107 0320 	add.w	r3, r7, #32
 8001346:	e892 0003 	ldmia.w	r2, {r0, r1}
 800134a:	e883 0003 	stmia.w	r3, {r0, r1}
  const char pid[] = "Frida";
 800134e:	4a12      	ldr	r2, [pc, #72]	@ (8001398 <tud_msc_inquiry_cb+0x68>)
 8001350:	f107 0318 	add.w	r3, r7, #24
 8001354:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001358:	6018      	str	r0, [r3, #0]
 800135a:	3304      	adds	r3, #4
 800135c:	8019      	strh	r1, [r3, #0]
  const char rev[] = "1.0";
 800135e:	4b0f      	ldr	r3, [pc, #60]	@ (800139c <tud_msc_inquiry_cb+0x6c>)
 8001360:	617b      	str	r3, [r7, #20]

  memcpy(vendor_id  , vid, strlen(vid));
 8001362:	f107 0320 	add.w	r3, r7, #32
 8001366:	2207      	movs	r2, #7
 8001368:	4619      	mov	r1, r3
 800136a:	68b8      	ldr	r0, [r7, #8]
 800136c:	f018 fbef 	bl	8019b4e <memcpy>
  memcpy(product_id , pid, strlen(pid));
 8001370:	f107 0318 	add.w	r3, r7, #24
 8001374:	2205      	movs	r2, #5
 8001376:	4619      	mov	r1, r3
 8001378:	6878      	ldr	r0, [r7, #4]
 800137a:	f018 fbe8 	bl	8019b4e <memcpy>
  memcpy(product_rev, rev, strlen(rev));
 800137e:	f107 0314 	add.w	r3, r7, #20
 8001382:	2203      	movs	r2, #3
 8001384:	4619      	mov	r1, r3
 8001386:	6838      	ldr	r0, [r7, #0]
 8001388:	f018 fbe1 	bl	8019b4e <memcpy>
}
 800138c:	bf00      	nop
 800138e:	3728      	adds	r7, #40	@ 0x28
 8001390:	46bd      	mov	sp, r7
 8001392:	bd80      	pop	{r7, pc}
 8001394:	0801a464 	.word	0x0801a464
 8001398:	0801a46c 	.word	0x0801a46c
 800139c:	00302e31 	.word	0x00302e31

080013a0 <tud_msc_test_unit_ready_cb>:

// Invoked when received Test Unit Ready command.
// return true allowing host to read/write this LUN e.g SD card inserted
bool tud_msc_test_unit_ready_cb(uint8_t lun)
{
 80013a0:	b580      	push	{r7, lr}
 80013a2:	b082      	sub	sp, #8
 80013a4:	af00      	add	r7, sp, #0
 80013a6:	4603      	mov	r3, r0
 80013a8:	71fb      	strb	r3, [r7, #7]
  (void) lun;

  // RAM disk is ready until ejected
  if (ejected) {
 80013aa:	4b08      	ldr	r3, [pc, #32]	@ (80013cc <tud_msc_test_unit_ready_cb+0x2c>)
 80013ac:	781b      	ldrb	r3, [r3, #0]
 80013ae:	2b00      	cmp	r3, #0
 80013b0:	d007      	beq.n	80013c2 <tud_msc_test_unit_ready_cb+0x22>
    // Additional Sense 3A-00 is NOT_FOUND
    tud_msc_set_sense(lun, SCSI_SENSE_NOT_READY, 0x3a, 0x00);
 80013b2:	79f8      	ldrb	r0, [r7, #7]
 80013b4:	2300      	movs	r3, #0
 80013b6:	223a      	movs	r2, #58	@ 0x3a
 80013b8:	2102      	movs	r1, #2
 80013ba:	f001 fabf 	bl	800293c <tud_msc_set_sense>
    return false;
 80013be:	2300      	movs	r3, #0
 80013c0:	e000      	b.n	80013c4 <tud_msc_test_unit_ready_cb+0x24>
  }


  return true;
 80013c2:	2301      	movs	r3, #1
}
 80013c4:	4618      	mov	r0, r3
 80013c6:	3708      	adds	r7, #8
 80013c8:	46bd      	mov	sp, r7
 80013ca:	bd80      	pop	{r7, pc}
 80013cc:	24000710 	.word	0x24000710

080013d0 <tud_msc_capacity_cb>:

// Invoked when received SCSI_CMD_READ_CAPACITY_10 and SCSI_CMD_READ_FORMAT_CAPACITY to determine the disk size
// Application update block count and block size
void tud_msc_capacity_cb(uint8_t lun, uint32_t* block_count, uint16_t* block_size) {
 80013d0:	b580      	push	{r7, lr}
 80013d2:	b086      	sub	sp, #24
 80013d4:	af00      	add	r7, sp, #0
 80013d6:	4603      	mov	r3, r0
 80013d8:	60b9      	str	r1, [r7, #8]
 80013da:	607a      	str	r2, [r7, #4]
 80013dc:	73fb      	strb	r3, [r7, #15]

	DRESULT res;

	res = SD_Driver.disk_ioctl(lun, GET_SECTOR_COUNT, block_count);
 80013de:	4b0d      	ldr	r3, [pc, #52]	@ (8001414 <tud_msc_capacity_cb+0x44>)
 80013e0:	691b      	ldr	r3, [r3, #16]
 80013e2:	7bf8      	ldrb	r0, [r7, #15]
 80013e4:	68ba      	ldr	r2, [r7, #8]
 80013e6:	2101      	movs	r1, #1
 80013e8:	4798      	blx	r3
 80013ea:	4603      	mov	r3, r0
 80013ec:	75fb      	strb	r3, [r7, #23]
	if(res != RES_OK) return;
 80013ee:	7dfb      	ldrb	r3, [r7, #23]
 80013f0:	2b00      	cmp	r3, #0
 80013f2:	d10a      	bne.n	800140a <tud_msc_capacity_cb+0x3a>
    res = SD_Driver.disk_ioctl(lun, GET_SECTOR_SIZE, block_size);
 80013f4:	4b07      	ldr	r3, [pc, #28]	@ (8001414 <tud_msc_capacity_cb+0x44>)
 80013f6:	691b      	ldr	r3, [r3, #16]
 80013f8:	7bf8      	ldrb	r0, [r7, #15]
 80013fa:	687a      	ldr	r2, [r7, #4]
 80013fc:	2102      	movs	r1, #2
 80013fe:	4798      	blx	r3
 8001400:	4603      	mov	r3, r0
 8001402:	75fb      	strb	r3, [r7, #23]
    if(res != RES_OK) return;
 8001404:	7dfb      	ldrb	r3, [r7, #23]
 8001406:	2b00      	cmp	r3, #0

    return;
 8001408:	e000      	b.n	800140c <tud_msc_capacity_cb+0x3c>
	if(res != RES_OK) return;
 800140a:	bf00      	nop
}
 800140c:	3718      	adds	r7, #24
 800140e:	46bd      	mov	sp, r7
 8001410:	bd80      	pop	{r7, pc}
 8001412:	bf00      	nop
 8001414:	0801c1a0 	.word	0x0801c1a0

08001418 <tud_msc_start_stop_cb>:

// Invoked when received Start Stop Unit command
// - Start = 0 : stopped power mode, if load_eject = 1 : unload disk storage
// - Start = 1 : active mode, if load_eject = 1 : load disk storage
bool tud_msc_start_stop_cb(uint8_t lun, uint8_t power_condition, bool start, bool load_eject)
{
 8001418:	b490      	push	{r4, r7}
 800141a:	b082      	sub	sp, #8
 800141c:	af00      	add	r7, sp, #0
 800141e:	4604      	mov	r4, r0
 8001420:	4608      	mov	r0, r1
 8001422:	4611      	mov	r1, r2
 8001424:	461a      	mov	r2, r3
 8001426:	4623      	mov	r3, r4
 8001428:	71fb      	strb	r3, [r7, #7]
 800142a:	4603      	mov	r3, r0
 800142c:	71bb      	strb	r3, [r7, #6]
 800142e:	460b      	mov	r3, r1
 8001430:	717b      	strb	r3, [r7, #5]
 8001432:	4613      	mov	r3, r2
 8001434:	713b      	strb	r3, [r7, #4]
  (void) lun;
  (void) power_condition;

  if ( load_eject )
 8001436:	793b      	ldrb	r3, [r7, #4]
 8001438:	2b00      	cmp	r3, #0
 800143a:	d005      	beq.n	8001448 <tud_msc_start_stop_cb+0x30>
  {
    if (start)
 800143c:	797b      	ldrb	r3, [r7, #5]
 800143e:	2b00      	cmp	r3, #0
 8001440:	d102      	bne.n	8001448 <tud_msc_start_stop_cb+0x30>
    {
      // load disk storage
    }else
    {
      // unload disk storage
      ejected = true;
 8001442:	4b04      	ldr	r3, [pc, #16]	@ (8001454 <tud_msc_start_stop_cb+0x3c>)
 8001444:	2201      	movs	r2, #1
 8001446:	701a      	strb	r2, [r3, #0]
    }
  }

  return true;
 8001448:	2301      	movs	r3, #1
}
 800144a:	4618      	mov	r0, r3
 800144c:	3708      	adds	r7, #8
 800144e:	46bd      	mov	sp, r7
 8001450:	bc90      	pop	{r4, r7}
 8001452:	4770      	bx	lr
 8001454:	24000710 	.word	0x24000710

08001458 <tud_msc_read10_cb>:

// Callback invoked when received READ10 command.
// Copy disk's data to buffer (up to bufsize) and return number of copied bytes.
int32_t tud_msc_read10_cb(uint8_t lun, uint32_t lba, uint32_t offset, void* buffer, uint32_t bufsize) {
 8001458:	b590      	push	{r4, r7, lr}
 800145a:	b087      	sub	sp, #28
 800145c:	af00      	add	r7, sp, #0
 800145e:	60b9      	str	r1, [r7, #8]
 8001460:	607a      	str	r2, [r7, #4]
 8001462:	603b      	str	r3, [r7, #0]
 8001464:	4603      	mov	r3, r0
 8001466:	73fb      	strb	r3, [r7, #15]
    (void) lun;

    DWORD sector = lba; // Logical Block Addressing
 8001468:	68bb      	ldr	r3, [r7, #8]
 800146a:	617b      	str	r3, [r7, #20]
    uint16_t blocksize;
    SD_Driver.disk_ioctl(lun, GET_SECTOR_SIZE, &blocksize);
 800146c:	4b0f      	ldr	r3, [pc, #60]	@ (80014ac <tud_msc_read10_cb+0x54>)
 800146e:	691b      	ldr	r3, [r3, #16]
 8001470:	f107 0210 	add.w	r2, r7, #16
 8001474:	7bf8      	ldrb	r0, [r7, #15]
 8001476:	2102      	movs	r1, #2
 8001478:	4798      	blx	r3
    //UINT byteRead;

    //DRESULT res = disk_read(0, buffer, sector, bufsize / DISK_BLOCK_SIZE);
    DRESULT res = SD_Driver.disk_read(lun, buffer, sector, bufsize / blocksize);
 800147a:	4b0c      	ldr	r3, [pc, #48]	@ (80014ac <tud_msc_read10_cb+0x54>)
 800147c:	689c      	ldr	r4, [r3, #8]
 800147e:	8a3b      	ldrh	r3, [r7, #16]
 8001480:	461a      	mov	r2, r3
 8001482:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001484:	fbb3 f3f2 	udiv	r3, r3, r2
 8001488:	7bf8      	ldrb	r0, [r7, #15]
 800148a:	697a      	ldr	r2, [r7, #20]
 800148c:	6839      	ldr	r1, [r7, #0]
 800148e:	47a0      	blx	r4
 8001490:	4603      	mov	r3, r0
 8001492:	74fb      	strb	r3, [r7, #19]
    if (res != RES_OK) {
 8001494:	7cfb      	ldrb	r3, [r7, #19]
 8001496:	2b00      	cmp	r3, #0
 8001498:	d002      	beq.n	80014a0 <tud_msc_read10_cb+0x48>
        return -1;
 800149a:	f04f 33ff 	mov.w	r3, #4294967295
 800149e:	e000      	b.n	80014a2 <tud_msc_read10_cb+0x4a>
    }

    return bufsize;
 80014a0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
}
 80014a2:	4618      	mov	r0, r3
 80014a4:	371c      	adds	r7, #28
 80014a6:	46bd      	mov	sp, r7
 80014a8:	bd90      	pop	{r4, r7, pc}
 80014aa:	bf00      	nop
 80014ac:	0801c1a0 	.word	0x0801c1a0

080014b0 <tud_msc_is_writable_cb>:

bool tud_msc_is_writable_cb (uint8_t lun)
{
 80014b0:	b480      	push	{r7}
 80014b2:	b083      	sub	sp, #12
 80014b4:	af00      	add	r7, sp, #0
 80014b6:	4603      	mov	r3, r0
 80014b8:	71fb      	strb	r3, [r7, #7]
  (void) lun;

#ifdef CFG_EXAMPLE_MSC_READONLY
  return false;
#else
  return true;
 80014ba:	2301      	movs	r3, #1
#endif
}
 80014bc:	4618      	mov	r0, r3
 80014be:	370c      	adds	r7, #12
 80014c0:	46bd      	mov	sp, r7
 80014c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014c6:	4770      	bx	lr

080014c8 <tud_msc_write10_cb>:

// Callback invoked when received WRITE10 command.
// Process data in buffer to disk's storage and return number of written bytes
int32_t tud_msc_write10_cb(uint8_t lun, uint32_t lba, uint32_t offset, uint8_t* buffer, uint32_t bufsize) {
 80014c8:	b590      	push	{r4, r7, lr}
 80014ca:	b087      	sub	sp, #28
 80014cc:	af00      	add	r7, sp, #0
 80014ce:	60b9      	str	r1, [r7, #8]
 80014d0:	607a      	str	r2, [r7, #4]
 80014d2:	603b      	str	r3, [r7, #0]
 80014d4:	4603      	mov	r3, r0
 80014d6:	73fb      	strb	r3, [r7, #15]
    (void) lun;

    DWORD sector = lba; // Logical Block Addressing
 80014d8:	68bb      	ldr	r3, [r7, #8]
 80014da:	617b      	str	r3, [r7, #20]
    uint16_t blocksize;
    SD_Driver.disk_ioctl(lun, GET_SECTOR_SIZE, &blocksize);
 80014dc:	4b0f      	ldr	r3, [pc, #60]	@ (800151c <tud_msc_write10_cb+0x54>)
 80014de:	691b      	ldr	r3, [r3, #16]
 80014e0:	f107 0210 	add.w	r2, r7, #16
 80014e4:	7bf8      	ldrb	r0, [r7, #15]
 80014e6:	2102      	movs	r1, #2
 80014e8:	4798      	blx	r3
    //UINT byteWritten;

    //DRESULT res = disk_write(0, buffer, sector, bufsize / DISK_BLOCK_SIZE);
    DRESULT res = SD_Driver.disk_write(lun, buffer, sector, bufsize / blocksize);
 80014ea:	4b0c      	ldr	r3, [pc, #48]	@ (800151c <tud_msc_write10_cb+0x54>)
 80014ec:	68dc      	ldr	r4, [r3, #12]
 80014ee:	8a3b      	ldrh	r3, [r7, #16]
 80014f0:	461a      	mov	r2, r3
 80014f2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80014f4:	fbb3 f3f2 	udiv	r3, r3, r2
 80014f8:	7bf8      	ldrb	r0, [r7, #15]
 80014fa:	697a      	ldr	r2, [r7, #20]
 80014fc:	6839      	ldr	r1, [r7, #0]
 80014fe:	47a0      	blx	r4
 8001500:	4603      	mov	r3, r0
 8001502:	74fb      	strb	r3, [r7, #19]
    if (res != RES_OK) {
 8001504:	7cfb      	ldrb	r3, [r7, #19]
 8001506:	2b00      	cmp	r3, #0
 8001508:	d002      	beq.n	8001510 <tud_msc_write10_cb+0x48>
        return -1;
 800150a:	f04f 33ff 	mov.w	r3, #4294967295
 800150e:	e000      	b.n	8001512 <tud_msc_write10_cb+0x4a>
    }

    return bufsize;
 8001510:	6abb      	ldr	r3, [r7, #40]	@ 0x28
}
 8001512:	4618      	mov	r0, r3
 8001514:	371c      	adds	r7, #28
 8001516:	46bd      	mov	sp, r7
 8001518:	bd90      	pop	{r4, r7, pc}
 800151a:	bf00      	nop
 800151c:	0801c1a0 	.word	0x0801c1a0

08001520 <tud_msc_scsi_cb>:

// Callback invoked when received an SCSI command not in built-in list below
// - READ_CAPACITY10, READ_FORMAT_CAPACITY, INQUIRY, MODE_SENSE6, REQUEST_SENSE
// - READ10 and WRITE10 has their own callbacks
int32_t tud_msc_scsi_cb (uint8_t lun, uint8_t const scsi_cmd[16], void* buffer, uint16_t bufsize)
{
 8001520:	b580      	push	{r7, lr}
 8001522:	b088      	sub	sp, #32
 8001524:	af00      	add	r7, sp, #0
 8001526:	60b9      	str	r1, [r7, #8]
 8001528:	607a      	str	r2, [r7, #4]
 800152a:	461a      	mov	r2, r3
 800152c:	4603      	mov	r3, r0
 800152e:	73fb      	strb	r3, [r7, #15]
 8001530:	4613      	mov	r3, r2
 8001532:	81bb      	strh	r3, [r7, #12]
  // read10 & write10 has their own callback and MUST not be handled here

  void const* response = NULL;
 8001534:	2300      	movs	r3, #0
 8001536:	61bb      	str	r3, [r7, #24]
  int32_t resplen = 0;
 8001538:	2300      	movs	r3, #0
 800153a:	61fb      	str	r3, [r7, #28]

  // most scsi handled is input
  bool in_xfer = true;
 800153c:	2301      	movs	r3, #1
 800153e:	75fb      	strb	r3, [r7, #23]

  switch (scsi_cmd[0])
  {
    default:
      // Set Sense = Invalid Command Operation
      tud_msc_set_sense(lun, SCSI_SENSE_ILLEGAL_REQUEST, 0x20, 0x00);
 8001540:	7bf8      	ldrb	r0, [r7, #15]
 8001542:	2300      	movs	r3, #0
 8001544:	2220      	movs	r2, #32
 8001546:	2105      	movs	r1, #5
 8001548:	f001 f9f8 	bl	800293c <tud_msc_set_sense>

      // negative means error -> tinyusb could stall and/or response with failed status
      resplen = -1;
 800154c:	f04f 33ff 	mov.w	r3, #4294967295
 8001550:	61fb      	str	r3, [r7, #28]
    break;
 8001552:	bf00      	nop
  }

  // return resplen must not larger than bufsize
  if ( resplen > bufsize ) resplen = bufsize;
 8001554:	89bb      	ldrh	r3, [r7, #12]
 8001556:	69fa      	ldr	r2, [r7, #28]
 8001558:	429a      	cmp	r2, r3
 800155a:	dd01      	ble.n	8001560 <tud_msc_scsi_cb+0x40>
 800155c:	89bb      	ldrh	r3, [r7, #12]
 800155e:	61fb      	str	r3, [r7, #28]

  if ( response && (resplen > 0) )
 8001560:	69bb      	ldr	r3, [r7, #24]
 8001562:	2b00      	cmp	r3, #0
 8001564:	d00b      	beq.n	800157e <tud_msc_scsi_cb+0x5e>
 8001566:	69fb      	ldr	r3, [r7, #28]
 8001568:	2b00      	cmp	r3, #0
 800156a:	dd08      	ble.n	800157e <tud_msc_scsi_cb+0x5e>
  {
    if(in_xfer)
 800156c:	7dfb      	ldrb	r3, [r7, #23]
 800156e:	2b00      	cmp	r3, #0
 8001570:	d005      	beq.n	800157e <tud_msc_scsi_cb+0x5e>
    {
      memcpy(buffer, response, (size_t) resplen);
 8001572:	69fb      	ldr	r3, [r7, #28]
 8001574:	461a      	mov	r2, r3
 8001576:	69b9      	ldr	r1, [r7, #24]
 8001578:	6878      	ldr	r0, [r7, #4]
 800157a:	f018 fae8 	bl	8019b4e <memcpy>
    {
      // SCSI output
    }
  }

  return (int32_t) resplen;
 800157e:	69fb      	ldr	r3, [r7, #28]
}
 8001580:	4618      	mov	r0, r3
 8001582:	3720      	adds	r7, #32
 8001584:	46bd      	mov	sp, r7
 8001586:	bd80      	pop	{r7, pc}

08001588 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001588:	b480      	push	{r7}
 800158a:	b083      	sub	sp, #12
 800158c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800158e:	4b0a      	ldr	r3, [pc, #40]	@ (80015b8 <HAL_MspInit+0x30>)
 8001590:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8001594:	4a08      	ldr	r2, [pc, #32]	@ (80015b8 <HAL_MspInit+0x30>)
 8001596:	f043 0302 	orr.w	r3, r3, #2
 800159a:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 800159e:	4b06      	ldr	r3, [pc, #24]	@ (80015b8 <HAL_MspInit+0x30>)
 80015a0:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80015a4:	f003 0302 	and.w	r3, r3, #2
 80015a8:	607b      	str	r3, [r7, #4]
 80015aa:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80015ac:	bf00      	nop
 80015ae:	370c      	adds	r7, #12
 80015b0:	46bd      	mov	sp, r7
 80015b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015b6:	4770      	bx	lr
 80015b8:	58024400 	.word	0x58024400

080015bc <HAL_RNG_MspInit>:
* This function configures the hardware resources used in this example
* @param hrng: RNG handle pointer
* @retval None
*/
void HAL_RNG_MspInit(RNG_HandleTypeDef* hrng)
{
 80015bc:	b580      	push	{r7, lr}
 80015be:	b0b6      	sub	sp, #216	@ 0xd8
 80015c0:	af00      	add	r7, sp, #0
 80015c2:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80015c4:	f107 0310 	add.w	r3, r7, #16
 80015c8:	22c8      	movs	r2, #200	@ 0xc8
 80015ca:	2100      	movs	r1, #0
 80015cc:	4618      	mov	r0, r3
 80015ce:	f018 f9fd 	bl	80199cc <memset>
  if(hrng->Instance==RNG)
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	681b      	ldr	r3, [r3, #0]
 80015d6:	4a14      	ldr	r2, [pc, #80]	@ (8001628 <HAL_RNG_MspInit+0x6c>)
 80015d8:	4293      	cmp	r3, r2
 80015da:	d121      	bne.n	8001620 <HAL_RNG_MspInit+0x64>

  /* USER CODE END RNG_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RNG;
 80015dc:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 80015e0:	f04f 0300 	mov.w	r3, #0
 80015e4:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.RngClockSelection = RCC_RNGCLKSOURCE_HSI48;
 80015e8:	2300      	movs	r3, #0
 80015ea:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80015ee:	f107 0310 	add.w	r3, r7, #16
 80015f2:	4618      	mov	r0, r3
 80015f4:	f010 ff0a 	bl	801240c <HAL_RCCEx_PeriphCLKConfig>
 80015f8:	4603      	mov	r3, r0
 80015fa:	2b00      	cmp	r3, #0
 80015fc:	d001      	beq.n	8001602 <HAL_RNG_MspInit+0x46>
    {
      Error_Handler();
 80015fe:	f7ff fe77 	bl	80012f0 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RNG_CLK_ENABLE();
 8001602:	4b0a      	ldr	r3, [pc, #40]	@ (800162c <HAL_RNG_MspInit+0x70>)
 8001604:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 8001608:	4a08      	ldr	r2, [pc, #32]	@ (800162c <HAL_RNG_MspInit+0x70>)
 800160a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800160e:	f8c2 30dc 	str.w	r3, [r2, #220]	@ 0xdc
 8001612:	4b06      	ldr	r3, [pc, #24]	@ (800162c <HAL_RNG_MspInit+0x70>)
 8001614:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 8001618:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800161c:	60fb      	str	r3, [r7, #12]
 800161e:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN RNG_MspInit 1 */

  /* USER CODE END RNG_MspInit 1 */
  }

}
 8001620:	bf00      	nop
 8001622:	37d8      	adds	r7, #216	@ 0xd8
 8001624:	46bd      	mov	sp, r7
 8001626:	bd80      	pop	{r7, pc}
 8001628:	48021800 	.word	0x48021800
 800162c:	58024400 	.word	0x58024400

08001630 <HAL_SD_MspInit>:
* This function configures the hardware resources used in this example
* @param hsd: SD handle pointer
* @retval None
*/
void HAL_SD_MspInit(SD_HandleTypeDef* hsd)
{
 8001630:	b580      	push	{r7, lr}
 8001632:	b0be      	sub	sp, #248	@ 0xf8
 8001634:	af00      	add	r7, sp, #0
 8001636:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001638:	f107 03e4 	add.w	r3, r7, #228	@ 0xe4
 800163c:	2200      	movs	r2, #0
 800163e:	601a      	str	r2, [r3, #0]
 8001640:	605a      	str	r2, [r3, #4]
 8001642:	609a      	str	r2, [r3, #8]
 8001644:	60da      	str	r2, [r3, #12]
 8001646:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001648:	f107 0318 	add.w	r3, r7, #24
 800164c:	22c8      	movs	r2, #200	@ 0xc8
 800164e:	2100      	movs	r1, #0
 8001650:	4618      	mov	r0, r3
 8001652:	f018 f9bb 	bl	80199cc <memset>
  if(hsd->Instance==SDMMC1)
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	681b      	ldr	r3, [r3, #0]
 800165a:	4a3c      	ldr	r2, [pc, #240]	@ (800174c <HAL_SD_MspInit+0x11c>)
 800165c:	4293      	cmp	r3, r2
 800165e:	d171      	bne.n	8001744 <HAL_SD_MspInit+0x114>

  /* USER CODE END SDMMC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SDMMC;
 8001660:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8001664:	f04f 0300 	mov.w	r3, #0
 8001668:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.SdmmcClockSelection = RCC_SDMMCCLKSOURCE_PLL;
 800166c:	2300      	movs	r3, #0
 800166e:	66fb      	str	r3, [r7, #108]	@ 0x6c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001670:	f107 0318 	add.w	r3, r7, #24
 8001674:	4618      	mov	r0, r3
 8001676:	f010 fec9 	bl	801240c <HAL_RCCEx_PeriphCLKConfig>
 800167a:	4603      	mov	r3, r0
 800167c:	2b00      	cmp	r3, #0
 800167e:	d001      	beq.n	8001684 <HAL_SD_MspInit+0x54>
    {
      Error_Handler();
 8001680:	f7ff fe36 	bl	80012f0 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SDMMC1_CLK_ENABLE();
 8001684:	4b32      	ldr	r3, [pc, #200]	@ (8001750 <HAL_SD_MspInit+0x120>)
 8001686:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 800168a:	4a31      	ldr	r2, [pc, #196]	@ (8001750 <HAL_SD_MspInit+0x120>)
 800168c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001690:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4
 8001694:	4b2e      	ldr	r3, [pc, #184]	@ (8001750 <HAL_SD_MspInit+0x120>)
 8001696:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 800169a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800169e:	617b      	str	r3, [r7, #20]
 80016a0:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80016a2:	4b2b      	ldr	r3, [pc, #172]	@ (8001750 <HAL_SD_MspInit+0x120>)
 80016a4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80016a8:	4a29      	ldr	r2, [pc, #164]	@ (8001750 <HAL_SD_MspInit+0x120>)
 80016aa:	f043 0304 	orr.w	r3, r3, #4
 80016ae:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80016b2:	4b27      	ldr	r3, [pc, #156]	@ (8001750 <HAL_SD_MspInit+0x120>)
 80016b4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80016b8:	f003 0304 	and.w	r3, r3, #4
 80016bc:	613b      	str	r3, [r7, #16]
 80016be:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80016c0:	4b23      	ldr	r3, [pc, #140]	@ (8001750 <HAL_SD_MspInit+0x120>)
 80016c2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80016c6:	4a22      	ldr	r2, [pc, #136]	@ (8001750 <HAL_SD_MspInit+0x120>)
 80016c8:	f043 0308 	orr.w	r3, r3, #8
 80016cc:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80016d0:	4b1f      	ldr	r3, [pc, #124]	@ (8001750 <HAL_SD_MspInit+0x120>)
 80016d2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80016d6:	f003 0308 	and.w	r3, r3, #8
 80016da:	60fb      	str	r3, [r7, #12]
 80016dc:	68fb      	ldr	r3, [r7, #12]
    PC12     ------> SDMMC1_CK
    PD2     ------> SDMMC1_CMD
    PC8     ------> SDMMC1_D0
    PC9     ------> SDMMC1_D1
    */
    GPIO_InitStruct.Pin = SDIO1_D2_Pin|SDIO1_D3_Pin|SDIO1_CK_Pin|SDIO1_D0_Pin
 80016de:	f44f 53f8 	mov.w	r3, #7936	@ 0x1f00
 80016e2:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
                          |SDIO1_D1_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016e6:	2302      	movs	r3, #2
 80016e8:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016ec:	2300      	movs	r3, #0
 80016ee:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80016f2:	2303      	movs	r3, #3
 80016f4:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO1;
 80016f8:	230c      	movs	r3, #12
 80016fa:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80016fe:	f107 03e4 	add.w	r3, r7, #228	@ 0xe4
 8001702:	4619      	mov	r1, r3
 8001704:	4813      	ldr	r0, [pc, #76]	@ (8001754 <HAL_SD_MspInit+0x124>)
 8001706:	f00f fa73 	bl	8010bf0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = SDIO1_CMD_Pin;
 800170a:	2304      	movs	r3, #4
 800170c:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001710:	2302      	movs	r3, #2
 8001712:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001716:	2300      	movs	r3, #0
 8001718:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800171c:	2303      	movs	r3, #3
 800171e:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO1;
 8001722:	230c      	movs	r3, #12
 8001724:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    HAL_GPIO_Init(SDIO1_CMD_GPIO_Port, &GPIO_InitStruct);
 8001728:	f107 03e4 	add.w	r3, r7, #228	@ 0xe4
 800172c:	4619      	mov	r1, r3
 800172e:	480a      	ldr	r0, [pc, #40]	@ (8001758 <HAL_SD_MspInit+0x128>)
 8001730:	f00f fa5e 	bl	8010bf0 <HAL_GPIO_Init>

    /* SDMMC1 interrupt Init */
    HAL_NVIC_SetPriority(SDMMC1_IRQn, 0, 0);
 8001734:	2200      	movs	r2, #0
 8001736:	2100      	movs	r1, #0
 8001738:	2031      	movs	r0, #49	@ 0x31
 800173a:	f00f fa24 	bl	8010b86 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SDMMC1_IRQn);
 800173e:	2031      	movs	r0, #49	@ 0x31
 8001740:	f00f fa3b 	bl	8010bba <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SDMMC1_MspInit 1 */

  /* USER CODE END SDMMC1_MspInit 1 */
  }

}
 8001744:	bf00      	nop
 8001746:	37f8      	adds	r7, #248	@ 0xf8
 8001748:	46bd      	mov	sp, r7
 800174a:	bd80      	pop	{r7, pc}
 800174c:	52007000 	.word	0x52007000
 8001750:	58024400 	.word	0x58024400
 8001754:	58020800 	.word	0x58020800
 8001758:	58020c00 	.word	0x58020c00

0800175c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800175c:	b580      	push	{r7, lr}
 800175e:	b08a      	sub	sp, #40	@ 0x28
 8001760:	af00      	add	r7, sp, #0
 8001762:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001764:	f107 0314 	add.w	r3, r7, #20
 8001768:	2200      	movs	r2, #0
 800176a:	601a      	str	r2, [r3, #0]
 800176c:	605a      	str	r2, [r3, #4]
 800176e:	609a      	str	r2, [r3, #8]
 8001770:	60da      	str	r2, [r3, #12]
 8001772:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	681b      	ldr	r3, [r3, #0]
 8001778:	4a1a      	ldr	r2, [pc, #104]	@ (80017e4 <HAL_UART_MspInit+0x88>)
 800177a:	4293      	cmp	r3, r2
 800177c:	d12e      	bne.n	80017dc <HAL_UART_MspInit+0x80>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800177e:	4b1a      	ldr	r3, [pc, #104]	@ (80017e8 <HAL_UART_MspInit+0x8c>)
 8001780:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8001784:	4a18      	ldr	r2, [pc, #96]	@ (80017e8 <HAL_UART_MspInit+0x8c>)
 8001786:	f043 0310 	orr.w	r3, r3, #16
 800178a:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 800178e:	4b16      	ldr	r3, [pc, #88]	@ (80017e8 <HAL_UART_MspInit+0x8c>)
 8001790:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8001794:	f003 0310 	and.w	r3, r3, #16
 8001798:	613b      	str	r3, [r7, #16]
 800179a:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800179c:	4b12      	ldr	r3, [pc, #72]	@ (80017e8 <HAL_UART_MspInit+0x8c>)
 800179e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80017a2:	4a11      	ldr	r2, [pc, #68]	@ (80017e8 <HAL_UART_MspInit+0x8c>)
 80017a4:	f043 0301 	orr.w	r3, r3, #1
 80017a8:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80017ac:	4b0e      	ldr	r3, [pc, #56]	@ (80017e8 <HAL_UART_MspInit+0x8c>)
 80017ae:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80017b2:	f003 0301 	and.w	r3, r3, #1
 80017b6:	60fb      	str	r3, [r7, #12]
 80017b8:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA10     ------> USART1_RX
    PA9     ------> USART1_TX
    */
    GPIO_InitStruct.Pin = STLINK_TX_Pin|STLINK_RX_Pin;
 80017ba:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 80017be:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017c0:	2302      	movs	r3, #2
 80017c2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017c4:	2300      	movs	r3, #0
 80017c6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80017c8:	2300      	movs	r3, #0
 80017ca:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80017cc:	2307      	movs	r3, #7
 80017ce:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80017d0:	f107 0314 	add.w	r3, r7, #20
 80017d4:	4619      	mov	r1, r3
 80017d6:	4805      	ldr	r0, [pc, #20]	@ (80017ec <HAL_UART_MspInit+0x90>)
 80017d8:	f00f fa0a 	bl	8010bf0 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 80017dc:	bf00      	nop
 80017de:	3728      	adds	r7, #40	@ 0x28
 80017e0:	46bd      	mov	sp, r7
 80017e2:	bd80      	pop	{r7, pc}
 80017e4:	40011000 	.word	0x40011000
 80017e8:	58024400 	.word	0x58024400
 80017ec:	58020000 	.word	0x58020000

080017f0 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 80017f0:	b580      	push	{r7, lr}
 80017f2:	b0c2      	sub	sp, #264	@ 0x108
 80017f4:	af00      	add	r7, sp, #0
 80017f6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80017fa:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80017fe:	6018      	str	r0, [r3, #0]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001800:	f107 03f4 	add.w	r3, r7, #244	@ 0xf4
 8001804:	2200      	movs	r2, #0
 8001806:	601a      	str	r2, [r3, #0]
 8001808:	605a      	str	r2, [r3, #4]
 800180a:	609a      	str	r2, [r3, #8]
 800180c:	60da      	str	r2, [r3, #12]
 800180e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001810:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001814:	22c8      	movs	r2, #200	@ 0xc8
 8001816:	2100      	movs	r1, #0
 8001818:	4618      	mov	r0, r3
 800181a:	f018 f8d7 	bl	80199cc <memset>
  if(hpcd->Instance==USB_OTG_HS)
 800181e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8001822:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8001826:	681b      	ldr	r3, [r3, #0]
 8001828:	681b      	ldr	r3, [r3, #0]
 800182a:	4a85      	ldr	r2, [pc, #532]	@ (8001a40 <HAL_PCD_MspInit+0x250>)
 800182c:	4293      	cmp	r3, r2
 800182e:	f040 8102 	bne.w	8001a36 <HAL_PCD_MspInit+0x246>

  /* USER CODE END USB_OTG_HS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8001832:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 8001836:	f04f 0300 	mov.w	r3, #0
 800183a:	e9c7 230a 	strd	r2, r3, [r7, #40]	@ 0x28
    PeriphClkInitStruct.PLL3.PLL3M = 25;
 800183e:	2319      	movs	r3, #25
 8001840:	653b      	str	r3, [r7, #80]	@ 0x50
    PeriphClkInitStruct.PLL3.PLL3N = 200;
 8001842:	23c8      	movs	r3, #200	@ 0xc8
 8001844:	657b      	str	r3, [r7, #84]	@ 0x54
    PeriphClkInitStruct.PLL3.PLL3P = 2;
 8001846:	2302      	movs	r3, #2
 8001848:	65bb      	str	r3, [r7, #88]	@ 0x58
    PeriphClkInitStruct.PLL3.PLL3Q = 4;
 800184a:	2304      	movs	r3, #4
 800184c:	65fb      	str	r3, [r7, #92]	@ 0x5c
    PeriphClkInitStruct.PLL3.PLL3R = 2;
 800184e:	2302      	movs	r3, #2
 8001850:	663b      	str	r3, [r7, #96]	@ 0x60
    PeriphClkInitStruct.PLL3.PLL3RGE = RCC_PLL3VCIRANGE_0;
 8001852:	2300      	movs	r3, #0
 8001854:	667b      	str	r3, [r7, #100]	@ 0x64
    PeriphClkInitStruct.PLL3.PLL3VCOSEL = RCC_PLL3VCOWIDE;
 8001856:	2300      	movs	r3, #0
 8001858:	66bb      	str	r3, [r7, #104]	@ 0x68
    PeriphClkInitStruct.PLL3.PLL3FRACN = 0;
 800185a:	2300      	movs	r3, #0
 800185c:	66fb      	str	r3, [r7, #108]	@ 0x6c
    PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_PLL3;
 800185e:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 8001862:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001866:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800186a:	4618      	mov	r0, r3
 800186c:	f010 fdce 	bl	801240c <HAL_RCCEx_PeriphCLKConfig>
 8001870:	4603      	mov	r3, r0
 8001872:	2b00      	cmp	r3, #0
 8001874:	d001      	beq.n	800187a <HAL_PCD_MspInit+0x8a>
    {
      Error_Handler();
 8001876:	f7ff fd3b 	bl	80012f0 <Error_Handler>
    }

  /** Enable USB Voltage detector
  */
    HAL_PWREx_EnableUSBVoltageDetector();
 800187a:	f00f fd67 	bl	801134c <HAL_PWREx_EnableUSBVoltageDetector>

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800187e:	4b71      	ldr	r3, [pc, #452]	@ (8001a44 <HAL_PCD_MspInit+0x254>)
 8001880:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001884:	4a6f      	ldr	r2, [pc, #444]	@ (8001a44 <HAL_PCD_MspInit+0x254>)
 8001886:	f043 0302 	orr.w	r3, r3, #2
 800188a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800188e:	4b6d      	ldr	r3, [pc, #436]	@ (8001a44 <HAL_PCD_MspInit+0x254>)
 8001890:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001894:	f003 0302 	and.w	r3, r3, #2
 8001898:	627b      	str	r3, [r7, #36]	@ 0x24
 800189a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    __HAL_RCC_GPIOI_CLK_ENABLE();
 800189c:	4b69      	ldr	r3, [pc, #420]	@ (8001a44 <HAL_PCD_MspInit+0x254>)
 800189e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80018a2:	4a68      	ldr	r2, [pc, #416]	@ (8001a44 <HAL_PCD_MspInit+0x254>)
 80018a4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80018a8:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80018ac:	4b65      	ldr	r3, [pc, #404]	@ (8001a44 <HAL_PCD_MspInit+0x254>)
 80018ae:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80018b2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80018b6:	623b      	str	r3, [r7, #32]
 80018b8:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80018ba:	4b62      	ldr	r3, [pc, #392]	@ (8001a44 <HAL_PCD_MspInit+0x254>)
 80018bc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80018c0:	4a60      	ldr	r2, [pc, #384]	@ (8001a44 <HAL_PCD_MspInit+0x254>)
 80018c2:	f043 0304 	orr.w	r3, r3, #4
 80018c6:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80018ca:	4b5e      	ldr	r3, [pc, #376]	@ (8001a44 <HAL_PCD_MspInit+0x254>)
 80018cc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80018d0:	f003 0304 	and.w	r3, r3, #4
 80018d4:	61fb      	str	r3, [r7, #28]
 80018d6:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOH_CLK_ENABLE();
 80018d8:	4b5a      	ldr	r3, [pc, #360]	@ (8001a44 <HAL_PCD_MspInit+0x254>)
 80018da:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80018de:	4a59      	ldr	r2, [pc, #356]	@ (8001a44 <HAL_PCD_MspInit+0x254>)
 80018e0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80018e4:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80018e8:	4b56      	ldr	r3, [pc, #344]	@ (8001a44 <HAL_PCD_MspInit+0x254>)
 80018ea:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80018ee:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80018f2:	61bb      	str	r3, [r7, #24]
 80018f4:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80018f6:	4b53      	ldr	r3, [pc, #332]	@ (8001a44 <HAL_PCD_MspInit+0x254>)
 80018f8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80018fc:	4a51      	ldr	r2, [pc, #324]	@ (8001a44 <HAL_PCD_MspInit+0x254>)
 80018fe:	f043 0301 	orr.w	r3, r3, #1
 8001902:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001906:	4b4f      	ldr	r3, [pc, #316]	@ (8001a44 <HAL_PCD_MspInit+0x254>)
 8001908:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800190c:	f003 0301 	and.w	r3, r3, #1
 8001910:	617b      	str	r3, [r7, #20]
 8001912:	697b      	ldr	r3, [r7, #20]
    PB12     ------> USB_OTG_HS_ULPI_D5
    PA3     ------> USB_OTG_HS_ULPI_D0
    PB0     ------> USB_OTG_HS_ULPI_D1
    PB13     ------> USB_OTG_HS_ULPI_D6
    */
    GPIO_InitStruct.Pin = ULPI_D7_Pin|ULPI_D3_Pin|ULPI_D4_Pin|ULPI_D2_Pin
 8001914:	f643 4323 	movw	r3, #15395	@ 0x3c23
 8001918:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
                          |ULPI_D5_Pin|ULPI_D1_Pin|ULPI_D6_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800191c:	2302      	movs	r3, #2
 800191e:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001922:	2300      	movs	r3, #0
 8001924:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001928:	2302      	movs	r3, #2
 800192a:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG2_HS;
 800192e:	230a      	movs	r3, #10
 8001930:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001934:	f107 03f4 	add.w	r3, r7, #244	@ 0xf4
 8001938:	4619      	mov	r1, r3
 800193a:	4843      	ldr	r0, [pc, #268]	@ (8001a48 <HAL_PCD_MspInit+0x258>)
 800193c:	f00f f958 	bl	8010bf0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = ULPI_DIR_Pin;
 8001940:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8001944:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001948:	2302      	movs	r3, #2
 800194a:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800194e:	2300      	movs	r3, #0
 8001950:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001954:	2302      	movs	r3, #2
 8001956:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG2_HS;
 800195a:	230a      	movs	r3, #10
 800195c:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
    HAL_GPIO_Init(ULPI_DIR_GPIO_Port, &GPIO_InitStruct);
 8001960:	f107 03f4 	add.w	r3, r7, #244	@ 0xf4
 8001964:	4619      	mov	r1, r3
 8001966:	4839      	ldr	r0, [pc, #228]	@ (8001a4c <HAL_PCD_MspInit+0x25c>)
 8001968:	f00f f942 	bl	8010bf0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = ULPI_STP_Pin;
 800196c:	2301      	movs	r3, #1
 800196e:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001972:	2302      	movs	r3, #2
 8001974:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001978:	2300      	movs	r3, #0
 800197a:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800197e:	2302      	movs	r3, #2
 8001980:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG2_HS;
 8001984:	230a      	movs	r3, #10
 8001986:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
    HAL_GPIO_Init(ULPI_STP_GPIO_Port, &GPIO_InitStruct);
 800198a:	f107 03f4 	add.w	r3, r7, #244	@ 0xf4
 800198e:	4619      	mov	r1, r3
 8001990:	482f      	ldr	r0, [pc, #188]	@ (8001a50 <HAL_PCD_MspInit+0x260>)
 8001992:	f00f f92d 	bl	8010bf0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = ULPI_NXT_Pin;
 8001996:	2310      	movs	r3, #16
 8001998:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800199c:	2302      	movs	r3, #2
 800199e:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019a2:	2300      	movs	r3, #0
 80019a4:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80019a8:	2302      	movs	r3, #2
 80019aa:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG2_HS;
 80019ae:	230a      	movs	r3, #10
 80019b0:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
    HAL_GPIO_Init(ULPI_NXT_GPIO_Port, &GPIO_InitStruct);
 80019b4:	f107 03f4 	add.w	r3, r7, #244	@ 0xf4
 80019b8:	4619      	mov	r1, r3
 80019ba:	4826      	ldr	r0, [pc, #152]	@ (8001a54 <HAL_PCD_MspInit+0x264>)
 80019bc:	f00f f918 	bl	8010bf0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = ULPI_CK_Pin|ULPI_D0_Pin;
 80019c0:	2328      	movs	r3, #40	@ 0x28
 80019c2:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80019c6:	2302      	movs	r3, #2
 80019c8:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019cc:	2300      	movs	r3, #0
 80019ce:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80019d2:	2302      	movs	r3, #2
 80019d4:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG2_HS;
 80019d8:	230a      	movs	r3, #10
 80019da:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80019de:	f107 03f4 	add.w	r3, r7, #244	@ 0xf4
 80019e2:	4619      	mov	r1, r3
 80019e4:	481c      	ldr	r0, [pc, #112]	@ (8001a58 <HAL_PCD_MspInit+0x268>)
 80019e6:	f00f f903 	bl	8010bf0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_HS_CLK_ENABLE();
 80019ea:	4b16      	ldr	r3, [pc, #88]	@ (8001a44 <HAL_PCD_MspInit+0x254>)
 80019ec:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 80019f0:	4a14      	ldr	r2, [pc, #80]	@ (8001a44 <HAL_PCD_MspInit+0x254>)
 80019f2:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80019f6:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 80019fa:	4b12      	ldr	r3, [pc, #72]	@ (8001a44 <HAL_PCD_MspInit+0x254>)
 80019fc:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8001a00:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001a04:	613b      	str	r3, [r7, #16]
 8001a06:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_USB_OTG_HS_ULPI_CLK_ENABLE();
 8001a08:	4b0e      	ldr	r3, [pc, #56]	@ (8001a44 <HAL_PCD_MspInit+0x254>)
 8001a0a:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8001a0e:	4a0d      	ldr	r2, [pc, #52]	@ (8001a44 <HAL_PCD_MspInit+0x254>)
 8001a10:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8001a14:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8001a18:	4b0a      	ldr	r3, [pc, #40]	@ (8001a44 <HAL_PCD_MspInit+0x254>)
 8001a1a:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8001a1e:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8001a22:	60fb      	str	r3, [r7, #12]
 8001a24:	68fb      	ldr	r3, [r7, #12]
    /* USB_OTG_HS interrupt Init */
    HAL_NVIC_SetPriority(OTG_HS_IRQn, 0, 0);
 8001a26:	2200      	movs	r2, #0
 8001a28:	2100      	movs	r1, #0
 8001a2a:	204d      	movs	r0, #77	@ 0x4d
 8001a2c:	f00f f8ab 	bl	8010b86 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_HS_IRQn);
 8001a30:	204d      	movs	r0, #77	@ 0x4d
 8001a32:	f00f f8c2 	bl	8010bba <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_HS_MspInit 1 */

  /* USER CODE END USB_OTG_HS_MspInit 1 */
  }

}
 8001a36:	bf00      	nop
 8001a38:	f507 7784 	add.w	r7, r7, #264	@ 0x108
 8001a3c:	46bd      	mov	sp, r7
 8001a3e:	bd80      	pop	{r7, pc}
 8001a40:	40040000 	.word	0x40040000
 8001a44:	58024400 	.word	0x58024400
 8001a48:	58020400 	.word	0x58020400
 8001a4c:	58022000 	.word	0x58022000
 8001a50:	58020800 	.word	0x58020800
 8001a54:	58021c00 	.word	0x58021c00
 8001a58:	58020000 	.word	0x58020000

08001a5c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001a5c:	b480      	push	{r7}
 8001a5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001a60:	bf00      	nop
 8001a62:	e7fd      	b.n	8001a60 <NMI_Handler+0x4>

08001a64 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001a64:	b480      	push	{r7}
 8001a66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001a68:	bf00      	nop
 8001a6a:	e7fd      	b.n	8001a68 <HardFault_Handler+0x4>

08001a6c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001a6c:	b480      	push	{r7}
 8001a6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001a70:	bf00      	nop
 8001a72:	e7fd      	b.n	8001a70 <MemManage_Handler+0x4>

08001a74 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001a74:	b480      	push	{r7}
 8001a76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001a78:	bf00      	nop
 8001a7a:	e7fd      	b.n	8001a78 <BusFault_Handler+0x4>

08001a7c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001a7c:	b480      	push	{r7}
 8001a7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001a80:	bf00      	nop
 8001a82:	e7fd      	b.n	8001a80 <UsageFault_Handler+0x4>

08001a84 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001a84:	b480      	push	{r7}
 8001a86:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001a88:	bf00      	nop
 8001a8a:	46bd      	mov	sp, r7
 8001a8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a90:	4770      	bx	lr

08001a92 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001a92:	b480      	push	{r7}
 8001a94:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001a96:	bf00      	nop
 8001a98:	46bd      	mov	sp, r7
 8001a9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a9e:	4770      	bx	lr

08001aa0 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001aa0:	b480      	push	{r7}
 8001aa2:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001aa4:	bf00      	nop
 8001aa6:	46bd      	mov	sp, r7
 8001aa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aac:	4770      	bx	lr

08001aae <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001aae:	b580      	push	{r7, lr}
 8001ab0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001ab2:	f00e ff3d 	bl	8010930 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001ab6:	bf00      	nop
 8001ab8:	bd80      	pop	{r7, pc}
	...

08001abc <SDMMC1_IRQHandler>:

/**
  * @brief This function handles SDMMC1 global interrupt.
  */
void SDMMC1_IRQHandler(void)
{
 8001abc:	b580      	push	{r7, lr}
 8001abe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SDMMC1_IRQn 0 */

  /* USER CODE END SDMMC1_IRQn 0 */
  HAL_SD_IRQHandler(&hsd1);
 8001ac0:	4802      	ldr	r0, [pc, #8]	@ (8001acc <SDMMC1_IRQHandler+0x10>)
 8001ac2:	f013 fd09 	bl	80154d8 <HAL_SD_IRQHandler>
  /* USER CODE BEGIN SDMMC1_IRQn 1 */

  /* USER CODE END SDMMC1_IRQn 1 */
}
 8001ac6:	bf00      	nop
 8001ac8:	bd80      	pop	{r7, pc}
 8001aca:	bf00      	nop
 8001acc:	240000e4 	.word	0x240000e4

08001ad0 <OTG_HS_IRQHandler>:

/**
  * @brief This function handles USB On The Go HS global interrupt.
  */
void OTG_HS_IRQHandler(void)
{
 8001ad0:	b580      	push	{r7, lr}
 8001ad2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_HS_IRQn 0 */

	tud_int_handler(BOARD_TUD_RHPORT);
 8001ad4:	2001      	movs	r0, #1
 8001ad6:	f006 feb5 	bl	8008844 <dcd_int_handler>
	return;
 8001ada:	bf00      	nop
  /* USER CODE END OTG_HS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_HS);
  /* USER CODE BEGIN OTG_HS_IRQn 1 */

  /* USER CODE END OTG_HS_IRQn 1 */
}
 8001adc:	bd80      	pop	{r7, pc}

08001ade <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001ade:	b480      	push	{r7}
 8001ae0:	af00      	add	r7, sp, #0
  return 1;
 8001ae2:	2301      	movs	r3, #1
}
 8001ae4:	4618      	mov	r0, r3
 8001ae6:	46bd      	mov	sp, r7
 8001ae8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aec:	4770      	bx	lr

08001aee <_kill>:

int _kill(int pid, int sig)
{
 8001aee:	b580      	push	{r7, lr}
 8001af0:	b082      	sub	sp, #8
 8001af2:	af00      	add	r7, sp, #0
 8001af4:	6078      	str	r0, [r7, #4]
 8001af6:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001af8:	f017 fffc 	bl	8019af4 <__errno>
 8001afc:	4603      	mov	r3, r0
 8001afe:	2216      	movs	r2, #22
 8001b00:	601a      	str	r2, [r3, #0]
  return -1;
 8001b02:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001b06:	4618      	mov	r0, r3
 8001b08:	3708      	adds	r7, #8
 8001b0a:	46bd      	mov	sp, r7
 8001b0c:	bd80      	pop	{r7, pc}

08001b0e <_exit>:

void _exit (int status)
{
 8001b0e:	b580      	push	{r7, lr}
 8001b10:	b082      	sub	sp, #8
 8001b12:	af00      	add	r7, sp, #0
 8001b14:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001b16:	f04f 31ff 	mov.w	r1, #4294967295
 8001b1a:	6878      	ldr	r0, [r7, #4]
 8001b1c:	f7ff ffe7 	bl	8001aee <_kill>
  while (1) {}    /* Make sure we hang here */
 8001b20:	bf00      	nop
 8001b22:	e7fd      	b.n	8001b20 <_exit+0x12>

08001b24 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001b24:	b580      	push	{r7, lr}
 8001b26:	b086      	sub	sp, #24
 8001b28:	af00      	add	r7, sp, #0
 8001b2a:	60f8      	str	r0, [r7, #12]
 8001b2c:	60b9      	str	r1, [r7, #8]
 8001b2e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001b30:	2300      	movs	r3, #0
 8001b32:	617b      	str	r3, [r7, #20]
 8001b34:	e00a      	b.n	8001b4c <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001b36:	f3af 8000 	nop.w
 8001b3a:	4601      	mov	r1, r0
 8001b3c:	68bb      	ldr	r3, [r7, #8]
 8001b3e:	1c5a      	adds	r2, r3, #1
 8001b40:	60ba      	str	r2, [r7, #8]
 8001b42:	b2ca      	uxtb	r2, r1
 8001b44:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001b46:	697b      	ldr	r3, [r7, #20]
 8001b48:	3301      	adds	r3, #1
 8001b4a:	617b      	str	r3, [r7, #20]
 8001b4c:	697a      	ldr	r2, [r7, #20]
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	429a      	cmp	r2, r3
 8001b52:	dbf0      	blt.n	8001b36 <_read+0x12>
  }

  return len;
 8001b54:	687b      	ldr	r3, [r7, #4]
}
 8001b56:	4618      	mov	r0, r3
 8001b58:	3718      	adds	r7, #24
 8001b5a:	46bd      	mov	sp, r7
 8001b5c:	bd80      	pop	{r7, pc}

08001b5e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001b5e:	b580      	push	{r7, lr}
 8001b60:	b086      	sub	sp, #24
 8001b62:	af00      	add	r7, sp, #0
 8001b64:	60f8      	str	r0, [r7, #12]
 8001b66:	60b9      	str	r1, [r7, #8]
 8001b68:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001b6a:	2300      	movs	r3, #0
 8001b6c:	617b      	str	r3, [r7, #20]
 8001b6e:	e009      	b.n	8001b84 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001b70:	68bb      	ldr	r3, [r7, #8]
 8001b72:	1c5a      	adds	r2, r3, #1
 8001b74:	60ba      	str	r2, [r7, #8]
 8001b76:	781b      	ldrb	r3, [r3, #0]
 8001b78:	4618      	mov	r0, r3
 8001b7a:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001b7e:	697b      	ldr	r3, [r7, #20]
 8001b80:	3301      	adds	r3, #1
 8001b82:	617b      	str	r3, [r7, #20]
 8001b84:	697a      	ldr	r2, [r7, #20]
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	429a      	cmp	r2, r3
 8001b8a:	dbf1      	blt.n	8001b70 <_write+0x12>
  }
  return len;
 8001b8c:	687b      	ldr	r3, [r7, #4]
}
 8001b8e:	4618      	mov	r0, r3
 8001b90:	3718      	adds	r7, #24
 8001b92:	46bd      	mov	sp, r7
 8001b94:	bd80      	pop	{r7, pc}

08001b96 <_close>:

int _close(int file)
{
 8001b96:	b480      	push	{r7}
 8001b98:	b083      	sub	sp, #12
 8001b9a:	af00      	add	r7, sp, #0
 8001b9c:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001b9e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001ba2:	4618      	mov	r0, r3
 8001ba4:	370c      	adds	r7, #12
 8001ba6:	46bd      	mov	sp, r7
 8001ba8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bac:	4770      	bx	lr

08001bae <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001bae:	b480      	push	{r7}
 8001bb0:	b083      	sub	sp, #12
 8001bb2:	af00      	add	r7, sp, #0
 8001bb4:	6078      	str	r0, [r7, #4]
 8001bb6:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001bb8:	683b      	ldr	r3, [r7, #0]
 8001bba:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001bbe:	605a      	str	r2, [r3, #4]
  return 0;
 8001bc0:	2300      	movs	r3, #0
}
 8001bc2:	4618      	mov	r0, r3
 8001bc4:	370c      	adds	r7, #12
 8001bc6:	46bd      	mov	sp, r7
 8001bc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bcc:	4770      	bx	lr

08001bce <_isatty>:

int _isatty(int file)
{
 8001bce:	b480      	push	{r7}
 8001bd0:	b083      	sub	sp, #12
 8001bd2:	af00      	add	r7, sp, #0
 8001bd4:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001bd6:	2301      	movs	r3, #1
}
 8001bd8:	4618      	mov	r0, r3
 8001bda:	370c      	adds	r7, #12
 8001bdc:	46bd      	mov	sp, r7
 8001bde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001be2:	4770      	bx	lr

08001be4 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001be4:	b480      	push	{r7}
 8001be6:	b085      	sub	sp, #20
 8001be8:	af00      	add	r7, sp, #0
 8001bea:	60f8      	str	r0, [r7, #12]
 8001bec:	60b9      	str	r1, [r7, #8]
 8001bee:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001bf0:	2300      	movs	r3, #0
}
 8001bf2:	4618      	mov	r0, r3
 8001bf4:	3714      	adds	r7, #20
 8001bf6:	46bd      	mov	sp, r7
 8001bf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bfc:	4770      	bx	lr
	...

08001c00 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001c00:	b580      	push	{r7, lr}
 8001c02:	b086      	sub	sp, #24
 8001c04:	af00      	add	r7, sp, #0
 8001c06:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001c08:	4a14      	ldr	r2, [pc, #80]	@ (8001c5c <_sbrk+0x5c>)
 8001c0a:	4b15      	ldr	r3, [pc, #84]	@ (8001c60 <_sbrk+0x60>)
 8001c0c:	1ad3      	subs	r3, r2, r3
 8001c0e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001c10:	697b      	ldr	r3, [r7, #20]
 8001c12:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001c14:	4b13      	ldr	r3, [pc, #76]	@ (8001c64 <_sbrk+0x64>)
 8001c16:	681b      	ldr	r3, [r3, #0]
 8001c18:	2b00      	cmp	r3, #0
 8001c1a:	d102      	bne.n	8001c22 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001c1c:	4b11      	ldr	r3, [pc, #68]	@ (8001c64 <_sbrk+0x64>)
 8001c1e:	4a12      	ldr	r2, [pc, #72]	@ (8001c68 <_sbrk+0x68>)
 8001c20:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001c22:	4b10      	ldr	r3, [pc, #64]	@ (8001c64 <_sbrk+0x64>)
 8001c24:	681a      	ldr	r2, [r3, #0]
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	4413      	add	r3, r2
 8001c2a:	693a      	ldr	r2, [r7, #16]
 8001c2c:	429a      	cmp	r2, r3
 8001c2e:	d207      	bcs.n	8001c40 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001c30:	f017 ff60 	bl	8019af4 <__errno>
 8001c34:	4603      	mov	r3, r0
 8001c36:	220c      	movs	r2, #12
 8001c38:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001c3a:	f04f 33ff 	mov.w	r3, #4294967295
 8001c3e:	e009      	b.n	8001c54 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001c40:	4b08      	ldr	r3, [pc, #32]	@ (8001c64 <_sbrk+0x64>)
 8001c42:	681b      	ldr	r3, [r3, #0]
 8001c44:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001c46:	4b07      	ldr	r3, [pc, #28]	@ (8001c64 <_sbrk+0x64>)
 8001c48:	681a      	ldr	r2, [r3, #0]
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	4413      	add	r3, r2
 8001c4e:	4a05      	ldr	r2, [pc, #20]	@ (8001c64 <_sbrk+0x64>)
 8001c50:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001c52:	68fb      	ldr	r3, [r7, #12]
}
 8001c54:	4618      	mov	r0, r3
 8001c56:	3718      	adds	r7, #24
 8001c58:	46bd      	mov	sp, r7
 8001c5a:	bd80      	pop	{r7, pc}
 8001c5c:	24080000 	.word	0x24080000
 8001c60:	00000400 	.word	0x00000400
 8001c64:	24000714 	.word	0x24000714
 8001c68:	24002128 	.word	0x24002128

08001c6c <tud_descriptor_device_cb>:
};

// Invoked when received GET DEVICE DESCRIPTOR
// Application return pointer to descriptor
uint8_t const * tud_descriptor_device_cb(void)
{
 8001c6c:	b480      	push	{r7}
 8001c6e:	af00      	add	r7, sp, #0
  return (uint8_t const *) &desc_device;
 8001c70:	4b02      	ldr	r3, [pc, #8]	@ (8001c7c <tud_descriptor_device_cb+0x10>)
}
 8001c72:	4618      	mov	r0, r3
 8001c74:	46bd      	mov	sp, r7
 8001c76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c7a:	4770      	bx	lr
 8001c7c:	0801bda0 	.word	0x0801bda0

08001c80 <tud_descriptor_configuration_cb>:

// Invoked when received GET CONFIGURATION DESCRIPTOR
// Application return pointer to descriptor
// Descriptor contents must exist long enough for transfer to complete
uint8_t const * tud_descriptor_configuration_cb(uint8_t index)
{
 8001c80:	b480      	push	{r7}
 8001c82:	b083      	sub	sp, #12
 8001c84:	af00      	add	r7, sp, #0
 8001c86:	4603      	mov	r3, r0
 8001c88:	71fb      	strb	r3, [r7, #7]
  return (index < CONFIG_ID_COUNT) ? configuration_arr[index] : NULL;
 8001c8a:	79fb      	ldrb	r3, [r7, #7]
 8001c8c:	2b01      	cmp	r3, #1
 8001c8e:	d804      	bhi.n	8001c9a <tud_descriptor_configuration_cb+0x1a>
 8001c90:	79fb      	ldrb	r3, [r7, #7]
 8001c92:	4a05      	ldr	r2, [pc, #20]	@ (8001ca8 <tud_descriptor_configuration_cb+0x28>)
 8001c94:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001c98:	e000      	b.n	8001c9c <tud_descriptor_configuration_cb+0x1c>
 8001c9a:	2300      	movs	r3, #0
}
 8001c9c:	4618      	mov	r0, r3
 8001c9e:	370c      	adds	r7, #12
 8001ca0:	46bd      	mov	sp, r7
 8001ca2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ca6:	4770      	bx	lr
 8001ca8:	0801bf0c 	.word	0x0801bf0c

08001cac <tud_descriptor_string_cb>:
static uint16_t _desc_str[32];

// Invoked when received GET STRING DESCRIPTOR request
// Application return pointer to descriptor, whose contents must exist long enough for transfer to complete
uint16_t const* tud_descriptor_string_cb(uint8_t index, uint16_t langid)
{
 8001cac:	b580      	push	{r7, lr}
 8001cae:	b086      	sub	sp, #24
 8001cb0:	af00      	add	r7, sp, #0
 8001cb2:	4603      	mov	r3, r0
 8001cb4:	460a      	mov	r2, r1
 8001cb6:	71fb      	strb	r3, [r7, #7]
 8001cb8:	4613      	mov	r3, r2
 8001cba:	80bb      	strh	r3, [r7, #4]
  (void) langid;

  unsigned int chr_count = 0;
 8001cbc:	2300      	movs	r3, #0
 8001cbe:	617b      	str	r3, [r7, #20]

  if (STRID_LANGID == index)
 8001cc0:	79fb      	ldrb	r3, [r7, #7]
 8001cc2:	2b00      	cmp	r3, #0
 8001cc4:	d108      	bne.n	8001cd8 <tud_descriptor_string_cb+0x2c>
  {
    memcpy(&_desc_str[1], string_desc_arr[STRID_LANGID], 2);
 8001cc6:	4b37      	ldr	r3, [pc, #220]	@ (8001da4 <tud_descriptor_string_cb+0xf8>)
 8001cc8:	681b      	ldr	r3, [r3, #0]
 8001cca:	881b      	ldrh	r3, [r3, #0]
 8001ccc:	b29a      	uxth	r2, r3
 8001cce:	4b36      	ldr	r3, [pc, #216]	@ (8001da8 <tud_descriptor_string_cb+0xfc>)
 8001cd0:	805a      	strh	r2, [r3, #2]
    chr_count = 1;
 8001cd2:	2301      	movs	r3, #1
 8001cd4:	617b      	str	r3, [r7, #20]
 8001cd6:	e055      	b.n	8001d84 <tud_descriptor_string_cb+0xd8>
  }
  else if (STRID_MAC == index)
 8001cd8:	79fb      	ldrb	r3, [r7, #7]
 8001cda:	2b07      	cmp	r3, #7
 8001cdc:	d129      	bne.n	8001d32 <tud_descriptor_string_cb+0x86>
  {
    // Convert MAC address into UTF-16

    for (unsigned i=0; i<sizeof(tud_network_mac_address); i++)
 8001cde:	2300      	movs	r3, #0
 8001ce0:	613b      	str	r3, [r7, #16]
 8001ce2:	e022      	b.n	8001d2a <tud_descriptor_string_cb+0x7e>
    {
      _desc_str[1+chr_count++] = "0123456789ABCDEF"[(tud_network_mac_address[i] >> 4) & 0xf];
 8001ce4:	4a31      	ldr	r2, [pc, #196]	@ (8001dac <tud_descriptor_string_cb+0x100>)
 8001ce6:	693b      	ldr	r3, [r7, #16]
 8001ce8:	4413      	add	r3, r2
 8001cea:	781b      	ldrb	r3, [r3, #0]
 8001cec:	091b      	lsrs	r3, r3, #4
 8001cee:	b2db      	uxtb	r3, r3
 8001cf0:	f003 030f 	and.w	r3, r3, #15
 8001cf4:	4a2e      	ldr	r2, [pc, #184]	@ (8001db0 <tud_descriptor_string_cb+0x104>)
 8001cf6:	5cd1      	ldrb	r1, [r2, r3]
 8001cf8:	697b      	ldr	r3, [r7, #20]
 8001cfa:	1c5a      	adds	r2, r3, #1
 8001cfc:	617a      	str	r2, [r7, #20]
 8001cfe:	3301      	adds	r3, #1
 8001d00:	4a29      	ldr	r2, [pc, #164]	@ (8001da8 <tud_descriptor_string_cb+0xfc>)
 8001d02:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
      _desc_str[1+chr_count++] = "0123456789ABCDEF"[(tud_network_mac_address[i] >> 0) & 0xf];
 8001d06:	4a29      	ldr	r2, [pc, #164]	@ (8001dac <tud_descriptor_string_cb+0x100>)
 8001d08:	693b      	ldr	r3, [r7, #16]
 8001d0a:	4413      	add	r3, r2
 8001d0c:	781b      	ldrb	r3, [r3, #0]
 8001d0e:	f003 030f 	and.w	r3, r3, #15
 8001d12:	4a27      	ldr	r2, [pc, #156]	@ (8001db0 <tud_descriptor_string_cb+0x104>)
 8001d14:	5cd1      	ldrb	r1, [r2, r3]
 8001d16:	697b      	ldr	r3, [r7, #20]
 8001d18:	1c5a      	adds	r2, r3, #1
 8001d1a:	617a      	str	r2, [r7, #20]
 8001d1c:	3301      	adds	r3, #1
 8001d1e:	4a22      	ldr	r2, [pc, #136]	@ (8001da8 <tud_descriptor_string_cb+0xfc>)
 8001d20:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
    for (unsigned i=0; i<sizeof(tud_network_mac_address); i++)
 8001d24:	693b      	ldr	r3, [r7, #16]
 8001d26:	3301      	adds	r3, #1
 8001d28:	613b      	str	r3, [r7, #16]
 8001d2a:	693b      	ldr	r3, [r7, #16]
 8001d2c:	2b05      	cmp	r3, #5
 8001d2e:	d9d9      	bls.n	8001ce4 <tud_descriptor_string_cb+0x38>
 8001d30:	e028      	b.n	8001d84 <tud_descriptor_string_cb+0xd8>
  else
  {
    // Note: the 0xEE index string is a Microsoft OS 1.0 Descriptors.
    // https://docs.microsoft.com/en-us/windows-hardware/drivers/usbcon/microsoft-defined-usb-descriptors

    if ( !(index < sizeof(string_desc_arr)/sizeof(string_desc_arr[0])) ) return NULL;
 8001d32:	79fb      	ldrb	r3, [r7, #7]
 8001d34:	2b06      	cmp	r3, #6
 8001d36:	d901      	bls.n	8001d3c <tud_descriptor_string_cb+0x90>
 8001d38:	2300      	movs	r3, #0
 8001d3a:	e02f      	b.n	8001d9c <tud_descriptor_string_cb+0xf0>

    const char* str = string_desc_arr[index];
 8001d3c:	79fb      	ldrb	r3, [r7, #7]
 8001d3e:	4a19      	ldr	r2, [pc, #100]	@ (8001da4 <tud_descriptor_string_cb+0xf8>)
 8001d40:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001d44:	60bb      	str	r3, [r7, #8]

    // Cap at max char
    chr_count = (uint8_t) strlen(str);
 8001d46:	68b8      	ldr	r0, [r7, #8]
 8001d48:	f7fe fb1a 	bl	8000380 <strlen>
 8001d4c:	4603      	mov	r3, r0
 8001d4e:	b2db      	uxtb	r3, r3
 8001d50:	617b      	str	r3, [r7, #20]
    if ( chr_count > (TU_ARRAY_SIZE(_desc_str) - 1)) chr_count = TU_ARRAY_SIZE(_desc_str) - 1;
 8001d52:	697b      	ldr	r3, [r7, #20]
 8001d54:	2b1f      	cmp	r3, #31
 8001d56:	d901      	bls.n	8001d5c <tud_descriptor_string_cb+0xb0>
 8001d58:	231f      	movs	r3, #31
 8001d5a:	617b      	str	r3, [r7, #20]

    // Convert ASCII string into UTF-16
    for (unsigned int i=0; i<chr_count; i++)
 8001d5c:	2300      	movs	r3, #0
 8001d5e:	60fb      	str	r3, [r7, #12]
 8001d60:	e00c      	b.n	8001d7c <tud_descriptor_string_cb+0xd0>
    {
      _desc_str[1+i] = str[i];
 8001d62:	68ba      	ldr	r2, [r7, #8]
 8001d64:	68fb      	ldr	r3, [r7, #12]
 8001d66:	4413      	add	r3, r2
 8001d68:	781a      	ldrb	r2, [r3, #0]
 8001d6a:	68fb      	ldr	r3, [r7, #12]
 8001d6c:	3301      	adds	r3, #1
 8001d6e:	4611      	mov	r1, r2
 8001d70:	4a0d      	ldr	r2, [pc, #52]	@ (8001da8 <tud_descriptor_string_cb+0xfc>)
 8001d72:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
    for (unsigned int i=0; i<chr_count; i++)
 8001d76:	68fb      	ldr	r3, [r7, #12]
 8001d78:	3301      	adds	r3, #1
 8001d7a:	60fb      	str	r3, [r7, #12]
 8001d7c:	68fa      	ldr	r2, [r7, #12]
 8001d7e:	697b      	ldr	r3, [r7, #20]
 8001d80:	429a      	cmp	r2, r3
 8001d82:	d3ee      	bcc.n	8001d62 <tud_descriptor_string_cb+0xb6>
    }
  }

  // first byte is length (including header), second byte is string type
  _desc_str[0] = (uint16_t) ((TUSB_DESC_STRING << 8) | (2 * chr_count + 2));
 8001d84:	697b      	ldr	r3, [r7, #20]
 8001d86:	b29b      	uxth	r3, r3
 8001d88:	3301      	adds	r3, #1
 8001d8a:	b29b      	uxth	r3, r3
 8001d8c:	005b      	lsls	r3, r3, #1
 8001d8e:	b29b      	uxth	r3, r3
 8001d90:	f443 7340 	orr.w	r3, r3, #768	@ 0x300
 8001d94:	b29a      	uxth	r2, r3
 8001d96:	4b04      	ldr	r3, [pc, #16]	@ (8001da8 <tud_descriptor_string_cb+0xfc>)
 8001d98:	801a      	strh	r2, [r3, #0]

  return _desc_str;
 8001d9a:	4b03      	ldr	r3, [pc, #12]	@ (8001da8 <tud_descriptor_string_cb+0xfc>)
}
 8001d9c:	4618      	mov	r0, r3
 8001d9e:	3718      	adds	r7, #24
 8001da0:	46bd      	mov	sp, r7
 8001da2:	bd80      	pop	{r7, pc}
 8001da4:	2400000c 	.word	0x2400000c
 8001da8:	24000718 	.word	0x24000718
 8001dac:	24000700 	.word	0x24000700
 8001db0:	0801a4c0 	.word	0x0801a4c0

08001db4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8001db4:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001dec <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8001db8:	f7fe fc62 	bl	8000680 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001dbc:	480c      	ldr	r0, [pc, #48]	@ (8001df0 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001dbe:	490d      	ldr	r1, [pc, #52]	@ (8001df4 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001dc0:	4a0d      	ldr	r2, [pc, #52]	@ (8001df8 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001dc2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001dc4:	e002      	b.n	8001dcc <LoopCopyDataInit>

08001dc6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001dc6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001dc8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001dca:	3304      	adds	r3, #4

08001dcc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001dcc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001dce:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001dd0:	d3f9      	bcc.n	8001dc6 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001dd2:	4a0a      	ldr	r2, [pc, #40]	@ (8001dfc <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001dd4:	4c0a      	ldr	r4, [pc, #40]	@ (8001e00 <LoopFillZerobss+0x22>)
  movs r3, #0
 8001dd6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001dd8:	e001      	b.n	8001dde <LoopFillZerobss>

08001dda <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001dda:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001ddc:	3204      	adds	r2, #4

08001dde <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001dde:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001de0:	d3fb      	bcc.n	8001dda <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001de2:	f017 fe8d 	bl	8019b00 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001de6:	f7fe fe95 	bl	8000b14 <main>
  bx  lr
 8001dea:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001dec:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 8001df0:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8001df4:	240000b4 	.word	0x240000b4
  ldr r2, =_sidata
 8001df8:	0801c3a4 	.word	0x0801c3a4
  ldr r2, =_sbss
 8001dfc:	240000b4 	.word	0x240000b4
  ldr r4, =_ebss
 8001e00:	24002124 	.word	0x24002124

08001e04 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001e04:	e7fe      	b.n	8001e04 <ADC3_IRQHandler>

08001e06 <_prep_out_transaction>:
// INTERNAL OBJECT & FUNCTION DECLARATION
//--------------------------------------------------------------------+
CFG_TUD_MEM_SECTION tu_static cdcd_interface_t _cdcd_itf[CFG_TUD_CDC];

static bool _prep_out_transaction (cdcd_interface_t* p_cdc)
{
 8001e06:	b580      	push	{r7, lr}
 8001e08:	b084      	sub	sp, #16
 8001e0a:	af00      	add	r7, sp, #0
 8001e0c:	6078      	str	r0, [r7, #4]
  uint8_t const rhport = 0;
 8001e0e:	2300      	movs	r3, #0
 8001e10:	73fb      	strb	r3, [r7, #15]
  uint16_t available = tu_fifo_remaining(&p_cdc->rx_ff);
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	3310      	adds	r3, #16
 8001e16:	4618      	mov	r0, r3
 8001e18:	f002 ff31 	bl	8004c7e <tu_fifo_remaining>
 8001e1c:	4603      	mov	r3, r0
 8001e1e:	81bb      	strh	r3, [r7, #12]

  // Prepare for incoming data but only allow what we can store in the ring buffer.
  // TODO Actually we can still carry out the transfer, keeping count of received bytes
  // and slowly move it to the FIFO when read().
  // This pre-check reduces endpoint claiming
  TU_VERIFY(available >= sizeof(p_cdc->epout_buf));
 8001e20:	89bb      	ldrh	r3, [r7, #12]
 8001e22:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8001e26:	d201      	bcs.n	8001e2c <_prep_out_transaction+0x26>
 8001e28:	2300      	movs	r3, #0
 8001e2a:	e02d      	b.n	8001e88 <_prep_out_transaction+0x82>

  // claim endpoint
  TU_VERIFY(usbd_edpt_claim(rhport, p_cdc->ep_out));
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	78da      	ldrb	r2, [r3, #3]
 8001e30:	7bfb      	ldrb	r3, [r7, #15]
 8001e32:	4611      	mov	r1, r2
 8001e34:	4618      	mov	r0, r3
 8001e36:	f004 fa85 	bl	8006344 <usbd_edpt_claim>
 8001e3a:	4603      	mov	r3, r0
 8001e3c:	f083 0301 	eor.w	r3, r3, #1
 8001e40:	b2db      	uxtb	r3, r3
 8001e42:	2b00      	cmp	r3, #0
 8001e44:	d001      	beq.n	8001e4a <_prep_out_transaction+0x44>
 8001e46:	2300      	movs	r3, #0
 8001e48:	e01e      	b.n	8001e88 <_prep_out_transaction+0x82>

  // fifo can be changed before endpoint is claimed
  available = tu_fifo_remaining(&p_cdc->rx_ff);
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	3310      	adds	r3, #16
 8001e4e:	4618      	mov	r0, r3
 8001e50:	f002 ff15 	bl	8004c7e <tu_fifo_remaining>
 8001e54:	4603      	mov	r3, r0
 8001e56:	81bb      	strh	r3, [r7, #12]

  if ( available >= sizeof(p_cdc->epout_buf) )
 8001e58:	89bb      	ldrh	r3, [r7, #12]
 8001e5a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8001e5e:	d30b      	bcc.n	8001e78 <_prep_out_transaction+0x72>
  {
    return usbd_edpt_xfer(rhport, p_cdc->ep_out, p_cdc->epout_buf, sizeof(p_cdc->epout_buf));
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	78d9      	ldrb	r1, [r3, #3]
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	f503 6285 	add.w	r2, r3, #1064	@ 0x428
 8001e6a:	7bf8      	ldrb	r0, [r7, #15]
 8001e6c:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001e70:	f004 fabc 	bl	80063ec <usbd_edpt_xfer>
 8001e74:	4603      	mov	r3, r0
 8001e76:	e007      	b.n	8001e88 <_prep_out_transaction+0x82>
  }else
  {
    // Release endpoint since we don't make any transfer
    usbd_edpt_release(rhport, p_cdc->ep_out);
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	78da      	ldrb	r2, [r3, #3]
 8001e7c:	7bfb      	ldrb	r3, [r7, #15]
 8001e7e:	4611      	mov	r1, r2
 8001e80:	4618      	mov	r0, r3
 8001e82:	f004 fa89 	bl	8006398 <usbd_edpt_release>

    return false;
 8001e86:	2300      	movs	r3, #0
  }
}
 8001e88:	4618      	mov	r0, r3
 8001e8a:	3710      	adds	r7, #16
 8001e8c:	46bd      	mov	sp, r7
 8001e8e:	bd80      	pop	{r7, pc}

08001e90 <tud_cdc_n_available>:

//--------------------------------------------------------------------+
// READ API
//--------------------------------------------------------------------+
uint32_t tud_cdc_n_available(uint8_t itf)
{
 8001e90:	b580      	push	{r7, lr}
 8001e92:	b082      	sub	sp, #8
 8001e94:	af00      	add	r7, sp, #0
 8001e96:	4603      	mov	r3, r0
 8001e98:	71fb      	strb	r3, [r7, #7]
  return tu_fifo_count(&_cdcd_itf[itf].rx_ff);
 8001e9a:	79fb      	ldrb	r3, [r7, #7]
 8001e9c:	f640 0228 	movw	r2, #2088	@ 0x828
 8001ea0:	fb02 f303 	mul.w	r3, r2, r3
 8001ea4:	3310      	adds	r3, #16
 8001ea6:	4a05      	ldr	r2, [pc, #20]	@ (8001ebc <tud_cdc_n_available+0x2c>)
 8001ea8:	4413      	add	r3, r2
 8001eaa:	4618      	mov	r0, r3
 8001eac:	f002 fe72 	bl	8004b94 <tu_fifo_count>
 8001eb0:	4603      	mov	r3, r0
}
 8001eb2:	4618      	mov	r0, r3
 8001eb4:	3708      	adds	r7, #8
 8001eb6:	46bd      	mov	sp, r7
 8001eb8:	bd80      	pop	{r7, pc}
 8001eba:	bf00      	nop
 8001ebc:	24000758 	.word	0x24000758

08001ec0 <tud_cdc_n_read>:

uint32_t tud_cdc_n_read(uint8_t itf, void* buffer, uint32_t bufsize)
{
 8001ec0:	b580      	push	{r7, lr}
 8001ec2:	b086      	sub	sp, #24
 8001ec4:	af00      	add	r7, sp, #0
 8001ec6:	4603      	mov	r3, r0
 8001ec8:	60b9      	str	r1, [r7, #8]
 8001eca:	607a      	str	r2, [r7, #4]
 8001ecc:	73fb      	strb	r3, [r7, #15]
  cdcd_interface_t* p_cdc = &_cdcd_itf[itf];
 8001ece:	7bfb      	ldrb	r3, [r7, #15]
 8001ed0:	f640 0228 	movw	r2, #2088	@ 0x828
 8001ed4:	fb02 f303 	mul.w	r3, r2, r3
 8001ed8:	4a0e      	ldr	r2, [pc, #56]	@ (8001f14 <tud_cdc_n_read+0x54>)
 8001eda:	4413      	add	r3, r2
 8001edc:	617b      	str	r3, [r7, #20]
  uint32_t num_read = tu_fifo_read_n(&p_cdc->rx_ff, buffer, (uint16_t) TU_MIN(bufsize, UINT16_MAX));
 8001ede:	697b      	ldr	r3, [r7, #20]
 8001ee0:	f103 0010 	add.w	r0, r3, #16
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 8001eea:	4293      	cmp	r3, r2
 8001eec:	d802      	bhi.n	8001ef4 <tud_cdc_n_read+0x34>
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	b29b      	uxth	r3, r3
 8001ef2:	e001      	b.n	8001ef8 <tud_cdc_n_read+0x38>
 8001ef4:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8001ef8:	461a      	mov	r2, r3
 8001efa:	68b9      	ldr	r1, [r7, #8]
 8001efc:	f002 ff1b 	bl	8004d36 <tu_fifo_read_n>
 8001f00:	4603      	mov	r3, r0
 8001f02:	613b      	str	r3, [r7, #16]
  _prep_out_transaction(p_cdc);
 8001f04:	6978      	ldr	r0, [r7, #20]
 8001f06:	f7ff ff7e 	bl	8001e06 <_prep_out_transaction>
  return num_read;
 8001f0a:	693b      	ldr	r3, [r7, #16]
}
 8001f0c:	4618      	mov	r0, r3
 8001f0e:	3718      	adds	r7, #24
 8001f10:	46bd      	mov	sp, r7
 8001f12:	bd80      	pop	{r7, pc}
 8001f14:	24000758 	.word	0x24000758

08001f18 <tud_cdc_n_write>:

//--------------------------------------------------------------------+
// WRITE API
//--------------------------------------------------------------------+
uint32_t tud_cdc_n_write(uint8_t itf, void const* buffer, uint32_t bufsize)
{
 8001f18:	b580      	push	{r7, lr}
 8001f1a:	b086      	sub	sp, #24
 8001f1c:	af00      	add	r7, sp, #0
 8001f1e:	4603      	mov	r3, r0
 8001f20:	60b9      	str	r1, [r7, #8]
 8001f22:	607a      	str	r2, [r7, #4]
 8001f24:	73fb      	strb	r3, [r7, #15]
  cdcd_interface_t* p_cdc = &_cdcd_itf[itf];
 8001f26:	7bfb      	ldrb	r3, [r7, #15]
 8001f28:	f640 0228 	movw	r2, #2088	@ 0x828
 8001f2c:	fb02 f303 	mul.w	r3, r2, r3
 8001f30:	4a13      	ldr	r2, [pc, #76]	@ (8001f80 <tud_cdc_n_write+0x68>)
 8001f32:	4413      	add	r3, r2
 8001f34:	617b      	str	r3, [r7, #20]
  uint16_t ret = tu_fifo_write_n(&p_cdc->tx_ff, buffer, (uint16_t) TU_MIN(bufsize, UINT16_MAX));
 8001f36:	697b      	ldr	r3, [r7, #20]
 8001f38:	f103 001c 	add.w	r0, r3, #28
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 8001f42:	4293      	cmp	r3, r2
 8001f44:	d802      	bhi.n	8001f4c <tud_cdc_n_write+0x34>
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	b29b      	uxth	r3, r3
 8001f4a:	e001      	b.n	8001f50 <tud_cdc_n_write+0x38>
 8001f4c:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8001f50:	461a      	mov	r2, r3
 8001f52:	68b9      	ldr	r1, [r7, #8]
 8001f54:	f002 ff56 	bl	8004e04 <tu_fifo_write_n>
 8001f58:	4603      	mov	r3, r0
 8001f5a:	827b      	strh	r3, [r7, #18]

  // flush if queue more than packet size
  // may need to suppress -Wunreachable-code since most of the time CFG_TUD_CDC_TX_BUFSIZE < BULK_PACKET_SIZE
  if ( (tu_fifo_count(&p_cdc->tx_ff) >= BULK_PACKET_SIZE) || ((CFG_TUD_CDC_TX_BUFSIZE < BULK_PACKET_SIZE) && tu_fifo_full(&p_cdc->tx_ff)) )
 8001f5c:	697b      	ldr	r3, [r7, #20]
 8001f5e:	331c      	adds	r3, #28
 8001f60:	4618      	mov	r0, r3
 8001f62:	f002 fe17 	bl	8004b94 <tu_fifo_count>
 8001f66:	4603      	mov	r3, r0
 8001f68:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8001f6c:	d303      	bcc.n	8001f76 <tud_cdc_n_write+0x5e>
  {
    tud_cdc_n_write_flush(itf);
 8001f6e:	7bfb      	ldrb	r3, [r7, #15]
 8001f70:	4618      	mov	r0, r3
 8001f72:	f000 f807 	bl	8001f84 <tud_cdc_n_write_flush>
  }

  return ret;
 8001f76:	8a7b      	ldrh	r3, [r7, #18]
}
 8001f78:	4618      	mov	r0, r3
 8001f7a:	3718      	adds	r7, #24
 8001f7c:	46bd      	mov	sp, r7
 8001f7e:	bd80      	pop	{r7, pc}
 8001f80:	24000758 	.word	0x24000758

08001f84 <tud_cdc_n_write_flush>:

uint32_t tud_cdc_n_write_flush (uint8_t itf)
{
 8001f84:	b580      	push	{r7, lr}
 8001f86:	b086      	sub	sp, #24
 8001f88:	af00      	add	r7, sp, #0
 8001f8a:	4603      	mov	r3, r0
 8001f8c:	71fb      	strb	r3, [r7, #7]
  cdcd_interface_t* p_cdc = &_cdcd_itf[itf];
 8001f8e:	79fb      	ldrb	r3, [r7, #7]
 8001f90:	f640 0228 	movw	r2, #2088	@ 0x828
 8001f94:	fb02 f303 	mul.w	r3, r2, r3
 8001f98:	4a37      	ldr	r2, [pc, #220]	@ (8002078 <tud_cdc_n_write_flush+0xf4>)
 8001f9a:	4413      	add	r3, r2
 8001f9c:	617b      	str	r3, [r7, #20]
  return tud_mounted() && !tud_suspended();
 8001f9e:	f002 ff9b 	bl	8004ed8 <tud_mounted>
 8001fa2:	4603      	mov	r3, r0
 8001fa4:	2b00      	cmp	r3, #0
 8001fa6:	d009      	beq.n	8001fbc <tud_cdc_n_write_flush+0x38>
 8001fa8:	f002 ffa8 	bl	8004efc <tud_suspended>
 8001fac:	4603      	mov	r3, r0
 8001fae:	f083 0301 	eor.w	r3, r3, #1
 8001fb2:	b2db      	uxtb	r3, r3
 8001fb4:	2b00      	cmp	r3, #0
 8001fb6:	d001      	beq.n	8001fbc <tud_cdc_n_write_flush+0x38>
 8001fb8:	2301      	movs	r3, #1
 8001fba:	e000      	b.n	8001fbe <tud_cdc_n_write_flush+0x3a>
 8001fbc:	2300      	movs	r3, #0
 8001fbe:	f003 0301 	and.w	r3, r3, #1
 8001fc2:	b2db      	uxtb	r3, r3

  // Skip if usb is not ready yet
  TU_VERIFY( tud_ready(), 0 );
 8001fc4:	f083 0301 	eor.w	r3, r3, #1
 8001fc8:	b2db      	uxtb	r3, r3
 8001fca:	2b00      	cmp	r3, #0
 8001fcc:	d001      	beq.n	8001fd2 <tud_cdc_n_write_flush+0x4e>
 8001fce:	2300      	movs	r3, #0
 8001fd0:	e04e      	b.n	8002070 <tud_cdc_n_write_flush+0xec>

  // No data to send
  if ( !tu_fifo_count(&p_cdc->tx_ff) ) return 0;
 8001fd2:	697b      	ldr	r3, [r7, #20]
 8001fd4:	331c      	adds	r3, #28
 8001fd6:	4618      	mov	r0, r3
 8001fd8:	f002 fddc 	bl	8004b94 <tu_fifo_count>
 8001fdc:	4603      	mov	r3, r0
 8001fde:	2b00      	cmp	r3, #0
 8001fe0:	d101      	bne.n	8001fe6 <tud_cdc_n_write_flush+0x62>
 8001fe2:	2300      	movs	r3, #0
 8001fe4:	e044      	b.n	8002070 <tud_cdc_n_write_flush+0xec>

  uint8_t const rhport = 0;
 8001fe6:	2300      	movs	r3, #0
 8001fe8:	74fb      	strb	r3, [r7, #19]

  // Claim the endpoint
  TU_VERIFY( usbd_edpt_claim(rhport, p_cdc->ep_in), 0 );
 8001fea:	697b      	ldr	r3, [r7, #20]
 8001fec:	789a      	ldrb	r2, [r3, #2]
 8001fee:	7cfb      	ldrb	r3, [r7, #19]
 8001ff0:	4611      	mov	r1, r2
 8001ff2:	4618      	mov	r0, r3
 8001ff4:	f004 f9a6 	bl	8006344 <usbd_edpt_claim>
 8001ff8:	4603      	mov	r3, r0
 8001ffa:	f083 0301 	eor.w	r3, r3, #1
 8001ffe:	b2db      	uxtb	r3, r3
 8002000:	2b00      	cmp	r3, #0
 8002002:	d001      	beq.n	8002008 <tud_cdc_n_write_flush+0x84>
 8002004:	2300      	movs	r3, #0
 8002006:	e033      	b.n	8002070 <tud_cdc_n_write_flush+0xec>

  // Pull data from FIFO
  uint16_t const count = tu_fifo_read_n(&p_cdc->tx_ff, p_cdc->epin_buf, sizeof(p_cdc->epin_buf));
 8002008:	697b      	ldr	r3, [r7, #20]
 800200a:	f103 001c 	add.w	r0, r3, #28
 800200e:	697b      	ldr	r3, [r7, #20]
 8002010:	f503 63c5 	add.w	r3, r3, #1576	@ 0x628
 8002014:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002018:	4619      	mov	r1, r3
 800201a:	f002 fe8c 	bl	8004d36 <tu_fifo_read_n>
 800201e:	4603      	mov	r3, r0
 8002020:	823b      	strh	r3, [r7, #16]

  if ( count )
 8002022:	8a3b      	ldrh	r3, [r7, #16]
 8002024:	2b00      	cmp	r3, #0
 8002026:	d01b      	beq.n	8002060 <tud_cdc_n_write_flush+0xdc>
  {
    TU_ASSERT( usbd_edpt_xfer(rhport, p_cdc->ep_in, p_cdc->epin_buf, count), 0 );
 8002028:	697b      	ldr	r3, [r7, #20]
 800202a:	7899      	ldrb	r1, [r3, #2]
 800202c:	697b      	ldr	r3, [r7, #20]
 800202e:	f503 62c5 	add.w	r2, r3, #1576	@ 0x628
 8002032:	8a3b      	ldrh	r3, [r7, #16]
 8002034:	7cf8      	ldrb	r0, [r7, #19]
 8002036:	f004 f9d9 	bl	80063ec <usbd_edpt_xfer>
 800203a:	4603      	mov	r3, r0
 800203c:	f083 0301 	eor.w	r3, r3, #1
 8002040:	b2db      	uxtb	r3, r3
 8002042:	2b00      	cmp	r3, #0
 8002044:	d00a      	beq.n	800205c <tud_cdc_n_write_flush+0xd8>
 8002046:	4b0d      	ldr	r3, [pc, #52]	@ (800207c <tud_cdc_n_write_flush+0xf8>)
 8002048:	60fb      	str	r3, [r7, #12]
 800204a:	68fb      	ldr	r3, [r7, #12]
 800204c:	681b      	ldr	r3, [r3, #0]
 800204e:	f003 0301 	and.w	r3, r3, #1
 8002052:	2b00      	cmp	r3, #0
 8002054:	d000      	beq.n	8002058 <tud_cdc_n_write_flush+0xd4>
 8002056:	be00      	bkpt	0x0000
 8002058:	2300      	movs	r3, #0
 800205a:	e009      	b.n	8002070 <tud_cdc_n_write_flush+0xec>
    return count;
 800205c:	8a3b      	ldrh	r3, [r7, #16]
 800205e:	e007      	b.n	8002070 <tud_cdc_n_write_flush+0xec>
  }else
  {
    // Release endpoint since we don't make any transfer
    // Note: data is dropped if terminal is not connected
    usbd_edpt_release(rhport, p_cdc->ep_in);
 8002060:	697b      	ldr	r3, [r7, #20]
 8002062:	789a      	ldrb	r2, [r3, #2]
 8002064:	7cfb      	ldrb	r3, [r7, #19]
 8002066:	4611      	mov	r1, r2
 8002068:	4618      	mov	r0, r3
 800206a:	f004 f995 	bl	8006398 <usbd_edpt_release>
    return 0;
 800206e:	2300      	movs	r3, #0
  }
}
 8002070:	4618      	mov	r0, r3
 8002072:	3718      	adds	r7, #24
 8002074:	46bd      	mov	sp, r7
 8002076:	bd80      	pop	{r7, pc}
 8002078:	24000758 	.word	0x24000758
 800207c:	e000edf0 	.word	0xe000edf0

08002080 <cdcd_init>:

//--------------------------------------------------------------------+
// USBD Driver API
//--------------------------------------------------------------------+
void cdcd_init(void)
{
 8002080:	b580      	push	{r7, lr}
 8002082:	b084      	sub	sp, #16
 8002084:	af02      	add	r7, sp, #8
  tu_memclr(_cdcd_itf, sizeof(_cdcd_itf));
 8002086:	f640 0228 	movw	r2, #2088	@ 0x828
 800208a:	2100      	movs	r1, #0
 800208c:	4821      	ldr	r0, [pc, #132]	@ (8002114 <cdcd_init+0x94>)
 800208e:	f017 fc9d 	bl	80199cc <memset>

  for(uint8_t i=0; i<CFG_TUD_CDC; i++)
 8002092:	2300      	movs	r3, #0
 8002094:	71fb      	strb	r3, [r7, #7]
 8002096:	e034      	b.n	8002102 <cdcd_init+0x82>
  {
    cdcd_interface_t* p_cdc = &_cdcd_itf[i];
 8002098:	79fb      	ldrb	r3, [r7, #7]
 800209a:	f640 0228 	movw	r2, #2088	@ 0x828
 800209e:	fb02 f303 	mul.w	r3, r2, r3
 80020a2:	4a1c      	ldr	r2, [pc, #112]	@ (8002114 <cdcd_init+0x94>)
 80020a4:	4413      	add	r3, r2
 80020a6:	603b      	str	r3, [r7, #0]

    p_cdc->wanted_char = (char) -1;
 80020a8:	683b      	ldr	r3, [r7, #0]
 80020aa:	22ff      	movs	r2, #255	@ 0xff
 80020ac:	715a      	strb	r2, [r3, #5]

    // default line coding is : stop bit = 1, parity = none, data bits = 8
    p_cdc->line_coding.bit_rate  = 115200;
 80020ae:	683b      	ldr	r3, [r7, #0]
 80020b0:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80020b4:	609a      	str	r2, [r3, #8]
    p_cdc->line_coding.stop_bits = 0;
 80020b6:	683b      	ldr	r3, [r7, #0]
 80020b8:	2200      	movs	r2, #0
 80020ba:	731a      	strb	r2, [r3, #12]
    p_cdc->line_coding.parity    = 0;
 80020bc:	683b      	ldr	r3, [r7, #0]
 80020be:	2200      	movs	r2, #0
 80020c0:	735a      	strb	r2, [r3, #13]
    p_cdc->line_coding.data_bits = 8;
 80020c2:	683b      	ldr	r3, [r7, #0]
 80020c4:	2208      	movs	r2, #8
 80020c6:	739a      	strb	r2, [r3, #14]

    // Config RX fifo
    tu_fifo_config(&p_cdc->rx_ff, p_cdc->rx_ff_buf, TU_ARRAY_SIZE(p_cdc->rx_ff_buf), 1, false);
 80020c8:	683b      	ldr	r3, [r7, #0]
 80020ca:	f103 0010 	add.w	r0, r3, #16
 80020ce:	683b      	ldr	r3, [r7, #0]
 80020d0:	f103 0128 	add.w	r1, r3, #40	@ 0x28
 80020d4:	2300      	movs	r3, #0
 80020d6:	9300      	str	r3, [sp, #0]
 80020d8:	2301      	movs	r3, #1
 80020da:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80020de:	f002 f8c7 	bl	8004270 <tu_fifo_config>

    // Config TX fifo as overwritable at initialization and will be changed to non-overwritable
    // if terminal supports DTR bit. Without DTR we do not know if data is actually polled by terminal.
    // In this way, the most current data is prioritized.
    tu_fifo_config(&p_cdc->tx_ff, p_cdc->tx_ff_buf, TU_ARRAY_SIZE(p_cdc->tx_ff_buf), 1, true);
 80020e2:	683b      	ldr	r3, [r7, #0]
 80020e4:	f103 001c 	add.w	r0, r3, #28
 80020e8:	683b      	ldr	r3, [r7, #0]
 80020ea:	f503 710a 	add.w	r1, r3, #552	@ 0x228
 80020ee:	2301      	movs	r3, #1
 80020f0:	9300      	str	r3, [sp, #0]
 80020f2:	2301      	movs	r3, #1
 80020f4:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80020f8:	f002 f8ba 	bl	8004270 <tu_fifo_config>
  for(uint8_t i=0; i<CFG_TUD_CDC; i++)
 80020fc:	79fb      	ldrb	r3, [r7, #7]
 80020fe:	3301      	adds	r3, #1
 8002100:	71fb      	strb	r3, [r7, #7]
 8002102:	79fb      	ldrb	r3, [r7, #7]
 8002104:	2b00      	cmp	r3, #0
 8002106:	d0c7      	beq.n	8002098 <cdcd_init+0x18>

    tu_fifo_config_mutex(&p_cdc->rx_ff, NULL, osal_mutex_create(&p_cdc->rx_ff_mutex));
    tu_fifo_config_mutex(&p_cdc->tx_ff, osal_mutex_create(&p_cdc->tx_ff_mutex), NULL);
  }
}
 8002108:	bf00      	nop
 800210a:	bf00      	nop
 800210c:	3708      	adds	r7, #8
 800210e:	46bd      	mov	sp, r7
 8002110:	bd80      	pop	{r7, pc}
 8002112:	bf00      	nop
 8002114:	24000758 	.word	0x24000758

08002118 <cdcd_reset>:

void cdcd_reset(uint8_t rhport)
{
 8002118:	b580      	push	{r7, lr}
 800211a:	b084      	sub	sp, #16
 800211c:	af00      	add	r7, sp, #0
 800211e:	4603      	mov	r3, r0
 8002120:	71fb      	strb	r3, [r7, #7]
  (void) rhport;

  for(uint8_t i=0; i<CFG_TUD_CDC; i++)
 8002122:	2300      	movs	r3, #0
 8002124:	73fb      	strb	r3, [r7, #15]
 8002126:	e01f      	b.n	8002168 <cdcd_reset+0x50>
  {
    cdcd_interface_t* p_cdc = &_cdcd_itf[i];
 8002128:	7bfb      	ldrb	r3, [r7, #15]
 800212a:	f640 0228 	movw	r2, #2088	@ 0x828
 800212e:	fb02 f303 	mul.w	r3, r2, r3
 8002132:	4a11      	ldr	r2, [pc, #68]	@ (8002178 <cdcd_reset+0x60>)
 8002134:	4413      	add	r3, r2
 8002136:	60bb      	str	r3, [r7, #8]

    tu_memclr(p_cdc, ITF_MEM_RESET_SIZE);
 8002138:	2205      	movs	r2, #5
 800213a:	2100      	movs	r1, #0
 800213c:	68b8      	ldr	r0, [r7, #8]
 800213e:	f017 fc45 	bl	80199cc <memset>
    tu_fifo_clear(&p_cdc->rx_ff);
 8002142:	68bb      	ldr	r3, [r7, #8]
 8002144:	3310      	adds	r3, #16
 8002146:	4618      	mov	r0, r3
 8002148:	f002 fe80 	bl	8004e4c <tu_fifo_clear>
    tu_fifo_clear(&p_cdc->tx_ff);
 800214c:	68bb      	ldr	r3, [r7, #8]
 800214e:	331c      	adds	r3, #28
 8002150:	4618      	mov	r0, r3
 8002152:	f002 fe7b 	bl	8004e4c <tu_fifo_clear>
    tu_fifo_set_overwritable(&p_cdc->tx_ff, true);
 8002156:	68bb      	ldr	r3, [r7, #8]
 8002158:	331c      	adds	r3, #28
 800215a:	2101      	movs	r1, #1
 800215c:	4618      	mov	r0, r3
 800215e:	f002 fe86 	bl	8004e6e <tu_fifo_set_overwritable>
  for(uint8_t i=0; i<CFG_TUD_CDC; i++)
 8002162:	7bfb      	ldrb	r3, [r7, #15]
 8002164:	3301      	adds	r3, #1
 8002166:	73fb      	strb	r3, [r7, #15]
 8002168:	7bfb      	ldrb	r3, [r7, #15]
 800216a:	2b00      	cmp	r3, #0
 800216c:	d0dc      	beq.n	8002128 <cdcd_reset+0x10>
  }
}
 800216e:	bf00      	nop
 8002170:	bf00      	nop
 8002172:	3710      	adds	r7, #16
 8002174:	46bd      	mov	sp, r7
 8002176:	bd80      	pop	{r7, pc}
 8002178:	24000758 	.word	0x24000758

0800217c <cdcd_open>:

uint16_t cdcd_open(uint8_t rhport, tusb_desc_interface_t const * itf_desc, uint16_t max_len)
{
 800217c:	b580      	push	{r7, lr}
 800217e:	b09a      	sub	sp, #104	@ 0x68
 8002180:	af02      	add	r7, sp, #8
 8002182:	4603      	mov	r3, r0
 8002184:	6039      	str	r1, [r7, #0]
 8002186:	71fb      	strb	r3, [r7, #7]
 8002188:	4613      	mov	r3, r2
 800218a:	80bb      	strh	r3, [r7, #4]
  // Only support ACM subclass
  TU_VERIFY( TUSB_CLASS_CDC                           == itf_desc->bInterfaceClass &&
 800218c:	683b      	ldr	r3, [r7, #0]
 800218e:	795b      	ldrb	r3, [r3, #5]
 8002190:	2b02      	cmp	r3, #2
 8002192:	d103      	bne.n	800219c <cdcd_open+0x20>
 8002194:	683b      	ldr	r3, [r7, #0]
 8002196:	799b      	ldrb	r3, [r3, #6]
 8002198:	2b02      	cmp	r3, #2
 800219a:	d001      	beq.n	80021a0 <cdcd_open+0x24>
 800219c:	2300      	movs	r3, #0
 800219e:	e0e1      	b.n	8002364 <cdcd_open+0x1e8>
             CDC_COMM_SUBCLASS_ABSTRACT_CONTROL_MODEL == itf_desc->bInterfaceSubClass, 0);

  // Find available interface
  cdcd_interface_t * p_cdc = NULL;
 80021a0:	2300      	movs	r3, #0
 80021a2:	65fb      	str	r3, [r7, #92]	@ 0x5c
  for(uint8_t cdc_id=0; cdc_id<CFG_TUD_CDC; cdc_id++)
 80021a4:	2300      	movs	r3, #0
 80021a6:	f887 305b 	strb.w	r3, [r7, #91]	@ 0x5b
 80021aa:	e01a      	b.n	80021e2 <cdcd_open+0x66>
  {
    if ( _cdcd_itf[cdc_id].ep_in == 0 )
 80021ac:	f897 305b 	ldrb.w	r3, [r7, #91]	@ 0x5b
 80021b0:	4a6e      	ldr	r2, [pc, #440]	@ (800236c <cdcd_open+0x1f0>)
 80021b2:	f640 0128 	movw	r1, #2088	@ 0x828
 80021b6:	fb01 f303 	mul.w	r3, r1, r3
 80021ba:	4413      	add	r3, r2
 80021bc:	3302      	adds	r3, #2
 80021be:	781b      	ldrb	r3, [r3, #0]
 80021c0:	2b00      	cmp	r3, #0
 80021c2:	d109      	bne.n	80021d8 <cdcd_open+0x5c>
    {
      p_cdc = &_cdcd_itf[cdc_id];
 80021c4:	f897 305b 	ldrb.w	r3, [r7, #91]	@ 0x5b
 80021c8:	f640 0228 	movw	r2, #2088	@ 0x828
 80021cc:	fb02 f303 	mul.w	r3, r2, r3
 80021d0:	4a66      	ldr	r2, [pc, #408]	@ (800236c <cdcd_open+0x1f0>)
 80021d2:	4413      	add	r3, r2
 80021d4:	65fb      	str	r3, [r7, #92]	@ 0x5c
      break;
 80021d6:	e008      	b.n	80021ea <cdcd_open+0x6e>
  for(uint8_t cdc_id=0; cdc_id<CFG_TUD_CDC; cdc_id++)
 80021d8:	f897 305b 	ldrb.w	r3, [r7, #91]	@ 0x5b
 80021dc:	3301      	adds	r3, #1
 80021de:	f887 305b 	strb.w	r3, [r7, #91]	@ 0x5b
 80021e2:	f897 305b 	ldrb.w	r3, [r7, #91]	@ 0x5b
 80021e6:	2b00      	cmp	r3, #0
 80021e8:	d0e0      	beq.n	80021ac <cdcd_open+0x30>
    }
  }
  TU_ASSERT(p_cdc, 0);
 80021ea:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80021ec:	2b00      	cmp	r3, #0
 80021ee:	d10a      	bne.n	8002206 <cdcd_open+0x8a>
 80021f0:	4b5f      	ldr	r3, [pc, #380]	@ (8002370 <cdcd_open+0x1f4>)
 80021f2:	647b      	str	r3, [r7, #68]	@ 0x44
 80021f4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80021f6:	681b      	ldr	r3, [r3, #0]
 80021f8:	f003 0301 	and.w	r3, r3, #1
 80021fc:	2b00      	cmp	r3, #0
 80021fe:	d000      	beq.n	8002202 <cdcd_open+0x86>
 8002200:	be00      	bkpt	0x0000
 8002202:	2300      	movs	r3, #0
 8002204:	e0ae      	b.n	8002364 <cdcd_open+0x1e8>

  //------------- Control Interface -------------//
  p_cdc->itf_num = itf_desc->bInterfaceNumber;
 8002206:	683b      	ldr	r3, [r7, #0]
 8002208:	789a      	ldrb	r2, [r3, #2]
 800220a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800220c:	701a      	strb	r2, [r3, #0]

  uint16_t drv_len = sizeof(tusb_desc_interface_t);
 800220e:	2309      	movs	r3, #9
 8002210:	f8a7 3058 	strh.w	r3, [r7, #88]	@ 0x58
 8002214:	683b      	ldr	r3, [r7, #0]
 8002216:	643b      	str	r3, [r7, #64]	@ 0x40
//--------------------------------------------------------------------+

// return next descriptor
TU_ATTR_ALWAYS_INLINE static inline uint8_t const * tu_desc_next(void const* desc)
{
  uint8_t const* desc8 = (uint8_t const*) desc;
 8002218:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800221a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  return desc8 + desc8[DESC_OFFSET_LEN];
 800221c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800221e:	781b      	ldrb	r3, [r3, #0]
 8002220:	461a      	mov	r2, r3
 8002222:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002224:	4413      	add	r3, r2
  uint8_t const * p_desc = tu_desc_next( itf_desc );
 8002226:	657b      	str	r3, [r7, #84]	@ 0x54

  // Communication Functional Descriptors
  while ( TUSB_DESC_CS_INTERFACE == tu_desc_type(p_desc) && drv_len <= max_len )
 8002228:	e013      	b.n	8002252 <cdcd_open+0xd6>
 800222a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800222c:	633b      	str	r3, [r7, #48]	@ 0x30
}

// get descriptor length
TU_ATTR_ALWAYS_INLINE static inline uint8_t tu_desc_len(void const* desc)
{
  return ((uint8_t const*) desc)[DESC_OFFSET_LEN];
 800222e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002230:	781b      	ldrb	r3, [r3, #0]
  {
    drv_len += tu_desc_len(p_desc);
 8002232:	461a      	mov	r2, r3
 8002234:	f8b7 3058 	ldrh.w	r3, [r7, #88]	@ 0x58
 8002238:	4413      	add	r3, r2
 800223a:	f8a7 3058 	strh.w	r3, [r7, #88]	@ 0x58
 800223e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002240:	63bb      	str	r3, [r7, #56]	@ 0x38
  uint8_t const* desc8 = (uint8_t const*) desc;
 8002242:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002244:	637b      	str	r3, [r7, #52]	@ 0x34
  return desc8 + desc8[DESC_OFFSET_LEN];
 8002246:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002248:	781b      	ldrb	r3, [r3, #0]
 800224a:	461a      	mov	r2, r3
 800224c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800224e:	4413      	add	r3, r2
    p_desc   = tu_desc_next(p_desc);
 8002250:	657b      	str	r3, [r7, #84]	@ 0x54
 8002252:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002254:	62fb      	str	r3, [r7, #44]	@ 0x2c
  return ((uint8_t const*) desc)[DESC_OFFSET_TYPE];
 8002256:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002258:	3301      	adds	r3, #1
 800225a:	781b      	ldrb	r3, [r3, #0]
  while ( TUSB_DESC_CS_INTERFACE == tu_desc_type(p_desc) && drv_len <= max_len )
 800225c:	2b24      	cmp	r3, #36	@ 0x24
 800225e:	d104      	bne.n	800226a <cdcd_open+0xee>
 8002260:	f8b7 2058 	ldrh.w	r2, [r7, #88]	@ 0x58
 8002264:	88bb      	ldrh	r3, [r7, #4]
 8002266:	429a      	cmp	r2, r3
 8002268:	d9df      	bls.n	800222a <cdcd_open+0xae>
 800226a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800226c:	62bb      	str	r3, [r7, #40]	@ 0x28
 800226e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002270:	3301      	adds	r3, #1
 8002272:	781b      	ldrb	r3, [r3, #0]
  }

  if ( TUSB_DESC_ENDPOINT == tu_desc_type(p_desc) )
 8002274:	2b05      	cmp	r3, #5
 8002276:	d12f      	bne.n	80022d8 <cdcd_open+0x15c>
  {
    // notification endpoint
    tusb_desc_endpoint_t const * desc_ep = (tusb_desc_endpoint_t const *) p_desc;
 8002278:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800227a:	653b      	str	r3, [r7, #80]	@ 0x50

    TU_ASSERT( usbd_edpt_open(rhport, desc_ep), 0 );
 800227c:	79fb      	ldrb	r3, [r7, #7]
 800227e:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8002280:	4618      	mov	r0, r3
 8002282:	f004 f81b 	bl	80062bc <usbd_edpt_open>
 8002286:	4603      	mov	r3, r0
 8002288:	f083 0301 	eor.w	r3, r3, #1
 800228c:	b2db      	uxtb	r3, r3
 800228e:	2b00      	cmp	r3, #0
 8002290:	d00a      	beq.n	80022a8 <cdcd_open+0x12c>
 8002292:	4b37      	ldr	r3, [pc, #220]	@ (8002370 <cdcd_open+0x1f4>)
 8002294:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8002296:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8002298:	681b      	ldr	r3, [r3, #0]
 800229a:	f003 0301 	and.w	r3, r3, #1
 800229e:	2b00      	cmp	r3, #0
 80022a0:	d000      	beq.n	80022a4 <cdcd_open+0x128>
 80022a2:	be00      	bkpt	0x0000
 80022a4:	2300      	movs	r3, #0
 80022a6:	e05d      	b.n	8002364 <cdcd_open+0x1e8>
    p_cdc->ep_notif = desc_ep->bEndpointAddress;
 80022a8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80022aa:	789a      	ldrb	r2, [r3, #2]
 80022ac:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80022ae:	705a      	strb	r2, [r3, #1]
 80022b0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80022b2:	61fb      	str	r3, [r7, #28]
  return ((uint8_t const*) desc)[DESC_OFFSET_LEN];
 80022b4:	69fb      	ldr	r3, [r7, #28]
 80022b6:	781b      	ldrb	r3, [r3, #0]

    drv_len += tu_desc_len(p_desc);
 80022b8:	461a      	mov	r2, r3
 80022ba:	f8b7 3058 	ldrh.w	r3, [r7, #88]	@ 0x58
 80022be:	4413      	add	r3, r2
 80022c0:	f8a7 3058 	strh.w	r3, [r7, #88]	@ 0x58
 80022c4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80022c6:	627b      	str	r3, [r7, #36]	@ 0x24
  uint8_t const* desc8 = (uint8_t const*) desc;
 80022c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80022ca:	623b      	str	r3, [r7, #32]
  return desc8 + desc8[DESC_OFFSET_LEN];
 80022cc:	6a3b      	ldr	r3, [r7, #32]
 80022ce:	781b      	ldrb	r3, [r3, #0]
 80022d0:	461a      	mov	r2, r3
 80022d2:	6a3b      	ldr	r3, [r7, #32]
 80022d4:	4413      	add	r3, r2
    p_desc   = tu_desc_next(p_desc);
 80022d6:	657b      	str	r3, [r7, #84]	@ 0x54
 80022d8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80022da:	61bb      	str	r3, [r7, #24]
  return ((uint8_t const*) desc)[DESC_OFFSET_TYPE];
 80022dc:	69bb      	ldr	r3, [r7, #24]
 80022de:	3301      	adds	r3, #1
 80022e0:	781b      	ldrb	r3, [r3, #0]
  }

  //------------- Data Interface (if any) -------------//
  if ( (TUSB_DESC_INTERFACE == tu_desc_type(p_desc)) &&
 80022e2:	2b04      	cmp	r3, #4
 80022e4:	d139      	bne.n	800235a <cdcd_open+0x1de>
       (TUSB_CLASS_CDC_DATA == ((tusb_desc_interface_t const *) p_desc)->bInterfaceClass) )
 80022e6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80022e8:	795b      	ldrb	r3, [r3, #5]
  if ( (TUSB_DESC_INTERFACE == tu_desc_type(p_desc)) &&
 80022ea:	2b0a      	cmp	r3, #10
 80022ec:	d135      	bne.n	800235a <cdcd_open+0x1de>
 80022ee:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80022f0:	60fb      	str	r3, [r7, #12]
  return ((uint8_t const*) desc)[DESC_OFFSET_LEN];
 80022f2:	68fb      	ldr	r3, [r7, #12]
 80022f4:	781b      	ldrb	r3, [r3, #0]
  {
    // next to endpoint descriptor
    drv_len += tu_desc_len(p_desc);
 80022f6:	461a      	mov	r2, r3
 80022f8:	f8b7 3058 	ldrh.w	r3, [r7, #88]	@ 0x58
 80022fc:	4413      	add	r3, r2
 80022fe:	f8a7 3058 	strh.w	r3, [r7, #88]	@ 0x58
 8002302:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002304:	617b      	str	r3, [r7, #20]
  uint8_t const* desc8 = (uint8_t const*) desc;
 8002306:	697b      	ldr	r3, [r7, #20]
 8002308:	613b      	str	r3, [r7, #16]
  return desc8 + desc8[DESC_OFFSET_LEN];
 800230a:	693b      	ldr	r3, [r7, #16]
 800230c:	781b      	ldrb	r3, [r3, #0]
 800230e:	461a      	mov	r2, r3
 8002310:	693b      	ldr	r3, [r7, #16]
 8002312:	4413      	add	r3, r2
    p_desc   = tu_desc_next(p_desc);
 8002314:	657b      	str	r3, [r7, #84]	@ 0x54

    // Open endpoint pair
    TU_ASSERT( usbd_open_edpt_pair(rhport, p_desc, 2, TUSB_XFER_BULK, &p_cdc->ep_out, &p_cdc->ep_in), 0 );
 8002316:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002318:	3303      	adds	r3, #3
 800231a:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 800231c:	3202      	adds	r2, #2
 800231e:	79f8      	ldrb	r0, [r7, #7]
 8002320:	9201      	str	r2, [sp, #4]
 8002322:	9300      	str	r3, [sp, #0]
 8002324:	2302      	movs	r3, #2
 8002326:	2202      	movs	r2, #2
 8002328:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800232a:	f003 ff5f 	bl	80061ec <usbd_open_edpt_pair>
 800232e:	4603      	mov	r3, r0
 8002330:	f083 0301 	eor.w	r3, r3, #1
 8002334:	b2db      	uxtb	r3, r3
 8002336:	2b00      	cmp	r3, #0
 8002338:	d00a      	beq.n	8002350 <cdcd_open+0x1d4>
 800233a:	4b0d      	ldr	r3, [pc, #52]	@ (8002370 <cdcd_open+0x1f4>)
 800233c:	64bb      	str	r3, [r7, #72]	@ 0x48
 800233e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002340:	681b      	ldr	r3, [r3, #0]
 8002342:	f003 0301 	and.w	r3, r3, #1
 8002346:	2b00      	cmp	r3, #0
 8002348:	d000      	beq.n	800234c <cdcd_open+0x1d0>
 800234a:	be00      	bkpt	0x0000
 800234c:	2300      	movs	r3, #0
 800234e:	e009      	b.n	8002364 <cdcd_open+0x1e8>

    drv_len += 2*sizeof(tusb_desc_endpoint_t);
 8002350:	f8b7 3058 	ldrh.w	r3, [r7, #88]	@ 0x58
 8002354:	330e      	adds	r3, #14
 8002356:	f8a7 3058 	strh.w	r3, [r7, #88]	@ 0x58
  }

  // Prepare for incoming data
  _prep_out_transaction(p_cdc);
 800235a:	6df8      	ldr	r0, [r7, #92]	@ 0x5c
 800235c:	f7ff fd53 	bl	8001e06 <_prep_out_transaction>

  return drv_len;
 8002360:	f8b7 3058 	ldrh.w	r3, [r7, #88]	@ 0x58
}
 8002364:	4618      	mov	r0, r3
 8002366:	3760      	adds	r7, #96	@ 0x60
 8002368:	46bd      	mov	sp, r7
 800236a:	bd80      	pop	{r7, pc}
 800236c:	24000758 	.word	0x24000758
 8002370:	e000edf0 	.word	0xe000edf0

08002374 <cdcd_control_xfer_cb>:

// Invoked when a control transfer occurred on an interface of this class
// Driver response accordingly to the request and the transfer stage (setup/data/ack)
// return false to stall control endpoint (e.g unsupported request)
bool cdcd_control_xfer_cb(uint8_t rhport, uint8_t stage, tusb_control_request_t const * request)
{
 8002374:	b580      	push	{r7, lr}
 8002376:	b08a      	sub	sp, #40	@ 0x28
 8002378:	af00      	add	r7, sp, #0
 800237a:	4603      	mov	r3, r0
 800237c:	603a      	str	r2, [r7, #0]
 800237e:	71fb      	strb	r3, [r7, #7]
 8002380:	460b      	mov	r3, r1
 8002382:	71bb      	strb	r3, [r7, #6]
  // Handle class request only
  TU_VERIFY(request->bmRequestType_bit.type == TUSB_REQ_TYPE_CLASS);
 8002384:	683b      	ldr	r3, [r7, #0]
 8002386:	781b      	ldrb	r3, [r3, #0]
 8002388:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800238c:	b2db      	uxtb	r3, r3
 800238e:	2b20      	cmp	r3, #32
 8002390:	d001      	beq.n	8002396 <cdcd_control_xfer_cb+0x22>
 8002392:	2300      	movs	r3, #0
 8002394:	e0cf      	b.n	8002536 <cdcd_control_xfer_cb+0x1c2>

  uint8_t itf = 0;
 8002396:	2300      	movs	r3, #0
 8002398:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  cdcd_interface_t* p_cdc = _cdcd_itf;
 800239c:	4b68      	ldr	r3, [pc, #416]	@ (8002540 <cdcd_control_xfer_cb+0x1cc>)
 800239e:	623b      	str	r3, [r7, #32]

  // Identify which interface to use
  for ( ; ; itf++, p_cdc++)
  {
    if (itf >= TU_ARRAY_SIZE(_cdcd_itf)) return false;
 80023a0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80023a4:	2b00      	cmp	r3, #0
 80023a6:	d001      	beq.n	80023ac <cdcd_control_xfer_cb+0x38>
 80023a8:	2300      	movs	r3, #0
 80023aa:	e0c4      	b.n	8002536 <cdcd_control_xfer_cb+0x1c2>

    if ( p_cdc->itf_num == request->wIndex ) break;
 80023ac:	6a3b      	ldr	r3, [r7, #32]
 80023ae:	781b      	ldrb	r3, [r3, #0]
 80023b0:	461a      	mov	r2, r3
 80023b2:	683b      	ldr	r3, [r7, #0]
 80023b4:	889b      	ldrh	r3, [r3, #4]
 80023b6:	b29b      	uxth	r3, r3
 80023b8:	429a      	cmp	r2, r3
 80023ba:	d009      	beq.n	80023d0 <cdcd_control_xfer_cb+0x5c>
  for ( ; ; itf++, p_cdc++)
 80023bc:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80023c0:	3301      	adds	r3, #1
 80023c2:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 80023c6:	6a3b      	ldr	r3, [r7, #32]
 80023c8:	f603 0328 	addw	r3, r3, #2088	@ 0x828
 80023cc:	623b      	str	r3, [r7, #32]
    if (itf >= TU_ARRAY_SIZE(_cdcd_itf)) return false;
 80023ce:	e7e7      	b.n	80023a0 <cdcd_control_xfer_cb+0x2c>
    if ( p_cdc->itf_num == request->wIndex ) break;
 80023d0:	bf00      	nop
  }

  switch ( request->bRequest )
 80023d2:	683b      	ldr	r3, [r7, #0]
 80023d4:	785b      	ldrb	r3, [r3, #1]
 80023d6:	3b20      	subs	r3, #32
 80023d8:	2b03      	cmp	r3, #3
 80023da:	f200 80a2 	bhi.w	8002522 <cdcd_control_xfer_cb+0x1ae>
 80023de:	a201      	add	r2, pc, #4	@ (adr r2, 80023e4 <cdcd_control_xfer_cb+0x70>)
 80023e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80023e4:	080023f5 	.word	0x080023f5
 80023e8:	08002431 	.word	0x08002431
 80023ec:	08002449 	.word	0x08002449
 80023f0:	080024f1 	.word	0x080024f1
  {
    case CDC_REQUEST_SET_LINE_CODING:
      if (stage == CONTROL_STAGE_SETUP)
 80023f4:	79bb      	ldrb	r3, [r7, #6]
 80023f6:	2b01      	cmp	r3, #1
 80023f8:	d108      	bne.n	800240c <cdcd_control_xfer_cb+0x98>
      {
        TU_LOG_DRV("  Set Line Coding\r\n");
        tud_control_xfer(rhport, request, &p_cdc->line_coding, sizeof(cdc_line_coding_t));
 80023fa:	6a3b      	ldr	r3, [r7, #32]
 80023fc:	f103 0208 	add.w	r2, r3, #8
 8002400:	79f8      	ldrb	r0, [r7, #7]
 8002402:	2307      	movs	r3, #7
 8002404:	6839      	ldr	r1, [r7, #0]
 8002406:	f004 f9f5 	bl	80067f4 <tud_control_xfer>
      }
      else if ( stage == CONTROL_STAGE_ACK)
      {
        if ( tud_cdc_line_coding_cb ) tud_cdc_line_coding_cb(itf, &p_cdc->line_coding);
      }
    break;
 800240a:	e08c      	b.n	8002526 <cdcd_control_xfer_cb+0x1b2>
      else if ( stage == CONTROL_STAGE_ACK)
 800240c:	79bb      	ldrb	r3, [r7, #6]
 800240e:	2b03      	cmp	r3, #3
 8002410:	f040 8089 	bne.w	8002526 <cdcd_control_xfer_cb+0x1b2>
        if ( tud_cdc_line_coding_cb ) tud_cdc_line_coding_cb(itf, &p_cdc->line_coding);
 8002414:	4b4b      	ldr	r3, [pc, #300]	@ (8002544 <cdcd_control_xfer_cb+0x1d0>)
 8002416:	2b00      	cmp	r3, #0
 8002418:	f000 8085 	beq.w	8002526 <cdcd_control_xfer_cb+0x1b2>
 800241c:	6a3b      	ldr	r3, [r7, #32]
 800241e:	f103 0208 	add.w	r2, r3, #8
 8002422:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8002426:	4611      	mov	r1, r2
 8002428:	4618      	mov	r0, r3
 800242a:	f3af 8000 	nop.w
    break;
 800242e:	e07a      	b.n	8002526 <cdcd_control_xfer_cb+0x1b2>

    case CDC_REQUEST_GET_LINE_CODING:
      if (stage == CONTROL_STAGE_SETUP)
 8002430:	79bb      	ldrb	r3, [r7, #6]
 8002432:	2b01      	cmp	r3, #1
 8002434:	d179      	bne.n	800252a <cdcd_control_xfer_cb+0x1b6>
      {
        TU_LOG_DRV("  Get Line Coding\r\n");
        tud_control_xfer(rhport, request, &p_cdc->line_coding, sizeof(cdc_line_coding_t));
 8002436:	6a3b      	ldr	r3, [r7, #32]
 8002438:	f103 0208 	add.w	r2, r3, #8
 800243c:	79f8      	ldrb	r0, [r7, #7]
 800243e:	2307      	movs	r3, #7
 8002440:	6839      	ldr	r1, [r7, #0]
 8002442:	f004 f9d7 	bl	80067f4 <tud_control_xfer>
      }
    break;
 8002446:	e070      	b.n	800252a <cdcd_control_xfer_cb+0x1b6>

    case CDC_REQUEST_SET_CONTROL_LINE_STATE:
      if (stage == CONTROL_STAGE_SETUP)
 8002448:	79bb      	ldrb	r3, [r7, #6]
 800244a:	2b01      	cmp	r3, #1
 800244c:	d105      	bne.n	800245a <cdcd_control_xfer_cb+0xe6>
      {
        tud_control_status(rhport, request);
 800244e:	79fb      	ldrb	r3, [r7, #7]
 8002450:	6839      	ldr	r1, [r7, #0]
 8002452:	4618      	mov	r0, r3
 8002454:	f004 f95c 	bl	8006710 <tud_control_status>
        TU_LOG_DRV("  Set Control Line State: DTR = %d, RTS = %d\r\n", dtr, rts);

        // Invoke callback
        if ( tud_cdc_line_state_cb ) tud_cdc_line_state_cb(itf, dtr, rts);
      }
    break;
 8002458:	e069      	b.n	800252e <cdcd_control_xfer_cb+0x1ba>
      else if (stage == CONTROL_STAGE_ACK)
 800245a:	79bb      	ldrb	r3, [r7, #6]
 800245c:	2b03      	cmp	r3, #3
 800245e:	d166      	bne.n	800252e <cdcd_control_xfer_cb+0x1ba>
        bool const dtr = tu_bit_test(request->wValue, 0);
 8002460:	683b      	ldr	r3, [r7, #0]
 8002462:	885b      	ldrh	r3, [r3, #2]
 8002464:	b29b      	uxth	r3, r3
 8002466:	613b      	str	r3, [r7, #16]
 8002468:	2300      	movs	r3, #0
 800246a:	73fb      	strb	r3, [r7, #15]
TU_ATTR_ALWAYS_INLINE static inline uint8_t tu_u16_low (uint16_t ui16) { return TU_U16_LOW(ui16); }

//------------- Bits -------------//
TU_ATTR_ALWAYS_INLINE static inline uint32_t tu_bit_set  (uint32_t value, uint8_t pos) { return value | TU_BIT(pos);                  }
TU_ATTR_ALWAYS_INLINE static inline uint32_t tu_bit_clear(uint32_t value, uint8_t pos) { return value & (~TU_BIT(pos));               }
TU_ATTR_ALWAYS_INLINE static inline bool     tu_bit_test (uint32_t value, uint8_t pos) { return (value & TU_BIT(pos)) ? true : false; }
 800246c:	7bfb      	ldrb	r3, [r7, #15]
 800246e:	693a      	ldr	r2, [r7, #16]
 8002470:	fa22 f303 	lsr.w	r3, r2, r3
 8002474:	f003 0301 	and.w	r3, r3, #1
 8002478:	2b00      	cmp	r3, #0
 800247a:	bf14      	ite	ne
 800247c:	2301      	movne	r3, #1
 800247e:	2300      	moveq	r3, #0
 8002480:	b2db      	uxtb	r3, r3
 8002482:	77fb      	strb	r3, [r7, #31]
        bool const rts = tu_bit_test(request->wValue, 1);
 8002484:	683b      	ldr	r3, [r7, #0]
 8002486:	885b      	ldrh	r3, [r3, #2]
 8002488:	b29b      	uxth	r3, r3
 800248a:	61bb      	str	r3, [r7, #24]
 800248c:	2301      	movs	r3, #1
 800248e:	75fb      	strb	r3, [r7, #23]
 8002490:	7dfb      	ldrb	r3, [r7, #23]
 8002492:	69ba      	ldr	r2, [r7, #24]
 8002494:	fa22 f303 	lsr.w	r3, r2, r3
 8002498:	f003 0301 	and.w	r3, r3, #1
 800249c:	2b00      	cmp	r3, #0
 800249e:	bf14      	ite	ne
 80024a0:	2301      	movne	r3, #1
 80024a2:	2300      	moveq	r3, #0
 80024a4:	b2db      	uxtb	r3, r3
 80024a6:	77bb      	strb	r3, [r7, #30]
        p_cdc->line_state = (uint8_t) request->wValue;
 80024a8:	683b      	ldr	r3, [r7, #0]
 80024aa:	885b      	ldrh	r3, [r3, #2]
 80024ac:	b29b      	uxth	r3, r3
 80024ae:	b2da      	uxtb	r2, r3
 80024b0:	6a3b      	ldr	r3, [r7, #32]
 80024b2:	711a      	strb	r2, [r3, #4]
        tu_fifo_set_overwritable(&p_cdc->tx_ff, !dtr);
 80024b4:	6a3b      	ldr	r3, [r7, #32]
 80024b6:	f103 021c 	add.w	r2, r3, #28
 80024ba:	7ffb      	ldrb	r3, [r7, #31]
 80024bc:	2b00      	cmp	r3, #0
 80024be:	bf14      	ite	ne
 80024c0:	2301      	movne	r3, #1
 80024c2:	2300      	moveq	r3, #0
 80024c4:	b2db      	uxtb	r3, r3
 80024c6:	f083 0301 	eor.w	r3, r3, #1
 80024ca:	b2db      	uxtb	r3, r3
 80024cc:	f003 0301 	and.w	r3, r3, #1
 80024d0:	b2db      	uxtb	r3, r3
 80024d2:	4619      	mov	r1, r3
 80024d4:	4610      	mov	r0, r2
 80024d6:	f002 fcca 	bl	8004e6e <tu_fifo_set_overwritable>
        if ( tud_cdc_line_state_cb ) tud_cdc_line_state_cb(itf, dtr, rts);
 80024da:	4b1b      	ldr	r3, [pc, #108]	@ (8002548 <cdcd_control_xfer_cb+0x1d4>)
 80024dc:	2b00      	cmp	r3, #0
 80024de:	d026      	beq.n	800252e <cdcd_control_xfer_cb+0x1ba>
 80024e0:	7fba      	ldrb	r2, [r7, #30]
 80024e2:	7ff9      	ldrb	r1, [r7, #31]
 80024e4:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80024e8:	4618      	mov	r0, r3
 80024ea:	f7fe fec4 	bl	8001276 <tud_cdc_line_state_cb>
    break;
 80024ee:	e01e      	b.n	800252e <cdcd_control_xfer_cb+0x1ba>
    case CDC_REQUEST_SEND_BREAK:
      if (stage == CONTROL_STAGE_SETUP)
 80024f0:	79bb      	ldrb	r3, [r7, #6]
 80024f2:	2b01      	cmp	r3, #1
 80024f4:	d105      	bne.n	8002502 <cdcd_control_xfer_cb+0x18e>
      {
        tud_control_status(rhport, request);
 80024f6:	79fb      	ldrb	r3, [r7, #7]
 80024f8:	6839      	ldr	r1, [r7, #0]
 80024fa:	4618      	mov	r0, r3
 80024fc:	f004 f908 	bl	8006710 <tud_control_status>
      else if (stage == CONTROL_STAGE_ACK)
      {
        TU_LOG_DRV("  Send Break\r\n");
        if ( tud_cdc_send_break_cb ) tud_cdc_send_break_cb(itf, request->wValue);
      }
    break;
 8002500:	e017      	b.n	8002532 <cdcd_control_xfer_cb+0x1be>
      else if (stage == CONTROL_STAGE_ACK)
 8002502:	79bb      	ldrb	r3, [r7, #6]
 8002504:	2b03      	cmp	r3, #3
 8002506:	d114      	bne.n	8002532 <cdcd_control_xfer_cb+0x1be>
        if ( tud_cdc_send_break_cb ) tud_cdc_send_break_cb(itf, request->wValue);
 8002508:	4b10      	ldr	r3, [pc, #64]	@ (800254c <cdcd_control_xfer_cb+0x1d8>)
 800250a:	2b00      	cmp	r3, #0
 800250c:	d011      	beq.n	8002532 <cdcd_control_xfer_cb+0x1be>
 800250e:	683b      	ldr	r3, [r7, #0]
 8002510:	885b      	ldrh	r3, [r3, #2]
 8002512:	b29a      	uxth	r2, r3
 8002514:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8002518:	4611      	mov	r1, r2
 800251a:	4618      	mov	r0, r3
 800251c:	f3af 8000 	nop.w
    break;
 8002520:	e007      	b.n	8002532 <cdcd_control_xfer_cb+0x1be>

    default: return false; // stall unsupported request
 8002522:	2300      	movs	r3, #0
 8002524:	e007      	b.n	8002536 <cdcd_control_xfer_cb+0x1c2>
    break;
 8002526:	bf00      	nop
 8002528:	e004      	b.n	8002534 <cdcd_control_xfer_cb+0x1c0>
    break;
 800252a:	bf00      	nop
 800252c:	e002      	b.n	8002534 <cdcd_control_xfer_cb+0x1c0>
    break;
 800252e:	bf00      	nop
 8002530:	e000      	b.n	8002534 <cdcd_control_xfer_cb+0x1c0>
    break;
 8002532:	bf00      	nop
  }

  return true;
 8002534:	2301      	movs	r3, #1
}
 8002536:	4618      	mov	r0, r3
 8002538:	3728      	adds	r7, #40	@ 0x28
 800253a:	46bd      	mov	sp, r7
 800253c:	bd80      	pop	{r7, pc}
 800253e:	bf00      	nop
 8002540:	24000758 	.word	0x24000758
 8002544:	00000000 	.word	0x00000000
 8002548:	08001277 	.word	0x08001277
 800254c:	00000000 	.word	0x00000000

08002550 <cdcd_xfer_cb>:

bool cdcd_xfer_cb(uint8_t rhport, uint8_t ep_addr, xfer_result_t result, uint32_t xferred_bytes)
{
 8002550:	b580      	push	{r7, lr}
 8002552:	b086      	sub	sp, #24
 8002554:	af00      	add	r7, sp, #0
 8002556:	603b      	str	r3, [r7, #0]
 8002558:	4603      	mov	r3, r0
 800255a:	71fb      	strb	r3, [r7, #7]
 800255c:	460b      	mov	r3, r1
 800255e:	71bb      	strb	r3, [r7, #6]
 8002560:	4613      	mov	r3, r2
 8002562:	717b      	strb	r3, [r7, #5]

  uint8_t itf;
  cdcd_interface_t* p_cdc;

  // Identify which interface to use
  for (itf = 0; itf < CFG_TUD_CDC; itf++)
 8002564:	2300      	movs	r3, #0
 8002566:	75fb      	strb	r3, [r7, #23]
 8002568:	e014      	b.n	8002594 <cdcd_xfer_cb+0x44>
  {
    p_cdc = &_cdcd_itf[itf];
 800256a:	7dfb      	ldrb	r3, [r7, #23]
 800256c:	f640 0228 	movw	r2, #2088	@ 0x828
 8002570:	fb02 f303 	mul.w	r3, r2, r3
 8002574:	4a55      	ldr	r2, [pc, #340]	@ (80026cc <cdcd_xfer_cb+0x17c>)
 8002576:	4413      	add	r3, r2
 8002578:	613b      	str	r3, [r7, #16]
    if ( ( ep_addr == p_cdc->ep_out ) || ( ep_addr == p_cdc->ep_in ) ) break;
 800257a:	693b      	ldr	r3, [r7, #16]
 800257c:	78db      	ldrb	r3, [r3, #3]
 800257e:	79ba      	ldrb	r2, [r7, #6]
 8002580:	429a      	cmp	r2, r3
 8002582:	d00a      	beq.n	800259a <cdcd_xfer_cb+0x4a>
 8002584:	693b      	ldr	r3, [r7, #16]
 8002586:	789b      	ldrb	r3, [r3, #2]
 8002588:	79ba      	ldrb	r2, [r7, #6]
 800258a:	429a      	cmp	r2, r3
 800258c:	d005      	beq.n	800259a <cdcd_xfer_cb+0x4a>
  for (itf = 0; itf < CFG_TUD_CDC; itf++)
 800258e:	7dfb      	ldrb	r3, [r7, #23]
 8002590:	3301      	adds	r3, #1
 8002592:	75fb      	strb	r3, [r7, #23]
 8002594:	7dfb      	ldrb	r3, [r7, #23]
 8002596:	2b00      	cmp	r3, #0
 8002598:	d0e7      	beq.n	800256a <cdcd_xfer_cb+0x1a>
  }
  TU_ASSERT(itf < CFG_TUD_CDC);
 800259a:	7dfb      	ldrb	r3, [r7, #23]
 800259c:	2b00      	cmp	r3, #0
 800259e:	d00a      	beq.n	80025b6 <cdcd_xfer_cb+0x66>
 80025a0:	4b4b      	ldr	r3, [pc, #300]	@ (80026d0 <cdcd_xfer_cb+0x180>)
 80025a2:	60bb      	str	r3, [r7, #8]
 80025a4:	68bb      	ldr	r3, [r7, #8]
 80025a6:	681b      	ldr	r3, [r3, #0]
 80025a8:	f003 0301 	and.w	r3, r3, #1
 80025ac:	2b00      	cmp	r3, #0
 80025ae:	d000      	beq.n	80025b2 <cdcd_xfer_cb+0x62>
 80025b0:	be00      	bkpt	0x0000
 80025b2:	2300      	movs	r3, #0
 80025b4:	e086      	b.n	80026c4 <cdcd_xfer_cb+0x174>

  // Received new data
  if ( ep_addr == p_cdc->ep_out )
 80025b6:	693b      	ldr	r3, [r7, #16]
 80025b8:	78db      	ldrb	r3, [r3, #3]
 80025ba:	79ba      	ldrb	r2, [r7, #6]
 80025bc:	429a      	cmp	r2, r3
 80025be:	d14c      	bne.n	800265a <cdcd_xfer_cb+0x10a>
  {
    tu_fifo_write_n(&p_cdc->rx_ff, p_cdc->epout_buf, (uint16_t) xferred_bytes);
 80025c0:	693b      	ldr	r3, [r7, #16]
 80025c2:	f103 0010 	add.w	r0, r3, #16
 80025c6:	693b      	ldr	r3, [r7, #16]
 80025c8:	f503 6385 	add.w	r3, r3, #1064	@ 0x428
 80025cc:	683a      	ldr	r2, [r7, #0]
 80025ce:	b292      	uxth	r2, r2
 80025d0:	4619      	mov	r1, r3
 80025d2:	f002 fc17 	bl	8004e04 <tu_fifo_write_n>

    // Check for wanted char and invoke callback if needed
    if ( tud_cdc_rx_wanted_cb && (((signed char) p_cdc->wanted_char) != -1) )
 80025d6:	4b3f      	ldr	r3, [pc, #252]	@ (80026d4 <cdcd_xfer_cb+0x184>)
 80025d8:	2b00      	cmp	r3, #0
 80025da:	d029      	beq.n	8002630 <cdcd_xfer_cb+0xe0>
 80025dc:	693b      	ldr	r3, [r7, #16]
 80025de:	795b      	ldrb	r3, [r3, #5]
 80025e0:	2bff      	cmp	r3, #255	@ 0xff
 80025e2:	d025      	beq.n	8002630 <cdcd_xfer_cb+0xe0>
    {
      for ( uint32_t i = 0; i < xferred_bytes; i++ )
 80025e4:	2300      	movs	r3, #0
 80025e6:	60fb      	str	r3, [r7, #12]
 80025e8:	e01e      	b.n	8002628 <cdcd_xfer_cb+0xd8>
      {
        if ( (p_cdc->wanted_char == p_cdc->epout_buf[i]) && !tu_fifo_empty(&p_cdc->rx_ff) )
 80025ea:	693b      	ldr	r3, [r7, #16]
 80025ec:	795a      	ldrb	r2, [r3, #5]
 80025ee:	6939      	ldr	r1, [r7, #16]
 80025f0:	68fb      	ldr	r3, [r7, #12]
 80025f2:	440b      	add	r3, r1
 80025f4:	f503 6385 	add.w	r3, r3, #1064	@ 0x428
 80025f8:	781b      	ldrb	r3, [r3, #0]
 80025fa:	429a      	cmp	r2, r3
 80025fc:	d111      	bne.n	8002622 <cdcd_xfer_cb+0xd2>
 80025fe:	693b      	ldr	r3, [r7, #16]
 8002600:	3310      	adds	r3, #16
 8002602:	4618      	mov	r0, r3
 8002604:	f002 faf8 	bl	8004bf8 <tu_fifo_empty>
 8002608:	4603      	mov	r3, r0
 800260a:	f083 0301 	eor.w	r3, r3, #1
 800260e:	b2db      	uxtb	r3, r3
 8002610:	2b00      	cmp	r3, #0
 8002612:	d006      	beq.n	8002622 <cdcd_xfer_cb+0xd2>
        {
          tud_cdc_rx_wanted_cb(itf, p_cdc->wanted_char);
 8002614:	693b      	ldr	r3, [r7, #16]
 8002616:	795a      	ldrb	r2, [r3, #5]
 8002618:	7dfb      	ldrb	r3, [r7, #23]
 800261a:	4611      	mov	r1, r2
 800261c:	4618      	mov	r0, r3
 800261e:	f3af 8000 	nop.w
      for ( uint32_t i = 0; i < xferred_bytes; i++ )
 8002622:	68fb      	ldr	r3, [r7, #12]
 8002624:	3301      	adds	r3, #1
 8002626:	60fb      	str	r3, [r7, #12]
 8002628:	68fa      	ldr	r2, [r7, #12]
 800262a:	683b      	ldr	r3, [r7, #0]
 800262c:	429a      	cmp	r2, r3
 800262e:	d3dc      	bcc.n	80025ea <cdcd_xfer_cb+0x9a>
        }
      }
    }

    // invoke receive callback (if there is still data)
    if (tud_cdc_rx_cb && !tu_fifo_empty(&p_cdc->rx_ff) ) tud_cdc_rx_cb(itf);
 8002630:	4b29      	ldr	r3, [pc, #164]	@ (80026d8 <cdcd_xfer_cb+0x188>)
 8002632:	2b00      	cmp	r3, #0
 8002634:	d00e      	beq.n	8002654 <cdcd_xfer_cb+0x104>
 8002636:	693b      	ldr	r3, [r7, #16]
 8002638:	3310      	adds	r3, #16
 800263a:	4618      	mov	r0, r3
 800263c:	f002 fadc 	bl	8004bf8 <tu_fifo_empty>
 8002640:	4603      	mov	r3, r0
 8002642:	f083 0301 	eor.w	r3, r3, #1
 8002646:	b2db      	uxtb	r3, r3
 8002648:	2b00      	cmp	r3, #0
 800264a:	d003      	beq.n	8002654 <cdcd_xfer_cb+0x104>
 800264c:	7dfb      	ldrb	r3, [r7, #23]
 800264e:	4618      	mov	r0, r3
 8002650:	f7fe fe20 	bl	8001294 <tud_cdc_rx_cb>

    // prepare for OUT transaction
    _prep_out_transaction(p_cdc);
 8002654:	6938      	ldr	r0, [r7, #16]
 8002656:	f7ff fbd6 	bl	8001e06 <_prep_out_transaction>
  }

  // Data sent to host, we continue to fetch from tx fifo to send.
  // Note: This will cause incorrect baudrate set in line coding.
  //       Though maybe the baudrate is not really important !!!
  if ( ep_addr == p_cdc->ep_in )
 800265a:	693b      	ldr	r3, [r7, #16]
 800265c:	789b      	ldrb	r3, [r3, #2]
 800265e:	79ba      	ldrb	r2, [r7, #6]
 8002660:	429a      	cmp	r2, r3
 8002662:	d12e      	bne.n	80026c2 <cdcd_xfer_cb+0x172>
  {
    // invoke transmit callback to possibly refill tx fifo
    if ( tud_cdc_tx_complete_cb ) tud_cdc_tx_complete_cb(itf);
 8002664:	4b1d      	ldr	r3, [pc, #116]	@ (80026dc <cdcd_xfer_cb+0x18c>)
 8002666:	2b00      	cmp	r3, #0
 8002668:	d003      	beq.n	8002672 <cdcd_xfer_cb+0x122>
 800266a:	7dfb      	ldrb	r3, [r7, #23]
 800266c:	4618      	mov	r0, r3
 800266e:	f3af 8000 	nop.w

    if ( 0 == tud_cdc_n_write_flush(itf) )
 8002672:	7dfb      	ldrb	r3, [r7, #23]
 8002674:	4618      	mov	r0, r3
 8002676:	f7ff fc85 	bl	8001f84 <tud_cdc_n_write_flush>
 800267a:	4603      	mov	r3, r0
 800267c:	2b00      	cmp	r3, #0
 800267e:	d120      	bne.n	80026c2 <cdcd_xfer_cb+0x172>
    {
      // If there is no data left, a ZLP should be sent if
      // xferred_bytes is multiple of EP Packet size and not zero
      if ( !tu_fifo_count(&p_cdc->tx_ff) && xferred_bytes && (0 == (xferred_bytes & (BULK_PACKET_SIZE-1))) )
 8002680:	693b      	ldr	r3, [r7, #16]
 8002682:	331c      	adds	r3, #28
 8002684:	4618      	mov	r0, r3
 8002686:	f002 fa85 	bl	8004b94 <tu_fifo_count>
 800268a:	4603      	mov	r3, r0
 800268c:	2b00      	cmp	r3, #0
 800268e:	d118      	bne.n	80026c2 <cdcd_xfer_cb+0x172>
 8002690:	683b      	ldr	r3, [r7, #0]
 8002692:	2b00      	cmp	r3, #0
 8002694:	d015      	beq.n	80026c2 <cdcd_xfer_cb+0x172>
 8002696:	683b      	ldr	r3, [r7, #0]
 8002698:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800269c:	2b00      	cmp	r3, #0
 800269e:	d110      	bne.n	80026c2 <cdcd_xfer_cb+0x172>
      {
        if ( usbd_edpt_claim(rhport, p_cdc->ep_in) )
 80026a0:	693b      	ldr	r3, [r7, #16]
 80026a2:	789a      	ldrb	r2, [r3, #2]
 80026a4:	79fb      	ldrb	r3, [r7, #7]
 80026a6:	4611      	mov	r1, r2
 80026a8:	4618      	mov	r0, r3
 80026aa:	f003 fe4b 	bl	8006344 <usbd_edpt_claim>
 80026ae:	4603      	mov	r3, r0
 80026b0:	2b00      	cmp	r3, #0
 80026b2:	d006      	beq.n	80026c2 <cdcd_xfer_cb+0x172>
        {
          usbd_edpt_xfer(rhport, p_cdc->ep_in, NULL, 0);
 80026b4:	693b      	ldr	r3, [r7, #16]
 80026b6:	7899      	ldrb	r1, [r3, #2]
 80026b8:	79f8      	ldrb	r0, [r7, #7]
 80026ba:	2300      	movs	r3, #0
 80026bc:	2200      	movs	r2, #0
 80026be:	f003 fe95 	bl	80063ec <usbd_edpt_xfer>
    }
  }

  // nothing to do with notif endpoint for now

  return true;
 80026c2:	2301      	movs	r3, #1
}
 80026c4:	4618      	mov	r0, r3
 80026c6:	3718      	adds	r7, #24
 80026c8:	46bd      	mov	sp, r7
 80026ca:	bd80      	pop	{r7, pc}
 80026cc:	24000758 	.word	0x24000758
 80026d0:	e000edf0 	.word	0xe000edf0
 80026d4:	00000000 	.word	0x00000000
 80026d8:	08001295 	.word	0x08001295
 80026dc:	00000000 	.word	0x00000000

080026e0 <send_csw>:
{
  return tu_bit_test(dir, 7);
}

static inline bool send_csw(uint8_t rhport, mscd_interface_t* p_msc)
{
 80026e0:	b580      	push	{r7, lr}
 80026e2:	b082      	sub	sp, #8
 80026e4:	af00      	add	r7, sp, #0
 80026e6:	4603      	mov	r3, r0
 80026e8:	6039      	str	r1, [r7, #0]
 80026ea:	71fb      	strb	r3, [r7, #7]
  // Data residue is always = host expect - actual transferred
  p_msc->csw.data_residue = p_msc->cbw.total_bytes - p_msc->xferred_len;
 80026ec:	683b      	ldr	r3, [r7, #0]
 80026ee:	689a      	ldr	r2, [r3, #8]
 80026f0:	683b      	ldr	r3, [r7, #0]
 80026f2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80026f4:	1ad2      	subs	r2, r2, r3
 80026f6:	683b      	ldr	r3, [r7, #0]
 80026f8:	629a      	str	r2, [r3, #40]	@ 0x28

  p_msc->stage = MSC_STAGE_STATUS_SENT;
 80026fa:	683b      	ldr	r3, [r7, #0]
 80026fc:	2203      	movs	r2, #3
 80026fe:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  return usbd_edpt_xfer(rhport, p_msc->ep_in , (uint8_t*) &p_msc->csw, sizeof(msc_csw_t));
 8002702:	683b      	ldr	r3, [r7, #0]
 8002704:	f893 102e 	ldrb.w	r1, [r3, #46]	@ 0x2e
 8002708:	683b      	ldr	r3, [r7, #0]
 800270a:	f103 0220 	add.w	r2, r3, #32
 800270e:	79f8      	ldrb	r0, [r7, #7]
 8002710:	230d      	movs	r3, #13
 8002712:	f003 fe6b 	bl	80063ec <usbd_edpt_xfer>
 8002716:	4603      	mov	r3, r0
}
 8002718:	4618      	mov	r0, r3
 800271a:	3708      	adds	r7, #8
 800271c:	46bd      	mov	sp, r7
 800271e:	bd80      	pop	{r7, pc}

08002720 <prepare_cbw>:

static inline bool prepare_cbw(uint8_t rhport, mscd_interface_t* p_msc)
{
 8002720:	b580      	push	{r7, lr}
 8002722:	b082      	sub	sp, #8
 8002724:	af00      	add	r7, sp, #0
 8002726:	4603      	mov	r3, r0
 8002728:	6039      	str	r1, [r7, #0]
 800272a:	71fb      	strb	r3, [r7, #7]
  p_msc->stage = MSC_STAGE_CMD;
 800272c:	683b      	ldr	r3, [r7, #0]
 800272e:	2200      	movs	r2, #0
 8002730:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  return usbd_edpt_xfer(rhport, p_msc->ep_out, (uint8_t*) &p_msc->cbw, sizeof(msc_cbw_t));
 8002734:	683b      	ldr	r3, [r7, #0]
 8002736:	f893 102f 	ldrb.w	r1, [r3, #47]	@ 0x2f
 800273a:	683a      	ldr	r2, [r7, #0]
 800273c:	79f8      	ldrb	r0, [r7, #7]
 800273e:	231f      	movs	r3, #31
 8002740:	f003 fe54 	bl	80063ec <usbd_edpt_xfer>
 8002744:	4603      	mov	r3, r0
}
 8002746:	4618      	mov	r0, r3
 8002748:	3708      	adds	r7, #8
 800274a:	46bd      	mov	sp, r7
 800274c:	bd80      	pop	{r7, pc}

0800274e <fail_scsi_op>:

static void fail_scsi_op(uint8_t rhport, mscd_interface_t* p_msc, uint8_t status)
{
 800274e:	b580      	push	{r7, lr}
 8002750:	b088      	sub	sp, #32
 8002752:	af00      	add	r7, sp, #0
 8002754:	4603      	mov	r3, r0
 8002756:	6039      	str	r1, [r7, #0]
 8002758:	71fb      	strb	r3, [r7, #7]
 800275a:	4613      	mov	r3, r2
 800275c:	71bb      	strb	r3, [r7, #6]
  msc_cbw_t const * p_cbw = &p_msc->cbw;
 800275e:	683b      	ldr	r3, [r7, #0]
 8002760:	61fb      	str	r3, [r7, #28]
  msc_csw_t       * p_csw = &p_msc->csw;
 8002762:	683b      	ldr	r3, [r7, #0]
 8002764:	3320      	adds	r3, #32
 8002766:	61bb      	str	r3, [r7, #24]

  p_csw->status       = status;
 8002768:	69bb      	ldr	r3, [r7, #24]
 800276a:	79ba      	ldrb	r2, [r7, #6]
 800276c:	731a      	strb	r2, [r3, #12]
  p_csw->data_residue = p_msc->cbw.total_bytes - p_msc->xferred_len;
 800276e:	683b      	ldr	r3, [r7, #0]
 8002770:	689a      	ldr	r2, [r3, #8]
 8002772:	683b      	ldr	r3, [r7, #0]
 8002774:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002776:	1ad2      	subs	r2, r2, r3
 8002778:	69bb      	ldr	r3, [r7, #24]
 800277a:	609a      	str	r2, [r3, #8]
  p_msc->stage        = MSC_STAGE_STATUS;
 800277c:	683b      	ldr	r3, [r7, #0]
 800277e:	2202      	movs	r2, #2
 8002780:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30

  // failed but sense key is not set: default to Illegal Request
  if ( p_msc->sense_key == 0 ) tud_msc_set_sense(p_cbw->lun, SCSI_SENSE_ILLEGAL_REQUEST, 0x20, 0x00);
 8002784:	683b      	ldr	r3, [r7, #0]
 8002786:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800278a:	2b00      	cmp	r3, #0
 800278c:	d106      	bne.n	800279c <fail_scsi_op+0x4e>
 800278e:	69fb      	ldr	r3, [r7, #28]
 8002790:	7b58      	ldrb	r0, [r3, #13]
 8002792:	2300      	movs	r3, #0
 8002794:	2220      	movs	r2, #32
 8002796:	2105      	movs	r1, #5
 8002798:	f000 f8d0 	bl	800293c <tud_msc_set_sense>

  // If there is data stage and not yet complete, stall it
  if ( p_cbw->total_bytes && p_csw->data_residue )
 800279c:	69fb      	ldr	r3, [r7, #28]
 800279e:	689b      	ldr	r3, [r3, #8]
 80027a0:	2b00      	cmp	r3, #0
 80027a2:	d028      	beq.n	80027f6 <fail_scsi_op+0xa8>
 80027a4:	69bb      	ldr	r3, [r7, #24]
 80027a6:	689b      	ldr	r3, [r3, #8]
 80027a8:	2b00      	cmp	r3, #0
 80027aa:	d024      	beq.n	80027f6 <fail_scsi_op+0xa8>
  {
    if ( is_data_in(p_cbw->dir) )
 80027ac:	69fb      	ldr	r3, [r7, #28]
 80027ae:	7b1b      	ldrb	r3, [r3, #12]
 80027b0:	75fb      	strb	r3, [r7, #23]
  return tu_bit_test(dir, 7);
 80027b2:	7dfb      	ldrb	r3, [r7, #23]
 80027b4:	613b      	str	r3, [r7, #16]
 80027b6:	2307      	movs	r3, #7
 80027b8:	73fb      	strb	r3, [r7, #15]
 80027ba:	7bfb      	ldrb	r3, [r7, #15]
 80027bc:	693a      	ldr	r2, [r7, #16]
 80027be:	fa22 f303 	lsr.w	r3, r2, r3
 80027c2:	f003 0301 	and.w	r3, r3, #1
 80027c6:	2b00      	cmp	r3, #0
 80027c8:	bf14      	ite	ne
 80027ca:	2301      	movne	r3, #1
 80027cc:	2300      	moveq	r3, #0
 80027ce:	b2db      	uxtb	r3, r3
    if ( is_data_in(p_cbw->dir) )
 80027d0:	2b00      	cmp	r3, #0
 80027d2:	d008      	beq.n	80027e6 <fail_scsi_op+0x98>
    {
      usbd_edpt_stall(rhport, p_msc->ep_in);
 80027d4:	683b      	ldr	r3, [r7, #0]
 80027d6:	f893 202e 	ldrb.w	r2, [r3, #46]	@ 0x2e
 80027da:	79fb      	ldrb	r3, [r7, #7]
 80027dc:	4611      	mov	r1, r2
 80027de:	4618      	mov	r0, r3
 80027e0:	f003 fea8 	bl	8006534 <usbd_edpt_stall>
    else
    {
      usbd_edpt_stall(rhport, p_msc->ep_out);
    }
  }
}
 80027e4:	e007      	b.n	80027f6 <fail_scsi_op+0xa8>
      usbd_edpt_stall(rhport, p_msc->ep_out);
 80027e6:	683b      	ldr	r3, [r7, #0]
 80027e8:	f893 202f 	ldrb.w	r2, [r3, #47]	@ 0x2f
 80027ec:	79fb      	ldrb	r3, [r7, #7]
 80027ee:	4611      	mov	r1, r2
 80027f0:	4618      	mov	r0, r3
 80027f2:	f003 fe9f 	bl	8006534 <usbd_edpt_stall>
}
 80027f6:	bf00      	nop
 80027f8:	3720      	adds	r7, #32
 80027fa:	46bd      	mov	sp, r7
 80027fc:	bd80      	pop	{r7, pc}

080027fe <rdwr10_get_lba>:

static inline uint32_t rdwr10_get_lba(uint8_t const command[])
{
 80027fe:	b480      	push	{r7}
 8002800:	b085      	sub	sp, #20
 8002802:	af00      	add	r7, sp, #0
 8002804:	6078      	str	r0, [r7, #4]
  // use offsetof to avoid pointer to the odd/unaligned address
  uint32_t const lba = tu_unaligned_read32(command + offsetof(scsi_write10_t, lba));
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	3302      	adds	r3, #2
 800280a:	60bb      	str	r3, [r7, #8]

#else

// MCU that could access unaligned memory natively
TU_ATTR_ALWAYS_INLINE static inline uint32_t tu_unaligned_read32(const void *mem) {
  return *((uint32_t const *) mem);
 800280c:	68bb      	ldr	r3, [r7, #8]
 800280e:	681b      	ldr	r3, [r3, #0]
 8002810:	60fb      	str	r3, [r7, #12]

  // lba is in Big Endian
  return tu_ntohl(lba);
 8002812:	68fb      	ldr	r3, [r7, #12]
 8002814:	ba1b      	rev	r3, r3
}
 8002816:	4618      	mov	r0, r3
 8002818:	3714      	adds	r7, #20
 800281a:	46bd      	mov	sp, r7
 800281c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002820:	4770      	bx	lr

08002822 <rdwr10_get_blockcount>:

static inline uint16_t rdwr10_get_blockcount(msc_cbw_t const* cbw)
{
 8002822:	b480      	push	{r7}
 8002824:	b085      	sub	sp, #20
 8002826:	af00      	add	r7, sp, #0
 8002828:	6078      	str	r0, [r7, #4]
  uint16_t const block_count = tu_unaligned_read16(cbw->command + offsetof(scsi_write10_t, block_count));
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	330f      	adds	r3, #15
 800282e:	3307      	adds	r3, #7
 8002830:	60bb      	str	r3, [r7, #8]
}

TU_ATTR_ALWAYS_INLINE static inline uint16_t tu_unaligned_read16(const void *mem) {
  return *((uint16_t const *) mem);
 8002832:	68bb      	ldr	r3, [r7, #8]
 8002834:	881b      	ldrh	r3, [r3, #0]
 8002836:	81fb      	strh	r3, [r7, #14]
  return tu_ntohs(block_count);
 8002838:	89fb      	ldrh	r3, [r7, #14]
 800283a:	ba5b      	rev16	r3, r3
 800283c:	b29b      	uxth	r3, r3
}
 800283e:	4618      	mov	r0, r3
 8002840:	3714      	adds	r7, #20
 8002842:	46bd      	mov	sp, r7
 8002844:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002848:	4770      	bx	lr

0800284a <rdwr10_get_blocksize>:

static inline uint16_t rdwr10_get_blocksize(msc_cbw_t const* cbw)
{
 800284a:	b580      	push	{r7, lr}
 800284c:	b084      	sub	sp, #16
 800284e:	af00      	add	r7, sp, #0
 8002850:	6078      	str	r0, [r7, #4]
  // first extract block count in the command
  uint16_t const block_count = rdwr10_get_blockcount(cbw);
 8002852:	6878      	ldr	r0, [r7, #4]
 8002854:	f7ff ffe5 	bl	8002822 <rdwr10_get_blockcount>
 8002858:	4603      	mov	r3, r0
 800285a:	81fb      	strh	r3, [r7, #14]

  // invalid block count
  if (block_count == 0) return 0;
 800285c:	89fb      	ldrh	r3, [r7, #14]
 800285e:	2b00      	cmp	r3, #0
 8002860:	d101      	bne.n	8002866 <rdwr10_get_blocksize+0x1c>
 8002862:	2300      	movs	r3, #0
 8002864:	e005      	b.n	8002872 <rdwr10_get_blocksize+0x28>

  return (uint16_t) (cbw->total_bytes / block_count);
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	689a      	ldr	r2, [r3, #8]
 800286a:	89fb      	ldrh	r3, [r7, #14]
 800286c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002870:	b29b      	uxth	r3, r3
}
 8002872:	4618      	mov	r0, r3
 8002874:	3710      	adds	r7, #16
 8002876:	46bd      	mov	sp, r7
 8002878:	bd80      	pop	{r7, pc}

0800287a <rdwr10_validate_cmd>:

uint8_t rdwr10_validate_cmd(msc_cbw_t const* cbw)
{
 800287a:	b580      	push	{r7, lr}
 800287c:	b088      	sub	sp, #32
 800287e:	af00      	add	r7, sp, #0
 8002880:	6078      	str	r0, [r7, #4]
  uint8_t status = MSC_CSW_STATUS_PASSED;
 8002882:	2300      	movs	r3, #0
 8002884:	77fb      	strb	r3, [r7, #31]
  uint16_t const block_count = rdwr10_get_blockcount(cbw);
 8002886:	6878      	ldr	r0, [r7, #4]
 8002888:	f7ff ffcb 	bl	8002822 <rdwr10_get_blockcount>
 800288c:	4603      	mov	r3, r0
 800288e:	83bb      	strh	r3, [r7, #28]

  if ( cbw->total_bytes == 0 )
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	689b      	ldr	r3, [r3, #8]
 8002894:	2b00      	cmp	r3, #0
 8002896:	d105      	bne.n	80028a4 <rdwr10_validate_cmd+0x2a>
  {
    if ( block_count )
 8002898:	8bbb      	ldrh	r3, [r7, #28]
 800289a:	2b00      	cmp	r3, #0
 800289c:	d048      	beq.n	8002930 <rdwr10_validate_cmd+0xb6>
    {
      TU_LOG_DRV("  SCSI case 2 (Hn < Di) or case 3 (Hn < Do) \r\n");
      status = MSC_CSW_STATUS_PHASE_ERROR;
 800289e:	2302      	movs	r3, #2
 80028a0:	77fb      	strb	r3, [r7, #31]
 80028a2:	e045      	b.n	8002930 <rdwr10_validate_cmd+0xb6>
    {
      // no data transfer, only exist in complaint test suite
    }
  }else
  {
    if ( SCSI_CMD_READ_10 == cbw->command[0] && !is_data_in(cbw->dir) )
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	7bdb      	ldrb	r3, [r3, #15]
 80028a8:	2b28      	cmp	r3, #40	@ 0x28
 80028aa:	d119      	bne.n	80028e0 <rdwr10_validate_cmd+0x66>
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	7b1b      	ldrb	r3, [r3, #12]
 80028b0:	76fb      	strb	r3, [r7, #27]
  return tu_bit_test(dir, 7);
 80028b2:	7efb      	ldrb	r3, [r7, #27]
 80028b4:	617b      	str	r3, [r7, #20]
 80028b6:	2307      	movs	r3, #7
 80028b8:	74fb      	strb	r3, [r7, #19]
TU_ATTR_ALWAYS_INLINE static inline bool     tu_bit_test (uint32_t value, uint8_t pos) { return (value & TU_BIT(pos)) ? true : false; }
 80028ba:	7cfb      	ldrb	r3, [r7, #19]
 80028bc:	697a      	ldr	r2, [r7, #20]
 80028be:	fa22 f303 	lsr.w	r3, r2, r3
 80028c2:	f003 0301 	and.w	r3, r3, #1
 80028c6:	2b00      	cmp	r3, #0
 80028c8:	bf14      	ite	ne
 80028ca:	2301      	movne	r3, #1
 80028cc:	2300      	moveq	r3, #0
 80028ce:	b2db      	uxtb	r3, r3
    if ( SCSI_CMD_READ_10 == cbw->command[0] && !is_data_in(cbw->dir) )
 80028d0:	f083 0301 	eor.w	r3, r3, #1
 80028d4:	b2db      	uxtb	r3, r3
 80028d6:	2b00      	cmp	r3, #0
 80028d8:	d002      	beq.n	80028e0 <rdwr10_validate_cmd+0x66>
    {
      TU_LOG_DRV("  SCSI case 10 (Ho <> Di)\r\n");
      status = MSC_CSW_STATUS_PHASE_ERROR;
 80028da:	2302      	movs	r3, #2
 80028dc:	77fb      	strb	r3, [r7, #31]
 80028de:	e027      	b.n	8002930 <rdwr10_validate_cmd+0xb6>
    }
    else if ( SCSI_CMD_WRITE_10 == cbw->command[0] && is_data_in(cbw->dir) )
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	7bdb      	ldrb	r3, [r3, #15]
 80028e4:	2b2a      	cmp	r3, #42	@ 0x2a
 80028e6:	d116      	bne.n	8002916 <rdwr10_validate_cmd+0x9c>
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	7b1b      	ldrb	r3, [r3, #12]
 80028ec:	74bb      	strb	r3, [r7, #18]
  return tu_bit_test(dir, 7);
 80028ee:	7cbb      	ldrb	r3, [r7, #18]
 80028f0:	60fb      	str	r3, [r7, #12]
 80028f2:	2307      	movs	r3, #7
 80028f4:	72fb      	strb	r3, [r7, #11]
 80028f6:	7afb      	ldrb	r3, [r7, #11]
 80028f8:	68fa      	ldr	r2, [r7, #12]
 80028fa:	fa22 f303 	lsr.w	r3, r2, r3
 80028fe:	f003 0301 	and.w	r3, r3, #1
 8002902:	2b00      	cmp	r3, #0
 8002904:	bf14      	ite	ne
 8002906:	2301      	movne	r3, #1
 8002908:	2300      	moveq	r3, #0
 800290a:	b2db      	uxtb	r3, r3
    else if ( SCSI_CMD_WRITE_10 == cbw->command[0] && is_data_in(cbw->dir) )
 800290c:	2b00      	cmp	r3, #0
 800290e:	d002      	beq.n	8002916 <rdwr10_validate_cmd+0x9c>
    {
      TU_LOG_DRV("  SCSI case 8 (Hi <> Do)\r\n");
      status = MSC_CSW_STATUS_PHASE_ERROR;
 8002910:	2302      	movs	r3, #2
 8002912:	77fb      	strb	r3, [r7, #31]
 8002914:	e00c      	b.n	8002930 <rdwr10_validate_cmd+0xb6>
    }
    else if ( 0 == block_count )
 8002916:	8bbb      	ldrh	r3, [r7, #28]
 8002918:	2b00      	cmp	r3, #0
 800291a:	d102      	bne.n	8002922 <rdwr10_validate_cmd+0xa8>
    {
      TU_LOG_DRV("  SCSI case 4 Hi > Dn (READ10) or case 9 Ho > Dn (WRITE10) \r\n");
      status =  MSC_CSW_STATUS_FAILED;
 800291c:	2301      	movs	r3, #1
 800291e:	77fb      	strb	r3, [r7, #31]
 8002920:	e006      	b.n	8002930 <rdwr10_validate_cmd+0xb6>
    }
    else if ( cbw->total_bytes / block_count == 0 )
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	689a      	ldr	r2, [r3, #8]
 8002926:	8bbb      	ldrh	r3, [r7, #28]
 8002928:	429a      	cmp	r2, r3
 800292a:	d201      	bcs.n	8002930 <rdwr10_validate_cmd+0xb6>
    {
      TU_LOG_DRV(" Computed block size = 0. SCSI case 7 Hi < Di (READ10) or case 13 Ho < Do (WRIT10)\r\n");
      status = MSC_CSW_STATUS_PHASE_ERROR;
 800292c:	2302      	movs	r3, #2
 800292e:	77fb      	strb	r3, [r7, #31]
    }
  }

  return status;
 8002930:	7ffb      	ldrb	r3, [r7, #31]
}
 8002932:	4618      	mov	r0, r3
 8002934:	3720      	adds	r7, #32
 8002936:	46bd      	mov	sp, r7
 8002938:	bd80      	pop	{r7, pc}
	...

0800293c <tud_msc_set_sense>:

//--------------------------------------------------------------------+
// APPLICATION API
//--------------------------------------------------------------------+
bool tud_msc_set_sense(uint8_t lun, uint8_t sense_key, uint8_t add_sense_code, uint8_t add_sense_qualifier)
{
 800293c:	b490      	push	{r4, r7}
 800293e:	b082      	sub	sp, #8
 8002940:	af00      	add	r7, sp, #0
 8002942:	4604      	mov	r4, r0
 8002944:	4608      	mov	r0, r1
 8002946:	4611      	mov	r1, r2
 8002948:	461a      	mov	r2, r3
 800294a:	4623      	mov	r3, r4
 800294c:	71fb      	strb	r3, [r7, #7]
 800294e:	4603      	mov	r3, r0
 8002950:	71bb      	strb	r3, [r7, #6]
 8002952:	460b      	mov	r3, r1
 8002954:	717b      	strb	r3, [r7, #5]
 8002956:	4613      	mov	r3, r2
 8002958:	713b      	strb	r3, [r7, #4]
  (void) lun;

  _mscd_itf.sense_key           = sense_key;
 800295a:	4a09      	ldr	r2, [pc, #36]	@ (8002980 <tud_msc_set_sense+0x44>)
 800295c:	79bb      	ldrb	r3, [r7, #6]
 800295e:	f882 303c 	strb.w	r3, [r2, #60]	@ 0x3c
  _mscd_itf.add_sense_code      = add_sense_code;
 8002962:	4a07      	ldr	r2, [pc, #28]	@ (8002980 <tud_msc_set_sense+0x44>)
 8002964:	797b      	ldrb	r3, [r7, #5]
 8002966:	f882 303d 	strb.w	r3, [r2, #61]	@ 0x3d
  _mscd_itf.add_sense_qualifier = add_sense_qualifier;
 800296a:	4a05      	ldr	r2, [pc, #20]	@ (8002980 <tud_msc_set_sense+0x44>)
 800296c:	793b      	ldrb	r3, [r7, #4]
 800296e:	f882 303e 	strb.w	r3, [r2, #62]	@ 0x3e

  return true;
 8002972:	2301      	movs	r3, #1
}
 8002974:	4618      	mov	r0, r3
 8002976:	3708      	adds	r7, #8
 8002978:	46bd      	mov	sp, r7
 800297a:	bc90      	pop	{r4, r7}
 800297c:	4770      	bx	lr
 800297e:	bf00      	nop
 8002980:	24000f80 	.word	0x24000f80

08002984 <set_sense_medium_not_present>:

static inline void set_sense_medium_not_present(uint8_t lun)
{
 8002984:	b580      	push	{r7, lr}
 8002986:	b082      	sub	sp, #8
 8002988:	af00      	add	r7, sp, #0
 800298a:	4603      	mov	r3, r0
 800298c:	71fb      	strb	r3, [r7, #7]
  // default sense is NOT READY, MEDIUM NOT PRESENT
  tud_msc_set_sense(lun, SCSI_SENSE_NOT_READY, 0x3A, 0x00);
 800298e:	79f8      	ldrb	r0, [r7, #7]
 8002990:	2300      	movs	r3, #0
 8002992:	223a      	movs	r2, #58	@ 0x3a
 8002994:	2102      	movs	r1, #2
 8002996:	f7ff ffd1 	bl	800293c <tud_msc_set_sense>
}
 800299a:	bf00      	nop
 800299c:	3708      	adds	r7, #8
 800299e:	46bd      	mov	sp, r7
 80029a0:	bd80      	pop	{r7, pc}
	...

080029a4 <mscd_init>:

//--------------------------------------------------------------------+
// USBD Driver API
//--------------------------------------------------------------------+
void mscd_init(void)
{
 80029a4:	b580      	push	{r7, lr}
 80029a6:	af00      	add	r7, sp, #0
  tu_memclr(&_mscd_itf, sizeof(mscd_interface_t));
 80029a8:	2240      	movs	r2, #64	@ 0x40
 80029aa:	2100      	movs	r1, #0
 80029ac:	4802      	ldr	r0, [pc, #8]	@ (80029b8 <mscd_init+0x14>)
 80029ae:	f017 f80d 	bl	80199cc <memset>
}
 80029b2:	bf00      	nop
 80029b4:	bd80      	pop	{r7, pc}
 80029b6:	bf00      	nop
 80029b8:	24000f80 	.word	0x24000f80

080029bc <mscd_reset>:

void mscd_reset(uint8_t rhport)
{
 80029bc:	b580      	push	{r7, lr}
 80029be:	b082      	sub	sp, #8
 80029c0:	af00      	add	r7, sp, #0
 80029c2:	4603      	mov	r3, r0
 80029c4:	71fb      	strb	r3, [r7, #7]
  (void) rhport;
  tu_memclr(&_mscd_itf, sizeof(mscd_interface_t));
 80029c6:	2240      	movs	r2, #64	@ 0x40
 80029c8:	2100      	movs	r1, #0
 80029ca:	4803      	ldr	r0, [pc, #12]	@ (80029d8 <mscd_reset+0x1c>)
 80029cc:	f016 fffe 	bl	80199cc <memset>
}
 80029d0:	bf00      	nop
 80029d2:	3708      	adds	r7, #8
 80029d4:	46bd      	mov	sp, r7
 80029d6:	bd80      	pop	{r7, pc}
 80029d8:	24000f80 	.word	0x24000f80

080029dc <mscd_open>:

uint16_t mscd_open(uint8_t rhport, tusb_desc_interface_t const * itf_desc, uint16_t max_len)
{
 80029dc:	b580      	push	{r7, lr}
 80029de:	b08c      	sub	sp, #48	@ 0x30
 80029e0:	af02      	add	r7, sp, #8
 80029e2:	4603      	mov	r3, r0
 80029e4:	6039      	str	r1, [r7, #0]
 80029e6:	71fb      	strb	r3, [r7, #7]
 80029e8:	4613      	mov	r3, r2
 80029ea:	80bb      	strh	r3, [r7, #4]
  // only support SCSI's BOT protocol
  TU_VERIFY(TUSB_CLASS_MSC    == itf_desc->bInterfaceClass &&
 80029ec:	683b      	ldr	r3, [r7, #0]
 80029ee:	795b      	ldrb	r3, [r3, #5]
 80029f0:	2b08      	cmp	r3, #8
 80029f2:	d107      	bne.n	8002a04 <mscd_open+0x28>
 80029f4:	683b      	ldr	r3, [r7, #0]
 80029f6:	799b      	ldrb	r3, [r3, #6]
 80029f8:	2b06      	cmp	r3, #6
 80029fa:	d103      	bne.n	8002a04 <mscd_open+0x28>
 80029fc:	683b      	ldr	r3, [r7, #0]
 80029fe:	79db      	ldrb	r3, [r3, #7]
 8002a00:	2b50      	cmp	r3, #80	@ 0x50
 8002a02:	d001      	beq.n	8002a08 <mscd_open+0x2c>
 8002a04:	2300      	movs	r3, #0
 8002a06:	e053      	b.n	8002ab0 <mscd_open+0xd4>
            MSC_SUBCLASS_SCSI == itf_desc->bInterfaceSubClass &&
            MSC_PROTOCOL_BOT  == itf_desc->bInterfaceProtocol, 0);

  // msc driver length is fixed
  uint16_t const drv_len = sizeof(tusb_desc_interface_t) + 2*sizeof(tusb_desc_endpoint_t);
 8002a08:	2317      	movs	r3, #23
 8002a0a:	84fb      	strh	r3, [r7, #38]	@ 0x26

  // Max length must be at least 1 interface + 2 endpoints
  TU_ASSERT(max_len >= drv_len, 0);
 8002a0c:	88ba      	ldrh	r2, [r7, #4]
 8002a0e:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8002a10:	429a      	cmp	r2, r3
 8002a12:	d20a      	bcs.n	8002a2a <mscd_open+0x4e>
 8002a14:	4b28      	ldr	r3, [pc, #160]	@ (8002ab8 <mscd_open+0xdc>)
 8002a16:	617b      	str	r3, [r7, #20]
 8002a18:	697b      	ldr	r3, [r7, #20]
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	f003 0301 	and.w	r3, r3, #1
 8002a20:	2b00      	cmp	r3, #0
 8002a22:	d000      	beq.n	8002a26 <mscd_open+0x4a>
 8002a24:	be00      	bkpt	0x0000
 8002a26:	2300      	movs	r3, #0
 8002a28:	e042      	b.n	8002ab0 <mscd_open+0xd4>

  mscd_interface_t * p_msc = &_mscd_itf;
 8002a2a:	4b24      	ldr	r3, [pc, #144]	@ (8002abc <mscd_open+0xe0>)
 8002a2c:	623b      	str	r3, [r7, #32]
  p_msc->itf_num = itf_desc->bInterfaceNumber;
 8002a2e:	683b      	ldr	r3, [r7, #0]
 8002a30:	789a      	ldrb	r2, [r3, #2]
 8002a32:	6a3b      	ldr	r3, [r7, #32]
 8002a34:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
 8002a38:	683b      	ldr	r3, [r7, #0]
 8002a3a:	613b      	str	r3, [r7, #16]
  uint8_t const* desc8 = (uint8_t const*) desc;
 8002a3c:	693b      	ldr	r3, [r7, #16]
 8002a3e:	60fb      	str	r3, [r7, #12]
  return desc8 + desc8[DESC_OFFSET_LEN];
 8002a40:	68fb      	ldr	r3, [r7, #12]
 8002a42:	781b      	ldrb	r3, [r3, #0]
 8002a44:	461a      	mov	r2, r3
 8002a46:	68fb      	ldr	r3, [r7, #12]
 8002a48:	1899      	adds	r1, r3, r2

  // Open endpoint pair
  TU_ASSERT( usbd_open_edpt_pair(rhport, tu_desc_next(itf_desc), 2, TUSB_XFER_BULK, &p_msc->ep_out, &p_msc->ep_in), 0 );
 8002a4a:	6a3b      	ldr	r3, [r7, #32]
 8002a4c:	332f      	adds	r3, #47	@ 0x2f
 8002a4e:	6a3a      	ldr	r2, [r7, #32]
 8002a50:	322e      	adds	r2, #46	@ 0x2e
 8002a52:	79f8      	ldrb	r0, [r7, #7]
 8002a54:	9201      	str	r2, [sp, #4]
 8002a56:	9300      	str	r3, [sp, #0]
 8002a58:	2302      	movs	r3, #2
 8002a5a:	2202      	movs	r2, #2
 8002a5c:	f003 fbc6 	bl	80061ec <usbd_open_edpt_pair>
 8002a60:	4603      	mov	r3, r0
 8002a62:	f083 0301 	eor.w	r3, r3, #1
 8002a66:	b2db      	uxtb	r3, r3
 8002a68:	2b00      	cmp	r3, #0
 8002a6a:	d00a      	beq.n	8002a82 <mscd_open+0xa6>
 8002a6c:	4b12      	ldr	r3, [pc, #72]	@ (8002ab8 <mscd_open+0xdc>)
 8002a6e:	61bb      	str	r3, [r7, #24]
 8002a70:	69bb      	ldr	r3, [r7, #24]
 8002a72:	681b      	ldr	r3, [r3, #0]
 8002a74:	f003 0301 	and.w	r3, r3, #1
 8002a78:	2b00      	cmp	r3, #0
 8002a7a:	d000      	beq.n	8002a7e <mscd_open+0xa2>
 8002a7c:	be00      	bkpt	0x0000
 8002a7e:	2300      	movs	r3, #0
 8002a80:	e016      	b.n	8002ab0 <mscd_open+0xd4>

  // Prepare for Command Block Wrapper
  TU_ASSERT( prepare_cbw(rhport, p_msc), drv_len);
 8002a82:	79fb      	ldrb	r3, [r7, #7]
 8002a84:	6a39      	ldr	r1, [r7, #32]
 8002a86:	4618      	mov	r0, r3
 8002a88:	f7ff fe4a 	bl	8002720 <prepare_cbw>
 8002a8c:	4603      	mov	r3, r0
 8002a8e:	f083 0301 	eor.w	r3, r3, #1
 8002a92:	b2db      	uxtb	r3, r3
 8002a94:	2b00      	cmp	r3, #0
 8002a96:	d00a      	beq.n	8002aae <mscd_open+0xd2>
 8002a98:	4b07      	ldr	r3, [pc, #28]	@ (8002ab8 <mscd_open+0xdc>)
 8002a9a:	61fb      	str	r3, [r7, #28]
 8002a9c:	69fb      	ldr	r3, [r7, #28]
 8002a9e:	681b      	ldr	r3, [r3, #0]
 8002aa0:	f003 0301 	and.w	r3, r3, #1
 8002aa4:	2b00      	cmp	r3, #0
 8002aa6:	d000      	beq.n	8002aaa <mscd_open+0xce>
 8002aa8:	be00      	bkpt	0x0000
 8002aaa:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8002aac:	e000      	b.n	8002ab0 <mscd_open+0xd4>

  return drv_len;
 8002aae:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
}
 8002ab0:	4618      	mov	r0, r3
 8002ab2:	3728      	adds	r7, #40	@ 0x28
 8002ab4:	46bd      	mov	sp, r7
 8002ab6:	bd80      	pop	{r7, pc}
 8002ab8:	e000edf0 	.word	0xe000edf0
 8002abc:	24000f80 	.word	0x24000f80

08002ac0 <proc_bot_reset>:

static void proc_bot_reset(mscd_interface_t* p_msc)
{
 8002ac0:	b480      	push	{r7}
 8002ac2:	b083      	sub	sp, #12
 8002ac4:	af00      	add	r7, sp, #0
 8002ac6:	6078      	str	r0, [r7, #4]
  p_msc->stage       = MSC_STAGE_CMD;
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	2200      	movs	r2, #0
 8002acc:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  p_msc->total_len   = 0;
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	2200      	movs	r2, #0
 8002ad4:	635a      	str	r2, [r3, #52]	@ 0x34
  p_msc->xferred_len = 0;
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	2200      	movs	r2, #0
 8002ada:	639a      	str	r2, [r3, #56]	@ 0x38

  p_msc->sense_key           = 0;
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	2200      	movs	r2, #0
 8002ae0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  p_msc->add_sense_code      = 0;
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	2200      	movs	r2, #0
 8002ae8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  p_msc->add_sense_qualifier = 0;
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	2200      	movs	r2, #0
 8002af0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
}
 8002af4:	bf00      	nop
 8002af6:	370c      	adds	r7, #12
 8002af8:	46bd      	mov	sp, r7
 8002afa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002afe:	4770      	bx	lr

08002b00 <mscd_control_xfer_cb>:

// Invoked when a control transfer occurred on an interface of this class
// Driver response accordingly to the request and the transfer stage (setup/data/ack)
// return false to stall control endpoint (e.g unsupported request)
bool mscd_control_xfer_cb(uint8_t rhport, uint8_t stage, tusb_control_request_t const * request)
{
 8002b00:	b580      	push	{r7, lr}
 8002b02:	b088      	sub	sp, #32
 8002b04:	af00      	add	r7, sp, #0
 8002b06:	4603      	mov	r3, r0
 8002b08:	603a      	str	r2, [r7, #0]
 8002b0a:	71fb      	strb	r3, [r7, #7]
 8002b0c:	460b      	mov	r3, r1
 8002b0e:	71bb      	strb	r3, [r7, #6]
  // nothing to do with DATA & ACK stage
  if (stage != CONTROL_STAGE_SETUP) return true;
 8002b10:	79bb      	ldrb	r3, [r7, #6]
 8002b12:	2b01      	cmp	r3, #1
 8002b14:	d001      	beq.n	8002b1a <mscd_control_xfer_cb+0x1a>
 8002b16:	2301      	movs	r3, #1
 8002b18:	e0e6      	b.n	8002ce8 <mscd_control_xfer_cb+0x1e8>

  mscd_interface_t* p_msc = &_mscd_itf;
 8002b1a:	4b75      	ldr	r3, [pc, #468]	@ (8002cf0 <mscd_control_xfer_cb+0x1f0>)
 8002b1c:	61fb      	str	r3, [r7, #28]

  // Clear Endpoint Feature (stall) for recovery
  if ( TUSB_REQ_TYPE_STANDARD     == request->bmRequestType_bit.type      &&
 8002b1e:	683b      	ldr	r3, [r7, #0]
 8002b20:	781b      	ldrb	r3, [r3, #0]
 8002b22:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8002b26:	b2db      	uxtb	r3, r3
 8002b28:	2b00      	cmp	r3, #0
 8002b2a:	f040 8090 	bne.w	8002c4e <mscd_control_xfer_cb+0x14e>
       TUSB_REQ_RCPT_ENDPOINT     == request->bmRequestType_bit.recipient &&
 8002b2e:	683b      	ldr	r3, [r7, #0]
 8002b30:	781b      	ldrb	r3, [r3, #0]
 8002b32:	f003 031f 	and.w	r3, r3, #31
 8002b36:	b2db      	uxtb	r3, r3
  if ( TUSB_REQ_TYPE_STANDARD     == request->bmRequestType_bit.type      &&
 8002b38:	2b02      	cmp	r3, #2
 8002b3a:	f040 8088 	bne.w	8002c4e <mscd_control_xfer_cb+0x14e>
       TUSB_REQ_CLEAR_FEATURE     == request->bRequest                    &&
 8002b3e:	683b      	ldr	r3, [r7, #0]
 8002b40:	785b      	ldrb	r3, [r3, #1]
       TUSB_REQ_RCPT_ENDPOINT     == request->bmRequestType_bit.recipient &&
 8002b42:	2b01      	cmp	r3, #1
 8002b44:	f040 8083 	bne.w	8002c4e <mscd_control_xfer_cb+0x14e>
       TUSB_REQ_FEATURE_EDPT_HALT == request->wValue )
 8002b48:	683b      	ldr	r3, [r7, #0]
 8002b4a:	885b      	ldrh	r3, [r3, #2]
 8002b4c:	b29b      	uxth	r3, r3
       TUSB_REQ_CLEAR_FEATURE     == request->bRequest                    &&
 8002b4e:	2b00      	cmp	r3, #0
 8002b50:	d17d      	bne.n	8002c4e <mscd_control_xfer_cb+0x14e>
  {
    uint8_t const ep_addr = tu_u16_low(request->wIndex);
 8002b52:	683b      	ldr	r3, [r7, #0]
 8002b54:	889b      	ldrh	r3, [r3, #4]
 8002b56:	b29b      	uxth	r3, r3
 8002b58:	81fb      	strh	r3, [r7, #14]
TU_ATTR_ALWAYS_INLINE static inline uint8_t tu_u16_low (uint16_t ui16) { return TU_U16_LOW(ui16); }
 8002b5a:	89fb      	ldrh	r3, [r7, #14]
 8002b5c:	b2db      	uxtb	r3, r3
 8002b5e:	76fb      	strb	r3, [r7, #27]

    if ( p_msc->stage == MSC_STAGE_NEED_RESET )
 8002b60:	69fb      	ldr	r3, [r7, #28]
 8002b62:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8002b66:	2b04      	cmp	r3, #4
 8002b68:	d106      	bne.n	8002b78 <mscd_control_xfer_cb+0x78>
    {
      // reset recovery is required to recover from this stage
      // Clear Stall request cannot resolve this -> continue to stall endpoint
      usbd_edpt_stall(rhport, ep_addr);
 8002b6a:	7efa      	ldrb	r2, [r7, #27]
 8002b6c:	79fb      	ldrb	r3, [r7, #7]
 8002b6e:	4611      	mov	r1, r2
 8002b70:	4618      	mov	r0, r3
 8002b72:	f003 fcdf 	bl	8006534 <usbd_edpt_stall>
 8002b76:	e068      	b.n	8002c4a <mscd_control_xfer_cb+0x14a>
    }
    else
    {
      if ( ep_addr == p_msc->ep_in )
 8002b78:	69fb      	ldr	r3, [r7, #28]
 8002b7a:	f893 302e 	ldrb.w	r3, [r3, #46]	@ 0x2e
 8002b7e:	7efa      	ldrb	r2, [r7, #27]
 8002b80:	429a      	cmp	r2, r3
 8002b82:	d11a      	bne.n	8002bba <mscd_control_xfer_cb+0xba>
      {
        if ( p_msc->stage == MSC_STAGE_STATUS )
 8002b84:	69fb      	ldr	r3, [r7, #28]
 8002b86:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8002b8a:	2b02      	cmp	r3, #2
 8002b8c:	d15d      	bne.n	8002c4a <mscd_control_xfer_cb+0x14a>
        {
          // resume sending SCSI status if we are in this stage previously before stalled
          TU_ASSERT( send_csw(rhport, p_msc) );
 8002b8e:	79fb      	ldrb	r3, [r7, #7]
 8002b90:	69f9      	ldr	r1, [r7, #28]
 8002b92:	4618      	mov	r0, r3
 8002b94:	f7ff fda4 	bl	80026e0 <send_csw>
 8002b98:	4603      	mov	r3, r0
 8002b9a:	f083 0301 	eor.w	r3, r3, #1
 8002b9e:	b2db      	uxtb	r3, r3
 8002ba0:	2b00      	cmp	r3, #0
 8002ba2:	d052      	beq.n	8002c4a <mscd_control_xfer_cb+0x14a>
 8002ba4:	4b53      	ldr	r3, [pc, #332]	@ (8002cf4 <mscd_control_xfer_cb+0x1f4>)
 8002ba6:	613b      	str	r3, [r7, #16]
 8002ba8:	693b      	ldr	r3, [r7, #16]
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	f003 0301 	and.w	r3, r3, #1
 8002bb0:	2b00      	cmp	r3, #0
 8002bb2:	d000      	beq.n	8002bb6 <mscd_control_xfer_cb+0xb6>
 8002bb4:	be00      	bkpt	0x0000
 8002bb6:	2300      	movs	r3, #0
 8002bb8:	e096      	b.n	8002ce8 <mscd_control_xfer_cb+0x1e8>
        }
      }
      else if ( ep_addr == p_msc->ep_out )
 8002bba:	69fb      	ldr	r3, [r7, #28]
 8002bbc:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 8002bc0:	7efa      	ldrb	r2, [r7, #27]
 8002bc2:	429a      	cmp	r2, r3
 8002bc4:	d141      	bne.n	8002c4a <mscd_control_xfer_cb+0x14a>
      {
        if ( p_msc->stage == MSC_STAGE_CMD )
 8002bc6:	69fb      	ldr	r3, [r7, #28]
 8002bc8:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8002bcc:	2b00      	cmp	r3, #0
 8002bce:	d13c      	bne.n	8002c4a <mscd_control_xfer_cb+0x14a>
        {
          // part of reset recovery (probably due to invalid CBW) -> prepare for new command
          // Note: skip if already queued previously
          if ( usbd_edpt_ready(rhport, p_msc->ep_out) )
 8002bd0:	69fb      	ldr	r3, [r7, #28]
 8002bd2:	f893 202f 	ldrb.w	r2, [r3, #47]	@ 0x2f
 8002bd6:	79fb      	ldrb	r3, [r7, #7]
 8002bd8:	737b      	strb	r3, [r7, #13]
 8002bda:	4613      	mov	r3, r2
 8002bdc:	733b      	strb	r3, [r7, #12]
bool usbd_edpt_iso_activate(uint8_t rhport,  tusb_desc_endpoint_t const * p_endpoint_desc);

// Check if endpoint is ready (not busy and not stalled)
TU_ATTR_ALWAYS_INLINE static inline
bool usbd_edpt_ready(uint8_t rhport, uint8_t ep_addr) {
  return !usbd_edpt_busy(rhport, ep_addr) && !usbd_edpt_stalled(rhport, ep_addr);
 8002bde:	7b3a      	ldrb	r2, [r7, #12]
 8002be0:	7b7b      	ldrb	r3, [r7, #13]
 8002be2:	4611      	mov	r1, r2
 8002be4:	4618      	mov	r0, r3
 8002be6:	f003 fc77 	bl	80064d8 <usbd_edpt_busy>
 8002bea:	4603      	mov	r3, r0
 8002bec:	f083 0301 	eor.w	r3, r3, #1
 8002bf0:	b2db      	uxtb	r3, r3
 8002bf2:	2b00      	cmp	r3, #0
 8002bf4:	d00d      	beq.n	8002c12 <mscd_control_xfer_cb+0x112>
 8002bf6:	7b3a      	ldrb	r2, [r7, #12]
 8002bf8:	7b7b      	ldrb	r3, [r7, #13]
 8002bfa:	4611      	mov	r1, r2
 8002bfc:	4618      	mov	r0, r3
 8002bfe:	f003 fd31 	bl	8006664 <usbd_edpt_stalled>
 8002c02:	4603      	mov	r3, r0
 8002c04:	f083 0301 	eor.w	r3, r3, #1
 8002c08:	b2db      	uxtb	r3, r3
 8002c0a:	2b00      	cmp	r3, #0
 8002c0c:	d001      	beq.n	8002c12 <mscd_control_xfer_cb+0x112>
 8002c0e:	2301      	movs	r3, #1
 8002c10:	e000      	b.n	8002c14 <mscd_control_xfer_cb+0x114>
 8002c12:	2300      	movs	r3, #0
 8002c14:	f003 0301 	and.w	r3, r3, #1
 8002c18:	b2db      	uxtb	r3, r3
 8002c1a:	2b00      	cmp	r3, #0
 8002c1c:	d015      	beq.n	8002c4a <mscd_control_xfer_cb+0x14a>
          {
            TU_ASSERT( prepare_cbw(rhport, p_msc) );
 8002c1e:	79fb      	ldrb	r3, [r7, #7]
 8002c20:	69f9      	ldr	r1, [r7, #28]
 8002c22:	4618      	mov	r0, r3
 8002c24:	f7ff fd7c 	bl	8002720 <prepare_cbw>
 8002c28:	4603      	mov	r3, r0
 8002c2a:	f083 0301 	eor.w	r3, r3, #1
 8002c2e:	b2db      	uxtb	r3, r3
 8002c30:	2b00      	cmp	r3, #0
 8002c32:	d00a      	beq.n	8002c4a <mscd_control_xfer_cb+0x14a>
 8002c34:	4b2f      	ldr	r3, [pc, #188]	@ (8002cf4 <mscd_control_xfer_cb+0x1f4>)
 8002c36:	617b      	str	r3, [r7, #20]
 8002c38:	697b      	ldr	r3, [r7, #20]
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	f003 0301 	and.w	r3, r3, #1
 8002c40:	2b00      	cmp	r3, #0
 8002c42:	d000      	beq.n	8002c46 <mscd_control_xfer_cb+0x146>
 8002c44:	be00      	bkpt	0x0000
 8002c46:	2300      	movs	r3, #0
 8002c48:	e04e      	b.n	8002ce8 <mscd_control_xfer_cb+0x1e8>
          }
        }
      }
    }

    return true;
 8002c4a:	2301      	movs	r3, #1
 8002c4c:	e04c      	b.n	8002ce8 <mscd_control_xfer_cb+0x1e8>
  }

  // From this point only handle class request only
  TU_VERIFY(request->bmRequestType_bit.type == TUSB_REQ_TYPE_CLASS);
 8002c4e:	683b      	ldr	r3, [r7, #0]
 8002c50:	781b      	ldrb	r3, [r3, #0]
 8002c52:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8002c56:	b2db      	uxtb	r3, r3
 8002c58:	2b20      	cmp	r3, #32
 8002c5a:	d001      	beq.n	8002c60 <mscd_control_xfer_cb+0x160>
 8002c5c:	2300      	movs	r3, #0
 8002c5e:	e043      	b.n	8002ce8 <mscd_control_xfer_cb+0x1e8>

  switch ( request->bRequest )
 8002c60:	683b      	ldr	r3, [r7, #0]
 8002c62:	785b      	ldrb	r3, [r3, #1]
 8002c64:	2bfe      	cmp	r3, #254	@ 0xfe
 8002c66:	d016      	beq.n	8002c96 <mscd_control_xfer_cb+0x196>
 8002c68:	2bff      	cmp	r3, #255	@ 0xff
 8002c6a:	d13a      	bne.n	8002ce2 <mscd_control_xfer_cb+0x1e2>
  {
    case MSC_REQ_RESET:
      TU_LOG_DRV("  MSC BOT Reset\r\n");
      TU_VERIFY(request->wValue == 0 && request->wLength == 0);
 8002c6c:	683b      	ldr	r3, [r7, #0]
 8002c6e:	885b      	ldrh	r3, [r3, #2]
 8002c70:	b29b      	uxth	r3, r3
 8002c72:	2b00      	cmp	r3, #0
 8002c74:	d104      	bne.n	8002c80 <mscd_control_xfer_cb+0x180>
 8002c76:	683b      	ldr	r3, [r7, #0]
 8002c78:	88db      	ldrh	r3, [r3, #6]
 8002c7a:	b29b      	uxth	r3, r3
 8002c7c:	2b00      	cmp	r3, #0
 8002c7e:	d001      	beq.n	8002c84 <mscd_control_xfer_cb+0x184>
 8002c80:	2300      	movs	r3, #0
 8002c82:	e031      	b.n	8002ce8 <mscd_control_xfer_cb+0x1e8>

      // driver state reset
      proc_bot_reset(p_msc);
 8002c84:	69f8      	ldr	r0, [r7, #28]
 8002c86:	f7ff ff1b 	bl	8002ac0 <proc_bot_reset>

      tud_control_status(rhport, request);
 8002c8a:	79fb      	ldrb	r3, [r7, #7]
 8002c8c:	6839      	ldr	r1, [r7, #0]
 8002c8e:	4618      	mov	r0, r3
 8002c90:	f003 fd3e 	bl	8006710 <tud_control_status>
    break;
 8002c94:	e027      	b.n	8002ce6 <mscd_control_xfer_cb+0x1e6>

    case MSC_REQ_GET_MAX_LUN:
    {
      TU_LOG_DRV("  MSC Get Max Lun\r\n");
      TU_VERIFY(request->wValue == 0 && request->wLength == 1);
 8002c96:	683b      	ldr	r3, [r7, #0]
 8002c98:	885b      	ldrh	r3, [r3, #2]
 8002c9a:	b29b      	uxth	r3, r3
 8002c9c:	2b00      	cmp	r3, #0
 8002c9e:	d104      	bne.n	8002caa <mscd_control_xfer_cb+0x1aa>
 8002ca0:	683b      	ldr	r3, [r7, #0]
 8002ca2:	88db      	ldrh	r3, [r3, #6]
 8002ca4:	b29b      	uxth	r3, r3
 8002ca6:	2b01      	cmp	r3, #1
 8002ca8:	d001      	beq.n	8002cae <mscd_control_xfer_cb+0x1ae>
 8002caa:	2300      	movs	r3, #0
 8002cac:	e01c      	b.n	8002ce8 <mscd_control_xfer_cb+0x1e8>

      uint8_t maxlun = 1;
 8002cae:	2301      	movs	r3, #1
 8002cb0:	72fb      	strb	r3, [r7, #11]
      if (tud_msc_get_maxlun_cb) maxlun = tud_msc_get_maxlun_cb();
 8002cb2:	4b11      	ldr	r3, [pc, #68]	@ (8002cf8 <mscd_control_xfer_cb+0x1f8>)
 8002cb4:	2b00      	cmp	r3, #0
 8002cb6:	d003      	beq.n	8002cc0 <mscd_control_xfer_cb+0x1c0>
 8002cb8:	f3af 8000 	nop.w
 8002cbc:	4603      	mov	r3, r0
 8002cbe:	72fb      	strb	r3, [r7, #11]
      TU_VERIFY(maxlun);
 8002cc0:	7afb      	ldrb	r3, [r7, #11]
 8002cc2:	2b00      	cmp	r3, #0
 8002cc4:	d101      	bne.n	8002cca <mscd_control_xfer_cb+0x1ca>
 8002cc6:	2300      	movs	r3, #0
 8002cc8:	e00e      	b.n	8002ce8 <mscd_control_xfer_cb+0x1e8>

      // MAX LUN is minus 1 by specs
      maxlun--;
 8002cca:	7afb      	ldrb	r3, [r7, #11]
 8002ccc:	3b01      	subs	r3, #1
 8002cce:	b2db      	uxtb	r3, r3
 8002cd0:	72fb      	strb	r3, [r7, #11]

      tud_control_xfer(rhport, request, &maxlun, 1);
 8002cd2:	f107 020b 	add.w	r2, r7, #11
 8002cd6:	79f8      	ldrb	r0, [r7, #7]
 8002cd8:	2301      	movs	r3, #1
 8002cda:	6839      	ldr	r1, [r7, #0]
 8002cdc:	f003 fd8a 	bl	80067f4 <tud_control_xfer>
    }
    break;
 8002ce0:	e001      	b.n	8002ce6 <mscd_control_xfer_cb+0x1e6>

    default: return false; // stall unsupported request
 8002ce2:	2300      	movs	r3, #0
 8002ce4:	e000      	b.n	8002ce8 <mscd_control_xfer_cb+0x1e8>
  }

  return true;
 8002ce6:	2301      	movs	r3, #1
}
 8002ce8:	4618      	mov	r0, r3
 8002cea:	3720      	adds	r7, #32
 8002cec:	46bd      	mov	sp, r7
 8002cee:	bd80      	pop	{r7, pc}
 8002cf0:	24000f80 	.word	0x24000f80
 8002cf4:	e000edf0 	.word	0xe000edf0
 8002cf8:	00000000 	.word	0x00000000

08002cfc <mscd_xfer_cb>:

bool mscd_xfer_cb(uint8_t rhport, uint8_t ep_addr, xfer_result_t event, uint32_t xferred_bytes)
{
 8002cfc:	b580      	push	{r7, lr}
 8002cfe:	b098      	sub	sp, #96	@ 0x60
 8002d00:	af00      	add	r7, sp, #0
 8002d02:	603b      	str	r3, [r7, #0]
 8002d04:	4603      	mov	r3, r0
 8002d06:	71fb      	strb	r3, [r7, #7]
 8002d08:	460b      	mov	r3, r1
 8002d0a:	71bb      	strb	r3, [r7, #6]
 8002d0c:	4613      	mov	r3, r2
 8002d0e:	717b      	strb	r3, [r7, #5]
  (void) event;

  mscd_interface_t* p_msc = &_mscd_itf;
 8002d10:	4b94      	ldr	r3, [pc, #592]	@ (8002f64 <mscd_xfer_cb+0x268>)
 8002d12:	65bb      	str	r3, [r7, #88]	@ 0x58
  msc_cbw_t const * p_cbw = &p_msc->cbw;
 8002d14:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8002d16:	657b      	str	r3, [r7, #84]	@ 0x54
  msc_csw_t       * p_csw = &p_msc->csw;
 8002d18:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8002d1a:	3320      	adds	r3, #32
 8002d1c:	653b      	str	r3, [r7, #80]	@ 0x50

  switch (p_msc->stage)
 8002d1e:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8002d20:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8002d24:	2b03      	cmp	r3, #3
 8002d26:	f200 8205 	bhi.w	8003134 <mscd_xfer_cb+0x438>
 8002d2a:	a201      	add	r2, pc, #4	@ (adr r2, 8002d30 <mscd_xfer_cb+0x34>)
 8002d2c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002d30:	08002d41 	.word	0x08002d41
 8002d34:	08002fc9 	.word	0x08002fc9
 8002d38:	08003135 	.word	0x08003135
 8002d3c:	080030a3 	.word	0x080030a3
  {
    case MSC_STAGE_CMD:
      //------------- new CBW received -------------//
      // Complete IN while waiting for CMD is usually Status of previous SCSI op, ignore it
      if(ep_addr != p_msc->ep_out) return true;
 8002d40:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8002d42:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 8002d46:	79ba      	ldrb	r2, [r7, #6]
 8002d48:	429a      	cmp	r2, r3
 8002d4a:	d001      	beq.n	8002d50 <mscd_xfer_cb+0x54>
 8002d4c:	2301      	movs	r3, #1
 8002d4e:	e245      	b.n	80031dc <mscd_xfer_cb+0x4e0>

      if ( !(xferred_bytes == sizeof(msc_cbw_t) && p_cbw->signature == MSC_CBW_SIGNATURE) )
 8002d50:	683b      	ldr	r3, [r7, #0]
 8002d52:	2b1f      	cmp	r3, #31
 8002d54:	d104      	bne.n	8002d60 <mscd_xfer_cb+0x64>
 8002d56:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002d58:	681b      	ldr	r3, [r3, #0]
 8002d5a:	4a83      	ldr	r2, [pc, #524]	@ (8002f68 <mscd_xfer_cb+0x26c>)
 8002d5c:	4293      	cmp	r3, r2
 8002d5e:	d015      	beq.n	8002d8c <mscd_xfer_cb+0x90>
      {
        TU_LOG_DRV("  SCSI CBW is not valid\r\n");

        // BOT 6.6.1 If CBW is not valid stall both endpoints until reset recovery
        p_msc->stage = MSC_STAGE_NEED_RESET;
 8002d60:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8002d62:	2204      	movs	r2, #4
 8002d64:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30

        // invalid CBW stall both endpoints
        usbd_edpt_stall(rhport, p_msc->ep_in);
 8002d68:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8002d6a:	f893 202e 	ldrb.w	r2, [r3, #46]	@ 0x2e
 8002d6e:	79fb      	ldrb	r3, [r7, #7]
 8002d70:	4611      	mov	r1, r2
 8002d72:	4618      	mov	r0, r3
 8002d74:	f003 fbde 	bl	8006534 <usbd_edpt_stall>
        usbd_edpt_stall(rhport, p_msc->ep_out);
 8002d78:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8002d7a:	f893 202f 	ldrb.w	r2, [r3, #47]	@ 0x2f
 8002d7e:	79fb      	ldrb	r3, [r7, #7]
 8002d80:	4611      	mov	r1, r2
 8002d82:	4618      	mov	r0, r3
 8002d84:	f003 fbd6 	bl	8006534 <usbd_edpt_stall>

        return false;
 8002d88:	2300      	movs	r3, #0
 8002d8a:	e227      	b.n	80031dc <mscd_xfer_cb+0x4e0>
      }

      TU_LOG_DRV("  SCSI Command [Lun%u]: %s\r\n", p_cbw->lun, tu_lookup_find(&_msc_scsi_cmd_table, p_cbw->command[0]));
      //TU_LOG_MEM(MSC_DEBUG, p_cbw, xferred_bytes, 2);

      p_csw->signature    = MSC_CSW_SIGNATURE;
 8002d8c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8002d8e:	2200      	movs	r2, #0
 8002d90:	f042 0255 	orr.w	r2, r2, #85	@ 0x55
 8002d94:	701a      	strb	r2, [r3, #0]
 8002d96:	2200      	movs	r2, #0
 8002d98:	f042 0253 	orr.w	r2, r2, #83	@ 0x53
 8002d9c:	705a      	strb	r2, [r3, #1]
 8002d9e:	2200      	movs	r2, #0
 8002da0:	f042 0242 	orr.w	r2, r2, #66	@ 0x42
 8002da4:	709a      	strb	r2, [r3, #2]
 8002da6:	2200      	movs	r2, #0
 8002da8:	f042 0253 	orr.w	r2, r2, #83	@ 0x53
 8002dac:	70da      	strb	r2, [r3, #3]
      p_csw->tag          = p_cbw->tag;
 8002dae:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002db0:	685a      	ldr	r2, [r3, #4]
 8002db2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8002db4:	605a      	str	r2, [r3, #4]
      p_csw->data_residue = 0;
 8002db6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8002db8:	2200      	movs	r2, #0
 8002dba:	721a      	strb	r2, [r3, #8]
 8002dbc:	2200      	movs	r2, #0
 8002dbe:	725a      	strb	r2, [r3, #9]
 8002dc0:	2200      	movs	r2, #0
 8002dc2:	729a      	strb	r2, [r3, #10]
 8002dc4:	2200      	movs	r2, #0
 8002dc6:	72da      	strb	r2, [r3, #11]
      p_csw->status       = MSC_CSW_STATUS_PASSED;
 8002dc8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8002dca:	2200      	movs	r2, #0
 8002dcc:	731a      	strb	r2, [r3, #12]

      /*------------- Parse command and prepare DATA -------------*/
      p_msc->stage = MSC_STAGE_DATA;
 8002dce:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8002dd0:	2201      	movs	r2, #1
 8002dd2:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
      p_msc->total_len = p_cbw->total_bytes;
 8002dd6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002dd8:	689a      	ldr	r2, [r3, #8]
 8002dda:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8002ddc:	635a      	str	r2, [r3, #52]	@ 0x34
      p_msc->xferred_len = 0;
 8002dde:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8002de0:	2200      	movs	r2, #0
 8002de2:	639a      	str	r2, [r3, #56]	@ 0x38

      // Read10 or Write10
      if ( (SCSI_CMD_READ_10 == p_cbw->command[0]) || (SCSI_CMD_WRITE_10 == p_cbw->command[0]) )
 8002de4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002de6:	7bdb      	ldrb	r3, [r3, #15]
 8002de8:	2b28      	cmp	r3, #40	@ 0x28
 8002dea:	d003      	beq.n	8002df4 <mscd_xfer_cb+0xf8>
 8002dec:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002dee:	7bdb      	ldrb	r3, [r3, #15]
 8002df0:	2b2a      	cmp	r3, #42	@ 0x2a
 8002df2:	d12a      	bne.n	8002e4a <mscd_xfer_cb+0x14e>
      {
        uint8_t const status = rdwr10_validate_cmd(p_cbw);
 8002df4:	6d78      	ldr	r0, [r7, #84]	@ 0x54
 8002df6:	f7ff fd40 	bl	800287a <rdwr10_validate_cmd>
 8002dfa:	4603      	mov	r3, r0
 8002dfc:	f887 303b 	strb.w	r3, [r7, #59]	@ 0x3b

        if ( status != MSC_CSW_STATUS_PASSED)
 8002e00:	f897 303b 	ldrb.w	r3, [r7, #59]	@ 0x3b
 8002e04:	2b00      	cmp	r3, #0
 8002e06:	d007      	beq.n	8002e18 <mscd_xfer_cb+0x11c>
        {
          fail_scsi_op(rhport, p_msc, status);
 8002e08:	f897 203b 	ldrb.w	r2, [r7, #59]	@ 0x3b
 8002e0c:	79fb      	ldrb	r3, [r7, #7]
 8002e0e:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 8002e10:	4618      	mov	r0, r3
 8002e12:	f7ff fc9c 	bl	800274e <fail_scsi_op>
      {
 8002e16:	e0d6      	b.n	8002fc6 <mscd_xfer_cb+0x2ca>
        }else if ( p_cbw->total_bytes )
 8002e18:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002e1a:	689b      	ldr	r3, [r3, #8]
 8002e1c:	2b00      	cmp	r3, #0
 8002e1e:	d00f      	beq.n	8002e40 <mscd_xfer_cb+0x144>
        {
          if (SCSI_CMD_READ_10 == p_cbw->command[0])
 8002e20:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002e22:	7bdb      	ldrb	r3, [r3, #15]
 8002e24:	2b28      	cmp	r3, #40	@ 0x28
 8002e26:	d105      	bne.n	8002e34 <mscd_xfer_cb+0x138>
          {
            proc_read10_cmd(rhport, p_msc);
 8002e28:	79fb      	ldrb	r3, [r7, #7]
 8002e2a:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 8002e2c:	4618      	mov	r0, r3
 8002e2e:	f000 fc93 	bl	8003758 <proc_read10_cmd>
      {
 8002e32:	e0c8      	b.n	8002fc6 <mscd_xfer_cb+0x2ca>
          }else
          {
            proc_write10_cmd(rhport, p_msc);
 8002e34:	79fb      	ldrb	r3, [r7, #7]
 8002e36:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 8002e38:	4618      	mov	r0, r3
 8002e3a:	f000 fd1f 	bl	800387c <proc_write10_cmd>
      {
 8002e3e:	e0c2      	b.n	8002fc6 <mscd_xfer_cb+0x2ca>
          }
        }else
        {
          // no data transfer, only exist in complaint test suite
          p_msc->stage = MSC_STAGE_STATUS;
 8002e40:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8002e42:	2202      	movs	r2, #2
 8002e44:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
      {
 8002e48:	e0bd      	b.n	8002fc6 <mscd_xfer_cb+0x2ca>
      else
      {
        // For other SCSI commands
        // 1. OUT : queue transfer (invoke app callback after done)
        // 2. IN & Zero: Process if is built-in, else Invoke app callback. Skip DATA if zero length
        if ( (p_cbw->total_bytes > 0 ) && !is_data_in(p_cbw->dir) )
 8002e4a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002e4c:	689b      	ldr	r3, [r3, #8]
 8002e4e:	2b00      	cmp	r3, #0
 8002e50:	d041      	beq.n	8002ed6 <mscd_xfer_cb+0x1da>
 8002e52:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002e54:	7b1b      	ldrb	r3, [r3, #12]
 8002e56:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
  return tu_bit_test(dir, 7);
 8002e5a:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8002e5e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002e60:	2307      	movs	r3, #7
 8002e62:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
TU_ATTR_ALWAYS_INLINE static inline bool     tu_bit_test (uint32_t value, uint8_t pos) { return (value & TU_BIT(pos)) ? true : false; }
 8002e66:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8002e6a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002e6c:	fa22 f303 	lsr.w	r3, r2, r3
 8002e70:	f003 0301 	and.w	r3, r3, #1
 8002e74:	2b00      	cmp	r3, #0
 8002e76:	bf14      	ite	ne
 8002e78:	2301      	movne	r3, #1
 8002e7a:	2300      	moveq	r3, #0
 8002e7c:	b2db      	uxtb	r3, r3
        if ( (p_cbw->total_bytes > 0 ) && !is_data_in(p_cbw->dir) )
 8002e7e:	f083 0301 	eor.w	r3, r3, #1
 8002e82:	b2db      	uxtb	r3, r3
 8002e84:	2b00      	cmp	r3, #0
 8002e86:	d026      	beq.n	8002ed6 <mscd_xfer_cb+0x1da>
        {
          if (p_cbw->total_bytes > sizeof(_mscd_buf))
 8002e88:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002e8a:	689b      	ldr	r3, [r3, #8]
 8002e8c:	2b40      	cmp	r3, #64	@ 0x40
 8002e8e:	d906      	bls.n	8002e9e <mscd_xfer_cb+0x1a2>
          {
            TU_LOG_DRV("  SCSI reject non READ10/WRITE10 with large data\r\n");
            fail_scsi_op(rhport, p_msc, MSC_CSW_STATUS_FAILED);
 8002e90:	79fb      	ldrb	r3, [r7, #7]
 8002e92:	2201      	movs	r2, #1
 8002e94:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 8002e96:	4618      	mov	r0, r3
 8002e98:	f7ff fc59 	bl	800274e <fail_scsi_op>
          if (p_cbw->total_bytes > sizeof(_mscd_buf))
 8002e9c:	e092      	b.n	8002fc4 <mscd_xfer_cb+0x2c8>
          }else
          {
            // Didn't check for case 9 (Ho > Dn), which requires examining scsi command first
            // but it is OK to just receive data then responded with failed status
            TU_ASSERT( usbd_edpt_xfer(rhport, p_msc->ep_out, _mscd_buf, (uint16_t) p_msc->total_len) );
 8002e9e:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8002ea0:	f893 102f 	ldrb.w	r1, [r3, #47]	@ 0x2f
 8002ea4:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8002ea6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002ea8:	b29b      	uxth	r3, r3
 8002eaa:	79f8      	ldrb	r0, [r7, #7]
 8002eac:	4a2f      	ldr	r2, [pc, #188]	@ (8002f6c <mscd_xfer_cb+0x270>)
 8002eae:	f003 fa9d 	bl	80063ec <usbd_edpt_xfer>
 8002eb2:	4603      	mov	r3, r0
 8002eb4:	f083 0301 	eor.w	r3, r3, #1
 8002eb8:	b2db      	uxtb	r3, r3
 8002eba:	2b00      	cmp	r3, #0
 8002ebc:	f000 8082 	beq.w	8002fc4 <mscd_xfer_cb+0x2c8>
 8002ec0:	4b2b      	ldr	r3, [pc, #172]	@ (8002f70 <mscd_xfer_cb+0x274>)
 8002ec2:	643b      	str	r3, [r7, #64]	@ 0x40
 8002ec4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	f003 0301 	and.w	r3, r3, #1
 8002ecc:	2b00      	cmp	r3, #0
 8002ece:	d000      	beq.n	8002ed2 <mscd_xfer_cb+0x1d6>
 8002ed0:	be00      	bkpt	0x0000
 8002ed2:	2300      	movs	r3, #0
 8002ed4:	e182      	b.n	80031dc <mscd_xfer_cb+0x4e0>
          }
        }else
        {
          // First process if it is a built-in commands
          int32_t resplen = proc_builtin_scsi(p_cbw->lun, p_cbw->command, _mscd_buf, sizeof(_mscd_buf));
 8002ed6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002ed8:	7b58      	ldrb	r0, [r3, #13]
 8002eda:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002edc:	f103 010f 	add.w	r1, r3, #15
 8002ee0:	2340      	movs	r3, #64	@ 0x40
 8002ee2:	4a22      	ldr	r2, [pc, #136]	@ (8002f6c <mscd_xfer_cb+0x270>)
 8002ee4:	f000 f988 	bl	80031f8 <proc_builtin_scsi>
 8002ee8:	65f8      	str	r0, [r7, #92]	@ 0x5c

          // Invoke user callback if not built-in
          if ( (resplen < 0) && (p_msc->sense_key == 0) )
 8002eea:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002eec:	2b00      	cmp	r3, #0
 8002eee:	da10      	bge.n	8002f12 <mscd_xfer_cb+0x216>
 8002ef0:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8002ef2:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002ef6:	2b00      	cmp	r3, #0
 8002ef8:	d10b      	bne.n	8002f12 <mscd_xfer_cb+0x216>
          {
            resplen = tud_msc_scsi_cb(p_cbw->lun, p_cbw->command, _mscd_buf, (uint16_t) p_msc->total_len);
 8002efa:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002efc:	7b58      	ldrb	r0, [r3, #13]
 8002efe:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002f00:	f103 010f 	add.w	r1, r3, #15
 8002f04:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8002f06:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002f08:	b29b      	uxth	r3, r3
 8002f0a:	4a18      	ldr	r2, [pc, #96]	@ (8002f6c <mscd_xfer_cb+0x270>)
 8002f0c:	f7fe fb08 	bl	8001520 <tud_msc_scsi_cb>
 8002f10:	65f8      	str	r0, [r7, #92]	@ 0x5c
          }

          if ( resplen < 0 )
 8002f12:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002f14:	2b00      	cmp	r3, #0
 8002f16:	da06      	bge.n	8002f26 <mscd_xfer_cb+0x22a>
          {
            // unsupported command
            TU_LOG_DRV("  SCSI unsupported or failed command\r\n");
            fail_scsi_op(rhport, p_msc, MSC_CSW_STATUS_FAILED);
 8002f18:	79fb      	ldrb	r3, [r7, #7]
 8002f1a:	2201      	movs	r2, #1
 8002f1c:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 8002f1e:	4618      	mov	r0, r3
 8002f20:	f7ff fc15 	bl	800274e <fail_scsi_op>
              TU_ASSERT( usbd_edpt_xfer(rhport, p_msc->ep_in, _mscd_buf, (uint16_t) p_msc->total_len) );
            }
          }
        }
      }
    break;
 8002f24:	e108      	b.n	8003138 <mscd_xfer_cb+0x43c>
          else if (resplen == 0)
 8002f26:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002f28:	2b00      	cmp	r3, #0
 8002f2a:	d10f      	bne.n	8002f4c <mscd_xfer_cb+0x250>
            if (p_cbw->total_bytes)
 8002f2c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002f2e:	689b      	ldr	r3, [r3, #8]
 8002f30:	2b00      	cmp	r3, #0
 8002f32:	d006      	beq.n	8002f42 <mscd_xfer_cb+0x246>
              fail_scsi_op(rhport, p_msc, MSC_CSW_STATUS_FAILED);
 8002f34:	79fb      	ldrb	r3, [r7, #7]
 8002f36:	2201      	movs	r2, #1
 8002f38:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 8002f3a:	4618      	mov	r0, r3
 8002f3c:	f7ff fc07 	bl	800274e <fail_scsi_op>
    break;
 8002f40:	e0fa      	b.n	8003138 <mscd_xfer_cb+0x43c>
              p_msc->stage = MSC_STAGE_STATUS;
 8002f42:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8002f44:	2202      	movs	r2, #2
 8002f46:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
    break;
 8002f4a:	e0f5      	b.n	8003138 <mscd_xfer_cb+0x43c>
            if ( p_cbw->total_bytes == 0 )
 8002f4c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002f4e:	689b      	ldr	r3, [r3, #8]
 8002f50:	2b00      	cmp	r3, #0
 8002f52:	d10f      	bne.n	8002f74 <mscd_xfer_cb+0x278>
              fail_scsi_op(rhport, p_msc, MSC_CSW_STATUS_FAILED);
 8002f54:	79fb      	ldrb	r3, [r7, #7]
 8002f56:	2201      	movs	r2, #1
 8002f58:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 8002f5a:	4618      	mov	r0, r3
 8002f5c:	f7ff fbf7 	bl	800274e <fail_scsi_op>
    break;
 8002f60:	e0ea      	b.n	8003138 <mscd_xfer_cb+0x43c>
 8002f62:	bf00      	nop
 8002f64:	24000f80 	.word	0x24000f80
 8002f68:	43425355 	.word	0x43425355
 8002f6c:	24000fc0 	.word	0x24000fc0
 8002f70:	e000edf0 	.word	0xe000edf0
              p_msc->total_len = tu_min32((uint32_t) resplen, p_cbw->total_bytes);
 8002f74:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8002f76:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002f78:	689b      	ldr	r3, [r3, #8]
 8002f7a:	627a      	str	r2, [r7, #36]	@ 0x24
 8002f7c:	623b      	str	r3, [r7, #32]
TU_ATTR_ALWAYS_INLINE static inline uint32_t tu_min32 (uint32_t x, uint32_t y) { return (x < y) ? x : y; }
 8002f7e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002f80:	6a3b      	ldr	r3, [r7, #32]
 8002f82:	429a      	cmp	r2, r3
 8002f84:	bf28      	it	cs
 8002f86:	461a      	movcs	r2, r3
 8002f88:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8002f8a:	635a      	str	r2, [r3, #52]	@ 0x34
              TU_ASSERT( usbd_edpt_xfer(rhport, p_msc->ep_in, _mscd_buf, (uint16_t) p_msc->total_len) );
 8002f8c:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8002f8e:	f893 102e 	ldrb.w	r1, [r3, #46]	@ 0x2e
 8002f92:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8002f94:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002f96:	b29b      	uxth	r3, r3
 8002f98:	79f8      	ldrb	r0, [r7, #7]
 8002f9a:	4a92      	ldr	r2, [pc, #584]	@ (80031e4 <mscd_xfer_cb+0x4e8>)
 8002f9c:	f003 fa26 	bl	80063ec <usbd_edpt_xfer>
 8002fa0:	4603      	mov	r3, r0
 8002fa2:	f083 0301 	eor.w	r3, r3, #1
 8002fa6:	b2db      	uxtb	r3, r3
 8002fa8:	2b00      	cmp	r3, #0
 8002faa:	f000 80c5 	beq.w	8003138 <mscd_xfer_cb+0x43c>
 8002fae:	4b8e      	ldr	r3, [pc, #568]	@ (80031e8 <mscd_xfer_cb+0x4ec>)
 8002fb0:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002fb2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002fb4:	681b      	ldr	r3, [r3, #0]
 8002fb6:	f003 0301 	and.w	r3, r3, #1
 8002fba:	2b00      	cmp	r3, #0
 8002fbc:	d000      	beq.n	8002fc0 <mscd_xfer_cb+0x2c4>
 8002fbe:	be00      	bkpt	0x0000
 8002fc0:	2300      	movs	r3, #0
 8002fc2:	e10b      	b.n	80031dc <mscd_xfer_cb+0x4e0>
          if (p_cbw->total_bytes > sizeof(_mscd_buf))
 8002fc4:	bf00      	nop
    break;
 8002fc6:	e0b7      	b.n	8003138 <mscd_xfer_cb+0x43c>

    case MSC_STAGE_DATA:
      TU_LOG_DRV("  SCSI Data [Lun%u]\r\n", p_cbw->lun);
      //TU_LOG_MEM(MSC_DEBUG, _mscd_buf, xferred_bytes, 2);

      if (SCSI_CMD_READ_10 == p_cbw->command[0])
 8002fc8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002fca:	7bdb      	ldrb	r3, [r3, #15]
 8002fcc:	2b28      	cmp	r3, #40	@ 0x28
 8002fce:	d116      	bne.n	8002ffe <mscd_xfer_cb+0x302>
      {
        p_msc->xferred_len += xferred_bytes;
 8002fd0:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8002fd2:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8002fd4:	683b      	ldr	r3, [r7, #0]
 8002fd6:	441a      	add	r2, r3
 8002fd8:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8002fda:	639a      	str	r2, [r3, #56]	@ 0x38

        if ( p_msc->xferred_len >= p_msc->total_len )
 8002fdc:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8002fde:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8002fe0:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8002fe2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002fe4:	429a      	cmp	r2, r3
 8002fe6:	d304      	bcc.n	8002ff2 <mscd_xfer_cb+0x2f6>
        {
          // Data Stage is complete
          p_msc->stage = MSC_STAGE_STATUS;
 8002fe8:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8002fea:	2202      	movs	r2, #2
 8002fec:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
        {
          // This scenario with command that take more than one transfer is already rejected at Command stage
          TU_BREAKPOINT();
        }
      }
    break;
 8002ff0:	e0a4      	b.n	800313c <mscd_xfer_cb+0x440>
          proc_read10_cmd(rhport, p_msc);
 8002ff2:	79fb      	ldrb	r3, [r7, #7]
 8002ff4:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 8002ff6:	4618      	mov	r0, r3
 8002ff8:	f000 fbae 	bl	8003758 <proc_read10_cmd>
    break;
 8002ffc:	e09e      	b.n	800313c <mscd_xfer_cb+0x440>
      else if (SCSI_CMD_WRITE_10 == p_cbw->command[0])
 8002ffe:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003000:	7bdb      	ldrb	r3, [r3, #15]
 8003002:	2b2a      	cmp	r3, #42	@ 0x2a
 8003004:	d106      	bne.n	8003014 <mscd_xfer_cb+0x318>
        proc_write10_new_data(rhport, p_msc, xferred_bytes);
 8003006:	79fb      	ldrb	r3, [r7, #7]
 8003008:	683a      	ldr	r2, [r7, #0]
 800300a:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 800300c:	4618      	mov	r0, r3
 800300e:	f000 fc8d 	bl	800392c <proc_write10_new_data>
    break;
 8003012:	e093      	b.n	800313c <mscd_xfer_cb+0x440>
        p_msc->xferred_len += xferred_bytes;
 8003014:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8003016:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003018:	683b      	ldr	r3, [r7, #0]
 800301a:	441a      	add	r2, r3
 800301c:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800301e:	639a      	str	r2, [r3, #56]	@ 0x38
        if ( !is_data_in(p_cbw->dir) )
 8003020:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003022:	7b1b      	ldrb	r3, [r3, #12]
 8003024:	77fb      	strb	r3, [r7, #31]
  return tu_bit_test(dir, 7);
 8003026:	7ffb      	ldrb	r3, [r7, #31]
 8003028:	61bb      	str	r3, [r7, #24]
 800302a:	2307      	movs	r3, #7
 800302c:	75fb      	strb	r3, [r7, #23]
TU_ATTR_ALWAYS_INLINE static inline bool     tu_bit_test (uint32_t value, uint8_t pos) { return (value & TU_BIT(pos)) ? true : false; }
 800302e:	7dfb      	ldrb	r3, [r7, #23]
 8003030:	69ba      	ldr	r2, [r7, #24]
 8003032:	fa22 f303 	lsr.w	r3, r2, r3
 8003036:	f003 0301 	and.w	r3, r3, #1
 800303a:	2b00      	cmp	r3, #0
 800303c:	bf14      	ite	ne
 800303e:	2301      	movne	r3, #1
 8003040:	2300      	moveq	r3, #0
 8003042:	b2db      	uxtb	r3, r3
        if ( !is_data_in(p_cbw->dir) )
 8003044:	f083 0301 	eor.w	r3, r3, #1
 8003048:	b2db      	uxtb	r3, r3
 800304a:	2b00      	cmp	r3, #0
 800304c:	d014      	beq.n	8003078 <mscd_xfer_cb+0x37c>
          int32_t cb_result = tud_msc_scsi_cb(p_cbw->lun, p_cbw->command, _mscd_buf, (uint16_t) p_msc->total_len);
 800304e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003050:	7b58      	ldrb	r0, [r3, #13]
 8003052:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003054:	f103 010f 	add.w	r1, r3, #15
 8003058:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800305a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800305c:	b29b      	uxth	r3, r3
 800305e:	4a61      	ldr	r2, [pc, #388]	@ (80031e4 <mscd_xfer_cb+0x4e8>)
 8003060:	f7fe fa5e 	bl	8001520 <tud_msc_scsi_cb>
 8003064:	64b8      	str	r0, [r7, #72]	@ 0x48
          if ( cb_result < 0 )
 8003066:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003068:	2b00      	cmp	r3, #0
 800306a:	da05      	bge.n	8003078 <mscd_xfer_cb+0x37c>
            fail_scsi_op(rhport, p_msc, MSC_CSW_STATUS_FAILED);
 800306c:	79fb      	ldrb	r3, [r7, #7]
 800306e:	2201      	movs	r2, #1
 8003070:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 8003072:	4618      	mov	r0, r3
 8003074:	f7ff fb6b 	bl	800274e <fail_scsi_op>
        if ( p_msc->xferred_len >= p_msc->total_len )
 8003078:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800307a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800307c:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800307e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003080:	429a      	cmp	r2, r3
 8003082:	d304      	bcc.n	800308e <mscd_xfer_cb+0x392>
          p_msc->stage = MSC_STAGE_STATUS;
 8003084:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8003086:	2202      	movs	r2, #2
 8003088:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
    break;
 800308c:	e056      	b.n	800313c <mscd_xfer_cb+0x440>
          TU_BREAKPOINT();
 800308e:	4b56      	ldr	r3, [pc, #344]	@ (80031e8 <mscd_xfer_cb+0x4ec>)
 8003090:	647b      	str	r3, [r7, #68]	@ 0x44
 8003092:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003094:	681b      	ldr	r3, [r3, #0]
 8003096:	f003 0301 	and.w	r3, r3, #1
 800309a:	2b00      	cmp	r3, #0
 800309c:	d04e      	beq.n	800313c <mscd_xfer_cb+0x440>
 800309e:	be00      	bkpt	0x0000
    break;
 80030a0:	e04c      	b.n	800313c <mscd_xfer_cb+0x440>
      // processed immediately after this switch, supposedly to be empty
    break;

    case MSC_STAGE_STATUS_SENT:
      // Wait for the Status phase to complete
      if( (ep_addr == p_msc->ep_in) && (xferred_bytes == sizeof(msc_csw_t)) )
 80030a2:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80030a4:	f893 302e 	ldrb.w	r3, [r3, #46]	@ 0x2e
 80030a8:	79ba      	ldrb	r2, [r7, #6]
 80030aa:	429a      	cmp	r2, r3
 80030ac:	d148      	bne.n	8003140 <mscd_xfer_cb+0x444>
 80030ae:	683b      	ldr	r3, [r7, #0]
 80030b0:	2b0d      	cmp	r3, #13
 80030b2:	d145      	bne.n	8003140 <mscd_xfer_cb+0x444>
        // TU_LOG_MEM(MSC_DEBUG, p_csw, xferred_bytes, 2);

        // Invoke complete callback if defined
        // Note: There is racing issue with samd51 + qspi flash testing with arduino
        // if complete_cb() is invoked after queuing the status.
        switch(p_cbw->command[0])
 80030b4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80030b6:	7bdb      	ldrb	r3, [r3, #15]
 80030b8:	2b28      	cmp	r3, #40	@ 0x28
 80030ba:	d002      	beq.n	80030c2 <mscd_xfer_cb+0x3c6>
 80030bc:	2b2a      	cmp	r3, #42	@ 0x2a
 80030be:	d009      	beq.n	80030d4 <mscd_xfer_cb+0x3d8>
 80030c0:	e011      	b.n	80030e6 <mscd_xfer_cb+0x3ea>
        {
          case SCSI_CMD_READ_10:
            if ( tud_msc_read10_complete_cb ) tud_msc_read10_complete_cb(p_cbw->lun);
 80030c2:	4b4a      	ldr	r3, [pc, #296]	@ (80031ec <mscd_xfer_cb+0x4f0>)
 80030c4:	2b00      	cmp	r3, #0
 80030c6:	d01a      	beq.n	80030fe <mscd_xfer_cb+0x402>
 80030c8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80030ca:	7b5b      	ldrb	r3, [r3, #13]
 80030cc:	4618      	mov	r0, r3
 80030ce:	f3af 8000 	nop.w
          break;
 80030d2:	e014      	b.n	80030fe <mscd_xfer_cb+0x402>

          case SCSI_CMD_WRITE_10:
            if ( tud_msc_write10_complete_cb ) tud_msc_write10_complete_cb(p_cbw->lun);
 80030d4:	4b46      	ldr	r3, [pc, #280]	@ (80031f0 <mscd_xfer_cb+0x4f4>)
 80030d6:	2b00      	cmp	r3, #0
 80030d8:	d013      	beq.n	8003102 <mscd_xfer_cb+0x406>
 80030da:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80030dc:	7b5b      	ldrb	r3, [r3, #13]
 80030de:	4618      	mov	r0, r3
 80030e0:	f3af 8000 	nop.w
          break;
 80030e4:	e00d      	b.n	8003102 <mscd_xfer_cb+0x406>

          default:
            if ( tud_msc_scsi_complete_cb ) tud_msc_scsi_complete_cb(p_cbw->lun, p_cbw->command);
 80030e6:	4b43      	ldr	r3, [pc, #268]	@ (80031f4 <mscd_xfer_cb+0x4f8>)
 80030e8:	2b00      	cmp	r3, #0
 80030ea:	d00c      	beq.n	8003106 <mscd_xfer_cb+0x40a>
 80030ec:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80030ee:	7b5a      	ldrb	r2, [r3, #13]
 80030f0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80030f2:	330f      	adds	r3, #15
 80030f4:	4619      	mov	r1, r3
 80030f6:	4610      	mov	r0, r2
 80030f8:	f3af 8000 	nop.w
          break;
 80030fc:	e003      	b.n	8003106 <mscd_xfer_cb+0x40a>
          break;
 80030fe:	bf00      	nop
 8003100:	e002      	b.n	8003108 <mscd_xfer_cb+0x40c>
          break;
 8003102:	bf00      	nop
 8003104:	e000      	b.n	8003108 <mscd_xfer_cb+0x40c>
          break;
 8003106:	bf00      	nop
        }

        TU_ASSERT( prepare_cbw(rhport, p_msc) );
 8003108:	79fb      	ldrb	r3, [r7, #7]
 800310a:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 800310c:	4618      	mov	r0, r3
 800310e:	f7ff fb07 	bl	8002720 <prepare_cbw>
 8003112:	4603      	mov	r3, r0
 8003114:	f083 0301 	eor.w	r3, r3, #1
 8003118:	b2db      	uxtb	r3, r3
 800311a:	2b00      	cmp	r3, #0
 800311c:	d010      	beq.n	8003140 <mscd_xfer_cb+0x444>
 800311e:	4b32      	ldr	r3, [pc, #200]	@ (80031e8 <mscd_xfer_cb+0x4ec>)
 8003120:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003122:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003124:	681b      	ldr	r3, [r3, #0]
 8003126:	f003 0301 	and.w	r3, r3, #1
 800312a:	2b00      	cmp	r3, #0
 800312c:	d000      	beq.n	8003130 <mscd_xfer_cb+0x434>
 800312e:	be00      	bkpt	0x0000
 8003130:	2300      	movs	r3, #0
 8003132:	e053      	b.n	80031dc <mscd_xfer_cb+0x4e0>
        // Any xfer ended here is consider unknown error, ignore it
        TU_LOG1("  Warning expect SCSI Status but received unknown data\r\n");
      }
    break;

    default : break;
 8003134:	bf00      	nop
 8003136:	e004      	b.n	8003142 <mscd_xfer_cb+0x446>
    break;
 8003138:	bf00      	nop
 800313a:	e002      	b.n	8003142 <mscd_xfer_cb+0x446>
    break;
 800313c:	bf00      	nop
 800313e:	e000      	b.n	8003142 <mscd_xfer_cb+0x446>
    break;
 8003140:	bf00      	nop
  }

  if ( p_msc->stage == MSC_STAGE_STATUS )
 8003142:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8003144:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8003148:	2b02      	cmp	r3, #2
 800314a:	d146      	bne.n	80031da <mscd_xfer_cb+0x4de>
  {
    // skip status if epin is currently stalled, will do it when received Clear Stall request
    if ( !usbd_edpt_stalled(rhport,  p_msc->ep_in) )
 800314c:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800314e:	f893 202e 	ldrb.w	r2, [r3, #46]	@ 0x2e
 8003152:	79fb      	ldrb	r3, [r7, #7]
 8003154:	4611      	mov	r1, r2
 8003156:	4618      	mov	r0, r3
 8003158:	f003 fa84 	bl	8006664 <usbd_edpt_stalled>
 800315c:	4603      	mov	r3, r0
 800315e:	f083 0301 	eor.w	r3, r3, #1
 8003162:	b2db      	uxtb	r3, r3
 8003164:	2b00      	cmp	r3, #0
 8003166:	d038      	beq.n	80031da <mscd_xfer_cb+0x4de>
    {
      if ( (p_cbw->total_bytes > p_msc->xferred_len) && is_data_in(p_cbw->dir) )
 8003168:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800316a:	689a      	ldr	r2, [r3, #8]
 800316c:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800316e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003170:	429a      	cmp	r2, r3
 8003172:	d91c      	bls.n	80031ae <mscd_xfer_cb+0x4b2>
 8003174:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003176:	7b1b      	ldrb	r3, [r3, #12]
 8003178:	75bb      	strb	r3, [r7, #22]
  return tu_bit_test(dir, 7);
 800317a:	7dbb      	ldrb	r3, [r7, #22]
 800317c:	613b      	str	r3, [r7, #16]
 800317e:	2307      	movs	r3, #7
 8003180:	73fb      	strb	r3, [r7, #15]
 8003182:	7bfb      	ldrb	r3, [r7, #15]
 8003184:	693a      	ldr	r2, [r7, #16]
 8003186:	fa22 f303 	lsr.w	r3, r2, r3
 800318a:	f003 0301 	and.w	r3, r3, #1
 800318e:	2b00      	cmp	r3, #0
 8003190:	bf14      	ite	ne
 8003192:	2301      	movne	r3, #1
 8003194:	2300      	moveq	r3, #0
 8003196:	b2db      	uxtb	r3, r3
      if ( (p_cbw->total_bytes > p_msc->xferred_len) && is_data_in(p_cbw->dir) )
 8003198:	2b00      	cmp	r3, #0
 800319a:	d008      	beq.n	80031ae <mscd_xfer_cb+0x4b2>
      {
        // 6.7 The 13 Cases: case 5 (Hi > Di): STALL before status
        // TU_LOG(MSC_DEBUG, "  SCSI case 5 (Hi > Di): %lu > %lu\r\n", p_cbw->total_bytes, p_msc->xferred_len);
        usbd_edpt_stall(rhport, p_msc->ep_in);
 800319c:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800319e:	f893 202e 	ldrb.w	r2, [r3, #46]	@ 0x2e
 80031a2:	79fb      	ldrb	r3, [r7, #7]
 80031a4:	4611      	mov	r1, r2
 80031a6:	4618      	mov	r0, r3
 80031a8:	f003 f9c4 	bl	8006534 <usbd_edpt_stall>
 80031ac:	e015      	b.n	80031da <mscd_xfer_cb+0x4de>
      }else
      {
        TU_ASSERT( send_csw(rhport, p_msc) );
 80031ae:	79fb      	ldrb	r3, [r7, #7]
 80031b0:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 80031b2:	4618      	mov	r0, r3
 80031b4:	f7ff fa94 	bl	80026e0 <send_csw>
 80031b8:	4603      	mov	r3, r0
 80031ba:	f083 0301 	eor.w	r3, r3, #1
 80031be:	b2db      	uxtb	r3, r3
 80031c0:	2b00      	cmp	r3, #0
 80031c2:	d00a      	beq.n	80031da <mscd_xfer_cb+0x4de>
 80031c4:	4b08      	ldr	r3, [pc, #32]	@ (80031e8 <mscd_xfer_cb+0x4ec>)
 80031c6:	637b      	str	r3, [r7, #52]	@ 0x34
 80031c8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80031ca:	681b      	ldr	r3, [r3, #0]
 80031cc:	f003 0301 	and.w	r3, r3, #1
 80031d0:	2b00      	cmp	r3, #0
 80031d2:	d000      	beq.n	80031d6 <mscd_xfer_cb+0x4da>
 80031d4:	be00      	bkpt	0x0000
 80031d6:	2300      	movs	r3, #0
 80031d8:	e000      	b.n	80031dc <mscd_xfer_cb+0x4e0>
      send_csw(rhport, p_msc);
    }
    #endif
  }

  return true;
 80031da:	2301      	movs	r3, #1
}
 80031dc:	4618      	mov	r0, r3
 80031de:	3760      	adds	r7, #96	@ 0x60
 80031e0:	46bd      	mov	sp, r7
 80031e2:	bd80      	pop	{r7, pc}
 80031e4:	24000fc0 	.word	0x24000fc0
 80031e8:	e000edf0 	.word	0xe000edf0
	...

080031f8 <proc_builtin_scsi>:
 *------------------------------------------------------------------*/

// return response's length (copied to buffer). Negative if it is not an built-in command or indicate Failed status (CSW)
// In case of a failed status, sense key must be set for reason of failure
static int32_t proc_builtin_scsi(uint8_t lun, uint8_t const scsi_cmd[16], uint8_t* buffer, uint32_t bufsize)
{
 80031f8:	b590      	push	{r4, r7, lr}
 80031fa:	b0b7      	sub	sp, #220	@ 0xdc
 80031fc:	af00      	add	r7, sp, #0
 80031fe:	60b9      	str	r1, [r7, #8]
 8003200:	607a      	str	r2, [r7, #4]
 8003202:	603b      	str	r3, [r7, #0]
 8003204:	4603      	mov	r3, r0
 8003206:	73fb      	strb	r3, [r7, #15]
  (void) bufsize; // TODO refractor later
  int32_t resplen;

  mscd_interface_t* p_msc = &_mscd_itf;
 8003208:	4bb2      	ldr	r3, [pc, #712]	@ (80034d4 <proc_builtin_scsi+0x2dc>)
 800320a:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc

  switch ( scsi_cmd[0] )
 800320e:	68bb      	ldr	r3, [r7, #8]
 8003210:	781b      	ldrb	r3, [r3, #0]
 8003212:	2b25      	cmp	r3, #37	@ 0x25
 8003214:	f200 8286 	bhi.w	8003724 <proc_builtin_scsi+0x52c>
 8003218:	a201      	add	r2, pc, #4	@ (adr r2, 8003220 <proc_builtin_scsi+0x28>)
 800321a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800321e:	bf00      	nop
 8003220:	080032b9 	.word	0x080032b9
 8003224:	08003725 	.word	0x08003725
 8003228:	08003725 	.word	0x08003725
 800322c:	0800365d 	.word	0x0800365d
 8003230:	08003725 	.word	0x08003725
 8003234:	08003725 	.word	0x08003725
 8003238:	08003725 	.word	0x08003725
 800323c:	08003725 	.word	0x08003725
 8003240:	08003725 	.word	0x08003725
 8003244:	08003725 	.word	0x08003725
 8003248:	08003725 	.word	0x08003725
 800324c:	08003725 	.word	0x08003725
 8003250:	08003725 	.word	0x08003725
 8003254:	08003725 	.word	0x08003725
 8003258:	08003725 	.word	0x08003725
 800325c:	08003725 	.word	0x08003725
 8003260:	08003725 	.word	0x08003725
 8003264:	08003725 	.word	0x08003725
 8003268:	080034dd 	.word	0x080034dd
 800326c:	08003725 	.word	0x08003725
 8003270:	08003725 	.word	0x08003725
 8003274:	08003725 	.word	0x08003725
 8003278:	08003725 	.word	0x08003725
 800327c:	08003725 	.word	0x08003725
 8003280:	08003725 	.word	0x08003725
 8003284:	08003725 	.word	0x08003725
 8003288:	080035a5 	.word	0x080035a5
 800328c:	080032f5 	.word	0x080032f5
 8003290:	08003725 	.word	0x08003725
 8003294:	08003725 	.word	0x08003725
 8003298:	08003725 	.word	0x08003725
 800329c:	08003725 	.word	0x08003725
 80032a0:	08003725 	.word	0x08003725
 80032a4:	08003725 	.word	0x08003725
 80032a8:	08003725 	.word	0x08003725
 80032ac:	0800341d 	.word	0x0800341d
 80032b0:	08003725 	.word	0x08003725
 80032b4:	08003377 	.word	0x08003377
  {
    case SCSI_CMD_TEST_UNIT_READY:
      resplen = 0;
 80032b8:	2300      	movs	r3, #0
 80032ba:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ( !tud_msc_test_unit_ready_cb(lun) )
 80032be:	7bfb      	ldrb	r3, [r7, #15]
 80032c0:	4618      	mov	r0, r3
 80032c2:	f7fe f86d 	bl	80013a0 <tud_msc_test_unit_ready_cb>
 80032c6:	4603      	mov	r3, r0
 80032c8:	f083 0301 	eor.w	r3, r3, #1
 80032cc:	b2db      	uxtb	r3, r3
 80032ce:	2b00      	cmp	r3, #0
 80032d0:	f000 822d 	beq.w	800372e <proc_builtin_scsi+0x536>
      {
        // Failed status response
        resplen = - 1;
 80032d4:	f04f 33ff 	mov.w	r3, #4294967295
 80032d8:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

        // set default sense if not set by callback
        if ( p_msc->sense_key == 0 ) set_sense_medium_not_present(lun);
 80032dc:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80032e0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80032e4:	2b00      	cmp	r3, #0
 80032e6:	f040 8222 	bne.w	800372e <proc_builtin_scsi+0x536>
 80032ea:	7bfb      	ldrb	r3, [r7, #15]
 80032ec:	4618      	mov	r0, r3
 80032ee:	f7ff fb49 	bl	8002984 <set_sense_medium_not_present>
      }
    break;
 80032f2:	e21c      	b.n	800372e <proc_builtin_scsi+0x536>

    case SCSI_CMD_START_STOP_UNIT:
      resplen = 0;
 80032f4:	2300      	movs	r3, #0
 80032f6:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

      if (tud_msc_start_stop_cb)
 80032fa:	4b77      	ldr	r3, [pc, #476]	@ (80034d8 <proc_builtin_scsi+0x2e0>)
 80032fc:	2b00      	cmp	r3, #0
 80032fe:	f000 8218 	beq.w	8003732 <proc_builtin_scsi+0x53a>
      {
        scsi_start_stop_unit_t const * start_stop = (scsi_start_stop_unit_t const *) scsi_cmd;
 8003302:	68bb      	ldr	r3, [r7, #8]
 8003304:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
        if ( !tud_msc_start_stop_cb(lun, start_stop->power_condition, start_stop->start, start_stop->load_eject) )
 8003308:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800330c:	791b      	ldrb	r3, [r3, #4]
 800330e:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8003312:	b2db      	uxtb	r3, r3
 8003314:	4619      	mov	r1, r3
 8003316:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800331a:	791b      	ldrb	r3, [r3, #4]
 800331c:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8003320:	b2db      	uxtb	r3, r3
 8003322:	2b00      	cmp	r3, #0
 8003324:	bf14      	ite	ne
 8003326:	2301      	movne	r3, #1
 8003328:	2300      	moveq	r3, #0
 800332a:	b2da      	uxtb	r2, r3
 800332c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8003330:	791b      	ldrb	r3, [r3, #4]
 8003332:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8003336:	b2db      	uxtb	r3, r3
 8003338:	2b00      	cmp	r3, #0
 800333a:	bf14      	ite	ne
 800333c:	2301      	movne	r3, #1
 800333e:	2300      	moveq	r3, #0
 8003340:	b2db      	uxtb	r3, r3
 8003342:	7bf8      	ldrb	r0, [r7, #15]
 8003344:	f7fe f868 	bl	8001418 <tud_msc_start_stop_cb>
 8003348:	4603      	mov	r3, r0
 800334a:	f083 0301 	eor.w	r3, r3, #1
 800334e:	b2db      	uxtb	r3, r3
 8003350:	2b00      	cmp	r3, #0
 8003352:	f000 81ee 	beq.w	8003732 <proc_builtin_scsi+0x53a>
        {
          // Failed status response
          resplen = - 1;
 8003356:	f04f 33ff 	mov.w	r3, #4294967295
 800335a:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

          // set default sense if not set by callback
          if ( p_msc->sense_key == 0 ) set_sense_medium_not_present(lun);
 800335e:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8003362:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003366:	2b00      	cmp	r3, #0
 8003368:	f040 81e3 	bne.w	8003732 <proc_builtin_scsi+0x53a>
 800336c:	7bfb      	ldrb	r3, [r7, #15]
 800336e:	4618      	mov	r0, r3
 8003370:	f7ff fb08 	bl	8002984 <set_sense_medium_not_present>
        }
      }
    break;
 8003374:	e1dd      	b.n	8003732 <proc_builtin_scsi+0x53a>
    {
      uint32_t block_count;
      uint32_t block_size;
      uint16_t block_size_u16;

      tud_msc_capacity_cb(lun, &block_count, &block_size_u16);
 8003376:	f107 026e 	add.w	r2, r7, #110	@ 0x6e
 800337a:	f107 0170 	add.w	r1, r7, #112	@ 0x70
 800337e:	7bfb      	ldrb	r3, [r7, #15]
 8003380:	4618      	mov	r0, r3
 8003382:	f7fe f825 	bl	80013d0 <tud_msc_capacity_cb>
      block_size = (uint32_t) block_size_u16;
 8003386:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 800338a:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8

      // Invalid block size/count from callback, possibly unit is not ready
      // stall this request, set sense key to NOT READY
      if (block_count == 0 || block_size == 0)
 800338e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8003390:	2b00      	cmp	r3, #0
 8003392:	d003      	beq.n	800339c <proc_builtin_scsi+0x1a4>
 8003394:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8003398:	2b00      	cmp	r3, #0
 800339a:	d10e      	bne.n	80033ba <proc_builtin_scsi+0x1c2>
      {
        resplen = -1;
 800339c:	f04f 33ff 	mov.w	r3, #4294967295
 80033a0:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

        // set default sense if not set by callback
        if ( p_msc->sense_key == 0 ) set_sense_medium_not_present(lun);
 80033a4:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80033a8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80033ac:	2b00      	cmp	r3, #0
 80033ae:	d134      	bne.n	800341a <proc_builtin_scsi+0x222>
 80033b0:	7bfb      	ldrb	r3, [r7, #15]
 80033b2:	4618      	mov	r0, r3
 80033b4:	f7ff fae6 	bl	8002984 <set_sense_medium_not_present>
 80033b8:	e02f      	b.n	800341a <proc_builtin_scsi+0x222>
      }else
      {
        scsi_read_capacity10_resp_t read_capa10;

        read_capa10.last_lba   = tu_htonl(block_count-1);
 80033ba:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80033bc:	3b01      	subs	r3, #1
 80033be:	ba1b      	rev	r3, r3
 80033c0:	667b      	str	r3, [r7, #100]	@ 0x64
        read_capa10.block_size = tu_htonl(block_size);
 80033c2:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 80033c6:	ba1b      	rev	r3, r3
 80033c8:	66bb      	str	r3, [r7, #104]	@ 0x68

        resplen = sizeof(read_capa10);
 80033ca:	2308      	movs	r3, #8
 80033cc:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
        TU_VERIFY(0 == tu_memcpy_s(buffer, bufsize, &read_capa10, (size_t) resplen));
 80033d0:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80033d4:	687a      	ldr	r2, [r7, #4]
 80033d6:	f8c7 20c0 	str.w	r2, [r7, #192]	@ 0xc0
 80033da:	683a      	ldr	r2, [r7, #0]
 80033dc:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 80033e0:	f107 0264 	add.w	r2, r7, #100	@ 0x64
 80033e4:	f8c7 20b8 	str.w	r2, [r7, #184]	@ 0xb8
 80033e8:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  if ( count > destsz ) {
 80033ec:	f8d7 20bc 	ldr.w	r2, [r7, #188]	@ 0xbc
 80033f0:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 80033f4:	429a      	cmp	r2, r3
 80033f6:	d202      	bcs.n	80033fe <proc_builtin_scsi+0x206>
    return -1;
 80033f8:	f04f 33ff 	mov.w	r3, #4294967295
 80033fc:	e008      	b.n	8003410 <proc_builtin_scsi+0x218>
  memcpy(dest, src, count);
 80033fe:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8003402:	f8d7 10b8 	ldr.w	r1, [r7, #184]	@ 0xb8
 8003406:	f8d7 00c0 	ldr.w	r0, [r7, #192]	@ 0xc0
 800340a:	f016 fba0 	bl	8019b4e <memcpy>
  return 0;
 800340e:	2300      	movs	r3, #0
 8003410:	2b00      	cmp	r3, #0
 8003412:	f000 8190 	beq.w	8003736 <proc_builtin_scsi+0x53e>
 8003416:	2300      	movs	r3, #0
 8003418:	e196      	b.n	8003748 <proc_builtin_scsi+0x550>
      }
    }
    break;
 800341a:	e18c      	b.n	8003736 <proc_builtin_scsi+0x53e>

    case SCSI_CMD_READ_FORMAT_CAPACITY:
    {
      scsi_read_format_capacity_data_t read_fmt_capa =
 800341c:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 8003420:	2200      	movs	r2, #0
 8003422:	601a      	str	r2, [r3, #0]
 8003424:	605a      	str	r2, [r3, #4]
 8003426:	609a      	str	r2, [r3, #8]
 8003428:	2308      	movs	r3, #8
 800342a:	f887 305b 	strb.w	r3, [r7, #91]	@ 0x5b
 800342e:	2302      	movs	r3, #2
 8003430:	f887 3060 	strb.w	r3, [r7, #96]	@ 0x60
      };

      uint32_t block_count;
      uint16_t block_size;

      tud_msc_capacity_cb(lun, &block_count, &block_size);
 8003434:	f107 0252 	add.w	r2, r7, #82	@ 0x52
 8003438:	f107 0154 	add.w	r1, r7, #84	@ 0x54
 800343c:	7bfb      	ldrb	r3, [r7, #15]
 800343e:	4618      	mov	r0, r3
 8003440:	f7fd ffc6 	bl	80013d0 <tud_msc_capacity_cb>

      // Invalid block size/count from callback, possibly unit is not ready
      // stall this request, set sense key to NOT READY
      if (block_count == 0 || block_size == 0)
 8003444:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003446:	2b00      	cmp	r3, #0
 8003448:	d003      	beq.n	8003452 <proc_builtin_scsi+0x25a>
 800344a:	f8b7 3052 	ldrh.w	r3, [r7, #82]	@ 0x52
 800344e:	2b00      	cmp	r3, #0
 8003450:	d10e      	bne.n	8003470 <proc_builtin_scsi+0x278>
      {
        resplen = -1;
 8003452:	f04f 33ff 	mov.w	r3, #4294967295
 8003456:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

        // set default sense if not set by callback
        if ( p_msc->sense_key == 0 ) set_sense_medium_not_present(lun);
 800345a:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800345e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003462:	2b00      	cmp	r3, #0
 8003464:	d135      	bne.n	80034d2 <proc_builtin_scsi+0x2da>
 8003466:	7bfb      	ldrb	r3, [r7, #15]
 8003468:	4618      	mov	r0, r3
 800346a:	f7ff fa8b 	bl	8002984 <set_sense_medium_not_present>
 800346e:	e030      	b.n	80034d2 <proc_builtin_scsi+0x2da>
      }else
      {
        read_fmt_capa.block_num = tu_htonl(block_count);
 8003470:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003472:	ba1b      	rev	r3, r3
 8003474:	65fb      	str	r3, [r7, #92]	@ 0x5c
        read_fmt_capa.block_size_u16 = tu_htons(block_size);
 8003476:	f8b7 3052 	ldrh.w	r3, [r7, #82]	@ 0x52
 800347a:	ba5b      	rev16	r3, r3
 800347c:	b29b      	uxth	r3, r3
 800347e:	f8a7 3062 	strh.w	r3, [r7, #98]	@ 0x62

        resplen = sizeof(read_fmt_capa);
 8003482:	230c      	movs	r3, #12
 8003484:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
        TU_VERIFY(0 == tu_memcpy_s(buffer, bufsize, &read_fmt_capa, (size_t) resplen));
 8003488:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800348c:	687a      	ldr	r2, [r7, #4]
 800348e:	f8c7 20b0 	str.w	r2, [r7, #176]	@ 0xb0
 8003492:	683a      	ldr	r2, [r7, #0]
 8003494:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8003498:	f107 0258 	add.w	r2, r7, #88	@ 0x58
 800349c:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 80034a0:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  if ( count > destsz ) {
 80034a4:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 80034a8:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 80034ac:	429a      	cmp	r2, r3
 80034ae:	d202      	bcs.n	80034b6 <proc_builtin_scsi+0x2be>
    return -1;
 80034b0:	f04f 33ff 	mov.w	r3, #4294967295
 80034b4:	e008      	b.n	80034c8 <proc_builtin_scsi+0x2d0>
  memcpy(dest, src, count);
 80034b6:	f8d7 20a4 	ldr.w	r2, [r7, #164]	@ 0xa4
 80034ba:	f8d7 10a8 	ldr.w	r1, [r7, #168]	@ 0xa8
 80034be:	f8d7 00b0 	ldr.w	r0, [r7, #176]	@ 0xb0
 80034c2:	f016 fb44 	bl	8019b4e <memcpy>
  return 0;
 80034c6:	2300      	movs	r3, #0
 80034c8:	2b00      	cmp	r3, #0
 80034ca:	f000 8136 	beq.w	800373a <proc_builtin_scsi+0x542>
 80034ce:	2300      	movs	r3, #0
 80034d0:	e13a      	b.n	8003748 <proc_builtin_scsi+0x550>
      }
    }
    break;
 80034d2:	e132      	b.n	800373a <proc_builtin_scsi+0x542>
 80034d4:	24000f80 	.word	0x24000f80
 80034d8:	08001419 	.word	0x08001419

    case SCSI_CMD_INQUIRY:
    {
      scsi_inquiry_resp_t inquiry_rsp =
 80034dc:	f107 0314 	add.w	r3, r7, #20
 80034e0:	2224      	movs	r2, #36	@ 0x24
 80034e2:	2100      	movs	r1, #0
 80034e4:	4618      	mov	r0, r3
 80034e6:	f016 fa71 	bl	80199cc <memset>
 80034ea:	7d7b      	ldrb	r3, [r7, #21]
 80034ec:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80034f0:	757b      	strb	r3, [r7, #21]
 80034f2:	2302      	movs	r3, #2
 80034f4:	75bb      	strb	r3, [r7, #22]
 80034f6:	7dfb      	ldrb	r3, [r7, #23]
 80034f8:	2202      	movs	r2, #2
 80034fa:	f362 0303 	bfi	r3, r2, #0, #4
 80034fe:	75fb      	strb	r3, [r7, #23]
 8003500:	231f      	movs	r3, #31
 8003502:	763b      	strb	r3, [r7, #24]
          .response_data_format = 2,
          .additional_length    = sizeof(scsi_inquiry_resp_t) - 5,
      };

      // vendor_id, product_id, product_rev is space padded string
      memset(inquiry_rsp.vendor_id  , ' ', sizeof(inquiry_rsp.vendor_id));
 8003504:	f107 0314 	add.w	r3, r7, #20
 8003508:	3308      	adds	r3, #8
 800350a:	2208      	movs	r2, #8
 800350c:	2120      	movs	r1, #32
 800350e:	4618      	mov	r0, r3
 8003510:	f016 fa5c 	bl	80199cc <memset>
      memset(inquiry_rsp.product_id , ' ', sizeof(inquiry_rsp.product_id));
 8003514:	f107 0314 	add.w	r3, r7, #20
 8003518:	3310      	adds	r3, #16
 800351a:	2210      	movs	r2, #16
 800351c:	2120      	movs	r1, #32
 800351e:	4618      	mov	r0, r3
 8003520:	f016 fa54 	bl	80199cc <memset>
      memset(inquiry_rsp.product_rev, ' ', sizeof(inquiry_rsp.product_rev));
 8003524:	f107 0314 	add.w	r3, r7, #20
 8003528:	3320      	adds	r3, #32
 800352a:	2204      	movs	r2, #4
 800352c:	2120      	movs	r1, #32
 800352e:	4618      	mov	r0, r3
 8003530:	f016 fa4c 	bl	80199cc <memset>

      tud_msc_inquiry_cb(lun, inquiry_rsp.vendor_id, inquiry_rsp.product_id, inquiry_rsp.product_rev);
 8003534:	f107 0314 	add.w	r3, r7, #20
 8003538:	f103 0420 	add.w	r4, r3, #32
 800353c:	f107 0314 	add.w	r3, r7, #20
 8003540:	f103 0210 	add.w	r2, r3, #16
 8003544:	f107 0314 	add.w	r3, r7, #20
 8003548:	f103 0108 	add.w	r1, r3, #8
 800354c:	7bf8      	ldrb	r0, [r7, #15]
 800354e:	4623      	mov	r3, r4
 8003550:	f7fd feee 	bl	8001330 <tud_msc_inquiry_cb>

      resplen = sizeof(inquiry_rsp);
 8003554:	2324      	movs	r3, #36	@ 0x24
 8003556:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      TU_VERIFY(0 == tu_memcpy_s(buffer, bufsize, &inquiry_rsp, (size_t) resplen));
 800355a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800355e:	687a      	ldr	r2, [r7, #4]
 8003560:	f8c7 20a0 	str.w	r2, [r7, #160]	@ 0xa0
 8003564:	683a      	ldr	r2, [r7, #0]
 8003566:	f8c7 209c 	str.w	r2, [r7, #156]	@ 0x9c
 800356a:	f107 0214 	add.w	r2, r7, #20
 800356e:	f8c7 2098 	str.w	r2, [r7, #152]	@ 0x98
 8003572:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
  if ( count > destsz ) {
 8003576:	f8d7 209c 	ldr.w	r2, [r7, #156]	@ 0x9c
 800357a:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800357e:	429a      	cmp	r2, r3
 8003580:	d202      	bcs.n	8003588 <proc_builtin_scsi+0x390>
    return -1;
 8003582:	f04f 33ff 	mov.w	r3, #4294967295
 8003586:	e008      	b.n	800359a <proc_builtin_scsi+0x3a2>
  memcpy(dest, src, count);
 8003588:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800358c:	f8d7 1098 	ldr.w	r1, [r7, #152]	@ 0x98
 8003590:	f8d7 00a0 	ldr.w	r0, [r7, #160]	@ 0xa0
 8003594:	f016 fadb 	bl	8019b4e <memcpy>
  return 0;
 8003598:	2300      	movs	r3, #0
 800359a:	2b00      	cmp	r3, #0
 800359c:	f000 80cf 	beq.w	800373e <proc_builtin_scsi+0x546>
 80035a0:	2300      	movs	r3, #0
 80035a2:	e0d1      	b.n	8003748 <proc_builtin_scsi+0x550>
    }
    break;

    case SCSI_CMD_MODE_SENSE_6:
    {
      scsi_mode_sense6_resp_t mode_resp =
 80035a4:	2303      	movs	r3, #3
 80035a6:	f887 304c 	strb.w	r3, [r7, #76]	@ 0x4c
 80035aa:	2300      	movs	r3, #0
 80035ac:	f887 304d 	strb.w	r3, [r7, #77]	@ 0x4d
 80035b0:	f897 304e 	ldrb.w	r3, [r7, #78]	@ 0x4e
 80035b4:	f36f 0306 	bfc	r3, #0, #7
 80035b8:	f887 304e 	strb.w	r3, [r7, #78]	@ 0x4e
 80035bc:	f897 304e 	ldrb.w	r3, [r7, #78]	@ 0x4e
 80035c0:	f36f 13c7 	bfc	r3, #7, #1
 80035c4:	f887 304e 	strb.w	r3, [r7, #78]	@ 0x4e
 80035c8:	2300      	movs	r3, #0
 80035ca:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
          .write_protected      = false,
          .reserved             = 0,
          .block_descriptor_len = 0  // no block descriptor are included
      };

      bool writable = true;
 80035ce:	2301      	movs	r3, #1
 80035d0:	f887 30d3 	strb.w	r3, [r7, #211]	@ 0xd3
      if ( tud_msc_is_writable_cb )
 80035d4:	4b5e      	ldr	r3, [pc, #376]	@ (8003750 <proc_builtin_scsi+0x558>)
 80035d6:	2b00      	cmp	r3, #0
 80035d8:	d006      	beq.n	80035e8 <proc_builtin_scsi+0x3f0>
      {
        writable = tud_msc_is_writable_cb(lun);
 80035da:	7bfb      	ldrb	r3, [r7, #15]
 80035dc:	4618      	mov	r0, r3
 80035de:	f7fd ff67 	bl	80014b0 <tud_msc_is_writable_cb>
 80035e2:	4603      	mov	r3, r0
 80035e4:	f887 30d3 	strb.w	r3, [r7, #211]	@ 0xd3
      }

      mode_resp.write_protected = !writable;
 80035e8:	f897 30d3 	ldrb.w	r3, [r7, #211]	@ 0xd3
 80035ec:	2b00      	cmp	r3, #0
 80035ee:	bf14      	ite	ne
 80035f0:	2301      	movne	r3, #1
 80035f2:	2300      	moveq	r3, #0
 80035f4:	b2db      	uxtb	r3, r3
 80035f6:	f083 0301 	eor.w	r3, r3, #1
 80035fa:	b2db      	uxtb	r3, r3
 80035fc:	f003 0301 	and.w	r3, r3, #1
 8003600:	b2da      	uxtb	r2, r3
 8003602:	f897 304e 	ldrb.w	r3, [r7, #78]	@ 0x4e
 8003606:	f362 13c7 	bfi	r3, r2, #7, #1
 800360a:	f887 304e 	strb.w	r3, [r7, #78]	@ 0x4e

      resplen = sizeof(mode_resp);
 800360e:	2304      	movs	r3, #4
 8003610:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      TU_VERIFY(0 == tu_memcpy_s(buffer, bufsize, &mode_resp, (size_t) resplen));
 8003614:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8003618:	687a      	ldr	r2, [r7, #4]
 800361a:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
 800361e:	683a      	ldr	r2, [r7, #0]
 8003620:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8003624:	f107 024c 	add.w	r2, r7, #76	@ 0x4c
 8003628:	f8c7 2088 	str.w	r2, [r7, #136]	@ 0x88
 800362c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  if ( count > destsz ) {
 8003630:	f8d7 208c 	ldr.w	r2, [r7, #140]	@ 0x8c
 8003634:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8003638:	429a      	cmp	r2, r3
 800363a:	d202      	bcs.n	8003642 <proc_builtin_scsi+0x44a>
    return -1;
 800363c:	f04f 33ff 	mov.w	r3, #4294967295
 8003640:	e008      	b.n	8003654 <proc_builtin_scsi+0x45c>
  memcpy(dest, src, count);
 8003642:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 8003646:	f8d7 1088 	ldr.w	r1, [r7, #136]	@ 0x88
 800364a:	f8d7 0090 	ldr.w	r0, [r7, #144]	@ 0x90
 800364e:	f016 fa7e 	bl	8019b4e <memcpy>
  return 0;
 8003652:	2300      	movs	r3, #0
 8003654:	2b00      	cmp	r3, #0
 8003656:	d074      	beq.n	8003742 <proc_builtin_scsi+0x54a>
 8003658:	2300      	movs	r3, #0
 800365a:	e075      	b.n	8003748 <proc_builtin_scsi+0x550>
    }
    break;

    case SCSI_CMD_REQUEST_SENSE:
    {
      scsi_sense_fixed_resp_t sense_rsp =
 800365c:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8003660:	2200      	movs	r2, #0
 8003662:	601a      	str	r2, [r3, #0]
 8003664:	605a      	str	r2, [r3, #4]
 8003666:	609a      	str	r2, [r3, #8]
 8003668:	60da      	str	r2, [r3, #12]
 800366a:	821a      	strh	r2, [r3, #16]
 800366c:	f897 3038 	ldrb.w	r3, [r7, #56]	@ 0x38
 8003670:	2270      	movs	r2, #112	@ 0x70
 8003672:	f362 0306 	bfi	r3, r2, #0, #7
 8003676:	f887 3038 	strb.w	r3, [r7, #56]	@ 0x38
 800367a:	f897 3038 	ldrb.w	r3, [r7, #56]	@ 0x38
 800367e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003682:	f887 3038 	strb.w	r3, [r7, #56]	@ 0x38
      {
          .response_code = 0x70, // current, fixed format
          .valid         = 1
      };

      sense_rsp.add_sense_len       = sizeof(scsi_sense_fixed_resp_t) - 8;
 8003686:	230a      	movs	r3, #10
 8003688:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
      sense_rsp.sense_key           = (uint8_t) (p_msc->sense_key & 0x0F);
 800368c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8003690:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003694:	f003 030f 	and.w	r3, r3, #15
 8003698:	b2da      	uxtb	r2, r3
 800369a:	f897 303a 	ldrb.w	r3, [r7, #58]	@ 0x3a
 800369e:	f362 0303 	bfi	r3, r2, #0, #4
 80036a2:	f887 303a 	strb.w	r3, [r7, #58]	@ 0x3a
      sense_rsp.add_sense_code      = p_msc->add_sense_code;
 80036a6:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80036aa:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80036ae:	f887 3044 	strb.w	r3, [r7, #68]	@ 0x44
      sense_rsp.add_sense_qualifier = p_msc->add_sense_qualifier;
 80036b2:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80036b6:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80036ba:	f887 3045 	strb.w	r3, [r7, #69]	@ 0x45

      resplen = sizeof(sense_rsp);
 80036be:	2312      	movs	r3, #18
 80036c0:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      TU_VERIFY(0 == tu_memcpy_s(buffer, bufsize, &sense_rsp, (size_t) resplen));
 80036c4:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80036c8:	687a      	ldr	r2, [r7, #4]
 80036ca:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 80036ce:	683a      	ldr	r2, [r7, #0]
 80036d0:	67fa      	str	r2, [r7, #124]	@ 0x7c
 80036d2:	f107 0238 	add.w	r2, r7, #56	@ 0x38
 80036d6:	67ba      	str	r2, [r7, #120]	@ 0x78
 80036d8:	677b      	str	r3, [r7, #116]	@ 0x74
  if ( count > destsz ) {
 80036da:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 80036dc:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80036de:	429a      	cmp	r2, r3
 80036e0:	d202      	bcs.n	80036e8 <proc_builtin_scsi+0x4f0>
    return -1;
 80036e2:	f04f 33ff 	mov.w	r3, #4294967295
 80036e6:	e006      	b.n	80036f6 <proc_builtin_scsi+0x4fe>
  memcpy(dest, src, count);
 80036e8:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 80036ea:	6fb9      	ldr	r1, [r7, #120]	@ 0x78
 80036ec:	f8d7 0080 	ldr.w	r0, [r7, #128]	@ 0x80
 80036f0:	f016 fa2d 	bl	8019b4e <memcpy>
  return 0;
 80036f4:	2300      	movs	r3, #0
 80036f6:	2b00      	cmp	r3, #0
 80036f8:	d001      	beq.n	80036fe <proc_builtin_scsi+0x506>
 80036fa:	2300      	movs	r3, #0
 80036fc:	e024      	b.n	8003748 <proc_builtin_scsi+0x550>

      // request sense callback could overwrite the sense data
      if (tud_msc_request_sense_cb)
 80036fe:	4b15      	ldr	r3, [pc, #84]	@ (8003754 <proc_builtin_scsi+0x55c>)
 8003700:	2b00      	cmp	r3, #0
 8003702:	d008      	beq.n	8003716 <proc_builtin_scsi+0x51e>
      {
        resplen = tud_msc_request_sense_cb(lun, buffer, (uint16_t) bufsize);
 8003704:	683b      	ldr	r3, [r7, #0]
 8003706:	b29a      	uxth	r2, r3
 8003708:	7bfb      	ldrb	r3, [r7, #15]
 800370a:	6879      	ldr	r1, [r7, #4]
 800370c:	4618      	mov	r0, r3
 800370e:	f3af 8000 	nop.w
 8003712:	f8c7 00d4 	str.w	r0, [r7, #212]	@ 0xd4
      }

      // Clear sense data after copy
      tud_msc_set_sense(lun, 0, 0, 0);
 8003716:	7bf8      	ldrb	r0, [r7, #15]
 8003718:	2300      	movs	r3, #0
 800371a:	2200      	movs	r2, #0
 800371c:	2100      	movs	r1, #0
 800371e:	f7ff f90d 	bl	800293c <tud_msc_set_sense>
    }
    break;
 8003722:	e00f      	b.n	8003744 <proc_builtin_scsi+0x54c>

    default: resplen = -1; break;
 8003724:	f04f 33ff 	mov.w	r3, #4294967295
 8003728:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 800372c:	e00a      	b.n	8003744 <proc_builtin_scsi+0x54c>
    break;
 800372e:	bf00      	nop
 8003730:	e008      	b.n	8003744 <proc_builtin_scsi+0x54c>
    break;
 8003732:	bf00      	nop
 8003734:	e006      	b.n	8003744 <proc_builtin_scsi+0x54c>
    break;
 8003736:	bf00      	nop
 8003738:	e004      	b.n	8003744 <proc_builtin_scsi+0x54c>
    break;
 800373a:	bf00      	nop
 800373c:	e002      	b.n	8003744 <proc_builtin_scsi+0x54c>
    break;
 800373e:	bf00      	nop
 8003740:	e000      	b.n	8003744 <proc_builtin_scsi+0x54c>
    break;
 8003742:	bf00      	nop
  }

  return resplen;
 8003744:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
}
 8003748:	4618      	mov	r0, r3
 800374a:	37dc      	adds	r7, #220	@ 0xdc
 800374c:	46bd      	mov	sp, r7
 800374e:	bd90      	pop	{r4, r7, pc}
 8003750:	080014b1 	.word	0x080014b1
 8003754:	00000000 	.word	0x00000000

08003758 <proc_read10_cmd>:

static void proc_read10_cmd(uint8_t rhport, mscd_interface_t* p_msc)
{
 8003758:	b580      	push	{r7, lr}
 800375a:	b092      	sub	sp, #72	@ 0x48
 800375c:	af02      	add	r7, sp, #8
 800375e:	4603      	mov	r3, r0
 8003760:	6039      	str	r1, [r7, #0]
 8003762:	71fb      	strb	r3, [r7, #7]
  msc_cbw_t const * p_cbw = &p_msc->cbw;
 8003764:	683b      	ldr	r3, [r7, #0]
 8003766:	63fb      	str	r3, [r7, #60]	@ 0x3c

  // block size already verified not zero
  uint16_t const block_sz = rdwr10_get_blocksize(p_cbw);
 8003768:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 800376a:	f7ff f86e 	bl	800284a <rdwr10_get_blocksize>
 800376e:	4603      	mov	r3, r0
 8003770:	877b      	strh	r3, [r7, #58]	@ 0x3a

  // Adjust lba with transferred bytes
  uint32_t const lba = rdwr10_get_lba(p_cbw->command) + (p_msc->xferred_len / block_sz);
 8003772:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003774:	330f      	adds	r3, #15
 8003776:	4618      	mov	r0, r3
 8003778:	f7ff f841 	bl	80027fe <rdwr10_get_lba>
 800377c:	4601      	mov	r1, r0
 800377e:	683b      	ldr	r3, [r7, #0]
 8003780:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003782:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 8003784:	fbb2 f3f3 	udiv	r3, r2, r3
 8003788:	440b      	add	r3, r1
 800378a:	637b      	str	r3, [r7, #52]	@ 0x34

  // remaining bytes capped at class buffer
  int32_t nbytes = (int32_t) tu_min32(sizeof(_mscd_buf), p_cbw->total_bytes-p_msc->xferred_len);
 800378c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800378e:	689a      	ldr	r2, [r3, #8]
 8003790:	683b      	ldr	r3, [r7, #0]
 8003792:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003794:	1ad3      	subs	r3, r2, r3
 8003796:	2240      	movs	r2, #64	@ 0x40
 8003798:	627a      	str	r2, [r7, #36]	@ 0x24
 800379a:	623b      	str	r3, [r7, #32]
TU_ATTR_ALWAYS_INLINE static inline uint32_t tu_min32 (uint32_t x, uint32_t y) { return (x < y) ? x : y; }
 800379c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800379e:	6a3b      	ldr	r3, [r7, #32]
 80037a0:	4293      	cmp	r3, r2
 80037a2:	bf28      	it	cs
 80037a4:	4613      	movcs	r3, r2
 80037a6:	633b      	str	r3, [r7, #48]	@ 0x30

  // Application can consume smaller bytes
  uint32_t const offset = p_msc->xferred_len % block_sz;
 80037a8:	683b      	ldr	r3, [r7, #0]
 80037aa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80037ac:	8f7a      	ldrh	r2, [r7, #58]	@ 0x3a
 80037ae:	fbb3 f1f2 	udiv	r1, r3, r2
 80037b2:	fb01 f202 	mul.w	r2, r1, r2
 80037b6:	1a9b      	subs	r3, r3, r2
 80037b8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  nbytes = tud_msc_read10_cb(p_cbw->lun, lba, offset, _mscd_buf, (uint32_t) nbytes);
 80037ba:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80037bc:	7b58      	ldrb	r0, [r3, #13]
 80037be:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80037c0:	9300      	str	r3, [sp, #0]
 80037c2:	4b2c      	ldr	r3, [pc, #176]	@ (8003874 <proc_read10_cmd+0x11c>)
 80037c4:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80037c6:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 80037c8:	f7fd fe46 	bl	8001458 <tud_msc_read10_cb>
 80037cc:	6338      	str	r0, [r7, #48]	@ 0x30

  if ( nbytes < 0 )
 80037ce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80037d0:	2b00      	cmp	r3, #0
 80037d2:	da0b      	bge.n	80037ec <proc_read10_cmd+0x94>
  {
    // negative means error -> endpoint is stalled & status in CSW set to failed
    TU_LOG_DRV("  tud_msc_read10_cb() return -1\r\n");

    // set sense
    set_sense_medium_not_present(p_cbw->lun);
 80037d4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80037d6:	7b5b      	ldrb	r3, [r3, #13]
 80037d8:	4618      	mov	r0, r3
 80037da:	f7ff f8d3 	bl	8002984 <set_sense_medium_not_present>

    fail_scsi_op(rhport, p_msc, MSC_CSW_STATUS_FAILED);
 80037de:	79fb      	ldrb	r3, [r7, #7]
 80037e0:	2201      	movs	r2, #1
 80037e2:	6839      	ldr	r1, [r7, #0]
 80037e4:	4618      	mov	r0, r3
 80037e6:	f7fe ffb2 	bl	800274e <fail_scsi_op>
 80037ea:	e040      	b.n	800386e <proc_read10_cmd+0x116>
  }
  else if ( nbytes == 0 )
 80037ec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80037ee:	2b00      	cmp	r3, #0
 80037f0:	d124      	bne.n	800383c <proc_read10_cmd+0xe4>
  {
    // zero means not ready -> simulate an transfer complete so that this driver callback will fired again
    dcd_event_xfer_complete(rhport, p_msc->ep_in, 0, XFER_RESULT_SUCCESS, false);
 80037f2:	683b      	ldr	r3, [r7, #0]
 80037f4:	f893 202e 	ldrb.w	r2, [r3, #46]	@ 0x2e
 80037f8:	79fb      	ldrb	r3, [r7, #7]
 80037fa:	77fb      	strb	r3, [r7, #31]
 80037fc:	4613      	mov	r3, r2
 80037fe:	77bb      	strb	r3, [r7, #30]
 8003800:	2300      	movs	r3, #0
 8003802:	61bb      	str	r3, [r7, #24]
 8003804:	2300      	movs	r3, #0
 8003806:	75fb      	strb	r3, [r7, #23]
 8003808:	2300      	movs	r3, #0
 800380a:	75bb      	strb	r3, [r7, #22]
  dcd_event_handler(&event, in_isr);
}

// helper to send transfer complete event
TU_ATTR_ALWAYS_INLINE static inline void dcd_event_xfer_complete (uint8_t rhport, uint8_t ep_addr, uint32_t xferred_bytes, uint8_t result, bool in_isr) {
  dcd_event_t event = { .rhport = rhport, .event_id = DCD_EVENT_XFER_COMPLETE };
 800380c:	f107 0308 	add.w	r3, r7, #8
 8003810:	2200      	movs	r2, #0
 8003812:	601a      	str	r2, [r3, #0]
 8003814:	605a      	str	r2, [r3, #4]
 8003816:	609a      	str	r2, [r3, #8]
 8003818:	7ffb      	ldrb	r3, [r7, #31]
 800381a:	723b      	strb	r3, [r7, #8]
 800381c:	2307      	movs	r3, #7
 800381e:	727b      	strb	r3, [r7, #9]

  event.xfer_complete.ep_addr = ep_addr;
 8003820:	7fbb      	ldrb	r3, [r7, #30]
 8003822:	733b      	strb	r3, [r7, #12]
  event.xfer_complete.len     = xferred_bytes;
 8003824:	69bb      	ldr	r3, [r7, #24]
 8003826:	613b      	str	r3, [r7, #16]
  event.xfer_complete.result  = result;
 8003828:	7dfb      	ldrb	r3, [r7, #23]
 800382a:	737b      	strb	r3, [r7, #13]

  dcd_event_handler(&event, in_isr);
 800382c:	7dba      	ldrb	r2, [r7, #22]
 800382e:	f107 0308 	add.w	r3, r7, #8
 8003832:	4611      	mov	r1, r2
 8003834:	4618      	mov	r0, r3
 8003836:	f002 fb47 	bl	8005ec8 <dcd_event_handler>
}
 800383a:	e018      	b.n	800386e <proc_read10_cmd+0x116>
  }
  else
  {
    TU_ASSERT( usbd_edpt_xfer(rhport, p_msc->ep_in, _mscd_buf, (uint16_t) nbytes), );
 800383c:	683b      	ldr	r3, [r7, #0]
 800383e:	f893 102e 	ldrb.w	r1, [r3, #46]	@ 0x2e
 8003842:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003844:	b29b      	uxth	r3, r3
 8003846:	79f8      	ldrb	r0, [r7, #7]
 8003848:	4a0a      	ldr	r2, [pc, #40]	@ (8003874 <proc_read10_cmd+0x11c>)
 800384a:	f002 fdcf 	bl	80063ec <usbd_edpt_xfer>
 800384e:	4603      	mov	r3, r0
 8003850:	f083 0301 	eor.w	r3, r3, #1
 8003854:	b2db      	uxtb	r3, r3
 8003856:	2b00      	cmp	r3, #0
 8003858:	d009      	beq.n	800386e <proc_read10_cmd+0x116>
 800385a:	4b07      	ldr	r3, [pc, #28]	@ (8003878 <proc_read10_cmd+0x120>)
 800385c:	62bb      	str	r3, [r7, #40]	@ 0x28
 800385e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003860:	681b      	ldr	r3, [r3, #0]
 8003862:	f003 0301 	and.w	r3, r3, #1
 8003866:	2b00      	cmp	r3, #0
 8003868:	d000      	beq.n	800386c <proc_read10_cmd+0x114>
 800386a:	be00      	bkpt	0x0000
 800386c:	bf00      	nop
  }
}
 800386e:	3740      	adds	r7, #64	@ 0x40
 8003870:	46bd      	mov	sp, r7
 8003872:	bd80      	pop	{r7, pc}
 8003874:	24000fc0 	.word	0x24000fc0
 8003878:	e000edf0 	.word	0xe000edf0

0800387c <proc_write10_cmd>:

static void proc_write10_cmd(uint8_t rhport, mscd_interface_t* p_msc)
{
 800387c:	b580      	push	{r7, lr}
 800387e:	b088      	sub	sp, #32
 8003880:	af00      	add	r7, sp, #0
 8003882:	4603      	mov	r3, r0
 8003884:	6039      	str	r1, [r7, #0]
 8003886:	71fb      	strb	r3, [r7, #7]
  msc_cbw_t const * p_cbw = &p_msc->cbw;
 8003888:	683b      	ldr	r3, [r7, #0]
 800388a:	61bb      	str	r3, [r7, #24]
  bool writable = true;
 800388c:	2301      	movs	r3, #1
 800388e:	77fb      	strb	r3, [r7, #31]

  if ( tud_msc_is_writable_cb )
 8003890:	4b23      	ldr	r3, [pc, #140]	@ (8003920 <proc_write10_cmd+0xa4>)
 8003892:	2b00      	cmp	r3, #0
 8003894:	d006      	beq.n	80038a4 <proc_write10_cmd+0x28>
  {
    writable = tud_msc_is_writable_cb(p_cbw->lun);
 8003896:	69bb      	ldr	r3, [r7, #24]
 8003898:	7b5b      	ldrb	r3, [r3, #13]
 800389a:	4618      	mov	r0, r3
 800389c:	f7fd fe08 	bl	80014b0 <tud_msc_is_writable_cb>
 80038a0:	4603      	mov	r3, r0
 80038a2:	77fb      	strb	r3, [r7, #31]
  }

  if ( !writable )
 80038a4:	7ffb      	ldrb	r3, [r7, #31]
 80038a6:	f083 0301 	eor.w	r3, r3, #1
 80038aa:	b2db      	uxtb	r3, r3
 80038ac:	2b00      	cmp	r3, #0
 80038ae:	d00d      	beq.n	80038cc <proc_write10_cmd+0x50>
  {
    // Not writable, complete this SCSI op with error
    // Sense = Write protected
    tud_msc_set_sense(p_cbw->lun, SCSI_SENSE_DATA_PROTECT, 0x27, 0x00);
 80038b0:	69bb      	ldr	r3, [r7, #24]
 80038b2:	7b58      	ldrb	r0, [r3, #13]
 80038b4:	2300      	movs	r3, #0
 80038b6:	2227      	movs	r2, #39	@ 0x27
 80038b8:	2107      	movs	r1, #7
 80038ba:	f7ff f83f 	bl	800293c <tud_msc_set_sense>
    fail_scsi_op(rhport, p_msc, MSC_CSW_STATUS_FAILED);
 80038be:	79fb      	ldrb	r3, [r7, #7]
 80038c0:	2201      	movs	r2, #1
 80038c2:	6839      	ldr	r1, [r7, #0]
 80038c4:	4618      	mov	r0, r3
 80038c6:	f7fe ff42 	bl	800274e <fail_scsi_op>
    return;
 80038ca:	e025      	b.n	8003918 <proc_write10_cmd+0x9c>
  }

  // remaining bytes capped at class buffer
  uint16_t nbytes = (uint16_t) tu_min32(sizeof(_mscd_buf), p_cbw->total_bytes-p_msc->xferred_len);
 80038cc:	69bb      	ldr	r3, [r7, #24]
 80038ce:	689a      	ldr	r2, [r3, #8]
 80038d0:	683b      	ldr	r3, [r7, #0]
 80038d2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80038d4:	1ad3      	subs	r3, r2, r3
 80038d6:	2240      	movs	r2, #64	@ 0x40
 80038d8:	60fa      	str	r2, [r7, #12]
 80038da:	60bb      	str	r3, [r7, #8]
 80038dc:	68fa      	ldr	r2, [r7, #12]
 80038de:	68bb      	ldr	r3, [r7, #8]
 80038e0:	4293      	cmp	r3, r2
 80038e2:	bf28      	it	cs
 80038e4:	4613      	movcs	r3, r2
 80038e6:	82fb      	strh	r3, [r7, #22]

  // Write10 callback will be called later when usb transfer complete
  TU_ASSERT( usbd_edpt_xfer(rhport, p_msc->ep_out, _mscd_buf, nbytes), );
 80038e8:	683b      	ldr	r3, [r7, #0]
 80038ea:	f893 102f 	ldrb.w	r1, [r3, #47]	@ 0x2f
 80038ee:	8afb      	ldrh	r3, [r7, #22]
 80038f0:	79f8      	ldrb	r0, [r7, #7]
 80038f2:	4a0c      	ldr	r2, [pc, #48]	@ (8003924 <proc_write10_cmd+0xa8>)
 80038f4:	f002 fd7a 	bl	80063ec <usbd_edpt_xfer>
 80038f8:	4603      	mov	r3, r0
 80038fa:	f083 0301 	eor.w	r3, r3, #1
 80038fe:	b2db      	uxtb	r3, r3
 8003900:	2b00      	cmp	r3, #0
 8003902:	d009      	beq.n	8003918 <proc_write10_cmd+0x9c>
 8003904:	4b08      	ldr	r3, [pc, #32]	@ (8003928 <proc_write10_cmd+0xac>)
 8003906:	613b      	str	r3, [r7, #16]
 8003908:	693b      	ldr	r3, [r7, #16]
 800390a:	681b      	ldr	r3, [r3, #0]
 800390c:	f003 0301 	and.w	r3, r3, #1
 8003910:	2b00      	cmp	r3, #0
 8003912:	d000      	beq.n	8003916 <proc_write10_cmd+0x9a>
 8003914:	be00      	bkpt	0x0000
 8003916:	bf00      	nop
}
 8003918:	3720      	adds	r7, #32
 800391a:	46bd      	mov	sp, r7
 800391c:	bd80      	pop	{r7, pc}
 800391e:	bf00      	nop
 8003920:	080014b1 	.word	0x080014b1
 8003924:	24000fc0 	.word	0x24000fc0
 8003928:	e000edf0 	.word	0xe000edf0

0800392c <proc_write10_new_data>:

// process new data arrived from WRITE10
static void proc_write10_new_data(uint8_t rhport, mscd_interface_t* p_msc, uint32_t xferred_bytes)
{
 800392c:	b580      	push	{r7, lr}
 800392e:	b092      	sub	sp, #72	@ 0x48
 8003930:	af02      	add	r7, sp, #8
 8003932:	4603      	mov	r3, r0
 8003934:	60b9      	str	r1, [r7, #8]
 8003936:	607a      	str	r2, [r7, #4]
 8003938:	73fb      	strb	r3, [r7, #15]
  msc_cbw_t const * p_cbw = &p_msc->cbw;
 800393a:	68bb      	ldr	r3, [r7, #8]
 800393c:	63fb      	str	r3, [r7, #60]	@ 0x3c

  // block size already verified not zero
  uint16_t const block_sz = rdwr10_get_blocksize(p_cbw);
 800393e:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 8003940:	f7fe ff83 	bl	800284a <rdwr10_get_blocksize>
 8003944:	4603      	mov	r3, r0
 8003946:	877b      	strh	r3, [r7, #58]	@ 0x3a

  // Adjust lba with transferred bytes
  uint32_t const lba = rdwr10_get_lba(p_cbw->command) + (p_msc->xferred_len / block_sz);
 8003948:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800394a:	330f      	adds	r3, #15
 800394c:	4618      	mov	r0, r3
 800394e:	f7fe ff56 	bl	80027fe <rdwr10_get_lba>
 8003952:	4601      	mov	r1, r0
 8003954:	68bb      	ldr	r3, [r7, #8]
 8003956:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003958:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 800395a:	fbb2 f3f3 	udiv	r3, r2, r3
 800395e:	440b      	add	r3, r1
 8003960:	637b      	str	r3, [r7, #52]	@ 0x34

  // Invoke callback to consume new data
  uint32_t const offset = p_msc->xferred_len % block_sz;
 8003962:	68bb      	ldr	r3, [r7, #8]
 8003964:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003966:	8f7a      	ldrh	r2, [r7, #58]	@ 0x3a
 8003968:	fbb3 f1f2 	udiv	r1, r3, r2
 800396c:	fb01 f202 	mul.w	r2, r1, r2
 8003970:	1a9b      	subs	r3, r3, r2
 8003972:	633b      	str	r3, [r7, #48]	@ 0x30
  int32_t nbytes = tud_msc_write10_cb(p_cbw->lun, lba, offset, _mscd_buf, xferred_bytes);
 8003974:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003976:	7b58      	ldrb	r0, [r3, #13]
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	9300      	str	r3, [sp, #0]
 800397c:	4b3c      	ldr	r3, [pc, #240]	@ (8003a70 <proc_write10_new_data+0x144>)
 800397e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003980:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8003982:	f7fd fda1 	bl	80014c8 <tud_msc_write10_cb>
 8003986:	62f8      	str	r0, [r7, #44]	@ 0x2c

  if ( nbytes < 0 )
 8003988:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800398a:	2b00      	cmp	r3, #0
 800398c:	da11      	bge.n	80039b2 <proc_write10_new_data+0x86>
  {
    // negative means error -> failed this scsi op
    TU_LOG_DRV("  tud_msc_write10_cb() return -1\r\n");

    // update actual byte before failed
    p_msc->xferred_len += xferred_bytes;
 800398e:	68bb      	ldr	r3, [r7, #8]
 8003990:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	441a      	add	r2, r3
 8003996:	68bb      	ldr	r3, [r7, #8]
 8003998:	639a      	str	r2, [r3, #56]	@ 0x38

    // Set sense
    set_sense_medium_not_present(p_cbw->lun);
 800399a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800399c:	7b5b      	ldrb	r3, [r3, #13]
 800399e:	4618      	mov	r0, r3
 80039a0:	f7fe fff0 	bl	8002984 <set_sense_medium_not_present>

    fail_scsi_op(rhport, p_msc, MSC_CSW_STATUS_FAILED);
 80039a4:	7bfb      	ldrb	r3, [r7, #15]
 80039a6:	2201      	movs	r2, #1
 80039a8:	68b9      	ldr	r1, [r7, #8]
 80039aa:	4618      	mov	r0, r3
 80039ac:	f7fe fecf 	bl	800274e <fail_scsi_op>
        // prepare to receive more data from host
        proc_write10_cmd(rhport, p_msc);
      }
    }
  }
}
 80039b0:	e059      	b.n	8003a66 <proc_write10_new_data+0x13a>
    if ( (uint32_t) nbytes < xferred_bytes )
 80039b2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80039b4:	687a      	ldr	r2, [r7, #4]
 80039b6:	429a      	cmp	r2, r3
 80039b8:	d93f      	bls.n	8003a3a <proc_write10_new_data+0x10e>
      uint32_t const left_over = xferred_bytes - (uint32_t) nbytes;
 80039ba:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80039bc:	687a      	ldr	r2, [r7, #4]
 80039be:	1ad3      	subs	r3, r2, r3
 80039c0:	62bb      	str	r3, [r7, #40]	@ 0x28
      if ( nbytes > 0 )
 80039c2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80039c4:	2b00      	cmp	r3, #0
 80039c6:	dd0e      	ble.n	80039e6 <proc_write10_new_data+0xba>
        p_msc->xferred_len += (uint16_t) nbytes;
 80039c8:	68bb      	ldr	r3, [r7, #8]
 80039ca:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80039cc:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80039ce:	b292      	uxth	r2, r2
 80039d0:	441a      	add	r2, r3
 80039d2:	68bb      	ldr	r3, [r7, #8]
 80039d4:	639a      	str	r2, [r3, #56]	@ 0x38
        memmove(_mscd_buf, _mscd_buf+nbytes, left_over);
 80039d6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80039d8:	4a25      	ldr	r2, [pc, #148]	@ (8003a70 <proc_write10_new_data+0x144>)
 80039da:	4413      	add	r3, r2
 80039dc:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80039de:	4619      	mov	r1, r3
 80039e0:	4823      	ldr	r0, [pc, #140]	@ (8003a70 <proc_write10_new_data+0x144>)
 80039e2:	f015 ffd9 	bl	8019998 <memmove>
      dcd_event_xfer_complete(rhport, p_msc->ep_out, left_over, XFER_RESULT_SUCCESS, false);
 80039e6:	68bb      	ldr	r3, [r7, #8]
 80039e8:	f893 202f 	ldrb.w	r2, [r3, #47]	@ 0x2f
 80039ec:	7bfb      	ldrb	r3, [r7, #15]
 80039ee:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 80039f2:	4613      	mov	r3, r2
 80039f4:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 80039f8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80039fa:	623b      	str	r3, [r7, #32]
 80039fc:	2300      	movs	r3, #0
 80039fe:	77fb      	strb	r3, [r7, #31]
 8003a00:	2300      	movs	r3, #0
 8003a02:	77bb      	strb	r3, [r7, #30]
  dcd_event_t event = { .rhport = rhport, .event_id = DCD_EVENT_XFER_COMPLETE };
 8003a04:	f107 0310 	add.w	r3, r7, #16
 8003a08:	2200      	movs	r2, #0
 8003a0a:	601a      	str	r2, [r3, #0]
 8003a0c:	605a      	str	r2, [r3, #4]
 8003a0e:	609a      	str	r2, [r3, #8]
 8003a10:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8003a14:	743b      	strb	r3, [r7, #16]
 8003a16:	2307      	movs	r3, #7
 8003a18:	747b      	strb	r3, [r7, #17]
  event.xfer_complete.ep_addr = ep_addr;
 8003a1a:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8003a1e:	753b      	strb	r3, [r7, #20]
  event.xfer_complete.len     = xferred_bytes;
 8003a20:	6a3b      	ldr	r3, [r7, #32]
 8003a22:	61bb      	str	r3, [r7, #24]
  event.xfer_complete.result  = result;
 8003a24:	7ffb      	ldrb	r3, [r7, #31]
 8003a26:	757b      	strb	r3, [r7, #21]
  dcd_event_handler(&event, in_isr);
 8003a28:	7fba      	ldrb	r2, [r7, #30]
 8003a2a:	f107 0310 	add.w	r3, r7, #16
 8003a2e:	4611      	mov	r1, r2
 8003a30:	4618      	mov	r0, r3
 8003a32:	f002 fa49 	bl	8005ec8 <dcd_event_handler>
}
 8003a36:	bf00      	nop
}
 8003a38:	e015      	b.n	8003a66 <proc_write10_new_data+0x13a>
      p_msc->xferred_len += xferred_bytes;
 8003a3a:	68bb      	ldr	r3, [r7, #8]
 8003a3c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	441a      	add	r2, r3
 8003a42:	68bb      	ldr	r3, [r7, #8]
 8003a44:	639a      	str	r2, [r3, #56]	@ 0x38
      if ( p_msc->xferred_len >= p_msc->total_len )
 8003a46:	68bb      	ldr	r3, [r7, #8]
 8003a48:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003a4a:	68bb      	ldr	r3, [r7, #8]
 8003a4c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003a4e:	429a      	cmp	r2, r3
 8003a50:	d304      	bcc.n	8003a5c <proc_write10_new_data+0x130>
        p_msc->stage = MSC_STAGE_STATUS;
 8003a52:	68bb      	ldr	r3, [r7, #8]
 8003a54:	2202      	movs	r2, #2
 8003a56:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
}
 8003a5a:	e004      	b.n	8003a66 <proc_write10_new_data+0x13a>
        proc_write10_cmd(rhport, p_msc);
 8003a5c:	7bfb      	ldrb	r3, [r7, #15]
 8003a5e:	68b9      	ldr	r1, [r7, #8]
 8003a60:	4618      	mov	r0, r3
 8003a62:	f7ff ff0b 	bl	800387c <proc_write10_cmd>
}
 8003a66:	bf00      	nop
 8003a68:	3740      	adds	r7, #64	@ 0x40
 8003a6a:	46bd      	mov	sp, r7
 8003a6c:	bd80      	pop	{r7, pc}
 8003a6e:	bf00      	nop
 8003a70:	24000fc0 	.word	0x24000fc0

08003a74 <tud_network_recv_renew>:
CFG_TUD_MEM_SECTION tu_static netd_interface_t _netd_itf;

tu_static bool can_xmit;

void tud_network_recv_renew(void)
{
 8003a74:	b580      	push	{r7, lr}
 8003a76:	af00      	add	r7, sp, #0
  usbd_edpt_xfer(0, _netd_itf.ep_out, received, sizeof(received));
 8003a78:	4b04      	ldr	r3, [pc, #16]	@ (8003a8c <tud_network_recv_renew+0x18>)
 8003a7a:	7919      	ldrb	r1, [r3, #4]
 8003a7c:	f240 6342 	movw	r3, #1602	@ 0x642
 8003a80:	4a03      	ldr	r2, [pc, #12]	@ (8003a90 <tud_network_recv_renew+0x1c>)
 8003a82:	2000      	movs	r0, #0
 8003a84:	f002 fcb2 	bl	80063ec <usbd_edpt_xfer>
}
 8003a88:	bf00      	nop
 8003a8a:	bd80      	pop	{r7, pc}
 8003a8c:	24001d00 	.word	0x24001d00
 8003a90:	24001000 	.word	0x24001000

08003a94 <do_in_xfer>:

static void do_in_xfer(uint8_t *buf, uint16_t len)
{
 8003a94:	b580      	push	{r7, lr}
 8003a96:	b082      	sub	sp, #8
 8003a98:	af00      	add	r7, sp, #0
 8003a9a:	6078      	str	r0, [r7, #4]
 8003a9c:	460b      	mov	r3, r1
 8003a9e:	807b      	strh	r3, [r7, #2]
  can_xmit = false;
 8003aa0:	4b06      	ldr	r3, [pc, #24]	@ (8003abc <do_in_xfer+0x28>)
 8003aa2:	2200      	movs	r2, #0
 8003aa4:	701a      	strb	r2, [r3, #0]
  usbd_edpt_xfer(0, _netd_itf.ep_in, buf, len);
 8003aa6:	4b06      	ldr	r3, [pc, #24]	@ (8003ac0 <do_in_xfer+0x2c>)
 8003aa8:	78d9      	ldrb	r1, [r3, #3]
 8003aaa:	887b      	ldrh	r3, [r7, #2]
 8003aac:	687a      	ldr	r2, [r7, #4]
 8003aae:	2000      	movs	r0, #0
 8003ab0:	f002 fc9c 	bl	80063ec <usbd_edpt_xfer>
}
 8003ab4:	bf00      	nop
 8003ab6:	3708      	adds	r7, #8
 8003ab8:	46bd      	mov	sp, r7
 8003aba:	bd80      	pop	{r7, pc}
 8003abc:	24001d0c 	.word	0x24001d0c
 8003ac0:	24001d00 	.word	0x24001d00

08003ac4 <netd_report>:

void netd_report(uint8_t *buf, uint16_t len)
{
 8003ac4:	b580      	push	{r7, lr}
 8003ac6:	b084      	sub	sp, #16
 8003ac8:	af00      	add	r7, sp, #0
 8003aca:	6078      	str	r0, [r7, #4]
 8003acc:	460b      	mov	r3, r1
 8003ace:	807b      	strh	r3, [r7, #2]
  uint8_t const rhport = 0;
 8003ad0:	2300      	movs	r3, #0
 8003ad2:	73fb      	strb	r3, [r7, #15]

  // skip if previous report not yet acknowledged by host
  if ( usbd_edpt_busy(rhport, _netd_itf.ep_notif) ) return;
 8003ad4:	4b0a      	ldr	r3, [pc, #40]	@ (8003b00 <netd_report+0x3c>)
 8003ad6:	789a      	ldrb	r2, [r3, #2]
 8003ad8:	7bfb      	ldrb	r3, [r7, #15]
 8003ada:	4611      	mov	r1, r2
 8003adc:	4618      	mov	r0, r3
 8003ade:	f002 fcfb 	bl	80064d8 <usbd_edpt_busy>
 8003ae2:	4603      	mov	r3, r0
 8003ae4:	2b00      	cmp	r3, #0
 8003ae6:	d107      	bne.n	8003af8 <netd_report+0x34>
  usbd_edpt_xfer(rhport, _netd_itf.ep_notif, buf, len);
 8003ae8:	4b05      	ldr	r3, [pc, #20]	@ (8003b00 <netd_report+0x3c>)
 8003aea:	7899      	ldrb	r1, [r3, #2]
 8003aec:	887b      	ldrh	r3, [r7, #2]
 8003aee:	7bf8      	ldrb	r0, [r7, #15]
 8003af0:	687a      	ldr	r2, [r7, #4]
 8003af2:	f002 fc7b 	bl	80063ec <usbd_edpt_xfer>
 8003af6:	e000      	b.n	8003afa <netd_report+0x36>
  if ( usbd_edpt_busy(rhport, _netd_itf.ep_notif) ) return;
 8003af8:	bf00      	nop
}
 8003afa:	3710      	adds	r7, #16
 8003afc:	46bd      	mov	sp, r7
 8003afe:	bd80      	pop	{r7, pc}
 8003b00:	24001d00 	.word	0x24001d00

08003b04 <netd_init>:

//--------------------------------------------------------------------+
// USBD Driver API
//--------------------------------------------------------------------+
void netd_init(void)
{
 8003b04:	b580      	push	{r7, lr}
 8003b06:	af00      	add	r7, sp, #0
  tu_memclr(&_netd_itf, sizeof(_netd_itf));
 8003b08:	220c      	movs	r2, #12
 8003b0a:	2100      	movs	r1, #0
 8003b0c:	4802      	ldr	r0, [pc, #8]	@ (8003b18 <netd_init+0x14>)
 8003b0e:	f015 ff5d 	bl	80199cc <memset>
}
 8003b12:	bf00      	nop
 8003b14:	bd80      	pop	{r7, pc}
 8003b16:	bf00      	nop
 8003b18:	24001d00 	.word	0x24001d00

08003b1c <netd_reset>:

void netd_reset(uint8_t rhport)
{
 8003b1c:	b580      	push	{r7, lr}
 8003b1e:	b082      	sub	sp, #8
 8003b20:	af00      	add	r7, sp, #0
 8003b22:	4603      	mov	r3, r0
 8003b24:	71fb      	strb	r3, [r7, #7]
  (void) rhport;

  netd_init();
 8003b26:	f7ff ffed 	bl	8003b04 <netd_init>
}
 8003b2a:	bf00      	nop
 8003b2c:	3708      	adds	r7, #8
 8003b2e:	46bd      	mov	sp, r7
 8003b30:	bd80      	pop	{r7, pc}
	...

08003b34 <netd_open>:

uint16_t netd_open(uint8_t rhport, tusb_desc_interface_t const * itf_desc, uint16_t max_len)
{
 8003b34:	b580      	push	{r7, lr}
 8003b36:	b09e      	sub	sp, #120	@ 0x78
 8003b38:	af02      	add	r7, sp, #8
 8003b3a:	4603      	mov	r3, r0
 8003b3c:	6039      	str	r1, [r7, #0]
 8003b3e:	71fb      	strb	r3, [r7, #7]
 8003b40:	4613      	mov	r3, r2
 8003b42:	80bb      	strh	r3, [r7, #4]
  bool const is_rndis = (TUD_RNDIS_ITF_CLASS    == itf_desc->bInterfaceClass    &&
 8003b44:	683b      	ldr	r3, [r7, #0]
 8003b46:	795b      	ldrb	r3, [r3, #5]
                         TUD_RNDIS_ITF_SUBCLASS == itf_desc->bInterfaceSubClass &&
 8003b48:	2be0      	cmp	r3, #224	@ 0xe0
 8003b4a:	d109      	bne.n	8003b60 <netd_open+0x2c>
 8003b4c:	683b      	ldr	r3, [r7, #0]
 8003b4e:	799b      	ldrb	r3, [r3, #6]
  bool const is_rndis = (TUD_RNDIS_ITF_CLASS    == itf_desc->bInterfaceClass    &&
 8003b50:	2b01      	cmp	r3, #1
 8003b52:	d105      	bne.n	8003b60 <netd_open+0x2c>
                         TUD_RNDIS_ITF_PROTOCOL == itf_desc->bInterfaceProtocol);
 8003b54:	683b      	ldr	r3, [r7, #0]
 8003b56:	79db      	ldrb	r3, [r3, #7]
                         TUD_RNDIS_ITF_SUBCLASS == itf_desc->bInterfaceSubClass &&
 8003b58:	2b03      	cmp	r3, #3
 8003b5a:	d101      	bne.n	8003b60 <netd_open+0x2c>
 8003b5c:	2301      	movs	r3, #1
 8003b5e:	e000      	b.n	8003b62 <netd_open+0x2e>
 8003b60:	2300      	movs	r3, #0
  bool const is_rndis = (TUD_RNDIS_ITF_CLASS    == itf_desc->bInterfaceClass    &&
 8003b62:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
 8003b66:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 8003b6a:	f003 0301 	and.w	r3, r3, #1
 8003b6e:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67

  bool const is_ecm = (TUSB_CLASS_CDC                           == itf_desc->bInterfaceClass &&
 8003b72:	683b      	ldr	r3, [r7, #0]
 8003b74:	795b      	ldrb	r3, [r3, #5]
                       CDC_COMM_SUBCLASS_ETHERNET_CONTROL_MODEL == itf_desc->bInterfaceSubClass &&
 8003b76:	2b02      	cmp	r3, #2
 8003b78:	d109      	bne.n	8003b8e <netd_open+0x5a>
 8003b7a:	683b      	ldr	r3, [r7, #0]
 8003b7c:	799b      	ldrb	r3, [r3, #6]
  bool const is_ecm = (TUSB_CLASS_CDC                           == itf_desc->bInterfaceClass &&
 8003b7e:	2b06      	cmp	r3, #6
 8003b80:	d105      	bne.n	8003b8e <netd_open+0x5a>
                       0x00                                     == itf_desc->bInterfaceProtocol);
 8003b82:	683b      	ldr	r3, [r7, #0]
 8003b84:	79db      	ldrb	r3, [r3, #7]
                       CDC_COMM_SUBCLASS_ETHERNET_CONTROL_MODEL == itf_desc->bInterfaceSubClass &&
 8003b86:	2b00      	cmp	r3, #0
 8003b88:	d101      	bne.n	8003b8e <netd_open+0x5a>
 8003b8a:	2301      	movs	r3, #1
 8003b8c:	e000      	b.n	8003b90 <netd_open+0x5c>
 8003b8e:	2300      	movs	r3, #0
  bool const is_ecm = (TUSB_CLASS_CDC                           == itf_desc->bInterfaceClass &&
 8003b90:	f887 3066 	strb.w	r3, [r7, #102]	@ 0x66
 8003b94:	f897 3066 	ldrb.w	r3, [r7, #102]	@ 0x66
 8003b98:	f003 0301 	and.w	r3, r3, #1
 8003b9c:	f887 3066 	strb.w	r3, [r7, #102]	@ 0x66

  TU_VERIFY(is_rndis || is_ecm, 0);
 8003ba0:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 8003ba4:	f083 0301 	eor.w	r3, r3, #1
 8003ba8:	b2db      	uxtb	r3, r3
 8003baa:	2b00      	cmp	r3, #0
 8003bac:	d008      	beq.n	8003bc0 <netd_open+0x8c>
 8003bae:	f897 3066 	ldrb.w	r3, [r7, #102]	@ 0x66
 8003bb2:	f083 0301 	eor.w	r3, r3, #1
 8003bb6:	b2db      	uxtb	r3, r3
 8003bb8:	2b00      	cmp	r3, #0
 8003bba:	d001      	beq.n	8003bc0 <netd_open+0x8c>
 8003bbc:	2300      	movs	r3, #0
 8003bbe:	e103      	b.n	8003dc8 <netd_open+0x294>

  // confirm interface hasn't already been allocated
  TU_ASSERT(0 == _netd_itf.ep_notif, 0);
 8003bc0:	4b83      	ldr	r3, [pc, #524]	@ (8003dd0 <netd_open+0x29c>)
 8003bc2:	789b      	ldrb	r3, [r3, #2]
 8003bc4:	2b00      	cmp	r3, #0
 8003bc6:	d00a      	beq.n	8003bde <netd_open+0xaa>
 8003bc8:	4b82      	ldr	r3, [pc, #520]	@ (8003dd4 <netd_open+0x2a0>)
 8003bca:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003bcc:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003bce:	681b      	ldr	r3, [r3, #0]
 8003bd0:	f003 0301 	and.w	r3, r3, #1
 8003bd4:	2b00      	cmp	r3, #0
 8003bd6:	d000      	beq.n	8003bda <netd_open+0xa6>
 8003bd8:	be00      	bkpt	0x0000
 8003bda:	2300      	movs	r3, #0
 8003bdc:	e0f4      	b.n	8003dc8 <netd_open+0x294>

  // sanity check the descriptor
  _netd_itf.ecm_mode = is_ecm;
 8003bde:	4a7c      	ldr	r2, [pc, #496]	@ (8003dd0 <netd_open+0x29c>)
 8003be0:	f897 3066 	ldrb.w	r3, [r7, #102]	@ 0x66
 8003be4:	7153      	strb	r3, [r2, #5]

  //------------- Management Interface -------------//
  _netd_itf.itf_num = itf_desc->bInterfaceNumber;
 8003be6:	683b      	ldr	r3, [r7, #0]
 8003be8:	789a      	ldrb	r2, [r3, #2]
 8003bea:	4b79      	ldr	r3, [pc, #484]	@ (8003dd0 <netd_open+0x29c>)
 8003bec:	701a      	strb	r2, [r3, #0]

  uint16_t drv_len = sizeof(tusb_desc_interface_t);
 8003bee:	2309      	movs	r3, #9
 8003bf0:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
 8003bf4:	683b      	ldr	r3, [r7, #0]
 8003bf6:	647b      	str	r3, [r7, #68]	@ 0x44
  uint8_t const* desc8 = (uint8_t const*) desc;
 8003bf8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003bfa:	643b      	str	r3, [r7, #64]	@ 0x40
  return desc8 + desc8[DESC_OFFSET_LEN];
 8003bfc:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003bfe:	781b      	ldrb	r3, [r3, #0]
 8003c00:	461a      	mov	r2, r3
 8003c02:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003c04:	4413      	add	r3, r2
  uint8_t const * p_desc = tu_desc_next( itf_desc );
 8003c06:	66bb      	str	r3, [r7, #104]	@ 0x68

  // Communication Functional Descriptors
  while ( TUSB_DESC_CS_INTERFACE == tu_desc_type(p_desc) && drv_len <= max_len )
 8003c08:	e013      	b.n	8003c32 <netd_open+0xfe>
 8003c0a:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8003c0c:	637b      	str	r3, [r7, #52]	@ 0x34
  return ((uint8_t const*) desc)[DESC_OFFSET_LEN];
 8003c0e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003c10:	781b      	ldrb	r3, [r3, #0]
  {
    drv_len += tu_desc_len(p_desc);
 8003c12:	461a      	mov	r2, r3
 8003c14:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 8003c18:	4413      	add	r3, r2
 8003c1a:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
 8003c1e:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8003c20:	63fb      	str	r3, [r7, #60]	@ 0x3c
  uint8_t const* desc8 = (uint8_t const*) desc;
 8003c22:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003c24:	63bb      	str	r3, [r7, #56]	@ 0x38
  return desc8 + desc8[DESC_OFFSET_LEN];
 8003c26:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003c28:	781b      	ldrb	r3, [r3, #0]
 8003c2a:	461a      	mov	r2, r3
 8003c2c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003c2e:	4413      	add	r3, r2
    p_desc   = tu_desc_next(p_desc);
 8003c30:	66bb      	str	r3, [r7, #104]	@ 0x68
 8003c32:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8003c34:	633b      	str	r3, [r7, #48]	@ 0x30
  return ((uint8_t const*) desc)[DESC_OFFSET_TYPE];
 8003c36:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003c38:	3301      	adds	r3, #1
 8003c3a:	781b      	ldrb	r3, [r3, #0]
  while ( TUSB_DESC_CS_INTERFACE == tu_desc_type(p_desc) && drv_len <= max_len )
 8003c3c:	2b24      	cmp	r3, #36	@ 0x24
 8003c3e:	d104      	bne.n	8003c4a <netd_open+0x116>
 8003c40:	f8b7 206e 	ldrh.w	r2, [r7, #110]	@ 0x6e
 8003c44:	88bb      	ldrh	r3, [r7, #4]
 8003c46:	429a      	cmp	r2, r3
 8003c48:	d9df      	bls.n	8003c0a <netd_open+0xd6>
 8003c4a:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8003c4c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003c4e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003c50:	3301      	adds	r3, #1
 8003c52:	781b      	ldrb	r3, [r3, #0]
  }

  // notification endpoint (if any)
  if ( TUSB_DESC_ENDPOINT == tu_desc_type(p_desc) )
 8003c54:	2b05      	cmp	r3, #5
 8003c56:	d12d      	bne.n	8003cb4 <netd_open+0x180>
  {
    TU_ASSERT( usbd_edpt_open(rhport, (tusb_desc_endpoint_t const *) p_desc), 0 );
 8003c58:	79fb      	ldrb	r3, [r7, #7]
 8003c5a:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8003c5c:	4618      	mov	r0, r3
 8003c5e:	f002 fb2d 	bl	80062bc <usbd_edpt_open>
 8003c62:	4603      	mov	r3, r0
 8003c64:	f083 0301 	eor.w	r3, r3, #1
 8003c68:	b2db      	uxtb	r3, r3
 8003c6a:	2b00      	cmp	r3, #0
 8003c6c:	d00a      	beq.n	8003c84 <netd_open+0x150>
 8003c6e:	4b59      	ldr	r3, [pc, #356]	@ (8003dd4 <netd_open+0x2a0>)
 8003c70:	663b      	str	r3, [r7, #96]	@ 0x60
 8003c72:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8003c74:	681b      	ldr	r3, [r3, #0]
 8003c76:	f003 0301 	and.w	r3, r3, #1
 8003c7a:	2b00      	cmp	r3, #0
 8003c7c:	d000      	beq.n	8003c80 <netd_open+0x14c>
 8003c7e:	be00      	bkpt	0x0000
 8003c80:	2300      	movs	r3, #0
 8003c82:	e0a1      	b.n	8003dc8 <netd_open+0x294>

    _netd_itf.ep_notif = ((tusb_desc_endpoint_t const *) p_desc)->bEndpointAddress;
 8003c84:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8003c86:	789a      	ldrb	r2, [r3, #2]
 8003c88:	4b51      	ldr	r3, [pc, #324]	@ (8003dd0 <netd_open+0x29c>)
 8003c8a:	709a      	strb	r2, [r3, #2]
 8003c8c:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8003c8e:	623b      	str	r3, [r7, #32]
  return ((uint8_t const*) desc)[DESC_OFFSET_LEN];
 8003c90:	6a3b      	ldr	r3, [r7, #32]
 8003c92:	781b      	ldrb	r3, [r3, #0]

    drv_len += tu_desc_len(p_desc);
 8003c94:	461a      	mov	r2, r3
 8003c96:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 8003c9a:	4413      	add	r3, r2
 8003c9c:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
 8003ca0:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8003ca2:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint8_t const* desc8 = (uint8_t const*) desc;
 8003ca4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003ca6:	627b      	str	r3, [r7, #36]	@ 0x24
  return desc8 + desc8[DESC_OFFSET_LEN];
 8003ca8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003caa:	781b      	ldrb	r3, [r3, #0]
 8003cac:	461a      	mov	r2, r3
 8003cae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003cb0:	4413      	add	r3, r2
    p_desc   = tu_desc_next(p_desc);
 8003cb2:	66bb      	str	r3, [r7, #104]	@ 0x68
 8003cb4:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8003cb6:	61fb      	str	r3, [r7, #28]
  return ((uint8_t const*) desc)[DESC_OFFSET_TYPE];
 8003cb8:	69fb      	ldr	r3, [r7, #28]
 8003cba:	3301      	adds	r3, #1
 8003cbc:	781b      	ldrb	r3, [r3, #0]
  //------------- Data Interface -------------//
  // - RNDIS Data followed immediately by a pair of endpoints
  // - CDC-ECM data interface has 2 alternate settings
  //   - 0 : zero endpoints for inactive (default)
  //   - 1 : IN & OUT endpoints for active networking
  TU_ASSERT(TUSB_DESC_INTERFACE == tu_desc_type(p_desc), 0);
 8003cbe:	2b04      	cmp	r3, #4
 8003cc0:	d00a      	beq.n	8003cd8 <netd_open+0x1a4>
 8003cc2:	4b44      	ldr	r3, [pc, #272]	@ (8003dd4 <netd_open+0x2a0>)
 8003cc4:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003cc6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003cc8:	681b      	ldr	r3, [r3, #0]
 8003cca:	f003 0301 	and.w	r3, r3, #1
 8003cce:	2b00      	cmp	r3, #0
 8003cd0:	d000      	beq.n	8003cd4 <netd_open+0x1a0>
 8003cd2:	be00      	bkpt	0x0000
 8003cd4:	2300      	movs	r3, #0
 8003cd6:	e077      	b.n	8003dc8 <netd_open+0x294>

  do
  {
    tusb_desc_interface_t const * data_itf_desc = (tusb_desc_interface_t const *) p_desc;
 8003cd8:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8003cda:	65fb      	str	r3, [r7, #92]	@ 0x5c
    TU_ASSERT(TUSB_CLASS_CDC_DATA == data_itf_desc->bInterfaceClass, 0);
 8003cdc:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8003cde:	795b      	ldrb	r3, [r3, #5]
 8003ce0:	2b0a      	cmp	r3, #10
 8003ce2:	d00a      	beq.n	8003cfa <netd_open+0x1c6>
 8003ce4:	4b3b      	ldr	r3, [pc, #236]	@ (8003dd4 <netd_open+0x2a0>)
 8003ce6:	653b      	str	r3, [r7, #80]	@ 0x50
 8003ce8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003cea:	681b      	ldr	r3, [r3, #0]
 8003cec:	f003 0301 	and.w	r3, r3, #1
 8003cf0:	2b00      	cmp	r3, #0
 8003cf2:	d000      	beq.n	8003cf6 <netd_open+0x1c2>
 8003cf4:	be00      	bkpt	0x0000
 8003cf6:	2300      	movs	r3, #0
 8003cf8:	e066      	b.n	8003dc8 <netd_open+0x294>
 8003cfa:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8003cfc:	613b      	str	r3, [r7, #16]
  return ((uint8_t const*) desc)[DESC_OFFSET_LEN];
 8003cfe:	693b      	ldr	r3, [r7, #16]
 8003d00:	781b      	ldrb	r3, [r3, #0]

    drv_len += tu_desc_len(p_desc);
 8003d02:	461a      	mov	r2, r3
 8003d04:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 8003d08:	4413      	add	r3, r2
 8003d0a:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
 8003d0e:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8003d10:	61bb      	str	r3, [r7, #24]
  uint8_t const* desc8 = (uint8_t const*) desc;
 8003d12:	69bb      	ldr	r3, [r7, #24]
 8003d14:	617b      	str	r3, [r7, #20]
  return desc8 + desc8[DESC_OFFSET_LEN];
 8003d16:	697b      	ldr	r3, [r7, #20]
 8003d18:	781b      	ldrb	r3, [r3, #0]
 8003d1a:	461a      	mov	r2, r3
 8003d1c:	697b      	ldr	r3, [r7, #20]
 8003d1e:	4413      	add	r3, r2
    p_desc   = tu_desc_next(p_desc);
 8003d20:	66bb      	str	r3, [r7, #104]	@ 0x68
  }while( _netd_itf.ecm_mode && (TUSB_DESC_INTERFACE == tu_desc_type(p_desc)) && (drv_len <= max_len) );
 8003d22:	4b2b      	ldr	r3, [pc, #172]	@ (8003dd0 <netd_open+0x29c>)
 8003d24:	795b      	ldrb	r3, [r3, #5]
 8003d26:	2b00      	cmp	r3, #0
 8003d28:	d00b      	beq.n	8003d42 <netd_open+0x20e>
 8003d2a:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8003d2c:	60fb      	str	r3, [r7, #12]
  return ((uint8_t const*) desc)[DESC_OFFSET_TYPE];
 8003d2e:	68fb      	ldr	r3, [r7, #12]
 8003d30:	3301      	adds	r3, #1
 8003d32:	781b      	ldrb	r3, [r3, #0]
 8003d34:	2b04      	cmp	r3, #4
 8003d36:	d104      	bne.n	8003d42 <netd_open+0x20e>
 8003d38:	f8b7 206e 	ldrh.w	r2, [r7, #110]	@ 0x6e
 8003d3c:	88bb      	ldrh	r3, [r7, #4]
 8003d3e:	429a      	cmp	r2, r3
 8003d40:	d9ca      	bls.n	8003cd8 <netd_open+0x1a4>
 8003d42:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8003d44:	60bb      	str	r3, [r7, #8]
 8003d46:	68bb      	ldr	r3, [r7, #8]
 8003d48:	3301      	adds	r3, #1
 8003d4a:	781b      	ldrb	r3, [r3, #0]

  // Pair of endpoints
  TU_ASSERT(TUSB_DESC_ENDPOINT == tu_desc_type(p_desc), 0);
 8003d4c:	2b05      	cmp	r3, #5
 8003d4e:	d00a      	beq.n	8003d66 <netd_open+0x232>
 8003d50:	4b20      	ldr	r3, [pc, #128]	@ (8003dd4 <netd_open+0x2a0>)
 8003d52:	657b      	str	r3, [r7, #84]	@ 0x54
 8003d54:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003d56:	681b      	ldr	r3, [r3, #0]
 8003d58:	f003 0301 	and.w	r3, r3, #1
 8003d5c:	2b00      	cmp	r3, #0
 8003d5e:	d000      	beq.n	8003d62 <netd_open+0x22e>
 8003d60:	be00      	bkpt	0x0000
 8003d62:	2300      	movs	r3, #0
 8003d64:	e030      	b.n	8003dc8 <netd_open+0x294>

  if ( _netd_itf.ecm_mode )
 8003d66:	4b1a      	ldr	r3, [pc, #104]	@ (8003dd0 <netd_open+0x29c>)
 8003d68:	795b      	ldrb	r3, [r3, #5]
 8003d6a:	2b00      	cmp	r3, #0
 8003d6c:	d003      	beq.n	8003d76 <netd_open+0x242>
  {
    // ECM by default is in-active, save the endpoint attribute
    // to open later when received setInterface
    _netd_itf.ecm_desc_epdata = p_desc;
 8003d6e:	4a18      	ldr	r2, [pc, #96]	@ (8003dd0 <netd_open+0x29c>)
 8003d70:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8003d72:	6093      	str	r3, [r2, #8]
 8003d74:	e021      	b.n	8003dba <netd_open+0x286>
  }else
  {
    // Open endpoint pair for RNDIS
    TU_ASSERT( usbd_open_edpt_pair(rhport, p_desc, 2, TUSB_XFER_BULK, &_netd_itf.ep_out, &_netd_itf.ep_in), 0 );
 8003d76:	79f8      	ldrb	r0, [r7, #7]
 8003d78:	4b17      	ldr	r3, [pc, #92]	@ (8003dd8 <netd_open+0x2a4>)
 8003d7a:	9301      	str	r3, [sp, #4]
 8003d7c:	4b17      	ldr	r3, [pc, #92]	@ (8003ddc <netd_open+0x2a8>)
 8003d7e:	9300      	str	r3, [sp, #0]
 8003d80:	2302      	movs	r3, #2
 8003d82:	2202      	movs	r2, #2
 8003d84:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8003d86:	f002 fa31 	bl	80061ec <usbd_open_edpt_pair>
 8003d8a:	4603      	mov	r3, r0
 8003d8c:	f083 0301 	eor.w	r3, r3, #1
 8003d90:	b2db      	uxtb	r3, r3
 8003d92:	2b00      	cmp	r3, #0
 8003d94:	d00a      	beq.n	8003dac <netd_open+0x278>
 8003d96:	4b0f      	ldr	r3, [pc, #60]	@ (8003dd4 <netd_open+0x2a0>)
 8003d98:	65bb      	str	r3, [r7, #88]	@ 0x58
 8003d9a:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8003d9c:	681b      	ldr	r3, [r3, #0]
 8003d9e:	f003 0301 	and.w	r3, r3, #1
 8003da2:	2b00      	cmp	r3, #0
 8003da4:	d000      	beq.n	8003da8 <netd_open+0x274>
 8003da6:	be00      	bkpt	0x0000
 8003da8:	2300      	movs	r3, #0
 8003daa:	e00d      	b.n	8003dc8 <netd_open+0x294>

    tud_network_init_cb();
 8003dac:	f7fc fdf2 	bl	8000994 <tud_network_init_cb>

    // we are ready to transmit a packet
    can_xmit = true;
 8003db0:	4b0b      	ldr	r3, [pc, #44]	@ (8003de0 <netd_open+0x2ac>)
 8003db2:	2201      	movs	r2, #1
 8003db4:	701a      	strb	r2, [r3, #0]

    // prepare for incoming packets
    tud_network_recv_renew();
 8003db6:	f7ff fe5d 	bl	8003a74 <tud_network_recv_renew>
  }

  drv_len += 2*sizeof(tusb_desc_endpoint_t);
 8003dba:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 8003dbe:	330e      	adds	r3, #14
 8003dc0:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e

  return drv_len;
 8003dc4:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
}
 8003dc8:	4618      	mov	r0, r3
 8003dca:	3770      	adds	r7, #112	@ 0x70
 8003dcc:	46bd      	mov	sp, r7
 8003dce:	bd80      	pop	{r7, pc}
 8003dd0:	24001d00 	.word	0x24001d00
 8003dd4:	e000edf0 	.word	0xe000edf0
 8003dd8:	24001d03 	.word	0x24001d03
 8003ddc:	24001d04 	.word	0x24001d04
 8003de0:	24001d0c 	.word	0x24001d0c

08003de4 <ecm_report>:

static void ecm_report(bool nc)
{
 8003de4:	b580      	push	{r7, lr}
 8003de6:	b082      	sub	sp, #8
 8003de8:	af00      	add	r7, sp, #0
 8003dea:	4603      	mov	r3, r0
 8003dec:	71fb      	strb	r3, [r7, #7]
  notify.ecm_buf = (nc) ? ecm_notify_nc : ecm_notify_csc;
 8003dee:	79fb      	ldrb	r3, [r7, #7]
 8003df0:	2b00      	cmp	r3, #0
 8003df2:	d00d      	beq.n	8003e10 <ecm_report+0x2c>
 8003df4:	4b1b      	ldr	r3, [pc, #108]	@ (8003e64 <ecm_report+0x80>)
 8003df6:	461a      	mov	r2, r3
 8003df8:	2300      	movs	r3, #0
 8003dfa:	6013      	str	r3, [r2, #0]
 8003dfc:	6053      	str	r3, [r2, #4]
 8003dfe:	6093      	str	r3, [r2, #8]
 8003e00:	60d3      	str	r3, [r2, #12]
 8003e02:	4b18      	ldr	r3, [pc, #96]	@ (8003e64 <ecm_report+0x80>)
 8003e04:	22a1      	movs	r2, #161	@ 0xa1
 8003e06:	701a      	strb	r2, [r3, #0]
 8003e08:	4b16      	ldr	r3, [pc, #88]	@ (8003e64 <ecm_report+0x80>)
 8003e0a:	2201      	movs	r2, #1
 8003e0c:	805a      	strh	r2, [r3, #2]
 8003e0e:	e015      	b.n	8003e3c <ecm_report+0x58>
 8003e10:	4b14      	ldr	r3, [pc, #80]	@ (8003e64 <ecm_report+0x80>)
 8003e12:	461a      	mov	r2, r3
 8003e14:	2300      	movs	r3, #0
 8003e16:	6013      	str	r3, [r2, #0]
 8003e18:	6053      	str	r3, [r2, #4]
 8003e1a:	6093      	str	r3, [r2, #8]
 8003e1c:	60d3      	str	r3, [r2, #12]
 8003e1e:	4b11      	ldr	r3, [pc, #68]	@ (8003e64 <ecm_report+0x80>)
 8003e20:	22a1      	movs	r2, #161	@ 0xa1
 8003e22:	701a      	strb	r2, [r3, #0]
 8003e24:	4b0f      	ldr	r3, [pc, #60]	@ (8003e64 <ecm_report+0x80>)
 8003e26:	222a      	movs	r2, #42	@ 0x2a
 8003e28:	705a      	strb	r2, [r3, #1]
 8003e2a:	4b0e      	ldr	r3, [pc, #56]	@ (8003e64 <ecm_report+0x80>)
 8003e2c:	2208      	movs	r2, #8
 8003e2e:	80da      	strh	r2, [r3, #6]
 8003e30:	4b0c      	ldr	r3, [pc, #48]	@ (8003e64 <ecm_report+0x80>)
 8003e32:	4a0d      	ldr	r2, [pc, #52]	@ (8003e68 <ecm_report+0x84>)
 8003e34:	609a      	str	r2, [r3, #8]
 8003e36:	4b0b      	ldr	r3, [pc, #44]	@ (8003e64 <ecm_report+0x80>)
 8003e38:	4a0b      	ldr	r2, [pc, #44]	@ (8003e68 <ecm_report+0x84>)
 8003e3a:	60da      	str	r2, [r3, #12]
  notify.ecm_buf.header.wIndex = _netd_itf.itf_num;
 8003e3c:	4b0b      	ldr	r3, [pc, #44]	@ (8003e6c <ecm_report+0x88>)
 8003e3e:	781b      	ldrb	r3, [r3, #0]
 8003e40:	461a      	mov	r2, r3
 8003e42:	4b08      	ldr	r3, [pc, #32]	@ (8003e64 <ecm_report+0x80>)
 8003e44:	809a      	strh	r2, [r3, #4]
  netd_report((uint8_t *)&notify.ecm_buf, (nc) ? sizeof(notify.ecm_buf.header) : sizeof(notify.ecm_buf));
 8003e46:	79fb      	ldrb	r3, [r7, #7]
 8003e48:	2b00      	cmp	r3, #0
 8003e4a:	d001      	beq.n	8003e50 <ecm_report+0x6c>
 8003e4c:	2308      	movs	r3, #8
 8003e4e:	e000      	b.n	8003e52 <ecm_report+0x6e>
 8003e50:	2310      	movs	r3, #16
 8003e52:	4619      	mov	r1, r3
 8003e54:	4803      	ldr	r0, [pc, #12]	@ (8003e64 <ecm_report+0x80>)
 8003e56:	f7ff fe35 	bl	8003ac4 <netd_report>
}
 8003e5a:	bf00      	nop
 8003e5c:	3708      	adds	r7, #8
 8003e5e:	46bd      	mov	sp, r7
 8003e60:	bd80      	pop	{r7, pc}
 8003e62:	bf00      	nop
 8003e64:	24001c88 	.word	0x24001c88
 8003e68:	00947000 	.word	0x00947000
 8003e6c:	24001d00 	.word	0x24001d00

08003e70 <netd_control_xfer_cb>:

// Invoked when a control transfer occurred on an interface of this class
// Driver response accordingly to the request and the transfer stage (setup/data/ack)
// return false to stall control endpoint (e.g unsupported request)
bool netd_control_xfer_cb (uint8_t rhport, uint8_t stage, tusb_control_request_t const * request)
{
 8003e70:	b580      	push	{r7, lr}
 8003e72:	b08c      	sub	sp, #48	@ 0x30
 8003e74:	af02      	add	r7, sp, #8
 8003e76:	4603      	mov	r3, r0
 8003e78:	603a      	str	r2, [r7, #0]
 8003e7a:	71fb      	strb	r3, [r7, #7]
 8003e7c:	460b      	mov	r3, r1
 8003e7e:	71bb      	strb	r3, [r7, #6]
  if ( stage == CONTROL_STAGE_SETUP )
 8003e80:	79bb      	ldrb	r3, [r7, #6]
 8003e82:	2b01      	cmp	r3, #1
 8003e84:	f040 80d2 	bne.w	800402c <netd_control_xfer_cb+0x1bc>
  {
    switch ( request->bmRequestType_bit.type )
 8003e88:	683b      	ldr	r3, [r7, #0]
 8003e8a:	781b      	ldrb	r3, [r3, #0]
 8003e8c:	f3c3 1341 	ubfx	r3, r3, #5, #2
 8003e90:	b2db      	uxtb	r3, r3
 8003e92:	2b00      	cmp	r3, #0
 8003e94:	d003      	beq.n	8003e9e <netd_control_xfer_cb+0x2e>
 8003e96:	2b01      	cmp	r3, #1
 8003e98:	f000 8081 	beq.w	8003f9e <netd_control_xfer_cb+0x12e>
 8003e9c:	e0c4      	b.n	8004028 <netd_control_xfer_cb+0x1b8>
    {
      case TUSB_REQ_TYPE_STANDARD:
        switch ( request->bRequest )
 8003e9e:	683b      	ldr	r3, [r7, #0]
 8003ea0:	785b      	ldrb	r3, [r3, #1]
 8003ea2:	2b0a      	cmp	r3, #10
 8003ea4:	d002      	beq.n	8003eac <netd_control_xfer_cb+0x3c>
 8003ea6:	2b0b      	cmp	r3, #11
 8003ea8:	d013      	beq.n	8003ed2 <netd_control_xfer_cb+0x62>
 8003eaa:	e075      	b.n	8003f98 <netd_control_xfer_cb+0x128>
        {
          case TUSB_REQ_GET_INTERFACE:
          {
            uint8_t const req_itfnum = (uint8_t) request->wIndex;
 8003eac:	683b      	ldr	r3, [r7, #0]
 8003eae:	889b      	ldrh	r3, [r3, #4]
 8003eb0:	b29b      	uxth	r3, r3
 8003eb2:	73fb      	strb	r3, [r7, #15]
            TU_VERIFY(_netd_itf.itf_num+1 == req_itfnum);
 8003eb4:	4b74      	ldr	r3, [pc, #464]	@ (8004088 <netd_control_xfer_cb+0x218>)
 8003eb6:	781b      	ldrb	r3, [r3, #0]
 8003eb8:	1c5a      	adds	r2, r3, #1
 8003eba:	7bfb      	ldrb	r3, [r7, #15]
 8003ebc:	429a      	cmp	r2, r3
 8003ebe:	d001      	beq.n	8003ec4 <netd_control_xfer_cb+0x54>
 8003ec0:	2300      	movs	r3, #0
 8003ec2:	e0dd      	b.n	8004080 <netd_control_xfer_cb+0x210>

            tud_control_xfer(rhport, request, &_netd_itf.itf_data_alt, 1);
 8003ec4:	79f8      	ldrb	r0, [r7, #7]
 8003ec6:	2301      	movs	r3, #1
 8003ec8:	4a70      	ldr	r2, [pc, #448]	@ (800408c <netd_control_xfer_cb+0x21c>)
 8003eca:	6839      	ldr	r1, [r7, #0]
 8003ecc:	f002 fc92 	bl	80067f4 <tud_control_xfer>
          }
          break;
 8003ed0:	e064      	b.n	8003f9c <netd_control_xfer_cb+0x12c>

          case TUSB_REQ_SET_INTERFACE:
          {
            uint8_t const req_itfnum = (uint8_t) request->wIndex;
 8003ed2:	683b      	ldr	r3, [r7, #0]
 8003ed4:	889b      	ldrh	r3, [r3, #4]
 8003ed6:	b29b      	uxth	r3, r3
 8003ed8:	76fb      	strb	r3, [r7, #27]
            uint8_t const req_alt    = (uint8_t) request->wValue;
 8003eda:	683b      	ldr	r3, [r7, #0]
 8003edc:	885b      	ldrh	r3, [r3, #2]
 8003ede:	b29b      	uxth	r3, r3
 8003ee0:	76bb      	strb	r3, [r7, #26]

            // Only valid for Data Interface with Alternate is either 0 or 1
            TU_VERIFY(_netd_itf.itf_num+1 == req_itfnum && req_alt < 2);
 8003ee2:	4b69      	ldr	r3, [pc, #420]	@ (8004088 <netd_control_xfer_cb+0x218>)
 8003ee4:	781b      	ldrb	r3, [r3, #0]
 8003ee6:	1c5a      	adds	r2, r3, #1
 8003ee8:	7efb      	ldrb	r3, [r7, #27]
 8003eea:	429a      	cmp	r2, r3
 8003eec:	d102      	bne.n	8003ef4 <netd_control_xfer_cb+0x84>
 8003eee:	7ebb      	ldrb	r3, [r7, #26]
 8003ef0:	2b01      	cmp	r3, #1
 8003ef2:	d901      	bls.n	8003ef8 <netd_control_xfer_cb+0x88>
 8003ef4:	2300      	movs	r3, #0
 8003ef6:	e0c3      	b.n	8004080 <netd_control_xfer_cb+0x210>

            // ACM-ECM only: qequest to enable/disable network activities
            TU_VERIFY(_netd_itf.ecm_mode);
 8003ef8:	4b63      	ldr	r3, [pc, #396]	@ (8004088 <netd_control_xfer_cb+0x218>)
 8003efa:	795b      	ldrb	r3, [r3, #5]
 8003efc:	f083 0301 	eor.w	r3, r3, #1
 8003f00:	b2db      	uxtb	r3, r3
 8003f02:	2b00      	cmp	r3, #0
 8003f04:	d001      	beq.n	8003f0a <netd_control_xfer_cb+0x9a>
 8003f06:	2300      	movs	r3, #0
 8003f08:	e0ba      	b.n	8004080 <netd_control_xfer_cb+0x210>

            _netd_itf.itf_data_alt = req_alt;
 8003f0a:	4a5f      	ldr	r2, [pc, #380]	@ (8004088 <netd_control_xfer_cb+0x218>)
 8003f0c:	7ebb      	ldrb	r3, [r7, #26]
 8003f0e:	7053      	strb	r3, [r2, #1]

            if ( _netd_itf.itf_data_alt )
 8003f10:	4b5d      	ldr	r3, [pc, #372]	@ (8004088 <netd_control_xfer_cb+0x218>)
 8003f12:	785b      	ldrb	r3, [r3, #1]
 8003f14:	2b00      	cmp	r3, #0
 8003f16:	d039      	beq.n	8003f8c <netd_control_xfer_cb+0x11c>
            {
              // TODO since we don't actually close endpoint
              // hack here to not re-open it
              if ( _netd_itf.ep_in == 0 && _netd_itf.ep_out == 0 )
 8003f18:	4b5b      	ldr	r3, [pc, #364]	@ (8004088 <netd_control_xfer_cb+0x218>)
 8003f1a:	78db      	ldrb	r3, [r3, #3]
 8003f1c:	2b00      	cmp	r3, #0
 8003f1e:	d135      	bne.n	8003f8c <netd_control_xfer_cb+0x11c>
 8003f20:	4b59      	ldr	r3, [pc, #356]	@ (8004088 <netd_control_xfer_cb+0x218>)
 8003f22:	791b      	ldrb	r3, [r3, #4]
 8003f24:	2b00      	cmp	r3, #0
 8003f26:	d131      	bne.n	8003f8c <netd_control_xfer_cb+0x11c>
              {
                TU_ASSERT(_netd_itf.ecm_desc_epdata);
 8003f28:	4b57      	ldr	r3, [pc, #348]	@ (8004088 <netd_control_xfer_cb+0x218>)
 8003f2a:	689b      	ldr	r3, [r3, #8]
 8003f2c:	2b00      	cmp	r3, #0
 8003f2e:	d10a      	bne.n	8003f46 <netd_control_xfer_cb+0xd6>
 8003f30:	4b57      	ldr	r3, [pc, #348]	@ (8004090 <netd_control_xfer_cb+0x220>)
 8003f32:	613b      	str	r3, [r7, #16]
 8003f34:	693b      	ldr	r3, [r7, #16]
 8003f36:	681b      	ldr	r3, [r3, #0]
 8003f38:	f003 0301 	and.w	r3, r3, #1
 8003f3c:	2b00      	cmp	r3, #0
 8003f3e:	d000      	beq.n	8003f42 <netd_control_xfer_cb+0xd2>
 8003f40:	be00      	bkpt	0x0000
 8003f42:	2300      	movs	r3, #0
 8003f44:	e09c      	b.n	8004080 <netd_control_xfer_cb+0x210>
                TU_ASSERT( usbd_open_edpt_pair(rhport, _netd_itf.ecm_desc_epdata, 2, TUSB_XFER_BULK, &_netd_itf.ep_out, &_netd_itf.ep_in) );
 8003f46:	4b50      	ldr	r3, [pc, #320]	@ (8004088 <netd_control_xfer_cb+0x218>)
 8003f48:	6899      	ldr	r1, [r3, #8]
 8003f4a:	79f8      	ldrb	r0, [r7, #7]
 8003f4c:	4b51      	ldr	r3, [pc, #324]	@ (8004094 <netd_control_xfer_cb+0x224>)
 8003f4e:	9301      	str	r3, [sp, #4]
 8003f50:	4b51      	ldr	r3, [pc, #324]	@ (8004098 <netd_control_xfer_cb+0x228>)
 8003f52:	9300      	str	r3, [sp, #0]
 8003f54:	2302      	movs	r3, #2
 8003f56:	2202      	movs	r2, #2
 8003f58:	f002 f948 	bl	80061ec <usbd_open_edpt_pair>
 8003f5c:	4603      	mov	r3, r0
 8003f5e:	f083 0301 	eor.w	r3, r3, #1
 8003f62:	b2db      	uxtb	r3, r3
 8003f64:	2b00      	cmp	r3, #0
 8003f66:	d00a      	beq.n	8003f7e <netd_control_xfer_cb+0x10e>
 8003f68:	4b49      	ldr	r3, [pc, #292]	@ (8004090 <netd_control_xfer_cb+0x220>)
 8003f6a:	617b      	str	r3, [r7, #20]
 8003f6c:	697b      	ldr	r3, [r7, #20]
 8003f6e:	681b      	ldr	r3, [r3, #0]
 8003f70:	f003 0301 	and.w	r3, r3, #1
 8003f74:	2b00      	cmp	r3, #0
 8003f76:	d000      	beq.n	8003f7a <netd_control_xfer_cb+0x10a>
 8003f78:	be00      	bkpt	0x0000
 8003f7a:	2300      	movs	r3, #0
 8003f7c:	e080      	b.n	8004080 <netd_control_xfer_cb+0x210>

                // TODO should be merge with RNDIS's after endpoint opened
                // Also should have opposite callback for application to disable network !!
                tud_network_init_cb();
 8003f7e:	f7fc fd09 	bl	8000994 <tud_network_init_cb>
                can_xmit = true; // we are ready to transmit a packet
 8003f82:	4b46      	ldr	r3, [pc, #280]	@ (800409c <netd_control_xfer_cb+0x22c>)
 8003f84:	2201      	movs	r2, #1
 8003f86:	701a      	strb	r2, [r3, #0]
                tud_network_recv_renew(); // prepare for incoming packets
 8003f88:	f7ff fd74 	bl	8003a74 <tud_network_recv_renew>
              // For now pretend that we did, this should have no harm since host won't try to
              // communicate with the endpoints again
              // _netd_itf.ep_in = _netd_itf.ep_out = 0
            }

            tud_control_status(rhport, request);
 8003f8c:	79fb      	ldrb	r3, [r7, #7]
 8003f8e:	6839      	ldr	r1, [r7, #0]
 8003f90:	4618      	mov	r0, r3
 8003f92:	f002 fbbd 	bl	8006710 <tud_control_status>
          }
          break;
 8003f96:	e001      	b.n	8003f9c <netd_control_xfer_cb+0x12c>

          // unsupported request
          default: return false;
 8003f98:	2300      	movs	r3, #0
 8003f9a:	e071      	b.n	8004080 <netd_control_xfer_cb+0x210>
        }
      break;
 8003f9c:	e06f      	b.n	800407e <netd_control_xfer_cb+0x20e>

      case TUSB_REQ_TYPE_CLASS:
        TU_VERIFY (_netd_itf.itf_num == request->wIndex);
 8003f9e:	4b3a      	ldr	r3, [pc, #232]	@ (8004088 <netd_control_xfer_cb+0x218>)
 8003fa0:	781b      	ldrb	r3, [r3, #0]
 8003fa2:	461a      	mov	r2, r3
 8003fa4:	683b      	ldr	r3, [r7, #0]
 8003fa6:	889b      	ldrh	r3, [r3, #4]
 8003fa8:	b29b      	uxth	r3, r3
 8003faa:	429a      	cmp	r2, r3
 8003fac:	d001      	beq.n	8003fb2 <netd_control_xfer_cb+0x142>
 8003fae:	2300      	movs	r3, #0
 8003fb0:	e066      	b.n	8004080 <netd_control_xfer_cb+0x210>

        if (_netd_itf.ecm_mode)
 8003fb2:	4b35      	ldr	r3, [pc, #212]	@ (8004088 <netd_control_xfer_cb+0x218>)
 8003fb4:	795b      	ldrb	r3, [r3, #5]
 8003fb6:	2b00      	cmp	r3, #0
 8003fb8:	d00d      	beq.n	8003fd6 <netd_control_xfer_cb+0x166>
        {
          /* the only required CDC-ECM Management Element Request is SetEthernetPacketFilter */
          if (0x43 /* SET_ETHERNET_PACKET_FILTER */ == request->bRequest)
 8003fba:	683b      	ldr	r3, [r7, #0]
 8003fbc:	785b      	ldrb	r3, [r3, #1]
 8003fbe:	2b43      	cmp	r3, #67	@ 0x43
 8003fc0:	d15c      	bne.n	800407c <netd_control_xfer_cb+0x20c>
          {
            tud_control_xfer(rhport, request, NULL, 0);
 8003fc2:	79f8      	ldrb	r0, [r7, #7]
 8003fc4:	2300      	movs	r3, #0
 8003fc6:	2200      	movs	r2, #0
 8003fc8:	6839      	ldr	r1, [r7, #0]
 8003fca:	f002 fc13 	bl	80067f4 <tud_control_xfer>
            ecm_report(true);
 8003fce:	2001      	movs	r0, #1
 8003fd0:	f7ff ff08 	bl	8003de4 <ecm_report>
          else
          {
            tud_control_xfer(rhport, request, notify.rndis_buf, (uint16_t) sizeof(notify.rndis_buf));
          }
        }
      break;
 8003fd4:	e052      	b.n	800407c <netd_control_xfer_cb+0x20c>
          if (request->bmRequestType_bit.direction == TUSB_DIR_IN)
 8003fd6:	683b      	ldr	r3, [r7, #0]
 8003fd8:	781b      	ldrb	r3, [r3, #0]
 8003fda:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 8003fde:	b2db      	uxtb	r3, r3
 8003fe0:	2b00      	cmp	r3, #0
 8003fe2:	d01a      	beq.n	800401a <netd_control_xfer_cb+0x1aa>
            rndis_generic_msg_t *rndis_msg = (rndis_generic_msg_t *) ((void*) notify.rndis_buf);
 8003fe4:	4b2e      	ldr	r3, [pc, #184]	@ (80040a0 <netd_control_xfer_cb+0x230>)
 8003fe6:	627b      	str	r3, [r7, #36]	@ 0x24
            uint32_t msglen = tu_le32toh(rndis_msg->MessageLength);
 8003fe8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003fea:	685b      	ldr	r3, [r3, #4]
 8003fec:	623b      	str	r3, [r7, #32]
            TU_ASSERT(msglen <= sizeof(notify.rndis_buf));
 8003fee:	6a3b      	ldr	r3, [r7, #32]
 8003ff0:	2b78      	cmp	r3, #120	@ 0x78
 8003ff2:	d90a      	bls.n	800400a <netd_control_xfer_cb+0x19a>
 8003ff4:	4b26      	ldr	r3, [pc, #152]	@ (8004090 <netd_control_xfer_cb+0x220>)
 8003ff6:	61fb      	str	r3, [r7, #28]
 8003ff8:	69fb      	ldr	r3, [r7, #28]
 8003ffa:	681b      	ldr	r3, [r3, #0]
 8003ffc:	f003 0301 	and.w	r3, r3, #1
 8004000:	2b00      	cmp	r3, #0
 8004002:	d000      	beq.n	8004006 <netd_control_xfer_cb+0x196>
 8004004:	be00      	bkpt	0x0000
 8004006:	2300      	movs	r3, #0
 8004008:	e03a      	b.n	8004080 <netd_control_xfer_cb+0x210>
            tud_control_xfer(rhport, request, notify.rndis_buf, (uint16_t) msglen);
 800400a:	6a3b      	ldr	r3, [r7, #32]
 800400c:	b29b      	uxth	r3, r3
 800400e:	79f8      	ldrb	r0, [r7, #7]
 8004010:	4a23      	ldr	r2, [pc, #140]	@ (80040a0 <netd_control_xfer_cb+0x230>)
 8004012:	6839      	ldr	r1, [r7, #0]
 8004014:	f002 fbee 	bl	80067f4 <tud_control_xfer>
      break;
 8004018:	e030      	b.n	800407c <netd_control_xfer_cb+0x20c>
            tud_control_xfer(rhport, request, notify.rndis_buf, (uint16_t) sizeof(notify.rndis_buf));
 800401a:	79f8      	ldrb	r0, [r7, #7]
 800401c:	2378      	movs	r3, #120	@ 0x78
 800401e:	4a20      	ldr	r2, [pc, #128]	@ (80040a0 <netd_control_xfer_cb+0x230>)
 8004020:	6839      	ldr	r1, [r7, #0]
 8004022:	f002 fbe7 	bl	80067f4 <tud_control_xfer>
      break;
 8004026:	e029      	b.n	800407c <netd_control_xfer_cb+0x20c>

      // unsupported request
      default: return false;
 8004028:	2300      	movs	r3, #0
 800402a:	e029      	b.n	8004080 <netd_control_xfer_cb+0x210>
    }
  }
  else if ( stage == CONTROL_STAGE_DATA )
 800402c:	79bb      	ldrb	r3, [r7, #6]
 800402e:	2b02      	cmp	r3, #2
 8004030:	d125      	bne.n	800407e <netd_control_xfer_cb+0x20e>
  {
    // Handle RNDIS class control OUT only
    if (request->bmRequestType_bit.type == TUSB_REQ_TYPE_CLASS &&
 8004032:	683b      	ldr	r3, [r7, #0]
 8004034:	781b      	ldrb	r3, [r3, #0]
 8004036:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800403a:	b2db      	uxtb	r3, r3
 800403c:	2b20      	cmp	r3, #32
 800403e:	d11e      	bne.n	800407e <netd_control_xfer_cb+0x20e>
        request->bmRequestType_bit.direction == TUSB_DIR_OUT   &&
 8004040:	683b      	ldr	r3, [r7, #0]
 8004042:	781b      	ldrb	r3, [r3, #0]
 8004044:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 8004048:	b2db      	uxtb	r3, r3
    if (request->bmRequestType_bit.type == TUSB_REQ_TYPE_CLASS &&
 800404a:	2b00      	cmp	r3, #0
 800404c:	d117      	bne.n	800407e <netd_control_xfer_cb+0x20e>
        _netd_itf.itf_num == request->wIndex)
 800404e:	4b0e      	ldr	r3, [pc, #56]	@ (8004088 <netd_control_xfer_cb+0x218>)
 8004050:	781b      	ldrb	r3, [r3, #0]
 8004052:	461a      	mov	r2, r3
 8004054:	683b      	ldr	r3, [r7, #0]
 8004056:	889b      	ldrh	r3, [r3, #4]
 8004058:	b29b      	uxth	r3, r3
        request->bmRequestType_bit.direction == TUSB_DIR_OUT   &&
 800405a:	429a      	cmp	r2, r3
 800405c:	d10f      	bne.n	800407e <netd_control_xfer_cb+0x20e>
    {
      if ( !_netd_itf.ecm_mode )
 800405e:	4b0a      	ldr	r3, [pc, #40]	@ (8004088 <netd_control_xfer_cb+0x218>)
 8004060:	795b      	ldrb	r3, [r3, #5]
 8004062:	f083 0301 	eor.w	r3, r3, #1
 8004066:	b2db      	uxtb	r3, r3
 8004068:	2b00      	cmp	r3, #0
 800406a:	d008      	beq.n	800407e <netd_control_xfer_cb+0x20e>
      {
        rndis_class_set_handler(notify.rndis_buf, request->wLength);
 800406c:	683b      	ldr	r3, [r7, #0]
 800406e:	88db      	ldrh	r3, [r3, #6]
 8004070:	b29b      	uxth	r3, r3
 8004072:	4619      	mov	r1, r3
 8004074:	480a      	ldr	r0, [pc, #40]	@ (80040a0 <netd_control_xfer_cb+0x230>)
 8004076:	f002 ff99 	bl	8006fac <rndis_class_set_handler>
 800407a:	e000      	b.n	800407e <netd_control_xfer_cb+0x20e>
      break;
 800407c:	bf00      	nop
      }
    }
  }

  return true;
 800407e:	2301      	movs	r3, #1
}
 8004080:	4618      	mov	r0, r3
 8004082:	3728      	adds	r7, #40	@ 0x28
 8004084:	46bd      	mov	sp, r7
 8004086:	bd80      	pop	{r7, pc}
 8004088:	24001d00 	.word	0x24001d00
 800408c:	24001d01 	.word	0x24001d01
 8004090:	e000edf0 	.word	0xe000edf0
 8004094:	24001d03 	.word	0x24001d03
 8004098:	24001d04 	.word	0x24001d04
 800409c:	24001d0c 	.word	0x24001d0c
 80040a0:	24001c88 	.word	0x24001c88

080040a4 <handle_incoming_packet>:

static void handle_incoming_packet(uint32_t len)
{
 80040a4:	b580      	push	{r7, lr}
 80040a6:	b086      	sub	sp, #24
 80040a8:	af00      	add	r7, sp, #0
 80040aa:	6078      	str	r0, [r7, #4]
  uint8_t *pnt = received;
 80040ac:	4b1e      	ldr	r3, [pc, #120]	@ (8004128 <handle_incoming_packet+0x84>)
 80040ae:	617b      	str	r3, [r7, #20]
  uint32_t size = 0;
 80040b0:	2300      	movs	r3, #0
 80040b2:	613b      	str	r3, [r7, #16]

  if (_netd_itf.ecm_mode)
 80040b4:	4b1d      	ldr	r3, [pc, #116]	@ (800412c <handle_incoming_packet+0x88>)
 80040b6:	795b      	ldrb	r3, [r3, #5]
 80040b8:	2b00      	cmp	r3, #0
 80040ba:	d002      	beq.n	80040c2 <handle_incoming_packet+0x1e>
  {
    size = len;
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	613b      	str	r3, [r7, #16]
 80040c0:	e01f      	b.n	8004102 <handle_incoming_packet+0x5e>
  }
  else
  {
    rndis_data_packet_t *r = (rndis_data_packet_t *) ((void*) pnt);
 80040c2:	697b      	ldr	r3, [r7, #20]
 80040c4:	60fb      	str	r3, [r7, #12]
    if (len >= sizeof(rndis_data_packet_t))
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	2b2b      	cmp	r3, #43	@ 0x2b
 80040ca:	d91a      	bls.n	8004102 <handle_incoming_packet+0x5e>
      if ( (r->MessageType == REMOTE_NDIS_PACKET_MSG) && (r->MessageLength <= len))
 80040cc:	68fb      	ldr	r3, [r7, #12]
 80040ce:	681b      	ldr	r3, [r3, #0]
 80040d0:	2b01      	cmp	r3, #1
 80040d2:	d116      	bne.n	8004102 <handle_incoming_packet+0x5e>
 80040d4:	68fb      	ldr	r3, [r7, #12]
 80040d6:	685b      	ldr	r3, [r3, #4]
 80040d8:	687a      	ldr	r2, [r7, #4]
 80040da:	429a      	cmp	r2, r3
 80040dc:	d311      	bcc.n	8004102 <handle_incoming_packet+0x5e>
        if ( (r->DataOffset + offsetof(rndis_data_packet_t, DataOffset) + r->DataLength) <= len)
 80040de:	68fb      	ldr	r3, [r7, #12]
 80040e0:	689a      	ldr	r2, [r3, #8]
 80040e2:	68fb      	ldr	r3, [r7, #12]
 80040e4:	68db      	ldr	r3, [r3, #12]
 80040e6:	4413      	add	r3, r2
 80040e8:	3308      	adds	r3, #8
 80040ea:	687a      	ldr	r2, [r7, #4]
 80040ec:	429a      	cmp	r2, r3
 80040ee:	d308      	bcc.n	8004102 <handle_incoming_packet+0x5e>
        {
          pnt = &received[r->DataOffset + offsetof(rndis_data_packet_t, DataOffset)];
 80040f0:	68fb      	ldr	r3, [r7, #12]
 80040f2:	689b      	ldr	r3, [r3, #8]
 80040f4:	3308      	adds	r3, #8
 80040f6:	4a0c      	ldr	r2, [pc, #48]	@ (8004128 <handle_incoming_packet+0x84>)
 80040f8:	4413      	add	r3, r2
 80040fa:	617b      	str	r3, [r7, #20]
          size = r->DataLength;
 80040fc:	68fb      	ldr	r3, [r7, #12]
 80040fe:	68db      	ldr	r3, [r3, #12]
 8004100:	613b      	str	r3, [r7, #16]
        }
  }

  if (!tud_network_recv_cb(pnt, (uint16_t) size))
 8004102:	693b      	ldr	r3, [r7, #16]
 8004104:	b29b      	uxth	r3, r3
 8004106:	4619      	mov	r1, r3
 8004108:	6978      	ldr	r0, [r7, #20]
 800410a:	f7fc fc2d 	bl	8000968 <tud_network_recv_cb>
 800410e:	4603      	mov	r3, r0
 8004110:	f083 0301 	eor.w	r3, r3, #1
 8004114:	b2db      	uxtb	r3, r3
 8004116:	2b00      	cmp	r3, #0
 8004118:	d001      	beq.n	800411e <handle_incoming_packet+0x7a>
  {
    /* if a buffer was never handled by user code, we must renew on the user's behalf */
    tud_network_recv_renew();
 800411a:	f7ff fcab 	bl	8003a74 <tud_network_recv_renew>
  }
}
 800411e:	bf00      	nop
 8004120:	3718      	adds	r7, #24
 8004122:	46bd      	mov	sp, r7
 8004124:	bd80      	pop	{r7, pc}
 8004126:	bf00      	nop
 8004128:	24001000 	.word	0x24001000
 800412c:	24001d00 	.word	0x24001d00

08004130 <netd_xfer_cb>:

bool netd_xfer_cb(uint8_t rhport, uint8_t ep_addr, xfer_result_t result, uint32_t xferred_bytes)
{
 8004130:	b580      	push	{r7, lr}
 8004132:	b082      	sub	sp, #8
 8004134:	af00      	add	r7, sp, #0
 8004136:	603b      	str	r3, [r7, #0]
 8004138:	4603      	mov	r3, r0
 800413a:	71fb      	strb	r3, [r7, #7]
 800413c:	460b      	mov	r3, r1
 800413e:	71bb      	strb	r3, [r7, #6]
 8004140:	4613      	mov	r3, r2
 8004142:	717b      	strb	r3, [r7, #5]
  (void) rhport;
  (void) result;

  /* new packet received */
  if ( ep_addr == _netd_itf.ep_out )
 8004144:	4b18      	ldr	r3, [pc, #96]	@ (80041a8 <netd_xfer_cb+0x78>)
 8004146:	791b      	ldrb	r3, [r3, #4]
 8004148:	79ba      	ldrb	r2, [r7, #6]
 800414a:	429a      	cmp	r2, r3
 800414c:	d102      	bne.n	8004154 <netd_xfer_cb+0x24>
  {
    handle_incoming_packet(xferred_bytes);
 800414e:	6838      	ldr	r0, [r7, #0]
 8004150:	f7ff ffa8 	bl	80040a4 <handle_incoming_packet>
  }

  /* data transmission finished */
  if ( ep_addr == _netd_itf.ep_in )
 8004154:	4b14      	ldr	r3, [pc, #80]	@ (80041a8 <netd_xfer_cb+0x78>)
 8004156:	78db      	ldrb	r3, [r3, #3]
 8004158:	79ba      	ldrb	r2, [r7, #6]
 800415a:	429a      	cmp	r2, r3
 800415c:	d10f      	bne.n	800417e <netd_xfer_cb+0x4e>
  {
    /* TinyUSB requires the class driver to implement ZLP (since ZLP usage is class-specific) */

    if ( xferred_bytes && (0 == (xferred_bytes % CFG_TUD_NET_ENDPOINT_SIZE)) )
 800415e:	683b      	ldr	r3, [r7, #0]
 8004160:	2b00      	cmp	r3, #0
 8004162:	d009      	beq.n	8004178 <netd_xfer_cb+0x48>
 8004164:	683b      	ldr	r3, [r7, #0]
 8004166:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800416a:	2b00      	cmp	r3, #0
 800416c:	d104      	bne.n	8004178 <netd_xfer_cb+0x48>
    {
      do_in_xfer(NULL, 0); /* a ZLP is needed */
 800416e:	2100      	movs	r1, #0
 8004170:	2000      	movs	r0, #0
 8004172:	f7ff fc8f 	bl	8003a94 <do_in_xfer>
 8004176:	e002      	b.n	800417e <netd_xfer_cb+0x4e>
    }
    else
    {
      /* we're finally finished */
      can_xmit = true;
 8004178:	4b0c      	ldr	r3, [pc, #48]	@ (80041ac <netd_xfer_cb+0x7c>)
 800417a:	2201      	movs	r2, #1
 800417c:	701a      	strb	r2, [r3, #0]
    }
  }

  if ( _netd_itf.ecm_mode && (ep_addr == _netd_itf.ep_notif) )
 800417e:	4b0a      	ldr	r3, [pc, #40]	@ (80041a8 <netd_xfer_cb+0x78>)
 8004180:	795b      	ldrb	r3, [r3, #5]
 8004182:	2b00      	cmp	r3, #0
 8004184:	d00a      	beq.n	800419c <netd_xfer_cb+0x6c>
 8004186:	4b08      	ldr	r3, [pc, #32]	@ (80041a8 <netd_xfer_cb+0x78>)
 8004188:	789b      	ldrb	r3, [r3, #2]
 800418a:	79ba      	ldrb	r2, [r7, #6]
 800418c:	429a      	cmp	r2, r3
 800418e:	d105      	bne.n	800419c <netd_xfer_cb+0x6c>
  {
    if (sizeof(notify.ecm_buf.header) == xferred_bytes) ecm_report(false);
 8004190:	683b      	ldr	r3, [r7, #0]
 8004192:	2b08      	cmp	r3, #8
 8004194:	d102      	bne.n	800419c <netd_xfer_cb+0x6c>
 8004196:	2000      	movs	r0, #0
 8004198:	f7ff fe24 	bl	8003de4 <ecm_report>
  }

  return true;
 800419c:	2301      	movs	r3, #1
}
 800419e:	4618      	mov	r0, r3
 80041a0:	3708      	adds	r7, #8
 80041a2:	46bd      	mov	sp, r7
 80041a4:	bd80      	pop	{r7, pc}
 80041a6:	bf00      	nop
 80041a8:	24001d00 	.word	0x24001d00
 80041ac:	24001d0c 	.word	0x24001d0c

080041b0 <tud_network_can_xmit>:

bool tud_network_can_xmit(uint16_t size)
{
 80041b0:	b480      	push	{r7}
 80041b2:	b083      	sub	sp, #12
 80041b4:	af00      	add	r7, sp, #0
 80041b6:	4603      	mov	r3, r0
 80041b8:	80fb      	strh	r3, [r7, #6]
  (void)size;

  return can_xmit;
 80041ba:	4b04      	ldr	r3, [pc, #16]	@ (80041cc <tud_network_can_xmit+0x1c>)
 80041bc:	781b      	ldrb	r3, [r3, #0]
}
 80041be:	4618      	mov	r0, r3
 80041c0:	370c      	adds	r7, #12
 80041c2:	46bd      	mov	sp, r7
 80041c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041c8:	4770      	bx	lr
 80041ca:	bf00      	nop
 80041cc:	24001d0c 	.word	0x24001d0c

080041d0 <tud_network_xmit>:

void tud_network_xmit(void *ref, uint16_t arg)
{
 80041d0:	b580      	push	{r7, lr}
 80041d2:	b086      	sub	sp, #24
 80041d4:	af00      	add	r7, sp, #0
 80041d6:	6078      	str	r0, [r7, #4]
 80041d8:	460b      	mov	r3, r1
 80041da:	807b      	strh	r3, [r7, #2]
  uint8_t *data;
  uint16_t len;

  if (!can_xmit)
 80041dc:	4b21      	ldr	r3, [pc, #132]	@ (8004264 <tud_network_xmit+0x94>)
 80041de:	781b      	ldrb	r3, [r3, #0]
 80041e0:	f083 0301 	eor.w	r3, r3, #1
 80041e4:	b2db      	uxtb	r3, r3
 80041e6:	2b00      	cmp	r3, #0
 80041e8:	d138      	bne.n	800425c <tud_network_xmit+0x8c>
    return;

  len = (_netd_itf.ecm_mode) ? 0 : CFG_TUD_NET_PACKET_PREFIX_LEN;
 80041ea:	4b1f      	ldr	r3, [pc, #124]	@ (8004268 <tud_network_xmit+0x98>)
 80041ec:	795b      	ldrb	r3, [r3, #5]
 80041ee:	2b00      	cmp	r3, #0
 80041f0:	d001      	beq.n	80041f6 <tud_network_xmit+0x26>
 80041f2:	2300      	movs	r3, #0
 80041f4:	e000      	b.n	80041f8 <tud_network_xmit+0x28>
 80041f6:	232c      	movs	r3, #44	@ 0x2c
 80041f8:	82fb      	strh	r3, [r7, #22]
  data = transmitted + len;
 80041fa:	8afb      	ldrh	r3, [r7, #22]
 80041fc:	4a1b      	ldr	r2, [pc, #108]	@ (800426c <tud_network_xmit+0x9c>)
 80041fe:	4413      	add	r3, r2
 8004200:	613b      	str	r3, [r7, #16]

  len += tud_network_xmit_cb(data, ref, arg);
 8004202:	887b      	ldrh	r3, [r7, #2]
 8004204:	461a      	mov	r2, r3
 8004206:	6879      	ldr	r1, [r7, #4]
 8004208:	6938      	ldr	r0, [r7, #16]
 800420a:	f7fc fbca 	bl	80009a2 <tud_network_xmit_cb>
 800420e:	4603      	mov	r3, r0
 8004210:	461a      	mov	r2, r3
 8004212:	8afb      	ldrh	r3, [r7, #22]
 8004214:	4413      	add	r3, r2
 8004216:	82fb      	strh	r3, [r7, #22]

  if (!_netd_itf.ecm_mode)
 8004218:	4b13      	ldr	r3, [pc, #76]	@ (8004268 <tud_network_xmit+0x98>)
 800421a:	795b      	ldrb	r3, [r3, #5]
 800421c:	f083 0301 	eor.w	r3, r3, #1
 8004220:	b2db      	uxtb	r3, r3
 8004222:	2b00      	cmp	r3, #0
 8004224:	d014      	beq.n	8004250 <tud_network_xmit+0x80>
  {
    rndis_data_packet_t *hdr = (rndis_data_packet_t *) ((void*) transmitted);
 8004226:	4b11      	ldr	r3, [pc, #68]	@ (800426c <tud_network_xmit+0x9c>)
 8004228:	60fb      	str	r3, [r7, #12]
    memset(hdr, 0, sizeof(rndis_data_packet_t));
 800422a:	222c      	movs	r2, #44	@ 0x2c
 800422c:	2100      	movs	r1, #0
 800422e:	68f8      	ldr	r0, [r7, #12]
 8004230:	f015 fbcc 	bl	80199cc <memset>
    hdr->MessageType = REMOTE_NDIS_PACKET_MSG;
 8004234:	68fb      	ldr	r3, [r7, #12]
 8004236:	2201      	movs	r2, #1
 8004238:	601a      	str	r2, [r3, #0]
    hdr->MessageLength = len;
 800423a:	8afa      	ldrh	r2, [r7, #22]
 800423c:	68fb      	ldr	r3, [r7, #12]
 800423e:	605a      	str	r2, [r3, #4]
    hdr->DataOffset = sizeof(rndis_data_packet_t) - offsetof(rndis_data_packet_t, DataOffset);
 8004240:	68fb      	ldr	r3, [r7, #12]
 8004242:	2224      	movs	r2, #36	@ 0x24
 8004244:	609a      	str	r2, [r3, #8]
    hdr->DataLength = len - sizeof(rndis_data_packet_t);
 8004246:	8afb      	ldrh	r3, [r7, #22]
 8004248:	f1a3 022c 	sub.w	r2, r3, #44	@ 0x2c
 800424c:	68fb      	ldr	r3, [r7, #12]
 800424e:	60da      	str	r2, [r3, #12]
  }

  do_in_xfer(transmitted, len);
 8004250:	8afb      	ldrh	r3, [r7, #22]
 8004252:	4619      	mov	r1, r3
 8004254:	4805      	ldr	r0, [pc, #20]	@ (800426c <tud_network_xmit+0x9c>)
 8004256:	f7ff fc1d 	bl	8003a94 <do_in_xfer>
 800425a:	e000      	b.n	800425e <tud_network_xmit+0x8e>
    return;
 800425c:	bf00      	nop
}
 800425e:	3718      	adds	r7, #24
 8004260:	46bd      	mov	sp, r7
 8004262:	bd80      	pop	{r7, pc}
 8004264:	24001d0c 	.word	0x24001d0c
 8004268:	24001d00 	.word	0x24001d00
 800426c:	24001644 	.word	0x24001644

08004270 <tu_fifo_config>:
  TU_FIFO_COPY_INC,            ///< Copy from/to an increasing source/destination address - default mode
  TU_FIFO_COPY_CST_FULL_WORDS, ///< Copy from/to a constant source/destination address - required for e.g. STM32 to write into USB hardware FIFO
} tu_fifo_copy_mode_t;

bool tu_fifo_config(tu_fifo_t *f, void* buffer, uint16_t depth, uint16_t item_size, bool overwritable)
{
 8004270:	b480      	push	{r7}
 8004272:	b085      	sub	sp, #20
 8004274:	af00      	add	r7, sp, #0
 8004276:	60f8      	str	r0, [r7, #12]
 8004278:	60b9      	str	r1, [r7, #8]
 800427a:	4611      	mov	r1, r2
 800427c:	461a      	mov	r2, r3
 800427e:	460b      	mov	r3, r1
 8004280:	80fb      	strh	r3, [r7, #6]
 8004282:	4613      	mov	r3, r2
 8004284:	80bb      	strh	r3, [r7, #4]
  // Limit index space to 2*depth - this allows for a fast "modulo" calculation
  // but limits the maximum depth to 2^16/2 = 2^15 and buffer overflows are detectable
  // only if overflow happens once (important for unsupervised DMA applications)
  if (depth > 0x8000) return false;
 8004286:	88fb      	ldrh	r3, [r7, #6]
 8004288:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800428c:	d901      	bls.n	8004292 <tu_fifo_config+0x22>
 800428e:	2300      	movs	r3, #0
 8004290:	e01b      	b.n	80042ca <tu_fifo_config+0x5a>

  _ff_lock(f->mutex_wr);
  _ff_lock(f->mutex_rd);

  f->buffer       = (uint8_t*) buffer;
 8004292:	68fb      	ldr	r3, [r7, #12]
 8004294:	68ba      	ldr	r2, [r7, #8]
 8004296:	601a      	str	r2, [r3, #0]
  f->depth        = depth;
 8004298:	68fb      	ldr	r3, [r7, #12]
 800429a:	88fa      	ldrh	r2, [r7, #6]
 800429c:	809a      	strh	r2, [r3, #4]
  f->item_size    = (uint16_t) (item_size & 0x7FFF);
 800429e:	88bb      	ldrh	r3, [r7, #4]
 80042a0:	f3c3 030e 	ubfx	r3, r3, #0, #15
 80042a4:	b299      	uxth	r1, r3
 80042a6:	68fa      	ldr	r2, [r7, #12]
 80042a8:	88d3      	ldrh	r3, [r2, #6]
 80042aa:	f361 030e 	bfi	r3, r1, #0, #15
 80042ae:	80d3      	strh	r3, [r2, #6]
  f->overwritable = overwritable;
 80042b0:	68fa      	ldr	r2, [r7, #12]
 80042b2:	79d3      	ldrb	r3, [r2, #7]
 80042b4:	7e39      	ldrb	r1, [r7, #24]
 80042b6:	f361 13c7 	bfi	r3, r1, #7, #1
 80042ba:	71d3      	strb	r3, [r2, #7]
  f->rd_idx       = 0;
 80042bc:	68fb      	ldr	r3, [r7, #12]
 80042be:	2200      	movs	r2, #0
 80042c0:	815a      	strh	r2, [r3, #10]
  f->wr_idx       = 0;
 80042c2:	68fb      	ldr	r3, [r7, #12]
 80042c4:	2200      	movs	r2, #0
 80042c6:	811a      	strh	r2, [r3, #8]

  _ff_unlock(f->mutex_wr);
  _ff_unlock(f->mutex_rd);

  return true;
 80042c8:	2301      	movs	r3, #1
}
 80042ca:	4618      	mov	r0, r3
 80042cc:	3714      	adds	r7, #20
 80042ce:	46bd      	mov	sp, r7
 80042d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042d4:	4770      	bx	lr

080042d6 <_ff_push_const_addr>:

// Intended to be used to read from hardware USB FIFO in e.g. STM32 where all data is read from a constant address
// Code adapted from dcd_synopsys.c
// TODO generalize with configurable 1 byte or 4 byte each read
static void _ff_push_const_addr(uint8_t * ff_buf, const void * app_buf, uint16_t len)
{
 80042d6:	b580      	push	{r7, lr}
 80042d8:	b08a      	sub	sp, #40	@ 0x28
 80042da:	af00      	add	r7, sp, #0
 80042dc:	60f8      	str	r0, [r7, #12]
 80042de:	60b9      	str	r1, [r7, #8]
 80042e0:	4613      	mov	r3, r2
 80042e2:	80fb      	strh	r3, [r7, #6]
  volatile const uint32_t * reg_rx = (volatile const uint32_t *) app_buf;
 80042e4:	68bb      	ldr	r3, [r7, #8]
 80042e6:	623b      	str	r3, [r7, #32]

  // Reading full available 32 bit words from const app address
  uint16_t full_words = len >> 2;
 80042e8:	88fb      	ldrh	r3, [r7, #6]
 80042ea:	089b      	lsrs	r3, r3, #2
 80042ec:	84fb      	strh	r3, [r7, #38]	@ 0x26
  while(full_words--)
 80042ee:	e00b      	b.n	8004308 <_ff_push_const_addr+0x32>
  {
    tu_unaligned_write32(ff_buf, *reg_rx);
 80042f0:	6a3b      	ldr	r3, [r7, #32]
 80042f2:	681b      	ldr	r3, [r3, #0]
 80042f4:	68fa      	ldr	r2, [r7, #12]
 80042f6:	61ba      	str	r2, [r7, #24]
 80042f8:	617b      	str	r3, [r7, #20]
}

TU_ATTR_ALWAYS_INLINE static inline void tu_unaligned_write32(void *mem, uint32_t value) {
  *((uint32_t *) mem) = value;
 80042fa:	69bb      	ldr	r3, [r7, #24]
 80042fc:	697a      	ldr	r2, [r7, #20]
 80042fe:	601a      	str	r2, [r3, #0]
}
 8004300:	bf00      	nop
    ff_buf += 4;
 8004302:	68fb      	ldr	r3, [r7, #12]
 8004304:	3304      	adds	r3, #4
 8004306:	60fb      	str	r3, [r7, #12]
  while(full_words--)
 8004308:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800430a:	1e5a      	subs	r2, r3, #1
 800430c:	84fa      	strh	r2, [r7, #38]	@ 0x26
 800430e:	2b00      	cmp	r3, #0
 8004310:	d1ee      	bne.n	80042f0 <_ff_push_const_addr+0x1a>
  }

  // Read the remaining 1-3 bytes from const app address
  uint8_t const bytes_rem = len & 0x03;
 8004312:	88fb      	ldrh	r3, [r7, #6]
 8004314:	b2db      	uxtb	r3, r3
 8004316:	f003 0303 	and.w	r3, r3, #3
 800431a:	77fb      	strb	r3, [r7, #31]
  if ( bytes_rem )
 800431c:	7ffb      	ldrb	r3, [r7, #31]
 800431e:	2b00      	cmp	r3, #0
 8004320:	d009      	beq.n	8004336 <_ff_push_const_addr+0x60>
  {
    uint32_t tmp32 = *reg_rx;
 8004322:	6a3b      	ldr	r3, [r7, #32]
 8004324:	681b      	ldr	r3, [r3, #0]
 8004326:	613b      	str	r3, [r7, #16]
    memcpy(ff_buf, &tmp32, bytes_rem);
 8004328:	7ffa      	ldrb	r2, [r7, #31]
 800432a:	f107 0310 	add.w	r3, r7, #16
 800432e:	4619      	mov	r1, r3
 8004330:	68f8      	ldr	r0, [r7, #12]
 8004332:	f015 fc0c 	bl	8019b4e <memcpy>
  }
}
 8004336:	bf00      	nop
 8004338:	3728      	adds	r7, #40	@ 0x28
 800433a:	46bd      	mov	sp, r7
 800433c:	bd80      	pop	{r7, pc}

0800433e <_ff_pull_const_addr>:

// Intended to be used to write to hardware USB FIFO in e.g. STM32
// where all data is written to a constant address in full word copies
static void _ff_pull_const_addr(void * app_buf, const uint8_t * ff_buf, uint16_t len)
{
 800433e:	b580      	push	{r7, lr}
 8004340:	b08a      	sub	sp, #40	@ 0x28
 8004342:	af00      	add	r7, sp, #0
 8004344:	60f8      	str	r0, [r7, #12]
 8004346:	60b9      	str	r1, [r7, #8]
 8004348:	4613      	mov	r3, r2
 800434a:	80fb      	strh	r3, [r7, #6]
  volatile uint32_t * reg_tx = (volatile uint32_t *) app_buf;
 800434c:	68fb      	ldr	r3, [r7, #12]
 800434e:	623b      	str	r3, [r7, #32]

  // Write full available 32 bit words to const address
  uint16_t full_words = len >> 2;
 8004350:	88fb      	ldrh	r3, [r7, #6]
 8004352:	089b      	lsrs	r3, r3, #2
 8004354:	84fb      	strh	r3, [r7, #38]	@ 0x26
  while(full_words--)
 8004356:	e008      	b.n	800436a <_ff_pull_const_addr+0x2c>
 8004358:	68bb      	ldr	r3, [r7, #8]
 800435a:	61bb      	str	r3, [r7, #24]
  return *((uint32_t const *) mem);
 800435c:	69bb      	ldr	r3, [r7, #24]
 800435e:	681a      	ldr	r2, [r3, #0]
  {
    *reg_tx = tu_unaligned_read32(ff_buf);
 8004360:	6a3b      	ldr	r3, [r7, #32]
 8004362:	601a      	str	r2, [r3, #0]
    ff_buf += 4;
 8004364:	68bb      	ldr	r3, [r7, #8]
 8004366:	3304      	adds	r3, #4
 8004368:	60bb      	str	r3, [r7, #8]
  while(full_words--)
 800436a:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800436c:	1e5a      	subs	r2, r3, #1
 800436e:	84fa      	strh	r2, [r7, #38]	@ 0x26
 8004370:	2b00      	cmp	r3, #0
 8004372:	d1f1      	bne.n	8004358 <_ff_pull_const_addr+0x1a>
  }

  // Write the remaining 1-3 bytes into const address
  uint8_t const bytes_rem = len & 0x03;
 8004374:	88fb      	ldrh	r3, [r7, #6]
 8004376:	b2db      	uxtb	r3, r3
 8004378:	f003 0303 	and.w	r3, r3, #3
 800437c:	77fb      	strb	r3, [r7, #31]
  if ( bytes_rem )
 800437e:	7ffb      	ldrb	r3, [r7, #31]
 8004380:	2b00      	cmp	r3, #0
 8004382:	d00b      	beq.n	800439c <_ff_pull_const_addr+0x5e>
  {
    uint32_t tmp32 = 0;
 8004384:	2300      	movs	r3, #0
 8004386:	617b      	str	r3, [r7, #20]
    memcpy(&tmp32, ff_buf, bytes_rem);
 8004388:	7ffa      	ldrb	r2, [r7, #31]
 800438a:	f107 0314 	add.w	r3, r7, #20
 800438e:	68b9      	ldr	r1, [r7, #8]
 8004390:	4618      	mov	r0, r3
 8004392:	f015 fbdc 	bl	8019b4e <memcpy>

    *reg_tx = tmp32;
 8004396:	697a      	ldr	r2, [r7, #20]
 8004398:	6a3b      	ldr	r3, [r7, #32]
 800439a:	601a      	str	r2, [r3, #0]
  }
}
 800439c:	bf00      	nop
 800439e:	3728      	adds	r7, #40	@ 0x28
 80043a0:	46bd      	mov	sp, r7
 80043a2:	bd80      	pop	{r7, pc}

080043a4 <_ff_push>:

// send one item to fifo WITHOUT updating write pointer
static inline void _ff_push(tu_fifo_t* f, void const * app_buf, uint16_t rel)
{
 80043a4:	b580      	push	{r7, lr}
 80043a6:	b084      	sub	sp, #16
 80043a8:	af00      	add	r7, sp, #0
 80043aa:	60f8      	str	r0, [r7, #12]
 80043ac:	60b9      	str	r1, [r7, #8]
 80043ae:	4613      	mov	r3, r2
 80043b0:	80fb      	strh	r3, [r7, #6]
  memcpy(f->buffer + (rel * f->item_size), app_buf, f->item_size);
 80043b2:	68fb      	ldr	r3, [r7, #12]
 80043b4:	681b      	ldr	r3, [r3, #0]
 80043b6:	88fa      	ldrh	r2, [r7, #6]
 80043b8:	68f9      	ldr	r1, [r7, #12]
 80043ba:	88c9      	ldrh	r1, [r1, #6]
 80043bc:	f3c1 010e 	ubfx	r1, r1, #0, #15
 80043c0:	b289      	uxth	r1, r1
 80043c2:	fb01 f202 	mul.w	r2, r1, r2
 80043c6:	1898      	adds	r0, r3, r2
 80043c8:	68fb      	ldr	r3, [r7, #12]
 80043ca:	88db      	ldrh	r3, [r3, #6]
 80043cc:	f3c3 030e 	ubfx	r3, r3, #0, #15
 80043d0:	b29b      	uxth	r3, r3
 80043d2:	461a      	mov	r2, r3
 80043d4:	68b9      	ldr	r1, [r7, #8]
 80043d6:	f015 fbba 	bl	8019b4e <memcpy>
}
 80043da:	bf00      	nop
 80043dc:	3710      	adds	r7, #16
 80043de:	46bd      	mov	sp, r7
 80043e0:	bd80      	pop	{r7, pc}

080043e2 <_ff_push_n>:

// send n items to fifo WITHOUT updating write pointer
static void _ff_push_n(tu_fifo_t* f, void const * app_buf, uint16_t n, uint16_t wr_ptr, tu_fifo_copy_mode_t copy_mode)
{
 80043e2:	b580      	push	{r7, lr}
 80043e4:	b08e      	sub	sp, #56	@ 0x38
 80043e6:	af00      	add	r7, sp, #0
 80043e8:	60f8      	str	r0, [r7, #12]
 80043ea:	60b9      	str	r1, [r7, #8]
 80043ec:	4611      	mov	r1, r2
 80043ee:	461a      	mov	r2, r3
 80043f0:	460b      	mov	r3, r1
 80043f2:	80fb      	strh	r3, [r7, #6]
 80043f4:	4613      	mov	r3, r2
 80043f6:	80bb      	strh	r3, [r7, #4]
  uint16_t const lin_count = f->depth - wr_ptr;
 80043f8:	68fb      	ldr	r3, [r7, #12]
 80043fa:	889a      	ldrh	r2, [r3, #4]
 80043fc:	88bb      	ldrh	r3, [r7, #4]
 80043fe:	1ad3      	subs	r3, r2, r3
 8004400:	84fb      	strh	r3, [r7, #38]	@ 0x26
  uint16_t const wrap_count = n - lin_count;
 8004402:	88fa      	ldrh	r2, [r7, #6]
 8004404:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8004406:	1ad3      	subs	r3, r2, r3
 8004408:	84bb      	strh	r3, [r7, #36]	@ 0x24

  uint16_t lin_bytes = lin_count * f->item_size;
 800440a:	68fb      	ldr	r3, [r7, #12]
 800440c:	88db      	ldrh	r3, [r3, #6]
 800440e:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8004412:	b29b      	uxth	r3, r3
 8004414:	461a      	mov	r2, r3
 8004416:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8004418:	fb13 f302 	smulbb	r3, r3, r2
 800441c:	847b      	strh	r3, [r7, #34]	@ 0x22
  uint16_t wrap_bytes = wrap_count * f->item_size;
 800441e:	68fb      	ldr	r3, [r7, #12]
 8004420:	88db      	ldrh	r3, [r3, #6]
 8004422:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8004426:	b29b      	uxth	r3, r3
 8004428:	461a      	mov	r2, r3
 800442a:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800442c:	fb13 f302 	smulbb	r3, r3, r2
 8004430:	86fb      	strh	r3, [r7, #54]	@ 0x36

  // current buffer of fifo
  uint8_t* ff_buf = f->buffer + (wr_ptr * f->item_size);
 8004432:	68fb      	ldr	r3, [r7, #12]
 8004434:	681b      	ldr	r3, [r3, #0]
 8004436:	88ba      	ldrh	r2, [r7, #4]
 8004438:	68f9      	ldr	r1, [r7, #12]
 800443a:	88c9      	ldrh	r1, [r1, #6]
 800443c:	f3c1 010e 	ubfx	r1, r1, #0, #15
 8004440:	b289      	uxth	r1, r1
 8004442:	fb01 f202 	mul.w	r2, r1, r2
 8004446:	4413      	add	r3, r2
 8004448:	633b      	str	r3, [r7, #48]	@ 0x30

  switch (copy_mode)
 800444a:	f897 3040 	ldrb.w	r3, [r7, #64]	@ 0x40
 800444e:	2b00      	cmp	r3, #0
 8004450:	d002      	beq.n	8004458 <_ff_push_n+0x76>
 8004452:	2b01      	cmp	r3, #1
 8004454:	d022      	beq.n	800449c <_ff_push_n+0xba>
        // Write data wrapped part
        if (wrap_bytes > 0) _ff_push_const_addr(ff_buf, app_buf, wrap_bytes);
      }
      break;
  }
}
 8004456:	e09e      	b.n	8004596 <_ff_push_n+0x1b4>
      if(n <= lin_count)
 8004458:	88fa      	ldrh	r2, [r7, #6]
 800445a:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800445c:	429a      	cmp	r2, r3
 800445e:	d80d      	bhi.n	800447c <_ff_push_n+0x9a>
        memcpy(ff_buf, app_buf, n*f->item_size);
 8004460:	88fb      	ldrh	r3, [r7, #6]
 8004462:	68fa      	ldr	r2, [r7, #12]
 8004464:	88d2      	ldrh	r2, [r2, #6]
 8004466:	f3c2 020e 	ubfx	r2, r2, #0, #15
 800446a:	b292      	uxth	r2, r2
 800446c:	fb02 f303 	mul.w	r3, r2, r3
 8004470:	461a      	mov	r2, r3
 8004472:	68b9      	ldr	r1, [r7, #8]
 8004474:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8004476:	f015 fb6a 	bl	8019b4e <memcpy>
      break;
 800447a:	e08c      	b.n	8004596 <_ff_push_n+0x1b4>
        memcpy(ff_buf, app_buf, lin_bytes);
 800447c:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800447e:	461a      	mov	r2, r3
 8004480:	68b9      	ldr	r1, [r7, #8]
 8004482:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8004484:	f015 fb63 	bl	8019b4e <memcpy>
        memcpy(f->buffer, ((uint8_t const*) app_buf) + lin_bytes, wrap_bytes);
 8004488:	68fb      	ldr	r3, [r7, #12]
 800448a:	6818      	ldr	r0, [r3, #0]
 800448c:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800448e:	68ba      	ldr	r2, [r7, #8]
 8004490:	4413      	add	r3, r2
 8004492:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 8004494:	4619      	mov	r1, r3
 8004496:	f015 fb5a 	bl	8019b4e <memcpy>
      break;
 800449a:	e07c      	b.n	8004596 <_ff_push_n+0x1b4>
      if(n <= lin_count)
 800449c:	88fa      	ldrh	r2, [r7, #6]
 800449e:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 80044a0:	429a      	cmp	r2, r3
 80044a2:	d80f      	bhi.n	80044c4 <_ff_push_n+0xe2>
        _ff_push_const_addr(ff_buf, app_buf, n*f->item_size);
 80044a4:	68fb      	ldr	r3, [r7, #12]
 80044a6:	88db      	ldrh	r3, [r3, #6]
 80044a8:	f3c3 030e 	ubfx	r3, r3, #0, #15
 80044ac:	b29b      	uxth	r3, r3
 80044ae:	461a      	mov	r2, r3
 80044b0:	88fb      	ldrh	r3, [r7, #6]
 80044b2:	fb13 f302 	smulbb	r3, r3, r2
 80044b6:	b29b      	uxth	r3, r3
 80044b8:	461a      	mov	r2, r3
 80044ba:	68b9      	ldr	r1, [r7, #8]
 80044bc:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80044be:	f7ff ff0a 	bl	80042d6 <_ff_push_const_addr>
      break;
 80044c2:	e067      	b.n	8004594 <_ff_push_n+0x1b2>
        uint16_t nLin_4n_bytes = lin_bytes & 0xFFFC;
 80044c4:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 80044c6:	f023 0303 	bic.w	r3, r3, #3
 80044ca:	843b      	strh	r3, [r7, #32]
        _ff_push_const_addr(ff_buf, app_buf, nLin_4n_bytes);
 80044cc:	8c3b      	ldrh	r3, [r7, #32]
 80044ce:	461a      	mov	r2, r3
 80044d0:	68b9      	ldr	r1, [r7, #8]
 80044d2:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80044d4:	f7ff feff 	bl	80042d6 <_ff_push_const_addr>
        ff_buf += nLin_4n_bytes;
 80044d8:	8c3b      	ldrh	r3, [r7, #32]
 80044da:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80044dc:	4413      	add	r3, r2
 80044de:	633b      	str	r3, [r7, #48]	@ 0x30
        uint8_t rem = lin_bytes & 0x03;
 80044e0:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 80044e2:	b2db      	uxtb	r3, r3
 80044e4:	f003 0303 	and.w	r3, r3, #3
 80044e8:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
        if (rem > 0)
 80044ec:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80044f0:	2b00      	cmp	r3, #0
 80044f2:	d043      	beq.n	800457c <_ff_push_n+0x19a>
          volatile const uint32_t * rx_fifo = (volatile const uint32_t *) app_buf;
 80044f4:	68bb      	ldr	r3, [r7, #8]
 80044f6:	61fb      	str	r3, [r7, #28]
          uint8_t remrem = (uint8_t) tu_min16(wrap_bytes, 4-rem);
 80044f8:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80044fc:	b29b      	uxth	r3, r3
 80044fe:	f1c3 0304 	rsb	r3, r3, #4
 8004502:	b29a      	uxth	r2, r3
 8004504:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8004506:	837b      	strh	r3, [r7, #26]
 8004508:	4613      	mov	r3, r2
 800450a:	833b      	strh	r3, [r7, #24]
TU_ATTR_ALWAYS_INLINE static inline uint16_t tu_min16 (uint16_t x, uint16_t y) { return (x < y) ? x : y; }
 800450c:	8b7a      	ldrh	r2, [r7, #26]
 800450e:	8b3b      	ldrh	r3, [r7, #24]
 8004510:	4293      	cmp	r3, r2
 8004512:	bf28      	it	cs
 8004514:	4613      	movcs	r3, r2
 8004516:	b29b      	uxth	r3, r3
 8004518:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e
          wrap_bytes -= remrem;
 800451c:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8004520:	b29b      	uxth	r3, r3
 8004522:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 8004524:	1ad3      	subs	r3, r2, r3
 8004526:	86fb      	strh	r3, [r7, #54]	@ 0x36
          uint32_t tmp32 = *rx_fifo;
 8004528:	69fb      	ldr	r3, [r7, #28]
 800452a:	681b      	ldr	r3, [r3, #0]
 800452c:	617b      	str	r3, [r7, #20]
          uint8_t * src_u8 = ((uint8_t *) &tmp32);
 800452e:	f107 0314 	add.w	r3, r7, #20
 8004532:	62bb      	str	r3, [r7, #40]	@ 0x28
          while(rem--) *ff_buf++ = *src_u8++;
 8004534:	e007      	b.n	8004546 <_ff_push_n+0x164>
 8004536:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8004538:	1c53      	adds	r3, r2, #1
 800453a:	62bb      	str	r3, [r7, #40]	@ 0x28
 800453c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800453e:	1c59      	adds	r1, r3, #1
 8004540:	6339      	str	r1, [r7, #48]	@ 0x30
 8004542:	7812      	ldrb	r2, [r2, #0]
 8004544:	701a      	strb	r2, [r3, #0]
 8004546:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800454a:	1e5a      	subs	r2, r3, #1
 800454c:	f887 202f 	strb.w	r2, [r7, #47]	@ 0x2f
 8004550:	2b00      	cmp	r3, #0
 8004552:	d1f0      	bne.n	8004536 <_ff_push_n+0x154>
          ff_buf = f->buffer;
 8004554:	68fb      	ldr	r3, [r7, #12]
 8004556:	681b      	ldr	r3, [r3, #0]
 8004558:	633b      	str	r3, [r7, #48]	@ 0x30
          while(remrem--) *ff_buf++ = *src_u8++;
 800455a:	e007      	b.n	800456c <_ff_push_n+0x18a>
 800455c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800455e:	1c53      	adds	r3, r2, #1
 8004560:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004562:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004564:	1c59      	adds	r1, r3, #1
 8004566:	6339      	str	r1, [r7, #48]	@ 0x30
 8004568:	7812      	ldrb	r2, [r2, #0]
 800456a:	701a      	strb	r2, [r3, #0]
 800456c:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8004570:	1e5a      	subs	r2, r3, #1
 8004572:	f887 202e 	strb.w	r2, [r7, #46]	@ 0x2e
 8004576:	2b00      	cmp	r3, #0
 8004578:	d1f0      	bne.n	800455c <_ff_push_n+0x17a>
 800457a:	e002      	b.n	8004582 <_ff_push_n+0x1a0>
          ff_buf = f->buffer; // wrap around to beginning
 800457c:	68fb      	ldr	r3, [r7, #12]
 800457e:	681b      	ldr	r3, [r3, #0]
 8004580:	633b      	str	r3, [r7, #48]	@ 0x30
        if (wrap_bytes > 0) _ff_push_const_addr(ff_buf, app_buf, wrap_bytes);
 8004582:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8004584:	2b00      	cmp	r3, #0
 8004586:	d005      	beq.n	8004594 <_ff_push_n+0x1b2>
 8004588:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800458a:	461a      	mov	r2, r3
 800458c:	68b9      	ldr	r1, [r7, #8]
 800458e:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8004590:	f7ff fea1 	bl	80042d6 <_ff_push_const_addr>
      break;
 8004594:	bf00      	nop
}
 8004596:	bf00      	nop
 8004598:	3738      	adds	r7, #56	@ 0x38
 800459a:	46bd      	mov	sp, r7
 800459c:	bd80      	pop	{r7, pc}

0800459e <_ff_pull>:

// get one item from fifo WITHOUT updating read pointer
static inline void _ff_pull(tu_fifo_t* f, void * app_buf, uint16_t rel)
{
 800459e:	b580      	push	{r7, lr}
 80045a0:	b084      	sub	sp, #16
 80045a2:	af00      	add	r7, sp, #0
 80045a4:	60f8      	str	r0, [r7, #12]
 80045a6:	60b9      	str	r1, [r7, #8]
 80045a8:	4613      	mov	r3, r2
 80045aa:	80fb      	strh	r3, [r7, #6]
  memcpy(app_buf, f->buffer + (rel * f->item_size), f->item_size);
 80045ac:	68fb      	ldr	r3, [r7, #12]
 80045ae:	681b      	ldr	r3, [r3, #0]
 80045b0:	88fa      	ldrh	r2, [r7, #6]
 80045b2:	68f9      	ldr	r1, [r7, #12]
 80045b4:	88c9      	ldrh	r1, [r1, #6]
 80045b6:	f3c1 010e 	ubfx	r1, r1, #0, #15
 80045ba:	b289      	uxth	r1, r1
 80045bc:	fb01 f202 	mul.w	r2, r1, r2
 80045c0:	1899      	adds	r1, r3, r2
 80045c2:	68fb      	ldr	r3, [r7, #12]
 80045c4:	88db      	ldrh	r3, [r3, #6]
 80045c6:	f3c3 030e 	ubfx	r3, r3, #0, #15
 80045ca:	b29b      	uxth	r3, r3
 80045cc:	461a      	mov	r2, r3
 80045ce:	68b8      	ldr	r0, [r7, #8]
 80045d0:	f015 fabd 	bl	8019b4e <memcpy>
}
 80045d4:	bf00      	nop
 80045d6:	3710      	adds	r7, #16
 80045d8:	46bd      	mov	sp, r7
 80045da:	bd80      	pop	{r7, pc}

080045dc <_ff_pull_n>:

// get n items from fifo WITHOUT updating read pointer
static void _ff_pull_n(tu_fifo_t* f, void* app_buf, uint16_t n, uint16_t rd_ptr, tu_fifo_copy_mode_t copy_mode)
{
 80045dc:	b580      	push	{r7, lr}
 80045de:	b08e      	sub	sp, #56	@ 0x38
 80045e0:	af00      	add	r7, sp, #0
 80045e2:	60f8      	str	r0, [r7, #12]
 80045e4:	60b9      	str	r1, [r7, #8]
 80045e6:	4611      	mov	r1, r2
 80045e8:	461a      	mov	r2, r3
 80045ea:	460b      	mov	r3, r1
 80045ec:	80fb      	strh	r3, [r7, #6]
 80045ee:	4613      	mov	r3, r2
 80045f0:	80bb      	strh	r3, [r7, #4]
  uint16_t const lin_count = f->depth - rd_ptr;
 80045f2:	68fb      	ldr	r3, [r7, #12]
 80045f4:	889a      	ldrh	r2, [r3, #4]
 80045f6:	88bb      	ldrh	r3, [r7, #4]
 80045f8:	1ad3      	subs	r3, r2, r3
 80045fa:	84fb      	strh	r3, [r7, #38]	@ 0x26
  uint16_t const wrap_count = n - lin_count; // only used if wrapped
 80045fc:	88fa      	ldrh	r2, [r7, #6]
 80045fe:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8004600:	1ad3      	subs	r3, r2, r3
 8004602:	84bb      	strh	r3, [r7, #36]	@ 0x24

  uint16_t lin_bytes = lin_count * f->item_size;
 8004604:	68fb      	ldr	r3, [r7, #12]
 8004606:	88db      	ldrh	r3, [r3, #6]
 8004608:	f3c3 030e 	ubfx	r3, r3, #0, #15
 800460c:	b29b      	uxth	r3, r3
 800460e:	461a      	mov	r2, r3
 8004610:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8004612:	fb13 f302 	smulbb	r3, r3, r2
 8004616:	847b      	strh	r3, [r7, #34]	@ 0x22
  uint16_t wrap_bytes = wrap_count * f->item_size;
 8004618:	68fb      	ldr	r3, [r7, #12]
 800461a:	88db      	ldrh	r3, [r3, #6]
 800461c:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8004620:	b29b      	uxth	r3, r3
 8004622:	461a      	mov	r2, r3
 8004624:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8004626:	fb13 f302 	smulbb	r3, r3, r2
 800462a:	86fb      	strh	r3, [r7, #54]	@ 0x36

  // current buffer of fifo
  uint8_t* ff_buf = f->buffer + (rd_ptr * f->item_size);
 800462c:	68fb      	ldr	r3, [r7, #12]
 800462e:	681b      	ldr	r3, [r3, #0]
 8004630:	88ba      	ldrh	r2, [r7, #4]
 8004632:	68f9      	ldr	r1, [r7, #12]
 8004634:	88c9      	ldrh	r1, [r1, #6]
 8004636:	f3c1 010e 	ubfx	r1, r1, #0, #15
 800463a:	b289      	uxth	r1, r1
 800463c:	fb01 f202 	mul.w	r2, r1, r2
 8004640:	4413      	add	r3, r2
 8004642:	633b      	str	r3, [r7, #48]	@ 0x30

  switch (copy_mode)
 8004644:	f897 3040 	ldrb.w	r3, [r7, #64]	@ 0x40
 8004648:	2b00      	cmp	r3, #0
 800464a:	d002      	beq.n	8004652 <_ff_pull_n+0x76>
 800464c:	2b01      	cmp	r3, #1
 800464e:	d022      	beq.n	8004696 <_ff_pull_n+0xba>
        // Read data wrapped part
        if (wrap_bytes > 0) _ff_pull_const_addr(app_buf, ff_buf, wrap_bytes);
      }
    break;

    default: break;
 8004650:	e0a0      	b.n	8004794 <_ff_pull_n+0x1b8>
      if ( n <= lin_count )
 8004652:	88fa      	ldrh	r2, [r7, #6]
 8004654:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8004656:	429a      	cmp	r2, r3
 8004658:	d80d      	bhi.n	8004676 <_ff_pull_n+0x9a>
        memcpy(app_buf, ff_buf, n*f->item_size);
 800465a:	88fb      	ldrh	r3, [r7, #6]
 800465c:	68fa      	ldr	r2, [r7, #12]
 800465e:	88d2      	ldrh	r2, [r2, #6]
 8004660:	f3c2 020e 	ubfx	r2, r2, #0, #15
 8004664:	b292      	uxth	r2, r2
 8004666:	fb02 f303 	mul.w	r3, r2, r3
 800466a:	461a      	mov	r2, r3
 800466c:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800466e:	68b8      	ldr	r0, [r7, #8]
 8004670:	f015 fa6d 	bl	8019b4e <memcpy>
    break;
 8004674:	e08e      	b.n	8004794 <_ff_pull_n+0x1b8>
        memcpy(app_buf, ff_buf, lin_bytes);
 8004676:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8004678:	461a      	mov	r2, r3
 800467a:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800467c:	68b8      	ldr	r0, [r7, #8]
 800467e:	f015 fa66 	bl	8019b4e <memcpy>
        memcpy((uint8_t*) app_buf + lin_bytes, f->buffer, wrap_bytes);
 8004682:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8004684:	68ba      	ldr	r2, [r7, #8]
 8004686:	18d0      	adds	r0, r2, r3
 8004688:	68fb      	ldr	r3, [r7, #12]
 800468a:	681b      	ldr	r3, [r3, #0]
 800468c:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 800468e:	4619      	mov	r1, r3
 8004690:	f015 fa5d 	bl	8019b4e <memcpy>
    break;
 8004694:	e07e      	b.n	8004794 <_ff_pull_n+0x1b8>
      if ( n <= lin_count )
 8004696:	88fa      	ldrh	r2, [r7, #6]
 8004698:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800469a:	429a      	cmp	r2, r3
 800469c:	d80f      	bhi.n	80046be <_ff_pull_n+0xe2>
        _ff_pull_const_addr(app_buf, ff_buf, n*f->item_size);
 800469e:	68fb      	ldr	r3, [r7, #12]
 80046a0:	88db      	ldrh	r3, [r3, #6]
 80046a2:	f3c3 030e 	ubfx	r3, r3, #0, #15
 80046a6:	b29b      	uxth	r3, r3
 80046a8:	461a      	mov	r2, r3
 80046aa:	88fb      	ldrh	r3, [r7, #6]
 80046ac:	fb13 f302 	smulbb	r3, r3, r2
 80046b0:	b29b      	uxth	r3, r3
 80046b2:	461a      	mov	r2, r3
 80046b4:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 80046b6:	68b8      	ldr	r0, [r7, #8]
 80046b8:	f7ff fe41 	bl	800433e <_ff_pull_const_addr>
    break;
 80046bc:	e069      	b.n	8004792 <_ff_pull_n+0x1b6>
        uint16_t lin_4n_bytes = lin_bytes & 0xFFFC;
 80046be:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 80046c0:	f023 0303 	bic.w	r3, r3, #3
 80046c4:	843b      	strh	r3, [r7, #32]
        _ff_pull_const_addr(app_buf, ff_buf, lin_4n_bytes);
 80046c6:	8c3b      	ldrh	r3, [r7, #32]
 80046c8:	461a      	mov	r2, r3
 80046ca:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 80046cc:	68b8      	ldr	r0, [r7, #8]
 80046ce:	f7ff fe36 	bl	800433e <_ff_pull_const_addr>
        ff_buf += lin_4n_bytes;
 80046d2:	8c3b      	ldrh	r3, [r7, #32]
 80046d4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80046d6:	4413      	add	r3, r2
 80046d8:	633b      	str	r3, [r7, #48]	@ 0x30
        uint8_t rem = lin_bytes & 0x03;
 80046da:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 80046dc:	b2db      	uxtb	r3, r3
 80046de:	f003 0303 	and.w	r3, r3, #3
 80046e2:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
        if (rem > 0)
 80046e6:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80046ea:	2b00      	cmp	r3, #0
 80046ec:	d045      	beq.n	800477a <_ff_pull_n+0x19e>
          volatile uint32_t * reg_tx = (volatile uint32_t *) app_buf;
 80046ee:	68bb      	ldr	r3, [r7, #8]
 80046f0:	61fb      	str	r3, [r7, #28]
          uint8_t remrem = (uint8_t) tu_min16(wrap_bytes, 4-rem);
 80046f2:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80046f6:	b29b      	uxth	r3, r3
 80046f8:	f1c3 0304 	rsb	r3, r3, #4
 80046fc:	b29a      	uxth	r2, r3
 80046fe:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8004700:	837b      	strh	r3, [r7, #26]
 8004702:	4613      	mov	r3, r2
 8004704:	833b      	strh	r3, [r7, #24]
 8004706:	8b7a      	ldrh	r2, [r7, #26]
 8004708:	8b3b      	ldrh	r3, [r7, #24]
 800470a:	4293      	cmp	r3, r2
 800470c:	bf28      	it	cs
 800470e:	4613      	movcs	r3, r2
 8004710:	b29b      	uxth	r3, r3
 8004712:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e
          wrap_bytes -= remrem;
 8004716:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 800471a:	b29b      	uxth	r3, r3
 800471c:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 800471e:	1ad3      	subs	r3, r2, r3
 8004720:	86fb      	strh	r3, [r7, #54]	@ 0x36
          uint32_t tmp32=0;
 8004722:	2300      	movs	r3, #0
 8004724:	617b      	str	r3, [r7, #20]
          uint8_t * dst_u8 = (uint8_t *)&tmp32;
 8004726:	f107 0314 	add.w	r3, r7, #20
 800472a:	62bb      	str	r3, [r7, #40]	@ 0x28
          while(rem--) *dst_u8++ = *ff_buf++;
 800472c:	e007      	b.n	800473e <_ff_pull_n+0x162>
 800472e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004730:	1c53      	adds	r3, r2, #1
 8004732:	633b      	str	r3, [r7, #48]	@ 0x30
 8004734:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004736:	1c59      	adds	r1, r3, #1
 8004738:	62b9      	str	r1, [r7, #40]	@ 0x28
 800473a:	7812      	ldrb	r2, [r2, #0]
 800473c:	701a      	strb	r2, [r3, #0]
 800473e:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8004742:	1e5a      	subs	r2, r3, #1
 8004744:	f887 202f 	strb.w	r2, [r7, #47]	@ 0x2f
 8004748:	2b00      	cmp	r3, #0
 800474a:	d1f0      	bne.n	800472e <_ff_pull_n+0x152>
          ff_buf = f->buffer;
 800474c:	68fb      	ldr	r3, [r7, #12]
 800474e:	681b      	ldr	r3, [r3, #0]
 8004750:	633b      	str	r3, [r7, #48]	@ 0x30
          while(remrem--) *dst_u8++ = *ff_buf++;
 8004752:	e007      	b.n	8004764 <_ff_pull_n+0x188>
 8004754:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004756:	1c53      	adds	r3, r2, #1
 8004758:	633b      	str	r3, [r7, #48]	@ 0x30
 800475a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800475c:	1c59      	adds	r1, r3, #1
 800475e:	62b9      	str	r1, [r7, #40]	@ 0x28
 8004760:	7812      	ldrb	r2, [r2, #0]
 8004762:	701a      	strb	r2, [r3, #0]
 8004764:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8004768:	1e5a      	subs	r2, r3, #1
 800476a:	f887 202e 	strb.w	r2, [r7, #46]	@ 0x2e
 800476e:	2b00      	cmp	r3, #0
 8004770:	d1f0      	bne.n	8004754 <_ff_pull_n+0x178>
          *reg_tx = tmp32;
 8004772:	697a      	ldr	r2, [r7, #20]
 8004774:	69fb      	ldr	r3, [r7, #28]
 8004776:	601a      	str	r2, [r3, #0]
 8004778:	e002      	b.n	8004780 <_ff_pull_n+0x1a4>
          ff_buf = f->buffer; // wrap around to beginning
 800477a:	68fb      	ldr	r3, [r7, #12]
 800477c:	681b      	ldr	r3, [r3, #0]
 800477e:	633b      	str	r3, [r7, #48]	@ 0x30
        if (wrap_bytes > 0) _ff_pull_const_addr(app_buf, ff_buf, wrap_bytes);
 8004780:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8004782:	2b00      	cmp	r3, #0
 8004784:	d005      	beq.n	8004792 <_ff_pull_n+0x1b6>
 8004786:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8004788:	461a      	mov	r2, r3
 800478a:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800478c:	68b8      	ldr	r0, [r7, #8]
 800478e:	f7ff fdd6 	bl	800433e <_ff_pull_const_addr>
    break;
 8004792:	bf00      	nop
  }
}
 8004794:	bf00      	nop
 8004796:	3738      	adds	r7, #56	@ 0x38
 8004798:	46bd      	mov	sp, r7
 800479a:	bd80      	pop	{r7, pc}

0800479c <advance_index>:
//--------------------------------------------------------------------+

// Advance an absolute index
// "absolute" index is only in the range of [0..2*depth)
static uint16_t advance_index(uint16_t depth, uint16_t idx, uint16_t offset)
{
 800479c:	b480      	push	{r7}
 800479e:	b085      	sub	sp, #20
 80047a0:	af00      	add	r7, sp, #0
 80047a2:	4603      	mov	r3, r0
 80047a4:	80fb      	strh	r3, [r7, #6]
 80047a6:	460b      	mov	r3, r1
 80047a8:	80bb      	strh	r3, [r7, #4]
 80047aa:	4613      	mov	r3, r2
 80047ac:	807b      	strh	r3, [r7, #2]
  // We limit the index space of p such that a correct wrap around happens
  // Check for a wrap around or if we are in unused index space - This has to be checked first!!
  // We are exploiting the wrap around to the correct index
  uint16_t new_idx = (uint16_t) (idx + offset);
 80047ae:	88ba      	ldrh	r2, [r7, #4]
 80047b0:	887b      	ldrh	r3, [r7, #2]
 80047b2:	4413      	add	r3, r2
 80047b4:	81fb      	strh	r3, [r7, #14]
  if ( (idx > new_idx) || (new_idx >= 2*depth) )
 80047b6:	88ba      	ldrh	r2, [r7, #4]
 80047b8:	89fb      	ldrh	r3, [r7, #14]
 80047ba:	429a      	cmp	r2, r3
 80047bc:	d804      	bhi.n	80047c8 <advance_index+0x2c>
 80047be:	89fa      	ldrh	r2, [r7, #14]
 80047c0:	88fb      	ldrh	r3, [r7, #6]
 80047c2:	005b      	lsls	r3, r3, #1
 80047c4:	429a      	cmp	r2, r3
 80047c6:	db08      	blt.n	80047da <advance_index+0x3e>
  {
    uint16_t const non_used_index_space = (uint16_t) (UINT16_MAX - (2*depth-1));
 80047c8:	88fb      	ldrh	r3, [r7, #6]
 80047ca:	005b      	lsls	r3, r3, #1
 80047cc:	b29b      	uxth	r3, r3
 80047ce:	425b      	negs	r3, r3
 80047d0:	81bb      	strh	r3, [r7, #12]
    new_idx = (uint16_t) (new_idx + non_used_index_space);
 80047d2:	89fa      	ldrh	r2, [r7, #14]
 80047d4:	89bb      	ldrh	r3, [r7, #12]
 80047d6:	4413      	add	r3, r2
 80047d8:	81fb      	strh	r3, [r7, #14]
  }

  return new_idx;
 80047da:	89fb      	ldrh	r3, [r7, #14]
}
 80047dc:	4618      	mov	r0, r3
 80047de:	3714      	adds	r7, #20
 80047e0:	46bd      	mov	sp, r7
 80047e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047e6:	4770      	bx	lr

080047e8 <_tu_fifo_peek>:
}

// Works on local copies of w and r
// Must be protected by mutexes since in case of an overflow read pointer gets modified
static bool _tu_fifo_peek(tu_fifo_t* f, void * p_buffer, uint16_t wr_idx, uint16_t rd_idx)
{
 80047e8:	b580      	push	{r7, lr}
 80047ea:	b08a      	sub	sp, #40	@ 0x28
 80047ec:	af00      	add	r7, sp, #0
 80047ee:	60f8      	str	r0, [r7, #12]
 80047f0:	60b9      	str	r1, [r7, #8]
 80047f2:	4611      	mov	r1, r2
 80047f4:	461a      	mov	r2, r3
 80047f6:	460b      	mov	r3, r1
 80047f8:	80fb      	strh	r3, [r7, #6]
 80047fa:	4613      	mov	r3, r2
 80047fc:	80bb      	strh	r3, [r7, #4]
  uint16_t cnt = _ff_count(f->depth, wr_idx, rd_idx);
 80047fe:	68fb      	ldr	r3, [r7, #12]
 8004800:	889b      	ldrh	r3, [r3, #4]
 8004802:	847b      	strh	r3, [r7, #34]	@ 0x22
 8004804:	88fb      	ldrh	r3, [r7, #6]
 8004806:	843b      	strh	r3, [r7, #32]
 8004808:	88bb      	ldrh	r3, [r7, #4]
 800480a:	83fb      	strh	r3, [r7, #30]
  if (wr_idx >= rd_idx)
 800480c:	8c3a      	ldrh	r2, [r7, #32]
 800480e:	8bfb      	ldrh	r3, [r7, #30]
 8004810:	429a      	cmp	r2, r3
 8004812:	d304      	bcc.n	800481e <_tu_fifo_peek+0x36>
    return (uint16_t) (wr_idx - rd_idx);
 8004814:	8c3a      	ldrh	r2, [r7, #32]
 8004816:	8bfb      	ldrh	r3, [r7, #30]
 8004818:	1ad3      	subs	r3, r2, r3
 800481a:	b29b      	uxth	r3, r3
 800481c:	e008      	b.n	8004830 <_tu_fifo_peek+0x48>
    return (uint16_t) (2*depth - (rd_idx - wr_idx));
 800481e:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8004820:	005b      	lsls	r3, r3, #1
 8004822:	b29a      	uxth	r2, r3
 8004824:	8c39      	ldrh	r1, [r7, #32]
 8004826:	8bfb      	ldrh	r3, [r7, #30]
 8004828:	1acb      	subs	r3, r1, r3
 800482a:	b29b      	uxth	r3, r3
 800482c:	4413      	add	r3, r2
 800482e:	b29b      	uxth	r3, r3
  uint16_t cnt = _ff_count(f->depth, wr_idx, rd_idx);
 8004830:	84fb      	strh	r3, [r7, #38]	@ 0x26

  // nothing to peek
  if ( cnt == 0 ) return false;
 8004832:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8004834:	2b00      	cmp	r3, #0
 8004836:	d101      	bne.n	800483c <_tu_fifo_peek+0x54>
 8004838:	2300      	movs	r3, #0
 800483a:	e037      	b.n	80048ac <_tu_fifo_peek+0xc4>

  // Check overflow and correct if required
  if ( cnt > f->depth )
 800483c:	68fb      	ldr	r3, [r7, #12]
 800483e:	889b      	ldrh	r3, [r3, #4]
 8004840:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 8004842:	429a      	cmp	r2, r3
 8004844:	d91b      	bls.n	800487e <_tu_fifo_peek+0x96>
 8004846:	68fb      	ldr	r3, [r7, #12]
 8004848:	61bb      	str	r3, [r7, #24]
 800484a:	88fb      	ldrh	r3, [r7, #6]
 800484c:	82fb      	strh	r3, [r7, #22]
  if ( wr_idx >= f->depth )
 800484e:	69bb      	ldr	r3, [r7, #24]
 8004850:	889b      	ldrh	r3, [r3, #4]
 8004852:	8afa      	ldrh	r2, [r7, #22]
 8004854:	429a      	cmp	r2, r3
 8004856:	d305      	bcc.n	8004864 <_tu_fifo_peek+0x7c>
    rd_idx = wr_idx - f->depth;
 8004858:	69bb      	ldr	r3, [r7, #24]
 800485a:	889b      	ldrh	r3, [r3, #4]
 800485c:	8afa      	ldrh	r2, [r7, #22]
 800485e:	1ad3      	subs	r3, r2, r3
 8004860:	82bb      	strh	r3, [r7, #20]
 8004862:	e004      	b.n	800486e <_tu_fifo_peek+0x86>
    rd_idx = wr_idx + f->depth;
 8004864:	69bb      	ldr	r3, [r7, #24]
 8004866:	889a      	ldrh	r2, [r3, #4]
 8004868:	8afb      	ldrh	r3, [r7, #22]
 800486a:	4413      	add	r3, r2
 800486c:	82bb      	strh	r3, [r7, #20]
  f->rd_idx = rd_idx;
 800486e:	69bb      	ldr	r3, [r7, #24]
 8004870:	8aba      	ldrh	r2, [r7, #20]
 8004872:	815a      	strh	r2, [r3, #10]
  return rd_idx;
 8004874:	8abb      	ldrh	r3, [r7, #20]
  {
    rd_idx = _ff_correct_read_index(f, wr_idx);
 8004876:	80bb      	strh	r3, [r7, #4]
    cnt = f->depth;
 8004878:	68fb      	ldr	r3, [r7, #12]
 800487a:	889b      	ldrh	r3, [r3, #4]
 800487c:	84fb      	strh	r3, [r7, #38]	@ 0x26
  }

  uint16_t rd_ptr = idx2ptr(f->depth, rd_idx);
 800487e:	68fb      	ldr	r3, [r7, #12]
 8004880:	889b      	ldrh	r3, [r3, #4]
 8004882:	827b      	strh	r3, [r7, #18]
 8004884:	88bb      	ldrh	r3, [r7, #4]
 8004886:	823b      	strh	r3, [r7, #16]
  while ( idx >= depth ) idx -= depth;
 8004888:	e003      	b.n	8004892 <_tu_fifo_peek+0xaa>
 800488a:	8a3a      	ldrh	r2, [r7, #16]
 800488c:	8a7b      	ldrh	r3, [r7, #18]
 800488e:	1ad3      	subs	r3, r2, r3
 8004890:	823b      	strh	r3, [r7, #16]
 8004892:	8a7a      	ldrh	r2, [r7, #18]
 8004894:	8a3b      	ldrh	r3, [r7, #16]
 8004896:	429a      	cmp	r2, r3
 8004898:	d9f7      	bls.n	800488a <_tu_fifo_peek+0xa2>
  return idx;
 800489a:	8a3b      	ldrh	r3, [r7, #16]
  uint16_t rd_ptr = idx2ptr(f->depth, rd_idx);
 800489c:	84bb      	strh	r3, [r7, #36]	@ 0x24

  // Peek data
  _ff_pull(f, p_buffer, rd_ptr);
 800489e:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80048a0:	461a      	mov	r2, r3
 80048a2:	68b9      	ldr	r1, [r7, #8]
 80048a4:	68f8      	ldr	r0, [r7, #12]
 80048a6:	f7ff fe7a 	bl	800459e <_ff_pull>

  return true;
 80048aa:	2301      	movs	r3, #1
}
 80048ac:	4618      	mov	r0, r3
 80048ae:	3728      	adds	r7, #40	@ 0x28
 80048b0:	46bd      	mov	sp, r7
 80048b2:	bd80      	pop	{r7, pc}

080048b4 <_tu_fifo_peek_n>:

// Works on local copies of w and r
// Must be protected by mutexes since in case of an overflow read pointer gets modified
static uint16_t _tu_fifo_peek_n(tu_fifo_t* f, void * p_buffer, uint16_t n, uint16_t wr_idx, uint16_t rd_idx, tu_fifo_copy_mode_t copy_mode)
{
 80048b4:	b580      	push	{r7, lr}
 80048b6:	b08c      	sub	sp, #48	@ 0x30
 80048b8:	af02      	add	r7, sp, #8
 80048ba:	60f8      	str	r0, [r7, #12]
 80048bc:	60b9      	str	r1, [r7, #8]
 80048be:	4611      	mov	r1, r2
 80048c0:	461a      	mov	r2, r3
 80048c2:	460b      	mov	r3, r1
 80048c4:	80fb      	strh	r3, [r7, #6]
 80048c6:	4613      	mov	r3, r2
 80048c8:	80bb      	strh	r3, [r7, #4]
  uint16_t cnt = _ff_count(f->depth, wr_idx, rd_idx);
 80048ca:	68fb      	ldr	r3, [r7, #12]
 80048cc:	889b      	ldrh	r3, [r3, #4]
 80048ce:	847b      	strh	r3, [r7, #34]	@ 0x22
 80048d0:	88bb      	ldrh	r3, [r7, #4]
 80048d2:	843b      	strh	r3, [r7, #32]
 80048d4:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 80048d6:	83fb      	strh	r3, [r7, #30]
  if (wr_idx >= rd_idx)
 80048d8:	8c3a      	ldrh	r2, [r7, #32]
 80048da:	8bfb      	ldrh	r3, [r7, #30]
 80048dc:	429a      	cmp	r2, r3
 80048de:	d304      	bcc.n	80048ea <_tu_fifo_peek_n+0x36>
    return (uint16_t) (wr_idx - rd_idx);
 80048e0:	8c3a      	ldrh	r2, [r7, #32]
 80048e2:	8bfb      	ldrh	r3, [r7, #30]
 80048e4:	1ad3      	subs	r3, r2, r3
 80048e6:	b29b      	uxth	r3, r3
 80048e8:	e008      	b.n	80048fc <_tu_fifo_peek_n+0x48>
    return (uint16_t) (2*depth - (rd_idx - wr_idx));
 80048ea:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 80048ec:	005b      	lsls	r3, r3, #1
 80048ee:	b29a      	uxth	r2, r3
 80048f0:	8c39      	ldrh	r1, [r7, #32]
 80048f2:	8bfb      	ldrh	r3, [r7, #30]
 80048f4:	1acb      	subs	r3, r1, r3
 80048f6:	b29b      	uxth	r3, r3
 80048f8:	4413      	add	r3, r2
 80048fa:	b29b      	uxth	r3, r3
  uint16_t cnt = _ff_count(f->depth, wr_idx, rd_idx);
 80048fc:	84fb      	strh	r3, [r7, #38]	@ 0x26

  // nothing to peek
  if ( cnt == 0 ) return 0;
 80048fe:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8004900:	2b00      	cmp	r3, #0
 8004902:	d101      	bne.n	8004908 <_tu_fifo_peek_n+0x54>
 8004904:	2300      	movs	r3, #0
 8004906:	e041      	b.n	800498c <_tu_fifo_peek_n+0xd8>

  // Check overflow and correct if required
  if ( cnt > f->depth )
 8004908:	68fb      	ldr	r3, [r7, #12]
 800490a:	889b      	ldrh	r3, [r3, #4]
 800490c:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 800490e:	429a      	cmp	r2, r3
 8004910:	d91b      	bls.n	800494a <_tu_fifo_peek_n+0x96>
 8004912:	68fb      	ldr	r3, [r7, #12]
 8004914:	61bb      	str	r3, [r7, #24]
 8004916:	88bb      	ldrh	r3, [r7, #4]
 8004918:	82fb      	strh	r3, [r7, #22]
  if ( wr_idx >= f->depth )
 800491a:	69bb      	ldr	r3, [r7, #24]
 800491c:	889b      	ldrh	r3, [r3, #4]
 800491e:	8afa      	ldrh	r2, [r7, #22]
 8004920:	429a      	cmp	r2, r3
 8004922:	d305      	bcc.n	8004930 <_tu_fifo_peek_n+0x7c>
    rd_idx = wr_idx - f->depth;
 8004924:	69bb      	ldr	r3, [r7, #24]
 8004926:	889b      	ldrh	r3, [r3, #4]
 8004928:	8afa      	ldrh	r2, [r7, #22]
 800492a:	1ad3      	subs	r3, r2, r3
 800492c:	82bb      	strh	r3, [r7, #20]
 800492e:	e004      	b.n	800493a <_tu_fifo_peek_n+0x86>
    rd_idx = wr_idx + f->depth;
 8004930:	69bb      	ldr	r3, [r7, #24]
 8004932:	889a      	ldrh	r2, [r3, #4]
 8004934:	8afb      	ldrh	r3, [r7, #22]
 8004936:	4413      	add	r3, r2
 8004938:	82bb      	strh	r3, [r7, #20]
  f->rd_idx = rd_idx;
 800493a:	69bb      	ldr	r3, [r7, #24]
 800493c:	8aba      	ldrh	r2, [r7, #20]
 800493e:	815a      	strh	r2, [r3, #10]
  return rd_idx;
 8004940:	8abb      	ldrh	r3, [r7, #20]
  {
    rd_idx = _ff_correct_read_index(f, wr_idx);
 8004942:	863b      	strh	r3, [r7, #48]	@ 0x30
    cnt = f->depth;
 8004944:	68fb      	ldr	r3, [r7, #12]
 8004946:	889b      	ldrh	r3, [r3, #4]
 8004948:	84fb      	strh	r3, [r7, #38]	@ 0x26
  }

  // Check if we can read something at and after offset - if too less is available we read what remains
  if ( cnt < n ) n = cnt;
 800494a:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 800494c:	88fb      	ldrh	r3, [r7, #6]
 800494e:	429a      	cmp	r2, r3
 8004950:	d201      	bcs.n	8004956 <_tu_fifo_peek_n+0xa2>
 8004952:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8004954:	80fb      	strh	r3, [r7, #6]

  uint16_t rd_ptr = idx2ptr(f->depth, rd_idx);
 8004956:	68fb      	ldr	r3, [r7, #12]
 8004958:	889b      	ldrh	r3, [r3, #4]
 800495a:	827b      	strh	r3, [r7, #18]
 800495c:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 800495e:	823b      	strh	r3, [r7, #16]
  while ( idx >= depth ) idx -= depth;
 8004960:	e003      	b.n	800496a <_tu_fifo_peek_n+0xb6>
 8004962:	8a3a      	ldrh	r2, [r7, #16]
 8004964:	8a7b      	ldrh	r3, [r7, #18]
 8004966:	1ad3      	subs	r3, r2, r3
 8004968:	823b      	strh	r3, [r7, #16]
 800496a:	8a7a      	ldrh	r2, [r7, #18]
 800496c:	8a3b      	ldrh	r3, [r7, #16]
 800496e:	429a      	cmp	r2, r3
 8004970:	d9f7      	bls.n	8004962 <_tu_fifo_peek_n+0xae>
  return idx;
 8004972:	8a3b      	ldrh	r3, [r7, #16]
  uint16_t rd_ptr = idx2ptr(f->depth, rd_idx);
 8004974:	84bb      	strh	r3, [r7, #36]	@ 0x24

  // Peek data
  _ff_pull_n(f, p_buffer, n, rd_ptr, copy_mode);
 8004976:	8cb9      	ldrh	r1, [r7, #36]	@ 0x24
 8004978:	88fa      	ldrh	r2, [r7, #6]
 800497a:	f897 3034 	ldrb.w	r3, [r7, #52]	@ 0x34
 800497e:	9300      	str	r3, [sp, #0]
 8004980:	460b      	mov	r3, r1
 8004982:	68b9      	ldr	r1, [r7, #8]
 8004984:	68f8      	ldr	r0, [r7, #12]
 8004986:	f7ff fe29 	bl	80045dc <_ff_pull_n>

  return n;
 800498a:	88fb      	ldrh	r3, [r7, #6]
}
 800498c:	4618      	mov	r0, r3
 800498e:	3728      	adds	r7, #40	@ 0x28
 8004990:	46bd      	mov	sp, r7
 8004992:	bd80      	pop	{r7, pc}

08004994 <_tu_fifo_write_n>:

static uint16_t _tu_fifo_write_n(tu_fifo_t* f, const void * data, uint16_t n, tu_fifo_copy_mode_t copy_mode)
{
 8004994:	b580      	push	{r7, lr}
 8004996:	b092      	sub	sp, #72	@ 0x48
 8004998:	af02      	add	r7, sp, #8
 800499a:	60f8      	str	r0, [r7, #12]
 800499c:	60b9      	str	r1, [r7, #8]
 800499e:	4611      	mov	r1, r2
 80049a0:	461a      	mov	r2, r3
 80049a2:	460b      	mov	r3, r1
 80049a4:	80fb      	strh	r3, [r7, #6]
 80049a6:	4613      	mov	r3, r2
 80049a8:	717b      	strb	r3, [r7, #5]
  if ( n == 0 ) return 0;
 80049aa:	88fb      	ldrh	r3, [r7, #6]
 80049ac:	2b00      	cmp	r3, #0
 80049ae:	d101      	bne.n	80049b4 <_tu_fifo_write_n+0x20>
 80049b0:	2300      	movs	r3, #0
 80049b2:	e0bc      	b.n	8004b2e <_tu_fifo_write_n+0x19a>

  _ff_lock(f->mutex_wr);

  uint16_t wr_idx = f->wr_idx;
 80049b4:	68fb      	ldr	r3, [r7, #12]
 80049b6:	891b      	ldrh	r3, [r3, #8]
 80049b8:	87fb      	strh	r3, [r7, #62]	@ 0x3e
  uint16_t rd_idx = f->rd_idx;
 80049ba:	68fb      	ldr	r3, [r7, #12]
 80049bc:	895b      	ldrh	r3, [r3, #10]
 80049be:	86fb      	strh	r3, [r7, #54]	@ 0x36

  uint8_t const* buf8 = (uint8_t const*) data;
 80049c0:	68bb      	ldr	r3, [r7, #8]
 80049c2:	63bb      	str	r3, [r7, #56]	@ 0x38

  TU_LOG(TU_FIFO_DBG, "rd = %3u, wr = %3u, count = %3u, remain = %3u, n = %3u:  ",
                       rd_idx, wr_idx, _ff_count(f->depth, wr_idx, rd_idx), _ff_remaining(f->depth, wr_idx, rd_idx), n);

  if ( !f->overwritable )
 80049c4:	68fb      	ldr	r3, [r7, #12]
 80049c6:	79db      	ldrb	r3, [r3, #7]
 80049c8:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 80049cc:	b2db      	uxtb	r3, r3
 80049ce:	f083 0301 	eor.w	r3, r3, #1
 80049d2:	b2db      	uxtb	r3, r3
 80049d4:	2b00      	cmp	r3, #0
 80049d6:	d036      	beq.n	8004a46 <_tu_fifo_write_n+0xb2>
  {
    // limit up to full
    uint16_t const remain = _ff_remaining(f->depth, wr_idx, rd_idx);
 80049d8:	68fb      	ldr	r3, [r7, #12]
 80049da:	889b      	ldrh	r3, [r3, #4]
 80049dc:	857b      	strh	r3, [r7, #42]	@ 0x2a
 80049de:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 80049e0:	853b      	strh	r3, [r7, #40]	@ 0x28
 80049e2:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 80049e4:	84fb      	strh	r3, [r7, #38]	@ 0x26
 80049e6:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 80049e8:	84bb      	strh	r3, [r7, #36]	@ 0x24
 80049ea:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 80049ec:	847b      	strh	r3, [r7, #34]	@ 0x22
 80049ee:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 80049f0:	843b      	strh	r3, [r7, #32]
  if (wr_idx >= rd_idx)
 80049f2:	8c7a      	ldrh	r2, [r7, #34]	@ 0x22
 80049f4:	8c3b      	ldrh	r3, [r7, #32]
 80049f6:	429a      	cmp	r2, r3
 80049f8:	d304      	bcc.n	8004a04 <_tu_fifo_write_n+0x70>
    return (uint16_t) (wr_idx - rd_idx);
 80049fa:	8c7a      	ldrh	r2, [r7, #34]	@ 0x22
 80049fc:	8c3b      	ldrh	r3, [r7, #32]
 80049fe:	1ad3      	subs	r3, r2, r3
 8004a00:	b29b      	uxth	r3, r3
 8004a02:	e008      	b.n	8004a16 <_tu_fifo_write_n+0x82>
    return (uint16_t) (2*depth - (rd_idx - wr_idx));
 8004a04:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8004a06:	005b      	lsls	r3, r3, #1
 8004a08:	b29a      	uxth	r2, r3
 8004a0a:	8c79      	ldrh	r1, [r7, #34]	@ 0x22
 8004a0c:	8c3b      	ldrh	r3, [r7, #32]
 8004a0e:	1acb      	subs	r3, r1, r3
 8004a10:	b29b      	uxth	r3, r3
 8004a12:	4413      	add	r3, r2
 8004a14:	b29b      	uxth	r3, r3
  uint16_t const count = _ff_count(depth, wr_idx, rd_idx);
 8004a16:	83fb      	strh	r3, [r7, #30]
  return (depth > count) ? (depth - count) : 0;
 8004a18:	8d7a      	ldrh	r2, [r7, #42]	@ 0x2a
 8004a1a:	8bfb      	ldrh	r3, [r7, #30]
 8004a1c:	429a      	cmp	r2, r3
 8004a1e:	d904      	bls.n	8004a2a <_tu_fifo_write_n+0x96>
 8004a20:	8d7a      	ldrh	r2, [r7, #42]	@ 0x2a
 8004a22:	8bfb      	ldrh	r3, [r7, #30]
 8004a24:	1ad3      	subs	r3, r2, r3
 8004a26:	b29b      	uxth	r3, r3
 8004a28:	e000      	b.n	8004a2c <_tu_fifo_write_n+0x98>
 8004a2a:	2300      	movs	r3, #0
    uint16_t const remain = _ff_remaining(f->depth, wr_idx, rd_idx);
 8004a2c:	867b      	strh	r3, [r7, #50]	@ 0x32
 8004a2e:	88fb      	ldrh	r3, [r7, #6]
 8004a30:	85fb      	strh	r3, [r7, #46]	@ 0x2e
 8004a32:	8e7b      	ldrh	r3, [r7, #50]	@ 0x32
 8004a34:	85bb      	strh	r3, [r7, #44]	@ 0x2c
 8004a36:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 8004a38:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 8004a3a:	4293      	cmp	r3, r2
 8004a3c:	bf28      	it	cs
 8004a3e:	4613      	movcs	r3, r2
 8004a40:	b29b      	uxth	r3, r3
    n = tu_min16(n, remain);
 8004a42:	80fb      	strh	r3, [r7, #6]
 8004a44:	e04b      	b.n	8004ade <_tu_fifo_write_n+0x14a>
  {
    // In over-writable mode, fifo_write() is allowed even when fifo is full. In such case,
    // oldest data in fifo i.e at read pointer data will be overwritten
    // Note: we can modify read buffer contents but we must not modify the read index itself within a write function!
    // Since it would end up in a race condition with read functions!
    if ( n >= f->depth )
 8004a46:	68fb      	ldr	r3, [r7, #12]
 8004a48:	889b      	ldrh	r3, [r3, #4]
 8004a4a:	88fa      	ldrh	r2, [r7, #6]
 8004a4c:	429a      	cmp	r2, r3
 8004a4e:	d317      	bcc.n	8004a80 <_tu_fifo_write_n+0xec>
    {
      // Only copy last part
      if ( copy_mode == TU_FIFO_COPY_INC )
 8004a50:	797b      	ldrb	r3, [r7, #5]
 8004a52:	2b00      	cmp	r3, #0
 8004a54:	d10e      	bne.n	8004a74 <_tu_fifo_write_n+0xe0>
      {
        buf8 += (n - f->depth) * f->item_size;
 8004a56:	88fb      	ldrh	r3, [r7, #6]
 8004a58:	68fa      	ldr	r2, [r7, #12]
 8004a5a:	8892      	ldrh	r2, [r2, #4]
 8004a5c:	1a9b      	subs	r3, r3, r2
 8004a5e:	68fa      	ldr	r2, [r7, #12]
 8004a60:	88d2      	ldrh	r2, [r2, #6]
 8004a62:	f3c2 020e 	ubfx	r2, r2, #0, #15
 8004a66:	b292      	uxth	r2, r2
 8004a68:	fb02 f303 	mul.w	r3, r2, r3
 8004a6c:	461a      	mov	r2, r3
 8004a6e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004a70:	4413      	add	r3, r2
 8004a72:	63bb      	str	r3, [r7, #56]	@ 0x38
      {
        // TODO should read from hw fifo to discard data, however reading an odd number could
        // accidentally discard data.
      }

      n = f->depth;
 8004a74:	68fb      	ldr	r3, [r7, #12]
 8004a76:	889b      	ldrh	r3, [r3, #4]
 8004a78:	80fb      	strh	r3, [r7, #6]

      // We start writing at the read pointer's position since we fill the whole buffer
      wr_idx = rd_idx;
 8004a7a:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8004a7c:	87fb      	strh	r3, [r7, #62]	@ 0x3e
 8004a7e:	e02e      	b.n	8004ade <_tu_fifo_write_n+0x14a>
    }
    else
    {
      uint16_t const overflowable_count = _ff_count(f->depth, wr_idx, rd_idx);
 8004a80:	68fb      	ldr	r3, [r7, #12]
 8004a82:	889b      	ldrh	r3, [r3, #4]
 8004a84:	83bb      	strh	r3, [r7, #28]
 8004a86:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 8004a88:	837b      	strh	r3, [r7, #26]
 8004a8a:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8004a8c:	833b      	strh	r3, [r7, #24]
  if (wr_idx >= rd_idx)
 8004a8e:	8b7a      	ldrh	r2, [r7, #26]
 8004a90:	8b3b      	ldrh	r3, [r7, #24]
 8004a92:	429a      	cmp	r2, r3
 8004a94:	d304      	bcc.n	8004aa0 <_tu_fifo_write_n+0x10c>
    return (uint16_t) (wr_idx - rd_idx);
 8004a96:	8b7a      	ldrh	r2, [r7, #26]
 8004a98:	8b3b      	ldrh	r3, [r7, #24]
 8004a9a:	1ad3      	subs	r3, r2, r3
 8004a9c:	b29b      	uxth	r3, r3
 8004a9e:	e008      	b.n	8004ab2 <_tu_fifo_write_n+0x11e>
    return (uint16_t) (2*depth - (rd_idx - wr_idx));
 8004aa0:	8bbb      	ldrh	r3, [r7, #28]
 8004aa2:	005b      	lsls	r3, r3, #1
 8004aa4:	b29a      	uxth	r2, r3
 8004aa6:	8b79      	ldrh	r1, [r7, #26]
 8004aa8:	8b3b      	ldrh	r3, [r7, #24]
 8004aaa:	1acb      	subs	r3, r1, r3
 8004aac:	b29b      	uxth	r3, r3
 8004aae:	4413      	add	r3, r2
 8004ab0:	b29b      	uxth	r3, r3
      uint16_t const overflowable_count = _ff_count(f->depth, wr_idx, rd_idx);
 8004ab2:	86bb      	strh	r3, [r7, #52]	@ 0x34
      if (overflowable_count + n >= 2*f->depth)
 8004ab4:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 8004ab6:	88fb      	ldrh	r3, [r7, #6]
 8004ab8:	441a      	add	r2, r3
 8004aba:	68fb      	ldr	r3, [r7, #12]
 8004abc:	889b      	ldrh	r3, [r3, #4]
 8004abe:	005b      	lsls	r3, r3, #1
 8004ac0:	429a      	cmp	r2, r3
 8004ac2:	db0c      	blt.n	8004ade <_tu_fifo_write_n+0x14a>
      {
        // Double overflowed
        // Index is bigger than the allowed range [0,2*depth)
        // re-position write index to have a full fifo after pushed
        wr_idx = advance_index(f->depth, rd_idx, f->depth - n);
 8004ac4:	68fb      	ldr	r3, [r7, #12]
 8004ac6:	8898      	ldrh	r0, [r3, #4]
 8004ac8:	68fb      	ldr	r3, [r7, #12]
 8004aca:	889a      	ldrh	r2, [r3, #4]
 8004acc:	88fb      	ldrh	r3, [r7, #6]
 8004ace:	1ad3      	subs	r3, r2, r3
 8004ad0:	b29a      	uxth	r2, r3
 8004ad2:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8004ad4:	4619      	mov	r1, r3
 8004ad6:	f7ff fe61 	bl	800479c <advance_index>
 8004ada:	4603      	mov	r3, r0
 8004adc:	87fb      	strh	r3, [r7, #62]	@ 0x3e
        // we will correct (re-position) read index later on in fifo_read() function
      }
    }
  }

  if (n)
 8004ade:	88fb      	ldrh	r3, [r7, #6]
 8004ae0:	2b00      	cmp	r3, #0
 8004ae2:	d023      	beq.n	8004b2c <_tu_fifo_write_n+0x198>
  {
    uint16_t wr_ptr = idx2ptr(f->depth, wr_idx);
 8004ae4:	68fb      	ldr	r3, [r7, #12]
 8004ae6:	889b      	ldrh	r3, [r3, #4]
 8004ae8:	82fb      	strh	r3, [r7, #22]
 8004aea:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 8004aec:	82bb      	strh	r3, [r7, #20]
  while ( idx >= depth ) idx -= depth;
 8004aee:	e003      	b.n	8004af8 <_tu_fifo_write_n+0x164>
 8004af0:	8aba      	ldrh	r2, [r7, #20]
 8004af2:	8afb      	ldrh	r3, [r7, #22]
 8004af4:	1ad3      	subs	r3, r2, r3
 8004af6:	82bb      	strh	r3, [r7, #20]
 8004af8:	8afa      	ldrh	r2, [r7, #22]
 8004afa:	8abb      	ldrh	r3, [r7, #20]
 8004afc:	429a      	cmp	r2, r3
 8004afe:	d9f7      	bls.n	8004af0 <_tu_fifo_write_n+0x15c>
  return idx;
 8004b00:	8abb      	ldrh	r3, [r7, #20]
    uint16_t wr_ptr = idx2ptr(f->depth, wr_idx);
 8004b02:	863b      	strh	r3, [r7, #48]	@ 0x30

    TU_LOG(TU_FIFO_DBG, "actual_n = %u, wr_ptr = %u", n, wr_ptr);

    // Write data
    _ff_push_n(f, buf8, n, wr_ptr, copy_mode);
 8004b04:	8e39      	ldrh	r1, [r7, #48]	@ 0x30
 8004b06:	88fa      	ldrh	r2, [r7, #6]
 8004b08:	797b      	ldrb	r3, [r7, #5]
 8004b0a:	9300      	str	r3, [sp, #0]
 8004b0c:	460b      	mov	r3, r1
 8004b0e:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8004b10:	68f8      	ldr	r0, [r7, #12]
 8004b12:	f7ff fc66 	bl	80043e2 <_ff_push_n>

    // Advance index
    f->wr_idx = advance_index(f->depth, wr_idx, n);
 8004b16:	68fb      	ldr	r3, [r7, #12]
 8004b18:	889b      	ldrh	r3, [r3, #4]
 8004b1a:	88fa      	ldrh	r2, [r7, #6]
 8004b1c:	8ff9      	ldrh	r1, [r7, #62]	@ 0x3e
 8004b1e:	4618      	mov	r0, r3
 8004b20:	f7ff fe3c 	bl	800479c <advance_index>
 8004b24:	4603      	mov	r3, r0
 8004b26:	461a      	mov	r2, r3
 8004b28:	68fb      	ldr	r3, [r7, #12]
 8004b2a:	811a      	strh	r2, [r3, #8]
    TU_LOG(TU_FIFO_DBG, "\tnew_wr = %u\r\n", f->wr_idx);
  }

  _ff_unlock(f->mutex_wr);

  return n;
 8004b2c:	88fb      	ldrh	r3, [r7, #6]
}
 8004b2e:	4618      	mov	r0, r3
 8004b30:	3740      	adds	r7, #64	@ 0x40
 8004b32:	46bd      	mov	sp, r7
 8004b34:	bd80      	pop	{r7, pc}

08004b36 <_tu_fifo_read_n>:

static uint16_t _tu_fifo_read_n(tu_fifo_t* f, void * buffer, uint16_t n, tu_fifo_copy_mode_t copy_mode)
{
 8004b36:	b580      	push	{r7, lr}
 8004b38:	b086      	sub	sp, #24
 8004b3a:	af02      	add	r7, sp, #8
 8004b3c:	60f8      	str	r0, [r7, #12]
 8004b3e:	60b9      	str	r1, [r7, #8]
 8004b40:	4611      	mov	r1, r2
 8004b42:	461a      	mov	r2, r3
 8004b44:	460b      	mov	r3, r1
 8004b46:	80fb      	strh	r3, [r7, #6]
 8004b48:	4613      	mov	r3, r2
 8004b4a:	717b      	strb	r3, [r7, #5]
  _ff_lock(f->mutex_rd);

  // Peek the data
  // f->rd_idx might get modified in case of an overflow so we can not use a local variable
  n = _tu_fifo_peek_n(f, buffer, n, f->wr_idx, f->rd_idx, copy_mode);
 8004b4c:	68fb      	ldr	r3, [r7, #12]
 8004b4e:	891b      	ldrh	r3, [r3, #8]
 8004b50:	b298      	uxth	r0, r3
 8004b52:	68fb      	ldr	r3, [r7, #12]
 8004b54:	895b      	ldrh	r3, [r3, #10]
 8004b56:	b29b      	uxth	r3, r3
 8004b58:	88f9      	ldrh	r1, [r7, #6]
 8004b5a:	797a      	ldrb	r2, [r7, #5]
 8004b5c:	9201      	str	r2, [sp, #4]
 8004b5e:	9300      	str	r3, [sp, #0]
 8004b60:	4603      	mov	r3, r0
 8004b62:	460a      	mov	r2, r1
 8004b64:	68b9      	ldr	r1, [r7, #8]
 8004b66:	68f8      	ldr	r0, [r7, #12]
 8004b68:	f7ff fea4 	bl	80048b4 <_tu_fifo_peek_n>
 8004b6c:	4603      	mov	r3, r0
 8004b6e:	80fb      	strh	r3, [r7, #6]

  // Advance read pointer
  f->rd_idx = advance_index(f->depth, f->rd_idx, n);
 8004b70:	68fb      	ldr	r3, [r7, #12]
 8004b72:	8898      	ldrh	r0, [r3, #4]
 8004b74:	68fb      	ldr	r3, [r7, #12]
 8004b76:	895b      	ldrh	r3, [r3, #10]
 8004b78:	b29b      	uxth	r3, r3
 8004b7a:	88fa      	ldrh	r2, [r7, #6]
 8004b7c:	4619      	mov	r1, r3
 8004b7e:	f7ff fe0d 	bl	800479c <advance_index>
 8004b82:	4603      	mov	r3, r0
 8004b84:	461a      	mov	r2, r3
 8004b86:	68fb      	ldr	r3, [r7, #12]
 8004b88:	815a      	strh	r2, [r3, #10]

  _ff_unlock(f->mutex_rd);
  return n;
 8004b8a:	88fb      	ldrh	r3, [r7, #6]
}
 8004b8c:	4618      	mov	r0, r3
 8004b8e:	3710      	adds	r7, #16
 8004b90:	46bd      	mov	sp, r7
 8004b92:	bd80      	pop	{r7, pc}

08004b94 <tu_fifo_count>:

    @returns Number of items in FIFO
 */
/******************************************************************************/
uint16_t tu_fifo_count(tu_fifo_t* f)
{
 8004b94:	b480      	push	{r7}
 8004b96:	b087      	sub	sp, #28
 8004b98:	af00      	add	r7, sp, #0
 8004b9a:	6078      	str	r0, [r7, #4]
  return tu_min16(_ff_count(f->depth, f->wr_idx, f->rd_idx), f->depth);
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	8899      	ldrh	r1, [r3, #4]
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	891b      	ldrh	r3, [r3, #8]
 8004ba4:	b29a      	uxth	r2, r3
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	895b      	ldrh	r3, [r3, #10]
 8004baa:	b29b      	uxth	r3, r3
 8004bac:	8279      	strh	r1, [r7, #18]
 8004bae:	823a      	strh	r2, [r7, #16]
 8004bb0:	81fb      	strh	r3, [r7, #14]
  if (wr_idx >= rd_idx)
 8004bb2:	8a3a      	ldrh	r2, [r7, #16]
 8004bb4:	89fb      	ldrh	r3, [r7, #14]
 8004bb6:	429a      	cmp	r2, r3
 8004bb8:	d304      	bcc.n	8004bc4 <tu_fifo_count+0x30>
    return (uint16_t) (wr_idx - rd_idx);
 8004bba:	8a3a      	ldrh	r2, [r7, #16]
 8004bbc:	89fb      	ldrh	r3, [r7, #14]
 8004bbe:	1ad3      	subs	r3, r2, r3
 8004bc0:	b29b      	uxth	r3, r3
 8004bc2:	e008      	b.n	8004bd6 <tu_fifo_count+0x42>
    return (uint16_t) (2*depth - (rd_idx - wr_idx));
 8004bc4:	8a7b      	ldrh	r3, [r7, #18]
 8004bc6:	005b      	lsls	r3, r3, #1
 8004bc8:	b29a      	uxth	r2, r3
 8004bca:	8a39      	ldrh	r1, [r7, #16]
 8004bcc:	89fb      	ldrh	r3, [r7, #14]
 8004bce:	1acb      	subs	r3, r1, r3
 8004bd0:	b29b      	uxth	r3, r3
 8004bd2:	4413      	add	r3, r2
 8004bd4:	b29b      	uxth	r3, r3
  return tu_min16(_ff_count(f->depth, f->wr_idx, f->rd_idx), f->depth);
 8004bd6:	687a      	ldr	r2, [r7, #4]
 8004bd8:	8892      	ldrh	r2, [r2, #4]
 8004bda:	82fb      	strh	r3, [r7, #22]
 8004bdc:	4613      	mov	r3, r2
 8004bde:	82bb      	strh	r3, [r7, #20]
 8004be0:	8afa      	ldrh	r2, [r7, #22]
 8004be2:	8abb      	ldrh	r3, [r7, #20]
 8004be4:	4293      	cmp	r3, r2
 8004be6:	bf28      	it	cs
 8004be8:	4613      	movcs	r3, r2
 8004bea:	b29b      	uxth	r3, r3
}
 8004bec:	4618      	mov	r0, r3
 8004bee:	371c      	adds	r7, #28
 8004bf0:	46bd      	mov	sp, r7
 8004bf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bf6:	4770      	bx	lr

08004bf8 <tu_fifo_empty>:

    @returns Number of items in FIFO
 */
/******************************************************************************/
bool tu_fifo_empty(tu_fifo_t* f)
{
 8004bf8:	b480      	push	{r7}
 8004bfa:	b083      	sub	sp, #12
 8004bfc:	af00      	add	r7, sp, #0
 8004bfe:	6078      	str	r0, [r7, #4]
  return f->wr_idx == f->rd_idx;
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	891b      	ldrh	r3, [r3, #8]
 8004c04:	b29a      	uxth	r2, r3
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	895b      	ldrh	r3, [r3, #10]
 8004c0a:	b29b      	uxth	r3, r3
 8004c0c:	429a      	cmp	r2, r3
 8004c0e:	bf0c      	ite	eq
 8004c10:	2301      	moveq	r3, #1
 8004c12:	2300      	movne	r3, #0
 8004c14:	b2db      	uxtb	r3, r3
}
 8004c16:	4618      	mov	r0, r3
 8004c18:	370c      	adds	r7, #12
 8004c1a:	46bd      	mov	sp, r7
 8004c1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c20:	4770      	bx	lr

08004c22 <tu_fifo_full>:

    @returns Number of items in FIFO
 */
/******************************************************************************/
bool tu_fifo_full(tu_fifo_t* f)
{
 8004c22:	b480      	push	{r7}
 8004c24:	b085      	sub	sp, #20
 8004c26:	af00      	add	r7, sp, #0
 8004c28:	6078      	str	r0, [r7, #4]
  return _ff_count(f->depth, f->wr_idx, f->rd_idx) >= f->depth;
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	8899      	ldrh	r1, [r3, #4]
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	891b      	ldrh	r3, [r3, #8]
 8004c32:	b29a      	uxth	r2, r3
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	895b      	ldrh	r3, [r3, #10]
 8004c38:	b29b      	uxth	r3, r3
 8004c3a:	81f9      	strh	r1, [r7, #14]
 8004c3c:	81ba      	strh	r2, [r7, #12]
 8004c3e:	817b      	strh	r3, [r7, #10]
  if (wr_idx >= rd_idx)
 8004c40:	89ba      	ldrh	r2, [r7, #12]
 8004c42:	897b      	ldrh	r3, [r7, #10]
 8004c44:	429a      	cmp	r2, r3
 8004c46:	d304      	bcc.n	8004c52 <tu_fifo_full+0x30>
    return (uint16_t) (wr_idx - rd_idx);
 8004c48:	89ba      	ldrh	r2, [r7, #12]
 8004c4a:	897b      	ldrh	r3, [r7, #10]
 8004c4c:	1ad3      	subs	r3, r2, r3
 8004c4e:	b29b      	uxth	r3, r3
 8004c50:	e008      	b.n	8004c64 <tu_fifo_full+0x42>
    return (uint16_t) (2*depth - (rd_idx - wr_idx));
 8004c52:	89fb      	ldrh	r3, [r7, #14]
 8004c54:	005b      	lsls	r3, r3, #1
 8004c56:	b29a      	uxth	r2, r3
 8004c58:	89b9      	ldrh	r1, [r7, #12]
 8004c5a:	897b      	ldrh	r3, [r7, #10]
 8004c5c:	1acb      	subs	r3, r1, r3
 8004c5e:	b29b      	uxth	r3, r3
 8004c60:	4413      	add	r3, r2
 8004c62:	b29b      	uxth	r3, r3
  return _ff_count(f->depth, f->wr_idx, f->rd_idx) >= f->depth;
 8004c64:	687a      	ldr	r2, [r7, #4]
 8004c66:	8892      	ldrh	r2, [r2, #4]
 8004c68:	4293      	cmp	r3, r2
 8004c6a:	bf2c      	ite	cs
 8004c6c:	2301      	movcs	r3, #1
 8004c6e:	2300      	movcc	r3, #0
 8004c70:	b2db      	uxtb	r3, r3
}
 8004c72:	4618      	mov	r0, r3
 8004c74:	3714      	adds	r7, #20
 8004c76:	46bd      	mov	sp, r7
 8004c78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c7c:	4770      	bx	lr

08004c7e <tu_fifo_remaining>:

    @returns Number of items in FIFO
 */
/******************************************************************************/
uint16_t tu_fifo_remaining(tu_fifo_t* f)
{
 8004c7e:	b480      	push	{r7}
 8004c80:	b087      	sub	sp, #28
 8004c82:	af00      	add	r7, sp, #0
 8004c84:	6078      	str	r0, [r7, #4]
  return _ff_remaining(f->depth, f->wr_idx, f->rd_idx);
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	8899      	ldrh	r1, [r3, #4]
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	891b      	ldrh	r3, [r3, #8]
 8004c8e:	b29a      	uxth	r2, r3
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	895b      	ldrh	r3, [r3, #10]
 8004c94:	b29b      	uxth	r3, r3
 8004c96:	82f9      	strh	r1, [r7, #22]
 8004c98:	82ba      	strh	r2, [r7, #20]
 8004c9a:	827b      	strh	r3, [r7, #18]
 8004c9c:	8afb      	ldrh	r3, [r7, #22]
 8004c9e:	823b      	strh	r3, [r7, #16]
 8004ca0:	8abb      	ldrh	r3, [r7, #20]
 8004ca2:	81fb      	strh	r3, [r7, #14]
 8004ca4:	8a7b      	ldrh	r3, [r7, #18]
 8004ca6:	81bb      	strh	r3, [r7, #12]
  if (wr_idx >= rd_idx)
 8004ca8:	89fa      	ldrh	r2, [r7, #14]
 8004caa:	89bb      	ldrh	r3, [r7, #12]
 8004cac:	429a      	cmp	r2, r3
 8004cae:	d304      	bcc.n	8004cba <tu_fifo_remaining+0x3c>
    return (uint16_t) (wr_idx - rd_idx);
 8004cb0:	89fa      	ldrh	r2, [r7, #14]
 8004cb2:	89bb      	ldrh	r3, [r7, #12]
 8004cb4:	1ad3      	subs	r3, r2, r3
 8004cb6:	b29b      	uxth	r3, r3
 8004cb8:	e008      	b.n	8004ccc <tu_fifo_remaining+0x4e>
    return (uint16_t) (2*depth - (rd_idx - wr_idx));
 8004cba:	8a3b      	ldrh	r3, [r7, #16]
 8004cbc:	005b      	lsls	r3, r3, #1
 8004cbe:	b29a      	uxth	r2, r3
 8004cc0:	89f9      	ldrh	r1, [r7, #14]
 8004cc2:	89bb      	ldrh	r3, [r7, #12]
 8004cc4:	1acb      	subs	r3, r1, r3
 8004cc6:	b29b      	uxth	r3, r3
 8004cc8:	4413      	add	r3, r2
 8004cca:	b29b      	uxth	r3, r3
  uint16_t const count = _ff_count(depth, wr_idx, rd_idx);
 8004ccc:	817b      	strh	r3, [r7, #10]
  return (depth > count) ? (depth - count) : 0;
 8004cce:	8afa      	ldrh	r2, [r7, #22]
 8004cd0:	897b      	ldrh	r3, [r7, #10]
 8004cd2:	429a      	cmp	r2, r3
 8004cd4:	d904      	bls.n	8004ce0 <tu_fifo_remaining+0x62>
 8004cd6:	8afa      	ldrh	r2, [r7, #22]
 8004cd8:	897b      	ldrh	r3, [r7, #10]
 8004cda:	1ad3      	subs	r3, r2, r3
 8004cdc:	b29b      	uxth	r3, r3
 8004cde:	e000      	b.n	8004ce2 <tu_fifo_remaining+0x64>
 8004ce0:	2300      	movs	r3, #0
}
 8004ce2:	4618      	mov	r0, r3
 8004ce4:	371c      	adds	r7, #28
 8004ce6:	46bd      	mov	sp, r7
 8004ce8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cec:	4770      	bx	lr

08004cee <tu_fifo_read>:

    @returns TRUE if the queue is not empty
 */
/******************************************************************************/
bool tu_fifo_read(tu_fifo_t* f, void * buffer)
{
 8004cee:	b580      	push	{r7, lr}
 8004cf0:	b084      	sub	sp, #16
 8004cf2:	af00      	add	r7, sp, #0
 8004cf4:	6078      	str	r0, [r7, #4]
 8004cf6:	6039      	str	r1, [r7, #0]
  _ff_lock(f->mutex_rd);

  // Peek the data
  // f->rd_idx might get modified in case of an overflow so we can not use a local variable
  bool ret = _tu_fifo_peek(f, buffer, f->wr_idx, f->rd_idx);
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	891b      	ldrh	r3, [r3, #8]
 8004cfc:	b29a      	uxth	r2, r3
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	895b      	ldrh	r3, [r3, #10]
 8004d02:	b29b      	uxth	r3, r3
 8004d04:	6839      	ldr	r1, [r7, #0]
 8004d06:	6878      	ldr	r0, [r7, #4]
 8004d08:	f7ff fd6e 	bl	80047e8 <_tu_fifo_peek>
 8004d0c:	4603      	mov	r3, r0
 8004d0e:	73fb      	strb	r3, [r7, #15]

  // Advance pointer
  f->rd_idx = advance_index(f->depth, f->rd_idx, ret);
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	8898      	ldrh	r0, [r3, #4]
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	895b      	ldrh	r3, [r3, #10]
 8004d18:	b29b      	uxth	r3, r3
 8004d1a:	7bfa      	ldrb	r2, [r7, #15]
 8004d1c:	b292      	uxth	r2, r2
 8004d1e:	4619      	mov	r1, r3
 8004d20:	f7ff fd3c 	bl	800479c <advance_index>
 8004d24:	4603      	mov	r3, r0
 8004d26:	461a      	mov	r2, r3
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	815a      	strh	r2, [r3, #10]

  _ff_unlock(f->mutex_rd);
  return ret;
 8004d2c:	7bfb      	ldrb	r3, [r7, #15]
}
 8004d2e:	4618      	mov	r0, r3
 8004d30:	3710      	adds	r7, #16
 8004d32:	46bd      	mov	sp, r7
 8004d34:	bd80      	pop	{r7, pc}

08004d36 <tu_fifo_read_n>:

    @returns number of items read from the FIFO
 */
/******************************************************************************/
uint16_t tu_fifo_read_n(tu_fifo_t* f, void * buffer, uint16_t n)
{
 8004d36:	b580      	push	{r7, lr}
 8004d38:	b084      	sub	sp, #16
 8004d3a:	af00      	add	r7, sp, #0
 8004d3c:	60f8      	str	r0, [r7, #12]
 8004d3e:	60b9      	str	r1, [r7, #8]
 8004d40:	4613      	mov	r3, r2
 8004d42:	80fb      	strh	r3, [r7, #6]
  return _tu_fifo_read_n(f, buffer, n, TU_FIFO_COPY_INC);
 8004d44:	88fa      	ldrh	r2, [r7, #6]
 8004d46:	2300      	movs	r3, #0
 8004d48:	68b9      	ldr	r1, [r7, #8]
 8004d4a:	68f8      	ldr	r0, [r7, #12]
 8004d4c:	f7ff fef3 	bl	8004b36 <_tu_fifo_read_n>
 8004d50:	4603      	mov	r3, r0
}
 8004d52:	4618      	mov	r0, r3
 8004d54:	3710      	adds	r7, #16
 8004d56:	46bd      	mov	sp, r7
 8004d58:	bd80      	pop	{r7, pc}

08004d5a <tu_fifo_read_n_const_addr_full_words>:

uint16_t tu_fifo_read_n_const_addr_full_words(tu_fifo_t* f, void * buffer, uint16_t n)
{
 8004d5a:	b580      	push	{r7, lr}
 8004d5c:	b084      	sub	sp, #16
 8004d5e:	af00      	add	r7, sp, #0
 8004d60:	60f8      	str	r0, [r7, #12]
 8004d62:	60b9      	str	r1, [r7, #8]
 8004d64:	4613      	mov	r3, r2
 8004d66:	80fb      	strh	r3, [r7, #6]
  return _tu_fifo_read_n(f, buffer, n, TU_FIFO_COPY_CST_FULL_WORDS);
 8004d68:	88fa      	ldrh	r2, [r7, #6]
 8004d6a:	2301      	movs	r3, #1
 8004d6c:	68b9      	ldr	r1, [r7, #8]
 8004d6e:	68f8      	ldr	r0, [r7, #12]
 8004d70:	f7ff fee1 	bl	8004b36 <_tu_fifo_read_n>
 8004d74:	4603      	mov	r3, r0
}
 8004d76:	4618      	mov	r0, r3
 8004d78:	3710      	adds	r7, #16
 8004d7a:	46bd      	mov	sp, r7
 8004d7c:	bd80      	pop	{r7, pc}

08004d7e <tu_fifo_write>:
    @returns TRUE if the data was written to the FIFO (overwrittable
             FIFO will always return TRUE)
 */
/******************************************************************************/
bool tu_fifo_write(tu_fifo_t* f, const void * data)
{
 8004d7e:	b580      	push	{r7, lr}
 8004d80:	b086      	sub	sp, #24
 8004d82:	af00      	add	r7, sp, #0
 8004d84:	6078      	str	r0, [r7, #4]
 8004d86:	6039      	str	r1, [r7, #0]
  _ff_lock(f->mutex_wr);

  bool ret;
  uint16_t const wr_idx = f->wr_idx;
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	891b      	ldrh	r3, [r3, #8]
 8004d8c:	82bb      	strh	r3, [r7, #20]

  if ( tu_fifo_full(f) && !f->overwritable )
 8004d8e:	6878      	ldr	r0, [r7, #4]
 8004d90:	f7ff ff47 	bl	8004c22 <tu_fifo_full>
 8004d94:	4603      	mov	r3, r0
 8004d96:	2b00      	cmp	r3, #0
 8004d98:	d00c      	beq.n	8004db4 <tu_fifo_write+0x36>
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	79db      	ldrb	r3, [r3, #7]
 8004d9e:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 8004da2:	b2db      	uxtb	r3, r3
 8004da4:	f083 0301 	eor.w	r3, r3, #1
 8004da8:	b2db      	uxtb	r3, r3
 8004daa:	2b00      	cmp	r3, #0
 8004dac:	d002      	beq.n	8004db4 <tu_fifo_write+0x36>
  {
    ret = false;
 8004dae:	2300      	movs	r3, #0
 8004db0:	75fb      	strb	r3, [r7, #23]
 8004db2:	e022      	b.n	8004dfa <tu_fifo_write+0x7c>
  }else
  {
    uint16_t wr_ptr = idx2ptr(f->depth, wr_idx);
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	889b      	ldrh	r3, [r3, #4]
 8004db8:	823b      	strh	r3, [r7, #16]
 8004dba:	8abb      	ldrh	r3, [r7, #20]
 8004dbc:	81fb      	strh	r3, [r7, #14]
  while ( idx >= depth ) idx -= depth;
 8004dbe:	e003      	b.n	8004dc8 <tu_fifo_write+0x4a>
 8004dc0:	89fa      	ldrh	r2, [r7, #14]
 8004dc2:	8a3b      	ldrh	r3, [r7, #16]
 8004dc4:	1ad3      	subs	r3, r2, r3
 8004dc6:	81fb      	strh	r3, [r7, #14]
 8004dc8:	8a3a      	ldrh	r2, [r7, #16]
 8004dca:	89fb      	ldrh	r3, [r7, #14]
 8004dcc:	429a      	cmp	r2, r3
 8004dce:	d9f7      	bls.n	8004dc0 <tu_fifo_write+0x42>
  return idx;
 8004dd0:	89fb      	ldrh	r3, [r7, #14]
    uint16_t wr_ptr = idx2ptr(f->depth, wr_idx);
 8004dd2:	827b      	strh	r3, [r7, #18]

    // Write data
    _ff_push(f, data, wr_ptr);
 8004dd4:	8a7b      	ldrh	r3, [r7, #18]
 8004dd6:	461a      	mov	r2, r3
 8004dd8:	6839      	ldr	r1, [r7, #0]
 8004dda:	6878      	ldr	r0, [r7, #4]
 8004ddc:	f7ff fae2 	bl	80043a4 <_ff_push>

    // Advance pointer
    f->wr_idx = advance_index(f->depth, wr_idx, 1);
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	889b      	ldrh	r3, [r3, #4]
 8004de4:	8ab9      	ldrh	r1, [r7, #20]
 8004de6:	2201      	movs	r2, #1
 8004de8:	4618      	mov	r0, r3
 8004dea:	f7ff fcd7 	bl	800479c <advance_index>
 8004dee:	4603      	mov	r3, r0
 8004df0:	461a      	mov	r2, r3
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	811a      	strh	r2, [r3, #8]

    ret = true;
 8004df6:	2301      	movs	r3, #1
 8004df8:	75fb      	strb	r3, [r7, #23]
  }

  _ff_unlock(f->mutex_wr);

  return ret;
 8004dfa:	7dfb      	ldrb	r3, [r7, #23]
}
 8004dfc:	4618      	mov	r0, r3
 8004dfe:	3718      	adds	r7, #24
 8004e00:	46bd      	mov	sp, r7
 8004e02:	bd80      	pop	{r7, pc}

08004e04 <tu_fifo_write_n>:
                Number of element
    @return Number of written elements
 */
/******************************************************************************/
uint16_t tu_fifo_write_n(tu_fifo_t* f, const void * data, uint16_t n)
{
 8004e04:	b580      	push	{r7, lr}
 8004e06:	b084      	sub	sp, #16
 8004e08:	af00      	add	r7, sp, #0
 8004e0a:	60f8      	str	r0, [r7, #12]
 8004e0c:	60b9      	str	r1, [r7, #8]
 8004e0e:	4613      	mov	r3, r2
 8004e10:	80fb      	strh	r3, [r7, #6]
  return _tu_fifo_write_n(f, data, n, TU_FIFO_COPY_INC);
 8004e12:	88fa      	ldrh	r2, [r7, #6]
 8004e14:	2300      	movs	r3, #0
 8004e16:	68b9      	ldr	r1, [r7, #8]
 8004e18:	68f8      	ldr	r0, [r7, #12]
 8004e1a:	f7ff fdbb 	bl	8004994 <_tu_fifo_write_n>
 8004e1e:	4603      	mov	r3, r0
}
 8004e20:	4618      	mov	r0, r3
 8004e22:	3710      	adds	r7, #16
 8004e24:	46bd      	mov	sp, r7
 8004e26:	bd80      	pop	{r7, pc}

08004e28 <tu_fifo_write_n_const_addr_full_words>:
                Number of element
    @return Number of written elements
 */
/******************************************************************************/
uint16_t tu_fifo_write_n_const_addr_full_words(tu_fifo_t* f, const void * data, uint16_t n)
{
 8004e28:	b580      	push	{r7, lr}
 8004e2a:	b084      	sub	sp, #16
 8004e2c:	af00      	add	r7, sp, #0
 8004e2e:	60f8      	str	r0, [r7, #12]
 8004e30:	60b9      	str	r1, [r7, #8]
 8004e32:	4613      	mov	r3, r2
 8004e34:	80fb      	strh	r3, [r7, #6]
  return _tu_fifo_write_n(f, data, n, TU_FIFO_COPY_CST_FULL_WORDS);
 8004e36:	88fa      	ldrh	r2, [r7, #6]
 8004e38:	2301      	movs	r3, #1
 8004e3a:	68b9      	ldr	r1, [r7, #8]
 8004e3c:	68f8      	ldr	r0, [r7, #12]
 8004e3e:	f7ff fda9 	bl	8004994 <_tu_fifo_write_n>
 8004e42:	4603      	mov	r3, r0
}
 8004e44:	4618      	mov	r0, r3
 8004e46:	3710      	adds	r7, #16
 8004e48:	46bd      	mov	sp, r7
 8004e4a:	bd80      	pop	{r7, pc}

08004e4c <tu_fifo_clear>:
    @param[in]  f
                Pointer to the FIFO buffer to manipulate
 */
/******************************************************************************/
bool tu_fifo_clear(tu_fifo_t *f)
{
 8004e4c:	b480      	push	{r7}
 8004e4e:	b083      	sub	sp, #12
 8004e50:	af00      	add	r7, sp, #0
 8004e52:	6078      	str	r0, [r7, #4]
  _ff_lock(f->mutex_wr);
  _ff_lock(f->mutex_rd);

  f->rd_idx = 0;
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	2200      	movs	r2, #0
 8004e58:	815a      	strh	r2, [r3, #10]
  f->wr_idx = 0;
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	2200      	movs	r2, #0
 8004e5e:	811a      	strh	r2, [r3, #8]

  _ff_unlock(f->mutex_wr);
  _ff_unlock(f->mutex_rd);
  return true;
 8004e60:	2301      	movs	r3, #1
}
 8004e62:	4618      	mov	r0, r3
 8004e64:	370c      	adds	r7, #12
 8004e66:	46bd      	mov	sp, r7
 8004e68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e6c:	4770      	bx	lr

08004e6e <tu_fifo_set_overwritable>:
    @param[in]  overwritable
                Overwritable mode the fifo is set to
 */
/******************************************************************************/
bool tu_fifo_set_overwritable(tu_fifo_t *f, bool overwritable)
{
 8004e6e:	b480      	push	{r7}
 8004e70:	b083      	sub	sp, #12
 8004e72:	af00      	add	r7, sp, #0
 8004e74:	6078      	str	r0, [r7, #4]
 8004e76:	460b      	mov	r3, r1
 8004e78:	70fb      	strb	r3, [r7, #3]
  _ff_lock(f->mutex_wr);
  _ff_lock(f->mutex_rd);

  f->overwritable = overwritable;
 8004e7a:	687a      	ldr	r2, [r7, #4]
 8004e7c:	79d3      	ldrb	r3, [r2, #7]
 8004e7e:	78f9      	ldrb	r1, [r7, #3]
 8004e80:	f361 13c7 	bfi	r3, r1, #7, #1
 8004e84:	71d3      	strb	r3, [r2, #7]

  _ff_unlock(f->mutex_wr);
  _ff_unlock(f->mutex_rd);

  return true;
 8004e86:	2301      	movs	r3, #1
}
 8004e88:	4618      	mov	r0, r3
 8004e8a:	370c      	adds	r7, #12
 8004e8c:	46bd      	mov	sp, r7
 8004e8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e92:	4770      	bx	lr

08004e94 <tud_event_hook_cb>:
#endif

//--------------------------------------------------------------------+
// Callback weak stubs (called if application does not provide)
//--------------------------------------------------------------------+
TU_ATTR_WEAK void tud_event_hook_cb(uint8_t rhport, uint32_t eventid, bool in_isr) {
 8004e94:	b480      	push	{r7}
 8004e96:	b083      	sub	sp, #12
 8004e98:	af00      	add	r7, sp, #0
 8004e9a:	4603      	mov	r3, r0
 8004e9c:	6039      	str	r1, [r7, #0]
 8004e9e:	71fb      	strb	r3, [r7, #7]
 8004ea0:	4613      	mov	r3, r2
 8004ea2:	71bb      	strb	r3, [r7, #6]
  (void)rhport;
  (void)eventid;
  (void)in_isr;
}
 8004ea4:	bf00      	nop
 8004ea6:	370c      	adds	r7, #12
 8004ea8:	46bd      	mov	sp, r7
 8004eaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004eae:	4770      	bx	lr

08004eb0 <tud_connected>:
//--------------------------------------------------------------------+
tusb_speed_t tud_speed_get(void) {
  return (tusb_speed_t) _usbd_dev.speed;
}

bool tud_connected(void) {
 8004eb0:	b480      	push	{r7}
 8004eb2:	af00      	add	r7, sp, #0
  return _usbd_dev.connected;
 8004eb4:	4b07      	ldr	r3, [pc, #28]	@ (8004ed4 <tud_connected+0x24>)
 8004eb6:	781b      	ldrb	r3, [r3, #0]
 8004eb8:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8004ebc:	b2db      	uxtb	r3, r3
 8004ebe:	2b00      	cmp	r3, #0
 8004ec0:	bf14      	ite	ne
 8004ec2:	2301      	movne	r3, #1
 8004ec4:	2300      	moveq	r3, #0
 8004ec6:	b2db      	uxtb	r3, r3
}
 8004ec8:	4618      	mov	r0, r3
 8004eca:	46bd      	mov	sp, r7
 8004ecc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ed0:	4770      	bx	lr
 8004ed2:	bf00      	nop
 8004ed4:	24001d10 	.word	0x24001d10

08004ed8 <tud_mounted>:

bool tud_mounted(void) {
 8004ed8:	b480      	push	{r7}
 8004eda:	af00      	add	r7, sp, #0
  return _usbd_dev.cfg_num ? true : false;
 8004edc:	4b06      	ldr	r3, [pc, #24]	@ (8004ef8 <tud_mounted+0x20>)
 8004ede:	785b      	ldrb	r3, [r3, #1]
 8004ee0:	b2db      	uxtb	r3, r3
 8004ee2:	2b00      	cmp	r3, #0
 8004ee4:	bf14      	ite	ne
 8004ee6:	2301      	movne	r3, #1
 8004ee8:	2300      	moveq	r3, #0
 8004eea:	b2db      	uxtb	r3, r3
}
 8004eec:	4618      	mov	r0, r3
 8004eee:	46bd      	mov	sp, r7
 8004ef0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ef4:	4770      	bx	lr
 8004ef6:	bf00      	nop
 8004ef8:	24001d10 	.word	0x24001d10

08004efc <tud_suspended>:

bool tud_suspended(void) {
 8004efc:	b480      	push	{r7}
 8004efe:	af00      	add	r7, sp, #0
  return _usbd_dev.suspended;
 8004f00:	4b07      	ldr	r3, [pc, #28]	@ (8004f20 <tud_suspended+0x24>)
 8004f02:	781b      	ldrb	r3, [r3, #0]
 8004f04:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8004f08:	b2db      	uxtb	r3, r3
 8004f0a:	2b00      	cmp	r3, #0
 8004f0c:	bf14      	ite	ne
 8004f0e:	2301      	movne	r3, #1
 8004f10:	2300      	moveq	r3, #0
 8004f12:	b2db      	uxtb	r3, r3
}
 8004f14:	4618      	mov	r0, r3
 8004f16:	46bd      	mov	sp, r7
 8004f18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f1c:	4770      	bx	lr
 8004f1e:	bf00      	nop
 8004f20:	24001d10 	.word	0x24001d10

08004f24 <tud_inited>:
}

//--------------------------------------------------------------------+
// USBD Task
//--------------------------------------------------------------------+
bool tud_inited(void) {
 8004f24:	b480      	push	{r7}
 8004f26:	af00      	add	r7, sp, #0
  return _usbd_rhport != RHPORT_INVALID;
 8004f28:	4b05      	ldr	r3, [pc, #20]	@ (8004f40 <tud_inited+0x1c>)
 8004f2a:	781b      	ldrb	r3, [r3, #0]
 8004f2c:	2bff      	cmp	r3, #255	@ 0xff
 8004f2e:	bf14      	ite	ne
 8004f30:	2301      	movne	r3, #1
 8004f32:	2300      	moveq	r3, #0
 8004f34:	b2db      	uxtb	r3, r3
}
 8004f36:	4618      	mov	r0, r3
 8004f38:	46bd      	mov	sp, r7
 8004f3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f3e:	4770      	bx	lr
 8004f40:	24000028 	.word	0x24000028

08004f44 <tud_init>:

bool tud_init (uint8_t rhport)
{
 8004f44:	b580      	push	{r7, lr}
 8004f46:	b08a      	sub	sp, #40	@ 0x28
 8004f48:	af00      	add	r7, sp, #0
 8004f4a:	4603      	mov	r3, r0
 8004f4c:	71fb      	strb	r3, [r7, #7]
  // skip if already initialized
  if ( tud_inited() ) return true;
 8004f4e:	f7ff ffe9 	bl	8004f24 <tud_inited>
 8004f52:	4603      	mov	r3, r0
 8004f54:	2b00      	cmp	r3, #0
 8004f56:	d001      	beq.n	8004f5c <tud_init+0x18>
 8004f58:	2301      	movs	r3, #1
 8004f5a:	e07a      	b.n	8005052 <tud_init+0x10e>
  TU_LOG_USBD("USBD init on controller %u\r\n", rhport);
  TU_LOG_INT(CFG_TUD_LOG_LEVEL, sizeof(usbd_device_t));
  TU_LOG_INT(CFG_TUD_LOG_LEVEL, sizeof(tu_fifo_t));
  TU_LOG_INT(CFG_TUD_LOG_LEVEL, sizeof(tu_edpt_stream_t));

  tu_varclr(&_usbd_dev);
 8004f5c:	2237      	movs	r2, #55	@ 0x37
 8004f5e:	2100      	movs	r1, #0
 8004f60:	483e      	ldr	r0, [pc, #248]	@ (800505c <tud_init+0x118>)
 8004f62:	f014 fd33 	bl	80199cc <memset>
 8004f66:	4b3e      	ldr	r3, [pc, #248]	@ (8005060 <tud_init+0x11c>)
 8004f68:	617b      	str	r3, [r7, #20]
  // enable dcd/hcd interrupt
  qhdl->interrupt_set(true);
}

TU_ATTR_ALWAYS_INLINE static inline osal_queue_t osal_queue_create(osal_queue_def_t* qdef) {
  tu_fifo_clear(&qdef->ff);
 8004f6a:	697b      	ldr	r3, [r7, #20]
 8004f6c:	3304      	adds	r3, #4
 8004f6e:	4618      	mov	r0, r3
 8004f70:	f7ff ff6c 	bl	8004e4c <tu_fifo_clear>
  return (osal_queue_t) qdef;
 8004f74:	697b      	ldr	r3, [r7, #20]
  _usbd_mutex = osal_mutex_create(&_ubsd_mutexdef);
  TU_ASSERT(_usbd_mutex);
#endif

  // Init device queue & task
  _usbd_q = osal_queue_create(&_usbd_qdef);
 8004f76:	4a3b      	ldr	r2, [pc, #236]	@ (8005064 <tud_init+0x120>)
 8004f78:	6013      	str	r3, [r2, #0]
  TU_ASSERT(_usbd_q);
 8004f7a:	4b3a      	ldr	r3, [pc, #232]	@ (8005064 <tud_init+0x120>)
 8004f7c:	681b      	ldr	r3, [r3, #0]
 8004f7e:	2b00      	cmp	r3, #0
 8004f80:	d10a      	bne.n	8004f98 <tud_init+0x54>
 8004f82:	4b39      	ldr	r3, [pc, #228]	@ (8005068 <tud_init+0x124>)
 8004f84:	61bb      	str	r3, [r7, #24]
 8004f86:	69bb      	ldr	r3, [r7, #24]
 8004f88:	681b      	ldr	r3, [r3, #0]
 8004f8a:	f003 0301 	and.w	r3, r3, #1
 8004f8e:	2b00      	cmp	r3, #0
 8004f90:	d000      	beq.n	8004f94 <tud_init+0x50>
 8004f92:	be00      	bkpt	0x0000
 8004f94:	2300      	movs	r3, #0
 8004f96:	e05c      	b.n	8005052 <tud_init+0x10e>

  // Get application driver if available
  if ( usbd_app_driver_get_cb )
 8004f98:	4b34      	ldr	r3, [pc, #208]	@ (800506c <tud_init+0x128>)
 8004f9a:	2b00      	cmp	r3, #0
 8004f9c:	d005      	beq.n	8004faa <tud_init+0x66>
  {
    _app_driver = usbd_app_driver_get_cb(&_app_driver_count);
 8004f9e:	4834      	ldr	r0, [pc, #208]	@ (8005070 <tud_init+0x12c>)
 8004fa0:	f3af 8000 	nop.w
 8004fa4:	4603      	mov	r3, r0
 8004fa6:	4a33      	ldr	r2, [pc, #204]	@ (8005074 <tud_init+0x130>)
 8004fa8:	6013      	str	r3, [r2, #0]
  }

  // Init class drivers
  for (uint8_t i = 0; i < TOTAL_DRIVER_COUNT; i++)
 8004faa:	2300      	movs	r3, #0
 8004fac:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8004fb0:	e03c      	b.n	800502c <tud_init+0xe8>
 8004fb2:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8004fb6:	74fb      	strb	r3, [r7, #19]
  usbd_class_driver_t const * driver = NULL;
 8004fb8:	2300      	movs	r3, #0
 8004fba:	60fb      	str	r3, [r7, #12]
  if ( drvid < _app_driver_count ) {
 8004fbc:	4b2c      	ldr	r3, [pc, #176]	@ (8005070 <tud_init+0x12c>)
 8004fbe:	781b      	ldrb	r3, [r3, #0]
 8004fc0:	7cfa      	ldrb	r2, [r7, #19]
 8004fc2:	429a      	cmp	r2, r3
 8004fc4:	d209      	bcs.n	8004fda <tud_init+0x96>
    driver = &_app_driver[drvid];
 8004fc6:	4b2b      	ldr	r3, [pc, #172]	@ (8005074 <tud_init+0x130>)
 8004fc8:	6819      	ldr	r1, [r3, #0]
 8004fca:	7cfa      	ldrb	r2, [r7, #19]
 8004fcc:	4613      	mov	r3, r2
 8004fce:	005b      	lsls	r3, r3, #1
 8004fd0:	4413      	add	r3, r2
 8004fd2:	00db      	lsls	r3, r3, #3
 8004fd4:	440b      	add	r3, r1
 8004fd6:	60fb      	str	r3, [r7, #12]
 8004fd8:	e010      	b.n	8004ffc <tud_init+0xb8>
  } else if ( drvid < TOTAL_DRIVER_COUNT && BUILTIN_DRIVER_COUNT > 0 ){
 8004fda:	4b25      	ldr	r3, [pc, #148]	@ (8005070 <tud_init+0x12c>)
 8004fdc:	781b      	ldrb	r3, [r3, #0]
 8004fde:	1c9a      	adds	r2, r3, #2
 8004fe0:	7cfb      	ldrb	r3, [r7, #19]
 8004fe2:	429a      	cmp	r2, r3
 8004fe4:	db0a      	blt.n	8004ffc <tud_init+0xb8>
    driver = &_usbd_driver[drvid - _app_driver_count];
 8004fe6:	7cfb      	ldrb	r3, [r7, #19]
 8004fe8:	4a21      	ldr	r2, [pc, #132]	@ (8005070 <tud_init+0x12c>)
 8004fea:	7812      	ldrb	r2, [r2, #0]
 8004fec:	1a9a      	subs	r2, r3, r2
 8004fee:	4613      	mov	r3, r2
 8004ff0:	005b      	lsls	r3, r3, #1
 8004ff2:	4413      	add	r3, r2
 8004ff4:	00db      	lsls	r3, r3, #3
 8004ff6:	4a20      	ldr	r2, [pc, #128]	@ (8005078 <tud_init+0x134>)
 8004ff8:	4413      	add	r3, r2
 8004ffa:	60fb      	str	r3, [r7, #12]
  return driver;
 8004ffc:	68fb      	ldr	r3, [r7, #12]
  {
    usbd_class_driver_t const * driver = get_driver(i);
 8004ffe:	623b      	str	r3, [r7, #32]
    TU_ASSERT(driver);
 8005000:	6a3b      	ldr	r3, [r7, #32]
 8005002:	2b00      	cmp	r3, #0
 8005004:	d10a      	bne.n	800501c <tud_init+0xd8>
 8005006:	4b18      	ldr	r3, [pc, #96]	@ (8005068 <tud_init+0x124>)
 8005008:	61fb      	str	r3, [r7, #28]
 800500a:	69fb      	ldr	r3, [r7, #28]
 800500c:	681b      	ldr	r3, [r3, #0]
 800500e:	f003 0301 	and.w	r3, r3, #1
 8005012:	2b00      	cmp	r3, #0
 8005014:	d000      	beq.n	8005018 <tud_init+0xd4>
 8005016:	be00      	bkpt	0x0000
 8005018:	2300      	movs	r3, #0
 800501a:	e01a      	b.n	8005052 <tud_init+0x10e>
    TU_LOG_USBD("%s init\r\n", driver->name);
    driver->init();
 800501c:	6a3b      	ldr	r3, [r7, #32]
 800501e:	681b      	ldr	r3, [r3, #0]
 8005020:	4798      	blx	r3
  for (uint8_t i = 0; i < TOTAL_DRIVER_COUNT; i++)
 8005022:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8005026:	3301      	adds	r3, #1
 8005028:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 800502c:	4b10      	ldr	r3, [pc, #64]	@ (8005070 <tud_init+0x12c>)
 800502e:	781b      	ldrb	r3, [r3, #0]
 8005030:	1c9a      	adds	r2, r3, #2
 8005032:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8005036:	429a      	cmp	r2, r3
 8005038:	dabb      	bge.n	8004fb2 <tud_init+0x6e>
  }

  _usbd_rhport = rhport;
 800503a:	4a10      	ldr	r2, [pc, #64]	@ (800507c <tud_init+0x138>)
 800503c:	79fb      	ldrb	r3, [r7, #7]
 800503e:	7013      	strb	r3, [r2, #0]

  // Init device controller driver
  dcd_init(rhport);
 8005040:	79fb      	ldrb	r3, [r7, #7]
 8005042:	4618      	mov	r0, r3
 8005044:	f002 fc1e 	bl	8007884 <dcd_init>
  dcd_int_enable(rhport);
 8005048:	79fb      	ldrb	r3, [r7, #7]
 800504a:	4618      	mov	r0, r3
 800504c:	f002 fca2 	bl	8007994 <dcd_int_enable>

  return true;
 8005050:	2301      	movs	r3, #1
}
 8005052:	4618      	mov	r0, r3
 8005054:	3728      	adds	r7, #40	@ 0x28
 8005056:	46bd      	mov	sp, r7
 8005058:	bd80      	pop	{r7, pc}
 800505a:	bf00      	nop
 800505c:	24001d10 	.word	0x24001d10
 8005060:	2400002c 	.word	0x2400002c
 8005064:	24001e10 	.word	0x24001e10
 8005068:	e000edf0 	.word	0xe000edf0
 800506c:	00000000 	.word	0x00000000
 8005070:	24001d4c 	.word	0x24001d4c
 8005074:	24001d48 	.word	0x24001d48
 8005078:	0801bf18 	.word	0x0801bf18
 800507c:	24000028 	.word	0x24000028

08005080 <configuration_reset>:

static void configuration_reset(uint8_t rhport)
{
 8005080:	b580      	push	{r7, lr}
 8005082:	b088      	sub	sp, #32
 8005084:	af00      	add	r7, sp, #0
 8005086:	4603      	mov	r3, r0
 8005088:	71fb      	strb	r3, [r7, #7]
  for ( uint8_t i = 0; i < TOTAL_DRIVER_COUNT; i++ )
 800508a:	2300      	movs	r3, #0
 800508c:	77fb      	strb	r3, [r7, #31]
 800508e:	e03a      	b.n	8005106 <configuration_reset+0x86>
 8005090:	7ffb      	ldrb	r3, [r7, #31]
 8005092:	74fb      	strb	r3, [r7, #19]
  usbd_class_driver_t const * driver = NULL;
 8005094:	2300      	movs	r3, #0
 8005096:	60fb      	str	r3, [r7, #12]
  if ( drvid < _app_driver_count ) {
 8005098:	4b28      	ldr	r3, [pc, #160]	@ (800513c <configuration_reset+0xbc>)
 800509a:	781b      	ldrb	r3, [r3, #0]
 800509c:	7cfa      	ldrb	r2, [r7, #19]
 800509e:	429a      	cmp	r2, r3
 80050a0:	d209      	bcs.n	80050b6 <configuration_reset+0x36>
    driver = &_app_driver[drvid];
 80050a2:	4b27      	ldr	r3, [pc, #156]	@ (8005140 <configuration_reset+0xc0>)
 80050a4:	6819      	ldr	r1, [r3, #0]
 80050a6:	7cfa      	ldrb	r2, [r7, #19]
 80050a8:	4613      	mov	r3, r2
 80050aa:	005b      	lsls	r3, r3, #1
 80050ac:	4413      	add	r3, r2
 80050ae:	00db      	lsls	r3, r3, #3
 80050b0:	440b      	add	r3, r1
 80050b2:	60fb      	str	r3, [r7, #12]
 80050b4:	e010      	b.n	80050d8 <configuration_reset+0x58>
  } else if ( drvid < TOTAL_DRIVER_COUNT && BUILTIN_DRIVER_COUNT > 0 ){
 80050b6:	4b21      	ldr	r3, [pc, #132]	@ (800513c <configuration_reset+0xbc>)
 80050b8:	781b      	ldrb	r3, [r3, #0]
 80050ba:	1c9a      	adds	r2, r3, #2
 80050bc:	7cfb      	ldrb	r3, [r7, #19]
 80050be:	429a      	cmp	r2, r3
 80050c0:	db0a      	blt.n	80050d8 <configuration_reset+0x58>
    driver = &_usbd_driver[drvid - _app_driver_count];
 80050c2:	7cfb      	ldrb	r3, [r7, #19]
 80050c4:	4a1d      	ldr	r2, [pc, #116]	@ (800513c <configuration_reset+0xbc>)
 80050c6:	7812      	ldrb	r2, [r2, #0]
 80050c8:	1a9a      	subs	r2, r3, r2
 80050ca:	4613      	mov	r3, r2
 80050cc:	005b      	lsls	r3, r3, #1
 80050ce:	4413      	add	r3, r2
 80050d0:	00db      	lsls	r3, r3, #3
 80050d2:	4a1c      	ldr	r2, [pc, #112]	@ (8005144 <configuration_reset+0xc4>)
 80050d4:	4413      	add	r3, r2
 80050d6:	60fb      	str	r3, [r7, #12]
  return driver;
 80050d8:	68fb      	ldr	r3, [r7, #12]
  {
    usbd_class_driver_t const * driver = get_driver(i);
 80050da:	61bb      	str	r3, [r7, #24]
    TU_ASSERT(driver, );
 80050dc:	69bb      	ldr	r3, [r7, #24]
 80050de:	2b00      	cmp	r3, #0
 80050e0:	d109      	bne.n	80050f6 <configuration_reset+0x76>
 80050e2:	4b19      	ldr	r3, [pc, #100]	@ (8005148 <configuration_reset+0xc8>)
 80050e4:	617b      	str	r3, [r7, #20]
 80050e6:	697b      	ldr	r3, [r7, #20]
 80050e8:	681b      	ldr	r3, [r3, #0]
 80050ea:	f003 0301 	and.w	r3, r3, #1
 80050ee:	2b00      	cmp	r3, #0
 80050f0:	d01f      	beq.n	8005132 <configuration_reset+0xb2>
 80050f2:	be00      	bkpt	0x0000
 80050f4:	e01d      	b.n	8005132 <configuration_reset+0xb2>
    driver->reset(rhport);
 80050f6:	69bb      	ldr	r3, [r7, #24]
 80050f8:	685b      	ldr	r3, [r3, #4]
 80050fa:	79fa      	ldrb	r2, [r7, #7]
 80050fc:	4610      	mov	r0, r2
 80050fe:	4798      	blx	r3
  for ( uint8_t i = 0; i < TOTAL_DRIVER_COUNT; i++ )
 8005100:	7ffb      	ldrb	r3, [r7, #31]
 8005102:	3301      	adds	r3, #1
 8005104:	77fb      	strb	r3, [r7, #31]
 8005106:	4b0d      	ldr	r3, [pc, #52]	@ (800513c <configuration_reset+0xbc>)
 8005108:	781b      	ldrb	r3, [r3, #0]
 800510a:	1c9a      	adds	r2, r3, #2
 800510c:	7ffb      	ldrb	r3, [r7, #31]
 800510e:	429a      	cmp	r2, r3
 8005110:	dabe      	bge.n	8005090 <configuration_reset+0x10>
  }

  tu_varclr(&_usbd_dev);
 8005112:	2237      	movs	r2, #55	@ 0x37
 8005114:	2100      	movs	r1, #0
 8005116:	480d      	ldr	r0, [pc, #52]	@ (800514c <configuration_reset+0xcc>)
 8005118:	f014 fc58 	bl	80199cc <memset>
  memset(_usbd_dev.itf2drv, DRVID_INVALID, sizeof(_usbd_dev.itf2drv)); // invalid mapping
 800511c:	2210      	movs	r2, #16
 800511e:	21ff      	movs	r1, #255	@ 0xff
 8005120:	480b      	ldr	r0, [pc, #44]	@ (8005150 <configuration_reset+0xd0>)
 8005122:	f014 fc53 	bl	80199cc <memset>
  memset(_usbd_dev.ep2drv , DRVID_INVALID, sizeof(_usbd_dev.ep2drv )); // invalid mapping
 8005126:	2212      	movs	r2, #18
 8005128:	21ff      	movs	r1, #255	@ 0xff
 800512a:	480a      	ldr	r0, [pc, #40]	@ (8005154 <configuration_reset+0xd4>)
 800512c:	f014 fc4e 	bl	80199cc <memset>
 8005130:	e000      	b.n	8005134 <configuration_reset+0xb4>
    TU_ASSERT(driver, );
 8005132:	bf00      	nop
}
 8005134:	3720      	adds	r7, #32
 8005136:	46bd      	mov	sp, r7
 8005138:	bd80      	pop	{r7, pc}
 800513a:	bf00      	nop
 800513c:	24001d4c 	.word	0x24001d4c
 8005140:	24001d48 	.word	0x24001d48
 8005144:	0801bf18 	.word	0x0801bf18
 8005148:	e000edf0 	.word	0xe000edf0
 800514c:	24001d10 	.word	0x24001d10
 8005150:	24001d13 	.word	0x24001d13
 8005154:	24001d23 	.word	0x24001d23

08005158 <usbd_reset>:

static void usbd_reset(uint8_t rhport)
{
 8005158:	b580      	push	{r7, lr}
 800515a:	b082      	sub	sp, #8
 800515c:	af00      	add	r7, sp, #0
 800515e:	4603      	mov	r3, r0
 8005160:	71fb      	strb	r3, [r7, #7]
  configuration_reset(rhport);
 8005162:	79fb      	ldrb	r3, [r7, #7]
 8005164:	4618      	mov	r0, r3
 8005166:	f7ff ff8b 	bl	8005080 <configuration_reset>
  usbd_control_reset();
 800516a:	f001 fbb3 	bl	80068d4 <usbd_control_reset>
}
 800516e:	bf00      	nop
 8005170:	3708      	adds	r7, #8
 8005172:	46bd      	mov	sp, r7
 8005174:	bd80      	pop	{r7, pc}
	...

08005178 <tud_task_ext>:
      }
    }
    @endcode
 */
void tud_task_ext(uint32_t timeout_ms, bool in_isr)
{
 8005178:	b590      	push	{r4, r7, lr}
 800517a:	b093      	sub	sp, #76	@ 0x4c
 800517c:	af00      	add	r7, sp, #0
 800517e:	6078      	str	r0, [r7, #4]
 8005180:	460b      	mov	r3, r1
 8005182:	70fb      	strb	r3, [r7, #3]
  (void) in_isr; // not implemented yet

  // Skip if stack is not initialized
  if ( !tud_inited() ) return;
 8005184:	f7ff fece 	bl	8004f24 <tud_inited>
 8005188:	4603      	mov	r3, r0
 800518a:	f083 0301 	eor.w	r3, r3, #1
 800518e:	b2db      	uxtb	r3, r3
 8005190:	2b00      	cmp	r3, #0
 8005192:	f040 8151 	bne.w	8005438 <tud_task_ext+0x2c0>

  // Loop until there is no more events in the queue
  while (1)
  {
    dcd_event_t event;
    if ( !osal_queue_receive(_usbd_q, &event, timeout_ms) ) return;
 8005196:	4bac      	ldr	r3, [pc, #688]	@ (8005448 <tud_task_ext+0x2d0>)
 8005198:	681b      	ldr	r3, [r3, #0]
 800519a:	637b      	str	r3, [r7, #52]	@ 0x34
 800519c:	f107 030c 	add.w	r3, r7, #12
 80051a0:	633b      	str	r3, [r7, #48]	@ 0x30
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80051a6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80051a8:	62bb      	str	r3, [r7, #40]	@ 0x28
  qhdl->interrupt_set(false);
 80051aa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80051ac:	681b      	ldr	r3, [r3, #0]
 80051ae:	2000      	movs	r0, #0
 80051b0:	4798      	blx	r3
}
 80051b2:	bf00      	nop

TU_ATTR_ALWAYS_INLINE static inline bool osal_queue_receive(osal_queue_t qhdl, void* data, uint32_t msec) {
  (void) msec; // not used, always behave as msec = 0

  _osal_q_lock(qhdl);
  bool success = tu_fifo_read(&qhdl->ff, data);
 80051b4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80051b6:	3304      	adds	r3, #4
 80051b8:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 80051ba:	4618      	mov	r0, r3
 80051bc:	f7ff fd97 	bl	8004cee <tu_fifo_read>
 80051c0:	4603      	mov	r3, r0
 80051c2:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 80051c6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80051c8:	623b      	str	r3, [r7, #32]
  qhdl->interrupt_set(true);
 80051ca:	6a3b      	ldr	r3, [r7, #32]
 80051cc:	681b      	ldr	r3, [r3, #0]
 80051ce:	2001      	movs	r0, #1
 80051d0:	4798      	blx	r3
}
 80051d2:	bf00      	nop
  _osal_q_unlock(qhdl);

  return success;
 80051d4:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80051d8:	f083 0301 	eor.w	r3, r3, #1
 80051dc:	b2db      	uxtb	r3, r3
 80051de:	2b00      	cmp	r3, #0
 80051e0:	f040 812c 	bne.w	800543c <tud_task_ext+0x2c4>
#if CFG_TUSB_DEBUG >= CFG_TUD_LOG_LEVEL
    if (event.event_id == DCD_EVENT_SETUP_RECEIVED) TU_LOG_USBD("\r\n"); // extra line for setup
    TU_LOG_USBD("USBD %s ", event.event_id < DCD_EVENT_COUNT ? _usbd_event_str[event.event_id] : "CORRUPTED");
#endif

    switch ( event.event_id )
 80051e4:	7b7b      	ldrb	r3, [r7, #13]
 80051e6:	3b01      	subs	r3, #1
 80051e8:	2b07      	cmp	r3, #7
 80051ea:	f200 810f 	bhi.w	800540c <tud_task_ext+0x294>
 80051ee:	a201      	add	r2, pc, #4	@ (adr r2, 80051f4 <tud_task_ext+0x7c>)
 80051f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80051f4:	08005215 	.word	0x08005215
 80051f8:	08005225 	.word	0x08005225
 80051fc:	0800540d 	.word	0x0800540d
 8005200:	080053b3 	.word	0x080053b3
 8005204:	080053e3 	.word	0x080053e3
 8005208:	0800523b 	.word	0x0800523b
 800520c:	080052b1 	.word	0x080052b1
 8005210:	080053fd 	.word	0x080053fd
    {
      case DCD_EVENT_BUS_RESET:
        TU_LOG_USBD(": %s Speed\r\n", tu_str_speed[event.bus_reset.speed]);
        usbd_reset(event.rhport);
 8005214:	7b3b      	ldrb	r3, [r7, #12]
 8005216:	4618      	mov	r0, r3
 8005218:	f7ff ff9e 	bl	8005158 <usbd_reset>
        _usbd_dev.speed = event.bus_reset.speed;
 800521c:	7c3a      	ldrb	r2, [r7, #16]
 800521e:	4b8b      	ldr	r3, [pc, #556]	@ (800544c <tud_task_ext+0x2d4>)
 8005220:	709a      	strb	r2, [r3, #2]
      break;
 8005222:	e108      	b.n	8005436 <tud_task_ext+0x2be>

      case DCD_EVENT_UNPLUGGED:
        TU_LOG_USBD("\r\n");
        usbd_reset(event.rhport);
 8005224:	7b3b      	ldrb	r3, [r7, #12]
 8005226:	4618      	mov	r0, r3
 8005228:	f7ff ff96 	bl	8005158 <usbd_reset>

        // invoke callback
        if (tud_umount_cb) tud_umount_cb();
 800522c:	4b88      	ldr	r3, [pc, #544]	@ (8005450 <tud_task_ext+0x2d8>)
 800522e:	2b00      	cmp	r3, #0
 8005230:	f000 80f6 	beq.w	8005420 <tud_task_ext+0x2a8>
 8005234:	f7fb ffd6 	bl	80011e4 <tud_umount_cb>
      break;
 8005238:	e0f2      	b.n	8005420 <tud_task_ext+0x2a8>
        TU_LOG_BUF(CFG_TUD_LOG_LEVEL, &event.setup_received, 8);
        TU_LOG_USBD("\r\n");

        // Mark as connected after receiving 1st setup packet.
        // But it is easier to set it every time instead of wasting time to check then set
        _usbd_dev.connected = 1;
 800523a:	4a84      	ldr	r2, [pc, #528]	@ (800544c <tud_task_ext+0x2d4>)
 800523c:	7813      	ldrb	r3, [r2, #0]
 800523e:	f043 0301 	orr.w	r3, r3, #1
 8005242:	7013      	strb	r3, [r2, #0]

        // mark both in & out control as free
        _usbd_dev.ep_status[0][TUSB_DIR_OUT].busy = 0;
 8005244:	4a81      	ldr	r2, [pc, #516]	@ (800544c <tud_task_ext+0x2d4>)
 8005246:	f892 3025 	ldrb.w	r3, [r2, #37]	@ 0x25
 800524a:	f36f 0300 	bfc	r3, #0, #1
 800524e:	f882 3025 	strb.w	r3, [r2, #37]	@ 0x25
        _usbd_dev.ep_status[0][TUSB_DIR_OUT].claimed = 0;
 8005252:	4a7e      	ldr	r2, [pc, #504]	@ (800544c <tud_task_ext+0x2d4>)
 8005254:	f892 3025 	ldrb.w	r3, [r2, #37]	@ 0x25
 8005258:	f36f 0382 	bfc	r3, #2, #1
 800525c:	f882 3025 	strb.w	r3, [r2, #37]	@ 0x25
        _usbd_dev.ep_status[0][TUSB_DIR_IN ].busy = 0;
 8005260:	4a7a      	ldr	r2, [pc, #488]	@ (800544c <tud_task_ext+0x2d4>)
 8005262:	f892 3026 	ldrb.w	r3, [r2, #38]	@ 0x26
 8005266:	f36f 0300 	bfc	r3, #0, #1
 800526a:	f882 3026 	strb.w	r3, [r2, #38]	@ 0x26
        _usbd_dev.ep_status[0][TUSB_DIR_IN ].claimed = 0;
 800526e:	4a77      	ldr	r2, [pc, #476]	@ (800544c <tud_task_ext+0x2d4>)
 8005270:	f892 3026 	ldrb.w	r3, [r2, #38]	@ 0x26
 8005274:	f36f 0382 	bfc	r3, #2, #1
 8005278:	f882 3026 	strb.w	r3, [r2, #38]	@ 0x26

        // Process control request
        if ( !process_control_request(event.rhport, &event.setup_received) )
 800527c:	7b3a      	ldrb	r2, [r7, #12]
 800527e:	f107 030c 	add.w	r3, r7, #12
 8005282:	3304      	adds	r3, #4
 8005284:	4619      	mov	r1, r3
 8005286:	4610      	mov	r0, r2
 8005288:	f000 f908 	bl	800549c <process_control_request>
 800528c:	4603      	mov	r3, r0
 800528e:	f083 0301 	eor.w	r3, r3, #1
 8005292:	b2db      	uxtb	r3, r3
 8005294:	2b00      	cmp	r3, #0
 8005296:	f000 80c5 	beq.w	8005424 <tud_task_ext+0x2ac>
        {
          TU_LOG_USBD("  Stall EP0\r\n");
          // Failed -> stall both control endpoint IN and OUT
          dcd_edpt_stall(event.rhport, 0);
 800529a:	7b3b      	ldrb	r3, [r7, #12]
 800529c:	2100      	movs	r1, #0
 800529e:	4618      	mov	r0, r3
 80052a0:	f002 fef0 	bl	8008084 <dcd_edpt_stall>
          dcd_edpt_stall(event.rhport, 0 | TUSB_DIR_IN_MASK);
 80052a4:	7b3b      	ldrb	r3, [r7, #12]
 80052a6:	2180      	movs	r1, #128	@ 0x80
 80052a8:	4618      	mov	r0, r3
 80052aa:	f002 feeb 	bl	8008084 <dcd_edpt_stall>
        }
      break;
 80052ae:	e0b9      	b.n	8005424 <tud_task_ext+0x2ac>

      case DCD_EVENT_XFER_COMPLETE:
      {
        // Invoke the class callback associated with the endpoint address
        uint8_t const ep_addr = event.xfer_complete.ep_addr;
 80052b0:	7c3b      	ldrb	r3, [r7, #16]
 80052b2:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
 80052b6:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 80052ba:	77bb      	strb	r3, [r7, #30]
  return (uint8_t)(addr & (~TUSB_DIR_IN_MASK));
 80052bc:	7fbb      	ldrb	r3, [r7, #30]
 80052be:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80052c2:	b2db      	uxtb	r3, r3
        uint8_t const epnum   = tu_edpt_number(ep_addr);
 80052c4:	f887 3046 	strb.w	r3, [r7, #70]	@ 0x46
 80052c8:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 80052cc:	77fb      	strb	r3, [r7, #31]
  return (addr & TUSB_DIR_IN_MASK) ? TUSB_DIR_IN : TUSB_DIR_OUT;
 80052ce:	7ffb      	ldrb	r3, [r7, #31]
 80052d0:	09db      	lsrs	r3, r3, #7
 80052d2:	b2db      	uxtb	r3, r3
        uint8_t const ep_dir  = tu_edpt_dir(ep_addr);
 80052d4:	f887 3045 	strb.w	r3, [r7, #69]	@ 0x45

        TU_LOG_USBD("on EP %02X with %u bytes\r\n", ep_addr, (unsigned int) event.xfer_complete.len);

        _usbd_dev.ep_status[epnum][ep_dir].busy = 0;
 80052d8:	f897 2046 	ldrb.w	r2, [r7, #70]	@ 0x46
 80052dc:	f897 3045 	ldrb.w	r3, [r7, #69]	@ 0x45
 80052e0:	495a      	ldr	r1, [pc, #360]	@ (800544c <tud_task_ext+0x2d4>)
 80052e2:	0052      	lsls	r2, r2, #1
 80052e4:	440a      	add	r2, r1
 80052e6:	4413      	add	r3, r2
 80052e8:	f103 0220 	add.w	r2, r3, #32
 80052ec:	7953      	ldrb	r3, [r2, #5]
 80052ee:	f36f 0300 	bfc	r3, #0, #1
 80052f2:	7153      	strb	r3, [r2, #5]
        _usbd_dev.ep_status[epnum][ep_dir].claimed = 0;
 80052f4:	f897 2046 	ldrb.w	r2, [r7, #70]	@ 0x46
 80052f8:	f897 3045 	ldrb.w	r3, [r7, #69]	@ 0x45
 80052fc:	4953      	ldr	r1, [pc, #332]	@ (800544c <tud_task_ext+0x2d4>)
 80052fe:	0052      	lsls	r2, r2, #1
 8005300:	440a      	add	r2, r1
 8005302:	4413      	add	r3, r2
 8005304:	f103 0220 	add.w	r2, r3, #32
 8005308:	7953      	ldrb	r3, [r2, #5]
 800530a:	f36f 0382 	bfc	r3, #2, #1
 800530e:	7153      	strb	r3, [r2, #5]

        if ( 0 == epnum )
 8005310:	f897 3046 	ldrb.w	r3, [r7, #70]	@ 0x46
 8005314:	2b00      	cmp	r3, #0
 8005316:	d107      	bne.n	8005328 <tud_task_ext+0x1b0>
        {
          usbd_control_xfer_cb(event.rhport, ep_addr, (xfer_result_t) event.xfer_complete.result, event.xfer_complete
 8005318:	7b38      	ldrb	r0, [r7, #12]
 800531a:	7c7a      	ldrb	r2, [r7, #17]
 800531c:	697b      	ldr	r3, [r7, #20]
 800531e:	f897 1047 	ldrb.w	r1, [r7, #71]	@ 0x47
 8005322:	f001 fb0d 	bl	8006940 <usbd_control_xfer_cb>

          TU_LOG_USBD("  %s xfer callback\r\n", driver->name);
          driver->xfer_cb(event.rhport, ep_addr, (xfer_result_t) event.xfer_complete.result, event.xfer_complete.len);
        }
      }
      break;
 8005326:	e086      	b.n	8005436 <tud_task_ext+0x2be>
          usbd_class_driver_t const * driver = get_driver( _usbd_dev.ep2drv[epnum][ep_dir] );
 8005328:	f897 2046 	ldrb.w	r2, [r7, #70]	@ 0x46
 800532c:	f897 3045 	ldrb.w	r3, [r7, #69]	@ 0x45
 8005330:	4946      	ldr	r1, [pc, #280]	@ (800544c <tud_task_ext+0x2d4>)
 8005332:	0052      	lsls	r2, r2, #1
 8005334:	440a      	add	r2, r1
 8005336:	4413      	add	r3, r2
 8005338:	3313      	adds	r3, #19
 800533a:	781b      	ldrb	r3, [r3, #0]
 800533c:	777b      	strb	r3, [r7, #29]
  usbd_class_driver_t const * driver = NULL;
 800533e:	2300      	movs	r3, #0
 8005340:	61bb      	str	r3, [r7, #24]
  if ( drvid < _app_driver_count ) {
 8005342:	4b44      	ldr	r3, [pc, #272]	@ (8005454 <tud_task_ext+0x2dc>)
 8005344:	781b      	ldrb	r3, [r3, #0]
 8005346:	7f7a      	ldrb	r2, [r7, #29]
 8005348:	429a      	cmp	r2, r3
 800534a:	d209      	bcs.n	8005360 <tud_task_ext+0x1e8>
    driver = &_app_driver[drvid];
 800534c:	4b42      	ldr	r3, [pc, #264]	@ (8005458 <tud_task_ext+0x2e0>)
 800534e:	6819      	ldr	r1, [r3, #0]
 8005350:	7f7a      	ldrb	r2, [r7, #29]
 8005352:	4613      	mov	r3, r2
 8005354:	005b      	lsls	r3, r3, #1
 8005356:	4413      	add	r3, r2
 8005358:	00db      	lsls	r3, r3, #3
 800535a:	440b      	add	r3, r1
 800535c:	61bb      	str	r3, [r7, #24]
 800535e:	e010      	b.n	8005382 <tud_task_ext+0x20a>
  } else if ( drvid < TOTAL_DRIVER_COUNT && BUILTIN_DRIVER_COUNT > 0 ){
 8005360:	4b3c      	ldr	r3, [pc, #240]	@ (8005454 <tud_task_ext+0x2dc>)
 8005362:	781b      	ldrb	r3, [r3, #0]
 8005364:	1c9a      	adds	r2, r3, #2
 8005366:	7f7b      	ldrb	r3, [r7, #29]
 8005368:	429a      	cmp	r2, r3
 800536a:	db0a      	blt.n	8005382 <tud_task_ext+0x20a>
    driver = &_usbd_driver[drvid - _app_driver_count];
 800536c:	7f7b      	ldrb	r3, [r7, #29]
 800536e:	4a39      	ldr	r2, [pc, #228]	@ (8005454 <tud_task_ext+0x2dc>)
 8005370:	7812      	ldrb	r2, [r2, #0]
 8005372:	1a9a      	subs	r2, r3, r2
 8005374:	4613      	mov	r3, r2
 8005376:	005b      	lsls	r3, r3, #1
 8005378:	4413      	add	r3, r2
 800537a:	00db      	lsls	r3, r3, #3
 800537c:	4a37      	ldr	r2, [pc, #220]	@ (800545c <tud_task_ext+0x2e4>)
 800537e:	4413      	add	r3, r2
 8005380:	61bb      	str	r3, [r7, #24]
  return driver;
 8005382:	69bb      	ldr	r3, [r7, #24]
          usbd_class_driver_t const * driver = get_driver( _usbd_dev.ep2drv[epnum][ep_dir] );
 8005384:	643b      	str	r3, [r7, #64]	@ 0x40
          TU_ASSERT(driver, );
 8005386:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005388:	2b00      	cmp	r3, #0
 800538a:	d109      	bne.n	80053a0 <tud_task_ext+0x228>
 800538c:	4b34      	ldr	r3, [pc, #208]	@ (8005460 <tud_task_ext+0x2e8>)
 800538e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005390:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005392:	681b      	ldr	r3, [r3, #0]
 8005394:	f003 0301 	and.w	r3, r3, #1
 8005398:	2b00      	cmp	r3, #0
 800539a:	d051      	beq.n	8005440 <tud_task_ext+0x2c8>
 800539c:	be00      	bkpt	0x0000
 800539e:	e04f      	b.n	8005440 <tud_task_ext+0x2c8>
          driver->xfer_cb(event.rhport, ep_addr, (xfer_result_t) event.xfer_complete.result, event.xfer_complete.len);
 80053a0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80053a2:	691c      	ldr	r4, [r3, #16]
 80053a4:	7b38      	ldrb	r0, [r7, #12]
 80053a6:	7c7a      	ldrb	r2, [r7, #17]
 80053a8:	697b      	ldr	r3, [r7, #20]
 80053aa:	f897 1047 	ldrb.w	r1, [r7, #71]	@ 0x47
 80053ae:	47a0      	blx	r4
      break;
 80053b0:	e041      	b.n	8005436 <tud_task_ext+0x2be>

      case DCD_EVENT_SUSPEND:
        // NOTE: When plugging/unplugging device, the D+/D- state are unstable and
        // can accidentally meet the SUSPEND condition ( Bus Idle for 3ms ), which result in a series of event
        // e.g suspend -> resume -> unplug/plug. Skip suspend/resume if not connected
        if ( _usbd_dev.connected )
 80053b2:	4b26      	ldr	r3, [pc, #152]	@ (800544c <tud_task_ext+0x2d4>)
 80053b4:	781b      	ldrb	r3, [r3, #0]
 80053b6:	f3c3 0300 	ubfx	r3, r3, #0, #1
 80053ba:	b2db      	uxtb	r3, r3
 80053bc:	2b00      	cmp	r3, #0
 80053be:	d033      	beq.n	8005428 <tud_task_ext+0x2b0>
        {
          TU_LOG_USBD(": Remote Wakeup = %u\r\n", _usbd_dev.remote_wakeup_en);
          if (tud_suspend_cb) tud_suspend_cb(_usbd_dev.remote_wakeup_en);
 80053c0:	4b28      	ldr	r3, [pc, #160]	@ (8005464 <tud_task_ext+0x2ec>)
 80053c2:	2b00      	cmp	r3, #0
 80053c4:	d030      	beq.n	8005428 <tud_task_ext+0x2b0>
 80053c6:	4b21      	ldr	r3, [pc, #132]	@ (800544c <tud_task_ext+0x2d4>)
 80053c8:	781b      	ldrb	r3, [r3, #0]
 80053ca:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 80053ce:	b2db      	uxtb	r3, r3
 80053d0:	2b00      	cmp	r3, #0
 80053d2:	bf14      	ite	ne
 80053d4:	2301      	movne	r3, #1
 80053d6:	2300      	moveq	r3, #0
 80053d8:	b2db      	uxtb	r3, r3
 80053da:	4618      	mov	r0, r3
 80053dc:	f7fb ff10 	bl	8001200 <tud_suspend_cb>
        }else
        {
          TU_LOG_USBD(" Skipped\r\n");
        }
      break;
 80053e0:	e022      	b.n	8005428 <tud_task_ext+0x2b0>

      case DCD_EVENT_RESUME:
        if ( _usbd_dev.connected )
 80053e2:	4b1a      	ldr	r3, [pc, #104]	@ (800544c <tud_task_ext+0x2d4>)
 80053e4:	781b      	ldrb	r3, [r3, #0]
 80053e6:	f3c3 0300 	ubfx	r3, r3, #0, #1
 80053ea:	b2db      	uxtb	r3, r3
 80053ec:	2b00      	cmp	r3, #0
 80053ee:	d01d      	beq.n	800542c <tud_task_ext+0x2b4>
        {
          TU_LOG_USBD("\r\n");
          if (tud_resume_cb) tud_resume_cb();
 80053f0:	4b1d      	ldr	r3, [pc, #116]	@ (8005468 <tud_task_ext+0x2f0>)
 80053f2:	2b00      	cmp	r3, #0
 80053f4:	d01a      	beq.n	800542c <tud_task_ext+0x2b4>
 80053f6:	f7fb ff13 	bl	8001220 <tud_resume_cb>
        }else
        {
          TU_LOG_USBD(" Skipped\r\n");
        }
      break;
 80053fa:	e017      	b.n	800542c <tud_task_ext+0x2b4>

      case USBD_EVENT_FUNC_CALL:
        TU_LOG_USBD("\r\n");
        if ( event.func_call.func ) event.func_call.func(event.func_call.param);
 80053fc:	693b      	ldr	r3, [r7, #16]
 80053fe:	2b00      	cmp	r3, #0
 8005400:	d016      	beq.n	8005430 <tud_task_ext+0x2b8>
 8005402:	693b      	ldr	r3, [r7, #16]
 8005404:	697a      	ldr	r2, [r7, #20]
 8005406:	4610      	mov	r0, r2
 8005408:	4798      	blx	r3
      break;
 800540a:	e011      	b.n	8005430 <tud_task_ext+0x2b8>

      case DCD_EVENT_SOF:
      default:
        TU_BREAKPOINT();
 800540c:	4b14      	ldr	r3, [pc, #80]	@ (8005460 <tud_task_ext+0x2e8>)
 800540e:	63bb      	str	r3, [r7, #56]	@ 0x38
 8005410:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005412:	681b      	ldr	r3, [r3, #0]
 8005414:	f003 0301 	and.w	r3, r3, #1
 8005418:	2b00      	cmp	r3, #0
 800541a:	d00b      	beq.n	8005434 <tud_task_ext+0x2bc>
 800541c:	be00      	bkpt	0x0000
      break;
 800541e:	e009      	b.n	8005434 <tud_task_ext+0x2bc>
      break;
 8005420:	bf00      	nop
 8005422:	e6b8      	b.n	8005196 <tud_task_ext+0x1e>
      break;
 8005424:	bf00      	nop
 8005426:	e6b6      	b.n	8005196 <tud_task_ext+0x1e>
      break;
 8005428:	bf00      	nop
 800542a:	e6b4      	b.n	8005196 <tud_task_ext+0x1e>
      break;
 800542c:	bf00      	nop
 800542e:	e6b2      	b.n	8005196 <tud_task_ext+0x1e>
      break;
 8005430:	bf00      	nop
 8005432:	e6b0      	b.n	8005196 <tud_task_ext+0x1e>
      break;
 8005434:	bf00      	nop
  {
 8005436:	e6ae      	b.n	8005196 <tud_task_ext+0x1e>
  if ( !tud_inited() ) return;
 8005438:	bf00      	nop
 800543a:	e002      	b.n	8005442 <tud_task_ext+0x2ca>
    if ( !osal_queue_receive(_usbd_q, &event, timeout_ms) ) return;
 800543c:	bf00      	nop
 800543e:	e000      	b.n	8005442 <tud_task_ext+0x2ca>
          TU_ASSERT(driver, );
 8005440:	bf00      	nop
#if CFG_TUSB_OS != OPT_OS_NONE && CFG_TUSB_OS != OPT_OS_PICO
    // return if there is no more events, for application to run other background
    if (osal_queue_empty(_usbd_q)) return;
#endif
  }
}
 8005442:	374c      	adds	r7, #76	@ 0x4c
 8005444:	46bd      	mov	sp, r7
 8005446:	bd90      	pop	{r4, r7, pc}
 8005448:	24001e10 	.word	0x24001e10
 800544c:	24001d10 	.word	0x24001d10
 8005450:	080011e5 	.word	0x080011e5
 8005454:	24001d4c 	.word	0x24001d4c
 8005458:	24001d48 	.word	0x24001d48
 800545c:	0801bf18 	.word	0x0801bf18
 8005460:	e000edf0 	.word	0xe000edf0
 8005464:	08001201 	.word	0x08001201
 8005468:	08001221 	.word	0x08001221

0800546c <invoke_class_control>:
// Control Request Parser & Handling
//--------------------------------------------------------------------+

// Helper to invoke class driver control request handler
static bool invoke_class_control(uint8_t rhport, usbd_class_driver_t const * driver, tusb_control_request_t const * request)
{
 800546c:	b580      	push	{r7, lr}
 800546e:	b084      	sub	sp, #16
 8005470:	af00      	add	r7, sp, #0
 8005472:	4603      	mov	r3, r0
 8005474:	60b9      	str	r1, [r7, #8]
 8005476:	607a      	str	r2, [r7, #4]
 8005478:	73fb      	strb	r3, [r7, #15]
  usbd_control_set_complete_callback(driver->control_xfer_cb);
 800547a:	68bb      	ldr	r3, [r7, #8]
 800547c:	68db      	ldr	r3, [r3, #12]
 800547e:	4618      	mov	r0, r3
 8005480:	f001 fa34 	bl	80068ec <usbd_control_set_complete_callback>
  TU_LOG_USBD("  %s control request\r\n", driver->name);
  return driver->control_xfer_cb(rhport, CONTROL_STAGE_SETUP, request);
 8005484:	68bb      	ldr	r3, [r7, #8]
 8005486:	68db      	ldr	r3, [r3, #12]
 8005488:	7bf8      	ldrb	r0, [r7, #15]
 800548a:	687a      	ldr	r2, [r7, #4]
 800548c:	2101      	movs	r1, #1
 800548e:	4798      	blx	r3
 8005490:	4603      	mov	r3, r0
}
 8005492:	4618      	mov	r0, r3
 8005494:	3710      	adds	r7, #16
 8005496:	46bd      	mov	sp, r7
 8005498:	bd80      	pop	{r7, pc}
	...

0800549c <process_control_request>:

// This handles the actual request and its response.
// return false will cause its caller to stall control endpoint
static bool process_control_request(uint8_t rhport, tusb_control_request_t const * p_request)
{
 800549c:	b580      	push	{r7, lr}
 800549e:	b09a      	sub	sp, #104	@ 0x68
 80054a0:	af00      	add	r7, sp, #0
 80054a2:	4603      	mov	r3, r0
 80054a4:	6039      	str	r1, [r7, #0]
 80054a6:	71fb      	strb	r3, [r7, #7]
  usbd_control_set_complete_callback(NULL);
 80054a8:	2000      	movs	r0, #0
 80054aa:	f001 fa1f 	bl	80068ec <usbd_control_set_complete_callback>

  TU_ASSERT(p_request->bmRequestType_bit.type < TUSB_REQ_TYPE_INVALID);
 80054ae:	683b      	ldr	r3, [r7, #0]
 80054b0:	781b      	ldrb	r3, [r3, #0]
 80054b2:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 80054b6:	b2db      	uxtb	r3, r3
 80054b8:	2b60      	cmp	r3, #96	@ 0x60
 80054ba:	d10a      	bne.n	80054d2 <process_control_request+0x36>
 80054bc:	4ba3      	ldr	r3, [pc, #652]	@ (800574c <process_control_request+0x2b0>)
 80054be:	633b      	str	r3, [r7, #48]	@ 0x30
 80054c0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80054c2:	681b      	ldr	r3, [r3, #0]
 80054c4:	f003 0301 	and.w	r3, r3, #1
 80054c8:	2b00      	cmp	r3, #0
 80054ca:	d000      	beq.n	80054ce <process_control_request+0x32>
 80054cc:	be00      	bkpt	0x0000
 80054ce:	2300      	movs	r3, #0
 80054d0:	e2d1      	b.n	8005a76 <process_control_request+0x5da>

  // Vendor request
  if ( p_request->bmRequestType_bit.type == TUSB_REQ_TYPE_VENDOR )
 80054d2:	683b      	ldr	r3, [r7, #0]
 80054d4:	781b      	ldrb	r3, [r3, #0]
 80054d6:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 80054da:	b2db      	uxtb	r3, r3
 80054dc:	2b40      	cmp	r3, #64	@ 0x40
 80054de:	d10f      	bne.n	8005500 <process_control_request+0x64>
  {
    TU_VERIFY(tud_vendor_control_xfer_cb);
 80054e0:	4b9b      	ldr	r3, [pc, #620]	@ (8005750 <process_control_request+0x2b4>)
 80054e2:	2b00      	cmp	r3, #0
 80054e4:	d101      	bne.n	80054ea <process_control_request+0x4e>
 80054e6:	2300      	movs	r3, #0
 80054e8:	e2c5      	b.n	8005a76 <process_control_request+0x5da>

    usbd_control_set_complete_callback(tud_vendor_control_xfer_cb);
 80054ea:	4899      	ldr	r0, [pc, #612]	@ (8005750 <process_control_request+0x2b4>)
 80054ec:	f001 f9fe 	bl	80068ec <usbd_control_set_complete_callback>
    return tud_vendor_control_xfer_cb(rhport, CONTROL_STAGE_SETUP, p_request);
 80054f0:	79fb      	ldrb	r3, [r7, #7]
 80054f2:	683a      	ldr	r2, [r7, #0]
 80054f4:	2101      	movs	r1, #1
 80054f6:	4618      	mov	r0, r3
 80054f8:	f3af 8000 	nop.w
 80054fc:	4603      	mov	r3, r0
 80054fe:	e2ba      	b.n	8005a76 <process_control_request+0x5da>
    TU_LOG_USBD("  %s", tu_str_std_request[p_request->bRequest]);
    if (TUSB_REQ_GET_DESCRIPTOR != p_request->bRequest) TU_LOG_USBD("\r\n");
  }
#endif

  switch ( p_request->bmRequestType_bit.recipient )
 8005500:	683b      	ldr	r3, [r7, #0]
 8005502:	781b      	ldrb	r3, [r3, #0]
 8005504:	f3c3 0304 	ubfx	r3, r3, #0, #5
 8005508:	b2db      	uxtb	r3, r3
 800550a:	2b02      	cmp	r3, #2
 800550c:	f000 81d6 	beq.w	80058bc <process_control_request+0x420>
 8005510:	2b02      	cmp	r3, #2
 8005512:	f300 82a3 	bgt.w	8005a5c <process_control_request+0x5c0>
 8005516:	2b00      	cmp	r3, #0
 8005518:	d003      	beq.n	8005522 <process_control_request+0x86>
 800551a:	2b01      	cmp	r3, #1
 800551c:	f000 8157 	beq.w	80057ce <process_control_request+0x332>
 8005520:	e29c      	b.n	8005a5c <process_control_request+0x5c0>
  {
    //------------- Device Requests e.g in enumeration -------------//
    case TUSB_REQ_RCPT_DEVICE:
      if ( TUSB_REQ_TYPE_CLASS == p_request->bmRequestType_bit.type )
 8005522:	683b      	ldr	r3, [r7, #0]
 8005524:	781b      	ldrb	r3, [r3, #0]
 8005526:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800552a:	b2db      	uxtb	r3, r3
 800552c:	2b20      	cmp	r3, #32
 800552e:	d149      	bne.n	80055c4 <process_control_request+0x128>
      {
        uint8_t const itf = tu_u16_low(p_request->wIndex);
 8005530:	683b      	ldr	r3, [r7, #0]
 8005532:	889b      	ldrh	r3, [r3, #4]
 8005534:	b29b      	uxth	r3, r3
 8005536:	85fb      	strh	r3, [r7, #46]	@ 0x2e
TU_ATTR_ALWAYS_INLINE static inline uint8_t tu_u16_low (uint16_t ui16) { return TU_U16_LOW(ui16); }
 8005538:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 800553a:	b2db      	uxtb	r3, r3
 800553c:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
        TU_VERIFY(itf < TU_ARRAY_SIZE(_usbd_dev.itf2drv));
 8005540:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8005544:	2b0f      	cmp	r3, #15
 8005546:	d901      	bls.n	800554c <process_control_request+0xb0>
 8005548:	2300      	movs	r3, #0
 800554a:	e294      	b.n	8005a76 <process_control_request+0x5da>

        usbd_class_driver_t const * driver = get_driver(_usbd_dev.itf2drv[itf]);
 800554c:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8005550:	4a80      	ldr	r2, [pc, #512]	@ (8005754 <process_control_request+0x2b8>)
 8005552:	4413      	add	r3, r2
 8005554:	78db      	ldrb	r3, [r3, #3]
 8005556:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
  usbd_class_driver_t const * driver = NULL;
 800555a:	2300      	movs	r3, #0
 800555c:	62bb      	str	r3, [r7, #40]	@ 0x28
  if ( drvid < _app_driver_count ) {
 800555e:	4b7e      	ldr	r3, [pc, #504]	@ (8005758 <process_control_request+0x2bc>)
 8005560:	781b      	ldrb	r3, [r3, #0]
 8005562:	f897 202d 	ldrb.w	r2, [r7, #45]	@ 0x2d
 8005566:	429a      	cmp	r2, r3
 8005568:	d20a      	bcs.n	8005580 <process_control_request+0xe4>
    driver = &_app_driver[drvid];
 800556a:	4b7c      	ldr	r3, [pc, #496]	@ (800575c <process_control_request+0x2c0>)
 800556c:	6819      	ldr	r1, [r3, #0]
 800556e:	f897 202d 	ldrb.w	r2, [r7, #45]	@ 0x2d
 8005572:	4613      	mov	r3, r2
 8005574:	005b      	lsls	r3, r3, #1
 8005576:	4413      	add	r3, r2
 8005578:	00db      	lsls	r3, r3, #3
 800557a:	440b      	add	r3, r1
 800557c:	62bb      	str	r3, [r7, #40]	@ 0x28
 800557e:	e012      	b.n	80055a6 <process_control_request+0x10a>
  } else if ( drvid < TOTAL_DRIVER_COUNT && BUILTIN_DRIVER_COUNT > 0 ){
 8005580:	4b75      	ldr	r3, [pc, #468]	@ (8005758 <process_control_request+0x2bc>)
 8005582:	781b      	ldrb	r3, [r3, #0]
 8005584:	1c9a      	adds	r2, r3, #2
 8005586:	f897 302d 	ldrb.w	r3, [r7, #45]	@ 0x2d
 800558a:	429a      	cmp	r2, r3
 800558c:	db0b      	blt.n	80055a6 <process_control_request+0x10a>
    driver = &_usbd_driver[drvid - _app_driver_count];
 800558e:	f897 302d 	ldrb.w	r3, [r7, #45]	@ 0x2d
 8005592:	4a71      	ldr	r2, [pc, #452]	@ (8005758 <process_control_request+0x2bc>)
 8005594:	7812      	ldrb	r2, [r2, #0]
 8005596:	1a9a      	subs	r2, r3, r2
 8005598:	4613      	mov	r3, r2
 800559a:	005b      	lsls	r3, r3, #1
 800559c:	4413      	add	r3, r2
 800559e:	00db      	lsls	r3, r3, #3
 80055a0:	4a6f      	ldr	r2, [pc, #444]	@ (8005760 <process_control_request+0x2c4>)
 80055a2:	4413      	add	r3, r2
 80055a4:	62bb      	str	r3, [r7, #40]	@ 0x28
  return driver;
 80055a6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
        usbd_class_driver_t const * driver = get_driver(_usbd_dev.itf2drv[itf]);
 80055a8:	63bb      	str	r3, [r7, #56]	@ 0x38
        TU_VERIFY(driver);
 80055aa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80055ac:	2b00      	cmp	r3, #0
 80055ae:	d101      	bne.n	80055b4 <process_control_request+0x118>
 80055b0:	2300      	movs	r3, #0
 80055b2:	e260      	b.n	8005a76 <process_control_request+0x5da>

        // forward to class driver: "non-STD request to Interface"
        return invoke_class_control(rhport, driver, p_request);
 80055b4:	79fb      	ldrb	r3, [r7, #7]
 80055b6:	683a      	ldr	r2, [r7, #0]
 80055b8:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 80055ba:	4618      	mov	r0, r3
 80055bc:	f7ff ff56 	bl	800546c <invoke_class_control>
 80055c0:	4603      	mov	r3, r0
 80055c2:	e258      	b.n	8005a76 <process_control_request+0x5da>
      }

      if ( TUSB_REQ_TYPE_STANDARD != p_request->bmRequestType_bit.type )
 80055c4:	683b      	ldr	r3, [r7, #0]
 80055c6:	781b      	ldrb	r3, [r3, #0]
 80055c8:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 80055cc:	b2db      	uxtb	r3, r3
 80055ce:	2b00      	cmp	r3, #0
 80055d0:	d00a      	beq.n	80055e8 <process_control_request+0x14c>
      {
        // Non standard request is not supported
        TU_BREAKPOINT();
 80055d2:	4b5e      	ldr	r3, [pc, #376]	@ (800574c <process_control_request+0x2b0>)
 80055d4:	643b      	str	r3, [r7, #64]	@ 0x40
 80055d6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80055d8:	681b      	ldr	r3, [r3, #0]
 80055da:	f003 0301 	and.w	r3, r3, #1
 80055de:	2b00      	cmp	r3, #0
 80055e0:	d000      	beq.n	80055e4 <process_control_request+0x148>
 80055e2:	be00      	bkpt	0x0000
        return false;
 80055e4:	2300      	movs	r3, #0
 80055e6:	e246      	b.n	8005a76 <process_control_request+0x5da>
      }

      switch ( p_request->bRequest )
 80055e8:	683b      	ldr	r3, [r7, #0]
 80055ea:	785b      	ldrb	r3, [r3, #1]
 80055ec:	2b09      	cmp	r3, #9
 80055ee:	f200 80e1 	bhi.w	80057b4 <process_control_request+0x318>
 80055f2:	a201      	add	r2, pc, #4	@ (adr r2, 80055f8 <process_control_request+0x15c>)
 80055f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80055f8:	08005783 	.word	0x08005783
 80055fc:	0800573f 	.word	0x0800573f
 8005600:	080057b5 	.word	0x080057b5
 8005604:	0800571b 	.word	0x0800571b
 8005608:	080057b5 	.word	0x080057b5
 800560c:	08005621 	.word	0x08005621
 8005610:	08005701 	.word	0x08005701
 8005614:	080057b5 	.word	0x080057b5
 8005618:	08005645 	.word	0x08005645
 800561c:	0800565d 	.word	0x0800565d
      {
        case TUSB_REQ_SET_ADDRESS:
          // Depending on mcu, status phase could be sent either before or after changing device address,
          // or even require stack to not response with status at all
          // Therefore DCD must take full responsibility to response and include zlp status packet if needed.
          usbd_control_set_request(p_request); // set request since DCD has no access to tud_control_status() API
 8005620:	6838      	ldr	r0, [r7, #0]
 8005622:	f001 f973 	bl	800690c <usbd_control_set_request>
          dcd_set_address(rhport, (uint8_t) p_request->wValue);
 8005626:	683b      	ldr	r3, [r7, #0]
 8005628:	885b      	ldrh	r3, [r3, #2]
 800562a:	b29b      	uxth	r3, r3
 800562c:	b2da      	uxtb	r2, r3
 800562e:	79fb      	ldrb	r3, [r7, #7]
 8005630:	4611      	mov	r1, r2
 8005632:	4618      	mov	r0, r3
 8005634:	f002 f9de 	bl	80079f4 <dcd_set_address>
          // skip tud_control_status()
          _usbd_dev.addressed = 1;
 8005638:	4a46      	ldr	r2, [pc, #280]	@ (8005754 <process_control_request+0x2b8>)
 800563a:	7813      	ldrb	r3, [r2, #0]
 800563c:	f043 0302 	orr.w	r3, r3, #2
 8005640:	7013      	strb	r3, [r2, #0]
        break;
 8005642:	e0c3      	b.n	80057cc <process_control_request+0x330>

        case TUSB_REQ_GET_CONFIGURATION:
        {
          uint8_t cfg_num = _usbd_dev.cfg_num;
 8005644:	4b43      	ldr	r3, [pc, #268]	@ (8005754 <process_control_request+0x2b8>)
 8005646:	785b      	ldrb	r3, [r3, #1]
 8005648:	b2db      	uxtb	r3, r3
 800564a:	74fb      	strb	r3, [r7, #19]
          tud_control_xfer(rhport, p_request, &cfg_num, 1);
 800564c:	f107 0213 	add.w	r2, r7, #19
 8005650:	79f8      	ldrb	r0, [r7, #7]
 8005652:	2301      	movs	r3, #1
 8005654:	6839      	ldr	r1, [r7, #0]
 8005656:	f001 f8cd 	bl	80067f4 <tud_control_xfer>
        }
        break;
 800565a:	e0b7      	b.n	80057cc <process_control_request+0x330>

        case TUSB_REQ_SET_CONFIGURATION:
        {
          uint8_t const cfg_num = (uint8_t) p_request->wValue;
 800565c:	683b      	ldr	r3, [r7, #0]
 800565e:	885b      	ldrh	r3, [r3, #2]
 8005660:	b29b      	uxth	r3, r3
 8005662:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f

          // Only process if new configure is different
          if (_usbd_dev.cfg_num != cfg_num)
 8005666:	4b3b      	ldr	r3, [pc, #236]	@ (8005754 <process_control_request+0x2b8>)
 8005668:	785b      	ldrb	r3, [r3, #1]
 800566a:	b2db      	uxtb	r3, r3
 800566c:	f897 204f 	ldrb.w	r2, [r7, #79]	@ 0x4f
 8005670:	429a      	cmp	r2, r3
 8005672:	d03b      	beq.n	80056ec <process_control_request+0x250>
          {
            if ( _usbd_dev.cfg_num )
 8005674:	4b37      	ldr	r3, [pc, #220]	@ (8005754 <process_control_request+0x2b8>)
 8005676:	785b      	ldrb	r3, [r3, #1]
 8005678:	b2db      	uxtb	r3, r3
 800567a:	2b00      	cmp	r3, #0
 800567c:	d00f      	beq.n	800569e <process_control_request+0x202>
            {
              // already configured: need to clear all endpoints and driver first
              TU_LOG_USBD("  Clear current Configuration (%u) before switching\r\n", _usbd_dev.cfg_num);

              // close all non-control endpoints, cancel all pending transfers if any
              dcd_edpt_close_all(rhport);
 800567e:	79fb      	ldrb	r3, [r7, #7]
 8005680:	4618      	mov	r0, r3
 8005682:	f002 fb5f 	bl	8007d44 <dcd_edpt_close_all>

              // close all drivers and current configured state except bus speed
              uint8_t const speed = _usbd_dev.speed;
 8005686:	4b33      	ldr	r3, [pc, #204]	@ (8005754 <process_control_request+0x2b8>)
 8005688:	789b      	ldrb	r3, [r3, #2]
 800568a:	f887 304e 	strb.w	r3, [r7, #78]	@ 0x4e
              configuration_reset(rhport);
 800568e:	79fb      	ldrb	r3, [r7, #7]
 8005690:	4618      	mov	r0, r3
 8005692:	f7ff fcf5 	bl	8005080 <configuration_reset>

              _usbd_dev.speed = speed; // restore speed
 8005696:	4a2f      	ldr	r2, [pc, #188]	@ (8005754 <process_control_request+0x2b8>)
 8005698:	f897 304e 	ldrb.w	r3, [r7, #78]	@ 0x4e
 800569c:	7093      	strb	r3, [r2, #2]
            }

            // Handle the new configuration and execute the corresponding callback
            if ( cfg_num )
 800569e:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 80056a2:	2b00      	cmp	r3, #0
 80056a4:	d01d      	beq.n	80056e2 <process_control_request+0x246>
            {
              // switch to new configuration if not zero
              TU_ASSERT( process_set_config(rhport, cfg_num) );
 80056a6:	f897 204f 	ldrb.w	r2, [r7, #79]	@ 0x4f
 80056aa:	79fb      	ldrb	r3, [r7, #7]
 80056ac:	4611      	mov	r1, r2
 80056ae:	4618      	mov	r0, r3
 80056b0:	f000 f9ea 	bl	8005a88 <process_set_config>
 80056b4:	4603      	mov	r3, r0
 80056b6:	f083 0301 	eor.w	r3, r3, #1
 80056ba:	b2db      	uxtb	r3, r3
 80056bc:	2b00      	cmp	r3, #0
 80056be:	d00a      	beq.n	80056d6 <process_control_request+0x23a>
 80056c0:	4b22      	ldr	r3, [pc, #136]	@ (800574c <process_control_request+0x2b0>)
 80056c2:	64bb      	str	r3, [r7, #72]	@ 0x48
 80056c4:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80056c6:	681b      	ldr	r3, [r3, #0]
 80056c8:	f003 0301 	and.w	r3, r3, #1
 80056cc:	2b00      	cmp	r3, #0
 80056ce:	d000      	beq.n	80056d2 <process_control_request+0x236>
 80056d0:	be00      	bkpt	0x0000
 80056d2:	2300      	movs	r3, #0
 80056d4:	e1cf      	b.n	8005a76 <process_control_request+0x5da>

              if ( tud_mount_cb ) tud_mount_cb();
 80056d6:	4b23      	ldr	r3, [pc, #140]	@ (8005764 <process_control_request+0x2c8>)
 80056d8:	2b00      	cmp	r3, #0
 80056da:	d007      	beq.n	80056ec <process_control_request+0x250>
 80056dc:	f7fb fd74 	bl	80011c8 <tud_mount_cb>
 80056e0:	e004      	b.n	80056ec <process_control_request+0x250>
            }
            else
            {
              if ( tud_umount_cb ) tud_umount_cb();
 80056e2:	4b21      	ldr	r3, [pc, #132]	@ (8005768 <process_control_request+0x2cc>)
 80056e4:	2b00      	cmp	r3, #0
 80056e6:	d001      	beq.n	80056ec <process_control_request+0x250>
 80056e8:	f7fb fd7c 	bl	80011e4 <tud_umount_cb>
            }
          }

          _usbd_dev.cfg_num = cfg_num;
 80056ec:	4a19      	ldr	r2, [pc, #100]	@ (8005754 <process_control_request+0x2b8>)
 80056ee:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 80056f2:	7053      	strb	r3, [r2, #1]
          tud_control_status(rhport, p_request);
 80056f4:	79fb      	ldrb	r3, [r7, #7]
 80056f6:	6839      	ldr	r1, [r7, #0]
 80056f8:	4618      	mov	r0, r3
 80056fa:	f001 f809 	bl	8006710 <tud_control_status>
        }
        break;
 80056fe:	e065      	b.n	80057cc <process_control_request+0x330>

        case TUSB_REQ_GET_DESCRIPTOR:
          TU_VERIFY( process_get_descriptor(rhport, p_request) );
 8005700:	79fb      	ldrb	r3, [r7, #7]
 8005702:	6839      	ldr	r1, [r7, #0]
 8005704:	4618      	mov	r0, r3
 8005706:	f000 faf9 	bl	8005cfc <process_get_descriptor>
 800570a:	4603      	mov	r3, r0
 800570c:	f083 0301 	eor.w	r3, r3, #1
 8005710:	b2db      	uxtb	r3, r3
 8005712:	2b00      	cmp	r3, #0
 8005714:	d059      	beq.n	80057ca <process_control_request+0x32e>
 8005716:	2300      	movs	r3, #0
 8005718:	e1ad      	b.n	8005a76 <process_control_request+0x5da>
        break;

        case TUSB_REQ_SET_FEATURE:
          // Only support remote wakeup for device feature
          TU_VERIFY(TUSB_REQ_FEATURE_REMOTE_WAKEUP == p_request->wValue);
 800571a:	683b      	ldr	r3, [r7, #0]
 800571c:	885b      	ldrh	r3, [r3, #2]
 800571e:	b29b      	uxth	r3, r3
 8005720:	2b01      	cmp	r3, #1
 8005722:	d001      	beq.n	8005728 <process_control_request+0x28c>
 8005724:	2300      	movs	r3, #0
 8005726:	e1a6      	b.n	8005a76 <process_control_request+0x5da>

          TU_LOG_USBD("    Enable Remote Wakeup\r\n");

          // Host may enable remote wake up before suspending especially HID device
          _usbd_dev.remote_wakeup_en = true;
 8005728:	4a0a      	ldr	r2, [pc, #40]	@ (8005754 <process_control_request+0x2b8>)
 800572a:	7813      	ldrb	r3, [r2, #0]
 800572c:	f043 0308 	orr.w	r3, r3, #8
 8005730:	7013      	strb	r3, [r2, #0]
          tud_control_status(rhport, p_request);
 8005732:	79fb      	ldrb	r3, [r7, #7]
 8005734:	6839      	ldr	r1, [r7, #0]
 8005736:	4618      	mov	r0, r3
 8005738:	f000 ffea 	bl	8006710 <tud_control_status>
        break;
 800573c:	e046      	b.n	80057cc <process_control_request+0x330>

        case TUSB_REQ_CLEAR_FEATURE:
          // Only support remote wakeup for device feature
          TU_VERIFY(TUSB_REQ_FEATURE_REMOTE_WAKEUP == p_request->wValue);
 800573e:	683b      	ldr	r3, [r7, #0]
 8005740:	885b      	ldrh	r3, [r3, #2]
 8005742:	b29b      	uxth	r3, r3
 8005744:	2b01      	cmp	r3, #1
 8005746:	d011      	beq.n	800576c <process_control_request+0x2d0>
 8005748:	2300      	movs	r3, #0
 800574a:	e194      	b.n	8005a76 <process_control_request+0x5da>
 800574c:	e000edf0 	.word	0xe000edf0
 8005750:	00000000 	.word	0x00000000
 8005754:	24001d10 	.word	0x24001d10
 8005758:	24001d4c 	.word	0x24001d4c
 800575c:	24001d48 	.word	0x24001d48
 8005760:	0801bf18 	.word	0x0801bf18
 8005764:	080011c9 	.word	0x080011c9
 8005768:	080011e5 	.word	0x080011e5

          TU_LOG_USBD("    Disable Remote Wakeup\r\n");

          // Host may disable remote wake up after resuming
          _usbd_dev.remote_wakeup_en = false;
 800576c:	4a9f      	ldr	r2, [pc, #636]	@ (80059ec <process_control_request+0x550>)
 800576e:	7813      	ldrb	r3, [r2, #0]
 8005770:	f36f 03c3 	bfc	r3, #3, #1
 8005774:	7013      	strb	r3, [r2, #0]
          tud_control_status(rhport, p_request);
 8005776:	79fb      	ldrb	r3, [r7, #7]
 8005778:	6839      	ldr	r1, [r7, #0]
 800577a:	4618      	mov	r0, r3
 800577c:	f000 ffc8 	bl	8006710 <tud_control_status>
        break;
 8005780:	e024      	b.n	80057cc <process_control_request+0x330>
        case TUSB_REQ_GET_STATUS:
        {
          // Device status bit mask
          // - Bit 0: Self Powered
          // - Bit 1: Remote Wakeup enabled
          uint16_t status = (uint16_t) ((_usbd_dev.self_powered ? 1u : 0u) | (_usbd_dev.remote_wakeup_en ? 2u : 0u));
 8005782:	4b9a      	ldr	r3, [pc, #616]	@ (80059ec <process_control_request+0x550>)
 8005784:	781b      	ldrb	r3, [r3, #0]
 8005786:	095b      	lsrs	r3, r3, #5
 8005788:	b2db      	uxtb	r3, r3
 800578a:	f003 0301 	and.w	r3, r3, #1
 800578e:	b29a      	uxth	r2, r3
 8005790:	4b96      	ldr	r3, [pc, #600]	@ (80059ec <process_control_request+0x550>)
 8005792:	781b      	ldrb	r3, [r3, #0]
 8005794:	089b      	lsrs	r3, r3, #2
 8005796:	b2db      	uxtb	r3, r3
 8005798:	f003 0302 	and.w	r3, r3, #2
 800579c:	b29b      	uxth	r3, r3
 800579e:	4313      	orrs	r3, r2
 80057a0:	b29b      	uxth	r3, r3
 80057a2:	823b      	strh	r3, [r7, #16]
          tud_control_xfer(rhport, p_request, &status, 2);
 80057a4:	f107 0210 	add.w	r2, r7, #16
 80057a8:	79f8      	ldrb	r0, [r7, #7]
 80057aa:	2302      	movs	r3, #2
 80057ac:	6839      	ldr	r1, [r7, #0]
 80057ae:	f001 f821 	bl	80067f4 <tud_control_xfer>
        }
        break;
 80057b2:	e00b      	b.n	80057cc <process_control_request+0x330>

        // Unknown/Unsupported request
        default: TU_BREAKPOINT(); return false;
 80057b4:	4b8e      	ldr	r3, [pc, #568]	@ (80059f0 <process_control_request+0x554>)
 80057b6:	647b      	str	r3, [r7, #68]	@ 0x44
 80057b8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80057ba:	681b      	ldr	r3, [r3, #0]
 80057bc:	f003 0301 	and.w	r3, r3, #1
 80057c0:	2b00      	cmp	r3, #0
 80057c2:	d000      	beq.n	80057c6 <process_control_request+0x32a>
 80057c4:	be00      	bkpt	0x0000
 80057c6:	2300      	movs	r3, #0
 80057c8:	e155      	b.n	8005a76 <process_control_request+0x5da>
        break;
 80057ca:	bf00      	nop
      }
    break;
 80057cc:	e152      	b.n	8005a74 <process_control_request+0x5d8>

    //------------- Class/Interface Specific Request -------------//
    case TUSB_REQ_RCPT_INTERFACE:
    {
      uint8_t const itf = tu_u16_low(p_request->wIndex);
 80057ce:	683b      	ldr	r3, [r7, #0]
 80057d0:	889b      	ldrh	r3, [r3, #4]
 80057d2:	b29b      	uxth	r3, r3
 80057d4:	84fb      	strh	r3, [r7, #38]	@ 0x26
 80057d6:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 80057d8:	b2db      	uxtb	r3, r3
 80057da:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
      TU_VERIFY(itf < TU_ARRAY_SIZE(_usbd_dev.itf2drv));
 80057de:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 80057e2:	2b0f      	cmp	r3, #15
 80057e4:	d901      	bls.n	80057ea <process_control_request+0x34e>
 80057e6:	2300      	movs	r3, #0
 80057e8:	e145      	b.n	8005a76 <process_control_request+0x5da>

      usbd_class_driver_t const * driver = get_driver(_usbd_dev.itf2drv[itf]);
 80057ea:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 80057ee:	4a7f      	ldr	r2, [pc, #508]	@ (80059ec <process_control_request+0x550>)
 80057f0:	4413      	add	r3, r2
 80057f2:	78db      	ldrb	r3, [r3, #3]
 80057f4:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
  usbd_class_driver_t const * driver = NULL;
 80057f8:	2300      	movs	r3, #0
 80057fa:	623b      	str	r3, [r7, #32]
  if ( drvid < _app_driver_count ) {
 80057fc:	4b7d      	ldr	r3, [pc, #500]	@ (80059f4 <process_control_request+0x558>)
 80057fe:	781b      	ldrb	r3, [r3, #0]
 8005800:	f897 2025 	ldrb.w	r2, [r7, #37]	@ 0x25
 8005804:	429a      	cmp	r2, r3
 8005806:	d20a      	bcs.n	800581e <process_control_request+0x382>
    driver = &_app_driver[drvid];
 8005808:	4b7b      	ldr	r3, [pc, #492]	@ (80059f8 <process_control_request+0x55c>)
 800580a:	6819      	ldr	r1, [r3, #0]
 800580c:	f897 2025 	ldrb.w	r2, [r7, #37]	@ 0x25
 8005810:	4613      	mov	r3, r2
 8005812:	005b      	lsls	r3, r3, #1
 8005814:	4413      	add	r3, r2
 8005816:	00db      	lsls	r3, r3, #3
 8005818:	440b      	add	r3, r1
 800581a:	623b      	str	r3, [r7, #32]
 800581c:	e012      	b.n	8005844 <process_control_request+0x3a8>
  } else if ( drvid < TOTAL_DRIVER_COUNT && BUILTIN_DRIVER_COUNT > 0 ){
 800581e:	4b75      	ldr	r3, [pc, #468]	@ (80059f4 <process_control_request+0x558>)
 8005820:	781b      	ldrb	r3, [r3, #0]
 8005822:	1c9a      	adds	r2, r3, #2
 8005824:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8005828:	429a      	cmp	r2, r3
 800582a:	db0b      	blt.n	8005844 <process_control_request+0x3a8>
    driver = &_usbd_driver[drvid - _app_driver_count];
 800582c:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8005830:	4a70      	ldr	r2, [pc, #448]	@ (80059f4 <process_control_request+0x558>)
 8005832:	7812      	ldrb	r2, [r2, #0]
 8005834:	1a9a      	subs	r2, r3, r2
 8005836:	4613      	mov	r3, r2
 8005838:	005b      	lsls	r3, r3, #1
 800583a:	4413      	add	r3, r2
 800583c:	00db      	lsls	r3, r3, #3
 800583e:	4a6f      	ldr	r2, [pc, #444]	@ (80059fc <process_control_request+0x560>)
 8005840:	4413      	add	r3, r2
 8005842:	623b      	str	r3, [r7, #32]
  return driver;
 8005844:	6a3b      	ldr	r3, [r7, #32]
      usbd_class_driver_t const * driver = get_driver(_usbd_dev.itf2drv[itf]);
 8005846:	653b      	str	r3, [r7, #80]	@ 0x50
      TU_VERIFY(driver);
 8005848:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800584a:	2b00      	cmp	r3, #0
 800584c:	d101      	bne.n	8005852 <process_control_request+0x3b6>
 800584e:	2300      	movs	r3, #0
 8005850:	e111      	b.n	8005a76 <process_control_request+0x5da>

      // all requests to Interface (STD or Class) is forwarded to class driver.
      // notable requests are: GET HID REPORT DESCRIPTOR, SET_INTERFACE, GET_INTERFACE
      if ( !invoke_class_control(rhport, driver, p_request) )
 8005852:	79fb      	ldrb	r3, [r7, #7]
 8005854:	683a      	ldr	r2, [r7, #0]
 8005856:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8005858:	4618      	mov	r0, r3
 800585a:	f7ff fe07 	bl	800546c <invoke_class_control>
 800585e:	4603      	mov	r3, r0
 8005860:	f083 0301 	eor.w	r3, r3, #1
 8005864:	b2db      	uxtb	r3, r3
 8005866:	2b00      	cmp	r3, #0
 8005868:	f000 8103 	beq.w	8005a72 <process_control_request+0x5d6>
      {
        // For GET_INTERFACE and SET_INTERFACE, it is mandatory to respond even if the class
        // driver doesn't use alternate settings or implement this
        TU_VERIFY(TUSB_REQ_TYPE_STANDARD == p_request->bmRequestType_bit.type);
 800586c:	683b      	ldr	r3, [r7, #0]
 800586e:	781b      	ldrb	r3, [r3, #0]
 8005870:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8005874:	b2db      	uxtb	r3, r3
 8005876:	2b00      	cmp	r3, #0
 8005878:	d001      	beq.n	800587e <process_control_request+0x3e2>
 800587a:	2300      	movs	r3, #0
 800587c:	e0fb      	b.n	8005a76 <process_control_request+0x5da>

        switch(p_request->bRequest)
 800587e:	683b      	ldr	r3, [r7, #0]
 8005880:	785b      	ldrb	r3, [r3, #1]
 8005882:	3b0a      	subs	r3, #10
 8005884:	2b01      	cmp	r3, #1
 8005886:	d816      	bhi.n	80058b6 <process_control_request+0x41a>
        {
          case TUSB_REQ_GET_INTERFACE:
          case TUSB_REQ_SET_INTERFACE:
            // Clear complete callback if driver set since it can also stall the request.
            usbd_control_set_complete_callback(NULL);
 8005888:	2000      	movs	r0, #0
 800588a:	f001 f82f 	bl	80068ec <usbd_control_set_complete_callback>

            if (TUSB_REQ_GET_INTERFACE == p_request->bRequest)
 800588e:	683b      	ldr	r3, [r7, #0]
 8005890:	785b      	ldrb	r3, [r3, #1]
 8005892:	2b0a      	cmp	r3, #10
 8005894:	d109      	bne.n	80058aa <process_control_request+0x40e>
            {
              uint8_t alternate = 0;
 8005896:	2300      	movs	r3, #0
 8005898:	73fb      	strb	r3, [r7, #15]
              tud_control_xfer(rhport, p_request, &alternate, 1);
 800589a:	f107 020f 	add.w	r2, r7, #15
 800589e:	79f8      	ldrb	r0, [r7, #7]
 80058a0:	2301      	movs	r3, #1
 80058a2:	6839      	ldr	r1, [r7, #0]
 80058a4:	f000 ffa6 	bl	80067f4 <tud_control_xfer>
            }else
            {
              tud_control_status(rhport, p_request);
            }
          break;
 80058a8:	e007      	b.n	80058ba <process_control_request+0x41e>
              tud_control_status(rhport, p_request);
 80058aa:	79fb      	ldrb	r3, [r7, #7]
 80058ac:	6839      	ldr	r1, [r7, #0]
 80058ae:	4618      	mov	r0, r3
 80058b0:	f000 ff2e 	bl	8006710 <tud_control_status>
          break;
 80058b4:	e001      	b.n	80058ba <process_control_request+0x41e>

          default: return false;
 80058b6:	2300      	movs	r3, #0
 80058b8:	e0dd      	b.n	8005a76 <process_control_request+0x5da>
        }
      }
    }
    break;
 80058ba:	e0da      	b.n	8005a72 <process_control_request+0x5d6>

    //------------- Endpoint Request -------------//
    case TUSB_REQ_RCPT_ENDPOINT:
    {
      uint8_t const ep_addr = tu_u16_low(p_request->wIndex);
 80058bc:	683b      	ldr	r3, [r7, #0]
 80058be:	889b      	ldrh	r3, [r3, #4]
 80058c0:	b29b      	uxth	r3, r3
 80058c2:	83bb      	strh	r3, [r7, #28]
 80058c4:	8bbb      	ldrh	r3, [r7, #28]
 80058c6:	b2db      	uxtb	r3, r3
 80058c8:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
 80058cc:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 80058d0:	77bb      	strb	r3, [r7, #30]
  return (uint8_t)(addr & (~TUSB_DIR_IN_MASK));
 80058d2:	7fbb      	ldrb	r3, [r7, #30]
 80058d4:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80058d8:	b2db      	uxtb	r3, r3
      uint8_t const ep_num  = tu_edpt_number(ep_addr);
 80058da:	f887 3066 	strb.w	r3, [r7, #102]	@ 0x66
 80058de:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 80058e2:	77fb      	strb	r3, [r7, #31]
  return (addr & TUSB_DIR_IN_MASK) ? TUSB_DIR_IN : TUSB_DIR_OUT;
 80058e4:	7ffb      	ldrb	r3, [r7, #31]
 80058e6:	09db      	lsrs	r3, r3, #7
 80058e8:	b2db      	uxtb	r3, r3
      uint8_t const ep_dir  = tu_edpt_dir(ep_addr);
 80058ea:	f887 3065 	strb.w	r3, [r7, #101]	@ 0x65

      TU_ASSERT(ep_num < TU_ARRAY_SIZE(_usbd_dev.ep2drv) );
 80058ee:	f897 3066 	ldrb.w	r3, [r7, #102]	@ 0x66
 80058f2:	2b08      	cmp	r3, #8
 80058f4:	d90a      	bls.n	800590c <process_control_request+0x470>
 80058f6:	4b3e      	ldr	r3, [pc, #248]	@ (80059f0 <process_control_request+0x554>)
 80058f8:	65bb      	str	r3, [r7, #88]	@ 0x58
 80058fa:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80058fc:	681b      	ldr	r3, [r3, #0]
 80058fe:	f003 0301 	and.w	r3, r3, #1
 8005902:	2b00      	cmp	r3, #0
 8005904:	d000      	beq.n	8005908 <process_control_request+0x46c>
 8005906:	be00      	bkpt	0x0000
 8005908:	2300      	movs	r3, #0
 800590a:	e0b4      	b.n	8005a76 <process_control_request+0x5da>

      usbd_class_driver_t const * driver = get_driver(_usbd_dev.ep2drv[ep_num][ep_dir]);
 800590c:	f897 2066 	ldrb.w	r2, [r7, #102]	@ 0x66
 8005910:	f897 3065 	ldrb.w	r3, [r7, #101]	@ 0x65
 8005914:	4935      	ldr	r1, [pc, #212]	@ (80059ec <process_control_request+0x550>)
 8005916:	0052      	lsls	r2, r2, #1
 8005918:	440a      	add	r2, r1
 800591a:	4413      	add	r3, r2
 800591c:	3313      	adds	r3, #19
 800591e:	781b      	ldrb	r3, [r3, #0]
 8005920:	76fb      	strb	r3, [r7, #27]
  usbd_class_driver_t const * driver = NULL;
 8005922:	2300      	movs	r3, #0
 8005924:	617b      	str	r3, [r7, #20]
  if ( drvid < _app_driver_count ) {
 8005926:	4b33      	ldr	r3, [pc, #204]	@ (80059f4 <process_control_request+0x558>)
 8005928:	781b      	ldrb	r3, [r3, #0]
 800592a:	7efa      	ldrb	r2, [r7, #27]
 800592c:	429a      	cmp	r2, r3
 800592e:	d209      	bcs.n	8005944 <process_control_request+0x4a8>
    driver = &_app_driver[drvid];
 8005930:	4b31      	ldr	r3, [pc, #196]	@ (80059f8 <process_control_request+0x55c>)
 8005932:	6819      	ldr	r1, [r3, #0]
 8005934:	7efa      	ldrb	r2, [r7, #27]
 8005936:	4613      	mov	r3, r2
 8005938:	005b      	lsls	r3, r3, #1
 800593a:	4413      	add	r3, r2
 800593c:	00db      	lsls	r3, r3, #3
 800593e:	440b      	add	r3, r1
 8005940:	617b      	str	r3, [r7, #20]
 8005942:	e010      	b.n	8005966 <process_control_request+0x4ca>
  } else if ( drvid < TOTAL_DRIVER_COUNT && BUILTIN_DRIVER_COUNT > 0 ){
 8005944:	4b2b      	ldr	r3, [pc, #172]	@ (80059f4 <process_control_request+0x558>)
 8005946:	781b      	ldrb	r3, [r3, #0]
 8005948:	1c9a      	adds	r2, r3, #2
 800594a:	7efb      	ldrb	r3, [r7, #27]
 800594c:	429a      	cmp	r2, r3
 800594e:	db0a      	blt.n	8005966 <process_control_request+0x4ca>
    driver = &_usbd_driver[drvid - _app_driver_count];
 8005950:	7efb      	ldrb	r3, [r7, #27]
 8005952:	4a28      	ldr	r2, [pc, #160]	@ (80059f4 <process_control_request+0x558>)
 8005954:	7812      	ldrb	r2, [r2, #0]
 8005956:	1a9a      	subs	r2, r3, r2
 8005958:	4613      	mov	r3, r2
 800595a:	005b      	lsls	r3, r3, #1
 800595c:	4413      	add	r3, r2
 800595e:	00db      	lsls	r3, r3, #3
 8005960:	4a26      	ldr	r2, [pc, #152]	@ (80059fc <process_control_request+0x560>)
 8005962:	4413      	add	r3, r2
 8005964:	617b      	str	r3, [r7, #20]
  return driver;
 8005966:	697b      	ldr	r3, [r7, #20]
      usbd_class_driver_t const * driver = get_driver(_usbd_dev.ep2drv[ep_num][ep_dir]);
 8005968:	663b      	str	r3, [r7, #96]	@ 0x60

      if ( TUSB_REQ_TYPE_STANDARD != p_request->bmRequestType_bit.type )
 800596a:	683b      	ldr	r3, [r7, #0]
 800596c:	781b      	ldrb	r3, [r3, #0]
 800596e:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8005972:	b2db      	uxtb	r3, r3
 8005974:	2b00      	cmp	r3, #0
 8005976:	d00c      	beq.n	8005992 <process_control_request+0x4f6>
      {
        // Forward class request to its driver
        TU_VERIFY(driver);
 8005978:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800597a:	2b00      	cmp	r3, #0
 800597c:	d101      	bne.n	8005982 <process_control_request+0x4e6>
 800597e:	2300      	movs	r3, #0
 8005980:	e079      	b.n	8005a76 <process_control_request+0x5da>
        return invoke_class_control(rhport, driver, p_request);
 8005982:	79fb      	ldrb	r3, [r7, #7]
 8005984:	683a      	ldr	r2, [r7, #0]
 8005986:	6e39      	ldr	r1, [r7, #96]	@ 0x60
 8005988:	4618      	mov	r0, r3
 800598a:	f7ff fd6f 	bl	800546c <invoke_class_control>
 800598e:	4603      	mov	r3, r0
 8005990:	e071      	b.n	8005a76 <process_control_request+0x5da>
      }
      else
      {
        // Handle STD request to endpoint
        switch ( p_request->bRequest )
 8005992:	683b      	ldr	r3, [r7, #0]
 8005994:	785b      	ldrb	r3, [r3, #1]
 8005996:	2b03      	cmp	r3, #3
 8005998:	d017      	beq.n	80059ca <process_control_request+0x52e>
 800599a:	2b03      	cmp	r3, #3
 800599c:	dc51      	bgt.n	8005a42 <process_control_request+0x5a6>
 800599e:	2b00      	cmp	r3, #0
 80059a0:	d002      	beq.n	80059a8 <process_control_request+0x50c>
 80059a2:	2b01      	cmp	r3, #1
 80059a4:	d011      	beq.n	80059ca <process_control_request+0x52e>
 80059a6:	e04c      	b.n	8005a42 <process_control_request+0x5a6>
        {
          case TUSB_REQ_GET_STATUS:
          {
            uint16_t status = usbd_edpt_stalled(rhport, ep_addr) ? 0x0001 : 0x0000;
 80059a8:	f897 2067 	ldrb.w	r2, [r7, #103]	@ 0x67
 80059ac:	79fb      	ldrb	r3, [r7, #7]
 80059ae:	4611      	mov	r1, r2
 80059b0:	4618      	mov	r0, r3
 80059b2:	f000 fe57 	bl	8006664 <usbd_edpt_stalled>
 80059b6:	4603      	mov	r3, r0
 80059b8:	81bb      	strh	r3, [r7, #12]
            tud_control_xfer(rhport, p_request, &status, 2);
 80059ba:	f107 020c 	add.w	r2, r7, #12
 80059be:	79f8      	ldrb	r0, [r7, #7]
 80059c0:	2302      	movs	r3, #2
 80059c2:	6839      	ldr	r1, [r7, #0]
 80059c4:	f000 ff16 	bl	80067f4 <tud_control_xfer>
          }
          break;
 80059c8:	e047      	b.n	8005a5a <process_control_request+0x5be>

          case TUSB_REQ_CLEAR_FEATURE:
          case TUSB_REQ_SET_FEATURE:
          {
            if ( TUSB_REQ_FEATURE_EDPT_HALT == p_request->wValue )
 80059ca:	683b      	ldr	r3, [r7, #0]
 80059cc:	885b      	ldrh	r3, [r3, #2]
 80059ce:	b29b      	uxth	r3, r3
 80059d0:	2b00      	cmp	r3, #0
 80059d2:	d11c      	bne.n	8005a0e <process_control_request+0x572>
            {
              if ( TUSB_REQ_CLEAR_FEATURE ==  p_request->bRequest )
 80059d4:	683b      	ldr	r3, [r7, #0]
 80059d6:	785b      	ldrb	r3, [r3, #1]
 80059d8:	2b01      	cmp	r3, #1
 80059da:	d111      	bne.n	8005a00 <process_control_request+0x564>
              {
                usbd_edpt_clear_stall(rhport, ep_addr);
 80059dc:	f897 2067 	ldrb.w	r2, [r7, #103]	@ 0x67
 80059e0:	79fb      	ldrb	r3, [r7, #7]
 80059e2:	4611      	mov	r1, r2
 80059e4:	4618      	mov	r0, r3
 80059e6:	f000 fdf1 	bl	80065cc <usbd_edpt_clear_stall>
 80059ea:	e010      	b.n	8005a0e <process_control_request+0x572>
 80059ec:	24001d10 	.word	0x24001d10
 80059f0:	e000edf0 	.word	0xe000edf0
 80059f4:	24001d4c 	.word	0x24001d4c
 80059f8:	24001d48 	.word	0x24001d48
 80059fc:	0801bf18 	.word	0x0801bf18
              }else
              {
                usbd_edpt_stall(rhport, ep_addr);
 8005a00:	f897 2067 	ldrb.w	r2, [r7, #103]	@ 0x67
 8005a04:	79fb      	ldrb	r3, [r7, #7]
 8005a06:	4611      	mov	r1, r2
 8005a08:	4618      	mov	r0, r3
 8005a0a:	f000 fd93 	bl	8006534 <usbd_edpt_stall>
              }
            }

            if (driver)
 8005a0e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8005a10:	2b00      	cmp	r3, #0
 8005a12:	d021      	beq.n	8005a58 <process_control_request+0x5bc>
              // Some classes such as USBTMC needs to clear/re-init its buffer when receiving CLEAR_FEATURE request
              // We will also forward std request targeted endpoint to class drivers as well

              // STD request must always be ACKed regardless of driver returned value
              // Also clear complete callback if driver set since it can also stall the request.
              (void) invoke_class_control(rhport, driver, p_request);
 8005a14:	79fb      	ldrb	r3, [r7, #7]
 8005a16:	683a      	ldr	r2, [r7, #0]
 8005a18:	6e39      	ldr	r1, [r7, #96]	@ 0x60
 8005a1a:	4618      	mov	r0, r3
 8005a1c:	f7ff fd26 	bl	800546c <invoke_class_control>
              usbd_control_set_complete_callback(NULL);
 8005a20:	2000      	movs	r0, #0
 8005a22:	f000 ff63 	bl	80068ec <usbd_control_set_complete_callback>

              // skip ZLP status if driver already did that
              if ( !_usbd_dev.ep_status[0][TUSB_DIR_IN].busy ) tud_control_status(rhport, p_request);
 8005a26:	4b16      	ldr	r3, [pc, #88]	@ (8005a80 <process_control_request+0x5e4>)
 8005a28:	f893 3026 	ldrb.w	r3, [r3, #38]	@ 0x26
 8005a2c:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8005a30:	b2db      	uxtb	r3, r3
 8005a32:	2b00      	cmp	r3, #0
 8005a34:	d110      	bne.n	8005a58 <process_control_request+0x5bc>
 8005a36:	79fb      	ldrb	r3, [r7, #7]
 8005a38:	6839      	ldr	r1, [r7, #0]
 8005a3a:	4618      	mov	r0, r3
 8005a3c:	f000 fe68 	bl	8006710 <tud_control_status>
            }
          }
          break;
 8005a40:	e00a      	b.n	8005a58 <process_control_request+0x5bc>

          // Unknown/Unsupported request
          default: TU_BREAKPOINT(); return false;
 8005a42:	4b10      	ldr	r3, [pc, #64]	@ (8005a84 <process_control_request+0x5e8>)
 8005a44:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8005a46:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8005a48:	681b      	ldr	r3, [r3, #0]
 8005a4a:	f003 0301 	and.w	r3, r3, #1
 8005a4e:	2b00      	cmp	r3, #0
 8005a50:	d000      	beq.n	8005a54 <process_control_request+0x5b8>
 8005a52:	be00      	bkpt	0x0000
 8005a54:	2300      	movs	r3, #0
 8005a56:	e00e      	b.n	8005a76 <process_control_request+0x5da>
          break;
 8005a58:	bf00      	nop
        }
      }
    }
    break;
 8005a5a:	e00b      	b.n	8005a74 <process_control_request+0x5d8>

    // Unknown recipient
    default: TU_BREAKPOINT(); return false;
 8005a5c:	4b09      	ldr	r3, [pc, #36]	@ (8005a84 <process_control_request+0x5e8>)
 8005a5e:	637b      	str	r3, [r7, #52]	@ 0x34
 8005a60:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005a62:	681b      	ldr	r3, [r3, #0]
 8005a64:	f003 0301 	and.w	r3, r3, #1
 8005a68:	2b00      	cmp	r3, #0
 8005a6a:	d000      	beq.n	8005a6e <process_control_request+0x5d2>
 8005a6c:	be00      	bkpt	0x0000
 8005a6e:	2300      	movs	r3, #0
 8005a70:	e001      	b.n	8005a76 <process_control_request+0x5da>
    break;
 8005a72:	bf00      	nop
  }

  return true;
 8005a74:	2301      	movs	r3, #1
}
 8005a76:	4618      	mov	r0, r3
 8005a78:	3768      	adds	r7, #104	@ 0x68
 8005a7a:	46bd      	mov	sp, r7
 8005a7c:	bd80      	pop	{r7, pc}
 8005a7e:	bf00      	nop
 8005a80:	24001d10 	.word	0x24001d10
 8005a84:	e000edf0 	.word	0xe000edf0

08005a88 <process_set_config>:

// Process Set Configure Request
// This function parse configuration descriptor & open drivers accordingly
static bool process_set_config(uint8_t rhport, uint8_t cfg_num)
{
 8005a88:	b580      	push	{r7, lr}
 8005a8a:	b096      	sub	sp, #88	@ 0x58
 8005a8c:	af00      	add	r7, sp, #0
 8005a8e:	4603      	mov	r3, r0
 8005a90:	460a      	mov	r2, r1
 8005a92:	71fb      	strb	r3, [r7, #7]
 8005a94:	4613      	mov	r3, r2
 8005a96:	71bb      	strb	r3, [r7, #6]
  // index is cfg_num-1
  tusb_desc_configuration_t const * desc_cfg = (tusb_desc_configuration_t const *) tud_descriptor_configuration_cb(cfg_num-1);
 8005a98:	79bb      	ldrb	r3, [r7, #6]
 8005a9a:	3b01      	subs	r3, #1
 8005a9c:	b2db      	uxtb	r3, r3
 8005a9e:	4618      	mov	r0, r3
 8005aa0:	f7fc f8ee 	bl	8001c80 <tud_descriptor_configuration_cb>
 8005aa4:	64f8      	str	r0, [r7, #76]	@ 0x4c
  TU_ASSERT(desc_cfg != NULL && desc_cfg->bDescriptorType == TUSB_DESC_CONFIGURATION);
 8005aa6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005aa8:	2b00      	cmp	r3, #0
 8005aaa:	d003      	beq.n	8005ab4 <process_set_config+0x2c>
 8005aac:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005aae:	785b      	ldrb	r3, [r3, #1]
 8005ab0:	2b02      	cmp	r3, #2
 8005ab2:	d00a      	beq.n	8005aca <process_set_config+0x42>
 8005ab4:	4b8a      	ldr	r3, [pc, #552]	@ (8005ce0 <process_set_config+0x258>)
 8005ab6:	623b      	str	r3, [r7, #32]
 8005ab8:	6a3b      	ldr	r3, [r7, #32]
 8005aba:	681b      	ldr	r3, [r3, #0]
 8005abc:	f003 0301 	and.w	r3, r3, #1
 8005ac0:	2b00      	cmp	r3, #0
 8005ac2:	d000      	beq.n	8005ac6 <process_set_config+0x3e>
 8005ac4:	be00      	bkpt	0x0000
 8005ac6:	2300      	movs	r3, #0
 8005ac8:	e106      	b.n	8005cd8 <process_set_config+0x250>

  // Parse configuration descriptor
  _usbd_dev.remote_wakeup_support = (desc_cfg->bmAttributes & TUSB_DESC_CONFIG_ATT_REMOTE_WAKEUP) ? 1u : 0u;
 8005aca:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005acc:	79db      	ldrb	r3, [r3, #7]
 8005ace:	115b      	asrs	r3, r3, #5
 8005ad0:	f003 0301 	and.w	r3, r3, #1
 8005ad4:	b2d9      	uxtb	r1, r3
 8005ad6:	4a83      	ldr	r2, [pc, #524]	@ (8005ce4 <process_set_config+0x25c>)
 8005ad8:	7813      	ldrb	r3, [r2, #0]
 8005ada:	f361 1304 	bfi	r3, r1, #4, #1
 8005ade:	7013      	strb	r3, [r2, #0]
  _usbd_dev.self_powered          = (desc_cfg->bmAttributes & TUSB_DESC_CONFIG_ATT_SELF_POWERED ) ? 1u : 0u;
 8005ae0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005ae2:	79db      	ldrb	r3, [r3, #7]
 8005ae4:	119b      	asrs	r3, r3, #6
 8005ae6:	f003 0301 	and.w	r3, r3, #1
 8005aea:	b2d9      	uxtb	r1, r3
 8005aec:	4a7d      	ldr	r2, [pc, #500]	@ (8005ce4 <process_set_config+0x25c>)
 8005aee:	7813      	ldrb	r3, [r2, #0]
 8005af0:	f361 1345 	bfi	r3, r1, #5, #1
 8005af4:	7013      	strb	r3, [r2, #0]

  // Parse interface descriptor
  uint8_t const * p_desc   = ((uint8_t const*) desc_cfg) + sizeof(tusb_desc_configuration_t);
 8005af6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005af8:	3309      	adds	r3, #9
 8005afa:	657b      	str	r3, [r7, #84]	@ 0x54
  uint8_t const * desc_end = ((uint8_t const*) desc_cfg) + tu_le16toh(desc_cfg->wTotalLength);
 8005afc:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005afe:	885b      	ldrh	r3, [r3, #2]
 8005b00:	b29b      	uxth	r3, r3
 8005b02:	461a      	mov	r2, r3
 8005b04:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005b06:	4413      	add	r3, r2
 8005b08:	64bb      	str	r3, [r7, #72]	@ 0x48

  while( p_desc < desc_end )
 8005b0a:	e0df      	b.n	8005ccc <process_set_config+0x244>
  {
    uint8_t assoc_itf_count = 1;
 8005b0c:	2301      	movs	r3, #1
 8005b0e:	f887 3053 	strb.w	r3, [r7, #83]	@ 0x53
 8005b12:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005b14:	61fb      	str	r3, [r7, #28]
  return ((uint8_t const*) desc)[DESC_OFFSET_TYPE];
 8005b16:	69fb      	ldr	r3, [r7, #28]
 8005b18:	3301      	adds	r3, #1
 8005b1a:	781b      	ldrb	r3, [r3, #0]

    // Class will always starts with Interface Association (if any) and then Interface descriptor
    if ( TUSB_DESC_INTERFACE_ASSOCIATION == tu_desc_type(p_desc) )
 8005b1c:	2b0b      	cmp	r3, #11
 8005b1e:	d10f      	bne.n	8005b40 <process_set_config+0xb8>
    {
      tusb_desc_interface_assoc_t const * desc_iad = (tusb_desc_interface_assoc_t const *) p_desc;
 8005b20:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005b22:	647b      	str	r3, [r7, #68]	@ 0x44
      assoc_itf_count = desc_iad->bInterfaceCount;
 8005b24:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005b26:	78db      	ldrb	r3, [r3, #3]
 8005b28:	f887 3053 	strb.w	r3, [r7, #83]	@ 0x53
 8005b2c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005b2e:	61bb      	str	r3, [r7, #24]
  uint8_t const* desc8 = (uint8_t const*) desc;
 8005b30:	69bb      	ldr	r3, [r7, #24]
 8005b32:	617b      	str	r3, [r7, #20]
  return desc8 + desc8[DESC_OFFSET_LEN];
 8005b34:	697b      	ldr	r3, [r7, #20]
 8005b36:	781b      	ldrb	r3, [r3, #0]
 8005b38:	461a      	mov	r2, r3
 8005b3a:	697b      	ldr	r3, [r7, #20]
 8005b3c:	4413      	add	r3, r2

      p_desc = tu_desc_next(p_desc); // next to Interface
 8005b3e:	657b      	str	r3, [r7, #84]	@ 0x54
 8005b40:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005b42:	613b      	str	r3, [r7, #16]
  return ((uint8_t const*) desc)[DESC_OFFSET_TYPE];
 8005b44:	693b      	ldr	r3, [r7, #16]
 8005b46:	3301      	adds	r3, #1
 8005b48:	781b      	ldrb	r3, [r3, #0]
      // IAD's first interface number and class should match with opened interface
      //TU_ASSERT(desc_iad->bFirstInterface == desc_itf->bInterfaceNumber &&
      //          desc_iad->bFunctionClass  == desc_itf->bInterfaceClass);
    }

    TU_ASSERT( TUSB_DESC_INTERFACE == tu_desc_type(p_desc) );
 8005b4a:	2b04      	cmp	r3, #4
 8005b4c:	d00a      	beq.n	8005b64 <process_set_config+0xdc>
 8005b4e:	4b64      	ldr	r3, [pc, #400]	@ (8005ce0 <process_set_config+0x258>)
 8005b50:	627b      	str	r3, [r7, #36]	@ 0x24
 8005b52:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005b54:	681b      	ldr	r3, [r3, #0]
 8005b56:	f003 0301 	and.w	r3, r3, #1
 8005b5a:	2b00      	cmp	r3, #0
 8005b5c:	d000      	beq.n	8005b60 <process_set_config+0xd8>
 8005b5e:	be00      	bkpt	0x0000
 8005b60:	2300      	movs	r3, #0
 8005b62:	e0b9      	b.n	8005cd8 <process_set_config+0x250>
    tusb_desc_interface_t const * desc_itf = (tusb_desc_interface_t const*) p_desc;
 8005b64:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005b66:	643b      	str	r3, [r7, #64]	@ 0x40

    // Find driver for this interface
    uint16_t const remaining_len = (uint16_t) (desc_end-p_desc);
 8005b68:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8005b6a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005b6c:	1ad3      	subs	r3, r2, r3
 8005b6e:	87fb      	strh	r3, [r7, #62]	@ 0x3e
    uint8_t drv_id;
    for (drv_id = 0; drv_id < TOTAL_DRIVER_COUNT; drv_id++)
 8005b70:	2300      	movs	r3, #0
 8005b72:	f887 3052 	strb.w	r3, [r7, #82]	@ 0x52
 8005b76:	e08f      	b.n	8005c98 <process_set_config+0x210>
 8005b78:	f897 3052 	ldrb.w	r3, [r7, #82]	@ 0x52
 8005b7c:	73fb      	strb	r3, [r7, #15]
  usbd_class_driver_t const * driver = NULL;
 8005b7e:	2300      	movs	r3, #0
 8005b80:	60bb      	str	r3, [r7, #8]
  if ( drvid < _app_driver_count ) {
 8005b82:	4b59      	ldr	r3, [pc, #356]	@ (8005ce8 <process_set_config+0x260>)
 8005b84:	781b      	ldrb	r3, [r3, #0]
 8005b86:	7bfa      	ldrb	r2, [r7, #15]
 8005b88:	429a      	cmp	r2, r3
 8005b8a:	d209      	bcs.n	8005ba0 <process_set_config+0x118>
    driver = &_app_driver[drvid];
 8005b8c:	4b57      	ldr	r3, [pc, #348]	@ (8005cec <process_set_config+0x264>)
 8005b8e:	6819      	ldr	r1, [r3, #0]
 8005b90:	7bfa      	ldrb	r2, [r7, #15]
 8005b92:	4613      	mov	r3, r2
 8005b94:	005b      	lsls	r3, r3, #1
 8005b96:	4413      	add	r3, r2
 8005b98:	00db      	lsls	r3, r3, #3
 8005b9a:	440b      	add	r3, r1
 8005b9c:	60bb      	str	r3, [r7, #8]
 8005b9e:	e010      	b.n	8005bc2 <process_set_config+0x13a>
  } else if ( drvid < TOTAL_DRIVER_COUNT && BUILTIN_DRIVER_COUNT > 0 ){
 8005ba0:	4b51      	ldr	r3, [pc, #324]	@ (8005ce8 <process_set_config+0x260>)
 8005ba2:	781b      	ldrb	r3, [r3, #0]
 8005ba4:	1c9a      	adds	r2, r3, #2
 8005ba6:	7bfb      	ldrb	r3, [r7, #15]
 8005ba8:	429a      	cmp	r2, r3
 8005baa:	db0a      	blt.n	8005bc2 <process_set_config+0x13a>
    driver = &_usbd_driver[drvid - _app_driver_count];
 8005bac:	7bfb      	ldrb	r3, [r7, #15]
 8005bae:	4a4e      	ldr	r2, [pc, #312]	@ (8005ce8 <process_set_config+0x260>)
 8005bb0:	7812      	ldrb	r2, [r2, #0]
 8005bb2:	1a9a      	subs	r2, r3, r2
 8005bb4:	4613      	mov	r3, r2
 8005bb6:	005b      	lsls	r3, r3, #1
 8005bb8:	4413      	add	r3, r2
 8005bba:	00db      	lsls	r3, r3, #3
 8005bbc:	4a4c      	ldr	r2, [pc, #304]	@ (8005cf0 <process_set_config+0x268>)
 8005bbe:	4413      	add	r3, r2
 8005bc0:	60bb      	str	r3, [r7, #8]
  return driver;
 8005bc2:	68bb      	ldr	r3, [r7, #8]
    {
      usbd_class_driver_t const *driver = get_driver(drv_id);
 8005bc4:	63bb      	str	r3, [r7, #56]	@ 0x38
      TU_ASSERT(driver);
 8005bc6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005bc8:	2b00      	cmp	r3, #0
 8005bca:	d10a      	bne.n	8005be2 <process_set_config+0x15a>
 8005bcc:	4b44      	ldr	r3, [pc, #272]	@ (8005ce0 <process_set_config+0x258>)
 8005bce:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005bd0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005bd2:	681b      	ldr	r3, [r3, #0]
 8005bd4:	f003 0301 	and.w	r3, r3, #1
 8005bd8:	2b00      	cmp	r3, #0
 8005bda:	d000      	beq.n	8005bde <process_set_config+0x156>
 8005bdc:	be00      	bkpt	0x0000
 8005bde:	2300      	movs	r3, #0
 8005be0:	e07a      	b.n	8005cd8 <process_set_config+0x250>
      uint16_t const drv_len = driver->open(rhport, desc_itf, remaining_len);
 8005be2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005be4:	689b      	ldr	r3, [r3, #8]
 8005be6:	8ffa      	ldrh	r2, [r7, #62]	@ 0x3e
 8005be8:	79f8      	ldrb	r0, [r7, #7]
 8005bea:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8005bec:	4798      	blx	r3
 8005bee:	4603      	mov	r3, r0
 8005bf0:	86fb      	strh	r3, [r7, #54]	@ 0x36

      if ( (sizeof(tusb_desc_interface_t) <= drv_len)  && (drv_len <= remaining_len) )
 8005bf2:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8005bf4:	2b08      	cmp	r3, #8
 8005bf6:	d94a      	bls.n	8005c8e <process_set_config+0x206>
 8005bf8:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 8005bfa:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 8005bfc:	429a      	cmp	r2, r3
 8005bfe:	d846      	bhi.n	8005c8e <process_set_config+0x206>
        // Open successfully
        TU_LOG_USBD("  %s opened\r\n", driver->name);

        // Some drivers use 2 or more interfaces but may not have IAD e.g MIDI (always) or
        // BTH (even CDC) with class in device descriptor (single interface)
        if ( assoc_itf_count == 1)
 8005c00:	f897 3053 	ldrb.w	r3, [r7, #83]	@ 0x53
 8005c04:	2b01      	cmp	r3, #1
 8005c06:	d107      	bne.n	8005c18 <process_set_config+0x190>
        {
          #if CFG_TUD_CDC
          if ( driver->open == cdcd_open ) assoc_itf_count = 2;
 8005c08:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005c0a:	689b      	ldr	r3, [r3, #8]
 8005c0c:	4a39      	ldr	r2, [pc, #228]	@ (8005cf4 <process_set_config+0x26c>)
 8005c0e:	4293      	cmp	r3, r2
 8005c10:	d102      	bne.n	8005c18 <process_set_config+0x190>
 8005c12:	2302      	movs	r3, #2
 8005c14:	f887 3053 	strb.w	r3, [r7, #83]	@ 0x53
          if ( driver->open == btd_open ) assoc_itf_count = 2;
          #endif
        }

        // bind (associated) interfaces to found driver
        for(uint8_t i=0; i<assoc_itf_count; i++)
 8005c18:	2300      	movs	r3, #0
 8005c1a:	f887 3051 	strb.w	r3, [r7, #81]	@ 0x51
 8005c1e:	e024      	b.n	8005c6a <process_set_config+0x1e2>
        {
          uint8_t const itf_num = desc_itf->bInterfaceNumber+i;
 8005c20:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005c22:	789a      	ldrb	r2, [r3, #2]
 8005c24:	f897 3051 	ldrb.w	r3, [r7, #81]	@ 0x51
 8005c28:	4413      	add	r3, r2
 8005c2a:	f887 3035 	strb.w	r3, [r7, #53]	@ 0x35

          // Interface number must not be used already
          TU_ASSERT(DRVID_INVALID == _usbd_dev.itf2drv[itf_num]);
 8005c2e:	f897 3035 	ldrb.w	r3, [r7, #53]	@ 0x35
 8005c32:	4a2c      	ldr	r2, [pc, #176]	@ (8005ce4 <process_set_config+0x25c>)
 8005c34:	4413      	add	r3, r2
 8005c36:	78db      	ldrb	r3, [r3, #3]
 8005c38:	2bff      	cmp	r3, #255	@ 0xff
 8005c3a:	d00a      	beq.n	8005c52 <process_set_config+0x1ca>
 8005c3c:	4b28      	ldr	r3, [pc, #160]	@ (8005ce0 <process_set_config+0x258>)
 8005c3e:	633b      	str	r3, [r7, #48]	@ 0x30
 8005c40:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005c42:	681b      	ldr	r3, [r3, #0]
 8005c44:	f003 0301 	and.w	r3, r3, #1
 8005c48:	2b00      	cmp	r3, #0
 8005c4a:	d000      	beq.n	8005c4e <process_set_config+0x1c6>
 8005c4c:	be00      	bkpt	0x0000
 8005c4e:	2300      	movs	r3, #0
 8005c50:	e042      	b.n	8005cd8 <process_set_config+0x250>
          _usbd_dev.itf2drv[itf_num] = drv_id;
 8005c52:	f897 3035 	ldrb.w	r3, [r7, #53]	@ 0x35
 8005c56:	4a23      	ldr	r2, [pc, #140]	@ (8005ce4 <process_set_config+0x25c>)
 8005c58:	4413      	add	r3, r2
 8005c5a:	f897 2052 	ldrb.w	r2, [r7, #82]	@ 0x52
 8005c5e:	70da      	strb	r2, [r3, #3]
        for(uint8_t i=0; i<assoc_itf_count; i++)
 8005c60:	f897 3051 	ldrb.w	r3, [r7, #81]	@ 0x51
 8005c64:	3301      	adds	r3, #1
 8005c66:	f887 3051 	strb.w	r3, [r7, #81]	@ 0x51
 8005c6a:	f897 2051 	ldrb.w	r2, [r7, #81]	@ 0x51
 8005c6e:	f897 3053 	ldrb.w	r3, [r7, #83]	@ 0x53
 8005c72:	429a      	cmp	r2, r3
 8005c74:	d3d4      	bcc.n	8005c20 <process_set_config+0x198>
        }

        // bind all endpoints to found driver
        tu_edpt_bind_driver(_usbd_dev.ep2drv, desc_itf, drv_len, drv_id);
 8005c76:	f897 3052 	ldrb.w	r3, [r7, #82]	@ 0x52
 8005c7a:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 8005c7c:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8005c7e:	481e      	ldr	r0, [pc, #120]	@ (8005cf8 <process_set_config+0x270>)
 8005c80:	f003 f83c 	bl	8008cfc <tu_edpt_bind_driver>

        // next Interface
        p_desc += drv_len;
 8005c84:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8005c86:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8005c88:	4413      	add	r3, r2
 8005c8a:	657b      	str	r3, [r7, #84]	@ 0x54

        break; // exit driver find loop
 8005c8c:	e00c      	b.n	8005ca8 <process_set_config+0x220>
    for (drv_id = 0; drv_id < TOTAL_DRIVER_COUNT; drv_id++)
 8005c8e:	f897 3052 	ldrb.w	r3, [r7, #82]	@ 0x52
 8005c92:	3301      	adds	r3, #1
 8005c94:	f887 3052 	strb.w	r3, [r7, #82]	@ 0x52
 8005c98:	4b13      	ldr	r3, [pc, #76]	@ (8005ce8 <process_set_config+0x260>)
 8005c9a:	781b      	ldrb	r3, [r3, #0]
 8005c9c:	1c9a      	adds	r2, r3, #2
 8005c9e:	f897 3052 	ldrb.w	r3, [r7, #82]	@ 0x52
 8005ca2:	429a      	cmp	r2, r3
 8005ca4:	f6bf af68 	bge.w	8005b78 <process_set_config+0xf0>
      }
    }

    // Failed if there is no supported drivers
    TU_ASSERT(drv_id < TOTAL_DRIVER_COUNT);
 8005ca8:	4b0f      	ldr	r3, [pc, #60]	@ (8005ce8 <process_set_config+0x260>)
 8005caa:	781b      	ldrb	r3, [r3, #0]
 8005cac:	1c9a      	adds	r2, r3, #2
 8005cae:	f897 3052 	ldrb.w	r3, [r7, #82]	@ 0x52
 8005cb2:	429a      	cmp	r2, r3
 8005cb4:	da0a      	bge.n	8005ccc <process_set_config+0x244>
 8005cb6:	4b0a      	ldr	r3, [pc, #40]	@ (8005ce0 <process_set_config+0x258>)
 8005cb8:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005cba:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005cbc:	681b      	ldr	r3, [r3, #0]
 8005cbe:	f003 0301 	and.w	r3, r3, #1
 8005cc2:	2b00      	cmp	r3, #0
 8005cc4:	d000      	beq.n	8005cc8 <process_set_config+0x240>
 8005cc6:	be00      	bkpt	0x0000
 8005cc8:	2300      	movs	r3, #0
 8005cca:	e005      	b.n	8005cd8 <process_set_config+0x250>
  while( p_desc < desc_end )
 8005ccc:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8005cce:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005cd0:	429a      	cmp	r2, r3
 8005cd2:	f4ff af1b 	bcc.w	8005b0c <process_set_config+0x84>
  }

  return true;
 8005cd6:	2301      	movs	r3, #1
}
 8005cd8:	4618      	mov	r0, r3
 8005cda:	3758      	adds	r7, #88	@ 0x58
 8005cdc:	46bd      	mov	sp, r7
 8005cde:	bd80      	pop	{r7, pc}
 8005ce0:	e000edf0 	.word	0xe000edf0
 8005ce4:	24001d10 	.word	0x24001d10
 8005ce8:	24001d4c 	.word	0x24001d4c
 8005cec:	24001d48 	.word	0x24001d48
 8005cf0:	0801bf18 	.word	0x0801bf18
 8005cf4:	0800217d 	.word	0x0800217d
 8005cf8:	24001d23 	.word	0x24001d23

08005cfc <process_get_descriptor>:

// return descriptor's buffer and update desc_len
static bool process_get_descriptor(uint8_t rhport, tusb_control_request_t const * p_request)
{
 8005cfc:	b580      	push	{r7, lr}
 8005cfe:	b094      	sub	sp, #80	@ 0x50
 8005d00:	af00      	add	r7, sp, #0
 8005d02:	4603      	mov	r3, r0
 8005d04:	6039      	str	r1, [r7, #0]
 8005d06:	71fb      	strb	r3, [r7, #7]
  tusb_desc_type_t const desc_type = (tusb_desc_type_t) tu_u16_high(p_request->wValue);
 8005d08:	683b      	ldr	r3, [r7, #0]
 8005d0a:	885b      	ldrh	r3, [r3, #2]
 8005d0c:	b29b      	uxth	r3, r3
 8005d0e:	84bb      	strh	r3, [r7, #36]	@ 0x24
TU_ATTR_ALWAYS_INLINE static inline uint8_t tu_u16_high(uint16_t ui16) { return TU_U16_HIGH(ui16); }
 8005d10:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8005d12:	0a1b      	lsrs	r3, r3, #8
 8005d14:	b29b      	uxth	r3, r3
 8005d16:	b2db      	uxtb	r3, r3
 8005d18:	f887 304b 	strb.w	r3, [r7, #75]	@ 0x4b
  uint8_t const desc_index = tu_u16_low( p_request->wValue );
 8005d1c:	683b      	ldr	r3, [r7, #0]
 8005d1e:	885b      	ldrh	r3, [r3, #2]
 8005d20:	b29b      	uxth	r3, r3
 8005d22:	84fb      	strh	r3, [r7, #38]	@ 0x26
TU_ATTR_ALWAYS_INLINE static inline uint8_t tu_u16_low (uint16_t ui16) { return TU_U16_LOW(ui16); }
 8005d24:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8005d26:	b2db      	uxtb	r3, r3
 8005d28:	f887 304a 	strb.w	r3, [r7, #74]	@ 0x4a

  switch(desc_type)
 8005d2c:	f897 304b 	ldrb.w	r3, [r7, #75]	@ 0x4b
 8005d30:	3b01      	subs	r3, #1
 8005d32:	2b0e      	cmp	r3, #14
 8005d34:	f200 80ba 	bhi.w	8005eac <process_get_descriptor+0x1b0>
 8005d38:	a201      	add	r2, pc, #4	@ (adr r2, 8005d40 <process_get_descriptor+0x44>)
 8005d3a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005d3e:	bf00      	nop
 8005d40:	08005d7d 	.word	0x08005d7d
 8005d44:	08005de1 	.word	0x08005de1
 8005d48:	08005e49 	.word	0x08005e49
 8005d4c:	08005ead 	.word	0x08005ead
 8005d50:	08005ead 	.word	0x08005ead
 8005d54:	08005e7d 	.word	0x08005e7d
 8005d58:	08005de1 	.word	0x08005de1
 8005d5c:	08005ead 	.word	0x08005ead
 8005d60:	08005ead 	.word	0x08005ead
 8005d64:	08005ead 	.word	0x08005ead
 8005d68:	08005ead 	.word	0x08005ead
 8005d6c:	08005ead 	.word	0x08005ead
 8005d70:	08005ead 	.word	0x08005ead
 8005d74:	08005ead 	.word	0x08005ead
 8005d78:	08005d93 	.word	0x08005d93
  {
    case TUSB_DESC_DEVICE:
    {
      TU_LOG_USBD(" Device\r\n");

      void* desc_device = (void*) (uintptr_t) tud_descriptor_device_cb();
 8005d7c:	f7fb ff76 	bl	8001c6c <tud_descriptor_device_cb>
 8005d80:	62b8      	str	r0, [r7, #40]	@ 0x28
        mod_request.wLength = CFG_TUD_ENDPOINT0_SIZE;

        return tud_control_xfer(rhport, &mod_request, desc_device, CFG_TUD_ENDPOINT0_SIZE);
      }else
      {
        return tud_control_xfer(rhport, p_request, desc_device, sizeof(tusb_desc_device_t));
 8005d82:	79f8      	ldrb	r0, [r7, #7]
 8005d84:	2312      	movs	r3, #18
 8005d86:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8005d88:	6839      	ldr	r1, [r7, #0]
 8005d8a:	f000 fd33 	bl	80067f4 <tud_control_xfer>
 8005d8e:	4603      	mov	r3, r0
 8005d90:	e08d      	b.n	8005eae <process_get_descriptor+0x1b2>
    case TUSB_DESC_BOS:
    {
      TU_LOG_USBD(" BOS\r\n");

      // requested by host if USB > 2.0 ( i.e 2.1 or 3.x )
      if (!tud_descriptor_bos_cb) return false;
 8005d92:	4b49      	ldr	r3, [pc, #292]	@ (8005eb8 <process_get_descriptor+0x1bc>)
 8005d94:	2b00      	cmp	r3, #0
 8005d96:	d101      	bne.n	8005d9c <process_get_descriptor+0xa0>
 8005d98:	2300      	movs	r3, #0
 8005d9a:	e088      	b.n	8005eae <process_get_descriptor+0x1b2>

      uintptr_t desc_bos = (uintptr_t) tud_descriptor_bos_cb();
 8005d9c:	f3af 8000 	nop.w
 8005da0:	4603      	mov	r3, r0
 8005da2:	647b      	str	r3, [r7, #68]	@ 0x44
      TU_ASSERT(desc_bos);
 8005da4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005da6:	2b00      	cmp	r3, #0
 8005da8:	d10a      	bne.n	8005dc0 <process_get_descriptor+0xc4>
 8005daa:	4b44      	ldr	r3, [pc, #272]	@ (8005ebc <process_get_descriptor+0x1c0>)
 8005dac:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005dae:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005db0:	681b      	ldr	r3, [r3, #0]
 8005db2:	f003 0301 	and.w	r3, r3, #1
 8005db6:	2b00      	cmp	r3, #0
 8005db8:	d000      	beq.n	8005dbc <process_get_descriptor+0xc0>
 8005dba:	be00      	bkpt	0x0000
 8005dbc:	2300      	movs	r3, #0
 8005dbe:	e076      	b.n	8005eae <process_get_descriptor+0x1b2>

      // Use offsetof to avoid pointer to the odd/misaligned address
      uint16_t const total_len = tu_le16toh( tu_unaligned_read16((const void*) (desc_bos + offsetof(tusb_desc_bos_t, wTotalLength))) );
 8005dc0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005dc2:	3302      	adds	r3, #2
 8005dc4:	623b      	str	r3, [r7, #32]
  return *((uint16_t const *) mem);
 8005dc6:	6a3b      	ldr	r3, [r7, #32]
 8005dc8:	881b      	ldrh	r3, [r3, #0]
 8005dca:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42

      return tud_control_xfer(rhport, p_request, (void*) desc_bos, total_len);
 8005dce:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8005dd0:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 8005dd4:	79f8      	ldrb	r0, [r7, #7]
 8005dd6:	6839      	ldr	r1, [r7, #0]
 8005dd8:	f000 fd0c 	bl	80067f4 <tud_control_xfer>
 8005ddc:	4603      	mov	r3, r0
 8005dde:	e066      	b.n	8005eae <process_get_descriptor+0x1b2>
    case TUSB_DESC_CONFIGURATION:
    case TUSB_DESC_OTHER_SPEED_CONFIG:
    {
      uintptr_t desc_config;

      if ( desc_type == TUSB_DESC_CONFIGURATION )
 8005de0:	f897 304b 	ldrb.w	r3, [r7, #75]	@ 0x4b
 8005de4:	2b02      	cmp	r3, #2
 8005de6:	d107      	bne.n	8005df8 <process_get_descriptor+0xfc>
      {
        TU_LOG_USBD(" Configuration[%u]\r\n", desc_index);
        desc_config = (uintptr_t) tud_descriptor_configuration_cb(desc_index);
 8005de8:	f897 304a 	ldrb.w	r3, [r7, #74]	@ 0x4a
 8005dec:	4618      	mov	r0, r3
 8005dee:	f7fb ff47 	bl	8001c80 <tud_descriptor_configuration_cb>
 8005df2:	4603      	mov	r3, r0
 8005df4:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005df6:	e00b      	b.n	8005e10 <process_get_descriptor+0x114>
      }else
      {
        // Host only request this after getting Device Qualifier descriptor
        TU_LOG_USBD(" Other Speed Configuration\r\n");
        TU_VERIFY( tud_descriptor_other_speed_configuration_cb );
 8005df8:	4b31      	ldr	r3, [pc, #196]	@ (8005ec0 <process_get_descriptor+0x1c4>)
 8005dfa:	2b00      	cmp	r3, #0
 8005dfc:	d101      	bne.n	8005e02 <process_get_descriptor+0x106>
 8005dfe:	2300      	movs	r3, #0
 8005e00:	e055      	b.n	8005eae <process_get_descriptor+0x1b2>
        desc_config = (uintptr_t) tud_descriptor_other_speed_configuration_cb(desc_index);
 8005e02:	f897 304a 	ldrb.w	r3, [r7, #74]	@ 0x4a
 8005e06:	4618      	mov	r0, r3
 8005e08:	f3af 8000 	nop.w
 8005e0c:	4603      	mov	r3, r0
 8005e0e:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }

      TU_ASSERT(desc_config);
 8005e10:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005e12:	2b00      	cmp	r3, #0
 8005e14:	d10a      	bne.n	8005e2c <process_get_descriptor+0x130>
 8005e16:	4b29      	ldr	r3, [pc, #164]	@ (8005ebc <process_get_descriptor+0x1c0>)
 8005e18:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005e1a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005e1c:	681b      	ldr	r3, [r3, #0]
 8005e1e:	f003 0301 	and.w	r3, r3, #1
 8005e22:	2b00      	cmp	r3, #0
 8005e24:	d000      	beq.n	8005e28 <process_get_descriptor+0x12c>
 8005e26:	be00      	bkpt	0x0000
 8005e28:	2300      	movs	r3, #0
 8005e2a:	e040      	b.n	8005eae <process_get_descriptor+0x1b2>

      // Use offsetof to avoid pointer to the odd/misaligned address
      uint16_t const total_len = tu_le16toh( tu_unaligned_read16((const void*) (desc_config + offsetof(tusb_desc_configuration_t, wTotalLength))) );
 8005e2c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005e2e:	3302      	adds	r3, #2
 8005e30:	61fb      	str	r3, [r7, #28]
 8005e32:	69fb      	ldr	r3, [r7, #28]
 8005e34:	881b      	ldrh	r3, [r3, #0]
 8005e36:	867b      	strh	r3, [r7, #50]	@ 0x32

      return tud_control_xfer(rhport, p_request, (void*) desc_config, total_len);
 8005e38:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8005e3a:	8e7b      	ldrh	r3, [r7, #50]	@ 0x32
 8005e3c:	79f8      	ldrb	r0, [r7, #7]
 8005e3e:	6839      	ldr	r1, [r7, #0]
 8005e40:	f000 fcd8 	bl	80067f4 <tud_control_xfer>
 8005e44:	4603      	mov	r3, r0
 8005e46:	e032      	b.n	8005eae <process_get_descriptor+0x1b2>
    case TUSB_DESC_STRING:
    {
      TU_LOG_USBD(" String[%u]\r\n", desc_index);

      // String Descriptor always uses the desc set from user
      uint8_t const* desc_str = (uint8_t const*) tud_descriptor_string_cb(desc_index, tu_le16toh(p_request->wIndex));
 8005e48:	683b      	ldr	r3, [r7, #0]
 8005e4a:	889b      	ldrh	r3, [r3, #4]
 8005e4c:	b29a      	uxth	r2, r3
 8005e4e:	f897 304a 	ldrb.w	r3, [r7, #74]	@ 0x4a
 8005e52:	4611      	mov	r1, r2
 8005e54:	4618      	mov	r0, r3
 8005e56:	f7fb ff29 	bl	8001cac <tud_descriptor_string_cb>
 8005e5a:	6378      	str	r0, [r7, #52]	@ 0x34
      TU_VERIFY(desc_str);
 8005e5c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005e5e:	2b00      	cmp	r3, #0
 8005e60:	d101      	bne.n	8005e66 <process_get_descriptor+0x16a>
 8005e62:	2300      	movs	r3, #0
 8005e64:	e023      	b.n	8005eae <process_get_descriptor+0x1b2>
 8005e66:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005e68:	61bb      	str	r3, [r7, #24]
  return ((uint8_t const*) desc)[DESC_OFFSET_LEN];
 8005e6a:	69bb      	ldr	r3, [r7, #24]
 8005e6c:	781b      	ldrb	r3, [r3, #0]

      // first byte of descriptor is its size
      return tud_control_xfer(rhport, p_request, (void*) (uintptr_t) desc_str, tu_desc_len(desc_str));
 8005e6e:	79f8      	ldrb	r0, [r7, #7]
 8005e70:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8005e72:	6839      	ldr	r1, [r7, #0]
 8005e74:	f000 fcbe 	bl	80067f4 <tud_control_xfer>
 8005e78:	4603      	mov	r3, r0
 8005e7a:	e018      	b.n	8005eae <process_get_descriptor+0x1b2>

    case TUSB_DESC_DEVICE_QUALIFIER:
    {
      TU_LOG_USBD(" Device Qualifier\r\n");

      TU_VERIFY( tud_descriptor_device_qualifier_cb );
 8005e7c:	4b11      	ldr	r3, [pc, #68]	@ (8005ec4 <process_get_descriptor+0x1c8>)
 8005e7e:	2b00      	cmp	r3, #0
 8005e80:	d101      	bne.n	8005e86 <process_get_descriptor+0x18a>
 8005e82:	2300      	movs	r3, #0
 8005e84:	e013      	b.n	8005eae <process_get_descriptor+0x1b2>

      uint8_t const* desc_qualifier = tud_descriptor_device_qualifier_cb();
 8005e86:	f3af 8000 	nop.w
 8005e8a:	63b8      	str	r0, [r7, #56]	@ 0x38
      TU_VERIFY(desc_qualifier);
 8005e8c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005e8e:	2b00      	cmp	r3, #0
 8005e90:	d101      	bne.n	8005e96 <process_get_descriptor+0x19a>
 8005e92:	2300      	movs	r3, #0
 8005e94:	e00b      	b.n	8005eae <process_get_descriptor+0x1b2>
 8005e96:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005e98:	617b      	str	r3, [r7, #20]
 8005e9a:	697b      	ldr	r3, [r7, #20]
 8005e9c:	781b      	ldrb	r3, [r3, #0]

      // first byte of descriptor is its size
      return tud_control_xfer(rhport, p_request, (void*) (uintptr_t) desc_qualifier, tu_desc_len(desc_qualifier));
 8005e9e:	79f8      	ldrb	r0, [r7, #7]
 8005ea0:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8005ea2:	6839      	ldr	r1, [r7, #0]
 8005ea4:	f000 fca6 	bl	80067f4 <tud_control_xfer>
 8005ea8:	4603      	mov	r3, r0
 8005eaa:	e000      	b.n	8005eae <process_get_descriptor+0x1b2>
    }
    // break; // unreachable

    default: return false;
 8005eac:	2300      	movs	r3, #0
  }
}
 8005eae:	4618      	mov	r0, r3
 8005eb0:	3750      	adds	r7, #80	@ 0x50
 8005eb2:	46bd      	mov	sp, r7
 8005eb4:	bd80      	pop	{r7, pc}
 8005eb6:	bf00      	nop
 8005eb8:	00000000 	.word	0x00000000
 8005ebc:	e000edf0 	.word	0xe000edf0
	...

08005ec8 <dcd_event_handler>:

//--------------------------------------------------------------------+
// DCD Event Handler
//--------------------------------------------------------------------+
TU_ATTR_FAST_FUNC void dcd_event_handler(dcd_event_t const* event, bool in_isr) {
 8005ec8:	b580      	push	{r7, lr}
 8005eca:	b09c      	sub	sp, #112	@ 0x70
 8005ecc:	af00      	add	r7, sp, #0
 8005ece:	6078      	str	r0, [r7, #4]
 8005ed0:	460b      	mov	r3, r1
 8005ed2:	70fb      	strb	r3, [r7, #3]
  bool send = false;
 8005ed4:	2300      	movs	r3, #0
 8005ed6:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
  switch (event->event_id) {
 8005eda:	687b      	ldr	r3, [r7, #4]
 8005edc:	785b      	ldrb	r3, [r3, #1]
 8005ede:	3b02      	subs	r3, #2
 8005ee0:	2b03      	cmp	r3, #3
 8005ee2:	f200 80fb 	bhi.w	80060dc <dcd_event_handler+0x214>
 8005ee6:	a201      	add	r2, pc, #4	@ (adr r2, 8005eec <dcd_event_handler+0x24>)
 8005ee8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005eec:	08005efd 	.word	0x08005efd
 8005ef0:	08005f6d 	.word	0x08005f6d
 8005ef4:	08005f29 	.word	0x08005f29
 8005ef8:	08005f4b 	.word	0x08005f4b
    case DCD_EVENT_UNPLUGGED:
      _usbd_dev.connected = 0;
 8005efc:	4aa8      	ldr	r2, [pc, #672]	@ (80061a0 <dcd_event_handler+0x2d8>)
 8005efe:	7813      	ldrb	r3, [r2, #0]
 8005f00:	f36f 0300 	bfc	r3, #0, #1
 8005f04:	7013      	strb	r3, [r2, #0]
      _usbd_dev.addressed = 0;
 8005f06:	4aa6      	ldr	r2, [pc, #664]	@ (80061a0 <dcd_event_handler+0x2d8>)
 8005f08:	7813      	ldrb	r3, [r2, #0]
 8005f0a:	f36f 0341 	bfc	r3, #1, #1
 8005f0e:	7013      	strb	r3, [r2, #0]
      _usbd_dev.cfg_num = 0;
 8005f10:	4ba3      	ldr	r3, [pc, #652]	@ (80061a0 <dcd_event_handler+0x2d8>)
 8005f12:	2200      	movs	r2, #0
 8005f14:	705a      	strb	r2, [r3, #1]
      _usbd_dev.suspended = 0;
 8005f16:	4aa2      	ldr	r2, [pc, #648]	@ (80061a0 <dcd_event_handler+0x2d8>)
 8005f18:	7813      	ldrb	r3, [r2, #0]
 8005f1a:	f36f 0382 	bfc	r3, #2, #1
 8005f1e:	7013      	strb	r3, [r2, #0]
      send = true;
 8005f20:	2301      	movs	r3, #1
 8005f22:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
      break;
 8005f26:	e0e0      	b.n	80060ea <dcd_event_handler+0x222>
    case DCD_EVENT_SUSPEND:
      // NOTE: When plugging/unplugging device, the D+/D- state are unstable and
      // can accidentally meet the SUSPEND condition ( Bus Idle for 3ms ).
      // In addition, some MCUs such as SAMD or boards that haven no VBUS detection cannot distinguish
      // suspended vs disconnected. We will skip handling SUSPEND/RESUME event if not currently connected
      if (_usbd_dev.connected) {
 8005f28:	4b9d      	ldr	r3, [pc, #628]	@ (80061a0 <dcd_event_handler+0x2d8>)
 8005f2a:	781b      	ldrb	r3, [r3, #0]
 8005f2c:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8005f30:	b2db      	uxtb	r3, r3
 8005f32:	2b00      	cmp	r3, #0
 8005f34:	f000 80d6 	beq.w	80060e4 <dcd_event_handler+0x21c>
        _usbd_dev.suspended = 1;
 8005f38:	4a99      	ldr	r2, [pc, #612]	@ (80061a0 <dcd_event_handler+0x2d8>)
 8005f3a:	7813      	ldrb	r3, [r2, #0]
 8005f3c:	f043 0304 	orr.w	r3, r3, #4
 8005f40:	7013      	strb	r3, [r2, #0]
        send = true;
 8005f42:	2301      	movs	r3, #1
 8005f44:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
      }
      break;
 8005f48:	e0cc      	b.n	80060e4 <dcd_event_handler+0x21c>

    case DCD_EVENT_RESUME:
      // skip event if not connected (especially required for SAMD)
      if (_usbd_dev.connected) {
 8005f4a:	4b95      	ldr	r3, [pc, #596]	@ (80061a0 <dcd_event_handler+0x2d8>)
 8005f4c:	781b      	ldrb	r3, [r3, #0]
 8005f4e:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8005f52:	b2db      	uxtb	r3, r3
 8005f54:	2b00      	cmp	r3, #0
 8005f56:	f000 80c7 	beq.w	80060e8 <dcd_event_handler+0x220>
        _usbd_dev.suspended = 0;
 8005f5a:	4a91      	ldr	r2, [pc, #580]	@ (80061a0 <dcd_event_handler+0x2d8>)
 8005f5c:	7813      	ldrb	r3, [r2, #0]
 8005f5e:	f36f 0382 	bfc	r3, #2, #1
 8005f62:	7013      	strb	r3, [r2, #0]
        send = true;
 8005f64:	2301      	movs	r3, #1
 8005f66:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
      }
      break;
 8005f6a:	e0bd      	b.n	80060e8 <dcd_event_handler+0x220>

    case DCD_EVENT_SOF:
      // Some MCUs after running dcd_remote_wakeup() does not have way to detect the end of remote wakeup
      // which last 1-15 ms. DCD can use SOF as a clear indicator that bus is back to operational
      if (_usbd_dev.suspended) {
 8005f6c:	4b8c      	ldr	r3, [pc, #560]	@ (80061a0 <dcd_event_handler+0x2d8>)
 8005f6e:	781b      	ldrb	r3, [r3, #0]
 8005f70:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8005f74:	b2db      	uxtb	r3, r3
 8005f76:	2b00      	cmp	r3, #0
 8005f78:	d064      	beq.n	8006044 <dcd_event_handler+0x17c>
        _usbd_dev.suspended = 0;
 8005f7a:	4a89      	ldr	r2, [pc, #548]	@ (80061a0 <dcd_event_handler+0x2d8>)
 8005f7c:	7813      	ldrb	r3, [r2, #0]
 8005f7e:	f36f 0382 	bfc	r3, #2, #1
 8005f82:	7013      	strb	r3, [r2, #0]

        dcd_event_t const event_resume = {.rhport = event->rhport, .event_id = DCD_EVENT_RESUME};
 8005f84:	f107 0308 	add.w	r3, r7, #8
 8005f88:	2200      	movs	r2, #0
 8005f8a:	601a      	str	r2, [r3, #0]
 8005f8c:	605a      	str	r2, [r3, #4]
 8005f8e:	609a      	str	r2, [r3, #8]
 8005f90:	687b      	ldr	r3, [r7, #4]
 8005f92:	781b      	ldrb	r3, [r3, #0]
 8005f94:	723b      	strb	r3, [r7, #8]
 8005f96:	2305      	movs	r3, #5
 8005f98:	727b      	strb	r3, [r7, #9]
 8005f9a:	f107 0308 	add.w	r3, r7, #8
 8005f9e:	667b      	str	r3, [r7, #100]	@ 0x64
 8005fa0:	78fb      	ldrb	r3, [r7, #3]
 8005fa2:	f887 3063 	strb.w	r3, [r7, #99]	@ 0x63
  bool ret = osal_queue_send(_usbd_q, event, in_isr);
 8005fa6:	4b7f      	ldr	r3, [pc, #508]	@ (80061a4 <dcd_event_handler+0x2dc>)
 8005fa8:	681b      	ldr	r3, [r3, #0]
 8005faa:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8005fac:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8005fae:	65bb      	str	r3, [r7, #88]	@ 0x58
 8005fb0:	f897 3063 	ldrb.w	r3, [r7, #99]	@ 0x63
 8005fb4:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
}

TU_ATTR_ALWAYS_INLINE static inline bool osal_queue_send(osal_queue_t qhdl, void const* data, bool in_isr) {
  if (!in_isr) {
 8005fb8:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8005fbc:	f083 0301 	eor.w	r3, r3, #1
 8005fc0:	b2db      	uxtb	r3, r3
 8005fc2:	2b00      	cmp	r3, #0
 8005fc4:	d006      	beq.n	8005fd4 <dcd_event_handler+0x10c>
 8005fc6:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8005fc8:	653b      	str	r3, [r7, #80]	@ 0x50
  qhdl->interrupt_set(false);
 8005fca:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005fcc:	681b      	ldr	r3, [r3, #0]
 8005fce:	2000      	movs	r0, #0
 8005fd0:	4798      	blx	r3
}
 8005fd2:	bf00      	nop
    _osal_q_lock(qhdl);
  }

  bool success = tu_fifo_write(&qhdl->ff, data);
 8005fd4:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8005fd6:	3304      	adds	r3, #4
 8005fd8:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 8005fda:	4618      	mov	r0, r3
 8005fdc:	f7fe fecf 	bl	8004d7e <tu_fifo_write>
 8005fe0:	4603      	mov	r3, r0
 8005fe2:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f

  if (!in_isr) {
 8005fe6:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8005fea:	f083 0301 	eor.w	r3, r3, #1
 8005fee:	b2db      	uxtb	r3, r3
 8005ff0:	2b00      	cmp	r3, #0
 8005ff2:	d006      	beq.n	8006002 <dcd_event_handler+0x13a>
 8005ff4:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8005ff6:	64bb      	str	r3, [r7, #72]	@ 0x48
  qhdl->interrupt_set(true);
 8005ff8:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005ffa:	681b      	ldr	r3, [r3, #0]
 8005ffc:	2001      	movs	r0, #1
 8005ffe:	4798      	blx	r3
}
 8006000:	bf00      	nop
    _osal_q_unlock(qhdl);
  }

  TU_ASSERT(success);
 8006002:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 8006006:	f083 0301 	eor.w	r3, r3, #1
 800600a:	b2db      	uxtb	r3, r3
 800600c:	2b00      	cmp	r3, #0
 800600e:	d00a      	beq.n	8006026 <dcd_event_handler+0x15e>
 8006010:	4b65      	ldr	r3, [pc, #404]	@ (80061a8 <dcd_event_handler+0x2e0>)
 8006012:	647b      	str	r3, [r7, #68]	@ 0x44
 8006014:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006016:	681b      	ldr	r3, [r3, #0]
 8006018:	f003 0301 	and.w	r3, r3, #1
 800601c:	2b00      	cmp	r3, #0
 800601e:	d000      	beq.n	8006022 <dcd_event_handler+0x15a>
 8006020:	be00      	bkpt	0x0000
 8006022:	2300      	movs	r3, #0
 8006024:	e001      	b.n	800602a <dcd_event_handler+0x162>
  return success;
 8006026:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 800602a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
  tud_event_hook_cb(event->rhport, event->event_id, in_isr);
 800602e:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8006030:	7818      	ldrb	r0, [r3, #0]
 8006032:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8006034:	785b      	ldrb	r3, [r3, #1]
 8006036:	4619      	mov	r1, r3
 8006038:	f897 3063 	ldrb.w	r3, [r7, #99]	@ 0x63
 800603c:	461a      	mov	r2, r3
 800603e:	f7fe ff29 	bl	8004e94 <tud_event_hook_cb>
  return ret;
 8006042:	bf00      	nop
        queue_event(&event_resume, in_isr);
      }

      // SOF driver handler in ISR context
      for (uint8_t i = 0; i < TOTAL_DRIVER_COUNT; i++) {
 8006044:	2300      	movs	r3, #0
 8006046:	f887 306e 	strb.w	r3, [r7, #110]	@ 0x6e
 800604a:	e03f      	b.n	80060cc <dcd_event_handler+0x204>
 800604c:	f897 306e 	ldrb.w	r3, [r7, #110]	@ 0x6e
 8006050:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
  usbd_class_driver_t const * driver = NULL;
 8006054:	2300      	movs	r3, #0
 8006056:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if ( drvid < _app_driver_count ) {
 8006058:	4b54      	ldr	r3, [pc, #336]	@ (80061ac <dcd_event_handler+0x2e4>)
 800605a:	781b      	ldrb	r3, [r3, #0]
 800605c:	f897 2042 	ldrb.w	r2, [r7, #66]	@ 0x42
 8006060:	429a      	cmp	r2, r3
 8006062:	d20a      	bcs.n	800607a <dcd_event_handler+0x1b2>
    driver = &_app_driver[drvid];
 8006064:	4b52      	ldr	r3, [pc, #328]	@ (80061b0 <dcd_event_handler+0x2e8>)
 8006066:	6819      	ldr	r1, [r3, #0]
 8006068:	f897 2042 	ldrb.w	r2, [r7, #66]	@ 0x42
 800606c:	4613      	mov	r3, r2
 800606e:	005b      	lsls	r3, r3, #1
 8006070:	4413      	add	r3, r2
 8006072:	00db      	lsls	r3, r3, #3
 8006074:	440b      	add	r3, r1
 8006076:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006078:	e012      	b.n	80060a0 <dcd_event_handler+0x1d8>
  } else if ( drvid < TOTAL_DRIVER_COUNT && BUILTIN_DRIVER_COUNT > 0 ){
 800607a:	4b4c      	ldr	r3, [pc, #304]	@ (80061ac <dcd_event_handler+0x2e4>)
 800607c:	781b      	ldrb	r3, [r3, #0]
 800607e:	1c9a      	adds	r2, r3, #2
 8006080:	f897 3042 	ldrb.w	r3, [r7, #66]	@ 0x42
 8006084:	429a      	cmp	r2, r3
 8006086:	db0b      	blt.n	80060a0 <dcd_event_handler+0x1d8>
    driver = &_usbd_driver[drvid - _app_driver_count];
 8006088:	f897 3042 	ldrb.w	r3, [r7, #66]	@ 0x42
 800608c:	4a47      	ldr	r2, [pc, #284]	@ (80061ac <dcd_event_handler+0x2e4>)
 800608e:	7812      	ldrb	r2, [r2, #0]
 8006090:	1a9a      	subs	r2, r3, r2
 8006092:	4613      	mov	r3, r2
 8006094:	005b      	lsls	r3, r3, #1
 8006096:	4413      	add	r3, r2
 8006098:	00db      	lsls	r3, r3, #3
 800609a:	4a46      	ldr	r2, [pc, #280]	@ (80061b4 <dcd_event_handler+0x2ec>)
 800609c:	4413      	add	r3, r2
 800609e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  return driver;
 80060a0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
        usbd_class_driver_t const* driver = get_driver(i);
 80060a2:	66bb      	str	r3, [r7, #104]	@ 0x68
        if (driver && driver->sof) {
 80060a4:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80060a6:	2b00      	cmp	r3, #0
 80060a8:	d00b      	beq.n	80060c2 <dcd_event_handler+0x1fa>
 80060aa:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80060ac:	695b      	ldr	r3, [r3, #20]
 80060ae:	2b00      	cmp	r3, #0
 80060b0:	d007      	beq.n	80060c2 <dcd_event_handler+0x1fa>
          driver->sof(event->rhport, event->sof.frame_count);
 80060b2:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80060b4:	695b      	ldr	r3, [r3, #20]
 80060b6:	687a      	ldr	r2, [r7, #4]
 80060b8:	7810      	ldrb	r0, [r2, #0]
 80060ba:	687a      	ldr	r2, [r7, #4]
 80060bc:	6852      	ldr	r2, [r2, #4]
 80060be:	4611      	mov	r1, r2
 80060c0:	4798      	blx	r3
      for (uint8_t i = 0; i < TOTAL_DRIVER_COUNT; i++) {
 80060c2:	f897 306e 	ldrb.w	r3, [r7, #110]	@ 0x6e
 80060c6:	3301      	adds	r3, #1
 80060c8:	f887 306e 	strb.w	r3, [r7, #110]	@ 0x6e
 80060cc:	4b37      	ldr	r3, [pc, #220]	@ (80061ac <dcd_event_handler+0x2e4>)
 80060ce:	781b      	ldrb	r3, [r3, #0]
 80060d0:	1c9a      	adds	r2, r3, #2
 80060d2:	f897 306e 	ldrb.w	r3, [r7, #110]	@ 0x6e
 80060d6:	429a      	cmp	r2, r3
 80060d8:	dab8      	bge.n	800604c <dcd_event_handler+0x184>
        }
      }

      // skip osal queue for SOF in usbd task
      break;
 80060da:	e006      	b.n	80060ea <dcd_event_handler+0x222>

    default:
      send = true;
 80060dc:	2301      	movs	r3, #1
 80060de:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
      break;
 80060e2:	e002      	b.n	80060ea <dcd_event_handler+0x222>
      break;
 80060e4:	bf00      	nop
 80060e6:	e000      	b.n	80060ea <dcd_event_handler+0x222>
      break;
 80060e8:	bf00      	nop
  }

  if (send) {
 80060ea:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
 80060ee:	2b00      	cmp	r3, #0
 80060f0:	d051      	beq.n	8006196 <dcd_event_handler+0x2ce>
 80060f2:	687b      	ldr	r3, [r7, #4]
 80060f4:	63bb      	str	r3, [r7, #56]	@ 0x38
 80060f6:	78fb      	ldrb	r3, [r7, #3]
 80060f8:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
  bool ret = osal_queue_send(_usbd_q, event, in_isr);
 80060fc:	4b29      	ldr	r3, [pc, #164]	@ (80061a4 <dcd_event_handler+0x2dc>)
 80060fe:	681b      	ldr	r3, [r3, #0]
 8006100:	633b      	str	r3, [r7, #48]	@ 0x30
 8006102:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006104:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8006106:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800610a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
  if (!in_isr) {
 800610e:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8006112:	f083 0301 	eor.w	r3, r3, #1
 8006116:	b2db      	uxtb	r3, r3
 8006118:	2b00      	cmp	r3, #0
 800611a:	d006      	beq.n	800612a <dcd_event_handler+0x262>
 800611c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800611e:	627b      	str	r3, [r7, #36]	@ 0x24
  qhdl->interrupt_set(false);
 8006120:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006122:	681b      	ldr	r3, [r3, #0]
 8006124:	2000      	movs	r0, #0
 8006126:	4798      	blx	r3
}
 8006128:	bf00      	nop
  bool success = tu_fifo_write(&qhdl->ff, data);
 800612a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800612c:	3304      	adds	r3, #4
 800612e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8006130:	4618      	mov	r0, r3
 8006132:	f7fe fe24 	bl	8004d7e <tu_fifo_write>
 8006136:	4603      	mov	r3, r0
 8006138:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
  if (!in_isr) {
 800613c:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8006140:	f083 0301 	eor.w	r3, r3, #1
 8006144:	b2db      	uxtb	r3, r3
 8006146:	2b00      	cmp	r3, #0
 8006148:	d006      	beq.n	8006158 <dcd_event_handler+0x290>
 800614a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800614c:	61fb      	str	r3, [r7, #28]
  qhdl->interrupt_set(true);
 800614e:	69fb      	ldr	r3, [r7, #28]
 8006150:	681b      	ldr	r3, [r3, #0]
 8006152:	2001      	movs	r0, #1
 8006154:	4798      	blx	r3
}
 8006156:	bf00      	nop
  TU_ASSERT(success);
 8006158:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 800615c:	f083 0301 	eor.w	r3, r3, #1
 8006160:	b2db      	uxtb	r3, r3
 8006162:	2b00      	cmp	r3, #0
 8006164:	d00a      	beq.n	800617c <dcd_event_handler+0x2b4>
 8006166:	4b10      	ldr	r3, [pc, #64]	@ (80061a8 <dcd_event_handler+0x2e0>)
 8006168:	61bb      	str	r3, [r7, #24]
 800616a:	69bb      	ldr	r3, [r7, #24]
 800616c:	681b      	ldr	r3, [r3, #0]
 800616e:	f003 0301 	and.w	r3, r3, #1
 8006172:	2b00      	cmp	r3, #0
 8006174:	d000      	beq.n	8006178 <dcd_event_handler+0x2b0>
 8006176:	be00      	bkpt	0x0000
 8006178:	2300      	movs	r3, #0
 800617a:	e001      	b.n	8006180 <dcd_event_handler+0x2b8>
  return success;
 800617c:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8006180:	75fb      	strb	r3, [r7, #23]
  tud_event_hook_cb(event->rhport, event->event_id, in_isr);
 8006182:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006184:	7818      	ldrb	r0, [r3, #0]
 8006186:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006188:	785b      	ldrb	r3, [r3, #1]
 800618a:	4619      	mov	r1, r3
 800618c:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8006190:	461a      	mov	r2, r3
 8006192:	f7fe fe7f 	bl	8004e94 <tud_event_hook_cb>
    queue_event(event, in_isr);
  }
}
 8006196:	bf00      	nop
 8006198:	3770      	adds	r7, #112	@ 0x70
 800619a:	46bd      	mov	sp, r7
 800619c:	bd80      	pop	{r7, pc}
 800619e:	bf00      	nop
 80061a0:	24001d10 	.word	0x24001d10
 80061a4:	24001e10 	.word	0x24001e10
 80061a8:	e000edf0 	.word	0xe000edf0
 80061ac:	24001d4c 	.word	0x24001d4c
 80061b0:	24001d48 	.word	0x24001d48
 80061b4:	0801bf18 	.word	0x0801bf18

080061b8 <usbd_int_set>:
//--------------------------------------------------------------------+
// USBD API For Class Driver
//--------------------------------------------------------------------+

void usbd_int_set(bool enabled)
{
 80061b8:	b580      	push	{r7, lr}
 80061ba:	b082      	sub	sp, #8
 80061bc:	af00      	add	r7, sp, #0
 80061be:	4603      	mov	r3, r0
 80061c0:	71fb      	strb	r3, [r7, #7]
  if (enabled)
 80061c2:	79fb      	ldrb	r3, [r7, #7]
 80061c4:	2b00      	cmp	r3, #0
 80061c6:	d005      	beq.n	80061d4 <usbd_int_set+0x1c>
  {
    dcd_int_enable(_usbd_rhport);
 80061c8:	4b07      	ldr	r3, [pc, #28]	@ (80061e8 <usbd_int_set+0x30>)
 80061ca:	781b      	ldrb	r3, [r3, #0]
 80061cc:	4618      	mov	r0, r3
 80061ce:	f001 fbe1 	bl	8007994 <dcd_int_enable>
  }else
  {
    dcd_int_disable(_usbd_rhport);
  }
}
 80061d2:	e004      	b.n	80061de <usbd_int_set+0x26>
    dcd_int_disable(_usbd_rhport);
 80061d4:	4b04      	ldr	r3, [pc, #16]	@ (80061e8 <usbd_int_set+0x30>)
 80061d6:	781b      	ldrb	r3, [r3, #0]
 80061d8:	4618      	mov	r0, r3
 80061da:	f001 fbf3 	bl	80079c4 <dcd_int_disable>
}
 80061de:	bf00      	nop
 80061e0:	3708      	adds	r7, #8
 80061e2:	46bd      	mov	sp, r7
 80061e4:	bd80      	pop	{r7, pc}
 80061e6:	bf00      	nop
 80061e8:	24000028 	.word	0x24000028

080061ec <usbd_open_edpt_pair>:

// Parse consecutive endpoint descriptors (IN & OUT)
bool usbd_open_edpt_pair(uint8_t rhport, uint8_t const* p_desc, uint8_t ep_count, uint8_t xfer_type, uint8_t* ep_out, uint8_t* ep_in)
{
 80061ec:	b580      	push	{r7, lr}
 80061ee:	b08a      	sub	sp, #40	@ 0x28
 80061f0:	af00      	add	r7, sp, #0
 80061f2:	6039      	str	r1, [r7, #0]
 80061f4:	4611      	mov	r1, r2
 80061f6:	461a      	mov	r2, r3
 80061f8:	4603      	mov	r3, r0
 80061fa:	71fb      	strb	r3, [r7, #7]
 80061fc:	460b      	mov	r3, r1
 80061fe:	71bb      	strb	r3, [r7, #6]
 8006200:	4613      	mov	r3, r2
 8006202:	717b      	strb	r3, [r7, #5]
  for(int i=0; i<ep_count; i++)
 8006204:	2300      	movs	r3, #0
 8006206:	627b      	str	r3, [r7, #36]	@ 0x24
 8006208:	e04d      	b.n	80062a6 <usbd_open_edpt_pair+0xba>
  {
    tusb_desc_endpoint_t const * desc_ep = (tusb_desc_endpoint_t const *) p_desc;
 800620a:	683b      	ldr	r3, [r7, #0]
 800620c:	623b      	str	r3, [r7, #32]

    TU_ASSERT(TUSB_DESC_ENDPOINT == desc_ep->bDescriptorType && xfer_type == desc_ep->bmAttributes.xfer);
 800620e:	6a3b      	ldr	r3, [r7, #32]
 8006210:	785b      	ldrb	r3, [r3, #1]
 8006212:	2b05      	cmp	r3, #5
 8006214:	d108      	bne.n	8006228 <usbd_open_edpt_pair+0x3c>
 8006216:	6a3b      	ldr	r3, [r7, #32]
 8006218:	78db      	ldrb	r3, [r3, #3]
 800621a:	f3c3 0301 	ubfx	r3, r3, #0, #2
 800621e:	b2db      	uxtb	r3, r3
 8006220:	461a      	mov	r2, r3
 8006222:	797b      	ldrb	r3, [r7, #5]
 8006224:	4293      	cmp	r3, r2
 8006226:	d00a      	beq.n	800623e <usbd_open_edpt_pair+0x52>
 8006228:	4b23      	ldr	r3, [pc, #140]	@ (80062b8 <usbd_open_edpt_pair+0xcc>)
 800622a:	61bb      	str	r3, [r7, #24]
 800622c:	69bb      	ldr	r3, [r7, #24]
 800622e:	681b      	ldr	r3, [r3, #0]
 8006230:	f003 0301 	and.w	r3, r3, #1
 8006234:	2b00      	cmp	r3, #0
 8006236:	d000      	beq.n	800623a <usbd_open_edpt_pair+0x4e>
 8006238:	be00      	bkpt	0x0000
 800623a:	2300      	movs	r3, #0
 800623c:	e038      	b.n	80062b0 <usbd_open_edpt_pair+0xc4>
    TU_ASSERT(usbd_edpt_open(rhport, desc_ep));
 800623e:	79fb      	ldrb	r3, [r7, #7]
 8006240:	6a39      	ldr	r1, [r7, #32]
 8006242:	4618      	mov	r0, r3
 8006244:	f000 f83a 	bl	80062bc <usbd_edpt_open>
 8006248:	4603      	mov	r3, r0
 800624a:	f083 0301 	eor.w	r3, r3, #1
 800624e:	b2db      	uxtb	r3, r3
 8006250:	2b00      	cmp	r3, #0
 8006252:	d00a      	beq.n	800626a <usbd_open_edpt_pair+0x7e>
 8006254:	4b18      	ldr	r3, [pc, #96]	@ (80062b8 <usbd_open_edpt_pair+0xcc>)
 8006256:	61fb      	str	r3, [r7, #28]
 8006258:	69fb      	ldr	r3, [r7, #28]
 800625a:	681b      	ldr	r3, [r3, #0]
 800625c:	f003 0301 	and.w	r3, r3, #1
 8006260:	2b00      	cmp	r3, #0
 8006262:	d000      	beq.n	8006266 <usbd_open_edpt_pair+0x7a>
 8006264:	be00      	bkpt	0x0000
 8006266:	2300      	movs	r3, #0
 8006268:	e022      	b.n	80062b0 <usbd_open_edpt_pair+0xc4>

    if ( tu_edpt_dir(desc_ep->bEndpointAddress) == TUSB_DIR_IN )
 800626a:	6a3b      	ldr	r3, [r7, #32]
 800626c:	789b      	ldrb	r3, [r3, #2]
 800626e:	75fb      	strb	r3, [r7, #23]
  return (addr & TUSB_DIR_IN_MASK) ? TUSB_DIR_IN : TUSB_DIR_OUT;
 8006270:	7dfb      	ldrb	r3, [r7, #23]
 8006272:	09db      	lsrs	r3, r3, #7
 8006274:	b2db      	uxtb	r3, r3
 8006276:	2b01      	cmp	r3, #1
 8006278:	d104      	bne.n	8006284 <usbd_open_edpt_pair+0x98>
    {
      (*ep_in) = desc_ep->bEndpointAddress;
 800627a:	6a3b      	ldr	r3, [r7, #32]
 800627c:	789a      	ldrb	r2, [r3, #2]
 800627e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006280:	701a      	strb	r2, [r3, #0]
 8006282:	e003      	b.n	800628c <usbd_open_edpt_pair+0xa0>
    }else
    {
      (*ep_out) = desc_ep->bEndpointAddress;
 8006284:	6a3b      	ldr	r3, [r7, #32]
 8006286:	789a      	ldrb	r2, [r3, #2]
 8006288:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800628a:	701a      	strb	r2, [r3, #0]
 800628c:	683b      	ldr	r3, [r7, #0]
 800628e:	613b      	str	r3, [r7, #16]
  uint8_t const* desc8 = (uint8_t const*) desc;
 8006290:	693b      	ldr	r3, [r7, #16]
 8006292:	60fb      	str	r3, [r7, #12]
  return desc8 + desc8[DESC_OFFSET_LEN];
 8006294:	68fb      	ldr	r3, [r7, #12]
 8006296:	781b      	ldrb	r3, [r3, #0]
 8006298:	461a      	mov	r2, r3
 800629a:	68fb      	ldr	r3, [r7, #12]
 800629c:	4413      	add	r3, r2
    }

    p_desc = tu_desc_next(p_desc);
 800629e:	603b      	str	r3, [r7, #0]
  for(int i=0; i<ep_count; i++)
 80062a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80062a2:	3301      	adds	r3, #1
 80062a4:	627b      	str	r3, [r7, #36]	@ 0x24
 80062a6:	79bb      	ldrb	r3, [r7, #6]
 80062a8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80062aa:	429a      	cmp	r2, r3
 80062ac:	dbad      	blt.n	800620a <usbd_open_edpt_pair+0x1e>
  }

  return true;
 80062ae:	2301      	movs	r3, #1
}
 80062b0:	4618      	mov	r0, r3
 80062b2:	3728      	adds	r7, #40	@ 0x28
 80062b4:	46bd      	mov	sp, r7
 80062b6:	bd80      	pop	{r7, pc}
 80062b8:	e000edf0 	.word	0xe000edf0

080062bc <usbd_edpt_open>:
//--------------------------------------------------------------------+
// USBD Endpoint API
//--------------------------------------------------------------------+

bool usbd_edpt_open(uint8_t rhport, tusb_desc_endpoint_t const * desc_ep)
{
 80062bc:	b580      	push	{r7, lr}
 80062be:	b086      	sub	sp, #24
 80062c0:	af00      	add	r7, sp, #0
 80062c2:	4603      	mov	r3, r0
 80062c4:	6039      	str	r1, [r7, #0]
 80062c6:	71fb      	strb	r3, [r7, #7]
  rhport = _usbd_rhport;
 80062c8:	4b1b      	ldr	r3, [pc, #108]	@ (8006338 <usbd_edpt_open+0x7c>)
 80062ca:	781b      	ldrb	r3, [r3, #0]
 80062cc:	71fb      	strb	r3, [r7, #7]

  TU_ASSERT(tu_edpt_number(desc_ep->bEndpointAddress) < CFG_TUD_ENDPPOINT_MAX);
 80062ce:	683b      	ldr	r3, [r7, #0]
 80062d0:	789b      	ldrb	r3, [r3, #2]
 80062d2:	73fb      	strb	r3, [r7, #15]
  return (uint8_t)(addr & (~TUSB_DIR_IN_MASK));
 80062d4:	7bfb      	ldrb	r3, [r7, #15]
 80062d6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80062da:	b2db      	uxtb	r3, r3
 80062dc:	2b08      	cmp	r3, #8
 80062de:	d90a      	bls.n	80062f6 <usbd_edpt_open+0x3a>
 80062e0:	4b16      	ldr	r3, [pc, #88]	@ (800633c <usbd_edpt_open+0x80>)
 80062e2:	613b      	str	r3, [r7, #16]
 80062e4:	693b      	ldr	r3, [r7, #16]
 80062e6:	681b      	ldr	r3, [r3, #0]
 80062e8:	f003 0301 	and.w	r3, r3, #1
 80062ec:	2b00      	cmp	r3, #0
 80062ee:	d000      	beq.n	80062f2 <usbd_edpt_open+0x36>
 80062f0:	be00      	bkpt	0x0000
 80062f2:	2300      	movs	r3, #0
 80062f4:	e01c      	b.n	8006330 <usbd_edpt_open+0x74>
  TU_ASSERT(tu_edpt_validate(desc_ep, (tusb_speed_t) _usbd_dev.speed));
 80062f6:	4b12      	ldr	r3, [pc, #72]	@ (8006340 <usbd_edpt_open+0x84>)
 80062f8:	789b      	ldrb	r3, [r3, #2]
 80062fa:	4619      	mov	r1, r3
 80062fc:	6838      	ldr	r0, [r7, #0]
 80062fe:	f002 fc81 	bl	8008c04 <tu_edpt_validate>
 8006302:	4603      	mov	r3, r0
 8006304:	f083 0301 	eor.w	r3, r3, #1
 8006308:	b2db      	uxtb	r3, r3
 800630a:	2b00      	cmp	r3, #0
 800630c:	d00a      	beq.n	8006324 <usbd_edpt_open+0x68>
 800630e:	4b0b      	ldr	r3, [pc, #44]	@ (800633c <usbd_edpt_open+0x80>)
 8006310:	617b      	str	r3, [r7, #20]
 8006312:	697b      	ldr	r3, [r7, #20]
 8006314:	681b      	ldr	r3, [r3, #0]
 8006316:	f003 0301 	and.w	r3, r3, #1
 800631a:	2b00      	cmp	r3, #0
 800631c:	d000      	beq.n	8006320 <usbd_edpt_open+0x64>
 800631e:	be00      	bkpt	0x0000
 8006320:	2300      	movs	r3, #0
 8006322:	e005      	b.n	8006330 <usbd_edpt_open+0x74>

  return dcd_edpt_open(rhport, desc_ep);
 8006324:	79fb      	ldrb	r3, [r7, #7]
 8006326:	6839      	ldr	r1, [r7, #0]
 8006328:	4618      	mov	r0, r3
 800632a:	f001 fbcf 	bl	8007acc <dcd_edpt_open>
 800632e:	4603      	mov	r3, r0
}
 8006330:	4618      	mov	r0, r3
 8006332:	3718      	adds	r7, #24
 8006334:	46bd      	mov	sp, r7
 8006336:	bd80      	pop	{r7, pc}
 8006338:	24000028 	.word	0x24000028
 800633c:	e000edf0 	.word	0xe000edf0
 8006340:	24001d10 	.word	0x24001d10

08006344 <usbd_edpt_claim>:

bool usbd_edpt_claim(uint8_t rhport, uint8_t ep_addr)
{
 8006344:	b580      	push	{r7, lr}
 8006346:	b086      	sub	sp, #24
 8006348:	af00      	add	r7, sp, #0
 800634a:	4603      	mov	r3, r0
 800634c:	460a      	mov	r2, r1
 800634e:	71fb      	strb	r3, [r7, #7]
 8006350:	4613      	mov	r3, r2
 8006352:	71bb      	strb	r3, [r7, #6]
 8006354:	79bb      	ldrb	r3, [r7, #6]
 8006356:	73bb      	strb	r3, [r7, #14]
 8006358:	7bbb      	ldrb	r3, [r7, #14]
 800635a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800635e:	b2db      	uxtb	r3, r3
  (void) rhport;

  // TODO add this check later, also make sure we don't starve an out endpoint while suspending
  // TU_VERIFY(tud_ready());

  uint8_t const epnum       = tu_edpt_number(ep_addr);
 8006360:	75fb      	strb	r3, [r7, #23]
 8006362:	79bb      	ldrb	r3, [r7, #6]
 8006364:	73fb      	strb	r3, [r7, #15]
  return (addr & TUSB_DIR_IN_MASK) ? TUSB_DIR_IN : TUSB_DIR_OUT;
 8006366:	7bfb      	ldrb	r3, [r7, #15]
 8006368:	09db      	lsrs	r3, r3, #7
 800636a:	b2db      	uxtb	r3, r3
  uint8_t const dir         = tu_edpt_dir(ep_addr);
 800636c:	75bb      	strb	r3, [r7, #22]
  tu_edpt_state_t* ep_state = &_usbd_dev.ep_status[epnum][dir];
 800636e:	7dfa      	ldrb	r2, [r7, #23]
 8006370:	7dbb      	ldrb	r3, [r7, #22]
 8006372:	0052      	lsls	r2, r2, #1
 8006374:	4413      	add	r3, r2
 8006376:	3320      	adds	r3, #32
 8006378:	4a06      	ldr	r2, [pc, #24]	@ (8006394 <usbd_edpt_claim+0x50>)
 800637a:	4413      	add	r3, r2
 800637c:	3305      	adds	r3, #5
 800637e:	613b      	str	r3, [r7, #16]

  return tu_edpt_claim(ep_state, _usbd_mutex);
 8006380:	2100      	movs	r1, #0
 8006382:	6938      	ldr	r0, [r7, #16]
 8006384:	f002 fbda 	bl	8008b3c <tu_edpt_claim>
 8006388:	4603      	mov	r3, r0
}
 800638a:	4618      	mov	r0, r3
 800638c:	3718      	adds	r7, #24
 800638e:	46bd      	mov	sp, r7
 8006390:	bd80      	pop	{r7, pc}
 8006392:	bf00      	nop
 8006394:	24001d10 	.word	0x24001d10

08006398 <usbd_edpt_release>:

bool usbd_edpt_release(uint8_t rhport, uint8_t ep_addr)
{
 8006398:	b580      	push	{r7, lr}
 800639a:	b086      	sub	sp, #24
 800639c:	af00      	add	r7, sp, #0
 800639e:	4603      	mov	r3, r0
 80063a0:	460a      	mov	r2, r1
 80063a2:	71fb      	strb	r3, [r7, #7]
 80063a4:	4613      	mov	r3, r2
 80063a6:	71bb      	strb	r3, [r7, #6]
 80063a8:	79bb      	ldrb	r3, [r7, #6]
 80063aa:	73bb      	strb	r3, [r7, #14]
  return (uint8_t)(addr & (~TUSB_DIR_IN_MASK));
 80063ac:	7bbb      	ldrb	r3, [r7, #14]
 80063ae:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80063b2:	b2db      	uxtb	r3, r3
  (void) rhport;

  uint8_t const epnum       = tu_edpt_number(ep_addr);
 80063b4:	75fb      	strb	r3, [r7, #23]
 80063b6:	79bb      	ldrb	r3, [r7, #6]
 80063b8:	73fb      	strb	r3, [r7, #15]
  return (addr & TUSB_DIR_IN_MASK) ? TUSB_DIR_IN : TUSB_DIR_OUT;
 80063ba:	7bfb      	ldrb	r3, [r7, #15]
 80063bc:	09db      	lsrs	r3, r3, #7
 80063be:	b2db      	uxtb	r3, r3
  uint8_t const dir         = tu_edpt_dir(ep_addr);
 80063c0:	75bb      	strb	r3, [r7, #22]
  tu_edpt_state_t* ep_state = &_usbd_dev.ep_status[epnum][dir];
 80063c2:	7dfa      	ldrb	r2, [r7, #23]
 80063c4:	7dbb      	ldrb	r3, [r7, #22]
 80063c6:	0052      	lsls	r2, r2, #1
 80063c8:	4413      	add	r3, r2
 80063ca:	3320      	adds	r3, #32
 80063cc:	4a06      	ldr	r2, [pc, #24]	@ (80063e8 <usbd_edpt_release+0x50>)
 80063ce:	4413      	add	r3, r2
 80063d0:	3305      	adds	r3, #5
 80063d2:	613b      	str	r3, [r7, #16]

  return tu_edpt_release(ep_state, _usbd_mutex);
 80063d4:	2100      	movs	r1, #0
 80063d6:	6938      	ldr	r0, [r7, #16]
 80063d8:	f002 fbea 	bl	8008bb0 <tu_edpt_release>
 80063dc:	4603      	mov	r3, r0
}
 80063de:	4618      	mov	r0, r3
 80063e0:	3718      	adds	r7, #24
 80063e2:	46bd      	mov	sp, r7
 80063e4:	bd80      	pop	{r7, pc}
 80063e6:	bf00      	nop
 80063e8:	24001d10 	.word	0x24001d10

080063ec <usbd_edpt_xfer>:

bool usbd_edpt_xfer(uint8_t rhport, uint8_t ep_addr, uint8_t * buffer, uint16_t total_bytes)
{
 80063ec:	b580      	push	{r7, lr}
 80063ee:	b086      	sub	sp, #24
 80063f0:	af00      	add	r7, sp, #0
 80063f2:	603a      	str	r2, [r7, #0]
 80063f4:	461a      	mov	r2, r3
 80063f6:	4603      	mov	r3, r0
 80063f8:	71fb      	strb	r3, [r7, #7]
 80063fa:	460b      	mov	r3, r1
 80063fc:	71bb      	strb	r3, [r7, #6]
 80063fe:	4613      	mov	r3, r2
 8006400:	80bb      	strh	r3, [r7, #4]
  rhport = _usbd_rhport;
 8006402:	4b32      	ldr	r3, [pc, #200]	@ (80064cc <usbd_edpt_xfer+0xe0>)
 8006404:	781b      	ldrb	r3, [r3, #0]
 8006406:	71fb      	strb	r3, [r7, #7]
 8006408:	79bb      	ldrb	r3, [r7, #6]
 800640a:	72bb      	strb	r3, [r7, #10]
  return (uint8_t)(addr & (~TUSB_DIR_IN_MASK));
 800640c:	7abb      	ldrb	r3, [r7, #10]
 800640e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006412:	b2db      	uxtb	r3, r3

  uint8_t const epnum = tu_edpt_number(ep_addr);
 8006414:	75fb      	strb	r3, [r7, #23]
 8006416:	79bb      	ldrb	r3, [r7, #6]
 8006418:	72fb      	strb	r3, [r7, #11]
  return (addr & TUSB_DIR_IN_MASK) ? TUSB_DIR_IN : TUSB_DIR_OUT;
 800641a:	7afb      	ldrb	r3, [r7, #11]
 800641c:	09db      	lsrs	r3, r3, #7
 800641e:	b2db      	uxtb	r3, r3
  uint8_t const dir   = tu_edpt_dir(ep_addr);
 8006420:	75bb      	strb	r3, [r7, #22]
  // TU_VERIFY(tud_ready());

  TU_LOG_USBD("  Queue EP %02X with %u bytes ...\r\n", ep_addr, total_bytes);

  // Attempt to transfer on a busy endpoint, sound like an race condition !
  TU_ASSERT(_usbd_dev.ep_status[epnum][dir].busy == 0);
 8006422:	7dfa      	ldrb	r2, [r7, #23]
 8006424:	7dbb      	ldrb	r3, [r7, #22]
 8006426:	492a      	ldr	r1, [pc, #168]	@ (80064d0 <usbd_edpt_xfer+0xe4>)
 8006428:	0052      	lsls	r2, r2, #1
 800642a:	440a      	add	r2, r1
 800642c:	4413      	add	r3, r2
 800642e:	3320      	adds	r3, #32
 8006430:	795b      	ldrb	r3, [r3, #5]
 8006432:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8006436:	b2db      	uxtb	r3, r3
 8006438:	2b00      	cmp	r3, #0
 800643a:	d00a      	beq.n	8006452 <usbd_edpt_xfer+0x66>
 800643c:	4b25      	ldr	r3, [pc, #148]	@ (80064d4 <usbd_edpt_xfer+0xe8>)
 800643e:	60fb      	str	r3, [r7, #12]
 8006440:	68fb      	ldr	r3, [r7, #12]
 8006442:	681b      	ldr	r3, [r3, #0]
 8006444:	f003 0301 	and.w	r3, r3, #1
 8006448:	2b00      	cmp	r3, #0
 800644a:	d000      	beq.n	800644e <usbd_edpt_xfer+0x62>
 800644c:	be00      	bkpt	0x0000
 800644e:	2300      	movs	r3, #0
 8006450:	e038      	b.n	80064c4 <usbd_edpt_xfer+0xd8>

  // Set busy first since the actual transfer can be complete before dcd_edpt_xfer()
  // could return and USBD task can preempt and clear the busy
  _usbd_dev.ep_status[epnum][dir].busy = 1;
 8006452:	7dfa      	ldrb	r2, [r7, #23]
 8006454:	7dbb      	ldrb	r3, [r7, #22]
 8006456:	491e      	ldr	r1, [pc, #120]	@ (80064d0 <usbd_edpt_xfer+0xe4>)
 8006458:	0052      	lsls	r2, r2, #1
 800645a:	440a      	add	r2, r1
 800645c:	4413      	add	r3, r2
 800645e:	f103 0220 	add.w	r2, r3, #32
 8006462:	7953      	ldrb	r3, [r2, #5]
 8006464:	f043 0301 	orr.w	r3, r3, #1
 8006468:	7153      	strb	r3, [r2, #5]

  if ( dcd_edpt_xfer(rhport, ep_addr, buffer, total_bytes) )
 800646a:	88bb      	ldrh	r3, [r7, #4]
 800646c:	79b9      	ldrb	r1, [r7, #6]
 800646e:	79f8      	ldrb	r0, [r7, #7]
 8006470:	683a      	ldr	r2, [r7, #0]
 8006472:	f001 fcb3 	bl	8007ddc <dcd_edpt_xfer>
 8006476:	4603      	mov	r3, r0
 8006478:	2b00      	cmp	r3, #0
 800647a:	d001      	beq.n	8006480 <usbd_edpt_xfer+0x94>
  {
    return true;
 800647c:	2301      	movs	r3, #1
 800647e:	e021      	b.n	80064c4 <usbd_edpt_xfer+0xd8>
  }else
  {
    // DCD error, mark endpoint as ready to allow next transfer
    _usbd_dev.ep_status[epnum][dir].busy = 0;
 8006480:	7dfa      	ldrb	r2, [r7, #23]
 8006482:	7dbb      	ldrb	r3, [r7, #22]
 8006484:	4912      	ldr	r1, [pc, #72]	@ (80064d0 <usbd_edpt_xfer+0xe4>)
 8006486:	0052      	lsls	r2, r2, #1
 8006488:	440a      	add	r2, r1
 800648a:	4413      	add	r3, r2
 800648c:	f103 0220 	add.w	r2, r3, #32
 8006490:	7953      	ldrb	r3, [r2, #5]
 8006492:	f36f 0300 	bfc	r3, #0, #1
 8006496:	7153      	strb	r3, [r2, #5]
    _usbd_dev.ep_status[epnum][dir].claimed = 0;
 8006498:	7dfa      	ldrb	r2, [r7, #23]
 800649a:	7dbb      	ldrb	r3, [r7, #22]
 800649c:	490c      	ldr	r1, [pc, #48]	@ (80064d0 <usbd_edpt_xfer+0xe4>)
 800649e:	0052      	lsls	r2, r2, #1
 80064a0:	440a      	add	r2, r1
 80064a2:	4413      	add	r3, r2
 80064a4:	f103 0220 	add.w	r2, r3, #32
 80064a8:	7953      	ldrb	r3, [r2, #5]
 80064aa:	f36f 0382 	bfc	r3, #2, #1
 80064ae:	7153      	strb	r3, [r2, #5]
    TU_LOG_USBD("FAILED\r\n");
    TU_BREAKPOINT();
 80064b0:	4b08      	ldr	r3, [pc, #32]	@ (80064d4 <usbd_edpt_xfer+0xe8>)
 80064b2:	613b      	str	r3, [r7, #16]
 80064b4:	693b      	ldr	r3, [r7, #16]
 80064b6:	681b      	ldr	r3, [r3, #0]
 80064b8:	f003 0301 	and.w	r3, r3, #1
 80064bc:	2b00      	cmp	r3, #0
 80064be:	d000      	beq.n	80064c2 <usbd_edpt_xfer+0xd6>
 80064c0:	be00      	bkpt	0x0000
    return false;
 80064c2:	2300      	movs	r3, #0
  }
}
 80064c4:	4618      	mov	r0, r3
 80064c6:	3718      	adds	r7, #24
 80064c8:	46bd      	mov	sp, r7
 80064ca:	bd80      	pop	{r7, pc}
 80064cc:	24000028 	.word	0x24000028
 80064d0:	24001d10 	.word	0x24001d10
 80064d4:	e000edf0 	.word	0xe000edf0

080064d8 <usbd_edpt_busy>:
    return false;
  }
}

bool usbd_edpt_busy(uint8_t rhport, uint8_t ep_addr)
{
 80064d8:	b480      	push	{r7}
 80064da:	b085      	sub	sp, #20
 80064dc:	af00      	add	r7, sp, #0
 80064de:	4603      	mov	r3, r0
 80064e0:	460a      	mov	r2, r1
 80064e2:	71fb      	strb	r3, [r7, #7]
 80064e4:	4613      	mov	r3, r2
 80064e6:	71bb      	strb	r3, [r7, #6]
 80064e8:	79bb      	ldrb	r3, [r7, #6]
 80064ea:	733b      	strb	r3, [r7, #12]
  return (uint8_t)(addr & (~TUSB_DIR_IN_MASK));
 80064ec:	7b3b      	ldrb	r3, [r7, #12]
 80064ee:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80064f2:	b2db      	uxtb	r3, r3
  (void) rhport;

  uint8_t const epnum = tu_edpt_number(ep_addr);
 80064f4:	73fb      	strb	r3, [r7, #15]
 80064f6:	79bb      	ldrb	r3, [r7, #6]
 80064f8:	737b      	strb	r3, [r7, #13]
  return (addr & TUSB_DIR_IN_MASK) ? TUSB_DIR_IN : TUSB_DIR_OUT;
 80064fa:	7b7b      	ldrb	r3, [r7, #13]
 80064fc:	09db      	lsrs	r3, r3, #7
 80064fe:	b2db      	uxtb	r3, r3
  uint8_t const dir   = tu_edpt_dir(ep_addr);
 8006500:	73bb      	strb	r3, [r7, #14]

  return _usbd_dev.ep_status[epnum][dir].busy;
 8006502:	7bfa      	ldrb	r2, [r7, #15]
 8006504:	7bbb      	ldrb	r3, [r7, #14]
 8006506:	490a      	ldr	r1, [pc, #40]	@ (8006530 <usbd_edpt_busy+0x58>)
 8006508:	0052      	lsls	r2, r2, #1
 800650a:	440a      	add	r2, r1
 800650c:	4413      	add	r3, r2
 800650e:	3320      	adds	r3, #32
 8006510:	795b      	ldrb	r3, [r3, #5]
 8006512:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8006516:	b2db      	uxtb	r3, r3
 8006518:	2b00      	cmp	r3, #0
 800651a:	bf14      	ite	ne
 800651c:	2301      	movne	r3, #1
 800651e:	2300      	moveq	r3, #0
 8006520:	b2db      	uxtb	r3, r3
}
 8006522:	4618      	mov	r0, r3
 8006524:	3714      	adds	r7, #20
 8006526:	46bd      	mov	sp, r7
 8006528:	f85d 7b04 	ldr.w	r7, [sp], #4
 800652c:	4770      	bx	lr
 800652e:	bf00      	nop
 8006530:	24001d10 	.word	0x24001d10

08006534 <usbd_edpt_stall>:

void usbd_edpt_stall(uint8_t rhport, uint8_t ep_addr)
{
 8006534:	b580      	push	{r7, lr}
 8006536:	b084      	sub	sp, #16
 8006538:	af00      	add	r7, sp, #0
 800653a:	4603      	mov	r3, r0
 800653c:	460a      	mov	r2, r1
 800653e:	71fb      	strb	r3, [r7, #7]
 8006540:	4613      	mov	r3, r2
 8006542:	71bb      	strb	r3, [r7, #6]
  rhport = _usbd_rhport;
 8006544:	4b1f      	ldr	r3, [pc, #124]	@ (80065c4 <usbd_edpt_stall+0x90>)
 8006546:	781b      	ldrb	r3, [r3, #0]
 8006548:	71fb      	strb	r3, [r7, #7]
 800654a:	79bb      	ldrb	r3, [r7, #6]
 800654c:	733b      	strb	r3, [r7, #12]
  return (uint8_t)(addr & (~TUSB_DIR_IN_MASK));
 800654e:	7b3b      	ldrb	r3, [r7, #12]
 8006550:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006554:	b2db      	uxtb	r3, r3

  uint8_t const epnum = tu_edpt_number(ep_addr);
 8006556:	73fb      	strb	r3, [r7, #15]
 8006558:	79bb      	ldrb	r3, [r7, #6]
 800655a:	737b      	strb	r3, [r7, #13]
  return (addr & TUSB_DIR_IN_MASK) ? TUSB_DIR_IN : TUSB_DIR_OUT;
 800655c:	7b7b      	ldrb	r3, [r7, #13]
 800655e:	09db      	lsrs	r3, r3, #7
 8006560:	b2db      	uxtb	r3, r3
  uint8_t const dir   = tu_edpt_dir(ep_addr);
 8006562:	73bb      	strb	r3, [r7, #14]

  // only stalled if currently cleared
  if ( !_usbd_dev.ep_status[epnum][dir].stalled )
 8006564:	7bfa      	ldrb	r2, [r7, #15]
 8006566:	7bbb      	ldrb	r3, [r7, #14]
 8006568:	4917      	ldr	r1, [pc, #92]	@ (80065c8 <usbd_edpt_stall+0x94>)
 800656a:	0052      	lsls	r2, r2, #1
 800656c:	440a      	add	r2, r1
 800656e:	4413      	add	r3, r2
 8006570:	3320      	adds	r3, #32
 8006572:	795b      	ldrb	r3, [r3, #5]
 8006574:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8006578:	b2db      	uxtb	r3, r3
 800657a:	2b00      	cmp	r3, #0
 800657c:	d11d      	bne.n	80065ba <usbd_edpt_stall+0x86>
  {
    TU_LOG_USBD("    Stall EP %02X\r\n", ep_addr);
    dcd_edpt_stall(rhport, ep_addr);
 800657e:	79ba      	ldrb	r2, [r7, #6]
 8006580:	79fb      	ldrb	r3, [r7, #7]
 8006582:	4611      	mov	r1, r2
 8006584:	4618      	mov	r0, r3
 8006586:	f001 fd7d 	bl	8008084 <dcd_edpt_stall>
    _usbd_dev.ep_status[epnum][dir].stalled = 1;
 800658a:	7bfa      	ldrb	r2, [r7, #15]
 800658c:	7bbb      	ldrb	r3, [r7, #14]
 800658e:	490e      	ldr	r1, [pc, #56]	@ (80065c8 <usbd_edpt_stall+0x94>)
 8006590:	0052      	lsls	r2, r2, #1
 8006592:	440a      	add	r2, r1
 8006594:	4413      	add	r3, r2
 8006596:	f103 0220 	add.w	r2, r3, #32
 800659a:	7953      	ldrb	r3, [r2, #5]
 800659c:	f043 0302 	orr.w	r3, r3, #2
 80065a0:	7153      	strb	r3, [r2, #5]
    _usbd_dev.ep_status[epnum][dir].busy = 1;
 80065a2:	7bfa      	ldrb	r2, [r7, #15]
 80065a4:	7bbb      	ldrb	r3, [r7, #14]
 80065a6:	4908      	ldr	r1, [pc, #32]	@ (80065c8 <usbd_edpt_stall+0x94>)
 80065a8:	0052      	lsls	r2, r2, #1
 80065aa:	440a      	add	r2, r1
 80065ac:	4413      	add	r3, r2
 80065ae:	f103 0220 	add.w	r2, r3, #32
 80065b2:	7953      	ldrb	r3, [r2, #5]
 80065b4:	f043 0301 	orr.w	r3, r3, #1
 80065b8:	7153      	strb	r3, [r2, #5]
  }
}
 80065ba:	bf00      	nop
 80065bc:	3710      	adds	r7, #16
 80065be:	46bd      	mov	sp, r7
 80065c0:	bd80      	pop	{r7, pc}
 80065c2:	bf00      	nop
 80065c4:	24000028 	.word	0x24000028
 80065c8:	24001d10 	.word	0x24001d10

080065cc <usbd_edpt_clear_stall>:

void usbd_edpt_clear_stall(uint8_t rhport, uint8_t ep_addr)
{
 80065cc:	b580      	push	{r7, lr}
 80065ce:	b084      	sub	sp, #16
 80065d0:	af00      	add	r7, sp, #0
 80065d2:	4603      	mov	r3, r0
 80065d4:	460a      	mov	r2, r1
 80065d6:	71fb      	strb	r3, [r7, #7]
 80065d8:	4613      	mov	r3, r2
 80065da:	71bb      	strb	r3, [r7, #6]
  rhport = _usbd_rhport;
 80065dc:	4b1f      	ldr	r3, [pc, #124]	@ (800665c <usbd_edpt_clear_stall+0x90>)
 80065de:	781b      	ldrb	r3, [r3, #0]
 80065e0:	71fb      	strb	r3, [r7, #7]
 80065e2:	79bb      	ldrb	r3, [r7, #6]
 80065e4:	733b      	strb	r3, [r7, #12]
  return (uint8_t)(addr & (~TUSB_DIR_IN_MASK));
 80065e6:	7b3b      	ldrb	r3, [r7, #12]
 80065e8:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80065ec:	b2db      	uxtb	r3, r3

  uint8_t const epnum = tu_edpt_number(ep_addr);
 80065ee:	73fb      	strb	r3, [r7, #15]
 80065f0:	79bb      	ldrb	r3, [r7, #6]
 80065f2:	737b      	strb	r3, [r7, #13]
  return (addr & TUSB_DIR_IN_MASK) ? TUSB_DIR_IN : TUSB_DIR_OUT;
 80065f4:	7b7b      	ldrb	r3, [r7, #13]
 80065f6:	09db      	lsrs	r3, r3, #7
 80065f8:	b2db      	uxtb	r3, r3
  uint8_t const dir   = tu_edpt_dir(ep_addr);
 80065fa:	73bb      	strb	r3, [r7, #14]

  // only clear if currently stalled
  if ( _usbd_dev.ep_status[epnum][dir].stalled )
 80065fc:	7bfa      	ldrb	r2, [r7, #15]
 80065fe:	7bbb      	ldrb	r3, [r7, #14]
 8006600:	4917      	ldr	r1, [pc, #92]	@ (8006660 <usbd_edpt_clear_stall+0x94>)
 8006602:	0052      	lsls	r2, r2, #1
 8006604:	440a      	add	r2, r1
 8006606:	4413      	add	r3, r2
 8006608:	3320      	adds	r3, #32
 800660a:	795b      	ldrb	r3, [r3, #5]
 800660c:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8006610:	b2db      	uxtb	r3, r3
 8006612:	2b00      	cmp	r3, #0
 8006614:	d01d      	beq.n	8006652 <usbd_edpt_clear_stall+0x86>
  {
    TU_LOG_USBD("    Clear Stall EP %02X\r\n", ep_addr);
    dcd_edpt_clear_stall(rhport, ep_addr);
 8006616:	79ba      	ldrb	r2, [r7, #6]
 8006618:	79fb      	ldrb	r3, [r7, #7]
 800661a:	4611      	mov	r1, r2
 800661c:	4618      	mov	r0, r3
 800661e:	f001 fd43 	bl	80080a8 <dcd_edpt_clear_stall>
    _usbd_dev.ep_status[epnum][dir].stalled = 0;
 8006622:	7bfa      	ldrb	r2, [r7, #15]
 8006624:	7bbb      	ldrb	r3, [r7, #14]
 8006626:	490e      	ldr	r1, [pc, #56]	@ (8006660 <usbd_edpt_clear_stall+0x94>)
 8006628:	0052      	lsls	r2, r2, #1
 800662a:	440a      	add	r2, r1
 800662c:	4413      	add	r3, r2
 800662e:	f103 0220 	add.w	r2, r3, #32
 8006632:	7953      	ldrb	r3, [r2, #5]
 8006634:	f36f 0341 	bfc	r3, #1, #1
 8006638:	7153      	strb	r3, [r2, #5]
    _usbd_dev.ep_status[epnum][dir].busy = 0;
 800663a:	7bfa      	ldrb	r2, [r7, #15]
 800663c:	7bbb      	ldrb	r3, [r7, #14]
 800663e:	4908      	ldr	r1, [pc, #32]	@ (8006660 <usbd_edpt_clear_stall+0x94>)
 8006640:	0052      	lsls	r2, r2, #1
 8006642:	440a      	add	r2, r1
 8006644:	4413      	add	r3, r2
 8006646:	f103 0220 	add.w	r2, r3, #32
 800664a:	7953      	ldrb	r3, [r2, #5]
 800664c:	f36f 0300 	bfc	r3, #0, #1
 8006650:	7153      	strb	r3, [r2, #5]
  }
}
 8006652:	bf00      	nop
 8006654:	3710      	adds	r7, #16
 8006656:	46bd      	mov	sp, r7
 8006658:	bd80      	pop	{r7, pc}
 800665a:	bf00      	nop
 800665c:	24000028 	.word	0x24000028
 8006660:	24001d10 	.word	0x24001d10

08006664 <usbd_edpt_stalled>:

bool usbd_edpt_stalled(uint8_t rhport, uint8_t ep_addr)
{
 8006664:	b480      	push	{r7}
 8006666:	b085      	sub	sp, #20
 8006668:	af00      	add	r7, sp, #0
 800666a:	4603      	mov	r3, r0
 800666c:	460a      	mov	r2, r1
 800666e:	71fb      	strb	r3, [r7, #7]
 8006670:	4613      	mov	r3, r2
 8006672:	71bb      	strb	r3, [r7, #6]
 8006674:	79bb      	ldrb	r3, [r7, #6]
 8006676:	733b      	strb	r3, [r7, #12]
  return (uint8_t)(addr & (~TUSB_DIR_IN_MASK));
 8006678:	7b3b      	ldrb	r3, [r7, #12]
 800667a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800667e:	b2db      	uxtb	r3, r3
  (void) rhport;

  uint8_t const epnum = tu_edpt_number(ep_addr);
 8006680:	73fb      	strb	r3, [r7, #15]
 8006682:	79bb      	ldrb	r3, [r7, #6]
 8006684:	737b      	strb	r3, [r7, #13]
  return (addr & TUSB_DIR_IN_MASK) ? TUSB_DIR_IN : TUSB_DIR_OUT;
 8006686:	7b7b      	ldrb	r3, [r7, #13]
 8006688:	09db      	lsrs	r3, r3, #7
 800668a:	b2db      	uxtb	r3, r3
  uint8_t const dir   = tu_edpt_dir(ep_addr);
 800668c:	73bb      	strb	r3, [r7, #14]

  return _usbd_dev.ep_status[epnum][dir].stalled;
 800668e:	7bfa      	ldrb	r2, [r7, #15]
 8006690:	7bbb      	ldrb	r3, [r7, #14]
 8006692:	490a      	ldr	r1, [pc, #40]	@ (80066bc <usbd_edpt_stalled+0x58>)
 8006694:	0052      	lsls	r2, r2, #1
 8006696:	440a      	add	r2, r1
 8006698:	4413      	add	r3, r2
 800669a:	3320      	adds	r3, #32
 800669c:	795b      	ldrb	r3, [r3, #5]
 800669e:	f3c3 0340 	ubfx	r3, r3, #1, #1
 80066a2:	b2db      	uxtb	r3, r3
 80066a4:	2b00      	cmp	r3, #0
 80066a6:	bf14      	ite	ne
 80066a8:	2301      	movne	r3, #1
 80066aa:	2300      	moveq	r3, #0
 80066ac:	b2db      	uxtb	r3, r3
}
 80066ae:	4618      	mov	r0, r3
 80066b0:	3714      	adds	r7, #20
 80066b2:	46bd      	mov	sp, r7
 80066b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066b8:	4770      	bx	lr
 80066ba:	bf00      	nop
 80066bc:	24001d10 	.word	0x24001d10

080066c0 <dcd_edpt0_status_complete>:
#include "device/usbd_pvt.h"

//--------------------------------------------------------------------+
// Callback weak stubs (called if application does not provide)
//--------------------------------------------------------------------+
TU_ATTR_WEAK void dcd_edpt0_status_complete(uint8_t rhport, tusb_control_request_t const* request) {
 80066c0:	b480      	push	{r7}
 80066c2:	b083      	sub	sp, #12
 80066c4:	af00      	add	r7, sp, #0
 80066c6:	4603      	mov	r3, r0
 80066c8:	6039      	str	r1, [r7, #0]
 80066ca:	71fb      	strb	r3, [r7, #7]
  (void) rhport;
  (void) request;
}
 80066cc:	bf00      	nop
 80066ce:	370c      	adds	r7, #12
 80066d0:	46bd      	mov	sp, r7
 80066d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066d6:	4770      	bx	lr

080066d8 <_status_stage_xact>:
//--------------------------------------------------------------------+
// Application API
//--------------------------------------------------------------------+

// Queue ZLP status transaction
static inline bool _status_stage_xact(uint8_t rhport, tusb_control_request_t const* request) {
 80066d8:	b580      	push	{r7, lr}
 80066da:	b084      	sub	sp, #16
 80066dc:	af00      	add	r7, sp, #0
 80066de:	4603      	mov	r3, r0
 80066e0:	6039      	str	r1, [r7, #0]
 80066e2:	71fb      	strb	r3, [r7, #7]
  // Opposite to endpoint in Data Phase
  uint8_t const ep_addr = request->bmRequestType_bit.direction ? EDPT_CTRL_OUT : EDPT_CTRL_IN;
 80066e4:	683b      	ldr	r3, [r7, #0]
 80066e6:	781b      	ldrb	r3, [r3, #0]
 80066e8:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 80066ec:	b2db      	uxtb	r3, r3
 80066ee:	2b00      	cmp	r3, #0
 80066f0:	d001      	beq.n	80066f6 <_status_stage_xact+0x1e>
 80066f2:	2300      	movs	r3, #0
 80066f4:	e000      	b.n	80066f8 <_status_stage_xact+0x20>
 80066f6:	2380      	movs	r3, #128	@ 0x80
 80066f8:	73fb      	strb	r3, [r7, #15]
  return usbd_edpt_xfer(rhport, ep_addr, NULL, 0);
 80066fa:	7bf9      	ldrb	r1, [r7, #15]
 80066fc:	79f8      	ldrb	r0, [r7, #7]
 80066fe:	2300      	movs	r3, #0
 8006700:	2200      	movs	r2, #0
 8006702:	f7ff fe73 	bl	80063ec <usbd_edpt_xfer>
 8006706:	4603      	mov	r3, r0
}
 8006708:	4618      	mov	r0, r3
 800670a:	3710      	adds	r7, #16
 800670c:	46bd      	mov	sp, r7
 800670e:	bd80      	pop	{r7, pc}

08006710 <tud_control_status>:

// Status phase
bool tud_control_status(uint8_t rhport, tusb_control_request_t const* request) {
 8006710:	b580      	push	{r7, lr}
 8006712:	b082      	sub	sp, #8
 8006714:	af00      	add	r7, sp, #0
 8006716:	4603      	mov	r3, r0
 8006718:	6039      	str	r1, [r7, #0]
 800671a:	71fb      	strb	r3, [r7, #7]
  _ctrl_xfer.request = (*request);
 800671c:	4b0b      	ldr	r3, [pc, #44]	@ (800674c <tud_control_status+0x3c>)
 800671e:	683a      	ldr	r2, [r7, #0]
 8006720:	6810      	ldr	r0, [r2, #0]
 8006722:	6851      	ldr	r1, [r2, #4]
 8006724:	c303      	stmia	r3!, {r0, r1}
  _ctrl_xfer.buffer = NULL;
 8006726:	4b09      	ldr	r3, [pc, #36]	@ (800674c <tud_control_status+0x3c>)
 8006728:	2200      	movs	r2, #0
 800672a:	609a      	str	r2, [r3, #8]
  _ctrl_xfer.total_xferred = 0;
 800672c:	4b07      	ldr	r3, [pc, #28]	@ (800674c <tud_control_status+0x3c>)
 800672e:	2200      	movs	r2, #0
 8006730:	81da      	strh	r2, [r3, #14]
  _ctrl_xfer.data_len = 0;
 8006732:	4b06      	ldr	r3, [pc, #24]	@ (800674c <tud_control_status+0x3c>)
 8006734:	2200      	movs	r2, #0
 8006736:	819a      	strh	r2, [r3, #12]

  return _status_stage_xact(rhport, request);
 8006738:	79fb      	ldrb	r3, [r7, #7]
 800673a:	6839      	ldr	r1, [r7, #0]
 800673c:	4618      	mov	r0, r3
 800673e:	f7ff ffcb 	bl	80066d8 <_status_stage_xact>
 8006742:	4603      	mov	r3, r0
}
 8006744:	4618      	mov	r0, r3
 8006746:	3708      	adds	r7, #8
 8006748:	46bd      	mov	sp, r7
 800674a:	bd80      	pop	{r7, pc}
 800674c:	24001e14 	.word	0x24001e14

08006750 <_data_stage_xact>:

// Queue a transaction in Data Stage
// Each transaction has up to Endpoint0's max packet size.
// This function can also transfer an zero-length packet
static bool _data_stage_xact(uint8_t rhport) {
 8006750:	b580      	push	{r7, lr}
 8006752:	b088      	sub	sp, #32
 8006754:	af00      	add	r7, sp, #0
 8006756:	4603      	mov	r3, r0
 8006758:	71fb      	strb	r3, [r7, #7]
  uint16_t const xact_len = tu_min16(_ctrl_xfer.data_len - _ctrl_xfer.total_xferred,
 800675a:	4b24      	ldr	r3, [pc, #144]	@ (80067ec <_data_stage_xact+0x9c>)
 800675c:	899a      	ldrh	r2, [r3, #12]
 800675e:	4b23      	ldr	r3, [pc, #140]	@ (80067ec <_data_stage_xact+0x9c>)
 8006760:	89db      	ldrh	r3, [r3, #14]
 8006762:	1ad3      	subs	r3, r2, r3
 8006764:	b29b      	uxth	r3, r3
 8006766:	837b      	strh	r3, [r7, #26]
 8006768:	2340      	movs	r3, #64	@ 0x40
 800676a:	833b      	strh	r3, [r7, #24]
TU_ATTR_ALWAYS_INLINE static inline uint16_t tu_min16 (uint16_t x, uint16_t y) { return (x < y) ? x : y; }
 800676c:	8b7a      	ldrh	r2, [r7, #26]
 800676e:	8b3b      	ldrh	r3, [r7, #24]
 8006770:	4293      	cmp	r3, r2
 8006772:	bf28      	it	cs
 8006774:	4613      	movcs	r3, r2
 8006776:	b29b      	uxth	r3, r3
 8006778:	83bb      	strh	r3, [r7, #28]
                                     CFG_TUD_ENDPOINT0_SIZE);

  uint8_t ep_addr = EDPT_CTRL_OUT;
 800677a:	2300      	movs	r3, #0
 800677c:	77fb      	strb	r3, [r7, #31]

  if (_ctrl_xfer.request.bmRequestType_bit.direction == TUSB_DIR_IN) {
 800677e:	4b1b      	ldr	r3, [pc, #108]	@ (80067ec <_data_stage_xact+0x9c>)
 8006780:	781b      	ldrb	r3, [r3, #0]
 8006782:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 8006786:	b2db      	uxtb	r3, r3
 8006788:	2b00      	cmp	r3, #0
 800678a:	d01e      	beq.n	80067ca <_data_stage_xact+0x7a>
    ep_addr = EDPT_CTRL_IN;
 800678c:	2380      	movs	r3, #128	@ 0x80
 800678e:	77fb      	strb	r3, [r7, #31]
    if (xact_len) {
 8006790:	8bbb      	ldrh	r3, [r7, #28]
 8006792:	2b00      	cmp	r3, #0
 8006794:	d019      	beq.n	80067ca <_data_stage_xact+0x7a>
      TU_VERIFY(0 == tu_memcpy_s(_usbd_ctrl_buf, CFG_TUD_ENDPOINT0_SIZE, _ctrl_xfer.buffer, xact_len));
 8006796:	4b15      	ldr	r3, [pc, #84]	@ (80067ec <_data_stage_xact+0x9c>)
 8006798:	689a      	ldr	r2, [r3, #8]
 800679a:	8bbb      	ldrh	r3, [r7, #28]
 800679c:	4914      	ldr	r1, [pc, #80]	@ (80067f0 <_data_stage_xact+0xa0>)
 800679e:	6179      	str	r1, [r7, #20]
 80067a0:	2140      	movs	r1, #64	@ 0x40
 80067a2:	6139      	str	r1, [r7, #16]
 80067a4:	60fa      	str	r2, [r7, #12]
 80067a6:	60bb      	str	r3, [r7, #8]
  if ( count > destsz ) {
 80067a8:	693a      	ldr	r2, [r7, #16]
 80067aa:	68bb      	ldr	r3, [r7, #8]
 80067ac:	429a      	cmp	r2, r3
 80067ae:	d202      	bcs.n	80067b6 <_data_stage_xact+0x66>
    return -1;
 80067b0:	f04f 33ff 	mov.w	r3, #4294967295
 80067b4:	e005      	b.n	80067c2 <_data_stage_xact+0x72>
  memcpy(dest, src, count);
 80067b6:	68ba      	ldr	r2, [r7, #8]
 80067b8:	68f9      	ldr	r1, [r7, #12]
 80067ba:	6978      	ldr	r0, [r7, #20]
 80067bc:	f013 f9c7 	bl	8019b4e <memcpy>
  return 0;
 80067c0:	2300      	movs	r3, #0
 80067c2:	2b00      	cmp	r3, #0
 80067c4:	d001      	beq.n	80067ca <_data_stage_xact+0x7a>
 80067c6:	2300      	movs	r3, #0
 80067c8:	e00b      	b.n	80067e2 <_data_stage_xact+0x92>
    }
  }

  return usbd_edpt_xfer(rhport, ep_addr, xact_len ? _usbd_ctrl_buf : NULL, xact_len);
 80067ca:	8bbb      	ldrh	r3, [r7, #28]
 80067cc:	2b00      	cmp	r3, #0
 80067ce:	d001      	beq.n	80067d4 <_data_stage_xact+0x84>
 80067d0:	4a07      	ldr	r2, [pc, #28]	@ (80067f0 <_data_stage_xact+0xa0>)
 80067d2:	e000      	b.n	80067d6 <_data_stage_xact+0x86>
 80067d4:	2200      	movs	r2, #0
 80067d6:	8bbb      	ldrh	r3, [r7, #28]
 80067d8:	7ff9      	ldrb	r1, [r7, #31]
 80067da:	79f8      	ldrb	r0, [r7, #7]
 80067dc:	f7ff fe06 	bl	80063ec <usbd_edpt_xfer>
 80067e0:	4603      	mov	r3, r0
}
 80067e2:	4618      	mov	r0, r3
 80067e4:	3720      	adds	r7, #32
 80067e6:	46bd      	mov	sp, r7
 80067e8:	bd80      	pop	{r7, pc}
 80067ea:	bf00      	nop
 80067ec:	24001e14 	.word	0x24001e14
 80067f0:	24001e28 	.word	0x24001e28

080067f4 <tud_control_xfer>:

// Transmit data to/from the control endpoint.
// If the request's wLength is zero, a status packet is sent instead.
bool tud_control_xfer(uint8_t rhport, tusb_control_request_t const* request, void* buffer, uint16_t len) {
 80067f4:	b580      	push	{r7, lr}
 80067f6:	b088      	sub	sp, #32
 80067f8:	af00      	add	r7, sp, #0
 80067fa:	60b9      	str	r1, [r7, #8]
 80067fc:	607a      	str	r2, [r7, #4]
 80067fe:	461a      	mov	r2, r3
 8006800:	4603      	mov	r3, r0
 8006802:	73fb      	strb	r3, [r7, #15]
 8006804:	4613      	mov	r3, r2
 8006806:	81bb      	strh	r3, [r7, #12]
  _ctrl_xfer.request = (*request);
 8006808:	4b30      	ldr	r3, [pc, #192]	@ (80068cc <tud_control_xfer+0xd8>)
 800680a:	68ba      	ldr	r2, [r7, #8]
 800680c:	6810      	ldr	r0, [r2, #0]
 800680e:	6851      	ldr	r1, [r2, #4]
 8006810:	c303      	stmia	r3!, {r0, r1}
  _ctrl_xfer.buffer = (uint8_t*) buffer;
 8006812:	4a2e      	ldr	r2, [pc, #184]	@ (80068cc <tud_control_xfer+0xd8>)
 8006814:	687b      	ldr	r3, [r7, #4]
 8006816:	6093      	str	r3, [r2, #8]
  _ctrl_xfer.total_xferred = 0U;
 8006818:	4b2c      	ldr	r3, [pc, #176]	@ (80068cc <tud_control_xfer+0xd8>)
 800681a:	2200      	movs	r2, #0
 800681c:	81da      	strh	r2, [r3, #14]
  _ctrl_xfer.data_len = tu_min16(len, request->wLength);
 800681e:	68bb      	ldr	r3, [r7, #8]
 8006820:	88db      	ldrh	r3, [r3, #6]
 8006822:	b29a      	uxth	r2, r3
 8006824:	89bb      	ldrh	r3, [r7, #12]
 8006826:	827b      	strh	r3, [r7, #18]
 8006828:	4613      	mov	r3, r2
 800682a:	823b      	strh	r3, [r7, #16]
TU_ATTR_ALWAYS_INLINE static inline uint16_t tu_min16 (uint16_t x, uint16_t y) { return (x < y) ? x : y; }
 800682c:	8a7a      	ldrh	r2, [r7, #18]
 800682e:	8a3b      	ldrh	r3, [r7, #16]
 8006830:	4293      	cmp	r3, r2
 8006832:	bf28      	it	cs
 8006834:	4613      	movcs	r3, r2
 8006836:	b29a      	uxth	r2, r3
 8006838:	4b24      	ldr	r3, [pc, #144]	@ (80068cc <tud_control_xfer+0xd8>)
 800683a:	819a      	strh	r2, [r3, #12]

  if (request->wLength > 0U) {
 800683c:	68bb      	ldr	r3, [r7, #8]
 800683e:	88db      	ldrh	r3, [r3, #6]
 8006840:	b29b      	uxth	r3, r3
 8006842:	2b00      	cmp	r3, #0
 8006844:	d026      	beq.n	8006894 <tud_control_xfer+0xa0>
    if (_ctrl_xfer.data_len > 0U) {
 8006846:	4b21      	ldr	r3, [pc, #132]	@ (80068cc <tud_control_xfer+0xd8>)
 8006848:	899b      	ldrh	r3, [r3, #12]
 800684a:	2b00      	cmp	r3, #0
 800684c:	d00d      	beq.n	800686a <tud_control_xfer+0x76>
      TU_ASSERT(buffer);
 800684e:	687b      	ldr	r3, [r7, #4]
 8006850:	2b00      	cmp	r3, #0
 8006852:	d10a      	bne.n	800686a <tud_control_xfer+0x76>
 8006854:	4b1e      	ldr	r3, [pc, #120]	@ (80068d0 <tud_control_xfer+0xdc>)
 8006856:	61bb      	str	r3, [r7, #24]
 8006858:	69bb      	ldr	r3, [r7, #24]
 800685a:	681b      	ldr	r3, [r3, #0]
 800685c:	f003 0301 	and.w	r3, r3, #1
 8006860:	2b00      	cmp	r3, #0
 8006862:	d000      	beq.n	8006866 <tud_control_xfer+0x72>
 8006864:	be00      	bkpt	0x0000
 8006866:	2300      	movs	r3, #0
 8006868:	e02b      	b.n	80068c2 <tud_control_xfer+0xce>
    }

//    TU_LOG2("  Control total data length is %u bytes\r\n", _ctrl_xfer.data_len);

    // Data stage
    TU_ASSERT(_data_stage_xact(rhport));
 800686a:	7bfb      	ldrb	r3, [r7, #15]
 800686c:	4618      	mov	r0, r3
 800686e:	f7ff ff6f 	bl	8006750 <_data_stage_xact>
 8006872:	4603      	mov	r3, r0
 8006874:	f083 0301 	eor.w	r3, r3, #1
 8006878:	b2db      	uxtb	r3, r3
 800687a:	2b00      	cmp	r3, #0
 800687c:	d020      	beq.n	80068c0 <tud_control_xfer+0xcc>
 800687e:	4b14      	ldr	r3, [pc, #80]	@ (80068d0 <tud_control_xfer+0xdc>)
 8006880:	617b      	str	r3, [r7, #20]
 8006882:	697b      	ldr	r3, [r7, #20]
 8006884:	681b      	ldr	r3, [r3, #0]
 8006886:	f003 0301 	and.w	r3, r3, #1
 800688a:	2b00      	cmp	r3, #0
 800688c:	d000      	beq.n	8006890 <tud_control_xfer+0x9c>
 800688e:	be00      	bkpt	0x0000
 8006890:	2300      	movs	r3, #0
 8006892:	e016      	b.n	80068c2 <tud_control_xfer+0xce>
  } else {
    // Status stage
    TU_ASSERT(_status_stage_xact(rhport, request));
 8006894:	7bfb      	ldrb	r3, [r7, #15]
 8006896:	68b9      	ldr	r1, [r7, #8]
 8006898:	4618      	mov	r0, r3
 800689a:	f7ff ff1d 	bl	80066d8 <_status_stage_xact>
 800689e:	4603      	mov	r3, r0
 80068a0:	f083 0301 	eor.w	r3, r3, #1
 80068a4:	b2db      	uxtb	r3, r3
 80068a6:	2b00      	cmp	r3, #0
 80068a8:	d00a      	beq.n	80068c0 <tud_control_xfer+0xcc>
 80068aa:	4b09      	ldr	r3, [pc, #36]	@ (80068d0 <tud_control_xfer+0xdc>)
 80068ac:	61fb      	str	r3, [r7, #28]
 80068ae:	69fb      	ldr	r3, [r7, #28]
 80068b0:	681b      	ldr	r3, [r3, #0]
 80068b2:	f003 0301 	and.w	r3, r3, #1
 80068b6:	2b00      	cmp	r3, #0
 80068b8:	d000      	beq.n	80068bc <tud_control_xfer+0xc8>
 80068ba:	be00      	bkpt	0x0000
 80068bc:	2300      	movs	r3, #0
 80068be:	e000      	b.n	80068c2 <tud_control_xfer+0xce>
  }

  return true;
 80068c0:	2301      	movs	r3, #1
}
 80068c2:	4618      	mov	r0, r3
 80068c4:	3720      	adds	r7, #32
 80068c6:	46bd      	mov	sp, r7
 80068c8:	bd80      	pop	{r7, pc}
 80068ca:	bf00      	nop
 80068cc:	24001e14 	.word	0x24001e14
 80068d0:	e000edf0 	.word	0xe000edf0

080068d4 <usbd_control_reset>:
void usbd_control_reset(void);
void usbd_control_set_request(tusb_control_request_t const* request);
void usbd_control_set_complete_callback(usbd_control_xfer_cb_t fp);
bool usbd_control_xfer_cb(uint8_t rhport, uint8_t ep_addr, xfer_result_t event, uint32_t xferred_bytes);

void usbd_control_reset(void) {
 80068d4:	b580      	push	{r7, lr}
 80068d6:	af00      	add	r7, sp, #0
  tu_varclr(&_ctrl_xfer);
 80068d8:	2214      	movs	r2, #20
 80068da:	2100      	movs	r1, #0
 80068dc:	4802      	ldr	r0, [pc, #8]	@ (80068e8 <usbd_control_reset+0x14>)
 80068de:	f013 f875 	bl	80199cc <memset>
}
 80068e2:	bf00      	nop
 80068e4:	bd80      	pop	{r7, pc}
 80068e6:	bf00      	nop
 80068e8:	24001e14 	.word	0x24001e14

080068ec <usbd_control_set_complete_callback>:

// Set complete callback
void usbd_control_set_complete_callback(usbd_control_xfer_cb_t fp) {
 80068ec:	b480      	push	{r7}
 80068ee:	b083      	sub	sp, #12
 80068f0:	af00      	add	r7, sp, #0
 80068f2:	6078      	str	r0, [r7, #4]
  _ctrl_xfer.complete_cb = fp;
 80068f4:	4a04      	ldr	r2, [pc, #16]	@ (8006908 <usbd_control_set_complete_callback+0x1c>)
 80068f6:	687b      	ldr	r3, [r7, #4]
 80068f8:	6113      	str	r3, [r2, #16]
}
 80068fa:	bf00      	nop
 80068fc:	370c      	adds	r7, #12
 80068fe:	46bd      	mov	sp, r7
 8006900:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006904:	4770      	bx	lr
 8006906:	bf00      	nop
 8006908:	24001e14 	.word	0x24001e14

0800690c <usbd_control_set_request>:

// for dcd_set_address where DCD is responsible for status response
void usbd_control_set_request(tusb_control_request_t const* request) {
 800690c:	b480      	push	{r7}
 800690e:	b083      	sub	sp, #12
 8006910:	af00      	add	r7, sp, #0
 8006912:	6078      	str	r0, [r7, #4]
  _ctrl_xfer.request = (*request);
 8006914:	4b09      	ldr	r3, [pc, #36]	@ (800693c <usbd_control_set_request+0x30>)
 8006916:	687a      	ldr	r2, [r7, #4]
 8006918:	6810      	ldr	r0, [r2, #0]
 800691a:	6851      	ldr	r1, [r2, #4]
 800691c:	c303      	stmia	r3!, {r0, r1}
  _ctrl_xfer.buffer = NULL;
 800691e:	4b07      	ldr	r3, [pc, #28]	@ (800693c <usbd_control_set_request+0x30>)
 8006920:	2200      	movs	r2, #0
 8006922:	609a      	str	r2, [r3, #8]
  _ctrl_xfer.total_xferred = 0;
 8006924:	4b05      	ldr	r3, [pc, #20]	@ (800693c <usbd_control_set_request+0x30>)
 8006926:	2200      	movs	r2, #0
 8006928:	81da      	strh	r2, [r3, #14]
  _ctrl_xfer.data_len = 0;
 800692a:	4b04      	ldr	r3, [pc, #16]	@ (800693c <usbd_control_set_request+0x30>)
 800692c:	2200      	movs	r2, #0
 800692e:	819a      	strh	r2, [r3, #12]
}
 8006930:	bf00      	nop
 8006932:	370c      	adds	r7, #12
 8006934:	46bd      	mov	sp, r7
 8006936:	f85d 7b04 	ldr.w	r7, [sp], #4
 800693a:	4770      	bx	lr
 800693c:	24001e14 	.word	0x24001e14

08006940 <usbd_control_xfer_cb>:

// callback when a transaction complete on
// - DATA stage of control endpoint or
// - Status stage
bool usbd_control_xfer_cb(uint8_t rhport, uint8_t ep_addr, xfer_result_t result, uint32_t xferred_bytes) {
 8006940:	b580      	push	{r7, lr}
 8006942:	b088      	sub	sp, #32
 8006944:	af00      	add	r7, sp, #0
 8006946:	603b      	str	r3, [r7, #0]
 8006948:	4603      	mov	r3, r0
 800694a:	71fb      	strb	r3, [r7, #7]
 800694c:	460b      	mov	r3, r1
 800694e:	71bb      	strb	r3, [r7, #6]
 8006950:	4613      	mov	r3, r2
 8006952:	717b      	strb	r3, [r7, #5]
 8006954:	79bb      	ldrb	r3, [r7, #6]
 8006956:	73fb      	strb	r3, [r7, #15]
 8006958:	7bfb      	ldrb	r3, [r7, #15]
 800695a:	09db      	lsrs	r3, r3, #7
 800695c:	b2db      	uxtb	r3, r3
  (void) result;

  // Endpoint Address is opposite to direction bit, this is Status Stage complete event
  if (tu_edpt_dir(ep_addr) != _ctrl_xfer.request.bmRequestType_bit.direction) {
 800695e:	4a4f      	ldr	r2, [pc, #316]	@ (8006a9c <usbd_control_xfer_cb+0x15c>)
 8006960:	7812      	ldrb	r2, [r2, #0]
 8006962:	f3c2 12c0 	ubfx	r2, r2, #7, #1
 8006966:	b2d2      	uxtb	r2, r2
 8006968:	4293      	cmp	r3, r2
 800696a:	d01e      	beq.n	80069aa <usbd_control_xfer_cb+0x6a>
    TU_ASSERT(0 == xferred_bytes);
 800696c:	683b      	ldr	r3, [r7, #0]
 800696e:	2b00      	cmp	r3, #0
 8006970:	d00a      	beq.n	8006988 <usbd_control_xfer_cb+0x48>
 8006972:	4b4b      	ldr	r3, [pc, #300]	@ (8006aa0 <usbd_control_xfer_cb+0x160>)
 8006974:	613b      	str	r3, [r7, #16]
 8006976:	693b      	ldr	r3, [r7, #16]
 8006978:	681b      	ldr	r3, [r3, #0]
 800697a:	f003 0301 	and.w	r3, r3, #1
 800697e:	2b00      	cmp	r3, #0
 8006980:	d000      	beq.n	8006984 <usbd_control_xfer_cb+0x44>
 8006982:	be00      	bkpt	0x0000
 8006984:	2300      	movs	r3, #0
 8006986:	e084      	b.n	8006a92 <usbd_control_xfer_cb+0x152>

    // invoke optional dcd hook if available
    dcd_edpt0_status_complete(rhport, &_ctrl_xfer.request);
 8006988:	79fb      	ldrb	r3, [r7, #7]
 800698a:	4944      	ldr	r1, [pc, #272]	@ (8006a9c <usbd_control_xfer_cb+0x15c>)
 800698c:	4618      	mov	r0, r3
 800698e:	f7ff fe97 	bl	80066c0 <dcd_edpt0_status_complete>

    if (_ctrl_xfer.complete_cb) {
 8006992:	4b42      	ldr	r3, [pc, #264]	@ (8006a9c <usbd_control_xfer_cb+0x15c>)
 8006994:	691b      	ldr	r3, [r3, #16]
 8006996:	2b00      	cmp	r3, #0
 8006998:	d005      	beq.n	80069a6 <usbd_control_xfer_cb+0x66>
      // TODO refactor with usbd_driver_print_control_complete_name
      _ctrl_xfer.complete_cb(rhport, CONTROL_STAGE_ACK, &_ctrl_xfer.request);
 800699a:	4b40      	ldr	r3, [pc, #256]	@ (8006a9c <usbd_control_xfer_cb+0x15c>)
 800699c:	691b      	ldr	r3, [r3, #16]
 800699e:	79f8      	ldrb	r0, [r7, #7]
 80069a0:	4a3e      	ldr	r2, [pc, #248]	@ (8006a9c <usbd_control_xfer_cb+0x15c>)
 80069a2:	2103      	movs	r1, #3
 80069a4:	4798      	blx	r3
    }

    return true;
 80069a6:	2301      	movs	r3, #1
 80069a8:	e073      	b.n	8006a92 <usbd_control_xfer_cb+0x152>
  }

  if (_ctrl_xfer.request.bmRequestType_bit.direction == TUSB_DIR_OUT) {
 80069aa:	4b3c      	ldr	r3, [pc, #240]	@ (8006a9c <usbd_control_xfer_cb+0x15c>)
 80069ac:	781b      	ldrb	r3, [r3, #0]
 80069ae:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 80069b2:	b2db      	uxtb	r3, r3
 80069b4:	2b00      	cmp	r3, #0
 80069b6:	d10c      	bne.n	80069d2 <usbd_control_xfer_cb+0x92>
    TU_VERIFY(_ctrl_xfer.buffer);
 80069b8:	4b38      	ldr	r3, [pc, #224]	@ (8006a9c <usbd_control_xfer_cb+0x15c>)
 80069ba:	689b      	ldr	r3, [r3, #8]
 80069bc:	2b00      	cmp	r3, #0
 80069be:	d101      	bne.n	80069c4 <usbd_control_xfer_cb+0x84>
 80069c0:	2300      	movs	r3, #0
 80069c2:	e066      	b.n	8006a92 <usbd_control_xfer_cb+0x152>
    memcpy(_ctrl_xfer.buffer, _usbd_ctrl_buf, xferred_bytes);
 80069c4:	4b35      	ldr	r3, [pc, #212]	@ (8006a9c <usbd_control_xfer_cb+0x15c>)
 80069c6:	689b      	ldr	r3, [r3, #8]
 80069c8:	683a      	ldr	r2, [r7, #0]
 80069ca:	4936      	ldr	r1, [pc, #216]	@ (8006aa4 <usbd_control_xfer_cb+0x164>)
 80069cc:	4618      	mov	r0, r3
 80069ce:	f013 f8be 	bl	8019b4e <memcpy>
    TU_LOG_MEM(CFG_TUD_LOG_LEVEL, _usbd_ctrl_buf, xferred_bytes, 2);
  }

  _ctrl_xfer.total_xferred += (uint16_t) xferred_bytes;
 80069d2:	4b32      	ldr	r3, [pc, #200]	@ (8006a9c <usbd_control_xfer_cb+0x15c>)
 80069d4:	89da      	ldrh	r2, [r3, #14]
 80069d6:	683b      	ldr	r3, [r7, #0]
 80069d8:	b29b      	uxth	r3, r3
 80069da:	4413      	add	r3, r2
 80069dc:	b29a      	uxth	r2, r3
 80069de:	4b2f      	ldr	r3, [pc, #188]	@ (8006a9c <usbd_control_xfer_cb+0x15c>)
 80069e0:	81da      	strh	r2, [r3, #14]
  _ctrl_xfer.buffer += xferred_bytes;
 80069e2:	4b2e      	ldr	r3, [pc, #184]	@ (8006a9c <usbd_control_xfer_cb+0x15c>)
 80069e4:	689a      	ldr	r2, [r3, #8]
 80069e6:	683b      	ldr	r3, [r7, #0]
 80069e8:	4413      	add	r3, r2
 80069ea:	4a2c      	ldr	r2, [pc, #176]	@ (8006a9c <usbd_control_xfer_cb+0x15c>)
 80069ec:	6093      	str	r3, [r2, #8]

  // Data Stage is complete when all request's length are transferred or
  // a short packet is sent including zero-length packet.
  if ((_ctrl_xfer.request.wLength == _ctrl_xfer.total_xferred) ||
 80069ee:	4b2b      	ldr	r3, [pc, #172]	@ (8006a9c <usbd_control_xfer_cb+0x15c>)
 80069f0:	88da      	ldrh	r2, [r3, #6]
 80069f2:	4b2a      	ldr	r3, [pc, #168]	@ (8006a9c <usbd_control_xfer_cb+0x15c>)
 80069f4:	89db      	ldrh	r3, [r3, #14]
 80069f6:	429a      	cmp	r2, r3
 80069f8:	d002      	beq.n	8006a00 <usbd_control_xfer_cb+0xc0>
 80069fa:	683b      	ldr	r3, [r7, #0]
 80069fc:	2b3f      	cmp	r3, #63	@ 0x3f
 80069fe:	d831      	bhi.n	8006a64 <usbd_control_xfer_cb+0x124>
      (xferred_bytes < CFG_TUD_ENDPOINT0_SIZE)) {
    // DATA stage is complete
    bool is_ok = true;
 8006a00:	2301      	movs	r3, #1
 8006a02:	77fb      	strb	r3, [r7, #31]

    // invoke complete callback if set
    // callback can still stall control in status phase e.g out data does not make sense
    if (_ctrl_xfer.complete_cb) {
 8006a04:	4b25      	ldr	r3, [pc, #148]	@ (8006a9c <usbd_control_xfer_cb+0x15c>)
 8006a06:	691b      	ldr	r3, [r3, #16]
 8006a08:	2b00      	cmp	r3, #0
 8006a0a:	d007      	beq.n	8006a1c <usbd_control_xfer_cb+0xdc>
      #if CFG_TUSB_DEBUG >= CFG_TUD_LOG_LEVEL
      usbd_driver_print_control_complete_name(_ctrl_xfer.complete_cb);
      #endif

      is_ok = _ctrl_xfer.complete_cb(rhport, CONTROL_STAGE_DATA, &_ctrl_xfer.request);
 8006a0c:	4b23      	ldr	r3, [pc, #140]	@ (8006a9c <usbd_control_xfer_cb+0x15c>)
 8006a0e:	691b      	ldr	r3, [r3, #16]
 8006a10:	79f8      	ldrb	r0, [r7, #7]
 8006a12:	4a22      	ldr	r2, [pc, #136]	@ (8006a9c <usbd_control_xfer_cb+0x15c>)
 8006a14:	2102      	movs	r1, #2
 8006a16:	4798      	blx	r3
 8006a18:	4603      	mov	r3, r0
 8006a1a:	77fb      	strb	r3, [r7, #31]
    }

    if (is_ok) {
 8006a1c:	7ffb      	ldrb	r3, [r7, #31]
 8006a1e:	2b00      	cmp	r3, #0
 8006a20:	d015      	beq.n	8006a4e <usbd_control_xfer_cb+0x10e>
      // Send status
      TU_ASSERT(_status_stage_xact(rhport, &_ctrl_xfer.request));
 8006a22:	79fb      	ldrb	r3, [r7, #7]
 8006a24:	491d      	ldr	r1, [pc, #116]	@ (8006a9c <usbd_control_xfer_cb+0x15c>)
 8006a26:	4618      	mov	r0, r3
 8006a28:	f7ff fe56 	bl	80066d8 <_status_stage_xact>
 8006a2c:	4603      	mov	r3, r0
 8006a2e:	f083 0301 	eor.w	r3, r3, #1
 8006a32:	b2db      	uxtb	r3, r3
 8006a34:	2b00      	cmp	r3, #0
 8006a36:	d02a      	beq.n	8006a8e <usbd_control_xfer_cb+0x14e>
 8006a38:	4b19      	ldr	r3, [pc, #100]	@ (8006aa0 <usbd_control_xfer_cb+0x160>)
 8006a3a:	617b      	str	r3, [r7, #20]
 8006a3c:	697b      	ldr	r3, [r7, #20]
 8006a3e:	681b      	ldr	r3, [r3, #0]
 8006a40:	f003 0301 	and.w	r3, r3, #1
 8006a44:	2b00      	cmp	r3, #0
 8006a46:	d000      	beq.n	8006a4a <usbd_control_xfer_cb+0x10a>
 8006a48:	be00      	bkpt	0x0000
 8006a4a:	2300      	movs	r3, #0
 8006a4c:	e021      	b.n	8006a92 <usbd_control_xfer_cb+0x152>
    } else {
      // Stall both IN and OUT control endpoint
      dcd_edpt_stall(rhport, EDPT_CTRL_OUT);
 8006a4e:	79fb      	ldrb	r3, [r7, #7]
 8006a50:	2100      	movs	r1, #0
 8006a52:	4618      	mov	r0, r3
 8006a54:	f001 fb16 	bl	8008084 <dcd_edpt_stall>
      dcd_edpt_stall(rhport, EDPT_CTRL_IN);
 8006a58:	79fb      	ldrb	r3, [r7, #7]
 8006a5a:	2180      	movs	r1, #128	@ 0x80
 8006a5c:	4618      	mov	r0, r3
 8006a5e:	f001 fb11 	bl	8008084 <dcd_edpt_stall>
      (xferred_bytes < CFG_TUD_ENDPOINT0_SIZE)) {
 8006a62:	e014      	b.n	8006a8e <usbd_control_xfer_cb+0x14e>
    }
  } else {
    // More data to transfer
    TU_ASSERT(_data_stage_xact(rhport));
 8006a64:	79fb      	ldrb	r3, [r7, #7]
 8006a66:	4618      	mov	r0, r3
 8006a68:	f7ff fe72 	bl	8006750 <_data_stage_xact>
 8006a6c:	4603      	mov	r3, r0
 8006a6e:	f083 0301 	eor.w	r3, r3, #1
 8006a72:	b2db      	uxtb	r3, r3
 8006a74:	2b00      	cmp	r3, #0
 8006a76:	d00b      	beq.n	8006a90 <usbd_control_xfer_cb+0x150>
 8006a78:	4b09      	ldr	r3, [pc, #36]	@ (8006aa0 <usbd_control_xfer_cb+0x160>)
 8006a7a:	61bb      	str	r3, [r7, #24]
 8006a7c:	69bb      	ldr	r3, [r7, #24]
 8006a7e:	681b      	ldr	r3, [r3, #0]
 8006a80:	f003 0301 	and.w	r3, r3, #1
 8006a84:	2b00      	cmp	r3, #0
 8006a86:	d000      	beq.n	8006a8a <usbd_control_xfer_cb+0x14a>
 8006a88:	be00      	bkpt	0x0000
 8006a8a:	2300      	movs	r3, #0
 8006a8c:	e001      	b.n	8006a92 <usbd_control_xfer_cb+0x152>
      (xferred_bytes < CFG_TUD_ENDPOINT0_SIZE)) {
 8006a8e:	bf00      	nop
  }

  return true;
 8006a90:	2301      	movs	r3, #1
}
 8006a92:	4618      	mov	r0, r3
 8006a94:	3720      	adds	r7, #32
 8006a96:	46bd      	mov	sp, r7
 8006a98:	bd80      	pop	{r7, pc}
 8006a9a:	bf00      	nop
 8006a9c:	24001e14 	.word	0x24001e14
 8006aa0:	e000edf0 	.word	0xe000edf0
 8006aa4:	24001e28 	.word	0x24001e28

08006aa8 <rndis_report>:
#define ENC_BUF_SIZE    (OID_LIST_LENGTH * 4 + 32)

static void *encapsulated_buffer;

static void rndis_report(void)
{
 8006aa8:	b580      	push	{r7, lr}
 8006aaa:	af00      	add	r7, sp, #0
  netd_report(ndis_report, sizeof(ndis_report));
 8006aac:	2108      	movs	r1, #8
 8006aae:	4802      	ldr	r0, [pc, #8]	@ (8006ab8 <rndis_report+0x10>)
 8006ab0:	f7fd f808 	bl	8003ac4 <netd_report>
}
 8006ab4:	bf00      	nop
 8006ab6:	bd80      	pop	{r7, pc}
 8006ab8:	2400003c 	.word	0x2400003c

08006abc <rndis_query_cmplt32>:

static void rndis_query_cmplt32(int status, uint32_t data)
{
 8006abc:	b580      	push	{r7, lr}
 8006abe:	b084      	sub	sp, #16
 8006ac0:	af00      	add	r7, sp, #0
 8006ac2:	6078      	str	r0, [r7, #4]
 8006ac4:	6039      	str	r1, [r7, #0]
  rndis_query_cmplt_t *c;
  c = (rndis_query_cmplt_t *)encapsulated_buffer;
 8006ac6:	4b0e      	ldr	r3, [pc, #56]	@ (8006b00 <rndis_query_cmplt32+0x44>)
 8006ac8:	681b      	ldr	r3, [r3, #0]
 8006aca:	60fb      	str	r3, [r7, #12]
  c->MessageType = REMOTE_NDIS_QUERY_CMPLT;
 8006acc:	68fb      	ldr	r3, [r7, #12]
 8006ace:	4a0d      	ldr	r2, [pc, #52]	@ (8006b04 <rndis_query_cmplt32+0x48>)
 8006ad0:	601a      	str	r2, [r3, #0]
  c->MessageLength = sizeof(rndis_query_cmplt_t) + 4;
 8006ad2:	68fb      	ldr	r3, [r7, #12]
 8006ad4:	221c      	movs	r2, #28
 8006ad6:	605a      	str	r2, [r3, #4]
  c->InformationBufferLength = 4;
 8006ad8:	68fb      	ldr	r3, [r7, #12]
 8006ada:	2204      	movs	r2, #4
 8006adc:	611a      	str	r2, [r3, #16]
  c->InformationBufferOffset = 16;
 8006ade:	68fb      	ldr	r3, [r7, #12]
 8006ae0:	2210      	movs	r2, #16
 8006ae2:	615a      	str	r2, [r3, #20]
  c->Status = status;
 8006ae4:	687a      	ldr	r2, [r7, #4]
 8006ae6:	68fb      	ldr	r3, [r7, #12]
 8006ae8:	60da      	str	r2, [r3, #12]
  memcpy(c + 1, &data, sizeof(data));
 8006aea:	68fb      	ldr	r3, [r7, #12]
 8006aec:	3318      	adds	r3, #24
 8006aee:	683a      	ldr	r2, [r7, #0]
 8006af0:	601a      	str	r2, [r3, #0]
  rndis_report();
 8006af2:	f7ff ffd9 	bl	8006aa8 <rndis_report>
}
 8006af6:	bf00      	nop
 8006af8:	3710      	adds	r7, #16
 8006afa:	46bd      	mov	sp, r7
 8006afc:	bd80      	pop	{r7, pc}
 8006afe:	bf00      	nop
 8006b00:	24001e80 	.word	0x24001e80
 8006b04:	80000004 	.word	0x80000004

08006b08 <rndis_query_cmplt>:

static void rndis_query_cmplt(int status, const void *data, int size)
{
 8006b08:	b580      	push	{r7, lr}
 8006b0a:	b086      	sub	sp, #24
 8006b0c:	af00      	add	r7, sp, #0
 8006b0e:	60f8      	str	r0, [r7, #12]
 8006b10:	60b9      	str	r1, [r7, #8]
 8006b12:	607a      	str	r2, [r7, #4]
  rndis_query_cmplt_t *c;
  c = (rndis_query_cmplt_t *)encapsulated_buffer;
 8006b14:	4b10      	ldr	r3, [pc, #64]	@ (8006b58 <rndis_query_cmplt+0x50>)
 8006b16:	681b      	ldr	r3, [r3, #0]
 8006b18:	617b      	str	r3, [r7, #20]
  c->MessageType = REMOTE_NDIS_QUERY_CMPLT;
 8006b1a:	697b      	ldr	r3, [r7, #20]
 8006b1c:	4a0f      	ldr	r2, [pc, #60]	@ (8006b5c <rndis_query_cmplt+0x54>)
 8006b1e:	601a      	str	r2, [r3, #0]
  c->MessageLength = sizeof(rndis_query_cmplt_t) + size;
 8006b20:	687b      	ldr	r3, [r7, #4]
 8006b22:	f103 0218 	add.w	r2, r3, #24
 8006b26:	697b      	ldr	r3, [r7, #20]
 8006b28:	605a      	str	r2, [r3, #4]
  c->InformationBufferLength = size;
 8006b2a:	687a      	ldr	r2, [r7, #4]
 8006b2c:	697b      	ldr	r3, [r7, #20]
 8006b2e:	611a      	str	r2, [r3, #16]
  c->InformationBufferOffset = 16;
 8006b30:	697b      	ldr	r3, [r7, #20]
 8006b32:	2210      	movs	r2, #16
 8006b34:	615a      	str	r2, [r3, #20]
  c->Status = status;
 8006b36:	68fa      	ldr	r2, [r7, #12]
 8006b38:	697b      	ldr	r3, [r7, #20]
 8006b3a:	60da      	str	r2, [r3, #12]
  memcpy(c + 1, data, size);
 8006b3c:	697b      	ldr	r3, [r7, #20]
 8006b3e:	3318      	adds	r3, #24
 8006b40:	687a      	ldr	r2, [r7, #4]
 8006b42:	68b9      	ldr	r1, [r7, #8]
 8006b44:	4618      	mov	r0, r3
 8006b46:	f013 f802 	bl	8019b4e <memcpy>
  rndis_report();
 8006b4a:	f7ff ffad 	bl	8006aa8 <rndis_report>
}
 8006b4e:	bf00      	nop
 8006b50:	3718      	adds	r7, #24
 8006b52:	46bd      	mov	sp, r7
 8006b54:	bd80      	pop	{r7, pc}
 8006b56:	bf00      	nop
 8006b58:	24001e80 	.word	0x24001e80
 8006b5c:	80000004 	.word	0x80000004

08006b60 <rndis_query>:
                NDIS_MAC_OPTION_NO_LOOPBACK

static const char *rndis_vendor = RNDIS_VENDOR;

static void rndis_query(void)
{
 8006b60:	b598      	push	{r3, r4, r7, lr}
 8006b62:	af00      	add	r7, sp, #0
  switch (((rndis_query_msg_t *)encapsulated_buffer)->Oid)
 8006b64:	4ba7      	ldr	r3, [pc, #668]	@ (8006e04 <rndis_query+0x2a4>)
 8006b66:	681b      	ldr	r3, [r3, #0]
 8006b68:	68db      	ldr	r3, [r3, #12]
 8006b6a:	4aa7      	ldr	r2, [pc, #668]	@ (8006e08 <rndis_query+0x2a8>)
 8006b6c:	4293      	cmp	r3, r2
 8006b6e:	f000 811c 	beq.w	8006daa <rndis_query+0x24a>
 8006b72:	4aa5      	ldr	r2, [pc, #660]	@ (8006e08 <rndis_query+0x2a8>)
 8006b74:	4293      	cmp	r3, r2
 8006b76:	f200 813e 	bhi.w	8006df6 <rndis_query+0x296>
 8006b7a:	4aa4      	ldr	r2, [pc, #656]	@ (8006e0c <rndis_query+0x2ac>)
 8006b7c:	4293      	cmp	r3, r2
 8006b7e:	f000 810f 	beq.w	8006da0 <rndis_query+0x240>
 8006b82:	4aa2      	ldr	r2, [pc, #648]	@ (8006e0c <rndis_query+0x2ac>)
 8006b84:	4293      	cmp	r3, r2
 8006b86:	f200 8136 	bhi.w	8006df6 <rndis_query+0x296>
 8006b8a:	4aa1      	ldr	r2, [pc, #644]	@ (8006e10 <rndis_query+0x2b0>)
 8006b8c:	4293      	cmp	r3, r2
 8006b8e:	f000 8102 	beq.w	8006d96 <rndis_query+0x236>
 8006b92:	4a9f      	ldr	r2, [pc, #636]	@ (8006e10 <rndis_query+0x2b0>)
 8006b94:	4293      	cmp	r3, r2
 8006b96:	f200 812e 	bhi.w	8006df6 <rndis_query+0x296>
 8006b9a:	4a9e      	ldr	r2, [pc, #632]	@ (8006e14 <rndis_query+0x2b4>)
 8006b9c:	4293      	cmp	r3, r2
 8006b9e:	f200 812a 	bhi.w	8006df6 <rndis_query+0x296>
 8006ba2:	f1b3 3f01 	cmp.w	r3, #16843009	@ 0x1010101
 8006ba6:	d215      	bcs.n	8006bd4 <rndis_query+0x74>
 8006ba8:	4a9b      	ldr	r2, [pc, #620]	@ (8006e18 <rndis_query+0x2b8>)
 8006baa:	4293      	cmp	r3, r2
 8006bac:	f200 8123 	bhi.w	8006df6 <rndis_query+0x296>
 8006bb0:	4a9a      	ldr	r2, [pc, #616]	@ (8006e1c <rndis_query+0x2bc>)
 8006bb2:	4293      	cmp	r3, r2
 8006bb4:	d220      	bcs.n	8006bf8 <rndis_query+0x98>
 8006bb6:	4a9a      	ldr	r2, [pc, #616]	@ (8006e20 <rndis_query+0x2c0>)
 8006bb8:	4293      	cmp	r3, r2
 8006bba:	f000 80d3 	beq.w	8006d64 <rndis_query+0x204>
 8006bbe:	4a98      	ldr	r2, [pc, #608]	@ (8006e20 <rndis_query+0x2c0>)
 8006bc0:	4293      	cmp	r3, r2
 8006bc2:	f200 8118 	bhi.w	8006df6 <rndis_query+0x296>
 8006bc6:	4a97      	ldr	r2, [pc, #604]	@ (8006e24 <rndis_query+0x2c4>)
 8006bc8:	4293      	cmp	r3, r2
 8006bca:	d85b      	bhi.n	8006c84 <rndis_query+0x124>
 8006bcc:	4a96      	ldr	r2, [pc, #600]	@ (8006e28 <rndis_query+0x2c8>)
 8006bce:	4293      	cmp	r3, r2
 8006bd0:	d224      	bcs.n	8006c1c <rndis_query+0xbc>
 8006bd2:	e110      	b.n	8006df6 <rndis_query+0x296>
 8006bd4:	f1a3 3301 	sub.w	r3, r3, #16843009	@ 0x1010101
 8006bd8:	2b04      	cmp	r3, #4
 8006bda:	f200 810c 	bhi.w	8006df6 <rndis_query+0x296>
 8006bde:	a201      	add	r2, pc, #4	@ (adr r2, 8006be4 <rndis_query+0x84>)
 8006be0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006be4:	08006cb3 	.word	0x08006cb3
 8006be8:	08006ca5 	.word	0x08006ca5
 8006bec:	08006d79 	.word	0x08006d79
 8006bf0:	08006d6f 	.word	0x08006d6f
 8006bf4:	08006d83 	.word	0x08006d83
 8006bf8:	4a8c      	ldr	r2, [pc, #560]	@ (8006e2c <rndis_query+0x2cc>)
 8006bfa:	441a      	add	r2, r3
 8006bfc:	2a04      	cmp	r2, #4
 8006bfe:	f200 80fa 	bhi.w	8006df6 <rndis_query+0x296>
 8006c02:	a301      	add	r3, pc, #4	@ (adr r3, 8006c08 <rndis_query+0xa8>)
 8006c04:	f853 f022 	ldr.w	pc, [r3, r2, lsl #2]
 8006c08:	08006db5 	.word	0x08006db5
 8006c0c:	08006dc3 	.word	0x08006dc3
 8006c10:	08006ddf 	.word	0x08006ddf
 8006c14:	08006dd1 	.word	0x08006dd1
 8006c18:	08006ded 	.word	0x08006ded
 8006c1c:	4a84      	ldr	r2, [pc, #528]	@ (8006e30 <rndis_query+0x2d0>)
 8006c1e:	441a      	add	r2, r3
 8006c20:	2a15      	cmp	r2, #21
 8006c22:	f200 80e8 	bhi.w	8006df6 <rndis_query+0x296>
 8006c26:	a301      	add	r3, pc, #4	@ (adr r3, 8006c2c <rndis_query+0xcc>)
 8006c28:	f853 f022 	ldr.w	pc, [r3, r2, lsl #2]
 8006c2c:	08006c8d 	.word	0x08006c8d
 8006c30:	08006cdf 	.word	0x08006cdf
 8006c34:	08006cc1 	.word	0x08006cc1
 8006c38:	08006ccb 	.word	0x08006ccb
 8006c3c:	08006df7 	.word	0x08006df7
 8006c40:	08006d2b 	.word	0x08006d2b
 8006c44:	08006ce9 	.word	0x08006ce9
 8006c48:	08006df7 	.word	0x08006df7
 8006c4c:	08006df7 	.word	0x08006df7
 8006c50:	08006d43 	.word	0x08006d43
 8006c54:	08006d4f 	.word	0x08006d4f
 8006c58:	08006cf3 	.word	0x08006cf3
 8006c5c:	08006cff 	.word	0x08006cff
 8006c60:	08006d1d 	.word	0x08006d1d
 8006c64:	08006df7 	.word	0x08006df7
 8006c68:	08006df7 	.word	0x08006df7
 8006c6c:	08006d37 	.word	0x08006d37
 8006c70:	08006df7 	.word	0x08006df7
 8006c74:	08006d8d 	.word	0x08006d8d
 8006c78:	08006d5b 	.word	0x08006d5b
 8006c7c:	08006df7 	.word	0x08006df7
 8006c80:	08006c99 	.word	0x08006c99
 8006c84:	4a6b      	ldr	r2, [pc, #428]	@ (8006e34 <rndis_query+0x2d4>)
 8006c86:	4293      	cmp	r3, r2
 8006c88:	d024      	beq.n	8006cd4 <rndis_query+0x174>
 8006c8a:	e0b4      	b.n	8006df6 <rndis_query+0x296>
  {
    case OID_GEN_SUPPORTED_LIST:         rndis_query_cmplt(RNDIS_STATUS_SUCCESS, OIDSupportedList, 4 * OID_LIST_LENGTH); return;
 8006c8c:	2258      	movs	r2, #88	@ 0x58
 8006c8e:	496a      	ldr	r1, [pc, #424]	@ (8006e38 <rndis_query+0x2d8>)
 8006c90:	2000      	movs	r0, #0
 8006c92:	f7ff ff39 	bl	8006b08 <rndis_query_cmplt>
 8006c96:	e0b4      	b.n	8006e02 <rndis_query+0x2a2>
    case OID_GEN_VENDOR_DRIVER_VERSION:  rndis_query_cmplt32(RNDIS_STATUS_SUCCESS, 0x00001000);  return;
 8006c98:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8006c9c:	2000      	movs	r0, #0
 8006c9e:	f7ff ff0d 	bl	8006abc <rndis_query_cmplt32>
 8006ca2:	e0ae      	b.n	8006e02 <rndis_query+0x2a2>
    case OID_802_3_CURRENT_ADDRESS:      rndis_query_cmplt(RNDIS_STATUS_SUCCESS, station_hwaddr, 6); return;
 8006ca4:	4b65      	ldr	r3, [pc, #404]	@ (8006e3c <rndis_query+0x2dc>)
 8006ca6:	2206      	movs	r2, #6
 8006ca8:	4619      	mov	r1, r3
 8006caa:	2000      	movs	r0, #0
 8006cac:	f7ff ff2c 	bl	8006b08 <rndis_query_cmplt>
 8006cb0:	e0a7      	b.n	8006e02 <rndis_query+0x2a2>
    case OID_802_3_PERMANENT_ADDRESS:    rndis_query_cmplt(RNDIS_STATUS_SUCCESS, permanent_hwaddr, 6); return;
 8006cb2:	4b62      	ldr	r3, [pc, #392]	@ (8006e3c <rndis_query+0x2dc>)
 8006cb4:	2206      	movs	r2, #6
 8006cb6:	4619      	mov	r1, r3
 8006cb8:	2000      	movs	r0, #0
 8006cba:	f7ff ff25 	bl	8006b08 <rndis_query_cmplt>
 8006cbe:	e0a0      	b.n	8006e02 <rndis_query+0x2a2>
    case OID_GEN_MEDIA_SUPPORTED:        rndis_query_cmplt32(RNDIS_STATUS_SUCCESS, NDIS_MEDIUM_802_3); return;
 8006cc0:	2100      	movs	r1, #0
 8006cc2:	2000      	movs	r0, #0
 8006cc4:	f7ff fefa 	bl	8006abc <rndis_query_cmplt32>
 8006cc8:	e09b      	b.n	8006e02 <rndis_query+0x2a2>
    case OID_GEN_MEDIA_IN_USE:           rndis_query_cmplt32(RNDIS_STATUS_SUCCESS, NDIS_MEDIUM_802_3); return;
 8006cca:	2100      	movs	r1, #0
 8006ccc:	2000      	movs	r0, #0
 8006cce:	f7ff fef5 	bl	8006abc <rndis_query_cmplt32>
 8006cd2:	e096      	b.n	8006e02 <rndis_query+0x2a2>
    case OID_GEN_PHYSICAL_MEDIUM:        rndis_query_cmplt32(RNDIS_STATUS_SUCCESS, NDIS_MEDIUM_802_3); return;
 8006cd4:	2100      	movs	r1, #0
 8006cd6:	2000      	movs	r0, #0
 8006cd8:	f7ff fef0 	bl	8006abc <rndis_query_cmplt32>
 8006cdc:	e091      	b.n	8006e02 <rndis_query+0x2a2>
    case OID_GEN_HARDWARE_STATUS:        rndis_query_cmplt32(RNDIS_STATUS_SUCCESS, 0); return;
 8006cde:	2100      	movs	r1, #0
 8006ce0:	2000      	movs	r0, #0
 8006ce2:	f7ff feeb 	bl	8006abc <rndis_query_cmplt32>
 8006ce6:	e08c      	b.n	8006e02 <rndis_query+0x2a2>
    case OID_GEN_LINK_SPEED:             rndis_query_cmplt32(RNDIS_STATUS_SUCCESS, RNDIS_LINK_SPEED / 100); return;
 8006ce8:	4955      	ldr	r1, [pc, #340]	@ (8006e40 <rndis_query+0x2e0>)
 8006cea:	2000      	movs	r0, #0
 8006cec:	f7ff fee6 	bl	8006abc <rndis_query_cmplt32>
 8006cf0:	e087      	b.n	8006e02 <rndis_query+0x2a2>
    case OID_GEN_VENDOR_ID:              rndis_query_cmplt32(RNDIS_STATUS_SUCCESS, 0x00FFFFFF); return;
 8006cf2:	f06f 417f 	mvn.w	r1, #4278190080	@ 0xff000000
 8006cf6:	2000      	movs	r0, #0
 8006cf8:	f7ff fee0 	bl	8006abc <rndis_query_cmplt32>
 8006cfc:	e081      	b.n	8006e02 <rndis_query+0x2a2>
    case OID_GEN_VENDOR_DESCRIPTION:     rndis_query_cmplt(RNDIS_STATUS_SUCCESS, rndis_vendor, strlen(rndis_vendor) + 1); return;
 8006cfe:	4b51      	ldr	r3, [pc, #324]	@ (8006e44 <rndis_query+0x2e4>)
 8006d00:	681c      	ldr	r4, [r3, #0]
 8006d02:	4b50      	ldr	r3, [pc, #320]	@ (8006e44 <rndis_query+0x2e4>)
 8006d04:	681b      	ldr	r3, [r3, #0]
 8006d06:	4618      	mov	r0, r3
 8006d08:	f7f9 fb3a 	bl	8000380 <strlen>
 8006d0c:	4603      	mov	r3, r0
 8006d0e:	3301      	adds	r3, #1
 8006d10:	461a      	mov	r2, r3
 8006d12:	4621      	mov	r1, r4
 8006d14:	2000      	movs	r0, #0
 8006d16:	f7ff fef7 	bl	8006b08 <rndis_query_cmplt>
 8006d1a:	e072      	b.n	8006e02 <rndis_query+0x2a2>
    case OID_GEN_CURRENT_PACKET_FILTER:  rndis_query_cmplt32(RNDIS_STATUS_SUCCESS, oid_packet_filter); return;
 8006d1c:	4b4a      	ldr	r3, [pc, #296]	@ (8006e48 <rndis_query+0x2e8>)
 8006d1e:	681b      	ldr	r3, [r3, #0]
 8006d20:	4619      	mov	r1, r3
 8006d22:	2000      	movs	r0, #0
 8006d24:	f7ff feca 	bl	8006abc <rndis_query_cmplt32>
 8006d28:	e06b      	b.n	8006e02 <rndis_query+0x2a2>
    case OID_GEN_MAXIMUM_FRAME_SIZE:     rndis_query_cmplt32(RNDIS_STATUS_SUCCESS, CFG_TUD_NET_MTU /*- SIZEOF_ETH_HDR*/); return;
 8006d2a:	f240 51ea 	movw	r1, #1514	@ 0x5ea
 8006d2e:	2000      	movs	r0, #0
 8006d30:	f7ff fec4 	bl	8006abc <rndis_query_cmplt32>
 8006d34:	e065      	b.n	8006e02 <rndis_query+0x2a2>
    case OID_GEN_MAXIMUM_TOTAL_SIZE:     rndis_query_cmplt32(RNDIS_STATUS_SUCCESS, CFG_TUD_NET_MTU); return;
 8006d36:	f240 51ea 	movw	r1, #1514	@ 0x5ea
 8006d3a:	2000      	movs	r0, #0
 8006d3c:	f7ff febe 	bl	8006abc <rndis_query_cmplt32>
 8006d40:	e05f      	b.n	8006e02 <rndis_query+0x2a2>
    case OID_GEN_TRANSMIT_BLOCK_SIZE:    rndis_query_cmplt32(RNDIS_STATUS_SUCCESS, CFG_TUD_NET_MTU); return;
 8006d42:	f240 51ea 	movw	r1, #1514	@ 0x5ea
 8006d46:	2000      	movs	r0, #0
 8006d48:	f7ff feb8 	bl	8006abc <rndis_query_cmplt32>
 8006d4c:	e059      	b.n	8006e02 <rndis_query+0x2a2>
    case OID_GEN_RECEIVE_BLOCK_SIZE:     rndis_query_cmplt32(RNDIS_STATUS_SUCCESS, CFG_TUD_NET_MTU); return;
 8006d4e:	f240 51ea 	movw	r1, #1514	@ 0x5ea
 8006d52:	2000      	movs	r0, #0
 8006d54:	f7ff feb2 	bl	8006abc <rndis_query_cmplt32>
 8006d58:	e053      	b.n	8006e02 <rndis_query+0x2a2>
    case OID_GEN_MEDIA_CONNECT_STATUS:   rndis_query_cmplt32(RNDIS_STATUS_SUCCESS, NDIS_MEDIA_STATE_CONNECTED); return;
 8006d5a:	2100      	movs	r1, #0
 8006d5c:	2000      	movs	r0, #0
 8006d5e:	f7ff fead 	bl	8006abc <rndis_query_cmplt32>
 8006d62:	e04e      	b.n	8006e02 <rndis_query+0x2a2>
    case OID_GEN_RNDIS_CONFIG_PARAMETER: rndis_query_cmplt32(RNDIS_STATUS_SUCCESS, 0); return;
 8006d64:	2100      	movs	r1, #0
 8006d66:	2000      	movs	r0, #0
 8006d68:	f7ff fea8 	bl	8006abc <rndis_query_cmplt32>
 8006d6c:	e049      	b.n	8006e02 <rndis_query+0x2a2>
    case OID_802_3_MAXIMUM_LIST_SIZE:    rndis_query_cmplt32(RNDIS_STATUS_SUCCESS, 1); return;
 8006d6e:	2101      	movs	r1, #1
 8006d70:	2000      	movs	r0, #0
 8006d72:	f7ff fea3 	bl	8006abc <rndis_query_cmplt32>
 8006d76:	e044      	b.n	8006e02 <rndis_query+0x2a2>
    case OID_802_3_MULTICAST_LIST:       rndis_query_cmplt32(RNDIS_STATUS_NOT_SUPPORTED, 0); return;
 8006d78:	2100      	movs	r1, #0
 8006d7a:	4834      	ldr	r0, [pc, #208]	@ (8006e4c <rndis_query+0x2ec>)
 8006d7c:	f7ff fe9e 	bl	8006abc <rndis_query_cmplt32>
 8006d80:	e03f      	b.n	8006e02 <rndis_query+0x2a2>
    case OID_802_3_MAC_OPTIONS:          rndis_query_cmplt32(RNDIS_STATUS_NOT_SUPPORTED, 0); return;
 8006d82:	2100      	movs	r1, #0
 8006d84:	4831      	ldr	r0, [pc, #196]	@ (8006e4c <rndis_query+0x2ec>)
 8006d86:	f7ff fe99 	bl	8006abc <rndis_query_cmplt32>
 8006d8a:	e03a      	b.n	8006e02 <rndis_query+0x2a2>
    case OID_GEN_MAC_OPTIONS:            rndis_query_cmplt32(RNDIS_STATUS_SUCCESS, /*MAC_OPT*/ 0); return;
 8006d8c:	2100      	movs	r1, #0
 8006d8e:	2000      	movs	r0, #0
 8006d90:	f7ff fe94 	bl	8006abc <rndis_query_cmplt32>
 8006d94:	e035      	b.n	8006e02 <rndis_query+0x2a2>
    case OID_802_3_RCV_ERROR_ALIGNMENT:  rndis_query_cmplt32(RNDIS_STATUS_SUCCESS, 0); return;
 8006d96:	2100      	movs	r1, #0
 8006d98:	2000      	movs	r0, #0
 8006d9a:	f7ff fe8f 	bl	8006abc <rndis_query_cmplt32>
 8006d9e:	e030      	b.n	8006e02 <rndis_query+0x2a2>
    case OID_802_3_XMIT_ONE_COLLISION:   rndis_query_cmplt32(RNDIS_STATUS_SUCCESS, 0); return;
 8006da0:	2100      	movs	r1, #0
 8006da2:	2000      	movs	r0, #0
 8006da4:	f7ff fe8a 	bl	8006abc <rndis_query_cmplt32>
 8006da8:	e02b      	b.n	8006e02 <rndis_query+0x2a2>
    case OID_802_3_XMIT_MORE_COLLISIONS: rndis_query_cmplt32(RNDIS_STATUS_SUCCESS, 0); return;
 8006daa:	2100      	movs	r1, #0
 8006dac:	2000      	movs	r0, #0
 8006dae:	f7ff fe85 	bl	8006abc <rndis_query_cmplt32>
 8006db2:	e026      	b.n	8006e02 <rndis_query+0x2a2>
    case OID_GEN_XMIT_OK:                rndis_query_cmplt32(RNDIS_STATUS_SUCCESS, usb_eth_stat.txok); return;
 8006db4:	4b26      	ldr	r3, [pc, #152]	@ (8006e50 <rndis_query+0x2f0>)
 8006db6:	681b      	ldr	r3, [r3, #0]
 8006db8:	4619      	mov	r1, r3
 8006dba:	2000      	movs	r0, #0
 8006dbc:	f7ff fe7e 	bl	8006abc <rndis_query_cmplt32>
 8006dc0:	e01f      	b.n	8006e02 <rndis_query+0x2a2>
    case OID_GEN_RCV_OK:                 rndis_query_cmplt32(RNDIS_STATUS_SUCCESS, usb_eth_stat.rxok); return;
 8006dc2:	4b23      	ldr	r3, [pc, #140]	@ (8006e50 <rndis_query+0x2f0>)
 8006dc4:	685b      	ldr	r3, [r3, #4]
 8006dc6:	4619      	mov	r1, r3
 8006dc8:	2000      	movs	r0, #0
 8006dca:	f7ff fe77 	bl	8006abc <rndis_query_cmplt32>
 8006dce:	e018      	b.n	8006e02 <rndis_query+0x2a2>
    case OID_GEN_RCV_ERROR:              rndis_query_cmplt32(RNDIS_STATUS_SUCCESS, usb_eth_stat.rxbad); return;
 8006dd0:	4b1f      	ldr	r3, [pc, #124]	@ (8006e50 <rndis_query+0x2f0>)
 8006dd2:	68db      	ldr	r3, [r3, #12]
 8006dd4:	4619      	mov	r1, r3
 8006dd6:	2000      	movs	r0, #0
 8006dd8:	f7ff fe70 	bl	8006abc <rndis_query_cmplt32>
 8006ddc:	e011      	b.n	8006e02 <rndis_query+0x2a2>
    case OID_GEN_XMIT_ERROR:             rndis_query_cmplt32(RNDIS_STATUS_SUCCESS, usb_eth_stat.txbad); return;
 8006dde:	4b1c      	ldr	r3, [pc, #112]	@ (8006e50 <rndis_query+0x2f0>)
 8006de0:	689b      	ldr	r3, [r3, #8]
 8006de2:	4619      	mov	r1, r3
 8006de4:	2000      	movs	r0, #0
 8006de6:	f7ff fe69 	bl	8006abc <rndis_query_cmplt32>
 8006dea:	e00a      	b.n	8006e02 <rndis_query+0x2a2>
    case OID_GEN_RCV_NO_BUFFER:          rndis_query_cmplt32(RNDIS_STATUS_SUCCESS, 0); return;
 8006dec:	2100      	movs	r1, #0
 8006dee:	2000      	movs	r0, #0
 8006df0:	f7ff fe64 	bl	8006abc <rndis_query_cmplt32>
 8006df4:	e005      	b.n	8006e02 <rndis_query+0x2a2>
    default:                             rndis_query_cmplt(RNDIS_STATUS_FAILURE, NULL, 0); return;
 8006df6:	2200      	movs	r2, #0
 8006df8:	2100      	movs	r1, #0
 8006dfa:	4816      	ldr	r0, [pc, #88]	@ (8006e54 <rndis_query+0x2f4>)
 8006dfc:	f7ff fe84 	bl	8006b08 <rndis_query_cmplt>
 8006e00:	bf00      	nop
  }
}
 8006e02:	bd98      	pop	{r3, r4, r7, pc}
 8006e04:	24001e80 	.word	0x24001e80
 8006e08:	01020103 	.word	0x01020103
 8006e0c:	01020102 	.word	0x01020102
 8006e10:	01020101 	.word	0x01020101
 8006e14:	01010105 	.word	0x01010105
 8006e18:	00020105 	.word	0x00020105
 8006e1c:	00020101 	.word	0x00020101
 8006e20:	0001021b 	.word	0x0001021b
 8006e24:	00010116 	.word	0x00010116
 8006e28:	00010101 	.word	0x00010101
 8006e2c:	fffdfeff 	.word	0xfffdfeff
 8006e30:	fffefeff 	.word	0xfffefeff
 8006e34:	00010202 	.word	0x00010202
 8006e38:	0801bf60 	.word	0x0801bf60
 8006e3c:	24000700 	.word	0x24000700
 8006e40:	0001d4c0 	.word	0x0001d4c0
 8006e44:	24000044 	.word	0x24000044
 8006e48:	24001e78 	.word	0x24001e78
 8006e4c:	c00000bb 	.word	0xc00000bb
 8006e50:	24001e68 	.word	0x24001e68
 8006e54:	c0000001 	.word	0xc0000001

08006e58 <rndis_handle_config_parm>:

#define INFBUF  ((uint8_t *)&(m->RequestId) + m->InformationBufferOffset)

static void rndis_handle_config_parm(const char *data, int keyoffset, int valoffset, int keylen, int vallen)
{
 8006e58:	b480      	push	{r7}
 8006e5a:	b085      	sub	sp, #20
 8006e5c:	af00      	add	r7, sp, #0
 8006e5e:	60f8      	str	r0, [r7, #12]
 8006e60:	60b9      	str	r1, [r7, #8]
 8006e62:	607a      	str	r2, [r7, #4]
 8006e64:	603b      	str	r3, [r7, #0]
    (void)data;
    (void)keyoffset;
    (void)valoffset;
    (void)keylen;
    (void)vallen;
}
 8006e66:	bf00      	nop
 8006e68:	3714      	adds	r7, #20
 8006e6a:	46bd      	mov	sp, r7
 8006e6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e70:	4770      	bx	lr

08006e72 <rndis_packetFilter>:

static void rndis_packetFilter(uint32_t newfilter)
{
 8006e72:	b480      	push	{r7}
 8006e74:	b083      	sub	sp, #12
 8006e76:	af00      	add	r7, sp, #0
 8006e78:	6078      	str	r0, [r7, #4]
    (void)newfilter;
}
 8006e7a:	bf00      	nop
 8006e7c:	370c      	adds	r7, #12
 8006e7e:	46bd      	mov	sp, r7
 8006e80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e84:	4770      	bx	lr
	...

08006e88 <rndis_handle_set_msg>:

static void rndis_handle_set_msg(void)
{
 8006e88:	b580      	push	{r7, lr}
 8006e8a:	b088      	sub	sp, #32
 8006e8c:	af02      	add	r7, sp, #8
  rndis_set_cmplt_t *c;
  rndis_set_msg_t *m;
  rndis_Oid_t oid;

  c = (rndis_set_cmplt_t *)encapsulated_buffer;
 8006e8e:	4b3d      	ldr	r3, [pc, #244]	@ (8006f84 <rndis_handle_set_msg+0xfc>)
 8006e90:	681b      	ldr	r3, [r3, #0]
 8006e92:	617b      	str	r3, [r7, #20]
  m = (rndis_set_msg_t *)encapsulated_buffer;
 8006e94:	4b3b      	ldr	r3, [pc, #236]	@ (8006f84 <rndis_handle_set_msg+0xfc>)
 8006e96:	681b      	ldr	r3, [r3, #0]
 8006e98:	613b      	str	r3, [r7, #16]

  oid = m->Oid;
 8006e9a:	693b      	ldr	r3, [r7, #16]
 8006e9c:	68db      	ldr	r3, [r3, #12]
 8006e9e:	60fb      	str	r3, [r7, #12]
  c->MessageType = REMOTE_NDIS_SET_CMPLT;
 8006ea0:	697b      	ldr	r3, [r7, #20]
 8006ea2:	4a39      	ldr	r2, [pc, #228]	@ (8006f88 <rndis_handle_set_msg+0x100>)
 8006ea4:	601a      	str	r2, [r3, #0]
  c->MessageLength = sizeof(rndis_set_cmplt_t);
 8006ea6:	697b      	ldr	r3, [r7, #20]
 8006ea8:	2210      	movs	r2, #16
 8006eaa:	605a      	str	r2, [r3, #4]
  c->Status = RNDIS_STATUS_SUCCESS;
 8006eac:	697b      	ldr	r3, [r7, #20]
 8006eae:	2200      	movs	r2, #0
 8006eb0:	60da      	str	r2, [r3, #12]

  switch (oid)
 8006eb2:	68fb      	ldr	r3, [r7, #12]
 8006eb4:	4a35      	ldr	r2, [pc, #212]	@ (8006f8c <rndis_handle_set_msg+0x104>)
 8006eb6:	4293      	cmp	r3, r2
 8006eb8:	d058      	beq.n	8006f6c <rndis_handle_set_msg+0xe4>
 8006eba:	68fb      	ldr	r3, [r7, #12]
 8006ebc:	4a33      	ldr	r2, [pc, #204]	@ (8006f8c <rndis_handle_set_msg+0x104>)
 8006ebe:	4293      	cmp	r3, r2
 8006ec0:	d850      	bhi.n	8006f64 <rndis_handle_set_msg+0xdc>
 8006ec2:	68fb      	ldr	r3, [r7, #12]
 8006ec4:	4a32      	ldr	r2, [pc, #200]	@ (8006f90 <rndis_handle_set_msg+0x108>)
 8006ec6:	4293      	cmp	r3, r2
 8006ec8:	d014      	beq.n	8006ef4 <rndis_handle_set_msg+0x6c>
 8006eca:	68fb      	ldr	r3, [r7, #12]
 8006ecc:	4a30      	ldr	r2, [pc, #192]	@ (8006f90 <rndis_handle_set_msg+0x108>)
 8006ece:	4293      	cmp	r3, r2
 8006ed0:	d848      	bhi.n	8006f64 <rndis_handle_set_msg+0xdc>
 8006ed2:	68fb      	ldr	r3, [r7, #12]
 8006ed4:	4a2f      	ldr	r2, [pc, #188]	@ (8006f94 <rndis_handle_set_msg+0x10c>)
 8006ed6:	4293      	cmp	r3, r2
 8006ed8:	d04a      	beq.n	8006f70 <rndis_handle_set_msg+0xe8>
 8006eda:	68fb      	ldr	r3, [r7, #12]
 8006edc:	4a2d      	ldr	r2, [pc, #180]	@ (8006f94 <rndis_handle_set_msg+0x10c>)
 8006ede:	4293      	cmp	r3, r2
 8006ee0:	d840      	bhi.n	8006f64 <rndis_handle_set_msg+0xdc>
 8006ee2:	68fb      	ldr	r3, [r7, #12]
 8006ee4:	4a2c      	ldr	r2, [pc, #176]	@ (8006f98 <rndis_handle_set_msg+0x110>)
 8006ee6:	4293      	cmp	r3, r2
 8006ee8:	d021      	beq.n	8006f2e <rndis_handle_set_msg+0xa6>
 8006eea:	68fb      	ldr	r3, [r7, #12]
 8006eec:	4a2b      	ldr	r2, [pc, #172]	@ (8006f9c <rndis_handle_set_msg+0x114>)
 8006eee:	4293      	cmp	r3, r2
 8006ef0:	d040      	beq.n	8006f74 <rndis_handle_set_msg+0xec>
 8006ef2:	e037      	b.n	8006f64 <rndis_handle_set_msg+0xdc>
  {
    /* Parameters set up in 'Advanced' tab */
    case OID_GEN_RNDIS_CONFIG_PARAMETER:
      {
        rndis_config_parameter_t *p;
        char *ptr = (char *)m;
 8006ef4:	693b      	ldr	r3, [r7, #16]
 8006ef6:	60bb      	str	r3, [r7, #8]
        ptr += sizeof(rndis_generic_msg_t);
 8006ef8:	68bb      	ldr	r3, [r7, #8]
 8006efa:	3308      	adds	r3, #8
 8006efc:	60bb      	str	r3, [r7, #8]
        ptr += m->InformationBufferOffset;
 8006efe:	693b      	ldr	r3, [r7, #16]
 8006f00:	695b      	ldr	r3, [r3, #20]
 8006f02:	68ba      	ldr	r2, [r7, #8]
 8006f04:	4413      	add	r3, r2
 8006f06:	60bb      	str	r3, [r7, #8]
        p = (rndis_config_parameter_t *) ((void*) ptr);
 8006f08:	68bb      	ldr	r3, [r7, #8]
 8006f0a:	607b      	str	r3, [r7, #4]
        rndis_handle_config_parm(ptr, p->ParameterNameOffset, p->ParameterValueOffset, p->ParameterNameLength, p->ParameterValueLength);
 8006f0c:	687b      	ldr	r3, [r7, #4]
 8006f0e:	681b      	ldr	r3, [r3, #0]
 8006f10:	4619      	mov	r1, r3
 8006f12:	687b      	ldr	r3, [r7, #4]
 8006f14:	68db      	ldr	r3, [r3, #12]
 8006f16:	461a      	mov	r2, r3
 8006f18:	687b      	ldr	r3, [r7, #4]
 8006f1a:	685b      	ldr	r3, [r3, #4]
 8006f1c:	4618      	mov	r0, r3
 8006f1e:	687b      	ldr	r3, [r7, #4]
 8006f20:	691b      	ldr	r3, [r3, #16]
 8006f22:	9300      	str	r3, [sp, #0]
 8006f24:	4603      	mov	r3, r0
 8006f26:	68b8      	ldr	r0, [r7, #8]
 8006f28:	f7ff ff96 	bl	8006e58 <rndis_handle_config_parm>
      }
      break;
 8006f2c:	e023      	b.n	8006f76 <rndis_handle_set_msg+0xee>

    /* Mandatory general OIDs */
    case OID_GEN_CURRENT_PACKET_FILTER:
      memcpy(&oid_packet_filter, INFBUF, 4);
 8006f2e:	693b      	ldr	r3, [r7, #16]
 8006f30:	f103 0208 	add.w	r2, r3, #8
 8006f34:	693b      	ldr	r3, [r7, #16]
 8006f36:	695b      	ldr	r3, [r3, #20]
 8006f38:	4413      	add	r3, r2
 8006f3a:	681b      	ldr	r3, [r3, #0]
 8006f3c:	461a      	mov	r2, r3
 8006f3e:	4b18      	ldr	r3, [pc, #96]	@ (8006fa0 <rndis_handle_set_msg+0x118>)
 8006f40:	601a      	str	r2, [r3, #0]
      if (oid_packet_filter)
 8006f42:	4b17      	ldr	r3, [pc, #92]	@ (8006fa0 <rndis_handle_set_msg+0x118>)
 8006f44:	681b      	ldr	r3, [r3, #0]
 8006f46:	2b00      	cmp	r3, #0
 8006f48:	d008      	beq.n	8006f5c <rndis_handle_set_msg+0xd4>
      {
        rndis_packetFilter(oid_packet_filter);
 8006f4a:	4b15      	ldr	r3, [pc, #84]	@ (8006fa0 <rndis_handle_set_msg+0x118>)
 8006f4c:	681b      	ldr	r3, [r3, #0]
 8006f4e:	4618      	mov	r0, r3
 8006f50:	f7ff ff8f 	bl	8006e72 <rndis_packetFilter>
        rndis_state = rndis_data_initialized;
 8006f54:	4b13      	ldr	r3, [pc, #76]	@ (8006fa4 <rndis_handle_set_msg+0x11c>)
 8006f56:	2202      	movs	r2, #2
 8006f58:	701a      	strb	r2, [r3, #0]
      }
      else
      {
        rndis_state = rndis_initialized;
      }
      break;
 8006f5a:	e00c      	b.n	8006f76 <rndis_handle_set_msg+0xee>
        rndis_state = rndis_initialized;
 8006f5c:	4b11      	ldr	r3, [pc, #68]	@ (8006fa4 <rndis_handle_set_msg+0x11c>)
 8006f5e:	2201      	movs	r2, #1
 8006f60:	701a      	strb	r2, [r3, #0]
      break;
 8006f62:	e008      	b.n	8006f76 <rndis_handle_set_msg+0xee>
    /* Power Management: fails for now */
    case OID_PNP_ADD_WAKE_UP_PATTERN:
    case OID_PNP_REMOVE_WAKE_UP_PATTERN:
    case OID_PNP_ENABLE_WAKE_UP:
    default:
      c->Status = RNDIS_STATUS_FAILURE;
 8006f64:	697b      	ldr	r3, [r7, #20]
 8006f66:	4a10      	ldr	r2, [pc, #64]	@ (8006fa8 <rndis_handle_set_msg+0x120>)
 8006f68:	60da      	str	r2, [r3, #12]
      break;
 8006f6a:	e004      	b.n	8006f76 <rndis_handle_set_msg+0xee>
      break;
 8006f6c:	bf00      	nop
 8006f6e:	e002      	b.n	8006f76 <rndis_handle_set_msg+0xee>
      break;
 8006f70:	bf00      	nop
 8006f72:	e000      	b.n	8006f76 <rndis_handle_set_msg+0xee>
      break;
 8006f74:	bf00      	nop
  }

  /* c->MessageID is same as before */
  rndis_report();
 8006f76:	f7ff fd97 	bl	8006aa8 <rndis_report>
  return;
 8006f7a:	bf00      	nop
}
 8006f7c:	3718      	adds	r7, #24
 8006f7e:	46bd      	mov	sp, r7
 8006f80:	bd80      	pop	{r7, pc}
 8006f82:	bf00      	nop
 8006f84:	24001e80 	.word	0x24001e80
 8006f88:	80000005 	.word	0x80000005
 8006f8c:	01010103 	.word	0x01010103
 8006f90:	0001021b 	.word	0x0001021b
 8006f94:	00010112 	.word	0x00010112
 8006f98:	0001010e 	.word	0x0001010e
 8006f9c:	0001010f 	.word	0x0001010f
 8006fa0:	24001e78 	.word	0x24001e78
 8006fa4:	24001e7c 	.word	0x24001e7c
 8006fa8:	c0000001 	.word	0xc0000001

08006fac <rndis_class_set_handler>:

void rndis_class_set_handler(uint8_t *data, int size)
{
 8006fac:	b580      	push	{r7, lr}
 8006fae:	b086      	sub	sp, #24
 8006fb0:	af00      	add	r7, sp, #0
 8006fb2:	6078      	str	r0, [r7, #4]
 8006fb4:	6039      	str	r1, [r7, #0]
  encapsulated_buffer = data;
 8006fb6:	4a3c      	ldr	r2, [pc, #240]	@ (80070a8 <rndis_class_set_handler+0xfc>)
 8006fb8:	687b      	ldr	r3, [r7, #4]
 8006fba:	6013      	str	r3, [r2, #0]
  (void)size;

  switch (((rndis_generic_msg_t *)encapsulated_buffer)->MessageType)
 8006fbc:	4b3a      	ldr	r3, [pc, #232]	@ (80070a8 <rndis_class_set_handler+0xfc>)
 8006fbe:	681b      	ldr	r3, [r3, #0]
 8006fc0:	681b      	ldr	r3, [r3, #0]
 8006fc2:	3b02      	subs	r3, #2
 8006fc4:	2b06      	cmp	r3, #6
 8006fc6:	d869      	bhi.n	800709c <rndis_class_set_handler+0xf0>
 8006fc8:	a201      	add	r2, pc, #4	@ (adr r2, 8006fd0 <rndis_class_set_handler+0x24>)
 8006fca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006fce:	bf00      	nop
 8006fd0:	08006fed 	.word	0x08006fed
 8006fd4:	0800709d 	.word	0x0800709d
 8006fd8:	08007049 	.word	0x08007049
 8006fdc:	0800704f 	.word	0x0800704f
 8006fe0:	08007055 	.word	0x08007055
 8006fe4:	0800709d 	.word	0x0800709d
 8006fe8:	0800707f 	.word	0x0800707f
  {
    case REMOTE_NDIS_INITIALIZE_MSG:
      {
        rndis_initialize_cmplt_t *m;
        m = ((rndis_initialize_cmplt_t *)encapsulated_buffer);
 8006fec:	4b2e      	ldr	r3, [pc, #184]	@ (80070a8 <rndis_class_set_handler+0xfc>)
 8006fee:	681b      	ldr	r3, [r3, #0]
 8006ff0:	60fb      	str	r3, [r7, #12]
        /* m->MessageID is same as before */
        m->MessageType = REMOTE_NDIS_INITIALIZE_CMPLT;
 8006ff2:	68fb      	ldr	r3, [r7, #12]
 8006ff4:	4a2d      	ldr	r2, [pc, #180]	@ (80070ac <rndis_class_set_handler+0x100>)
 8006ff6:	601a      	str	r2, [r3, #0]
        m->MessageLength = sizeof(rndis_initialize_cmplt_t);
 8006ff8:	68fb      	ldr	r3, [r7, #12]
 8006ffa:	2234      	movs	r2, #52	@ 0x34
 8006ffc:	605a      	str	r2, [r3, #4]
        m->MajorVersion = RNDIS_MAJOR_VERSION;
 8006ffe:	68fb      	ldr	r3, [r7, #12]
 8007000:	2201      	movs	r2, #1
 8007002:	611a      	str	r2, [r3, #16]
        m->MinorVersion = RNDIS_MINOR_VERSION;
 8007004:	68fb      	ldr	r3, [r7, #12]
 8007006:	2200      	movs	r2, #0
 8007008:	615a      	str	r2, [r3, #20]
        m->Status = RNDIS_STATUS_SUCCESS;
 800700a:	68fb      	ldr	r3, [r7, #12]
 800700c:	2200      	movs	r2, #0
 800700e:	60da      	str	r2, [r3, #12]
        m->DeviceFlags = RNDIS_DF_CONNECTIONLESS;
 8007010:	68fb      	ldr	r3, [r7, #12]
 8007012:	2201      	movs	r2, #1
 8007014:	619a      	str	r2, [r3, #24]
        m->Medium = RNDIS_MEDIUM_802_3;
 8007016:	68fb      	ldr	r3, [r7, #12]
 8007018:	2200      	movs	r2, #0
 800701a:	61da      	str	r2, [r3, #28]
        m->MaxPacketsPerTransfer = 1;
 800701c:	68fb      	ldr	r3, [r7, #12]
 800701e:	2201      	movs	r2, #1
 8007020:	621a      	str	r2, [r3, #32]
        m->MaxTransferSize = CFG_TUD_NET_MTU + sizeof(rndis_data_packet_t);
 8007022:	68fb      	ldr	r3, [r7, #12]
 8007024:	f240 6216 	movw	r2, #1558	@ 0x616
 8007028:	625a      	str	r2, [r3, #36]	@ 0x24
        m->PacketAlignmentFactor = 0;
 800702a:	68fb      	ldr	r3, [r7, #12]
 800702c:	2200      	movs	r2, #0
 800702e:	629a      	str	r2, [r3, #40]	@ 0x28
        m->AfListOffset = 0;
 8007030:	68fb      	ldr	r3, [r7, #12]
 8007032:	2200      	movs	r2, #0
 8007034:	62da      	str	r2, [r3, #44]	@ 0x2c
        m->AfListSize = 0;
 8007036:	68fb      	ldr	r3, [r7, #12]
 8007038:	2200      	movs	r2, #0
 800703a:	631a      	str	r2, [r3, #48]	@ 0x30
        rndis_state = rndis_initialized;
 800703c:	4b1c      	ldr	r3, [pc, #112]	@ (80070b0 <rndis_class_set_handler+0x104>)
 800703e:	2201      	movs	r2, #1
 8007040:	701a      	strb	r2, [r3, #0]
        rndis_report();
 8007042:	f7ff fd31 	bl	8006aa8 <rndis_report>
      }
      break;
 8007046:	e02a      	b.n	800709e <rndis_class_set_handler+0xf2>

    case REMOTE_NDIS_QUERY_MSG:
      rndis_query();
 8007048:	f7ff fd8a 	bl	8006b60 <rndis_query>
      break;
 800704c:	e027      	b.n	800709e <rndis_class_set_handler+0xf2>

    case REMOTE_NDIS_SET_MSG:
      rndis_handle_set_msg();
 800704e:	f7ff ff1b 	bl	8006e88 <rndis_handle_set_msg>
      break;
 8007052:	e024      	b.n	800709e <rndis_class_set_handler+0xf2>

    case REMOTE_NDIS_RESET_MSG:
      {
        rndis_reset_cmplt_t * m;
        m = ((rndis_reset_cmplt_t *)encapsulated_buffer);
 8007054:	4b14      	ldr	r3, [pc, #80]	@ (80070a8 <rndis_class_set_handler+0xfc>)
 8007056:	681b      	ldr	r3, [r3, #0]
 8007058:	613b      	str	r3, [r7, #16]
        rndis_state = rndis_uninitialized;
 800705a:	4b15      	ldr	r3, [pc, #84]	@ (80070b0 <rndis_class_set_handler+0x104>)
 800705c:	2200      	movs	r2, #0
 800705e:	701a      	strb	r2, [r3, #0]
        m->MessageType = REMOTE_NDIS_RESET_CMPLT;
 8007060:	693b      	ldr	r3, [r7, #16]
 8007062:	4a14      	ldr	r2, [pc, #80]	@ (80070b4 <rndis_class_set_handler+0x108>)
 8007064:	601a      	str	r2, [r3, #0]
        m->MessageLength = sizeof(rndis_reset_cmplt_t);
 8007066:	693b      	ldr	r3, [r7, #16]
 8007068:	2210      	movs	r2, #16
 800706a:	605a      	str	r2, [r3, #4]
        m->Status = RNDIS_STATUS_SUCCESS;
 800706c:	693b      	ldr	r3, [r7, #16]
 800706e:	2200      	movs	r2, #0
 8007070:	609a      	str	r2, [r3, #8]
        m->AddressingReset = 1; /* Make it look like we did something */
 8007072:	693b      	ldr	r3, [r7, #16]
 8007074:	2201      	movs	r2, #1
 8007076:	60da      	str	r2, [r3, #12]
          /* m->AddressingReset = 0; - Windows halts if set to 1 for some reason */
        rndis_report();
 8007078:	f7ff fd16 	bl	8006aa8 <rndis_report>
      }
      break;
 800707c:	e00f      	b.n	800709e <rndis_class_set_handler+0xf2>

    case REMOTE_NDIS_KEEPALIVE_MSG:
      {
        rndis_keepalive_cmplt_t * m;
        m = (rndis_keepalive_cmplt_t *)encapsulated_buffer;
 800707e:	4b0a      	ldr	r3, [pc, #40]	@ (80070a8 <rndis_class_set_handler+0xfc>)
 8007080:	681b      	ldr	r3, [r3, #0]
 8007082:	617b      	str	r3, [r7, #20]
        m->MessageType = REMOTE_NDIS_KEEPALIVE_CMPLT;
 8007084:	697b      	ldr	r3, [r7, #20]
 8007086:	4a0c      	ldr	r2, [pc, #48]	@ (80070b8 <rndis_class_set_handler+0x10c>)
 8007088:	601a      	str	r2, [r3, #0]
        m->MessageLength = sizeof(rndis_keepalive_cmplt_t);
 800708a:	697b      	ldr	r3, [r7, #20]
 800708c:	2210      	movs	r2, #16
 800708e:	605a      	str	r2, [r3, #4]
        m->Status = RNDIS_STATUS_SUCCESS;
 8007090:	697b      	ldr	r3, [r7, #20]
 8007092:	2200      	movs	r2, #0
 8007094:	60da      	str	r2, [r3, #12]
      }
      /* We have data to send back */
      rndis_report();
 8007096:	f7ff fd07 	bl	8006aa8 <rndis_report>
      break;
 800709a:	e000      	b.n	800709e <rndis_class_set_handler+0xf2>

    default:
      break;
 800709c:	bf00      	nop
  }
}
 800709e:	bf00      	nop
 80070a0:	3718      	adds	r7, #24
 80070a2:	46bd      	mov	sp, r7
 80070a4:	bd80      	pop	{r7, pc}
 80070a6:	bf00      	nop
 80070a8:	24001e80 	.word	0x24001e80
 80070ac:	80000002 	.word	0x80000002
 80070b0:	24001e7c 	.word	0x24001e7c
 80070b4:	80000006 	.word	0x80000006
 80070b8:	80000008 	.word	0x80000008

080070bc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80070bc:	b480      	push	{r7}
 80070be:	b083      	sub	sp, #12
 80070c0:	af00      	add	r7, sp, #0
 80070c2:	4603      	mov	r3, r0
 80070c4:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80070c6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80070ca:	2b00      	cmp	r3, #0
 80070cc:	db0b      	blt.n	80070e6 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80070ce:	88fb      	ldrh	r3, [r7, #6]
 80070d0:	f003 021f 	and.w	r2, r3, #31
 80070d4:	4907      	ldr	r1, [pc, #28]	@ (80070f4 <__NVIC_EnableIRQ+0x38>)
 80070d6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80070da:	095b      	lsrs	r3, r3, #5
 80070dc:	2001      	movs	r0, #1
 80070de:	fa00 f202 	lsl.w	r2, r0, r2
 80070e2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80070e6:	bf00      	nop
 80070e8:	370c      	adds	r7, #12
 80070ea:	46bd      	mov	sp, r7
 80070ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070f0:	4770      	bx	lr
 80070f2:	bf00      	nop
 80070f4:	e000e100 	.word	0xe000e100

080070f8 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 80070f8:	b480      	push	{r7}
 80070fa:	b083      	sub	sp, #12
 80070fc:	af00      	add	r7, sp, #0
 80070fe:	4603      	mov	r3, r0
 8007100:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8007102:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8007106:	2b00      	cmp	r3, #0
 8007108:	db12      	blt.n	8007130 <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800710a:	88fb      	ldrh	r3, [r7, #6]
 800710c:	f003 021f 	and.w	r2, r3, #31
 8007110:	490a      	ldr	r1, [pc, #40]	@ (800713c <__NVIC_DisableIRQ+0x44>)
 8007112:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8007116:	095b      	lsrs	r3, r3, #5
 8007118:	2001      	movs	r0, #1
 800711a:	fa00 f202 	lsl.w	r2, r0, r2
 800711e:	3320      	adds	r3, #32
 8007120:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8007124:	f3bf 8f4f 	dsb	sy
}
 8007128:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800712a:	f3bf 8f6f 	isb	sy
}
 800712e:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 8007130:	bf00      	nop
 8007132:	370c      	adds	r7, #12
 8007134:	46bd      	mov	sp, r7
 8007136:	f85d 7b04 	ldr.w	r7, [sp], #4
 800713a:	4770      	bx	lr
 800713c:	e000e100 	.word	0xe000e100

08007140 <dwc2_phy_init>:
}

// MCU specific PHY init, called BEFORE core reset
// - dwc2 3.30a (H5) use USB_HS_PHYC
// - dwc2 4.11a (U5) use femtoPHY
static inline void dwc2_phy_init(dwc2_regs_t* dwc2, uint8_t hs_phy_type) {
 8007140:	b480      	push	{r7}
 8007142:	b083      	sub	sp, #12
 8007144:	af00      	add	r7, sp, #0
 8007146:	6078      	str	r0, [r7, #4]
 8007148:	460b      	mov	r3, r1
 800714a:	70fb      	strb	r3, [r7, #3]
  if (hs_phy_type == HS_PHY_TYPE_NONE) {
 800714c:	78fb      	ldrb	r3, [r7, #3]
 800714e:	2b00      	cmp	r3, #0
 8007150:	d11e      	bne.n	8007190 <dwc2_phy_init+0x50>
    // Enable on-chip FS PHY
    dwc2->stm32_gccfg |= STM32_GCCFG_PWRDWN;
 8007152:	687b      	ldr	r3, [r7, #4]
 8007154:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007156:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 800715a:	687b      	ldr	r3, [r7, #4]
 800715c:	639a      	str	r2, [r3, #56]	@ 0x38
    // https://community.st.com/t5/stm32cubemx-mcus/why-stm32h743-usb-fs-doesn-t-work-if-freertos-tickless-idle/m-p/349480#M18867
    // H7 running on full-speed phy need to disable ULPI clock in sleep mode.
    // Otherwise, USB won't work when mcu executing WFI/WFE instruction i.e tick-less RTOS.
    // Note: there may be other family that is affected by this, but only H7 and F7 is tested so far
    #if defined(USB_OTG_FS_PERIPH_BASE) && defined(RCC_AHB1LPENR_USB2OTGFSULPILPEN)
    if ( USB_OTG_FS_PERIPH_BASE == (uint32_t) dwc2 ) {
 800715e:	687b      	ldr	r3, [r7, #4]
 8007160:	4a11      	ldr	r2, [pc, #68]	@ (80071a8 <dwc2_phy_init+0x68>)
 8007162:	4293      	cmp	r3, r2
 8007164:	d107      	bne.n	8007176 <dwc2_phy_init+0x36>
      RCC->AHB1LPENR &= ~RCC_AHB1LPENR_USB2OTGFSULPILPEN;
 8007166:	4b11      	ldr	r3, [pc, #68]	@ (80071ac <dwc2_phy_init+0x6c>)
 8007168:	f8d3 3100 	ldr.w	r3, [r3, #256]	@ 0x100
 800716c:	4a0f      	ldr	r2, [pc, #60]	@ (80071ac <dwc2_phy_init+0x6c>)
 800716e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8007172:	f8c2 3100 	str.w	r3, [r2, #256]	@ 0x100
    }
    #endif

    #if defined(USB_OTG_HS_PERIPH_BASE) && defined(RCC_AHB1LPENR_USB1OTGHSULPILPEN)
    if ( USB_OTG_HS_PERIPH_BASE == (uint32_t) dwc2 ) {
 8007176:	687b      	ldr	r3, [r7, #4]
 8007178:	4a0d      	ldr	r2, [pc, #52]	@ (80071b0 <dwc2_phy_init+0x70>)
 800717a:	4293      	cmp	r3, r2
 800717c:	d10e      	bne.n	800719c <dwc2_phy_init+0x5c>
      RCC->AHB1LPENR &= ~RCC_AHB1LPENR_USB1OTGHSULPILPEN;
 800717e:	4b0b      	ldr	r3, [pc, #44]	@ (80071ac <dwc2_phy_init+0x6c>)
 8007180:	f8d3 3100 	ldr.w	r3, [r3, #256]	@ 0x100
 8007184:	4a09      	ldr	r2, [pc, #36]	@ (80071ac <dwc2_phy_init+0x6c>)
 8007186:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800718a:	f8c2 3100 	str.w	r3, [r2, #256]	@ 0x100
      #else

      #endif
    }
  }
}
 800718e:	e005      	b.n	800719c <dwc2_phy_init+0x5c>
    dwc2->stm32_gccfg &= ~STM32_GCCFG_PWRDWN;
 8007190:	687b      	ldr	r3, [r7, #4]
 8007192:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007194:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8007198:	687b      	ldr	r3, [r7, #4]
 800719a:	639a      	str	r2, [r3, #56]	@ 0x38
}
 800719c:	bf00      	nop
 800719e:	370c      	adds	r7, #12
 80071a0:	46bd      	mov	sp, r7
 80071a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071a6:	4770      	bx	lr
 80071a8:	40080000 	.word	0x40080000
 80071ac:	58024400 	.word	0x58024400
 80071b0:	40040000 	.word	0x40040000

080071b4 <dwc2_phy_update>:

// MCU specific PHY update, it is called AFTER init() and core reset
static inline void dwc2_phy_update(dwc2_regs_t* dwc2, uint8_t hs_phy_type) {
 80071b4:	b480      	push	{r7}
 80071b6:	b085      	sub	sp, #20
 80071b8:	af00      	add	r7, sp, #0
 80071ba:	6078      	str	r0, [r7, #4]
 80071bc:	460b      	mov	r3, r1
 80071be:	70fb      	strb	r3, [r7, #3]
  // used to set turnaround time for fullspeed, nothing to do in highspeed mode
  if (hs_phy_type == HS_PHY_TYPE_NONE) {
 80071c0:	78fb      	ldrb	r3, [r7, #3]
 80071c2:	2b00      	cmp	r3, #0
 80071c4:	d152      	bne.n	800726c <dwc2_phy_update+0xb8>
    // Turnaround timeout depends on the AHB clock dictated by STM32 Reference Manual
    uint32_t turnaround;

    if (SystemCoreClock >= 32000000u) {
 80071c6:	4b2c      	ldr	r3, [pc, #176]	@ (8007278 <dwc2_phy_update+0xc4>)
 80071c8:	681b      	ldr	r3, [r3, #0]
 80071ca:	4a2c      	ldr	r2, [pc, #176]	@ (800727c <dwc2_phy_update+0xc8>)
 80071cc:	4293      	cmp	r3, r2
 80071ce:	d302      	bcc.n	80071d6 <dwc2_phy_update+0x22>
      turnaround = 0x6u;
 80071d0:	2306      	movs	r3, #6
 80071d2:	60fb      	str	r3, [r7, #12]
 80071d4:	e041      	b.n	800725a <dwc2_phy_update+0xa6>
    } else if (SystemCoreClock >= 27500000u) {
 80071d6:	4b28      	ldr	r3, [pc, #160]	@ (8007278 <dwc2_phy_update+0xc4>)
 80071d8:	681b      	ldr	r3, [r3, #0]
 80071da:	4a29      	ldr	r2, [pc, #164]	@ (8007280 <dwc2_phy_update+0xcc>)
 80071dc:	4293      	cmp	r3, r2
 80071de:	d902      	bls.n	80071e6 <dwc2_phy_update+0x32>
      turnaround = 0x7u;
 80071e0:	2307      	movs	r3, #7
 80071e2:	60fb      	str	r3, [r7, #12]
 80071e4:	e039      	b.n	800725a <dwc2_phy_update+0xa6>
    } else if (SystemCoreClock >= 24000000u) {
 80071e6:	4b24      	ldr	r3, [pc, #144]	@ (8007278 <dwc2_phy_update+0xc4>)
 80071e8:	681b      	ldr	r3, [r3, #0]
 80071ea:	4a26      	ldr	r2, [pc, #152]	@ (8007284 <dwc2_phy_update+0xd0>)
 80071ec:	4293      	cmp	r3, r2
 80071ee:	d302      	bcc.n	80071f6 <dwc2_phy_update+0x42>
      turnaround = 0x8u;
 80071f0:	2308      	movs	r3, #8
 80071f2:	60fb      	str	r3, [r7, #12]
 80071f4:	e031      	b.n	800725a <dwc2_phy_update+0xa6>
    } else if (SystemCoreClock >= 21800000u) {
 80071f6:	4b20      	ldr	r3, [pc, #128]	@ (8007278 <dwc2_phy_update+0xc4>)
 80071f8:	681b      	ldr	r3, [r3, #0]
 80071fa:	4a23      	ldr	r2, [pc, #140]	@ (8007288 <dwc2_phy_update+0xd4>)
 80071fc:	4293      	cmp	r3, r2
 80071fe:	d902      	bls.n	8007206 <dwc2_phy_update+0x52>
      turnaround = 0x9u;
 8007200:	2309      	movs	r3, #9
 8007202:	60fb      	str	r3, [r7, #12]
 8007204:	e029      	b.n	800725a <dwc2_phy_update+0xa6>
    }
    else if (SystemCoreClock >= 20000000u) {
 8007206:	4b1c      	ldr	r3, [pc, #112]	@ (8007278 <dwc2_phy_update+0xc4>)
 8007208:	681b      	ldr	r3, [r3, #0]
 800720a:	4a20      	ldr	r2, [pc, #128]	@ (800728c <dwc2_phy_update+0xd8>)
 800720c:	4293      	cmp	r3, r2
 800720e:	d902      	bls.n	8007216 <dwc2_phy_update+0x62>
      turnaround = 0xAu;
 8007210:	230a      	movs	r3, #10
 8007212:	60fb      	str	r3, [r7, #12]
 8007214:	e021      	b.n	800725a <dwc2_phy_update+0xa6>
    }
    else if (SystemCoreClock >= 18500000u) {
 8007216:	4b18      	ldr	r3, [pc, #96]	@ (8007278 <dwc2_phy_update+0xc4>)
 8007218:	681b      	ldr	r3, [r3, #0]
 800721a:	4a1d      	ldr	r2, [pc, #116]	@ (8007290 <dwc2_phy_update+0xdc>)
 800721c:	4293      	cmp	r3, r2
 800721e:	d902      	bls.n	8007226 <dwc2_phy_update+0x72>
      turnaround = 0xBu;
 8007220:	230b      	movs	r3, #11
 8007222:	60fb      	str	r3, [r7, #12]
 8007224:	e019      	b.n	800725a <dwc2_phy_update+0xa6>
    }
    else if (SystemCoreClock >= 17200000u) {
 8007226:	4b14      	ldr	r3, [pc, #80]	@ (8007278 <dwc2_phy_update+0xc4>)
 8007228:	681b      	ldr	r3, [r3, #0]
 800722a:	4a1a      	ldr	r2, [pc, #104]	@ (8007294 <dwc2_phy_update+0xe0>)
 800722c:	4293      	cmp	r3, r2
 800722e:	d302      	bcc.n	8007236 <dwc2_phy_update+0x82>
      turnaround = 0xCu;
 8007230:	230c      	movs	r3, #12
 8007232:	60fb      	str	r3, [r7, #12]
 8007234:	e011      	b.n	800725a <dwc2_phy_update+0xa6>
    }
    else if (SystemCoreClock >= 16000000u) {
 8007236:	4b10      	ldr	r3, [pc, #64]	@ (8007278 <dwc2_phy_update+0xc4>)
 8007238:	681b      	ldr	r3, [r3, #0]
 800723a:	4a17      	ldr	r2, [pc, #92]	@ (8007298 <dwc2_phy_update+0xe4>)
 800723c:	4293      	cmp	r3, r2
 800723e:	d302      	bcc.n	8007246 <dwc2_phy_update+0x92>
      turnaround = 0xDu;
 8007240:	230d      	movs	r3, #13
 8007242:	60fb      	str	r3, [r7, #12]
 8007244:	e009      	b.n	800725a <dwc2_phy_update+0xa6>
    }
    else if (SystemCoreClock >= 15000000u) {
 8007246:	4b0c      	ldr	r3, [pc, #48]	@ (8007278 <dwc2_phy_update+0xc4>)
 8007248:	681b      	ldr	r3, [r3, #0]
 800724a:	4a14      	ldr	r2, [pc, #80]	@ (800729c <dwc2_phy_update+0xe8>)
 800724c:	4293      	cmp	r3, r2
 800724e:	d302      	bcc.n	8007256 <dwc2_phy_update+0xa2>
      turnaround = 0xEu;
 8007250:	230e      	movs	r3, #14
 8007252:	60fb      	str	r3, [r7, #12]
 8007254:	e001      	b.n	800725a <dwc2_phy_update+0xa6>
    }
    else {
      turnaround = 0xFu;
 8007256:	230f      	movs	r3, #15
 8007258:	60fb      	str	r3, [r7, #12]
    }

    dwc2->gusbcfg = (dwc2->gusbcfg & ~GUSBCFG_TRDT_Msk) | (turnaround << GUSBCFG_TRDT_Pos);
 800725a:	687b      	ldr	r3, [r7, #4]
 800725c:	68db      	ldr	r3, [r3, #12]
 800725e:	f423 5270 	bic.w	r2, r3, #15360	@ 0x3c00
 8007262:	68fb      	ldr	r3, [r7, #12]
 8007264:	029b      	lsls	r3, r3, #10
 8007266:	431a      	orrs	r2, r3
 8007268:	687b      	ldr	r3, [r7, #4]
 800726a:	60da      	str	r2, [r3, #12]
  }
}
 800726c:	bf00      	nop
 800726e:	3714      	adds	r7, #20
 8007270:	46bd      	mov	sp, r7
 8007272:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007276:	4770      	bx	lr
 8007278:	24000000 	.word	0x24000000
 800727c:	01e84800 	.word	0x01e84800
 8007280:	01a39ddf 	.word	0x01a39ddf
 8007284:	016e3600 	.word	0x016e3600
 8007288:	014ca43f 	.word	0x014ca43f
 800728c:	01312cff 	.word	0x01312cff
 8007290:	011a499f 	.word	0x011a499f
 8007294:	01067380 	.word	0x01067380
 8007298:	00f42400 	.word	0x00f42400
 800729c:	00e4e1c0 	.word	0x00e4e1c0

080072a0 <calc_grxfsiz>:

// SOF enabling flag - required for SOF to not get disabled in ISR when SOF was enabled by
static bool _sof_en;

// Calculate the RX FIFO size according to recommendations from reference manual
static inline uint16_t calc_grxfsiz(uint16_t max_ep_size, uint8_t ep_count) {
 80072a0:	b480      	push	{r7}
 80072a2:	b083      	sub	sp, #12
 80072a4:	af00      	add	r7, sp, #0
 80072a6:	4603      	mov	r3, r0
 80072a8:	460a      	mov	r2, r1
 80072aa:	80fb      	strh	r3, [r7, #6]
 80072ac:	4613      	mov	r3, r2
 80072ae:	717b      	strb	r3, [r7, #5]
  return 15 + 2 * (max_ep_size / 4) + 2 * ep_count;
 80072b0:	88fb      	ldrh	r3, [r7, #6]
 80072b2:	089b      	lsrs	r3, r3, #2
 80072b4:	b29a      	uxth	r2, r3
 80072b6:	797b      	ldrb	r3, [r7, #5]
 80072b8:	b29b      	uxth	r3, r3
 80072ba:	4413      	add	r3, r2
 80072bc:	b29b      	uxth	r3, r3
 80072be:	005b      	lsls	r3, r3, #1
 80072c0:	b29b      	uxth	r3, r3
 80072c2:	330f      	adds	r3, #15
 80072c4:	b29b      	uxth	r3, r3
}
 80072c6:	4618      	mov	r0, r3
 80072c8:	370c      	adds	r7, #12
 80072ca:	46bd      	mov	sp, r7
 80072cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072d0:	4770      	bx	lr
	...

080072d4 <update_grxfsiz>:

static void update_grxfsiz(uint8_t rhport) {
 80072d4:	b580      	push	{r7, lr}
 80072d6:	b086      	sub	sp, #24
 80072d8:	af00      	add	r7, sp, #0
 80072da:	4603      	mov	r3, r0
 80072dc:	71fb      	strb	r3, [r7, #7]
  dwc2_regs_t* dwc2 = DWC2_REG(rhport);
 80072de:	79fb      	ldrb	r3, [r7, #7]
 80072e0:	4a1b      	ldr	r2, [pc, #108]	@ (8007350 <update_grxfsiz+0x7c>)
 80072e2:	011b      	lsls	r3, r3, #4
 80072e4:	4413      	add	r3, r2
 80072e6:	681b      	ldr	r3, [r3, #0]
 80072e8:	613b      	str	r3, [r7, #16]
  uint8_t const ep_count = _dwc2_controller[rhport].ep_count;
 80072ea:	79fb      	ldrb	r3, [r7, #7]
 80072ec:	4a18      	ldr	r2, [pc, #96]	@ (8007350 <update_grxfsiz+0x7c>)
 80072ee:	011b      	lsls	r3, r3, #4
 80072f0:	4413      	add	r3, r2
 80072f2:	3308      	adds	r3, #8
 80072f4:	781b      	ldrb	r3, [r3, #0]
 80072f6:	73fb      	strb	r3, [r7, #15]

  // Determine largest EP size for RX FIFO
  uint16_t max_epsize = 0;
 80072f8:	2300      	movs	r3, #0
 80072fa:	82fb      	strh	r3, [r7, #22]
  for (uint8_t epnum = 0; epnum < ep_count; epnum++) {
 80072fc:	2300      	movs	r3, #0
 80072fe:	757b      	strb	r3, [r7, #21]
 8007300:	e013      	b.n	800732a <update_grxfsiz+0x56>
    max_epsize = tu_max16(max_epsize, xfer_status[epnum][TUSB_DIR_OUT].max_size);
 8007302:	7d7b      	ldrb	r3, [r7, #21]
 8007304:	4a13      	ldr	r2, [pc, #76]	@ (8007354 <update_grxfsiz+0x80>)
 8007306:	015b      	lsls	r3, r3, #5
 8007308:	4413      	add	r3, r2
 800730a:	330a      	adds	r3, #10
 800730c:	881a      	ldrh	r2, [r3, #0]
 800730e:	8afb      	ldrh	r3, [r7, #22]
 8007310:	81bb      	strh	r3, [r7, #12]
 8007312:	4613      	mov	r3, r2
 8007314:	817b      	strh	r3, [r7, #10]
TU_ATTR_ALWAYS_INLINE static inline uint16_t tu_max16 (uint16_t x, uint16_t y) { return (x > y) ? x : y; }
 8007316:	89ba      	ldrh	r2, [r7, #12]
 8007318:	897b      	ldrh	r3, [r7, #10]
 800731a:	4293      	cmp	r3, r2
 800731c:	bf38      	it	cc
 800731e:	4613      	movcc	r3, r2
 8007320:	b29b      	uxth	r3, r3
 8007322:	82fb      	strh	r3, [r7, #22]
  for (uint8_t epnum = 0; epnum < ep_count; epnum++) {
 8007324:	7d7b      	ldrb	r3, [r7, #21]
 8007326:	3301      	adds	r3, #1
 8007328:	757b      	strb	r3, [r7, #21]
 800732a:	7d7a      	ldrb	r2, [r7, #21]
 800732c:	7bfb      	ldrb	r3, [r7, #15]
 800732e:	429a      	cmp	r2, r3
 8007330:	d3e7      	bcc.n	8007302 <update_grxfsiz+0x2e>
  }

  // Update size of RX FIFO
  dwc2->grxfsiz = calc_grxfsiz(max_epsize, ep_count);
 8007332:	7bfa      	ldrb	r2, [r7, #15]
 8007334:	8afb      	ldrh	r3, [r7, #22]
 8007336:	4611      	mov	r1, r2
 8007338:	4618      	mov	r0, r3
 800733a:	f7ff ffb1 	bl	80072a0 <calc_grxfsiz>
 800733e:	4603      	mov	r3, r0
 8007340:	461a      	mov	r2, r3
 8007342:	693b      	ldr	r3, [r7, #16]
 8007344:	625a      	str	r2, [r3, #36]	@ 0x24
}
 8007346:	bf00      	nop
 8007348:	3718      	adds	r7, #24
 800734a:	46bd      	mov	sp, r7
 800734c:	bd80      	pop	{r7, pc}
 800734e:	bf00      	nop
 8007350:	0801bfb8 	.word	0x0801bfb8
 8007354:	24001e8c 	.word	0x24001e8c

08007358 <bus_reset>:

// Start of Bus Reset
static void bus_reset(uint8_t rhport) {
 8007358:	b580      	push	{r7, lr}
 800735a:	b086      	sub	sp, #24
 800735c:	af00      	add	r7, sp, #0
 800735e:	4603      	mov	r3, r0
 8007360:	71fb      	strb	r3, [r7, #7]
  dwc2_regs_t* dwc2 = DWC2_REG(rhport);
 8007362:	79fb      	ldrb	r3, [r7, #7]
 8007364:	4a3f      	ldr	r2, [pc, #252]	@ (8007464 <bus_reset+0x10c>)
 8007366:	011b      	lsls	r3, r3, #4
 8007368:	4413      	add	r3, r2
 800736a:	681b      	ldr	r3, [r3, #0]
 800736c:	613b      	str	r3, [r7, #16]
  uint8_t const ep_count = _dwc2_controller[rhport].ep_count;
 800736e:	79fb      	ldrb	r3, [r7, #7]
 8007370:	4a3c      	ldr	r2, [pc, #240]	@ (8007464 <bus_reset+0x10c>)
 8007372:	011b      	lsls	r3, r3, #4
 8007374:	4413      	add	r3, r2
 8007376:	3308      	adds	r3, #8
 8007378:	781b      	ldrb	r3, [r3, #0]
 800737a:	73fb      	strb	r3, [r7, #15]

  tu_memclr(xfer_status, sizeof(xfer_status));
 800737c:	f44f 7290 	mov.w	r2, #288	@ 0x120
 8007380:	2100      	movs	r1, #0
 8007382:	4839      	ldr	r0, [pc, #228]	@ (8007468 <bus_reset+0x110>)
 8007384:	f012 fb22 	bl	80199cc <memset>
  _out_ep_closed = false;
 8007388:	4b38      	ldr	r3, [pc, #224]	@ (800746c <bus_reset+0x114>)
 800738a:	2200      	movs	r2, #0
 800738c:	701a      	strb	r2, [r3, #0]

  _sof_en = false;
 800738e:	4b38      	ldr	r3, [pc, #224]	@ (8007470 <bus_reset+0x118>)
 8007390:	2200      	movs	r2, #0
 8007392:	701a      	strb	r2, [r3, #0]

  // clear device address
  dwc2->dcfg &= ~DCFG_DAD_Msk;
 8007394:	693b      	ldr	r3, [r7, #16]
 8007396:	f8d3 3800 	ldr.w	r3, [r3, #2048]	@ 0x800
 800739a:	f423 62fe 	bic.w	r2, r3, #2032	@ 0x7f0
 800739e:	693b      	ldr	r3, [r7, #16]
 80073a0:	f8c3 2800 	str.w	r2, [r3, #2048]	@ 0x800

  // 1. NAK for all OUT endpoints
  for (uint8_t n = 0; n < ep_count; n++) {
 80073a4:	2300      	movs	r3, #0
 80073a6:	75fb      	strb	r3, [r7, #23]
 80073a8:	e010      	b.n	80073cc <bus_reset+0x74>
    dwc2->epout[n].doepctl |= DOEPCTL_SNAK;
 80073aa:	7dfb      	ldrb	r3, [r7, #23]
 80073ac:	693a      	ldr	r2, [r7, #16]
 80073ae:	3358      	adds	r3, #88	@ 0x58
 80073b0:	015b      	lsls	r3, r3, #5
 80073b2:	4413      	add	r3, r2
 80073b4:	681a      	ldr	r2, [r3, #0]
 80073b6:	7dfb      	ldrb	r3, [r7, #23]
 80073b8:	f042 6200 	orr.w	r2, r2, #134217728	@ 0x8000000
 80073bc:	6939      	ldr	r1, [r7, #16]
 80073be:	3358      	adds	r3, #88	@ 0x58
 80073c0:	015b      	lsls	r3, r3, #5
 80073c2:	440b      	add	r3, r1
 80073c4:	601a      	str	r2, [r3, #0]
  for (uint8_t n = 0; n < ep_count; n++) {
 80073c6:	7dfb      	ldrb	r3, [r7, #23]
 80073c8:	3301      	adds	r3, #1
 80073ca:	75fb      	strb	r3, [r7, #23]
 80073cc:	7dfa      	ldrb	r2, [r7, #23]
 80073ce:	7bfb      	ldrb	r3, [r7, #15]
 80073d0:	429a      	cmp	r2, r3
 80073d2:	d3ea      	bcc.n	80073aa <bus_reset+0x52>
  }

  // 2. Set up interrupt mask
  dwc2->daintmsk = TU_BIT(DAINTMSK_OEPM_Pos) | TU_BIT(DAINTMSK_IEPM_Pos);
 80073d4:	693b      	ldr	r3, [r7, #16]
 80073d6:	f04f 1201 	mov.w	r2, #65537	@ 0x10001
 80073da:	f8c3 281c 	str.w	r2, [r3, #2076]	@ 0x81c
  dwc2->doepmsk = DOEPMSK_STUPM | DOEPMSK_XFRCM;
 80073de:	693b      	ldr	r3, [r7, #16]
 80073e0:	2209      	movs	r2, #9
 80073e2:	f8c3 2814 	str.w	r2, [r3, #2068]	@ 0x814
  dwc2->diepmsk = DIEPMSK_TOM | DIEPMSK_XFRCM;
 80073e6:	693b      	ldr	r3, [r7, #16]
 80073e8:	2209      	movs	r2, #9
 80073ea:	f8c3 2810 	str.w	r2, [r3, #2064]	@ 0x810
  //   For Isochronous, largest EP size can be 1023/1024 for FS/HS respectively. In addition if multiple ISO
  //   are enabled at least "2 x (Largest-EPsize/4) + 1" are recommended.  Maybe provide a macro for application to
  //   overwrite this.

  // EP0 out max is 64
  dwc2->grxfsiz = calc_grxfsiz(64, ep_count);
 80073ee:	7bfb      	ldrb	r3, [r7, #15]
 80073f0:	4619      	mov	r1, r3
 80073f2:	2040      	movs	r0, #64	@ 0x40
 80073f4:	f7ff ff54 	bl	80072a0 <calc_grxfsiz>
 80073f8:	4603      	mov	r3, r0
 80073fa:	461a      	mov	r2, r3
 80073fc:	693b      	ldr	r3, [r7, #16]
 80073fe:	625a      	str	r2, [r3, #36]	@ 0x24

  // Setup the control endpoint 0
  _allocated_fifo_words_tx = 16;
 8007400:	4b1c      	ldr	r3, [pc, #112]	@ (8007474 <bus_reset+0x11c>)
 8007402:	2210      	movs	r2, #16
 8007404:	801a      	strh	r2, [r3, #0]

  // Control IN uses FIFO 0 with 64 bytes ( 16 32-bit word )
  dwc2->dieptxf0 = (16 << DIEPTXF0_TX0FD_Pos) | (_dwc2_controller[rhport].ep_fifo_size / 4 - _allocated_fifo_words_tx);
 8007406:	79fb      	ldrb	r3, [r7, #7]
 8007408:	4a16      	ldr	r2, [pc, #88]	@ (8007464 <bus_reset+0x10c>)
 800740a:	011b      	lsls	r3, r3, #4
 800740c:	4413      	add	r3, r2
 800740e:	330c      	adds	r3, #12
 8007410:	681b      	ldr	r3, [r3, #0]
 8007412:	089b      	lsrs	r3, r3, #2
 8007414:	4a17      	ldr	r2, [pc, #92]	@ (8007474 <bus_reset+0x11c>)
 8007416:	8812      	ldrh	r2, [r2, #0]
 8007418:	1a9b      	subs	r3, r3, r2
 800741a:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 800741e:	693b      	ldr	r3, [r7, #16]
 8007420:	629a      	str	r2, [r3, #40]	@ 0x28

  // Fixed control EP0 size to 64 bytes
  dwc2->epin[0].diepctl &= ~(0x03 << DIEPCTL_MPSIZ_Pos);
 8007422:	693b      	ldr	r3, [r7, #16]
 8007424:	f8d3 3900 	ldr.w	r3, [r3, #2304]	@ 0x900
 8007428:	f023 0203 	bic.w	r2, r3, #3
 800742c:	693b      	ldr	r3, [r7, #16]
 800742e:	f8c3 2900 	str.w	r2, [r3, #2304]	@ 0x900
  xfer_status[0][TUSB_DIR_OUT].max_size = 64;
 8007432:	4b0d      	ldr	r3, [pc, #52]	@ (8007468 <bus_reset+0x110>)
 8007434:	2240      	movs	r2, #64	@ 0x40
 8007436:	815a      	strh	r2, [r3, #10]
  xfer_status[0][TUSB_DIR_IN].max_size = 64;
 8007438:	4b0b      	ldr	r3, [pc, #44]	@ (8007468 <bus_reset+0x110>)
 800743a:	2240      	movs	r2, #64	@ 0x40
 800743c:	835a      	strh	r2, [r3, #26]

  dwc2->epout[0].doeptsiz |= (3 << DOEPTSIZ_STUPCNT_Pos);
 800743e:	693b      	ldr	r3, [r7, #16]
 8007440:	f8d3 3b10 	ldr.w	r3, [r3, #2832]	@ 0xb10
 8007444:	f043 42c0 	orr.w	r2, r3, #1610612736	@ 0x60000000
 8007448:	693b      	ldr	r3, [r7, #16]
 800744a:	f8c3 2b10 	str.w	r2, [r3, #2832]	@ 0xb10

  dwc2->gintmsk |= GINTMSK_OEPINT | GINTMSK_IEPINT;
 800744e:	693b      	ldr	r3, [r7, #16]
 8007450:	699b      	ldr	r3, [r3, #24]
 8007452:	f443 2240 	orr.w	r2, r3, #786432	@ 0xc0000
 8007456:	693b      	ldr	r3, [r7, #16]
 8007458:	619a      	str	r2, [r3, #24]
}
 800745a:	bf00      	nop
 800745c:	3718      	adds	r7, #24
 800745e:	46bd      	mov	sp, r7
 8007460:	bd80      	pop	{r7, pc}
 8007462:	bf00      	nop
 8007464:	0801bfb8 	.word	0x0801bfb8
 8007468:	24001e8c 	.word	0x24001e8c
 800746c:	24001fb2 	.word	0x24001fb2
 8007470:	24001fb3 	.word	0x24001fb3
 8007474:	24001fb0 	.word	0x24001fb0

08007478 <edpt_schedule_packets>:

static void edpt_schedule_packets(uint8_t rhport, uint8_t const epnum, uint8_t const dir, uint16_t const num_packets,
                                  uint16_t total_bytes) {
 8007478:	b490      	push	{r4, r7}
 800747a:	b08a      	sub	sp, #40	@ 0x28
 800747c:	af00      	add	r7, sp, #0
 800747e:	4604      	mov	r4, r0
 8007480:	4608      	mov	r0, r1
 8007482:	4611      	mov	r1, r2
 8007484:	461a      	mov	r2, r3
 8007486:	4623      	mov	r3, r4
 8007488:	71fb      	strb	r3, [r7, #7]
 800748a:	4603      	mov	r3, r0
 800748c:	71bb      	strb	r3, [r7, #6]
 800748e:	460b      	mov	r3, r1
 8007490:	717b      	strb	r3, [r7, #5]
 8007492:	4613      	mov	r3, r2
 8007494:	807b      	strh	r3, [r7, #2]
  (void) rhport;

  dwc2_regs_t* dwc2 = DWC2_REG(rhport);
 8007496:	79fb      	ldrb	r3, [r7, #7]
 8007498:	4a70      	ldr	r2, [pc, #448]	@ (800765c <edpt_schedule_packets+0x1e4>)
 800749a:	011b      	lsls	r3, r3, #4
 800749c:	4413      	add	r3, r2
 800749e:	681b      	ldr	r3, [r3, #0]
 80074a0:	627b      	str	r3, [r7, #36]	@ 0x24

  // EP0 is limited to one packet each xfer
  // We use multiple transaction of xfer->max_size length to get a whole transfer done
  if (epnum == 0) {
 80074a2:	79bb      	ldrb	r3, [r7, #6]
 80074a4:	2b00      	cmp	r3, #0
 80074a6:	d121      	bne.n	80074ec <edpt_schedule_packets+0x74>
    xfer_ctl_t* const xfer = XFER_CTL_BASE(epnum, dir);
 80074a8:	79ba      	ldrb	r2, [r7, #6]
 80074aa:	797b      	ldrb	r3, [r7, #5]
 80074ac:	0052      	lsls	r2, r2, #1
 80074ae:	4413      	add	r3, r2
 80074b0:	011b      	lsls	r3, r3, #4
 80074b2:	4a6b      	ldr	r2, [pc, #428]	@ (8007660 <edpt_schedule_packets+0x1e8>)
 80074b4:	4413      	add	r3, r2
 80074b6:	623b      	str	r3, [r7, #32]
    total_bytes = tu_min16(ep0_pending[dir], xfer->max_size);
 80074b8:	797b      	ldrb	r3, [r7, #5]
 80074ba:	4a6a      	ldr	r2, [pc, #424]	@ (8007664 <edpt_schedule_packets+0x1ec>)
 80074bc:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 80074c0:	6a3b      	ldr	r3, [r7, #32]
 80074c2:	895b      	ldrh	r3, [r3, #10]
 80074c4:	81fa      	strh	r2, [r7, #14]
 80074c6:	81bb      	strh	r3, [r7, #12]
TU_ATTR_ALWAYS_INLINE static inline uint16_t tu_min16 (uint16_t x, uint16_t y) { return (x < y) ? x : y; }
 80074c8:	89fa      	ldrh	r2, [r7, #14]
 80074ca:	89bb      	ldrh	r3, [r7, #12]
 80074cc:	4293      	cmp	r3, r2
 80074ce:	bf28      	it	cs
 80074d0:	4613      	movcs	r3, r2
 80074d2:	b29b      	uxth	r3, r3
 80074d4:	863b      	strh	r3, [r7, #48]	@ 0x30
    ep0_pending[dir] -= total_bytes;
 80074d6:	797b      	ldrb	r3, [r7, #5]
 80074d8:	4a62      	ldr	r2, [pc, #392]	@ (8007664 <edpt_schedule_packets+0x1ec>)
 80074da:	f832 1013 	ldrh.w	r1, [r2, r3, lsl #1]
 80074de:	797b      	ldrb	r3, [r7, #5]
 80074e0:	8e3a      	ldrh	r2, [r7, #48]	@ 0x30
 80074e2:	1a8a      	subs	r2, r1, r2
 80074e4:	b291      	uxth	r1, r2
 80074e6:	4a5f      	ldr	r2, [pc, #380]	@ (8007664 <edpt_schedule_packets+0x1ec>)
 80074e8:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
  }

  // IN and OUT endpoint xfers are interrupt-driven, we just schedule them here.
  if (dir == TUSB_DIR_IN) {
 80074ec:	797b      	ldrb	r3, [r7, #5]
 80074ee:	2b01      	cmp	r3, #1
 80074f0:	d155      	bne.n	800759e <edpt_schedule_packets+0x126>
    dwc2_epin_t* epin = dwc2->epin;
 80074f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80074f4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80074f8:	617b      	str	r3, [r7, #20]

    // A full IN transfer (multiple packets, possibly) triggers XFRC.
    epin[epnum].dieptsiz = (num_packets << DIEPTSIZ_PKTCNT_Pos) |
 80074fa:	887b      	ldrh	r3, [r7, #2]
 80074fc:	04d9      	lsls	r1, r3, #19
                           ((total_bytes << DIEPTSIZ_XFRSIZ_Pos) & DIEPTSIZ_XFRSIZ_Msk);
 80074fe:	8e3a      	ldrh	r2, [r7, #48]	@ 0x30
    epin[epnum].dieptsiz = (num_packets << DIEPTSIZ_PKTCNT_Pos) |
 8007500:	79bb      	ldrb	r3, [r7, #6]
 8007502:	015b      	lsls	r3, r3, #5
 8007504:	6978      	ldr	r0, [r7, #20]
 8007506:	4403      	add	r3, r0
 8007508:	430a      	orrs	r2, r1
 800750a:	611a      	str	r2, [r3, #16]

    epin[epnum].diepctl |= DIEPCTL_EPENA | DIEPCTL_CNAK;
 800750c:	79bb      	ldrb	r3, [r7, #6]
 800750e:	015b      	lsls	r3, r3, #5
 8007510:	697a      	ldr	r2, [r7, #20]
 8007512:	4413      	add	r3, r2
 8007514:	681a      	ldr	r2, [r3, #0]
 8007516:	79bb      	ldrb	r3, [r7, #6]
 8007518:	015b      	lsls	r3, r3, #5
 800751a:	6979      	ldr	r1, [r7, #20]
 800751c:	440b      	add	r3, r1
 800751e:	f042 4204 	orr.w	r2, r2, #2214592512	@ 0x84000000
 8007522:	601a      	str	r2, [r3, #0]

    // For ISO endpoint set correct odd/even bit for next frame.
    if ((epin[epnum].diepctl & DIEPCTL_EPTYP) == DIEPCTL_EPTYP_0 && (XFER_CTL_BASE(epnum, dir))->interval == 1) {
 8007524:	79bb      	ldrb	r3, [r7, #6]
 8007526:	015b      	lsls	r3, r3, #5
 8007528:	697a      	ldr	r2, [r7, #20]
 800752a:	4413      	add	r3, r2
 800752c:	681b      	ldr	r3, [r3, #0]
 800752e:	f403 2340 	and.w	r3, r3, #786432	@ 0xc0000
 8007532:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8007536:	d123      	bne.n	8007580 <edpt_schedule_packets+0x108>
 8007538:	79ba      	ldrb	r2, [r7, #6]
 800753a:	797b      	ldrb	r3, [r7, #5]
 800753c:	4948      	ldr	r1, [pc, #288]	@ (8007660 <edpt_schedule_packets+0x1e8>)
 800753e:	0052      	lsls	r2, r2, #1
 8007540:	4413      	add	r3, r2
 8007542:	011b      	lsls	r3, r3, #4
 8007544:	440b      	add	r3, r1
 8007546:	330c      	adds	r3, #12
 8007548:	781b      	ldrb	r3, [r3, #0]
 800754a:	2b01      	cmp	r3, #1
 800754c:	d118      	bne.n	8007580 <edpt_schedule_packets+0x108>
      // Take odd/even bit from frame counter.
      uint32_t const odd_frame_now = (dwc2->dsts & (1u << DSTS_FNSOF_Pos));
 800754e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007550:	f8d3 3808 	ldr.w	r3, [r3, #2056]	@ 0x808
 8007554:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007558:	613b      	str	r3, [r7, #16]
      epin[epnum].diepctl |= (odd_frame_now ? DIEPCTL_SD0PID_SEVNFRM_Msk : DIEPCTL_SODDFRM_Msk);
 800755a:	79bb      	ldrb	r3, [r7, #6]
 800755c:	015b      	lsls	r3, r3, #5
 800755e:	697a      	ldr	r2, [r7, #20]
 8007560:	4413      	add	r3, r2
 8007562:	681a      	ldr	r2, [r3, #0]
 8007564:	693b      	ldr	r3, [r7, #16]
 8007566:	2b00      	cmp	r3, #0
 8007568:	d002      	beq.n	8007570 <edpt_schedule_packets+0xf8>
 800756a:	f04f 5180 	mov.w	r1, #268435456	@ 0x10000000
 800756e:	e001      	b.n	8007574 <edpt_schedule_packets+0xfc>
 8007570:	f04f 5100 	mov.w	r1, #536870912	@ 0x20000000
 8007574:	79bb      	ldrb	r3, [r7, #6]
 8007576:	015b      	lsls	r3, r3, #5
 8007578:	6978      	ldr	r0, [r7, #20]
 800757a:	4403      	add	r3, r0
 800757c:	430a      	orrs	r2, r1
 800757e:	601a      	str	r2, [r3, #0]
    }
    // Enable fifo empty interrupt only if there are something to put in the fifo.
    if (total_bytes != 0) {
 8007580:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 8007582:	2b00      	cmp	r3, #0
 8007584:	d064      	beq.n	8007650 <edpt_schedule_packets+0x1d8>
      dwc2->diepempmsk |= (1 << epnum);
 8007586:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007588:	f8d3 3834 	ldr.w	r3, [r3, #2100]	@ 0x834
 800758c:	79ba      	ldrb	r2, [r7, #6]
 800758e:	2101      	movs	r1, #1
 8007590:	fa01 f202 	lsl.w	r2, r1, r2
 8007594:	431a      	orrs	r2, r3
 8007596:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007598:	f8c3 2834 	str.w	r2, [r3, #2100]	@ 0x834
      // Take odd/even bit from frame counter.
      uint32_t const odd_frame_now = (dwc2->dsts & (1u << DSTS_FNSOF_Pos));
      epout[epnum].doepctl |= (odd_frame_now ? DOEPCTL_SD0PID_SEVNFRM_Msk : DOEPCTL_SODDFRM_Msk);
    }
  }
}
 800759c:	e058      	b.n	8007650 <edpt_schedule_packets+0x1d8>
    dwc2_epout_t* epout = dwc2->epout;
 800759e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80075a0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80075a4:	61fb      	str	r3, [r7, #28]
    epout[epnum].doeptsiz &= ~(DOEPTSIZ_PKTCNT_Msk | DOEPTSIZ_XFRSIZ);
 80075a6:	79bb      	ldrb	r3, [r7, #6]
 80075a8:	015b      	lsls	r3, r3, #5
 80075aa:	69fa      	ldr	r2, [r7, #28]
 80075ac:	4413      	add	r3, r2
 80075ae:	691a      	ldr	r2, [r3, #16]
 80075b0:	79bb      	ldrb	r3, [r7, #6]
 80075b2:	015b      	lsls	r3, r3, #5
 80075b4:	69f9      	ldr	r1, [r7, #28]
 80075b6:	440b      	add	r3, r1
 80075b8:	f002 4260 	and.w	r2, r2, #3758096384	@ 0xe0000000
 80075bc:	611a      	str	r2, [r3, #16]
    epout[epnum].doeptsiz |= (num_packets << DOEPTSIZ_PKTCNT_Pos) |
 80075be:	79bb      	ldrb	r3, [r7, #6]
 80075c0:	015b      	lsls	r3, r3, #5
 80075c2:	69fa      	ldr	r2, [r7, #28]
 80075c4:	4413      	add	r3, r2
 80075c6:	6919      	ldr	r1, [r3, #16]
 80075c8:	887b      	ldrh	r3, [r7, #2]
 80075ca:	04da      	lsls	r2, r3, #19
                             ((total_bytes << DOEPTSIZ_XFRSIZ_Pos) & DOEPTSIZ_XFRSIZ_Msk);
 80075cc:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
    epout[epnum].doeptsiz |= (num_packets << DOEPTSIZ_PKTCNT_Pos) |
 80075ce:	431a      	orrs	r2, r3
 80075d0:	79bb      	ldrb	r3, [r7, #6]
 80075d2:	015b      	lsls	r3, r3, #5
 80075d4:	69f8      	ldr	r0, [r7, #28]
 80075d6:	4403      	add	r3, r0
 80075d8:	430a      	orrs	r2, r1
 80075da:	611a      	str	r2, [r3, #16]
    epout[epnum].doepctl |= DOEPCTL_EPENA | DOEPCTL_CNAK;
 80075dc:	79bb      	ldrb	r3, [r7, #6]
 80075de:	015b      	lsls	r3, r3, #5
 80075e0:	69fa      	ldr	r2, [r7, #28]
 80075e2:	4413      	add	r3, r2
 80075e4:	681a      	ldr	r2, [r3, #0]
 80075e6:	79bb      	ldrb	r3, [r7, #6]
 80075e8:	015b      	lsls	r3, r3, #5
 80075ea:	69f9      	ldr	r1, [r7, #28]
 80075ec:	440b      	add	r3, r1
 80075ee:	f042 4204 	orr.w	r2, r2, #2214592512	@ 0x84000000
 80075f2:	601a      	str	r2, [r3, #0]
    if ((epout[epnum].doepctl & DOEPCTL_EPTYP) == DOEPCTL_EPTYP_0 &&
 80075f4:	79bb      	ldrb	r3, [r7, #6]
 80075f6:	015b      	lsls	r3, r3, #5
 80075f8:	69fa      	ldr	r2, [r7, #28]
 80075fa:	4413      	add	r3, r2
 80075fc:	681b      	ldr	r3, [r3, #0]
 80075fe:	f403 2340 	and.w	r3, r3, #786432	@ 0xc0000
 8007602:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8007606:	d123      	bne.n	8007650 <edpt_schedule_packets+0x1d8>
        XFER_CTL_BASE(epnum, dir)->interval == 1) {
 8007608:	79ba      	ldrb	r2, [r7, #6]
 800760a:	797b      	ldrb	r3, [r7, #5]
 800760c:	4914      	ldr	r1, [pc, #80]	@ (8007660 <edpt_schedule_packets+0x1e8>)
 800760e:	0052      	lsls	r2, r2, #1
 8007610:	4413      	add	r3, r2
 8007612:	011b      	lsls	r3, r3, #4
 8007614:	440b      	add	r3, r1
 8007616:	330c      	adds	r3, #12
 8007618:	781b      	ldrb	r3, [r3, #0]
    if ((epout[epnum].doepctl & DOEPCTL_EPTYP) == DOEPCTL_EPTYP_0 &&
 800761a:	2b01      	cmp	r3, #1
 800761c:	d118      	bne.n	8007650 <edpt_schedule_packets+0x1d8>
      uint32_t const odd_frame_now = (dwc2->dsts & (1u << DSTS_FNSOF_Pos));
 800761e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007620:	f8d3 3808 	ldr.w	r3, [r3, #2056]	@ 0x808
 8007624:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007628:	61bb      	str	r3, [r7, #24]
      epout[epnum].doepctl |= (odd_frame_now ? DOEPCTL_SD0PID_SEVNFRM_Msk : DOEPCTL_SODDFRM_Msk);
 800762a:	79bb      	ldrb	r3, [r7, #6]
 800762c:	015b      	lsls	r3, r3, #5
 800762e:	69fa      	ldr	r2, [r7, #28]
 8007630:	4413      	add	r3, r2
 8007632:	681a      	ldr	r2, [r3, #0]
 8007634:	69bb      	ldr	r3, [r7, #24]
 8007636:	2b00      	cmp	r3, #0
 8007638:	d002      	beq.n	8007640 <edpt_schedule_packets+0x1c8>
 800763a:	f04f 5180 	mov.w	r1, #268435456	@ 0x10000000
 800763e:	e001      	b.n	8007644 <edpt_schedule_packets+0x1cc>
 8007640:	f04f 5100 	mov.w	r1, #536870912	@ 0x20000000
 8007644:	79bb      	ldrb	r3, [r7, #6]
 8007646:	015b      	lsls	r3, r3, #5
 8007648:	69f8      	ldr	r0, [r7, #28]
 800764a:	4403      	add	r3, r0
 800764c:	430a      	orrs	r2, r1
 800764e:	601a      	str	r2, [r3, #0]
}
 8007650:	bf00      	nop
 8007652:	3728      	adds	r7, #40	@ 0x28
 8007654:	46bd      	mov	sp, r7
 8007656:	bc90      	pop	{r4, r7}
 8007658:	4770      	bx	lr
 800765a:	bf00      	nop
 800765c:	0801bfb8 	.word	0x0801bfb8
 8007660:	24001e8c 	.word	0x24001e8c
 8007664:	24001fac 	.word	0x24001fac

08007668 <reset_core>:
  TU_LOG(DWC2_DEBUG, "0x%08lX\r\n", p[5]);
}

#endif

static void reset_core(dwc2_regs_t* dwc2) {
 8007668:	b480      	push	{r7}
 800766a:	b083      	sub	sp, #12
 800766c:	af00      	add	r7, sp, #0
 800766e:	6078      	str	r0, [r7, #4]
  // reset core
  dwc2->grstctl |= GRSTCTL_CSRST;
 8007670:	687b      	ldr	r3, [r7, #4]
 8007672:	691b      	ldr	r3, [r3, #16]
 8007674:	f043 0201 	orr.w	r2, r3, #1
 8007678:	687b      	ldr	r3, [r7, #4]
 800767a:	611a      	str	r2, [r3, #16]

  // wait for reset bit is cleared
  // TODO version 4.20a should wait for RESET DONE mask
  while (dwc2->grstctl & GRSTCTL_CSRST) {}
 800767c:	bf00      	nop
 800767e:	687b      	ldr	r3, [r7, #4]
 8007680:	691b      	ldr	r3, [r3, #16]
 8007682:	f003 0301 	and.w	r3, r3, #1
 8007686:	2b00      	cmp	r3, #0
 8007688:	d1f9      	bne.n	800767e <reset_core+0x16>

  // wait for AHB master IDLE
  while (!(dwc2->grstctl & GRSTCTL_AHBIDL)) {}
 800768a:	bf00      	nop
 800768c:	687b      	ldr	r3, [r7, #4]
 800768e:	691b      	ldr	r3, [r3, #16]
 8007690:	2b00      	cmp	r3, #0
 8007692:	dafb      	bge.n	800768c <reset_core+0x24>

  // wait for device mode ?
}
 8007694:	bf00      	nop
 8007696:	bf00      	nop
 8007698:	370c      	adds	r7, #12
 800769a:	46bd      	mov	sp, r7
 800769c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076a0:	4770      	bx	lr

080076a2 <phy_hs_supported>:

static bool phy_hs_supported(dwc2_regs_t* dwc2) {
 80076a2:	b480      	push	{r7}
 80076a4:	b083      	sub	sp, #12
 80076a6:	af00      	add	r7, sp, #0
 80076a8:	6078      	str	r0, [r7, #4]
  // note: esp32 incorrect report its hs_phy_type as utmi
#if TU_CHECK_MCU(OPT_MCU_ESP32S2, OPT_MCU_ESP32S3)
  return false;
#else
  return TUD_OPT_HIGH_SPEED && dwc2->ghwcfg2_bm.hs_phy_type != HS_PHY_TYPE_NONE;
 80076aa:	687b      	ldr	r3, [r7, #4]
 80076ac:	f893 3048 	ldrb.w	r3, [r3, #72]	@ 0x48
 80076b0:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80076b4:	b2db      	uxtb	r3, r3
 80076b6:	2b00      	cmp	r3, #0
 80076b8:	bf14      	ite	ne
 80076ba:	2301      	movne	r3, #1
 80076bc:	2300      	moveq	r3, #0
 80076be:	b2db      	uxtb	r3, r3
#endif
}
 80076c0:	4618      	mov	r0, r3
 80076c2:	370c      	adds	r7, #12
 80076c4:	46bd      	mov	sp, r7
 80076c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076ca:	4770      	bx	lr

080076cc <phy_fs_init>:

static void phy_fs_init(dwc2_regs_t* dwc2) {
 80076cc:	b580      	push	{r7, lr}
 80076ce:	b082      	sub	sp, #8
 80076d0:	af00      	add	r7, sp, #0
 80076d2:	6078      	str	r0, [r7, #4]
  TU_LOG(DWC2_DEBUG, "Fullspeed PHY init\r\n");

  // Select FS PHY
  dwc2->gusbcfg |= GUSBCFG_PHYSEL;
 80076d4:	687b      	ldr	r3, [r7, #4]
 80076d6:	68db      	ldr	r3, [r3, #12]
 80076d8:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 80076dc:	687b      	ldr	r3, [r7, #4]
 80076de:	60da      	str	r2, [r3, #12]

  // MCU specific PHY init before reset
  dwc2_phy_init(dwc2, HS_PHY_TYPE_NONE);
 80076e0:	2100      	movs	r1, #0
 80076e2:	6878      	ldr	r0, [r7, #4]
 80076e4:	f7ff fd2c 	bl	8007140 <dwc2_phy_init>

  // Reset core after selecting PHY
  reset_core(dwc2);
 80076e8:	6878      	ldr	r0, [r7, #4]
 80076ea:	f7ff ffbd 	bl	8007668 <reset_core>

  // USB turnaround time is critical for certification where long cables and 5-Hubs are used.
  // So if you need the AHB to run at less than 30 MHz, and if USB turnaround time is not critical,
  // these bits can be programmed to a larger value. Default is 5
  dwc2->gusbcfg = (dwc2->gusbcfg & ~GUSBCFG_TRDT_Msk) | (5u << GUSBCFG_TRDT_Pos);
 80076ee:	687b      	ldr	r3, [r7, #4]
 80076f0:	68db      	ldr	r3, [r3, #12]
 80076f2:	f423 5370 	bic.w	r3, r3, #15360	@ 0x3c00
 80076f6:	f443 52a0 	orr.w	r2, r3, #5120	@ 0x1400
 80076fa:	687b      	ldr	r3, [r7, #4]
 80076fc:	60da      	str	r2, [r3, #12]

  // MCU specific PHY update post reset
  dwc2_phy_update(dwc2, HS_PHY_TYPE_NONE);
 80076fe:	2100      	movs	r1, #0
 8007700:	6878      	ldr	r0, [r7, #4]
 8007702:	f7ff fd57 	bl	80071b4 <dwc2_phy_update>

  // set max speed
  dwc2->dcfg = (dwc2->dcfg & ~DCFG_DSPD_Msk) | (DCFG_DSPD_FS << DCFG_DSPD_Pos);
 8007706:	687b      	ldr	r3, [r7, #4]
 8007708:	f8d3 3800 	ldr.w	r3, [r3, #2048]	@ 0x800
 800770c:	f043 0203 	orr.w	r2, r3, #3
 8007710:	687b      	ldr	r3, [r7, #4]
 8007712:	f8c3 2800 	str.w	r2, [r3, #2048]	@ 0x800
}
 8007716:	bf00      	nop
 8007718:	3708      	adds	r7, #8
 800771a:	46bd      	mov	sp, r7
 800771c:	bd80      	pop	{r7, pc}

0800771e <phy_hs_init>:

static void phy_hs_init(dwc2_regs_t* dwc2) {
 800771e:	b580      	push	{r7, lr}
 8007720:	b084      	sub	sp, #16
 8007722:	af00      	add	r7, sp, #0
 8007724:	6078      	str	r0, [r7, #4]
  uint32_t gusbcfg = dwc2->gusbcfg;
 8007726:	687b      	ldr	r3, [r7, #4]
 8007728:	68db      	ldr	r3, [r3, #12]
 800772a:	60fb      	str	r3, [r7, #12]

  // De-select FS PHY
  gusbcfg &= ~GUSBCFG_PHYSEL;
 800772c:	68fb      	ldr	r3, [r7, #12]
 800772e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007732:	60fb      	str	r3, [r7, #12]

  if (dwc2->ghwcfg2_bm.hs_phy_type == HS_PHY_TYPE_ULPI) {
 8007734:	687b      	ldr	r3, [r7, #4]
 8007736:	f893 3048 	ldrb.w	r3, [r3, #72]	@ 0x48
 800773a:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 800773e:	b2db      	uxtb	r3, r3
 8007740:	2b80      	cmp	r3, #128	@ 0x80
 8007742:	d110      	bne.n	8007766 <phy_hs_init+0x48>
    TU_LOG(DWC2_DEBUG, "Highspeed ULPI PHY init\r\n");

    // Select ULPI
    gusbcfg |= GUSBCFG_ULPI_UTMI_SEL;
 8007744:	68fb      	ldr	r3, [r7, #12]
 8007746:	f043 0310 	orr.w	r3, r3, #16
 800774a:	60fb      	str	r3, [r7, #12]

    // ULPI 8-bit interface, single data rate
    gusbcfg &= ~(GUSBCFG_PHYIF16 | GUSBCFG_DDRSEL);
 800774c:	68fb      	ldr	r3, [r7, #12]
 800774e:	f023 0388 	bic.w	r3, r3, #136	@ 0x88
 8007752:	60fb      	str	r3, [r7, #12]

    // default internal VBUS Indicator and Drive
    gusbcfg &= ~(GUSBCFG_ULPIEVBUSD | GUSBCFG_ULPIEVBUSI);
 8007754:	68fb      	ldr	r3, [r7, #12]
 8007756:	f423 1340 	bic.w	r3, r3, #3145728	@ 0x300000
 800775a:	60fb      	str	r3, [r7, #12]

    // Disable FS/LS ULPI
    gusbcfg &= ~(GUSBCFG_ULPIFSLS | GUSBCFG_ULPICSM);
 800775c:	68fb      	ldr	r3, [r7, #12]
 800775e:	f423 2320 	bic.w	r3, r3, #655360	@ 0xa0000
 8007762:	60fb      	str	r3, [r7, #12]
 8007764:	e00f      	b.n	8007786 <phy_hs_init+0x68>
  } else {
    TU_LOG(DWC2_DEBUG, "Highspeed UTMI+ PHY init\r\n");

    // Select UTMI+ with 8-bit interface
    gusbcfg &= ~(GUSBCFG_ULPI_UTMI_SEL | GUSBCFG_PHYIF16);
 8007766:	68fb      	ldr	r3, [r7, #12]
 8007768:	f023 0318 	bic.w	r3, r3, #24
 800776c:	60fb      	str	r3, [r7, #12]

    // Set 16-bit interface if supported
    if (dwc2->ghwcfg4_bm.utmi_phy_data_width) gusbcfg |= GUSBCFG_PHYIF16;
 800776e:	687b      	ldr	r3, [r7, #4]
 8007770:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8007774:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8007778:	b2db      	uxtb	r3, r3
 800777a:	2b00      	cmp	r3, #0
 800777c:	d003      	beq.n	8007786 <phy_hs_init+0x68>
 800777e:	68fb      	ldr	r3, [r7, #12]
 8007780:	f043 0308 	orr.w	r3, r3, #8
 8007784:	60fb      	str	r3, [r7, #12]
  }

  // Apply config
  dwc2->gusbcfg = gusbcfg;
 8007786:	687b      	ldr	r3, [r7, #4]
 8007788:	68fa      	ldr	r2, [r7, #12]
 800778a:	60da      	str	r2, [r3, #12]

  // mcu specific phy init
  dwc2_phy_init(dwc2, dwc2->ghwcfg2_bm.hs_phy_type);
 800778c:	687b      	ldr	r3, [r7, #4]
 800778e:	f893 3048 	ldrb.w	r3, [r3, #72]	@ 0x48
 8007792:	f3c3 1381 	ubfx	r3, r3, #6, #2
 8007796:	b2db      	uxtb	r3, r3
 8007798:	4619      	mov	r1, r3
 800779a:	6878      	ldr	r0, [r7, #4]
 800779c:	f7ff fcd0 	bl	8007140 <dwc2_phy_init>

  // Reset core after selecting PHY
  reset_core(dwc2);
 80077a0:	6878      	ldr	r0, [r7, #4]
 80077a2:	f7ff ff61 	bl	8007668 <reset_core>

  // Set turn-around, must after core reset otherwise it will be clear
  // - 9 if using 8-bit PHY interface
  // - 5 if using 16-bit PHY interface
  gusbcfg &= ~GUSBCFG_TRDT_Msk;
 80077a6:	68fb      	ldr	r3, [r7, #12]
 80077a8:	f423 5370 	bic.w	r3, r3, #15360	@ 0x3c00
 80077ac:	60fb      	str	r3, [r7, #12]
  gusbcfg |= (dwc2->ghwcfg4_bm.utmi_phy_data_width ? 5u : 9u) << GUSBCFG_TRDT_Pos;
 80077ae:	687b      	ldr	r3, [r7, #4]
 80077b0:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80077b4:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80077b8:	b2db      	uxtb	r3, r3
 80077ba:	2b00      	cmp	r3, #0
 80077bc:	d002      	beq.n	80077c4 <phy_hs_init+0xa6>
 80077be:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 80077c2:	e001      	b.n	80077c8 <phy_hs_init+0xaa>
 80077c4:	f44f 5310 	mov.w	r3, #9216	@ 0x2400
 80077c8:	68fa      	ldr	r2, [r7, #12]
 80077ca:	4313      	orrs	r3, r2
 80077cc:	60fb      	str	r3, [r7, #12]
  dwc2->gusbcfg = gusbcfg;
 80077ce:	687b      	ldr	r3, [r7, #4]
 80077d0:	68fa      	ldr	r2, [r7, #12]
 80077d2:	60da      	str	r2, [r3, #12]

  // MCU specific PHY update post reset
  dwc2_phy_update(dwc2, dwc2->ghwcfg2_bm.hs_phy_type);
 80077d4:	687b      	ldr	r3, [r7, #4]
 80077d6:	f893 3048 	ldrb.w	r3, [r3, #72]	@ 0x48
 80077da:	f3c3 1381 	ubfx	r3, r3, #6, #2
 80077de:	b2db      	uxtb	r3, r3
 80077e0:	4619      	mov	r1, r3
 80077e2:	6878      	ldr	r0, [r7, #4]
 80077e4:	f7ff fce6 	bl	80071b4 <dwc2_phy_update>

  // Set max speed
  uint32_t dcfg = dwc2->dcfg;
 80077e8:	687b      	ldr	r3, [r7, #4]
 80077ea:	f8d3 3800 	ldr.w	r3, [r3, #2048]	@ 0x800
 80077ee:	60bb      	str	r3, [r7, #8]
  dcfg &= ~DCFG_DSPD_Msk;
 80077f0:	68bb      	ldr	r3, [r7, #8]
 80077f2:	f023 0303 	bic.w	r3, r3, #3
 80077f6:	60bb      	str	r3, [r7, #8]
  dcfg |= DCFG_DSPD_HS << DCFG_DSPD_Pos;

  // XCVRDLY: transceiver delay between xcvr_sel and txvalid during device chirp is required
  // when using with some PHYs such as USB334x (USB3341, USB3343, USB3346, USB3347)
  if (dwc2->ghwcfg2_bm.hs_phy_type == HS_PHY_TYPE_ULPI) dcfg |= DCFG_XCVRDLY;
 80077f8:	687b      	ldr	r3, [r7, #4]
 80077fa:	f893 3048 	ldrb.w	r3, [r3, #72]	@ 0x48
 80077fe:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8007802:	b2db      	uxtb	r3, r3
 8007804:	2b80      	cmp	r3, #128	@ 0x80
 8007806:	d103      	bne.n	8007810 <phy_hs_init+0xf2>
 8007808:	68bb      	ldr	r3, [r7, #8]
 800780a:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800780e:	60bb      	str	r3, [r7, #8]

  dwc2->dcfg = dcfg;
 8007810:	687b      	ldr	r3, [r7, #4]
 8007812:	68ba      	ldr	r2, [r7, #8]
 8007814:	f8c3 2800 	str.w	r2, [r3, #2048]	@ 0x800
}
 8007818:	bf00      	nop
 800781a:	3710      	adds	r7, #16
 800781c:	46bd      	mov	sp, r7
 800781e:	bd80      	pop	{r7, pc}

08007820 <check_dwc2>:

static bool check_dwc2(dwc2_regs_t* dwc2) {
 8007820:	b480      	push	{r7}
 8007822:	b085      	sub	sp, #20
 8007824:	af00      	add	r7, sp, #0
 8007826:	6078      	str	r0, [r7, #4]
#endif

  // For some reasons: GD32VF103 snpsid and all hwcfg register are always zero (skip it)
  (void) dwc2;
#if !TU_CHECK_MCU(OPT_MCU_GD32VF103)
  uint32_t const gsnpsid = dwc2->gsnpsid & GSNPSID_ID_MASK;
 8007828:	687b      	ldr	r3, [r7, #4]
 800782a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800782c:	4b10      	ldr	r3, [pc, #64]	@ (8007870 <check_dwc2+0x50>)
 800782e:	4013      	ands	r3, r2
 8007830:	60fb      	str	r3, [r7, #12]
  TU_ASSERT(gsnpsid == DWC2_OTG_ID || gsnpsid == DWC2_FS_IOT_ID || gsnpsid == DWC2_HS_IOT_ID);
 8007832:	68fb      	ldr	r3, [r7, #12]
 8007834:	4a0f      	ldr	r2, [pc, #60]	@ (8007874 <check_dwc2+0x54>)
 8007836:	4293      	cmp	r3, r2
 8007838:	d012      	beq.n	8007860 <check_dwc2+0x40>
 800783a:	68fb      	ldr	r3, [r7, #12]
 800783c:	4a0e      	ldr	r2, [pc, #56]	@ (8007878 <check_dwc2+0x58>)
 800783e:	4293      	cmp	r3, r2
 8007840:	d00e      	beq.n	8007860 <check_dwc2+0x40>
 8007842:	68fb      	ldr	r3, [r7, #12]
 8007844:	4a0d      	ldr	r2, [pc, #52]	@ (800787c <check_dwc2+0x5c>)
 8007846:	4293      	cmp	r3, r2
 8007848:	d00a      	beq.n	8007860 <check_dwc2+0x40>
 800784a:	4b0d      	ldr	r3, [pc, #52]	@ (8007880 <check_dwc2+0x60>)
 800784c:	60bb      	str	r3, [r7, #8]
 800784e:	68bb      	ldr	r3, [r7, #8]
 8007850:	681b      	ldr	r3, [r3, #0]
 8007852:	f003 0301 	and.w	r3, r3, #1
 8007856:	2b00      	cmp	r3, #0
 8007858:	d000      	beq.n	800785c <check_dwc2+0x3c>
 800785a:	be00      	bkpt	0x0000
 800785c:	2300      	movs	r3, #0
 800785e:	e000      	b.n	8007862 <check_dwc2+0x42>
#endif

  return true;
 8007860:	2301      	movs	r3, #1
}
 8007862:	4618      	mov	r0, r3
 8007864:	3714      	adds	r7, #20
 8007866:	46bd      	mov	sp, r7
 8007868:	f85d 7b04 	ldr.w	r7, [sp], #4
 800786c:	4770      	bx	lr
 800786e:	bf00      	nop
 8007870:	ffff0000 	.word	0xffff0000
 8007874:	4f540000 	.word	0x4f540000
 8007878:	55310000 	.word	0x55310000
 800787c:	55320000 	.word	0x55320000
 8007880:	e000edf0 	.word	0xe000edf0

08007884 <dcd_init>:

void dcd_init(uint8_t rhport) {
 8007884:	b580      	push	{r7, lr}
 8007886:	b084      	sub	sp, #16
 8007888:	af00      	add	r7, sp, #0
 800788a:	4603      	mov	r3, r0
 800788c:	71fb      	strb	r3, [r7, #7]
  // Programming model begins in the last section of the chapter on the USB
  // peripheral in each Reference Manual.
  dwc2_regs_t* dwc2 = DWC2_REG(rhport);
 800788e:	79fb      	ldrb	r3, [r7, #7]
 8007890:	4a3e      	ldr	r2, [pc, #248]	@ (800798c <dcd_init+0x108>)
 8007892:	011b      	lsls	r3, r3, #4
 8007894:	4413      	add	r3, r2
 8007896:	681b      	ldr	r3, [r3, #0]
 8007898:	60fb      	str	r3, [r7, #12]

  // Check Synopsys ID register, failed if controller clock/power is not enabled
  if (!check_dwc2(dwc2)) return;
 800789a:	68f8      	ldr	r0, [r7, #12]
 800789c:	f7ff ffc0 	bl	8007820 <check_dwc2>
 80078a0:	4603      	mov	r3, r0
 80078a2:	f083 0301 	eor.w	r3, r3, #1
 80078a6:	b2db      	uxtb	r3, r3
 80078a8:	2b00      	cmp	r3, #0
 80078aa:	d16b      	bne.n	8007984 <dcd_init+0x100>
  dcd_disconnect(rhport);
 80078ac:	79fb      	ldrb	r3, [r7, #7]
 80078ae:	4618      	mov	r0, r3
 80078b0:	f000 f8f0 	bl	8007a94 <dcd_disconnect>

  // max number of endpoints & total_fifo_size are:
  // hw_cfg2->num_dev_ep, hw_cfg2->total_fifo_size

  if (phy_hs_supported(dwc2)) {
 80078b4:	68f8      	ldr	r0, [r7, #12]
 80078b6:	f7ff fef4 	bl	80076a2 <phy_hs_supported>
 80078ba:	4603      	mov	r3, r0
 80078bc:	2b00      	cmp	r3, #0
 80078be:	d003      	beq.n	80078c8 <dcd_init+0x44>
    phy_hs_init(dwc2); // Highspeed
 80078c0:	68f8      	ldr	r0, [r7, #12]
 80078c2:	f7ff ff2c 	bl	800771e <phy_hs_init>
 80078c6:	e002      	b.n	80078ce <dcd_init+0x4a>
  } else {
    phy_fs_init(dwc2); // core does not support highspeed or hs phy is not present
 80078c8:	68f8      	ldr	r0, [r7, #12]
 80078ca:	f7ff feff 	bl	80076cc <phy_fs_init>
  }

  // Restart PHY clock
  dwc2->pcgctl &= ~(PCGCTL_STOPPCLK | PCGCTL_GATEHCLK | PCGCTL_PWRCLMP | PCGCTL_RSTPDWNMODULE);
 80078ce:	68fb      	ldr	r3, [r7, #12]
 80078d0:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	@ 0xe00
 80078d4:	f023 020f 	bic.w	r2, r3, #15
 80078d8:	68fb      	ldr	r3, [r7, #12]
 80078da:	f8c3 2e00 	str.w	r2, [r3, #3584]	@ 0xe00
   * duration in the core to account for any additional delays
   * introduced by the PHY. This can be required, because the delay
   * introduced by the PHY in generating the linestate condition
   * can vary from one PHY to another.
   */
  dwc2->gusbcfg |= (7ul << GUSBCFG_TOCAL_Pos);
 80078de:	68fb      	ldr	r3, [r7, #12]
 80078e0:	68db      	ldr	r3, [r3, #12]
 80078e2:	f043 0207 	orr.w	r2, r3, #7
 80078e6:	68fb      	ldr	r3, [r7, #12]
 80078e8:	60da      	str	r2, [r3, #12]

  // Force device mode
  dwc2->gusbcfg = (dwc2->gusbcfg & ~GUSBCFG_FHMOD) | GUSBCFG_FDMOD;
 80078ea:	68fb      	ldr	r3, [r7, #12]
 80078ec:	68db      	ldr	r3, [r3, #12]
 80078ee:	f023 43c0 	bic.w	r3, r3, #1610612736	@ 0x60000000
 80078f2:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 80078f6:	68fb      	ldr	r3, [r7, #12]
 80078f8:	60da      	str	r2, [r3, #12]

  // Clear A override, force B Valid
  dwc2->gotgctl = (dwc2->gotgctl & ~GOTGCTL_AVALOEN) | GOTGCTL_BVALOEN | GOTGCTL_BVALOVAL;
 80078fa:	68fb      	ldr	r3, [r7, #12]
 80078fc:	681b      	ldr	r3, [r3, #0]
 80078fe:	f023 03d0 	bic.w	r3, r3, #208	@ 0xd0
 8007902:	f043 02c0 	orr.w	r2, r3, #192	@ 0xc0
 8007906:	68fb      	ldr	r3, [r7, #12]
 8007908:	601a      	str	r2, [r3, #0]

  // If USB host misbehaves during status portion of control xfer
  // (non zero-length packet), send STALL back and discard.
  dwc2->dcfg |= DCFG_NZLSOHSK;
 800790a:	68fb      	ldr	r3, [r7, #12]
 800790c:	f8d3 3800 	ldr.w	r3, [r3, #2048]	@ 0x800
 8007910:	f043 0204 	orr.w	r2, r3, #4
 8007914:	68fb      	ldr	r3, [r7, #12]
 8007916:	f8c3 2800 	str.w	r2, [r3, #2048]	@ 0x800

  // flush all TX fifo and wait for it cleared
  dwc2->grstctl = GRSTCTL_TXFFLSH | (0x10u << GRSTCTL_TXFNUM_Pos);
 800791a:	68fb      	ldr	r3, [r7, #12]
 800791c:	f44f 6284 	mov.w	r2, #1056	@ 0x420
 8007920:	611a      	str	r2, [r3, #16]
  while (dwc2->grstctl & GRSTCTL_TXFFLSH_Msk) {}
 8007922:	bf00      	nop
 8007924:	68fb      	ldr	r3, [r7, #12]
 8007926:	691b      	ldr	r3, [r3, #16]
 8007928:	f003 0320 	and.w	r3, r3, #32
 800792c:	2b00      	cmp	r3, #0
 800792e:	d1f9      	bne.n	8007924 <dcd_init+0xa0>

  // flush RX fifo and wait for it cleared
  dwc2->grstctl = GRSTCTL_RXFFLSH;
 8007930:	68fb      	ldr	r3, [r7, #12]
 8007932:	2210      	movs	r2, #16
 8007934:	611a      	str	r2, [r3, #16]
  while (dwc2->grstctl & GRSTCTL_RXFFLSH_Msk) {}
 8007936:	bf00      	nop
 8007938:	68fb      	ldr	r3, [r7, #12]
 800793a:	691b      	ldr	r3, [r3, #16]
 800793c:	f003 0310 	and.w	r3, r3, #16
 8007940:	2b00      	cmp	r3, #0
 8007942:	d1f9      	bne.n	8007938 <dcd_init+0xb4>

  // Clear all interrupts
  uint32_t int_mask = dwc2->gintsts;
 8007944:	68fb      	ldr	r3, [r7, #12]
 8007946:	695b      	ldr	r3, [r3, #20]
 8007948:	60bb      	str	r3, [r7, #8]
  dwc2->gintsts |= int_mask;
 800794a:	68fb      	ldr	r3, [r7, #12]
 800794c:	695a      	ldr	r2, [r3, #20]
 800794e:	68bb      	ldr	r3, [r7, #8]
 8007950:	431a      	orrs	r2, r3
 8007952:	68fb      	ldr	r3, [r7, #12]
 8007954:	615a      	str	r2, [r3, #20]
  int_mask = dwc2->gotgint;
 8007956:	68fb      	ldr	r3, [r7, #12]
 8007958:	685b      	ldr	r3, [r3, #4]
 800795a:	60bb      	str	r3, [r7, #8]
  dwc2->gotgint |= int_mask;
 800795c:	68fb      	ldr	r3, [r7, #12]
 800795e:	685a      	ldr	r2, [r3, #4]
 8007960:	68bb      	ldr	r3, [r7, #8]
 8007962:	431a      	orrs	r2, r3
 8007964:	68fb      	ldr	r3, [r7, #12]
 8007966:	605a      	str	r2, [r3, #4]

  // Required as part of core initialization.
  // TODO: How should mode mismatch be handled? It will cause
  // the core to stop working/require reset.
  dwc2->gintmsk = GINTMSK_OTGINT | GINTMSK_MMISM | GINTMSK_RXFLVLM |
 8007968:	68fb      	ldr	r3, [r7, #12]
 800796a:	4a09      	ldr	r2, [pc, #36]	@ (8007990 <dcd_init+0x10c>)
 800796c:	619a      	str	r2, [r3, #24]
                  GINTMSK_USBSUSPM | GINTMSK_USBRST | GINTMSK_ENUMDNEM | GINTMSK_WUIM;

  // Enable global interrupt
  dwc2->gahbcfg |= GAHBCFG_GINT;
 800796e:	68fb      	ldr	r3, [r7, #12]
 8007970:	689b      	ldr	r3, [r3, #8]
 8007972:	f043 0201 	orr.w	r2, r3, #1
 8007976:	68fb      	ldr	r3, [r7, #12]
 8007978:	609a      	str	r2, [r3, #8]
//  TU_LOG_HEX(DWC2_DEBUG, dwc2->gotgctl);
//  TU_LOG_HEX(DWC2_DEBUG, dwc2->gusbcfg);
//  TU_LOG_HEX(DWC2_DEBUG, dwc2->dcfg);
//  TU_LOG_HEX(DWC2_DEBUG, dwc2->gahbcfg);

  dcd_connect(rhport);
 800797a:	79fb      	ldrb	r3, [r7, #7]
 800797c:	4618      	mov	r0, r3
 800797e:	f000 f86d 	bl	8007a5c <dcd_connect>
 8007982:	e000      	b.n	8007986 <dcd_init+0x102>
  if (!check_dwc2(dwc2)) return;
 8007984:	bf00      	nop
}
 8007986:	3710      	adds	r7, #16
 8007988:	46bd      	mov	sp, r7
 800798a:	bd80      	pop	{r7, pc}
 800798c:	0801bfb8 	.word	0x0801bfb8
 8007990:	80003816 	.word	0x80003816

08007994 <dcd_int_enable>:

void dcd_int_enable(uint8_t rhport) {
 8007994:	b580      	push	{r7, lr}
 8007996:	b084      	sub	sp, #16
 8007998:	af00      	add	r7, sp, #0
 800799a:	4603      	mov	r3, r0
 800799c:	71fb      	strb	r3, [r7, #7]
 800799e:	79fb      	ldrb	r3, [r7, #7]
 80079a0:	73fb      	strb	r3, [r7, #15]
  NVIC_EnableIRQ((IRQn_Type) _dwc2_controller[rhport].irqnum);
 80079a2:	7bfb      	ldrb	r3, [r7, #15]
 80079a4:	4a06      	ldr	r2, [pc, #24]	@ (80079c0 <dcd_int_enable+0x2c>)
 80079a6:	011b      	lsls	r3, r3, #4
 80079a8:	4413      	add	r3, r2
 80079aa:	3304      	adds	r3, #4
 80079ac:	681b      	ldr	r3, [r3, #0]
 80079ae:	b21b      	sxth	r3, r3
 80079b0:	4618      	mov	r0, r3
 80079b2:	f7ff fb83 	bl	80070bc <__NVIC_EnableIRQ>
}
 80079b6:	bf00      	nop
  dwc2_dcd_int_enable(rhport);
}
 80079b8:	bf00      	nop
 80079ba:	3710      	adds	r7, #16
 80079bc:	46bd      	mov	sp, r7
 80079be:	bd80      	pop	{r7, pc}
 80079c0:	0801bfb8 	.word	0x0801bfb8

080079c4 <dcd_int_disable>:

void dcd_int_disable(uint8_t rhport) {
 80079c4:	b580      	push	{r7, lr}
 80079c6:	b084      	sub	sp, #16
 80079c8:	af00      	add	r7, sp, #0
 80079ca:	4603      	mov	r3, r0
 80079cc:	71fb      	strb	r3, [r7, #7]
 80079ce:	79fb      	ldrb	r3, [r7, #7]
 80079d0:	73fb      	strb	r3, [r7, #15]
  NVIC_DisableIRQ((IRQn_Type) _dwc2_controller[rhport].irqnum);
 80079d2:	7bfb      	ldrb	r3, [r7, #15]
 80079d4:	4a06      	ldr	r2, [pc, #24]	@ (80079f0 <dcd_int_disable+0x2c>)
 80079d6:	011b      	lsls	r3, r3, #4
 80079d8:	4413      	add	r3, r2
 80079da:	3304      	adds	r3, #4
 80079dc:	681b      	ldr	r3, [r3, #0]
 80079de:	b21b      	sxth	r3, r3
 80079e0:	4618      	mov	r0, r3
 80079e2:	f7ff fb89 	bl	80070f8 <__NVIC_DisableIRQ>
}
 80079e6:	bf00      	nop
  dwc2_dcd_int_disable(rhport);
}
 80079e8:	bf00      	nop
 80079ea:	3710      	adds	r7, #16
 80079ec:	46bd      	mov	sp, r7
 80079ee:	bd80      	pop	{r7, pc}
 80079f0:	0801bfb8 	.word	0x0801bfb8

080079f4 <dcd_set_address>:

void dcd_set_address(uint8_t rhport, uint8_t dev_addr) {
 80079f4:	b580      	push	{r7, lr}
 80079f6:	b084      	sub	sp, #16
 80079f8:	af00      	add	r7, sp, #0
 80079fa:	4603      	mov	r3, r0
 80079fc:	460a      	mov	r2, r1
 80079fe:	71fb      	strb	r3, [r7, #7]
 8007a00:	4613      	mov	r3, r2
 8007a02:	71bb      	strb	r3, [r7, #6]
  dwc2_regs_t* dwc2 = DWC2_REG(rhport);
 8007a04:	79fb      	ldrb	r3, [r7, #7]
 8007a06:	4a14      	ldr	r2, [pc, #80]	@ (8007a58 <dcd_set_address+0x64>)
 8007a08:	011b      	lsls	r3, r3, #4
 8007a0a:	4413      	add	r3, r2
 8007a0c:	681b      	ldr	r3, [r3, #0]
 8007a0e:	60fb      	str	r3, [r7, #12]
  dwc2->dcfg = (dwc2->dcfg & ~DCFG_DAD_Msk) | (dev_addr << DCFG_DAD_Pos);
 8007a10:	68fb      	ldr	r3, [r7, #12]
 8007a12:	f8d3 3800 	ldr.w	r3, [r3, #2048]	@ 0x800
 8007a16:	f423 62fe 	bic.w	r2, r3, #2032	@ 0x7f0
 8007a1a:	79bb      	ldrb	r3, [r7, #6]
 8007a1c:	011b      	lsls	r3, r3, #4
 8007a1e:	431a      	orrs	r2, r3
 8007a20:	68fb      	ldr	r3, [r7, #12]
 8007a22:	f8c3 2800 	str.w	r2, [r3, #2048]	@ 0x800
 8007a26:	2300      	movs	r3, #0
 8007a28:	72fb      	strb	r3, [r7, #11]
 8007a2a:	2301      	movs	r3, #1
 8007a2c:	72bb      	strb	r3, [r7, #10]
  return (uint8_t)(num | (dir ? TUSB_DIR_IN_MASK : 0));
 8007a2e:	7abb      	ldrb	r3, [r7, #10]
 8007a30:	2b00      	cmp	r3, #0
 8007a32:	d002      	beq.n	8007a3a <dcd_set_address+0x46>
 8007a34:	f06f 037f 	mvn.w	r3, #127	@ 0x7f
 8007a38:	e000      	b.n	8007a3c <dcd_set_address+0x48>
 8007a3a:	2300      	movs	r3, #0
 8007a3c:	f997 200b 	ldrsb.w	r2, [r7, #11]
 8007a40:	4313      	orrs	r3, r2
 8007a42:	b25b      	sxtb	r3, r3
 8007a44:	b2d9      	uxtb	r1, r3

  // Response with status after changing device address
  dcd_edpt_xfer(rhport, tu_edpt_addr(0, TUSB_DIR_IN), NULL, 0);
 8007a46:	79f8      	ldrb	r0, [r7, #7]
 8007a48:	2300      	movs	r3, #0
 8007a4a:	2200      	movs	r2, #0
 8007a4c:	f000 f9c6 	bl	8007ddc <dcd_edpt_xfer>
}
 8007a50:	bf00      	nop
 8007a52:	3710      	adds	r7, #16
 8007a54:	46bd      	mov	sp, r7
 8007a56:	bd80      	pop	{r7, pc}
 8007a58:	0801bfb8 	.word	0x0801bfb8

08007a5c <dcd_connect>:
  dwc2_remote_wakeup_delay();

  dwc2->dctl &= ~DCTL_RWUSIG;
}

void dcd_connect(uint8_t rhport) {
 8007a5c:	b480      	push	{r7}
 8007a5e:	b085      	sub	sp, #20
 8007a60:	af00      	add	r7, sp, #0
 8007a62:	4603      	mov	r3, r0
 8007a64:	71fb      	strb	r3, [r7, #7]
  (void) rhport;
  dwc2_regs_t* dwc2 = DWC2_REG(rhport);
 8007a66:	79fb      	ldrb	r3, [r7, #7]
 8007a68:	4a09      	ldr	r2, [pc, #36]	@ (8007a90 <dcd_connect+0x34>)
 8007a6a:	011b      	lsls	r3, r3, #4
 8007a6c:	4413      	add	r3, r2
 8007a6e:	681b      	ldr	r3, [r3, #0]
 8007a70:	60fb      	str	r3, [r7, #12]
  dwc2->dctl &= ~DCTL_SDIS;
 8007a72:	68fb      	ldr	r3, [r7, #12]
 8007a74:	f8d3 3804 	ldr.w	r3, [r3, #2052]	@ 0x804
 8007a78:	f023 0202 	bic.w	r2, r3, #2
 8007a7c:	68fb      	ldr	r3, [r7, #12]
 8007a7e:	f8c3 2804 	str.w	r2, [r3, #2052]	@ 0x804
}
 8007a82:	bf00      	nop
 8007a84:	3714      	adds	r7, #20
 8007a86:	46bd      	mov	sp, r7
 8007a88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a8c:	4770      	bx	lr
 8007a8e:	bf00      	nop
 8007a90:	0801bfb8 	.word	0x0801bfb8

08007a94 <dcd_disconnect>:

void dcd_disconnect(uint8_t rhport) {
 8007a94:	b480      	push	{r7}
 8007a96:	b085      	sub	sp, #20
 8007a98:	af00      	add	r7, sp, #0
 8007a9a:	4603      	mov	r3, r0
 8007a9c:	71fb      	strb	r3, [r7, #7]
  (void) rhport;
  dwc2_regs_t* dwc2 = DWC2_REG(rhport);
 8007a9e:	79fb      	ldrb	r3, [r7, #7]
 8007aa0:	4a09      	ldr	r2, [pc, #36]	@ (8007ac8 <dcd_disconnect+0x34>)
 8007aa2:	011b      	lsls	r3, r3, #4
 8007aa4:	4413      	add	r3, r2
 8007aa6:	681b      	ldr	r3, [r3, #0]
 8007aa8:	60fb      	str	r3, [r7, #12]
  dwc2->dctl |= DCTL_SDIS;
 8007aaa:	68fb      	ldr	r3, [r7, #12]
 8007aac:	f8d3 3804 	ldr.w	r3, [r3, #2052]	@ 0x804
 8007ab0:	f043 0202 	orr.w	r2, r3, #2
 8007ab4:	68fb      	ldr	r3, [r7, #12]
 8007ab6:	f8c3 2804 	str.w	r2, [r3, #2052]	@ 0x804
}
 8007aba:	bf00      	nop
 8007abc:	3714      	adds	r7, #20
 8007abe:	46bd      	mov	sp, r7
 8007ac0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ac4:	4770      	bx	lr
 8007ac6:	bf00      	nop
 8007ac8:	0801bfb8 	.word	0x0801bfb8

08007acc <dcd_edpt_open>:

/*------------------------------------------------------------------*/
/* DCD Endpoint port
 *------------------------------------------------------------------*/

bool dcd_edpt_open(uint8_t rhport, tusb_desc_endpoint_t const* desc_edpt) {
 8007acc:	b580      	push	{r7, lr}
 8007ace:	b08e      	sub	sp, #56	@ 0x38
 8007ad0:	af00      	add	r7, sp, #0
 8007ad2:	4603      	mov	r3, r0
 8007ad4:	6039      	str	r1, [r7, #0]
 8007ad6:	71fb      	strb	r3, [r7, #7]
  (void) rhport;

  dwc2_regs_t* dwc2 = DWC2_REG(rhport);
 8007ad8:	79fb      	ldrb	r3, [r7, #7]
 8007ada:	4a96      	ldr	r2, [pc, #600]	@ (8007d34 <dcd_edpt_open+0x268>)
 8007adc:	011b      	lsls	r3, r3, #4
 8007ade:	4413      	add	r3, r2
 8007ae0:	681b      	ldr	r3, [r3, #0]
 8007ae2:	637b      	str	r3, [r7, #52]	@ 0x34
  uint8_t const ep_count = _dwc2_controller[rhport].ep_count;
 8007ae4:	79fb      	ldrb	r3, [r7, #7]
 8007ae6:	4a93      	ldr	r2, [pc, #588]	@ (8007d34 <dcd_edpt_open+0x268>)
 8007ae8:	011b      	lsls	r3, r3, #4
 8007aea:	4413      	add	r3, r2
 8007aec:	3308      	adds	r3, #8
 8007aee:	781b      	ldrb	r3, [r3, #0]
 8007af0:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33

  uint8_t const epnum = tu_edpt_number(desc_edpt->bEndpointAddress);
 8007af4:	683b      	ldr	r3, [r7, #0]
 8007af6:	789b      	ldrb	r3, [r3, #2]
 8007af8:	75bb      	strb	r3, [r7, #22]
  return (uint8_t)(addr & (~TUSB_DIR_IN_MASK));
 8007afa:	7dbb      	ldrb	r3, [r7, #22]
 8007afc:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007b00:	b2db      	uxtb	r3, r3
 8007b02:	f887 3032 	strb.w	r3, [r7, #50]	@ 0x32
  uint8_t const dir = tu_edpt_dir(desc_edpt->bEndpointAddress);
 8007b06:	683b      	ldr	r3, [r7, #0]
 8007b08:	789b      	ldrb	r3, [r3, #2]
 8007b0a:	75fb      	strb	r3, [r7, #23]
  return (addr & TUSB_DIR_IN_MASK) ? TUSB_DIR_IN : TUSB_DIR_OUT;
 8007b0c:	7dfb      	ldrb	r3, [r7, #23]
 8007b0e:	09db      	lsrs	r3, r3, #7
 8007b10:	b2db      	uxtb	r3, r3
 8007b12:	f887 3031 	strb.w	r3, [r7, #49]	@ 0x31

  TU_ASSERT(epnum < ep_count);
 8007b16:	f897 2032 	ldrb.w	r2, [r7, #50]	@ 0x32
 8007b1a:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8007b1e:	429a      	cmp	r2, r3
 8007b20:	d30a      	bcc.n	8007b38 <dcd_edpt_open+0x6c>
 8007b22:	4b85      	ldr	r3, [pc, #532]	@ (8007d38 <dcd_edpt_open+0x26c>)
 8007b24:	61bb      	str	r3, [r7, #24]
 8007b26:	69bb      	ldr	r3, [r7, #24]
 8007b28:	681b      	ldr	r3, [r3, #0]
 8007b2a:	f003 0301 	and.w	r3, r3, #1
 8007b2e:	2b00      	cmp	r3, #0
 8007b30:	d000      	beq.n	8007b34 <dcd_edpt_open+0x68>
 8007b32:	be00      	bkpt	0x0000
 8007b34:	2300      	movs	r3, #0
 8007b36:	e0f9      	b.n	8007d2c <dcd_edpt_open+0x260>

  xfer_ctl_t* xfer = XFER_CTL_BASE(epnum, dir);
 8007b38:	f897 2032 	ldrb.w	r2, [r7, #50]	@ 0x32
 8007b3c:	f897 3031 	ldrb.w	r3, [r7, #49]	@ 0x31
 8007b40:	0052      	lsls	r2, r2, #1
 8007b42:	4413      	add	r3, r2
 8007b44:	011b      	lsls	r3, r3, #4
 8007b46:	4a7d      	ldr	r2, [pc, #500]	@ (8007d3c <dcd_edpt_open+0x270>)
 8007b48:	4413      	add	r3, r2
 8007b4a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8007b4c:	683b      	ldr	r3, [r7, #0]
 8007b4e:	60bb      	str	r3, [r7, #8]
  return tu_le16toh(desc_ep->wMaxPacketSize) & TU_GENMASK(10, 0);
 8007b50:	68bb      	ldr	r3, [r7, #8]
 8007b52:	889b      	ldrh	r3, [r3, #4]
 8007b54:	b29b      	uxth	r3, r3
 8007b56:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8007b5a:	b29a      	uxth	r2, r3
  xfer->max_size = tu_edpt_packet_size(desc_edpt);
 8007b5c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007b5e:	815a      	strh	r2, [r3, #10]
  xfer->interval = desc_edpt->bInterval;
 8007b60:	683b      	ldr	r3, [r7, #0]
 8007b62:	799a      	ldrb	r2, [r3, #6]
 8007b64:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007b66:	731a      	strb	r2, [r3, #12]

  uint16_t const fifo_size = tu_div_ceil(xfer->max_size, 4);
 8007b68:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007b6a:	895b      	ldrh	r3, [r3, #10]
 8007b6c:	613b      	str	r3, [r7, #16]
 8007b6e:	2304      	movs	r3, #4
 8007b70:	60fb      	str	r3, [r7, #12]
TU_ATTR_ALWAYS_INLINE static inline uint32_t tu_div_ceil(uint32_t v, uint32_t d) { return (v + d -1)/d; }
 8007b72:	693a      	ldr	r2, [r7, #16]
 8007b74:	68fb      	ldr	r3, [r7, #12]
 8007b76:	4413      	add	r3, r2
 8007b78:	1e5a      	subs	r2, r3, #1
 8007b7a:	68fb      	ldr	r3, [r7, #12]
 8007b7c:	fbb2 f3f3 	udiv	r3, r2, r3
 8007b80:	857b      	strh	r3, [r7, #42]	@ 0x2a

  if (dir == TUSB_DIR_OUT) {
 8007b82:	f897 3031 	ldrb.w	r3, [r7, #49]	@ 0x31
 8007b86:	2b00      	cmp	r3, #0
 8007b88:	d15f      	bne.n	8007c4a <dcd_edpt_open+0x17e>
    // Calculate required size of RX FIFO
    uint16_t const sz = calc_grxfsiz(4 * fifo_size, ep_count);
 8007b8a:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8007b8c:	009b      	lsls	r3, r3, #2
 8007b8e:	b29b      	uxth	r3, r3
 8007b90:	f897 2033 	ldrb.w	r2, [r7, #51]	@ 0x33
 8007b94:	4611      	mov	r1, r2
 8007b96:	4618      	mov	r0, r3
 8007b98:	f7ff fb82 	bl	80072a0 <calc_grxfsiz>
 8007b9c:	4603      	mov	r3, r0
 8007b9e:	847b      	strh	r3, [r7, #34]	@ 0x22

    // If size_rx needs to be extended check if possible and if so enlarge it
    if (dwc2->grxfsiz < sz) {
 8007ba0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007ba2:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8007ba4:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8007ba6:	429a      	cmp	r2, r3
 8007ba8:	d21b      	bcs.n	8007be2 <dcd_edpt_open+0x116>
      TU_ASSERT(sz + _allocated_fifo_words_tx <= _dwc2_controller[rhport].ep_fifo_size / 4);
 8007baa:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8007bac:	4a64      	ldr	r2, [pc, #400]	@ (8007d40 <dcd_edpt_open+0x274>)
 8007bae:	8812      	ldrh	r2, [r2, #0]
 8007bb0:	4413      	add	r3, r2
 8007bb2:	4619      	mov	r1, r3
 8007bb4:	79fb      	ldrb	r3, [r7, #7]
 8007bb6:	4a5f      	ldr	r2, [pc, #380]	@ (8007d34 <dcd_edpt_open+0x268>)
 8007bb8:	011b      	lsls	r3, r3, #4
 8007bba:	4413      	add	r3, r2
 8007bbc:	330c      	adds	r3, #12
 8007bbe:	681b      	ldr	r3, [r3, #0]
 8007bc0:	089b      	lsrs	r3, r3, #2
 8007bc2:	4299      	cmp	r1, r3
 8007bc4:	d90a      	bls.n	8007bdc <dcd_edpt_open+0x110>
 8007bc6:	4b5c      	ldr	r3, [pc, #368]	@ (8007d38 <dcd_edpt_open+0x26c>)
 8007bc8:	61fb      	str	r3, [r7, #28]
 8007bca:	69fb      	ldr	r3, [r7, #28]
 8007bcc:	681b      	ldr	r3, [r3, #0]
 8007bce:	f003 0301 	and.w	r3, r3, #1
 8007bd2:	2b00      	cmp	r3, #0
 8007bd4:	d000      	beq.n	8007bd8 <dcd_edpt_open+0x10c>
 8007bd6:	be00      	bkpt	0x0000
 8007bd8:	2300      	movs	r3, #0
 8007bda:	e0a7      	b.n	8007d2c <dcd_edpt_open+0x260>

      // Enlarge RX FIFO
      dwc2->grxfsiz = sz;
 8007bdc:	8c7a      	ldrh	r2, [r7, #34]	@ 0x22
 8007bde:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007be0:	625a      	str	r2, [r3, #36]	@ 0x24
    }

    dwc2->epout[epnum].doepctl |= (1 << DOEPCTL_USBAEP_Pos) |
 8007be2:	f897 3032 	ldrb.w	r3, [r7, #50]	@ 0x32
 8007be6:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8007be8:	3358      	adds	r3, #88	@ 0x58
 8007bea:	015b      	lsls	r3, r3, #5
 8007bec:	4413      	add	r3, r2
 8007bee:	681a      	ldr	r2, [r3, #0]
                                  (desc_edpt->bmAttributes.xfer << DOEPCTL_EPTYP_Pos) |
 8007bf0:	683b      	ldr	r3, [r7, #0]
 8007bf2:	78db      	ldrb	r3, [r3, #3]
 8007bf4:	f3c3 0301 	ubfx	r3, r3, #0, #2
 8007bf8:	b2db      	uxtb	r3, r3
 8007bfa:	049b      	lsls	r3, r3, #18
                                  (desc_edpt->bmAttributes.xfer != TUSB_XFER_ISOCHRONOUS ? DOEPCTL_SD0PID_SEVNFRM : 0) |
 8007bfc:	6839      	ldr	r1, [r7, #0]
 8007bfe:	78c9      	ldrb	r1, [r1, #3]
 8007c00:	f001 0103 	and.w	r1, r1, #3
 8007c04:	b2c9      	uxtb	r1, r1
 8007c06:	2901      	cmp	r1, #1
 8007c08:	d002      	beq.n	8007c10 <dcd_edpt_open+0x144>
 8007c0a:	f04f 5180 	mov.w	r1, #268435456	@ 0x10000000
 8007c0e:	e000      	b.n	8007c12 <dcd_edpt_open+0x146>
 8007c10:	2100      	movs	r1, #0
                                  (desc_edpt->bmAttributes.xfer << DOEPCTL_EPTYP_Pos) |
 8007c12:	430b      	orrs	r3, r1
                                  (xfer->max_size << DOEPCTL_MPSIZ_Pos);
 8007c14:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8007c16:	8949      	ldrh	r1, [r1, #10]
                                  (desc_edpt->bmAttributes.xfer != TUSB_XFER_ISOCHRONOUS ? DOEPCTL_SD0PID_SEVNFRM : 0) |
 8007c18:	430b      	orrs	r3, r1
    dwc2->epout[epnum].doepctl |= (1 << DOEPCTL_USBAEP_Pos) |
 8007c1a:	431a      	orrs	r2, r3
 8007c1c:	f897 3032 	ldrb.w	r3, [r7, #50]	@ 0x32
 8007c20:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8007c24:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8007c26:	3358      	adds	r3, #88	@ 0x58
 8007c28:	015b      	lsls	r3, r3, #5
 8007c2a:	440b      	add	r3, r1
 8007c2c:	601a      	str	r2, [r3, #0]

    dwc2->daintmsk |= TU_BIT(DAINTMSK_OEPM_Pos + epnum);
 8007c2e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007c30:	f8d3 281c 	ldr.w	r2, [r3, #2076]	@ 0x81c
 8007c34:	f897 3032 	ldrb.w	r3, [r7, #50]	@ 0x32
 8007c38:	3310      	adds	r3, #16
 8007c3a:	2101      	movs	r1, #1
 8007c3c:	fa01 f303 	lsl.w	r3, r1, r3
 8007c40:	431a      	orrs	r2, r3
 8007c42:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007c44:	f8c3 281c 	str.w	r2, [r3, #2076]	@ 0x81c
 8007c48:	e06f      	b.n	8007d2a <dcd_edpt_open+0x25e>
    //
    // In FIFO is allocated by following rules:
    // - IN EP 1 gets FIFO 1, IN EP "n" gets FIFO "n".

    // Check if free space is available
    TU_ASSERT(_allocated_fifo_words_tx + fifo_size + dwc2->grxfsiz <= _dwc2_controller[rhport].ep_fifo_size / 4);
 8007c4a:	4b3d      	ldr	r3, [pc, #244]	@ (8007d40 <dcd_edpt_open+0x274>)
 8007c4c:	881b      	ldrh	r3, [r3, #0]
 8007c4e:	461a      	mov	r2, r3
 8007c50:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8007c52:	4413      	add	r3, r2
 8007c54:	461a      	mov	r2, r3
 8007c56:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007c58:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007c5a:	441a      	add	r2, r3
 8007c5c:	79fb      	ldrb	r3, [r7, #7]
 8007c5e:	4935      	ldr	r1, [pc, #212]	@ (8007d34 <dcd_edpt_open+0x268>)
 8007c60:	011b      	lsls	r3, r3, #4
 8007c62:	440b      	add	r3, r1
 8007c64:	330c      	adds	r3, #12
 8007c66:	681b      	ldr	r3, [r3, #0]
 8007c68:	089b      	lsrs	r3, r3, #2
 8007c6a:	429a      	cmp	r2, r3
 8007c6c:	d90a      	bls.n	8007c84 <dcd_edpt_open+0x1b8>
 8007c6e:	4b32      	ldr	r3, [pc, #200]	@ (8007d38 <dcd_edpt_open+0x26c>)
 8007c70:	627b      	str	r3, [r7, #36]	@ 0x24
 8007c72:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007c74:	681b      	ldr	r3, [r3, #0]
 8007c76:	f003 0301 	and.w	r3, r3, #1
 8007c7a:	2b00      	cmp	r3, #0
 8007c7c:	d000      	beq.n	8007c80 <dcd_edpt_open+0x1b4>
 8007c7e:	be00      	bkpt	0x0000
 8007c80:	2300      	movs	r3, #0
 8007c82:	e053      	b.n	8007d2c <dcd_edpt_open+0x260>

    _allocated_fifo_words_tx += fifo_size;
 8007c84:	4b2e      	ldr	r3, [pc, #184]	@ (8007d40 <dcd_edpt_open+0x274>)
 8007c86:	881a      	ldrh	r2, [r3, #0]
 8007c88:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8007c8a:	4413      	add	r3, r2
 8007c8c:	b29a      	uxth	r2, r3
 8007c8e:	4b2c      	ldr	r3, [pc, #176]	@ (8007d40 <dcd_edpt_open+0x274>)
 8007c90:	801a      	strh	r2, [r3, #0]
    TU_LOG(DWC2_DEBUG, "    Allocated %u bytes at offset %lu", fifo_size * 4,
           _dwc2_controller[rhport].ep_fifo_size - _allocated_fifo_words_tx * 4);

    // DIEPTXF starts at FIFO #1.
    // Both TXFD and TXSA are in unit of 32-bit words.
    dwc2->dieptxf[epnum - 1] = (fifo_size << DIEPTXF_INEPTXFD_Pos) |
 8007c92:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8007c94:	0419      	lsls	r1, r3, #16
                               (_dwc2_controller[rhport].ep_fifo_size / 4 - _allocated_fifo_words_tx);
 8007c96:	79fb      	ldrb	r3, [r7, #7]
 8007c98:	4a26      	ldr	r2, [pc, #152]	@ (8007d34 <dcd_edpt_open+0x268>)
 8007c9a:	011b      	lsls	r3, r3, #4
 8007c9c:	4413      	add	r3, r2
 8007c9e:	330c      	adds	r3, #12
 8007ca0:	681b      	ldr	r3, [r3, #0]
 8007ca2:	089b      	lsrs	r3, r3, #2
 8007ca4:	4a26      	ldr	r2, [pc, #152]	@ (8007d40 <dcd_edpt_open+0x274>)
 8007ca6:	8812      	ldrh	r2, [r2, #0]
 8007ca8:	1a9a      	subs	r2, r3, r2
    dwc2->dieptxf[epnum - 1] = (fifo_size << DIEPTXF_INEPTXFD_Pos) |
 8007caa:	f897 3032 	ldrb.w	r3, [r7, #50]	@ 0x32
 8007cae:	3b01      	subs	r3, #1
 8007cb0:	430a      	orrs	r2, r1
 8007cb2:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8007cb4:	3340      	adds	r3, #64	@ 0x40
 8007cb6:	009b      	lsls	r3, r3, #2
 8007cb8:	440b      	add	r3, r1
 8007cba:	605a      	str	r2, [r3, #4]

    dwc2->epin[epnum].diepctl |= (1 << DIEPCTL_USBAEP_Pos) |
 8007cbc:	f897 3032 	ldrb.w	r3, [r7, #50]	@ 0x32
 8007cc0:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8007cc2:	3348      	adds	r3, #72	@ 0x48
 8007cc4:	015b      	lsls	r3, r3, #5
 8007cc6:	4413      	add	r3, r2
 8007cc8:	6819      	ldr	r1, [r3, #0]
                                 (epnum << DIEPCTL_TXFNUM_Pos) |
 8007cca:	f897 3032 	ldrb.w	r3, [r7, #50]	@ 0x32
 8007cce:	059b      	lsls	r3, r3, #22
    dwc2->epin[epnum].diepctl |= (1 << DIEPCTL_USBAEP_Pos) |
 8007cd0:	f443 4200 	orr.w	r2, r3, #32768	@ 0x8000
                                 (desc_edpt->bmAttributes.xfer << DIEPCTL_EPTYP_Pos) |
 8007cd4:	683b      	ldr	r3, [r7, #0]
 8007cd6:	78db      	ldrb	r3, [r3, #3]
 8007cd8:	f3c3 0301 	ubfx	r3, r3, #0, #2
 8007cdc:	b2db      	uxtb	r3, r3
 8007cde:	049b      	lsls	r3, r3, #18
                                 (epnum << DIEPCTL_TXFNUM_Pos) |
 8007ce0:	4313      	orrs	r3, r2
 8007ce2:	461a      	mov	r2, r3
                                 (desc_edpt->bmAttributes.xfer != TUSB_XFER_ISOCHRONOUS ? DIEPCTL_SD0PID_SEVNFRM : 0) |
 8007ce4:	683b      	ldr	r3, [r7, #0]
 8007ce6:	78db      	ldrb	r3, [r3, #3]
 8007ce8:	f003 0303 	and.w	r3, r3, #3
 8007cec:	b2db      	uxtb	r3, r3
 8007cee:	2b01      	cmp	r3, #1
 8007cf0:	d002      	beq.n	8007cf8 <dcd_edpt_open+0x22c>
 8007cf2:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8007cf6:	e000      	b.n	8007cfa <dcd_edpt_open+0x22e>
 8007cf8:	2300      	movs	r3, #0
                                 (desc_edpt->bmAttributes.xfer << DIEPCTL_EPTYP_Pos) |
 8007cfa:	4313      	orrs	r3, r2
                                 (xfer->max_size << DIEPCTL_MPSIZ_Pos);
 8007cfc:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8007cfe:	8952      	ldrh	r2, [r2, #10]
                                 (desc_edpt->bmAttributes.xfer != TUSB_XFER_ISOCHRONOUS ? DIEPCTL_SD0PID_SEVNFRM : 0) |
 8007d00:	431a      	orrs	r2, r3
    dwc2->epin[epnum].diepctl |= (1 << DIEPCTL_USBAEP_Pos) |
 8007d02:	f897 3032 	ldrb.w	r3, [r7, #50]	@ 0x32
 8007d06:	430a      	orrs	r2, r1
 8007d08:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8007d0a:	3348      	adds	r3, #72	@ 0x48
 8007d0c:	015b      	lsls	r3, r3, #5
 8007d0e:	440b      	add	r3, r1
 8007d10:	601a      	str	r2, [r3, #0]

    dwc2->daintmsk |= (1 << (DAINTMSK_IEPM_Pos + epnum));
 8007d12:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007d14:	f8d3 381c 	ldr.w	r3, [r3, #2076]	@ 0x81c
 8007d18:	f897 2032 	ldrb.w	r2, [r7, #50]	@ 0x32
 8007d1c:	2101      	movs	r1, #1
 8007d1e:	fa01 f202 	lsl.w	r2, r1, r2
 8007d22:	431a      	orrs	r2, r3
 8007d24:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007d26:	f8c3 281c 	str.w	r2, [r3, #2076]	@ 0x81c
  }

  return true;
 8007d2a:	2301      	movs	r3, #1
}
 8007d2c:	4618      	mov	r0, r3
 8007d2e:	3738      	adds	r7, #56	@ 0x38
 8007d30:	46bd      	mov	sp, r7
 8007d32:	bd80      	pop	{r7, pc}
 8007d34:	0801bfb8 	.word	0x0801bfb8
 8007d38:	e000edf0 	.word	0xe000edf0
 8007d3c:	24001e8c 	.word	0x24001e8c
 8007d40:	24001fb0 	.word	0x24001fb0

08007d44 <dcd_edpt_close_all>:

// Close all non-control endpoints, cancel all pending transfers if any.
void dcd_edpt_close_all(uint8_t rhport) {
 8007d44:	b480      	push	{r7}
 8007d46:	b087      	sub	sp, #28
 8007d48:	af00      	add	r7, sp, #0
 8007d4a:	4603      	mov	r3, r0
 8007d4c:	71fb      	strb	r3, [r7, #7]
  dwc2_regs_t* dwc2 = DWC2_REG(rhport);
 8007d4e:	79fb      	ldrb	r3, [r7, #7]
 8007d50:	4a1f      	ldr	r2, [pc, #124]	@ (8007dd0 <dcd_edpt_close_all+0x8c>)
 8007d52:	011b      	lsls	r3, r3, #4
 8007d54:	4413      	add	r3, r2
 8007d56:	681b      	ldr	r3, [r3, #0]
 8007d58:	613b      	str	r3, [r7, #16]
  uint8_t const ep_count = _dwc2_controller[rhport].ep_count;
 8007d5a:	79fb      	ldrb	r3, [r7, #7]
 8007d5c:	4a1c      	ldr	r2, [pc, #112]	@ (8007dd0 <dcd_edpt_close_all+0x8c>)
 8007d5e:	011b      	lsls	r3, r3, #4
 8007d60:	4413      	add	r3, r2
 8007d62:	3308      	adds	r3, #8
 8007d64:	781b      	ldrb	r3, [r3, #0]
 8007d66:	73fb      	strb	r3, [r7, #15]

  // Disable non-control interrupt
  dwc2->daintmsk = (1 << DAINTMSK_OEPM_Pos) | (1 << DAINTMSK_IEPM_Pos);
 8007d68:	693b      	ldr	r3, [r7, #16]
 8007d6a:	f04f 1201 	mov.w	r2, #65537	@ 0x10001
 8007d6e:	f8c3 281c 	str.w	r2, [r3, #2076]	@ 0x81c

  for (uint8_t n = 1; n < ep_count; n++) {
 8007d72:	2301      	movs	r3, #1
 8007d74:	75fb      	strb	r3, [r7, #23]
 8007d76:	e01e      	b.n	8007db6 <dcd_edpt_close_all+0x72>
    // disable OUT endpoint
    dwc2->epout[n].doepctl = 0;
 8007d78:	7dfb      	ldrb	r3, [r7, #23]
 8007d7a:	693a      	ldr	r2, [r7, #16]
 8007d7c:	3358      	adds	r3, #88	@ 0x58
 8007d7e:	015b      	lsls	r3, r3, #5
 8007d80:	4413      	add	r3, r2
 8007d82:	2200      	movs	r2, #0
 8007d84:	601a      	str	r2, [r3, #0]
    xfer_status[n][TUSB_DIR_OUT].max_size = 0;
 8007d86:	7dfb      	ldrb	r3, [r7, #23]
 8007d88:	4a12      	ldr	r2, [pc, #72]	@ (8007dd4 <dcd_edpt_close_all+0x90>)
 8007d8a:	015b      	lsls	r3, r3, #5
 8007d8c:	4413      	add	r3, r2
 8007d8e:	330a      	adds	r3, #10
 8007d90:	2200      	movs	r2, #0
 8007d92:	801a      	strh	r2, [r3, #0]

    // disable IN endpoint
    dwc2->epin[n].diepctl = 0;
 8007d94:	7dfb      	ldrb	r3, [r7, #23]
 8007d96:	693a      	ldr	r2, [r7, #16]
 8007d98:	3348      	adds	r3, #72	@ 0x48
 8007d9a:	015b      	lsls	r3, r3, #5
 8007d9c:	4413      	add	r3, r2
 8007d9e:	2200      	movs	r2, #0
 8007da0:	601a      	str	r2, [r3, #0]
    xfer_status[n][TUSB_DIR_IN].max_size = 0;
 8007da2:	7dfb      	ldrb	r3, [r7, #23]
 8007da4:	4a0b      	ldr	r2, [pc, #44]	@ (8007dd4 <dcd_edpt_close_all+0x90>)
 8007da6:	015b      	lsls	r3, r3, #5
 8007da8:	4413      	add	r3, r2
 8007daa:	331a      	adds	r3, #26
 8007dac:	2200      	movs	r2, #0
 8007dae:	801a      	strh	r2, [r3, #0]
  for (uint8_t n = 1; n < ep_count; n++) {
 8007db0:	7dfb      	ldrb	r3, [r7, #23]
 8007db2:	3301      	adds	r3, #1
 8007db4:	75fb      	strb	r3, [r7, #23]
 8007db6:	7dfa      	ldrb	r2, [r7, #23]
 8007db8:	7bfb      	ldrb	r3, [r7, #15]
 8007dba:	429a      	cmp	r2, r3
 8007dbc:	d3dc      	bcc.n	8007d78 <dcd_edpt_close_all+0x34>
  }

  // reset allocated fifo IN
  _allocated_fifo_words_tx = 16;
 8007dbe:	4b06      	ldr	r3, [pc, #24]	@ (8007dd8 <dcd_edpt_close_all+0x94>)
 8007dc0:	2210      	movs	r2, #16
 8007dc2:	801a      	strh	r2, [r3, #0]
}
 8007dc4:	bf00      	nop
 8007dc6:	371c      	adds	r7, #28
 8007dc8:	46bd      	mov	sp, r7
 8007dca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dce:	4770      	bx	lr
 8007dd0:	0801bfb8 	.word	0x0801bfb8
 8007dd4:	24001e8c 	.word	0x24001e8c
 8007dd8:	24001fb0 	.word	0x24001fb0

08007ddc <dcd_edpt_xfer>:

bool dcd_edpt_xfer(uint8_t rhport, uint8_t ep_addr, uint8_t* buffer, uint16_t total_bytes) {
 8007ddc:	b590      	push	{r4, r7, lr}
 8007dde:	b089      	sub	sp, #36	@ 0x24
 8007de0:	af02      	add	r7, sp, #8
 8007de2:	603a      	str	r2, [r7, #0]
 8007de4:	461a      	mov	r2, r3
 8007de6:	4603      	mov	r3, r0
 8007de8:	71fb      	strb	r3, [r7, #7]
 8007dea:	460b      	mov	r3, r1
 8007dec:	71bb      	strb	r3, [r7, #6]
 8007dee:	4613      	mov	r3, r2
 8007df0:	80bb      	strh	r3, [r7, #4]
 8007df2:	79bb      	ldrb	r3, [r7, #6]
 8007df4:	733b      	strb	r3, [r7, #12]
  return (uint8_t)(addr & (~TUSB_DIR_IN_MASK));
 8007df6:	7b3b      	ldrb	r3, [r7, #12]
 8007df8:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007dfc:	b2db      	uxtb	r3, r3
  uint8_t const epnum = tu_edpt_number(ep_addr);
 8007dfe:	757b      	strb	r3, [r7, #21]
 8007e00:	79bb      	ldrb	r3, [r7, #6]
 8007e02:	737b      	strb	r3, [r7, #13]
  return (addr & TUSB_DIR_IN_MASK) ? TUSB_DIR_IN : TUSB_DIR_OUT;
 8007e04:	7b7b      	ldrb	r3, [r7, #13]
 8007e06:	09db      	lsrs	r3, r3, #7
 8007e08:	b2db      	uxtb	r3, r3
  uint8_t const dir = tu_edpt_dir(ep_addr);
 8007e0a:	753b      	strb	r3, [r7, #20]

  xfer_ctl_t* xfer = XFER_CTL_BASE(epnum, dir);
 8007e0c:	7d7a      	ldrb	r2, [r7, #21]
 8007e0e:	7d3b      	ldrb	r3, [r7, #20]
 8007e10:	0052      	lsls	r2, r2, #1
 8007e12:	4413      	add	r3, r2
 8007e14:	011b      	lsls	r3, r3, #4
 8007e16:	4a23      	ldr	r2, [pc, #140]	@ (8007ea4 <dcd_edpt_xfer+0xc8>)
 8007e18:	4413      	add	r3, r2
 8007e1a:	613b      	str	r3, [r7, #16]
  xfer->buffer = buffer;
 8007e1c:	693b      	ldr	r3, [r7, #16]
 8007e1e:	683a      	ldr	r2, [r7, #0]
 8007e20:	601a      	str	r2, [r3, #0]
  xfer->ff = NULL;
 8007e22:	693b      	ldr	r3, [r7, #16]
 8007e24:	2200      	movs	r2, #0
 8007e26:	605a      	str	r2, [r3, #4]
  xfer->total_len = total_bytes;
 8007e28:	693b      	ldr	r3, [r7, #16]
 8007e2a:	88ba      	ldrh	r2, [r7, #4]
 8007e2c:	811a      	strh	r2, [r3, #8]

  // EP0 can only handle one packet
  if (epnum == 0) {
 8007e2e:	7d7b      	ldrb	r3, [r7, #21]
 8007e30:	2b00      	cmp	r3, #0
 8007e32:	d110      	bne.n	8007e56 <dcd_edpt_xfer+0x7a>
    ep0_pending[dir] = total_bytes;
 8007e34:	7d3b      	ldrb	r3, [r7, #20]
 8007e36:	491c      	ldr	r1, [pc, #112]	@ (8007ea8 <dcd_edpt_xfer+0xcc>)
 8007e38:	88ba      	ldrh	r2, [r7, #4]
 8007e3a:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]

    // Schedule the first transaction for EP0 transfer
    edpt_schedule_packets(rhport, epnum, dir, 1, ep0_pending[dir]);
 8007e3e:	7d3b      	ldrb	r3, [r7, #20]
 8007e40:	4a19      	ldr	r2, [pc, #100]	@ (8007ea8 <dcd_edpt_xfer+0xcc>)
 8007e42:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007e46:	7d3a      	ldrb	r2, [r7, #20]
 8007e48:	7d79      	ldrb	r1, [r7, #21]
 8007e4a:	79f8      	ldrb	r0, [r7, #7]
 8007e4c:	9300      	str	r3, [sp, #0]
 8007e4e:	2301      	movs	r3, #1
 8007e50:	f7ff fb12 	bl	8007478 <edpt_schedule_packets>
 8007e54:	e020      	b.n	8007e98 <dcd_edpt_xfer+0xbc>
  } else {
    uint16_t num_packets = (total_bytes / xfer->max_size);
 8007e56:	693b      	ldr	r3, [r7, #16]
 8007e58:	895b      	ldrh	r3, [r3, #10]
 8007e5a:	88ba      	ldrh	r2, [r7, #4]
 8007e5c:	fbb2 f3f3 	udiv	r3, r2, r3
 8007e60:	82fb      	strh	r3, [r7, #22]
    uint16_t const short_packet_size = total_bytes % xfer->max_size;
 8007e62:	693b      	ldr	r3, [r7, #16]
 8007e64:	895a      	ldrh	r2, [r3, #10]
 8007e66:	88bb      	ldrh	r3, [r7, #4]
 8007e68:	fbb3 f1f2 	udiv	r1, r3, r2
 8007e6c:	fb01 f202 	mul.w	r2, r1, r2
 8007e70:	1a9b      	subs	r3, r3, r2
 8007e72:	81fb      	strh	r3, [r7, #14]

    // Zero-size packet is special case.
    if ((short_packet_size > 0) || (total_bytes == 0)) num_packets++;
 8007e74:	89fb      	ldrh	r3, [r7, #14]
 8007e76:	2b00      	cmp	r3, #0
 8007e78:	d102      	bne.n	8007e80 <dcd_edpt_xfer+0xa4>
 8007e7a:	88bb      	ldrh	r3, [r7, #4]
 8007e7c:	2b00      	cmp	r3, #0
 8007e7e:	d102      	bne.n	8007e86 <dcd_edpt_xfer+0xaa>
 8007e80:	8afb      	ldrh	r3, [r7, #22]
 8007e82:	3301      	adds	r3, #1
 8007e84:	82fb      	strh	r3, [r7, #22]

    // Schedule packets to be sent within interrupt
    edpt_schedule_packets(rhport, epnum, dir, num_packets, total_bytes);
 8007e86:	8afc      	ldrh	r4, [r7, #22]
 8007e88:	7d3a      	ldrb	r2, [r7, #20]
 8007e8a:	7d79      	ldrb	r1, [r7, #21]
 8007e8c:	79f8      	ldrb	r0, [r7, #7]
 8007e8e:	88bb      	ldrh	r3, [r7, #4]
 8007e90:	9300      	str	r3, [sp, #0]
 8007e92:	4623      	mov	r3, r4
 8007e94:	f7ff faf0 	bl	8007478 <edpt_schedule_packets>
  }

  return true;
 8007e98:	2301      	movs	r3, #1
}
 8007e9a:	4618      	mov	r0, r3
 8007e9c:	371c      	adds	r7, #28
 8007e9e:	46bd      	mov	sp, r7
 8007ea0:	bd90      	pop	{r4, r7, pc}
 8007ea2:	bf00      	nop
 8007ea4:	24001e8c 	.word	0x24001e8c
 8007ea8:	24001fac 	.word	0x24001fac

08007eac <dcd_edpt_disable>:
  edpt_schedule_packets(rhport, epnum, dir, num_packets, total_bytes);

  return true;
}

static void dcd_edpt_disable(uint8_t rhport, uint8_t ep_addr, bool stall) {
 8007eac:	b480      	push	{r7}
 8007eae:	b089      	sub	sp, #36	@ 0x24
 8007eb0:	af00      	add	r7, sp, #0
 8007eb2:	4603      	mov	r3, r0
 8007eb4:	71fb      	strb	r3, [r7, #7]
 8007eb6:	460b      	mov	r3, r1
 8007eb8:	71bb      	strb	r3, [r7, #6]
 8007eba:	4613      	mov	r3, r2
 8007ebc:	717b      	strb	r3, [r7, #5]
  (void) rhport;

  dwc2_regs_t* dwc2 = DWC2_REG(rhport);
 8007ebe:	79fb      	ldrb	r3, [r7, #7]
 8007ec0:	4a6e      	ldr	r2, [pc, #440]	@ (800807c <dcd_edpt_disable+0x1d0>)
 8007ec2:	011b      	lsls	r3, r3, #4
 8007ec4:	4413      	add	r3, r2
 8007ec6:	681b      	ldr	r3, [r3, #0]
 8007ec8:	61fb      	str	r3, [r7, #28]
 8007eca:	79bb      	ldrb	r3, [r7, #6]
 8007ecc:	73bb      	strb	r3, [r7, #14]
  return (uint8_t)(addr & (~TUSB_DIR_IN_MASK));
 8007ece:	7bbb      	ldrb	r3, [r7, #14]
 8007ed0:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007ed4:	b2db      	uxtb	r3, r3

  uint8_t const epnum = tu_edpt_number(ep_addr);
 8007ed6:	76fb      	strb	r3, [r7, #27]
 8007ed8:	79bb      	ldrb	r3, [r7, #6]
 8007eda:	73fb      	strb	r3, [r7, #15]
  return (addr & TUSB_DIR_IN_MASK) ? TUSB_DIR_IN : TUSB_DIR_OUT;
 8007edc:	7bfb      	ldrb	r3, [r7, #15]
 8007ede:	09db      	lsrs	r3, r3, #7
 8007ee0:	b2db      	uxtb	r3, r3
  uint8_t const dir = tu_edpt_dir(ep_addr);
 8007ee2:	76bb      	strb	r3, [r7, #26]

  if (dir == TUSB_DIR_IN) {
 8007ee4:	7ebb      	ldrb	r3, [r7, #26]
 8007ee6:	2b01      	cmp	r3, #1
 8007ee8:	d167      	bne.n	8007fba <dcd_edpt_disable+0x10e>
    dwc2_epin_t* epin = dwc2->epin;
 8007eea:	69fb      	ldr	r3, [r7, #28]
 8007eec:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007ef0:	613b      	str	r3, [r7, #16]

    // Only disable currently enabled non-control endpoint
    if ((epnum == 0) || !(epin[epnum].diepctl & DIEPCTL_EPENA)) {
 8007ef2:	7efb      	ldrb	r3, [r7, #27]
 8007ef4:	2b00      	cmp	r3, #0
 8007ef6:	d006      	beq.n	8007f06 <dcd_edpt_disable+0x5a>
 8007ef8:	7efb      	ldrb	r3, [r7, #27]
 8007efa:	015b      	lsls	r3, r3, #5
 8007efc:	693a      	ldr	r2, [r7, #16]
 8007efe:	4413      	add	r3, r2
 8007f00:	681b      	ldr	r3, [r3, #0]
 8007f02:	2b00      	cmp	r3, #0
 8007f04:	db13      	blt.n	8007f2e <dcd_edpt_disable+0x82>
      epin[epnum].diepctl |= DIEPCTL_SNAK | (stall ? DIEPCTL_STALL : 0);
 8007f06:	7efb      	ldrb	r3, [r7, #27]
 8007f08:	015b      	lsls	r3, r3, #5
 8007f0a:	693a      	ldr	r2, [r7, #16]
 8007f0c:	4413      	add	r3, r2
 8007f0e:	681a      	ldr	r2, [r3, #0]
 8007f10:	797b      	ldrb	r3, [r7, #5]
 8007f12:	2b00      	cmp	r3, #0
 8007f14:	d002      	beq.n	8007f1c <dcd_edpt_disable+0x70>
 8007f16:	f04f 6102 	mov.w	r1, #136314880	@ 0x8200000
 8007f1a:	e001      	b.n	8007f20 <dcd_edpt_disable+0x74>
 8007f1c:	f04f 6100 	mov.w	r1, #134217728	@ 0x8000000
 8007f20:	7efb      	ldrb	r3, [r7, #27]
 8007f22:	015b      	lsls	r3, r3, #5
 8007f24:	6938      	ldr	r0, [r7, #16]
 8007f26:	4403      	add	r3, r0
 8007f28:	430a      	orrs	r2, r1
 8007f2a:	601a      	str	r2, [r3, #0]
 8007f2c:	e037      	b.n	8007f9e <dcd_edpt_disable+0xf2>
    } else {
      // Stop transmitting packets and NAK IN xfers.
      epin[epnum].diepctl |= DIEPCTL_SNAK;
 8007f2e:	7efb      	ldrb	r3, [r7, #27]
 8007f30:	015b      	lsls	r3, r3, #5
 8007f32:	693a      	ldr	r2, [r7, #16]
 8007f34:	4413      	add	r3, r2
 8007f36:	681a      	ldr	r2, [r3, #0]
 8007f38:	7efb      	ldrb	r3, [r7, #27]
 8007f3a:	015b      	lsls	r3, r3, #5
 8007f3c:	6939      	ldr	r1, [r7, #16]
 8007f3e:	440b      	add	r3, r1
 8007f40:	f042 6200 	orr.w	r2, r2, #134217728	@ 0x8000000
 8007f44:	601a      	str	r2, [r3, #0]
      while ((epin[epnum].diepint & DIEPINT_INEPNE) == 0) {}
 8007f46:	bf00      	nop
 8007f48:	7efb      	ldrb	r3, [r7, #27]
 8007f4a:	015b      	lsls	r3, r3, #5
 8007f4c:	693a      	ldr	r2, [r7, #16]
 8007f4e:	4413      	add	r3, r2
 8007f50:	689b      	ldr	r3, [r3, #8]
 8007f52:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007f56:	2b00      	cmp	r3, #0
 8007f58:	d0f6      	beq.n	8007f48 <dcd_edpt_disable+0x9c>

      // Disable the endpoint.
      epin[epnum].diepctl |= DIEPCTL_EPDIS | (stall ? DIEPCTL_STALL : 0);
 8007f5a:	7efb      	ldrb	r3, [r7, #27]
 8007f5c:	015b      	lsls	r3, r3, #5
 8007f5e:	693a      	ldr	r2, [r7, #16]
 8007f60:	4413      	add	r3, r2
 8007f62:	681a      	ldr	r2, [r3, #0]
 8007f64:	797b      	ldrb	r3, [r7, #5]
 8007f66:	2b00      	cmp	r3, #0
 8007f68:	d001      	beq.n	8007f6e <dcd_edpt_disable+0xc2>
 8007f6a:	4945      	ldr	r1, [pc, #276]	@ (8008080 <dcd_edpt_disable+0x1d4>)
 8007f6c:	e001      	b.n	8007f72 <dcd_edpt_disable+0xc6>
 8007f6e:	f04f 4180 	mov.w	r1, #1073741824	@ 0x40000000
 8007f72:	7efb      	ldrb	r3, [r7, #27]
 8007f74:	015b      	lsls	r3, r3, #5
 8007f76:	6938      	ldr	r0, [r7, #16]
 8007f78:	4403      	add	r3, r0
 8007f7a:	430a      	orrs	r2, r1
 8007f7c:	601a      	str	r2, [r3, #0]
      while ((epin[epnum].diepint & DIEPINT_EPDISD_Msk) == 0) {}
 8007f7e:	bf00      	nop
 8007f80:	7efb      	ldrb	r3, [r7, #27]
 8007f82:	015b      	lsls	r3, r3, #5
 8007f84:	693a      	ldr	r2, [r7, #16]
 8007f86:	4413      	add	r3, r2
 8007f88:	689b      	ldr	r3, [r3, #8]
 8007f8a:	f003 0302 	and.w	r3, r3, #2
 8007f8e:	2b00      	cmp	r3, #0
 8007f90:	d0f6      	beq.n	8007f80 <dcd_edpt_disable+0xd4>

      epin[epnum].diepint = DIEPINT_EPDISD;
 8007f92:	7efb      	ldrb	r3, [r7, #27]
 8007f94:	015b      	lsls	r3, r3, #5
 8007f96:	693a      	ldr	r2, [r7, #16]
 8007f98:	4413      	add	r3, r2
 8007f9a:	2202      	movs	r2, #2
 8007f9c:	609a      	str	r2, [r3, #8]
    }

    // Flush the FIFO, and wait until we have confirmed it cleared.
    dwc2->grstctl = ((epnum << GRSTCTL_TXFNUM_Pos) | GRSTCTL_TXFFLSH);
 8007f9e:	7efb      	ldrb	r3, [r7, #27]
 8007fa0:	019b      	lsls	r3, r3, #6
 8007fa2:	f043 0220 	orr.w	r2, r3, #32
 8007fa6:	69fb      	ldr	r3, [r7, #28]
 8007fa8:	611a      	str	r2, [r3, #16]
    while ((dwc2->grstctl & GRSTCTL_TXFFLSH_Msk) != 0) {}
 8007faa:	bf00      	nop
 8007fac:	69fb      	ldr	r3, [r7, #28]
 8007fae:	691b      	ldr	r3, [r3, #16]
 8007fb0:	f003 0320 	and.w	r3, r3, #32
 8007fb4:	2b00      	cmp	r3, #0
 8007fb6:	d1f9      	bne.n	8007fac <dcd_edpt_disable+0x100>

      // Allow other OUT endpoints to keep receiving.
      dwc2->dctl |= DCTL_CGONAK;
    }
  }
}
 8007fb8:	e059      	b.n	800806e <dcd_edpt_disable+0x1c2>
    dwc2_epout_t* epout = dwc2->epout;
 8007fba:	69fb      	ldr	r3, [r7, #28]
 8007fbc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007fc0:	617b      	str	r3, [r7, #20]
    if ((epnum == 0) || !(epout[epnum].doepctl & DOEPCTL_EPENA)) {
 8007fc2:	7efb      	ldrb	r3, [r7, #27]
 8007fc4:	2b00      	cmp	r3, #0
 8007fc6:	d006      	beq.n	8007fd6 <dcd_edpt_disable+0x12a>
 8007fc8:	7efb      	ldrb	r3, [r7, #27]
 8007fca:	015b      	lsls	r3, r3, #5
 8007fcc:	697a      	ldr	r2, [r7, #20]
 8007fce:	4413      	add	r3, r2
 8007fd0:	681b      	ldr	r3, [r3, #0]
 8007fd2:	2b00      	cmp	r3, #0
 8007fd4:	db12      	blt.n	8007ffc <dcd_edpt_disable+0x150>
      epout[epnum].doepctl |= stall ? DOEPCTL_STALL : 0;
 8007fd6:	7efb      	ldrb	r3, [r7, #27]
 8007fd8:	015b      	lsls	r3, r3, #5
 8007fda:	697a      	ldr	r2, [r7, #20]
 8007fdc:	4413      	add	r3, r2
 8007fde:	681a      	ldr	r2, [r3, #0]
 8007fe0:	797b      	ldrb	r3, [r7, #5]
 8007fe2:	2b00      	cmp	r3, #0
 8007fe4:	d002      	beq.n	8007fec <dcd_edpt_disable+0x140>
 8007fe6:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8007fea:	e000      	b.n	8007fee <dcd_edpt_disable+0x142>
 8007fec:	2100      	movs	r1, #0
 8007fee:	7efb      	ldrb	r3, [r7, #27]
 8007ff0:	015b      	lsls	r3, r3, #5
 8007ff2:	6978      	ldr	r0, [r7, #20]
 8007ff4:	4403      	add	r3, r0
 8007ff6:	430a      	orrs	r2, r1
 8007ff8:	601a      	str	r2, [r3, #0]
}
 8007ffa:	e038      	b.n	800806e <dcd_edpt_disable+0x1c2>
      dwc2->dctl |= DCTL_SGONAK;
 8007ffc:	69fb      	ldr	r3, [r7, #28]
 8007ffe:	f8d3 3804 	ldr.w	r3, [r3, #2052]	@ 0x804
 8008002:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8008006:	69fb      	ldr	r3, [r7, #28]
 8008008:	f8c3 2804 	str.w	r2, [r3, #2052]	@ 0x804
      while ((dwc2->gintsts & GINTSTS_BOUTNAKEFF_Msk) == 0) {}
 800800c:	bf00      	nop
 800800e:	69fb      	ldr	r3, [r7, #28]
 8008010:	695b      	ldr	r3, [r3, #20]
 8008012:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008016:	2b00      	cmp	r3, #0
 8008018:	d0f9      	beq.n	800800e <dcd_edpt_disable+0x162>
      epout[epnum].doepctl |= DOEPCTL_EPDIS | (stall ? DOEPCTL_STALL : 0);
 800801a:	7efb      	ldrb	r3, [r7, #27]
 800801c:	015b      	lsls	r3, r3, #5
 800801e:	697a      	ldr	r2, [r7, #20]
 8008020:	4413      	add	r3, r2
 8008022:	681a      	ldr	r2, [r3, #0]
 8008024:	797b      	ldrb	r3, [r7, #5]
 8008026:	2b00      	cmp	r3, #0
 8008028:	d001      	beq.n	800802e <dcd_edpt_disable+0x182>
 800802a:	4915      	ldr	r1, [pc, #84]	@ (8008080 <dcd_edpt_disable+0x1d4>)
 800802c:	e001      	b.n	8008032 <dcd_edpt_disable+0x186>
 800802e:	f04f 4180 	mov.w	r1, #1073741824	@ 0x40000000
 8008032:	7efb      	ldrb	r3, [r7, #27]
 8008034:	015b      	lsls	r3, r3, #5
 8008036:	6978      	ldr	r0, [r7, #20]
 8008038:	4403      	add	r3, r0
 800803a:	430a      	orrs	r2, r1
 800803c:	601a      	str	r2, [r3, #0]
      while ((epout[epnum].doepint & DOEPINT_EPDISD_Msk) == 0) {}
 800803e:	bf00      	nop
 8008040:	7efb      	ldrb	r3, [r7, #27]
 8008042:	015b      	lsls	r3, r3, #5
 8008044:	697a      	ldr	r2, [r7, #20]
 8008046:	4413      	add	r3, r2
 8008048:	689b      	ldr	r3, [r3, #8]
 800804a:	f003 0302 	and.w	r3, r3, #2
 800804e:	2b00      	cmp	r3, #0
 8008050:	d0f6      	beq.n	8008040 <dcd_edpt_disable+0x194>
      epout[epnum].doepint = DOEPINT_EPDISD;
 8008052:	7efb      	ldrb	r3, [r7, #27]
 8008054:	015b      	lsls	r3, r3, #5
 8008056:	697a      	ldr	r2, [r7, #20]
 8008058:	4413      	add	r3, r2
 800805a:	2202      	movs	r2, #2
 800805c:	609a      	str	r2, [r3, #8]
      dwc2->dctl |= DCTL_CGONAK;
 800805e:	69fb      	ldr	r3, [r7, #28]
 8008060:	f8d3 3804 	ldr.w	r3, [r3, #2052]	@ 0x804
 8008064:	f443 6280 	orr.w	r2, r3, #1024	@ 0x400
 8008068:	69fb      	ldr	r3, [r7, #28]
 800806a:	f8c3 2804 	str.w	r2, [r3, #2052]	@ 0x804
}
 800806e:	bf00      	nop
 8008070:	3724      	adds	r7, #36	@ 0x24
 8008072:	46bd      	mov	sp, r7
 8008074:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008078:	4770      	bx	lr
 800807a:	bf00      	nop
 800807c:	0801bfb8 	.word	0x0801bfb8
 8008080:	40200000 	.word	0x40200000

08008084 <dcd_edpt_stall>:
  } else {
    _out_ep_closed = true;     // Set flag such that RX FIFO gets reduced in size once RX FIFO is empty
  }
}

void dcd_edpt_stall(uint8_t rhport, uint8_t ep_addr) {
 8008084:	b580      	push	{r7, lr}
 8008086:	b082      	sub	sp, #8
 8008088:	af00      	add	r7, sp, #0
 800808a:	4603      	mov	r3, r0
 800808c:	460a      	mov	r2, r1
 800808e:	71fb      	strb	r3, [r7, #7]
 8008090:	4613      	mov	r3, r2
 8008092:	71bb      	strb	r3, [r7, #6]
  dcd_edpt_disable(rhport, ep_addr, true);
 8008094:	79b9      	ldrb	r1, [r7, #6]
 8008096:	79fb      	ldrb	r3, [r7, #7]
 8008098:	2201      	movs	r2, #1
 800809a:	4618      	mov	r0, r3
 800809c:	f7ff ff06 	bl	8007eac <dcd_edpt_disable>
}
 80080a0:	bf00      	nop
 80080a2:	3708      	adds	r7, #8
 80080a4:	46bd      	mov	sp, r7
 80080a6:	bd80      	pop	{r7, pc}

080080a8 <dcd_edpt_clear_stall>:

void dcd_edpt_clear_stall(uint8_t rhport, uint8_t ep_addr) {
 80080a8:	b480      	push	{r7}
 80080aa:	b085      	sub	sp, #20
 80080ac:	af00      	add	r7, sp, #0
 80080ae:	4603      	mov	r3, r0
 80080b0:	460a      	mov	r2, r1
 80080b2:	71fb      	strb	r3, [r7, #7]
 80080b4:	4613      	mov	r3, r2
 80080b6:	71bb      	strb	r3, [r7, #6]
  (void) rhport;

  dwc2_regs_t* dwc2 = DWC2_REG(rhport);
 80080b8:	79fb      	ldrb	r3, [r7, #7]
 80080ba:	4a2a      	ldr	r2, [pc, #168]	@ (8008164 <dcd_edpt_clear_stall+0xbc>)
 80080bc:	011b      	lsls	r3, r3, #4
 80080be:	4413      	add	r3, r2
 80080c0:	681b      	ldr	r3, [r3, #0]
 80080c2:	60fb      	str	r3, [r7, #12]
 80080c4:	79bb      	ldrb	r3, [r7, #6]
 80080c6:	723b      	strb	r3, [r7, #8]
  return (uint8_t)(addr & (~TUSB_DIR_IN_MASK));
 80080c8:	7a3b      	ldrb	r3, [r7, #8]
 80080ca:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80080ce:	b2db      	uxtb	r3, r3

  uint8_t const epnum = tu_edpt_number(ep_addr);
 80080d0:	72fb      	strb	r3, [r7, #11]
 80080d2:	79bb      	ldrb	r3, [r7, #6]
 80080d4:	727b      	strb	r3, [r7, #9]
  return (addr & TUSB_DIR_IN_MASK) ? TUSB_DIR_IN : TUSB_DIR_OUT;
 80080d6:	7a7b      	ldrb	r3, [r7, #9]
 80080d8:	09db      	lsrs	r3, r3, #7
 80080da:	b2db      	uxtb	r3, r3
  uint8_t const dir = tu_edpt_dir(ep_addr);
 80080dc:	72bb      	strb	r3, [r7, #10]

  // Clear stall and reset data toggle
  if (dir == TUSB_DIR_IN) {
 80080de:	7abb      	ldrb	r3, [r7, #10]
 80080e0:	2b01      	cmp	r3, #1
 80080e2:	d11c      	bne.n	800811e <dcd_edpt_clear_stall+0x76>
    dwc2->epin[epnum].diepctl &= ~DIEPCTL_STALL;
 80080e4:	7afb      	ldrb	r3, [r7, #11]
 80080e6:	68fa      	ldr	r2, [r7, #12]
 80080e8:	3348      	adds	r3, #72	@ 0x48
 80080ea:	015b      	lsls	r3, r3, #5
 80080ec:	4413      	add	r3, r2
 80080ee:	681a      	ldr	r2, [r3, #0]
 80080f0:	7afb      	ldrb	r3, [r7, #11]
 80080f2:	f422 1200 	bic.w	r2, r2, #2097152	@ 0x200000
 80080f6:	68f9      	ldr	r1, [r7, #12]
 80080f8:	3348      	adds	r3, #72	@ 0x48
 80080fa:	015b      	lsls	r3, r3, #5
 80080fc:	440b      	add	r3, r1
 80080fe:	601a      	str	r2, [r3, #0]
    dwc2->epin[epnum].diepctl |= DIEPCTL_SD0PID_SEVNFRM;
 8008100:	7afb      	ldrb	r3, [r7, #11]
 8008102:	68fa      	ldr	r2, [r7, #12]
 8008104:	3348      	adds	r3, #72	@ 0x48
 8008106:	015b      	lsls	r3, r3, #5
 8008108:	4413      	add	r3, r2
 800810a:	681a      	ldr	r2, [r3, #0]
 800810c:	7afb      	ldrb	r3, [r7, #11]
 800810e:	f042 5280 	orr.w	r2, r2, #268435456	@ 0x10000000
 8008112:	68f9      	ldr	r1, [r7, #12]
 8008114:	3348      	adds	r3, #72	@ 0x48
 8008116:	015b      	lsls	r3, r3, #5
 8008118:	440b      	add	r3, r1
 800811a:	601a      	str	r2, [r3, #0]
  } else {
    dwc2->epout[epnum].doepctl &= ~DOEPCTL_STALL;
    dwc2->epout[epnum].doepctl |= DOEPCTL_SD0PID_SEVNFRM;
  }
}
 800811c:	e01b      	b.n	8008156 <dcd_edpt_clear_stall+0xae>
    dwc2->epout[epnum].doepctl &= ~DOEPCTL_STALL;
 800811e:	7afb      	ldrb	r3, [r7, #11]
 8008120:	68fa      	ldr	r2, [r7, #12]
 8008122:	3358      	adds	r3, #88	@ 0x58
 8008124:	015b      	lsls	r3, r3, #5
 8008126:	4413      	add	r3, r2
 8008128:	681a      	ldr	r2, [r3, #0]
 800812a:	7afb      	ldrb	r3, [r7, #11]
 800812c:	f422 1200 	bic.w	r2, r2, #2097152	@ 0x200000
 8008130:	68f9      	ldr	r1, [r7, #12]
 8008132:	3358      	adds	r3, #88	@ 0x58
 8008134:	015b      	lsls	r3, r3, #5
 8008136:	440b      	add	r3, r1
 8008138:	601a      	str	r2, [r3, #0]
    dwc2->epout[epnum].doepctl |= DOEPCTL_SD0PID_SEVNFRM;
 800813a:	7afb      	ldrb	r3, [r7, #11]
 800813c:	68fa      	ldr	r2, [r7, #12]
 800813e:	3358      	adds	r3, #88	@ 0x58
 8008140:	015b      	lsls	r3, r3, #5
 8008142:	4413      	add	r3, r2
 8008144:	681a      	ldr	r2, [r3, #0]
 8008146:	7afb      	ldrb	r3, [r7, #11]
 8008148:	f042 5280 	orr.w	r2, r2, #268435456	@ 0x10000000
 800814c:	68f9      	ldr	r1, [r7, #12]
 800814e:	3358      	adds	r3, #88	@ 0x58
 8008150:	015b      	lsls	r3, r3, #5
 8008152:	440b      	add	r3, r1
 8008154:	601a      	str	r2, [r3, #0]
}
 8008156:	bf00      	nop
 8008158:	3714      	adds	r7, #20
 800815a:	46bd      	mov	sp, r7
 800815c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008160:	4770      	bx	lr
 8008162:	bf00      	nop
 8008164:	0801bfb8 	.word	0x0801bfb8

08008168 <read_fifo_packet>:

/*------------------------------------------------------------------*/

// Read a single data packet from receive FIFO
static void read_fifo_packet(uint8_t rhport, uint8_t* dst, uint16_t len) {
 8008168:	b480      	push	{r7}
 800816a:	b08d      	sub	sp, #52	@ 0x34
 800816c:	af00      	add	r7, sp, #0
 800816e:	4603      	mov	r3, r0
 8008170:	6039      	str	r1, [r7, #0]
 8008172:	71fb      	strb	r3, [r7, #7]
 8008174:	4613      	mov	r3, r2
 8008176:	80bb      	strh	r3, [r7, #4]
  (void) rhport;

  dwc2_regs_t* dwc2 = DWC2_REG(rhport);
 8008178:	79fb      	ldrb	r3, [r7, #7]
 800817a:	4a27      	ldr	r2, [pc, #156]	@ (8008218 <read_fifo_packet+0xb0>)
 800817c:	011b      	lsls	r3, r3, #4
 800817e:	4413      	add	r3, r2
 8008180:	681b      	ldr	r3, [r3, #0]
 8008182:	62bb      	str	r3, [r7, #40]	@ 0x28
  volatile const uint32_t* rx_fifo = dwc2->fifo[0];
 8008184:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008186:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800818a:	627b      	str	r3, [r7, #36]	@ 0x24

  // Reading full available 32 bit words from fifo
  uint16_t full_words = len >> 2;
 800818c:	88bb      	ldrh	r3, [r7, #4]
 800818e:	089b      	lsrs	r3, r3, #2
 8008190:	85fb      	strh	r3, [r7, #46]	@ 0x2e
  while (full_words--) {
 8008192:	e00b      	b.n	80081ac <read_fifo_packet+0x44>
    tu_unaligned_write32(dst, *rx_fifo);
 8008194:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008196:	681b      	ldr	r3, [r3, #0]
 8008198:	683a      	ldr	r2, [r7, #0]
 800819a:	61ba      	str	r2, [r7, #24]
 800819c:	617b      	str	r3, [r7, #20]
  *((uint32_t *) mem) = value;
 800819e:	69bb      	ldr	r3, [r7, #24]
 80081a0:	697a      	ldr	r2, [r7, #20]
 80081a2:	601a      	str	r2, [r3, #0]
}
 80081a4:	bf00      	nop
    dst += 4;
 80081a6:	683b      	ldr	r3, [r7, #0]
 80081a8:	3304      	adds	r3, #4
 80081aa:	603b      	str	r3, [r7, #0]
  while (full_words--) {
 80081ac:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 80081ae:	1e5a      	subs	r2, r3, #1
 80081b0:	85fa      	strh	r2, [r7, #46]	@ 0x2e
 80081b2:	2b00      	cmp	r3, #0
 80081b4:	d1ee      	bne.n	8008194 <read_fifo_packet+0x2c>
  }

  // Read the remaining 1-3 bytes from fifo
  uint8_t const bytes_rem = len & 0x03;
 80081b6:	88bb      	ldrh	r3, [r7, #4]
 80081b8:	b2db      	uxtb	r3, r3
 80081ba:	f003 0303 	and.w	r3, r3, #3
 80081be:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
  if (bytes_rem != 0) {
 80081c2:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80081c6:	2b00      	cmp	r3, #0
 80081c8:	d020      	beq.n	800820c <read_fifo_packet+0xa4>
    uint32_t const tmp = *rx_fifo;
 80081ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80081cc:	681b      	ldr	r3, [r3, #0]
 80081ce:	61fb      	str	r3, [r7, #28]
 80081d0:	69fb      	ldr	r3, [r7, #28]
 80081d2:	613b      	str	r3, [r7, #16]
TU_ATTR_ALWAYS_INLINE static inline uint8_t tu_u32_byte0(uint32_t ui32) { return TU_U32_BYTE0(ui32); }
 80081d4:	693b      	ldr	r3, [r7, #16]
 80081d6:	b2da      	uxtb	r2, r3
    dst[0] = tu_u32_byte0(tmp);
 80081d8:	683b      	ldr	r3, [r7, #0]
 80081da:	701a      	strb	r2, [r3, #0]
    if (bytes_rem > 1) dst[1] = tu_u32_byte1(tmp);
 80081dc:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80081e0:	2b01      	cmp	r3, #1
 80081e2:	d907      	bls.n	80081f4 <read_fifo_packet+0x8c>
 80081e4:	683b      	ldr	r3, [r7, #0]
 80081e6:	3301      	adds	r3, #1
 80081e8:	69fa      	ldr	r2, [r7, #28]
 80081ea:	60fa      	str	r2, [r7, #12]
TU_ATTR_ALWAYS_INLINE static inline uint8_t tu_u32_byte1(uint32_t ui32) { return TU_U32_BYTE1(ui32); }
 80081ec:	68fa      	ldr	r2, [r7, #12]
 80081ee:	0a12      	lsrs	r2, r2, #8
 80081f0:	b2d2      	uxtb	r2, r2
 80081f2:	701a      	strb	r2, [r3, #0]
    if (bytes_rem > 2) dst[2] = tu_u32_byte2(tmp);
 80081f4:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80081f8:	2b02      	cmp	r3, #2
 80081fa:	d907      	bls.n	800820c <read_fifo_packet+0xa4>
 80081fc:	683b      	ldr	r3, [r7, #0]
 80081fe:	3302      	adds	r3, #2
 8008200:	69fa      	ldr	r2, [r7, #28]
 8008202:	60ba      	str	r2, [r7, #8]
TU_ATTR_ALWAYS_INLINE static inline uint8_t tu_u32_byte2(uint32_t ui32) { return TU_U32_BYTE2(ui32); }
 8008204:	68ba      	ldr	r2, [r7, #8]
 8008206:	0c12      	lsrs	r2, r2, #16
 8008208:	b2d2      	uxtb	r2, r2
 800820a:	701a      	strb	r2, [r3, #0]
  }
}
 800820c:	bf00      	nop
 800820e:	3734      	adds	r7, #52	@ 0x34
 8008210:	46bd      	mov	sp, r7
 8008212:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008216:	4770      	bx	lr
 8008218:	0801bfb8 	.word	0x0801bfb8

0800821c <write_fifo_packet>:

// Write a single data packet to EPIN FIFO
static void write_fifo_packet(uint8_t rhport, uint8_t fifo_num, uint8_t const* src, uint16_t len) {
 800821c:	b480      	push	{r7}
 800821e:	b089      	sub	sp, #36	@ 0x24
 8008220:	af00      	add	r7, sp, #0
 8008222:	603a      	str	r2, [r7, #0]
 8008224:	461a      	mov	r2, r3
 8008226:	4603      	mov	r3, r0
 8008228:	71fb      	strb	r3, [r7, #7]
 800822a:	460b      	mov	r3, r1
 800822c:	71bb      	strb	r3, [r7, #6]
 800822e:	4613      	mov	r3, r2
 8008230:	80bb      	strh	r3, [r7, #4]
  (void) rhport;

  dwc2_regs_t* dwc2 = DWC2_REG(rhport);
 8008232:	79fb      	ldrb	r3, [r7, #7]
 8008234:	4a22      	ldr	r2, [pc, #136]	@ (80082c0 <write_fifo_packet+0xa4>)
 8008236:	011b      	lsls	r3, r3, #4
 8008238:	4413      	add	r3, r2
 800823a:	681b      	ldr	r3, [r3, #0]
 800823c:	617b      	str	r3, [r7, #20]
  volatile uint32_t* tx_fifo = dwc2->fifo[fifo_num];
 800823e:	79bb      	ldrb	r3, [r7, #6]
 8008240:	3301      	adds	r3, #1
 8008242:	031b      	lsls	r3, r3, #12
 8008244:	697a      	ldr	r2, [r7, #20]
 8008246:	4413      	add	r3, r2
 8008248:	613b      	str	r3, [r7, #16]

  // Pushing full available 32 bit words to fifo
  uint16_t full_words = len >> 2;
 800824a:	88bb      	ldrh	r3, [r7, #4]
 800824c:	089b      	lsrs	r3, r3, #2
 800824e:	83fb      	strh	r3, [r7, #30]
  while (full_words--) {
 8008250:	e008      	b.n	8008264 <write_fifo_packet+0x48>
 8008252:	683b      	ldr	r3, [r7, #0]
 8008254:	60bb      	str	r3, [r7, #8]
  return *((uint32_t const *) mem);
 8008256:	68bb      	ldr	r3, [r7, #8]
 8008258:	681a      	ldr	r2, [r3, #0]
    *tx_fifo = tu_unaligned_read32(src);
 800825a:	693b      	ldr	r3, [r7, #16]
 800825c:	601a      	str	r2, [r3, #0]
    src += 4;
 800825e:	683b      	ldr	r3, [r7, #0]
 8008260:	3304      	adds	r3, #4
 8008262:	603b      	str	r3, [r7, #0]
  while (full_words--) {
 8008264:	8bfb      	ldrh	r3, [r7, #30]
 8008266:	1e5a      	subs	r2, r3, #1
 8008268:	83fa      	strh	r2, [r7, #30]
 800826a:	2b00      	cmp	r3, #0
 800826c:	d1f1      	bne.n	8008252 <write_fifo_packet+0x36>
  }

  // Write the remaining 1-3 bytes into fifo
  uint8_t const bytes_rem = len & 0x03;
 800826e:	88bb      	ldrh	r3, [r7, #4]
 8008270:	b2db      	uxtb	r3, r3
 8008272:	f003 0303 	and.w	r3, r3, #3
 8008276:	73fb      	strb	r3, [r7, #15]
  if (bytes_rem) {
 8008278:	7bfb      	ldrb	r3, [r7, #15]
 800827a:	2b00      	cmp	r3, #0
 800827c:	d019      	beq.n	80082b2 <write_fifo_packet+0x96>
    uint32_t tmp_word = src[0];
 800827e:	683b      	ldr	r3, [r7, #0]
 8008280:	781b      	ldrb	r3, [r3, #0]
 8008282:	61bb      	str	r3, [r7, #24]
    if (bytes_rem > 1) tmp_word |= (src[1] << 8);
 8008284:	7bfb      	ldrb	r3, [r7, #15]
 8008286:	2b01      	cmp	r3, #1
 8008288:	d906      	bls.n	8008298 <write_fifo_packet+0x7c>
 800828a:	683b      	ldr	r3, [r7, #0]
 800828c:	3301      	adds	r3, #1
 800828e:	781b      	ldrb	r3, [r3, #0]
 8008290:	021b      	lsls	r3, r3, #8
 8008292:	69ba      	ldr	r2, [r7, #24]
 8008294:	4313      	orrs	r3, r2
 8008296:	61bb      	str	r3, [r7, #24]
    if (bytes_rem > 2) tmp_word |= (src[2] << 16);
 8008298:	7bfb      	ldrb	r3, [r7, #15]
 800829a:	2b02      	cmp	r3, #2
 800829c:	d906      	bls.n	80082ac <write_fifo_packet+0x90>
 800829e:	683b      	ldr	r3, [r7, #0]
 80082a0:	3302      	adds	r3, #2
 80082a2:	781b      	ldrb	r3, [r3, #0]
 80082a4:	041b      	lsls	r3, r3, #16
 80082a6:	69ba      	ldr	r2, [r7, #24]
 80082a8:	4313      	orrs	r3, r2
 80082aa:	61bb      	str	r3, [r7, #24]

    *tx_fifo = tmp_word;
 80082ac:	693b      	ldr	r3, [r7, #16]
 80082ae:	69ba      	ldr	r2, [r7, #24]
 80082b0:	601a      	str	r2, [r3, #0]
  }
}
 80082b2:	bf00      	nop
 80082b4:	3724      	adds	r7, #36	@ 0x24
 80082b6:	46bd      	mov	sp, r7
 80082b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082bc:	4770      	bx	lr
 80082be:	bf00      	nop
 80082c0:	0801bfb8 	.word	0x0801bfb8

080082c4 <handle_rxflvl_irq>:

static void handle_rxflvl_irq(uint8_t rhport) {
 80082c4:	b580      	push	{r7, lr}
 80082c6:	b08c      	sub	sp, #48	@ 0x30
 80082c8:	af00      	add	r7, sp, #0
 80082ca:	4603      	mov	r3, r0
 80082cc:	71fb      	strb	r3, [r7, #7]
  dwc2_regs_t* dwc2 = DWC2_REG(rhport);
 80082ce:	79fb      	ldrb	r3, [r7, #7]
 80082d0:	4a5d      	ldr	r2, [pc, #372]	@ (8008448 <handle_rxflvl_irq+0x184>)
 80082d2:	011b      	lsls	r3, r3, #4
 80082d4:	4413      	add	r3, r2
 80082d6:	681b      	ldr	r3, [r3, #0]
 80082d8:	62bb      	str	r3, [r7, #40]	@ 0x28
  volatile uint32_t const* rx_fifo = dwc2->fifo[0];
 80082da:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80082dc:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80082e0:	627b      	str	r3, [r7, #36]	@ 0x24

  // Pop control word off FIFO
  uint32_t const ctl_word = dwc2->grxstsp;
 80082e2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80082e4:	6a1b      	ldr	r3, [r3, #32]
 80082e6:	623b      	str	r3, [r7, #32]
  uint8_t const pktsts = (ctl_word & GRXSTSP_PKTSTS_Msk) >> GRXSTSP_PKTSTS_Pos;
 80082e8:	6a3b      	ldr	r3, [r7, #32]
 80082ea:	0c5b      	lsrs	r3, r3, #17
 80082ec:	b2db      	uxtb	r3, r3
 80082ee:	f003 030f 	and.w	r3, r3, #15
 80082f2:	77fb      	strb	r3, [r7, #31]
  uint8_t const epnum = (ctl_word & GRXSTSP_EPNUM_Msk) >> GRXSTSP_EPNUM_Pos;
 80082f4:	6a3b      	ldr	r3, [r7, #32]
 80082f6:	b2db      	uxtb	r3, r3
 80082f8:	f003 030f 	and.w	r3, r3, #15
 80082fc:	77bb      	strb	r3, [r7, #30]
  uint16_t const bcnt = (ctl_word & GRXSTSP_BCNT_Msk) >> GRXSTSP_BCNT_Pos;
 80082fe:	6a3b      	ldr	r3, [r7, #32]
 8008300:	091b      	lsrs	r3, r3, #4
 8008302:	b29b      	uxth	r3, r3
 8008304:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8008308:	83bb      	strh	r3, [r7, #28]

  dwc2_epout_t* epout = &dwc2->epout[epnum];
 800830a:	7fbb      	ldrb	r3, [r7, #30]
 800830c:	3358      	adds	r3, #88	@ 0x58
 800830e:	015b      	lsls	r3, r3, #5
 8008310:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8008312:	4413      	add	r3, r2
 8008314:	61bb      	str	r3, [r7, #24]
//  TU_LOG_LOCATION();
//  TU_LOG(DWC2_DEBUG, "  EP %02X, Byte Count %u, %s\r\n", epnum, bcnt, pktsts_str[pktsts]);
//  TU_LOG(DWC2_DEBUG, "  daint = %08lX, doepint = %04X\r\n", (unsigned long) dwc2->daint, (unsigned int) epout->doepint);
//#endif

  switch (pktsts) {
 8008316:	7ffb      	ldrb	r3, [r7, #31]
 8008318:	3b01      	subs	r3, #1
 800831a:	2b05      	cmp	r3, #5
 800831c:	d87e      	bhi.n	800841c <handle_rxflvl_irq+0x158>
 800831e:	a201      	add	r2, pc, #4	@ (adr r2, 8008324 <handle_rxflvl_irq+0x60>)
 8008320:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008324:	08008431 	.word	0x08008431
 8008328:	0800835d 	.word	0x0800835d
 800832c:	080083d7 	.word	0x080083d7
 8008330:	0800834f 	.word	0x0800834f
 8008334:	0800841d 	.word	0x0800841d
 8008338:	0800833d 	.word	0x0800833d
    case GRXSTS_PKTSTS_SETUPRX:
      // Setup packet received

      // We can receive up to three setup packets in succession, but
      // only the last one is valid.
      _setup_packet[0] = (*rx_fifo);
 800833c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800833e:	681b      	ldr	r3, [r3, #0]
 8008340:	4a42      	ldr	r2, [pc, #264]	@ (800844c <handle_rxflvl_irq+0x188>)
 8008342:	6013      	str	r3, [r2, #0]
      _setup_packet[1] = (*rx_fifo);
 8008344:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008346:	681b      	ldr	r3, [r3, #0]
 8008348:	4a40      	ldr	r2, [pc, #256]	@ (800844c <handle_rxflvl_irq+0x188>)
 800834a:	6053      	str	r3, [r2, #4]
      break;
 800834c:	e077      	b.n	800843e <handle_rxflvl_irq+0x17a>

    case GRXSTS_PKTSTS_SETUPDONE:
      // Setup packet done (Interrupt)
      epout->doeptsiz |= (3 << DOEPTSIZ_STUPCNT_Pos);
 800834e:	69bb      	ldr	r3, [r7, #24]
 8008350:	691b      	ldr	r3, [r3, #16]
 8008352:	f043 42c0 	orr.w	r2, r3, #1610612736	@ 0x60000000
 8008356:	69bb      	ldr	r3, [r7, #24]
 8008358:	611a      	str	r2, [r3, #16]
      break;
 800835a:	e070      	b.n	800843e <handle_rxflvl_irq+0x17a>

    case GRXSTS_PKTSTS_OUTRX: {
      // Out packet received
      xfer_ctl_t* xfer = XFER_CTL_BASE(epnum, TUSB_DIR_OUT);
 800835c:	7fbb      	ldrb	r3, [r7, #30]
 800835e:	015b      	lsls	r3, r3, #5
 8008360:	4a3b      	ldr	r2, [pc, #236]	@ (8008450 <handle_rxflvl_irq+0x18c>)
 8008362:	4413      	add	r3, r2
 8008364:	613b      	str	r3, [r7, #16]

      // Read packet off RxFIFO
      if (xfer->ff) {
 8008366:	693b      	ldr	r3, [r7, #16]
 8008368:	685b      	ldr	r3, [r3, #4]
 800836a:	2b00      	cmp	r3, #0
 800836c:	d007      	beq.n	800837e <handle_rxflvl_irq+0xba>
        // Ring buffer
        tu_fifo_write_n_const_addr_full_words(xfer->ff, (const void*) (uintptr_t) rx_fifo, bcnt);
 800836e:	693b      	ldr	r3, [r7, #16]
 8008370:	685b      	ldr	r3, [r3, #4]
 8008372:	8bba      	ldrh	r2, [r7, #28]
 8008374:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8008376:	4618      	mov	r0, r3
 8008378:	f7fc fd56 	bl	8004e28 <tu_fifo_write_n_const_addr_full_words>
 800837c:	e00c      	b.n	8008398 <handle_rxflvl_irq+0xd4>
      } else {
        // Linear buffer
        read_fifo_packet(rhport, xfer->buffer, bcnt);
 800837e:	693b      	ldr	r3, [r7, #16]
 8008380:	6819      	ldr	r1, [r3, #0]
 8008382:	8bba      	ldrh	r2, [r7, #28]
 8008384:	79fb      	ldrb	r3, [r7, #7]
 8008386:	4618      	mov	r0, r3
 8008388:	f7ff feee 	bl	8008168 <read_fifo_packet>

        // Increment pointer to xfer data
        xfer->buffer += bcnt;
 800838c:	693b      	ldr	r3, [r7, #16]
 800838e:	681a      	ldr	r2, [r3, #0]
 8008390:	8bbb      	ldrh	r3, [r7, #28]
 8008392:	441a      	add	r2, r3
 8008394:	693b      	ldr	r3, [r7, #16]
 8008396:	601a      	str	r2, [r3, #0]
      }

      // Truncate transfer length in case of short packet
      if (bcnt < xfer->max_size) {
 8008398:	693b      	ldr	r3, [r7, #16]
 800839a:	895b      	ldrh	r3, [r3, #10]
 800839c:	8bba      	ldrh	r2, [r7, #28]
 800839e:	429a      	cmp	r2, r3
 80083a0:	d248      	bcs.n	8008434 <handle_rxflvl_irq+0x170>
        xfer->total_len -= (epout->doeptsiz & DOEPTSIZ_XFRSIZ_Msk) >> DOEPTSIZ_XFRSIZ_Pos;
 80083a2:	69bb      	ldr	r3, [r7, #24]
 80083a4:	691b      	ldr	r3, [r3, #16]
 80083a6:	f3c3 0112 	ubfx	r1, r3, #0, #19
 80083aa:	693b      	ldr	r3, [r7, #16]
 80083ac:	891a      	ldrh	r2, [r3, #8]
 80083ae:	b28b      	uxth	r3, r1
 80083b0:	1ad3      	subs	r3, r2, r3
 80083b2:	b29a      	uxth	r2, r3
 80083b4:	693b      	ldr	r3, [r7, #16]
 80083b6:	811a      	strh	r2, [r3, #8]
        if (epnum == 0) {
 80083b8:	7fbb      	ldrb	r3, [r7, #30]
 80083ba:	2b00      	cmp	r3, #0
 80083bc:	d13a      	bne.n	8008434 <handle_rxflvl_irq+0x170>
          xfer->total_len -= ep0_pending[TUSB_DIR_OUT];
 80083be:	693b      	ldr	r3, [r7, #16]
 80083c0:	891a      	ldrh	r2, [r3, #8]
 80083c2:	4b24      	ldr	r3, [pc, #144]	@ (8008454 <handle_rxflvl_irq+0x190>)
 80083c4:	881b      	ldrh	r3, [r3, #0]
 80083c6:	1ad3      	subs	r3, r2, r3
 80083c8:	b29a      	uxth	r2, r3
 80083ca:	693b      	ldr	r3, [r7, #16]
 80083cc:	811a      	strh	r2, [r3, #8]
          ep0_pending[TUSB_DIR_OUT] = 0;
 80083ce:	4b21      	ldr	r3, [pc, #132]	@ (8008454 <handle_rxflvl_irq+0x190>)
 80083d0:	2200      	movs	r2, #0
 80083d2:	801a      	strh	r2, [r3, #0]
        }
      }
    }
      break;
 80083d4:	e02e      	b.n	8008434 <handle_rxflvl_irq+0x170>
      // Occurred on STM32L47 with dwc2 version 3.10a but not found on other version like 2.80a or 3.30a
      // May (or not) be 3.10a specific feature/bug or depending on MCU configuration
      // XFRC complete is additionally generated when
      // - setup packet is received
      // - complete the data stage of control write is complete
      if ((epnum == 0) && (bcnt == 0) && (dwc2->gsnpsid >= DWC2_CORE_REV_3_00a)) {
 80083d6:	7fbb      	ldrb	r3, [r7, #30]
 80083d8:	2b00      	cmp	r3, #0
 80083da:	d12d      	bne.n	8008438 <handle_rxflvl_irq+0x174>
 80083dc:	8bbb      	ldrh	r3, [r7, #28]
 80083de:	2b00      	cmp	r3, #0
 80083e0:	d12a      	bne.n	8008438 <handle_rxflvl_irq+0x174>
 80083e2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80083e4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80083e6:	4a1c      	ldr	r2, [pc, #112]	@ (8008458 <handle_rxflvl_irq+0x194>)
 80083e8:	4293      	cmp	r3, r2
 80083ea:	d925      	bls.n	8008438 <handle_rxflvl_irq+0x174>
        uint32_t doepint = epout->doepint;
 80083ec:	69bb      	ldr	r3, [r7, #24]
 80083ee:	689b      	ldr	r3, [r3, #8]
 80083f0:	617b      	str	r3, [r7, #20]

        if (doepint & (DOEPINT_STPKTRX | DOEPINT_OTEPSPR)) {
 80083f2:	697a      	ldr	r2, [r7, #20]
 80083f4:	f248 0320 	movw	r3, #32800	@ 0x8020
 80083f8:	4013      	ands	r3, r2
 80083fa:	2b00      	cmp	r3, #0
 80083fc:	d01c      	beq.n	8008438 <handle_rxflvl_irq+0x174>
          // skip this "no-data" transfer complete event
          // Note: STPKTRX will be clear later by setup received handler
          uint32_t clear_flags = DOEPINT_XFRC;
 80083fe:	2301      	movs	r3, #1
 8008400:	62fb      	str	r3, [r7, #44]	@ 0x2c

          if (doepint & DOEPINT_OTEPSPR) clear_flags |= DOEPINT_OTEPSPR;
 8008402:	697b      	ldr	r3, [r7, #20]
 8008404:	f003 0320 	and.w	r3, r3, #32
 8008408:	2b00      	cmp	r3, #0
 800840a:	d003      	beq.n	8008414 <handle_rxflvl_irq+0x150>
 800840c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800840e:	f043 0320 	orr.w	r3, r3, #32
 8008412:	62fb      	str	r3, [r7, #44]	@ 0x2c

          epout->doepint = clear_flags;
 8008414:	69bb      	ldr	r3, [r7, #24]
 8008416:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8008418:	609a      	str	r2, [r3, #8]

          // TU_LOG(DWC2_DEBUG, "  FIX extra transfer complete on setup/data compete\r\n");
        }
      }
      break;
 800841a:	e00d      	b.n	8008438 <handle_rxflvl_irq+0x174>

    default:    // Invalid
      TU_BREAKPOINT();
 800841c:	4b0f      	ldr	r3, [pc, #60]	@ (800845c <handle_rxflvl_irq+0x198>)
 800841e:	60fb      	str	r3, [r7, #12]
 8008420:	68fb      	ldr	r3, [r7, #12]
 8008422:	681b      	ldr	r3, [r3, #0]
 8008424:	f003 0301 	and.w	r3, r3, #1
 8008428:	2b00      	cmp	r3, #0
 800842a:	d007      	beq.n	800843c <handle_rxflvl_irq+0x178>
 800842c:	be00      	bkpt	0x0000
      break;
 800842e:	e005      	b.n	800843c <handle_rxflvl_irq+0x178>
      break;
 8008430:	bf00      	nop
 8008432:	e004      	b.n	800843e <handle_rxflvl_irq+0x17a>
      break;
 8008434:	bf00      	nop
 8008436:	e002      	b.n	800843e <handle_rxflvl_irq+0x17a>
      break;
 8008438:	bf00      	nop
 800843a:	e000      	b.n	800843e <handle_rxflvl_irq+0x17a>
      break;
 800843c:	bf00      	nop
  }
}
 800843e:	bf00      	nop
 8008440:	3730      	adds	r7, #48	@ 0x30
 8008442:	46bd      	mov	sp, r7
 8008444:	bd80      	pop	{r7, pc}
 8008446:	bf00      	nop
 8008448:	0801bfb8 	.word	0x0801bfb8
 800844c:	24001e84 	.word	0x24001e84
 8008450:	24001e8c 	.word	0x24001e8c
 8008454:	24001fac 	.word	0x24001fac
 8008458:	4f543009 	.word	0x4f543009
 800845c:	e000edf0 	.word	0xe000edf0

08008460 <handle_epout_irq>:

static void handle_epout_irq(uint8_t rhport) {
 8008460:	b580      	push	{r7, lr}
 8008462:	b096      	sub	sp, #88	@ 0x58
 8008464:	af02      	add	r7, sp, #8
 8008466:	4603      	mov	r3, r0
 8008468:	71fb      	strb	r3, [r7, #7]
  dwc2_regs_t* dwc2 = DWC2_REG(rhport);
 800846a:	79fb      	ldrb	r3, [r7, #7]
 800846c:	4a60      	ldr	r2, [pc, #384]	@ (80085f0 <handle_epout_irq+0x190>)
 800846e:	011b      	lsls	r3, r3, #4
 8008470:	4413      	add	r3, r2
 8008472:	681b      	ldr	r3, [r3, #0]
 8008474:	647b      	str	r3, [r7, #68]	@ 0x44
  uint8_t const ep_count = _dwc2_controller[rhport].ep_count;
 8008476:	79fb      	ldrb	r3, [r7, #7]
 8008478:	4a5d      	ldr	r2, [pc, #372]	@ (80085f0 <handle_epout_irq+0x190>)
 800847a:	011b      	lsls	r3, r3, #4
 800847c:	4413      	add	r3, r2
 800847e:	3308      	adds	r3, #8
 8008480:	781b      	ldrb	r3, [r3, #0]
 8008482:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43

  // DAINT for a given EP clears when DOEPINTx is cleared.
  // OEPINT will be cleared when DAINT's out bits are cleared.
  for (uint8_t n = 0; n < ep_count; n++) {
 8008486:	2300      	movs	r3, #0
 8008488:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
 800848c:	e0a4      	b.n	80085d8 <handle_epout_irq+0x178>
    if (dwc2->daint & TU_BIT(DAINT_OEPINT_Pos + n)) {
 800848e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8008490:	f8d3 2818 	ldr.w	r2, [r3, #2072]	@ 0x818
 8008494:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 8008498:	3310      	adds	r3, #16
 800849a:	fa22 f303 	lsr.w	r3, r2, r3
 800849e:	f003 0301 	and.w	r3, r3, #1
 80084a2:	2b00      	cmp	r3, #0
 80084a4:	f000 8093 	beq.w	80085ce <handle_epout_irq+0x16e>
      dwc2_epout_t* epout = &dwc2->epout[n];
 80084a8:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 80084ac:	3358      	adds	r3, #88	@ 0x58
 80084ae:	015b      	lsls	r3, r3, #5
 80084b0:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80084b2:	4413      	add	r3, r2
 80084b4:	63fb      	str	r3, [r7, #60]	@ 0x3c

      uint32_t const doepint = epout->doepint;
 80084b6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80084b8:	689b      	ldr	r3, [r3, #8]
 80084ba:	63bb      	str	r3, [r7, #56]	@ 0x38

      // SETUP packet Setup Phase done.
      if (doepint & DOEPINT_STUP) {
 80084bc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80084be:	f003 0308 	and.w	r3, r3, #8
 80084c2:	2b00      	cmp	r3, #0
 80084c4:	d034      	beq.n	8008530 <handle_epout_irq+0xd0>
        uint32_t clear_flag = DOEPINT_STUP;
 80084c6:	2308      	movs	r3, #8
 80084c8:	64bb      	str	r3, [r7, #72]	@ 0x48

        // STPKTRX is only available for version from 3_00a
        if ((doepint & DOEPINT_STPKTRX) && (dwc2->gsnpsid >= DWC2_CORE_REV_3_00a)) {
 80084ca:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80084cc:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80084d0:	2b00      	cmp	r3, #0
 80084d2:	d008      	beq.n	80084e6 <handle_epout_irq+0x86>
 80084d4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80084d6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80084d8:	4a46      	ldr	r2, [pc, #280]	@ (80085f4 <handle_epout_irq+0x194>)
 80084da:	4293      	cmp	r3, r2
 80084dc:	d903      	bls.n	80084e6 <handle_epout_irq+0x86>
          clear_flag |= DOEPINT_STPKTRX;
 80084de:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80084e0:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80084e4:	64bb      	str	r3, [r7, #72]	@ 0x48
        }

        epout->doepint = clear_flag;
 80084e6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80084e8:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80084ea:	609a      	str	r2, [r3, #8]
 80084ec:	79fb      	ldrb	r3, [r7, #7]
 80084ee:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
 80084f2:	4b41      	ldr	r3, [pc, #260]	@ (80085f8 <handle_epout_irq+0x198>)
 80084f4:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80084f6:	2301      	movs	r3, #1
 80084f8:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
  dcd_event_t event = { .rhport = rhport, .event_id = DCD_EVENT_SETUP_RECEIVED };
 80084fc:	f107 0314 	add.w	r3, r7, #20
 8008500:	2200      	movs	r2, #0
 8008502:	601a      	str	r2, [r3, #0]
 8008504:	605a      	str	r2, [r3, #4]
 8008506:	609a      	str	r2, [r3, #8]
 8008508:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 800850c:	753b      	strb	r3, [r7, #20]
 800850e:	2306      	movs	r3, #6
 8008510:	757b      	strb	r3, [r7, #21]
  memcpy(&event.setup_received, setup, sizeof(tusb_control_request_t));
 8008512:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8008514:	f107 0318 	add.w	r3, r7, #24
 8008518:	6810      	ldr	r0, [r2, #0]
 800851a:	6851      	ldr	r1, [r2, #4]
 800851c:	c303      	stmia	r3!, {r0, r1}
  dcd_event_handler(&event, in_isr);
 800851e:	f897 202b 	ldrb.w	r2, [r7, #43]	@ 0x2b
 8008522:	f107 0314 	add.w	r3, r7, #20
 8008526:	4611      	mov	r1, r2
 8008528:	4618      	mov	r0, r3
 800852a:	f7fd fccd 	bl	8005ec8 <dcd_event_handler>
}
 800852e:	bf00      	nop
        dcd_event_setup_received(rhport, (uint8_t*) _setup_packet, true);
      }

      // OUT XFER complete
      if (epout->doepint & DOEPINT_XFRC) {
 8008530:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008532:	689b      	ldr	r3, [r3, #8]
 8008534:	f003 0301 	and.w	r3, r3, #1
 8008538:	2b00      	cmp	r3, #0
 800853a:	d048      	beq.n	80085ce <handle_epout_irq+0x16e>
        epout->doepint = DOEPINT_XFRC;
 800853c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800853e:	2201      	movs	r2, #1
 8008540:	609a      	str	r2, [r3, #8]

        xfer_ctl_t* xfer = XFER_CTL_BASE(n, TUSB_DIR_OUT);
 8008542:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 8008546:	015b      	lsls	r3, r3, #5
 8008548:	4a2c      	ldr	r2, [pc, #176]	@ (80085fc <handle_epout_irq+0x19c>)
 800854a:	4413      	add	r3, r2
 800854c:	637b      	str	r3, [r7, #52]	@ 0x34

        // EP0 can only handle one packet
        if ((n == 0) && ep0_pending[TUSB_DIR_OUT]) {
 800854e:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 8008552:	2b00      	cmp	r3, #0
 8008554:	d10e      	bne.n	8008574 <handle_epout_irq+0x114>
 8008556:	4b2a      	ldr	r3, [pc, #168]	@ (8008600 <handle_epout_irq+0x1a0>)
 8008558:	881b      	ldrh	r3, [r3, #0]
 800855a:	2b00      	cmp	r3, #0
 800855c:	d00a      	beq.n	8008574 <handle_epout_irq+0x114>
          // Schedule another packet to be received.
          edpt_schedule_packets(rhport, n, TUSB_DIR_OUT, 1, ep0_pending[TUSB_DIR_OUT]);
 800855e:	4b28      	ldr	r3, [pc, #160]	@ (8008600 <handle_epout_irq+0x1a0>)
 8008560:	881b      	ldrh	r3, [r3, #0]
 8008562:	f897 104f 	ldrb.w	r1, [r7, #79]	@ 0x4f
 8008566:	79f8      	ldrb	r0, [r7, #7]
 8008568:	9300      	str	r3, [sp, #0]
 800856a:	2301      	movs	r3, #1
 800856c:	2200      	movs	r2, #0
 800856e:	f7fe ff83 	bl	8007478 <edpt_schedule_packets>
 8008572:	e02c      	b.n	80085ce <handle_epout_irq+0x16e>
        } else {
          dcd_event_xfer_complete(rhport, n, xfer->total_len, XFER_RESULT_SUCCESS, true);
 8008574:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008576:	891b      	ldrh	r3, [r3, #8]
 8008578:	461a      	mov	r2, r3
 800857a:	79fb      	ldrb	r3, [r7, #7]
 800857c:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8008580:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 8008584:	f887 3029 	strb.w	r3, [r7, #41]	@ 0x29
 8008588:	627a      	str	r2, [r7, #36]	@ 0x24
 800858a:	2300      	movs	r3, #0
 800858c:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8008590:	2301      	movs	r3, #1
 8008592:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  dcd_event_t event = { .rhport = rhport, .event_id = DCD_EVENT_XFER_COMPLETE };
 8008596:	f107 0308 	add.w	r3, r7, #8
 800859a:	2200      	movs	r2, #0
 800859c:	601a      	str	r2, [r3, #0]
 800859e:	605a      	str	r2, [r3, #4]
 80085a0:	609a      	str	r2, [r3, #8]
 80085a2:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 80085a6:	723b      	strb	r3, [r7, #8]
 80085a8:	2307      	movs	r3, #7
 80085aa:	727b      	strb	r3, [r7, #9]
  event.xfer_complete.ep_addr = ep_addr;
 80085ac:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 80085b0:	733b      	strb	r3, [r7, #12]
  event.xfer_complete.len     = xferred_bytes;
 80085b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80085b4:	613b      	str	r3, [r7, #16]
  event.xfer_complete.result  = result;
 80085b6:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80085ba:	737b      	strb	r3, [r7, #13]
  dcd_event_handler(&event, in_isr);
 80085bc:	f897 2022 	ldrb.w	r2, [r7, #34]	@ 0x22
 80085c0:	f107 0308 	add.w	r3, r7, #8
 80085c4:	4611      	mov	r1, r2
 80085c6:	4618      	mov	r0, r3
 80085c8:	f7fd fc7e 	bl	8005ec8 <dcd_event_handler>
}
 80085cc:	bf00      	nop
  for (uint8_t n = 0; n < ep_count; n++) {
 80085ce:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 80085d2:	3301      	adds	r3, #1
 80085d4:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
 80085d8:	f897 204f 	ldrb.w	r2, [r7, #79]	@ 0x4f
 80085dc:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 80085e0:	429a      	cmp	r2, r3
 80085e2:	f4ff af54 	bcc.w	800848e <handle_epout_irq+0x2e>
        }
      }
    }
  }
}
 80085e6:	bf00      	nop
 80085e8:	bf00      	nop
 80085ea:	3750      	adds	r7, #80	@ 0x50
 80085ec:	46bd      	mov	sp, r7
 80085ee:	bd80      	pop	{r7, pc}
 80085f0:	0801bfb8 	.word	0x0801bfb8
 80085f4:	4f543009 	.word	0x4f543009
 80085f8:	24001e84 	.word	0x24001e84
 80085fc:	24001e8c 	.word	0x24001e8c
 8008600:	24001fac 	.word	0x24001fac

08008604 <handle_epin_irq>:

static void handle_epin_irq(uint8_t rhport) {
 8008604:	b580      	push	{r7, lr}
 8008606:	b094      	sub	sp, #80	@ 0x50
 8008608:	af02      	add	r7, sp, #8
 800860a:	4603      	mov	r3, r0
 800860c:	71fb      	strb	r3, [r7, #7]
  dwc2_regs_t* dwc2 = DWC2_REG(rhport);
 800860e:	79fb      	ldrb	r3, [r7, #7]
 8008610:	4a88      	ldr	r2, [pc, #544]	@ (8008834 <handle_epin_irq+0x230>)
 8008612:	011b      	lsls	r3, r3, #4
 8008614:	4413      	add	r3, r2
 8008616:	681b      	ldr	r3, [r3, #0]
 8008618:	643b      	str	r3, [r7, #64]	@ 0x40
  uint8_t const ep_count = _dwc2_controller[rhport].ep_count;
 800861a:	79fb      	ldrb	r3, [r7, #7]
 800861c:	4a85      	ldr	r2, [pc, #532]	@ (8008834 <handle_epin_irq+0x230>)
 800861e:	011b      	lsls	r3, r3, #4
 8008620:	4413      	add	r3, r2
 8008622:	3308      	adds	r3, #8
 8008624:	781b      	ldrb	r3, [r3, #0]
 8008626:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
  dwc2_epin_t* epin = dwc2->epin;
 800862a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800862c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008630:	63bb      	str	r3, [r7, #56]	@ 0x38

  // DAINT for a given EP clears when DIEPINTx is cleared.
  // IEPINT will be cleared when DAINT's out bits are cleared.
  for (uint8_t n = 0; n < ep_count; n++) {
 8008632:	2300      	movs	r3, #0
 8008634:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
 8008638:	e0f0      	b.n	800881c <handle_epin_irq+0x218>
    if (dwc2->daint & TU_BIT(DAINT_IEPINT_Pos + n)) {
 800863a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800863c:	f8d3 2818 	ldr.w	r2, [r3, #2072]	@ 0x818
 8008640:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8008644:	fa22 f303 	lsr.w	r3, r2, r3
 8008648:	f003 0301 	and.w	r3, r3, #1
 800864c:	2b00      	cmp	r3, #0
 800864e:	f000 80e0 	beq.w	8008812 <handle_epin_irq+0x20e>
      // IN XFER complete (entire xfer).
      xfer_ctl_t* xfer = XFER_CTL_BASE(n, TUSB_DIR_IN);
 8008652:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8008656:	015b      	lsls	r3, r3, #5
 8008658:	3310      	adds	r3, #16
 800865a:	4a77      	ldr	r2, [pc, #476]	@ (8008838 <handle_epin_irq+0x234>)
 800865c:	4413      	add	r3, r2
 800865e:	637b      	str	r3, [r7, #52]	@ 0x34

      if (epin[n].diepint & DIEPINT_XFRC) {
 8008660:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8008664:	015b      	lsls	r3, r3, #5
 8008666:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8008668:	4413      	add	r3, r2
 800866a:	689b      	ldr	r3, [r3, #8]
 800866c:	f003 0301 	and.w	r3, r3, #1
 8008670:	2b00      	cmp	r3, #0
 8008672:	d046      	beq.n	8008702 <handle_epin_irq+0xfe>
        epin[n].diepint = DIEPINT_XFRC;
 8008674:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8008678:	015b      	lsls	r3, r3, #5
 800867a:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800867c:	4413      	add	r3, r2
 800867e:	2201      	movs	r2, #1
 8008680:	609a      	str	r2, [r3, #8]

        // EP0 can only handle one packet
        if ((n == 0) && ep0_pending[TUSB_DIR_IN]) {
 8008682:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8008686:	2b00      	cmp	r3, #0
 8008688:	d10e      	bne.n	80086a8 <handle_epin_irq+0xa4>
 800868a:	4b6c      	ldr	r3, [pc, #432]	@ (800883c <handle_epin_irq+0x238>)
 800868c:	885b      	ldrh	r3, [r3, #2]
 800868e:	2b00      	cmp	r3, #0
 8008690:	d00a      	beq.n	80086a8 <handle_epin_irq+0xa4>
          // Schedule another packet to be transmitted.
          edpt_schedule_packets(rhport, n, TUSB_DIR_IN, 1, ep0_pending[TUSB_DIR_IN]);
 8008692:	4b6a      	ldr	r3, [pc, #424]	@ (800883c <handle_epin_irq+0x238>)
 8008694:	885b      	ldrh	r3, [r3, #2]
 8008696:	f897 1047 	ldrb.w	r1, [r7, #71]	@ 0x47
 800869a:	79f8      	ldrb	r0, [r7, #7]
 800869c:	9300      	str	r3, [sp, #0]
 800869e:	2301      	movs	r3, #1
 80086a0:	2201      	movs	r2, #1
 80086a2:	f7fe fee9 	bl	8007478 <edpt_schedule_packets>
 80086a6:	e02c      	b.n	8008702 <handle_epin_irq+0xfe>
        } else {
          dcd_event_xfer_complete(rhport, n | TUSB_DIR_IN_MASK, xfer->total_len, XFER_RESULT_SUCCESS, true);
 80086a8:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 80086ac:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80086b0:	b2d9      	uxtb	r1, r3
 80086b2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80086b4:	891b      	ldrh	r3, [r3, #8]
 80086b6:	461a      	mov	r2, r3
 80086b8:	79fb      	ldrb	r3, [r7, #7]
 80086ba:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 80086be:	460b      	mov	r3, r1
 80086c0:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 80086c4:	623a      	str	r2, [r7, #32]
 80086c6:	2300      	movs	r3, #0
 80086c8:	77fb      	strb	r3, [r7, #31]
 80086ca:	2301      	movs	r3, #1
 80086cc:	77bb      	strb	r3, [r7, #30]
  dcd_event_t event = { .rhport = rhport, .event_id = DCD_EVENT_XFER_COMPLETE };
 80086ce:	f107 030c 	add.w	r3, r7, #12
 80086d2:	2200      	movs	r2, #0
 80086d4:	601a      	str	r2, [r3, #0]
 80086d6:	605a      	str	r2, [r3, #4]
 80086d8:	609a      	str	r2, [r3, #8]
 80086da:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80086de:	733b      	strb	r3, [r7, #12]
 80086e0:	2307      	movs	r3, #7
 80086e2:	737b      	strb	r3, [r7, #13]
  event.xfer_complete.ep_addr = ep_addr;
 80086e4:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 80086e8:	743b      	strb	r3, [r7, #16]
  event.xfer_complete.len     = xferred_bytes;
 80086ea:	6a3b      	ldr	r3, [r7, #32]
 80086ec:	617b      	str	r3, [r7, #20]
  event.xfer_complete.result  = result;
 80086ee:	7ffb      	ldrb	r3, [r7, #31]
 80086f0:	747b      	strb	r3, [r7, #17]
  dcd_event_handler(&event, in_isr);
 80086f2:	7fba      	ldrb	r2, [r7, #30]
 80086f4:	f107 030c 	add.w	r3, r7, #12
 80086f8:	4611      	mov	r1, r2
 80086fa:	4618      	mov	r0, r3
 80086fc:	f7fd fbe4 	bl	8005ec8 <dcd_event_handler>
}
 8008700:	bf00      	nop
        }
      }

      // XFER FIFO empty
      if ((epin[n].diepint & DIEPINT_TXFE) && (dwc2->diepempmsk & (1 << n))) {
 8008702:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8008706:	015b      	lsls	r3, r3, #5
 8008708:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800870a:	4413      	add	r3, r2
 800870c:	689b      	ldr	r3, [r3, #8]
 800870e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008712:	2b00      	cmp	r3, #0
 8008714:	d07d      	beq.n	8008812 <handle_epin_irq+0x20e>
 8008716:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8008718:	f8d3 3834 	ldr.w	r3, [r3, #2100]	@ 0x834
 800871c:	f897 2047 	ldrb.w	r2, [r7, #71]	@ 0x47
 8008720:	2101      	movs	r1, #1
 8008722:	fa01 f202 	lsl.w	r2, r1, r2
 8008726:	4013      	ands	r3, r2
 8008728:	2b00      	cmp	r3, #0
 800872a:	d072      	beq.n	8008812 <handle_epin_irq+0x20e>
        // diepint's TXFE bit is read-only, software cannot clear it.
        // It will only be cleared by hardware when written bytes is more than
        // - 64 bytes or
        // - Half of TX FIFO size (configured by DIEPTXF)

        uint16_t remaining_packets = (epin[n].dieptsiz & DIEPTSIZ_PKTCNT_Msk) >> DIEPTSIZ_PKTCNT_Pos;
 800872c:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8008730:	015b      	lsls	r3, r3, #5
 8008732:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8008734:	4413      	add	r3, r2
 8008736:	691b      	ldr	r3, [r3, #16]
 8008738:	0cdb      	lsrs	r3, r3, #19
 800873a:	b29b      	uxth	r3, r3
 800873c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8008740:	867b      	strh	r3, [r7, #50]	@ 0x32

        // Process every single packet (only whole packets can be written to fifo)
        for (uint16_t i = 0; i < remaining_packets; i++) {
 8008742:	2300      	movs	r3, #0
 8008744:	f8a7 3044 	strh.w	r3, [r7, #68]	@ 0x44
 8008748:	e045      	b.n	80087d6 <handle_epin_irq+0x1d2>
          uint16_t const remaining_bytes = (epin[n].dieptsiz & DIEPTSIZ_XFRSIZ_Msk) >> DIEPTSIZ_XFRSIZ_Pos;
 800874a:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 800874e:	015b      	lsls	r3, r3, #5
 8008750:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8008752:	4413      	add	r3, r2
 8008754:	691b      	ldr	r3, [r3, #16]
 8008756:	863b      	strh	r3, [r7, #48]	@ 0x30

          // Packet can not be larger than ep max size
          uint16_t const packet_size = tu_min16(remaining_bytes, xfer->max_size);
 8008758:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800875a:	895a      	ldrh	r2, [r3, #10]
 800875c:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 800875e:	83bb      	strh	r3, [r7, #28]
 8008760:	4613      	mov	r3, r2
 8008762:	837b      	strh	r3, [r7, #26]
TU_ATTR_ALWAYS_INLINE static inline uint16_t tu_min16 (uint16_t x, uint16_t y) { return (x < y) ? x : y; }
 8008764:	8bba      	ldrh	r2, [r7, #28]
 8008766:	8b7b      	ldrh	r3, [r7, #26]
 8008768:	4293      	cmp	r3, r2
 800876a:	bf28      	it	cs
 800876c:	4613      	movcs	r3, r2
 800876e:	b29b      	uxth	r3, r3
 8008770:	85fb      	strh	r3, [r7, #46]	@ 0x2e

          // It's only possible to write full packets into FIFO. Therefore DTXFSTS register of current
          // EP has to be checked if the buffer can take another WHOLE packet
          if (packet_size > ((epin[n].dtxfsts & DTXFSTS_INEPTFSAV_Msk) << 2)) break;
 8008772:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 8008774:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8008778:	015b      	lsls	r3, r3, #5
 800877a:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 800877c:	440b      	add	r3, r1
 800877e:	699b      	ldr	r3, [r3, #24]
 8008780:	0099      	lsls	r1, r3, #2
 8008782:	4b2f      	ldr	r3, [pc, #188]	@ (8008840 <handle_epin_irq+0x23c>)
 8008784:	400b      	ands	r3, r1
 8008786:	429a      	cmp	r2, r3
 8008788:	d82b      	bhi.n	80087e2 <handle_epin_irq+0x1de>

          // Push packet to Tx-FIFO
          if (xfer->ff) {
 800878a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800878c:	685b      	ldr	r3, [r3, #4]
 800878e:	2b00      	cmp	r3, #0
 8008790:	d00e      	beq.n	80087b0 <handle_epin_irq+0x1ac>
            volatile uint32_t* tx_fifo = dwc2->fifo[n];
 8008792:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8008796:	3301      	adds	r3, #1
 8008798:	031b      	lsls	r3, r3, #12
 800879a:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800879c:	4413      	add	r3, r2
 800879e:	62bb      	str	r3, [r7, #40]	@ 0x28
            tu_fifo_read_n_const_addr_full_words(xfer->ff, (void*) (uintptr_t) tx_fifo, packet_size);
 80087a0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80087a2:	685b      	ldr	r3, [r3, #4]
 80087a4:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 80087a6:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80087a8:	4618      	mov	r0, r3
 80087aa:	f7fc fad6 	bl	8004d5a <tu_fifo_read_n_const_addr_full_words>
 80087ae:	e00d      	b.n	80087cc <handle_epin_irq+0x1c8>
          } else {
            write_fifo_packet(rhport, n, xfer->buffer, packet_size);
 80087b0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80087b2:	681a      	ldr	r2, [r3, #0]
 80087b4:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 80087b6:	f897 1047 	ldrb.w	r1, [r7, #71]	@ 0x47
 80087ba:	79f8      	ldrb	r0, [r7, #7]
 80087bc:	f7ff fd2e 	bl	800821c <write_fifo_packet>

            // Increment pointer to xfer data
            xfer->buffer += packet_size;
 80087c0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80087c2:	681a      	ldr	r2, [r3, #0]
 80087c4:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 80087c6:	441a      	add	r2, r3
 80087c8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80087ca:	601a      	str	r2, [r3, #0]
        for (uint16_t i = 0; i < remaining_packets; i++) {
 80087cc:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 80087d0:	3301      	adds	r3, #1
 80087d2:	f8a7 3044 	strh.w	r3, [r7, #68]	@ 0x44
 80087d6:	f8b7 2044 	ldrh.w	r2, [r7, #68]	@ 0x44
 80087da:	8e7b      	ldrh	r3, [r7, #50]	@ 0x32
 80087dc:	429a      	cmp	r2, r3
 80087de:	d3b4      	bcc.n	800874a <handle_epin_irq+0x146>
 80087e0:	e000      	b.n	80087e4 <handle_epin_irq+0x1e0>
          if (packet_size > ((epin[n].dtxfsts & DTXFSTS_INEPTFSAV_Msk) << 2)) break;
 80087e2:	bf00      	nop
          }
        }

        // Turn off TXFE if all bytes are written.
        if (((epin[n].dieptsiz & DIEPTSIZ_XFRSIZ_Msk) >> DIEPTSIZ_XFRSIZ_Pos) == 0) {
 80087e4:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 80087e8:	015b      	lsls	r3, r3, #5
 80087ea:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80087ec:	4413      	add	r3, r2
 80087ee:	691b      	ldr	r3, [r3, #16]
 80087f0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80087f4:	2b00      	cmp	r3, #0
 80087f6:	d10c      	bne.n	8008812 <handle_epin_irq+0x20e>
          dwc2->diepempmsk &= ~(1 << n);
 80087f8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80087fa:	f8d3 3834 	ldr.w	r3, [r3, #2100]	@ 0x834
 80087fe:	f897 2047 	ldrb.w	r2, [r7, #71]	@ 0x47
 8008802:	2101      	movs	r1, #1
 8008804:	fa01 f202 	lsl.w	r2, r1, r2
 8008808:	43d2      	mvns	r2, r2
 800880a:	401a      	ands	r2, r3
 800880c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800880e:	f8c3 2834 	str.w	r2, [r3, #2100]	@ 0x834
  for (uint8_t n = 0; n < ep_count; n++) {
 8008812:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8008816:	3301      	adds	r3, #1
 8008818:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
 800881c:	f897 2047 	ldrb.w	r2, [r7, #71]	@ 0x47
 8008820:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8008824:	429a      	cmp	r2, r3
 8008826:	f4ff af08 	bcc.w	800863a <handle_epin_irq+0x36>
        }
      }
    }
  }
}
 800882a:	bf00      	nop
 800882c:	bf00      	nop
 800882e:	3748      	adds	r7, #72	@ 0x48
 8008830:	46bd      	mov	sp, r7
 8008832:	bd80      	pop	{r7, pc}
 8008834:	0801bfb8 	.word	0x0801bfb8
 8008838:	24001e8c 	.word	0x24001e8c
 800883c:	24001fac 	.word	0x24001fac
 8008840:	0003fffc 	.word	0x0003fffc

08008844 <dcd_int_handler>:

void dcd_int_handler(uint8_t rhport) {
 8008844:	b580      	push	{r7, lr}
 8008846:	b0a0      	sub	sp, #128	@ 0x80
 8008848:	af00      	add	r7, sp, #0
 800884a:	4603      	mov	r3, r0
 800884c:	71fb      	strb	r3, [r7, #7]
  dwc2_regs_t* dwc2 = DWC2_REG(rhport);
 800884e:	79fb      	ldrb	r3, [r7, #7]
 8008850:	4ab7      	ldr	r2, [pc, #732]	@ (8008b30 <dcd_int_handler+0x2ec>)
 8008852:	011b      	lsls	r3, r3, #4
 8008854:	4413      	add	r3, r2
 8008856:	681b      	ldr	r3, [r3, #0]
 8008858:	67bb      	str	r3, [r7, #120]	@ 0x78

  uint32_t const int_mask = dwc2->gintmsk;
 800885a:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800885c:	699b      	ldr	r3, [r3, #24]
 800885e:	677b      	str	r3, [r7, #116]	@ 0x74
  uint32_t const int_status = dwc2->gintsts & int_mask;
 8008860:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8008862:	695b      	ldr	r3, [r3, #20]
 8008864:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 8008866:	4013      	ands	r3, r2
 8008868:	673b      	str	r3, [r7, #112]	@ 0x70

  if (int_status & GINTSTS_USBRST) {
 800886a:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800886c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8008870:	2b00      	cmp	r3, #0
 8008872:	d007      	beq.n	8008884 <dcd_int_handler+0x40>
    // USBRST is start of reset.
    dwc2->gintsts = GINTSTS_USBRST;
 8008874:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8008876:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 800887a:	615a      	str	r2, [r3, #20]
    bus_reset(rhport);
 800887c:	79fb      	ldrb	r3, [r7, #7]
 800887e:	4618      	mov	r0, r3
 8008880:	f7fe fd6a 	bl	8007358 <bus_reset>
  }

  if (int_status & GINTSTS_ENUMDNE) {
 8008884:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8008886:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800888a:	2b00      	cmp	r3, #0
 800888c:	d03e      	beq.n	800890c <dcd_int_handler+0xc8>
    // ENUMDNE is the end of reset where speed of the link is detected
    dwc2->gintsts = GINTSTS_ENUMDNE;
 800888e:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8008890:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8008894:	615a      	str	r2, [r3, #20]

    tusb_speed_t speed;
    switch ((dwc2->dsts & DSTS_ENUMSPD_Msk) >> DSTS_ENUMSPD_Pos) {
 8008896:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8008898:	f8d3 3808 	ldr.w	r3, [r3, #2056]	@ 0x808
 800889c:	085b      	lsrs	r3, r3, #1
 800889e:	f003 0303 	and.w	r3, r3, #3
 80088a2:	2b00      	cmp	r3, #0
 80088a4:	d002      	beq.n	80088ac <dcd_int_handler+0x68>
 80088a6:	2b02      	cmp	r3, #2
 80088a8:	d004      	beq.n	80088b4 <dcd_int_handler+0x70>
 80088aa:	e007      	b.n	80088bc <dcd_int_handler+0x78>
      case DSTS_ENUMSPD_HS:
        speed = TUSB_SPEED_HIGH;
 80088ac:	2302      	movs	r3, #2
 80088ae:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
        break;
 80088b2:	e007      	b.n	80088c4 <dcd_int_handler+0x80>

      case DSTS_ENUMSPD_LS:
        speed = TUSB_SPEED_LOW;
 80088b4:	2301      	movs	r3, #1
 80088b6:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
        break;
 80088ba:	e003      	b.n	80088c4 <dcd_int_handler+0x80>

      case DSTS_ENUMSPD_FS_HSPHY:
      case DSTS_ENUMSPD_FS:
      default:
        speed = TUSB_SPEED_FULL;
 80088bc:	2300      	movs	r3, #0
 80088be:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
        break;
 80088c2:	bf00      	nop
 80088c4:	79fb      	ldrb	r3, [r7, #7]
 80088c6:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
 80088ca:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 80088ce:	f887 3066 	strb.w	r3, [r7, #102]	@ 0x66
 80088d2:	2301      	movs	r3, #1
 80088d4:	f887 3065 	strb.w	r3, [r7, #101]	@ 0x65
  dcd_event_t event = { .rhport = rhport, .event_id = DCD_EVENT_BUS_RESET };
 80088d8:	f107 0320 	add.w	r3, r7, #32
 80088dc:	2200      	movs	r2, #0
 80088de:	601a      	str	r2, [r3, #0]
 80088e0:	605a      	str	r2, [r3, #4]
 80088e2:	609a      	str	r2, [r3, #8]
 80088e4:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 80088e8:	f887 3020 	strb.w	r3, [r7, #32]
 80088ec:	2301      	movs	r3, #1
 80088ee:	f887 3021 	strb.w	r3, [r7, #33]	@ 0x21
  event.bus_reset.speed = speed;
 80088f2:	f897 3066 	ldrb.w	r3, [r7, #102]	@ 0x66
 80088f6:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
  dcd_event_handler(&event, in_isr);
 80088fa:	f897 2065 	ldrb.w	r2, [r7, #101]	@ 0x65
 80088fe:	f107 0320 	add.w	r3, r7, #32
 8008902:	4611      	mov	r1, r2
 8008904:	4618      	mov	r0, r3
 8008906:	f7fd fadf 	bl	8005ec8 <dcd_event_handler>
}
 800890a:	bf00      	nop
    // TODO must update GUSBCFG_TRDT according to link speed

    dcd_event_bus_reset(rhport, speed, true);
  }

  if (int_status & GINTSTS_USBSUSP) {
 800890c:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800890e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8008912:	2b00      	cmp	r3, #0
 8008914:	d023      	beq.n	800895e <dcd_int_handler+0x11a>
    dwc2->gintsts = GINTSTS_USBSUSP;
 8008916:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8008918:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800891c:	615a      	str	r2, [r3, #20]
 800891e:	79fb      	ldrb	r3, [r7, #7]
 8008920:	f887 3064 	strb.w	r3, [r7, #100]	@ 0x64
 8008924:	2304      	movs	r3, #4
 8008926:	f887 3063 	strb.w	r3, [r7, #99]	@ 0x63
 800892a:	2301      	movs	r3, #1
 800892c:	f887 3062 	strb.w	r3, [r7, #98]	@ 0x62
  dcd_event_t event = { .rhport = rhport, .event_id = eid };
 8008930:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8008934:	2200      	movs	r2, #0
 8008936:	601a      	str	r2, [r3, #0]
 8008938:	605a      	str	r2, [r3, #4]
 800893a:	609a      	str	r2, [r3, #8]
 800893c:	f897 3064 	ldrb.w	r3, [r7, #100]	@ 0x64
 8008940:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c
 8008944:	f897 3063 	ldrb.w	r3, [r7, #99]	@ 0x63
 8008948:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
  dcd_event_handler(&event, in_isr);
 800894c:	f897 2062 	ldrb.w	r2, [r7, #98]	@ 0x62
 8008950:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8008954:	4611      	mov	r1, r2
 8008956:	4618      	mov	r0, r3
 8008958:	f7fd fab6 	bl	8005ec8 <dcd_event_handler>
}
 800895c:	bf00      	nop
    dcd_event_bus_signal(rhport, DCD_EVENT_SUSPEND, true);
  }

  if (int_status & GINTSTS_WKUINT) {
 800895e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8008960:	2b00      	cmp	r3, #0
 8008962:	da23      	bge.n	80089ac <dcd_int_handler+0x168>
    dwc2->gintsts = GINTSTS_WKUINT;
 8008964:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8008966:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 800896a:	615a      	str	r2, [r3, #20]
 800896c:	79fb      	ldrb	r3, [r7, #7]
 800896e:	f887 3061 	strb.w	r3, [r7, #97]	@ 0x61
 8008972:	2305      	movs	r3, #5
 8008974:	f887 3060 	strb.w	r3, [r7, #96]	@ 0x60
 8008978:	2301      	movs	r3, #1
 800897a:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
  dcd_event_t event = { .rhport = rhport, .event_id = eid };
 800897e:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8008982:	2200      	movs	r2, #0
 8008984:	601a      	str	r2, [r3, #0]
 8008986:	605a      	str	r2, [r3, #4]
 8008988:	609a      	str	r2, [r3, #8]
 800898a:	f897 3061 	ldrb.w	r3, [r7, #97]	@ 0x61
 800898e:	f887 3038 	strb.w	r3, [r7, #56]	@ 0x38
 8008992:	f897 3060 	ldrb.w	r3, [r7, #96]	@ 0x60
 8008996:	f887 3039 	strb.w	r3, [r7, #57]	@ 0x39
  dcd_event_handler(&event, in_isr);
 800899a:	f897 205f 	ldrb.w	r2, [r7, #95]	@ 0x5f
 800899e:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 80089a2:	4611      	mov	r1, r2
 80089a4:	4618      	mov	r0, r3
 80089a6:	f7fd fa8f 	bl	8005ec8 <dcd_event_handler>
}
 80089aa:	bf00      	nop
  }

  // TODO check GINTSTS_DISCINT for disconnect detection
  // if(int_status & GINTSTS_DISCINT)

  if (int_status & GINTSTS_OTGINT) {
 80089ac:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80089ae:	f003 0304 	and.w	r3, r3, #4
 80089b2:	2b00      	cmp	r3, #0
 80089b4:	d028      	beq.n	8008a08 <dcd_int_handler+0x1c4>
    // OTG INT bit is read-only
    uint32_t const otg_int = dwc2->gotgint;
 80089b6:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80089b8:	685b      	ldr	r3, [r3, #4]
 80089ba:	66fb      	str	r3, [r7, #108]	@ 0x6c

    if (otg_int & GOTGINT_SEDET) {
 80089bc:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80089be:	f003 0304 	and.w	r3, r3, #4
 80089c2:	2b00      	cmp	r3, #0
 80089c4:	d01d      	beq.n	8008a02 <dcd_int_handler+0x1be>
 80089c6:	79fb      	ldrb	r3, [r7, #7]
 80089c8:	f887 305e 	strb.w	r3, [r7, #94]	@ 0x5e
 80089cc:	2302      	movs	r3, #2
 80089ce:	f887 305d 	strb.w	r3, [r7, #93]	@ 0x5d
 80089d2:	2301      	movs	r3, #1
 80089d4:	f887 305c 	strb.w	r3, [r7, #92]	@ 0x5c
  dcd_event_t event = { .rhport = rhport, .event_id = eid };
 80089d8:	f107 0314 	add.w	r3, r7, #20
 80089dc:	2200      	movs	r2, #0
 80089de:	601a      	str	r2, [r3, #0]
 80089e0:	605a      	str	r2, [r3, #4]
 80089e2:	609a      	str	r2, [r3, #8]
 80089e4:	f897 305e 	ldrb.w	r3, [r7, #94]	@ 0x5e
 80089e8:	753b      	strb	r3, [r7, #20]
 80089ea:	f897 305d 	ldrb.w	r3, [r7, #93]	@ 0x5d
 80089ee:	757b      	strb	r3, [r7, #21]
  dcd_event_handler(&event, in_isr);
 80089f0:	f897 205c 	ldrb.w	r2, [r7, #92]	@ 0x5c
 80089f4:	f107 0314 	add.w	r3, r7, #20
 80089f8:	4611      	mov	r1, r2
 80089fa:	4618      	mov	r0, r3
 80089fc:	f7fd fa64 	bl	8005ec8 <dcd_event_handler>
}
 8008a00:	bf00      	nop
      dcd_event_bus_signal(rhport, DCD_EVENT_UNPLUGGED, true);
    }

    dwc2->gotgint = otg_int;
 8008a02:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8008a04:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8008a06:	605a      	str	r2, [r3, #4]
  }

  if (int_status & GINTSTS_SOF) {
 8008a08:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8008a0a:	f003 0308 	and.w	r3, r3, #8
 8008a0e:	2b00      	cmp	r3, #0
 8008a10:	d051      	beq.n	8008ab6 <dcd_int_handler+0x272>
    dwc2->gotgint = GINTSTS_SOF;
 8008a12:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8008a14:	2208      	movs	r2, #8
 8008a16:	605a      	str	r2, [r3, #4]

    if (_sof_en) {
 8008a18:	4b46      	ldr	r3, [pc, #280]	@ (8008b34 <dcd_int_handler+0x2f0>)
 8008a1a:	781b      	ldrb	r3, [r3, #0]
 8008a1c:	2b00      	cmp	r3, #0
 8008a1e:	d024      	beq.n	8008a6a <dcd_int_handler+0x226>
      uint32_t frame = (dwc2->dsts & (DSTS_FNSOF)) >> 8;
 8008a20:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8008a22:	f8d3 3808 	ldr.w	r3, [r3, #2056]	@ 0x808
 8008a26:	0a1b      	lsrs	r3, r3, #8
 8008a28:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8008a2c:	66bb      	str	r3, [r7, #104]	@ 0x68
 8008a2e:	79fb      	ldrb	r3, [r7, #7]
 8008a30:	f887 305b 	strb.w	r3, [r7, #91]	@ 0x5b
 8008a34:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8008a36:	657b      	str	r3, [r7, #84]	@ 0x54
 8008a38:	2301      	movs	r3, #1
 8008a3a:	f887 3053 	strb.w	r3, [r7, #83]	@ 0x53

TU_ATTR_ALWAYS_INLINE static inline void dcd_event_sof(uint8_t rhport, uint32_t frame_count, bool in_isr) {
  dcd_event_t event = { .rhport = rhport, .event_id = DCD_EVENT_SOF };
 8008a3e:	f107 0308 	add.w	r3, r7, #8
 8008a42:	2200      	movs	r2, #0
 8008a44:	601a      	str	r2, [r3, #0]
 8008a46:	605a      	str	r2, [r3, #4]
 8008a48:	609a      	str	r2, [r3, #8]
 8008a4a:	f897 305b 	ldrb.w	r3, [r7, #91]	@ 0x5b
 8008a4e:	723b      	strb	r3, [r7, #8]
 8008a50:	2303      	movs	r3, #3
 8008a52:	727b      	strb	r3, [r7, #9]
  event.sof.frame_count = frame_count;
 8008a54:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8008a56:	60fb      	str	r3, [r7, #12]
  dcd_event_handler(&event, in_isr);
 8008a58:	f897 2053 	ldrb.w	r2, [r7, #83]	@ 0x53
 8008a5c:	f107 0308 	add.w	r3, r7, #8
 8008a60:	4611      	mov	r1, r2
 8008a62:	4618      	mov	r0, r3
 8008a64:	f7fd fa30 	bl	8005ec8 <dcd_event_handler>
}
 8008a68:	e005      	b.n	8008a76 <dcd_int_handler+0x232>
      dcd_event_sof(rhport, frame, true);
    } else {
      // Disable SOF interrupt if SOF was not explicitly enabled. SOF was used for remote wakeup detection
      dwc2->gintmsk &= ~GINTMSK_SOFM;
 8008a6a:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8008a6c:	699b      	ldr	r3, [r3, #24]
 8008a6e:	f023 0208 	bic.w	r2, r3, #8
 8008a72:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8008a74:	619a      	str	r2, [r3, #24]
 8008a76:	79fb      	ldrb	r3, [r7, #7]
 8008a78:	f887 3052 	strb.w	r3, [r7, #82]	@ 0x52
 8008a7c:	2303      	movs	r3, #3
 8008a7e:	f887 3051 	strb.w	r3, [r7, #81]	@ 0x51
 8008a82:	2301      	movs	r3, #1
 8008a84:	f887 3050 	strb.w	r3, [r7, #80]	@ 0x50
  dcd_event_t event = { .rhport = rhport, .event_id = eid };
 8008a88:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 8008a8c:	2200      	movs	r2, #0
 8008a8e:	601a      	str	r2, [r3, #0]
 8008a90:	605a      	str	r2, [r3, #4]
 8008a92:	609a      	str	r2, [r3, #8]
 8008a94:	f897 3052 	ldrb.w	r3, [r7, #82]	@ 0x52
 8008a98:	f887 3044 	strb.w	r3, [r7, #68]	@ 0x44
 8008a9c:	f897 3051 	ldrb.w	r3, [r7, #81]	@ 0x51
 8008aa0:	f887 3045 	strb.w	r3, [r7, #69]	@ 0x45
  dcd_event_handler(&event, in_isr);
 8008aa4:	f897 2050 	ldrb.w	r2, [r7, #80]	@ 0x50
 8008aa8:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 8008aac:	4611      	mov	r1, r2
 8008aae:	4618      	mov	r0, r3
 8008ab0:	f7fd fa0a 	bl	8005ec8 <dcd_event_handler>
}
 8008ab4:	bf00      	nop

    dcd_event_bus_signal(rhport, DCD_EVENT_SOF, true);
  }

  // RxFIFO non-empty interrupt handling.
  if (int_status & GINTSTS_RXFLVL) {
 8008ab6:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8008ab8:	f003 0310 	and.w	r3, r3, #16
 8008abc:	2b00      	cmp	r3, #0
 8008abe:	d020      	beq.n	8008b02 <dcd_int_handler+0x2be>
    // RXFLVL bit is read-only

    // Mask out RXFLVL while reading data from FIFO
    dwc2->gintmsk &= ~GINTMSK_RXFLVLM;
 8008ac0:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8008ac2:	699b      	ldr	r3, [r3, #24]
 8008ac4:	f023 0210 	bic.w	r2, r3, #16
 8008ac8:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8008aca:	619a      	str	r2, [r3, #24]

    // Loop until all available packets were handled
    do {
      handle_rxflvl_irq(rhport);
 8008acc:	79fb      	ldrb	r3, [r7, #7]
 8008ace:	4618      	mov	r0, r3
 8008ad0:	f7ff fbf8 	bl	80082c4 <handle_rxflvl_irq>
    } while (dwc2->gotgint & GINTSTS_RXFLVL);
 8008ad4:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8008ad6:	685b      	ldr	r3, [r3, #4]
 8008ad8:	f003 0310 	and.w	r3, r3, #16
 8008adc:	2b00      	cmp	r3, #0
 8008ade:	d1f5      	bne.n	8008acc <dcd_int_handler+0x288>

    // Manage RX FIFO size
    if (_out_ep_closed) {
 8008ae0:	4b15      	ldr	r3, [pc, #84]	@ (8008b38 <dcd_int_handler+0x2f4>)
 8008ae2:	781b      	ldrb	r3, [r3, #0]
 8008ae4:	2b00      	cmp	r3, #0
 8008ae6:	d006      	beq.n	8008af6 <dcd_int_handler+0x2b2>
      update_grxfsiz(rhport);
 8008ae8:	79fb      	ldrb	r3, [r7, #7]
 8008aea:	4618      	mov	r0, r3
 8008aec:	f7fe fbf2 	bl	80072d4 <update_grxfsiz>

      // Disable flag
      _out_ep_closed = false;
 8008af0:	4b11      	ldr	r3, [pc, #68]	@ (8008b38 <dcd_int_handler+0x2f4>)
 8008af2:	2200      	movs	r2, #0
 8008af4:	701a      	strb	r2, [r3, #0]
    }

    dwc2->gintmsk |= GINTMSK_RXFLVLM;
 8008af6:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8008af8:	699b      	ldr	r3, [r3, #24]
 8008afa:	f043 0210 	orr.w	r2, r3, #16
 8008afe:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8008b00:	619a      	str	r2, [r3, #24]
  }

  // OUT endpoint interrupt handling.
  if (int_status & GINTSTS_OEPINT) {
 8008b02:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8008b04:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8008b08:	2b00      	cmp	r3, #0
 8008b0a:	d003      	beq.n	8008b14 <dcd_int_handler+0x2d0>
    // OEPINT is read-only, clear using DOEPINTn
    handle_epout_irq(rhport);
 8008b0c:	79fb      	ldrb	r3, [r7, #7]
 8008b0e:	4618      	mov	r0, r3
 8008b10:	f7ff fca6 	bl	8008460 <handle_epout_irq>
  }

  // IN endpoint interrupt handling.
  if (int_status & GINTSTS_IEPINT) {
 8008b14:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8008b16:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8008b1a:	2b00      	cmp	r3, #0
 8008b1c:	d003      	beq.n	8008b26 <dcd_int_handler+0x2e2>
    // IEPINT bit read-only, clear using DIEPINTn
    handle_epin_irq(rhport);
 8008b1e:	79fb      	ldrb	r3, [r7, #7]
 8008b20:	4618      	mov	r0, r3
 8008b22:	f7ff fd6f 	bl	8008604 <handle_epin_irq>
  //  // Check for Incomplete isochronous IN transfer
  //  if(int_status & GINTSTS_IISOIXFR) {
  //    printf("      IISOIXFR!\r\n");
  ////    TU_LOG(DWC2_DEBUG, "      IISOIXFR!\r\n");
  //  }
}
 8008b26:	bf00      	nop
 8008b28:	3780      	adds	r7, #128	@ 0x80
 8008b2a:	46bd      	mov	sp, r7
 8008b2c:	bd80      	pop	{r7, pc}
 8008b2e:	bf00      	nop
 8008b30:	0801bfb8 	.word	0x0801bfb8
 8008b34:	24001fb3 	.word	0x24001fb3
 8008b38:	24001fb2 	.word	0x24001fb2

08008b3c <tu_edpt_claim>:
//--------------------------------------------------------------------+
// Endpoint Helper for both Host and Device stack
//--------------------------------------------------------------------+

bool tu_edpt_claim(tu_edpt_state_t* ep_state, osal_mutex_t mutex)
{
 8008b3c:	b480      	push	{r7}
 8008b3e:	b085      	sub	sp, #20
 8008b40:	af00      	add	r7, sp, #0
 8008b42:	6078      	str	r0, [r7, #4]
 8008b44:	6039      	str	r1, [r7, #0]
  (void) mutex;

  // pre-check to help reducing mutex lock
  TU_VERIFY((ep_state->busy == 0) && (ep_state->claimed == 0));
 8008b46:	687b      	ldr	r3, [r7, #4]
 8008b48:	781b      	ldrb	r3, [r3, #0]
 8008b4a:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8008b4e:	b2db      	uxtb	r3, r3
 8008b50:	2b00      	cmp	r3, #0
 8008b52:	d106      	bne.n	8008b62 <tu_edpt_claim+0x26>
 8008b54:	687b      	ldr	r3, [r7, #4]
 8008b56:	781b      	ldrb	r3, [r3, #0]
 8008b58:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8008b5c:	b2db      	uxtb	r3, r3
 8008b5e:	2b00      	cmp	r3, #0
 8008b60:	d001      	beq.n	8008b66 <tu_edpt_claim+0x2a>
 8008b62:	2300      	movs	r3, #0
 8008b64:	e01e      	b.n	8008ba4 <tu_edpt_claim+0x68>
  (void) osal_mutex_lock(mutex, OSAL_TIMEOUT_WAIT_FOREVER);

  // can only claim the endpoint if it is not busy and not claimed yet.
  bool const available = (ep_state->busy == 0) && (ep_state->claimed == 0);
 8008b66:	687b      	ldr	r3, [r7, #4]
 8008b68:	781b      	ldrb	r3, [r3, #0]
 8008b6a:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8008b6e:	b2db      	uxtb	r3, r3
 8008b70:	2b00      	cmp	r3, #0
 8008b72:	d108      	bne.n	8008b86 <tu_edpt_claim+0x4a>
 8008b74:	687b      	ldr	r3, [r7, #4]
 8008b76:	781b      	ldrb	r3, [r3, #0]
 8008b78:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8008b7c:	b2db      	uxtb	r3, r3
 8008b7e:	2b00      	cmp	r3, #0
 8008b80:	d101      	bne.n	8008b86 <tu_edpt_claim+0x4a>
 8008b82:	2301      	movs	r3, #1
 8008b84:	e000      	b.n	8008b88 <tu_edpt_claim+0x4c>
 8008b86:	2300      	movs	r3, #0
 8008b88:	73fb      	strb	r3, [r7, #15]
 8008b8a:	7bfb      	ldrb	r3, [r7, #15]
 8008b8c:	f003 0301 	and.w	r3, r3, #1
 8008b90:	73fb      	strb	r3, [r7, #15]
  if (available)
 8008b92:	7bfb      	ldrb	r3, [r7, #15]
 8008b94:	2b00      	cmp	r3, #0
 8008b96:	d004      	beq.n	8008ba2 <tu_edpt_claim+0x66>
  {
    ep_state->claimed = 1;
 8008b98:	687a      	ldr	r2, [r7, #4]
 8008b9a:	7813      	ldrb	r3, [r2, #0]
 8008b9c:	f043 0304 	orr.w	r3, r3, #4
 8008ba0:	7013      	strb	r3, [r2, #0]
  }

  (void) osal_mutex_unlock(mutex);

  return available;
 8008ba2:	7bfb      	ldrb	r3, [r7, #15]
}
 8008ba4:	4618      	mov	r0, r3
 8008ba6:	3714      	adds	r7, #20
 8008ba8:	46bd      	mov	sp, r7
 8008baa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bae:	4770      	bx	lr

08008bb0 <tu_edpt_release>:

bool tu_edpt_release(tu_edpt_state_t* ep_state, osal_mutex_t mutex)
{
 8008bb0:	b480      	push	{r7}
 8008bb2:	b085      	sub	sp, #20
 8008bb4:	af00      	add	r7, sp, #0
 8008bb6:	6078      	str	r0, [r7, #4]
 8008bb8:	6039      	str	r1, [r7, #0]
  (void) mutex;

  (void) osal_mutex_lock(mutex, OSAL_TIMEOUT_WAIT_FOREVER);

  // can only release the endpoint if it is claimed and not busy
  bool const ret = (ep_state->claimed == 1) && (ep_state->busy == 0);
 8008bba:	687b      	ldr	r3, [r7, #4]
 8008bbc:	781b      	ldrb	r3, [r3, #0]
 8008bbe:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8008bc2:	b2db      	uxtb	r3, r3
 8008bc4:	2b01      	cmp	r3, #1
 8008bc6:	d108      	bne.n	8008bda <tu_edpt_release+0x2a>
 8008bc8:	687b      	ldr	r3, [r7, #4]
 8008bca:	781b      	ldrb	r3, [r3, #0]
 8008bcc:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8008bd0:	b2db      	uxtb	r3, r3
 8008bd2:	2b00      	cmp	r3, #0
 8008bd4:	d101      	bne.n	8008bda <tu_edpt_release+0x2a>
 8008bd6:	2301      	movs	r3, #1
 8008bd8:	e000      	b.n	8008bdc <tu_edpt_release+0x2c>
 8008bda:	2300      	movs	r3, #0
 8008bdc:	73fb      	strb	r3, [r7, #15]
 8008bde:	7bfb      	ldrb	r3, [r7, #15]
 8008be0:	f003 0301 	and.w	r3, r3, #1
 8008be4:	73fb      	strb	r3, [r7, #15]
  if (ret)
 8008be6:	7bfb      	ldrb	r3, [r7, #15]
 8008be8:	2b00      	cmp	r3, #0
 8008bea:	d004      	beq.n	8008bf6 <tu_edpt_release+0x46>
  {
    ep_state->claimed = 0;
 8008bec:	687a      	ldr	r2, [r7, #4]
 8008bee:	7813      	ldrb	r3, [r2, #0]
 8008bf0:	f36f 0382 	bfc	r3, #2, #1
 8008bf4:	7013      	strb	r3, [r2, #0]
  }

  (void) osal_mutex_unlock(mutex);

  return ret;
 8008bf6:	7bfb      	ldrb	r3, [r7, #15]
}
 8008bf8:	4618      	mov	r0, r3
 8008bfa:	3714      	adds	r7, #20
 8008bfc:	46bd      	mov	sp, r7
 8008bfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c02:	4770      	bx	lr

08008c04 <tu_edpt_validate>:

bool tu_edpt_validate(tusb_desc_endpoint_t const * desc_ep, tusb_speed_t speed)
{
 8008c04:	b480      	push	{r7}
 8008c06:	b08b      	sub	sp, #44	@ 0x2c
 8008c08:	af00      	add	r7, sp, #0
 8008c0a:	6078      	str	r0, [r7, #4]
 8008c0c:	460b      	mov	r3, r1
 8008c0e:	70fb      	strb	r3, [r7, #3]
 8008c10:	687b      	ldr	r3, [r7, #4]
 8008c12:	60fb      	str	r3, [r7, #12]
  return tu_le16toh(desc_ep->wMaxPacketSize) & TU_GENMASK(10, 0);
 8008c14:	68fb      	ldr	r3, [r7, #12]
 8008c16:	889b      	ldrh	r3, [r3, #4]
 8008c18:	b29b      	uxth	r3, r3
 8008c1a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8008c1e:	b29b      	uxth	r3, r3
  uint16_t const max_packet_size = tu_edpt_packet_size(desc_ep);
 8008c20:	84fb      	strh	r3, [r7, #38]	@ 0x26
  TU_LOG2("  Open EP %02X with Size = %u\r\n", desc_ep->bEndpointAddress, max_packet_size);

  switch (desc_ep->bmAttributes.xfer)
 8008c22:	687b      	ldr	r3, [r7, #4]
 8008c24:	78db      	ldrb	r3, [r3, #3]
 8008c26:	f3c3 0301 	ubfx	r3, r3, #0, #2
 8008c2a:	b2db      	uxtb	r3, r3
 8008c2c:	2b03      	cmp	r3, #3
 8008c2e:	d03e      	beq.n	8008cae <tu_edpt_validate+0xaa>
 8008c30:	2b03      	cmp	r3, #3
 8008c32:	dc53      	bgt.n	8008cdc <tu_edpt_validate+0xd8>
 8008c34:	2b01      	cmp	r3, #1
 8008c36:	d002      	beq.n	8008c3e <tu_edpt_validate+0x3a>
 8008c38:	2b02      	cmp	r3, #2
 8008c3a:	d018      	beq.n	8008c6e <tu_edpt_validate+0x6a>
 8008c3c:	e04e      	b.n	8008cdc <tu_edpt_validate+0xd8>
  {
    case TUSB_XFER_ISOCHRONOUS:
    {
      uint16_t const spec_size = (speed == TUSB_SPEED_HIGH ? 1024 : 1023);
 8008c3e:	78fb      	ldrb	r3, [r7, #3]
 8008c40:	2b02      	cmp	r3, #2
 8008c42:	d102      	bne.n	8008c4a <tu_edpt_validate+0x46>
 8008c44:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8008c48:	e001      	b.n	8008c4e <tu_edpt_validate+0x4a>
 8008c4a:	f240 33ff 	movw	r3, #1023	@ 0x3ff
 8008c4e:	82fb      	strh	r3, [r7, #22]
      TU_ASSERT(max_packet_size <= spec_size);
 8008c50:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 8008c52:	8afb      	ldrh	r3, [r7, #22]
 8008c54:	429a      	cmp	r2, r3
 8008c56:	d943      	bls.n	8008ce0 <tu_edpt_validate+0xdc>
 8008c58:	4b27      	ldr	r3, [pc, #156]	@ (8008cf8 <tu_edpt_validate+0xf4>)
 8008c5a:	613b      	str	r3, [r7, #16]
 8008c5c:	693b      	ldr	r3, [r7, #16]
 8008c5e:	681b      	ldr	r3, [r3, #0]
 8008c60:	f003 0301 	and.w	r3, r3, #1
 8008c64:	2b00      	cmp	r3, #0
 8008c66:	d000      	beq.n	8008c6a <tu_edpt_validate+0x66>
 8008c68:	be00      	bkpt	0x0000
 8008c6a:	2300      	movs	r3, #0
 8008c6c:	e03e      	b.n	8008cec <tu_edpt_validate+0xe8>
    }
    break;

    case TUSB_XFER_BULK:
      if (speed == TUSB_SPEED_HIGH)
 8008c6e:	78fb      	ldrb	r3, [r7, #3]
 8008c70:	2b02      	cmp	r3, #2
 8008c72:	d10e      	bne.n	8008c92 <tu_edpt_validate+0x8e>
      {
        // Bulk highspeed must be EXACTLY 512
        TU_ASSERT(max_packet_size == 512);
 8008c74:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8008c76:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008c7a:	d033      	beq.n	8008ce4 <tu_edpt_validate+0xe0>
 8008c7c:	4b1e      	ldr	r3, [pc, #120]	@ (8008cf8 <tu_edpt_validate+0xf4>)
 8008c7e:	61bb      	str	r3, [r7, #24]
 8008c80:	69bb      	ldr	r3, [r7, #24]
 8008c82:	681b      	ldr	r3, [r3, #0]
 8008c84:	f003 0301 	and.w	r3, r3, #1
 8008c88:	2b00      	cmp	r3, #0
 8008c8a:	d000      	beq.n	8008c8e <tu_edpt_validate+0x8a>
 8008c8c:	be00      	bkpt	0x0000
 8008c8e:	2300      	movs	r3, #0
 8008c90:	e02c      	b.n	8008cec <tu_edpt_validate+0xe8>
      }else
      {
        // TODO Bulk fullspeed can only be 8, 16, 32, 64
        TU_ASSERT(max_packet_size <= 64);
 8008c92:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8008c94:	2b40      	cmp	r3, #64	@ 0x40
 8008c96:	d925      	bls.n	8008ce4 <tu_edpt_validate+0xe0>
 8008c98:	4b17      	ldr	r3, [pc, #92]	@ (8008cf8 <tu_edpt_validate+0xf4>)
 8008c9a:	61fb      	str	r3, [r7, #28]
 8008c9c:	69fb      	ldr	r3, [r7, #28]
 8008c9e:	681b      	ldr	r3, [r3, #0]
 8008ca0:	f003 0301 	and.w	r3, r3, #1
 8008ca4:	2b00      	cmp	r3, #0
 8008ca6:	d000      	beq.n	8008caa <tu_edpt_validate+0xa6>
 8008ca8:	be00      	bkpt	0x0000
 8008caa:	2300      	movs	r3, #0
 8008cac:	e01e      	b.n	8008cec <tu_edpt_validate+0xe8>
      }
    break;

    case TUSB_XFER_INTERRUPT:
    {
      uint16_t const spec_size = (speed == TUSB_SPEED_HIGH ? 1024 : 64);
 8008cae:	78fb      	ldrb	r3, [r7, #3]
 8008cb0:	2b02      	cmp	r3, #2
 8008cb2:	d102      	bne.n	8008cba <tu_edpt_validate+0xb6>
 8008cb4:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8008cb8:	e000      	b.n	8008cbc <tu_edpt_validate+0xb8>
 8008cba:	2340      	movs	r3, #64	@ 0x40
 8008cbc:	84bb      	strh	r3, [r7, #36]	@ 0x24
      TU_ASSERT(max_packet_size <= spec_size);
 8008cbe:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 8008cc0:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8008cc2:	429a      	cmp	r2, r3
 8008cc4:	d910      	bls.n	8008ce8 <tu_edpt_validate+0xe4>
 8008cc6:	4b0c      	ldr	r3, [pc, #48]	@ (8008cf8 <tu_edpt_validate+0xf4>)
 8008cc8:	623b      	str	r3, [r7, #32]
 8008cca:	6a3b      	ldr	r3, [r7, #32]
 8008ccc:	681b      	ldr	r3, [r3, #0]
 8008cce:	f003 0301 	and.w	r3, r3, #1
 8008cd2:	2b00      	cmp	r3, #0
 8008cd4:	d000      	beq.n	8008cd8 <tu_edpt_validate+0xd4>
 8008cd6:	be00      	bkpt	0x0000
 8008cd8:	2300      	movs	r3, #0
 8008cda:	e007      	b.n	8008cec <tu_edpt_validate+0xe8>
    }
    break;

    default: return false;
 8008cdc:	2300      	movs	r3, #0
 8008cde:	e005      	b.n	8008cec <tu_edpt_validate+0xe8>
    break;
 8008ce0:	bf00      	nop
 8008ce2:	e002      	b.n	8008cea <tu_edpt_validate+0xe6>
    break;
 8008ce4:	bf00      	nop
 8008ce6:	e000      	b.n	8008cea <tu_edpt_validate+0xe6>
    break;
 8008ce8:	bf00      	nop
  }

  return true;
 8008cea:	2301      	movs	r3, #1
}
 8008cec:	4618      	mov	r0, r3
 8008cee:	372c      	adds	r7, #44	@ 0x2c
 8008cf0:	46bd      	mov	sp, r7
 8008cf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cf6:	4770      	bx	lr
 8008cf8:	e000edf0 	.word	0xe000edf0

08008cfc <tu_edpt_bind_driver>:

void tu_edpt_bind_driver(uint8_t ep2drv[][2], tusb_desc_interface_t const* desc_itf, uint16_t desc_len, uint8_t driver_id)
{
 8008cfc:	b480      	push	{r7}
 8008cfe:	b08d      	sub	sp, #52	@ 0x34
 8008d00:	af00      	add	r7, sp, #0
 8008d02:	60f8      	str	r0, [r7, #12]
 8008d04:	60b9      	str	r1, [r7, #8]
 8008d06:	4611      	mov	r1, r2
 8008d08:	461a      	mov	r2, r3
 8008d0a:	460b      	mov	r3, r1
 8008d0c:	80fb      	strh	r3, [r7, #6]
 8008d0e:	4613      	mov	r3, r2
 8008d10:	717b      	strb	r3, [r7, #5]
  uint8_t const* p_desc = (uint8_t const*) desc_itf;
 8008d12:	68bb      	ldr	r3, [r7, #8]
 8008d14:	62fb      	str	r3, [r7, #44]	@ 0x2c
  uint8_t const* desc_end = p_desc + desc_len;
 8008d16:	88fb      	ldrh	r3, [r7, #6]
 8008d18:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8008d1a:	4413      	add	r3, r2
 8008d1c:	62bb      	str	r3, [r7, #40]	@ 0x28

  while( p_desc < desc_end )
 8008d1e:	e027      	b.n	8008d70 <tu_edpt_bind_driver+0x74>
 8008d20:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008d22:	623b      	str	r3, [r7, #32]
  return ((uint8_t const*) desc)[DESC_OFFSET_TYPE];
 8008d24:	6a3b      	ldr	r3, [r7, #32]
 8008d26:	3301      	adds	r3, #1
 8008d28:	781b      	ldrb	r3, [r3, #0]
  {
    if ( TUSB_DESC_ENDPOINT == tu_desc_type(p_desc) )
 8008d2a:	2b05      	cmp	r3, #5
 8008d2c:	d116      	bne.n	8008d5c <tu_edpt_bind_driver+0x60>
    {
      uint8_t const ep_addr = ((tusb_desc_endpoint_t const*) p_desc)->bEndpointAddress;
 8008d2e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008d30:	789b      	ldrb	r3, [r3, #2]
 8008d32:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8008d36:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8008d3a:	77bb      	strb	r3, [r7, #30]
  return (uint8_t)(addr & (~TUSB_DIR_IN_MASK));
 8008d3c:	7fbb      	ldrb	r3, [r7, #30]
 8008d3e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008d42:	b2db      	uxtb	r3, r3

      TU_LOG(2, "  Bind EP %02x to driver id %u\r\n", ep_addr, driver_id);
      ep2drv[tu_edpt_number(ep_addr)][tu_edpt_dir(ep_addr)] = driver_id;
 8008d44:	005b      	lsls	r3, r3, #1
 8008d46:	68fa      	ldr	r2, [r7, #12]
 8008d48:	4413      	add	r3, r2
 8008d4a:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 8008d4e:	77fa      	strb	r2, [r7, #31]
  return (addr & TUSB_DIR_IN_MASK) ? TUSB_DIR_IN : TUSB_DIR_OUT;
 8008d50:	7ffa      	ldrb	r2, [r7, #31]
 8008d52:	09d2      	lsrs	r2, r2, #7
 8008d54:	b2d2      	uxtb	r2, r2
 8008d56:	4611      	mov	r1, r2
 8008d58:	797a      	ldrb	r2, [r7, #5]
 8008d5a:	545a      	strb	r2, [r3, r1]
 8008d5c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008d5e:	61bb      	str	r3, [r7, #24]
  uint8_t const* desc8 = (uint8_t const*) desc;
 8008d60:	69bb      	ldr	r3, [r7, #24]
 8008d62:	617b      	str	r3, [r7, #20]
  return desc8 + desc8[DESC_OFFSET_LEN];
 8008d64:	697b      	ldr	r3, [r7, #20]
 8008d66:	781b      	ldrb	r3, [r3, #0]
 8008d68:	461a      	mov	r2, r3
 8008d6a:	697b      	ldr	r3, [r7, #20]
 8008d6c:	4413      	add	r3, r2
    }

    p_desc = tu_desc_next(p_desc);
 8008d6e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  while( p_desc < desc_end )
 8008d70:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8008d72:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008d74:	429a      	cmp	r2, r3
 8008d76:	d3d3      	bcc.n	8008d20 <tu_edpt_bind_driver+0x24>
  }
}
 8008d78:	bf00      	nop
 8008d7a:	bf00      	nop
 8008d7c:	3734      	adds	r7, #52	@ 0x34
 8008d7e:	46bd      	mov	sp, r7
 8008d80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d84:	4770      	bx	lr

08008d86 <mg_dns_free>:
 8008d86:	b580      	push	{r7, lr}
 8008d88:	b084      	sub	sp, #16
 8008d8a:	af00      	add	r7, sp, #0
 8008d8c:	6078      	str	r0, [r7, #4]
 8008d8e:	6039      	str	r1, [r7, #0]
 8008d90:	687b      	ldr	r3, [r7, #4]
 8008d92:	60fb      	str	r3, [r7, #12]
 8008d94:	e002      	b.n	8008d9c <mg_dns_free+0x16>
 8008d96:	68fb      	ldr	r3, [r7, #12]
 8008d98:	681b      	ldr	r3, [r3, #0]
 8008d9a:	60fb      	str	r3, [r7, #12]
 8008d9c:	68fb      	ldr	r3, [r7, #12]
 8008d9e:	681b      	ldr	r3, [r3, #0]
 8008da0:	683a      	ldr	r2, [r7, #0]
 8008da2:	429a      	cmp	r2, r3
 8008da4:	d1f7      	bne.n	8008d96 <mg_dns_free+0x10>
 8008da6:	683b      	ldr	r3, [r7, #0]
 8008da8:	681a      	ldr	r2, [r3, #0]
 8008daa:	68fb      	ldr	r3, [r7, #12]
 8008dac:	601a      	str	r2, [r3, #0]
 8008dae:	6838      	ldr	r0, [r7, #0]
 8008db0:	f010 fa1a 	bl	80191e8 <free>
 8008db4:	bf00      	nop
 8008db6:	3710      	adds	r7, #16
 8008db8:	46bd      	mov	sp, r7
 8008dba:	bd80      	pop	{r7, pc}

08008dbc <mg_resolve_cancel>:
 8008dbc:	b580      	push	{r7, lr}
 8008dbe:	b086      	sub	sp, #24
 8008dc0:	af00      	add	r7, sp, #0
 8008dc2:	6078      	str	r0, [r7, #4]
 8008dc4:	687b      	ldr	r3, [r7, #4]
 8008dc6:	685b      	ldr	r3, [r3, #4]
 8008dc8:	3330      	adds	r3, #48	@ 0x30
 8008dca:	613b      	str	r3, [r7, #16]
 8008dcc:	693b      	ldr	r3, [r7, #16]
 8008dce:	681b      	ldr	r3, [r3, #0]
 8008dd0:	617b      	str	r3, [r7, #20]
 8008dd2:	e00d      	b.n	8008df0 <mg_resolve_cancel+0x34>
 8008dd4:	697b      	ldr	r3, [r7, #20]
 8008dd6:	681b      	ldr	r3, [r3, #0]
 8008dd8:	60fb      	str	r3, [r7, #12]
 8008dda:	697b      	ldr	r3, [r7, #20]
 8008ddc:	685b      	ldr	r3, [r3, #4]
 8008dde:	687a      	ldr	r2, [r7, #4]
 8008de0:	429a      	cmp	r2, r3
 8008de2:	d103      	bne.n	8008dec <mg_resolve_cancel+0x30>
 8008de4:	6979      	ldr	r1, [r7, #20]
 8008de6:	6938      	ldr	r0, [r7, #16]
 8008de8:	f7ff ffcd 	bl	8008d86 <mg_dns_free>
 8008dec:	68fb      	ldr	r3, [r7, #12]
 8008dee:	617b      	str	r3, [r7, #20]
 8008df0:	697b      	ldr	r3, [r7, #20]
 8008df2:	2b00      	cmp	r3, #0
 8008df4:	d1ee      	bne.n	8008dd4 <mg_resolve_cancel+0x18>
 8008df6:	bf00      	nop
 8008df8:	bf00      	nop
 8008dfa:	3718      	adds	r7, #24
 8008dfc:	46bd      	mov	sp, r7
 8008dfe:	bd80      	pop	{r7, pc}

08008e00 <mg_call>:
 8008e00:	b580      	push	{r7, lr}
 8008e02:	b084      	sub	sp, #16
 8008e04:	af00      	add	r7, sp, #0
 8008e06:	60f8      	str	r0, [r7, #12]
 8008e08:	60b9      	str	r1, [r7, #8]
 8008e0a:	607a      	str	r2, [r7, #4]
 8008e0c:	68fb      	ldr	r3, [r7, #12]
 8008e0e:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8008e10:	2b00      	cmp	r3, #0
 8008e12:	d005      	beq.n	8008e20 <mg_call+0x20>
 8008e14:	68fb      	ldr	r3, [r7, #12]
 8008e16:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8008e18:	687a      	ldr	r2, [r7, #4]
 8008e1a:	68b9      	ldr	r1, [r7, #8]
 8008e1c:	68f8      	ldr	r0, [r7, #12]
 8008e1e:	4798      	blx	r3
 8008e20:	68fb      	ldr	r3, [r7, #12]
 8008e22:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008e26:	2b00      	cmp	r3, #0
 8008e28:	d006      	beq.n	8008e38 <mg_call+0x38>
 8008e2a:	68fb      	ldr	r3, [r7, #12]
 8008e2c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008e30:	687a      	ldr	r2, [r7, #4]
 8008e32:	68b9      	ldr	r1, [r7, #8]
 8008e34:	68f8      	ldr	r0, [r7, #12]
 8008e36:	4798      	blx	r3
 8008e38:	bf00      	nop
 8008e3a:	3710      	adds	r7, #16
 8008e3c:	46bd      	mov	sp, r7
 8008e3e:	bd80      	pop	{r7, pc}

08008e40 <mg_error>:
 8008e40:	b40e      	push	{r1, r2, r3}
 8008e42:	b580      	push	{r7, lr}
 8008e44:	b095      	sub	sp, #84	@ 0x54
 8008e46:	af00      	add	r7, sp, #0
 8008e48:	6078      	str	r0, [r7, #4]
 8008e4a:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 8008e4e:	60fb      	str	r3, [r7, #12]
 8008e50:	f107 030c 	add.w	r3, r7, #12
 8008e54:	f107 0010 	add.w	r0, r7, #16
 8008e58:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8008e5a:	2140      	movs	r1, #64	@ 0x40
 8008e5c:	f006 fd8c 	bl	800f978 <mg_vsnprintf>
 8008e60:	4b13      	ldr	r3, [pc, #76]	@ (8008eb0 <mg_error+0x70>)
 8008e62:	681b      	ldr	r3, [r3, #0]
 8008e64:	2b00      	cmp	r3, #0
 8008e66:	dd0e      	ble.n	8008e86 <mg_error+0x46>
 8008e68:	4b12      	ldr	r3, [pc, #72]	@ (8008eb4 <mg_error+0x74>)
 8008e6a:	2221      	movs	r2, #33	@ 0x21
 8008e6c:	4912      	ldr	r1, [pc, #72]	@ (8008eb8 <mg_error+0x78>)
 8008e6e:	2001      	movs	r0, #1
 8008e70:	f003 fb1c 	bl	800c4ac <mg_log_prefix>
 8008e74:	687b      	ldr	r3, [r7, #4]
 8008e76:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8008e78:	687b      	ldr	r3, [r7, #4]
 8008e7a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8008e7c:	f107 0310 	add.w	r3, r7, #16
 8008e80:	480e      	ldr	r0, [pc, #56]	@ (8008ebc <mg_error+0x7c>)
 8008e82:	f003 fb63 	bl	800c54c <mg_log>
 8008e86:	687a      	ldr	r2, [r7, #4]
 8008e88:	f892 30ad 	ldrb.w	r3, [r2, #173]	@ 0xad
 8008e8c:	f043 0320 	orr.w	r3, r3, #32
 8008e90:	f882 30ad 	strb.w	r3, [r2, #173]	@ 0xad
 8008e94:	f107 0310 	add.w	r3, r7, #16
 8008e98:	461a      	mov	r2, r3
 8008e9a:	2100      	movs	r1, #0
 8008e9c:	6878      	ldr	r0, [r7, #4]
 8008e9e:	f7ff ffaf 	bl	8008e00 <mg_call>
 8008ea2:	bf00      	nop
 8008ea4:	3754      	adds	r7, #84	@ 0x54
 8008ea6:	46bd      	mov	sp, r7
 8008ea8:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8008eac:	b003      	add	sp, #12
 8008eae:	4770      	bx	lr
 8008eb0:	24000048 	.word	0x24000048
 8008eb4:	0801bfe0 	.word	0x0801bfe0
 8008eb8:	0801a5e8 	.word	0x0801a5e8
 8008ebc:	0801a5f4 	.word	0x0801a5f4

08008ec0 <is_digit>:
 8008ec0:	b480      	push	{r7}
 8008ec2:	b083      	sub	sp, #12
 8008ec4:	af00      	add	r7, sp, #0
 8008ec6:	6078      	str	r0, [r7, #4]
 8008ec8:	687b      	ldr	r3, [r7, #4]
 8008eca:	2b2f      	cmp	r3, #47	@ 0x2f
 8008ecc:	dd04      	ble.n	8008ed8 <is_digit+0x18>
 8008ece:	687b      	ldr	r3, [r7, #4]
 8008ed0:	2b39      	cmp	r3, #57	@ 0x39
 8008ed2:	dc01      	bgt.n	8008ed8 <is_digit+0x18>
 8008ed4:	2301      	movs	r3, #1
 8008ed6:	e000      	b.n	8008eda <is_digit+0x1a>
 8008ed8:	2300      	movs	r3, #0
 8008eda:	f003 0301 	and.w	r3, r3, #1
 8008ede:	b2db      	uxtb	r3, r3
 8008ee0:	4618      	mov	r0, r3
 8008ee2:	370c      	adds	r7, #12
 8008ee4:	46bd      	mov	sp, r7
 8008ee6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008eea:	4770      	bx	lr

08008eec <addexp>:
 8008eec:	b480      	push	{r7}
 8008eee:	b087      	sub	sp, #28
 8008ef0:	af00      	add	r7, sp, #0
 8008ef2:	60f8      	str	r0, [r7, #12]
 8008ef4:	60b9      	str	r1, [r7, #8]
 8008ef6:	607a      	str	r2, [r7, #4]
 8008ef8:	2300      	movs	r3, #0
 8008efa:	617b      	str	r3, [r7, #20]
 8008efc:	697b      	ldr	r3, [r7, #20]
 8008efe:	1c5a      	adds	r2, r3, #1
 8008f00:	617a      	str	r2, [r7, #20]
 8008f02:	461a      	mov	r2, r3
 8008f04:	68fb      	ldr	r3, [r7, #12]
 8008f06:	4413      	add	r3, r2
 8008f08:	2265      	movs	r2, #101	@ 0x65
 8008f0a:	701a      	strb	r2, [r3, #0]
 8008f0c:	697b      	ldr	r3, [r7, #20]
 8008f0e:	1c5a      	adds	r2, r3, #1
 8008f10:	617a      	str	r2, [r7, #20]
 8008f12:	461a      	mov	r2, r3
 8008f14:	68fb      	ldr	r3, [r7, #12]
 8008f16:	4413      	add	r3, r2
 8008f18:	687a      	ldr	r2, [r7, #4]
 8008f1a:	b2d2      	uxtb	r2, r2
 8008f1c:	701a      	strb	r2, [r3, #0]
 8008f1e:	68bb      	ldr	r3, [r7, #8]
 8008f20:	f5b3 7fc8 	cmp.w	r3, #400	@ 0x190
 8008f24:	dd01      	ble.n	8008f2a <addexp+0x3e>
 8008f26:	2300      	movs	r3, #0
 8008f28:	e057      	b.n	8008fda <addexp+0xee>
 8008f2a:	68bb      	ldr	r3, [r7, #8]
 8008f2c:	2b09      	cmp	r3, #9
 8008f2e:	dc07      	bgt.n	8008f40 <addexp+0x54>
 8008f30:	697b      	ldr	r3, [r7, #20]
 8008f32:	1c5a      	adds	r2, r3, #1
 8008f34:	617a      	str	r2, [r7, #20]
 8008f36:	461a      	mov	r2, r3
 8008f38:	68fb      	ldr	r3, [r7, #12]
 8008f3a:	4413      	add	r3, r2
 8008f3c:	2230      	movs	r2, #48	@ 0x30
 8008f3e:	701a      	strb	r2, [r3, #0]
 8008f40:	68bb      	ldr	r3, [r7, #8]
 8008f42:	2b63      	cmp	r3, #99	@ 0x63
 8008f44:	dd1c      	ble.n	8008f80 <addexp+0x94>
 8008f46:	68bb      	ldr	r3, [r7, #8]
 8008f48:	4a27      	ldr	r2, [pc, #156]	@ (8008fe8 <addexp+0xfc>)
 8008f4a:	fb82 1203 	smull	r1, r2, r2, r3
 8008f4e:	1152      	asrs	r2, r2, #5
 8008f50:	17db      	asrs	r3, r3, #31
 8008f52:	1ad3      	subs	r3, r2, r3
 8008f54:	b2da      	uxtb	r2, r3
 8008f56:	697b      	ldr	r3, [r7, #20]
 8008f58:	1c59      	adds	r1, r3, #1
 8008f5a:	6179      	str	r1, [r7, #20]
 8008f5c:	4619      	mov	r1, r3
 8008f5e:	68fb      	ldr	r3, [r7, #12]
 8008f60:	440b      	add	r3, r1
 8008f62:	3230      	adds	r2, #48	@ 0x30
 8008f64:	b2d2      	uxtb	r2, r2
 8008f66:	701a      	strb	r2, [r3, #0]
 8008f68:	68bb      	ldr	r3, [r7, #8]
 8008f6a:	4a1f      	ldr	r2, [pc, #124]	@ (8008fe8 <addexp+0xfc>)
 8008f6c:	fb82 1203 	smull	r1, r2, r2, r3
 8008f70:	1151      	asrs	r1, r2, #5
 8008f72:	17da      	asrs	r2, r3, #31
 8008f74:	1a8a      	subs	r2, r1, r2
 8008f76:	2164      	movs	r1, #100	@ 0x64
 8008f78:	fb01 f202 	mul.w	r2, r1, r2
 8008f7c:	1a9b      	subs	r3, r3, r2
 8008f7e:	60bb      	str	r3, [r7, #8]
 8008f80:	68bb      	ldr	r3, [r7, #8]
 8008f82:	2b09      	cmp	r3, #9
 8008f84:	dd1d      	ble.n	8008fc2 <addexp+0xd6>
 8008f86:	68bb      	ldr	r3, [r7, #8]
 8008f88:	4a18      	ldr	r2, [pc, #96]	@ (8008fec <addexp+0x100>)
 8008f8a:	fb82 1203 	smull	r1, r2, r2, r3
 8008f8e:	1092      	asrs	r2, r2, #2
 8008f90:	17db      	asrs	r3, r3, #31
 8008f92:	1ad3      	subs	r3, r2, r3
 8008f94:	b2da      	uxtb	r2, r3
 8008f96:	697b      	ldr	r3, [r7, #20]
 8008f98:	1c59      	adds	r1, r3, #1
 8008f9a:	6179      	str	r1, [r7, #20]
 8008f9c:	4619      	mov	r1, r3
 8008f9e:	68fb      	ldr	r3, [r7, #12]
 8008fa0:	440b      	add	r3, r1
 8008fa2:	3230      	adds	r2, #48	@ 0x30
 8008fa4:	b2d2      	uxtb	r2, r2
 8008fa6:	701a      	strb	r2, [r3, #0]
 8008fa8:	68ba      	ldr	r2, [r7, #8]
 8008faa:	4b10      	ldr	r3, [pc, #64]	@ (8008fec <addexp+0x100>)
 8008fac:	fb83 1302 	smull	r1, r3, r3, r2
 8008fb0:	1099      	asrs	r1, r3, #2
 8008fb2:	17d3      	asrs	r3, r2, #31
 8008fb4:	1ac9      	subs	r1, r1, r3
 8008fb6:	460b      	mov	r3, r1
 8008fb8:	009b      	lsls	r3, r3, #2
 8008fba:	440b      	add	r3, r1
 8008fbc:	005b      	lsls	r3, r3, #1
 8008fbe:	1ad3      	subs	r3, r2, r3
 8008fc0:	60bb      	str	r3, [r7, #8]
 8008fc2:	68bb      	ldr	r3, [r7, #8]
 8008fc4:	b2da      	uxtb	r2, r3
 8008fc6:	697b      	ldr	r3, [r7, #20]
 8008fc8:	1c59      	adds	r1, r3, #1
 8008fca:	6179      	str	r1, [r7, #20]
 8008fcc:	4619      	mov	r1, r3
 8008fce:	68fb      	ldr	r3, [r7, #12]
 8008fd0:	440b      	add	r3, r1
 8008fd2:	3230      	adds	r2, #48	@ 0x30
 8008fd4:	b2d2      	uxtb	r2, r2
 8008fd6:	701a      	strb	r2, [r3, #0]
 8008fd8:	697b      	ldr	r3, [r7, #20]
 8008fda:	4618      	mov	r0, r3
 8008fdc:	371c      	adds	r7, #28
 8008fde:	46bd      	mov	sp, r7
 8008fe0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fe4:	4770      	bx	lr
 8008fe6:	bf00      	nop
 8008fe8:	51eb851f 	.word	0x51eb851f
 8008fec:	66666667 	.word	0x66666667

08008ff0 <xisinf>:
 8008ff0:	b480      	push	{r7}
 8008ff2:	b085      	sub	sp, #20
 8008ff4:	af00      	add	r7, sp, #0
 8008ff6:	ed87 0b00 	vstr	d0, [r7]
 8008ffa:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008ffe:	e9c7 2302 	strd	r2, r3, [r7, #8]
 8009002:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8009006:	f04f 0200 	mov.w	r2, #0
 800900a:	f04f 0300 	mov.w	r3, #0
 800900e:	000a      	movs	r2, r1
 8009010:	2300      	movs	r3, #0
 8009012:	4613      	mov	r3, r2
 8009014:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8009018:	4a08      	ldr	r2, [pc, #32]	@ (800903c <xisinf+0x4c>)
 800901a:	4293      	cmp	r3, r2
 800901c:	d106      	bne.n	800902c <xisinf+0x3c>
 800901e:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8009022:	4613      	mov	r3, r2
 8009024:	2b00      	cmp	r3, #0
 8009026:	d101      	bne.n	800902c <xisinf+0x3c>
 8009028:	2301      	movs	r3, #1
 800902a:	e000      	b.n	800902e <xisinf+0x3e>
 800902c:	2300      	movs	r3, #0
 800902e:	4618      	mov	r0, r3
 8009030:	3714      	adds	r7, #20
 8009032:	46bd      	mov	sp, r7
 8009034:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009038:	4770      	bx	lr
 800903a:	bf00      	nop
 800903c:	7ff00000 	.word	0x7ff00000

08009040 <xisnan>:
 8009040:	b480      	push	{r7}
 8009042:	b085      	sub	sp, #20
 8009044:	af00      	add	r7, sp, #0
 8009046:	ed87 0b00 	vstr	d0, [r7]
 800904a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800904e:	e9c7 2302 	strd	r2, r3, [r7, #8]
 8009052:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8009056:	f04f 0200 	mov.w	r2, #0
 800905a:	f04f 0300 	mov.w	r3, #0
 800905e:	000a      	movs	r2, r1
 8009060:	2300      	movs	r3, #0
 8009062:	4613      	mov	r3, r2
 8009064:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 8009068:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800906c:	4613      	mov	r3, r2
 800906e:	2b00      	cmp	r3, #0
 8009070:	bf14      	ite	ne
 8009072:	2301      	movne	r3, #1
 8009074:	2300      	moveq	r3, #0
 8009076:	b2db      	uxtb	r3, r3
 8009078:	440b      	add	r3, r1
 800907a:	4a06      	ldr	r2, [pc, #24]	@ (8009094 <xisnan+0x54>)
 800907c:	4293      	cmp	r3, r2
 800907e:	bf8c      	ite	hi
 8009080:	2301      	movhi	r3, #1
 8009082:	2300      	movls	r3, #0
 8009084:	b2db      	uxtb	r3, r3
 8009086:	4618      	mov	r0, r3
 8009088:	3714      	adds	r7, #20
 800908a:	46bd      	mov	sp, r7
 800908c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009090:	4770      	bx	lr
 8009092:	bf00      	nop
 8009094:	7ff00000 	.word	0x7ff00000

08009098 <mg_dtoa>:
 8009098:	b580      	push	{r7, lr}
 800909a:	b09e      	sub	sp, #120	@ 0x78
 800909c:	af02      	add	r7, sp, #8
 800909e:	6178      	str	r0, [r7, #20]
 80090a0:	6139      	str	r1, [r7, #16]
 80090a2:	ed87 0b02 	vstr	d0, [r7, #8]
 80090a6:	607a      	str	r2, [r7, #4]
 80090a8:	70fb      	strb	r3, [r7, #3]
 80090aa:	2300      	movs	r3, #0
 80090ac:	66bb      	str	r3, [r7, #104]	@ 0x68
 80090ae:	2300      	movs	r3, #0
 80090b0:	667b      	str	r3, [r7, #100]	@ 0x64
 80090b2:	2300      	movs	r3, #0
 80090b4:	663b      	str	r3, [r7, #96]	@ 0x60
 80090b6:	ed97 7b02 	vldr	d7, [r7, #8]
 80090ba:	eeb5 7b40 	vcmp.f64	d7, #0.0
 80090be:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80090c2:	d107      	bne.n	80090d4 <mg_dtoa+0x3c>
 80090c4:	4bb1      	ldr	r3, [pc, #708]	@ (800938c <mg_dtoa+0x2f4>)
 80090c6:	4ab2      	ldr	r2, [pc, #712]	@ (8009390 <mg_dtoa+0x2f8>)
 80090c8:	6939      	ldr	r1, [r7, #16]
 80090ca:	6978      	ldr	r0, [r7, #20]
 80090cc:	f006 fc7c 	bl	800f9c8 <mg_snprintf>
 80090d0:	4603      	mov	r3, r0
 80090d2:	e266      	b.n	80095a2 <mg_dtoa+0x50a>
 80090d4:	ed97 0b02 	vldr	d0, [r7, #8]
 80090d8:	f7ff ff8a 	bl	8008ff0 <xisinf>
 80090dc:	4603      	mov	r3, r0
 80090de:	2b00      	cmp	r3, #0
 80090e0:	d010      	beq.n	8009104 <mg_dtoa+0x6c>
 80090e2:	ed97 7b02 	vldr	d7, [r7, #8]
 80090e6:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 80090ea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80090ee:	dd01      	ble.n	80090f4 <mg_dtoa+0x5c>
 80090f0:	4ba8      	ldr	r3, [pc, #672]	@ (8009394 <mg_dtoa+0x2fc>)
 80090f2:	e000      	b.n	80090f6 <mg_dtoa+0x5e>
 80090f4:	4ba8      	ldr	r3, [pc, #672]	@ (8009398 <mg_dtoa+0x300>)
 80090f6:	4aa6      	ldr	r2, [pc, #664]	@ (8009390 <mg_dtoa+0x2f8>)
 80090f8:	6939      	ldr	r1, [r7, #16]
 80090fa:	6978      	ldr	r0, [r7, #20]
 80090fc:	f006 fc64 	bl	800f9c8 <mg_snprintf>
 8009100:	4603      	mov	r3, r0
 8009102:	e24e      	b.n	80095a2 <mg_dtoa+0x50a>
 8009104:	ed97 0b02 	vldr	d0, [r7, #8]
 8009108:	f7ff ff9a 	bl	8009040 <xisnan>
 800910c:	4603      	mov	r3, r0
 800910e:	2b00      	cmp	r3, #0
 8009110:	d007      	beq.n	8009122 <mg_dtoa+0x8a>
 8009112:	4ba2      	ldr	r3, [pc, #648]	@ (800939c <mg_dtoa+0x304>)
 8009114:	4a9e      	ldr	r2, [pc, #632]	@ (8009390 <mg_dtoa+0x2f8>)
 8009116:	6939      	ldr	r1, [r7, #16]
 8009118:	6978      	ldr	r0, [r7, #20]
 800911a:	f006 fc55 	bl	800f9c8 <mg_snprintf>
 800911e:	4603      	mov	r3, r0
 8009120:	e23f      	b.n	80095a2 <mg_dtoa+0x50a>
 8009122:	ed97 7b02 	vldr	d7, [r7, #8]
 8009126:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 800912a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800912e:	d50d      	bpl.n	800914c <mg_dtoa+0xb4>
 8009130:	ed97 7b02 	vldr	d7, [r7, #8]
 8009134:	eeb1 7b47 	vneg.f64	d7, d7
 8009138:	ed87 7b02 	vstr	d7, [r7, #8]
 800913c:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800913e:	1c5a      	adds	r2, r3, #1
 8009140:	66ba      	str	r2, [r7, #104]	@ 0x68
 8009142:	3370      	adds	r3, #112	@ 0x70
 8009144:	443b      	add	r3, r7
 8009146:	222d      	movs	r2, #45	@ 0x2d
 8009148:	f803 2c58 	strb.w	r2, [r3, #-88]
 800914c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8009150:	e9c7 2312 	strd	r2, r3, [r7, #72]	@ 0x48
 8009154:	f04f 0200 	mov.w	r2, #0
 8009158:	4b91      	ldr	r3, [pc, #580]	@ (80093a0 <mg_dtoa+0x308>)
 800915a:	e9c7 2314 	strd	r2, r3, [r7, #80]	@ 0x50
 800915e:	e007      	b.n	8009170 <mg_dtoa+0xd8>
 8009160:	ed97 7b14 	vldr	d7, [r7, #80]	@ 0x50
 8009164:	eeb2 6b04 	vmov.f64	d6, #36	@ 0x41200000  10.0
 8009168:	ee27 7b06 	vmul.f64	d7, d7, d6
 800916c:	ed87 7b14 	vstr	d7, [r7, #80]	@ 0x50
 8009170:	ed97 7b02 	vldr	d7, [r7, #8]
 8009174:	eeb2 6b04 	vmov.f64	d6, #36	@ 0x41200000  10.0
 8009178:	eeb4 7bc6 	vcmpe.f64	d7, d6
 800917c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009180:	db0c      	blt.n	800919c <mg_dtoa+0x104>
 8009182:	ed97 5b02 	vldr	d5, [r7, #8]
 8009186:	ed97 6b14 	vldr	d6, [r7, #80]	@ 0x50
 800918a:	ee85 7b06 	vdiv.f64	d7, d5, d6
 800918e:	eeb2 6b04 	vmov.f64	d6, #36	@ 0x41200000  10.0
 8009192:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8009196:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800919a:	dae1      	bge.n	8009160 <mg_dtoa+0xc8>
 800919c:	e007      	b.n	80091ae <mg_dtoa+0x116>
 800919e:	ed97 6b14 	vldr	d6, [r7, #80]	@ 0x50
 80091a2:	eeb2 5b04 	vmov.f64	d5, #36	@ 0x41200000  10.0
 80091a6:	ee86 7b05 	vdiv.f64	d7, d6, d5
 80091aa:	ed87 7b14 	vstr	d7, [r7, #80]	@ 0x50
 80091ae:	ed97 7b02 	vldr	d7, [r7, #8]
 80091b2:	eeb7 6b00 	vmov.f64	d6, #112	@ 0x3f800000  1.0
 80091b6:	eeb4 7bc6 	vcmpe.f64	d7, d6
 80091ba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80091be:	d80c      	bhi.n	80091da <mg_dtoa+0x142>
 80091c0:	ed97 5b02 	vldr	d5, [r7, #8]
 80091c4:	ed97 6b14 	vldr	d6, [r7, #80]	@ 0x50
 80091c8:	ee85 7b06 	vdiv.f64	d7, d5, d6
 80091cc:	eeb7 6b00 	vmov.f64	d6, #112	@ 0x3f800000  1.0
 80091d0:	eeb4 7bc6 	vcmpe.f64	d7, d6
 80091d4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80091d8:	d9e1      	bls.n	800919e <mg_dtoa+0x106>
 80091da:	2300      	movs	r3, #0
 80091dc:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80091de:	ed97 7b14 	vldr	d7, [r7, #80]	@ 0x50
 80091e2:	eeb1 6b04 	vmov.f64	d6, #20	@ 0x40a00000  5.0
 80091e6:	ee27 7b06 	vmul.f64	d7, d7, d6
 80091ea:	ed87 7b16 	vstr	d7, [r7, #88]	@ 0x58
 80091ee:	e00a      	b.n	8009206 <mg_dtoa+0x16e>
 80091f0:	ed97 6b16 	vldr	d6, [r7, #88]	@ 0x58
 80091f4:	eeb2 5b04 	vmov.f64	d5, #36	@ 0x41200000  10.0
 80091f8:	ee86 7b05 	vdiv.f64	d7, d6, d5
 80091fc:	ed87 7b16 	vstr	d7, [r7, #88]	@ 0x58
 8009200:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8009202:	3301      	adds	r3, #1
 8009204:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8009206:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8009208:	687b      	ldr	r3, [r7, #4]
 800920a:	429a      	cmp	r2, r3
 800920c:	dbf0      	blt.n	80091f0 <mg_dtoa+0x158>
 800920e:	ed97 6b02 	vldr	d6, [r7, #8]
 8009212:	ed97 7b16 	vldr	d7, [r7, #88]	@ 0x58
 8009216:	ee36 7b07 	vadd.f64	d7, d6, d7
 800921a:	ed87 7b02 	vstr	d7, [r7, #8]
 800921e:	f04f 0200 	mov.w	r2, #0
 8009222:	4b5f      	ldr	r3, [pc, #380]	@ (80093a0 <mg_dtoa+0x308>)
 8009224:	e9c7 2314 	strd	r2, r3, [r7, #80]	@ 0x50
 8009228:	e00a      	b.n	8009240 <mg_dtoa+0x1a8>
 800922a:	ed97 7b14 	vldr	d7, [r7, #80]	@ 0x50
 800922e:	eeb2 6b04 	vmov.f64	d6, #36	@ 0x41200000  10.0
 8009232:	ee27 7b06 	vmul.f64	d7, d7, d6
 8009236:	ed87 7b14 	vstr	d7, [r7, #80]	@ 0x50
 800923a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800923c:	3301      	adds	r3, #1
 800923e:	663b      	str	r3, [r7, #96]	@ 0x60
 8009240:	ed97 7b02 	vldr	d7, [r7, #8]
 8009244:	eeb2 6b04 	vmov.f64	d6, #36	@ 0x41200000  10.0
 8009248:	eeb4 7bc6 	vcmpe.f64	d7, d6
 800924c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009250:	db0c      	blt.n	800926c <mg_dtoa+0x1d4>
 8009252:	ed97 5b02 	vldr	d5, [r7, #8]
 8009256:	ed97 6b14 	vldr	d6, [r7, #80]	@ 0x50
 800925a:	ee85 7b06 	vdiv.f64	d7, d5, d6
 800925e:	eeb2 6b04 	vmov.f64	d6, #36	@ 0x41200000  10.0
 8009262:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8009266:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800926a:	dade      	bge.n	800922a <mg_dtoa+0x192>
 800926c:	e00a      	b.n	8009284 <mg_dtoa+0x1ec>
 800926e:	ed97 6b14 	vldr	d6, [r7, #80]	@ 0x50
 8009272:	eeb2 5b04 	vmov.f64	d5, #36	@ 0x41200000  10.0
 8009276:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800927a:	ed87 7b14 	vstr	d7, [r7, #80]	@ 0x50
 800927e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8009280:	3b01      	subs	r3, #1
 8009282:	663b      	str	r3, [r7, #96]	@ 0x60
 8009284:	ed97 7b02 	vldr	d7, [r7, #8]
 8009288:	eeb7 6b00 	vmov.f64	d6, #112	@ 0x3f800000  1.0
 800928c:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8009290:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009294:	d50c      	bpl.n	80092b0 <mg_dtoa+0x218>
 8009296:	ed97 5b02 	vldr	d5, [r7, #8]
 800929a:	ed97 6b14 	vldr	d6, [r7, #80]	@ 0x50
 800929e:	ee85 7b06 	vdiv.f64	d7, d5, d6
 80092a2:	eeb7 6b00 	vmov.f64	d6, #112	@ 0x3f800000  1.0
 80092a6:	eeb4 7bc6 	vcmpe.f64	d7, d6
 80092aa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80092ae:	d4de      	bmi.n	800926e <mg_dtoa+0x1d6>
 80092b0:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 80092b2:	687b      	ldr	r3, [r7, #4]
 80092b4:	429a      	cmp	r2, r3
 80092b6:	db2d      	blt.n	8009314 <mg_dtoa+0x27c>
 80092b8:	687b      	ldr	r3, [r7, #4]
 80092ba:	2b01      	cmp	r3, #1
 80092bc:	dd2a      	ble.n	8009314 <mg_dtoa+0x27c>
 80092be:	ed97 6b12 	vldr	d6, [r7, #72]	@ 0x48
 80092c2:	ed97 7b14 	vldr	d7, [r7, #80]	@ 0x50
 80092c6:	ee86 5b07 	vdiv.f64	d5, d6, d7
 80092ca:	78fb      	ldrb	r3, [r7, #3]
 80092cc:	f107 0018 	add.w	r0, r7, #24
 80092d0:	687a      	ldr	r2, [r7, #4]
 80092d2:	eeb0 0b45 	vmov.f64	d0, d5
 80092d6:	2128      	movs	r1, #40	@ 0x28
 80092d8:	f7ff fede 	bl	8009098 <mg_dtoa>
 80092dc:	4603      	mov	r3, r0
 80092de:	667b      	str	r3, [r7, #100]	@ 0x64
 80092e0:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 80092e2:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80092e4:	4413      	add	r3, r2
 80092e6:	f107 0218 	add.w	r2, r7, #24
 80092ea:	4413      	add	r3, r2
 80092ec:	222b      	movs	r2, #43	@ 0x2b
 80092ee:	6e39      	ldr	r1, [r7, #96]	@ 0x60
 80092f0:	4618      	mov	r0, r3
 80092f2:	f7ff fdfb 	bl	8008eec <addexp>
 80092f6:	4602      	mov	r2, r0
 80092f8:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80092fa:	4413      	add	r3, r2
 80092fc:	667b      	str	r3, [r7, #100]	@ 0x64
 80092fe:	f107 0318 	add.w	r3, r7, #24
 8009302:	9300      	str	r3, [sp, #0]
 8009304:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8009306:	4a27      	ldr	r2, [pc, #156]	@ (80093a4 <mg_dtoa+0x30c>)
 8009308:	6939      	ldr	r1, [r7, #16]
 800930a:	6978      	ldr	r0, [r7, #20]
 800930c:	f006 fb5c 	bl	800f9c8 <mg_snprintf>
 8009310:	4603      	mov	r3, r0
 8009312:	e146      	b.n	80095a2 <mg_dtoa+0x50a>
 8009314:	687b      	ldr	r3, [r7, #4]
 8009316:	425b      	negs	r3, r3
 8009318:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800931a:	429a      	cmp	r2, r3
 800931c:	dc2e      	bgt.n	800937c <mg_dtoa+0x2e4>
 800931e:	687b      	ldr	r3, [r7, #4]
 8009320:	2b01      	cmp	r3, #1
 8009322:	dd2b      	ble.n	800937c <mg_dtoa+0x2e4>
 8009324:	ed97 6b12 	vldr	d6, [r7, #72]	@ 0x48
 8009328:	ed97 7b14 	vldr	d7, [r7, #80]	@ 0x50
 800932c:	ee86 5b07 	vdiv.f64	d5, d6, d7
 8009330:	78fb      	ldrb	r3, [r7, #3]
 8009332:	f107 0018 	add.w	r0, r7, #24
 8009336:	687a      	ldr	r2, [r7, #4]
 8009338:	eeb0 0b45 	vmov.f64	d0, d5
 800933c:	2128      	movs	r1, #40	@ 0x28
 800933e:	f7ff feab 	bl	8009098 <mg_dtoa>
 8009342:	4603      	mov	r3, r0
 8009344:	667b      	str	r3, [r7, #100]	@ 0x64
 8009346:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 8009348:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800934a:	4413      	add	r3, r2
 800934c:	f107 0218 	add.w	r2, r7, #24
 8009350:	18d0      	adds	r0, r2, r3
 8009352:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8009354:	425b      	negs	r3, r3
 8009356:	222d      	movs	r2, #45	@ 0x2d
 8009358:	4619      	mov	r1, r3
 800935a:	f7ff fdc7 	bl	8008eec <addexp>
 800935e:	4602      	mov	r2, r0
 8009360:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8009362:	4413      	add	r3, r2
 8009364:	667b      	str	r3, [r7, #100]	@ 0x64
 8009366:	f107 0318 	add.w	r3, r7, #24
 800936a:	9300      	str	r3, [sp, #0]
 800936c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800936e:	4a0d      	ldr	r2, [pc, #52]	@ (80093a4 <mg_dtoa+0x30c>)
 8009370:	6939      	ldr	r1, [r7, #16]
 8009372:	6978      	ldr	r0, [r7, #20]
 8009374:	f006 fb28 	bl	800f9c8 <mg_snprintf>
 8009378:	4603      	mov	r3, r0
 800937a:	e112      	b.n	80095a2 <mg_dtoa+0x50a>
 800937c:	2300      	movs	r3, #0
 800937e:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8009380:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8009384:	e9c7 2316 	strd	r2, r3, [r7, #88]	@ 0x58
 8009388:	e046      	b.n	8009418 <mg_dtoa+0x380>
 800938a:	bf00      	nop
 800938c:	0801a600 	.word	0x0801a600
 8009390:	0801a604 	.word	0x0801a604
 8009394:	0801a608 	.word	0x0801a608
 8009398:	0801a60c 	.word	0x0801a60c
 800939c:	0801a614 	.word	0x0801a614
 80093a0:	3ff00000 	.word	0x3ff00000
 80093a4:	0801a618 	.word	0x0801a618
 80093a8:	ed97 5b02 	vldr	d5, [r7, #8]
 80093ac:	ed97 6b16 	vldr	d6, [r7, #88]	@ 0x58
 80093b0:	ee85 7b06 	vdiv.f64	d7, d5, d6
 80093b4:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 80093b8:	ee17 3a90 	vmov	r3, s15
 80093bc:	647b      	str	r3, [r7, #68]	@ 0x44
 80093be:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80093c0:	2b00      	cmp	r3, #0
 80093c2:	dc02      	bgt.n	80093ca <mg_dtoa+0x332>
 80093c4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80093c6:	2b00      	cmp	r3, #0
 80093c8:	dd0c      	ble.n	80093e4 <mg_dtoa+0x34c>
 80093ca:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80093cc:	b2da      	uxtb	r2, r3
 80093ce:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80093d0:	1c59      	adds	r1, r3, #1
 80093d2:	6679      	str	r1, [r7, #100]	@ 0x64
 80093d4:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 80093d6:	440b      	add	r3, r1
 80093d8:	3230      	adds	r2, #48	@ 0x30
 80093da:	b2d2      	uxtb	r2, r2
 80093dc:	3370      	adds	r3, #112	@ 0x70
 80093de:	443b      	add	r3, r7
 80093e0:	f803 2c58 	strb.w	r2, [r3, #-88]
 80093e4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80093e6:	ee07 3a90 	vmov	s15, r3
 80093ea:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 80093ee:	ed97 7b16 	vldr	d7, [r7, #88]	@ 0x58
 80093f2:	ee26 7b07 	vmul.f64	d7, d6, d7
 80093f6:	ed97 6b02 	vldr	d6, [r7, #8]
 80093fa:	ee36 7b47 	vsub.f64	d7, d6, d7
 80093fe:	ed87 7b02 	vstr	d7, [r7, #8]
 8009402:	ed97 6b16 	vldr	d6, [r7, #88]	@ 0x58
 8009406:	eeb2 5b04 	vmov.f64	d5, #36	@ 0x41200000  10.0
 800940a:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800940e:	ed87 7b16 	vstr	d7, [r7, #88]	@ 0x58
 8009412:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8009414:	3301      	adds	r3, #1
 8009416:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8009418:	ed97 7b16 	vldr	d7, [r7, #88]	@ 0x58
 800941c:	eeb7 6b00 	vmov.f64	d6, #112	@ 0x3f800000  1.0
 8009420:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8009424:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009428:	db04      	blt.n	8009434 <mg_dtoa+0x39c>
 800942a:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 800942c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800942e:	4413      	add	r3, r2
 8009430:	2b27      	cmp	r3, #39	@ 0x27
 8009432:	ddb9      	ble.n	80093a8 <mg_dtoa+0x310>
 8009434:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8009436:	2b00      	cmp	r3, #0
 8009438:	d118      	bne.n	800946c <mg_dtoa+0x3d4>
 800943a:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800943c:	1c5a      	adds	r2, r3, #1
 800943e:	66ba      	str	r2, [r7, #104]	@ 0x68
 8009440:	3370      	adds	r3, #112	@ 0x70
 8009442:	443b      	add	r3, r7
 8009444:	2230      	movs	r2, #48	@ 0x30
 8009446:	f803 2c58 	strb.w	r2, [r3, #-88]
 800944a:	e00f      	b.n	800946c <mg_dtoa+0x3d4>
 800944c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800944e:	1c5a      	adds	r2, r3, #1
 8009450:	667a      	str	r2, [r7, #100]	@ 0x64
 8009452:	3370      	adds	r3, #112	@ 0x70
 8009454:	443b      	add	r3, r7
 8009456:	2230      	movs	r2, #48	@ 0x30
 8009458:	f803 2c58 	strb.w	r2, [r3, #-88]
 800945c:	ed97 6b16 	vldr	d6, [r7, #88]	@ 0x58
 8009460:	eeb2 5b04 	vmov.f64	d5, #36	@ 0x41200000  10.0
 8009464:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8009468:	ed87 7b16 	vstr	d7, [r7, #88]	@ 0x58
 800946c:	ed97 7b16 	vldr	d7, [r7, #88]	@ 0x58
 8009470:	eeb7 6b00 	vmov.f64	d6, #112	@ 0x3f800000  1.0
 8009474:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8009478:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800947c:	db04      	blt.n	8009488 <mg_dtoa+0x3f0>
 800947e:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8009480:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8009482:	4413      	add	r3, r2
 8009484:	2b27      	cmp	r3, #39	@ 0x27
 8009486:	dde1      	ble.n	800944c <mg_dtoa+0x3b4>
 8009488:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 800948a:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800948c:	4413      	add	r3, r2
 800948e:	2b27      	cmp	r3, #39	@ 0x27
 8009490:	dc09      	bgt.n	80094a6 <mg_dtoa+0x40e>
 8009492:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8009494:	1c5a      	adds	r2, r3, #1
 8009496:	66ba      	str	r2, [r7, #104]	@ 0x68
 8009498:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 800949a:	4413      	add	r3, r2
 800949c:	3370      	adds	r3, #112	@ 0x70
 800949e:	443b      	add	r3, r7
 80094a0:	222e      	movs	r2, #46	@ 0x2e
 80094a2:	f803 2c58 	strb.w	r2, [r3, #-88]
 80094a6:	2300      	movs	r3, #0
 80094a8:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80094aa:	a342      	add	r3, pc, #264	@ (adr r3, 80095b4 <mg_dtoa+0x51c>)
 80094ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80094b0:	e9c7 2316 	strd	r2, r3, [r7, #88]	@ 0x58
 80094b4:	e031      	b.n	800951a <mg_dtoa+0x482>
 80094b6:	ed97 5b02 	vldr	d5, [r7, #8]
 80094ba:	ed97 6b16 	vldr	d6, [r7, #88]	@ 0x58
 80094be:	ee85 7b06 	vdiv.f64	d7, d5, d6
 80094c2:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 80094c6:	ee17 3a90 	vmov	r3, s15
 80094ca:	643b      	str	r3, [r7, #64]	@ 0x40
 80094cc:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80094ce:	b2da      	uxtb	r2, r3
 80094d0:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80094d2:	1c59      	adds	r1, r3, #1
 80094d4:	6679      	str	r1, [r7, #100]	@ 0x64
 80094d6:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 80094d8:	440b      	add	r3, r1
 80094da:	3230      	adds	r2, #48	@ 0x30
 80094dc:	b2d2      	uxtb	r2, r2
 80094de:	3370      	adds	r3, #112	@ 0x70
 80094e0:	443b      	add	r3, r7
 80094e2:	f803 2c58 	strb.w	r2, [r3, #-88]
 80094e6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80094e8:	ee07 3a90 	vmov	s15, r3
 80094ec:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 80094f0:	ed97 7b16 	vldr	d7, [r7, #88]	@ 0x58
 80094f4:	ee26 7b07 	vmul.f64	d7, d6, d7
 80094f8:	ed97 6b02 	vldr	d6, [r7, #8]
 80094fc:	ee36 7b47 	vsub.f64	d7, d6, d7
 8009500:	ed87 7b02 	vstr	d7, [r7, #8]
 8009504:	ed97 6b16 	vldr	d6, [r7, #88]	@ 0x58
 8009508:	eeb2 5b04 	vmov.f64	d5, #36	@ 0x41200000  10.0
 800950c:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8009510:	ed87 7b16 	vstr	d7, [r7, #88]	@ 0x58
 8009514:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8009516:	3301      	adds	r3, #1
 8009518:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800951a:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 800951c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800951e:	4413      	add	r3, r2
 8009520:	2b27      	cmp	r3, #39	@ 0x27
 8009522:	dc07      	bgt.n	8009534 <mg_dtoa+0x49c>
 8009524:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8009526:	687b      	ldr	r3, [r7, #4]
 8009528:	429a      	cmp	r2, r3
 800952a:	dbc4      	blt.n	80094b6 <mg_dtoa+0x41e>
 800952c:	e002      	b.n	8009534 <mg_dtoa+0x49c>
 800952e:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8009530:	3b01      	subs	r3, #1
 8009532:	667b      	str	r3, [r7, #100]	@ 0x64
 8009534:	78fb      	ldrb	r3, [r7, #3]
 8009536:	2b00      	cmp	r3, #0
 8009538:	d00c      	beq.n	8009554 <mg_dtoa+0x4bc>
 800953a:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800953c:	2b00      	cmp	r3, #0
 800953e:	dd09      	ble.n	8009554 <mg_dtoa+0x4bc>
 8009540:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 8009542:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8009544:	4413      	add	r3, r2
 8009546:	3b01      	subs	r3, #1
 8009548:	3370      	adds	r3, #112	@ 0x70
 800954a:	443b      	add	r3, r7
 800954c:	f813 3c58 	ldrb.w	r3, [r3, #-88]
 8009550:	2b30      	cmp	r3, #48	@ 0x30
 8009552:	d0ec      	beq.n	800952e <mg_dtoa+0x496>
 8009554:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8009556:	2b00      	cmp	r3, #0
 8009558:	dd0c      	ble.n	8009574 <mg_dtoa+0x4dc>
 800955a:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 800955c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800955e:	4413      	add	r3, r2
 8009560:	3b01      	subs	r3, #1
 8009562:	3370      	adds	r3, #112	@ 0x70
 8009564:	443b      	add	r3, r7
 8009566:	f813 3c58 	ldrb.w	r3, [r3, #-88]
 800956a:	2b2e      	cmp	r3, #46	@ 0x2e
 800956c:	d102      	bne.n	8009574 <mg_dtoa+0x4dc>
 800956e:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8009570:	3b01      	subs	r3, #1
 8009572:	667b      	str	r3, [r7, #100]	@ 0x64
 8009574:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8009576:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8009578:	4413      	add	r3, r2
 800957a:	667b      	str	r3, [r7, #100]	@ 0x64
 800957c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800957e:	2b27      	cmp	r3, #39	@ 0x27
 8009580:	dd01      	ble.n	8009586 <mg_dtoa+0x4ee>
 8009582:	2327      	movs	r3, #39	@ 0x27
 8009584:	667b      	str	r3, [r7, #100]	@ 0x64
 8009586:	f107 0218 	add.w	r2, r7, #24
 800958a:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800958c:	4413      	add	r3, r2
 800958e:	2200      	movs	r2, #0
 8009590:	701a      	strb	r2, [r3, #0]
 8009592:	f107 0318 	add.w	r3, r7, #24
 8009596:	4a06      	ldr	r2, [pc, #24]	@ (80095b0 <mg_dtoa+0x518>)
 8009598:	6939      	ldr	r1, [r7, #16]
 800959a:	6978      	ldr	r0, [r7, #20]
 800959c:	f006 fa14 	bl	800f9c8 <mg_snprintf>
 80095a0:	4603      	mov	r3, r0
 80095a2:	4618      	mov	r0, r3
 80095a4:	3770      	adds	r7, #112	@ 0x70
 80095a6:	46bd      	mov	sp, r7
 80095a8:	bd80      	pop	{r7, pc}
 80095aa:	bf00      	nop
 80095ac:	f3af 8000 	nop.w
 80095b0:	0801a604 	.word	0x0801a604
 80095b4:	9999999a 	.word	0x9999999a
 80095b8:	3fb99999 	.word	0x3fb99999

080095bc <mg_lld>:
 80095bc:	b5b0      	push	{r4, r5, r7, lr}
 80095be:	b08c      	sub	sp, #48	@ 0x30
 80095c0:	af00      	add	r7, sp, #0
 80095c2:	60f8      	str	r0, [r7, #12]
 80095c4:	e9c7 2300 	strd	r2, r3, [r7]
 80095c8:	4b53      	ldr	r3, [pc, #332]	@ (8009718 <mg_lld+0x15c>)
 80095ca:	61bb      	str	r3, [r7, #24]
 80095cc:	e9d7 2300 	ldrd	r2, r3, [r7]
 80095d0:	e9c7 230a 	strd	r2, r3, [r7, #40]	@ 0x28
 80095d4:	2300      	movs	r3, #0
 80095d6:	627b      	str	r3, [r7, #36]	@ 0x24
 80095d8:	f897 3040 	ldrb.w	r3, [r7, #64]	@ 0x40
 80095dc:	2b00      	cmp	r3, #0
 80095de:	d012      	beq.n	8009606 <mg_lld+0x4a>
 80095e0:	e9d7 2300 	ldrd	r2, r3, [r7]
 80095e4:	2b00      	cmp	r3, #0
 80095e6:	da0e      	bge.n	8009606 <mg_lld+0x4a>
 80095e8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80095ea:	1c5a      	adds	r2, r3, #1
 80095ec:	627a      	str	r2, [r7, #36]	@ 0x24
 80095ee:	68fa      	ldr	r2, [r7, #12]
 80095f0:	4413      	add	r3, r2
 80095f2:	222d      	movs	r2, #45	@ 0x2d
 80095f4:	701a      	strb	r2, [r3, #0]
 80095f6:	e9d7 2300 	ldrd	r2, r3, [r7]
 80095fa:	2100      	movs	r1, #0
 80095fc:	4254      	negs	r4, r2
 80095fe:	eb61 0503 	sbc.w	r5, r1, r3
 8009602:	e9c7 450a 	strd	r4, r5, [r7, #40]	@ 0x28
 8009606:	f897 3044 	ldrb.w	r3, [r7, #68]	@ 0x44
 800960a:	2b00      	cmp	r3, #0
 800960c:	d021      	beq.n	8009652 <mg_lld+0x96>
 800960e:	2300      	movs	r3, #0
 8009610:	623b      	str	r3, [r7, #32]
 8009612:	e019      	b.n	8009648 <mg_lld+0x8c>
 8009614:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009616:	f003 030f 	and.w	r3, r3, #15
 800961a:	69ba      	ldr	r2, [r7, #24]
 800961c:	441a      	add	r2, r3
 800961e:	6a3b      	ldr	r3, [r7, #32]
 8009620:	1c59      	adds	r1, r3, #1
 8009622:	6239      	str	r1, [r7, #32]
 8009624:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8009626:	440b      	add	r3, r1
 8009628:	68f9      	ldr	r1, [r7, #12]
 800962a:	440b      	add	r3, r1
 800962c:	7812      	ldrb	r2, [r2, #0]
 800962e:	701a      	strb	r2, [r3, #0]
 8009630:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 8009634:	f04f 0200 	mov.w	r2, #0
 8009638:	f04f 0300 	mov.w	r3, #0
 800963c:	0902      	lsrs	r2, r0, #4
 800963e:	ea42 7201 	orr.w	r2, r2, r1, lsl #28
 8009642:	090b      	lsrs	r3, r1, #4
 8009644:	e9c7 230a 	strd	r2, r3, [r7, #40]	@ 0x28
 8009648:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 800964c:	4313      	orrs	r3, r2
 800964e:	d1e1      	bne.n	8009614 <mg_lld+0x58>
 8009650:	e025      	b.n	800969e <mg_lld+0xe2>
 8009652:	2300      	movs	r3, #0
 8009654:	623b      	str	r3, [r7, #32]
 8009656:	e01e      	b.n	8009696 <mg_lld+0xda>
 8009658:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 800965c:	f04f 020a 	mov.w	r2, #10
 8009660:	f04f 0300 	mov.w	r3, #0
 8009664:	f7f6 fe94 	bl	8000390 <__aeabi_uldivmod>
 8009668:	69bb      	ldr	r3, [r7, #24]
 800966a:	441a      	add	r2, r3
 800966c:	6a3b      	ldr	r3, [r7, #32]
 800966e:	1c59      	adds	r1, r3, #1
 8009670:	6239      	str	r1, [r7, #32]
 8009672:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8009674:	440b      	add	r3, r1
 8009676:	68f9      	ldr	r1, [r7, #12]
 8009678:	440b      	add	r3, r1
 800967a:	7812      	ldrb	r2, [r2, #0]
 800967c:	701a      	strb	r2, [r3, #0]
 800967e:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 8009682:	f04f 020a 	mov.w	r2, #10
 8009686:	f04f 0300 	mov.w	r3, #0
 800968a:	f7f6 fe81 	bl	8000390 <__aeabi_uldivmod>
 800968e:	4602      	mov	r2, r0
 8009690:	460b      	mov	r3, r1
 8009692:	e9c7 230a 	strd	r2, r3, [r7, #40]	@ 0x28
 8009696:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 800969a:	4313      	orrs	r3, r2
 800969c:	d1dc      	bne.n	8009658 <mg_lld+0x9c>
 800969e:	2300      	movs	r3, #0
 80096a0:	61fb      	str	r3, [r7, #28]
 80096a2:	e022      	b.n	80096ea <mg_lld+0x12e>
 80096a4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80096a6:	69fb      	ldr	r3, [r7, #28]
 80096a8:	4413      	add	r3, r2
 80096aa:	68fa      	ldr	r2, [r7, #12]
 80096ac:	4413      	add	r3, r2
 80096ae:	781b      	ldrb	r3, [r3, #0]
 80096b0:	75fb      	strb	r3, [r7, #23]
 80096b2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80096b4:	6a3b      	ldr	r3, [r7, #32]
 80096b6:	441a      	add	r2, r3
 80096b8:	69fb      	ldr	r3, [r7, #28]
 80096ba:	1ad3      	subs	r3, r2, r3
 80096bc:	3b01      	subs	r3, #1
 80096be:	68fa      	ldr	r2, [r7, #12]
 80096c0:	441a      	add	r2, r3
 80096c2:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80096c4:	69fb      	ldr	r3, [r7, #28]
 80096c6:	440b      	add	r3, r1
 80096c8:	68f9      	ldr	r1, [r7, #12]
 80096ca:	440b      	add	r3, r1
 80096cc:	7812      	ldrb	r2, [r2, #0]
 80096ce:	701a      	strb	r2, [r3, #0]
 80096d0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80096d2:	6a3b      	ldr	r3, [r7, #32]
 80096d4:	441a      	add	r2, r3
 80096d6:	69fb      	ldr	r3, [r7, #28]
 80096d8:	1ad3      	subs	r3, r2, r3
 80096da:	3b01      	subs	r3, #1
 80096dc:	68fa      	ldr	r2, [r7, #12]
 80096de:	4413      	add	r3, r2
 80096e0:	7dfa      	ldrb	r2, [r7, #23]
 80096e2:	701a      	strb	r2, [r3, #0]
 80096e4:	69fb      	ldr	r3, [r7, #28]
 80096e6:	3301      	adds	r3, #1
 80096e8:	61fb      	str	r3, [r7, #28]
 80096ea:	6a3b      	ldr	r3, [r7, #32]
 80096ec:	085b      	lsrs	r3, r3, #1
 80096ee:	69fa      	ldr	r2, [r7, #28]
 80096f0:	429a      	cmp	r2, r3
 80096f2:	d3d7      	bcc.n	80096a4 <mg_lld+0xe8>
 80096f4:	e9d7 2300 	ldrd	r2, r3, [r7]
 80096f8:	4313      	orrs	r3, r2
 80096fa:	d106      	bne.n	800970a <mg_lld+0x14e>
 80096fc:	6a3b      	ldr	r3, [r7, #32]
 80096fe:	1c5a      	adds	r2, r3, #1
 8009700:	623a      	str	r2, [r7, #32]
 8009702:	68fa      	ldr	r2, [r7, #12]
 8009704:	4413      	add	r3, r2
 8009706:	2230      	movs	r2, #48	@ 0x30
 8009708:	701a      	strb	r2, [r3, #0]
 800970a:	6a3a      	ldr	r2, [r7, #32]
 800970c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800970e:	4413      	add	r3, r2
 8009710:	4618      	mov	r0, r3
 8009712:	3730      	adds	r7, #48	@ 0x30
 8009714:	46bd      	mov	sp, r7
 8009716:	bdb0      	pop	{r4, r5, r7, pc}
 8009718:	0801a620 	.word	0x0801a620

0800971c <scpy>:
 800971c:	b580      	push	{r7, lr}
 800971e:	b086      	sub	sp, #24
 8009720:	af00      	add	r7, sp, #0
 8009722:	60f8      	str	r0, [r7, #12]
 8009724:	60b9      	str	r1, [r7, #8]
 8009726:	607a      	str	r2, [r7, #4]
 8009728:	603b      	str	r3, [r7, #0]
 800972a:	2300      	movs	r3, #0
 800972c:	617b      	str	r3, [r7, #20]
 800972e:	e009      	b.n	8009744 <scpy+0x28>
 8009730:	697b      	ldr	r3, [r7, #20]
 8009732:	1c5a      	adds	r2, r3, #1
 8009734:	617a      	str	r2, [r7, #20]
 8009736:	687a      	ldr	r2, [r7, #4]
 8009738:	4413      	add	r3, r2
 800973a:	781a      	ldrb	r2, [r3, #0]
 800973c:	68fb      	ldr	r3, [r7, #12]
 800973e:	68b9      	ldr	r1, [r7, #8]
 8009740:	4610      	mov	r0, r2
 8009742:	4798      	blx	r3
 8009744:	697a      	ldr	r2, [r7, #20]
 8009746:	683b      	ldr	r3, [r7, #0]
 8009748:	429a      	cmp	r2, r3
 800974a:	d205      	bcs.n	8009758 <scpy+0x3c>
 800974c:	687a      	ldr	r2, [r7, #4]
 800974e:	697b      	ldr	r3, [r7, #20]
 8009750:	4413      	add	r3, r2
 8009752:	781b      	ldrb	r3, [r3, #0]
 8009754:	2b00      	cmp	r3, #0
 8009756:	d1eb      	bne.n	8009730 <scpy+0x14>
 8009758:	697b      	ldr	r3, [r7, #20]
 800975a:	4618      	mov	r0, r3
 800975c:	3718      	adds	r7, #24
 800975e:	46bd      	mov	sp, r7
 8009760:	bd80      	pop	{r7, pc}

08009762 <mg_xprintf>:
 8009762:	b40c      	push	{r2, r3}
 8009764:	b580      	push	{r7, lr}
 8009766:	b084      	sub	sp, #16
 8009768:	af00      	add	r7, sp, #0
 800976a:	6078      	str	r0, [r7, #4]
 800976c:	6039      	str	r1, [r7, #0]
 800976e:	2300      	movs	r3, #0
 8009770:	60fb      	str	r3, [r7, #12]
 8009772:	f107 031c 	add.w	r3, r7, #28
 8009776:	60bb      	str	r3, [r7, #8]
 8009778:	f107 0308 	add.w	r3, r7, #8
 800977c:	69ba      	ldr	r2, [r7, #24]
 800977e:	6839      	ldr	r1, [r7, #0]
 8009780:	6878      	ldr	r0, [r7, #4]
 8009782:	f000 f809 	bl	8009798 <mg_vxprintf>
 8009786:	60f8      	str	r0, [r7, #12]
 8009788:	68fb      	ldr	r3, [r7, #12]
 800978a:	4618      	mov	r0, r3
 800978c:	3710      	adds	r7, #16
 800978e:	46bd      	mov	sp, r7
 8009790:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8009794:	b002      	add	sp, #8
 8009796:	4770      	bx	lr

08009798 <mg_vxprintf>:
 8009798:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 800979c:	b0a6      	sub	sp, #152	@ 0x98
 800979e:	af02      	add	r7, sp, #8
 80097a0:	60f8      	str	r0, [r7, #12]
 80097a2:	60b9      	str	r1, [r7, #8]
 80097a4:	607a      	str	r2, [r7, #4]
 80097a6:	603b      	str	r3, [r7, #0]
 80097a8:	2300      	movs	r3, #0
 80097aa:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 80097ae:	2300      	movs	r3, #0
 80097b0:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80097b4:	e383      	b.n	8009ebe <mg_vxprintf+0x726>
 80097b6:	687a      	ldr	r2, [r7, #4]
 80097b8:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80097bc:	4413      	add	r3, r2
 80097be:	781b      	ldrb	r3, [r3, #0]
 80097c0:	2b25      	cmp	r3, #37	@ 0x25
 80097c2:	f040 8369 	bne.w	8009e98 <mg_vxprintf+0x700>
 80097c6:	2300      	movs	r3, #0
 80097c8:	67fb      	str	r3, [r7, #124]	@ 0x7c
 80097ca:	2300      	movs	r3, #0
 80097cc:	67bb      	str	r3, [r7, #120]	@ 0x78
 80097ce:	2300      	movs	r3, #0
 80097d0:	677b      	str	r3, [r7, #116]	@ 0x74
 80097d2:	f04f 33ff 	mov.w	r3, #4294967295
 80097d6:	673b      	str	r3, [r7, #112]	@ 0x70
 80097d8:	2320      	movs	r3, #32
 80097da:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
 80097de:	2300      	movs	r3, #0
 80097e0:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
 80097e4:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80097e8:	3301      	adds	r3, #1
 80097ea:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 80097ee:	687a      	ldr	r2, [r7, #4]
 80097f0:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80097f4:	4413      	add	r3, r2
 80097f6:	781b      	ldrb	r3, [r3, #0]
 80097f8:	f887 306e 	strb.w	r3, [r7, #110]	@ 0x6e
 80097fc:	f897 306e 	ldrb.w	r3, [r7, #110]	@ 0x6e
 8009800:	2b23      	cmp	r3, #35	@ 0x23
 8009802:	d10e      	bne.n	8009822 <mg_vxprintf+0x8a>
 8009804:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8009806:	3301      	adds	r3, #1
 8009808:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800980a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800980e:	3301      	adds	r3, #1
 8009810:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8009814:	687a      	ldr	r2, [r7, #4]
 8009816:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800981a:	4413      	add	r3, r2
 800981c:	781b      	ldrb	r3, [r3, #0]
 800981e:	f887 306e 	strb.w	r3, [r7, #110]	@ 0x6e
 8009822:	f897 306e 	ldrb.w	r3, [r7, #110]	@ 0x6e
 8009826:	2b2d      	cmp	r3, #45	@ 0x2d
 8009828:	d110      	bne.n	800984c <mg_vxprintf+0xb4>
 800982a:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
 800982e:	3301      	adds	r3, #1
 8009830:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
 8009834:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8009838:	3301      	adds	r3, #1
 800983a:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 800983e:	687a      	ldr	r2, [r7, #4]
 8009840:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8009844:	4413      	add	r3, r2
 8009846:	781b      	ldrb	r3, [r3, #0]
 8009848:	f887 306e 	strb.w	r3, [r7, #110]	@ 0x6e
 800984c:	f897 306e 	ldrb.w	r3, [r7, #110]	@ 0x6e
 8009850:	2b30      	cmp	r3, #48	@ 0x30
 8009852:	d127      	bne.n	80098a4 <mg_vxprintf+0x10c>
 8009854:	2330      	movs	r3, #48	@ 0x30
 8009856:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
 800985a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800985e:	3301      	adds	r3, #1
 8009860:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8009864:	687a      	ldr	r2, [r7, #4]
 8009866:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800986a:	4413      	add	r3, r2
 800986c:	781b      	ldrb	r3, [r3, #0]
 800986e:	f887 306e 	strb.w	r3, [r7, #110]	@ 0x6e
 8009872:	e017      	b.n	80098a4 <mg_vxprintf+0x10c>
 8009874:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 8009876:	4613      	mov	r3, r2
 8009878:	009b      	lsls	r3, r3, #2
 800987a:	4413      	add	r3, r2
 800987c:	005b      	lsls	r3, r3, #1
 800987e:	677b      	str	r3, [r7, #116]	@ 0x74
 8009880:	f897 206e 	ldrb.w	r2, [r7, #110]	@ 0x6e
 8009884:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8009886:	4413      	add	r3, r2
 8009888:	3b30      	subs	r3, #48	@ 0x30
 800988a:	677b      	str	r3, [r7, #116]	@ 0x74
 800988c:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8009890:	3301      	adds	r3, #1
 8009892:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8009896:	687a      	ldr	r2, [r7, #4]
 8009898:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800989c:	4413      	add	r3, r2
 800989e:	781b      	ldrb	r3, [r3, #0]
 80098a0:	f887 306e 	strb.w	r3, [r7, #110]	@ 0x6e
 80098a4:	f897 306e 	ldrb.w	r3, [r7, #110]	@ 0x6e
 80098a8:	4618      	mov	r0, r3
 80098aa:	f7ff fb09 	bl	8008ec0 <is_digit>
 80098ae:	4603      	mov	r3, r0
 80098b0:	2b00      	cmp	r3, #0
 80098b2:	d1df      	bne.n	8009874 <mg_vxprintf+0xdc>
 80098b4:	f897 306e 	ldrb.w	r3, [r7, #110]	@ 0x6e
 80098b8:	2b2e      	cmp	r3, #46	@ 0x2e
 80098ba:	d153      	bne.n	8009964 <mg_vxprintf+0x1cc>
 80098bc:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80098c0:	3301      	adds	r3, #1
 80098c2:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 80098c6:	687a      	ldr	r2, [r7, #4]
 80098c8:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80098cc:	4413      	add	r3, r2
 80098ce:	781b      	ldrb	r3, [r3, #0]
 80098d0:	f887 306e 	strb.w	r3, [r7, #110]	@ 0x6e
 80098d4:	f897 306e 	ldrb.w	r3, [r7, #110]	@ 0x6e
 80098d8:	2b2a      	cmp	r3, #42	@ 0x2a
 80098da:	d113      	bne.n	8009904 <mg_vxprintf+0x16c>
 80098dc:	683b      	ldr	r3, [r7, #0]
 80098de:	681b      	ldr	r3, [r3, #0]
 80098e0:	1d19      	adds	r1, r3, #4
 80098e2:	683a      	ldr	r2, [r7, #0]
 80098e4:	6011      	str	r1, [r2, #0]
 80098e6:	681b      	ldr	r3, [r3, #0]
 80098e8:	673b      	str	r3, [r7, #112]	@ 0x70
 80098ea:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80098ee:	3301      	adds	r3, #1
 80098f0:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 80098f4:	687a      	ldr	r2, [r7, #4]
 80098f6:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80098fa:	4413      	add	r3, r2
 80098fc:	781b      	ldrb	r3, [r3, #0]
 80098fe:	f887 306e 	strb.w	r3, [r7, #110]	@ 0x6e
 8009902:	e02f      	b.n	8009964 <mg_vxprintf+0x1cc>
 8009904:	2300      	movs	r3, #0
 8009906:	673b      	str	r3, [r7, #112]	@ 0x70
 8009908:	e017      	b.n	800993a <mg_vxprintf+0x1a2>
 800990a:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 800990c:	4613      	mov	r3, r2
 800990e:	009b      	lsls	r3, r3, #2
 8009910:	4413      	add	r3, r2
 8009912:	005b      	lsls	r3, r3, #1
 8009914:	673b      	str	r3, [r7, #112]	@ 0x70
 8009916:	f897 206e 	ldrb.w	r2, [r7, #110]	@ 0x6e
 800991a:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800991c:	4413      	add	r3, r2
 800991e:	3b30      	subs	r3, #48	@ 0x30
 8009920:	673b      	str	r3, [r7, #112]	@ 0x70
 8009922:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8009926:	3301      	adds	r3, #1
 8009928:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 800992c:	687a      	ldr	r2, [r7, #4]
 800992e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8009932:	4413      	add	r3, r2
 8009934:	781b      	ldrb	r3, [r3, #0]
 8009936:	f887 306e 	strb.w	r3, [r7, #110]	@ 0x6e
 800993a:	f897 306e 	ldrb.w	r3, [r7, #110]	@ 0x6e
 800993e:	4618      	mov	r0, r3
 8009940:	f7ff fabe 	bl	8008ec0 <is_digit>
 8009944:	4603      	mov	r3, r0
 8009946:	2b00      	cmp	r3, #0
 8009948:	d1df      	bne.n	800990a <mg_vxprintf+0x172>
 800994a:	e00b      	b.n	8009964 <mg_vxprintf+0x1cc>
 800994c:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8009950:	3301      	adds	r3, #1
 8009952:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8009956:	687a      	ldr	r2, [r7, #4]
 8009958:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800995c:	4413      	add	r3, r2
 800995e:	781b      	ldrb	r3, [r3, #0]
 8009960:	f887 306e 	strb.w	r3, [r7, #110]	@ 0x6e
 8009964:	f897 306e 	ldrb.w	r3, [r7, #110]	@ 0x6e
 8009968:	2b68      	cmp	r3, #104	@ 0x68
 800996a:	d0ef      	beq.n	800994c <mg_vxprintf+0x1b4>
 800996c:	f897 306e 	ldrb.w	r3, [r7, #110]	@ 0x6e
 8009970:	2b6c      	cmp	r3, #108	@ 0x6c
 8009972:	d121      	bne.n	80099b8 <mg_vxprintf+0x220>
 8009974:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8009976:	3301      	adds	r3, #1
 8009978:	67bb      	str	r3, [r7, #120]	@ 0x78
 800997a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800997e:	3301      	adds	r3, #1
 8009980:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8009984:	687a      	ldr	r2, [r7, #4]
 8009986:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800998a:	4413      	add	r3, r2
 800998c:	781b      	ldrb	r3, [r3, #0]
 800998e:	f887 306e 	strb.w	r3, [r7, #110]	@ 0x6e
 8009992:	f897 306e 	ldrb.w	r3, [r7, #110]	@ 0x6e
 8009996:	2b6c      	cmp	r3, #108	@ 0x6c
 8009998:	d10e      	bne.n	80099b8 <mg_vxprintf+0x220>
 800999a:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800999c:	3301      	adds	r3, #1
 800999e:	67bb      	str	r3, [r7, #120]	@ 0x78
 80099a0:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80099a4:	3301      	adds	r3, #1
 80099a6:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 80099aa:	687a      	ldr	r2, [r7, #4]
 80099ac:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80099b0:	4413      	add	r3, r2
 80099b2:	781b      	ldrb	r3, [r3, #0]
 80099b4:	f887 306e 	strb.w	r3, [r7, #110]	@ 0x6e
 80099b8:	f897 306e 	ldrb.w	r3, [r7, #110]	@ 0x6e
 80099bc:	2b70      	cmp	r3, #112	@ 0x70
 80099be:	d103      	bne.n	80099c8 <mg_vxprintf+0x230>
 80099c0:	2301      	movs	r3, #1
 80099c2:	67fb      	str	r3, [r7, #124]	@ 0x7c
 80099c4:	2301      	movs	r3, #1
 80099c6:	67bb      	str	r3, [r7, #120]	@ 0x78
 80099c8:	f897 306e 	ldrb.w	r3, [r7, #110]	@ 0x6e
 80099cc:	2b64      	cmp	r3, #100	@ 0x64
 80099ce:	d018      	beq.n	8009a02 <mg_vxprintf+0x26a>
 80099d0:	f897 306e 	ldrb.w	r3, [r7, #110]	@ 0x6e
 80099d4:	2b75      	cmp	r3, #117	@ 0x75
 80099d6:	d014      	beq.n	8009a02 <mg_vxprintf+0x26a>
 80099d8:	f897 306e 	ldrb.w	r3, [r7, #110]	@ 0x6e
 80099dc:	2b78      	cmp	r3, #120	@ 0x78
 80099de:	d010      	beq.n	8009a02 <mg_vxprintf+0x26a>
 80099e0:	f897 306e 	ldrb.w	r3, [r7, #110]	@ 0x6e
 80099e4:	2b58      	cmp	r3, #88	@ 0x58
 80099e6:	d00c      	beq.n	8009a02 <mg_vxprintf+0x26a>
 80099e8:	f897 306e 	ldrb.w	r3, [r7, #110]	@ 0x6e
 80099ec:	2b70      	cmp	r3, #112	@ 0x70
 80099ee:	d008      	beq.n	8009a02 <mg_vxprintf+0x26a>
 80099f0:	f897 306e 	ldrb.w	r3, [r7, #110]	@ 0x6e
 80099f4:	2b67      	cmp	r3, #103	@ 0x67
 80099f6:	d004      	beq.n	8009a02 <mg_vxprintf+0x26a>
 80099f8:	f897 306e 	ldrb.w	r3, [r7, #110]	@ 0x6e
 80099fc:	2b66      	cmp	r3, #102	@ 0x66
 80099fe:	f040 816c 	bne.w	8009cda <mg_vxprintf+0x542>
 8009a02:	f897 306e 	ldrb.w	r3, [r7, #110]	@ 0x6e
 8009a06:	2b64      	cmp	r3, #100	@ 0x64
 8009a08:	bf0c      	ite	eq
 8009a0a:	2301      	moveq	r3, #1
 8009a0c:	2300      	movne	r3, #0
 8009a0e:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
 8009a12:	f897 306e 	ldrb.w	r3, [r7, #110]	@ 0x6e
 8009a16:	2b78      	cmp	r3, #120	@ 0x78
 8009a18:	d007      	beq.n	8009a2a <mg_vxprintf+0x292>
 8009a1a:	f897 306e 	ldrb.w	r3, [r7, #110]	@ 0x6e
 8009a1e:	2b58      	cmp	r3, #88	@ 0x58
 8009a20:	d003      	beq.n	8009a2a <mg_vxprintf+0x292>
 8009a22:	f897 306e 	ldrb.w	r3, [r7, #110]	@ 0x6e
 8009a26:	2b70      	cmp	r3, #112	@ 0x70
 8009a28:	d101      	bne.n	8009a2e <mg_vxprintf+0x296>
 8009a2a:	2301      	movs	r3, #1
 8009a2c:	e000      	b.n	8009a30 <mg_vxprintf+0x298>
 8009a2e:	2300      	movs	r3, #0
 8009a30:	f887 305e 	strb.w	r3, [r7, #94]	@ 0x5e
 8009a34:	f897 305e 	ldrb.w	r3, [r7, #94]	@ 0x5e
 8009a38:	f003 0301 	and.w	r3, r3, #1
 8009a3c:	f887 305e 	strb.w	r3, [r7, #94]	@ 0x5e
 8009a40:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8009a42:	2b00      	cmp	r3, #0
 8009a44:	d001      	beq.n	8009a4a <mg_vxprintf+0x2b2>
 8009a46:	2302      	movs	r3, #2
 8009a48:	e000      	b.n	8009a4c <mg_vxprintf+0x2b4>
 8009a4a:	2300      	movs	r3, #0
 8009a4c:	65bb      	str	r3, [r7, #88]	@ 0x58
 8009a4e:	f897 306e 	ldrb.w	r3, [r7, #110]	@ 0x6e
 8009a52:	2b67      	cmp	r3, #103	@ 0x67
 8009a54:	d003      	beq.n	8009a5e <mg_vxprintf+0x2c6>
 8009a56:	f897 306e 	ldrb.w	r3, [r7, #110]	@ 0x6e
 8009a5a:	2b66      	cmp	r3, #102	@ 0x66
 8009a5c:	d124      	bne.n	8009aa8 <mg_vxprintf+0x310>
 8009a5e:	683b      	ldr	r3, [r7, #0]
 8009a60:	681b      	ldr	r3, [r3, #0]
 8009a62:	3307      	adds	r3, #7
 8009a64:	f023 0307 	bic.w	r3, r3, #7
 8009a68:	f103 0108 	add.w	r1, r3, #8
 8009a6c:	683a      	ldr	r2, [r7, #0]
 8009a6e:	6011      	str	r1, [r2, #0]
 8009a70:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009a74:	e9c7 2310 	strd	r2, r3, [r7, #64]	@ 0x40
 8009a78:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8009a7a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009a7e:	d101      	bne.n	8009a84 <mg_vxprintf+0x2ec>
 8009a80:	2306      	movs	r3, #6
 8009a82:	673b      	str	r3, [r7, #112]	@ 0x70
 8009a84:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 8009a86:	f897 306e 	ldrb.w	r3, [r7, #110]	@ 0x6e
 8009a8a:	2b67      	cmp	r3, #103	@ 0x67
 8009a8c:	bf0c      	ite	eq
 8009a8e:	2301      	moveq	r3, #1
 8009a90:	2300      	movne	r3, #0
 8009a92:	b2db      	uxtb	r3, r3
 8009a94:	f107 0014 	add.w	r0, r7, #20
 8009a98:	ed97 0b10 	vldr	d0, [r7, #64]	@ 0x40
 8009a9c:	2128      	movs	r1, #40	@ 0x28
 8009a9e:	f7ff fafb 	bl	8009098 <mg_dtoa>
 8009aa2:	f8c7 0080 	str.w	r0, [r7, #128]	@ 0x80
 8009aa6:	e069      	b.n	8009b7c <mg_vxprintf+0x3e4>
 8009aa8:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8009aaa:	2b02      	cmp	r3, #2
 8009aac:	d11c      	bne.n	8009ae8 <mg_vxprintf+0x350>
 8009aae:	683b      	ldr	r3, [r7, #0]
 8009ab0:	681b      	ldr	r3, [r3, #0]
 8009ab2:	3307      	adds	r3, #7
 8009ab4:	f023 0307 	bic.w	r3, r3, #7
 8009ab8:	f103 0108 	add.w	r1, r3, #8
 8009abc:	683a      	ldr	r2, [r7, #0]
 8009abe:	6011      	str	r1, [r2, #0]
 8009ac0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009ac4:	e9c7 2312 	strd	r2, r3, [r7, #72]	@ 0x48
 8009ac8:	f107 0114 	add.w	r1, r7, #20
 8009acc:	f897 305e 	ldrb.w	r3, [r7, #94]	@ 0x5e
 8009ad0:	9301      	str	r3, [sp, #4]
 8009ad2:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8009ad6:	9300      	str	r3, [sp, #0]
 8009ad8:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8009adc:	4608      	mov	r0, r1
 8009ade:	f7ff fd6d 	bl	80095bc <mg_lld>
 8009ae2:	f8c7 0080 	str.w	r0, [r7, #128]	@ 0x80
 8009ae6:	e049      	b.n	8009b7c <mg_vxprintf+0x3e4>
 8009ae8:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8009aea:	2b01      	cmp	r3, #1
 8009aec:	d123      	bne.n	8009b36 <mg_vxprintf+0x39e>
 8009aee:	683b      	ldr	r3, [r7, #0]
 8009af0:	681b      	ldr	r3, [r3, #0]
 8009af2:	1d19      	adds	r1, r3, #4
 8009af4:	683a      	ldr	r2, [r7, #0]
 8009af6:	6011      	str	r1, [r2, #0]
 8009af8:	681b      	ldr	r3, [r3, #0]
 8009afa:	653b      	str	r3, [r7, #80]	@ 0x50
 8009afc:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8009b00:	2b00      	cmp	r3, #0
 8009b02:	d004      	beq.n	8009b0e <mg_vxprintf+0x376>
 8009b04:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8009b06:	17da      	asrs	r2, r3, #31
 8009b08:	461c      	mov	r4, r3
 8009b0a:	4615      	mov	r5, r2
 8009b0c:	e003      	b.n	8009b16 <mg_vxprintf+0x37e>
 8009b0e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8009b10:	2200      	movs	r2, #0
 8009b12:	461c      	mov	r4, r3
 8009b14:	4615      	mov	r5, r2
 8009b16:	f107 0114 	add.w	r1, r7, #20
 8009b1a:	f897 305e 	ldrb.w	r3, [r7, #94]	@ 0x5e
 8009b1e:	9301      	str	r3, [sp, #4]
 8009b20:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8009b24:	9300      	str	r3, [sp, #0]
 8009b26:	4622      	mov	r2, r4
 8009b28:	462b      	mov	r3, r5
 8009b2a:	4608      	mov	r0, r1
 8009b2c:	f7ff fd46 	bl	80095bc <mg_lld>
 8009b30:	f8c7 0080 	str.w	r0, [r7, #128]	@ 0x80
 8009b34:	e022      	b.n	8009b7c <mg_vxprintf+0x3e4>
 8009b36:	683b      	ldr	r3, [r7, #0]
 8009b38:	681b      	ldr	r3, [r3, #0]
 8009b3a:	1d19      	adds	r1, r3, #4
 8009b3c:	683a      	ldr	r2, [r7, #0]
 8009b3e:	6011      	str	r1, [r2, #0]
 8009b40:	681b      	ldr	r3, [r3, #0]
 8009b42:	657b      	str	r3, [r7, #84]	@ 0x54
 8009b44:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8009b48:	2b00      	cmp	r3, #0
 8009b4a:	d004      	beq.n	8009b56 <mg_vxprintf+0x3be>
 8009b4c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8009b4e:	17da      	asrs	r2, r3, #31
 8009b50:	4698      	mov	r8, r3
 8009b52:	4691      	mov	r9, r2
 8009b54:	e003      	b.n	8009b5e <mg_vxprintf+0x3c6>
 8009b56:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8009b58:	2200      	movs	r2, #0
 8009b5a:	4698      	mov	r8, r3
 8009b5c:	4691      	mov	r9, r2
 8009b5e:	f107 0114 	add.w	r1, r7, #20
 8009b62:	f897 305e 	ldrb.w	r3, [r7, #94]	@ 0x5e
 8009b66:	9301      	str	r3, [sp, #4]
 8009b68:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8009b6c:	9300      	str	r3, [sp, #0]
 8009b6e:	4642      	mov	r2, r8
 8009b70:	464b      	mov	r3, r9
 8009b72:	4608      	mov	r0, r1
 8009b74:	f7ff fd22 	bl	80095bc <mg_lld>
 8009b78:	f8c7 0080 	str.w	r0, [r7, #128]	@ 0x80
 8009b7c:	2300      	movs	r3, #0
 8009b7e:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8009b82:	e007      	b.n	8009b94 <mg_vxprintf+0x3fc>
 8009b84:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8009b86:	3b01      	subs	r3, #1
 8009b88:	677b      	str	r3, [r7, #116]	@ 0x74
 8009b8a:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8009b8e:	3301      	adds	r3, #1
 8009b90:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8009b94:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 8009b98:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8009b9a:	429a      	cmp	r2, r3
 8009b9c:	d202      	bcs.n	8009ba4 <mg_vxprintf+0x40c>
 8009b9e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8009ba0:	2b00      	cmp	r3, #0
 8009ba2:	d1ef      	bne.n	8009b84 <mg_vxprintf+0x3ec>
 8009ba4:	2300      	movs	r3, #0
 8009ba6:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8009baa:	e011      	b.n	8009bd0 <mg_vxprintf+0x438>
 8009bac:	f107 023f 	add.w	r2, r7, #63	@ 0x3f
 8009bb0:	2301      	movs	r3, #1
 8009bb2:	68b9      	ldr	r1, [r7, #8]
 8009bb4:	68f8      	ldr	r0, [r7, #12]
 8009bb6:	f7ff fdb1 	bl	800971c <scpy>
 8009bba:	4602      	mov	r2, r0
 8009bbc:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8009bc0:	4413      	add	r3, r2
 8009bc2:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8009bc6:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8009bca:	3301      	adds	r3, #1
 8009bcc:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8009bd0:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8009bd4:	2b20      	cmp	r3, #32
 8009bd6:	d110      	bne.n	8009bfa <mg_vxprintf+0x462>
 8009bd8:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
 8009bdc:	2b00      	cmp	r3, #0
 8009bde:	d10c      	bne.n	8009bfa <mg_vxprintf+0x462>
 8009be0:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8009be4:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8009be6:	429a      	cmp	r2, r3
 8009be8:	d207      	bcs.n	8009bfa <mg_vxprintf+0x462>
 8009bea:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 8009bee:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8009bf2:	4413      	add	r3, r2
 8009bf4:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 8009bf6:	429a      	cmp	r2, r3
 8009bf8:	d8d8      	bhi.n	8009bac <mg_vxprintf+0x414>
 8009bfa:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8009bfc:	4ab7      	ldr	r2, [pc, #732]	@ (8009edc <mg_vxprintf+0x744>)
 8009bfe:	68b9      	ldr	r1, [r7, #8]
 8009c00:	68f8      	ldr	r0, [r7, #12]
 8009c02:	f7ff fd8b 	bl	800971c <scpy>
 8009c06:	4602      	mov	r2, r0
 8009c08:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8009c0c:	4413      	add	r3, r2
 8009c0e:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8009c12:	2300      	movs	r3, #0
 8009c14:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8009c18:	e011      	b.n	8009c3e <mg_vxprintf+0x4a6>
 8009c1a:	f107 023f 	add.w	r2, r7, #63	@ 0x3f
 8009c1e:	2301      	movs	r3, #1
 8009c20:	68b9      	ldr	r1, [r7, #8]
 8009c22:	68f8      	ldr	r0, [r7, #12]
 8009c24:	f7ff fd7a 	bl	800971c <scpy>
 8009c28:	4602      	mov	r2, r0
 8009c2a:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8009c2e:	4413      	add	r3, r2
 8009c30:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8009c34:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8009c38:	3301      	adds	r3, #1
 8009c3a:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8009c3e:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8009c42:	2b30      	cmp	r3, #48	@ 0x30
 8009c44:	d10c      	bne.n	8009c60 <mg_vxprintf+0x4c8>
 8009c46:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8009c4a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8009c4c:	429a      	cmp	r2, r3
 8009c4e:	d207      	bcs.n	8009c60 <mg_vxprintf+0x4c8>
 8009c50:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 8009c54:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8009c58:	4413      	add	r3, r2
 8009c5a:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 8009c5c:	429a      	cmp	r2, r3
 8009c5e:	d8dc      	bhi.n	8009c1a <mg_vxprintf+0x482>
 8009c60:	f107 0214 	add.w	r2, r7, #20
 8009c64:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8009c68:	68b9      	ldr	r1, [r7, #8]
 8009c6a:	68f8      	ldr	r0, [r7, #12]
 8009c6c:	f7ff fd56 	bl	800971c <scpy>
 8009c70:	4602      	mov	r2, r0
 8009c72:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8009c76:	4413      	add	r3, r2
 8009c78:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8009c7c:	2300      	movs	r3, #0
 8009c7e:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8009c82:	e011      	b.n	8009ca8 <mg_vxprintf+0x510>
 8009c84:	f107 023f 	add.w	r2, r7, #63	@ 0x3f
 8009c88:	2301      	movs	r3, #1
 8009c8a:	68b9      	ldr	r1, [r7, #8]
 8009c8c:	68f8      	ldr	r0, [r7, #12]
 8009c8e:	f7ff fd45 	bl	800971c <scpy>
 8009c92:	4602      	mov	r2, r0
 8009c94:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8009c98:	4413      	add	r3, r2
 8009c9a:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8009c9e:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8009ca2:	3301      	adds	r3, #1
 8009ca4:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8009ca8:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8009cac:	2b20      	cmp	r3, #32
 8009cae:	f040 80ea 	bne.w	8009e86 <mg_vxprintf+0x6ee>
 8009cb2:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
 8009cb6:	2b00      	cmp	r3, #0
 8009cb8:	f000 80e5 	beq.w	8009e86 <mg_vxprintf+0x6ee>
 8009cbc:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8009cc0:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8009cc2:	429a      	cmp	r2, r3
 8009cc4:	f080 80df 	bcs.w	8009e86 <mg_vxprintf+0x6ee>
 8009cc8:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 8009ccc:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8009cd0:	4413      	add	r3, r2
 8009cd2:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 8009cd4:	429a      	cmp	r2, r3
 8009cd6:	d8d5      	bhi.n	8009c84 <mg_vxprintf+0x4ec>
 8009cd8:	e0d5      	b.n	8009e86 <mg_vxprintf+0x6ee>
 8009cda:	f897 306e 	ldrb.w	r3, [r7, #110]	@ 0x6e
 8009cde:	2b6d      	cmp	r3, #109	@ 0x6d
 8009ce0:	d003      	beq.n	8009cea <mg_vxprintf+0x552>
 8009ce2:	f897 306e 	ldrb.w	r3, [r7, #110]	@ 0x6e
 8009ce6:	2b4d      	cmp	r3, #77	@ 0x4d
 8009ce8:	d128      	bne.n	8009d3c <mg_vxprintf+0x5a4>
 8009cea:	683b      	ldr	r3, [r7, #0]
 8009cec:	681b      	ldr	r3, [r3, #0]
 8009cee:	1d19      	adds	r1, r3, #4
 8009cf0:	683a      	ldr	r2, [r7, #0]
 8009cf2:	6011      	str	r1, [r2, #0]
 8009cf4:	681b      	ldr	r3, [r3, #0]
 8009cf6:	663b      	str	r3, [r7, #96]	@ 0x60
 8009cf8:	f897 306e 	ldrb.w	r3, [r7, #110]	@ 0x6e
 8009cfc:	2b6d      	cmp	r3, #109	@ 0x6d
 8009cfe:	d103      	bne.n	8009d08 <mg_vxprintf+0x570>
 8009d00:	68fb      	ldr	r3, [r7, #12]
 8009d02:	68b9      	ldr	r1, [r7, #8]
 8009d04:	2022      	movs	r0, #34	@ 0x22
 8009d06:	4798      	blx	r3
 8009d08:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8009d0a:	683a      	ldr	r2, [r7, #0]
 8009d0c:	68b9      	ldr	r1, [r7, #8]
 8009d0e:	68f8      	ldr	r0, [r7, #12]
 8009d10:	4798      	blx	r3
 8009d12:	4602      	mov	r2, r0
 8009d14:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8009d18:	4413      	add	r3, r2
 8009d1a:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8009d1e:	f897 306e 	ldrb.w	r3, [r7, #110]	@ 0x6e
 8009d22:	2b6d      	cmp	r3, #109	@ 0x6d
 8009d24:	f040 80b1 	bne.w	8009e8a <mg_vxprintf+0x6f2>
 8009d28:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8009d2c:	3302      	adds	r3, #2
 8009d2e:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8009d32:	68fb      	ldr	r3, [r7, #12]
 8009d34:	68b9      	ldr	r1, [r7, #8]
 8009d36:	2022      	movs	r0, #34	@ 0x22
 8009d38:	4798      	blx	r3
 8009d3a:	e0a6      	b.n	8009e8a <mg_vxprintf+0x6f2>
 8009d3c:	f897 306e 	ldrb.w	r3, [r7, #110]	@ 0x6e
 8009d40:	2b63      	cmp	r3, #99	@ 0x63
 8009d42:	d112      	bne.n	8009d6a <mg_vxprintf+0x5d2>
 8009d44:	683b      	ldr	r3, [r7, #0]
 8009d46:	681b      	ldr	r3, [r3, #0]
 8009d48:	1d19      	adds	r1, r3, #4
 8009d4a:	683a      	ldr	r2, [r7, #0]
 8009d4c:	6011      	str	r1, [r2, #0]
 8009d4e:	681b      	ldr	r3, [r3, #0]
 8009d50:	667b      	str	r3, [r7, #100]	@ 0x64
 8009d52:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8009d54:	b2da      	uxtb	r2, r3
 8009d56:	68fb      	ldr	r3, [r7, #12]
 8009d58:	68b9      	ldr	r1, [r7, #8]
 8009d5a:	4610      	mov	r0, r2
 8009d5c:	4798      	blx	r3
 8009d5e:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8009d62:	3301      	adds	r3, #1
 8009d64:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8009d68:	e090      	b.n	8009e8c <mg_vxprintf+0x6f4>
 8009d6a:	f897 306e 	ldrb.w	r3, [r7, #110]	@ 0x6e
 8009d6e:	2b73      	cmp	r3, #115	@ 0x73
 8009d70:	d16b      	bne.n	8009e4a <mg_vxprintf+0x6b2>
 8009d72:	683b      	ldr	r3, [r7, #0]
 8009d74:	681b      	ldr	r3, [r3, #0]
 8009d76:	1d19      	adds	r1, r3, #4
 8009d78:	683a      	ldr	r2, [r7, #0]
 8009d7a:	6011      	str	r1, [r2, #0]
 8009d7c:	681b      	ldr	r3, [r3, #0]
 8009d7e:	66bb      	str	r3, [r7, #104]	@ 0x68
 8009d80:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8009d82:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009d86:	d109      	bne.n	8009d9c <mg_vxprintf+0x604>
 8009d88:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8009d8a:	2b00      	cmp	r3, #0
 8009d8c:	d004      	beq.n	8009d98 <mg_vxprintf+0x600>
 8009d8e:	6eb8      	ldr	r0, [r7, #104]	@ 0x68
 8009d90:	f7f6 faf6 	bl	8000380 <strlen>
 8009d94:	4603      	mov	r3, r0
 8009d96:	e000      	b.n	8009d9a <mg_vxprintf+0x602>
 8009d98:	2300      	movs	r3, #0
 8009d9a:	673b      	str	r3, [r7, #112]	@ 0x70
 8009d9c:	2300      	movs	r3, #0
 8009d9e:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8009da2:	e011      	b.n	8009dc8 <mg_vxprintf+0x630>
 8009da4:	f107 023f 	add.w	r2, r7, #63	@ 0x3f
 8009da8:	2301      	movs	r3, #1
 8009daa:	68b9      	ldr	r1, [r7, #8]
 8009dac:	68f8      	ldr	r0, [r7, #12]
 8009dae:	f7ff fcb5 	bl	800971c <scpy>
 8009db2:	4602      	mov	r2, r0
 8009db4:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8009db8:	4413      	add	r3, r2
 8009dba:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8009dbe:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8009dc2:	3301      	adds	r3, #1
 8009dc4:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8009dc8:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
 8009dcc:	2b00      	cmp	r3, #0
 8009dce:	d10a      	bne.n	8009de6 <mg_vxprintf+0x64e>
 8009dd0:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 8009dd2:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8009dd4:	429a      	cmp	r2, r3
 8009dd6:	d206      	bcs.n	8009de6 <mg_vxprintf+0x64e>
 8009dd8:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 8009ddc:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8009dde:	4413      	add	r3, r2
 8009de0:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 8009de2:	429a      	cmp	r2, r3
 8009de4:	d8de      	bhi.n	8009da4 <mg_vxprintf+0x60c>
 8009de6:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8009de8:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 8009dea:	68b9      	ldr	r1, [r7, #8]
 8009dec:	68f8      	ldr	r0, [r7, #12]
 8009dee:	f7ff fc95 	bl	800971c <scpy>
 8009df2:	4602      	mov	r2, r0
 8009df4:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8009df8:	4413      	add	r3, r2
 8009dfa:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8009dfe:	2300      	movs	r3, #0
 8009e00:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8009e04:	e011      	b.n	8009e2a <mg_vxprintf+0x692>
 8009e06:	f107 023f 	add.w	r2, r7, #63	@ 0x3f
 8009e0a:	2301      	movs	r3, #1
 8009e0c:	68b9      	ldr	r1, [r7, #8]
 8009e0e:	68f8      	ldr	r0, [r7, #12]
 8009e10:	f7ff fc84 	bl	800971c <scpy>
 8009e14:	4602      	mov	r2, r0
 8009e16:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8009e1a:	4413      	add	r3, r2
 8009e1c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8009e20:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8009e24:	3301      	adds	r3, #1
 8009e26:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8009e2a:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
 8009e2e:	2b00      	cmp	r3, #0
 8009e30:	d02c      	beq.n	8009e8c <mg_vxprintf+0x6f4>
 8009e32:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 8009e34:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8009e36:	429a      	cmp	r2, r3
 8009e38:	d228      	bcs.n	8009e8c <mg_vxprintf+0x6f4>
 8009e3a:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 8009e3e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8009e40:	4413      	add	r3, r2
 8009e42:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 8009e44:	429a      	cmp	r2, r3
 8009e46:	d8de      	bhi.n	8009e06 <mg_vxprintf+0x66e>
 8009e48:	e020      	b.n	8009e8c <mg_vxprintf+0x6f4>
 8009e4a:	f897 306e 	ldrb.w	r3, [r7, #110]	@ 0x6e
 8009e4e:	2b25      	cmp	r3, #37	@ 0x25
 8009e50:	d109      	bne.n	8009e66 <mg_vxprintf+0x6ce>
 8009e52:	68fb      	ldr	r3, [r7, #12]
 8009e54:	68b9      	ldr	r1, [r7, #8]
 8009e56:	2025      	movs	r0, #37	@ 0x25
 8009e58:	4798      	blx	r3
 8009e5a:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8009e5e:	3301      	adds	r3, #1
 8009e60:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8009e64:	e012      	b.n	8009e8c <mg_vxprintf+0x6f4>
 8009e66:	68fb      	ldr	r3, [r7, #12]
 8009e68:	68b9      	ldr	r1, [r7, #8]
 8009e6a:	2025      	movs	r0, #37	@ 0x25
 8009e6c:	4798      	blx	r3
 8009e6e:	f897 206e 	ldrb.w	r2, [r7, #110]	@ 0x6e
 8009e72:	68fb      	ldr	r3, [r7, #12]
 8009e74:	68b9      	ldr	r1, [r7, #8]
 8009e76:	4610      	mov	r0, r2
 8009e78:	4798      	blx	r3
 8009e7a:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8009e7e:	3302      	adds	r3, #2
 8009e80:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8009e84:	e002      	b.n	8009e8c <mg_vxprintf+0x6f4>
 8009e86:	bf00      	nop
 8009e88:	e000      	b.n	8009e8c <mg_vxprintf+0x6f4>
 8009e8a:	bf00      	nop
 8009e8c:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8009e90:	3301      	adds	r3, #1
 8009e92:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8009e96:	e012      	b.n	8009ebe <mg_vxprintf+0x726>
 8009e98:	687a      	ldr	r2, [r7, #4]
 8009e9a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8009e9e:	4413      	add	r3, r2
 8009ea0:	781a      	ldrb	r2, [r3, #0]
 8009ea2:	68fb      	ldr	r3, [r7, #12]
 8009ea4:	68b9      	ldr	r1, [r7, #8]
 8009ea6:	4610      	mov	r0, r2
 8009ea8:	4798      	blx	r3
 8009eaa:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8009eae:	3301      	adds	r3, #1
 8009eb0:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8009eb4:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8009eb8:	3301      	adds	r3, #1
 8009eba:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8009ebe:	687a      	ldr	r2, [r7, #4]
 8009ec0:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8009ec4:	4413      	add	r3, r2
 8009ec6:	781b      	ldrb	r3, [r3, #0]
 8009ec8:	2b00      	cmp	r3, #0
 8009eca:	f47f ac74 	bne.w	80097b6 <mg_vxprintf+0x1e>
 8009ece:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8009ed2:	4618      	mov	r0, r3
 8009ed4:	3790      	adds	r7, #144	@ 0x90
 8009ed6:	46bd      	mov	sp, r7
 8009ed8:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8009edc:	0801a634 	.word	0x0801a634

08009ee0 <mg_to_size_t>:
 8009ee0:	b480      	push	{r7}
 8009ee2:	b08b      	sub	sp, #44	@ 0x2c
 8009ee4:	af00      	add	r7, sp, #0
 8009ee6:	f107 0308 	add.w	r3, r7, #8
 8009eea:	e883 0003 	stmia.w	r3, {r0, r1}
 8009eee:	607a      	str	r2, [r7, #4]
 8009ef0:	2300      	movs	r3, #0
 8009ef2:	627b      	str	r3, [r7, #36]	@ 0x24
 8009ef4:	f04f 33ff 	mov.w	r3, #4294967295
 8009ef8:	61bb      	str	r3, [r7, #24]
 8009efa:	69bb      	ldr	r3, [r7, #24]
 8009efc:	4a42      	ldr	r2, [pc, #264]	@ (800a008 <mg_to_size_t+0x128>)
 8009efe:	fba2 2303 	umull	r2, r3, r2, r3
 8009f02:	08db      	lsrs	r3, r3, #3
 8009f04:	617b      	str	r3, [r7, #20]
 8009f06:	2300      	movs	r3, #0
 8009f08:	623b      	str	r3, [r7, #32]
 8009f0a:	2300      	movs	r3, #0
 8009f0c:	61fb      	str	r3, [r7, #28]
 8009f0e:	e002      	b.n	8009f16 <mg_to_size_t+0x36>
 8009f10:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009f12:	3301      	adds	r3, #1
 8009f14:	627b      	str	r3, [r7, #36]	@ 0x24
 8009f16:	68fb      	ldr	r3, [r7, #12]
 8009f18:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8009f1a:	429a      	cmp	r2, r3
 8009f1c:	d20b      	bcs.n	8009f36 <mg_to_size_t+0x56>
 8009f1e:	68ba      	ldr	r2, [r7, #8]
 8009f20:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009f22:	4413      	add	r3, r2
 8009f24:	781b      	ldrb	r3, [r3, #0]
 8009f26:	2b20      	cmp	r3, #32
 8009f28:	d0f2      	beq.n	8009f10 <mg_to_size_t+0x30>
 8009f2a:	68ba      	ldr	r2, [r7, #8]
 8009f2c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009f2e:	4413      	add	r3, r2
 8009f30:	781b      	ldrb	r3, [r3, #0]
 8009f32:	2b09      	cmp	r3, #9
 8009f34:	d0ec      	beq.n	8009f10 <mg_to_size_t+0x30>
 8009f36:	68fb      	ldr	r3, [r7, #12]
 8009f38:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8009f3a:	429a      	cmp	r2, r3
 8009f3c:	d22b      	bcs.n	8009f96 <mg_to_size_t+0xb6>
 8009f3e:	68ba      	ldr	r2, [r7, #8]
 8009f40:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009f42:	4413      	add	r3, r2
 8009f44:	781b      	ldrb	r3, [r3, #0]
 8009f46:	2b2d      	cmp	r3, #45	@ 0x2d
 8009f48:	d125      	bne.n	8009f96 <mg_to_size_t+0xb6>
 8009f4a:	2300      	movs	r3, #0
 8009f4c:	e056      	b.n	8009ffc <mg_to_size_t+0x11c>
 8009f4e:	68ba      	ldr	r2, [r7, #8]
 8009f50:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009f52:	4413      	add	r3, r2
 8009f54:	781b      	ldrb	r3, [r3, #0]
 8009f56:	3b30      	subs	r3, #48	@ 0x30
 8009f58:	613b      	str	r3, [r7, #16]
 8009f5a:	6a3a      	ldr	r2, [r7, #32]
 8009f5c:	697b      	ldr	r3, [r7, #20]
 8009f5e:	429a      	cmp	r2, r3
 8009f60:	d901      	bls.n	8009f66 <mg_to_size_t+0x86>
 8009f62:	2300      	movs	r3, #0
 8009f64:	e04a      	b.n	8009ffc <mg_to_size_t+0x11c>
 8009f66:	6a3a      	ldr	r2, [r7, #32]
 8009f68:	4613      	mov	r3, r2
 8009f6a:	009b      	lsls	r3, r3, #2
 8009f6c:	4413      	add	r3, r2
 8009f6e:	005b      	lsls	r3, r3, #1
 8009f70:	623b      	str	r3, [r7, #32]
 8009f72:	69ba      	ldr	r2, [r7, #24]
 8009f74:	693b      	ldr	r3, [r7, #16]
 8009f76:	1ad3      	subs	r3, r2, r3
 8009f78:	6a3a      	ldr	r2, [r7, #32]
 8009f7a:	429a      	cmp	r2, r3
 8009f7c:	d901      	bls.n	8009f82 <mg_to_size_t+0xa2>
 8009f7e:	2300      	movs	r3, #0
 8009f80:	e03c      	b.n	8009ffc <mg_to_size_t+0x11c>
 8009f82:	6a3a      	ldr	r2, [r7, #32]
 8009f84:	693b      	ldr	r3, [r7, #16]
 8009f86:	4413      	add	r3, r2
 8009f88:	623b      	str	r3, [r7, #32]
 8009f8a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009f8c:	3301      	adds	r3, #1
 8009f8e:	627b      	str	r3, [r7, #36]	@ 0x24
 8009f90:	69fb      	ldr	r3, [r7, #28]
 8009f92:	3301      	adds	r3, #1
 8009f94:	61fb      	str	r3, [r7, #28]
 8009f96:	68fb      	ldr	r3, [r7, #12]
 8009f98:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8009f9a:	429a      	cmp	r2, r3
 8009f9c:	d20f      	bcs.n	8009fbe <mg_to_size_t+0xde>
 8009f9e:	68ba      	ldr	r2, [r7, #8]
 8009fa0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009fa2:	4413      	add	r3, r2
 8009fa4:	781b      	ldrb	r3, [r3, #0]
 8009fa6:	2b2f      	cmp	r3, #47	@ 0x2f
 8009fa8:	d909      	bls.n	8009fbe <mg_to_size_t+0xde>
 8009faa:	68ba      	ldr	r2, [r7, #8]
 8009fac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009fae:	4413      	add	r3, r2
 8009fb0:	781b      	ldrb	r3, [r3, #0]
 8009fb2:	2b39      	cmp	r3, #57	@ 0x39
 8009fb4:	d9cb      	bls.n	8009f4e <mg_to_size_t+0x6e>
 8009fb6:	e002      	b.n	8009fbe <mg_to_size_t+0xde>
 8009fb8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009fba:	3301      	adds	r3, #1
 8009fbc:	627b      	str	r3, [r7, #36]	@ 0x24
 8009fbe:	68fb      	ldr	r3, [r7, #12]
 8009fc0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8009fc2:	429a      	cmp	r2, r3
 8009fc4:	d20b      	bcs.n	8009fde <mg_to_size_t+0xfe>
 8009fc6:	68ba      	ldr	r2, [r7, #8]
 8009fc8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009fca:	4413      	add	r3, r2
 8009fcc:	781b      	ldrb	r3, [r3, #0]
 8009fce:	2b20      	cmp	r3, #32
 8009fd0:	d0f2      	beq.n	8009fb8 <mg_to_size_t+0xd8>
 8009fd2:	68ba      	ldr	r2, [r7, #8]
 8009fd4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009fd6:	4413      	add	r3, r2
 8009fd8:	781b      	ldrb	r3, [r3, #0]
 8009fda:	2b09      	cmp	r3, #9
 8009fdc:	d0ec      	beq.n	8009fb8 <mg_to_size_t+0xd8>
 8009fde:	69fb      	ldr	r3, [r7, #28]
 8009fe0:	2b00      	cmp	r3, #0
 8009fe2:	d101      	bne.n	8009fe8 <mg_to_size_t+0x108>
 8009fe4:	2300      	movs	r3, #0
 8009fe6:	e009      	b.n	8009ffc <mg_to_size_t+0x11c>
 8009fe8:	68fb      	ldr	r3, [r7, #12]
 8009fea:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8009fec:	429a      	cmp	r2, r3
 8009fee:	d001      	beq.n	8009ff4 <mg_to_size_t+0x114>
 8009ff0:	2300      	movs	r3, #0
 8009ff2:	e003      	b.n	8009ffc <mg_to_size_t+0x11c>
 8009ff4:	687b      	ldr	r3, [r7, #4]
 8009ff6:	6a3a      	ldr	r2, [r7, #32]
 8009ff8:	601a      	str	r2, [r3, #0]
 8009ffa:	2301      	movs	r3, #1
 8009ffc:	4618      	mov	r0, r3
 8009ffe:	372c      	adds	r7, #44	@ 0x2c
 800a000:	46bd      	mov	sp, r7
 800a002:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a006:	4770      	bx	lr
 800a008:	cccccccd 	.word	0xcccccccd

0800a00c <isok>:
 800a00c:	b480      	push	{r7}
 800a00e:	b083      	sub	sp, #12
 800a010:	af00      	add	r7, sp, #0
 800a012:	4603      	mov	r3, r0
 800a014:	71fb      	strb	r3, [r7, #7]
 800a016:	79fb      	ldrb	r3, [r7, #7]
 800a018:	2b0a      	cmp	r3, #10
 800a01a:	d005      	beq.n	800a028 <isok+0x1c>
 800a01c:	79fb      	ldrb	r3, [r7, #7]
 800a01e:	2b0d      	cmp	r3, #13
 800a020:	d002      	beq.n	800a028 <isok+0x1c>
 800a022:	79fb      	ldrb	r3, [r7, #7]
 800a024:	2b1f      	cmp	r3, #31
 800a026:	d901      	bls.n	800a02c <isok+0x20>
 800a028:	2301      	movs	r3, #1
 800a02a:	e000      	b.n	800a02e <isok+0x22>
 800a02c:	2300      	movs	r3, #0
 800a02e:	f003 0301 	and.w	r3, r3, #1
 800a032:	b2db      	uxtb	r3, r3
 800a034:	4618      	mov	r0, r3
 800a036:	370c      	adds	r7, #12
 800a038:	46bd      	mov	sp, r7
 800a03a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a03e:	4770      	bx	lr

0800a040 <mg_http_get_request_len>:
 800a040:	b580      	push	{r7, lr}
 800a042:	b084      	sub	sp, #16
 800a044:	af00      	add	r7, sp, #0
 800a046:	6078      	str	r0, [r7, #4]
 800a048:	6039      	str	r1, [r7, #0]
 800a04a:	2300      	movs	r3, #0
 800a04c:	60fb      	str	r3, [r7, #12]
 800a04e:	e03c      	b.n	800a0ca <mg_http_get_request_len+0x8a>
 800a050:	687a      	ldr	r2, [r7, #4]
 800a052:	68fb      	ldr	r3, [r7, #12]
 800a054:	4413      	add	r3, r2
 800a056:	781b      	ldrb	r3, [r3, #0]
 800a058:	4618      	mov	r0, r3
 800a05a:	f7ff ffd7 	bl	800a00c <isok>
 800a05e:	4603      	mov	r3, r0
 800a060:	f083 0301 	eor.w	r3, r3, #1
 800a064:	b2db      	uxtb	r3, r3
 800a066:	2b00      	cmp	r3, #0
 800a068:	d002      	beq.n	800a070 <mg_http_get_request_len+0x30>
 800a06a:	f04f 33ff 	mov.w	r3, #4294967295
 800a06e:	e031      	b.n	800a0d4 <mg_http_get_request_len+0x94>
 800a070:	68fb      	ldr	r3, [r7, #12]
 800a072:	2b00      	cmp	r3, #0
 800a074:	d00c      	beq.n	800a090 <mg_http_get_request_len+0x50>
 800a076:	687a      	ldr	r2, [r7, #4]
 800a078:	68fb      	ldr	r3, [r7, #12]
 800a07a:	4413      	add	r3, r2
 800a07c:	781b      	ldrb	r3, [r3, #0]
 800a07e:	2b0a      	cmp	r3, #10
 800a080:	d106      	bne.n	800a090 <mg_http_get_request_len+0x50>
 800a082:	68fb      	ldr	r3, [r7, #12]
 800a084:	3b01      	subs	r3, #1
 800a086:	687a      	ldr	r2, [r7, #4]
 800a088:	4413      	add	r3, r2
 800a08a:	781b      	ldrb	r3, [r3, #0]
 800a08c:	2b0a      	cmp	r3, #10
 800a08e:	d016      	beq.n	800a0be <mg_http_get_request_len+0x7e>
 800a090:	68fb      	ldr	r3, [r7, #12]
 800a092:	2b03      	cmp	r3, #3
 800a094:	d916      	bls.n	800a0c4 <mg_http_get_request_len+0x84>
 800a096:	687a      	ldr	r2, [r7, #4]
 800a098:	68fb      	ldr	r3, [r7, #12]
 800a09a:	4413      	add	r3, r2
 800a09c:	781b      	ldrb	r3, [r3, #0]
 800a09e:	2b0a      	cmp	r3, #10
 800a0a0:	d110      	bne.n	800a0c4 <mg_http_get_request_len+0x84>
 800a0a2:	68fb      	ldr	r3, [r7, #12]
 800a0a4:	3b01      	subs	r3, #1
 800a0a6:	687a      	ldr	r2, [r7, #4]
 800a0a8:	4413      	add	r3, r2
 800a0aa:	781b      	ldrb	r3, [r3, #0]
 800a0ac:	2b0d      	cmp	r3, #13
 800a0ae:	d109      	bne.n	800a0c4 <mg_http_get_request_len+0x84>
 800a0b0:	68fb      	ldr	r3, [r7, #12]
 800a0b2:	3b02      	subs	r3, #2
 800a0b4:	687a      	ldr	r2, [r7, #4]
 800a0b6:	4413      	add	r3, r2
 800a0b8:	781b      	ldrb	r3, [r3, #0]
 800a0ba:	2b0a      	cmp	r3, #10
 800a0bc:	d102      	bne.n	800a0c4 <mg_http_get_request_len+0x84>
 800a0be:	68fb      	ldr	r3, [r7, #12]
 800a0c0:	3301      	adds	r3, #1
 800a0c2:	e007      	b.n	800a0d4 <mg_http_get_request_len+0x94>
 800a0c4:	68fb      	ldr	r3, [r7, #12]
 800a0c6:	3301      	adds	r3, #1
 800a0c8:	60fb      	str	r3, [r7, #12]
 800a0ca:	68fa      	ldr	r2, [r7, #12]
 800a0cc:	683b      	ldr	r3, [r7, #0]
 800a0ce:	429a      	cmp	r2, r3
 800a0d0:	d3be      	bcc.n	800a050 <mg_http_get_request_len+0x10>
 800a0d2:	2300      	movs	r3, #0
 800a0d4:	4618      	mov	r0, r3
 800a0d6:	3710      	adds	r7, #16
 800a0d8:	46bd      	mov	sp, r7
 800a0da:	bd80      	pop	{r7, pc}

0800a0dc <mg_http_get_header>:
 800a0dc:	b580      	push	{r7, lr}
 800a0de:	b088      	sub	sp, #32
 800a0e0:	af00      	add	r7, sp, #0
 800a0e2:	6078      	str	r0, [r7, #4]
 800a0e4:	6039      	str	r1, [r7, #0]
 800a0e6:	6838      	ldr	r0, [r7, #0]
 800a0e8:	f7f6 f94a 	bl	8000380 <strlen>
 800a0ec:	61b8      	str	r0, [r7, #24]
 800a0ee:	231e      	movs	r3, #30
 800a0f0:	617b      	str	r3, [r7, #20]
 800a0f2:	2300      	movs	r3, #0
 800a0f4:	61fb      	str	r3, [r7, #28]
 800a0f6:	e01f      	b.n	800a138 <mg_http_get_header+0x5c>
 800a0f8:	69fb      	ldr	r3, [r7, #28]
 800a0fa:	3302      	adds	r3, #2
 800a0fc:	011b      	lsls	r3, r3, #4
 800a0fe:	687a      	ldr	r2, [r7, #4]
 800a100:	4413      	add	r3, r2
 800a102:	613b      	str	r3, [r7, #16]
 800a104:	69fb      	ldr	r3, [r7, #28]
 800a106:	011b      	lsls	r3, r3, #4
 800a108:	3328      	adds	r3, #40	@ 0x28
 800a10a:	687a      	ldr	r2, [r7, #4]
 800a10c:	4413      	add	r3, r2
 800a10e:	60fb      	str	r3, [r7, #12]
 800a110:	693b      	ldr	r3, [r7, #16]
 800a112:	685b      	ldr	r3, [r3, #4]
 800a114:	69ba      	ldr	r2, [r7, #24]
 800a116:	429a      	cmp	r2, r3
 800a118:	d10b      	bne.n	800a132 <mg_http_get_header+0x56>
 800a11a:	693b      	ldr	r3, [r7, #16]
 800a11c:	681b      	ldr	r3, [r3, #0]
 800a11e:	69ba      	ldr	r2, [r7, #24]
 800a120:	6839      	ldr	r1, [r7, #0]
 800a122:	4618      	mov	r0, r3
 800a124:	f005 ff16 	bl	800ff54 <mg_ncasecmp>
 800a128:	4603      	mov	r3, r0
 800a12a:	2b00      	cmp	r3, #0
 800a12c:	d101      	bne.n	800a132 <mg_http_get_header+0x56>
 800a12e:	68fb      	ldr	r3, [r7, #12]
 800a130:	e010      	b.n	800a154 <mg_http_get_header+0x78>
 800a132:	69fb      	ldr	r3, [r7, #28]
 800a134:	3301      	adds	r3, #1
 800a136:	61fb      	str	r3, [r7, #28]
 800a138:	69fa      	ldr	r2, [r7, #28]
 800a13a:	697b      	ldr	r3, [r7, #20]
 800a13c:	429a      	cmp	r2, r3
 800a13e:	d208      	bcs.n	800a152 <mg_http_get_header+0x76>
 800a140:	687a      	ldr	r2, [r7, #4]
 800a142:	69fb      	ldr	r3, [r7, #28]
 800a144:	3302      	adds	r3, #2
 800a146:	011b      	lsls	r3, r3, #4
 800a148:	4413      	add	r3, r2
 800a14a:	3304      	adds	r3, #4
 800a14c:	681b      	ldr	r3, [r3, #0]
 800a14e:	2b00      	cmp	r3, #0
 800a150:	d1d2      	bne.n	800a0f8 <mg_http_get_header+0x1c>
 800a152:	2300      	movs	r3, #0
 800a154:	4618      	mov	r0, r3
 800a156:	3720      	adds	r7, #32
 800a158:	46bd      	mov	sp, r7
 800a15a:	bd80      	pop	{r7, pc}

0800a15c <vcb>:
 800a15c:	b480      	push	{r7}
 800a15e:	b083      	sub	sp, #12
 800a160:	af00      	add	r7, sp, #0
 800a162:	4603      	mov	r3, r0
 800a164:	71fb      	strb	r3, [r7, #7]
 800a166:	79fb      	ldrb	r3, [r7, #7]
 800a168:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 800a16c:	2b80      	cmp	r3, #128	@ 0x80
 800a16e:	bf0c      	ite	eq
 800a170:	2301      	moveq	r3, #1
 800a172:	2300      	movne	r3, #0
 800a174:	b2db      	uxtb	r3, r3
 800a176:	4618      	mov	r0, r3
 800a178:	370c      	adds	r7, #12
 800a17a:	46bd      	mov	sp, r7
 800a17c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a180:	4770      	bx	lr

0800a182 <clen>:
 800a182:	b580      	push	{r7, lr}
 800a184:	b086      	sub	sp, #24
 800a186:	af00      	add	r7, sp, #0
 800a188:	6078      	str	r0, [r7, #4]
 800a18a:	6039      	str	r1, [r7, #0]
 800a18c:	687b      	ldr	r3, [r7, #4]
 800a18e:	617b      	str	r3, [r7, #20]
 800a190:	697b      	ldr	r3, [r7, #20]
 800a192:	781b      	ldrb	r3, [r3, #0]
 800a194:	74fb      	strb	r3, [r7, #19]
 800a196:	683a      	ldr	r2, [r7, #0]
 800a198:	687b      	ldr	r3, [r7, #4]
 800a19a:	1ad3      	subs	r3, r2, r3
 800a19c:	60fb      	str	r3, [r7, #12]
 800a19e:	7cfb      	ldrb	r3, [r7, #19]
 800a1a0:	2b20      	cmp	r3, #32
 800a1a2:	d904      	bls.n	800a1ae <clen+0x2c>
 800a1a4:	7cfb      	ldrb	r3, [r7, #19]
 800a1a6:	2b7d      	cmp	r3, #125	@ 0x7d
 800a1a8:	d801      	bhi.n	800a1ae <clen+0x2c>
 800a1aa:	2301      	movs	r3, #1
 800a1ac:	e054      	b.n	800a258 <clen+0xd6>
 800a1ae:	7cfb      	ldrb	r3, [r7, #19]
 800a1b0:	f003 03e0 	and.w	r3, r3, #224	@ 0xe0
 800a1b4:	2bc0      	cmp	r3, #192	@ 0xc0
 800a1b6:	d10d      	bne.n	800a1d4 <clen+0x52>
 800a1b8:	68fb      	ldr	r3, [r7, #12]
 800a1ba:	2b01      	cmp	r3, #1
 800a1bc:	dd0a      	ble.n	800a1d4 <clen+0x52>
 800a1be:	697b      	ldr	r3, [r7, #20]
 800a1c0:	3301      	adds	r3, #1
 800a1c2:	781b      	ldrb	r3, [r3, #0]
 800a1c4:	4618      	mov	r0, r3
 800a1c6:	f7ff ffc9 	bl	800a15c <vcb>
 800a1ca:	4603      	mov	r3, r0
 800a1cc:	2b00      	cmp	r3, #0
 800a1ce:	d001      	beq.n	800a1d4 <clen+0x52>
 800a1d0:	2302      	movs	r3, #2
 800a1d2:	e041      	b.n	800a258 <clen+0xd6>
 800a1d4:	7cfb      	ldrb	r3, [r7, #19]
 800a1d6:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800a1da:	2be0      	cmp	r3, #224	@ 0xe0
 800a1dc:	d116      	bne.n	800a20c <clen+0x8a>
 800a1de:	68fb      	ldr	r3, [r7, #12]
 800a1e0:	2b02      	cmp	r3, #2
 800a1e2:	dd13      	ble.n	800a20c <clen+0x8a>
 800a1e4:	697b      	ldr	r3, [r7, #20]
 800a1e6:	3301      	adds	r3, #1
 800a1e8:	781b      	ldrb	r3, [r3, #0]
 800a1ea:	4618      	mov	r0, r3
 800a1ec:	f7ff ffb6 	bl	800a15c <vcb>
 800a1f0:	4603      	mov	r3, r0
 800a1f2:	2b00      	cmp	r3, #0
 800a1f4:	d00a      	beq.n	800a20c <clen+0x8a>
 800a1f6:	697b      	ldr	r3, [r7, #20]
 800a1f8:	3302      	adds	r3, #2
 800a1fa:	781b      	ldrb	r3, [r3, #0]
 800a1fc:	4618      	mov	r0, r3
 800a1fe:	f7ff ffad 	bl	800a15c <vcb>
 800a202:	4603      	mov	r3, r0
 800a204:	2b00      	cmp	r3, #0
 800a206:	d001      	beq.n	800a20c <clen+0x8a>
 800a208:	2303      	movs	r3, #3
 800a20a:	e025      	b.n	800a258 <clen+0xd6>
 800a20c:	7cfb      	ldrb	r3, [r7, #19]
 800a20e:	f003 03f8 	and.w	r3, r3, #248	@ 0xf8
 800a212:	2bf0      	cmp	r3, #240	@ 0xf0
 800a214:	d11f      	bne.n	800a256 <clen+0xd4>
 800a216:	68fb      	ldr	r3, [r7, #12]
 800a218:	2b03      	cmp	r3, #3
 800a21a:	dd1c      	ble.n	800a256 <clen+0xd4>
 800a21c:	697b      	ldr	r3, [r7, #20]
 800a21e:	3301      	adds	r3, #1
 800a220:	781b      	ldrb	r3, [r3, #0]
 800a222:	4618      	mov	r0, r3
 800a224:	f7ff ff9a 	bl	800a15c <vcb>
 800a228:	4603      	mov	r3, r0
 800a22a:	2b00      	cmp	r3, #0
 800a22c:	d013      	beq.n	800a256 <clen+0xd4>
 800a22e:	697b      	ldr	r3, [r7, #20]
 800a230:	3302      	adds	r3, #2
 800a232:	781b      	ldrb	r3, [r3, #0]
 800a234:	4618      	mov	r0, r3
 800a236:	f7ff ff91 	bl	800a15c <vcb>
 800a23a:	4603      	mov	r3, r0
 800a23c:	2b00      	cmp	r3, #0
 800a23e:	d00a      	beq.n	800a256 <clen+0xd4>
 800a240:	697b      	ldr	r3, [r7, #20]
 800a242:	3303      	adds	r3, #3
 800a244:	781b      	ldrb	r3, [r3, #0]
 800a246:	4618      	mov	r0, r3
 800a248:	f7ff ff88 	bl	800a15c <vcb>
 800a24c:	4603      	mov	r3, r0
 800a24e:	2b00      	cmp	r3, #0
 800a250:	d001      	beq.n	800a256 <clen+0xd4>
 800a252:	2304      	movs	r3, #4
 800a254:	e000      	b.n	800a258 <clen+0xd6>
 800a256:	2300      	movs	r3, #0
 800a258:	4618      	mov	r0, r3
 800a25a:	3718      	adds	r7, #24
 800a25c:	46bd      	mov	sp, r7
 800a25e:	bd80      	pop	{r7, pc}

0800a260 <skiptorn>:
 800a260:	b480      	push	{r7}
 800a262:	b085      	sub	sp, #20
 800a264:	af00      	add	r7, sp, #0
 800a266:	60f8      	str	r0, [r7, #12]
 800a268:	60b9      	str	r1, [r7, #8]
 800a26a:	607a      	str	r2, [r7, #4]
 800a26c:	687b      	ldr	r3, [r7, #4]
 800a26e:	68fa      	ldr	r2, [r7, #12]
 800a270:	601a      	str	r2, [r3, #0]
 800a272:	e007      	b.n	800a284 <skiptorn+0x24>
 800a274:	68fb      	ldr	r3, [r7, #12]
 800a276:	3301      	adds	r3, #1
 800a278:	60fb      	str	r3, [r7, #12]
 800a27a:	687b      	ldr	r3, [r7, #4]
 800a27c:	685b      	ldr	r3, [r3, #4]
 800a27e:	1c5a      	adds	r2, r3, #1
 800a280:	687b      	ldr	r3, [r7, #4]
 800a282:	605a      	str	r2, [r3, #4]
 800a284:	68fa      	ldr	r2, [r7, #12]
 800a286:	68bb      	ldr	r3, [r7, #8]
 800a288:	429a      	cmp	r2, r3
 800a28a:	d207      	bcs.n	800a29c <skiptorn+0x3c>
 800a28c:	68fb      	ldr	r3, [r7, #12]
 800a28e:	781b      	ldrb	r3, [r3, #0]
 800a290:	2b0a      	cmp	r3, #10
 800a292:	d003      	beq.n	800a29c <skiptorn+0x3c>
 800a294:	68fb      	ldr	r3, [r7, #12]
 800a296:	781b      	ldrb	r3, [r3, #0]
 800a298:	2b0d      	cmp	r3, #13
 800a29a:	d1eb      	bne.n	800a274 <skiptorn+0x14>
 800a29c:	68fa      	ldr	r2, [r7, #12]
 800a29e:	68bb      	ldr	r3, [r7, #8]
 800a2a0:	429a      	cmp	r2, r3
 800a2a2:	d208      	bcs.n	800a2b6 <skiptorn+0x56>
 800a2a4:	68fb      	ldr	r3, [r7, #12]
 800a2a6:	781b      	ldrb	r3, [r3, #0]
 800a2a8:	2b0d      	cmp	r3, #13
 800a2aa:	d106      	bne.n	800a2ba <skiptorn+0x5a>
 800a2ac:	68fb      	ldr	r3, [r7, #12]
 800a2ae:	3301      	adds	r3, #1
 800a2b0:	781b      	ldrb	r3, [r3, #0]
 800a2b2:	2b0a      	cmp	r3, #10
 800a2b4:	d001      	beq.n	800a2ba <skiptorn+0x5a>
 800a2b6:	2300      	movs	r3, #0
 800a2b8:	e017      	b.n	800a2ea <skiptorn+0x8a>
 800a2ba:	68fa      	ldr	r2, [r7, #12]
 800a2bc:	68bb      	ldr	r3, [r7, #8]
 800a2be:	429a      	cmp	r2, r3
 800a2c0:	d206      	bcs.n	800a2d0 <skiptorn+0x70>
 800a2c2:	68fb      	ldr	r3, [r7, #12]
 800a2c4:	781b      	ldrb	r3, [r3, #0]
 800a2c6:	2b0d      	cmp	r3, #13
 800a2c8:	d102      	bne.n	800a2d0 <skiptorn+0x70>
 800a2ca:	68fb      	ldr	r3, [r7, #12]
 800a2cc:	3301      	adds	r3, #1
 800a2ce:	60fb      	str	r3, [r7, #12]
 800a2d0:	68fa      	ldr	r2, [r7, #12]
 800a2d2:	68bb      	ldr	r3, [r7, #8]
 800a2d4:	429a      	cmp	r2, r3
 800a2d6:	d205      	bcs.n	800a2e4 <skiptorn+0x84>
 800a2d8:	68fb      	ldr	r3, [r7, #12]
 800a2da:	1c5a      	adds	r2, r3, #1
 800a2dc:	60fa      	str	r2, [r7, #12]
 800a2de:	781b      	ldrb	r3, [r3, #0]
 800a2e0:	2b0a      	cmp	r3, #10
 800a2e2:	d001      	beq.n	800a2e8 <skiptorn+0x88>
 800a2e4:	2300      	movs	r3, #0
 800a2e6:	e000      	b.n	800a2ea <skiptorn+0x8a>
 800a2e8:	68fb      	ldr	r3, [r7, #12]
 800a2ea:	4618      	mov	r0, r3
 800a2ec:	3714      	adds	r7, #20
 800a2ee:	46bd      	mov	sp, r7
 800a2f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2f4:	4770      	bx	lr

0800a2f6 <mg_http_parse_headers>:
 800a2f6:	b580      	push	{r7, lr}
 800a2f8:	b08a      	sub	sp, #40	@ 0x28
 800a2fa:	af00      	add	r7, sp, #0
 800a2fc:	60f8      	str	r0, [r7, #12]
 800a2fe:	60b9      	str	r1, [r7, #8]
 800a300:	607a      	str	r2, [r7, #4]
 800a302:	603b      	str	r3, [r7, #0]
 800a304:	2300      	movs	r3, #0
 800a306:	627b      	str	r3, [r7, #36]	@ 0x24
 800a308:	e08e      	b.n	800a428 <mg_http_parse_headers+0x132>
 800a30a:	2300      	movs	r3, #0
 800a30c:	61bb      	str	r3, [r7, #24]
 800a30e:	2300      	movs	r3, #0
 800a310:	61fb      	str	r3, [r7, #28]
 800a312:	2300      	movs	r3, #0
 800a314:	613b      	str	r3, [r7, #16]
 800a316:	2300      	movs	r3, #0
 800a318:	617b      	str	r3, [r7, #20]
 800a31a:	68fa      	ldr	r2, [r7, #12]
 800a31c:	68bb      	ldr	r3, [r7, #8]
 800a31e:	429a      	cmp	r2, r3
 800a320:	d301      	bcc.n	800a326 <mg_http_parse_headers+0x30>
 800a322:	2300      	movs	r3, #0
 800a324:	e086      	b.n	800a434 <mg_http_parse_headers+0x13e>
 800a326:	68fb      	ldr	r3, [r7, #12]
 800a328:	781b      	ldrb	r3, [r3, #0]
 800a32a:	2b0a      	cmp	r3, #10
 800a32c:	f000 8081 	beq.w	800a432 <mg_http_parse_headers+0x13c>
 800a330:	68fb      	ldr	r3, [r7, #12]
 800a332:	781b      	ldrb	r3, [r3, #0]
 800a334:	2b0d      	cmp	r3, #13
 800a336:	d104      	bne.n	800a342 <mg_http_parse_headers+0x4c>
 800a338:	68fb      	ldr	r3, [r7, #12]
 800a33a:	3301      	adds	r3, #1
 800a33c:	781b      	ldrb	r3, [r3, #0]
 800a33e:	2b0a      	cmp	r3, #10
 800a340:	d077      	beq.n	800a432 <mg_http_parse_headers+0x13c>
 800a342:	68fb      	ldr	r3, [r7, #12]
 800a344:	61bb      	str	r3, [r7, #24]
 800a346:	e007      	b.n	800a358 <mg_http_parse_headers+0x62>
 800a348:	68fa      	ldr	r2, [r7, #12]
 800a34a:	6a3b      	ldr	r3, [r7, #32]
 800a34c:	4413      	add	r3, r2
 800a34e:	60fb      	str	r3, [r7, #12]
 800a350:	69fa      	ldr	r2, [r7, #28]
 800a352:	6a3b      	ldr	r3, [r7, #32]
 800a354:	4413      	add	r3, r2
 800a356:	61fb      	str	r3, [r7, #28]
 800a358:	68fa      	ldr	r2, [r7, #12]
 800a35a:	68bb      	ldr	r3, [r7, #8]
 800a35c:	429a      	cmp	r2, r3
 800a35e:	d20b      	bcs.n	800a378 <mg_http_parse_headers+0x82>
 800a360:	68fb      	ldr	r3, [r7, #12]
 800a362:	781b      	ldrb	r3, [r3, #0]
 800a364:	2b3a      	cmp	r3, #58	@ 0x3a
 800a366:	d007      	beq.n	800a378 <mg_http_parse_headers+0x82>
 800a368:	68b9      	ldr	r1, [r7, #8]
 800a36a:	68f8      	ldr	r0, [r7, #12]
 800a36c:	f7ff ff09 	bl	800a182 <clen>
 800a370:	6238      	str	r0, [r7, #32]
 800a372:	6a3b      	ldr	r3, [r7, #32]
 800a374:	2b00      	cmp	r3, #0
 800a376:	d1e7      	bne.n	800a348 <mg_http_parse_headers+0x52>
 800a378:	69fb      	ldr	r3, [r7, #28]
 800a37a:	2b00      	cmp	r3, #0
 800a37c:	d101      	bne.n	800a382 <mg_http_parse_headers+0x8c>
 800a37e:	2300      	movs	r3, #0
 800a380:	e058      	b.n	800a434 <mg_http_parse_headers+0x13e>
 800a382:	68fa      	ldr	r2, [r7, #12]
 800a384:	68bb      	ldr	r3, [r7, #8]
 800a386:	429a      	cmp	r2, r3
 800a388:	d206      	bcs.n	800a398 <mg_http_parse_headers+0xa2>
 800a38a:	68b9      	ldr	r1, [r7, #8]
 800a38c:	68f8      	ldr	r0, [r7, #12]
 800a38e:	f7ff fef8 	bl	800a182 <clen>
 800a392:	4603      	mov	r3, r0
 800a394:	2b00      	cmp	r3, #0
 800a396:	d101      	bne.n	800a39c <mg_http_parse_headers+0xa6>
 800a398:	2300      	movs	r3, #0
 800a39a:	e04b      	b.n	800a434 <mg_http_parse_headers+0x13e>
 800a39c:	68fb      	ldr	r3, [r7, #12]
 800a39e:	1c5a      	adds	r2, r3, #1
 800a3a0:	60fa      	str	r2, [r7, #12]
 800a3a2:	781b      	ldrb	r3, [r3, #0]
 800a3a4:	2b3a      	cmp	r3, #58	@ 0x3a
 800a3a6:	d004      	beq.n	800a3b2 <mg_http_parse_headers+0xbc>
 800a3a8:	2300      	movs	r3, #0
 800a3aa:	e043      	b.n	800a434 <mg_http_parse_headers+0x13e>
 800a3ac:	68fb      	ldr	r3, [r7, #12]
 800a3ae:	3301      	adds	r3, #1
 800a3b0:	60fb      	str	r3, [r7, #12]
 800a3b2:	68fa      	ldr	r2, [r7, #12]
 800a3b4:	68bb      	ldr	r3, [r7, #8]
 800a3b6:	429a      	cmp	r2, r3
 800a3b8:	d203      	bcs.n	800a3c2 <mg_http_parse_headers+0xcc>
 800a3ba:	68fb      	ldr	r3, [r7, #12]
 800a3bc:	781b      	ldrb	r3, [r3, #0]
 800a3be:	2b20      	cmp	r3, #32
 800a3c0:	d0f4      	beq.n	800a3ac <mg_http_parse_headers+0xb6>
 800a3c2:	f107 0310 	add.w	r3, r7, #16
 800a3c6:	461a      	mov	r2, r3
 800a3c8:	68b9      	ldr	r1, [r7, #8]
 800a3ca:	68f8      	ldr	r0, [r7, #12]
 800a3cc:	f7ff ff48 	bl	800a260 <skiptorn>
 800a3d0:	60f8      	str	r0, [r7, #12]
 800a3d2:	68fb      	ldr	r3, [r7, #12]
 800a3d4:	2b00      	cmp	r3, #0
 800a3d6:	d104      	bne.n	800a3e2 <mg_http_parse_headers+0xec>
 800a3d8:	2300      	movs	r3, #0
 800a3da:	e02b      	b.n	800a434 <mg_http_parse_headers+0x13e>
 800a3dc:	697b      	ldr	r3, [r7, #20]
 800a3de:	3b01      	subs	r3, #1
 800a3e0:	617b      	str	r3, [r7, #20]
 800a3e2:	697b      	ldr	r3, [r7, #20]
 800a3e4:	2b00      	cmp	r3, #0
 800a3e6:	d006      	beq.n	800a3f6 <mg_http_parse_headers+0x100>
 800a3e8:	693a      	ldr	r2, [r7, #16]
 800a3ea:	697b      	ldr	r3, [r7, #20]
 800a3ec:	3b01      	subs	r3, #1
 800a3ee:	4413      	add	r3, r2
 800a3f0:	781b      	ldrb	r3, [r3, #0]
 800a3f2:	2b20      	cmp	r3, #32
 800a3f4:	d0f2      	beq.n	800a3dc <mg_http_parse_headers+0xe6>
 800a3f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a3f8:	011b      	lsls	r3, r3, #4
 800a3fa:	687a      	ldr	r2, [r7, #4]
 800a3fc:	4413      	add	r3, r2
 800a3fe:	461a      	mov	r2, r3
 800a400:	f107 0318 	add.w	r3, r7, #24
 800a404:	e893 0003 	ldmia.w	r3, {r0, r1}
 800a408:	e882 0003 	stmia.w	r2, {r0, r1}
 800a40c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a40e:	011b      	lsls	r3, r3, #4
 800a410:	687a      	ldr	r2, [r7, #4]
 800a412:	4413      	add	r3, r2
 800a414:	3308      	adds	r3, #8
 800a416:	f107 0210 	add.w	r2, r7, #16
 800a41a:	e892 0003 	ldmia.w	r2, {r0, r1}
 800a41e:	e883 0003 	stmia.w	r3, {r0, r1}
 800a422:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a424:	3301      	adds	r3, #1
 800a426:	627b      	str	r3, [r7, #36]	@ 0x24
 800a428:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800a42a:	683b      	ldr	r3, [r7, #0]
 800a42c:	429a      	cmp	r2, r3
 800a42e:	f4ff af6c 	bcc.w	800a30a <mg_http_parse_headers+0x14>
 800a432:	2301      	movs	r3, #1
 800a434:	4618      	mov	r0, r3
 800a436:	3728      	adds	r7, #40	@ 0x28
 800a438:	46bd      	mov	sp, r7
 800a43a:	bd80      	pop	{r7, pc}

0800a43c <mg_http_parse>:
 800a43c:	b580      	push	{r7, lr}
 800a43e:	b08a      	sub	sp, #40	@ 0x28
 800a440:	af00      	add	r7, sp, #0
 800a442:	60f8      	str	r0, [r7, #12]
 800a444:	60b9      	str	r1, [r7, #8]
 800a446:	607a      	str	r2, [r7, #4]
 800a448:	68b9      	ldr	r1, [r7, #8]
 800a44a:	68f8      	ldr	r0, [r7, #12]
 800a44c:	f7ff fdf8 	bl	800a040 <mg_http_get_request_len>
 800a450:	6278      	str	r0, [r7, #36]	@ 0x24
 800a452:	68fb      	ldr	r3, [r7, #12]
 800a454:	2b00      	cmp	r3, #0
 800a456:	d003      	beq.n	800a460 <mg_http_parse+0x24>
 800a458:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a45a:	68fa      	ldr	r2, [r7, #12]
 800a45c:	4413      	add	r3, r2
 800a45e:	e000      	b.n	800a462 <mg_http_parse+0x26>
 800a460:	2300      	movs	r3, #0
 800a462:	623b      	str	r3, [r7, #32]
 800a464:	f44f 7206 	mov.w	r2, #536	@ 0x218
 800a468:	2100      	movs	r1, #0
 800a46a:	6878      	ldr	r0, [r7, #4]
 800a46c:	f00f faae 	bl	80199cc <memset>
 800a470:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a472:	2b00      	cmp	r3, #0
 800a474:	dc01      	bgt.n	800a47a <mg_http_parse+0x3e>
 800a476:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a478:	e127      	b.n	800a6ca <mg_http_parse+0x28e>
 800a47a:	687b      	ldr	r3, [r7, #4]
 800a47c:	68fa      	ldr	r2, [r7, #12]
 800a47e:	f8c3 2208 	str.w	r2, [r3, #520]	@ 0x208
 800a482:	687b      	ldr	r3, [r7, #4]
 800a484:	f8d3 2208 	ldr.w	r2, [r3, #520]	@ 0x208
 800a488:	687b      	ldr	r3, [r7, #4]
 800a48a:	f8c3 2210 	str.w	r2, [r3, #528]	@ 0x210
 800a48e:	687b      	ldr	r3, [r7, #4]
 800a490:	6a3a      	ldr	r2, [r7, #32]
 800a492:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200
 800a496:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800a498:	687b      	ldr	r3, [r7, #4]
 800a49a:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c
 800a49e:	687b      	ldr	r3, [r7, #4]
 800a4a0:	f04f 32ff 	mov.w	r2, #4294967295
 800a4a4:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204
 800a4a8:	687b      	ldr	r3, [r7, #4]
 800a4aa:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800a4ae:	687b      	ldr	r3, [r7, #4]
 800a4b0:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
 800a4b4:	687b      	ldr	r3, [r7, #4]
 800a4b6:	68fa      	ldr	r2, [r7, #12]
 800a4b8:	601a      	str	r2, [r3, #0]
 800a4ba:	e009      	b.n	800a4d0 <mg_http_parse+0x94>
 800a4bc:	68fa      	ldr	r2, [r7, #12]
 800a4be:	69fb      	ldr	r3, [r7, #28]
 800a4c0:	4413      	add	r3, r2
 800a4c2:	60fb      	str	r3, [r7, #12]
 800a4c4:	687b      	ldr	r3, [r7, #4]
 800a4c6:	685a      	ldr	r2, [r3, #4]
 800a4c8:	69fb      	ldr	r3, [r7, #28]
 800a4ca:	441a      	add	r2, r3
 800a4cc:	687b      	ldr	r3, [r7, #4]
 800a4ce:	605a      	str	r2, [r3, #4]
 800a4d0:	68fa      	ldr	r2, [r7, #12]
 800a4d2:	6a3b      	ldr	r3, [r7, #32]
 800a4d4:	429a      	cmp	r2, r3
 800a4d6:	d20b      	bcs.n	800a4f0 <mg_http_parse+0xb4>
 800a4d8:	6a39      	ldr	r1, [r7, #32]
 800a4da:	68f8      	ldr	r0, [r7, #12]
 800a4dc:	f7ff fe51 	bl	800a182 <clen>
 800a4e0:	61f8      	str	r0, [r7, #28]
 800a4e2:	69fb      	ldr	r3, [r7, #28]
 800a4e4:	2b00      	cmp	r3, #0
 800a4e6:	d1e9      	bne.n	800a4bc <mg_http_parse+0x80>
 800a4e8:	e002      	b.n	800a4f0 <mg_http_parse+0xb4>
 800a4ea:	68fb      	ldr	r3, [r7, #12]
 800a4ec:	3301      	adds	r3, #1
 800a4ee:	60fb      	str	r3, [r7, #12]
 800a4f0:	68fa      	ldr	r2, [r7, #12]
 800a4f2:	6a3b      	ldr	r3, [r7, #32]
 800a4f4:	429a      	cmp	r2, r3
 800a4f6:	d203      	bcs.n	800a500 <mg_http_parse+0xc4>
 800a4f8:	68fb      	ldr	r3, [r7, #12]
 800a4fa:	781b      	ldrb	r3, [r3, #0]
 800a4fc:	2b20      	cmp	r3, #32
 800a4fe:	d0f4      	beq.n	800a4ea <mg_http_parse+0xae>
 800a500:	687b      	ldr	r3, [r7, #4]
 800a502:	68fa      	ldr	r2, [r7, #12]
 800a504:	609a      	str	r2, [r3, #8]
 800a506:	e009      	b.n	800a51c <mg_http_parse+0xe0>
 800a508:	68fa      	ldr	r2, [r7, #12]
 800a50a:	69fb      	ldr	r3, [r7, #28]
 800a50c:	4413      	add	r3, r2
 800a50e:	60fb      	str	r3, [r7, #12]
 800a510:	687b      	ldr	r3, [r7, #4]
 800a512:	68da      	ldr	r2, [r3, #12]
 800a514:	69fb      	ldr	r3, [r7, #28]
 800a516:	441a      	add	r2, r3
 800a518:	687b      	ldr	r3, [r7, #4]
 800a51a:	60da      	str	r2, [r3, #12]
 800a51c:	68fa      	ldr	r2, [r7, #12]
 800a51e:	6a3b      	ldr	r3, [r7, #32]
 800a520:	429a      	cmp	r2, r3
 800a522:	d20b      	bcs.n	800a53c <mg_http_parse+0x100>
 800a524:	6a39      	ldr	r1, [r7, #32]
 800a526:	68f8      	ldr	r0, [r7, #12]
 800a528:	f7ff fe2b 	bl	800a182 <clen>
 800a52c:	61f8      	str	r0, [r7, #28]
 800a52e:	69fb      	ldr	r3, [r7, #28]
 800a530:	2b00      	cmp	r3, #0
 800a532:	d1e9      	bne.n	800a508 <mg_http_parse+0xcc>
 800a534:	e002      	b.n	800a53c <mg_http_parse+0x100>
 800a536:	68fb      	ldr	r3, [r7, #12]
 800a538:	3301      	adds	r3, #1
 800a53a:	60fb      	str	r3, [r7, #12]
 800a53c:	68fa      	ldr	r2, [r7, #12]
 800a53e:	6a3b      	ldr	r3, [r7, #32]
 800a540:	429a      	cmp	r2, r3
 800a542:	d203      	bcs.n	800a54c <mg_http_parse+0x110>
 800a544:	68fb      	ldr	r3, [r7, #12]
 800a546:	781b      	ldrb	r3, [r3, #0]
 800a548:	2b20      	cmp	r3, #32
 800a54a:	d0f4      	beq.n	800a536 <mg_http_parse+0xfa>
 800a54c:	687b      	ldr	r3, [r7, #4]
 800a54e:	3318      	adds	r3, #24
 800a550:	461a      	mov	r2, r3
 800a552:	6a39      	ldr	r1, [r7, #32]
 800a554:	68f8      	ldr	r0, [r7, #12]
 800a556:	f7ff fe83 	bl	800a260 <skiptorn>
 800a55a:	60f8      	str	r0, [r7, #12]
 800a55c:	68fb      	ldr	r3, [r7, #12]
 800a55e:	2b00      	cmp	r3, #0
 800a560:	d101      	bne.n	800a566 <mg_http_parse+0x12a>
 800a562:	2300      	movs	r3, #0
 800a564:	e0b1      	b.n	800a6ca <mg_http_parse+0x28e>
 800a566:	687b      	ldr	r3, [r7, #4]
 800a568:	6898      	ldr	r0, [r3, #8]
 800a56a:	687b      	ldr	r3, [r7, #4]
 800a56c:	68db      	ldr	r3, [r3, #12]
 800a56e:	461a      	mov	r2, r3
 800a570:	213f      	movs	r1, #63	@ 0x3f
 800a572:	f7f5 feb5 	bl	80002e0 <memchr>
 800a576:	61b8      	str	r0, [r7, #24]
 800a578:	69bb      	ldr	r3, [r7, #24]
 800a57a:	2b00      	cmp	r3, #0
 800a57c:	d015      	beq.n	800a5aa <mg_http_parse+0x16e>
 800a57e:	69bb      	ldr	r3, [r7, #24]
 800a580:	1c5a      	adds	r2, r3, #1
 800a582:	687b      	ldr	r3, [r7, #4]
 800a584:	611a      	str	r2, [r3, #16]
 800a586:	687b      	ldr	r3, [r7, #4]
 800a588:	689a      	ldr	r2, [r3, #8]
 800a58a:	687b      	ldr	r3, [r7, #4]
 800a58c:	68db      	ldr	r3, [r3, #12]
 800a58e:	441a      	add	r2, r3
 800a590:	69bb      	ldr	r3, [r7, #24]
 800a592:	3301      	adds	r3, #1
 800a594:	1ad3      	subs	r3, r2, r3
 800a596:	461a      	mov	r2, r3
 800a598:	687b      	ldr	r3, [r7, #4]
 800a59a:	615a      	str	r2, [r3, #20]
 800a59c:	687b      	ldr	r3, [r7, #4]
 800a59e:	689b      	ldr	r3, [r3, #8]
 800a5a0:	69ba      	ldr	r2, [r7, #24]
 800a5a2:	1ad3      	subs	r3, r2, r3
 800a5a4:	461a      	mov	r2, r3
 800a5a6:	687b      	ldr	r3, [r7, #4]
 800a5a8:	60da      	str	r2, [r3, #12]
 800a5aa:	687b      	ldr	r3, [r7, #4]
 800a5ac:	685b      	ldr	r3, [r3, #4]
 800a5ae:	2b00      	cmp	r3, #0
 800a5b0:	d003      	beq.n	800a5ba <mg_http_parse+0x17e>
 800a5b2:	687b      	ldr	r3, [r7, #4]
 800a5b4:	68db      	ldr	r3, [r3, #12]
 800a5b6:	2b00      	cmp	r3, #0
 800a5b8:	d102      	bne.n	800a5c0 <mg_http_parse+0x184>
 800a5ba:	f04f 33ff 	mov.w	r3, #4294967295
 800a5be:	e084      	b.n	800a6ca <mg_http_parse+0x28e>
 800a5c0:	687b      	ldr	r3, [r7, #4]
 800a5c2:	f103 0220 	add.w	r2, r3, #32
 800a5c6:	231e      	movs	r3, #30
 800a5c8:	6a39      	ldr	r1, [r7, #32]
 800a5ca:	68f8      	ldr	r0, [r7, #12]
 800a5cc:	f7ff fe93 	bl	800a2f6 <mg_http_parse_headers>
 800a5d0:	4603      	mov	r3, r0
 800a5d2:	f083 0301 	eor.w	r3, r3, #1
 800a5d6:	b2db      	uxtb	r3, r3
 800a5d8:	2b00      	cmp	r3, #0
 800a5da:	d002      	beq.n	800a5e2 <mg_http_parse+0x1a6>
 800a5dc:	f04f 33ff 	mov.w	r3, #4294967295
 800a5e0:	e073      	b.n	800a6ca <mg_http_parse+0x28e>
 800a5e2:	493c      	ldr	r1, [pc, #240]	@ (800a6d4 <mg_http_parse+0x298>)
 800a5e4:	6878      	ldr	r0, [r7, #4]
 800a5e6:	f7ff fd79 	bl	800a0dc <mg_http_get_header>
 800a5ea:	6178      	str	r0, [r7, #20]
 800a5ec:	697b      	ldr	r3, [r7, #20]
 800a5ee:	2b00      	cmp	r3, #0
 800a5f0:	d018      	beq.n	800a624 <mg_http_parse+0x1e8>
 800a5f2:	687b      	ldr	r3, [r7, #4]
 800a5f4:	f503 7201 	add.w	r2, r3, #516	@ 0x204
 800a5f8:	697b      	ldr	r3, [r7, #20]
 800a5fa:	e893 0003 	ldmia.w	r3, {r0, r1}
 800a5fe:	f7ff fc6f 	bl	8009ee0 <mg_to_size_t>
 800a602:	4603      	mov	r3, r0
 800a604:	f083 0301 	eor.w	r3, r3, #1
 800a608:	b2db      	uxtb	r3, r3
 800a60a:	2b00      	cmp	r3, #0
 800a60c:	d002      	beq.n	800a614 <mg_http_parse+0x1d8>
 800a60e:	f04f 33ff 	mov.w	r3, #4294967295
 800a612:	e05a      	b.n	800a6ca <mg_http_parse+0x28e>
 800a614:	687b      	ldr	r3, [r7, #4]
 800a616:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800a61a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a61c:	441a      	add	r2, r3
 800a61e:	687b      	ldr	r3, [r7, #4]
 800a620:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
 800a624:	687b      	ldr	r3, [r7, #4]
 800a626:	681b      	ldr	r3, [r3, #0]
 800a628:	2205      	movs	r2, #5
 800a62a:	492b      	ldr	r1, [pc, #172]	@ (800a6d8 <mg_http_parse+0x29c>)
 800a62c:	4618      	mov	r0, r3
 800a62e:	f005 fc91 	bl	800ff54 <mg_ncasecmp>
 800a632:	4603      	mov	r3, r0
 800a634:	2b00      	cmp	r3, #0
 800a636:	bf0c      	ite	eq
 800a638:	2301      	moveq	r3, #1
 800a63a:	2300      	movne	r3, #0
 800a63c:	b2db      	uxtb	r3, r3
 800a63e:	613b      	str	r3, [r7, #16]
 800a640:	687b      	ldr	r3, [r7, #4]
 800a642:	f8d3 3204 	ldr.w	r3, [r3, #516]	@ 0x204
 800a646:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a64a:	d11a      	bne.n	800a682 <mg_http_parse+0x246>
 800a64c:	693b      	ldr	r3, [r7, #16]
 800a64e:	2b00      	cmp	r3, #0
 800a650:	d117      	bne.n	800a682 <mg_http_parse+0x246>
 800a652:	687b      	ldr	r3, [r7, #4]
 800a654:	4921      	ldr	r1, [pc, #132]	@ (800a6dc <mg_http_parse+0x2a0>)
 800a656:	4618      	mov	r0, r3
 800a658:	f005 fcaa 	bl	800ffb0 <mg_vcasecmp>
 800a65c:	4603      	mov	r3, r0
 800a65e:	2b00      	cmp	r3, #0
 800a660:	d00f      	beq.n	800a682 <mg_http_parse+0x246>
 800a662:	687b      	ldr	r3, [r7, #4]
 800a664:	491e      	ldr	r1, [pc, #120]	@ (800a6e0 <mg_http_parse+0x2a4>)
 800a666:	4618      	mov	r0, r3
 800a668:	f005 fca2 	bl	800ffb0 <mg_vcasecmp>
 800a66c:	4603      	mov	r3, r0
 800a66e:	2b00      	cmp	r3, #0
 800a670:	d007      	beq.n	800a682 <mg_http_parse+0x246>
 800a672:	687b      	ldr	r3, [r7, #4]
 800a674:	2200      	movs	r2, #0
 800a676:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204
 800a67a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800a67c:	687b      	ldr	r3, [r7, #4]
 800a67e:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
 800a682:	687b      	ldr	r3, [r7, #4]
 800a684:	f8d3 3204 	ldr.w	r3, [r3, #516]	@ 0x204
 800a688:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a68c:	d113      	bne.n	800a6b6 <mg_http_parse+0x27a>
 800a68e:	693b      	ldr	r3, [r7, #16]
 800a690:	2b00      	cmp	r3, #0
 800a692:	d010      	beq.n	800a6b6 <mg_http_parse+0x27a>
 800a694:	687b      	ldr	r3, [r7, #4]
 800a696:	3308      	adds	r3, #8
 800a698:	4912      	ldr	r1, [pc, #72]	@ (800a6e4 <mg_http_parse+0x2a8>)
 800a69a:	4618      	mov	r0, r3
 800a69c:	f005 fc88 	bl	800ffb0 <mg_vcasecmp>
 800a6a0:	4603      	mov	r3, r0
 800a6a2:	2b00      	cmp	r3, #0
 800a6a4:	d107      	bne.n	800a6b6 <mg_http_parse+0x27a>
 800a6a6:	687b      	ldr	r3, [r7, #4]
 800a6a8:	2200      	movs	r2, #0
 800a6aa:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204
 800a6ae:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800a6b0:	687b      	ldr	r3, [r7, #4]
 800a6b2:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
 800a6b6:	687b      	ldr	r3, [r7, #4]
 800a6b8:	f8d3 2214 	ldr.w	r2, [r3, #532]	@ 0x214
 800a6bc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a6be:	429a      	cmp	r2, r3
 800a6c0:	d202      	bcs.n	800a6c8 <mg_http_parse+0x28c>
 800a6c2:	f04f 33ff 	mov.w	r3, #4294967295
 800a6c6:	e000      	b.n	800a6ca <mg_http_parse+0x28e>
 800a6c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a6ca:	4618      	mov	r0, r3
 800a6cc:	3728      	adds	r7, #40	@ 0x28
 800a6ce:	46bd      	mov	sp, r7
 800a6d0:	bd80      	pop	{r7, pc}
 800a6d2:	bf00      	nop
 800a6d4:	0801a6ac 	.word	0x0801a6ac
 800a6d8:	0801a6bc 	.word	0x0801a6bc
 800a6dc:	0801a6c4 	.word	0x0801a6c4
 800a6e0:	0801a6c8 	.word	0x0801a6c8
 800a6e4:	0801a6d0 	.word	0x0801a6d0

0800a6e8 <mg_http_status_code_str>:
 800a6e8:	b480      	push	{r7}
 800a6ea:	b083      	sub	sp, #12
 800a6ec:	af00      	add	r7, sp, #0
 800a6ee:	6078      	str	r0, [r7, #4]
 800a6f0:	687b      	ldr	r3, [r7, #4]
 800a6f2:	3b64      	subs	r3, #100	@ 0x64
 800a6f4:	f240 12f3 	movw	r2, #499	@ 0x1f3
 800a6f8:	4293      	cmp	r3, r2
 800a6fa:	f200 8469 	bhi.w	800afd0 <mg_http_status_code_str+0x8e8>
 800a6fe:	a101      	add	r1, pc, #4	@ (adr r1, 800a704 <mg_http_status_code_str+0x1c>)
 800a700:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800a704:	0800aed5 	.word	0x0800aed5
 800a708:	0800aed9 	.word	0x0800aed9
 800a70c:	0800aedd 	.word	0x0800aedd
 800a710:	0800afd1 	.word	0x0800afd1
 800a714:	0800afd1 	.word	0x0800afd1
 800a718:	0800afd1 	.word	0x0800afd1
 800a71c:	0800afd1 	.word	0x0800afd1
 800a720:	0800afd1 	.word	0x0800afd1
 800a724:	0800afd1 	.word	0x0800afd1
 800a728:	0800afd1 	.word	0x0800afd1
 800a72c:	0800afd1 	.word	0x0800afd1
 800a730:	0800afd1 	.word	0x0800afd1
 800a734:	0800afd1 	.word	0x0800afd1
 800a738:	0800afd1 	.word	0x0800afd1
 800a73c:	0800afd1 	.word	0x0800afd1
 800a740:	0800afd1 	.word	0x0800afd1
 800a744:	0800afd1 	.word	0x0800afd1
 800a748:	0800afd1 	.word	0x0800afd1
 800a74c:	0800afd1 	.word	0x0800afd1
 800a750:	0800afd1 	.word	0x0800afd1
 800a754:	0800afd1 	.word	0x0800afd1
 800a758:	0800afd1 	.word	0x0800afd1
 800a75c:	0800afd1 	.word	0x0800afd1
 800a760:	0800afd1 	.word	0x0800afd1
 800a764:	0800afd1 	.word	0x0800afd1
 800a768:	0800afd1 	.word	0x0800afd1
 800a76c:	0800afd1 	.word	0x0800afd1
 800a770:	0800afd1 	.word	0x0800afd1
 800a774:	0800afd1 	.word	0x0800afd1
 800a778:	0800afd1 	.word	0x0800afd1
 800a77c:	0800afd1 	.word	0x0800afd1
 800a780:	0800afd1 	.word	0x0800afd1
 800a784:	0800afd1 	.word	0x0800afd1
 800a788:	0800afd1 	.word	0x0800afd1
 800a78c:	0800afd1 	.word	0x0800afd1
 800a790:	0800afd1 	.word	0x0800afd1
 800a794:	0800afd1 	.word	0x0800afd1
 800a798:	0800afd1 	.word	0x0800afd1
 800a79c:	0800afd1 	.word	0x0800afd1
 800a7a0:	0800afd1 	.word	0x0800afd1
 800a7a4:	0800afd1 	.word	0x0800afd1
 800a7a8:	0800afd1 	.word	0x0800afd1
 800a7ac:	0800afd1 	.word	0x0800afd1
 800a7b0:	0800afd1 	.word	0x0800afd1
 800a7b4:	0800afd1 	.word	0x0800afd1
 800a7b8:	0800afd1 	.word	0x0800afd1
 800a7bc:	0800afd1 	.word	0x0800afd1
 800a7c0:	0800afd1 	.word	0x0800afd1
 800a7c4:	0800afd1 	.word	0x0800afd1
 800a7c8:	0800afd1 	.word	0x0800afd1
 800a7cc:	0800afd1 	.word	0x0800afd1
 800a7d0:	0800afd1 	.word	0x0800afd1
 800a7d4:	0800afd1 	.word	0x0800afd1
 800a7d8:	0800afd1 	.word	0x0800afd1
 800a7dc:	0800afd1 	.word	0x0800afd1
 800a7e0:	0800afd1 	.word	0x0800afd1
 800a7e4:	0800afd1 	.word	0x0800afd1
 800a7e8:	0800afd1 	.word	0x0800afd1
 800a7ec:	0800afd1 	.word	0x0800afd1
 800a7f0:	0800afd1 	.word	0x0800afd1
 800a7f4:	0800afd1 	.word	0x0800afd1
 800a7f8:	0800afd1 	.word	0x0800afd1
 800a7fc:	0800afd1 	.word	0x0800afd1
 800a800:	0800afd1 	.word	0x0800afd1
 800a804:	0800afd1 	.word	0x0800afd1
 800a808:	0800afd1 	.word	0x0800afd1
 800a80c:	0800afd1 	.word	0x0800afd1
 800a810:	0800afd1 	.word	0x0800afd1
 800a814:	0800afd1 	.word	0x0800afd1
 800a818:	0800afd1 	.word	0x0800afd1
 800a81c:	0800afd1 	.word	0x0800afd1
 800a820:	0800afd1 	.word	0x0800afd1
 800a824:	0800afd1 	.word	0x0800afd1
 800a828:	0800afd1 	.word	0x0800afd1
 800a82c:	0800afd1 	.word	0x0800afd1
 800a830:	0800afd1 	.word	0x0800afd1
 800a834:	0800afd1 	.word	0x0800afd1
 800a838:	0800afd1 	.word	0x0800afd1
 800a83c:	0800afd1 	.word	0x0800afd1
 800a840:	0800afd1 	.word	0x0800afd1
 800a844:	0800afd1 	.word	0x0800afd1
 800a848:	0800afd1 	.word	0x0800afd1
 800a84c:	0800afd1 	.word	0x0800afd1
 800a850:	0800afd1 	.word	0x0800afd1
 800a854:	0800afd1 	.word	0x0800afd1
 800a858:	0800afd1 	.word	0x0800afd1
 800a85c:	0800afd1 	.word	0x0800afd1
 800a860:	0800afd1 	.word	0x0800afd1
 800a864:	0800afd1 	.word	0x0800afd1
 800a868:	0800afd1 	.word	0x0800afd1
 800a86c:	0800afd1 	.word	0x0800afd1
 800a870:	0800afd1 	.word	0x0800afd1
 800a874:	0800afd1 	.word	0x0800afd1
 800a878:	0800afd1 	.word	0x0800afd1
 800a87c:	0800afd1 	.word	0x0800afd1
 800a880:	0800afd1 	.word	0x0800afd1
 800a884:	0800afd1 	.word	0x0800afd1
 800a888:	0800afd1 	.word	0x0800afd1
 800a88c:	0800afd1 	.word	0x0800afd1
 800a890:	0800afd1 	.word	0x0800afd1
 800a894:	0800aee1 	.word	0x0800aee1
 800a898:	0800aee5 	.word	0x0800aee5
 800a89c:	0800aee9 	.word	0x0800aee9
 800a8a0:	0800aeed 	.word	0x0800aeed
 800a8a4:	0800aef1 	.word	0x0800aef1
 800a8a8:	0800aef5 	.word	0x0800aef5
 800a8ac:	0800aef9 	.word	0x0800aef9
 800a8b0:	0800aefd 	.word	0x0800aefd
 800a8b4:	0800af01 	.word	0x0800af01
 800a8b8:	0800afd1 	.word	0x0800afd1
 800a8bc:	0800afd1 	.word	0x0800afd1
 800a8c0:	0800afd1 	.word	0x0800afd1
 800a8c4:	0800afd1 	.word	0x0800afd1
 800a8c8:	0800afd1 	.word	0x0800afd1
 800a8cc:	0800afd1 	.word	0x0800afd1
 800a8d0:	0800afd1 	.word	0x0800afd1
 800a8d4:	0800afd1 	.word	0x0800afd1
 800a8d8:	0800afd1 	.word	0x0800afd1
 800a8dc:	0800afd1 	.word	0x0800afd1
 800a8e0:	0800afd1 	.word	0x0800afd1
 800a8e4:	0800afd1 	.word	0x0800afd1
 800a8e8:	0800afd1 	.word	0x0800afd1
 800a8ec:	0800afd1 	.word	0x0800afd1
 800a8f0:	0800afd1 	.word	0x0800afd1
 800a8f4:	0800afd1 	.word	0x0800afd1
 800a8f8:	0800afd1 	.word	0x0800afd1
 800a8fc:	0800af05 	.word	0x0800af05
 800a900:	0800afd1 	.word	0x0800afd1
 800a904:	0800afd1 	.word	0x0800afd1
 800a908:	0800afd1 	.word	0x0800afd1
 800a90c:	0800afd1 	.word	0x0800afd1
 800a910:	0800afd1 	.word	0x0800afd1
 800a914:	0800afd1 	.word	0x0800afd1
 800a918:	0800afd1 	.word	0x0800afd1
 800a91c:	0800afd1 	.word	0x0800afd1
 800a920:	0800afd1 	.word	0x0800afd1
 800a924:	0800afd1 	.word	0x0800afd1
 800a928:	0800afd1 	.word	0x0800afd1
 800a92c:	0800afd1 	.word	0x0800afd1
 800a930:	0800afd1 	.word	0x0800afd1
 800a934:	0800afd1 	.word	0x0800afd1
 800a938:	0800afd1 	.word	0x0800afd1
 800a93c:	0800afd1 	.word	0x0800afd1
 800a940:	0800afd1 	.word	0x0800afd1
 800a944:	0800afd1 	.word	0x0800afd1
 800a948:	0800afd1 	.word	0x0800afd1
 800a94c:	0800afd1 	.word	0x0800afd1
 800a950:	0800afd1 	.word	0x0800afd1
 800a954:	0800afd1 	.word	0x0800afd1
 800a958:	0800afd1 	.word	0x0800afd1
 800a95c:	0800afd1 	.word	0x0800afd1
 800a960:	0800afd1 	.word	0x0800afd1
 800a964:	0800afd1 	.word	0x0800afd1
 800a968:	0800afd1 	.word	0x0800afd1
 800a96c:	0800afd1 	.word	0x0800afd1
 800a970:	0800afd1 	.word	0x0800afd1
 800a974:	0800afd1 	.word	0x0800afd1
 800a978:	0800afd1 	.word	0x0800afd1
 800a97c:	0800afd1 	.word	0x0800afd1
 800a980:	0800afd1 	.word	0x0800afd1
 800a984:	0800afd1 	.word	0x0800afd1
 800a988:	0800afd1 	.word	0x0800afd1
 800a98c:	0800afd1 	.word	0x0800afd1
 800a990:	0800afd1 	.word	0x0800afd1
 800a994:	0800afd1 	.word	0x0800afd1
 800a998:	0800afd1 	.word	0x0800afd1
 800a99c:	0800afd1 	.word	0x0800afd1
 800a9a0:	0800afd1 	.word	0x0800afd1
 800a9a4:	0800afd1 	.word	0x0800afd1
 800a9a8:	0800afd1 	.word	0x0800afd1
 800a9ac:	0800afd1 	.word	0x0800afd1
 800a9b0:	0800afd1 	.word	0x0800afd1
 800a9b4:	0800afd1 	.word	0x0800afd1
 800a9b8:	0800afd1 	.word	0x0800afd1
 800a9bc:	0800afd1 	.word	0x0800afd1
 800a9c0:	0800afd1 	.word	0x0800afd1
 800a9c4:	0800afd1 	.word	0x0800afd1
 800a9c8:	0800afd1 	.word	0x0800afd1
 800a9cc:	0800afd1 	.word	0x0800afd1
 800a9d0:	0800afd1 	.word	0x0800afd1
 800a9d4:	0800afd1 	.word	0x0800afd1
 800a9d8:	0800afd1 	.word	0x0800afd1
 800a9dc:	0800afd1 	.word	0x0800afd1
 800a9e0:	0800afd1 	.word	0x0800afd1
 800a9e4:	0800afd1 	.word	0x0800afd1
 800a9e8:	0800afd1 	.word	0x0800afd1
 800a9ec:	0800afd1 	.word	0x0800afd1
 800a9f0:	0800afd1 	.word	0x0800afd1
 800a9f4:	0800afd1 	.word	0x0800afd1
 800a9f8:	0800afd1 	.word	0x0800afd1
 800a9fc:	0800afd1 	.word	0x0800afd1
 800aa00:	0800afd1 	.word	0x0800afd1
 800aa04:	0800afd1 	.word	0x0800afd1
 800aa08:	0800afd1 	.word	0x0800afd1
 800aa0c:	0800afd1 	.word	0x0800afd1
 800aa10:	0800afd1 	.word	0x0800afd1
 800aa14:	0800afd1 	.word	0x0800afd1
 800aa18:	0800afd1 	.word	0x0800afd1
 800aa1c:	0800afd1 	.word	0x0800afd1
 800aa20:	0800afd1 	.word	0x0800afd1
 800aa24:	0800af09 	.word	0x0800af09
 800aa28:	0800af0d 	.word	0x0800af0d
 800aa2c:	0800af11 	.word	0x0800af11
 800aa30:	0800af15 	.word	0x0800af15
 800aa34:	0800af19 	.word	0x0800af19
 800aa38:	0800af1d 	.word	0x0800af1d
 800aa3c:	0800afd1 	.word	0x0800afd1
 800aa40:	0800af21 	.word	0x0800af21
 800aa44:	0800af25 	.word	0x0800af25
 800aa48:	0800afd1 	.word	0x0800afd1
 800aa4c:	0800afd1 	.word	0x0800afd1
 800aa50:	0800afd1 	.word	0x0800afd1
 800aa54:	0800afd1 	.word	0x0800afd1
 800aa58:	0800afd1 	.word	0x0800afd1
 800aa5c:	0800afd1 	.word	0x0800afd1
 800aa60:	0800afd1 	.word	0x0800afd1
 800aa64:	0800afd1 	.word	0x0800afd1
 800aa68:	0800afd1 	.word	0x0800afd1
 800aa6c:	0800afd1 	.word	0x0800afd1
 800aa70:	0800afd1 	.word	0x0800afd1
 800aa74:	0800afd1 	.word	0x0800afd1
 800aa78:	0800afd1 	.word	0x0800afd1
 800aa7c:	0800afd1 	.word	0x0800afd1
 800aa80:	0800afd1 	.word	0x0800afd1
 800aa84:	0800afd1 	.word	0x0800afd1
 800aa88:	0800afd1 	.word	0x0800afd1
 800aa8c:	0800afd1 	.word	0x0800afd1
 800aa90:	0800afd1 	.word	0x0800afd1
 800aa94:	0800afd1 	.word	0x0800afd1
 800aa98:	0800afd1 	.word	0x0800afd1
 800aa9c:	0800afd1 	.word	0x0800afd1
 800aaa0:	0800afd1 	.word	0x0800afd1
 800aaa4:	0800afd1 	.word	0x0800afd1
 800aaa8:	0800afd1 	.word	0x0800afd1
 800aaac:	0800afd1 	.word	0x0800afd1
 800aab0:	0800afd1 	.word	0x0800afd1
 800aab4:	0800afd1 	.word	0x0800afd1
 800aab8:	0800afd1 	.word	0x0800afd1
 800aabc:	0800afd1 	.word	0x0800afd1
 800aac0:	0800afd1 	.word	0x0800afd1
 800aac4:	0800afd1 	.word	0x0800afd1
 800aac8:	0800afd1 	.word	0x0800afd1
 800aacc:	0800afd1 	.word	0x0800afd1
 800aad0:	0800afd1 	.word	0x0800afd1
 800aad4:	0800afd1 	.word	0x0800afd1
 800aad8:	0800afd1 	.word	0x0800afd1
 800aadc:	0800afd1 	.word	0x0800afd1
 800aae0:	0800afd1 	.word	0x0800afd1
 800aae4:	0800afd1 	.word	0x0800afd1
 800aae8:	0800afd1 	.word	0x0800afd1
 800aaec:	0800afd1 	.word	0x0800afd1
 800aaf0:	0800afd1 	.word	0x0800afd1
 800aaf4:	0800afd1 	.word	0x0800afd1
 800aaf8:	0800afd1 	.word	0x0800afd1
 800aafc:	0800afd1 	.word	0x0800afd1
 800ab00:	0800afd1 	.word	0x0800afd1
 800ab04:	0800afd1 	.word	0x0800afd1
 800ab08:	0800afd1 	.word	0x0800afd1
 800ab0c:	0800afd1 	.word	0x0800afd1
 800ab10:	0800afd1 	.word	0x0800afd1
 800ab14:	0800afd1 	.word	0x0800afd1
 800ab18:	0800afd1 	.word	0x0800afd1
 800ab1c:	0800afd1 	.word	0x0800afd1
 800ab20:	0800afd1 	.word	0x0800afd1
 800ab24:	0800afd1 	.word	0x0800afd1
 800ab28:	0800afd1 	.word	0x0800afd1
 800ab2c:	0800afd1 	.word	0x0800afd1
 800ab30:	0800afd1 	.word	0x0800afd1
 800ab34:	0800afd1 	.word	0x0800afd1
 800ab38:	0800afd1 	.word	0x0800afd1
 800ab3c:	0800afd1 	.word	0x0800afd1
 800ab40:	0800afd1 	.word	0x0800afd1
 800ab44:	0800afd1 	.word	0x0800afd1
 800ab48:	0800afd1 	.word	0x0800afd1
 800ab4c:	0800afd1 	.word	0x0800afd1
 800ab50:	0800afd1 	.word	0x0800afd1
 800ab54:	0800afd1 	.word	0x0800afd1
 800ab58:	0800afd1 	.word	0x0800afd1
 800ab5c:	0800afd1 	.word	0x0800afd1
 800ab60:	0800afd1 	.word	0x0800afd1
 800ab64:	0800afd1 	.word	0x0800afd1
 800ab68:	0800afd1 	.word	0x0800afd1
 800ab6c:	0800afd1 	.word	0x0800afd1
 800ab70:	0800afd1 	.word	0x0800afd1
 800ab74:	0800afd1 	.word	0x0800afd1
 800ab78:	0800afd1 	.word	0x0800afd1
 800ab7c:	0800afd1 	.word	0x0800afd1
 800ab80:	0800afd1 	.word	0x0800afd1
 800ab84:	0800afd1 	.word	0x0800afd1
 800ab88:	0800afd1 	.word	0x0800afd1
 800ab8c:	0800afd1 	.word	0x0800afd1
 800ab90:	0800afd1 	.word	0x0800afd1
 800ab94:	0800afd1 	.word	0x0800afd1
 800ab98:	0800afd1 	.word	0x0800afd1
 800ab9c:	0800afd1 	.word	0x0800afd1
 800aba0:	0800afd1 	.word	0x0800afd1
 800aba4:	0800afd1 	.word	0x0800afd1
 800aba8:	0800afd1 	.word	0x0800afd1
 800abac:	0800afd1 	.word	0x0800afd1
 800abb0:	0800afd1 	.word	0x0800afd1
 800abb4:	0800af29 	.word	0x0800af29
 800abb8:	0800af2d 	.word	0x0800af2d
 800abbc:	0800af31 	.word	0x0800af31
 800abc0:	0800af35 	.word	0x0800af35
 800abc4:	0800af39 	.word	0x0800af39
 800abc8:	0800af3d 	.word	0x0800af3d
 800abcc:	0800af41 	.word	0x0800af41
 800abd0:	0800af45 	.word	0x0800af45
 800abd4:	0800af49 	.word	0x0800af49
 800abd8:	0800af4d 	.word	0x0800af4d
 800abdc:	0800af51 	.word	0x0800af51
 800abe0:	0800af55 	.word	0x0800af55
 800abe4:	0800af59 	.word	0x0800af59
 800abe8:	0800af5d 	.word	0x0800af5d
 800abec:	0800af61 	.word	0x0800af61
 800abf0:	0800af65 	.word	0x0800af65
 800abf4:	0800af69 	.word	0x0800af69
 800abf8:	0800af6d 	.word	0x0800af6d
 800abfc:	0800af71 	.word	0x0800af71
 800ac00:	0800afd1 	.word	0x0800afd1
 800ac04:	0800afd1 	.word	0x0800afd1
 800ac08:	0800af75 	.word	0x0800af75
 800ac0c:	0800af79 	.word	0x0800af79
 800ac10:	0800af7d 	.word	0x0800af7d
 800ac14:	0800af81 	.word	0x0800af81
 800ac18:	0800afd1 	.word	0x0800afd1
 800ac1c:	0800af85 	.word	0x0800af85
 800ac20:	0800afd1 	.word	0x0800afd1
 800ac24:	0800af89 	.word	0x0800af89
 800ac28:	0800af8d 	.word	0x0800af8d
 800ac2c:	0800afd1 	.word	0x0800afd1
 800ac30:	0800af91 	.word	0x0800af91
 800ac34:	0800afd1 	.word	0x0800afd1
 800ac38:	0800afd1 	.word	0x0800afd1
 800ac3c:	0800afd1 	.word	0x0800afd1
 800ac40:	0800afd1 	.word	0x0800afd1
 800ac44:	0800afd1 	.word	0x0800afd1
 800ac48:	0800afd1 	.word	0x0800afd1
 800ac4c:	0800afd1 	.word	0x0800afd1
 800ac50:	0800afd1 	.word	0x0800afd1
 800ac54:	0800afd1 	.word	0x0800afd1
 800ac58:	0800afd1 	.word	0x0800afd1
 800ac5c:	0800afd1 	.word	0x0800afd1
 800ac60:	0800afd1 	.word	0x0800afd1
 800ac64:	0800af95 	.word	0x0800af95
 800ac68:	0800afd1 	.word	0x0800afd1
 800ac6c:	0800afd1 	.word	0x0800afd1
 800ac70:	0800afd1 	.word	0x0800afd1
 800ac74:	0800afd1 	.word	0x0800afd1
 800ac78:	0800afd1 	.word	0x0800afd1
 800ac7c:	0800afd1 	.word	0x0800afd1
 800ac80:	0800af99 	.word	0x0800af99
 800ac84:	0800afd1 	.word	0x0800afd1
 800ac88:	0800afd1 	.word	0x0800afd1
 800ac8c:	0800afd1 	.word	0x0800afd1
 800ac90:	0800afd1 	.word	0x0800afd1
 800ac94:	0800afd1 	.word	0x0800afd1
 800ac98:	0800afd1 	.word	0x0800afd1
 800ac9c:	0800afd1 	.word	0x0800afd1
 800aca0:	0800afd1 	.word	0x0800afd1
 800aca4:	0800afd1 	.word	0x0800afd1
 800aca8:	0800afd1 	.word	0x0800afd1
 800acac:	0800afd1 	.word	0x0800afd1
 800acb0:	0800afd1 	.word	0x0800afd1
 800acb4:	0800afd1 	.word	0x0800afd1
 800acb8:	0800afd1 	.word	0x0800afd1
 800acbc:	0800afd1 	.word	0x0800afd1
 800acc0:	0800afd1 	.word	0x0800afd1
 800acc4:	0800afd1 	.word	0x0800afd1
 800acc8:	0800afd1 	.word	0x0800afd1
 800accc:	0800afd1 	.word	0x0800afd1
 800acd0:	0800afd1 	.word	0x0800afd1
 800acd4:	0800afd1 	.word	0x0800afd1
 800acd8:	0800afd1 	.word	0x0800afd1
 800acdc:	0800afd1 	.word	0x0800afd1
 800ace0:	0800afd1 	.word	0x0800afd1
 800ace4:	0800afd1 	.word	0x0800afd1
 800ace8:	0800afd1 	.word	0x0800afd1
 800acec:	0800afd1 	.word	0x0800afd1
 800acf0:	0800afd1 	.word	0x0800afd1
 800acf4:	0800afd1 	.word	0x0800afd1
 800acf8:	0800afd1 	.word	0x0800afd1
 800acfc:	0800afd1 	.word	0x0800afd1
 800ad00:	0800afd1 	.word	0x0800afd1
 800ad04:	0800afd1 	.word	0x0800afd1
 800ad08:	0800afd1 	.word	0x0800afd1
 800ad0c:	0800afd1 	.word	0x0800afd1
 800ad10:	0800afd1 	.word	0x0800afd1
 800ad14:	0800afd1 	.word	0x0800afd1
 800ad18:	0800afd1 	.word	0x0800afd1
 800ad1c:	0800afd1 	.word	0x0800afd1
 800ad20:	0800afd1 	.word	0x0800afd1
 800ad24:	0800afd1 	.word	0x0800afd1
 800ad28:	0800afd1 	.word	0x0800afd1
 800ad2c:	0800afd1 	.word	0x0800afd1
 800ad30:	0800afd1 	.word	0x0800afd1
 800ad34:	0800afd1 	.word	0x0800afd1
 800ad38:	0800afd1 	.word	0x0800afd1
 800ad3c:	0800afd1 	.word	0x0800afd1
 800ad40:	0800af9d 	.word	0x0800af9d
 800ad44:	0800afa1 	.word	0x0800afa1
 800ad48:	0800afa5 	.word	0x0800afa5
 800ad4c:	0800afa9 	.word	0x0800afa9
 800ad50:	0800afad 	.word	0x0800afad
 800ad54:	0800afb1 	.word	0x0800afb1
 800ad58:	0800afb5 	.word	0x0800afb5
 800ad5c:	0800afb9 	.word	0x0800afb9
 800ad60:	0800afbd 	.word	0x0800afbd
 800ad64:	0800afc1 	.word	0x0800afc1
 800ad68:	0800afd1 	.word	0x0800afd1
 800ad6c:	0800afc5 	.word	0x0800afc5
 800ad70:	0800afc9 	.word	0x0800afc9
 800ad74:	0800afd1 	.word	0x0800afd1
 800ad78:	0800afd1 	.word	0x0800afd1
 800ad7c:	0800afd1 	.word	0x0800afd1
 800ad80:	0800afd1 	.word	0x0800afd1
 800ad84:	0800afd1 	.word	0x0800afd1
 800ad88:	0800afd1 	.word	0x0800afd1
 800ad8c:	0800afd1 	.word	0x0800afd1
 800ad90:	0800afd1 	.word	0x0800afd1
 800ad94:	0800afd1 	.word	0x0800afd1
 800ad98:	0800afd1 	.word	0x0800afd1
 800ad9c:	0800afd1 	.word	0x0800afd1
 800ada0:	0800afd1 	.word	0x0800afd1
 800ada4:	0800afd1 	.word	0x0800afd1
 800ada8:	0800afd1 	.word	0x0800afd1
 800adac:	0800afd1 	.word	0x0800afd1
 800adb0:	0800afd1 	.word	0x0800afd1
 800adb4:	0800afd1 	.word	0x0800afd1
 800adb8:	0800afd1 	.word	0x0800afd1
 800adbc:	0800afd1 	.word	0x0800afd1
 800adc0:	0800afd1 	.word	0x0800afd1
 800adc4:	0800afd1 	.word	0x0800afd1
 800adc8:	0800afd1 	.word	0x0800afd1
 800adcc:	0800afd1 	.word	0x0800afd1
 800add0:	0800afd1 	.word	0x0800afd1
 800add4:	0800afd1 	.word	0x0800afd1
 800add8:	0800afd1 	.word	0x0800afd1
 800addc:	0800afd1 	.word	0x0800afd1
 800ade0:	0800afd1 	.word	0x0800afd1
 800ade4:	0800afd1 	.word	0x0800afd1
 800ade8:	0800afd1 	.word	0x0800afd1
 800adec:	0800afd1 	.word	0x0800afd1
 800adf0:	0800afd1 	.word	0x0800afd1
 800adf4:	0800afd1 	.word	0x0800afd1
 800adf8:	0800afd1 	.word	0x0800afd1
 800adfc:	0800afd1 	.word	0x0800afd1
 800ae00:	0800afd1 	.word	0x0800afd1
 800ae04:	0800afd1 	.word	0x0800afd1
 800ae08:	0800afd1 	.word	0x0800afd1
 800ae0c:	0800afd1 	.word	0x0800afd1
 800ae10:	0800afd1 	.word	0x0800afd1
 800ae14:	0800afd1 	.word	0x0800afd1
 800ae18:	0800afd1 	.word	0x0800afd1
 800ae1c:	0800afd1 	.word	0x0800afd1
 800ae20:	0800afd1 	.word	0x0800afd1
 800ae24:	0800afd1 	.word	0x0800afd1
 800ae28:	0800afd1 	.word	0x0800afd1
 800ae2c:	0800afd1 	.word	0x0800afd1
 800ae30:	0800afd1 	.word	0x0800afd1
 800ae34:	0800afd1 	.word	0x0800afd1
 800ae38:	0800afd1 	.word	0x0800afd1
 800ae3c:	0800afd1 	.word	0x0800afd1
 800ae40:	0800afd1 	.word	0x0800afd1
 800ae44:	0800afd1 	.word	0x0800afd1
 800ae48:	0800afd1 	.word	0x0800afd1
 800ae4c:	0800afd1 	.word	0x0800afd1
 800ae50:	0800afd1 	.word	0x0800afd1
 800ae54:	0800afd1 	.word	0x0800afd1
 800ae58:	0800afd1 	.word	0x0800afd1
 800ae5c:	0800afd1 	.word	0x0800afd1
 800ae60:	0800afd1 	.word	0x0800afd1
 800ae64:	0800afd1 	.word	0x0800afd1
 800ae68:	0800afd1 	.word	0x0800afd1
 800ae6c:	0800afd1 	.word	0x0800afd1
 800ae70:	0800afd1 	.word	0x0800afd1
 800ae74:	0800afd1 	.word	0x0800afd1
 800ae78:	0800afd1 	.word	0x0800afd1
 800ae7c:	0800afd1 	.word	0x0800afd1
 800ae80:	0800afd1 	.word	0x0800afd1
 800ae84:	0800afd1 	.word	0x0800afd1
 800ae88:	0800afd1 	.word	0x0800afd1
 800ae8c:	0800afd1 	.word	0x0800afd1
 800ae90:	0800afd1 	.word	0x0800afd1
 800ae94:	0800afd1 	.word	0x0800afd1
 800ae98:	0800afd1 	.word	0x0800afd1
 800ae9c:	0800afd1 	.word	0x0800afd1
 800aea0:	0800afd1 	.word	0x0800afd1
 800aea4:	0800afd1 	.word	0x0800afd1
 800aea8:	0800afd1 	.word	0x0800afd1
 800aeac:	0800afd1 	.word	0x0800afd1
 800aeb0:	0800afd1 	.word	0x0800afd1
 800aeb4:	0800afd1 	.word	0x0800afd1
 800aeb8:	0800afd1 	.word	0x0800afd1
 800aebc:	0800afd1 	.word	0x0800afd1
 800aec0:	0800afd1 	.word	0x0800afd1
 800aec4:	0800afd1 	.word	0x0800afd1
 800aec8:	0800afd1 	.word	0x0800afd1
 800aecc:	0800afd1 	.word	0x0800afd1
 800aed0:	0800afcd 	.word	0x0800afcd
 800aed4:	4b42      	ldr	r3, [pc, #264]	@ (800afe0 <mg_http_status_code_str+0x8f8>)
 800aed6:	e07c      	b.n	800afd2 <mg_http_status_code_str+0x8ea>
 800aed8:	4b42      	ldr	r3, [pc, #264]	@ (800afe4 <mg_http_status_code_str+0x8fc>)
 800aeda:	e07a      	b.n	800afd2 <mg_http_status_code_str+0x8ea>
 800aedc:	4b42      	ldr	r3, [pc, #264]	@ (800afe8 <mg_http_status_code_str+0x900>)
 800aede:	e078      	b.n	800afd2 <mg_http_status_code_str+0x8ea>
 800aee0:	4b42      	ldr	r3, [pc, #264]	@ (800afec <mg_http_status_code_str+0x904>)
 800aee2:	e076      	b.n	800afd2 <mg_http_status_code_str+0x8ea>
 800aee4:	4b42      	ldr	r3, [pc, #264]	@ (800aff0 <mg_http_status_code_str+0x908>)
 800aee6:	e074      	b.n	800afd2 <mg_http_status_code_str+0x8ea>
 800aee8:	4b42      	ldr	r3, [pc, #264]	@ (800aff4 <mg_http_status_code_str+0x90c>)
 800aeea:	e072      	b.n	800afd2 <mg_http_status_code_str+0x8ea>
 800aeec:	4b42      	ldr	r3, [pc, #264]	@ (800aff8 <mg_http_status_code_str+0x910>)
 800aeee:	e070      	b.n	800afd2 <mg_http_status_code_str+0x8ea>
 800aef0:	4b42      	ldr	r3, [pc, #264]	@ (800affc <mg_http_status_code_str+0x914>)
 800aef2:	e06e      	b.n	800afd2 <mg_http_status_code_str+0x8ea>
 800aef4:	4b42      	ldr	r3, [pc, #264]	@ (800b000 <mg_http_status_code_str+0x918>)
 800aef6:	e06c      	b.n	800afd2 <mg_http_status_code_str+0x8ea>
 800aef8:	4b42      	ldr	r3, [pc, #264]	@ (800b004 <mg_http_status_code_str+0x91c>)
 800aefa:	e06a      	b.n	800afd2 <mg_http_status_code_str+0x8ea>
 800aefc:	4b42      	ldr	r3, [pc, #264]	@ (800b008 <mg_http_status_code_str+0x920>)
 800aefe:	e068      	b.n	800afd2 <mg_http_status_code_str+0x8ea>
 800af00:	4b42      	ldr	r3, [pc, #264]	@ (800b00c <mg_http_status_code_str+0x924>)
 800af02:	e066      	b.n	800afd2 <mg_http_status_code_str+0x8ea>
 800af04:	4b42      	ldr	r3, [pc, #264]	@ (800b010 <mg_http_status_code_str+0x928>)
 800af06:	e064      	b.n	800afd2 <mg_http_status_code_str+0x8ea>
 800af08:	4b42      	ldr	r3, [pc, #264]	@ (800b014 <mg_http_status_code_str+0x92c>)
 800af0a:	e062      	b.n	800afd2 <mg_http_status_code_str+0x8ea>
 800af0c:	4b42      	ldr	r3, [pc, #264]	@ (800b018 <mg_http_status_code_str+0x930>)
 800af0e:	e060      	b.n	800afd2 <mg_http_status_code_str+0x8ea>
 800af10:	4b42      	ldr	r3, [pc, #264]	@ (800b01c <mg_http_status_code_str+0x934>)
 800af12:	e05e      	b.n	800afd2 <mg_http_status_code_str+0x8ea>
 800af14:	4b42      	ldr	r3, [pc, #264]	@ (800b020 <mg_http_status_code_str+0x938>)
 800af16:	e05c      	b.n	800afd2 <mg_http_status_code_str+0x8ea>
 800af18:	4b42      	ldr	r3, [pc, #264]	@ (800b024 <mg_http_status_code_str+0x93c>)
 800af1a:	e05a      	b.n	800afd2 <mg_http_status_code_str+0x8ea>
 800af1c:	4b42      	ldr	r3, [pc, #264]	@ (800b028 <mg_http_status_code_str+0x940>)
 800af1e:	e058      	b.n	800afd2 <mg_http_status_code_str+0x8ea>
 800af20:	4b42      	ldr	r3, [pc, #264]	@ (800b02c <mg_http_status_code_str+0x944>)
 800af22:	e056      	b.n	800afd2 <mg_http_status_code_str+0x8ea>
 800af24:	4b42      	ldr	r3, [pc, #264]	@ (800b030 <mg_http_status_code_str+0x948>)
 800af26:	e054      	b.n	800afd2 <mg_http_status_code_str+0x8ea>
 800af28:	4b42      	ldr	r3, [pc, #264]	@ (800b034 <mg_http_status_code_str+0x94c>)
 800af2a:	e052      	b.n	800afd2 <mg_http_status_code_str+0x8ea>
 800af2c:	4b42      	ldr	r3, [pc, #264]	@ (800b038 <mg_http_status_code_str+0x950>)
 800af2e:	e050      	b.n	800afd2 <mg_http_status_code_str+0x8ea>
 800af30:	4b42      	ldr	r3, [pc, #264]	@ (800b03c <mg_http_status_code_str+0x954>)
 800af32:	e04e      	b.n	800afd2 <mg_http_status_code_str+0x8ea>
 800af34:	4b42      	ldr	r3, [pc, #264]	@ (800b040 <mg_http_status_code_str+0x958>)
 800af36:	e04c      	b.n	800afd2 <mg_http_status_code_str+0x8ea>
 800af38:	4b42      	ldr	r3, [pc, #264]	@ (800b044 <mg_http_status_code_str+0x95c>)
 800af3a:	e04a      	b.n	800afd2 <mg_http_status_code_str+0x8ea>
 800af3c:	4b42      	ldr	r3, [pc, #264]	@ (800b048 <mg_http_status_code_str+0x960>)
 800af3e:	e048      	b.n	800afd2 <mg_http_status_code_str+0x8ea>
 800af40:	4b42      	ldr	r3, [pc, #264]	@ (800b04c <mg_http_status_code_str+0x964>)
 800af42:	e046      	b.n	800afd2 <mg_http_status_code_str+0x8ea>
 800af44:	4b42      	ldr	r3, [pc, #264]	@ (800b050 <mg_http_status_code_str+0x968>)
 800af46:	e044      	b.n	800afd2 <mg_http_status_code_str+0x8ea>
 800af48:	4b42      	ldr	r3, [pc, #264]	@ (800b054 <mg_http_status_code_str+0x96c>)
 800af4a:	e042      	b.n	800afd2 <mg_http_status_code_str+0x8ea>
 800af4c:	4b42      	ldr	r3, [pc, #264]	@ (800b058 <mg_http_status_code_str+0x970>)
 800af4e:	e040      	b.n	800afd2 <mg_http_status_code_str+0x8ea>
 800af50:	4b42      	ldr	r3, [pc, #264]	@ (800b05c <mg_http_status_code_str+0x974>)
 800af52:	e03e      	b.n	800afd2 <mg_http_status_code_str+0x8ea>
 800af54:	4b42      	ldr	r3, [pc, #264]	@ (800b060 <mg_http_status_code_str+0x978>)
 800af56:	e03c      	b.n	800afd2 <mg_http_status_code_str+0x8ea>
 800af58:	4b42      	ldr	r3, [pc, #264]	@ (800b064 <mg_http_status_code_str+0x97c>)
 800af5a:	e03a      	b.n	800afd2 <mg_http_status_code_str+0x8ea>
 800af5c:	4b42      	ldr	r3, [pc, #264]	@ (800b068 <mg_http_status_code_str+0x980>)
 800af5e:	e038      	b.n	800afd2 <mg_http_status_code_str+0x8ea>
 800af60:	4b42      	ldr	r3, [pc, #264]	@ (800b06c <mg_http_status_code_str+0x984>)
 800af62:	e036      	b.n	800afd2 <mg_http_status_code_str+0x8ea>
 800af64:	4b42      	ldr	r3, [pc, #264]	@ (800b070 <mg_http_status_code_str+0x988>)
 800af66:	e034      	b.n	800afd2 <mg_http_status_code_str+0x8ea>
 800af68:	4b42      	ldr	r3, [pc, #264]	@ (800b074 <mg_http_status_code_str+0x98c>)
 800af6a:	e032      	b.n	800afd2 <mg_http_status_code_str+0x8ea>
 800af6c:	4b42      	ldr	r3, [pc, #264]	@ (800b078 <mg_http_status_code_str+0x990>)
 800af6e:	e030      	b.n	800afd2 <mg_http_status_code_str+0x8ea>
 800af70:	4b42      	ldr	r3, [pc, #264]	@ (800b07c <mg_http_status_code_str+0x994>)
 800af72:	e02e      	b.n	800afd2 <mg_http_status_code_str+0x8ea>
 800af74:	4b42      	ldr	r3, [pc, #264]	@ (800b080 <mg_http_status_code_str+0x998>)
 800af76:	e02c      	b.n	800afd2 <mg_http_status_code_str+0x8ea>
 800af78:	4b42      	ldr	r3, [pc, #264]	@ (800b084 <mg_http_status_code_str+0x99c>)
 800af7a:	e02a      	b.n	800afd2 <mg_http_status_code_str+0x8ea>
 800af7c:	4b42      	ldr	r3, [pc, #264]	@ (800b088 <mg_http_status_code_str+0x9a0>)
 800af7e:	e028      	b.n	800afd2 <mg_http_status_code_str+0x8ea>
 800af80:	4b42      	ldr	r3, [pc, #264]	@ (800b08c <mg_http_status_code_str+0x9a4>)
 800af82:	e026      	b.n	800afd2 <mg_http_status_code_str+0x8ea>
 800af84:	4b42      	ldr	r3, [pc, #264]	@ (800b090 <mg_http_status_code_str+0x9a8>)
 800af86:	e024      	b.n	800afd2 <mg_http_status_code_str+0x8ea>
 800af88:	4b42      	ldr	r3, [pc, #264]	@ (800b094 <mg_http_status_code_str+0x9ac>)
 800af8a:	e022      	b.n	800afd2 <mg_http_status_code_str+0x8ea>
 800af8c:	4b42      	ldr	r3, [pc, #264]	@ (800b098 <mg_http_status_code_str+0x9b0>)
 800af8e:	e020      	b.n	800afd2 <mg_http_status_code_str+0x8ea>
 800af90:	4b42      	ldr	r3, [pc, #264]	@ (800b09c <mg_http_status_code_str+0x9b4>)
 800af92:	e01e      	b.n	800afd2 <mg_http_status_code_str+0x8ea>
 800af94:	4b42      	ldr	r3, [pc, #264]	@ (800b0a0 <mg_http_status_code_str+0x9b8>)
 800af96:	e01c      	b.n	800afd2 <mg_http_status_code_str+0x8ea>
 800af98:	4b42      	ldr	r3, [pc, #264]	@ (800b0a4 <mg_http_status_code_str+0x9bc>)
 800af9a:	e01a      	b.n	800afd2 <mg_http_status_code_str+0x8ea>
 800af9c:	4b42      	ldr	r3, [pc, #264]	@ (800b0a8 <mg_http_status_code_str+0x9c0>)
 800af9e:	e018      	b.n	800afd2 <mg_http_status_code_str+0x8ea>
 800afa0:	4b42      	ldr	r3, [pc, #264]	@ (800b0ac <mg_http_status_code_str+0x9c4>)
 800afa2:	e016      	b.n	800afd2 <mg_http_status_code_str+0x8ea>
 800afa4:	4b42      	ldr	r3, [pc, #264]	@ (800b0b0 <mg_http_status_code_str+0x9c8>)
 800afa6:	e014      	b.n	800afd2 <mg_http_status_code_str+0x8ea>
 800afa8:	4b42      	ldr	r3, [pc, #264]	@ (800b0b4 <mg_http_status_code_str+0x9cc>)
 800afaa:	e012      	b.n	800afd2 <mg_http_status_code_str+0x8ea>
 800afac:	4b42      	ldr	r3, [pc, #264]	@ (800b0b8 <mg_http_status_code_str+0x9d0>)
 800afae:	e010      	b.n	800afd2 <mg_http_status_code_str+0x8ea>
 800afb0:	4b42      	ldr	r3, [pc, #264]	@ (800b0bc <mg_http_status_code_str+0x9d4>)
 800afb2:	e00e      	b.n	800afd2 <mg_http_status_code_str+0x8ea>
 800afb4:	4b42      	ldr	r3, [pc, #264]	@ (800b0c0 <mg_http_status_code_str+0x9d8>)
 800afb6:	e00c      	b.n	800afd2 <mg_http_status_code_str+0x8ea>
 800afb8:	4b42      	ldr	r3, [pc, #264]	@ (800b0c4 <mg_http_status_code_str+0x9dc>)
 800afba:	e00a      	b.n	800afd2 <mg_http_status_code_str+0x8ea>
 800afbc:	4b42      	ldr	r3, [pc, #264]	@ (800b0c8 <mg_http_status_code_str+0x9e0>)
 800afbe:	e008      	b.n	800afd2 <mg_http_status_code_str+0x8ea>
 800afc0:	4b42      	ldr	r3, [pc, #264]	@ (800b0cc <mg_http_status_code_str+0x9e4>)
 800afc2:	e006      	b.n	800afd2 <mg_http_status_code_str+0x8ea>
 800afc4:	4b42      	ldr	r3, [pc, #264]	@ (800b0d0 <mg_http_status_code_str+0x9e8>)
 800afc6:	e004      	b.n	800afd2 <mg_http_status_code_str+0x8ea>
 800afc8:	4b42      	ldr	r3, [pc, #264]	@ (800b0d4 <mg_http_status_code_str+0x9ec>)
 800afca:	e002      	b.n	800afd2 <mg_http_status_code_str+0x8ea>
 800afcc:	4b42      	ldr	r3, [pc, #264]	@ (800b0d8 <mg_http_status_code_str+0x9f0>)
 800afce:	e000      	b.n	800afd2 <mg_http_status_code_str+0x8ea>
 800afd0:	4b42      	ldr	r3, [pc, #264]	@ (800b0dc <mg_http_status_code_str+0x9f4>)
 800afd2:	4618      	mov	r0, r3
 800afd4:	370c      	adds	r7, #12
 800afd6:	46bd      	mov	sp, r7
 800afd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800afdc:	4770      	bx	lr
 800afde:	bf00      	nop
 800afe0:	0801a6f0 	.word	0x0801a6f0
 800afe4:	0801a6fc 	.word	0x0801a6fc
 800afe8:	0801a710 	.word	0x0801a710
 800afec:	0801a71c 	.word	0x0801a71c
 800aff0:	0801a720 	.word	0x0801a720
 800aff4:	0801a728 	.word	0x0801a728
 800aff8:	0801a734 	.word	0x0801a734
 800affc:	0801a754 	.word	0x0801a754
 800b000:	0801a760 	.word	0x0801a760
 800b004:	0801a770 	.word	0x0801a770
 800b008:	0801a780 	.word	0x0801a780
 800b00c:	0801a790 	.word	0x0801a790
 800b010:	0801a7a4 	.word	0x0801a7a4
 800b014:	0801a7ac 	.word	0x0801a7ac
 800b018:	0801a7c0 	.word	0x0801a7c0
 800b01c:	0801a7d4 	.word	0x0801a7d4
 800b020:	0801a7dc 	.word	0x0801a7dc
 800b024:	0801a7e8 	.word	0x0801a7e8
 800b028:	0801a7f8 	.word	0x0801a7f8
 800b02c:	0801a804 	.word	0x0801a804
 800b030:	0801a818 	.word	0x0801a818
 800b034:	0801a82c 	.word	0x0801a82c
 800b038:	0801a838 	.word	0x0801a838
 800b03c:	0801a848 	.word	0x0801a848
 800b040:	0801a85c 	.word	0x0801a85c
 800b044:	0801a868 	.word	0x0801a868
 800b048:	0801a874 	.word	0x0801a874
 800b04c:	0801a888 	.word	0x0801a888
 800b050:	0801a898 	.word	0x0801a898
 800b054:	0801a8b8 	.word	0x0801a8b8
 800b058:	0801a8c8 	.word	0x0801a8c8
 800b05c:	0801a8d4 	.word	0x0801a8d4
 800b060:	0801a8dc 	.word	0x0801a8dc
 800b064:	0801a8ec 	.word	0x0801a8ec
 800b068:	0801a900 	.word	0x0801a900
 800b06c:	0801a914 	.word	0x0801a914
 800b070:	0801a92c 	.word	0x0801a92c
 800b074:	0801a944 	.word	0x0801a944
 800b078:	0801a964 	.word	0x0801a964
 800b07c:	0801a978 	.word	0x0801a978
 800b080:	0801a988 	.word	0x0801a988
 800b084:	0801a99c 	.word	0x0801a99c
 800b088:	0801a9b4 	.word	0x0801a9b4
 800b08c:	0801a9bc 	.word	0x0801a9bc
 800b090:	0801a9d0 	.word	0x0801a9d0
 800b094:	0801a9e4 	.word	0x0801a9e4
 800b098:	0801a9fc 	.word	0x0801a9fc
 800b09c:	0801aa10 	.word	0x0801aa10
 800b0a0:	0801aa30 	.word	0x0801aa30
 800b0a4:	0801aa54 	.word	0x0801aa54
 800b0a8:	0801aa74 	.word	0x0801aa74
 800b0ac:	0801aa8c 	.word	0x0801aa8c
 800b0b0:	0801aaa4 	.word	0x0801aaa4
 800b0b4:	0801aab4 	.word	0x0801aab4
 800b0b8:	0801aac0 	.word	0x0801aac0
 800b0bc:	0801aad4 	.word	0x0801aad4
 800b0c0:	0801aae4 	.word	0x0801aae4
 800b0c4:	0801ab00 	.word	0x0801ab00
 800b0c8:	0801ab18 	.word	0x0801ab18
 800b0cc:	0801ab30 	.word	0x0801ab30
 800b0d0:	0801ab40 	.word	0x0801ab40
 800b0d4:	0801ab50 	.word	0x0801ab50
 800b0d8:	0801ab70 	.word	0x0801ab70
 800b0dc:	0801ab90 	.word	0x0801ab90

0800b0e0 <mg_http_reply>:
 800b0e0:	b408      	push	{r3}
 800b0e2:	b580      	push	{r7, lr}
 800b0e4:	b08b      	sub	sp, #44	@ 0x2c
 800b0e6:	af02      	add	r7, sp, #8
 800b0e8:	60f8      	str	r0, [r7, #12]
 800b0ea:	60b9      	str	r1, [r7, #8]
 800b0ec:	607a      	str	r2, [r7, #4]
 800b0ee:	68b8      	ldr	r0, [r7, #8]
 800b0f0:	f7ff fafa 	bl	800a6e8 <mg_http_status_code_str>
 800b0f4:	4602      	mov	r2, r0
 800b0f6:	687b      	ldr	r3, [r7, #4]
 800b0f8:	2b00      	cmp	r3, #0
 800b0fa:	d001      	beq.n	800b100 <mg_http_reply+0x20>
 800b0fc:	687b      	ldr	r3, [r7, #4]
 800b0fe:	e000      	b.n	800b102 <mg_http_reply+0x22>
 800b100:	4b1f      	ldr	r3, [pc, #124]	@ (800b180 <mg_http_reply+0xa0>)
 800b102:	9300      	str	r3, [sp, #0]
 800b104:	4613      	mov	r3, r2
 800b106:	68ba      	ldr	r2, [r7, #8]
 800b108:	491e      	ldr	r1, [pc, #120]	@ (800b184 <mg_http_reply+0xa4>)
 800b10a:	68f8      	ldr	r0, [r7, #12]
 800b10c:	f004 fa2c 	bl	800f568 <mg_printf>
 800b110:	68fb      	ldr	r3, [r7, #12]
 800b112:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800b114:	61fb      	str	r3, [r7, #28]
 800b116:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 800b11a:	617b      	str	r3, [r7, #20]
 800b11c:	68fb      	ldr	r3, [r7, #12]
 800b11e:	f103 0148 	add.w	r1, r3, #72	@ 0x48
 800b122:	f107 0314 	add.w	r3, r7, #20
 800b126:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800b128:	4817      	ldr	r0, [pc, #92]	@ (800b188 <mg_http_reply+0xa8>)
 800b12a:	f7fe fb35 	bl	8009798 <mg_vxprintf>
 800b12e:	68fb      	ldr	r3, [r7, #12]
 800b130:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800b132:	2b10      	cmp	r3, #16
 800b134:	d916      	bls.n	800b164 <mg_http_reply+0x84>
 800b136:	68fb      	ldr	r3, [r7, #12]
 800b138:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800b13a:	69fb      	ldr	r3, [r7, #28]
 800b13c:	3b0f      	subs	r3, #15
 800b13e:	18d0      	adds	r0, r2, r3
 800b140:	68fb      	ldr	r3, [r7, #12]
 800b142:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800b144:	69fb      	ldr	r3, [r7, #28]
 800b146:	1ad3      	subs	r3, r2, r3
 800b148:	4a10      	ldr	r2, [pc, #64]	@ (800b18c <mg_http_reply+0xac>)
 800b14a:	210b      	movs	r1, #11
 800b14c:	f004 fc3c 	bl	800f9c8 <mg_snprintf>
 800b150:	61b8      	str	r0, [r7, #24]
 800b152:	68fb      	ldr	r3, [r7, #12]
 800b154:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800b156:	69f9      	ldr	r1, [r7, #28]
 800b158:	69bb      	ldr	r3, [r7, #24]
 800b15a:	440b      	add	r3, r1
 800b15c:	3b0f      	subs	r3, #15
 800b15e:	4413      	add	r3, r2
 800b160:	2220      	movs	r2, #32
 800b162:	701a      	strb	r2, [r3, #0]
 800b164:	68fa      	ldr	r2, [r7, #12]
 800b166:	f892 30ad 	ldrb.w	r3, [r2, #173]	@ 0xad
 800b16a:	f36f 13c7 	bfc	r3, #7, #1
 800b16e:	f882 30ad 	strb.w	r3, [r2, #173]	@ 0xad
 800b172:	bf00      	nop
 800b174:	3724      	adds	r7, #36	@ 0x24
 800b176:	46bd      	mov	sp, r7
 800b178:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800b17c:	b001      	add	sp, #4
 800b17e:	4770      	bx	lr
 800b180:	0801ab90 	.word	0x0801ab90
 800b184:	0801ab94 	.word	0x0801ab94
 800b188:	0800f959 	.word	0x0800f959
 800b18c:	0801abc8 	.word	0x0801abc8

0800b190 <mg_http_match_uri>:
 800b190:	b580      	push	{r7, lr}
 800b192:	b086      	sub	sp, #24
 800b194:	af02      	add	r7, sp, #8
 800b196:	6078      	str	r0, [r7, #4]
 800b198:	6039      	str	r1, [r7, #0]
 800b19a:	f107 0308 	add.w	r3, r7, #8
 800b19e:	6839      	ldr	r1, [r7, #0]
 800b1a0:	4618      	mov	r0, r3
 800b1a2:	f004 fe8b 	bl	800febc <mg_str_s>
 800b1a6:	6879      	ldr	r1, [r7, #4]
 800b1a8:	2300      	movs	r3, #0
 800b1aa:	9300      	str	r3, [sp, #0]
 800b1ac:	f107 0308 	add.w	r3, r7, #8
 800b1b0:	cb0c      	ldmia	r3, {r2, r3}
 800b1b2:	3108      	adds	r1, #8
 800b1b4:	c903      	ldmia	r1, {r0, r1}
 800b1b6:	f004 ff1f 	bl	800fff8 <mg_match>
 800b1ba:	4603      	mov	r3, r0
 800b1bc:	4618      	mov	r0, r3
 800b1be:	3710      	adds	r7, #16
 800b1c0:	46bd      	mov	sp, r7
 800b1c2:	bd80      	pop	{r7, pc}

0800b1c4 <is_hex_digit>:
 800b1c4:	b480      	push	{r7}
 800b1c6:	b083      	sub	sp, #12
 800b1c8:	af00      	add	r7, sp, #0
 800b1ca:	6078      	str	r0, [r7, #4]
 800b1cc:	687b      	ldr	r3, [r7, #4]
 800b1ce:	2b2f      	cmp	r3, #47	@ 0x2f
 800b1d0:	dd02      	ble.n	800b1d8 <is_hex_digit+0x14>
 800b1d2:	687b      	ldr	r3, [r7, #4]
 800b1d4:	2b39      	cmp	r3, #57	@ 0x39
 800b1d6:	dd0b      	ble.n	800b1f0 <is_hex_digit+0x2c>
 800b1d8:	687b      	ldr	r3, [r7, #4]
 800b1da:	2b60      	cmp	r3, #96	@ 0x60
 800b1dc:	dd02      	ble.n	800b1e4 <is_hex_digit+0x20>
 800b1de:	687b      	ldr	r3, [r7, #4]
 800b1e0:	2b66      	cmp	r3, #102	@ 0x66
 800b1e2:	dd05      	ble.n	800b1f0 <is_hex_digit+0x2c>
 800b1e4:	687b      	ldr	r3, [r7, #4]
 800b1e6:	2b40      	cmp	r3, #64	@ 0x40
 800b1e8:	dd04      	ble.n	800b1f4 <is_hex_digit+0x30>
 800b1ea:	687b      	ldr	r3, [r7, #4]
 800b1ec:	2b46      	cmp	r3, #70	@ 0x46
 800b1ee:	dc01      	bgt.n	800b1f4 <is_hex_digit+0x30>
 800b1f0:	2301      	movs	r3, #1
 800b1f2:	e000      	b.n	800b1f6 <is_hex_digit+0x32>
 800b1f4:	2300      	movs	r3, #0
 800b1f6:	f003 0301 	and.w	r3, r3, #1
 800b1fa:	b2db      	uxtb	r3, r3
 800b1fc:	4618      	mov	r0, r3
 800b1fe:	370c      	adds	r7, #12
 800b200:	46bd      	mov	sp, r7
 800b202:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b206:	4770      	bx	lr

0800b208 <skip_chunk>:
 800b208:	b580      	push	{r7, lr}
 800b20a:	b086      	sub	sp, #24
 800b20c:	af00      	add	r7, sp, #0
 800b20e:	60f8      	str	r0, [r7, #12]
 800b210:	60b9      	str	r1, [r7, #8]
 800b212:	607a      	str	r2, [r7, #4]
 800b214:	603b      	str	r3, [r7, #0]
 800b216:	2300      	movs	r3, #0
 800b218:	617b      	str	r3, [r7, #20]
 800b21a:	2300      	movs	r3, #0
 800b21c:	613b      	str	r3, [r7, #16]
 800b21e:	68bb      	ldr	r3, [r7, #8]
 800b220:	2b02      	cmp	r3, #2
 800b222:	dc04      	bgt.n	800b22e <skip_chunk+0x26>
 800b224:	2300      	movs	r3, #0
 800b226:	e067      	b.n	800b2f8 <skip_chunk+0xf0>
 800b228:	697b      	ldr	r3, [r7, #20]
 800b22a:	3301      	adds	r3, #1
 800b22c:	617b      	str	r3, [r7, #20]
 800b22e:	697a      	ldr	r2, [r7, #20]
 800b230:	68bb      	ldr	r3, [r7, #8]
 800b232:	429a      	cmp	r2, r3
 800b234:	da09      	bge.n	800b24a <skip_chunk+0x42>
 800b236:	697b      	ldr	r3, [r7, #20]
 800b238:	68fa      	ldr	r2, [r7, #12]
 800b23a:	4413      	add	r3, r2
 800b23c:	781b      	ldrb	r3, [r3, #0]
 800b23e:	4618      	mov	r0, r3
 800b240:	f7ff ffc0 	bl	800b1c4 <is_hex_digit>
 800b244:	4603      	mov	r3, r0
 800b246:	2b00      	cmp	r3, #0
 800b248:	d1ee      	bne.n	800b228 <skip_chunk+0x20>
 800b24a:	697b      	ldr	r3, [r7, #20]
 800b24c:	2b00      	cmp	r3, #0
 800b24e:	d102      	bne.n	800b256 <skip_chunk+0x4e>
 800b250:	f04f 33ff 	mov.w	r3, #4294967295
 800b254:	e050      	b.n	800b2f8 <skip_chunk+0xf0>
 800b256:	697b      	ldr	r3, [r7, #20]
 800b258:	2b08      	cmp	r3, #8
 800b25a:	dd02      	ble.n	800b262 <skip_chunk+0x5a>
 800b25c:	f04f 33ff 	mov.w	r3, #4294967295
 800b260:	e04a      	b.n	800b2f8 <skip_chunk+0xf0>
 800b262:	697a      	ldr	r2, [r7, #20]
 800b264:	68bb      	ldr	r3, [r7, #8]
 800b266:	429a      	cmp	r2, r3
 800b268:	da0c      	bge.n	800b284 <skip_chunk+0x7c>
 800b26a:	697b      	ldr	r3, [r7, #20]
 800b26c:	68fa      	ldr	r2, [r7, #12]
 800b26e:	4413      	add	r3, r2
 800b270:	781b      	ldrb	r3, [r3, #0]
 800b272:	2b0d      	cmp	r3, #13
 800b274:	d106      	bne.n	800b284 <skip_chunk+0x7c>
 800b276:	697b      	ldr	r3, [r7, #20]
 800b278:	3301      	adds	r3, #1
 800b27a:	68fa      	ldr	r2, [r7, #12]
 800b27c:	4413      	add	r3, r2
 800b27e:	781b      	ldrb	r3, [r3, #0]
 800b280:	2b0a      	cmp	r3, #10
 800b282:	d002      	beq.n	800b28a <skip_chunk+0x82>
 800b284:	f04f 33ff 	mov.w	r3, #4294967295
 800b288:	e036      	b.n	800b2f8 <skip_chunk+0xf0>
 800b28a:	697b      	ldr	r3, [r7, #20]
 800b28c:	4619      	mov	r1, r3
 800b28e:	68f8      	ldr	r0, [r7, #12]
 800b290:	f004 ffbc 	bl	801020c <mg_unhexn>
 800b294:	4603      	mov	r3, r0
 800b296:	613b      	str	r3, [r7, #16]
 800b298:	693b      	ldr	r3, [r7, #16]
 800b29a:	2b00      	cmp	r3, #0
 800b29c:	da02      	bge.n	800b2a4 <skip_chunk+0x9c>
 800b29e:	f04f 33ff 	mov.w	r3, #4294967295
 800b2a2:	e029      	b.n	800b2f8 <skip_chunk+0xf0>
 800b2a4:	68ba      	ldr	r2, [r7, #8]
 800b2a6:	697b      	ldr	r3, [r7, #20]
 800b2a8:	1ad3      	subs	r3, r2, r3
 800b2aa:	3b03      	subs	r3, #3
 800b2ac:	693a      	ldr	r2, [r7, #16]
 800b2ae:	429a      	cmp	r2, r3
 800b2b0:	db01      	blt.n	800b2b6 <skip_chunk+0xae>
 800b2b2:	2300      	movs	r3, #0
 800b2b4:	e020      	b.n	800b2f8 <skip_chunk+0xf0>
 800b2b6:	697a      	ldr	r2, [r7, #20]
 800b2b8:	693b      	ldr	r3, [r7, #16]
 800b2ba:	4413      	add	r3, r2
 800b2bc:	3302      	adds	r3, #2
 800b2be:	68fa      	ldr	r2, [r7, #12]
 800b2c0:	4413      	add	r3, r2
 800b2c2:	781b      	ldrb	r3, [r3, #0]
 800b2c4:	2b0d      	cmp	r3, #13
 800b2c6:	d108      	bne.n	800b2da <skip_chunk+0xd2>
 800b2c8:	697a      	ldr	r2, [r7, #20]
 800b2ca:	693b      	ldr	r3, [r7, #16]
 800b2cc:	4413      	add	r3, r2
 800b2ce:	3303      	adds	r3, #3
 800b2d0:	68fa      	ldr	r2, [r7, #12]
 800b2d2:	4413      	add	r3, r2
 800b2d4:	781b      	ldrb	r3, [r3, #0]
 800b2d6:	2b0a      	cmp	r3, #10
 800b2d8:	d002      	beq.n	800b2e0 <skip_chunk+0xd8>
 800b2da:	f04f 33ff 	mov.w	r3, #4294967295
 800b2de:	e00b      	b.n	800b2f8 <skip_chunk+0xf0>
 800b2e0:	697b      	ldr	r3, [r7, #20]
 800b2e2:	1c9a      	adds	r2, r3, #2
 800b2e4:	687b      	ldr	r3, [r7, #4]
 800b2e6:	601a      	str	r2, [r3, #0]
 800b2e8:	683b      	ldr	r3, [r7, #0]
 800b2ea:	693a      	ldr	r2, [r7, #16]
 800b2ec:	601a      	str	r2, [r3, #0]
 800b2ee:	697b      	ldr	r3, [r7, #20]
 800b2f0:	1c9a      	adds	r2, r3, #2
 800b2f2:	693b      	ldr	r3, [r7, #16]
 800b2f4:	4413      	add	r3, r2
 800b2f6:	3302      	adds	r3, #2
 800b2f8:	4618      	mov	r0, r3
 800b2fa:	3718      	adds	r7, #24
 800b2fc:	46bd      	mov	sp, r7
 800b2fe:	bd80      	pop	{r7, pc}

0800b300 <http_cb>:
 800b300:	b580      	push	{r7, lr}
 800b302:	f5ad 7d16 	sub.w	sp, sp, #600	@ 0x258
 800b306:	af00      	add	r7, sp, #0
 800b308:	f507 7316 	add.w	r3, r7, #600	@ 0x258
 800b30c:	f5a3 7313 	sub.w	r3, r3, #588	@ 0x24c
 800b310:	6018      	str	r0, [r3, #0]
 800b312:	f507 7316 	add.w	r3, r7, #600	@ 0x258
 800b316:	f5a3 7314 	sub.w	r3, r3, #592	@ 0x250
 800b31a:	6019      	str	r1, [r3, #0]
 800b31c:	f507 7316 	add.w	r3, r7, #600	@ 0x258
 800b320:	f5a3 7315 	sub.w	r3, r3, #596	@ 0x254
 800b324:	601a      	str	r2, [r3, #0]
 800b326:	f507 7316 	add.w	r3, r7, #600	@ 0x258
 800b32a:	f5a3 7314 	sub.w	r3, r3, #592	@ 0x250
 800b32e:	681b      	ldr	r3, [r3, #0]
 800b330:	2b07      	cmp	r3, #7
 800b332:	d007      	beq.n	800b344 <http_cb+0x44>
 800b334:	f507 7316 	add.w	r3, r7, #600	@ 0x258
 800b338:	f5a3 7314 	sub.w	r3, r3, #592	@ 0x250
 800b33c:	681b      	ldr	r3, [r3, #0]
 800b33e:	2b09      	cmp	r3, #9
 800b340:	f040 81e2 	bne.w	800b708 <http_cb+0x408>
 800b344:	2300      	movs	r3, #0
 800b346:	f8c7 3254 	str.w	r3, [r7, #596]	@ 0x254
 800b34a:	e1b0      	b.n	800b6ae <http_cb+0x3ae>
 800b34c:	f507 7316 	add.w	r3, r7, #600	@ 0x258
 800b350:	f5a3 7313 	sub.w	r3, r3, #588	@ 0x24c
 800b354:	681b      	ldr	r3, [r3, #0]
 800b356:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800b358:	f8d7 3254 	ldr.w	r3, [r7, #596]	@ 0x254
 800b35c:	4413      	add	r3, r2
 800b35e:	f8c7 3248 	str.w	r3, [r7, #584]	@ 0x248
 800b362:	f507 7316 	add.w	r3, r7, #600	@ 0x258
 800b366:	f5a3 7313 	sub.w	r3, r3, #588	@ 0x24c
 800b36a:	681b      	ldr	r3, [r3, #0]
 800b36c:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800b36e:	f8d7 3254 	ldr.w	r3, [r7, #596]	@ 0x254
 800b372:	1ad3      	subs	r3, r2, r3
 800b374:	f107 0210 	add.w	r2, r7, #16
 800b378:	4619      	mov	r1, r3
 800b37a:	f8d7 0248 	ldr.w	r0, [r7, #584]	@ 0x248
 800b37e:	f7ff f85d 	bl	800a43c <mg_http_parse>
 800b382:	f8c7 0244 	str.w	r0, [r7, #580]	@ 0x244
 800b386:	2300      	movs	r3, #0
 800b388:	f887 3253 	strb.w	r3, [r7, #595]	@ 0x253
 800b38c:	f8d7 3244 	ldr.w	r3, [r7, #580]	@ 0x244
 800b390:	2b00      	cmp	r3, #0
 800b392:	da21      	bge.n	800b3d8 <http_cb+0xd8>
 800b394:	f507 7316 	add.w	r3, r7, #600	@ 0x258
 800b398:	f5a3 7313 	sub.w	r3, r3, #588	@ 0x24c
 800b39c:	681b      	ldr	r3, [r3, #0]
 800b39e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800b3a0:	f507 7316 	add.w	r3, r7, #600	@ 0x258
 800b3a4:	f5a3 7313 	sub.w	r3, r3, #588	@ 0x24c
 800b3a8:	49d9      	ldr	r1, [pc, #868]	@ (800b710 <http_cb+0x410>)
 800b3aa:	6818      	ldr	r0, [r3, #0]
 800b3ac:	f7fd fd48 	bl	8008e40 <mg_error>
 800b3b0:	f507 7316 	add.w	r3, r7, #600	@ 0x258
 800b3b4:	f5a3 7313 	sub.w	r3, r3, #588	@ 0x24c
 800b3b8:	681b      	ldr	r3, [r3, #0]
 800b3ba:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800b3bc:	f507 7316 	add.w	r3, r7, #600	@ 0x258
 800b3c0:	f5a3 7313 	sub.w	r3, r3, #588	@ 0x24c
 800b3c4:	681b      	ldr	r3, [r3, #0]
 800b3c6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b3c8:	2b10      	cmp	r3, #16
 800b3ca:	bf28      	it	cs
 800b3cc:	2310      	movcs	r3, #16
 800b3ce:	4619      	mov	r1, r3
 800b3d0:	4610      	mov	r0, r2
 800b3d2:	f001 f8f1 	bl	800c5b8 <mg_hexdump>
 800b3d6:	e197      	b.n	800b708 <http_cb+0x408>
 800b3d8:	f8d7 3244 	ldr.w	r3, [r7, #580]	@ 0x244
 800b3dc:	2b00      	cmp	r3, #0
 800b3de:	f000 817e 	beq.w	800b6de <http_cb+0x3de>
 800b3e2:	f507 7316 	add.w	r3, r7, #600	@ 0x258
 800b3e6:	f5a3 7314 	sub.w	r3, r3, #592	@ 0x250
 800b3ea:	681b      	ldr	r3, [r3, #0]
 800b3ec:	2b09      	cmp	r3, #9
 800b3ee:	d128      	bne.n	800b442 <http_cb+0x142>
 800b3f0:	f507 7316 	add.w	r3, r7, #600	@ 0x258
 800b3f4:	f5a3 7313 	sub.w	r3, r3, #588	@ 0x24c
 800b3f8:	681b      	ldr	r3, [r3, #0]
 800b3fa:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800b3fc:	f8d7 3254 	ldr.w	r3, [r7, #596]	@ 0x254
 800b400:	1ad2      	subs	r2, r2, r3
 800b402:	f507 7316 	add.w	r3, r7, #600	@ 0x258
 800b406:	f5a3 7312 	sub.w	r3, r3, #584	@ 0x248
 800b40a:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
 800b40e:	f507 7316 	add.w	r3, r7, #600	@ 0x258
 800b412:	f5a3 7312 	sub.w	r3, r3, #584	@ 0x248
 800b416:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 800b41a:	f507 7216 	add.w	r2, r7, #600	@ 0x258
 800b41e:	f5a2 7212 	sub.w	r2, r2, #584	@ 0x248
 800b422:	f8d2 1200 	ldr.w	r1, [r2, #512]	@ 0x200
 800b426:	f507 7216 	add.w	r2, r7, #600	@ 0x258
 800b42a:	f5a2 7212 	sub.w	r2, r2, #584	@ 0x248
 800b42e:	f8d2 2210 	ldr.w	r2, [r2, #528]	@ 0x210
 800b432:	1a8a      	subs	r2, r1, r2
 800b434:	1a9a      	subs	r2, r3, r2
 800b436:	f507 7316 	add.w	r3, r7, #600	@ 0x258
 800b43a:	f5a3 7312 	sub.w	r3, r3, #584	@ 0x248
 800b43e:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204
 800b442:	f107 0310 	add.w	r3, r7, #16
 800b446:	49b3      	ldr	r1, [pc, #716]	@ (800b714 <http_cb+0x414>)
 800b448:	4618      	mov	r0, r3
 800b44a:	f7fe fe47 	bl	800a0dc <mg_http_get_header>
 800b44e:	f8c7 0240 	str.w	r0, [r7, #576]	@ 0x240
 800b452:	f8d7 3240 	ldr.w	r3, [r7, #576]	@ 0x240
 800b456:	2b00      	cmp	r3, #0
 800b458:	d014      	beq.n	800b484 <http_cb+0x184>
 800b45a:	49af      	ldr	r1, [pc, #700]	@ (800b718 <http_cb+0x418>)
 800b45c:	f8d7 0240 	ldr.w	r0, [r7, #576]	@ 0x240
 800b460:	f004 fda6 	bl	800ffb0 <mg_vcasecmp>
 800b464:	4603      	mov	r3, r0
 800b466:	2b00      	cmp	r3, #0
 800b468:	d103      	bne.n	800b472 <http_cb+0x172>
 800b46a:	2301      	movs	r3, #1
 800b46c:	f887 3253 	strb.w	r3, [r7, #595]	@ 0x253
 800b470:	e008      	b.n	800b484 <http_cb+0x184>
 800b472:	f507 7316 	add.w	r3, r7, #600	@ 0x258
 800b476:	f5a3 7313 	sub.w	r3, r3, #588	@ 0x24c
 800b47a:	49a8      	ldr	r1, [pc, #672]	@ (800b71c <http_cb+0x41c>)
 800b47c:	6818      	ldr	r0, [r3, #0]
 800b47e:	f7fd fcdf 	bl	8008e40 <mg_error>
 800b482:	e141      	b.n	800b708 <http_cb+0x408>
 800b484:	f897 3253 	ldrb.w	r3, [r7, #595]	@ 0x253
 800b488:	2b00      	cmp	r3, #0
 800b48a:	f000 80c9 	beq.w	800b620 <http_cb+0x320>
 800b48e:	f507 7316 	add.w	r3, r7, #600	@ 0x258
 800b492:	f5a3 7313 	sub.w	r3, r3, #588	@ 0x24c
 800b496:	681b      	ldr	r3, [r3, #0]
 800b498:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800b49a:	f8d7 1244 	ldr.w	r1, [r7, #580]	@ 0x244
 800b49e:	f8d7 3254 	ldr.w	r3, [r7, #596]	@ 0x254
 800b4a2:	440b      	add	r3, r1
 800b4a4:	4413      	add	r3, r2
 800b4a6:	f8c7 3238 	str.w	r3, [r7, #568]	@ 0x238
 800b4aa:	2300      	movs	r3, #0
 800b4ac:	f8c7 324c 	str.w	r3, [r7, #588]	@ 0x24c
 800b4b0:	f507 7316 	add.w	r3, r7, #600	@ 0x258
 800b4b4:	f5a3 7313 	sub.w	r3, r3, #588	@ 0x24c
 800b4b8:	681b      	ldr	r3, [r3, #0]
 800b4ba:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800b4bc:	f8d7 3254 	ldr.w	r3, [r7, #596]	@ 0x254
 800b4c0:	1ad2      	subs	r2, r2, r3
 800b4c2:	f8d7 3244 	ldr.w	r3, [r7, #580]	@ 0x244
 800b4c6:	1ad3      	subs	r3, r2, r3
 800b4c8:	f8c7 3234 	str.w	r3, [r7, #564]	@ 0x234
 800b4cc:	e006      	b.n	800b4dc <http_cb+0x1dc>
 800b4ce:	f8d7 224c 	ldr.w	r2, [r7, #588]	@ 0x24c
 800b4d2:	f8d7 3230 	ldr.w	r3, [r7, #560]	@ 0x230
 800b4d6:	4413      	add	r3, r2
 800b4d8:	f8c7 324c 	str.w	r3, [r7, #588]	@ 0x24c
 800b4dc:	f8d7 324c 	ldr.w	r3, [r7, #588]	@ 0x24c
 800b4e0:	f8d7 2238 	ldr.w	r2, [r7, #568]	@ 0x238
 800b4e4:	18d0      	adds	r0, r2, r3
 800b4e6:	f8d7 2234 	ldr.w	r2, [r7, #564]	@ 0x234
 800b4ea:	f8d7 324c 	ldr.w	r3, [r7, #588]	@ 0x24c
 800b4ee:	1ad1      	subs	r1, r2, r3
 800b4f0:	f507 730a 	add.w	r3, r7, #552	@ 0x228
 800b4f4:	f507 720b 	add.w	r2, r7, #556	@ 0x22c
 800b4f8:	f7ff fe86 	bl	800b208 <skip_chunk>
 800b4fc:	f8c7 0230 	str.w	r0, [r7, #560]	@ 0x230
 800b500:	f8d7 3230 	ldr.w	r3, [r7, #560]	@ 0x230
 800b504:	2b00      	cmp	r3, #0
 800b506:	dd03      	ble.n	800b510 <http_cb+0x210>
 800b508:	f8d7 3228 	ldr.w	r3, [r7, #552]	@ 0x228
 800b50c:	2b00      	cmp	r3, #0
 800b50e:	d1de      	bne.n	800b4ce <http_cb+0x1ce>
 800b510:	f8d7 3230 	ldr.w	r3, [r7, #560]	@ 0x230
 800b514:	2b00      	cmp	r3, #0
 800b516:	f000 80e4 	beq.w	800b6e2 <http_cb+0x3e2>
 800b51a:	f8d7 3230 	ldr.w	r3, [r7, #560]	@ 0x230
 800b51e:	2b00      	cmp	r3, #0
 800b520:	da08      	bge.n	800b534 <http_cb+0x234>
 800b522:	f507 7316 	add.w	r3, r7, #600	@ 0x258
 800b526:	f5a3 7313 	sub.w	r3, r3, #588	@ 0x24c
 800b52a:	497d      	ldr	r1, [pc, #500]	@ (800b720 <http_cb+0x420>)
 800b52c:	6818      	ldr	r0, [r3, #0]
 800b52e:	f7fd fc87 	bl	8008e40 <mg_error>
 800b532:	e0d9      	b.n	800b6e8 <http_cb+0x3e8>
 800b534:	2300      	movs	r3, #0
 800b536:	f8c7 324c 	str.w	r3, [r7, #588]	@ 0x24c
 800b53a:	f507 7316 	add.w	r3, r7, #600	@ 0x258
 800b53e:	f5a3 7312 	sub.w	r3, r3, #584	@ 0x248
 800b542:	2200      	movs	r2, #0
 800b544:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204
 800b548:	f8d7 2244 	ldr.w	r2, [r7, #580]	@ 0x244
 800b54c:	f507 7316 	add.w	r3, r7, #600	@ 0x258
 800b550:	f5a3 7312 	sub.w	r3, r3, #584	@ 0x248
 800b554:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
 800b558:	e03e      	b.n	800b5d8 <http_cb+0x2d8>
 800b55a:	f507 7316 	add.w	r3, r7, #600	@ 0x258
 800b55e:	f5a3 7312 	sub.w	r3, r3, #584	@ 0x248
 800b562:	f8d3 3204 	ldr.w	r3, [r3, #516]	@ 0x204
 800b566:	f8d7 2238 	ldr.w	r2, [r7, #568]	@ 0x238
 800b56a:	18d0      	adds	r0, r2, r3
 800b56c:	f8d7 324c 	ldr.w	r3, [r7, #588]	@ 0x24c
 800b570:	f8d7 222c 	ldr.w	r2, [r7, #556]	@ 0x22c
 800b574:	4413      	add	r3, r2
 800b576:	f8d7 2238 	ldr.w	r2, [r7, #568]	@ 0x238
 800b57a:	4413      	add	r3, r2
 800b57c:	f8d7 2228 	ldr.w	r2, [r7, #552]	@ 0x228
 800b580:	4619      	mov	r1, r3
 800b582:	f00e fa09 	bl	8019998 <memmove>
 800b586:	f8d7 224c 	ldr.w	r2, [r7, #588]	@ 0x24c
 800b58a:	f8d7 3230 	ldr.w	r3, [r7, #560]	@ 0x230
 800b58e:	4413      	add	r3, r2
 800b590:	f8c7 324c 	str.w	r3, [r7, #588]	@ 0x24c
 800b594:	f507 7316 	add.w	r3, r7, #600	@ 0x258
 800b598:	f5a3 7312 	sub.w	r3, r3, #584	@ 0x248
 800b59c:	f8d3 3204 	ldr.w	r3, [r3, #516]	@ 0x204
 800b5a0:	f8d7 2228 	ldr.w	r2, [r7, #552]	@ 0x228
 800b5a4:	441a      	add	r2, r3
 800b5a6:	f507 7316 	add.w	r3, r7, #600	@ 0x258
 800b5aa:	f5a3 7312 	sub.w	r3, r3, #584	@ 0x248
 800b5ae:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204
 800b5b2:	f507 7316 	add.w	r3, r7, #600	@ 0x258
 800b5b6:	f5a3 7312 	sub.w	r3, r3, #584	@ 0x248
 800b5ba:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 800b5be:	f8d7 2228 	ldr.w	r2, [r7, #552]	@ 0x228
 800b5c2:	441a      	add	r2, r3
 800b5c4:	f507 7316 	add.w	r3, r7, #600	@ 0x258
 800b5c8:	f5a3 7312 	sub.w	r3, r3, #584	@ 0x248
 800b5cc:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
 800b5d0:	f8d7 3228 	ldr.w	r3, [r7, #552]	@ 0x228
 800b5d4:	2b00      	cmp	r3, #0
 800b5d6:	d016      	beq.n	800b606 <http_cb+0x306>
 800b5d8:	f8d7 324c 	ldr.w	r3, [r7, #588]	@ 0x24c
 800b5dc:	f8d7 2238 	ldr.w	r2, [r7, #568]	@ 0x238
 800b5e0:	18d0      	adds	r0, r2, r3
 800b5e2:	f8d7 2234 	ldr.w	r2, [r7, #564]	@ 0x234
 800b5e6:	f8d7 324c 	ldr.w	r3, [r7, #588]	@ 0x24c
 800b5ea:	1ad1      	subs	r1, r2, r3
 800b5ec:	f507 730a 	add.w	r3, r7, #552	@ 0x228
 800b5f0:	f507 720b 	add.w	r2, r7, #556	@ 0x22c
 800b5f4:	f7ff fe08 	bl	800b208 <skip_chunk>
 800b5f8:	f8c7 0230 	str.w	r0, [r7, #560]	@ 0x230
 800b5fc:	f8d7 3230 	ldr.w	r3, [r7, #560]	@ 0x230
 800b600:	2b00      	cmp	r3, #0
 800b602:	dcaa      	bgt.n	800b55a <http_cb+0x25a>
 800b604:	e000      	b.n	800b608 <http_cb+0x308>
 800b606:	bf00      	nop
 800b608:	f8d7 2244 	ldr.w	r2, [r7, #580]	@ 0x244
 800b60c:	f8d7 324c 	ldr.w	r3, [r7, #588]	@ 0x24c
 800b610:	4413      	add	r3, r2
 800b612:	461a      	mov	r2, r3
 800b614:	f8d7 3254 	ldr.w	r3, [r7, #596]	@ 0x254
 800b618:	4413      	add	r3, r2
 800b61a:	f8c7 3254 	str.w	r3, [r7, #596]	@ 0x254
 800b61e:	e025      	b.n	800b66c <http_cb+0x36c>
 800b620:	f507 7316 	add.w	r3, r7, #600	@ 0x258
 800b624:	f5a3 7313 	sub.w	r3, r3, #588	@ 0x24c
 800b628:	681b      	ldr	r3, [r3, #0]
 800b62a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800b62c:	f8d7 3254 	ldr.w	r3, [r7, #596]	@ 0x254
 800b630:	1ad2      	subs	r2, r2, r3
 800b632:	f8d7 3244 	ldr.w	r3, [r7, #580]	@ 0x244
 800b636:	1ad3      	subs	r3, r2, r3
 800b638:	f8c7 323c 	str.w	r3, [r7, #572]	@ 0x23c
 800b63c:	f507 7316 	add.w	r3, r7, #600	@ 0x258
 800b640:	f5a3 7312 	sub.w	r3, r3, #584	@ 0x248
 800b644:	f8d3 3204 	ldr.w	r3, [r3, #516]	@ 0x204
 800b648:	f8d7 223c 	ldr.w	r2, [r7, #572]	@ 0x23c
 800b64c:	429a      	cmp	r2, r3
 800b64e:	d34a      	bcc.n	800b6e6 <http_cb+0x3e6>
 800b650:	f507 7316 	add.w	r3, r7, #600	@ 0x258
 800b654:	f5a3 7312 	sub.w	r3, r3, #584	@ 0x248
 800b658:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800b65c:	f8d7 3244 	ldr.w	r3, [r7, #580]	@ 0x244
 800b660:	4413      	add	r3, r2
 800b662:	f8d7 2254 	ldr.w	r2, [r7, #596]	@ 0x254
 800b666:	4413      	add	r3, r2
 800b668:	f8c7 3254 	str.w	r3, [r7, #596]	@ 0x254
 800b66c:	f507 7316 	add.w	r3, r7, #600	@ 0x258
 800b670:	f5a3 7313 	sub.w	r3, r3, #588	@ 0x24c
 800b674:	681b      	ldr	r3, [r3, #0]
 800b676:	f893 30ac 	ldrb.w	r3, [r3, #172]	@ 0xac
 800b67a:	f003 0304 	and.w	r3, r3, #4
 800b67e:	b2db      	uxtb	r3, r3
 800b680:	2b00      	cmp	r3, #0
 800b682:	d00a      	beq.n	800b69a <http_cb+0x39a>
 800b684:	f507 7316 	add.w	r3, r7, #600	@ 0x258
 800b688:	f5a3 7313 	sub.w	r3, r3, #588	@ 0x24c
 800b68c:	681a      	ldr	r2, [r3, #0]
 800b68e:	f892 30ad 	ldrb.w	r3, [r2, #173]	@ 0xad
 800b692:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800b696:	f882 30ad 	strb.w	r3, [r2, #173]	@ 0xad
 800b69a:	f107 0210 	add.w	r2, r7, #16
 800b69e:	f507 7316 	add.w	r3, r7, #600	@ 0x258
 800b6a2:	f5a3 7313 	sub.w	r3, r3, #588	@ 0x24c
 800b6a6:	210a      	movs	r1, #10
 800b6a8:	6818      	ldr	r0, [r3, #0]
 800b6aa:	f7fd fba9 	bl	8008e00 <mg_call>
 800b6ae:	f507 7316 	add.w	r3, r7, #600	@ 0x258
 800b6b2:	f5a3 7313 	sub.w	r3, r3, #588	@ 0x24c
 800b6b6:	681b      	ldr	r3, [r3, #0]
 800b6b8:	f893 30ad 	ldrb.w	r3, [r3, #173]	@ 0xad
 800b6bc:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 800b6c0:	b2db      	uxtb	r3, r3
 800b6c2:	2b00      	cmp	r3, #0
 800b6c4:	d110      	bne.n	800b6e8 <http_cb+0x3e8>
 800b6c6:	f507 7316 	add.w	r3, r7, #600	@ 0x258
 800b6ca:	f5a3 7313 	sub.w	r3, r3, #588	@ 0x24c
 800b6ce:	681b      	ldr	r3, [r3, #0]
 800b6d0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b6d2:	f8d7 2254 	ldr.w	r2, [r7, #596]	@ 0x254
 800b6d6:	429a      	cmp	r2, r3
 800b6d8:	f4ff ae38 	bcc.w	800b34c <http_cb+0x4c>
 800b6dc:	e004      	b.n	800b6e8 <http_cb+0x3e8>
 800b6de:	bf00      	nop
 800b6e0:	e002      	b.n	800b6e8 <http_cb+0x3e8>
 800b6e2:	bf00      	nop
 800b6e4:	e000      	b.n	800b6e8 <http_cb+0x3e8>
 800b6e6:	bf00      	nop
 800b6e8:	f8d7 3254 	ldr.w	r3, [r7, #596]	@ 0x254
 800b6ec:	2b00      	cmp	r3, #0
 800b6ee:	d00b      	beq.n	800b708 <http_cb+0x408>
 800b6f0:	f507 7316 	add.w	r3, r7, #600	@ 0x258
 800b6f4:	f5a3 7313 	sub.w	r3, r3, #588	@ 0x24c
 800b6f8:	681b      	ldr	r3, [r3, #0]
 800b6fa:	3338      	adds	r3, #56	@ 0x38
 800b6fc:	f8d7 2254 	ldr.w	r2, [r7, #596]	@ 0x254
 800b700:	2100      	movs	r1, #0
 800b702:	4618      	mov	r0, r3
 800b704:	f000 f8d0 	bl	800b8a8 <mg_iobuf_del>
 800b708:	f507 7716 	add.w	r7, r7, #600	@ 0x258
 800b70c:	46bd      	mov	sp, r7
 800b70e:	bd80      	pop	{r7, pc}
 800b710:	0801b0a0 	.word	0x0801b0a0
 800b714:	0801b0b8 	.word	0x0801b0b8
 800b718:	0801b0cc 	.word	0x0801b0cc
 800b71c:	0801b0d4 	.word	0x0801b0d4
 800b720:	0801b0f0 	.word	0x0801b0f0

0800b724 <mg_http_listen>:
 800b724:	b580      	push	{r7, lr}
 800b726:	b086      	sub	sp, #24
 800b728:	af00      	add	r7, sp, #0
 800b72a:	60f8      	str	r0, [r7, #12]
 800b72c:	60b9      	str	r1, [r7, #8]
 800b72e:	607a      	str	r2, [r7, #4]
 800b730:	603b      	str	r3, [r7, #0]
 800b732:	683b      	ldr	r3, [r7, #0]
 800b734:	687a      	ldr	r2, [r7, #4]
 800b736:	68b9      	ldr	r1, [r7, #8]
 800b738:	68f8      	ldr	r0, [r7, #12]
 800b73a:	f003 ffc5 	bl	800f6c8 <mg_listen>
 800b73e:	6178      	str	r0, [r7, #20]
 800b740:	697b      	ldr	r3, [r7, #20]
 800b742:	2b00      	cmp	r3, #0
 800b744:	d003      	beq.n	800b74e <mg_http_listen+0x2a>
 800b746:	697b      	ldr	r3, [r7, #20]
 800b748:	4a03      	ldr	r2, [pc, #12]	@ (800b758 <mg_http_listen+0x34>)
 800b74a:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
 800b74e:	697b      	ldr	r3, [r7, #20]
 800b750:	4618      	mov	r0, r3
 800b752:	3718      	adds	r7, #24
 800b754:	46bd      	mov	sp, r7
 800b756:	bd80      	pop	{r7, pc}
 800b758:	0800b301 	.word	0x0800b301

0800b75c <roundup>:
 800b75c:	b480      	push	{r7}
 800b75e:	b083      	sub	sp, #12
 800b760:	af00      	add	r7, sp, #0
 800b762:	6078      	str	r0, [r7, #4]
 800b764:	6039      	str	r1, [r7, #0]
 800b766:	683b      	ldr	r3, [r7, #0]
 800b768:	2b00      	cmp	r3, #0
 800b76a:	d00a      	beq.n	800b782 <roundup+0x26>
 800b76c:	687a      	ldr	r2, [r7, #4]
 800b76e:	683b      	ldr	r3, [r7, #0]
 800b770:	4413      	add	r3, r2
 800b772:	1e5a      	subs	r2, r3, #1
 800b774:	683b      	ldr	r3, [r7, #0]
 800b776:	fbb2 f3f3 	udiv	r3, r2, r3
 800b77a:	683a      	ldr	r2, [r7, #0]
 800b77c:	fb02 f303 	mul.w	r3, r2, r3
 800b780:	e000      	b.n	800b784 <roundup+0x28>
 800b782:	687b      	ldr	r3, [r7, #4]
 800b784:	4618      	mov	r0, r3
 800b786:	370c      	adds	r7, #12
 800b788:	46bd      	mov	sp, r7
 800b78a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b78e:	4770      	bx	lr

0800b790 <mg_iobuf_resize>:
 800b790:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 800b794:	b088      	sub	sp, #32
 800b796:	af02      	add	r7, sp, #8
 800b798:	6078      	str	r0, [r7, #4]
 800b79a:	6039      	str	r1, [r7, #0]
 800b79c:	2301      	movs	r3, #1
 800b79e:	617b      	str	r3, [r7, #20]
 800b7a0:	687b      	ldr	r3, [r7, #4]
 800b7a2:	68db      	ldr	r3, [r3, #12]
 800b7a4:	4619      	mov	r1, r3
 800b7a6:	6838      	ldr	r0, [r7, #0]
 800b7a8:	f7ff ffd8 	bl	800b75c <roundup>
 800b7ac:	6038      	str	r0, [r7, #0]
 800b7ae:	683b      	ldr	r3, [r7, #0]
 800b7b0:	2b00      	cmp	r3, #0
 800b7b2:	d117      	bne.n	800b7e4 <mg_iobuf_resize+0x54>
 800b7b4:	687b      	ldr	r3, [r7, #4]
 800b7b6:	681a      	ldr	r2, [r3, #0]
 800b7b8:	687b      	ldr	r3, [r7, #4]
 800b7ba:	685b      	ldr	r3, [r3, #4]
 800b7bc:	4619      	mov	r1, r3
 800b7be:	4610      	mov	r0, r2
 800b7c0:	f004 ffc0 	bl	8010744 <mg_bzero>
 800b7c4:	687b      	ldr	r3, [r7, #4]
 800b7c6:	681b      	ldr	r3, [r3, #0]
 800b7c8:	4618      	mov	r0, r3
 800b7ca:	f00d fd0d 	bl	80191e8 <free>
 800b7ce:	687b      	ldr	r3, [r7, #4]
 800b7d0:	2200      	movs	r2, #0
 800b7d2:	601a      	str	r2, [r3, #0]
 800b7d4:	687b      	ldr	r3, [r7, #4]
 800b7d6:	2200      	movs	r2, #0
 800b7d8:	605a      	str	r2, [r3, #4]
 800b7da:	687b      	ldr	r3, [r7, #4]
 800b7dc:	685a      	ldr	r2, [r3, #4]
 800b7de:	687b      	ldr	r3, [r7, #4]
 800b7e0:	609a      	str	r2, [r3, #8]
 800b7e2:	e052      	b.n	800b88a <mg_iobuf_resize+0xfa>
 800b7e4:	687b      	ldr	r3, [r7, #4]
 800b7e6:	685b      	ldr	r3, [r3, #4]
 800b7e8:	683a      	ldr	r2, [r7, #0]
 800b7ea:	429a      	cmp	r2, r3
 800b7ec:	d04d      	beq.n	800b88a <mg_iobuf_resize+0xfa>
 800b7ee:	6839      	ldr	r1, [r7, #0]
 800b7f0:	2001      	movs	r0, #1
 800b7f2:	f00d fcd5 	bl	80191a0 <calloc>
 800b7f6:	4603      	mov	r3, r0
 800b7f8:	613b      	str	r3, [r7, #16]
 800b7fa:	693b      	ldr	r3, [r7, #16]
 800b7fc:	2b00      	cmp	r3, #0
 800b7fe:	d028      	beq.n	800b852 <mg_iobuf_resize+0xc2>
 800b800:	687b      	ldr	r3, [r7, #4]
 800b802:	689b      	ldr	r3, [r3, #8]
 800b804:	683a      	ldr	r2, [r7, #0]
 800b806:	4293      	cmp	r3, r2
 800b808:	bf28      	it	cs
 800b80a:	4613      	movcs	r3, r2
 800b80c:	60fb      	str	r3, [r7, #12]
 800b80e:	68fb      	ldr	r3, [r7, #12]
 800b810:	2b00      	cmp	r3, #0
 800b812:	d00a      	beq.n	800b82a <mg_iobuf_resize+0x9a>
 800b814:	687b      	ldr	r3, [r7, #4]
 800b816:	681b      	ldr	r3, [r3, #0]
 800b818:	2b00      	cmp	r3, #0
 800b81a:	d006      	beq.n	800b82a <mg_iobuf_resize+0x9a>
 800b81c:	687b      	ldr	r3, [r7, #4]
 800b81e:	681b      	ldr	r3, [r3, #0]
 800b820:	68fa      	ldr	r2, [r7, #12]
 800b822:	4619      	mov	r1, r3
 800b824:	6938      	ldr	r0, [r7, #16]
 800b826:	f00e f8b7 	bl	8019998 <memmove>
 800b82a:	687b      	ldr	r3, [r7, #4]
 800b82c:	681a      	ldr	r2, [r3, #0]
 800b82e:	687b      	ldr	r3, [r7, #4]
 800b830:	685b      	ldr	r3, [r3, #4]
 800b832:	4619      	mov	r1, r3
 800b834:	4610      	mov	r0, r2
 800b836:	f004 ff85 	bl	8010744 <mg_bzero>
 800b83a:	687b      	ldr	r3, [r7, #4]
 800b83c:	681b      	ldr	r3, [r3, #0]
 800b83e:	4618      	mov	r0, r3
 800b840:	f00d fcd2 	bl	80191e8 <free>
 800b844:	687b      	ldr	r3, [r7, #4]
 800b846:	693a      	ldr	r2, [r7, #16]
 800b848:	601a      	str	r2, [r3, #0]
 800b84a:	687b      	ldr	r3, [r7, #4]
 800b84c:	683a      	ldr	r2, [r7, #0]
 800b84e:	605a      	str	r2, [r3, #4]
 800b850:	e01b      	b.n	800b88a <mg_iobuf_resize+0xfa>
 800b852:	2300      	movs	r3, #0
 800b854:	617b      	str	r3, [r7, #20]
 800b856:	4b10      	ldr	r3, [pc, #64]	@ (800b898 <mg_iobuf_resize+0x108>)
 800b858:	681b      	ldr	r3, [r3, #0]
 800b85a:	2b00      	cmp	r3, #0
 800b85c:	dd15      	ble.n	800b88a <mg_iobuf_resize+0xfa>
 800b85e:	4b0f      	ldr	r3, [pc, #60]	@ (800b89c <mg_iobuf_resize+0x10c>)
 800b860:	2220      	movs	r2, #32
 800b862:	490f      	ldr	r1, [pc, #60]	@ (800b8a0 <mg_iobuf_resize+0x110>)
 800b864:	2001      	movs	r0, #1
 800b866:	f000 fe21 	bl	800c4ac <mg_log_prefix>
 800b86a:	687b      	ldr	r3, [r7, #4]
 800b86c:	685b      	ldr	r3, [r3, #4]
 800b86e:	2200      	movs	r2, #0
 800b870:	4698      	mov	r8, r3
 800b872:	4691      	mov	r9, r2
 800b874:	683b      	ldr	r3, [r7, #0]
 800b876:	2200      	movs	r2, #0
 800b878:	461c      	mov	r4, r3
 800b87a:	4615      	mov	r5, r2
 800b87c:	e9cd 4500 	strd	r4, r5, [sp]
 800b880:	4642      	mov	r2, r8
 800b882:	464b      	mov	r3, r9
 800b884:	4807      	ldr	r0, [pc, #28]	@ (800b8a4 <mg_iobuf_resize+0x114>)
 800b886:	f000 fe61 	bl	800c54c <mg_log>
 800b88a:	697b      	ldr	r3, [r7, #20]
 800b88c:	4618      	mov	r0, r3
 800b88e:	3718      	adds	r7, #24
 800b890:	46bd      	mov	sp, r7
 800b892:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 800b896:	bf00      	nop
 800b898:	24000048 	.word	0x24000048
 800b89c:	0801bfec 	.word	0x0801bfec
 800b8a0:	0801b138 	.word	0x0801b138
 800b8a4:	0801b144 	.word	0x0801b144

0800b8a8 <mg_iobuf_del>:
 800b8a8:	b580      	push	{r7, lr}
 800b8aa:	b084      	sub	sp, #16
 800b8ac:	af00      	add	r7, sp, #0
 800b8ae:	60f8      	str	r0, [r7, #12]
 800b8b0:	60b9      	str	r1, [r7, #8]
 800b8b2:	607a      	str	r2, [r7, #4]
 800b8b4:	68fb      	ldr	r3, [r7, #12]
 800b8b6:	689b      	ldr	r3, [r3, #8]
 800b8b8:	68ba      	ldr	r2, [r7, #8]
 800b8ba:	429a      	cmp	r2, r3
 800b8bc:	d902      	bls.n	800b8c4 <mg_iobuf_del+0x1c>
 800b8be:	68fb      	ldr	r3, [r7, #12]
 800b8c0:	689b      	ldr	r3, [r3, #8]
 800b8c2:	60bb      	str	r3, [r7, #8]
 800b8c4:	68ba      	ldr	r2, [r7, #8]
 800b8c6:	687b      	ldr	r3, [r7, #4]
 800b8c8:	441a      	add	r2, r3
 800b8ca:	68fb      	ldr	r3, [r7, #12]
 800b8cc:	689b      	ldr	r3, [r3, #8]
 800b8ce:	429a      	cmp	r2, r3
 800b8d0:	d904      	bls.n	800b8dc <mg_iobuf_del+0x34>
 800b8d2:	68fb      	ldr	r3, [r7, #12]
 800b8d4:	689a      	ldr	r2, [r3, #8]
 800b8d6:	68bb      	ldr	r3, [r7, #8]
 800b8d8:	1ad3      	subs	r3, r2, r3
 800b8da:	607b      	str	r3, [r7, #4]
 800b8dc:	68fb      	ldr	r3, [r7, #12]
 800b8de:	681b      	ldr	r3, [r3, #0]
 800b8e0:	2b00      	cmp	r3, #0
 800b8e2:	d012      	beq.n	800b90a <mg_iobuf_del+0x62>
 800b8e4:	68fb      	ldr	r3, [r7, #12]
 800b8e6:	681a      	ldr	r2, [r3, #0]
 800b8e8:	68bb      	ldr	r3, [r7, #8]
 800b8ea:	18d0      	adds	r0, r2, r3
 800b8ec:	68fb      	ldr	r3, [r7, #12]
 800b8ee:	681a      	ldr	r2, [r3, #0]
 800b8f0:	68b9      	ldr	r1, [r7, #8]
 800b8f2:	687b      	ldr	r3, [r7, #4]
 800b8f4:	440b      	add	r3, r1
 800b8f6:	18d1      	adds	r1, r2, r3
 800b8f8:	68fb      	ldr	r3, [r7, #12]
 800b8fa:	689a      	ldr	r2, [r3, #8]
 800b8fc:	68bb      	ldr	r3, [r7, #8]
 800b8fe:	1ad2      	subs	r2, r2, r3
 800b900:	687b      	ldr	r3, [r7, #4]
 800b902:	1ad3      	subs	r3, r2, r3
 800b904:	461a      	mov	r2, r3
 800b906:	f00e f847 	bl	8019998 <memmove>
 800b90a:	68fb      	ldr	r3, [r7, #12]
 800b90c:	681b      	ldr	r3, [r3, #0]
 800b90e:	2b00      	cmp	r3, #0
 800b910:	d00a      	beq.n	800b928 <mg_iobuf_del+0x80>
 800b912:	68fb      	ldr	r3, [r7, #12]
 800b914:	681a      	ldr	r2, [r3, #0]
 800b916:	68fb      	ldr	r3, [r7, #12]
 800b918:	6899      	ldr	r1, [r3, #8]
 800b91a:	687b      	ldr	r3, [r7, #4]
 800b91c:	1acb      	subs	r3, r1, r3
 800b91e:	4413      	add	r3, r2
 800b920:	6879      	ldr	r1, [r7, #4]
 800b922:	4618      	mov	r0, r3
 800b924:	f004 ff0e 	bl	8010744 <mg_bzero>
 800b928:	68fb      	ldr	r3, [r7, #12]
 800b92a:	689a      	ldr	r2, [r3, #8]
 800b92c:	687b      	ldr	r3, [r7, #4]
 800b92e:	1ad2      	subs	r2, r2, r3
 800b930:	68fb      	ldr	r3, [r7, #12]
 800b932:	609a      	str	r2, [r3, #8]
 800b934:	687b      	ldr	r3, [r7, #4]
 800b936:	4618      	mov	r0, r3
 800b938:	3710      	adds	r7, #16
 800b93a:	46bd      	mov	sp, r7
 800b93c:	bd80      	pop	{r7, pc}

0800b93e <mg_iobuf_free>:
 800b93e:	b580      	push	{r7, lr}
 800b940:	b082      	sub	sp, #8
 800b942:	af00      	add	r7, sp, #0
 800b944:	6078      	str	r0, [r7, #4]
 800b946:	2100      	movs	r1, #0
 800b948:	6878      	ldr	r0, [r7, #4]
 800b94a:	f7ff ff21 	bl	800b790 <mg_iobuf_resize>
 800b94e:	bf00      	nop
 800b950:	3708      	adds	r7, #8
 800b952:	46bd      	mov	sp, r7
 800b954:	bd80      	pop	{r7, pc}
	...

0800b958 <escapeseq>:
 800b958:	b480      	push	{r7}
 800b95a:	b083      	sub	sp, #12
 800b95c:	af00      	add	r7, sp, #0
 800b95e:	6078      	str	r0, [r7, #4]
 800b960:	687b      	ldr	r3, [r7, #4]
 800b962:	2b00      	cmp	r3, #0
 800b964:	d001      	beq.n	800b96a <escapeseq+0x12>
 800b966:	4b04      	ldr	r3, [pc, #16]	@ (800b978 <escapeseq+0x20>)
 800b968:	e000      	b.n	800b96c <escapeseq+0x14>
 800b96a:	4b04      	ldr	r3, [pc, #16]	@ (800b97c <escapeseq+0x24>)
 800b96c:	4618      	mov	r0, r3
 800b96e:	370c      	adds	r7, #12
 800b970:	46bd      	mov	sp, r7
 800b972:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b976:	4770      	bx	lr
 800b978:	0801b150 	.word	0x0801b150
 800b97c:	0801b158 	.word	0x0801b158

0800b980 <json_esc>:
 800b980:	b580      	push	{r7, lr}
 800b982:	b086      	sub	sp, #24
 800b984:	af00      	add	r7, sp, #0
 800b986:	6078      	str	r0, [r7, #4]
 800b988:	6039      	str	r1, [r7, #0]
 800b98a:	6838      	ldr	r0, [r7, #0]
 800b98c:	f7ff ffe4 	bl	800b958 <escapeseq>
 800b990:	6138      	str	r0, [r7, #16]
 800b992:	683b      	ldr	r3, [r7, #0]
 800b994:	2b00      	cmp	r3, #0
 800b996:	bf0c      	ite	eq
 800b998:	2301      	moveq	r3, #1
 800b99a:	2300      	movne	r3, #0
 800b99c:	b2db      	uxtb	r3, r3
 800b99e:	4618      	mov	r0, r3
 800b9a0:	f7ff ffda 	bl	800b958 <escapeseq>
 800b9a4:	60f8      	str	r0, [r7, #12]
 800b9a6:	693b      	ldr	r3, [r7, #16]
 800b9a8:	617b      	str	r3, [r7, #20]
 800b9aa:	e010      	b.n	800b9ce <json_esc+0x4e>
 800b9ac:	697b      	ldr	r3, [r7, #20]
 800b9ae:	781b      	ldrb	r3, [r3, #0]
 800b9b0:	461a      	mov	r2, r3
 800b9b2:	687b      	ldr	r3, [r7, #4]
 800b9b4:	4293      	cmp	r3, r2
 800b9b6:	d107      	bne.n	800b9c8 <json_esc+0x48>
 800b9b8:	697a      	ldr	r2, [r7, #20]
 800b9ba:	693b      	ldr	r3, [r7, #16]
 800b9bc:	1ad3      	subs	r3, r2, r3
 800b9be:	461a      	mov	r2, r3
 800b9c0:	68fb      	ldr	r3, [r7, #12]
 800b9c2:	4413      	add	r3, r2
 800b9c4:	781b      	ldrb	r3, [r3, #0]
 800b9c6:	e007      	b.n	800b9d8 <json_esc+0x58>
 800b9c8:	697b      	ldr	r3, [r7, #20]
 800b9ca:	3301      	adds	r3, #1
 800b9cc:	617b      	str	r3, [r7, #20]
 800b9ce:	697b      	ldr	r3, [r7, #20]
 800b9d0:	781b      	ldrb	r3, [r3, #0]
 800b9d2:	2b00      	cmp	r3, #0
 800b9d4:	d1ea      	bne.n	800b9ac <json_esc+0x2c>
 800b9d6:	2300      	movs	r3, #0
 800b9d8:	4618      	mov	r0, r3
 800b9da:	3718      	adds	r7, #24
 800b9dc:	46bd      	mov	sp, r7
 800b9de:	bd80      	pop	{r7, pc}

0800b9e0 <mg_pass_string>:
 800b9e0:	b580      	push	{r7, lr}
 800b9e2:	b084      	sub	sp, #16
 800b9e4:	af00      	add	r7, sp, #0
 800b9e6:	6078      	str	r0, [r7, #4]
 800b9e8:	6039      	str	r1, [r7, #0]
 800b9ea:	2300      	movs	r3, #0
 800b9ec:	60fb      	str	r3, [r7, #12]
 800b9ee:	e02e      	b.n	800ba4e <mg_pass_string+0x6e>
 800b9f0:	68fb      	ldr	r3, [r7, #12]
 800b9f2:	687a      	ldr	r2, [r7, #4]
 800b9f4:	4413      	add	r3, r2
 800b9f6:	781b      	ldrb	r3, [r3, #0]
 800b9f8:	2b5c      	cmp	r3, #92	@ 0x5c
 800b9fa:	d114      	bne.n	800ba26 <mg_pass_string+0x46>
 800b9fc:	68fb      	ldr	r3, [r7, #12]
 800b9fe:	3301      	adds	r3, #1
 800ba00:	683a      	ldr	r2, [r7, #0]
 800ba02:	429a      	cmp	r2, r3
 800ba04:	dd0f      	ble.n	800ba26 <mg_pass_string+0x46>
 800ba06:	68fb      	ldr	r3, [r7, #12]
 800ba08:	3301      	adds	r3, #1
 800ba0a:	687a      	ldr	r2, [r7, #4]
 800ba0c:	4413      	add	r3, r2
 800ba0e:	781b      	ldrb	r3, [r3, #0]
 800ba10:	2101      	movs	r1, #1
 800ba12:	4618      	mov	r0, r3
 800ba14:	f7ff ffb4 	bl	800b980 <json_esc>
 800ba18:	4603      	mov	r3, r0
 800ba1a:	2b00      	cmp	r3, #0
 800ba1c:	d003      	beq.n	800ba26 <mg_pass_string+0x46>
 800ba1e:	68fb      	ldr	r3, [r7, #12]
 800ba20:	3301      	adds	r3, #1
 800ba22:	60fb      	str	r3, [r7, #12]
 800ba24:	e010      	b.n	800ba48 <mg_pass_string+0x68>
 800ba26:	68fb      	ldr	r3, [r7, #12]
 800ba28:	687a      	ldr	r2, [r7, #4]
 800ba2a:	4413      	add	r3, r2
 800ba2c:	781b      	ldrb	r3, [r3, #0]
 800ba2e:	2b00      	cmp	r3, #0
 800ba30:	d102      	bne.n	800ba38 <mg_pass_string+0x58>
 800ba32:	f06f 0301 	mvn.w	r3, #1
 800ba36:	e010      	b.n	800ba5a <mg_pass_string+0x7a>
 800ba38:	68fb      	ldr	r3, [r7, #12]
 800ba3a:	687a      	ldr	r2, [r7, #4]
 800ba3c:	4413      	add	r3, r2
 800ba3e:	781b      	ldrb	r3, [r3, #0]
 800ba40:	2b22      	cmp	r3, #34	@ 0x22
 800ba42:	d101      	bne.n	800ba48 <mg_pass_string+0x68>
 800ba44:	68fb      	ldr	r3, [r7, #12]
 800ba46:	e008      	b.n	800ba5a <mg_pass_string+0x7a>
 800ba48:	68fb      	ldr	r3, [r7, #12]
 800ba4a:	3301      	adds	r3, #1
 800ba4c:	60fb      	str	r3, [r7, #12]
 800ba4e:	68fa      	ldr	r2, [r7, #12]
 800ba50:	683b      	ldr	r3, [r7, #0]
 800ba52:	429a      	cmp	r2, r3
 800ba54:	dbcc      	blt.n	800b9f0 <mg_pass_string+0x10>
 800ba56:	f06f 0301 	mvn.w	r3, #1
 800ba5a:	4618      	mov	r0, r3
 800ba5c:	3710      	adds	r7, #16
 800ba5e:	46bd      	mov	sp, r7
 800ba60:	bd80      	pop	{r7, pc}
 800ba62:	0000      	movs	r0, r0
 800ba64:	0000      	movs	r0, r0
	...

0800ba68 <mg_atod>:
 800ba68:	b480      	push	{r7}
 800ba6a:	b091      	sub	sp, #68	@ 0x44
 800ba6c:	af00      	add	r7, sp, #0
 800ba6e:	60f8      	str	r0, [r7, #12]
 800ba70:	60b9      	str	r1, [r7, #8]
 800ba72:	607a      	str	r2, [r7, #4]
 800ba74:	f04f 0200 	mov.w	r2, #0
 800ba78:	f04f 0300 	mov.w	r3, #0
 800ba7c:	e9c7 230e 	strd	r2, r3, [r7, #56]	@ 0x38
 800ba80:	2300      	movs	r3, #0
 800ba82:	637b      	str	r3, [r7, #52]	@ 0x34
 800ba84:	2301      	movs	r3, #1
 800ba86:	633b      	str	r3, [r7, #48]	@ 0x30
 800ba88:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800ba8a:	68bb      	ldr	r3, [r7, #8]
 800ba8c:	429a      	cmp	r2, r3
 800ba8e:	da0a      	bge.n	800baa6 <mg_atod+0x3e>
 800ba90:	68fb      	ldr	r3, [r7, #12]
 800ba92:	781b      	ldrb	r3, [r3, #0]
 800ba94:	2b2d      	cmp	r3, #45	@ 0x2d
 800ba96:	d106      	bne.n	800baa6 <mg_atod+0x3e>
 800ba98:	f04f 33ff 	mov.w	r3, #4294967295
 800ba9c:	633b      	str	r3, [r7, #48]	@ 0x30
 800ba9e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800baa0:	3301      	adds	r3, #1
 800baa2:	637b      	str	r3, [r7, #52]	@ 0x34
 800baa4:	e00a      	b.n	800babc <mg_atod+0x54>
 800baa6:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800baa8:	68bb      	ldr	r3, [r7, #8]
 800baaa:	429a      	cmp	r2, r3
 800baac:	da21      	bge.n	800baf2 <mg_atod+0x8a>
 800baae:	68fb      	ldr	r3, [r7, #12]
 800bab0:	781b      	ldrb	r3, [r3, #0]
 800bab2:	2b2b      	cmp	r3, #43	@ 0x2b
 800bab4:	d11d      	bne.n	800baf2 <mg_atod+0x8a>
 800bab6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800bab8:	3301      	adds	r3, #1
 800baba:	637b      	str	r3, [r7, #52]	@ 0x34
 800babc:	e019      	b.n	800baf2 <mg_atod+0x8a>
 800babe:	ed97 7b0e 	vldr	d7, [r7, #56]	@ 0x38
 800bac2:	eeb2 6b04 	vmov.f64	d6, #36	@ 0x41200000  10.0
 800bac6:	ee27 7b06 	vmul.f64	d7, d7, d6
 800baca:	ed87 7b0e 	vstr	d7, [r7, #56]	@ 0x38
 800bace:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800bad0:	68fa      	ldr	r2, [r7, #12]
 800bad2:	4413      	add	r3, r2
 800bad4:	781b      	ldrb	r3, [r3, #0]
 800bad6:	3b30      	subs	r3, #48	@ 0x30
 800bad8:	ee07 3a90 	vmov	s15, r3
 800badc:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800bae0:	ed97 6b0e 	vldr	d6, [r7, #56]	@ 0x38
 800bae4:	ee36 7b07 	vadd.f64	d7, d6, d7
 800bae8:	ed87 7b0e 	vstr	d7, [r7, #56]	@ 0x38
 800baec:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800baee:	3301      	adds	r3, #1
 800baf0:	637b      	str	r3, [r7, #52]	@ 0x34
 800baf2:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800baf4:	68bb      	ldr	r3, [r7, #8]
 800baf6:	429a      	cmp	r2, r3
 800baf8:	da0b      	bge.n	800bb12 <mg_atod+0xaa>
 800bafa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800bafc:	68fa      	ldr	r2, [r7, #12]
 800bafe:	4413      	add	r3, r2
 800bb00:	781b      	ldrb	r3, [r3, #0]
 800bb02:	2b2f      	cmp	r3, #47	@ 0x2f
 800bb04:	d905      	bls.n	800bb12 <mg_atod+0xaa>
 800bb06:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800bb08:	68fa      	ldr	r2, [r7, #12]
 800bb0a:	4413      	add	r3, r2
 800bb0c:	781b      	ldrb	r3, [r3, #0]
 800bb0e:	2b39      	cmp	r3, #57	@ 0x39
 800bb10:	d9d5      	bls.n	800babe <mg_atod+0x56>
 800bb12:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bb14:	ee07 3a90 	vmov	s15, r3
 800bb18:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800bb1c:	ed97 6b0e 	vldr	d6, [r7, #56]	@ 0x38
 800bb20:	ee26 7b07 	vmul.f64	d7, d6, d7
 800bb24:	ed87 7b0e 	vstr	d7, [r7, #56]	@ 0x38
 800bb28:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800bb2a:	68bb      	ldr	r3, [r7, #8]
 800bb2c:	429a      	cmp	r2, r3
 800bb2e:	da51      	bge.n	800bbd4 <mg_atod+0x16c>
 800bb30:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800bb32:	68fa      	ldr	r2, [r7, #12]
 800bb34:	4413      	add	r3, r2
 800bb36:	781b      	ldrb	r3, [r3, #0]
 800bb38:	2b2e      	cmp	r3, #46	@ 0x2e
 800bb3a:	d14b      	bne.n	800bbd4 <mg_atod+0x16c>
 800bb3c:	f04f 0200 	mov.w	r2, #0
 800bb40:	f04f 0300 	mov.w	r3, #0
 800bb44:	e9c7 230a 	strd	r2, r3, [r7, #40]	@ 0x28
 800bb48:	a36d      	add	r3, pc, #436	@ (adr r3, 800bd00 <mg_atod+0x298>)
 800bb4a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bb4e:	e9c7 2308 	strd	r2, r3, [r7, #32]
 800bb52:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800bb54:	3301      	adds	r3, #1
 800bb56:	637b      	str	r3, [r7, #52]	@ 0x34
 800bb58:	e01d      	b.n	800bb96 <mg_atod+0x12e>
 800bb5a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800bb5c:	68fa      	ldr	r2, [r7, #12]
 800bb5e:	4413      	add	r3, r2
 800bb60:	781b      	ldrb	r3, [r3, #0]
 800bb62:	3b30      	subs	r3, #48	@ 0x30
 800bb64:	ee07 3a90 	vmov	s15, r3
 800bb68:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 800bb6c:	ed97 7b08 	vldr	d7, [r7, #32]
 800bb70:	ee26 7b07 	vmul.f64	d7, d6, d7
 800bb74:	ed97 6b0a 	vldr	d6, [r7, #40]	@ 0x28
 800bb78:	ee36 7b07 	vadd.f64	d7, d6, d7
 800bb7c:	ed87 7b0a 	vstr	d7, [r7, #40]	@ 0x28
 800bb80:	ed97 6b08 	vldr	d6, [r7, #32]
 800bb84:	eeb2 5b04 	vmov.f64	d5, #36	@ 0x41200000  10.0
 800bb88:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800bb8c:	ed87 7b08 	vstr	d7, [r7, #32]
 800bb90:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800bb92:	3301      	adds	r3, #1
 800bb94:	637b      	str	r3, [r7, #52]	@ 0x34
 800bb96:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800bb98:	68bb      	ldr	r3, [r7, #8]
 800bb9a:	429a      	cmp	r2, r3
 800bb9c:	da0b      	bge.n	800bbb6 <mg_atod+0x14e>
 800bb9e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800bba0:	68fa      	ldr	r2, [r7, #12]
 800bba2:	4413      	add	r3, r2
 800bba4:	781b      	ldrb	r3, [r3, #0]
 800bba6:	2b2f      	cmp	r3, #47	@ 0x2f
 800bba8:	d905      	bls.n	800bbb6 <mg_atod+0x14e>
 800bbaa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800bbac:	68fa      	ldr	r2, [r7, #12]
 800bbae:	4413      	add	r3, r2
 800bbb0:	781b      	ldrb	r3, [r3, #0]
 800bbb2:	2b39      	cmp	r3, #57	@ 0x39
 800bbb4:	d9d1      	bls.n	800bb5a <mg_atod+0xf2>
 800bbb6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bbb8:	ee07 3a90 	vmov	s15, r3
 800bbbc:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 800bbc0:	ed97 7b0a 	vldr	d7, [r7, #40]	@ 0x28
 800bbc4:	ee26 7b07 	vmul.f64	d7, d6, d7
 800bbc8:	ed97 6b0e 	vldr	d6, [r7, #56]	@ 0x38
 800bbcc:	ee36 7b07 	vadd.f64	d7, d6, d7
 800bbd0:	ed87 7b0e 	vstr	d7, [r7, #56]	@ 0x38
 800bbd4:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800bbd6:	68bb      	ldr	r3, [r7, #8]
 800bbd8:	429a      	cmp	r2, r3
 800bbda:	da7e      	bge.n	800bcda <mg_atod+0x272>
 800bbdc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800bbde:	68fa      	ldr	r2, [r7, #12]
 800bbe0:	4413      	add	r3, r2
 800bbe2:	781b      	ldrb	r3, [r3, #0]
 800bbe4:	2b65      	cmp	r3, #101	@ 0x65
 800bbe6:	d005      	beq.n	800bbf4 <mg_atod+0x18c>
 800bbe8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800bbea:	68fa      	ldr	r2, [r7, #12]
 800bbec:	4413      	add	r3, r2
 800bbee:	781b      	ldrb	r3, [r3, #0]
 800bbf0:	2b45      	cmp	r3, #69	@ 0x45
 800bbf2:	d172      	bne.n	800bcda <mg_atod+0x272>
 800bbf4:	2300      	movs	r3, #0
 800bbf6:	61bb      	str	r3, [r7, #24]
 800bbf8:	2300      	movs	r3, #0
 800bbfa:	617b      	str	r3, [r7, #20]
 800bbfc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800bbfe:	3301      	adds	r3, #1
 800bc00:	637b      	str	r3, [r7, #52]	@ 0x34
 800bc02:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800bc04:	68bb      	ldr	r3, [r7, #8]
 800bc06:	429a      	cmp	r2, r3
 800bc08:	da0a      	bge.n	800bc20 <mg_atod+0x1b8>
 800bc0a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800bc0c:	68fa      	ldr	r2, [r7, #12]
 800bc0e:	4413      	add	r3, r2
 800bc10:	781b      	ldrb	r3, [r3, #0]
 800bc12:	2b2d      	cmp	r3, #45	@ 0x2d
 800bc14:	d104      	bne.n	800bc20 <mg_atod+0x1b8>
 800bc16:	2301      	movs	r3, #1
 800bc18:	617b      	str	r3, [r7, #20]
 800bc1a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800bc1c:	3301      	adds	r3, #1
 800bc1e:	637b      	str	r3, [r7, #52]	@ 0x34
 800bc20:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800bc22:	68bb      	ldr	r3, [r7, #8]
 800bc24:	429a      	cmp	r2, r3
 800bc26:	da19      	bge.n	800bc5c <mg_atod+0x1f4>
 800bc28:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800bc2a:	68fa      	ldr	r2, [r7, #12]
 800bc2c:	4413      	add	r3, r2
 800bc2e:	781b      	ldrb	r3, [r3, #0]
 800bc30:	2b2b      	cmp	r3, #43	@ 0x2b
 800bc32:	d113      	bne.n	800bc5c <mg_atod+0x1f4>
 800bc34:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800bc36:	3301      	adds	r3, #1
 800bc38:	637b      	str	r3, [r7, #52]	@ 0x34
 800bc3a:	e00f      	b.n	800bc5c <mg_atod+0x1f4>
 800bc3c:	69ba      	ldr	r2, [r7, #24]
 800bc3e:	4613      	mov	r3, r2
 800bc40:	009b      	lsls	r3, r3, #2
 800bc42:	4413      	add	r3, r2
 800bc44:	005b      	lsls	r3, r3, #1
 800bc46:	4619      	mov	r1, r3
 800bc48:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800bc4a:	1c5a      	adds	r2, r3, #1
 800bc4c:	637a      	str	r2, [r7, #52]	@ 0x34
 800bc4e:	461a      	mov	r2, r3
 800bc50:	68fb      	ldr	r3, [r7, #12]
 800bc52:	4413      	add	r3, r2
 800bc54:	781b      	ldrb	r3, [r3, #0]
 800bc56:	3b30      	subs	r3, #48	@ 0x30
 800bc58:	440b      	add	r3, r1
 800bc5a:	61bb      	str	r3, [r7, #24]
 800bc5c:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800bc5e:	68bb      	ldr	r3, [r7, #8]
 800bc60:	429a      	cmp	r2, r3
 800bc62:	da0f      	bge.n	800bc84 <mg_atod+0x21c>
 800bc64:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800bc66:	68fa      	ldr	r2, [r7, #12]
 800bc68:	4413      	add	r3, r2
 800bc6a:	781b      	ldrb	r3, [r3, #0]
 800bc6c:	2b2f      	cmp	r3, #47	@ 0x2f
 800bc6e:	d909      	bls.n	800bc84 <mg_atod+0x21c>
 800bc70:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800bc72:	68fa      	ldr	r2, [r7, #12]
 800bc74:	4413      	add	r3, r2
 800bc76:	781b      	ldrb	r3, [r3, #0]
 800bc78:	2b39      	cmp	r3, #57	@ 0x39
 800bc7a:	d803      	bhi.n	800bc84 <mg_atod+0x21c>
 800bc7c:	69bb      	ldr	r3, [r7, #24]
 800bc7e:	f5b3 7f9a 	cmp.w	r3, #308	@ 0x134
 800bc82:	dbdb      	blt.n	800bc3c <mg_atod+0x1d4>
 800bc84:	697b      	ldr	r3, [r7, #20]
 800bc86:	2b00      	cmp	r3, #0
 800bc88:	d002      	beq.n	800bc90 <mg_atod+0x228>
 800bc8a:	69bb      	ldr	r3, [r7, #24]
 800bc8c:	425b      	negs	r3, r3
 800bc8e:	61bb      	str	r3, [r7, #24]
 800bc90:	2300      	movs	r3, #0
 800bc92:	61fb      	str	r3, [r7, #28]
 800bc94:	e00a      	b.n	800bcac <mg_atod+0x244>
 800bc96:	ed97 7b0e 	vldr	d7, [r7, #56]	@ 0x38
 800bc9a:	eeb2 6b04 	vmov.f64	d6, #36	@ 0x41200000  10.0
 800bc9e:	ee27 7b06 	vmul.f64	d7, d7, d6
 800bca2:	ed87 7b0e 	vstr	d7, [r7, #56]	@ 0x38
 800bca6:	69fb      	ldr	r3, [r7, #28]
 800bca8:	3301      	adds	r3, #1
 800bcaa:	61fb      	str	r3, [r7, #28]
 800bcac:	69fa      	ldr	r2, [r7, #28]
 800bcae:	69bb      	ldr	r3, [r7, #24]
 800bcb0:	429a      	cmp	r2, r3
 800bcb2:	dbf0      	blt.n	800bc96 <mg_atod+0x22e>
 800bcb4:	2300      	movs	r3, #0
 800bcb6:	61fb      	str	r3, [r7, #28]
 800bcb8:	e00a      	b.n	800bcd0 <mg_atod+0x268>
 800bcba:	ed97 6b0e 	vldr	d6, [r7, #56]	@ 0x38
 800bcbe:	eeb2 5b04 	vmov.f64	d5, #36	@ 0x41200000  10.0
 800bcc2:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800bcc6:	ed87 7b0e 	vstr	d7, [r7, #56]	@ 0x38
 800bcca:	69fb      	ldr	r3, [r7, #28]
 800bccc:	3301      	adds	r3, #1
 800bcce:	61fb      	str	r3, [r7, #28]
 800bcd0:	69bb      	ldr	r3, [r7, #24]
 800bcd2:	425b      	negs	r3, r3
 800bcd4:	69fa      	ldr	r2, [r7, #28]
 800bcd6:	429a      	cmp	r2, r3
 800bcd8:	dbef      	blt.n	800bcba <mg_atod+0x252>
 800bcda:	687b      	ldr	r3, [r7, #4]
 800bcdc:	2b00      	cmp	r3, #0
 800bcde:	d002      	beq.n	800bce6 <mg_atod+0x27e>
 800bce0:	687b      	ldr	r3, [r7, #4]
 800bce2:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800bce4:	601a      	str	r2, [r3, #0]
 800bce6:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 800bcea:	ec43 2b17 	vmov	d7, r2, r3
 800bcee:	eeb0 0b47 	vmov.f64	d0, d7
 800bcf2:	3744      	adds	r7, #68	@ 0x44
 800bcf4:	46bd      	mov	sp, r7
 800bcf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bcfa:	4770      	bx	lr
 800bcfc:	f3af 8000 	nop.w
 800bd00:	9999999a 	.word	0x9999999a
 800bd04:	3fb99999 	.word	0x3fb99999

0800bd08 <mg_json_get>:
 800bd08:	b590      	push	{r4, r7, lr}
 800bd0a:	b09b      	sub	sp, #108	@ 0x6c
 800bd0c:	af00      	add	r7, sp, #0
 800bd0e:	f107 0408 	add.w	r4, r7, #8
 800bd12:	e884 0003 	stmia.w	r4, {r0, r1}
 800bd16:	607a      	str	r2, [r7, #4]
 800bd18:	603b      	str	r3, [r7, #0]
 800bd1a:	68bb      	ldr	r3, [r7, #8]
 800bd1c:	647b      	str	r3, [r7, #68]	@ 0x44
 800bd1e:	68fb      	ldr	r3, [r7, #12]
 800bd20:	643b      	str	r3, [r7, #64]	@ 0x40
 800bd22:	2300      	movs	r3, #0
 800bd24:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
 800bd28:	2300      	movs	r3, #0
 800bd2a:	663b      	str	r3, [r7, #96]	@ 0x60
 800bd2c:	2300      	movs	r3, #0
 800bd2e:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800bd30:	2300      	movs	r3, #0
 800bd32:	65bb      	str	r3, [r7, #88]	@ 0x58
 800bd34:	2300      	movs	r3, #0
 800bd36:	657b      	str	r3, [r7, #84]	@ 0x54
 800bd38:	2301      	movs	r3, #1
 800bd3a:	653b      	str	r3, [r7, #80]	@ 0x50
 800bd3c:	f04f 33ff 	mov.w	r3, #4294967295
 800bd40:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800bd42:	f04f 33ff 	mov.w	r3, #4294967295
 800bd46:	64bb      	str	r3, [r7, #72]	@ 0x48
 800bd48:	683b      	ldr	r3, [r7, #0]
 800bd4a:	2b00      	cmp	r3, #0
 800bd4c:	d002      	beq.n	800bd54 <mg_json_get+0x4c>
 800bd4e:	683b      	ldr	r3, [r7, #0]
 800bd50:	2200      	movs	r2, #0
 800bd52:	601a      	str	r2, [r3, #0]
 800bd54:	687b      	ldr	r3, [r7, #4]
 800bd56:	781b      	ldrb	r3, [r3, #0]
 800bd58:	2b24      	cmp	r3, #36	@ 0x24
 800bd5a:	d002      	beq.n	800bd62 <mg_json_get+0x5a>
 800bd5c:	f06f 0301 	mvn.w	r3, #1
 800bd60:	e308      	b.n	800c374 <mg_json_get+0x66c>
 800bd62:	2300      	movs	r3, #0
 800bd64:	663b      	str	r3, [r7, #96]	@ 0x60
 800bd66:	e2fe      	b.n	800c366 <mg_json_get+0x65e>
 800bd68:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800bd6a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800bd6c:	4413      	add	r3, r2
 800bd6e:	781b      	ldrb	r3, [r3, #0]
 800bd70:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
 800bd74:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 800bd78:	2b20      	cmp	r3, #32
 800bd7a:	f000 82ee 	beq.w	800c35a <mg_json_get+0x652>
 800bd7e:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 800bd82:	2b09      	cmp	r3, #9
 800bd84:	f000 82e9 	beq.w	800c35a <mg_json_get+0x652>
 800bd88:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 800bd8c:	2b0a      	cmp	r3, #10
 800bd8e:	f000 82e4 	beq.w	800c35a <mg_json_get+0x652>
 800bd92:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 800bd96:	2b0d      	cmp	r3, #13
 800bd98:	f000 82df 	beq.w	800c35a <mg_json_get+0x652>
 800bd9c:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 800bda0:	2b03      	cmp	r3, #3
 800bda2:	f200 82dd 	bhi.w	800c360 <mg_json_get+0x658>
 800bda6:	a201      	add	r2, pc, #4	@ (adr r2, 800bdac <mg_json_get+0xa4>)
 800bda8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bdac:	0800bdbd 	.word	0x0800bdbd
 800bdb0:	0800c0a5 	.word	0x0800c0a5
 800bdb4:	0800c233 	.word	0x0800c233
 800bdb8:	0800c249 	.word	0x0800c249
 800bdbc:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800bdbe:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800bdc0:	429a      	cmp	r2, r3
 800bdc2:	d101      	bne.n	800bdc8 <mg_json_get+0xc0>
 800bdc4:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800bdc6:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800bdc8:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 800bdcc:	2b7b      	cmp	r3, #123	@ 0x7b
 800bdce:	d12b      	bne.n	800be28 <mg_json_get+0x120>
 800bdd0:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800bdd2:	2b1d      	cmp	r3, #29
 800bdd4:	dd02      	ble.n	800bddc <mg_json_get+0xd4>
 800bdd6:	f04f 33ff 	mov.w	r3, #4294967295
 800bdda:	e2cb      	b.n	800c374 <mg_json_get+0x66c>
 800bddc:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800bdde:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800bde0:	429a      	cmp	r2, r3
 800bde2:	d114      	bne.n	800be0e <mg_json_get+0x106>
 800bde4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800bde6:	687a      	ldr	r2, [r7, #4]
 800bde8:	4413      	add	r3, r2
 800bdea:	781b      	ldrb	r3, [r3, #0]
 800bdec:	2b2e      	cmp	r3, #46	@ 0x2e
 800bdee:	d10e      	bne.n	800be0e <mg_json_get+0x106>
 800bdf0:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800bdf2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800bdf4:	429a      	cmp	r2, r3
 800bdf6:	d10a      	bne.n	800be0e <mg_json_get+0x106>
 800bdf8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800bdfa:	3301      	adds	r3, #1
 800bdfc:	657b      	str	r3, [r7, #84]	@ 0x54
 800bdfe:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800be00:	3301      	adds	r3, #1
 800be02:	653b      	str	r3, [r7, #80]	@ 0x50
 800be04:	f04f 33ff 	mov.w	r3, #4294967295
 800be08:	64bb      	str	r3, [r7, #72]	@ 0x48
 800be0a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800be0c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800be0e:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800be10:	1c5a      	adds	r2, r3, #1
 800be12:	65ba      	str	r2, [r7, #88]	@ 0x58
 800be14:	3368      	adds	r3, #104	@ 0x68
 800be16:	443b      	add	r3, r7
 800be18:	f897 203f 	ldrb.w	r2, [r7, #63]	@ 0x3f
 800be1c:	f803 2c54 	strb.w	r2, [r3, #-84]
 800be20:	2301      	movs	r3, #1
 800be22:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
 800be26:	e29b      	b.n	800c360 <mg_json_get+0x658>
 800be28:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 800be2c:	2b5b      	cmp	r3, #91	@ 0x5b
 800be2e:	d14e      	bne.n	800bece <mg_json_get+0x1c6>
 800be30:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800be32:	2b1d      	cmp	r3, #29
 800be34:	dd02      	ble.n	800be3c <mg_json_get+0x134>
 800be36:	f04f 33ff 	mov.w	r3, #4294967295
 800be3a:	e29b      	b.n	800c374 <mg_json_get+0x66c>
 800be3c:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800be3e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800be40:	429a      	cmp	r2, r3
 800be42:	d13a      	bne.n	800beba <mg_json_get+0x1b2>
 800be44:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800be46:	687a      	ldr	r2, [r7, #4]
 800be48:	4413      	add	r3, r2
 800be4a:	781b      	ldrb	r3, [r3, #0]
 800be4c:	2b5b      	cmp	r3, #91	@ 0x5b
 800be4e:	d134      	bne.n	800beba <mg_json_get+0x1b2>
 800be50:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800be52:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800be54:	429a      	cmp	r2, r3
 800be56:	d130      	bne.n	800beba <mg_json_get+0x1b2>
 800be58:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800be5a:	3301      	adds	r3, #1
 800be5c:	657b      	str	r3, [r7, #84]	@ 0x54
 800be5e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800be60:	3301      	adds	r3, #1
 800be62:	653b      	str	r3, [r7, #80]	@ 0x50
 800be64:	2300      	movs	r3, #0
 800be66:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800be68:	2300      	movs	r3, #0
 800be6a:	64bb      	str	r3, [r7, #72]	@ 0x48
 800be6c:	e010      	b.n	800be90 <mg_json_get+0x188>
 800be6e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800be70:	4613      	mov	r3, r2
 800be72:	009b      	lsls	r3, r3, #2
 800be74:	4413      	add	r3, r2
 800be76:	005b      	lsls	r3, r3, #1
 800be78:	64bb      	str	r3, [r7, #72]	@ 0x48
 800be7a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800be7c:	687a      	ldr	r2, [r7, #4]
 800be7e:	4413      	add	r3, r2
 800be80:	781b      	ldrb	r3, [r3, #0]
 800be82:	3b30      	subs	r3, #48	@ 0x30
 800be84:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800be86:	4413      	add	r3, r2
 800be88:	64bb      	str	r3, [r7, #72]	@ 0x48
 800be8a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800be8c:	3301      	adds	r3, #1
 800be8e:	653b      	str	r3, [r7, #80]	@ 0x50
 800be90:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800be92:	687a      	ldr	r2, [r7, #4]
 800be94:	4413      	add	r3, r2
 800be96:	781b      	ldrb	r3, [r3, #0]
 800be98:	2b5d      	cmp	r3, #93	@ 0x5d
 800be9a:	d005      	beq.n	800bea8 <mg_json_get+0x1a0>
 800be9c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800be9e:	687a      	ldr	r2, [r7, #4]
 800bea0:	4413      	add	r3, r2
 800bea2:	781b      	ldrb	r3, [r3, #0]
 800bea4:	2b00      	cmp	r3, #0
 800bea6:	d1e2      	bne.n	800be6e <mg_json_get+0x166>
 800bea8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800beaa:	687a      	ldr	r2, [r7, #4]
 800beac:	4413      	add	r3, r2
 800beae:	781b      	ldrb	r3, [r3, #0]
 800beb0:	2b00      	cmp	r3, #0
 800beb2:	d002      	beq.n	800beba <mg_json_get+0x1b2>
 800beb4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800beb6:	3301      	adds	r3, #1
 800beb8:	653b      	str	r3, [r7, #80]	@ 0x50
 800beba:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800bebc:	1c5a      	adds	r2, r3, #1
 800bebe:	65ba      	str	r2, [r7, #88]	@ 0x58
 800bec0:	3368      	adds	r3, #104	@ 0x68
 800bec2:	443b      	add	r3, r7
 800bec4:	f897 203f 	ldrb.w	r2, [r7, #63]	@ 0x3f
 800bec8:	f803 2c54 	strb.w	r2, [r3, #-84]
 800becc:	e248      	b.n	800c360 <mg_json_get+0x658>
 800bece:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 800bed2:	2b5d      	cmp	r3, #93	@ 0x5d
 800bed4:	d13a      	bne.n	800bf4c <mg_json_get+0x244>
 800bed6:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800bed8:	2b00      	cmp	r3, #0
 800beda:	dd37      	ble.n	800bf4c <mg_json_get+0x244>
 800bedc:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800bede:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800bee0:	429a      	cmp	r2, r3
 800bee2:	d106      	bne.n	800bef2 <mg_json_get+0x1ea>
 800bee4:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800bee6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800bee8:	429a      	cmp	r2, r3
 800beea:	d002      	beq.n	800bef2 <mg_json_get+0x1ea>
 800beec:	f06f 0302 	mvn.w	r3, #2
 800bef0:	e240      	b.n	800c374 <mg_json_get+0x66c>
 800bef2:	f897 203f 	ldrb.w	r2, [r7, #63]	@ 0x3f
 800bef6:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800bef8:	3b01      	subs	r3, #1
 800befa:	3368      	adds	r3, #104	@ 0x68
 800befc:	443b      	add	r3, r7
 800befe:	f813 3c54 	ldrb.w	r3, [r3, #-84]
 800bf02:	3302      	adds	r3, #2
 800bf04:	429a      	cmp	r2, r3
 800bf06:	d002      	beq.n	800bf0e <mg_json_get+0x206>
 800bf08:	f06f 0301 	mvn.w	r3, #1
 800bf0c:	e232      	b.n	800c374 <mg_json_get+0x66c>
 800bf0e:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800bf10:	3b01      	subs	r3, #1
 800bf12:	65bb      	str	r3, [r7, #88]	@ 0x58
 800bf14:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800bf16:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800bf18:	429a      	cmp	r2, r3
 800bf1a:	f040 809c 	bne.w	800c056 <mg_json_get+0x34e>
 800bf1e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800bf20:	687a      	ldr	r2, [r7, #4]
 800bf22:	4413      	add	r3, r2
 800bf24:	781b      	ldrb	r3, [r3, #0]
 800bf26:	2b00      	cmp	r3, #0
 800bf28:	f040 8095 	bne.w	800c056 <mg_json_get+0x34e>
 800bf2c:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800bf2e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800bf30:	429a      	cmp	r2, r3
 800bf32:	f040 8090 	bne.w	800c056 <mg_json_get+0x34e>
 800bf36:	683b      	ldr	r3, [r7, #0]
 800bf38:	2b00      	cmp	r3, #0
 800bf3a:	d005      	beq.n	800bf48 <mg_json_get+0x240>
 800bf3c:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800bf3e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800bf40:	1ad3      	subs	r3, r2, r3
 800bf42:	1c5a      	adds	r2, r3, #1
 800bf44:	683b      	ldr	r3, [r7, #0]
 800bf46:	601a      	str	r2, [r3, #0]
 800bf48:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800bf4a:	e213      	b.n	800c374 <mg_json_get+0x66c>
 800bf4c:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 800bf50:	2b74      	cmp	r3, #116	@ 0x74
 800bf52:	d113      	bne.n	800bf7c <mg_json_get+0x274>
 800bf54:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800bf56:	3303      	adds	r3, #3
 800bf58:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800bf5a:	429a      	cmp	r2, r3
 800bf5c:	dd0e      	ble.n	800bf7c <mg_json_get+0x274>
 800bf5e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800bf60:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800bf62:	4413      	add	r3, r2
 800bf64:	2204      	movs	r2, #4
 800bf66:	4998      	ldr	r1, [pc, #608]	@ (800c1c8 <mg_json_get+0x4c0>)
 800bf68:	4618      	mov	r0, r3
 800bf6a:	f00d fd05 	bl	8019978 <memcmp>
 800bf6e:	4603      	mov	r3, r0
 800bf70:	2b00      	cmp	r3, #0
 800bf72:	d103      	bne.n	800bf7c <mg_json_get+0x274>
 800bf74:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800bf76:	3303      	adds	r3, #3
 800bf78:	663b      	str	r3, [r7, #96]	@ 0x60
 800bf7a:	e06c      	b.n	800c056 <mg_json_get+0x34e>
 800bf7c:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 800bf80:	2b6e      	cmp	r3, #110	@ 0x6e
 800bf82:	d113      	bne.n	800bfac <mg_json_get+0x2a4>
 800bf84:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800bf86:	3303      	adds	r3, #3
 800bf88:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800bf8a:	429a      	cmp	r2, r3
 800bf8c:	dd0e      	ble.n	800bfac <mg_json_get+0x2a4>
 800bf8e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800bf90:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800bf92:	4413      	add	r3, r2
 800bf94:	2204      	movs	r2, #4
 800bf96:	498d      	ldr	r1, [pc, #564]	@ (800c1cc <mg_json_get+0x4c4>)
 800bf98:	4618      	mov	r0, r3
 800bf9a:	f00d fced 	bl	8019978 <memcmp>
 800bf9e:	4603      	mov	r3, r0
 800bfa0:	2b00      	cmp	r3, #0
 800bfa2:	d103      	bne.n	800bfac <mg_json_get+0x2a4>
 800bfa4:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800bfa6:	3303      	adds	r3, #3
 800bfa8:	663b      	str	r3, [r7, #96]	@ 0x60
 800bfaa:	e054      	b.n	800c056 <mg_json_get+0x34e>
 800bfac:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 800bfb0:	2b66      	cmp	r3, #102	@ 0x66
 800bfb2:	d113      	bne.n	800bfdc <mg_json_get+0x2d4>
 800bfb4:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800bfb6:	3304      	adds	r3, #4
 800bfb8:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800bfba:	429a      	cmp	r2, r3
 800bfbc:	dd0e      	ble.n	800bfdc <mg_json_get+0x2d4>
 800bfbe:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800bfc0:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800bfc2:	4413      	add	r3, r2
 800bfc4:	2205      	movs	r2, #5
 800bfc6:	4982      	ldr	r1, [pc, #520]	@ (800c1d0 <mg_json_get+0x4c8>)
 800bfc8:	4618      	mov	r0, r3
 800bfca:	f00d fcd5 	bl	8019978 <memcmp>
 800bfce:	4603      	mov	r3, r0
 800bfd0:	2b00      	cmp	r3, #0
 800bfd2:	d103      	bne.n	800bfdc <mg_json_get+0x2d4>
 800bfd4:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800bfd6:	3304      	adds	r3, #4
 800bfd8:	663b      	str	r3, [r7, #96]	@ 0x60
 800bfda:	e03c      	b.n	800c056 <mg_json_get+0x34e>
 800bfdc:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 800bfe0:	2b2d      	cmp	r3, #45	@ 0x2d
 800bfe2:	d007      	beq.n	800bff4 <mg_json_get+0x2ec>
 800bfe4:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 800bfe8:	2b2f      	cmp	r3, #47	@ 0x2f
 800bfea:	d916      	bls.n	800c01a <mg_json_get+0x312>
 800bfec:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 800bff0:	2b39      	cmp	r3, #57	@ 0x39
 800bff2:	d812      	bhi.n	800c01a <mg_json_get+0x312>
 800bff4:	2300      	movs	r3, #0
 800bff6:	613b      	str	r3, [r7, #16]
 800bff8:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800bffa:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800bffc:	18d0      	adds	r0, r2, r3
 800bffe:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800c000:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800c002:	1ad3      	subs	r3, r2, r3
 800c004:	f107 0210 	add.w	r2, r7, #16
 800c008:	4619      	mov	r1, r3
 800c00a:	f7ff fd2d 	bl	800ba68 <mg_atod>
 800c00e:	693b      	ldr	r3, [r7, #16]
 800c010:	3b01      	subs	r3, #1
 800c012:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800c014:	4413      	add	r3, r2
 800c016:	663b      	str	r3, [r7, #96]	@ 0x60
 800c018:	e01d      	b.n	800c056 <mg_json_get+0x34e>
 800c01a:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 800c01e:	2b22      	cmp	r3, #34	@ 0x22
 800c020:	d116      	bne.n	800c050 <mg_json_get+0x348>
 800c022:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800c024:	3301      	adds	r3, #1
 800c026:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800c028:	18d0      	adds	r0, r2, r3
 800c02a:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800c02c:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800c02e:	1ad3      	subs	r3, r2, r3
 800c030:	3b01      	subs	r3, #1
 800c032:	4619      	mov	r1, r3
 800c034:	f7ff fcd4 	bl	800b9e0 <mg_pass_string>
 800c038:	6378      	str	r0, [r7, #52]	@ 0x34
 800c03a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c03c:	2b00      	cmp	r3, #0
 800c03e:	da01      	bge.n	800c044 <mg_json_get+0x33c>
 800c040:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c042:	e197      	b.n	800c374 <mg_json_get+0x66c>
 800c044:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c046:	3301      	adds	r3, #1
 800c048:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800c04a:	4413      	add	r3, r2
 800c04c:	663b      	str	r3, [r7, #96]	@ 0x60
 800c04e:	e002      	b.n	800c056 <mg_json_get+0x34e>
 800c050:	f06f 0301 	mvn.w	r3, #1
 800c054:	e18e      	b.n	800c374 <mg_json_get+0x66c>
 800c056:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800c058:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800c05a:	429a      	cmp	r2, r3
 800c05c:	d114      	bne.n	800c088 <mg_json_get+0x380>
 800c05e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800c060:	687a      	ldr	r2, [r7, #4]
 800c062:	4413      	add	r3, r2
 800c064:	781b      	ldrb	r3, [r3, #0]
 800c066:	2b00      	cmp	r3, #0
 800c068:	d10e      	bne.n	800c088 <mg_json_get+0x380>
 800c06a:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800c06c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800c06e:	429a      	cmp	r2, r3
 800c070:	d10a      	bne.n	800c088 <mg_json_get+0x380>
 800c072:	683b      	ldr	r3, [r7, #0]
 800c074:	2b00      	cmp	r3, #0
 800c076:	d005      	beq.n	800c084 <mg_json_get+0x37c>
 800c078:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800c07a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800c07c:	1ad3      	subs	r3, r2, r3
 800c07e:	1c5a      	adds	r2, r3, #1
 800c080:	683b      	ldr	r3, [r7, #0]
 800c082:	601a      	str	r2, [r3, #0]
 800c084:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800c086:	e175      	b.n	800c374 <mg_json_get+0x66c>
 800c088:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800c08a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800c08c:	429a      	cmp	r2, r3
 800c08e:	d105      	bne.n	800c09c <mg_json_get+0x394>
 800c090:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800c092:	2b00      	cmp	r3, #0
 800c094:	db02      	blt.n	800c09c <mg_json_get+0x394>
 800c096:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800c098:	3301      	adds	r3, #1
 800c09a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800c09c:	2303      	movs	r3, #3
 800c09e:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
 800c0a2:	e15d      	b.n	800c360 <mg_json_get+0x658>
 800c0a4:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 800c0a8:	2b22      	cmp	r3, #34	@ 0x22
 800c0aa:	d170      	bne.n	800c18e <mg_json_get+0x486>
 800c0ac:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800c0ae:	3301      	adds	r3, #1
 800c0b0:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800c0b2:	18d0      	adds	r0, r2, r3
 800c0b4:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800c0b6:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800c0b8:	1ad3      	subs	r3, r2, r3
 800c0ba:	3b01      	subs	r3, #1
 800c0bc:	4619      	mov	r1, r3
 800c0be:	f7ff fc8f 	bl	800b9e0 <mg_pass_string>
 800c0c2:	63b8      	str	r0, [r7, #56]	@ 0x38
 800c0c4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c0c6:	2b00      	cmp	r3, #0
 800c0c8:	da01      	bge.n	800c0ce <mg_json_get+0x3c6>
 800c0ca:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c0cc:	e152      	b.n	800c374 <mg_json_get+0x66c>
 800c0ce:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800c0d0:	1c5a      	adds	r2, r3, #1
 800c0d2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c0d4:	4413      	add	r3, r2
 800c0d6:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800c0d8:	429a      	cmp	r2, r3
 800c0da:	dc02      	bgt.n	800c0e2 <mg_json_get+0x3da>
 800c0dc:	f06f 0302 	mvn.w	r3, #2
 800c0e0:	e148      	b.n	800c374 <mg_json_get+0x66c>
 800c0e2:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800c0e4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800c0e6:	429a      	cmp	r2, r3
 800c0e8:	da02      	bge.n	800c0f0 <mg_json_get+0x3e8>
 800c0ea:	f06f 0302 	mvn.w	r3, #2
 800c0ee:	e141      	b.n	800c374 <mg_json_get+0x66c>
 800c0f0:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800c0f2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800c0f4:	429a      	cmp	r2, r3
 800c0f6:	d109      	bne.n	800c10c <mg_json_get+0x404>
 800c0f8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800c0fa:	3b01      	subs	r3, #1
 800c0fc:	687a      	ldr	r2, [r7, #4]
 800c0fe:	4413      	add	r3, r2
 800c100:	781b      	ldrb	r3, [r3, #0]
 800c102:	2b2e      	cmp	r3, #46	@ 0x2e
 800c104:	d002      	beq.n	800c10c <mg_json_get+0x404>
 800c106:	f06f 0302 	mvn.w	r3, #2
 800c10a:	e133      	b.n	800c374 <mg_json_get+0x66c>
 800c10c:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800c10e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800c110:	429a      	cmp	r2, r3
 800c112:	d133      	bne.n	800c17c <mg_json_get+0x474>
 800c114:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800c116:	3b01      	subs	r3, #1
 800c118:	687a      	ldr	r2, [r7, #4]
 800c11a:	4413      	add	r3, r2
 800c11c:	781b      	ldrb	r3, [r3, #0]
 800c11e:	2b2e      	cmp	r3, #46	@ 0x2e
 800c120:	d12c      	bne.n	800c17c <mg_json_get+0x474>
 800c122:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800c124:	3301      	adds	r3, #1
 800c126:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800c128:	18d0      	adds	r0, r2, r3
 800c12a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800c12c:	687a      	ldr	r2, [r7, #4]
 800c12e:	4413      	add	r3, r2
 800c130:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800c132:	4619      	mov	r1, r3
 800c134:	f00d fc5f 	bl	80199f6 <strncmp>
 800c138:	4603      	mov	r3, r0
 800c13a:	2b00      	cmp	r3, #0
 800c13c:	d11e      	bne.n	800c17c <mg_json_get+0x474>
 800c13e:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800c140:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c142:	4413      	add	r3, r2
 800c144:	461a      	mov	r2, r3
 800c146:	687b      	ldr	r3, [r7, #4]
 800c148:	4413      	add	r3, r2
 800c14a:	781b      	ldrb	r3, [r3, #0]
 800c14c:	2b00      	cmp	r3, #0
 800c14e:	d011      	beq.n	800c174 <mg_json_get+0x46c>
 800c150:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800c152:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c154:	4413      	add	r3, r2
 800c156:	461a      	mov	r2, r3
 800c158:	687b      	ldr	r3, [r7, #4]
 800c15a:	4413      	add	r3, r2
 800c15c:	781b      	ldrb	r3, [r3, #0]
 800c15e:	2b2e      	cmp	r3, #46	@ 0x2e
 800c160:	d008      	beq.n	800c174 <mg_json_get+0x46c>
 800c162:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800c164:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c166:	4413      	add	r3, r2
 800c168:	461a      	mov	r2, r3
 800c16a:	687b      	ldr	r3, [r7, #4]
 800c16c:	4413      	add	r3, r2
 800c16e:	781b      	ldrb	r3, [r3, #0]
 800c170:	2b5b      	cmp	r3, #91	@ 0x5b
 800c172:	d103      	bne.n	800c17c <mg_json_get+0x474>
 800c174:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800c176:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c178:	4413      	add	r3, r2
 800c17a:	653b      	str	r3, [r7, #80]	@ 0x50
 800c17c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c17e:	3301      	adds	r3, #1
 800c180:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800c182:	4413      	add	r3, r2
 800c184:	663b      	str	r3, [r7, #96]	@ 0x60
 800c186:	2302      	movs	r3, #2
 800c188:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
 800c18c:	e0e7      	b.n	800c35e <mg_json_get+0x656>
 800c18e:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 800c192:	2b7d      	cmp	r3, #125	@ 0x7d
 800c194:	d14a      	bne.n	800c22c <mg_json_get+0x524>
 800c196:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800c198:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800c19a:	429a      	cmp	r2, r3
 800c19c:	d106      	bne.n	800c1ac <mg_json_get+0x4a4>
 800c19e:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800c1a0:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800c1a2:	429a      	cmp	r2, r3
 800c1a4:	d002      	beq.n	800c1ac <mg_json_get+0x4a4>
 800c1a6:	f06f 0302 	mvn.w	r3, #2
 800c1aa:	e0e3      	b.n	800c374 <mg_json_get+0x66c>
 800c1ac:	f897 203f 	ldrb.w	r2, [r7, #63]	@ 0x3f
 800c1b0:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800c1b2:	3b01      	subs	r3, #1
 800c1b4:	3368      	adds	r3, #104	@ 0x68
 800c1b6:	443b      	add	r3, r7
 800c1b8:	f813 3c54 	ldrb.w	r3, [r3, #-84]
 800c1bc:	3302      	adds	r3, #2
 800c1be:	429a      	cmp	r2, r3
 800c1c0:	d008      	beq.n	800c1d4 <mg_json_get+0x4cc>
 800c1c2:	f06f 0301 	mvn.w	r3, #1
 800c1c6:	e0d5      	b.n	800c374 <mg_json_get+0x66c>
 800c1c8:	0801b164 	.word	0x0801b164
 800c1cc:	0801b16c 	.word	0x0801b16c
 800c1d0:	0801b174 	.word	0x0801b174
 800c1d4:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800c1d6:	3b01      	subs	r3, #1
 800c1d8:	65bb      	str	r3, [r7, #88]	@ 0x58
 800c1da:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800c1dc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800c1de:	429a      	cmp	r2, r3
 800c1e0:	d114      	bne.n	800c20c <mg_json_get+0x504>
 800c1e2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800c1e4:	687a      	ldr	r2, [r7, #4]
 800c1e6:	4413      	add	r3, r2
 800c1e8:	781b      	ldrb	r3, [r3, #0]
 800c1ea:	2b00      	cmp	r3, #0
 800c1ec:	d10e      	bne.n	800c20c <mg_json_get+0x504>
 800c1ee:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800c1f0:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800c1f2:	429a      	cmp	r2, r3
 800c1f4:	d10a      	bne.n	800c20c <mg_json_get+0x504>
 800c1f6:	683b      	ldr	r3, [r7, #0]
 800c1f8:	2b00      	cmp	r3, #0
 800c1fa:	d005      	beq.n	800c208 <mg_json_get+0x500>
 800c1fc:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800c1fe:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800c200:	1ad3      	subs	r3, r2, r3
 800c202:	1c5a      	adds	r2, r3, #1
 800c204:	683b      	ldr	r3, [r7, #0]
 800c206:	601a      	str	r2, [r3, #0]
 800c208:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800c20a:	e0b3      	b.n	800c374 <mg_json_get+0x66c>
 800c20c:	2303      	movs	r3, #3
 800c20e:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
 800c212:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800c214:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800c216:	429a      	cmp	r2, r3
 800c218:	f040 80a1 	bne.w	800c35e <mg_json_get+0x656>
 800c21c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800c21e:	2b00      	cmp	r3, #0
 800c220:	f2c0 809d 	blt.w	800c35e <mg_json_get+0x656>
 800c224:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800c226:	3301      	adds	r3, #1
 800c228:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800c22a:	e098      	b.n	800c35e <mg_json_get+0x656>
 800c22c:	f06f 0301 	mvn.w	r3, #1
 800c230:	e0a0      	b.n	800c374 <mg_json_get+0x66c>
 800c232:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 800c236:	2b3a      	cmp	r3, #58	@ 0x3a
 800c238:	d103      	bne.n	800c242 <mg_json_get+0x53a>
 800c23a:	2300      	movs	r3, #0
 800c23c:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
 800c240:	e08e      	b.n	800c360 <mg_json_get+0x658>
 800c242:	f06f 0301 	mvn.w	r3, #1
 800c246:	e095      	b.n	800c374 <mg_json_get+0x66c>
 800c248:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800c24a:	2b00      	cmp	r3, #0
 800c24c:	dc02      	bgt.n	800c254 <mg_json_get+0x54c>
 800c24e:	f06f 0301 	mvn.w	r3, #1
 800c252:	e08f      	b.n	800c374 <mg_json_get+0x66c>
 800c254:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 800c258:	2b2c      	cmp	r3, #44	@ 0x2c
 800c25a:	d10d      	bne.n	800c278 <mg_json_get+0x570>
 800c25c:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800c25e:	3b01      	subs	r3, #1
 800c260:	3368      	adds	r3, #104	@ 0x68
 800c262:	443b      	add	r3, r7
 800c264:	f813 3c54 	ldrb.w	r3, [r3, #-84]
 800c268:	2b7b      	cmp	r3, #123	@ 0x7b
 800c26a:	bf0c      	ite	eq
 800c26c:	2301      	moveq	r3, #1
 800c26e:	2300      	movne	r3, #0
 800c270:	b2db      	uxtb	r3, r3
 800c272:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
 800c276:	e073      	b.n	800c360 <mg_json_get+0x658>
 800c278:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 800c27c:	2b5d      	cmp	r3, #93	@ 0x5d
 800c27e:	d003      	beq.n	800c288 <mg_json_get+0x580>
 800c280:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 800c284:	2b7d      	cmp	r3, #125	@ 0x7d
 800c286:	d163      	bne.n	800c350 <mg_json_get+0x648>
 800c288:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800c28a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800c28c:	429a      	cmp	r2, r3
 800c28e:	d10d      	bne.n	800c2ac <mg_json_get+0x5a4>
 800c290:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 800c294:	2b7d      	cmp	r3, #125	@ 0x7d
 800c296:	d109      	bne.n	800c2ac <mg_json_get+0x5a4>
 800c298:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800c29a:	3b01      	subs	r3, #1
 800c29c:	687a      	ldr	r2, [r7, #4]
 800c29e:	4413      	add	r3, r2
 800c2a0:	781b      	ldrb	r3, [r3, #0]
 800c2a2:	2b2e      	cmp	r3, #46	@ 0x2e
 800c2a4:	d102      	bne.n	800c2ac <mg_json_get+0x5a4>
 800c2a6:	f06f 0302 	mvn.w	r3, #2
 800c2aa:	e063      	b.n	800c374 <mg_json_get+0x66c>
 800c2ac:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800c2ae:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800c2b0:	429a      	cmp	r2, r3
 800c2b2:	d10d      	bne.n	800c2d0 <mg_json_get+0x5c8>
 800c2b4:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 800c2b8:	2b5d      	cmp	r3, #93	@ 0x5d
 800c2ba:	d109      	bne.n	800c2d0 <mg_json_get+0x5c8>
 800c2bc:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800c2be:	3b01      	subs	r3, #1
 800c2c0:	687a      	ldr	r2, [r7, #4]
 800c2c2:	4413      	add	r3, r2
 800c2c4:	781b      	ldrb	r3, [r3, #0]
 800c2c6:	2b2c      	cmp	r3, #44	@ 0x2c
 800c2c8:	d102      	bne.n	800c2d0 <mg_json_get+0x5c8>
 800c2ca:	f06f 0302 	mvn.w	r3, #2
 800c2ce:	e051      	b.n	800c374 <mg_json_get+0x66c>
 800c2d0:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800c2d2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800c2d4:	429a      	cmp	r2, r3
 800c2d6:	d106      	bne.n	800c2e6 <mg_json_get+0x5de>
 800c2d8:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800c2da:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800c2dc:	429a      	cmp	r2, r3
 800c2de:	d002      	beq.n	800c2e6 <mg_json_get+0x5de>
 800c2e0:	f06f 0302 	mvn.w	r3, #2
 800c2e4:	e046      	b.n	800c374 <mg_json_get+0x66c>
 800c2e6:	f897 203f 	ldrb.w	r2, [r7, #63]	@ 0x3f
 800c2ea:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800c2ec:	3b01      	subs	r3, #1
 800c2ee:	3368      	adds	r3, #104	@ 0x68
 800c2f0:	443b      	add	r3, r7
 800c2f2:	f813 3c54 	ldrb.w	r3, [r3, #-84]
 800c2f6:	3302      	adds	r3, #2
 800c2f8:	429a      	cmp	r2, r3
 800c2fa:	d002      	beq.n	800c302 <mg_json_get+0x5fa>
 800c2fc:	f06f 0301 	mvn.w	r3, #1
 800c300:	e038      	b.n	800c374 <mg_json_get+0x66c>
 800c302:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800c304:	3b01      	subs	r3, #1
 800c306:	65bb      	str	r3, [r7, #88]	@ 0x58
 800c308:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800c30a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800c30c:	429a      	cmp	r2, r3
 800c30e:	d114      	bne.n	800c33a <mg_json_get+0x632>
 800c310:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800c312:	687a      	ldr	r2, [r7, #4]
 800c314:	4413      	add	r3, r2
 800c316:	781b      	ldrb	r3, [r3, #0]
 800c318:	2b00      	cmp	r3, #0
 800c31a:	d10e      	bne.n	800c33a <mg_json_get+0x632>
 800c31c:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800c31e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800c320:	429a      	cmp	r2, r3
 800c322:	d10a      	bne.n	800c33a <mg_json_get+0x632>
 800c324:	683b      	ldr	r3, [r7, #0]
 800c326:	2b00      	cmp	r3, #0
 800c328:	d005      	beq.n	800c336 <mg_json_get+0x62e>
 800c32a:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800c32c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800c32e:	1ad3      	subs	r3, r2, r3
 800c330:	1c5a      	adds	r2, r3, #1
 800c332:	683b      	ldr	r3, [r7, #0]
 800c334:	601a      	str	r2, [r3, #0]
 800c336:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800c338:	e01c      	b.n	800c374 <mg_json_get+0x66c>
 800c33a:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800c33c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800c33e:	429a      	cmp	r2, r3
 800c340:	d109      	bne.n	800c356 <mg_json_get+0x64e>
 800c342:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800c344:	2b00      	cmp	r3, #0
 800c346:	db06      	blt.n	800c356 <mg_json_get+0x64e>
 800c348:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800c34a:	3301      	adds	r3, #1
 800c34c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800c34e:	e002      	b.n	800c356 <mg_json_get+0x64e>
 800c350:	f06f 0301 	mvn.w	r3, #1
 800c354:	e00e      	b.n	800c374 <mg_json_get+0x66c>
 800c356:	bf00      	nop
 800c358:	e002      	b.n	800c360 <mg_json_get+0x658>
 800c35a:	bf00      	nop
 800c35c:	e000      	b.n	800c360 <mg_json_get+0x658>
 800c35e:	bf00      	nop
 800c360:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800c362:	3301      	adds	r3, #1
 800c364:	663b      	str	r3, [r7, #96]	@ 0x60
 800c366:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800c368:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800c36a:	429a      	cmp	r2, r3
 800c36c:	f6ff acfc 	blt.w	800bd68 <mg_json_get+0x60>
 800c370:	f06f 0302 	mvn.w	r3, #2
 800c374:	4618      	mov	r0, r3
 800c376:	376c      	adds	r7, #108	@ 0x6c
 800c378:	46bd      	mov	sp, r7
 800c37a:	bd90      	pop	{r4, r7, pc}

0800c37c <mg_json_get_num>:
 800c37c:	b590      	push	{r4, r7, lr}
 800c37e:	b089      	sub	sp, #36	@ 0x24
 800c380:	af00      	add	r7, sp, #0
 800c382:	f107 0408 	add.w	r4, r7, #8
 800c386:	e884 0003 	stmia.w	r4, {r0, r1}
 800c38a:	607a      	str	r2, [r7, #4]
 800c38c:	603b      	str	r3, [r7, #0]
 800c38e:	2300      	movs	r3, #0
 800c390:	61fb      	str	r3, [r7, #28]
 800c392:	f107 0314 	add.w	r3, r7, #20
 800c396:	687a      	ldr	r2, [r7, #4]
 800c398:	f107 0108 	add.w	r1, r7, #8
 800c39c:	c903      	ldmia	r1, {r0, r1}
 800c39e:	f7ff fcb3 	bl	800bd08 <mg_json_get>
 800c3a2:	61b8      	str	r0, [r7, #24]
 800c3a4:	69bb      	ldr	r3, [r7, #24]
 800c3a6:	2b00      	cmp	r3, #0
 800c3a8:	db23      	blt.n	800c3f2 <mg_json_get_num+0x76>
 800c3aa:	68ba      	ldr	r2, [r7, #8]
 800c3ac:	69bb      	ldr	r3, [r7, #24]
 800c3ae:	4413      	add	r3, r2
 800c3b0:	781b      	ldrb	r3, [r3, #0]
 800c3b2:	2b2d      	cmp	r3, #45	@ 0x2d
 800c3b4:	d00b      	beq.n	800c3ce <mg_json_get_num+0x52>
 800c3b6:	68ba      	ldr	r2, [r7, #8]
 800c3b8:	69bb      	ldr	r3, [r7, #24]
 800c3ba:	4413      	add	r3, r2
 800c3bc:	781b      	ldrb	r3, [r3, #0]
 800c3be:	2b2f      	cmp	r3, #47	@ 0x2f
 800c3c0:	d917      	bls.n	800c3f2 <mg_json_get_num+0x76>
 800c3c2:	68ba      	ldr	r2, [r7, #8]
 800c3c4:	69bb      	ldr	r3, [r7, #24]
 800c3c6:	4413      	add	r3, r2
 800c3c8:	781b      	ldrb	r3, [r3, #0]
 800c3ca:	2b39      	cmp	r3, #57	@ 0x39
 800c3cc:	d811      	bhi.n	800c3f2 <mg_json_get_num+0x76>
 800c3ce:	683b      	ldr	r3, [r7, #0]
 800c3d0:	2b00      	cmp	r3, #0
 800c3d2:	d00c      	beq.n	800c3ee <mg_json_get_num+0x72>
 800c3d4:	68ba      	ldr	r2, [r7, #8]
 800c3d6:	69bb      	ldr	r3, [r7, #24]
 800c3d8:	4413      	add	r3, r2
 800c3da:	6979      	ldr	r1, [r7, #20]
 800c3dc:	2200      	movs	r2, #0
 800c3de:	4618      	mov	r0, r3
 800c3e0:	f7ff fb42 	bl	800ba68 <mg_atod>
 800c3e4:	eeb0 7b40 	vmov.f64	d7, d0
 800c3e8:	683b      	ldr	r3, [r7, #0]
 800c3ea:	ed83 7b00 	vstr	d7, [r3]
 800c3ee:	2301      	movs	r3, #1
 800c3f0:	61fb      	str	r3, [r7, #28]
 800c3f2:	69fb      	ldr	r3, [r7, #28]
 800c3f4:	2b00      	cmp	r3, #0
 800c3f6:	bf14      	ite	ne
 800c3f8:	2301      	movne	r3, #1
 800c3fa:	2300      	moveq	r3, #0
 800c3fc:	b2db      	uxtb	r3, r3
 800c3fe:	4618      	mov	r0, r3
 800c400:	3724      	adds	r7, #36	@ 0x24
 800c402:	46bd      	mov	sp, r7
 800c404:	bd90      	pop	{r4, r7, pc}

0800c406 <mg_json_get_long>:
 800c406:	b590      	push	{r4, r7, lr}
 800c408:	b089      	sub	sp, #36	@ 0x24
 800c40a:	af00      	add	r7, sp, #0
 800c40c:	f107 0408 	add.w	r4, r7, #8
 800c410:	e884 0003 	stmia.w	r4, {r0, r1}
 800c414:	607a      	str	r2, [r7, #4]
 800c416:	603b      	str	r3, [r7, #0]
 800c418:	683b      	ldr	r3, [r7, #0]
 800c41a:	61fb      	str	r3, [r7, #28]
 800c41c:	f107 0310 	add.w	r3, r7, #16
 800c420:	687a      	ldr	r2, [r7, #4]
 800c422:	f107 0108 	add.w	r1, r7, #8
 800c426:	c903      	ldmia	r1, {r0, r1}
 800c428:	f7ff ffa8 	bl	800c37c <mg_json_get_num>
 800c42c:	4603      	mov	r3, r0
 800c42e:	2b00      	cmp	r3, #0
 800c430:	d006      	beq.n	800c440 <mg_json_get_long+0x3a>
 800c432:	ed97 7b04 	vldr	d7, [r7, #16]
 800c436:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 800c43a:	ee17 3a90 	vmov	r3, s15
 800c43e:	61fb      	str	r3, [r7, #28]
 800c440:	69fb      	ldr	r3, [r7, #28]
 800c442:	4618      	mov	r0, r3
 800c444:	3724      	adds	r7, #36	@ 0x24
 800c446:	46bd      	mov	sp, r7
 800c448:	bd90      	pop	{r4, r7, pc}
	...

0800c44c <logc>:
 800c44c:	b580      	push	{r7, lr}
 800c44e:	b082      	sub	sp, #8
 800c450:	af00      	add	r7, sp, #0
 800c452:	4603      	mov	r3, r0
 800c454:	71fb      	strb	r3, [r7, #7]
 800c456:	4b05      	ldr	r3, [pc, #20]	@ (800c46c <logc+0x20>)
 800c458:	681b      	ldr	r3, [r3, #0]
 800c45a:	4a05      	ldr	r2, [pc, #20]	@ (800c470 <logc+0x24>)
 800c45c:	6811      	ldr	r1, [r2, #0]
 800c45e:	79fa      	ldrb	r2, [r7, #7]
 800c460:	4610      	mov	r0, r2
 800c462:	4798      	blx	r3
 800c464:	bf00      	nop
 800c466:	3708      	adds	r7, #8
 800c468:	46bd      	mov	sp, r7
 800c46a:	bd80      	pop	{r7, pc}
 800c46c:	2400004c 	.word	0x2400004c
 800c470:	24001fb4 	.word	0x24001fb4

0800c474 <logs>:
 800c474:	b580      	push	{r7, lr}
 800c476:	b084      	sub	sp, #16
 800c478:	af00      	add	r7, sp, #0
 800c47a:	6078      	str	r0, [r7, #4]
 800c47c:	6039      	str	r1, [r7, #0]
 800c47e:	2300      	movs	r3, #0
 800c480:	60fb      	str	r3, [r7, #12]
 800c482:	e009      	b.n	800c498 <logs+0x24>
 800c484:	687a      	ldr	r2, [r7, #4]
 800c486:	68fb      	ldr	r3, [r7, #12]
 800c488:	4413      	add	r3, r2
 800c48a:	781b      	ldrb	r3, [r3, #0]
 800c48c:	4618      	mov	r0, r3
 800c48e:	f7ff ffdd 	bl	800c44c <logc>
 800c492:	68fb      	ldr	r3, [r7, #12]
 800c494:	3301      	adds	r3, #1
 800c496:	60fb      	str	r3, [r7, #12]
 800c498:	68fa      	ldr	r2, [r7, #12]
 800c49a:	683b      	ldr	r3, [r7, #0]
 800c49c:	429a      	cmp	r2, r3
 800c49e:	d3f1      	bcc.n	800c484 <logs+0x10>
 800c4a0:	bf00      	nop
 800c4a2:	bf00      	nop
 800c4a4:	3710      	adds	r7, #16
 800c4a6:	46bd      	mov	sp, r7
 800c4a8:	bd80      	pop	{r7, pc}
	...

0800c4ac <mg_log_prefix>:
 800c4ac:	b590      	push	{r4, r7, lr}
 800c4ae:	b099      	sub	sp, #100	@ 0x64
 800c4b0:	af06      	add	r7, sp, #24
 800c4b2:	60f8      	str	r0, [r7, #12]
 800c4b4:	60b9      	str	r1, [r7, #8]
 800c4b6:	607a      	str	r2, [r7, #4]
 800c4b8:	603b      	str	r3, [r7, #0]
 800c4ba:	212f      	movs	r1, #47	@ 0x2f
 800c4bc:	68b8      	ldr	r0, [r7, #8]
 800c4be:	f00d faac 	bl	8019a1a <strrchr>
 800c4c2:	6478      	str	r0, [r7, #68]	@ 0x44
 800c4c4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800c4c6:	2b00      	cmp	r3, #0
 800c4c8:	d104      	bne.n	800c4d4 <mg_log_prefix+0x28>
 800c4ca:	215c      	movs	r1, #92	@ 0x5c
 800c4cc:	68b8      	ldr	r0, [r7, #8]
 800c4ce:	f00d faa4 	bl	8019a1a <strrchr>
 800c4d2:	6478      	str	r0, [r7, #68]	@ 0x44
 800c4d4:	f7f4 f9a8 	bl	8000828 <mg_millis>
 800c4d8:	4602      	mov	r2, r0
 800c4da:	460b      	mov	r3, r1
 800c4dc:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800c4de:	2900      	cmp	r1, #0
 800c4e0:	d002      	beq.n	800c4e8 <mg_log_prefix+0x3c>
 800c4e2:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800c4e4:	3101      	adds	r1, #1
 800c4e6:	e000      	b.n	800c4ea <mg_log_prefix+0x3e>
 800c4e8:	68b9      	ldr	r1, [r7, #8]
 800c4ea:	f107 0414 	add.w	r4, r7, #20
 800c4ee:	6838      	ldr	r0, [r7, #0]
 800c4f0:	9005      	str	r0, [sp, #20]
 800c4f2:	6878      	ldr	r0, [r7, #4]
 800c4f4:	9004      	str	r0, [sp, #16]
 800c4f6:	9103      	str	r1, [sp, #12]
 800c4f8:	68f9      	ldr	r1, [r7, #12]
 800c4fa:	9102      	str	r1, [sp, #8]
 800c4fc:	e9cd 2300 	strd	r2, r3, [sp]
 800c500:	4a11      	ldr	r2, [pc, #68]	@ (800c548 <mg_log_prefix+0x9c>)
 800c502:	2129      	movs	r1, #41	@ 0x29
 800c504:	4620      	mov	r0, r4
 800c506:	f003 fa5f 	bl	800f9c8 <mg_snprintf>
 800c50a:	6438      	str	r0, [r7, #64]	@ 0x40
 800c50c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800c50e:	2b27      	cmp	r3, #39	@ 0x27
 800c510:	d90a      	bls.n	800c528 <mg_log_prefix+0x7c>
 800c512:	2327      	movs	r3, #39	@ 0x27
 800c514:	643b      	str	r3, [r7, #64]	@ 0x40
 800c516:	e007      	b.n	800c528 <mg_log_prefix+0x7c>
 800c518:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800c51a:	1c5a      	adds	r2, r3, #1
 800c51c:	643a      	str	r2, [r7, #64]	@ 0x40
 800c51e:	3348      	adds	r3, #72	@ 0x48
 800c520:	443b      	add	r3, r7
 800c522:	2220      	movs	r2, #32
 800c524:	f803 2c34 	strb.w	r2, [r3, #-52]
 800c528:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800c52a:	2b28      	cmp	r3, #40	@ 0x28
 800c52c:	d9f4      	bls.n	800c518 <mg_log_prefix+0x6c>
 800c52e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800c530:	1e5a      	subs	r2, r3, #1
 800c532:	f107 0314 	add.w	r3, r7, #20
 800c536:	4611      	mov	r1, r2
 800c538:	4618      	mov	r0, r3
 800c53a:	f7ff ff9b 	bl	800c474 <logs>
 800c53e:	bf00      	nop
 800c540:	374c      	adds	r7, #76	@ 0x4c
 800c542:	46bd      	mov	sp, r7
 800c544:	bd90      	pop	{r4, r7, pc}
 800c546:	bf00      	nop
 800c548:	0801b17c 	.word	0x0801b17c

0800c54c <mg_log>:
 800c54c:	b40f      	push	{r0, r1, r2, r3}
 800c54e:	b580      	push	{r7, lr}
 800c550:	b082      	sub	sp, #8
 800c552:	af00      	add	r7, sp, #0
 800c554:	f107 0314 	add.w	r3, r7, #20
 800c558:	607b      	str	r3, [r7, #4]
 800c55a:	4b09      	ldr	r3, [pc, #36]	@ (800c580 <mg_log+0x34>)
 800c55c:	6818      	ldr	r0, [r3, #0]
 800c55e:	4b09      	ldr	r3, [pc, #36]	@ (800c584 <mg_log+0x38>)
 800c560:	6819      	ldr	r1, [r3, #0]
 800c562:	1d3b      	adds	r3, r7, #4
 800c564:	693a      	ldr	r2, [r7, #16]
 800c566:	f7fd f917 	bl	8009798 <mg_vxprintf>
 800c56a:	2102      	movs	r1, #2
 800c56c:	4806      	ldr	r0, [pc, #24]	@ (800c588 <mg_log+0x3c>)
 800c56e:	f7ff ff81 	bl	800c474 <logs>
 800c572:	bf00      	nop
 800c574:	3708      	adds	r7, #8
 800c576:	46bd      	mov	sp, r7
 800c578:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800c57c:	b004      	add	sp, #16
 800c57e:	4770      	bx	lr
 800c580:	2400004c 	.word	0x2400004c
 800c584:	24001fb4 	.word	0x24001fb4
 800c588:	0801a68c 	.word	0x0801a68c

0800c58c <nibble>:
 800c58c:	b480      	push	{r7}
 800c58e:	b083      	sub	sp, #12
 800c590:	af00      	add	r7, sp, #0
 800c592:	6078      	str	r0, [r7, #4]
 800c594:	687b      	ldr	r3, [r7, #4]
 800c596:	2b09      	cmp	r3, #9
 800c598:	d804      	bhi.n	800c5a4 <nibble+0x18>
 800c59a:	687b      	ldr	r3, [r7, #4]
 800c59c:	b2db      	uxtb	r3, r3
 800c59e:	3330      	adds	r3, #48	@ 0x30
 800c5a0:	b2db      	uxtb	r3, r3
 800c5a2:	e003      	b.n	800c5ac <nibble+0x20>
 800c5a4:	687b      	ldr	r3, [r7, #4]
 800c5a6:	b2db      	uxtb	r3, r3
 800c5a8:	3357      	adds	r3, #87	@ 0x57
 800c5aa:	b2db      	uxtb	r3, r3
 800c5ac:	4618      	mov	r0, r3
 800c5ae:	370c      	adds	r7, #12
 800c5b0:	46bd      	mov	sp, r7
 800c5b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c5b6:	4770      	bx	lr

0800c5b8 <mg_hexdump>:
 800c5b8:	b580      	push	{r7, lr}
 800c5ba:	b08a      	sub	sp, #40	@ 0x28
 800c5bc:	af00      	add	r7, sp, #0
 800c5be:	6078      	str	r0, [r7, #4]
 800c5c0:	6039      	str	r1, [r7, #0]
 800c5c2:	687b      	ldr	r3, [r7, #4]
 800c5c4:	61fb      	str	r3, [r7, #28]
 800c5c6:	2300      	movs	r3, #0
 800c5c8:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 800c5cc:	2300      	movs	r3, #0
 800c5ce:	623b      	str	r3, [r7, #32]
 800c5d0:	e07a      	b.n	800c6c8 <mg_hexdump+0x110>
 800c5d2:	6a3b      	ldr	r3, [r7, #32]
 800c5d4:	f003 030f 	and.w	r3, r3, #15
 800c5d8:	2b00      	cmp	r3, #0
 800c5da:	d13a      	bne.n	800c652 <mg_hexdump+0x9a>
 800c5dc:	6a3b      	ldr	r3, [r7, #32]
 800c5de:	2b00      	cmp	r3, #0
 800c5e0:	d00f      	beq.n	800c602 <mg_hexdump+0x4a>
 800c5e2:	2102      	movs	r1, #2
 800c5e4:	484c      	ldr	r0, [pc, #304]	@ (800c718 <mg_hexdump+0x160>)
 800c5e6:	f7ff ff45 	bl	800c474 <logs>
 800c5ea:	f107 030c 	add.w	r3, r7, #12
 800c5ee:	2110      	movs	r1, #16
 800c5f0:	4618      	mov	r0, r3
 800c5f2:	f7ff ff3f 	bl	800c474 <logs>
 800c5f6:	200a      	movs	r0, #10
 800c5f8:	f7ff ff28 	bl	800c44c <logc>
 800c5fc:	2300      	movs	r3, #0
 800c5fe:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 800c602:	6a3b      	ldr	r3, [r7, #32]
 800c604:	0b1b      	lsrs	r3, r3, #12
 800c606:	f003 030f 	and.w	r3, r3, #15
 800c60a:	4618      	mov	r0, r3
 800c60c:	f7ff ffbe 	bl	800c58c <nibble>
 800c610:	4603      	mov	r3, r0
 800c612:	4618      	mov	r0, r3
 800c614:	f7ff ff1a 	bl	800c44c <logc>
 800c618:	6a3b      	ldr	r3, [r7, #32]
 800c61a:	0a1b      	lsrs	r3, r3, #8
 800c61c:	f003 030f 	and.w	r3, r3, #15
 800c620:	4618      	mov	r0, r3
 800c622:	f7ff ffb3 	bl	800c58c <nibble>
 800c626:	4603      	mov	r3, r0
 800c628:	4618      	mov	r0, r3
 800c62a:	f7ff ff0f 	bl	800c44c <logc>
 800c62e:	6a3b      	ldr	r3, [r7, #32]
 800c630:	091b      	lsrs	r3, r3, #4
 800c632:	f003 030f 	and.w	r3, r3, #15
 800c636:	4618      	mov	r0, r3
 800c638:	f7ff ffa8 	bl	800c58c <nibble>
 800c63c:	4603      	mov	r3, r0
 800c63e:	4618      	mov	r0, r3
 800c640:	f7ff ff04 	bl	800c44c <logc>
 800c644:	2030      	movs	r0, #48	@ 0x30
 800c646:	f7ff ff01 	bl	800c44c <logc>
 800c64a:	2103      	movs	r1, #3
 800c64c:	4833      	ldr	r0, [pc, #204]	@ (800c71c <mg_hexdump+0x164>)
 800c64e:	f7ff ff11 	bl	800c474 <logs>
 800c652:	69fa      	ldr	r2, [r7, #28]
 800c654:	6a3b      	ldr	r3, [r7, #32]
 800c656:	4413      	add	r3, r2
 800c658:	781b      	ldrb	r3, [r3, #0]
 800c65a:	091b      	lsrs	r3, r3, #4
 800c65c:	b2db      	uxtb	r3, r3
 800c65e:	4618      	mov	r0, r3
 800c660:	f7ff ff94 	bl	800c58c <nibble>
 800c664:	4603      	mov	r3, r0
 800c666:	4618      	mov	r0, r3
 800c668:	f7ff fef0 	bl	800c44c <logc>
 800c66c:	69fa      	ldr	r2, [r7, #28]
 800c66e:	6a3b      	ldr	r3, [r7, #32]
 800c670:	4413      	add	r3, r2
 800c672:	781b      	ldrb	r3, [r3, #0]
 800c674:	f003 030f 	and.w	r3, r3, #15
 800c678:	4618      	mov	r0, r3
 800c67a:	f7ff ff87 	bl	800c58c <nibble>
 800c67e:	4603      	mov	r3, r0
 800c680:	4618      	mov	r0, r3
 800c682:	f7ff fee3 	bl	800c44c <logc>
 800c686:	2020      	movs	r0, #32
 800c688:	f7ff fee0 	bl	800c44c <logc>
 800c68c:	69fa      	ldr	r2, [r7, #28]
 800c68e:	6a3b      	ldr	r3, [r7, #32]
 800c690:	4413      	add	r3, r2
 800c692:	781b      	ldrb	r3, [r3, #0]
 800c694:	2b1f      	cmp	r3, #31
 800c696:	d90a      	bls.n	800c6ae <mg_hexdump+0xf6>
 800c698:	69fa      	ldr	r2, [r7, #28]
 800c69a:	6a3b      	ldr	r3, [r7, #32]
 800c69c:	4413      	add	r3, r2
 800c69e:	781b      	ldrb	r3, [r3, #0]
 800c6a0:	2b7e      	cmp	r3, #126	@ 0x7e
 800c6a2:	d804      	bhi.n	800c6ae <mg_hexdump+0xf6>
 800c6a4:	69fa      	ldr	r2, [r7, #28]
 800c6a6:	6a3b      	ldr	r3, [r7, #32]
 800c6a8:	4413      	add	r3, r2
 800c6aa:	781a      	ldrb	r2, [r3, #0]
 800c6ac:	e000      	b.n	800c6b0 <mg_hexdump+0xf8>
 800c6ae:	222e      	movs	r2, #46	@ 0x2e
 800c6b0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800c6b4:	1c59      	adds	r1, r3, #1
 800c6b6:	f887 1027 	strb.w	r1, [r7, #39]	@ 0x27
 800c6ba:	3328      	adds	r3, #40	@ 0x28
 800c6bc:	443b      	add	r3, r7
 800c6be:	f803 2c1c 	strb.w	r2, [r3, #-28]
 800c6c2:	6a3b      	ldr	r3, [r7, #32]
 800c6c4:	3301      	adds	r3, #1
 800c6c6:	623b      	str	r3, [r7, #32]
 800c6c8:	6a3a      	ldr	r2, [r7, #32]
 800c6ca:	683b      	ldr	r3, [r7, #0]
 800c6cc:	429a      	cmp	r2, r3
 800c6ce:	d380      	bcc.n	800c5d2 <mg_hexdump+0x1a>
 800c6d0:	e00d      	b.n	800c6ee <mg_hexdump+0x136>
 800c6d2:	2103      	movs	r1, #3
 800c6d4:	4811      	ldr	r0, [pc, #68]	@ (800c71c <mg_hexdump+0x164>)
 800c6d6:	f7ff fecd 	bl	800c474 <logs>
 800c6da:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800c6de:	1c5a      	adds	r2, r3, #1
 800c6e0:	f887 2027 	strb.w	r2, [r7, #39]	@ 0x27
 800c6e4:	3328      	adds	r3, #40	@ 0x28
 800c6e6:	443b      	add	r3, r7
 800c6e8:	2220      	movs	r2, #32
 800c6ea:	f803 2c1c 	strb.w	r2, [r3, #-28]
 800c6ee:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800c6f2:	2b0f      	cmp	r3, #15
 800c6f4:	d9ed      	bls.n	800c6d2 <mg_hexdump+0x11a>
 800c6f6:	2102      	movs	r1, #2
 800c6f8:	4807      	ldr	r0, [pc, #28]	@ (800c718 <mg_hexdump+0x160>)
 800c6fa:	f7ff febb 	bl	800c474 <logs>
 800c6fe:	f107 030c 	add.w	r3, r7, #12
 800c702:	2110      	movs	r1, #16
 800c704:	4618      	mov	r0, r3
 800c706:	f7ff feb5 	bl	800c474 <logs>
 800c70a:	200a      	movs	r0, #10
 800c70c:	f7ff fe9e 	bl	800c44c <logc>
 800c710:	bf00      	nop
 800c712:	3728      	adds	r7, #40	@ 0x28
 800c714:	46bd      	mov	sp, r7
 800c716:	bd80      	pop	{r7, pc}
 800c718:	0801b190 	.word	0x0801b190
 800c71c:	0801b194 	.word	0x0801b194

0800c720 <mkpay>:
 800c720:	b590      	push	{r4, r7, lr}
 800c722:	b085      	sub	sp, #20
 800c724:	af00      	add	r7, sp, #0
 800c726:	60f8      	str	r0, [r7, #12]
 800c728:	60b9      	str	r1, [r7, #8]
 800c72a:	68fb      	ldr	r3, [r7, #12]
 800c72c:	681a      	ldr	r2, [r3, #0]
 800c72e:	68fb      	ldr	r3, [r7, #12]
 800c730:	685b      	ldr	r3, [r3, #4]
 800c732:	441a      	add	r2, r3
 800c734:	68bb      	ldr	r3, [r7, #8]
 800c736:	1ad3      	subs	r3, r2, r3
 800c738:	461a      	mov	r2, r3
 800c73a:	68fc      	ldr	r4, [r7, #12]
 800c73c:	463b      	mov	r3, r7
 800c73e:	68b9      	ldr	r1, [r7, #8]
 800c740:	4618      	mov	r0, r3
 800c742:	f003 fbd8 	bl	800fef6 <mg_str_n>
 800c746:	f104 0308 	add.w	r3, r4, #8
 800c74a:	463a      	mov	r2, r7
 800c74c:	e892 0003 	ldmia.w	r2, {r0, r1}
 800c750:	e883 0003 	stmia.w	r3, {r0, r1}
 800c754:	bf00      	nop
 800c756:	3714      	adds	r7, #20
 800c758:	46bd      	mov	sp, r7
 800c75a:	bd90      	pop	{r4, r7, pc}

0800c75c <csumup>:
 800c75c:	b480      	push	{r7}
 800c75e:	b087      	sub	sp, #28
 800c760:	af00      	add	r7, sp, #0
 800c762:	60f8      	str	r0, [r7, #12]
 800c764:	60b9      	str	r1, [r7, #8]
 800c766:	607a      	str	r2, [r7, #4]
 800c768:	68bb      	ldr	r3, [r7, #8]
 800c76a:	613b      	str	r3, [r7, #16]
 800c76c:	2300      	movs	r3, #0
 800c76e:	617b      	str	r3, [r7, #20]
 800c770:	e014      	b.n	800c79c <csumup+0x40>
 800c772:	697b      	ldr	r3, [r7, #20]
 800c774:	f003 0301 	and.w	r3, r3, #1
 800c778:	2b00      	cmp	r3, #0
 800c77a:	d004      	beq.n	800c786 <csumup+0x2a>
 800c77c:	693a      	ldr	r2, [r7, #16]
 800c77e:	697b      	ldr	r3, [r7, #20]
 800c780:	4413      	add	r3, r2
 800c782:	781b      	ldrb	r3, [r3, #0]
 800c784:	e004      	b.n	800c790 <csumup+0x34>
 800c786:	693a      	ldr	r2, [r7, #16]
 800c788:	697b      	ldr	r3, [r7, #20]
 800c78a:	4413      	add	r3, r2
 800c78c:	781b      	ldrb	r3, [r3, #0]
 800c78e:	021b      	lsls	r3, r3, #8
 800c790:	68fa      	ldr	r2, [r7, #12]
 800c792:	4413      	add	r3, r2
 800c794:	60fb      	str	r3, [r7, #12]
 800c796:	697b      	ldr	r3, [r7, #20]
 800c798:	3301      	adds	r3, #1
 800c79a:	617b      	str	r3, [r7, #20]
 800c79c:	697a      	ldr	r2, [r7, #20]
 800c79e:	687b      	ldr	r3, [r7, #4]
 800c7a0:	429a      	cmp	r2, r3
 800c7a2:	d3e6      	bcc.n	800c772 <csumup+0x16>
 800c7a4:	68fb      	ldr	r3, [r7, #12]
 800c7a6:	4618      	mov	r0, r3
 800c7a8:	371c      	adds	r7, #28
 800c7aa:	46bd      	mov	sp, r7
 800c7ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c7b0:	4770      	bx	lr

0800c7b2 <csumfin>:
 800c7b2:	b580      	push	{r7, lr}
 800c7b4:	b082      	sub	sp, #8
 800c7b6:	af00      	add	r7, sp, #0
 800c7b8:	6078      	str	r0, [r7, #4]
 800c7ba:	e005      	b.n	800c7c8 <csumfin+0x16>
 800c7bc:	687b      	ldr	r3, [r7, #4]
 800c7be:	b29a      	uxth	r2, r3
 800c7c0:	687b      	ldr	r3, [r7, #4]
 800c7c2:	0c1b      	lsrs	r3, r3, #16
 800c7c4:	4413      	add	r3, r2
 800c7c6:	607b      	str	r3, [r7, #4]
 800c7c8:	687b      	ldr	r3, [r7, #4]
 800c7ca:	0c1b      	lsrs	r3, r3, #16
 800c7cc:	2b00      	cmp	r3, #0
 800c7ce:	d1f5      	bne.n	800c7bc <csumfin+0xa>
 800c7d0:	687b      	ldr	r3, [r7, #4]
 800c7d2:	b29b      	uxth	r3, r3
 800c7d4:	43db      	mvns	r3, r3
 800c7d6:	b29b      	uxth	r3, r3
 800c7d8:	4618      	mov	r0, r3
 800c7da:	f003 ffe5 	bl	80107a8 <mg_ntohs>
 800c7de:	4603      	mov	r3, r0
 800c7e0:	4618      	mov	r0, r3
 800c7e2:	3708      	adds	r7, #8
 800c7e4:	46bd      	mov	sp, r7
 800c7e6:	bd80      	pop	{r7, pc}

0800c7e8 <ipcsum>:
 800c7e8:	b580      	push	{r7, lr}
 800c7ea:	b084      	sub	sp, #16
 800c7ec:	af00      	add	r7, sp, #0
 800c7ee:	6078      	str	r0, [r7, #4]
 800c7f0:	6039      	str	r1, [r7, #0]
 800c7f2:	683a      	ldr	r2, [r7, #0]
 800c7f4:	6879      	ldr	r1, [r7, #4]
 800c7f6:	2000      	movs	r0, #0
 800c7f8:	f7ff ffb0 	bl	800c75c <csumup>
 800c7fc:	60f8      	str	r0, [r7, #12]
 800c7fe:	68f8      	ldr	r0, [r7, #12]
 800c800:	f7ff ffd7 	bl	800c7b2 <csumfin>
 800c804:	4603      	mov	r3, r0
 800c806:	4618      	mov	r0, r3
 800c808:	3710      	adds	r7, #16
 800c80a:	46bd      	mov	sp, r7
 800c80c:	bd80      	pop	{r7, pc}
	...

0800c810 <settmout>:
 800c810:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 800c814:	b088      	sub	sp, #32
 800c816:	af02      	add	r7, sp, #8
 800c818:	6078      	str	r0, [r7, #4]
 800c81a:	460b      	mov	r3, r1
 800c81c:	70fb      	strb	r3, [r7, #3]
 800c81e:	687b      	ldr	r3, [r7, #4]
 800c820:	685b      	ldr	r3, [r3, #4]
 800c822:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800c824:	617b      	str	r3, [r7, #20]
 800c826:	687b      	ldr	r3, [r7, #4]
 800c828:	33b0      	adds	r3, #176	@ 0xb0
 800c82a:	613b      	str	r3, [r7, #16]
 800c82c:	78fb      	ldrb	r3, [r7, #3]
 800c82e:	2b01      	cmp	r3, #1
 800c830:	d013      	beq.n	800c85a <settmout+0x4a>
 800c832:	78fb      	ldrb	r3, [r7, #3]
 800c834:	2b02      	cmp	r3, #2
 800c836:	d00e      	beq.n	800c856 <settmout+0x46>
 800c838:	78fb      	ldrb	r3, [r7, #3]
 800c83a:	2b03      	cmp	r3, #3
 800c83c:	d008      	beq.n	800c850 <settmout+0x40>
 800c83e:	78fb      	ldrb	r3, [r7, #3]
 800c840:	2b04      	cmp	r3, #4
 800c842:	d102      	bne.n	800c84a <settmout+0x3a>
 800c844:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800c848:	e008      	b.n	800c85c <settmout+0x4c>
 800c84a:	f64a 73c8 	movw	r3, #45000	@ 0xafc8
 800c84e:	e005      	b.n	800c85c <settmout+0x4c>
 800c850:	f643 2398 	movw	r3, #15000	@ 0x3a98
 800c854:	e002      	b.n	800c85c <settmout+0x4c>
 800c856:	2364      	movs	r3, #100	@ 0x64
 800c858:	e000      	b.n	800c85c <settmout+0x4c>
 800c85a:	2396      	movs	r3, #150	@ 0x96
 800c85c:	60fb      	str	r3, [r7, #12]
 800c85e:	697b      	ldr	r3, [r7, #20]
 800c860:	e9d3 2312 	ldrd	r2, r3, [r3, #72]	@ 0x48
 800c864:	68f9      	ldr	r1, [r7, #12]
 800c866:	2000      	movs	r0, #0
 800c868:	460c      	mov	r4, r1
 800c86a:	4605      	mov	r5, r0
 800c86c:	eb12 0804 	adds.w	r8, r2, r4
 800c870:	eb43 0905 	adc.w	r9, r3, r5
 800c874:	693b      	ldr	r3, [r7, #16]
 800c876:	e9c3 8902 	strd	r8, r9, [r3, #8]
 800c87a:	693b      	ldr	r3, [r7, #16]
 800c87c:	78fa      	ldrb	r2, [r7, #3]
 800c87e:	759a      	strb	r2, [r3, #22]
 800c880:	4b0d      	ldr	r3, [pc, #52]	@ (800c8b8 <settmout+0xa8>)
 800c882:	681b      	ldr	r3, [r3, #0]
 800c884:	2b03      	cmp	r3, #3
 800c886:	dd11      	ble.n	800c8ac <settmout+0x9c>
 800c888:	4b0c      	ldr	r3, [pc, #48]	@ (800c8bc <settmout+0xac>)
 800c88a:	22ac      	movs	r2, #172	@ 0xac
 800c88c:	490c      	ldr	r1, [pc, #48]	@ (800c8c0 <settmout+0xb0>)
 800c88e:	2004      	movs	r0, #4
 800c890:	f7ff fe0c 	bl	800c4ac <mg_log_prefix>
 800c894:	687b      	ldr	r3, [r7, #4]
 800c896:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 800c898:	78f8      	ldrb	r0, [r7, #3]
 800c89a:	693b      	ldr	r3, [r7, #16]
 800c89c:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 800c8a0:	e9cd 2300 	strd	r2, r3, [sp]
 800c8a4:	4602      	mov	r2, r0
 800c8a6:	4807      	ldr	r0, [pc, #28]	@ (800c8c4 <settmout+0xb4>)
 800c8a8:	f7ff fe50 	bl	800c54c <mg_log>
 800c8ac:	bf00      	nop
 800c8ae:	3718      	adds	r7, #24
 800c8b0:	46bd      	mov	sp, r7
 800c8b2:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 800c8b6:	bf00      	nop
 800c8b8:	24000048 	.word	0x24000048
 800c8bc:	0801bffc 	.word	0x0801bffc
 800c8c0:	0801b22c 	.word	0x0801b22c
 800c8c4:	0801b240 	.word	0x0801b240

0800c8c8 <ether_output>:
 800c8c8:	b580      	push	{r7, lr}
 800c8ca:	b084      	sub	sp, #16
 800c8cc:	af00      	add	r7, sp, #0
 800c8ce:	6078      	str	r0, [r7, #4]
 800c8d0:	6039      	str	r1, [r7, #0]
 800c8d2:	687b      	ldr	r3, [r7, #4]
 800c8d4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c8d6:	685b      	ldr	r3, [r3, #4]
 800c8d8:	687a      	ldr	r2, [r7, #4]
 800c8da:	6950      	ldr	r0, [r2, #20]
 800c8dc:	687a      	ldr	r2, [r7, #4]
 800c8de:	6839      	ldr	r1, [r7, #0]
 800c8e0:	4798      	blx	r3
 800c8e2:	60f8      	str	r0, [r7, #12]
 800c8e4:	68fa      	ldr	r2, [r7, #12]
 800c8e6:	683b      	ldr	r3, [r7, #0]
 800c8e8:	429a      	cmp	r2, r3
 800c8ea:	d104      	bne.n	800c8f6 <ether_output+0x2e>
 800c8ec:	687b      	ldr	r3, [r7, #4]
 800c8ee:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800c8f0:	1c5a      	adds	r2, r3, #1
 800c8f2:	687b      	ldr	r3, [r7, #4]
 800c8f4:	66da      	str	r2, [r3, #108]	@ 0x6c
 800c8f6:	68fb      	ldr	r3, [r7, #12]
 800c8f8:	4618      	mov	r0, r3
 800c8fa:	3710      	adds	r7, #16
 800c8fc:	46bd      	mov	sp, r7
 800c8fe:	bd80      	pop	{r7, pc}

0800c900 <arp_ask>:
 800c900:	b580      	push	{r7, lr}
 800c902:	b084      	sub	sp, #16
 800c904:	af00      	add	r7, sp, #0
 800c906:	6078      	str	r0, [r7, #4]
 800c908:	6039      	str	r1, [r7, #0]
 800c90a:	687b      	ldr	r3, [r7, #4]
 800c90c:	695b      	ldr	r3, [r3, #20]
 800c90e:	60fb      	str	r3, [r7, #12]
 800c910:	68fb      	ldr	r3, [r7, #12]
 800c912:	330e      	adds	r3, #14
 800c914:	60bb      	str	r3, [r7, #8]
 800c916:	68fb      	ldr	r3, [r7, #12]
 800c918:	2206      	movs	r2, #6
 800c91a:	21ff      	movs	r1, #255	@ 0xff
 800c91c:	4618      	mov	r0, r3
 800c91e:	f00d f855 	bl	80199cc <memset>
 800c922:	68fb      	ldr	r3, [r7, #12]
 800c924:	3306      	adds	r3, #6
 800c926:	6879      	ldr	r1, [r7, #4]
 800c928:	2206      	movs	r2, #6
 800c92a:	4618      	mov	r0, r3
 800c92c:	f00d f90f 	bl	8019b4e <memcpy>
 800c930:	f640 0006 	movw	r0, #2054	@ 0x806
 800c934:	f003 ff38 	bl	80107a8 <mg_ntohs>
 800c938:	4603      	mov	r3, r0
 800c93a:	461a      	mov	r2, r3
 800c93c:	68fb      	ldr	r3, [r7, #12]
 800c93e:	819a      	strh	r2, [r3, #12]
 800c940:	221c      	movs	r2, #28
 800c942:	2100      	movs	r1, #0
 800c944:	68b8      	ldr	r0, [r7, #8]
 800c946:	f00d f841 	bl	80199cc <memset>
 800c94a:	2001      	movs	r0, #1
 800c94c:	f003 ff2c 	bl	80107a8 <mg_ntohs>
 800c950:	4603      	mov	r3, r0
 800c952:	461a      	mov	r2, r3
 800c954:	68bb      	ldr	r3, [r7, #8]
 800c956:	801a      	strh	r2, [r3, #0]
 800c958:	f44f 6000 	mov.w	r0, #2048	@ 0x800
 800c95c:	f003 ff24 	bl	80107a8 <mg_ntohs>
 800c960:	4603      	mov	r3, r0
 800c962:	461a      	mov	r2, r3
 800c964:	68bb      	ldr	r3, [r7, #8]
 800c966:	805a      	strh	r2, [r3, #2]
 800c968:	68bb      	ldr	r3, [r7, #8]
 800c96a:	2206      	movs	r2, #6
 800c96c:	711a      	strb	r2, [r3, #4]
 800c96e:	68bb      	ldr	r3, [r7, #8]
 800c970:	2204      	movs	r2, #4
 800c972:	715a      	strb	r2, [r3, #5]
 800c974:	2001      	movs	r0, #1
 800c976:	f003 ff17 	bl	80107a8 <mg_ntohs>
 800c97a:	4603      	mov	r3, r0
 800c97c:	461a      	mov	r2, r3
 800c97e:	68bb      	ldr	r3, [r7, #8]
 800c980:	80da      	strh	r2, [r3, #6]
 800c982:	68bb      	ldr	r3, [r7, #8]
 800c984:	683a      	ldr	r2, [r7, #0]
 800c986:	619a      	str	r2, [r3, #24]
 800c988:	687b      	ldr	r3, [r7, #4]
 800c98a:	689a      	ldr	r2, [r3, #8]
 800c98c:	68bb      	ldr	r3, [r7, #8]
 800c98e:	f8c3 200e 	str.w	r2, [r3, #14]
 800c992:	68bb      	ldr	r3, [r7, #8]
 800c994:	3308      	adds	r3, #8
 800c996:	6879      	ldr	r1, [r7, #4]
 800c998:	2206      	movs	r2, #6
 800c99a:	4618      	mov	r0, r3
 800c99c:	f00d f8d7 	bl	8019b4e <memcpy>
 800c9a0:	68bb      	ldr	r3, [r7, #8]
 800c9a2:	f103 021c 	add.w	r2, r3, #28
 800c9a6:	68fb      	ldr	r3, [r7, #12]
 800c9a8:	1ad3      	subs	r3, r2, r3
 800c9aa:	4619      	mov	r1, r3
 800c9ac:	6878      	ldr	r0, [r7, #4]
 800c9ae:	f7ff ff8b 	bl	800c8c8 <ether_output>
 800c9b2:	bf00      	nop
 800c9b4:	3710      	adds	r7, #16
 800c9b6:	46bd      	mov	sp, r7
 800c9b8:	bd80      	pop	{r7, pc}
	...

0800c9bc <onstatechange>:
 800c9bc:	b580      	push	{r7, lr}
 800c9be:	b082      	sub	sp, #8
 800c9c0:	af00      	add	r7, sp, #0
 800c9c2:	6078      	str	r0, [r7, #4]
 800c9c4:	687b      	ldr	r3, [r7, #4]
 800c9c6:	f893 3074 	ldrb.w	r3, [r3, #116]	@ 0x74
 800c9ca:	2b03      	cmp	r3, #3
 800c9cc:	d138      	bne.n	800ca40 <onstatechange+0x84>
 800c9ce:	4b35      	ldr	r3, [pc, #212]	@ (800caa4 <onstatechange+0xe8>)
 800c9d0:	681b      	ldr	r3, [r3, #0]
 800c9d2:	2b01      	cmp	r3, #1
 800c9d4:	dd0c      	ble.n	800c9f0 <onstatechange+0x34>
 800c9d6:	4b34      	ldr	r3, [pc, #208]	@ (800caa8 <onstatechange+0xec>)
 800c9d8:	22c5      	movs	r2, #197	@ 0xc5
 800c9da:	4934      	ldr	r1, [pc, #208]	@ (800caac <onstatechange+0xf0>)
 800c9dc:	2002      	movs	r0, #2
 800c9de:	f7ff fd65 	bl	800c4ac <mg_log_prefix>
 800c9e2:	687b      	ldr	r3, [r7, #4]
 800c9e4:	3308      	adds	r3, #8
 800c9e6:	461a      	mov	r2, r3
 800c9e8:	4931      	ldr	r1, [pc, #196]	@ (800cab0 <onstatechange+0xf4>)
 800c9ea:	4832      	ldr	r0, [pc, #200]	@ (800cab4 <onstatechange+0xf8>)
 800c9ec:	f7ff fdae 	bl	800c54c <mg_log>
 800c9f0:	4b2c      	ldr	r3, [pc, #176]	@ (800caa4 <onstatechange+0xe8>)
 800c9f2:	681b      	ldr	r3, [r3, #0]
 800c9f4:	2b01      	cmp	r3, #1
 800c9f6:	dd0c      	ble.n	800ca12 <onstatechange+0x56>
 800c9f8:	4b2b      	ldr	r3, [pc, #172]	@ (800caa8 <onstatechange+0xec>)
 800c9fa:	22c6      	movs	r2, #198	@ 0xc6
 800c9fc:	492b      	ldr	r1, [pc, #172]	@ (800caac <onstatechange+0xf0>)
 800c9fe:	2002      	movs	r0, #2
 800ca00:	f7ff fd54 	bl	800c4ac <mg_log_prefix>
 800ca04:	687b      	ldr	r3, [r7, #4]
 800ca06:	3310      	adds	r3, #16
 800ca08:	461a      	mov	r2, r3
 800ca0a:	4929      	ldr	r1, [pc, #164]	@ (800cab0 <onstatechange+0xf4>)
 800ca0c:	482a      	ldr	r0, [pc, #168]	@ (800cab8 <onstatechange+0xfc>)
 800ca0e:	f7ff fd9d 	bl	800c54c <mg_log>
 800ca12:	4b24      	ldr	r3, [pc, #144]	@ (800caa4 <onstatechange+0xe8>)
 800ca14:	681b      	ldr	r3, [r3, #0]
 800ca16:	2b01      	cmp	r3, #1
 800ca18:	dd0b      	ble.n	800ca32 <onstatechange+0x76>
 800ca1a:	4b23      	ldr	r3, [pc, #140]	@ (800caa8 <onstatechange+0xec>)
 800ca1c:	22c7      	movs	r2, #199	@ 0xc7
 800ca1e:	4923      	ldr	r1, [pc, #140]	@ (800caac <onstatechange+0xf0>)
 800ca20:	2002      	movs	r0, #2
 800ca22:	f7ff fd43 	bl	800c4ac <mg_log_prefix>
 800ca26:	687b      	ldr	r3, [r7, #4]
 800ca28:	461a      	mov	r2, r3
 800ca2a:	4924      	ldr	r1, [pc, #144]	@ (800cabc <onstatechange+0x100>)
 800ca2c:	4824      	ldr	r0, [pc, #144]	@ (800cac0 <onstatechange+0x104>)
 800ca2e:	f7ff fd8d 	bl	800c54c <mg_log>
 800ca32:	687b      	ldr	r3, [r7, #4]
 800ca34:	691b      	ldr	r3, [r3, #16]
 800ca36:	4619      	mov	r1, r3
 800ca38:	6878      	ldr	r0, [r7, #4]
 800ca3a:	f7ff ff61 	bl	800c900 <arp_ask>
 800ca3e:	e02c      	b.n	800ca9a <onstatechange+0xde>
 800ca40:	687b      	ldr	r3, [r7, #4]
 800ca42:	f893 3074 	ldrb.w	r3, [r3, #116]	@ 0x74
 800ca46:	2b01      	cmp	r3, #1
 800ca48:	d115      	bne.n	800ca76 <onstatechange+0xba>
 800ca4a:	4b16      	ldr	r3, [pc, #88]	@ (800caa4 <onstatechange+0xe8>)
 800ca4c:	681b      	ldr	r3, [r3, #0]
 800ca4e:	2b00      	cmp	r3, #0
 800ca50:	dd08      	ble.n	800ca64 <onstatechange+0xa8>
 800ca52:	4b15      	ldr	r3, [pc, #84]	@ (800caa8 <onstatechange+0xec>)
 800ca54:	22ca      	movs	r2, #202	@ 0xca
 800ca56:	4915      	ldr	r1, [pc, #84]	@ (800caac <onstatechange+0xf0>)
 800ca58:	2001      	movs	r0, #1
 800ca5a:	f7ff fd27 	bl	800c4ac <mg_log_prefix>
 800ca5e:	4819      	ldr	r0, [pc, #100]	@ (800cac4 <onstatechange+0x108>)
 800ca60:	f7ff fd74 	bl	800c54c <mg_log>
 800ca64:	f7f3 fee0 	bl	8000828 <mg_millis>
 800ca68:	4602      	mov	r2, r0
 800ca6a:	460b      	mov	r3, r1
 800ca6c:	4613      	mov	r3, r2
 800ca6e:	4618      	mov	r0, r3
 800ca70:	f00c fc70 	bl	8019354 <srand>
 800ca74:	e011      	b.n	800ca9a <onstatechange+0xde>
 800ca76:	687b      	ldr	r3, [r7, #4]
 800ca78:	f893 3074 	ldrb.w	r3, [r3, #116]	@ 0x74
 800ca7c:	2b00      	cmp	r3, #0
 800ca7e:	d10c      	bne.n	800ca9a <onstatechange+0xde>
 800ca80:	4b08      	ldr	r3, [pc, #32]	@ (800caa4 <onstatechange+0xe8>)
 800ca82:	681b      	ldr	r3, [r3, #0]
 800ca84:	2b00      	cmp	r3, #0
 800ca86:	dd08      	ble.n	800ca9a <onstatechange+0xde>
 800ca88:	4b07      	ldr	r3, [pc, #28]	@ (800caa8 <onstatechange+0xec>)
 800ca8a:	22cd      	movs	r2, #205	@ 0xcd
 800ca8c:	4907      	ldr	r1, [pc, #28]	@ (800caac <onstatechange+0xf0>)
 800ca8e:	2001      	movs	r0, #1
 800ca90:	f7ff fd0c 	bl	800c4ac <mg_log_prefix>
 800ca94:	480c      	ldr	r0, [pc, #48]	@ (800cac8 <onstatechange+0x10c>)
 800ca96:	f7ff fd59 	bl	800c54c <mg_log>
 800ca9a:	bf00      	nop
 800ca9c:	3708      	adds	r7, #8
 800ca9e:	46bd      	mov	sp, r7
 800caa0:	bd80      	pop	{r7, pc}
 800caa2:	bf00      	nop
 800caa4:	24000048 	.word	0x24000048
 800caa8:	0801c008 	.word	0x0801c008
 800caac:	0801b22c 	.word	0x0801b22c
 800cab0:	0800fb1d 	.word	0x0800fb1d
 800cab4:	0801b250 	.word	0x0801b250
 800cab8:	0801b260 	.word	0x0801b260
 800cabc:	0800fbe1 	.word	0x0800fbe1
 800cac0:	0801b270 	.word	0x0801b270
 800cac4:	0801b280 	.word	0x0801b280
 800cac8:	0801b288 	.word	0x0801b288

0800cacc <tx_ip>:
 800cacc:	b580      	push	{r7, lr}
 800cace:	b086      	sub	sp, #24
 800cad0:	af00      	add	r7, sp, #0
 800cad2:	60f8      	str	r0, [r7, #12]
 800cad4:	60b9      	str	r1, [r7, #8]
 800cad6:	603b      	str	r3, [r7, #0]
 800cad8:	4613      	mov	r3, r2
 800cada:	71fb      	strb	r3, [r7, #7]
 800cadc:	68fb      	ldr	r3, [r7, #12]
 800cade:	695b      	ldr	r3, [r3, #20]
 800cae0:	617b      	str	r3, [r7, #20]
 800cae2:	697b      	ldr	r3, [r7, #20]
 800cae4:	330e      	adds	r3, #14
 800cae6:	613b      	str	r3, [r7, #16]
 800cae8:	697b      	ldr	r3, [r7, #20]
 800caea:	2206      	movs	r2, #6
 800caec:	68b9      	ldr	r1, [r7, #8]
 800caee:	4618      	mov	r0, r3
 800caf0:	f00d f82d 	bl	8019b4e <memcpy>
 800caf4:	697b      	ldr	r3, [r7, #20]
 800caf6:	3306      	adds	r3, #6
 800caf8:	68f9      	ldr	r1, [r7, #12]
 800cafa:	2206      	movs	r2, #6
 800cafc:	4618      	mov	r0, r3
 800cafe:	f00d f826 	bl	8019b4e <memcpy>
 800cb02:	f44f 6000 	mov.w	r0, #2048	@ 0x800
 800cb06:	f003 fe4f 	bl	80107a8 <mg_ntohs>
 800cb0a:	4603      	mov	r3, r0
 800cb0c:	461a      	mov	r2, r3
 800cb0e:	697b      	ldr	r3, [r7, #20]
 800cb10:	819a      	strh	r2, [r3, #12]
 800cb12:	2214      	movs	r2, #20
 800cb14:	2100      	movs	r1, #0
 800cb16:	6938      	ldr	r0, [r7, #16]
 800cb18:	f00c ff58 	bl	80199cc <memset>
 800cb1c:	693b      	ldr	r3, [r7, #16]
 800cb1e:	2245      	movs	r2, #69	@ 0x45
 800cb20:	701a      	strb	r2, [r3, #0]
 800cb22:	693b      	ldr	r3, [r7, #16]
 800cb24:	2200      	movs	r2, #0
 800cb26:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800cb2a:	719a      	strb	r2, [r3, #6]
 800cb2c:	2200      	movs	r2, #0
 800cb2e:	71da      	strb	r2, [r3, #7]
 800cb30:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cb32:	b29b      	uxth	r3, r3
 800cb34:	3314      	adds	r3, #20
 800cb36:	b29b      	uxth	r3, r3
 800cb38:	4618      	mov	r0, r3
 800cb3a:	f003 fe35 	bl	80107a8 <mg_ntohs>
 800cb3e:	4603      	mov	r3, r0
 800cb40:	461a      	mov	r2, r3
 800cb42:	693b      	ldr	r3, [r7, #16]
 800cb44:	805a      	strh	r2, [r3, #2]
 800cb46:	693b      	ldr	r3, [r7, #16]
 800cb48:	2240      	movs	r2, #64	@ 0x40
 800cb4a:	721a      	strb	r2, [r3, #8]
 800cb4c:	693b      	ldr	r3, [r7, #16]
 800cb4e:	79fa      	ldrb	r2, [r7, #7]
 800cb50:	725a      	strb	r2, [r3, #9]
 800cb52:	693b      	ldr	r3, [r7, #16]
 800cb54:	683a      	ldr	r2, [r7, #0]
 800cb56:	60da      	str	r2, [r3, #12]
 800cb58:	693b      	ldr	r3, [r7, #16]
 800cb5a:	6a3a      	ldr	r2, [r7, #32]
 800cb5c:	611a      	str	r2, [r3, #16]
 800cb5e:	2114      	movs	r1, #20
 800cb60:	6938      	ldr	r0, [r7, #16]
 800cb62:	f7ff fe41 	bl	800c7e8 <ipcsum>
 800cb66:	4603      	mov	r3, r0
 800cb68:	461a      	mov	r2, r3
 800cb6a:	693b      	ldr	r3, [r7, #16]
 800cb6c:	815a      	strh	r2, [r3, #10]
 800cb6e:	693b      	ldr	r3, [r7, #16]
 800cb70:	4618      	mov	r0, r3
 800cb72:	3718      	adds	r7, #24
 800cb74:	46bd      	mov	sp, r7
 800cb76:	bd80      	pop	{r7, pc}

0800cb78 <tx_udp>:
 800cb78:	b580      	push	{r7, lr}
 800cb7a:	b08a      	sub	sp, #40	@ 0x28
 800cb7c:	af02      	add	r7, sp, #8
 800cb7e:	60f8      	str	r0, [r7, #12]
 800cb80:	60b9      	str	r1, [r7, #8]
 800cb82:	607a      	str	r2, [r7, #4]
 800cb84:	807b      	strh	r3, [r7, #2]
 800cb86:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800cb88:	3308      	adds	r3, #8
 800cb8a:	9301      	str	r3, [sp, #4]
 800cb8c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cb8e:	9300      	str	r3, [sp, #0]
 800cb90:	687b      	ldr	r3, [r7, #4]
 800cb92:	2211      	movs	r2, #17
 800cb94:	68b9      	ldr	r1, [r7, #8]
 800cb96:	68f8      	ldr	r0, [r7, #12]
 800cb98:	f7ff ff98 	bl	800cacc <tx_ip>
 800cb9c:	61f8      	str	r0, [r7, #28]
 800cb9e:	69fb      	ldr	r3, [r7, #28]
 800cba0:	3314      	adds	r3, #20
 800cba2:	61bb      	str	r3, [r7, #24]
 800cba4:	69bb      	ldr	r3, [r7, #24]
 800cba6:	887a      	ldrh	r2, [r7, #2]
 800cba8:	801a      	strh	r2, [r3, #0]
 800cbaa:	69bb      	ldr	r3, [r7, #24]
 800cbac:	8dba      	ldrh	r2, [r7, #44]	@ 0x2c
 800cbae:	805a      	strh	r2, [r3, #2]
 800cbb0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800cbb2:	b29b      	uxth	r3, r3
 800cbb4:	3308      	adds	r3, #8
 800cbb6:	b29b      	uxth	r3, r3
 800cbb8:	4618      	mov	r0, r3
 800cbba:	f003 fdf5 	bl	80107a8 <mg_ntohs>
 800cbbe:	4603      	mov	r3, r0
 800cbc0:	461a      	mov	r2, r3
 800cbc2:	69bb      	ldr	r3, [r7, #24]
 800cbc4:	809a      	strh	r2, [r3, #4]
 800cbc6:	69bb      	ldr	r3, [r7, #24]
 800cbc8:	2200      	movs	r2, #0
 800cbca:	719a      	strb	r2, [r3, #6]
 800cbcc:	2200      	movs	r2, #0
 800cbce:	71da      	strb	r2, [r3, #7]
 800cbd0:	2208      	movs	r2, #8
 800cbd2:	69b9      	ldr	r1, [r7, #24]
 800cbd4:	2000      	movs	r0, #0
 800cbd6:	f7ff fdc1 	bl	800c75c <csumup>
 800cbda:	6178      	str	r0, [r7, #20]
 800cbdc:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800cbde:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800cbe0:	6978      	ldr	r0, [r7, #20]
 800cbe2:	f7ff fdbb 	bl	800c75c <csumup>
 800cbe6:	6178      	str	r0, [r7, #20]
 800cbe8:	69fb      	ldr	r3, [r7, #28]
 800cbea:	330c      	adds	r3, #12
 800cbec:	2204      	movs	r2, #4
 800cbee:	4619      	mov	r1, r3
 800cbf0:	6978      	ldr	r0, [r7, #20]
 800cbf2:	f7ff fdb3 	bl	800c75c <csumup>
 800cbf6:	6178      	str	r0, [r7, #20]
 800cbf8:	69fb      	ldr	r3, [r7, #28]
 800cbfa:	3310      	adds	r3, #16
 800cbfc:	2204      	movs	r2, #4
 800cbfe:	4619      	mov	r1, r3
 800cc00:	6978      	ldr	r0, [r7, #20]
 800cc02:	f7ff fdab 	bl	800c75c <csumup>
 800cc06:	6178      	str	r0, [r7, #20]
 800cc08:	69fb      	ldr	r3, [r7, #28]
 800cc0a:	7a5b      	ldrb	r3, [r3, #9]
 800cc0c:	461a      	mov	r2, r3
 800cc0e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800cc10:	441a      	add	r2, r3
 800cc12:	697b      	ldr	r3, [r7, #20]
 800cc14:	4413      	add	r3, r2
 800cc16:	3308      	adds	r3, #8
 800cc18:	617b      	str	r3, [r7, #20]
 800cc1a:	6978      	ldr	r0, [r7, #20]
 800cc1c:	f7ff fdc9 	bl	800c7b2 <csumfin>
 800cc20:	4603      	mov	r3, r0
 800cc22:	461a      	mov	r2, r3
 800cc24:	69bb      	ldr	r3, [r7, #24]
 800cc26:	80da      	strh	r2, [r3, #6]
 800cc28:	69bb      	ldr	r3, [r7, #24]
 800cc2a:	3308      	adds	r3, #8
 800cc2c:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800cc2e:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800cc30:	4618      	mov	r0, r3
 800cc32:	f00c feb1 	bl	8019998 <memmove>
 800cc36:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800cc38:	332a      	adds	r3, #42	@ 0x2a
 800cc3a:	4619      	mov	r1, r3
 800cc3c:	68f8      	ldr	r0, [r7, #12]
 800cc3e:	f7ff fe43 	bl	800c8c8 <ether_output>
 800cc42:	bf00      	nop
 800cc44:	3720      	adds	r7, #32
 800cc46:	46bd      	mov	sp, r7
 800cc48:	bd80      	pop	{r7, pc}
	...

0800cc4c <tx_dhcp>:
 800cc4c:	b5b0      	push	{r4, r5, r7, lr}
 800cc4e:	b0cc      	sub	sp, #304	@ 0x130
 800cc50:	af04      	add	r7, sp, #16
 800cc52:	f507 7490 	add.w	r4, r7, #288	@ 0x120
 800cc56:	f5a4 748a 	sub.w	r4, r4, #276	@ 0x114
 800cc5a:	6020      	str	r0, [r4, #0]
 800cc5c:	f507 7090 	add.w	r0, r7, #288	@ 0x120
 800cc60:	f5a0 708c 	sub.w	r0, r0, #280	@ 0x118
 800cc64:	6001      	str	r1, [r0, #0]
 800cc66:	f507 7190 	add.w	r1, r7, #288	@ 0x120
 800cc6a:	f5a1 718e 	sub.w	r1, r1, #284	@ 0x11c
 800cc6e:	600a      	str	r2, [r1, #0]
 800cc70:	f507 7290 	add.w	r2, r7, #288	@ 0x120
 800cc74:	f5a2 7290 	sub.w	r2, r2, #288	@ 0x120
 800cc78:	6013      	str	r3, [r2, #0]
 800cc7a:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 800cc7e:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 800cc82:	4a38      	ldr	r2, [pc, #224]	@ (800cd64 <tx_dhcp+0x118>)
 800cc84:	4618      	mov	r0, r3
 800cc86:	4611      	mov	r1, r2
 800cc88:	f44f 7388 	mov.w	r3, #272	@ 0x110
 800cc8c:	461a      	mov	r2, r3
 800cc8e:	f00c ff5e 	bl	8019b4e <memcpy>
 800cc92:	4835      	ldr	r0, [pc, #212]	@ (800cd68 <tx_dhcp+0x11c>)
 800cc94:	f003 fd6f 	bl	8010776 <mg_ntohl>
 800cc98:	4602      	mov	r2, r0
 800cc9a:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 800cc9e:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 800cca2:	f8c3 20ec 	str.w	r2, [r3, #236]	@ 0xec
 800cca6:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 800ccaa:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 800ccae:	6819      	ldr	r1, [r3, #0]
 800ccb0:	f107 0310 	add.w	r3, r7, #16
 800ccb4:	331c      	adds	r3, #28
 800ccb6:	2206      	movs	r2, #6
 800ccb8:	4618      	mov	r0, r3
 800ccba:	f00c ff48 	bl	8019b4e <memcpy>
 800ccbe:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 800ccc2:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 800ccc6:	681b      	ldr	r3, [r3, #0]
 800ccc8:	3302      	adds	r3, #2
 800ccca:	681b      	ldr	r3, [r3, #0]
 800cccc:	461a      	mov	r2, r3
 800ccce:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 800ccd2:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 800ccd6:	605a      	str	r2, [r3, #4]
 800ccd8:	f107 0310 	add.w	r3, r7, #16
 800ccdc:	33f0      	adds	r3, #240	@ 0xf0
 800ccde:	f8d7 2134 	ldr.w	r2, [r7, #308]	@ 0x134
 800cce2:	f8d7 1130 	ldr.w	r1, [r7, #304]	@ 0x130
 800cce6:	4618      	mov	r0, r3
 800cce8:	f00c ff31 	bl	8019b4e <memcpy>
 800ccec:	f897 3138 	ldrb.w	r3, [r7, #312]	@ 0x138
 800ccf0:	2b00      	cmp	r3, #0
 800ccf2:	d009      	beq.n	800cd08 <tx_dhcp+0xbc>
 800ccf4:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 800ccf8:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 800ccfc:	f507 7290 	add.w	r2, r7, #288	@ 0x120
 800cd00:	f5a2 728e 	sub.w	r2, r2, #284	@ 0x11c
 800cd04:	6812      	ldr	r2, [r2, #0]
 800cd06:	60da      	str	r2, [r3, #12]
 800cd08:	2044      	movs	r0, #68	@ 0x44
 800cd0a:	f003 fd4d 	bl	80107a8 <mg_ntohs>
 800cd0e:	4603      	mov	r3, r0
 800cd10:	461d      	mov	r5, r3
 800cd12:	2043      	movs	r0, #67	@ 0x43
 800cd14:	f003 fd48 	bl	80107a8 <mg_ntohs>
 800cd18:	4603      	mov	r3, r0
 800cd1a:	461c      	mov	r4, r3
 800cd1c:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 800cd20:	f5a3 728e 	sub.w	r2, r3, #284	@ 0x11c
 800cd24:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 800cd28:	f5a3 718c 	sub.w	r1, r3, #280	@ 0x118
 800cd2c:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 800cd30:	f5a3 708a 	sub.w	r0, r3, #276	@ 0x114
 800cd34:	f44f 7388 	mov.w	r3, #272	@ 0x110
 800cd38:	9303      	str	r3, [sp, #12]
 800cd3a:	f107 0310 	add.w	r3, r7, #16
 800cd3e:	9302      	str	r3, [sp, #8]
 800cd40:	9401      	str	r4, [sp, #4]
 800cd42:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 800cd46:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 800cd4a:	681b      	ldr	r3, [r3, #0]
 800cd4c:	9300      	str	r3, [sp, #0]
 800cd4e:	462b      	mov	r3, r5
 800cd50:	6812      	ldr	r2, [r2, #0]
 800cd52:	6809      	ldr	r1, [r1, #0]
 800cd54:	6800      	ldr	r0, [r0, #0]
 800cd56:	f7ff ff0f 	bl	800cb78 <tx_udp>
 800cd5a:	bf00      	nop
 800cd5c:	f507 7790 	add.w	r7, r7, #288	@ 0x120
 800cd60:	46bd      	mov	sp, r7
 800cd62:	bdb0      	pop	{r4, r5, r7, pc}
 800cd64:	0801b294 	.word	0x0801b294
 800cd68:	63825363 	.word	0x63825363

0800cd6c <tx_dhcp_request_sel>:
 800cd6c:	b5b0      	push	{r4, r5, r7, lr}
 800cd6e:	b090      	sub	sp, #64	@ 0x40
 800cd70:	af04      	add	r7, sp, #16
 800cd72:	60f8      	str	r0, [r7, #12]
 800cd74:	60b9      	str	r1, [r7, #8]
 800cd76:	607a      	str	r2, [r7, #4]
 800cd78:	4b19      	ldr	r3, [pc, #100]	@ (800cde0 <tx_dhcp_request_sel+0x74>)
 800cd7a:	f107 0414 	add.w	r4, r7, #20
 800cd7e:	461d      	mov	r5, r3
 800cd80:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800cd82:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800cd84:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800cd88:	c403      	stmia	r4!, {r0, r1}
 800cd8a:	7022      	strb	r2, [r4, #0]
 800cd8c:	f107 0314 	add.w	r3, r7, #20
 800cd90:	330e      	adds	r3, #14
 800cd92:	687a      	ldr	r2, [r7, #4]
 800cd94:	601a      	str	r2, [r3, #0]
 800cd96:	f107 0314 	add.w	r3, r7, #20
 800cd9a:	3314      	adds	r3, #20
 800cd9c:	68ba      	ldr	r2, [r7, #8]
 800cd9e:	601a      	str	r2, [r3, #0]
 800cda0:	2300      	movs	r3, #0
 800cda2:	9302      	str	r3, [sp, #8]
 800cda4:	2319      	movs	r3, #25
 800cda6:	9301      	str	r3, [sp, #4]
 800cda8:	f107 0314 	add.w	r3, r7, #20
 800cdac:	9300      	str	r3, [sp, #0]
 800cdae:	f04f 33ff 	mov.w	r3, #4294967295
 800cdb2:	2200      	movs	r2, #0
 800cdb4:	490b      	ldr	r1, [pc, #44]	@ (800cde4 <tx_dhcp_request_sel+0x78>)
 800cdb6:	68f8      	ldr	r0, [r7, #12]
 800cdb8:	f7ff ff48 	bl	800cc4c <tx_dhcp>
 800cdbc:	4b0a      	ldr	r3, [pc, #40]	@ (800cde8 <tx_dhcp_request_sel+0x7c>)
 800cdbe:	681b      	ldr	r3, [r3, #0]
 800cdc0:	2b02      	cmp	r3, #2
 800cdc2:	dd09      	ble.n	800cdd8 <tx_dhcp_request_sel+0x6c>
 800cdc4:	4b09      	ldr	r3, [pc, #36]	@ (800cdec <tx_dhcp_request_sel+0x80>)
 800cdc6:	f240 1219 	movw	r2, #281	@ 0x119
 800cdca:	4909      	ldr	r1, [pc, #36]	@ (800cdf0 <tx_dhcp_request_sel+0x84>)
 800cdcc:	2003      	movs	r0, #3
 800cdce:	f7ff fb6d 	bl	800c4ac <mg_log_prefix>
 800cdd2:	4808      	ldr	r0, [pc, #32]	@ (800cdf4 <tx_dhcp_request_sel+0x88>)
 800cdd4:	f7ff fbba 	bl	800c54c <mg_log>
 800cdd8:	bf00      	nop
 800cdda:	3730      	adds	r7, #48	@ 0x30
 800cddc:	46bd      	mov	sp, r7
 800cdde:	bdb0      	pop	{r4, r5, r7, pc}
 800cde0:	0801b3b4 	.word	0x0801b3b4
 800cde4:	0801bfd8 	.word	0x0801bfd8
 800cde8:	24000048 	.word	0x24000048
 800cdec:	0801c018 	.word	0x0801c018
 800cdf0:	0801b22c 	.word	0x0801b22c
 800cdf4:	0801b3a4 	.word	0x0801b3a4

0800cdf8 <tx_dhcp_request_re>:
 800cdf8:	b580      	push	{r7, lr}
 800cdfa:	b08a      	sub	sp, #40	@ 0x28
 800cdfc:	af04      	add	r7, sp, #16
 800cdfe:	60f8      	str	r0, [r7, #12]
 800ce00:	60b9      	str	r1, [r7, #8]
 800ce02:	607a      	str	r2, [r7, #4]
 800ce04:	603b      	str	r3, [r7, #0]
 800ce06:	4b10      	ldr	r3, [pc, #64]	@ (800ce48 <tx_dhcp_request_re+0x50>)
 800ce08:	617b      	str	r3, [r7, #20]
 800ce0a:	2301      	movs	r3, #1
 800ce0c:	9302      	str	r3, [sp, #8]
 800ce0e:	2304      	movs	r3, #4
 800ce10:	9301      	str	r3, [sp, #4]
 800ce12:	f107 0314 	add.w	r3, r7, #20
 800ce16:	9300      	str	r3, [sp, #0]
 800ce18:	683b      	ldr	r3, [r7, #0]
 800ce1a:	687a      	ldr	r2, [r7, #4]
 800ce1c:	68b9      	ldr	r1, [r7, #8]
 800ce1e:	68f8      	ldr	r0, [r7, #12]
 800ce20:	f7ff ff14 	bl	800cc4c <tx_dhcp>
 800ce24:	4b09      	ldr	r3, [pc, #36]	@ (800ce4c <tx_dhcp_request_re+0x54>)
 800ce26:	681b      	ldr	r3, [r3, #0]
 800ce28:	2b02      	cmp	r3, #2
 800ce2a:	dd09      	ble.n	800ce40 <tx_dhcp_request_re+0x48>
 800ce2c:	4b08      	ldr	r3, [pc, #32]	@ (800ce50 <tx_dhcp_request_re+0x58>)
 800ce2e:	f44f 7292 	mov.w	r2, #292	@ 0x124
 800ce32:	4908      	ldr	r1, [pc, #32]	@ (800ce54 <tx_dhcp_request_re+0x5c>)
 800ce34:	2003      	movs	r0, #3
 800ce36:	f7ff fb39 	bl	800c4ac <mg_log_prefix>
 800ce3a:	4807      	ldr	r0, [pc, #28]	@ (800ce58 <tx_dhcp_request_re+0x60>)
 800ce3c:	f7ff fb86 	bl	800c54c <mg_log>
 800ce40:	bf00      	nop
 800ce42:	3718      	adds	r7, #24
 800ce44:	46bd      	mov	sp, r7
 800ce46:	bd80      	pop	{r7, pc}
 800ce48:	ff030135 	.word	0xff030135
 800ce4c:	24000048 	.word	0x24000048
 800ce50:	0801c02c 	.word	0x0801c02c
 800ce54:	0801b22c 	.word	0x0801b22c
 800ce58:	0801b3a4 	.word	0x0801b3a4

0800ce5c <tx_dhcp_discover>:
 800ce5c:	b580      	push	{r7, lr}
 800ce5e:	b088      	sub	sp, #32
 800ce60:	af04      	add	r7, sp, #16
 800ce62:	6078      	str	r0, [r7, #4]
 800ce64:	4a14      	ldr	r2, [pc, #80]	@ (800ceb8 <tx_dhcp_discover+0x5c>)
 800ce66:	f107 0308 	add.w	r3, r7, #8
 800ce6a:	e892 0003 	ldmia.w	r2, {r0, r1}
 800ce6e:	e883 0003 	stmia.w	r3, {r0, r1}
 800ce72:	2300      	movs	r3, #0
 800ce74:	9302      	str	r3, [sp, #8]
 800ce76:	2308      	movs	r3, #8
 800ce78:	9301      	str	r3, [sp, #4]
 800ce7a:	f107 0308 	add.w	r3, r7, #8
 800ce7e:	9300      	str	r3, [sp, #0]
 800ce80:	f04f 33ff 	mov.w	r3, #4294967295
 800ce84:	2200      	movs	r2, #0
 800ce86:	490d      	ldr	r1, [pc, #52]	@ (800cebc <tx_dhcp_discover+0x60>)
 800ce88:	6878      	ldr	r0, [r7, #4]
 800ce8a:	f7ff fedf 	bl	800cc4c <tx_dhcp>
 800ce8e:	4b0c      	ldr	r3, [pc, #48]	@ (800cec0 <tx_dhcp_discover+0x64>)
 800ce90:	681b      	ldr	r3, [r3, #0]
 800ce92:	2b02      	cmp	r3, #2
 800ce94:	dd0c      	ble.n	800ceb0 <tx_dhcp_discover+0x54>
 800ce96:	4b0b      	ldr	r3, [pc, #44]	@ (800cec4 <tx_dhcp_discover+0x68>)
 800ce98:	f44f 7297 	mov.w	r2, #302	@ 0x12e
 800ce9c:	490a      	ldr	r1, [pc, #40]	@ (800cec8 <tx_dhcp_discover+0x6c>)
 800ce9e:	2003      	movs	r0, #3
 800cea0:	f7ff fb04 	bl	800c4ac <mg_log_prefix>
 800cea4:	687b      	ldr	r3, [r7, #4]
 800cea6:	461a      	mov	r2, r3
 800cea8:	4908      	ldr	r1, [pc, #32]	@ (800cecc <tx_dhcp_discover+0x70>)
 800ceaa:	4809      	ldr	r0, [pc, #36]	@ (800ced0 <tx_dhcp_discover+0x74>)
 800ceac:	f7ff fb4e 	bl	800c54c <mg_log>
 800ceb0:	bf00      	nop
 800ceb2:	3710      	adds	r7, #16
 800ceb4:	46bd      	mov	sp, r7
 800ceb6:	bd80      	pop	{r7, pc}
 800ceb8:	0801b3f0 	.word	0x0801b3f0
 800cebc:	0801bfd8 	.word	0x0801bfd8
 800cec0:	24000048 	.word	0x24000048
 800cec4:	0801c040 	.word	0x0801c040
 800cec8:	0801b22c 	.word	0x0801b22c
 800cecc:	0800fbe1 	.word	0x0800fbe1
 800ced0:	0801b3d0 	.word	0x0801b3d0

0800ced4 <getpeer>:
 800ced4:	b580      	push	{r7, lr}
 800ced6:	b086      	sub	sp, #24
 800ced8:	af00      	add	r7, sp, #0
 800ceda:	60f8      	str	r0, [r7, #12]
 800cedc:	60b9      	str	r1, [r7, #8]
 800cede:	4613      	mov	r3, r2
 800cee0:	71fb      	strb	r3, [r7, #7]
 800cee2:	2300      	movs	r3, #0
 800cee4:	617b      	str	r3, [r7, #20]
 800cee6:	68fb      	ldr	r3, [r7, #12]
 800cee8:	681b      	ldr	r3, [r3, #0]
 800ceea:	617b      	str	r3, [r7, #20]
 800ceec:	e057      	b.n	800cf9e <getpeer+0xca>
 800ceee:	697b      	ldr	r3, [r7, #20]
 800cef0:	f893 30ac 	ldrb.w	r3, [r3, #172]	@ 0xac
 800cef4:	f003 0310 	and.w	r3, r3, #16
 800cef8:	b2db      	uxtb	r3, r3
 800cefa:	2b00      	cmp	r3, #0
 800cefc:	d010      	beq.n	800cf20 <getpeer+0x4c>
 800cefe:	68bb      	ldr	r3, [r7, #8]
 800cf00:	699b      	ldr	r3, [r3, #24]
 800cf02:	2b00      	cmp	r3, #0
 800cf04:	d00c      	beq.n	800cf20 <getpeer+0x4c>
 800cf06:	68bb      	ldr	r3, [r7, #8]
 800cf08:	699b      	ldr	r3, [r3, #24]
 800cf0a:	f103 000e 	add.w	r0, r3, #14
 800cf0e:	697b      	ldr	r3, [r7, #20]
 800cf10:	331c      	adds	r3, #28
 800cf12:	2204      	movs	r2, #4
 800cf14:	4619      	mov	r1, r3
 800cf16:	f00c fd2f 	bl	8019978 <memcmp>
 800cf1a:	4603      	mov	r3, r0
 800cf1c:	2b00      	cmp	r3, #0
 800cf1e:	d042      	beq.n	800cfa6 <getpeer+0xd2>
 800cf20:	697b      	ldr	r3, [r7, #20]
 800cf22:	f893 30ad 	ldrb.w	r3, [r3, #173]	@ 0xad
 800cf26:	f003 0301 	and.w	r3, r3, #1
 800cf2a:	b2db      	uxtb	r3, r3
 800cf2c:	2b00      	cmp	r3, #0
 800cf2e:	d00b      	beq.n	800cf48 <getpeer+0x74>
 800cf30:	68bb      	ldr	r3, [r7, #8]
 800cf32:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800cf34:	2b00      	cmp	r3, #0
 800cf36:	d007      	beq.n	800cf48 <getpeer+0x74>
 800cf38:	697b      	ldr	r3, [r7, #20]
 800cf3a:	8b1a      	ldrh	r2, [r3, #24]
 800cf3c:	68bb      	ldr	r3, [r7, #8]
 800cf3e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800cf40:	885b      	ldrh	r3, [r3, #2]
 800cf42:	b29b      	uxth	r3, r3
 800cf44:	429a      	cmp	r2, r3
 800cf46:	d030      	beq.n	800cfaa <getpeer+0xd6>
 800cf48:	697b      	ldr	r3, [r7, #20]
 800cf4a:	f893 30ad 	ldrb.w	r3, [r3, #173]	@ 0xad
 800cf4e:	f003 0301 	and.w	r3, r3, #1
 800cf52:	b2db      	uxtb	r3, r3
 800cf54:	2b00      	cmp	r3, #0
 800cf56:	d11f      	bne.n	800cf98 <getpeer+0xc4>
 800cf58:	68bb      	ldr	r3, [r7, #8]
 800cf5a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800cf5c:	2b00      	cmp	r3, #0
 800cf5e:	d01b      	beq.n	800cf98 <getpeer+0xc4>
 800cf60:	697b      	ldr	r3, [r7, #20]
 800cf62:	8b1a      	ldrh	r2, [r3, #24]
 800cf64:	68bb      	ldr	r3, [r7, #8]
 800cf66:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800cf68:	885b      	ldrh	r3, [r3, #2]
 800cf6a:	b29b      	uxth	r3, r3
 800cf6c:	429a      	cmp	r2, r3
 800cf6e:	d113      	bne.n	800cf98 <getpeer+0xc4>
 800cf70:	697b      	ldr	r3, [r7, #20]
 800cf72:	f893 30ac 	ldrb.w	r3, [r3, #172]	@ 0xac
 800cf76:	f3c3 0300 	ubfx	r3, r3, #0, #1
 800cf7a:	b2db      	uxtb	r3, r3
 800cf7c:	79fa      	ldrb	r2, [r7, #7]
 800cf7e:	429a      	cmp	r2, r3
 800cf80:	d10a      	bne.n	800cf98 <getpeer+0xc4>
 800cf82:	79fb      	ldrb	r3, [r7, #7]
 800cf84:	2b00      	cmp	r3, #0
 800cf86:	d111      	bne.n	800cfac <getpeer+0xd8>
 800cf88:	697b      	ldr	r3, [r7, #20]
 800cf8a:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 800cf8c:	68bb      	ldr	r3, [r7, #8]
 800cf8e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800cf90:	881b      	ldrh	r3, [r3, #0]
 800cf92:	b29b      	uxth	r3, r3
 800cf94:	429a      	cmp	r2, r3
 800cf96:	d009      	beq.n	800cfac <getpeer+0xd8>
 800cf98:	697b      	ldr	r3, [r7, #20]
 800cf9a:	681b      	ldr	r3, [r3, #0]
 800cf9c:	617b      	str	r3, [r7, #20]
 800cf9e:	697b      	ldr	r3, [r7, #20]
 800cfa0:	2b00      	cmp	r3, #0
 800cfa2:	d1a4      	bne.n	800ceee <getpeer+0x1a>
 800cfa4:	e002      	b.n	800cfac <getpeer+0xd8>
 800cfa6:	bf00      	nop
 800cfa8:	e000      	b.n	800cfac <getpeer+0xd8>
 800cfaa:	bf00      	nop
 800cfac:	697b      	ldr	r3, [r7, #20]
 800cfae:	4618      	mov	r0, r3
 800cfb0:	3718      	adds	r7, #24
 800cfb2:	46bd      	mov	sp, r7
 800cfb4:	bd80      	pop	{r7, pc}
	...

0800cfb8 <rx_arp>:
 800cfb8:	b5b0      	push	{r4, r5, r7, lr}
 800cfba:	b088      	sub	sp, #32
 800cfbc:	af02      	add	r7, sp, #8
 800cfbe:	6078      	str	r0, [r7, #4]
 800cfc0:	6039      	str	r1, [r7, #0]
 800cfc2:	683b      	ldr	r3, [r7, #0]
 800cfc4:	699b      	ldr	r3, [r3, #24]
 800cfc6:	88db      	ldrh	r3, [r3, #6]
 800cfc8:	b29c      	uxth	r4, r3
 800cfca:	2001      	movs	r0, #1
 800cfcc:	f003 fbec 	bl	80107a8 <mg_ntohs>
 800cfd0:	4603      	mov	r3, r0
 800cfd2:	429c      	cmp	r4, r3
 800cfd4:	d176      	bne.n	800d0c4 <rx_arp+0x10c>
 800cfd6:	683b      	ldr	r3, [r7, #0]
 800cfd8:	699b      	ldr	r3, [r3, #24]
 800cfda:	699a      	ldr	r2, [r3, #24]
 800cfdc:	687b      	ldr	r3, [r7, #4]
 800cfde:	689b      	ldr	r3, [r3, #8]
 800cfe0:	429a      	cmp	r2, r3
 800cfe2:	d16f      	bne.n	800d0c4 <rx_arp+0x10c>
 800cfe4:	687b      	ldr	r3, [r7, #4]
 800cfe6:	695b      	ldr	r3, [r3, #20]
 800cfe8:	617b      	str	r3, [r7, #20]
 800cfea:	697b      	ldr	r3, [r7, #20]
 800cfec:	330e      	adds	r3, #14
 800cfee:	613b      	str	r3, [r7, #16]
 800cff0:	6978      	ldr	r0, [r7, #20]
 800cff2:	683b      	ldr	r3, [r7, #0]
 800cff4:	691b      	ldr	r3, [r3, #16]
 800cff6:	3306      	adds	r3, #6
 800cff8:	2206      	movs	r2, #6
 800cffa:	4619      	mov	r1, r3
 800cffc:	f00c fda7 	bl	8019b4e <memcpy>
 800d000:	697b      	ldr	r3, [r7, #20]
 800d002:	3306      	adds	r3, #6
 800d004:	6879      	ldr	r1, [r7, #4]
 800d006:	2206      	movs	r2, #6
 800d008:	4618      	mov	r0, r3
 800d00a:	f00c fda0 	bl	8019b4e <memcpy>
 800d00e:	f640 0006 	movw	r0, #2054	@ 0x806
 800d012:	f003 fbc9 	bl	80107a8 <mg_ntohs>
 800d016:	4603      	mov	r3, r0
 800d018:	461a      	mov	r2, r3
 800d01a:	697b      	ldr	r3, [r7, #20]
 800d01c:	819a      	strh	r2, [r3, #12]
 800d01e:	683b      	ldr	r3, [r7, #0]
 800d020:	699a      	ldr	r2, [r3, #24]
 800d022:	693b      	ldr	r3, [r7, #16]
 800d024:	6814      	ldr	r4, [r2, #0]
 800d026:	6850      	ldr	r0, [r2, #4]
 800d028:	6891      	ldr	r1, [r2, #8]
 800d02a:	68d5      	ldr	r5, [r2, #12]
 800d02c:	601c      	str	r4, [r3, #0]
 800d02e:	6058      	str	r0, [r3, #4]
 800d030:	6099      	str	r1, [r3, #8]
 800d032:	60dd      	str	r5, [r3, #12]
 800d034:	6914      	ldr	r4, [r2, #16]
 800d036:	6950      	ldr	r0, [r2, #20]
 800d038:	6991      	ldr	r1, [r2, #24]
 800d03a:	611c      	str	r4, [r3, #16]
 800d03c:	6158      	str	r0, [r3, #20]
 800d03e:	6199      	str	r1, [r3, #24]
 800d040:	2002      	movs	r0, #2
 800d042:	f003 fbb1 	bl	80107a8 <mg_ntohs>
 800d046:	4603      	mov	r3, r0
 800d048:	461a      	mov	r2, r3
 800d04a:	693b      	ldr	r3, [r7, #16]
 800d04c:	80da      	strh	r2, [r3, #6]
 800d04e:	693b      	ldr	r3, [r7, #16]
 800d050:	f103 0012 	add.w	r0, r3, #18
 800d054:	683b      	ldr	r3, [r7, #0]
 800d056:	699b      	ldr	r3, [r3, #24]
 800d058:	3308      	adds	r3, #8
 800d05a:	2206      	movs	r2, #6
 800d05c:	4619      	mov	r1, r3
 800d05e:	f00c fd76 	bl	8019b4e <memcpy>
 800d062:	693b      	ldr	r3, [r7, #16]
 800d064:	3308      	adds	r3, #8
 800d066:	6879      	ldr	r1, [r7, #4]
 800d068:	2206      	movs	r2, #6
 800d06a:	4618      	mov	r0, r3
 800d06c:	f00c fd6f 	bl	8019b4e <memcpy>
 800d070:	683b      	ldr	r3, [r7, #0]
 800d072:	699b      	ldr	r3, [r3, #24]
 800d074:	f8d3 200e 	ldr.w	r2, [r3, #14]
 800d078:	693b      	ldr	r3, [r7, #16]
 800d07a:	619a      	str	r2, [r3, #24]
 800d07c:	687b      	ldr	r3, [r7, #4]
 800d07e:	689a      	ldr	r2, [r3, #8]
 800d080:	693b      	ldr	r3, [r7, #16]
 800d082:	f8c3 200e 	str.w	r2, [r3, #14]
 800d086:	4b4a      	ldr	r3, [pc, #296]	@ (800d1b0 <rx_arp+0x1f8>)
 800d088:	681b      	ldr	r3, [r3, #0]
 800d08a:	2b02      	cmp	r3, #2
 800d08c:	dd10      	ble.n	800d0b0 <rx_arp+0xf8>
 800d08e:	4b49      	ldr	r3, [pc, #292]	@ (800d1b4 <rx_arp+0x1fc>)
 800d090:	f44f 72a8 	mov.w	r2, #336	@ 0x150
 800d094:	4948      	ldr	r1, [pc, #288]	@ (800d1b8 <rx_arp+0x200>)
 800d096:	2003      	movs	r0, #3
 800d098:	f7ff fa08 	bl	800c4ac <mg_log_prefix>
 800d09c:	693b      	ldr	r3, [r7, #16]
 800d09e:	f103 0218 	add.w	r2, r3, #24
 800d0a2:	687b      	ldr	r3, [r7, #4]
 800d0a4:	9300      	str	r3, [sp, #0]
 800d0a6:	4b45      	ldr	r3, [pc, #276]	@ (800d1bc <rx_arp+0x204>)
 800d0a8:	4945      	ldr	r1, [pc, #276]	@ (800d1c0 <rx_arp+0x208>)
 800d0aa:	4846      	ldr	r0, [pc, #280]	@ (800d1c4 <rx_arp+0x20c>)
 800d0ac:	f7ff fa4e 	bl	800c54c <mg_log>
 800d0b0:	693b      	ldr	r3, [r7, #16]
 800d0b2:	f103 021c 	add.w	r2, r3, #28
 800d0b6:	697b      	ldr	r3, [r7, #20]
 800d0b8:	1ad3      	subs	r3, r2, r3
 800d0ba:	4619      	mov	r1, r3
 800d0bc:	6878      	ldr	r0, [r7, #4]
 800d0be:	f7ff fc03 	bl	800c8c8 <ether_output>
 800d0c2:	e071      	b.n	800d1a8 <rx_arp+0x1f0>
 800d0c4:	683b      	ldr	r3, [r7, #0]
 800d0c6:	699b      	ldr	r3, [r3, #24]
 800d0c8:	88db      	ldrh	r3, [r3, #6]
 800d0ca:	b29c      	uxth	r4, r3
 800d0cc:	2002      	movs	r0, #2
 800d0ce:	f003 fb6b 	bl	80107a8 <mg_ntohs>
 800d0d2:	4603      	mov	r3, r0
 800d0d4:	429c      	cmp	r4, r3
 800d0d6:	d167      	bne.n	800d1a8 <rx_arp+0x1f0>
 800d0d8:	683b      	ldr	r3, [r7, #0]
 800d0da:	699b      	ldr	r3, [r3, #24]
 800d0dc:	3312      	adds	r3, #18
 800d0de:	6879      	ldr	r1, [r7, #4]
 800d0e0:	2206      	movs	r2, #6
 800d0e2:	4618      	mov	r0, r3
 800d0e4:	f00c fc48 	bl	8019978 <memcmp>
 800d0e8:	4603      	mov	r3, r0
 800d0ea:	2b00      	cmp	r3, #0
 800d0ec:	d15b      	bne.n	800d1a6 <rx_arp+0x1ee>
 800d0ee:	683b      	ldr	r3, [r7, #0]
 800d0f0:	699b      	ldr	r3, [r3, #24]
 800d0f2:	f8d3 200e 	ldr.w	r2, [r3, #14]
 800d0f6:	687b      	ldr	r3, [r7, #4]
 800d0f8:	691b      	ldr	r3, [r3, #16]
 800d0fa:	429a      	cmp	r2, r3
 800d0fc:	d10a      	bne.n	800d114 <rx_arp+0x15c>
 800d0fe:	687b      	ldr	r3, [r7, #4]
 800d100:	f103 0042 	add.w	r0, r3, #66	@ 0x42
 800d104:	683b      	ldr	r3, [r7, #0]
 800d106:	699b      	ldr	r3, [r3, #24]
 800d108:	3308      	adds	r3, #8
 800d10a:	2206      	movs	r2, #6
 800d10c:	4619      	mov	r1, r3
 800d10e:	f00c fd1e 	bl	8019b4e <memcpy>
 800d112:	e049      	b.n	800d1a8 <rx_arp+0x1f0>
 800d114:	687b      	ldr	r3, [r7, #4]
 800d116:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d118:	2200      	movs	r2, #0
 800d11a:	6839      	ldr	r1, [r7, #0]
 800d11c:	4618      	mov	r0, r3
 800d11e:	f7ff fed9 	bl	800ced4 <getpeer>
 800d122:	60f8      	str	r0, [r7, #12]
 800d124:	68fb      	ldr	r3, [r7, #12]
 800d126:	2b00      	cmp	r3, #0
 800d128:	d03e      	beq.n	800d1a8 <rx_arp+0x1f0>
 800d12a:	68fb      	ldr	r3, [r7, #12]
 800d12c:	f893 30ac 	ldrb.w	r3, [r3, #172]	@ 0xac
 800d130:	f003 0310 	and.w	r3, r3, #16
 800d134:	b2db      	uxtb	r3, r3
 800d136:	2b00      	cmp	r3, #0
 800d138:	d036      	beq.n	800d1a8 <rx_arp+0x1f0>
 800d13a:	68fb      	ldr	r3, [r7, #12]
 800d13c:	33b0      	adds	r3, #176	@ 0xb0
 800d13e:	60bb      	str	r3, [r7, #8]
 800d140:	68bb      	ldr	r3, [r7, #8]
 800d142:	f103 0010 	add.w	r0, r3, #16
 800d146:	683b      	ldr	r3, [r7, #0]
 800d148:	699b      	ldr	r3, [r3, #24]
 800d14a:	3308      	adds	r3, #8
 800d14c:	2206      	movs	r2, #6
 800d14e:	4619      	mov	r1, r3
 800d150:	f00c fcfd 	bl	8019b4e <memcpy>
 800d154:	4b16      	ldr	r3, [pc, #88]	@ (800d1b0 <rx_arp+0x1f8>)
 800d156:	681b      	ldr	r3, [r3, #0]
 800d158:	2b02      	cmp	r3, #2
 800d15a:	dd15      	ble.n	800d188 <rx_arp+0x1d0>
 800d15c:	4b15      	ldr	r3, [pc, #84]	@ (800d1b4 <rx_arp+0x1fc>)
 800d15e:	f240 125d 	movw	r2, #349	@ 0x15d
 800d162:	4915      	ldr	r1, [pc, #84]	@ (800d1b8 <rx_arp+0x200>)
 800d164:	2003      	movs	r0, #3
 800d166:	f7ff f9a1 	bl	800c4ac <mg_log_prefix>
 800d16a:	68fb      	ldr	r3, [r7, #12]
 800d16c:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 800d16e:	68fb      	ldr	r3, [r7, #12]
 800d170:	f103 021c 	add.w	r2, r3, #28
 800d174:	68bb      	ldr	r3, [r7, #8]
 800d176:	3310      	adds	r3, #16
 800d178:	9301      	str	r3, [sp, #4]
 800d17a:	4b10      	ldr	r3, [pc, #64]	@ (800d1bc <rx_arp+0x204>)
 800d17c:	9300      	str	r3, [sp, #0]
 800d17e:	4613      	mov	r3, r2
 800d180:	4a0f      	ldr	r2, [pc, #60]	@ (800d1c0 <rx_arp+0x208>)
 800d182:	4811      	ldr	r0, [pc, #68]	@ (800d1c8 <rx_arp+0x210>)
 800d184:	f7ff f9e2 	bl	800c54c <mg_log>
 800d188:	68fa      	ldr	r2, [r7, #12]
 800d18a:	f892 30ac 	ldrb.w	r3, [r2, #172]	@ 0xac
 800d18e:	f36f 1304 	bfc	r3, #4, #1
 800d192:	f882 30ac 	strb.w	r3, [r2, #172]	@ 0xac
 800d196:	68f8      	ldr	r0, [r7, #12]
 800d198:	f001 fff4 	bl	800f184 <send_syn>
 800d19c:	2103      	movs	r1, #3
 800d19e:	68f8      	ldr	r0, [r7, #12]
 800d1a0:	f7ff fb36 	bl	800c810 <settmout>
 800d1a4:	e000      	b.n	800d1a8 <rx_arp+0x1f0>
 800d1a6:	bf00      	nop
 800d1a8:	3718      	adds	r7, #24
 800d1aa:	46bd      	mov	sp, r7
 800d1ac:	bdb0      	pop	{r4, r5, r7, pc}
 800d1ae:	bf00      	nop
 800d1b0:	24000048 	.word	0x24000048
 800d1b4:	0801c054 	.word	0x0801c054
 800d1b8:	0801b22c 	.word	0x0801b22c
 800d1bc:	0800fbe1 	.word	0x0800fbe1
 800d1c0:	0800fb1d 	.word	0x0800fb1d
 800d1c4:	0801b3f8 	.word	0x0801b3f8
 800d1c8:	0801b410 	.word	0x0801b410

0800d1cc <rx_icmp>:
 800d1cc:	b580      	push	{r7, lr}
 800d1ce:	b08a      	sub	sp, #40	@ 0x28
 800d1d0:	af02      	add	r7, sp, #8
 800d1d2:	6078      	str	r0, [r7, #4]
 800d1d4:	6039      	str	r1, [r7, #0]
 800d1d6:	683b      	ldr	r3, [r7, #0]
 800d1d8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d1da:	781b      	ldrb	r3, [r3, #0]
 800d1dc:	2b08      	cmp	r3, #8
 800d1de:	d14d      	bne.n	800d27c <rx_icmp+0xb0>
 800d1e0:	683b      	ldr	r3, [r7, #0]
 800d1e2:	69db      	ldr	r3, [r3, #28]
 800d1e4:	2b00      	cmp	r3, #0
 800d1e6:	d049      	beq.n	800d27c <rx_icmp+0xb0>
 800d1e8:	683b      	ldr	r3, [r7, #0]
 800d1ea:	69db      	ldr	r3, [r3, #28]
 800d1ec:	691a      	ldr	r2, [r3, #16]
 800d1ee:	687b      	ldr	r3, [r7, #4]
 800d1f0:	689b      	ldr	r3, [r3, #8]
 800d1f2:	429a      	cmp	r2, r3
 800d1f4:	d142      	bne.n	800d27c <rx_icmp+0xb0>
 800d1f6:	2326      	movs	r3, #38	@ 0x26
 800d1f8:	61bb      	str	r3, [r7, #24]
 800d1fa:	687b      	ldr	r3, [r7, #4]
 800d1fc:	699a      	ldr	r2, [r3, #24]
 800d1fe:	69bb      	ldr	r3, [r7, #24]
 800d200:	1ad3      	subs	r3, r2, r3
 800d202:	617b      	str	r3, [r7, #20]
 800d204:	683b      	ldr	r3, [r7, #0]
 800d206:	68db      	ldr	r3, [r3, #12]
 800d208:	61fb      	str	r3, [r7, #28]
 800d20a:	69fa      	ldr	r2, [r7, #28]
 800d20c:	697b      	ldr	r3, [r7, #20]
 800d20e:	429a      	cmp	r2, r3
 800d210:	d901      	bls.n	800d216 <rx_icmp+0x4a>
 800d212:	697b      	ldr	r3, [r7, #20]
 800d214:	61fb      	str	r3, [r7, #28]
 800d216:	683b      	ldr	r3, [r7, #0]
 800d218:	691b      	ldr	r3, [r3, #16]
 800d21a:	1d99      	adds	r1, r3, #6
 800d21c:	687b      	ldr	r3, [r7, #4]
 800d21e:	6898      	ldr	r0, [r3, #8]
 800d220:	683b      	ldr	r3, [r7, #0]
 800d222:	69db      	ldr	r3, [r3, #28]
 800d224:	68db      	ldr	r3, [r3, #12]
 800d226:	69fa      	ldr	r2, [r7, #28]
 800d228:	3204      	adds	r2, #4
 800d22a:	9201      	str	r2, [sp, #4]
 800d22c:	9300      	str	r3, [sp, #0]
 800d22e:	4603      	mov	r3, r0
 800d230:	2201      	movs	r2, #1
 800d232:	6878      	ldr	r0, [r7, #4]
 800d234:	f7ff fc4a 	bl	800cacc <tx_ip>
 800d238:	6138      	str	r0, [r7, #16]
 800d23a:	693b      	ldr	r3, [r7, #16]
 800d23c:	3314      	adds	r3, #20
 800d23e:	60fb      	str	r3, [r7, #12]
 800d240:	2204      	movs	r2, #4
 800d242:	2100      	movs	r1, #0
 800d244:	68f8      	ldr	r0, [r7, #12]
 800d246:	f00c fbc1 	bl	80199cc <memset>
 800d24a:	68fb      	ldr	r3, [r7, #12]
 800d24c:	1d18      	adds	r0, r3, #4
 800d24e:	683b      	ldr	r3, [r7, #0]
 800d250:	689b      	ldr	r3, [r3, #8]
 800d252:	69fa      	ldr	r2, [r7, #28]
 800d254:	4619      	mov	r1, r3
 800d256:	f00c fc7a 	bl	8019b4e <memcpy>
 800d25a:	69fb      	ldr	r3, [r7, #28]
 800d25c:	3304      	adds	r3, #4
 800d25e:	4619      	mov	r1, r3
 800d260:	68f8      	ldr	r0, [r7, #12]
 800d262:	f7ff fac1 	bl	800c7e8 <ipcsum>
 800d266:	4603      	mov	r3, r0
 800d268:	461a      	mov	r2, r3
 800d26a:	68fb      	ldr	r3, [r7, #12]
 800d26c:	805a      	strh	r2, [r3, #2]
 800d26e:	69ba      	ldr	r2, [r7, #24]
 800d270:	69fb      	ldr	r3, [r7, #28]
 800d272:	4413      	add	r3, r2
 800d274:	4619      	mov	r1, r3
 800d276:	6878      	ldr	r0, [r7, #4]
 800d278:	f7ff fb26 	bl	800c8c8 <ether_output>
 800d27c:	bf00      	nop
 800d27e:	3720      	adds	r7, #32
 800d280:	46bd      	mov	sp, r7
 800d282:	bd80      	pop	{r7, pc}

0800d284 <rx_dhcp_client>:
 800d284:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800d288:	b08e      	sub	sp, #56	@ 0x38
 800d28a:	af00      	add	r7, sp, #0
 800d28c:	60f8      	str	r0, [r7, #12]
 800d28e:	60b9      	str	r1, [r7, #8]
 800d290:	2300      	movs	r3, #0
 800d292:	637b      	str	r3, [r7, #52]	@ 0x34
 800d294:	2300      	movs	r3, #0
 800d296:	623b      	str	r3, [r7, #32]
 800d298:	2300      	movs	r3, #0
 800d29a:	61fb      	str	r3, [r7, #28]
 800d29c:	2300      	movs	r3, #0
 800d29e:	61bb      	str	r3, [r7, #24]
 800d2a0:	2300      	movs	r3, #0
 800d2a2:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
 800d2a6:	68fb      	ldr	r3, [r7, #12]
 800d2a8:	f893 3074 	ldrb.w	r3, [r3, #116]	@ 0x74
 800d2ac:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800d2b0:	68bb      	ldr	r3, [r7, #8]
 800d2b2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800d2b4:	33f0      	adds	r3, #240	@ 0xf0
 800d2b6:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800d2b8:	68bb      	ldr	r3, [r7, #8]
 800d2ba:	681a      	ldr	r2, [r3, #0]
 800d2bc:	68bb      	ldr	r3, [r7, #8]
 800d2be:	685b      	ldr	r3, [r3, #4]
 800d2c0:	4413      	add	r3, r2
 800d2c2:	627b      	str	r3, [r7, #36]	@ 0x24
 800d2c4:	68bb      	ldr	r3, [r7, #8]
 800d2c6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800d2c8:	f503 7388 	add.w	r3, r3, #272	@ 0x110
 800d2cc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800d2ce:	429a      	cmp	r2, r3
 800d2d0:	f0c0 815c 	bcc.w	800d58c <rx_dhcp_client+0x308>
 800d2d4:	68bb      	ldr	r3, [r7, #8]
 800d2d6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800d2d8:	1d18      	adds	r0, r3, #4
 800d2da:	68fb      	ldr	r3, [r7, #12]
 800d2dc:	3302      	adds	r3, #2
 800d2de:	2204      	movs	r2, #4
 800d2e0:	4619      	mov	r1, r3
 800d2e2:	f00c fb49 	bl	8019978 <memcmp>
 800d2e6:	4603      	mov	r3, r0
 800d2e8:	2b00      	cmp	r3, #0
 800d2ea:	f040 8151 	bne.w	800d590 <rx_dhcp_client+0x30c>
 800d2ee:	e05b      	b.n	800d3a8 <rx_dhcp_client+0x124>
 800d2f0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d2f2:	781b      	ldrb	r3, [r3, #0]
 800d2f4:	2b01      	cmp	r3, #1
 800d2f6:	d10e      	bne.n	800d316 <rx_dhcp_client+0x92>
 800d2f8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d2fa:	3301      	adds	r3, #1
 800d2fc:	781b      	ldrb	r3, [r3, #0]
 800d2fe:	2b04      	cmp	r3, #4
 800d300:	d109      	bne.n	800d316 <rx_dhcp_client+0x92>
 800d302:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d304:	3306      	adds	r3, #6
 800d306:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800d308:	429a      	cmp	r2, r3
 800d30a:	d904      	bls.n	800d316 <rx_dhcp_client+0x92>
 800d30c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d30e:	3302      	adds	r3, #2
 800d310:	681b      	ldr	r3, [r3, #0]
 800d312:	61fb      	str	r3, [r7, #28]
 800d314:	e041      	b.n	800d39a <rx_dhcp_client+0x116>
 800d316:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d318:	781b      	ldrb	r3, [r3, #0]
 800d31a:	2b03      	cmp	r3, #3
 800d31c:	d112      	bne.n	800d344 <rx_dhcp_client+0xc0>
 800d31e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d320:	3301      	adds	r3, #1
 800d322:	781b      	ldrb	r3, [r3, #0]
 800d324:	2b04      	cmp	r3, #4
 800d326:	d10d      	bne.n	800d344 <rx_dhcp_client+0xc0>
 800d328:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d32a:	3306      	adds	r3, #6
 800d32c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800d32e:	429a      	cmp	r2, r3
 800d330:	d908      	bls.n	800d344 <rx_dhcp_client+0xc0>
 800d332:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d334:	3302      	adds	r3, #2
 800d336:	681b      	ldr	r3, [r3, #0]
 800d338:	623b      	str	r3, [r7, #32]
 800d33a:	68bb      	ldr	r3, [r7, #8]
 800d33c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800d33e:	691b      	ldr	r3, [r3, #16]
 800d340:	637b      	str	r3, [r7, #52]	@ 0x34
 800d342:	e02a      	b.n	800d39a <rx_dhcp_client+0x116>
 800d344:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d346:	781b      	ldrb	r3, [r3, #0]
 800d348:	2b33      	cmp	r3, #51	@ 0x33
 800d34a:	d114      	bne.n	800d376 <rx_dhcp_client+0xf2>
 800d34c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d34e:	3301      	adds	r3, #1
 800d350:	781b      	ldrb	r3, [r3, #0]
 800d352:	2b04      	cmp	r3, #4
 800d354:	d10f      	bne.n	800d376 <rx_dhcp_client+0xf2>
 800d356:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d358:	3306      	adds	r3, #6
 800d35a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800d35c:	429a      	cmp	r2, r3
 800d35e:	d90a      	bls.n	800d376 <rx_dhcp_client+0xf2>
 800d360:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d362:	3302      	adds	r3, #2
 800d364:	681b      	ldr	r3, [r3, #0]
 800d366:	61bb      	str	r3, [r7, #24]
 800d368:	69bb      	ldr	r3, [r7, #24]
 800d36a:	4618      	mov	r0, r3
 800d36c:	f003 fa03 	bl	8010776 <mg_ntohl>
 800d370:	4603      	mov	r3, r0
 800d372:	61bb      	str	r3, [r7, #24]
 800d374:	e011      	b.n	800d39a <rx_dhcp_client+0x116>
 800d376:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d378:	781b      	ldrb	r3, [r3, #0]
 800d37a:	2b35      	cmp	r3, #53	@ 0x35
 800d37c:	d10d      	bne.n	800d39a <rx_dhcp_client+0x116>
 800d37e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d380:	3301      	adds	r3, #1
 800d382:	781b      	ldrb	r3, [r3, #0]
 800d384:	2b01      	cmp	r3, #1
 800d386:	d108      	bne.n	800d39a <rx_dhcp_client+0x116>
 800d388:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d38a:	3306      	adds	r3, #6
 800d38c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800d38e:	429a      	cmp	r2, r3
 800d390:	d903      	bls.n	800d39a <rx_dhcp_client+0x116>
 800d392:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d394:	789b      	ldrb	r3, [r3, #2]
 800d396:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
 800d39a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d39c:	3301      	adds	r3, #1
 800d39e:	781b      	ldrb	r3, [r3, #0]
 800d3a0:	3302      	adds	r3, #2
 800d3a2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800d3a4:	4413      	add	r3, r2
 800d3a6:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800d3a8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d3aa:	3301      	adds	r3, #1
 800d3ac:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800d3ae:	429a      	cmp	r2, r3
 800d3b0:	d903      	bls.n	800d3ba <rx_dhcp_client+0x136>
 800d3b2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d3b4:	781b      	ldrb	r3, [r3, #0]
 800d3b6:	2bff      	cmp	r3, #255	@ 0xff
 800d3b8:	d19a      	bne.n	800d2f0 <rx_dhcp_client+0x6c>
 800d3ba:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 800d3be:	2b06      	cmp	r3, #6
 800d3c0:	d10c      	bne.n	800d3dc <rx_dhcp_client+0x158>
 800d3c2:	68fb      	ldr	r3, [r7, #12]
 800d3c4:	689b      	ldr	r3, [r3, #8]
 800d3c6:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800d3c8:	429a      	cmp	r2, r3
 800d3ca:	d107      	bne.n	800d3dc <rx_dhcp_client+0x158>
 800d3cc:	68fb      	ldr	r3, [r7, #12]
 800d3ce:	2201      	movs	r2, #1
 800d3d0:	f883 2074 	strb.w	r2, [r3, #116]	@ 0x74
 800d3d4:	68fb      	ldr	r3, [r7, #12]
 800d3d6:	2200      	movs	r2, #0
 800d3d8:	609a      	str	r2, [r3, #8]
 800d3da:	e0cc      	b.n	800d576 <rx_dhcp_client+0x2f2>
 800d3dc:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 800d3e0:	2b02      	cmp	r3, #2
 800d3e2:	d123      	bne.n	800d42c <rx_dhcp_client+0x1a8>
 800d3e4:	68fb      	ldr	r3, [r7, #12]
 800d3e6:	f893 3074 	ldrb.w	r3, [r3, #116]	@ 0x74
 800d3ea:	2b01      	cmp	r3, #1
 800d3ec:	d11e      	bne.n	800d42c <rx_dhcp_client+0x1a8>
 800d3ee:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d3f0:	2b00      	cmp	r3, #0
 800d3f2:	d01b      	beq.n	800d42c <rx_dhcp_client+0x1a8>
 800d3f4:	6a3b      	ldr	r3, [r7, #32]
 800d3f6:	2b00      	cmp	r3, #0
 800d3f8:	d018      	beq.n	800d42c <rx_dhcp_client+0x1a8>
 800d3fa:	69bb      	ldr	r3, [r7, #24]
 800d3fc:	2b00      	cmp	r3, #0
 800d3fe:	d015      	beq.n	800d42c <rx_dhcp_client+0x1a8>
 800d400:	68bb      	ldr	r3, [r7, #8]
 800d402:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800d404:	695b      	ldr	r3, [r3, #20]
 800d406:	2b00      	cmp	r3, #0
 800d408:	d003      	beq.n	800d412 <rx_dhcp_client+0x18e>
 800d40a:	68bb      	ldr	r3, [r7, #8]
 800d40c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800d40e:	695b      	ldr	r3, [r3, #20]
 800d410:	e002      	b.n	800d418 <rx_dhcp_client+0x194>
 800d412:	68bb      	ldr	r3, [r7, #8]
 800d414:	69db      	ldr	r3, [r3, #28]
 800d416:	68db      	ldr	r3, [r3, #12]
 800d418:	461a      	mov	r2, r3
 800d41a:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 800d41c:	68f8      	ldr	r0, [r7, #12]
 800d41e:	f7ff fca5 	bl	800cd6c <tx_dhcp_request_sel>
 800d422:	68fb      	ldr	r3, [r7, #12]
 800d424:	2202      	movs	r2, #2
 800d426:	f883 2074 	strb.w	r2, [r3, #116]	@ 0x74
 800d42a:	e0a4      	b.n	800d576 <rx_dhcp_client+0x2f2>
 800d42c:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 800d430:	2b05      	cmp	r3, #5
 800d432:	f040 80a0 	bne.w	800d576 <rx_dhcp_client+0x2f2>
 800d436:	68fb      	ldr	r3, [r7, #12]
 800d438:	f893 3074 	ldrb.w	r3, [r3, #116]	@ 0x74
 800d43c:	2b02      	cmp	r3, #2
 800d43e:	d163      	bne.n	800d508 <rx_dhcp_client+0x284>
 800d440:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d442:	2b00      	cmp	r3, #0
 800d444:	d060      	beq.n	800d508 <rx_dhcp_client+0x284>
 800d446:	6a3b      	ldr	r3, [r7, #32]
 800d448:	2b00      	cmp	r3, #0
 800d44a:	d05d      	beq.n	800d508 <rx_dhcp_client+0x284>
 800d44c:	69bb      	ldr	r3, [r7, #24]
 800d44e:	2b00      	cmp	r3, #0
 800d450:	d05a      	beq.n	800d508 <rx_dhcp_client+0x284>
 800d452:	68fb      	ldr	r3, [r7, #12]
 800d454:	e9d3 2312 	ldrd	r2, r3, [r3, #72]	@ 0x48
 800d458:	69b9      	ldr	r1, [r7, #24]
 800d45a:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800d45e:	fb00 f101 	mul.w	r1, r0, r1
 800d462:	2000      	movs	r0, #0
 800d464:	4688      	mov	r8, r1
 800d466:	4681      	mov	r9, r0
 800d468:	eb12 0108 	adds.w	r1, r2, r8
 800d46c:	6039      	str	r1, [r7, #0]
 800d46e:	eb43 0309 	adc.w	r3, r3, r9
 800d472:	607b      	str	r3, [r7, #4]
 800d474:	68fb      	ldr	r3, [r7, #12]
 800d476:	e9d7 1200 	ldrd	r1, r2, [r7]
 800d47a:	e9c3 1216 	strd	r1, r2, [r3, #88]	@ 0x58
 800d47e:	4b47      	ldr	r3, [pc, #284]	@ (800d59c <rx_dhcp_client+0x318>)
 800d480:	681b      	ldr	r3, [r3, #0]
 800d482:	2b01      	cmp	r3, #1
 800d484:	dd16      	ble.n	800d4b4 <rx_dhcp_client+0x230>
 800d486:	4b46      	ldr	r3, [pc, #280]	@ (800d5a0 <rx_dhcp_client+0x31c>)
 800d488:	f44f 72cc 	mov.w	r2, #408	@ 0x198
 800d48c:	4945      	ldr	r1, [pc, #276]	@ (800d5a4 <rx_dhcp_client+0x320>)
 800d48e:	2002      	movs	r0, #2
 800d490:	f7ff f80c 	bl	800c4ac <mg_log_prefix>
 800d494:	69bc      	ldr	r4, [r7, #24]
 800d496:	68fb      	ldr	r3, [r7, #12]
 800d498:	e9d3 0116 	ldrd	r0, r1, [r3, #88]	@ 0x58
 800d49c:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800d4a0:	f04f 0300 	mov.w	r3, #0
 800d4a4:	f7f2 ff74 	bl	8000390 <__aeabi_uldivmod>
 800d4a8:	4602      	mov	r2, r0
 800d4aa:	460b      	mov	r3, r1
 800d4ac:	4621      	mov	r1, r4
 800d4ae:	483e      	ldr	r0, [pc, #248]	@ (800d5a8 <rx_dhcp_client+0x324>)
 800d4b0:	f7ff f84c 	bl	800c54c <mg_log>
 800d4b4:	68fb      	ldr	r3, [r7, #12]
 800d4b6:	f103 0042 	add.w	r0, r3, #66	@ 0x42
 800d4ba:	68bb      	ldr	r3, [r7, #8]
 800d4bc:	691b      	ldr	r3, [r3, #16]
 800d4be:	3306      	adds	r3, #6
 800d4c0:	2206      	movs	r2, #6
 800d4c2:	4619      	mov	r1, r3
 800d4c4:	f00c fb43 	bl	8019b4e <memcpy>
 800d4c8:	68fb      	ldr	r3, [r7, #12]
 800d4ca:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800d4cc:	609a      	str	r2, [r3, #8]
 800d4ce:	6a3a      	ldr	r2, [r7, #32]
 800d4d0:	68fb      	ldr	r3, [r7, #12]
 800d4d2:	611a      	str	r2, [r3, #16]
 800d4d4:	69fa      	ldr	r2, [r7, #28]
 800d4d6:	68fb      	ldr	r3, [r7, #12]
 800d4d8:	60da      	str	r2, [r3, #12]
 800d4da:	68fb      	ldr	r3, [r7, #12]
 800d4dc:	2203      	movs	r2, #3
 800d4de:	f883 2074 	strb.w	r2, [r3, #116]	@ 0x74
 800d4e2:	f107 0310 	add.w	r3, r7, #16
 800d4e6:	2108      	movs	r1, #8
 800d4e8:	4618      	mov	r0, r3
 800d4ea:	f7f3 f9ab 	bl	8000844 <mg_random>
 800d4ee:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800d4f2:	4614      	mov	r4, r2
 800d4f4:	f7f3 f998 	bl	8000828 <mg_millis>
 800d4f8:	4602      	mov	r2, r0
 800d4fa:	460b      	mov	r3, r1
 800d4fc:	4613      	mov	r3, r2
 800d4fe:	4423      	add	r3, r4
 800d500:	4618      	mov	r0, r3
 800d502:	f00b ff27 	bl	8019354 <srand>
 800d506:	e036      	b.n	800d576 <rx_dhcp_client+0x2f2>
 800d508:	68fb      	ldr	r3, [r7, #12]
 800d50a:	f893 3074 	ldrb.w	r3, [r3, #116]	@ 0x74
 800d50e:	2b03      	cmp	r3, #3
 800d510:	d131      	bne.n	800d576 <rx_dhcp_client+0x2f2>
 800d512:	68fb      	ldr	r3, [r7, #12]
 800d514:	689b      	ldr	r3, [r3, #8]
 800d516:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800d518:	429a      	cmp	r2, r3
 800d51a:	d12c      	bne.n	800d576 <rx_dhcp_client+0x2f2>
 800d51c:	68fb      	ldr	r3, [r7, #12]
 800d51e:	e9d3 2312 	ldrd	r2, r3, [r3, #72]	@ 0x48
 800d522:	69b9      	ldr	r1, [r7, #24]
 800d524:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800d528:	fb00 f101 	mul.w	r1, r0, r1
 800d52c:	2000      	movs	r0, #0
 800d52e:	460c      	mov	r4, r1
 800d530:	4605      	mov	r5, r0
 800d532:	eb12 0a04 	adds.w	sl, r2, r4
 800d536:	eb43 0b05 	adc.w	fp, r3, r5
 800d53a:	68fb      	ldr	r3, [r7, #12]
 800d53c:	e9c3 ab16 	strd	sl, fp, [r3, #88]	@ 0x58
 800d540:	4b16      	ldr	r3, [pc, #88]	@ (800d59c <rx_dhcp_client+0x318>)
 800d542:	681b      	ldr	r3, [r3, #0]
 800d544:	2b01      	cmp	r3, #1
 800d546:	dd16      	ble.n	800d576 <rx_dhcp_client+0x2f2>
 800d548:	4b15      	ldr	r3, [pc, #84]	@ (800d5a0 <rx_dhcp_client+0x31c>)
 800d54a:	f44f 72d1 	mov.w	r2, #418	@ 0x1a2
 800d54e:	4915      	ldr	r1, [pc, #84]	@ (800d5a4 <rx_dhcp_client+0x320>)
 800d550:	2002      	movs	r0, #2
 800d552:	f7fe ffab 	bl	800c4ac <mg_log_prefix>
 800d556:	69bc      	ldr	r4, [r7, #24]
 800d558:	68fb      	ldr	r3, [r7, #12]
 800d55a:	e9d3 0116 	ldrd	r0, r1, [r3, #88]	@ 0x58
 800d55e:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800d562:	f04f 0300 	mov.w	r3, #0
 800d566:	f7f2 ff13 	bl	8000390 <__aeabi_uldivmod>
 800d56a:	4602      	mov	r2, r0
 800d56c:	460b      	mov	r3, r1
 800d56e:	4621      	mov	r1, r4
 800d570:	480d      	ldr	r0, [pc, #52]	@ (800d5a8 <rx_dhcp_client+0x324>)
 800d572:	f7fe ffeb 	bl	800c54c <mg_log>
 800d576:	68fb      	ldr	r3, [r7, #12]
 800d578:	f893 3074 	ldrb.w	r3, [r3, #116]	@ 0x74
 800d57c:	f897 202b 	ldrb.w	r2, [r7, #43]	@ 0x2b
 800d580:	429a      	cmp	r2, r3
 800d582:	d006      	beq.n	800d592 <rx_dhcp_client+0x30e>
 800d584:	68f8      	ldr	r0, [r7, #12]
 800d586:	f7ff fa19 	bl	800c9bc <onstatechange>
 800d58a:	e002      	b.n	800d592 <rx_dhcp_client+0x30e>
 800d58c:	bf00      	nop
 800d58e:	e000      	b.n	800d592 <rx_dhcp_client+0x30e>
 800d590:	bf00      	nop
 800d592:	3738      	adds	r7, #56	@ 0x38
 800d594:	46bd      	mov	sp, r7
 800d596:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800d59a:	bf00      	nop
 800d59c:	24000048 	.word	0x24000048
 800d5a0:	0801c05c 	.word	0x0801c05c
 800d5a4:	0801b22c 	.word	0x0801b22c
 800d5a8:	0801b42c 	.word	0x0801b42c

0800d5ac <rx_dhcp_server>:
 800d5ac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d5b0:	b0d6      	sub	sp, #344	@ 0x158
 800d5b2:	af04      	add	r7, sp, #16
 800d5b4:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 800d5b8:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 800d5bc:	6018      	str	r0, [r3, #0]
 800d5be:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 800d5c2:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 800d5c6:	6019      	str	r1, [r3, #0]
 800d5c8:	2300      	movs	r3, #0
 800d5ca:	f887 3147 	strb.w	r3, [r7, #327]	@ 0x147
 800d5ce:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 800d5d2:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 800d5d6:	681b      	ldr	r3, [r3, #0]
 800d5d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800d5da:	33f0      	adds	r3, #240	@ 0xf0
 800d5dc:	f8c7 3140 	str.w	r3, [r7, #320]	@ 0x140
 800d5e0:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 800d5e4:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 800d5e8:	681b      	ldr	r3, [r3, #0]
 800d5ea:	681a      	ldr	r2, [r3, #0]
 800d5ec:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 800d5f0:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 800d5f4:	681b      	ldr	r3, [r3, #0]
 800d5f6:	685b      	ldr	r3, [r3, #4]
 800d5f8:	4413      	add	r3, r2
 800d5fa:	f8c7 313c 	str.w	r3, [r7, #316]	@ 0x13c
 800d5fe:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 800d602:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 800d606:	681b      	ldr	r3, [r3, #0]
 800d608:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800d60a:	f503 7388 	add.w	r3, r3, #272	@ 0x110
 800d60e:	f8d7 213c 	ldr.w	r2, [r7, #316]	@ 0x13c
 800d612:	429a      	cmp	r2, r3
 800d614:	f0c0 81b0 	bcc.w	800d978 <rx_dhcp_server+0x3cc>
 800d618:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 800d61c:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 800d620:	4ad8      	ldr	r2, [pc, #864]	@ (800d984 <rx_dhcp_server+0x3d8>)
 800d622:	4618      	mov	r0, r3
 800d624:	4611      	mov	r1, r2
 800d626:	f44f 7388 	mov.w	r3, #272	@ 0x110
 800d62a:	461a      	mov	r2, r3
 800d62c:	f00c fa8f 	bl	8019b4e <memcpy>
 800d630:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 800d634:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 800d638:	681b      	ldr	r3, [r3, #0]
 800d63a:	689a      	ldr	r2, [r3, #8]
 800d63c:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 800d640:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 800d644:	611a      	str	r2, [r3, #16]
 800d646:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800d64a:	3310      	adds	r3, #16
 800d64c:	3303      	adds	r3, #3
 800d64e:	781a      	ldrb	r2, [r3, #0]
 800d650:	3201      	adds	r2, #1
 800d652:	b2d2      	uxtb	r2, r2
 800d654:	701a      	strb	r2, [r3, #0]
 800d656:	e020      	b.n	800d69a <rx_dhcp_server+0xee>
 800d658:	f8d7 3140 	ldr.w	r3, [r7, #320]	@ 0x140
 800d65c:	781b      	ldrb	r3, [r3, #0]
 800d65e:	2b35      	cmp	r3, #53	@ 0x35
 800d660:	d111      	bne.n	800d686 <rx_dhcp_server+0xda>
 800d662:	f8d7 3140 	ldr.w	r3, [r7, #320]	@ 0x140
 800d666:	3301      	adds	r3, #1
 800d668:	781b      	ldrb	r3, [r3, #0]
 800d66a:	2b01      	cmp	r3, #1
 800d66c:	d10b      	bne.n	800d686 <rx_dhcp_server+0xda>
 800d66e:	f8d7 3140 	ldr.w	r3, [r7, #320]	@ 0x140
 800d672:	3302      	adds	r3, #2
 800d674:	f8d7 213c 	ldr.w	r2, [r7, #316]	@ 0x13c
 800d678:	429a      	cmp	r2, r3
 800d67a:	d904      	bls.n	800d686 <rx_dhcp_server+0xda>
 800d67c:	f8d7 3140 	ldr.w	r3, [r7, #320]	@ 0x140
 800d680:	789b      	ldrb	r3, [r3, #2]
 800d682:	f887 3147 	strb.w	r3, [r7, #327]	@ 0x147
 800d686:	f8d7 3140 	ldr.w	r3, [r7, #320]	@ 0x140
 800d68a:	3301      	adds	r3, #1
 800d68c:	781b      	ldrb	r3, [r3, #0]
 800d68e:	3302      	adds	r3, #2
 800d690:	f8d7 2140 	ldr.w	r2, [r7, #320]	@ 0x140
 800d694:	4413      	add	r3, r2
 800d696:	f8c7 3140 	str.w	r3, [r7, #320]	@ 0x140
 800d69a:	f8d7 3140 	ldr.w	r3, [r7, #320]	@ 0x140
 800d69e:	3301      	adds	r3, #1
 800d6a0:	f8d7 213c 	ldr.w	r2, [r7, #316]	@ 0x13c
 800d6a4:	429a      	cmp	r2, r3
 800d6a6:	d904      	bls.n	800d6b2 <rx_dhcp_server+0x106>
 800d6a8:	f8d7 3140 	ldr.w	r3, [r7, #320]	@ 0x140
 800d6ac:	781b      	ldrb	r3, [r3, #0]
 800d6ae:	2bff      	cmp	r3, #255	@ 0xff
 800d6b0:	d1d2      	bne.n	800d658 <rx_dhcp_server+0xac>
 800d6b2:	f897 3147 	ldrb.w	r3, [r7, #327]	@ 0x147
 800d6b6:	2b01      	cmp	r3, #1
 800d6b8:	d004      	beq.n	800d6c4 <rx_dhcp_server+0x118>
 800d6ba:	f897 3147 	ldrb.w	r3, [r7, #327]	@ 0x147
 800d6be:	2b03      	cmp	r3, #3
 800d6c0:	f040 815b 	bne.w	800d97a <rx_dhcp_server+0x3ce>
 800d6c4:	f897 3147 	ldrb.w	r3, [r7, #327]	@ 0x147
 800d6c8:	2b01      	cmp	r3, #1
 800d6ca:	d101      	bne.n	800d6d0 <rx_dhcp_server+0x124>
 800d6cc:	2302      	movs	r3, #2
 800d6ce:	e000      	b.n	800d6d2 <rx_dhcp_server+0x126>
 800d6d0:	2305      	movs	r3, #5
 800d6d2:	f887 313b 	strb.w	r3, [r7, #315]	@ 0x13b
 800d6d6:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 800d6da:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 800d6de:	2235      	movs	r2, #53	@ 0x35
 800d6e0:	701a      	strb	r2, [r3, #0]
 800d6e2:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 800d6e6:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 800d6ea:	2201      	movs	r2, #1
 800d6ec:	705a      	strb	r2, [r3, #1]
 800d6ee:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 800d6f2:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 800d6f6:	f897 213b 	ldrb.w	r2, [r7, #315]	@ 0x13b
 800d6fa:	709a      	strb	r2, [r3, #2]
 800d6fc:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 800d700:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 800d704:	2201      	movs	r2, #1
 800d706:	70da      	strb	r2, [r3, #3]
 800d708:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 800d70c:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 800d710:	2204      	movs	r2, #4
 800d712:	711a      	strb	r2, [r3, #4]
 800d714:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 800d718:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 800d71c:	2200      	movs	r2, #0
 800d71e:	715a      	strb	r2, [r3, #5]
 800d720:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 800d724:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 800d728:	2200      	movs	r2, #0
 800d72a:	719a      	strb	r2, [r3, #6]
 800d72c:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 800d730:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 800d734:	2200      	movs	r2, #0
 800d736:	71da      	strb	r2, [r3, #7]
 800d738:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 800d73c:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 800d740:	2200      	movs	r2, #0
 800d742:	721a      	strb	r2, [r3, #8]
 800d744:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 800d748:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 800d74c:	2236      	movs	r2, #54	@ 0x36
 800d74e:	725a      	strb	r2, [r3, #9]
 800d750:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 800d754:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 800d758:	2204      	movs	r2, #4
 800d75a:	729a      	strb	r2, [r3, #10]
 800d75c:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 800d760:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 800d764:	2200      	movs	r2, #0
 800d766:	72da      	strb	r2, [r3, #11]
 800d768:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 800d76c:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 800d770:	2200      	movs	r2, #0
 800d772:	731a      	strb	r2, [r3, #12]
 800d774:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 800d778:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 800d77c:	2200      	movs	r2, #0
 800d77e:	735a      	strb	r2, [r3, #13]
 800d780:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 800d784:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 800d788:	2200      	movs	r2, #0
 800d78a:	739a      	strb	r2, [r3, #14]
 800d78c:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 800d790:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 800d794:	220c      	movs	r2, #12
 800d796:	73da      	strb	r2, [r3, #15]
 800d798:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 800d79c:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 800d7a0:	2203      	movs	r2, #3
 800d7a2:	741a      	strb	r2, [r3, #16]
 800d7a4:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 800d7a8:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 800d7ac:	226d      	movs	r2, #109	@ 0x6d
 800d7ae:	745a      	strb	r2, [r3, #17]
 800d7b0:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 800d7b4:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 800d7b8:	2269      	movs	r2, #105	@ 0x69
 800d7ba:	749a      	strb	r2, [r3, #18]
 800d7bc:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 800d7c0:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 800d7c4:	2270      	movs	r2, #112	@ 0x70
 800d7c6:	74da      	strb	r2, [r3, #19]
 800d7c8:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 800d7cc:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 800d7d0:	2233      	movs	r2, #51	@ 0x33
 800d7d2:	751a      	strb	r2, [r3, #20]
 800d7d4:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 800d7d8:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 800d7dc:	2204      	movs	r2, #4
 800d7de:	755a      	strb	r2, [r3, #21]
 800d7e0:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 800d7e4:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 800d7e8:	22ff      	movs	r2, #255	@ 0xff
 800d7ea:	759a      	strb	r2, [r3, #22]
 800d7ec:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 800d7f0:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 800d7f4:	22ff      	movs	r2, #255	@ 0xff
 800d7f6:	75da      	strb	r2, [r3, #23]
 800d7f8:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 800d7fc:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 800d800:	22ff      	movs	r2, #255	@ 0xff
 800d802:	761a      	strb	r2, [r3, #24]
 800d804:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 800d808:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 800d80c:	22ff      	movs	r2, #255	@ 0xff
 800d80e:	765a      	strb	r2, [r3, #25]
 800d810:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 800d814:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 800d818:	22ff      	movs	r2, #255	@ 0xff
 800d81a:	769a      	strb	r2, [r3, #26]
 800d81c:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 800d820:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 800d824:	681b      	ldr	r3, [r3, #0]
 800d826:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800d828:	f103 011c 	add.w	r1, r3, #28
 800d82c:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800d830:	331c      	adds	r3, #28
 800d832:	2206      	movs	r2, #6
 800d834:	4618      	mov	r0, r3
 800d836:	f00c f98a 	bl	8019b4e <memcpy>
 800d83a:	f107 030c 	add.w	r3, r7, #12
 800d83e:	3305      	adds	r3, #5
 800d840:	f507 72a4 	add.w	r2, r7, #328	@ 0x148
 800d844:	f5a2 72a2 	sub.w	r2, r2, #324	@ 0x144
 800d848:	6812      	ldr	r2, [r2, #0]
 800d84a:	320c      	adds	r2, #12
 800d84c:	6812      	ldr	r2, [r2, #0]
 800d84e:	601a      	str	r2, [r3, #0]
 800d850:	f107 030c 	add.w	r3, r7, #12
 800d854:	330b      	adds	r3, #11
 800d856:	f507 72a4 	add.w	r2, r7, #328	@ 0x148
 800d85a:	f5a2 72a2 	sub.w	r2, r2, #324	@ 0x144
 800d85e:	6812      	ldr	r2, [r2, #0]
 800d860:	3208      	adds	r2, #8
 800d862:	6812      	ldr	r2, [r2, #0]
 800d864:	601a      	str	r2, [r3, #0]
 800d866:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 800d86a:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 800d86e:	f507 72a4 	add.w	r2, r7, #328	@ 0x148
 800d872:	f5a2 729e 	sub.w	r2, r2, #316	@ 0x13c
 800d876:	f103 04f0 	add.w	r4, r3, #240	@ 0xf0
 800d87a:	4615      	mov	r5, r2
 800d87c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800d87e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800d880:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800d884:	c403      	stmia	r4!, {r0, r1}
 800d886:	8022      	strh	r2, [r4, #0]
 800d888:	3402      	adds	r4, #2
 800d88a:	0c13      	lsrs	r3, r2, #16
 800d88c:	7023      	strb	r3, [r4, #0]
 800d88e:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 800d892:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 800d896:	681b      	ldr	r3, [r3, #0]
 800d898:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800d89a:	f8d3 20ec 	ldr.w	r2, [r3, #236]	@ 0xec
 800d89e:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 800d8a2:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 800d8a6:	f8c3 20ec 	str.w	r2, [r3, #236]	@ 0xec
 800d8aa:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 800d8ae:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 800d8b2:	681b      	ldr	r3, [r3, #0]
 800d8b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800d8b6:	685a      	ldr	r2, [r3, #4]
 800d8b8:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 800d8bc:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 800d8c0:	605a      	str	r2, [r3, #4]
 800d8c2:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 800d8c6:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 800d8ca:	681b      	ldr	r3, [r3, #0]
 800d8cc:	7f9b      	ldrb	r3, [r3, #30]
 800d8ce:	2b00      	cmp	r3, #0
 800d8d0:	d01c      	beq.n	800d90c <rx_dhcp_server+0x360>
 800d8d2:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 800d8d6:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 800d8da:	691a      	ldr	r2, [r3, #16]
 800d8dc:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 800d8e0:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 800d8e4:	681b      	ldr	r3, [r3, #0]
 800d8e6:	611a      	str	r2, [r3, #16]
 800d8e8:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 800d8ec:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 800d8f0:	681b      	ldr	r3, [r3, #0]
 800d8f2:	f103 0042 	add.w	r0, r3, #66	@ 0x42
 800d8f6:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 800d8fa:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 800d8fe:	681b      	ldr	r3, [r3, #0]
 800d900:	691b      	ldr	r3, [r3, #16]
 800d902:	3306      	adds	r3, #6
 800d904:	2206      	movs	r2, #6
 800d906:	4619      	mov	r1, r3
 800d908:	f00c f921 	bl	8019b4e <memcpy>
 800d90c:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 800d910:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 800d914:	681b      	ldr	r3, [r3, #0]
 800d916:	691b      	ldr	r3, [r3, #16]
 800d918:	1d9d      	adds	r5, r3, #6
 800d91a:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 800d91e:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 800d922:	681b      	ldr	r3, [r3, #0]
 800d924:	689e      	ldr	r6, [r3, #8]
 800d926:	2043      	movs	r0, #67	@ 0x43
 800d928:	f002 ff3e 	bl	80107a8 <mg_ntohs>
 800d92c:	4603      	mov	r3, r0
 800d92e:	4698      	mov	r8, r3
 800d930:	f897 3147 	ldrb.w	r3, [r7, #327]	@ 0x147
 800d934:	2b01      	cmp	r3, #1
 800d936:	d005      	beq.n	800d944 <rx_dhcp_server+0x398>
 800d938:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 800d93c:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 800d940:	691c      	ldr	r4, [r3, #16]
 800d942:	e001      	b.n	800d948 <rx_dhcp_server+0x39c>
 800d944:	f04f 34ff 	mov.w	r4, #4294967295
 800d948:	2044      	movs	r0, #68	@ 0x44
 800d94a:	f002 ff2d 	bl	80107a8 <mg_ntohs>
 800d94e:	4603      	mov	r3, r0
 800d950:	461a      	mov	r2, r3
 800d952:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 800d956:	f5a3 70a2 	sub.w	r0, r3, #324	@ 0x144
 800d95a:	f44f 7388 	mov.w	r3, #272	@ 0x110
 800d95e:	9303      	str	r3, [sp, #12]
 800d960:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800d964:	9302      	str	r3, [sp, #8]
 800d966:	9201      	str	r2, [sp, #4]
 800d968:	9400      	str	r4, [sp, #0]
 800d96a:	4643      	mov	r3, r8
 800d96c:	4632      	mov	r2, r6
 800d96e:	4629      	mov	r1, r5
 800d970:	6800      	ldr	r0, [r0, #0]
 800d972:	f7ff f901 	bl	800cb78 <tx_udp>
 800d976:	e000      	b.n	800d97a <rx_dhcp_server+0x3ce>
 800d978:	bf00      	nop
 800d97a:	f507 77a4 	add.w	r7, r7, #328	@ 0x148
 800d97e:	46bd      	mov	sp, r7
 800d980:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d984:	0801b444 	.word	0x0801b444

0800d988 <rx_udp>:
 800d988:	b580      	push	{r7, lr}
 800d98a:	b084      	sub	sp, #16
 800d98c:	af00      	add	r7, sp, #0
 800d98e:	6078      	str	r0, [r7, #4]
 800d990:	6039      	str	r1, [r7, #0]
 800d992:	687b      	ldr	r3, [r7, #4]
 800d994:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d996:	2201      	movs	r2, #1
 800d998:	6839      	ldr	r1, [r7, #0]
 800d99a:	4618      	mov	r0, r3
 800d99c:	f7ff fa9a 	bl	800ced4 <getpeer>
 800d9a0:	60f8      	str	r0, [r7, #12]
 800d9a2:	68fb      	ldr	r3, [r7, #12]
 800d9a4:	2b00      	cmp	r3, #0
 800d9a6:	d059      	beq.n	800da5c <rx_udp+0xd4>
 800d9a8:	683b      	ldr	r3, [r7, #0]
 800d9aa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d9ac:	881b      	ldrh	r3, [r3, #0]
 800d9ae:	b29a      	uxth	r2, r3
 800d9b0:	68fb      	ldr	r3, [r7, #12]
 800d9b2:	859a      	strh	r2, [r3, #44]	@ 0x2c
 800d9b4:	68fb      	ldr	r3, [r7, #12]
 800d9b6:	331c      	adds	r3, #28
 800d9b8:	683a      	ldr	r2, [r7, #0]
 800d9ba:	69d2      	ldr	r2, [r2, #28]
 800d9bc:	320c      	adds	r2, #12
 800d9be:	6812      	ldr	r2, [r2, #0]
 800d9c0:	601a      	str	r2, [r3, #0]
 800d9c2:	68fb      	ldr	r3, [r7, #12]
 800d9c4:	33b0      	adds	r3, #176	@ 0xb0
 800d9c6:	60bb      	str	r3, [r7, #8]
 800d9c8:	68bb      	ldr	r3, [r7, #8]
 800d9ca:	f103 0010 	add.w	r0, r3, #16
 800d9ce:	683b      	ldr	r3, [r7, #0]
 800d9d0:	691b      	ldr	r3, [r3, #16]
 800d9d2:	3306      	adds	r3, #6
 800d9d4:	2206      	movs	r2, #6
 800d9d6:	4619      	mov	r1, r3
 800d9d8:	f00c f8b9 	bl	8019b4e <memcpy>
 800d9dc:	68fb      	ldr	r3, [r7, #12]
 800d9de:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800d9e0:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800d9e4:	d304      	bcc.n	800d9f0 <rx_udp+0x68>
 800d9e6:	491f      	ldr	r1, [pc, #124]	@ (800da64 <rx_udp+0xdc>)
 800d9e8:	68f8      	ldr	r0, [r7, #12]
 800d9ea:	f7fb fa29 	bl	8008e40 <mg_error>
 800d9ee:	e035      	b.n	800da5c <rx_udp+0xd4>
 800d9f0:	68fb      	ldr	r3, [r7, #12]
 800d9f2:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800d9f4:	68fb      	ldr	r3, [r7, #12]
 800d9f6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800d9f8:	1ad2      	subs	r2, r2, r3
 800d9fa:	683b      	ldr	r3, [r7, #0]
 800d9fc:	68db      	ldr	r3, [r3, #12]
 800d9fe:	429a      	cmp	r2, r3
 800da00:	d212      	bcs.n	800da28 <rx_udp+0xa0>
 800da02:	68fb      	ldr	r3, [r7, #12]
 800da04:	f103 0038 	add.w	r0, r3, #56	@ 0x38
 800da08:	68fb      	ldr	r3, [r7, #12]
 800da0a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800da0c:	683b      	ldr	r3, [r7, #0]
 800da0e:	68db      	ldr	r3, [r3, #12]
 800da10:	4413      	add	r3, r2
 800da12:	4619      	mov	r1, r3
 800da14:	f7fd febc 	bl	800b790 <mg_iobuf_resize>
 800da18:	4603      	mov	r3, r0
 800da1a:	2b00      	cmp	r3, #0
 800da1c:	d104      	bne.n	800da28 <rx_udp+0xa0>
 800da1e:	4912      	ldr	r1, [pc, #72]	@ (800da68 <rx_udp+0xe0>)
 800da20:	68f8      	ldr	r0, [r7, #12]
 800da22:	f7fb fa0d 	bl	8008e40 <mg_error>
 800da26:	e019      	b.n	800da5c <rx_udp+0xd4>
 800da28:	68fb      	ldr	r3, [r7, #12]
 800da2a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800da2c:	68fb      	ldr	r3, [r7, #12]
 800da2e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800da30:	18d0      	adds	r0, r2, r3
 800da32:	683b      	ldr	r3, [r7, #0]
 800da34:	6899      	ldr	r1, [r3, #8]
 800da36:	683b      	ldr	r3, [r7, #0]
 800da38:	68db      	ldr	r3, [r3, #12]
 800da3a:	461a      	mov	r2, r3
 800da3c:	f00c f887 	bl	8019b4e <memcpy>
 800da40:	68fb      	ldr	r3, [r7, #12]
 800da42:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800da44:	683b      	ldr	r3, [r7, #0]
 800da46:	68db      	ldr	r3, [r3, #12]
 800da48:	441a      	add	r2, r3
 800da4a:	68fb      	ldr	r3, [r7, #12]
 800da4c:	641a      	str	r2, [r3, #64]	@ 0x40
 800da4e:	683b      	ldr	r3, [r7, #0]
 800da50:	330c      	adds	r3, #12
 800da52:	461a      	mov	r2, r3
 800da54:	2107      	movs	r1, #7
 800da56:	68f8      	ldr	r0, [r7, #12]
 800da58:	f7fb f9d2 	bl	8008e00 <mg_call>
 800da5c:	bf00      	nop
 800da5e:	3710      	adds	r7, #16
 800da60:	46bd      	mov	sp, r7
 800da62:	bd80      	pop	{r7, pc}
 800da64:	0801b554 	.word	0x0801b554
 800da68:	0801b570 	.word	0x0801b570

0800da6c <tx_tcp>:
 800da6c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800da6e:	b091      	sub	sp, #68	@ 0x44
 800da70:	af06      	add	r7, sp, #24
 800da72:	60f8      	str	r0, [r7, #12]
 800da74:	60b9      	str	r1, [r7, #8]
 800da76:	607a      	str	r2, [r7, #4]
 800da78:	70fb      	strb	r3, [r7, #3]
 800da7a:	68fb      	ldr	r3, [r7, #12]
 800da7c:	689a      	ldr	r2, [r3, #8]
 800da7e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800da80:	3314      	adds	r3, #20
 800da82:	9301      	str	r3, [sp, #4]
 800da84:	687b      	ldr	r3, [r7, #4]
 800da86:	9300      	str	r3, [sp, #0]
 800da88:	4613      	mov	r3, r2
 800da8a:	2206      	movs	r2, #6
 800da8c:	68b9      	ldr	r1, [r7, #8]
 800da8e:	68f8      	ldr	r0, [r7, #12]
 800da90:	f7ff f81c 	bl	800cacc <tx_ip>
 800da94:	6278      	str	r0, [r7, #36]	@ 0x24
 800da96:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800da98:	3314      	adds	r3, #20
 800da9a:	623b      	str	r3, [r7, #32]
 800da9c:	2214      	movs	r2, #20
 800da9e:	2100      	movs	r1, #0
 800daa0:	6a38      	ldr	r0, [r7, #32]
 800daa2:	f00b ff93 	bl	80199cc <memset>
 800daa6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800daa8:	2b00      	cmp	r3, #0
 800daaa:	d009      	beq.n	800dac0 <tx_tcp+0x54>
 800daac:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800daae:	2b00      	cmp	r3, #0
 800dab0:	d006      	beq.n	800dac0 <tx_tcp+0x54>
 800dab2:	6a3b      	ldr	r3, [r7, #32]
 800dab4:	3314      	adds	r3, #20
 800dab6:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800dab8:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800daba:	4618      	mov	r0, r3
 800dabc:	f00b ff6c 	bl	8019998 <memmove>
 800dac0:	6a3b      	ldr	r3, [r7, #32]
 800dac2:	f8b7 2040 	ldrh.w	r2, [r7, #64]	@ 0x40
 800dac6:	801a      	strh	r2, [r3, #0]
 800dac8:	6a3b      	ldr	r3, [r7, #32]
 800daca:	f8b7 2044 	ldrh.w	r2, [r7, #68]	@ 0x44
 800dace:	805a      	strh	r2, [r3, #2]
 800dad0:	6a3b      	ldr	r3, [r7, #32]
 800dad2:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800dad4:	605a      	str	r2, [r3, #4]
 800dad6:	6a3b      	ldr	r3, [r7, #32]
 800dad8:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800dada:	609a      	str	r2, [r3, #8]
 800dadc:	6a3b      	ldr	r3, [r7, #32]
 800dade:	78fa      	ldrb	r2, [r7, #3]
 800dae0:	735a      	strb	r2, [r3, #13]
 800dae2:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 800dae6:	f002 fe5f 	bl	80107a8 <mg_ntohs>
 800daea:	4603      	mov	r3, r0
 800daec:	461a      	mov	r2, r3
 800daee:	6a3b      	ldr	r3, [r7, #32]
 800daf0:	81da      	strh	r2, [r3, #14]
 800daf2:	6a3b      	ldr	r3, [r7, #32]
 800daf4:	2250      	movs	r2, #80	@ 0x50
 800daf6:	731a      	strb	r2, [r3, #12]
 800daf8:	2300      	movs	r3, #0
 800dafa:	61fb      	str	r3, [r7, #28]
 800dafc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800dafe:	b29b      	uxth	r3, r3
 800db00:	3314      	adds	r3, #20
 800db02:	837b      	strh	r3, [r7, #26]
 800db04:	2300      	movs	r3, #0
 800db06:	753b      	strb	r3, [r7, #20]
 800db08:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800db0a:	7a5b      	ldrb	r3, [r3, #9]
 800db0c:	757b      	strb	r3, [r7, #21]
 800db0e:	8b7b      	ldrh	r3, [r7, #26]
 800db10:	0a1b      	lsrs	r3, r3, #8
 800db12:	b29b      	uxth	r3, r3
 800db14:	b2db      	uxtb	r3, r3
 800db16:	75bb      	strb	r3, [r7, #22]
 800db18:	8b7b      	ldrh	r3, [r7, #26]
 800db1a:	b2db      	uxtb	r3, r3
 800db1c:	75fb      	strb	r3, [r7, #23]
 800db1e:	8b7b      	ldrh	r3, [r7, #26]
 800db20:	461a      	mov	r2, r3
 800db22:	6a39      	ldr	r1, [r7, #32]
 800db24:	69f8      	ldr	r0, [r7, #28]
 800db26:	f7fe fe19 	bl	800c75c <csumup>
 800db2a:	61f8      	str	r0, [r7, #28]
 800db2c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800db2e:	330c      	adds	r3, #12
 800db30:	2204      	movs	r2, #4
 800db32:	4619      	mov	r1, r3
 800db34:	69f8      	ldr	r0, [r7, #28]
 800db36:	f7fe fe11 	bl	800c75c <csumup>
 800db3a:	61f8      	str	r0, [r7, #28]
 800db3c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800db3e:	3310      	adds	r3, #16
 800db40:	2204      	movs	r2, #4
 800db42:	4619      	mov	r1, r3
 800db44:	69f8      	ldr	r0, [r7, #28]
 800db46:	f7fe fe09 	bl	800c75c <csumup>
 800db4a:	61f8      	str	r0, [r7, #28]
 800db4c:	f107 0314 	add.w	r3, r7, #20
 800db50:	2204      	movs	r2, #4
 800db52:	4619      	mov	r1, r3
 800db54:	69f8      	ldr	r0, [r7, #28]
 800db56:	f7fe fe01 	bl	800c75c <csumup>
 800db5a:	61f8      	str	r0, [r7, #28]
 800db5c:	69f8      	ldr	r0, [r7, #28]
 800db5e:	f7fe fe28 	bl	800c7b2 <csumfin>
 800db62:	4603      	mov	r3, r0
 800db64:	461a      	mov	r2, r3
 800db66:	6a3b      	ldr	r3, [r7, #32]
 800db68:	821a      	strh	r2, [r3, #16]
 800db6a:	4b21      	ldr	r3, [pc, #132]	@ (800dbf0 <tx_tcp+0x184>)
 800db6c:	681b      	ldr	r3, [r3, #0]
 800db6e:	2b03      	cmp	r3, #3
 800db70:	dd2c      	ble.n	800dbcc <tx_tcp+0x160>
 800db72:	4b20      	ldr	r3, [pc, #128]	@ (800dbf4 <tx_tcp+0x188>)
 800db74:	f240 12fd 	movw	r2, #509	@ 0x1fd
 800db78:	491f      	ldr	r1, [pc, #124]	@ (800dbf8 <tx_tcp+0x18c>)
 800db7a:	2004      	movs	r0, #4
 800db7c:	f7fe fc96 	bl	800c4ac <mg_log_prefix>
 800db80:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800db82:	f103 050c 	add.w	r5, r3, #12
 800db86:	6a3b      	ldr	r3, [r7, #32]
 800db88:	881b      	ldrh	r3, [r3, #0]
 800db8a:	b29b      	uxth	r3, r3
 800db8c:	4618      	mov	r0, r3
 800db8e:	f002 fe0b 	bl	80107a8 <mg_ntohs>
 800db92:	4603      	mov	r3, r0
 800db94:	461e      	mov	r6, r3
 800db96:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800db98:	f103 0410 	add.w	r4, r3, #16
 800db9c:	6a3b      	ldr	r3, [r7, #32]
 800db9e:	885b      	ldrh	r3, [r3, #2]
 800dba0:	b29b      	uxth	r3, r3
 800dba2:	4618      	mov	r0, r3
 800dba4:	f002 fe00 	bl	80107a8 <mg_ntohs>
 800dba8:	4603      	mov	r3, r0
 800dbaa:	461a      	mov	r2, r3
 800dbac:	6a3b      	ldr	r3, [r7, #32]
 800dbae:	7b5b      	ldrb	r3, [r3, #13]
 800dbb0:	4619      	mov	r1, r3
 800dbb2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800dbb4:	9304      	str	r3, [sp, #16]
 800dbb6:	9103      	str	r1, [sp, #12]
 800dbb8:	9202      	str	r2, [sp, #8]
 800dbba:	9401      	str	r4, [sp, #4]
 800dbbc:	4b0f      	ldr	r3, [pc, #60]	@ (800dbfc <tx_tcp+0x190>)
 800dbbe:	9300      	str	r3, [sp, #0]
 800dbc0:	4633      	mov	r3, r6
 800dbc2:	462a      	mov	r2, r5
 800dbc4:	490d      	ldr	r1, [pc, #52]	@ (800dbfc <tx_tcp+0x190>)
 800dbc6:	480e      	ldr	r0, [pc, #56]	@ (800dc00 <tx_tcp+0x194>)
 800dbc8:	f7fe fcc0 	bl	800c54c <mg_log>
 800dbcc:	6a3b      	ldr	r3, [r7, #32]
 800dbce:	f103 0214 	add.w	r2, r3, #20
 800dbd2:	68fb      	ldr	r3, [r7, #12]
 800dbd4:	695b      	ldr	r3, [r3, #20]
 800dbd6:	1ad3      	subs	r3, r2, r3
 800dbd8:	461a      	mov	r2, r3
 800dbda:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800dbdc:	4413      	add	r3, r2
 800dbde:	4619      	mov	r1, r3
 800dbe0:	68f8      	ldr	r0, [r7, #12]
 800dbe2:	f7fe fe71 	bl	800c8c8 <ether_output>
 800dbe6:	4603      	mov	r3, r0
 800dbe8:	4618      	mov	r0, r3
 800dbea:	372c      	adds	r7, #44	@ 0x2c
 800dbec:	46bd      	mov	sp, r7
 800dbee:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800dbf0:	24000048 	.word	0x24000048
 800dbf4:	0801c06c 	.word	0x0801c06c
 800dbf8:	0801b22c 	.word	0x0801b22c
 800dbfc:	0800fb1d 	.word	0x0800fb1d
 800dc00:	0801b574 	.word	0x0801b574

0800dc04 <tx_tcp_pkt>:
 800dc04:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800dc08:	b08c      	sub	sp, #48	@ 0x30
 800dc0a:	af06      	add	r7, sp, #24
 800dc0c:	60f8      	str	r0, [r7, #12]
 800dc0e:	60b9      	str	r1, [r7, #8]
 800dc10:	603b      	str	r3, [r7, #0]
 800dc12:	4613      	mov	r3, r2
 800dc14:	71fb      	strb	r3, [r7, #7]
 800dc16:	68bb      	ldr	r3, [r7, #8]
 800dc18:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800dc1a:	7b5b      	ldrb	r3, [r3, #13]
 800dc1c:	f003 0303 	and.w	r3, r3, #3
 800dc20:	2b00      	cmp	r3, #0
 800dc22:	bf14      	ite	ne
 800dc24:	2301      	movne	r3, #1
 800dc26:	2300      	moveq	r3, #0
 800dc28:	b2db      	uxtb	r3, r3
 800dc2a:	617b      	str	r3, [r7, #20]
 800dc2c:	68bb      	ldr	r3, [r7, #8]
 800dc2e:	691b      	ldr	r3, [r3, #16]
 800dc30:	1d9e      	adds	r6, r3, #6
 800dc32:	68bb      	ldr	r3, [r7, #8]
 800dc34:	69db      	ldr	r3, [r3, #28]
 800dc36:	f8d3 800c 	ldr.w	r8, [r3, #12]
 800dc3a:	68bb      	ldr	r3, [r7, #8]
 800dc3c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800dc3e:	885b      	ldrh	r3, [r3, #2]
 800dc40:	b29c      	uxth	r4, r3
 800dc42:	68bb      	ldr	r3, [r7, #8]
 800dc44:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800dc46:	881b      	ldrh	r3, [r3, #0]
 800dc48:	b29d      	uxth	r5, r3
 800dc4a:	68bb      	ldr	r3, [r7, #8]
 800dc4c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800dc4e:	685b      	ldr	r3, [r3, #4]
 800dc50:	4618      	mov	r0, r3
 800dc52:	f002 fd90 	bl	8010776 <mg_ntohl>
 800dc56:	4602      	mov	r2, r0
 800dc58:	697b      	ldr	r3, [r7, #20]
 800dc5a:	4413      	add	r3, r2
 800dc5c:	4618      	mov	r0, r3
 800dc5e:	f002 fd8a 	bl	8010776 <mg_ntohl>
 800dc62:	4601      	mov	r1, r0
 800dc64:	79fa      	ldrb	r2, [r7, #7]
 800dc66:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800dc68:	9305      	str	r3, [sp, #20]
 800dc6a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800dc6c:	9304      	str	r3, [sp, #16]
 800dc6e:	9103      	str	r1, [sp, #12]
 800dc70:	683b      	ldr	r3, [r7, #0]
 800dc72:	9302      	str	r3, [sp, #8]
 800dc74:	9501      	str	r5, [sp, #4]
 800dc76:	9400      	str	r4, [sp, #0]
 800dc78:	4613      	mov	r3, r2
 800dc7a:	4642      	mov	r2, r8
 800dc7c:	4631      	mov	r1, r6
 800dc7e:	68f8      	ldr	r0, [r7, #12]
 800dc80:	f7ff fef4 	bl	800da6c <tx_tcp>
 800dc84:	4603      	mov	r3, r0
 800dc86:	4618      	mov	r0, r3
 800dc88:	3718      	adds	r7, #24
 800dc8a:	46bd      	mov	sp, r7
 800dc8c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800dc90 <accept_conn>:
 800dc90:	b5b0      	push	{r4, r5, r7, lr}
 800dc92:	b084      	sub	sp, #16
 800dc94:	af00      	add	r7, sp, #0
 800dc96:	6078      	str	r0, [r7, #4]
 800dc98:	6039      	str	r1, [r7, #0]
 800dc9a:	687b      	ldr	r3, [r7, #4]
 800dc9c:	685b      	ldr	r3, [r3, #4]
 800dc9e:	4618      	mov	r0, r3
 800dca0:	f001 fc7c 	bl	800f59c <mg_alloc_conn>
 800dca4:	60f8      	str	r0, [r7, #12]
 800dca6:	68fb      	ldr	r3, [r7, #12]
 800dca8:	2b00      	cmp	r3, #0
 800dcaa:	d10f      	bne.n	800dccc <accept_conn+0x3c>
 800dcac:	4b4e      	ldr	r3, [pc, #312]	@ (800dde8 <accept_conn+0x158>)
 800dcae:	681b      	ldr	r3, [r3, #0]
 800dcb0:	2b00      	cmp	r3, #0
 800dcb2:	dd09      	ble.n	800dcc8 <accept_conn+0x38>
 800dcb4:	4b4d      	ldr	r3, [pc, #308]	@ (800ddec <accept_conn+0x15c>)
 800dcb6:	f240 2211 	movw	r2, #529	@ 0x211
 800dcba:	494d      	ldr	r1, [pc, #308]	@ (800ddf0 <accept_conn+0x160>)
 800dcbc:	2001      	movs	r0, #1
 800dcbe:	f7fe fbf5 	bl	800c4ac <mg_log_prefix>
 800dcc2:	484c      	ldr	r0, [pc, #304]	@ (800ddf4 <accept_conn+0x164>)
 800dcc4:	f7fe fc42 	bl	800c54c <mg_log>
 800dcc8:	2300      	movs	r3, #0
 800dcca:	e088      	b.n	800ddde <accept_conn+0x14e>
 800dccc:	68fb      	ldr	r3, [r7, #12]
 800dcce:	33b0      	adds	r3, #176	@ 0xb0
 800dcd0:	60bb      	str	r3, [r7, #8]
 800dcd2:	683b      	ldr	r3, [r7, #0]
 800dcd4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800dcd6:	689b      	ldr	r3, [r3, #8]
 800dcd8:	4618      	mov	r0, r3
 800dcda:	f002 fd4c 	bl	8010776 <mg_ntohl>
 800dcde:	4602      	mov	r2, r0
 800dce0:	68bb      	ldr	r3, [r7, #8]
 800dce2:	601a      	str	r2, [r3, #0]
 800dce4:	683b      	ldr	r3, [r7, #0]
 800dce6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800dce8:	685b      	ldr	r3, [r3, #4]
 800dcea:	4618      	mov	r0, r3
 800dcec:	f002 fd43 	bl	8010776 <mg_ntohl>
 800dcf0:	4602      	mov	r2, r0
 800dcf2:	68bb      	ldr	r3, [r7, #8]
 800dcf4:	605a      	str	r2, [r3, #4]
 800dcf6:	68bb      	ldr	r3, [r7, #8]
 800dcf8:	f103 0010 	add.w	r0, r3, #16
 800dcfc:	683b      	ldr	r3, [r7, #0]
 800dcfe:	691b      	ldr	r3, [r3, #16]
 800dd00:	3306      	adds	r3, #6
 800dd02:	2206      	movs	r2, #6
 800dd04:	4619      	mov	r1, r3
 800dd06:	f00b ff22 	bl	8019b4e <memcpy>
 800dd0a:	2100      	movs	r1, #0
 800dd0c:	68f8      	ldr	r0, [r7, #12]
 800dd0e:	f7fe fd7f 	bl	800c810 <settmout>
 800dd12:	68fb      	ldr	r3, [r7, #12]
 800dd14:	331c      	adds	r3, #28
 800dd16:	683a      	ldr	r2, [r7, #0]
 800dd18:	69d2      	ldr	r2, [r2, #28]
 800dd1a:	320c      	adds	r2, #12
 800dd1c:	6812      	ldr	r2, [r2, #0]
 800dd1e:	601a      	str	r2, [r3, #0]
 800dd20:	683b      	ldr	r3, [r7, #0]
 800dd22:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800dd24:	881b      	ldrh	r3, [r3, #0]
 800dd26:	b29a      	uxth	r2, r3
 800dd28:	68fb      	ldr	r3, [r7, #12]
 800dd2a:	859a      	strh	r2, [r3, #44]	@ 0x2c
 800dd2c:	4b2e      	ldr	r3, [pc, #184]	@ (800dde8 <accept_conn+0x158>)
 800dd2e:	681b      	ldr	r3, [r3, #0]
 800dd30:	2b02      	cmp	r3, #2
 800dd32:	dd0e      	ble.n	800dd52 <accept_conn+0xc2>
 800dd34:	4b2d      	ldr	r3, [pc, #180]	@ (800ddec <accept_conn+0x15c>)
 800dd36:	f240 221a 	movw	r2, #538	@ 0x21a
 800dd3a:	492d      	ldr	r1, [pc, #180]	@ (800ddf0 <accept_conn+0x160>)
 800dd3c:	2003      	movs	r0, #3
 800dd3e:	f7fe fbb5 	bl	800c4ac <mg_log_prefix>
 800dd42:	68fb      	ldr	r3, [r7, #12]
 800dd44:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 800dd46:	68fb      	ldr	r3, [r7, #12]
 800dd48:	331c      	adds	r3, #28
 800dd4a:	4a2b      	ldr	r2, [pc, #172]	@ (800ddf8 <accept_conn+0x168>)
 800dd4c:	482b      	ldr	r0, [pc, #172]	@ (800ddfc <accept_conn+0x16c>)
 800dd4e:	f7fe fbfd 	bl	800c54c <mg_log>
 800dd52:	687b      	ldr	r3, [r7, #4]
 800dd54:	685b      	ldr	r3, [r3, #4]
 800dd56:	681a      	ldr	r2, [r3, #0]
 800dd58:	68fb      	ldr	r3, [r7, #12]
 800dd5a:	601a      	str	r2, [r3, #0]
 800dd5c:	687b      	ldr	r3, [r7, #4]
 800dd5e:	685b      	ldr	r3, [r3, #4]
 800dd60:	68fa      	ldr	r2, [r7, #12]
 800dd62:	601a      	str	r2, [r3, #0]
 800dd64:	68fa      	ldr	r2, [r7, #12]
 800dd66:	f892 30ac 	ldrb.w	r3, [r2, #172]	@ 0xac
 800dd6a:	f043 0304 	orr.w	r3, r3, #4
 800dd6e:	f882 30ac 	strb.w	r3, [r2, #172]	@ 0xac
 800dd72:	687b      	ldr	r3, [r7, #4]
 800dd74:	f893 30ad 	ldrb.w	r3, [r3, #173]	@ 0xad
 800dd78:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 800dd7c:	b2d9      	uxtb	r1, r3
 800dd7e:	68fa      	ldr	r2, [r7, #12]
 800dd80:	f892 30ad 	ldrb.w	r3, [r2, #173]	@ 0xad
 800dd84:	f361 03c3 	bfi	r3, r1, #3, #1
 800dd88:	f882 30ad 	strb.w	r3, [r2, #173]	@ 0xad
 800dd8c:	687b      	ldr	r3, [r7, #4]
 800dd8e:	f8d3 2080 	ldr.w	r2, [r3, #128]	@ 0x80
 800dd92:	68fb      	ldr	r3, [r7, #12]
 800dd94:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
 800dd98:	68fa      	ldr	r2, [r7, #12]
 800dd9a:	687b      	ldr	r3, [r7, #4]
 800dd9c:	f102 0408 	add.w	r4, r2, #8
 800dda0:	f103 0508 	add.w	r5, r3, #8
 800dda4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800dda6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800dda8:	682b      	ldr	r3, [r5, #0]
 800ddaa:	6023      	str	r3, [r4, #0]
 800ddac:	687b      	ldr	r3, [r7, #4]
 800ddae:	f8d3 2084 	ldr.w	r2, [r3, #132]	@ 0x84
 800ddb2:	68fb      	ldr	r3, [r7, #12]
 800ddb4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
 800ddb8:	687b      	ldr	r3, [r7, #4]
 800ddba:	6f9a      	ldr	r2, [r3, #120]	@ 0x78
 800ddbc:	68fb      	ldr	r3, [r7, #12]
 800ddbe:	679a      	str	r2, [r3, #120]	@ 0x78
 800ddc0:	687b      	ldr	r3, [r7, #4]
 800ddc2:	6fda      	ldr	r2, [r3, #124]	@ 0x7c
 800ddc4:	68fb      	ldr	r3, [r7, #12]
 800ddc6:	67da      	str	r2, [r3, #124]	@ 0x7c
 800ddc8:	2200      	movs	r2, #0
 800ddca:	2101      	movs	r1, #1
 800ddcc:	68f8      	ldr	r0, [r7, #12]
 800ddce:	f7fb f817 	bl	8008e00 <mg_call>
 800ddd2:	2200      	movs	r2, #0
 800ddd4:	2105      	movs	r1, #5
 800ddd6:	68f8      	ldr	r0, [r7, #12]
 800ddd8:	f7fb f812 	bl	8008e00 <mg_call>
 800dddc:	68fb      	ldr	r3, [r7, #12]
 800ddde:	4618      	mov	r0, r3
 800dde0:	3710      	adds	r7, #16
 800dde2:	46bd      	mov	sp, r7
 800dde4:	bdb0      	pop	{r4, r5, r7, pc}
 800dde6:	bf00      	nop
 800dde8:	24000048 	.word	0x24000048
 800ddec:	0801c074 	.word	0x0801c074
 800ddf0:	0801b22c 	.word	0x0801b22c
 800ddf4:	0801b598 	.word	0x0801b598
 800ddf8:	0800fb95 	.word	0x0800fb95
 800ddfc:	0801b59c 	.word	0x0801b59c

0800de00 <trim_len>:
 800de00:	b580      	push	{r7, lr}
 800de02:	b08a      	sub	sp, #40	@ 0x28
 800de04:	af00      	add	r7, sp, #0
 800de06:	6078      	str	r0, [r7, #4]
 800de08:	6039      	str	r1, [r7, #0]
 800de0a:	687b      	ldr	r3, [r7, #4]
 800de0c:	685b      	ldr	r3, [r3, #4]
 800de0e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800de10:	627b      	str	r3, [r7, #36]	@ 0x24
 800de12:	230e      	movs	r3, #14
 800de14:	623b      	str	r3, [r7, #32]
 800de16:	2318      	movs	r3, #24
 800de18:	61fb      	str	r3, [r7, #28]
 800de1a:	233c      	movs	r3, #60	@ 0x3c
 800de1c:	61bb      	str	r3, [r7, #24]
 800de1e:	2308      	movs	r3, #8
 800de20:	617b      	str	r3, [r7, #20]
 800de22:	6a3a      	ldr	r2, [r7, #32]
 800de24:	69fb      	ldr	r3, [r7, #28]
 800de26:	441a      	add	r2, r3
 800de28:	687b      	ldr	r3, [r7, #4]
 800de2a:	f893 30ad 	ldrb.w	r3, [r3, #173]	@ 0xad
 800de2e:	f003 0301 	and.w	r3, r3, #1
 800de32:	b2db      	uxtb	r3, r3
 800de34:	2b00      	cmp	r3, #0
 800de36:	d001      	beq.n	800de3c <trim_len+0x3c>
 800de38:	697b      	ldr	r3, [r7, #20]
 800de3a:	e000      	b.n	800de3e <trim_len+0x3e>
 800de3c:	69bb      	ldr	r3, [r7, #24]
 800de3e:	4413      	add	r3, r2
 800de40:	613b      	str	r3, [r7, #16]
 800de42:	687b      	ldr	r3, [r7, #4]
 800de44:	f893 30ad 	ldrb.w	r3, [r3, #173]	@ 0xad
 800de48:	f003 0301 	and.w	r3, r3, #1
 800de4c:	b2db      	uxtb	r3, r3
 800de4e:	2b00      	cmp	r3, #0
 800de50:	d103      	bne.n	800de5a <trim_len+0x5a>
 800de52:	693a      	ldr	r2, [r7, #16]
 800de54:	6a3b      	ldr	r3, [r7, #32]
 800de56:	1ad3      	subs	r3, r2, r3
 800de58:	e000      	b.n	800de5c <trim_len+0x5c>
 800de5a:	2344      	movs	r3, #68	@ 0x44
 800de5c:	60fb      	str	r3, [r7, #12]
 800de5e:	683a      	ldr	r2, [r7, #0]
 800de60:	693b      	ldr	r3, [r7, #16]
 800de62:	441a      	add	r2, r3
 800de64:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800de66:	699b      	ldr	r3, [r3, #24]
 800de68:	429a      	cmp	r2, r3
 800de6a:	d904      	bls.n	800de76 <trim_len+0x76>
 800de6c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800de6e:	699a      	ldr	r2, [r3, #24]
 800de70:	693b      	ldr	r3, [r7, #16]
 800de72:	1ad3      	subs	r3, r2, r3
 800de74:	603b      	str	r3, [r7, #0]
 800de76:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800de78:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 800de7c:	461a      	mov	r2, r3
 800de7e:	68fb      	ldr	r3, [r7, #12]
 800de80:	4293      	cmp	r3, r2
 800de82:	d913      	bls.n	800deac <trim_len+0xac>
 800de84:	4b20      	ldr	r3, [pc, #128]	@ (800df08 <trim_len+0x108>)
 800de86:	681b      	ldr	r3, [r3, #0]
 800de88:	2b00      	cmp	r3, #0
 800de8a:	dd0a      	ble.n	800dea2 <trim_len+0xa2>
 800de8c:	4b1f      	ldr	r3, [pc, #124]	@ (800df0c <trim_len+0x10c>)
 800de8e:	f240 2235 	movw	r2, #565	@ 0x235
 800de92:	491f      	ldr	r1, [pc, #124]	@ (800df10 <trim_len+0x110>)
 800de94:	2001      	movs	r0, #1
 800de96:	f7fe fb09 	bl	800c4ac <mg_log_prefix>
 800de9a:	68f9      	ldr	r1, [r7, #12]
 800de9c:	481d      	ldr	r0, [pc, #116]	@ (800df14 <trim_len+0x114>)
 800de9e:	f7fe fb55 	bl	800c54c <mg_log>
 800dea2:	68fb      	ldr	r3, [r7, #12]
 800dea4:	b29a      	uxth	r2, r3
 800dea6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800dea8:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40
 800deac:	683a      	ldr	r2, [r7, #0]
 800deae:	693b      	ldr	r3, [r7, #16]
 800deb0:	441a      	add	r2, r3
 800deb2:	6a3b      	ldr	r3, [r7, #32]
 800deb4:	1ad3      	subs	r3, r2, r3
 800deb6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800deb8:	f8b2 2040 	ldrh.w	r2, [r2, #64]	@ 0x40
 800debc:	4293      	cmp	r3, r2
 800debe:	d91e      	bls.n	800defe <trim_len+0xfe>
 800dec0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800dec2:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 800dec6:	461a      	mov	r2, r3
 800dec8:	693b      	ldr	r3, [r7, #16]
 800deca:	1ad3      	subs	r3, r2, r3
 800decc:	6a3a      	ldr	r2, [r7, #32]
 800dece:	4413      	add	r3, r2
 800ded0:	603b      	str	r3, [r7, #0]
 800ded2:	687b      	ldr	r3, [r7, #4]
 800ded4:	f893 30ad 	ldrb.w	r3, [r3, #173]	@ 0xad
 800ded8:	f003 0301 	and.w	r3, r3, #1
 800dedc:	b2db      	uxtb	r3, r3
 800dede:	2b00      	cmp	r3, #0
 800dee0:	d00d      	beq.n	800defe <trim_len+0xfe>
 800dee2:	4b09      	ldr	r3, [pc, #36]	@ (800df08 <trim_len+0x108>)
 800dee4:	681b      	ldr	r3, [r3, #0]
 800dee6:	2b00      	cmp	r3, #0
 800dee8:	dd09      	ble.n	800defe <trim_len+0xfe>
 800deea:	4b08      	ldr	r3, [pc, #32]	@ (800df0c <trim_len+0x10c>)
 800deec:	f44f 720f 	mov.w	r2, #572	@ 0x23c
 800def0:	4907      	ldr	r1, [pc, #28]	@ (800df10 <trim_len+0x110>)
 800def2:	2001      	movs	r0, #1
 800def4:	f7fe fada 	bl	800c4ac <mg_log_prefix>
 800def8:	4807      	ldr	r0, [pc, #28]	@ (800df18 <trim_len+0x118>)
 800defa:	f7fe fb27 	bl	800c54c <mg_log>
 800defe:	683b      	ldr	r3, [r7, #0]
 800df00:	4618      	mov	r0, r3
 800df02:	3728      	adds	r7, #40	@ 0x28
 800df04:	46bd      	mov	sp, r7
 800df06:	bd80      	pop	{r7, pc}
 800df08:	24000048 	.word	0x24000048
 800df0c:	0801c080 	.word	0x0801c080
 800df10:	0801b22c 	.word	0x0801b22c
 800df14:	0801b5ac 	.word	0x0801b5ac
 800df18:	0801b5d8 	.word	0x0801b5d8

0800df1c <mg_io_send>:
 800df1c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800df1e:	b08f      	sub	sp, #60	@ 0x3c
 800df20:	af06      	add	r7, sp, #24
 800df22:	60f8      	str	r0, [r7, #12]
 800df24:	60b9      	str	r1, [r7, #8]
 800df26:	607a      	str	r2, [r7, #4]
 800df28:	68fb      	ldr	r3, [r7, #12]
 800df2a:	685b      	ldr	r3, [r3, #4]
 800df2c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800df2e:	61fb      	str	r3, [r7, #28]
 800df30:	68fb      	ldr	r3, [r7, #12]
 800df32:	33b0      	adds	r3, #176	@ 0xb0
 800df34:	61bb      	str	r3, [r7, #24]
 800df36:	68fb      	ldr	r3, [r7, #12]
 800df38:	331c      	adds	r3, #28
 800df3a:	681b      	ldr	r3, [r3, #0]
 800df3c:	617b      	str	r3, [r7, #20]
 800df3e:	6879      	ldr	r1, [r7, #4]
 800df40:	68f8      	ldr	r0, [r7, #12]
 800df42:	f7ff ff5d 	bl	800de00 <trim_len>
 800df46:	6078      	str	r0, [r7, #4]
 800df48:	68fb      	ldr	r3, [r7, #12]
 800df4a:	f893 30ad 	ldrb.w	r3, [r3, #173]	@ 0xad
 800df4e:	f003 0301 	and.w	r3, r3, #1
 800df52:	b2db      	uxtb	r3, r3
 800df54:	2b00      	cmp	r3, #0
 800df56:	d015      	beq.n	800df84 <mg_io_send+0x68>
 800df58:	69bb      	ldr	r3, [r7, #24]
 800df5a:	f103 0110 	add.w	r1, r3, #16
 800df5e:	69fb      	ldr	r3, [r7, #28]
 800df60:	6898      	ldr	r0, [r3, #8]
 800df62:	68fb      	ldr	r3, [r7, #12]
 800df64:	8b1c      	ldrh	r4, [r3, #24]
 800df66:	68fb      	ldr	r3, [r7, #12]
 800df68:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800df6a:	687a      	ldr	r2, [r7, #4]
 800df6c:	9203      	str	r2, [sp, #12]
 800df6e:	68ba      	ldr	r2, [r7, #8]
 800df70:	9202      	str	r2, [sp, #8]
 800df72:	9301      	str	r3, [sp, #4]
 800df74:	697b      	ldr	r3, [r7, #20]
 800df76:	9300      	str	r3, [sp, #0]
 800df78:	4623      	mov	r3, r4
 800df7a:	4602      	mov	r2, r0
 800df7c:	69f8      	ldr	r0, [r7, #28]
 800df7e:	f7fe fdfb 	bl	800cb78 <tx_udp>
 800df82:	e03d      	b.n	800e000 <mg_io_send+0xe4>
 800df84:	69bb      	ldr	r3, [r7, #24]
 800df86:	f103 0610 	add.w	r6, r3, #16
 800df8a:	68fb      	ldr	r3, [r7, #12]
 800df8c:	8b1c      	ldrh	r4, [r3, #24]
 800df8e:	68fb      	ldr	r3, [r7, #12]
 800df90:	8d9d      	ldrh	r5, [r3, #44]	@ 0x2c
 800df92:	69bb      	ldr	r3, [r7, #24]
 800df94:	681b      	ldr	r3, [r3, #0]
 800df96:	4618      	mov	r0, r3
 800df98:	f002 fbed 	bl	8010776 <mg_ntohl>
 800df9c:	6038      	str	r0, [r7, #0]
 800df9e:	69bb      	ldr	r3, [r7, #24]
 800dfa0:	685b      	ldr	r3, [r3, #4]
 800dfa2:	4618      	mov	r0, r3
 800dfa4:	f002 fbe7 	bl	8010776 <mg_ntohl>
 800dfa8:	4602      	mov	r2, r0
 800dfaa:	687b      	ldr	r3, [r7, #4]
 800dfac:	9305      	str	r3, [sp, #20]
 800dfae:	68bb      	ldr	r3, [r7, #8]
 800dfb0:	9304      	str	r3, [sp, #16]
 800dfb2:	9203      	str	r2, [sp, #12]
 800dfb4:	683b      	ldr	r3, [r7, #0]
 800dfb6:	9302      	str	r3, [sp, #8]
 800dfb8:	9501      	str	r5, [sp, #4]
 800dfba:	9400      	str	r4, [sp, #0]
 800dfbc:	2318      	movs	r3, #24
 800dfbe:	697a      	ldr	r2, [r7, #20]
 800dfc0:	4631      	mov	r1, r6
 800dfc2:	69f8      	ldr	r0, [r7, #28]
 800dfc4:	f7ff fd52 	bl	800da6c <tx_tcp>
 800dfc8:	6138      	str	r0, [r7, #16]
 800dfca:	693b      	ldr	r3, [r7, #16]
 800dfcc:	2b00      	cmp	r3, #0
 800dfce:	d102      	bne.n	800dfd6 <mg_io_send+0xba>
 800dfd0:	f06f 0301 	mvn.w	r3, #1
 800dfd4:	e015      	b.n	800e002 <mg_io_send+0xe6>
 800dfd6:	693b      	ldr	r3, [r7, #16]
 800dfd8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800dfdc:	d102      	bne.n	800dfe4 <mg_io_send+0xc8>
 800dfde:	f04f 33ff 	mov.w	r3, #4294967295
 800dfe2:	e00e      	b.n	800e002 <mg_io_send+0xe6>
 800dfe4:	69bb      	ldr	r3, [r7, #24]
 800dfe6:	681a      	ldr	r2, [r3, #0]
 800dfe8:	687b      	ldr	r3, [r7, #4]
 800dfea:	441a      	add	r2, r3
 800dfec:	69bb      	ldr	r3, [r7, #24]
 800dfee:	601a      	str	r2, [r3, #0]
 800dff0:	69bb      	ldr	r3, [r7, #24]
 800dff2:	7d9b      	ldrb	r3, [r3, #22]
 800dff4:	2b01      	cmp	r3, #1
 800dff6:	d103      	bne.n	800e000 <mg_io_send+0xe4>
 800dff8:	2100      	movs	r1, #0
 800dffa:	68f8      	ldr	r0, [r7, #12]
 800dffc:	f7fe fc08 	bl	800c810 <settmout>
 800e000:	687b      	ldr	r3, [r7, #4]
 800e002:	4618      	mov	r0, r3
 800e004:	3724      	adds	r7, #36	@ 0x24
 800e006:	46bd      	mov	sp, r7
 800e008:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

0800e00c <read_conn>:
 800e00c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e010:	b092      	sub	sp, #72	@ 0x48
 800e012:	af06      	add	r7, sp, #24
 800e014:	60f8      	str	r0, [r7, #12]
 800e016:	60b9      	str	r1, [r7, #8]
 800e018:	68fb      	ldr	r3, [r7, #12]
 800e01a:	33b0      	adds	r3, #176	@ 0xb0
 800e01c:	62bb      	str	r3, [r7, #40]	@ 0x28
 800e01e:	68fb      	ldr	r3, [r7, #12]
 800e020:	f893 30ac 	ldrb.w	r3, [r3, #172]	@ 0xac
 800e024:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800e028:	b2db      	uxtb	r3, r3
 800e02a:	2b00      	cmp	r3, #0
 800e02c:	d002      	beq.n	800e034 <read_conn+0x28>
 800e02e:	68fb      	ldr	r3, [r7, #12]
 800e030:	3368      	adds	r3, #104	@ 0x68
 800e032:	e001      	b.n	800e038 <read_conn+0x2c>
 800e034:	68fb      	ldr	r3, [r7, #12]
 800e036:	3338      	adds	r3, #56	@ 0x38
 800e038:	627b      	str	r3, [r7, #36]	@ 0x24
 800e03a:	68bb      	ldr	r3, [r7, #8]
 800e03c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800e03e:	685b      	ldr	r3, [r3, #4]
 800e040:	4618      	mov	r0, r3
 800e042:	f002 fb98 	bl	8010776 <mg_ntohl>
 800e046:	6238      	str	r0, [r7, #32]
 800e048:	68fb      	ldr	r3, [r7, #12]
 800e04a:	331c      	adds	r3, #28
 800e04c:	681b      	ldr	r3, [r3, #0]
 800e04e:	61bb      	str	r3, [r7, #24]
 800e050:	68bb      	ldr	r3, [r7, #8]
 800e052:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800e054:	7b5b      	ldrb	r3, [r3, #13]
 800e056:	f003 0301 	and.w	r3, r3, #1
 800e05a:	2b00      	cmp	r3, #0
 800e05c:	d070      	beq.n	800e140 <read_conn+0x134>
 800e05e:	2310      	movs	r3, #16
 800e060:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 800e064:	68bb      	ldr	r3, [r7, #8]
 800e066:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800e068:	685b      	ldr	r3, [r3, #4]
 800e06a:	4618      	mov	r0, r3
 800e06c:	f002 fb83 	bl	8010776 <mg_ntohl>
 800e070:	4602      	mov	r2, r0
 800e072:	68bb      	ldr	r3, [r7, #8]
 800e074:	68db      	ldr	r3, [r3, #12]
 800e076:	4413      	add	r3, r2
 800e078:	1c5a      	adds	r2, r3, #1
 800e07a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e07c:	605a      	str	r2, [r3, #4]
 800e07e:	68fb      	ldr	r3, [r7, #12]
 800e080:	f893 30ad 	ldrb.w	r3, [r3, #173]	@ 0xad
 800e084:	f003 0310 	and.w	r3, r3, #16
 800e088:	b2db      	uxtb	r3, r3
 800e08a:	2b00      	cmp	r3, #0
 800e08c:	d01e      	beq.n	800e0cc <read_conn+0xc0>
 800e08e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e090:	7d9b      	ldrb	r3, [r3, #22]
 800e092:	2b04      	cmp	r3, #4
 800e094:	d11a      	bne.n	800e0cc <read_conn+0xc0>
 800e096:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e098:	681c      	ldr	r4, [r3, #0]
 800e09a:	68bb      	ldr	r3, [r7, #8]
 800e09c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800e09e:	689b      	ldr	r3, [r3, #8]
 800e0a0:	4618      	mov	r0, r3
 800e0a2:	f002 fb68 	bl	8010776 <mg_ntohl>
 800e0a6:	4603      	mov	r3, r0
 800e0a8:	429c      	cmp	r4, r3
 800e0aa:	d105      	bne.n	800e0b8 <read_conn+0xac>
 800e0ac:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e0ae:	681b      	ldr	r3, [r3, #0]
 800e0b0:	1c5a      	adds	r2, r3, #1
 800e0b2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e0b4:	601a      	str	r2, [r3, #0]
 800e0b6:	e01a      	b.n	800e0ee <read_conn+0xe2>
 800e0b8:	68bb      	ldr	r3, [r7, #8]
 800e0ba:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800e0bc:	689b      	ldr	r3, [r3, #8]
 800e0be:	4618      	mov	r0, r3
 800e0c0:	f002 fb59 	bl	8010776 <mg_ntohl>
 800e0c4:	4602      	mov	r2, r0
 800e0c6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e0c8:	601a      	str	r2, [r3, #0]
 800e0ca:	e010      	b.n	800e0ee <read_conn+0xe2>
 800e0cc:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800e0d0:	f043 0301 	orr.w	r3, r3, #1
 800e0d4:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 800e0d8:	68fa      	ldr	r2, [r7, #12]
 800e0da:	f892 30ad 	ldrb.w	r3, [r2, #173]	@ 0xad
 800e0de:	f043 0310 	orr.w	r3, r3, #16
 800e0e2:	f882 30ad 	strb.w	r3, [r2, #173]	@ 0xad
 800e0e6:	2104      	movs	r1, #4
 800e0e8:	68f8      	ldr	r0, [r7, #12]
 800e0ea:	f7fe fb91 	bl	800c810 <settmout>
 800e0ee:	68fb      	ldr	r3, [r7, #12]
 800e0f0:	685b      	ldr	r3, [r3, #4]
 800e0f2:	6bde      	ldr	r6, [r3, #60]	@ 0x3c
 800e0f4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e0f6:	f103 0810 	add.w	r8, r3, #16
 800e0fa:	69bb      	ldr	r3, [r7, #24]
 800e0fc:	607b      	str	r3, [r7, #4]
 800e0fe:	68fb      	ldr	r3, [r7, #12]
 800e100:	8b1c      	ldrh	r4, [r3, #24]
 800e102:	68fb      	ldr	r3, [r7, #12]
 800e104:	8d9d      	ldrh	r5, [r3, #44]	@ 0x2c
 800e106:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e108:	681b      	ldr	r3, [r3, #0]
 800e10a:	4618      	mov	r0, r3
 800e10c:	f002 fb33 	bl	8010776 <mg_ntohl>
 800e110:	6038      	str	r0, [r7, #0]
 800e112:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e114:	685b      	ldr	r3, [r3, #4]
 800e116:	4618      	mov	r0, r3
 800e118:	f002 fb2d 	bl	8010776 <mg_ntohl>
 800e11c:	4602      	mov	r2, r0
 800e11e:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800e122:	2100      	movs	r1, #0
 800e124:	9105      	str	r1, [sp, #20]
 800e126:	499e      	ldr	r1, [pc, #632]	@ (800e3a0 <read_conn+0x394>)
 800e128:	9104      	str	r1, [sp, #16]
 800e12a:	9203      	str	r2, [sp, #12]
 800e12c:	6839      	ldr	r1, [r7, #0]
 800e12e:	9102      	str	r1, [sp, #8]
 800e130:	9501      	str	r5, [sp, #4]
 800e132:	9400      	str	r4, [sp, #0]
 800e134:	687a      	ldr	r2, [r7, #4]
 800e136:	4641      	mov	r1, r8
 800e138:	4630      	mov	r0, r6
 800e13a:	f7ff fc97 	bl	800da6c <tx_tcp>
 800e13e:	e129      	b.n	800e394 <read_conn+0x388>
 800e140:	68bb      	ldr	r3, [r7, #8]
 800e142:	68db      	ldr	r3, [r3, #12]
 800e144:	2b00      	cmp	r3, #0
 800e146:	f000 8125 	beq.w	800e394 <read_conn+0x388>
 800e14a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e14c:	685b      	ldr	r3, [r3, #4]
 800e14e:	6a3a      	ldr	r2, [r7, #32]
 800e150:	429a      	cmp	r2, r3
 800e152:	d059      	beq.n	800e208 <read_conn+0x1fc>
 800e154:	68bb      	ldr	r3, [r7, #8]
 800e156:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800e158:	685b      	ldr	r3, [r3, #4]
 800e15a:	4618      	mov	r0, r3
 800e15c:	f002 fb0b 	bl	8010776 <mg_ntohl>
 800e160:	4602      	mov	r2, r0
 800e162:	68bb      	ldr	r3, [r7, #8]
 800e164:	68db      	ldr	r3, [r3, #12]
 800e166:	4413      	add	r3, r2
 800e168:	61fb      	str	r3, [r7, #28]
 800e16a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e16c:	685b      	ldr	r3, [r3, #4]
 800e16e:	69fa      	ldr	r2, [r7, #28]
 800e170:	429a      	cmp	r2, r3
 800e172:	d10f      	bne.n	800e194 <read_conn+0x188>
 800e174:	4b8b      	ldr	r3, [pc, #556]	@ (800e3a4 <read_conn+0x398>)
 800e176:	681b      	ldr	r3, [r3, #0]
 800e178:	2b03      	cmp	r3, #3
 800e17a:	f340 810b 	ble.w	800e394 <read_conn+0x388>
 800e17e:	4b8a      	ldr	r3, [pc, #552]	@ (800e3a8 <read_conn+0x39c>)
 800e180:	f44f 721e 	mov.w	r2, #632	@ 0x278
 800e184:	4989      	ldr	r1, [pc, #548]	@ (800e3ac <read_conn+0x3a0>)
 800e186:	2004      	movs	r0, #4
 800e188:	f7fe f990 	bl	800c4ac <mg_log_prefix>
 800e18c:	4888      	ldr	r0, [pc, #544]	@ (800e3b0 <read_conn+0x3a4>)
 800e18e:	f7fe f9dd 	bl	800c54c <mg_log>
 800e192:	e0ff      	b.n	800e394 <read_conn+0x388>
 800e194:	4b83      	ldr	r3, [pc, #524]	@ (800e3a4 <read_conn+0x398>)
 800e196:	681b      	ldr	r3, [r3, #0]
 800e198:	2b03      	cmp	r3, #3
 800e19a:	dd0d      	ble.n	800e1b8 <read_conn+0x1ac>
 800e19c:	4b82      	ldr	r3, [pc, #520]	@ (800e3a8 <read_conn+0x39c>)
 800e19e:	f240 227a 	movw	r2, #634	@ 0x27a
 800e1a2:	4982      	ldr	r1, [pc, #520]	@ (800e3ac <read_conn+0x3a0>)
 800e1a4:	2004      	movs	r0, #4
 800e1a6:	f7fe f981 	bl	800c4ac <mg_log_prefix>
 800e1aa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e1ac:	685a      	ldr	r2, [r3, #4]
 800e1ae:	69fb      	ldr	r3, [r7, #28]
 800e1b0:	6a39      	ldr	r1, [r7, #32]
 800e1b2:	4880      	ldr	r0, [pc, #512]	@ (800e3b4 <read_conn+0x3a8>)
 800e1b4:	f7fe f9ca 	bl	800c54c <mg_log>
 800e1b8:	68fb      	ldr	r3, [r7, #12]
 800e1ba:	685b      	ldr	r3, [r3, #4]
 800e1bc:	6bde      	ldr	r6, [r3, #60]	@ 0x3c
 800e1be:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e1c0:	f103 0810 	add.w	r8, r3, #16
 800e1c4:	69bb      	ldr	r3, [r7, #24]
 800e1c6:	607b      	str	r3, [r7, #4]
 800e1c8:	68fb      	ldr	r3, [r7, #12]
 800e1ca:	8b1c      	ldrh	r4, [r3, #24]
 800e1cc:	68fb      	ldr	r3, [r7, #12]
 800e1ce:	8d9d      	ldrh	r5, [r3, #44]	@ 0x2c
 800e1d0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e1d2:	681b      	ldr	r3, [r3, #0]
 800e1d4:	4618      	mov	r0, r3
 800e1d6:	f002 face 	bl	8010776 <mg_ntohl>
 800e1da:	6038      	str	r0, [r7, #0]
 800e1dc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e1de:	685b      	ldr	r3, [r3, #4]
 800e1e0:	4618      	mov	r0, r3
 800e1e2:	f002 fac8 	bl	8010776 <mg_ntohl>
 800e1e6:	4603      	mov	r3, r0
 800e1e8:	2200      	movs	r2, #0
 800e1ea:	9205      	str	r2, [sp, #20]
 800e1ec:	4a6c      	ldr	r2, [pc, #432]	@ (800e3a0 <read_conn+0x394>)
 800e1ee:	9204      	str	r2, [sp, #16]
 800e1f0:	9303      	str	r3, [sp, #12]
 800e1f2:	6839      	ldr	r1, [r7, #0]
 800e1f4:	9102      	str	r1, [sp, #8]
 800e1f6:	9501      	str	r5, [sp, #4]
 800e1f8:	9400      	str	r4, [sp, #0]
 800e1fa:	2310      	movs	r3, #16
 800e1fc:	687a      	ldr	r2, [r7, #4]
 800e1fe:	4641      	mov	r1, r8
 800e200:	4630      	mov	r0, r6
 800e202:	f7ff fc33 	bl	800da6c <tx_tcp>
 800e206:	e0c5      	b.n	800e394 <read_conn+0x388>
 800e208:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e20a:	685a      	ldr	r2, [r3, #4]
 800e20c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e20e:	689b      	ldr	r3, [r3, #8]
 800e210:	1ad2      	subs	r2, r2, r3
 800e212:	68bb      	ldr	r3, [r7, #8]
 800e214:	68db      	ldr	r3, [r3, #12]
 800e216:	429a      	cmp	r2, r3
 800e218:	d210      	bcs.n	800e23c <read_conn+0x230>
 800e21a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e21c:	689a      	ldr	r2, [r3, #8]
 800e21e:	68bb      	ldr	r3, [r7, #8]
 800e220:	68db      	ldr	r3, [r3, #12]
 800e222:	4413      	add	r3, r2
 800e224:	4619      	mov	r1, r3
 800e226:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800e228:	f7fd fab2 	bl	800b790 <mg_iobuf_resize>
 800e22c:	4603      	mov	r3, r0
 800e22e:	2b00      	cmp	r3, #0
 800e230:	d104      	bne.n	800e23c <read_conn+0x230>
 800e232:	4961      	ldr	r1, [pc, #388]	@ (800e3b8 <read_conn+0x3ac>)
 800e234:	68f8      	ldr	r0, [r7, #12]
 800e236:	f7fa fe03 	bl	8008e40 <mg_error>
 800e23a:	e0ab      	b.n	800e394 <read_conn+0x388>
 800e23c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e23e:	681a      	ldr	r2, [r3, #0]
 800e240:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e242:	689b      	ldr	r3, [r3, #8]
 800e244:	18d0      	adds	r0, r2, r3
 800e246:	68bb      	ldr	r3, [r7, #8]
 800e248:	6899      	ldr	r1, [r3, #8]
 800e24a:	68bb      	ldr	r3, [r7, #8]
 800e24c:	68db      	ldr	r3, [r3, #12]
 800e24e:	461a      	mov	r2, r3
 800e250:	f00b fc7d 	bl	8019b4e <memcpy>
 800e254:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e256:	689a      	ldr	r2, [r3, #8]
 800e258:	68bb      	ldr	r3, [r7, #8]
 800e25a:	68db      	ldr	r3, [r3, #12]
 800e25c:	441a      	add	r2, r3
 800e25e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e260:	609a      	str	r2, [r3, #8]
 800e262:	4b50      	ldr	r3, [pc, #320]	@ (800e3a4 <read_conn+0x398>)
 800e264:	681b      	ldr	r3, [r3, #0]
 800e266:	2b03      	cmp	r3, #3
 800e268:	dd15      	ble.n	800e296 <read_conn+0x28a>
 800e26a:	4b4f      	ldr	r3, [pc, #316]	@ (800e3a8 <read_conn+0x39c>)
 800e26c:	f240 228b 	movw	r2, #651	@ 0x28b
 800e270:	494e      	ldr	r1, [pc, #312]	@ (800e3ac <read_conn+0x3a0>)
 800e272:	2004      	movs	r0, #4
 800e274:	f7fe f91a 	bl	800c4ac <mg_log_prefix>
 800e278:	68fb      	ldr	r3, [r7, #12]
 800e27a:	6b5c      	ldr	r4, [r3, #52]	@ 0x34
 800e27c:	68bb      	ldr	r3, [r7, #8]
 800e27e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800e280:	685b      	ldr	r3, [r3, #4]
 800e282:	4618      	mov	r0, r3
 800e284:	f002 fa77 	bl	8010776 <mg_ntohl>
 800e288:	4602      	mov	r2, r0
 800e28a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e28c:	685b      	ldr	r3, [r3, #4]
 800e28e:	4621      	mov	r1, r4
 800e290:	484a      	ldr	r0, [pc, #296]	@ (800e3bc <read_conn+0x3b0>)
 800e292:	f7fe f95b 	bl	800c54c <mg_log>
 800e296:	68bb      	ldr	r3, [r7, #8]
 800e298:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800e29a:	685b      	ldr	r3, [r3, #4]
 800e29c:	4618      	mov	r0, r3
 800e29e:	f002 fa6a 	bl	8010776 <mg_ntohl>
 800e2a2:	4602      	mov	r2, r0
 800e2a4:	68bb      	ldr	r3, [r7, #8]
 800e2a6:	68db      	ldr	r3, [r3, #12]
 800e2a8:	441a      	add	r2, r3
 800e2aa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e2ac:	605a      	str	r2, [r3, #4]
 800e2ae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e2b0:	7d9b      	ldrb	r3, [r3, #22]
 800e2b2:	2b01      	cmp	r3, #1
 800e2b4:	d003      	beq.n	800e2be <read_conn+0x2b2>
 800e2b6:	2101      	movs	r1, #1
 800e2b8:	68f8      	ldr	r0, [r7, #12]
 800e2ba:	f7fe faa9 	bl	800c810 <settmout>
 800e2be:	68fb      	ldr	r3, [r7, #12]
 800e2c0:	f893 30ac 	ldrb.w	r3, [r3, #172]	@ 0xac
 800e2c4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800e2c8:	b2db      	uxtb	r3, r3
 800e2ca:	2b00      	cmp	r3, #0
 800e2cc:	d00b      	beq.n	800e2e6 <read_conn+0x2da>
 800e2ce:	68fb      	ldr	r3, [r7, #12]
 800e2d0:	f893 30ac 	ldrb.w	r3, [r3, #172]	@ 0xac
 800e2d4:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 800e2d8:	b2db      	uxtb	r3, r3
 800e2da:	2b00      	cmp	r3, #0
 800e2dc:	d003      	beq.n	800e2e6 <read_conn+0x2da>
 800e2de:	68f8      	ldr	r0, [r7, #12]
 800e2e0:	f002 f8b2 	bl	8010448 <mg_tls_handshake>
 800e2e4:	e056      	b.n	800e394 <read_conn+0x388>
 800e2e6:	68fb      	ldr	r3, [r7, #12]
 800e2e8:	f893 30ac 	ldrb.w	r3, [r3, #172]	@ 0xac
 800e2ec:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800e2f0:	b2db      	uxtb	r3, r3
 800e2f2:	2b00      	cmp	r3, #0
 800e2f4:	d046      	beq.n	800e384 <read_conn+0x378>
 800e2f6:	68fb      	ldr	r3, [r7, #12]
 800e2f8:	3338      	adds	r3, #56	@ 0x38
 800e2fa:	627b      	str	r3, [r7, #36]	@ 0x24
 800e2fc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e2fe:	685a      	ldr	r2, [r3, #4]
 800e300:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e302:	689b      	ldr	r3, [r3, #8]
 800e304:	1ad2      	subs	r2, r2, r3
 800e306:	68bb      	ldr	r3, [r7, #8]
 800e308:	68db      	ldr	r3, [r3, #12]
 800e30a:	429a      	cmp	r2, r3
 800e30c:	d210      	bcs.n	800e330 <read_conn+0x324>
 800e30e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e310:	689a      	ldr	r2, [r3, #8]
 800e312:	68bb      	ldr	r3, [r7, #8]
 800e314:	68db      	ldr	r3, [r3, #12]
 800e316:	4413      	add	r3, r2
 800e318:	4619      	mov	r1, r3
 800e31a:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800e31c:	f7fd fa38 	bl	800b790 <mg_iobuf_resize>
 800e320:	4603      	mov	r3, r0
 800e322:	2b00      	cmp	r3, #0
 800e324:	d104      	bne.n	800e330 <read_conn+0x324>
 800e326:	4924      	ldr	r1, [pc, #144]	@ (800e3b8 <read_conn+0x3ac>)
 800e328:	68f8      	ldr	r0, [r7, #12]
 800e32a:	f7fa fd89 	bl	8008e40 <mg_error>
 800e32e:	e031      	b.n	800e394 <read_conn+0x388>
 800e330:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e332:	681a      	ldr	r2, [r3, #0]
 800e334:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e336:	689b      	ldr	r3, [r3, #8]
 800e338:	18d1      	adds	r1, r2, r3
 800e33a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e33c:	685a      	ldr	r2, [r3, #4]
 800e33e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e340:	689b      	ldr	r3, [r3, #8]
 800e342:	1ad3      	subs	r3, r2, r3
 800e344:	461a      	mov	r2, r3
 800e346:	68f8      	ldr	r0, [r7, #12]
 800e348:	f002 f892 	bl	8010470 <mg_tls_recv>
 800e34c:	4603      	mov	r3, r0
 800e34e:	617b      	str	r3, [r7, #20]
 800e350:	697b      	ldr	r3, [r7, #20]
 800e352:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e356:	d104      	bne.n	800e362 <read_conn+0x356>
 800e358:	4919      	ldr	r1, [pc, #100]	@ (800e3c0 <read_conn+0x3b4>)
 800e35a:	68f8      	ldr	r0, [r7, #12]
 800e35c:	f7fa fd70 	bl	8008e40 <mg_error>
 800e360:	e018      	b.n	800e394 <read_conn+0x388>
 800e362:	697b      	ldr	r3, [r7, #20]
 800e364:	2b00      	cmp	r3, #0
 800e366:	dd15      	ble.n	800e394 <read_conn+0x388>
 800e368:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e36a:	689b      	ldr	r3, [r3, #8]
 800e36c:	697a      	ldr	r2, [r7, #20]
 800e36e:	441a      	add	r2, r3
 800e370:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e372:	609a      	str	r2, [r3, #8]
 800e374:	f107 0314 	add.w	r3, r7, #20
 800e378:	461a      	mov	r2, r3
 800e37a:	2107      	movs	r1, #7
 800e37c:	68f8      	ldr	r0, [r7, #12]
 800e37e:	f7fa fd3f 	bl	8008e00 <mg_call>
 800e382:	e007      	b.n	800e394 <read_conn+0x388>
 800e384:	68bb      	ldr	r3, [r7, #8]
 800e386:	330c      	adds	r3, #12
 800e388:	461a      	mov	r2, r3
 800e38a:	2107      	movs	r1, #7
 800e38c:	68f8      	ldr	r0, [r7, #12]
 800e38e:	f7fa fd37 	bl	8008e00 <mg_call>
 800e392:	e7ff      	b.n	800e394 <read_conn+0x388>
 800e394:	bf00      	nop
 800e396:	3730      	adds	r7, #48	@ 0x30
 800e398:	46bd      	mov	sp, r7
 800e39a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e39e:	bf00      	nop
 800e3a0:	0801ab90 	.word	0x0801ab90
 800e3a4:	24000048 	.word	0x24000048
 800e3a8:	0801c08c 	.word	0x0801c08c
 800e3ac:	0801b22c 	.word	0x0801b22c
 800e3b0:	0801b604 	.word	0x0801b604
 800e3b4:	0801b61c 	.word	0x0801b61c
 800e3b8:	0801b570 	.word	0x0801b570
 800e3bc:	0801b634 	.word	0x0801b634
 800e3c0:	0801b648 	.word	0x0801b648

0800e3c4 <rx_tcp>:
 800e3c4:	b590      	push	{r4, r7, lr}
 800e3c6:	b089      	sub	sp, #36	@ 0x24
 800e3c8:	af02      	add	r7, sp, #8
 800e3ca:	6078      	str	r0, [r7, #4]
 800e3cc:	6039      	str	r1, [r7, #0]
 800e3ce:	687b      	ldr	r3, [r7, #4]
 800e3d0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e3d2:	2200      	movs	r2, #0
 800e3d4:	6839      	ldr	r1, [r7, #0]
 800e3d6:	4618      	mov	r0, r3
 800e3d8:	f7fe fd7c 	bl	800ced4 <getpeer>
 800e3dc:	6178      	str	r0, [r7, #20]
 800e3de:	697b      	ldr	r3, [r7, #20]
 800e3e0:	2b00      	cmp	r3, #0
 800e3e2:	d002      	beq.n	800e3ea <rx_tcp+0x26>
 800e3e4:	697b      	ldr	r3, [r7, #20]
 800e3e6:	33b0      	adds	r3, #176	@ 0xb0
 800e3e8:	e000      	b.n	800e3ec <rx_tcp+0x28>
 800e3ea:	2300      	movs	r3, #0
 800e3ec:	613b      	str	r3, [r7, #16]
 800e3ee:	697b      	ldr	r3, [r7, #20]
 800e3f0:	2b00      	cmp	r3, #0
 800e3f2:	d03c      	beq.n	800e46e <rx_tcp+0xaa>
 800e3f4:	697b      	ldr	r3, [r7, #20]
 800e3f6:	f893 30ac 	ldrb.w	r3, [r3, #172]	@ 0xac
 800e3fa:	f003 0320 	and.w	r3, r3, #32
 800e3fe:	b2db      	uxtb	r3, r3
 800e400:	2b00      	cmp	r3, #0
 800e402:	d034      	beq.n	800e46e <rx_tcp+0xaa>
 800e404:	683b      	ldr	r3, [r7, #0]
 800e406:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800e408:	7b5b      	ldrb	r3, [r3, #13]
 800e40a:	2b12      	cmp	r3, #18
 800e40c:	d12f      	bne.n	800e46e <rx_tcp+0xaa>
 800e40e:	683b      	ldr	r3, [r7, #0]
 800e410:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800e412:	689b      	ldr	r3, [r3, #8]
 800e414:	4618      	mov	r0, r3
 800e416:	f002 f9ae 	bl	8010776 <mg_ntohl>
 800e41a:	4602      	mov	r2, r0
 800e41c:	693b      	ldr	r3, [r7, #16]
 800e41e:	601a      	str	r2, [r3, #0]
 800e420:	683b      	ldr	r3, [r7, #0]
 800e422:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800e424:	685b      	ldr	r3, [r3, #4]
 800e426:	4618      	mov	r0, r3
 800e428:	f002 f9a5 	bl	8010776 <mg_ntohl>
 800e42c:	4603      	mov	r3, r0
 800e42e:	1c5a      	adds	r2, r3, #1
 800e430:	693b      	ldr	r3, [r7, #16]
 800e432:	605a      	str	r2, [r3, #4]
 800e434:	683b      	ldr	r3, [r7, #0]
 800e436:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800e438:	689b      	ldr	r3, [r3, #8]
 800e43a:	2200      	movs	r2, #0
 800e43c:	9201      	str	r2, [sp, #4]
 800e43e:	2200      	movs	r2, #0
 800e440:	9200      	str	r2, [sp, #0]
 800e442:	2210      	movs	r2, #16
 800e444:	6839      	ldr	r1, [r7, #0]
 800e446:	6878      	ldr	r0, [r7, #4]
 800e448:	f7ff fbdc 	bl	800dc04 <tx_tcp_pkt>
 800e44c:	697a      	ldr	r2, [r7, #20]
 800e44e:	f892 30ac 	ldrb.w	r3, [r2, #172]	@ 0xac
 800e452:	f36f 1345 	bfc	r3, #5, #1
 800e456:	f882 30ac 	strb.w	r3, [r2, #172]	@ 0xac
 800e45a:	2100      	movs	r1, #0
 800e45c:	6978      	ldr	r0, [r7, #20]
 800e45e:	f7fe f9d7 	bl	800c810 <settmout>
 800e462:	2200      	movs	r2, #0
 800e464:	2104      	movs	r1, #4
 800e466:	6978      	ldr	r0, [r7, #20]
 800e468:	f7fa fcca 	bl	8008e00 <mg_call>
 800e46c:	e0c8      	b.n	800e600 <rx_tcp+0x23c>
 800e46e:	697b      	ldr	r3, [r7, #20]
 800e470:	2b00      	cmp	r3, #0
 800e472:	d019      	beq.n	800e4a8 <rx_tcp+0xe4>
 800e474:	697b      	ldr	r3, [r7, #20]
 800e476:	f893 30ac 	ldrb.w	r3, [r3, #172]	@ 0xac
 800e47a:	f003 0320 	and.w	r3, r3, #32
 800e47e:	b2db      	uxtb	r3, r3
 800e480:	2b00      	cmp	r3, #0
 800e482:	d011      	beq.n	800e4a8 <rx_tcp+0xe4>
 800e484:	683b      	ldr	r3, [r7, #0]
 800e486:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800e488:	7b5b      	ldrb	r3, [r3, #13]
 800e48a:	2b10      	cmp	r3, #16
 800e48c:	d00c      	beq.n	800e4a8 <rx_tcp+0xe4>
 800e48e:	683b      	ldr	r3, [r7, #0]
 800e490:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800e492:	689b      	ldr	r3, [r3, #8]
 800e494:	2200      	movs	r2, #0
 800e496:	9201      	str	r2, [sp, #4]
 800e498:	2200      	movs	r2, #0
 800e49a:	9200      	str	r2, [sp, #0]
 800e49c:	2214      	movs	r2, #20
 800e49e:	6839      	ldr	r1, [r7, #0]
 800e4a0:	6878      	ldr	r0, [r7, #4]
 800e4a2:	f7ff fbaf 	bl	800dc04 <tx_tcp_pkt>
 800e4a6:	e0ab      	b.n	800e600 <rx_tcp+0x23c>
 800e4a8:	697b      	ldr	r3, [r7, #20]
 800e4aa:	2b00      	cmp	r3, #0
 800e4ac:	d00b      	beq.n	800e4c6 <rx_tcp+0x102>
 800e4ae:	683b      	ldr	r3, [r7, #0]
 800e4b0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800e4b2:	7b5b      	ldrb	r3, [r3, #13]
 800e4b4:	f003 0304 	and.w	r3, r3, #4
 800e4b8:	2b00      	cmp	r3, #0
 800e4ba:	d004      	beq.n	800e4c6 <rx_tcp+0x102>
 800e4bc:	4952      	ldr	r1, [pc, #328]	@ (800e608 <rx_tcp+0x244>)
 800e4be:	6978      	ldr	r0, [r7, #20]
 800e4c0:	f7fa fcbe 	bl	8008e40 <mg_error>
 800e4c4:	e09c      	b.n	800e600 <rx_tcp+0x23c>
 800e4c6:	697b      	ldr	r3, [r7, #20]
 800e4c8:	2b00      	cmp	r3, #0
 800e4ca:	d00f      	beq.n	800e4ec <rx_tcp+0x128>
 800e4cc:	693b      	ldr	r3, [r7, #16]
 800e4ce:	2200      	movs	r2, #0
 800e4d0:	75da      	strb	r2, [r3, #23]
 800e4d2:	693b      	ldr	r3, [r7, #16]
 800e4d4:	7d9b      	ldrb	r3, [r3, #22]
 800e4d6:	2b00      	cmp	r3, #0
 800e4d8:	d103      	bne.n	800e4e2 <rx_tcp+0x11e>
 800e4da:	2100      	movs	r1, #0
 800e4dc:	6978      	ldr	r0, [r7, #20]
 800e4de:	f7fe f997 	bl	800c810 <settmout>
 800e4e2:	6839      	ldr	r1, [r7, #0]
 800e4e4:	6978      	ldr	r0, [r7, #20]
 800e4e6:	f7ff fd91 	bl	800e00c <read_conn>
 800e4ea:	e089      	b.n	800e600 <rx_tcp+0x23c>
 800e4ec:	687b      	ldr	r3, [r7, #4]
 800e4ee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e4f0:	2201      	movs	r2, #1
 800e4f2:	6839      	ldr	r1, [r7, #0]
 800e4f4:	4618      	mov	r0, r3
 800e4f6:	f7fe fced 	bl	800ced4 <getpeer>
 800e4fa:	6178      	str	r0, [r7, #20]
 800e4fc:	697b      	ldr	r3, [r7, #20]
 800e4fe:	2b00      	cmp	r3, #0
 800e500:	d10c      	bne.n	800e51c <rx_tcp+0x158>
 800e502:	683b      	ldr	r3, [r7, #0]
 800e504:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800e506:	689b      	ldr	r3, [r3, #8]
 800e508:	2200      	movs	r2, #0
 800e50a:	9201      	str	r2, [sp, #4]
 800e50c:	2200      	movs	r2, #0
 800e50e:	9200      	str	r2, [sp, #0]
 800e510:	2214      	movs	r2, #20
 800e512:	6839      	ldr	r1, [r7, #0]
 800e514:	6878      	ldr	r0, [r7, #4]
 800e516:	f7ff fb75 	bl	800dc04 <tx_tcp_pkt>
 800e51a:	e071      	b.n	800e600 <rx_tcp+0x23c>
 800e51c:	683b      	ldr	r3, [r7, #0]
 800e51e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800e520:	7b5b      	ldrb	r3, [r3, #13]
 800e522:	f003 0304 	and.w	r3, r3, #4
 800e526:	2b00      	cmp	r3, #0
 800e528:	d00c      	beq.n	800e544 <rx_tcp+0x180>
 800e52a:	697b      	ldr	r3, [r7, #20]
 800e52c:	f893 30ac 	ldrb.w	r3, [r3, #172]	@ 0xac
 800e530:	f003 0304 	and.w	r3, r3, #4
 800e534:	b2db      	uxtb	r3, r3
 800e536:	2b00      	cmp	r3, #0
 800e538:	d062      	beq.n	800e600 <rx_tcp+0x23c>
 800e53a:	4933      	ldr	r1, [pc, #204]	@ (800e608 <rx_tcp+0x244>)
 800e53c:	6978      	ldr	r0, [r7, #20]
 800e53e:	f7fa fc7f 	bl	8008e40 <mg_error>
 800e542:	e05d      	b.n	800e600 <rx_tcp+0x23c>
 800e544:	683b      	ldr	r3, [r7, #0]
 800e546:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800e548:	7b5b      	ldrb	r3, [r3, #13]
 800e54a:	f003 0302 	and.w	r3, r3, #2
 800e54e:	2b00      	cmp	r3, #0
 800e550:	d016      	beq.n	800e580 <rx_tcp+0x1bc>
 800e552:	683b      	ldr	r3, [r7, #0]
 800e554:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800e556:	881b      	ldrh	r3, [r3, #0]
 800e558:	b29b      	uxth	r3, r3
 800e55a:	4618      	mov	r0, r3
 800e55c:	f002 f924 	bl	80107a8 <mg_ntohs>
 800e560:	4603      	mov	r3, r0
 800e562:	4618      	mov	r0, r3
 800e564:	f002 f907 	bl	8010776 <mg_ntohl>
 800e568:	60f8      	str	r0, [r7, #12]
 800e56a:	2300      	movs	r3, #0
 800e56c:	9301      	str	r3, [sp, #4]
 800e56e:	2300      	movs	r3, #0
 800e570:	9300      	str	r3, [sp, #0]
 800e572:	68fb      	ldr	r3, [r7, #12]
 800e574:	2212      	movs	r2, #18
 800e576:	6839      	ldr	r1, [r7, #0]
 800e578:	6878      	ldr	r0, [r7, #4]
 800e57a:	f7ff fb43 	bl	800dc04 <tx_tcp_pkt>
 800e57e:	e03f      	b.n	800e600 <rx_tcp+0x23c>
 800e580:	683b      	ldr	r3, [r7, #0]
 800e582:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800e584:	7b5b      	ldrb	r3, [r3, #13]
 800e586:	f003 0301 	and.w	r3, r3, #1
 800e58a:	2b00      	cmp	r3, #0
 800e58c:	d00c      	beq.n	800e5a8 <rx_tcp+0x1e4>
 800e58e:	683b      	ldr	r3, [r7, #0]
 800e590:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800e592:	689b      	ldr	r3, [r3, #8]
 800e594:	2200      	movs	r2, #0
 800e596:	9201      	str	r2, [sp, #4]
 800e598:	2200      	movs	r2, #0
 800e59a:	9200      	str	r2, [sp, #0]
 800e59c:	2211      	movs	r2, #17
 800e59e:	6839      	ldr	r1, [r7, #0]
 800e5a0:	6878      	ldr	r0, [r7, #4]
 800e5a2:	f7ff fb2f 	bl	800dc04 <tx_tcp_pkt>
 800e5a6:	e02b      	b.n	800e600 <rx_tcp+0x23c>
 800e5a8:	683b      	ldr	r3, [r7, #0]
 800e5aa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800e5ac:	689b      	ldr	r3, [r3, #8]
 800e5ae:	4618      	mov	r0, r3
 800e5b0:	f002 f8e1 	bl	8010776 <mg_ntohl>
 800e5b4:	4604      	mov	r4, r0
 800e5b6:	683b      	ldr	r3, [r7, #0]
 800e5b8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800e5ba:	881b      	ldrh	r3, [r3, #0]
 800e5bc:	b29b      	uxth	r3, r3
 800e5be:	4618      	mov	r0, r3
 800e5c0:	f002 f8f2 	bl	80107a8 <mg_ntohs>
 800e5c4:	4603      	mov	r3, r0
 800e5c6:	3301      	adds	r3, #1
 800e5c8:	429c      	cmp	r4, r3
 800e5ca:	d104      	bne.n	800e5d6 <rx_tcp+0x212>
 800e5cc:	6839      	ldr	r1, [r7, #0]
 800e5ce:	6978      	ldr	r0, [r7, #20]
 800e5d0:	f7ff fb5e 	bl	800dc90 <accept_conn>
 800e5d4:	e014      	b.n	800e600 <rx_tcp+0x23c>
 800e5d6:	697b      	ldr	r3, [r7, #20]
 800e5d8:	f893 30ac 	ldrb.w	r3, [r3, #172]	@ 0xac
 800e5dc:	f003 0304 	and.w	r3, r3, #4
 800e5e0:	b2db      	uxtb	r3, r3
 800e5e2:	2b00      	cmp	r3, #0
 800e5e4:	d10c      	bne.n	800e600 <rx_tcp+0x23c>
 800e5e6:	683b      	ldr	r3, [r7, #0]
 800e5e8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800e5ea:	689b      	ldr	r3, [r3, #8]
 800e5ec:	2200      	movs	r2, #0
 800e5ee:	9201      	str	r2, [sp, #4]
 800e5f0:	2200      	movs	r2, #0
 800e5f2:	9200      	str	r2, [sp, #0]
 800e5f4:	2214      	movs	r2, #20
 800e5f6:	6839      	ldr	r1, [r7, #0]
 800e5f8:	6878      	ldr	r0, [r7, #4]
 800e5fa:	f7ff fb03 	bl	800dc04 <tx_tcp_pkt>
 800e5fe:	e7ff      	b.n	800e600 <rx_tcp+0x23c>
 800e600:	bf00      	nop
 800e602:	371c      	adds	r7, #28
 800e604:	46bd      	mov	sp, r7
 800e606:	bd90      	pop	{r4, r7, pc}
 800e608:	0801b658 	.word	0x0801b658

0800e60c <rx_ip>:
 800e60c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800e60e:	b089      	sub	sp, #36	@ 0x24
 800e610:	af04      	add	r7, sp, #16
 800e612:	6078      	str	r0, [r7, #4]
 800e614:	6039      	str	r1, [r7, #0]
 800e616:	683b      	ldr	r3, [r7, #0]
 800e618:	69db      	ldr	r3, [r3, #28]
 800e61a:	88db      	ldrh	r3, [r3, #6]
 800e61c:	b29b      	uxth	r3, r3
 800e61e:	f003 0320 	and.w	r3, r3, #32
 800e622:	2b00      	cmp	r3, #0
 800e624:	d109      	bne.n	800e63a <rx_ip+0x2e>
 800e626:	683b      	ldr	r3, [r7, #0]
 800e628:	69db      	ldr	r3, [r3, #28]
 800e62a:	88db      	ldrh	r3, [r3, #6]
 800e62c:	b29b      	uxth	r3, r3
 800e62e:	461a      	mov	r2, r3
 800e630:	f64f 731f 	movw	r3, #65311	@ 0xff1f
 800e634:	4013      	ands	r3, r2
 800e636:	2b00      	cmp	r3, #0
 800e638:	d026      	beq.n	800e688 <rx_ip+0x7c>
 800e63a:	683b      	ldr	r3, [r7, #0]
 800e63c:	69db      	ldr	r3, [r3, #28]
 800e63e:	7a5b      	ldrb	r3, [r3, #9]
 800e640:	2b11      	cmp	r3, #17
 800e642:	d105      	bne.n	800e650 <rx_ip+0x44>
 800e644:	683b      	ldr	r3, [r7, #0]
 800e646:	69db      	ldr	r3, [r3, #28]
 800e648:	f103 0214 	add.w	r2, r3, #20
 800e64c:	683b      	ldr	r3, [r7, #0]
 800e64e:	62da      	str	r2, [r3, #44]	@ 0x2c
 800e650:	683b      	ldr	r3, [r7, #0]
 800e652:	69db      	ldr	r3, [r3, #28]
 800e654:	7a5b      	ldrb	r3, [r3, #9]
 800e656:	2b06      	cmp	r3, #6
 800e658:	d105      	bne.n	800e666 <rx_ip+0x5a>
 800e65a:	683b      	ldr	r3, [r7, #0]
 800e65c:	69db      	ldr	r3, [r3, #28]
 800e65e:	f103 0214 	add.w	r2, r3, #20
 800e662:	683b      	ldr	r3, [r7, #0]
 800e664:	629a      	str	r2, [r3, #40]	@ 0x28
 800e666:	687b      	ldr	r3, [r7, #4]
 800e668:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e66a:	2200      	movs	r2, #0
 800e66c:	6839      	ldr	r1, [r7, #0]
 800e66e:	4618      	mov	r0, r3
 800e670:	f7fe fc30 	bl	800ced4 <getpeer>
 800e674:	60b8      	str	r0, [r7, #8]
 800e676:	68bb      	ldr	r3, [r7, #8]
 800e678:	2b00      	cmp	r3, #0
 800e67a:	f000 811b 	beq.w	800e8b4 <rx_ip+0x2a8>
 800e67e:	4992      	ldr	r1, [pc, #584]	@ (800e8c8 <rx_ip+0x2bc>)
 800e680:	68b8      	ldr	r0, [r7, #8]
 800e682:	f7fa fbdd 	bl	8008e40 <mg_error>
 800e686:	e115      	b.n	800e8b4 <rx_ip+0x2a8>
 800e688:	683b      	ldr	r3, [r7, #0]
 800e68a:	69db      	ldr	r3, [r3, #28]
 800e68c:	7a5b      	ldrb	r3, [r3, #9]
 800e68e:	2b01      	cmp	r3, #1
 800e690:	d116      	bne.n	800e6c0 <rx_ip+0xb4>
 800e692:	683b      	ldr	r3, [r7, #0]
 800e694:	69db      	ldr	r3, [r3, #28]
 800e696:	f103 0214 	add.w	r2, r3, #20
 800e69a:	683b      	ldr	r3, [r7, #0]
 800e69c:	625a      	str	r2, [r3, #36]	@ 0x24
 800e69e:	683b      	ldr	r3, [r7, #0]
 800e6a0:	68db      	ldr	r3, [r3, #12]
 800e6a2:	2b03      	cmp	r3, #3
 800e6a4:	f240 8108 	bls.w	800e8b8 <rx_ip+0x2ac>
 800e6a8:	683b      	ldr	r3, [r7, #0]
 800e6aa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e6ac:	3304      	adds	r3, #4
 800e6ae:	4619      	mov	r1, r3
 800e6b0:	6838      	ldr	r0, [r7, #0]
 800e6b2:	f7fe f835 	bl	800c720 <mkpay>
 800e6b6:	6839      	ldr	r1, [r7, #0]
 800e6b8:	6878      	ldr	r0, [r7, #4]
 800e6ba:	f7fe fd87 	bl	800d1cc <rx_icmp>
 800e6be:	e100      	b.n	800e8c2 <rx_ip+0x2b6>
 800e6c0:	683b      	ldr	r3, [r7, #0]
 800e6c2:	69db      	ldr	r3, [r3, #28]
 800e6c4:	7a5b      	ldrb	r3, [r3, #9]
 800e6c6:	2b11      	cmp	r3, #17
 800e6c8:	f040 808b 	bne.w	800e7e2 <rx_ip+0x1d6>
 800e6cc:	683b      	ldr	r3, [r7, #0]
 800e6ce:	69db      	ldr	r3, [r3, #28]
 800e6d0:	f103 0214 	add.w	r2, r3, #20
 800e6d4:	683b      	ldr	r3, [r7, #0]
 800e6d6:	62da      	str	r2, [r3, #44]	@ 0x2c
 800e6d8:	683b      	ldr	r3, [r7, #0]
 800e6da:	68db      	ldr	r3, [r3, #12]
 800e6dc:	2b07      	cmp	r3, #7
 800e6de:	f240 80ed 	bls.w	800e8bc <rx_ip+0x2b0>
 800e6e2:	683b      	ldr	r3, [r7, #0]
 800e6e4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e6e6:	3308      	adds	r3, #8
 800e6e8:	4619      	mov	r1, r3
 800e6ea:	6838      	ldr	r0, [r7, #0]
 800e6ec:	f7fe f818 	bl	800c720 <mkpay>
 800e6f0:	4b76      	ldr	r3, [pc, #472]	@ (800e8cc <rx_ip+0x2c0>)
 800e6f2:	681b      	ldr	r3, [r3, #0]
 800e6f4:	2b03      	cmp	r3, #3
 800e6f6:	dd2d      	ble.n	800e754 <rx_ip+0x148>
 800e6f8:	4b75      	ldr	r3, [pc, #468]	@ (800e8d0 <rx_ip+0x2c4>)
 800e6fa:	f240 22f5 	movw	r2, #757	@ 0x2f5
 800e6fe:	4975      	ldr	r1, [pc, #468]	@ (800e8d4 <rx_ip+0x2c8>)
 800e700:	2004      	movs	r0, #4
 800e702:	f7fd fed3 	bl	800c4ac <mg_log_prefix>
 800e706:	683b      	ldr	r3, [r7, #0]
 800e708:	69db      	ldr	r3, [r3, #28]
 800e70a:	f103 050c 	add.w	r5, r3, #12
 800e70e:	683b      	ldr	r3, [r7, #0]
 800e710:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e712:	881b      	ldrh	r3, [r3, #0]
 800e714:	b29b      	uxth	r3, r3
 800e716:	4618      	mov	r0, r3
 800e718:	f002 f846 	bl	80107a8 <mg_ntohs>
 800e71c:	4603      	mov	r3, r0
 800e71e:	461e      	mov	r6, r3
 800e720:	683b      	ldr	r3, [r7, #0]
 800e722:	69db      	ldr	r3, [r3, #28]
 800e724:	f103 0410 	add.w	r4, r3, #16
 800e728:	683b      	ldr	r3, [r7, #0]
 800e72a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e72c:	885b      	ldrh	r3, [r3, #2]
 800e72e:	b29b      	uxth	r3, r3
 800e730:	4618      	mov	r0, r3
 800e732:	f002 f839 	bl	80107a8 <mg_ntohs>
 800e736:	4603      	mov	r3, r0
 800e738:	461a      	mov	r2, r3
 800e73a:	683b      	ldr	r3, [r7, #0]
 800e73c:	68db      	ldr	r3, [r3, #12]
 800e73e:	9303      	str	r3, [sp, #12]
 800e740:	9202      	str	r2, [sp, #8]
 800e742:	9401      	str	r4, [sp, #4]
 800e744:	4b64      	ldr	r3, [pc, #400]	@ (800e8d8 <rx_ip+0x2cc>)
 800e746:	9300      	str	r3, [sp, #0]
 800e748:	4633      	mov	r3, r6
 800e74a:	462a      	mov	r2, r5
 800e74c:	4962      	ldr	r1, [pc, #392]	@ (800e8d8 <rx_ip+0x2cc>)
 800e74e:	4863      	ldr	r0, [pc, #396]	@ (800e8dc <rx_ip+0x2d0>)
 800e750:	f7fd fefc 	bl	800c54c <mg_log>
 800e754:	687b      	ldr	r3, [r7, #4]
 800e756:	7f1b      	ldrb	r3, [r3, #28]
 800e758:	2b00      	cmp	r3, #0
 800e75a:	d01c      	beq.n	800e796 <rx_ip+0x18a>
 800e75c:	683b      	ldr	r3, [r7, #0]
 800e75e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e760:	885b      	ldrh	r3, [r3, #2]
 800e762:	b29c      	uxth	r4, r3
 800e764:	2044      	movs	r0, #68	@ 0x44
 800e766:	f002 f81f 	bl	80107a8 <mg_ntohs>
 800e76a:	4603      	mov	r3, r0
 800e76c:	429c      	cmp	r4, r3
 800e76e:	d112      	bne.n	800e796 <rx_ip+0x18a>
 800e770:	683b      	ldr	r3, [r7, #0]
 800e772:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e774:	f103 0208 	add.w	r2, r3, #8
 800e778:	683b      	ldr	r3, [r7, #0]
 800e77a:	631a      	str	r2, [r3, #48]	@ 0x30
 800e77c:	683b      	ldr	r3, [r7, #0]
 800e77e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800e780:	f503 7388 	add.w	r3, r3, #272	@ 0x110
 800e784:	4619      	mov	r1, r3
 800e786:	6838      	ldr	r0, [r7, #0]
 800e788:	f7fd ffca 	bl	800c720 <mkpay>
 800e78c:	6839      	ldr	r1, [r7, #0]
 800e78e:	6878      	ldr	r0, [r7, #4]
 800e790:	f7fe fd78 	bl	800d284 <rx_dhcp_client>
 800e794:	e095      	b.n	800e8c2 <rx_ip+0x2b6>
 800e796:	687b      	ldr	r3, [r7, #4]
 800e798:	7f5b      	ldrb	r3, [r3, #29]
 800e79a:	2b00      	cmp	r3, #0
 800e79c:	d01c      	beq.n	800e7d8 <rx_ip+0x1cc>
 800e79e:	683b      	ldr	r3, [r7, #0]
 800e7a0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e7a2:	885b      	ldrh	r3, [r3, #2]
 800e7a4:	b29c      	uxth	r4, r3
 800e7a6:	2043      	movs	r0, #67	@ 0x43
 800e7a8:	f001 fffe 	bl	80107a8 <mg_ntohs>
 800e7ac:	4603      	mov	r3, r0
 800e7ae:	429c      	cmp	r4, r3
 800e7b0:	d112      	bne.n	800e7d8 <rx_ip+0x1cc>
 800e7b2:	683b      	ldr	r3, [r7, #0]
 800e7b4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e7b6:	f103 0208 	add.w	r2, r3, #8
 800e7ba:	683b      	ldr	r3, [r7, #0]
 800e7bc:	631a      	str	r2, [r3, #48]	@ 0x30
 800e7be:	683b      	ldr	r3, [r7, #0]
 800e7c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800e7c2:	f503 7388 	add.w	r3, r3, #272	@ 0x110
 800e7c6:	4619      	mov	r1, r3
 800e7c8:	6838      	ldr	r0, [r7, #0]
 800e7ca:	f7fd ffa9 	bl	800c720 <mkpay>
 800e7ce:	6839      	ldr	r1, [r7, #0]
 800e7d0:	6878      	ldr	r0, [r7, #4]
 800e7d2:	f7fe feeb 	bl	800d5ac <rx_dhcp_server>
 800e7d6:	e074      	b.n	800e8c2 <rx_ip+0x2b6>
 800e7d8:	6839      	ldr	r1, [r7, #0]
 800e7da:	6878      	ldr	r0, [r7, #4]
 800e7dc:	f7ff f8d4 	bl	800d988 <rx_udp>
 800e7e0:	e06f      	b.n	800e8c2 <rx_ip+0x2b6>
 800e7e2:	683b      	ldr	r3, [r7, #0]
 800e7e4:	69db      	ldr	r3, [r3, #28]
 800e7e6:	7a5b      	ldrb	r3, [r3, #9]
 800e7e8:	2b06      	cmp	r3, #6
 800e7ea:	d16a      	bne.n	800e8c2 <rx_ip+0x2b6>
 800e7ec:	683b      	ldr	r3, [r7, #0]
 800e7ee:	69db      	ldr	r3, [r3, #28]
 800e7f0:	f103 0214 	add.w	r2, r3, #20
 800e7f4:	683b      	ldr	r3, [r7, #0]
 800e7f6:	629a      	str	r2, [r3, #40]	@ 0x28
 800e7f8:	683b      	ldr	r3, [r7, #0]
 800e7fa:	68db      	ldr	r3, [r3, #12]
 800e7fc:	2b13      	cmp	r3, #19
 800e7fe:	d95f      	bls.n	800e8c0 <rx_ip+0x2b4>
 800e800:	683b      	ldr	r3, [r7, #0]
 800e802:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800e804:	3314      	adds	r3, #20
 800e806:	4619      	mov	r1, r3
 800e808:	6838      	ldr	r0, [r7, #0]
 800e80a:	f7fd ff89 	bl	800c720 <mkpay>
 800e80e:	683b      	ldr	r3, [r7, #0]
 800e810:	69db      	ldr	r3, [r3, #28]
 800e812:	885b      	ldrh	r3, [r3, #2]
 800e814:	b29b      	uxth	r3, r3
 800e816:	4618      	mov	r0, r3
 800e818:	f001 ffc6 	bl	80107a8 <mg_ntohs>
 800e81c:	4603      	mov	r3, r0
 800e81e:	81fb      	strh	r3, [r7, #14]
 800e820:	683b      	ldr	r3, [r7, #0]
 800e822:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800e824:	7b1b      	ldrb	r3, [r3, #12]
 800e826:	091b      	lsrs	r3, r3, #4
 800e828:	b2db      	uxtb	r3, r3
 800e82a:	3305      	adds	r3, #5
 800e82c:	b29b      	uxth	r3, r3
 800e82e:	009b      	lsls	r3, r3, #2
 800e830:	81bb      	strh	r3, [r7, #12]
 800e832:	89fa      	ldrh	r2, [r7, #14]
 800e834:	89bb      	ldrh	r3, [r7, #12]
 800e836:	429a      	cmp	r2, r3
 800e838:	d305      	bcc.n	800e846 <rx_ip+0x23a>
 800e83a:	89fa      	ldrh	r2, [r7, #14]
 800e83c:	89bb      	ldrh	r3, [r7, #12]
 800e83e:	1ad3      	subs	r3, r2, r3
 800e840:	461a      	mov	r2, r3
 800e842:	683b      	ldr	r3, [r7, #0]
 800e844:	60da      	str	r2, [r3, #12]
 800e846:	4b21      	ldr	r3, [pc, #132]	@ (800e8cc <rx_ip+0x2c0>)
 800e848:	681b      	ldr	r3, [r3, #0]
 800e84a:	2b03      	cmp	r3, #3
 800e84c:	dd2d      	ble.n	800e8aa <rx_ip+0x29e>
 800e84e:	4b20      	ldr	r3, [pc, #128]	@ (800e8d0 <rx_ip+0x2c4>)
 800e850:	f240 320a 	movw	r2, #778	@ 0x30a
 800e854:	491f      	ldr	r1, [pc, #124]	@ (800e8d4 <rx_ip+0x2c8>)
 800e856:	2004      	movs	r0, #4
 800e858:	f7fd fe28 	bl	800c4ac <mg_log_prefix>
 800e85c:	683b      	ldr	r3, [r7, #0]
 800e85e:	69db      	ldr	r3, [r3, #28]
 800e860:	f103 050c 	add.w	r5, r3, #12
 800e864:	683b      	ldr	r3, [r7, #0]
 800e866:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800e868:	881b      	ldrh	r3, [r3, #0]
 800e86a:	b29b      	uxth	r3, r3
 800e86c:	4618      	mov	r0, r3
 800e86e:	f001 ff9b 	bl	80107a8 <mg_ntohs>
 800e872:	4603      	mov	r3, r0
 800e874:	461e      	mov	r6, r3
 800e876:	683b      	ldr	r3, [r7, #0]
 800e878:	69db      	ldr	r3, [r3, #28]
 800e87a:	f103 0410 	add.w	r4, r3, #16
 800e87e:	683b      	ldr	r3, [r7, #0]
 800e880:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800e882:	885b      	ldrh	r3, [r3, #2]
 800e884:	b29b      	uxth	r3, r3
 800e886:	4618      	mov	r0, r3
 800e888:	f001 ff8e 	bl	80107a8 <mg_ntohs>
 800e88c:	4603      	mov	r3, r0
 800e88e:	461a      	mov	r2, r3
 800e890:	683b      	ldr	r3, [r7, #0]
 800e892:	68db      	ldr	r3, [r3, #12]
 800e894:	9303      	str	r3, [sp, #12]
 800e896:	9202      	str	r2, [sp, #8]
 800e898:	9401      	str	r4, [sp, #4]
 800e89a:	4b0f      	ldr	r3, [pc, #60]	@ (800e8d8 <rx_ip+0x2cc>)
 800e89c:	9300      	str	r3, [sp, #0]
 800e89e:	4633      	mov	r3, r6
 800e8a0:	462a      	mov	r2, r5
 800e8a2:	490d      	ldr	r1, [pc, #52]	@ (800e8d8 <rx_ip+0x2cc>)
 800e8a4:	480e      	ldr	r0, [pc, #56]	@ (800e8e0 <rx_ip+0x2d4>)
 800e8a6:	f7fd fe51 	bl	800c54c <mg_log>
 800e8aa:	6839      	ldr	r1, [r7, #0]
 800e8ac:	6878      	ldr	r0, [r7, #4]
 800e8ae:	f7ff fd89 	bl	800e3c4 <rx_tcp>
 800e8b2:	e006      	b.n	800e8c2 <rx_ip+0x2b6>
 800e8b4:	bf00      	nop
 800e8b6:	e004      	b.n	800e8c2 <rx_ip+0x2b6>
 800e8b8:	bf00      	nop
 800e8ba:	e002      	b.n	800e8c2 <rx_ip+0x2b6>
 800e8bc:	bf00      	nop
 800e8be:	e000      	b.n	800e8c2 <rx_ip+0x2b6>
 800e8c0:	bf00      	nop
 800e8c2:	3714      	adds	r7, #20
 800e8c4:	46bd      	mov	sp, r7
 800e8c6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800e8c8:	0801b664 	.word	0x0801b664
 800e8cc:	24000048 	.word	0x24000048
 800e8d0:	0801c098 	.word	0x0801c098
 800e8d4:	0801b22c 	.word	0x0801b22c
 800e8d8:	0800fb1d 	.word	0x0800fb1d
 800e8dc:	0801b680 	.word	0x0801b680
 800e8e0:	0801b69c 	.word	0x0801b69c

0800e8e4 <rx_ip6>:
 800e8e4:	b580      	push	{r7, lr}
 800e8e6:	b082      	sub	sp, #8
 800e8e8:	af00      	add	r7, sp, #0
 800e8ea:	6078      	str	r0, [r7, #4]
 800e8ec:	6039      	str	r1, [r7, #0]
 800e8ee:	683b      	ldr	r3, [r7, #0]
 800e8f0:	6a1b      	ldr	r3, [r3, #32]
 800e8f2:	799b      	ldrb	r3, [r3, #6]
 800e8f4:	2b01      	cmp	r3, #1
 800e8f6:	d004      	beq.n	800e902 <rx_ip6+0x1e>
 800e8f8:	683b      	ldr	r3, [r7, #0]
 800e8fa:	6a1b      	ldr	r3, [r3, #32]
 800e8fc:	799b      	ldrb	r3, [r3, #6]
 800e8fe:	2b3a      	cmp	r3, #58	@ 0x3a
 800e900:	d115      	bne.n	800e92e <rx_ip6+0x4a>
 800e902:	683b      	ldr	r3, [r7, #0]
 800e904:	6a1b      	ldr	r3, [r3, #32]
 800e906:	f103 0228 	add.w	r2, r3, #40	@ 0x28
 800e90a:	683b      	ldr	r3, [r7, #0]
 800e90c:	625a      	str	r2, [r3, #36]	@ 0x24
 800e90e:	683b      	ldr	r3, [r7, #0]
 800e910:	68db      	ldr	r3, [r3, #12]
 800e912:	2b03      	cmp	r3, #3
 800e914:	d922      	bls.n	800e95c <rx_ip6+0x78>
 800e916:	683b      	ldr	r3, [r7, #0]
 800e918:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e91a:	3304      	adds	r3, #4
 800e91c:	4619      	mov	r1, r3
 800e91e:	6838      	ldr	r0, [r7, #0]
 800e920:	f7fd fefe 	bl	800c720 <mkpay>
 800e924:	6839      	ldr	r1, [r7, #0]
 800e926:	6878      	ldr	r0, [r7, #4]
 800e928:	f7fe fc50 	bl	800d1cc <rx_icmp>
 800e92c:	e019      	b.n	800e962 <rx_ip6+0x7e>
 800e92e:	683b      	ldr	r3, [r7, #0]
 800e930:	6a1b      	ldr	r3, [r3, #32]
 800e932:	799b      	ldrb	r3, [r3, #6]
 800e934:	2b11      	cmp	r3, #17
 800e936:	d114      	bne.n	800e962 <rx_ip6+0x7e>
 800e938:	683b      	ldr	r3, [r7, #0]
 800e93a:	6a1b      	ldr	r3, [r3, #32]
 800e93c:	f103 0228 	add.w	r2, r3, #40	@ 0x28
 800e940:	683b      	ldr	r3, [r7, #0]
 800e942:	62da      	str	r2, [r3, #44]	@ 0x2c
 800e944:	683b      	ldr	r3, [r7, #0]
 800e946:	68db      	ldr	r3, [r3, #12]
 800e948:	2b07      	cmp	r3, #7
 800e94a:	d909      	bls.n	800e960 <rx_ip6+0x7c>
 800e94c:	683b      	ldr	r3, [r7, #0]
 800e94e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e950:	3308      	adds	r3, #8
 800e952:	4619      	mov	r1, r3
 800e954:	6838      	ldr	r0, [r7, #0]
 800e956:	f7fd fee3 	bl	800c720 <mkpay>
 800e95a:	e002      	b.n	800e962 <rx_ip6+0x7e>
 800e95c:	bf00      	nop
 800e95e:	e000      	b.n	800e962 <rx_ip6+0x7e>
 800e960:	bf00      	nop
 800e962:	3708      	adds	r7, #8
 800e964:	46bd      	mov	sp, r7
 800e966:	bd80      	pop	{r7, pc}

0800e968 <mg_tcpip_rx>:
 800e968:	b590      	push	{r4, r7, lr}
 800e96a:	b093      	sub	sp, #76	@ 0x4c
 800e96c:	af00      	add	r7, sp, #0
 800e96e:	60f8      	str	r0, [r7, #12]
 800e970:	60b9      	str	r1, [r7, #8]
 800e972:	607a      	str	r2, [r7, #4]
 800e974:	f107 0314 	add.w	r3, r7, #20
 800e978:	2234      	movs	r2, #52	@ 0x34
 800e97a:	2100      	movs	r1, #0
 800e97c:	4618      	mov	r0, r3
 800e97e:	f00b f825 	bl	80199cc <memset>
 800e982:	68bb      	ldr	r3, [r7, #8]
 800e984:	617b      	str	r3, [r7, #20]
 800e986:	687b      	ldr	r3, [r7, #4]
 800e988:	61bb      	str	r3, [r7, #24]
 800e98a:	68bb      	ldr	r3, [r7, #8]
 800e98c:	627b      	str	r3, [r7, #36]	@ 0x24
 800e98e:	69bb      	ldr	r3, [r7, #24]
 800e990:	2b0d      	cmp	r3, #13
 800e992:	f240 80d7 	bls.w	800eb44 <mg_tcpip_rx+0x1dc>
 800e996:	68fb      	ldr	r3, [r7, #12]
 800e998:	f893 3020 	ldrb.w	r3, [r3, #32]
 800e99c:	2b00      	cmp	r3, #0
 800e99e:	d013      	beq.n	800e9c8 <mg_tcpip_rx+0x60>
 800e9a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e9a2:	4618      	mov	r0, r3
 800e9a4:	68fb      	ldr	r3, [r7, #12]
 800e9a6:	2206      	movs	r2, #6
 800e9a8:	4619      	mov	r1, r3
 800e9aa:	f00a ffe5 	bl	8019978 <memcmp>
 800e9ae:	4603      	mov	r3, r0
 800e9b0:	2b00      	cmp	r3, #0
 800e9b2:	d009      	beq.n	800e9c8 <mg_tcpip_rx+0x60>
 800e9b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e9b6:	2206      	movs	r2, #6
 800e9b8:	496c      	ldr	r1, [pc, #432]	@ (800eb6c <mg_tcpip_rx+0x204>)
 800e9ba:	4618      	mov	r0, r3
 800e9bc:	f00a ffdc 	bl	8019978 <memcmp>
 800e9c0:	4603      	mov	r3, r0
 800e9c2:	2b00      	cmp	r3, #0
 800e9c4:	f040 80c0 	bne.w	800eb48 <mg_tcpip_rx+0x1e0>
 800e9c8:	68fb      	ldr	r3, [r7, #12]
 800e9ca:	7fdb      	ldrb	r3, [r3, #31]
 800e9cc:	2b00      	cmp	r3, #0
 800e9ce:	d01a      	beq.n	800ea06 <mg_tcpip_rx+0x9e>
 800e9d0:	687b      	ldr	r3, [r7, #4]
 800e9d2:	2b04      	cmp	r3, #4
 800e9d4:	d917      	bls.n	800ea06 <mg_tcpip_rx+0x9e>
 800e9d6:	687b      	ldr	r3, [r7, #4]
 800e9d8:	3b04      	subs	r3, #4
 800e9da:	607b      	str	r3, [r7, #4]
 800e9dc:	687a      	ldr	r2, [r7, #4]
 800e9de:	68b9      	ldr	r1, [r7, #8]
 800e9e0:	2000      	movs	r0, #0
 800e9e2:	f001 fef9 	bl	80107d8 <mg_crc32>
 800e9e6:	4603      	mov	r3, r0
 800e9e8:	613b      	str	r3, [r7, #16]
 800e9ea:	68ba      	ldr	r2, [r7, #8]
 800e9ec:	687b      	ldr	r3, [r7, #4]
 800e9ee:	4413      	add	r3, r2
 800e9f0:	4618      	mov	r0, r3
 800e9f2:	f107 0310 	add.w	r3, r7, #16
 800e9f6:	2204      	movs	r2, #4
 800e9f8:	4619      	mov	r1, r3
 800e9fa:	f00a ffbd 	bl	8019978 <memcmp>
 800e9fe:	4603      	mov	r3, r0
 800ea00:	2b00      	cmp	r3, #0
 800ea02:	f040 80a3 	bne.w	800eb4c <mg_tcpip_rx+0x1e4>
 800ea06:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ea08:	899b      	ldrh	r3, [r3, #12]
 800ea0a:	b29c      	uxth	r4, r3
 800ea0c:	f640 0006 	movw	r0, #2054	@ 0x806
 800ea10:	f001 feca 	bl	80107a8 <mg_ntohs>
 800ea14:	4603      	mov	r3, r0
 800ea16:	429c      	cmp	r4, r3
 800ea18:	d10d      	bne.n	800ea36 <mg_tcpip_rx+0xce>
 800ea1a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ea1c:	330e      	adds	r3, #14
 800ea1e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800ea20:	69bb      	ldr	r3, [r7, #24]
 800ea22:	2b29      	cmp	r3, #41	@ 0x29
 800ea24:	f240 8094 	bls.w	800eb50 <mg_tcpip_rx+0x1e8>
 800ea28:	f107 0314 	add.w	r3, r7, #20
 800ea2c:	4619      	mov	r1, r3
 800ea2e:	68f8      	ldr	r0, [r7, #12]
 800ea30:	f7fe fac2 	bl	800cfb8 <rx_arp>
 800ea34:	e097      	b.n	800eb66 <mg_tcpip_rx+0x1fe>
 800ea36:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ea38:	899b      	ldrh	r3, [r3, #12]
 800ea3a:	b29c      	uxth	r4, r3
 800ea3c:	f248 60dd 	movw	r0, #34525	@ 0x86dd
 800ea40:	f001 feb2 	bl	80107a8 <mg_ntohs>
 800ea44:	4603      	mov	r3, r0
 800ea46:	429c      	cmp	r4, r3
 800ea48:	d11b      	bne.n	800ea82 <mg_tcpip_rx+0x11a>
 800ea4a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ea4c:	330e      	adds	r3, #14
 800ea4e:	637b      	str	r3, [r7, #52]	@ 0x34
 800ea50:	69bb      	ldr	r3, [r7, #24]
 800ea52:	2b35      	cmp	r3, #53	@ 0x35
 800ea54:	d97e      	bls.n	800eb54 <mg_tcpip_rx+0x1ec>
 800ea56:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ea58:	781b      	ldrb	r3, [r3, #0]
 800ea5a:	091b      	lsrs	r3, r3, #4
 800ea5c:	b2db      	uxtb	r3, r3
 800ea5e:	2b06      	cmp	r3, #6
 800ea60:	d17a      	bne.n	800eb58 <mg_tcpip_rx+0x1f0>
 800ea62:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ea64:	f103 0228 	add.w	r2, r3, #40	@ 0x28
 800ea68:	f107 0314 	add.w	r3, r7, #20
 800ea6c:	4611      	mov	r1, r2
 800ea6e:	4618      	mov	r0, r3
 800ea70:	f7fd fe56 	bl	800c720 <mkpay>
 800ea74:	f107 0314 	add.w	r3, r7, #20
 800ea78:	4619      	mov	r1, r3
 800ea7a:	68f8      	ldr	r0, [r7, #12]
 800ea7c:	f7ff ff32 	bl	800e8e4 <rx_ip6>
 800ea80:	e071      	b.n	800eb66 <mg_tcpip_rx+0x1fe>
 800ea82:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ea84:	899b      	ldrh	r3, [r3, #12]
 800ea86:	b29c      	uxth	r4, r3
 800ea88:	f44f 6000 	mov.w	r0, #2048	@ 0x800
 800ea8c:	f001 fe8c 	bl	80107a8 <mg_ntohs>
 800ea90:	4603      	mov	r3, r0
 800ea92:	429c      	cmp	r4, r3
 800ea94:	d133      	bne.n	800eafe <mg_tcpip_rx+0x196>
 800ea96:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ea98:	330e      	adds	r3, #14
 800ea9a:	633b      	str	r3, [r7, #48]	@ 0x30
 800ea9c:	69bb      	ldr	r3, [r7, #24]
 800ea9e:	2b21      	cmp	r3, #33	@ 0x21
 800eaa0:	d95c      	bls.n	800eb5c <mg_tcpip_rx+0x1f4>
 800eaa2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800eaa4:	885b      	ldrh	r3, [r3, #2]
 800eaa6:	b29b      	uxth	r3, r3
 800eaa8:	4618      	mov	r0, r3
 800eaaa:	f001 fe7d 	bl	80107a8 <mg_ntohs>
 800eaae:	4603      	mov	r3, r0
 800eab0:	f103 020e 	add.w	r2, r3, #14
 800eab4:	69bb      	ldr	r3, [r7, #24]
 800eab6:	429a      	cmp	r2, r3
 800eab8:	d208      	bcs.n	800eacc <mg_tcpip_rx+0x164>
 800eaba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800eabc:	885b      	ldrh	r3, [r3, #2]
 800eabe:	b29b      	uxth	r3, r3
 800eac0:	4618      	mov	r0, r3
 800eac2:	f001 fe71 	bl	80107a8 <mg_ntohs>
 800eac6:	4603      	mov	r3, r0
 800eac8:	330e      	adds	r3, #14
 800eaca:	61bb      	str	r3, [r7, #24]
 800eacc:	69bb      	ldr	r3, [r7, #24]
 800eace:	2b21      	cmp	r3, #33	@ 0x21
 800ead0:	d946      	bls.n	800eb60 <mg_tcpip_rx+0x1f8>
 800ead2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ead4:	781b      	ldrb	r3, [r3, #0]
 800ead6:	091b      	lsrs	r3, r3, #4
 800ead8:	b2db      	uxtb	r3, r3
 800eada:	2b04      	cmp	r3, #4
 800eadc:	d142      	bne.n	800eb64 <mg_tcpip_rx+0x1fc>
 800eade:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800eae0:	f103 0214 	add.w	r2, r3, #20
 800eae4:	f107 0314 	add.w	r3, r7, #20
 800eae8:	4611      	mov	r1, r2
 800eaea:	4618      	mov	r0, r3
 800eaec:	f7fd fe18 	bl	800c720 <mkpay>
 800eaf0:	f107 0314 	add.w	r3, r7, #20
 800eaf4:	4619      	mov	r1, r3
 800eaf6:	68f8      	ldr	r0, [r7, #12]
 800eaf8:	f7ff fd88 	bl	800e60c <rx_ip>
 800eafc:	e033      	b.n	800eb66 <mg_tcpip_rx+0x1fe>
 800eafe:	4b1c      	ldr	r3, [pc, #112]	@ (800eb70 <mg_tcpip_rx+0x208>)
 800eb00:	681b      	ldr	r3, [r3, #0]
 800eb02:	2b02      	cmp	r3, #2
 800eb04:	dd11      	ble.n	800eb2a <mg_tcpip_rx+0x1c2>
 800eb06:	4b1b      	ldr	r3, [pc, #108]	@ (800eb74 <mg_tcpip_rx+0x20c>)
 800eb08:	f44f 7252 	mov.w	r2, #840	@ 0x348
 800eb0c:	491a      	ldr	r1, [pc, #104]	@ (800eb78 <mg_tcpip_rx+0x210>)
 800eb0e:	2003      	movs	r0, #3
 800eb10:	f7fd fccc 	bl	800c4ac <mg_log_prefix>
 800eb14:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800eb16:	899b      	ldrh	r3, [r3, #12]
 800eb18:	b29b      	uxth	r3, r3
 800eb1a:	4618      	mov	r0, r3
 800eb1c:	f001 fe44 	bl	80107a8 <mg_ntohs>
 800eb20:	4603      	mov	r3, r0
 800eb22:	4619      	mov	r1, r3
 800eb24:	4815      	ldr	r0, [pc, #84]	@ (800eb7c <mg_tcpip_rx+0x214>)
 800eb26:	f7fd fd11 	bl	800c54c <mg_log>
 800eb2a:	4b11      	ldr	r3, [pc, #68]	@ (800eb70 <mg_tcpip_rx+0x208>)
 800eb2c:	681b      	ldr	r3, [r3, #0]
 800eb2e:	2b03      	cmp	r3, #3
 800eb30:	dd19      	ble.n	800eb66 <mg_tcpip_rx+0x1fe>
 800eb32:	687b      	ldr	r3, [r7, #4]
 800eb34:	2b20      	cmp	r3, #32
 800eb36:	bf28      	it	cs
 800eb38:	2320      	movcs	r3, #32
 800eb3a:	4619      	mov	r1, r3
 800eb3c:	68b8      	ldr	r0, [r7, #8]
 800eb3e:	f7fd fd3b 	bl	800c5b8 <mg_hexdump>
 800eb42:	e010      	b.n	800eb66 <mg_tcpip_rx+0x1fe>
 800eb44:	bf00      	nop
 800eb46:	e00e      	b.n	800eb66 <mg_tcpip_rx+0x1fe>
 800eb48:	bf00      	nop
 800eb4a:	e00c      	b.n	800eb66 <mg_tcpip_rx+0x1fe>
 800eb4c:	bf00      	nop
 800eb4e:	e00a      	b.n	800eb66 <mg_tcpip_rx+0x1fe>
 800eb50:	bf00      	nop
 800eb52:	e008      	b.n	800eb66 <mg_tcpip_rx+0x1fe>
 800eb54:	bf00      	nop
 800eb56:	e006      	b.n	800eb66 <mg_tcpip_rx+0x1fe>
 800eb58:	bf00      	nop
 800eb5a:	e004      	b.n	800eb66 <mg_tcpip_rx+0x1fe>
 800eb5c:	bf00      	nop
 800eb5e:	e002      	b.n	800eb66 <mg_tcpip_rx+0x1fe>
 800eb60:	bf00      	nop
 800eb62:	e000      	b.n	800eb66 <mg_tcpip_rx+0x1fe>
 800eb64:	bf00      	nop
 800eb66:	374c      	adds	r7, #76	@ 0x4c
 800eb68:	46bd      	mov	sp, r7
 800eb6a:	bd90      	pop	{r4, r7, pc}
 800eb6c:	0801bfd8 	.word	0x0801bfd8
 800eb70:	24000048 	.word	0x24000048
 800eb74:	0801c0a0 	.word	0x0801c0a0
 800eb78:	0801b22c 	.word	0x0801b22c
 800eb7c:	0801b6b8 	.word	0x0801b6b8

0800eb80 <mg_tcpip_poll>:
 800eb80:	b5f0      	push	{r4, r5, r6, r7, lr}
 800eb82:	b095      	sub	sp, #84	@ 0x54
 800eb84:	af06      	add	r7, sp, #24
 800eb86:	6178      	str	r0, [r7, #20]
 800eb88:	e9c7 2302 	strd	r2, r3, [r7, #8]
 800eb8c:	697b      	ldr	r3, [r7, #20]
 800eb8e:	2b00      	cmp	r3, #0
 800eb90:	f000 81d3 	beq.w	800ef3a <mg_tcpip_poll+0x3ba>
 800eb94:	697b      	ldr	r3, [r7, #20]
 800eb96:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800eb98:	2b00      	cmp	r3, #0
 800eb9a:	f000 81ce 	beq.w	800ef3a <mg_tcpip_poll+0x3ba>
 800eb9e:	697b      	ldr	r3, [r7, #20]
 800eba0:	f103 0150 	add.w	r1, r3, #80	@ 0x50
 800eba4:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800eba8:	e9cd 2300 	strd	r2, r3, [sp]
 800ebac:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800ebb0:	f04f 0300 	mov.w	r3, #0
 800ebb4:	4608      	mov	r0, r1
 800ebb6:	f001 fb7c 	bl	80102b2 <mg_timer_expired>
 800ebba:	4603      	mov	r3, r0
 800ebbc:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
 800ebc0:	6979      	ldr	r1, [r7, #20]
 800ebc2:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800ebc6:	e9c1 2312 	strd	r2, r3, [r1, #72]	@ 0x48
 800ebca:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 800ebce:	2b00      	cmp	r3, #0
 800ebd0:	d03f      	beq.n	800ec52 <mg_tcpip_poll+0xd2>
 800ebd2:	697b      	ldr	r3, [r7, #20]
 800ebd4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ebd6:	68db      	ldr	r3, [r3, #12]
 800ebd8:	2b00      	cmp	r3, #0
 800ebda:	d03a      	beq.n	800ec52 <mg_tcpip_poll+0xd2>
 800ebdc:	697b      	ldr	r3, [r7, #20]
 800ebde:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ebe0:	68db      	ldr	r3, [r3, #12]
 800ebe2:	6978      	ldr	r0, [r7, #20]
 800ebe4:	4798      	blx	r3
 800ebe6:	4603      	mov	r3, r0
 800ebe8:	f887 3032 	strb.w	r3, [r7, #50]	@ 0x32
 800ebec:	697b      	ldr	r3, [r7, #20]
 800ebee:	f893 3074 	ldrb.w	r3, [r3, #116]	@ 0x74
 800ebf2:	2b00      	cmp	r3, #0
 800ebf4:	bf14      	ite	ne
 800ebf6:	2301      	movne	r3, #1
 800ebf8:	2300      	moveq	r3, #0
 800ebfa:	f887 3031 	strb.w	r3, [r7, #49]	@ 0x31
 800ebfe:	f897 2032 	ldrb.w	r2, [r7, #50]	@ 0x32
 800ec02:	f897 3031 	ldrb.w	r3, [r7, #49]	@ 0x31
 800ec06:	429a      	cmp	r2, r3
 800ec08:	d023      	beq.n	800ec52 <mg_tcpip_poll+0xd2>
 800ec0a:	f897 3032 	ldrb.w	r3, [r7, #50]	@ 0x32
 800ec0e:	f083 0301 	eor.w	r3, r3, #1
 800ec12:	b2db      	uxtb	r3, r3
 800ec14:	2b00      	cmp	r3, #0
 800ec16:	d001      	beq.n	800ec1c <mg_tcpip_poll+0x9c>
 800ec18:	2300      	movs	r3, #0
 800ec1a:	e006      	b.n	800ec2a <mg_tcpip_poll+0xaa>
 800ec1c:	697b      	ldr	r3, [r7, #20]
 800ec1e:	7f1b      	ldrb	r3, [r3, #28]
 800ec20:	2b00      	cmp	r3, #0
 800ec22:	d001      	beq.n	800ec28 <mg_tcpip_poll+0xa8>
 800ec24:	2301      	movs	r3, #1
 800ec26:	e000      	b.n	800ec2a <mg_tcpip_poll+0xaa>
 800ec28:	2303      	movs	r3, #3
 800ec2a:	697a      	ldr	r2, [r7, #20]
 800ec2c:	f882 3074 	strb.w	r3, [r2, #116]	@ 0x74
 800ec30:	f897 3032 	ldrb.w	r3, [r7, #50]	@ 0x32
 800ec34:	f083 0301 	eor.w	r3, r3, #1
 800ec38:	b2db      	uxtb	r3, r3
 800ec3a:	2b00      	cmp	r3, #0
 800ec3c:	d006      	beq.n	800ec4c <mg_tcpip_poll+0xcc>
 800ec3e:	697b      	ldr	r3, [r7, #20]
 800ec40:	7f1b      	ldrb	r3, [r3, #28]
 800ec42:	2b00      	cmp	r3, #0
 800ec44:	d002      	beq.n	800ec4c <mg_tcpip_poll+0xcc>
 800ec46:	697b      	ldr	r3, [r7, #20]
 800ec48:	2200      	movs	r2, #0
 800ec4a:	609a      	str	r2, [r3, #8]
 800ec4c:	6978      	ldr	r0, [r7, #20]
 800ec4e:	f7fd feb5 	bl	800c9bc <onstatechange>
 800ec52:	697b      	ldr	r3, [r7, #20]
 800ec54:	f893 3074 	ldrb.w	r3, [r3, #116]	@ 0x74
 800ec58:	2b00      	cmp	r3, #0
 800ec5a:	f000 8170 	beq.w	800ef3e <mg_tcpip_poll+0x3be>
 800ec5e:	697b      	ldr	r3, [r7, #20]
 800ec60:	f893 3074 	ldrb.w	r3, [r3, #116]	@ 0x74
 800ec64:	2b01      	cmp	r3, #1
 800ec66:	d107      	bne.n	800ec78 <mg_tcpip_poll+0xf8>
 800ec68:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 800ec6c:	2b00      	cmp	r3, #0
 800ec6e:	d003      	beq.n	800ec78 <mg_tcpip_poll+0xf8>
 800ec70:	6978      	ldr	r0, [r7, #20]
 800ec72:	f7fe f8f3 	bl	800ce5c <tx_dhcp_discover>
 800ec76:	e04c      	b.n	800ed12 <mg_tcpip_poll+0x192>
 800ec78:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 800ec7c:	2b00      	cmp	r3, #0
 800ec7e:	d048      	beq.n	800ed12 <mg_tcpip_poll+0x192>
 800ec80:	697b      	ldr	r3, [r7, #20]
 800ec82:	f893 3074 	ldrb.w	r3, [r3, #116]	@ 0x74
 800ec86:	2b03      	cmp	r3, #3
 800ec88:	d143      	bne.n	800ed12 <mg_tcpip_poll+0x192>
 800ec8a:	697b      	ldr	r3, [r7, #20]
 800ec8c:	e9d3 2316 	ldrd	r2, r3, [r3, #88]	@ 0x58
 800ec90:	4313      	orrs	r3, r2
 800ec92:	d03e      	beq.n	800ed12 <mg_tcpip_poll+0x192>
 800ec94:	697b      	ldr	r3, [r7, #20]
 800ec96:	e9d3 0112 	ldrd	r0, r1, [r3, #72]	@ 0x48
 800ec9a:	697b      	ldr	r3, [r7, #20]
 800ec9c:	e9d3 2316 	ldrd	r2, r3, [r3, #88]	@ 0x58
 800eca0:	4290      	cmp	r0, r2
 800eca2:	eb71 0303 	sbcs.w	r3, r1, r3
 800eca6:	d30a      	bcc.n	800ecbe <mg_tcpip_poll+0x13e>
 800eca8:	697b      	ldr	r3, [r7, #20]
 800ecaa:	2201      	movs	r2, #1
 800ecac:	f883 2074 	strb.w	r2, [r3, #116]	@ 0x74
 800ecb0:	697b      	ldr	r3, [r7, #20]
 800ecb2:	2200      	movs	r2, #0
 800ecb4:	609a      	str	r2, [r3, #8]
 800ecb6:	6978      	ldr	r0, [r7, #20]
 800ecb8:	f7fd fe80 	bl	800c9bc <onstatechange>
 800ecbc:	e029      	b.n	800ed12 <mg_tcpip_poll+0x192>
 800ecbe:	697b      	ldr	r3, [r7, #20]
 800ecc0:	e9d3 2312 	ldrd	r2, r3, [r3, #72]	@ 0x48
 800ecc4:	49a0      	ldr	r1, [pc, #640]	@ (800ef48 <mg_tcpip_poll+0x3c8>)
 800ecc6:	1854      	adds	r4, r2, r1
 800ecc8:	f143 0500 	adc.w	r5, r3, #0
 800eccc:	697b      	ldr	r3, [r7, #20]
 800ecce:	e9d3 2316 	ldrd	r2, r3, [r3, #88]	@ 0x58
 800ecd2:	42a2      	cmp	r2, r4
 800ecd4:	41ab      	sbcs	r3, r5
 800ecd6:	d21c      	bcs.n	800ed12 <mg_tcpip_poll+0x192>
 800ecd8:	697b      	ldr	r3, [r7, #20]
 800ecda:	e9d3 0112 	ldrd	r0, r1, [r3, #72]	@ 0x48
 800ecde:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800ece2:	f04f 0300 	mov.w	r3, #0
 800ece6:	f7f1 fb53 	bl	8000390 <__aeabi_uldivmod>
 800ecea:	4602      	mov	r2, r0
 800ecec:	460b      	mov	r3, r1
 800ecee:	4610      	mov	r0, r2
 800ecf0:	4619      	mov	r1, r3
 800ecf2:	f04f 023c 	mov.w	r2, #60	@ 0x3c
 800ecf6:	f04f 0300 	mov.w	r3, #0
 800ecfa:	f7f1 fb49 	bl	8000390 <__aeabi_uldivmod>
 800ecfe:	4313      	orrs	r3, r2
 800ed00:	d107      	bne.n	800ed12 <mg_tcpip_poll+0x192>
 800ed02:	697b      	ldr	r3, [r7, #20]
 800ed04:	689a      	ldr	r2, [r3, #8]
 800ed06:	f04f 33ff 	mov.w	r3, #4294967295
 800ed0a:	4990      	ldr	r1, [pc, #576]	@ (800ef4c <mg_tcpip_poll+0x3cc>)
 800ed0c:	6978      	ldr	r0, [r7, #20]
 800ed0e:	f7fe f873 	bl	800cdf8 <tx_dhcp_request_re>
 800ed12:	697b      	ldr	r3, [r7, #20]
 800ed14:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ed16:	689b      	ldr	r3, [r3, #8]
 800ed18:	2b00      	cmp	r3, #0
 800ed1a:	d019      	beq.n	800ed50 <mg_tcpip_poll+0x1d0>
 800ed1c:	697b      	ldr	r3, [r7, #20]
 800ed1e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ed20:	689b      	ldr	r3, [r3, #8]
 800ed22:	697a      	ldr	r2, [r7, #20]
 800ed24:	6b10      	ldr	r0, [r2, #48]	@ 0x30
 800ed26:	697a      	ldr	r2, [r7, #20]
 800ed28:	6b51      	ldr	r1, [r2, #52]	@ 0x34
 800ed2a:	697a      	ldr	r2, [r7, #20]
 800ed2c:	4798      	blx	r3
 800ed2e:	62b8      	str	r0, [r7, #40]	@ 0x28
 800ed30:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ed32:	2b00      	cmp	r3, #0
 800ed34:	d024      	beq.n	800ed80 <mg_tcpip_poll+0x200>
 800ed36:	697b      	ldr	r3, [r7, #20]
 800ed38:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800ed3a:	1c5a      	adds	r2, r3, #1
 800ed3c:	697b      	ldr	r3, [r7, #20]
 800ed3e:	669a      	str	r2, [r3, #104]	@ 0x68
 800ed40:	697b      	ldr	r3, [r7, #20]
 800ed42:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800ed44:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800ed46:	4619      	mov	r1, r3
 800ed48:	6978      	ldr	r0, [r7, #20]
 800ed4a:	f7ff fe0d 	bl	800e968 <mg_tcpip_rx>
 800ed4e:	e017      	b.n	800ed80 <mg_tcpip_poll+0x200>
 800ed50:	697b      	ldr	r3, [r7, #20]
 800ed52:	3330      	adds	r3, #48	@ 0x30
 800ed54:	f107 0220 	add.w	r2, r7, #32
 800ed58:	4611      	mov	r1, r2
 800ed5a:	4618      	mov	r0, r3
 800ed5c:	f001 f80e 	bl	800fd7c <mg_queue_next>
 800ed60:	62f8      	str	r0, [r7, #44]	@ 0x2c
 800ed62:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ed64:	2b00      	cmp	r3, #0
 800ed66:	d00b      	beq.n	800ed80 <mg_tcpip_poll+0x200>
 800ed68:	6a3b      	ldr	r3, [r7, #32]
 800ed6a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800ed6c:	4619      	mov	r1, r3
 800ed6e:	6978      	ldr	r0, [r7, #20]
 800ed70:	f7ff fdfa 	bl	800e968 <mg_tcpip_rx>
 800ed74:	697b      	ldr	r3, [r7, #20]
 800ed76:	3330      	adds	r3, #48	@ 0x30
 800ed78:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800ed7a:	4618      	mov	r0, r3
 800ed7c:	f001 f87a 	bl	800fe74 <mg_queue_del>
 800ed80:	697b      	ldr	r3, [r7, #20]
 800ed82:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ed84:	681b      	ldr	r3, [r3, #0]
 800ed86:	637b      	str	r3, [r7, #52]	@ 0x34
 800ed88:	e0d2      	b.n	800ef30 <mg_tcpip_poll+0x3b0>
 800ed8a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ed8c:	f893 30ad 	ldrb.w	r3, [r3, #173]	@ 0xad
 800ed90:	f003 0301 	and.w	r3, r3, #1
 800ed94:	b2db      	uxtb	r3, r3
 800ed96:	2b00      	cmp	r3, #0
 800ed98:	f040 80c6 	bne.w	800ef28 <mg_tcpip_poll+0x3a8>
 800ed9c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ed9e:	f893 30ac 	ldrb.w	r3, [r3, #172]	@ 0xac
 800eda2:	f003 0301 	and.w	r3, r3, #1
 800eda6:	b2db      	uxtb	r3, r3
 800eda8:	2b00      	cmp	r3, #0
 800edaa:	f040 80bd 	bne.w	800ef28 <mg_tcpip_poll+0x3a8>
 800edae:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800edb0:	f893 30ac 	ldrb.w	r3, [r3, #172]	@ 0xac
 800edb4:	f003 0308 	and.w	r3, r3, #8
 800edb8:	b2db      	uxtb	r3, r3
 800edba:	2b00      	cmp	r3, #0
 800edbc:	f040 80b4 	bne.w	800ef28 <mg_tcpip_poll+0x3a8>
 800edc0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800edc2:	33b0      	adds	r3, #176	@ 0xb0
 800edc4:	627b      	str	r3, [r7, #36]	@ 0x24
 800edc6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800edc8:	331c      	adds	r3, #28
 800edca:	681b      	ldr	r3, [r3, #0]
 800edcc:	61fb      	str	r3, [r7, #28]
 800edce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800edd0:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 800edd4:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800edd8:	4290      	cmp	r0, r2
 800edda:	eb71 0303 	sbcs.w	r3, r1, r3
 800edde:	f080 80a4 	bcs.w	800ef2a <mg_tcpip_poll+0x3aa>
 800ede2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ede4:	7d9b      	ldrb	r3, [r3, #22]
 800ede6:	2b01      	cmp	r3, #1
 800ede8:	d138      	bne.n	800ee5c <mg_tcpip_poll+0x2dc>
 800edea:	4b59      	ldr	r3, [pc, #356]	@ (800ef50 <mg_tcpip_poll+0x3d0>)
 800edec:	681b      	ldr	r3, [r3, #0]
 800edee:	2b03      	cmp	r3, #3
 800edf0:	dd0f      	ble.n	800ee12 <mg_tcpip_poll+0x292>
 800edf2:	4b58      	ldr	r3, [pc, #352]	@ (800ef54 <mg_tcpip_poll+0x3d4>)
 800edf4:	f44f 7262 	mov.w	r2, #904	@ 0x388
 800edf8:	4957      	ldr	r1, [pc, #348]	@ (800ef58 <mg_tcpip_poll+0x3d8>)
 800edfa:	2004      	movs	r0, #4
 800edfc:	f7fd fb56 	bl	800c4ac <mg_log_prefix>
 800ee00:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ee02:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 800ee04:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ee06:	681a      	ldr	r2, [r3, #0]
 800ee08:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ee0a:	685b      	ldr	r3, [r3, #4]
 800ee0c:	4853      	ldr	r0, [pc, #332]	@ (800ef5c <mg_tcpip_poll+0x3dc>)
 800ee0e:	f7fd fb9d 	bl	800c54c <mg_log>
 800ee12:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ee14:	f103 0610 	add.w	r6, r3, #16
 800ee18:	69fb      	ldr	r3, [r7, #28]
 800ee1a:	613b      	str	r3, [r7, #16]
 800ee1c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ee1e:	8b1c      	ldrh	r4, [r3, #24]
 800ee20:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ee22:	8d9d      	ldrh	r5, [r3, #44]	@ 0x2c
 800ee24:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ee26:	681b      	ldr	r3, [r3, #0]
 800ee28:	4618      	mov	r0, r3
 800ee2a:	f001 fca4 	bl	8010776 <mg_ntohl>
 800ee2e:	6078      	str	r0, [r7, #4]
 800ee30:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ee32:	685b      	ldr	r3, [r3, #4]
 800ee34:	4618      	mov	r0, r3
 800ee36:	f001 fc9e 	bl	8010776 <mg_ntohl>
 800ee3a:	4603      	mov	r3, r0
 800ee3c:	2200      	movs	r2, #0
 800ee3e:	9205      	str	r2, [sp, #20]
 800ee40:	4a47      	ldr	r2, [pc, #284]	@ (800ef60 <mg_tcpip_poll+0x3e0>)
 800ee42:	9204      	str	r2, [sp, #16]
 800ee44:	9303      	str	r3, [sp, #12]
 800ee46:	6879      	ldr	r1, [r7, #4]
 800ee48:	9102      	str	r1, [sp, #8]
 800ee4a:	9501      	str	r5, [sp, #4]
 800ee4c:	9400      	str	r4, [sp, #0]
 800ee4e:	2310      	movs	r3, #16
 800ee50:	693a      	ldr	r2, [r7, #16]
 800ee52:	4631      	mov	r1, r6
 800ee54:	6978      	ldr	r0, [r7, #20]
 800ee56:	f7fe fe09 	bl	800da6c <tx_tcp>
 800ee5a:	e060      	b.n	800ef1e <mg_tcpip_poll+0x39e>
 800ee5c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ee5e:	7d9b      	ldrb	r3, [r3, #22]
 800ee60:	2b02      	cmp	r3, #2
 800ee62:	d104      	bne.n	800ee6e <mg_tcpip_poll+0x2ee>
 800ee64:	493f      	ldr	r1, [pc, #252]	@ (800ef64 <mg_tcpip_poll+0x3e4>)
 800ee66:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 800ee68:	f7f9 ffea 	bl	8008e40 <mg_error>
 800ee6c:	e057      	b.n	800ef1e <mg_tcpip_poll+0x39e>
 800ee6e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ee70:	7d9b      	ldrb	r3, [r3, #22]
 800ee72:	2b03      	cmp	r3, #3
 800ee74:	d104      	bne.n	800ee80 <mg_tcpip_poll+0x300>
 800ee76:	493c      	ldr	r1, [pc, #240]	@ (800ef68 <mg_tcpip_poll+0x3e8>)
 800ee78:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 800ee7a:	f7f9 ffe1 	bl	8008e40 <mg_error>
 800ee7e:	e04e      	b.n	800ef1e <mg_tcpip_poll+0x39e>
 800ee80:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ee82:	7d9b      	ldrb	r3, [r3, #22]
 800ee84:	2b04      	cmp	r3, #4
 800ee86:	d107      	bne.n	800ee98 <mg_tcpip_poll+0x318>
 800ee88:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800ee8a:	f892 30ad 	ldrb.w	r3, [r2, #173]	@ 0xad
 800ee8e:	f043 0320 	orr.w	r3, r3, #32
 800ee92:	f882 30ad 	strb.w	r3, [r2, #173]	@ 0xad
 800ee96:	e048      	b.n	800ef2a <mg_tcpip_poll+0x3aa>
 800ee98:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ee9a:	7ddb      	ldrb	r3, [r3, #23]
 800ee9c:	1c5a      	adds	r2, r3, #1
 800ee9e:	b2d1      	uxtb	r1, r2
 800eea0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800eea2:	75d1      	strb	r1, [r2, #23]
 800eea4:	2b02      	cmp	r3, #2
 800eea6:	d904      	bls.n	800eeb2 <mg_tcpip_poll+0x332>
 800eea8:	4930      	ldr	r1, [pc, #192]	@ (800ef6c <mg_tcpip_poll+0x3ec>)
 800eeaa:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 800eeac:	f7f9 ffc8 	bl	8008e40 <mg_error>
 800eeb0:	e035      	b.n	800ef1e <mg_tcpip_poll+0x39e>
 800eeb2:	4b27      	ldr	r3, [pc, #156]	@ (800ef50 <mg_tcpip_poll+0x3d0>)
 800eeb4:	681b      	ldr	r3, [r3, #0]
 800eeb6:	2b03      	cmp	r3, #3
 800eeb8:	dd0c      	ble.n	800eed4 <mg_tcpip_poll+0x354>
 800eeba:	4b26      	ldr	r3, [pc, #152]	@ (800ef54 <mg_tcpip_poll+0x3d4>)
 800eebc:	f240 3296 	movw	r2, #918	@ 0x396
 800eec0:	4925      	ldr	r1, [pc, #148]	@ (800ef58 <mg_tcpip_poll+0x3d8>)
 800eec2:	2004      	movs	r0, #4
 800eec4:	f7fd faf2 	bl	800c4ac <mg_log_prefix>
 800eec8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800eeca:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800eecc:	4619      	mov	r1, r3
 800eece:	4828      	ldr	r0, [pc, #160]	@ (800ef70 <mg_tcpip_poll+0x3f0>)
 800eed0:	f7fd fb3c 	bl	800c54c <mg_log>
 800eed4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800eed6:	f103 0610 	add.w	r6, r3, #16
 800eeda:	69fb      	ldr	r3, [r7, #28]
 800eedc:	613b      	str	r3, [r7, #16]
 800eede:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800eee0:	8b1c      	ldrh	r4, [r3, #24]
 800eee2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800eee4:	8d9d      	ldrh	r5, [r3, #44]	@ 0x2c
 800eee6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800eee8:	681b      	ldr	r3, [r3, #0]
 800eeea:	3b01      	subs	r3, #1
 800eeec:	4618      	mov	r0, r3
 800eeee:	f001 fc42 	bl	8010776 <mg_ntohl>
 800eef2:	6078      	str	r0, [r7, #4]
 800eef4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800eef6:	685b      	ldr	r3, [r3, #4]
 800eef8:	4618      	mov	r0, r3
 800eefa:	f001 fc3c 	bl	8010776 <mg_ntohl>
 800eefe:	4603      	mov	r3, r0
 800ef00:	2200      	movs	r2, #0
 800ef02:	9205      	str	r2, [sp, #20]
 800ef04:	4a16      	ldr	r2, [pc, #88]	@ (800ef60 <mg_tcpip_poll+0x3e0>)
 800ef06:	9204      	str	r2, [sp, #16]
 800ef08:	9303      	str	r3, [sp, #12]
 800ef0a:	6879      	ldr	r1, [r7, #4]
 800ef0c:	9102      	str	r1, [sp, #8]
 800ef0e:	9501      	str	r5, [sp, #4]
 800ef10:	9400      	str	r4, [sp, #0]
 800ef12:	2310      	movs	r3, #16
 800ef14:	693a      	ldr	r2, [r7, #16]
 800ef16:	4631      	mov	r1, r6
 800ef18:	6978      	ldr	r0, [r7, #20]
 800ef1a:	f7fe fda7 	bl	800da6c <tx_tcp>
 800ef1e:	2100      	movs	r1, #0
 800ef20:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 800ef22:	f7fd fc75 	bl	800c810 <settmout>
 800ef26:	e000      	b.n	800ef2a <mg_tcpip_poll+0x3aa>
 800ef28:	bf00      	nop
 800ef2a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ef2c:	681b      	ldr	r3, [r3, #0]
 800ef2e:	637b      	str	r3, [r7, #52]	@ 0x34
 800ef30:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ef32:	2b00      	cmp	r3, #0
 800ef34:	f47f af29 	bne.w	800ed8a <mg_tcpip_poll+0x20a>
 800ef38:	e002      	b.n	800ef40 <mg_tcpip_poll+0x3c0>
 800ef3a:	bf00      	nop
 800ef3c:	e000      	b.n	800ef40 <mg_tcpip_poll+0x3c0>
 800ef3e:	bf00      	nop
 800ef40:	373c      	adds	r7, #60	@ 0x3c
 800ef42:	46bd      	mov	sp, r7
 800ef44:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ef46:	bf00      	nop
 800ef48:	001b7740 	.word	0x001b7740
 800ef4c:	0801bfd8 	.word	0x0801bfd8
 800ef50:	24000048 	.word	0x24000048
 800ef54:	0801c0ac 	.word	0x0801c0ac
 800ef58:	0801b22c 	.word	0x0801b22c
 800ef5c:	0801b6cc 	.word	0x0801b6cc
 800ef60:	0801ab90 	.word	0x0801ab90
 800ef64:	0801b6dc 	.word	0x0801b6dc
 800ef68:	0801b6e8 	.word	0x0801b6e8
 800ef6c:	0801b6fc 	.word	0x0801b6fc
 800ef70:	0801b708 	.word	0x0801b708

0800ef74 <mg_tcpip_qwrite>:
 800ef74:	b580      	push	{r7, lr}
 800ef76:	b086      	sub	sp, #24
 800ef78:	af00      	add	r7, sp, #0
 800ef7a:	60f8      	str	r0, [r7, #12]
 800ef7c:	60b9      	str	r1, [r7, #8]
 800ef7e:	607a      	str	r2, [r7, #4]
 800ef80:	687b      	ldr	r3, [r7, #4]
 800ef82:	3330      	adds	r3, #48	@ 0x30
 800ef84:	f107 0114 	add.w	r1, r7, #20
 800ef88:	68ba      	ldr	r2, [r7, #8]
 800ef8a:	4618      	mov	r0, r3
 800ef8c:	f000 fe9e 	bl	800fccc <mg_queue_book>
 800ef90:	4602      	mov	r2, r0
 800ef92:	68bb      	ldr	r3, [r7, #8]
 800ef94:	4293      	cmp	r3, r2
 800ef96:	d811      	bhi.n	800efbc <mg_tcpip_qwrite+0x48>
 800ef98:	697b      	ldr	r3, [r7, #20]
 800ef9a:	68ba      	ldr	r2, [r7, #8]
 800ef9c:	68f9      	ldr	r1, [r7, #12]
 800ef9e:	4618      	mov	r0, r3
 800efa0:	f00a fdd5 	bl	8019b4e <memcpy>
 800efa4:	687b      	ldr	r3, [r7, #4]
 800efa6:	3330      	adds	r3, #48	@ 0x30
 800efa8:	68b9      	ldr	r1, [r7, #8]
 800efaa:	4618      	mov	r0, r3
 800efac:	f000 ff2c 	bl	800fe08 <mg_queue_add>
 800efb0:	687b      	ldr	r3, [r7, #4]
 800efb2:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800efb4:	1c5a      	adds	r2, r3, #1
 800efb6:	687b      	ldr	r3, [r7, #4]
 800efb8:	669a      	str	r2, [r3, #104]	@ 0x68
 800efba:	e004      	b.n	800efc6 <mg_tcpip_qwrite+0x52>
 800efbc:	687b      	ldr	r3, [r7, #4]
 800efbe:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800efc0:	1c5a      	adds	r2, r3, #1
 800efc2:	687b      	ldr	r3, [r7, #4]
 800efc4:	665a      	str	r2, [r3, #100]	@ 0x64
 800efc6:	bf00      	nop
 800efc8:	3718      	adds	r7, #24
 800efca:	46bd      	mov	sp, r7
 800efcc:	bd80      	pop	{r7, pc}
	...

0800efd0 <mg_tcpip_init>:
 800efd0:	b580      	push	{r7, lr}
 800efd2:	b084      	sub	sp, #16
 800efd4:	af00      	add	r7, sp, #0
 800efd6:	6078      	str	r0, [r7, #4]
 800efd8:	6039      	str	r1, [r7, #0]
 800efda:	683b      	ldr	r3, [r7, #0]
 800efdc:	781b      	ldrb	r3, [r3, #0]
 800efde:	2b00      	cmp	r3, #0
 800efe0:	d12d      	bne.n	800f03e <mg_tcpip_init+0x6e>
 800efe2:	683b      	ldr	r3, [r7, #0]
 800efe4:	785b      	ldrb	r3, [r3, #1]
 800efe6:	2b00      	cmp	r3, #0
 800efe8:	d129      	bne.n	800f03e <mg_tcpip_init+0x6e>
 800efea:	683b      	ldr	r3, [r7, #0]
 800efec:	789b      	ldrb	r3, [r3, #2]
 800efee:	2b00      	cmp	r3, #0
 800eff0:	d125      	bne.n	800f03e <mg_tcpip_init+0x6e>
 800eff2:	683b      	ldr	r3, [r7, #0]
 800eff4:	78db      	ldrb	r3, [r3, #3]
 800eff6:	2b00      	cmp	r3, #0
 800eff8:	d121      	bne.n	800f03e <mg_tcpip_init+0x6e>
 800effa:	683b      	ldr	r3, [r7, #0]
 800effc:	791b      	ldrb	r3, [r3, #4]
 800effe:	2b00      	cmp	r3, #0
 800f000:	d11d      	bne.n	800f03e <mg_tcpip_init+0x6e>
 800f002:	683b      	ldr	r3, [r7, #0]
 800f004:	795b      	ldrb	r3, [r3, #5]
 800f006:	2b00      	cmp	r3, #0
 800f008:	d119      	bne.n	800f03e <mg_tcpip_init+0x6e>
 800f00a:	683b      	ldr	r3, [r7, #0]
 800f00c:	2202      	movs	r2, #2
 800f00e:	701a      	strb	r2, [r3, #0]
 800f010:	683b      	ldr	r3, [r7, #0]
 800f012:	3301      	adds	r3, #1
 800f014:	2105      	movs	r1, #5
 800f016:	4618      	mov	r0, r3
 800f018:	f7f1 fc14 	bl	8000844 <mg_random>
 800f01c:	4b51      	ldr	r3, [pc, #324]	@ (800f164 <mg_tcpip_init+0x194>)
 800f01e:	681b      	ldr	r3, [r3, #0]
 800f020:	2b01      	cmp	r3, #1
 800f022:	dd0c      	ble.n	800f03e <mg_tcpip_init+0x6e>
 800f024:	4b50      	ldr	r3, [pc, #320]	@ (800f168 <mg_tcpip_init+0x198>)
 800f026:	f240 32b5 	movw	r2, #949	@ 0x3b5
 800f02a:	4950      	ldr	r1, [pc, #320]	@ (800f16c <mg_tcpip_init+0x19c>)
 800f02c:	2002      	movs	r0, #2
 800f02e:	f7fd fa3d 	bl	800c4ac <mg_log_prefix>
 800f032:	683b      	ldr	r3, [r7, #0]
 800f034:	461a      	mov	r2, r3
 800f036:	494e      	ldr	r1, [pc, #312]	@ (800f170 <mg_tcpip_init+0x1a0>)
 800f038:	484e      	ldr	r0, [pc, #312]	@ (800f174 <mg_tcpip_init+0x1a4>)
 800f03a:	f7fd fa87 	bl	800c54c <mg_log>
 800f03e:	683b      	ldr	r3, [r7, #0]
 800f040:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800f042:	681b      	ldr	r3, [r3, #0]
 800f044:	2b00      	cmp	r3, #0
 800f046:	d019      	beq.n	800f07c <mg_tcpip_init+0xac>
 800f048:	683b      	ldr	r3, [r7, #0]
 800f04a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800f04c:	681b      	ldr	r3, [r3, #0]
 800f04e:	6838      	ldr	r0, [r7, #0]
 800f050:	4798      	blx	r3
 800f052:	4603      	mov	r3, r0
 800f054:	f083 0301 	eor.w	r3, r3, #1
 800f058:	b2db      	uxtb	r3, r3
 800f05a:	2b00      	cmp	r3, #0
 800f05c:	d00e      	beq.n	800f07c <mg_tcpip_init+0xac>
 800f05e:	4b41      	ldr	r3, [pc, #260]	@ (800f164 <mg_tcpip_init+0x194>)
 800f060:	681b      	ldr	r3, [r3, #0]
 800f062:	2b00      	cmp	r3, #0
 800f064:	dd7a      	ble.n	800f15c <mg_tcpip_init+0x18c>
 800f066:	4b40      	ldr	r3, [pc, #256]	@ (800f168 <mg_tcpip_init+0x198>)
 800f068:	f240 32b9 	movw	r2, #953	@ 0x3b9
 800f06c:	493f      	ldr	r1, [pc, #252]	@ (800f16c <mg_tcpip_init+0x19c>)
 800f06e:	2001      	movs	r0, #1
 800f070:	f7fd fa1c 	bl	800c4ac <mg_log_prefix>
 800f074:	4840      	ldr	r0, [pc, #256]	@ (800f178 <mg_tcpip_init+0x1a8>)
 800f076:	f7fd fa69 	bl	800c54c <mg_log>
 800f07a:	e06f      	b.n	800f15c <mg_tcpip_init+0x18c>
 800f07c:	f240 6304 	movw	r3, #1540	@ 0x604
 800f080:	60fb      	str	r3, [r7, #12]
 800f082:	68f9      	ldr	r1, [r7, #12]
 800f084:	2001      	movs	r0, #1
 800f086:	f00a f88b 	bl	80191a0 <calloc>
 800f08a:	4603      	mov	r3, r0
 800f08c:	461a      	mov	r2, r3
 800f08e:	683b      	ldr	r3, [r7, #0]
 800f090:	615a      	str	r2, [r3, #20]
 800f092:	683b      	ldr	r3, [r7, #0]
 800f094:	68fa      	ldr	r2, [r7, #12]
 800f096:	619a      	str	r2, [r3, #24]
 800f098:	683b      	ldr	r3, [r7, #0]
 800f09a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800f09c:	2b00      	cmp	r3, #0
 800f09e:	d10a      	bne.n	800f0b6 <mg_tcpip_init+0xe6>
 800f0a0:	683b      	ldr	r3, [r7, #0]
 800f0a2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800f0a4:	689b      	ldr	r3, [r3, #8]
 800f0a6:	2b00      	cmp	r3, #0
 800f0a8:	d001      	beq.n	800f0ae <mg_tcpip_init+0xde>
 800f0aa:	68fb      	ldr	r3, [r7, #12]
 800f0ac:	e001      	b.n	800f0b2 <mg_tcpip_init+0xe2>
 800f0ae:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800f0b2:	683a      	ldr	r2, [r7, #0]
 800f0b4:	6353      	str	r3, [r2, #52]	@ 0x34
 800f0b6:	683b      	ldr	r3, [r7, #0]
 800f0b8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800f0ba:	4619      	mov	r1, r3
 800f0bc:	2001      	movs	r0, #1
 800f0be:	f00a f86f 	bl	80191a0 <calloc>
 800f0c2:	4603      	mov	r3, r0
 800f0c4:	461a      	mov	r2, r3
 800f0c6:	683b      	ldr	r3, [r7, #0]
 800f0c8:	631a      	str	r2, [r3, #48]	@ 0x30
 800f0ca:	f7f1 fbad 	bl	8000828 <mg_millis>
 800f0ce:	4602      	mov	r2, r0
 800f0d0:	460b      	mov	r3, r1
 800f0d2:	6839      	ldr	r1, [r7, #0]
 800f0d4:	e9c1 2314 	strd	r2, r3, [r1, #80]	@ 0x50
 800f0d8:	687b      	ldr	r3, [r7, #4]
 800f0da:	683a      	ldr	r2, [r7, #0]
 800f0dc:	63da      	str	r2, [r3, #60]	@ 0x3c
 800f0de:	683b      	ldr	r3, [r7, #0]
 800f0e0:	687a      	ldr	r2, [r7, #4]
 800f0e2:	62da      	str	r2, [r3, #44]	@ 0x2c
 800f0e4:	683b      	ldr	r3, [r7, #0]
 800f0e6:	f240 52dc 	movw	r2, #1500	@ 0x5dc
 800f0ea:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40
 800f0ee:	687b      	ldr	r3, [r7, #4]
 800f0f0:	2228      	movs	r2, #40	@ 0x28
 800f0f2:	641a      	str	r2, [r3, #64]	@ 0x40
 800f0f4:	683b      	ldr	r3, [r7, #0]
 800f0f6:	689b      	ldr	r3, [r3, #8]
 800f0f8:	2b00      	cmp	r3, #0
 800f0fa:	d102      	bne.n	800f102 <mg_tcpip_init+0x132>
 800f0fc:	683b      	ldr	r3, [r7, #0]
 800f0fe:	2201      	movs	r2, #1
 800f100:	771a      	strb	r2, [r3, #28]
 800f102:	683b      	ldr	r3, [r7, #0]
 800f104:	3342      	adds	r3, #66	@ 0x42
 800f106:	2206      	movs	r2, #6
 800f108:	21ff      	movs	r1, #255	@ 0xff
 800f10a:	4618      	mov	r0, r3
 800f10c:	f00a fc5e 	bl	80199cc <memset>
 800f110:	683b      	ldr	r3, [r7, #0]
 800f112:	3360      	adds	r3, #96	@ 0x60
 800f114:	2102      	movs	r1, #2
 800f116:	4618      	mov	r0, r3
 800f118:	f7f1 fb94 	bl	8000844 <mg_random>
 800f11c:	683b      	ldr	r3, [r7, #0]
 800f11e:	f8b3 2060 	ldrh.w	r2, [r3, #96]	@ 0x60
 800f122:	4b16      	ldr	r3, [pc, #88]	@ (800f17c <mg_tcpip_init+0x1ac>)
 800f124:	4313      	orrs	r3, r2
 800f126:	b29a      	uxth	r2, r3
 800f128:	683b      	ldr	r3, [r7, #0]
 800f12a:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 800f12e:	683b      	ldr	r3, [r7, #0]
 800f130:	695b      	ldr	r3, [r3, #20]
 800f132:	2b00      	cmp	r3, #0
 800f134:	d003      	beq.n	800f13e <mg_tcpip_init+0x16e>
 800f136:	683b      	ldr	r3, [r7, #0]
 800f138:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800f13a:	2b00      	cmp	r3, #0
 800f13c:	d10e      	bne.n	800f15c <mg_tcpip_init+0x18c>
 800f13e:	4b09      	ldr	r3, [pc, #36]	@ (800f164 <mg_tcpip_init+0x194>)
 800f140:	681b      	ldr	r3, [r3, #0]
 800f142:	2b00      	cmp	r3, #0
 800f144:	dd0a      	ble.n	800f15c <mg_tcpip_init+0x18c>
 800f146:	4b08      	ldr	r3, [pc, #32]	@ (800f168 <mg_tcpip_init+0x198>)
 800f148:	f240 32ca 	movw	r2, #970	@ 0x3ca
 800f14c:	4907      	ldr	r1, [pc, #28]	@ (800f16c <mg_tcpip_init+0x19c>)
 800f14e:	2001      	movs	r0, #1
 800f150:	f7fd f9ac 	bl	800c4ac <mg_log_prefix>
 800f154:	480a      	ldr	r0, [pc, #40]	@ (800f180 <mg_tcpip_init+0x1b0>)
 800f156:	f7fd f9f9 	bl	800c54c <mg_log>
 800f15a:	e7ff      	b.n	800f15c <mg_tcpip_init+0x18c>
 800f15c:	bf00      	nop
 800f15e:	3710      	adds	r7, #16
 800f160:	46bd      	mov	sp, r7
 800f162:	bd80      	pop	{r7, pc}
 800f164:	24000048 	.word	0x24000048
 800f168:	0801c0bc 	.word	0x0801c0bc
 800f16c:	0801b22c 	.word	0x0801b22c
 800f170:	0800fbe1 	.word	0x0800fbe1
 800f174:	0801b718 	.word	0x0801b718
 800f178:	0801b73c 	.word	0x0801b73c
 800f17c:	ffff8000 	.word	0xffff8000
 800f180:	0801b598 	.word	0x0801b598

0800f184 <send_syn>:
 800f184:	b590      	push	{r4, r7, lr}
 800f186:	b08d      	sub	sp, #52	@ 0x34
 800f188:	af06      	add	r7, sp, #24
 800f18a:	6078      	str	r0, [r7, #4]
 800f18c:	687b      	ldr	r3, [r7, #4]
 800f18e:	33b0      	adds	r3, #176	@ 0xb0
 800f190:	617b      	str	r3, [r7, #20]
 800f192:	687b      	ldr	r3, [r7, #4]
 800f194:	8b1b      	ldrh	r3, [r3, #24]
 800f196:	4618      	mov	r0, r3
 800f198:	f001 fb06 	bl	80107a8 <mg_ntohs>
 800f19c:	4603      	mov	r3, r0
 800f19e:	4618      	mov	r0, r3
 800f1a0:	f001 fae9 	bl	8010776 <mg_ntohl>
 800f1a4:	6138      	str	r0, [r7, #16]
 800f1a6:	687b      	ldr	r3, [r7, #4]
 800f1a8:	685b      	ldr	r3, [r3, #4]
 800f1aa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800f1ac:	60fb      	str	r3, [r7, #12]
 800f1ae:	687b      	ldr	r3, [r7, #4]
 800f1b0:	331c      	adds	r3, #28
 800f1b2:	681b      	ldr	r3, [r3, #0]
 800f1b4:	60bb      	str	r3, [r7, #8]
 800f1b6:	697b      	ldr	r3, [r7, #20]
 800f1b8:	f103 0010 	add.w	r0, r3, #16
 800f1bc:	68bc      	ldr	r4, [r7, #8]
 800f1be:	687b      	ldr	r3, [r7, #4]
 800f1c0:	8b1b      	ldrh	r3, [r3, #24]
 800f1c2:	687a      	ldr	r2, [r7, #4]
 800f1c4:	8d92      	ldrh	r2, [r2, #44]	@ 0x2c
 800f1c6:	2100      	movs	r1, #0
 800f1c8:	9105      	str	r1, [sp, #20]
 800f1ca:	2100      	movs	r1, #0
 800f1cc:	9104      	str	r1, [sp, #16]
 800f1ce:	2100      	movs	r1, #0
 800f1d0:	9103      	str	r1, [sp, #12]
 800f1d2:	6939      	ldr	r1, [r7, #16]
 800f1d4:	9102      	str	r1, [sp, #8]
 800f1d6:	9201      	str	r2, [sp, #4]
 800f1d8:	9300      	str	r3, [sp, #0]
 800f1da:	2302      	movs	r3, #2
 800f1dc:	4622      	mov	r2, r4
 800f1de:	4601      	mov	r1, r0
 800f1e0:	68f8      	ldr	r0, [r7, #12]
 800f1e2:	f7fe fc43 	bl	800da6c <tx_tcp>
 800f1e6:	bf00      	nop
 800f1e8:	371c      	adds	r7, #28
 800f1ea:	46bd      	mov	sp, r7
 800f1ec:	bd90      	pop	{r4, r7, pc}

0800f1ee <mg_open_listener>:
 800f1ee:	b580      	push	{r7, lr}
 800f1f0:	b082      	sub	sp, #8
 800f1f2:	af00      	add	r7, sp, #0
 800f1f4:	6078      	str	r0, [r7, #4]
 800f1f6:	6039      	str	r1, [r7, #0]
 800f1f8:	6838      	ldr	r0, [r7, #0]
 800f1fa:	f001 fa3f 	bl	801067c <mg_url_port>
 800f1fe:	4603      	mov	r3, r0
 800f200:	4618      	mov	r0, r3
 800f202:	f001 fad1 	bl	80107a8 <mg_ntohs>
 800f206:	4603      	mov	r3, r0
 800f208:	461a      	mov	r2, r3
 800f20a:	687b      	ldr	r3, [r7, #4]
 800f20c:	831a      	strh	r2, [r3, #24]
 800f20e:	2301      	movs	r3, #1
 800f210:	4618      	mov	r0, r3
 800f212:	3708      	adds	r7, #8
 800f214:	46bd      	mov	sp, r7
 800f216:	bd80      	pop	{r7, pc}

0800f218 <write_conn>:
 800f218:	b580      	push	{r7, lr}
 800f21a:	b084      	sub	sp, #16
 800f21c:	af00      	add	r7, sp, #0
 800f21e:	6078      	str	r0, [r7, #4]
 800f220:	687b      	ldr	r3, [r7, #4]
 800f222:	f893 30ac 	ldrb.w	r3, [r3, #172]	@ 0xac
 800f226:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800f22a:	b2db      	uxtb	r3, r3
 800f22c:	2b00      	cmp	r3, #0
 800f22e:	d009      	beq.n	800f244 <write_conn+0x2c>
 800f230:	687b      	ldr	r3, [r7, #4]
 800f232:	6c99      	ldr	r1, [r3, #72]	@ 0x48
 800f234:	687b      	ldr	r3, [r7, #4]
 800f236:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800f238:	461a      	mov	r2, r3
 800f23a:	6878      	ldr	r0, [r7, #4]
 800f23c:	f001 f931 	bl	80104a2 <mg_tls_send>
 800f240:	4603      	mov	r3, r0
 800f242:	e008      	b.n	800f256 <write_conn+0x3e>
 800f244:	687b      	ldr	r3, [r7, #4]
 800f246:	6c99      	ldr	r1, [r3, #72]	@ 0x48
 800f248:	687b      	ldr	r3, [r7, #4]
 800f24a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800f24c:	461a      	mov	r2, r3
 800f24e:	6878      	ldr	r0, [r7, #4]
 800f250:	f7fe fe64 	bl	800df1c <mg_io_send>
 800f254:	4603      	mov	r3, r0
 800f256:	60fb      	str	r3, [r7, #12]
 800f258:	68fb      	ldr	r3, [r7, #12]
 800f25a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f25e:	d104      	bne.n	800f26a <write_conn+0x52>
 800f260:	490c      	ldr	r1, [pc, #48]	@ (800f294 <write_conn+0x7c>)
 800f262:	6878      	ldr	r0, [r7, #4]
 800f264:	f7f9 fdec 	bl	8008e40 <mg_error>
 800f268:	e010      	b.n	800f28c <write_conn+0x74>
 800f26a:	68fb      	ldr	r3, [r7, #12]
 800f26c:	2b00      	cmp	r3, #0
 800f26e:	dd0d      	ble.n	800f28c <write_conn+0x74>
 800f270:	687b      	ldr	r3, [r7, #4]
 800f272:	3348      	adds	r3, #72	@ 0x48
 800f274:	68fa      	ldr	r2, [r7, #12]
 800f276:	2100      	movs	r1, #0
 800f278:	4618      	mov	r0, r3
 800f27a:	f7fc fb15 	bl	800b8a8 <mg_iobuf_del>
 800f27e:	f107 030c 	add.w	r3, r7, #12
 800f282:	461a      	mov	r2, r3
 800f284:	2108      	movs	r1, #8
 800f286:	6878      	ldr	r0, [r7, #4]
 800f288:	f7f9 fdba 	bl	8008e00 <mg_call>
 800f28c:	bf00      	nop
 800f28e:	3710      	adds	r7, #16
 800f290:	46bd      	mov	sp, r7
 800f292:	bd80      	pop	{r7, pc}
 800f294:	0801b778 	.word	0x0801b778

0800f298 <init_closure>:
 800f298:	b5f0      	push	{r4, r5, r6, r7, lr}
 800f29a:	b08f      	sub	sp, #60	@ 0x3c
 800f29c:	af06      	add	r7, sp, #24
 800f29e:	60f8      	str	r0, [r7, #12]
 800f2a0:	68fb      	ldr	r3, [r7, #12]
 800f2a2:	33b0      	adds	r3, #176	@ 0xb0
 800f2a4:	61fb      	str	r3, [r7, #28]
 800f2a6:	68fb      	ldr	r3, [r7, #12]
 800f2a8:	f893 30ad 	ldrb.w	r3, [r3, #173]	@ 0xad
 800f2ac:	f003 0301 	and.w	r3, r3, #1
 800f2b0:	b2db      	uxtb	r3, r3
 800f2b2:	2b00      	cmp	r3, #0
 800f2b4:	d13f      	bne.n	800f336 <init_closure+0x9e>
 800f2b6:	68fb      	ldr	r3, [r7, #12]
 800f2b8:	f893 30ac 	ldrb.w	r3, [r3, #172]	@ 0xac
 800f2bc:	f003 0301 	and.w	r3, r3, #1
 800f2c0:	b2db      	uxtb	r3, r3
 800f2c2:	2b00      	cmp	r3, #0
 800f2c4:	d137      	bne.n	800f336 <init_closure+0x9e>
 800f2c6:	68fb      	ldr	r3, [r7, #12]
 800f2c8:	f893 30ac 	ldrb.w	r3, [r3, #172]	@ 0xac
 800f2cc:	f003 0320 	and.w	r3, r3, #32
 800f2d0:	b2db      	uxtb	r3, r3
 800f2d2:	2b00      	cmp	r3, #0
 800f2d4:	d12f      	bne.n	800f336 <init_closure+0x9e>
 800f2d6:	68fb      	ldr	r3, [r7, #12]
 800f2d8:	685b      	ldr	r3, [r3, #4]
 800f2da:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800f2dc:	61bb      	str	r3, [r7, #24]
 800f2de:	68fb      	ldr	r3, [r7, #12]
 800f2e0:	331c      	adds	r3, #28
 800f2e2:	681b      	ldr	r3, [r3, #0]
 800f2e4:	617b      	str	r3, [r7, #20]
 800f2e6:	69fb      	ldr	r3, [r7, #28]
 800f2e8:	f103 0610 	add.w	r6, r3, #16
 800f2ec:	697b      	ldr	r3, [r7, #20]
 800f2ee:	60bb      	str	r3, [r7, #8]
 800f2f0:	68fb      	ldr	r3, [r7, #12]
 800f2f2:	8b1c      	ldrh	r4, [r3, #24]
 800f2f4:	68fb      	ldr	r3, [r7, #12]
 800f2f6:	8d9d      	ldrh	r5, [r3, #44]	@ 0x2c
 800f2f8:	69fb      	ldr	r3, [r7, #28]
 800f2fa:	681b      	ldr	r3, [r3, #0]
 800f2fc:	4618      	mov	r0, r3
 800f2fe:	f001 fa3a 	bl	8010776 <mg_ntohl>
 800f302:	6078      	str	r0, [r7, #4]
 800f304:	69fb      	ldr	r3, [r7, #28]
 800f306:	685b      	ldr	r3, [r3, #4]
 800f308:	4618      	mov	r0, r3
 800f30a:	f001 fa34 	bl	8010776 <mg_ntohl>
 800f30e:	4603      	mov	r3, r0
 800f310:	2200      	movs	r2, #0
 800f312:	9205      	str	r2, [sp, #20]
 800f314:	2200      	movs	r2, #0
 800f316:	9204      	str	r2, [sp, #16]
 800f318:	9303      	str	r3, [sp, #12]
 800f31a:	6879      	ldr	r1, [r7, #4]
 800f31c:	9102      	str	r1, [sp, #8]
 800f31e:	9501      	str	r5, [sp, #4]
 800f320:	9400      	str	r4, [sp, #0]
 800f322:	2311      	movs	r3, #17
 800f324:	68ba      	ldr	r2, [r7, #8]
 800f326:	4631      	mov	r1, r6
 800f328:	69b8      	ldr	r0, [r7, #24]
 800f32a:	f7fe fb9f 	bl	800da6c <tx_tcp>
 800f32e:	2104      	movs	r1, #4
 800f330:	68f8      	ldr	r0, [r7, #12]
 800f332:	f7fd fa6d 	bl	800c810 <settmout>
 800f336:	bf00      	nop
 800f338:	3724      	adds	r7, #36	@ 0x24
 800f33a:	46bd      	mov	sp, r7
 800f33c:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800f33e <close_conn>:
 800f33e:	b580      	push	{r7, lr}
 800f340:	b084      	sub	sp, #16
 800f342:	af00      	add	r7, sp, #0
 800f344:	6078      	str	r0, [r7, #4]
 800f346:	687b      	ldr	r3, [r7, #4]
 800f348:	33b0      	adds	r3, #176	@ 0xb0
 800f34a:	60fb      	str	r3, [r7, #12]
 800f34c:	68fb      	ldr	r3, [r7, #12]
 800f34e:	3318      	adds	r3, #24
 800f350:	4618      	mov	r0, r3
 800f352:	f7fc faf4 	bl	800b93e <mg_iobuf_free>
 800f356:	6878      	ldr	r0, [r7, #4]
 800f358:	f000 f94e 	bl	800f5f8 <mg_close_conn>
 800f35c:	bf00      	nop
 800f35e:	3710      	adds	r7, #16
 800f360:	46bd      	mov	sp, r7
 800f362:	bd80      	pop	{r7, pc}

0800f364 <can_write>:
 800f364:	b480      	push	{r7}
 800f366:	b083      	sub	sp, #12
 800f368:	af00      	add	r7, sp, #0
 800f36a:	6078      	str	r0, [r7, #4]
 800f36c:	687b      	ldr	r3, [r7, #4]
 800f36e:	f893 30ac 	ldrb.w	r3, [r3, #172]	@ 0xac
 800f372:	f003 0320 	and.w	r3, r3, #32
 800f376:	b2db      	uxtb	r3, r3
 800f378:	2b00      	cmp	r3, #0
 800f37a:	d11d      	bne.n	800f3b8 <can_write+0x54>
 800f37c:	687b      	ldr	r3, [r7, #4]
 800f37e:	f893 30ac 	ldrb.w	r3, [r3, #172]	@ 0xac
 800f382:	f003 0308 	and.w	r3, r3, #8
 800f386:	b2db      	uxtb	r3, r3
 800f388:	2b00      	cmp	r3, #0
 800f38a:	d115      	bne.n	800f3b8 <can_write+0x54>
 800f38c:	687b      	ldr	r3, [r7, #4]
 800f38e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800f390:	2b00      	cmp	r3, #0
 800f392:	d011      	beq.n	800f3b8 <can_write+0x54>
 800f394:	687b      	ldr	r3, [r7, #4]
 800f396:	f893 30ac 	ldrb.w	r3, [r3, #172]	@ 0xac
 800f39a:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 800f39e:	b2db      	uxtb	r3, r3
 800f3a0:	2b00      	cmp	r3, #0
 800f3a2:	d109      	bne.n	800f3b8 <can_write+0x54>
 800f3a4:	687b      	ldr	r3, [r7, #4]
 800f3a6:	f893 30ac 	ldrb.w	r3, [r3, #172]	@ 0xac
 800f3aa:	f003 0310 	and.w	r3, r3, #16
 800f3ae:	b2db      	uxtb	r3, r3
 800f3b0:	2b00      	cmp	r3, #0
 800f3b2:	d101      	bne.n	800f3b8 <can_write+0x54>
 800f3b4:	2301      	movs	r3, #1
 800f3b6:	e000      	b.n	800f3ba <can_write+0x56>
 800f3b8:	2300      	movs	r3, #0
 800f3ba:	f003 0301 	and.w	r3, r3, #1
 800f3be:	b2db      	uxtb	r3, r3
 800f3c0:	4618      	mov	r0, r3
 800f3c2:	370c      	adds	r7, #12
 800f3c4:	46bd      	mov	sp, r7
 800f3c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f3ca:	4770      	bx	lr

0800f3cc <mg_mgr_poll>:
 800f3cc:	b5b0      	push	{r4, r5, r7, lr}
 800f3ce:	b08c      	sub	sp, #48	@ 0x30
 800f3d0:	af04      	add	r7, sp, #16
 800f3d2:	6078      	str	r0, [r7, #4]
 800f3d4:	6039      	str	r1, [r7, #0]
 800f3d6:	f7f1 fa27 	bl	8000828 <mg_millis>
 800f3da:	4602      	mov	r2, r0
 800f3dc:	460b      	mov	r3, r1
 800f3de:	e9c7 2302 	strd	r2, r3, [r7, #8]
 800f3e2:	687b      	ldr	r3, [r7, #4]
 800f3e4:	6bd9      	ldr	r1, [r3, #60]	@ 0x3c
 800f3e6:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800f3ea:	4608      	mov	r0, r1
 800f3ec:	f7ff fbc8 	bl	800eb80 <mg_tcpip_poll>
 800f3f0:	687b      	ldr	r3, [r7, #4]
 800f3f2:	f103 0134 	add.w	r1, r3, #52	@ 0x34
 800f3f6:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800f3fa:	4608      	mov	r0, r1
 800f3fc:	f000 ffbd 	bl	801037a <mg_timer_poll>
 800f400:	687b      	ldr	r3, [r7, #4]
 800f402:	681b      	ldr	r3, [r3, #0]
 800f404:	61fb      	str	r3, [r7, #28]
 800f406:	e082      	b.n	800f50e <mg_mgr_poll+0x142>
 800f408:	69fb      	ldr	r3, [r7, #28]
 800f40a:	681b      	ldr	r3, [r3, #0]
 800f40c:	61bb      	str	r3, [r7, #24]
 800f40e:	69fb      	ldr	r3, [r7, #28]
 800f410:	33b0      	adds	r3, #176	@ 0xb0
 800f412:	617b      	str	r3, [r7, #20]
 800f414:	f107 0308 	add.w	r3, r7, #8
 800f418:	461a      	mov	r2, r3
 800f41a:	2102      	movs	r1, #2
 800f41c:	69f8      	ldr	r0, [r7, #28]
 800f41e:	f7f9 fcef 	bl	8008e00 <mg_call>
 800f422:	4b3f      	ldr	r3, [pc, #252]	@ (800f520 <mg_mgr_poll+0x154>)
 800f424:	681b      	ldr	r3, [r3, #0]
 800f426:	2b03      	cmp	r3, #3
 800f428:	dd48      	ble.n	800f4bc <mg_mgr_poll+0xf0>
 800f42a:	4b3e      	ldr	r3, [pc, #248]	@ (800f524 <mg_mgr_poll+0x158>)
 800f42c:	f240 4237 	movw	r2, #1079	@ 0x437
 800f430:	493d      	ldr	r1, [pc, #244]	@ (800f528 <mg_mgr_poll+0x15c>)
 800f432:	2004      	movs	r0, #4
 800f434:	f7fd f83a 	bl	800c4ac <mg_log_prefix>
 800f438:	69fb      	ldr	r3, [r7, #28]
 800f43a:	6b58      	ldr	r0, [r3, #52]	@ 0x34
 800f43c:	69fb      	ldr	r3, [r7, #28]
 800f43e:	f893 30ac 	ldrb.w	r3, [r3, #172]	@ 0xac
 800f442:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800f446:	b2db      	uxtb	r3, r3
 800f448:	2b00      	cmp	r3, #0
 800f44a:	d001      	beq.n	800f450 <mg_mgr_poll+0x84>
 800f44c:	2454      	movs	r4, #84	@ 0x54
 800f44e:	e000      	b.n	800f452 <mg_mgr_poll+0x86>
 800f450:	2474      	movs	r4, #116	@ 0x74
 800f452:	69fb      	ldr	r3, [r7, #28]
 800f454:	f893 30ac 	ldrb.w	r3, [r3, #172]	@ 0xac
 800f458:	f003 0320 	and.w	r3, r3, #32
 800f45c:	b2db      	uxtb	r3, r3
 800f45e:	2b00      	cmp	r3, #0
 800f460:	d001      	beq.n	800f466 <mg_mgr_poll+0x9a>
 800f462:	2543      	movs	r5, #67	@ 0x43
 800f464:	e000      	b.n	800f468 <mg_mgr_poll+0x9c>
 800f466:	2563      	movs	r5, #99	@ 0x63
 800f468:	69fb      	ldr	r3, [r7, #28]
 800f46a:	f893 30ac 	ldrb.w	r3, [r3, #172]	@ 0xac
 800f46e:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 800f472:	b2db      	uxtb	r3, r3
 800f474:	2b00      	cmp	r3, #0
 800f476:	d001      	beq.n	800f47c <mg_mgr_poll+0xb0>
 800f478:	2348      	movs	r3, #72	@ 0x48
 800f47a:	e000      	b.n	800f47e <mg_mgr_poll+0xb2>
 800f47c:	2368      	movs	r3, #104	@ 0x68
 800f47e:	69fa      	ldr	r2, [r7, #28]
 800f480:	f892 20ac 	ldrb.w	r2, [r2, #172]	@ 0xac
 800f484:	f002 0208 	and.w	r2, r2, #8
 800f488:	b2d2      	uxtb	r2, r2
 800f48a:	2a00      	cmp	r2, #0
 800f48c:	d001      	beq.n	800f492 <mg_mgr_poll+0xc6>
 800f48e:	2252      	movs	r2, #82	@ 0x52
 800f490:	e000      	b.n	800f494 <mg_mgr_poll+0xc8>
 800f492:	2272      	movs	r2, #114	@ 0x72
 800f494:	69f9      	ldr	r1, [r7, #28]
 800f496:	f891 10ad 	ldrb.w	r1, [r1, #173]	@ 0xad
 800f49a:	f001 0120 	and.w	r1, r1, #32
 800f49e:	b2c9      	uxtb	r1, r1
 800f4a0:	2900      	cmp	r1, #0
 800f4a2:	d001      	beq.n	800f4a8 <mg_mgr_poll+0xdc>
 800f4a4:	2143      	movs	r1, #67	@ 0x43
 800f4a6:	e000      	b.n	800f4aa <mg_mgr_poll+0xde>
 800f4a8:	2163      	movs	r1, #99	@ 0x63
 800f4aa:	9102      	str	r1, [sp, #8]
 800f4ac:	9201      	str	r2, [sp, #4]
 800f4ae:	9300      	str	r3, [sp, #0]
 800f4b0:	462b      	mov	r3, r5
 800f4b2:	4622      	mov	r2, r4
 800f4b4:	4601      	mov	r1, r0
 800f4b6:	481d      	ldr	r0, [pc, #116]	@ (800f52c <mg_mgr_poll+0x160>)
 800f4b8:	f7fd f848 	bl	800c54c <mg_log>
 800f4bc:	69f8      	ldr	r0, [r7, #28]
 800f4be:	f7ff ff51 	bl	800f364 <can_write>
 800f4c2:	4603      	mov	r3, r0
 800f4c4:	2b00      	cmp	r3, #0
 800f4c6:	d002      	beq.n	800f4ce <mg_mgr_poll+0x102>
 800f4c8:	69f8      	ldr	r0, [r7, #28]
 800f4ca:	f7ff fea5 	bl	800f218 <write_conn>
 800f4ce:	69fb      	ldr	r3, [r7, #28]
 800f4d0:	f893 30ad 	ldrb.w	r3, [r3, #173]	@ 0xad
 800f4d4:	f003 0310 	and.w	r3, r3, #16
 800f4d8:	b2db      	uxtb	r3, r3
 800f4da:	2b00      	cmp	r3, #0
 800f4dc:	d00a      	beq.n	800f4f4 <mg_mgr_poll+0x128>
 800f4de:	69fb      	ldr	r3, [r7, #28]
 800f4e0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800f4e2:	2b00      	cmp	r3, #0
 800f4e4:	d106      	bne.n	800f4f4 <mg_mgr_poll+0x128>
 800f4e6:	697b      	ldr	r3, [r7, #20]
 800f4e8:	7d9b      	ldrb	r3, [r3, #22]
 800f4ea:	2b04      	cmp	r3, #4
 800f4ec:	d002      	beq.n	800f4f4 <mg_mgr_poll+0x128>
 800f4ee:	69f8      	ldr	r0, [r7, #28]
 800f4f0:	f7ff fed2 	bl	800f298 <init_closure>
 800f4f4:	69fb      	ldr	r3, [r7, #28]
 800f4f6:	f893 30ad 	ldrb.w	r3, [r3, #173]	@ 0xad
 800f4fa:	f003 0320 	and.w	r3, r3, #32
 800f4fe:	b2db      	uxtb	r3, r3
 800f500:	2b00      	cmp	r3, #0
 800f502:	d002      	beq.n	800f50a <mg_mgr_poll+0x13e>
 800f504:	69f8      	ldr	r0, [r7, #28]
 800f506:	f7ff ff1a 	bl	800f33e <close_conn>
 800f50a:	69bb      	ldr	r3, [r7, #24]
 800f50c:	61fb      	str	r3, [r7, #28]
 800f50e:	69fb      	ldr	r3, [r7, #28]
 800f510:	2b00      	cmp	r3, #0
 800f512:	f47f af79 	bne.w	800f408 <mg_mgr_poll+0x3c>
 800f516:	bf00      	nop
 800f518:	bf00      	nop
 800f51a:	3720      	adds	r7, #32
 800f51c:	46bd      	mov	sp, r7
 800f51e:	bdb0      	pop	{r4, r5, r7, pc}
 800f520:	24000048 	.word	0x24000048
 800f524:	0801c0cc 	.word	0x0801c0cc
 800f528:	0801b22c 	.word	0x0801b22c
 800f52c:	0801b780 	.word	0x0801b780

0800f530 <mg_vprintf>:
 800f530:	b580      	push	{r7, lr}
 800f532:	b086      	sub	sp, #24
 800f534:	af00      	add	r7, sp, #0
 800f536:	60f8      	str	r0, [r7, #12]
 800f538:	60b9      	str	r1, [r7, #8]
 800f53a:	607a      	str	r2, [r7, #4]
 800f53c:	68fb      	ldr	r3, [r7, #12]
 800f53e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800f540:	617b      	str	r3, [r7, #20]
 800f542:	68fb      	ldr	r3, [r7, #12]
 800f544:	f103 0148 	add.w	r1, r3, #72	@ 0x48
 800f548:	687b      	ldr	r3, [r7, #4]
 800f54a:	68ba      	ldr	r2, [r7, #8]
 800f54c:	4805      	ldr	r0, [pc, #20]	@ (800f564 <mg_vprintf+0x34>)
 800f54e:	f7fa f923 	bl	8009798 <mg_vxprintf>
 800f552:	68fb      	ldr	r3, [r7, #12]
 800f554:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800f556:	697b      	ldr	r3, [r7, #20]
 800f558:	1ad3      	subs	r3, r2, r3
 800f55a:	4618      	mov	r0, r3
 800f55c:	3718      	adds	r7, #24
 800f55e:	46bd      	mov	sp, r7
 800f560:	bd80      	pop	{r7, pc}
 800f562:	bf00      	nop
 800f564:	0800f959 	.word	0x0800f959

0800f568 <mg_printf>:
 800f568:	b40e      	push	{r1, r2, r3}
 800f56a:	b580      	push	{r7, lr}
 800f56c:	b085      	sub	sp, #20
 800f56e:	af00      	add	r7, sp, #0
 800f570:	6078      	str	r0, [r7, #4]
 800f572:	2300      	movs	r3, #0
 800f574:	60fb      	str	r3, [r7, #12]
 800f576:	f107 0320 	add.w	r3, r7, #32
 800f57a:	60bb      	str	r3, [r7, #8]
 800f57c:	f107 0308 	add.w	r3, r7, #8
 800f580:	461a      	mov	r2, r3
 800f582:	69f9      	ldr	r1, [r7, #28]
 800f584:	6878      	ldr	r0, [r7, #4]
 800f586:	f7ff ffd3 	bl	800f530 <mg_vprintf>
 800f58a:	60f8      	str	r0, [r7, #12]
 800f58c:	68fb      	ldr	r3, [r7, #12]
 800f58e:	4618      	mov	r0, r3
 800f590:	3714      	adds	r7, #20
 800f592:	46bd      	mov	sp, r7
 800f594:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800f598:	b003      	add	sp, #12
 800f59a:	4770      	bx	lr

0800f59c <mg_alloc_conn>:
 800f59c:	b580      	push	{r7, lr}
 800f59e:	b084      	sub	sp, #16
 800f5a0:	af00      	add	r7, sp, #0
 800f5a2:	6078      	str	r0, [r7, #4]
 800f5a4:	687b      	ldr	r3, [r7, #4]
 800f5a6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800f5a8:	33b0      	adds	r3, #176	@ 0xb0
 800f5aa:	4619      	mov	r1, r3
 800f5ac:	2001      	movs	r0, #1
 800f5ae:	f009 fdf7 	bl	80191a0 <calloc>
 800f5b2:	4603      	mov	r3, r0
 800f5b4:	60fb      	str	r3, [r7, #12]
 800f5b6:	68fb      	ldr	r3, [r7, #12]
 800f5b8:	2b00      	cmp	r3, #0
 800f5ba:	d017      	beq.n	800f5ec <mg_alloc_conn+0x50>
 800f5bc:	68fb      	ldr	r3, [r7, #12]
 800f5be:	687a      	ldr	r2, [r7, #4]
 800f5c0:	605a      	str	r2, [r3, #4]
 800f5c2:	68fb      	ldr	r3, [r7, #12]
 800f5c4:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800f5c8:	675a      	str	r2, [r3, #116]	@ 0x74
 800f5ca:	68fb      	ldr	r3, [r7, #12]
 800f5cc:	6f5a      	ldr	r2, [r3, #116]	@ 0x74
 800f5ce:	68fb      	ldr	r3, [r7, #12]
 800f5d0:	645a      	str	r2, [r3, #68]	@ 0x44
 800f5d2:	68fb      	ldr	r3, [r7, #12]
 800f5d4:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800f5d6:	68fb      	ldr	r3, [r7, #12]
 800f5d8:	655a      	str	r2, [r3, #84]	@ 0x54
 800f5da:	687b      	ldr	r3, [r7, #4]
 800f5dc:	69db      	ldr	r3, [r3, #28]
 800f5de:	1c5a      	adds	r2, r3, #1
 800f5e0:	687b      	ldr	r3, [r7, #4]
 800f5e2:	61da      	str	r2, [r3, #28]
 800f5e4:	687b      	ldr	r3, [r7, #4]
 800f5e6:	69da      	ldr	r2, [r3, #28]
 800f5e8:	68fb      	ldr	r3, [r7, #12]
 800f5ea:	635a      	str	r2, [r3, #52]	@ 0x34
 800f5ec:	68fb      	ldr	r3, [r7, #12]
 800f5ee:	4618      	mov	r0, r3
 800f5f0:	3710      	adds	r7, #16
 800f5f2:	46bd      	mov	sp, r7
 800f5f4:	bd80      	pop	{r7, pc}
	...

0800f5f8 <mg_close_conn>:
 800f5f8:	b580      	push	{r7, lr}
 800f5fa:	b084      	sub	sp, #16
 800f5fc:	af00      	add	r7, sp, #0
 800f5fe:	6078      	str	r0, [r7, #4]
 800f600:	6878      	ldr	r0, [r7, #4]
 800f602:	f7f9 fbdb 	bl	8008dbc <mg_resolve_cancel>
 800f606:	687b      	ldr	r3, [r7, #4]
 800f608:	685b      	ldr	r3, [r3, #4]
 800f60a:	60fb      	str	r3, [r7, #12]
 800f60c:	e002      	b.n	800f614 <mg_close_conn+0x1c>
 800f60e:	68fb      	ldr	r3, [r7, #12]
 800f610:	681b      	ldr	r3, [r3, #0]
 800f612:	60fb      	str	r3, [r7, #12]
 800f614:	68fb      	ldr	r3, [r7, #12]
 800f616:	681b      	ldr	r3, [r3, #0]
 800f618:	687a      	ldr	r2, [r7, #4]
 800f61a:	429a      	cmp	r2, r3
 800f61c:	d1f7      	bne.n	800f60e <mg_close_conn+0x16>
 800f61e:	687b      	ldr	r3, [r7, #4]
 800f620:	681a      	ldr	r2, [r3, #0]
 800f622:	68fb      	ldr	r3, [r7, #12]
 800f624:	601a      	str	r2, [r3, #0]
 800f626:	687b      	ldr	r3, [r7, #4]
 800f628:	685b      	ldr	r3, [r3, #4]
 800f62a:	689b      	ldr	r3, [r3, #8]
 800f62c:	687a      	ldr	r2, [r7, #4]
 800f62e:	429a      	cmp	r2, r3
 800f630:	d103      	bne.n	800f63a <mg_close_conn+0x42>
 800f632:	687b      	ldr	r3, [r7, #4]
 800f634:	685b      	ldr	r3, [r3, #4]
 800f636:	2200      	movs	r2, #0
 800f638:	609a      	str	r2, [r3, #8]
 800f63a:	687b      	ldr	r3, [r7, #4]
 800f63c:	685b      	ldr	r3, [r3, #4]
 800f63e:	691b      	ldr	r3, [r3, #16]
 800f640:	687a      	ldr	r2, [r7, #4]
 800f642:	429a      	cmp	r2, r3
 800f644:	d103      	bne.n	800f64e <mg_close_conn+0x56>
 800f646:	687b      	ldr	r3, [r7, #4]
 800f648:	685b      	ldr	r3, [r3, #4]
 800f64a:	2200      	movs	r2, #0
 800f64c:	611a      	str	r2, [r3, #16]
 800f64e:	2200      	movs	r2, #0
 800f650:	2109      	movs	r1, #9
 800f652:	6878      	ldr	r0, [r7, #4]
 800f654:	f7f9 fbd4 	bl	8008e00 <mg_call>
 800f658:	4b17      	ldr	r3, [pc, #92]	@ (800f6b8 <mg_close_conn+0xc0>)
 800f65a:	681b      	ldr	r3, [r3, #0]
 800f65c:	2b02      	cmp	r3, #2
 800f65e:	dd0d      	ble.n	800f67c <mg_close_conn+0x84>
 800f660:	4b16      	ldr	r3, [pc, #88]	@ (800f6bc <mg_close_conn+0xc4>)
 800f662:	2297      	movs	r2, #151	@ 0x97
 800f664:	4916      	ldr	r1, [pc, #88]	@ (800f6c0 <mg_close_conn+0xc8>)
 800f666:	2003      	movs	r0, #3
 800f668:	f7fc ff20 	bl	800c4ac <mg_log_prefix>
 800f66c:	687b      	ldr	r3, [r7, #4]
 800f66e:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 800f670:	687b      	ldr	r3, [r7, #4]
 800f672:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800f674:	461a      	mov	r2, r3
 800f676:	4813      	ldr	r0, [pc, #76]	@ (800f6c4 <mg_close_conn+0xcc>)
 800f678:	f7fc ff68 	bl	800c54c <mg_log>
 800f67c:	6878      	ldr	r0, [r7, #4]
 800f67e:	f000 feed 	bl	801045c <mg_tls_free>
 800f682:	687b      	ldr	r3, [r7, #4]
 800f684:	3338      	adds	r3, #56	@ 0x38
 800f686:	4618      	mov	r0, r3
 800f688:	f7fc f959 	bl	800b93e <mg_iobuf_free>
 800f68c:	687b      	ldr	r3, [r7, #4]
 800f68e:	3348      	adds	r3, #72	@ 0x48
 800f690:	4618      	mov	r0, r3
 800f692:	f7fc f954 	bl	800b93e <mg_iobuf_free>
 800f696:	687b      	ldr	r3, [r7, #4]
 800f698:	3368      	adds	r3, #104	@ 0x68
 800f69a:	4618      	mov	r0, r3
 800f69c:	f7fc f94f 	bl	800b93e <mg_iobuf_free>
 800f6a0:	21b0      	movs	r1, #176	@ 0xb0
 800f6a2:	6878      	ldr	r0, [r7, #4]
 800f6a4:	f001 f84e 	bl	8010744 <mg_bzero>
 800f6a8:	6878      	ldr	r0, [r7, #4]
 800f6aa:	f009 fd9d 	bl	80191e8 <free>
 800f6ae:	bf00      	nop
 800f6b0:	3710      	adds	r7, #16
 800f6b2:	46bd      	mov	sp, r7
 800f6b4:	bd80      	pop	{r7, pc}
 800f6b6:	bf00      	nop
 800f6b8:	24000048 	.word	0x24000048
 800f6bc:	0801c0d8 	.word	0x0801c0d8
 800f6c0:	0801b7ac 	.word	0x0801b7ac
 800f6c4:	0801b7b8 	.word	0x0801b7b8

0800f6c8 <mg_listen>:
 800f6c8:	b580      	push	{r7, lr}
 800f6ca:	b086      	sub	sp, #24
 800f6cc:	af00      	add	r7, sp, #0
 800f6ce:	60f8      	str	r0, [r7, #12]
 800f6d0:	60b9      	str	r1, [r7, #8]
 800f6d2:	607a      	str	r2, [r7, #4]
 800f6d4:	603b      	str	r3, [r7, #0]
 800f6d6:	2300      	movs	r3, #0
 800f6d8:	617b      	str	r3, [r7, #20]
 800f6da:	68f8      	ldr	r0, [r7, #12]
 800f6dc:	f7ff ff5e 	bl	800f59c <mg_alloc_conn>
 800f6e0:	6178      	str	r0, [r7, #20]
 800f6e2:	697b      	ldr	r3, [r7, #20]
 800f6e4:	2b00      	cmp	r3, #0
 800f6e6:	d10e      	bne.n	800f706 <mg_listen+0x3e>
 800f6e8:	4b40      	ldr	r3, [pc, #256]	@ (800f7ec <mg_listen+0x124>)
 800f6ea:	681b      	ldr	r3, [r3, #0]
 800f6ec:	2b00      	cmp	r3, #0
 800f6ee:	dd77      	ble.n	800f7e0 <mg_listen+0x118>
 800f6f0:	4b3f      	ldr	r3, [pc, #252]	@ (800f7f0 <mg_listen+0x128>)
 800f6f2:	22bc      	movs	r2, #188	@ 0xbc
 800f6f4:	493f      	ldr	r1, [pc, #252]	@ (800f7f4 <mg_listen+0x12c>)
 800f6f6:	2001      	movs	r0, #1
 800f6f8:	f7fc fed8 	bl	800c4ac <mg_log_prefix>
 800f6fc:	68b9      	ldr	r1, [r7, #8]
 800f6fe:	483e      	ldr	r0, [pc, #248]	@ (800f7f8 <mg_listen+0x130>)
 800f700:	f7fc ff24 	bl	800c54c <mg_log>
 800f704:	e06c      	b.n	800f7e0 <mg_listen+0x118>
 800f706:	68b9      	ldr	r1, [r7, #8]
 800f708:	6978      	ldr	r0, [r7, #20]
 800f70a:	f7ff fd70 	bl	800f1ee <mg_open_listener>
 800f70e:	4603      	mov	r3, r0
 800f710:	f083 0301 	eor.w	r3, r3, #1
 800f714:	b2db      	uxtb	r3, r3
 800f716:	2b00      	cmp	r3, #0
 800f718:	d018      	beq.n	800f74c <mg_listen+0x84>
 800f71a:	4b34      	ldr	r3, [pc, #208]	@ (800f7ec <mg_listen+0x124>)
 800f71c:	681b      	ldr	r3, [r3, #0]
 800f71e:	2b00      	cmp	r3, #0
 800f720:	dd0e      	ble.n	800f740 <mg_listen+0x78>
 800f722:	4b33      	ldr	r3, [pc, #204]	@ (800f7f0 <mg_listen+0x128>)
 800f724:	22be      	movs	r2, #190	@ 0xbe
 800f726:	4933      	ldr	r1, [pc, #204]	@ (800f7f4 <mg_listen+0x12c>)
 800f728:	2001      	movs	r0, #1
 800f72a:	f7fc febf 	bl	800c4ac <mg_log_prefix>
 800f72e:	f00a f9e1 	bl	8019af4 <__errno>
 800f732:	4603      	mov	r3, r0
 800f734:	681b      	ldr	r3, [r3, #0]
 800f736:	461a      	mov	r2, r3
 800f738:	68b9      	ldr	r1, [r7, #8]
 800f73a:	4830      	ldr	r0, [pc, #192]	@ (800f7fc <mg_listen+0x134>)
 800f73c:	f7fc ff06 	bl	800c54c <mg_log>
 800f740:	6978      	ldr	r0, [r7, #20]
 800f742:	f009 fd51 	bl	80191e8 <free>
 800f746:	2300      	movs	r3, #0
 800f748:	617b      	str	r3, [r7, #20]
 800f74a:	e049      	b.n	800f7e0 <mg_listen+0x118>
 800f74c:	697a      	ldr	r2, [r7, #20]
 800f74e:	f892 30ac 	ldrb.w	r3, [r2, #172]	@ 0xac
 800f752:	f043 0301 	orr.w	r3, r3, #1
 800f756:	f882 30ac 	strb.w	r3, [r2, #172]	@ 0xac
 800f75a:	2204      	movs	r2, #4
 800f75c:	4928      	ldr	r1, [pc, #160]	@ (800f800 <mg_listen+0x138>)
 800f75e:	68b8      	ldr	r0, [r7, #8]
 800f760:	f00a f949 	bl	80199f6 <strncmp>
 800f764:	4603      	mov	r3, r0
 800f766:	2b00      	cmp	r3, #0
 800f768:	bf0c      	ite	eq
 800f76a:	2301      	moveq	r3, #1
 800f76c:	2300      	movne	r3, #0
 800f76e:	b2d9      	uxtb	r1, r3
 800f770:	697a      	ldr	r2, [r7, #20]
 800f772:	f892 30ad 	ldrb.w	r3, [r2, #173]	@ 0xad
 800f776:	f361 0300 	bfi	r3, r1, #0, #1
 800f77a:	f882 30ad 	strb.w	r3, [r2, #173]	@ 0xad
 800f77e:	68fb      	ldr	r3, [r7, #12]
 800f780:	681a      	ldr	r2, [r3, #0]
 800f782:	697b      	ldr	r3, [r7, #20]
 800f784:	601a      	str	r2, [r3, #0]
 800f786:	68fb      	ldr	r3, [r7, #12]
 800f788:	697a      	ldr	r2, [r7, #20]
 800f78a:	601a      	str	r2, [r3, #0]
 800f78c:	697b      	ldr	r3, [r7, #20]
 800f78e:	687a      	ldr	r2, [r7, #4]
 800f790:	679a      	str	r2, [r3, #120]	@ 0x78
 800f792:	697b      	ldr	r3, [r7, #20]
 800f794:	683a      	ldr	r2, [r7, #0]
 800f796:	67da      	str	r2, [r3, #124]	@ 0x7c
 800f798:	2200      	movs	r2, #0
 800f79a:	2101      	movs	r1, #1
 800f79c:	6978      	ldr	r0, [r7, #20]
 800f79e:	f7f9 fb2f 	bl	8008e00 <mg_call>
 800f7a2:	68b8      	ldr	r0, [r7, #8]
 800f7a4:	f000 fea0 	bl	80104e8 <mg_url_is_ssl>
 800f7a8:	4603      	mov	r3, r0
 800f7aa:	2b00      	cmp	r3, #0
 800f7ac:	d006      	beq.n	800f7bc <mg_listen+0xf4>
 800f7ae:	697a      	ldr	r2, [r7, #20]
 800f7b0:	f892 30ac 	ldrb.w	r3, [r2, #172]	@ 0xac
 800f7b4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800f7b8:	f882 30ac 	strb.w	r3, [r2, #172]	@ 0xac
 800f7bc:	4b0b      	ldr	r3, [pc, #44]	@ (800f7ec <mg_listen+0x124>)
 800f7be:	681b      	ldr	r3, [r3, #0]
 800f7c0:	2b02      	cmp	r3, #2
 800f7c2:	dd0d      	ble.n	800f7e0 <mg_listen+0x118>
 800f7c4:	4b0a      	ldr	r3, [pc, #40]	@ (800f7f0 <mg_listen+0x128>)
 800f7c6:	22ca      	movs	r2, #202	@ 0xca
 800f7c8:	490a      	ldr	r1, [pc, #40]	@ (800f7f4 <mg_listen+0x12c>)
 800f7ca:	2003      	movs	r0, #3
 800f7cc:	f7fc fe6e 	bl	800c4ac <mg_log_prefix>
 800f7d0:	697b      	ldr	r3, [r7, #20]
 800f7d2:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 800f7d4:	697b      	ldr	r3, [r7, #20]
 800f7d6:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800f7d8:	68bb      	ldr	r3, [r7, #8]
 800f7da:	480a      	ldr	r0, [pc, #40]	@ (800f804 <mg_listen+0x13c>)
 800f7dc:	f7fc feb6 	bl	800c54c <mg_log>
 800f7e0:	697b      	ldr	r3, [r7, #20]
 800f7e2:	4618      	mov	r0, r3
 800f7e4:	3718      	adds	r7, #24
 800f7e6:	46bd      	mov	sp, r7
 800f7e8:	bd80      	pop	{r7, pc}
 800f7ea:	bf00      	nop
 800f7ec:	24000048 	.word	0x24000048
 800f7f0:	0801c0e8 	.word	0x0801c0e8
 800f7f4:	0801b7ac 	.word	0x0801b7ac
 800f7f8:	0801b7dc 	.word	0x0801b7dc
 800f7fc:	0801b7e4 	.word	0x0801b7e4
 800f800:	0801b7d4 	.word	0x0801b7d4
 800f804:	0801a5f4 	.word	0x0801a5f4

0800f808 <mg_timer_add>:
 800f808:	b580      	push	{r7, lr}
 800f80a:	b08a      	sub	sp, #40	@ 0x28
 800f80c:	af04      	add	r7, sp, #16
 800f80e:	60f8      	str	r0, [r7, #12]
 800f810:	e9c7 2300 	strd	r2, r3, [r7]
 800f814:	2128      	movs	r1, #40	@ 0x28
 800f816:	2001      	movs	r0, #1
 800f818:	f009 fcc2 	bl	80191a0 <calloc>
 800f81c:	4603      	mov	r3, r0
 800f81e:	617b      	str	r3, [r7, #20]
 800f820:	697b      	ldr	r3, [r7, #20]
 800f822:	2b00      	cmp	r3, #0
 800f824:	d014      	beq.n	800f850 <mg_timer_add+0x48>
 800f826:	68fb      	ldr	r3, [r7, #12]
 800f828:	f103 0034 	add.w	r0, r3, #52	@ 0x34
 800f82c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f82e:	9302      	str	r3, [sp, #8]
 800f830:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f832:	9301      	str	r3, [sp, #4]
 800f834:	6a3b      	ldr	r3, [r7, #32]
 800f836:	9300      	str	r3, [sp, #0]
 800f838:	e9d7 2300 	ldrd	r2, r3, [r7]
 800f83c:	6979      	ldr	r1, [r7, #20]
 800f83e:	f000 fd0c 	bl	801025a <mg_timer_init>
 800f842:	68fb      	ldr	r3, [r7, #12]
 800f844:	6a1b      	ldr	r3, [r3, #32]
 800f846:	1c59      	adds	r1, r3, #1
 800f848:	68fa      	ldr	r2, [r7, #12]
 800f84a:	6211      	str	r1, [r2, #32]
 800f84c:	697a      	ldr	r2, [r7, #20]
 800f84e:	6013      	str	r3, [r2, #0]
 800f850:	697b      	ldr	r3, [r7, #20]
 800f852:	4618      	mov	r0, r3
 800f854:	3718      	adds	r7, #24
 800f856:	46bd      	mov	sp, r7
 800f858:	bd80      	pop	{r7, pc}
	...

0800f85c <mg_mgr_init>:
 800f85c:	b580      	push	{r7, lr}
 800f85e:	b082      	sub	sp, #8
 800f860:	af00      	add	r7, sp, #0
 800f862:	6078      	str	r0, [r7, #4]
 800f864:	2248      	movs	r2, #72	@ 0x48
 800f866:	2100      	movs	r1, #0
 800f868:	6878      	ldr	r0, [r7, #4]
 800f86a:	f00a f8af 	bl	80199cc <memset>
 800f86e:	687b      	ldr	r3, [r7, #4]
 800f870:	f04f 32ff 	mov.w	r2, #4294967295
 800f874:	639a      	str	r2, [r3, #56]	@ 0x38
 800f876:	687b      	ldr	r3, [r7, #4]
 800f878:	f04f 32ff 	mov.w	r2, #4294967295
 800f87c:	645a      	str	r2, [r3, #68]	@ 0x44
 800f87e:	687b      	ldr	r3, [r7, #4]
 800f880:	f640 32b8 	movw	r2, #3000	@ 0xbb8
 800f884:	615a      	str	r2, [r3, #20]
 800f886:	687b      	ldr	r3, [r7, #4]
 800f888:	4a05      	ldr	r2, [pc, #20]	@ (800f8a0 <mg_mgr_init+0x44>)
 800f88a:	605a      	str	r2, [r3, #4]
 800f88c:	687b      	ldr	r3, [r7, #4]
 800f88e:	4a05      	ldr	r2, [pc, #20]	@ (800f8a4 <mg_mgr_init+0x48>)
 800f890:	60da      	str	r2, [r3, #12]
 800f892:	6878      	ldr	r0, [r7, #4]
 800f894:	f000 fe1e 	bl	80104d4 <mg_tls_ctx_init>
 800f898:	bf00      	nop
 800f89a:	3708      	adds	r7, #8
 800f89c:	46bd      	mov	sp, r7
 800f89e:	bd80      	pop	{r7, pc}
 800f8a0:	0801b814 	.word	0x0801b814
 800f8a4:	0801b828 	.word	0x0801b828

0800f8a8 <mg_pfn_iobuf_private>:
 800f8a8:	b580      	push	{r7, lr}
 800f8aa:	b084      	sub	sp, #16
 800f8ac:	af00      	add	r7, sp, #0
 800f8ae:	4603      	mov	r3, r0
 800f8b0:	6039      	str	r1, [r7, #0]
 800f8b2:	71fb      	strb	r3, [r7, #7]
 800f8b4:	4613      	mov	r3, r2
 800f8b6:	71bb      	strb	r3, [r7, #6]
 800f8b8:	683b      	ldr	r3, [r7, #0]
 800f8ba:	60fb      	str	r3, [r7, #12]
 800f8bc:	79bb      	ldrb	r3, [r7, #6]
 800f8be:	2b00      	cmp	r3, #0
 800f8c0:	d00d      	beq.n	800f8de <mg_pfn_iobuf_private+0x36>
 800f8c2:	68fb      	ldr	r3, [r7, #12]
 800f8c4:	689b      	ldr	r3, [r3, #8]
 800f8c6:	1c9a      	adds	r2, r3, #2
 800f8c8:	68fb      	ldr	r3, [r7, #12]
 800f8ca:	685b      	ldr	r3, [r3, #4]
 800f8cc:	429a      	cmp	r2, r3
 800f8ce:	d906      	bls.n	800f8de <mg_pfn_iobuf_private+0x36>
 800f8d0:	68fb      	ldr	r3, [r7, #12]
 800f8d2:	689b      	ldr	r3, [r3, #8]
 800f8d4:	3302      	adds	r3, #2
 800f8d6:	4619      	mov	r1, r3
 800f8d8:	68f8      	ldr	r0, [r7, #12]
 800f8da:	f7fb ff59 	bl	800b790 <mg_iobuf_resize>
 800f8de:	68fb      	ldr	r3, [r7, #12]
 800f8e0:	689b      	ldr	r3, [r3, #8]
 800f8e2:	1c9a      	adds	r2, r3, #2
 800f8e4:	68fb      	ldr	r3, [r7, #12]
 800f8e6:	685b      	ldr	r3, [r3, #4]
 800f8e8:	429a      	cmp	r2, r3
 800f8ea:	d811      	bhi.n	800f910 <mg_pfn_iobuf_private+0x68>
 800f8ec:	68fb      	ldr	r3, [r7, #12]
 800f8ee:	681a      	ldr	r2, [r3, #0]
 800f8f0:	68fb      	ldr	r3, [r7, #12]
 800f8f2:	689b      	ldr	r3, [r3, #8]
 800f8f4:	1c58      	adds	r0, r3, #1
 800f8f6:	68f9      	ldr	r1, [r7, #12]
 800f8f8:	6088      	str	r0, [r1, #8]
 800f8fa:	4413      	add	r3, r2
 800f8fc:	79fa      	ldrb	r2, [r7, #7]
 800f8fe:	701a      	strb	r2, [r3, #0]
 800f900:	68fb      	ldr	r3, [r7, #12]
 800f902:	681a      	ldr	r2, [r3, #0]
 800f904:	68fb      	ldr	r3, [r7, #12]
 800f906:	689b      	ldr	r3, [r3, #8]
 800f908:	4413      	add	r3, r2
 800f90a:	2200      	movs	r2, #0
 800f90c:	701a      	strb	r2, [r3, #0]
 800f90e:	e00f      	b.n	800f930 <mg_pfn_iobuf_private+0x88>
 800f910:	68fb      	ldr	r3, [r7, #12]
 800f912:	689a      	ldr	r2, [r3, #8]
 800f914:	68fb      	ldr	r3, [r7, #12]
 800f916:	685b      	ldr	r3, [r3, #4]
 800f918:	429a      	cmp	r2, r3
 800f91a:	d209      	bcs.n	800f930 <mg_pfn_iobuf_private+0x88>
 800f91c:	68fb      	ldr	r3, [r7, #12]
 800f91e:	681a      	ldr	r2, [r3, #0]
 800f920:	68fb      	ldr	r3, [r7, #12]
 800f922:	689b      	ldr	r3, [r3, #8]
 800f924:	1c58      	adds	r0, r3, #1
 800f926:	68f9      	ldr	r1, [r7, #12]
 800f928:	6088      	str	r0, [r1, #8]
 800f92a:	4413      	add	r3, r2
 800f92c:	2200      	movs	r2, #0
 800f92e:	701a      	strb	r2, [r3, #0]
 800f930:	bf00      	nop
 800f932:	3710      	adds	r7, #16
 800f934:	46bd      	mov	sp, r7
 800f936:	bd80      	pop	{r7, pc}

0800f938 <mg_putchar_iobuf_static>:
 800f938:	b580      	push	{r7, lr}
 800f93a:	b082      	sub	sp, #8
 800f93c:	af00      	add	r7, sp, #0
 800f93e:	4603      	mov	r3, r0
 800f940:	6039      	str	r1, [r7, #0]
 800f942:	71fb      	strb	r3, [r7, #7]
 800f944:	79fb      	ldrb	r3, [r7, #7]
 800f946:	2200      	movs	r2, #0
 800f948:	6839      	ldr	r1, [r7, #0]
 800f94a:	4618      	mov	r0, r3
 800f94c:	f7ff ffac 	bl	800f8a8 <mg_pfn_iobuf_private>
 800f950:	bf00      	nop
 800f952:	3708      	adds	r7, #8
 800f954:	46bd      	mov	sp, r7
 800f956:	bd80      	pop	{r7, pc}

0800f958 <mg_pfn_iobuf>:
 800f958:	b580      	push	{r7, lr}
 800f95a:	b082      	sub	sp, #8
 800f95c:	af00      	add	r7, sp, #0
 800f95e:	4603      	mov	r3, r0
 800f960:	6039      	str	r1, [r7, #0]
 800f962:	71fb      	strb	r3, [r7, #7]
 800f964:	79fb      	ldrb	r3, [r7, #7]
 800f966:	2201      	movs	r2, #1
 800f968:	6839      	ldr	r1, [r7, #0]
 800f96a:	4618      	mov	r0, r3
 800f96c:	f7ff ff9c 	bl	800f8a8 <mg_pfn_iobuf_private>
 800f970:	bf00      	nop
 800f972:	3708      	adds	r7, #8
 800f974:	46bd      	mov	sp, r7
 800f976:	bd80      	pop	{r7, pc}

0800f978 <mg_vsnprintf>:
 800f978:	b580      	push	{r7, lr}
 800f97a:	b08a      	sub	sp, #40	@ 0x28
 800f97c:	af00      	add	r7, sp, #0
 800f97e:	60f8      	str	r0, [r7, #12]
 800f980:	60b9      	str	r1, [r7, #8]
 800f982:	607a      	str	r2, [r7, #4]
 800f984:	603b      	str	r3, [r7, #0]
 800f986:	68fb      	ldr	r3, [r7, #12]
 800f988:	617b      	str	r3, [r7, #20]
 800f98a:	68bb      	ldr	r3, [r7, #8]
 800f98c:	61bb      	str	r3, [r7, #24]
 800f98e:	2300      	movs	r3, #0
 800f990:	61fb      	str	r3, [r7, #28]
 800f992:	2300      	movs	r3, #0
 800f994:	623b      	str	r3, [r7, #32]
 800f996:	f107 0114 	add.w	r1, r7, #20
 800f99a:	683b      	ldr	r3, [r7, #0]
 800f99c:	687a      	ldr	r2, [r7, #4]
 800f99e:	4809      	ldr	r0, [pc, #36]	@ (800f9c4 <mg_vsnprintf+0x4c>)
 800f9a0:	f7f9 fefa 	bl	8009798 <mg_vxprintf>
 800f9a4:	6278      	str	r0, [r7, #36]	@ 0x24
 800f9a6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800f9a8:	68bb      	ldr	r3, [r7, #8]
 800f9aa:	429a      	cmp	r2, r3
 800f9ac:	d204      	bcs.n	800f9b8 <mg_vsnprintf+0x40>
 800f9ae:	68fa      	ldr	r2, [r7, #12]
 800f9b0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f9b2:	4413      	add	r3, r2
 800f9b4:	2200      	movs	r2, #0
 800f9b6:	701a      	strb	r2, [r3, #0]
 800f9b8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f9ba:	4618      	mov	r0, r3
 800f9bc:	3728      	adds	r7, #40	@ 0x28
 800f9be:	46bd      	mov	sp, r7
 800f9c0:	bd80      	pop	{r7, pc}
 800f9c2:	bf00      	nop
 800f9c4:	0800f939 	.word	0x0800f939

0800f9c8 <mg_snprintf>:
 800f9c8:	b40c      	push	{r2, r3}
 800f9ca:	b580      	push	{r7, lr}
 800f9cc:	b084      	sub	sp, #16
 800f9ce:	af00      	add	r7, sp, #0
 800f9d0:	6078      	str	r0, [r7, #4]
 800f9d2:	6039      	str	r1, [r7, #0]
 800f9d4:	f107 031c 	add.w	r3, r7, #28
 800f9d8:	60bb      	str	r3, [r7, #8]
 800f9da:	f107 0308 	add.w	r3, r7, #8
 800f9de:	69ba      	ldr	r2, [r7, #24]
 800f9e0:	6839      	ldr	r1, [r7, #0]
 800f9e2:	6878      	ldr	r0, [r7, #4]
 800f9e4:	f7ff ffc8 	bl	800f978 <mg_vsnprintf>
 800f9e8:	60f8      	str	r0, [r7, #12]
 800f9ea:	68fb      	ldr	r3, [r7, #12]
 800f9ec:	4618      	mov	r0, r3
 800f9ee:	3710      	adds	r7, #16
 800f9f0:	46bd      	mov	sp, r7
 800f9f2:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800f9f6:	b002      	add	sp, #8
 800f9f8:	4770      	bx	lr

0800f9fa <mg_pfn_stdout>:
 800f9fa:	b580      	push	{r7, lr}
 800f9fc:	b082      	sub	sp, #8
 800f9fe:	af00      	add	r7, sp, #0
 800fa00:	4603      	mov	r3, r0
 800fa02:	6039      	str	r1, [r7, #0]
 800fa04:	71fb      	strb	r3, [r7, #7]
 800fa06:	79fb      	ldrb	r3, [r7, #7]
 800fa08:	4618      	mov	r0, r3
 800fa0a:	f009 fed5 	bl	80197b8 <putchar>
 800fa0e:	bf00      	nop
 800fa10:	3708      	adds	r7, #8
 800fa12:	46bd      	mov	sp, r7
 800fa14:	bd80      	pop	{r7, pc}
	...

0800fa18 <print_ip4>:
 800fa18:	b580      	push	{r7, lr}
 800fa1a:	b088      	sub	sp, #32
 800fa1c:	af04      	add	r7, sp, #16
 800fa1e:	60f8      	str	r0, [r7, #12]
 800fa20:	60b9      	str	r1, [r7, #8]
 800fa22:	607a      	str	r2, [r7, #4]
 800fa24:	687b      	ldr	r3, [r7, #4]
 800fa26:	781b      	ldrb	r3, [r3, #0]
 800fa28:	4618      	mov	r0, r3
 800fa2a:	687b      	ldr	r3, [r7, #4]
 800fa2c:	3301      	adds	r3, #1
 800fa2e:	781b      	ldrb	r3, [r3, #0]
 800fa30:	461a      	mov	r2, r3
 800fa32:	687b      	ldr	r3, [r7, #4]
 800fa34:	3302      	adds	r3, #2
 800fa36:	781b      	ldrb	r3, [r3, #0]
 800fa38:	4619      	mov	r1, r3
 800fa3a:	687b      	ldr	r3, [r7, #4]
 800fa3c:	3303      	adds	r3, #3
 800fa3e:	781b      	ldrb	r3, [r3, #0]
 800fa40:	9302      	str	r3, [sp, #8]
 800fa42:	9101      	str	r1, [sp, #4]
 800fa44:	9200      	str	r2, [sp, #0]
 800fa46:	4603      	mov	r3, r0
 800fa48:	4a04      	ldr	r2, [pc, #16]	@ (800fa5c <print_ip4+0x44>)
 800fa4a:	68b9      	ldr	r1, [r7, #8]
 800fa4c:	68f8      	ldr	r0, [r7, #12]
 800fa4e:	f7f9 fe88 	bl	8009762 <mg_xprintf>
 800fa52:	4603      	mov	r3, r0
 800fa54:	4618      	mov	r0, r3
 800fa56:	3710      	adds	r7, #16
 800fa58:	46bd      	mov	sp, r7
 800fa5a:	bd80      	pop	{r7, pc}
 800fa5c:	0801b848 	.word	0x0801b848

0800fa60 <print_ip6>:
 800fa60:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800fa64:	b08e      	sub	sp, #56	@ 0x38
 800fa66:	af08      	add	r7, sp, #32
 800fa68:	6178      	str	r0, [r7, #20]
 800fa6a:	6139      	str	r1, [r7, #16]
 800fa6c:	60fa      	str	r2, [r7, #12]
 800fa6e:	68fb      	ldr	r3, [r7, #12]
 800fa70:	881b      	ldrh	r3, [r3, #0]
 800fa72:	4618      	mov	r0, r3
 800fa74:	f000 fe98 	bl	80107a8 <mg_ntohs>
 800fa78:	4603      	mov	r3, r0
 800fa7a:	4698      	mov	r8, r3
 800fa7c:	68fb      	ldr	r3, [r7, #12]
 800fa7e:	3302      	adds	r3, #2
 800fa80:	881b      	ldrh	r3, [r3, #0]
 800fa82:	4618      	mov	r0, r3
 800fa84:	f000 fe90 	bl	80107a8 <mg_ntohs>
 800fa88:	4603      	mov	r3, r0
 800fa8a:	461c      	mov	r4, r3
 800fa8c:	68fb      	ldr	r3, [r7, #12]
 800fa8e:	3304      	adds	r3, #4
 800fa90:	881b      	ldrh	r3, [r3, #0]
 800fa92:	4618      	mov	r0, r3
 800fa94:	f000 fe88 	bl	80107a8 <mg_ntohs>
 800fa98:	4603      	mov	r3, r0
 800fa9a:	461d      	mov	r5, r3
 800fa9c:	68fb      	ldr	r3, [r7, #12]
 800fa9e:	3306      	adds	r3, #6
 800faa0:	881b      	ldrh	r3, [r3, #0]
 800faa2:	4618      	mov	r0, r3
 800faa4:	f000 fe80 	bl	80107a8 <mg_ntohs>
 800faa8:	4603      	mov	r3, r0
 800faaa:	461e      	mov	r6, r3
 800faac:	68fb      	ldr	r3, [r7, #12]
 800faae:	3308      	adds	r3, #8
 800fab0:	881b      	ldrh	r3, [r3, #0]
 800fab2:	4618      	mov	r0, r3
 800fab4:	f000 fe78 	bl	80107a8 <mg_ntohs>
 800fab8:	4603      	mov	r3, r0
 800faba:	60bb      	str	r3, [r7, #8]
 800fabc:	68fb      	ldr	r3, [r7, #12]
 800fabe:	330a      	adds	r3, #10
 800fac0:	881b      	ldrh	r3, [r3, #0]
 800fac2:	4618      	mov	r0, r3
 800fac4:	f000 fe70 	bl	80107a8 <mg_ntohs>
 800fac8:	4603      	mov	r3, r0
 800faca:	607b      	str	r3, [r7, #4]
 800facc:	68fb      	ldr	r3, [r7, #12]
 800face:	330c      	adds	r3, #12
 800fad0:	881b      	ldrh	r3, [r3, #0]
 800fad2:	4618      	mov	r0, r3
 800fad4:	f000 fe68 	bl	80107a8 <mg_ntohs>
 800fad8:	4603      	mov	r3, r0
 800fada:	603b      	str	r3, [r7, #0]
 800fadc:	68fb      	ldr	r3, [r7, #12]
 800fade:	330e      	adds	r3, #14
 800fae0:	881b      	ldrh	r3, [r3, #0]
 800fae2:	4618      	mov	r0, r3
 800fae4:	f000 fe60 	bl	80107a8 <mg_ntohs>
 800fae8:	4603      	mov	r3, r0
 800faea:	9306      	str	r3, [sp, #24]
 800faec:	683a      	ldr	r2, [r7, #0]
 800faee:	9205      	str	r2, [sp, #20]
 800faf0:	687a      	ldr	r2, [r7, #4]
 800faf2:	9204      	str	r2, [sp, #16]
 800faf4:	68bb      	ldr	r3, [r7, #8]
 800faf6:	9303      	str	r3, [sp, #12]
 800faf8:	9602      	str	r6, [sp, #8]
 800fafa:	9501      	str	r5, [sp, #4]
 800fafc:	9400      	str	r4, [sp, #0]
 800fafe:	4643      	mov	r3, r8
 800fb00:	4a05      	ldr	r2, [pc, #20]	@ (800fb18 <print_ip6+0xb8>)
 800fb02:	6939      	ldr	r1, [r7, #16]
 800fb04:	6978      	ldr	r0, [r7, #20]
 800fb06:	f7f9 fe2c 	bl	8009762 <mg_xprintf>
 800fb0a:	4603      	mov	r3, r0
 800fb0c:	4618      	mov	r0, r3
 800fb0e:	3718      	adds	r7, #24
 800fb10:	46bd      	mov	sp, r7
 800fb12:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800fb16:	bf00      	nop
 800fb18:	0801b854 	.word	0x0801b854

0800fb1c <mg_print_ip4>:
 800fb1c:	b580      	push	{r7, lr}
 800fb1e:	b086      	sub	sp, #24
 800fb20:	af00      	add	r7, sp, #0
 800fb22:	60f8      	str	r0, [r7, #12]
 800fb24:	60b9      	str	r1, [r7, #8]
 800fb26:	607a      	str	r2, [r7, #4]
 800fb28:	687b      	ldr	r3, [r7, #4]
 800fb2a:	681b      	ldr	r3, [r3, #0]
 800fb2c:	1d19      	adds	r1, r3, #4
 800fb2e:	687a      	ldr	r2, [r7, #4]
 800fb30:	6011      	str	r1, [r2, #0]
 800fb32:	681b      	ldr	r3, [r3, #0]
 800fb34:	617b      	str	r3, [r7, #20]
 800fb36:	697a      	ldr	r2, [r7, #20]
 800fb38:	68b9      	ldr	r1, [r7, #8]
 800fb3a:	68f8      	ldr	r0, [r7, #12]
 800fb3c:	f7ff ff6c 	bl	800fa18 <print_ip4>
 800fb40:	4603      	mov	r3, r0
 800fb42:	4618      	mov	r0, r3
 800fb44:	3718      	adds	r7, #24
 800fb46:	46bd      	mov	sp, r7
 800fb48:	bd80      	pop	{r7, pc}

0800fb4a <mg_print_ip>:
 800fb4a:	b580      	push	{r7, lr}
 800fb4c:	b086      	sub	sp, #24
 800fb4e:	af00      	add	r7, sp, #0
 800fb50:	60f8      	str	r0, [r7, #12]
 800fb52:	60b9      	str	r1, [r7, #8]
 800fb54:	607a      	str	r2, [r7, #4]
 800fb56:	687b      	ldr	r3, [r7, #4]
 800fb58:	681b      	ldr	r3, [r3, #0]
 800fb5a:	1d19      	adds	r1, r3, #4
 800fb5c:	687a      	ldr	r2, [r7, #4]
 800fb5e:	6011      	str	r1, [r2, #0]
 800fb60:	681b      	ldr	r3, [r3, #0]
 800fb62:	617b      	str	r3, [r7, #20]
 800fb64:	697b      	ldr	r3, [r7, #20]
 800fb66:	7cdb      	ldrb	r3, [r3, #19]
 800fb68:	2b00      	cmp	r3, #0
 800fb6a:	d007      	beq.n	800fb7c <mg_print_ip+0x32>
 800fb6c:	697b      	ldr	r3, [r7, #20]
 800fb6e:	461a      	mov	r2, r3
 800fb70:	68b9      	ldr	r1, [r7, #8]
 800fb72:	68f8      	ldr	r0, [r7, #12]
 800fb74:	f7ff ff74 	bl	800fa60 <print_ip6>
 800fb78:	4603      	mov	r3, r0
 800fb7a:	e006      	b.n	800fb8a <mg_print_ip+0x40>
 800fb7c:	697b      	ldr	r3, [r7, #20]
 800fb7e:	461a      	mov	r2, r3
 800fb80:	68b9      	ldr	r1, [r7, #8]
 800fb82:	68f8      	ldr	r0, [r7, #12]
 800fb84:	f7ff ff48 	bl	800fa18 <print_ip4>
 800fb88:	4603      	mov	r3, r0
 800fb8a:	4618      	mov	r0, r3
 800fb8c:	3718      	adds	r7, #24
 800fb8e:	46bd      	mov	sp, r7
 800fb90:	bd80      	pop	{r7, pc}
	...

0800fb94 <mg_print_ip_port>:
 800fb94:	b580      	push	{r7, lr}
 800fb96:	b088      	sub	sp, #32
 800fb98:	af02      	add	r7, sp, #8
 800fb9a:	60f8      	str	r0, [r7, #12]
 800fb9c:	60b9      	str	r1, [r7, #8]
 800fb9e:	607a      	str	r2, [r7, #4]
 800fba0:	687b      	ldr	r3, [r7, #4]
 800fba2:	681b      	ldr	r3, [r3, #0]
 800fba4:	1d19      	adds	r1, r3, #4
 800fba6:	687a      	ldr	r2, [r7, #4]
 800fba8:	6011      	str	r1, [r2, #0]
 800fbaa:	681b      	ldr	r3, [r3, #0]
 800fbac:	617b      	str	r3, [r7, #20]
 800fbae:	697b      	ldr	r3, [r7, #20]
 800fbb0:	8a1b      	ldrh	r3, [r3, #16]
 800fbb2:	4618      	mov	r0, r3
 800fbb4:	f000 fdf8 	bl	80107a8 <mg_ntohs>
 800fbb8:	4603      	mov	r3, r0
 800fbba:	9301      	str	r3, [sp, #4]
 800fbbc:	697b      	ldr	r3, [r7, #20]
 800fbbe:	9300      	str	r3, [sp, #0]
 800fbc0:	4b05      	ldr	r3, [pc, #20]	@ (800fbd8 <mg_print_ip_port+0x44>)
 800fbc2:	4a06      	ldr	r2, [pc, #24]	@ (800fbdc <mg_print_ip_port+0x48>)
 800fbc4:	68b9      	ldr	r1, [r7, #8]
 800fbc6:	68f8      	ldr	r0, [r7, #12]
 800fbc8:	f7f9 fdcb 	bl	8009762 <mg_xprintf>
 800fbcc:	4603      	mov	r3, r0
 800fbce:	4618      	mov	r0, r3
 800fbd0:	3718      	adds	r7, #24
 800fbd2:	46bd      	mov	sp, r7
 800fbd4:	bd80      	pop	{r7, pc}
 800fbd6:	bf00      	nop
 800fbd8:	0800fb4b 	.word	0x0800fb4b
 800fbdc:	0801b870 	.word	0x0801b870

0800fbe0 <mg_print_mac>:
 800fbe0:	b5b0      	push	{r4, r5, r7, lr}
 800fbe2:	b08c      	sub	sp, #48	@ 0x30
 800fbe4:	af06      	add	r7, sp, #24
 800fbe6:	60f8      	str	r0, [r7, #12]
 800fbe8:	60b9      	str	r1, [r7, #8]
 800fbea:	607a      	str	r2, [r7, #4]
 800fbec:	687b      	ldr	r3, [r7, #4]
 800fbee:	681b      	ldr	r3, [r3, #0]
 800fbf0:	1d19      	adds	r1, r3, #4
 800fbf2:	687a      	ldr	r2, [r7, #4]
 800fbf4:	6011      	str	r1, [r2, #0]
 800fbf6:	681b      	ldr	r3, [r3, #0]
 800fbf8:	617b      	str	r3, [r7, #20]
 800fbfa:	697b      	ldr	r3, [r7, #20]
 800fbfc:	781b      	ldrb	r3, [r3, #0]
 800fbfe:	461d      	mov	r5, r3
 800fc00:	697b      	ldr	r3, [r7, #20]
 800fc02:	3301      	adds	r3, #1
 800fc04:	781b      	ldrb	r3, [r3, #0]
 800fc06:	461a      	mov	r2, r3
 800fc08:	697b      	ldr	r3, [r7, #20]
 800fc0a:	3302      	adds	r3, #2
 800fc0c:	781b      	ldrb	r3, [r3, #0]
 800fc0e:	4619      	mov	r1, r3
 800fc10:	697b      	ldr	r3, [r7, #20]
 800fc12:	3303      	adds	r3, #3
 800fc14:	781b      	ldrb	r3, [r3, #0]
 800fc16:	4618      	mov	r0, r3
 800fc18:	697b      	ldr	r3, [r7, #20]
 800fc1a:	3304      	adds	r3, #4
 800fc1c:	781b      	ldrb	r3, [r3, #0]
 800fc1e:	461c      	mov	r4, r3
 800fc20:	697b      	ldr	r3, [r7, #20]
 800fc22:	3305      	adds	r3, #5
 800fc24:	781b      	ldrb	r3, [r3, #0]
 800fc26:	9304      	str	r3, [sp, #16]
 800fc28:	9403      	str	r4, [sp, #12]
 800fc2a:	9002      	str	r0, [sp, #8]
 800fc2c:	9101      	str	r1, [sp, #4]
 800fc2e:	9200      	str	r2, [sp, #0]
 800fc30:	462b      	mov	r3, r5
 800fc32:	4a05      	ldr	r2, [pc, #20]	@ (800fc48 <mg_print_mac+0x68>)
 800fc34:	68b9      	ldr	r1, [r7, #8]
 800fc36:	68f8      	ldr	r0, [r7, #12]
 800fc38:	f7f9 fd93 	bl	8009762 <mg_xprintf>
 800fc3c:	4603      	mov	r3, r0
 800fc3e:	4618      	mov	r0, r3
 800fc40:	3718      	adds	r7, #24
 800fc42:	46bd      	mov	sp, r7
 800fc44:	bdb0      	pop	{r4, r5, r7, pc}
 800fc46:	bf00      	nop
 800fc48:	0801b878 	.word	0x0801b878

0800fc4c <mg_queue_read_len>:
 800fc4c:	b580      	push	{r7, lr}
 800fc4e:	b084      	sub	sp, #16
 800fc50:	af00      	add	r7, sp, #0
 800fc52:	6078      	str	r0, [r7, #4]
 800fc54:	2300      	movs	r3, #0
 800fc56:	60fb      	str	r3, [r7, #12]
 800fc58:	f3bf 8f5b 	dmb	ish
 800fc5c:	687b      	ldr	r3, [r7, #4]
 800fc5e:	681a      	ldr	r2, [r3, #0]
 800fc60:	687b      	ldr	r3, [r7, #4]
 800fc62:	689b      	ldr	r3, [r3, #8]
 800fc64:	4413      	add	r3, r2
 800fc66:	681b      	ldr	r3, [r3, #0]
 800fc68:	60fb      	str	r3, [r7, #12]
 800fc6a:	687b      	ldr	r3, [r7, #4]
 800fc6c:	689a      	ldr	r2, [r3, #8]
 800fc6e:	68fb      	ldr	r3, [r7, #12]
 800fc70:	4413      	add	r3, r2
 800fc72:	1d1a      	adds	r2, r3, #4
 800fc74:	687b      	ldr	r3, [r7, #4]
 800fc76:	685b      	ldr	r3, [r3, #4]
 800fc78:	429a      	cmp	r2, r3
 800fc7a:	d905      	bls.n	800fc88 <mg_queue_read_len+0x3c>
 800fc7c:	4b05      	ldr	r3, [pc, #20]	@ (800fc94 <mg_queue_read_len+0x48>)
 800fc7e:	4a06      	ldr	r2, [pc, #24]	@ (800fc98 <mg_queue_read_len+0x4c>)
 800fc80:	2126      	movs	r1, #38	@ 0x26
 800fc82:	4806      	ldr	r0, [pc, #24]	@ (800fc9c <mg_queue_read_len+0x50>)
 800fc84:	f009 fa6a 	bl	801915c <__assert_func>
 800fc88:	68fb      	ldr	r3, [r7, #12]
 800fc8a:	4618      	mov	r0, r3
 800fc8c:	3710      	adds	r7, #16
 800fc8e:	46bd      	mov	sp, r7
 800fc90:	bd80      	pop	{r7, pc}
 800fc92:	bf00      	nop
 800fc94:	0801b8dc 	.word	0x0801b8dc
 800fc98:	0801c0f4 	.word	0x0801c0f4
 800fc9c:	0801b900 	.word	0x0801b900

0800fca0 <mg_queue_write_len>:
 800fca0:	b480      	push	{r7}
 800fca2:	b085      	sub	sp, #20
 800fca4:	af00      	add	r7, sp, #0
 800fca6:	6078      	str	r0, [r7, #4]
 800fca8:	6039      	str	r1, [r7, #0]
 800fcaa:	683b      	ldr	r3, [r7, #0]
 800fcac:	60fb      	str	r3, [r7, #12]
 800fcae:	687b      	ldr	r3, [r7, #4]
 800fcb0:	681a      	ldr	r2, [r3, #0]
 800fcb2:	687b      	ldr	r3, [r7, #4]
 800fcb4:	68db      	ldr	r3, [r3, #12]
 800fcb6:	4413      	add	r3, r2
 800fcb8:	68fa      	ldr	r2, [r7, #12]
 800fcba:	601a      	str	r2, [r3, #0]
 800fcbc:	f3bf 8f5b 	dmb	ish
 800fcc0:	bf00      	nop
 800fcc2:	3714      	adds	r7, #20
 800fcc4:	46bd      	mov	sp, r7
 800fcc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fcca:	4770      	bx	lr

0800fccc <mg_queue_book>:
 800fccc:	b580      	push	{r7, lr}
 800fcce:	b086      	sub	sp, #24
 800fcd0:	af00      	add	r7, sp, #0
 800fcd2:	60f8      	str	r0, [r7, #12]
 800fcd4:	60b9      	str	r1, [r7, #8]
 800fcd6:	607a      	str	r2, [r7, #4]
 800fcd8:	2300      	movs	r3, #0
 800fcda:	617b      	str	r3, [r7, #20]
 800fcdc:	2308      	movs	r3, #8
 800fcde:	613b      	str	r3, [r7, #16]
 800fce0:	68fb      	ldr	r3, [r7, #12]
 800fce2:	68da      	ldr	r2, [r3, #12]
 800fce4:	68fb      	ldr	r3, [r7, #12]
 800fce6:	689b      	ldr	r3, [r3, #8]
 800fce8:	429a      	cmp	r2, r3
 800fcea:	d312      	bcc.n	800fd12 <mg_queue_book+0x46>
 800fcec:	68fb      	ldr	r3, [r7, #12]
 800fcee:	68da      	ldr	r2, [r3, #12]
 800fcf0:	687b      	ldr	r3, [r7, #4]
 800fcf2:	441a      	add	r2, r3
 800fcf4:	693b      	ldr	r3, [r7, #16]
 800fcf6:	441a      	add	r2, r3
 800fcf8:	68fb      	ldr	r3, [r7, #12]
 800fcfa:	685b      	ldr	r3, [r3, #4]
 800fcfc:	429a      	cmp	r2, r3
 800fcfe:	d808      	bhi.n	800fd12 <mg_queue_book+0x46>
 800fd00:	68fb      	ldr	r3, [r7, #12]
 800fd02:	685a      	ldr	r2, [r3, #4]
 800fd04:	68fb      	ldr	r3, [r7, #12]
 800fd06:	68db      	ldr	r3, [r3, #12]
 800fd08:	1ad2      	subs	r2, r2, r3
 800fd0a:	693b      	ldr	r3, [r7, #16]
 800fd0c:	1ad3      	subs	r3, r2, r3
 800fd0e:	617b      	str	r3, [r7, #20]
 800fd10:	e011      	b.n	800fd36 <mg_queue_book+0x6a>
 800fd12:	68fb      	ldr	r3, [r7, #12]
 800fd14:	68da      	ldr	r2, [r3, #12]
 800fd16:	68fb      	ldr	r3, [r7, #12]
 800fd18:	689b      	ldr	r3, [r3, #8]
 800fd1a:	429a      	cmp	r2, r3
 800fd1c:	d30b      	bcc.n	800fd36 <mg_queue_book+0x6a>
 800fd1e:	68fb      	ldr	r3, [r7, #12]
 800fd20:	689b      	ldr	r3, [r3, #8]
 800fd22:	693a      	ldr	r2, [r7, #16]
 800fd24:	429a      	cmp	r2, r3
 800fd26:	d206      	bcs.n	800fd36 <mg_queue_book+0x6a>
 800fd28:	2100      	movs	r1, #0
 800fd2a:	68f8      	ldr	r0, [r7, #12]
 800fd2c:	f7ff ffb8 	bl	800fca0 <mg_queue_write_len>
 800fd30:	68fb      	ldr	r3, [r7, #12]
 800fd32:	2200      	movs	r2, #0
 800fd34:	60da      	str	r2, [r3, #12]
 800fd36:	68fb      	ldr	r3, [r7, #12]
 800fd38:	68da      	ldr	r2, [r3, #12]
 800fd3a:	693b      	ldr	r3, [r7, #16]
 800fd3c:	441a      	add	r2, r3
 800fd3e:	687b      	ldr	r3, [r7, #4]
 800fd40:	441a      	add	r2, r3
 800fd42:	68fb      	ldr	r3, [r7, #12]
 800fd44:	689b      	ldr	r3, [r3, #8]
 800fd46:	429a      	cmp	r2, r3
 800fd48:	d207      	bcs.n	800fd5a <mg_queue_book+0x8e>
 800fd4a:	68fb      	ldr	r3, [r7, #12]
 800fd4c:	689a      	ldr	r2, [r3, #8]
 800fd4e:	68fb      	ldr	r3, [r7, #12]
 800fd50:	68db      	ldr	r3, [r3, #12]
 800fd52:	1ad2      	subs	r2, r2, r3
 800fd54:	693b      	ldr	r3, [r7, #16]
 800fd56:	1ad3      	subs	r3, r2, r3
 800fd58:	617b      	str	r3, [r7, #20]
 800fd5a:	68bb      	ldr	r3, [r7, #8]
 800fd5c:	2b00      	cmp	r3, #0
 800fd5e:	d007      	beq.n	800fd70 <mg_queue_book+0xa4>
 800fd60:	68fb      	ldr	r3, [r7, #12]
 800fd62:	681a      	ldr	r2, [r3, #0]
 800fd64:	68fb      	ldr	r3, [r7, #12]
 800fd66:	68db      	ldr	r3, [r3, #12]
 800fd68:	3304      	adds	r3, #4
 800fd6a:	441a      	add	r2, r3
 800fd6c:	68bb      	ldr	r3, [r7, #8]
 800fd6e:	601a      	str	r2, [r3, #0]
 800fd70:	697b      	ldr	r3, [r7, #20]
 800fd72:	4618      	mov	r0, r3
 800fd74:	3718      	adds	r7, #24
 800fd76:	46bd      	mov	sp, r7
 800fd78:	bd80      	pop	{r7, pc}
	...

0800fd7c <mg_queue_next>:
 800fd7c:	b580      	push	{r7, lr}
 800fd7e:	b084      	sub	sp, #16
 800fd80:	af00      	add	r7, sp, #0
 800fd82:	6078      	str	r0, [r7, #4]
 800fd84:	6039      	str	r1, [r7, #0]
 800fd86:	2300      	movs	r3, #0
 800fd88:	60fb      	str	r3, [r7, #12]
 800fd8a:	687b      	ldr	r3, [r7, #4]
 800fd8c:	689a      	ldr	r2, [r3, #8]
 800fd8e:	687b      	ldr	r3, [r7, #4]
 800fd90:	68db      	ldr	r3, [r3, #12]
 800fd92:	429a      	cmp	r2, r3
 800fd94:	d013      	beq.n	800fdbe <mg_queue_next+0x42>
 800fd96:	6878      	ldr	r0, [r7, #4]
 800fd98:	f7ff ff58 	bl	800fc4c <mg_queue_read_len>
 800fd9c:	60f8      	str	r0, [r7, #12]
 800fd9e:	68fb      	ldr	r3, [r7, #12]
 800fda0:	2b00      	cmp	r3, #0
 800fda2:	d10c      	bne.n	800fdbe <mg_queue_next+0x42>
 800fda4:	687b      	ldr	r3, [r7, #4]
 800fda6:	2200      	movs	r2, #0
 800fda8:	609a      	str	r2, [r3, #8]
 800fdaa:	687b      	ldr	r3, [r7, #4]
 800fdac:	68da      	ldr	r2, [r3, #12]
 800fdae:	687b      	ldr	r3, [r7, #4]
 800fdb0:	689b      	ldr	r3, [r3, #8]
 800fdb2:	429a      	cmp	r2, r3
 800fdb4:	d903      	bls.n	800fdbe <mg_queue_next+0x42>
 800fdb6:	6878      	ldr	r0, [r7, #4]
 800fdb8:	f7ff ff48 	bl	800fc4c <mg_queue_read_len>
 800fdbc:	60f8      	str	r0, [r7, #12]
 800fdbe:	683b      	ldr	r3, [r7, #0]
 800fdc0:	2b00      	cmp	r3, #0
 800fdc2:	d007      	beq.n	800fdd4 <mg_queue_next+0x58>
 800fdc4:	687b      	ldr	r3, [r7, #4]
 800fdc6:	681a      	ldr	r2, [r3, #0]
 800fdc8:	687b      	ldr	r3, [r7, #4]
 800fdca:	689b      	ldr	r3, [r3, #8]
 800fdcc:	3304      	adds	r3, #4
 800fdce:	441a      	add	r2, r3
 800fdd0:	683b      	ldr	r3, [r7, #0]
 800fdd2:	601a      	str	r2, [r3, #0]
 800fdd4:	687b      	ldr	r3, [r7, #4]
 800fdd6:	689a      	ldr	r2, [r3, #8]
 800fdd8:	68fb      	ldr	r3, [r7, #12]
 800fdda:	441a      	add	r2, r3
 800fddc:	687b      	ldr	r3, [r7, #4]
 800fdde:	685b      	ldr	r3, [r3, #4]
 800fde0:	429a      	cmp	r2, r3
 800fde2:	d905      	bls.n	800fdf0 <mg_queue_next+0x74>
 800fde4:	4b05      	ldr	r3, [pc, #20]	@ (800fdfc <mg_queue_next+0x80>)
 800fde6:	4a06      	ldr	r2, [pc, #24]	@ (800fe00 <mg_queue_next+0x84>)
 800fde8:	2147      	movs	r1, #71	@ 0x47
 800fdea:	4806      	ldr	r0, [pc, #24]	@ (800fe04 <mg_queue_next+0x88>)
 800fdec:	f009 f9b6 	bl	801915c <__assert_func>
 800fdf0:	68fb      	ldr	r3, [r7, #12]
 800fdf2:	4618      	mov	r0, r3
 800fdf4:	3710      	adds	r7, #16
 800fdf6:	46bd      	mov	sp, r7
 800fdf8:	bd80      	pop	{r7, pc}
 800fdfa:	bf00      	nop
 800fdfc:	0801b90c 	.word	0x0801b90c
 800fe00:	0801c108 	.word	0x0801c108
 800fe04:	0801b900 	.word	0x0801b900

0800fe08 <mg_queue_add>:
 800fe08:	b580      	push	{r7, lr}
 800fe0a:	b082      	sub	sp, #8
 800fe0c:	af00      	add	r7, sp, #0
 800fe0e:	6078      	str	r0, [r7, #4]
 800fe10:	6039      	str	r1, [r7, #0]
 800fe12:	683b      	ldr	r3, [r7, #0]
 800fe14:	2b00      	cmp	r3, #0
 800fe16:	d105      	bne.n	800fe24 <mg_queue_add+0x1c>
 800fe18:	4b12      	ldr	r3, [pc, #72]	@ (800fe64 <mg_queue_add+0x5c>)
 800fe1a:	4a13      	ldr	r2, [pc, #76]	@ (800fe68 <mg_queue_add+0x60>)
 800fe1c:	214c      	movs	r1, #76	@ 0x4c
 800fe1e:	4813      	ldr	r0, [pc, #76]	@ (800fe6c <mg_queue_add+0x64>)
 800fe20:	f009 f99c 	bl	801915c <__assert_func>
 800fe24:	6839      	ldr	r1, [r7, #0]
 800fe26:	6878      	ldr	r0, [r7, #4]
 800fe28:	f7ff ff3a 	bl	800fca0 <mg_queue_write_len>
 800fe2c:	687b      	ldr	r3, [r7, #4]
 800fe2e:	68da      	ldr	r2, [r3, #12]
 800fe30:	683b      	ldr	r3, [r7, #0]
 800fe32:	4413      	add	r3, r2
 800fe34:	f103 0208 	add.w	r2, r3, #8
 800fe38:	687b      	ldr	r3, [r7, #4]
 800fe3a:	685b      	ldr	r3, [r3, #4]
 800fe3c:	429a      	cmp	r2, r3
 800fe3e:	d905      	bls.n	800fe4c <mg_queue_add+0x44>
 800fe40:	4b0b      	ldr	r3, [pc, #44]	@ (800fe70 <mg_queue_add+0x68>)
 800fe42:	4a09      	ldr	r2, [pc, #36]	@ (800fe68 <mg_queue_add+0x60>)
 800fe44:	214e      	movs	r1, #78	@ 0x4e
 800fe46:	4809      	ldr	r0, [pc, #36]	@ (800fe6c <mg_queue_add+0x64>)
 800fe48:	f009 f988 	bl	801915c <__assert_func>
 800fe4c:	687b      	ldr	r3, [r7, #4]
 800fe4e:	68da      	ldr	r2, [r3, #12]
 800fe50:	683b      	ldr	r3, [r7, #0]
 800fe52:	4413      	add	r3, r2
 800fe54:	1d1a      	adds	r2, r3, #4
 800fe56:	687b      	ldr	r3, [r7, #4]
 800fe58:	60da      	str	r2, [r3, #12]
 800fe5a:	bf00      	nop
 800fe5c:	3708      	adds	r7, #8
 800fe5e:	46bd      	mov	sp, r7
 800fe60:	bd80      	pop	{r7, pc}
 800fe62:	bf00      	nop
 800fe64:	0801b928 	.word	0x0801b928
 800fe68:	0801c118 	.word	0x0801c118
 800fe6c:	0801b900 	.word	0x0801b900
 800fe70:	0801b930 	.word	0x0801b930

0800fe74 <mg_queue_del>:
 800fe74:	b580      	push	{r7, lr}
 800fe76:	b082      	sub	sp, #8
 800fe78:	af00      	add	r7, sp, #0
 800fe7a:	6078      	str	r0, [r7, #4]
 800fe7c:	6039      	str	r1, [r7, #0]
 800fe7e:	687b      	ldr	r3, [r7, #4]
 800fe80:	689a      	ldr	r2, [r3, #8]
 800fe82:	683b      	ldr	r3, [r7, #0]
 800fe84:	4413      	add	r3, r2
 800fe86:	1d1a      	adds	r2, r3, #4
 800fe88:	687b      	ldr	r3, [r7, #4]
 800fe8a:	609a      	str	r2, [r3, #8]
 800fe8c:	687b      	ldr	r3, [r7, #4]
 800fe8e:	689b      	ldr	r3, [r3, #8]
 800fe90:	1d1a      	adds	r2, r3, #4
 800fe92:	687b      	ldr	r3, [r7, #4]
 800fe94:	685b      	ldr	r3, [r3, #4]
 800fe96:	429a      	cmp	r2, r3
 800fe98:	d905      	bls.n	800fea6 <mg_queue_del+0x32>
 800fe9a:	4b05      	ldr	r3, [pc, #20]	@ (800feb0 <mg_queue_del+0x3c>)
 800fe9c:	4a05      	ldr	r2, [pc, #20]	@ (800feb4 <mg_queue_del+0x40>)
 800fe9e:	2154      	movs	r1, #84	@ 0x54
 800fea0:	4805      	ldr	r0, [pc, #20]	@ (800feb8 <mg_queue_del+0x44>)
 800fea2:	f009 f95b 	bl	801915c <__assert_func>
 800fea6:	bf00      	nop
 800fea8:	3708      	adds	r7, #8
 800feaa:	46bd      	mov	sp, r7
 800feac:	bd80      	pop	{r7, pc}
 800feae:	bf00      	nop
 800feb0:	0801b960 	.word	0x0801b960
 800feb4:	0801c128 	.word	0x0801c128
 800feb8:	0801b900 	.word	0x0801b900

0800febc <mg_str_s>:
 800febc:	b580      	push	{r7, lr}
 800febe:	b084      	sub	sp, #16
 800fec0:	af00      	add	r7, sp, #0
 800fec2:	6078      	str	r0, [r7, #4]
 800fec4:	6039      	str	r1, [r7, #0]
 800fec6:	683b      	ldr	r3, [r7, #0]
 800fec8:	60bb      	str	r3, [r7, #8]
 800feca:	683b      	ldr	r3, [r7, #0]
 800fecc:	2b00      	cmp	r3, #0
 800fece:	d004      	beq.n	800feda <mg_str_s+0x1e>
 800fed0:	6838      	ldr	r0, [r7, #0]
 800fed2:	f7f0 fa55 	bl	8000380 <strlen>
 800fed6:	4603      	mov	r3, r0
 800fed8:	e000      	b.n	800fedc <mg_str_s+0x20>
 800feda:	2300      	movs	r3, #0
 800fedc:	60fb      	str	r3, [r7, #12]
 800fede:	687b      	ldr	r3, [r7, #4]
 800fee0:	461a      	mov	r2, r3
 800fee2:	f107 0308 	add.w	r3, r7, #8
 800fee6:	e893 0003 	ldmia.w	r3, {r0, r1}
 800feea:	e882 0003 	stmia.w	r2, {r0, r1}
 800feee:	6878      	ldr	r0, [r7, #4]
 800fef0:	3710      	adds	r7, #16
 800fef2:	46bd      	mov	sp, r7
 800fef4:	bd80      	pop	{r7, pc}

0800fef6 <mg_str_n>:
 800fef6:	b480      	push	{r7}
 800fef8:	b087      	sub	sp, #28
 800fefa:	af00      	add	r7, sp, #0
 800fefc:	60f8      	str	r0, [r7, #12]
 800fefe:	60b9      	str	r1, [r7, #8]
 800ff00:	607a      	str	r2, [r7, #4]
 800ff02:	68bb      	ldr	r3, [r7, #8]
 800ff04:	613b      	str	r3, [r7, #16]
 800ff06:	687b      	ldr	r3, [r7, #4]
 800ff08:	617b      	str	r3, [r7, #20]
 800ff0a:	68fb      	ldr	r3, [r7, #12]
 800ff0c:	461a      	mov	r2, r3
 800ff0e:	f107 0310 	add.w	r3, r7, #16
 800ff12:	e893 0003 	ldmia.w	r3, {r0, r1}
 800ff16:	e882 0003 	stmia.w	r2, {r0, r1}
 800ff1a:	68f8      	ldr	r0, [r7, #12]
 800ff1c:	371c      	adds	r7, #28
 800ff1e:	46bd      	mov	sp, r7
 800ff20:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ff24:	4770      	bx	lr

0800ff26 <mg_lower>:
 800ff26:	b480      	push	{r7}
 800ff28:	b085      	sub	sp, #20
 800ff2a:	af00      	add	r7, sp, #0
 800ff2c:	6078      	str	r0, [r7, #4]
 800ff2e:	687b      	ldr	r3, [r7, #4]
 800ff30:	781b      	ldrb	r3, [r3, #0]
 800ff32:	60fb      	str	r3, [r7, #12]
 800ff34:	68fb      	ldr	r3, [r7, #12]
 800ff36:	2b40      	cmp	r3, #64	@ 0x40
 800ff38:	dd05      	ble.n	800ff46 <mg_lower+0x20>
 800ff3a:	68fb      	ldr	r3, [r7, #12]
 800ff3c:	2b5a      	cmp	r3, #90	@ 0x5a
 800ff3e:	dc02      	bgt.n	800ff46 <mg_lower+0x20>
 800ff40:	68fb      	ldr	r3, [r7, #12]
 800ff42:	3320      	adds	r3, #32
 800ff44:	60fb      	str	r3, [r7, #12]
 800ff46:	68fb      	ldr	r3, [r7, #12]
 800ff48:	4618      	mov	r0, r3
 800ff4a:	3714      	adds	r7, #20
 800ff4c:	46bd      	mov	sp, r7
 800ff4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ff52:	4770      	bx	lr

0800ff54 <mg_ncasecmp>:
 800ff54:	b590      	push	{r4, r7, lr}
 800ff56:	b087      	sub	sp, #28
 800ff58:	af00      	add	r7, sp, #0
 800ff5a:	60f8      	str	r0, [r7, #12]
 800ff5c:	60b9      	str	r1, [r7, #8]
 800ff5e:	607a      	str	r2, [r7, #4]
 800ff60:	2300      	movs	r3, #0
 800ff62:	617b      	str	r3, [r7, #20]
 800ff64:	687b      	ldr	r3, [r7, #4]
 800ff66:	2b00      	cmp	r3, #0
 800ff68:	d01d      	beq.n	800ffa6 <mg_ncasecmp+0x52>
 800ff6a:	68fb      	ldr	r3, [r7, #12]
 800ff6c:	1c5a      	adds	r2, r3, #1
 800ff6e:	60fa      	str	r2, [r7, #12]
 800ff70:	4618      	mov	r0, r3
 800ff72:	f7ff ffd8 	bl	800ff26 <mg_lower>
 800ff76:	4604      	mov	r4, r0
 800ff78:	68bb      	ldr	r3, [r7, #8]
 800ff7a:	1c5a      	adds	r2, r3, #1
 800ff7c:	60ba      	str	r2, [r7, #8]
 800ff7e:	4618      	mov	r0, r3
 800ff80:	f7ff ffd1 	bl	800ff26 <mg_lower>
 800ff84:	4603      	mov	r3, r0
 800ff86:	1ae3      	subs	r3, r4, r3
 800ff88:	617b      	str	r3, [r7, #20]
 800ff8a:	697b      	ldr	r3, [r7, #20]
 800ff8c:	2b00      	cmp	r3, #0
 800ff8e:	d10a      	bne.n	800ffa6 <mg_ncasecmp+0x52>
 800ff90:	68fb      	ldr	r3, [r7, #12]
 800ff92:	3b01      	subs	r3, #1
 800ff94:	781b      	ldrb	r3, [r3, #0]
 800ff96:	2b00      	cmp	r3, #0
 800ff98:	d005      	beq.n	800ffa6 <mg_ncasecmp+0x52>
 800ff9a:	687b      	ldr	r3, [r7, #4]
 800ff9c:	3b01      	subs	r3, #1
 800ff9e:	607b      	str	r3, [r7, #4]
 800ffa0:	687b      	ldr	r3, [r7, #4]
 800ffa2:	2b00      	cmp	r3, #0
 800ffa4:	d1e1      	bne.n	800ff6a <mg_ncasecmp+0x16>
 800ffa6:	697b      	ldr	r3, [r7, #20]
 800ffa8:	4618      	mov	r0, r3
 800ffaa:	371c      	adds	r7, #28
 800ffac:	46bd      	mov	sp, r7
 800ffae:	bd90      	pop	{r4, r7, pc}

0800ffb0 <mg_vcasecmp>:
 800ffb0:	b580      	push	{r7, lr}
 800ffb2:	b086      	sub	sp, #24
 800ffb4:	af00      	add	r7, sp, #0
 800ffb6:	6078      	str	r0, [r7, #4]
 800ffb8:	6039      	str	r1, [r7, #0]
 800ffba:	6838      	ldr	r0, [r7, #0]
 800ffbc:	f7f0 f9e0 	bl	8000380 <strlen>
 800ffc0:	6178      	str	r0, [r7, #20]
 800ffc2:	687b      	ldr	r3, [r7, #4]
 800ffc4:	685b      	ldr	r3, [r3, #4]
 800ffc6:	613b      	str	r3, [r7, #16]
 800ffc8:	687b      	ldr	r3, [r7, #4]
 800ffca:	6818      	ldr	r0, [r3, #0]
 800ffcc:	697a      	ldr	r2, [r7, #20]
 800ffce:	693b      	ldr	r3, [r7, #16]
 800ffd0:	4293      	cmp	r3, r2
 800ffd2:	bf28      	it	cs
 800ffd4:	4613      	movcs	r3, r2
 800ffd6:	461a      	mov	r2, r3
 800ffd8:	6839      	ldr	r1, [r7, #0]
 800ffda:	f7ff ffbb 	bl	800ff54 <mg_ncasecmp>
 800ffde:	60f8      	str	r0, [r7, #12]
 800ffe0:	68fb      	ldr	r3, [r7, #12]
 800ffe2:	2b00      	cmp	r3, #0
 800ffe4:	d103      	bne.n	800ffee <mg_vcasecmp+0x3e>
 800ffe6:	693a      	ldr	r2, [r7, #16]
 800ffe8:	697b      	ldr	r3, [r7, #20]
 800ffea:	1ad3      	subs	r3, r2, r3
 800ffec:	e000      	b.n	800fff0 <mg_vcasecmp+0x40>
 800ffee:	68fb      	ldr	r3, [r7, #12]
 800fff0:	4618      	mov	r0, r3
 800fff2:	3718      	adds	r7, #24
 800fff4:	46bd      	mov	sp, r7
 800fff6:	bd80      	pop	{r7, pc}

0800fff8 <mg_match>:
 800fff8:	b490      	push	{r4, r7}
 800fffa:	b088      	sub	sp, #32
 800fffc:	af00      	add	r7, sp, #0
 800fffe:	f107 0408 	add.w	r4, r7, #8
 8010002:	e884 0003 	stmia.w	r4, {r0, r1}
 8010006:	4639      	mov	r1, r7
 8010008:	e881 000c 	stmia.w	r1, {r2, r3}
 801000c:	2300      	movs	r3, #0
 801000e:	61fb      	str	r3, [r7, #28]
 8010010:	2300      	movs	r3, #0
 8010012:	61bb      	str	r3, [r7, #24]
 8010014:	2300      	movs	r3, #0
 8010016:	617b      	str	r3, [r7, #20]
 8010018:	2300      	movs	r3, #0
 801001a:	613b      	str	r3, [r7, #16]
 801001c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801001e:	2b00      	cmp	r3, #0
 8010020:	f000 80ae 	beq.w	8010180 <mg_match+0x188>
 8010024:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010026:	2200      	movs	r2, #0
 8010028:	601a      	str	r2, [r3, #0]
 801002a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801002c:	2200      	movs	r2, #0
 801002e:	605a      	str	r2, [r3, #4]
 8010030:	e0a6      	b.n	8010180 <mg_match+0x188>
 8010032:	687b      	ldr	r3, [r7, #4]
 8010034:	69fa      	ldr	r2, [r7, #28]
 8010036:	429a      	cmp	r2, r3
 8010038:	d24f      	bcs.n	80100da <mg_match+0xe2>
 801003a:	68fb      	ldr	r3, [r7, #12]
 801003c:	69ba      	ldr	r2, [r7, #24]
 801003e:	429a      	cmp	r2, r3
 8010040:	d24b      	bcs.n	80100da <mg_match+0xe2>
 8010042:	683a      	ldr	r2, [r7, #0]
 8010044:	69fb      	ldr	r3, [r7, #28]
 8010046:	4413      	add	r3, r2
 8010048:	781b      	ldrb	r3, [r3, #0]
 801004a:	2b3f      	cmp	r3, #63	@ 0x3f
 801004c:	d009      	beq.n	8010062 <mg_match+0x6a>
 801004e:	68ba      	ldr	r2, [r7, #8]
 8010050:	69bb      	ldr	r3, [r7, #24]
 8010052:	4413      	add	r3, r2
 8010054:	781a      	ldrb	r2, [r3, #0]
 8010056:	6839      	ldr	r1, [r7, #0]
 8010058:	69fb      	ldr	r3, [r7, #28]
 801005a:	440b      	add	r3, r1
 801005c:	781b      	ldrb	r3, [r3, #0]
 801005e:	429a      	cmp	r2, r3
 8010060:	d13b      	bne.n	80100da <mg_match+0xe2>
 8010062:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010064:	2b00      	cmp	r3, #0
 8010066:	d031      	beq.n	80100cc <mg_match+0xd4>
 8010068:	683a      	ldr	r2, [r7, #0]
 801006a:	69fb      	ldr	r3, [r7, #28]
 801006c:	4413      	add	r3, r2
 801006e:	781b      	ldrb	r3, [r3, #0]
 8010070:	2b3f      	cmp	r3, #63	@ 0x3f
 8010072:	d111      	bne.n	8010098 <mg_match+0xa0>
 8010074:	68ba      	ldr	r2, [r7, #8]
 8010076:	69bb      	ldr	r3, [r7, #24]
 8010078:	441a      	add	r2, r3
 801007a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801007c:	601a      	str	r2, [r3, #0]
 801007e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010080:	2201      	movs	r2, #1
 8010082:	605a      	str	r2, [r3, #4]
 8010084:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010086:	3308      	adds	r3, #8
 8010088:	62bb      	str	r3, [r7, #40]	@ 0x28
 801008a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801008c:	2200      	movs	r2, #0
 801008e:	601a      	str	r2, [r3, #0]
 8010090:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010092:	2200      	movs	r2, #0
 8010094:	605a      	str	r2, [r3, #4]
 8010096:	e019      	b.n	80100cc <mg_match+0xd4>
 8010098:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801009a:	681b      	ldr	r3, [r3, #0]
 801009c:	2b00      	cmp	r3, #0
 801009e:	d015      	beq.n	80100cc <mg_match+0xd4>
 80100a0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80100a2:	685b      	ldr	r3, [r3, #4]
 80100a4:	2b00      	cmp	r3, #0
 80100a6:	d111      	bne.n	80100cc <mg_match+0xd4>
 80100a8:	68ba      	ldr	r2, [r7, #8]
 80100aa:	69bb      	ldr	r3, [r7, #24]
 80100ac:	441a      	add	r2, r3
 80100ae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80100b0:	681b      	ldr	r3, [r3, #0]
 80100b2:	1ad3      	subs	r3, r2, r3
 80100b4:	461a      	mov	r2, r3
 80100b6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80100b8:	605a      	str	r2, [r3, #4]
 80100ba:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80100bc:	3308      	adds	r3, #8
 80100be:	62bb      	str	r3, [r7, #40]	@ 0x28
 80100c0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80100c2:	2200      	movs	r2, #0
 80100c4:	605a      	str	r2, [r3, #4]
 80100c6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80100c8:	2200      	movs	r2, #0
 80100ca:	601a      	str	r2, [r3, #0]
 80100cc:	69fb      	ldr	r3, [r7, #28]
 80100ce:	3301      	adds	r3, #1
 80100d0:	61fb      	str	r3, [r7, #28]
 80100d2:	69bb      	ldr	r3, [r7, #24]
 80100d4:	3301      	adds	r3, #1
 80100d6:	61bb      	str	r3, [r7, #24]
 80100d8:	e052      	b.n	8010180 <mg_match+0x188>
 80100da:	687b      	ldr	r3, [r7, #4]
 80100dc:	69fa      	ldr	r2, [r7, #28]
 80100de:	429a      	cmp	r2, r3
 80100e0:	d222      	bcs.n	8010128 <mg_match+0x130>
 80100e2:	683a      	ldr	r2, [r7, #0]
 80100e4:	69fb      	ldr	r3, [r7, #28]
 80100e6:	4413      	add	r3, r2
 80100e8:	781b      	ldrb	r3, [r3, #0]
 80100ea:	2b2a      	cmp	r3, #42	@ 0x2a
 80100ec:	d005      	beq.n	80100fa <mg_match+0x102>
 80100ee:	683a      	ldr	r2, [r7, #0]
 80100f0:	69fb      	ldr	r3, [r7, #28]
 80100f2:	4413      	add	r3, r2
 80100f4:	781b      	ldrb	r3, [r3, #0]
 80100f6:	2b23      	cmp	r3, #35	@ 0x23
 80100f8:	d116      	bne.n	8010128 <mg_match+0x130>
 80100fa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80100fc:	2b00      	cmp	r3, #0
 80100fe:	d00b      	beq.n	8010118 <mg_match+0x120>
 8010100:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010102:	681b      	ldr	r3, [r3, #0]
 8010104:	2b00      	cmp	r3, #0
 8010106:	d107      	bne.n	8010118 <mg_match+0x120>
 8010108:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801010a:	2200      	movs	r2, #0
 801010c:	605a      	str	r2, [r3, #4]
 801010e:	68ba      	ldr	r2, [r7, #8]
 8010110:	69bb      	ldr	r3, [r7, #24]
 8010112:	441a      	add	r2, r3
 8010114:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010116:	601a      	str	r2, [r3, #0]
 8010118:	69fb      	ldr	r3, [r7, #28]
 801011a:	1c5a      	adds	r2, r3, #1
 801011c:	61fa      	str	r2, [r7, #28]
 801011e:	617b      	str	r3, [r7, #20]
 8010120:	69bb      	ldr	r3, [r7, #24]
 8010122:	3301      	adds	r3, #1
 8010124:	613b      	str	r3, [r7, #16]
 8010126:	e02b      	b.n	8010180 <mg_match+0x188>
 8010128:	693b      	ldr	r3, [r7, #16]
 801012a:	2b00      	cmp	r3, #0
 801012c:	d025      	beq.n	801017a <mg_match+0x182>
 801012e:	68fb      	ldr	r3, [r7, #12]
 8010130:	693a      	ldr	r2, [r7, #16]
 8010132:	429a      	cmp	r2, r3
 8010134:	d821      	bhi.n	801017a <mg_match+0x182>
 8010136:	683a      	ldr	r2, [r7, #0]
 8010138:	697b      	ldr	r3, [r7, #20]
 801013a:	4413      	add	r3, r2
 801013c:	781b      	ldrb	r3, [r3, #0]
 801013e:	2b23      	cmp	r3, #35	@ 0x23
 8010140:	d005      	beq.n	801014e <mg_match+0x156>
 8010142:	68ba      	ldr	r2, [r7, #8]
 8010144:	69bb      	ldr	r3, [r7, #24]
 8010146:	4413      	add	r3, r2
 8010148:	781b      	ldrb	r3, [r3, #0]
 801014a:	2b2f      	cmp	r3, #47	@ 0x2f
 801014c:	d015      	beq.n	801017a <mg_match+0x182>
 801014e:	697b      	ldr	r3, [r7, #20]
 8010150:	61fb      	str	r3, [r7, #28]
 8010152:	693b      	ldr	r3, [r7, #16]
 8010154:	61bb      	str	r3, [r7, #24]
 8010156:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010158:	2b00      	cmp	r3, #0
 801015a:	d010      	beq.n	801017e <mg_match+0x186>
 801015c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801015e:	681b      	ldr	r3, [r3, #0]
 8010160:	2b00      	cmp	r3, #0
 8010162:	d10c      	bne.n	801017e <mg_match+0x186>
 8010164:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010166:	685b      	ldr	r3, [r3, #4]
 8010168:	2b00      	cmp	r3, #0
 801016a:	d108      	bne.n	801017e <mg_match+0x186>
 801016c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801016e:	3b08      	subs	r3, #8
 8010170:	62bb      	str	r3, [r7, #40]	@ 0x28
 8010172:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010174:	2200      	movs	r2, #0
 8010176:	605a      	str	r2, [r3, #4]
 8010178:	e001      	b.n	801017e <mg_match+0x186>
 801017a:	2300      	movs	r3, #0
 801017c:	e01f      	b.n	80101be <mg_match+0x1c6>
 801017e:	bf00      	nop
 8010180:	687b      	ldr	r3, [r7, #4]
 8010182:	69fa      	ldr	r2, [r7, #28]
 8010184:	429a      	cmp	r2, r3
 8010186:	f4ff af54 	bcc.w	8010032 <mg_match+0x3a>
 801018a:	68fb      	ldr	r3, [r7, #12]
 801018c:	69ba      	ldr	r2, [r7, #24]
 801018e:	429a      	cmp	r2, r3
 8010190:	f4ff af4f 	bcc.w	8010032 <mg_match+0x3a>
 8010194:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010196:	2b00      	cmp	r3, #0
 8010198:	d010      	beq.n	80101bc <mg_match+0x1c4>
 801019a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801019c:	681b      	ldr	r3, [r3, #0]
 801019e:	2b00      	cmp	r3, #0
 80101a0:	d00c      	beq.n	80101bc <mg_match+0x1c4>
 80101a2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80101a4:	685b      	ldr	r3, [r3, #4]
 80101a6:	2b00      	cmp	r3, #0
 80101a8:	d108      	bne.n	80101bc <mg_match+0x1c4>
 80101aa:	68ba      	ldr	r2, [r7, #8]
 80101ac:	69bb      	ldr	r3, [r7, #24]
 80101ae:	441a      	add	r2, r3
 80101b0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80101b2:	681b      	ldr	r3, [r3, #0]
 80101b4:	1ad3      	subs	r3, r2, r3
 80101b6:	461a      	mov	r2, r3
 80101b8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80101ba:	605a      	str	r2, [r3, #4]
 80101bc:	2301      	movs	r3, #1
 80101be:	4618      	mov	r0, r3
 80101c0:	3720      	adds	r7, #32
 80101c2:	46bd      	mov	sp, r7
 80101c4:	bc90      	pop	{r4, r7}
 80101c6:	4770      	bx	lr

080101c8 <mg_unhex_nimble>:
 80101c8:	b480      	push	{r7}
 80101ca:	b083      	sub	sp, #12
 80101cc:	af00      	add	r7, sp, #0
 80101ce:	4603      	mov	r3, r0
 80101d0:	71fb      	strb	r3, [r7, #7]
 80101d2:	79fb      	ldrb	r3, [r7, #7]
 80101d4:	2b2f      	cmp	r3, #47	@ 0x2f
 80101d6:	d906      	bls.n	80101e6 <mg_unhex_nimble+0x1e>
 80101d8:	79fb      	ldrb	r3, [r7, #7]
 80101da:	2b39      	cmp	r3, #57	@ 0x39
 80101dc:	d803      	bhi.n	80101e6 <mg_unhex_nimble+0x1e>
 80101de:	79fb      	ldrb	r3, [r7, #7]
 80101e0:	3b30      	subs	r3, #48	@ 0x30
 80101e2:	b2db      	uxtb	r3, r3
 80101e4:	e00c      	b.n	8010200 <mg_unhex_nimble+0x38>
 80101e6:	79fb      	ldrb	r3, [r7, #7]
 80101e8:	2b40      	cmp	r3, #64	@ 0x40
 80101ea:	d906      	bls.n	80101fa <mg_unhex_nimble+0x32>
 80101ec:	79fb      	ldrb	r3, [r7, #7]
 80101ee:	2b46      	cmp	r3, #70	@ 0x46
 80101f0:	d803      	bhi.n	80101fa <mg_unhex_nimble+0x32>
 80101f2:	79fb      	ldrb	r3, [r7, #7]
 80101f4:	3b37      	subs	r3, #55	@ 0x37
 80101f6:	b2db      	uxtb	r3, r3
 80101f8:	e002      	b.n	8010200 <mg_unhex_nimble+0x38>
 80101fa:	79fb      	ldrb	r3, [r7, #7]
 80101fc:	3b57      	subs	r3, #87	@ 0x57
 80101fe:	b2db      	uxtb	r3, r3
 8010200:	4618      	mov	r0, r3
 8010202:	370c      	adds	r7, #12
 8010204:	46bd      	mov	sp, r7
 8010206:	f85d 7b04 	ldr.w	r7, [sp], #4
 801020a:	4770      	bx	lr

0801020c <mg_unhexn>:
 801020c:	b580      	push	{r7, lr}
 801020e:	b084      	sub	sp, #16
 8010210:	af00      	add	r7, sp, #0
 8010212:	6078      	str	r0, [r7, #4]
 8010214:	6039      	str	r1, [r7, #0]
 8010216:	2300      	movs	r3, #0
 8010218:	60fb      	str	r3, [r7, #12]
 801021a:	2300      	movs	r3, #0
 801021c:	60bb      	str	r3, [r7, #8]
 801021e:	2300      	movs	r3, #0
 8010220:	60fb      	str	r3, [r7, #12]
 8010222:	e011      	b.n	8010248 <mg_unhexn+0x3c>
 8010224:	68bb      	ldr	r3, [r7, #8]
 8010226:	011b      	lsls	r3, r3, #4
 8010228:	60bb      	str	r3, [r7, #8]
 801022a:	687a      	ldr	r2, [r7, #4]
 801022c:	68fb      	ldr	r3, [r7, #12]
 801022e:	4413      	add	r3, r2
 8010230:	781b      	ldrb	r3, [r3, #0]
 8010232:	4618      	mov	r0, r3
 8010234:	f7ff ffc8 	bl	80101c8 <mg_unhex_nimble>
 8010238:	4603      	mov	r3, r0
 801023a:	461a      	mov	r2, r3
 801023c:	68bb      	ldr	r3, [r7, #8]
 801023e:	4313      	orrs	r3, r2
 8010240:	60bb      	str	r3, [r7, #8]
 8010242:	68fb      	ldr	r3, [r7, #12]
 8010244:	3301      	adds	r3, #1
 8010246:	60fb      	str	r3, [r7, #12]
 8010248:	68fa      	ldr	r2, [r7, #12]
 801024a:	683b      	ldr	r3, [r7, #0]
 801024c:	429a      	cmp	r2, r3
 801024e:	d3e9      	bcc.n	8010224 <mg_unhexn+0x18>
 8010250:	68bb      	ldr	r3, [r7, #8]
 8010252:	4618      	mov	r0, r3
 8010254:	3710      	adds	r7, #16
 8010256:	46bd      	mov	sp, r7
 8010258:	bd80      	pop	{r7, pc}

0801025a <mg_timer_init>:
 801025a:	b480      	push	{r7}
 801025c:	b085      	sub	sp, #20
 801025e:	af00      	add	r7, sp, #0
 8010260:	60f8      	str	r0, [r7, #12]
 8010262:	60b9      	str	r1, [r7, #8]
 8010264:	e9c7 2300 	strd	r2, r3, [r7]
 8010268:	68bb      	ldr	r3, [r7, #8]
 801026a:	2200      	movs	r2, #0
 801026c:	601a      	str	r2, [r3, #0]
 801026e:	68b9      	ldr	r1, [r7, #8]
 8010270:	e9d7 2300 	ldrd	r2, r3, [r7]
 8010274:	e9c1 2302 	strd	r2, r3, [r1, #8]
 8010278:	68b9      	ldr	r1, [r7, #8]
 801027a:	f04f 0200 	mov.w	r2, #0
 801027e:	f04f 0300 	mov.w	r3, #0
 8010282:	e9c1 2304 	strd	r2, r3, [r1, #16]
 8010286:	68bb      	ldr	r3, [r7, #8]
 8010288:	69ba      	ldr	r2, [r7, #24]
 801028a:	619a      	str	r2, [r3, #24]
 801028c:	68bb      	ldr	r3, [r7, #8]
 801028e:	69fa      	ldr	r2, [r7, #28]
 8010290:	61da      	str	r2, [r3, #28]
 8010292:	68bb      	ldr	r3, [r7, #8]
 8010294:	6a3a      	ldr	r2, [r7, #32]
 8010296:	621a      	str	r2, [r3, #32]
 8010298:	68fb      	ldr	r3, [r7, #12]
 801029a:	681a      	ldr	r2, [r3, #0]
 801029c:	68bb      	ldr	r3, [r7, #8]
 801029e:	625a      	str	r2, [r3, #36]	@ 0x24
 80102a0:	68fb      	ldr	r3, [r7, #12]
 80102a2:	68ba      	ldr	r2, [r7, #8]
 80102a4:	601a      	str	r2, [r3, #0]
 80102a6:	bf00      	nop
 80102a8:	3714      	adds	r7, #20
 80102aa:	46bd      	mov	sp, r7
 80102ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80102b0:	4770      	bx	lr

080102b2 <mg_timer_expired>:
 80102b2:	e92d 0ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
 80102b6:	b086      	sub	sp, #24
 80102b8:	af00      	add	r7, sp, #0
 80102ba:	6178      	str	r0, [r7, #20]
 80102bc:	e9c7 2302 	strd	r2, r3, [r7, #8]
 80102c0:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	@ 0x38
 80102c4:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80102c8:	eb10 0a02 	adds.w	sl, r0, r2
 80102cc:	eb41 0b03 	adc.w	fp, r1, r3
 80102d0:	697b      	ldr	r3, [r7, #20]
 80102d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80102d6:	4592      	cmp	sl, r2
 80102d8:	eb7b 0303 	sbcs.w	r3, fp, r3
 80102dc:	d206      	bcs.n	80102ec <mg_timer_expired+0x3a>
 80102de:	6979      	ldr	r1, [r7, #20]
 80102e0:	f04f 0200 	mov.w	r2, #0
 80102e4:	f04f 0300 	mov.w	r3, #0
 80102e8:	e9c1 2300 	strd	r2, r3, [r1]
 80102ec:	697b      	ldr	r3, [r7, #20]
 80102ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80102f2:	4313      	orrs	r3, r2
 80102f4:	d10d      	bne.n	8010312 <mg_timer_expired+0x60>
 80102f6:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	@ 0x38
 80102fa:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80102fe:	1886      	adds	r6, r0, r2
 8010300:	603e      	str	r6, [r7, #0]
 8010302:	eb41 0303 	adc.w	r3, r1, r3
 8010306:	607b      	str	r3, [r7, #4]
 8010308:	697b      	ldr	r3, [r7, #20]
 801030a:	e9d7 1200 	ldrd	r1, r2, [r7]
 801030e:	e9c3 1200 	strd	r1, r2, [r3]
 8010312:	697b      	ldr	r3, [r7, #20]
 8010314:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010318:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	@ 0x38
 801031c:	4290      	cmp	r0, r2
 801031e:	eb71 0303 	sbcs.w	r3, r1, r3
 8010322:	d201      	bcs.n	8010328 <mg_timer_expired+0x76>
 8010324:	2300      	movs	r3, #0
 8010326:	e022      	b.n	801036e <mg_timer_expired+0xbc>
 8010328:	697b      	ldr	r3, [r7, #20]
 801032a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801032e:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	@ 0x38
 8010332:	ebb0 0802 	subs.w	r8, r0, r2
 8010336:	eb61 0903 	sbc.w	r9, r1, r3
 801033a:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 801033e:	4542      	cmp	r2, r8
 8010340:	eb73 0309 	sbcs.w	r3, r3, r9
 8010344:	d207      	bcs.n	8010356 <mg_timer_expired+0xa4>
 8010346:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	@ 0x38
 801034a:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 801034e:	1884      	adds	r4, r0, r2
 8010350:	eb41 0503 	adc.w	r5, r1, r3
 8010354:	e007      	b.n	8010366 <mg_timer_expired+0xb4>
 8010356:	697b      	ldr	r3, [r7, #20]
 8010358:	e9d3 0100 	ldrd	r0, r1, [r3]
 801035c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8010360:	1884      	adds	r4, r0, r2
 8010362:	eb41 0503 	adc.w	r5, r1, r3
 8010366:	697b      	ldr	r3, [r7, #20]
 8010368:	e9c3 4500 	strd	r4, r5, [r3]
 801036c:	2301      	movs	r3, #1
 801036e:	4618      	mov	r0, r3
 8010370:	3718      	adds	r7, #24
 8010372:	46bd      	mov	sp, r7
 8010374:	e8bd 0ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8010378:	4770      	bx	lr

0801037a <mg_timer_poll>:
 801037a:	b590      	push	{r4, r7, lr}
 801037c:	b08b      	sub	sp, #44	@ 0x2c
 801037e:	af02      	add	r7, sp, #8
 8010380:	60f8      	str	r0, [r7, #12]
 8010382:	e9c7 2300 	strd	r2, r3, [r7]
 8010386:	68fb      	ldr	r3, [r7, #12]
 8010388:	681b      	ldr	r3, [r3, #0]
 801038a:	61fb      	str	r3, [r7, #28]
 801038c:	e054      	b.n	8010438 <mg_timer_poll+0xbe>
 801038e:	69fb      	ldr	r3, [r7, #28]
 8010390:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8010394:	4313      	orrs	r3, r2
 8010396:	d10d      	bne.n	80103b4 <mg_timer_poll+0x3a>
 8010398:	69fb      	ldr	r3, [r7, #28]
 801039a:	699b      	ldr	r3, [r3, #24]
 801039c:	f003 0302 	and.w	r3, r3, #2
 80103a0:	2b00      	cmp	r3, #0
 80103a2:	d007      	beq.n	80103b4 <mg_timer_poll+0x3a>
 80103a4:	69fb      	ldr	r3, [r7, #28]
 80103a6:	699b      	ldr	r3, [r3, #24]
 80103a8:	f003 0304 	and.w	r3, r3, #4
 80103ac:	2b00      	cmp	r3, #0
 80103ae:	d101      	bne.n	80103b4 <mg_timer_poll+0x3a>
 80103b0:	2301      	movs	r3, #1
 80103b2:	e000      	b.n	80103b6 <mg_timer_poll+0x3c>
 80103b4:	2300      	movs	r3, #0
 80103b6:	76fb      	strb	r3, [r7, #27]
 80103b8:	7efb      	ldrb	r3, [r7, #27]
 80103ba:	f003 0301 	and.w	r3, r3, #1
 80103be:	76fb      	strb	r3, [r7, #27]
 80103c0:	69fb      	ldr	r3, [r7, #28]
 80103c2:	f103 0410 	add.w	r4, r3, #16
 80103c6:	69fb      	ldr	r3, [r7, #28]
 80103c8:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 80103cc:	e9d7 2300 	ldrd	r2, r3, [r7]
 80103d0:	e9cd 2300 	strd	r2, r3, [sp]
 80103d4:	4602      	mov	r2, r0
 80103d6:	460b      	mov	r3, r1
 80103d8:	4620      	mov	r0, r4
 80103da:	f7ff ff6a 	bl	80102b2 <mg_timer_expired>
 80103de:	4603      	mov	r3, r0
 80103e0:	76bb      	strb	r3, [r7, #26]
 80103e2:	69fb      	ldr	r3, [r7, #28]
 80103e4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80103e6:	617b      	str	r3, [r7, #20]
 80103e8:	7efb      	ldrb	r3, [r7, #27]
 80103ea:	f083 0301 	eor.w	r3, r3, #1
 80103ee:	b2db      	uxtb	r3, r3
 80103f0:	2b00      	cmp	r3, #0
 80103f2:	d005      	beq.n	8010400 <mg_timer_poll+0x86>
 80103f4:	7ebb      	ldrb	r3, [r7, #26]
 80103f6:	f083 0301 	eor.w	r3, r3, #1
 80103fa:	b2db      	uxtb	r3, r3
 80103fc:	2b00      	cmp	r3, #0
 80103fe:	d118      	bne.n	8010432 <mg_timer_poll+0xb8>
 8010400:	69fb      	ldr	r3, [r7, #28]
 8010402:	699b      	ldr	r3, [r3, #24]
 8010404:	f003 0301 	and.w	r3, r3, #1
 8010408:	2b00      	cmp	r3, #0
 801040a:	d105      	bne.n	8010418 <mg_timer_poll+0x9e>
 801040c:	69fb      	ldr	r3, [r7, #28]
 801040e:	699b      	ldr	r3, [r3, #24]
 8010410:	f003 0304 	and.w	r3, r3, #4
 8010414:	2b00      	cmp	r3, #0
 8010416:	d105      	bne.n	8010424 <mg_timer_poll+0xaa>
 8010418:	69fb      	ldr	r3, [r7, #28]
 801041a:	69db      	ldr	r3, [r3, #28]
 801041c:	69fa      	ldr	r2, [r7, #28]
 801041e:	6a12      	ldr	r2, [r2, #32]
 8010420:	4610      	mov	r0, r2
 8010422:	4798      	blx	r3
 8010424:	69fb      	ldr	r3, [r7, #28]
 8010426:	699b      	ldr	r3, [r3, #24]
 8010428:	f043 0204 	orr.w	r2, r3, #4
 801042c:	69fb      	ldr	r3, [r7, #28]
 801042e:	619a      	str	r2, [r3, #24]
 8010430:	e000      	b.n	8010434 <mg_timer_poll+0xba>
 8010432:	bf00      	nop
 8010434:	697b      	ldr	r3, [r7, #20]
 8010436:	61fb      	str	r3, [r7, #28]
 8010438:	69fb      	ldr	r3, [r7, #28]
 801043a:	2b00      	cmp	r3, #0
 801043c:	d1a7      	bne.n	801038e <mg_timer_poll+0x14>
 801043e:	bf00      	nop
 8010440:	bf00      	nop
 8010442:	3724      	adds	r7, #36	@ 0x24
 8010444:	46bd      	mov	sp, r7
 8010446:	bd90      	pop	{r4, r7, pc}

08010448 <mg_tls_handshake>:
 8010448:	b480      	push	{r7}
 801044a:	b083      	sub	sp, #12
 801044c:	af00      	add	r7, sp, #0
 801044e:	6078      	str	r0, [r7, #4]
 8010450:	bf00      	nop
 8010452:	370c      	adds	r7, #12
 8010454:	46bd      	mov	sp, r7
 8010456:	f85d 7b04 	ldr.w	r7, [sp], #4
 801045a:	4770      	bx	lr

0801045c <mg_tls_free>:
 801045c:	b480      	push	{r7}
 801045e:	b083      	sub	sp, #12
 8010460:	af00      	add	r7, sp, #0
 8010462:	6078      	str	r0, [r7, #4]
 8010464:	bf00      	nop
 8010466:	370c      	adds	r7, #12
 8010468:	46bd      	mov	sp, r7
 801046a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801046e:	4770      	bx	lr

08010470 <mg_tls_recv>:
 8010470:	b480      	push	{r7}
 8010472:	b085      	sub	sp, #20
 8010474:	af00      	add	r7, sp, #0
 8010476:	60f8      	str	r0, [r7, #12]
 8010478:	60b9      	str	r1, [r7, #8]
 801047a:	607a      	str	r2, [r7, #4]
 801047c:	68fb      	ldr	r3, [r7, #12]
 801047e:	2b00      	cmp	r3, #0
 8010480:	d005      	beq.n	801048e <mg_tls_recv+0x1e>
 8010482:	68bb      	ldr	r3, [r7, #8]
 8010484:	2b00      	cmp	r3, #0
 8010486:	d002      	beq.n	801048e <mg_tls_recv+0x1e>
 8010488:	687b      	ldr	r3, [r7, #4]
 801048a:	2b00      	cmp	r3, #0
 801048c:	d101      	bne.n	8010492 <mg_tls_recv+0x22>
 801048e:	2300      	movs	r3, #0
 8010490:	e001      	b.n	8010496 <mg_tls_recv+0x26>
 8010492:	f04f 33ff 	mov.w	r3, #4294967295
 8010496:	4618      	mov	r0, r3
 8010498:	3714      	adds	r7, #20
 801049a:	46bd      	mov	sp, r7
 801049c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80104a0:	4770      	bx	lr

080104a2 <mg_tls_send>:
 80104a2:	b480      	push	{r7}
 80104a4:	b085      	sub	sp, #20
 80104a6:	af00      	add	r7, sp, #0
 80104a8:	60f8      	str	r0, [r7, #12]
 80104aa:	60b9      	str	r1, [r7, #8]
 80104ac:	607a      	str	r2, [r7, #4]
 80104ae:	68fb      	ldr	r3, [r7, #12]
 80104b0:	2b00      	cmp	r3, #0
 80104b2:	d005      	beq.n	80104c0 <mg_tls_send+0x1e>
 80104b4:	68bb      	ldr	r3, [r7, #8]
 80104b6:	2b00      	cmp	r3, #0
 80104b8:	d002      	beq.n	80104c0 <mg_tls_send+0x1e>
 80104ba:	687b      	ldr	r3, [r7, #4]
 80104bc:	2b00      	cmp	r3, #0
 80104be:	d101      	bne.n	80104c4 <mg_tls_send+0x22>
 80104c0:	2300      	movs	r3, #0
 80104c2:	e001      	b.n	80104c8 <mg_tls_send+0x26>
 80104c4:	f04f 33ff 	mov.w	r3, #4294967295
 80104c8:	4618      	mov	r0, r3
 80104ca:	3714      	adds	r7, #20
 80104cc:	46bd      	mov	sp, r7
 80104ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80104d2:	4770      	bx	lr

080104d4 <mg_tls_ctx_init>:
 80104d4:	b480      	push	{r7}
 80104d6:	b083      	sub	sp, #12
 80104d8:	af00      	add	r7, sp, #0
 80104da:	6078      	str	r0, [r7, #4]
 80104dc:	bf00      	nop
 80104de:	370c      	adds	r7, #12
 80104e0:	46bd      	mov	sp, r7
 80104e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80104e6:	4770      	bx	lr

080104e8 <mg_url_is_ssl>:
 80104e8:	b580      	push	{r7, lr}
 80104ea:	b082      	sub	sp, #8
 80104ec:	af00      	add	r7, sp, #0
 80104ee:	6078      	str	r0, [r7, #4]
 80104f0:	2204      	movs	r2, #4
 80104f2:	491b      	ldr	r1, [pc, #108]	@ (8010560 <mg_url_is_ssl+0x78>)
 80104f4:	6878      	ldr	r0, [r7, #4]
 80104f6:	f009 fa7e 	bl	80199f6 <strncmp>
 80104fa:	4603      	mov	r3, r0
 80104fc:	2b00      	cmp	r3, #0
 80104fe:	d027      	beq.n	8010550 <mg_url_is_ssl+0x68>
 8010500:	2206      	movs	r2, #6
 8010502:	4918      	ldr	r1, [pc, #96]	@ (8010564 <mg_url_is_ssl+0x7c>)
 8010504:	6878      	ldr	r0, [r7, #4]
 8010506:	f009 fa76 	bl	80199f6 <strncmp>
 801050a:	4603      	mov	r3, r0
 801050c:	2b00      	cmp	r3, #0
 801050e:	d01f      	beq.n	8010550 <mg_url_is_ssl+0x68>
 8010510:	2206      	movs	r2, #6
 8010512:	4915      	ldr	r1, [pc, #84]	@ (8010568 <mg_url_is_ssl+0x80>)
 8010514:	6878      	ldr	r0, [r7, #4]
 8010516:	f009 fa6e 	bl	80199f6 <strncmp>
 801051a:	4603      	mov	r3, r0
 801051c:	2b00      	cmp	r3, #0
 801051e:	d017      	beq.n	8010550 <mg_url_is_ssl+0x68>
 8010520:	2204      	movs	r2, #4
 8010522:	4912      	ldr	r1, [pc, #72]	@ (801056c <mg_url_is_ssl+0x84>)
 8010524:	6878      	ldr	r0, [r7, #4]
 8010526:	f009 fa66 	bl	80199f6 <strncmp>
 801052a:	4603      	mov	r3, r0
 801052c:	2b00      	cmp	r3, #0
 801052e:	d00f      	beq.n	8010550 <mg_url_is_ssl+0x68>
 8010530:	2204      	movs	r2, #4
 8010532:	490f      	ldr	r1, [pc, #60]	@ (8010570 <mg_url_is_ssl+0x88>)
 8010534:	6878      	ldr	r0, [r7, #4]
 8010536:	f009 fa5e 	bl	80199f6 <strncmp>
 801053a:	4603      	mov	r3, r0
 801053c:	2b00      	cmp	r3, #0
 801053e:	d007      	beq.n	8010550 <mg_url_is_ssl+0x68>
 8010540:	2205      	movs	r2, #5
 8010542:	490c      	ldr	r1, [pc, #48]	@ (8010574 <mg_url_is_ssl+0x8c>)
 8010544:	6878      	ldr	r0, [r7, #4]
 8010546:	f009 fa56 	bl	80199f6 <strncmp>
 801054a:	4603      	mov	r3, r0
 801054c:	2b00      	cmp	r3, #0
 801054e:	d101      	bne.n	8010554 <mg_url_is_ssl+0x6c>
 8010550:	2301      	movs	r3, #1
 8010552:	e000      	b.n	8010556 <mg_url_is_ssl+0x6e>
 8010554:	2300      	movs	r3, #0
 8010556:	4618      	mov	r0, r3
 8010558:	3708      	adds	r7, #8
 801055a:	46bd      	mov	sp, r7
 801055c:	bd80      	pop	{r7, pc}
 801055e:	bf00      	nop
 8010560:	0801bb40 	.word	0x0801bb40
 8010564:	0801bb48 	.word	0x0801bb48
 8010568:	0801bb50 	.word	0x0801bb50
 801056c:	0801bb58 	.word	0x0801bb58
 8010570:	0801bb60 	.word	0x0801bb60
 8010574:	0801bb68 	.word	0x0801bb68

08010578 <urlparse>:
 8010578:	b5b0      	push	{r4, r5, r7, lr}
 801057a:	b08a      	sub	sp, #40	@ 0x28
 801057c:	af00      	add	r7, sp, #0
 801057e:	6078      	str	r0, [r7, #4]
 8010580:	6039      	str	r1, [r7, #0]
 8010582:	f107 0308 	add.w	r3, r7, #8
 8010586:	221c      	movs	r2, #28
 8010588:	2100      	movs	r1, #0
 801058a:	4618      	mov	r0, r3
 801058c:	f009 fa1e 	bl	80199cc <memset>
 8010590:	2300      	movs	r3, #0
 8010592:	627b      	str	r3, [r7, #36]	@ 0x24
 8010594:	e05b      	b.n	801064e <urlparse+0xd6>
 8010596:	683a      	ldr	r2, [r7, #0]
 8010598:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801059a:	4413      	add	r3, r2
 801059c:	781b      	ldrb	r3, [r3, #0]
 801059e:	2b2f      	cmp	r3, #47	@ 0x2f
 80105a0:	d112      	bne.n	80105c8 <urlparse+0x50>
 80105a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80105a4:	2b00      	cmp	r3, #0
 80105a6:	d00f      	beq.n	80105c8 <urlparse+0x50>
 80105a8:	697b      	ldr	r3, [r7, #20]
 80105aa:	2b00      	cmp	r3, #0
 80105ac:	d10c      	bne.n	80105c8 <urlparse+0x50>
 80105ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80105b0:	3b01      	subs	r3, #1
 80105b2:	683a      	ldr	r2, [r7, #0]
 80105b4:	4413      	add	r3, r2
 80105b6:	781b      	ldrb	r3, [r3, #0]
 80105b8:	2b2f      	cmp	r3, #47	@ 0x2f
 80105ba:	d105      	bne.n	80105c8 <urlparse+0x50>
 80105bc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80105be:	3301      	adds	r3, #1
 80105c0:	617b      	str	r3, [r7, #20]
 80105c2:	2300      	movs	r3, #0
 80105c4:	61bb      	str	r3, [r7, #24]
 80105c6:	e03f      	b.n	8010648 <urlparse+0xd0>
 80105c8:	683a      	ldr	r2, [r7, #0]
 80105ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80105cc:	4413      	add	r3, r2
 80105ce:	781b      	ldrb	r3, [r3, #0]
 80105d0:	2b5d      	cmp	r3, #93	@ 0x5d
 80105d2:	d102      	bne.n	80105da <urlparse+0x62>
 80105d4:	2300      	movs	r3, #0
 80105d6:	61bb      	str	r3, [r7, #24]
 80105d8:	e036      	b.n	8010648 <urlparse+0xd0>
 80105da:	683a      	ldr	r2, [r7, #0]
 80105dc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80105de:	4413      	add	r3, r2
 80105e0:	781b      	ldrb	r3, [r3, #0]
 80105e2:	2b3a      	cmp	r3, #58	@ 0x3a
 80105e4:	d109      	bne.n	80105fa <urlparse+0x82>
 80105e6:	69bb      	ldr	r3, [r7, #24]
 80105e8:	2b00      	cmp	r3, #0
 80105ea:	d106      	bne.n	80105fa <urlparse+0x82>
 80105ec:	69fb      	ldr	r3, [r7, #28]
 80105ee:	2b00      	cmp	r3, #0
 80105f0:	d103      	bne.n	80105fa <urlparse+0x82>
 80105f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80105f4:	3301      	adds	r3, #1
 80105f6:	61bb      	str	r3, [r7, #24]
 80105f8:	e026      	b.n	8010648 <urlparse+0xd0>
 80105fa:	683a      	ldr	r2, [r7, #0]
 80105fc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80105fe:	4413      	add	r3, r2
 8010600:	781b      	ldrb	r3, [r3, #0]
 8010602:	2b40      	cmp	r3, #64	@ 0x40
 8010604:	d112      	bne.n	801062c <urlparse+0xb4>
 8010606:	68fb      	ldr	r3, [r7, #12]
 8010608:	2b00      	cmp	r3, #0
 801060a:	d10f      	bne.n	801062c <urlparse+0xb4>
 801060c:	693b      	ldr	r3, [r7, #16]
 801060e:	2b00      	cmp	r3, #0
 8010610:	d10c      	bne.n	801062c <urlparse+0xb4>
 8010612:	69fb      	ldr	r3, [r7, #28]
 8010614:	2b00      	cmp	r3, #0
 8010616:	d109      	bne.n	801062c <urlparse+0xb4>
 8010618:	697b      	ldr	r3, [r7, #20]
 801061a:	60fb      	str	r3, [r7, #12]
 801061c:	69bb      	ldr	r3, [r7, #24]
 801061e:	613b      	str	r3, [r7, #16]
 8010620:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010622:	3301      	adds	r3, #1
 8010624:	617b      	str	r3, [r7, #20]
 8010626:	2300      	movs	r3, #0
 8010628:	61bb      	str	r3, [r7, #24]
 801062a:	e00d      	b.n	8010648 <urlparse+0xd0>
 801062c:	683a      	ldr	r2, [r7, #0]
 801062e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010630:	4413      	add	r3, r2
 8010632:	781b      	ldrb	r3, [r3, #0]
 8010634:	2b2f      	cmp	r3, #47	@ 0x2f
 8010636:	d107      	bne.n	8010648 <urlparse+0xd0>
 8010638:	697b      	ldr	r3, [r7, #20]
 801063a:	2b00      	cmp	r3, #0
 801063c:	d004      	beq.n	8010648 <urlparse+0xd0>
 801063e:	69fb      	ldr	r3, [r7, #28]
 8010640:	2b00      	cmp	r3, #0
 8010642:	d101      	bne.n	8010648 <urlparse+0xd0>
 8010644:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010646:	61fb      	str	r3, [r7, #28]
 8010648:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801064a:	3301      	adds	r3, #1
 801064c:	627b      	str	r3, [r7, #36]	@ 0x24
 801064e:	683a      	ldr	r2, [r7, #0]
 8010650:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010652:	4413      	add	r3, r2
 8010654:	781b      	ldrb	r3, [r3, #0]
 8010656:	2b00      	cmp	r3, #0
 8010658:	d19d      	bne.n	8010596 <urlparse+0x1e>
 801065a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801065c:	623b      	str	r3, [r7, #32]
 801065e:	687b      	ldr	r3, [r7, #4]
 8010660:	461d      	mov	r5, r3
 8010662:	f107 0408 	add.w	r4, r7, #8
 8010666:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8010668:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 801066a:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 801066e:	e885 0007 	stmia.w	r5, {r0, r1, r2}
 8010672:	6878      	ldr	r0, [r7, #4]
 8010674:	3728      	adds	r7, #40	@ 0x28
 8010676:	46bd      	mov	sp, r7
 8010678:	bdb0      	pop	{r4, r5, r7, pc}
	...

0801067c <mg_url_port>:
 801067c:	b580      	push	{r7, lr}
 801067e:	b08a      	sub	sp, #40	@ 0x28
 8010680:	af00      	add	r7, sp, #0
 8010682:	6078      	str	r0, [r7, #4]
 8010684:	f107 0308 	add.w	r3, r7, #8
 8010688:	6879      	ldr	r1, [r7, #4]
 801068a:	4618      	mov	r0, r3
 801068c:	f7ff ff74 	bl	8010578 <urlparse>
 8010690:	2300      	movs	r3, #0
 8010692:	84fb      	strh	r3, [r7, #38]	@ 0x26
 8010694:	2205      	movs	r2, #5
 8010696:	4925      	ldr	r1, [pc, #148]	@ (801072c <mg_url_port+0xb0>)
 8010698:	6878      	ldr	r0, [r7, #4]
 801069a:	f009 f9ac 	bl	80199f6 <strncmp>
 801069e:	4603      	mov	r3, r0
 80106a0:	2b00      	cmp	r3, #0
 80106a2:	d007      	beq.n	80106b4 <mg_url_port+0x38>
 80106a4:	2203      	movs	r2, #3
 80106a6:	4922      	ldr	r1, [pc, #136]	@ (8010730 <mg_url_port+0xb4>)
 80106a8:	6878      	ldr	r0, [r7, #4]
 80106aa:	f009 f9a4 	bl	80199f6 <strncmp>
 80106ae:	4603      	mov	r3, r0
 80106b0:	2b00      	cmp	r3, #0
 80106b2:	d101      	bne.n	80106b8 <mg_url_port+0x3c>
 80106b4:	2350      	movs	r3, #80	@ 0x50
 80106b6:	84fb      	strh	r3, [r7, #38]	@ 0x26
 80106b8:	2204      	movs	r2, #4
 80106ba:	491e      	ldr	r1, [pc, #120]	@ (8010734 <mg_url_port+0xb8>)
 80106bc:	6878      	ldr	r0, [r7, #4]
 80106be:	f009 f99a 	bl	80199f6 <strncmp>
 80106c2:	4603      	mov	r3, r0
 80106c4:	2b00      	cmp	r3, #0
 80106c6:	d007      	beq.n	80106d8 <mg_url_port+0x5c>
 80106c8:	2206      	movs	r2, #6
 80106ca:	491b      	ldr	r1, [pc, #108]	@ (8010738 <mg_url_port+0xbc>)
 80106cc:	6878      	ldr	r0, [r7, #4]
 80106ce:	f009 f992 	bl	80199f6 <strncmp>
 80106d2:	4603      	mov	r3, r0
 80106d4:	2b00      	cmp	r3, #0
 80106d6:	d102      	bne.n	80106de <mg_url_port+0x62>
 80106d8:	f240 13bb 	movw	r3, #443	@ 0x1bb
 80106dc:	84fb      	strh	r3, [r7, #38]	@ 0x26
 80106de:	2205      	movs	r2, #5
 80106e0:	4916      	ldr	r1, [pc, #88]	@ (801073c <mg_url_port+0xc0>)
 80106e2:	6878      	ldr	r0, [r7, #4]
 80106e4:	f009 f987 	bl	80199f6 <strncmp>
 80106e8:	4603      	mov	r3, r0
 80106ea:	2b00      	cmp	r3, #0
 80106ec:	d102      	bne.n	80106f4 <mg_url_port+0x78>
 80106ee:	f240 735b 	movw	r3, #1883	@ 0x75b
 80106f2:	84fb      	strh	r3, [r7, #38]	@ 0x26
 80106f4:	2206      	movs	r2, #6
 80106f6:	4912      	ldr	r1, [pc, #72]	@ (8010740 <mg_url_port+0xc4>)
 80106f8:	6878      	ldr	r0, [r7, #4]
 80106fa:	f009 f97c 	bl	80199f6 <strncmp>
 80106fe:	4603      	mov	r3, r0
 8010700:	2b00      	cmp	r3, #0
 8010702:	d102      	bne.n	801070a <mg_url_port+0x8e>
 8010704:	f242 23b3 	movw	r3, #8883	@ 0x22b3
 8010708:	84fb      	strh	r3, [r7, #38]	@ 0x26
 801070a:	69bb      	ldr	r3, [r7, #24]
 801070c:	2b00      	cmp	r3, #0
 801070e:	d007      	beq.n	8010720 <mg_url_port+0xa4>
 8010710:	69bb      	ldr	r3, [r7, #24]
 8010712:	687a      	ldr	r2, [r7, #4]
 8010714:	4413      	add	r3, r2
 8010716:	4618      	mov	r0, r3
 8010718:	f008 fd3e 	bl	8019198 <atoi>
 801071c:	4603      	mov	r3, r0
 801071e:	84fb      	strh	r3, [r7, #38]	@ 0x26
 8010720:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8010722:	4618      	mov	r0, r3
 8010724:	3728      	adds	r7, #40	@ 0x28
 8010726:	46bd      	mov	sp, r7
 8010728:	bd80      	pop	{r7, pc}
 801072a:	bf00      	nop
 801072c:	0801bb70 	.word	0x0801bb70
 8010730:	0801bb78 	.word	0x0801bb78
 8010734:	0801bb40 	.word	0x0801bb40
 8010738:	0801bb48 	.word	0x0801bb48
 801073c:	0801bb7c 	.word	0x0801bb7c
 8010740:	0801bb50 	.word	0x0801bb50

08010744 <mg_bzero>:
 8010744:	b480      	push	{r7}
 8010746:	b083      	sub	sp, #12
 8010748:	af00      	add	r7, sp, #0
 801074a:	6078      	str	r0, [r7, #4]
 801074c:	6039      	str	r1, [r7, #0]
 801074e:	687b      	ldr	r3, [r7, #4]
 8010750:	2b00      	cmp	r3, #0
 8010752:	d00a      	beq.n	801076a <mg_bzero+0x26>
 8010754:	e004      	b.n	8010760 <mg_bzero+0x1c>
 8010756:	687b      	ldr	r3, [r7, #4]
 8010758:	1c5a      	adds	r2, r3, #1
 801075a:	607a      	str	r2, [r7, #4]
 801075c:	2200      	movs	r2, #0
 801075e:	701a      	strb	r2, [r3, #0]
 8010760:	683b      	ldr	r3, [r7, #0]
 8010762:	1e5a      	subs	r2, r3, #1
 8010764:	603a      	str	r2, [r7, #0]
 8010766:	2b00      	cmp	r3, #0
 8010768:	d1f5      	bne.n	8010756 <mg_bzero+0x12>
 801076a:	bf00      	nop
 801076c:	370c      	adds	r7, #12
 801076e:	46bd      	mov	sp, r7
 8010770:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010774:	4770      	bx	lr

08010776 <mg_ntohl>:
 8010776:	b480      	push	{r7}
 8010778:	b085      	sub	sp, #20
 801077a:	af00      	add	r7, sp, #0
 801077c:	6078      	str	r0, [r7, #4]
 801077e:	2300      	movs	r3, #0
 8010780:	60fb      	str	r3, [r7, #12]
 8010782:	687b      	ldr	r3, [r7, #4]
 8010784:	60fb      	str	r3, [r7, #12]
 8010786:	7bfb      	ldrb	r3, [r7, #15]
 8010788:	461a      	mov	r2, r3
 801078a:	7bbb      	ldrb	r3, [r7, #14]
 801078c:	021b      	lsls	r3, r3, #8
 801078e:	431a      	orrs	r2, r3
 8010790:	7b7b      	ldrb	r3, [r7, #13]
 8010792:	041b      	lsls	r3, r3, #16
 8010794:	431a      	orrs	r2, r3
 8010796:	7b3b      	ldrb	r3, [r7, #12]
 8010798:	061b      	lsls	r3, r3, #24
 801079a:	4313      	orrs	r3, r2
 801079c:	4618      	mov	r0, r3
 801079e:	3714      	adds	r7, #20
 80107a0:	46bd      	mov	sp, r7
 80107a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80107a6:	4770      	bx	lr

080107a8 <mg_ntohs>:
 80107a8:	b480      	push	{r7}
 80107aa:	b085      	sub	sp, #20
 80107ac:	af00      	add	r7, sp, #0
 80107ae:	4603      	mov	r3, r0
 80107b0:	80fb      	strh	r3, [r7, #6]
 80107b2:	2300      	movs	r3, #0
 80107b4:	81bb      	strh	r3, [r7, #12]
 80107b6:	88fb      	ldrh	r3, [r7, #6]
 80107b8:	81bb      	strh	r3, [r7, #12]
 80107ba:	7b7b      	ldrb	r3, [r7, #13]
 80107bc:	b21a      	sxth	r2, r3
 80107be:	7b3b      	ldrb	r3, [r7, #12]
 80107c0:	021b      	lsls	r3, r3, #8
 80107c2:	b21b      	sxth	r3, r3
 80107c4:	4313      	orrs	r3, r2
 80107c6:	b21b      	sxth	r3, r3
 80107c8:	b29b      	uxth	r3, r3
 80107ca:	4618      	mov	r0, r3
 80107cc:	3714      	adds	r7, #20
 80107ce:	46bd      	mov	sp, r7
 80107d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80107d4:	4770      	bx	lr
	...

080107d8 <mg_crc32>:
 80107d8:	b480      	push	{r7}
 80107da:	b087      	sub	sp, #28
 80107dc:	af00      	add	r7, sp, #0
 80107de:	60f8      	str	r0, [r7, #12]
 80107e0:	60b9      	str	r1, [r7, #8]
 80107e2:	607a      	str	r2, [r7, #4]
 80107e4:	68fb      	ldr	r3, [r7, #12]
 80107e6:	43db      	mvns	r3, r3
 80107e8:	60fb      	str	r3, [r7, #12]
 80107ea:	e01f      	b.n	801082c <mg_crc32+0x54>
 80107ec:	68bb      	ldr	r3, [r7, #8]
 80107ee:	1c5a      	adds	r2, r3, #1
 80107f0:	60ba      	str	r2, [r7, #8]
 80107f2:	781b      	ldrb	r3, [r3, #0]
 80107f4:	75fb      	strb	r3, [r7, #23]
 80107f6:	7dfa      	ldrb	r2, [r7, #23]
 80107f8:	68fb      	ldr	r3, [r7, #12]
 80107fa:	4053      	eors	r3, r2
 80107fc:	f003 030f 	and.w	r3, r3, #15
 8010800:	4a11      	ldr	r2, [pc, #68]	@ (8010848 <mg_crc32+0x70>)
 8010802:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8010806:	68fb      	ldr	r3, [r7, #12]
 8010808:	091b      	lsrs	r3, r3, #4
 801080a:	4053      	eors	r3, r2
 801080c:	60fb      	str	r3, [r7, #12]
 801080e:	7dfb      	ldrb	r3, [r7, #23]
 8010810:	091b      	lsrs	r3, r3, #4
 8010812:	b2db      	uxtb	r3, r3
 8010814:	461a      	mov	r2, r3
 8010816:	68fb      	ldr	r3, [r7, #12]
 8010818:	4053      	eors	r3, r2
 801081a:	f003 030f 	and.w	r3, r3, #15
 801081e:	4a0a      	ldr	r2, [pc, #40]	@ (8010848 <mg_crc32+0x70>)
 8010820:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8010824:	68fb      	ldr	r3, [r7, #12]
 8010826:	091b      	lsrs	r3, r3, #4
 8010828:	4053      	eors	r3, r2
 801082a:	60fb      	str	r3, [r7, #12]
 801082c:	687b      	ldr	r3, [r7, #4]
 801082e:	1e5a      	subs	r2, r3, #1
 8010830:	607a      	str	r2, [r7, #4]
 8010832:	2b00      	cmp	r3, #0
 8010834:	d1da      	bne.n	80107ec <mg_crc32+0x14>
 8010836:	68fb      	ldr	r3, [r7, #12]
 8010838:	43db      	mvns	r3, r3
 801083a:	4618      	mov	r0, r3
 801083c:	371c      	adds	r7, #28
 801083e:	46bd      	mov	sp, r7
 8010840:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010844:	4770      	bx	lr
 8010846:	bf00      	nop
 8010848:	0801c138 	.word	0x0801c138

0801084c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 801084c:	b580      	push	{r7, lr}
 801084e:	b082      	sub	sp, #8
 8010850:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8010852:	2003      	movs	r0, #3
 8010854:	f000 f98c 	bl	8010b70 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8010858:	f001 fc02 	bl	8012060 <HAL_RCC_GetSysClockFreq>
 801085c:	4602      	mov	r2, r0
 801085e:	4b15      	ldr	r3, [pc, #84]	@ (80108b4 <HAL_Init+0x68>)
 8010860:	699b      	ldr	r3, [r3, #24]
 8010862:	0a1b      	lsrs	r3, r3, #8
 8010864:	f003 030f 	and.w	r3, r3, #15
 8010868:	4913      	ldr	r1, [pc, #76]	@ (80108b8 <HAL_Init+0x6c>)
 801086a:	5ccb      	ldrb	r3, [r1, r3]
 801086c:	f003 031f 	and.w	r3, r3, #31
 8010870:	fa22 f303 	lsr.w	r3, r2, r3
 8010874:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8010876:	4b0f      	ldr	r3, [pc, #60]	@ (80108b4 <HAL_Init+0x68>)
 8010878:	699b      	ldr	r3, [r3, #24]
 801087a:	f003 030f 	and.w	r3, r3, #15
 801087e:	4a0e      	ldr	r2, [pc, #56]	@ (80108b8 <HAL_Init+0x6c>)
 8010880:	5cd3      	ldrb	r3, [r2, r3]
 8010882:	f003 031f 	and.w	r3, r3, #31
 8010886:	687a      	ldr	r2, [r7, #4]
 8010888:	fa22 f303 	lsr.w	r3, r2, r3
 801088c:	4a0b      	ldr	r2, [pc, #44]	@ (80108bc <HAL_Init+0x70>)
 801088e:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8010890:	4a0b      	ldr	r2, [pc, #44]	@ (80108c0 <HAL_Init+0x74>)
 8010892:	687b      	ldr	r3, [r7, #4]
 8010894:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8010896:	2000      	movs	r0, #0
 8010898:	f000 f814 	bl	80108c4 <HAL_InitTick>
 801089c:	4603      	mov	r3, r0
 801089e:	2b00      	cmp	r3, #0
 80108a0:	d001      	beq.n	80108a6 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 80108a2:	2301      	movs	r3, #1
 80108a4:	e002      	b.n	80108ac <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 80108a6:	f7f0 fe6f 	bl	8001588 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80108aa:	2300      	movs	r3, #0
}
 80108ac:	4618      	mov	r0, r3
 80108ae:	3708      	adds	r7, #8
 80108b0:	46bd      	mov	sp, r7
 80108b2:	bd80      	pop	{r7, pc}
 80108b4:	58024400 	.word	0x58024400
 80108b8:	0801bd88 	.word	0x0801bd88
 80108bc:	24000004 	.word	0x24000004
 80108c0:	24000000 	.word	0x24000000

080108c4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80108c4:	b580      	push	{r7, lr}
 80108c6:	b082      	sub	sp, #8
 80108c8:	af00      	add	r7, sp, #0
 80108ca:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 80108cc:	4b15      	ldr	r3, [pc, #84]	@ (8010924 <HAL_InitTick+0x60>)
 80108ce:	781b      	ldrb	r3, [r3, #0]
 80108d0:	2b00      	cmp	r3, #0
 80108d2:	d101      	bne.n	80108d8 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 80108d4:	2301      	movs	r3, #1
 80108d6:	e021      	b.n	801091c <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 80108d8:	4b13      	ldr	r3, [pc, #76]	@ (8010928 <HAL_InitTick+0x64>)
 80108da:	681a      	ldr	r2, [r3, #0]
 80108dc:	4b11      	ldr	r3, [pc, #68]	@ (8010924 <HAL_InitTick+0x60>)
 80108de:	781b      	ldrb	r3, [r3, #0]
 80108e0:	4619      	mov	r1, r3
 80108e2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80108e6:	fbb3 f3f1 	udiv	r3, r3, r1
 80108ea:	fbb2 f3f3 	udiv	r3, r2, r3
 80108ee:	4618      	mov	r0, r3
 80108f0:	f000 f971 	bl	8010bd6 <HAL_SYSTICK_Config>
 80108f4:	4603      	mov	r3, r0
 80108f6:	2b00      	cmp	r3, #0
 80108f8:	d001      	beq.n	80108fe <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 80108fa:	2301      	movs	r3, #1
 80108fc:	e00e      	b.n	801091c <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80108fe:	687b      	ldr	r3, [r7, #4]
 8010900:	2b0f      	cmp	r3, #15
 8010902:	d80a      	bhi.n	801091a <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8010904:	2200      	movs	r2, #0
 8010906:	6879      	ldr	r1, [r7, #4]
 8010908:	f04f 30ff 	mov.w	r0, #4294967295
 801090c:	f000 f93b 	bl	8010b86 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8010910:	4a06      	ldr	r2, [pc, #24]	@ (801092c <HAL_InitTick+0x68>)
 8010912:	687b      	ldr	r3, [r7, #4]
 8010914:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8010916:	2300      	movs	r3, #0
 8010918:	e000      	b.n	801091c <HAL_InitTick+0x58>
    return HAL_ERROR;
 801091a:	2301      	movs	r3, #1
}
 801091c:	4618      	mov	r0, r3
 801091e:	3708      	adds	r7, #8
 8010920:	46bd      	mov	sp, r7
 8010922:	bd80      	pop	{r7, pc}
 8010924:	24000054 	.word	0x24000054
 8010928:	24000000 	.word	0x24000000
 801092c:	24000050 	.word	0x24000050

08010930 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8010930:	b480      	push	{r7}
 8010932:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8010934:	4b06      	ldr	r3, [pc, #24]	@ (8010950 <HAL_IncTick+0x20>)
 8010936:	781b      	ldrb	r3, [r3, #0]
 8010938:	461a      	mov	r2, r3
 801093a:	4b06      	ldr	r3, [pc, #24]	@ (8010954 <HAL_IncTick+0x24>)
 801093c:	681b      	ldr	r3, [r3, #0]
 801093e:	4413      	add	r3, r2
 8010940:	4a04      	ldr	r2, [pc, #16]	@ (8010954 <HAL_IncTick+0x24>)
 8010942:	6013      	str	r3, [r2, #0]
}
 8010944:	bf00      	nop
 8010946:	46bd      	mov	sp, r7
 8010948:	f85d 7b04 	ldr.w	r7, [sp], #4
 801094c:	4770      	bx	lr
 801094e:	bf00      	nop
 8010950:	24000054 	.word	0x24000054
 8010954:	24001fb8 	.word	0x24001fb8

08010958 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8010958:	b480      	push	{r7}
 801095a:	af00      	add	r7, sp, #0
  return uwTick;
 801095c:	4b03      	ldr	r3, [pc, #12]	@ (801096c <HAL_GetTick+0x14>)
 801095e:	681b      	ldr	r3, [r3, #0]
}
 8010960:	4618      	mov	r0, r3
 8010962:	46bd      	mov	sp, r7
 8010964:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010968:	4770      	bx	lr
 801096a:	bf00      	nop
 801096c:	24001fb8 	.word	0x24001fb8

08010970 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8010970:	b580      	push	{r7, lr}
 8010972:	b084      	sub	sp, #16
 8010974:	af00      	add	r7, sp, #0
 8010976:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8010978:	f7ff ffee 	bl	8010958 <HAL_GetTick>
 801097c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 801097e:	687b      	ldr	r3, [r7, #4]
 8010980:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8010982:	68fb      	ldr	r3, [r7, #12]
 8010984:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010988:	d005      	beq.n	8010996 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 801098a:	4b0a      	ldr	r3, [pc, #40]	@ (80109b4 <HAL_Delay+0x44>)
 801098c:	781b      	ldrb	r3, [r3, #0]
 801098e:	461a      	mov	r2, r3
 8010990:	68fb      	ldr	r3, [r7, #12]
 8010992:	4413      	add	r3, r2
 8010994:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8010996:	bf00      	nop
 8010998:	f7ff ffde 	bl	8010958 <HAL_GetTick>
 801099c:	4602      	mov	r2, r0
 801099e:	68bb      	ldr	r3, [r7, #8]
 80109a0:	1ad3      	subs	r3, r2, r3
 80109a2:	68fa      	ldr	r2, [r7, #12]
 80109a4:	429a      	cmp	r2, r3
 80109a6:	d8f7      	bhi.n	8010998 <HAL_Delay+0x28>
  {
  }
}
 80109a8:	bf00      	nop
 80109aa:	bf00      	nop
 80109ac:	3710      	adds	r7, #16
 80109ae:	46bd      	mov	sp, r7
 80109b0:	bd80      	pop	{r7, pc}
 80109b2:	bf00      	nop
 80109b4:	24000054 	.word	0x24000054

080109b8 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 80109b8:	b480      	push	{r7}
 80109ba:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 80109bc:	4b03      	ldr	r3, [pc, #12]	@ (80109cc <HAL_GetREVID+0x14>)
 80109be:	681b      	ldr	r3, [r3, #0]
 80109c0:	0c1b      	lsrs	r3, r3, #16
}
 80109c2:	4618      	mov	r0, r3
 80109c4:	46bd      	mov	sp, r7
 80109c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80109ca:	4770      	bx	lr
 80109cc:	5c001000 	.word	0x5c001000

080109d0 <__NVIC_SetPriorityGrouping>:
{
 80109d0:	b480      	push	{r7}
 80109d2:	b085      	sub	sp, #20
 80109d4:	af00      	add	r7, sp, #0
 80109d6:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80109d8:	687b      	ldr	r3, [r7, #4]
 80109da:	f003 0307 	and.w	r3, r3, #7
 80109de:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80109e0:	4b0b      	ldr	r3, [pc, #44]	@ (8010a10 <__NVIC_SetPriorityGrouping+0x40>)
 80109e2:	68db      	ldr	r3, [r3, #12]
 80109e4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80109e6:	68ba      	ldr	r2, [r7, #8]
 80109e8:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80109ec:	4013      	ands	r3, r2
 80109ee:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80109f0:	68fb      	ldr	r3, [r7, #12]
 80109f2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80109f4:	68bb      	ldr	r3, [r7, #8]
 80109f6:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80109f8:	4b06      	ldr	r3, [pc, #24]	@ (8010a14 <__NVIC_SetPriorityGrouping+0x44>)
 80109fa:	4313      	orrs	r3, r2
 80109fc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80109fe:	4a04      	ldr	r2, [pc, #16]	@ (8010a10 <__NVIC_SetPriorityGrouping+0x40>)
 8010a00:	68bb      	ldr	r3, [r7, #8]
 8010a02:	60d3      	str	r3, [r2, #12]
}
 8010a04:	bf00      	nop
 8010a06:	3714      	adds	r7, #20
 8010a08:	46bd      	mov	sp, r7
 8010a0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010a0e:	4770      	bx	lr
 8010a10:	e000ed00 	.word	0xe000ed00
 8010a14:	05fa0000 	.word	0x05fa0000

08010a18 <__NVIC_GetPriorityGrouping>:
{
 8010a18:	b480      	push	{r7}
 8010a1a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8010a1c:	4b04      	ldr	r3, [pc, #16]	@ (8010a30 <__NVIC_GetPriorityGrouping+0x18>)
 8010a1e:	68db      	ldr	r3, [r3, #12]
 8010a20:	0a1b      	lsrs	r3, r3, #8
 8010a22:	f003 0307 	and.w	r3, r3, #7
}
 8010a26:	4618      	mov	r0, r3
 8010a28:	46bd      	mov	sp, r7
 8010a2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010a2e:	4770      	bx	lr
 8010a30:	e000ed00 	.word	0xe000ed00

08010a34 <__NVIC_EnableIRQ>:
{
 8010a34:	b480      	push	{r7}
 8010a36:	b083      	sub	sp, #12
 8010a38:	af00      	add	r7, sp, #0
 8010a3a:	4603      	mov	r3, r0
 8010a3c:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8010a3e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8010a42:	2b00      	cmp	r3, #0
 8010a44:	db0b      	blt.n	8010a5e <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8010a46:	88fb      	ldrh	r3, [r7, #6]
 8010a48:	f003 021f 	and.w	r2, r3, #31
 8010a4c:	4907      	ldr	r1, [pc, #28]	@ (8010a6c <__NVIC_EnableIRQ+0x38>)
 8010a4e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8010a52:	095b      	lsrs	r3, r3, #5
 8010a54:	2001      	movs	r0, #1
 8010a56:	fa00 f202 	lsl.w	r2, r0, r2
 8010a5a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8010a5e:	bf00      	nop
 8010a60:	370c      	adds	r7, #12
 8010a62:	46bd      	mov	sp, r7
 8010a64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010a68:	4770      	bx	lr
 8010a6a:	bf00      	nop
 8010a6c:	e000e100 	.word	0xe000e100

08010a70 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8010a70:	b480      	push	{r7}
 8010a72:	b083      	sub	sp, #12
 8010a74:	af00      	add	r7, sp, #0
 8010a76:	4603      	mov	r3, r0
 8010a78:	6039      	str	r1, [r7, #0]
 8010a7a:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8010a7c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8010a80:	2b00      	cmp	r3, #0
 8010a82:	db0a      	blt.n	8010a9a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8010a84:	683b      	ldr	r3, [r7, #0]
 8010a86:	b2da      	uxtb	r2, r3
 8010a88:	490c      	ldr	r1, [pc, #48]	@ (8010abc <__NVIC_SetPriority+0x4c>)
 8010a8a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8010a8e:	0112      	lsls	r2, r2, #4
 8010a90:	b2d2      	uxtb	r2, r2
 8010a92:	440b      	add	r3, r1
 8010a94:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8010a98:	e00a      	b.n	8010ab0 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8010a9a:	683b      	ldr	r3, [r7, #0]
 8010a9c:	b2da      	uxtb	r2, r3
 8010a9e:	4908      	ldr	r1, [pc, #32]	@ (8010ac0 <__NVIC_SetPriority+0x50>)
 8010aa0:	88fb      	ldrh	r3, [r7, #6]
 8010aa2:	f003 030f 	and.w	r3, r3, #15
 8010aa6:	3b04      	subs	r3, #4
 8010aa8:	0112      	lsls	r2, r2, #4
 8010aaa:	b2d2      	uxtb	r2, r2
 8010aac:	440b      	add	r3, r1
 8010aae:	761a      	strb	r2, [r3, #24]
}
 8010ab0:	bf00      	nop
 8010ab2:	370c      	adds	r7, #12
 8010ab4:	46bd      	mov	sp, r7
 8010ab6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010aba:	4770      	bx	lr
 8010abc:	e000e100 	.word	0xe000e100
 8010ac0:	e000ed00 	.word	0xe000ed00

08010ac4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8010ac4:	b480      	push	{r7}
 8010ac6:	b089      	sub	sp, #36	@ 0x24
 8010ac8:	af00      	add	r7, sp, #0
 8010aca:	60f8      	str	r0, [r7, #12]
 8010acc:	60b9      	str	r1, [r7, #8]
 8010ace:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8010ad0:	68fb      	ldr	r3, [r7, #12]
 8010ad2:	f003 0307 	and.w	r3, r3, #7
 8010ad6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8010ad8:	69fb      	ldr	r3, [r7, #28]
 8010ada:	f1c3 0307 	rsb	r3, r3, #7
 8010ade:	2b04      	cmp	r3, #4
 8010ae0:	bf28      	it	cs
 8010ae2:	2304      	movcs	r3, #4
 8010ae4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8010ae6:	69fb      	ldr	r3, [r7, #28]
 8010ae8:	3304      	adds	r3, #4
 8010aea:	2b06      	cmp	r3, #6
 8010aec:	d902      	bls.n	8010af4 <NVIC_EncodePriority+0x30>
 8010aee:	69fb      	ldr	r3, [r7, #28]
 8010af0:	3b03      	subs	r3, #3
 8010af2:	e000      	b.n	8010af6 <NVIC_EncodePriority+0x32>
 8010af4:	2300      	movs	r3, #0
 8010af6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8010af8:	f04f 32ff 	mov.w	r2, #4294967295
 8010afc:	69bb      	ldr	r3, [r7, #24]
 8010afe:	fa02 f303 	lsl.w	r3, r2, r3
 8010b02:	43da      	mvns	r2, r3
 8010b04:	68bb      	ldr	r3, [r7, #8]
 8010b06:	401a      	ands	r2, r3
 8010b08:	697b      	ldr	r3, [r7, #20]
 8010b0a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8010b0c:	f04f 31ff 	mov.w	r1, #4294967295
 8010b10:	697b      	ldr	r3, [r7, #20]
 8010b12:	fa01 f303 	lsl.w	r3, r1, r3
 8010b16:	43d9      	mvns	r1, r3
 8010b18:	687b      	ldr	r3, [r7, #4]
 8010b1a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8010b1c:	4313      	orrs	r3, r2
         );
}
 8010b1e:	4618      	mov	r0, r3
 8010b20:	3724      	adds	r7, #36	@ 0x24
 8010b22:	46bd      	mov	sp, r7
 8010b24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010b28:	4770      	bx	lr
	...

08010b2c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8010b2c:	b580      	push	{r7, lr}
 8010b2e:	b082      	sub	sp, #8
 8010b30:	af00      	add	r7, sp, #0
 8010b32:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8010b34:	687b      	ldr	r3, [r7, #4]
 8010b36:	3b01      	subs	r3, #1
 8010b38:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8010b3c:	d301      	bcc.n	8010b42 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8010b3e:	2301      	movs	r3, #1
 8010b40:	e00f      	b.n	8010b62 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8010b42:	4a0a      	ldr	r2, [pc, #40]	@ (8010b6c <SysTick_Config+0x40>)
 8010b44:	687b      	ldr	r3, [r7, #4]
 8010b46:	3b01      	subs	r3, #1
 8010b48:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8010b4a:	210f      	movs	r1, #15
 8010b4c:	f04f 30ff 	mov.w	r0, #4294967295
 8010b50:	f7ff ff8e 	bl	8010a70 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8010b54:	4b05      	ldr	r3, [pc, #20]	@ (8010b6c <SysTick_Config+0x40>)
 8010b56:	2200      	movs	r2, #0
 8010b58:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8010b5a:	4b04      	ldr	r3, [pc, #16]	@ (8010b6c <SysTick_Config+0x40>)
 8010b5c:	2207      	movs	r2, #7
 8010b5e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8010b60:	2300      	movs	r3, #0
}
 8010b62:	4618      	mov	r0, r3
 8010b64:	3708      	adds	r7, #8
 8010b66:	46bd      	mov	sp, r7
 8010b68:	bd80      	pop	{r7, pc}
 8010b6a:	bf00      	nop
 8010b6c:	e000e010 	.word	0xe000e010

08010b70 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8010b70:	b580      	push	{r7, lr}
 8010b72:	b082      	sub	sp, #8
 8010b74:	af00      	add	r7, sp, #0
 8010b76:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8010b78:	6878      	ldr	r0, [r7, #4]
 8010b7a:	f7ff ff29 	bl	80109d0 <__NVIC_SetPriorityGrouping>
}
 8010b7e:	bf00      	nop
 8010b80:	3708      	adds	r7, #8
 8010b82:	46bd      	mov	sp, r7
 8010b84:	bd80      	pop	{r7, pc}

08010b86 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8010b86:	b580      	push	{r7, lr}
 8010b88:	b086      	sub	sp, #24
 8010b8a:	af00      	add	r7, sp, #0
 8010b8c:	4603      	mov	r3, r0
 8010b8e:	60b9      	str	r1, [r7, #8]
 8010b90:	607a      	str	r2, [r7, #4]
 8010b92:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8010b94:	f7ff ff40 	bl	8010a18 <__NVIC_GetPriorityGrouping>
 8010b98:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8010b9a:	687a      	ldr	r2, [r7, #4]
 8010b9c:	68b9      	ldr	r1, [r7, #8]
 8010b9e:	6978      	ldr	r0, [r7, #20]
 8010ba0:	f7ff ff90 	bl	8010ac4 <NVIC_EncodePriority>
 8010ba4:	4602      	mov	r2, r0
 8010ba6:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8010baa:	4611      	mov	r1, r2
 8010bac:	4618      	mov	r0, r3
 8010bae:	f7ff ff5f 	bl	8010a70 <__NVIC_SetPriority>
}
 8010bb2:	bf00      	nop
 8010bb4:	3718      	adds	r7, #24
 8010bb6:	46bd      	mov	sp, r7
 8010bb8:	bd80      	pop	{r7, pc}

08010bba <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8010bba:	b580      	push	{r7, lr}
 8010bbc:	b082      	sub	sp, #8
 8010bbe:	af00      	add	r7, sp, #0
 8010bc0:	4603      	mov	r3, r0
 8010bc2:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8010bc4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8010bc8:	4618      	mov	r0, r3
 8010bca:	f7ff ff33 	bl	8010a34 <__NVIC_EnableIRQ>
}
 8010bce:	bf00      	nop
 8010bd0:	3708      	adds	r7, #8
 8010bd2:	46bd      	mov	sp, r7
 8010bd4:	bd80      	pop	{r7, pc}

08010bd6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8010bd6:	b580      	push	{r7, lr}
 8010bd8:	b082      	sub	sp, #8
 8010bda:	af00      	add	r7, sp, #0
 8010bdc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8010bde:	6878      	ldr	r0, [r7, #4]
 8010be0:	f7ff ffa4 	bl	8010b2c <SysTick_Config>
 8010be4:	4603      	mov	r3, r0
}
 8010be6:	4618      	mov	r0, r3
 8010be8:	3708      	adds	r7, #8
 8010bea:	46bd      	mov	sp, r7
 8010bec:	bd80      	pop	{r7, pc}
	...

08010bf0 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8010bf0:	b480      	push	{r7}
 8010bf2:	b089      	sub	sp, #36	@ 0x24
 8010bf4:	af00      	add	r7, sp, #0
 8010bf6:	6078      	str	r0, [r7, #4]
 8010bf8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8010bfa:	2300      	movs	r3, #0
 8010bfc:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8010bfe:	4b89      	ldr	r3, [pc, #548]	@ (8010e24 <HAL_GPIO_Init+0x234>)
 8010c00:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8010c02:	e194      	b.n	8010f2e <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8010c04:	683b      	ldr	r3, [r7, #0]
 8010c06:	681a      	ldr	r2, [r3, #0]
 8010c08:	2101      	movs	r1, #1
 8010c0a:	69fb      	ldr	r3, [r7, #28]
 8010c0c:	fa01 f303 	lsl.w	r3, r1, r3
 8010c10:	4013      	ands	r3, r2
 8010c12:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8010c14:	693b      	ldr	r3, [r7, #16]
 8010c16:	2b00      	cmp	r3, #0
 8010c18:	f000 8186 	beq.w	8010f28 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8010c1c:	683b      	ldr	r3, [r7, #0]
 8010c1e:	685b      	ldr	r3, [r3, #4]
 8010c20:	f003 0303 	and.w	r3, r3, #3
 8010c24:	2b01      	cmp	r3, #1
 8010c26:	d005      	beq.n	8010c34 <HAL_GPIO_Init+0x44>
 8010c28:	683b      	ldr	r3, [r7, #0]
 8010c2a:	685b      	ldr	r3, [r3, #4]
 8010c2c:	f003 0303 	and.w	r3, r3, #3
 8010c30:	2b02      	cmp	r3, #2
 8010c32:	d130      	bne.n	8010c96 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8010c34:	687b      	ldr	r3, [r7, #4]
 8010c36:	689b      	ldr	r3, [r3, #8]
 8010c38:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8010c3a:	69fb      	ldr	r3, [r7, #28]
 8010c3c:	005b      	lsls	r3, r3, #1
 8010c3e:	2203      	movs	r2, #3
 8010c40:	fa02 f303 	lsl.w	r3, r2, r3
 8010c44:	43db      	mvns	r3, r3
 8010c46:	69ba      	ldr	r2, [r7, #24]
 8010c48:	4013      	ands	r3, r2
 8010c4a:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8010c4c:	683b      	ldr	r3, [r7, #0]
 8010c4e:	68da      	ldr	r2, [r3, #12]
 8010c50:	69fb      	ldr	r3, [r7, #28]
 8010c52:	005b      	lsls	r3, r3, #1
 8010c54:	fa02 f303 	lsl.w	r3, r2, r3
 8010c58:	69ba      	ldr	r2, [r7, #24]
 8010c5a:	4313      	orrs	r3, r2
 8010c5c:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8010c5e:	687b      	ldr	r3, [r7, #4]
 8010c60:	69ba      	ldr	r2, [r7, #24]
 8010c62:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8010c64:	687b      	ldr	r3, [r7, #4]
 8010c66:	685b      	ldr	r3, [r3, #4]
 8010c68:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8010c6a:	2201      	movs	r2, #1
 8010c6c:	69fb      	ldr	r3, [r7, #28]
 8010c6e:	fa02 f303 	lsl.w	r3, r2, r3
 8010c72:	43db      	mvns	r3, r3
 8010c74:	69ba      	ldr	r2, [r7, #24]
 8010c76:	4013      	ands	r3, r2
 8010c78:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8010c7a:	683b      	ldr	r3, [r7, #0]
 8010c7c:	685b      	ldr	r3, [r3, #4]
 8010c7e:	091b      	lsrs	r3, r3, #4
 8010c80:	f003 0201 	and.w	r2, r3, #1
 8010c84:	69fb      	ldr	r3, [r7, #28]
 8010c86:	fa02 f303 	lsl.w	r3, r2, r3
 8010c8a:	69ba      	ldr	r2, [r7, #24]
 8010c8c:	4313      	orrs	r3, r2
 8010c8e:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8010c90:	687b      	ldr	r3, [r7, #4]
 8010c92:	69ba      	ldr	r2, [r7, #24]
 8010c94:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8010c96:	683b      	ldr	r3, [r7, #0]
 8010c98:	685b      	ldr	r3, [r3, #4]
 8010c9a:	f003 0303 	and.w	r3, r3, #3
 8010c9e:	2b03      	cmp	r3, #3
 8010ca0:	d017      	beq.n	8010cd2 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8010ca2:	687b      	ldr	r3, [r7, #4]
 8010ca4:	68db      	ldr	r3, [r3, #12]
 8010ca6:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8010ca8:	69fb      	ldr	r3, [r7, #28]
 8010caa:	005b      	lsls	r3, r3, #1
 8010cac:	2203      	movs	r2, #3
 8010cae:	fa02 f303 	lsl.w	r3, r2, r3
 8010cb2:	43db      	mvns	r3, r3
 8010cb4:	69ba      	ldr	r2, [r7, #24]
 8010cb6:	4013      	ands	r3, r2
 8010cb8:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8010cba:	683b      	ldr	r3, [r7, #0]
 8010cbc:	689a      	ldr	r2, [r3, #8]
 8010cbe:	69fb      	ldr	r3, [r7, #28]
 8010cc0:	005b      	lsls	r3, r3, #1
 8010cc2:	fa02 f303 	lsl.w	r3, r2, r3
 8010cc6:	69ba      	ldr	r2, [r7, #24]
 8010cc8:	4313      	orrs	r3, r2
 8010cca:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8010ccc:	687b      	ldr	r3, [r7, #4]
 8010cce:	69ba      	ldr	r2, [r7, #24]
 8010cd0:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8010cd2:	683b      	ldr	r3, [r7, #0]
 8010cd4:	685b      	ldr	r3, [r3, #4]
 8010cd6:	f003 0303 	and.w	r3, r3, #3
 8010cda:	2b02      	cmp	r3, #2
 8010cdc:	d123      	bne.n	8010d26 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8010cde:	69fb      	ldr	r3, [r7, #28]
 8010ce0:	08da      	lsrs	r2, r3, #3
 8010ce2:	687b      	ldr	r3, [r7, #4]
 8010ce4:	3208      	adds	r2, #8
 8010ce6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8010cea:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8010cec:	69fb      	ldr	r3, [r7, #28]
 8010cee:	f003 0307 	and.w	r3, r3, #7
 8010cf2:	009b      	lsls	r3, r3, #2
 8010cf4:	220f      	movs	r2, #15
 8010cf6:	fa02 f303 	lsl.w	r3, r2, r3
 8010cfa:	43db      	mvns	r3, r3
 8010cfc:	69ba      	ldr	r2, [r7, #24]
 8010cfe:	4013      	ands	r3, r2
 8010d00:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8010d02:	683b      	ldr	r3, [r7, #0]
 8010d04:	691a      	ldr	r2, [r3, #16]
 8010d06:	69fb      	ldr	r3, [r7, #28]
 8010d08:	f003 0307 	and.w	r3, r3, #7
 8010d0c:	009b      	lsls	r3, r3, #2
 8010d0e:	fa02 f303 	lsl.w	r3, r2, r3
 8010d12:	69ba      	ldr	r2, [r7, #24]
 8010d14:	4313      	orrs	r3, r2
 8010d16:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8010d18:	69fb      	ldr	r3, [r7, #28]
 8010d1a:	08da      	lsrs	r2, r3, #3
 8010d1c:	687b      	ldr	r3, [r7, #4]
 8010d1e:	3208      	adds	r2, #8
 8010d20:	69b9      	ldr	r1, [r7, #24]
 8010d22:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8010d26:	687b      	ldr	r3, [r7, #4]
 8010d28:	681b      	ldr	r3, [r3, #0]
 8010d2a:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8010d2c:	69fb      	ldr	r3, [r7, #28]
 8010d2e:	005b      	lsls	r3, r3, #1
 8010d30:	2203      	movs	r2, #3
 8010d32:	fa02 f303 	lsl.w	r3, r2, r3
 8010d36:	43db      	mvns	r3, r3
 8010d38:	69ba      	ldr	r2, [r7, #24]
 8010d3a:	4013      	ands	r3, r2
 8010d3c:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8010d3e:	683b      	ldr	r3, [r7, #0]
 8010d40:	685b      	ldr	r3, [r3, #4]
 8010d42:	f003 0203 	and.w	r2, r3, #3
 8010d46:	69fb      	ldr	r3, [r7, #28]
 8010d48:	005b      	lsls	r3, r3, #1
 8010d4a:	fa02 f303 	lsl.w	r3, r2, r3
 8010d4e:	69ba      	ldr	r2, [r7, #24]
 8010d50:	4313      	orrs	r3, r2
 8010d52:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8010d54:	687b      	ldr	r3, [r7, #4]
 8010d56:	69ba      	ldr	r2, [r7, #24]
 8010d58:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8010d5a:	683b      	ldr	r3, [r7, #0]
 8010d5c:	685b      	ldr	r3, [r3, #4]
 8010d5e:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8010d62:	2b00      	cmp	r3, #0
 8010d64:	f000 80e0 	beq.w	8010f28 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8010d68:	4b2f      	ldr	r3, [pc, #188]	@ (8010e28 <HAL_GPIO_Init+0x238>)
 8010d6a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8010d6e:	4a2e      	ldr	r2, [pc, #184]	@ (8010e28 <HAL_GPIO_Init+0x238>)
 8010d70:	f043 0302 	orr.w	r3, r3, #2
 8010d74:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8010d78:	4b2b      	ldr	r3, [pc, #172]	@ (8010e28 <HAL_GPIO_Init+0x238>)
 8010d7a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8010d7e:	f003 0302 	and.w	r3, r3, #2
 8010d82:	60fb      	str	r3, [r7, #12]
 8010d84:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8010d86:	4a29      	ldr	r2, [pc, #164]	@ (8010e2c <HAL_GPIO_Init+0x23c>)
 8010d88:	69fb      	ldr	r3, [r7, #28]
 8010d8a:	089b      	lsrs	r3, r3, #2
 8010d8c:	3302      	adds	r3, #2
 8010d8e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8010d92:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8010d94:	69fb      	ldr	r3, [r7, #28]
 8010d96:	f003 0303 	and.w	r3, r3, #3
 8010d9a:	009b      	lsls	r3, r3, #2
 8010d9c:	220f      	movs	r2, #15
 8010d9e:	fa02 f303 	lsl.w	r3, r2, r3
 8010da2:	43db      	mvns	r3, r3
 8010da4:	69ba      	ldr	r2, [r7, #24]
 8010da6:	4013      	ands	r3, r2
 8010da8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8010daa:	687b      	ldr	r3, [r7, #4]
 8010dac:	4a20      	ldr	r2, [pc, #128]	@ (8010e30 <HAL_GPIO_Init+0x240>)
 8010dae:	4293      	cmp	r3, r2
 8010db0:	d052      	beq.n	8010e58 <HAL_GPIO_Init+0x268>
 8010db2:	687b      	ldr	r3, [r7, #4]
 8010db4:	4a1f      	ldr	r2, [pc, #124]	@ (8010e34 <HAL_GPIO_Init+0x244>)
 8010db6:	4293      	cmp	r3, r2
 8010db8:	d031      	beq.n	8010e1e <HAL_GPIO_Init+0x22e>
 8010dba:	687b      	ldr	r3, [r7, #4]
 8010dbc:	4a1e      	ldr	r2, [pc, #120]	@ (8010e38 <HAL_GPIO_Init+0x248>)
 8010dbe:	4293      	cmp	r3, r2
 8010dc0:	d02b      	beq.n	8010e1a <HAL_GPIO_Init+0x22a>
 8010dc2:	687b      	ldr	r3, [r7, #4]
 8010dc4:	4a1d      	ldr	r2, [pc, #116]	@ (8010e3c <HAL_GPIO_Init+0x24c>)
 8010dc6:	4293      	cmp	r3, r2
 8010dc8:	d025      	beq.n	8010e16 <HAL_GPIO_Init+0x226>
 8010dca:	687b      	ldr	r3, [r7, #4]
 8010dcc:	4a1c      	ldr	r2, [pc, #112]	@ (8010e40 <HAL_GPIO_Init+0x250>)
 8010dce:	4293      	cmp	r3, r2
 8010dd0:	d01f      	beq.n	8010e12 <HAL_GPIO_Init+0x222>
 8010dd2:	687b      	ldr	r3, [r7, #4]
 8010dd4:	4a1b      	ldr	r2, [pc, #108]	@ (8010e44 <HAL_GPIO_Init+0x254>)
 8010dd6:	4293      	cmp	r3, r2
 8010dd8:	d019      	beq.n	8010e0e <HAL_GPIO_Init+0x21e>
 8010dda:	687b      	ldr	r3, [r7, #4]
 8010ddc:	4a1a      	ldr	r2, [pc, #104]	@ (8010e48 <HAL_GPIO_Init+0x258>)
 8010dde:	4293      	cmp	r3, r2
 8010de0:	d013      	beq.n	8010e0a <HAL_GPIO_Init+0x21a>
 8010de2:	687b      	ldr	r3, [r7, #4]
 8010de4:	4a19      	ldr	r2, [pc, #100]	@ (8010e4c <HAL_GPIO_Init+0x25c>)
 8010de6:	4293      	cmp	r3, r2
 8010de8:	d00d      	beq.n	8010e06 <HAL_GPIO_Init+0x216>
 8010dea:	687b      	ldr	r3, [r7, #4]
 8010dec:	4a18      	ldr	r2, [pc, #96]	@ (8010e50 <HAL_GPIO_Init+0x260>)
 8010dee:	4293      	cmp	r3, r2
 8010df0:	d007      	beq.n	8010e02 <HAL_GPIO_Init+0x212>
 8010df2:	687b      	ldr	r3, [r7, #4]
 8010df4:	4a17      	ldr	r2, [pc, #92]	@ (8010e54 <HAL_GPIO_Init+0x264>)
 8010df6:	4293      	cmp	r3, r2
 8010df8:	d101      	bne.n	8010dfe <HAL_GPIO_Init+0x20e>
 8010dfa:	2309      	movs	r3, #9
 8010dfc:	e02d      	b.n	8010e5a <HAL_GPIO_Init+0x26a>
 8010dfe:	230a      	movs	r3, #10
 8010e00:	e02b      	b.n	8010e5a <HAL_GPIO_Init+0x26a>
 8010e02:	2308      	movs	r3, #8
 8010e04:	e029      	b.n	8010e5a <HAL_GPIO_Init+0x26a>
 8010e06:	2307      	movs	r3, #7
 8010e08:	e027      	b.n	8010e5a <HAL_GPIO_Init+0x26a>
 8010e0a:	2306      	movs	r3, #6
 8010e0c:	e025      	b.n	8010e5a <HAL_GPIO_Init+0x26a>
 8010e0e:	2305      	movs	r3, #5
 8010e10:	e023      	b.n	8010e5a <HAL_GPIO_Init+0x26a>
 8010e12:	2304      	movs	r3, #4
 8010e14:	e021      	b.n	8010e5a <HAL_GPIO_Init+0x26a>
 8010e16:	2303      	movs	r3, #3
 8010e18:	e01f      	b.n	8010e5a <HAL_GPIO_Init+0x26a>
 8010e1a:	2302      	movs	r3, #2
 8010e1c:	e01d      	b.n	8010e5a <HAL_GPIO_Init+0x26a>
 8010e1e:	2301      	movs	r3, #1
 8010e20:	e01b      	b.n	8010e5a <HAL_GPIO_Init+0x26a>
 8010e22:	bf00      	nop
 8010e24:	58000080 	.word	0x58000080
 8010e28:	58024400 	.word	0x58024400
 8010e2c:	58000400 	.word	0x58000400
 8010e30:	58020000 	.word	0x58020000
 8010e34:	58020400 	.word	0x58020400
 8010e38:	58020800 	.word	0x58020800
 8010e3c:	58020c00 	.word	0x58020c00
 8010e40:	58021000 	.word	0x58021000
 8010e44:	58021400 	.word	0x58021400
 8010e48:	58021800 	.word	0x58021800
 8010e4c:	58021c00 	.word	0x58021c00
 8010e50:	58022000 	.word	0x58022000
 8010e54:	58022400 	.word	0x58022400
 8010e58:	2300      	movs	r3, #0
 8010e5a:	69fa      	ldr	r2, [r7, #28]
 8010e5c:	f002 0203 	and.w	r2, r2, #3
 8010e60:	0092      	lsls	r2, r2, #2
 8010e62:	4093      	lsls	r3, r2
 8010e64:	69ba      	ldr	r2, [r7, #24]
 8010e66:	4313      	orrs	r3, r2
 8010e68:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8010e6a:	4938      	ldr	r1, [pc, #224]	@ (8010f4c <HAL_GPIO_Init+0x35c>)
 8010e6c:	69fb      	ldr	r3, [r7, #28]
 8010e6e:	089b      	lsrs	r3, r3, #2
 8010e70:	3302      	adds	r3, #2
 8010e72:	69ba      	ldr	r2, [r7, #24]
 8010e74:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8010e78:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8010e7c:	681b      	ldr	r3, [r3, #0]
 8010e7e:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8010e80:	693b      	ldr	r3, [r7, #16]
 8010e82:	43db      	mvns	r3, r3
 8010e84:	69ba      	ldr	r2, [r7, #24]
 8010e86:	4013      	ands	r3, r2
 8010e88:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8010e8a:	683b      	ldr	r3, [r7, #0]
 8010e8c:	685b      	ldr	r3, [r3, #4]
 8010e8e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8010e92:	2b00      	cmp	r3, #0
 8010e94:	d003      	beq.n	8010e9e <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8010e96:	69ba      	ldr	r2, [r7, #24]
 8010e98:	693b      	ldr	r3, [r7, #16]
 8010e9a:	4313      	orrs	r3, r2
 8010e9c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8010e9e:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8010ea2:	69bb      	ldr	r3, [r7, #24]
 8010ea4:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8010ea6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8010eaa:	685b      	ldr	r3, [r3, #4]
 8010eac:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8010eae:	693b      	ldr	r3, [r7, #16]
 8010eb0:	43db      	mvns	r3, r3
 8010eb2:	69ba      	ldr	r2, [r7, #24]
 8010eb4:	4013      	ands	r3, r2
 8010eb6:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8010eb8:	683b      	ldr	r3, [r7, #0]
 8010eba:	685b      	ldr	r3, [r3, #4]
 8010ebc:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8010ec0:	2b00      	cmp	r3, #0
 8010ec2:	d003      	beq.n	8010ecc <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8010ec4:	69ba      	ldr	r2, [r7, #24]
 8010ec6:	693b      	ldr	r3, [r7, #16]
 8010ec8:	4313      	orrs	r3, r2
 8010eca:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8010ecc:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8010ed0:	69bb      	ldr	r3, [r7, #24]
 8010ed2:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8010ed4:	697b      	ldr	r3, [r7, #20]
 8010ed6:	685b      	ldr	r3, [r3, #4]
 8010ed8:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8010eda:	693b      	ldr	r3, [r7, #16]
 8010edc:	43db      	mvns	r3, r3
 8010ede:	69ba      	ldr	r2, [r7, #24]
 8010ee0:	4013      	ands	r3, r2
 8010ee2:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8010ee4:	683b      	ldr	r3, [r7, #0]
 8010ee6:	685b      	ldr	r3, [r3, #4]
 8010ee8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8010eec:	2b00      	cmp	r3, #0
 8010eee:	d003      	beq.n	8010ef8 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8010ef0:	69ba      	ldr	r2, [r7, #24]
 8010ef2:	693b      	ldr	r3, [r7, #16]
 8010ef4:	4313      	orrs	r3, r2
 8010ef6:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8010ef8:	697b      	ldr	r3, [r7, #20]
 8010efa:	69ba      	ldr	r2, [r7, #24]
 8010efc:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8010efe:	697b      	ldr	r3, [r7, #20]
 8010f00:	681b      	ldr	r3, [r3, #0]
 8010f02:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8010f04:	693b      	ldr	r3, [r7, #16]
 8010f06:	43db      	mvns	r3, r3
 8010f08:	69ba      	ldr	r2, [r7, #24]
 8010f0a:	4013      	ands	r3, r2
 8010f0c:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8010f0e:	683b      	ldr	r3, [r7, #0]
 8010f10:	685b      	ldr	r3, [r3, #4]
 8010f12:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8010f16:	2b00      	cmp	r3, #0
 8010f18:	d003      	beq.n	8010f22 <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 8010f1a:	69ba      	ldr	r2, [r7, #24]
 8010f1c:	693b      	ldr	r3, [r7, #16]
 8010f1e:	4313      	orrs	r3, r2
 8010f20:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8010f22:	697b      	ldr	r3, [r7, #20]
 8010f24:	69ba      	ldr	r2, [r7, #24]
 8010f26:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8010f28:	69fb      	ldr	r3, [r7, #28]
 8010f2a:	3301      	adds	r3, #1
 8010f2c:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8010f2e:	683b      	ldr	r3, [r7, #0]
 8010f30:	681a      	ldr	r2, [r3, #0]
 8010f32:	69fb      	ldr	r3, [r7, #28]
 8010f34:	fa22 f303 	lsr.w	r3, r2, r3
 8010f38:	2b00      	cmp	r3, #0
 8010f3a:	f47f ae63 	bne.w	8010c04 <HAL_GPIO_Init+0x14>
  }
}
 8010f3e:	bf00      	nop
 8010f40:	bf00      	nop
 8010f42:	3724      	adds	r7, #36	@ 0x24
 8010f44:	46bd      	mov	sp, r7
 8010f46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010f4a:	4770      	bx	lr
 8010f4c:	58000400 	.word	0x58000400

08010f50 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8010f50:	b480      	push	{r7}
 8010f52:	b085      	sub	sp, #20
 8010f54:	af00      	add	r7, sp, #0
 8010f56:	6078      	str	r0, [r7, #4]
 8010f58:	460b      	mov	r3, r1
 8010f5a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 8010f5c:	687b      	ldr	r3, [r7, #4]
 8010f5e:	691a      	ldr	r2, [r3, #16]
 8010f60:	887b      	ldrh	r3, [r7, #2]
 8010f62:	4013      	ands	r3, r2
 8010f64:	2b00      	cmp	r3, #0
 8010f66:	d002      	beq.n	8010f6e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8010f68:	2301      	movs	r3, #1
 8010f6a:	73fb      	strb	r3, [r7, #15]
 8010f6c:	e001      	b.n	8010f72 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8010f6e:	2300      	movs	r3, #0
 8010f70:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8010f72:	7bfb      	ldrb	r3, [r7, #15]
}
 8010f74:	4618      	mov	r0, r3
 8010f76:	3714      	adds	r7, #20
 8010f78:	46bd      	mov	sp, r7
 8010f7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010f7e:	4770      	bx	lr

08010f80 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8010f80:	b480      	push	{r7}
 8010f82:	b083      	sub	sp, #12
 8010f84:	af00      	add	r7, sp, #0
 8010f86:	6078      	str	r0, [r7, #4]
 8010f88:	460b      	mov	r3, r1
 8010f8a:	807b      	strh	r3, [r7, #2]
 8010f8c:	4613      	mov	r3, r2
 8010f8e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8010f90:	787b      	ldrb	r3, [r7, #1]
 8010f92:	2b00      	cmp	r3, #0
 8010f94:	d003      	beq.n	8010f9e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8010f96:	887a      	ldrh	r2, [r7, #2]
 8010f98:	687b      	ldr	r3, [r7, #4]
 8010f9a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8010f9c:	e003      	b.n	8010fa6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8010f9e:	887b      	ldrh	r3, [r7, #2]
 8010fa0:	041a      	lsls	r2, r3, #16
 8010fa2:	687b      	ldr	r3, [r7, #4]
 8010fa4:	619a      	str	r2, [r3, #24]
}
 8010fa6:	bf00      	nop
 8010fa8:	370c      	adds	r7, #12
 8010faa:	46bd      	mov	sp, r7
 8010fac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010fb0:	4770      	bx	lr

08010fb2 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: Where x can be (A..K) to select the GPIO peripheral.
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8010fb2:	b480      	push	{r7}
 8010fb4:	b085      	sub	sp, #20
 8010fb6:	af00      	add	r7, sp, #0
 8010fb8:	6078      	str	r0, [r7, #4]
 8010fba:	460b      	mov	r3, r1
 8010fbc:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8010fbe:	687b      	ldr	r3, [r7, #4]
 8010fc0:	695b      	ldr	r3, [r3, #20]
 8010fc2:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8010fc4:	887a      	ldrh	r2, [r7, #2]
 8010fc6:	68fb      	ldr	r3, [r7, #12]
 8010fc8:	4013      	ands	r3, r2
 8010fca:	041a      	lsls	r2, r3, #16
 8010fcc:	68fb      	ldr	r3, [r7, #12]
 8010fce:	43d9      	mvns	r1, r3
 8010fd0:	887b      	ldrh	r3, [r7, #2]
 8010fd2:	400b      	ands	r3, r1
 8010fd4:	431a      	orrs	r2, r3
 8010fd6:	687b      	ldr	r3, [r7, #4]
 8010fd8:	619a      	str	r2, [r3, #24]
}
 8010fda:	bf00      	nop
 8010fdc:	3714      	adds	r7, #20
 8010fde:	46bd      	mov	sp, r7
 8010fe0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010fe4:	4770      	bx	lr

08010fe6 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8010fe6:	b5f0      	push	{r4, r5, r6, r7, lr}
 8010fe8:	b08f      	sub	sp, #60	@ 0x3c
 8010fea:	af0a      	add	r7, sp, #40	@ 0x28
 8010fec:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8010fee:	687b      	ldr	r3, [r7, #4]
 8010ff0:	2b00      	cmp	r3, #0
 8010ff2:	d101      	bne.n	8010ff8 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8010ff4:	2301      	movs	r3, #1
 8010ff6:	e116      	b.n	8011226 <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8010ff8:	687b      	ldr	r3, [r7, #4]
 8010ffa:	681b      	ldr	r3, [r3, #0]
 8010ffc:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8010ffe:	687b      	ldr	r3, [r7, #4]
 8011000:	f893 34bd 	ldrb.w	r3, [r3, #1213]	@ 0x4bd
 8011004:	b2db      	uxtb	r3, r3
 8011006:	2b00      	cmp	r3, #0
 8011008:	d106      	bne.n	8011018 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 801100a:	687b      	ldr	r3, [r7, #4]
 801100c:	2200      	movs	r2, #0
 801100e:	f883 24bc 	strb.w	r2, [r3, #1212]	@ 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8011012:	6878      	ldr	r0, [r7, #4]
 8011014:	f7f0 fbec 	bl	80017f0 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8011018:	687b      	ldr	r3, [r7, #4]
 801101a:	2203      	movs	r2, #3
 801101c:	f883 24bd 	strb.w	r2, [r3, #1213]	@ 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8011020:	68bb      	ldr	r3, [r7, #8]
 8011022:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8011024:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8011028:	2b00      	cmp	r3, #0
 801102a:	d102      	bne.n	8011032 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 801102c:	687b      	ldr	r3, [r7, #4]
 801102e:	2200      	movs	r2, #0
 8011030:	60da      	str	r2, [r3, #12]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8011032:	687b      	ldr	r3, [r7, #4]
 8011034:	681b      	ldr	r3, [r3, #0]
 8011036:	4618      	mov	r0, r3
 8011038:	f007 fb50 	bl	80186dc <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 801103c:	687b      	ldr	r3, [r7, #4]
 801103e:	681b      	ldr	r3, [r3, #0]
 8011040:	603b      	str	r3, [r7, #0]
 8011042:	687e      	ldr	r6, [r7, #4]
 8011044:	466d      	mov	r5, sp
 8011046:	f106 0410 	add.w	r4, r6, #16
 801104a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 801104c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 801104e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8011050:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8011052:	e894 0003 	ldmia.w	r4, {r0, r1}
 8011056:	e885 0003 	stmia.w	r5, {r0, r1}
 801105a:	1d33      	adds	r3, r6, #4
 801105c:	cb0e      	ldmia	r3, {r1, r2, r3}
 801105e:	6838      	ldr	r0, [r7, #0]
 8011060:	f007 face 	bl	8018600 <USB_CoreInit>
 8011064:	4603      	mov	r3, r0
 8011066:	2b00      	cmp	r3, #0
 8011068:	d005      	beq.n	8011076 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 801106a:	687b      	ldr	r3, [r7, #4]
 801106c:	2202      	movs	r2, #2
 801106e:	f883 24bd 	strb.w	r2, [r3, #1213]	@ 0x4bd
    return HAL_ERROR;
 8011072:	2301      	movs	r3, #1
 8011074:	e0d7      	b.n	8011226 <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8011076:	687b      	ldr	r3, [r7, #4]
 8011078:	681b      	ldr	r3, [r3, #0]
 801107a:	2100      	movs	r1, #0
 801107c:	4618      	mov	r0, r3
 801107e:	f007 fb3e 	bl	80186fe <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8011082:	2300      	movs	r3, #0
 8011084:	73fb      	strb	r3, [r7, #15]
 8011086:	e04a      	b.n	801111e <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8011088:	7bfa      	ldrb	r2, [r7, #15]
 801108a:	6879      	ldr	r1, [r7, #4]
 801108c:	4613      	mov	r3, r2
 801108e:	00db      	lsls	r3, r3, #3
 8011090:	4413      	add	r3, r2
 8011092:	009b      	lsls	r3, r3, #2
 8011094:	440b      	add	r3, r1
 8011096:	333d      	adds	r3, #61	@ 0x3d
 8011098:	2201      	movs	r2, #1
 801109a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 801109c:	7bfa      	ldrb	r2, [r7, #15]
 801109e:	6879      	ldr	r1, [r7, #4]
 80110a0:	4613      	mov	r3, r2
 80110a2:	00db      	lsls	r3, r3, #3
 80110a4:	4413      	add	r3, r2
 80110a6:	009b      	lsls	r3, r3, #2
 80110a8:	440b      	add	r3, r1
 80110aa:	333c      	adds	r3, #60	@ 0x3c
 80110ac:	7bfa      	ldrb	r2, [r7, #15]
 80110ae:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 80110b0:	7bfa      	ldrb	r2, [r7, #15]
 80110b2:	7bfb      	ldrb	r3, [r7, #15]
 80110b4:	b298      	uxth	r0, r3
 80110b6:	6879      	ldr	r1, [r7, #4]
 80110b8:	4613      	mov	r3, r2
 80110ba:	00db      	lsls	r3, r3, #3
 80110bc:	4413      	add	r3, r2
 80110be:	009b      	lsls	r3, r3, #2
 80110c0:	440b      	add	r3, r1
 80110c2:	3356      	adds	r3, #86	@ 0x56
 80110c4:	4602      	mov	r2, r0
 80110c6:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80110c8:	7bfa      	ldrb	r2, [r7, #15]
 80110ca:	6879      	ldr	r1, [r7, #4]
 80110cc:	4613      	mov	r3, r2
 80110ce:	00db      	lsls	r3, r3, #3
 80110d0:	4413      	add	r3, r2
 80110d2:	009b      	lsls	r3, r3, #2
 80110d4:	440b      	add	r3, r1
 80110d6:	3340      	adds	r3, #64	@ 0x40
 80110d8:	2200      	movs	r2, #0
 80110da:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80110dc:	7bfa      	ldrb	r2, [r7, #15]
 80110de:	6879      	ldr	r1, [r7, #4]
 80110e0:	4613      	mov	r3, r2
 80110e2:	00db      	lsls	r3, r3, #3
 80110e4:	4413      	add	r3, r2
 80110e6:	009b      	lsls	r3, r3, #2
 80110e8:	440b      	add	r3, r1
 80110ea:	3344      	adds	r3, #68	@ 0x44
 80110ec:	2200      	movs	r2, #0
 80110ee:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80110f0:	7bfa      	ldrb	r2, [r7, #15]
 80110f2:	6879      	ldr	r1, [r7, #4]
 80110f4:	4613      	mov	r3, r2
 80110f6:	00db      	lsls	r3, r3, #3
 80110f8:	4413      	add	r3, r2
 80110fa:	009b      	lsls	r3, r3, #2
 80110fc:	440b      	add	r3, r1
 80110fe:	3348      	adds	r3, #72	@ 0x48
 8011100:	2200      	movs	r2, #0
 8011102:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8011104:	7bfa      	ldrb	r2, [r7, #15]
 8011106:	6879      	ldr	r1, [r7, #4]
 8011108:	4613      	mov	r3, r2
 801110a:	00db      	lsls	r3, r3, #3
 801110c:	4413      	add	r3, r2
 801110e:	009b      	lsls	r3, r3, #2
 8011110:	440b      	add	r3, r1
 8011112:	334c      	adds	r3, #76	@ 0x4c
 8011114:	2200      	movs	r2, #0
 8011116:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8011118:	7bfb      	ldrb	r3, [r7, #15]
 801111a:	3301      	adds	r3, #1
 801111c:	73fb      	strb	r3, [r7, #15]
 801111e:	7bfa      	ldrb	r2, [r7, #15]
 8011120:	687b      	ldr	r3, [r7, #4]
 8011122:	685b      	ldr	r3, [r3, #4]
 8011124:	429a      	cmp	r2, r3
 8011126:	d3af      	bcc.n	8011088 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8011128:	2300      	movs	r3, #0
 801112a:	73fb      	strb	r3, [r7, #15]
 801112c:	e044      	b.n	80111b8 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 801112e:	7bfa      	ldrb	r2, [r7, #15]
 8011130:	6879      	ldr	r1, [r7, #4]
 8011132:	4613      	mov	r3, r2
 8011134:	00db      	lsls	r3, r3, #3
 8011136:	4413      	add	r3, r2
 8011138:	009b      	lsls	r3, r3, #2
 801113a:	440b      	add	r3, r1
 801113c:	f203 237d 	addw	r3, r3, #637	@ 0x27d
 8011140:	2200      	movs	r2, #0
 8011142:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8011144:	7bfa      	ldrb	r2, [r7, #15]
 8011146:	6879      	ldr	r1, [r7, #4]
 8011148:	4613      	mov	r3, r2
 801114a:	00db      	lsls	r3, r3, #3
 801114c:	4413      	add	r3, r2
 801114e:	009b      	lsls	r3, r3, #2
 8011150:	440b      	add	r3, r1
 8011152:	f503 731f 	add.w	r3, r3, #636	@ 0x27c
 8011156:	7bfa      	ldrb	r2, [r7, #15]
 8011158:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 801115a:	7bfa      	ldrb	r2, [r7, #15]
 801115c:	6879      	ldr	r1, [r7, #4]
 801115e:	4613      	mov	r3, r2
 8011160:	00db      	lsls	r3, r3, #3
 8011162:	4413      	add	r3, r2
 8011164:	009b      	lsls	r3, r3, #2
 8011166:	440b      	add	r3, r1
 8011168:	f503 7320 	add.w	r3, r3, #640	@ 0x280
 801116c:	2200      	movs	r2, #0
 801116e:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8011170:	7bfa      	ldrb	r2, [r7, #15]
 8011172:	6879      	ldr	r1, [r7, #4]
 8011174:	4613      	mov	r3, r2
 8011176:	00db      	lsls	r3, r3, #3
 8011178:	4413      	add	r3, r2
 801117a:	009b      	lsls	r3, r3, #2
 801117c:	440b      	add	r3, r1
 801117e:	f503 7321 	add.w	r3, r3, #644	@ 0x284
 8011182:	2200      	movs	r2, #0
 8011184:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8011186:	7bfa      	ldrb	r2, [r7, #15]
 8011188:	6879      	ldr	r1, [r7, #4]
 801118a:	4613      	mov	r3, r2
 801118c:	00db      	lsls	r3, r3, #3
 801118e:	4413      	add	r3, r2
 8011190:	009b      	lsls	r3, r3, #2
 8011192:	440b      	add	r3, r1
 8011194:	f503 7322 	add.w	r3, r3, #648	@ 0x288
 8011198:	2200      	movs	r2, #0
 801119a:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 801119c:	7bfa      	ldrb	r2, [r7, #15]
 801119e:	6879      	ldr	r1, [r7, #4]
 80111a0:	4613      	mov	r3, r2
 80111a2:	00db      	lsls	r3, r3, #3
 80111a4:	4413      	add	r3, r2
 80111a6:	009b      	lsls	r3, r3, #2
 80111a8:	440b      	add	r3, r1
 80111aa:	f503 7323 	add.w	r3, r3, #652	@ 0x28c
 80111ae:	2200      	movs	r2, #0
 80111b0:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80111b2:	7bfb      	ldrb	r3, [r7, #15]
 80111b4:	3301      	adds	r3, #1
 80111b6:	73fb      	strb	r3, [r7, #15]
 80111b8:	7bfa      	ldrb	r2, [r7, #15]
 80111ba:	687b      	ldr	r3, [r7, #4]
 80111bc:	685b      	ldr	r3, [r3, #4]
 80111be:	429a      	cmp	r2, r3
 80111c0:	d3b5      	bcc.n	801112e <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80111c2:	687b      	ldr	r3, [r7, #4]
 80111c4:	681b      	ldr	r3, [r3, #0]
 80111c6:	603b      	str	r3, [r7, #0]
 80111c8:	687e      	ldr	r6, [r7, #4]
 80111ca:	466d      	mov	r5, sp
 80111cc:	f106 0410 	add.w	r4, r6, #16
 80111d0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80111d2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80111d4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80111d6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80111d8:	e894 0003 	ldmia.w	r4, {r0, r1}
 80111dc:	e885 0003 	stmia.w	r5, {r0, r1}
 80111e0:	1d33      	adds	r3, r6, #4
 80111e2:	cb0e      	ldmia	r3, {r1, r2, r3}
 80111e4:	6838      	ldr	r0, [r7, #0]
 80111e6:	f007 fad7 	bl	8018798 <USB_DevInit>
 80111ea:	4603      	mov	r3, r0
 80111ec:	2b00      	cmp	r3, #0
 80111ee:	d005      	beq.n	80111fc <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80111f0:	687b      	ldr	r3, [r7, #4]
 80111f2:	2202      	movs	r2, #2
 80111f4:	f883 24bd 	strb.w	r2, [r3, #1213]	@ 0x4bd
    return HAL_ERROR;
 80111f8:	2301      	movs	r3, #1
 80111fa:	e014      	b.n	8011226 <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 80111fc:	687b      	ldr	r3, [r7, #4]
 80111fe:	2200      	movs	r2, #0
 8011200:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8011204:	687b      	ldr	r3, [r7, #4]
 8011206:	2201      	movs	r2, #1
 8011208:	f883 24bd 	strb.w	r2, [r3, #1213]	@ 0x4bd

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 801120c:	687b      	ldr	r3, [r7, #4]
 801120e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8011210:	2b01      	cmp	r3, #1
 8011212:	d102      	bne.n	801121a <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8011214:	6878      	ldr	r0, [r7, #4]
 8011216:	f000 f80b 	bl	8011230 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 801121a:	687b      	ldr	r3, [r7, #4]
 801121c:	681b      	ldr	r3, [r3, #0]
 801121e:	4618      	mov	r0, r3
 8011220:	f007 fc95 	bl	8018b4e <USB_DevDisconnect>

  return HAL_OK;
 8011224:	2300      	movs	r3, #0
}
 8011226:	4618      	mov	r0, r3
 8011228:	3714      	adds	r7, #20
 801122a:	46bd      	mov	sp, r7
 801122c:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

08011230 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8011230:	b480      	push	{r7}
 8011232:	b085      	sub	sp, #20
 8011234:	af00      	add	r7, sp, #0
 8011236:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8011238:	687b      	ldr	r3, [r7, #4]
 801123a:	681b      	ldr	r3, [r3, #0]
 801123c:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 801123e:	687b      	ldr	r3, [r7, #4]
 8011240:	2201      	movs	r2, #1
 8011242:	f8c3 2500 	str.w	r2, [r3, #1280]	@ 0x500
  hpcd->LPM_State = LPM_L0;
 8011246:	687b      	ldr	r3, [r7, #4]
 8011248:	2200      	movs	r2, #0
 801124a:	f883 24f4 	strb.w	r2, [r3, #1268]	@ 0x4f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 801124e:	68fb      	ldr	r3, [r7, #12]
 8011250:	699b      	ldr	r3, [r3, #24]
 8011252:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 8011256:	68fb      	ldr	r3, [r7, #12]
 8011258:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 801125a:	68fb      	ldr	r3, [r7, #12]
 801125c:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 801125e:	4b05      	ldr	r3, [pc, #20]	@ (8011274 <HAL_PCDEx_ActivateLPM+0x44>)
 8011260:	4313      	orrs	r3, r2
 8011262:	68fa      	ldr	r2, [r7, #12]
 8011264:	6553      	str	r3, [r2, #84]	@ 0x54

  return HAL_OK;
 8011266:	2300      	movs	r3, #0
}
 8011268:	4618      	mov	r0, r3
 801126a:	3714      	adds	r7, #20
 801126c:	46bd      	mov	sp, r7
 801126e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011272:	4770      	bx	lr
 8011274:	10000003 	.word	0x10000003

08011278 <HAL_PWR_EnableBkUpAccess>:
  * @note   If the HSE divided by 2, 3, ..31 is used as the RTC clock, the
  *         Backup Domain Access should be kept enabled.
  * @retval None.
  */
void HAL_PWR_EnableBkUpAccess (void)
{
 8011278:	b480      	push	{r7}
 801127a:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT (PWR->CR1, PWR_CR1_DBP);
 801127c:	4b05      	ldr	r3, [pc, #20]	@ (8011294 <HAL_PWR_EnableBkUpAccess+0x1c>)
 801127e:	681b      	ldr	r3, [r3, #0]
 8011280:	4a04      	ldr	r2, [pc, #16]	@ (8011294 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8011282:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8011286:	6013      	str	r3, [r2, #0]
}
 8011288:	bf00      	nop
 801128a:	46bd      	mov	sp, r7
 801128c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011290:	4770      	bx	lr
 8011292:	bf00      	nop
 8011294:	58024800 	.word	0x58024800

08011298 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8011298:	b580      	push	{r7, lr}
 801129a:	b084      	sub	sp, #16
 801129c:	af00      	add	r7, sp, #0
 801129e:	6078      	str	r0, [r7, #4]

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
 80112a0:	4b29      	ldr	r3, [pc, #164]	@ (8011348 <HAL_PWREx_ConfigSupply+0xb0>)
 80112a2:	68db      	ldr	r3, [r3, #12]
 80112a4:	f003 0307 	and.w	r3, r3, #7
 80112a8:	2b06      	cmp	r3, #6
 80112aa:	d00a      	beq.n	80112c2 <HAL_PWREx_ConfigSupply+0x2a>
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 80112ac:	4b26      	ldr	r3, [pc, #152]	@ (8011348 <HAL_PWREx_ConfigSupply+0xb0>)
 80112ae:	68db      	ldr	r3, [r3, #12]
 80112b0:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80112b4:	687a      	ldr	r2, [r7, #4]
 80112b6:	429a      	cmp	r2, r3
 80112b8:	d001      	beq.n	80112be <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 80112ba:	2301      	movs	r3, #1
 80112bc:	e040      	b.n	8011340 <HAL_PWREx_ConfigSupply+0xa8>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 80112be:	2300      	movs	r3, #0
 80112c0:	e03e      	b.n	8011340 <HAL_PWREx_ConfigSupply+0xa8>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 80112c2:	4b21      	ldr	r3, [pc, #132]	@ (8011348 <HAL_PWREx_ConfigSupply+0xb0>)
 80112c4:	68db      	ldr	r3, [r3, #12]
 80112c6:	f023 023f 	bic.w	r2, r3, #63	@ 0x3f
 80112ca:	491f      	ldr	r1, [pc, #124]	@ (8011348 <HAL_PWREx_ConfigSupply+0xb0>)
 80112cc:	687b      	ldr	r3, [r7, #4]
 80112ce:	4313      	orrs	r3, r2
 80112d0:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 80112d2:	f7ff fb41 	bl	8010958 <HAL_GetTick>
 80112d6:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80112d8:	e009      	b.n	80112ee <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 80112da:	f7ff fb3d 	bl	8010958 <HAL_GetTick>
 80112de:	4602      	mov	r2, r0
 80112e0:	68fb      	ldr	r3, [r7, #12]
 80112e2:	1ad3      	subs	r3, r2, r3
 80112e4:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80112e8:	d901      	bls.n	80112ee <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 80112ea:	2301      	movs	r3, #1
 80112ec:	e028      	b.n	8011340 <HAL_PWREx_ConfigSupply+0xa8>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80112ee:	4b16      	ldr	r3, [pc, #88]	@ (8011348 <HAL_PWREx_ConfigSupply+0xb0>)
 80112f0:	685b      	ldr	r3, [r3, #4]
 80112f2:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80112f6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80112fa:	d1ee      	bne.n	80112da <HAL_PWREx_ConfigSupply+0x42>
    }
  }

#if defined (SMPS)
  /* When the SMPS supplies external circuits verify that SDEXTRDY flag is set */
  if ((SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT_AND_LDO) ||
 80112fc:	687b      	ldr	r3, [r7, #4]
 80112fe:	2b1e      	cmp	r3, #30
 8011300:	d008      	beq.n	8011314 <HAL_PWREx_ConfigSupply+0x7c>
 8011302:	687b      	ldr	r3, [r7, #4]
 8011304:	2b2e      	cmp	r3, #46	@ 0x2e
 8011306:	d005      	beq.n	8011314 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT_AND_LDO) ||
 8011308:	687b      	ldr	r3, [r7, #4]
 801130a:	2b1d      	cmp	r3, #29
 801130c:	d002      	beq.n	8011314 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT)         ||
 801130e:	687b      	ldr	r3, [r7, #4]
 8011310:	2b2d      	cmp	r3, #45	@ 0x2d
 8011312:	d114      	bne.n	801133e <HAL_PWREx_ConfigSupply+0xa6>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT))
  {
    /* Get the current tick number */
    tickstart = HAL_GetTick ();
 8011314:	f7ff fb20 	bl	8010958 <HAL_GetTick>
 8011318:	60f8      	str	r0, [r7, #12]

    /* Wait till SMPS external supply ready flag is set */
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 801131a:	e009      	b.n	8011330 <HAL_PWREx_ConfigSupply+0x98>
    {
      if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 801131c:	f7ff fb1c 	bl	8010958 <HAL_GetTick>
 8011320:	4602      	mov	r2, r0
 8011322:	68fb      	ldr	r3, [r7, #12]
 8011324:	1ad3      	subs	r3, r2, r3
 8011326:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 801132a:	d901      	bls.n	8011330 <HAL_PWREx_ConfigSupply+0x98>
      {
        return HAL_ERROR;
 801132c:	2301      	movs	r3, #1
 801132e:	e007      	b.n	8011340 <HAL_PWREx_ConfigSupply+0xa8>
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 8011330:	4b05      	ldr	r3, [pc, #20]	@ (8011348 <HAL_PWREx_ConfigSupply+0xb0>)
 8011332:	68db      	ldr	r3, [r3, #12]
 8011334:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8011338:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 801133c:	d1ee      	bne.n	801131c <HAL_PWREx_ConfigSupply+0x84>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 801133e:	2300      	movs	r3, #0
}
 8011340:	4618      	mov	r0, r3
 8011342:	3710      	adds	r7, #16
 8011344:	46bd      	mov	sp, r7
 8011346:	bd80      	pop	{r7, pc}
 8011348:	58024800 	.word	0x58024800

0801134c <HAL_PWREx_EnableUSBVoltageDetector>:
/**
  * @brief Enable the USB voltage level detector.
  * @retval None.
  */
void HAL_PWREx_EnableUSBVoltageDetector (void)
{
 801134c:	b480      	push	{r7}
 801134e:	af00      	add	r7, sp, #0
  /* Enable the USB voltage detector */
  SET_BIT (PWR->CR3, PWR_CR3_USB33DEN);
 8011350:	4b05      	ldr	r3, [pc, #20]	@ (8011368 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 8011352:	68db      	ldr	r3, [r3, #12]
 8011354:	4a04      	ldr	r2, [pc, #16]	@ (8011368 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 8011356:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 801135a:	60d3      	str	r3, [r2, #12]
}
 801135c:	bf00      	nop
 801135e:	46bd      	mov	sp, r7
 8011360:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011364:	4770      	bx	lr
 8011366:	bf00      	nop
 8011368:	58024800 	.word	0x58024800

0801136c <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 801136c:	b580      	push	{r7, lr}
 801136e:	b08c      	sub	sp, #48	@ 0x30
 8011370:	af00      	add	r7, sp, #0
 8011372:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8011374:	687b      	ldr	r3, [r7, #4]
 8011376:	2b00      	cmp	r3, #0
 8011378:	d102      	bne.n	8011380 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 801137a:	2301      	movs	r3, #1
 801137c:	f000 bc48 	b.w	8011c10 <HAL_RCC_OscConfig+0x8a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8011380:	687b      	ldr	r3, [r7, #4]
 8011382:	681b      	ldr	r3, [r3, #0]
 8011384:	f003 0301 	and.w	r3, r3, #1
 8011388:	2b00      	cmp	r3, #0
 801138a:	f000 8088 	beq.w	801149e <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 801138e:	4b99      	ldr	r3, [pc, #612]	@ (80115f4 <HAL_RCC_OscConfig+0x288>)
 8011390:	691b      	ldr	r3, [r3, #16]
 8011392:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8011396:	62fb      	str	r3, [r7, #44]	@ 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8011398:	4b96      	ldr	r3, [pc, #600]	@ (80115f4 <HAL_RCC_OscConfig+0x288>)
 801139a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801139c:	62bb      	str	r3, [r7, #40]	@ 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 801139e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80113a0:	2b10      	cmp	r3, #16
 80113a2:	d007      	beq.n	80113b4 <HAL_RCC_OscConfig+0x48>
 80113a4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80113a6:	2b18      	cmp	r3, #24
 80113a8:	d111      	bne.n	80113ce <HAL_RCC_OscConfig+0x62>
 80113aa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80113ac:	f003 0303 	and.w	r3, r3, #3
 80113b0:	2b02      	cmp	r3, #2
 80113b2:	d10c      	bne.n	80113ce <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80113b4:	4b8f      	ldr	r3, [pc, #572]	@ (80115f4 <HAL_RCC_OscConfig+0x288>)
 80113b6:	681b      	ldr	r3, [r3, #0]
 80113b8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80113bc:	2b00      	cmp	r3, #0
 80113be:	d06d      	beq.n	801149c <HAL_RCC_OscConfig+0x130>
 80113c0:	687b      	ldr	r3, [r7, #4]
 80113c2:	685b      	ldr	r3, [r3, #4]
 80113c4:	2b00      	cmp	r3, #0
 80113c6:	d169      	bne.n	801149c <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 80113c8:	2301      	movs	r3, #1
 80113ca:	f000 bc21 	b.w	8011c10 <HAL_RCC_OscConfig+0x8a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80113ce:	687b      	ldr	r3, [r7, #4]
 80113d0:	685b      	ldr	r3, [r3, #4]
 80113d2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80113d6:	d106      	bne.n	80113e6 <HAL_RCC_OscConfig+0x7a>
 80113d8:	4b86      	ldr	r3, [pc, #536]	@ (80115f4 <HAL_RCC_OscConfig+0x288>)
 80113da:	681b      	ldr	r3, [r3, #0]
 80113dc:	4a85      	ldr	r2, [pc, #532]	@ (80115f4 <HAL_RCC_OscConfig+0x288>)
 80113de:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80113e2:	6013      	str	r3, [r2, #0]
 80113e4:	e02e      	b.n	8011444 <HAL_RCC_OscConfig+0xd8>
 80113e6:	687b      	ldr	r3, [r7, #4]
 80113e8:	685b      	ldr	r3, [r3, #4]
 80113ea:	2b00      	cmp	r3, #0
 80113ec:	d10c      	bne.n	8011408 <HAL_RCC_OscConfig+0x9c>
 80113ee:	4b81      	ldr	r3, [pc, #516]	@ (80115f4 <HAL_RCC_OscConfig+0x288>)
 80113f0:	681b      	ldr	r3, [r3, #0]
 80113f2:	4a80      	ldr	r2, [pc, #512]	@ (80115f4 <HAL_RCC_OscConfig+0x288>)
 80113f4:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80113f8:	6013      	str	r3, [r2, #0]
 80113fa:	4b7e      	ldr	r3, [pc, #504]	@ (80115f4 <HAL_RCC_OscConfig+0x288>)
 80113fc:	681b      	ldr	r3, [r3, #0]
 80113fe:	4a7d      	ldr	r2, [pc, #500]	@ (80115f4 <HAL_RCC_OscConfig+0x288>)
 8011400:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8011404:	6013      	str	r3, [r2, #0]
 8011406:	e01d      	b.n	8011444 <HAL_RCC_OscConfig+0xd8>
 8011408:	687b      	ldr	r3, [r7, #4]
 801140a:	685b      	ldr	r3, [r3, #4]
 801140c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8011410:	d10c      	bne.n	801142c <HAL_RCC_OscConfig+0xc0>
 8011412:	4b78      	ldr	r3, [pc, #480]	@ (80115f4 <HAL_RCC_OscConfig+0x288>)
 8011414:	681b      	ldr	r3, [r3, #0]
 8011416:	4a77      	ldr	r2, [pc, #476]	@ (80115f4 <HAL_RCC_OscConfig+0x288>)
 8011418:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 801141c:	6013      	str	r3, [r2, #0]
 801141e:	4b75      	ldr	r3, [pc, #468]	@ (80115f4 <HAL_RCC_OscConfig+0x288>)
 8011420:	681b      	ldr	r3, [r3, #0]
 8011422:	4a74      	ldr	r2, [pc, #464]	@ (80115f4 <HAL_RCC_OscConfig+0x288>)
 8011424:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8011428:	6013      	str	r3, [r2, #0]
 801142a:	e00b      	b.n	8011444 <HAL_RCC_OscConfig+0xd8>
 801142c:	4b71      	ldr	r3, [pc, #452]	@ (80115f4 <HAL_RCC_OscConfig+0x288>)
 801142e:	681b      	ldr	r3, [r3, #0]
 8011430:	4a70      	ldr	r2, [pc, #448]	@ (80115f4 <HAL_RCC_OscConfig+0x288>)
 8011432:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8011436:	6013      	str	r3, [r2, #0]
 8011438:	4b6e      	ldr	r3, [pc, #440]	@ (80115f4 <HAL_RCC_OscConfig+0x288>)
 801143a:	681b      	ldr	r3, [r3, #0]
 801143c:	4a6d      	ldr	r2, [pc, #436]	@ (80115f4 <HAL_RCC_OscConfig+0x288>)
 801143e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8011442:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8011444:	687b      	ldr	r3, [r7, #4]
 8011446:	685b      	ldr	r3, [r3, #4]
 8011448:	2b00      	cmp	r3, #0
 801144a:	d013      	beq.n	8011474 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 801144c:	f7ff fa84 	bl	8010958 <HAL_GetTick>
 8011450:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8011452:	e008      	b.n	8011466 <HAL_RCC_OscConfig+0xfa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8011454:	f7ff fa80 	bl	8010958 <HAL_GetTick>
 8011458:	4602      	mov	r2, r0
 801145a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801145c:	1ad3      	subs	r3, r2, r3
 801145e:	2b64      	cmp	r3, #100	@ 0x64
 8011460:	d901      	bls.n	8011466 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8011462:	2303      	movs	r3, #3
 8011464:	e3d4      	b.n	8011c10 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8011466:	4b63      	ldr	r3, [pc, #396]	@ (80115f4 <HAL_RCC_OscConfig+0x288>)
 8011468:	681b      	ldr	r3, [r3, #0]
 801146a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 801146e:	2b00      	cmp	r3, #0
 8011470:	d0f0      	beq.n	8011454 <HAL_RCC_OscConfig+0xe8>
 8011472:	e014      	b.n	801149e <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8011474:	f7ff fa70 	bl	8010958 <HAL_GetTick>
 8011478:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 801147a:	e008      	b.n	801148e <HAL_RCC_OscConfig+0x122>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 801147c:	f7ff fa6c 	bl	8010958 <HAL_GetTick>
 8011480:	4602      	mov	r2, r0
 8011482:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011484:	1ad3      	subs	r3, r2, r3
 8011486:	2b64      	cmp	r3, #100	@ 0x64
 8011488:	d901      	bls.n	801148e <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 801148a:	2303      	movs	r3, #3
 801148c:	e3c0      	b.n	8011c10 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 801148e:	4b59      	ldr	r3, [pc, #356]	@ (80115f4 <HAL_RCC_OscConfig+0x288>)
 8011490:	681b      	ldr	r3, [r3, #0]
 8011492:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8011496:	2b00      	cmp	r3, #0
 8011498:	d1f0      	bne.n	801147c <HAL_RCC_OscConfig+0x110>
 801149a:	e000      	b.n	801149e <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 801149c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 801149e:	687b      	ldr	r3, [r7, #4]
 80114a0:	681b      	ldr	r3, [r3, #0]
 80114a2:	f003 0302 	and.w	r3, r3, #2
 80114a6:	2b00      	cmp	r3, #0
 80114a8:	f000 80ca 	beq.w	8011640 <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80114ac:	4b51      	ldr	r3, [pc, #324]	@ (80115f4 <HAL_RCC_OscConfig+0x288>)
 80114ae:	691b      	ldr	r3, [r3, #16]
 80114b0:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80114b4:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80114b6:	4b4f      	ldr	r3, [pc, #316]	@ (80115f4 <HAL_RCC_OscConfig+0x288>)
 80114b8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80114ba:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 80114bc:	6a3b      	ldr	r3, [r7, #32]
 80114be:	2b00      	cmp	r3, #0
 80114c0:	d007      	beq.n	80114d2 <HAL_RCC_OscConfig+0x166>
 80114c2:	6a3b      	ldr	r3, [r7, #32]
 80114c4:	2b18      	cmp	r3, #24
 80114c6:	d156      	bne.n	8011576 <HAL_RCC_OscConfig+0x20a>
 80114c8:	69fb      	ldr	r3, [r7, #28]
 80114ca:	f003 0303 	and.w	r3, r3, #3
 80114ce:	2b00      	cmp	r3, #0
 80114d0:	d151      	bne.n	8011576 <HAL_RCC_OscConfig+0x20a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80114d2:	4b48      	ldr	r3, [pc, #288]	@ (80115f4 <HAL_RCC_OscConfig+0x288>)
 80114d4:	681b      	ldr	r3, [r3, #0]
 80114d6:	f003 0304 	and.w	r3, r3, #4
 80114da:	2b00      	cmp	r3, #0
 80114dc:	d005      	beq.n	80114ea <HAL_RCC_OscConfig+0x17e>
 80114de:	687b      	ldr	r3, [r7, #4]
 80114e0:	68db      	ldr	r3, [r3, #12]
 80114e2:	2b00      	cmp	r3, #0
 80114e4:	d101      	bne.n	80114ea <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 80114e6:	2301      	movs	r3, #1
 80114e8:	e392      	b.n	8011c10 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80114ea:	4b42      	ldr	r3, [pc, #264]	@ (80115f4 <HAL_RCC_OscConfig+0x288>)
 80114ec:	681b      	ldr	r3, [r3, #0]
 80114ee:	f023 0219 	bic.w	r2, r3, #25
 80114f2:	687b      	ldr	r3, [r7, #4]
 80114f4:	68db      	ldr	r3, [r3, #12]
 80114f6:	493f      	ldr	r1, [pc, #252]	@ (80115f4 <HAL_RCC_OscConfig+0x288>)
 80114f8:	4313      	orrs	r3, r2
 80114fa:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80114fc:	f7ff fa2c 	bl	8010958 <HAL_GetTick>
 8011500:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8011502:	e008      	b.n	8011516 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8011504:	f7ff fa28 	bl	8010958 <HAL_GetTick>
 8011508:	4602      	mov	r2, r0
 801150a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801150c:	1ad3      	subs	r3, r2, r3
 801150e:	2b02      	cmp	r3, #2
 8011510:	d901      	bls.n	8011516 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8011512:	2303      	movs	r3, #3
 8011514:	e37c      	b.n	8011c10 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8011516:	4b37      	ldr	r3, [pc, #220]	@ (80115f4 <HAL_RCC_OscConfig+0x288>)
 8011518:	681b      	ldr	r3, [r3, #0]
 801151a:	f003 0304 	and.w	r3, r3, #4
 801151e:	2b00      	cmp	r3, #0
 8011520:	d0f0      	beq.n	8011504 <HAL_RCC_OscConfig+0x198>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8011522:	f7ff fa49 	bl	80109b8 <HAL_GetREVID>
 8011526:	4603      	mov	r3, r0
 8011528:	f241 0203 	movw	r2, #4099	@ 0x1003
 801152c:	4293      	cmp	r3, r2
 801152e:	d817      	bhi.n	8011560 <HAL_RCC_OscConfig+0x1f4>
 8011530:	687b      	ldr	r3, [r7, #4]
 8011532:	691b      	ldr	r3, [r3, #16]
 8011534:	2b40      	cmp	r3, #64	@ 0x40
 8011536:	d108      	bne.n	801154a <HAL_RCC_OscConfig+0x1de>
 8011538:	4b2e      	ldr	r3, [pc, #184]	@ (80115f4 <HAL_RCC_OscConfig+0x288>)
 801153a:	685b      	ldr	r3, [r3, #4]
 801153c:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 8011540:	4a2c      	ldr	r2, [pc, #176]	@ (80115f4 <HAL_RCC_OscConfig+0x288>)
 8011542:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8011546:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8011548:	e07a      	b.n	8011640 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 801154a:	4b2a      	ldr	r3, [pc, #168]	@ (80115f4 <HAL_RCC_OscConfig+0x288>)
 801154c:	685b      	ldr	r3, [r3, #4]
 801154e:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8011552:	687b      	ldr	r3, [r7, #4]
 8011554:	691b      	ldr	r3, [r3, #16]
 8011556:	031b      	lsls	r3, r3, #12
 8011558:	4926      	ldr	r1, [pc, #152]	@ (80115f4 <HAL_RCC_OscConfig+0x288>)
 801155a:	4313      	orrs	r3, r2
 801155c:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 801155e:	e06f      	b.n	8011640 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8011560:	4b24      	ldr	r3, [pc, #144]	@ (80115f4 <HAL_RCC_OscConfig+0x288>)
 8011562:	685b      	ldr	r3, [r3, #4]
 8011564:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8011568:	687b      	ldr	r3, [r7, #4]
 801156a:	691b      	ldr	r3, [r3, #16]
 801156c:	061b      	lsls	r3, r3, #24
 801156e:	4921      	ldr	r1, [pc, #132]	@ (80115f4 <HAL_RCC_OscConfig+0x288>)
 8011570:	4313      	orrs	r3, r2
 8011572:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8011574:	e064      	b.n	8011640 <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8011576:	687b      	ldr	r3, [r7, #4]
 8011578:	68db      	ldr	r3, [r3, #12]
 801157a:	2b00      	cmp	r3, #0
 801157c:	d047      	beq.n	801160e <HAL_RCC_OscConfig+0x2a2>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 801157e:	4b1d      	ldr	r3, [pc, #116]	@ (80115f4 <HAL_RCC_OscConfig+0x288>)
 8011580:	681b      	ldr	r3, [r3, #0]
 8011582:	f023 0219 	bic.w	r2, r3, #25
 8011586:	687b      	ldr	r3, [r7, #4]
 8011588:	68db      	ldr	r3, [r3, #12]
 801158a:	491a      	ldr	r1, [pc, #104]	@ (80115f4 <HAL_RCC_OscConfig+0x288>)
 801158c:	4313      	orrs	r3, r2
 801158e:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8011590:	f7ff f9e2 	bl	8010958 <HAL_GetTick>
 8011594:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8011596:	e008      	b.n	80115aa <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8011598:	f7ff f9de 	bl	8010958 <HAL_GetTick>
 801159c:	4602      	mov	r2, r0
 801159e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80115a0:	1ad3      	subs	r3, r2, r3
 80115a2:	2b02      	cmp	r3, #2
 80115a4:	d901      	bls.n	80115aa <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 80115a6:	2303      	movs	r3, #3
 80115a8:	e332      	b.n	8011c10 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80115aa:	4b12      	ldr	r3, [pc, #72]	@ (80115f4 <HAL_RCC_OscConfig+0x288>)
 80115ac:	681b      	ldr	r3, [r3, #0]
 80115ae:	f003 0304 	and.w	r3, r3, #4
 80115b2:	2b00      	cmp	r3, #0
 80115b4:	d0f0      	beq.n	8011598 <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80115b6:	f7ff f9ff 	bl	80109b8 <HAL_GetREVID>
 80115ba:	4603      	mov	r3, r0
 80115bc:	f241 0203 	movw	r2, #4099	@ 0x1003
 80115c0:	4293      	cmp	r3, r2
 80115c2:	d819      	bhi.n	80115f8 <HAL_RCC_OscConfig+0x28c>
 80115c4:	687b      	ldr	r3, [r7, #4]
 80115c6:	691b      	ldr	r3, [r3, #16]
 80115c8:	2b40      	cmp	r3, #64	@ 0x40
 80115ca:	d108      	bne.n	80115de <HAL_RCC_OscConfig+0x272>
 80115cc:	4b09      	ldr	r3, [pc, #36]	@ (80115f4 <HAL_RCC_OscConfig+0x288>)
 80115ce:	685b      	ldr	r3, [r3, #4]
 80115d0:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 80115d4:	4a07      	ldr	r2, [pc, #28]	@ (80115f4 <HAL_RCC_OscConfig+0x288>)
 80115d6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80115da:	6053      	str	r3, [r2, #4]
 80115dc:	e030      	b.n	8011640 <HAL_RCC_OscConfig+0x2d4>
 80115de:	4b05      	ldr	r3, [pc, #20]	@ (80115f4 <HAL_RCC_OscConfig+0x288>)
 80115e0:	685b      	ldr	r3, [r3, #4]
 80115e2:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 80115e6:	687b      	ldr	r3, [r7, #4]
 80115e8:	691b      	ldr	r3, [r3, #16]
 80115ea:	031b      	lsls	r3, r3, #12
 80115ec:	4901      	ldr	r1, [pc, #4]	@ (80115f4 <HAL_RCC_OscConfig+0x288>)
 80115ee:	4313      	orrs	r3, r2
 80115f0:	604b      	str	r3, [r1, #4]
 80115f2:	e025      	b.n	8011640 <HAL_RCC_OscConfig+0x2d4>
 80115f4:	58024400 	.word	0x58024400
 80115f8:	4b9a      	ldr	r3, [pc, #616]	@ (8011864 <HAL_RCC_OscConfig+0x4f8>)
 80115fa:	685b      	ldr	r3, [r3, #4]
 80115fc:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8011600:	687b      	ldr	r3, [r7, #4]
 8011602:	691b      	ldr	r3, [r3, #16]
 8011604:	061b      	lsls	r3, r3, #24
 8011606:	4997      	ldr	r1, [pc, #604]	@ (8011864 <HAL_RCC_OscConfig+0x4f8>)
 8011608:	4313      	orrs	r3, r2
 801160a:	604b      	str	r3, [r1, #4]
 801160c:	e018      	b.n	8011640 <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 801160e:	4b95      	ldr	r3, [pc, #596]	@ (8011864 <HAL_RCC_OscConfig+0x4f8>)
 8011610:	681b      	ldr	r3, [r3, #0]
 8011612:	4a94      	ldr	r2, [pc, #592]	@ (8011864 <HAL_RCC_OscConfig+0x4f8>)
 8011614:	f023 0301 	bic.w	r3, r3, #1
 8011618:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 801161a:	f7ff f99d 	bl	8010958 <HAL_GetTick>
 801161e:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8011620:	e008      	b.n	8011634 <HAL_RCC_OscConfig+0x2c8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8011622:	f7ff f999 	bl	8010958 <HAL_GetTick>
 8011626:	4602      	mov	r2, r0
 8011628:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801162a:	1ad3      	subs	r3, r2, r3
 801162c:	2b02      	cmp	r3, #2
 801162e:	d901      	bls.n	8011634 <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 8011630:	2303      	movs	r3, #3
 8011632:	e2ed      	b.n	8011c10 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8011634:	4b8b      	ldr	r3, [pc, #556]	@ (8011864 <HAL_RCC_OscConfig+0x4f8>)
 8011636:	681b      	ldr	r3, [r3, #0]
 8011638:	f003 0304 	and.w	r3, r3, #4
 801163c:	2b00      	cmp	r3, #0
 801163e:	d1f0      	bne.n	8011622 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8011640:	687b      	ldr	r3, [r7, #4]
 8011642:	681b      	ldr	r3, [r3, #0]
 8011644:	f003 0310 	and.w	r3, r3, #16
 8011648:	2b00      	cmp	r3, #0
 801164a:	f000 80a9 	beq.w	80117a0 <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 801164e:	4b85      	ldr	r3, [pc, #532]	@ (8011864 <HAL_RCC_OscConfig+0x4f8>)
 8011650:	691b      	ldr	r3, [r3, #16]
 8011652:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8011656:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8011658:	4b82      	ldr	r3, [pc, #520]	@ (8011864 <HAL_RCC_OscConfig+0x4f8>)
 801165a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801165c:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 801165e:	69bb      	ldr	r3, [r7, #24]
 8011660:	2b08      	cmp	r3, #8
 8011662:	d007      	beq.n	8011674 <HAL_RCC_OscConfig+0x308>
 8011664:	69bb      	ldr	r3, [r7, #24]
 8011666:	2b18      	cmp	r3, #24
 8011668:	d13a      	bne.n	80116e0 <HAL_RCC_OscConfig+0x374>
 801166a:	697b      	ldr	r3, [r7, #20]
 801166c:	f003 0303 	and.w	r3, r3, #3
 8011670:	2b01      	cmp	r3, #1
 8011672:	d135      	bne.n	80116e0 <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8011674:	4b7b      	ldr	r3, [pc, #492]	@ (8011864 <HAL_RCC_OscConfig+0x4f8>)
 8011676:	681b      	ldr	r3, [r3, #0]
 8011678:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 801167c:	2b00      	cmp	r3, #0
 801167e:	d005      	beq.n	801168c <HAL_RCC_OscConfig+0x320>
 8011680:	687b      	ldr	r3, [r7, #4]
 8011682:	69db      	ldr	r3, [r3, #28]
 8011684:	2b80      	cmp	r3, #128	@ 0x80
 8011686:	d001      	beq.n	801168c <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 8011688:	2301      	movs	r3, #1
 801168a:	e2c1      	b.n	8011c10 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 801168c:	f7ff f994 	bl	80109b8 <HAL_GetREVID>
 8011690:	4603      	mov	r3, r0
 8011692:	f241 0203 	movw	r2, #4099	@ 0x1003
 8011696:	4293      	cmp	r3, r2
 8011698:	d817      	bhi.n	80116ca <HAL_RCC_OscConfig+0x35e>
 801169a:	687b      	ldr	r3, [r7, #4]
 801169c:	6a1b      	ldr	r3, [r3, #32]
 801169e:	2b20      	cmp	r3, #32
 80116a0:	d108      	bne.n	80116b4 <HAL_RCC_OscConfig+0x348>
 80116a2:	4b70      	ldr	r3, [pc, #448]	@ (8011864 <HAL_RCC_OscConfig+0x4f8>)
 80116a4:	685b      	ldr	r3, [r3, #4]
 80116a6:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 80116aa:	4a6e      	ldr	r2, [pc, #440]	@ (8011864 <HAL_RCC_OscConfig+0x4f8>)
 80116ac:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80116b0:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80116b2:	e075      	b.n	80117a0 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80116b4:	4b6b      	ldr	r3, [pc, #428]	@ (8011864 <HAL_RCC_OscConfig+0x4f8>)
 80116b6:	685b      	ldr	r3, [r3, #4]
 80116b8:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 80116bc:	687b      	ldr	r3, [r7, #4]
 80116be:	6a1b      	ldr	r3, [r3, #32]
 80116c0:	069b      	lsls	r3, r3, #26
 80116c2:	4968      	ldr	r1, [pc, #416]	@ (8011864 <HAL_RCC_OscConfig+0x4f8>)
 80116c4:	4313      	orrs	r3, r2
 80116c6:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80116c8:	e06a      	b.n	80117a0 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80116ca:	4b66      	ldr	r3, [pc, #408]	@ (8011864 <HAL_RCC_OscConfig+0x4f8>)
 80116cc:	68db      	ldr	r3, [r3, #12]
 80116ce:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 80116d2:	687b      	ldr	r3, [r7, #4]
 80116d4:	6a1b      	ldr	r3, [r3, #32]
 80116d6:	061b      	lsls	r3, r3, #24
 80116d8:	4962      	ldr	r1, [pc, #392]	@ (8011864 <HAL_RCC_OscConfig+0x4f8>)
 80116da:	4313      	orrs	r3, r2
 80116dc:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80116de:	e05f      	b.n	80117a0 <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 80116e0:	687b      	ldr	r3, [r7, #4]
 80116e2:	69db      	ldr	r3, [r3, #28]
 80116e4:	2b00      	cmp	r3, #0
 80116e6:	d042      	beq.n	801176e <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 80116e8:	4b5e      	ldr	r3, [pc, #376]	@ (8011864 <HAL_RCC_OscConfig+0x4f8>)
 80116ea:	681b      	ldr	r3, [r3, #0]
 80116ec:	4a5d      	ldr	r2, [pc, #372]	@ (8011864 <HAL_RCC_OscConfig+0x4f8>)
 80116ee:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80116f2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80116f4:	f7ff f930 	bl	8010958 <HAL_GetTick>
 80116f8:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80116fa:	e008      	b.n	801170e <HAL_RCC_OscConfig+0x3a2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 80116fc:	f7ff f92c 	bl	8010958 <HAL_GetTick>
 8011700:	4602      	mov	r2, r0
 8011702:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011704:	1ad3      	subs	r3, r2, r3
 8011706:	2b02      	cmp	r3, #2
 8011708:	d901      	bls.n	801170e <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 801170a:	2303      	movs	r3, #3
 801170c:	e280      	b.n	8011c10 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 801170e:	4b55      	ldr	r3, [pc, #340]	@ (8011864 <HAL_RCC_OscConfig+0x4f8>)
 8011710:	681b      	ldr	r3, [r3, #0]
 8011712:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8011716:	2b00      	cmp	r3, #0
 8011718:	d0f0      	beq.n	80116fc <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 801171a:	f7ff f94d 	bl	80109b8 <HAL_GetREVID>
 801171e:	4603      	mov	r3, r0
 8011720:	f241 0203 	movw	r2, #4099	@ 0x1003
 8011724:	4293      	cmp	r3, r2
 8011726:	d817      	bhi.n	8011758 <HAL_RCC_OscConfig+0x3ec>
 8011728:	687b      	ldr	r3, [r7, #4]
 801172a:	6a1b      	ldr	r3, [r3, #32]
 801172c:	2b20      	cmp	r3, #32
 801172e:	d108      	bne.n	8011742 <HAL_RCC_OscConfig+0x3d6>
 8011730:	4b4c      	ldr	r3, [pc, #304]	@ (8011864 <HAL_RCC_OscConfig+0x4f8>)
 8011732:	685b      	ldr	r3, [r3, #4]
 8011734:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 8011738:	4a4a      	ldr	r2, [pc, #296]	@ (8011864 <HAL_RCC_OscConfig+0x4f8>)
 801173a:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 801173e:	6053      	str	r3, [r2, #4]
 8011740:	e02e      	b.n	80117a0 <HAL_RCC_OscConfig+0x434>
 8011742:	4b48      	ldr	r3, [pc, #288]	@ (8011864 <HAL_RCC_OscConfig+0x4f8>)
 8011744:	685b      	ldr	r3, [r3, #4]
 8011746:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 801174a:	687b      	ldr	r3, [r7, #4]
 801174c:	6a1b      	ldr	r3, [r3, #32]
 801174e:	069b      	lsls	r3, r3, #26
 8011750:	4944      	ldr	r1, [pc, #272]	@ (8011864 <HAL_RCC_OscConfig+0x4f8>)
 8011752:	4313      	orrs	r3, r2
 8011754:	604b      	str	r3, [r1, #4]
 8011756:	e023      	b.n	80117a0 <HAL_RCC_OscConfig+0x434>
 8011758:	4b42      	ldr	r3, [pc, #264]	@ (8011864 <HAL_RCC_OscConfig+0x4f8>)
 801175a:	68db      	ldr	r3, [r3, #12]
 801175c:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 8011760:	687b      	ldr	r3, [r7, #4]
 8011762:	6a1b      	ldr	r3, [r3, #32]
 8011764:	061b      	lsls	r3, r3, #24
 8011766:	493f      	ldr	r1, [pc, #252]	@ (8011864 <HAL_RCC_OscConfig+0x4f8>)
 8011768:	4313      	orrs	r3, r2
 801176a:	60cb      	str	r3, [r1, #12]
 801176c:	e018      	b.n	80117a0 <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 801176e:	4b3d      	ldr	r3, [pc, #244]	@ (8011864 <HAL_RCC_OscConfig+0x4f8>)
 8011770:	681b      	ldr	r3, [r3, #0]
 8011772:	4a3c      	ldr	r2, [pc, #240]	@ (8011864 <HAL_RCC_OscConfig+0x4f8>)
 8011774:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8011778:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 801177a:	f7ff f8ed 	bl	8010958 <HAL_GetTick>
 801177e:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8011780:	e008      	b.n	8011794 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8011782:	f7ff f8e9 	bl	8010958 <HAL_GetTick>
 8011786:	4602      	mov	r2, r0
 8011788:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801178a:	1ad3      	subs	r3, r2, r3
 801178c:	2b02      	cmp	r3, #2
 801178e:	d901      	bls.n	8011794 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8011790:	2303      	movs	r3, #3
 8011792:	e23d      	b.n	8011c10 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8011794:	4b33      	ldr	r3, [pc, #204]	@ (8011864 <HAL_RCC_OscConfig+0x4f8>)
 8011796:	681b      	ldr	r3, [r3, #0]
 8011798:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 801179c:	2b00      	cmp	r3, #0
 801179e:	d1f0      	bne.n	8011782 <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80117a0:	687b      	ldr	r3, [r7, #4]
 80117a2:	681b      	ldr	r3, [r3, #0]
 80117a4:	f003 0308 	and.w	r3, r3, #8
 80117a8:	2b00      	cmp	r3, #0
 80117aa:	d036      	beq.n	801181a <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80117ac:	687b      	ldr	r3, [r7, #4]
 80117ae:	695b      	ldr	r3, [r3, #20]
 80117b0:	2b00      	cmp	r3, #0
 80117b2:	d019      	beq.n	80117e8 <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80117b4:	4b2b      	ldr	r3, [pc, #172]	@ (8011864 <HAL_RCC_OscConfig+0x4f8>)
 80117b6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80117b8:	4a2a      	ldr	r2, [pc, #168]	@ (8011864 <HAL_RCC_OscConfig+0x4f8>)
 80117ba:	f043 0301 	orr.w	r3, r3, #1
 80117be:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80117c0:	f7ff f8ca 	bl	8010958 <HAL_GetTick>
 80117c4:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80117c6:	e008      	b.n	80117da <HAL_RCC_OscConfig+0x46e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80117c8:	f7ff f8c6 	bl	8010958 <HAL_GetTick>
 80117cc:	4602      	mov	r2, r0
 80117ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80117d0:	1ad3      	subs	r3, r2, r3
 80117d2:	2b02      	cmp	r3, #2
 80117d4:	d901      	bls.n	80117da <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 80117d6:	2303      	movs	r3, #3
 80117d8:	e21a      	b.n	8011c10 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80117da:	4b22      	ldr	r3, [pc, #136]	@ (8011864 <HAL_RCC_OscConfig+0x4f8>)
 80117dc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80117de:	f003 0302 	and.w	r3, r3, #2
 80117e2:	2b00      	cmp	r3, #0
 80117e4:	d0f0      	beq.n	80117c8 <HAL_RCC_OscConfig+0x45c>
 80117e6:	e018      	b.n	801181a <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80117e8:	4b1e      	ldr	r3, [pc, #120]	@ (8011864 <HAL_RCC_OscConfig+0x4f8>)
 80117ea:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80117ec:	4a1d      	ldr	r2, [pc, #116]	@ (8011864 <HAL_RCC_OscConfig+0x4f8>)
 80117ee:	f023 0301 	bic.w	r3, r3, #1
 80117f2:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80117f4:	f7ff f8b0 	bl	8010958 <HAL_GetTick>
 80117f8:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80117fa:	e008      	b.n	801180e <HAL_RCC_OscConfig+0x4a2>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80117fc:	f7ff f8ac 	bl	8010958 <HAL_GetTick>
 8011800:	4602      	mov	r2, r0
 8011802:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011804:	1ad3      	subs	r3, r2, r3
 8011806:	2b02      	cmp	r3, #2
 8011808:	d901      	bls.n	801180e <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 801180a:	2303      	movs	r3, #3
 801180c:	e200      	b.n	8011c10 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 801180e:	4b15      	ldr	r3, [pc, #84]	@ (8011864 <HAL_RCC_OscConfig+0x4f8>)
 8011810:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8011812:	f003 0302 	and.w	r3, r3, #2
 8011816:	2b00      	cmp	r3, #0
 8011818:	d1f0      	bne.n	80117fc <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 801181a:	687b      	ldr	r3, [r7, #4]
 801181c:	681b      	ldr	r3, [r3, #0]
 801181e:	f003 0320 	and.w	r3, r3, #32
 8011822:	2b00      	cmp	r3, #0
 8011824:	d039      	beq.n	801189a <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 8011826:	687b      	ldr	r3, [r7, #4]
 8011828:	699b      	ldr	r3, [r3, #24]
 801182a:	2b00      	cmp	r3, #0
 801182c:	d01c      	beq.n	8011868 <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 801182e:	4b0d      	ldr	r3, [pc, #52]	@ (8011864 <HAL_RCC_OscConfig+0x4f8>)
 8011830:	681b      	ldr	r3, [r3, #0]
 8011832:	4a0c      	ldr	r2, [pc, #48]	@ (8011864 <HAL_RCC_OscConfig+0x4f8>)
 8011834:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8011838:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 801183a:	f7ff f88d 	bl	8010958 <HAL_GetTick>
 801183e:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8011840:	e008      	b.n	8011854 <HAL_RCC_OscConfig+0x4e8>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8011842:	f7ff f889 	bl	8010958 <HAL_GetTick>
 8011846:	4602      	mov	r2, r0
 8011848:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801184a:	1ad3      	subs	r3, r2, r3
 801184c:	2b02      	cmp	r3, #2
 801184e:	d901      	bls.n	8011854 <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 8011850:	2303      	movs	r3, #3
 8011852:	e1dd      	b.n	8011c10 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8011854:	4b03      	ldr	r3, [pc, #12]	@ (8011864 <HAL_RCC_OscConfig+0x4f8>)
 8011856:	681b      	ldr	r3, [r3, #0]
 8011858:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 801185c:	2b00      	cmp	r3, #0
 801185e:	d0f0      	beq.n	8011842 <HAL_RCC_OscConfig+0x4d6>
 8011860:	e01b      	b.n	801189a <HAL_RCC_OscConfig+0x52e>
 8011862:	bf00      	nop
 8011864:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8011868:	4b9b      	ldr	r3, [pc, #620]	@ (8011ad8 <HAL_RCC_OscConfig+0x76c>)
 801186a:	681b      	ldr	r3, [r3, #0]
 801186c:	4a9a      	ldr	r2, [pc, #616]	@ (8011ad8 <HAL_RCC_OscConfig+0x76c>)
 801186e:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8011872:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8011874:	f7ff f870 	bl	8010958 <HAL_GetTick>
 8011878:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 801187a:	e008      	b.n	801188e <HAL_RCC_OscConfig+0x522>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 801187c:	f7ff f86c 	bl	8010958 <HAL_GetTick>
 8011880:	4602      	mov	r2, r0
 8011882:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011884:	1ad3      	subs	r3, r2, r3
 8011886:	2b02      	cmp	r3, #2
 8011888:	d901      	bls.n	801188e <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 801188a:	2303      	movs	r3, #3
 801188c:	e1c0      	b.n	8011c10 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 801188e:	4b92      	ldr	r3, [pc, #584]	@ (8011ad8 <HAL_RCC_OscConfig+0x76c>)
 8011890:	681b      	ldr	r3, [r3, #0]
 8011892:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8011896:	2b00      	cmp	r3, #0
 8011898:	d1f0      	bne.n	801187c <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 801189a:	687b      	ldr	r3, [r7, #4]
 801189c:	681b      	ldr	r3, [r3, #0]
 801189e:	f003 0304 	and.w	r3, r3, #4
 80118a2:	2b00      	cmp	r3, #0
 80118a4:	f000 8081 	beq.w	80119aa <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 80118a8:	4b8c      	ldr	r3, [pc, #560]	@ (8011adc <HAL_RCC_OscConfig+0x770>)
 80118aa:	681b      	ldr	r3, [r3, #0]
 80118ac:	4a8b      	ldr	r2, [pc, #556]	@ (8011adc <HAL_RCC_OscConfig+0x770>)
 80118ae:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80118b2:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80118b4:	f7ff f850 	bl	8010958 <HAL_GetTick>
 80118b8:	6278      	str	r0, [r7, #36]	@ 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80118ba:	e008      	b.n	80118ce <HAL_RCC_OscConfig+0x562>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80118bc:	f7ff f84c 	bl	8010958 <HAL_GetTick>
 80118c0:	4602      	mov	r2, r0
 80118c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80118c4:	1ad3      	subs	r3, r2, r3
 80118c6:	2b64      	cmp	r3, #100	@ 0x64
 80118c8:	d901      	bls.n	80118ce <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 80118ca:	2303      	movs	r3, #3
 80118cc:	e1a0      	b.n	8011c10 <HAL_RCC_OscConfig+0x8a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80118ce:	4b83      	ldr	r3, [pc, #524]	@ (8011adc <HAL_RCC_OscConfig+0x770>)
 80118d0:	681b      	ldr	r3, [r3, #0]
 80118d2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80118d6:	2b00      	cmp	r3, #0
 80118d8:	d0f0      	beq.n	80118bc <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80118da:	687b      	ldr	r3, [r7, #4]
 80118dc:	689b      	ldr	r3, [r3, #8]
 80118de:	2b01      	cmp	r3, #1
 80118e0:	d106      	bne.n	80118f0 <HAL_RCC_OscConfig+0x584>
 80118e2:	4b7d      	ldr	r3, [pc, #500]	@ (8011ad8 <HAL_RCC_OscConfig+0x76c>)
 80118e4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80118e6:	4a7c      	ldr	r2, [pc, #496]	@ (8011ad8 <HAL_RCC_OscConfig+0x76c>)
 80118e8:	f043 0301 	orr.w	r3, r3, #1
 80118ec:	6713      	str	r3, [r2, #112]	@ 0x70
 80118ee:	e02d      	b.n	801194c <HAL_RCC_OscConfig+0x5e0>
 80118f0:	687b      	ldr	r3, [r7, #4]
 80118f2:	689b      	ldr	r3, [r3, #8]
 80118f4:	2b00      	cmp	r3, #0
 80118f6:	d10c      	bne.n	8011912 <HAL_RCC_OscConfig+0x5a6>
 80118f8:	4b77      	ldr	r3, [pc, #476]	@ (8011ad8 <HAL_RCC_OscConfig+0x76c>)
 80118fa:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80118fc:	4a76      	ldr	r2, [pc, #472]	@ (8011ad8 <HAL_RCC_OscConfig+0x76c>)
 80118fe:	f023 0301 	bic.w	r3, r3, #1
 8011902:	6713      	str	r3, [r2, #112]	@ 0x70
 8011904:	4b74      	ldr	r3, [pc, #464]	@ (8011ad8 <HAL_RCC_OscConfig+0x76c>)
 8011906:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8011908:	4a73      	ldr	r2, [pc, #460]	@ (8011ad8 <HAL_RCC_OscConfig+0x76c>)
 801190a:	f023 0304 	bic.w	r3, r3, #4
 801190e:	6713      	str	r3, [r2, #112]	@ 0x70
 8011910:	e01c      	b.n	801194c <HAL_RCC_OscConfig+0x5e0>
 8011912:	687b      	ldr	r3, [r7, #4]
 8011914:	689b      	ldr	r3, [r3, #8]
 8011916:	2b05      	cmp	r3, #5
 8011918:	d10c      	bne.n	8011934 <HAL_RCC_OscConfig+0x5c8>
 801191a:	4b6f      	ldr	r3, [pc, #444]	@ (8011ad8 <HAL_RCC_OscConfig+0x76c>)
 801191c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 801191e:	4a6e      	ldr	r2, [pc, #440]	@ (8011ad8 <HAL_RCC_OscConfig+0x76c>)
 8011920:	f043 0304 	orr.w	r3, r3, #4
 8011924:	6713      	str	r3, [r2, #112]	@ 0x70
 8011926:	4b6c      	ldr	r3, [pc, #432]	@ (8011ad8 <HAL_RCC_OscConfig+0x76c>)
 8011928:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 801192a:	4a6b      	ldr	r2, [pc, #428]	@ (8011ad8 <HAL_RCC_OscConfig+0x76c>)
 801192c:	f043 0301 	orr.w	r3, r3, #1
 8011930:	6713      	str	r3, [r2, #112]	@ 0x70
 8011932:	e00b      	b.n	801194c <HAL_RCC_OscConfig+0x5e0>
 8011934:	4b68      	ldr	r3, [pc, #416]	@ (8011ad8 <HAL_RCC_OscConfig+0x76c>)
 8011936:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8011938:	4a67      	ldr	r2, [pc, #412]	@ (8011ad8 <HAL_RCC_OscConfig+0x76c>)
 801193a:	f023 0301 	bic.w	r3, r3, #1
 801193e:	6713      	str	r3, [r2, #112]	@ 0x70
 8011940:	4b65      	ldr	r3, [pc, #404]	@ (8011ad8 <HAL_RCC_OscConfig+0x76c>)
 8011942:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8011944:	4a64      	ldr	r2, [pc, #400]	@ (8011ad8 <HAL_RCC_OscConfig+0x76c>)
 8011946:	f023 0304 	bic.w	r3, r3, #4
 801194a:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 801194c:	687b      	ldr	r3, [r7, #4]
 801194e:	689b      	ldr	r3, [r3, #8]
 8011950:	2b00      	cmp	r3, #0
 8011952:	d015      	beq.n	8011980 <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8011954:	f7ff f800 	bl	8010958 <HAL_GetTick>
 8011958:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 801195a:	e00a      	b.n	8011972 <HAL_RCC_OscConfig+0x606>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 801195c:	f7fe fffc 	bl	8010958 <HAL_GetTick>
 8011960:	4602      	mov	r2, r0
 8011962:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011964:	1ad3      	subs	r3, r2, r3
 8011966:	f241 3288 	movw	r2, #5000	@ 0x1388
 801196a:	4293      	cmp	r3, r2
 801196c:	d901      	bls.n	8011972 <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 801196e:	2303      	movs	r3, #3
 8011970:	e14e      	b.n	8011c10 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8011972:	4b59      	ldr	r3, [pc, #356]	@ (8011ad8 <HAL_RCC_OscConfig+0x76c>)
 8011974:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8011976:	f003 0302 	and.w	r3, r3, #2
 801197a:	2b00      	cmp	r3, #0
 801197c:	d0ee      	beq.n	801195c <HAL_RCC_OscConfig+0x5f0>
 801197e:	e014      	b.n	80119aa <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8011980:	f7fe ffea 	bl	8010958 <HAL_GetTick>
 8011984:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8011986:	e00a      	b.n	801199e <HAL_RCC_OscConfig+0x632>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8011988:	f7fe ffe6 	bl	8010958 <HAL_GetTick>
 801198c:	4602      	mov	r2, r0
 801198e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011990:	1ad3      	subs	r3, r2, r3
 8011992:	f241 3288 	movw	r2, #5000	@ 0x1388
 8011996:	4293      	cmp	r3, r2
 8011998:	d901      	bls.n	801199e <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 801199a:	2303      	movs	r3, #3
 801199c:	e138      	b.n	8011c10 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 801199e:	4b4e      	ldr	r3, [pc, #312]	@ (8011ad8 <HAL_RCC_OscConfig+0x76c>)
 80119a0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80119a2:	f003 0302 	and.w	r3, r3, #2
 80119a6:	2b00      	cmp	r3, #0
 80119a8:	d1ee      	bne.n	8011988 <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80119aa:	687b      	ldr	r3, [r7, #4]
 80119ac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80119ae:	2b00      	cmp	r3, #0
 80119b0:	f000 812d 	beq.w	8011c0e <HAL_RCC_OscConfig+0x8a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 80119b4:	4b48      	ldr	r3, [pc, #288]	@ (8011ad8 <HAL_RCC_OscConfig+0x76c>)
 80119b6:	691b      	ldr	r3, [r3, #16]
 80119b8:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80119bc:	2b18      	cmp	r3, #24
 80119be:	f000 80bd 	beq.w	8011b3c <HAL_RCC_OscConfig+0x7d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80119c2:	687b      	ldr	r3, [r7, #4]
 80119c4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80119c6:	2b02      	cmp	r3, #2
 80119c8:	f040 809e 	bne.w	8011b08 <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80119cc:	4b42      	ldr	r3, [pc, #264]	@ (8011ad8 <HAL_RCC_OscConfig+0x76c>)
 80119ce:	681b      	ldr	r3, [r3, #0]
 80119d0:	4a41      	ldr	r2, [pc, #260]	@ (8011ad8 <HAL_RCC_OscConfig+0x76c>)
 80119d2:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80119d6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80119d8:	f7fe ffbe 	bl	8010958 <HAL_GetTick>
 80119dc:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80119de:	e008      	b.n	80119f2 <HAL_RCC_OscConfig+0x686>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80119e0:	f7fe ffba 	bl	8010958 <HAL_GetTick>
 80119e4:	4602      	mov	r2, r0
 80119e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80119e8:	1ad3      	subs	r3, r2, r3
 80119ea:	2b02      	cmp	r3, #2
 80119ec:	d901      	bls.n	80119f2 <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 80119ee:	2303      	movs	r3, #3
 80119f0:	e10e      	b.n	8011c10 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80119f2:	4b39      	ldr	r3, [pc, #228]	@ (8011ad8 <HAL_RCC_OscConfig+0x76c>)
 80119f4:	681b      	ldr	r3, [r3, #0]
 80119f6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80119fa:	2b00      	cmp	r3, #0
 80119fc:	d1f0      	bne.n	80119e0 <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80119fe:	4b36      	ldr	r3, [pc, #216]	@ (8011ad8 <HAL_RCC_OscConfig+0x76c>)
 8011a00:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8011a02:	4b37      	ldr	r3, [pc, #220]	@ (8011ae0 <HAL_RCC_OscConfig+0x774>)
 8011a04:	4013      	ands	r3, r2
 8011a06:	687a      	ldr	r2, [r7, #4]
 8011a08:	6a91      	ldr	r1, [r2, #40]	@ 0x28
 8011a0a:	687a      	ldr	r2, [r7, #4]
 8011a0c:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8011a0e:	0112      	lsls	r2, r2, #4
 8011a10:	430a      	orrs	r2, r1
 8011a12:	4931      	ldr	r1, [pc, #196]	@ (8011ad8 <HAL_RCC_OscConfig+0x76c>)
 8011a14:	4313      	orrs	r3, r2
 8011a16:	628b      	str	r3, [r1, #40]	@ 0x28
 8011a18:	687b      	ldr	r3, [r7, #4]
 8011a1a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8011a1c:	3b01      	subs	r3, #1
 8011a1e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8011a22:	687b      	ldr	r3, [r7, #4]
 8011a24:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8011a26:	3b01      	subs	r3, #1
 8011a28:	025b      	lsls	r3, r3, #9
 8011a2a:	b29b      	uxth	r3, r3
 8011a2c:	431a      	orrs	r2, r3
 8011a2e:	687b      	ldr	r3, [r7, #4]
 8011a30:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8011a32:	3b01      	subs	r3, #1
 8011a34:	041b      	lsls	r3, r3, #16
 8011a36:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8011a3a:	431a      	orrs	r2, r3
 8011a3c:	687b      	ldr	r3, [r7, #4]
 8011a3e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8011a40:	3b01      	subs	r3, #1
 8011a42:	061b      	lsls	r3, r3, #24
 8011a44:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8011a48:	4923      	ldr	r1, [pc, #140]	@ (8011ad8 <HAL_RCC_OscConfig+0x76c>)
 8011a4a:	4313      	orrs	r3, r2
 8011a4c:	630b      	str	r3, [r1, #48]	@ 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 8011a4e:	4b22      	ldr	r3, [pc, #136]	@ (8011ad8 <HAL_RCC_OscConfig+0x76c>)
 8011a50:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8011a52:	4a21      	ldr	r2, [pc, #132]	@ (8011ad8 <HAL_RCC_OscConfig+0x76c>)
 8011a54:	f023 0301 	bic.w	r3, r3, #1
 8011a58:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8011a5a:	4b1f      	ldr	r3, [pc, #124]	@ (8011ad8 <HAL_RCC_OscConfig+0x76c>)
 8011a5c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8011a5e:	4b21      	ldr	r3, [pc, #132]	@ (8011ae4 <HAL_RCC_OscConfig+0x778>)
 8011a60:	4013      	ands	r3, r2
 8011a62:	687a      	ldr	r2, [r7, #4]
 8011a64:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8011a66:	00d2      	lsls	r2, r2, #3
 8011a68:	491b      	ldr	r1, [pc, #108]	@ (8011ad8 <HAL_RCC_OscConfig+0x76c>)
 8011a6a:	4313      	orrs	r3, r2
 8011a6c:	634b      	str	r3, [r1, #52]	@ 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8011a6e:	4b1a      	ldr	r3, [pc, #104]	@ (8011ad8 <HAL_RCC_OscConfig+0x76c>)
 8011a70:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8011a72:	f023 020c 	bic.w	r2, r3, #12
 8011a76:	687b      	ldr	r3, [r7, #4]
 8011a78:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8011a7a:	4917      	ldr	r1, [pc, #92]	@ (8011ad8 <HAL_RCC_OscConfig+0x76c>)
 8011a7c:	4313      	orrs	r3, r2
 8011a7e:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8011a80:	4b15      	ldr	r3, [pc, #84]	@ (8011ad8 <HAL_RCC_OscConfig+0x76c>)
 8011a82:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8011a84:	f023 0202 	bic.w	r2, r3, #2
 8011a88:	687b      	ldr	r3, [r7, #4]
 8011a8a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8011a8c:	4912      	ldr	r1, [pc, #72]	@ (8011ad8 <HAL_RCC_OscConfig+0x76c>)
 8011a8e:	4313      	orrs	r3, r2
 8011a90:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8011a92:	4b11      	ldr	r3, [pc, #68]	@ (8011ad8 <HAL_RCC_OscConfig+0x76c>)
 8011a94:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8011a96:	4a10      	ldr	r2, [pc, #64]	@ (8011ad8 <HAL_RCC_OscConfig+0x76c>)
 8011a98:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8011a9c:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8011a9e:	4b0e      	ldr	r3, [pc, #56]	@ (8011ad8 <HAL_RCC_OscConfig+0x76c>)
 8011aa0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8011aa2:	4a0d      	ldr	r2, [pc, #52]	@ (8011ad8 <HAL_RCC_OscConfig+0x76c>)
 8011aa4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8011aa8:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8011aaa:	4b0b      	ldr	r3, [pc, #44]	@ (8011ad8 <HAL_RCC_OscConfig+0x76c>)
 8011aac:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8011aae:	4a0a      	ldr	r2, [pc, #40]	@ (8011ad8 <HAL_RCC_OscConfig+0x76c>)
 8011ab0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8011ab4:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 8011ab6:	4b08      	ldr	r3, [pc, #32]	@ (8011ad8 <HAL_RCC_OscConfig+0x76c>)
 8011ab8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8011aba:	4a07      	ldr	r2, [pc, #28]	@ (8011ad8 <HAL_RCC_OscConfig+0x76c>)
 8011abc:	f043 0301 	orr.w	r3, r3, #1
 8011ac0:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8011ac2:	4b05      	ldr	r3, [pc, #20]	@ (8011ad8 <HAL_RCC_OscConfig+0x76c>)
 8011ac4:	681b      	ldr	r3, [r3, #0]
 8011ac6:	4a04      	ldr	r2, [pc, #16]	@ (8011ad8 <HAL_RCC_OscConfig+0x76c>)
 8011ac8:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8011acc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8011ace:	f7fe ff43 	bl	8010958 <HAL_GetTick>
 8011ad2:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8011ad4:	e011      	b.n	8011afa <HAL_RCC_OscConfig+0x78e>
 8011ad6:	bf00      	nop
 8011ad8:	58024400 	.word	0x58024400
 8011adc:	58024800 	.word	0x58024800
 8011ae0:	fffffc0c 	.word	0xfffffc0c
 8011ae4:	ffff0007 	.word	0xffff0007
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8011ae8:	f7fe ff36 	bl	8010958 <HAL_GetTick>
 8011aec:	4602      	mov	r2, r0
 8011aee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011af0:	1ad3      	subs	r3, r2, r3
 8011af2:	2b02      	cmp	r3, #2
 8011af4:	d901      	bls.n	8011afa <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 8011af6:	2303      	movs	r3, #3
 8011af8:	e08a      	b.n	8011c10 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8011afa:	4b47      	ldr	r3, [pc, #284]	@ (8011c18 <HAL_RCC_OscConfig+0x8ac>)
 8011afc:	681b      	ldr	r3, [r3, #0]
 8011afe:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8011b02:	2b00      	cmp	r3, #0
 8011b04:	d0f0      	beq.n	8011ae8 <HAL_RCC_OscConfig+0x77c>
 8011b06:	e082      	b.n	8011c0e <HAL_RCC_OscConfig+0x8a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8011b08:	4b43      	ldr	r3, [pc, #268]	@ (8011c18 <HAL_RCC_OscConfig+0x8ac>)
 8011b0a:	681b      	ldr	r3, [r3, #0]
 8011b0c:	4a42      	ldr	r2, [pc, #264]	@ (8011c18 <HAL_RCC_OscConfig+0x8ac>)
 8011b0e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8011b12:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8011b14:	f7fe ff20 	bl	8010958 <HAL_GetTick>
 8011b18:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8011b1a:	e008      	b.n	8011b2e <HAL_RCC_OscConfig+0x7c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8011b1c:	f7fe ff1c 	bl	8010958 <HAL_GetTick>
 8011b20:	4602      	mov	r2, r0
 8011b22:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011b24:	1ad3      	subs	r3, r2, r3
 8011b26:	2b02      	cmp	r3, #2
 8011b28:	d901      	bls.n	8011b2e <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 8011b2a:	2303      	movs	r3, #3
 8011b2c:	e070      	b.n	8011c10 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8011b2e:	4b3a      	ldr	r3, [pc, #232]	@ (8011c18 <HAL_RCC_OscConfig+0x8ac>)
 8011b30:	681b      	ldr	r3, [r3, #0]
 8011b32:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8011b36:	2b00      	cmp	r3, #0
 8011b38:	d1f0      	bne.n	8011b1c <HAL_RCC_OscConfig+0x7b0>
 8011b3a:	e068      	b.n	8011c0e <HAL_RCC_OscConfig+0x8a2>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8011b3c:	4b36      	ldr	r3, [pc, #216]	@ (8011c18 <HAL_RCC_OscConfig+0x8ac>)
 8011b3e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8011b40:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8011b42:	4b35      	ldr	r3, [pc, #212]	@ (8011c18 <HAL_RCC_OscConfig+0x8ac>)
 8011b44:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8011b46:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8011b48:	687b      	ldr	r3, [r7, #4]
 8011b4a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8011b4c:	2b01      	cmp	r3, #1
 8011b4e:	d031      	beq.n	8011bb4 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8011b50:	693b      	ldr	r3, [r7, #16]
 8011b52:	f003 0203 	and.w	r2, r3, #3
 8011b56:	687b      	ldr	r3, [r7, #4]
 8011b58:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8011b5a:	429a      	cmp	r2, r3
 8011b5c:	d12a      	bne.n	8011bb4 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8011b5e:	693b      	ldr	r3, [r7, #16]
 8011b60:	091b      	lsrs	r3, r3, #4
 8011b62:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8011b66:	687b      	ldr	r3, [r7, #4]
 8011b68:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8011b6a:	429a      	cmp	r2, r3
 8011b6c:	d122      	bne.n	8011bb4 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8011b6e:	68fb      	ldr	r3, [r7, #12]
 8011b70:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8011b74:	687b      	ldr	r3, [r7, #4]
 8011b76:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8011b78:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8011b7a:	429a      	cmp	r2, r3
 8011b7c:	d11a      	bne.n	8011bb4 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8011b7e:	68fb      	ldr	r3, [r7, #12]
 8011b80:	0a5b      	lsrs	r3, r3, #9
 8011b82:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8011b86:	687b      	ldr	r3, [r7, #4]
 8011b88:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8011b8a:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8011b8c:	429a      	cmp	r2, r3
 8011b8e:	d111      	bne.n	8011bb4 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8011b90:	68fb      	ldr	r3, [r7, #12]
 8011b92:	0c1b      	lsrs	r3, r3, #16
 8011b94:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8011b98:	687b      	ldr	r3, [r7, #4]
 8011b9a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8011b9c:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8011b9e:	429a      	cmp	r2, r3
 8011ba0:	d108      	bne.n	8011bb4 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8011ba2:	68fb      	ldr	r3, [r7, #12]
 8011ba4:	0e1b      	lsrs	r3, r3, #24
 8011ba6:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8011baa:	687b      	ldr	r3, [r7, #4]
 8011bac:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8011bae:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8011bb0:	429a      	cmp	r2, r3
 8011bb2:	d001      	beq.n	8011bb8 <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 8011bb4:	2301      	movs	r3, #1
 8011bb6:	e02b      	b.n	8011c10 <HAL_RCC_OscConfig+0x8a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 8011bb8:	4b17      	ldr	r3, [pc, #92]	@ (8011c18 <HAL_RCC_OscConfig+0x8ac>)
 8011bba:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8011bbc:	08db      	lsrs	r3, r3, #3
 8011bbe:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8011bc2:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 8011bc4:	687b      	ldr	r3, [r7, #4]
 8011bc6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8011bc8:	693a      	ldr	r2, [r7, #16]
 8011bca:	429a      	cmp	r2, r3
 8011bcc:	d01f      	beq.n	8011c0e <HAL_RCC_OscConfig+0x8a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 8011bce:	4b12      	ldr	r3, [pc, #72]	@ (8011c18 <HAL_RCC_OscConfig+0x8ac>)
 8011bd0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8011bd2:	4a11      	ldr	r2, [pc, #68]	@ (8011c18 <HAL_RCC_OscConfig+0x8ac>)
 8011bd4:	f023 0301 	bic.w	r3, r3, #1
 8011bd8:	62d3      	str	r3, [r2, #44]	@ 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8011bda:	f7fe febd 	bl	8010958 <HAL_GetTick>
 8011bde:	6278      	str	r0, [r7, #36]	@ 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 8011be0:	bf00      	nop
 8011be2:	f7fe feb9 	bl	8010958 <HAL_GetTick>
 8011be6:	4602      	mov	r2, r0
 8011be8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011bea:	4293      	cmp	r3, r2
 8011bec:	d0f9      	beq.n	8011be2 <HAL_RCC_OscConfig+0x876>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8011bee:	4b0a      	ldr	r3, [pc, #40]	@ (8011c18 <HAL_RCC_OscConfig+0x8ac>)
 8011bf0:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8011bf2:	4b0a      	ldr	r3, [pc, #40]	@ (8011c1c <HAL_RCC_OscConfig+0x8b0>)
 8011bf4:	4013      	ands	r3, r2
 8011bf6:	687a      	ldr	r2, [r7, #4]
 8011bf8:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8011bfa:	00d2      	lsls	r2, r2, #3
 8011bfc:	4906      	ldr	r1, [pc, #24]	@ (8011c18 <HAL_RCC_OscConfig+0x8ac>)
 8011bfe:	4313      	orrs	r3, r2
 8011c00:	634b      	str	r3, [r1, #52]	@ 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 8011c02:	4b05      	ldr	r3, [pc, #20]	@ (8011c18 <HAL_RCC_OscConfig+0x8ac>)
 8011c04:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8011c06:	4a04      	ldr	r2, [pc, #16]	@ (8011c18 <HAL_RCC_OscConfig+0x8ac>)
 8011c08:	f043 0301 	orr.w	r3, r3, #1
 8011c0c:	62d3      	str	r3, [r2, #44]	@ 0x2c
        }
      }
    }
  }
  return HAL_OK;
 8011c0e:	2300      	movs	r3, #0
}
 8011c10:	4618      	mov	r0, r3
 8011c12:	3730      	adds	r7, #48	@ 0x30
 8011c14:	46bd      	mov	sp, r7
 8011c16:	bd80      	pop	{r7, pc}
 8011c18:	58024400 	.word	0x58024400
 8011c1c:	ffff0007 	.word	0xffff0007

08011c20 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8011c20:	b580      	push	{r7, lr}
 8011c22:	b086      	sub	sp, #24
 8011c24:	af00      	add	r7, sp, #0
 8011c26:	6078      	str	r0, [r7, #4]
 8011c28:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8011c2a:	687b      	ldr	r3, [r7, #4]
 8011c2c:	2b00      	cmp	r3, #0
 8011c2e:	d101      	bne.n	8011c34 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8011c30:	2301      	movs	r3, #1
 8011c32:	e19c      	b.n	8011f6e <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8011c34:	4b8a      	ldr	r3, [pc, #552]	@ (8011e60 <HAL_RCC_ClockConfig+0x240>)
 8011c36:	681b      	ldr	r3, [r3, #0]
 8011c38:	f003 030f 	and.w	r3, r3, #15
 8011c3c:	683a      	ldr	r2, [r7, #0]
 8011c3e:	429a      	cmp	r2, r3
 8011c40:	d910      	bls.n	8011c64 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8011c42:	4b87      	ldr	r3, [pc, #540]	@ (8011e60 <HAL_RCC_ClockConfig+0x240>)
 8011c44:	681b      	ldr	r3, [r3, #0]
 8011c46:	f023 020f 	bic.w	r2, r3, #15
 8011c4a:	4985      	ldr	r1, [pc, #532]	@ (8011e60 <HAL_RCC_ClockConfig+0x240>)
 8011c4c:	683b      	ldr	r3, [r7, #0]
 8011c4e:	4313      	orrs	r3, r2
 8011c50:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8011c52:	4b83      	ldr	r3, [pc, #524]	@ (8011e60 <HAL_RCC_ClockConfig+0x240>)
 8011c54:	681b      	ldr	r3, [r3, #0]
 8011c56:	f003 030f 	and.w	r3, r3, #15
 8011c5a:	683a      	ldr	r2, [r7, #0]
 8011c5c:	429a      	cmp	r2, r3
 8011c5e:	d001      	beq.n	8011c64 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8011c60:	2301      	movs	r3, #1
 8011c62:	e184      	b.n	8011f6e <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8011c64:	687b      	ldr	r3, [r7, #4]
 8011c66:	681b      	ldr	r3, [r3, #0]
 8011c68:	f003 0304 	and.w	r3, r3, #4
 8011c6c:	2b00      	cmp	r3, #0
 8011c6e:	d010      	beq.n	8011c92 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8011c70:	687b      	ldr	r3, [r7, #4]
 8011c72:	691a      	ldr	r2, [r3, #16]
 8011c74:	4b7b      	ldr	r3, [pc, #492]	@ (8011e64 <HAL_RCC_ClockConfig+0x244>)
 8011c76:	699b      	ldr	r3, [r3, #24]
 8011c78:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8011c7c:	429a      	cmp	r2, r3
 8011c7e:	d908      	bls.n	8011c92 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8011c80:	4b78      	ldr	r3, [pc, #480]	@ (8011e64 <HAL_RCC_ClockConfig+0x244>)
 8011c82:	699b      	ldr	r3, [r3, #24]
 8011c84:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8011c88:	687b      	ldr	r3, [r7, #4]
 8011c8a:	691b      	ldr	r3, [r3, #16]
 8011c8c:	4975      	ldr	r1, [pc, #468]	@ (8011e64 <HAL_RCC_ClockConfig+0x244>)
 8011c8e:	4313      	orrs	r3, r2
 8011c90:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8011c92:	687b      	ldr	r3, [r7, #4]
 8011c94:	681b      	ldr	r3, [r3, #0]
 8011c96:	f003 0308 	and.w	r3, r3, #8
 8011c9a:	2b00      	cmp	r3, #0
 8011c9c:	d010      	beq.n	8011cc0 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8011c9e:	687b      	ldr	r3, [r7, #4]
 8011ca0:	695a      	ldr	r2, [r3, #20]
 8011ca2:	4b70      	ldr	r3, [pc, #448]	@ (8011e64 <HAL_RCC_ClockConfig+0x244>)
 8011ca4:	69db      	ldr	r3, [r3, #28]
 8011ca6:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8011caa:	429a      	cmp	r2, r3
 8011cac:	d908      	bls.n	8011cc0 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8011cae:	4b6d      	ldr	r3, [pc, #436]	@ (8011e64 <HAL_RCC_ClockConfig+0x244>)
 8011cb0:	69db      	ldr	r3, [r3, #28]
 8011cb2:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8011cb6:	687b      	ldr	r3, [r7, #4]
 8011cb8:	695b      	ldr	r3, [r3, #20]
 8011cba:	496a      	ldr	r1, [pc, #424]	@ (8011e64 <HAL_RCC_ClockConfig+0x244>)
 8011cbc:	4313      	orrs	r3, r2
 8011cbe:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8011cc0:	687b      	ldr	r3, [r7, #4]
 8011cc2:	681b      	ldr	r3, [r3, #0]
 8011cc4:	f003 0310 	and.w	r3, r3, #16
 8011cc8:	2b00      	cmp	r3, #0
 8011cca:	d010      	beq.n	8011cee <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8011ccc:	687b      	ldr	r3, [r7, #4]
 8011cce:	699a      	ldr	r2, [r3, #24]
 8011cd0:	4b64      	ldr	r3, [pc, #400]	@ (8011e64 <HAL_RCC_ClockConfig+0x244>)
 8011cd2:	69db      	ldr	r3, [r3, #28]
 8011cd4:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8011cd8:	429a      	cmp	r2, r3
 8011cda:	d908      	bls.n	8011cee <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8011cdc:	4b61      	ldr	r3, [pc, #388]	@ (8011e64 <HAL_RCC_ClockConfig+0x244>)
 8011cde:	69db      	ldr	r3, [r3, #28]
 8011ce0:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8011ce4:	687b      	ldr	r3, [r7, #4]
 8011ce6:	699b      	ldr	r3, [r3, #24]
 8011ce8:	495e      	ldr	r1, [pc, #376]	@ (8011e64 <HAL_RCC_ClockConfig+0x244>)
 8011cea:	4313      	orrs	r3, r2
 8011cec:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8011cee:	687b      	ldr	r3, [r7, #4]
 8011cf0:	681b      	ldr	r3, [r3, #0]
 8011cf2:	f003 0320 	and.w	r3, r3, #32
 8011cf6:	2b00      	cmp	r3, #0
 8011cf8:	d010      	beq.n	8011d1c <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8011cfa:	687b      	ldr	r3, [r7, #4]
 8011cfc:	69da      	ldr	r2, [r3, #28]
 8011cfe:	4b59      	ldr	r3, [pc, #356]	@ (8011e64 <HAL_RCC_ClockConfig+0x244>)
 8011d00:	6a1b      	ldr	r3, [r3, #32]
 8011d02:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8011d06:	429a      	cmp	r2, r3
 8011d08:	d908      	bls.n	8011d1c <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8011d0a:	4b56      	ldr	r3, [pc, #344]	@ (8011e64 <HAL_RCC_ClockConfig+0x244>)
 8011d0c:	6a1b      	ldr	r3, [r3, #32]
 8011d0e:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8011d12:	687b      	ldr	r3, [r7, #4]
 8011d14:	69db      	ldr	r3, [r3, #28]
 8011d16:	4953      	ldr	r1, [pc, #332]	@ (8011e64 <HAL_RCC_ClockConfig+0x244>)
 8011d18:	4313      	orrs	r3, r2
 8011d1a:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8011d1c:	687b      	ldr	r3, [r7, #4]
 8011d1e:	681b      	ldr	r3, [r3, #0]
 8011d20:	f003 0302 	and.w	r3, r3, #2
 8011d24:	2b00      	cmp	r3, #0
 8011d26:	d010      	beq.n	8011d4a <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8011d28:	687b      	ldr	r3, [r7, #4]
 8011d2a:	68da      	ldr	r2, [r3, #12]
 8011d2c:	4b4d      	ldr	r3, [pc, #308]	@ (8011e64 <HAL_RCC_ClockConfig+0x244>)
 8011d2e:	699b      	ldr	r3, [r3, #24]
 8011d30:	f003 030f 	and.w	r3, r3, #15
 8011d34:	429a      	cmp	r2, r3
 8011d36:	d908      	bls.n	8011d4a <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8011d38:	4b4a      	ldr	r3, [pc, #296]	@ (8011e64 <HAL_RCC_ClockConfig+0x244>)
 8011d3a:	699b      	ldr	r3, [r3, #24]
 8011d3c:	f023 020f 	bic.w	r2, r3, #15
 8011d40:	687b      	ldr	r3, [r7, #4]
 8011d42:	68db      	ldr	r3, [r3, #12]
 8011d44:	4947      	ldr	r1, [pc, #284]	@ (8011e64 <HAL_RCC_ClockConfig+0x244>)
 8011d46:	4313      	orrs	r3, r2
 8011d48:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8011d4a:	687b      	ldr	r3, [r7, #4]
 8011d4c:	681b      	ldr	r3, [r3, #0]
 8011d4e:	f003 0301 	and.w	r3, r3, #1
 8011d52:	2b00      	cmp	r3, #0
 8011d54:	d055      	beq.n	8011e02 <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8011d56:	4b43      	ldr	r3, [pc, #268]	@ (8011e64 <HAL_RCC_ClockConfig+0x244>)
 8011d58:	699b      	ldr	r3, [r3, #24]
 8011d5a:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 8011d5e:	687b      	ldr	r3, [r7, #4]
 8011d60:	689b      	ldr	r3, [r3, #8]
 8011d62:	4940      	ldr	r1, [pc, #256]	@ (8011e64 <HAL_RCC_ClockConfig+0x244>)
 8011d64:	4313      	orrs	r3, r2
 8011d66:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8011d68:	687b      	ldr	r3, [r7, #4]
 8011d6a:	685b      	ldr	r3, [r3, #4]
 8011d6c:	2b02      	cmp	r3, #2
 8011d6e:	d107      	bne.n	8011d80 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8011d70:	4b3c      	ldr	r3, [pc, #240]	@ (8011e64 <HAL_RCC_ClockConfig+0x244>)
 8011d72:	681b      	ldr	r3, [r3, #0]
 8011d74:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8011d78:	2b00      	cmp	r3, #0
 8011d7a:	d121      	bne.n	8011dc0 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8011d7c:	2301      	movs	r3, #1
 8011d7e:	e0f6      	b.n	8011f6e <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8011d80:	687b      	ldr	r3, [r7, #4]
 8011d82:	685b      	ldr	r3, [r3, #4]
 8011d84:	2b03      	cmp	r3, #3
 8011d86:	d107      	bne.n	8011d98 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8011d88:	4b36      	ldr	r3, [pc, #216]	@ (8011e64 <HAL_RCC_ClockConfig+0x244>)
 8011d8a:	681b      	ldr	r3, [r3, #0]
 8011d8c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8011d90:	2b00      	cmp	r3, #0
 8011d92:	d115      	bne.n	8011dc0 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8011d94:	2301      	movs	r3, #1
 8011d96:	e0ea      	b.n	8011f6e <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8011d98:	687b      	ldr	r3, [r7, #4]
 8011d9a:	685b      	ldr	r3, [r3, #4]
 8011d9c:	2b01      	cmp	r3, #1
 8011d9e:	d107      	bne.n	8011db0 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8011da0:	4b30      	ldr	r3, [pc, #192]	@ (8011e64 <HAL_RCC_ClockConfig+0x244>)
 8011da2:	681b      	ldr	r3, [r3, #0]
 8011da4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8011da8:	2b00      	cmp	r3, #0
 8011daa:	d109      	bne.n	8011dc0 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8011dac:	2301      	movs	r3, #1
 8011dae:	e0de      	b.n	8011f6e <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8011db0:	4b2c      	ldr	r3, [pc, #176]	@ (8011e64 <HAL_RCC_ClockConfig+0x244>)
 8011db2:	681b      	ldr	r3, [r3, #0]
 8011db4:	f003 0304 	and.w	r3, r3, #4
 8011db8:	2b00      	cmp	r3, #0
 8011dba:	d101      	bne.n	8011dc0 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8011dbc:	2301      	movs	r3, #1
 8011dbe:	e0d6      	b.n	8011f6e <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8011dc0:	4b28      	ldr	r3, [pc, #160]	@ (8011e64 <HAL_RCC_ClockConfig+0x244>)
 8011dc2:	691b      	ldr	r3, [r3, #16]
 8011dc4:	f023 0207 	bic.w	r2, r3, #7
 8011dc8:	687b      	ldr	r3, [r7, #4]
 8011dca:	685b      	ldr	r3, [r3, #4]
 8011dcc:	4925      	ldr	r1, [pc, #148]	@ (8011e64 <HAL_RCC_ClockConfig+0x244>)
 8011dce:	4313      	orrs	r3, r2
 8011dd0:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8011dd2:	f7fe fdc1 	bl	8010958 <HAL_GetTick>
 8011dd6:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8011dd8:	e00a      	b.n	8011df0 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8011dda:	f7fe fdbd 	bl	8010958 <HAL_GetTick>
 8011dde:	4602      	mov	r2, r0
 8011de0:	697b      	ldr	r3, [r7, #20]
 8011de2:	1ad3      	subs	r3, r2, r3
 8011de4:	f241 3288 	movw	r2, #5000	@ 0x1388
 8011de8:	4293      	cmp	r3, r2
 8011dea:	d901      	bls.n	8011df0 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 8011dec:	2303      	movs	r3, #3
 8011dee:	e0be      	b.n	8011f6e <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8011df0:	4b1c      	ldr	r3, [pc, #112]	@ (8011e64 <HAL_RCC_ClockConfig+0x244>)
 8011df2:	691b      	ldr	r3, [r3, #16]
 8011df4:	f003 0238 	and.w	r2, r3, #56	@ 0x38
 8011df8:	687b      	ldr	r3, [r7, #4]
 8011dfa:	685b      	ldr	r3, [r3, #4]
 8011dfc:	00db      	lsls	r3, r3, #3
 8011dfe:	429a      	cmp	r2, r3
 8011e00:	d1eb      	bne.n	8011dda <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8011e02:	687b      	ldr	r3, [r7, #4]
 8011e04:	681b      	ldr	r3, [r3, #0]
 8011e06:	f003 0302 	and.w	r3, r3, #2
 8011e0a:	2b00      	cmp	r3, #0
 8011e0c:	d010      	beq.n	8011e30 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8011e0e:	687b      	ldr	r3, [r7, #4]
 8011e10:	68da      	ldr	r2, [r3, #12]
 8011e12:	4b14      	ldr	r3, [pc, #80]	@ (8011e64 <HAL_RCC_ClockConfig+0x244>)
 8011e14:	699b      	ldr	r3, [r3, #24]
 8011e16:	f003 030f 	and.w	r3, r3, #15
 8011e1a:	429a      	cmp	r2, r3
 8011e1c:	d208      	bcs.n	8011e30 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8011e1e:	4b11      	ldr	r3, [pc, #68]	@ (8011e64 <HAL_RCC_ClockConfig+0x244>)
 8011e20:	699b      	ldr	r3, [r3, #24]
 8011e22:	f023 020f 	bic.w	r2, r3, #15
 8011e26:	687b      	ldr	r3, [r7, #4]
 8011e28:	68db      	ldr	r3, [r3, #12]
 8011e2a:	490e      	ldr	r1, [pc, #56]	@ (8011e64 <HAL_RCC_ClockConfig+0x244>)
 8011e2c:	4313      	orrs	r3, r2
 8011e2e:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8011e30:	4b0b      	ldr	r3, [pc, #44]	@ (8011e60 <HAL_RCC_ClockConfig+0x240>)
 8011e32:	681b      	ldr	r3, [r3, #0]
 8011e34:	f003 030f 	and.w	r3, r3, #15
 8011e38:	683a      	ldr	r2, [r7, #0]
 8011e3a:	429a      	cmp	r2, r3
 8011e3c:	d214      	bcs.n	8011e68 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8011e3e:	4b08      	ldr	r3, [pc, #32]	@ (8011e60 <HAL_RCC_ClockConfig+0x240>)
 8011e40:	681b      	ldr	r3, [r3, #0]
 8011e42:	f023 020f 	bic.w	r2, r3, #15
 8011e46:	4906      	ldr	r1, [pc, #24]	@ (8011e60 <HAL_RCC_ClockConfig+0x240>)
 8011e48:	683b      	ldr	r3, [r7, #0]
 8011e4a:	4313      	orrs	r3, r2
 8011e4c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8011e4e:	4b04      	ldr	r3, [pc, #16]	@ (8011e60 <HAL_RCC_ClockConfig+0x240>)
 8011e50:	681b      	ldr	r3, [r3, #0]
 8011e52:	f003 030f 	and.w	r3, r3, #15
 8011e56:	683a      	ldr	r2, [r7, #0]
 8011e58:	429a      	cmp	r2, r3
 8011e5a:	d005      	beq.n	8011e68 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8011e5c:	2301      	movs	r3, #1
 8011e5e:	e086      	b.n	8011f6e <HAL_RCC_ClockConfig+0x34e>
 8011e60:	52002000 	.word	0x52002000
 8011e64:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8011e68:	687b      	ldr	r3, [r7, #4]
 8011e6a:	681b      	ldr	r3, [r3, #0]
 8011e6c:	f003 0304 	and.w	r3, r3, #4
 8011e70:	2b00      	cmp	r3, #0
 8011e72:	d010      	beq.n	8011e96 <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8011e74:	687b      	ldr	r3, [r7, #4]
 8011e76:	691a      	ldr	r2, [r3, #16]
 8011e78:	4b3f      	ldr	r3, [pc, #252]	@ (8011f78 <HAL_RCC_ClockConfig+0x358>)
 8011e7a:	699b      	ldr	r3, [r3, #24]
 8011e7c:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8011e80:	429a      	cmp	r2, r3
 8011e82:	d208      	bcs.n	8011e96 <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8011e84:	4b3c      	ldr	r3, [pc, #240]	@ (8011f78 <HAL_RCC_ClockConfig+0x358>)
 8011e86:	699b      	ldr	r3, [r3, #24]
 8011e88:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8011e8c:	687b      	ldr	r3, [r7, #4]
 8011e8e:	691b      	ldr	r3, [r3, #16]
 8011e90:	4939      	ldr	r1, [pc, #228]	@ (8011f78 <HAL_RCC_ClockConfig+0x358>)
 8011e92:	4313      	orrs	r3, r2
 8011e94:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8011e96:	687b      	ldr	r3, [r7, #4]
 8011e98:	681b      	ldr	r3, [r3, #0]
 8011e9a:	f003 0308 	and.w	r3, r3, #8
 8011e9e:	2b00      	cmp	r3, #0
 8011ea0:	d010      	beq.n	8011ec4 <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8011ea2:	687b      	ldr	r3, [r7, #4]
 8011ea4:	695a      	ldr	r2, [r3, #20]
 8011ea6:	4b34      	ldr	r3, [pc, #208]	@ (8011f78 <HAL_RCC_ClockConfig+0x358>)
 8011ea8:	69db      	ldr	r3, [r3, #28]
 8011eaa:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8011eae:	429a      	cmp	r2, r3
 8011eb0:	d208      	bcs.n	8011ec4 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8011eb2:	4b31      	ldr	r3, [pc, #196]	@ (8011f78 <HAL_RCC_ClockConfig+0x358>)
 8011eb4:	69db      	ldr	r3, [r3, #28]
 8011eb6:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8011eba:	687b      	ldr	r3, [r7, #4]
 8011ebc:	695b      	ldr	r3, [r3, #20]
 8011ebe:	492e      	ldr	r1, [pc, #184]	@ (8011f78 <HAL_RCC_ClockConfig+0x358>)
 8011ec0:	4313      	orrs	r3, r2
 8011ec2:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8011ec4:	687b      	ldr	r3, [r7, #4]
 8011ec6:	681b      	ldr	r3, [r3, #0]
 8011ec8:	f003 0310 	and.w	r3, r3, #16
 8011ecc:	2b00      	cmp	r3, #0
 8011ece:	d010      	beq.n	8011ef2 <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8011ed0:	687b      	ldr	r3, [r7, #4]
 8011ed2:	699a      	ldr	r2, [r3, #24]
 8011ed4:	4b28      	ldr	r3, [pc, #160]	@ (8011f78 <HAL_RCC_ClockConfig+0x358>)
 8011ed6:	69db      	ldr	r3, [r3, #28]
 8011ed8:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8011edc:	429a      	cmp	r2, r3
 8011ede:	d208      	bcs.n	8011ef2 <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8011ee0:	4b25      	ldr	r3, [pc, #148]	@ (8011f78 <HAL_RCC_ClockConfig+0x358>)
 8011ee2:	69db      	ldr	r3, [r3, #28]
 8011ee4:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8011ee8:	687b      	ldr	r3, [r7, #4]
 8011eea:	699b      	ldr	r3, [r3, #24]
 8011eec:	4922      	ldr	r1, [pc, #136]	@ (8011f78 <HAL_RCC_ClockConfig+0x358>)
 8011eee:	4313      	orrs	r3, r2
 8011ef0:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8011ef2:	687b      	ldr	r3, [r7, #4]
 8011ef4:	681b      	ldr	r3, [r3, #0]
 8011ef6:	f003 0320 	and.w	r3, r3, #32
 8011efa:	2b00      	cmp	r3, #0
 8011efc:	d010      	beq.n	8011f20 <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8011efe:	687b      	ldr	r3, [r7, #4]
 8011f00:	69da      	ldr	r2, [r3, #28]
 8011f02:	4b1d      	ldr	r3, [pc, #116]	@ (8011f78 <HAL_RCC_ClockConfig+0x358>)
 8011f04:	6a1b      	ldr	r3, [r3, #32]
 8011f06:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8011f0a:	429a      	cmp	r2, r3
 8011f0c:	d208      	bcs.n	8011f20 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8011f0e:	4b1a      	ldr	r3, [pc, #104]	@ (8011f78 <HAL_RCC_ClockConfig+0x358>)
 8011f10:	6a1b      	ldr	r3, [r3, #32]
 8011f12:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8011f16:	687b      	ldr	r3, [r7, #4]
 8011f18:	69db      	ldr	r3, [r3, #28]
 8011f1a:	4917      	ldr	r1, [pc, #92]	@ (8011f78 <HAL_RCC_ClockConfig+0x358>)
 8011f1c:	4313      	orrs	r3, r2
 8011f1e:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8011f20:	f000 f89e 	bl	8012060 <HAL_RCC_GetSysClockFreq>
 8011f24:	4602      	mov	r2, r0
 8011f26:	4b14      	ldr	r3, [pc, #80]	@ (8011f78 <HAL_RCC_ClockConfig+0x358>)
 8011f28:	699b      	ldr	r3, [r3, #24]
 8011f2a:	0a1b      	lsrs	r3, r3, #8
 8011f2c:	f003 030f 	and.w	r3, r3, #15
 8011f30:	4912      	ldr	r1, [pc, #72]	@ (8011f7c <HAL_RCC_ClockConfig+0x35c>)
 8011f32:	5ccb      	ldrb	r3, [r1, r3]
 8011f34:	f003 031f 	and.w	r3, r3, #31
 8011f38:	fa22 f303 	lsr.w	r3, r2, r3
 8011f3c:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8011f3e:	4b0e      	ldr	r3, [pc, #56]	@ (8011f78 <HAL_RCC_ClockConfig+0x358>)
 8011f40:	699b      	ldr	r3, [r3, #24]
 8011f42:	f003 030f 	and.w	r3, r3, #15
 8011f46:	4a0d      	ldr	r2, [pc, #52]	@ (8011f7c <HAL_RCC_ClockConfig+0x35c>)
 8011f48:	5cd3      	ldrb	r3, [r2, r3]
 8011f4a:	f003 031f 	and.w	r3, r3, #31
 8011f4e:	693a      	ldr	r2, [r7, #16]
 8011f50:	fa22 f303 	lsr.w	r3, r2, r3
 8011f54:	4a0a      	ldr	r2, [pc, #40]	@ (8011f80 <HAL_RCC_ClockConfig+0x360>)
 8011f56:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8011f58:	4a0a      	ldr	r2, [pc, #40]	@ (8011f84 <HAL_RCC_ClockConfig+0x364>)
 8011f5a:	693b      	ldr	r3, [r7, #16]
 8011f5c:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 8011f5e:	4b0a      	ldr	r3, [pc, #40]	@ (8011f88 <HAL_RCC_ClockConfig+0x368>)
 8011f60:	681b      	ldr	r3, [r3, #0]
 8011f62:	4618      	mov	r0, r3
 8011f64:	f7fe fcae 	bl	80108c4 <HAL_InitTick>
 8011f68:	4603      	mov	r3, r0
 8011f6a:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8011f6c:	7bfb      	ldrb	r3, [r7, #15]
}
 8011f6e:	4618      	mov	r0, r3
 8011f70:	3718      	adds	r7, #24
 8011f72:	46bd      	mov	sp, r7
 8011f74:	bd80      	pop	{r7, pc}
 8011f76:	bf00      	nop
 8011f78:	58024400 	.word	0x58024400
 8011f7c:	0801bd88 	.word	0x0801bd88
 8011f80:	24000004 	.word	0x24000004
 8011f84:	24000000 	.word	0x24000000
 8011f88:	24000050 	.word	0x24000050

08011f8c <HAL_RCC_MCOConfig>:
  *          This parameter can be one of the following values:
  *            @arg RCC_MCODIV_1 up to RCC_MCODIV_15  : divider applied to MCOx clock
  * @retval None
  */
void HAL_RCC_MCOConfig(uint32_t RCC_MCOx, uint32_t RCC_MCOSource, uint32_t RCC_MCODiv)
{
 8011f8c:	b580      	push	{r7, lr}
 8011f8e:	b08c      	sub	sp, #48	@ 0x30
 8011f90:	af00      	add	r7, sp, #0
 8011f92:	60f8      	str	r0, [r7, #12]
 8011f94:	60b9      	str	r1, [r7, #8]
 8011f96:	607a      	str	r2, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct;
  /* Check the parameters */
  assert_param(IS_RCC_MCO(RCC_MCOx));
  assert_param(IS_RCC_MCODIV(RCC_MCODiv));
  /* RCC_MCO1 */
  if (RCC_MCOx == RCC_MCO1)
 8011f98:	68fb      	ldr	r3, [r7, #12]
 8011f9a:	2b00      	cmp	r3, #0
 8011f9c:	d12a      	bne.n	8011ff4 <HAL_RCC_MCOConfig+0x68>
  {
    assert_param(IS_RCC_MCO1SOURCE(RCC_MCOSource));

    /* MCO1 Clock Enable */
    MCO1_CLK_ENABLE();
 8011f9e:	4b2d      	ldr	r3, [pc, #180]	@ (8012054 <HAL_RCC_MCOConfig+0xc8>)
 8011fa0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8011fa4:	4a2b      	ldr	r2, [pc, #172]	@ (8012054 <HAL_RCC_MCOConfig+0xc8>)
 8011fa6:	f043 0301 	orr.w	r3, r3, #1
 8011faa:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8011fae:	4b29      	ldr	r3, [pc, #164]	@ (8012054 <HAL_RCC_MCOConfig+0xc8>)
 8011fb0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8011fb4:	f003 0301 	and.w	r3, r3, #1
 8011fb8:	61bb      	str	r3, [r7, #24]
 8011fba:	69bb      	ldr	r3, [r7, #24]

    /* Configure the MCO1 pin in alternate function mode */
    GPIO_InitStruct.Pin = MCO1_PIN;
 8011fbc:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8011fc0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8011fc2:	2302      	movs	r3, #2
 8011fc4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8011fc6:	2303      	movs	r3, #3
 8011fc8:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8011fca:	2300      	movs	r3, #0
 8011fcc:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 8011fce:	2300      	movs	r3, #0
 8011fd0:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(MCO1_GPIO_PORT, &GPIO_InitStruct);
 8011fd2:	f107 031c 	add.w	r3, r7, #28
 8011fd6:	4619      	mov	r1, r3
 8011fd8:	481f      	ldr	r0, [pc, #124]	@ (8012058 <HAL_RCC_MCOConfig+0xcc>)
 8011fda:	f7fe fe09 	bl	8010bf0 <HAL_GPIO_Init>

    /* Mask MCO1 and MCO1PRE[3:0] bits then Select MCO1 clock source and pre-scaler */
    MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCO1 | RCC_CFGR_MCO1PRE), (RCC_MCOSource | RCC_MCODiv));
 8011fde:	4b1d      	ldr	r3, [pc, #116]	@ (8012054 <HAL_RCC_MCOConfig+0xc8>)
 8011fe0:	691b      	ldr	r3, [r3, #16]
 8011fe2:	f023 72fe 	bic.w	r2, r3, #33292288	@ 0x1fc0000
 8011fe6:	68b9      	ldr	r1, [r7, #8]
 8011fe8:	687b      	ldr	r3, [r7, #4]
 8011fea:	430b      	orrs	r3, r1
 8011fec:	4919      	ldr	r1, [pc, #100]	@ (8012054 <HAL_RCC_MCOConfig+0xc8>)
 8011fee:	4313      	orrs	r3, r2
 8011ff0:	610b      	str	r3, [r1, #16]
    HAL_GPIO_Init(MCO2_GPIO_PORT, &GPIO_InitStruct);

    /* Mask MCO2 and MCO2PRE[3:0] bits then Select MCO2 clock source and pre-scaler */
    MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCO2 | RCC_CFGR_MCO2PRE), (RCC_MCOSource | (RCC_MCODiv << 7U)));
  }
}
 8011ff2:	e02a      	b.n	801204a <HAL_RCC_MCOConfig+0xbe>
    MCO2_CLK_ENABLE();
 8011ff4:	4b17      	ldr	r3, [pc, #92]	@ (8012054 <HAL_RCC_MCOConfig+0xc8>)
 8011ff6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8011ffa:	4a16      	ldr	r2, [pc, #88]	@ (8012054 <HAL_RCC_MCOConfig+0xc8>)
 8011ffc:	f043 0304 	orr.w	r3, r3, #4
 8012000:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8012004:	4b13      	ldr	r3, [pc, #76]	@ (8012054 <HAL_RCC_MCOConfig+0xc8>)
 8012006:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 801200a:	f003 0304 	and.w	r3, r3, #4
 801200e:	617b      	str	r3, [r7, #20]
 8012010:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = MCO2_PIN;
 8012012:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8012016:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8012018:	2302      	movs	r3, #2
 801201a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 801201c:	2303      	movs	r3, #3
 801201e:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8012020:	2300      	movs	r3, #0
 8012022:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 8012024:	2300      	movs	r3, #0
 8012026:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(MCO2_GPIO_PORT, &GPIO_InitStruct);
 8012028:	f107 031c 	add.w	r3, r7, #28
 801202c:	4619      	mov	r1, r3
 801202e:	480b      	ldr	r0, [pc, #44]	@ (801205c <HAL_RCC_MCOConfig+0xd0>)
 8012030:	f7fe fdde 	bl	8010bf0 <HAL_GPIO_Init>
    MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCO2 | RCC_CFGR_MCO2PRE), (RCC_MCOSource | (RCC_MCODiv << 7U)));
 8012034:	4b07      	ldr	r3, [pc, #28]	@ (8012054 <HAL_RCC_MCOConfig+0xc8>)
 8012036:	691b      	ldr	r3, [r3, #16]
 8012038:	f023 427e 	bic.w	r2, r3, #4261412864	@ 0xfe000000
 801203c:	687b      	ldr	r3, [r7, #4]
 801203e:	01d9      	lsls	r1, r3, #7
 8012040:	68bb      	ldr	r3, [r7, #8]
 8012042:	430b      	orrs	r3, r1
 8012044:	4903      	ldr	r1, [pc, #12]	@ (8012054 <HAL_RCC_MCOConfig+0xc8>)
 8012046:	4313      	orrs	r3, r2
 8012048:	610b      	str	r3, [r1, #16]
}
 801204a:	bf00      	nop
 801204c:	3730      	adds	r7, #48	@ 0x30
 801204e:	46bd      	mov	sp, r7
 8012050:	bd80      	pop	{r7, pc}
 8012052:	bf00      	nop
 8012054:	58024400 	.word	0x58024400
 8012058:	58020000 	.word	0x58020000
 801205c:	58020800 	.word	0x58020800

08012060 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8012060:	b480      	push	{r7}
 8012062:	b089      	sub	sp, #36	@ 0x24
 8012064:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8012066:	4bb3      	ldr	r3, [pc, #716]	@ (8012334 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8012068:	691b      	ldr	r3, [r3, #16]
 801206a:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 801206e:	2b18      	cmp	r3, #24
 8012070:	f200 8155 	bhi.w	801231e <HAL_RCC_GetSysClockFreq+0x2be>
 8012074:	a201      	add	r2, pc, #4	@ (adr r2, 801207c <HAL_RCC_GetSysClockFreq+0x1c>)
 8012076:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801207a:	bf00      	nop
 801207c:	080120e1 	.word	0x080120e1
 8012080:	0801231f 	.word	0x0801231f
 8012084:	0801231f 	.word	0x0801231f
 8012088:	0801231f 	.word	0x0801231f
 801208c:	0801231f 	.word	0x0801231f
 8012090:	0801231f 	.word	0x0801231f
 8012094:	0801231f 	.word	0x0801231f
 8012098:	0801231f 	.word	0x0801231f
 801209c:	08012107 	.word	0x08012107
 80120a0:	0801231f 	.word	0x0801231f
 80120a4:	0801231f 	.word	0x0801231f
 80120a8:	0801231f 	.word	0x0801231f
 80120ac:	0801231f 	.word	0x0801231f
 80120b0:	0801231f 	.word	0x0801231f
 80120b4:	0801231f 	.word	0x0801231f
 80120b8:	0801231f 	.word	0x0801231f
 80120bc:	0801210d 	.word	0x0801210d
 80120c0:	0801231f 	.word	0x0801231f
 80120c4:	0801231f 	.word	0x0801231f
 80120c8:	0801231f 	.word	0x0801231f
 80120cc:	0801231f 	.word	0x0801231f
 80120d0:	0801231f 	.word	0x0801231f
 80120d4:	0801231f 	.word	0x0801231f
 80120d8:	0801231f 	.word	0x0801231f
 80120dc:	08012113 	.word	0x08012113
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80120e0:	4b94      	ldr	r3, [pc, #592]	@ (8012334 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80120e2:	681b      	ldr	r3, [r3, #0]
 80120e4:	f003 0320 	and.w	r3, r3, #32
 80120e8:	2b00      	cmp	r3, #0
 80120ea:	d009      	beq.n	8012100 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80120ec:	4b91      	ldr	r3, [pc, #580]	@ (8012334 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80120ee:	681b      	ldr	r3, [r3, #0]
 80120f0:	08db      	lsrs	r3, r3, #3
 80120f2:	f003 0303 	and.w	r3, r3, #3
 80120f6:	4a90      	ldr	r2, [pc, #576]	@ (8012338 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80120f8:	fa22 f303 	lsr.w	r3, r2, r3
 80120fc:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 80120fe:	e111      	b.n	8012324 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8012100:	4b8d      	ldr	r3, [pc, #564]	@ (8012338 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8012102:	61bb      	str	r3, [r7, #24]
      break;
 8012104:	e10e      	b.n	8012324 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 8012106:	4b8d      	ldr	r3, [pc, #564]	@ (801233c <HAL_RCC_GetSysClockFreq+0x2dc>)
 8012108:	61bb      	str	r3, [r7, #24]
      break;
 801210a:	e10b      	b.n	8012324 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 801210c:	4b8c      	ldr	r3, [pc, #560]	@ (8012340 <HAL_RCC_GetSysClockFreq+0x2e0>)
 801210e:	61bb      	str	r3, [r7, #24]
      break;
 8012110:	e108      	b.n	8012324 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8012112:	4b88      	ldr	r3, [pc, #544]	@ (8012334 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8012114:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8012116:	f003 0303 	and.w	r3, r3, #3
 801211a:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 801211c:	4b85      	ldr	r3, [pc, #532]	@ (8012334 <HAL_RCC_GetSysClockFreq+0x2d4>)
 801211e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8012120:	091b      	lsrs	r3, r3, #4
 8012122:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8012126:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 8012128:	4b82      	ldr	r3, [pc, #520]	@ (8012334 <HAL_RCC_GetSysClockFreq+0x2d4>)
 801212a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801212c:	f003 0301 	and.w	r3, r3, #1
 8012130:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8012132:	4b80      	ldr	r3, [pc, #512]	@ (8012334 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8012134:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8012136:	08db      	lsrs	r3, r3, #3
 8012138:	f3c3 030c 	ubfx	r3, r3, #0, #13
 801213c:	68fa      	ldr	r2, [r7, #12]
 801213e:	fb02 f303 	mul.w	r3, r2, r3
 8012142:	ee07 3a90 	vmov	s15, r3
 8012146:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801214a:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 801214e:	693b      	ldr	r3, [r7, #16]
 8012150:	2b00      	cmp	r3, #0
 8012152:	f000 80e1 	beq.w	8012318 <HAL_RCC_GetSysClockFreq+0x2b8>
 8012156:	697b      	ldr	r3, [r7, #20]
 8012158:	2b02      	cmp	r3, #2
 801215a:	f000 8083 	beq.w	8012264 <HAL_RCC_GetSysClockFreq+0x204>
 801215e:	697b      	ldr	r3, [r7, #20]
 8012160:	2b02      	cmp	r3, #2
 8012162:	f200 80a1 	bhi.w	80122a8 <HAL_RCC_GetSysClockFreq+0x248>
 8012166:	697b      	ldr	r3, [r7, #20]
 8012168:	2b00      	cmp	r3, #0
 801216a:	d003      	beq.n	8012174 <HAL_RCC_GetSysClockFreq+0x114>
 801216c:	697b      	ldr	r3, [r7, #20]
 801216e:	2b01      	cmp	r3, #1
 8012170:	d056      	beq.n	8012220 <HAL_RCC_GetSysClockFreq+0x1c0>
 8012172:	e099      	b.n	80122a8 <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8012174:	4b6f      	ldr	r3, [pc, #444]	@ (8012334 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8012176:	681b      	ldr	r3, [r3, #0]
 8012178:	f003 0320 	and.w	r3, r3, #32
 801217c:	2b00      	cmp	r3, #0
 801217e:	d02d      	beq.n	80121dc <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8012180:	4b6c      	ldr	r3, [pc, #432]	@ (8012334 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8012182:	681b      	ldr	r3, [r3, #0]
 8012184:	08db      	lsrs	r3, r3, #3
 8012186:	f003 0303 	and.w	r3, r3, #3
 801218a:	4a6b      	ldr	r2, [pc, #428]	@ (8012338 <HAL_RCC_GetSysClockFreq+0x2d8>)
 801218c:	fa22 f303 	lsr.w	r3, r2, r3
 8012190:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8012192:	687b      	ldr	r3, [r7, #4]
 8012194:	ee07 3a90 	vmov	s15, r3
 8012198:	eef8 6a67 	vcvt.f32.u32	s13, s15
 801219c:	693b      	ldr	r3, [r7, #16]
 801219e:	ee07 3a90 	vmov	s15, r3
 80121a2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80121a6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80121aa:	4b62      	ldr	r3, [pc, #392]	@ (8012334 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80121ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80121ae:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80121b2:	ee07 3a90 	vmov	s15, r3
 80121b6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80121ba:	ed97 6a02 	vldr	s12, [r7, #8]
 80121be:	eddf 5a61 	vldr	s11, [pc, #388]	@ 8012344 <HAL_RCC_GetSysClockFreq+0x2e4>
 80121c2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80121c6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80121ca:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80121ce:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80121d2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80121d6:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 80121da:	e087      	b.n	80122ec <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80121dc:	693b      	ldr	r3, [r7, #16]
 80121de:	ee07 3a90 	vmov	s15, r3
 80121e2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80121e6:	eddf 6a58 	vldr	s13, [pc, #352]	@ 8012348 <HAL_RCC_GetSysClockFreq+0x2e8>
 80121ea:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80121ee:	4b51      	ldr	r3, [pc, #324]	@ (8012334 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80121f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80121f2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80121f6:	ee07 3a90 	vmov	s15, r3
 80121fa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80121fe:	ed97 6a02 	vldr	s12, [r7, #8]
 8012202:	eddf 5a50 	vldr	s11, [pc, #320]	@ 8012344 <HAL_RCC_GetSysClockFreq+0x2e4>
 8012206:	eec6 7a25 	vdiv.f32	s15, s12, s11
 801220a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 801220e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8012212:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8012216:	ee67 7a27 	vmul.f32	s15, s14, s15
 801221a:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 801221e:	e065      	b.n	80122ec <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8012220:	693b      	ldr	r3, [r7, #16]
 8012222:	ee07 3a90 	vmov	s15, r3
 8012226:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801222a:	eddf 6a48 	vldr	s13, [pc, #288]	@ 801234c <HAL_RCC_GetSysClockFreq+0x2ec>
 801222e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8012232:	4b40      	ldr	r3, [pc, #256]	@ (8012334 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8012234:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8012236:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801223a:	ee07 3a90 	vmov	s15, r3
 801223e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8012242:	ed97 6a02 	vldr	s12, [r7, #8]
 8012246:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 8012344 <HAL_RCC_GetSysClockFreq+0x2e4>
 801224a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 801224e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8012252:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8012256:	ee77 7aa6 	vadd.f32	s15, s15, s13
 801225a:	ee67 7a27 	vmul.f32	s15, s14, s15
 801225e:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8012262:	e043      	b.n	80122ec <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8012264:	693b      	ldr	r3, [r7, #16]
 8012266:	ee07 3a90 	vmov	s15, r3
 801226a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801226e:	eddf 6a38 	vldr	s13, [pc, #224]	@ 8012350 <HAL_RCC_GetSysClockFreq+0x2f0>
 8012272:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8012276:	4b2f      	ldr	r3, [pc, #188]	@ (8012334 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8012278:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801227a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801227e:	ee07 3a90 	vmov	s15, r3
 8012282:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8012286:	ed97 6a02 	vldr	s12, [r7, #8]
 801228a:	eddf 5a2e 	vldr	s11, [pc, #184]	@ 8012344 <HAL_RCC_GetSysClockFreq+0x2e4>
 801228e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8012292:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8012296:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 801229a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 801229e:	ee67 7a27 	vmul.f32	s15, s14, s15
 80122a2:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80122a6:	e021      	b.n	80122ec <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80122a8:	693b      	ldr	r3, [r7, #16]
 80122aa:	ee07 3a90 	vmov	s15, r3
 80122ae:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80122b2:	eddf 6a26 	vldr	s13, [pc, #152]	@ 801234c <HAL_RCC_GetSysClockFreq+0x2ec>
 80122b6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80122ba:	4b1e      	ldr	r3, [pc, #120]	@ (8012334 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80122bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80122be:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80122c2:	ee07 3a90 	vmov	s15, r3
 80122c6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80122ca:	ed97 6a02 	vldr	s12, [r7, #8]
 80122ce:	eddf 5a1d 	vldr	s11, [pc, #116]	@ 8012344 <HAL_RCC_GetSysClockFreq+0x2e4>
 80122d2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80122d6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80122da:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80122de:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80122e2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80122e6:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80122ea:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 80122ec:	4b11      	ldr	r3, [pc, #68]	@ (8012334 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80122ee:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80122f0:	0a5b      	lsrs	r3, r3, #9
 80122f2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80122f6:	3301      	adds	r3, #1
 80122f8:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 80122fa:	683b      	ldr	r3, [r7, #0]
 80122fc:	ee07 3a90 	vmov	s15, r3
 8012300:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8012304:	edd7 6a07 	vldr	s13, [r7, #28]
 8012308:	eec6 7a87 	vdiv.f32	s15, s13, s14
 801230c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8012310:	ee17 3a90 	vmov	r3, s15
 8012314:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 8012316:	e005      	b.n	8012324 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 8012318:	2300      	movs	r3, #0
 801231a:	61bb      	str	r3, [r7, #24]
      break;
 801231c:	e002      	b.n	8012324 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 801231e:	4b07      	ldr	r3, [pc, #28]	@ (801233c <HAL_RCC_GetSysClockFreq+0x2dc>)
 8012320:	61bb      	str	r3, [r7, #24]
      break;
 8012322:	bf00      	nop
  }

  return sysclockfreq;
 8012324:	69bb      	ldr	r3, [r7, #24]
}
 8012326:	4618      	mov	r0, r3
 8012328:	3724      	adds	r7, #36	@ 0x24
 801232a:	46bd      	mov	sp, r7
 801232c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012330:	4770      	bx	lr
 8012332:	bf00      	nop
 8012334:	58024400 	.word	0x58024400
 8012338:	03d09000 	.word	0x03d09000
 801233c:	003d0900 	.word	0x003d0900
 8012340:	017d7840 	.word	0x017d7840
 8012344:	46000000 	.word	0x46000000
 8012348:	4c742400 	.word	0x4c742400
 801234c:	4a742400 	.word	0x4a742400
 8012350:	4bbebc20 	.word	0x4bbebc20

08012354 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8012354:	b580      	push	{r7, lr}
 8012356:	b082      	sub	sp, #8
 8012358:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 801235a:	f7ff fe81 	bl	8012060 <HAL_RCC_GetSysClockFreq>
 801235e:	4602      	mov	r2, r0
 8012360:	4b10      	ldr	r3, [pc, #64]	@ (80123a4 <HAL_RCC_GetHCLKFreq+0x50>)
 8012362:	699b      	ldr	r3, [r3, #24]
 8012364:	0a1b      	lsrs	r3, r3, #8
 8012366:	f003 030f 	and.w	r3, r3, #15
 801236a:	490f      	ldr	r1, [pc, #60]	@ (80123a8 <HAL_RCC_GetHCLKFreq+0x54>)
 801236c:	5ccb      	ldrb	r3, [r1, r3]
 801236e:	f003 031f 	and.w	r3, r3, #31
 8012372:	fa22 f303 	lsr.w	r3, r2, r3
 8012376:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8012378:	4b0a      	ldr	r3, [pc, #40]	@ (80123a4 <HAL_RCC_GetHCLKFreq+0x50>)
 801237a:	699b      	ldr	r3, [r3, #24]
 801237c:	f003 030f 	and.w	r3, r3, #15
 8012380:	4a09      	ldr	r2, [pc, #36]	@ (80123a8 <HAL_RCC_GetHCLKFreq+0x54>)
 8012382:	5cd3      	ldrb	r3, [r2, r3]
 8012384:	f003 031f 	and.w	r3, r3, #31
 8012388:	687a      	ldr	r2, [r7, #4]
 801238a:	fa22 f303 	lsr.w	r3, r2, r3
 801238e:	4a07      	ldr	r2, [pc, #28]	@ (80123ac <HAL_RCC_GetHCLKFreq+0x58>)
 8012390:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8012392:	4a07      	ldr	r2, [pc, #28]	@ (80123b0 <HAL_RCC_GetHCLKFreq+0x5c>)
 8012394:	687b      	ldr	r3, [r7, #4]
 8012396:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8012398:	4b04      	ldr	r3, [pc, #16]	@ (80123ac <HAL_RCC_GetHCLKFreq+0x58>)
 801239a:	681b      	ldr	r3, [r3, #0]
}
 801239c:	4618      	mov	r0, r3
 801239e:	3708      	adds	r7, #8
 80123a0:	46bd      	mov	sp, r7
 80123a2:	bd80      	pop	{r7, pc}
 80123a4:	58024400 	.word	0x58024400
 80123a8:	0801bd88 	.word	0x0801bd88
 80123ac:	24000004 	.word	0x24000004
 80123b0:	24000000 	.word	0x24000000

080123b4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80123b4:	b580      	push	{r7, lr}
 80123b6:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 80123b8:	f7ff ffcc 	bl	8012354 <HAL_RCC_GetHCLKFreq>
 80123bc:	4602      	mov	r2, r0
 80123be:	4b06      	ldr	r3, [pc, #24]	@ (80123d8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80123c0:	69db      	ldr	r3, [r3, #28]
 80123c2:	091b      	lsrs	r3, r3, #4
 80123c4:	f003 0307 	and.w	r3, r3, #7
 80123c8:	4904      	ldr	r1, [pc, #16]	@ (80123dc <HAL_RCC_GetPCLK1Freq+0x28>)
 80123ca:	5ccb      	ldrb	r3, [r1, r3]
 80123cc:	f003 031f 	and.w	r3, r3, #31
 80123d0:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 80123d4:	4618      	mov	r0, r3
 80123d6:	bd80      	pop	{r7, pc}
 80123d8:	58024400 	.word	0x58024400
 80123dc:	0801bd88 	.word	0x0801bd88

080123e0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80123e0:	b580      	push	{r7, lr}
 80123e2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 80123e4:	f7ff ffb6 	bl	8012354 <HAL_RCC_GetHCLKFreq>
 80123e8:	4602      	mov	r2, r0
 80123ea:	4b06      	ldr	r3, [pc, #24]	@ (8012404 <HAL_RCC_GetPCLK2Freq+0x24>)
 80123ec:	69db      	ldr	r3, [r3, #28]
 80123ee:	0a1b      	lsrs	r3, r3, #8
 80123f0:	f003 0307 	and.w	r3, r3, #7
 80123f4:	4904      	ldr	r1, [pc, #16]	@ (8012408 <HAL_RCC_GetPCLK2Freq+0x28>)
 80123f6:	5ccb      	ldrb	r3, [r1, r3]
 80123f8:	f003 031f 	and.w	r3, r3, #31
 80123fc:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8012400:	4618      	mov	r0, r3
 8012402:	bd80      	pop	{r7, pc}
 8012404:	58024400 	.word	0x58024400
 8012408:	0801bd88 	.word	0x0801bd88

0801240c <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 801240c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8012410:	b0cc      	sub	sp, #304	@ 0x130
 8012412:	af00      	add	r7, sp, #0
 8012414:	f8c7 011c 	str.w	r0, [r7, #284]	@ 0x11c
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8012418:	2300      	movs	r3, #0
 801241a:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 801241e:	2300      	movs	r3, #0
 8012420:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8012424:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8012428:	e9d3 2300 	ldrd	r2, r3, [r3]
 801242c:	f002 6400 	and.w	r4, r2, #134217728	@ 0x8000000
 8012430:	2500      	movs	r5, #0
 8012432:	ea54 0305 	orrs.w	r3, r4, r5
 8012436:	d049      	beq.n	80124cc <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 8012438:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 801243c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 801243e:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8012442:	d02f      	beq.n	80124a4 <HAL_RCCEx_PeriphCLKConfig+0x98>
 8012444:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8012448:	d828      	bhi.n	801249c <HAL_RCCEx_PeriphCLKConfig+0x90>
 801244a:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 801244e:	d01a      	beq.n	8012486 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8012450:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8012454:	d822      	bhi.n	801249c <HAL_RCCEx_PeriphCLKConfig+0x90>
 8012456:	2b00      	cmp	r3, #0
 8012458:	d003      	beq.n	8012462 <HAL_RCCEx_PeriphCLKConfig+0x56>
 801245a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 801245e:	d007      	beq.n	8012470 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8012460:	e01c      	b.n	801249c <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8012462:	4bb8      	ldr	r3, [pc, #736]	@ (8012744 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8012464:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8012466:	4ab7      	ldr	r2, [pc, #732]	@ (8012744 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8012468:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 801246c:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 801246e:	e01a      	b.n	80124a6 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8012470:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8012474:	3308      	adds	r3, #8
 8012476:	2102      	movs	r1, #2
 8012478:	4618      	mov	r0, r3
 801247a:	f002 fba1 	bl	8014bc0 <RCCEx_PLL2_Config>
 801247e:	4603      	mov	r3, r0
 8012480:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8012484:	e00f      	b.n	80124a6 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8012486:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 801248a:	3328      	adds	r3, #40	@ 0x28
 801248c:	2102      	movs	r1, #2
 801248e:	4618      	mov	r0, r3
 8012490:	f002 fc48 	bl	8014d24 <RCCEx_PLL3_Config>
 8012494:	4603      	mov	r3, r0
 8012496:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 801249a:	e004      	b.n	80124a6 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 801249c:	2301      	movs	r3, #1
 801249e:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 80124a2:	e000      	b.n	80124a6 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 80124a4:	bf00      	nop
    }

    if (ret == HAL_OK)
 80124a6:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 80124aa:	2b00      	cmp	r3, #0
 80124ac:	d10a      	bne.n	80124c4 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 80124ae:	4ba5      	ldr	r3, [pc, #660]	@ (8012744 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80124b0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80124b2:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 80124b6:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80124ba:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80124bc:	4aa1      	ldr	r2, [pc, #644]	@ (8012744 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80124be:	430b      	orrs	r3, r1
 80124c0:	6513      	str	r3, [r2, #80]	@ 0x50
 80124c2:	e003      	b.n	80124cc <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80124c4:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 80124c8:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 80124cc:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80124d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80124d4:	f402 7880 	and.w	r8, r2, #256	@ 0x100
 80124d8:	f04f 0900 	mov.w	r9, #0
 80124dc:	ea58 0309 	orrs.w	r3, r8, r9
 80124e0:	d047      	beq.n	8012572 <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 80124e2:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80124e6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80124e8:	2b04      	cmp	r3, #4
 80124ea:	d82a      	bhi.n	8012542 <HAL_RCCEx_PeriphCLKConfig+0x136>
 80124ec:	a201      	add	r2, pc, #4	@ (adr r2, 80124f4 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 80124ee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80124f2:	bf00      	nop
 80124f4:	08012509 	.word	0x08012509
 80124f8:	08012517 	.word	0x08012517
 80124fc:	0801252d 	.word	0x0801252d
 8012500:	0801254b 	.word	0x0801254b
 8012504:	0801254b 	.word	0x0801254b
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8012508:	4b8e      	ldr	r3, [pc, #568]	@ (8012744 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 801250a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801250c:	4a8d      	ldr	r2, [pc, #564]	@ (8012744 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 801250e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8012512:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8012514:	e01a      	b.n	801254c <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8012516:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 801251a:	3308      	adds	r3, #8
 801251c:	2100      	movs	r1, #0
 801251e:	4618      	mov	r0, r3
 8012520:	f002 fb4e 	bl	8014bc0 <RCCEx_PLL2_Config>
 8012524:	4603      	mov	r3, r0
 8012526:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 801252a:	e00f      	b.n	801254c <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 801252c:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8012530:	3328      	adds	r3, #40	@ 0x28
 8012532:	2100      	movs	r1, #0
 8012534:	4618      	mov	r0, r3
 8012536:	f002 fbf5 	bl	8014d24 <RCCEx_PLL3_Config>
 801253a:	4603      	mov	r3, r0
 801253c:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8012540:	e004      	b.n	801254c <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8012542:	2301      	movs	r3, #1
 8012544:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 8012548:	e000      	b.n	801254c <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 801254a:	bf00      	nop
    }

    if (ret == HAL_OK)
 801254c:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8012550:	2b00      	cmp	r3, #0
 8012552:	d10a      	bne.n	801256a <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8012554:	4b7b      	ldr	r3, [pc, #492]	@ (8012744 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8012556:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8012558:	f023 0107 	bic.w	r1, r3, #7
 801255c:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8012560:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8012562:	4a78      	ldr	r2, [pc, #480]	@ (8012744 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8012564:	430b      	orrs	r3, r1
 8012566:	6513      	str	r3, [r2, #80]	@ 0x50
 8012568:	e003      	b.n	8012572 <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 801256a:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 801256e:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 8012572:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8012576:	e9d3 2300 	ldrd	r2, r3, [r3]
 801257a:	f402 7a00 	and.w	sl, r2, #512	@ 0x200
 801257e:	f04f 0b00 	mov.w	fp, #0
 8012582:	ea5a 030b 	orrs.w	r3, sl, fp
 8012586:	d04c      	beq.n	8012622 <HAL_RCCEx_PeriphCLKConfig+0x216>
  {
    switch (PeriphClkInit->Sai23ClockSelection)
 8012588:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 801258c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 801258e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8012592:	d030      	beq.n	80125f6 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
 8012594:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8012598:	d829      	bhi.n	80125ee <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 801259a:	2bc0      	cmp	r3, #192	@ 0xc0
 801259c:	d02d      	beq.n	80125fa <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 801259e:	2bc0      	cmp	r3, #192	@ 0xc0
 80125a0:	d825      	bhi.n	80125ee <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 80125a2:	2b80      	cmp	r3, #128	@ 0x80
 80125a4:	d018      	beq.n	80125d8 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 80125a6:	2b80      	cmp	r3, #128	@ 0x80
 80125a8:	d821      	bhi.n	80125ee <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 80125aa:	2b00      	cmp	r3, #0
 80125ac:	d002      	beq.n	80125b4 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
 80125ae:	2b40      	cmp	r3, #64	@ 0x40
 80125b0:	d007      	beq.n	80125c2 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
 80125b2:	e01c      	b.n	80125ee <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    {
      case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80125b4:	4b63      	ldr	r3, [pc, #396]	@ (8012744 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80125b6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80125b8:	4a62      	ldr	r2, [pc, #392]	@ (8012744 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80125ba:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80125be:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 80125c0:	e01c      	b.n	80125fc <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80125c2:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80125c6:	3308      	adds	r3, #8
 80125c8:	2100      	movs	r1, #0
 80125ca:	4618      	mov	r0, r3
 80125cc:	f002 faf8 	bl	8014bc0 <RCCEx_PLL2_Config>
 80125d0:	4603      	mov	r3, r0
 80125d2:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 80125d6:	e011      	b.n	80125fc <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80125d8:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80125dc:	3328      	adds	r3, #40	@ 0x28
 80125de:	2100      	movs	r1, #0
 80125e0:	4618      	mov	r0, r3
 80125e2:	f002 fb9f 	bl	8014d24 <RCCEx_PLL3_Config>
 80125e6:	4603      	mov	r3, r0
 80125e8:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 80125ec:	e006      	b.n	80125fc <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
        /* SAI2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80125ee:	2301      	movs	r3, #1
 80125f0:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 80125f4:	e002      	b.n	80125fc <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 80125f6:	bf00      	nop
 80125f8:	e000      	b.n	80125fc <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 80125fa:	bf00      	nop
    }

    if (ret == HAL_OK)
 80125fc:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8012600:	2b00      	cmp	r3, #0
 8012602:	d10a      	bne.n	801261a <HAL_RCCEx_PeriphCLKConfig+0x20e>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 8012604:	4b4f      	ldr	r3, [pc, #316]	@ (8012744 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8012606:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8012608:	f423 71e0 	bic.w	r1, r3, #448	@ 0x1c0
 801260c:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8012610:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8012612:	4a4c      	ldr	r2, [pc, #304]	@ (8012744 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8012614:	430b      	orrs	r3, r1
 8012616:	6513      	str	r3, [r2, #80]	@ 0x50
 8012618:	e003      	b.n	8012622 <HAL_RCCEx_PeriphCLKConfig+0x216>
    }
    else
    {
      /* set overall return value */
      status = ret;
 801261a:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 801261e:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8012622:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8012626:	e9d3 2300 	ldrd	r2, r3, [r3]
 801262a:	f402 6380 	and.w	r3, r2, #1024	@ 0x400
 801262e:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
 8012632:	2300      	movs	r3, #0
 8012634:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
 8012638:	e9d7 1244 	ldrd	r1, r2, [r7, #272]	@ 0x110
 801263c:	460b      	mov	r3, r1
 801263e:	4313      	orrs	r3, r2
 8012640:	d053      	beq.n	80126ea <HAL_RCCEx_PeriphCLKConfig+0x2de>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 8012642:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8012646:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 801264a:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 801264e:	d035      	beq.n	80126bc <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 8012650:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8012654:	d82e      	bhi.n	80126b4 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8012656:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 801265a:	d031      	beq.n	80126c0 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 801265c:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8012660:	d828      	bhi.n	80126b4 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8012662:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8012666:	d01a      	beq.n	801269e <HAL_RCCEx_PeriphCLKConfig+0x292>
 8012668:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 801266c:	d822      	bhi.n	80126b4 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 801266e:	2b00      	cmp	r3, #0
 8012670:	d003      	beq.n	801267a <HAL_RCCEx_PeriphCLKConfig+0x26e>
 8012672:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8012676:	d007      	beq.n	8012688 <HAL_RCCEx_PeriphCLKConfig+0x27c>
 8012678:	e01c      	b.n	80126b4 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 801267a:	4b32      	ldr	r3, [pc, #200]	@ (8012744 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 801267c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801267e:	4a31      	ldr	r2, [pc, #196]	@ (8012744 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8012680:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8012684:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8012686:	e01c      	b.n	80126c2 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8012688:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 801268c:	3308      	adds	r3, #8
 801268e:	2100      	movs	r1, #0
 8012690:	4618      	mov	r0, r3
 8012692:	f002 fa95 	bl	8014bc0 <RCCEx_PLL2_Config>
 8012696:	4603      	mov	r3, r0
 8012698:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 801269c:	e011      	b.n	80126c2 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 801269e:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80126a2:	3328      	adds	r3, #40	@ 0x28
 80126a4:	2100      	movs	r1, #0
 80126a6:	4618      	mov	r0, r3
 80126a8:	f002 fb3c 	bl	8014d24 <RCCEx_PLL3_Config>
 80126ac:	4603      	mov	r3, r0
 80126ae:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80126b2:	e006      	b.n	80126c2 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 80126b4:	2301      	movs	r3, #1
 80126b6:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 80126ba:	e002      	b.n	80126c2 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 80126bc:	bf00      	nop
 80126be:	e000      	b.n	80126c2 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 80126c0:	bf00      	nop
    }

    if (ret == HAL_OK)
 80126c2:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 80126c6:	2b00      	cmp	r3, #0
 80126c8:	d10b      	bne.n	80126e2 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 80126ca:	4b1e      	ldr	r3, [pc, #120]	@ (8012744 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80126cc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80126ce:	f423 0160 	bic.w	r1, r3, #14680064	@ 0xe00000
 80126d2:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80126d6:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 80126da:	4a1a      	ldr	r2, [pc, #104]	@ (8012744 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80126dc:	430b      	orrs	r3, r1
 80126de:	6593      	str	r3, [r2, #88]	@ 0x58
 80126e0:	e003      	b.n	80126ea <HAL_RCCEx_PeriphCLKConfig+0x2de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80126e2:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 80126e6:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 80126ea:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80126ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80126f2:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 80126f6:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
 80126fa:	2300      	movs	r3, #0
 80126fc:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
 8012700:	e9d7 1242 	ldrd	r1, r2, [r7, #264]	@ 0x108
 8012704:	460b      	mov	r3, r1
 8012706:	4313      	orrs	r3, r2
 8012708:	d056      	beq.n	80127b8 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 801270a:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 801270e:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8012712:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8012716:	d038      	beq.n	801278a <HAL_RCCEx_PeriphCLKConfig+0x37e>
 8012718:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 801271c:	d831      	bhi.n	8012782 <HAL_RCCEx_PeriphCLKConfig+0x376>
 801271e:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8012722:	d034      	beq.n	801278e <HAL_RCCEx_PeriphCLKConfig+0x382>
 8012724:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8012728:	d82b      	bhi.n	8012782 <HAL_RCCEx_PeriphCLKConfig+0x376>
 801272a:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 801272e:	d01d      	beq.n	801276c <HAL_RCCEx_PeriphCLKConfig+0x360>
 8012730:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8012734:	d825      	bhi.n	8012782 <HAL_RCCEx_PeriphCLKConfig+0x376>
 8012736:	2b00      	cmp	r3, #0
 8012738:	d006      	beq.n	8012748 <HAL_RCCEx_PeriphCLKConfig+0x33c>
 801273a:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 801273e:	d00a      	beq.n	8012756 <HAL_RCCEx_PeriphCLKConfig+0x34a>
 8012740:	e01f      	b.n	8012782 <HAL_RCCEx_PeriphCLKConfig+0x376>
 8012742:	bf00      	nop
 8012744:	58024400 	.word	0x58024400
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8012748:	4ba2      	ldr	r3, [pc, #648]	@ (80129d4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 801274a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801274c:	4aa1      	ldr	r2, [pc, #644]	@ (80129d4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 801274e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8012752:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8012754:	e01c      	b.n	8012790 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8012756:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 801275a:	3308      	adds	r3, #8
 801275c:	2100      	movs	r1, #0
 801275e:	4618      	mov	r0, r3
 8012760:	f002 fa2e 	bl	8014bc0 <RCCEx_PLL2_Config>
 8012764:	4603      	mov	r3, r0
 8012766:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 801276a:	e011      	b.n	8012790 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 801276c:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8012770:	3328      	adds	r3, #40	@ 0x28
 8012772:	2100      	movs	r1, #0
 8012774:	4618      	mov	r0, r3
 8012776:	f002 fad5 	bl	8014d24 <RCCEx_PLL3_Config>
 801277a:	4603      	mov	r3, r0
 801277c:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8012780:	e006      	b.n	8012790 <HAL_RCCEx_PeriphCLKConfig+0x384>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8012782:	2301      	movs	r3, #1
 8012784:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 8012788:	e002      	b.n	8012790 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 801278a:	bf00      	nop
 801278c:	e000      	b.n	8012790 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 801278e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8012790:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8012794:	2b00      	cmp	r3, #0
 8012796:	d10b      	bne.n	80127b0 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8012798:	4b8e      	ldr	r3, [pc, #568]	@ (80129d4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 801279a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 801279c:	f023 61e0 	bic.w	r1, r3, #117440512	@ 0x7000000
 80127a0:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80127a4:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 80127a8:	4a8a      	ldr	r2, [pc, #552]	@ (80129d4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80127aa:	430b      	orrs	r3, r1
 80127ac:	6593      	str	r3, [r2, #88]	@ 0x58
 80127ae:	e003      	b.n	80127b8 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80127b0:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 80127b4:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 80127b8:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80127bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80127c0:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 80127c4:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 80127c8:	2300      	movs	r3, #0
 80127ca:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 80127ce:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	@ 0x100
 80127d2:	460b      	mov	r3, r1
 80127d4:	4313      	orrs	r3, r2
 80127d6:	d03a      	beq.n	801284e <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    switch (PeriphClkInit->QspiClockSelection)
 80127d8:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80127dc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80127de:	2b30      	cmp	r3, #48	@ 0x30
 80127e0:	d01f      	beq.n	8012822 <HAL_RCCEx_PeriphCLKConfig+0x416>
 80127e2:	2b30      	cmp	r3, #48	@ 0x30
 80127e4:	d819      	bhi.n	801281a <HAL_RCCEx_PeriphCLKConfig+0x40e>
 80127e6:	2b20      	cmp	r3, #32
 80127e8:	d00c      	beq.n	8012804 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 80127ea:	2b20      	cmp	r3, #32
 80127ec:	d815      	bhi.n	801281a <HAL_RCCEx_PeriphCLKConfig+0x40e>
 80127ee:	2b00      	cmp	r3, #0
 80127f0:	d019      	beq.n	8012826 <HAL_RCCEx_PeriphCLKConfig+0x41a>
 80127f2:	2b10      	cmp	r3, #16
 80127f4:	d111      	bne.n	801281a <HAL_RCCEx_PeriphCLKConfig+0x40e>
    {
      case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
        /* Enable QSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80127f6:	4b77      	ldr	r3, [pc, #476]	@ (80129d4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80127f8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80127fa:	4a76      	ldr	r2, [pc, #472]	@ (80129d4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80127fc:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8012800:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* QSPI clock source configuration done later after clock selection check */
        break;
 8012802:	e011      	b.n	8012828 <HAL_RCCEx_PeriphCLKConfig+0x41c>

      case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8012804:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8012808:	3308      	adds	r3, #8
 801280a:	2102      	movs	r1, #2
 801280c:	4618      	mov	r0, r3
 801280e:	f002 f9d7 	bl	8014bc0 <RCCEx_PLL2_Config>
 8012812:	4603      	mov	r3, r0
 8012814:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* QSPI clock source configuration done later after clock selection check */
        break;
 8012818:	e006      	b.n	8012828 <HAL_RCCEx_PeriphCLKConfig+0x41c>
      case RCC_QSPICLKSOURCE_D1HCLK:
        /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 801281a:	2301      	movs	r3, #1
 801281c:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 8012820:	e002      	b.n	8012828 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 8012822:	bf00      	nop
 8012824:	e000      	b.n	8012828 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 8012826:	bf00      	nop
    }

    if (ret == HAL_OK)
 8012828:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 801282c:	2b00      	cmp	r3, #0
 801282e:	d10a      	bne.n	8012846 <HAL_RCCEx_PeriphCLKConfig+0x43a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8012830:	4b68      	ldr	r3, [pc, #416]	@ (80129d4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8012832:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8012834:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 8012838:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 801283c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 801283e:	4a65      	ldr	r2, [pc, #404]	@ (80129d4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8012840:	430b      	orrs	r3, r1
 8012842:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8012844:	e003      	b.n	801284e <HAL_RCCEx_PeriphCLKConfig+0x442>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8012846:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 801284a:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 801284e:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8012852:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012856:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 801285a:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 801285e:	2300      	movs	r3, #0
 8012860:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8012864:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	@ 0xf8
 8012868:	460b      	mov	r3, r1
 801286a:	4313      	orrs	r3, r2
 801286c:	d051      	beq.n	8012912 <HAL_RCCEx_PeriphCLKConfig+0x506>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 801286e:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8012872:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8012874:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8012878:	d035      	beq.n	80128e6 <HAL_RCCEx_PeriphCLKConfig+0x4da>
 801287a:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 801287e:	d82e      	bhi.n	80128de <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8012880:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8012884:	d031      	beq.n	80128ea <HAL_RCCEx_PeriphCLKConfig+0x4de>
 8012886:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 801288a:	d828      	bhi.n	80128de <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 801288c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8012890:	d01a      	beq.n	80128c8 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
 8012892:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8012896:	d822      	bhi.n	80128de <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8012898:	2b00      	cmp	r3, #0
 801289a:	d003      	beq.n	80128a4 <HAL_RCCEx_PeriphCLKConfig+0x498>
 801289c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80128a0:	d007      	beq.n	80128b2 <HAL_RCCEx_PeriphCLKConfig+0x4a6>
 80128a2:	e01c      	b.n	80128de <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80128a4:	4b4b      	ldr	r3, [pc, #300]	@ (80129d4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80128a6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80128a8:	4a4a      	ldr	r2, [pc, #296]	@ (80129d4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80128aa:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80128ae:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 80128b0:	e01c      	b.n	80128ec <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80128b2:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80128b6:	3308      	adds	r3, #8
 80128b8:	2100      	movs	r1, #0
 80128ba:	4618      	mov	r0, r3
 80128bc:	f002 f980 	bl	8014bc0 <RCCEx_PLL2_Config>
 80128c0:	4603      	mov	r3, r0
 80128c2:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 80128c6:	e011      	b.n	80128ec <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80128c8:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80128cc:	3328      	adds	r3, #40	@ 0x28
 80128ce:	2100      	movs	r1, #0
 80128d0:	4618      	mov	r0, r3
 80128d2:	f002 fa27 	bl	8014d24 <RCCEx_PLL3_Config>
 80128d6:	4603      	mov	r3, r0
 80128d8:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 80128dc:	e006      	b.n	80128ec <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80128de:	2301      	movs	r3, #1
 80128e0:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 80128e4:	e002      	b.n	80128ec <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 80128e6:	bf00      	nop
 80128e8:	e000      	b.n	80128ec <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 80128ea:	bf00      	nop
    }

    if (ret == HAL_OK)
 80128ec:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 80128f0:	2b00      	cmp	r3, #0
 80128f2:	d10a      	bne.n	801290a <HAL_RCCEx_PeriphCLKConfig+0x4fe>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 80128f4:	4b37      	ldr	r3, [pc, #220]	@ (80129d4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80128f6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80128f8:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 80128fc:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8012900:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8012902:	4a34      	ldr	r2, [pc, #208]	@ (80129d4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8012904:	430b      	orrs	r3, r1
 8012906:	6513      	str	r3, [r2, #80]	@ 0x50
 8012908:	e003      	b.n	8012912 <HAL_RCCEx_PeriphCLKConfig+0x506>
    }
    else
    {
      /* set overall return value */
      status = ret;
 801290a:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 801290e:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8012912:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8012916:	e9d3 2300 	ldrd	r2, r3, [r3]
 801291a:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 801291e:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8012922:	2300      	movs	r3, #0
 8012924:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8012928:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	@ 0xf0
 801292c:	460b      	mov	r3, r1
 801292e:	4313      	orrs	r3, r2
 8012930:	d056      	beq.n	80129e0 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 8012932:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8012936:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8012938:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 801293c:	d033      	beq.n	80129a6 <HAL_RCCEx_PeriphCLKConfig+0x59a>
 801293e:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8012942:	d82c      	bhi.n	801299e <HAL_RCCEx_PeriphCLKConfig+0x592>
 8012944:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8012948:	d02f      	beq.n	80129aa <HAL_RCCEx_PeriphCLKConfig+0x59e>
 801294a:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 801294e:	d826      	bhi.n	801299e <HAL_RCCEx_PeriphCLKConfig+0x592>
 8012950:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8012954:	d02b      	beq.n	80129ae <HAL_RCCEx_PeriphCLKConfig+0x5a2>
 8012956:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 801295a:	d820      	bhi.n	801299e <HAL_RCCEx_PeriphCLKConfig+0x592>
 801295c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8012960:	d012      	beq.n	8012988 <HAL_RCCEx_PeriphCLKConfig+0x57c>
 8012962:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8012966:	d81a      	bhi.n	801299e <HAL_RCCEx_PeriphCLKConfig+0x592>
 8012968:	2b00      	cmp	r3, #0
 801296a:	d022      	beq.n	80129b2 <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 801296c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8012970:	d115      	bne.n	801299e <HAL_RCCEx_PeriphCLKConfig+0x592>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8012972:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8012976:	3308      	adds	r3, #8
 8012978:	2101      	movs	r1, #1
 801297a:	4618      	mov	r0, r3
 801297c:	f002 f920 	bl	8014bc0 <RCCEx_PLL2_Config>
 8012980:	4603      	mov	r3, r0
 8012982:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8012986:	e015      	b.n	80129b4 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8012988:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 801298c:	3328      	adds	r3, #40	@ 0x28
 801298e:	2101      	movs	r1, #1
 8012990:	4618      	mov	r0, r3
 8012992:	f002 f9c7 	bl	8014d24 <RCCEx_PLL3_Config>
 8012996:	4603      	mov	r3, r0
 8012998:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 801299c:	e00a      	b.n	80129b4 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 801299e:	2301      	movs	r3, #1
 80129a0:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 80129a4:	e006      	b.n	80129b4 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 80129a6:	bf00      	nop
 80129a8:	e004      	b.n	80129b4 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 80129aa:	bf00      	nop
 80129ac:	e002      	b.n	80129b4 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 80129ae:	bf00      	nop
 80129b0:	e000      	b.n	80129b4 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 80129b2:	bf00      	nop
    }

    if (ret == HAL_OK)
 80129b4:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 80129b8:	2b00      	cmp	r3, #0
 80129ba:	d10d      	bne.n	80129d8 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 80129bc:	4b05      	ldr	r3, [pc, #20]	@ (80129d4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80129be:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80129c0:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 80129c4:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80129c8:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80129ca:	4a02      	ldr	r2, [pc, #8]	@ (80129d4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80129cc:	430b      	orrs	r3, r1
 80129ce:	6513      	str	r3, [r2, #80]	@ 0x50
 80129d0:	e006      	b.n	80129e0 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 80129d2:	bf00      	nop
 80129d4:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80129d8:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 80129dc:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 80129e0:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80129e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80129e8:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 80129ec:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 80129f0:	2300      	movs	r3, #0
 80129f2:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 80129f6:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	@ 0xe8
 80129fa:	460b      	mov	r3, r1
 80129fc:	4313      	orrs	r3, r2
 80129fe:	d055      	beq.n	8012aac <HAL_RCCEx_PeriphCLKConfig+0x6a0>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 8012a00:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8012a04:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8012a08:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8012a0c:	d033      	beq.n	8012a76 <HAL_RCCEx_PeriphCLKConfig+0x66a>
 8012a0e:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8012a12:	d82c      	bhi.n	8012a6e <HAL_RCCEx_PeriphCLKConfig+0x662>
 8012a14:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8012a18:	d02f      	beq.n	8012a7a <HAL_RCCEx_PeriphCLKConfig+0x66e>
 8012a1a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8012a1e:	d826      	bhi.n	8012a6e <HAL_RCCEx_PeriphCLKConfig+0x662>
 8012a20:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8012a24:	d02b      	beq.n	8012a7e <HAL_RCCEx_PeriphCLKConfig+0x672>
 8012a26:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8012a2a:	d820      	bhi.n	8012a6e <HAL_RCCEx_PeriphCLKConfig+0x662>
 8012a2c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8012a30:	d012      	beq.n	8012a58 <HAL_RCCEx_PeriphCLKConfig+0x64c>
 8012a32:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8012a36:	d81a      	bhi.n	8012a6e <HAL_RCCEx_PeriphCLKConfig+0x662>
 8012a38:	2b00      	cmp	r3, #0
 8012a3a:	d022      	beq.n	8012a82 <HAL_RCCEx_PeriphCLKConfig+0x676>
 8012a3c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8012a40:	d115      	bne.n	8012a6e <HAL_RCCEx_PeriphCLKConfig+0x662>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8012a42:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8012a46:	3308      	adds	r3, #8
 8012a48:	2101      	movs	r1, #1
 8012a4a:	4618      	mov	r0, r3
 8012a4c:	f002 f8b8 	bl	8014bc0 <RCCEx_PLL2_Config>
 8012a50:	4603      	mov	r3, r0
 8012a52:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8012a56:	e015      	b.n	8012a84 <HAL_RCCEx_PeriphCLKConfig+0x678>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8012a58:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8012a5c:	3328      	adds	r3, #40	@ 0x28
 8012a5e:	2101      	movs	r1, #1
 8012a60:	4618      	mov	r0, r3
 8012a62:	f002 f95f 	bl	8014d24 <RCCEx_PLL3_Config>
 8012a66:	4603      	mov	r3, r0
 8012a68:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8012a6c:	e00a      	b.n	8012a84 <HAL_RCCEx_PeriphCLKConfig+0x678>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 8012a6e:	2301      	movs	r3, #1
 8012a70:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 8012a74:	e006      	b.n	8012a84 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8012a76:	bf00      	nop
 8012a78:	e004      	b.n	8012a84 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8012a7a:	bf00      	nop
 8012a7c:	e002      	b.n	8012a84 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8012a7e:	bf00      	nop
 8012a80:	e000      	b.n	8012a84 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8012a82:	bf00      	nop
    }

    if (ret == HAL_OK)
 8012a84:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8012a88:	2b00      	cmp	r3, #0
 8012a8a:	d10b      	bne.n	8012aa4 <HAL_RCCEx_PeriphCLKConfig+0x698>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8012a8c:	4bb6      	ldr	r3, [pc, #728]	@ (8012d68 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8012a8e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8012a90:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 8012a94:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8012a98:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8012a9c:	4ab2      	ldr	r2, [pc, #712]	@ (8012d68 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8012a9e:	430b      	orrs	r3, r1
 8012aa0:	6593      	str	r3, [r2, #88]	@ 0x58
 8012aa2:	e003      	b.n	8012aac <HAL_RCCEx_PeriphCLKConfig+0x6a0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8012aa4:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8012aa8:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }

#if defined(DSI)
  /*---------------------------- DSI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DSI) == RCC_PERIPHCLK_DSI)
 8012aac:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8012ab0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012ab4:	f002 6380 	and.w	r3, r2, #67108864	@ 0x4000000
 8012ab8:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8012abc:	2300      	movs	r3, #0
 8012abe:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8012ac2:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	@ 0xe0
 8012ac6:	460b      	mov	r3, r1
 8012ac8:	4313      	orrs	r3, r2
 8012aca:	d02a      	beq.n	8012b22 <HAL_RCCEx_PeriphCLKConfig+0x716>
  {
    switch (PeriphClkInit->DsiClockSelection)
 8012acc:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8012ad0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8012ad2:	2b00      	cmp	r3, #0
 8012ad4:	d011      	beq.n	8012afa <HAL_RCCEx_PeriphCLKConfig+0x6ee>
 8012ad6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8012ada:	d10a      	bne.n	8012af2 <HAL_RCCEx_PeriphCLKConfig+0x6e6>
    {

      case RCC_DSICLKSOURCE_PLL2: /* PLL2 is used as clock source for DSI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8012adc:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8012ae0:	3308      	adds	r3, #8
 8012ae2:	2101      	movs	r1, #1
 8012ae4:	4618      	mov	r0, r3
 8012ae6:	f002 f86b 	bl	8014bc0 <RCCEx_PLL2_Config>
 8012aea:	4603      	mov	r3, r0
 8012aec:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* DSI clock source configuration done later after clock selection check */
        break;
 8012af0:	e004      	b.n	8012afc <HAL_RCCEx_PeriphCLKConfig+0x6f0>
        /* PHY is used as clock source for DSI*/
        /* DSI clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8012af2:	2301      	movs	r3, #1
 8012af4:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 8012af8:	e000      	b.n	8012afc <HAL_RCCEx_PeriphCLKConfig+0x6f0>
        break;
 8012afa:	bf00      	nop
    }

    if (ret == HAL_OK)
 8012afc:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8012b00:	2b00      	cmp	r3, #0
 8012b02:	d10a      	bne.n	8012b1a <HAL_RCCEx_PeriphCLKConfig+0x70e>
    {
      /* Set the source of DSI clock*/
      __HAL_RCC_DSI_CONFIG(PeriphClkInit->DsiClockSelection);
 8012b04:	4b98      	ldr	r3, [pc, #608]	@ (8012d68 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8012b06:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8012b08:	f423 7180 	bic.w	r1, r3, #256	@ 0x100
 8012b0c:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8012b10:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8012b12:	4a95      	ldr	r2, [pc, #596]	@ (8012d68 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8012b14:	430b      	orrs	r3, r1
 8012b16:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8012b18:	e003      	b.n	8012b22 <HAL_RCCEx_PeriphCLKConfig+0x716>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8012b1a:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8012b1e:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8012b22:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8012b26:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012b2a:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 8012b2e:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8012b32:	2300      	movs	r3, #0
 8012b34:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8012b38:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8012b3c:	460b      	mov	r3, r1
 8012b3e:	4313      	orrs	r3, r2
 8012b40:	d037      	beq.n	8012bb2 <HAL_RCCEx_PeriphCLKConfig+0x7a6>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 8012b42:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8012b46:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8012b48:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8012b4c:	d00e      	beq.n	8012b6c <HAL_RCCEx_PeriphCLKConfig+0x760>
 8012b4e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8012b52:	d816      	bhi.n	8012b82 <HAL_RCCEx_PeriphCLKConfig+0x776>
 8012b54:	2b00      	cmp	r3, #0
 8012b56:	d018      	beq.n	8012b8a <HAL_RCCEx_PeriphCLKConfig+0x77e>
 8012b58:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8012b5c:	d111      	bne.n	8012b82 <HAL_RCCEx_PeriphCLKConfig+0x776>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8012b5e:	4b82      	ldr	r3, [pc, #520]	@ (8012d68 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8012b60:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8012b62:	4a81      	ldr	r2, [pc, #516]	@ (8012d68 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8012b64:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8012b68:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8012b6a:	e00f      	b.n	8012b8c <HAL_RCCEx_PeriphCLKConfig+0x780>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8012b6c:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8012b70:	3308      	adds	r3, #8
 8012b72:	2101      	movs	r1, #1
 8012b74:	4618      	mov	r0, r3
 8012b76:	f002 f823 	bl	8014bc0 <RCCEx_PLL2_Config>
 8012b7a:	4603      	mov	r3, r0
 8012b7c:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8012b80:	e004      	b.n	8012b8c <HAL_RCCEx_PeriphCLKConfig+0x780>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8012b82:	2301      	movs	r3, #1
 8012b84:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 8012b88:	e000      	b.n	8012b8c <HAL_RCCEx_PeriphCLKConfig+0x780>
        break;
 8012b8a:	bf00      	nop
    }

    if (ret == HAL_OK)
 8012b8c:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8012b90:	2b00      	cmp	r3, #0
 8012b92:	d10a      	bne.n	8012baa <HAL_RCCEx_PeriphCLKConfig+0x79e>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8012b94:	4b74      	ldr	r3, [pc, #464]	@ (8012d68 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8012b96:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8012b98:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 8012b9c:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8012ba0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8012ba2:	4a71      	ldr	r2, [pc, #452]	@ (8012d68 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8012ba4:	430b      	orrs	r3, r1
 8012ba6:	6513      	str	r3, [r2, #80]	@ 0x50
 8012ba8:	e003      	b.n	8012bb2 <HAL_RCCEx_PeriphCLKConfig+0x7a6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8012baa:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8012bae:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8012bb2:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8012bb6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012bba:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
 8012bbe:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8012bc2:	2300      	movs	r3, #0
 8012bc4:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 8012bc8:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	@ 0xd0
 8012bcc:	460b      	mov	r3, r1
 8012bce:	4313      	orrs	r3, r2
 8012bd0:	d03a      	beq.n	8012c48 <HAL_RCCEx_PeriphCLKConfig+0x83c>
  {
    switch (PeriphClkInit->FmcClockSelection)
 8012bd2:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8012bd6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8012bd8:	2b03      	cmp	r3, #3
 8012bda:	d81d      	bhi.n	8012c18 <HAL_RCCEx_PeriphCLKConfig+0x80c>
 8012bdc:	a201      	add	r2, pc, #4	@ (adr r2, 8012be4 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8012bde:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8012be2:	bf00      	nop
 8012be4:	08012c21 	.word	0x08012c21
 8012be8:	08012bf5 	.word	0x08012bf5
 8012bec:	08012c03 	.word	0x08012c03
 8012bf0:	08012c21 	.word	0x08012c21
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8012bf4:	4b5c      	ldr	r3, [pc, #368]	@ (8012d68 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8012bf6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8012bf8:	4a5b      	ldr	r2, [pc, #364]	@ (8012d68 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8012bfa:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8012bfe:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 8012c00:	e00f      	b.n	8012c22 <HAL_RCCEx_PeriphCLKConfig+0x816>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8012c02:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8012c06:	3308      	adds	r3, #8
 8012c08:	2102      	movs	r1, #2
 8012c0a:	4618      	mov	r0, r3
 8012c0c:	f001 ffd8 	bl	8014bc0 <RCCEx_PLL2_Config>
 8012c10:	4603      	mov	r3, r0
 8012c12:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* FMC clock source configuration done later after clock selection check */
        break;
 8012c16:	e004      	b.n	8012c22 <HAL_RCCEx_PeriphCLKConfig+0x816>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8012c18:	2301      	movs	r3, #1
 8012c1a:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 8012c1e:	e000      	b.n	8012c22 <HAL_RCCEx_PeriphCLKConfig+0x816>
        break;
 8012c20:	bf00      	nop
    }

    if (ret == HAL_OK)
 8012c22:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8012c26:	2b00      	cmp	r3, #0
 8012c28:	d10a      	bne.n	8012c40 <HAL_RCCEx_PeriphCLKConfig+0x834>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8012c2a:	4b4f      	ldr	r3, [pc, #316]	@ (8012d68 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8012c2c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8012c2e:	f023 0103 	bic.w	r1, r3, #3
 8012c32:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8012c36:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8012c38:	4a4b      	ldr	r2, [pc, #300]	@ (8012d68 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8012c3a:	430b      	orrs	r3, r1
 8012c3c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8012c3e:	e003      	b.n	8012c48 <HAL_RCCEx_PeriphCLKConfig+0x83c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8012c40:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8012c44:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8012c48:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8012c4c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012c50:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 8012c54:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8012c58:	2300      	movs	r3, #0
 8012c5a:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8012c5e:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 8012c62:	460b      	mov	r3, r1
 8012c64:	4313      	orrs	r3, r2
 8012c66:	f000 80a0 	beq.w	8012daa <HAL_RCCEx_PeriphCLKConfig+0x99e>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8012c6a:	4b40      	ldr	r3, [pc, #256]	@ (8012d6c <HAL_RCCEx_PeriphCLKConfig+0x960>)
 8012c6c:	681b      	ldr	r3, [r3, #0]
 8012c6e:	4a3f      	ldr	r2, [pc, #252]	@ (8012d6c <HAL_RCCEx_PeriphCLKConfig+0x960>)
 8012c70:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8012c74:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8012c76:	f7fd fe6f 	bl	8010958 <HAL_GetTick>
 8012c7a:	f8c7 0128 	str.w	r0, [r7, #296]	@ 0x128

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8012c7e:	e00b      	b.n	8012c98 <HAL_RCCEx_PeriphCLKConfig+0x88c>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8012c80:	f7fd fe6a 	bl	8010958 <HAL_GetTick>
 8012c84:	4602      	mov	r2, r0
 8012c86:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8012c8a:	1ad3      	subs	r3, r2, r3
 8012c8c:	2b64      	cmp	r3, #100	@ 0x64
 8012c8e:	d903      	bls.n	8012c98 <HAL_RCCEx_PeriphCLKConfig+0x88c>
      {
        ret = HAL_TIMEOUT;
 8012c90:	2303      	movs	r3, #3
 8012c92:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 8012c96:	e005      	b.n	8012ca4 <HAL_RCCEx_PeriphCLKConfig+0x898>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8012c98:	4b34      	ldr	r3, [pc, #208]	@ (8012d6c <HAL_RCCEx_PeriphCLKConfig+0x960>)
 8012c9a:	681b      	ldr	r3, [r3, #0]
 8012c9c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8012ca0:	2b00      	cmp	r3, #0
 8012ca2:	d0ed      	beq.n	8012c80 <HAL_RCCEx_PeriphCLKConfig+0x874>
      }
    }

    if (ret == HAL_OK)
 8012ca4:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8012ca8:	2b00      	cmp	r3, #0
 8012caa:	d17a      	bne.n	8012da2 <HAL_RCCEx_PeriphCLKConfig+0x996>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8012cac:	4b2e      	ldr	r3, [pc, #184]	@ (8012d68 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8012cae:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8012cb0:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8012cb4:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 8012cb8:	4053      	eors	r3, r2
 8012cba:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8012cbe:	2b00      	cmp	r3, #0
 8012cc0:	d015      	beq.n	8012cee <HAL_RCCEx_PeriphCLKConfig+0x8e2>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8012cc2:	4b29      	ldr	r3, [pc, #164]	@ (8012d68 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8012cc4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8012cc6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8012cca:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8012cce:	4b26      	ldr	r3, [pc, #152]	@ (8012d68 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8012cd0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8012cd2:	4a25      	ldr	r2, [pc, #148]	@ (8012d68 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8012cd4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8012cd8:	6713      	str	r3, [r2, #112]	@ 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8012cda:	4b23      	ldr	r3, [pc, #140]	@ (8012d68 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8012cdc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8012cde:	4a22      	ldr	r2, [pc, #136]	@ (8012d68 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8012ce0:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8012ce4:	6713      	str	r3, [r2, #112]	@ 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8012ce6:	4a20      	ldr	r2, [pc, #128]	@ (8012d68 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8012ce8:	f8d7 3124 	ldr.w	r3, [r7, #292]	@ 0x124
 8012cec:	6713      	str	r3, [r2, #112]	@ 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8012cee:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8012cf2:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 8012cf6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8012cfa:	d118      	bne.n	8012d2e <HAL_RCCEx_PeriphCLKConfig+0x922>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8012cfc:	f7fd fe2c 	bl	8010958 <HAL_GetTick>
 8012d00:	f8c7 0128 	str.w	r0, [r7, #296]	@ 0x128

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8012d04:	e00d      	b.n	8012d22 <HAL_RCCEx_PeriphCLKConfig+0x916>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8012d06:	f7fd fe27 	bl	8010958 <HAL_GetTick>
 8012d0a:	4602      	mov	r2, r0
 8012d0c:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8012d10:	1ad2      	subs	r2, r2, r3
 8012d12:	f241 3388 	movw	r3, #5000	@ 0x1388
 8012d16:	429a      	cmp	r2, r3
 8012d18:	d903      	bls.n	8012d22 <HAL_RCCEx_PeriphCLKConfig+0x916>
          {
            ret = HAL_TIMEOUT;
 8012d1a:	2303      	movs	r3, #3
 8012d1c:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
            break;
 8012d20:	e005      	b.n	8012d2e <HAL_RCCEx_PeriphCLKConfig+0x922>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8012d22:	4b11      	ldr	r3, [pc, #68]	@ (8012d68 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8012d24:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8012d26:	f003 0302 	and.w	r3, r3, #2
 8012d2a:	2b00      	cmp	r3, #0
 8012d2c:	d0eb      	beq.n	8012d06 <HAL_RCCEx_PeriphCLKConfig+0x8fa>
          }
        }
      }

      if (ret == HAL_OK)
 8012d2e:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8012d32:	2b00      	cmp	r3, #0
 8012d34:	d130      	bne.n	8012d98 <HAL_RCCEx_PeriphCLKConfig+0x98c>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8012d36:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8012d3a:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 8012d3e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8012d42:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8012d46:	d115      	bne.n	8012d74 <HAL_RCCEx_PeriphCLKConfig+0x968>
 8012d48:	4b07      	ldr	r3, [pc, #28]	@ (8012d68 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8012d4a:	691b      	ldr	r3, [r3, #16]
 8012d4c:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 8012d50:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8012d54:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 8012d58:	091a      	lsrs	r2, r3, #4
 8012d5a:	4b05      	ldr	r3, [pc, #20]	@ (8012d70 <HAL_RCCEx_PeriphCLKConfig+0x964>)
 8012d5c:	4013      	ands	r3, r2
 8012d5e:	4a02      	ldr	r2, [pc, #8]	@ (8012d68 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8012d60:	430b      	orrs	r3, r1
 8012d62:	6113      	str	r3, [r2, #16]
 8012d64:	e00c      	b.n	8012d80 <HAL_RCCEx_PeriphCLKConfig+0x974>
 8012d66:	bf00      	nop
 8012d68:	58024400 	.word	0x58024400
 8012d6c:	58024800 	.word	0x58024800
 8012d70:	00ffffcf 	.word	0x00ffffcf
 8012d74:	4bd4      	ldr	r3, [pc, #848]	@ (80130c8 <HAL_RCCEx_PeriphCLKConfig+0xcbc>)
 8012d76:	691b      	ldr	r3, [r3, #16]
 8012d78:	4ad3      	ldr	r2, [pc, #844]	@ (80130c8 <HAL_RCCEx_PeriphCLKConfig+0xcbc>)
 8012d7a:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8012d7e:	6113      	str	r3, [r2, #16]
 8012d80:	4bd1      	ldr	r3, [pc, #836]	@ (80130c8 <HAL_RCCEx_PeriphCLKConfig+0xcbc>)
 8012d82:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 8012d84:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8012d88:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 8012d8c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8012d90:	4acd      	ldr	r2, [pc, #820]	@ (80130c8 <HAL_RCCEx_PeriphCLKConfig+0xcbc>)
 8012d92:	430b      	orrs	r3, r1
 8012d94:	6713      	str	r3, [r2, #112]	@ 0x70
 8012d96:	e008      	b.n	8012daa <HAL_RCCEx_PeriphCLKConfig+0x99e>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8012d98:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8012d9c:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
 8012da0:	e003      	b.n	8012daa <HAL_RCCEx_PeriphCLKConfig+0x99e>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8012da2:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8012da6:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8012daa:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8012dae:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012db2:	f002 0301 	and.w	r3, r2, #1
 8012db6:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8012dba:	2300      	movs	r3, #0
 8012dbc:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8012dc0:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8012dc4:	460b      	mov	r3, r1
 8012dc6:	4313      	orrs	r3, r2
 8012dc8:	f000 808b 	beq.w	8012ee2 <HAL_RCCEx_PeriphCLKConfig+0xad6>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 8012dcc:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8012dd0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8012dd4:	2b28      	cmp	r3, #40	@ 0x28
 8012dd6:	d86b      	bhi.n	8012eb0 <HAL_RCCEx_PeriphCLKConfig+0xaa4>
 8012dd8:	a201      	add	r2, pc, #4	@ (adr r2, 8012de0 <HAL_RCCEx_PeriphCLKConfig+0x9d4>)
 8012dda:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8012dde:	bf00      	nop
 8012de0:	08012eb9 	.word	0x08012eb9
 8012de4:	08012eb1 	.word	0x08012eb1
 8012de8:	08012eb1 	.word	0x08012eb1
 8012dec:	08012eb1 	.word	0x08012eb1
 8012df0:	08012eb1 	.word	0x08012eb1
 8012df4:	08012eb1 	.word	0x08012eb1
 8012df8:	08012eb1 	.word	0x08012eb1
 8012dfc:	08012eb1 	.word	0x08012eb1
 8012e00:	08012e85 	.word	0x08012e85
 8012e04:	08012eb1 	.word	0x08012eb1
 8012e08:	08012eb1 	.word	0x08012eb1
 8012e0c:	08012eb1 	.word	0x08012eb1
 8012e10:	08012eb1 	.word	0x08012eb1
 8012e14:	08012eb1 	.word	0x08012eb1
 8012e18:	08012eb1 	.word	0x08012eb1
 8012e1c:	08012eb1 	.word	0x08012eb1
 8012e20:	08012e9b 	.word	0x08012e9b
 8012e24:	08012eb1 	.word	0x08012eb1
 8012e28:	08012eb1 	.word	0x08012eb1
 8012e2c:	08012eb1 	.word	0x08012eb1
 8012e30:	08012eb1 	.word	0x08012eb1
 8012e34:	08012eb1 	.word	0x08012eb1
 8012e38:	08012eb1 	.word	0x08012eb1
 8012e3c:	08012eb1 	.word	0x08012eb1
 8012e40:	08012eb9 	.word	0x08012eb9
 8012e44:	08012eb1 	.word	0x08012eb1
 8012e48:	08012eb1 	.word	0x08012eb1
 8012e4c:	08012eb1 	.word	0x08012eb1
 8012e50:	08012eb1 	.word	0x08012eb1
 8012e54:	08012eb1 	.word	0x08012eb1
 8012e58:	08012eb1 	.word	0x08012eb1
 8012e5c:	08012eb1 	.word	0x08012eb1
 8012e60:	08012eb9 	.word	0x08012eb9
 8012e64:	08012eb1 	.word	0x08012eb1
 8012e68:	08012eb1 	.word	0x08012eb1
 8012e6c:	08012eb1 	.word	0x08012eb1
 8012e70:	08012eb1 	.word	0x08012eb1
 8012e74:	08012eb1 	.word	0x08012eb1
 8012e78:	08012eb1 	.word	0x08012eb1
 8012e7c:	08012eb1 	.word	0x08012eb1
 8012e80:	08012eb9 	.word	0x08012eb9
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8012e84:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8012e88:	3308      	adds	r3, #8
 8012e8a:	2101      	movs	r1, #1
 8012e8c:	4618      	mov	r0, r3
 8012e8e:	f001 fe97 	bl	8014bc0 <RCCEx_PLL2_Config>
 8012e92:	4603      	mov	r3, r0
 8012e94:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8012e98:	e00f      	b.n	8012eba <HAL_RCCEx_PeriphCLKConfig+0xaae>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8012e9a:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8012e9e:	3328      	adds	r3, #40	@ 0x28
 8012ea0:	2101      	movs	r1, #1
 8012ea2:	4618      	mov	r0, r3
 8012ea4:	f001 ff3e 	bl	8014d24 <RCCEx_PLL3_Config>
 8012ea8:	4603      	mov	r3, r0
 8012eaa:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8012eae:	e004      	b.n	8012eba <HAL_RCCEx_PeriphCLKConfig+0xaae>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8012eb0:	2301      	movs	r3, #1
 8012eb2:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 8012eb6:	e000      	b.n	8012eba <HAL_RCCEx_PeriphCLKConfig+0xaae>
        break;
 8012eb8:	bf00      	nop
    }

    if (ret == HAL_OK)
 8012eba:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8012ebe:	2b00      	cmp	r3, #0
 8012ec0:	d10b      	bne.n	8012eda <HAL_RCCEx_PeriphCLKConfig+0xace>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8012ec2:	4b81      	ldr	r3, [pc, #516]	@ (80130c8 <HAL_RCCEx_PeriphCLKConfig+0xcbc>)
 8012ec4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8012ec6:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 8012eca:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8012ece:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8012ed2:	4a7d      	ldr	r2, [pc, #500]	@ (80130c8 <HAL_RCCEx_PeriphCLKConfig+0xcbc>)
 8012ed4:	430b      	orrs	r3, r1
 8012ed6:	6553      	str	r3, [r2, #84]	@ 0x54
 8012ed8:	e003      	b.n	8012ee2 <HAL_RCCEx_PeriphCLKConfig+0xad6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8012eda:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8012ede:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8012ee2:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8012ee6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012eea:	f002 0302 	and.w	r3, r2, #2
 8012eee:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8012ef2:	2300      	movs	r3, #0
 8012ef4:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 8012ef8:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 8012efc:	460b      	mov	r3, r1
 8012efe:	4313      	orrs	r3, r2
 8012f00:	d042      	beq.n	8012f88 <HAL_RCCEx_PeriphCLKConfig+0xb7c>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 8012f02:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8012f06:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8012f08:	2b05      	cmp	r3, #5
 8012f0a:	d825      	bhi.n	8012f58 <HAL_RCCEx_PeriphCLKConfig+0xb4c>
 8012f0c:	a201      	add	r2, pc, #4	@ (adr r2, 8012f14 <HAL_RCCEx_PeriphCLKConfig+0xb08>)
 8012f0e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8012f12:	bf00      	nop
 8012f14:	08012f61 	.word	0x08012f61
 8012f18:	08012f2d 	.word	0x08012f2d
 8012f1c:	08012f43 	.word	0x08012f43
 8012f20:	08012f61 	.word	0x08012f61
 8012f24:	08012f61 	.word	0x08012f61
 8012f28:	08012f61 	.word	0x08012f61
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8012f2c:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8012f30:	3308      	adds	r3, #8
 8012f32:	2101      	movs	r1, #1
 8012f34:	4618      	mov	r0, r3
 8012f36:	f001 fe43 	bl	8014bc0 <RCCEx_PLL2_Config>
 8012f3a:	4603      	mov	r3, r0
 8012f3c:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8012f40:	e00f      	b.n	8012f62 <HAL_RCCEx_PeriphCLKConfig+0xb56>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8012f42:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8012f46:	3328      	adds	r3, #40	@ 0x28
 8012f48:	2101      	movs	r1, #1
 8012f4a:	4618      	mov	r0, r3
 8012f4c:	f001 feea 	bl	8014d24 <RCCEx_PLL3_Config>
 8012f50:	4603      	mov	r3, r0
 8012f52:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8012f56:	e004      	b.n	8012f62 <HAL_RCCEx_PeriphCLKConfig+0xb56>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8012f58:	2301      	movs	r3, #1
 8012f5a:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 8012f5e:	e000      	b.n	8012f62 <HAL_RCCEx_PeriphCLKConfig+0xb56>
        break;
 8012f60:	bf00      	nop
    }

    if (ret == HAL_OK)
 8012f62:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8012f66:	2b00      	cmp	r3, #0
 8012f68:	d10a      	bne.n	8012f80 <HAL_RCCEx_PeriphCLKConfig+0xb74>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8012f6a:	4b57      	ldr	r3, [pc, #348]	@ (80130c8 <HAL_RCCEx_PeriphCLKConfig+0xcbc>)
 8012f6c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8012f6e:	f023 0107 	bic.w	r1, r3, #7
 8012f72:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8012f76:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8012f78:	4a53      	ldr	r2, [pc, #332]	@ (80130c8 <HAL_RCCEx_PeriphCLKConfig+0xcbc>)
 8012f7a:	430b      	orrs	r3, r1
 8012f7c:	6553      	str	r3, [r2, #84]	@ 0x54
 8012f7e:	e003      	b.n	8012f88 <HAL_RCCEx_PeriphCLKConfig+0xb7c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8012f80:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8012f84:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8012f88:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8012f8c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012f90:	f002 0304 	and.w	r3, r2, #4
 8012f94:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8012f98:	2300      	movs	r3, #0
 8012f9a:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8012f9e:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 8012fa2:	460b      	mov	r3, r1
 8012fa4:	4313      	orrs	r3, r2
 8012fa6:	d044      	beq.n	8013032 <HAL_RCCEx_PeriphCLKConfig+0xc26>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 8012fa8:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8012fac:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8012fb0:	2b05      	cmp	r3, #5
 8012fb2:	d825      	bhi.n	8013000 <HAL_RCCEx_PeriphCLKConfig+0xbf4>
 8012fb4:	a201      	add	r2, pc, #4	@ (adr r2, 8012fbc <HAL_RCCEx_PeriphCLKConfig+0xbb0>)
 8012fb6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8012fba:	bf00      	nop
 8012fbc:	08013009 	.word	0x08013009
 8012fc0:	08012fd5 	.word	0x08012fd5
 8012fc4:	08012feb 	.word	0x08012feb
 8012fc8:	08013009 	.word	0x08013009
 8012fcc:	08013009 	.word	0x08013009
 8012fd0:	08013009 	.word	0x08013009
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8012fd4:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8012fd8:	3308      	adds	r3, #8
 8012fda:	2101      	movs	r1, #1
 8012fdc:	4618      	mov	r0, r3
 8012fde:	f001 fdef 	bl	8014bc0 <RCCEx_PLL2_Config>
 8012fe2:	4603      	mov	r3, r0
 8012fe4:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8012fe8:	e00f      	b.n	801300a <HAL_RCCEx_PeriphCLKConfig+0xbfe>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8012fea:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8012fee:	3328      	adds	r3, #40	@ 0x28
 8012ff0:	2101      	movs	r1, #1
 8012ff2:	4618      	mov	r0, r3
 8012ff4:	f001 fe96 	bl	8014d24 <RCCEx_PLL3_Config>
 8012ff8:	4603      	mov	r3, r0
 8012ffa:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8012ffe:	e004      	b.n	801300a <HAL_RCCEx_PeriphCLKConfig+0xbfe>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8013000:	2301      	movs	r3, #1
 8013002:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 8013006:	e000      	b.n	801300a <HAL_RCCEx_PeriphCLKConfig+0xbfe>
        break;
 8013008:	bf00      	nop
    }

    if (ret == HAL_OK)
 801300a:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 801300e:	2b00      	cmp	r3, #0
 8013010:	d10b      	bne.n	801302a <HAL_RCCEx_PeriphCLKConfig+0xc1e>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8013012:	4b2d      	ldr	r3, [pc, #180]	@ (80130c8 <HAL_RCCEx_PeriphCLKConfig+0xcbc>)
 8013014:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8013016:	f023 0107 	bic.w	r1, r3, #7
 801301a:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 801301e:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8013022:	4a29      	ldr	r2, [pc, #164]	@ (80130c8 <HAL_RCCEx_PeriphCLKConfig+0xcbc>)
 8013024:	430b      	orrs	r3, r1
 8013026:	6593      	str	r3, [r2, #88]	@ 0x58
 8013028:	e003      	b.n	8013032 <HAL_RCCEx_PeriphCLKConfig+0xc26>
    }
    else
    {
      /* set overall return value */
      status = ret;
 801302a:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 801302e:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8013032:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8013036:	e9d3 2300 	ldrd	r2, r3, [r3]
 801303a:	f002 0320 	and.w	r3, r2, #32
 801303e:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8013042:	2300      	movs	r3, #0
 8013044:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8013048:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 801304c:	460b      	mov	r3, r1
 801304e:	4313      	orrs	r3, r2
 8013050:	d057      	beq.n	8013102 <HAL_RCCEx_PeriphCLKConfig+0xcf6>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 8013052:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8013056:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 801305a:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 801305e:	d035      	beq.n	80130cc <HAL_RCCEx_PeriphCLKConfig+0xcc0>
 8013060:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8013064:	d82c      	bhi.n	80130c0 <HAL_RCCEx_PeriphCLKConfig+0xcb4>
 8013066:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 801306a:	d031      	beq.n	80130d0 <HAL_RCCEx_PeriphCLKConfig+0xcc4>
 801306c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8013070:	d826      	bhi.n	80130c0 <HAL_RCCEx_PeriphCLKConfig+0xcb4>
 8013072:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8013076:	d02d      	beq.n	80130d4 <HAL_RCCEx_PeriphCLKConfig+0xcc8>
 8013078:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 801307c:	d820      	bhi.n	80130c0 <HAL_RCCEx_PeriphCLKConfig+0xcb4>
 801307e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8013082:	d012      	beq.n	80130aa <HAL_RCCEx_PeriphCLKConfig+0xc9e>
 8013084:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8013088:	d81a      	bhi.n	80130c0 <HAL_RCCEx_PeriphCLKConfig+0xcb4>
 801308a:	2b00      	cmp	r3, #0
 801308c:	d024      	beq.n	80130d8 <HAL_RCCEx_PeriphCLKConfig+0xccc>
 801308e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8013092:	d115      	bne.n	80130c0 <HAL_RCCEx_PeriphCLKConfig+0xcb4>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8013094:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8013098:	3308      	adds	r3, #8
 801309a:	2100      	movs	r1, #0
 801309c:	4618      	mov	r0, r3
 801309e:	f001 fd8f 	bl	8014bc0 <RCCEx_PLL2_Config>
 80130a2:	4603      	mov	r3, r0
 80130a4:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 80130a8:	e017      	b.n	80130da <HAL_RCCEx_PeriphCLKConfig+0xcce>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80130aa:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80130ae:	3328      	adds	r3, #40	@ 0x28
 80130b0:	2102      	movs	r1, #2
 80130b2:	4618      	mov	r0, r3
 80130b4:	f001 fe36 	bl	8014d24 <RCCEx_PLL3_Config>
 80130b8:	4603      	mov	r3, r0
 80130ba:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 80130be:	e00c      	b.n	80130da <HAL_RCCEx_PeriphCLKConfig+0xcce>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80130c0:	2301      	movs	r3, #1
 80130c2:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 80130c6:	e008      	b.n	80130da <HAL_RCCEx_PeriphCLKConfig+0xcce>
 80130c8:	58024400 	.word	0x58024400
        break;
 80130cc:	bf00      	nop
 80130ce:	e004      	b.n	80130da <HAL_RCCEx_PeriphCLKConfig+0xcce>
        break;
 80130d0:	bf00      	nop
 80130d2:	e002      	b.n	80130da <HAL_RCCEx_PeriphCLKConfig+0xcce>
        break;
 80130d4:	bf00      	nop
 80130d6:	e000      	b.n	80130da <HAL_RCCEx_PeriphCLKConfig+0xcce>
        break;
 80130d8:	bf00      	nop
    }

    if (ret == HAL_OK)
 80130da:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 80130de:	2b00      	cmp	r3, #0
 80130e0:	d10b      	bne.n	80130fa <HAL_RCCEx_PeriphCLKConfig+0xcee>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80130e2:	4bc2      	ldr	r3, [pc, #776]	@ (80133ec <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 80130e4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80130e6:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 80130ea:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80130ee:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80130f2:	4abe      	ldr	r2, [pc, #760]	@ (80133ec <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 80130f4:	430b      	orrs	r3, r1
 80130f6:	6553      	str	r3, [r2, #84]	@ 0x54
 80130f8:	e003      	b.n	8013102 <HAL_RCCEx_PeriphCLKConfig+0xcf6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80130fa:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 80130fe:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8013102:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8013106:	e9d3 2300 	ldrd	r2, r3, [r3]
 801310a:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 801310e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8013112:	2300      	movs	r3, #0
 8013114:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8013118:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 801311c:	460b      	mov	r3, r1
 801311e:	4313      	orrs	r3, r2
 8013120:	d055      	beq.n	80131ce <HAL_RCCEx_PeriphCLKConfig+0xdc2>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 8013122:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8013126:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 801312a:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 801312e:	d033      	beq.n	8013198 <HAL_RCCEx_PeriphCLKConfig+0xd8c>
 8013130:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 8013134:	d82c      	bhi.n	8013190 <HAL_RCCEx_PeriphCLKConfig+0xd84>
 8013136:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 801313a:	d02f      	beq.n	801319c <HAL_RCCEx_PeriphCLKConfig+0xd90>
 801313c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8013140:	d826      	bhi.n	8013190 <HAL_RCCEx_PeriphCLKConfig+0xd84>
 8013142:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8013146:	d02b      	beq.n	80131a0 <HAL_RCCEx_PeriphCLKConfig+0xd94>
 8013148:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 801314c:	d820      	bhi.n	8013190 <HAL_RCCEx_PeriphCLKConfig+0xd84>
 801314e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8013152:	d012      	beq.n	801317a <HAL_RCCEx_PeriphCLKConfig+0xd6e>
 8013154:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8013158:	d81a      	bhi.n	8013190 <HAL_RCCEx_PeriphCLKConfig+0xd84>
 801315a:	2b00      	cmp	r3, #0
 801315c:	d022      	beq.n	80131a4 <HAL_RCCEx_PeriphCLKConfig+0xd98>
 801315e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8013162:	d115      	bne.n	8013190 <HAL_RCCEx_PeriphCLKConfig+0xd84>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8013164:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8013168:	3308      	adds	r3, #8
 801316a:	2100      	movs	r1, #0
 801316c:	4618      	mov	r0, r3
 801316e:	f001 fd27 	bl	8014bc0 <RCCEx_PLL2_Config>
 8013172:	4603      	mov	r3, r0
 8013174:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8013178:	e015      	b.n	80131a6 <HAL_RCCEx_PeriphCLKConfig+0xd9a>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 801317a:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 801317e:	3328      	adds	r3, #40	@ 0x28
 8013180:	2102      	movs	r1, #2
 8013182:	4618      	mov	r0, r3
 8013184:	f001 fdce 	bl	8014d24 <RCCEx_PLL3_Config>
 8013188:	4603      	mov	r3, r0
 801318a:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 801318e:	e00a      	b.n	80131a6 <HAL_RCCEx_PeriphCLKConfig+0xd9a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8013190:	2301      	movs	r3, #1
 8013192:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 8013196:	e006      	b.n	80131a6 <HAL_RCCEx_PeriphCLKConfig+0xd9a>
        break;
 8013198:	bf00      	nop
 801319a:	e004      	b.n	80131a6 <HAL_RCCEx_PeriphCLKConfig+0xd9a>
        break;
 801319c:	bf00      	nop
 801319e:	e002      	b.n	80131a6 <HAL_RCCEx_PeriphCLKConfig+0xd9a>
        break;
 80131a0:	bf00      	nop
 80131a2:	e000      	b.n	80131a6 <HAL_RCCEx_PeriphCLKConfig+0xd9a>
        break;
 80131a4:	bf00      	nop
    }

    if (ret == HAL_OK)
 80131a6:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 80131aa:	2b00      	cmp	r3, #0
 80131ac:	d10b      	bne.n	80131c6 <HAL_RCCEx_PeriphCLKConfig+0xdba>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80131ae:	4b8f      	ldr	r3, [pc, #572]	@ (80133ec <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 80131b0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80131b2:	f423 51e0 	bic.w	r1, r3, #7168	@ 0x1c00
 80131b6:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80131ba:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 80131be:	4a8b      	ldr	r2, [pc, #556]	@ (80133ec <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 80131c0:	430b      	orrs	r3, r1
 80131c2:	6593      	str	r3, [r2, #88]	@ 0x58
 80131c4:	e003      	b.n	80131ce <HAL_RCCEx_PeriphCLKConfig+0xdc2>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80131c6:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 80131ca:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 80131ce:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80131d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80131d6:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 80131da:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80131de:	2300      	movs	r3, #0
 80131e0:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 80131e4:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 80131e8:	460b      	mov	r3, r1
 80131ea:	4313      	orrs	r3, r2
 80131ec:	d055      	beq.n	801329a <HAL_RCCEx_PeriphCLKConfig+0xe8e>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 80131ee:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80131f2:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 80131f6:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 80131fa:	d033      	beq.n	8013264 <HAL_RCCEx_PeriphCLKConfig+0xe58>
 80131fc:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 8013200:	d82c      	bhi.n	801325c <HAL_RCCEx_PeriphCLKConfig+0xe50>
 8013202:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8013206:	d02f      	beq.n	8013268 <HAL_RCCEx_PeriphCLKConfig+0xe5c>
 8013208:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 801320c:	d826      	bhi.n	801325c <HAL_RCCEx_PeriphCLKConfig+0xe50>
 801320e:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 8013212:	d02b      	beq.n	801326c <HAL_RCCEx_PeriphCLKConfig+0xe60>
 8013214:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 8013218:	d820      	bhi.n	801325c <HAL_RCCEx_PeriphCLKConfig+0xe50>
 801321a:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 801321e:	d012      	beq.n	8013246 <HAL_RCCEx_PeriphCLKConfig+0xe3a>
 8013220:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8013224:	d81a      	bhi.n	801325c <HAL_RCCEx_PeriphCLKConfig+0xe50>
 8013226:	2b00      	cmp	r3, #0
 8013228:	d022      	beq.n	8013270 <HAL_RCCEx_PeriphCLKConfig+0xe64>
 801322a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 801322e:	d115      	bne.n	801325c <HAL_RCCEx_PeriphCLKConfig+0xe50>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8013230:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8013234:	3308      	adds	r3, #8
 8013236:	2100      	movs	r1, #0
 8013238:	4618      	mov	r0, r3
 801323a:	f001 fcc1 	bl	8014bc0 <RCCEx_PLL2_Config>
 801323e:	4603      	mov	r3, r0
 8013240:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8013244:	e015      	b.n	8013272 <HAL_RCCEx_PeriphCLKConfig+0xe66>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8013246:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 801324a:	3328      	adds	r3, #40	@ 0x28
 801324c:	2102      	movs	r1, #2
 801324e:	4618      	mov	r0, r3
 8013250:	f001 fd68 	bl	8014d24 <RCCEx_PLL3_Config>
 8013254:	4603      	mov	r3, r0
 8013256:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 801325a:	e00a      	b.n	8013272 <HAL_RCCEx_PeriphCLKConfig+0xe66>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 801325c:	2301      	movs	r3, #1
 801325e:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 8013262:	e006      	b.n	8013272 <HAL_RCCEx_PeriphCLKConfig+0xe66>
        break;
 8013264:	bf00      	nop
 8013266:	e004      	b.n	8013272 <HAL_RCCEx_PeriphCLKConfig+0xe66>
        break;
 8013268:	bf00      	nop
 801326a:	e002      	b.n	8013272 <HAL_RCCEx_PeriphCLKConfig+0xe66>
        break;
 801326c:	bf00      	nop
 801326e:	e000      	b.n	8013272 <HAL_RCCEx_PeriphCLKConfig+0xe66>
        break;
 8013270:	bf00      	nop
    }

    if (ret == HAL_OK)
 8013272:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8013276:	2b00      	cmp	r3, #0
 8013278:	d10b      	bne.n	8013292 <HAL_RCCEx_PeriphCLKConfig+0xe86>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 801327a:	4b5c      	ldr	r3, [pc, #368]	@ (80133ec <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 801327c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 801327e:	f423 4160 	bic.w	r1, r3, #57344	@ 0xe000
 8013282:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8013286:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 801328a:	4a58      	ldr	r2, [pc, #352]	@ (80133ec <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 801328c:	430b      	orrs	r3, r1
 801328e:	6593      	str	r3, [r2, #88]	@ 0x58
 8013290:	e003      	b.n	801329a <HAL_RCCEx_PeriphCLKConfig+0xe8e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8013292:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8013296:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 801329a:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 801329e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80132a2:	f002 0308 	and.w	r3, r2, #8
 80132a6:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80132aa:	2300      	movs	r3, #0
 80132ac:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 80132b0:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 80132b4:	460b      	mov	r3, r1
 80132b6:	4313      	orrs	r3, r2
 80132b8:	d01e      	beq.n	80132f8 <HAL_RCCEx_PeriphCLKConfig+0xeec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 80132ba:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80132be:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80132c2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80132c6:	d10c      	bne.n	80132e2 <HAL_RCCEx_PeriphCLKConfig+0xed6>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 80132c8:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80132cc:	3328      	adds	r3, #40	@ 0x28
 80132ce:	2102      	movs	r1, #2
 80132d0:	4618      	mov	r0, r3
 80132d2:	f001 fd27 	bl	8014d24 <RCCEx_PLL3_Config>
 80132d6:	4603      	mov	r3, r0
 80132d8:	2b00      	cmp	r3, #0
 80132da:	d002      	beq.n	80132e2 <HAL_RCCEx_PeriphCLKConfig+0xed6>
      {
        status = HAL_ERROR;
 80132dc:	2301      	movs	r3, #1
 80132de:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 80132e2:	4b42      	ldr	r3, [pc, #264]	@ (80133ec <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 80132e4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80132e6:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80132ea:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80132ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80132f2:	4a3e      	ldr	r2, [pc, #248]	@ (80133ec <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 80132f4:	430b      	orrs	r3, r1
 80132f6:	6553      	str	r3, [r2, #84]	@ 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80132f8:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80132fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013300:	f002 0310 	and.w	r3, r2, #16
 8013304:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8013308:	2300      	movs	r3, #0
 801330a:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 801330e:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 8013312:	460b      	mov	r3, r1
 8013314:	4313      	orrs	r3, r2
 8013316:	d01e      	beq.n	8013356 <HAL_RCCEx_PeriphCLKConfig+0xf4a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 8013318:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 801331c:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8013320:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8013324:	d10c      	bne.n	8013340 <HAL_RCCEx_PeriphCLKConfig+0xf34>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8013326:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 801332a:	3328      	adds	r3, #40	@ 0x28
 801332c:	2102      	movs	r1, #2
 801332e:	4618      	mov	r0, r3
 8013330:	f001 fcf8 	bl	8014d24 <RCCEx_PLL3_Config>
 8013334:	4603      	mov	r3, r0
 8013336:	2b00      	cmp	r3, #0
 8013338:	d002      	beq.n	8013340 <HAL_RCCEx_PeriphCLKConfig+0xf34>
      {
        status = HAL_ERROR;
 801333a:	2301      	movs	r3, #1
 801333c:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8013340:	4b2a      	ldr	r3, [pc, #168]	@ (80133ec <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8013342:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8013344:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8013348:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 801334c:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8013350:	4a26      	ldr	r2, [pc, #152]	@ (80133ec <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8013352:	430b      	orrs	r3, r1
 8013354:	6593      	str	r3, [r2, #88]	@ 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8013356:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 801335a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801335e:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 8013362:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8013366:	2300      	movs	r3, #0
 8013368:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 801336c:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 8013370:	460b      	mov	r3, r1
 8013372:	4313      	orrs	r3, r2
 8013374:	d040      	beq.n	80133f8 <HAL_RCCEx_PeriphCLKConfig+0xfec>
  {
    switch (PeriphClkInit->AdcClockSelection)
 8013376:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 801337a:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 801337e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8013382:	d022      	beq.n	80133ca <HAL_RCCEx_PeriphCLKConfig+0xfbe>
 8013384:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8013388:	d81b      	bhi.n	80133c2 <HAL_RCCEx_PeriphCLKConfig+0xfb6>
 801338a:	2b00      	cmp	r3, #0
 801338c:	d003      	beq.n	8013396 <HAL_RCCEx_PeriphCLKConfig+0xf8a>
 801338e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8013392:	d00b      	beq.n	80133ac <HAL_RCCEx_PeriphCLKConfig+0xfa0>
 8013394:	e015      	b.n	80133c2 <HAL_RCCEx_PeriphCLKConfig+0xfb6>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8013396:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 801339a:	3308      	adds	r3, #8
 801339c:	2100      	movs	r1, #0
 801339e:	4618      	mov	r0, r3
 80133a0:	f001 fc0e 	bl	8014bc0 <RCCEx_PLL2_Config>
 80133a4:	4603      	mov	r3, r0
 80133a6:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* ADC clock source configuration done later after clock selection check */
        break;
 80133aa:	e00f      	b.n	80133cc <HAL_RCCEx_PeriphCLKConfig+0xfc0>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80133ac:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80133b0:	3328      	adds	r3, #40	@ 0x28
 80133b2:	2102      	movs	r1, #2
 80133b4:	4618      	mov	r0, r3
 80133b6:	f001 fcb5 	bl	8014d24 <RCCEx_PLL3_Config>
 80133ba:	4603      	mov	r3, r0
 80133bc:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* ADC clock source configuration done later after clock selection check */
        break;
 80133c0:	e004      	b.n	80133cc <HAL_RCCEx_PeriphCLKConfig+0xfc0>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80133c2:	2301      	movs	r3, #1
 80133c4:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 80133c8:	e000      	b.n	80133cc <HAL_RCCEx_PeriphCLKConfig+0xfc0>
        break;
 80133ca:	bf00      	nop
    }

    if (ret == HAL_OK)
 80133cc:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 80133d0:	2b00      	cmp	r3, #0
 80133d2:	d10d      	bne.n	80133f0 <HAL_RCCEx_PeriphCLKConfig+0xfe4>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80133d4:	4b05      	ldr	r3, [pc, #20]	@ (80133ec <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 80133d6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80133d8:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 80133dc:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80133e0:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 80133e4:	4a01      	ldr	r2, [pc, #4]	@ (80133ec <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 80133e6:	430b      	orrs	r3, r1
 80133e8:	6593      	str	r3, [r2, #88]	@ 0x58
 80133ea:	e005      	b.n	80133f8 <HAL_RCCEx_PeriphCLKConfig+0xfec>
 80133ec:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80133f0:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 80133f4:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80133f8:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80133fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013400:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 8013404:	67bb      	str	r3, [r7, #120]	@ 0x78
 8013406:	2300      	movs	r3, #0
 8013408:	67fb      	str	r3, [r7, #124]	@ 0x7c
 801340a:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 801340e:	460b      	mov	r3, r1
 8013410:	4313      	orrs	r3, r2
 8013412:	d03b      	beq.n	801348c <HAL_RCCEx_PeriphCLKConfig+0x1080>
  {

    switch (PeriphClkInit->UsbClockSelection)
 8013414:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8013418:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 801341c:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8013420:	d01f      	beq.n	8013462 <HAL_RCCEx_PeriphCLKConfig+0x1056>
 8013422:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8013426:	d818      	bhi.n	801345a <HAL_RCCEx_PeriphCLKConfig+0x104e>
 8013428:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 801342c:	d003      	beq.n	8013436 <HAL_RCCEx_PeriphCLKConfig+0x102a>
 801342e:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8013432:	d007      	beq.n	8013444 <HAL_RCCEx_PeriphCLKConfig+0x1038>
 8013434:	e011      	b.n	801345a <HAL_RCCEx_PeriphCLKConfig+0x104e>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8013436:	4b64      	ldr	r3, [pc, #400]	@ (80135c8 <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 8013438:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801343a:	4a63      	ldr	r2, [pc, #396]	@ (80135c8 <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 801343c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8013440:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 8013442:	e00f      	b.n	8013464 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8013444:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8013448:	3328      	adds	r3, #40	@ 0x28
 801344a:	2101      	movs	r1, #1
 801344c:	4618      	mov	r0, r3
 801344e:	f001 fc69 	bl	8014d24 <RCCEx_PLL3_Config>
 8013452:	4603      	mov	r3, r0
 8013454:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* USB clock source configuration done later after clock selection check */
        break;
 8013458:	e004      	b.n	8013464 <HAL_RCCEx_PeriphCLKConfig+0x1058>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 801345a:	2301      	movs	r3, #1
 801345c:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 8013460:	e000      	b.n	8013464 <HAL_RCCEx_PeriphCLKConfig+0x1058>
        break;
 8013462:	bf00      	nop
    }

    if (ret == HAL_OK)
 8013464:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8013468:	2b00      	cmp	r3, #0
 801346a:	d10b      	bne.n	8013484 <HAL_RCCEx_PeriphCLKConfig+0x1078>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 801346c:	4b56      	ldr	r3, [pc, #344]	@ (80135c8 <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 801346e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8013470:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8013474:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8013478:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 801347c:	4a52      	ldr	r2, [pc, #328]	@ (80135c8 <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 801347e:	430b      	orrs	r3, r1
 8013480:	6553      	str	r3, [r2, #84]	@ 0x54
 8013482:	e003      	b.n	801348c <HAL_RCCEx_PeriphCLKConfig+0x1080>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8013484:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8013488:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 801348c:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8013490:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013494:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 8013498:	673b      	str	r3, [r7, #112]	@ 0x70
 801349a:	2300      	movs	r3, #0
 801349c:	677b      	str	r3, [r7, #116]	@ 0x74
 801349e:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 80134a2:	460b      	mov	r3, r1
 80134a4:	4313      	orrs	r3, r2
 80134a6:	d031      	beq.n	801350c <HAL_RCCEx_PeriphCLKConfig+0x1100>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 80134a8:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80134ac:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80134ae:	2b00      	cmp	r3, #0
 80134b0:	d003      	beq.n	80134ba <HAL_RCCEx_PeriphCLKConfig+0x10ae>
 80134b2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80134b6:	d007      	beq.n	80134c8 <HAL_RCCEx_PeriphCLKConfig+0x10bc>
 80134b8:	e011      	b.n	80134de <HAL_RCCEx_PeriphCLKConfig+0x10d2>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80134ba:	4b43      	ldr	r3, [pc, #268]	@ (80135c8 <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 80134bc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80134be:	4a42      	ldr	r2, [pc, #264]	@ (80135c8 <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 80134c0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80134c4:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 80134c6:	e00e      	b.n	80134e6 <HAL_RCCEx_PeriphCLKConfig+0x10da>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80134c8:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80134cc:	3308      	adds	r3, #8
 80134ce:	2102      	movs	r1, #2
 80134d0:	4618      	mov	r0, r3
 80134d2:	f001 fb75 	bl	8014bc0 <RCCEx_PLL2_Config>
 80134d6:	4603      	mov	r3, r0
 80134d8:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 80134dc:	e003      	b.n	80134e6 <HAL_RCCEx_PeriphCLKConfig+0x10da>

      default:
        ret = HAL_ERROR;
 80134de:	2301      	movs	r3, #1
 80134e0:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 80134e4:	bf00      	nop
    }

    if (ret == HAL_OK)
 80134e6:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 80134ea:	2b00      	cmp	r3, #0
 80134ec:	d10a      	bne.n	8013504 <HAL_RCCEx_PeriphCLKConfig+0x10f8>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 80134ee:	4b36      	ldr	r3, [pc, #216]	@ (80135c8 <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 80134f0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80134f2:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 80134f6:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80134fa:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80134fc:	4a32      	ldr	r2, [pc, #200]	@ (80135c8 <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 80134fe:	430b      	orrs	r3, r1
 8013500:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8013502:	e003      	b.n	801350c <HAL_RCCEx_PeriphCLKConfig+0x1100>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8013504:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8013508:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 801350c:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8013510:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013514:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 8013518:	66bb      	str	r3, [r7, #104]	@ 0x68
 801351a:	2300      	movs	r3, #0
 801351c:	66fb      	str	r3, [r7, #108]	@ 0x6c
 801351e:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 8013522:	460b      	mov	r3, r1
 8013524:	4313      	orrs	r3, r2
 8013526:	d00c      	beq.n	8013542 <HAL_RCCEx_PeriphCLKConfig+0x1136>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8013528:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 801352c:	3328      	adds	r3, #40	@ 0x28
 801352e:	2102      	movs	r1, #2
 8013530:	4618      	mov	r0, r3
 8013532:	f001 fbf7 	bl	8014d24 <RCCEx_PLL3_Config>
 8013536:	4603      	mov	r3, r0
 8013538:	2b00      	cmp	r3, #0
 801353a:	d002      	beq.n	8013542 <HAL_RCCEx_PeriphCLKConfig+0x1136>
    {
      status = HAL_ERROR;
 801353c:	2301      	movs	r3, #1
 801353e:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8013542:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8013546:	e9d3 2300 	ldrd	r2, r3, [r3]
 801354a:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 801354e:	663b      	str	r3, [r7, #96]	@ 0x60
 8013550:	2300      	movs	r3, #0
 8013552:	667b      	str	r3, [r7, #100]	@ 0x64
 8013554:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 8013558:	460b      	mov	r3, r1
 801355a:	4313      	orrs	r3, r2
 801355c:	d03a      	beq.n	80135d4 <HAL_RCCEx_PeriphCLKConfig+0x11c8>
  {

    switch (PeriphClkInit->RngClockSelection)
 801355e:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8013562:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8013566:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 801356a:	d018      	beq.n	801359e <HAL_RCCEx_PeriphCLKConfig+0x1192>
 801356c:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8013570:	d811      	bhi.n	8013596 <HAL_RCCEx_PeriphCLKConfig+0x118a>
 8013572:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8013576:	d014      	beq.n	80135a2 <HAL_RCCEx_PeriphCLKConfig+0x1196>
 8013578:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 801357c:	d80b      	bhi.n	8013596 <HAL_RCCEx_PeriphCLKConfig+0x118a>
 801357e:	2b00      	cmp	r3, #0
 8013580:	d011      	beq.n	80135a6 <HAL_RCCEx_PeriphCLKConfig+0x119a>
 8013582:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8013586:	d106      	bne.n	8013596 <HAL_RCCEx_PeriphCLKConfig+0x118a>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8013588:	4b0f      	ldr	r3, [pc, #60]	@ (80135c8 <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 801358a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801358c:	4a0e      	ldr	r2, [pc, #56]	@ (80135c8 <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 801358e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8013592:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 8013594:	e008      	b.n	80135a8 <HAL_RCCEx_PeriphCLKConfig+0x119c>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8013596:	2301      	movs	r3, #1
 8013598:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 801359c:	e004      	b.n	80135a8 <HAL_RCCEx_PeriphCLKConfig+0x119c>
        break;
 801359e:	bf00      	nop
 80135a0:	e002      	b.n	80135a8 <HAL_RCCEx_PeriphCLKConfig+0x119c>
        break;
 80135a2:	bf00      	nop
 80135a4:	e000      	b.n	80135a8 <HAL_RCCEx_PeriphCLKConfig+0x119c>
        break;
 80135a6:	bf00      	nop
    }

    if (ret == HAL_OK)
 80135a8:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 80135ac:	2b00      	cmp	r3, #0
 80135ae:	d10d      	bne.n	80135cc <HAL_RCCEx_PeriphCLKConfig+0x11c0>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80135b0:	4b05      	ldr	r3, [pc, #20]	@ (80135c8 <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 80135b2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80135b4:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 80135b8:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80135bc:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80135c0:	4a01      	ldr	r2, [pc, #4]	@ (80135c8 <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 80135c2:	430b      	orrs	r3, r1
 80135c4:	6553      	str	r3, [r2, #84]	@ 0x54
 80135c6:	e005      	b.n	80135d4 <HAL_RCCEx_PeriphCLKConfig+0x11c8>
 80135c8:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80135cc:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 80135d0:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80135d4:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80135d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80135dc:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 80135e0:	65bb      	str	r3, [r7, #88]	@ 0x58
 80135e2:	2300      	movs	r3, #0
 80135e4:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80135e6:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 80135ea:	460b      	mov	r3, r1
 80135ec:	4313      	orrs	r3, r2
 80135ee:	d009      	beq.n	8013604 <HAL_RCCEx_PeriphCLKConfig+0x11f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80135f0:	4baa      	ldr	r3, [pc, #680]	@ (801389c <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 80135f2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80135f4:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 80135f8:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80135fc:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80135fe:	4aa7      	ldr	r2, [pc, #668]	@ (801389c <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 8013600:	430b      	orrs	r3, r1
 8013602:	6513      	str	r3, [r2, #80]	@ 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 8013604:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8013608:	e9d3 2300 	ldrd	r2, r3, [r3]
 801360c:	f002 5380 	and.w	r3, r2, #268435456	@ 0x10000000
 8013610:	653b      	str	r3, [r7, #80]	@ 0x50
 8013612:	2300      	movs	r3, #0
 8013614:	657b      	str	r3, [r7, #84]	@ 0x54
 8013616:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 801361a:	460b      	mov	r3, r1
 801361c:	4313      	orrs	r3, r2
 801361e:	d00a      	beq.n	8013636 <HAL_RCCEx_PeriphCLKConfig+0x122a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 8013620:	4b9e      	ldr	r3, [pc, #632]	@ (801389c <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 8013622:	691b      	ldr	r3, [r3, #16]
 8013624:	f423 4180 	bic.w	r1, r3, #16384	@ 0x4000
 8013628:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 801362c:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 8013630:	4a9a      	ldr	r2, [pc, #616]	@ (801389c <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 8013632:	430b      	orrs	r3, r1
 8013634:	6113      	str	r3, [r2, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8013636:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 801363a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801363e:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 8013642:	64bb      	str	r3, [r7, #72]	@ 0x48
 8013644:	2300      	movs	r3, #0
 8013646:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8013648:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 801364c:	460b      	mov	r3, r1
 801364e:	4313      	orrs	r3, r2
 8013650:	d009      	beq.n	8013666 <HAL_RCCEx_PeriphCLKConfig+0x125a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8013652:	4b92      	ldr	r3, [pc, #584]	@ (801389c <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 8013654:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8013656:	f023 7180 	bic.w	r1, r3, #16777216	@ 0x1000000
 801365a:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 801365e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8013660:	4a8e      	ldr	r2, [pc, #568]	@ (801389c <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 8013662:	430b      	orrs	r3, r1
 8013664:	6513      	str	r3, [r2, #80]	@ 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8013666:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 801366a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801366e:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
 8013672:	643b      	str	r3, [r7, #64]	@ 0x40
 8013674:	2300      	movs	r3, #0
 8013676:	647b      	str	r3, [r7, #68]	@ 0x44
 8013678:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 801367c:	460b      	mov	r3, r1
 801367e:	4313      	orrs	r3, r2
 8013680:	d00e      	beq.n	80136a0 <HAL_RCCEx_PeriphCLKConfig+0x1294>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8013682:	4b86      	ldr	r3, [pc, #536]	@ (801389c <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 8013684:	691b      	ldr	r3, [r3, #16]
 8013686:	4a85      	ldr	r2, [pc, #532]	@ (801389c <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 8013688:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 801368c:	6113      	str	r3, [r2, #16]
 801368e:	4b83      	ldr	r3, [pc, #524]	@ (801389c <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 8013690:	6919      	ldr	r1, [r3, #16]
 8013692:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8013696:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 801369a:	4a80      	ldr	r2, [pc, #512]	@ (801389c <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 801369c:	430b      	orrs	r3, r1
 801369e:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 80136a0:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80136a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80136a8:	f002 4300 	and.w	r3, r2, #2147483648	@ 0x80000000
 80136ac:	63bb      	str	r3, [r7, #56]	@ 0x38
 80136ae:	2300      	movs	r3, #0
 80136b0:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80136b2:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 80136b6:	460b      	mov	r3, r1
 80136b8:	4313      	orrs	r3, r2
 80136ba:	d009      	beq.n	80136d0 <HAL_RCCEx_PeriphCLKConfig+0x12c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 80136bc:	4b77      	ldr	r3, [pc, #476]	@ (801389c <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 80136be:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80136c0:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 80136c4:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80136c8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80136ca:	4a74      	ldr	r2, [pc, #464]	@ (801389c <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 80136cc:	430b      	orrs	r3, r1
 80136ce:	64d3      	str	r3, [r2, #76]	@ 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80136d0:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80136d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80136d8:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 80136dc:	633b      	str	r3, [r7, #48]	@ 0x30
 80136de:	2300      	movs	r3, #0
 80136e0:	637b      	str	r3, [r7, #52]	@ 0x34
 80136e2:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 80136e6:	460b      	mov	r3, r1
 80136e8:	4313      	orrs	r3, r2
 80136ea:	d00a      	beq.n	8013702 <HAL_RCCEx_PeriphCLKConfig+0x12f6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80136ec:	4b6b      	ldr	r3, [pc, #428]	@ (801389c <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 80136ee:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80136f0:	f423 0140 	bic.w	r1, r3, #12582912	@ 0xc00000
 80136f4:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80136f8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80136fc:	4a67      	ldr	r2, [pc, #412]	@ (801389c <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 80136fe:	430b      	orrs	r3, r1
 8013700:	6553      	str	r3, [r2, #84]	@ 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 8013702:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8013706:	e9d3 2300 	ldrd	r2, r3, [r3]
 801370a:	2100      	movs	r1, #0
 801370c:	62b9      	str	r1, [r7, #40]	@ 0x28
 801370e:	f003 0301 	and.w	r3, r3, #1
 8013712:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8013714:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 8013718:	460b      	mov	r3, r1
 801371a:	4313      	orrs	r3, r2
 801371c:	d011      	beq.n	8013742 <HAL_RCCEx_PeriphCLKConfig+0x1336>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 801371e:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8013722:	3308      	adds	r3, #8
 8013724:	2100      	movs	r1, #0
 8013726:	4618      	mov	r0, r3
 8013728:	f001 fa4a 	bl	8014bc0 <RCCEx_PLL2_Config>
 801372c:	4603      	mov	r3, r0
 801372e:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
    
    if (ret == HAL_OK)
 8013732:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8013736:	2b00      	cmp	r3, #0
 8013738:	d003      	beq.n	8013742 <HAL_RCCEx_PeriphCLKConfig+0x1336>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 801373a:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 801373e:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 8013742:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8013746:	e9d3 2300 	ldrd	r2, r3, [r3]
 801374a:	2100      	movs	r1, #0
 801374c:	6239      	str	r1, [r7, #32]
 801374e:	f003 0302 	and.w	r3, r3, #2
 8013752:	627b      	str	r3, [r7, #36]	@ 0x24
 8013754:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8013758:	460b      	mov	r3, r1
 801375a:	4313      	orrs	r3, r2
 801375c:	d011      	beq.n	8013782 <HAL_RCCEx_PeriphCLKConfig+0x1376>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 801375e:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8013762:	3308      	adds	r3, #8
 8013764:	2101      	movs	r1, #1
 8013766:	4618      	mov	r0, r3
 8013768:	f001 fa2a 	bl	8014bc0 <RCCEx_PLL2_Config>
 801376c:	4603      	mov	r3, r0
 801376e:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
    
    if (ret == HAL_OK)
 8013772:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8013776:	2b00      	cmp	r3, #0
 8013778:	d003      	beq.n	8013782 <HAL_RCCEx_PeriphCLKConfig+0x1376>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 801377a:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 801377e:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 8013782:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8013786:	e9d3 2300 	ldrd	r2, r3, [r3]
 801378a:	2100      	movs	r1, #0
 801378c:	61b9      	str	r1, [r7, #24]
 801378e:	f003 0304 	and.w	r3, r3, #4
 8013792:	61fb      	str	r3, [r7, #28]
 8013794:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8013798:	460b      	mov	r3, r1
 801379a:	4313      	orrs	r3, r2
 801379c:	d011      	beq.n	80137c2 <HAL_RCCEx_PeriphCLKConfig+0x13b6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 801379e:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80137a2:	3308      	adds	r3, #8
 80137a4:	2102      	movs	r1, #2
 80137a6:	4618      	mov	r0, r3
 80137a8:	f001 fa0a 	bl	8014bc0 <RCCEx_PLL2_Config>
 80137ac:	4603      	mov	r3, r0
 80137ae:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
    
    if (ret == HAL_OK)
 80137b2:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 80137b6:	2b00      	cmp	r3, #0
 80137b8:	d003      	beq.n	80137c2 <HAL_RCCEx_PeriphCLKConfig+0x13b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80137ba:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 80137be:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 80137c2:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80137c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80137ca:	2100      	movs	r1, #0
 80137cc:	6139      	str	r1, [r7, #16]
 80137ce:	f003 0308 	and.w	r3, r3, #8
 80137d2:	617b      	str	r3, [r7, #20]
 80137d4:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 80137d8:	460b      	mov	r3, r1
 80137da:	4313      	orrs	r3, r2
 80137dc:	d011      	beq.n	8013802 <HAL_RCCEx_PeriphCLKConfig+0x13f6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80137de:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80137e2:	3328      	adds	r3, #40	@ 0x28
 80137e4:	2100      	movs	r1, #0
 80137e6:	4618      	mov	r0, r3
 80137e8:	f001 fa9c 	bl	8014d24 <RCCEx_PLL3_Config>
 80137ec:	4603      	mov	r3, r0
 80137ee:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
  
    if (ret == HAL_OK)
 80137f2:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 80137f6:	2b00      	cmp	r3, #0
 80137f8:	d003      	beq.n	8013802 <HAL_RCCEx_PeriphCLKConfig+0x13f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80137fa:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 80137fe:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 8013802:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8013806:	e9d3 2300 	ldrd	r2, r3, [r3]
 801380a:	2100      	movs	r1, #0
 801380c:	60b9      	str	r1, [r7, #8]
 801380e:	f003 0310 	and.w	r3, r3, #16
 8013812:	60fb      	str	r3, [r7, #12]
 8013814:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8013818:	460b      	mov	r3, r1
 801381a:	4313      	orrs	r3, r2
 801381c:	d011      	beq.n	8013842 <HAL_RCCEx_PeriphCLKConfig+0x1436>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 801381e:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8013822:	3328      	adds	r3, #40	@ 0x28
 8013824:	2101      	movs	r1, #1
 8013826:	4618      	mov	r0, r3
 8013828:	f001 fa7c 	bl	8014d24 <RCCEx_PLL3_Config>
 801382c:	4603      	mov	r3, r0
 801382e:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
    
    if (ret == HAL_OK)
 8013832:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8013836:	2b00      	cmp	r3, #0
 8013838:	d003      	beq.n	8013842 <HAL_RCCEx_PeriphCLKConfig+0x1436>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 801383a:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 801383e:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 8013842:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8013846:	e9d3 2300 	ldrd	r2, r3, [r3]
 801384a:	2100      	movs	r1, #0
 801384c:	6039      	str	r1, [r7, #0]
 801384e:	f003 0320 	and.w	r3, r3, #32
 8013852:	607b      	str	r3, [r7, #4]
 8013854:	e9d7 1200 	ldrd	r1, r2, [r7]
 8013858:	460b      	mov	r3, r1
 801385a:	4313      	orrs	r3, r2
 801385c:	d011      	beq.n	8013882 <HAL_RCCEx_PeriphCLKConfig+0x1476>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 801385e:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8013862:	3328      	adds	r3, #40	@ 0x28
 8013864:	2102      	movs	r1, #2
 8013866:	4618      	mov	r0, r3
 8013868:	f001 fa5c 	bl	8014d24 <RCCEx_PLL3_Config>
 801386c:	4603      	mov	r3, r0
 801386e:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
    
    if (ret == HAL_OK)
 8013872:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8013876:	2b00      	cmp	r3, #0
 8013878:	d003      	beq.n	8013882 <HAL_RCCEx_PeriphCLKConfig+0x1476>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 801387a:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 801387e:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    } 
  }

  if (status == HAL_OK)
 8013882:	f897 312e 	ldrb.w	r3, [r7, #302]	@ 0x12e
 8013886:	2b00      	cmp	r3, #0
 8013888:	d101      	bne.n	801388e <HAL_RCCEx_PeriphCLKConfig+0x1482>
  {
    return HAL_OK;
 801388a:	2300      	movs	r3, #0
 801388c:	e000      	b.n	8013890 <HAL_RCCEx_PeriphCLKConfig+0x1484>
  }
  return HAL_ERROR;
 801388e:	2301      	movs	r3, #1
}
 8013890:	4618      	mov	r0, r3
 8013892:	f507 7798 	add.w	r7, r7, #304	@ 0x130
 8013896:	46bd      	mov	sp, r7
 8013898:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 801389c:	58024400 	.word	0x58024400

080138a0 <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in KHz
  *
  *  (*) : Available on some STM32H7 lines only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint64_t PeriphClk)
{
 80138a0:	b580      	push	{r7, lr}
 80138a2:	b090      	sub	sp, #64	@ 0x40
 80138a4:	af00      	add	r7, sp, #0
 80138a6:	e9c7 0100 	strd	r0, r1, [r7]
  /* This variable is used to store the SAI and CKP clock source */
  uint32_t saiclocksource;
  uint32_t ckpclocksource;
  uint32_t srcclk;

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 80138aa:	e9d7 2300 	ldrd	r2, r3, [r7]
 80138ae:	f5a2 7180 	sub.w	r1, r2, #256	@ 0x100
 80138b2:	430b      	orrs	r3, r1
 80138b4:	f040 8094 	bne.w	80139e0 <HAL_RCCEx_GetPeriphCLKFreq+0x140>
  {

    saiclocksource = __HAL_RCC_GET_SAI1_SOURCE();
 80138b8:	4b9e      	ldr	r3, [pc, #632]	@ (8013b34 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80138ba:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80138bc:	f003 0307 	and.w	r3, r3, #7
 80138c0:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 80138c2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80138c4:	2b04      	cmp	r3, #4
 80138c6:	f200 8087 	bhi.w	80139d8 <HAL_RCCEx_GetPeriphCLKFreq+0x138>
 80138ca:	a201      	add	r2, pc, #4	@ (adr r2, 80138d0 <HAL_RCCEx_GetPeriphCLKFreq+0x30>)
 80138cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80138d0:	080138e5 	.word	0x080138e5
 80138d4:	0801390d 	.word	0x0801390d
 80138d8:	08013935 	.word	0x08013935
 80138dc:	080139d1 	.word	0x080139d1
 80138e0:	0801395d 	.word	0x0801395d
    {
      case RCC_SAI1CLKSOURCE_PLL: /* PLL1 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 80138e4:	4b93      	ldr	r3, [pc, #588]	@ (8013b34 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80138e6:	681b      	ldr	r3, [r3, #0]
 80138e8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80138ec:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80138f0:	d108      	bne.n	8013904 <HAL_RCCEx_GetPeriphCLKFreq+0x64>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80138f2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80138f6:	4618      	mov	r0, r3
 80138f8:	f001 f810 	bl	801491c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80138fc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80138fe:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8013900:	f000 bd45 	b.w	801438e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8013904:	2300      	movs	r3, #0
 8013906:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8013908:	f000 bd41 	b.w	801438e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 801390c:	4b89      	ldr	r3, [pc, #548]	@ (8013b34 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 801390e:	681b      	ldr	r3, [r3, #0]
 8013910:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8013914:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8013918:	d108      	bne.n	801392c <HAL_RCCEx_GetPeriphCLKFreq+0x8c>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 801391a:	f107 0318 	add.w	r3, r7, #24
 801391e:	4618      	mov	r0, r3
 8013920:	f000 fd54 	bl	80143cc <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8013924:	69bb      	ldr	r3, [r7, #24]
 8013926:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8013928:	f000 bd31 	b.w	801438e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 801392c:	2300      	movs	r3, #0
 801392e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8013930:	f000 bd2d 	b.w	801438e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI1CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8013934:	4b7f      	ldr	r3, [pc, #508]	@ (8013b34 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8013936:	681b      	ldr	r3, [r3, #0]
 8013938:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 801393c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8013940:	d108      	bne.n	8013954 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8013942:	f107 030c 	add.w	r3, r7, #12
 8013946:	4618      	mov	r0, r3
 8013948:	f000 fe94 	bl	8014674 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 801394c:	68fb      	ldr	r3, [r7, #12]
 801394e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8013950:	f000 bd1d 	b.w	801438e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8013954:	2300      	movs	r3, #0
 8013956:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8013958:	f000 bd19 	b.w	801438e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI1CLKSOURCE_CLKP: /* CKPER is the clock source for SAI1*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 801395c:	4b75      	ldr	r3, [pc, #468]	@ (8013b34 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 801395e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8013960:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8013964:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8013966:	4b73      	ldr	r3, [pc, #460]	@ (8013b34 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8013968:	681b      	ldr	r3, [r3, #0]
 801396a:	f003 0304 	and.w	r3, r3, #4
 801396e:	2b04      	cmp	r3, #4
 8013970:	d10c      	bne.n	801398c <HAL_RCCEx_GetPeriphCLKFreq+0xec>
 8013972:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8013974:	2b00      	cmp	r3, #0
 8013976:	d109      	bne.n	801398c <HAL_RCCEx_GetPeriphCLKFreq+0xec>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8013978:	4b6e      	ldr	r3, [pc, #440]	@ (8013b34 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 801397a:	681b      	ldr	r3, [r3, #0]
 801397c:	08db      	lsrs	r3, r3, #3
 801397e:	f003 0303 	and.w	r3, r3, #3
 8013982:	4a6d      	ldr	r2, [pc, #436]	@ (8013b38 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 8013984:	fa22 f303 	lsr.w	r3, r2, r3
 8013988:	63fb      	str	r3, [r7, #60]	@ 0x3c
 801398a:	e01f      	b.n	80139cc <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 801398c:	4b69      	ldr	r3, [pc, #420]	@ (8013b34 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 801398e:	681b      	ldr	r3, [r3, #0]
 8013990:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8013994:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8013998:	d106      	bne.n	80139a8 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
 801399a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801399c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80139a0:	d102      	bne.n	80139a8 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 80139a2:	4b66      	ldr	r3, [pc, #408]	@ (8013b3c <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 80139a4:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80139a6:	e011      	b.n	80139cc <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 80139a8:	4b62      	ldr	r3, [pc, #392]	@ (8013b34 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80139aa:	681b      	ldr	r3, [r3, #0]
 80139ac:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80139b0:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80139b4:	d106      	bne.n	80139c4 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
 80139b6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80139b8:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80139bc:	d102      	bne.n	80139c4 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 80139be:	4b60      	ldr	r3, [pc, #384]	@ (8013b40 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 80139c0:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80139c2:	e003      	b.n	80139cc <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 80139c4:	2300      	movs	r3, #0
 80139c6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 80139c8:	f000 bce1 	b.w	801438e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 80139cc:	f000 bcdf 	b.w	801438e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SAI1CLKSOURCE_PIN): /* External clock is the clock source for SAI1 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 80139d0:	4b5c      	ldr	r3, [pc, #368]	@ (8013b44 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 80139d2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80139d4:	f000 bcdb 	b.w	801438e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 80139d8:	2300      	movs	r3, #0
 80139da:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80139dc:	f000 bcd7 	b.w	801438e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }

#if defined(SAI3)
  else if (PeriphClk == RCC_PERIPHCLK_SAI23)
 80139e0:	e9d7 2300 	ldrd	r2, r3, [r7]
 80139e4:	f5a2 7100 	sub.w	r1, r2, #512	@ 0x200
 80139e8:	430b      	orrs	r3, r1
 80139ea:	f040 80ad 	bne.w	8013b48 <HAL_RCCEx_GetPeriphCLKFreq+0x2a8>
  {

    saiclocksource = __HAL_RCC_GET_SAI23_SOURCE();
 80139ee:	4b51      	ldr	r3, [pc, #324]	@ (8013b34 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80139f0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80139f2:	f403 73e0 	and.w	r3, r3, #448	@ 0x1c0
 80139f6:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 80139f8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80139fa:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80139fe:	d056      	beq.n	8013aae <HAL_RCCEx_GetPeriphCLKFreq+0x20e>
 8013a00:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013a02:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8013a06:	f200 8090 	bhi.w	8013b2a <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 8013a0a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013a0c:	2bc0      	cmp	r3, #192	@ 0xc0
 8013a0e:	f000 8088 	beq.w	8013b22 <HAL_RCCEx_GetPeriphCLKFreq+0x282>
 8013a12:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013a14:	2bc0      	cmp	r3, #192	@ 0xc0
 8013a16:	f200 8088 	bhi.w	8013b2a <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 8013a1a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013a1c:	2b80      	cmp	r3, #128	@ 0x80
 8013a1e:	d032      	beq.n	8013a86 <HAL_RCCEx_GetPeriphCLKFreq+0x1e6>
 8013a20:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013a22:	2b80      	cmp	r3, #128	@ 0x80
 8013a24:	f200 8081 	bhi.w	8013b2a <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 8013a28:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013a2a:	2b00      	cmp	r3, #0
 8013a2c:	d003      	beq.n	8013a36 <HAL_RCCEx_GetPeriphCLKFreq+0x196>
 8013a2e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013a30:	2b40      	cmp	r3, #64	@ 0x40
 8013a32:	d014      	beq.n	8013a5e <HAL_RCCEx_GetPeriphCLKFreq+0x1be>
 8013a34:	e079      	b.n	8013b2a <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
    {
      case RCC_SAI23CLKSOURCE_PLL: /* PLL1 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8013a36:	4b3f      	ldr	r3, [pc, #252]	@ (8013b34 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8013a38:	681b      	ldr	r3, [r3, #0]
 8013a3a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8013a3e:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8013a42:	d108      	bne.n	8013a56 <HAL_RCCEx_GetPeriphCLKFreq+0x1b6>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8013a44:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8013a48:	4618      	mov	r0, r3
 8013a4a:	f000 ff67 	bl	801491c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8013a4e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8013a50:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8013a52:	f000 bc9c 	b.w	801438e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8013a56:	2300      	movs	r3, #0
 8013a58:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8013a5a:	f000 bc98 	b.w	801438e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8013a5e:	4b35      	ldr	r3, [pc, #212]	@ (8013b34 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8013a60:	681b      	ldr	r3, [r3, #0]
 8013a62:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8013a66:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8013a6a:	d108      	bne.n	8013a7e <HAL_RCCEx_GetPeriphCLKFreq+0x1de>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8013a6c:	f107 0318 	add.w	r3, r7, #24
 8013a70:	4618      	mov	r0, r3
 8013a72:	f000 fcab 	bl	80143cc <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8013a76:	69bb      	ldr	r3, [r7, #24]
 8013a78:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8013a7a:	f000 bc88 	b.w	801438e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8013a7e:	2300      	movs	r3, #0
 8013a80:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8013a82:	f000 bc84 	b.w	801438e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI23CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8013a86:	4b2b      	ldr	r3, [pc, #172]	@ (8013b34 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8013a88:	681b      	ldr	r3, [r3, #0]
 8013a8a:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8013a8e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8013a92:	d108      	bne.n	8013aa6 <HAL_RCCEx_GetPeriphCLKFreq+0x206>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8013a94:	f107 030c 	add.w	r3, r7, #12
 8013a98:	4618      	mov	r0, r3
 8013a9a:	f000 fdeb 	bl	8014674 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8013a9e:	68fb      	ldr	r3, [r7, #12]
 8013aa0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8013aa2:	f000 bc74 	b.w	801438e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8013aa6:	2300      	movs	r3, #0
 8013aa8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8013aaa:	f000 bc70 	b.w	801438e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI23CLKSOURCE_CLKP: /* CKPER is the clock source for SAI2/3 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8013aae:	4b21      	ldr	r3, [pc, #132]	@ (8013b34 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8013ab0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8013ab2:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8013ab6:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8013ab8:	4b1e      	ldr	r3, [pc, #120]	@ (8013b34 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8013aba:	681b      	ldr	r3, [r3, #0]
 8013abc:	f003 0304 	and.w	r3, r3, #4
 8013ac0:	2b04      	cmp	r3, #4
 8013ac2:	d10c      	bne.n	8013ade <HAL_RCCEx_GetPeriphCLKFreq+0x23e>
 8013ac4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8013ac6:	2b00      	cmp	r3, #0
 8013ac8:	d109      	bne.n	8013ade <HAL_RCCEx_GetPeriphCLKFreq+0x23e>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8013aca:	4b1a      	ldr	r3, [pc, #104]	@ (8013b34 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8013acc:	681b      	ldr	r3, [r3, #0]
 8013ace:	08db      	lsrs	r3, r3, #3
 8013ad0:	f003 0303 	and.w	r3, r3, #3
 8013ad4:	4a18      	ldr	r2, [pc, #96]	@ (8013b38 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 8013ad6:	fa22 f303 	lsr.w	r3, r2, r3
 8013ada:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8013adc:	e01f      	b.n	8013b1e <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8013ade:	4b15      	ldr	r3, [pc, #84]	@ (8013b34 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8013ae0:	681b      	ldr	r3, [r3, #0]
 8013ae2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8013ae6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8013aea:	d106      	bne.n	8013afa <HAL_RCCEx_GetPeriphCLKFreq+0x25a>
 8013aec:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8013aee:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8013af2:	d102      	bne.n	8013afa <HAL_RCCEx_GetPeriphCLKFreq+0x25a>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8013af4:	4b11      	ldr	r3, [pc, #68]	@ (8013b3c <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 8013af6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8013af8:	e011      	b.n	8013b1e <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8013afa:	4b0e      	ldr	r3, [pc, #56]	@ (8013b34 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8013afc:	681b      	ldr	r3, [r3, #0]
 8013afe:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8013b02:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8013b06:	d106      	bne.n	8013b16 <HAL_RCCEx_GetPeriphCLKFreq+0x276>
 8013b08:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8013b0a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8013b0e:	d102      	bne.n	8013b16 <HAL_RCCEx_GetPeriphCLKFreq+0x276>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8013b10:	4b0b      	ldr	r3, [pc, #44]	@ (8013b40 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 8013b12:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8013b14:	e003      	b.n	8013b1e <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8013b16:	2300      	movs	r3, #0
 8013b18:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 8013b1a:	f000 bc38 	b.w	801438e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8013b1e:	f000 bc36 	b.w	801438e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SAI23CLKSOURCE_PIN): /* External clock is the clock source for SAI2/3 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8013b22:	4b08      	ldr	r3, [pc, #32]	@ (8013b44 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 8013b24:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8013b26:	f000 bc32 	b.w	801438e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 8013b2a:	2300      	movs	r3, #0
 8013b2c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8013b2e:	f000 bc2e 	b.w	801438e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8013b32:	bf00      	nop
 8013b34:	58024400 	.word	0x58024400
 8013b38:	03d09000 	.word	0x03d09000
 8013b3c:	003d0900 	.word	0x003d0900
 8013b40:	017d7840 	.word	0x017d7840
 8013b44:	00bb8000 	.word	0x00bb8000
    }
  }
#endif

#if defined(SAI4)
  else if (PeriphClk == RCC_PERIPHCLK_SAI4A)
 8013b48:	e9d7 2300 	ldrd	r2, r3, [r7]
 8013b4c:	f5a2 6180 	sub.w	r1, r2, #1024	@ 0x400
 8013b50:	430b      	orrs	r3, r1
 8013b52:	f040 809c 	bne.w	8013c8e <HAL_RCCEx_GetPeriphCLKFreq+0x3ee>
  {

    saiclocksource = __HAL_RCC_GET_SAI4A_SOURCE();
 8013b56:	4b9e      	ldr	r3, [pc, #632]	@ (8013dd0 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8013b58:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8013b5a:	f403 0360 	and.w	r3, r3, #14680064	@ 0xe00000
 8013b5e:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 8013b60:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013b62:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8013b66:	d054      	beq.n	8013c12 <HAL_RCCEx_GetPeriphCLKFreq+0x372>
 8013b68:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013b6a:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8013b6e:	f200 808b 	bhi.w	8013c88 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 8013b72:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013b74:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8013b78:	f000 8083 	beq.w	8013c82 <HAL_RCCEx_GetPeriphCLKFreq+0x3e2>
 8013b7c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013b7e:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8013b82:	f200 8081 	bhi.w	8013c88 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 8013b86:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013b88:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8013b8c:	d02f      	beq.n	8013bee <HAL_RCCEx_GetPeriphCLKFreq+0x34e>
 8013b8e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013b90:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8013b94:	d878      	bhi.n	8013c88 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 8013b96:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013b98:	2b00      	cmp	r3, #0
 8013b9a:	d004      	beq.n	8013ba6 <HAL_RCCEx_GetPeriphCLKFreq+0x306>
 8013b9c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013b9e:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8013ba2:	d012      	beq.n	8013bca <HAL_RCCEx_GetPeriphCLKFreq+0x32a>
 8013ba4:	e070      	b.n	8013c88 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
    {
      case RCC_SAI4ACLKSOURCE_PLL: /* PLL1 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8013ba6:	4b8a      	ldr	r3, [pc, #552]	@ (8013dd0 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8013ba8:	681b      	ldr	r3, [r3, #0]
 8013baa:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8013bae:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8013bb2:	d107      	bne.n	8013bc4 <HAL_RCCEx_GetPeriphCLKFreq+0x324>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8013bb4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8013bb8:	4618      	mov	r0, r3
 8013bba:	f000 feaf 	bl	801491c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8013bbe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8013bc0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8013bc2:	e3e4      	b.n	801438e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8013bc4:	2300      	movs	r3, #0
 8013bc6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8013bc8:	e3e1      	b.n	801438e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI4ACLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8013bca:	4b81      	ldr	r3, [pc, #516]	@ (8013dd0 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8013bcc:	681b      	ldr	r3, [r3, #0]
 8013bce:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8013bd2:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8013bd6:	d107      	bne.n	8013be8 <HAL_RCCEx_GetPeriphCLKFreq+0x348>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8013bd8:	f107 0318 	add.w	r3, r7, #24
 8013bdc:	4618      	mov	r0, r3
 8013bde:	f000 fbf5 	bl	80143cc <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8013be2:	69bb      	ldr	r3, [r7, #24]
 8013be4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8013be6:	e3d2      	b.n	801438e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8013be8:	2300      	movs	r3, #0
 8013bea:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8013bec:	e3cf      	b.n	801438e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8013bee:	4b78      	ldr	r3, [pc, #480]	@ (8013dd0 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8013bf0:	681b      	ldr	r3, [r3, #0]
 8013bf2:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8013bf6:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8013bfa:	d107      	bne.n	8013c0c <HAL_RCCEx_GetPeriphCLKFreq+0x36c>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8013bfc:	f107 030c 	add.w	r3, r7, #12
 8013c00:	4618      	mov	r0, r3
 8013c02:	f000 fd37 	bl	8014674 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8013c06:	68fb      	ldr	r3, [r7, #12]
 8013c08:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8013c0a:	e3c0      	b.n	801438e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8013c0c:	2300      	movs	r3, #0
 8013c0e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8013c10:	e3bd      	b.n	801438e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_CLKP: /* CKPER is the clock source for SAI4A*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8013c12:	4b6f      	ldr	r3, [pc, #444]	@ (8013dd0 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8013c14:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8013c16:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8013c1a:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8013c1c:	4b6c      	ldr	r3, [pc, #432]	@ (8013dd0 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8013c1e:	681b      	ldr	r3, [r3, #0]
 8013c20:	f003 0304 	and.w	r3, r3, #4
 8013c24:	2b04      	cmp	r3, #4
 8013c26:	d10c      	bne.n	8013c42 <HAL_RCCEx_GetPeriphCLKFreq+0x3a2>
 8013c28:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8013c2a:	2b00      	cmp	r3, #0
 8013c2c:	d109      	bne.n	8013c42 <HAL_RCCEx_GetPeriphCLKFreq+0x3a2>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8013c2e:	4b68      	ldr	r3, [pc, #416]	@ (8013dd0 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8013c30:	681b      	ldr	r3, [r3, #0]
 8013c32:	08db      	lsrs	r3, r3, #3
 8013c34:	f003 0303 	and.w	r3, r3, #3
 8013c38:	4a66      	ldr	r2, [pc, #408]	@ (8013dd4 <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 8013c3a:	fa22 f303 	lsr.w	r3, r2, r3
 8013c3e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8013c40:	e01e      	b.n	8013c80 <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8013c42:	4b63      	ldr	r3, [pc, #396]	@ (8013dd0 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8013c44:	681b      	ldr	r3, [r3, #0]
 8013c46:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8013c4a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8013c4e:	d106      	bne.n	8013c5e <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
 8013c50:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8013c52:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8013c56:	d102      	bne.n	8013c5e <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8013c58:	4b5f      	ldr	r3, [pc, #380]	@ (8013dd8 <HAL_RCCEx_GetPeriphCLKFreq+0x538>)
 8013c5a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8013c5c:	e010      	b.n	8013c80 <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8013c5e:	4b5c      	ldr	r3, [pc, #368]	@ (8013dd0 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8013c60:	681b      	ldr	r3, [r3, #0]
 8013c62:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8013c66:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8013c6a:	d106      	bne.n	8013c7a <HAL_RCCEx_GetPeriphCLKFreq+0x3da>
 8013c6c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8013c6e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8013c72:	d102      	bne.n	8013c7a <HAL_RCCEx_GetPeriphCLKFreq+0x3da>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8013c74:	4b59      	ldr	r3, [pc, #356]	@ (8013ddc <HAL_RCCEx_GetPeriphCLKFreq+0x53c>)
 8013c76:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8013c78:	e002      	b.n	8013c80 <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8013c7a:	2300      	movs	r3, #0
 8013c7c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 8013c7e:	e386      	b.n	801438e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8013c80:	e385      	b.n	801438e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_PIN: /* External clock is the clock source for SAI4A */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8013c82:	4b57      	ldr	r3, [pc, #348]	@ (8013de0 <HAL_RCCEx_GetPeriphCLKFreq+0x540>)
 8013c84:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8013c86:	e382      	b.n	801438e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 8013c88:	2300      	movs	r3, #0
 8013c8a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8013c8c:	e37f      	b.n	801438e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }

  else if (PeriphClk == RCC_PERIPHCLK_SAI4B)
 8013c8e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8013c92:	f5a2 6100 	sub.w	r1, r2, #2048	@ 0x800
 8013c96:	430b      	orrs	r3, r1
 8013c98:	f040 80a7 	bne.w	8013dea <HAL_RCCEx_GetPeriphCLKFreq+0x54a>
  {

    saiclocksource = __HAL_RCC_GET_SAI4B_SOURCE();
 8013c9c:	4b4c      	ldr	r3, [pc, #304]	@ (8013dd0 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8013c9e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8013ca0:	f003 63e0 	and.w	r3, r3, #117440512	@ 0x7000000
 8013ca4:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 8013ca6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013ca8:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8013cac:	d055      	beq.n	8013d5a <HAL_RCCEx_GetPeriphCLKFreq+0x4ba>
 8013cae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013cb0:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8013cb4:	f200 8096 	bhi.w	8013de4 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 8013cb8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013cba:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8013cbe:	f000 8084 	beq.w	8013dca <HAL_RCCEx_GetPeriphCLKFreq+0x52a>
 8013cc2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013cc4:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8013cc8:	f200 808c 	bhi.w	8013de4 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 8013ccc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013cce:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8013cd2:	d030      	beq.n	8013d36 <HAL_RCCEx_GetPeriphCLKFreq+0x496>
 8013cd4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013cd6:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8013cda:	f200 8083 	bhi.w	8013de4 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 8013cde:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013ce0:	2b00      	cmp	r3, #0
 8013ce2:	d004      	beq.n	8013cee <HAL_RCCEx_GetPeriphCLKFreq+0x44e>
 8013ce4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013ce6:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8013cea:	d012      	beq.n	8013d12 <HAL_RCCEx_GetPeriphCLKFreq+0x472>
 8013cec:	e07a      	b.n	8013de4 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
    {
      case RCC_SAI4BCLKSOURCE_PLL: /* PLL1 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8013cee:	4b38      	ldr	r3, [pc, #224]	@ (8013dd0 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8013cf0:	681b      	ldr	r3, [r3, #0]
 8013cf2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8013cf6:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8013cfa:	d107      	bne.n	8013d0c <HAL_RCCEx_GetPeriphCLKFreq+0x46c>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8013cfc:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8013d00:	4618      	mov	r0, r3
 8013d02:	f000 fe0b 	bl	801491c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8013d06:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8013d08:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8013d0a:	e340      	b.n	801438e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8013d0c:	2300      	movs	r3, #0
 8013d0e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8013d10:	e33d      	b.n	801438e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI4BCLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8013d12:	4b2f      	ldr	r3, [pc, #188]	@ (8013dd0 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8013d14:	681b      	ldr	r3, [r3, #0]
 8013d16:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8013d1a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8013d1e:	d107      	bne.n	8013d30 <HAL_RCCEx_GetPeriphCLKFreq+0x490>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8013d20:	f107 0318 	add.w	r3, r7, #24
 8013d24:	4618      	mov	r0, r3
 8013d26:	f000 fb51 	bl	80143cc <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8013d2a:	69bb      	ldr	r3, [r7, #24]
 8013d2c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8013d2e:	e32e      	b.n	801438e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8013d30:	2300      	movs	r3, #0
 8013d32:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8013d34:	e32b      	b.n	801438e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8013d36:	4b26      	ldr	r3, [pc, #152]	@ (8013dd0 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8013d38:	681b      	ldr	r3, [r3, #0]
 8013d3a:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8013d3e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8013d42:	d107      	bne.n	8013d54 <HAL_RCCEx_GetPeriphCLKFreq+0x4b4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8013d44:	f107 030c 	add.w	r3, r7, #12
 8013d48:	4618      	mov	r0, r3
 8013d4a:	f000 fc93 	bl	8014674 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8013d4e:	68fb      	ldr	r3, [r7, #12]
 8013d50:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8013d52:	e31c      	b.n	801438e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8013d54:	2300      	movs	r3, #0
 8013d56:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8013d58:	e319      	b.n	801438e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_CLKP: /* CKPER is the clock source for SAI4B*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8013d5a:	4b1d      	ldr	r3, [pc, #116]	@ (8013dd0 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8013d5c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8013d5e:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8013d62:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8013d64:	4b1a      	ldr	r3, [pc, #104]	@ (8013dd0 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8013d66:	681b      	ldr	r3, [r3, #0]
 8013d68:	f003 0304 	and.w	r3, r3, #4
 8013d6c:	2b04      	cmp	r3, #4
 8013d6e:	d10c      	bne.n	8013d8a <HAL_RCCEx_GetPeriphCLKFreq+0x4ea>
 8013d70:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8013d72:	2b00      	cmp	r3, #0
 8013d74:	d109      	bne.n	8013d8a <HAL_RCCEx_GetPeriphCLKFreq+0x4ea>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8013d76:	4b16      	ldr	r3, [pc, #88]	@ (8013dd0 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8013d78:	681b      	ldr	r3, [r3, #0]
 8013d7a:	08db      	lsrs	r3, r3, #3
 8013d7c:	f003 0303 	and.w	r3, r3, #3
 8013d80:	4a14      	ldr	r2, [pc, #80]	@ (8013dd4 <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 8013d82:	fa22 f303 	lsr.w	r3, r2, r3
 8013d86:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8013d88:	e01e      	b.n	8013dc8 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8013d8a:	4b11      	ldr	r3, [pc, #68]	@ (8013dd0 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8013d8c:	681b      	ldr	r3, [r3, #0]
 8013d8e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8013d92:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8013d96:	d106      	bne.n	8013da6 <HAL_RCCEx_GetPeriphCLKFreq+0x506>
 8013d98:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8013d9a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8013d9e:	d102      	bne.n	8013da6 <HAL_RCCEx_GetPeriphCLKFreq+0x506>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8013da0:	4b0d      	ldr	r3, [pc, #52]	@ (8013dd8 <HAL_RCCEx_GetPeriphCLKFreq+0x538>)
 8013da2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8013da4:	e010      	b.n	8013dc8 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8013da6:	4b0a      	ldr	r3, [pc, #40]	@ (8013dd0 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8013da8:	681b      	ldr	r3, [r3, #0]
 8013daa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8013dae:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8013db2:	d106      	bne.n	8013dc2 <HAL_RCCEx_GetPeriphCLKFreq+0x522>
 8013db4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8013db6:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8013dba:	d102      	bne.n	8013dc2 <HAL_RCCEx_GetPeriphCLKFreq+0x522>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8013dbc:	4b07      	ldr	r3, [pc, #28]	@ (8013ddc <HAL_RCCEx_GetPeriphCLKFreq+0x53c>)
 8013dbe:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8013dc0:	e002      	b.n	8013dc8 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8013dc2:	2300      	movs	r3, #0
 8013dc4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 8013dc6:	e2e2      	b.n	801438e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8013dc8:	e2e1      	b.n	801438e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_PIN: /* External clock is the clock source for SAI4B */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8013dca:	4b05      	ldr	r3, [pc, #20]	@ (8013de0 <HAL_RCCEx_GetPeriphCLKFreq+0x540>)
 8013dcc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8013dce:	e2de      	b.n	801438e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8013dd0:	58024400 	.word	0x58024400
 8013dd4:	03d09000 	.word	0x03d09000
 8013dd8:	003d0900 	.word	0x003d0900
 8013ddc:	017d7840 	.word	0x017d7840
 8013de0:	00bb8000 	.word	0x00bb8000
      }

      default :
      {
        frequency = 0;
 8013de4:	2300      	movs	r3, #0
 8013de6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8013de8:	e2d1      	b.n	801438e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
#endif /*SAI4*/
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 8013dea:	e9d7 2300 	ldrd	r2, r3, [r7]
 8013dee:	f5a2 5180 	sub.w	r1, r2, #4096	@ 0x1000
 8013df2:	430b      	orrs	r3, r1
 8013df4:	f040 809c 	bne.w	8013f30 <HAL_RCCEx_GetPeriphCLKFreq+0x690>
  {
    /* Get SPI1/2/3 clock source */
    srcclk = __HAL_RCC_GET_SPI123_SOURCE();
 8013df8:	4b93      	ldr	r3, [pc, #588]	@ (8014048 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8013dfa:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8013dfc:	f403 43e0 	and.w	r3, r3, #28672	@ 0x7000
 8013e00:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 8013e02:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013e04:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8013e08:	d054      	beq.n	8013eb4 <HAL_RCCEx_GetPeriphCLKFreq+0x614>
 8013e0a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013e0c:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8013e10:	f200 808b 	bhi.w	8013f2a <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 8013e14:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013e16:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8013e1a:	f000 8083 	beq.w	8013f24 <HAL_RCCEx_GetPeriphCLKFreq+0x684>
 8013e1e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013e20:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8013e24:	f200 8081 	bhi.w	8013f2a <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 8013e28:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013e2a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8013e2e:	d02f      	beq.n	8013e90 <HAL_RCCEx_GetPeriphCLKFreq+0x5f0>
 8013e30:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013e32:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8013e36:	d878      	bhi.n	8013f2a <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 8013e38:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013e3a:	2b00      	cmp	r3, #0
 8013e3c:	d004      	beq.n	8013e48 <HAL_RCCEx_GetPeriphCLKFreq+0x5a8>
 8013e3e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013e40:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8013e44:	d012      	beq.n	8013e6c <HAL_RCCEx_GetPeriphCLKFreq+0x5cc>
 8013e46:	e070      	b.n	8013f2a <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
    {
      case RCC_SPI123CLKSOURCE_PLL: /* PLL1 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8013e48:	4b7f      	ldr	r3, [pc, #508]	@ (8014048 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8013e4a:	681b      	ldr	r3, [r3, #0]
 8013e4c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8013e50:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8013e54:	d107      	bne.n	8013e66 <HAL_RCCEx_GetPeriphCLKFreq+0x5c6>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8013e56:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8013e5a:	4618      	mov	r0, r3
 8013e5c:	f000 fd5e 	bl	801491c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8013e60:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8013e62:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8013e64:	e293      	b.n	801438e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8013e66:	2300      	movs	r3, #0
 8013e68:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8013e6a:	e290      	b.n	801438e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8013e6c:	4b76      	ldr	r3, [pc, #472]	@ (8014048 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8013e6e:	681b      	ldr	r3, [r3, #0]
 8013e70:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8013e74:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8013e78:	d107      	bne.n	8013e8a <HAL_RCCEx_GetPeriphCLKFreq+0x5ea>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8013e7a:	f107 0318 	add.w	r3, r7, #24
 8013e7e:	4618      	mov	r0, r3
 8013e80:	f000 faa4 	bl	80143cc <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8013e84:	69bb      	ldr	r3, [r7, #24]
 8013e86:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8013e88:	e281      	b.n	801438e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8013e8a:	2300      	movs	r3, #0
 8013e8c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8013e8e:	e27e      	b.n	801438e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SPI123CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8013e90:	4b6d      	ldr	r3, [pc, #436]	@ (8014048 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8013e92:	681b      	ldr	r3, [r3, #0]
 8013e94:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8013e98:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8013e9c:	d107      	bne.n	8013eae <HAL_RCCEx_GetPeriphCLKFreq+0x60e>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8013e9e:	f107 030c 	add.w	r3, r7, #12
 8013ea2:	4618      	mov	r0, r3
 8013ea4:	f000 fbe6 	bl	8014674 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8013ea8:	68fb      	ldr	r3, [r7, #12]
 8013eaa:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8013eac:	e26f      	b.n	801438e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8013eae:	2300      	movs	r3, #0
 8013eb0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8013eb2:	e26c      	b.n	801438e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SPI123CLKSOURCE_CLKP: /* CKPER is the clock source for SPI123 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8013eb4:	4b64      	ldr	r3, [pc, #400]	@ (8014048 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8013eb6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8013eb8:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8013ebc:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8013ebe:	4b62      	ldr	r3, [pc, #392]	@ (8014048 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8013ec0:	681b      	ldr	r3, [r3, #0]
 8013ec2:	f003 0304 	and.w	r3, r3, #4
 8013ec6:	2b04      	cmp	r3, #4
 8013ec8:	d10c      	bne.n	8013ee4 <HAL_RCCEx_GetPeriphCLKFreq+0x644>
 8013eca:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8013ecc:	2b00      	cmp	r3, #0
 8013ece:	d109      	bne.n	8013ee4 <HAL_RCCEx_GetPeriphCLKFreq+0x644>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8013ed0:	4b5d      	ldr	r3, [pc, #372]	@ (8014048 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8013ed2:	681b      	ldr	r3, [r3, #0]
 8013ed4:	08db      	lsrs	r3, r3, #3
 8013ed6:	f003 0303 	and.w	r3, r3, #3
 8013eda:	4a5c      	ldr	r2, [pc, #368]	@ (801404c <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>)
 8013edc:	fa22 f303 	lsr.w	r3, r2, r3
 8013ee0:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8013ee2:	e01e      	b.n	8013f22 <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8013ee4:	4b58      	ldr	r3, [pc, #352]	@ (8014048 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8013ee6:	681b      	ldr	r3, [r3, #0]
 8013ee8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8013eec:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8013ef0:	d106      	bne.n	8013f00 <HAL_RCCEx_GetPeriphCLKFreq+0x660>
 8013ef2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8013ef4:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8013ef8:	d102      	bne.n	8013f00 <HAL_RCCEx_GetPeriphCLKFreq+0x660>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8013efa:	4b55      	ldr	r3, [pc, #340]	@ (8014050 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 8013efc:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8013efe:	e010      	b.n	8013f22 <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8013f00:	4b51      	ldr	r3, [pc, #324]	@ (8014048 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8013f02:	681b      	ldr	r3, [r3, #0]
 8013f04:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8013f08:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8013f0c:	d106      	bne.n	8013f1c <HAL_RCCEx_GetPeriphCLKFreq+0x67c>
 8013f0e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8013f10:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8013f14:	d102      	bne.n	8013f1c <HAL_RCCEx_GetPeriphCLKFreq+0x67c>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8013f16:	4b4f      	ldr	r3, [pc, #316]	@ (8014054 <HAL_RCCEx_GetPeriphCLKFreq+0x7b4>)
 8013f18:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8013f1a:	e002      	b.n	8013f22 <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8013f1c:	2300      	movs	r3, #0
 8013f1e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 8013f20:	e235      	b.n	801438e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8013f22:	e234      	b.n	801438e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SPI123CLKSOURCE_PIN): /* External clock is the clock source for I2S */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8013f24:	4b4c      	ldr	r3, [pc, #304]	@ (8014058 <HAL_RCCEx_GetPeriphCLKFreq+0x7b8>)
 8013f26:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8013f28:	e231      	b.n	801438e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 8013f2a:	2300      	movs	r3, #0
 8013f2c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8013f2e:	e22e      	b.n	801438e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI45)
 8013f30:	e9d7 2300 	ldrd	r2, r3, [r7]
 8013f34:	f5a2 5100 	sub.w	r1, r2, #8192	@ 0x2000
 8013f38:	430b      	orrs	r3, r1
 8013f3a:	f040 808f 	bne.w	801405c <HAL_RCCEx_GetPeriphCLKFreq+0x7bc>
  {
    /* Get SPI45 clock source */
    srcclk = __HAL_RCC_GET_SPI45_SOURCE();
 8013f3e:	4b42      	ldr	r3, [pc, #264]	@ (8014048 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8013f40:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8013f42:	f403 23e0 	and.w	r3, r3, #458752	@ 0x70000
 8013f46:	63bb      	str	r3, [r7, #56]	@ 0x38
    switch (srcclk)
 8013f48:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013f4a:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8013f4e:	d06b      	beq.n	8014028 <HAL_RCCEx_GetPeriphCLKFreq+0x788>
 8013f50:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013f52:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8013f56:	d874      	bhi.n	8014042 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 8013f58:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013f5a:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8013f5e:	d056      	beq.n	801400e <HAL_RCCEx_GetPeriphCLKFreq+0x76e>
 8013f60:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013f62:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8013f66:	d86c      	bhi.n	8014042 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 8013f68:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013f6a:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8013f6e:	d03b      	beq.n	8013fe8 <HAL_RCCEx_GetPeriphCLKFreq+0x748>
 8013f70:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013f72:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8013f76:	d864      	bhi.n	8014042 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 8013f78:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013f7a:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8013f7e:	d021      	beq.n	8013fc4 <HAL_RCCEx_GetPeriphCLKFreq+0x724>
 8013f80:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013f82:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8013f86:	d85c      	bhi.n	8014042 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 8013f88:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013f8a:	2b00      	cmp	r3, #0
 8013f8c:	d004      	beq.n	8013f98 <HAL_RCCEx_GetPeriphCLKFreq+0x6f8>
 8013f8e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013f90:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8013f94:	d004      	beq.n	8013fa0 <HAL_RCCEx_GetPeriphCLKFreq+0x700>
 8013f96:	e054      	b.n	8014042 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
    {
      case RCC_SPI45CLKSOURCE_PCLK2: /* CD/D2 PCLK2 is the clock source for SPI4/5 */
      {
        frequency = HAL_RCC_GetPCLK1Freq();
 8013f98:	f7fe fa0c 	bl	80123b4 <HAL_RCC_GetPCLK1Freq>
 8013f9c:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8013f9e:	e1f6      	b.n	801438e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8013fa0:	4b29      	ldr	r3, [pc, #164]	@ (8014048 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8013fa2:	681b      	ldr	r3, [r3, #0]
 8013fa4:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8013fa8:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8013fac:	d107      	bne.n	8013fbe <HAL_RCCEx_GetPeriphCLKFreq+0x71e>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8013fae:	f107 0318 	add.w	r3, r7, #24
 8013fb2:	4618      	mov	r0, r3
 8013fb4:	f000 fa0a 	bl	80143cc <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8013fb8:	69fb      	ldr	r3, [r7, #28]
 8013fba:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8013fbc:	e1e7      	b.n	801438e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8013fbe:	2300      	movs	r3, #0
 8013fc0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8013fc2:	e1e4      	b.n	801438e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8013fc4:	4b20      	ldr	r3, [pc, #128]	@ (8014048 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8013fc6:	681b      	ldr	r3, [r3, #0]
 8013fc8:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8013fcc:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8013fd0:	d107      	bne.n	8013fe2 <HAL_RCCEx_GetPeriphCLKFreq+0x742>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8013fd2:	f107 030c 	add.w	r3, r7, #12
 8013fd6:	4618      	mov	r0, r3
 8013fd8:	f000 fb4c 	bl	8014674 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8013fdc:	693b      	ldr	r3, [r7, #16]
 8013fde:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8013fe0:	e1d5      	b.n	801438e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8013fe2:	2300      	movs	r3, #0
 8013fe4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8013fe6:	e1d2      	b.n	801438e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_HSI: /* HSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8013fe8:	4b17      	ldr	r3, [pc, #92]	@ (8014048 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8013fea:	681b      	ldr	r3, [r3, #0]
 8013fec:	f003 0304 	and.w	r3, r3, #4
 8013ff0:	2b04      	cmp	r3, #4
 8013ff2:	d109      	bne.n	8014008 <HAL_RCCEx_GetPeriphCLKFreq+0x768>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8013ff4:	4b14      	ldr	r3, [pc, #80]	@ (8014048 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8013ff6:	681b      	ldr	r3, [r3, #0]
 8013ff8:	08db      	lsrs	r3, r3, #3
 8013ffa:	f003 0303 	and.w	r3, r3, #3
 8013ffe:	4a13      	ldr	r2, [pc, #76]	@ (801404c <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>)
 8014000:	fa22 f303 	lsr.w	r3, r2, r3
 8014004:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8014006:	e1c2      	b.n	801438e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8014008:	2300      	movs	r3, #0
 801400a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 801400c:	e1bf      	b.n	801438e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_CSI: /* CSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 801400e:	4b0e      	ldr	r3, [pc, #56]	@ (8014048 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8014010:	681b      	ldr	r3, [r3, #0]
 8014012:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8014016:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 801401a:	d102      	bne.n	8014022 <HAL_RCCEx_GetPeriphCLKFreq+0x782>
        {
          frequency = CSI_VALUE;
 801401c:	4b0c      	ldr	r3, [pc, #48]	@ (8014050 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 801401e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8014020:	e1b5      	b.n	801438e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8014022:	2300      	movs	r3, #0
 8014024:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8014026:	e1b2      	b.n	801438e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_HSE: /* HSE is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8014028:	4b07      	ldr	r3, [pc, #28]	@ (8014048 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 801402a:	681b      	ldr	r3, [r3, #0]
 801402c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8014030:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8014034:	d102      	bne.n	801403c <HAL_RCCEx_GetPeriphCLKFreq+0x79c>
        {
          frequency = HSE_VALUE;
 8014036:	4b07      	ldr	r3, [pc, #28]	@ (8014054 <HAL_RCCEx_GetPeriphCLKFreq+0x7b4>)
 8014038:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 801403a:	e1a8      	b.n	801438e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 801403c:	2300      	movs	r3, #0
 801403e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8014040:	e1a5      	b.n	801438e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 8014042:	2300      	movs	r3, #0
 8014044:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8014046:	e1a2      	b.n	801438e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8014048:	58024400 	.word	0x58024400
 801404c:	03d09000 	.word	0x03d09000
 8014050:	003d0900 	.word	0x003d0900
 8014054:	017d7840 	.word	0x017d7840
 8014058:	00bb8000 	.word	0x00bb8000
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 801405c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8014060:	f5a2 2100 	sub.w	r1, r2, #524288	@ 0x80000
 8014064:	430b      	orrs	r3, r1
 8014066:	d173      	bne.n	8014150 <HAL_RCCEx_GetPeriphCLKFreq+0x8b0>
  {
    /* Get ADC clock source */
    srcclk = __HAL_RCC_GET_ADC_SOURCE();
 8014068:	4b9c      	ldr	r3, [pc, #624]	@ (80142dc <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 801406a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 801406c:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8014070:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 8014072:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8014074:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8014078:	d02f      	beq.n	80140da <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
 801407a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801407c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8014080:	d863      	bhi.n	801414a <HAL_RCCEx_GetPeriphCLKFreq+0x8aa>
 8014082:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8014084:	2b00      	cmp	r3, #0
 8014086:	d004      	beq.n	8014092 <HAL_RCCEx_GetPeriphCLKFreq+0x7f2>
 8014088:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801408a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 801408e:	d012      	beq.n	80140b6 <HAL_RCCEx_GetPeriphCLKFreq+0x816>
 8014090:	e05b      	b.n	801414a <HAL_RCCEx_GetPeriphCLKFreq+0x8aa>
    {
      case RCC_ADCCLKSOURCE_PLL2:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8014092:	4b92      	ldr	r3, [pc, #584]	@ (80142dc <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8014094:	681b      	ldr	r3, [r3, #0]
 8014096:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 801409a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 801409e:	d107      	bne.n	80140b0 <HAL_RCCEx_GetPeriphCLKFreq+0x810>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80140a0:	f107 0318 	add.w	r3, r7, #24
 80140a4:	4618      	mov	r0, r3
 80140a6:	f000 f991 	bl	80143cc <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 80140aa:	69bb      	ldr	r3, [r7, #24]
 80140ac:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80140ae:	e16e      	b.n	801438e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80140b0:	2300      	movs	r3, #0
 80140b2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80140b4:	e16b      	b.n	801438e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_ADCCLKSOURCE_PLL3:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80140b6:	4b89      	ldr	r3, [pc, #548]	@ (80142dc <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 80140b8:	681b      	ldr	r3, [r3, #0]
 80140ba:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80140be:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80140c2:	d107      	bne.n	80140d4 <HAL_RCCEx_GetPeriphCLKFreq+0x834>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80140c4:	f107 030c 	add.w	r3, r7, #12
 80140c8:	4618      	mov	r0, r3
 80140ca:	f000 fad3 	bl	8014674 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 80140ce:	697b      	ldr	r3, [r7, #20]
 80140d0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80140d2:	e15c      	b.n	801438e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80140d4:	2300      	movs	r3, #0
 80140d6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80140d8:	e159      	b.n	801438e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_ADCCLKSOURCE_CLKP:
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 80140da:	4b80      	ldr	r3, [pc, #512]	@ (80142dc <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 80140dc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80140de:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 80140e2:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 80140e4:	4b7d      	ldr	r3, [pc, #500]	@ (80142dc <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 80140e6:	681b      	ldr	r3, [r3, #0]
 80140e8:	f003 0304 	and.w	r3, r3, #4
 80140ec:	2b04      	cmp	r3, #4
 80140ee:	d10c      	bne.n	801410a <HAL_RCCEx_GetPeriphCLKFreq+0x86a>
 80140f0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80140f2:	2b00      	cmp	r3, #0
 80140f4:	d109      	bne.n	801410a <HAL_RCCEx_GetPeriphCLKFreq+0x86a>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80140f6:	4b79      	ldr	r3, [pc, #484]	@ (80142dc <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 80140f8:	681b      	ldr	r3, [r3, #0]
 80140fa:	08db      	lsrs	r3, r3, #3
 80140fc:	f003 0303 	and.w	r3, r3, #3
 8014100:	4a77      	ldr	r2, [pc, #476]	@ (80142e0 <HAL_RCCEx_GetPeriphCLKFreq+0xa40>)
 8014102:	fa22 f303 	lsr.w	r3, r2, r3
 8014106:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8014108:	e01e      	b.n	8014148 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 801410a:	4b74      	ldr	r3, [pc, #464]	@ (80142dc <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 801410c:	681b      	ldr	r3, [r3, #0]
 801410e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8014112:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8014116:	d106      	bne.n	8014126 <HAL_RCCEx_GetPeriphCLKFreq+0x886>
 8014118:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801411a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 801411e:	d102      	bne.n	8014126 <HAL_RCCEx_GetPeriphCLKFreq+0x886>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8014120:	4b70      	ldr	r3, [pc, #448]	@ (80142e4 <HAL_RCCEx_GetPeriphCLKFreq+0xa44>)
 8014122:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8014124:	e010      	b.n	8014148 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8014126:	4b6d      	ldr	r3, [pc, #436]	@ (80142dc <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8014128:	681b      	ldr	r3, [r3, #0]
 801412a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 801412e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8014132:	d106      	bne.n	8014142 <HAL_RCCEx_GetPeriphCLKFreq+0x8a2>
 8014134:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8014136:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 801413a:	d102      	bne.n	8014142 <HAL_RCCEx_GetPeriphCLKFreq+0x8a2>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 801413c:	4b6a      	ldr	r3, [pc, #424]	@ (80142e8 <HAL_RCCEx_GetPeriphCLKFreq+0xa48>)
 801413e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8014140:	e002      	b.n	8014148 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8014142:	2300      	movs	r3, #0
 8014144:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 8014146:	e122      	b.n	801438e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8014148:	e121      	b.n	801438e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 801414a:	2300      	movs	r3, #0
 801414c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 801414e:	e11e      	b.n	801438e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 8014150:	e9d7 2300 	ldrd	r2, r3, [r7]
 8014154:	f5a2 3180 	sub.w	r1, r2, #65536	@ 0x10000
 8014158:	430b      	orrs	r3, r1
 801415a:	d133      	bne.n	80141c4 <HAL_RCCEx_GetPeriphCLKFreq+0x924>
  {
    /* Get SDMMC clock source */
    srcclk = __HAL_RCC_GET_SDMMC_SOURCE();
 801415c:	4b5f      	ldr	r3, [pc, #380]	@ (80142dc <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 801415e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8014160:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8014164:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 8014166:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8014168:	2b00      	cmp	r3, #0
 801416a:	d004      	beq.n	8014176 <HAL_RCCEx_GetPeriphCLKFreq+0x8d6>
 801416c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801416e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8014172:	d012      	beq.n	801419a <HAL_RCCEx_GetPeriphCLKFreq+0x8fa>
 8014174:	e023      	b.n	80141be <HAL_RCCEx_GetPeriphCLKFreq+0x91e>
    {
      case RCC_SDMMCCLKSOURCE_PLL: /* PLL1 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8014176:	4b59      	ldr	r3, [pc, #356]	@ (80142dc <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8014178:	681b      	ldr	r3, [r3, #0]
 801417a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 801417e:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8014182:	d107      	bne.n	8014194 <HAL_RCCEx_GetPeriphCLKFreq+0x8f4>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8014184:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8014188:	4618      	mov	r0, r3
 801418a:	f000 fbc7 	bl	801491c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 801418e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8014190:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8014192:	e0fc      	b.n	801438e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8014194:	2300      	movs	r3, #0
 8014196:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8014198:	e0f9      	b.n	801438e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 801419a:	4b50      	ldr	r3, [pc, #320]	@ (80142dc <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 801419c:	681b      	ldr	r3, [r3, #0]
 801419e:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80141a2:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80141a6:	d107      	bne.n	80141b8 <HAL_RCCEx_GetPeriphCLKFreq+0x918>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80141a8:	f107 0318 	add.w	r3, r7, #24
 80141ac:	4618      	mov	r0, r3
 80141ae:	f000 f90d 	bl	80143cc <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 80141b2:	6a3b      	ldr	r3, [r7, #32]
 80141b4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80141b6:	e0ea      	b.n	801438e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80141b8:	2300      	movs	r3, #0
 80141ba:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80141bc:	e0e7      	b.n	801438e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 80141be:	2300      	movs	r3, #0
 80141c0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80141c2:	e0e4      	b.n	801438e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 80141c4:	e9d7 2300 	ldrd	r2, r3, [r7]
 80141c8:	f5a2 4180 	sub.w	r1, r2, #16384	@ 0x4000
 80141cc:	430b      	orrs	r3, r1
 80141ce:	f040 808d 	bne.w	80142ec <HAL_RCCEx_GetPeriphCLKFreq+0xa4c>
  {
    /* Get SPI6 clock source */
    srcclk = __HAL_RCC_GET_SPI6_SOURCE();
 80141d2:	4b42      	ldr	r3, [pc, #264]	@ (80142dc <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 80141d4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80141d6:	f003 43e0 	and.w	r3, r3, #1879048192	@ 0x70000000
 80141da:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 80141dc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80141de:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80141e2:	d06b      	beq.n	80142bc <HAL_RCCEx_GetPeriphCLKFreq+0xa1c>
 80141e4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80141e6:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80141ea:	d874      	bhi.n	80142d6 <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 80141ec:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80141ee:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80141f2:	d056      	beq.n	80142a2 <HAL_RCCEx_GetPeriphCLKFreq+0xa02>
 80141f4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80141f6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80141fa:	d86c      	bhi.n	80142d6 <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 80141fc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80141fe:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8014202:	d03b      	beq.n	801427c <HAL_RCCEx_GetPeriphCLKFreq+0x9dc>
 8014204:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8014206:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 801420a:	d864      	bhi.n	80142d6 <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 801420c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801420e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8014212:	d021      	beq.n	8014258 <HAL_RCCEx_GetPeriphCLKFreq+0x9b8>
 8014214:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8014216:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 801421a:	d85c      	bhi.n	80142d6 <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 801421c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801421e:	2b00      	cmp	r3, #0
 8014220:	d004      	beq.n	801422c <HAL_RCCEx_GetPeriphCLKFreq+0x98c>
 8014222:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8014224:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8014228:	d004      	beq.n	8014234 <HAL_RCCEx_GetPeriphCLKFreq+0x994>
 801422a:	e054      	b.n	80142d6 <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
    {
      case RCC_SPI6CLKSOURCE_D3PCLK1: /* D3PCLK1 (PCLK4) is the clock source for SPI6 */
      {
        frequency = HAL_RCCEx_GetD3PCLK1Freq();
 801422c:	f000 f8b8 	bl	80143a0 <HAL_RCCEx_GetD3PCLK1Freq>
 8014230:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8014232:	e0ac      	b.n	801438e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8014234:	4b29      	ldr	r3, [pc, #164]	@ (80142dc <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8014236:	681b      	ldr	r3, [r3, #0]
 8014238:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 801423c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8014240:	d107      	bne.n	8014252 <HAL_RCCEx_GetPeriphCLKFreq+0x9b2>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8014242:	f107 0318 	add.w	r3, r7, #24
 8014246:	4618      	mov	r0, r3
 8014248:	f000 f8c0 	bl	80143cc <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 801424c:	69fb      	ldr	r3, [r7, #28]
 801424e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8014250:	e09d      	b.n	801438e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8014252:	2300      	movs	r3, #0
 8014254:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8014256:	e09a      	b.n	801438e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8014258:	4b20      	ldr	r3, [pc, #128]	@ (80142dc <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 801425a:	681b      	ldr	r3, [r3, #0]
 801425c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8014260:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8014264:	d107      	bne.n	8014276 <HAL_RCCEx_GetPeriphCLKFreq+0x9d6>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8014266:	f107 030c 	add.w	r3, r7, #12
 801426a:	4618      	mov	r0, r3
 801426c:	f000 fa02 	bl	8014674 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8014270:	693b      	ldr	r3, [r7, #16]
 8014272:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8014274:	e08b      	b.n	801438e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8014276:	2300      	movs	r3, #0
 8014278:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 801427a:	e088      	b.n	801438e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_HSI: /* HSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 801427c:	4b17      	ldr	r3, [pc, #92]	@ (80142dc <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 801427e:	681b      	ldr	r3, [r3, #0]
 8014280:	f003 0304 	and.w	r3, r3, #4
 8014284:	2b04      	cmp	r3, #4
 8014286:	d109      	bne.n	801429c <HAL_RCCEx_GetPeriphCLKFreq+0x9fc>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8014288:	4b14      	ldr	r3, [pc, #80]	@ (80142dc <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 801428a:	681b      	ldr	r3, [r3, #0]
 801428c:	08db      	lsrs	r3, r3, #3
 801428e:	f003 0303 	and.w	r3, r3, #3
 8014292:	4a13      	ldr	r2, [pc, #76]	@ (80142e0 <HAL_RCCEx_GetPeriphCLKFreq+0xa40>)
 8014294:	fa22 f303 	lsr.w	r3, r2, r3
 8014298:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 801429a:	e078      	b.n	801438e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 801429c:	2300      	movs	r3, #0
 801429e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80142a0:	e075      	b.n	801438e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_CSI: /* CSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 80142a2:	4b0e      	ldr	r3, [pc, #56]	@ (80142dc <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 80142a4:	681b      	ldr	r3, [r3, #0]
 80142a6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80142aa:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80142ae:	d102      	bne.n	80142b6 <HAL_RCCEx_GetPeriphCLKFreq+0xa16>
        {
          frequency = CSI_VALUE;
 80142b0:	4b0c      	ldr	r3, [pc, #48]	@ (80142e4 <HAL_RCCEx_GetPeriphCLKFreq+0xa44>)
 80142b2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80142b4:	e06b      	b.n	801438e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80142b6:	2300      	movs	r3, #0
 80142b8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80142ba:	e068      	b.n	801438e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_HSE: /* HSE is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 80142bc:	4b07      	ldr	r3, [pc, #28]	@ (80142dc <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 80142be:	681b      	ldr	r3, [r3, #0]
 80142c0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80142c4:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80142c8:	d102      	bne.n	80142d0 <HAL_RCCEx_GetPeriphCLKFreq+0xa30>
        {
          frequency = HSE_VALUE;
 80142ca:	4b07      	ldr	r3, [pc, #28]	@ (80142e8 <HAL_RCCEx_GetPeriphCLKFreq+0xa48>)
 80142cc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80142ce:	e05e      	b.n	801438e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80142d0:	2300      	movs	r3, #0
 80142d2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80142d4:	e05b      	b.n	801438e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
        break;
      }
#endif /* RCC_SPI6CLKSOURCE_PIN */
      default :
      {
        frequency = 0;
 80142d6:	2300      	movs	r3, #0
 80142d8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80142da:	e058      	b.n	801438e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 80142dc:	58024400 	.word	0x58024400
 80142e0:	03d09000 	.word	0x03d09000
 80142e4:	003d0900 	.word	0x003d0900
 80142e8:	017d7840 	.word	0x017d7840
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN)
 80142ec:	e9d7 2300 	ldrd	r2, r3, [r7]
 80142f0:	f5a2 4100 	sub.w	r1, r2, #32768	@ 0x8000
 80142f4:	430b      	orrs	r3, r1
 80142f6:	d148      	bne.n	801438a <HAL_RCCEx_GetPeriphCLKFreq+0xaea>
  {
    /* Get FDCAN clock source */
    srcclk = __HAL_RCC_GET_FDCAN_SOURCE();
 80142f8:	4b27      	ldr	r3, [pc, #156]	@ (8014398 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 80142fa:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80142fc:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8014300:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 8014302:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8014304:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8014308:	d02a      	beq.n	8014360 <HAL_RCCEx_GetPeriphCLKFreq+0xac0>
 801430a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801430c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8014310:	d838      	bhi.n	8014384 <HAL_RCCEx_GetPeriphCLKFreq+0xae4>
 8014312:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8014314:	2b00      	cmp	r3, #0
 8014316:	d004      	beq.n	8014322 <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
 8014318:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801431a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 801431e:	d00d      	beq.n	801433c <HAL_RCCEx_GetPeriphCLKFreq+0xa9c>
 8014320:	e030      	b.n	8014384 <HAL_RCCEx_GetPeriphCLKFreq+0xae4>
    {
      case RCC_FDCANCLKSOURCE_HSE: /* HSE is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8014322:	4b1d      	ldr	r3, [pc, #116]	@ (8014398 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 8014324:	681b      	ldr	r3, [r3, #0]
 8014326:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 801432a:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 801432e:	d102      	bne.n	8014336 <HAL_RCCEx_GetPeriphCLKFreq+0xa96>
        {
          frequency = HSE_VALUE;
 8014330:	4b1a      	ldr	r3, [pc, #104]	@ (801439c <HAL_RCCEx_GetPeriphCLKFreq+0xafc>)
 8014332:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8014334:	e02b      	b.n	801438e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8014336:	2300      	movs	r3, #0
 8014338:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 801433a:	e028      	b.n	801438e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_FDCANCLKSOURCE_PLL: /* PLL is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 801433c:	4b16      	ldr	r3, [pc, #88]	@ (8014398 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 801433e:	681b      	ldr	r3, [r3, #0]
 8014340:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8014344:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8014348:	d107      	bne.n	801435a <HAL_RCCEx_GetPeriphCLKFreq+0xaba>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 801434a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 801434e:	4618      	mov	r0, r3
 8014350:	f000 fae4 	bl	801491c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8014354:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8014356:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8014358:	e019      	b.n	801438e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 801435a:	2300      	movs	r3, #0
 801435c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 801435e:	e016      	b.n	801438e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8014360:	4b0d      	ldr	r3, [pc, #52]	@ (8014398 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 8014362:	681b      	ldr	r3, [r3, #0]
 8014364:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8014368:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 801436c:	d107      	bne.n	801437e <HAL_RCCEx_GetPeriphCLKFreq+0xade>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 801436e:	f107 0318 	add.w	r3, r7, #24
 8014372:	4618      	mov	r0, r3
 8014374:	f000 f82a 	bl	80143cc <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8014378:	69fb      	ldr	r3, [r7, #28]
 801437a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 801437c:	e007      	b.n	801438e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 801437e:	2300      	movs	r3, #0
 8014380:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8014382:	e004      	b.n	801438e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 8014384:	2300      	movs	r3, #0
 8014386:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8014388:	e001      	b.n	801438e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else
  {
    frequency = 0;
 801438a:	2300      	movs	r3, #0
 801438c:	63fb      	str	r3, [r7, #60]	@ 0x3c
  }

  return frequency;
 801438e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 8014390:	4618      	mov	r0, r3
 8014392:	3740      	adds	r7, #64	@ 0x40
 8014394:	46bd      	mov	sp, r7
 8014396:	bd80      	pop	{r7, pc}
 8014398:	58024400 	.word	0x58024400
 801439c:	017d7840 	.word	0x017d7840

080143a0 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 80143a0:	b580      	push	{r7, lr}
 80143a2:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 80143a4:	f7fd ffd6 	bl	8012354 <HAL_RCC_GetHCLKFreq>
 80143a8:	4602      	mov	r2, r0
 80143aa:	4b06      	ldr	r3, [pc, #24]	@ (80143c4 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 80143ac:	6a1b      	ldr	r3, [r3, #32]
 80143ae:	091b      	lsrs	r3, r3, #4
 80143b0:	f003 0307 	and.w	r3, r3, #7
 80143b4:	4904      	ldr	r1, [pc, #16]	@ (80143c8 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 80143b6:	5ccb      	ldrb	r3, [r1, r3]
 80143b8:	f003 031f 	and.w	r3, r3, #31
 80143bc:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 80143c0:	4618      	mov	r0, r3
 80143c2:	bd80      	pop	{r7, pc}
 80143c4:	58024400 	.word	0x58024400
 80143c8:	0801bd88 	.word	0x0801bd88

080143cc <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 80143cc:	b480      	push	{r7}
 80143ce:	b089      	sub	sp, #36	@ 0x24
 80143d0:	af00      	add	r7, sp, #0
 80143d2:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80143d4:	4ba1      	ldr	r3, [pc, #644]	@ (801465c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80143d6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80143d8:	f003 0303 	and.w	r3, r3, #3
 80143dc:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 80143de:	4b9f      	ldr	r3, [pc, #636]	@ (801465c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80143e0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80143e2:	0b1b      	lsrs	r3, r3, #12
 80143e4:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80143e8:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 80143ea:	4b9c      	ldr	r3, [pc, #624]	@ (801465c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80143ec:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80143ee:	091b      	lsrs	r3, r3, #4
 80143f0:	f003 0301 	and.w	r3, r3, #1
 80143f4:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 80143f6:	4b99      	ldr	r3, [pc, #612]	@ (801465c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80143f8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80143fa:	08db      	lsrs	r3, r3, #3
 80143fc:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8014400:	693a      	ldr	r2, [r7, #16]
 8014402:	fb02 f303 	mul.w	r3, r2, r3
 8014406:	ee07 3a90 	vmov	s15, r3
 801440a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801440e:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 8014412:	697b      	ldr	r3, [r7, #20]
 8014414:	2b00      	cmp	r3, #0
 8014416:	f000 8111 	beq.w	801463c <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 801441a:	69bb      	ldr	r3, [r7, #24]
 801441c:	2b02      	cmp	r3, #2
 801441e:	f000 8083 	beq.w	8014528 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 8014422:	69bb      	ldr	r3, [r7, #24]
 8014424:	2b02      	cmp	r3, #2
 8014426:	f200 80a1 	bhi.w	801456c <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 801442a:	69bb      	ldr	r3, [r7, #24]
 801442c:	2b00      	cmp	r3, #0
 801442e:	d003      	beq.n	8014438 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8014430:	69bb      	ldr	r3, [r7, #24]
 8014432:	2b01      	cmp	r3, #1
 8014434:	d056      	beq.n	80144e4 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 8014436:	e099      	b.n	801456c <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8014438:	4b88      	ldr	r3, [pc, #544]	@ (801465c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 801443a:	681b      	ldr	r3, [r3, #0]
 801443c:	f003 0320 	and.w	r3, r3, #32
 8014440:	2b00      	cmp	r3, #0
 8014442:	d02d      	beq.n	80144a0 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8014444:	4b85      	ldr	r3, [pc, #532]	@ (801465c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8014446:	681b      	ldr	r3, [r3, #0]
 8014448:	08db      	lsrs	r3, r3, #3
 801444a:	f003 0303 	and.w	r3, r3, #3
 801444e:	4a84      	ldr	r2, [pc, #528]	@ (8014660 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8014450:	fa22 f303 	lsr.w	r3, r2, r3
 8014454:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8014456:	68bb      	ldr	r3, [r7, #8]
 8014458:	ee07 3a90 	vmov	s15, r3
 801445c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8014460:	697b      	ldr	r3, [r7, #20]
 8014462:	ee07 3a90 	vmov	s15, r3
 8014466:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801446a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 801446e:	4b7b      	ldr	r3, [pc, #492]	@ (801465c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8014470:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8014472:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8014476:	ee07 3a90 	vmov	s15, r3
 801447a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 801447e:	ed97 6a03 	vldr	s12, [r7, #12]
 8014482:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8014664 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8014486:	eec6 7a25 	vdiv.f32	s15, s12, s11
 801448a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 801448e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8014492:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8014496:	ee67 7a27 	vmul.f32	s15, s14, s15
 801449a:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 801449e:	e087      	b.n	80145b0 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80144a0:	697b      	ldr	r3, [r7, #20]
 80144a2:	ee07 3a90 	vmov	s15, r3
 80144a6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80144aa:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 8014668 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 80144ae:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80144b2:	4b6a      	ldr	r3, [pc, #424]	@ (801465c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80144b4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80144b6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80144ba:	ee07 3a90 	vmov	s15, r3
 80144be:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80144c2:	ed97 6a03 	vldr	s12, [r7, #12]
 80144c6:	eddf 5a67 	vldr	s11, [pc, #412]	@ 8014664 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80144ca:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80144ce:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80144d2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80144d6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80144da:	ee67 7a27 	vmul.f32	s15, s14, s15
 80144de:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80144e2:	e065      	b.n	80145b0 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80144e4:	697b      	ldr	r3, [r7, #20]
 80144e6:	ee07 3a90 	vmov	s15, r3
 80144ea:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80144ee:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 801466c <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 80144f2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80144f6:	4b59      	ldr	r3, [pc, #356]	@ (801465c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80144f8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80144fa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80144fe:	ee07 3a90 	vmov	s15, r3
 8014502:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8014506:	ed97 6a03 	vldr	s12, [r7, #12]
 801450a:	eddf 5a56 	vldr	s11, [pc, #344]	@ 8014664 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 801450e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8014512:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8014516:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 801451a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 801451e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8014522:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8014526:	e043      	b.n	80145b0 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8014528:	697b      	ldr	r3, [r7, #20]
 801452a:	ee07 3a90 	vmov	s15, r3
 801452e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8014532:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 8014670 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 8014536:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 801453a:	4b48      	ldr	r3, [pc, #288]	@ (801465c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 801453c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801453e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8014542:	ee07 3a90 	vmov	s15, r3
 8014546:	eef8 6a67 	vcvt.f32.u32	s13, s15
 801454a:	ed97 6a03 	vldr	s12, [r7, #12]
 801454e:	eddf 5a45 	vldr	s11, [pc, #276]	@ 8014664 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8014552:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8014556:	ee76 7aa7 	vadd.f32	s15, s13, s15
 801455a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 801455e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8014562:	ee67 7a27 	vmul.f32	s15, s14, s15
 8014566:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 801456a:	e021      	b.n	80145b0 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 801456c:	697b      	ldr	r3, [r7, #20]
 801456e:	ee07 3a90 	vmov	s15, r3
 8014572:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8014576:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 801466c <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 801457a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 801457e:	4b37      	ldr	r3, [pc, #220]	@ (801465c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8014580:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8014582:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8014586:	ee07 3a90 	vmov	s15, r3
 801458a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 801458e:	ed97 6a03 	vldr	s12, [r7, #12]
 8014592:	eddf 5a34 	vldr	s11, [pc, #208]	@ 8014664 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8014596:	eec6 7a25 	vdiv.f32	s15, s12, s11
 801459a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 801459e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80145a2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80145a6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80145aa:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80145ae:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 80145b0:	4b2a      	ldr	r3, [pc, #168]	@ (801465c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80145b2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80145b4:	0a5b      	lsrs	r3, r3, #9
 80145b6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80145ba:	ee07 3a90 	vmov	s15, r3
 80145be:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80145c2:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80145c6:	ee37 7a87 	vadd.f32	s14, s15, s14
 80145ca:	edd7 6a07 	vldr	s13, [r7, #28]
 80145ce:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80145d2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80145d6:	ee17 2a90 	vmov	r2, s15
 80145da:	687b      	ldr	r3, [r7, #4]
 80145dc:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 80145de:	4b1f      	ldr	r3, [pc, #124]	@ (801465c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80145e0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80145e2:	0c1b      	lsrs	r3, r3, #16
 80145e4:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80145e8:	ee07 3a90 	vmov	s15, r3
 80145ec:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80145f0:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80145f4:	ee37 7a87 	vadd.f32	s14, s15, s14
 80145f8:	edd7 6a07 	vldr	s13, [r7, #28]
 80145fc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8014600:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8014604:	ee17 2a90 	vmov	r2, s15
 8014608:	687b      	ldr	r3, [r7, #4]
 801460a:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 801460c:	4b13      	ldr	r3, [pc, #76]	@ (801465c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 801460e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8014610:	0e1b      	lsrs	r3, r3, #24
 8014612:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8014616:	ee07 3a90 	vmov	s15, r3
 801461a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801461e:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8014622:	ee37 7a87 	vadd.f32	s14, s15, s14
 8014626:	edd7 6a07 	vldr	s13, [r7, #28]
 801462a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 801462e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8014632:	ee17 2a90 	vmov	r2, s15
 8014636:	687b      	ldr	r3, [r7, #4]
 8014638:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 801463a:	e008      	b.n	801464e <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 801463c:	687b      	ldr	r3, [r7, #4]
 801463e:	2200      	movs	r2, #0
 8014640:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8014642:	687b      	ldr	r3, [r7, #4]
 8014644:	2200      	movs	r2, #0
 8014646:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8014648:	687b      	ldr	r3, [r7, #4]
 801464a:	2200      	movs	r2, #0
 801464c:	609a      	str	r2, [r3, #8]
}
 801464e:	bf00      	nop
 8014650:	3724      	adds	r7, #36	@ 0x24
 8014652:	46bd      	mov	sp, r7
 8014654:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014658:	4770      	bx	lr
 801465a:	bf00      	nop
 801465c:	58024400 	.word	0x58024400
 8014660:	03d09000 	.word	0x03d09000
 8014664:	46000000 	.word	0x46000000
 8014668:	4c742400 	.word	0x4c742400
 801466c:	4a742400 	.word	0x4a742400
 8014670:	4bbebc20 	.word	0x4bbebc20

08014674 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 8014674:	b480      	push	{r7}
 8014676:	b089      	sub	sp, #36	@ 0x24
 8014678:	af00      	add	r7, sp, #0
 801467a:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 801467c:	4ba1      	ldr	r3, [pc, #644]	@ (8014904 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 801467e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8014680:	f003 0303 	and.w	r3, r3, #3
 8014684:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 8014686:	4b9f      	ldr	r3, [pc, #636]	@ (8014904 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8014688:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801468a:	0d1b      	lsrs	r3, r3, #20
 801468c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8014690:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8014692:	4b9c      	ldr	r3, [pc, #624]	@ (8014904 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8014694:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8014696:	0a1b      	lsrs	r3, r3, #8
 8014698:	f003 0301 	and.w	r3, r3, #1
 801469c:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 801469e:	4b99      	ldr	r3, [pc, #612]	@ (8014904 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80146a0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80146a2:	08db      	lsrs	r3, r3, #3
 80146a4:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80146a8:	693a      	ldr	r2, [r7, #16]
 80146aa:	fb02 f303 	mul.w	r3, r2, r3
 80146ae:	ee07 3a90 	vmov	s15, r3
 80146b2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80146b6:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 80146ba:	697b      	ldr	r3, [r7, #20]
 80146bc:	2b00      	cmp	r3, #0
 80146be:	f000 8111 	beq.w	80148e4 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 80146c2:	69bb      	ldr	r3, [r7, #24]
 80146c4:	2b02      	cmp	r3, #2
 80146c6:	f000 8083 	beq.w	80147d0 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 80146ca:	69bb      	ldr	r3, [r7, #24]
 80146cc:	2b02      	cmp	r3, #2
 80146ce:	f200 80a1 	bhi.w	8014814 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 80146d2:	69bb      	ldr	r3, [r7, #24]
 80146d4:	2b00      	cmp	r3, #0
 80146d6:	d003      	beq.n	80146e0 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 80146d8:	69bb      	ldr	r3, [r7, #24]
 80146da:	2b01      	cmp	r3, #1
 80146dc:	d056      	beq.n	801478c <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 80146de:	e099      	b.n	8014814 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80146e0:	4b88      	ldr	r3, [pc, #544]	@ (8014904 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80146e2:	681b      	ldr	r3, [r3, #0]
 80146e4:	f003 0320 	and.w	r3, r3, #32
 80146e8:	2b00      	cmp	r3, #0
 80146ea:	d02d      	beq.n	8014748 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80146ec:	4b85      	ldr	r3, [pc, #532]	@ (8014904 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80146ee:	681b      	ldr	r3, [r3, #0]
 80146f0:	08db      	lsrs	r3, r3, #3
 80146f2:	f003 0303 	and.w	r3, r3, #3
 80146f6:	4a84      	ldr	r2, [pc, #528]	@ (8014908 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 80146f8:	fa22 f303 	lsr.w	r3, r2, r3
 80146fc:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80146fe:	68bb      	ldr	r3, [r7, #8]
 8014700:	ee07 3a90 	vmov	s15, r3
 8014704:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8014708:	697b      	ldr	r3, [r7, #20]
 801470a:	ee07 3a90 	vmov	s15, r3
 801470e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8014712:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8014716:	4b7b      	ldr	r3, [pc, #492]	@ (8014904 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8014718:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 801471a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801471e:	ee07 3a90 	vmov	s15, r3
 8014722:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8014726:	ed97 6a03 	vldr	s12, [r7, #12]
 801472a:	eddf 5a78 	vldr	s11, [pc, #480]	@ 801490c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 801472e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8014732:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8014736:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 801473a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 801473e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8014742:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8014746:	e087      	b.n	8014858 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8014748:	697b      	ldr	r3, [r7, #20]
 801474a:	ee07 3a90 	vmov	s15, r3
 801474e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8014752:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 8014910 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 8014756:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 801475a:	4b6a      	ldr	r3, [pc, #424]	@ (8014904 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 801475c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 801475e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8014762:	ee07 3a90 	vmov	s15, r3
 8014766:	eef8 6a67 	vcvt.f32.u32	s13, s15
 801476a:	ed97 6a03 	vldr	s12, [r7, #12]
 801476e:	eddf 5a67 	vldr	s11, [pc, #412]	@ 801490c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8014772:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8014776:	ee76 7aa7 	vadd.f32	s15, s13, s15
 801477a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 801477e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8014782:	ee67 7a27 	vmul.f32	s15, s14, s15
 8014786:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 801478a:	e065      	b.n	8014858 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 801478c:	697b      	ldr	r3, [r7, #20]
 801478e:	ee07 3a90 	vmov	s15, r3
 8014792:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8014796:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8014914 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 801479a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 801479e:	4b59      	ldr	r3, [pc, #356]	@ (8014904 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80147a0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80147a2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80147a6:	ee07 3a90 	vmov	s15, r3
 80147aa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80147ae:	ed97 6a03 	vldr	s12, [r7, #12]
 80147b2:	eddf 5a56 	vldr	s11, [pc, #344]	@ 801490c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80147b6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80147ba:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80147be:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80147c2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80147c6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80147ca:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80147ce:	e043      	b.n	8014858 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80147d0:	697b      	ldr	r3, [r7, #20]
 80147d2:	ee07 3a90 	vmov	s15, r3
 80147d6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80147da:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 8014918 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 80147de:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80147e2:	4b48      	ldr	r3, [pc, #288]	@ (8014904 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80147e4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80147e6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80147ea:	ee07 3a90 	vmov	s15, r3
 80147ee:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80147f2:	ed97 6a03 	vldr	s12, [r7, #12]
 80147f6:	eddf 5a45 	vldr	s11, [pc, #276]	@ 801490c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80147fa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80147fe:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8014802:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8014806:	ee77 7aa6 	vadd.f32	s15, s15, s13
 801480a:	ee67 7a27 	vmul.f32	s15, s14, s15
 801480e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8014812:	e021      	b.n	8014858 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8014814:	697b      	ldr	r3, [r7, #20]
 8014816:	ee07 3a90 	vmov	s15, r3
 801481a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801481e:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 8014914 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8014822:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8014826:	4b37      	ldr	r3, [pc, #220]	@ (8014904 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8014828:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 801482a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801482e:	ee07 3a90 	vmov	s15, r3
 8014832:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8014836:	ed97 6a03 	vldr	s12, [r7, #12]
 801483a:	eddf 5a34 	vldr	s11, [pc, #208]	@ 801490c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 801483e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8014842:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8014846:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 801484a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 801484e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8014852:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8014856:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 8014858:	4b2a      	ldr	r3, [pc, #168]	@ (8014904 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 801485a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 801485c:	0a5b      	lsrs	r3, r3, #9
 801485e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8014862:	ee07 3a90 	vmov	s15, r3
 8014866:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801486a:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 801486e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8014872:	edd7 6a07 	vldr	s13, [r7, #28]
 8014876:	eec6 7a87 	vdiv.f32	s15, s13, s14
 801487a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 801487e:	ee17 2a90 	vmov	r2, s15
 8014882:	687b      	ldr	r3, [r7, #4]
 8014884:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 8014886:	4b1f      	ldr	r3, [pc, #124]	@ (8014904 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8014888:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 801488a:	0c1b      	lsrs	r3, r3, #16
 801488c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8014890:	ee07 3a90 	vmov	s15, r3
 8014894:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8014898:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 801489c:	ee37 7a87 	vadd.f32	s14, s15, s14
 80148a0:	edd7 6a07 	vldr	s13, [r7, #28]
 80148a4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80148a8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80148ac:	ee17 2a90 	vmov	r2, s15
 80148b0:	687b      	ldr	r3, [r7, #4]
 80148b2:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 80148b4:	4b13      	ldr	r3, [pc, #76]	@ (8014904 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80148b6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80148b8:	0e1b      	lsrs	r3, r3, #24
 80148ba:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80148be:	ee07 3a90 	vmov	s15, r3
 80148c2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80148c6:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80148ca:	ee37 7a87 	vadd.f32	s14, s15, s14
 80148ce:	edd7 6a07 	vldr	s13, [r7, #28]
 80148d2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80148d6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80148da:	ee17 2a90 	vmov	r2, s15
 80148de:	687b      	ldr	r3, [r7, #4]
 80148e0:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 80148e2:	e008      	b.n	80148f6 <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 80148e4:	687b      	ldr	r3, [r7, #4]
 80148e6:	2200      	movs	r2, #0
 80148e8:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 80148ea:	687b      	ldr	r3, [r7, #4]
 80148ec:	2200      	movs	r2, #0
 80148ee:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 80148f0:	687b      	ldr	r3, [r7, #4]
 80148f2:	2200      	movs	r2, #0
 80148f4:	609a      	str	r2, [r3, #8]
}
 80148f6:	bf00      	nop
 80148f8:	3724      	adds	r7, #36	@ 0x24
 80148fa:	46bd      	mov	sp, r7
 80148fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014900:	4770      	bx	lr
 8014902:	bf00      	nop
 8014904:	58024400 	.word	0x58024400
 8014908:	03d09000 	.word	0x03d09000
 801490c:	46000000 	.word	0x46000000
 8014910:	4c742400 	.word	0x4c742400
 8014914:	4a742400 	.word	0x4a742400
 8014918:	4bbebc20 	.word	0x4bbebc20

0801491c <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef *PLL1_Clocks)
{
 801491c:	b480      	push	{r7}
 801491e:	b089      	sub	sp, #36	@ 0x24
 8014920:	af00      	add	r7, sp, #0
 8014922:	6078      	str	r0, [r7, #4]
  uint32_t pllsource, pll1m, pll1fracen, hsivalue;
  float_t fracn1, pll1vco;

  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8014924:	4ba0      	ldr	r3, [pc, #640]	@ (8014ba8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8014926:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8014928:	f003 0303 	and.w	r3, r3, #3
 801492c:	61bb      	str	r3, [r7, #24]
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4);
 801492e:	4b9e      	ldr	r3, [pc, #632]	@ (8014ba8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8014930:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8014932:	091b      	lsrs	r3, r3, #4
 8014934:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8014938:	617b      	str	r3, [r7, #20]
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 801493a:	4b9b      	ldr	r3, [pc, #620]	@ (8014ba8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 801493c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801493e:	f003 0301 	and.w	r3, r3, #1
 8014942:	613b      	str	r3, [r7, #16]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8014944:	4b98      	ldr	r3, [pc, #608]	@ (8014ba8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8014946:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8014948:	08db      	lsrs	r3, r3, #3
 801494a:	f3c3 030c 	ubfx	r3, r3, #0, #13
 801494e:	693a      	ldr	r2, [r7, #16]
 8014950:	fb02 f303 	mul.w	r3, r2, r3
 8014954:	ee07 3a90 	vmov	s15, r3
 8014958:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801495c:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll1m != 0U)
 8014960:	697b      	ldr	r3, [r7, #20]
 8014962:	2b00      	cmp	r3, #0
 8014964:	f000 8111 	beq.w	8014b8a <HAL_RCCEx_GetPLL1ClockFreq+0x26e>
  {
    switch (pllsource)
 8014968:	69bb      	ldr	r3, [r7, #24]
 801496a:	2b02      	cmp	r3, #2
 801496c:	f000 8083 	beq.w	8014a76 <HAL_RCCEx_GetPLL1ClockFreq+0x15a>
 8014970:	69bb      	ldr	r3, [r7, #24]
 8014972:	2b02      	cmp	r3, #2
 8014974:	f200 80a1 	bhi.w	8014aba <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
 8014978:	69bb      	ldr	r3, [r7, #24]
 801497a:	2b00      	cmp	r3, #0
 801497c:	d003      	beq.n	8014986 <HAL_RCCEx_GetPLL1ClockFreq+0x6a>
 801497e:	69bb      	ldr	r3, [r7, #24]
 8014980:	2b01      	cmp	r3, #1
 8014982:	d056      	beq.n	8014a32 <HAL_RCCEx_GetPLL1ClockFreq+0x116>
 8014984:	e099      	b.n	8014aba <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8014986:	4b88      	ldr	r3, [pc, #544]	@ (8014ba8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8014988:	681b      	ldr	r3, [r3, #0]
 801498a:	f003 0320 	and.w	r3, r3, #32
 801498e:	2b00      	cmp	r3, #0
 8014990:	d02d      	beq.n	80149ee <HAL_RCCEx_GetPLL1ClockFreq+0xd2>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8014992:	4b85      	ldr	r3, [pc, #532]	@ (8014ba8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8014994:	681b      	ldr	r3, [r3, #0]
 8014996:	08db      	lsrs	r3, r3, #3
 8014998:	f003 0303 	and.w	r3, r3, #3
 801499c:	4a83      	ldr	r2, [pc, #524]	@ (8014bac <HAL_RCCEx_GetPLL1ClockFreq+0x290>)
 801499e:	fa22 f303 	lsr.w	r3, r2, r3
 80149a2:	60bb      	str	r3, [r7, #8]
          pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80149a4:	68bb      	ldr	r3, [r7, #8]
 80149a6:	ee07 3a90 	vmov	s15, r3
 80149aa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80149ae:	697b      	ldr	r3, [r7, #20]
 80149b0:	ee07 3a90 	vmov	s15, r3
 80149b4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80149b8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80149bc:	4b7a      	ldr	r3, [pc, #488]	@ (8014ba8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80149be:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80149c0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80149c4:	ee07 3a90 	vmov	s15, r3
 80149c8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80149cc:	ed97 6a03 	vldr	s12, [r7, #12]
 80149d0:	eddf 5a77 	vldr	s11, [pc, #476]	@ 8014bb0 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 80149d4:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80149d8:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80149dc:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80149e0:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80149e4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80149e8:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
        }
        break;
 80149ec:	e087      	b.n	8014afe <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80149ee:	697b      	ldr	r3, [r7, #20]
 80149f0:	ee07 3a90 	vmov	s15, r3
 80149f4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80149f8:	eddf 6a6e 	vldr	s13, [pc, #440]	@ 8014bb4 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 80149fc:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8014a00:	4b69      	ldr	r3, [pc, #420]	@ (8014ba8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8014a02:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8014a04:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8014a08:	ee07 3a90 	vmov	s15, r3
 8014a0c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8014a10:	ed97 6a03 	vldr	s12, [r7, #12]
 8014a14:	eddf 5a66 	vldr	s11, [pc, #408]	@ 8014bb0 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8014a18:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8014a1c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8014a20:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8014a24:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8014a28:	ee67 7a27 	vmul.f32	s15, s14, s15
 8014a2c:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8014a30:	e065      	b.n	8014afe <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8014a32:	697b      	ldr	r3, [r7, #20]
 8014a34:	ee07 3a90 	vmov	s15, r3
 8014a38:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8014a3c:	eddf 6a5e 	vldr	s13, [pc, #376]	@ 8014bb8 <HAL_RCCEx_GetPLL1ClockFreq+0x29c>
 8014a40:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8014a44:	4b58      	ldr	r3, [pc, #352]	@ (8014ba8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8014a46:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8014a48:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8014a4c:	ee07 3a90 	vmov	s15, r3
 8014a50:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8014a54:	ed97 6a03 	vldr	s12, [r7, #12]
 8014a58:	eddf 5a55 	vldr	s11, [pc, #340]	@ 8014bb0 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8014a5c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8014a60:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8014a64:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8014a68:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8014a6c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8014a70:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8014a74:	e043      	b.n	8014afe <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8014a76:	697b      	ldr	r3, [r7, #20]
 8014a78:	ee07 3a90 	vmov	s15, r3
 8014a7c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8014a80:	eddf 6a4e 	vldr	s13, [pc, #312]	@ 8014bbc <HAL_RCCEx_GetPLL1ClockFreq+0x2a0>
 8014a84:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8014a88:	4b47      	ldr	r3, [pc, #284]	@ (8014ba8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8014a8a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8014a8c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8014a90:	ee07 3a90 	vmov	s15, r3
 8014a94:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8014a98:	ed97 6a03 	vldr	s12, [r7, #12]
 8014a9c:	eddf 5a44 	vldr	s11, [pc, #272]	@ 8014bb0 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8014aa0:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8014aa4:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8014aa8:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8014aac:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8014ab0:	ee67 7a27 	vmul.f32	s15, s14, s15
 8014ab4:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8014ab8:	e021      	b.n	8014afe <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      default:
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8014aba:	697b      	ldr	r3, [r7, #20]
 8014abc:	ee07 3a90 	vmov	s15, r3
 8014ac0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8014ac4:	eddf 6a3b 	vldr	s13, [pc, #236]	@ 8014bb4 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 8014ac8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8014acc:	4b36      	ldr	r3, [pc, #216]	@ (8014ba8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8014ace:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8014ad0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8014ad4:	ee07 3a90 	vmov	s15, r3
 8014ad8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8014adc:	ed97 6a03 	vldr	s12, [r7, #12]
 8014ae0:	eddf 5a33 	vldr	s11, [pc, #204]	@ 8014bb0 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8014ae4:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8014ae8:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8014aec:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8014af0:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8014af4:	ee67 7a27 	vmul.f32	s15, s14, s15
 8014af8:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8014afc:	bf00      	nop
    }

    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9)  + (float_t)1)) ;
 8014afe:	4b2a      	ldr	r3, [pc, #168]	@ (8014ba8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8014b00:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8014b02:	0a5b      	lsrs	r3, r3, #9
 8014b04:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8014b08:	ee07 3a90 	vmov	s15, r3
 8014b0c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8014b10:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8014b14:	ee37 7a87 	vadd.f32	s14, s15, s14
 8014b18:	edd7 6a07 	vldr	s13, [r7, #28]
 8014b1c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8014b20:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8014b24:	ee17 2a90 	vmov	r2, s15
 8014b28:	687b      	ldr	r3, [r7, #4]
 8014b2a:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >> 16) + (float_t)1)) ;
 8014b2c:	4b1e      	ldr	r3, [pc, #120]	@ (8014ba8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8014b2e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8014b30:	0c1b      	lsrs	r3, r3, #16
 8014b32:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8014b36:	ee07 3a90 	vmov	s15, r3
 8014b3a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8014b3e:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8014b42:	ee37 7a87 	vadd.f32	s14, s15, s14
 8014b46:	edd7 6a07 	vldr	s13, [r7, #28]
 8014b4a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8014b4e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8014b52:	ee17 2a90 	vmov	r2, s15
 8014b56:	687b      	ldr	r3, [r7, #4]
 8014b58:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >> 24) + (float_t)1)) ;
 8014b5a:	4b13      	ldr	r3, [pc, #76]	@ (8014ba8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8014b5c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8014b5e:	0e1b      	lsrs	r3, r3, #24
 8014b60:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8014b64:	ee07 3a90 	vmov	s15, r3
 8014b68:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8014b6c:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8014b70:	ee37 7a87 	vadd.f32	s14, s15, s14
 8014b74:	edd7 6a07 	vldr	s13, [r7, #28]
 8014b78:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8014b7c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8014b80:	ee17 2a90 	vmov	r2, s15
 8014b84:	687b      	ldr	r3, [r7, #4]
 8014b86:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 8014b88:	e008      	b.n	8014b9c <HAL_RCCEx_GetPLL1ClockFreq+0x280>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 8014b8a:	687b      	ldr	r3, [r7, #4]
 8014b8c:	2200      	movs	r2, #0
 8014b8e:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 8014b90:	687b      	ldr	r3, [r7, #4]
 8014b92:	2200      	movs	r2, #0
 8014b94:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 8014b96:	687b      	ldr	r3, [r7, #4]
 8014b98:	2200      	movs	r2, #0
 8014b9a:	609a      	str	r2, [r3, #8]
}
 8014b9c:	bf00      	nop
 8014b9e:	3724      	adds	r7, #36	@ 0x24
 8014ba0:	46bd      	mov	sp, r7
 8014ba2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014ba6:	4770      	bx	lr
 8014ba8:	58024400 	.word	0x58024400
 8014bac:	03d09000 	.word	0x03d09000
 8014bb0:	46000000 	.word	0x46000000
 8014bb4:	4c742400 	.word	0x4c742400
 8014bb8:	4a742400 	.word	0x4a742400
 8014bbc:	4bbebc20 	.word	0x4bbebc20

08014bc0 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8014bc0:	b580      	push	{r7, lr}
 8014bc2:	b084      	sub	sp, #16
 8014bc4:	af00      	add	r7, sp, #0
 8014bc6:	6078      	str	r0, [r7, #4]
 8014bc8:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8014bca:	2300      	movs	r3, #0
 8014bcc:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8014bce:	4b53      	ldr	r3, [pc, #332]	@ (8014d1c <RCCEx_PLL2_Config+0x15c>)
 8014bd0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8014bd2:	f003 0303 	and.w	r3, r3, #3
 8014bd6:	2b03      	cmp	r3, #3
 8014bd8:	d101      	bne.n	8014bde <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8014bda:	2301      	movs	r3, #1
 8014bdc:	e099      	b.n	8014d12 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8014bde:	4b4f      	ldr	r3, [pc, #316]	@ (8014d1c <RCCEx_PLL2_Config+0x15c>)
 8014be0:	681b      	ldr	r3, [r3, #0]
 8014be2:	4a4e      	ldr	r2, [pc, #312]	@ (8014d1c <RCCEx_PLL2_Config+0x15c>)
 8014be4:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8014be8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8014bea:	f7fb feb5 	bl	8010958 <HAL_GetTick>
 8014bee:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8014bf0:	e008      	b.n	8014c04 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8014bf2:	f7fb feb1 	bl	8010958 <HAL_GetTick>
 8014bf6:	4602      	mov	r2, r0
 8014bf8:	68bb      	ldr	r3, [r7, #8]
 8014bfa:	1ad3      	subs	r3, r2, r3
 8014bfc:	2b02      	cmp	r3, #2
 8014bfe:	d901      	bls.n	8014c04 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8014c00:	2303      	movs	r3, #3
 8014c02:	e086      	b.n	8014d12 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8014c04:	4b45      	ldr	r3, [pc, #276]	@ (8014d1c <RCCEx_PLL2_Config+0x15c>)
 8014c06:	681b      	ldr	r3, [r3, #0]
 8014c08:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8014c0c:	2b00      	cmp	r3, #0
 8014c0e:	d1f0      	bne.n	8014bf2 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8014c10:	4b42      	ldr	r3, [pc, #264]	@ (8014d1c <RCCEx_PLL2_Config+0x15c>)
 8014c12:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8014c14:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8014c18:	687b      	ldr	r3, [r7, #4]
 8014c1a:	681b      	ldr	r3, [r3, #0]
 8014c1c:	031b      	lsls	r3, r3, #12
 8014c1e:	493f      	ldr	r1, [pc, #252]	@ (8014d1c <RCCEx_PLL2_Config+0x15c>)
 8014c20:	4313      	orrs	r3, r2
 8014c22:	628b      	str	r3, [r1, #40]	@ 0x28
 8014c24:	687b      	ldr	r3, [r7, #4]
 8014c26:	685b      	ldr	r3, [r3, #4]
 8014c28:	3b01      	subs	r3, #1
 8014c2a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8014c2e:	687b      	ldr	r3, [r7, #4]
 8014c30:	689b      	ldr	r3, [r3, #8]
 8014c32:	3b01      	subs	r3, #1
 8014c34:	025b      	lsls	r3, r3, #9
 8014c36:	b29b      	uxth	r3, r3
 8014c38:	431a      	orrs	r2, r3
 8014c3a:	687b      	ldr	r3, [r7, #4]
 8014c3c:	68db      	ldr	r3, [r3, #12]
 8014c3e:	3b01      	subs	r3, #1
 8014c40:	041b      	lsls	r3, r3, #16
 8014c42:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8014c46:	431a      	orrs	r2, r3
 8014c48:	687b      	ldr	r3, [r7, #4]
 8014c4a:	691b      	ldr	r3, [r3, #16]
 8014c4c:	3b01      	subs	r3, #1
 8014c4e:	061b      	lsls	r3, r3, #24
 8014c50:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8014c54:	4931      	ldr	r1, [pc, #196]	@ (8014d1c <RCCEx_PLL2_Config+0x15c>)
 8014c56:	4313      	orrs	r3, r2
 8014c58:	638b      	str	r3, [r1, #56]	@ 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8014c5a:	4b30      	ldr	r3, [pc, #192]	@ (8014d1c <RCCEx_PLL2_Config+0x15c>)
 8014c5c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8014c5e:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8014c62:	687b      	ldr	r3, [r7, #4]
 8014c64:	695b      	ldr	r3, [r3, #20]
 8014c66:	492d      	ldr	r1, [pc, #180]	@ (8014d1c <RCCEx_PLL2_Config+0x15c>)
 8014c68:	4313      	orrs	r3, r2
 8014c6a:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8014c6c:	4b2b      	ldr	r3, [pc, #172]	@ (8014d1c <RCCEx_PLL2_Config+0x15c>)
 8014c6e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8014c70:	f023 0220 	bic.w	r2, r3, #32
 8014c74:	687b      	ldr	r3, [r7, #4]
 8014c76:	699b      	ldr	r3, [r3, #24]
 8014c78:	4928      	ldr	r1, [pc, #160]	@ (8014d1c <RCCEx_PLL2_Config+0x15c>)
 8014c7a:	4313      	orrs	r3, r2
 8014c7c:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8014c7e:	4b27      	ldr	r3, [pc, #156]	@ (8014d1c <RCCEx_PLL2_Config+0x15c>)
 8014c80:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8014c82:	4a26      	ldr	r2, [pc, #152]	@ (8014d1c <RCCEx_PLL2_Config+0x15c>)
 8014c84:	f023 0310 	bic.w	r3, r3, #16
 8014c88:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8014c8a:	4b24      	ldr	r3, [pc, #144]	@ (8014d1c <RCCEx_PLL2_Config+0x15c>)
 8014c8c:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8014c8e:	4b24      	ldr	r3, [pc, #144]	@ (8014d20 <RCCEx_PLL2_Config+0x160>)
 8014c90:	4013      	ands	r3, r2
 8014c92:	687a      	ldr	r2, [r7, #4]
 8014c94:	69d2      	ldr	r2, [r2, #28]
 8014c96:	00d2      	lsls	r2, r2, #3
 8014c98:	4920      	ldr	r1, [pc, #128]	@ (8014d1c <RCCEx_PLL2_Config+0x15c>)
 8014c9a:	4313      	orrs	r3, r2
 8014c9c:	63cb      	str	r3, [r1, #60]	@ 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8014c9e:	4b1f      	ldr	r3, [pc, #124]	@ (8014d1c <RCCEx_PLL2_Config+0x15c>)
 8014ca0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8014ca2:	4a1e      	ldr	r2, [pc, #120]	@ (8014d1c <RCCEx_PLL2_Config+0x15c>)
 8014ca4:	f043 0310 	orr.w	r3, r3, #16
 8014ca8:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8014caa:	683b      	ldr	r3, [r7, #0]
 8014cac:	2b00      	cmp	r3, #0
 8014cae:	d106      	bne.n	8014cbe <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8014cb0:	4b1a      	ldr	r3, [pc, #104]	@ (8014d1c <RCCEx_PLL2_Config+0x15c>)
 8014cb2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8014cb4:	4a19      	ldr	r2, [pc, #100]	@ (8014d1c <RCCEx_PLL2_Config+0x15c>)
 8014cb6:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8014cba:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8014cbc:	e00f      	b.n	8014cde <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8014cbe:	683b      	ldr	r3, [r7, #0]
 8014cc0:	2b01      	cmp	r3, #1
 8014cc2:	d106      	bne.n	8014cd2 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8014cc4:	4b15      	ldr	r3, [pc, #84]	@ (8014d1c <RCCEx_PLL2_Config+0x15c>)
 8014cc6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8014cc8:	4a14      	ldr	r2, [pc, #80]	@ (8014d1c <RCCEx_PLL2_Config+0x15c>)
 8014cca:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8014cce:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8014cd0:	e005      	b.n	8014cde <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8014cd2:	4b12      	ldr	r3, [pc, #72]	@ (8014d1c <RCCEx_PLL2_Config+0x15c>)
 8014cd4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8014cd6:	4a11      	ldr	r2, [pc, #68]	@ (8014d1c <RCCEx_PLL2_Config+0x15c>)
 8014cd8:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8014cdc:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8014cde:	4b0f      	ldr	r3, [pc, #60]	@ (8014d1c <RCCEx_PLL2_Config+0x15c>)
 8014ce0:	681b      	ldr	r3, [r3, #0]
 8014ce2:	4a0e      	ldr	r2, [pc, #56]	@ (8014d1c <RCCEx_PLL2_Config+0x15c>)
 8014ce4:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8014ce8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8014cea:	f7fb fe35 	bl	8010958 <HAL_GetTick>
 8014cee:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8014cf0:	e008      	b.n	8014d04 <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8014cf2:	f7fb fe31 	bl	8010958 <HAL_GetTick>
 8014cf6:	4602      	mov	r2, r0
 8014cf8:	68bb      	ldr	r3, [r7, #8]
 8014cfa:	1ad3      	subs	r3, r2, r3
 8014cfc:	2b02      	cmp	r3, #2
 8014cfe:	d901      	bls.n	8014d04 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8014d00:	2303      	movs	r3, #3
 8014d02:	e006      	b.n	8014d12 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8014d04:	4b05      	ldr	r3, [pc, #20]	@ (8014d1c <RCCEx_PLL2_Config+0x15c>)
 8014d06:	681b      	ldr	r3, [r3, #0]
 8014d08:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8014d0c:	2b00      	cmp	r3, #0
 8014d0e:	d0f0      	beq.n	8014cf2 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8014d10:	7bfb      	ldrb	r3, [r7, #15]
}
 8014d12:	4618      	mov	r0, r3
 8014d14:	3710      	adds	r7, #16
 8014d16:	46bd      	mov	sp, r7
 8014d18:	bd80      	pop	{r7, pc}
 8014d1a:	bf00      	nop
 8014d1c:	58024400 	.word	0x58024400
 8014d20:	ffff0007 	.word	0xffff0007

08014d24 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8014d24:	b580      	push	{r7, lr}
 8014d26:	b084      	sub	sp, #16
 8014d28:	af00      	add	r7, sp, #0
 8014d2a:	6078      	str	r0, [r7, #4]
 8014d2c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8014d2e:	2300      	movs	r3, #0
 8014d30:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8014d32:	4b53      	ldr	r3, [pc, #332]	@ (8014e80 <RCCEx_PLL3_Config+0x15c>)
 8014d34:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8014d36:	f003 0303 	and.w	r3, r3, #3
 8014d3a:	2b03      	cmp	r3, #3
 8014d3c:	d101      	bne.n	8014d42 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8014d3e:	2301      	movs	r3, #1
 8014d40:	e099      	b.n	8014e76 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8014d42:	4b4f      	ldr	r3, [pc, #316]	@ (8014e80 <RCCEx_PLL3_Config+0x15c>)
 8014d44:	681b      	ldr	r3, [r3, #0]
 8014d46:	4a4e      	ldr	r2, [pc, #312]	@ (8014e80 <RCCEx_PLL3_Config+0x15c>)
 8014d48:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8014d4c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8014d4e:	f7fb fe03 	bl	8010958 <HAL_GetTick>
 8014d52:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8014d54:	e008      	b.n	8014d68 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8014d56:	f7fb fdff 	bl	8010958 <HAL_GetTick>
 8014d5a:	4602      	mov	r2, r0
 8014d5c:	68bb      	ldr	r3, [r7, #8]
 8014d5e:	1ad3      	subs	r3, r2, r3
 8014d60:	2b02      	cmp	r3, #2
 8014d62:	d901      	bls.n	8014d68 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8014d64:	2303      	movs	r3, #3
 8014d66:	e086      	b.n	8014e76 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8014d68:	4b45      	ldr	r3, [pc, #276]	@ (8014e80 <RCCEx_PLL3_Config+0x15c>)
 8014d6a:	681b      	ldr	r3, [r3, #0]
 8014d6c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8014d70:	2b00      	cmp	r3, #0
 8014d72:	d1f0      	bne.n	8014d56 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8014d74:	4b42      	ldr	r3, [pc, #264]	@ (8014e80 <RCCEx_PLL3_Config+0x15c>)
 8014d76:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8014d78:	f023 727c 	bic.w	r2, r3, #66060288	@ 0x3f00000
 8014d7c:	687b      	ldr	r3, [r7, #4]
 8014d7e:	681b      	ldr	r3, [r3, #0]
 8014d80:	051b      	lsls	r3, r3, #20
 8014d82:	493f      	ldr	r1, [pc, #252]	@ (8014e80 <RCCEx_PLL3_Config+0x15c>)
 8014d84:	4313      	orrs	r3, r2
 8014d86:	628b      	str	r3, [r1, #40]	@ 0x28
 8014d88:	687b      	ldr	r3, [r7, #4]
 8014d8a:	685b      	ldr	r3, [r3, #4]
 8014d8c:	3b01      	subs	r3, #1
 8014d8e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8014d92:	687b      	ldr	r3, [r7, #4]
 8014d94:	689b      	ldr	r3, [r3, #8]
 8014d96:	3b01      	subs	r3, #1
 8014d98:	025b      	lsls	r3, r3, #9
 8014d9a:	b29b      	uxth	r3, r3
 8014d9c:	431a      	orrs	r2, r3
 8014d9e:	687b      	ldr	r3, [r7, #4]
 8014da0:	68db      	ldr	r3, [r3, #12]
 8014da2:	3b01      	subs	r3, #1
 8014da4:	041b      	lsls	r3, r3, #16
 8014da6:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8014daa:	431a      	orrs	r2, r3
 8014dac:	687b      	ldr	r3, [r7, #4]
 8014dae:	691b      	ldr	r3, [r3, #16]
 8014db0:	3b01      	subs	r3, #1
 8014db2:	061b      	lsls	r3, r3, #24
 8014db4:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8014db8:	4931      	ldr	r1, [pc, #196]	@ (8014e80 <RCCEx_PLL3_Config+0x15c>)
 8014dba:	4313      	orrs	r3, r2
 8014dbc:	640b      	str	r3, [r1, #64]	@ 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8014dbe:	4b30      	ldr	r3, [pc, #192]	@ (8014e80 <RCCEx_PLL3_Config+0x15c>)
 8014dc0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8014dc2:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8014dc6:	687b      	ldr	r3, [r7, #4]
 8014dc8:	695b      	ldr	r3, [r3, #20]
 8014dca:	492d      	ldr	r1, [pc, #180]	@ (8014e80 <RCCEx_PLL3_Config+0x15c>)
 8014dcc:	4313      	orrs	r3, r2
 8014dce:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8014dd0:	4b2b      	ldr	r3, [pc, #172]	@ (8014e80 <RCCEx_PLL3_Config+0x15c>)
 8014dd2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8014dd4:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 8014dd8:	687b      	ldr	r3, [r7, #4]
 8014dda:	699b      	ldr	r3, [r3, #24]
 8014ddc:	4928      	ldr	r1, [pc, #160]	@ (8014e80 <RCCEx_PLL3_Config+0x15c>)
 8014dde:	4313      	orrs	r3, r2
 8014de0:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8014de2:	4b27      	ldr	r3, [pc, #156]	@ (8014e80 <RCCEx_PLL3_Config+0x15c>)
 8014de4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8014de6:	4a26      	ldr	r2, [pc, #152]	@ (8014e80 <RCCEx_PLL3_Config+0x15c>)
 8014de8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8014dec:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8014dee:	4b24      	ldr	r3, [pc, #144]	@ (8014e80 <RCCEx_PLL3_Config+0x15c>)
 8014df0:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8014df2:	4b24      	ldr	r3, [pc, #144]	@ (8014e84 <RCCEx_PLL3_Config+0x160>)
 8014df4:	4013      	ands	r3, r2
 8014df6:	687a      	ldr	r2, [r7, #4]
 8014df8:	69d2      	ldr	r2, [r2, #28]
 8014dfa:	00d2      	lsls	r2, r2, #3
 8014dfc:	4920      	ldr	r1, [pc, #128]	@ (8014e80 <RCCEx_PLL3_Config+0x15c>)
 8014dfe:	4313      	orrs	r3, r2
 8014e00:	644b      	str	r3, [r1, #68]	@ 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8014e02:	4b1f      	ldr	r3, [pc, #124]	@ (8014e80 <RCCEx_PLL3_Config+0x15c>)
 8014e04:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8014e06:	4a1e      	ldr	r2, [pc, #120]	@ (8014e80 <RCCEx_PLL3_Config+0x15c>)
 8014e08:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8014e0c:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8014e0e:	683b      	ldr	r3, [r7, #0]
 8014e10:	2b00      	cmp	r3, #0
 8014e12:	d106      	bne.n	8014e22 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8014e14:	4b1a      	ldr	r3, [pc, #104]	@ (8014e80 <RCCEx_PLL3_Config+0x15c>)
 8014e16:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8014e18:	4a19      	ldr	r2, [pc, #100]	@ (8014e80 <RCCEx_PLL3_Config+0x15c>)
 8014e1a:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8014e1e:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8014e20:	e00f      	b.n	8014e42 <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8014e22:	683b      	ldr	r3, [r7, #0]
 8014e24:	2b01      	cmp	r3, #1
 8014e26:	d106      	bne.n	8014e36 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8014e28:	4b15      	ldr	r3, [pc, #84]	@ (8014e80 <RCCEx_PLL3_Config+0x15c>)
 8014e2a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8014e2c:	4a14      	ldr	r2, [pc, #80]	@ (8014e80 <RCCEx_PLL3_Config+0x15c>)
 8014e2e:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8014e32:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8014e34:	e005      	b.n	8014e42 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8014e36:	4b12      	ldr	r3, [pc, #72]	@ (8014e80 <RCCEx_PLL3_Config+0x15c>)
 8014e38:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8014e3a:	4a11      	ldr	r2, [pc, #68]	@ (8014e80 <RCCEx_PLL3_Config+0x15c>)
 8014e3c:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8014e40:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8014e42:	4b0f      	ldr	r3, [pc, #60]	@ (8014e80 <RCCEx_PLL3_Config+0x15c>)
 8014e44:	681b      	ldr	r3, [r3, #0]
 8014e46:	4a0e      	ldr	r2, [pc, #56]	@ (8014e80 <RCCEx_PLL3_Config+0x15c>)
 8014e48:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8014e4c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8014e4e:	f7fb fd83 	bl	8010958 <HAL_GetTick>
 8014e52:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8014e54:	e008      	b.n	8014e68 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8014e56:	f7fb fd7f 	bl	8010958 <HAL_GetTick>
 8014e5a:	4602      	mov	r2, r0
 8014e5c:	68bb      	ldr	r3, [r7, #8]
 8014e5e:	1ad3      	subs	r3, r2, r3
 8014e60:	2b02      	cmp	r3, #2
 8014e62:	d901      	bls.n	8014e68 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8014e64:	2303      	movs	r3, #3
 8014e66:	e006      	b.n	8014e76 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8014e68:	4b05      	ldr	r3, [pc, #20]	@ (8014e80 <RCCEx_PLL3_Config+0x15c>)
 8014e6a:	681b      	ldr	r3, [r3, #0]
 8014e6c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8014e70:	2b00      	cmp	r3, #0
 8014e72:	d0f0      	beq.n	8014e56 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8014e74:	7bfb      	ldrb	r3, [r7, #15]
}
 8014e76:	4618      	mov	r0, r3
 8014e78:	3710      	adds	r7, #16
 8014e7a:	46bd      	mov	sp, r7
 8014e7c:	bd80      	pop	{r7, pc}
 8014e7e:	bf00      	nop
 8014e80:	58024400 	.word	0x58024400
 8014e84:	ffff0007 	.word	0xffff0007

08014e88 <HAL_RNG_Init>:
  * @param  hrng pointer to a RNG_HandleTypeDef structure that contains
  *                the configuration information for RNG.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RNG_Init(RNG_HandleTypeDef *hrng)
{
 8014e88:	b580      	push	{r7, lr}
 8014e8a:	b084      	sub	sp, #16
 8014e8c:	af00      	add	r7, sp, #0
 8014e8e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  /* Check the RNG handle allocation */
  if (hrng == NULL)
 8014e90:	687b      	ldr	r3, [r7, #4]
 8014e92:	2b00      	cmp	r3, #0
 8014e94:	d101      	bne.n	8014e9a <HAL_RNG_Init+0x12>
  {
    return HAL_ERROR;
 8014e96:	2301      	movs	r3, #1
 8014e98:	e054      	b.n	8014f44 <HAL_RNG_Init+0xbc>

    /* Init the low level hardware */
    hrng->MspInitCallback(hrng);
  }
#else
  if (hrng->State == HAL_RNG_STATE_RESET)
 8014e9a:	687b      	ldr	r3, [r7, #4]
 8014e9c:	7a5b      	ldrb	r3, [r3, #9]
 8014e9e:	b2db      	uxtb	r3, r3
 8014ea0:	2b00      	cmp	r3, #0
 8014ea2:	d105      	bne.n	8014eb0 <HAL_RNG_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrng->Lock = HAL_UNLOCKED;
 8014ea4:	687b      	ldr	r3, [r7, #4]
 8014ea6:	2200      	movs	r2, #0
 8014ea8:	721a      	strb	r2, [r3, #8]

    /* Init the low level hardware */
    HAL_RNG_MspInit(hrng);
 8014eaa:	6878      	ldr	r0, [r7, #4]
 8014eac:	f7ec fb86 	bl	80015bc <HAL_RNG_MspInit>
  }
#endif /* USE_HAL_RNG_REGISTER_CALLBACKS */

  /* Change RNG peripheral state */
  hrng->State = HAL_RNG_STATE_BUSY;
 8014eb0:	687b      	ldr	r3, [r7, #4]
 8014eb2:	2202      	movs	r2, #2
 8014eb4:	725a      	strb	r2, [r3, #9]
      }
    }
  }
#else
  /* Clock Error Detection Configuration */
  MODIFY_REG(hrng->Instance->CR, RNG_CR_CED, hrng->Init.ClockErrorDetection);
 8014eb6:	687b      	ldr	r3, [r7, #4]
 8014eb8:	681b      	ldr	r3, [r3, #0]
 8014eba:	681b      	ldr	r3, [r3, #0]
 8014ebc:	f023 0120 	bic.w	r1, r3, #32
 8014ec0:	687b      	ldr	r3, [r7, #4]
 8014ec2:	685a      	ldr	r2, [r3, #4]
 8014ec4:	687b      	ldr	r3, [r7, #4]
 8014ec6:	681b      	ldr	r3, [r3, #0]
 8014ec8:	430a      	orrs	r2, r1
 8014eca:	601a      	str	r2, [r3, #0]
#endif /* RNG_CR_CONDRST */

  /* Enable the RNG Peripheral */
  __HAL_RNG_ENABLE(hrng);
 8014ecc:	687b      	ldr	r3, [r7, #4]
 8014ece:	681b      	ldr	r3, [r3, #0]
 8014ed0:	681a      	ldr	r2, [r3, #0]
 8014ed2:	687b      	ldr	r3, [r7, #4]
 8014ed4:	681b      	ldr	r3, [r3, #0]
 8014ed6:	f042 0204 	orr.w	r2, r2, #4
 8014eda:	601a      	str	r2, [r3, #0]

  /* verify that no seed error */
  if (__HAL_RNG_GET_IT(hrng, RNG_IT_SEI) != RESET)
 8014edc:	687b      	ldr	r3, [r7, #4]
 8014ede:	681b      	ldr	r3, [r3, #0]
 8014ee0:	685b      	ldr	r3, [r3, #4]
 8014ee2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8014ee6:	2b40      	cmp	r3, #64	@ 0x40
 8014ee8:	d104      	bne.n	8014ef4 <HAL_RNG_Init+0x6c>
  {
    hrng->State = HAL_RNG_STATE_ERROR;
 8014eea:	687b      	ldr	r3, [r7, #4]
 8014eec:	2204      	movs	r2, #4
 8014eee:	725a      	strb	r2, [r3, #9]
    return HAL_ERROR;
 8014ef0:	2301      	movs	r3, #1
 8014ef2:	e027      	b.n	8014f44 <HAL_RNG_Init+0xbc>
  }
  /* Get tick */
  tickstart = HAL_GetTick();
 8014ef4:	f7fb fd30 	bl	8010958 <HAL_GetTick>
 8014ef8:	60f8      	str	r0, [r7, #12]
  /* Check if data register contains valid random data */
  while (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_SECS) != RESET)
 8014efa:	e015      	b.n	8014f28 <HAL_RNG_Init+0xa0>
  {
    if ((HAL_GetTick() - tickstart) > RNG_TIMEOUT_VALUE)
 8014efc:	f7fb fd2c 	bl	8010958 <HAL_GetTick>
 8014f00:	4602      	mov	r2, r0
 8014f02:	68fb      	ldr	r3, [r7, #12]
 8014f04:	1ad3      	subs	r3, r2, r3
 8014f06:	2b02      	cmp	r3, #2
 8014f08:	d90e      	bls.n	8014f28 <HAL_RNG_Init+0xa0>
    {
      /* New check to avoid false timeout detection in case of preemption */
      if (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_SECS) != RESET)
 8014f0a:	687b      	ldr	r3, [r7, #4]
 8014f0c:	681b      	ldr	r3, [r3, #0]
 8014f0e:	685b      	ldr	r3, [r3, #4]
 8014f10:	f003 0304 	and.w	r3, r3, #4
 8014f14:	2b04      	cmp	r3, #4
 8014f16:	d107      	bne.n	8014f28 <HAL_RNG_Init+0xa0>
      {
        hrng->State = HAL_RNG_STATE_ERROR;
 8014f18:	687b      	ldr	r3, [r7, #4]
 8014f1a:	2204      	movs	r2, #4
 8014f1c:	725a      	strb	r2, [r3, #9]
        hrng->ErrorCode = HAL_RNG_ERROR_TIMEOUT;
 8014f1e:	687b      	ldr	r3, [r7, #4]
 8014f20:	2202      	movs	r2, #2
 8014f22:	60da      	str	r2, [r3, #12]
        return HAL_ERROR;
 8014f24:	2301      	movs	r3, #1
 8014f26:	e00d      	b.n	8014f44 <HAL_RNG_Init+0xbc>
  while (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_SECS) != RESET)
 8014f28:	687b      	ldr	r3, [r7, #4]
 8014f2a:	681b      	ldr	r3, [r3, #0]
 8014f2c:	685b      	ldr	r3, [r3, #4]
 8014f2e:	f003 0304 	and.w	r3, r3, #4
 8014f32:	2b04      	cmp	r3, #4
 8014f34:	d0e2      	beq.n	8014efc <HAL_RNG_Init+0x74>
      }
    }
  }

  /* Initialize the RNG state */
  hrng->State = HAL_RNG_STATE_READY;
 8014f36:	687b      	ldr	r3, [r7, #4]
 8014f38:	2201      	movs	r2, #1
 8014f3a:	725a      	strb	r2, [r3, #9]

  /* Initialise the error code */
  hrng->ErrorCode = HAL_RNG_ERROR_NONE;
 8014f3c:	687b      	ldr	r3, [r7, #4]
 8014f3e:	2200      	movs	r2, #0
 8014f40:	60da      	str	r2, [r3, #12]

  /* Return function status */
  return HAL_OK;
 8014f42:	2300      	movs	r3, #0
}
 8014f44:	4618      	mov	r0, r3
 8014f46:	3710      	adds	r7, #16
 8014f48:	46bd      	mov	sp, r7
 8014f4a:	bd80      	pop	{r7, pc}

08014f4c <HAL_RNG_GenerateRandomNumber>:
  * @param  random32bit pointer to generated random number variable if successful.
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_RNG_GenerateRandomNumber(RNG_HandleTypeDef *hrng, uint32_t *random32bit)
{
 8014f4c:	b580      	push	{r7, lr}
 8014f4e:	b084      	sub	sp, #16
 8014f50:	af00      	add	r7, sp, #0
 8014f52:	6078      	str	r0, [r7, #4]
 8014f54:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8014f56:	2300      	movs	r3, #0
 8014f58:	73fb      	strb	r3, [r7, #15]

  /* Process Locked */
  __HAL_LOCK(hrng);
 8014f5a:	687b      	ldr	r3, [r7, #4]
 8014f5c:	7a1b      	ldrb	r3, [r3, #8]
 8014f5e:	2b01      	cmp	r3, #1
 8014f60:	d101      	bne.n	8014f66 <HAL_RNG_GenerateRandomNumber+0x1a>
 8014f62:	2302      	movs	r3, #2
 8014f64:	e044      	b.n	8014ff0 <HAL_RNG_GenerateRandomNumber+0xa4>
 8014f66:	687b      	ldr	r3, [r7, #4]
 8014f68:	2201      	movs	r2, #1
 8014f6a:	721a      	strb	r2, [r3, #8]

  /* Check RNG peripheral state */
  if (hrng->State == HAL_RNG_STATE_READY)
 8014f6c:	687b      	ldr	r3, [r7, #4]
 8014f6e:	7a5b      	ldrb	r3, [r3, #9]
 8014f70:	b2db      	uxtb	r3, r3
 8014f72:	2b01      	cmp	r3, #1
 8014f74:	d133      	bne.n	8014fde <HAL_RNG_GenerateRandomNumber+0x92>
  {
    /* Change RNG peripheral state */
    hrng->State = HAL_RNG_STATE_BUSY;
 8014f76:	687b      	ldr	r3, [r7, #4]
 8014f78:	2202      	movs	r2, #2
 8014f7a:	725a      	strb	r2, [r3, #9]
      }
    }
#endif /* RNG_CR_CONDRST */

    /* Get tick */
    tickstart = HAL_GetTick();
 8014f7c:	f7fb fcec 	bl	8010958 <HAL_GetTick>
 8014f80:	60b8      	str	r0, [r7, #8]

    /* Check if data register contains valid random data */
    while (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_DRDY) == RESET)
 8014f82:	e018      	b.n	8014fb6 <HAL_RNG_GenerateRandomNumber+0x6a>
    {
      if ((HAL_GetTick() - tickstart) > RNG_TIMEOUT_VALUE)
 8014f84:	f7fb fce8 	bl	8010958 <HAL_GetTick>
 8014f88:	4602      	mov	r2, r0
 8014f8a:	68bb      	ldr	r3, [r7, #8]
 8014f8c:	1ad3      	subs	r3, r2, r3
 8014f8e:	2b02      	cmp	r3, #2
 8014f90:	d911      	bls.n	8014fb6 <HAL_RNG_GenerateRandomNumber+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_DRDY) == RESET)
 8014f92:	687b      	ldr	r3, [r7, #4]
 8014f94:	681b      	ldr	r3, [r3, #0]
 8014f96:	685b      	ldr	r3, [r3, #4]
 8014f98:	f003 0301 	and.w	r3, r3, #1
 8014f9c:	2b01      	cmp	r3, #1
 8014f9e:	d00a      	beq.n	8014fb6 <HAL_RNG_GenerateRandomNumber+0x6a>
        {
          hrng->State = HAL_RNG_STATE_READY;
 8014fa0:	687b      	ldr	r3, [r7, #4]
 8014fa2:	2201      	movs	r2, #1
 8014fa4:	725a      	strb	r2, [r3, #9]
          hrng->ErrorCode = HAL_RNG_ERROR_TIMEOUT;
 8014fa6:	687b      	ldr	r3, [r7, #4]
 8014fa8:	2202      	movs	r2, #2
 8014faa:	60da      	str	r2, [r3, #12]
          /* Process Unlocked */
          __HAL_UNLOCK(hrng);
 8014fac:	687b      	ldr	r3, [r7, #4]
 8014fae:	2200      	movs	r2, #0
 8014fb0:	721a      	strb	r2, [r3, #8]
          return HAL_ERROR;
 8014fb2:	2301      	movs	r3, #1
 8014fb4:	e01c      	b.n	8014ff0 <HAL_RNG_GenerateRandomNumber+0xa4>
    while (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_DRDY) == RESET)
 8014fb6:	687b      	ldr	r3, [r7, #4]
 8014fb8:	681b      	ldr	r3, [r3, #0]
 8014fba:	685b      	ldr	r3, [r3, #4]
 8014fbc:	f003 0301 	and.w	r3, r3, #1
 8014fc0:	2b01      	cmp	r3, #1
 8014fc2:	d1df      	bne.n	8014f84 <HAL_RNG_GenerateRandomNumber+0x38>
        }
      }
    }

    /* Get a 32bit Random number */
    hrng->RandomNumber = hrng->Instance->DR;
 8014fc4:	687b      	ldr	r3, [r7, #4]
 8014fc6:	681b      	ldr	r3, [r3, #0]
 8014fc8:	689a      	ldr	r2, [r3, #8]
 8014fca:	687b      	ldr	r3, [r7, #4]
 8014fcc:	611a      	str	r2, [r3, #16]
    else /* No seed error */
    {
      *random32bit = hrng->RandomNumber;
    }
#else
    *random32bit = hrng->RandomNumber;
 8014fce:	687b      	ldr	r3, [r7, #4]
 8014fd0:	691a      	ldr	r2, [r3, #16]
 8014fd2:	683b      	ldr	r3, [r7, #0]
 8014fd4:	601a      	str	r2, [r3, #0]

#endif /* RNG_CR_CONDRST */
    hrng->State = HAL_RNG_STATE_READY;
 8014fd6:	687b      	ldr	r3, [r7, #4]
 8014fd8:	2201      	movs	r2, #1
 8014fda:	725a      	strb	r2, [r3, #9]
 8014fdc:	e004      	b.n	8014fe8 <HAL_RNG_GenerateRandomNumber+0x9c>
  }
  else
  {
    hrng->ErrorCode = HAL_RNG_ERROR_BUSY;
 8014fde:	687b      	ldr	r3, [r7, #4]
 8014fe0:	2204      	movs	r2, #4
 8014fe2:	60da      	str	r2, [r3, #12]
    status = HAL_ERROR;
 8014fe4:	2301      	movs	r3, #1
 8014fe6:	73fb      	strb	r3, [r7, #15]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrng);
 8014fe8:	687b      	ldr	r3, [r7, #4]
 8014fea:	2200      	movs	r2, #0
 8014fec:	721a      	strb	r2, [r3, #8]

  return status;
 8014fee:	7bfb      	ldrb	r3, [r7, #15]
}
 8014ff0:	4618      	mov	r0, r3
 8014ff2:	3710      	adds	r7, #16
 8014ff4:	46bd      	mov	sp, r7
 8014ff6:	bd80      	pop	{r7, pc}

08014ff8 <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd: Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 8014ff8:	b580      	push	{r7, lr}
 8014ffa:	b08a      	sub	sp, #40	@ 0x28
 8014ffc:	af00      	add	r7, sp, #0
 8014ffe:	6078      	str	r0, [r7, #4]
  uint32_t speedgrade;
  uint32_t unitsize;
  uint32_t tickstart;

  /* Check the SD handle allocation */
  if (hsd == NULL)
 8015000:	687b      	ldr	r3, [r7, #4]
 8015002:	2b00      	cmp	r3, #0
 8015004:	d101      	bne.n	801500a <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 8015006:	2301      	movs	r3, #1
 8015008:	e075      	b.n	80150f6 <HAL_SD_Init+0xfe>
  assert_param(IS_SDMMC_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDMMC_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(hsd->Init.ClockDiv));

  if (hsd->State == HAL_SD_STATE_RESET)
 801500a:	687b      	ldr	r3, [r7, #4]
 801500c:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8015010:	b2db      	uxtb	r3, r3
 8015012:	2b00      	cmp	r3, #0
 8015014:	d105      	bne.n	8015022 <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 8015016:	687b      	ldr	r3, [r7, #4]
 8015018:	2200      	movs	r2, #0
 801501a:	761a      	strb	r2, [r3, #24]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 801501c:	6878      	ldr	r0, [r7, #4]
 801501e:	f7ec fb07 	bl	8001630 <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_PROGRAMMING;
 8015022:	687b      	ldr	r3, [r7, #4]
 8015024:	2204      	movs	r2, #4
 8015026:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 801502a:	6878      	ldr	r0, [r7, #4]
 801502c:	f000 f868 	bl	8015100 <HAL_SD_InitCard>
 8015030:	4603      	mov	r3, r0
 8015032:	2b00      	cmp	r3, #0
 8015034:	d001      	beq.n	801503a <HAL_SD_Init+0x42>
  {
    return HAL_ERROR;
 8015036:	2301      	movs	r3, #1
 8015038:	e05d      	b.n	80150f6 <HAL_SD_Init+0xfe>
  }

  if (HAL_SD_GetCardStatus(hsd, &CardStatus) != HAL_OK)
 801503a:	f107 0308 	add.w	r3, r7, #8
 801503e:	4619      	mov	r1, r3
 8015040:	6878      	ldr	r0, [r7, #4]
 8015042:	f000 fdaf 	bl	8015ba4 <HAL_SD_GetCardStatus>
 8015046:	4603      	mov	r3, r0
 8015048:	2b00      	cmp	r3, #0
 801504a:	d001      	beq.n	8015050 <HAL_SD_Init+0x58>
  {
    return HAL_ERROR;
 801504c:	2301      	movs	r3, #1
 801504e:	e052      	b.n	80150f6 <HAL_SD_Init+0xfe>
  }
  /* Get Initial Card Speed from Card Status*/
  speedgrade = CardStatus.UhsSpeedGrade;
 8015050:	7e3b      	ldrb	r3, [r7, #24]
 8015052:	b2db      	uxtb	r3, r3
 8015054:	627b      	str	r3, [r7, #36]	@ 0x24
  unitsize = CardStatus.UhsAllocationUnitSize;
 8015056:	7e7b      	ldrb	r3, [r7, #25]
 8015058:	b2db      	uxtb	r3, r3
 801505a:	623b      	str	r3, [r7, #32]
  if ((hsd->SdCard.CardType == CARD_SDHC_SDXC) && ((speedgrade != 0U) || (unitsize != 0U)))
 801505c:	687b      	ldr	r3, [r7, #4]
 801505e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8015060:	2b01      	cmp	r3, #1
 8015062:	d10a      	bne.n	801507a <HAL_SD_Init+0x82>
 8015064:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8015066:	2b00      	cmp	r3, #0
 8015068:	d102      	bne.n	8015070 <HAL_SD_Init+0x78>
 801506a:	6a3b      	ldr	r3, [r7, #32]
 801506c:	2b00      	cmp	r3, #0
 801506e:	d004      	beq.n	801507a <HAL_SD_Init+0x82>
  {
    hsd->SdCard.CardSpeed = CARD_ULTRA_HIGH_SPEED;
 8015070:	687b      	ldr	r3, [r7, #4]
 8015072:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8015076:	659a      	str	r2, [r3, #88]	@ 0x58
 8015078:	e00b      	b.n	8015092 <HAL_SD_Init+0x9a>
  }
  else
  {
    if (hsd->SdCard.CardType == CARD_SDHC_SDXC)
 801507a:	687b      	ldr	r3, [r7, #4]
 801507c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801507e:	2b01      	cmp	r3, #1
 8015080:	d104      	bne.n	801508c <HAL_SD_Init+0x94>
    {
      hsd->SdCard.CardSpeed  = CARD_HIGH_SPEED;
 8015082:	687b      	ldr	r3, [r7, #4]
 8015084:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8015088:	659a      	str	r2, [r3, #88]	@ 0x58
 801508a:	e002      	b.n	8015092 <HAL_SD_Init+0x9a>
    }
    else
    {
      hsd->SdCard.CardSpeed  = CARD_NORMAL_SPEED;
 801508c:	687b      	ldr	r3, [r7, #4]
 801508e:	2200      	movs	r2, #0
 8015090:	659a      	str	r2, [r3, #88]	@ 0x58
    }

  }
  /* Configure the bus wide */
  if (HAL_SD_ConfigWideBusOperation(hsd, hsd->Init.BusWide) != HAL_OK)
 8015092:	687b      	ldr	r3, [r7, #4]
 8015094:	68db      	ldr	r3, [r3, #12]
 8015096:	4619      	mov	r1, r3
 8015098:	6878      	ldr	r0, [r7, #4]
 801509a:	f000 fe6d 	bl	8015d78 <HAL_SD_ConfigWideBusOperation>
 801509e:	4603      	mov	r3, r0
 80150a0:	2b00      	cmp	r3, #0
 80150a2:	d001      	beq.n	80150a8 <HAL_SD_Init+0xb0>
  {
    return HAL_ERROR;
 80150a4:	2301      	movs	r3, #1
 80150a6:	e026      	b.n	80150f6 <HAL_SD_Init+0xfe>
  }

  /* Verify that SD card is ready to use after Initialization */
  tickstart = HAL_GetTick();
 80150a8:	f7fb fc56 	bl	8010958 <HAL_GetTick>
 80150ac:	61f8      	str	r0, [r7, #28]
  while ((HAL_SD_GetCardState(hsd) != HAL_SD_CARD_TRANSFER))
 80150ae:	e011      	b.n	80150d4 <HAL_SD_Init+0xdc>
  {
    if ((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 80150b0:	f7fb fc52 	bl	8010958 <HAL_GetTick>
 80150b4:	4602      	mov	r2, r0
 80150b6:	69fb      	ldr	r3, [r7, #28]
 80150b8:	1ad3      	subs	r3, r2, r3
 80150ba:	f1b3 3fff 	cmp.w	r3, #4294967295
 80150be:	d109      	bne.n	80150d4 <HAL_SD_Init+0xdc>
    {
      hsd->ErrorCode = HAL_SD_ERROR_TIMEOUT;
 80150c0:	687b      	ldr	r3, [r7, #4]
 80150c2:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 80150c6:	635a      	str	r2, [r3, #52]	@ 0x34
      hsd->State = HAL_SD_STATE_READY;
 80150c8:	687b      	ldr	r3, [r7, #4]
 80150ca:	2201      	movs	r2, #1
 80150cc:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
      return HAL_TIMEOUT;
 80150d0:	2303      	movs	r3, #3
 80150d2:	e010      	b.n	80150f6 <HAL_SD_Init+0xfe>
  while ((HAL_SD_GetCardState(hsd) != HAL_SD_CARD_TRANSFER))
 80150d4:	6878      	ldr	r0, [r7, #4]
 80150d6:	f000 ff61 	bl	8015f9c <HAL_SD_GetCardState>
 80150da:	4603      	mov	r3, r0
 80150dc:	2b04      	cmp	r3, #4
 80150de:	d1e7      	bne.n	80150b0 <HAL_SD_Init+0xb8>
    }
  }

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 80150e0:	687b      	ldr	r3, [r7, #4]
 80150e2:	2200      	movs	r2, #0
 80150e4:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 80150e6:	687b      	ldr	r3, [r7, #4]
 80150e8:	2200      	movs	r2, #0
 80150ea:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 80150ec:	687b      	ldr	r3, [r7, #4]
 80150ee:	2201      	movs	r2, #1
 80150f0:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30

  return HAL_OK;
 80150f4:	2300      	movs	r3, #0
}
 80150f6:	4618      	mov	r0, r3
 80150f8:	3728      	adds	r7, #40	@ 0x28
 80150fa:	46bd      	mov	sp, r7
 80150fc:	bd80      	pop	{r7, pc}
	...

08015100 <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 8015100:	b590      	push	{r4, r7, lr}
 8015102:	b08d      	sub	sp, #52	@ 0x34
 8015104:	af02      	add	r7, sp, #8
 8015106:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  SD_InitTypeDef Init;
  uint32_t sdmmc_clk;

  /* Default SDMMC peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDMMC_CLOCK_EDGE_RISING;
 8015108:	2300      	movs	r3, #0
 801510a:	60fb      	str	r3, [r7, #12]
  Init.ClockPowerSave      = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 801510c:	2300      	movs	r3, #0
 801510e:	613b      	str	r3, [r7, #16]
  Init.BusWide             = SDMMC_BUS_WIDE_1B;
 8015110:	2300      	movs	r3, #0
 8015112:	617b      	str	r3, [r7, #20]
  Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 8015114:	2300      	movs	r3, #0
 8015116:	61bb      	str	r3, [r7, #24]

  /* Init Clock should be less or equal to 400Khz*/
  sdmmc_clk     = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SDMMC);
 8015118:	f44f 3080 	mov.w	r0, #65536	@ 0x10000
 801511c:	f04f 0100 	mov.w	r1, #0
 8015120:	f7fe fbbe 	bl	80138a0 <HAL_RCCEx_GetPeriphCLKFreq>
 8015124:	6278      	str	r0, [r7, #36]	@ 0x24
  if (sdmmc_clk == 0U)
 8015126:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8015128:	2b00      	cmp	r3, #0
 801512a:	d109      	bne.n	8015140 <HAL_SD_InitCard+0x40>
  {
    hsd->State = HAL_SD_STATE_READY;
 801512c:	687b      	ldr	r3, [r7, #4]
 801512e:	2201      	movs	r2, #1
 8015130:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
    hsd->ErrorCode = SDMMC_ERROR_INVALID_PARAMETER;
 8015134:	687b      	ldr	r3, [r7, #4]
 8015136:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 801513a:	635a      	str	r2, [r3, #52]	@ 0x34
    return HAL_ERROR;
 801513c:	2301      	movs	r3, #1
 801513e:	e070      	b.n	8015222 <HAL_SD_InitCard+0x122>
  }
  Init.ClockDiv = sdmmc_clk / (2U * SD_INIT_FREQ);
 8015140:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8015142:	0a1b      	lsrs	r3, r3, #8
 8015144:	4a39      	ldr	r2, [pc, #228]	@ (801522c <HAL_SD_InitCard+0x12c>)
 8015146:	fba2 2303 	umull	r2, r3, r2, r3
 801514a:	091b      	lsrs	r3, r3, #4
 801514c:	61fb      	str	r3, [r7, #28]
  /* Set Transceiver polarity */
  hsd->Instance->POWER |= SDMMC_POWER_DIRPOL;
#endif /* USE_SD_TRANSCEIVER  */

  /* Initialize SDMMC peripheral interface with default configuration */
  (void)SDMMC_Init(hsd->Instance, Init);
 801514e:	687b      	ldr	r3, [r7, #4]
 8015150:	681c      	ldr	r4, [r3, #0]
 8015152:	466a      	mov	r2, sp
 8015154:	f107 0318 	add.w	r3, r7, #24
 8015158:	e893 0003 	ldmia.w	r3, {r0, r1}
 801515c:	e882 0003 	stmia.w	r2, {r0, r1}
 8015160:	f107 030c 	add.w	r3, r7, #12
 8015164:	cb0e      	ldmia	r3, {r1, r2, r3}
 8015166:	4620      	mov	r0, r4
 8015168:	f002 fc80 	bl	8017a6c <SDMMC_Init>

  /* Set Power State to ON */
  (void)SDMMC_PowerState_ON(hsd->Instance);
 801516c:	687b      	ldr	r3, [r7, #4]
 801516e:	681b      	ldr	r3, [r3, #0]
 8015170:	4618      	mov	r0, r3
 8015172:	f002 fcc3 	bl	8017afc <SDMMC_PowerState_ON>

  /* wait 74 Cycles: required power up waiting time before starting
     the SD initialization sequence */
  if (Init.ClockDiv != 0U)
 8015176:	69fb      	ldr	r3, [r7, #28]
 8015178:	2b00      	cmp	r3, #0
 801517a:	d005      	beq.n	8015188 <HAL_SD_InitCard+0x88>
  {
    sdmmc_clk = sdmmc_clk / (2U * Init.ClockDiv);
 801517c:	69fb      	ldr	r3, [r7, #28]
 801517e:	005b      	lsls	r3, r3, #1
 8015180:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8015182:	fbb2 f3f3 	udiv	r3, r2, r3
 8015186:	627b      	str	r3, [r7, #36]	@ 0x24
  }

  if (sdmmc_clk != 0U)
 8015188:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801518a:	2b00      	cmp	r3, #0
 801518c:	d007      	beq.n	801519e <HAL_SD_InitCard+0x9e>
  {
    HAL_Delay(1U + (74U * 1000U / (sdmmc_clk)));
 801518e:	4a28      	ldr	r2, [pc, #160]	@ (8015230 <HAL_SD_InitCard+0x130>)
 8015190:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8015192:	fbb2 f3f3 	udiv	r3, r2, r3
 8015196:	3301      	adds	r3, #1
 8015198:	4618      	mov	r0, r3
 801519a:	f7fb fbe9 	bl	8010970 <HAL_Delay>
  }

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 801519e:	6878      	ldr	r0, [r7, #4]
 80151a0:	f000 ffea 	bl	8016178 <SD_PowerON>
 80151a4:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 80151a6:	6a3b      	ldr	r3, [r7, #32]
 80151a8:	2b00      	cmp	r3, #0
 80151aa:	d00b      	beq.n	80151c4 <HAL_SD_InitCard+0xc4>
  {
    hsd->State = HAL_SD_STATE_READY;
 80151ac:	687b      	ldr	r3, [r7, #4]
 80151ae:	2201      	movs	r2, #1
 80151b0:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
    hsd->ErrorCode |= errorstate;
 80151b4:	687b      	ldr	r3, [r7, #4]
 80151b6:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80151b8:	6a3b      	ldr	r3, [r7, #32]
 80151ba:	431a      	orrs	r2, r3
 80151bc:	687b      	ldr	r3, [r7, #4]
 80151be:	635a      	str	r2, [r3, #52]	@ 0x34
    return HAL_ERROR;
 80151c0:	2301      	movs	r3, #1
 80151c2:	e02e      	b.n	8015222 <HAL_SD_InitCard+0x122>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 80151c4:	6878      	ldr	r0, [r7, #4]
 80151c6:	f000 ff09 	bl	8015fdc <SD_InitCard>
 80151ca:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 80151cc:	6a3b      	ldr	r3, [r7, #32]
 80151ce:	2b00      	cmp	r3, #0
 80151d0:	d00b      	beq.n	80151ea <HAL_SD_InitCard+0xea>
  {
    hsd->State = HAL_SD_STATE_READY;
 80151d2:	687b      	ldr	r3, [r7, #4]
 80151d4:	2201      	movs	r2, #1
 80151d6:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
    hsd->ErrorCode |= errorstate;
 80151da:	687b      	ldr	r3, [r7, #4]
 80151dc:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80151de:	6a3b      	ldr	r3, [r7, #32]
 80151e0:	431a      	orrs	r2, r3
 80151e2:	687b      	ldr	r3, [r7, #4]
 80151e4:	635a      	str	r2, [r3, #52]	@ 0x34
    return HAL_ERROR;
 80151e6:	2301      	movs	r3, #1
 80151e8:	e01b      	b.n	8015222 <HAL_SD_InitCard+0x122>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 80151ea:	687b      	ldr	r3, [r7, #4]
 80151ec:	681b      	ldr	r3, [r3, #0]
 80151ee:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80151f2:	4618      	mov	r0, r3
 80151f4:	f002 fd18 	bl	8017c28 <SDMMC_CmdBlockLength>
 80151f8:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 80151fa:	6a3b      	ldr	r3, [r7, #32]
 80151fc:	2b00      	cmp	r3, #0
 80151fe:	d00f      	beq.n	8015220 <HAL_SD_InitCard+0x120>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8015200:	687b      	ldr	r3, [r7, #4]
 8015202:	681b      	ldr	r3, [r3, #0]
 8015204:	4a0b      	ldr	r2, [pc, #44]	@ (8015234 <HAL_SD_InitCard+0x134>)
 8015206:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->ErrorCode |= errorstate;
 8015208:	687b      	ldr	r3, [r7, #4]
 801520a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 801520c:	6a3b      	ldr	r3, [r7, #32]
 801520e:	431a      	orrs	r2, r3
 8015210:	687b      	ldr	r3, [r7, #4]
 8015212:	635a      	str	r2, [r3, #52]	@ 0x34
    hsd->State = HAL_SD_STATE_READY;
 8015214:	687b      	ldr	r3, [r7, #4]
 8015216:	2201      	movs	r2, #1
 8015218:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
    return HAL_ERROR;
 801521c:	2301      	movs	r3, #1
 801521e:	e000      	b.n	8015222 <HAL_SD_InitCard+0x122>
  }

  return HAL_OK;
 8015220:	2300      	movs	r3, #0
}
 8015222:	4618      	mov	r0, r3
 8015224:	372c      	adds	r7, #44	@ 0x2c
 8015226:	46bd      	mov	sp, r7
 8015228:	bd90      	pop	{r4, r7, pc}
 801522a:	bf00      	nop
 801522c:	014f8b59 	.word	0x014f8b59
 8015230:	00012110 	.word	0x00012110
 8015234:	1fe00fff 	.word	0x1fe00fff

08015238 <HAL_SD_ReadBlocks_DMA>:
  * @param  NumberOfBlocks: Number of blocks to read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ReadBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd,
                                        uint32_t NumberOfBlocks)
{
 8015238:	b580      	push	{r7, lr}
 801523a:	b08c      	sub	sp, #48	@ 0x30
 801523c:	af00      	add	r7, sp, #0
 801523e:	60f8      	str	r0, [r7, #12]
 8015240:	60b9      	str	r1, [r7, #8]
 8015242:	607a      	str	r2, [r7, #4]
 8015244:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 8015246:	687b      	ldr	r3, [r7, #4]
 8015248:	62bb      	str	r3, [r7, #40]	@ 0x28

  if (NULL == pData)
 801524a:	68bb      	ldr	r3, [r7, #8]
 801524c:	2b00      	cmp	r3, #0
 801524e:	d107      	bne.n	8015260 <HAL_SD_ReadBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8015250:	68fb      	ldr	r3, [r7, #12]
 8015252:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8015254:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 8015258:	68fb      	ldr	r3, [r7, #12]
 801525a:	635a      	str	r2, [r3, #52]	@ 0x34
    return HAL_ERROR;
 801525c:	2301      	movs	r3, #1
 801525e:	e08d      	b.n	801537c <HAL_SD_ReadBlocks_DMA+0x144>
  }

  if (hsd->State == HAL_SD_STATE_READY)
 8015260:	68fb      	ldr	r3, [r7, #12]
 8015262:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8015266:	b2db      	uxtb	r3, r3
 8015268:	2b01      	cmp	r3, #1
 801526a:	f040 8086 	bne.w	801537a <HAL_SD_ReadBlocks_DMA+0x142>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 801526e:	68fb      	ldr	r3, [r7, #12]
 8015270:	2200      	movs	r2, #0
 8015272:	635a      	str	r2, [r3, #52]	@ 0x34

    if ((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8015274:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8015276:	683b      	ldr	r3, [r7, #0]
 8015278:	441a      	add	r2, r3
 801527a:	68fb      	ldr	r3, [r7, #12]
 801527c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 801527e:	429a      	cmp	r2, r3
 8015280:	d907      	bls.n	8015292 <HAL_SD_ReadBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 8015282:	68fb      	ldr	r3, [r7, #12]
 8015284:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8015286:	f043 7200 	orr.w	r2, r3, #33554432	@ 0x2000000
 801528a:	68fb      	ldr	r3, [r7, #12]
 801528c:	635a      	str	r2, [r3, #52]	@ 0x34
      return HAL_ERROR;
 801528e:	2301      	movs	r3, #1
 8015290:	e074      	b.n	801537c <HAL_SD_ReadBlocks_DMA+0x144>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 8015292:	68fb      	ldr	r3, [r7, #12]
 8015294:	2203      	movs	r2, #3
 8015296:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 801529a:	68fb      	ldr	r3, [r7, #12]
 801529c:	681b      	ldr	r3, [r3, #0]
 801529e:	2200      	movs	r2, #0
 80152a0:	62da      	str	r2, [r3, #44]	@ 0x2c

    hsd->pRxBuffPtr = pData;
 80152a2:	68fb      	ldr	r3, [r7, #12]
 80152a4:	68ba      	ldr	r2, [r7, #8]
 80152a6:	625a      	str	r2, [r3, #36]	@ 0x24
    hsd->RxXferSize = BLOCKSIZE * NumberOfBlocks;
 80152a8:	683b      	ldr	r3, [r7, #0]
 80152aa:	025a      	lsls	r2, r3, #9
 80152ac:	68fb      	ldr	r3, [r7, #12]
 80152ae:	629a      	str	r2, [r3, #40]	@ 0x28

    if (hsd->SdCard.CardType != CARD_SDHC_SDXC)
 80152b0:	68fb      	ldr	r3, [r7, #12]
 80152b2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80152b4:	2b01      	cmp	r3, #1
 80152b6:	d002      	beq.n	80152be <HAL_SD_ReadBlocks_DMA+0x86>
    {
      add *= 512U;
 80152b8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80152ba:	025b      	lsls	r3, r3, #9
 80152bc:	62bb      	str	r3, [r7, #40]	@ 0x28
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 80152be:	f04f 33ff 	mov.w	r3, #4294967295
 80152c2:	613b      	str	r3, [r7, #16]
    config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 80152c4:	683b      	ldr	r3, [r7, #0]
 80152c6:	025b      	lsls	r3, r3, #9
 80152c8:	617b      	str	r3, [r7, #20]
    config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 80152ca:	2390      	movs	r3, #144	@ 0x90
 80152cc:	61bb      	str	r3, [r7, #24]
    config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 80152ce:	2302      	movs	r3, #2
 80152d0:	61fb      	str	r3, [r7, #28]
    config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 80152d2:	2300      	movs	r3, #0
 80152d4:	623b      	str	r3, [r7, #32]
    config.DPSM          = SDMMC_DPSM_DISABLE;
 80152d6:	2300      	movs	r3, #0
 80152d8:	627b      	str	r3, [r7, #36]	@ 0x24
    (void)SDMMC_ConfigData(hsd->Instance, &config);
 80152da:	68fb      	ldr	r3, [r7, #12]
 80152dc:	681b      	ldr	r3, [r3, #0]
 80152de:	f107 0210 	add.w	r2, r7, #16
 80152e2:	4611      	mov	r1, r2
 80152e4:	4618      	mov	r0, r3
 80152e6:	f002 fc73 	bl	8017bd0 <SDMMC_ConfigData>

    __SDMMC_CMDTRANS_ENABLE(hsd->Instance);
 80152ea:	68fb      	ldr	r3, [r7, #12]
 80152ec:	681b      	ldr	r3, [r3, #0]
 80152ee:	68da      	ldr	r2, [r3, #12]
 80152f0:	68fb      	ldr	r3, [r7, #12]
 80152f2:	681b      	ldr	r3, [r3, #0]
 80152f4:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80152f8:	60da      	str	r2, [r3, #12]
    hsd->Instance->IDMABASE0 = (uint32_t) pData ;
 80152fa:	68fb      	ldr	r3, [r7, #12]
 80152fc:	681b      	ldr	r3, [r3, #0]
 80152fe:	68ba      	ldr	r2, [r7, #8]
 8015300:	659a      	str	r2, [r3, #88]	@ 0x58
    hsd->Instance->IDMACTRL  = SDMMC_ENABLE_IDMA_SINGLE_BUFF;
 8015302:	68fb      	ldr	r3, [r7, #12]
 8015304:	681b      	ldr	r3, [r3, #0]
 8015306:	2201      	movs	r2, #1
 8015308:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Read Blocks in DMA mode */
    if (NumberOfBlocks > 1U)
 801530a:	683b      	ldr	r3, [r7, #0]
 801530c:	2b01      	cmp	r3, #1
 801530e:	d90a      	bls.n	8015326 <HAL_SD_ReadBlocks_DMA+0xee>
    {
      hsd->Context = (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 8015310:	68fb      	ldr	r3, [r7, #12]
 8015312:	2282      	movs	r2, #130	@ 0x82
 8015314:	62da      	str	r2, [r3, #44]	@ 0x2c

      /* Read Multi Block command */
      errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 8015316:	68fb      	ldr	r3, [r7, #12]
 8015318:	681b      	ldr	r3, [r3, #0]
 801531a:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 801531c:	4618      	mov	r0, r3
 801531e:	f002 fcc9 	bl	8017cb4 <SDMMC_CmdReadMultiBlock>
 8015322:	62f8      	str	r0, [r7, #44]	@ 0x2c
 8015324:	e009      	b.n	801533a <HAL_SD_ReadBlocks_DMA+0x102>
    }
    else
    {
      hsd->Context = (SD_CONTEXT_READ_SINGLE_BLOCK | SD_CONTEXT_DMA);
 8015326:	68fb      	ldr	r3, [r7, #12]
 8015328:	2281      	movs	r2, #129	@ 0x81
 801532a:	62da      	str	r2, [r3, #44]	@ 0x2c

      /* Read Single Block command */
      errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 801532c:	68fb      	ldr	r3, [r7, #12]
 801532e:	681b      	ldr	r3, [r3, #0]
 8015330:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8015332:	4618      	mov	r0, r3
 8015334:	f002 fc9b 	bl	8017c6e <SDMMC_CmdReadSingleBlock>
 8015338:	62f8      	str	r0, [r7, #44]	@ 0x2c
    }
    if (errorstate != HAL_SD_ERROR_NONE)
 801533a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801533c:	2b00      	cmp	r3, #0
 801533e:	d012      	beq.n	8015366 <HAL_SD_ReadBlocks_DMA+0x12e>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8015340:	68fb      	ldr	r3, [r7, #12]
 8015342:	681b      	ldr	r3, [r3, #0]
 8015344:	4a0f      	ldr	r2, [pc, #60]	@ (8015384 <HAL_SD_ReadBlocks_DMA+0x14c>)
 8015346:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= errorstate;
 8015348:	68fb      	ldr	r3, [r7, #12]
 801534a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 801534c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801534e:	431a      	orrs	r2, r3
 8015350:	68fb      	ldr	r3, [r7, #12]
 8015352:	635a      	str	r2, [r3, #52]	@ 0x34
      hsd->State = HAL_SD_STATE_READY;
 8015354:	68fb      	ldr	r3, [r7, #12]
 8015356:	2201      	movs	r2, #1
 8015358:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
      hsd->Context = SD_CONTEXT_NONE;
 801535c:	68fb      	ldr	r3, [r7, #12]
 801535e:	2200      	movs	r2, #0
 8015360:	62da      	str	r2, [r3, #44]	@ 0x2c
      return HAL_ERROR;
 8015362:	2301      	movs	r3, #1
 8015364:	e00a      	b.n	801537c <HAL_SD_ReadBlocks_DMA+0x144>
    }

    /* Enable transfer interrupts */
    __HAL_SD_ENABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_RXOVERR | SDMMC_IT_DATAEND));
 8015366:	68fb      	ldr	r3, [r7, #12]
 8015368:	681b      	ldr	r3, [r3, #0]
 801536a:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 801536c:	68fb      	ldr	r3, [r7, #12]
 801536e:	681b      	ldr	r3, [r3, #0]
 8015370:	f442 7295 	orr.w	r2, r2, #298	@ 0x12a
 8015374:	63da      	str	r2, [r3, #60]	@ 0x3c


    return HAL_OK;
 8015376:	2300      	movs	r3, #0
 8015378:	e000      	b.n	801537c <HAL_SD_ReadBlocks_DMA+0x144>
  }
  else
  {
    return HAL_BUSY;
 801537a:	2302      	movs	r3, #2
  }
}
 801537c:	4618      	mov	r0, r3
 801537e:	3730      	adds	r7, #48	@ 0x30
 8015380:	46bd      	mov	sp, r7
 8015382:	bd80      	pop	{r7, pc}
 8015384:	1fe00fff 	.word	0x1fe00fff

08015388 <HAL_SD_WriteBlocks_DMA>:
  * @param  NumberOfBlocks: Number of blocks to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_WriteBlocks_DMA(SD_HandleTypeDef *hsd, const uint8_t *pData, uint32_t BlockAdd,
                                         uint32_t NumberOfBlocks)
{
 8015388:	b580      	push	{r7, lr}
 801538a:	b08c      	sub	sp, #48	@ 0x30
 801538c:	af00      	add	r7, sp, #0
 801538e:	60f8      	str	r0, [r7, #12]
 8015390:	60b9      	str	r1, [r7, #8]
 8015392:	607a      	str	r2, [r7, #4]
 8015394:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 8015396:	687b      	ldr	r3, [r7, #4]
 8015398:	62bb      	str	r3, [r7, #40]	@ 0x28

  if (NULL == pData)
 801539a:	68bb      	ldr	r3, [r7, #8]
 801539c:	2b00      	cmp	r3, #0
 801539e:	d107      	bne.n	80153b0 <HAL_SD_WriteBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 80153a0:	68fb      	ldr	r3, [r7, #12]
 80153a2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80153a4:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 80153a8:	68fb      	ldr	r3, [r7, #12]
 80153aa:	635a      	str	r2, [r3, #52]	@ 0x34
    return HAL_ERROR;
 80153ac:	2301      	movs	r3, #1
 80153ae:	e08d      	b.n	80154cc <HAL_SD_WriteBlocks_DMA+0x144>
  }

  if (hsd->State == HAL_SD_STATE_READY)
 80153b0:	68fb      	ldr	r3, [r7, #12]
 80153b2:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 80153b6:	b2db      	uxtb	r3, r3
 80153b8:	2b01      	cmp	r3, #1
 80153ba:	f040 8086 	bne.w	80154ca <HAL_SD_WriteBlocks_DMA+0x142>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 80153be:	68fb      	ldr	r3, [r7, #12]
 80153c0:	2200      	movs	r2, #0
 80153c2:	635a      	str	r2, [r3, #52]	@ 0x34

    if ((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 80153c4:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80153c6:	683b      	ldr	r3, [r7, #0]
 80153c8:	441a      	add	r2, r3
 80153ca:	68fb      	ldr	r3, [r7, #12]
 80153cc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80153ce:	429a      	cmp	r2, r3
 80153d0:	d907      	bls.n	80153e2 <HAL_SD_WriteBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 80153d2:	68fb      	ldr	r3, [r7, #12]
 80153d4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80153d6:	f043 7200 	orr.w	r2, r3, #33554432	@ 0x2000000
 80153da:	68fb      	ldr	r3, [r7, #12]
 80153dc:	635a      	str	r2, [r3, #52]	@ 0x34
      return HAL_ERROR;
 80153de:	2301      	movs	r3, #1
 80153e0:	e074      	b.n	80154cc <HAL_SD_WriteBlocks_DMA+0x144>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 80153e2:	68fb      	ldr	r3, [r7, #12]
 80153e4:	2203      	movs	r2, #3
 80153e6:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 80153ea:	68fb      	ldr	r3, [r7, #12]
 80153ec:	681b      	ldr	r3, [r3, #0]
 80153ee:	2200      	movs	r2, #0
 80153f0:	62da      	str	r2, [r3, #44]	@ 0x2c

    hsd->pTxBuffPtr = pData;
 80153f2:	68fb      	ldr	r3, [r7, #12]
 80153f4:	68ba      	ldr	r2, [r7, #8]
 80153f6:	61da      	str	r2, [r3, #28]
    hsd->TxXferSize = BLOCKSIZE * NumberOfBlocks;
 80153f8:	683b      	ldr	r3, [r7, #0]
 80153fa:	025a      	lsls	r2, r3, #9
 80153fc:	68fb      	ldr	r3, [r7, #12]
 80153fe:	621a      	str	r2, [r3, #32]

    if (hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8015400:	68fb      	ldr	r3, [r7, #12]
 8015402:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8015404:	2b01      	cmp	r3, #1
 8015406:	d002      	beq.n	801540e <HAL_SD_WriteBlocks_DMA+0x86>
    {
      add *= 512U;
 8015408:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801540a:	025b      	lsls	r3, r3, #9
 801540c:	62bb      	str	r3, [r7, #40]	@ 0x28
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 801540e:	f04f 33ff 	mov.w	r3, #4294967295
 8015412:	613b      	str	r3, [r7, #16]
    config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 8015414:	683b      	ldr	r3, [r7, #0]
 8015416:	025b      	lsls	r3, r3, #9
 8015418:	617b      	str	r3, [r7, #20]
    config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 801541a:	2390      	movs	r3, #144	@ 0x90
 801541c:	61bb      	str	r3, [r7, #24]
    config.TransferDir   = SDMMC_TRANSFER_DIR_TO_CARD;
 801541e:	2300      	movs	r3, #0
 8015420:	61fb      	str	r3, [r7, #28]
    config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 8015422:	2300      	movs	r3, #0
 8015424:	623b      	str	r3, [r7, #32]
    config.DPSM          = SDMMC_DPSM_DISABLE;
 8015426:	2300      	movs	r3, #0
 8015428:	627b      	str	r3, [r7, #36]	@ 0x24
    (void)SDMMC_ConfigData(hsd->Instance, &config);
 801542a:	68fb      	ldr	r3, [r7, #12]
 801542c:	681b      	ldr	r3, [r3, #0]
 801542e:	f107 0210 	add.w	r2, r7, #16
 8015432:	4611      	mov	r1, r2
 8015434:	4618      	mov	r0, r3
 8015436:	f002 fbcb 	bl	8017bd0 <SDMMC_ConfigData>


    __SDMMC_CMDTRANS_ENABLE(hsd->Instance);
 801543a:	68fb      	ldr	r3, [r7, #12]
 801543c:	681b      	ldr	r3, [r3, #0]
 801543e:	68da      	ldr	r2, [r3, #12]
 8015440:	68fb      	ldr	r3, [r7, #12]
 8015442:	681b      	ldr	r3, [r3, #0]
 8015444:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8015448:	60da      	str	r2, [r3, #12]

    hsd->Instance->IDMABASE0 = (uint32_t) pData ;
 801544a:	68fb      	ldr	r3, [r7, #12]
 801544c:	681b      	ldr	r3, [r3, #0]
 801544e:	68ba      	ldr	r2, [r7, #8]
 8015450:	659a      	str	r2, [r3, #88]	@ 0x58
    hsd->Instance->IDMACTRL  = SDMMC_ENABLE_IDMA_SINGLE_BUFF;
 8015452:	68fb      	ldr	r3, [r7, #12]
 8015454:	681b      	ldr	r3, [r3, #0]
 8015456:	2201      	movs	r2, #1
 8015458:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Write Blocks in Polling mode */
    if (NumberOfBlocks > 1U)
 801545a:	683b      	ldr	r3, [r7, #0]
 801545c:	2b01      	cmp	r3, #1
 801545e:	d90a      	bls.n	8015476 <HAL_SD_WriteBlocks_DMA+0xee>
    {
      hsd->Context = (SD_CONTEXT_WRITE_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 8015460:	68fb      	ldr	r3, [r7, #12]
 8015462:	22a0      	movs	r2, #160	@ 0xa0
 8015464:	62da      	str	r2, [r3, #44]	@ 0x2c

      /* Write Multi Block command */
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 8015466:	68fb      	ldr	r3, [r7, #12]
 8015468:	681b      	ldr	r3, [r3, #0]
 801546a:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 801546c:	4618      	mov	r0, r3
 801546e:	f002 fc67 	bl	8017d40 <SDMMC_CmdWriteMultiBlock>
 8015472:	62f8      	str	r0, [r7, #44]	@ 0x2c
 8015474:	e009      	b.n	801548a <HAL_SD_WriteBlocks_DMA+0x102>
    }
    else
    {
      hsd->Context = (SD_CONTEXT_WRITE_SINGLE_BLOCK | SD_CONTEXT_DMA);
 8015476:	68fb      	ldr	r3, [r7, #12]
 8015478:	2290      	movs	r2, #144	@ 0x90
 801547a:	62da      	str	r2, [r3, #44]	@ 0x2c

      /* Write Single Block command */
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 801547c:	68fb      	ldr	r3, [r7, #12]
 801547e:	681b      	ldr	r3, [r3, #0]
 8015480:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8015482:	4618      	mov	r0, r3
 8015484:	f002 fc39 	bl	8017cfa <SDMMC_CmdWriteSingleBlock>
 8015488:	62f8      	str	r0, [r7, #44]	@ 0x2c
    }
    if (errorstate != HAL_SD_ERROR_NONE)
 801548a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801548c:	2b00      	cmp	r3, #0
 801548e:	d012      	beq.n	80154b6 <HAL_SD_WriteBlocks_DMA+0x12e>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8015490:	68fb      	ldr	r3, [r7, #12]
 8015492:	681b      	ldr	r3, [r3, #0]
 8015494:	4a0f      	ldr	r2, [pc, #60]	@ (80154d4 <HAL_SD_WriteBlocks_DMA+0x14c>)
 8015496:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= errorstate;
 8015498:	68fb      	ldr	r3, [r7, #12]
 801549a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 801549c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801549e:	431a      	orrs	r2, r3
 80154a0:	68fb      	ldr	r3, [r7, #12]
 80154a2:	635a      	str	r2, [r3, #52]	@ 0x34
      hsd->State = HAL_SD_STATE_READY;
 80154a4:	68fb      	ldr	r3, [r7, #12]
 80154a6:	2201      	movs	r2, #1
 80154a8:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
      hsd->Context = SD_CONTEXT_NONE;
 80154ac:	68fb      	ldr	r3, [r7, #12]
 80154ae:	2200      	movs	r2, #0
 80154b0:	62da      	str	r2, [r3, #44]	@ 0x2c
      return HAL_ERROR;
 80154b2:	2301      	movs	r3, #1
 80154b4:	e00a      	b.n	80154cc <HAL_SD_WriteBlocks_DMA+0x144>
    }

    /* Enable transfer interrupts */
    __HAL_SD_ENABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_TXUNDERR | SDMMC_IT_DATAEND));
 80154b6:	68fb      	ldr	r3, [r7, #12]
 80154b8:	681b      	ldr	r3, [r3, #0]
 80154ba:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80154bc:	68fb      	ldr	r3, [r7, #12]
 80154be:	681b      	ldr	r3, [r3, #0]
 80154c0:	f442 728d 	orr.w	r2, r2, #282	@ 0x11a
 80154c4:	63da      	str	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 80154c6:	2300      	movs	r3, #0
 80154c8:	e000      	b.n	80154cc <HAL_SD_WriteBlocks_DMA+0x144>
  }
  else
  {
    return HAL_BUSY;
 80154ca:	2302      	movs	r3, #2
  }
}
 80154cc:	4618      	mov	r0, r3
 80154ce:	3730      	adds	r7, #48	@ 0x30
 80154d0:	46bd      	mov	sp, r7
 80154d2:	bd80      	pop	{r7, pc}
 80154d4:	1fe00fff 	.word	0x1fe00fff

080154d8 <HAL_SD_IRQHandler>:
  * @brief  This function handles SD card interrupt request.
  * @param  hsd: Pointer to SD handle
  * @retval None
  */
void HAL_SD_IRQHandler(SD_HandleTypeDef *hsd)
{
 80154d8:	b580      	push	{r7, lr}
 80154da:	b084      	sub	sp, #16
 80154dc:	af00      	add	r7, sp, #0
 80154de:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  uint32_t context = hsd->Context;
 80154e0:	687b      	ldr	r3, [r7, #4]
 80154e2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80154e4:	60fb      	str	r3, [r7, #12]

  /* Check for SDMMC interrupt flags */
  if ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 80154e6:	687b      	ldr	r3, [r7, #4]
 80154e8:	681b      	ldr	r3, [r3, #0]
 80154ea:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80154ec:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80154f0:	2b00      	cmp	r3, #0
 80154f2:	d008      	beq.n	8015506 <HAL_SD_IRQHandler+0x2e>
 80154f4:	68fb      	ldr	r3, [r7, #12]
 80154f6:	f003 0308 	and.w	r3, r3, #8
 80154fa:	2b00      	cmp	r3, #0
 80154fc:	d003      	beq.n	8015506 <HAL_SD_IRQHandler+0x2e>
  {
    SD_Read_IT(hsd);
 80154fe:	6878      	ldr	r0, [r7, #4]
 8015500:	f001 f926 	bl	8016750 <SD_Read_IT>
 8015504:	e19a      	b.n	801583c <HAL_SD_IRQHandler+0x364>
  }

  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DATAEND) != RESET)
 8015506:	687b      	ldr	r3, [r7, #4]
 8015508:	681b      	ldr	r3, [r3, #0]
 801550a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 801550c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8015510:	2b00      	cmp	r3, #0
 8015512:	f000 80ac 	beq.w	801566e <HAL_SD_IRQHandler+0x196>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DATAEND);
 8015516:	687b      	ldr	r3, [r7, #4]
 8015518:	681b      	ldr	r3, [r3, #0]
 801551a:	f44f 7280 	mov.w	r2, #256	@ 0x100
 801551e:	639a      	str	r2, [r3, #56]	@ 0x38

    __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_DATAEND  | SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | \
 8015520:	687b      	ldr	r3, [r7, #4]
 8015522:	681b      	ldr	r3, [r3, #0]
 8015524:	6bd9      	ldr	r1, [r3, #60]	@ 0x3c
 8015526:	687b      	ldr	r3, [r7, #4]
 8015528:	681a      	ldr	r2, [r3, #0]
 801552a:	4b59      	ldr	r3, [pc, #356]	@ (8015690 <HAL_SD_IRQHandler+0x1b8>)
 801552c:	400b      	ands	r3, r1
 801552e:	63d3      	str	r3, [r2, #60]	@ 0x3c
                        SDMMC_IT_TXUNDERR | SDMMC_IT_RXOVERR  | SDMMC_IT_TXFIFOHE | \
                        SDMMC_IT_RXFIFOHF);

    __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_IDMABTC);
 8015530:	687b      	ldr	r3, [r7, #4]
 8015532:	681b      	ldr	r3, [r3, #0]
 8015534:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8015536:	687b      	ldr	r3, [r7, #4]
 8015538:	681b      	ldr	r3, [r3, #0]
 801553a:	f022 5280 	bic.w	r2, r2, #268435456	@ 0x10000000
 801553e:	63da      	str	r2, [r3, #60]	@ 0x3c
    __SDMMC_CMDTRANS_DISABLE(hsd->Instance);
 8015540:	687b      	ldr	r3, [r7, #4]
 8015542:	681b      	ldr	r3, [r3, #0]
 8015544:	68da      	ldr	r2, [r3, #12]
 8015546:	687b      	ldr	r3, [r7, #4]
 8015548:	681b      	ldr	r3, [r3, #0]
 801554a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 801554e:	60da      	str	r2, [r3, #12]

    if ((context & SD_CONTEXT_IT) != 0U)
 8015550:	68fb      	ldr	r3, [r7, #12]
 8015552:	f003 0308 	and.w	r3, r3, #8
 8015556:	2b00      	cmp	r3, #0
 8015558:	d038      	beq.n	80155cc <HAL_SD_IRQHandler+0xf4>
    {
      if (((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 801555a:	68fb      	ldr	r3, [r7, #12]
 801555c:	f003 0302 	and.w	r3, r3, #2
 8015560:	2b00      	cmp	r3, #0
 8015562:	d104      	bne.n	801556e <HAL_SD_IRQHandler+0x96>
 8015564:	68fb      	ldr	r3, [r7, #12]
 8015566:	f003 0320 	and.w	r3, r3, #32
 801556a:	2b00      	cmp	r3, #0
 801556c:	d011      	beq.n	8015592 <HAL_SD_IRQHandler+0xba>
      {
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 801556e:	687b      	ldr	r3, [r7, #4]
 8015570:	681b      	ldr	r3, [r3, #0]
 8015572:	4618      	mov	r0, r3
 8015574:	f002 fc08 	bl	8017d88 <SDMMC_CmdStopTransfer>
 8015578:	60b8      	str	r0, [r7, #8]
        if (errorstate != HAL_SD_ERROR_NONE)
 801557a:	68bb      	ldr	r3, [r7, #8]
 801557c:	2b00      	cmp	r3, #0
 801557e:	d008      	beq.n	8015592 <HAL_SD_IRQHandler+0xba>
        {
          hsd->ErrorCode |= errorstate;
 8015580:	687b      	ldr	r3, [r7, #4]
 8015582:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8015584:	68bb      	ldr	r3, [r7, #8]
 8015586:	431a      	orrs	r2, r3
 8015588:	687b      	ldr	r3, [r7, #4]
 801558a:	635a      	str	r2, [r3, #52]	@ 0x34
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
          hsd->ErrorCallback(hsd);
#else
          HAL_SD_ErrorCallback(hsd);
 801558c:	6878      	ldr	r0, [r7, #4]
 801558e:	f000 f95b 	bl	8015848 <HAL_SD_ErrorCallback>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
        }
      }

      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8015592:	687b      	ldr	r3, [r7, #4]
 8015594:	681b      	ldr	r3, [r3, #0]
 8015596:	4a3f      	ldr	r2, [pc, #252]	@ (8015694 <HAL_SD_IRQHandler+0x1bc>)
 8015598:	639a      	str	r2, [r3, #56]	@ 0x38

      hsd->State = HAL_SD_STATE_READY;
 801559a:	687b      	ldr	r3, [r7, #4]
 801559c:	2201      	movs	r2, #1
 801559e:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
      hsd->Context = SD_CONTEXT_NONE;
 80155a2:	687b      	ldr	r3, [r7, #4]
 80155a4:	2200      	movs	r2, #0
 80155a6:	62da      	str	r2, [r3, #44]	@ 0x2c
      if (((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 80155a8:	68fb      	ldr	r3, [r7, #12]
 80155aa:	f003 0301 	and.w	r3, r3, #1
 80155ae:	2b00      	cmp	r3, #0
 80155b0:	d104      	bne.n	80155bc <HAL_SD_IRQHandler+0xe4>
 80155b2:	68fb      	ldr	r3, [r7, #12]
 80155b4:	f003 0302 	and.w	r3, r3, #2
 80155b8:	2b00      	cmp	r3, #0
 80155ba:	d003      	beq.n	80155c4 <HAL_SD_IRQHandler+0xec>
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->RxCpltCallback(hsd);
#else
        HAL_SD_RxCpltCallback(hsd);
 80155bc:	6878      	ldr	r0, [r7, #4]
 80155be:	f003 fbbd 	bl	8018d3c <HAL_SD_RxCpltCallback>
 80155c2:	e13b      	b.n	801583c <HAL_SD_IRQHandler+0x364>
      else
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->TxCpltCallback(hsd);
#else
        HAL_SD_TxCpltCallback(hsd);
 80155c4:	6878      	ldr	r0, [r7, #4]
 80155c6:	f003 fbaf 	bl	8018d28 <HAL_SD_TxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 80155ca:	e137      	b.n	801583c <HAL_SD_IRQHandler+0x364>
    else if ((context & SD_CONTEXT_DMA) != 0U)
 80155cc:	68fb      	ldr	r3, [r7, #12]
 80155ce:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80155d2:	2b00      	cmp	r3, #0
 80155d4:	f000 8132 	beq.w	801583c <HAL_SD_IRQHandler+0x364>
      hsd->Instance->DLEN = 0;
 80155d8:	687b      	ldr	r3, [r7, #4]
 80155da:	681b      	ldr	r3, [r3, #0]
 80155dc:	2200      	movs	r2, #0
 80155de:	629a      	str	r2, [r3, #40]	@ 0x28
      hsd->Instance->DCTRL = 0;
 80155e0:	687b      	ldr	r3, [r7, #4]
 80155e2:	681b      	ldr	r3, [r3, #0]
 80155e4:	2200      	movs	r2, #0
 80155e6:	62da      	str	r2, [r3, #44]	@ 0x2c
      hsd->Instance->IDMACTRL = SDMMC_DISABLE_IDMA;
 80155e8:	687b      	ldr	r3, [r7, #4]
 80155ea:	681b      	ldr	r3, [r3, #0]
 80155ec:	2200      	movs	r2, #0
 80155ee:	651a      	str	r2, [r3, #80]	@ 0x50
      if (((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 80155f0:	68fb      	ldr	r3, [r7, #12]
 80155f2:	f003 0302 	and.w	r3, r3, #2
 80155f6:	2b00      	cmp	r3, #0
 80155f8:	d104      	bne.n	8015604 <HAL_SD_IRQHandler+0x12c>
 80155fa:	68fb      	ldr	r3, [r7, #12]
 80155fc:	f003 0320 	and.w	r3, r3, #32
 8015600:	2b00      	cmp	r3, #0
 8015602:	d011      	beq.n	8015628 <HAL_SD_IRQHandler+0x150>
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8015604:	687b      	ldr	r3, [r7, #4]
 8015606:	681b      	ldr	r3, [r3, #0]
 8015608:	4618      	mov	r0, r3
 801560a:	f002 fbbd 	bl	8017d88 <SDMMC_CmdStopTransfer>
 801560e:	60b8      	str	r0, [r7, #8]
        if (errorstate != HAL_SD_ERROR_NONE)
 8015610:	68bb      	ldr	r3, [r7, #8]
 8015612:	2b00      	cmp	r3, #0
 8015614:	d008      	beq.n	8015628 <HAL_SD_IRQHandler+0x150>
          hsd->ErrorCode |= errorstate;
 8015616:	687b      	ldr	r3, [r7, #4]
 8015618:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 801561a:	68bb      	ldr	r3, [r7, #8]
 801561c:	431a      	orrs	r2, r3
 801561e:	687b      	ldr	r3, [r7, #4]
 8015620:	635a      	str	r2, [r3, #52]	@ 0x34
          HAL_SD_ErrorCallback(hsd);
 8015622:	6878      	ldr	r0, [r7, #4]
 8015624:	f000 f910 	bl	8015848 <HAL_SD_ErrorCallback>
      hsd->State = HAL_SD_STATE_READY;
 8015628:	687b      	ldr	r3, [r7, #4]
 801562a:	2201      	movs	r2, #1
 801562c:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
      hsd->Context = SD_CONTEXT_NONE;
 8015630:	687b      	ldr	r3, [r7, #4]
 8015632:	2200      	movs	r2, #0
 8015634:	62da      	str	r2, [r3, #44]	@ 0x2c
      if (((context & SD_CONTEXT_WRITE_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 8015636:	68fb      	ldr	r3, [r7, #12]
 8015638:	f003 0310 	and.w	r3, r3, #16
 801563c:	2b00      	cmp	r3, #0
 801563e:	d104      	bne.n	801564a <HAL_SD_IRQHandler+0x172>
 8015640:	68fb      	ldr	r3, [r7, #12]
 8015642:	f003 0320 	and.w	r3, r3, #32
 8015646:	2b00      	cmp	r3, #0
 8015648:	d002      	beq.n	8015650 <HAL_SD_IRQHandler+0x178>
        HAL_SD_TxCpltCallback(hsd);
 801564a:	6878      	ldr	r0, [r7, #4]
 801564c:	f003 fb6c 	bl	8018d28 <HAL_SD_TxCpltCallback>
      if (((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 8015650:	68fb      	ldr	r3, [r7, #12]
 8015652:	f003 0301 	and.w	r3, r3, #1
 8015656:	2b00      	cmp	r3, #0
 8015658:	d105      	bne.n	8015666 <HAL_SD_IRQHandler+0x18e>
 801565a:	68fb      	ldr	r3, [r7, #12]
 801565c:	f003 0302 	and.w	r3, r3, #2
 8015660:	2b00      	cmp	r3, #0
 8015662:	f000 80eb 	beq.w	801583c <HAL_SD_IRQHandler+0x364>
        HAL_SD_RxCpltCallback(hsd);
 8015666:	6878      	ldr	r0, [r7, #4]
 8015668:	f003 fb68 	bl	8018d3c <HAL_SD_RxCpltCallback>
}
 801566c:	e0e6      	b.n	801583c <HAL_SD_IRQHandler+0x364>
  else if ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXFIFOHE) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 801566e:	687b      	ldr	r3, [r7, #4]
 8015670:	681b      	ldr	r3, [r3, #0]
 8015672:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8015674:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8015678:	2b00      	cmp	r3, #0
 801567a:	d00d      	beq.n	8015698 <HAL_SD_IRQHandler+0x1c0>
 801567c:	68fb      	ldr	r3, [r7, #12]
 801567e:	f003 0308 	and.w	r3, r3, #8
 8015682:	2b00      	cmp	r3, #0
 8015684:	d008      	beq.n	8015698 <HAL_SD_IRQHandler+0x1c0>
    SD_Write_IT(hsd);
 8015686:	6878      	ldr	r0, [r7, #4]
 8015688:	f001 f8a8 	bl	80167dc <SD_Write_IT>
 801568c:	e0d6      	b.n	801583c <HAL_SD_IRQHandler+0x364>
 801568e:	bf00      	nop
 8015690:	ffff3ec5 	.word	0xffff3ec5
 8015694:	18000f3a 	.word	0x18000f3a
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_RXOVERR |
 8015698:	687b      	ldr	r3, [r7, #4]
 801569a:	681b      	ldr	r3, [r3, #0]
 801569c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 801569e:	f003 033a 	and.w	r3, r3, #58	@ 0x3a
 80156a2:	2b00      	cmp	r3, #0
 80156a4:	f000 809d 	beq.w	80157e2 <HAL_SD_IRQHandler+0x30a>
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_IT_DCRCFAIL) != RESET)
 80156a8:	687b      	ldr	r3, [r7, #4]
 80156aa:	681b      	ldr	r3, [r3, #0]
 80156ac:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80156ae:	f003 0302 	and.w	r3, r3, #2
 80156b2:	2b00      	cmp	r3, #0
 80156b4:	d005      	beq.n	80156c2 <HAL_SD_IRQHandler+0x1ea>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 80156b6:	687b      	ldr	r3, [r7, #4]
 80156b8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80156ba:	f043 0202 	orr.w	r2, r3, #2
 80156be:	687b      	ldr	r3, [r7, #4]
 80156c0:	635a      	str	r2, [r3, #52]	@ 0x34
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_IT_DTIMEOUT) != RESET)
 80156c2:	687b      	ldr	r3, [r7, #4]
 80156c4:	681b      	ldr	r3, [r3, #0]
 80156c6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80156c8:	f003 0308 	and.w	r3, r3, #8
 80156cc:	2b00      	cmp	r3, #0
 80156ce:	d005      	beq.n	80156dc <HAL_SD_IRQHandler+0x204>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 80156d0:	687b      	ldr	r3, [r7, #4]
 80156d2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80156d4:	f043 0208 	orr.w	r2, r3, #8
 80156d8:	687b      	ldr	r3, [r7, #4]
 80156da:	635a      	str	r2, [r3, #52]	@ 0x34
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_IT_RXOVERR) != RESET)
 80156dc:	687b      	ldr	r3, [r7, #4]
 80156de:	681b      	ldr	r3, [r3, #0]
 80156e0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80156e2:	f003 0320 	and.w	r3, r3, #32
 80156e6:	2b00      	cmp	r3, #0
 80156e8:	d005      	beq.n	80156f6 <HAL_SD_IRQHandler+0x21e>
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 80156ea:	687b      	ldr	r3, [r7, #4]
 80156ec:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80156ee:	f043 0220 	orr.w	r2, r3, #32
 80156f2:	687b      	ldr	r3, [r7, #4]
 80156f4:	635a      	str	r2, [r3, #52]	@ 0x34
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_IT_TXUNDERR) != RESET)
 80156f6:	687b      	ldr	r3, [r7, #4]
 80156f8:	681b      	ldr	r3, [r3, #0]
 80156fa:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80156fc:	f003 0310 	and.w	r3, r3, #16
 8015700:	2b00      	cmp	r3, #0
 8015702:	d005      	beq.n	8015710 <HAL_SD_IRQHandler+0x238>
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 8015704:	687b      	ldr	r3, [r7, #4]
 8015706:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8015708:	f043 0210 	orr.w	r2, r3, #16
 801570c:	687b      	ldr	r3, [r7, #4]
 801570e:	635a      	str	r2, [r3, #52]	@ 0x34
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8015710:	687b      	ldr	r3, [r7, #4]
 8015712:	681b      	ldr	r3, [r3, #0]
 8015714:	4a4b      	ldr	r2, [pc, #300]	@ (8015844 <HAL_SD_IRQHandler+0x36c>)
 8015716:	639a      	str	r2, [r3, #56]	@ 0x38
    __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_DATAEND | SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | \
 8015718:	687b      	ldr	r3, [r7, #4]
 801571a:	681b      	ldr	r3, [r3, #0]
 801571c:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 801571e:	687b      	ldr	r3, [r7, #4]
 8015720:	681b      	ldr	r3, [r3, #0]
 8015722:	f422 729d 	bic.w	r2, r2, #314	@ 0x13a
 8015726:	63da      	str	r2, [r3, #60]	@ 0x3c
    __SDMMC_CMDTRANS_DISABLE(hsd->Instance);
 8015728:	687b      	ldr	r3, [r7, #4]
 801572a:	681b      	ldr	r3, [r3, #0]
 801572c:	68da      	ldr	r2, [r3, #12]
 801572e:	687b      	ldr	r3, [r7, #4]
 8015730:	681b      	ldr	r3, [r3, #0]
 8015732:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8015736:	60da      	str	r2, [r3, #12]
    hsd->Instance->DCTRL |= SDMMC_DCTRL_FIFORST;
 8015738:	687b      	ldr	r3, [r7, #4]
 801573a:	681b      	ldr	r3, [r3, #0]
 801573c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 801573e:	687b      	ldr	r3, [r7, #4]
 8015740:	681b      	ldr	r3, [r3, #0]
 8015742:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8015746:	62da      	str	r2, [r3, #44]	@ 0x2c
    hsd->Instance->CMD |= SDMMC_CMD_CMDSTOP;
 8015748:	687b      	ldr	r3, [r7, #4]
 801574a:	681b      	ldr	r3, [r3, #0]
 801574c:	68da      	ldr	r2, [r3, #12]
 801574e:	687b      	ldr	r3, [r7, #4]
 8015750:	681b      	ldr	r3, [r3, #0]
 8015752:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8015756:	60da      	str	r2, [r3, #12]
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 8015758:	687b      	ldr	r3, [r7, #4]
 801575a:	681b      	ldr	r3, [r3, #0]
 801575c:	4618      	mov	r0, r3
 801575e:	f002 fb13 	bl	8017d88 <SDMMC_CmdStopTransfer>
 8015762:	4602      	mov	r2, r0
 8015764:	687b      	ldr	r3, [r7, #4]
 8015766:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8015768:	431a      	orrs	r2, r3
 801576a:	687b      	ldr	r3, [r7, #4]
 801576c:	635a      	str	r2, [r3, #52]	@ 0x34
    hsd->Instance->CMD &= ~(SDMMC_CMD_CMDSTOP);
 801576e:	687b      	ldr	r3, [r7, #4]
 8015770:	681b      	ldr	r3, [r3, #0]
 8015772:	68da      	ldr	r2, [r3, #12]
 8015774:	687b      	ldr	r3, [r7, #4]
 8015776:	681b      	ldr	r3, [r3, #0]
 8015778:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 801577c:	60da      	str	r2, [r3, #12]
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DABORT);
 801577e:	687b      	ldr	r3, [r7, #4]
 8015780:	681b      	ldr	r3, [r3, #0]
 8015782:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8015786:	639a      	str	r2, [r3, #56]	@ 0x38
    if ((context & SD_CONTEXT_IT) != 0U)
 8015788:	68fb      	ldr	r3, [r7, #12]
 801578a:	f003 0308 	and.w	r3, r3, #8
 801578e:	2b00      	cmp	r3, #0
 8015790:	d00a      	beq.n	80157a8 <HAL_SD_IRQHandler+0x2d0>
      hsd->State = HAL_SD_STATE_READY;
 8015792:	687b      	ldr	r3, [r7, #4]
 8015794:	2201      	movs	r2, #1
 8015796:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
      hsd->Context = SD_CONTEXT_NONE;
 801579a:	687b      	ldr	r3, [r7, #4]
 801579c:	2200      	movs	r2, #0
 801579e:	62da      	str	r2, [r3, #44]	@ 0x2c
      HAL_SD_ErrorCallback(hsd);
 80157a0:	6878      	ldr	r0, [r7, #4]
 80157a2:	f000 f851 	bl	8015848 <HAL_SD_ErrorCallback>
}
 80157a6:	e049      	b.n	801583c <HAL_SD_IRQHandler+0x364>
    else if ((context & SD_CONTEXT_DMA) != 0U)
 80157a8:	68fb      	ldr	r3, [r7, #12]
 80157aa:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80157ae:	2b00      	cmp	r3, #0
 80157b0:	d044      	beq.n	801583c <HAL_SD_IRQHandler+0x364>
      if (hsd->ErrorCode != HAL_SD_ERROR_NONE)
 80157b2:	687b      	ldr	r3, [r7, #4]
 80157b4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80157b6:	2b00      	cmp	r3, #0
 80157b8:	d040      	beq.n	801583c <HAL_SD_IRQHandler+0x364>
        __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_IDMABTC);
 80157ba:	687b      	ldr	r3, [r7, #4]
 80157bc:	681b      	ldr	r3, [r3, #0]
 80157be:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80157c0:	687b      	ldr	r3, [r7, #4]
 80157c2:	681b      	ldr	r3, [r3, #0]
 80157c4:	f022 5280 	bic.w	r2, r2, #268435456	@ 0x10000000
 80157c8:	63da      	str	r2, [r3, #60]	@ 0x3c
        hsd->Instance->IDMACTRL = SDMMC_DISABLE_IDMA;
 80157ca:	687b      	ldr	r3, [r7, #4]
 80157cc:	681b      	ldr	r3, [r3, #0]
 80157ce:	2200      	movs	r2, #0
 80157d0:	651a      	str	r2, [r3, #80]	@ 0x50
        hsd->State = HAL_SD_STATE_READY;
 80157d2:	687b      	ldr	r3, [r7, #4]
 80157d4:	2201      	movs	r2, #1
 80157d6:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
        HAL_SD_ErrorCallback(hsd);
 80157da:	6878      	ldr	r0, [r7, #4]
 80157dc:	f000 f834 	bl	8015848 <HAL_SD_ErrorCallback>
}
 80157e0:	e02c      	b.n	801583c <HAL_SD_IRQHandler+0x364>
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_IDMABTC) != RESET)
 80157e2:	687b      	ldr	r3, [r7, #4]
 80157e4:	681b      	ldr	r3, [r3, #0]
 80157e6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80157e8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80157ec:	2b00      	cmp	r3, #0
 80157ee:	d025      	beq.n	801583c <HAL_SD_IRQHandler+0x364>
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_IDMABTC);
 80157f0:	687b      	ldr	r3, [r7, #4]
 80157f2:	681b      	ldr	r3, [r3, #0]
 80157f4:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80157f8:	639a      	str	r2, [r3, #56]	@ 0x38
    if (READ_BIT(hsd->Instance->IDMACTRL, SDMMC_IDMA_IDMABACT) == 0U)
 80157fa:	687b      	ldr	r3, [r7, #4]
 80157fc:	681b      	ldr	r3, [r3, #0]
 80157fe:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8015800:	f003 0304 	and.w	r3, r3, #4
 8015804:	2b00      	cmp	r3, #0
 8015806:	d10c      	bne.n	8015822 <HAL_SD_IRQHandler+0x34a>
      if ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U)
 8015808:	68fb      	ldr	r3, [r7, #12]
 801580a:	f003 0320 	and.w	r3, r3, #32
 801580e:	2b00      	cmp	r3, #0
 8015810:	d003      	beq.n	801581a <HAL_SD_IRQHandler+0x342>
        HAL_SDEx_Write_DMADoubleBuf1CpltCallback(hsd);
 8015812:	6878      	ldr	r0, [r7, #4]
 8015814:	f001 f84a 	bl	80168ac <HAL_SDEx_Write_DMADoubleBuf1CpltCallback>
}
 8015818:	e010      	b.n	801583c <HAL_SD_IRQHandler+0x364>
        HAL_SDEx_Read_DMADoubleBuf1CpltCallback(hsd);
 801581a:	6878      	ldr	r0, [r7, #4]
 801581c:	f001 f832 	bl	8016884 <HAL_SDEx_Read_DMADoubleBuf1CpltCallback>
}
 8015820:	e00c      	b.n	801583c <HAL_SD_IRQHandler+0x364>
      if ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U)
 8015822:	68fb      	ldr	r3, [r7, #12]
 8015824:	f003 0320 	and.w	r3, r3, #32
 8015828:	2b00      	cmp	r3, #0
 801582a:	d003      	beq.n	8015834 <HAL_SD_IRQHandler+0x35c>
        HAL_SDEx_Write_DMADoubleBuf0CpltCallback(hsd);
 801582c:	6878      	ldr	r0, [r7, #4]
 801582e:	f001 f833 	bl	8016898 <HAL_SDEx_Write_DMADoubleBuf0CpltCallback>
}
 8015832:	e003      	b.n	801583c <HAL_SD_IRQHandler+0x364>
        HAL_SDEx_Read_DMADoubleBuf0CpltCallback(hsd);
 8015834:	6878      	ldr	r0, [r7, #4]
 8015836:	f001 f81b 	bl	8016870 <HAL_SDEx_Read_DMADoubleBuf0CpltCallback>
}
 801583a:	e7ff      	b.n	801583c <HAL_SD_IRQHandler+0x364>
 801583c:	bf00      	nop
 801583e:	3710      	adds	r7, #16
 8015840:	46bd      	mov	sp, r7
 8015842:	bd80      	pop	{r7, pc}
 8015844:	18000f3a 	.word	0x18000f3a

08015848 <HAL_SD_ErrorCallback>:
  * @brief SD error callbacks
  * @param hsd: Pointer SD handle
  * @retval None
  */
__weak void HAL_SD_ErrorCallback(SD_HandleTypeDef *hsd)
{
 8015848:	b480      	push	{r7}
 801584a:	b083      	sub	sp, #12
 801584c:	af00      	add	r7, sp, #0
 801584e:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SD_ErrorCallback can be implemented in the user file
   */
}
 8015850:	bf00      	nop
 8015852:	370c      	adds	r7, #12
 8015854:	46bd      	mov	sp, r7
 8015856:	f85d 7b04 	ldr.w	r7, [sp], #4
 801585a:	4770      	bx	lr

0801585c <HAL_SD_GetCardCSD>:
  * @param  pCSD: Pointer to a HAL_SD_CardCSDTypeDef structure that
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 801585c:	b480      	push	{r7}
 801585e:	b083      	sub	sp, #12
 8015860:	af00      	add	r7, sp, #0
 8015862:	6078      	str	r0, [r7, #4]
 8015864:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 8015866:	687b      	ldr	r3, [r7, #4]
 8015868:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 801586a:	0f9b      	lsrs	r3, r3, #30
 801586c:	b2da      	uxtb	r2, r3
 801586e:	683b      	ldr	r3, [r7, #0]
 8015870:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 8015872:	687b      	ldr	r3, [r7, #4]
 8015874:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8015876:	0e9b      	lsrs	r3, r3, #26
 8015878:	b2db      	uxtb	r3, r3
 801587a:	f003 030f 	and.w	r3, r3, #15
 801587e:	b2da      	uxtb	r2, r3
 8015880:	683b      	ldr	r3, [r7, #0]
 8015882:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 8015884:	687b      	ldr	r3, [r7, #4]
 8015886:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8015888:	0e1b      	lsrs	r3, r3, #24
 801588a:	b2db      	uxtb	r3, r3
 801588c:	f003 0303 	and.w	r3, r3, #3
 8015890:	b2da      	uxtb	r2, r3
 8015892:	683b      	ldr	r3, [r7, #0]
 8015894:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 8015896:	687b      	ldr	r3, [r7, #4]
 8015898:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 801589a:	0c1b      	lsrs	r3, r3, #16
 801589c:	b2da      	uxtb	r2, r3
 801589e:	683b      	ldr	r3, [r7, #0]
 80158a0:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 80158a2:	687b      	ldr	r3, [r7, #4]
 80158a4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80158a6:	0a1b      	lsrs	r3, r3, #8
 80158a8:	b2da      	uxtb	r2, r3
 80158aa:	683b      	ldr	r3, [r7, #0]
 80158ac:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 80158ae:	687b      	ldr	r3, [r7, #4]
 80158b0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80158b2:	b2da      	uxtb	r2, r3
 80158b4:	683b      	ldr	r3, [r7, #0]
 80158b6:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 80158b8:	687b      	ldr	r3, [r7, #4]
 80158ba:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80158bc:	0d1b      	lsrs	r3, r3, #20
 80158be:	b29a      	uxth	r2, r3
 80158c0:	683b      	ldr	r3, [r7, #0]
 80158c2:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 80158c4:	687b      	ldr	r3, [r7, #4]
 80158c6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80158c8:	0c1b      	lsrs	r3, r3, #16
 80158ca:	b2db      	uxtb	r3, r3
 80158cc:	f003 030f 	and.w	r3, r3, #15
 80158d0:	b2da      	uxtb	r2, r3
 80158d2:	683b      	ldr	r3, [r7, #0]
 80158d4:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 80158d6:	687b      	ldr	r3, [r7, #4]
 80158d8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80158da:	0bdb      	lsrs	r3, r3, #15
 80158dc:	b2db      	uxtb	r3, r3
 80158de:	f003 0301 	and.w	r3, r3, #1
 80158e2:	b2da      	uxtb	r2, r3
 80158e4:	683b      	ldr	r3, [r7, #0]
 80158e6:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 80158e8:	687b      	ldr	r3, [r7, #4]
 80158ea:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80158ec:	0b9b      	lsrs	r3, r3, #14
 80158ee:	b2db      	uxtb	r3, r3
 80158f0:	f003 0301 	and.w	r3, r3, #1
 80158f4:	b2da      	uxtb	r2, r3
 80158f6:	683b      	ldr	r3, [r7, #0]
 80158f8:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 80158fa:	687b      	ldr	r3, [r7, #4]
 80158fc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80158fe:	0b5b      	lsrs	r3, r3, #13
 8015900:	b2db      	uxtb	r3, r3
 8015902:	f003 0301 	and.w	r3, r3, #1
 8015906:	b2da      	uxtb	r2, r3
 8015908:	683b      	ldr	r3, [r7, #0]
 801590a:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 801590c:	687b      	ldr	r3, [r7, #4]
 801590e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8015910:	0b1b      	lsrs	r3, r3, #12
 8015912:	b2db      	uxtb	r3, r3
 8015914:	f003 0301 	and.w	r3, r3, #1
 8015918:	b2da      	uxtb	r2, r3
 801591a:	683b      	ldr	r3, [r7, #0]
 801591c:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 801591e:	683b      	ldr	r3, [r7, #0]
 8015920:	2200      	movs	r2, #0
 8015922:	735a      	strb	r2, [r3, #13]

  if (hsd->SdCard.CardType == CARD_SDSC)
 8015924:	687b      	ldr	r3, [r7, #4]
 8015926:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8015928:	2b00      	cmp	r3, #0
 801592a:	d163      	bne.n	80159f4 <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 801592c:	687b      	ldr	r3, [r7, #4]
 801592e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8015930:	009a      	lsls	r2, r3, #2
 8015932:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8015936:	4013      	ands	r3, r2
 8015938:	687a      	ldr	r2, [r7, #4]
 801593a:	6e52      	ldr	r2, [r2, #100]	@ 0x64
 801593c:	0f92      	lsrs	r2, r2, #30
 801593e:	431a      	orrs	r2, r3
 8015940:	683b      	ldr	r3, [r7, #0]
 8015942:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 8015944:	687b      	ldr	r3, [r7, #4]
 8015946:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8015948:	0edb      	lsrs	r3, r3, #27
 801594a:	b2db      	uxtb	r3, r3
 801594c:	f003 0307 	and.w	r3, r3, #7
 8015950:	b2da      	uxtb	r2, r3
 8015952:	683b      	ldr	r3, [r7, #0]
 8015954:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 8015956:	687b      	ldr	r3, [r7, #4]
 8015958:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 801595a:	0e1b      	lsrs	r3, r3, #24
 801595c:	b2db      	uxtb	r3, r3
 801595e:	f003 0307 	and.w	r3, r3, #7
 8015962:	b2da      	uxtb	r2, r3
 8015964:	683b      	ldr	r3, [r7, #0]
 8015966:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 8015968:	687b      	ldr	r3, [r7, #4]
 801596a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 801596c:	0d5b      	lsrs	r3, r3, #21
 801596e:	b2db      	uxtb	r3, r3
 8015970:	f003 0307 	and.w	r3, r3, #7
 8015974:	b2da      	uxtb	r2, r3
 8015976:	683b      	ldr	r3, [r7, #0]
 8015978:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 801597a:	687b      	ldr	r3, [r7, #4]
 801597c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 801597e:	0c9b      	lsrs	r3, r3, #18
 8015980:	b2db      	uxtb	r3, r3
 8015982:	f003 0307 	and.w	r3, r3, #7
 8015986:	b2da      	uxtb	r2, r3
 8015988:	683b      	ldr	r3, [r7, #0]
 801598a:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 801598c:	687b      	ldr	r3, [r7, #4]
 801598e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8015990:	0bdb      	lsrs	r3, r3, #15
 8015992:	b2db      	uxtb	r3, r3
 8015994:	f003 0307 	and.w	r3, r3, #7
 8015998:	b2da      	uxtb	r2, r3
 801599a:	683b      	ldr	r3, [r7, #0]
 801599c:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 801599e:	683b      	ldr	r3, [r7, #0]
 80159a0:	691b      	ldr	r3, [r3, #16]
 80159a2:	1c5a      	adds	r2, r3, #1
 80159a4:	687b      	ldr	r3, [r7, #4]
 80159a6:	649a      	str	r2, [r3, #72]	@ 0x48
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 80159a8:	683b      	ldr	r3, [r7, #0]
 80159aa:	7e1b      	ldrb	r3, [r3, #24]
 80159ac:	b2db      	uxtb	r3, r3
 80159ae:	f003 0307 	and.w	r3, r3, #7
 80159b2:	3302      	adds	r3, #2
 80159b4:	2201      	movs	r2, #1
 80159b6:	fa02 f303 	lsl.w	r3, r2, r3
 80159ba:	687a      	ldr	r2, [r7, #4]
 80159bc:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 80159be:	fb03 f202 	mul.w	r2, r3, r2
 80159c2:	687b      	ldr	r3, [r7, #4]
 80159c4:	649a      	str	r2, [r3, #72]	@ 0x48
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 80159c6:	683b      	ldr	r3, [r7, #0]
 80159c8:	7a1b      	ldrb	r3, [r3, #8]
 80159ca:	b2db      	uxtb	r3, r3
 80159cc:	f003 030f 	and.w	r3, r3, #15
 80159d0:	2201      	movs	r2, #1
 80159d2:	409a      	lsls	r2, r3
 80159d4:	687b      	ldr	r3, [r7, #4]
 80159d6:	64da      	str	r2, [r3, #76]	@ 0x4c

    hsd->SdCard.LogBlockNbr = (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 80159d8:	687b      	ldr	r3, [r7, #4]
 80159da:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80159dc:	687a      	ldr	r2, [r7, #4]
 80159de:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 80159e0:	0a52      	lsrs	r2, r2, #9
 80159e2:	fb03 f202 	mul.w	r2, r3, r2
 80159e6:	687b      	ldr	r3, [r7, #4]
 80159e8:	651a      	str	r2, [r3, #80]	@ 0x50
    hsd->SdCard.LogBlockSize = 512U;
 80159ea:	687b      	ldr	r3, [r7, #4]
 80159ec:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80159f0:	655a      	str	r2, [r3, #84]	@ 0x54
 80159f2:	e031      	b.n	8015a58 <HAL_SD_GetCardCSD+0x1fc>
  }
  else if (hsd->SdCard.CardType == CARD_SDHC_SDXC)
 80159f4:	687b      	ldr	r3, [r7, #4]
 80159f6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80159f8:	2b01      	cmp	r3, #1
 80159fa:	d11d      	bne.n	8015a38 <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 80159fc:	687b      	ldr	r3, [r7, #4]
 80159fe:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8015a00:	041b      	lsls	r3, r3, #16
 8015a02:	f403 127c 	and.w	r2, r3, #4128768	@ 0x3f0000
 8015a06:	687b      	ldr	r3, [r7, #4]
 8015a08:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8015a0a:	0c1b      	lsrs	r3, r3, #16
 8015a0c:	431a      	orrs	r2, r3
 8015a0e:	683b      	ldr	r3, [r7, #0]
 8015a10:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 8015a12:	683b      	ldr	r3, [r7, #0]
 8015a14:	691b      	ldr	r3, [r3, #16]
 8015a16:	3301      	adds	r3, #1
 8015a18:	029a      	lsls	r2, r3, #10
 8015a1a:	687b      	ldr	r3, [r7, #4]
 8015a1c:	649a      	str	r2, [r3, #72]	@ 0x48
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 8015a1e:	687b      	ldr	r3, [r7, #4]
 8015a20:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8015a22:	687b      	ldr	r3, [r7, #4]
 8015a24:	651a      	str	r2, [r3, #80]	@ 0x50
    hsd->SdCard.BlockSize = 512U;
 8015a26:	687b      	ldr	r3, [r7, #4]
 8015a28:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8015a2c:	64da      	str	r2, [r3, #76]	@ 0x4c
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 8015a2e:	687b      	ldr	r3, [r7, #4]
 8015a30:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8015a32:	687b      	ldr	r3, [r7, #4]
 8015a34:	655a      	str	r2, [r3, #84]	@ 0x54
 8015a36:	e00f      	b.n	8015a58 <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8015a38:	687b      	ldr	r3, [r7, #4]
 8015a3a:	681b      	ldr	r3, [r3, #0]
 8015a3c:	4a58      	ldr	r2, [pc, #352]	@ (8015ba0 <HAL_SD_GetCardCSD+0x344>)
 8015a3e:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8015a40:	687b      	ldr	r3, [r7, #4]
 8015a42:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8015a44:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8015a48:	687b      	ldr	r3, [r7, #4]
 8015a4a:	635a      	str	r2, [r3, #52]	@ 0x34
    hsd->State = HAL_SD_STATE_READY;
 8015a4c:	687b      	ldr	r3, [r7, #4]
 8015a4e:	2201      	movs	r2, #1
 8015a50:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
    return HAL_ERROR;
 8015a54:	2301      	movs	r3, #1
 8015a56:	e09d      	b.n	8015b94 <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 8015a58:	687b      	ldr	r3, [r7, #4]
 8015a5a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8015a5c:	0b9b      	lsrs	r3, r3, #14
 8015a5e:	b2db      	uxtb	r3, r3
 8015a60:	f003 0301 	and.w	r3, r3, #1
 8015a64:	b2da      	uxtb	r2, r3
 8015a66:	683b      	ldr	r3, [r7, #0]
 8015a68:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 8015a6a:	687b      	ldr	r3, [r7, #4]
 8015a6c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8015a6e:	09db      	lsrs	r3, r3, #7
 8015a70:	b2db      	uxtb	r3, r3
 8015a72:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8015a76:	b2da      	uxtb	r2, r3
 8015a78:	683b      	ldr	r3, [r7, #0]
 8015a7a:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 8015a7c:	687b      	ldr	r3, [r7, #4]
 8015a7e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8015a80:	b2db      	uxtb	r3, r3
 8015a82:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8015a86:	b2da      	uxtb	r2, r3
 8015a88:	683b      	ldr	r3, [r7, #0]
 8015a8a:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 8015a8c:	687b      	ldr	r3, [r7, #4]
 8015a8e:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8015a90:	0fdb      	lsrs	r3, r3, #31
 8015a92:	b2da      	uxtb	r2, r3
 8015a94:	683b      	ldr	r3, [r7, #0]
 8015a96:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 8015a98:	687b      	ldr	r3, [r7, #4]
 8015a9a:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8015a9c:	0f5b      	lsrs	r3, r3, #29
 8015a9e:	b2db      	uxtb	r3, r3
 8015aa0:	f003 0303 	and.w	r3, r3, #3
 8015aa4:	b2da      	uxtb	r2, r3
 8015aa6:	683b      	ldr	r3, [r7, #0]
 8015aa8:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 8015aaa:	687b      	ldr	r3, [r7, #4]
 8015aac:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8015aae:	0e9b      	lsrs	r3, r3, #26
 8015ab0:	b2db      	uxtb	r3, r3
 8015ab2:	f003 0307 	and.w	r3, r3, #7
 8015ab6:	b2da      	uxtb	r2, r3
 8015ab8:	683b      	ldr	r3, [r7, #0]
 8015aba:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen = (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 8015abc:	687b      	ldr	r3, [r7, #4]
 8015abe:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8015ac0:	0d9b      	lsrs	r3, r3, #22
 8015ac2:	b2db      	uxtb	r3, r3
 8015ac4:	f003 030f 	and.w	r3, r3, #15
 8015ac8:	b2da      	uxtb	r2, r3
 8015aca:	683b      	ldr	r3, [r7, #0]
 8015acc:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 8015ace:	687b      	ldr	r3, [r7, #4]
 8015ad0:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8015ad2:	0d5b      	lsrs	r3, r3, #21
 8015ad4:	b2db      	uxtb	r3, r3
 8015ad6:	f003 0301 	and.w	r3, r3, #1
 8015ada:	b2da      	uxtb	r2, r3
 8015adc:	683b      	ldr	r3, [r7, #0]
 8015ade:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 8015ae2:	683b      	ldr	r3, [r7, #0]
 8015ae4:	2200      	movs	r2, #0
 8015ae6:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 8015aea:	687b      	ldr	r3, [r7, #4]
 8015aec:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8015aee:	0c1b      	lsrs	r3, r3, #16
 8015af0:	b2db      	uxtb	r3, r3
 8015af2:	f003 0301 	and.w	r3, r3, #1
 8015af6:	b2da      	uxtb	r2, r3
 8015af8:	683b      	ldr	r3, [r7, #0]
 8015afa:	f883 2022 	strb.w	r2, [r3, #34]	@ 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 8015afe:	687b      	ldr	r3, [r7, #4]
 8015b00:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8015b02:	0bdb      	lsrs	r3, r3, #15
 8015b04:	b2db      	uxtb	r3, r3
 8015b06:	f003 0301 	and.w	r3, r3, #1
 8015b0a:	b2da      	uxtb	r2, r3
 8015b0c:	683b      	ldr	r3, [r7, #0]
 8015b0e:	f883 2023 	strb.w	r2, [r3, #35]	@ 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 8015b12:	687b      	ldr	r3, [r7, #4]
 8015b14:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8015b16:	0b9b      	lsrs	r3, r3, #14
 8015b18:	b2db      	uxtb	r3, r3
 8015b1a:	f003 0301 	and.w	r3, r3, #1
 8015b1e:	b2da      	uxtb	r2, r3
 8015b20:	683b      	ldr	r3, [r7, #0]
 8015b22:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 8015b26:	687b      	ldr	r3, [r7, #4]
 8015b28:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8015b2a:	0b5b      	lsrs	r3, r3, #13
 8015b2c:	b2db      	uxtb	r3, r3
 8015b2e:	f003 0301 	and.w	r3, r3, #1
 8015b32:	b2da      	uxtb	r2, r3
 8015b34:	683b      	ldr	r3, [r7, #0]
 8015b36:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 8015b3a:	687b      	ldr	r3, [r7, #4]
 8015b3c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8015b3e:	0b1b      	lsrs	r3, r3, #12
 8015b40:	b2db      	uxtb	r3, r3
 8015b42:	f003 0301 	and.w	r3, r3, #1
 8015b46:	b2da      	uxtb	r2, r3
 8015b48:	683b      	ldr	r3, [r7, #0]
 8015b4a:	f883 2026 	strb.w	r2, [r3, #38]	@ 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 8015b4e:	687b      	ldr	r3, [r7, #4]
 8015b50:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8015b52:	0a9b      	lsrs	r3, r3, #10
 8015b54:	b2db      	uxtb	r3, r3
 8015b56:	f003 0303 	and.w	r3, r3, #3
 8015b5a:	b2da      	uxtb	r2, r3
 8015b5c:	683b      	ldr	r3, [r7, #0]
 8015b5e:	f883 2027 	strb.w	r2, [r3, #39]	@ 0x27

  pCSD->ECC = (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 8015b62:	687b      	ldr	r3, [r7, #4]
 8015b64:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8015b66:	0a1b      	lsrs	r3, r3, #8
 8015b68:	b2db      	uxtb	r3, r3
 8015b6a:	f003 0303 	and.w	r3, r3, #3
 8015b6e:	b2da      	uxtb	r2, r3
 8015b70:	683b      	ldr	r3, [r7, #0]
 8015b72:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 8015b76:	687b      	ldr	r3, [r7, #4]
 8015b78:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8015b7a:	085b      	lsrs	r3, r3, #1
 8015b7c:	b2db      	uxtb	r3, r3
 8015b7e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8015b82:	b2da      	uxtb	r2, r3
 8015b84:	683b      	ldr	r3, [r7, #0]
 8015b86:	f883 2029 	strb.w	r2, [r3, #41]	@ 0x29

  pCSD->Reserved4 = 1;
 8015b8a:	683b      	ldr	r3, [r7, #0]
 8015b8c:	2201      	movs	r2, #1
 8015b8e:	f883 202a 	strb.w	r2, [r3, #42]	@ 0x2a

  return HAL_OK;
 8015b92:	2300      	movs	r3, #0
}
 8015b94:	4618      	mov	r0, r3
 8015b96:	370c      	adds	r7, #12
 8015b98:	46bd      	mov	sp, r7
 8015b9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015b9e:	4770      	bx	lr
 8015ba0:	1fe00fff 	.word	0x1fe00fff

08015ba4 <HAL_SD_GetCardStatus>:
  * @param  pStatus: Pointer to the HAL_SD_CardStatusTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardStatus(SD_HandleTypeDef *hsd, HAL_SD_CardStatusTypeDef *pStatus)
{
 8015ba4:	b580      	push	{r7, lr}
 8015ba6:	b094      	sub	sp, #80	@ 0x50
 8015ba8:	af00      	add	r7, sp, #0
 8015baa:	6078      	str	r0, [r7, #4]
 8015bac:	6039      	str	r1, [r7, #0]
  uint32_t sd_status[16];
  uint32_t errorstate;
  HAL_StatusTypeDef status = HAL_OK;
 8015bae:	2300      	movs	r3, #0
 8015bb0:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f

  if (hsd->State == HAL_SD_STATE_BUSY)
 8015bb4:	687b      	ldr	r3, [r7, #4]
 8015bb6:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8015bba:	b2db      	uxtb	r3, r3
 8015bbc:	2b03      	cmp	r3, #3
 8015bbe:	d101      	bne.n	8015bc4 <HAL_SD_GetCardStatus+0x20>
  {
    return HAL_ERROR;
 8015bc0:	2301      	movs	r3, #1
 8015bc2:	e0a7      	b.n	8015d14 <HAL_SD_GetCardStatus+0x170>
  }

  errorstate = SD_SendSDStatus(hsd, sd_status);
 8015bc4:	f107 0308 	add.w	r3, r7, #8
 8015bc8:	4619      	mov	r1, r3
 8015bca:	6878      	ldr	r0, [r7, #4]
 8015bcc:	f000 fb62 	bl	8016294 <SD_SendSDStatus>
 8015bd0:	64b8      	str	r0, [r7, #72]	@ 0x48
  if (errorstate != HAL_SD_ERROR_NONE)
 8015bd2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8015bd4:	2b00      	cmp	r3, #0
 8015bd6:	d011      	beq.n	8015bfc <HAL_SD_GetCardStatus+0x58>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8015bd8:	687b      	ldr	r3, [r7, #4]
 8015bda:	681b      	ldr	r3, [r3, #0]
 8015bdc:	4a4f      	ldr	r2, [pc, #316]	@ (8015d1c <HAL_SD_GetCardStatus+0x178>)
 8015bde:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->ErrorCode |= errorstate;
 8015be0:	687b      	ldr	r3, [r7, #4]
 8015be2:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8015be4:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8015be6:	431a      	orrs	r2, r3
 8015be8:	687b      	ldr	r3, [r7, #4]
 8015bea:	635a      	str	r2, [r3, #52]	@ 0x34
    hsd->State = HAL_SD_STATE_READY;
 8015bec:	687b      	ldr	r3, [r7, #4]
 8015bee:	2201      	movs	r2, #1
 8015bf0:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
    status = HAL_ERROR;
 8015bf4:	2301      	movs	r3, #1
 8015bf6:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
 8015bfa:	e070      	b.n	8015cde <HAL_SD_GetCardStatus+0x13a>
  }
  else
  {
    pStatus->DataBusWidth = (uint8_t)((sd_status[0] & 0xC0U) >> 6U);
 8015bfc:	68bb      	ldr	r3, [r7, #8]
 8015bfe:	099b      	lsrs	r3, r3, #6
 8015c00:	b2db      	uxtb	r3, r3
 8015c02:	f003 0303 	and.w	r3, r3, #3
 8015c06:	b2da      	uxtb	r2, r3
 8015c08:	683b      	ldr	r3, [r7, #0]
 8015c0a:	701a      	strb	r2, [r3, #0]

    pStatus->SecuredMode = (uint8_t)((sd_status[0] & 0x20U) >> 5U);
 8015c0c:	68bb      	ldr	r3, [r7, #8]
 8015c0e:	095b      	lsrs	r3, r3, #5
 8015c10:	b2db      	uxtb	r3, r3
 8015c12:	f003 0301 	and.w	r3, r3, #1
 8015c16:	b2da      	uxtb	r2, r3
 8015c18:	683b      	ldr	r3, [r7, #0]
 8015c1a:	705a      	strb	r2, [r3, #1]

    pStatus->CardType = (uint16_t)(((sd_status[0] & 0x00FF0000U) >> 8U) | ((sd_status[0] & 0xFF000000U) >> 24U));
 8015c1c:	68bb      	ldr	r3, [r7, #8]
 8015c1e:	0a1b      	lsrs	r3, r3, #8
 8015c20:	b29b      	uxth	r3, r3
 8015c22:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8015c26:	b29a      	uxth	r2, r3
 8015c28:	68bb      	ldr	r3, [r7, #8]
 8015c2a:	0e1b      	lsrs	r3, r3, #24
 8015c2c:	b29b      	uxth	r3, r3
 8015c2e:	4313      	orrs	r3, r2
 8015c30:	b29a      	uxth	r2, r3
 8015c32:	683b      	ldr	r3, [r7, #0]
 8015c34:	805a      	strh	r2, [r3, #2]

    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 8015c36:	68fb      	ldr	r3, [r7, #12]
 8015c38:	061a      	lsls	r2, r3, #24
 8015c3a:	68fb      	ldr	r3, [r7, #12]
 8015c3c:	021b      	lsls	r3, r3, #8
 8015c3e:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8015c42:	431a      	orrs	r2, r3
                                  ((sd_status[1] & 0xFF0000U) >> 8U) | ((sd_status[1] & 0xFF000000U) >> 24U));
 8015c44:	68fb      	ldr	r3, [r7, #12]
 8015c46:	0a1b      	lsrs	r3, r3, #8
 8015c48:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 8015c4c:	431a      	orrs	r2, r3
                                  ((sd_status[1] & 0xFF0000U) >> 8U) | ((sd_status[1] & 0xFF000000U) >> 24U));
 8015c4e:	68fb      	ldr	r3, [r7, #12]
 8015c50:	0e1b      	lsrs	r3, r3, #24
 8015c52:	431a      	orrs	r2, r3
    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 8015c54:	683b      	ldr	r3, [r7, #0]
 8015c56:	605a      	str	r2, [r3, #4]

    pStatus->SpeedClass = (uint8_t)(sd_status[2] & 0xFFU);
 8015c58:	693b      	ldr	r3, [r7, #16]
 8015c5a:	b2da      	uxtb	r2, r3
 8015c5c:	683b      	ldr	r3, [r7, #0]
 8015c5e:	721a      	strb	r2, [r3, #8]

    pStatus->PerformanceMove = (uint8_t)((sd_status[2] & 0xFF00U) >> 8U);
 8015c60:	693b      	ldr	r3, [r7, #16]
 8015c62:	0a1b      	lsrs	r3, r3, #8
 8015c64:	b2da      	uxtb	r2, r3
 8015c66:	683b      	ldr	r3, [r7, #0]
 8015c68:	725a      	strb	r2, [r3, #9]

    pStatus->AllocationUnitSize = (uint8_t)((sd_status[2] & 0xF00000U) >> 20U);
 8015c6a:	693b      	ldr	r3, [r7, #16]
 8015c6c:	0d1b      	lsrs	r3, r3, #20
 8015c6e:	b2db      	uxtb	r3, r3
 8015c70:	f003 030f 	and.w	r3, r3, #15
 8015c74:	b2da      	uxtb	r2, r3
 8015c76:	683b      	ldr	r3, [r7, #0]
 8015c78:	729a      	strb	r2, [r3, #10]

    pStatus->EraseSize = (uint16_t)(((sd_status[2] & 0xFF000000U) >> 16U) | (sd_status[3] & 0xFFU));
 8015c7a:	693b      	ldr	r3, [r7, #16]
 8015c7c:	0c1b      	lsrs	r3, r3, #16
 8015c7e:	b29b      	uxth	r3, r3
 8015c80:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8015c84:	b29a      	uxth	r2, r3
 8015c86:	697b      	ldr	r3, [r7, #20]
 8015c88:	b29b      	uxth	r3, r3
 8015c8a:	b2db      	uxtb	r3, r3
 8015c8c:	b29b      	uxth	r3, r3
 8015c8e:	4313      	orrs	r3, r2
 8015c90:	b29a      	uxth	r2, r3
 8015c92:	683b      	ldr	r3, [r7, #0]
 8015c94:	819a      	strh	r2, [r3, #12]

    pStatus->EraseTimeout = (uint8_t)((sd_status[3] & 0xFC00U) >> 10U);
 8015c96:	697b      	ldr	r3, [r7, #20]
 8015c98:	0a9b      	lsrs	r3, r3, #10
 8015c9a:	b2db      	uxtb	r3, r3
 8015c9c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8015ca0:	b2da      	uxtb	r2, r3
 8015ca2:	683b      	ldr	r3, [r7, #0]
 8015ca4:	739a      	strb	r2, [r3, #14]

    pStatus->EraseOffset = (uint8_t)((sd_status[3] & 0x0300U) >> 8U);
 8015ca6:	697b      	ldr	r3, [r7, #20]
 8015ca8:	0a1b      	lsrs	r3, r3, #8
 8015caa:	b2db      	uxtb	r3, r3
 8015cac:	f003 0303 	and.w	r3, r3, #3
 8015cb0:	b2da      	uxtb	r2, r3
 8015cb2:	683b      	ldr	r3, [r7, #0]
 8015cb4:	73da      	strb	r2, [r3, #15]

    pStatus->UhsSpeedGrade = (uint8_t)((sd_status[3] & 0x00F0U) >> 4U);
 8015cb6:	697b      	ldr	r3, [r7, #20]
 8015cb8:	091b      	lsrs	r3, r3, #4
 8015cba:	b2db      	uxtb	r3, r3
 8015cbc:	f003 030f 	and.w	r3, r3, #15
 8015cc0:	b2da      	uxtb	r2, r3
 8015cc2:	683b      	ldr	r3, [r7, #0]
 8015cc4:	741a      	strb	r2, [r3, #16]
    pStatus->UhsAllocationUnitSize = (uint8_t)(sd_status[3] & 0x000FU) ;
 8015cc6:	697b      	ldr	r3, [r7, #20]
 8015cc8:	b2db      	uxtb	r3, r3
 8015cca:	f003 030f 	and.w	r3, r3, #15
 8015cce:	b2da      	uxtb	r2, r3
 8015cd0:	683b      	ldr	r3, [r7, #0]
 8015cd2:	745a      	strb	r2, [r3, #17]
    pStatus->VideoSpeedClass = (uint8_t)((sd_status[4] & 0xFF000000U) >> 24U);
 8015cd4:	69bb      	ldr	r3, [r7, #24]
 8015cd6:	0e1b      	lsrs	r3, r3, #24
 8015cd8:	b2da      	uxtb	r2, r3
 8015cda:	683b      	ldr	r3, [r7, #0]
 8015cdc:	749a      	strb	r2, [r3, #18]
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8015cde:	687b      	ldr	r3, [r7, #4]
 8015ce0:	681b      	ldr	r3, [r3, #0]
 8015ce2:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8015ce6:	4618      	mov	r0, r3
 8015ce8:	f001 ff9e 	bl	8017c28 <SDMMC_CmdBlockLength>
 8015cec:	64b8      	str	r0, [r7, #72]	@ 0x48
  if (errorstate != HAL_SD_ERROR_NONE)
 8015cee:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8015cf0:	2b00      	cmp	r3, #0
 8015cf2:	d00d      	beq.n	8015d10 <HAL_SD_GetCardStatus+0x16c>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8015cf4:	687b      	ldr	r3, [r7, #4]
 8015cf6:	681b      	ldr	r3, [r3, #0]
 8015cf8:	4a08      	ldr	r2, [pc, #32]	@ (8015d1c <HAL_SD_GetCardStatus+0x178>)
 8015cfa:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->ErrorCode = errorstate;
 8015cfc:	687b      	ldr	r3, [r7, #4]
 8015cfe:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8015d00:	635a      	str	r2, [r3, #52]	@ 0x34
    hsd->State = HAL_SD_STATE_READY;
 8015d02:	687b      	ldr	r3, [r7, #4]
 8015d04:	2201      	movs	r2, #1
 8015d06:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
    status = HAL_ERROR;
 8015d0a:	2301      	movs	r3, #1
 8015d0c:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
  }


  return status;
 8015d10:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
}
 8015d14:	4618      	mov	r0, r3
 8015d16:	3750      	adds	r7, #80	@ 0x50
 8015d18:	46bd      	mov	sp, r7
 8015d1a:	bd80      	pop	{r7, pc}
 8015d1c:	1fe00fff 	.word	0x1fe00fff

08015d20 <HAL_SD_GetCardInfo>:
  * @param  pCardInfo: Pointer to the HAL_SD_CardInfoTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardInfo(SD_HandleTypeDef *hsd, HAL_SD_CardInfoTypeDef *pCardInfo)
{
 8015d20:	b480      	push	{r7}
 8015d22:	b083      	sub	sp, #12
 8015d24:	af00      	add	r7, sp, #0
 8015d26:	6078      	str	r0, [r7, #4]
 8015d28:	6039      	str	r1, [r7, #0]
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 8015d2a:	687b      	ldr	r3, [r7, #4]
 8015d2c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8015d2e:	683b      	ldr	r3, [r7, #0]
 8015d30:	601a      	str	r2, [r3, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 8015d32:	687b      	ldr	r3, [r7, #4]
 8015d34:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8015d36:	683b      	ldr	r3, [r7, #0]
 8015d38:	605a      	str	r2, [r3, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 8015d3a:	687b      	ldr	r3, [r7, #4]
 8015d3c:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8015d3e:	683b      	ldr	r3, [r7, #0]
 8015d40:	609a      	str	r2, [r3, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 8015d42:	687b      	ldr	r3, [r7, #4]
 8015d44:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8015d46:	683b      	ldr	r3, [r7, #0]
 8015d48:	60da      	str	r2, [r3, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 8015d4a:	687b      	ldr	r3, [r7, #4]
 8015d4c:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8015d4e:	683b      	ldr	r3, [r7, #0]
 8015d50:	611a      	str	r2, [r3, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 8015d52:	687b      	ldr	r3, [r7, #4]
 8015d54:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8015d56:	683b      	ldr	r3, [r7, #0]
 8015d58:	615a      	str	r2, [r3, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 8015d5a:	687b      	ldr	r3, [r7, #4]
 8015d5c:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8015d5e:	683b      	ldr	r3, [r7, #0]
 8015d60:	619a      	str	r2, [r3, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 8015d62:	687b      	ldr	r3, [r7, #4]
 8015d64:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8015d66:	683b      	ldr	r3, [r7, #0]
 8015d68:	61da      	str	r2, [r3, #28]

  return HAL_OK;
 8015d6a:	2300      	movs	r3, #0
}
 8015d6c:	4618      	mov	r0, r3
 8015d6e:	370c      	adds	r7, #12
 8015d70:	46bd      	mov	sp, r7
 8015d72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015d76:	4770      	bx	lr

08015d78 <HAL_SD_ConfigWideBusOperation>:
  *            @arg SDMMC_BUS_WIDE_4B: 4-bit data transfer
  *            @arg SDMMC_BUS_WIDE_1B: 1-bit data transfer
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ConfigWideBusOperation(SD_HandleTypeDef *hsd, uint32_t WideMode)
{
 8015d78:	b590      	push	{r4, r7, lr}
 8015d7a:	b08d      	sub	sp, #52	@ 0x34
 8015d7c:	af02      	add	r7, sp, #8
 8015d7e:	6078      	str	r0, [r7, #4]
 8015d80:	6039      	str	r1, [r7, #0]
  SDMMC_InitTypeDef Init;
  uint32_t errorstate;
  uint32_t sdmmc_clk;
  HAL_StatusTypeDef status = HAL_OK;
 8015d82:	2300      	movs	r3, #0
 8015d84:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

  /* Check the parameters */
  assert_param(IS_SDMMC_BUS_WIDE(WideMode));

  /* Change State */
  hsd->State = HAL_SD_STATE_BUSY;
 8015d88:	687b      	ldr	r3, [r7, #4]
 8015d8a:	2203      	movs	r2, #3
 8015d8c:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30

  if (hsd->SdCard.CardType != CARD_SECURED)
 8015d90:	687b      	ldr	r3, [r7, #4]
 8015d92:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8015d94:	2b03      	cmp	r3, #3
 8015d96:	d02e      	beq.n	8015df6 <HAL_SD_ConfigWideBusOperation+0x7e>
  {
    if (WideMode == SDMMC_BUS_WIDE_8B)
 8015d98:	683b      	ldr	r3, [r7, #0]
 8015d9a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8015d9e:	d106      	bne.n	8015dae <HAL_SD_ConfigWideBusOperation+0x36>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8015da0:	687b      	ldr	r3, [r7, #4]
 8015da2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8015da4:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8015da8:	687b      	ldr	r3, [r7, #4]
 8015daa:	635a      	str	r2, [r3, #52]	@ 0x34
 8015dac:	e029      	b.n	8015e02 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if (WideMode == SDMMC_BUS_WIDE_4B)
 8015dae:	683b      	ldr	r3, [r7, #0]
 8015db0:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8015db4:	d10a      	bne.n	8015dcc <HAL_SD_ConfigWideBusOperation+0x54>
    {
      errorstate = SD_WideBus_Enable(hsd);
 8015db6:	6878      	ldr	r0, [r7, #4]
 8015db8:	f000 fb64 	bl	8016484 <SD_WideBus_Enable>
 8015dbc:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 8015dbe:	687b      	ldr	r3, [r7, #4]
 8015dc0:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8015dc2:	6a3b      	ldr	r3, [r7, #32]
 8015dc4:	431a      	orrs	r2, r3
 8015dc6:	687b      	ldr	r3, [r7, #4]
 8015dc8:	635a      	str	r2, [r3, #52]	@ 0x34
 8015dca:	e01a      	b.n	8015e02 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if (WideMode == SDMMC_BUS_WIDE_1B)
 8015dcc:	683b      	ldr	r3, [r7, #0]
 8015dce:	2b00      	cmp	r3, #0
 8015dd0:	d10a      	bne.n	8015de8 <HAL_SD_ConfigWideBusOperation+0x70>
    {
      errorstate = SD_WideBus_Disable(hsd);
 8015dd2:	6878      	ldr	r0, [r7, #4]
 8015dd4:	f000 fba1 	bl	801651a <SD_WideBus_Disable>
 8015dd8:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 8015dda:	687b      	ldr	r3, [r7, #4]
 8015ddc:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8015dde:	6a3b      	ldr	r3, [r7, #32]
 8015de0:	431a      	orrs	r2, r3
 8015de2:	687b      	ldr	r3, [r7, #4]
 8015de4:	635a      	str	r2, [r3, #52]	@ 0x34
 8015de6:	e00c      	b.n	8015e02 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else
    {
      /* WideMode is not a valid argument*/
      hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8015de8:	687b      	ldr	r3, [r7, #4]
 8015dea:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8015dec:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 8015df0:	687b      	ldr	r3, [r7, #4]
 8015df2:	635a      	str	r2, [r3, #52]	@ 0x34
 8015df4:	e005      	b.n	8015e02 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
  }
  else
  {
    /* SD Card does not support this feature */
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8015df6:	687b      	ldr	r3, [r7, #4]
 8015df8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8015dfa:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8015dfe:	687b      	ldr	r3, [r7, #4]
 8015e00:	635a      	str	r2, [r3, #52]	@ 0x34
  }

  if (hsd->ErrorCode != HAL_SD_ERROR_NONE)
 8015e02:	687b      	ldr	r3, [r7, #4]
 8015e04:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8015e06:	2b00      	cmp	r3, #0
 8015e08:	d007      	beq.n	8015e1a <HAL_SD_ConfigWideBusOperation+0xa2>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8015e0a:	687b      	ldr	r3, [r7, #4]
 8015e0c:	681b      	ldr	r3, [r3, #0]
 8015e0e:	4a5f      	ldr	r2, [pc, #380]	@ (8015f8c <HAL_SD_ConfigWideBusOperation+0x214>)
 8015e10:	639a      	str	r2, [r3, #56]	@ 0x38
    status = HAL_ERROR;
 8015e12:	2301      	movs	r3, #1
 8015e14:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8015e18:	e096      	b.n	8015f48 <HAL_SD_ConfigWideBusOperation+0x1d0>
  }
  else
  {
    sdmmc_clk     = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SDMMC);
 8015e1a:	f44f 3080 	mov.w	r0, #65536	@ 0x10000
 8015e1e:	f04f 0100 	mov.w	r1, #0
 8015e22:	f7fd fd3d 	bl	80138a0 <HAL_RCCEx_GetPeriphCLKFreq>
 8015e26:	61f8      	str	r0, [r7, #28]
    if (sdmmc_clk != 0U)
 8015e28:	69fb      	ldr	r3, [r7, #28]
 8015e2a:	2b00      	cmp	r3, #0
 8015e2c:	f000 8083 	beq.w	8015f36 <HAL_SD_ConfigWideBusOperation+0x1be>
    {
      /* Configure the SDMMC peripheral */
      Init.ClockEdge           = hsd->Init.ClockEdge;
 8015e30:	687b      	ldr	r3, [r7, #4]
 8015e32:	685b      	ldr	r3, [r3, #4]
 8015e34:	60bb      	str	r3, [r7, #8]
      Init.ClockPowerSave      = hsd->Init.ClockPowerSave;
 8015e36:	687b      	ldr	r3, [r7, #4]
 8015e38:	689b      	ldr	r3, [r3, #8]
 8015e3a:	60fb      	str	r3, [r7, #12]
      Init.BusWide             = WideMode;
 8015e3c:	683b      	ldr	r3, [r7, #0]
 8015e3e:	613b      	str	r3, [r7, #16]
      Init.HardwareFlowControl = hsd->Init.HardwareFlowControl;
 8015e40:	687b      	ldr	r3, [r7, #4]
 8015e42:	691b      	ldr	r3, [r3, #16]
 8015e44:	617b      	str	r3, [r7, #20]

      /* Check if user Clock div < Normal speed 25Mhz, no change in Clockdiv */
      if (hsd->Init.ClockDiv >= (sdmmc_clk / (2U * SD_NORMAL_SPEED_FREQ)))
 8015e46:	687b      	ldr	r3, [r7, #4]
 8015e48:	695a      	ldr	r2, [r3, #20]
 8015e4a:	69fb      	ldr	r3, [r7, #28]
 8015e4c:	4950      	ldr	r1, [pc, #320]	@ (8015f90 <HAL_SD_ConfigWideBusOperation+0x218>)
 8015e4e:	fba1 1303 	umull	r1, r3, r1, r3
 8015e52:	0e1b      	lsrs	r3, r3, #24
 8015e54:	429a      	cmp	r2, r3
 8015e56:	d303      	bcc.n	8015e60 <HAL_SD_ConfigWideBusOperation+0xe8>
      {
        Init.ClockDiv = hsd->Init.ClockDiv;
 8015e58:	687b      	ldr	r3, [r7, #4]
 8015e5a:	695b      	ldr	r3, [r3, #20]
 8015e5c:	61bb      	str	r3, [r7, #24]
 8015e5e:	e05a      	b.n	8015f16 <HAL_SD_ConfigWideBusOperation+0x19e>
      }
      else if (hsd->SdCard.CardSpeed == CARD_ULTRA_HIGH_SPEED)
 8015e60:	687b      	ldr	r3, [r7, #4]
 8015e62:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8015e64:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8015e68:	d103      	bne.n	8015e72 <HAL_SD_ConfigWideBusOperation+0xfa>
      {
        /* UltraHigh speed SD card,user Clock div */
        Init.ClockDiv = hsd->Init.ClockDiv;
 8015e6a:	687b      	ldr	r3, [r7, #4]
 8015e6c:	695b      	ldr	r3, [r3, #20]
 8015e6e:	61bb      	str	r3, [r7, #24]
 8015e70:	e051      	b.n	8015f16 <HAL_SD_ConfigWideBusOperation+0x19e>
      }
      else if (hsd->SdCard.CardSpeed == CARD_HIGH_SPEED)
 8015e72:	687b      	ldr	r3, [r7, #4]
 8015e74:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8015e76:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8015e7a:	d126      	bne.n	8015eca <HAL_SD_ConfigWideBusOperation+0x152>
      {
        /* High speed SD card, Max Frequency = 50Mhz */
        if (hsd->Init.ClockDiv == 0U)
 8015e7c:	687b      	ldr	r3, [r7, #4]
 8015e7e:	695b      	ldr	r3, [r3, #20]
 8015e80:	2b00      	cmp	r3, #0
 8015e82:	d10e      	bne.n	8015ea2 <HAL_SD_ConfigWideBusOperation+0x12a>
        {
          if (sdmmc_clk > SD_HIGH_SPEED_FREQ)
 8015e84:	69fb      	ldr	r3, [r7, #28]
 8015e86:	4a43      	ldr	r2, [pc, #268]	@ (8015f94 <HAL_SD_ConfigWideBusOperation+0x21c>)
 8015e88:	4293      	cmp	r3, r2
 8015e8a:	d906      	bls.n	8015e9a <HAL_SD_ConfigWideBusOperation+0x122>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_HIGH_SPEED_FREQ);
 8015e8c:	69fb      	ldr	r3, [r7, #28]
 8015e8e:	4a40      	ldr	r2, [pc, #256]	@ (8015f90 <HAL_SD_ConfigWideBusOperation+0x218>)
 8015e90:	fba2 2303 	umull	r2, r3, r2, r3
 8015e94:	0e5b      	lsrs	r3, r3, #25
 8015e96:	61bb      	str	r3, [r7, #24]
 8015e98:	e03d      	b.n	8015f16 <HAL_SD_ConfigWideBusOperation+0x19e>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 8015e9a:	687b      	ldr	r3, [r7, #4]
 8015e9c:	695b      	ldr	r3, [r3, #20]
 8015e9e:	61bb      	str	r3, [r7, #24]
 8015ea0:	e039      	b.n	8015f16 <HAL_SD_ConfigWideBusOperation+0x19e>
          }
        }
        else
        {
          if ((sdmmc_clk / (2U * hsd->Init.ClockDiv)) > SD_HIGH_SPEED_FREQ)
 8015ea2:	687b      	ldr	r3, [r7, #4]
 8015ea4:	695b      	ldr	r3, [r3, #20]
 8015ea6:	005b      	lsls	r3, r3, #1
 8015ea8:	69fa      	ldr	r2, [r7, #28]
 8015eaa:	fbb2 f3f3 	udiv	r3, r2, r3
 8015eae:	4a39      	ldr	r2, [pc, #228]	@ (8015f94 <HAL_SD_ConfigWideBusOperation+0x21c>)
 8015eb0:	4293      	cmp	r3, r2
 8015eb2:	d906      	bls.n	8015ec2 <HAL_SD_ConfigWideBusOperation+0x14a>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_HIGH_SPEED_FREQ);
 8015eb4:	69fb      	ldr	r3, [r7, #28]
 8015eb6:	4a36      	ldr	r2, [pc, #216]	@ (8015f90 <HAL_SD_ConfigWideBusOperation+0x218>)
 8015eb8:	fba2 2303 	umull	r2, r3, r2, r3
 8015ebc:	0e5b      	lsrs	r3, r3, #25
 8015ebe:	61bb      	str	r3, [r7, #24]
 8015ec0:	e029      	b.n	8015f16 <HAL_SD_ConfigWideBusOperation+0x19e>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 8015ec2:	687b      	ldr	r3, [r7, #4]
 8015ec4:	695b      	ldr	r3, [r3, #20]
 8015ec6:	61bb      	str	r3, [r7, #24]
 8015ec8:	e025      	b.n	8015f16 <HAL_SD_ConfigWideBusOperation+0x19e>
        }
      }
      else
      {
        /* No High speed SD card, Max Frequency = 25Mhz */
        if (hsd->Init.ClockDiv == 0U)
 8015eca:	687b      	ldr	r3, [r7, #4]
 8015ecc:	695b      	ldr	r3, [r3, #20]
 8015ece:	2b00      	cmp	r3, #0
 8015ed0:	d10e      	bne.n	8015ef0 <HAL_SD_ConfigWideBusOperation+0x178>
        {
          if (sdmmc_clk > SD_NORMAL_SPEED_FREQ)
 8015ed2:	69fb      	ldr	r3, [r7, #28]
 8015ed4:	4a30      	ldr	r2, [pc, #192]	@ (8015f98 <HAL_SD_ConfigWideBusOperation+0x220>)
 8015ed6:	4293      	cmp	r3, r2
 8015ed8:	d906      	bls.n	8015ee8 <HAL_SD_ConfigWideBusOperation+0x170>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_NORMAL_SPEED_FREQ);
 8015eda:	69fb      	ldr	r3, [r7, #28]
 8015edc:	4a2c      	ldr	r2, [pc, #176]	@ (8015f90 <HAL_SD_ConfigWideBusOperation+0x218>)
 8015ede:	fba2 2303 	umull	r2, r3, r2, r3
 8015ee2:	0e1b      	lsrs	r3, r3, #24
 8015ee4:	61bb      	str	r3, [r7, #24]
 8015ee6:	e016      	b.n	8015f16 <HAL_SD_ConfigWideBusOperation+0x19e>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 8015ee8:	687b      	ldr	r3, [r7, #4]
 8015eea:	695b      	ldr	r3, [r3, #20]
 8015eec:	61bb      	str	r3, [r7, #24]
 8015eee:	e012      	b.n	8015f16 <HAL_SD_ConfigWideBusOperation+0x19e>
          }
        }
        else
        {
          if ((sdmmc_clk / (2U * hsd->Init.ClockDiv)) > SD_NORMAL_SPEED_FREQ)
 8015ef0:	687b      	ldr	r3, [r7, #4]
 8015ef2:	695b      	ldr	r3, [r3, #20]
 8015ef4:	005b      	lsls	r3, r3, #1
 8015ef6:	69fa      	ldr	r2, [r7, #28]
 8015ef8:	fbb2 f3f3 	udiv	r3, r2, r3
 8015efc:	4a26      	ldr	r2, [pc, #152]	@ (8015f98 <HAL_SD_ConfigWideBusOperation+0x220>)
 8015efe:	4293      	cmp	r3, r2
 8015f00:	d906      	bls.n	8015f10 <HAL_SD_ConfigWideBusOperation+0x198>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_NORMAL_SPEED_FREQ);
 8015f02:	69fb      	ldr	r3, [r7, #28]
 8015f04:	4a22      	ldr	r2, [pc, #136]	@ (8015f90 <HAL_SD_ConfigWideBusOperation+0x218>)
 8015f06:	fba2 2303 	umull	r2, r3, r2, r3
 8015f0a:	0e1b      	lsrs	r3, r3, #24
 8015f0c:	61bb      	str	r3, [r7, #24]
 8015f0e:	e002      	b.n	8015f16 <HAL_SD_ConfigWideBusOperation+0x19e>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 8015f10:	687b      	ldr	r3, [r7, #4]
 8015f12:	695b      	ldr	r3, [r3, #20]
 8015f14:	61bb      	str	r3, [r7, #24]

#if (USE_SD_TRANSCEIVER != 0U)
      Init.TranceiverPresent = hsd->Init.TranceiverPresent;
#endif /* USE_SD_TRANSCEIVER */

      (void)SDMMC_Init(hsd->Instance, Init);
 8015f16:	687b      	ldr	r3, [r7, #4]
 8015f18:	681c      	ldr	r4, [r3, #0]
 8015f1a:	466a      	mov	r2, sp
 8015f1c:	f107 0314 	add.w	r3, r7, #20
 8015f20:	e893 0003 	ldmia.w	r3, {r0, r1}
 8015f24:	e882 0003 	stmia.w	r2, {r0, r1}
 8015f28:	f107 0308 	add.w	r3, r7, #8
 8015f2c:	cb0e      	ldmia	r3, {r1, r2, r3}
 8015f2e:	4620      	mov	r0, r4
 8015f30:	f001 fd9c 	bl	8017a6c <SDMMC_Init>
 8015f34:	e008      	b.n	8015f48 <HAL_SD_ConfigWideBusOperation+0x1d0>
    }
    else
    {
      hsd->ErrorCode |= SDMMC_ERROR_INVALID_PARAMETER;
 8015f36:	687b      	ldr	r3, [r7, #4]
 8015f38:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8015f3a:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 8015f3e:	687b      	ldr	r3, [r7, #4]
 8015f40:	635a      	str	r2, [r3, #52]	@ 0x34
      status = HAL_ERROR;
 8015f42:	2301      	movs	r3, #1
 8015f44:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    }
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8015f48:	687b      	ldr	r3, [r7, #4]
 8015f4a:	681b      	ldr	r3, [r3, #0]
 8015f4c:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8015f50:	4618      	mov	r0, r3
 8015f52:	f001 fe69 	bl	8017c28 <SDMMC_CmdBlockLength>
 8015f56:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 8015f58:	6a3b      	ldr	r3, [r7, #32]
 8015f5a:	2b00      	cmp	r3, #0
 8015f5c:	d00c      	beq.n	8015f78 <HAL_SD_ConfigWideBusOperation+0x200>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8015f5e:	687b      	ldr	r3, [r7, #4]
 8015f60:	681b      	ldr	r3, [r3, #0]
 8015f62:	4a0a      	ldr	r2, [pc, #40]	@ (8015f8c <HAL_SD_ConfigWideBusOperation+0x214>)
 8015f64:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->ErrorCode |= errorstate;
 8015f66:	687b      	ldr	r3, [r7, #4]
 8015f68:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8015f6a:	6a3b      	ldr	r3, [r7, #32]
 8015f6c:	431a      	orrs	r2, r3
 8015f6e:	687b      	ldr	r3, [r7, #4]
 8015f70:	635a      	str	r2, [r3, #52]	@ 0x34
    status = HAL_ERROR;
 8015f72:	2301      	movs	r3, #1
 8015f74:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Change State */
  hsd->State = HAL_SD_STATE_READY;
 8015f78:	687b      	ldr	r3, [r7, #4]
 8015f7a:	2201      	movs	r2, #1
 8015f7c:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30

  return status;
 8015f80:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 8015f84:	4618      	mov	r0, r3
 8015f86:	372c      	adds	r7, #44	@ 0x2c
 8015f88:	46bd      	mov	sp, r7
 8015f8a:	bd90      	pop	{r4, r7, pc}
 8015f8c:	1fe00fff 	.word	0x1fe00fff
 8015f90:	55e63b89 	.word	0x55e63b89
 8015f94:	02faf080 	.word	0x02faf080
 8015f98:	017d7840 	.word	0x017d7840

08015f9c <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd: pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 8015f9c:	b580      	push	{r7, lr}
 8015f9e:	b086      	sub	sp, #24
 8015fa0:	af00      	add	r7, sp, #0
 8015fa2:	6078      	str	r0, [r7, #4]
  uint32_t cardstate;
  uint32_t errorstate;
  uint32_t resp1 = 0;
 8015fa4:	2300      	movs	r3, #0
 8015fa6:	60fb      	str	r3, [r7, #12]

  errorstate = SD_SendStatus(hsd, &resp1);
 8015fa8:	f107 030c 	add.w	r3, r7, #12
 8015fac:	4619      	mov	r1, r3
 8015fae:	6878      	ldr	r0, [r7, #4]
 8015fb0:	f000 fa40 	bl	8016434 <SD_SendStatus>
 8015fb4:	6178      	str	r0, [r7, #20]
  if (errorstate != HAL_SD_ERROR_NONE)
 8015fb6:	697b      	ldr	r3, [r7, #20]
 8015fb8:	2b00      	cmp	r3, #0
 8015fba:	d005      	beq.n	8015fc8 <HAL_SD_GetCardState+0x2c>
  {
    hsd->ErrorCode |= errorstate;
 8015fbc:	687b      	ldr	r3, [r7, #4]
 8015fbe:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8015fc0:	697b      	ldr	r3, [r7, #20]
 8015fc2:	431a      	orrs	r2, r3
 8015fc4:	687b      	ldr	r3, [r7, #4]
 8015fc6:	635a      	str	r2, [r3, #52]	@ 0x34
  }

  cardstate = ((resp1 >> 9U) & 0x0FU);
 8015fc8:	68fb      	ldr	r3, [r7, #12]
 8015fca:	0a5b      	lsrs	r3, r3, #9
 8015fcc:	f003 030f 	and.w	r3, r3, #15
 8015fd0:	613b      	str	r3, [r7, #16]

  return (HAL_SD_CardStateTypeDef)cardstate;
 8015fd2:	693b      	ldr	r3, [r7, #16]
}
 8015fd4:	4618      	mov	r0, r3
 8015fd6:	3718      	adds	r7, #24
 8015fd8:	46bd      	mov	sp, r7
 8015fda:	bd80      	pop	{r7, pc}

08015fdc <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd: Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 8015fdc:	b580      	push	{r7, lr}
 8015fde:	b090      	sub	sp, #64	@ 0x40
 8015fe0:	af00      	add	r7, sp, #0
 8015fe2:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 0U;
 8015fe4:	2300      	movs	r3, #0
 8015fe6:	817b      	strh	r3, [r7, #10]
  uint32_t tickstart = HAL_GetTick();
 8015fe8:	f7fa fcb6 	bl	8010958 <HAL_GetTick>
 8015fec:	63f8      	str	r0, [r7, #60]	@ 0x3c

  /* Check the power State */
  if (SDMMC_GetPowerState(hsd->Instance) == 0U)
 8015fee:	687b      	ldr	r3, [r7, #4]
 8015ff0:	681b      	ldr	r3, [r3, #0]
 8015ff2:	4618      	mov	r0, r3
 8015ff4:	f001 fd93 	bl	8017b1e <SDMMC_GetPowerState>
 8015ff8:	4603      	mov	r3, r0
 8015ffa:	2b00      	cmp	r3, #0
 8015ffc:	d102      	bne.n	8016004 <SD_InitCard+0x28>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8015ffe:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
 8016002:	e0b5      	b.n	8016170 <SD_InitCard+0x194>
  }

  if (hsd->SdCard.CardType != CARD_SECURED)
 8016004:	687b      	ldr	r3, [r7, #4]
 8016006:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8016008:	2b03      	cmp	r3, #3
 801600a:	d02e      	beq.n	801606a <SD_InitCard+0x8e>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 801600c:	687b      	ldr	r3, [r7, #4]
 801600e:	681b      	ldr	r3, [r3, #0]
 8016010:	4618      	mov	r0, r3
 8016012:	f001 ffde 	bl	8017fd2 <SDMMC_CmdSendCID>
 8016016:	63b8      	str	r0, [r7, #56]	@ 0x38
    if (errorstate != HAL_SD_ERROR_NONE)
 8016018:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801601a:	2b00      	cmp	r3, #0
 801601c:	d001      	beq.n	8016022 <SD_InitCard+0x46>
    {
      return errorstate;
 801601e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8016020:	e0a6      	b.n	8016170 <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8016022:	687b      	ldr	r3, [r7, #4]
 8016024:	681b      	ldr	r3, [r3, #0]
 8016026:	2100      	movs	r1, #0
 8016028:	4618      	mov	r0, r3
 801602a:	f001 fdbe 	bl	8017baa <SDMMC_GetResponse>
 801602e:	4602      	mov	r2, r0
 8016030:	687b      	ldr	r3, [r7, #4]
 8016032:	66da      	str	r2, [r3, #108]	@ 0x6c
      hsd->CID[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 8016034:	687b      	ldr	r3, [r7, #4]
 8016036:	681b      	ldr	r3, [r3, #0]
 8016038:	2104      	movs	r1, #4
 801603a:	4618      	mov	r0, r3
 801603c:	f001 fdb5 	bl	8017baa <SDMMC_GetResponse>
 8016040:	4602      	mov	r2, r0
 8016042:	687b      	ldr	r3, [r7, #4]
 8016044:	671a      	str	r2, [r3, #112]	@ 0x70
      hsd->CID[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 8016046:	687b      	ldr	r3, [r7, #4]
 8016048:	681b      	ldr	r3, [r3, #0]
 801604a:	2108      	movs	r1, #8
 801604c:	4618      	mov	r0, r3
 801604e:	f001 fdac 	bl	8017baa <SDMMC_GetResponse>
 8016052:	4602      	mov	r2, r0
 8016054:	687b      	ldr	r3, [r7, #4]
 8016056:	675a      	str	r2, [r3, #116]	@ 0x74
      hsd->CID[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 8016058:	687b      	ldr	r3, [r7, #4]
 801605a:	681b      	ldr	r3, [r3, #0]
 801605c:	210c      	movs	r1, #12
 801605e:	4618      	mov	r0, r3
 8016060:	f001 fda3 	bl	8017baa <SDMMC_GetResponse>
 8016064:	4602      	mov	r2, r0
 8016066:	687b      	ldr	r3, [r7, #4]
 8016068:	679a      	str	r2, [r3, #120]	@ 0x78
    }
  }

  if (hsd->SdCard.CardType != CARD_SECURED)
 801606a:	687b      	ldr	r3, [r7, #4]
 801606c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801606e:	2b03      	cmp	r3, #3
 8016070:	d01d      	beq.n	80160ae <SD_InitCard+0xd2>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    while (sd_rca == 0U)
 8016072:	e019      	b.n	80160a8 <SD_InitCard+0xcc>
    {
      errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 8016074:	687b      	ldr	r3, [r7, #4]
 8016076:	681b      	ldr	r3, [r3, #0]
 8016078:	f107 020a 	add.w	r2, r7, #10
 801607c:	4611      	mov	r1, r2
 801607e:	4618      	mov	r0, r3
 8016080:	f001 ffe6 	bl	8018050 <SDMMC_CmdSetRelAdd>
 8016084:	63b8      	str	r0, [r7, #56]	@ 0x38
      if (errorstate != HAL_SD_ERROR_NONE)
 8016086:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8016088:	2b00      	cmp	r3, #0
 801608a:	d001      	beq.n	8016090 <SD_InitCard+0xb4>
      {
        return errorstate;
 801608c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801608e:	e06f      	b.n	8016170 <SD_InitCard+0x194>
      }
      if ((HAL_GetTick() - tickstart) >=  SDMMC_CMDTIMEOUT)
 8016090:	f7fa fc62 	bl	8010958 <HAL_GetTick>
 8016094:	4602      	mov	r2, r0
 8016096:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8016098:	1ad3      	subs	r3, r2, r3
 801609a:	f241 3287 	movw	r2, #4999	@ 0x1387
 801609e:	4293      	cmp	r3, r2
 80160a0:	d902      	bls.n	80160a8 <SD_InitCard+0xcc>
      {
        return HAL_SD_ERROR_TIMEOUT;
 80160a2:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 80160a6:	e063      	b.n	8016170 <SD_InitCard+0x194>
    while (sd_rca == 0U)
 80160a8:	897b      	ldrh	r3, [r7, #10]
 80160aa:	2b00      	cmp	r3, #0
 80160ac:	d0e2      	beq.n	8016074 <SD_InitCard+0x98>
      }
    }
  }
  if (hsd->SdCard.CardType != CARD_SECURED)
 80160ae:	687b      	ldr	r3, [r7, #4]
 80160b0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80160b2:	2b03      	cmp	r3, #3
 80160b4:	d036      	beq.n	8016124 <SD_InitCard+0x148>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 80160b6:	897b      	ldrh	r3, [r7, #10]
 80160b8:	461a      	mov	r2, r3
 80160ba:	687b      	ldr	r3, [r7, #4]
 80160bc:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 80160be:	687b      	ldr	r3, [r7, #4]
 80160c0:	681a      	ldr	r2, [r3, #0]
 80160c2:	687b      	ldr	r3, [r7, #4]
 80160c4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80160c6:	041b      	lsls	r3, r3, #16
 80160c8:	4619      	mov	r1, r3
 80160ca:	4610      	mov	r0, r2
 80160cc:	f001 ffa0 	bl	8018010 <SDMMC_CmdSendCSD>
 80160d0:	63b8      	str	r0, [r7, #56]	@ 0x38
    if (errorstate != HAL_SD_ERROR_NONE)
 80160d2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80160d4:	2b00      	cmp	r3, #0
 80160d6:	d001      	beq.n	80160dc <SD_InitCard+0x100>
    {
      return errorstate;
 80160d8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80160da:	e049      	b.n	8016170 <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 80160dc:	687b      	ldr	r3, [r7, #4]
 80160de:	681b      	ldr	r3, [r3, #0]
 80160e0:	2100      	movs	r1, #0
 80160e2:	4618      	mov	r0, r3
 80160e4:	f001 fd61 	bl	8017baa <SDMMC_GetResponse>
 80160e8:	4602      	mov	r2, r0
 80160ea:	687b      	ldr	r3, [r7, #4]
 80160ec:	65da      	str	r2, [r3, #92]	@ 0x5c
      hsd->CSD[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 80160ee:	687b      	ldr	r3, [r7, #4]
 80160f0:	681b      	ldr	r3, [r3, #0]
 80160f2:	2104      	movs	r1, #4
 80160f4:	4618      	mov	r0, r3
 80160f6:	f001 fd58 	bl	8017baa <SDMMC_GetResponse>
 80160fa:	4602      	mov	r2, r0
 80160fc:	687b      	ldr	r3, [r7, #4]
 80160fe:	661a      	str	r2, [r3, #96]	@ 0x60
      hsd->CSD[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 8016100:	687b      	ldr	r3, [r7, #4]
 8016102:	681b      	ldr	r3, [r3, #0]
 8016104:	2108      	movs	r1, #8
 8016106:	4618      	mov	r0, r3
 8016108:	f001 fd4f 	bl	8017baa <SDMMC_GetResponse>
 801610c:	4602      	mov	r2, r0
 801610e:	687b      	ldr	r3, [r7, #4]
 8016110:	665a      	str	r2, [r3, #100]	@ 0x64
      hsd->CSD[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 8016112:	687b      	ldr	r3, [r7, #4]
 8016114:	681b      	ldr	r3, [r3, #0]
 8016116:	210c      	movs	r1, #12
 8016118:	4618      	mov	r0, r3
 801611a:	f001 fd46 	bl	8017baa <SDMMC_GetResponse>
 801611e:	4602      	mov	r2, r0
 8016120:	687b      	ldr	r3, [r7, #4]
 8016122:	669a      	str	r2, [r3, #104]	@ 0x68
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2) >> 20U);
 8016124:	687b      	ldr	r3, [r7, #4]
 8016126:	681b      	ldr	r3, [r3, #0]
 8016128:	2104      	movs	r1, #4
 801612a:	4618      	mov	r0, r3
 801612c:	f001 fd3d 	bl	8017baa <SDMMC_GetResponse>
 8016130:	4603      	mov	r3, r0
 8016132:	0d1a      	lsrs	r2, r3, #20
 8016134:	687b      	ldr	r3, [r7, #4]
 8016136:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 8016138:	f107 030c 	add.w	r3, r7, #12
 801613c:	4619      	mov	r1, r3
 801613e:	6878      	ldr	r0, [r7, #4]
 8016140:	f7ff fb8c 	bl	801585c <HAL_SD_GetCardCSD>
 8016144:	4603      	mov	r3, r0
 8016146:	2b00      	cmp	r3, #0
 8016148:	d002      	beq.n	8016150 <SD_InitCard+0x174>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 801614a:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 801614e:	e00f      	b.n	8016170 <SD_InitCard+0x194>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 8016150:	687b      	ldr	r3, [r7, #4]
 8016152:	681a      	ldr	r2, [r3, #0]
 8016154:	687b      	ldr	r3, [r7, #4]
 8016156:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8016158:	041b      	lsls	r3, r3, #16
 801615a:	4619      	mov	r1, r3
 801615c:	4610      	mov	r0, r2
 801615e:	f001 fe4f 	bl	8017e00 <SDMMC_CmdSelDesel>
 8016162:	63b8      	str	r0, [r7, #56]	@ 0x38
  if (errorstate != HAL_SD_ERROR_NONE)
 8016164:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8016166:	2b00      	cmp	r3, #0
 8016168:	d001      	beq.n	801616e <SD_InitCard+0x192>
  {
    return errorstate;
 801616a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801616c:	e000      	b.n	8016170 <SD_InitCard+0x194>
  }

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 801616e:	2300      	movs	r3, #0
}
 8016170:	4618      	mov	r0, r3
 8016172:	3740      	adds	r7, #64	@ 0x40
 8016174:	46bd      	mov	sp, r7
 8016176:	bd80      	pop	{r7, pc}

08016178 <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 8016178:	b580      	push	{r7, lr}
 801617a:	b086      	sub	sp, #24
 801617c:	af00      	add	r7, sp, #0
 801617e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8016180:	2300      	movs	r3, #0
 8016182:	60bb      	str	r3, [r7, #8]
  uint32_t response = 0U;
 8016184:	2300      	movs	r3, #0
 8016186:	617b      	str	r3, [r7, #20]
  uint32_t validvoltage = 0U;
 8016188:	2300      	movs	r3, #0
 801618a:	613b      	str	r3, [r7, #16]
#if (USE_SD_TRANSCEIVER != 0U)
  uint32_t tickstart = HAL_GetTick();
#endif /* USE_SD_TRANSCEIVER  */

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 801618c:	687b      	ldr	r3, [r7, #4]
 801618e:	681b      	ldr	r3, [r3, #0]
 8016190:	4618      	mov	r0, r3
 8016192:	f001 fe58 	bl	8017e46 <SDMMC_CmdGoIdleState>
 8016196:	60f8      	str	r0, [r7, #12]
  if (errorstate != HAL_SD_ERROR_NONE)
 8016198:	68fb      	ldr	r3, [r7, #12]
 801619a:	2b00      	cmp	r3, #0
 801619c:	d001      	beq.n	80161a2 <SD_PowerON+0x2a>
  {
    return errorstate;
 801619e:	68fb      	ldr	r3, [r7, #12]
 80161a0:	e072      	b.n	8016288 <SD_PowerON+0x110>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 80161a2:	687b      	ldr	r3, [r7, #4]
 80161a4:	681b      	ldr	r3, [r3, #0]
 80161a6:	4618      	mov	r0, r3
 80161a8:	f001 fe6b 	bl	8017e82 <SDMMC_CmdOperCond>
 80161ac:	60f8      	str	r0, [r7, #12]
  if (errorstate == SDMMC_ERROR_TIMEOUT) /* No response to CMD8 */
 80161ae:	68fb      	ldr	r3, [r7, #12]
 80161b0:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80161b4:	d10d      	bne.n	80161d2 <SD_PowerON+0x5a>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 80161b6:	687b      	ldr	r3, [r7, #4]
 80161b8:	2200      	movs	r2, #0
 80161ba:	63da      	str	r2, [r3, #60]	@ 0x3c
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 80161bc:	687b      	ldr	r3, [r7, #4]
 80161be:	681b      	ldr	r3, [r3, #0]
 80161c0:	4618      	mov	r0, r3
 80161c2:	f001 fe40 	bl	8017e46 <SDMMC_CmdGoIdleState>
 80161c6:	60f8      	str	r0, [r7, #12]
    if (errorstate != HAL_SD_ERROR_NONE)
 80161c8:	68fb      	ldr	r3, [r7, #12]
 80161ca:	2b00      	cmp	r3, #0
 80161cc:	d004      	beq.n	80161d8 <SD_PowerON+0x60>
    {
      return errorstate;
 80161ce:	68fb      	ldr	r3, [r7, #12]
 80161d0:	e05a      	b.n	8016288 <SD_PowerON+0x110>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 80161d2:	687b      	ldr	r3, [r7, #4]
 80161d4:	2201      	movs	r2, #1
 80161d6:	63da      	str	r2, [r3, #60]	@ 0x3c
  }

  if (hsd->SdCard.CardVersion == CARD_V2_X)
 80161d8:	687b      	ldr	r3, [r7, #4]
 80161da:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80161dc:	2b01      	cmp	r3, #1
 80161de:	d137      	bne.n	8016250 <SD_PowerON+0xd8>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 80161e0:	687b      	ldr	r3, [r7, #4]
 80161e2:	681b      	ldr	r3, [r3, #0]
 80161e4:	2100      	movs	r1, #0
 80161e6:	4618      	mov	r0, r3
 80161e8:	f001 fe6b 	bl	8017ec2 <SDMMC_CmdAppCommand>
 80161ec:	60f8      	str	r0, [r7, #12]
    if (errorstate != HAL_SD_ERROR_NONE)
 80161ee:	68fb      	ldr	r3, [r7, #12]
 80161f0:	2b00      	cmp	r3, #0
 80161f2:	d02d      	beq.n	8016250 <SD_PowerON+0xd8>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80161f4:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 80161f8:	e046      	b.n	8016288 <SD_PowerON+0x110>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while ((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 80161fa:	687b      	ldr	r3, [r7, #4]
 80161fc:	681b      	ldr	r3, [r3, #0]
 80161fe:	2100      	movs	r1, #0
 8016200:	4618      	mov	r0, r3
 8016202:	f001 fe5e 	bl	8017ec2 <SDMMC_CmdAppCommand>
 8016206:	60f8      	str	r0, [r7, #12]
    if (errorstate != HAL_SD_ERROR_NONE)
 8016208:	68fb      	ldr	r3, [r7, #12]
 801620a:	2b00      	cmp	r3, #0
 801620c:	d001      	beq.n	8016212 <SD_PowerON+0x9a>
    {
      return errorstate;
 801620e:	68fb      	ldr	r3, [r7, #12]
 8016210:	e03a      	b.n	8016288 <SD_PowerON+0x110>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY |
 8016212:	687b      	ldr	r3, [r7, #4]
 8016214:	681b      	ldr	r3, [r3, #0]
 8016216:	491e      	ldr	r1, [pc, #120]	@ (8016290 <SD_PowerON+0x118>)
 8016218:	4618      	mov	r0, r3
 801621a:	f001 fe75 	bl	8017f08 <SDMMC_CmdAppOperCommand>
 801621e:	60f8      	str	r0, [r7, #12]
                                         SD_SWITCH_1_8V_CAPACITY);
    if (errorstate != HAL_SD_ERROR_NONE)
 8016220:	68fb      	ldr	r3, [r7, #12]
 8016222:	2b00      	cmp	r3, #0
 8016224:	d002      	beq.n	801622c <SD_PowerON+0xb4>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8016226:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 801622a:	e02d      	b.n	8016288 <SD_PowerON+0x110>
    }

    /* Get command response */
    response = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 801622c:	687b      	ldr	r3, [r7, #4]
 801622e:	681b      	ldr	r3, [r3, #0]
 8016230:	2100      	movs	r1, #0
 8016232:	4618      	mov	r0, r3
 8016234:	f001 fcb9 	bl	8017baa <SDMMC_GetResponse>
 8016238:	6178      	str	r0, [r7, #20]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 801623a:	697b      	ldr	r3, [r7, #20]
 801623c:	0fdb      	lsrs	r3, r3, #31
 801623e:	2b01      	cmp	r3, #1
 8016240:	d101      	bne.n	8016246 <SD_PowerON+0xce>
 8016242:	2301      	movs	r3, #1
 8016244:	e000      	b.n	8016248 <SD_PowerON+0xd0>
 8016246:	2300      	movs	r3, #0
 8016248:	613b      	str	r3, [r7, #16]

    count++;
 801624a:	68bb      	ldr	r3, [r7, #8]
 801624c:	3301      	adds	r3, #1
 801624e:	60bb      	str	r3, [r7, #8]
  while ((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 8016250:	68bb      	ldr	r3, [r7, #8]
 8016252:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 8016256:	4293      	cmp	r3, r2
 8016258:	d802      	bhi.n	8016260 <SD_PowerON+0xe8>
 801625a:	693b      	ldr	r3, [r7, #16]
 801625c:	2b00      	cmp	r3, #0
 801625e:	d0cc      	beq.n	80161fa <SD_PowerON+0x82>
  }

  if (count >= SDMMC_MAX_VOLT_TRIAL)
 8016260:	68bb      	ldr	r3, [r7, #8]
 8016262:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 8016266:	4293      	cmp	r3, r2
 8016268:	d902      	bls.n	8016270 <SD_PowerON+0xf8>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 801626a:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 801626e:	e00b      	b.n	8016288 <SD_PowerON+0x110>
  }

  /* Set default card type */
  hsd->SdCard.CardType = CARD_SDSC;
 8016270:	687b      	ldr	r3, [r7, #4]
 8016272:	2200      	movs	r2, #0
 8016274:	639a      	str	r2, [r3, #56]	@ 0x38

  if ((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY)
 8016276:	697b      	ldr	r3, [r7, #20]
 8016278:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 801627c:	2b00      	cmp	r3, #0
 801627e:	d002      	beq.n	8016286 <SD_PowerON+0x10e>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 8016280:	687b      	ldr	r3, [r7, #4]
 8016282:	2201      	movs	r2, #1
 8016284:	639a      	str	r2, [r3, #56]	@ 0x38
      }
    }
#endif /* USE_SD_TRANSCEIVER  */
  }

  return HAL_SD_ERROR_NONE;
 8016286:	2300      	movs	r3, #0
}
 8016288:	4618      	mov	r0, r3
 801628a:	3718      	adds	r7, #24
 801628c:	46bd      	mov	sp, r7
 801628e:	bd80      	pop	{r7, pc}
 8016290:	c1100000 	.word	0xc1100000

08016294 <SD_SendSDStatus>:
  * @param  pSDstatus: Pointer to the buffer that will contain the SD card status
  *         SD Status register)
  * @retval error state
  */
static uint32_t SD_SendSDStatus(SD_HandleTypeDef *hsd, uint32_t *pSDstatus)
{
 8016294:	b580      	push	{r7, lr}
 8016296:	b08c      	sub	sp, #48	@ 0x30
 8016298:	af00      	add	r7, sp, #0
 801629a:	6078      	str	r0, [r7, #4]
 801629c:	6039      	str	r1, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 801629e:	f7fa fb5b 	bl	8010958 <HAL_GetTick>
 80162a2:	6278      	str	r0, [r7, #36]	@ 0x24
  uint32_t count;
  uint32_t *pData = pSDstatus;
 80162a4:	683b      	ldr	r3, [r7, #0]
 80162a6:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Check SD response */
  if ((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 80162a8:	687b      	ldr	r3, [r7, #4]
 80162aa:	681b      	ldr	r3, [r3, #0]
 80162ac:	2100      	movs	r1, #0
 80162ae:	4618      	mov	r0, r3
 80162b0:	f001 fc7b 	bl	8017baa <SDMMC_GetResponse>
 80162b4:	4603      	mov	r3, r0
 80162b6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80162ba:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80162be:	d102      	bne.n	80162c6 <SD_SendSDStatus+0x32>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 80162c0:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 80162c4:	e0b0      	b.n	8016428 <SD_SendSDStatus+0x194>
  }

  /* Set block size for card if it is not equal to current block size for card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 64U);
 80162c6:	687b      	ldr	r3, [r7, #4]
 80162c8:	681b      	ldr	r3, [r3, #0]
 80162ca:	2140      	movs	r1, #64	@ 0x40
 80162cc:	4618      	mov	r0, r3
 80162ce:	f001 fcab 	bl	8017c28 <SDMMC_CmdBlockLength>
 80162d2:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 80162d4:	6a3b      	ldr	r3, [r7, #32]
 80162d6:	2b00      	cmp	r3, #0
 80162d8:	d005      	beq.n	80162e6 <SD_SendSDStatus+0x52>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 80162da:	687b      	ldr	r3, [r7, #4]
 80162dc:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80162de:	687b      	ldr	r3, [r7, #4]
 80162e0:	635a      	str	r2, [r3, #52]	@ 0x34
    return errorstate;
 80162e2:	6a3b      	ldr	r3, [r7, #32]
 80162e4:	e0a0      	b.n	8016428 <SD_SendSDStatus+0x194>
  }

  /* Send CMD55 */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 80162e6:	687b      	ldr	r3, [r7, #4]
 80162e8:	681a      	ldr	r2, [r3, #0]
 80162ea:	687b      	ldr	r3, [r7, #4]
 80162ec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80162ee:	041b      	lsls	r3, r3, #16
 80162f0:	4619      	mov	r1, r3
 80162f2:	4610      	mov	r0, r2
 80162f4:	f001 fde5 	bl	8017ec2 <SDMMC_CmdAppCommand>
 80162f8:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 80162fa:	6a3b      	ldr	r3, [r7, #32]
 80162fc:	2b00      	cmp	r3, #0
 80162fe:	d005      	beq.n	801630c <SD_SendSDStatus+0x78>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 8016300:	687b      	ldr	r3, [r7, #4]
 8016302:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8016304:	687b      	ldr	r3, [r7, #4]
 8016306:	635a      	str	r2, [r3, #52]	@ 0x34
    return errorstate;
 8016308:	6a3b      	ldr	r3, [r7, #32]
 801630a:	e08d      	b.n	8016428 <SD_SendSDStatus+0x194>
  }

  /* Configure the SD DPSM (Data Path State Machine) */
  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 801630c:	f04f 33ff 	mov.w	r3, #4294967295
 8016310:	60bb      	str	r3, [r7, #8]
  config.DataLength    = 64U;
 8016312:	2340      	movs	r3, #64	@ 0x40
 8016314:	60fb      	str	r3, [r7, #12]
  config.DataBlockSize = SDMMC_DATABLOCK_SIZE_64B;
 8016316:	2360      	movs	r3, #96	@ 0x60
 8016318:	613b      	str	r3, [r7, #16]
  config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 801631a:	2302      	movs	r3, #2
 801631c:	617b      	str	r3, [r7, #20]
  config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 801631e:	2300      	movs	r3, #0
 8016320:	61bb      	str	r3, [r7, #24]
  config.DPSM          = SDMMC_DPSM_ENABLE;
 8016322:	2301      	movs	r3, #1
 8016324:	61fb      	str	r3, [r7, #28]
  (void)SDMMC_ConfigData(hsd->Instance, &config);
 8016326:	687b      	ldr	r3, [r7, #4]
 8016328:	681b      	ldr	r3, [r3, #0]
 801632a:	f107 0208 	add.w	r2, r7, #8
 801632e:	4611      	mov	r1, r2
 8016330:	4618      	mov	r0, r3
 8016332:	f001 fc4d 	bl	8017bd0 <SDMMC_ConfigData>

  /* Send ACMD13 (SD_APP_STAUS)  with argument as card's RCA */
  errorstate = SDMMC_CmdStatusRegister(hsd->Instance);
 8016336:	687b      	ldr	r3, [r7, #4]
 8016338:	681b      	ldr	r3, [r3, #0]
 801633a:	4618      	mov	r0, r3
 801633c:	f001 fecd 	bl	80180da <SDMMC_CmdStatusRegister>
 8016340:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 8016342:	6a3b      	ldr	r3, [r7, #32]
 8016344:	2b00      	cmp	r3, #0
 8016346:	d02b      	beq.n	80163a0 <SD_SendSDStatus+0x10c>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 8016348:	687b      	ldr	r3, [r7, #4]
 801634a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 801634c:	687b      	ldr	r3, [r7, #4]
 801634e:	635a      	str	r2, [r3, #52]	@ 0x34
    return errorstate;
 8016350:	6a3b      	ldr	r3, [r7, #32]
 8016352:	e069      	b.n	8016428 <SD_SendSDStatus+0x194>
  }

  /* Get status data */
  while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
  {
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF))
 8016354:	687b      	ldr	r3, [r7, #4]
 8016356:	681b      	ldr	r3, [r3, #0]
 8016358:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 801635a:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 801635e:	2b00      	cmp	r3, #0
 8016360:	d013      	beq.n	801638a <SD_SendSDStatus+0xf6>
    {
      for (count = 0U; count < 8U; count++)
 8016362:	2300      	movs	r3, #0
 8016364:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8016366:	e00d      	b.n	8016384 <SD_SendSDStatus+0xf0>
      {
        *pData = SDMMC_ReadFIFO(hsd->Instance);
 8016368:	687b      	ldr	r3, [r7, #4]
 801636a:	681b      	ldr	r3, [r3, #0]
 801636c:	4618      	mov	r0, r3
 801636e:	f001 fba7 	bl	8017ac0 <SDMMC_ReadFIFO>
 8016372:	4602      	mov	r2, r0
 8016374:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8016376:	601a      	str	r2, [r3, #0]
        pData++;
 8016378:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801637a:	3304      	adds	r3, #4
 801637c:	62bb      	str	r3, [r7, #40]	@ 0x28
      for (count = 0U; count < 8U; count++)
 801637e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8016380:	3301      	adds	r3, #1
 8016382:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8016384:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8016386:	2b07      	cmp	r3, #7
 8016388:	d9ee      	bls.n	8016368 <SD_SendSDStatus+0xd4>
      }
    }

    if ((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 801638a:	f7fa fae5 	bl	8010958 <HAL_GetTick>
 801638e:	4602      	mov	r2, r0
 8016390:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8016392:	1ad3      	subs	r3, r2, r3
 8016394:	f1b3 3fff 	cmp.w	r3, #4294967295
 8016398:	d102      	bne.n	80163a0 <SD_SendSDStatus+0x10c>
    {
      return HAL_SD_ERROR_TIMEOUT;
 801639a:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 801639e:	e043      	b.n	8016428 <SD_SendSDStatus+0x194>
  while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 80163a0:	687b      	ldr	r3, [r7, #4]
 80163a2:	681b      	ldr	r3, [r3, #0]
 80163a4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80163a6:	f403 7395 	and.w	r3, r3, #298	@ 0x12a
 80163aa:	2b00      	cmp	r3, #0
 80163ac:	d0d2      	beq.n	8016354 <SD_SendSDStatus+0xc0>
    }
  }

  if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 80163ae:	687b      	ldr	r3, [r7, #4]
 80163b0:	681b      	ldr	r3, [r3, #0]
 80163b2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80163b4:	f003 0308 	and.w	r3, r3, #8
 80163b8:	2b00      	cmp	r3, #0
 80163ba:	d001      	beq.n	80163c0 <SD_SendSDStatus+0x12c>
  {
    return HAL_SD_ERROR_DATA_TIMEOUT;
 80163bc:	2308      	movs	r3, #8
 80163be:	e033      	b.n	8016428 <SD_SendSDStatus+0x194>
  }
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 80163c0:	687b      	ldr	r3, [r7, #4]
 80163c2:	681b      	ldr	r3, [r3, #0]
 80163c4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80163c6:	f003 0302 	and.w	r3, r3, #2
 80163ca:	2b00      	cmp	r3, #0
 80163cc:	d001      	beq.n	80163d2 <SD_SendSDStatus+0x13e>
  {
    return HAL_SD_ERROR_DATA_CRC_FAIL;
 80163ce:	2302      	movs	r3, #2
 80163d0:	e02a      	b.n	8016428 <SD_SendSDStatus+0x194>
  }
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 80163d2:	687b      	ldr	r3, [r7, #4]
 80163d4:	681b      	ldr	r3, [r3, #0]
 80163d6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80163d8:	f003 0320 	and.w	r3, r3, #32
 80163dc:	2b00      	cmp	r3, #0
 80163de:	d017      	beq.n	8016410 <SD_SendSDStatus+0x17c>
  {
    return HAL_SD_ERROR_RX_OVERRUN;
 80163e0:	2320      	movs	r3, #32
 80163e2:	e021      	b.n	8016428 <SD_SendSDStatus+0x194>
    /* Nothing to do */
  }

  while ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DPSMACT)))
  {
    *pData = SDMMC_ReadFIFO(hsd->Instance);
 80163e4:	687b      	ldr	r3, [r7, #4]
 80163e6:	681b      	ldr	r3, [r3, #0]
 80163e8:	4618      	mov	r0, r3
 80163ea:	f001 fb69 	bl	8017ac0 <SDMMC_ReadFIFO>
 80163ee:	4602      	mov	r2, r0
 80163f0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80163f2:	601a      	str	r2, [r3, #0]
    pData++;
 80163f4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80163f6:	3304      	adds	r3, #4
 80163f8:	62bb      	str	r3, [r7, #40]	@ 0x28

    if ((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 80163fa:	f7fa faad 	bl	8010958 <HAL_GetTick>
 80163fe:	4602      	mov	r2, r0
 8016400:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8016402:	1ad3      	subs	r3, r2, r3
 8016404:	f1b3 3fff 	cmp.w	r3, #4294967295
 8016408:	d102      	bne.n	8016410 <SD_SendSDStatus+0x17c>
    {
      return HAL_SD_ERROR_TIMEOUT;
 801640a:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 801640e:	e00b      	b.n	8016428 <SD_SendSDStatus+0x194>
  while ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DPSMACT)))
 8016410:	687b      	ldr	r3, [r7, #4]
 8016412:	681b      	ldr	r3, [r3, #0]
 8016414:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8016416:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 801641a:	2b00      	cmp	r3, #0
 801641c:	d1e2      	bne.n	80163e4 <SD_SendSDStatus+0x150>
    }
  }

  /* Clear all the static status flags*/
  __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 801641e:	687b      	ldr	r3, [r7, #4]
 8016420:	681b      	ldr	r3, [r3, #0]
 8016422:	4a03      	ldr	r2, [pc, #12]	@ (8016430 <SD_SendSDStatus+0x19c>)
 8016424:	639a      	str	r2, [r3, #56]	@ 0x38

  return HAL_SD_ERROR_NONE;
 8016426:	2300      	movs	r3, #0
}
 8016428:	4618      	mov	r0, r3
 801642a:	3730      	adds	r7, #48	@ 0x30
 801642c:	46bd      	mov	sp, r7
 801642e:	bd80      	pop	{r7, pc}
 8016430:	18000f3a 	.word	0x18000f3a

08016434 <SD_SendStatus>:
  * @param  pCardStatus: pointer to the buffer that will contain the SD card
  *         status (Card Status register)
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 8016434:	b580      	push	{r7, lr}
 8016436:	b084      	sub	sp, #16
 8016438:	af00      	add	r7, sp, #0
 801643a:	6078      	str	r0, [r7, #4]
 801643c:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

  if (pCardStatus == NULL)
 801643e:	683b      	ldr	r3, [r7, #0]
 8016440:	2b00      	cmp	r3, #0
 8016442:	d102      	bne.n	801644a <SD_SendStatus+0x16>
  {
    return HAL_SD_ERROR_PARAM;
 8016444:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8016448:	e018      	b.n	801647c <SD_SendStatus+0x48>
  }

  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 801644a:	687b      	ldr	r3, [r7, #4]
 801644c:	681a      	ldr	r2, [r3, #0]
 801644e:	687b      	ldr	r3, [r7, #4]
 8016450:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8016452:	041b      	lsls	r3, r3, #16
 8016454:	4619      	mov	r1, r3
 8016456:	4610      	mov	r0, r2
 8016458:	f001 fe1c 	bl	8018094 <SDMMC_CmdSendStatus>
 801645c:	60f8      	str	r0, [r7, #12]
  if (errorstate != HAL_SD_ERROR_NONE)
 801645e:	68fb      	ldr	r3, [r7, #12]
 8016460:	2b00      	cmp	r3, #0
 8016462:	d001      	beq.n	8016468 <SD_SendStatus+0x34>
  {
    return errorstate;
 8016464:	68fb      	ldr	r3, [r7, #12]
 8016466:	e009      	b.n	801647c <SD_SendStatus+0x48>
  }

  /* Get SD card status */
  *pCardStatus = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8016468:	687b      	ldr	r3, [r7, #4]
 801646a:	681b      	ldr	r3, [r3, #0]
 801646c:	2100      	movs	r1, #0
 801646e:	4618      	mov	r0, r3
 8016470:	f001 fb9b 	bl	8017baa <SDMMC_GetResponse>
 8016474:	4602      	mov	r2, r0
 8016476:	683b      	ldr	r3, [r7, #0]
 8016478:	601a      	str	r2, [r3, #0]

  return HAL_SD_ERROR_NONE;
 801647a:	2300      	movs	r3, #0
}
 801647c:	4618      	mov	r0, r3
 801647e:	3710      	adds	r7, #16
 8016480:	46bd      	mov	sp, r7
 8016482:	bd80      	pop	{r7, pc}

08016484 <SD_WideBus_Enable>:
  * @brief  Enables the SDMMC wide bus mode.
  * @param  hsd: pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Enable(SD_HandleTypeDef *hsd)
{
 8016484:	b580      	push	{r7, lr}
 8016486:	b086      	sub	sp, #24
 8016488:	af00      	add	r7, sp, #0
 801648a:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0UL, 0UL};
 801648c:	2300      	movs	r3, #0
 801648e:	60fb      	str	r3, [r7, #12]
 8016490:	2300      	movs	r3, #0
 8016492:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if ((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8016494:	687b      	ldr	r3, [r7, #4]
 8016496:	681b      	ldr	r3, [r3, #0]
 8016498:	2100      	movs	r1, #0
 801649a:	4618      	mov	r0, r3
 801649c:	f001 fb85 	bl	8017baa <SDMMC_GetResponse>
 80164a0:	4603      	mov	r3, r0
 80164a2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80164a6:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80164aa:	d102      	bne.n	80164b2 <SD_WideBus_Enable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 80164ac:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 80164b0:	e02f      	b.n	8016512 <SD_WideBus_Enable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 80164b2:	f107 030c 	add.w	r3, r7, #12
 80164b6:	4619      	mov	r1, r3
 80164b8:	6878      	ldr	r0, [r7, #4]
 80164ba:	f000 f879 	bl	80165b0 <SD_FindSCR>
 80164be:	6178      	str	r0, [r7, #20]
  if (errorstate != HAL_SD_ERROR_NONE)
 80164c0:	697b      	ldr	r3, [r7, #20]
 80164c2:	2b00      	cmp	r3, #0
 80164c4:	d001      	beq.n	80164ca <SD_WideBus_Enable+0x46>
  {
    return errorstate;
 80164c6:	697b      	ldr	r3, [r7, #20]
 80164c8:	e023      	b.n	8016512 <SD_WideBus_Enable+0x8e>
  }

  /* If requested card supports wide bus operation */
  if ((scr[1U] & SDMMC_WIDE_BUS_SUPPORT) != SDMMC_ALLZERO)
 80164ca:	693b      	ldr	r3, [r7, #16]
 80164cc:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80164d0:	2b00      	cmp	r3, #0
 80164d2:	d01c      	beq.n	801650e <SD_WideBus_Enable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA.*/
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 80164d4:	687b      	ldr	r3, [r7, #4]
 80164d6:	681a      	ldr	r2, [r3, #0]
 80164d8:	687b      	ldr	r3, [r7, #4]
 80164da:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80164dc:	041b      	lsls	r3, r3, #16
 80164de:	4619      	mov	r1, r3
 80164e0:	4610      	mov	r0, r2
 80164e2:	f001 fcee 	bl	8017ec2 <SDMMC_CmdAppCommand>
 80164e6:	6178      	str	r0, [r7, #20]
    if (errorstate != HAL_SD_ERROR_NONE)
 80164e8:	697b      	ldr	r3, [r7, #20]
 80164ea:	2b00      	cmp	r3, #0
 80164ec:	d001      	beq.n	80164f2 <SD_WideBus_Enable+0x6e>
    {
      return errorstate;
 80164ee:	697b      	ldr	r3, [r7, #20]
 80164f0:	e00f      	b.n	8016512 <SD_WideBus_Enable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 2 for wide bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 2U);
 80164f2:	687b      	ldr	r3, [r7, #4]
 80164f4:	681b      	ldr	r3, [r3, #0]
 80164f6:	2102      	movs	r1, #2
 80164f8:	4618      	mov	r0, r3
 80164fa:	f001 fd25 	bl	8017f48 <SDMMC_CmdBusWidth>
 80164fe:	6178      	str	r0, [r7, #20]
    if (errorstate != HAL_SD_ERROR_NONE)
 8016500:	697b      	ldr	r3, [r7, #20]
 8016502:	2b00      	cmp	r3, #0
 8016504:	d001      	beq.n	801650a <SD_WideBus_Enable+0x86>
    {
      return errorstate;
 8016506:	697b      	ldr	r3, [r7, #20]
 8016508:	e003      	b.n	8016512 <SD_WideBus_Enable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 801650a:	2300      	movs	r3, #0
 801650c:	e001      	b.n	8016512 <SD_WideBus_Enable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 801650e:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
  }
}
 8016512:	4618      	mov	r0, r3
 8016514:	3718      	adds	r7, #24
 8016516:	46bd      	mov	sp, r7
 8016518:	bd80      	pop	{r7, pc}

0801651a <SD_WideBus_Disable>:
  * @brief  Disables the SDMMC wide bus mode.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Disable(SD_HandleTypeDef *hsd)
{
 801651a:	b580      	push	{r7, lr}
 801651c:	b086      	sub	sp, #24
 801651e:	af00      	add	r7, sp, #0
 8016520:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0UL, 0UL};
 8016522:	2300      	movs	r3, #0
 8016524:	60fb      	str	r3, [r7, #12]
 8016526:	2300      	movs	r3, #0
 8016528:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if ((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 801652a:	687b      	ldr	r3, [r7, #4]
 801652c:	681b      	ldr	r3, [r3, #0]
 801652e:	2100      	movs	r1, #0
 8016530:	4618      	mov	r0, r3
 8016532:	f001 fb3a 	bl	8017baa <SDMMC_GetResponse>
 8016536:	4603      	mov	r3, r0
 8016538:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 801653c:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8016540:	d102      	bne.n	8016548 <SD_WideBus_Disable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 8016542:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8016546:	e02f      	b.n	80165a8 <SD_WideBus_Disable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 8016548:	f107 030c 	add.w	r3, r7, #12
 801654c:	4619      	mov	r1, r3
 801654e:	6878      	ldr	r0, [r7, #4]
 8016550:	f000 f82e 	bl	80165b0 <SD_FindSCR>
 8016554:	6178      	str	r0, [r7, #20]
  if (errorstate != HAL_SD_ERROR_NONE)
 8016556:	697b      	ldr	r3, [r7, #20]
 8016558:	2b00      	cmp	r3, #0
 801655a:	d001      	beq.n	8016560 <SD_WideBus_Disable+0x46>
  {
    return errorstate;
 801655c:	697b      	ldr	r3, [r7, #20]
 801655e:	e023      	b.n	80165a8 <SD_WideBus_Disable+0x8e>
  }

  /* If requested card supports 1 bit mode operation */
  if ((scr[1U] & SDMMC_SINGLE_BUS_SUPPORT) != SDMMC_ALLZERO)
 8016560:	693b      	ldr	r3, [r7, #16]
 8016562:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8016566:	2b00      	cmp	r3, #0
 8016568:	d01c      	beq.n	80165a4 <SD_WideBus_Disable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 801656a:	687b      	ldr	r3, [r7, #4]
 801656c:	681a      	ldr	r2, [r3, #0]
 801656e:	687b      	ldr	r3, [r7, #4]
 8016570:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8016572:	041b      	lsls	r3, r3, #16
 8016574:	4619      	mov	r1, r3
 8016576:	4610      	mov	r0, r2
 8016578:	f001 fca3 	bl	8017ec2 <SDMMC_CmdAppCommand>
 801657c:	6178      	str	r0, [r7, #20]
    if (errorstate != HAL_SD_ERROR_NONE)
 801657e:	697b      	ldr	r3, [r7, #20]
 8016580:	2b00      	cmp	r3, #0
 8016582:	d001      	beq.n	8016588 <SD_WideBus_Disable+0x6e>
    {
      return errorstate;
 8016584:	697b      	ldr	r3, [r7, #20]
 8016586:	e00f      	b.n	80165a8 <SD_WideBus_Disable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 0 for single bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 0U);
 8016588:	687b      	ldr	r3, [r7, #4]
 801658a:	681b      	ldr	r3, [r3, #0]
 801658c:	2100      	movs	r1, #0
 801658e:	4618      	mov	r0, r3
 8016590:	f001 fcda 	bl	8017f48 <SDMMC_CmdBusWidth>
 8016594:	6178      	str	r0, [r7, #20]
    if (errorstate != HAL_SD_ERROR_NONE)
 8016596:	697b      	ldr	r3, [r7, #20]
 8016598:	2b00      	cmp	r3, #0
 801659a:	d001      	beq.n	80165a0 <SD_WideBus_Disable+0x86>
    {
      return errorstate;
 801659c:	697b      	ldr	r3, [r7, #20]
 801659e:	e003      	b.n	80165a8 <SD_WideBus_Disable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 80165a0:	2300      	movs	r3, #0
 80165a2:	e001      	b.n	80165a8 <SD_WideBus_Disable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 80165a4:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
  }
}
 80165a8:	4618      	mov	r0, r3
 80165aa:	3718      	adds	r7, #24
 80165ac:	46bd      	mov	sp, r7
 80165ae:	bd80      	pop	{r7, pc}

080165b0 <SD_FindSCR>:
  * @param  hsd: Pointer to SD handle
  * @param  pSCR: pointer to the buffer that will contain the SCR value
  * @retval error state
  */
static uint32_t SD_FindSCR(SD_HandleTypeDef *hsd, uint32_t *pSCR)
{
 80165b0:	b580      	push	{r7, lr}
 80165b2:	b08e      	sub	sp, #56	@ 0x38
 80165b4:	af00      	add	r7, sp, #0
 80165b6:	6078      	str	r0, [r7, #4]
 80165b8:	6039      	str	r1, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 80165ba:	f7fa f9cd 	bl	8010958 <HAL_GetTick>
 80165be:	6338      	str	r0, [r7, #48]	@ 0x30
  uint32_t index = 0U;
 80165c0:	2300      	movs	r3, #0
 80165c2:	637b      	str	r3, [r7, #52]	@ 0x34
  uint32_t tempscr[2U] = {0UL, 0UL};
 80165c4:	2300      	movs	r3, #0
 80165c6:	60bb      	str	r3, [r7, #8]
 80165c8:	2300      	movs	r3, #0
 80165ca:	60fb      	str	r3, [r7, #12]
  uint32_t *scr = pSCR;
 80165cc:	683b      	ldr	r3, [r7, #0]
 80165ce:	62fb      	str	r3, [r7, #44]	@ 0x2c

  /* Set Block Size To 8 Bytes */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8U);
 80165d0:	687b      	ldr	r3, [r7, #4]
 80165d2:	681b      	ldr	r3, [r3, #0]
 80165d4:	2108      	movs	r1, #8
 80165d6:	4618      	mov	r0, r3
 80165d8:	f001 fb26 	bl	8017c28 <SDMMC_CmdBlockLength>
 80165dc:	62b8      	str	r0, [r7, #40]	@ 0x28
  if (errorstate != HAL_SD_ERROR_NONE)
 80165de:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80165e0:	2b00      	cmp	r3, #0
 80165e2:	d001      	beq.n	80165e8 <SD_FindSCR+0x38>
  {
    return errorstate;
 80165e4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80165e6:	e0ad      	b.n	8016744 <SD_FindSCR+0x194>
  }

  /* Send CMD55 APP_CMD with argument as card's RCA */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)((hsd->SdCard.RelCardAdd) << 16U));
 80165e8:	687b      	ldr	r3, [r7, #4]
 80165ea:	681a      	ldr	r2, [r3, #0]
 80165ec:	687b      	ldr	r3, [r7, #4]
 80165ee:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80165f0:	041b      	lsls	r3, r3, #16
 80165f2:	4619      	mov	r1, r3
 80165f4:	4610      	mov	r0, r2
 80165f6:	f001 fc64 	bl	8017ec2 <SDMMC_CmdAppCommand>
 80165fa:	62b8      	str	r0, [r7, #40]	@ 0x28
  if (errorstate != HAL_SD_ERROR_NONE)
 80165fc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80165fe:	2b00      	cmp	r3, #0
 8016600:	d001      	beq.n	8016606 <SD_FindSCR+0x56>
  {
    return errorstate;
 8016602:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8016604:	e09e      	b.n	8016744 <SD_FindSCR+0x194>
  }

  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8016606:	f04f 33ff 	mov.w	r3, #4294967295
 801660a:	613b      	str	r3, [r7, #16]
  config.DataLength    = 8U;
 801660c:	2308      	movs	r3, #8
 801660e:	617b      	str	r3, [r7, #20]
  config.DataBlockSize = SDMMC_DATABLOCK_SIZE_8B;
 8016610:	2330      	movs	r3, #48	@ 0x30
 8016612:	61bb      	str	r3, [r7, #24]
  config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 8016614:	2302      	movs	r3, #2
 8016616:	61fb      	str	r3, [r7, #28]
  config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 8016618:	2300      	movs	r3, #0
 801661a:	623b      	str	r3, [r7, #32]
  config.DPSM          = SDMMC_DPSM_ENABLE;
 801661c:	2301      	movs	r3, #1
 801661e:	627b      	str	r3, [r7, #36]	@ 0x24
  (void)SDMMC_ConfigData(hsd->Instance, &config);
 8016620:	687b      	ldr	r3, [r7, #4]
 8016622:	681b      	ldr	r3, [r3, #0]
 8016624:	f107 0210 	add.w	r2, r7, #16
 8016628:	4611      	mov	r1, r2
 801662a:	4618      	mov	r0, r3
 801662c:	f001 fad0 	bl	8017bd0 <SDMMC_ConfigData>

  /* Send ACMD51 SD_APP_SEND_SCR with argument as 0 */
  errorstate = SDMMC_CmdSendSCR(hsd->Instance);
 8016630:	687b      	ldr	r3, [r7, #4]
 8016632:	681b      	ldr	r3, [r3, #0]
 8016634:	4618      	mov	r0, r3
 8016636:	f001 fcaa 	bl	8017f8e <SDMMC_CmdSendSCR>
 801663a:	62b8      	str	r0, [r7, #40]	@ 0x28
  if (errorstate != HAL_SD_ERROR_NONE)
 801663c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801663e:	2b00      	cmp	r3, #0
 8016640:	d027      	beq.n	8016692 <SD_FindSCR+0xe2>
  {
    return errorstate;
 8016642:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8016644:	e07e      	b.n	8016744 <SD_FindSCR+0x194>
  }

  while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND |
                            SDMMC_FLAG_DATAEND))
  {
    if ((!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOE)) && (index == 0U))
 8016646:	687b      	ldr	r3, [r7, #4]
 8016648:	681b      	ldr	r3, [r3, #0]
 801664a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 801664c:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8016650:	2b00      	cmp	r3, #0
 8016652:	d113      	bne.n	801667c <SD_FindSCR+0xcc>
 8016654:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8016656:	2b00      	cmp	r3, #0
 8016658:	d110      	bne.n	801667c <SD_FindSCR+0xcc>
    {
      tempscr[0] = SDMMC_ReadFIFO(hsd->Instance);
 801665a:	687b      	ldr	r3, [r7, #4]
 801665c:	681b      	ldr	r3, [r3, #0]
 801665e:	4618      	mov	r0, r3
 8016660:	f001 fa2e 	bl	8017ac0 <SDMMC_ReadFIFO>
 8016664:	4603      	mov	r3, r0
 8016666:	60bb      	str	r3, [r7, #8]
      tempscr[1] = SDMMC_ReadFIFO(hsd->Instance);
 8016668:	687b      	ldr	r3, [r7, #4]
 801666a:	681b      	ldr	r3, [r3, #0]
 801666c:	4618      	mov	r0, r3
 801666e:	f001 fa27 	bl	8017ac0 <SDMMC_ReadFIFO>
 8016672:	4603      	mov	r3, r0
 8016674:	60fb      	str	r3, [r7, #12]
      index++;
 8016676:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8016678:	3301      	adds	r3, #1
 801667a:	637b      	str	r3, [r7, #52]	@ 0x34
    }


    if ((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 801667c:	f7fa f96c 	bl	8010958 <HAL_GetTick>
 8016680:	4602      	mov	r2, r0
 8016682:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8016684:	1ad3      	subs	r3, r2, r3
 8016686:	f1b3 3fff 	cmp.w	r3, #4294967295
 801668a:	d102      	bne.n	8016692 <SD_FindSCR+0xe2>
    {
      return HAL_SD_ERROR_TIMEOUT;
 801668c:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8016690:	e058      	b.n	8016744 <SD_FindSCR+0x194>
  while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND |
 8016692:	687b      	ldr	r3, [r7, #4]
 8016694:	681b      	ldr	r3, [r3, #0]
 8016696:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8016698:	f240 532a 	movw	r3, #1322	@ 0x52a
 801669c:	4013      	ands	r3, r2
 801669e:	2b00      	cmp	r3, #0
 80166a0:	d0d1      	beq.n	8016646 <SD_FindSCR+0x96>
    }
  }

  if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 80166a2:	687b      	ldr	r3, [r7, #4]
 80166a4:	681b      	ldr	r3, [r3, #0]
 80166a6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80166a8:	f003 0308 	and.w	r3, r3, #8
 80166ac:	2b00      	cmp	r3, #0
 80166ae:	d005      	beq.n	80166bc <SD_FindSCR+0x10c>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DTIMEOUT);
 80166b0:	687b      	ldr	r3, [r7, #4]
 80166b2:	681b      	ldr	r3, [r3, #0]
 80166b4:	2208      	movs	r2, #8
 80166b6:	639a      	str	r2, [r3, #56]	@ 0x38

    return HAL_SD_ERROR_DATA_TIMEOUT;
 80166b8:	2308      	movs	r3, #8
 80166ba:	e043      	b.n	8016744 <SD_FindSCR+0x194>
  }
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 80166bc:	687b      	ldr	r3, [r7, #4]
 80166be:	681b      	ldr	r3, [r3, #0]
 80166c0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80166c2:	f003 0302 	and.w	r3, r3, #2
 80166c6:	2b00      	cmp	r3, #0
 80166c8:	d005      	beq.n	80166d6 <SD_FindSCR+0x126>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DCRCFAIL);
 80166ca:	687b      	ldr	r3, [r7, #4]
 80166cc:	681b      	ldr	r3, [r3, #0]
 80166ce:	2202      	movs	r2, #2
 80166d0:	639a      	str	r2, [r3, #56]	@ 0x38

    return HAL_SD_ERROR_DATA_CRC_FAIL;
 80166d2:	2302      	movs	r3, #2
 80166d4:	e036      	b.n	8016744 <SD_FindSCR+0x194>
  }
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 80166d6:	687b      	ldr	r3, [r7, #4]
 80166d8:	681b      	ldr	r3, [r3, #0]
 80166da:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80166dc:	f003 0320 	and.w	r3, r3, #32
 80166e0:	2b00      	cmp	r3, #0
 80166e2:	d005      	beq.n	80166f0 <SD_FindSCR+0x140>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_RXOVERR);
 80166e4:	687b      	ldr	r3, [r7, #4]
 80166e6:	681b      	ldr	r3, [r3, #0]
 80166e8:	2220      	movs	r2, #32
 80166ea:	639a      	str	r2, [r3, #56]	@ 0x38

    return HAL_SD_ERROR_RX_OVERRUN;
 80166ec:	2320      	movs	r3, #32
 80166ee:	e029      	b.n	8016744 <SD_FindSCR+0x194>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 80166f0:	687b      	ldr	r3, [r7, #4]
 80166f2:	681b      	ldr	r3, [r3, #0]
 80166f4:	4a15      	ldr	r2, [pc, #84]	@ (801674c <SD_FindSCR+0x19c>)
 80166f6:	639a      	str	r2, [r3, #56]	@ 0x38

    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) | \
 80166f8:	68fb      	ldr	r3, [r7, #12]
 80166fa:	061a      	lsls	r2, r3, #24
 80166fc:	68fb      	ldr	r3, [r7, #12]
 80166fe:	021b      	lsls	r3, r3, #8
 8016700:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8016704:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 8016706:	68fb      	ldr	r3, [r7, #12]
 8016708:	0a1b      	lsrs	r3, r3, #8
 801670a:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) | \
 801670e:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 8016710:	68fb      	ldr	r3, [r7, #12]
 8016712:	0e1b      	lsrs	r3, r3, #24
 8016714:	431a      	orrs	r2, r3
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) | \
 8016716:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8016718:	601a      	str	r2, [r3, #0]
    scr++;
 801671a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801671c:	3304      	adds	r3, #4
 801671e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) | \
 8016720:	68bb      	ldr	r3, [r7, #8]
 8016722:	061a      	lsls	r2, r3, #24
 8016724:	68bb      	ldr	r3, [r7, #8]
 8016726:	021b      	lsls	r3, r3, #8
 8016728:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 801672c:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 801672e:	68bb      	ldr	r3, [r7, #8]
 8016730:	0a1b      	lsrs	r3, r3, #8
 8016732:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) | \
 8016736:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 8016738:	68bb      	ldr	r3, [r7, #8]
 801673a:	0e1b      	lsrs	r3, r3, #24
 801673c:	431a      	orrs	r2, r3
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) | \
 801673e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8016740:	601a      	str	r2, [r3, #0]

  }

  return HAL_SD_ERROR_NONE;
 8016742:	2300      	movs	r3, #0
}
 8016744:	4618      	mov	r0, r3
 8016746:	3738      	adds	r7, #56	@ 0x38
 8016748:	46bd      	mov	sp, r7
 801674a:	bd80      	pop	{r7, pc}
 801674c:	18000f3a 	.word	0x18000f3a

08016750 <SD_Read_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Read_IT(SD_HandleTypeDef *hsd)
{
 8016750:	b580      	push	{r7, lr}
 8016752:	b086      	sub	sp, #24
 8016754:	af00      	add	r7, sp, #0
 8016756:	6078      	str	r0, [r7, #4]
  uint32_t count;
  uint32_t data;
  uint8_t *tmp;

  tmp = hsd->pRxBuffPtr;
 8016758:	687b      	ldr	r3, [r7, #4]
 801675a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801675c:	613b      	str	r3, [r7, #16]

  if (hsd->RxXferSize >= 32U)
 801675e:	687b      	ldr	r3, [r7, #4]
 8016760:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8016762:	2b1f      	cmp	r3, #31
 8016764:	d936      	bls.n	80167d4 <SD_Read_IT+0x84>
  {
    /* Read data from SDMMC Rx FIFO */
    for (count = 0U; count < 8U; count++)
 8016766:	2300      	movs	r3, #0
 8016768:	617b      	str	r3, [r7, #20]
 801676a:	e027      	b.n	80167bc <SD_Read_IT+0x6c>
    {
      data = SDMMC_ReadFIFO(hsd->Instance);
 801676c:	687b      	ldr	r3, [r7, #4]
 801676e:	681b      	ldr	r3, [r3, #0]
 8016770:	4618      	mov	r0, r3
 8016772:	f001 f9a5 	bl	8017ac0 <SDMMC_ReadFIFO>
 8016776:	60f8      	str	r0, [r7, #12]
      *tmp = (uint8_t)(data & 0xFFU);
 8016778:	68fb      	ldr	r3, [r7, #12]
 801677a:	b2da      	uxtb	r2, r3
 801677c:	693b      	ldr	r3, [r7, #16]
 801677e:	701a      	strb	r2, [r3, #0]
      tmp++;
 8016780:	693b      	ldr	r3, [r7, #16]
 8016782:	3301      	adds	r3, #1
 8016784:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 8U) & 0xFFU);
 8016786:	68fb      	ldr	r3, [r7, #12]
 8016788:	0a1b      	lsrs	r3, r3, #8
 801678a:	b2da      	uxtb	r2, r3
 801678c:	693b      	ldr	r3, [r7, #16]
 801678e:	701a      	strb	r2, [r3, #0]
      tmp++;
 8016790:	693b      	ldr	r3, [r7, #16]
 8016792:	3301      	adds	r3, #1
 8016794:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 16U) & 0xFFU);
 8016796:	68fb      	ldr	r3, [r7, #12]
 8016798:	0c1b      	lsrs	r3, r3, #16
 801679a:	b2da      	uxtb	r2, r3
 801679c:	693b      	ldr	r3, [r7, #16]
 801679e:	701a      	strb	r2, [r3, #0]
      tmp++;
 80167a0:	693b      	ldr	r3, [r7, #16]
 80167a2:	3301      	adds	r3, #1
 80167a4:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 24U) & 0xFFU);
 80167a6:	68fb      	ldr	r3, [r7, #12]
 80167a8:	0e1b      	lsrs	r3, r3, #24
 80167aa:	b2da      	uxtb	r2, r3
 80167ac:	693b      	ldr	r3, [r7, #16]
 80167ae:	701a      	strb	r2, [r3, #0]
      tmp++;
 80167b0:	693b      	ldr	r3, [r7, #16]
 80167b2:	3301      	adds	r3, #1
 80167b4:	613b      	str	r3, [r7, #16]
    for (count = 0U; count < 8U; count++)
 80167b6:	697b      	ldr	r3, [r7, #20]
 80167b8:	3301      	adds	r3, #1
 80167ba:	617b      	str	r3, [r7, #20]
 80167bc:	697b      	ldr	r3, [r7, #20]
 80167be:	2b07      	cmp	r3, #7
 80167c0:	d9d4      	bls.n	801676c <SD_Read_IT+0x1c>
    }

    hsd->pRxBuffPtr = tmp;
 80167c2:	687b      	ldr	r3, [r7, #4]
 80167c4:	693a      	ldr	r2, [r7, #16]
 80167c6:	625a      	str	r2, [r3, #36]	@ 0x24
    hsd->RxXferSize -= 32U;
 80167c8:	687b      	ldr	r3, [r7, #4]
 80167ca:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80167cc:	f1a3 0220 	sub.w	r2, r3, #32
 80167d0:	687b      	ldr	r3, [r7, #4]
 80167d2:	629a      	str	r2, [r3, #40]	@ 0x28
  }
}
 80167d4:	bf00      	nop
 80167d6:	3718      	adds	r7, #24
 80167d8:	46bd      	mov	sp, r7
 80167da:	bd80      	pop	{r7, pc}

080167dc <SD_Write_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Write_IT(SD_HandleTypeDef *hsd)
{
 80167dc:	b580      	push	{r7, lr}
 80167de:	b086      	sub	sp, #24
 80167e0:	af00      	add	r7, sp, #0
 80167e2:	6078      	str	r0, [r7, #4]
  uint32_t count;
  uint32_t data;
  const uint8_t *tmp;

  tmp = hsd->pTxBuffPtr;
 80167e4:	687b      	ldr	r3, [r7, #4]
 80167e6:	69db      	ldr	r3, [r3, #28]
 80167e8:	613b      	str	r3, [r7, #16]

  if (hsd->TxXferSize >= 32U)
 80167ea:	687b      	ldr	r3, [r7, #4]
 80167ec:	6a1b      	ldr	r3, [r3, #32]
 80167ee:	2b1f      	cmp	r3, #31
 80167f0:	d93a      	bls.n	8016868 <SD_Write_IT+0x8c>
  {
    /* Write data to SDMMC Tx FIFO */
    for (count = 0U; count < 8U; count++)
 80167f2:	2300      	movs	r3, #0
 80167f4:	617b      	str	r3, [r7, #20]
 80167f6:	e02b      	b.n	8016850 <SD_Write_IT+0x74>
    {
      data = (uint32_t)(*tmp);
 80167f8:	693b      	ldr	r3, [r7, #16]
 80167fa:	781b      	ldrb	r3, [r3, #0]
 80167fc:	60fb      	str	r3, [r7, #12]
      tmp++;
 80167fe:	693b      	ldr	r3, [r7, #16]
 8016800:	3301      	adds	r3, #1
 8016802:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 8U);
 8016804:	693b      	ldr	r3, [r7, #16]
 8016806:	781b      	ldrb	r3, [r3, #0]
 8016808:	021a      	lsls	r2, r3, #8
 801680a:	68fb      	ldr	r3, [r7, #12]
 801680c:	4313      	orrs	r3, r2
 801680e:	60fb      	str	r3, [r7, #12]
      tmp++;
 8016810:	693b      	ldr	r3, [r7, #16]
 8016812:	3301      	adds	r3, #1
 8016814:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 16U);
 8016816:	693b      	ldr	r3, [r7, #16]
 8016818:	781b      	ldrb	r3, [r3, #0]
 801681a:	041a      	lsls	r2, r3, #16
 801681c:	68fb      	ldr	r3, [r7, #12]
 801681e:	4313      	orrs	r3, r2
 8016820:	60fb      	str	r3, [r7, #12]
      tmp++;
 8016822:	693b      	ldr	r3, [r7, #16]
 8016824:	3301      	adds	r3, #1
 8016826:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 24U);
 8016828:	693b      	ldr	r3, [r7, #16]
 801682a:	781b      	ldrb	r3, [r3, #0]
 801682c:	061a      	lsls	r2, r3, #24
 801682e:	68fb      	ldr	r3, [r7, #12]
 8016830:	4313      	orrs	r3, r2
 8016832:	60fb      	str	r3, [r7, #12]
      tmp++;
 8016834:	693b      	ldr	r3, [r7, #16]
 8016836:	3301      	adds	r3, #1
 8016838:	613b      	str	r3, [r7, #16]
      (void)SDMMC_WriteFIFO(hsd->Instance, &data);
 801683a:	687b      	ldr	r3, [r7, #4]
 801683c:	681b      	ldr	r3, [r3, #0]
 801683e:	f107 020c 	add.w	r2, r7, #12
 8016842:	4611      	mov	r1, r2
 8016844:	4618      	mov	r0, r3
 8016846:	f001 f948 	bl	8017ada <SDMMC_WriteFIFO>
    for (count = 0U; count < 8U; count++)
 801684a:	697b      	ldr	r3, [r7, #20]
 801684c:	3301      	adds	r3, #1
 801684e:	617b      	str	r3, [r7, #20]
 8016850:	697b      	ldr	r3, [r7, #20]
 8016852:	2b07      	cmp	r3, #7
 8016854:	d9d0      	bls.n	80167f8 <SD_Write_IT+0x1c>
    }

    hsd->pTxBuffPtr = tmp;
 8016856:	687b      	ldr	r3, [r7, #4]
 8016858:	693a      	ldr	r2, [r7, #16]
 801685a:	61da      	str	r2, [r3, #28]
    hsd->TxXferSize -= 32U;
 801685c:	687b      	ldr	r3, [r7, #4]
 801685e:	6a1b      	ldr	r3, [r3, #32]
 8016860:	f1a3 0220 	sub.w	r2, r3, #32
 8016864:	687b      	ldr	r3, [r7, #4]
 8016866:	621a      	str	r2, [r3, #32]
  }
}
 8016868:	bf00      	nop
 801686a:	3718      	adds	r7, #24
 801686c:	46bd      	mov	sp, r7
 801686e:	bd80      	pop	{r7, pc}

08016870 <HAL_SDEx_Read_DMADoubleBuf0CpltCallback>:
  * @brief Read DMA Buffer 0 Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
__weak void HAL_SDEx_Read_DMADoubleBuf0CpltCallback(SD_HandleTypeDef *hsd)
{
 8016870:	b480      	push	{r7}
 8016872:	b083      	sub	sp, #12
 8016874:	af00      	add	r7, sp, #0
 8016876:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SDEx_Read_DMADoubleBuf0CpltCallback can be implemented in the user file
   */
}
 8016878:	bf00      	nop
 801687a:	370c      	adds	r7, #12
 801687c:	46bd      	mov	sp, r7
 801687e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016882:	4770      	bx	lr

08016884 <HAL_SDEx_Read_DMADoubleBuf1CpltCallback>:
  * @brief Read DMA Buffer 1 Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
__weak void HAL_SDEx_Read_DMADoubleBuf1CpltCallback(SD_HandleTypeDef *hsd)
{
 8016884:	b480      	push	{r7}
 8016886:	b083      	sub	sp, #12
 8016888:	af00      	add	r7, sp, #0
 801688a:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SDEx_Read_DMADoubleBuf1CpltCallback can be implemented in the user file
   */
}
 801688c:	bf00      	nop
 801688e:	370c      	adds	r7, #12
 8016890:	46bd      	mov	sp, r7
 8016892:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016896:	4770      	bx	lr

08016898 <HAL_SDEx_Write_DMADoubleBuf0CpltCallback>:
  * @brief Write DMA Buffer 0 Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
__weak void HAL_SDEx_Write_DMADoubleBuf0CpltCallback(SD_HandleTypeDef *hsd)
{
 8016898:	b480      	push	{r7}
 801689a:	b083      	sub	sp, #12
 801689c:	af00      	add	r7, sp, #0
 801689e:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SDEx_Write_DMADoubleBuf0CpltCallback can be implemented in the user file
   */
}
 80168a0:	bf00      	nop
 80168a2:	370c      	adds	r7, #12
 80168a4:	46bd      	mov	sp, r7
 80168a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80168aa:	4770      	bx	lr

080168ac <HAL_SDEx_Write_DMADoubleBuf1CpltCallback>:
  * @brief Write DMA Buffer 1 Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
__weak void HAL_SDEx_Write_DMADoubleBuf1CpltCallback(SD_HandleTypeDef *hsd)
{
 80168ac:	b480      	push	{r7}
 80168ae:	b083      	sub	sp, #12
 80168b0:	af00      	add	r7, sp, #0
 80168b2:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SDEx_Write_DMADoubleBuf1CpltCallback can be implemented in the user file
   */
}
 80168b4:	bf00      	nop
 80168b6:	370c      	adds	r7, #12
 80168b8:	46bd      	mov	sp, r7
 80168ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80168be:	4770      	bx	lr

080168c0 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80168c0:	b580      	push	{r7, lr}
 80168c2:	b082      	sub	sp, #8
 80168c4:	af00      	add	r7, sp, #0
 80168c6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80168c8:	687b      	ldr	r3, [r7, #4]
 80168ca:	2b00      	cmp	r3, #0
 80168cc:	d101      	bne.n	80168d2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80168ce:	2301      	movs	r3, #1
 80168d0:	e042      	b.n	8016958 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80168d2:	687b      	ldr	r3, [r7, #4]
 80168d4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80168d8:	2b00      	cmp	r3, #0
 80168da:	d106      	bne.n	80168ea <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80168dc:	687b      	ldr	r3, [r7, #4]
 80168de:	2200      	movs	r2, #0
 80168e0:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80168e4:	6878      	ldr	r0, [r7, #4]
 80168e6:	f7ea ff39 	bl	800175c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80168ea:	687b      	ldr	r3, [r7, #4]
 80168ec:	2224      	movs	r2, #36	@ 0x24
 80168ee:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 80168f2:	687b      	ldr	r3, [r7, #4]
 80168f4:	681b      	ldr	r3, [r3, #0]
 80168f6:	681a      	ldr	r2, [r3, #0]
 80168f8:	687b      	ldr	r3, [r7, #4]
 80168fa:	681b      	ldr	r3, [r3, #0]
 80168fc:	f022 0201 	bic.w	r2, r2, #1
 8016900:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8016902:	6878      	ldr	r0, [r7, #4]
 8016904:	f000 f82c 	bl	8016960 <UART_SetConfig>
 8016908:	4603      	mov	r3, r0
 801690a:	2b01      	cmp	r3, #1
 801690c:	d101      	bne.n	8016912 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 801690e:	2301      	movs	r3, #1
 8016910:	e022      	b.n	8016958 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8016912:	687b      	ldr	r3, [r7, #4]
 8016914:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8016916:	2b00      	cmp	r3, #0
 8016918:	d002      	beq.n	8016920 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 801691a:	6878      	ldr	r0, [r7, #4]
 801691c:	f000 fd88 	bl	8017430 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8016920:	687b      	ldr	r3, [r7, #4]
 8016922:	681b      	ldr	r3, [r3, #0]
 8016924:	685a      	ldr	r2, [r3, #4]
 8016926:	687b      	ldr	r3, [r7, #4]
 8016928:	681b      	ldr	r3, [r3, #0]
 801692a:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 801692e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8016930:	687b      	ldr	r3, [r7, #4]
 8016932:	681b      	ldr	r3, [r3, #0]
 8016934:	689a      	ldr	r2, [r3, #8]
 8016936:	687b      	ldr	r3, [r7, #4]
 8016938:	681b      	ldr	r3, [r3, #0]
 801693a:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 801693e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8016940:	687b      	ldr	r3, [r7, #4]
 8016942:	681b      	ldr	r3, [r3, #0]
 8016944:	681a      	ldr	r2, [r3, #0]
 8016946:	687b      	ldr	r3, [r7, #4]
 8016948:	681b      	ldr	r3, [r3, #0]
 801694a:	f042 0201 	orr.w	r2, r2, #1
 801694e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8016950:	6878      	ldr	r0, [r7, #4]
 8016952:	f000 fe0f 	bl	8017574 <UART_CheckIdleState>
 8016956:	4603      	mov	r3, r0
}
 8016958:	4618      	mov	r0, r3
 801695a:	3708      	adds	r7, #8
 801695c:	46bd      	mov	sp, r7
 801695e:	bd80      	pop	{r7, pc}

08016960 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8016960:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8016964:	b092      	sub	sp, #72	@ 0x48
 8016966:	af00      	add	r7, sp, #0
 8016968:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 801696a:	2300      	movs	r3, #0
 801696c:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8016970:	697b      	ldr	r3, [r7, #20]
 8016972:	689a      	ldr	r2, [r3, #8]
 8016974:	697b      	ldr	r3, [r7, #20]
 8016976:	691b      	ldr	r3, [r3, #16]
 8016978:	431a      	orrs	r2, r3
 801697a:	697b      	ldr	r3, [r7, #20]
 801697c:	695b      	ldr	r3, [r3, #20]
 801697e:	431a      	orrs	r2, r3
 8016980:	697b      	ldr	r3, [r7, #20]
 8016982:	69db      	ldr	r3, [r3, #28]
 8016984:	4313      	orrs	r3, r2
 8016986:	647b      	str	r3, [r7, #68]	@ 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8016988:	697b      	ldr	r3, [r7, #20]
 801698a:	681b      	ldr	r3, [r3, #0]
 801698c:	681a      	ldr	r2, [r3, #0]
 801698e:	4bbe      	ldr	r3, [pc, #760]	@ (8016c88 <UART_SetConfig+0x328>)
 8016990:	4013      	ands	r3, r2
 8016992:	697a      	ldr	r2, [r7, #20]
 8016994:	6812      	ldr	r2, [r2, #0]
 8016996:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8016998:	430b      	orrs	r3, r1
 801699a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 801699c:	697b      	ldr	r3, [r7, #20]
 801699e:	681b      	ldr	r3, [r3, #0]
 80169a0:	685b      	ldr	r3, [r3, #4]
 80169a2:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80169a6:	697b      	ldr	r3, [r7, #20]
 80169a8:	68da      	ldr	r2, [r3, #12]
 80169aa:	697b      	ldr	r3, [r7, #20]
 80169ac:	681b      	ldr	r3, [r3, #0]
 80169ae:	430a      	orrs	r2, r1
 80169b0:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80169b2:	697b      	ldr	r3, [r7, #20]
 80169b4:	699b      	ldr	r3, [r3, #24]
 80169b6:	647b      	str	r3, [r7, #68]	@ 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80169b8:	697b      	ldr	r3, [r7, #20]
 80169ba:	681b      	ldr	r3, [r3, #0]
 80169bc:	4ab3      	ldr	r2, [pc, #716]	@ (8016c8c <UART_SetConfig+0x32c>)
 80169be:	4293      	cmp	r3, r2
 80169c0:	d004      	beq.n	80169cc <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80169c2:	697b      	ldr	r3, [r7, #20]
 80169c4:	6a1b      	ldr	r3, [r3, #32]
 80169c6:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80169c8:	4313      	orrs	r3, r2
 80169ca:	647b      	str	r3, [r7, #68]	@ 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80169cc:	697b      	ldr	r3, [r7, #20]
 80169ce:	681b      	ldr	r3, [r3, #0]
 80169d0:	689a      	ldr	r2, [r3, #8]
 80169d2:	4baf      	ldr	r3, [pc, #700]	@ (8016c90 <UART_SetConfig+0x330>)
 80169d4:	4013      	ands	r3, r2
 80169d6:	697a      	ldr	r2, [r7, #20]
 80169d8:	6812      	ldr	r2, [r2, #0]
 80169da:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 80169dc:	430b      	orrs	r3, r1
 80169de:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80169e0:	697b      	ldr	r3, [r7, #20]
 80169e2:	681b      	ldr	r3, [r3, #0]
 80169e4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80169e6:	f023 010f 	bic.w	r1, r3, #15
 80169ea:	697b      	ldr	r3, [r7, #20]
 80169ec:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80169ee:	697b      	ldr	r3, [r7, #20]
 80169f0:	681b      	ldr	r3, [r3, #0]
 80169f2:	430a      	orrs	r2, r1
 80169f4:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80169f6:	697b      	ldr	r3, [r7, #20]
 80169f8:	681b      	ldr	r3, [r3, #0]
 80169fa:	4aa6      	ldr	r2, [pc, #664]	@ (8016c94 <UART_SetConfig+0x334>)
 80169fc:	4293      	cmp	r3, r2
 80169fe:	d177      	bne.n	8016af0 <UART_SetConfig+0x190>
 8016a00:	4ba5      	ldr	r3, [pc, #660]	@ (8016c98 <UART_SetConfig+0x338>)
 8016a02:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8016a04:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8016a08:	2b28      	cmp	r3, #40	@ 0x28
 8016a0a:	d86d      	bhi.n	8016ae8 <UART_SetConfig+0x188>
 8016a0c:	a201      	add	r2, pc, #4	@ (adr r2, 8016a14 <UART_SetConfig+0xb4>)
 8016a0e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8016a12:	bf00      	nop
 8016a14:	08016ab9 	.word	0x08016ab9
 8016a18:	08016ae9 	.word	0x08016ae9
 8016a1c:	08016ae9 	.word	0x08016ae9
 8016a20:	08016ae9 	.word	0x08016ae9
 8016a24:	08016ae9 	.word	0x08016ae9
 8016a28:	08016ae9 	.word	0x08016ae9
 8016a2c:	08016ae9 	.word	0x08016ae9
 8016a30:	08016ae9 	.word	0x08016ae9
 8016a34:	08016ac1 	.word	0x08016ac1
 8016a38:	08016ae9 	.word	0x08016ae9
 8016a3c:	08016ae9 	.word	0x08016ae9
 8016a40:	08016ae9 	.word	0x08016ae9
 8016a44:	08016ae9 	.word	0x08016ae9
 8016a48:	08016ae9 	.word	0x08016ae9
 8016a4c:	08016ae9 	.word	0x08016ae9
 8016a50:	08016ae9 	.word	0x08016ae9
 8016a54:	08016ac9 	.word	0x08016ac9
 8016a58:	08016ae9 	.word	0x08016ae9
 8016a5c:	08016ae9 	.word	0x08016ae9
 8016a60:	08016ae9 	.word	0x08016ae9
 8016a64:	08016ae9 	.word	0x08016ae9
 8016a68:	08016ae9 	.word	0x08016ae9
 8016a6c:	08016ae9 	.word	0x08016ae9
 8016a70:	08016ae9 	.word	0x08016ae9
 8016a74:	08016ad1 	.word	0x08016ad1
 8016a78:	08016ae9 	.word	0x08016ae9
 8016a7c:	08016ae9 	.word	0x08016ae9
 8016a80:	08016ae9 	.word	0x08016ae9
 8016a84:	08016ae9 	.word	0x08016ae9
 8016a88:	08016ae9 	.word	0x08016ae9
 8016a8c:	08016ae9 	.word	0x08016ae9
 8016a90:	08016ae9 	.word	0x08016ae9
 8016a94:	08016ad9 	.word	0x08016ad9
 8016a98:	08016ae9 	.word	0x08016ae9
 8016a9c:	08016ae9 	.word	0x08016ae9
 8016aa0:	08016ae9 	.word	0x08016ae9
 8016aa4:	08016ae9 	.word	0x08016ae9
 8016aa8:	08016ae9 	.word	0x08016ae9
 8016aac:	08016ae9 	.word	0x08016ae9
 8016ab0:	08016ae9 	.word	0x08016ae9
 8016ab4:	08016ae1 	.word	0x08016ae1
 8016ab8:	2301      	movs	r3, #1
 8016aba:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8016abe:	e222      	b.n	8016f06 <UART_SetConfig+0x5a6>
 8016ac0:	2304      	movs	r3, #4
 8016ac2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8016ac6:	e21e      	b.n	8016f06 <UART_SetConfig+0x5a6>
 8016ac8:	2308      	movs	r3, #8
 8016aca:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8016ace:	e21a      	b.n	8016f06 <UART_SetConfig+0x5a6>
 8016ad0:	2310      	movs	r3, #16
 8016ad2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8016ad6:	e216      	b.n	8016f06 <UART_SetConfig+0x5a6>
 8016ad8:	2320      	movs	r3, #32
 8016ada:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8016ade:	e212      	b.n	8016f06 <UART_SetConfig+0x5a6>
 8016ae0:	2340      	movs	r3, #64	@ 0x40
 8016ae2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8016ae6:	e20e      	b.n	8016f06 <UART_SetConfig+0x5a6>
 8016ae8:	2380      	movs	r3, #128	@ 0x80
 8016aea:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8016aee:	e20a      	b.n	8016f06 <UART_SetConfig+0x5a6>
 8016af0:	697b      	ldr	r3, [r7, #20]
 8016af2:	681b      	ldr	r3, [r3, #0]
 8016af4:	4a69      	ldr	r2, [pc, #420]	@ (8016c9c <UART_SetConfig+0x33c>)
 8016af6:	4293      	cmp	r3, r2
 8016af8:	d130      	bne.n	8016b5c <UART_SetConfig+0x1fc>
 8016afa:	4b67      	ldr	r3, [pc, #412]	@ (8016c98 <UART_SetConfig+0x338>)
 8016afc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8016afe:	f003 0307 	and.w	r3, r3, #7
 8016b02:	2b05      	cmp	r3, #5
 8016b04:	d826      	bhi.n	8016b54 <UART_SetConfig+0x1f4>
 8016b06:	a201      	add	r2, pc, #4	@ (adr r2, 8016b0c <UART_SetConfig+0x1ac>)
 8016b08:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8016b0c:	08016b25 	.word	0x08016b25
 8016b10:	08016b2d 	.word	0x08016b2d
 8016b14:	08016b35 	.word	0x08016b35
 8016b18:	08016b3d 	.word	0x08016b3d
 8016b1c:	08016b45 	.word	0x08016b45
 8016b20:	08016b4d 	.word	0x08016b4d
 8016b24:	2300      	movs	r3, #0
 8016b26:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8016b2a:	e1ec      	b.n	8016f06 <UART_SetConfig+0x5a6>
 8016b2c:	2304      	movs	r3, #4
 8016b2e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8016b32:	e1e8      	b.n	8016f06 <UART_SetConfig+0x5a6>
 8016b34:	2308      	movs	r3, #8
 8016b36:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8016b3a:	e1e4      	b.n	8016f06 <UART_SetConfig+0x5a6>
 8016b3c:	2310      	movs	r3, #16
 8016b3e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8016b42:	e1e0      	b.n	8016f06 <UART_SetConfig+0x5a6>
 8016b44:	2320      	movs	r3, #32
 8016b46:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8016b4a:	e1dc      	b.n	8016f06 <UART_SetConfig+0x5a6>
 8016b4c:	2340      	movs	r3, #64	@ 0x40
 8016b4e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8016b52:	e1d8      	b.n	8016f06 <UART_SetConfig+0x5a6>
 8016b54:	2380      	movs	r3, #128	@ 0x80
 8016b56:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8016b5a:	e1d4      	b.n	8016f06 <UART_SetConfig+0x5a6>
 8016b5c:	697b      	ldr	r3, [r7, #20]
 8016b5e:	681b      	ldr	r3, [r3, #0]
 8016b60:	4a4f      	ldr	r2, [pc, #316]	@ (8016ca0 <UART_SetConfig+0x340>)
 8016b62:	4293      	cmp	r3, r2
 8016b64:	d130      	bne.n	8016bc8 <UART_SetConfig+0x268>
 8016b66:	4b4c      	ldr	r3, [pc, #304]	@ (8016c98 <UART_SetConfig+0x338>)
 8016b68:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8016b6a:	f003 0307 	and.w	r3, r3, #7
 8016b6e:	2b05      	cmp	r3, #5
 8016b70:	d826      	bhi.n	8016bc0 <UART_SetConfig+0x260>
 8016b72:	a201      	add	r2, pc, #4	@ (adr r2, 8016b78 <UART_SetConfig+0x218>)
 8016b74:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8016b78:	08016b91 	.word	0x08016b91
 8016b7c:	08016b99 	.word	0x08016b99
 8016b80:	08016ba1 	.word	0x08016ba1
 8016b84:	08016ba9 	.word	0x08016ba9
 8016b88:	08016bb1 	.word	0x08016bb1
 8016b8c:	08016bb9 	.word	0x08016bb9
 8016b90:	2300      	movs	r3, #0
 8016b92:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8016b96:	e1b6      	b.n	8016f06 <UART_SetConfig+0x5a6>
 8016b98:	2304      	movs	r3, #4
 8016b9a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8016b9e:	e1b2      	b.n	8016f06 <UART_SetConfig+0x5a6>
 8016ba0:	2308      	movs	r3, #8
 8016ba2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8016ba6:	e1ae      	b.n	8016f06 <UART_SetConfig+0x5a6>
 8016ba8:	2310      	movs	r3, #16
 8016baa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8016bae:	e1aa      	b.n	8016f06 <UART_SetConfig+0x5a6>
 8016bb0:	2320      	movs	r3, #32
 8016bb2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8016bb6:	e1a6      	b.n	8016f06 <UART_SetConfig+0x5a6>
 8016bb8:	2340      	movs	r3, #64	@ 0x40
 8016bba:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8016bbe:	e1a2      	b.n	8016f06 <UART_SetConfig+0x5a6>
 8016bc0:	2380      	movs	r3, #128	@ 0x80
 8016bc2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8016bc6:	e19e      	b.n	8016f06 <UART_SetConfig+0x5a6>
 8016bc8:	697b      	ldr	r3, [r7, #20]
 8016bca:	681b      	ldr	r3, [r3, #0]
 8016bcc:	4a35      	ldr	r2, [pc, #212]	@ (8016ca4 <UART_SetConfig+0x344>)
 8016bce:	4293      	cmp	r3, r2
 8016bd0:	d130      	bne.n	8016c34 <UART_SetConfig+0x2d4>
 8016bd2:	4b31      	ldr	r3, [pc, #196]	@ (8016c98 <UART_SetConfig+0x338>)
 8016bd4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8016bd6:	f003 0307 	and.w	r3, r3, #7
 8016bda:	2b05      	cmp	r3, #5
 8016bdc:	d826      	bhi.n	8016c2c <UART_SetConfig+0x2cc>
 8016bde:	a201      	add	r2, pc, #4	@ (adr r2, 8016be4 <UART_SetConfig+0x284>)
 8016be0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8016be4:	08016bfd 	.word	0x08016bfd
 8016be8:	08016c05 	.word	0x08016c05
 8016bec:	08016c0d 	.word	0x08016c0d
 8016bf0:	08016c15 	.word	0x08016c15
 8016bf4:	08016c1d 	.word	0x08016c1d
 8016bf8:	08016c25 	.word	0x08016c25
 8016bfc:	2300      	movs	r3, #0
 8016bfe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8016c02:	e180      	b.n	8016f06 <UART_SetConfig+0x5a6>
 8016c04:	2304      	movs	r3, #4
 8016c06:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8016c0a:	e17c      	b.n	8016f06 <UART_SetConfig+0x5a6>
 8016c0c:	2308      	movs	r3, #8
 8016c0e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8016c12:	e178      	b.n	8016f06 <UART_SetConfig+0x5a6>
 8016c14:	2310      	movs	r3, #16
 8016c16:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8016c1a:	e174      	b.n	8016f06 <UART_SetConfig+0x5a6>
 8016c1c:	2320      	movs	r3, #32
 8016c1e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8016c22:	e170      	b.n	8016f06 <UART_SetConfig+0x5a6>
 8016c24:	2340      	movs	r3, #64	@ 0x40
 8016c26:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8016c2a:	e16c      	b.n	8016f06 <UART_SetConfig+0x5a6>
 8016c2c:	2380      	movs	r3, #128	@ 0x80
 8016c2e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8016c32:	e168      	b.n	8016f06 <UART_SetConfig+0x5a6>
 8016c34:	697b      	ldr	r3, [r7, #20]
 8016c36:	681b      	ldr	r3, [r3, #0]
 8016c38:	4a1b      	ldr	r2, [pc, #108]	@ (8016ca8 <UART_SetConfig+0x348>)
 8016c3a:	4293      	cmp	r3, r2
 8016c3c:	d142      	bne.n	8016cc4 <UART_SetConfig+0x364>
 8016c3e:	4b16      	ldr	r3, [pc, #88]	@ (8016c98 <UART_SetConfig+0x338>)
 8016c40:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8016c42:	f003 0307 	and.w	r3, r3, #7
 8016c46:	2b05      	cmp	r3, #5
 8016c48:	d838      	bhi.n	8016cbc <UART_SetConfig+0x35c>
 8016c4a:	a201      	add	r2, pc, #4	@ (adr r2, 8016c50 <UART_SetConfig+0x2f0>)
 8016c4c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8016c50:	08016c69 	.word	0x08016c69
 8016c54:	08016c71 	.word	0x08016c71
 8016c58:	08016c79 	.word	0x08016c79
 8016c5c:	08016c81 	.word	0x08016c81
 8016c60:	08016cad 	.word	0x08016cad
 8016c64:	08016cb5 	.word	0x08016cb5
 8016c68:	2300      	movs	r3, #0
 8016c6a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8016c6e:	e14a      	b.n	8016f06 <UART_SetConfig+0x5a6>
 8016c70:	2304      	movs	r3, #4
 8016c72:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8016c76:	e146      	b.n	8016f06 <UART_SetConfig+0x5a6>
 8016c78:	2308      	movs	r3, #8
 8016c7a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8016c7e:	e142      	b.n	8016f06 <UART_SetConfig+0x5a6>
 8016c80:	2310      	movs	r3, #16
 8016c82:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8016c86:	e13e      	b.n	8016f06 <UART_SetConfig+0x5a6>
 8016c88:	cfff69f3 	.word	0xcfff69f3
 8016c8c:	58000c00 	.word	0x58000c00
 8016c90:	11fff4ff 	.word	0x11fff4ff
 8016c94:	40011000 	.word	0x40011000
 8016c98:	58024400 	.word	0x58024400
 8016c9c:	40004400 	.word	0x40004400
 8016ca0:	40004800 	.word	0x40004800
 8016ca4:	40004c00 	.word	0x40004c00
 8016ca8:	40005000 	.word	0x40005000
 8016cac:	2320      	movs	r3, #32
 8016cae:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8016cb2:	e128      	b.n	8016f06 <UART_SetConfig+0x5a6>
 8016cb4:	2340      	movs	r3, #64	@ 0x40
 8016cb6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8016cba:	e124      	b.n	8016f06 <UART_SetConfig+0x5a6>
 8016cbc:	2380      	movs	r3, #128	@ 0x80
 8016cbe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8016cc2:	e120      	b.n	8016f06 <UART_SetConfig+0x5a6>
 8016cc4:	697b      	ldr	r3, [r7, #20]
 8016cc6:	681b      	ldr	r3, [r3, #0]
 8016cc8:	4acb      	ldr	r2, [pc, #812]	@ (8016ff8 <UART_SetConfig+0x698>)
 8016cca:	4293      	cmp	r3, r2
 8016ccc:	d176      	bne.n	8016dbc <UART_SetConfig+0x45c>
 8016cce:	4bcb      	ldr	r3, [pc, #812]	@ (8016ffc <UART_SetConfig+0x69c>)
 8016cd0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8016cd2:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8016cd6:	2b28      	cmp	r3, #40	@ 0x28
 8016cd8:	d86c      	bhi.n	8016db4 <UART_SetConfig+0x454>
 8016cda:	a201      	add	r2, pc, #4	@ (adr r2, 8016ce0 <UART_SetConfig+0x380>)
 8016cdc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8016ce0:	08016d85 	.word	0x08016d85
 8016ce4:	08016db5 	.word	0x08016db5
 8016ce8:	08016db5 	.word	0x08016db5
 8016cec:	08016db5 	.word	0x08016db5
 8016cf0:	08016db5 	.word	0x08016db5
 8016cf4:	08016db5 	.word	0x08016db5
 8016cf8:	08016db5 	.word	0x08016db5
 8016cfc:	08016db5 	.word	0x08016db5
 8016d00:	08016d8d 	.word	0x08016d8d
 8016d04:	08016db5 	.word	0x08016db5
 8016d08:	08016db5 	.word	0x08016db5
 8016d0c:	08016db5 	.word	0x08016db5
 8016d10:	08016db5 	.word	0x08016db5
 8016d14:	08016db5 	.word	0x08016db5
 8016d18:	08016db5 	.word	0x08016db5
 8016d1c:	08016db5 	.word	0x08016db5
 8016d20:	08016d95 	.word	0x08016d95
 8016d24:	08016db5 	.word	0x08016db5
 8016d28:	08016db5 	.word	0x08016db5
 8016d2c:	08016db5 	.word	0x08016db5
 8016d30:	08016db5 	.word	0x08016db5
 8016d34:	08016db5 	.word	0x08016db5
 8016d38:	08016db5 	.word	0x08016db5
 8016d3c:	08016db5 	.word	0x08016db5
 8016d40:	08016d9d 	.word	0x08016d9d
 8016d44:	08016db5 	.word	0x08016db5
 8016d48:	08016db5 	.word	0x08016db5
 8016d4c:	08016db5 	.word	0x08016db5
 8016d50:	08016db5 	.word	0x08016db5
 8016d54:	08016db5 	.word	0x08016db5
 8016d58:	08016db5 	.word	0x08016db5
 8016d5c:	08016db5 	.word	0x08016db5
 8016d60:	08016da5 	.word	0x08016da5
 8016d64:	08016db5 	.word	0x08016db5
 8016d68:	08016db5 	.word	0x08016db5
 8016d6c:	08016db5 	.word	0x08016db5
 8016d70:	08016db5 	.word	0x08016db5
 8016d74:	08016db5 	.word	0x08016db5
 8016d78:	08016db5 	.word	0x08016db5
 8016d7c:	08016db5 	.word	0x08016db5
 8016d80:	08016dad 	.word	0x08016dad
 8016d84:	2301      	movs	r3, #1
 8016d86:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8016d8a:	e0bc      	b.n	8016f06 <UART_SetConfig+0x5a6>
 8016d8c:	2304      	movs	r3, #4
 8016d8e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8016d92:	e0b8      	b.n	8016f06 <UART_SetConfig+0x5a6>
 8016d94:	2308      	movs	r3, #8
 8016d96:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8016d9a:	e0b4      	b.n	8016f06 <UART_SetConfig+0x5a6>
 8016d9c:	2310      	movs	r3, #16
 8016d9e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8016da2:	e0b0      	b.n	8016f06 <UART_SetConfig+0x5a6>
 8016da4:	2320      	movs	r3, #32
 8016da6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8016daa:	e0ac      	b.n	8016f06 <UART_SetConfig+0x5a6>
 8016dac:	2340      	movs	r3, #64	@ 0x40
 8016dae:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8016db2:	e0a8      	b.n	8016f06 <UART_SetConfig+0x5a6>
 8016db4:	2380      	movs	r3, #128	@ 0x80
 8016db6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8016dba:	e0a4      	b.n	8016f06 <UART_SetConfig+0x5a6>
 8016dbc:	697b      	ldr	r3, [r7, #20]
 8016dbe:	681b      	ldr	r3, [r3, #0]
 8016dc0:	4a8f      	ldr	r2, [pc, #572]	@ (8017000 <UART_SetConfig+0x6a0>)
 8016dc2:	4293      	cmp	r3, r2
 8016dc4:	d130      	bne.n	8016e28 <UART_SetConfig+0x4c8>
 8016dc6:	4b8d      	ldr	r3, [pc, #564]	@ (8016ffc <UART_SetConfig+0x69c>)
 8016dc8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8016dca:	f003 0307 	and.w	r3, r3, #7
 8016dce:	2b05      	cmp	r3, #5
 8016dd0:	d826      	bhi.n	8016e20 <UART_SetConfig+0x4c0>
 8016dd2:	a201      	add	r2, pc, #4	@ (adr r2, 8016dd8 <UART_SetConfig+0x478>)
 8016dd4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8016dd8:	08016df1 	.word	0x08016df1
 8016ddc:	08016df9 	.word	0x08016df9
 8016de0:	08016e01 	.word	0x08016e01
 8016de4:	08016e09 	.word	0x08016e09
 8016de8:	08016e11 	.word	0x08016e11
 8016dec:	08016e19 	.word	0x08016e19
 8016df0:	2300      	movs	r3, #0
 8016df2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8016df6:	e086      	b.n	8016f06 <UART_SetConfig+0x5a6>
 8016df8:	2304      	movs	r3, #4
 8016dfa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8016dfe:	e082      	b.n	8016f06 <UART_SetConfig+0x5a6>
 8016e00:	2308      	movs	r3, #8
 8016e02:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8016e06:	e07e      	b.n	8016f06 <UART_SetConfig+0x5a6>
 8016e08:	2310      	movs	r3, #16
 8016e0a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8016e0e:	e07a      	b.n	8016f06 <UART_SetConfig+0x5a6>
 8016e10:	2320      	movs	r3, #32
 8016e12:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8016e16:	e076      	b.n	8016f06 <UART_SetConfig+0x5a6>
 8016e18:	2340      	movs	r3, #64	@ 0x40
 8016e1a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8016e1e:	e072      	b.n	8016f06 <UART_SetConfig+0x5a6>
 8016e20:	2380      	movs	r3, #128	@ 0x80
 8016e22:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8016e26:	e06e      	b.n	8016f06 <UART_SetConfig+0x5a6>
 8016e28:	697b      	ldr	r3, [r7, #20]
 8016e2a:	681b      	ldr	r3, [r3, #0]
 8016e2c:	4a75      	ldr	r2, [pc, #468]	@ (8017004 <UART_SetConfig+0x6a4>)
 8016e2e:	4293      	cmp	r3, r2
 8016e30:	d130      	bne.n	8016e94 <UART_SetConfig+0x534>
 8016e32:	4b72      	ldr	r3, [pc, #456]	@ (8016ffc <UART_SetConfig+0x69c>)
 8016e34:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8016e36:	f003 0307 	and.w	r3, r3, #7
 8016e3a:	2b05      	cmp	r3, #5
 8016e3c:	d826      	bhi.n	8016e8c <UART_SetConfig+0x52c>
 8016e3e:	a201      	add	r2, pc, #4	@ (adr r2, 8016e44 <UART_SetConfig+0x4e4>)
 8016e40:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8016e44:	08016e5d 	.word	0x08016e5d
 8016e48:	08016e65 	.word	0x08016e65
 8016e4c:	08016e6d 	.word	0x08016e6d
 8016e50:	08016e75 	.word	0x08016e75
 8016e54:	08016e7d 	.word	0x08016e7d
 8016e58:	08016e85 	.word	0x08016e85
 8016e5c:	2300      	movs	r3, #0
 8016e5e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8016e62:	e050      	b.n	8016f06 <UART_SetConfig+0x5a6>
 8016e64:	2304      	movs	r3, #4
 8016e66:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8016e6a:	e04c      	b.n	8016f06 <UART_SetConfig+0x5a6>
 8016e6c:	2308      	movs	r3, #8
 8016e6e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8016e72:	e048      	b.n	8016f06 <UART_SetConfig+0x5a6>
 8016e74:	2310      	movs	r3, #16
 8016e76:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8016e7a:	e044      	b.n	8016f06 <UART_SetConfig+0x5a6>
 8016e7c:	2320      	movs	r3, #32
 8016e7e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8016e82:	e040      	b.n	8016f06 <UART_SetConfig+0x5a6>
 8016e84:	2340      	movs	r3, #64	@ 0x40
 8016e86:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8016e8a:	e03c      	b.n	8016f06 <UART_SetConfig+0x5a6>
 8016e8c:	2380      	movs	r3, #128	@ 0x80
 8016e8e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8016e92:	e038      	b.n	8016f06 <UART_SetConfig+0x5a6>
 8016e94:	697b      	ldr	r3, [r7, #20]
 8016e96:	681b      	ldr	r3, [r3, #0]
 8016e98:	4a5b      	ldr	r2, [pc, #364]	@ (8017008 <UART_SetConfig+0x6a8>)
 8016e9a:	4293      	cmp	r3, r2
 8016e9c:	d130      	bne.n	8016f00 <UART_SetConfig+0x5a0>
 8016e9e:	4b57      	ldr	r3, [pc, #348]	@ (8016ffc <UART_SetConfig+0x69c>)
 8016ea0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8016ea2:	f003 0307 	and.w	r3, r3, #7
 8016ea6:	2b05      	cmp	r3, #5
 8016ea8:	d826      	bhi.n	8016ef8 <UART_SetConfig+0x598>
 8016eaa:	a201      	add	r2, pc, #4	@ (adr r2, 8016eb0 <UART_SetConfig+0x550>)
 8016eac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8016eb0:	08016ec9 	.word	0x08016ec9
 8016eb4:	08016ed1 	.word	0x08016ed1
 8016eb8:	08016ed9 	.word	0x08016ed9
 8016ebc:	08016ee1 	.word	0x08016ee1
 8016ec0:	08016ee9 	.word	0x08016ee9
 8016ec4:	08016ef1 	.word	0x08016ef1
 8016ec8:	2302      	movs	r3, #2
 8016eca:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8016ece:	e01a      	b.n	8016f06 <UART_SetConfig+0x5a6>
 8016ed0:	2304      	movs	r3, #4
 8016ed2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8016ed6:	e016      	b.n	8016f06 <UART_SetConfig+0x5a6>
 8016ed8:	2308      	movs	r3, #8
 8016eda:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8016ede:	e012      	b.n	8016f06 <UART_SetConfig+0x5a6>
 8016ee0:	2310      	movs	r3, #16
 8016ee2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8016ee6:	e00e      	b.n	8016f06 <UART_SetConfig+0x5a6>
 8016ee8:	2320      	movs	r3, #32
 8016eea:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8016eee:	e00a      	b.n	8016f06 <UART_SetConfig+0x5a6>
 8016ef0:	2340      	movs	r3, #64	@ 0x40
 8016ef2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8016ef6:	e006      	b.n	8016f06 <UART_SetConfig+0x5a6>
 8016ef8:	2380      	movs	r3, #128	@ 0x80
 8016efa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8016efe:	e002      	b.n	8016f06 <UART_SetConfig+0x5a6>
 8016f00:	2380      	movs	r3, #128	@ 0x80
 8016f02:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8016f06:	697b      	ldr	r3, [r7, #20]
 8016f08:	681b      	ldr	r3, [r3, #0]
 8016f0a:	4a3f      	ldr	r2, [pc, #252]	@ (8017008 <UART_SetConfig+0x6a8>)
 8016f0c:	4293      	cmp	r3, r2
 8016f0e:	f040 80f8 	bne.w	8017102 <UART_SetConfig+0x7a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8016f12:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8016f16:	2b20      	cmp	r3, #32
 8016f18:	dc46      	bgt.n	8016fa8 <UART_SetConfig+0x648>
 8016f1a:	2b02      	cmp	r3, #2
 8016f1c:	f2c0 8082 	blt.w	8017024 <UART_SetConfig+0x6c4>
 8016f20:	3b02      	subs	r3, #2
 8016f22:	2b1e      	cmp	r3, #30
 8016f24:	d87e      	bhi.n	8017024 <UART_SetConfig+0x6c4>
 8016f26:	a201      	add	r2, pc, #4	@ (adr r2, 8016f2c <UART_SetConfig+0x5cc>)
 8016f28:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8016f2c:	08016faf 	.word	0x08016faf
 8016f30:	08017025 	.word	0x08017025
 8016f34:	08016fb7 	.word	0x08016fb7
 8016f38:	08017025 	.word	0x08017025
 8016f3c:	08017025 	.word	0x08017025
 8016f40:	08017025 	.word	0x08017025
 8016f44:	08016fc7 	.word	0x08016fc7
 8016f48:	08017025 	.word	0x08017025
 8016f4c:	08017025 	.word	0x08017025
 8016f50:	08017025 	.word	0x08017025
 8016f54:	08017025 	.word	0x08017025
 8016f58:	08017025 	.word	0x08017025
 8016f5c:	08017025 	.word	0x08017025
 8016f60:	08017025 	.word	0x08017025
 8016f64:	08016fd7 	.word	0x08016fd7
 8016f68:	08017025 	.word	0x08017025
 8016f6c:	08017025 	.word	0x08017025
 8016f70:	08017025 	.word	0x08017025
 8016f74:	08017025 	.word	0x08017025
 8016f78:	08017025 	.word	0x08017025
 8016f7c:	08017025 	.word	0x08017025
 8016f80:	08017025 	.word	0x08017025
 8016f84:	08017025 	.word	0x08017025
 8016f88:	08017025 	.word	0x08017025
 8016f8c:	08017025 	.word	0x08017025
 8016f90:	08017025 	.word	0x08017025
 8016f94:	08017025 	.word	0x08017025
 8016f98:	08017025 	.word	0x08017025
 8016f9c:	08017025 	.word	0x08017025
 8016fa0:	08017025 	.word	0x08017025
 8016fa4:	08017017 	.word	0x08017017
 8016fa8:	2b40      	cmp	r3, #64	@ 0x40
 8016faa:	d037      	beq.n	801701c <UART_SetConfig+0x6bc>
 8016fac:	e03a      	b.n	8017024 <UART_SetConfig+0x6c4>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 8016fae:	f7fd f9f7 	bl	80143a0 <HAL_RCCEx_GetD3PCLK1Freq>
 8016fb2:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8016fb4:	e03c      	b.n	8017030 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8016fb6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8016fba:	4618      	mov	r0, r3
 8016fbc:	f7fd fa06 	bl	80143cc <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8016fc0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8016fc2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8016fc4:	e034      	b.n	8017030 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8016fc6:	f107 0318 	add.w	r3, r7, #24
 8016fca:	4618      	mov	r0, r3
 8016fcc:	f7fd fb52 	bl	8014674 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8016fd0:	69fb      	ldr	r3, [r7, #28]
 8016fd2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8016fd4:	e02c      	b.n	8017030 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8016fd6:	4b09      	ldr	r3, [pc, #36]	@ (8016ffc <UART_SetConfig+0x69c>)
 8016fd8:	681b      	ldr	r3, [r3, #0]
 8016fda:	f003 0320 	and.w	r3, r3, #32
 8016fde:	2b00      	cmp	r3, #0
 8016fe0:	d016      	beq.n	8017010 <UART_SetConfig+0x6b0>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8016fe2:	4b06      	ldr	r3, [pc, #24]	@ (8016ffc <UART_SetConfig+0x69c>)
 8016fe4:	681b      	ldr	r3, [r3, #0]
 8016fe6:	08db      	lsrs	r3, r3, #3
 8016fe8:	f003 0303 	and.w	r3, r3, #3
 8016fec:	4a07      	ldr	r2, [pc, #28]	@ (801700c <UART_SetConfig+0x6ac>)
 8016fee:	fa22 f303 	lsr.w	r3, r2, r3
 8016ff2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8016ff4:	e01c      	b.n	8017030 <UART_SetConfig+0x6d0>
 8016ff6:	bf00      	nop
 8016ff8:	40011400 	.word	0x40011400
 8016ffc:	58024400 	.word	0x58024400
 8017000:	40007800 	.word	0x40007800
 8017004:	40007c00 	.word	0x40007c00
 8017008:	58000c00 	.word	0x58000c00
 801700c:	03d09000 	.word	0x03d09000
          pclk = (uint32_t) HSI_VALUE;
 8017010:	4b9d      	ldr	r3, [pc, #628]	@ (8017288 <UART_SetConfig+0x928>)
 8017012:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8017014:	e00c      	b.n	8017030 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8017016:	4b9d      	ldr	r3, [pc, #628]	@ (801728c <UART_SetConfig+0x92c>)
 8017018:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 801701a:	e009      	b.n	8017030 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 801701c:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8017020:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8017022:	e005      	b.n	8017030 <UART_SetConfig+0x6d0>
      default:
        pclk = 0U;
 8017024:	2300      	movs	r3, #0
 8017026:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 8017028:	2301      	movs	r3, #1
 801702a:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 801702e:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8017030:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8017032:	2b00      	cmp	r3, #0
 8017034:	f000 81de 	beq.w	80173f4 <UART_SetConfig+0xa94>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8017038:	697b      	ldr	r3, [r7, #20]
 801703a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801703c:	4a94      	ldr	r2, [pc, #592]	@ (8017290 <UART_SetConfig+0x930>)
 801703e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8017042:	461a      	mov	r2, r3
 8017044:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8017046:	fbb3 f3f2 	udiv	r3, r3, r2
 801704a:	633b      	str	r3, [r7, #48]	@ 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 801704c:	697b      	ldr	r3, [r7, #20]
 801704e:	685a      	ldr	r2, [r3, #4]
 8017050:	4613      	mov	r3, r2
 8017052:	005b      	lsls	r3, r3, #1
 8017054:	4413      	add	r3, r2
 8017056:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8017058:	429a      	cmp	r2, r3
 801705a:	d305      	bcc.n	8017068 <UART_SetConfig+0x708>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 801705c:	697b      	ldr	r3, [r7, #20]
 801705e:	685b      	ldr	r3, [r3, #4]
 8017060:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8017062:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8017064:	429a      	cmp	r2, r3
 8017066:	d903      	bls.n	8017070 <UART_SetConfig+0x710>
      {
        ret = HAL_ERROR;
 8017068:	2301      	movs	r3, #1
 801706a:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 801706e:	e1c1      	b.n	80173f4 <UART_SetConfig+0xa94>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8017070:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8017072:	2200      	movs	r2, #0
 8017074:	60bb      	str	r3, [r7, #8]
 8017076:	60fa      	str	r2, [r7, #12]
 8017078:	697b      	ldr	r3, [r7, #20]
 801707a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801707c:	4a84      	ldr	r2, [pc, #528]	@ (8017290 <UART_SetConfig+0x930>)
 801707e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8017082:	b29b      	uxth	r3, r3
 8017084:	2200      	movs	r2, #0
 8017086:	603b      	str	r3, [r7, #0]
 8017088:	607a      	str	r2, [r7, #4]
 801708a:	e9d7 2300 	ldrd	r2, r3, [r7]
 801708e:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8017092:	f7e9 f97d 	bl	8000390 <__aeabi_uldivmod>
 8017096:	4602      	mov	r2, r0
 8017098:	460b      	mov	r3, r1
 801709a:	4610      	mov	r0, r2
 801709c:	4619      	mov	r1, r3
 801709e:	f04f 0200 	mov.w	r2, #0
 80170a2:	f04f 0300 	mov.w	r3, #0
 80170a6:	020b      	lsls	r3, r1, #8
 80170a8:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 80170ac:	0202      	lsls	r2, r0, #8
 80170ae:	6979      	ldr	r1, [r7, #20]
 80170b0:	6849      	ldr	r1, [r1, #4]
 80170b2:	0849      	lsrs	r1, r1, #1
 80170b4:	2000      	movs	r0, #0
 80170b6:	460c      	mov	r4, r1
 80170b8:	4605      	mov	r5, r0
 80170ba:	eb12 0804 	adds.w	r8, r2, r4
 80170be:	eb43 0905 	adc.w	r9, r3, r5
 80170c2:	697b      	ldr	r3, [r7, #20]
 80170c4:	685b      	ldr	r3, [r3, #4]
 80170c6:	2200      	movs	r2, #0
 80170c8:	469a      	mov	sl, r3
 80170ca:	4693      	mov	fp, r2
 80170cc:	4652      	mov	r2, sl
 80170ce:	465b      	mov	r3, fp
 80170d0:	4640      	mov	r0, r8
 80170d2:	4649      	mov	r1, r9
 80170d4:	f7e9 f95c 	bl	8000390 <__aeabi_uldivmod>
 80170d8:	4602      	mov	r2, r0
 80170da:	460b      	mov	r3, r1
 80170dc:	4613      	mov	r3, r2
 80170de:	63bb      	str	r3, [r7, #56]	@ 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80170e0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80170e2:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80170e6:	d308      	bcc.n	80170fa <UART_SetConfig+0x79a>
 80170e8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80170ea:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80170ee:	d204      	bcs.n	80170fa <UART_SetConfig+0x79a>
        {
          huart->Instance->BRR = usartdiv;
 80170f0:	697b      	ldr	r3, [r7, #20]
 80170f2:	681b      	ldr	r3, [r3, #0]
 80170f4:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80170f6:	60da      	str	r2, [r3, #12]
 80170f8:	e17c      	b.n	80173f4 <UART_SetConfig+0xa94>
        }
        else
        {
          ret = HAL_ERROR;
 80170fa:	2301      	movs	r3, #1
 80170fc:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 8017100:	e178      	b.n	80173f4 <UART_SetConfig+0xa94>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8017102:	697b      	ldr	r3, [r7, #20]
 8017104:	69db      	ldr	r3, [r3, #28]
 8017106:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 801710a:	f040 80c5 	bne.w	8017298 <UART_SetConfig+0x938>
  {
    switch (clocksource)
 801710e:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8017112:	2b20      	cmp	r3, #32
 8017114:	dc48      	bgt.n	80171a8 <UART_SetConfig+0x848>
 8017116:	2b00      	cmp	r3, #0
 8017118:	db7b      	blt.n	8017212 <UART_SetConfig+0x8b2>
 801711a:	2b20      	cmp	r3, #32
 801711c:	d879      	bhi.n	8017212 <UART_SetConfig+0x8b2>
 801711e:	a201      	add	r2, pc, #4	@ (adr r2, 8017124 <UART_SetConfig+0x7c4>)
 8017120:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8017124:	080171af 	.word	0x080171af
 8017128:	080171b7 	.word	0x080171b7
 801712c:	08017213 	.word	0x08017213
 8017130:	08017213 	.word	0x08017213
 8017134:	080171bf 	.word	0x080171bf
 8017138:	08017213 	.word	0x08017213
 801713c:	08017213 	.word	0x08017213
 8017140:	08017213 	.word	0x08017213
 8017144:	080171cf 	.word	0x080171cf
 8017148:	08017213 	.word	0x08017213
 801714c:	08017213 	.word	0x08017213
 8017150:	08017213 	.word	0x08017213
 8017154:	08017213 	.word	0x08017213
 8017158:	08017213 	.word	0x08017213
 801715c:	08017213 	.word	0x08017213
 8017160:	08017213 	.word	0x08017213
 8017164:	080171df 	.word	0x080171df
 8017168:	08017213 	.word	0x08017213
 801716c:	08017213 	.word	0x08017213
 8017170:	08017213 	.word	0x08017213
 8017174:	08017213 	.word	0x08017213
 8017178:	08017213 	.word	0x08017213
 801717c:	08017213 	.word	0x08017213
 8017180:	08017213 	.word	0x08017213
 8017184:	08017213 	.word	0x08017213
 8017188:	08017213 	.word	0x08017213
 801718c:	08017213 	.word	0x08017213
 8017190:	08017213 	.word	0x08017213
 8017194:	08017213 	.word	0x08017213
 8017198:	08017213 	.word	0x08017213
 801719c:	08017213 	.word	0x08017213
 80171a0:	08017213 	.word	0x08017213
 80171a4:	08017205 	.word	0x08017205
 80171a8:	2b40      	cmp	r3, #64	@ 0x40
 80171aa:	d02e      	beq.n	801720a <UART_SetConfig+0x8aa>
 80171ac:	e031      	b.n	8017212 <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80171ae:	f7fb f901 	bl	80123b4 <HAL_RCC_GetPCLK1Freq>
 80171b2:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 80171b4:	e033      	b.n	801721e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80171b6:	f7fb f913 	bl	80123e0 <HAL_RCC_GetPCLK2Freq>
 80171ba:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 80171bc:	e02f      	b.n	801721e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80171be:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80171c2:	4618      	mov	r0, r3
 80171c4:	f7fd f902 	bl	80143cc <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 80171c8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80171ca:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80171cc:	e027      	b.n	801721e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80171ce:	f107 0318 	add.w	r3, r7, #24
 80171d2:	4618      	mov	r0, r3
 80171d4:	f7fd fa4e 	bl	8014674 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 80171d8:	69fb      	ldr	r3, [r7, #28]
 80171da:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80171dc:	e01f      	b.n	801721e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80171de:	4b2d      	ldr	r3, [pc, #180]	@ (8017294 <UART_SetConfig+0x934>)
 80171e0:	681b      	ldr	r3, [r3, #0]
 80171e2:	f003 0320 	and.w	r3, r3, #32
 80171e6:	2b00      	cmp	r3, #0
 80171e8:	d009      	beq.n	80171fe <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 80171ea:	4b2a      	ldr	r3, [pc, #168]	@ (8017294 <UART_SetConfig+0x934>)
 80171ec:	681b      	ldr	r3, [r3, #0]
 80171ee:	08db      	lsrs	r3, r3, #3
 80171f0:	f003 0303 	and.w	r3, r3, #3
 80171f4:	4a24      	ldr	r2, [pc, #144]	@ (8017288 <UART_SetConfig+0x928>)
 80171f6:	fa22 f303 	lsr.w	r3, r2, r3
 80171fa:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80171fc:	e00f      	b.n	801721e <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 80171fe:	4b22      	ldr	r3, [pc, #136]	@ (8017288 <UART_SetConfig+0x928>)
 8017200:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8017202:	e00c      	b.n	801721e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8017204:	4b21      	ldr	r3, [pc, #132]	@ (801728c <UART_SetConfig+0x92c>)
 8017206:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8017208:	e009      	b.n	801721e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 801720a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 801720e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8017210:	e005      	b.n	801721e <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 8017212:	2300      	movs	r3, #0
 8017214:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 8017216:	2301      	movs	r3, #1
 8017218:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 801721c:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 801721e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8017220:	2b00      	cmp	r3, #0
 8017222:	f000 80e7 	beq.w	80173f4 <UART_SetConfig+0xa94>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8017226:	697b      	ldr	r3, [r7, #20]
 8017228:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801722a:	4a19      	ldr	r2, [pc, #100]	@ (8017290 <UART_SetConfig+0x930>)
 801722c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8017230:	461a      	mov	r2, r3
 8017232:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8017234:	fbb3 f3f2 	udiv	r3, r3, r2
 8017238:	005a      	lsls	r2, r3, #1
 801723a:	697b      	ldr	r3, [r7, #20]
 801723c:	685b      	ldr	r3, [r3, #4]
 801723e:	085b      	lsrs	r3, r3, #1
 8017240:	441a      	add	r2, r3
 8017242:	697b      	ldr	r3, [r7, #20]
 8017244:	685b      	ldr	r3, [r3, #4]
 8017246:	fbb2 f3f3 	udiv	r3, r2, r3
 801724a:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 801724c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801724e:	2b0f      	cmp	r3, #15
 8017250:	d916      	bls.n	8017280 <UART_SetConfig+0x920>
 8017252:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8017254:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8017258:	d212      	bcs.n	8017280 <UART_SetConfig+0x920>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 801725a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801725c:	b29b      	uxth	r3, r3
 801725e:	f023 030f 	bic.w	r3, r3, #15
 8017262:	86fb      	strh	r3, [r7, #54]	@ 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8017264:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8017266:	085b      	lsrs	r3, r3, #1
 8017268:	b29b      	uxth	r3, r3
 801726a:	f003 0307 	and.w	r3, r3, #7
 801726e:	b29a      	uxth	r2, r3
 8017270:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8017272:	4313      	orrs	r3, r2
 8017274:	86fb      	strh	r3, [r7, #54]	@ 0x36
        huart->Instance->BRR = brrtemp;
 8017276:	697b      	ldr	r3, [r7, #20]
 8017278:	681b      	ldr	r3, [r3, #0]
 801727a:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 801727c:	60da      	str	r2, [r3, #12]
 801727e:	e0b9      	b.n	80173f4 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 8017280:	2301      	movs	r3, #1
 8017282:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 8017286:	e0b5      	b.n	80173f4 <UART_SetConfig+0xa94>
 8017288:	03d09000 	.word	0x03d09000
 801728c:	003d0900 	.word	0x003d0900
 8017290:	0801c178 	.word	0x0801c178
 8017294:	58024400 	.word	0x58024400
      }
    }
  }
  else
  {
    switch (clocksource)
 8017298:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 801729c:	2b20      	cmp	r3, #32
 801729e:	dc49      	bgt.n	8017334 <UART_SetConfig+0x9d4>
 80172a0:	2b00      	cmp	r3, #0
 80172a2:	db7c      	blt.n	801739e <UART_SetConfig+0xa3e>
 80172a4:	2b20      	cmp	r3, #32
 80172a6:	d87a      	bhi.n	801739e <UART_SetConfig+0xa3e>
 80172a8:	a201      	add	r2, pc, #4	@ (adr r2, 80172b0 <UART_SetConfig+0x950>)
 80172aa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80172ae:	bf00      	nop
 80172b0:	0801733b 	.word	0x0801733b
 80172b4:	08017343 	.word	0x08017343
 80172b8:	0801739f 	.word	0x0801739f
 80172bc:	0801739f 	.word	0x0801739f
 80172c0:	0801734b 	.word	0x0801734b
 80172c4:	0801739f 	.word	0x0801739f
 80172c8:	0801739f 	.word	0x0801739f
 80172cc:	0801739f 	.word	0x0801739f
 80172d0:	0801735b 	.word	0x0801735b
 80172d4:	0801739f 	.word	0x0801739f
 80172d8:	0801739f 	.word	0x0801739f
 80172dc:	0801739f 	.word	0x0801739f
 80172e0:	0801739f 	.word	0x0801739f
 80172e4:	0801739f 	.word	0x0801739f
 80172e8:	0801739f 	.word	0x0801739f
 80172ec:	0801739f 	.word	0x0801739f
 80172f0:	0801736b 	.word	0x0801736b
 80172f4:	0801739f 	.word	0x0801739f
 80172f8:	0801739f 	.word	0x0801739f
 80172fc:	0801739f 	.word	0x0801739f
 8017300:	0801739f 	.word	0x0801739f
 8017304:	0801739f 	.word	0x0801739f
 8017308:	0801739f 	.word	0x0801739f
 801730c:	0801739f 	.word	0x0801739f
 8017310:	0801739f 	.word	0x0801739f
 8017314:	0801739f 	.word	0x0801739f
 8017318:	0801739f 	.word	0x0801739f
 801731c:	0801739f 	.word	0x0801739f
 8017320:	0801739f 	.word	0x0801739f
 8017324:	0801739f 	.word	0x0801739f
 8017328:	0801739f 	.word	0x0801739f
 801732c:	0801739f 	.word	0x0801739f
 8017330:	08017391 	.word	0x08017391
 8017334:	2b40      	cmp	r3, #64	@ 0x40
 8017336:	d02e      	beq.n	8017396 <UART_SetConfig+0xa36>
 8017338:	e031      	b.n	801739e <UART_SetConfig+0xa3e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 801733a:	f7fb f83b 	bl	80123b4 <HAL_RCC_GetPCLK1Freq>
 801733e:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8017340:	e033      	b.n	80173aa <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8017342:	f7fb f84d 	bl	80123e0 <HAL_RCC_GetPCLK2Freq>
 8017346:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8017348:	e02f      	b.n	80173aa <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 801734a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 801734e:	4618      	mov	r0, r3
 8017350:	f7fd f83c 	bl	80143cc <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8017354:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8017356:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8017358:	e027      	b.n	80173aa <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 801735a:	f107 0318 	add.w	r3, r7, #24
 801735e:	4618      	mov	r0, r3
 8017360:	f7fd f988 	bl	8014674 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8017364:	69fb      	ldr	r3, [r7, #28]
 8017366:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8017368:	e01f      	b.n	80173aa <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 801736a:	4b2d      	ldr	r3, [pc, #180]	@ (8017420 <UART_SetConfig+0xac0>)
 801736c:	681b      	ldr	r3, [r3, #0]
 801736e:	f003 0320 	and.w	r3, r3, #32
 8017372:	2b00      	cmp	r3, #0
 8017374:	d009      	beq.n	801738a <UART_SetConfig+0xa2a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8017376:	4b2a      	ldr	r3, [pc, #168]	@ (8017420 <UART_SetConfig+0xac0>)
 8017378:	681b      	ldr	r3, [r3, #0]
 801737a:	08db      	lsrs	r3, r3, #3
 801737c:	f003 0303 	and.w	r3, r3, #3
 8017380:	4a28      	ldr	r2, [pc, #160]	@ (8017424 <UART_SetConfig+0xac4>)
 8017382:	fa22 f303 	lsr.w	r3, r2, r3
 8017386:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8017388:	e00f      	b.n	80173aa <UART_SetConfig+0xa4a>
          pclk = (uint32_t) HSI_VALUE;
 801738a:	4b26      	ldr	r3, [pc, #152]	@ (8017424 <UART_SetConfig+0xac4>)
 801738c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 801738e:	e00c      	b.n	80173aa <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8017390:	4b25      	ldr	r3, [pc, #148]	@ (8017428 <UART_SetConfig+0xac8>)
 8017392:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8017394:	e009      	b.n	80173aa <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8017396:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 801739a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 801739c:	e005      	b.n	80173aa <UART_SetConfig+0xa4a>
      default:
        pclk = 0U;
 801739e:	2300      	movs	r3, #0
 80173a0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 80173a2:	2301      	movs	r3, #1
 80173a4:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 80173a8:	bf00      	nop
    }

    if (pclk != 0U)
 80173aa:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80173ac:	2b00      	cmp	r3, #0
 80173ae:	d021      	beq.n	80173f4 <UART_SetConfig+0xa94>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80173b0:	697b      	ldr	r3, [r7, #20]
 80173b2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80173b4:	4a1d      	ldr	r2, [pc, #116]	@ (801742c <UART_SetConfig+0xacc>)
 80173b6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80173ba:	461a      	mov	r2, r3
 80173bc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80173be:	fbb3 f2f2 	udiv	r2, r3, r2
 80173c2:	697b      	ldr	r3, [r7, #20]
 80173c4:	685b      	ldr	r3, [r3, #4]
 80173c6:	085b      	lsrs	r3, r3, #1
 80173c8:	441a      	add	r2, r3
 80173ca:	697b      	ldr	r3, [r7, #20]
 80173cc:	685b      	ldr	r3, [r3, #4]
 80173ce:	fbb2 f3f3 	udiv	r3, r2, r3
 80173d2:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80173d4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80173d6:	2b0f      	cmp	r3, #15
 80173d8:	d909      	bls.n	80173ee <UART_SetConfig+0xa8e>
 80173da:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80173dc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80173e0:	d205      	bcs.n	80173ee <UART_SetConfig+0xa8e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80173e2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80173e4:	b29a      	uxth	r2, r3
 80173e6:	697b      	ldr	r3, [r7, #20]
 80173e8:	681b      	ldr	r3, [r3, #0]
 80173ea:	60da      	str	r2, [r3, #12]
 80173ec:	e002      	b.n	80173f4 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 80173ee:	2301      	movs	r3, #1
 80173f0:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 80173f4:	697b      	ldr	r3, [r7, #20]
 80173f6:	2201      	movs	r2, #1
 80173f8:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 80173fc:	697b      	ldr	r3, [r7, #20]
 80173fe:	2201      	movs	r2, #1
 8017400:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8017404:	697b      	ldr	r3, [r7, #20]
 8017406:	2200      	movs	r2, #0
 8017408:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 801740a:	697b      	ldr	r3, [r7, #20]
 801740c:	2200      	movs	r2, #0
 801740e:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 8017410:	f897 3042 	ldrb.w	r3, [r7, #66]	@ 0x42
}
 8017414:	4618      	mov	r0, r3
 8017416:	3748      	adds	r7, #72	@ 0x48
 8017418:	46bd      	mov	sp, r7
 801741a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 801741e:	bf00      	nop
 8017420:	58024400 	.word	0x58024400
 8017424:	03d09000 	.word	0x03d09000
 8017428:	003d0900 	.word	0x003d0900
 801742c:	0801c178 	.word	0x0801c178

08017430 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8017430:	b480      	push	{r7}
 8017432:	b083      	sub	sp, #12
 8017434:	af00      	add	r7, sp, #0
 8017436:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8017438:	687b      	ldr	r3, [r7, #4]
 801743a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801743c:	f003 0301 	and.w	r3, r3, #1
 8017440:	2b00      	cmp	r3, #0
 8017442:	d00a      	beq.n	801745a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8017444:	687b      	ldr	r3, [r7, #4]
 8017446:	681b      	ldr	r3, [r3, #0]
 8017448:	685b      	ldr	r3, [r3, #4]
 801744a:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 801744e:	687b      	ldr	r3, [r7, #4]
 8017450:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8017452:	687b      	ldr	r3, [r7, #4]
 8017454:	681b      	ldr	r3, [r3, #0]
 8017456:	430a      	orrs	r2, r1
 8017458:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 801745a:	687b      	ldr	r3, [r7, #4]
 801745c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801745e:	f003 0302 	and.w	r3, r3, #2
 8017462:	2b00      	cmp	r3, #0
 8017464:	d00a      	beq.n	801747c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8017466:	687b      	ldr	r3, [r7, #4]
 8017468:	681b      	ldr	r3, [r3, #0]
 801746a:	685b      	ldr	r3, [r3, #4]
 801746c:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8017470:	687b      	ldr	r3, [r7, #4]
 8017472:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8017474:	687b      	ldr	r3, [r7, #4]
 8017476:	681b      	ldr	r3, [r3, #0]
 8017478:	430a      	orrs	r2, r1
 801747a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 801747c:	687b      	ldr	r3, [r7, #4]
 801747e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8017480:	f003 0304 	and.w	r3, r3, #4
 8017484:	2b00      	cmp	r3, #0
 8017486:	d00a      	beq.n	801749e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8017488:	687b      	ldr	r3, [r7, #4]
 801748a:	681b      	ldr	r3, [r3, #0]
 801748c:	685b      	ldr	r3, [r3, #4]
 801748e:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8017492:	687b      	ldr	r3, [r7, #4]
 8017494:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8017496:	687b      	ldr	r3, [r7, #4]
 8017498:	681b      	ldr	r3, [r3, #0]
 801749a:	430a      	orrs	r2, r1
 801749c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 801749e:	687b      	ldr	r3, [r7, #4]
 80174a0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80174a2:	f003 0308 	and.w	r3, r3, #8
 80174a6:	2b00      	cmp	r3, #0
 80174a8:	d00a      	beq.n	80174c0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80174aa:	687b      	ldr	r3, [r7, #4]
 80174ac:	681b      	ldr	r3, [r3, #0]
 80174ae:	685b      	ldr	r3, [r3, #4]
 80174b0:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 80174b4:	687b      	ldr	r3, [r7, #4]
 80174b6:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80174b8:	687b      	ldr	r3, [r7, #4]
 80174ba:	681b      	ldr	r3, [r3, #0]
 80174bc:	430a      	orrs	r2, r1
 80174be:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80174c0:	687b      	ldr	r3, [r7, #4]
 80174c2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80174c4:	f003 0310 	and.w	r3, r3, #16
 80174c8:	2b00      	cmp	r3, #0
 80174ca:	d00a      	beq.n	80174e2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80174cc:	687b      	ldr	r3, [r7, #4]
 80174ce:	681b      	ldr	r3, [r3, #0]
 80174d0:	689b      	ldr	r3, [r3, #8]
 80174d2:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 80174d6:	687b      	ldr	r3, [r7, #4]
 80174d8:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80174da:	687b      	ldr	r3, [r7, #4]
 80174dc:	681b      	ldr	r3, [r3, #0]
 80174de:	430a      	orrs	r2, r1
 80174e0:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80174e2:	687b      	ldr	r3, [r7, #4]
 80174e4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80174e6:	f003 0320 	and.w	r3, r3, #32
 80174ea:	2b00      	cmp	r3, #0
 80174ec:	d00a      	beq.n	8017504 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80174ee:	687b      	ldr	r3, [r7, #4]
 80174f0:	681b      	ldr	r3, [r3, #0]
 80174f2:	689b      	ldr	r3, [r3, #8]
 80174f4:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 80174f8:	687b      	ldr	r3, [r7, #4]
 80174fa:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80174fc:	687b      	ldr	r3, [r7, #4]
 80174fe:	681b      	ldr	r3, [r3, #0]
 8017500:	430a      	orrs	r2, r1
 8017502:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8017504:	687b      	ldr	r3, [r7, #4]
 8017506:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8017508:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 801750c:	2b00      	cmp	r3, #0
 801750e:	d01a      	beq.n	8017546 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8017510:	687b      	ldr	r3, [r7, #4]
 8017512:	681b      	ldr	r3, [r3, #0]
 8017514:	685b      	ldr	r3, [r3, #4]
 8017516:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 801751a:	687b      	ldr	r3, [r7, #4]
 801751c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 801751e:	687b      	ldr	r3, [r7, #4]
 8017520:	681b      	ldr	r3, [r3, #0]
 8017522:	430a      	orrs	r2, r1
 8017524:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8017526:	687b      	ldr	r3, [r7, #4]
 8017528:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 801752a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 801752e:	d10a      	bne.n	8017546 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8017530:	687b      	ldr	r3, [r7, #4]
 8017532:	681b      	ldr	r3, [r3, #0]
 8017534:	685b      	ldr	r3, [r3, #4]
 8017536:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 801753a:	687b      	ldr	r3, [r7, #4]
 801753c:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 801753e:	687b      	ldr	r3, [r7, #4]
 8017540:	681b      	ldr	r3, [r3, #0]
 8017542:	430a      	orrs	r2, r1
 8017544:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8017546:	687b      	ldr	r3, [r7, #4]
 8017548:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801754a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 801754e:	2b00      	cmp	r3, #0
 8017550:	d00a      	beq.n	8017568 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8017552:	687b      	ldr	r3, [r7, #4]
 8017554:	681b      	ldr	r3, [r3, #0]
 8017556:	685b      	ldr	r3, [r3, #4]
 8017558:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 801755c:	687b      	ldr	r3, [r7, #4]
 801755e:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8017560:	687b      	ldr	r3, [r7, #4]
 8017562:	681b      	ldr	r3, [r3, #0]
 8017564:	430a      	orrs	r2, r1
 8017566:	605a      	str	r2, [r3, #4]
  }
}
 8017568:	bf00      	nop
 801756a:	370c      	adds	r7, #12
 801756c:	46bd      	mov	sp, r7
 801756e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017572:	4770      	bx	lr

08017574 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8017574:	b580      	push	{r7, lr}
 8017576:	b098      	sub	sp, #96	@ 0x60
 8017578:	af02      	add	r7, sp, #8
 801757a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 801757c:	687b      	ldr	r3, [r7, #4]
 801757e:	2200      	movs	r2, #0
 8017580:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8017584:	f7f9 f9e8 	bl	8010958 <HAL_GetTick>
 8017588:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 801758a:	687b      	ldr	r3, [r7, #4]
 801758c:	681b      	ldr	r3, [r3, #0]
 801758e:	681b      	ldr	r3, [r3, #0]
 8017590:	f003 0308 	and.w	r3, r3, #8
 8017594:	2b08      	cmp	r3, #8
 8017596:	d12f      	bne.n	80175f8 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8017598:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 801759c:	9300      	str	r3, [sp, #0]
 801759e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80175a0:	2200      	movs	r2, #0
 80175a2:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 80175a6:	6878      	ldr	r0, [r7, #4]
 80175a8:	f000 f88e 	bl	80176c8 <UART_WaitOnFlagUntilTimeout>
 80175ac:	4603      	mov	r3, r0
 80175ae:	2b00      	cmp	r3, #0
 80175b0:	d022      	beq.n	80175f8 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 80175b2:	687b      	ldr	r3, [r7, #4]
 80175b4:	681b      	ldr	r3, [r3, #0]
 80175b6:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80175b8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80175ba:	e853 3f00 	ldrex	r3, [r3]
 80175be:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80175c0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80175c2:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80175c6:	653b      	str	r3, [r7, #80]	@ 0x50
 80175c8:	687b      	ldr	r3, [r7, #4]
 80175ca:	681b      	ldr	r3, [r3, #0]
 80175cc:	461a      	mov	r2, r3
 80175ce:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80175d0:	647b      	str	r3, [r7, #68]	@ 0x44
 80175d2:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80175d4:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80175d6:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80175d8:	e841 2300 	strex	r3, r2, [r1]
 80175dc:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80175de:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80175e0:	2b00      	cmp	r3, #0
 80175e2:	d1e6      	bne.n	80175b2 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 80175e4:	687b      	ldr	r3, [r7, #4]
 80175e6:	2220      	movs	r2, #32
 80175e8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 80175ec:	687b      	ldr	r3, [r7, #4]
 80175ee:	2200      	movs	r2, #0
 80175f0:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80175f4:	2303      	movs	r3, #3
 80175f6:	e063      	b.n	80176c0 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80175f8:	687b      	ldr	r3, [r7, #4]
 80175fa:	681b      	ldr	r3, [r3, #0]
 80175fc:	681b      	ldr	r3, [r3, #0]
 80175fe:	f003 0304 	and.w	r3, r3, #4
 8017602:	2b04      	cmp	r3, #4
 8017604:	d149      	bne.n	801769a <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8017606:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 801760a:	9300      	str	r3, [sp, #0]
 801760c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801760e:	2200      	movs	r2, #0
 8017610:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8017614:	6878      	ldr	r0, [r7, #4]
 8017616:	f000 f857 	bl	80176c8 <UART_WaitOnFlagUntilTimeout>
 801761a:	4603      	mov	r3, r0
 801761c:	2b00      	cmp	r3, #0
 801761e:	d03c      	beq.n	801769a <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8017620:	687b      	ldr	r3, [r7, #4]
 8017622:	681b      	ldr	r3, [r3, #0]
 8017624:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8017626:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8017628:	e853 3f00 	ldrex	r3, [r3]
 801762c:	623b      	str	r3, [r7, #32]
   return(result);
 801762e:	6a3b      	ldr	r3, [r7, #32]
 8017630:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8017634:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8017636:	687b      	ldr	r3, [r7, #4]
 8017638:	681b      	ldr	r3, [r3, #0]
 801763a:	461a      	mov	r2, r3
 801763c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801763e:	633b      	str	r3, [r7, #48]	@ 0x30
 8017640:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8017642:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8017644:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8017646:	e841 2300 	strex	r3, r2, [r1]
 801764a:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 801764c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801764e:	2b00      	cmp	r3, #0
 8017650:	d1e6      	bne.n	8017620 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8017652:	687b      	ldr	r3, [r7, #4]
 8017654:	681b      	ldr	r3, [r3, #0]
 8017656:	3308      	adds	r3, #8
 8017658:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801765a:	693b      	ldr	r3, [r7, #16]
 801765c:	e853 3f00 	ldrex	r3, [r3]
 8017660:	60fb      	str	r3, [r7, #12]
   return(result);
 8017662:	68fb      	ldr	r3, [r7, #12]
 8017664:	f023 0301 	bic.w	r3, r3, #1
 8017668:	64bb      	str	r3, [r7, #72]	@ 0x48
 801766a:	687b      	ldr	r3, [r7, #4]
 801766c:	681b      	ldr	r3, [r3, #0]
 801766e:	3308      	adds	r3, #8
 8017670:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8017672:	61fa      	str	r2, [r7, #28]
 8017674:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8017676:	69b9      	ldr	r1, [r7, #24]
 8017678:	69fa      	ldr	r2, [r7, #28]
 801767a:	e841 2300 	strex	r3, r2, [r1]
 801767e:	617b      	str	r3, [r7, #20]
   return(result);
 8017680:	697b      	ldr	r3, [r7, #20]
 8017682:	2b00      	cmp	r3, #0
 8017684:	d1e5      	bne.n	8017652 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8017686:	687b      	ldr	r3, [r7, #4]
 8017688:	2220      	movs	r2, #32
 801768a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 801768e:	687b      	ldr	r3, [r7, #4]
 8017690:	2200      	movs	r2, #0
 8017692:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8017696:	2303      	movs	r3, #3
 8017698:	e012      	b.n	80176c0 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 801769a:	687b      	ldr	r3, [r7, #4]
 801769c:	2220      	movs	r2, #32
 801769e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 80176a2:	687b      	ldr	r3, [r7, #4]
 80176a4:	2220      	movs	r2, #32
 80176a6:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80176aa:	687b      	ldr	r3, [r7, #4]
 80176ac:	2200      	movs	r2, #0
 80176ae:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80176b0:	687b      	ldr	r3, [r7, #4]
 80176b2:	2200      	movs	r2, #0
 80176b4:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 80176b6:	687b      	ldr	r3, [r7, #4]
 80176b8:	2200      	movs	r2, #0
 80176ba:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80176be:	2300      	movs	r3, #0
}
 80176c0:	4618      	mov	r0, r3
 80176c2:	3758      	adds	r7, #88	@ 0x58
 80176c4:	46bd      	mov	sp, r7
 80176c6:	bd80      	pop	{r7, pc}

080176c8 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80176c8:	b580      	push	{r7, lr}
 80176ca:	b084      	sub	sp, #16
 80176cc:	af00      	add	r7, sp, #0
 80176ce:	60f8      	str	r0, [r7, #12]
 80176d0:	60b9      	str	r1, [r7, #8]
 80176d2:	603b      	str	r3, [r7, #0]
 80176d4:	4613      	mov	r3, r2
 80176d6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80176d8:	e049      	b.n	801776e <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80176da:	69bb      	ldr	r3, [r7, #24]
 80176dc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80176e0:	d045      	beq.n	801776e <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80176e2:	f7f9 f939 	bl	8010958 <HAL_GetTick>
 80176e6:	4602      	mov	r2, r0
 80176e8:	683b      	ldr	r3, [r7, #0]
 80176ea:	1ad3      	subs	r3, r2, r3
 80176ec:	69ba      	ldr	r2, [r7, #24]
 80176ee:	429a      	cmp	r2, r3
 80176f0:	d302      	bcc.n	80176f8 <UART_WaitOnFlagUntilTimeout+0x30>
 80176f2:	69bb      	ldr	r3, [r7, #24]
 80176f4:	2b00      	cmp	r3, #0
 80176f6:	d101      	bne.n	80176fc <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80176f8:	2303      	movs	r3, #3
 80176fa:	e048      	b.n	801778e <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80176fc:	68fb      	ldr	r3, [r7, #12]
 80176fe:	681b      	ldr	r3, [r3, #0]
 8017700:	681b      	ldr	r3, [r3, #0]
 8017702:	f003 0304 	and.w	r3, r3, #4
 8017706:	2b00      	cmp	r3, #0
 8017708:	d031      	beq.n	801776e <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 801770a:	68fb      	ldr	r3, [r7, #12]
 801770c:	681b      	ldr	r3, [r3, #0]
 801770e:	69db      	ldr	r3, [r3, #28]
 8017710:	f003 0308 	and.w	r3, r3, #8
 8017714:	2b08      	cmp	r3, #8
 8017716:	d110      	bne.n	801773a <UART_WaitOnFlagUntilTimeout+0x72>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8017718:	68fb      	ldr	r3, [r7, #12]
 801771a:	681b      	ldr	r3, [r3, #0]
 801771c:	2208      	movs	r2, #8
 801771e:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 8017720:	68f8      	ldr	r0, [r7, #12]
 8017722:	f000 f839 	bl	8017798 <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 8017726:	68fb      	ldr	r3, [r7, #12]
 8017728:	2208      	movs	r2, #8
 801772a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 801772e:	68fb      	ldr	r3, [r7, #12]
 8017730:	2200      	movs	r2, #0
 8017732:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

           return HAL_ERROR;
 8017736:	2301      	movs	r3, #1
 8017738:	e029      	b.n	801778e <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 801773a:	68fb      	ldr	r3, [r7, #12]
 801773c:	681b      	ldr	r3, [r3, #0]
 801773e:	69db      	ldr	r3, [r3, #28]
 8017740:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8017744:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8017748:	d111      	bne.n	801776e <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 801774a:	68fb      	ldr	r3, [r7, #12]
 801774c:	681b      	ldr	r3, [r3, #0]
 801774e:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8017752:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8017754:	68f8      	ldr	r0, [r7, #12]
 8017756:	f000 f81f 	bl	8017798 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 801775a:	68fb      	ldr	r3, [r7, #12]
 801775c:	2220      	movs	r2, #32
 801775e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8017762:	68fb      	ldr	r3, [r7, #12]
 8017764:	2200      	movs	r2, #0
 8017766:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 801776a:	2303      	movs	r3, #3
 801776c:	e00f      	b.n	801778e <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 801776e:	68fb      	ldr	r3, [r7, #12]
 8017770:	681b      	ldr	r3, [r3, #0]
 8017772:	69da      	ldr	r2, [r3, #28]
 8017774:	68bb      	ldr	r3, [r7, #8]
 8017776:	4013      	ands	r3, r2
 8017778:	68ba      	ldr	r2, [r7, #8]
 801777a:	429a      	cmp	r2, r3
 801777c:	bf0c      	ite	eq
 801777e:	2301      	moveq	r3, #1
 8017780:	2300      	movne	r3, #0
 8017782:	b2db      	uxtb	r3, r3
 8017784:	461a      	mov	r2, r3
 8017786:	79fb      	ldrb	r3, [r7, #7]
 8017788:	429a      	cmp	r2, r3
 801778a:	d0a6      	beq.n	80176da <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 801778c:	2300      	movs	r3, #0
}
 801778e:	4618      	mov	r0, r3
 8017790:	3710      	adds	r7, #16
 8017792:	46bd      	mov	sp, r7
 8017794:	bd80      	pop	{r7, pc}
	...

08017798 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8017798:	b480      	push	{r7}
 801779a:	b095      	sub	sp, #84	@ 0x54
 801779c:	af00      	add	r7, sp, #0
 801779e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80177a0:	687b      	ldr	r3, [r7, #4]
 80177a2:	681b      	ldr	r3, [r3, #0]
 80177a4:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80177a6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80177a8:	e853 3f00 	ldrex	r3, [r3]
 80177ac:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80177ae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80177b0:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80177b4:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80177b6:	687b      	ldr	r3, [r7, #4]
 80177b8:	681b      	ldr	r3, [r3, #0]
 80177ba:	461a      	mov	r2, r3
 80177bc:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80177be:	643b      	str	r3, [r7, #64]	@ 0x40
 80177c0:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80177c2:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80177c4:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80177c6:	e841 2300 	strex	r3, r2, [r1]
 80177ca:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80177cc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80177ce:	2b00      	cmp	r3, #0
 80177d0:	d1e6      	bne.n	80177a0 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80177d2:	687b      	ldr	r3, [r7, #4]
 80177d4:	681b      	ldr	r3, [r3, #0]
 80177d6:	3308      	adds	r3, #8
 80177d8:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80177da:	6a3b      	ldr	r3, [r7, #32]
 80177dc:	e853 3f00 	ldrex	r3, [r3]
 80177e0:	61fb      	str	r3, [r7, #28]
   return(result);
 80177e2:	69fa      	ldr	r2, [r7, #28]
 80177e4:	4b1e      	ldr	r3, [pc, #120]	@ (8017860 <UART_EndRxTransfer+0xc8>)
 80177e6:	4013      	ands	r3, r2
 80177e8:	64bb      	str	r3, [r7, #72]	@ 0x48
 80177ea:	687b      	ldr	r3, [r7, #4]
 80177ec:	681b      	ldr	r3, [r3, #0]
 80177ee:	3308      	adds	r3, #8
 80177f0:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80177f2:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80177f4:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80177f6:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80177f8:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80177fa:	e841 2300 	strex	r3, r2, [r1]
 80177fe:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8017800:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8017802:	2b00      	cmp	r3, #0
 8017804:	d1e5      	bne.n	80177d2 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8017806:	687b      	ldr	r3, [r7, #4]
 8017808:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 801780a:	2b01      	cmp	r3, #1
 801780c:	d118      	bne.n	8017840 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 801780e:	687b      	ldr	r3, [r7, #4]
 8017810:	681b      	ldr	r3, [r3, #0]
 8017812:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8017814:	68fb      	ldr	r3, [r7, #12]
 8017816:	e853 3f00 	ldrex	r3, [r3]
 801781a:	60bb      	str	r3, [r7, #8]
   return(result);
 801781c:	68bb      	ldr	r3, [r7, #8]
 801781e:	f023 0310 	bic.w	r3, r3, #16
 8017822:	647b      	str	r3, [r7, #68]	@ 0x44
 8017824:	687b      	ldr	r3, [r7, #4]
 8017826:	681b      	ldr	r3, [r3, #0]
 8017828:	461a      	mov	r2, r3
 801782a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 801782c:	61bb      	str	r3, [r7, #24]
 801782e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8017830:	6979      	ldr	r1, [r7, #20]
 8017832:	69ba      	ldr	r2, [r7, #24]
 8017834:	e841 2300 	strex	r3, r2, [r1]
 8017838:	613b      	str	r3, [r7, #16]
   return(result);
 801783a:	693b      	ldr	r3, [r7, #16]
 801783c:	2b00      	cmp	r3, #0
 801783e:	d1e6      	bne.n	801780e <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8017840:	687b      	ldr	r3, [r7, #4]
 8017842:	2220      	movs	r2, #32
 8017844:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8017848:	687b      	ldr	r3, [r7, #4]
 801784a:	2200      	movs	r2, #0
 801784c:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 801784e:	687b      	ldr	r3, [r7, #4]
 8017850:	2200      	movs	r2, #0
 8017852:	675a      	str	r2, [r3, #116]	@ 0x74
}
 8017854:	bf00      	nop
 8017856:	3754      	adds	r7, #84	@ 0x54
 8017858:	46bd      	mov	sp, r7
 801785a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801785e:	4770      	bx	lr
 8017860:	effffffe 	.word	0xeffffffe

08017864 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8017864:	b480      	push	{r7}
 8017866:	b085      	sub	sp, #20
 8017868:	af00      	add	r7, sp, #0
 801786a:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 801786c:	687b      	ldr	r3, [r7, #4]
 801786e:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8017872:	2b01      	cmp	r3, #1
 8017874:	d101      	bne.n	801787a <HAL_UARTEx_DisableFifoMode+0x16>
 8017876:	2302      	movs	r3, #2
 8017878:	e027      	b.n	80178ca <HAL_UARTEx_DisableFifoMode+0x66>
 801787a:	687b      	ldr	r3, [r7, #4]
 801787c:	2201      	movs	r2, #1
 801787e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8017882:	687b      	ldr	r3, [r7, #4]
 8017884:	2224      	movs	r2, #36	@ 0x24
 8017886:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 801788a:	687b      	ldr	r3, [r7, #4]
 801788c:	681b      	ldr	r3, [r3, #0]
 801788e:	681b      	ldr	r3, [r3, #0]
 8017890:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8017892:	687b      	ldr	r3, [r7, #4]
 8017894:	681b      	ldr	r3, [r3, #0]
 8017896:	681a      	ldr	r2, [r3, #0]
 8017898:	687b      	ldr	r3, [r7, #4]
 801789a:	681b      	ldr	r3, [r3, #0]
 801789c:	f022 0201 	bic.w	r2, r2, #1
 80178a0:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 80178a2:	68fb      	ldr	r3, [r7, #12]
 80178a4:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 80178a8:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 80178aa:	687b      	ldr	r3, [r7, #4]
 80178ac:	2200      	movs	r2, #0
 80178ae:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80178b0:	687b      	ldr	r3, [r7, #4]
 80178b2:	681b      	ldr	r3, [r3, #0]
 80178b4:	68fa      	ldr	r2, [r7, #12]
 80178b6:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80178b8:	687b      	ldr	r3, [r7, #4]
 80178ba:	2220      	movs	r2, #32
 80178bc:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80178c0:	687b      	ldr	r3, [r7, #4]
 80178c2:	2200      	movs	r2, #0
 80178c4:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80178c8:	2300      	movs	r3, #0
}
 80178ca:	4618      	mov	r0, r3
 80178cc:	3714      	adds	r7, #20
 80178ce:	46bd      	mov	sp, r7
 80178d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80178d4:	4770      	bx	lr

080178d6 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80178d6:	b580      	push	{r7, lr}
 80178d8:	b084      	sub	sp, #16
 80178da:	af00      	add	r7, sp, #0
 80178dc:	6078      	str	r0, [r7, #4]
 80178de:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80178e0:	687b      	ldr	r3, [r7, #4]
 80178e2:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 80178e6:	2b01      	cmp	r3, #1
 80178e8:	d101      	bne.n	80178ee <HAL_UARTEx_SetTxFifoThreshold+0x18>
 80178ea:	2302      	movs	r3, #2
 80178ec:	e02d      	b.n	801794a <HAL_UARTEx_SetTxFifoThreshold+0x74>
 80178ee:	687b      	ldr	r3, [r7, #4]
 80178f0:	2201      	movs	r2, #1
 80178f2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80178f6:	687b      	ldr	r3, [r7, #4]
 80178f8:	2224      	movs	r2, #36	@ 0x24
 80178fa:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80178fe:	687b      	ldr	r3, [r7, #4]
 8017900:	681b      	ldr	r3, [r3, #0]
 8017902:	681b      	ldr	r3, [r3, #0]
 8017904:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8017906:	687b      	ldr	r3, [r7, #4]
 8017908:	681b      	ldr	r3, [r3, #0]
 801790a:	681a      	ldr	r2, [r3, #0]
 801790c:	687b      	ldr	r3, [r7, #4]
 801790e:	681b      	ldr	r3, [r3, #0]
 8017910:	f022 0201 	bic.w	r2, r2, #1
 8017914:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8017916:	687b      	ldr	r3, [r7, #4]
 8017918:	681b      	ldr	r3, [r3, #0]
 801791a:	689b      	ldr	r3, [r3, #8]
 801791c:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 8017920:	687b      	ldr	r3, [r7, #4]
 8017922:	681b      	ldr	r3, [r3, #0]
 8017924:	683a      	ldr	r2, [r7, #0]
 8017926:	430a      	orrs	r2, r1
 8017928:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 801792a:	6878      	ldr	r0, [r7, #4]
 801792c:	f000 f850 	bl	80179d0 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8017930:	687b      	ldr	r3, [r7, #4]
 8017932:	681b      	ldr	r3, [r3, #0]
 8017934:	68fa      	ldr	r2, [r7, #12]
 8017936:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8017938:	687b      	ldr	r3, [r7, #4]
 801793a:	2220      	movs	r2, #32
 801793c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8017940:	687b      	ldr	r3, [r7, #4]
 8017942:	2200      	movs	r2, #0
 8017944:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8017948:	2300      	movs	r3, #0
}
 801794a:	4618      	mov	r0, r3
 801794c:	3710      	adds	r7, #16
 801794e:	46bd      	mov	sp, r7
 8017950:	bd80      	pop	{r7, pc}

08017952 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8017952:	b580      	push	{r7, lr}
 8017954:	b084      	sub	sp, #16
 8017956:	af00      	add	r7, sp, #0
 8017958:	6078      	str	r0, [r7, #4]
 801795a:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 801795c:	687b      	ldr	r3, [r7, #4]
 801795e:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8017962:	2b01      	cmp	r3, #1
 8017964:	d101      	bne.n	801796a <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8017966:	2302      	movs	r3, #2
 8017968:	e02d      	b.n	80179c6 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 801796a:	687b      	ldr	r3, [r7, #4]
 801796c:	2201      	movs	r2, #1
 801796e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8017972:	687b      	ldr	r3, [r7, #4]
 8017974:	2224      	movs	r2, #36	@ 0x24
 8017976:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 801797a:	687b      	ldr	r3, [r7, #4]
 801797c:	681b      	ldr	r3, [r3, #0]
 801797e:	681b      	ldr	r3, [r3, #0]
 8017980:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8017982:	687b      	ldr	r3, [r7, #4]
 8017984:	681b      	ldr	r3, [r3, #0]
 8017986:	681a      	ldr	r2, [r3, #0]
 8017988:	687b      	ldr	r3, [r7, #4]
 801798a:	681b      	ldr	r3, [r3, #0]
 801798c:	f022 0201 	bic.w	r2, r2, #1
 8017990:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8017992:	687b      	ldr	r3, [r7, #4]
 8017994:	681b      	ldr	r3, [r3, #0]
 8017996:	689b      	ldr	r3, [r3, #8]
 8017998:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 801799c:	687b      	ldr	r3, [r7, #4]
 801799e:	681b      	ldr	r3, [r3, #0]
 80179a0:	683a      	ldr	r2, [r7, #0]
 80179a2:	430a      	orrs	r2, r1
 80179a4:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80179a6:	6878      	ldr	r0, [r7, #4]
 80179a8:	f000 f812 	bl	80179d0 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80179ac:	687b      	ldr	r3, [r7, #4]
 80179ae:	681b      	ldr	r3, [r3, #0]
 80179b0:	68fa      	ldr	r2, [r7, #12]
 80179b2:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80179b4:	687b      	ldr	r3, [r7, #4]
 80179b6:	2220      	movs	r2, #32
 80179b8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80179bc:	687b      	ldr	r3, [r7, #4]
 80179be:	2200      	movs	r2, #0
 80179c0:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80179c4:	2300      	movs	r3, #0
}
 80179c6:	4618      	mov	r0, r3
 80179c8:	3710      	adds	r7, #16
 80179ca:	46bd      	mov	sp, r7
 80179cc:	bd80      	pop	{r7, pc}
	...

080179d0 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 80179d0:	b480      	push	{r7}
 80179d2:	b085      	sub	sp, #20
 80179d4:	af00      	add	r7, sp, #0
 80179d6:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 80179d8:	687b      	ldr	r3, [r7, #4]
 80179da:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80179dc:	2b00      	cmp	r3, #0
 80179de:	d108      	bne.n	80179f2 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 80179e0:	687b      	ldr	r3, [r7, #4]
 80179e2:	2201      	movs	r2, #1
 80179e4:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 80179e8:	687b      	ldr	r3, [r7, #4]
 80179ea:	2201      	movs	r2, #1
 80179ec:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 80179f0:	e031      	b.n	8017a56 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 80179f2:	2310      	movs	r3, #16
 80179f4:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 80179f6:	2310      	movs	r3, #16
 80179f8:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 80179fa:	687b      	ldr	r3, [r7, #4]
 80179fc:	681b      	ldr	r3, [r3, #0]
 80179fe:	689b      	ldr	r3, [r3, #8]
 8017a00:	0e5b      	lsrs	r3, r3, #25
 8017a02:	b2db      	uxtb	r3, r3
 8017a04:	f003 0307 	and.w	r3, r3, #7
 8017a08:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8017a0a:	687b      	ldr	r3, [r7, #4]
 8017a0c:	681b      	ldr	r3, [r3, #0]
 8017a0e:	689b      	ldr	r3, [r3, #8]
 8017a10:	0f5b      	lsrs	r3, r3, #29
 8017a12:	b2db      	uxtb	r3, r3
 8017a14:	f003 0307 	and.w	r3, r3, #7
 8017a18:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8017a1a:	7bbb      	ldrb	r3, [r7, #14]
 8017a1c:	7b3a      	ldrb	r2, [r7, #12]
 8017a1e:	4911      	ldr	r1, [pc, #68]	@ (8017a64 <UARTEx_SetNbDataToProcess+0x94>)
 8017a20:	5c8a      	ldrb	r2, [r1, r2]
 8017a22:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8017a26:	7b3a      	ldrb	r2, [r7, #12]
 8017a28:	490f      	ldr	r1, [pc, #60]	@ (8017a68 <UARTEx_SetNbDataToProcess+0x98>)
 8017a2a:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8017a2c:	fb93 f3f2 	sdiv	r3, r3, r2
 8017a30:	b29a      	uxth	r2, r3
 8017a32:	687b      	ldr	r3, [r7, #4]
 8017a34:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8017a38:	7bfb      	ldrb	r3, [r7, #15]
 8017a3a:	7b7a      	ldrb	r2, [r7, #13]
 8017a3c:	4909      	ldr	r1, [pc, #36]	@ (8017a64 <UARTEx_SetNbDataToProcess+0x94>)
 8017a3e:	5c8a      	ldrb	r2, [r1, r2]
 8017a40:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8017a44:	7b7a      	ldrb	r2, [r7, #13]
 8017a46:	4908      	ldr	r1, [pc, #32]	@ (8017a68 <UARTEx_SetNbDataToProcess+0x98>)
 8017a48:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8017a4a:	fb93 f3f2 	sdiv	r3, r3, r2
 8017a4e:	b29a      	uxth	r2, r3
 8017a50:	687b      	ldr	r3, [r7, #4]
 8017a52:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 8017a56:	bf00      	nop
 8017a58:	3714      	adds	r7, #20
 8017a5a:	46bd      	mov	sp, r7
 8017a5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017a60:	4770      	bx	lr
 8017a62:	bf00      	nop
 8017a64:	0801c190 	.word	0x0801c190
 8017a68:	0801c198 	.word	0x0801c198

08017a6c <SDMMC_Init>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Init: SDMMC initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_Init(SDMMC_TypeDef *SDMMCx, SDMMC_InitTypeDef Init)
{
 8017a6c:	b084      	sub	sp, #16
 8017a6e:	b480      	push	{r7}
 8017a70:	b085      	sub	sp, #20
 8017a72:	af00      	add	r7, sp, #0
 8017a74:	6078      	str	r0, [r7, #4]
 8017a76:	f107 001c 	add.w	r0, r7, #28
 8017a7a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 8017a7e:	2300      	movs	r3, #0
 8017a80:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(Init.ClockDiv));

  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           | \
 8017a82:	69fa      	ldr	r2, [r7, #28]
             Init.ClockPowerSave      | \
 8017a84:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           | \
 8017a86:	431a      	orrs	r2, r3
             Init.BusWide             | \
 8017a88:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
             Init.ClockPowerSave      | \
 8017a8a:	431a      	orrs	r2, r3
             Init.HardwareFlowControl | \
 8017a8c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
             Init.BusWide             | \
 8017a8e:	431a      	orrs	r2, r3
             Init.ClockDiv
 8017a90:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
             Init.HardwareFlowControl | \
 8017a92:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           | \
 8017a94:	68fa      	ldr	r2, [r7, #12]
 8017a96:	4313      	orrs	r3, r2
 8017a98:	60fb      	str	r3, [r7, #12]
            );

  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDMMCx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);
 8017a9a:	687b      	ldr	r3, [r7, #4]
 8017a9c:	685a      	ldr	r2, [r3, #4]
 8017a9e:	4b07      	ldr	r3, [pc, #28]	@ (8017abc <SDMMC_Init+0x50>)
 8017aa0:	4013      	ands	r3, r2
 8017aa2:	68fa      	ldr	r2, [r7, #12]
 8017aa4:	431a      	orrs	r2, r3
 8017aa6:	687b      	ldr	r3, [r7, #4]
 8017aa8:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 8017aaa:	2300      	movs	r3, #0
}
 8017aac:	4618      	mov	r0, r3
 8017aae:	3714      	adds	r7, #20
 8017ab0:	46bd      	mov	sp, r7
 8017ab2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017ab6:	b004      	add	sp, #16
 8017ab8:	4770      	bx	lr
 8017aba:	bf00      	nop
 8017abc:	ffc02c00 	.word	0xffc02c00

08017ac0 <SDMMC_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling)
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_ReadFIFO(SDMMC_TypeDef *SDMMCx)
{
 8017ac0:	b480      	push	{r7}
 8017ac2:	b083      	sub	sp, #12
 8017ac4:	af00      	add	r7, sp, #0
 8017ac6:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */
  return (SDMMCx->FIFO);
 8017ac8:	687b      	ldr	r3, [r7, #4]
 8017aca:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
}
 8017ace:	4618      	mov	r0, r3
 8017ad0:	370c      	adds	r7, #12
 8017ad2:	46bd      	mov	sp, r7
 8017ad4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017ad8:	4770      	bx	lr

08017ada <SDMMC_WriteFIFO>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  pWriteData: pointer to data to write
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_WriteFIFO(SDMMC_TypeDef *SDMMCx, uint32_t *pWriteData)
{
 8017ada:	b480      	push	{r7}
 8017adc:	b083      	sub	sp, #12
 8017ade:	af00      	add	r7, sp, #0
 8017ae0:	6078      	str	r0, [r7, #4]
 8017ae2:	6039      	str	r1, [r7, #0]
  /* Write data to FIFO */
  SDMMCx->FIFO = *pWriteData;
 8017ae4:	683b      	ldr	r3, [r7, #0]
 8017ae6:	681a      	ldr	r2, [r3, #0]
 8017ae8:	687b      	ldr	r3, [r7, #4]
 8017aea:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  return HAL_OK;
 8017aee:	2300      	movs	r3, #0
}
 8017af0:	4618      	mov	r0, r3
 8017af2:	370c      	adds	r7, #12
 8017af4:	46bd      	mov	sp, r7
 8017af6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017afa:	4770      	bx	lr

08017afc <SDMMC_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_PowerState_ON(SDMMC_TypeDef *SDMMCx)
{
 8017afc:	b480      	push	{r7}
 8017afe:	b083      	sub	sp, #12
 8017b00:	af00      	add	r7, sp, #0
 8017b02:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */
  SDMMCx->POWER |= SDMMC_POWER_PWRCTRL;
 8017b04:	687b      	ldr	r3, [r7, #4]
 8017b06:	681b      	ldr	r3, [r3, #0]
 8017b08:	f043 0203 	orr.w	r2, r3, #3
 8017b0c:	687b      	ldr	r3, [r7, #4]
 8017b0e:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 8017b10:	2300      	movs	r3, #0
}
 8017b12:	4618      	mov	r0, r3
 8017b14:	370c      	adds	r7, #12
 8017b16:	46bd      	mov	sp, r7
 8017b18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017b1c:	4770      	bx	lr

08017b1e <SDMMC_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON
  */
uint32_t SDMMC_GetPowerState(SDMMC_TypeDef *SDMMCx)
{
 8017b1e:	b480      	push	{r7}
 8017b20:	b083      	sub	sp, #12
 8017b22:	af00      	add	r7, sp, #0
 8017b24:	6078      	str	r0, [r7, #4]
  return (SDMMCx->POWER & SDMMC_POWER_PWRCTRL);
 8017b26:	687b      	ldr	r3, [r7, #4]
 8017b28:	681b      	ldr	r3, [r3, #0]
 8017b2a:	f003 0303 	and.w	r3, r3, #3
}
 8017b2e:	4618      	mov	r0, r3
 8017b30:	370c      	adds	r7, #12
 8017b32:	46bd      	mov	sp, r7
 8017b34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017b38:	4770      	bx	lr
	...

08017b3c <SDMMC_SendCommand>:
  * @param  Command: pointer to a SDMMC_CmdInitTypeDef structure that contains
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_SendCommand(SDMMC_TypeDef *SDMMCx, SDMMC_CmdInitTypeDef *Command)
{
 8017b3c:	b480      	push	{r7}
 8017b3e:	b085      	sub	sp, #20
 8017b40:	af00      	add	r7, sp, #0
 8017b42:	6078      	str	r0, [r7, #4]
 8017b44:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 8017b46:	2300      	movs	r3, #0
 8017b48:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_RESPONSE(Command->Response));
  assert_param(IS_SDMMC_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDMMC_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDMMCx->ARG = Command->Argument;
 8017b4a:	683b      	ldr	r3, [r7, #0]
 8017b4c:	681a      	ldr	r2, [r3, #0]
 8017b4e:	687b      	ldr	r3, [r7, #4]
 8017b50:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         | \
 8017b52:	683b      	ldr	r3, [r7, #0]
 8017b54:	685a      	ldr	r2, [r3, #4]
                       Command->Response         | \
 8017b56:	683b      	ldr	r3, [r7, #0]
 8017b58:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         | \
 8017b5a:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt | \
 8017b5c:	683b      	ldr	r3, [r7, #0]
 8017b5e:	68db      	ldr	r3, [r3, #12]
                       Command->Response         | \
 8017b60:	431a      	orrs	r2, r3
                       Command->CPSM);
 8017b62:	683b      	ldr	r3, [r7, #0]
 8017b64:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt | \
 8017b66:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         | \
 8017b68:	68fa      	ldr	r2, [r7, #12]
 8017b6a:	4313      	orrs	r3, r2
 8017b6c:	60fb      	str	r3, [r7, #12]

  /* Write to SDMMC CMD register */
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 8017b6e:	687b      	ldr	r3, [r7, #4]
 8017b70:	68da      	ldr	r2, [r3, #12]
 8017b72:	4b06      	ldr	r3, [pc, #24]	@ (8017b8c <SDMMC_SendCommand+0x50>)
 8017b74:	4013      	ands	r3, r2
 8017b76:	68fa      	ldr	r2, [r7, #12]
 8017b78:	431a      	orrs	r2, r3
 8017b7a:	687b      	ldr	r3, [r7, #4]
 8017b7c:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8017b7e:	2300      	movs	r3, #0
}
 8017b80:	4618      	mov	r0, r3
 8017b82:	3714      	adds	r7, #20
 8017b84:	46bd      	mov	sp, r7
 8017b86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017b8a:	4770      	bx	lr
 8017b8c:	fffee0c0 	.word	0xfffee0c0

08017b90 <SDMMC_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDMMC_GetCommandResponse(SDMMC_TypeDef *SDMMCx)
{
 8017b90:	b480      	push	{r7}
 8017b92:	b083      	sub	sp, #12
 8017b94:	af00      	add	r7, sp, #0
 8017b96:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDMMCx->RESPCMD);
 8017b98:	687b      	ldr	r3, [r7, #4]
 8017b9a:	691b      	ldr	r3, [r3, #16]
 8017b9c:	b2db      	uxtb	r3, r3
}
 8017b9e:	4618      	mov	r0, r3
 8017ba0:	370c      	adds	r7, #12
 8017ba2:	46bd      	mov	sp, r7
 8017ba4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017ba8:	4770      	bx	lr

08017baa <SDMMC_GetResponse>:
  *            @arg SDMMC_RESP3: Response Register 3
  *            @arg SDMMC_RESP4: Response Register 4
  * @retval The Corresponding response register value
  */
uint32_t SDMMC_GetResponse(SDMMC_TypeDef *SDMMCx, uint32_t Response)
{
 8017baa:	b480      	push	{r7}
 8017bac:	b085      	sub	sp, #20
 8017bae:	af00      	add	r7, sp, #0
 8017bb0:	6078      	str	r0, [r7, #4]
 8017bb2:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDMMC_RESP(Response));

  /* Get the response */
  tmp = (uint32_t)(&(SDMMCx->RESP1)) + Response;
 8017bb4:	687b      	ldr	r3, [r7, #4]
 8017bb6:	3314      	adds	r3, #20
 8017bb8:	461a      	mov	r2, r3
 8017bba:	683b      	ldr	r3, [r7, #0]
 8017bbc:	4413      	add	r3, r2
 8017bbe:	60fb      	str	r3, [r7, #12]

  return (*(__IO uint32_t *) tmp);
 8017bc0:	68fb      	ldr	r3, [r7, #12]
 8017bc2:	681b      	ldr	r3, [r3, #0]
}
 8017bc4:	4618      	mov	r0, r3
 8017bc6:	3714      	adds	r7, #20
 8017bc8:	46bd      	mov	sp, r7
 8017bca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017bce:	4770      	bx	lr

08017bd0 <SDMMC_ConfigData>:
  * @param  Data : pointer to a SDMMC_DataInitTypeDef structure
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_ConfigData(SDMMC_TypeDef *SDMMCx, SDMMC_DataInitTypeDef *Data)
{
 8017bd0:	b480      	push	{r7}
 8017bd2:	b085      	sub	sp, #20
 8017bd4:	af00      	add	r7, sp, #0
 8017bd6:	6078      	str	r0, [r7, #4]
 8017bd8:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 8017bda:	2300      	movs	r3, #0
 8017bdc:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDMMC_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDMMC_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDMMCx->DTIMER = Data->DataTimeOut;
 8017bde:	683b      	ldr	r3, [r7, #0]
 8017be0:	681a      	ldr	r2, [r3, #0]
 8017be2:	687b      	ldr	r3, [r7, #4]
 8017be4:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Set the SDMMC DataLength value */
  SDMMCx->DLEN = Data->DataLength;
 8017be6:	683b      	ldr	r3, [r7, #0]
 8017be8:	685a      	ldr	r2, [r3, #4]
 8017bea:	687b      	ldr	r3, [r7, #4]
 8017bec:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize | \
 8017bee:	683b      	ldr	r3, [r7, #0]
 8017bf0:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   | \
 8017bf2:	683b      	ldr	r3, [r7, #0]
 8017bf4:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize | \
 8017bf6:	431a      	orrs	r2, r3
                       Data->TransferMode  | \
 8017bf8:	683b      	ldr	r3, [r7, #0]
 8017bfa:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   | \
 8017bfc:	431a      	orrs	r2, r3
                       Data->DPSM);
 8017bfe:	683b      	ldr	r3, [r7, #0]
 8017c00:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  | \
 8017c02:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize | \
 8017c04:	68fa      	ldr	r2, [r7, #12]
 8017c06:	4313      	orrs	r3, r2
 8017c08:	60fb      	str	r3, [r7, #12]

  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDMMCx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 8017c0a:	687b      	ldr	r3, [r7, #4]
 8017c0c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8017c0e:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 8017c12:	68fb      	ldr	r3, [r7, #12]
 8017c14:	431a      	orrs	r2, r3
 8017c16:	687b      	ldr	r3, [r7, #4]
 8017c18:	62da      	str	r2, [r3, #44]	@ 0x2c

  return HAL_OK;
 8017c1a:	2300      	movs	r3, #0

}
 8017c1c:	4618      	mov	r0, r3
 8017c1e:	3714      	adds	r7, #20
 8017c20:	46bd      	mov	sp, r7
 8017c22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017c26:	4770      	bx	lr

08017c28 <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Length command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDMMC_TypeDef *SDMMCx, uint32_t BlockSize)
{
 8017c28:	b580      	push	{r7, lr}
 8017c2a:	b088      	sub	sp, #32
 8017c2c:	af00      	add	r7, sp, #0
 8017c2e:	6078      	str	r0, [r7, #4]
 8017c30:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 8017c32:	683b      	ldr	r3, [r7, #0]
 8017c34:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 8017c36:	2310      	movs	r3, #16
 8017c38:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8017c3a:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8017c3e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8017c40:	2300      	movs	r3, #0
 8017c42:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8017c44:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8017c48:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8017c4a:	f107 0308 	add.w	r3, r7, #8
 8017c4e:	4619      	mov	r1, r3
 8017c50:	6878      	ldr	r0, [r7, #4]
 8017c52:	f7ff ff73 	bl	8017b3c <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SET_BLOCKLEN, SDMMC_CMDTIMEOUT);
 8017c56:	f241 3288 	movw	r2, #5000	@ 0x1388
 8017c5a:	2110      	movs	r1, #16
 8017c5c:	6878      	ldr	r0, [r7, #4]
 8017c5e:	f000 fa5f 	bl	8018120 <SDMMC_GetCmdResp1>
 8017c62:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8017c64:	69fb      	ldr	r3, [r7, #28]
}
 8017c66:	4618      	mov	r0, r3
 8017c68:	3720      	adds	r7, #32
 8017c6a:	46bd      	mov	sp, r7
 8017c6c:	bd80      	pop	{r7, pc}

08017c6e <SDMMC_CmdReadSingleBlock>:
  * @brief  Send the Read Single Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 8017c6e:	b580      	push	{r7, lr}
 8017c70:	b088      	sub	sp, #32
 8017c72:	af00      	add	r7, sp, #0
 8017c74:	6078      	str	r0, [r7, #4]
 8017c76:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 8017c78:	683b      	ldr	r3, [r7, #0]
 8017c7a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 8017c7c:	2311      	movs	r3, #17
 8017c7e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8017c80:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8017c84:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8017c86:	2300      	movs	r3, #0
 8017c88:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8017c8a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8017c8e:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8017c90:	f107 0308 	add.w	r3, r7, #8
 8017c94:	4619      	mov	r1, r3
 8017c96:	6878      	ldr	r0, [r7, #4]
 8017c98:	f7ff ff50 	bl	8017b3c <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 8017c9c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8017ca0:	2111      	movs	r1, #17
 8017ca2:	6878      	ldr	r0, [r7, #4]
 8017ca4:	f000 fa3c 	bl	8018120 <SDMMC_GetCmdResp1>
 8017ca8:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8017caa:	69fb      	ldr	r3, [r7, #28]
}
 8017cac:	4618      	mov	r0, r3
 8017cae:	3720      	adds	r7, #32
 8017cb0:	46bd      	mov	sp, r7
 8017cb2:	bd80      	pop	{r7, pc}

08017cb4 <SDMMC_CmdReadMultiBlock>:
  * @brief  Send the Read Multi Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 8017cb4:	b580      	push	{r7, lr}
 8017cb6:	b088      	sub	sp, #32
 8017cb8:	af00      	add	r7, sp, #0
 8017cba:	6078      	str	r0, [r7, #4]
 8017cbc:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 8017cbe:	683b      	ldr	r3, [r7, #0]
 8017cc0:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 8017cc2:	2312      	movs	r3, #18
 8017cc4:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8017cc6:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8017cca:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8017ccc:	2300      	movs	r3, #0
 8017cce:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8017cd0:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8017cd4:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8017cd6:	f107 0308 	add.w	r3, r7, #8
 8017cda:	4619      	mov	r1, r3
 8017cdc:	6878      	ldr	r0, [r7, #4]
 8017cde:	f7ff ff2d 	bl	8017b3c <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 8017ce2:	f241 3288 	movw	r2, #5000	@ 0x1388
 8017ce6:	2112      	movs	r1, #18
 8017ce8:	6878      	ldr	r0, [r7, #4]
 8017cea:	f000 fa19 	bl	8018120 <SDMMC_GetCmdResp1>
 8017cee:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8017cf0:	69fb      	ldr	r3, [r7, #28]
}
 8017cf2:	4618      	mov	r0, r3
 8017cf4:	3720      	adds	r7, #32
 8017cf6:	46bd      	mov	sp, r7
 8017cf8:	bd80      	pop	{r7, pc}

08017cfa <SDMMC_CmdWriteSingleBlock>:
  * @brief  Send the Write Single Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 8017cfa:	b580      	push	{r7, lr}
 8017cfc:	b088      	sub	sp, #32
 8017cfe:	af00      	add	r7, sp, #0
 8017d00:	6078      	str	r0, [r7, #4]
 8017d02:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 8017d04:	683b      	ldr	r3, [r7, #0]
 8017d06:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 8017d08:	2318      	movs	r3, #24
 8017d0a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8017d0c:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8017d10:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8017d12:	2300      	movs	r3, #0
 8017d14:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8017d16:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8017d1a:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8017d1c:	f107 0308 	add.w	r3, r7, #8
 8017d20:	4619      	mov	r1, r3
 8017d22:	6878      	ldr	r0, [r7, #4]
 8017d24:	f7ff ff0a 	bl	8017b3c <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 8017d28:	f241 3288 	movw	r2, #5000	@ 0x1388
 8017d2c:	2118      	movs	r1, #24
 8017d2e:	6878      	ldr	r0, [r7, #4]
 8017d30:	f000 f9f6 	bl	8018120 <SDMMC_GetCmdResp1>
 8017d34:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8017d36:	69fb      	ldr	r3, [r7, #28]
}
 8017d38:	4618      	mov	r0, r3
 8017d3a:	3720      	adds	r7, #32
 8017d3c:	46bd      	mov	sp, r7
 8017d3e:	bd80      	pop	{r7, pc}

08017d40 <SDMMC_CmdWriteMultiBlock>:
  * @brief  Send the Write Multi Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 8017d40:	b580      	push	{r7, lr}
 8017d42:	b088      	sub	sp, #32
 8017d44:	af00      	add	r7, sp, #0
 8017d46:	6078      	str	r0, [r7, #4]
 8017d48:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 8017d4a:	683b      	ldr	r3, [r7, #0]
 8017d4c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 8017d4e:	2319      	movs	r3, #25
 8017d50:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8017d52:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8017d56:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8017d58:	2300      	movs	r3, #0
 8017d5a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8017d5c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8017d60:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8017d62:	f107 0308 	add.w	r3, r7, #8
 8017d66:	4619      	mov	r1, r3
 8017d68:	6878      	ldr	r0, [r7, #4]
 8017d6a:	f7ff fee7 	bl	8017b3c <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 8017d6e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8017d72:	2119      	movs	r1, #25
 8017d74:	6878      	ldr	r0, [r7, #4]
 8017d76:	f000 f9d3 	bl	8018120 <SDMMC_GetCmdResp1>
 8017d7a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8017d7c:	69fb      	ldr	r3, [r7, #28]
}
 8017d7e:	4618      	mov	r0, r3
 8017d80:	3720      	adds	r7, #32
 8017d82:	46bd      	mov	sp, r7
 8017d84:	bd80      	pop	{r7, pc}
	...

08017d88 <SDMMC_CmdStopTransfer>:
  * @brief  Send the Stop Transfer command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdStopTransfer(SDMMC_TypeDef *SDMMCx)
{
 8017d88:	b580      	push	{r7, lr}
 8017d8a:	b088      	sub	sp, #32
 8017d8c:	af00      	add	r7, sp, #0
 8017d8e:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD12 STOP_TRANSMISSION  */
  sdmmc_cmdinit.Argument         = 0U;
 8017d90:	2300      	movs	r3, #0
 8017d92:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 8017d94:	230c      	movs	r3, #12
 8017d96:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8017d98:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8017d9c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8017d9e:	2300      	movs	r3, #0
 8017da0:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8017da2:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8017da6:	61bb      	str	r3, [r7, #24]

  __SDMMC_CMDSTOP_ENABLE(SDMMCx);
 8017da8:	687b      	ldr	r3, [r7, #4]
 8017daa:	68db      	ldr	r3, [r3, #12]
 8017dac:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8017db0:	687b      	ldr	r3, [r7, #4]
 8017db2:	60da      	str	r2, [r3, #12]
  __SDMMC_CMDTRANS_DISABLE(SDMMCx);
 8017db4:	687b      	ldr	r3, [r7, #4]
 8017db6:	68db      	ldr	r3, [r3, #12]
 8017db8:	f023 0240 	bic.w	r2, r3, #64	@ 0x40
 8017dbc:	687b      	ldr	r3, [r7, #4]
 8017dbe:	60da      	str	r2, [r3, #12]

  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8017dc0:	f107 0308 	add.w	r3, r7, #8
 8017dc4:	4619      	mov	r1, r3
 8017dc6:	6878      	ldr	r0, [r7, #4]
 8017dc8:	f7ff feb8 	bl	8017b3c <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_STOP_TRANSMISSION, SDMMC_STOPTRANSFERTIMEOUT);
 8017dcc:	4a0b      	ldr	r2, [pc, #44]	@ (8017dfc <SDMMC_CmdStopTransfer+0x74>)
 8017dce:	210c      	movs	r1, #12
 8017dd0:	6878      	ldr	r0, [r7, #4]
 8017dd2:	f000 f9a5 	bl	8018120 <SDMMC_GetCmdResp1>
 8017dd6:	61f8      	str	r0, [r7, #28]

  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 8017dd8:	687b      	ldr	r3, [r7, #4]
 8017dda:	68db      	ldr	r3, [r3, #12]
 8017ddc:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8017de0:	687b      	ldr	r3, [r7, #4]
 8017de2:	60da      	str	r2, [r3, #12]

  /* Ignore Address Out Of Range Error, Not relevant at end of memory */
  if (errorstate == SDMMC_ERROR_ADDR_OUT_OF_RANGE)
 8017de4:	69fb      	ldr	r3, [r7, #28]
 8017de6:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8017dea:	d101      	bne.n	8017df0 <SDMMC_CmdStopTransfer+0x68>
  {
    errorstate = SDMMC_ERROR_NONE;
 8017dec:	2300      	movs	r3, #0
 8017dee:	61fb      	str	r3, [r7, #28]
  }

  return errorstate;
 8017df0:	69fb      	ldr	r3, [r7, #28]
}
 8017df2:	4618      	mov	r0, r3
 8017df4:	3720      	adds	r7, #32
 8017df6:	46bd      	mov	sp, r7
 8017df8:	bd80      	pop	{r7, pc}
 8017dfa:	bf00      	nop
 8017dfc:	05f5e100 	.word	0x05f5e100

08017e00 <SDMMC_CmdSelDesel>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  addr: Address of the card to be selected
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDMMC_TypeDef *SDMMCx, uint32_t Addr)
{
 8017e00:	b580      	push	{r7, lr}
 8017e02:	b088      	sub	sp, #32
 8017e04:	af00      	add	r7, sp, #0
 8017e06:	6078      	str	r0, [r7, #4]
 8017e08:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 8017e0a:	683b      	ldr	r3, [r7, #0]
 8017e0c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 8017e0e:	2307      	movs	r3, #7
 8017e10:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8017e12:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8017e16:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8017e18:	2300      	movs	r3, #0
 8017e1a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8017e1c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8017e20:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8017e22:	f107 0308 	add.w	r3, r7, #8
 8017e26:	4619      	mov	r1, r3
 8017e28:	6878      	ldr	r0, [r7, #4]
 8017e2a:	f7ff fe87 	bl	8017b3c <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEL_DESEL_CARD, SDMMC_CMDTIMEOUT);
 8017e2e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8017e32:	2107      	movs	r1, #7
 8017e34:	6878      	ldr	r0, [r7, #4]
 8017e36:	f000 f973 	bl	8018120 <SDMMC_GetCmdResp1>
 8017e3a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8017e3c:	69fb      	ldr	r3, [r7, #28]
}
 8017e3e:	4618      	mov	r0, r3
 8017e40:	3720      	adds	r7, #32
 8017e42:	46bd      	mov	sp, r7
 8017e44:	bd80      	pop	{r7, pc}

08017e46 <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDMMC_TypeDef *SDMMCx)
{
 8017e46:	b580      	push	{r7, lr}
 8017e48:	b088      	sub	sp, #32
 8017e4a:	af00      	add	r7, sp, #0
 8017e4c:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = 0U;
 8017e4e:	2300      	movs	r3, #0
 8017e50:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 8017e52:	2300      	movs	r3, #0
 8017e54:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_NO;
 8017e56:	2300      	movs	r3, #0
 8017e58:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8017e5a:	2300      	movs	r3, #0
 8017e5c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8017e5e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8017e62:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8017e64:	f107 0308 	add.w	r3, r7, #8
 8017e68:	4619      	mov	r1, r3
 8017e6a:	6878      	ldr	r0, [r7, #4]
 8017e6c:	f7ff fe66 	bl	8017b3c <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDMMCx);
 8017e70:	6878      	ldr	r0, [r7, #4]
 8017e72:	f000 fb97 	bl	80185a4 <SDMMC_GetCmdError>
 8017e76:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8017e78:	69fb      	ldr	r3, [r7, #28]
}
 8017e7a:	4618      	mov	r0, r3
 8017e7c:	3720      	adds	r7, #32
 8017e7e:	46bd      	mov	sp, r7
 8017e80:	bd80      	pop	{r7, pc}

08017e82 <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDMMC_TypeDef *SDMMCx)
{
 8017e82:	b580      	push	{r7, lr}
 8017e84:	b088      	sub	sp, #32
 8017e86:	af00      	add	r7, sp, #0
 8017e88:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 8017e8a:	f44f 73d5 	mov.w	r3, #426	@ 0x1aa
 8017e8e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 8017e90:	2308      	movs	r3, #8
 8017e92:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8017e94:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8017e98:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8017e9a:	2300      	movs	r3, #0
 8017e9c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8017e9e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8017ea2:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8017ea4:	f107 0308 	add.w	r3, r7, #8
 8017ea8:	4619      	mov	r1, r3
 8017eaa:	6878      	ldr	r0, [r7, #4]
 8017eac:	f7ff fe46 	bl	8017b3c <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDMMCx);
 8017eb0:	6878      	ldr	r0, [r7, #4]
 8017eb2:	f000 fb29 	bl	8018508 <SDMMC_GetCmdResp7>
 8017eb6:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8017eb8:	69fb      	ldr	r3, [r7, #28]
}
 8017eba:	4618      	mov	r0, r3
 8017ebc:	3720      	adds	r7, #32
 8017ebe:	46bd      	mov	sp, r7
 8017ec0:	bd80      	pop	{r7, pc}

08017ec2 <SDMMC_CmdAppCommand>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 8017ec2:	b580      	push	{r7, lr}
 8017ec4:	b088      	sub	sp, #32
 8017ec6:	af00      	add	r7, sp, #0
 8017ec8:	6078      	str	r0, [r7, #4]
 8017eca:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 8017ecc:	683b      	ldr	r3, [r7, #0]
 8017ece:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 8017ed0:	2337      	movs	r3, #55	@ 0x37
 8017ed2:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8017ed4:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8017ed8:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8017eda:	2300      	movs	r3, #0
 8017edc:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8017ede:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8017ee2:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8017ee4:	f107 0308 	add.w	r3, r7, #8
 8017ee8:	4619      	mov	r1, r3
 8017eea:	6878      	ldr	r0, [r7, #4]
 8017eec:	f7ff fe26 	bl	8017b3c <SDMMC_SendCommand>

  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_CMD, SDMMC_CMDTIMEOUT);
 8017ef0:	f241 3288 	movw	r2, #5000	@ 0x1388
 8017ef4:	2137      	movs	r1, #55	@ 0x37
 8017ef6:	6878      	ldr	r0, [r7, #4]
 8017ef8:	f000 f912 	bl	8018120 <SDMMC_GetCmdResp1>
 8017efc:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8017efe:	69fb      	ldr	r3, [r7, #28]
}
 8017f00:	4618      	mov	r0, r3
 8017f02:	3720      	adds	r7, #32
 8017f04:	46bd      	mov	sp, r7
 8017f06:	bd80      	pop	{r7, pc}

08017f08 <SDMMC_CmdAppOperCommand>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 8017f08:	b580      	push	{r7, lr}
 8017f0a:	b088      	sub	sp, #32
 8017f0c:	af00      	add	r7, sp, #0
 8017f0e:	6078      	str	r0, [r7, #4]
 8017f10:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = Argument;
 8017f12:	683b      	ldr	r3, [r7, #0]
 8017f14:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 8017f16:	2329      	movs	r3, #41	@ 0x29
 8017f18:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8017f1a:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8017f1e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8017f20:	2300      	movs	r3, #0
 8017f22:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8017f24:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8017f28:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8017f2a:	f107 0308 	add.w	r3, r7, #8
 8017f2e:	4619      	mov	r1, r3
 8017f30:	6878      	ldr	r0, [r7, #4]
 8017f32:	f7ff fe03 	bl	8017b3c <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDMMCx);
 8017f36:	6878      	ldr	r0, [r7, #4]
 8017f38:	f000 fa2e 	bl	8018398 <SDMMC_GetCmdResp3>
 8017f3c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8017f3e:	69fb      	ldr	r3, [r7, #28]
}
 8017f40:	4618      	mov	r0, r3
 8017f42:	3720      	adds	r7, #32
 8017f44:	46bd      	mov	sp, r7
 8017f46:	bd80      	pop	{r7, pc}

08017f48 <SDMMC_CmdBusWidth>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  BusWidth: BusWidth
  * @retval HAL status
  */
uint32_t SDMMC_CmdBusWidth(SDMMC_TypeDef *SDMMCx, uint32_t BusWidth)
{
 8017f48:	b580      	push	{r7, lr}
 8017f4a:	b088      	sub	sp, #32
 8017f4c:	af00      	add	r7, sp, #0
 8017f4e:	6078      	str	r0, [r7, #4]
 8017f50:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = (uint32_t)BusWidth;
 8017f52:	683b      	ldr	r3, [r7, #0]
 8017f54:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_SD_SET_BUSWIDTH;
 8017f56:	2306      	movs	r3, #6
 8017f58:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8017f5a:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8017f5e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8017f60:	2300      	movs	r3, #0
 8017f62:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8017f64:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8017f68:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8017f6a:	f107 0308 	add.w	r3, r7, #8
 8017f6e:	4619      	mov	r1, r3
 8017f70:	6878      	ldr	r0, [r7, #4]
 8017f72:	f7ff fde3 	bl	8017b3c <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_SD_SET_BUSWIDTH, SDMMC_CMDTIMEOUT);
 8017f76:	f241 3288 	movw	r2, #5000	@ 0x1388
 8017f7a:	2106      	movs	r1, #6
 8017f7c:	6878      	ldr	r0, [r7, #4]
 8017f7e:	f000 f8cf 	bl	8018120 <SDMMC_GetCmdResp1>
 8017f82:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8017f84:	69fb      	ldr	r3, [r7, #28]
}
 8017f86:	4618      	mov	r0, r3
 8017f88:	3720      	adds	r7, #32
 8017f8a:	46bd      	mov	sp, r7
 8017f8c:	bd80      	pop	{r7, pc}

08017f8e <SDMMC_CmdSendSCR>:
  * @brief  Send the Send SCR command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendSCR(SDMMC_TypeDef *SDMMCx)
{
 8017f8e:	b580      	push	{r7, lr}
 8017f90:	b088      	sub	sp, #32
 8017f92:	af00      	add	r7, sp, #0
 8017f94:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD51 SD_APP_SEND_SCR */
  sdmmc_cmdinit.Argument         = 0U;
 8017f96:	2300      	movs	r3, #0
 8017f98:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_SEND_SCR;
 8017f9a:	2333      	movs	r3, #51	@ 0x33
 8017f9c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8017f9e:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8017fa2:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8017fa4:	2300      	movs	r3, #0
 8017fa6:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8017fa8:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8017fac:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8017fae:	f107 0308 	add.w	r3, r7, #8
 8017fb2:	4619      	mov	r1, r3
 8017fb4:	6878      	ldr	r0, [r7, #4]
 8017fb6:	f7ff fdc1 	bl	8017b3c <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SD_APP_SEND_SCR, SDMMC_CMDTIMEOUT);
 8017fba:	f241 3288 	movw	r2, #5000	@ 0x1388
 8017fbe:	2133      	movs	r1, #51	@ 0x33
 8017fc0:	6878      	ldr	r0, [r7, #4]
 8017fc2:	f000 f8ad 	bl	8018120 <SDMMC_GetCmdResp1>
 8017fc6:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8017fc8:	69fb      	ldr	r3, [r7, #28]
}
 8017fca:	4618      	mov	r0, r3
 8017fcc:	3720      	adds	r7, #32
 8017fce:	46bd      	mov	sp, r7
 8017fd0:	bd80      	pop	{r7, pc}

08017fd2 <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDMMC_TypeDef *SDMMCx)
{
 8017fd2:	b580      	push	{r7, lr}
 8017fd4:	b088      	sub	sp, #32
 8017fd6:	af00      	add	r7, sp, #0
 8017fd8:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 8017fda:	2300      	movs	r3, #0
 8017fdc:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 8017fde:	2302      	movs	r3, #2
 8017fe0:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 8017fe2:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8017fe6:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8017fe8:	2300      	movs	r3, #0
 8017fea:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8017fec:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8017ff0:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8017ff2:	f107 0308 	add.w	r3, r7, #8
 8017ff6:	4619      	mov	r1, r3
 8017ff8:	6878      	ldr	r0, [r7, #4]
 8017ffa:	f7ff fd9f 	bl	8017b3c <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 8017ffe:	6878      	ldr	r0, [r7, #4]
 8018000:	f000 f980 	bl	8018304 <SDMMC_GetCmdResp2>
 8018004:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8018006:	69fb      	ldr	r3, [r7, #28]
}
 8018008:	4618      	mov	r0, r3
 801800a:	3720      	adds	r7, #32
 801800c:	46bd      	mov	sp, r7
 801800e:	bd80      	pop	{r7, pc}

08018010 <SDMMC_CmdSendCSD>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 8018010:	b580      	push	{r7, lr}
 8018012:	b088      	sub	sp, #32
 8018014:	af00      	add	r7, sp, #0
 8018016:	6078      	str	r0, [r7, #4]
 8018018:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 801801a:	683b      	ldr	r3, [r7, #0]
 801801c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 801801e:	2309      	movs	r3, #9
 8018020:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 8018022:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8018026:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8018028:	2300      	movs	r3, #0
 801802a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 801802c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8018030:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8018032:	f107 0308 	add.w	r3, r7, #8
 8018036:	4619      	mov	r1, r3
 8018038:	6878      	ldr	r0, [r7, #4]
 801803a:	f7ff fd7f 	bl	8017b3c <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 801803e:	6878      	ldr	r0, [r7, #4]
 8018040:	f000 f960 	bl	8018304 <SDMMC_GetCmdResp2>
 8018044:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8018046:	69fb      	ldr	r3, [r7, #28]
}
 8018048:	4618      	mov	r0, r3
 801804a:	3720      	adds	r7, #32
 801804c:	46bd      	mov	sp, r7
 801804e:	bd80      	pop	{r7, pc}

08018050 <SDMMC_CmdSetRelAdd>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  pRCA: Card RCA
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDMMC_TypeDef *SDMMCx, uint16_t *pRCA)
{
 8018050:	b580      	push	{r7, lr}
 8018052:	b088      	sub	sp, #32
 8018054:	af00      	add	r7, sp, #0
 8018056:	6078      	str	r0, [r7, #4]
 8018058:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 801805a:	2300      	movs	r3, #0
 801805c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 801805e:	2303      	movs	r3, #3
 8018060:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8018062:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8018066:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8018068:	2300      	movs	r3, #0
 801806a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 801806c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8018070:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8018072:	f107 0308 	add.w	r3, r7, #8
 8018076:	4619      	mov	r1, r3
 8018078:	6878      	ldr	r0, [r7, #4]
 801807a:	f7ff fd5f 	bl	8017b3c <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDMMCx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 801807e:	683a      	ldr	r2, [r7, #0]
 8018080:	2103      	movs	r1, #3
 8018082:	6878      	ldr	r0, [r7, #4]
 8018084:	f000 f9c8 	bl	8018418 <SDMMC_GetCmdResp6>
 8018088:	61f8      	str	r0, [r7, #28]

  return errorstate;
 801808a:	69fb      	ldr	r3, [r7, #28]
}
 801808c:	4618      	mov	r0, r3
 801808e:	3720      	adds	r7, #32
 8018090:	46bd      	mov	sp, r7
 8018092:	bd80      	pop	{r7, pc}

08018094 <SDMMC_CmdSendStatus>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 8018094:	b580      	push	{r7, lr}
 8018096:	b088      	sub	sp, #32
 8018098:	af00      	add	r7, sp, #0
 801809a:	6078      	str	r0, [r7, #4]
 801809c:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = Argument;
 801809e:	683b      	ldr	r3, [r7, #0]
 80180a0:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 80180a2:	230d      	movs	r3, #13
 80180a4:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80180a6:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80180aa:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80180ac:	2300      	movs	r3, #0
 80180ae:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80180b0:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80180b4:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80180b6:	f107 0308 	add.w	r3, r7, #8
 80180ba:	4619      	mov	r1, r3
 80180bc:	6878      	ldr	r0, [r7, #4]
 80180be:	f7ff fd3d 	bl	8017b3c <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEND_STATUS, SDMMC_CMDTIMEOUT);
 80180c2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80180c6:	210d      	movs	r1, #13
 80180c8:	6878      	ldr	r0, [r7, #4]
 80180ca:	f000 f829 	bl	8018120 <SDMMC_GetCmdResp1>
 80180ce:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80180d0:	69fb      	ldr	r3, [r7, #28]
}
 80180d2:	4618      	mov	r0, r3
 80180d4:	3720      	adds	r7, #32
 80180d6:	46bd      	mov	sp, r7
 80180d8:	bd80      	pop	{r7, pc}

080180da <SDMMC_CmdStatusRegister>:
  * @brief  Send the Status register command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdStatusRegister(SDMMC_TypeDef *SDMMCx)
{
 80180da:	b580      	push	{r7, lr}
 80180dc:	b088      	sub	sp, #32
 80180de:	af00      	add	r7, sp, #0
 80180e0:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = 0U;
 80180e2:	2300      	movs	r3, #0
 80180e4:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_STATUS;
 80180e6:	230d      	movs	r3, #13
 80180e8:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80180ea:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80180ee:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80180f0:	2300      	movs	r3, #0
 80180f2:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80180f4:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80180f8:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80180fa:	f107 0308 	add.w	r3, r7, #8
 80180fe:	4619      	mov	r1, r3
 8018100:	6878      	ldr	r0, [r7, #4]
 8018102:	f7ff fd1b 	bl	8017b3c <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SD_APP_STATUS, SDMMC_CMDTIMEOUT);
 8018106:	f241 3288 	movw	r2, #5000	@ 0x1388
 801810a:	210d      	movs	r1, #13
 801810c:	6878      	ldr	r0, [r7, #4]
 801810e:	f000 f807 	bl	8018120 <SDMMC_GetCmdResp1>
 8018112:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8018114:	69fb      	ldr	r3, [r7, #28]
}
 8018116:	4618      	mov	r0, r3
 8018118:	3720      	adds	r7, #32
 801811a:	46bd      	mov	sp, r7
 801811c:	bd80      	pop	{r7, pc}
	...

08018120 <SDMMC_GetCmdResp1>:
  * @param  hsd: SD handle
  * @param  SD_CMD: The sent command index
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp1(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint32_t Timeout)
{
 8018120:	b580      	push	{r7, lr}
 8018122:	b088      	sub	sp, #32
 8018124:	af00      	add	r7, sp, #0
 8018126:	60f8      	str	r0, [r7, #12]
 8018128:	460b      	mov	r3, r1
 801812a:	607a      	str	r2, [r7, #4]
 801812c:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 801812e:	4b70      	ldr	r3, [pc, #448]	@ (80182f0 <SDMMC_GetCmdResp1+0x1d0>)
 8018130:	681b      	ldr	r3, [r3, #0]
 8018132:	4a70      	ldr	r2, [pc, #448]	@ (80182f4 <SDMMC_GetCmdResp1+0x1d4>)
 8018134:	fba2 2303 	umull	r2, r3, r2, r3
 8018138:	0a5a      	lsrs	r2, r3, #9
 801813a:	687b      	ldr	r3, [r7, #4]
 801813c:	fb02 f303 	mul.w	r3, r2, r3
 8018140:	61fb      	str	r3, [r7, #28]

  do
  {
    if (count-- == 0U)
 8018142:	69fb      	ldr	r3, [r7, #28]
 8018144:	1e5a      	subs	r2, r3, #1
 8018146:	61fa      	str	r2, [r7, #28]
 8018148:	2b00      	cmp	r3, #0
 801814a:	d102      	bne.n	8018152 <SDMMC_GetCmdResp1+0x32>
    {
      return SDMMC_ERROR_TIMEOUT;
 801814c:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8018150:	e0c9      	b.n	80182e6 <SDMMC_GetCmdResp1+0x1c6>
    }
    sta_reg = SDMMCx->STA;
 8018152:	68fb      	ldr	r3, [r7, #12]
 8018154:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8018156:	61bb      	str	r3, [r7, #24]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT |
 8018158:	69ba      	ldr	r2, [r7, #24]
 801815a:	4b67      	ldr	r3, [pc, #412]	@ (80182f8 <SDMMC_GetCmdResp1+0x1d8>)
 801815c:	4013      	ands	r3, r2
                        SDMMC_FLAG_BUSYD0END)) == 0U) || ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 801815e:	2b00      	cmp	r3, #0
 8018160:	d0ef      	beq.n	8018142 <SDMMC_GetCmdResp1+0x22>
 8018162:	69bb      	ldr	r3, [r7, #24]
 8018164:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8018168:	2b00      	cmp	r3, #0
 801816a:	d1ea      	bne.n	8018142 <SDMMC_GetCmdResp1+0x22>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 801816c:	68fb      	ldr	r3, [r7, #12]
 801816e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8018170:	f003 0304 	and.w	r3, r3, #4
 8018174:	2b00      	cmp	r3, #0
 8018176:	d004      	beq.n	8018182 <SDMMC_GetCmdResp1+0x62>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8018178:	68fb      	ldr	r3, [r7, #12]
 801817a:	2204      	movs	r2, #4
 801817c:	639a      	str	r2, [r3, #56]	@ 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 801817e:	2304      	movs	r3, #4
 8018180:	e0b1      	b.n	80182e6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 8018182:	68fb      	ldr	r3, [r7, #12]
 8018184:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8018186:	f003 0301 	and.w	r3, r3, #1
 801818a:	2b00      	cmp	r3, #0
 801818c:	d004      	beq.n	8018198 <SDMMC_GetCmdResp1+0x78>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 801818e:	68fb      	ldr	r3, [r7, #12]
 8018190:	2201      	movs	r2, #1
 8018192:	639a      	str	r2, [r3, #56]	@ 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 8018194:	2301      	movs	r3, #1
 8018196:	e0a6      	b.n	80182e6 <SDMMC_GetCmdResp1+0x1c6>
  {
    /* Nothing to do */
  }

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8018198:	68fb      	ldr	r3, [r7, #12]
 801819a:	4a58      	ldr	r2, [pc, #352]	@ (80182fc <SDMMC_GetCmdResp1+0x1dc>)
 801819c:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Check response received is of desired command */
  if (SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 801819e:	68f8      	ldr	r0, [r7, #12]
 80181a0:	f7ff fcf6 	bl	8017b90 <SDMMC_GetCommandResponse>
 80181a4:	4603      	mov	r3, r0
 80181a6:	461a      	mov	r2, r3
 80181a8:	7afb      	ldrb	r3, [r7, #11]
 80181aa:	4293      	cmp	r3, r2
 80181ac:	d001      	beq.n	80181b2 <SDMMC_GetCmdResp1+0x92>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 80181ae:	2301      	movs	r3, #1
 80181b0:	e099      	b.n	80182e6 <SDMMC_GetCmdResp1+0x1c6>
  }

  /* We have received response, retrieve it for analysis  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 80181b2:	2100      	movs	r1, #0
 80181b4:	68f8      	ldr	r0, [r7, #12]
 80181b6:	f7ff fcf8 	bl	8017baa <SDMMC_GetResponse>
 80181ba:	6178      	str	r0, [r7, #20]

  if ((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 80181bc:	697a      	ldr	r2, [r7, #20]
 80181be:	4b50      	ldr	r3, [pc, #320]	@ (8018300 <SDMMC_GetCmdResp1+0x1e0>)
 80181c0:	4013      	ands	r3, r2
 80181c2:	2b00      	cmp	r3, #0
 80181c4:	d101      	bne.n	80181ca <SDMMC_GetCmdResp1+0xaa>
  {
    return SDMMC_ERROR_NONE;
 80181c6:	2300      	movs	r3, #0
 80181c8:	e08d      	b.n	80182e6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 80181ca:	697b      	ldr	r3, [r7, #20]
 80181cc:	2b00      	cmp	r3, #0
 80181ce:	da02      	bge.n	80181d6 <SDMMC_GetCmdResp1+0xb6>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 80181d0:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80181d4:	e087      	b.n	80182e6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 80181d6:	697b      	ldr	r3, [r7, #20]
 80181d8:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 80181dc:	2b00      	cmp	r3, #0
 80181de:	d001      	beq.n	80181e4 <SDMMC_GetCmdResp1+0xc4>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 80181e0:	2340      	movs	r3, #64	@ 0x40
 80181e2:	e080      	b.n	80182e6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 80181e4:	697b      	ldr	r3, [r7, #20]
 80181e6:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80181ea:	2b00      	cmp	r3, #0
 80181ec:	d001      	beq.n	80181f2 <SDMMC_GetCmdResp1+0xd2>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 80181ee:	2380      	movs	r3, #128	@ 0x80
 80181f0:	e079      	b.n	80182e6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 80181f2:	697b      	ldr	r3, [r7, #20]
 80181f4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80181f8:	2b00      	cmp	r3, #0
 80181fa:	d002      	beq.n	8018202 <SDMMC_GetCmdResp1+0xe2>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 80181fc:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8018200:	e071      	b.n	80182e6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 8018202:	697b      	ldr	r3, [r7, #20]
 8018204:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8018208:	2b00      	cmp	r3, #0
 801820a:	d002      	beq.n	8018212 <SDMMC_GetCmdResp1+0xf2>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 801820c:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8018210:	e069      	b.n	80182e6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 8018212:	697b      	ldr	r3, [r7, #20]
 8018214:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8018218:	2b00      	cmp	r3, #0
 801821a:	d002      	beq.n	8018222 <SDMMC_GetCmdResp1+0x102>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 801821c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8018220:	e061      	b.n	80182e6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 8018222:	697b      	ldr	r3, [r7, #20]
 8018224:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8018228:	2b00      	cmp	r3, #0
 801822a:	d002      	beq.n	8018232 <SDMMC_GetCmdResp1+0x112>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 801822c:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8018230:	e059      	b.n	80182e6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 8018232:	697b      	ldr	r3, [r7, #20]
 8018234:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8018238:	2b00      	cmp	r3, #0
 801823a:	d002      	beq.n	8018242 <SDMMC_GetCmdResp1+0x122>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 801823c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8018240:	e051      	b.n	80182e6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 8018242:	697b      	ldr	r3, [r7, #20]
 8018244:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8018248:	2b00      	cmp	r3, #0
 801824a:	d002      	beq.n	8018252 <SDMMC_GetCmdResp1+0x132>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 801824c:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8018250:	e049      	b.n	80182e6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 8018252:	697b      	ldr	r3, [r7, #20]
 8018254:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8018258:	2b00      	cmp	r3, #0
 801825a:	d002      	beq.n	8018262 <SDMMC_GetCmdResp1+0x142>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 801825c:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8018260:	e041      	b.n	80182e6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 8018262:	697b      	ldr	r3, [r7, #20]
 8018264:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8018268:	2b00      	cmp	r3, #0
 801826a:	d002      	beq.n	8018272 <SDMMC_GetCmdResp1+0x152>
  {
    return SDMMC_ERROR_CC_ERR;
 801826c:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8018270:	e039      	b.n	80182e6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 8018272:	697b      	ldr	r3, [r7, #20]
 8018274:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8018278:	2b00      	cmp	r3, #0
 801827a:	d002      	beq.n	8018282 <SDMMC_GetCmdResp1+0x162>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 801827c:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8018280:	e031      	b.n	80182e6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 8018282:	697b      	ldr	r3, [r7, #20]
 8018284:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8018288:	2b00      	cmp	r3, #0
 801828a:	d002      	beq.n	8018292 <SDMMC_GetCmdResp1+0x172>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 801828c:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 8018290:	e029      	b.n	80182e6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 8018292:	697b      	ldr	r3, [r7, #20]
 8018294:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8018298:	2b00      	cmp	r3, #0
 801829a:	d002      	beq.n	80182a2 <SDMMC_GetCmdResp1+0x182>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 801829c:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 80182a0:	e021      	b.n	80182e6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 80182a2:	697b      	ldr	r3, [r7, #20]
 80182a4:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80182a8:	2b00      	cmp	r3, #0
 80182aa:	d002      	beq.n	80182b2 <SDMMC_GetCmdResp1+0x192>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 80182ac:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 80182b0:	e019      	b.n	80182e6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 80182b2:	697b      	ldr	r3, [r7, #20]
 80182b4:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80182b8:	2b00      	cmp	r3, #0
 80182ba:	d002      	beq.n	80182c2 <SDMMC_GetCmdResp1+0x1a2>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 80182bc:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 80182c0:	e011      	b.n	80182e6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 80182c2:	697b      	ldr	r3, [r7, #20]
 80182c4:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80182c8:	2b00      	cmp	r3, #0
 80182ca:	d002      	beq.n	80182d2 <SDMMC_GetCmdResp1+0x1b2>
  {
    return SDMMC_ERROR_ERASE_RESET;
 80182cc:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 80182d0:	e009      	b.n	80182e6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 80182d2:	697b      	ldr	r3, [r7, #20]
 80182d4:	f003 0308 	and.w	r3, r3, #8
 80182d8:	2b00      	cmp	r3, #0
 80182da:	d002      	beq.n	80182e2 <SDMMC_GetCmdResp1+0x1c2>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 80182dc:	f44f 0300 	mov.w	r3, #8388608	@ 0x800000
 80182e0:	e001      	b.n	80182e6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 80182e2:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
  }
}
 80182e6:	4618      	mov	r0, r3
 80182e8:	3720      	adds	r7, #32
 80182ea:	46bd      	mov	sp, r7
 80182ec:	bd80      	pop	{r7, pc}
 80182ee:	bf00      	nop
 80182f0:	24000000 	.word	0x24000000
 80182f4:	10624dd3 	.word	0x10624dd3
 80182f8:	00200045 	.word	0x00200045
 80182fc:	002000c5 	.word	0x002000c5
 8018300:	fdffe008 	.word	0xfdffe008

08018304 <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp2(SDMMC_TypeDef *SDMMCx)
{
 8018304:	b480      	push	{r7}
 8018306:	b085      	sub	sp, #20
 8018308:	af00      	add	r7, sp, #0
 801830a:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 801830c:	4b1f      	ldr	r3, [pc, #124]	@ (801838c <SDMMC_GetCmdResp2+0x88>)
 801830e:	681b      	ldr	r3, [r3, #0]
 8018310:	4a1f      	ldr	r2, [pc, #124]	@ (8018390 <SDMMC_GetCmdResp2+0x8c>)
 8018312:	fba2 2303 	umull	r2, r3, r2, r3
 8018316:	0a5b      	lsrs	r3, r3, #9
 8018318:	f241 3288 	movw	r2, #5000	@ 0x1388
 801831c:	fb02 f303 	mul.w	r3, r2, r3
 8018320:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 8018322:	68fb      	ldr	r3, [r7, #12]
 8018324:	1e5a      	subs	r2, r3, #1
 8018326:	60fa      	str	r2, [r7, #12]
 8018328:	2b00      	cmp	r3, #0
 801832a:	d102      	bne.n	8018332 <SDMMC_GetCmdResp2+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 801832c:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8018330:	e026      	b.n	8018380 <SDMMC_GetCmdResp2+0x7c>
    }
    sta_reg = SDMMCx->STA;
 8018332:	687b      	ldr	r3, [r7, #4]
 8018334:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8018336:	60bb      	str	r3, [r7, #8]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8018338:	68bb      	ldr	r3, [r7, #8]
 801833a:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 801833e:	2b00      	cmp	r3, #0
 8018340:	d0ef      	beq.n	8018322 <SDMMC_GetCmdResp2+0x1e>
           ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 8018342:	68bb      	ldr	r3, [r7, #8]
 8018344:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8018348:	2b00      	cmp	r3, #0
 801834a:	d1ea      	bne.n	8018322 <SDMMC_GetCmdResp2+0x1e>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 801834c:	687b      	ldr	r3, [r7, #4]
 801834e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8018350:	f003 0304 	and.w	r3, r3, #4
 8018354:	2b00      	cmp	r3, #0
 8018356:	d004      	beq.n	8018362 <SDMMC_GetCmdResp2+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8018358:	687b      	ldr	r3, [r7, #4]
 801835a:	2204      	movs	r2, #4
 801835c:	639a      	str	r2, [r3, #56]	@ 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 801835e:	2304      	movs	r3, #4
 8018360:	e00e      	b.n	8018380 <SDMMC_GetCmdResp2+0x7c>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 8018362:	687b      	ldr	r3, [r7, #4]
 8018364:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8018366:	f003 0301 	and.w	r3, r3, #1
 801836a:	2b00      	cmp	r3, #0
 801836c:	d004      	beq.n	8018378 <SDMMC_GetCmdResp2+0x74>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 801836e:	687b      	ldr	r3, [r7, #4]
 8018370:	2201      	movs	r2, #1
 8018372:	639a      	str	r2, [r3, #56]	@ 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 8018374:	2301      	movs	r3, #1
 8018376:	e003      	b.n	8018380 <SDMMC_GetCmdResp2+0x7c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8018378:	687b      	ldr	r3, [r7, #4]
 801837a:	4a06      	ldr	r2, [pc, #24]	@ (8018394 <SDMMC_GetCmdResp2+0x90>)
 801837c:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  return SDMMC_ERROR_NONE;
 801837e:	2300      	movs	r3, #0
}
 8018380:	4618      	mov	r0, r3
 8018382:	3714      	adds	r7, #20
 8018384:	46bd      	mov	sp, r7
 8018386:	f85d 7b04 	ldr.w	r7, [sp], #4
 801838a:	4770      	bx	lr
 801838c:	24000000 	.word	0x24000000
 8018390:	10624dd3 	.word	0x10624dd3
 8018394:	002000c5 	.word	0x002000c5

08018398 <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp3(SDMMC_TypeDef *SDMMCx)
{
 8018398:	b480      	push	{r7}
 801839a:	b085      	sub	sp, #20
 801839c:	af00      	add	r7, sp, #0
 801839e:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 80183a0:	4b1a      	ldr	r3, [pc, #104]	@ (801840c <SDMMC_GetCmdResp3+0x74>)
 80183a2:	681b      	ldr	r3, [r3, #0]
 80183a4:	4a1a      	ldr	r2, [pc, #104]	@ (8018410 <SDMMC_GetCmdResp3+0x78>)
 80183a6:	fba2 2303 	umull	r2, r3, r2, r3
 80183aa:	0a5b      	lsrs	r3, r3, #9
 80183ac:	f241 3288 	movw	r2, #5000	@ 0x1388
 80183b0:	fb02 f303 	mul.w	r3, r2, r3
 80183b4:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 80183b6:	68fb      	ldr	r3, [r7, #12]
 80183b8:	1e5a      	subs	r2, r3, #1
 80183ba:	60fa      	str	r2, [r7, #12]
 80183bc:	2b00      	cmp	r3, #0
 80183be:	d102      	bne.n	80183c6 <SDMMC_GetCmdResp3+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 80183c0:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 80183c4:	e01b      	b.n	80183fe <SDMMC_GetCmdResp3+0x66>
    }
    sta_reg = SDMMCx->STA;
 80183c6:	687b      	ldr	r3, [r7, #4]
 80183c8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80183ca:	60bb      	str	r3, [r7, #8]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 80183cc:	68bb      	ldr	r3, [r7, #8]
 80183ce:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 80183d2:	2b00      	cmp	r3, #0
 80183d4:	d0ef      	beq.n	80183b6 <SDMMC_GetCmdResp3+0x1e>
           ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 80183d6:	68bb      	ldr	r3, [r7, #8]
 80183d8:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 80183dc:	2b00      	cmp	r3, #0
 80183de:	d1ea      	bne.n	80183b6 <SDMMC_GetCmdResp3+0x1e>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 80183e0:	687b      	ldr	r3, [r7, #4]
 80183e2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80183e4:	f003 0304 	and.w	r3, r3, #4
 80183e8:	2b00      	cmp	r3, #0
 80183ea:	d004      	beq.n	80183f6 <SDMMC_GetCmdResp3+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 80183ec:	687b      	ldr	r3, [r7, #4]
 80183ee:	2204      	movs	r2, #4
 80183f0:	639a      	str	r2, [r3, #56]	@ 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 80183f2:	2304      	movs	r3, #4
 80183f4:	e003      	b.n	80183fe <SDMMC_GetCmdResp3+0x66>
  }
  else
  {
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 80183f6:	687b      	ldr	r3, [r7, #4]
 80183f8:	4a06      	ldr	r2, [pc, #24]	@ (8018414 <SDMMC_GetCmdResp3+0x7c>)
 80183fa:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  return SDMMC_ERROR_NONE;
 80183fc:	2300      	movs	r3, #0
}
 80183fe:	4618      	mov	r0, r3
 8018400:	3714      	adds	r7, #20
 8018402:	46bd      	mov	sp, r7
 8018404:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018408:	4770      	bx	lr
 801840a:	bf00      	nop
 801840c:	24000000 	.word	0x24000000
 8018410:	10624dd3 	.word	0x10624dd3
 8018414:	002000c5 	.word	0x002000c5

08018418 <SDMMC_GetCmdResp6>:
  * @param  pRCA: Pointer to the variable that will contain the SD card relative
  *         address RCA
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp6(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint16_t *pRCA)
{
 8018418:	b580      	push	{r7, lr}
 801841a:	b088      	sub	sp, #32
 801841c:	af00      	add	r7, sp, #0
 801841e:	60f8      	str	r0, [r7, #12]
 8018420:	460b      	mov	r3, r1
 8018422:	607a      	str	r2, [r7, #4]
 8018424:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 8018426:	4b35      	ldr	r3, [pc, #212]	@ (80184fc <SDMMC_GetCmdResp6+0xe4>)
 8018428:	681b      	ldr	r3, [r3, #0]
 801842a:	4a35      	ldr	r2, [pc, #212]	@ (8018500 <SDMMC_GetCmdResp6+0xe8>)
 801842c:	fba2 2303 	umull	r2, r3, r2, r3
 8018430:	0a5b      	lsrs	r3, r3, #9
 8018432:	f241 3288 	movw	r2, #5000	@ 0x1388
 8018436:	fb02 f303 	mul.w	r3, r2, r3
 801843a:	61fb      	str	r3, [r7, #28]

  do
  {
    if (count-- == 0U)
 801843c:	69fb      	ldr	r3, [r7, #28]
 801843e:	1e5a      	subs	r2, r3, #1
 8018440:	61fa      	str	r2, [r7, #28]
 8018442:	2b00      	cmp	r3, #0
 8018444:	d102      	bne.n	801844c <SDMMC_GetCmdResp6+0x34>
    {
      return SDMMC_ERROR_TIMEOUT;
 8018446:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 801844a:	e052      	b.n	80184f2 <SDMMC_GetCmdResp6+0xda>
    }
    sta_reg = SDMMCx->STA;
 801844c:	68fb      	ldr	r3, [r7, #12]
 801844e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8018450:	61bb      	str	r3, [r7, #24]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8018452:	69bb      	ldr	r3, [r7, #24]
 8018454:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 8018458:	2b00      	cmp	r3, #0
 801845a:	d0ef      	beq.n	801843c <SDMMC_GetCmdResp6+0x24>
           ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 801845c:	69bb      	ldr	r3, [r7, #24]
 801845e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8018462:	2b00      	cmp	r3, #0
 8018464:	d1ea      	bne.n	801843c <SDMMC_GetCmdResp6+0x24>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8018466:	68fb      	ldr	r3, [r7, #12]
 8018468:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 801846a:	f003 0304 	and.w	r3, r3, #4
 801846e:	2b00      	cmp	r3, #0
 8018470:	d004      	beq.n	801847c <SDMMC_GetCmdResp6+0x64>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8018472:	68fb      	ldr	r3, [r7, #12]
 8018474:	2204      	movs	r2, #4
 8018476:	639a      	str	r2, [r3, #56]	@ 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8018478:	2304      	movs	r3, #4
 801847a:	e03a      	b.n	80184f2 <SDMMC_GetCmdResp6+0xda>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 801847c:	68fb      	ldr	r3, [r7, #12]
 801847e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8018480:	f003 0301 	and.w	r3, r3, #1
 8018484:	2b00      	cmp	r3, #0
 8018486:	d004      	beq.n	8018492 <SDMMC_GetCmdResp6+0x7a>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8018488:	68fb      	ldr	r3, [r7, #12]
 801848a:	2201      	movs	r2, #1
 801848c:	639a      	str	r2, [r3, #56]	@ 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 801848e:	2301      	movs	r3, #1
 8018490:	e02f      	b.n	80184f2 <SDMMC_GetCmdResp6+0xda>
  {
    /* Nothing to do */
  }

  /* Check response received is of desired command */
  if (SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 8018492:	68f8      	ldr	r0, [r7, #12]
 8018494:	f7ff fb7c 	bl	8017b90 <SDMMC_GetCommandResponse>
 8018498:	4603      	mov	r3, r0
 801849a:	461a      	mov	r2, r3
 801849c:	7afb      	ldrb	r3, [r7, #11]
 801849e:	4293      	cmp	r3, r2
 80184a0:	d001      	beq.n	80184a6 <SDMMC_GetCmdResp6+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 80184a2:	2301      	movs	r3, #1
 80184a4:	e025      	b.n	80184f2 <SDMMC_GetCmdResp6+0xda>
  }

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 80184a6:	68fb      	ldr	r3, [r7, #12]
 80184a8:	4a16      	ldr	r2, [pc, #88]	@ (8018504 <SDMMC_GetCmdResp6+0xec>)
 80184aa:	639a      	str	r2, [r3, #56]	@ 0x38

  /* We have received response, retrieve it.  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 80184ac:	2100      	movs	r1, #0
 80184ae:	68f8      	ldr	r0, [r7, #12]
 80184b0:	f7ff fb7b 	bl	8017baa <SDMMC_GetResponse>
 80184b4:	6178      	str	r0, [r7, #20]

  if ((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD |
 80184b6:	697b      	ldr	r3, [r7, #20]
 80184b8:	f403 4360 	and.w	r3, r3, #57344	@ 0xe000
 80184bc:	2b00      	cmp	r3, #0
 80184be:	d106      	bne.n	80184ce <SDMMC_GetCmdResp6+0xb6>
                      SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
  {
    *pRCA = (uint16_t)(response_r1 >> 16);
 80184c0:	697b      	ldr	r3, [r7, #20]
 80184c2:	0c1b      	lsrs	r3, r3, #16
 80184c4:	b29a      	uxth	r2, r3
 80184c6:	687b      	ldr	r3, [r7, #4]
 80184c8:	801a      	strh	r2, [r3, #0]

    return SDMMC_ERROR_NONE;
 80184ca:	2300      	movs	r3, #0
 80184cc:	e011      	b.n	80184f2 <SDMMC_GetCmdResp6+0xda>
  }
  else if ((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 80184ce:	697b      	ldr	r3, [r7, #20]
 80184d0:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80184d4:	2b00      	cmp	r3, #0
 80184d6:	d002      	beq.n	80184de <SDMMC_GetCmdResp6+0xc6>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 80184d8:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80184dc:	e009      	b.n	80184f2 <SDMMC_GetCmdResp6+0xda>
  }
  else if ((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 80184de:	697b      	ldr	r3, [r7, #20]
 80184e0:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80184e4:	2b00      	cmp	r3, #0
 80184e6:	d002      	beq.n	80184ee <SDMMC_GetCmdResp6+0xd6>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 80184e8:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80184ec:	e001      	b.n	80184f2 <SDMMC_GetCmdResp6+0xda>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 80184ee:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
  }
}
 80184f2:	4618      	mov	r0, r3
 80184f4:	3720      	adds	r7, #32
 80184f6:	46bd      	mov	sp, r7
 80184f8:	bd80      	pop	{r7, pc}
 80184fa:	bf00      	nop
 80184fc:	24000000 	.word	0x24000000
 8018500:	10624dd3 	.word	0x10624dd3
 8018504:	002000c5 	.word	0x002000c5

08018508 <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp7(SDMMC_TypeDef *SDMMCx)
{
 8018508:	b480      	push	{r7}
 801850a:	b085      	sub	sp, #20
 801850c:	af00      	add	r7, sp, #0
 801850e:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 8018510:	4b22      	ldr	r3, [pc, #136]	@ (801859c <SDMMC_GetCmdResp7+0x94>)
 8018512:	681b      	ldr	r3, [r3, #0]
 8018514:	4a22      	ldr	r2, [pc, #136]	@ (80185a0 <SDMMC_GetCmdResp7+0x98>)
 8018516:	fba2 2303 	umull	r2, r3, r2, r3
 801851a:	0a5b      	lsrs	r3, r3, #9
 801851c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8018520:	fb02 f303 	mul.w	r3, r2, r3
 8018524:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 8018526:	68fb      	ldr	r3, [r7, #12]
 8018528:	1e5a      	subs	r2, r3, #1
 801852a:	60fa      	str	r2, [r7, #12]
 801852c:	2b00      	cmp	r3, #0
 801852e:	d102      	bne.n	8018536 <SDMMC_GetCmdResp7+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8018530:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8018534:	e02c      	b.n	8018590 <SDMMC_GetCmdResp7+0x88>
    }
    sta_reg = SDMMCx->STA;
 8018536:	687b      	ldr	r3, [r7, #4]
 8018538:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 801853a:	60bb      	str	r3, [r7, #8]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 801853c:	68bb      	ldr	r3, [r7, #8]
 801853e:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 8018542:	2b00      	cmp	r3, #0
 8018544:	d0ef      	beq.n	8018526 <SDMMC_GetCmdResp7+0x1e>
           ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 8018546:	68bb      	ldr	r3, [r7, #8]
 8018548:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 801854c:	2b00      	cmp	r3, #0
 801854e:	d1ea      	bne.n	8018526 <SDMMC_GetCmdResp7+0x1e>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8018550:	687b      	ldr	r3, [r7, #4]
 8018552:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8018554:	f003 0304 	and.w	r3, r3, #4
 8018558:	2b00      	cmp	r3, #0
 801855a:	d004      	beq.n	8018566 <SDMMC_GetCmdResp7+0x5e>
  {
    /* Card is not SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 801855c:	687b      	ldr	r3, [r7, #4]
 801855e:	2204      	movs	r2, #4
 8018560:	639a      	str	r2, [r3, #56]	@ 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8018562:	2304      	movs	r3, #4
 8018564:	e014      	b.n	8018590 <SDMMC_GetCmdResp7+0x88>
  }

  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 8018566:	687b      	ldr	r3, [r7, #4]
 8018568:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 801856a:	f003 0301 	and.w	r3, r3, #1
 801856e:	2b00      	cmp	r3, #0
 8018570:	d004      	beq.n	801857c <SDMMC_GetCmdResp7+0x74>
  {
    /* Card is not SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8018572:	687b      	ldr	r3, [r7, #4]
 8018574:	2201      	movs	r2, #1
 8018576:	639a      	str	r2, [r3, #56]	@ 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 8018578:	2301      	movs	r3, #1
 801857a:	e009      	b.n	8018590 <SDMMC_GetCmdResp7+0x88>
  else
  {
    /* Nothing to do */
  }

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDREND))
 801857c:	687b      	ldr	r3, [r7, #4]
 801857e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8018580:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8018584:	2b00      	cmp	r3, #0
 8018586:	d002      	beq.n	801858e <SDMMC_GetCmdResp7+0x86>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CMDREND);
 8018588:	687b      	ldr	r3, [r7, #4]
 801858a:	2240      	movs	r2, #64	@ 0x40
 801858c:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  return SDMMC_ERROR_NONE;
 801858e:	2300      	movs	r3, #0

}
 8018590:	4618      	mov	r0, r3
 8018592:	3714      	adds	r7, #20
 8018594:	46bd      	mov	sp, r7
 8018596:	f85d 7b04 	ldr.w	r7, [sp], #4
 801859a:	4770      	bx	lr
 801859c:	24000000 	.word	0x24000000
 80185a0:	10624dd3 	.word	0x10624dd3

080185a4 <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDMMC_TypeDef *SDMMCx)
{
 80185a4:	b480      	push	{r7}
 80185a6:	b085      	sub	sp, #20
 80185a8:	af00      	add	r7, sp, #0
 80185aa:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 80185ac:	4b11      	ldr	r3, [pc, #68]	@ (80185f4 <SDMMC_GetCmdError+0x50>)
 80185ae:	681b      	ldr	r3, [r3, #0]
 80185b0:	4a11      	ldr	r2, [pc, #68]	@ (80185f8 <SDMMC_GetCmdError+0x54>)
 80185b2:	fba2 2303 	umull	r2, r3, r2, r3
 80185b6:	0a5b      	lsrs	r3, r3, #9
 80185b8:	f241 3288 	movw	r2, #5000	@ 0x1388
 80185bc:	fb02 f303 	mul.w	r3, r2, r3
 80185c0:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 80185c2:	68fb      	ldr	r3, [r7, #12]
 80185c4:	1e5a      	subs	r2, r3, #1
 80185c6:	60fa      	str	r2, [r7, #12]
 80185c8:	2b00      	cmp	r3, #0
 80185ca:	d102      	bne.n	80185d2 <SDMMC_GetCmdError+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 80185cc:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 80185d0:	e009      	b.n	80185e6 <SDMMC_GetCmdError+0x42>
    }

  } while (!__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDSENT));
 80185d2:	687b      	ldr	r3, [r7, #4]
 80185d4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80185d6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80185da:	2b00      	cmp	r3, #0
 80185dc:	d0f1      	beq.n	80185c2 <SDMMC_GetCmdError+0x1e>

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 80185de:	687b      	ldr	r3, [r7, #4]
 80185e0:	4a06      	ldr	r2, [pc, #24]	@ (80185fc <SDMMC_GetCmdError+0x58>)
 80185e2:	639a      	str	r2, [r3, #56]	@ 0x38

  return SDMMC_ERROR_NONE;
 80185e4:	2300      	movs	r3, #0
}
 80185e6:	4618      	mov	r0, r3
 80185e8:	3714      	adds	r7, #20
 80185ea:	46bd      	mov	sp, r7
 80185ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80185f0:	4770      	bx	lr
 80185f2:	bf00      	nop
 80185f4:	24000000 	.word	0x24000000
 80185f8:	10624dd3 	.word	0x10624dd3
 80185fc:	002000c5 	.word	0x002000c5

08018600 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8018600:	b084      	sub	sp, #16
 8018602:	b580      	push	{r7, lr}
 8018604:	b084      	sub	sp, #16
 8018606:	af00      	add	r7, sp, #0
 8018608:	6078      	str	r0, [r7, #4]
 801860a:	f107 001c 	add.w	r0, r7, #28
 801860e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8018612:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8018614:	2b01      	cmp	r3, #1
 8018616:	d120      	bne.n	801865a <USB_CoreInit+0x5a>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8018618:	687b      	ldr	r3, [r7, #4]
 801861a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801861c:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8018620:	687b      	ldr	r3, [r7, #4]
 8018622:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8018624:	687b      	ldr	r3, [r7, #4]
 8018626:	68da      	ldr	r2, [r3, #12]
 8018628:	4b2a      	ldr	r3, [pc, #168]	@ (80186d4 <USB_CoreInit+0xd4>)
 801862a:	4013      	ands	r3, r2
 801862c:	687a      	ldr	r2, [r7, #4]
 801862e:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8018630:	687b      	ldr	r3, [r7, #4]
 8018632:	68db      	ldr	r3, [r3, #12]
 8018634:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8018638:	687b      	ldr	r3, [r7, #4]
 801863a:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 801863c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801863e:	2b01      	cmp	r3, #1
 8018640:	d105      	bne.n	801864e <USB_CoreInit+0x4e>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8018642:	687b      	ldr	r3, [r7, #4]
 8018644:	68db      	ldr	r3, [r3, #12]
 8018646:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 801864a:	687b      	ldr	r3, [r7, #4]
 801864c:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 801864e:	6878      	ldr	r0, [r7, #4]
 8018650:	f000 faac 	bl	8018bac <USB_CoreReset>
 8018654:	4603      	mov	r3, r0
 8018656:	73fb      	strb	r3, [r7, #15]
 8018658:	e01a      	b.n	8018690 <USB_CoreInit+0x90>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 801865a:	687b      	ldr	r3, [r7, #4]
 801865c:	68db      	ldr	r3, [r3, #12]
 801865e:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8018662:	687b      	ldr	r3, [r7, #4]
 8018664:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8018666:	6878      	ldr	r0, [r7, #4]
 8018668:	f000 faa0 	bl	8018bac <USB_CoreReset>
 801866c:	4603      	mov	r3, r0
 801866e:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8018670:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8018672:	2b00      	cmp	r3, #0
 8018674:	d106      	bne.n	8018684 <USB_CoreInit+0x84>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8018676:	687b      	ldr	r3, [r7, #4]
 8018678:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801867a:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 801867e:	687b      	ldr	r3, [r7, #4]
 8018680:	639a      	str	r2, [r3, #56]	@ 0x38
 8018682:	e005      	b.n	8018690 <USB_CoreInit+0x90>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8018684:	687b      	ldr	r3, [r7, #4]
 8018686:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8018688:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 801868c:	687b      	ldr	r3, [r7, #4]
 801868e:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8018690:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8018692:	2b01      	cmp	r3, #1
 8018694:	d116      	bne.n	80186c4 <USB_CoreInit+0xc4>
  {
    /* make sure to reserve 18 fifo Locations for DMA buffers */
    USBx->GDFIFOCFG &= ~(0xFFFFU << 16);
 8018696:	687b      	ldr	r3, [r7, #4]
 8018698:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 801869a:	b29a      	uxth	r2, r3
 801869c:	687b      	ldr	r3, [r7, #4]
 801869e:	65da      	str	r2, [r3, #92]	@ 0x5c
    USBx->GDFIFOCFG |= 0x3EEU << 16;
 80186a0:	687b      	ldr	r3, [r7, #4]
 80186a2:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80186a4:	4b0c      	ldr	r3, [pc, #48]	@ (80186d8 <USB_CoreInit+0xd8>)
 80186a6:	4313      	orrs	r3, r2
 80186a8:	687a      	ldr	r2, [r7, #4]
 80186aa:	65d3      	str	r3, [r2, #92]	@ 0x5c

    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 80186ac:	687b      	ldr	r3, [r7, #4]
 80186ae:	689b      	ldr	r3, [r3, #8]
 80186b0:	f043 0206 	orr.w	r2, r3, #6
 80186b4:	687b      	ldr	r3, [r7, #4]
 80186b6:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 80186b8:	687b      	ldr	r3, [r7, #4]
 80186ba:	689b      	ldr	r3, [r3, #8]
 80186bc:	f043 0220 	orr.w	r2, r3, #32
 80186c0:	687b      	ldr	r3, [r7, #4]
 80186c2:	609a      	str	r2, [r3, #8]
  }

  return ret;
 80186c4:	7bfb      	ldrb	r3, [r7, #15]
}
 80186c6:	4618      	mov	r0, r3
 80186c8:	3710      	adds	r7, #16
 80186ca:	46bd      	mov	sp, r7
 80186cc:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80186d0:	b004      	add	sp, #16
 80186d2:	4770      	bx	lr
 80186d4:	ffbdffbf 	.word	0xffbdffbf
 80186d8:	03ee0000 	.word	0x03ee0000

080186dc <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80186dc:	b480      	push	{r7}
 80186de:	b083      	sub	sp, #12
 80186e0:	af00      	add	r7, sp, #0
 80186e2:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 80186e4:	687b      	ldr	r3, [r7, #4]
 80186e6:	689b      	ldr	r3, [r3, #8]
 80186e8:	f023 0201 	bic.w	r2, r3, #1
 80186ec:	687b      	ldr	r3, [r7, #4]
 80186ee:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80186f0:	2300      	movs	r3, #0
}
 80186f2:	4618      	mov	r0, r3
 80186f4:	370c      	adds	r7, #12
 80186f6:	46bd      	mov	sp, r7
 80186f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80186fc:	4770      	bx	lr

080186fe <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 80186fe:	b580      	push	{r7, lr}
 8018700:	b084      	sub	sp, #16
 8018702:	af00      	add	r7, sp, #0
 8018704:	6078      	str	r0, [r7, #4]
 8018706:	460b      	mov	r3, r1
 8018708:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 801870a:	2300      	movs	r3, #0
 801870c:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 801870e:	687b      	ldr	r3, [r7, #4]
 8018710:	68db      	ldr	r3, [r3, #12]
 8018712:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 8018716:	687b      	ldr	r3, [r7, #4]
 8018718:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 801871a:	78fb      	ldrb	r3, [r7, #3]
 801871c:	2b01      	cmp	r3, #1
 801871e:	d115      	bne.n	801874c <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8018720:	687b      	ldr	r3, [r7, #4]
 8018722:	68db      	ldr	r3, [r3, #12]
 8018724:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 8018728:	687b      	ldr	r3, [r7, #4]
 801872a:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 801872c:	2001      	movs	r0, #1
 801872e:	f7f8 f91f 	bl	8010970 <HAL_Delay>
      ms++;
 8018732:	68fb      	ldr	r3, [r7, #12]
 8018734:	3301      	adds	r3, #1
 8018736:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8018738:	6878      	ldr	r0, [r7, #4]
 801873a:	f000 fa29 	bl	8018b90 <USB_GetMode>
 801873e:	4603      	mov	r3, r0
 8018740:	2b01      	cmp	r3, #1
 8018742:	d01e      	beq.n	8018782 <USB_SetCurrentMode+0x84>
 8018744:	68fb      	ldr	r3, [r7, #12]
 8018746:	2b31      	cmp	r3, #49	@ 0x31
 8018748:	d9f0      	bls.n	801872c <USB_SetCurrentMode+0x2e>
 801874a:	e01a      	b.n	8018782 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 801874c:	78fb      	ldrb	r3, [r7, #3]
 801874e:	2b00      	cmp	r3, #0
 8018750:	d115      	bne.n	801877e <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8018752:	687b      	ldr	r3, [r7, #4]
 8018754:	68db      	ldr	r3, [r3, #12]
 8018756:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 801875a:	687b      	ldr	r3, [r7, #4]
 801875c:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 801875e:	2001      	movs	r0, #1
 8018760:	f7f8 f906 	bl	8010970 <HAL_Delay>
      ms++;
 8018764:	68fb      	ldr	r3, [r7, #12]
 8018766:	3301      	adds	r3, #1
 8018768:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 801876a:	6878      	ldr	r0, [r7, #4]
 801876c:	f000 fa10 	bl	8018b90 <USB_GetMode>
 8018770:	4603      	mov	r3, r0
 8018772:	2b00      	cmp	r3, #0
 8018774:	d005      	beq.n	8018782 <USB_SetCurrentMode+0x84>
 8018776:	68fb      	ldr	r3, [r7, #12]
 8018778:	2b31      	cmp	r3, #49	@ 0x31
 801877a:	d9f0      	bls.n	801875e <USB_SetCurrentMode+0x60>
 801877c:	e001      	b.n	8018782 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 801877e:	2301      	movs	r3, #1
 8018780:	e005      	b.n	801878e <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8018782:	68fb      	ldr	r3, [r7, #12]
 8018784:	2b32      	cmp	r3, #50	@ 0x32
 8018786:	d101      	bne.n	801878c <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8018788:	2301      	movs	r3, #1
 801878a:	e000      	b.n	801878e <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 801878c:	2300      	movs	r3, #0
}
 801878e:	4618      	mov	r0, r3
 8018790:	3710      	adds	r7, #16
 8018792:	46bd      	mov	sp, r7
 8018794:	bd80      	pop	{r7, pc}
	...

08018798 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8018798:	b084      	sub	sp, #16
 801879a:	b580      	push	{r7, lr}
 801879c:	b086      	sub	sp, #24
 801879e:	af00      	add	r7, sp, #0
 80187a0:	6078      	str	r0, [r7, #4]
 80187a2:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 80187a6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 80187aa:	2300      	movs	r3, #0
 80187ac:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80187ae:	687b      	ldr	r3, [r7, #4]
 80187b0:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 80187b2:	2300      	movs	r3, #0
 80187b4:	613b      	str	r3, [r7, #16]
 80187b6:	e009      	b.n	80187cc <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 80187b8:	687a      	ldr	r2, [r7, #4]
 80187ba:	693b      	ldr	r3, [r7, #16]
 80187bc:	3340      	adds	r3, #64	@ 0x40
 80187be:	009b      	lsls	r3, r3, #2
 80187c0:	4413      	add	r3, r2
 80187c2:	2200      	movs	r2, #0
 80187c4:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 80187c6:	693b      	ldr	r3, [r7, #16]
 80187c8:	3301      	adds	r3, #1
 80187ca:	613b      	str	r3, [r7, #16]
 80187cc:	693b      	ldr	r3, [r7, #16]
 80187ce:	2b0e      	cmp	r3, #14
 80187d0:	d9f2      	bls.n	80187b8 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 80187d2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80187d4:	2b00      	cmp	r3, #0
 80187d6:	d11c      	bne.n	8018812 <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80187d8:	68fb      	ldr	r3, [r7, #12]
 80187da:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80187de:	685b      	ldr	r3, [r3, #4]
 80187e0:	68fa      	ldr	r2, [r7, #12]
 80187e2:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80187e6:	f043 0302 	orr.w	r3, r3, #2
 80187ea:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 80187ec:	687b      	ldr	r3, [r7, #4]
 80187ee:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80187f0:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 80187f4:	687b      	ldr	r3, [r7, #4]
 80187f6:	639a      	str	r2, [r3, #56]	@ 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 80187f8:	687b      	ldr	r3, [r7, #4]
 80187fa:	681b      	ldr	r3, [r3, #0]
 80187fc:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8018800:	687b      	ldr	r3, [r7, #4]
 8018802:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8018804:	687b      	ldr	r3, [r7, #4]
 8018806:	681b      	ldr	r3, [r3, #0]
 8018808:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 801880c:	687b      	ldr	r3, [r7, #4]
 801880e:	601a      	str	r2, [r3, #0]
 8018810:	e005      	b.n	801881e <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 8018812:	687b      	ldr	r3, [r7, #4]
 8018814:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8018816:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 801881a:	687b      	ldr	r3, [r7, #4]
 801881c:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 801881e:	68fb      	ldr	r3, [r7, #12]
 8018820:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8018824:	461a      	mov	r2, r3
 8018826:	2300      	movs	r3, #0
 8018828:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 801882a:	68fb      	ldr	r3, [r7, #12]
 801882c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8018830:	4619      	mov	r1, r3
 8018832:	68fb      	ldr	r3, [r7, #12]
 8018834:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8018838:	461a      	mov	r2, r3
 801883a:	680b      	ldr	r3, [r1, #0]
 801883c:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 801883e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8018840:	2b01      	cmp	r3, #1
 8018842:	d10c      	bne.n	801885e <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8018844:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8018846:	2b00      	cmp	r3, #0
 8018848:	d104      	bne.n	8018854 <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 801884a:	2100      	movs	r1, #0
 801884c:	6878      	ldr	r0, [r7, #4]
 801884e:	f000 f965 	bl	8018b1c <USB_SetDevSpeed>
 8018852:	e008      	b.n	8018866 <USB_DevInit+0xce>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8018854:	2101      	movs	r1, #1
 8018856:	6878      	ldr	r0, [r7, #4]
 8018858:	f000 f960 	bl	8018b1c <USB_SetDevSpeed>
 801885c:	e003      	b.n	8018866 <USB_DevInit+0xce>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 801885e:	2103      	movs	r1, #3
 8018860:	6878      	ldr	r0, [r7, #4]
 8018862:	f000 f95b 	bl	8018b1c <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8018866:	2110      	movs	r1, #16
 8018868:	6878      	ldr	r0, [r7, #4]
 801886a:	f000 f8f3 	bl	8018a54 <USB_FlushTxFifo>
 801886e:	4603      	mov	r3, r0
 8018870:	2b00      	cmp	r3, #0
 8018872:	d001      	beq.n	8018878 <USB_DevInit+0xe0>
  {
    ret = HAL_ERROR;
 8018874:	2301      	movs	r3, #1
 8018876:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8018878:	6878      	ldr	r0, [r7, #4]
 801887a:	f000 f91f 	bl	8018abc <USB_FlushRxFifo>
 801887e:	4603      	mov	r3, r0
 8018880:	2b00      	cmp	r3, #0
 8018882:	d001      	beq.n	8018888 <USB_DevInit+0xf0>
  {
    ret = HAL_ERROR;
 8018884:	2301      	movs	r3, #1
 8018886:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8018888:	68fb      	ldr	r3, [r7, #12]
 801888a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 801888e:	461a      	mov	r2, r3
 8018890:	2300      	movs	r3, #0
 8018892:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8018894:	68fb      	ldr	r3, [r7, #12]
 8018896:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 801889a:	461a      	mov	r2, r3
 801889c:	2300      	movs	r3, #0
 801889e:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 80188a0:	68fb      	ldr	r3, [r7, #12]
 80188a2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80188a6:	461a      	mov	r2, r3
 80188a8:	2300      	movs	r3, #0
 80188aa:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80188ac:	2300      	movs	r3, #0
 80188ae:	613b      	str	r3, [r7, #16]
 80188b0:	e043      	b.n	801893a <USB_DevInit+0x1a2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80188b2:	693b      	ldr	r3, [r7, #16]
 80188b4:	015a      	lsls	r2, r3, #5
 80188b6:	68fb      	ldr	r3, [r7, #12]
 80188b8:	4413      	add	r3, r2
 80188ba:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80188be:	681b      	ldr	r3, [r3, #0]
 80188c0:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80188c4:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80188c8:	d118      	bne.n	80188fc <USB_DevInit+0x164>
    {
      if (i == 0U)
 80188ca:	693b      	ldr	r3, [r7, #16]
 80188cc:	2b00      	cmp	r3, #0
 80188ce:	d10a      	bne.n	80188e6 <USB_DevInit+0x14e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 80188d0:	693b      	ldr	r3, [r7, #16]
 80188d2:	015a      	lsls	r2, r3, #5
 80188d4:	68fb      	ldr	r3, [r7, #12]
 80188d6:	4413      	add	r3, r2
 80188d8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80188dc:	461a      	mov	r2, r3
 80188de:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 80188e2:	6013      	str	r3, [r2, #0]
 80188e4:	e013      	b.n	801890e <USB_DevInit+0x176>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 80188e6:	693b      	ldr	r3, [r7, #16]
 80188e8:	015a      	lsls	r2, r3, #5
 80188ea:	68fb      	ldr	r3, [r7, #12]
 80188ec:	4413      	add	r3, r2
 80188ee:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80188f2:	461a      	mov	r2, r3
 80188f4:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 80188f8:	6013      	str	r3, [r2, #0]
 80188fa:	e008      	b.n	801890e <USB_DevInit+0x176>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 80188fc:	693b      	ldr	r3, [r7, #16]
 80188fe:	015a      	lsls	r2, r3, #5
 8018900:	68fb      	ldr	r3, [r7, #12]
 8018902:	4413      	add	r3, r2
 8018904:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8018908:	461a      	mov	r2, r3
 801890a:	2300      	movs	r3, #0
 801890c:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 801890e:	693b      	ldr	r3, [r7, #16]
 8018910:	015a      	lsls	r2, r3, #5
 8018912:	68fb      	ldr	r3, [r7, #12]
 8018914:	4413      	add	r3, r2
 8018916:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 801891a:	461a      	mov	r2, r3
 801891c:	2300      	movs	r3, #0
 801891e:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8018920:	693b      	ldr	r3, [r7, #16]
 8018922:	015a      	lsls	r2, r3, #5
 8018924:	68fb      	ldr	r3, [r7, #12]
 8018926:	4413      	add	r3, r2
 8018928:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 801892c:	461a      	mov	r2, r3
 801892e:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8018932:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8018934:	693b      	ldr	r3, [r7, #16]
 8018936:	3301      	adds	r3, #1
 8018938:	613b      	str	r3, [r7, #16]
 801893a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801893c:	693a      	ldr	r2, [r7, #16]
 801893e:	429a      	cmp	r2, r3
 8018940:	d3b7      	bcc.n	80188b2 <USB_DevInit+0x11a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8018942:	2300      	movs	r3, #0
 8018944:	613b      	str	r3, [r7, #16]
 8018946:	e043      	b.n	80189d0 <USB_DevInit+0x238>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8018948:	693b      	ldr	r3, [r7, #16]
 801894a:	015a      	lsls	r2, r3, #5
 801894c:	68fb      	ldr	r3, [r7, #12]
 801894e:	4413      	add	r3, r2
 8018950:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8018954:	681b      	ldr	r3, [r3, #0]
 8018956:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 801895a:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 801895e:	d118      	bne.n	8018992 <USB_DevInit+0x1fa>
    {
      if (i == 0U)
 8018960:	693b      	ldr	r3, [r7, #16]
 8018962:	2b00      	cmp	r3, #0
 8018964:	d10a      	bne.n	801897c <USB_DevInit+0x1e4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8018966:	693b      	ldr	r3, [r7, #16]
 8018968:	015a      	lsls	r2, r3, #5
 801896a:	68fb      	ldr	r3, [r7, #12]
 801896c:	4413      	add	r3, r2
 801896e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8018972:	461a      	mov	r2, r3
 8018974:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8018978:	6013      	str	r3, [r2, #0]
 801897a:	e013      	b.n	80189a4 <USB_DevInit+0x20c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 801897c:	693b      	ldr	r3, [r7, #16]
 801897e:	015a      	lsls	r2, r3, #5
 8018980:	68fb      	ldr	r3, [r7, #12]
 8018982:	4413      	add	r3, r2
 8018984:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8018988:	461a      	mov	r2, r3
 801898a:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 801898e:	6013      	str	r3, [r2, #0]
 8018990:	e008      	b.n	80189a4 <USB_DevInit+0x20c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8018992:	693b      	ldr	r3, [r7, #16]
 8018994:	015a      	lsls	r2, r3, #5
 8018996:	68fb      	ldr	r3, [r7, #12]
 8018998:	4413      	add	r3, r2
 801899a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 801899e:	461a      	mov	r2, r3
 80189a0:	2300      	movs	r3, #0
 80189a2:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 80189a4:	693b      	ldr	r3, [r7, #16]
 80189a6:	015a      	lsls	r2, r3, #5
 80189a8:	68fb      	ldr	r3, [r7, #12]
 80189aa:	4413      	add	r3, r2
 80189ac:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80189b0:	461a      	mov	r2, r3
 80189b2:	2300      	movs	r3, #0
 80189b4:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 80189b6:	693b      	ldr	r3, [r7, #16]
 80189b8:	015a      	lsls	r2, r3, #5
 80189ba:	68fb      	ldr	r3, [r7, #12]
 80189bc:	4413      	add	r3, r2
 80189be:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80189c2:	461a      	mov	r2, r3
 80189c4:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 80189c8:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80189ca:	693b      	ldr	r3, [r7, #16]
 80189cc:	3301      	adds	r3, #1
 80189ce:	613b      	str	r3, [r7, #16]
 80189d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80189d2:	693a      	ldr	r2, [r7, #16]
 80189d4:	429a      	cmp	r2, r3
 80189d6:	d3b7      	bcc.n	8018948 <USB_DevInit+0x1b0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 80189d8:	68fb      	ldr	r3, [r7, #12]
 80189da:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80189de:	691b      	ldr	r3, [r3, #16]
 80189e0:	68fa      	ldr	r2, [r7, #12]
 80189e2:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80189e6:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80189ea:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 80189ec:	687b      	ldr	r3, [r7, #4]
 80189ee:	2200      	movs	r2, #0
 80189f0:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 80189f2:	687b      	ldr	r3, [r7, #4]
 80189f4:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 80189f8:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 80189fa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80189fc:	2b00      	cmp	r3, #0
 80189fe:	d105      	bne.n	8018a0c <USB_DevInit+0x274>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8018a00:	687b      	ldr	r3, [r7, #4]
 8018a02:	699b      	ldr	r3, [r3, #24]
 8018a04:	f043 0210 	orr.w	r2, r3, #16
 8018a08:	687b      	ldr	r3, [r7, #4]
 8018a0a:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8018a0c:	687b      	ldr	r3, [r7, #4]
 8018a0e:	699a      	ldr	r2, [r3, #24]
 8018a10:	4b0e      	ldr	r3, [pc, #56]	@ (8018a4c <USB_DevInit+0x2b4>)
 8018a12:	4313      	orrs	r3, r2
 8018a14:	687a      	ldr	r2, [r7, #4]
 8018a16:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8018a18:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8018a1a:	2b00      	cmp	r3, #0
 8018a1c:	d005      	beq.n	8018a2a <USB_DevInit+0x292>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8018a1e:	687b      	ldr	r3, [r7, #4]
 8018a20:	699b      	ldr	r3, [r3, #24]
 8018a22:	f043 0208 	orr.w	r2, r3, #8
 8018a26:	687b      	ldr	r3, [r7, #4]
 8018a28:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8018a2a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8018a2c:	2b01      	cmp	r3, #1
 8018a2e:	d105      	bne.n	8018a3c <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8018a30:	687b      	ldr	r3, [r7, #4]
 8018a32:	699a      	ldr	r2, [r3, #24]
 8018a34:	4b06      	ldr	r3, [pc, #24]	@ (8018a50 <USB_DevInit+0x2b8>)
 8018a36:	4313      	orrs	r3, r2
 8018a38:	687a      	ldr	r2, [r7, #4]
 8018a3a:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8018a3c:	7dfb      	ldrb	r3, [r7, #23]
}
 8018a3e:	4618      	mov	r0, r3
 8018a40:	3718      	adds	r7, #24
 8018a42:	46bd      	mov	sp, r7
 8018a44:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8018a48:	b004      	add	sp, #16
 8018a4a:	4770      	bx	lr
 8018a4c:	803c3800 	.word	0x803c3800
 8018a50:	40000004 	.word	0x40000004

08018a54 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8018a54:	b480      	push	{r7}
 8018a56:	b085      	sub	sp, #20
 8018a58:	af00      	add	r7, sp, #0
 8018a5a:	6078      	str	r0, [r7, #4]
 8018a5c:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8018a5e:	2300      	movs	r3, #0
 8018a60:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8018a62:	68fb      	ldr	r3, [r7, #12]
 8018a64:	3301      	adds	r3, #1
 8018a66:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8018a68:	68fb      	ldr	r3, [r7, #12]
 8018a6a:	4a13      	ldr	r2, [pc, #76]	@ (8018ab8 <USB_FlushTxFifo+0x64>)
 8018a6c:	4293      	cmp	r3, r2
 8018a6e:	d901      	bls.n	8018a74 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8018a70:	2303      	movs	r3, #3
 8018a72:	e01b      	b.n	8018aac <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8018a74:	687b      	ldr	r3, [r7, #4]
 8018a76:	691b      	ldr	r3, [r3, #16]
 8018a78:	2b00      	cmp	r3, #0
 8018a7a:	daf2      	bge.n	8018a62 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8018a7c:	2300      	movs	r3, #0
 8018a7e:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8018a80:	683b      	ldr	r3, [r7, #0]
 8018a82:	019b      	lsls	r3, r3, #6
 8018a84:	f043 0220 	orr.w	r2, r3, #32
 8018a88:	687b      	ldr	r3, [r7, #4]
 8018a8a:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8018a8c:	68fb      	ldr	r3, [r7, #12]
 8018a8e:	3301      	adds	r3, #1
 8018a90:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8018a92:	68fb      	ldr	r3, [r7, #12]
 8018a94:	4a08      	ldr	r2, [pc, #32]	@ (8018ab8 <USB_FlushTxFifo+0x64>)
 8018a96:	4293      	cmp	r3, r2
 8018a98:	d901      	bls.n	8018a9e <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8018a9a:	2303      	movs	r3, #3
 8018a9c:	e006      	b.n	8018aac <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8018a9e:	687b      	ldr	r3, [r7, #4]
 8018aa0:	691b      	ldr	r3, [r3, #16]
 8018aa2:	f003 0320 	and.w	r3, r3, #32
 8018aa6:	2b20      	cmp	r3, #32
 8018aa8:	d0f0      	beq.n	8018a8c <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8018aaa:	2300      	movs	r3, #0
}
 8018aac:	4618      	mov	r0, r3
 8018aae:	3714      	adds	r7, #20
 8018ab0:	46bd      	mov	sp, r7
 8018ab2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018ab6:	4770      	bx	lr
 8018ab8:	00030d40 	.word	0x00030d40

08018abc <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8018abc:	b480      	push	{r7}
 8018abe:	b085      	sub	sp, #20
 8018ac0:	af00      	add	r7, sp, #0
 8018ac2:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8018ac4:	2300      	movs	r3, #0
 8018ac6:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8018ac8:	68fb      	ldr	r3, [r7, #12]
 8018aca:	3301      	adds	r3, #1
 8018acc:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8018ace:	68fb      	ldr	r3, [r7, #12]
 8018ad0:	4a11      	ldr	r2, [pc, #68]	@ (8018b18 <USB_FlushRxFifo+0x5c>)
 8018ad2:	4293      	cmp	r3, r2
 8018ad4:	d901      	bls.n	8018ada <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8018ad6:	2303      	movs	r3, #3
 8018ad8:	e018      	b.n	8018b0c <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8018ada:	687b      	ldr	r3, [r7, #4]
 8018adc:	691b      	ldr	r3, [r3, #16]
 8018ade:	2b00      	cmp	r3, #0
 8018ae0:	daf2      	bge.n	8018ac8 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8018ae2:	2300      	movs	r3, #0
 8018ae4:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8018ae6:	687b      	ldr	r3, [r7, #4]
 8018ae8:	2210      	movs	r2, #16
 8018aea:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8018aec:	68fb      	ldr	r3, [r7, #12]
 8018aee:	3301      	adds	r3, #1
 8018af0:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8018af2:	68fb      	ldr	r3, [r7, #12]
 8018af4:	4a08      	ldr	r2, [pc, #32]	@ (8018b18 <USB_FlushRxFifo+0x5c>)
 8018af6:	4293      	cmp	r3, r2
 8018af8:	d901      	bls.n	8018afe <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8018afa:	2303      	movs	r3, #3
 8018afc:	e006      	b.n	8018b0c <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8018afe:	687b      	ldr	r3, [r7, #4]
 8018b00:	691b      	ldr	r3, [r3, #16]
 8018b02:	f003 0310 	and.w	r3, r3, #16
 8018b06:	2b10      	cmp	r3, #16
 8018b08:	d0f0      	beq.n	8018aec <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8018b0a:	2300      	movs	r3, #0
}
 8018b0c:	4618      	mov	r0, r3
 8018b0e:	3714      	adds	r7, #20
 8018b10:	46bd      	mov	sp, r7
 8018b12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018b16:	4770      	bx	lr
 8018b18:	00030d40 	.word	0x00030d40

08018b1c <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8018b1c:	b480      	push	{r7}
 8018b1e:	b085      	sub	sp, #20
 8018b20:	af00      	add	r7, sp, #0
 8018b22:	6078      	str	r0, [r7, #4]
 8018b24:	460b      	mov	r3, r1
 8018b26:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8018b28:	687b      	ldr	r3, [r7, #4]
 8018b2a:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8018b2c:	68fb      	ldr	r3, [r7, #12]
 8018b2e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8018b32:	681a      	ldr	r2, [r3, #0]
 8018b34:	78fb      	ldrb	r3, [r7, #3]
 8018b36:	68f9      	ldr	r1, [r7, #12]
 8018b38:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8018b3c:	4313      	orrs	r3, r2
 8018b3e:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8018b40:	2300      	movs	r3, #0
}
 8018b42:	4618      	mov	r0, r3
 8018b44:	3714      	adds	r7, #20
 8018b46:	46bd      	mov	sp, r7
 8018b48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018b4c:	4770      	bx	lr

08018b4e <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8018b4e:	b480      	push	{r7}
 8018b50:	b085      	sub	sp, #20
 8018b52:	af00      	add	r7, sp, #0
 8018b54:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8018b56:	687b      	ldr	r3, [r7, #4]
 8018b58:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8018b5a:	68fb      	ldr	r3, [r7, #12]
 8018b5c:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8018b60:	681b      	ldr	r3, [r3, #0]
 8018b62:	68fa      	ldr	r2, [r7, #12]
 8018b64:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 8018b68:	f023 0303 	bic.w	r3, r3, #3
 8018b6c:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8018b6e:	68fb      	ldr	r3, [r7, #12]
 8018b70:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8018b74:	685b      	ldr	r3, [r3, #4]
 8018b76:	68fa      	ldr	r2, [r7, #12]
 8018b78:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8018b7c:	f043 0302 	orr.w	r3, r3, #2
 8018b80:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8018b82:	2300      	movs	r3, #0
}
 8018b84:	4618      	mov	r0, r3
 8018b86:	3714      	adds	r7, #20
 8018b88:	46bd      	mov	sp, r7
 8018b8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018b8e:	4770      	bx	lr

08018b90 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8018b90:	b480      	push	{r7}
 8018b92:	b083      	sub	sp, #12
 8018b94:	af00      	add	r7, sp, #0
 8018b96:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8018b98:	687b      	ldr	r3, [r7, #4]
 8018b9a:	695b      	ldr	r3, [r3, #20]
 8018b9c:	f003 0301 	and.w	r3, r3, #1
}
 8018ba0:	4618      	mov	r0, r3
 8018ba2:	370c      	adds	r7, #12
 8018ba4:	46bd      	mov	sp, r7
 8018ba6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018baa:	4770      	bx	lr

08018bac <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8018bac:	b480      	push	{r7}
 8018bae:	b085      	sub	sp, #20
 8018bb0:	af00      	add	r7, sp, #0
 8018bb2:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8018bb4:	2300      	movs	r3, #0
 8018bb6:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8018bb8:	68fb      	ldr	r3, [r7, #12]
 8018bba:	3301      	adds	r3, #1
 8018bbc:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8018bbe:	68fb      	ldr	r3, [r7, #12]
 8018bc0:	4a13      	ldr	r2, [pc, #76]	@ (8018c10 <USB_CoreReset+0x64>)
 8018bc2:	4293      	cmp	r3, r2
 8018bc4:	d901      	bls.n	8018bca <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8018bc6:	2303      	movs	r3, #3
 8018bc8:	e01b      	b.n	8018c02 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8018bca:	687b      	ldr	r3, [r7, #4]
 8018bcc:	691b      	ldr	r3, [r3, #16]
 8018bce:	2b00      	cmp	r3, #0
 8018bd0:	daf2      	bge.n	8018bb8 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8018bd2:	2300      	movs	r3, #0
 8018bd4:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8018bd6:	687b      	ldr	r3, [r7, #4]
 8018bd8:	691b      	ldr	r3, [r3, #16]
 8018bda:	f043 0201 	orr.w	r2, r3, #1
 8018bde:	687b      	ldr	r3, [r7, #4]
 8018be0:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8018be2:	68fb      	ldr	r3, [r7, #12]
 8018be4:	3301      	adds	r3, #1
 8018be6:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8018be8:	68fb      	ldr	r3, [r7, #12]
 8018bea:	4a09      	ldr	r2, [pc, #36]	@ (8018c10 <USB_CoreReset+0x64>)
 8018bec:	4293      	cmp	r3, r2
 8018bee:	d901      	bls.n	8018bf4 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8018bf0:	2303      	movs	r3, #3
 8018bf2:	e006      	b.n	8018c02 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8018bf4:	687b      	ldr	r3, [r7, #4]
 8018bf6:	691b      	ldr	r3, [r3, #16]
 8018bf8:	f003 0301 	and.w	r3, r3, #1
 8018bfc:	2b01      	cmp	r3, #1
 8018bfe:	d0f0      	beq.n	8018be2 <USB_CoreReset+0x36>

  return HAL_OK;
 8018c00:	2300      	movs	r3, #0
}
 8018c02:	4618      	mov	r0, r3
 8018c04:	3714      	adds	r7, #20
 8018c06:	46bd      	mov	sp, r7
 8018c08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018c0c:	4770      	bx	lr
 8018c0e:	bf00      	nop
 8018c10:	00030d40 	.word	0x00030d40

08018c14 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 8018c14:	b580      	push	{r7, lr}
 8018c16:	af00      	add	r7, sp, #0
  /*## FatFS: Link the SD driver ###########################*/
  retSD = FATFS_LinkDriver(&SD_Driver, SDPath);
 8018c18:	4904      	ldr	r1, [pc, #16]	@ (8018c2c <MX_FATFS_Init+0x18>)
 8018c1a:	4805      	ldr	r0, [pc, #20]	@ (8018c30 <MX_FATFS_Init+0x1c>)
 8018c1c:	f000 fa8e 	bl	801913c <FATFS_LinkDriver>
 8018c20:	4603      	mov	r3, r0
 8018c22:	461a      	mov	r2, r3
 8018c24:	4b03      	ldr	r3, [pc, #12]	@ (8018c34 <MX_FATFS_Init+0x20>)
 8018c26:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 8018c28:	bf00      	nop
 8018c2a:	bd80      	pop	{r7, pc}
 8018c2c:	24001fc0 	.word	0x24001fc0
 8018c30:	0801c1a0 	.word	0x0801c1a0
 8018c34:	24001fbc 	.word	0x24001fbc

08018c38 <BSP_SD_Init>:
/**
  * @brief  Initializes the SD card device.
  * @retval SD status
  */
__weak uint8_t BSP_SD_Init(void)
{
 8018c38:	b580      	push	{r7, lr}
 8018c3a:	b082      	sub	sp, #8
 8018c3c:	af00      	add	r7, sp, #0
  uint8_t sd_state = MSD_OK;
 8018c3e:	2300      	movs	r3, #0
 8018c40:	71fb      	strb	r3, [r7, #7]
  /* Check if the SD card is plugged in the slot */
  if (BSP_SD_IsDetected() != SD_PRESENT)
 8018c42:	f000 f885 	bl	8018d50 <BSP_SD_IsDetected>
 8018c46:	4603      	mov	r3, r0
 8018c48:	2b01      	cmp	r3, #1
 8018c4a:	d001      	beq.n	8018c50 <BSP_SD_Init+0x18>
  {
    return MSD_ERROR_SD_NOT_PRESENT;
 8018c4c:	2302      	movs	r3, #2
 8018c4e:	e012      	b.n	8018c76 <BSP_SD_Init+0x3e>
  }
  /* HAL SD initialization */
  sd_state = HAL_SD_Init(&hsd1);
 8018c50:	480b      	ldr	r0, [pc, #44]	@ (8018c80 <BSP_SD_Init+0x48>)
 8018c52:	f7fc f9d1 	bl	8014ff8 <HAL_SD_Init>
 8018c56:	4603      	mov	r3, r0
 8018c58:	71fb      	strb	r3, [r7, #7]
  /* Configure SD Bus width (4 bits mode selected) */
  if (sd_state == MSD_OK)
 8018c5a:	79fb      	ldrb	r3, [r7, #7]
 8018c5c:	2b00      	cmp	r3, #0
 8018c5e:	d109      	bne.n	8018c74 <BSP_SD_Init+0x3c>
  {
    /* Enable wide operation */
    if (HAL_SD_ConfigWideBusOperation(&hsd1, SDMMC_BUS_WIDE_4B) != HAL_OK)
 8018c60:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8018c64:	4806      	ldr	r0, [pc, #24]	@ (8018c80 <BSP_SD_Init+0x48>)
 8018c66:	f7fd f887 	bl	8015d78 <HAL_SD_ConfigWideBusOperation>
 8018c6a:	4603      	mov	r3, r0
 8018c6c:	2b00      	cmp	r3, #0
 8018c6e:	d001      	beq.n	8018c74 <BSP_SD_Init+0x3c>
    {
      sd_state = MSD_ERROR;
 8018c70:	2301      	movs	r3, #1
 8018c72:	71fb      	strb	r3, [r7, #7]
    }
  }

  return sd_state;
 8018c74:	79fb      	ldrb	r3, [r7, #7]
}
 8018c76:	4618      	mov	r0, r3
 8018c78:	3708      	adds	r7, #8
 8018c7a:	46bd      	mov	sp, r7
 8018c7c:	bd80      	pop	{r7, pc}
 8018c7e:	bf00      	nop
 8018c80:	240000e4 	.word	0x240000e4

08018c84 <BSP_SD_ReadBlocks_DMA>:
  * @param  ReadAddr: Address from where data is to be read
  * @param  NumOfBlocks: Number of SD blocks to read
  * @retval SD status
  */
__weak uint8_t BSP_SD_ReadBlocks_DMA(uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks)
{
 8018c84:	b580      	push	{r7, lr}
 8018c86:	b086      	sub	sp, #24
 8018c88:	af00      	add	r7, sp, #0
 8018c8a:	60f8      	str	r0, [r7, #12]
 8018c8c:	60b9      	str	r1, [r7, #8]
 8018c8e:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 8018c90:	2300      	movs	r3, #0
 8018c92:	75fb      	strb	r3, [r7, #23]

  /* Read block(s) in DMA transfer mode */
  if (HAL_SD_ReadBlocks_DMA(&hsd1, (uint8_t *)pData, ReadAddr, NumOfBlocks) != HAL_OK)
 8018c94:	687b      	ldr	r3, [r7, #4]
 8018c96:	68ba      	ldr	r2, [r7, #8]
 8018c98:	68f9      	ldr	r1, [r7, #12]
 8018c9a:	4806      	ldr	r0, [pc, #24]	@ (8018cb4 <BSP_SD_ReadBlocks_DMA+0x30>)
 8018c9c:	f7fc facc 	bl	8015238 <HAL_SD_ReadBlocks_DMA>
 8018ca0:	4603      	mov	r3, r0
 8018ca2:	2b00      	cmp	r3, #0
 8018ca4:	d001      	beq.n	8018caa <BSP_SD_ReadBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 8018ca6:	2301      	movs	r3, #1
 8018ca8:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 8018caa:	7dfb      	ldrb	r3, [r7, #23]
}
 8018cac:	4618      	mov	r0, r3
 8018cae:	3718      	adds	r7, #24
 8018cb0:	46bd      	mov	sp, r7
 8018cb2:	bd80      	pop	{r7, pc}
 8018cb4:	240000e4 	.word	0x240000e4

08018cb8 <BSP_SD_WriteBlocks_DMA>:
  * @param  WriteAddr: Address from where data is to be written
  * @param  NumOfBlocks: Number of SD blocks to write
  * @retval SD status
  */
__weak uint8_t BSP_SD_WriteBlocks_DMA(uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks)
{
 8018cb8:	b580      	push	{r7, lr}
 8018cba:	b086      	sub	sp, #24
 8018cbc:	af00      	add	r7, sp, #0
 8018cbe:	60f8      	str	r0, [r7, #12]
 8018cc0:	60b9      	str	r1, [r7, #8]
 8018cc2:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 8018cc4:	2300      	movs	r3, #0
 8018cc6:	75fb      	strb	r3, [r7, #23]

  /* Write block(s) in DMA transfer mode */
  if (HAL_SD_WriteBlocks_DMA(&hsd1, (uint8_t *)pData, WriteAddr, NumOfBlocks) != HAL_OK)
 8018cc8:	687b      	ldr	r3, [r7, #4]
 8018cca:	68ba      	ldr	r2, [r7, #8]
 8018ccc:	68f9      	ldr	r1, [r7, #12]
 8018cce:	4806      	ldr	r0, [pc, #24]	@ (8018ce8 <BSP_SD_WriteBlocks_DMA+0x30>)
 8018cd0:	f7fc fb5a 	bl	8015388 <HAL_SD_WriteBlocks_DMA>
 8018cd4:	4603      	mov	r3, r0
 8018cd6:	2b00      	cmp	r3, #0
 8018cd8:	d001      	beq.n	8018cde <BSP_SD_WriteBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 8018cda:	2301      	movs	r3, #1
 8018cdc:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 8018cde:	7dfb      	ldrb	r3, [r7, #23]
}
 8018ce0:	4618      	mov	r0, r3
 8018ce2:	3718      	adds	r7, #24
 8018ce4:	46bd      	mov	sp, r7
 8018ce6:	bd80      	pop	{r7, pc}
 8018ce8:	240000e4 	.word	0x240000e4

08018cec <BSP_SD_GetCardState>:
  *          This value can be one of the following values:
  *            @arg  SD_TRANSFER_OK: No data transfer is acting
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  */
__weak uint8_t BSP_SD_GetCardState(void)
{
 8018cec:	b580      	push	{r7, lr}
 8018cee:	af00      	add	r7, sp, #0
  return ((HAL_SD_GetCardState(&hsd1) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 8018cf0:	4805      	ldr	r0, [pc, #20]	@ (8018d08 <BSP_SD_GetCardState+0x1c>)
 8018cf2:	f7fd f953 	bl	8015f9c <HAL_SD_GetCardState>
 8018cf6:	4603      	mov	r3, r0
 8018cf8:	2b04      	cmp	r3, #4
 8018cfa:	bf14      	ite	ne
 8018cfc:	2301      	movne	r3, #1
 8018cfe:	2300      	moveq	r3, #0
 8018d00:	b2db      	uxtb	r3, r3
}
 8018d02:	4618      	mov	r0, r3
 8018d04:	bd80      	pop	{r7, pc}
 8018d06:	bf00      	nop
 8018d08:	240000e4 	.word	0x240000e4

08018d0c <BSP_SD_GetCardInfo>:
  * @brief  Get SD information about specific SD card.
  * @param  CardInfo: Pointer to HAL_SD_CardInfoTypedef structure
  * @retval None
  */
__weak void BSP_SD_GetCardInfo(HAL_SD_CardInfoTypeDef *CardInfo)
{
 8018d0c:	b580      	push	{r7, lr}
 8018d0e:	b082      	sub	sp, #8
 8018d10:	af00      	add	r7, sp, #0
 8018d12:	6078      	str	r0, [r7, #4]
  /* Get SD card Information */
  HAL_SD_GetCardInfo(&hsd1, CardInfo);
 8018d14:	6879      	ldr	r1, [r7, #4]
 8018d16:	4803      	ldr	r0, [pc, #12]	@ (8018d24 <BSP_SD_GetCardInfo+0x18>)
 8018d18:	f7fd f802 	bl	8015d20 <HAL_SD_GetCardInfo>
}
 8018d1c:	bf00      	nop
 8018d1e:	3708      	adds	r7, #8
 8018d20:	46bd      	mov	sp, r7
 8018d22:	bd80      	pop	{r7, pc}
 8018d24:	240000e4 	.word	0x240000e4

08018d28 <HAL_SD_TxCpltCallback>:
  * @brief Tx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_TxCpltCallback(SD_HandleTypeDef *hsd)
{
 8018d28:	b580      	push	{r7, lr}
 8018d2a:	b082      	sub	sp, #8
 8018d2c:	af00      	add	r7, sp, #0
 8018d2e:	6078      	str	r0, [r7, #4]
  BSP_SD_WriteCpltCallback();
 8018d30:	f000 f9a0 	bl	8019074 <BSP_SD_WriteCpltCallback>
}
 8018d34:	bf00      	nop
 8018d36:	3708      	adds	r7, #8
 8018d38:	46bd      	mov	sp, r7
 8018d3a:	bd80      	pop	{r7, pc}

08018d3c <HAL_SD_RxCpltCallback>:
  * @brief Rx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_RxCpltCallback(SD_HandleTypeDef *hsd)
{
 8018d3c:	b580      	push	{r7, lr}
 8018d3e:	b082      	sub	sp, #8
 8018d40:	af00      	add	r7, sp, #0
 8018d42:	6078      	str	r0, [r7, #4]
  BSP_SD_ReadCpltCallback();
 8018d44:	f000 f9a2 	bl	801908c <BSP_SD_ReadCpltCallback>
}
 8018d48:	bf00      	nop
 8018d4a:	3708      	adds	r7, #8
 8018d4c:	46bd      	mov	sp, r7
 8018d4e:	bd80      	pop	{r7, pc}

08018d50 <BSP_SD_IsDetected>:
 * @brief  Detects if SD card is correctly plugged in the memory slot or not.
 * @param  None
 * @retval Returns if SD is detected or not
 */
__weak uint8_t BSP_SD_IsDetected(void)
{
 8018d50:	b580      	push	{r7, lr}
 8018d52:	b082      	sub	sp, #8
 8018d54:	af00      	add	r7, sp, #0
  __IO uint8_t status = SD_PRESENT;
 8018d56:	2301      	movs	r3, #1
 8018d58:	71fb      	strb	r3, [r7, #7]

  if (BSP_PlatformIsDetected() == 0x0)
 8018d5a:	f000 f80b 	bl	8018d74 <BSP_PlatformIsDetected>
 8018d5e:	4603      	mov	r3, r0
 8018d60:	2b00      	cmp	r3, #0
 8018d62:	d101      	bne.n	8018d68 <BSP_SD_IsDetected+0x18>
  {
    status = SD_NOT_PRESENT;
 8018d64:	2300      	movs	r3, #0
 8018d66:	71fb      	strb	r3, [r7, #7]
  }

  return status;
 8018d68:	79fb      	ldrb	r3, [r7, #7]
 8018d6a:	b2db      	uxtb	r3, r3
}
 8018d6c:	4618      	mov	r0, r3
 8018d6e:	3708      	adds	r7, #8
 8018d70:	46bd      	mov	sp, r7
 8018d72:	bd80      	pop	{r7, pc}

08018d74 <BSP_PlatformIsDetected>:
  ******************************************************************************
*/
/* USER CODE END Header */
#include "fatfs_platform.h"

uint8_t	BSP_PlatformIsDetected(void) {
 8018d74:	b580      	push	{r7, lr}
 8018d76:	b082      	sub	sp, #8
 8018d78:	af00      	add	r7, sp, #0
    uint8_t status = SD_PRESENT;
 8018d7a:	2301      	movs	r3, #1
 8018d7c:	71fb      	strb	r3, [r7, #7]
    /* Check SD card detect pin */
    if(HAL_GPIO_ReadPin(SD_DETECT_GPIO_PORT, SD_DETECT_PIN) != GPIO_PIN_RESET)
 8018d7e:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8018d82:	4806      	ldr	r0, [pc, #24]	@ (8018d9c <BSP_PlatformIsDetected+0x28>)
 8018d84:	f7f8 f8e4 	bl	8010f50 <HAL_GPIO_ReadPin>
 8018d88:	4603      	mov	r3, r0
 8018d8a:	2b00      	cmp	r3, #0
 8018d8c:	d001      	beq.n	8018d92 <BSP_PlatformIsDetected+0x1e>
    {
        status = SD_NOT_PRESENT;
 8018d8e:	2300      	movs	r3, #0
 8018d90:	71fb      	strb	r3, [r7, #7]
    }
    /* USER CODE BEGIN 1 */
    /* user code can be inserted here */
    /* USER CODE END 1 */
    return status;
 8018d92:	79fb      	ldrb	r3, [r7, #7]
}
 8018d94:	4618      	mov	r0, r3
 8018d96:	3708      	adds	r7, #8
 8018d98:	46bd      	mov	sp, r7
 8018d9a:	bd80      	pop	{r7, pc}
 8018d9c:	58022000 	.word	0x58022000

08018da0 <SD_CheckStatusWithTimeout>:
/* USER CODE END beforeFunctionSection */

/* Private functions ---------------------------------------------------------*/

static int SD_CheckStatusWithTimeout(uint32_t timeout)
{
 8018da0:	b580      	push	{r7, lr}
 8018da2:	b084      	sub	sp, #16
 8018da4:	af00      	add	r7, sp, #0
 8018da6:	6078      	str	r0, [r7, #4]
  uint32_t timer = HAL_GetTick();
 8018da8:	f7f7 fdd6 	bl	8010958 <HAL_GetTick>
 8018dac:	60f8      	str	r0, [r7, #12]
  /* block until SDIO IP is ready again or a timeout occur */
  while(HAL_GetTick() - timer < timeout)
 8018dae:	e006      	b.n	8018dbe <SD_CheckStatusWithTimeout+0x1e>
  {
    if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 8018db0:	f7ff ff9c 	bl	8018cec <BSP_SD_GetCardState>
 8018db4:	4603      	mov	r3, r0
 8018db6:	2b00      	cmp	r3, #0
 8018db8:	d101      	bne.n	8018dbe <SD_CheckStatusWithTimeout+0x1e>
    {
      return 0;
 8018dba:	2300      	movs	r3, #0
 8018dbc:	e009      	b.n	8018dd2 <SD_CheckStatusWithTimeout+0x32>
  while(HAL_GetTick() - timer < timeout)
 8018dbe:	f7f7 fdcb 	bl	8010958 <HAL_GetTick>
 8018dc2:	4602      	mov	r2, r0
 8018dc4:	68fb      	ldr	r3, [r7, #12]
 8018dc6:	1ad3      	subs	r3, r2, r3
 8018dc8:	687a      	ldr	r2, [r7, #4]
 8018dca:	429a      	cmp	r2, r3
 8018dcc:	d8f0      	bhi.n	8018db0 <SD_CheckStatusWithTimeout+0x10>
    }
  }

  return -1;
 8018dce:	f04f 33ff 	mov.w	r3, #4294967295
}
 8018dd2:	4618      	mov	r0, r3
 8018dd4:	3710      	adds	r7, #16
 8018dd6:	46bd      	mov	sp, r7
 8018dd8:	bd80      	pop	{r7, pc}
	...

08018ddc <SD_CheckStatus>:

static DSTATUS SD_CheckStatus(BYTE lun)
{
 8018ddc:	b580      	push	{r7, lr}
 8018dde:	b082      	sub	sp, #8
 8018de0:	af00      	add	r7, sp, #0
 8018de2:	4603      	mov	r3, r0
 8018de4:	71fb      	strb	r3, [r7, #7]
  Stat = STA_NOINIT;
 8018de6:	4b0b      	ldr	r3, [pc, #44]	@ (8018e14 <SD_CheckStatus+0x38>)
 8018de8:	2201      	movs	r2, #1
 8018dea:	701a      	strb	r2, [r3, #0]

  if(BSP_SD_GetCardState() == MSD_OK)
 8018dec:	f7ff ff7e 	bl	8018cec <BSP_SD_GetCardState>
 8018df0:	4603      	mov	r3, r0
 8018df2:	2b00      	cmp	r3, #0
 8018df4:	d107      	bne.n	8018e06 <SD_CheckStatus+0x2a>
  {
    Stat &= ~STA_NOINIT;
 8018df6:	4b07      	ldr	r3, [pc, #28]	@ (8018e14 <SD_CheckStatus+0x38>)
 8018df8:	781b      	ldrb	r3, [r3, #0]
 8018dfa:	b2db      	uxtb	r3, r3
 8018dfc:	f023 0301 	bic.w	r3, r3, #1
 8018e00:	b2da      	uxtb	r2, r3
 8018e02:	4b04      	ldr	r3, [pc, #16]	@ (8018e14 <SD_CheckStatus+0x38>)
 8018e04:	701a      	strb	r2, [r3, #0]
  }

  return Stat;
 8018e06:	4b03      	ldr	r3, [pc, #12]	@ (8018e14 <SD_CheckStatus+0x38>)
 8018e08:	781b      	ldrb	r3, [r3, #0]
 8018e0a:	b2db      	uxtb	r3, r3
}
 8018e0c:	4618      	mov	r0, r3
 8018e0e:	3708      	adds	r7, #8
 8018e10:	46bd      	mov	sp, r7
 8018e12:	bd80      	pop	{r7, pc}
 8018e14:	24000055 	.word	0x24000055

08018e18 <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 8018e18:	b580      	push	{r7, lr}
 8018e1a:	b082      	sub	sp, #8
 8018e1c:	af00      	add	r7, sp, #0
 8018e1e:	4603      	mov	r3, r0
 8018e20:	71fb      	strb	r3, [r7, #7]

#if !defined(DISABLE_SD_INIT)

  if(BSP_SD_Init() == MSD_OK)
 8018e22:	f7ff ff09 	bl	8018c38 <BSP_SD_Init>
 8018e26:	4603      	mov	r3, r0
 8018e28:	2b00      	cmp	r3, #0
 8018e2a:	d107      	bne.n	8018e3c <SD_initialize+0x24>
  {
    Stat = SD_CheckStatus(lun);
 8018e2c:	79fb      	ldrb	r3, [r7, #7]
 8018e2e:	4618      	mov	r0, r3
 8018e30:	f7ff ffd4 	bl	8018ddc <SD_CheckStatus>
 8018e34:	4603      	mov	r3, r0
 8018e36:	461a      	mov	r2, r3
 8018e38:	4b04      	ldr	r3, [pc, #16]	@ (8018e4c <SD_initialize+0x34>)
 8018e3a:	701a      	strb	r2, [r3, #0]

#else
  Stat = SD_CheckStatus(lun);
#endif

  return Stat;
 8018e3c:	4b03      	ldr	r3, [pc, #12]	@ (8018e4c <SD_initialize+0x34>)
 8018e3e:	781b      	ldrb	r3, [r3, #0]
 8018e40:	b2db      	uxtb	r3, r3
}
 8018e42:	4618      	mov	r0, r3
 8018e44:	3708      	adds	r7, #8
 8018e46:	46bd      	mov	sp, r7
 8018e48:	bd80      	pop	{r7, pc}
 8018e4a:	bf00      	nop
 8018e4c:	24000055 	.word	0x24000055

08018e50 <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
 8018e50:	b580      	push	{r7, lr}
 8018e52:	b082      	sub	sp, #8
 8018e54:	af00      	add	r7, sp, #0
 8018e56:	4603      	mov	r3, r0
 8018e58:	71fb      	strb	r3, [r7, #7]
  return SD_CheckStatus(lun);
 8018e5a:	79fb      	ldrb	r3, [r7, #7]
 8018e5c:	4618      	mov	r0, r3
 8018e5e:	f7ff ffbd 	bl	8018ddc <SD_CheckStatus>
 8018e62:	4603      	mov	r3, r0
}
 8018e64:	4618      	mov	r0, r3
 8018e66:	3708      	adds	r7, #8
 8018e68:	46bd      	mov	sp, r7
 8018e6a:	bd80      	pop	{r7, pc}

08018e6c <SD_read>:
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */

DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 8018e6c:	b580      	push	{r7, lr}
 8018e6e:	b086      	sub	sp, #24
 8018e70:	af00      	add	r7, sp, #0
 8018e72:	60b9      	str	r1, [r7, #8]
 8018e74:	607a      	str	r2, [r7, #4]
 8018e76:	603b      	str	r3, [r7, #0]
 8018e78:	4603      	mov	r3, r0
 8018e7a:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 8018e7c:	2301      	movs	r3, #1
 8018e7e:	75fb      	strb	r3, [r7, #23]

  /*
  * ensure the SDCard is ready for a new operation
  */

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 8018e80:	f247 5030 	movw	r0, #30000	@ 0x7530
 8018e84:	f7ff ff8c 	bl	8018da0 <SD_CheckStatusWithTimeout>
 8018e88:	4603      	mov	r3, r0
 8018e8a:	2b00      	cmp	r3, #0
 8018e8c:	da01      	bge.n	8018e92 <SD_read+0x26>
  {
    return res;
 8018e8e:	7dfb      	ldrb	r3, [r7, #23]
 8018e90:	e03b      	b.n	8018f0a <SD_read+0x9e>

#if defined(ENABLE_SCRATCH_BUFFER)
  if (!((uint32_t)buff & 0x3))
  {
#endif
    if(BSP_SD_ReadBlocks_DMA((uint32_t*)buff,
 8018e92:	683a      	ldr	r2, [r7, #0]
 8018e94:	6879      	ldr	r1, [r7, #4]
 8018e96:	68b8      	ldr	r0, [r7, #8]
 8018e98:	f7ff fef4 	bl	8018c84 <BSP_SD_ReadBlocks_DMA>
 8018e9c:	4603      	mov	r3, r0
 8018e9e:	2b00      	cmp	r3, #0
 8018ea0:	d132      	bne.n	8018f08 <SD_read+0x9c>
                             (uint32_t) (sector),
                             count) == MSD_OK)
    {
      ReadStatus = 0;
 8018ea2:	4b1c      	ldr	r3, [pc, #112]	@ (8018f14 <SD_read+0xa8>)
 8018ea4:	2200      	movs	r2, #0
 8018ea6:	601a      	str	r2, [r3, #0]
      /* Wait that the reading process is completed or a timeout occurs */
      timeout = HAL_GetTick();
 8018ea8:	f7f7 fd56 	bl	8010958 <HAL_GetTick>
 8018eac:	6138      	str	r0, [r7, #16]
      while((ReadStatus == 0) && ((HAL_GetTick() - timeout) < SD_TIMEOUT))
 8018eae:	bf00      	nop
 8018eb0:	4b18      	ldr	r3, [pc, #96]	@ (8018f14 <SD_read+0xa8>)
 8018eb2:	681b      	ldr	r3, [r3, #0]
 8018eb4:	2b00      	cmp	r3, #0
 8018eb6:	d108      	bne.n	8018eca <SD_read+0x5e>
 8018eb8:	f7f7 fd4e 	bl	8010958 <HAL_GetTick>
 8018ebc:	4602      	mov	r2, r0
 8018ebe:	693b      	ldr	r3, [r7, #16]
 8018ec0:	1ad3      	subs	r3, r2, r3
 8018ec2:	f247 522f 	movw	r2, #29999	@ 0x752f
 8018ec6:	4293      	cmp	r3, r2
 8018ec8:	d9f2      	bls.n	8018eb0 <SD_read+0x44>
      {
      }
      /* in case of a timeout return error */
      if (ReadStatus == 0)
 8018eca:	4b12      	ldr	r3, [pc, #72]	@ (8018f14 <SD_read+0xa8>)
 8018ecc:	681b      	ldr	r3, [r3, #0]
 8018ece:	2b00      	cmp	r3, #0
 8018ed0:	d102      	bne.n	8018ed8 <SD_read+0x6c>
      {
        res = RES_ERROR;
 8018ed2:	2301      	movs	r3, #1
 8018ed4:	75fb      	strb	r3, [r7, #23]
 8018ed6:	e017      	b.n	8018f08 <SD_read+0x9c>
      }
      else
      {
        ReadStatus = 0;
 8018ed8:	4b0e      	ldr	r3, [pc, #56]	@ (8018f14 <SD_read+0xa8>)
 8018eda:	2200      	movs	r2, #0
 8018edc:	601a      	str	r2, [r3, #0]
        timeout = HAL_GetTick();
 8018ede:	f7f7 fd3b 	bl	8010958 <HAL_GetTick>
 8018ee2:	6138      	str	r0, [r7, #16]

        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 8018ee4:	e007      	b.n	8018ef6 <SD_read+0x8a>
        {
          if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 8018ee6:	f7ff ff01 	bl	8018cec <BSP_SD_GetCardState>
 8018eea:	4603      	mov	r3, r0
 8018eec:	2b00      	cmp	r3, #0
 8018eee:	d102      	bne.n	8018ef6 <SD_read+0x8a>
          {
            res = RES_OK;
 8018ef0:	2300      	movs	r3, #0
 8018ef2:	75fb      	strb	r3, [r7, #23]
            adjust the address and the D-Cache size to invalidate accordingly.
            */
            alignedAddr = (uint32_t)buff & ~0x1F;
            SCB_InvalidateDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif
            break;
 8018ef4:	e008      	b.n	8018f08 <SD_read+0x9c>
        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 8018ef6:	f7f7 fd2f 	bl	8010958 <HAL_GetTick>
 8018efa:	4602      	mov	r2, r0
 8018efc:	693b      	ldr	r3, [r7, #16]
 8018efe:	1ad3      	subs	r3, r2, r3
 8018f00:	f247 522f 	movw	r2, #29999	@ 0x752f
 8018f04:	4293      	cmp	r3, r2
 8018f06:	d9ee      	bls.n	8018ee6 <SD_read+0x7a>
      if ((i == count) && (ret == MSD_OK))
        res = RES_OK;
    }
#endif

  return res;
 8018f08:	7dfb      	ldrb	r3, [r7, #23]
}
 8018f0a:	4618      	mov	r0, r3
 8018f0c:	3718      	adds	r7, #24
 8018f0e:	46bd      	mov	sp, r7
 8018f10:	bd80      	pop	{r7, pc}
 8018f12:	bf00      	nop
 8018f14:	24001fc8 	.word	0x24001fc8

08018f18 <SD_write>:
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1

DRESULT SD_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 8018f18:	b580      	push	{r7, lr}
 8018f1a:	b086      	sub	sp, #24
 8018f1c:	af00      	add	r7, sp, #0
 8018f1e:	60b9      	str	r1, [r7, #8]
 8018f20:	607a      	str	r2, [r7, #4]
 8018f22:	603b      	str	r3, [r7, #0]
 8018f24:	4603      	mov	r3, r0
 8018f26:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 8018f28:	2301      	movs	r3, #1
 8018f2a:	75fb      	strb	r3, [r7, #23]
#if defined(ENABLE_SCRATCH_BUFFER)
  uint8_t ret;
  int i;
#endif

   WriteStatus = 0;
 8018f2c:	4b24      	ldr	r3, [pc, #144]	@ (8018fc0 <SD_write+0xa8>)
 8018f2e:	2200      	movs	r2, #0
 8018f30:	601a      	str	r2, [r3, #0]
#if (ENABLE_SD_DMA_CACHE_MAINTENANCE == 1)
  uint32_t alignedAddr;
#endif

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 8018f32:	f247 5030 	movw	r0, #30000	@ 0x7530
 8018f36:	f7ff ff33 	bl	8018da0 <SD_CheckStatusWithTimeout>
 8018f3a:	4603      	mov	r3, r0
 8018f3c:	2b00      	cmp	r3, #0
 8018f3e:	da01      	bge.n	8018f44 <SD_write+0x2c>
  {
    return res;
 8018f40:	7dfb      	ldrb	r3, [r7, #23]
 8018f42:	e038      	b.n	8018fb6 <SD_write+0x9e>
    */
    alignedAddr = (uint32_t)buff &  ~0x1F;
    SCB_CleanDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif

    if(BSP_SD_WriteBlocks_DMA((uint32_t*)buff,
 8018f44:	683a      	ldr	r2, [r7, #0]
 8018f46:	6879      	ldr	r1, [r7, #4]
 8018f48:	68b8      	ldr	r0, [r7, #8]
 8018f4a:	f7ff feb5 	bl	8018cb8 <BSP_SD_WriteBlocks_DMA>
 8018f4e:	4603      	mov	r3, r0
 8018f50:	2b00      	cmp	r3, #0
 8018f52:	d12f      	bne.n	8018fb4 <SD_write+0x9c>
                              (uint32_t)(sector),
                              count) == MSD_OK)
    {
      /* Wait that writing process is completed or a timeout occurs */

      timeout = HAL_GetTick();
 8018f54:	f7f7 fd00 	bl	8010958 <HAL_GetTick>
 8018f58:	6138      	str	r0, [r7, #16]
      while((WriteStatus == 0) && ((HAL_GetTick() - timeout) < SD_TIMEOUT))
 8018f5a:	bf00      	nop
 8018f5c:	4b18      	ldr	r3, [pc, #96]	@ (8018fc0 <SD_write+0xa8>)
 8018f5e:	681b      	ldr	r3, [r3, #0]
 8018f60:	2b00      	cmp	r3, #0
 8018f62:	d108      	bne.n	8018f76 <SD_write+0x5e>
 8018f64:	f7f7 fcf8 	bl	8010958 <HAL_GetTick>
 8018f68:	4602      	mov	r2, r0
 8018f6a:	693b      	ldr	r3, [r7, #16]
 8018f6c:	1ad3      	subs	r3, r2, r3
 8018f6e:	f247 522f 	movw	r2, #29999	@ 0x752f
 8018f72:	4293      	cmp	r3, r2
 8018f74:	d9f2      	bls.n	8018f5c <SD_write+0x44>
      {
      }
      /* in case of a timeout return error */
      if (WriteStatus == 0)
 8018f76:	4b12      	ldr	r3, [pc, #72]	@ (8018fc0 <SD_write+0xa8>)
 8018f78:	681b      	ldr	r3, [r3, #0]
 8018f7a:	2b00      	cmp	r3, #0
 8018f7c:	d102      	bne.n	8018f84 <SD_write+0x6c>
      {
        res = RES_ERROR;
 8018f7e:	2301      	movs	r3, #1
 8018f80:	75fb      	strb	r3, [r7, #23]
 8018f82:	e017      	b.n	8018fb4 <SD_write+0x9c>
      }
      else
      {
        WriteStatus = 0;
 8018f84:	4b0e      	ldr	r3, [pc, #56]	@ (8018fc0 <SD_write+0xa8>)
 8018f86:	2200      	movs	r2, #0
 8018f88:	601a      	str	r2, [r3, #0]
        timeout = HAL_GetTick();
 8018f8a:	f7f7 fce5 	bl	8010958 <HAL_GetTick>
 8018f8e:	6138      	str	r0, [r7, #16]

        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 8018f90:	e007      	b.n	8018fa2 <SD_write+0x8a>
        {
          if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 8018f92:	f7ff feab 	bl	8018cec <BSP_SD_GetCardState>
 8018f96:	4603      	mov	r3, r0
 8018f98:	2b00      	cmp	r3, #0
 8018f9a:	d102      	bne.n	8018fa2 <SD_write+0x8a>
          {
            res = RES_OK;
 8018f9c:	2300      	movs	r3, #0
 8018f9e:	75fb      	strb	r3, [r7, #23]
            break;
 8018fa0:	e008      	b.n	8018fb4 <SD_write+0x9c>
        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 8018fa2:	f7f7 fcd9 	bl	8010958 <HAL_GetTick>
 8018fa6:	4602      	mov	r2, r0
 8018fa8:	693b      	ldr	r3, [r7, #16]
 8018faa:	1ad3      	subs	r3, r2, r3
 8018fac:	f247 522f 	movw	r2, #29999	@ 0x752f
 8018fb0:	4293      	cmp	r3, r2
 8018fb2:	d9ee      	bls.n	8018f92 <SD_write+0x7a>
      }
      if ((i == count) && (ret == MSD_OK))
        res = RES_OK;
    }
#endif
  return res;
 8018fb4:	7dfb      	ldrb	r3, [r7, #23]
}
 8018fb6:	4618      	mov	r0, r3
 8018fb8:	3718      	adds	r7, #24
 8018fba:	46bd      	mov	sp, r7
 8018fbc:	bd80      	pop	{r7, pc}
 8018fbe:	bf00      	nop
 8018fc0:	24001fc4 	.word	0x24001fc4

08018fc4 <SD_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 8018fc4:	b580      	push	{r7, lr}
 8018fc6:	b08c      	sub	sp, #48	@ 0x30
 8018fc8:	af00      	add	r7, sp, #0
 8018fca:	4603      	mov	r3, r0
 8018fcc:	603a      	str	r2, [r7, #0]
 8018fce:	71fb      	strb	r3, [r7, #7]
 8018fd0:	460b      	mov	r3, r1
 8018fd2:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 8018fd4:	2301      	movs	r3, #1
 8018fd6:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  BSP_SD_CardInfo CardInfo;

  if (Stat & STA_NOINIT) return RES_NOTRDY;
 8018fda:	4b25      	ldr	r3, [pc, #148]	@ (8019070 <SD_ioctl+0xac>)
 8018fdc:	781b      	ldrb	r3, [r3, #0]
 8018fde:	b2db      	uxtb	r3, r3
 8018fe0:	f003 0301 	and.w	r3, r3, #1
 8018fe4:	2b00      	cmp	r3, #0
 8018fe6:	d001      	beq.n	8018fec <SD_ioctl+0x28>
 8018fe8:	2303      	movs	r3, #3
 8018fea:	e03c      	b.n	8019066 <SD_ioctl+0xa2>

  switch (cmd)
 8018fec:	79bb      	ldrb	r3, [r7, #6]
 8018fee:	2b03      	cmp	r3, #3
 8018ff0:	d834      	bhi.n	801905c <SD_ioctl+0x98>
 8018ff2:	a201      	add	r2, pc, #4	@ (adr r2, 8018ff8 <SD_ioctl+0x34>)
 8018ff4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8018ff8:	08019009 	.word	0x08019009
 8018ffc:	08019011 	.word	0x08019011
 8019000:	08019029 	.word	0x08019029
 8019004:	08019043 	.word	0x08019043
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC :
    res = RES_OK;
 8019008:	2300      	movs	r3, #0
 801900a:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    break;
 801900e:	e028      	b.n	8019062 <SD_ioctl+0x9e>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    BSP_SD_GetCardInfo(&CardInfo);
 8019010:	f107 0308 	add.w	r3, r7, #8
 8019014:	4618      	mov	r0, r3
 8019016:	f7ff fe79 	bl	8018d0c <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 801901a:	6a3a      	ldr	r2, [r7, #32]
 801901c:	683b      	ldr	r3, [r7, #0]
 801901e:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 8019020:	2300      	movs	r3, #0
 8019022:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    break;
 8019026:	e01c      	b.n	8019062 <SD_ioctl+0x9e>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 8019028:	f107 0308 	add.w	r3, r7, #8
 801902c:	4618      	mov	r0, r3
 801902e:	f7ff fe6d 	bl	8018d0c <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 8019032:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8019034:	b29a      	uxth	r2, r3
 8019036:	683b      	ldr	r3, [r7, #0]
 8019038:	801a      	strh	r2, [r3, #0]
    res = RES_OK;
 801903a:	2300      	movs	r3, #0
 801903c:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    break;
 8019040:	e00f      	b.n	8019062 <SD_ioctl+0x9e>

  /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 8019042:	f107 0308 	add.w	r3, r7, #8
 8019046:	4618      	mov	r0, r3
 8019048:	f7ff fe60 	bl	8018d0c <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 801904c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801904e:	0a5a      	lsrs	r2, r3, #9
 8019050:	683b      	ldr	r3, [r7, #0]
 8019052:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 8019054:	2300      	movs	r3, #0
 8019056:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    break;
 801905a:	e002      	b.n	8019062 <SD_ioctl+0x9e>

  default:
    res = RES_PARERR;
 801905c:	2304      	movs	r3, #4
 801905e:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  }

  return res;
 8019062:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 8019066:	4618      	mov	r0, r3
 8019068:	3730      	adds	r7, #48	@ 0x30
 801906a:	46bd      	mov	sp, r7
 801906c:	bd80      	pop	{r7, pc}
 801906e:	bf00      	nop
 8019070:	24000055 	.word	0x24000055

08019074 <BSP_SD_WriteCpltCallback>:
  * @brief Tx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_WriteCpltCallback(void)
{
 8019074:	b480      	push	{r7}
 8019076:	af00      	add	r7, sp, #0

  WriteStatus = 1;
 8019078:	4b03      	ldr	r3, [pc, #12]	@ (8019088 <BSP_SD_WriteCpltCallback+0x14>)
 801907a:	2201      	movs	r2, #1
 801907c:	601a      	str	r2, [r3, #0]
}
 801907e:	bf00      	nop
 8019080:	46bd      	mov	sp, r7
 8019082:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019086:	4770      	bx	lr
 8019088:	24001fc4 	.word	0x24001fc4

0801908c <BSP_SD_ReadCpltCallback>:
  * @brief Rx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_ReadCpltCallback(void)
{
 801908c:	b480      	push	{r7}
 801908e:	af00      	add	r7, sp, #0
  ReadStatus = 1;
 8019090:	4b03      	ldr	r3, [pc, #12]	@ (80190a0 <BSP_SD_ReadCpltCallback+0x14>)
 8019092:	2201      	movs	r2, #1
 8019094:	601a      	str	r2, [r3, #0]
}
 8019096:	bf00      	nop
 8019098:	46bd      	mov	sp, r7
 801909a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801909e:	4770      	bx	lr
 80190a0:	24001fc8 	.word	0x24001fc8

080190a4 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 80190a4:	b480      	push	{r7}
 80190a6:	b087      	sub	sp, #28
 80190a8:	af00      	add	r7, sp, #0
 80190aa:	60f8      	str	r0, [r7, #12]
 80190ac:	60b9      	str	r1, [r7, #8]
 80190ae:	4613      	mov	r3, r2
 80190b0:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 80190b2:	2301      	movs	r3, #1
 80190b4:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 80190b6:	2300      	movs	r3, #0
 80190b8:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 80190ba:	4b1f      	ldr	r3, [pc, #124]	@ (8019138 <FATFS_LinkDriverEx+0x94>)
 80190bc:	7a5b      	ldrb	r3, [r3, #9]
 80190be:	b2db      	uxtb	r3, r3
 80190c0:	2b00      	cmp	r3, #0
 80190c2:	d131      	bne.n	8019128 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 80190c4:	4b1c      	ldr	r3, [pc, #112]	@ (8019138 <FATFS_LinkDriverEx+0x94>)
 80190c6:	7a5b      	ldrb	r3, [r3, #9]
 80190c8:	b2db      	uxtb	r3, r3
 80190ca:	461a      	mov	r2, r3
 80190cc:	4b1a      	ldr	r3, [pc, #104]	@ (8019138 <FATFS_LinkDriverEx+0x94>)
 80190ce:	2100      	movs	r1, #0
 80190d0:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 80190d2:	4b19      	ldr	r3, [pc, #100]	@ (8019138 <FATFS_LinkDriverEx+0x94>)
 80190d4:	7a5b      	ldrb	r3, [r3, #9]
 80190d6:	b2db      	uxtb	r3, r3
 80190d8:	4a17      	ldr	r2, [pc, #92]	@ (8019138 <FATFS_LinkDriverEx+0x94>)
 80190da:	009b      	lsls	r3, r3, #2
 80190dc:	4413      	add	r3, r2
 80190de:	68fa      	ldr	r2, [r7, #12]
 80190e0:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 80190e2:	4b15      	ldr	r3, [pc, #84]	@ (8019138 <FATFS_LinkDriverEx+0x94>)
 80190e4:	7a5b      	ldrb	r3, [r3, #9]
 80190e6:	b2db      	uxtb	r3, r3
 80190e8:	461a      	mov	r2, r3
 80190ea:	4b13      	ldr	r3, [pc, #76]	@ (8019138 <FATFS_LinkDriverEx+0x94>)
 80190ec:	4413      	add	r3, r2
 80190ee:	79fa      	ldrb	r2, [r7, #7]
 80190f0:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 80190f2:	4b11      	ldr	r3, [pc, #68]	@ (8019138 <FATFS_LinkDriverEx+0x94>)
 80190f4:	7a5b      	ldrb	r3, [r3, #9]
 80190f6:	b2db      	uxtb	r3, r3
 80190f8:	1c5a      	adds	r2, r3, #1
 80190fa:	b2d1      	uxtb	r1, r2
 80190fc:	4a0e      	ldr	r2, [pc, #56]	@ (8019138 <FATFS_LinkDriverEx+0x94>)
 80190fe:	7251      	strb	r1, [r2, #9]
 8019100:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 8019102:	7dbb      	ldrb	r3, [r7, #22]
 8019104:	3330      	adds	r3, #48	@ 0x30
 8019106:	b2da      	uxtb	r2, r3
 8019108:	68bb      	ldr	r3, [r7, #8]
 801910a:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 801910c:	68bb      	ldr	r3, [r7, #8]
 801910e:	3301      	adds	r3, #1
 8019110:	223a      	movs	r2, #58	@ 0x3a
 8019112:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 8019114:	68bb      	ldr	r3, [r7, #8]
 8019116:	3302      	adds	r3, #2
 8019118:	222f      	movs	r2, #47	@ 0x2f
 801911a:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 801911c:	68bb      	ldr	r3, [r7, #8]
 801911e:	3303      	adds	r3, #3
 8019120:	2200      	movs	r2, #0
 8019122:	701a      	strb	r2, [r3, #0]
    ret = 0;
 8019124:	2300      	movs	r3, #0
 8019126:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 8019128:	7dfb      	ldrb	r3, [r7, #23]
}
 801912a:	4618      	mov	r0, r3
 801912c:	371c      	adds	r7, #28
 801912e:	46bd      	mov	sp, r7
 8019130:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019134:	4770      	bx	lr
 8019136:	bf00      	nop
 8019138:	24001fcc 	.word	0x24001fcc

0801913c <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 801913c:	b580      	push	{r7, lr}
 801913e:	b082      	sub	sp, #8
 8019140:	af00      	add	r7, sp, #0
 8019142:	6078      	str	r0, [r7, #4]
 8019144:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 8019146:	2200      	movs	r2, #0
 8019148:	6839      	ldr	r1, [r7, #0]
 801914a:	6878      	ldr	r0, [r7, #4]
 801914c:	f7ff ffaa 	bl	80190a4 <FATFS_LinkDriverEx>
 8019150:	4603      	mov	r3, r0
}
 8019152:	4618      	mov	r0, r3
 8019154:	3708      	adds	r7, #8
 8019156:	46bd      	mov	sp, r7
 8019158:	bd80      	pop	{r7, pc}
	...

0801915c <__assert_func>:
 801915c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 801915e:	4614      	mov	r4, r2
 8019160:	461a      	mov	r2, r3
 8019162:	4b09      	ldr	r3, [pc, #36]	@ (8019188 <__assert_func+0x2c>)
 8019164:	681b      	ldr	r3, [r3, #0]
 8019166:	4605      	mov	r5, r0
 8019168:	68d8      	ldr	r0, [r3, #12]
 801916a:	b954      	cbnz	r4, 8019182 <__assert_func+0x26>
 801916c:	4b07      	ldr	r3, [pc, #28]	@ (801918c <__assert_func+0x30>)
 801916e:	461c      	mov	r4, r3
 8019170:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8019174:	9100      	str	r1, [sp, #0]
 8019176:	462b      	mov	r3, r5
 8019178:	4905      	ldr	r1, [pc, #20]	@ (8019190 <__assert_func+0x34>)
 801917a:	f000 faed 	bl	8019758 <fiprintf>
 801917e:	f000 fcf4 	bl	8019b6a <abort>
 8019182:	4b04      	ldr	r3, [pc, #16]	@ (8019194 <__assert_func+0x38>)
 8019184:	e7f4      	b.n	8019170 <__assert_func+0x14>
 8019186:	bf00      	nop
 8019188:	24000064 	.word	0x24000064
 801918c:	0801c1ef 	.word	0x0801c1ef
 8019190:	0801c1c1 	.word	0x0801c1c1
 8019194:	0801c1b4 	.word	0x0801c1b4

08019198 <atoi>:
 8019198:	220a      	movs	r2, #10
 801919a:	2100      	movs	r1, #0
 801919c:	f000 b982 	b.w	80194a4 <strtol>

080191a0 <calloc>:
 80191a0:	4b02      	ldr	r3, [pc, #8]	@ (80191ac <calloc+0xc>)
 80191a2:	460a      	mov	r2, r1
 80191a4:	4601      	mov	r1, r0
 80191a6:	6818      	ldr	r0, [r3, #0]
 80191a8:	f000 b802 	b.w	80191b0 <_calloc_r>
 80191ac:	24000064 	.word	0x24000064

080191b0 <_calloc_r>:
 80191b0:	b570      	push	{r4, r5, r6, lr}
 80191b2:	fba1 5402 	umull	r5, r4, r1, r2
 80191b6:	b93c      	cbnz	r4, 80191c8 <_calloc_r+0x18>
 80191b8:	4629      	mov	r1, r5
 80191ba:	f000 f83f 	bl	801923c <_malloc_r>
 80191be:	4606      	mov	r6, r0
 80191c0:	b928      	cbnz	r0, 80191ce <_calloc_r+0x1e>
 80191c2:	2600      	movs	r6, #0
 80191c4:	4630      	mov	r0, r6
 80191c6:	bd70      	pop	{r4, r5, r6, pc}
 80191c8:	220c      	movs	r2, #12
 80191ca:	6002      	str	r2, [r0, #0]
 80191cc:	e7f9      	b.n	80191c2 <_calloc_r+0x12>
 80191ce:	462a      	mov	r2, r5
 80191d0:	4621      	mov	r1, r4
 80191d2:	f000 fbfb 	bl	80199cc <memset>
 80191d6:	e7f5      	b.n	80191c4 <_calloc_r+0x14>

080191d8 <malloc>:
 80191d8:	4b02      	ldr	r3, [pc, #8]	@ (80191e4 <malloc+0xc>)
 80191da:	4601      	mov	r1, r0
 80191dc:	6818      	ldr	r0, [r3, #0]
 80191de:	f000 b82d 	b.w	801923c <_malloc_r>
 80191e2:	bf00      	nop
 80191e4:	24000064 	.word	0x24000064

080191e8 <free>:
 80191e8:	4b02      	ldr	r3, [pc, #8]	@ (80191f4 <free+0xc>)
 80191ea:	4601      	mov	r1, r0
 80191ec:	6818      	ldr	r0, [r3, #0]
 80191ee:	f000 bcc3 	b.w	8019b78 <_free_r>
 80191f2:	bf00      	nop
 80191f4:	24000064 	.word	0x24000064

080191f8 <sbrk_aligned>:
 80191f8:	b570      	push	{r4, r5, r6, lr}
 80191fa:	4e0f      	ldr	r6, [pc, #60]	@ (8019238 <sbrk_aligned+0x40>)
 80191fc:	460c      	mov	r4, r1
 80191fe:	6831      	ldr	r1, [r6, #0]
 8019200:	4605      	mov	r5, r0
 8019202:	b911      	cbnz	r1, 801920a <sbrk_aligned+0x12>
 8019204:	f000 fc54 	bl	8019ab0 <_sbrk_r>
 8019208:	6030      	str	r0, [r6, #0]
 801920a:	4621      	mov	r1, r4
 801920c:	4628      	mov	r0, r5
 801920e:	f000 fc4f 	bl	8019ab0 <_sbrk_r>
 8019212:	1c43      	adds	r3, r0, #1
 8019214:	d103      	bne.n	801921e <sbrk_aligned+0x26>
 8019216:	f04f 34ff 	mov.w	r4, #4294967295
 801921a:	4620      	mov	r0, r4
 801921c:	bd70      	pop	{r4, r5, r6, pc}
 801921e:	1cc4      	adds	r4, r0, #3
 8019220:	f024 0403 	bic.w	r4, r4, #3
 8019224:	42a0      	cmp	r0, r4
 8019226:	d0f8      	beq.n	801921a <sbrk_aligned+0x22>
 8019228:	1a21      	subs	r1, r4, r0
 801922a:	4628      	mov	r0, r5
 801922c:	f000 fc40 	bl	8019ab0 <_sbrk_r>
 8019230:	3001      	adds	r0, #1
 8019232:	d1f2      	bne.n	801921a <sbrk_aligned+0x22>
 8019234:	e7ef      	b.n	8019216 <sbrk_aligned+0x1e>
 8019236:	bf00      	nop
 8019238:	24001fd8 	.word	0x24001fd8

0801923c <_malloc_r>:
 801923c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8019240:	1ccd      	adds	r5, r1, #3
 8019242:	f025 0503 	bic.w	r5, r5, #3
 8019246:	3508      	adds	r5, #8
 8019248:	2d0c      	cmp	r5, #12
 801924a:	bf38      	it	cc
 801924c:	250c      	movcc	r5, #12
 801924e:	2d00      	cmp	r5, #0
 8019250:	4606      	mov	r6, r0
 8019252:	db01      	blt.n	8019258 <_malloc_r+0x1c>
 8019254:	42a9      	cmp	r1, r5
 8019256:	d904      	bls.n	8019262 <_malloc_r+0x26>
 8019258:	230c      	movs	r3, #12
 801925a:	6033      	str	r3, [r6, #0]
 801925c:	2000      	movs	r0, #0
 801925e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8019262:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8019338 <_malloc_r+0xfc>
 8019266:	f000 f869 	bl	801933c <__malloc_lock>
 801926a:	f8d8 3000 	ldr.w	r3, [r8]
 801926e:	461c      	mov	r4, r3
 8019270:	bb44      	cbnz	r4, 80192c4 <_malloc_r+0x88>
 8019272:	4629      	mov	r1, r5
 8019274:	4630      	mov	r0, r6
 8019276:	f7ff ffbf 	bl	80191f8 <sbrk_aligned>
 801927a:	1c43      	adds	r3, r0, #1
 801927c:	4604      	mov	r4, r0
 801927e:	d158      	bne.n	8019332 <_malloc_r+0xf6>
 8019280:	f8d8 4000 	ldr.w	r4, [r8]
 8019284:	4627      	mov	r7, r4
 8019286:	2f00      	cmp	r7, #0
 8019288:	d143      	bne.n	8019312 <_malloc_r+0xd6>
 801928a:	2c00      	cmp	r4, #0
 801928c:	d04b      	beq.n	8019326 <_malloc_r+0xea>
 801928e:	6823      	ldr	r3, [r4, #0]
 8019290:	4639      	mov	r1, r7
 8019292:	4630      	mov	r0, r6
 8019294:	eb04 0903 	add.w	r9, r4, r3
 8019298:	f000 fc0a 	bl	8019ab0 <_sbrk_r>
 801929c:	4581      	cmp	r9, r0
 801929e:	d142      	bne.n	8019326 <_malloc_r+0xea>
 80192a0:	6821      	ldr	r1, [r4, #0]
 80192a2:	1a6d      	subs	r5, r5, r1
 80192a4:	4629      	mov	r1, r5
 80192a6:	4630      	mov	r0, r6
 80192a8:	f7ff ffa6 	bl	80191f8 <sbrk_aligned>
 80192ac:	3001      	adds	r0, #1
 80192ae:	d03a      	beq.n	8019326 <_malloc_r+0xea>
 80192b0:	6823      	ldr	r3, [r4, #0]
 80192b2:	442b      	add	r3, r5
 80192b4:	6023      	str	r3, [r4, #0]
 80192b6:	f8d8 3000 	ldr.w	r3, [r8]
 80192ba:	685a      	ldr	r2, [r3, #4]
 80192bc:	bb62      	cbnz	r2, 8019318 <_malloc_r+0xdc>
 80192be:	f8c8 7000 	str.w	r7, [r8]
 80192c2:	e00f      	b.n	80192e4 <_malloc_r+0xa8>
 80192c4:	6822      	ldr	r2, [r4, #0]
 80192c6:	1b52      	subs	r2, r2, r5
 80192c8:	d420      	bmi.n	801930c <_malloc_r+0xd0>
 80192ca:	2a0b      	cmp	r2, #11
 80192cc:	d917      	bls.n	80192fe <_malloc_r+0xc2>
 80192ce:	1961      	adds	r1, r4, r5
 80192d0:	42a3      	cmp	r3, r4
 80192d2:	6025      	str	r5, [r4, #0]
 80192d4:	bf18      	it	ne
 80192d6:	6059      	strne	r1, [r3, #4]
 80192d8:	6863      	ldr	r3, [r4, #4]
 80192da:	bf08      	it	eq
 80192dc:	f8c8 1000 	streq.w	r1, [r8]
 80192e0:	5162      	str	r2, [r4, r5]
 80192e2:	604b      	str	r3, [r1, #4]
 80192e4:	4630      	mov	r0, r6
 80192e6:	f000 f82f 	bl	8019348 <__malloc_unlock>
 80192ea:	f104 000b 	add.w	r0, r4, #11
 80192ee:	1d23      	adds	r3, r4, #4
 80192f0:	f020 0007 	bic.w	r0, r0, #7
 80192f4:	1ac2      	subs	r2, r0, r3
 80192f6:	bf1c      	itt	ne
 80192f8:	1a1b      	subne	r3, r3, r0
 80192fa:	50a3      	strne	r3, [r4, r2]
 80192fc:	e7af      	b.n	801925e <_malloc_r+0x22>
 80192fe:	6862      	ldr	r2, [r4, #4]
 8019300:	42a3      	cmp	r3, r4
 8019302:	bf0c      	ite	eq
 8019304:	f8c8 2000 	streq.w	r2, [r8]
 8019308:	605a      	strne	r2, [r3, #4]
 801930a:	e7eb      	b.n	80192e4 <_malloc_r+0xa8>
 801930c:	4623      	mov	r3, r4
 801930e:	6864      	ldr	r4, [r4, #4]
 8019310:	e7ae      	b.n	8019270 <_malloc_r+0x34>
 8019312:	463c      	mov	r4, r7
 8019314:	687f      	ldr	r7, [r7, #4]
 8019316:	e7b6      	b.n	8019286 <_malloc_r+0x4a>
 8019318:	461a      	mov	r2, r3
 801931a:	685b      	ldr	r3, [r3, #4]
 801931c:	42a3      	cmp	r3, r4
 801931e:	d1fb      	bne.n	8019318 <_malloc_r+0xdc>
 8019320:	2300      	movs	r3, #0
 8019322:	6053      	str	r3, [r2, #4]
 8019324:	e7de      	b.n	80192e4 <_malloc_r+0xa8>
 8019326:	230c      	movs	r3, #12
 8019328:	6033      	str	r3, [r6, #0]
 801932a:	4630      	mov	r0, r6
 801932c:	f000 f80c 	bl	8019348 <__malloc_unlock>
 8019330:	e794      	b.n	801925c <_malloc_r+0x20>
 8019332:	6005      	str	r5, [r0, #0]
 8019334:	e7d6      	b.n	80192e4 <_malloc_r+0xa8>
 8019336:	bf00      	nop
 8019338:	24001fdc 	.word	0x24001fdc

0801933c <__malloc_lock>:
 801933c:	4801      	ldr	r0, [pc, #4]	@ (8019344 <__malloc_lock+0x8>)
 801933e:	f000 bc04 	b.w	8019b4a <__retarget_lock_acquire_recursive>
 8019342:	bf00      	nop
 8019344:	24002120 	.word	0x24002120

08019348 <__malloc_unlock>:
 8019348:	4801      	ldr	r0, [pc, #4]	@ (8019350 <__malloc_unlock+0x8>)
 801934a:	f000 bbff 	b.w	8019b4c <__retarget_lock_release_recursive>
 801934e:	bf00      	nop
 8019350:	24002120 	.word	0x24002120

08019354 <srand>:
 8019354:	b538      	push	{r3, r4, r5, lr}
 8019356:	4b10      	ldr	r3, [pc, #64]	@ (8019398 <srand+0x44>)
 8019358:	681d      	ldr	r5, [r3, #0]
 801935a:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 801935c:	4604      	mov	r4, r0
 801935e:	b9b3      	cbnz	r3, 801938e <srand+0x3a>
 8019360:	2018      	movs	r0, #24
 8019362:	f7ff ff39 	bl	80191d8 <malloc>
 8019366:	4602      	mov	r2, r0
 8019368:	6328      	str	r0, [r5, #48]	@ 0x30
 801936a:	b920      	cbnz	r0, 8019376 <srand+0x22>
 801936c:	4b0b      	ldr	r3, [pc, #44]	@ (801939c <srand+0x48>)
 801936e:	480c      	ldr	r0, [pc, #48]	@ (80193a0 <srand+0x4c>)
 8019370:	2146      	movs	r1, #70	@ 0x46
 8019372:	f7ff fef3 	bl	801915c <__assert_func>
 8019376:	490b      	ldr	r1, [pc, #44]	@ (80193a4 <srand+0x50>)
 8019378:	4b0b      	ldr	r3, [pc, #44]	@ (80193a8 <srand+0x54>)
 801937a:	e9c0 1300 	strd	r1, r3, [r0]
 801937e:	4b0b      	ldr	r3, [pc, #44]	@ (80193ac <srand+0x58>)
 8019380:	6083      	str	r3, [r0, #8]
 8019382:	230b      	movs	r3, #11
 8019384:	8183      	strh	r3, [r0, #12]
 8019386:	2100      	movs	r1, #0
 8019388:	2001      	movs	r0, #1
 801938a:	e9c2 0104 	strd	r0, r1, [r2, #16]
 801938e:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 8019390:	2200      	movs	r2, #0
 8019392:	611c      	str	r4, [r3, #16]
 8019394:	615a      	str	r2, [r3, #20]
 8019396:	bd38      	pop	{r3, r4, r5, pc}
 8019398:	24000064 	.word	0x24000064
 801939c:	0801c1f0 	.word	0x0801c1f0
 80193a0:	0801c207 	.word	0x0801c207
 80193a4:	abcd330e 	.word	0xabcd330e
 80193a8:	e66d1234 	.word	0xe66d1234
 80193ac:	0005deec 	.word	0x0005deec

080193b0 <_strtol_l.constprop.0>:
 80193b0:	2b24      	cmp	r3, #36	@ 0x24
 80193b2:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80193b6:	4686      	mov	lr, r0
 80193b8:	4690      	mov	r8, r2
 80193ba:	d801      	bhi.n	80193c0 <_strtol_l.constprop.0+0x10>
 80193bc:	2b01      	cmp	r3, #1
 80193be:	d106      	bne.n	80193ce <_strtol_l.constprop.0+0x1e>
 80193c0:	f000 fb98 	bl	8019af4 <__errno>
 80193c4:	2316      	movs	r3, #22
 80193c6:	6003      	str	r3, [r0, #0]
 80193c8:	2000      	movs	r0, #0
 80193ca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80193ce:	4834      	ldr	r0, [pc, #208]	@ (80194a0 <_strtol_l.constprop.0+0xf0>)
 80193d0:	460d      	mov	r5, r1
 80193d2:	462a      	mov	r2, r5
 80193d4:	f815 4b01 	ldrb.w	r4, [r5], #1
 80193d8:	5d06      	ldrb	r6, [r0, r4]
 80193da:	f016 0608 	ands.w	r6, r6, #8
 80193de:	d1f8      	bne.n	80193d2 <_strtol_l.constprop.0+0x22>
 80193e0:	2c2d      	cmp	r4, #45	@ 0x2d
 80193e2:	d12d      	bne.n	8019440 <_strtol_l.constprop.0+0x90>
 80193e4:	782c      	ldrb	r4, [r5, #0]
 80193e6:	2601      	movs	r6, #1
 80193e8:	1c95      	adds	r5, r2, #2
 80193ea:	f033 0210 	bics.w	r2, r3, #16
 80193ee:	d109      	bne.n	8019404 <_strtol_l.constprop.0+0x54>
 80193f0:	2c30      	cmp	r4, #48	@ 0x30
 80193f2:	d12a      	bne.n	801944a <_strtol_l.constprop.0+0x9a>
 80193f4:	782a      	ldrb	r2, [r5, #0]
 80193f6:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 80193fa:	2a58      	cmp	r2, #88	@ 0x58
 80193fc:	d125      	bne.n	801944a <_strtol_l.constprop.0+0x9a>
 80193fe:	786c      	ldrb	r4, [r5, #1]
 8019400:	2310      	movs	r3, #16
 8019402:	3502      	adds	r5, #2
 8019404:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 8019408:	f10c 3cff 	add.w	ip, ip, #4294967295
 801940c:	2200      	movs	r2, #0
 801940e:	fbbc f9f3 	udiv	r9, ip, r3
 8019412:	4610      	mov	r0, r2
 8019414:	fb03 ca19 	mls	sl, r3, r9, ip
 8019418:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 801941c:	2f09      	cmp	r7, #9
 801941e:	d81b      	bhi.n	8019458 <_strtol_l.constprop.0+0xa8>
 8019420:	463c      	mov	r4, r7
 8019422:	42a3      	cmp	r3, r4
 8019424:	dd27      	ble.n	8019476 <_strtol_l.constprop.0+0xc6>
 8019426:	1c57      	adds	r7, r2, #1
 8019428:	d007      	beq.n	801943a <_strtol_l.constprop.0+0x8a>
 801942a:	4581      	cmp	r9, r0
 801942c:	d320      	bcc.n	8019470 <_strtol_l.constprop.0+0xc0>
 801942e:	d101      	bne.n	8019434 <_strtol_l.constprop.0+0x84>
 8019430:	45a2      	cmp	sl, r4
 8019432:	db1d      	blt.n	8019470 <_strtol_l.constprop.0+0xc0>
 8019434:	fb00 4003 	mla	r0, r0, r3, r4
 8019438:	2201      	movs	r2, #1
 801943a:	f815 4b01 	ldrb.w	r4, [r5], #1
 801943e:	e7eb      	b.n	8019418 <_strtol_l.constprop.0+0x68>
 8019440:	2c2b      	cmp	r4, #43	@ 0x2b
 8019442:	bf04      	itt	eq
 8019444:	782c      	ldrbeq	r4, [r5, #0]
 8019446:	1c95      	addeq	r5, r2, #2
 8019448:	e7cf      	b.n	80193ea <_strtol_l.constprop.0+0x3a>
 801944a:	2b00      	cmp	r3, #0
 801944c:	d1da      	bne.n	8019404 <_strtol_l.constprop.0+0x54>
 801944e:	2c30      	cmp	r4, #48	@ 0x30
 8019450:	bf0c      	ite	eq
 8019452:	2308      	moveq	r3, #8
 8019454:	230a      	movne	r3, #10
 8019456:	e7d5      	b.n	8019404 <_strtol_l.constprop.0+0x54>
 8019458:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 801945c:	2f19      	cmp	r7, #25
 801945e:	d801      	bhi.n	8019464 <_strtol_l.constprop.0+0xb4>
 8019460:	3c37      	subs	r4, #55	@ 0x37
 8019462:	e7de      	b.n	8019422 <_strtol_l.constprop.0+0x72>
 8019464:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 8019468:	2f19      	cmp	r7, #25
 801946a:	d804      	bhi.n	8019476 <_strtol_l.constprop.0+0xc6>
 801946c:	3c57      	subs	r4, #87	@ 0x57
 801946e:	e7d8      	b.n	8019422 <_strtol_l.constprop.0+0x72>
 8019470:	f04f 32ff 	mov.w	r2, #4294967295
 8019474:	e7e1      	b.n	801943a <_strtol_l.constprop.0+0x8a>
 8019476:	1c53      	adds	r3, r2, #1
 8019478:	d108      	bne.n	801948c <_strtol_l.constprop.0+0xdc>
 801947a:	2322      	movs	r3, #34	@ 0x22
 801947c:	f8ce 3000 	str.w	r3, [lr]
 8019480:	4660      	mov	r0, ip
 8019482:	f1b8 0f00 	cmp.w	r8, #0
 8019486:	d0a0      	beq.n	80193ca <_strtol_l.constprop.0+0x1a>
 8019488:	1e69      	subs	r1, r5, #1
 801948a:	e006      	b.n	801949a <_strtol_l.constprop.0+0xea>
 801948c:	b106      	cbz	r6, 8019490 <_strtol_l.constprop.0+0xe0>
 801948e:	4240      	negs	r0, r0
 8019490:	f1b8 0f00 	cmp.w	r8, #0
 8019494:	d099      	beq.n	80193ca <_strtol_l.constprop.0+0x1a>
 8019496:	2a00      	cmp	r2, #0
 8019498:	d1f6      	bne.n	8019488 <_strtol_l.constprop.0+0xd8>
 801949a:	f8c8 1000 	str.w	r1, [r8]
 801949e:	e794      	b.n	80193ca <_strtol_l.constprop.0+0x1a>
 80194a0:	0801c260 	.word	0x0801c260

080194a4 <strtol>:
 80194a4:	4613      	mov	r3, r2
 80194a6:	460a      	mov	r2, r1
 80194a8:	4601      	mov	r1, r0
 80194aa:	4802      	ldr	r0, [pc, #8]	@ (80194b4 <strtol+0x10>)
 80194ac:	6800      	ldr	r0, [r0, #0]
 80194ae:	f7ff bf7f 	b.w	80193b0 <_strtol_l.constprop.0>
 80194b2:	bf00      	nop
 80194b4:	24000064 	.word	0x24000064

080194b8 <__sflush_r>:
 80194b8:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80194bc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80194c0:	0716      	lsls	r6, r2, #28
 80194c2:	4605      	mov	r5, r0
 80194c4:	460c      	mov	r4, r1
 80194c6:	d454      	bmi.n	8019572 <__sflush_r+0xba>
 80194c8:	684b      	ldr	r3, [r1, #4]
 80194ca:	2b00      	cmp	r3, #0
 80194cc:	dc02      	bgt.n	80194d4 <__sflush_r+0x1c>
 80194ce:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 80194d0:	2b00      	cmp	r3, #0
 80194d2:	dd48      	ble.n	8019566 <__sflush_r+0xae>
 80194d4:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80194d6:	2e00      	cmp	r6, #0
 80194d8:	d045      	beq.n	8019566 <__sflush_r+0xae>
 80194da:	2300      	movs	r3, #0
 80194dc:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 80194e0:	682f      	ldr	r7, [r5, #0]
 80194e2:	6a21      	ldr	r1, [r4, #32]
 80194e4:	602b      	str	r3, [r5, #0]
 80194e6:	d030      	beq.n	801954a <__sflush_r+0x92>
 80194e8:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 80194ea:	89a3      	ldrh	r3, [r4, #12]
 80194ec:	0759      	lsls	r1, r3, #29
 80194ee:	d505      	bpl.n	80194fc <__sflush_r+0x44>
 80194f0:	6863      	ldr	r3, [r4, #4]
 80194f2:	1ad2      	subs	r2, r2, r3
 80194f4:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 80194f6:	b10b      	cbz	r3, 80194fc <__sflush_r+0x44>
 80194f8:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80194fa:	1ad2      	subs	r2, r2, r3
 80194fc:	2300      	movs	r3, #0
 80194fe:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8019500:	6a21      	ldr	r1, [r4, #32]
 8019502:	4628      	mov	r0, r5
 8019504:	47b0      	blx	r6
 8019506:	1c43      	adds	r3, r0, #1
 8019508:	89a3      	ldrh	r3, [r4, #12]
 801950a:	d106      	bne.n	801951a <__sflush_r+0x62>
 801950c:	6829      	ldr	r1, [r5, #0]
 801950e:	291d      	cmp	r1, #29
 8019510:	d82b      	bhi.n	801956a <__sflush_r+0xb2>
 8019512:	4a2a      	ldr	r2, [pc, #168]	@ (80195bc <__sflush_r+0x104>)
 8019514:	410a      	asrs	r2, r1
 8019516:	07d6      	lsls	r6, r2, #31
 8019518:	d427      	bmi.n	801956a <__sflush_r+0xb2>
 801951a:	2200      	movs	r2, #0
 801951c:	6062      	str	r2, [r4, #4]
 801951e:	04d9      	lsls	r1, r3, #19
 8019520:	6922      	ldr	r2, [r4, #16]
 8019522:	6022      	str	r2, [r4, #0]
 8019524:	d504      	bpl.n	8019530 <__sflush_r+0x78>
 8019526:	1c42      	adds	r2, r0, #1
 8019528:	d101      	bne.n	801952e <__sflush_r+0x76>
 801952a:	682b      	ldr	r3, [r5, #0]
 801952c:	b903      	cbnz	r3, 8019530 <__sflush_r+0x78>
 801952e:	6560      	str	r0, [r4, #84]	@ 0x54
 8019530:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8019532:	602f      	str	r7, [r5, #0]
 8019534:	b1b9      	cbz	r1, 8019566 <__sflush_r+0xae>
 8019536:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 801953a:	4299      	cmp	r1, r3
 801953c:	d002      	beq.n	8019544 <__sflush_r+0x8c>
 801953e:	4628      	mov	r0, r5
 8019540:	f000 fb1a 	bl	8019b78 <_free_r>
 8019544:	2300      	movs	r3, #0
 8019546:	6363      	str	r3, [r4, #52]	@ 0x34
 8019548:	e00d      	b.n	8019566 <__sflush_r+0xae>
 801954a:	2301      	movs	r3, #1
 801954c:	4628      	mov	r0, r5
 801954e:	47b0      	blx	r6
 8019550:	4602      	mov	r2, r0
 8019552:	1c50      	adds	r0, r2, #1
 8019554:	d1c9      	bne.n	80194ea <__sflush_r+0x32>
 8019556:	682b      	ldr	r3, [r5, #0]
 8019558:	2b00      	cmp	r3, #0
 801955a:	d0c6      	beq.n	80194ea <__sflush_r+0x32>
 801955c:	2b1d      	cmp	r3, #29
 801955e:	d001      	beq.n	8019564 <__sflush_r+0xac>
 8019560:	2b16      	cmp	r3, #22
 8019562:	d11e      	bne.n	80195a2 <__sflush_r+0xea>
 8019564:	602f      	str	r7, [r5, #0]
 8019566:	2000      	movs	r0, #0
 8019568:	e022      	b.n	80195b0 <__sflush_r+0xf8>
 801956a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801956e:	b21b      	sxth	r3, r3
 8019570:	e01b      	b.n	80195aa <__sflush_r+0xf2>
 8019572:	690f      	ldr	r7, [r1, #16]
 8019574:	2f00      	cmp	r7, #0
 8019576:	d0f6      	beq.n	8019566 <__sflush_r+0xae>
 8019578:	0793      	lsls	r3, r2, #30
 801957a:	680e      	ldr	r6, [r1, #0]
 801957c:	bf08      	it	eq
 801957e:	694b      	ldreq	r3, [r1, #20]
 8019580:	600f      	str	r7, [r1, #0]
 8019582:	bf18      	it	ne
 8019584:	2300      	movne	r3, #0
 8019586:	eba6 0807 	sub.w	r8, r6, r7
 801958a:	608b      	str	r3, [r1, #8]
 801958c:	f1b8 0f00 	cmp.w	r8, #0
 8019590:	dde9      	ble.n	8019566 <__sflush_r+0xae>
 8019592:	6a21      	ldr	r1, [r4, #32]
 8019594:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8019596:	4643      	mov	r3, r8
 8019598:	463a      	mov	r2, r7
 801959a:	4628      	mov	r0, r5
 801959c:	47b0      	blx	r6
 801959e:	2800      	cmp	r0, #0
 80195a0:	dc08      	bgt.n	80195b4 <__sflush_r+0xfc>
 80195a2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80195a6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80195aa:	81a3      	strh	r3, [r4, #12]
 80195ac:	f04f 30ff 	mov.w	r0, #4294967295
 80195b0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80195b4:	4407      	add	r7, r0
 80195b6:	eba8 0800 	sub.w	r8, r8, r0
 80195ba:	e7e7      	b.n	801958c <__sflush_r+0xd4>
 80195bc:	dfbffffe 	.word	0xdfbffffe

080195c0 <_fflush_r>:
 80195c0:	b538      	push	{r3, r4, r5, lr}
 80195c2:	690b      	ldr	r3, [r1, #16]
 80195c4:	4605      	mov	r5, r0
 80195c6:	460c      	mov	r4, r1
 80195c8:	b913      	cbnz	r3, 80195d0 <_fflush_r+0x10>
 80195ca:	2500      	movs	r5, #0
 80195cc:	4628      	mov	r0, r5
 80195ce:	bd38      	pop	{r3, r4, r5, pc}
 80195d0:	b118      	cbz	r0, 80195da <_fflush_r+0x1a>
 80195d2:	6a03      	ldr	r3, [r0, #32]
 80195d4:	b90b      	cbnz	r3, 80195da <_fflush_r+0x1a>
 80195d6:	f000 f8a7 	bl	8019728 <__sinit>
 80195da:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80195de:	2b00      	cmp	r3, #0
 80195e0:	d0f3      	beq.n	80195ca <_fflush_r+0xa>
 80195e2:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 80195e4:	07d0      	lsls	r0, r2, #31
 80195e6:	d404      	bmi.n	80195f2 <_fflush_r+0x32>
 80195e8:	0599      	lsls	r1, r3, #22
 80195ea:	d402      	bmi.n	80195f2 <_fflush_r+0x32>
 80195ec:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80195ee:	f000 faac 	bl	8019b4a <__retarget_lock_acquire_recursive>
 80195f2:	4628      	mov	r0, r5
 80195f4:	4621      	mov	r1, r4
 80195f6:	f7ff ff5f 	bl	80194b8 <__sflush_r>
 80195fa:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80195fc:	07da      	lsls	r2, r3, #31
 80195fe:	4605      	mov	r5, r0
 8019600:	d4e4      	bmi.n	80195cc <_fflush_r+0xc>
 8019602:	89a3      	ldrh	r3, [r4, #12]
 8019604:	059b      	lsls	r3, r3, #22
 8019606:	d4e1      	bmi.n	80195cc <_fflush_r+0xc>
 8019608:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 801960a:	f000 fa9f 	bl	8019b4c <__retarget_lock_release_recursive>
 801960e:	e7dd      	b.n	80195cc <_fflush_r+0xc>

08019610 <std>:
 8019610:	2300      	movs	r3, #0
 8019612:	b510      	push	{r4, lr}
 8019614:	4604      	mov	r4, r0
 8019616:	e9c0 3300 	strd	r3, r3, [r0]
 801961a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 801961e:	6083      	str	r3, [r0, #8]
 8019620:	8181      	strh	r1, [r0, #12]
 8019622:	6643      	str	r3, [r0, #100]	@ 0x64
 8019624:	81c2      	strh	r2, [r0, #14]
 8019626:	6183      	str	r3, [r0, #24]
 8019628:	4619      	mov	r1, r3
 801962a:	2208      	movs	r2, #8
 801962c:	305c      	adds	r0, #92	@ 0x5c
 801962e:	f000 f9cd 	bl	80199cc <memset>
 8019632:	4b0d      	ldr	r3, [pc, #52]	@ (8019668 <std+0x58>)
 8019634:	6263      	str	r3, [r4, #36]	@ 0x24
 8019636:	4b0d      	ldr	r3, [pc, #52]	@ (801966c <std+0x5c>)
 8019638:	62a3      	str	r3, [r4, #40]	@ 0x28
 801963a:	4b0d      	ldr	r3, [pc, #52]	@ (8019670 <std+0x60>)
 801963c:	62e3      	str	r3, [r4, #44]	@ 0x2c
 801963e:	4b0d      	ldr	r3, [pc, #52]	@ (8019674 <std+0x64>)
 8019640:	6323      	str	r3, [r4, #48]	@ 0x30
 8019642:	4b0d      	ldr	r3, [pc, #52]	@ (8019678 <std+0x68>)
 8019644:	6224      	str	r4, [r4, #32]
 8019646:	429c      	cmp	r4, r3
 8019648:	d006      	beq.n	8019658 <std+0x48>
 801964a:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 801964e:	4294      	cmp	r4, r2
 8019650:	d002      	beq.n	8019658 <std+0x48>
 8019652:	33d0      	adds	r3, #208	@ 0xd0
 8019654:	429c      	cmp	r4, r3
 8019656:	d105      	bne.n	8019664 <std+0x54>
 8019658:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 801965c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8019660:	f000 ba72 	b.w	8019b48 <__retarget_lock_init_recursive>
 8019664:	bd10      	pop	{r4, pc}
 8019666:	bf00      	nop
 8019668:	080197c9 	.word	0x080197c9
 801966c:	080197eb 	.word	0x080197eb
 8019670:	08019823 	.word	0x08019823
 8019674:	08019847 	.word	0x08019847
 8019678:	24001fe0 	.word	0x24001fe0

0801967c <stdio_exit_handler>:
 801967c:	4a02      	ldr	r2, [pc, #8]	@ (8019688 <stdio_exit_handler+0xc>)
 801967e:	4903      	ldr	r1, [pc, #12]	@ (801968c <stdio_exit_handler+0x10>)
 8019680:	4803      	ldr	r0, [pc, #12]	@ (8019690 <stdio_exit_handler+0x14>)
 8019682:	f000 b87b 	b.w	801977c <_fwalk_sglue>
 8019686:	bf00      	nop
 8019688:	24000058 	.word	0x24000058
 801968c:	080195c1 	.word	0x080195c1
 8019690:	24000068 	.word	0x24000068

08019694 <cleanup_stdio>:
 8019694:	6841      	ldr	r1, [r0, #4]
 8019696:	4b0c      	ldr	r3, [pc, #48]	@ (80196c8 <cleanup_stdio+0x34>)
 8019698:	4299      	cmp	r1, r3
 801969a:	b510      	push	{r4, lr}
 801969c:	4604      	mov	r4, r0
 801969e:	d001      	beq.n	80196a4 <cleanup_stdio+0x10>
 80196a0:	f7ff ff8e 	bl	80195c0 <_fflush_r>
 80196a4:	68a1      	ldr	r1, [r4, #8]
 80196a6:	4b09      	ldr	r3, [pc, #36]	@ (80196cc <cleanup_stdio+0x38>)
 80196a8:	4299      	cmp	r1, r3
 80196aa:	d002      	beq.n	80196b2 <cleanup_stdio+0x1e>
 80196ac:	4620      	mov	r0, r4
 80196ae:	f7ff ff87 	bl	80195c0 <_fflush_r>
 80196b2:	68e1      	ldr	r1, [r4, #12]
 80196b4:	4b06      	ldr	r3, [pc, #24]	@ (80196d0 <cleanup_stdio+0x3c>)
 80196b6:	4299      	cmp	r1, r3
 80196b8:	d004      	beq.n	80196c4 <cleanup_stdio+0x30>
 80196ba:	4620      	mov	r0, r4
 80196bc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80196c0:	f7ff bf7e 	b.w	80195c0 <_fflush_r>
 80196c4:	bd10      	pop	{r4, pc}
 80196c6:	bf00      	nop
 80196c8:	24001fe0 	.word	0x24001fe0
 80196cc:	24002048 	.word	0x24002048
 80196d0:	240020b0 	.word	0x240020b0

080196d4 <global_stdio_init.part.0>:
 80196d4:	b510      	push	{r4, lr}
 80196d6:	4b0b      	ldr	r3, [pc, #44]	@ (8019704 <global_stdio_init.part.0+0x30>)
 80196d8:	4c0b      	ldr	r4, [pc, #44]	@ (8019708 <global_stdio_init.part.0+0x34>)
 80196da:	4a0c      	ldr	r2, [pc, #48]	@ (801970c <global_stdio_init.part.0+0x38>)
 80196dc:	601a      	str	r2, [r3, #0]
 80196de:	4620      	mov	r0, r4
 80196e0:	2200      	movs	r2, #0
 80196e2:	2104      	movs	r1, #4
 80196e4:	f7ff ff94 	bl	8019610 <std>
 80196e8:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 80196ec:	2201      	movs	r2, #1
 80196ee:	2109      	movs	r1, #9
 80196f0:	f7ff ff8e 	bl	8019610 <std>
 80196f4:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 80196f8:	2202      	movs	r2, #2
 80196fa:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80196fe:	2112      	movs	r1, #18
 8019700:	f7ff bf86 	b.w	8019610 <std>
 8019704:	24002118 	.word	0x24002118
 8019708:	24001fe0 	.word	0x24001fe0
 801970c:	0801967d 	.word	0x0801967d

08019710 <__sfp_lock_acquire>:
 8019710:	4801      	ldr	r0, [pc, #4]	@ (8019718 <__sfp_lock_acquire+0x8>)
 8019712:	f000 ba1a 	b.w	8019b4a <__retarget_lock_acquire_recursive>
 8019716:	bf00      	nop
 8019718:	24002121 	.word	0x24002121

0801971c <__sfp_lock_release>:
 801971c:	4801      	ldr	r0, [pc, #4]	@ (8019724 <__sfp_lock_release+0x8>)
 801971e:	f000 ba15 	b.w	8019b4c <__retarget_lock_release_recursive>
 8019722:	bf00      	nop
 8019724:	24002121 	.word	0x24002121

08019728 <__sinit>:
 8019728:	b510      	push	{r4, lr}
 801972a:	4604      	mov	r4, r0
 801972c:	f7ff fff0 	bl	8019710 <__sfp_lock_acquire>
 8019730:	6a23      	ldr	r3, [r4, #32]
 8019732:	b11b      	cbz	r3, 801973c <__sinit+0x14>
 8019734:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8019738:	f7ff bff0 	b.w	801971c <__sfp_lock_release>
 801973c:	4b04      	ldr	r3, [pc, #16]	@ (8019750 <__sinit+0x28>)
 801973e:	6223      	str	r3, [r4, #32]
 8019740:	4b04      	ldr	r3, [pc, #16]	@ (8019754 <__sinit+0x2c>)
 8019742:	681b      	ldr	r3, [r3, #0]
 8019744:	2b00      	cmp	r3, #0
 8019746:	d1f5      	bne.n	8019734 <__sinit+0xc>
 8019748:	f7ff ffc4 	bl	80196d4 <global_stdio_init.part.0>
 801974c:	e7f2      	b.n	8019734 <__sinit+0xc>
 801974e:	bf00      	nop
 8019750:	08019695 	.word	0x08019695
 8019754:	24002118 	.word	0x24002118

08019758 <fiprintf>:
 8019758:	b40e      	push	{r1, r2, r3}
 801975a:	b503      	push	{r0, r1, lr}
 801975c:	4601      	mov	r1, r0
 801975e:	ab03      	add	r3, sp, #12
 8019760:	4805      	ldr	r0, [pc, #20]	@ (8019778 <fiprintf+0x20>)
 8019762:	f853 2b04 	ldr.w	r2, [r3], #4
 8019766:	6800      	ldr	r0, [r0, #0]
 8019768:	9301      	str	r3, [sp, #4]
 801976a:	f000 fa79 	bl	8019c60 <_vfiprintf_r>
 801976e:	b002      	add	sp, #8
 8019770:	f85d eb04 	ldr.w	lr, [sp], #4
 8019774:	b003      	add	sp, #12
 8019776:	4770      	bx	lr
 8019778:	24000064 	.word	0x24000064

0801977c <_fwalk_sglue>:
 801977c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8019780:	4607      	mov	r7, r0
 8019782:	4688      	mov	r8, r1
 8019784:	4614      	mov	r4, r2
 8019786:	2600      	movs	r6, #0
 8019788:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 801978c:	f1b9 0901 	subs.w	r9, r9, #1
 8019790:	d505      	bpl.n	801979e <_fwalk_sglue+0x22>
 8019792:	6824      	ldr	r4, [r4, #0]
 8019794:	2c00      	cmp	r4, #0
 8019796:	d1f7      	bne.n	8019788 <_fwalk_sglue+0xc>
 8019798:	4630      	mov	r0, r6
 801979a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801979e:	89ab      	ldrh	r3, [r5, #12]
 80197a0:	2b01      	cmp	r3, #1
 80197a2:	d907      	bls.n	80197b4 <_fwalk_sglue+0x38>
 80197a4:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80197a8:	3301      	adds	r3, #1
 80197aa:	d003      	beq.n	80197b4 <_fwalk_sglue+0x38>
 80197ac:	4629      	mov	r1, r5
 80197ae:	4638      	mov	r0, r7
 80197b0:	47c0      	blx	r8
 80197b2:	4306      	orrs	r6, r0
 80197b4:	3568      	adds	r5, #104	@ 0x68
 80197b6:	e7e9      	b.n	801978c <_fwalk_sglue+0x10>

080197b8 <putchar>:
 80197b8:	4b02      	ldr	r3, [pc, #8]	@ (80197c4 <putchar+0xc>)
 80197ba:	4601      	mov	r1, r0
 80197bc:	6818      	ldr	r0, [r3, #0]
 80197be:	6882      	ldr	r2, [r0, #8]
 80197c0:	f000 bd56 	b.w	801a270 <_putc_r>
 80197c4:	24000064 	.word	0x24000064

080197c8 <__sread>:
 80197c8:	b510      	push	{r4, lr}
 80197ca:	460c      	mov	r4, r1
 80197cc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80197d0:	f000 f95c 	bl	8019a8c <_read_r>
 80197d4:	2800      	cmp	r0, #0
 80197d6:	bfab      	itete	ge
 80197d8:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 80197da:	89a3      	ldrhlt	r3, [r4, #12]
 80197dc:	181b      	addge	r3, r3, r0
 80197de:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 80197e2:	bfac      	ite	ge
 80197e4:	6563      	strge	r3, [r4, #84]	@ 0x54
 80197e6:	81a3      	strhlt	r3, [r4, #12]
 80197e8:	bd10      	pop	{r4, pc}

080197ea <__swrite>:
 80197ea:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80197ee:	461f      	mov	r7, r3
 80197f0:	898b      	ldrh	r3, [r1, #12]
 80197f2:	05db      	lsls	r3, r3, #23
 80197f4:	4605      	mov	r5, r0
 80197f6:	460c      	mov	r4, r1
 80197f8:	4616      	mov	r6, r2
 80197fa:	d505      	bpl.n	8019808 <__swrite+0x1e>
 80197fc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8019800:	2302      	movs	r3, #2
 8019802:	2200      	movs	r2, #0
 8019804:	f000 f930 	bl	8019a68 <_lseek_r>
 8019808:	89a3      	ldrh	r3, [r4, #12]
 801980a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801980e:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8019812:	81a3      	strh	r3, [r4, #12]
 8019814:	4632      	mov	r2, r6
 8019816:	463b      	mov	r3, r7
 8019818:	4628      	mov	r0, r5
 801981a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801981e:	f000 b957 	b.w	8019ad0 <_write_r>

08019822 <__sseek>:
 8019822:	b510      	push	{r4, lr}
 8019824:	460c      	mov	r4, r1
 8019826:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801982a:	f000 f91d 	bl	8019a68 <_lseek_r>
 801982e:	1c43      	adds	r3, r0, #1
 8019830:	89a3      	ldrh	r3, [r4, #12]
 8019832:	bf15      	itete	ne
 8019834:	6560      	strne	r0, [r4, #84]	@ 0x54
 8019836:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 801983a:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 801983e:	81a3      	strheq	r3, [r4, #12]
 8019840:	bf18      	it	ne
 8019842:	81a3      	strhne	r3, [r4, #12]
 8019844:	bd10      	pop	{r4, pc}

08019846 <__sclose>:
 8019846:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801984a:	f000 b8fd 	b.w	8019a48 <_close_r>

0801984e <__swbuf_r>:
 801984e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8019850:	460e      	mov	r6, r1
 8019852:	4614      	mov	r4, r2
 8019854:	4605      	mov	r5, r0
 8019856:	b118      	cbz	r0, 8019860 <__swbuf_r+0x12>
 8019858:	6a03      	ldr	r3, [r0, #32]
 801985a:	b90b      	cbnz	r3, 8019860 <__swbuf_r+0x12>
 801985c:	f7ff ff64 	bl	8019728 <__sinit>
 8019860:	69a3      	ldr	r3, [r4, #24]
 8019862:	60a3      	str	r3, [r4, #8]
 8019864:	89a3      	ldrh	r3, [r4, #12]
 8019866:	071a      	lsls	r2, r3, #28
 8019868:	d501      	bpl.n	801986e <__swbuf_r+0x20>
 801986a:	6923      	ldr	r3, [r4, #16]
 801986c:	b943      	cbnz	r3, 8019880 <__swbuf_r+0x32>
 801986e:	4621      	mov	r1, r4
 8019870:	4628      	mov	r0, r5
 8019872:	f000 f82b 	bl	80198cc <__swsetup_r>
 8019876:	b118      	cbz	r0, 8019880 <__swbuf_r+0x32>
 8019878:	f04f 37ff 	mov.w	r7, #4294967295
 801987c:	4638      	mov	r0, r7
 801987e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8019880:	6823      	ldr	r3, [r4, #0]
 8019882:	6922      	ldr	r2, [r4, #16]
 8019884:	1a98      	subs	r0, r3, r2
 8019886:	6963      	ldr	r3, [r4, #20]
 8019888:	b2f6      	uxtb	r6, r6
 801988a:	4283      	cmp	r3, r0
 801988c:	4637      	mov	r7, r6
 801988e:	dc05      	bgt.n	801989c <__swbuf_r+0x4e>
 8019890:	4621      	mov	r1, r4
 8019892:	4628      	mov	r0, r5
 8019894:	f7ff fe94 	bl	80195c0 <_fflush_r>
 8019898:	2800      	cmp	r0, #0
 801989a:	d1ed      	bne.n	8019878 <__swbuf_r+0x2a>
 801989c:	68a3      	ldr	r3, [r4, #8]
 801989e:	3b01      	subs	r3, #1
 80198a0:	60a3      	str	r3, [r4, #8]
 80198a2:	6823      	ldr	r3, [r4, #0]
 80198a4:	1c5a      	adds	r2, r3, #1
 80198a6:	6022      	str	r2, [r4, #0]
 80198a8:	701e      	strb	r6, [r3, #0]
 80198aa:	6962      	ldr	r2, [r4, #20]
 80198ac:	1c43      	adds	r3, r0, #1
 80198ae:	429a      	cmp	r2, r3
 80198b0:	d004      	beq.n	80198bc <__swbuf_r+0x6e>
 80198b2:	89a3      	ldrh	r3, [r4, #12]
 80198b4:	07db      	lsls	r3, r3, #31
 80198b6:	d5e1      	bpl.n	801987c <__swbuf_r+0x2e>
 80198b8:	2e0a      	cmp	r6, #10
 80198ba:	d1df      	bne.n	801987c <__swbuf_r+0x2e>
 80198bc:	4621      	mov	r1, r4
 80198be:	4628      	mov	r0, r5
 80198c0:	f7ff fe7e 	bl	80195c0 <_fflush_r>
 80198c4:	2800      	cmp	r0, #0
 80198c6:	d0d9      	beq.n	801987c <__swbuf_r+0x2e>
 80198c8:	e7d6      	b.n	8019878 <__swbuf_r+0x2a>
	...

080198cc <__swsetup_r>:
 80198cc:	b538      	push	{r3, r4, r5, lr}
 80198ce:	4b29      	ldr	r3, [pc, #164]	@ (8019974 <__swsetup_r+0xa8>)
 80198d0:	4605      	mov	r5, r0
 80198d2:	6818      	ldr	r0, [r3, #0]
 80198d4:	460c      	mov	r4, r1
 80198d6:	b118      	cbz	r0, 80198e0 <__swsetup_r+0x14>
 80198d8:	6a03      	ldr	r3, [r0, #32]
 80198da:	b90b      	cbnz	r3, 80198e0 <__swsetup_r+0x14>
 80198dc:	f7ff ff24 	bl	8019728 <__sinit>
 80198e0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80198e4:	0719      	lsls	r1, r3, #28
 80198e6:	d422      	bmi.n	801992e <__swsetup_r+0x62>
 80198e8:	06da      	lsls	r2, r3, #27
 80198ea:	d407      	bmi.n	80198fc <__swsetup_r+0x30>
 80198ec:	2209      	movs	r2, #9
 80198ee:	602a      	str	r2, [r5, #0]
 80198f0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80198f4:	81a3      	strh	r3, [r4, #12]
 80198f6:	f04f 30ff 	mov.w	r0, #4294967295
 80198fa:	e033      	b.n	8019964 <__swsetup_r+0x98>
 80198fc:	0758      	lsls	r0, r3, #29
 80198fe:	d512      	bpl.n	8019926 <__swsetup_r+0x5a>
 8019900:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8019902:	b141      	cbz	r1, 8019916 <__swsetup_r+0x4a>
 8019904:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8019908:	4299      	cmp	r1, r3
 801990a:	d002      	beq.n	8019912 <__swsetup_r+0x46>
 801990c:	4628      	mov	r0, r5
 801990e:	f000 f933 	bl	8019b78 <_free_r>
 8019912:	2300      	movs	r3, #0
 8019914:	6363      	str	r3, [r4, #52]	@ 0x34
 8019916:	89a3      	ldrh	r3, [r4, #12]
 8019918:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 801991c:	81a3      	strh	r3, [r4, #12]
 801991e:	2300      	movs	r3, #0
 8019920:	6063      	str	r3, [r4, #4]
 8019922:	6923      	ldr	r3, [r4, #16]
 8019924:	6023      	str	r3, [r4, #0]
 8019926:	89a3      	ldrh	r3, [r4, #12]
 8019928:	f043 0308 	orr.w	r3, r3, #8
 801992c:	81a3      	strh	r3, [r4, #12]
 801992e:	6923      	ldr	r3, [r4, #16]
 8019930:	b94b      	cbnz	r3, 8019946 <__swsetup_r+0x7a>
 8019932:	89a3      	ldrh	r3, [r4, #12]
 8019934:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8019938:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 801993c:	d003      	beq.n	8019946 <__swsetup_r+0x7a>
 801993e:	4621      	mov	r1, r4
 8019940:	4628      	mov	r0, r5
 8019942:	f000 fc59 	bl	801a1f8 <__smakebuf_r>
 8019946:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801994a:	f013 0201 	ands.w	r2, r3, #1
 801994e:	d00a      	beq.n	8019966 <__swsetup_r+0x9a>
 8019950:	2200      	movs	r2, #0
 8019952:	60a2      	str	r2, [r4, #8]
 8019954:	6962      	ldr	r2, [r4, #20]
 8019956:	4252      	negs	r2, r2
 8019958:	61a2      	str	r2, [r4, #24]
 801995a:	6922      	ldr	r2, [r4, #16]
 801995c:	b942      	cbnz	r2, 8019970 <__swsetup_r+0xa4>
 801995e:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8019962:	d1c5      	bne.n	80198f0 <__swsetup_r+0x24>
 8019964:	bd38      	pop	{r3, r4, r5, pc}
 8019966:	0799      	lsls	r1, r3, #30
 8019968:	bf58      	it	pl
 801996a:	6962      	ldrpl	r2, [r4, #20]
 801996c:	60a2      	str	r2, [r4, #8]
 801996e:	e7f4      	b.n	801995a <__swsetup_r+0x8e>
 8019970:	2000      	movs	r0, #0
 8019972:	e7f7      	b.n	8019964 <__swsetup_r+0x98>
 8019974:	24000064 	.word	0x24000064

08019978 <memcmp>:
 8019978:	b510      	push	{r4, lr}
 801997a:	3901      	subs	r1, #1
 801997c:	4402      	add	r2, r0
 801997e:	4290      	cmp	r0, r2
 8019980:	d101      	bne.n	8019986 <memcmp+0xe>
 8019982:	2000      	movs	r0, #0
 8019984:	e005      	b.n	8019992 <memcmp+0x1a>
 8019986:	7803      	ldrb	r3, [r0, #0]
 8019988:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 801998c:	42a3      	cmp	r3, r4
 801998e:	d001      	beq.n	8019994 <memcmp+0x1c>
 8019990:	1b18      	subs	r0, r3, r4
 8019992:	bd10      	pop	{r4, pc}
 8019994:	3001      	adds	r0, #1
 8019996:	e7f2      	b.n	801997e <memcmp+0x6>

08019998 <memmove>:
 8019998:	4288      	cmp	r0, r1
 801999a:	b510      	push	{r4, lr}
 801999c:	eb01 0402 	add.w	r4, r1, r2
 80199a0:	d902      	bls.n	80199a8 <memmove+0x10>
 80199a2:	4284      	cmp	r4, r0
 80199a4:	4623      	mov	r3, r4
 80199a6:	d807      	bhi.n	80199b8 <memmove+0x20>
 80199a8:	1e43      	subs	r3, r0, #1
 80199aa:	42a1      	cmp	r1, r4
 80199ac:	d008      	beq.n	80199c0 <memmove+0x28>
 80199ae:	f811 2b01 	ldrb.w	r2, [r1], #1
 80199b2:	f803 2f01 	strb.w	r2, [r3, #1]!
 80199b6:	e7f8      	b.n	80199aa <memmove+0x12>
 80199b8:	4402      	add	r2, r0
 80199ba:	4601      	mov	r1, r0
 80199bc:	428a      	cmp	r2, r1
 80199be:	d100      	bne.n	80199c2 <memmove+0x2a>
 80199c0:	bd10      	pop	{r4, pc}
 80199c2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80199c6:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80199ca:	e7f7      	b.n	80199bc <memmove+0x24>

080199cc <memset>:
 80199cc:	4402      	add	r2, r0
 80199ce:	4603      	mov	r3, r0
 80199d0:	4293      	cmp	r3, r2
 80199d2:	d100      	bne.n	80199d6 <memset+0xa>
 80199d4:	4770      	bx	lr
 80199d6:	f803 1b01 	strb.w	r1, [r3], #1
 80199da:	e7f9      	b.n	80199d0 <memset+0x4>

080199dc <strchr>:
 80199dc:	b2c9      	uxtb	r1, r1
 80199de:	4603      	mov	r3, r0
 80199e0:	4618      	mov	r0, r3
 80199e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80199e6:	b112      	cbz	r2, 80199ee <strchr+0x12>
 80199e8:	428a      	cmp	r2, r1
 80199ea:	d1f9      	bne.n	80199e0 <strchr+0x4>
 80199ec:	4770      	bx	lr
 80199ee:	2900      	cmp	r1, #0
 80199f0:	bf18      	it	ne
 80199f2:	2000      	movne	r0, #0
 80199f4:	4770      	bx	lr

080199f6 <strncmp>:
 80199f6:	b510      	push	{r4, lr}
 80199f8:	b16a      	cbz	r2, 8019a16 <strncmp+0x20>
 80199fa:	3901      	subs	r1, #1
 80199fc:	1884      	adds	r4, r0, r2
 80199fe:	f810 2b01 	ldrb.w	r2, [r0], #1
 8019a02:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 8019a06:	429a      	cmp	r2, r3
 8019a08:	d103      	bne.n	8019a12 <strncmp+0x1c>
 8019a0a:	42a0      	cmp	r0, r4
 8019a0c:	d001      	beq.n	8019a12 <strncmp+0x1c>
 8019a0e:	2a00      	cmp	r2, #0
 8019a10:	d1f5      	bne.n	80199fe <strncmp+0x8>
 8019a12:	1ad0      	subs	r0, r2, r3
 8019a14:	bd10      	pop	{r4, pc}
 8019a16:	4610      	mov	r0, r2
 8019a18:	e7fc      	b.n	8019a14 <strncmp+0x1e>

08019a1a <strrchr>:
 8019a1a:	b538      	push	{r3, r4, r5, lr}
 8019a1c:	f011 04ff 	ands.w	r4, r1, #255	@ 0xff
 8019a20:	4603      	mov	r3, r0
 8019a22:	d10e      	bne.n	8019a42 <strrchr+0x28>
 8019a24:	4621      	mov	r1, r4
 8019a26:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8019a2a:	f7ff bfd7 	b.w	80199dc <strchr>
 8019a2e:	1c43      	adds	r3, r0, #1
 8019a30:	4605      	mov	r5, r0
 8019a32:	4621      	mov	r1, r4
 8019a34:	4618      	mov	r0, r3
 8019a36:	f7ff ffd1 	bl	80199dc <strchr>
 8019a3a:	2800      	cmp	r0, #0
 8019a3c:	d1f7      	bne.n	8019a2e <strrchr+0x14>
 8019a3e:	4628      	mov	r0, r5
 8019a40:	bd38      	pop	{r3, r4, r5, pc}
 8019a42:	2500      	movs	r5, #0
 8019a44:	e7f5      	b.n	8019a32 <strrchr+0x18>
	...

08019a48 <_close_r>:
 8019a48:	b538      	push	{r3, r4, r5, lr}
 8019a4a:	4d06      	ldr	r5, [pc, #24]	@ (8019a64 <_close_r+0x1c>)
 8019a4c:	2300      	movs	r3, #0
 8019a4e:	4604      	mov	r4, r0
 8019a50:	4608      	mov	r0, r1
 8019a52:	602b      	str	r3, [r5, #0]
 8019a54:	f7e8 f89f 	bl	8001b96 <_close>
 8019a58:	1c43      	adds	r3, r0, #1
 8019a5a:	d102      	bne.n	8019a62 <_close_r+0x1a>
 8019a5c:	682b      	ldr	r3, [r5, #0]
 8019a5e:	b103      	cbz	r3, 8019a62 <_close_r+0x1a>
 8019a60:	6023      	str	r3, [r4, #0]
 8019a62:	bd38      	pop	{r3, r4, r5, pc}
 8019a64:	2400211c 	.word	0x2400211c

08019a68 <_lseek_r>:
 8019a68:	b538      	push	{r3, r4, r5, lr}
 8019a6a:	4d07      	ldr	r5, [pc, #28]	@ (8019a88 <_lseek_r+0x20>)
 8019a6c:	4604      	mov	r4, r0
 8019a6e:	4608      	mov	r0, r1
 8019a70:	4611      	mov	r1, r2
 8019a72:	2200      	movs	r2, #0
 8019a74:	602a      	str	r2, [r5, #0]
 8019a76:	461a      	mov	r2, r3
 8019a78:	f7e8 f8b4 	bl	8001be4 <_lseek>
 8019a7c:	1c43      	adds	r3, r0, #1
 8019a7e:	d102      	bne.n	8019a86 <_lseek_r+0x1e>
 8019a80:	682b      	ldr	r3, [r5, #0]
 8019a82:	b103      	cbz	r3, 8019a86 <_lseek_r+0x1e>
 8019a84:	6023      	str	r3, [r4, #0]
 8019a86:	bd38      	pop	{r3, r4, r5, pc}
 8019a88:	2400211c 	.word	0x2400211c

08019a8c <_read_r>:
 8019a8c:	b538      	push	{r3, r4, r5, lr}
 8019a8e:	4d07      	ldr	r5, [pc, #28]	@ (8019aac <_read_r+0x20>)
 8019a90:	4604      	mov	r4, r0
 8019a92:	4608      	mov	r0, r1
 8019a94:	4611      	mov	r1, r2
 8019a96:	2200      	movs	r2, #0
 8019a98:	602a      	str	r2, [r5, #0]
 8019a9a:	461a      	mov	r2, r3
 8019a9c:	f7e8 f842 	bl	8001b24 <_read>
 8019aa0:	1c43      	adds	r3, r0, #1
 8019aa2:	d102      	bne.n	8019aaa <_read_r+0x1e>
 8019aa4:	682b      	ldr	r3, [r5, #0]
 8019aa6:	b103      	cbz	r3, 8019aaa <_read_r+0x1e>
 8019aa8:	6023      	str	r3, [r4, #0]
 8019aaa:	bd38      	pop	{r3, r4, r5, pc}
 8019aac:	2400211c 	.word	0x2400211c

08019ab0 <_sbrk_r>:
 8019ab0:	b538      	push	{r3, r4, r5, lr}
 8019ab2:	4d06      	ldr	r5, [pc, #24]	@ (8019acc <_sbrk_r+0x1c>)
 8019ab4:	2300      	movs	r3, #0
 8019ab6:	4604      	mov	r4, r0
 8019ab8:	4608      	mov	r0, r1
 8019aba:	602b      	str	r3, [r5, #0]
 8019abc:	f7e8 f8a0 	bl	8001c00 <_sbrk>
 8019ac0:	1c43      	adds	r3, r0, #1
 8019ac2:	d102      	bne.n	8019aca <_sbrk_r+0x1a>
 8019ac4:	682b      	ldr	r3, [r5, #0]
 8019ac6:	b103      	cbz	r3, 8019aca <_sbrk_r+0x1a>
 8019ac8:	6023      	str	r3, [r4, #0]
 8019aca:	bd38      	pop	{r3, r4, r5, pc}
 8019acc:	2400211c 	.word	0x2400211c

08019ad0 <_write_r>:
 8019ad0:	b538      	push	{r3, r4, r5, lr}
 8019ad2:	4d07      	ldr	r5, [pc, #28]	@ (8019af0 <_write_r+0x20>)
 8019ad4:	4604      	mov	r4, r0
 8019ad6:	4608      	mov	r0, r1
 8019ad8:	4611      	mov	r1, r2
 8019ada:	2200      	movs	r2, #0
 8019adc:	602a      	str	r2, [r5, #0]
 8019ade:	461a      	mov	r2, r3
 8019ae0:	f7e8 f83d 	bl	8001b5e <_write>
 8019ae4:	1c43      	adds	r3, r0, #1
 8019ae6:	d102      	bne.n	8019aee <_write_r+0x1e>
 8019ae8:	682b      	ldr	r3, [r5, #0]
 8019aea:	b103      	cbz	r3, 8019aee <_write_r+0x1e>
 8019aec:	6023      	str	r3, [r4, #0]
 8019aee:	bd38      	pop	{r3, r4, r5, pc}
 8019af0:	2400211c 	.word	0x2400211c

08019af4 <__errno>:
 8019af4:	4b01      	ldr	r3, [pc, #4]	@ (8019afc <__errno+0x8>)
 8019af6:	6818      	ldr	r0, [r3, #0]
 8019af8:	4770      	bx	lr
 8019afa:	bf00      	nop
 8019afc:	24000064 	.word	0x24000064

08019b00 <__libc_init_array>:
 8019b00:	b570      	push	{r4, r5, r6, lr}
 8019b02:	4d0d      	ldr	r5, [pc, #52]	@ (8019b38 <__libc_init_array+0x38>)
 8019b04:	4c0d      	ldr	r4, [pc, #52]	@ (8019b3c <__libc_init_array+0x3c>)
 8019b06:	1b64      	subs	r4, r4, r5
 8019b08:	10a4      	asrs	r4, r4, #2
 8019b0a:	2600      	movs	r6, #0
 8019b0c:	42a6      	cmp	r6, r4
 8019b0e:	d109      	bne.n	8019b24 <__libc_init_array+0x24>
 8019b10:	4d0b      	ldr	r5, [pc, #44]	@ (8019b40 <__libc_init_array+0x40>)
 8019b12:	4c0c      	ldr	r4, [pc, #48]	@ (8019b44 <__libc_init_array+0x44>)
 8019b14:	f000 fc46 	bl	801a3a4 <_init>
 8019b18:	1b64      	subs	r4, r4, r5
 8019b1a:	10a4      	asrs	r4, r4, #2
 8019b1c:	2600      	movs	r6, #0
 8019b1e:	42a6      	cmp	r6, r4
 8019b20:	d105      	bne.n	8019b2e <__libc_init_array+0x2e>
 8019b22:	bd70      	pop	{r4, r5, r6, pc}
 8019b24:	f855 3b04 	ldr.w	r3, [r5], #4
 8019b28:	4798      	blx	r3
 8019b2a:	3601      	adds	r6, #1
 8019b2c:	e7ee      	b.n	8019b0c <__libc_init_array+0xc>
 8019b2e:	f855 3b04 	ldr.w	r3, [r5], #4
 8019b32:	4798      	blx	r3
 8019b34:	3601      	adds	r6, #1
 8019b36:	e7f2      	b.n	8019b1e <__libc_init_array+0x1e>
 8019b38:	0801c39c 	.word	0x0801c39c
 8019b3c:	0801c39c 	.word	0x0801c39c
 8019b40:	0801c39c 	.word	0x0801c39c
 8019b44:	0801c3a0 	.word	0x0801c3a0

08019b48 <__retarget_lock_init_recursive>:
 8019b48:	4770      	bx	lr

08019b4a <__retarget_lock_acquire_recursive>:
 8019b4a:	4770      	bx	lr

08019b4c <__retarget_lock_release_recursive>:
 8019b4c:	4770      	bx	lr

08019b4e <memcpy>:
 8019b4e:	440a      	add	r2, r1
 8019b50:	4291      	cmp	r1, r2
 8019b52:	f100 33ff 	add.w	r3, r0, #4294967295
 8019b56:	d100      	bne.n	8019b5a <memcpy+0xc>
 8019b58:	4770      	bx	lr
 8019b5a:	b510      	push	{r4, lr}
 8019b5c:	f811 4b01 	ldrb.w	r4, [r1], #1
 8019b60:	f803 4f01 	strb.w	r4, [r3, #1]!
 8019b64:	4291      	cmp	r1, r2
 8019b66:	d1f9      	bne.n	8019b5c <memcpy+0xe>
 8019b68:	bd10      	pop	{r4, pc}

08019b6a <abort>:
 8019b6a:	b508      	push	{r3, lr}
 8019b6c:	2006      	movs	r0, #6
 8019b6e:	f000 fbdb 	bl	801a328 <raise>
 8019b72:	2001      	movs	r0, #1
 8019b74:	f7e7 ffcb 	bl	8001b0e <_exit>

08019b78 <_free_r>:
 8019b78:	b538      	push	{r3, r4, r5, lr}
 8019b7a:	4605      	mov	r5, r0
 8019b7c:	2900      	cmp	r1, #0
 8019b7e:	d041      	beq.n	8019c04 <_free_r+0x8c>
 8019b80:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8019b84:	1f0c      	subs	r4, r1, #4
 8019b86:	2b00      	cmp	r3, #0
 8019b88:	bfb8      	it	lt
 8019b8a:	18e4      	addlt	r4, r4, r3
 8019b8c:	f7ff fbd6 	bl	801933c <__malloc_lock>
 8019b90:	4a1d      	ldr	r2, [pc, #116]	@ (8019c08 <_free_r+0x90>)
 8019b92:	6813      	ldr	r3, [r2, #0]
 8019b94:	b933      	cbnz	r3, 8019ba4 <_free_r+0x2c>
 8019b96:	6063      	str	r3, [r4, #4]
 8019b98:	6014      	str	r4, [r2, #0]
 8019b9a:	4628      	mov	r0, r5
 8019b9c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8019ba0:	f7ff bbd2 	b.w	8019348 <__malloc_unlock>
 8019ba4:	42a3      	cmp	r3, r4
 8019ba6:	d908      	bls.n	8019bba <_free_r+0x42>
 8019ba8:	6820      	ldr	r0, [r4, #0]
 8019baa:	1821      	adds	r1, r4, r0
 8019bac:	428b      	cmp	r3, r1
 8019bae:	bf01      	itttt	eq
 8019bb0:	6819      	ldreq	r1, [r3, #0]
 8019bb2:	685b      	ldreq	r3, [r3, #4]
 8019bb4:	1809      	addeq	r1, r1, r0
 8019bb6:	6021      	streq	r1, [r4, #0]
 8019bb8:	e7ed      	b.n	8019b96 <_free_r+0x1e>
 8019bba:	461a      	mov	r2, r3
 8019bbc:	685b      	ldr	r3, [r3, #4]
 8019bbe:	b10b      	cbz	r3, 8019bc4 <_free_r+0x4c>
 8019bc0:	42a3      	cmp	r3, r4
 8019bc2:	d9fa      	bls.n	8019bba <_free_r+0x42>
 8019bc4:	6811      	ldr	r1, [r2, #0]
 8019bc6:	1850      	adds	r0, r2, r1
 8019bc8:	42a0      	cmp	r0, r4
 8019bca:	d10b      	bne.n	8019be4 <_free_r+0x6c>
 8019bcc:	6820      	ldr	r0, [r4, #0]
 8019bce:	4401      	add	r1, r0
 8019bd0:	1850      	adds	r0, r2, r1
 8019bd2:	4283      	cmp	r3, r0
 8019bd4:	6011      	str	r1, [r2, #0]
 8019bd6:	d1e0      	bne.n	8019b9a <_free_r+0x22>
 8019bd8:	6818      	ldr	r0, [r3, #0]
 8019bda:	685b      	ldr	r3, [r3, #4]
 8019bdc:	6053      	str	r3, [r2, #4]
 8019bde:	4408      	add	r0, r1
 8019be0:	6010      	str	r0, [r2, #0]
 8019be2:	e7da      	b.n	8019b9a <_free_r+0x22>
 8019be4:	d902      	bls.n	8019bec <_free_r+0x74>
 8019be6:	230c      	movs	r3, #12
 8019be8:	602b      	str	r3, [r5, #0]
 8019bea:	e7d6      	b.n	8019b9a <_free_r+0x22>
 8019bec:	6820      	ldr	r0, [r4, #0]
 8019bee:	1821      	adds	r1, r4, r0
 8019bf0:	428b      	cmp	r3, r1
 8019bf2:	bf04      	itt	eq
 8019bf4:	6819      	ldreq	r1, [r3, #0]
 8019bf6:	685b      	ldreq	r3, [r3, #4]
 8019bf8:	6063      	str	r3, [r4, #4]
 8019bfa:	bf04      	itt	eq
 8019bfc:	1809      	addeq	r1, r1, r0
 8019bfe:	6021      	streq	r1, [r4, #0]
 8019c00:	6054      	str	r4, [r2, #4]
 8019c02:	e7ca      	b.n	8019b9a <_free_r+0x22>
 8019c04:	bd38      	pop	{r3, r4, r5, pc}
 8019c06:	bf00      	nop
 8019c08:	24001fdc 	.word	0x24001fdc

08019c0c <__sfputc_r>:
 8019c0c:	6893      	ldr	r3, [r2, #8]
 8019c0e:	3b01      	subs	r3, #1
 8019c10:	2b00      	cmp	r3, #0
 8019c12:	b410      	push	{r4}
 8019c14:	6093      	str	r3, [r2, #8]
 8019c16:	da08      	bge.n	8019c2a <__sfputc_r+0x1e>
 8019c18:	6994      	ldr	r4, [r2, #24]
 8019c1a:	42a3      	cmp	r3, r4
 8019c1c:	db01      	blt.n	8019c22 <__sfputc_r+0x16>
 8019c1e:	290a      	cmp	r1, #10
 8019c20:	d103      	bne.n	8019c2a <__sfputc_r+0x1e>
 8019c22:	f85d 4b04 	ldr.w	r4, [sp], #4
 8019c26:	f7ff be12 	b.w	801984e <__swbuf_r>
 8019c2a:	6813      	ldr	r3, [r2, #0]
 8019c2c:	1c58      	adds	r0, r3, #1
 8019c2e:	6010      	str	r0, [r2, #0]
 8019c30:	7019      	strb	r1, [r3, #0]
 8019c32:	4608      	mov	r0, r1
 8019c34:	f85d 4b04 	ldr.w	r4, [sp], #4
 8019c38:	4770      	bx	lr

08019c3a <__sfputs_r>:
 8019c3a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8019c3c:	4606      	mov	r6, r0
 8019c3e:	460f      	mov	r7, r1
 8019c40:	4614      	mov	r4, r2
 8019c42:	18d5      	adds	r5, r2, r3
 8019c44:	42ac      	cmp	r4, r5
 8019c46:	d101      	bne.n	8019c4c <__sfputs_r+0x12>
 8019c48:	2000      	movs	r0, #0
 8019c4a:	e007      	b.n	8019c5c <__sfputs_r+0x22>
 8019c4c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8019c50:	463a      	mov	r2, r7
 8019c52:	4630      	mov	r0, r6
 8019c54:	f7ff ffda 	bl	8019c0c <__sfputc_r>
 8019c58:	1c43      	adds	r3, r0, #1
 8019c5a:	d1f3      	bne.n	8019c44 <__sfputs_r+0xa>
 8019c5c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08019c60 <_vfiprintf_r>:
 8019c60:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019c64:	460d      	mov	r5, r1
 8019c66:	b09d      	sub	sp, #116	@ 0x74
 8019c68:	4614      	mov	r4, r2
 8019c6a:	4698      	mov	r8, r3
 8019c6c:	4606      	mov	r6, r0
 8019c6e:	b118      	cbz	r0, 8019c78 <_vfiprintf_r+0x18>
 8019c70:	6a03      	ldr	r3, [r0, #32]
 8019c72:	b90b      	cbnz	r3, 8019c78 <_vfiprintf_r+0x18>
 8019c74:	f7ff fd58 	bl	8019728 <__sinit>
 8019c78:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8019c7a:	07d9      	lsls	r1, r3, #31
 8019c7c:	d405      	bmi.n	8019c8a <_vfiprintf_r+0x2a>
 8019c7e:	89ab      	ldrh	r3, [r5, #12]
 8019c80:	059a      	lsls	r2, r3, #22
 8019c82:	d402      	bmi.n	8019c8a <_vfiprintf_r+0x2a>
 8019c84:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8019c86:	f7ff ff60 	bl	8019b4a <__retarget_lock_acquire_recursive>
 8019c8a:	89ab      	ldrh	r3, [r5, #12]
 8019c8c:	071b      	lsls	r3, r3, #28
 8019c8e:	d501      	bpl.n	8019c94 <_vfiprintf_r+0x34>
 8019c90:	692b      	ldr	r3, [r5, #16]
 8019c92:	b99b      	cbnz	r3, 8019cbc <_vfiprintf_r+0x5c>
 8019c94:	4629      	mov	r1, r5
 8019c96:	4630      	mov	r0, r6
 8019c98:	f7ff fe18 	bl	80198cc <__swsetup_r>
 8019c9c:	b170      	cbz	r0, 8019cbc <_vfiprintf_r+0x5c>
 8019c9e:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8019ca0:	07dc      	lsls	r4, r3, #31
 8019ca2:	d504      	bpl.n	8019cae <_vfiprintf_r+0x4e>
 8019ca4:	f04f 30ff 	mov.w	r0, #4294967295
 8019ca8:	b01d      	add	sp, #116	@ 0x74
 8019caa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8019cae:	89ab      	ldrh	r3, [r5, #12]
 8019cb0:	0598      	lsls	r0, r3, #22
 8019cb2:	d4f7      	bmi.n	8019ca4 <_vfiprintf_r+0x44>
 8019cb4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8019cb6:	f7ff ff49 	bl	8019b4c <__retarget_lock_release_recursive>
 8019cba:	e7f3      	b.n	8019ca4 <_vfiprintf_r+0x44>
 8019cbc:	2300      	movs	r3, #0
 8019cbe:	9309      	str	r3, [sp, #36]	@ 0x24
 8019cc0:	2320      	movs	r3, #32
 8019cc2:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8019cc6:	f8cd 800c 	str.w	r8, [sp, #12]
 8019cca:	2330      	movs	r3, #48	@ 0x30
 8019ccc:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8019e7c <_vfiprintf_r+0x21c>
 8019cd0:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8019cd4:	f04f 0901 	mov.w	r9, #1
 8019cd8:	4623      	mov	r3, r4
 8019cda:	469a      	mov	sl, r3
 8019cdc:	f813 2b01 	ldrb.w	r2, [r3], #1
 8019ce0:	b10a      	cbz	r2, 8019ce6 <_vfiprintf_r+0x86>
 8019ce2:	2a25      	cmp	r2, #37	@ 0x25
 8019ce4:	d1f9      	bne.n	8019cda <_vfiprintf_r+0x7a>
 8019ce6:	ebba 0b04 	subs.w	fp, sl, r4
 8019cea:	d00b      	beq.n	8019d04 <_vfiprintf_r+0xa4>
 8019cec:	465b      	mov	r3, fp
 8019cee:	4622      	mov	r2, r4
 8019cf0:	4629      	mov	r1, r5
 8019cf2:	4630      	mov	r0, r6
 8019cf4:	f7ff ffa1 	bl	8019c3a <__sfputs_r>
 8019cf8:	3001      	adds	r0, #1
 8019cfa:	f000 80a7 	beq.w	8019e4c <_vfiprintf_r+0x1ec>
 8019cfe:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8019d00:	445a      	add	r2, fp
 8019d02:	9209      	str	r2, [sp, #36]	@ 0x24
 8019d04:	f89a 3000 	ldrb.w	r3, [sl]
 8019d08:	2b00      	cmp	r3, #0
 8019d0a:	f000 809f 	beq.w	8019e4c <_vfiprintf_r+0x1ec>
 8019d0e:	2300      	movs	r3, #0
 8019d10:	f04f 32ff 	mov.w	r2, #4294967295
 8019d14:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8019d18:	f10a 0a01 	add.w	sl, sl, #1
 8019d1c:	9304      	str	r3, [sp, #16]
 8019d1e:	9307      	str	r3, [sp, #28]
 8019d20:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8019d24:	931a      	str	r3, [sp, #104]	@ 0x68
 8019d26:	4654      	mov	r4, sl
 8019d28:	2205      	movs	r2, #5
 8019d2a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8019d2e:	4853      	ldr	r0, [pc, #332]	@ (8019e7c <_vfiprintf_r+0x21c>)
 8019d30:	f7e6 fad6 	bl	80002e0 <memchr>
 8019d34:	9a04      	ldr	r2, [sp, #16]
 8019d36:	b9d8      	cbnz	r0, 8019d70 <_vfiprintf_r+0x110>
 8019d38:	06d1      	lsls	r1, r2, #27
 8019d3a:	bf44      	itt	mi
 8019d3c:	2320      	movmi	r3, #32
 8019d3e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8019d42:	0713      	lsls	r3, r2, #28
 8019d44:	bf44      	itt	mi
 8019d46:	232b      	movmi	r3, #43	@ 0x2b
 8019d48:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8019d4c:	f89a 3000 	ldrb.w	r3, [sl]
 8019d50:	2b2a      	cmp	r3, #42	@ 0x2a
 8019d52:	d015      	beq.n	8019d80 <_vfiprintf_r+0x120>
 8019d54:	9a07      	ldr	r2, [sp, #28]
 8019d56:	4654      	mov	r4, sl
 8019d58:	2000      	movs	r0, #0
 8019d5a:	f04f 0c0a 	mov.w	ip, #10
 8019d5e:	4621      	mov	r1, r4
 8019d60:	f811 3b01 	ldrb.w	r3, [r1], #1
 8019d64:	3b30      	subs	r3, #48	@ 0x30
 8019d66:	2b09      	cmp	r3, #9
 8019d68:	d94b      	bls.n	8019e02 <_vfiprintf_r+0x1a2>
 8019d6a:	b1b0      	cbz	r0, 8019d9a <_vfiprintf_r+0x13a>
 8019d6c:	9207      	str	r2, [sp, #28]
 8019d6e:	e014      	b.n	8019d9a <_vfiprintf_r+0x13a>
 8019d70:	eba0 0308 	sub.w	r3, r0, r8
 8019d74:	fa09 f303 	lsl.w	r3, r9, r3
 8019d78:	4313      	orrs	r3, r2
 8019d7a:	9304      	str	r3, [sp, #16]
 8019d7c:	46a2      	mov	sl, r4
 8019d7e:	e7d2      	b.n	8019d26 <_vfiprintf_r+0xc6>
 8019d80:	9b03      	ldr	r3, [sp, #12]
 8019d82:	1d19      	adds	r1, r3, #4
 8019d84:	681b      	ldr	r3, [r3, #0]
 8019d86:	9103      	str	r1, [sp, #12]
 8019d88:	2b00      	cmp	r3, #0
 8019d8a:	bfbb      	ittet	lt
 8019d8c:	425b      	neglt	r3, r3
 8019d8e:	f042 0202 	orrlt.w	r2, r2, #2
 8019d92:	9307      	strge	r3, [sp, #28]
 8019d94:	9307      	strlt	r3, [sp, #28]
 8019d96:	bfb8      	it	lt
 8019d98:	9204      	strlt	r2, [sp, #16]
 8019d9a:	7823      	ldrb	r3, [r4, #0]
 8019d9c:	2b2e      	cmp	r3, #46	@ 0x2e
 8019d9e:	d10a      	bne.n	8019db6 <_vfiprintf_r+0x156>
 8019da0:	7863      	ldrb	r3, [r4, #1]
 8019da2:	2b2a      	cmp	r3, #42	@ 0x2a
 8019da4:	d132      	bne.n	8019e0c <_vfiprintf_r+0x1ac>
 8019da6:	9b03      	ldr	r3, [sp, #12]
 8019da8:	1d1a      	adds	r2, r3, #4
 8019daa:	681b      	ldr	r3, [r3, #0]
 8019dac:	9203      	str	r2, [sp, #12]
 8019dae:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8019db2:	3402      	adds	r4, #2
 8019db4:	9305      	str	r3, [sp, #20]
 8019db6:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8019e8c <_vfiprintf_r+0x22c>
 8019dba:	7821      	ldrb	r1, [r4, #0]
 8019dbc:	2203      	movs	r2, #3
 8019dbe:	4650      	mov	r0, sl
 8019dc0:	f7e6 fa8e 	bl	80002e0 <memchr>
 8019dc4:	b138      	cbz	r0, 8019dd6 <_vfiprintf_r+0x176>
 8019dc6:	9b04      	ldr	r3, [sp, #16]
 8019dc8:	eba0 000a 	sub.w	r0, r0, sl
 8019dcc:	2240      	movs	r2, #64	@ 0x40
 8019dce:	4082      	lsls	r2, r0
 8019dd0:	4313      	orrs	r3, r2
 8019dd2:	3401      	adds	r4, #1
 8019dd4:	9304      	str	r3, [sp, #16]
 8019dd6:	f814 1b01 	ldrb.w	r1, [r4], #1
 8019dda:	4829      	ldr	r0, [pc, #164]	@ (8019e80 <_vfiprintf_r+0x220>)
 8019ddc:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8019de0:	2206      	movs	r2, #6
 8019de2:	f7e6 fa7d 	bl	80002e0 <memchr>
 8019de6:	2800      	cmp	r0, #0
 8019de8:	d03f      	beq.n	8019e6a <_vfiprintf_r+0x20a>
 8019dea:	4b26      	ldr	r3, [pc, #152]	@ (8019e84 <_vfiprintf_r+0x224>)
 8019dec:	bb1b      	cbnz	r3, 8019e36 <_vfiprintf_r+0x1d6>
 8019dee:	9b03      	ldr	r3, [sp, #12]
 8019df0:	3307      	adds	r3, #7
 8019df2:	f023 0307 	bic.w	r3, r3, #7
 8019df6:	3308      	adds	r3, #8
 8019df8:	9303      	str	r3, [sp, #12]
 8019dfa:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8019dfc:	443b      	add	r3, r7
 8019dfe:	9309      	str	r3, [sp, #36]	@ 0x24
 8019e00:	e76a      	b.n	8019cd8 <_vfiprintf_r+0x78>
 8019e02:	fb0c 3202 	mla	r2, ip, r2, r3
 8019e06:	460c      	mov	r4, r1
 8019e08:	2001      	movs	r0, #1
 8019e0a:	e7a8      	b.n	8019d5e <_vfiprintf_r+0xfe>
 8019e0c:	2300      	movs	r3, #0
 8019e0e:	3401      	adds	r4, #1
 8019e10:	9305      	str	r3, [sp, #20]
 8019e12:	4619      	mov	r1, r3
 8019e14:	f04f 0c0a 	mov.w	ip, #10
 8019e18:	4620      	mov	r0, r4
 8019e1a:	f810 2b01 	ldrb.w	r2, [r0], #1
 8019e1e:	3a30      	subs	r2, #48	@ 0x30
 8019e20:	2a09      	cmp	r2, #9
 8019e22:	d903      	bls.n	8019e2c <_vfiprintf_r+0x1cc>
 8019e24:	2b00      	cmp	r3, #0
 8019e26:	d0c6      	beq.n	8019db6 <_vfiprintf_r+0x156>
 8019e28:	9105      	str	r1, [sp, #20]
 8019e2a:	e7c4      	b.n	8019db6 <_vfiprintf_r+0x156>
 8019e2c:	fb0c 2101 	mla	r1, ip, r1, r2
 8019e30:	4604      	mov	r4, r0
 8019e32:	2301      	movs	r3, #1
 8019e34:	e7f0      	b.n	8019e18 <_vfiprintf_r+0x1b8>
 8019e36:	ab03      	add	r3, sp, #12
 8019e38:	9300      	str	r3, [sp, #0]
 8019e3a:	462a      	mov	r2, r5
 8019e3c:	4b12      	ldr	r3, [pc, #72]	@ (8019e88 <_vfiprintf_r+0x228>)
 8019e3e:	a904      	add	r1, sp, #16
 8019e40:	4630      	mov	r0, r6
 8019e42:	f3af 8000 	nop.w
 8019e46:	4607      	mov	r7, r0
 8019e48:	1c78      	adds	r0, r7, #1
 8019e4a:	d1d6      	bne.n	8019dfa <_vfiprintf_r+0x19a>
 8019e4c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8019e4e:	07d9      	lsls	r1, r3, #31
 8019e50:	d405      	bmi.n	8019e5e <_vfiprintf_r+0x1fe>
 8019e52:	89ab      	ldrh	r3, [r5, #12]
 8019e54:	059a      	lsls	r2, r3, #22
 8019e56:	d402      	bmi.n	8019e5e <_vfiprintf_r+0x1fe>
 8019e58:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8019e5a:	f7ff fe77 	bl	8019b4c <__retarget_lock_release_recursive>
 8019e5e:	89ab      	ldrh	r3, [r5, #12]
 8019e60:	065b      	lsls	r3, r3, #25
 8019e62:	f53f af1f 	bmi.w	8019ca4 <_vfiprintf_r+0x44>
 8019e66:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8019e68:	e71e      	b.n	8019ca8 <_vfiprintf_r+0x48>
 8019e6a:	ab03      	add	r3, sp, #12
 8019e6c:	9300      	str	r3, [sp, #0]
 8019e6e:	462a      	mov	r2, r5
 8019e70:	4b05      	ldr	r3, [pc, #20]	@ (8019e88 <_vfiprintf_r+0x228>)
 8019e72:	a904      	add	r1, sp, #16
 8019e74:	4630      	mov	r0, r6
 8019e76:	f000 f879 	bl	8019f6c <_printf_i>
 8019e7a:	e7e4      	b.n	8019e46 <_vfiprintf_r+0x1e6>
 8019e7c:	0801c360 	.word	0x0801c360
 8019e80:	0801c36a 	.word	0x0801c36a
 8019e84:	00000000 	.word	0x00000000
 8019e88:	08019c3b 	.word	0x08019c3b
 8019e8c:	0801c366 	.word	0x0801c366

08019e90 <_printf_common>:
 8019e90:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8019e94:	4616      	mov	r6, r2
 8019e96:	4698      	mov	r8, r3
 8019e98:	688a      	ldr	r2, [r1, #8]
 8019e9a:	690b      	ldr	r3, [r1, #16]
 8019e9c:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8019ea0:	4293      	cmp	r3, r2
 8019ea2:	bfb8      	it	lt
 8019ea4:	4613      	movlt	r3, r2
 8019ea6:	6033      	str	r3, [r6, #0]
 8019ea8:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8019eac:	4607      	mov	r7, r0
 8019eae:	460c      	mov	r4, r1
 8019eb0:	b10a      	cbz	r2, 8019eb6 <_printf_common+0x26>
 8019eb2:	3301      	adds	r3, #1
 8019eb4:	6033      	str	r3, [r6, #0]
 8019eb6:	6823      	ldr	r3, [r4, #0]
 8019eb8:	0699      	lsls	r1, r3, #26
 8019eba:	bf42      	ittt	mi
 8019ebc:	6833      	ldrmi	r3, [r6, #0]
 8019ebe:	3302      	addmi	r3, #2
 8019ec0:	6033      	strmi	r3, [r6, #0]
 8019ec2:	6825      	ldr	r5, [r4, #0]
 8019ec4:	f015 0506 	ands.w	r5, r5, #6
 8019ec8:	d106      	bne.n	8019ed8 <_printf_common+0x48>
 8019eca:	f104 0a19 	add.w	sl, r4, #25
 8019ece:	68e3      	ldr	r3, [r4, #12]
 8019ed0:	6832      	ldr	r2, [r6, #0]
 8019ed2:	1a9b      	subs	r3, r3, r2
 8019ed4:	42ab      	cmp	r3, r5
 8019ed6:	dc26      	bgt.n	8019f26 <_printf_common+0x96>
 8019ed8:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8019edc:	6822      	ldr	r2, [r4, #0]
 8019ede:	3b00      	subs	r3, #0
 8019ee0:	bf18      	it	ne
 8019ee2:	2301      	movne	r3, #1
 8019ee4:	0692      	lsls	r2, r2, #26
 8019ee6:	d42b      	bmi.n	8019f40 <_printf_common+0xb0>
 8019ee8:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8019eec:	4641      	mov	r1, r8
 8019eee:	4638      	mov	r0, r7
 8019ef0:	47c8      	blx	r9
 8019ef2:	3001      	adds	r0, #1
 8019ef4:	d01e      	beq.n	8019f34 <_printf_common+0xa4>
 8019ef6:	6823      	ldr	r3, [r4, #0]
 8019ef8:	6922      	ldr	r2, [r4, #16]
 8019efa:	f003 0306 	and.w	r3, r3, #6
 8019efe:	2b04      	cmp	r3, #4
 8019f00:	bf02      	ittt	eq
 8019f02:	68e5      	ldreq	r5, [r4, #12]
 8019f04:	6833      	ldreq	r3, [r6, #0]
 8019f06:	1aed      	subeq	r5, r5, r3
 8019f08:	68a3      	ldr	r3, [r4, #8]
 8019f0a:	bf0c      	ite	eq
 8019f0c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8019f10:	2500      	movne	r5, #0
 8019f12:	4293      	cmp	r3, r2
 8019f14:	bfc4      	itt	gt
 8019f16:	1a9b      	subgt	r3, r3, r2
 8019f18:	18ed      	addgt	r5, r5, r3
 8019f1a:	2600      	movs	r6, #0
 8019f1c:	341a      	adds	r4, #26
 8019f1e:	42b5      	cmp	r5, r6
 8019f20:	d11a      	bne.n	8019f58 <_printf_common+0xc8>
 8019f22:	2000      	movs	r0, #0
 8019f24:	e008      	b.n	8019f38 <_printf_common+0xa8>
 8019f26:	2301      	movs	r3, #1
 8019f28:	4652      	mov	r2, sl
 8019f2a:	4641      	mov	r1, r8
 8019f2c:	4638      	mov	r0, r7
 8019f2e:	47c8      	blx	r9
 8019f30:	3001      	adds	r0, #1
 8019f32:	d103      	bne.n	8019f3c <_printf_common+0xac>
 8019f34:	f04f 30ff 	mov.w	r0, #4294967295
 8019f38:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8019f3c:	3501      	adds	r5, #1
 8019f3e:	e7c6      	b.n	8019ece <_printf_common+0x3e>
 8019f40:	18e1      	adds	r1, r4, r3
 8019f42:	1c5a      	adds	r2, r3, #1
 8019f44:	2030      	movs	r0, #48	@ 0x30
 8019f46:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8019f4a:	4422      	add	r2, r4
 8019f4c:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8019f50:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8019f54:	3302      	adds	r3, #2
 8019f56:	e7c7      	b.n	8019ee8 <_printf_common+0x58>
 8019f58:	2301      	movs	r3, #1
 8019f5a:	4622      	mov	r2, r4
 8019f5c:	4641      	mov	r1, r8
 8019f5e:	4638      	mov	r0, r7
 8019f60:	47c8      	blx	r9
 8019f62:	3001      	adds	r0, #1
 8019f64:	d0e6      	beq.n	8019f34 <_printf_common+0xa4>
 8019f66:	3601      	adds	r6, #1
 8019f68:	e7d9      	b.n	8019f1e <_printf_common+0x8e>
	...

08019f6c <_printf_i>:
 8019f6c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8019f70:	7e0f      	ldrb	r7, [r1, #24]
 8019f72:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8019f74:	2f78      	cmp	r7, #120	@ 0x78
 8019f76:	4691      	mov	r9, r2
 8019f78:	4680      	mov	r8, r0
 8019f7a:	460c      	mov	r4, r1
 8019f7c:	469a      	mov	sl, r3
 8019f7e:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8019f82:	d807      	bhi.n	8019f94 <_printf_i+0x28>
 8019f84:	2f62      	cmp	r7, #98	@ 0x62
 8019f86:	d80a      	bhi.n	8019f9e <_printf_i+0x32>
 8019f88:	2f00      	cmp	r7, #0
 8019f8a:	f000 80d2 	beq.w	801a132 <_printf_i+0x1c6>
 8019f8e:	2f58      	cmp	r7, #88	@ 0x58
 8019f90:	f000 80b9 	beq.w	801a106 <_printf_i+0x19a>
 8019f94:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8019f98:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8019f9c:	e03a      	b.n	801a014 <_printf_i+0xa8>
 8019f9e:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8019fa2:	2b15      	cmp	r3, #21
 8019fa4:	d8f6      	bhi.n	8019f94 <_printf_i+0x28>
 8019fa6:	a101      	add	r1, pc, #4	@ (adr r1, 8019fac <_printf_i+0x40>)
 8019fa8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8019fac:	0801a005 	.word	0x0801a005
 8019fb0:	0801a019 	.word	0x0801a019
 8019fb4:	08019f95 	.word	0x08019f95
 8019fb8:	08019f95 	.word	0x08019f95
 8019fbc:	08019f95 	.word	0x08019f95
 8019fc0:	08019f95 	.word	0x08019f95
 8019fc4:	0801a019 	.word	0x0801a019
 8019fc8:	08019f95 	.word	0x08019f95
 8019fcc:	08019f95 	.word	0x08019f95
 8019fd0:	08019f95 	.word	0x08019f95
 8019fd4:	08019f95 	.word	0x08019f95
 8019fd8:	0801a119 	.word	0x0801a119
 8019fdc:	0801a043 	.word	0x0801a043
 8019fe0:	0801a0d3 	.word	0x0801a0d3
 8019fe4:	08019f95 	.word	0x08019f95
 8019fe8:	08019f95 	.word	0x08019f95
 8019fec:	0801a13b 	.word	0x0801a13b
 8019ff0:	08019f95 	.word	0x08019f95
 8019ff4:	0801a043 	.word	0x0801a043
 8019ff8:	08019f95 	.word	0x08019f95
 8019ffc:	08019f95 	.word	0x08019f95
 801a000:	0801a0db 	.word	0x0801a0db
 801a004:	6833      	ldr	r3, [r6, #0]
 801a006:	1d1a      	adds	r2, r3, #4
 801a008:	681b      	ldr	r3, [r3, #0]
 801a00a:	6032      	str	r2, [r6, #0]
 801a00c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 801a010:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 801a014:	2301      	movs	r3, #1
 801a016:	e09d      	b.n	801a154 <_printf_i+0x1e8>
 801a018:	6833      	ldr	r3, [r6, #0]
 801a01a:	6820      	ldr	r0, [r4, #0]
 801a01c:	1d19      	adds	r1, r3, #4
 801a01e:	6031      	str	r1, [r6, #0]
 801a020:	0606      	lsls	r6, r0, #24
 801a022:	d501      	bpl.n	801a028 <_printf_i+0xbc>
 801a024:	681d      	ldr	r5, [r3, #0]
 801a026:	e003      	b.n	801a030 <_printf_i+0xc4>
 801a028:	0645      	lsls	r5, r0, #25
 801a02a:	d5fb      	bpl.n	801a024 <_printf_i+0xb8>
 801a02c:	f9b3 5000 	ldrsh.w	r5, [r3]
 801a030:	2d00      	cmp	r5, #0
 801a032:	da03      	bge.n	801a03c <_printf_i+0xd0>
 801a034:	232d      	movs	r3, #45	@ 0x2d
 801a036:	426d      	negs	r5, r5
 801a038:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 801a03c:	4859      	ldr	r0, [pc, #356]	@ (801a1a4 <_printf_i+0x238>)
 801a03e:	230a      	movs	r3, #10
 801a040:	e011      	b.n	801a066 <_printf_i+0xfa>
 801a042:	6821      	ldr	r1, [r4, #0]
 801a044:	6833      	ldr	r3, [r6, #0]
 801a046:	0608      	lsls	r0, r1, #24
 801a048:	f853 5b04 	ldr.w	r5, [r3], #4
 801a04c:	d402      	bmi.n	801a054 <_printf_i+0xe8>
 801a04e:	0649      	lsls	r1, r1, #25
 801a050:	bf48      	it	mi
 801a052:	b2ad      	uxthmi	r5, r5
 801a054:	2f6f      	cmp	r7, #111	@ 0x6f
 801a056:	4853      	ldr	r0, [pc, #332]	@ (801a1a4 <_printf_i+0x238>)
 801a058:	6033      	str	r3, [r6, #0]
 801a05a:	bf14      	ite	ne
 801a05c:	230a      	movne	r3, #10
 801a05e:	2308      	moveq	r3, #8
 801a060:	2100      	movs	r1, #0
 801a062:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 801a066:	6866      	ldr	r6, [r4, #4]
 801a068:	60a6      	str	r6, [r4, #8]
 801a06a:	2e00      	cmp	r6, #0
 801a06c:	bfa2      	ittt	ge
 801a06e:	6821      	ldrge	r1, [r4, #0]
 801a070:	f021 0104 	bicge.w	r1, r1, #4
 801a074:	6021      	strge	r1, [r4, #0]
 801a076:	b90d      	cbnz	r5, 801a07c <_printf_i+0x110>
 801a078:	2e00      	cmp	r6, #0
 801a07a:	d04b      	beq.n	801a114 <_printf_i+0x1a8>
 801a07c:	4616      	mov	r6, r2
 801a07e:	fbb5 f1f3 	udiv	r1, r5, r3
 801a082:	fb03 5711 	mls	r7, r3, r1, r5
 801a086:	5dc7      	ldrb	r7, [r0, r7]
 801a088:	f806 7d01 	strb.w	r7, [r6, #-1]!
 801a08c:	462f      	mov	r7, r5
 801a08e:	42bb      	cmp	r3, r7
 801a090:	460d      	mov	r5, r1
 801a092:	d9f4      	bls.n	801a07e <_printf_i+0x112>
 801a094:	2b08      	cmp	r3, #8
 801a096:	d10b      	bne.n	801a0b0 <_printf_i+0x144>
 801a098:	6823      	ldr	r3, [r4, #0]
 801a09a:	07df      	lsls	r7, r3, #31
 801a09c:	d508      	bpl.n	801a0b0 <_printf_i+0x144>
 801a09e:	6923      	ldr	r3, [r4, #16]
 801a0a0:	6861      	ldr	r1, [r4, #4]
 801a0a2:	4299      	cmp	r1, r3
 801a0a4:	bfde      	ittt	le
 801a0a6:	2330      	movle	r3, #48	@ 0x30
 801a0a8:	f806 3c01 	strble.w	r3, [r6, #-1]
 801a0ac:	f106 36ff 	addle.w	r6, r6, #4294967295
 801a0b0:	1b92      	subs	r2, r2, r6
 801a0b2:	6122      	str	r2, [r4, #16]
 801a0b4:	f8cd a000 	str.w	sl, [sp]
 801a0b8:	464b      	mov	r3, r9
 801a0ba:	aa03      	add	r2, sp, #12
 801a0bc:	4621      	mov	r1, r4
 801a0be:	4640      	mov	r0, r8
 801a0c0:	f7ff fee6 	bl	8019e90 <_printf_common>
 801a0c4:	3001      	adds	r0, #1
 801a0c6:	d14a      	bne.n	801a15e <_printf_i+0x1f2>
 801a0c8:	f04f 30ff 	mov.w	r0, #4294967295
 801a0cc:	b004      	add	sp, #16
 801a0ce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801a0d2:	6823      	ldr	r3, [r4, #0]
 801a0d4:	f043 0320 	orr.w	r3, r3, #32
 801a0d8:	6023      	str	r3, [r4, #0]
 801a0da:	4833      	ldr	r0, [pc, #204]	@ (801a1a8 <_printf_i+0x23c>)
 801a0dc:	2778      	movs	r7, #120	@ 0x78
 801a0de:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 801a0e2:	6823      	ldr	r3, [r4, #0]
 801a0e4:	6831      	ldr	r1, [r6, #0]
 801a0e6:	061f      	lsls	r7, r3, #24
 801a0e8:	f851 5b04 	ldr.w	r5, [r1], #4
 801a0ec:	d402      	bmi.n	801a0f4 <_printf_i+0x188>
 801a0ee:	065f      	lsls	r7, r3, #25
 801a0f0:	bf48      	it	mi
 801a0f2:	b2ad      	uxthmi	r5, r5
 801a0f4:	6031      	str	r1, [r6, #0]
 801a0f6:	07d9      	lsls	r1, r3, #31
 801a0f8:	bf44      	itt	mi
 801a0fa:	f043 0320 	orrmi.w	r3, r3, #32
 801a0fe:	6023      	strmi	r3, [r4, #0]
 801a100:	b11d      	cbz	r5, 801a10a <_printf_i+0x19e>
 801a102:	2310      	movs	r3, #16
 801a104:	e7ac      	b.n	801a060 <_printf_i+0xf4>
 801a106:	4827      	ldr	r0, [pc, #156]	@ (801a1a4 <_printf_i+0x238>)
 801a108:	e7e9      	b.n	801a0de <_printf_i+0x172>
 801a10a:	6823      	ldr	r3, [r4, #0]
 801a10c:	f023 0320 	bic.w	r3, r3, #32
 801a110:	6023      	str	r3, [r4, #0]
 801a112:	e7f6      	b.n	801a102 <_printf_i+0x196>
 801a114:	4616      	mov	r6, r2
 801a116:	e7bd      	b.n	801a094 <_printf_i+0x128>
 801a118:	6833      	ldr	r3, [r6, #0]
 801a11a:	6825      	ldr	r5, [r4, #0]
 801a11c:	6961      	ldr	r1, [r4, #20]
 801a11e:	1d18      	adds	r0, r3, #4
 801a120:	6030      	str	r0, [r6, #0]
 801a122:	062e      	lsls	r6, r5, #24
 801a124:	681b      	ldr	r3, [r3, #0]
 801a126:	d501      	bpl.n	801a12c <_printf_i+0x1c0>
 801a128:	6019      	str	r1, [r3, #0]
 801a12a:	e002      	b.n	801a132 <_printf_i+0x1c6>
 801a12c:	0668      	lsls	r0, r5, #25
 801a12e:	d5fb      	bpl.n	801a128 <_printf_i+0x1bc>
 801a130:	8019      	strh	r1, [r3, #0]
 801a132:	2300      	movs	r3, #0
 801a134:	6123      	str	r3, [r4, #16]
 801a136:	4616      	mov	r6, r2
 801a138:	e7bc      	b.n	801a0b4 <_printf_i+0x148>
 801a13a:	6833      	ldr	r3, [r6, #0]
 801a13c:	1d1a      	adds	r2, r3, #4
 801a13e:	6032      	str	r2, [r6, #0]
 801a140:	681e      	ldr	r6, [r3, #0]
 801a142:	6862      	ldr	r2, [r4, #4]
 801a144:	2100      	movs	r1, #0
 801a146:	4630      	mov	r0, r6
 801a148:	f7e6 f8ca 	bl	80002e0 <memchr>
 801a14c:	b108      	cbz	r0, 801a152 <_printf_i+0x1e6>
 801a14e:	1b80      	subs	r0, r0, r6
 801a150:	6060      	str	r0, [r4, #4]
 801a152:	6863      	ldr	r3, [r4, #4]
 801a154:	6123      	str	r3, [r4, #16]
 801a156:	2300      	movs	r3, #0
 801a158:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 801a15c:	e7aa      	b.n	801a0b4 <_printf_i+0x148>
 801a15e:	6923      	ldr	r3, [r4, #16]
 801a160:	4632      	mov	r2, r6
 801a162:	4649      	mov	r1, r9
 801a164:	4640      	mov	r0, r8
 801a166:	47d0      	blx	sl
 801a168:	3001      	adds	r0, #1
 801a16a:	d0ad      	beq.n	801a0c8 <_printf_i+0x15c>
 801a16c:	6823      	ldr	r3, [r4, #0]
 801a16e:	079b      	lsls	r3, r3, #30
 801a170:	d413      	bmi.n	801a19a <_printf_i+0x22e>
 801a172:	68e0      	ldr	r0, [r4, #12]
 801a174:	9b03      	ldr	r3, [sp, #12]
 801a176:	4298      	cmp	r0, r3
 801a178:	bfb8      	it	lt
 801a17a:	4618      	movlt	r0, r3
 801a17c:	e7a6      	b.n	801a0cc <_printf_i+0x160>
 801a17e:	2301      	movs	r3, #1
 801a180:	4632      	mov	r2, r6
 801a182:	4649      	mov	r1, r9
 801a184:	4640      	mov	r0, r8
 801a186:	47d0      	blx	sl
 801a188:	3001      	adds	r0, #1
 801a18a:	d09d      	beq.n	801a0c8 <_printf_i+0x15c>
 801a18c:	3501      	adds	r5, #1
 801a18e:	68e3      	ldr	r3, [r4, #12]
 801a190:	9903      	ldr	r1, [sp, #12]
 801a192:	1a5b      	subs	r3, r3, r1
 801a194:	42ab      	cmp	r3, r5
 801a196:	dcf2      	bgt.n	801a17e <_printf_i+0x212>
 801a198:	e7eb      	b.n	801a172 <_printf_i+0x206>
 801a19a:	2500      	movs	r5, #0
 801a19c:	f104 0619 	add.w	r6, r4, #25
 801a1a0:	e7f5      	b.n	801a18e <_printf_i+0x222>
 801a1a2:	bf00      	nop
 801a1a4:	0801c371 	.word	0x0801c371
 801a1a8:	0801c382 	.word	0x0801c382

0801a1ac <__swhatbuf_r>:
 801a1ac:	b570      	push	{r4, r5, r6, lr}
 801a1ae:	460c      	mov	r4, r1
 801a1b0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801a1b4:	2900      	cmp	r1, #0
 801a1b6:	b096      	sub	sp, #88	@ 0x58
 801a1b8:	4615      	mov	r5, r2
 801a1ba:	461e      	mov	r6, r3
 801a1bc:	da0d      	bge.n	801a1da <__swhatbuf_r+0x2e>
 801a1be:	89a3      	ldrh	r3, [r4, #12]
 801a1c0:	f013 0f80 	tst.w	r3, #128	@ 0x80
 801a1c4:	f04f 0100 	mov.w	r1, #0
 801a1c8:	bf14      	ite	ne
 801a1ca:	2340      	movne	r3, #64	@ 0x40
 801a1cc:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 801a1d0:	2000      	movs	r0, #0
 801a1d2:	6031      	str	r1, [r6, #0]
 801a1d4:	602b      	str	r3, [r5, #0]
 801a1d6:	b016      	add	sp, #88	@ 0x58
 801a1d8:	bd70      	pop	{r4, r5, r6, pc}
 801a1da:	466a      	mov	r2, sp
 801a1dc:	f000 f8ac 	bl	801a338 <_fstat_r>
 801a1e0:	2800      	cmp	r0, #0
 801a1e2:	dbec      	blt.n	801a1be <__swhatbuf_r+0x12>
 801a1e4:	9901      	ldr	r1, [sp, #4]
 801a1e6:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 801a1ea:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 801a1ee:	4259      	negs	r1, r3
 801a1f0:	4159      	adcs	r1, r3
 801a1f2:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 801a1f6:	e7eb      	b.n	801a1d0 <__swhatbuf_r+0x24>

0801a1f8 <__smakebuf_r>:
 801a1f8:	898b      	ldrh	r3, [r1, #12]
 801a1fa:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801a1fc:	079d      	lsls	r5, r3, #30
 801a1fe:	4606      	mov	r6, r0
 801a200:	460c      	mov	r4, r1
 801a202:	d507      	bpl.n	801a214 <__smakebuf_r+0x1c>
 801a204:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 801a208:	6023      	str	r3, [r4, #0]
 801a20a:	6123      	str	r3, [r4, #16]
 801a20c:	2301      	movs	r3, #1
 801a20e:	6163      	str	r3, [r4, #20]
 801a210:	b003      	add	sp, #12
 801a212:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801a214:	ab01      	add	r3, sp, #4
 801a216:	466a      	mov	r2, sp
 801a218:	f7ff ffc8 	bl	801a1ac <__swhatbuf_r>
 801a21c:	9f00      	ldr	r7, [sp, #0]
 801a21e:	4605      	mov	r5, r0
 801a220:	4639      	mov	r1, r7
 801a222:	4630      	mov	r0, r6
 801a224:	f7ff f80a 	bl	801923c <_malloc_r>
 801a228:	b948      	cbnz	r0, 801a23e <__smakebuf_r+0x46>
 801a22a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801a22e:	059a      	lsls	r2, r3, #22
 801a230:	d4ee      	bmi.n	801a210 <__smakebuf_r+0x18>
 801a232:	f023 0303 	bic.w	r3, r3, #3
 801a236:	f043 0302 	orr.w	r3, r3, #2
 801a23a:	81a3      	strh	r3, [r4, #12]
 801a23c:	e7e2      	b.n	801a204 <__smakebuf_r+0xc>
 801a23e:	89a3      	ldrh	r3, [r4, #12]
 801a240:	6020      	str	r0, [r4, #0]
 801a242:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 801a246:	81a3      	strh	r3, [r4, #12]
 801a248:	9b01      	ldr	r3, [sp, #4]
 801a24a:	e9c4 0704 	strd	r0, r7, [r4, #16]
 801a24e:	b15b      	cbz	r3, 801a268 <__smakebuf_r+0x70>
 801a250:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801a254:	4630      	mov	r0, r6
 801a256:	f000 f881 	bl	801a35c <_isatty_r>
 801a25a:	b128      	cbz	r0, 801a268 <__smakebuf_r+0x70>
 801a25c:	89a3      	ldrh	r3, [r4, #12]
 801a25e:	f023 0303 	bic.w	r3, r3, #3
 801a262:	f043 0301 	orr.w	r3, r3, #1
 801a266:	81a3      	strh	r3, [r4, #12]
 801a268:	89a3      	ldrh	r3, [r4, #12]
 801a26a:	431d      	orrs	r5, r3
 801a26c:	81a5      	strh	r5, [r4, #12]
 801a26e:	e7cf      	b.n	801a210 <__smakebuf_r+0x18>

0801a270 <_putc_r>:
 801a270:	b570      	push	{r4, r5, r6, lr}
 801a272:	460d      	mov	r5, r1
 801a274:	4614      	mov	r4, r2
 801a276:	4606      	mov	r6, r0
 801a278:	b118      	cbz	r0, 801a282 <_putc_r+0x12>
 801a27a:	6a03      	ldr	r3, [r0, #32]
 801a27c:	b90b      	cbnz	r3, 801a282 <_putc_r+0x12>
 801a27e:	f7ff fa53 	bl	8019728 <__sinit>
 801a282:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 801a284:	07d8      	lsls	r0, r3, #31
 801a286:	d405      	bmi.n	801a294 <_putc_r+0x24>
 801a288:	89a3      	ldrh	r3, [r4, #12]
 801a28a:	0599      	lsls	r1, r3, #22
 801a28c:	d402      	bmi.n	801a294 <_putc_r+0x24>
 801a28e:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 801a290:	f7ff fc5b 	bl	8019b4a <__retarget_lock_acquire_recursive>
 801a294:	68a3      	ldr	r3, [r4, #8]
 801a296:	3b01      	subs	r3, #1
 801a298:	2b00      	cmp	r3, #0
 801a29a:	60a3      	str	r3, [r4, #8]
 801a29c:	da05      	bge.n	801a2aa <_putc_r+0x3a>
 801a29e:	69a2      	ldr	r2, [r4, #24]
 801a2a0:	4293      	cmp	r3, r2
 801a2a2:	db12      	blt.n	801a2ca <_putc_r+0x5a>
 801a2a4:	b2eb      	uxtb	r3, r5
 801a2a6:	2b0a      	cmp	r3, #10
 801a2a8:	d00f      	beq.n	801a2ca <_putc_r+0x5a>
 801a2aa:	6823      	ldr	r3, [r4, #0]
 801a2ac:	1c5a      	adds	r2, r3, #1
 801a2ae:	6022      	str	r2, [r4, #0]
 801a2b0:	701d      	strb	r5, [r3, #0]
 801a2b2:	b2ed      	uxtb	r5, r5
 801a2b4:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 801a2b6:	07da      	lsls	r2, r3, #31
 801a2b8:	d405      	bmi.n	801a2c6 <_putc_r+0x56>
 801a2ba:	89a3      	ldrh	r3, [r4, #12]
 801a2bc:	059b      	lsls	r3, r3, #22
 801a2be:	d402      	bmi.n	801a2c6 <_putc_r+0x56>
 801a2c0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 801a2c2:	f7ff fc43 	bl	8019b4c <__retarget_lock_release_recursive>
 801a2c6:	4628      	mov	r0, r5
 801a2c8:	bd70      	pop	{r4, r5, r6, pc}
 801a2ca:	4629      	mov	r1, r5
 801a2cc:	4622      	mov	r2, r4
 801a2ce:	4630      	mov	r0, r6
 801a2d0:	f7ff fabd 	bl	801984e <__swbuf_r>
 801a2d4:	4605      	mov	r5, r0
 801a2d6:	e7ed      	b.n	801a2b4 <_putc_r+0x44>

0801a2d8 <_raise_r>:
 801a2d8:	291f      	cmp	r1, #31
 801a2da:	b538      	push	{r3, r4, r5, lr}
 801a2dc:	4605      	mov	r5, r0
 801a2de:	460c      	mov	r4, r1
 801a2e0:	d904      	bls.n	801a2ec <_raise_r+0x14>
 801a2e2:	2316      	movs	r3, #22
 801a2e4:	6003      	str	r3, [r0, #0]
 801a2e6:	f04f 30ff 	mov.w	r0, #4294967295
 801a2ea:	bd38      	pop	{r3, r4, r5, pc}
 801a2ec:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 801a2ee:	b112      	cbz	r2, 801a2f6 <_raise_r+0x1e>
 801a2f0:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 801a2f4:	b94b      	cbnz	r3, 801a30a <_raise_r+0x32>
 801a2f6:	4628      	mov	r0, r5
 801a2f8:	f000 f852 	bl	801a3a0 <_getpid_r>
 801a2fc:	4622      	mov	r2, r4
 801a2fe:	4601      	mov	r1, r0
 801a300:	4628      	mov	r0, r5
 801a302:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801a306:	f000 b839 	b.w	801a37c <_kill_r>
 801a30a:	2b01      	cmp	r3, #1
 801a30c:	d00a      	beq.n	801a324 <_raise_r+0x4c>
 801a30e:	1c59      	adds	r1, r3, #1
 801a310:	d103      	bne.n	801a31a <_raise_r+0x42>
 801a312:	2316      	movs	r3, #22
 801a314:	6003      	str	r3, [r0, #0]
 801a316:	2001      	movs	r0, #1
 801a318:	e7e7      	b.n	801a2ea <_raise_r+0x12>
 801a31a:	2100      	movs	r1, #0
 801a31c:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 801a320:	4620      	mov	r0, r4
 801a322:	4798      	blx	r3
 801a324:	2000      	movs	r0, #0
 801a326:	e7e0      	b.n	801a2ea <_raise_r+0x12>

0801a328 <raise>:
 801a328:	4b02      	ldr	r3, [pc, #8]	@ (801a334 <raise+0xc>)
 801a32a:	4601      	mov	r1, r0
 801a32c:	6818      	ldr	r0, [r3, #0]
 801a32e:	f7ff bfd3 	b.w	801a2d8 <_raise_r>
 801a332:	bf00      	nop
 801a334:	24000064 	.word	0x24000064

0801a338 <_fstat_r>:
 801a338:	b538      	push	{r3, r4, r5, lr}
 801a33a:	4d07      	ldr	r5, [pc, #28]	@ (801a358 <_fstat_r+0x20>)
 801a33c:	2300      	movs	r3, #0
 801a33e:	4604      	mov	r4, r0
 801a340:	4608      	mov	r0, r1
 801a342:	4611      	mov	r1, r2
 801a344:	602b      	str	r3, [r5, #0]
 801a346:	f7e7 fc32 	bl	8001bae <_fstat>
 801a34a:	1c43      	adds	r3, r0, #1
 801a34c:	d102      	bne.n	801a354 <_fstat_r+0x1c>
 801a34e:	682b      	ldr	r3, [r5, #0]
 801a350:	b103      	cbz	r3, 801a354 <_fstat_r+0x1c>
 801a352:	6023      	str	r3, [r4, #0]
 801a354:	bd38      	pop	{r3, r4, r5, pc}
 801a356:	bf00      	nop
 801a358:	2400211c 	.word	0x2400211c

0801a35c <_isatty_r>:
 801a35c:	b538      	push	{r3, r4, r5, lr}
 801a35e:	4d06      	ldr	r5, [pc, #24]	@ (801a378 <_isatty_r+0x1c>)
 801a360:	2300      	movs	r3, #0
 801a362:	4604      	mov	r4, r0
 801a364:	4608      	mov	r0, r1
 801a366:	602b      	str	r3, [r5, #0]
 801a368:	f7e7 fc31 	bl	8001bce <_isatty>
 801a36c:	1c43      	adds	r3, r0, #1
 801a36e:	d102      	bne.n	801a376 <_isatty_r+0x1a>
 801a370:	682b      	ldr	r3, [r5, #0]
 801a372:	b103      	cbz	r3, 801a376 <_isatty_r+0x1a>
 801a374:	6023      	str	r3, [r4, #0]
 801a376:	bd38      	pop	{r3, r4, r5, pc}
 801a378:	2400211c 	.word	0x2400211c

0801a37c <_kill_r>:
 801a37c:	b538      	push	{r3, r4, r5, lr}
 801a37e:	4d07      	ldr	r5, [pc, #28]	@ (801a39c <_kill_r+0x20>)
 801a380:	2300      	movs	r3, #0
 801a382:	4604      	mov	r4, r0
 801a384:	4608      	mov	r0, r1
 801a386:	4611      	mov	r1, r2
 801a388:	602b      	str	r3, [r5, #0]
 801a38a:	f7e7 fbb0 	bl	8001aee <_kill>
 801a38e:	1c43      	adds	r3, r0, #1
 801a390:	d102      	bne.n	801a398 <_kill_r+0x1c>
 801a392:	682b      	ldr	r3, [r5, #0]
 801a394:	b103      	cbz	r3, 801a398 <_kill_r+0x1c>
 801a396:	6023      	str	r3, [r4, #0]
 801a398:	bd38      	pop	{r3, r4, r5, pc}
 801a39a:	bf00      	nop
 801a39c:	2400211c 	.word	0x2400211c

0801a3a0 <_getpid_r>:
 801a3a0:	f7e7 bb9d 	b.w	8001ade <_getpid>

0801a3a4 <_init>:
 801a3a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801a3a6:	bf00      	nop
 801a3a8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801a3aa:	bc08      	pop	{r3}
 801a3ac:	469e      	mov	lr, r3
 801a3ae:	4770      	bx	lr

0801a3b0 <_fini>:
 801a3b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801a3b2:	bf00      	nop
 801a3b4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801a3b6:	bc08      	pop	{r3}
 801a3b8:	469e      	mov	lr, r3
 801a3ba:	4770      	bx	lr
